00000                 | 
00000                 | #line 1 "D:/Programowanie/P2-Retromachine-Basic/basic051.p2asm"
00000                 | con
00000                 | 	_clkfreq = 340500000
00000                 | 	_clkmode = 27175163
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	HEAPSIZE = 96000
00000                 | 	ver = 49
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_channel = 44
00000                 | 	token_skip = 45
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_gosub = 169
00000                 | 	token_return = 170
00000                 | 	token_progend = 171
00000                 | 	token_pop = 172
00000                 | 	token_log = 173
00000                 | 	token_changefreq = 174
00000                 | 	token_changevol = 175
00000                 | 	token_changewave = 176
00000                 | 	token_changepan = 177
00000                 | 	token_shutup = 178
00000                 | 	token_open = 179
00000                 | 	token_close = 180
00000                 | 	token_input = 181
00000                 | 	token_read = 182
00000                 | 	token_data = 183
00000                 | 	token_blit = 185
00000                 | 	token_get = 187
00000                 | 	token_put = 188
00000                 | 	token_enter = 189
00000                 | 	token_rem = 190
00000                 | 	token_round = 191
00000                 | 	token_coginit = 192
00000                 | 	token_on = 193
00000                 | 	token_delete = 194
00000                 | 	token_cd = 195
00000                 | 	token_copy = 196
00000                 | 	token_framebuf = 197
00000                 | 	token_mkdir = 198
00000                 | 	token_restore = 199
00000                 | 	token_padx = 200
00000                 | 	token_pady = 201
00000                 | 	token_padz = 202
00000                 | 	token_padh = 203
00000                 | 	token_padrx = 204
00000                 | 	token_padry = 205
00000                 | 	token_padrz = 206
00000                 | 	token_cogstop = 207
00000                 | 	token_memlo = 208
00000                 | 	token_memtop = 209
00000                 | 	token_setcolor = 210
00000                 | 	token_getcolor = 211
00000                 | 	token_restorepalette = 212
00000                 | 	token_pads = 213
00000                 | 	token_padw = 214
00000                 | 	token_findfirst = 215
00000                 | 	token_findnext = 216
00000                 | 	token_defchar = 217
00000                 | 	token_setamode = 218
00000                 | 	token_getrealfreq = 219
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	result_channel = 44
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1024
00000                 | 	maxstack = 512
00000                 | 	maxfor = 64
00000                 | 	maxgosub = 64
00000                 | 	memlo = 524288
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 340500000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $19ea8fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 7A 06 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 03 90 5D |  if_ne	jmp	#spininit
0040c 002 3C F1 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 02 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 54 CF 80 FF 
00420 007 00 F0 65 FD | 	hubset	##27175160
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 54 CF 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##27175163
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e CF 25 8A FF 
00440 00f 14 40 6C FC | 	wrlong	##340500000, #20
00444 010 BC 02 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
006fc 0be 00 00 00 00 
00700 0bf 00 00 00 00 | 	orgf	192
00704 0c0             | skip_clock_set_
00704 0c0 C4 10 A2 FD | 	call	#_program
00708 0c1             | cogexit
00708 0c1 38 01 80 FF 
0070c 0c2 1F 00 66 FD | 	waitx	##160000
00710 0c3 01 92 62 FD | 	cogid	arg01
00714 0c4 03 92 62 FD | 	cogstop	arg01
00718 0c5             | spininit
00718 0c5 61 65 06 FB | 	rdlong	objptr, ptra++
0071c 0c6 61 7B 06 FB | 	rdlong	result1, ptra++
00720 0c7 28 06 64 FD | 	setq	#3
00724 0c8 00 93 06 FB | 	rdlong	arg01, ptra
00728 0c9 04 F0 87 F1 | 	sub	ptra, #4
0072c 0ca 2D 7A 62 FD | 	call	result1
00730 0cb D4 FF 9F FD | 	jmp	#cogexit
00734 0cc             | FCACHE_LOAD_
00734 0cc F9 AD 01 F6 |     mov	fcache_tmpb_,ptrb
00738 0cd 2B F2 63 FD |     pop	ptrb
0073c 0ce D5 EC 8B F9 |     altd	pa,ret_instr_
00740 0cf D5 00 00 F6 |     mov	 0-0, ret_instr_
00744 0d0 28 EC 63 FD |     setq	pa
00748 0d1 E1 01 04 FB |     rdlong	$0, ptrb++
0074c 0d2 2A F2 63 FD |     push	ptrb
00750 0d3 D6 F2 03 F6 |     mov ptrb,fcache_tmpb_
00754 0d4 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00758 0d5             | ret_instr_
00758 0d5 00 FE 07 02 |     _ret_ cmp inb,#0
0075c 0d6             | fcache_tmpb_
0075c 0d6 00 00 00 00 |     long 0
00760 0d7             | fcache_load_ptr_
00760 0d7 CC 00 00 00 |     long FCACHE_LOAD_
00764 0d8             | builtin_bytefill_
00764 0d8 01 96 56 F0 |         shr	arg03, #1 wc
00768 0d9 49 95 42 CC |  if_c   wrbyte	arg02, arg01
0076c 0da 01 92 06 C1 |  if_c   add	arg01, #1
00770 0db 00 94 FE F9 |         movbyts	arg02, #0
00774 0dc             | builtin_wordfill_
00774 0dc 01 96 56 F0 |         shr	arg03, #1 wc
00778 0dd 49 95 52 CC |  if_c   wrword	arg02, arg01
0077c 0de 02 92 06 C1 |  if_c   add	arg01, #2
00780 0df 4A 95 2A F9 |         setword	arg02, arg02, #1
00784 0e0             | builtin_longfill_
00784 0e0 49 01 88 FC |         wrfast	#0,arg01
00788 0e1 00 96 0E F2 |         cmp	arg03, #0 wz
0078c 0e2 4B 03 D8 5C |  if_nz  rep	#1, arg03
00790 0e3 17 94 62 5D |  if_nz  wflong	arg02
00794 0e4 2D 00 64 FD |         ret
00798 0e5             | COUNT_
00798 0e5 00 00 00 00 |     long 0
0079c 0e6             | RETADDR_
0079c 0e6 00 00 00 00 |     long 0
007a0 0e7             | fp
007a0 0e7 00 00 00 00 |     long 0
007a4 0e8             | pushregs_
007a4 0e8 2B EC 63 FD |     pop  pa
007a8 0e9 2B CC 61 FD |     pop  RETADDR_
007ac 0ea 03 CA 95 FB |     tjz  COUNT_, #pushregs_done_
007b0 0eb FF CB 8D F9 |     altd  COUNT_, #511
007b4 0ec 28 00 64 FD |     setq #0-0
007b8 0ed 61 A7 66 FC |     wrlong local01, ptra++
007bc 0ee             | pushregs_done_
007bc 0ee 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
007c0 0ef 61 CB 65 FC |     wrlong COUNT_, ptra++
007c4 0f0 F8 CF 01 F6 |     mov    fp, ptra
007c8 0f1 2C EC 63 FD |     jmp  pa
007cc 0f2             |  popregs_
007cc 0f2 2B EC 63 FD |     pop    pa
007d0 0f3 28 04 64 FD |     setq   #2
007d4 0f4 5F CB 05 FB |     rdlong COUNT_, --ptra
007d8 0f5 02 CA 75 FB |     djf    COUNT_, #popregs__ret
007dc 0f6 28 CA 61 FD |     setq   COUNT_
007e0 0f7 5F A7 06 FB |     rdlong local01, --ptra
007e4 0f8             | popregs__ret
007e4 0f8 2A CC 61 FD |     push   RETADDR_
007e8 0f9 2C EC 63 FD |     jmp    pa
007ec 0fa             | 
007ec 0fa             | divide_
007ec 0fa 88 11 5B F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
007f0 0fb 6C 62 62 FD |        wrc     itmp2_                         'store sign of y
007f4 0fc 87 0F 53 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
007f8 0fd 88 0F 13 FD |        qdiv    muldiva_, muldivb_             'queue divide
007fc 0fe 01 62 66 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00800 0ff 18 10 63 FD |        getqx   muldivb_                       'get quotient
00804 100 19 0E 63 FD |        getqy   muldiva_                       'get remainder
00808 101 87 0F 83 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0080c 102 00 62 16 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00810 103 88 11 83 06 |  _ret_ negc    muldivb_,muldivb_     
00814 104             | __pc long 0
00814 104 00 00 00 00 
00818 105             | __setjmp
00818 105 2B 08 62 FD |     pop __pc
0081c 106 00 7A 06 F6 |     mov result1, #0
00820 107 00 7C 06 F6 |     mov result2, #0
00824 108 49 5D 02 F6 |     mov abortchain, arg01
00828 109 49 CF 61 FC |     wrlong fp, arg01
0082c 10a 04 92 06 F1 |     add arg01, #4
00830 10b 49 F1 63 FC |     wrlong ptra, arg01
00834 10c 04 92 06 F1 |     add arg01, #4
00838 10d 49 65 62 FC |     wrlong objptr, arg01
0083c 10e 04 92 06 F1 |     add arg01, #4
00840 10f 49 09 62 FC |     wrlong __pc, arg01
00844 110 2C 08 62 FD |     jmp __pc
00848 111             | __unwind_pc long 0
00848 111 00 00 00 00 
0084c 112             | __unwind_stack
0084c 112 2B 22 62 FD |    pop  __unwind_pc
00850 113             | __unwind_loop
00850 113 4A 93 0A F2 |    cmp  arg01, arg02 wz
00854 114 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00858 115 49 F1 03 F6 |    mov   ptra, arg01
0085c 116 6C FF BF FD |    call  #popregs_
00860 117 E7 92 02 F6 |    mov   arg01, fp
00864 118 E8 FF 9F FD |    jmp   #__unwind_loop
00868 119             | __unwind_stack_ret
00868 119 2C 22 62 FD |    jmp  __unwind_pc
0086c 11a             | __longjmp
0086c 11a 2B 08 62 FD |     pop __pc
00870 11b 00 92 0E F2 |     cmp    arg01, #0 wz
00874 11c 30 00 90 AD |  if_z jmp #nocatch
00878 11d 4A 7B 02 F6 |     mov result1, arg02
0087c 11e 01 7C 06 F6 |     mov result2, #1
00880 11f 49 95 02 FB |     rdlong arg02, arg01
00884 120 04 92 06 F1 |     add arg01, #4
00888 121 49 F1 03 FB |     rdlong ptra, arg01
0088c 122 04 92 06 F1 |     add arg01, #4
00890 123 49 65 02 FB |     rdlong objptr, arg01
00894 124 04 92 06 F1 |     add arg01, #4
00898 125 49 09 02 FB |     rdlong __pc, arg01
0089c 126 E7 92 02 F6 |     mov arg01, fp
008a0 127 A8 FF BF FD |     call #__unwind_stack
008a4 128             | __longjmp_ret
008a4 128 2C 08 62 FD |     jmp  __pc
008a8 129             | nocatch
008a8 129 00 96 0E F2 |     cmp arg03, #0 wz
008ac 12a 58 FE 9F AD |  if_z jmp #cogexit
008b0 12b F0 FF 9F FD |     jmp #__longjmp_ret
008b4 12c             | 
008b4 12c             | __heap_ptr
008b4 12c 3C F4 03 00 | 	long	@__heap_base
008b8 12d             | __methods__
008b8 12d D8 F0 03 00 | 	long	@__methodtable__
008bc 12e             | abortchain
008bc 12e 00 00 00 00 | 	long	0
008c0 12f             | entryptr__
008c0 12f 04 04 00 00 | 	long	@entry
008c4 130             | itmp1_
008c4 130 00 00 00 00 | 	long	0
008c8 131             | itmp2_
008c8 131 00 00 00 00 | 	long	0
008cc 132             | objptr
008cc 132 44 6B 05 00 | 	long	@objmem
008d0 133             | ptr__Audio2_004_spin2_dat__
008d0 133 20 E0 03 00 | 	long	@_Audio2_004_spin2_dat_
008d4 134             | ptr__Hg010b_4_spin2_dat__
008d4 134 D8 68 03 00 | 	long	@_Hg010b_4_spin2_dat_
008d8 135             | ptr___system__dat__
008d8 135 00 E4 03 00 | 	long	@__system__dat_
008dc 136             | ptr__dat__
008dc 136 70 37 03 00 | 	long	@_dat_
008e0 137             | ptr__fatfs_cc_dat__
008e0 137 48 EB 03 00 | 	long	@_fatfs_cc_dat_
008e4 138             | ptr__housekeeper_
008e4 138 E4 15 00 00 | 	long	@_housekeeper
008e8 139             | ptr__psram4_spin2_dat__
008e8 139 40 A6 03 00 | 	long	@_psram4_spin2_dat_
008ec 13a             | ptr__psram4drv_spin2_dat__
008ec 13a 28 A8 03 00 | 	long	@_psram4drv_spin2_dat_
008f0 13b             | ptr__usbnew_spin2_dat__
008f0 13b 98 B5 03 00 | 	long	@_usbnew_spin2_dat_
008f4 13c             | ptr_stackspace_
008f4 13c 40 14 06 00 | 	long	@stackspace
008f8 13d             | result1
008f8 13d 00 00 00 00 | 	long	0
008fc 13e             | result2
008fc 13e 01 00 00 00 | 	long	1
00900 13f             | result3
00900 13f 02 00 00 00 | 	long	2
00904 140             | COG_BSS_START
00904 140             | 	fit	480
00904                 | 	orgh
00904                 | hubentry
00904                 | 
00904                 | ' 
00904                 | ' '-------------------------------------------------------------------------------------------------------- 
00904                 | ' '------------------------------------ MAIN LOOP END -----------------------------------------------------
00904                 | ' '--------------------------------------------------------------------------------------------------------
00904                 | ' 
00904                 | ' ''-------------------------------------------------------------------------------------------------------
00904                 | ' '                     A full screen editor for programming and entering data
00904                 | ' ''-------------------------------------------------------------------------------------------------------
00904                 | ' 
00904                 | ' function edit() as string
00904                 | _edit
00904     1B CA 05 F6 | 	mov	COUNT_, #27
00908     E8 00 A0 FD | 	call	#pushregs_
0090c     00 A6 06 F6 | 	mov	local01, #0
00910     00 A8 06 F6 | 	mov	local02, #0
00914     00 AA 06 F6 | 	mov	local03, #0
00918     00 AC 06 F6 | 	mov	local04, #0
0091c                 | ' rpt=0 : rptcnt=0 : key=0 : key2=0 : key3=0 : key4=0 
0091c                 | ' do
0091c                 | LR__0001
0091c     01 92 06 F6 | 	mov	arg01, #1
00920     F4 20 B2 FD | 	call	#_Hg010b_4_spin2_waitvbl
00924     58 35 B2 FD | 	call	#_usbnew_spin2_get_key
00928     3D AF 02 F6 | 	mov	local05, result1
0092c                 | '   return hkbd_led_rep
0092c     13 00 00 FF 
00930     E0 77 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##10208
00934     3B 7B C2 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
00938     13 00 00 FF 
0093c     E0 77 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10208
00940     54 00 00 FF 
00944     BC 64 06 F1 | 	add	objptr, ##43196
00948     32 7B 62 FC | 	wrlong	result1, objptr
0094c     54 00 00 FF 
00950     BC 64 86 F1 | 	sub	objptr, ##43196
00954                 | ' if key>0 andalso key<4 andalso keyclick=1 then audio.play16(7,@atari2_spl,43,4096,1758,0,300) : audio.stop(7)
00954     01 AE 16 F2 | 	cmp	local05, #1 wc
00958     88 00 90 CD |  if_b	jmp	#LR__0002
0095c     04 AE 16 F2 | 	cmp	local05, #4 wc
00960     80 00 90 3D |  if_ae	jmp	#LR__0002
00964     52 00 00 FF 
00968     E0 64 06 F1 | 	add	objptr, ##42208
0096c     32 B1 02 FB | 	rdlong	local06, objptr
00970     52 00 00 FF 
00974     E0 64 86 F1 | 	sub	objptr, ##42208
00978     01 B0 0E F2 | 	cmp	local06, #1 wz
0097c     64 00 90 5D |  if_ne	jmp	#LR__0002
00980     36 95 02 F6 | 	mov	arg02, ptr__dat__
00984     04 00 00 FF 
00988     A4 94 06 F1 | 	add	arg02, ##2212
0098c     2B B2 06 F6 | 	mov	local07, #43
00990     0C B4 C6 F9 | 	decod	local08, #12
00994     03 00 00 FF 
00998     DE B6 06 F6 | 	mov	local09, ##1758
0099c     00 B8 06 F6 | 	mov	local10, #0
009a0     2C BB 06 F6 | 	mov	local11, #300
009a4     07 92 06 F6 | 	mov	arg01, #7
009a8     2B 96 06 F6 | 	mov	arg03, #43
009ac     0C 98 C6 F9 | 	decod	arg04, #12
009b0     03 00 00 FF 
009b4     DE 9A 06 F6 | 	mov	arg05, ##1758
009b8     00 9C 06 F6 | 	mov	arg06, #0
009bc     2C 9F 06 F6 | 	mov	arg07, #300
009c0     0B 00 00 FF 
009c4     CC 64 06 F1 | 	add	objptr, ##5836
009c8     04 3C B2 FD | 	call	#_Audio2_004_spin2_play16
009cc     07 B0 06 F6 | 	mov	local06, #7
009d0                 | ' 
009d0                 | ' base2:=@channel0[0]+64*channel
009d0     32 BD 02 F6 | 	mov	local12, objptr
009d4                 | ' word[base2+32]:=0
009d4     EC BD 06 F1 | 	add	local12, #492
009d8     5E 01 58 FC | 	wrword	#0, local12
009dc     0B 00 00 FF 
009e0     CC 64 86 F1 | 	sub	objptr, ##5836
009e4                 | LR__0002
009e4                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then key2=key : rpt=1 : key3=key2 
009e4     04 AE 16 F2 | 	cmp	local05, #4 wc
009e8     20 00 90 CD |  if_b	jmp	#LR__0003
009ec     00 00 40 FF 
009f0     00 AE 16 F2 | 	cmp	local05, ##-2147483648 wc
009f4     57 B1 02 C6 |  if_b	mov	local06, local05
009f8     58 B1 E2 C8 |  if_b	getbyte	local06, local06, #0
009fc     E0 B0 16 C2 |  if_b	cmp	local06, #224 wc
00a00     57 AB 02 C6 |  if_b	mov	local03, local05
00a04     01 A6 06 C6 |  if_b	mov	local01, #1
00a08     55 AD 02 C6 |  if_b	mov	local04, local03
00a0c                 | LR__0003
00a0c                 | ' if key>$80000000 then rptcnt=0 : rpt=0
00a0c     00 00 40 FF 
00a10     01 AE 16 F2 | 	cmp	local05, ##-2147483647 wc
00a14     00 A8 06 36 |  if_ae	mov	local02, #0
00a18     00 A6 06 36 |  if_ae	mov	local01, #0
00a1c                 | ' if key=0 andalso rpt=1 then rptcnt+=1
00a1c     00 AE 0E F2 | 	cmp	local05, #0 wz
00a20     01 A6 0E A2 |  if_e	cmp	local01, #1 wz
00a24     01 A8 06 A1 |  if_e	add	local02, #1
00a28                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
00a28     00 00 40 FF 
00a2c     00 AE 16 F2 | 	cmp	local05, ##-2147483648 wc
00a30     19 A8 0E C2 |  if_b	cmp	local02, #25 wz
00a34     55 AD 02 86 |  if_c_and_z	mov	local04, local03
00a38     15 A8 06 86 |  if_c_and_z	mov	local02, #21
00a3c                 | ' 
00a3c                 | ' '' there is a key pressed and it needs to be processed
00a3c                 | ' 
00a3c                 | ' if key3<>0 then
00a3c     00 AC 0E F2 | 	cmp	local04, #0 wz
00a40     D8 FE 9F AD |  if_e	jmp	#LR__0001
00a44                 | '   if keyclick=1 then audio.play16(7,keyclick_spl,43,4096,spl_len,spl_len,0) ' make a click
00a44     52 00 00 FF 
00a48     E0 64 06 F1 | 	add	objptr, ##42208
00a4c     32 B1 02 FB | 	rdlong	local06, objptr
00a50     52 00 00 FF 
00a54     E0 64 86 F1 | 	sub	objptr, ##42208
00a58     01 B0 0E F2 | 	cmp	local06, #1 wz
00a5c     50 00 90 5D |  if_ne	jmp	#LR__0004
00a60     54 00 00 FF 
00a64     80 64 06 F1 | 	add	objptr, ##43136
00a68     32 95 02 FB | 	rdlong	arg02, objptr
00a6c     2B B2 06 F6 | 	mov	local07, #43
00a70     0C B4 C6 F9 | 	decod	local08, #12
00a74     04 64 86 F1 | 	sub	objptr, #4
00a78     32 B9 02 FB | 	rdlong	local10, objptr
00a7c     5C B7 02 F6 | 	mov	local09, local10
00a80     00 BA 06 F6 | 	mov	local11, #0
00a84     07 92 06 F6 | 	mov	arg01, #7
00a88     2B 96 06 F6 | 	mov	arg03, #43
00a8c     0C 98 C6 F9 | 	decod	arg04, #12
00a90     5B 9B 02 F6 | 	mov	arg05, local09
00a94     5C 9D 02 F6 | 	mov	arg06, local10
00a98     00 9E 06 F6 | 	mov	arg07, #0
00a9c     48 00 00 FF 
00aa0     B0 65 86 F1 | 	sub	objptr, ##37296
00aa4     28 3B B2 FD | 	call	#_Audio2_004_spin2_play16
00aa8     0B 00 00 FF 
00aac     CC 64 86 F1 | 	sub	objptr, ##5836
00ab0                 | LR__0004
00ab0     56 93 02 F6 | 	mov	arg01, local04
00ab4     68 05 B2 FD | 	call	#_scantochar
00ab8     3D BF 02 F6 | 	mov	local13, result1
00abc                 | '   if leds and 2 = 2 then 						' caps lock
00abc     54 00 00 FF 
00ac0     BC 64 06 F1 | 	add	objptr, ##43196
00ac4     32 C1 02 FB | 	rdlong	local14, objptr
00ac8     54 00 00 FF 
00acc     BC 64 86 F1 | 	sub	objptr, ##43196
00ad0     60 B1 0A F6 | 	mov	local06, local14 wz
00ad4     4C 00 90 AD |  if_e	jmp	#LR__0012
00ad8                 | '     if key4>96 andalso key4<123 then                 
00ad8     61 BE 16 F2 | 	cmp	local13, #97 wc
00adc     0C 00 90 CD |  if_b	jmp	#LR__0005
00ae0     7B BE 16 F2 | 	cmp	local13, #123 wc
00ae4     20 BE 86 C1 |  if_b	sub	local13, #32
00ae8     38 00 90 CD |  if_b	jmp	#LR__0011
00aec                 | LR__0005
00aec     41 BE 16 F2 | 	cmp	local13, #65 wc
00af0     0C 00 90 CD |  if_b	jmp	#LR__0006
00af4     5B BE 16 F2 | 	cmp	local13, #91 wc
00af8     20 BE 06 C1 |  if_b	add	local13, #32
00afc     24 00 90 CD |  if_b	jmp	#LR__0010
00b00                 | LR__0006
00b00     17 BE 16 F2 | 	cmp	local13, #23 wc
00b04     0C 00 90 CD |  if_b	jmp	#LR__0007
00b08     20 BE 16 F2 | 	cmp	local13, #32 wc
00b0c     09 BE 86 C1 |  if_b	sub	local13, #9
00b10     10 00 90 CD |  if_b	jmp	#LR__0009
00b14                 | LR__0007
00b14     0E BE 16 F2 | 	cmp	local13, #14 wc
00b18     08 00 90 CD |  if_b	jmp	#LR__0008
00b1c     17 BE 16 F2 | 	cmp	local13, #23 wc
00b20     27 BE 06 C1 |  if_b	add	local13, #39
00b24                 | LR__0008
00b24                 | LR__0009
00b24                 | LR__0010
00b24                 | LR__0011
00b24                 | LR__0012
00b24                 | '  
00b24                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then		' put the char on the screen 
00b24     01 BE 16 F2 | 	cmp	local13, #1 wc
00b28     BC 01 90 CD |  if_b	jmp	#LR__0017
00b2c     7F BE 16 F2 | 	cmp	local13, #127 wc
00b30     3C 64 06 C1 |  if_b	add	objptr, #60
00b34     32 B1 E2 CA |  if_b	rdword	local06, objptr
00b38     3C 64 86 C1 |  if_b	sub	objptr, #60
00b3c     FE B0 16 C2 |  if_b	cmp	local06, #254 wc
00b40     A4 01 90 3D |  if_ae	jmp	#LR__0017
00b44                 | '     if do_insert then							' move the characters right
00b44     54 00 00 FF 
00b48     A4 64 06 F1 | 	add	objptr, ##43172
00b4c     32 B1 0A FB | 	rdlong	local06, objptr wz
00b50     54 00 00 FF 
00b54     A4 64 86 F1 | 	sub	objptr, ##43172
00b58     84 01 90 AD |  if_e	jmp	#LR__0016
00b5c                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2)+1 step -1 : pspoke i,pspeek(i-1) : next i 
00b5c     3E 64 06 F1 | 	add	objptr, #62
00b60     32 B3 C2 FA | 	rdbyte	local07, objptr
00b64     59 B5 E2 F8 | 	getbyte	local08, local07, #0
00b68     07 B4 66 F0 | 	shl	local08, #7
00b6c     3A 64 86 F1 | 	sub	objptr, #58
00b70     32 C3 02 FB | 	rdlong	local15, objptr
00b74     61 C5 02 F6 | 	mov	local16, local15
00b78     5A C5 02 F1 | 	add	local16, local08
00b7c     7F C4 06 F1 | 	add	local16, #127
00b80     59 B3 E2 F8 | 	getbyte	local07, local07, #0
00b84     07 B2 66 F0 | 	shl	local07, #7
00b88     59 C3 02 F1 | 	add	local15, local07
00b8c     38 64 06 F1 | 	add	objptr, #56
00b90     32 B7 E2 FA | 	rdword	local09, objptr
00b94     3C 64 86 F1 | 	sub	objptr, #60
00b98     5B BB 52 F6 | 	abs	local11, local09 wc
00b9c     01 BA 46 F0 | 	shr	local11, #1
00ba0     5D C3 82 F3 | 	sumc	local15, local11
00ba4     01 C2 06 F1 | 	add	local15, #1
00ba8                 | LR__0013
00ba8     62 C7 02 F6 | 	mov	local17, local16
00bac     01 C6 86 F1 | 	sub	local17, #1
00bb0     63 93 02 F6 | 	mov	arg01, local17
00bb4     90 03 B2 FD | 	call	#_pspeek
00bb8     3D C9 02 F6 | 	mov	local18, result1
00bbc     64 CB E2 F8 | 	getbyte	local19, local18, #0
00bc0     65 CD 02 F6 | 	mov	local20, local19
00bc4     62 93 02 F6 | 	mov	arg01, local16
00bc8     66 95 02 F6 | 	mov	arg02, local20
00bcc     30 03 B2 FD | 	call	#_pspoke
00bd0     01 C4 86 F1 | 	sub	local16, #1
00bd4     61 C5 52 F2 | 	cmps	local16, local15 wc
00bd8     CC FF 9F 3D |  if_ae	jmp	#LR__0013
00bdc     54 00 00 FF 
00be0     C4 64 06 F1 | 	add	objptr, ##43204
00be4     32 01 68 FC | 	wrlong	#0, objptr
00be8     54 00 00 FF 
00bec     86 64 86 F1 | 	sub	objptr, ##43142
00bf0     32 B3 C2 FA | 	rdbyte	local07, objptr
00bf4     59 B5 E2 F8 | 	getbyte	local08, local07, #0
00bf8     07 B4 66 F0 | 	shl	local08, #7
00bfc     3A 64 86 F1 | 	sub	objptr, #58
00c00     32 B7 02 FB | 	rdlong	local09, objptr
00c04     5B C5 02 F6 | 	mov	local16, local09
00c08     5A C5 02 F1 | 	add	local16, local08
00c0c     38 64 06 F1 | 	add	objptr, #56
00c10     32 BB E2 FA | 	rdword	local11, objptr
00c14     5D B9 32 F9 | 	getword	local10, local11, #0
00c18     5C CF 52 F6 | 	abs	local21, local10 wc
00c1c     01 CE 46 F0 | 	shr	local21, #1
00c20     67 CF 82 F6 | 	negc	local21, local21
00c24     67 C5 02 F1 | 	add	local16, local21
00c28     59 B3 E2 F8 | 	getbyte	local07, local07, #0
00c2c     07 B2 66 F0 | 	shl	local07, #7
00c30     5B B5 02 F6 | 	mov	local08, local09
00c34     3C 64 86 F1 | 	sub	objptr, #60
00c38     5A D1 02 F6 | 	mov	local22, local08
00c3c     59 D1 02 F1 | 	add	local22, local07
00c40     80 D0 06 F1 | 	add	local22, #128
00c44                 | LR__0014
00c44     68 C5 52 F2 | 	cmps	local16, local22 wc
00c48     94 00 90 3D |  if_ae	jmp	#LR__0015
00c4c     3C 64 06 F1 | 	add	objptr, #60
00c50     32 B1 E2 FA | 	rdword	local06, objptr
00c54     54 00 00 FF 
00c58     88 64 06 F1 | 	add	objptr, ##43144
00c5c     32 B5 02 FB | 	rdlong	local08, objptr
00c60     01 B4 66 F0 | 	shl	local08, #1
00c64     5A B1 02 F1 | 	add	local06, local08
00c68     54 00 00 FF 
00c6c     86 64 86 F1 | 	sub	objptr, ##43142
00c70     32 C1 C2 FA | 	rdbyte	local14, objptr
00c74     3E 64 86 F1 | 	sub	objptr, #62
00c78     04 C0 66 F0 | 	shl	local14, #4
00c7c     04 C0 06 F1 | 	add	local14, #4
00c80     62 93 02 F6 | 	mov	arg01, local16
00c84     C0 02 B2 FD | 	call	#_pspeek
00c88     3D B3 E2 F8 | 	getbyte	local07, result1, #0
00c8c     41 64 06 F1 | 	add	objptr, #65
00c90     32 B5 02 FB | 	rdlong	local08, objptr
00c94     04 64 06 F1 | 	add	objptr, #4
00c98     32 B9 02 FB | 	rdlong	local10, objptr
00c9c     45 64 86 F1 | 	sub	objptr, #69
00ca0     5C B7 02 F6 | 	mov	local09, local10
00ca4     58 93 02 F6 | 	mov	arg01, local06
00ca8     60 95 02 F6 | 	mov	arg02, local14
00cac     59 97 02 F6 | 	mov	arg03, local07
00cb0     5A 99 02 F6 | 	mov	arg04, local08
00cb4     5B 9B 02 F6 | 	mov	arg05, local09
00cb8     10 1B B2 FD | 	call	#_Hg010b_4_spin2_putcharxycgf
00cbc     54 00 00 FF 
00cc0     C4 64 06 F1 | 	add	objptr, ##43204
00cc4     32 B1 02 FB | 	rdlong	local06, objptr
00cc8     01 B0 06 F1 | 	add	local06, #1
00ccc     32 B1 62 FC | 	wrlong	local06, objptr
00cd0     54 00 00 FF 
00cd4     C4 64 86 F1 | 	sub	objptr, ##43204
00cd8     01 C4 06 F1 | 	add	local16, #1
00cdc     64 FF 9F FD | 	jmp	#LR__0014
00ce0                 | LR__0015
00ce0                 | LR__0016
00ce0     5F 93 02 F6 | 	mov	arg01, local13
00ce4     98 1E B2 FD | 	call	#_Hg010b_4_spin2_putchar
00ce8                 | LR__0017
00ce8                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then
00ce8     01 BE 16 F2 | 	cmp	local13, #1 wc
00cec     9C 00 90 CD |  if_b	jmp	#LR__0018
00cf0     7F BE 16 F2 | 	cmp	local13, #127 wc
00cf4     94 00 90 3D |  if_ae	jmp	#LR__0018
00cf8     3C 64 06 F1 | 	add	objptr, #60
00cfc     32 B1 E2 FA | 	rdword	local06, objptr
00d00     3C 64 86 F1 | 	sub	objptr, #60
00d04     FE B0 0E F2 | 	cmp	local06, #254 wz
00d08     52 00 00 AF 
00d0c     E0 64 06 A1 |  if_e	add	objptr, ##42208
00d10     32 B5 02 AB |  if_e	rdlong	local08, objptr
00d14     52 00 00 AF 
00d18     E0 64 86 A1 |  if_e	sub	objptr, ##42208
00d1c     5A B3 02 A6 |  if_e	mov	local07, local08
00d20     01 B2 0E A2 |  if_e	cmp	local07, #1 wz
00d24     64 00 90 5D |  if_ne	jmp	#LR__0018
00d28     36 95 02 F6 | 	mov	arg02, ptr__dat__
00d2c     04 00 00 FF 
00d30     A4 94 06 F1 | 	add	arg02, ##2212
00d34     2B B2 06 F6 | 	mov	local07, #43
00d38     0C B4 C6 F9 | 	decod	local08, #12
00d3c     03 00 00 FF 
00d40     DE B6 06 F6 | 	mov	local09, ##1758
00d44     00 B8 06 F6 | 	mov	local10, #0
00d48     2C BB 06 F6 | 	mov	local11, #300
00d4c     07 92 06 F6 | 	mov	arg01, #7
00d50     2B 96 06 F6 | 	mov	arg03, #43
00d54     0C 98 C6 F9 | 	decod	arg04, #12
00d58     03 00 00 FF 
00d5c     DE 9A 06 F6 | 	mov	arg05, ##1758
00d60     00 9C 06 F6 | 	mov	arg06, #0
00d64     2C 9F 06 F6 | 	mov	arg07, #300
00d68     0B 00 00 FF 
00d6c     CC 64 06 F1 | 	add	objptr, ##5836
00d70     5C 38 B2 FD | 	call	#_Audio2_004_spin2_play16
00d74                 | ' 
00d74                 | ' base2:=@channel0[0]+64*channel
00d74     32 BD 02 F6 | 	mov	local12, objptr
00d78     C0 93 06 F6 | 	mov	arg01, #448
00d7c                 | ' word[base2+32]:=0
00d7c     EC BD 06 F1 | 	add	local12, #492
00d80     5E 01 58 FC | 	wrword	#0, local12
00d84     0B 00 00 FF 
00d88     CC 64 86 F1 | 	sub	objptr, ##5836
00d8c                 | LR__0018
00d8c                 | '     
00d8c                 | '   if key4=key_enter then 						' get the line from the  screen and return it
00d8c     8D BE 0E F2 | 	cmp	local13, #141 wz
00d90     B0 00 90 5D |  if_ne	jmp	#LR__0022
00d94     92 01 00 FF 
00d98     42 D3 06 F6 | 	mov	local23, ##@LR__5487
00d9c                 | '     line$="" 
00d9c                 | '     for i=editor_spaces to 127
00d9c     38 00 00 FF 
00da0     D8 65 06 F1 | 	add	objptr, ##29144
00da4     32 C5 02 FB | 	rdlong	local16, objptr
00da8     38 00 00 FF 
00dac     D8 65 86 F1 | 	sub	objptr, ##29144
00db0                 | LR__0019
00db0     80 C4 56 F2 | 	cmps	local16, #128 wc
00db4     44 00 90 3D |  if_ae	jmp	#LR__0020
00db8     3E 64 06 F1 | 	add	objptr, #62
00dbc     32 BB C2 FA | 	rdbyte	local11, objptr
00dc0     07 BA 66 F0 | 	shl	local11, #7
00dc4     3A 64 86 F1 | 	sub	objptr, #58
00dc8     32 93 02 FB | 	rdlong	arg01, objptr
00dcc     04 64 86 F1 | 	sub	objptr, #4
00dd0     5D 93 02 F1 | 	add	arg01, local11
00dd4     62 93 02 F1 | 	add	arg01, local16
00dd8     6C 01 B2 FD | 	call	#_pspeek
00ddc     3D 93 E2 F8 | 	getbyte	arg01, result1, #0
00de0     60 56 B2 FD | 	call	#__system__Chr_S
00de4     3D 95 02 F6 | 	mov	arg02, result1
00de8     69 93 02 F6 | 	mov	arg01, local23
00dec     44 3C B2 FD | 	call	#__system___string_concat
00df0     3D D3 02 F6 | 	mov	local23, result1
00df4     01 C4 06 F1 | 	add	local16, #1
00df8     B4 FF 9F FD | 	jmp	#LR__0019
00dfc                 | LR__0020
00dfc                 | '     if do_insert andalso v.cursor_y<35 then v.scrolldown(v.cursor_y+1)
00dfc     54 00 00 FF 
00e00     A4 64 06 F1 | 	add	objptr, ##43172
00e04     32 B1 0A FB | 	rdlong	local06, objptr wz
00e08     54 00 00 FF 
00e0c     A4 64 86 F1 | 	sub	objptr, ##43172
00e10     24 00 90 AD |  if_e	jmp	#LR__0021
00e14     3E 64 06 F1 | 	add	objptr, #62
00e18     32 B3 C2 FA | 	rdbyte	local07, objptr
00e1c     3E 64 86 F1 | 	sub	objptr, #62
00e20     23 B2 16 F2 | 	cmp	local07, #35 wc
00e24     3E 64 06 C1 |  if_b	add	objptr, #62
00e28     32 93 C2 CA |  if_b	rdbyte	arg01, objptr
00e2c     3E 64 86 C1 |  if_b	sub	objptr, #62
00e30     01 92 06 C1 |  if_b	add	arg01, #1
00e34     D0 22 B2 CD |  if_b	call	#_Hg010b_4_spin2_scrolldown
00e38                 | LR__0021
00e38     D0 24 B2 FD | 	call	#_Hg010b_4_spin2_crlf
00e3c                 | '     v.crlf() 
00e3c                 | '     return  line$
00e3c     69 7B 02 F6 | 	mov	result1, local23
00e40     94 07 90 FD | 	jmp	#LR__0049
00e44                 | LR__0022
00e44     56 BF E2 F8 | 	getbyte	local13, local04, #0
00e48                 | '   
00e48                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then audio.play16(7,@atari2_spl,43,4096,1758,0,300) : audio.stop(7)  			' tab
00e48     2B BE 0E F2 | 	cmp	local13, #43 wz
00e4c     98 00 90 5D |  if_ne	jmp	#LR__0023
00e50     3C 64 06 F1 | 	add	objptr, #60
00e54     32 B1 E2 FA | 	rdword	local06, objptr
00e58     3C 64 86 F1 | 	sub	objptr, #60
00e5c     F0 B0 16 F2 | 	cmp	local06, #240 wc
00e60     84 00 90 CD |  if_b	jmp	#LR__0023
00e64     52 00 00 FF 
00e68     E0 64 06 F1 | 	add	objptr, ##42208
00e6c     32 B5 02 FB | 	rdlong	local08, objptr
00e70     52 00 00 FF 
00e74     E0 64 86 F1 | 	sub	objptr, ##42208
00e78     5A B3 02 F6 | 	mov	local07, local08
00e7c     01 B2 0E F2 | 	cmp	local07, #1 wz
00e80     64 00 90 5D |  if_ne	jmp	#LR__0023
00e84     36 95 02 F6 | 	mov	arg02, ptr__dat__
00e88     04 00 00 FF 
00e8c     A4 94 06 F1 | 	add	arg02, ##2212
00e90     2B B2 06 F6 | 	mov	local07, #43
00e94     0C B4 C6 F9 | 	decod	local08, #12
00e98     03 00 00 FF 
00e9c     DE B6 06 F6 | 	mov	local09, ##1758
00ea0     00 B8 06 F6 | 	mov	local10, #0
00ea4     2C BB 06 F6 | 	mov	local11, #300
00ea8     07 92 06 F6 | 	mov	arg01, #7
00eac     2B 96 06 F6 | 	mov	arg03, #43
00eb0     0C 98 C6 F9 | 	decod	arg04, #12
00eb4     03 00 00 FF 
00eb8     DE 9A 06 F6 | 	mov	arg05, ##1758
00ebc     00 9C 06 F6 | 	mov	arg06, #0
00ec0     2C 9F 06 F6 | 	mov	arg07, #300
00ec4     0B 00 00 FF 
00ec8     CC 64 06 F1 | 	add	objptr, ##5836
00ecc     00 37 B2 FD | 	call	#_Audio2_004_spin2_play16
00ed0                 | ' 
00ed0                 | ' base2:=@channel0[0]+64*channel
00ed0     32 BD 02 F6 | 	mov	local12, objptr
00ed4     C0 93 06 F6 | 	mov	arg01, #448
00ed8                 | ' word[base2+32]:=0
00ed8     EC BD 06 F1 | 	add	local12, #492
00edc     5E 01 58 FC | 	wrword	#0, local12
00ee0     0B 00 00 FF 
00ee4     CC 64 86 F1 | 	sub	objptr, ##5836
00ee8                 | LR__0023
00ee8                 | '   if key4=77 then i=127 : do: 															' end
00ee8     4D BE 0E F2 | 	cmp	local13, #77 wz
00eec     90 00 90 5D |  if_ne	jmp	#LR__0028
00ef0     7F C4 06 F6 | 	mov	local16, #127
00ef4                 | LR__0024
00ef4                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then 
00ef4     3E 64 06 F1 | 	add	objptr, #62
00ef8     32 B7 C2 FA | 	rdbyte	local09, objptr
00efc     5B B5 E2 F8 | 	getbyte	local08, local09, #0
00f00     5A B9 02 F6 | 	mov	local10, local08
00f04     07 B8 66 F0 | 	shl	local10, #7
00f08     3A 64 86 F1 | 	sub	objptr, #58
00f0c     32 BB 02 FB | 	rdlong	local11, objptr
00f10     04 64 86 F1 | 	sub	objptr, #4
00f14     5D B3 02 F6 | 	mov	local07, local11
00f18     5C B3 02 F1 | 	add	local07, local10
00f1c     62 B3 02 F1 | 	add	local07, local16
00f20     59 93 02 F6 | 	mov	arg01, local07
00f24     20 00 B2 FD | 	call	#_pspeek
00f28     3D B1 E2 F8 | 	getbyte	local06, result1, #0
00f2c     20 B0 0E F2 | 	cmp	local06, #32 wz
00f30     2C 00 90 AD |  if_e	jmp	#LR__0026
00f34                 | '       if i<127 then v.setcursorx(2*i+2) else v.setcursorx(254)
00f34     7F C4 56 F2 | 	cmps	local16, #127 wc
00f38     18 00 90 3D |  if_ae	jmp	#LR__0025
00f3c     62 B3 02 F6 | 	mov	local07, local16
00f40     01 B2 66 F0 | 	shl	local07, #1
00f44     59 93 02 F6 | 	mov	arg01, local07
00f48     02 92 06 F1 | 	add	arg01, #2
00f4c     68 1A B2 FD | 	call	#_Hg010b_4_spin2_setcursorx
00f50     2C 00 90 FD | 	jmp	#LR__0027
00f54                 | LR__0025
00f54     FE 92 06 F6 | 	mov	arg01, #254
00f58     5C 1A B2 FD | 	call	#_Hg010b_4_spin2_setcursorx
00f5c     20 00 90 FD | 	jmp	#LR__0027
00f60                 | LR__0026
00f60     01 C4 86 F1 | 	sub	local16, #1
00f64     38 00 00 FF 
00f68     D8 65 06 F1 | 	add	objptr, ##29144
00f6c     32 B1 02 FB | 	rdlong	local06, objptr
00f70     38 00 00 FF 
00f74     D8 65 86 F1 | 	sub	objptr, ##29144
00f78     58 C5 0A F2 | 	cmp	local16, local06 wz
00f7c     74 FF 9F 5D |  if_ne	jmp	#LR__0024
00f80                 | LR__0027
00f80                 | LR__0028
00f80                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
00f80     38 00 00 FF 
00f84     D8 65 06 F1 | 	add	objptr, ##29144
00f88     32 C1 02 FB | 	rdlong	local14, objptr
00f8c     38 00 00 FF 
00f90     D8 65 86 F1 | 	sub	objptr, ##29144
00f94     60 B1 02 F6 | 	mov	local06, local14
00f98     58 C5 0A F2 | 	cmp	local16, local06 wz
00f9c     2C 00 90 5D |  if_ne	jmp	#LR__0029
00fa0     38 00 00 FF 
00fa4     D8 65 06 F1 | 	add	objptr, ##29144
00fa8     32 B5 02 FB | 	rdlong	local08, objptr
00fac     38 00 00 FF 
00fb0     D8 65 86 F1 | 	sub	objptr, ##29144
00fb4     5A B3 02 F6 | 	mov	local07, local08
00fb8     59 C1 02 F6 | 	mov	local14, local07
00fbc     01 C0 66 F0 | 	shl	local14, #1
00fc0     60 B1 02 F6 | 	mov	local06, local14
00fc4     58 93 02 F6 | 	mov	arg01, local06
00fc8     EC 19 B2 FD | 	call	#_Hg010b_4_spin2_setcursorx
00fcc                 | LR__0029
00fcc                 | '     
00fcc                 | '   if key4=74 then v.setcursorx(editor_spaces*2)													' home
00fcc     4A BE 0E F2 | 	cmp	local13, #74 wz
00fd0     2C 00 90 5D |  if_ne	jmp	#LR__0030
00fd4     38 00 00 FF 
00fd8     D8 65 06 F1 | 	add	objptr, ##29144
00fdc     32 B5 02 FB | 	rdlong	local08, objptr
00fe0     38 00 00 FF 
00fe4     D8 65 86 F1 | 	sub	objptr, ##29144
00fe8     5A B3 02 F6 | 	mov	local07, local08
00fec     59 C1 02 F6 | 	mov	local14, local07
00ff0     01 C0 66 F0 | 	shl	local14, #1
00ff4     60 B1 02 F6 | 	mov	local06, local14
00ff8     58 93 02 F6 | 	mov	arg01, local06
00ffc     B8 19 B2 FD | 	call	#_Hg010b_4_spin2_setcursorx
01000                 | LR__0030
01000                 | '   if key4=75 then v.setcursory(0)														' pgup
01000     4B BE 0E F2 | 	cmp	local13, #75 wz
01004     00 B0 06 A6 |  if_e	mov	local06, #0
01008     00 92 06 A6 |  if_e	mov	arg01, #0
0100c     D8 19 B2 AD |  if_e	call	#_Hg010b_4_spin2_setcursory
01010                 | '   if key4=78 then v.setcursory(36) 														' pgdn, todo: parameter instead 36
01010     4E BE 0E F2 | 	cmp	local13, #78 wz
01014     24 B0 06 A6 |  if_e	mov	local06, #36
01018     24 92 06 A6 |  if_e	mov	arg01, #36
0101c     C8 19 B2 AD |  if_e	call	#_Hg010b_4_spin2_setcursory
01020                 | '   if key4=76 then 																' del
01020     4C BE 0E F2 | 	cmp	local13, #76 wz
01024     AC 01 90 5D |  if_ne	jmp	#LR__0035
01028                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
01028     3E 64 06 F1 | 	add	objptr, #62
0102c     32 B3 C2 FA | 	rdbyte	local07, objptr
01030     59 B5 E2 F8 | 	getbyte	local08, local07, #0
01034     07 B4 66 F0 | 	shl	local08, #7
01038     3A 64 86 F1 | 	sub	objptr, #58
0103c     32 D5 02 FB | 	rdlong	local24, objptr
01040     6A C5 02 F6 | 	mov	local16, local24
01044     5A C5 02 F1 | 	add	local16, local08
01048     38 64 06 F1 | 	add	objptr, #56
0104c     32 B9 E2 FA | 	rdword	local10, objptr
01050     5C CF 52 F6 | 	abs	local21, local10 wc
01054     01 CE 46 F0 | 	shr	local21, #1
01058     67 C5 82 F3 | 	sumc	local16, local21
0105c     59 B3 E2 F8 | 	getbyte	local07, local07, #0
01060     07 B2 66 F0 | 	shl	local07, #7
01064     3C 64 86 F1 | 	sub	objptr, #60
01068     59 D5 02 F1 | 	add	local24, local07
0106c     80 D4 06 F1 | 	add	local24, #128
01070                 | LR__0031
01070     6A C5 52 F2 | 	cmps	local16, local24 wc
01074     20 00 90 3D |  if_ae	jmp	#LR__0032
01078     62 93 02 F6 | 	mov	arg01, local16
0107c     01 92 06 F1 | 	add	arg01, #1
01080     C4 FE B1 FD | 	call	#_pspeek
01084     3D 95 E2 F8 | 	getbyte	arg02, result1, #0
01088     62 93 02 F6 | 	mov	arg01, local16
0108c     70 FE B1 FD | 	call	#_pspoke
01090     01 C4 06 F1 | 	add	local16, #1
01094     D8 FF 9F FD | 	jmp	#LR__0031
01098                 | LR__0032
01098     3E 64 06 F1 | 	add	objptr, #62
0109c     32 B7 C2 FA | 	rdbyte	local09, objptr
010a0     07 B6 66 F0 | 	shl	local09, #7
010a4     3A 64 86 F1 | 	sub	objptr, #58
010a8     32 93 02 FB | 	rdlong	arg01, objptr
010ac     04 64 86 F1 | 	sub	objptr, #4
010b0     5B 93 02 F1 | 	add	arg01, local09
010b4     7F 92 06 F1 | 	add	arg01, #127
010b8     20 94 06 F6 | 	mov	arg02, #32
010bc     40 FE B1 FD | 	call	#_pspoke
010c0     54 00 00 FF 
010c4     C4 64 06 F1 | 	add	objptr, ##43204
010c8     32 01 68 FC | 	wrlong	#0, objptr
010cc     54 00 00 FF 
010d0     86 64 86 F1 | 	sub	objptr, ##43142
010d4     32 C1 C2 FA | 	rdbyte	local14, objptr
010d8     60 B5 E2 F8 | 	getbyte	local08, local14, #0
010dc     07 B4 66 F0 | 	shl	local08, #7
010e0     3A 64 86 F1 | 	sub	objptr, #58
010e4     32 B7 02 FB | 	rdlong	local09, objptr
010e8     5B C5 02 F6 | 	mov	local16, local09
010ec     5A C5 02 F1 | 	add	local16, local08
010f0     38 64 06 F1 | 	add	objptr, #56
010f4     32 BB E2 FA | 	rdword	local11, objptr
010f8     5D B9 32 F9 | 	getword	local10, local11, #0
010fc     5C CF 52 F6 | 	abs	local21, local10 wc
01100     01 CE 46 F0 | 	shr	local21, #1
01104     67 CF 82 F6 | 	negc	local21, local21
01108     67 C5 02 F1 | 	add	local16, local21
0110c     60 B1 E2 F8 | 	getbyte	local06, local14, #0
01110     58 B3 02 F6 | 	mov	local07, local06
01114     07 B2 66 F0 | 	shl	local07, #7
01118     5B B5 02 F6 | 	mov	local08, local09
0111c     3C 64 86 F1 | 	sub	objptr, #60
01120     5A D7 02 F6 | 	mov	local25, local08
01124     59 D7 02 F1 | 	add	local25, local07
01128     80 D6 06 F1 | 	add	local25, #128
0112c                 | LR__0033
0112c     6B C5 52 F2 | 	cmps	local16, local25 wc
01130     A0 00 90 3D |  if_ae	jmp	#LR__0034
01134     3C 64 06 F1 | 	add	objptr, #60
01138     32 B1 E2 FA | 	rdword	local06, objptr
0113c     54 00 00 FF 
01140     88 64 06 F1 | 	add	objptr, ##43144
01144     32 B5 02 FB | 	rdlong	local08, objptr
01148     01 B4 66 F0 | 	shl	local08, #1
0114c     5A B1 02 F1 | 	add	local06, local08
01150     54 00 00 FF 
01154     86 64 86 F1 | 	sub	objptr, ##43142
01158     32 C1 C2 FA | 	rdbyte	local14, objptr
0115c     3E 64 86 F1 | 	sub	objptr, #62
01160     04 C0 66 F0 | 	shl	local14, #4
01164     04 C0 06 F1 | 	add	local14, #4
01168     62 93 02 F6 | 	mov	arg01, local16
0116c     D8 FD B1 FD | 	call	#_pspeek
01170     3D B3 E2 F8 | 	getbyte	local07, result1, #0
01174     41 64 06 F1 | 	add	objptr, #65
01178     32 B5 02 FB | 	rdlong	local08, objptr
0117c     04 64 06 F1 | 	add	objptr, #4
01180     32 B9 02 FB | 	rdlong	local10, objptr
01184     45 64 86 F1 | 	sub	objptr, #69
01188     5C B7 02 F6 | 	mov	local09, local10
0118c     58 93 02 F6 | 	mov	arg01, local06
01190     60 95 02 F6 | 	mov	arg02, local14
01194     59 97 02 F6 | 	mov	arg03, local07
01198     5A 99 02 F6 | 	mov	arg04, local08
0119c     5B 9B 02 F6 | 	mov	arg05, local09
011a0     28 16 B2 FD | 	call	#_Hg010b_4_spin2_putcharxycgf
011a4     54 00 00 FF 
011a8     C4 64 06 F1 | 	add	objptr, ##43204
011ac     32 B1 02 FB | 	rdlong	local06, objptr
011b0     01 B0 06 F1 | 	add	local06, #1
011b4     32 B1 62 FC | 	wrlong	local06, objptr
011b8     54 00 00 FF 
011bc     C4 64 86 F1 | 	sub	objptr, ##43204
011c0     62 B1 02 F6 | 	mov	local06, local16
011c4     62 C1 02 F6 | 	mov	local14, local16
011c8     01 C0 06 F1 | 	add	local14, #1
011cc     60 C5 02 F6 | 	mov	local16, local14
011d0     58 FF 9F FD | 	jmp	#LR__0033
011d4                 | LR__0034
011d4                 | LR__0035
011d4                 | ' 
011d4                 | '   if key4 = 42 then  'backspace
011d4     2A BE 0E F2 | 	cmp	local13, #42 wz
011d8     14 02 90 5D |  if_ne	jmp	#LR__0041
011dc                 | '     if v.cursor_x>editor_spaces*2 then 
011dc     3C 64 06 F1 | 	add	objptr, #60
011e0     32 C1 E2 FA | 	rdword	local14, objptr
011e4     60 B1 32 F9 | 	getword	local06, local14, #0
011e8     38 00 00 FF 
011ec     9C 65 06 F1 | 	add	objptr, ##29084
011f0     32 B7 02 FB | 	rdlong	local09, objptr
011f4     38 00 00 FF 
011f8     D8 65 86 F1 | 	sub	objptr, ##29144
011fc     5B B5 02 F6 | 	mov	local08, local09
01200     5A B3 02 F6 | 	mov	local07, local08
01204     01 B2 66 F0 | 	shl	local07, #1
01208     59 B1 5A F2 | 	cmps	local06, local07 wcz
0120c     C8 01 90 ED |  if_be	jmp	#LR__0039
01210     3C 64 06 F1 | 	add	objptr, #60
01214     32 93 E2 FA | 	rdword	arg01, objptr
01218     02 92 86 F1 | 	sub	arg01, #2
0121c     02 64 06 F1 | 	add	objptr, #2
01220     32 95 C2 FA | 	rdbyte	arg02, objptr
01224     3E 64 86 F1 | 	sub	objptr, #62
01228     40 17 B2 FD | 	call	#_Hg010b_4_spin2_setcursorpos
0122c                 | '       position v.cursor_x-2,v.cursor_y
0122c                 | '       for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
0122c     3E 64 06 F1 | 	add	objptr, #62
01230     32 B3 C2 FA | 	rdbyte	local07, objptr
01234     59 B5 E2 F8 | 	getbyte	local08, local07, #0
01238     07 B4 66 F0 | 	shl	local08, #7
0123c     3A 64 86 F1 | 	sub	objptr, #58
01240     32 D9 02 FB | 	rdlong	local26, objptr
01244     6C C5 02 F6 | 	mov	local16, local26
01248     5A C5 02 F1 | 	add	local16, local08
0124c     38 64 06 F1 | 	add	objptr, #56
01250     32 B9 E2 FA | 	rdword	local10, objptr
01254     5C CF 52 F6 | 	abs	local21, local10 wc
01258     01 CE 46 F0 | 	shr	local21, #1
0125c     67 C5 82 F3 | 	sumc	local16, local21
01260     59 B3 E2 F8 | 	getbyte	local07, local07, #0
01264     07 B2 66 F0 | 	shl	local07, #7
01268     3C 64 86 F1 | 	sub	objptr, #60
0126c     59 D9 02 F1 | 	add	local26, local07
01270     80 D8 06 F1 | 	add	local26, #128
01274                 | LR__0036
01274     6C C5 52 F2 | 	cmps	local16, local26 wc
01278     20 00 90 3D |  if_ae	jmp	#LR__0037
0127c     62 93 02 F6 | 	mov	arg01, local16
01280     01 92 06 F1 | 	add	arg01, #1
01284     C0 FC B1 FD | 	call	#_pspeek
01288     3D 95 E2 F8 | 	getbyte	arg02, result1, #0
0128c     62 93 02 F6 | 	mov	arg01, local16
01290     6C FC B1 FD | 	call	#_pspoke
01294     01 C4 06 F1 | 	add	local16, #1
01298     D8 FF 9F FD | 	jmp	#LR__0036
0129c                 | LR__0037
0129c     3E 64 06 F1 | 	add	objptr, #62
012a0     32 B7 C2 FA | 	rdbyte	local09, objptr
012a4     07 B6 66 F0 | 	shl	local09, #7
012a8     3A 64 86 F1 | 	sub	objptr, #58
012ac     32 93 02 FB | 	rdlong	arg01, objptr
012b0     04 64 86 F1 | 	sub	objptr, #4
012b4     5B 93 02 F1 | 	add	arg01, local09
012b8     7F 92 06 F1 | 	add	arg01, #127
012bc     20 94 06 F6 | 	mov	arg02, #32
012c0     3C FC B1 FD | 	call	#_pspoke
012c4     54 00 00 FF 
012c8     C4 64 06 F1 | 	add	objptr, ##43204
012cc     32 01 68 FC | 	wrlong	#0, objptr
012d0     54 00 00 FF 
012d4     86 64 86 F1 | 	sub	objptr, ##43142
012d8     32 C1 C2 FA | 	rdbyte	local14, objptr
012dc     60 B5 E2 F8 | 	getbyte	local08, local14, #0
012e0     07 B4 66 F0 | 	shl	local08, #7
012e4     3A 64 86 F1 | 	sub	objptr, #58
012e8     32 B7 02 FB | 	rdlong	local09, objptr
012ec     5B C5 02 F6 | 	mov	local16, local09
012f0     5A C5 02 F1 | 	add	local16, local08
012f4     38 64 06 F1 | 	add	objptr, #56
012f8     32 BB E2 FA | 	rdword	local11, objptr
012fc     5D B9 32 F9 | 	getword	local10, local11, #0
01300     5C CF 52 F6 | 	abs	local21, local10 wc
01304     01 CE 46 F0 | 	shr	local21, #1
01308     67 CF 82 F6 | 	negc	local21, local21
0130c     67 C5 02 F1 | 	add	local16, local21
01310     60 B1 E2 F8 | 	getbyte	local06, local14, #0
01314     58 B3 02 F6 | 	mov	local07, local06
01318     07 B2 66 F0 | 	shl	local07, #7
0131c     5B B5 02 F6 | 	mov	local08, local09
01320     3C 64 86 F1 | 	sub	objptr, #60
01324     5A DB 02 F6 | 	mov	local27, local08
01328     59 DB 02 F1 | 	add	local27, local07
0132c     80 DA 06 F1 | 	add	local27, #128
01330                 | LR__0038
01330     6D C5 52 F2 | 	cmps	local16, local27 wc
01334     B8 00 90 3D |  if_ae	jmp	#LR__0040
01338     3C 64 06 F1 | 	add	objptr, #60
0133c     32 B1 E2 FA | 	rdword	local06, objptr
01340     54 00 00 FF 
01344     88 64 06 F1 | 	add	objptr, ##43144
01348     32 B5 02 FB | 	rdlong	local08, objptr
0134c     01 B4 66 F0 | 	shl	local08, #1
01350     5A B1 02 F1 | 	add	local06, local08
01354     54 00 00 FF 
01358     86 64 86 F1 | 	sub	objptr, ##43142
0135c     32 C1 C2 FA | 	rdbyte	local14, objptr
01360     3E 64 86 F1 | 	sub	objptr, #62
01364     04 C0 66 F0 | 	shl	local14, #4
01368     04 C0 06 F1 | 	add	local14, #4
0136c     62 93 02 F6 | 	mov	arg01, local16
01370     D4 FB B1 FD | 	call	#_pspeek
01374     3D B3 E2 F8 | 	getbyte	local07, result1, #0
01378     41 64 06 F1 | 	add	objptr, #65
0137c     32 B5 02 FB | 	rdlong	local08, objptr
01380     04 64 06 F1 | 	add	objptr, #4
01384     32 B9 02 FB | 	rdlong	local10, objptr
01388     45 64 86 F1 | 	sub	objptr, #69
0138c     5C B7 02 F6 | 	mov	local09, local10
01390     58 93 02 F6 | 	mov	arg01, local06
01394     60 95 02 F6 | 	mov	arg02, local14
01398     59 97 02 F6 | 	mov	arg03, local07
0139c     5A 99 02 F6 | 	mov	arg04, local08
013a0     5B 9B 02 F6 | 	mov	arg05, local09
013a4     24 14 B2 FD | 	call	#_Hg010b_4_spin2_putcharxycgf
013a8     54 00 00 FF 
013ac     C4 64 06 F1 | 	add	objptr, ##43204
013b0     32 B1 02 FB | 	rdlong	local06, objptr
013b4     01 B0 06 F1 | 	add	local06, #1
013b8     32 B1 62 FC | 	wrlong	local06, objptr
013bc     54 00 00 FF 
013c0     C4 64 86 F1 | 	sub	objptr, ##43204
013c4     62 B1 02 F6 | 	mov	local06, local16
013c8     62 C1 02 F6 | 	mov	local14, local16
013cc     01 C0 06 F1 | 	add	local14, #1
013d0     60 C5 02 F6 | 	mov	local16, local14
013d4     58 FF 9F FD | 	jmp	#LR__0038
013d8                 | LR__0039
013d8     92 01 00 FF 
013dc     43 D3 06 F6 | 	mov	local23, ##@LR__5488
013e0     04 B0 06 F6 | 	mov	local06, #4
013e4     3C 64 06 F1 | 	add	objptr, #60
013e8     32 09 58 FC | 	wrword	#4, objptr
013ec     3C 64 86 F1 | 	sub	objptr, #60
013f0                 | LR__0040
013f0                 | LR__0041
013f0                 | ' 
013f0                 | '   if key4=82 then 						' arrow up
013f0     52 BE 0E F2 | 	cmp	local13, #82 wz
013f4     58 00 90 5D |  if_ne	jmp	#LR__0042
013f8                 | ' return cursor_y
013f8     3E 64 06 F1 | 	add	objptr, #62
013fc     32 7B C2 FA | 	rdbyte	result1, objptr
01400     01 7A 86 F1 | 	sub	result1, #1
01404     54 00 00 FF 
01408     6A 64 06 F1 | 	add	objptr, ##43114
0140c     32 7B 62 FC | 	wrlong	result1, objptr
01410                 | '     cy=v.getcursory()-1 : if cy<0 then cy=0 
01410     54 00 00 FF 
01414     A8 64 86 F1 | 	sub	objptr, ##43176
01418     00 7A 56 F2 | 	cmps	result1, #0 wc
0141c     54 00 00 CF 
01420     A8 64 06 C1 |  if_b	add	objptr, ##43176
01424     32 01 68 CC |  if_b	wrlong	#0, objptr
01428     54 00 00 CF 
0142c     A8 64 86 C1 |  if_b	sub	objptr, ##43176
01430     54 00 00 FF 
01434     A8 64 06 F1 | 	add	objptr, ##43176
01438     32 C1 02 FB | 	rdlong	local14, objptr
0143c     54 00 00 FF 
01440     A8 64 86 F1 | 	sub	objptr, ##43176
01444     60 B1 02 F6 | 	mov	local06, local14
01448     58 93 02 F6 | 	mov	arg01, local06
0144c     98 15 B2 FD | 	call	#_Hg010b_4_spin2_setcursory
01450                 | LR__0042
01450                 | '   if key4=81 then						' arrow down,  todo: remove hardcoded 36
01450     51 BE 0E F2 | 	cmp	local13, #81 wz
01454     58 00 90 5D |  if_ne	jmp	#LR__0043
01458                 | ' return cursor_y
01458     3E 64 06 F1 | 	add	objptr, #62
0145c     32 7B C2 FA | 	rdbyte	result1, objptr
01460     01 7A 06 F1 | 	add	result1, #1
01464     54 00 00 FF 
01468     6A 64 06 F1 | 	add	objptr, ##43114
0146c     32 7B 62 FC | 	wrlong	result1, objptr
01470                 | '     cy=v.getcursory()+1 : if cy>36  then cy=36
01470     54 00 00 FF 
01474     A8 64 86 F1 | 	sub	objptr, ##43176
01478     25 7A 56 F2 | 	cmps	result1, #37 wc
0147c     54 00 00 3F 
01480     A8 64 06 31 |  if_ae	add	objptr, ##43176
01484     32 49 68 3C |  if_ae	wrlong	#36, objptr
01488     54 00 00 3F 
0148c     A8 64 86 31 |  if_ae	sub	objptr, ##43176
01490     54 00 00 FF 
01494     A8 64 06 F1 | 	add	objptr, ##43176
01498     32 C1 02 FB | 	rdlong	local14, objptr
0149c     54 00 00 FF 
014a0     A8 64 86 F1 | 	sub	objptr, ##43176
014a4     60 B1 02 F6 | 	mov	local06, local14
014a8     58 93 02 F6 | 	mov	arg01, local06
014ac     38 15 B2 FD | 	call	#_Hg010b_4_spin2_setcursory
014b0                 | LR__0043
014b0                 | '   if key4=80 then
014b0     50 BE 0E F2 | 	cmp	local13, #80 wz
014b4     74 00 90 5D |  if_ne	jmp	#LR__0044
014b8                 | ' return cursor_x
014b8     3C 64 06 F1 | 	add	objptr, #60
014bc     32 B1 E2 FA | 	rdword	local06, objptr
014c0     02 B0 86 F1 | 	sub	local06, #2
014c4     54 00 00 FF 
014c8     70 64 06 F1 | 	add	objptr, ##43120
014cc     32 B1 62 FC | 	wrlong	local06, objptr
014d0                 | '     cx=v.getcursorx()-2 					' arrow left
014d0                 | '     if cx<editor_spaces then cx=editor_spaces			
014d0     1B 00 00 FF 
014d4     D4 64 86 F1 | 	sub	objptr, ##14036
014d8     32 B5 02 FB | 	rdlong	local08, objptr
014dc     38 00 00 FF 
014e0     D8 65 86 F1 | 	sub	objptr, ##29144
014e4     5A B3 02 F6 | 	mov	local07, local08
014e8     59 B1 52 F2 | 	cmps	local06, local07 wc
014ec     38 00 00 CF 
014f0     D8 65 06 C1 |  if_b	add	objptr, ##29144
014f4     32 B1 02 CB |  if_b	rdlong	local06, objptr
014f8     1B 00 00 CF 
014fc     D4 64 06 C1 |  if_b	add	objptr, ##14036
01500     32 B1 62 CC |  if_b	wrlong	local06, objptr
01504     54 00 00 CF 
01508     AC 64 86 C1 |  if_b	sub	objptr, ##43180
0150c     54 00 00 FF 
01510     AC 64 06 F1 | 	add	objptr, ##43180
01514     32 C1 02 FB | 	rdlong	local14, objptr
01518     54 00 00 FF 
0151c     AC 64 86 F1 | 	sub	objptr, ##43180
01520     60 B1 02 F6 | 	mov	local06, local14
01524     58 93 02 F6 | 	mov	arg01, local06
01528     8C 14 B2 FD | 	call	#_Hg010b_4_spin2_setcursorx
0152c                 | LR__0044
0152c                 | '   if key4=79 then						' arrow right
0152c     4F BE 0E F2 | 	cmp	local13, #79 wz
01530     54 00 90 5D |  if_ne	jmp	#LR__0045
01534                 | ' return cursor_x
01534     3C 64 06 F1 | 	add	objptr, #60
01538     32 7B E2 FA | 	rdword	result1, objptr
0153c     02 7A 06 F1 | 	add	result1, #2
01540     54 00 00 FF 
01544     70 64 06 F1 | 	add	objptr, ##43120
01548     32 7B 62 FC | 	wrlong	result1, objptr
0154c                 | '     cx=v.getcursorx()+2 
0154c                 | '     if cx>254  then cx=254 
0154c     54 00 00 FF 
01550     AC 64 86 F1 | 	sub	objptr, ##43180
01554     FF 7A 56 F2 | 	cmps	result1, #255 wc
01558     54 00 00 3F 
0155c     AC 64 06 31 |  if_ae	add	objptr, ##43180
01560     32 FD 69 3C |  if_ae	wrlong	#254, objptr
01564     54 00 00 3F 
01568     AC 64 86 31 |  if_ae	sub	objptr, ##43180
0156c     54 00 00 FF 
01570     AC 64 06 F1 | 	add	objptr, ##43180
01574     32 B1 02 FB | 	rdlong	local06, objptr
01578     54 00 00 FF 
0157c     AC 64 86 F1 | 	sub	objptr, ##43180
01580     58 93 02 F6 | 	mov	arg01, local06
01584     30 14 B2 FD | 	call	#_Hg010b_4_spin2_setcursorx
01588                 | LR__0045
01588                 | ' 
01588                 | '   if key4=73 then 						' ins
01588     49 BE 0E F2 | 	cmp	local13, #73 wz
0158c     40 00 90 5D |  if_ne	jmp	#LR__0048
01590     54 00 00 FF 
01594     A4 64 06 F1 | 	add	objptr, ##43172
01598     32 B1 02 FB | 	rdlong	local06, objptr
0159c     58 C1 22 F6 | 	not	local14, local06
015a0     32 C1 62 FC | 	wrlong	local14, objptr
015a4                 | '     if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
015a4     54 00 00 FF 
015a8     A4 64 86 F1 | 	sub	objptr, ##43172
015ac     00 C0 0E F2 | 	cmp	local14, #0 wz
015b0     10 00 90 AD |  if_e	jmp	#LR__0046
015b4     0E B0 06 F6 | 	mov	local06, #14
015b8     0E 92 06 F6 | 	mov	arg01, #14
015bc     50 02 B2 FD | 	call	#_Hg010b_4_spin2_setcursorshape
015c0     0C 00 90 FD | 	jmp	#LR__0047
015c4                 | LR__0046
015c4     00 B0 06 F6 | 	mov	local06, #0
015c8     00 92 06 F6 | 	mov	arg01, #0
015cc     40 02 B2 FD | 	call	#_Hg010b_4_spin2_setcursorshape
015d0                 | LR__0047
015d0                 | LR__0048
015d0     00 AC 06 F6 | 	mov	local04, #0
015d4     44 F3 9F FD | 	jmp	#LR__0001
015d8                 | LR__0049
015d8     E7 F0 03 F6 | 	mov	ptra, fp
015dc     F2 00 A0 FD | 	call	#popregs_
015e0                 | _edit_ret
015e0     2D 00 64 FD | 	ret
015e4                 | 
015e4                 | ' 
015e4                 | ' ''-----------------------------------------------------------------------------------------------------------
015e4                 | ' ' 					A housekeepeer.
015e4                 | ' ' A dedicated cog that is intended to do things in the background, for example tracking GUI elements
015e4                 | ' ' or playing audio tracks in  the background.  In the current version it reads the mouse pointer and
015e4                 | ' ' a digital joystick position. It also implements a 200 Hz clock that's ticks are synchronized with vblanks 
015e4                 | ' ''-----------------------------------------------------------------------------------------------------------
015e4                 | ' 
015e4                 | ' sub housekeeper
015e4                 | _housekeeper
015e4                 | ' 
015e4                 | ' do
015e4                 | LR__0050
015e4                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
015e4     49 64 06 F1 | 	add	objptr, #73
015e8                 | LR__0051
015e8     32 93 02 FB | 	rdlong	arg01, objptr
015ec     01 92 0E F2 | 	cmp	arg01, #1 wz
015f0     F4 FF 9F 5D |  if_ne	jmp	#LR__0051
015f4     54 00 00 FF 
015f8     27 64 06 F1 | 	add	objptr, ##43047
015fc     32 93 02 FB | 	rdlong	arg01, objptr
01600     01 92 06 F1 | 	add	arg01, #1
01604     32 93 62 FC | 	wrlong	arg01, objptr
01608     54 00 00 FF 
0160c     70 64 86 F1 | 	sub	objptr, ##43120
01610     80 00 B0 FD | 	call	#_gethdi
01614     05 92 06 F6 | 	mov	arg01, #5
01618     B0 36 B2 FD | 	call	#__system___waitms
0161c     54 00 00 FF 
01620     70 64 06 F1 | 	add	objptr, ##43120
01624     32 93 02 FB | 	rdlong	arg01, objptr
01628     01 92 06 F1 | 	add	arg01, #1
0162c     32 93 62 FC | 	wrlong	arg01, objptr
01630     54 00 00 FF 
01634     70 64 86 F1 | 	sub	objptr, ##43120
01638     58 00 B0 FD | 	call	#_gethdi
0163c     05 92 06 F6 | 	mov	arg01, #5
01640     88 36 B2 FD | 	call	#__system___waitms
01644     54 00 00 FF 
01648     70 64 06 F1 | 	add	objptr, ##43120
0164c     32 93 02 FB | 	rdlong	arg01, objptr
01650     01 92 06 F1 | 	add	arg01, #1
01654     32 93 62 FC | 	wrlong	arg01, objptr
01658     54 00 00 FF 
0165c     70 64 86 F1 | 	sub	objptr, ##43120
01660     30 00 B0 FD | 	call	#_gethdi
01664     05 92 06 F6 | 	mov	arg01, #5
01668     60 36 B2 FD | 	call	#__system___waitms
0166c     54 00 00 FF 
01670     70 64 06 F1 | 	add	objptr, ##43120
01674     32 93 02 FB | 	rdlong	arg01, objptr
01678     01 92 06 F1 | 	add	arg01, #1
0167c     32 93 62 FC | 	wrlong	arg01, objptr
01680     54 00 00 FF 
01684     70 64 86 F1 | 	sub	objptr, ##43120
01688     08 00 B0 FD | 	call	#_gethdi
0168c     54 FF 9F FD | 	jmp	#LR__0050
01690                 | _housekeeper_ret
01690     2D 00 64 FD | 	ret
01694                 | 
01694                 | ' 
01694                 | ' '----------------------------------------------------------------------------------------------------------
01694                 | ' ' gethdi is called from the houseekeeper to read HDI related values
01694                 | ' '----------------------------------------------------------------------------------------------------------
01694                 | ' 
01694                 | ' sub gethdi
01694                 | _gethdi
01694     0A CA 05 F6 | 	mov	COUNT_, #10
01698     E8 00 A0 FD | 	call	#pushregs_
0169c                 | '   x := mouse_xacc
0169c     14 00 00 FF 
016a0     E1 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##10465
016a4     3B 95 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
016a8                 | '   y := mouse_yacc
016a8     04 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, #4
016ac     3B 93 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
016b0     53 00 00 FF 
016b4     EC 64 06 F1 | 	add	objptr, ##42732
016b8     32 95 62 FC | 	wrlong	arg02, objptr
016bc     04 64 06 F1 | 	add	objptr, #4
016c0     32 93 62 FC | 	wrlong	arg01, objptr
016c4                 | '   x := 0
016c4                 | '   y := mouse_zacc
016c4     04 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, #4
016c8     3B 7B 02 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
016cc     08 64 06 F1 | 	add	objptr, #8
016d0     32 7B 62 FC | 	wrlong	result1, objptr
016d4                 | '   return mouse_bstate
016d4     04 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, #4
016d8     3B 7B C2 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
016dc     14 00 00 FF 
016e0     ED 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10477
016e4     04 64 86 F1 | 	sub	objptr, #4
016e8     32 7B 62 FC | 	wrlong	result1, objptr
016ec     53 00 00 FF 
016f0     F4 64 86 F1 | 	sub	objptr, ##42740
016f4     00 A6 06 F6 | 	mov	local01, #0
016f8                 | ' 
016f8                 | ' mousex,mousey=kbm.mouse_xy()
016f8                 | ' dummy,mousew=kbm.mouse_scroll()
016f8                 | ' mousek=kbm.mouse_buttons()
016f8                 | ' i=0
016f8                 | ' for j=0 to 6
016f8     00 A8 06 F6 | 	mov	local02, #0
016fc                 | LR__0060
016fc                 | '   if kbm.hidpad_id(j)>0 then
016fc     54 93 02 F6 | 	mov	arg01, local02
01700                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
01700     3B 7B 02 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
01704     13 00 00 FF 
01708     F8 7B 06 F1 | 	add	result1, ##10232
0170c     05 92 66 F0 | 	shl	arg01, #5
01710     49 7B 02 F1 | 	add	result1, arg01
01714     3D 7B 02 FB | 	rdlong	result1, result1
01718     01 7A 56 F2 | 	cmps	result1, #1 wc
0171c     C8 01 90 CD |  if_b	jmp	#LR__0061
01720     54 93 02 F6 | 	mov	arg01, local02
01724     00 94 06 F6 | 	mov	arg02, #0
01728     58 28 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
0172c     3D AB 02 F6 | 	mov	local03, result1
01730     54 93 02 F6 | 	mov	arg01, local02
01734     01 94 06 F6 | 	mov	arg02, #1
01738     48 28 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
0173c     3D AD 02 F6 | 	mov	local04, result1
01740     54 93 02 F6 | 	mov	arg01, local02
01744     02 94 06 F6 | 	mov	arg02, #2
01748     38 28 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
0174c     3D AF 02 F6 | 	mov	local05, result1
01750     54 93 02 F6 | 	mov	arg01, local02
01754     00 94 06 F6 | 	mov	arg02, #0
01758     64 28 B2 FD | 	call	#_usbnew_spin2_hidpad_hat
0175c     3D B1 02 F6 | 	mov	local06, result1
01760     54 93 02 F6 | 	mov	arg01, local02
01764     03 94 06 F6 | 	mov	arg02, #3
01768     18 28 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
0176c     3D B3 02 F6 | 	mov	local07, result1
01770     54 93 02 F6 | 	mov	arg01, local02
01774     04 94 06 F6 | 	mov	arg02, #4
01778     08 28 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
0177c     3D B5 02 F6 | 	mov	local08, result1
01780     54 93 02 F6 | 	mov	arg01, local02
01784     05 94 06 F6 | 	mov	arg02, #5
01788     F8 27 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
0178c     3D B7 02 F6 | 	mov	local09, result1
01790     54 93 02 F6 | 	mov	arg01, local02
01794     06 94 06 F6 | 	mov	arg02, #6
01798     E8 27 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
0179c     3D B9 02 F6 | 	mov	local10, result1
017a0     54 93 02 F6 | 	mov	arg01, local02
017a4     07 94 06 F6 | 	mov	arg02, #7
017a8     D8 27 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
017ac     53 93 02 F6 | 	mov	arg01, local01
017b0     02 92 66 F0 | 	shl	arg01, #2
017b4     53 00 00 FF 
017b8     FC 64 06 F1 | 	add	objptr, ##42748
017bc     32 93 02 F1 | 	add	arg01, objptr
017c0     49 AB 62 FC | 	wrlong	local03, arg01
017c4     53 93 02 F6 | 	mov	arg01, local01
017c8     02 92 66 F0 | 	shl	arg01, #2
017cc     1C 64 06 F1 | 	add	objptr, #28
017d0     32 93 02 F1 | 	add	arg01, objptr
017d4     49 AD 62 FC | 	wrlong	local04, arg01
017d8     53 93 02 F6 | 	mov	arg01, local01
017dc     02 92 66 F0 | 	shl	arg01, #2
017e0     1C 64 06 F1 | 	add	objptr, #28
017e4     32 93 02 F1 | 	add	arg01, objptr
017e8     49 AF 62 FC | 	wrlong	local05, arg01
017ec     53 AF 02 F6 | 	mov	local05, local01
017f0     02 AE 66 F0 | 	shl	local05, #2
017f4     1C 64 06 F1 | 	add	objptr, #28
017f8     32 AF 02 F1 | 	add	local05, objptr
017fc     57 B1 62 FC | 	wrlong	local06, local05
01800     53 B1 02 F6 | 	mov	local06, local01
01804     02 B0 66 F0 | 	shl	local06, #2
01808     1C 64 06 F1 | 	add	objptr, #28
0180c     32 B1 02 F1 | 	add	local06, objptr
01810     58 B3 62 FC | 	wrlong	local07, local06
01814     53 B3 02 F6 | 	mov	local07, local01
01818     02 B2 66 F0 | 	shl	local07, #2
0181c     1C 64 06 F1 | 	add	objptr, #28
01820     32 B3 02 F1 | 	add	local07, objptr
01824     59 B5 62 FC | 	wrlong	local08, local07
01828     53 B5 02 F6 | 	mov	local08, local01
0182c     02 B4 66 F0 | 	shl	local08, #2
01830     1C 64 06 F1 | 	add	objptr, #28
01834     32 B5 02 F1 | 	add	local08, objptr
01838     5A B7 62 FC | 	wrlong	local09, local08
0183c     53 B7 02 F6 | 	mov	local09, local01
01840     02 B6 66 F0 | 	shl	local09, #2
01844     1C 64 06 F1 | 	add	objptr, #28
01848     32 B7 02 F1 | 	add	local09, objptr
0184c     5B B9 62 FC | 	wrlong	local10, local09
01850     53 B9 02 F6 | 	mov	local10, local01
01854     02 B8 66 F0 | 	shl	local10, #2
01858     1C 64 06 F1 | 	add	objptr, #28
0185c     32 B9 02 F1 | 	add	local10, objptr
01860     5C 7B 62 FC | 	wrlong	result1, local10
01864     60 00 00 FF 
01868     00 AA 06 F1 | 	add	local03, ##49152
0186c     0F AA 46 F0 | 	shr	local03, #15
01870     01 B8 06 F6 | 	mov	local10, #1
01874     55 B9 02 F1 | 	add	local10, local03
01878     60 00 00 FF 
0187c     00 AC 06 F1 | 	add	local04, ##49152
01880     0F AC 46 F0 | 	shr	local04, #15
01884     01 B6 06 F6 | 	mov	local09, #1
01888     56 B7 02 F1 | 	add	local09, local04
0188c     53 B5 02 F6 | 	mov	local08, local01
01890     02 B4 66 F0 | 	shl	local08, #2
01894     1C 64 06 F1 | 	add	objptr, #28
01898     32 B5 02 F1 | 	add	local08, objptr
0189c     02 B6 66 F0 | 	shl	local09, #2
018a0     5B B9 02 F1 | 	add	local10, local09
018a4     5A B9 62 FC | 	wrlong	local10, local08
018a8     53 B9 02 F6 | 	mov	local10, local01
018ac     02 B8 66 F0 | 	shl	local10, #2
018b0     1C 64 06 F1 | 	add	objptr, #28
018b4     32 B9 02 F1 | 	add	local10, objptr
018b8     54 93 02 F6 | 	mov	arg01, local02
018bc     54 00 00 FF 
018c0     14 64 86 F1 | 	sub	objptr, ##43028
018c4                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][6]
018c4     3B 7B 02 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
018c8     13 00 00 FF 
018cc     F8 7B 06 F1 | 	add	result1, ##10232
018d0     05 92 66 F0 | 	shl	arg01, #5
018d4     49 7B 02 F1 | 	add	result1, arg01
018d8     18 7A 06 F1 | 	add	result1, #24
018dc     3D 7B 02 FB | 	rdlong	result1, result1
018e0     5C 7B 62 FC | 	wrlong	result1, local10
018e4     01 A6 06 F1 | 	add	local01, #1
018e8                 | LR__0061
018e8     01 A8 06 F1 | 	add	local02, #1
018ec     07 A8 16 F2 | 	cmp	local02, #7 wc
018f0     08 FE 9F CD |  if_b	jmp	#LR__0060
018f4     D7 22 48 FB | 	callpa	#(@LR__0063-@LR__0062)>>2,fcache_load_ptr_
018f8                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
018f8                 | LR__0062
018f8     07 A6 16 F2 | 	cmp	local01, #7 wc
018fc     3C 00 90 3D |  if_ae	jmp	#LR__0064
01900     53 B9 02 F6 | 	mov	local10, local01
01904     02 B8 66 F0 | 	shl	local10, #2
01908     53 00 00 FF 
0190c     F8 65 06 F1 | 	add	objptr, ##43000
01910     32 B9 02 F1 | 	add	local10, objptr
01914     5C 01 68 FC | 	wrlong	#0, local10
01918     53 B9 02 F6 | 	mov	local10, local01
0191c     02 B8 66 F0 | 	shl	local10, #2
01920     1C 64 06 F1 | 	add	objptr, #28
01924     32 B9 02 F1 | 	add	local10, objptr
01928     5C 01 68 FC | 	wrlong	#0, local10
0192c     01 A6 06 F1 | 	add	local01, #1
01930     54 00 00 FF 
01934     14 64 86 F1 | 	sub	objptr, ##43028
01938     BC FF 9F FD | 	jmp	#LR__0062
0193c                 | LR__0063
0193c                 | LR__0064
0193c     E7 F0 03 F6 | 	mov	ptra, fp
01940     F2 00 A0 FD | 	call	#popregs_
01944                 | _gethdi_ret
01944     2D 00 64 FD | 	ret
01948                 | 
01948                 | ' 
01948                 | ' '-------------------------------------------------------------------------------------------------------------
01948                 | ' '---------------------------------- Housekeeper stuff ends here ----------------------------------------------
01948                 | ' '-------------------------------------------------------------------------------------------------------------
01948                 | ' 
01948                 | ' '-------------------------------------------------------------------------------------------------------------
01948                 | ' '
01948                 | ' '                                     LINE INTERPRETER/TOKENIZER
01948                 | ' '
01948                 | ' '-------------------------------------------------------------------------------------------------------------
01948                 | ' 
01948                 | ' 
01948                 | ' sub interpret
01948                 | _interpret
01948     34 CA 05 F6 | 	mov	COUNT_, #52
0194c     E8 00 A0 FD | 	call	#pushregs_
01950     01 00 00 FF 
01954     80 F0 07 F1 | 	add	ptra, ##640
01958     38 00 00 FF 
0195c     C0 65 06 F1 | 	add	objptr, ##29120
01960     32 93 02 FB | 	rdlong	arg01, objptr
01964     38 00 00 FF 
01968     C0 65 86 F1 | 	sub	objptr, ##29120
0196c     A0 4D B2 FD | 	call	#__system__RTrim_S
01970     3D 93 02 F6 | 	mov	arg01, result1
01974     D8 4C B2 FD | 	call	#__system__LTrim_S
01978     38 00 00 FF 
0197c     C4 65 06 F1 | 	add	objptr, ##29124
01980     32 7B 62 FC | 	wrlong	result1, objptr
01984     04 64 06 F1 | 	add	objptr, #4
01988     FF FF FF FF 
0198c     32 FF 6B FC | 	wrlong	##-1, objptr
01990     1B 00 00 FF 
01994     C4 64 06 F1 | 	add	objptr, ##14020
01998     32 01 68 FC | 	wrlong	#0, objptr
0199c     08 00 00 FF 
019a0     6C 64 86 F1 | 	sub	objptr, ##4204
019a4     32 01 68 FC | 	wrlong	#0, objptr
019a8     4C 00 00 FF 
019ac     20 64 86 F1 | 	sub	objptr, ##38944
019b0     00 A6 06 F6 | 	mov	local01, #0
019b4                 | LR__0070
019b4                 | ' 
019b4                 | ' ' -------------------------    Pass 1: Split the line to parts, strip unneded spaces, lowercase parts, detect and concatenate strings
019b4                 | ' 
019b4                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
019b4                 | ' 
019b4                 | ' 108 
019b4                 | ' for i=0 to 125: separators(i)=0 :next i
019b4     00 A8 06 F6 | 	mov	local02, #0
019b8     38 CE 05 F1 | 	add	fp, #56
019bc     D7 0E 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
019c0                 | LR__0071
019c0     54 AB 02 F6 | 	mov	local03, local02
019c4     02 AA 66 F0 | 	shl	local03, #2
019c8     E7 AA 02 F1 | 	add	local03, fp
019cc     55 01 68 FC | 	wrlong	#0, local03
019d0     01 A8 06 F1 | 	add	local02, #1
019d4     7E A8 56 F2 | 	cmps	local02, #126 wc
019d8     E4 FF 9F CD |  if_b	jmp	#LR__0071
019dc                 | LR__0072
019dc     38 CE 85 F1 | 	sub	fp, #56
019e0                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
019e0     00 A8 06 F6 | 	mov	local02, #0
019e4     36 00 00 FF 
019e8     B0 65 06 F1 | 	add	objptr, ##28080
019ec     D7 20 48 FB | 	callpa	#(@LR__0074-@LR__0073)>>2,fcache_load_ptr_
019f0                 | LR__0073
019f0     54 AD 02 F6 | 	mov	local04, local02
019f4     03 AC 66 F0 | 	shl	local04, #3
019f8     32 AD 02 F1 | 	add	local04, objptr
019fc     92 01 00 FF 
01a00     44 97 06 F6 | 	mov	arg03, ##@LR__5489
01a04     56 97 62 FC | 	wrlong	arg03, local04
01a08     54 AD 02 F6 | 	mov	local04, local02
01a0c     03 AC 66 F0 | 	shl	local04, #3
01a10     32 AF 02 F6 | 	mov	local05, objptr
01a14     32 AD 02 F1 | 	add	local04, objptr
01a18     00 B0 06 F6 | 	mov	local06, #0
01a1c     04 AC 06 F1 | 	add	local04, #4
01a20     56 01 68 FC | 	wrlong	#0, local04
01a24     01 A8 06 F1 | 	add	local02, #1
01a28     7E A8 56 F2 | 	cmps	local02, #126 wc
01a2c     C0 FF 9F CD |  if_b	jmp	#LR__0073
01a30                 | LR__0074
01a30     02 00 00 FF 
01a34     10 64 06 F1 | 	add	objptr, ##1040
01a38     32 93 02 FB | 	rdlong	arg01, objptr
01a3c     38 00 00 FF 
01a40     C0 65 86 F1 | 	sub	objptr, ##29120
01a44     C8 4C B2 FD | 	call	#__system__RTrim_S
01a48     3D 93 02 F6 | 	mov	arg01, result1
01a4c     00 4C B2 FD | 	call	#__system__LTrim_S
01a50     38 00 00 FF 
01a54     C0 65 06 F1 | 	add	objptr, ##29120
01a58     32 7B 62 FC | 	wrlong	result1, objptr
01a5c     92 01 00 FF 
01a60     45 AD 06 F6 | 	mov	local04, ##@LR__5490
01a64     1B 00 00 FF 
01a68     08 65 06 F1 | 	add	objptr, ##14088
01a6c     32 AD 62 FC | 	wrlong	local04, objptr
01a70     1B 00 00 FF 
01a74     08 65 86 F1 | 	sub	objptr, ##14088
01a78     32 93 02 FB | 	rdlong	arg01, objptr
01a7c     38 00 00 FF 
01a80     C0 65 86 F1 | 	sub	objptr, ##29120
01a84     49 B3 02 F6 | 	mov	local07, arg01
01a88     D7 06 48 FB | 	callpa	#(@LR__0076-@LR__0075)>>2,fcache_load_ptr_
01a8c                 | LR__0075
01a8c     59 7B CA FA | 	rdbyte	result1, local07 wz
01a90     01 B2 06 51 |  if_ne	add	local07, #1
01a94     F4 FF 9F 5D |  if_ne	jmp	#LR__0075
01a98                 | LR__0076
01a98     49 B3 8A F1 | 	sub	local07, arg01 wz
01a9c     54 00 00 FF 
01aa0     CC 64 06 F1 | 	add	objptr, ##43212
01aa4     32 B3 62 FC | 	wrlong	local07, objptr
01aa8                 | ' if l=0 then goto 101					' empty line,  nothing to do except print "ready"
01aa8     54 00 00 FF 
01aac     CC 64 86 F1 | 	sub	objptr, ##43212
01ab0     E4 28 90 AD |  if_e	jmp	#LR__0210
01ab4     00 B4 06 F6 | 	mov	local08, #0
01ab8                 | ' d=0							' before we split the line, we have to find colons that are inside a string, 
01ab8                 | ' for i=1 to len(line$)
01ab8     01 A8 06 F6 | 	mov	local02, #1
01abc     38 00 00 FF 
01ac0     C0 65 06 F1 | 	add	objptr, ##29120
01ac4     32 93 02 FB | 	rdlong	arg01, objptr
01ac8     38 00 00 FF 
01acc     C0 65 86 F1 | 	sub	objptr, ##29120
01ad0     49 B3 02 F6 | 	mov	local07, arg01
01ad4     D7 06 48 FB | 	callpa	#(@LR__0078-@LR__0077)>>2,fcache_load_ptr_
01ad8                 | LR__0077
01ad8     59 7B CA FA | 	rdbyte	result1, local07 wz
01adc     01 B2 06 51 |  if_ne	add	local07, #1
01ae0     F4 FF 9F 5D |  if_ne	jmp	#LR__0077
01ae4                 | LR__0078
01ae4     49 B3 82 F1 | 	sub	local07, arg01
01ae8     59 B7 02 F6 | 	mov	local09, local07
01aec     01 B6 06 F1 | 	add	local09, #1
01af0                 | LR__0079
01af0     5B A9 52 F2 | 	cmps	local02, local09 wc
01af4     A4 00 90 3D |  if_ae	jmp	#LR__0081
01af8                 | '   if mid$(line$,i,1)="""" andalso d=0 then 		' they are inside a string if there is an odd number of " before :
01af8     38 00 00 FF 
01afc     C0 65 06 F1 | 	add	objptr, ##29120
01b00     32 93 02 FB | 	rdlong	arg01, objptr
01b04     38 00 00 FF 
01b08     C0 65 86 F1 | 	sub	objptr, ##29120
01b0c     54 95 02 F6 | 	mov	arg02, local02
01b10     01 96 06 F6 | 	mov	arg03, #1
01b14     80 48 B2 FD | 	call	#__system__Mid_S
01b18     3D 93 02 F6 | 	mov	arg01, result1
01b1c     92 01 00 FF 
01b20     46 95 06 F6 | 	mov	arg02, ##@LR__5491
01b24     D8 2E B2 FD | 	call	#__system___string_cmp
01b28     00 7A 0E F2 | 	cmp	result1, #0 wz
01b2c     00 B4 0E A2 |  if_e	cmp	local08, #0 wz
01b30     01 B4 06 A6 |  if_e	mov	local08, #1
01b34     3C 00 90 AD |  if_e	jmp	#LR__0080
01b38     38 00 00 FF 
01b3c     C0 65 06 F1 | 	add	objptr, ##29120
01b40     32 93 02 FB | 	rdlong	arg01, objptr
01b44     38 00 00 FF 
01b48     C0 65 86 F1 | 	sub	objptr, ##29120
01b4c     54 95 02 F6 | 	mov	arg02, local02
01b50     01 96 06 F6 | 	mov	arg03, #1
01b54     40 48 B2 FD | 	call	#__system__Mid_S
01b58     3D 93 02 F6 | 	mov	arg01, result1
01b5c     92 01 00 FF 
01b60     48 95 06 F6 | 	mov	arg02, ##@LR__5492
01b64     98 2E B2 FD | 	call	#__system___string_cmp
01b68     00 7A 0E F2 | 	cmp	result1, #0 wz
01b6c     01 B4 0E A2 |  if_e	cmp	local08, #1 wz
01b70     00 B4 06 A6 |  if_e	mov	local08, #0
01b74                 | LR__0080
01b74     54 AD 02 F6 | 	mov	local04, local02
01b78     03 AC 66 F0 | 	shl	local04, #3
01b7c     32 AF 02 F6 | 	mov	local05, objptr
01b80     36 00 00 FF 
01b84     B0 AF 06 F1 | 	add	local05, ##28080
01b88     57 AD 02 F1 | 	add	local04, local05
01b8c     04 AC 06 F1 | 	add	local04, #4
01b90     56 B5 62 FC | 	wrlong	local08, local04
01b94     01 A8 06 F1 | 	add	local02, #1
01b98     54 FF 9F FD | 	jmp	#LR__0079
01b9c                 | LR__0081
01b9c     01 A8 06 F6 | 	mov	local02, #1
01ba0                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop 		' find the first : that is not in a string
01ba0                 | LR__0082
01ba0     38 00 00 FF 
01ba4     C0 65 06 F1 | 	add	objptr, ##29120
01ba8     32 93 02 FB | 	rdlong	arg01, objptr
01bac     38 00 00 FF 
01bb0     C0 65 86 F1 | 	sub	objptr, ##29120
01bb4     54 95 02 F6 | 	mov	arg02, local02
01bb8     01 96 06 F6 | 	mov	arg03, #1
01bbc     D8 47 B2 FD | 	call	#__system__Mid_S
01bc0     3D 93 02 F6 | 	mov	arg01, result1
01bc4     92 01 00 FF 
01bc8     4A B9 06 F6 | 	mov	local10, ##@LR__5493
01bcc     5C 95 02 F6 | 	mov	arg02, local10
01bd0     2C 2E B2 FD | 	call	#__system___string_cmp
01bd4     00 7A 0E F2 | 	cmp	result1, #0 wz
01bd8     2C 00 90 5D |  if_ne	jmp	#LR__0083
01bdc     54 AF 02 F6 | 	mov	local05, local02
01be0     03 AE 66 F0 | 	shl	local05, #3
01be4     32 B1 02 F6 | 	mov	local06, objptr
01be8     36 00 00 FF 
01bec     B0 B1 06 F1 | 	add	local06, ##28080
01bf0     58 AF 02 F1 | 	add	local05, local06
01bf4     04 AE 06 F1 | 	add	local05, #4
01bf8     57 BB 02 FB | 	rdlong	local11, local05
01bfc     04 AE 86 F1 | 	sub	local05, #4
01c00     5D BD 0A F6 | 	mov	local12, local11 wz
01c04     24 00 90 AD |  if_e	jmp	#LR__0084
01c08                 | LR__0083
01c08     54 00 00 FF 
01c0c     CC 64 06 F1 | 	add	objptr, ##43212
01c10     32 BF 02 FB | 	rdlong	local13, objptr
01c14     54 00 00 FF 
01c18     CC 64 86 F1 | 	sub	objptr, ##43212
01c1c     5F C1 02 F6 | 	mov	local14, local13
01c20     60 A9 52 F2 | 	cmps	local02, local14 wc
01c24     01 A8 06 C1 |  if_b	add	local02, #1
01c28     74 FF 9F CD |  if_b	jmp	#LR__0082
01c2c                 | LR__0084
01c2c                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 	' and separate the part of the line before the first : from the rest
01c2c     54 00 00 FF 
01c30     CC 64 06 F1 | 	add	objptr, ##43212
01c34     32 AD 02 FB | 	rdlong	local04, objptr
01c38     54 00 00 FF 
01c3c     CC 64 86 F1 | 	sub	objptr, ##43212
01c40     56 A9 52 F2 | 	cmps	local02, local04 wc
01c44     A8 00 90 3D |  if_ae	jmp	#LR__0087
01c48     38 00 00 FF 
01c4c     C0 65 06 F1 | 	add	objptr, ##29120
01c50     32 B1 02 FB | 	rdlong	local06, objptr
01c54     38 00 00 FF 
01c58     C0 65 86 F1 | 	sub	objptr, ##29120
01c5c     58 93 02 F6 | 	mov	arg01, local06
01c60     49 B3 02 F6 | 	mov	local07, arg01
01c64     D7 06 48 FB | 	callpa	#(@LR__0086-@LR__0085)>>2,fcache_load_ptr_
01c68                 | LR__0085
01c68     59 7B CA FA | 	rdbyte	result1, local07 wz
01c6c     01 B2 06 51 |  if_ne	add	local07, #1
01c70     F4 FF 9F 5D |  if_ne	jmp	#LR__0085
01c74                 | LR__0086
01c74     49 B3 82 F1 | 	sub	local07, arg01
01c78     59 AF 02 F6 | 	mov	local05, local07
01c7c     57 95 02 F6 | 	mov	arg02, local05
01c80     54 95 82 F1 | 	sub	arg02, local02
01c84     58 93 02 F6 | 	mov	arg01, local06
01c88     7C 46 B2 FD | 	call	#__system__Right_S
01c8c     3D 93 02 F6 | 	mov	arg01, result1
01c90     7C 4A B2 FD | 	call	#__system__RTrim_S
01c94     3D 93 02 F6 | 	mov	arg01, result1
01c98     B4 49 B2 FD | 	call	#__system__LTrim_S
01c9c     54 00 00 FF 
01ca0     D0 64 06 F1 | 	add	objptr, ##43216
01ca4     32 7B 62 FC | 	wrlong	result1, objptr
01ca8     1B 00 00 FF 
01cac     10 65 86 F1 | 	sub	objptr, ##14096
01cb0     32 93 02 FB | 	rdlong	arg01, objptr
01cb4     38 00 00 FF 
01cb8     C0 65 86 F1 | 	sub	objptr, ##29120
01cbc     01 A8 86 F1 | 	sub	local02, #1
01cc0     54 95 02 F6 | 	mov	arg02, local02
01cc4     B8 45 B2 FD | 	call	#__system__Left_S
01cc8     3D 93 02 F6 | 	mov	arg01, result1
01ccc     40 4A B2 FD | 	call	#__system__RTrim_S
01cd0     3D 93 02 F6 | 	mov	arg01, result1
01cd4     78 49 B2 FD | 	call	#__system__LTrim_S
01cd8     38 00 00 FF 
01cdc     C0 65 06 F1 | 	add	objptr, ##29120
01ce0     32 7B 62 FC | 	wrlong	result1, objptr
01ce4     38 00 00 FF 
01ce8     C0 65 86 F1 | 	sub	objptr, ##29120
01cec     1C 00 90 FD | 	jmp	#LR__0088
01cf0                 | LR__0087
01cf0     92 01 00 FF 
01cf4     4C AD 06 F6 | 	mov	local04, ##@LR__5494
01cf8     54 00 00 FF 
01cfc     D0 64 06 F1 | 	add	objptr, ##43216
01d00     32 AD 62 FC | 	wrlong	local04, objptr
01d04     54 00 00 FF 
01d08     D0 64 86 F1 | 	sub	objptr, ##43216
01d0c                 | LR__0088
01d0c                 | ' 
01d0c                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not the last part
01d0c     38 00 00 FF 
01d10     C8 65 06 F1 | 	add	objptr, ##29128
01d14     32 AD 02 FB | 	rdlong	local04, objptr
01d18     38 00 00 FF 
01d1c     C8 65 86 F1 | 	sub	objptr, ##29128
01d20     FF FF 7F FF 
01d24     FF AD 0E F2 | 	cmp	local04, ##-1 wz
01d28     40 00 90 5D |  if_ne	jmp	#LR__0089
01d2c     54 00 00 FF 
01d30     D0 64 06 F1 | 	add	objptr, ##43216
01d34     32 93 02 FB | 	rdlong	arg01, objptr
01d38     54 00 00 FF 
01d3c     D0 64 86 F1 | 	sub	objptr, ##43216
01d40     92 01 00 FF 
01d44     4D B1 06 F6 | 	mov	local06, ##@LR__5495
01d48     58 95 02 F6 | 	mov	arg02, local06
01d4c     B0 2C B2 FD | 	call	#__system___string_cmp
01d50     00 7A 0E F2 | 	cmp	result1, #0 wz
01d54     38 00 00 5F 
01d58     C8 65 06 51 |  if_ne	add	objptr, ##29128
01d5c     32 01 68 5C |  if_ne	wrlong	#0, objptr
01d60     38 00 00 5F 
01d64     C8 65 86 51 |  if_ne	sub	objptr, ##29128
01d68     08 01 90 5D |  if_ne	jmp	#LR__0093
01d6c                 | LR__0089
01d6c                 | ' if cont=-1 andalso rest$= "" then cont=3 : goto 107		' this is the first AND the last part
01d6c     38 00 00 FF 
01d70     C8 65 06 F1 | 	add	objptr, ##29128
01d74     32 AD 02 FB | 	rdlong	local04, objptr
01d78     38 00 00 FF 
01d7c     C8 65 86 F1 | 	sub	objptr, ##29128
01d80     FF FF 7F FF 
01d84     FF AD 0E F2 | 	cmp	local04, ##-1 wz
01d88     3C 00 90 5D |  if_ne	jmp	#LR__0090
01d8c     54 00 00 FF 
01d90     D0 64 06 F1 | 	add	objptr, ##43216
01d94     32 93 02 FB | 	rdlong	arg01, objptr
01d98     54 00 00 FF 
01d9c     D0 64 86 F1 | 	sub	objptr, ##43216
01da0     92 01 00 FF 
01da4     4E 95 06 F6 | 	mov	arg02, ##@LR__5496
01da8     54 2C B2 FD | 	call	#__system___string_cmp
01dac     00 7A 0E F2 | 	cmp	result1, #0 wz
01db0     38 00 00 AF 
01db4     C8 65 06 A1 |  if_e	add	objptr, ##29128
01db8     32 07 68 AC |  if_e	wrlong	#3, objptr
01dbc     38 00 00 AF 
01dc0     C8 65 86 A1 |  if_e	sub	objptr, ##29128
01dc4     AC 00 90 AD |  if_e	jmp	#LR__0093
01dc8                 | LR__0090
01dc8                 | ' if cont=4  andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
01dc8     38 00 00 FF 
01dcc     C8 65 06 F1 | 	add	objptr, ##29128
01dd0     32 AD 02 FB | 	rdlong	local04, objptr
01dd4     38 00 00 FF 
01dd8     C8 65 86 F1 | 	sub	objptr, ##29128
01ddc     04 AC 0E F2 | 	cmp	local04, #4 wz
01de0     3C 00 90 5D |  if_ne	jmp	#LR__0091
01de4     54 00 00 FF 
01de8     D0 64 06 F1 | 	add	objptr, ##43216
01dec     32 93 02 FB | 	rdlong	arg01, objptr
01df0     54 00 00 FF 
01df4     D0 64 86 F1 | 	sub	objptr, ##43216
01df8     92 01 00 FF 
01dfc     4F 95 06 F6 | 	mov	arg02, ##@LR__5497
01e00     FC 2B B2 FD | 	call	#__system___string_cmp
01e04     00 7A 0E F2 | 	cmp	result1, #0 wz
01e08     38 00 00 5F 
01e0c     C8 65 06 51 |  if_ne	add	objptr, ##29128
01e10     32 03 68 5C |  if_ne	wrlong	#1, objptr
01e14     38 00 00 5F 
01e18     C8 65 86 51 |  if_ne	sub	objptr, ##29128
01e1c     54 00 90 5D |  if_ne	jmp	#LR__0093
01e20                 | LR__0091
01e20                 | ' if cont=4  andalso rest$= "" then cont=2 : goto 107		' this is the last, and not the first, part
01e20     38 00 00 FF 
01e24     C8 65 06 F1 | 	add	objptr, ##29128
01e28     32 AD 02 FB | 	rdlong	local04, objptr
01e2c     38 00 00 FF 
01e30     C8 65 86 F1 | 	sub	objptr, ##29128
01e34     04 AC 0E F2 | 	cmp	local04, #4 wz
01e38     38 00 90 5D |  if_ne	jmp	#LR__0092
01e3c     54 00 00 FF 
01e40     D0 64 06 F1 | 	add	objptr, ##43216
01e44     32 93 02 FB | 	rdlong	arg01, objptr
01e48     54 00 00 FF 
01e4c     D0 64 86 F1 | 	sub	objptr, ##43216
01e50     92 01 00 FF 
01e54     50 95 06 F6 | 	mov	arg02, ##@LR__5498
01e58     A4 2B B2 FD | 	call	#__system___string_cmp
01e5c     00 7A 0E F2 | 	cmp	result1, #0 wz
01e60     38 00 00 AF 
01e64     C8 65 06 A1 |  if_e	add	objptr, ##29128
01e68     32 05 68 AC |  if_e	wrlong	#2, objptr
01e6c     38 00 00 AF 
01e70     C8 65 86 A1 |  if_e	sub	objptr, ##29128
01e74                 | LR__0092
01e74                 | LR__0093
01e74     38 CE 05 F1 | 	add	fp, #56
01e78     E7 00 68 FC | 	wrlong	#0, fp
01e7c     38 CE 85 F1 | 	sub	fp, #56
01e80     00 A8 06 F6 | 	mov	local02, #0
01e84     01 C2 06 F6 | 	mov	local15, #1
01e88                 | ' 
01e88                 | ' ' 1b: find separators
01e88                 | ' 
01e88                 | ' 107
01e88                 | ' separators(0)=0
01e88                 | ' i=0: j=1
01e88                 | ' do: 
01e88                 | LR__0094
01e88     01 A8 06 F1 | 	add	local02, #1
01e8c     38 00 00 FF 
01e90     C0 65 06 F1 | 	add	objptr, ##29120
01e94     32 93 02 FB | 	rdlong	arg01, objptr
01e98     38 00 00 FF 
01e9c     C0 65 86 F1 | 	sub	objptr, ##29120
01ea0     54 95 02 F6 | 	mov	arg02, local02
01ea4     01 96 06 F6 | 	mov	arg03, #1
01ea8     EC 44 B2 FD | 	call	#__system__Mid_S
01eac     3D C5 02 F6 | 	mov	local16, result1
01eb0                 | '   i+=1 : c$=mid$(line$,i,1) : if isseparator(c$) then separators(j)=i: j+=1 
01eb0     62 93 02 F6 | 	mov	arg01, local16
01eb4     48 2D B0 FD | 	call	#_isseparator
01eb8     00 7A 0E F2 | 	cmp	result1, #0 wz
01ebc     1C 00 90 AD |  if_e	jmp	#LR__0095
01ec0     61 AB 02 F6 | 	mov	local03, local15
01ec4     02 AA 66 F0 | 	shl	local03, #2
01ec8     E7 B8 02 F6 | 	mov	local10, fp
01ecc     38 B8 06 F1 | 	add	local10, #56
01ed0     5C AB 02 F1 | 	add	local03, local10
01ed4     55 A9 62 FC | 	wrlong	local02, local03
01ed8     01 C2 06 F1 | 	add	local15, #1
01edc                 | LR__0095
01edc     54 00 00 FF 
01ee0     CC 64 06 F1 | 	add	objptr, ##43212
01ee4     32 AD 02 FB | 	rdlong	local04, objptr
01ee8     54 00 00 FF 
01eec     CC 64 86 F1 | 	sub	objptr, ##43212
01ef0     56 A9 5A F2 | 	cmps	local02, local04 wcz
01ef4     90 FF 9F ED |  if_be	jmp	#LR__0094
01ef8     61 AB 02 F6 | 	mov	local03, local15
01efc     02 AA 66 F0 | 	shl	local03, #2
01f00     E7 B8 02 F6 | 	mov	local10, fp
01f04     38 B8 06 F1 | 	add	local10, #56
01f08     5C AB 02 F1 | 	add	local03, local10
01f0c     55 A9 62 FC | 	wrlong	local02, local03
01f10     00 C6 06 F6 | 	mov	local17, #0
01f14                 | ' for i=0 to j-1 
01f14     00 A8 06 F6 | 	mov	local02, #0
01f18     61 C9 02 F6 | 	mov	local18, local15
01f1c                 | LR__0096
01f1c     64 A9 52 F2 | 	cmps	local02, local18 wc
01f20     48 01 90 3D |  if_ae	jmp	#LR__0100
01f24     54 AB 02 F6 | 	mov	local03, local02
01f28     02 AA 66 F0 | 	shl	local03, #2
01f2c     38 CE 05 F1 | 	add	fp, #56
01f30     E7 AA 02 F1 | 	add	local03, fp
01f34     55 AF 02 FB | 	rdlong	local05, local03
01f38     54 00 00 FF 
01f3c     D8 64 06 F1 | 	add	objptr, ##43224
01f40     32 AF 62 FC | 	wrlong	local05, objptr
01f44     54 AB 02 F6 | 	mov	local03, local02
01f48     01 AA 06 F1 | 	add	local03, #1
01f4c     02 AA 66 F0 | 	shl	local03, #2
01f50     E7 B8 02 F6 | 	mov	local10, fp
01f54     E7 AA 02 F1 | 	add	local03, fp
01f58     55 AF 02 FB | 	rdlong	local05, local03
01f5c     04 64 06 F1 | 	add	objptr, #4
01f60     32 AF 62 FC | 	wrlong	local05, objptr
01f64                 | '   if p1>0 then let p$=mid$(line$,p1,1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01f64     04 64 86 F1 | 	sub	objptr, #4
01f68     32 AD 02 FB | 	rdlong	local04, objptr
01f6c     54 00 00 FF 
01f70     D8 64 86 F1 | 	sub	objptr, ##43224
01f74     01 AC 56 F2 | 	cmps	local04, #1 wc
01f78     38 CE 85 F1 | 	sub	fp, #56
01f7c     64 00 90 CD |  if_b	jmp	#LR__0098
01f80     38 00 00 FF 
01f84     C0 65 06 F1 | 	add	objptr, ##29120
01f88     32 93 02 FB | 	rdlong	arg01, objptr
01f8c     1B 00 00 FF 
01f90     18 65 06 F1 | 	add	objptr, ##14104
01f94     32 95 02 FB | 	rdlong	arg02, objptr
01f98     54 00 00 FF 
01f9c     D8 64 86 F1 | 	sub	objptr, ##43224
01fa0     01 96 06 F6 | 	mov	arg03, #1
01fa4     F0 43 B2 FD | 	call	#__system__Mid_S
01fa8     3D CB 02 F6 | 	mov	local19, result1
01fac     92 01 00 FF 
01fb0     51 95 06 F6 | 	mov	arg02, ##@LR__5499
01fb4     65 93 02 F6 | 	mov	arg01, local19
01fb8     44 2A B2 FD | 	call	#__system___string_cmp
01fbc     00 7A 0E F2 | 	cmp	result1, #0 wz
01fc0     20 00 90 AD |  if_e	jmp	#LR__0097
01fc4     63 B9 02 F6 | 	mov	local10, local17
01fc8     03 B8 66 F0 | 	shl	local10, #3
01fcc     32 AF 02 F6 | 	mov	local05, objptr
01fd0     36 00 00 FF 
01fd4     B0 AF 06 F1 | 	add	local05, ##28080
01fd8     57 B9 02 F1 | 	add	local10, local05
01fdc     5C CB 62 FC | 	wrlong	local19, local10
01fe0     01 C6 06 F1 | 	add	local17, #1
01fe4                 | LR__0097
01fe4                 | LR__0098
01fe4     38 00 00 FF 
01fe8     C0 65 06 F1 | 	add	objptr, ##29120
01fec     32 93 02 FB | 	rdlong	arg01, objptr
01ff0     1B 00 00 FF 
01ff4     18 65 06 F1 | 	add	objptr, ##14104
01ff8     32 95 02 FB | 	rdlong	arg02, objptr
01ffc     01 94 06 F1 | 	add	arg02, #1
02000     04 64 06 F1 | 	add	objptr, #4
02004     32 97 02 FB | 	rdlong	arg03, objptr
02008     04 64 86 F1 | 	sub	objptr, #4
0200c     32 BB 02 FB | 	rdlong	local11, objptr
02010     54 00 00 FF 
02014     D8 64 86 F1 | 	sub	objptr, ##43224
02018     5D BD 02 F6 | 	mov	local12, local11
0201c     5E 97 82 F1 | 	sub	arg03, local12
02020     01 96 86 F1 | 	sub	arg03, #1
02024     70 43 B2 FD | 	call	#__system__Mid_S
02028     3D CB 02 F6 | 	mov	local19, result1
0202c                 | '   p$=mid$(line$,p1+1,p2-p1-1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
0202c     92 01 00 FF 
02030     52 95 06 F6 | 	mov	arg02, ##@LR__5500
02034     65 93 02 F6 | 	mov	arg01, local19
02038     C4 29 B2 FD | 	call	#__system___string_cmp
0203c     00 7A 0E F2 | 	cmp	result1, #0 wz
02040     20 00 90 AD |  if_e	jmp	#LR__0099
02044     63 B9 02 F6 | 	mov	local10, local17
02048     03 B8 66 F0 | 	shl	local10, #3
0204c     32 AF 02 F6 | 	mov	local05, objptr
02050     36 00 00 FF 
02054     B0 AF 06 F1 | 	add	local05, ##28080
02058     57 B9 02 F1 | 	add	local10, local05
0205c     5C CB 62 FC | 	wrlong	local19, local10
02060     01 C6 06 F1 | 	add	local17, #1
02064                 | LR__0099
02064     01 A8 06 F1 | 	add	local02, #1
02068     B0 FE 9F FD | 	jmp	#LR__0096
0206c                 | LR__0100
0206c                 | ' 
0206c                 | ' ' 1d  : first part has to have a line number, if not, add 0 for the immediate line
0206c                 | ' 
0206c                 | ' if (cont=0 orelse cont=3) andalso (not isdec(lparts(0).part$))  then for i=k to 1 step -1: lparts(i)=lparts(i-1) : next i: lparts(0).part$="0" : k+=1
0206c     38 00 00 FF 
02070     C8 65 06 F1 | 	add	objptr, ##29128
02074     32 AD 0A FB | 	rdlong	local04, objptr wz
02078     38 00 00 FF 
0207c     C8 65 86 F1 | 	sub	objptr, ##29128
02080     38 00 00 5F 
02084     C8 65 06 51 |  if_ne	add	objptr, ##29128
02088     32 B9 02 5B |  if_ne	rdlong	local10, objptr
0208c     38 00 00 5F 
02090     C8 65 86 51 |  if_ne	sub	objptr, ##29128
02094     03 B8 0E 52 |  if_ne	cmp	local10, #3 wz
02098     C0 00 90 5D |  if_ne	jmp	#LR__0103
0209c     36 00 00 FF 
020a0     B0 65 06 F1 | 	add	objptr, ##28080
020a4     32 BB 02 FB | 	rdlong	local11, objptr
020a8     36 00 00 FF 
020ac     B0 65 86 F1 | 	sub	objptr, ##28080
020b0     5D 93 02 F6 | 	mov	arg01, local11
020b4     2C 50 B0 FD | 	call	#_isdec
020b8     3D BD 02 F6 | 	mov	local12, result1
020bc     5E B1 02 F6 | 	mov	local06, local12
020c0     07 B0 66 F7 | 	signx	local06, #7
020c4     58 B1 22 F6 | 	not	local06, local06
020c8     00 B0 0E F2 | 	cmp	local06, #0 wz
020cc     8C 00 90 AD |  if_e	jmp	#LR__0103
020d0     63 A9 02 F6 | 	mov	local02, local17
020d4     36 00 00 FF 
020d8     B0 65 06 F1 | 	add	objptr, ##28080
020dc     D7 32 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
020e0                 | LR__0101
020e0     54 AF 02 F6 | 	mov	local05, local02
020e4     01 AE 86 F1 | 	sub	local05, #1
020e8     03 AE 66 F0 | 	shl	local05, #3
020ec     32 AF 02 F1 | 	add	local05, objptr
020f0     57 AD 02 FB | 	rdlong	local04, local05
020f4     54 B1 02 F6 | 	mov	local06, local02
020f8     01 B0 86 F1 | 	sub	local06, #1
020fc     03 B0 66 F0 | 	shl	local06, #3
02100     32 B1 02 F1 | 	add	local06, objptr
02104     04 B0 06 F1 | 	add	local06, #4
02108     58 AB 02 FB | 	rdlong	local03, local06
0210c     54 B1 02 F6 | 	mov	local06, local02
02110     03 B0 66 F0 | 	shl	local06, #3
02114     32 BD 02 F6 | 	mov	local12, objptr
02118     32 B1 02 F1 | 	add	local06, objptr
0211c     58 AD 62 FC | 	wrlong	local04, local06
02120     54 BB 02 F6 | 	mov	local11, local02
02124     5D BF 02 F6 | 	mov	local13, local11
02128     03 BE 66 F0 | 	shl	local13, #3
0212c     32 BF 02 F1 | 	add	local13, objptr
02130     04 BE 06 F1 | 	add	local13, #4
02134     5F AB 62 FC | 	wrlong	local03, local13
02138     01 A8 86 F1 | 	sub	local02, #1
0213c     01 A8 56 F2 | 	cmps	local02, #1 wc
02140     9C FF 9F 3D |  if_ae	jmp	#LR__0101
02144                 | LR__0102
02144     92 01 00 FF 
02148     53 AD 06 F6 | 	mov	local04, ##@LR__5501
0214c     32 AD 62 FC | 	wrlong	local04, objptr
02150     36 00 00 FF 
02154     B0 65 86 F1 | 	sub	objptr, ##28080
02158     01 C6 06 F1 | 	add	local17, #1
0215c                 | LR__0103
0215c     00 A8 06 F6 | 	mov	local02, #0
02160                 | ' 
02160                 | ' ' 1e : find strings
02160                 | ' 
02160                 | ' i=0
02160                 | ' do
02160                 | LR__0104
02160                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
02160     54 AF 02 F6 | 	mov	local05, local02
02164     03 AE 66 F0 | 	shl	local05, #3
02168     32 B1 02 F6 | 	mov	local06, objptr
0216c     36 00 00 FF 
02170     B0 B1 06 F1 | 	add	local06, ##28080
02174     58 AF 02 F1 | 	add	local05, local06
02178     57 93 02 FB | 	rdlong	arg01, local05
0217c     92 01 00 FF 
02180     55 95 06 F6 | 	mov	arg02, ##@LR__5502
02184     78 28 B2 FD | 	call	#__system___string_cmp
02188     00 7A 0E F2 | 	cmp	result1, #0 wz
0218c     01 A8 06 51 |  if_ne	add	local02, #1
02190     20 01 90 5D |  if_ne	jmp	#LR__0109
02194     54 CD 02 F6 | 	mov	local20, local02
02198                 | LR__0105
02198     54 B9 02 F6 | 	mov	local10, local02
0219c     01 B8 06 F1 | 	add	local10, #1
021a0     03 B8 66 F0 | 	shl	local10, #3
021a4     36 00 00 FF 
021a8     B0 65 06 F1 | 	add	objptr, ##28080
021ac     32 B9 02 F1 | 	add	local10, objptr
021b0     5C CB 02 FB | 	rdlong	local19, local10
021b4     66 B9 02 F6 | 	mov	local10, local20
021b8     03 B8 66 F0 | 	shl	local10, #3
021bc     32 B9 02 F1 | 	add	local10, objptr
021c0     66 BB 02 F6 | 	mov	local11, local20
021c4     5D C1 02 F6 | 	mov	local14, local11
021c8     03 C0 66 F0 | 	shl	local14, #3
021cc     32 C1 02 F1 | 	add	local14, objptr
021d0     60 93 02 FB | 	rdlong	arg01, local14
021d4     65 BD 02 F6 | 	mov	local12, local19
021d8     5E 95 02 F6 | 	mov	arg02, local12
021dc     36 00 00 FF 
021e0     B0 65 86 F1 | 	sub	objptr, ##28080
021e4     4C 28 B2 FD | 	call	#__system___string_concat
021e8     5C 7B 62 FC | 	wrlong	result1, local10
021ec     54 C3 02 F6 | 	mov	local15, local02
021f0     01 C2 06 F1 | 	add	local15, #1
021f4     63 CF 02 F6 | 	mov	local21, local17
021f8     01 CE 06 F1 | 	add	local21, #1
021fc     D7 3C 48 FB | 	callpa	#(@LR__0107-@LR__0106)>>2,fcache_load_ptr_
02200                 | LR__0106
02200     67 C3 52 F2 | 	cmps	local15, local21 wc
02204     70 00 90 3D |  if_ae	jmp	#LR__0108
02208     61 AF 02 F6 | 	mov	local05, local15
0220c     01 AE 06 F1 | 	add	local05, #1
02210     03 AE 66 F0 | 	shl	local05, #3
02214     36 00 00 FF 
02218     B0 65 06 F1 | 	add	objptr, ##28080
0221c     32 AF 02 F1 | 	add	local05, objptr
02220     57 AD 02 FB | 	rdlong	local04, local05
02224     61 B1 02 F6 | 	mov	local06, local15
02228     01 B0 06 F1 | 	add	local06, #1
0222c     03 B0 66 F0 | 	shl	local06, #3
02230     32 B1 02 F1 | 	add	local06, objptr
02234     04 B0 06 F1 | 	add	local06, #4
02238     58 AB 02 FB | 	rdlong	local03, local06
0223c     61 B1 02 F6 | 	mov	local06, local15
02240     03 B0 66 F0 | 	shl	local06, #3
02244     32 BD 02 F6 | 	mov	local12, objptr
02248     32 B1 02 F1 | 	add	local06, objptr
0224c     58 AD 62 FC | 	wrlong	local04, local06
02250     61 BB 02 F6 | 	mov	local11, local15
02254     5D BF 02 F6 | 	mov	local13, local11
02258     03 BE 66 F0 | 	shl	local13, #3
0225c     32 BF 02 F1 | 	add	local13, objptr
02260     04 BE 06 F1 | 	add	local13, #4
02264     5F AB 62 FC | 	wrlong	local03, local13
02268     01 C2 06 F1 | 	add	local15, #1
0226c     36 00 00 FF 
02270     B0 65 86 F1 | 	sub	objptr, ##28080
02274     88 FF 9F FD | 	jmp	#LR__0106
02278                 | LR__0107
02278                 | LR__0108
02278     01 C6 86 F1 | 	sub	local17, #1
0227c     92 01 00 FF 
02280     57 95 06 F6 | 	mov	arg02, ##@LR__5503
02284     65 93 02 F6 | 	mov	arg01, local19
02288     74 27 B2 FD | 	call	#__system___string_cmp
0228c     00 7A 0E F2 | 	cmp	result1, #0 wz
02290     63 A9 52 52 |  if_ne	cmps	local02, local17 wc
02294     00 FF 9F 4D |  if_c_and_nz	jmp	#LR__0105
02298                 | '   if p$<>"""" then k+=1:i+=1
02298     92 01 00 FF 
0229c     59 95 06 F6 | 	mov	arg02, ##@LR__5504
022a0     65 93 02 F6 | 	mov	arg01, local19
022a4     58 27 B2 FD | 	call	#__system___string_cmp
022a8     00 7A 0E F2 | 	cmp	result1, #0 wz
022ac     01 C6 06 51 |  if_ne	add	local17, #1
022b0     01 A8 06 51 |  if_ne	add	local02, #1
022b4                 | LR__0109
022b4     63 A9 52 F2 | 	cmps	local02, local17 wc
022b8     A4 FE 9F CD |  if_b	jmp	#LR__0104
022bc     00 A8 06 F6 | 	mov	local02, #0
022c0                 | ' 
022c0                 | ' ' 1f : concatenate strings if "" detected between
022c0                 | '  
022c0                 | ' i=0
022c0                 | ' do
022c0                 | LR__0110
022c0                 | '   if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
022c0     54 AF 02 F6 | 	mov	local05, local02
022c4     03 AE 66 F0 | 	shl	local05, #3
022c8     32 B1 02 F6 | 	mov	local06, objptr
022cc     36 00 00 FF 
022d0     B0 B1 06 F1 | 	add	local06, ##28080
022d4     58 AF 02 F1 | 	add	local05, local06
022d8     57 93 02 FB | 	rdlong	arg01, local05
022dc     01 94 06 F6 | 	mov	arg02, #1
022e0     24 40 B2 FD | 	call	#__system__Right_S
022e4     3D 93 02 F6 | 	mov	arg01, result1
022e8     92 01 00 FF 
022ec     5B 95 06 F6 | 	mov	arg02, ##@LR__5505
022f0     0C 27 B2 FD | 	call	#__system___string_cmp
022f4     00 7A 0E F2 | 	cmp	result1, #0 wz
022f8     74 01 90 5D |  if_ne	jmp	#LR__0116
022fc     54 B1 02 F6 | 	mov	local06, local02
02300     01 B0 06 F1 | 	add	local06, #1
02304     03 B0 66 F0 | 	shl	local06, #3
02308     32 BD 02 F6 | 	mov	local12, objptr
0230c     36 00 00 FF 
02310     B0 BD 06 F1 | 	add	local12, ##28080
02314     5E B1 02 F1 | 	add	local06, local12
02318     58 93 02 FB | 	rdlong	arg01, local06
0231c     01 94 06 F6 | 	mov	arg02, #1
02320     5C 3F B2 FD | 	call	#__system__Left_S
02324     3D 93 02 F6 | 	mov	arg01, result1
02328     92 01 00 FF 
0232c     5D 95 06 F6 | 	mov	arg02, ##@LR__5506
02330     CC 26 B2 FD | 	call	#__system___string_cmp
02334     00 7A 0E F2 | 	cmp	result1, #0 wz
02338     34 01 90 5D |  if_ne	jmp	#LR__0116
0233c     54 B9 02 F6 | 	mov	local10, local02
02340     03 B8 66 F0 | 	shl	local10, #3
02344     36 00 00 FF 
02348     B0 65 06 F1 | 	add	objptr, ##28080
0234c     32 B9 02 F1 | 	add	local10, objptr
02350     54 C1 02 F6 | 	mov	local14, local02
02354     03 C0 66 F0 | 	shl	local14, #3
02358     32 C1 02 F1 | 	add	local14, objptr
0235c     60 B1 02 FB | 	rdlong	local06, local14
02360     54 BF 02 F6 | 	mov	local13, local02
02364     01 BE 06 F1 | 	add	local13, #1
02368     03 BE 66 F0 | 	shl	local13, #3
0236c     32 BF 02 F1 | 	add	local13, objptr
02370     5F BD 02 FB | 	rdlong	local12, local13
02374     54 D1 02 F6 | 	mov	local22, local02
02378     01 D0 06 F1 | 	add	local22, #1
0237c     68 D3 02 F6 | 	mov	local23, local22
02380     03 D2 66 F0 | 	shl	local23, #3
02384     32 D5 02 F6 | 	mov	local24, objptr
02388     32 D3 02 F1 | 	add	local23, objptr
0238c     69 93 02 FB | 	rdlong	arg01, local23
02390     36 00 00 FF 
02394     B0 65 86 F1 | 	sub	objptr, ##28080
02398     49 B3 02 F6 | 	mov	local07, arg01
0239c     D7 06 48 FB | 	callpa	#(@LR__0112-@LR__0111)>>2,fcache_load_ptr_
023a0                 | LR__0111
023a0     59 7B CA FA | 	rdbyte	result1, local07 wz
023a4     01 B2 06 51 |  if_ne	add	local07, #1
023a8     F4 FF 9F 5D |  if_ne	jmp	#LR__0111
023ac                 | LR__0112
023ac     49 B3 82 F1 | 	sub	local07, arg01
023b0     59 BB 02 F6 | 	mov	local11, local07
023b4     01 BA 86 F1 | 	sub	local11, #1
023b8     5E 93 02 F6 | 	mov	arg01, local12
023bc     5D 95 02 F6 | 	mov	arg02, local11
023c0     44 3F B2 FD | 	call	#__system__Right_S
023c4     3D BD 02 F6 | 	mov	local12, result1
023c8     58 93 02 F6 | 	mov	arg01, local06
023cc     5E 95 02 F6 | 	mov	arg02, local12
023d0     60 26 B2 FD | 	call	#__system___string_concat
023d4     3D B1 02 F6 | 	mov	local06, result1
023d8     5C B1 62 FC | 	wrlong	local06, local10
023dc                 | '     for j=i+1 to k: lparts(j)=lparts(j+1): next j  
023dc     54 C3 02 F6 | 	mov	local15, local02
023e0     01 C2 06 F1 | 	add	local15, #1
023e4     63 D7 02 F6 | 	mov	local25, local17
023e8     01 D6 06 F1 | 	add	local25, #1
023ec     D7 3C 48 FB | 	callpa	#(@LR__0114-@LR__0113)>>2,fcache_load_ptr_
023f0                 | LR__0113
023f0     6B C3 52 F2 | 	cmps	local15, local25 wc
023f4     70 00 90 3D |  if_ae	jmp	#LR__0115
023f8     61 AF 02 F6 | 	mov	local05, local15
023fc     01 AE 06 F1 | 	add	local05, #1
02400     03 AE 66 F0 | 	shl	local05, #3
02404     36 00 00 FF 
02408     B0 65 06 F1 | 	add	objptr, ##28080
0240c     32 AF 02 F1 | 	add	local05, objptr
02410     57 AD 02 FB | 	rdlong	local04, local05
02414     61 B1 02 F6 | 	mov	local06, local15
02418     01 B0 06 F1 | 	add	local06, #1
0241c     03 B0 66 F0 | 	shl	local06, #3
02420     32 B1 02 F1 | 	add	local06, objptr
02424     04 B0 06 F1 | 	add	local06, #4
02428     58 AB 02 FB | 	rdlong	local03, local06
0242c     61 B1 02 F6 | 	mov	local06, local15
02430     03 B0 66 F0 | 	shl	local06, #3
02434     32 BD 02 F6 | 	mov	local12, objptr
02438     32 B1 02 F1 | 	add	local06, objptr
0243c     58 AD 62 FC | 	wrlong	local04, local06
02440     61 BB 02 F6 | 	mov	local11, local15
02444     5D BF 02 F6 | 	mov	local13, local11
02448     03 BE 66 F0 | 	shl	local13, #3
0244c     32 BF 02 F1 | 	add	local13, objptr
02450     04 BE 06 F1 | 	add	local13, #4
02454     5F AB 62 FC | 	wrlong	local03, local13
02458     01 C2 06 F1 | 	add	local15, #1
0245c     36 00 00 FF 
02460     B0 65 86 F1 | 	sub	objptr, ##28080
02464     88 FF 9F FD | 	jmp	#LR__0113
02468                 | LR__0114
02468                 | LR__0115
02468     01 A8 86 F1 | 	sub	local02, #1
0246c     01 C6 86 F1 | 	sub	local17, #1
02470                 | LR__0116
02470     01 A8 06 F1 | 	add	local02, #1
02474     63 A9 52 F2 | 	cmps	local02, local17 wc
02478     44 FE 9F CD |  if_b	jmp	#LR__0110
0247c     00 A8 06 F6 | 	mov	local02, #0
02480                 | '  
02480                 | ' ' 1g: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
02480                 | '  
02480                 | ' i=0 
02480                 | ' do
02480                 | LR__0117
02480     54 B9 02 F6 | 	mov	local10, local02
02484     03 B8 66 F0 | 	shl	local10, #3
02488     36 00 00 FF 
0248c     B0 65 06 F1 | 	add	objptr, ##28080
02490     32 B9 02 F1 | 	add	local10, objptr
02494     5C D9 02 FB | 	rdlong	local26, local10
02498     54 B9 02 F6 | 	mov	local10, local02
0249c     01 B8 06 F1 | 	add	local10, #1
024a0     03 B8 66 F0 | 	shl	local10, #3
024a4     32 B9 02 F1 | 	add	local10, objptr
024a8     5C DB 02 FB | 	rdlong	local27, local10
024ac                 | '   s1$=lparts(i).part$ : s2$=lparts(i+1).part$
024ac                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
024ac     92 01 00 FF 
024b0     5F 95 06 F6 | 	mov	arg02, ##@LR__5507
024b4     6C 93 02 F6 | 	mov	arg01, local26
024b8     36 00 00 FF 
024bc     B0 65 86 F1 | 	sub	objptr, ##28080
024c0     3C 25 B2 FD | 	call	#__system___string_cmp
024c4     00 7A 0E F2 | 	cmp	result1, #0 wz
024c8     A8 00 90 AD |  if_e	jmp	#LR__0118
024cc     92 01 00 FF 
024d0     61 95 06 F6 | 	mov	arg02, ##@LR__5508
024d4     6C 93 02 F6 | 	mov	arg01, local26
024d8     24 25 B2 FD | 	call	#__system___string_cmp
024dc     3D AB 0A F6 | 	mov	local03, result1 wz
024e0     90 00 90 AD |  if_e	jmp	#LR__0118
024e4     92 01 00 FF 
024e8     63 B1 06 F6 | 	mov	local06, ##@LR__5509
024ec     6C 93 02 F6 | 	mov	arg01, local26
024f0     58 95 02 F6 | 	mov	arg02, local06
024f4     08 25 B2 FD | 	call	#__system___string_cmp
024f8     00 7A 0E F2 | 	cmp	result1, #0 wz
024fc     74 00 90 AD |  if_e	jmp	#LR__0118
02500     92 01 00 FF 
02504     65 BD 06 F6 | 	mov	local12, ##@LR__5510
02508     6C 93 02 F6 | 	mov	arg01, local26
0250c     5E 95 02 F6 | 	mov	arg02, local12
02510     EC 24 B2 FD | 	call	#__system___string_cmp
02514     00 7A 0E F2 | 	cmp	result1, #0 wz
02518     58 00 90 AD |  if_e	jmp	#LR__0118
0251c     92 01 00 FF 
02520     67 BB 06 F6 | 	mov	local11, ##@LR__5511
02524     5D BD 02 F6 | 	mov	local12, local11
02528     6C 93 02 F6 | 	mov	arg01, local26
0252c     5E 95 02 F6 | 	mov	arg02, local12
02530     CC 24 B2 FD | 	call	#__system___string_cmp
02534     3D B1 0A F6 | 	mov	local06, result1 wz
02538     38 00 90 AD |  if_e	jmp	#LR__0118
0253c     92 01 00 FF 
02540     69 BB 06 F6 | 	mov	local11, ##@LR__5512
02544     6C 93 02 F6 | 	mov	arg01, local26
02548     5D 95 02 F6 | 	mov	arg02, local11
0254c     B0 24 B2 FD | 	call	#__system___string_cmp
02550     3D BD 0A F6 | 	mov	local12, result1 wz
02554     1C 00 90 AD |  if_e	jmp	#LR__0118
02558     92 01 00 FF 
0255c     6B C1 06 F6 | 	mov	local14, ##@LR__5513
02560     6C 93 02 F6 | 	mov	arg01, local26
02564     60 95 02 F6 | 	mov	arg02, local14
02568     94 24 B2 FD | 	call	#__system___string_cmp
0256c     3D BB 0A F6 | 	mov	local11, result1 wz
02570     20 00 90 5D |  if_ne	jmp	#LR__0119
02574                 | LR__0118
02574     92 01 00 FF 
02578     6D DD 06 F6 | 	mov	local28, ##@LR__5514
0257c     6E BF 02 F6 | 	mov	local13, local28
02580     6D 93 02 F6 | 	mov	arg01, local27
02584     5F 95 02 F6 | 	mov	arg02, local13
02588     74 24 B2 FD | 	call	#__system___string_cmp
0258c     3D C1 0A F6 | 	mov	local14, result1 wz
02590     B8 00 90 AD |  if_e	jmp	#LR__0122
02594                 | LR__0119
02594     92 01 00 FF 
02598     6F DD 06 F6 | 	mov	local28, ##@LR__5515
0259c     6C 93 02 F6 | 	mov	arg01, local26
025a0     6E 95 02 F6 | 	mov	arg02, local28
025a4     58 24 B2 FD | 	call	#__system___string_cmp
025a8     3D BF 0A F6 | 	mov	local13, result1 wz
025ac     20 00 90 5D |  if_ne	jmp	#LR__0120
025b0     92 01 00 FF 
025b4     71 D3 06 F6 | 	mov	local23, ##@LR__5516
025b8     69 D1 02 F6 | 	mov	local22, local23
025bc     6D 93 02 F6 | 	mov	arg01, local27
025c0     68 95 02 F6 | 	mov	arg02, local22
025c4     38 24 B2 FD | 	call	#__system___string_cmp
025c8     3D DD 0A F6 | 	mov	local28, result1 wz
025cc     7C 00 90 AD |  if_e	jmp	#LR__0122
025d0                 | LR__0120
025d0     92 01 00 FF 
025d4     73 D3 06 F6 | 	mov	local23, ##@LR__5517
025d8     6C 93 02 F6 | 	mov	arg01, local26
025dc     69 95 02 F6 | 	mov	arg02, local23
025e0     1C 24 B2 FD | 	call	#__system___string_cmp
025e4     3D D1 0A F6 | 	mov	local22, result1 wz
025e8     20 00 90 5D |  if_ne	jmp	#LR__0121
025ec     92 01 00 FF 
025f0     75 DF 06 F6 | 	mov	local29, ##@LR__5518
025f4     6F D5 02 F6 | 	mov	local24, local29
025f8     6D 93 02 F6 | 	mov	arg01, local27
025fc     6A 95 02 F6 | 	mov	arg02, local24
02600     FC 23 B2 FD | 	call	#__system___string_cmp
02604     3D D3 0A F6 | 	mov	local23, result1 wz
02608     40 00 90 AD |  if_e	jmp	#LR__0122
0260c                 | LR__0121
0260c     92 01 00 FF 
02610     77 E1 06 F6 | 	mov	local30, ##@LR__5519
02614     70 DF 02 F6 | 	mov	local29, local30
02618     6C 93 02 F6 | 	mov	arg01, local26
0261c     6F 95 02 F6 | 	mov	arg02, local29
02620     DC 23 B2 FD | 	call	#__system___string_cmp
02624     3D D5 0A F6 | 	mov	local24, result1 wz
02628     EC 00 90 5D |  if_ne	jmp	#LR__0126
0262c     92 01 00 FF 
02630     79 E3 06 F6 | 	mov	local31, ##@LR__5520
02634     71 E1 02 F6 | 	mov	local30, local31
02638     6D 93 02 F6 | 	mov	arg01, local27
0263c     70 95 02 F6 | 	mov	arg02, local30
02640     BC 23 B2 FD | 	call	#__system___string_cmp
02644     3D DF 0A F6 | 	mov	local29, result1 wz
02648     CC 00 90 5D |  if_ne	jmp	#LR__0126
0264c                 | LR__0122
0264c     54 B9 02 F6 | 	mov	local10, local02
02650     03 B8 66 F0 | 	shl	local10, #3
02654     32 AF 02 F6 | 	mov	local05, objptr
02658     36 00 00 FF 
0265c     B0 AF 06 F1 | 	add	local05, ##28080
02660     57 B9 02 F1 | 	add	local10, local05
02664     6D BD 02 F6 | 	mov	local12, local27
02668     6C 93 02 F6 | 	mov	arg01, local26
0266c     5E 95 02 F6 | 	mov	arg02, local12
02670     C0 23 B2 FD | 	call	#__system___string_concat
02674     5C 7B 62 FC | 	wrlong	result1, local10
02678                 | '     lparts(i).part$=s1$+s2$
02678                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
02678     54 C3 02 F6 | 	mov	local15, local02
0267c     01 C2 06 F1 | 	add	local15, #1
02680     63 E5 02 F6 | 	mov	local32, local17
02684     01 E4 06 F1 | 	add	local32, #1
02688     D7 42 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
0268c                 | LR__0123
0268c     72 C3 52 F2 | 	cmps	local15, local32 wc
02690     7C 00 90 3D |  if_ae	jmp	#LR__0125
02694     61 AF 02 F6 | 	mov	local05, local15
02698     01 AE 06 F1 | 	add	local05, #1
0269c     03 AE 66 F0 | 	shl	local05, #3
026a0     36 00 00 FF 
026a4     B0 65 06 F1 | 	add	objptr, ##28080
026a8     32 AF 02 F1 | 	add	local05, objptr
026ac     57 AD 02 FB | 	rdlong	local04, local05
026b0     61 B1 02 F6 | 	mov	local06, local15
026b4     01 B0 06 F1 | 	add	local06, #1
026b8     03 B0 66 F0 | 	shl	local06, #3
026bc     32 B1 02 F1 | 	add	local06, objptr
026c0     04 B0 06 F1 | 	add	local06, #4
026c4     58 AB 02 FB | 	rdlong	local03, local06
026c8     61 B1 02 F6 | 	mov	local06, local15
026cc     03 B0 66 F0 | 	shl	local06, #3
026d0     32 BD 02 F6 | 	mov	local12, objptr
026d4     32 B1 02 F1 | 	add	local06, objptr
026d8     58 AD 62 FC | 	wrlong	local04, local06
026dc     61 BB 02 F6 | 	mov	local11, local15
026e0     5D C1 02 F6 | 	mov	local14, local11
026e4     60 BF 02 F6 | 	mov	local13, local14
026e8     03 BE 66 F0 | 	shl	local13, #3
026ec     32 DD 02 F6 | 	mov	local28, objptr
026f0     32 BF 02 F1 | 	add	local13, objptr
026f4     04 BE 06 F1 | 	add	local13, #4
026f8     5F AB 62 FC | 	wrlong	local03, local13
026fc     04 BE 86 F1 | 	sub	local13, #4
02700     01 C2 06 F1 | 	add	local15, #1
02704     36 00 00 FF 
02708     B0 65 86 F1 | 	sub	objptr, ##28080
0270c     7C FF 9F FD | 	jmp	#LR__0123
02710                 | LR__0124
02710                 | LR__0125
02710     01 A8 86 F1 | 	sub	local02, #1
02714     01 C6 86 F1 | 	sub	local17, #1
02718                 | LR__0126
02718     01 A8 06 F1 | 	add	local02, #1
0271c     63 A9 52 F2 | 	cmps	local02, local17 wc
02720     5C FD 9F CD |  if_b	jmp	#LR__0117
02724                 | '  
02724                 | ' ' 1h : now remove parts that are spaces
02724                 | ' 
02724                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
02724     00 A8 06 F6 | 	mov	local02, #0
02728     63 E7 02 F6 | 	mov	local33, local17
0272c     01 E6 06 F1 | 	add	local33, #1
02730                 | LR__0127
02730     73 A9 52 F2 | 	cmps	local02, local33 wc
02734     50 00 90 3D |  if_ae	jmp	#LR__0128
02738     54 B9 02 F6 | 	mov	local10, local02
0273c     03 B8 66 F0 | 	shl	local10, #3
02740     36 00 00 FF 
02744     B0 65 06 F1 | 	add	objptr, ##28080
02748     32 B9 02 F1 | 	add	local10, objptr
0274c     54 BD 02 F6 | 	mov	local12, local02
02750     5E BB 02 F6 | 	mov	local11, local12
02754     5D C1 02 F6 | 	mov	local14, local11
02758     03 C0 66 F0 | 	shl	local14, #3
0275c     32 BF 02 F6 | 	mov	local13, objptr
02760     32 C1 02 F1 | 	add	local14, objptr
02764     60 93 02 FB | 	rdlong	arg01, local14
02768     36 00 00 FF 
0276c     B0 65 86 F1 | 	sub	objptr, ##28080
02770     9C 3F B2 FD | 	call	#__system__RTrim_S
02774     3D 93 02 F6 | 	mov	arg01, result1
02778     D4 3E B2 FD | 	call	#__system__LTrim_S
0277c     5C 7B 62 FC | 	wrlong	result1, local10
02780     01 A8 06 F1 | 	add	local02, #1
02784     A8 FF 9F FD | 	jmp	#LR__0127
02788                 | LR__0128
02788     00 A8 06 F6 | 	mov	local02, #0
0278c     D7 86 48 FB | 	callpa	#(@LR__0135-@LR__0129)>>2,fcache_load_ptr_
02790                 | ' i=0
02790                 | ' do 
02790                 | LR__0129
02790                 | '   if len(lparts(i).part$)=0 then 
02790     54 AF 02 F6 | 	mov	local05, local02
02794     03 AE 66 F0 | 	shl	local05, #3
02798     32 B1 02 F6 | 	mov	local06, objptr
0279c     36 00 00 FF 
027a0     B0 B1 06 F1 | 	add	local06, ##28080
027a4     58 AF 02 F1 | 	add	local05, local06
027a8     57 93 02 FB | 	rdlong	arg01, local05
027ac     49 B3 02 F6 | 	mov	local07, arg01
027b0                 | LR__0130
027b0     59 7B CA FA | 	rdbyte	result1, local07 wz
027b4     01 B2 06 51 |  if_ne	add	local07, #1
027b8     F4 FF 9F 5D |  if_ne	jmp	#LR__0130
027bc     49 B3 8A F1 | 	sub	local07, arg01 wz
027c0     C4 00 90 5D |  if_ne	jmp	#LR__0134
027c4                 | '     if i=k-1 then k-=1  :  exit
027c4     63 AD 02 F6 | 	mov	local04, local17
027c8     01 AC 86 F1 | 	sub	local04, #1
027cc     56 A9 0A F2 | 	cmp	local02, local04 wz
027d0     01 C6 86 A1 |  if_e	sub	local17, #1
027d4     C4 00 90 AD |  if_e	jmp	#LR__0136
027d8                 | '     if i<k-1 then 
027d8     63 AD 02 F6 | 	mov	local04, local17
027dc     01 AC 86 F1 | 	sub	local04, #1
027e0     56 A9 52 F2 | 	cmps	local02, local04 wc
027e4     A0 00 90 3D |  if_ae	jmp	#LR__0133
027e8                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
027e8     54 C3 02 F6 | 	mov	local15, local02
027ec     63 E9 02 F6 | 	mov	local34, local17
027f0     01 E8 86 F1 | 	sub	local34, #1
027f4                 | LR__0131
027f4     74 C3 52 F2 | 	cmps	local15, local34 wc
027f8     80 00 90 3D |  if_ae	jmp	#LR__0132
027fc     61 AF 02 F6 | 	mov	local05, local15
02800     01 AE 06 F1 | 	add	local05, #1
02804     03 AE 66 F0 | 	shl	local05, #3
02808     36 00 00 FF 
0280c     B0 65 06 F1 | 	add	objptr, ##28080
02810     32 AF 02 F1 | 	add	local05, objptr
02814     57 AD 02 FB | 	rdlong	local04, local05
02818     61 B1 02 F6 | 	mov	local06, local15
0281c     01 B0 06 F1 | 	add	local06, #1
02820     03 B0 66 F0 | 	shl	local06, #3
02824     32 B1 02 F1 | 	add	local06, objptr
02828     04 B0 06 F1 | 	add	local06, #4
0282c     58 AB 02 FB | 	rdlong	local03, local06
02830     61 B9 02 F6 | 	mov	local10, local15
02834     5C B1 02 F6 | 	mov	local06, local10
02838     03 B0 66 F0 | 	shl	local06, #3
0283c     32 BD 02 F6 | 	mov	local12, objptr
02840     32 B1 02 F1 | 	add	local06, objptr
02844     58 AD 62 FC | 	wrlong	local04, local06
02848     61 BB 02 F6 | 	mov	local11, local15
0284c     5D C1 02 F6 | 	mov	local14, local11
02850     60 BF 02 F6 | 	mov	local13, local14
02854     03 BE 66 F0 | 	shl	local13, #3
02858     32 DD 02 F6 | 	mov	local28, objptr
0285c     32 BF 02 F1 | 	add	local13, objptr
02860     04 BE 06 F1 | 	add	local13, #4
02864     5F AB 62 FC | 	wrlong	local03, local13
02868     04 BE 86 F1 | 	sub	local13, #4
0286c     01 C2 06 F1 | 	add	local15, #1
02870     36 00 00 FF 
02874     B0 65 86 F1 | 	sub	objptr, ##28080
02878     78 FF 9F FD | 	jmp	#LR__0131
0287c                 | LR__0132
0287c     01 C6 86 F1 | 	sub	local17, #1
02880                 | '       if i>0 then i-=1 
02880     01 A8 56 F2 | 	cmps	local02, #1 wc
02884     01 A8 86 31 |  if_ae	sub	local02, #1
02888                 | LR__0133
02888                 | LR__0134
02888     01 A8 06 F1 | 	add	local02, #1
0288c     63 AD 02 F6 | 	mov	local04, local17
02890     01 AC 86 F1 | 	sub	local04, #1
02894     56 A9 5A F2 | 	cmps	local02, local04 wcz
02898     F4 FE 9F ED |  if_be	jmp	#LR__0129
0289c                 | LR__0135
0289c                 | LR__0136
0289c                 | ' 
0289c                 | ' ' 1i: lowercase all that is not a string
0289c                 | ' 
0289c                 | ' for j=0 to k-1
0289c     00 C2 06 F6 | 	mov	local15, #0
028a0     63 EB 02 F6 | 	mov	local35, local17
028a4                 | LR__0137
028a4     75 C3 52 F2 | 	cmps	local15, local35 wc
028a8     C0 00 90 3D |  if_ae	jmp	#LR__0140
028ac                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
028ac     61 AF 02 F6 | 	mov	local05, local15
028b0     03 AE 66 F0 | 	shl	local05, #3
028b4     32 B1 02 F6 | 	mov	local06, objptr
028b8     36 00 00 FF 
028bc     B0 B1 06 F1 | 	add	local06, ##28080
028c0     58 AF 02 F1 | 	add	local05, local06
028c4     57 93 02 FB | 	rdlong	arg01, local05
028c8     01 94 06 F6 | 	mov	arg02, #1
028cc     B0 39 B2 FD | 	call	#__system__Left_S
028d0     3D 93 02 F6 | 	mov	arg01, result1
028d4     92 01 00 FF 
028d8     7B 95 06 F6 | 	mov	arg02, ##@LR__5521
028dc     20 21 B2 FD | 	call	#__system___string_cmp
028e0     00 7A 0E F2 | 	cmp	result1, #0 wz
028e4     3C 00 90 5D |  if_ne	jmp	#LR__0138
028e8     61 B1 02 F6 | 	mov	local06, local15
028ec     03 B0 66 F0 | 	shl	local06, #3
028f0     32 BD 02 F6 | 	mov	local12, objptr
028f4     36 00 00 FF 
028f8     B0 BD 06 F1 | 	add	local12, ##28080
028fc     5E B1 02 F1 | 	add	local06, local12
02900     58 93 02 FB | 	rdlong	arg01, local06
02904     01 94 06 F6 | 	mov	arg02, #1
02908     FC 39 B2 FD | 	call	#__system__Right_S
0290c     3D 93 02 F6 | 	mov	arg01, result1
02910     92 01 00 FF 
02914     7D 95 06 F6 | 	mov	arg02, ##@LR__5522
02918     E4 20 B2 FD | 	call	#__system___string_cmp
0291c     00 7A 0E F2 | 	cmp	result1, #0 wz
02920     40 00 90 AD |  if_e	jmp	#LR__0139
02924                 | LR__0138
02924     61 B9 02 F6 | 	mov	local10, local15
02928     03 B8 66 F0 | 	shl	local10, #3
0292c     36 00 00 FF 
02930     B0 65 06 F1 | 	add	objptr, ##28080
02934     32 B9 02 F1 | 	add	local10, objptr
02938     61 BD 02 F6 | 	mov	local12, local15
0293c     5E BB 02 F6 | 	mov	local11, local12
02940     5D C1 02 F6 | 	mov	local14, local11
02944     03 C0 66 F0 | 	shl	local14, #3
02948     32 BF 02 F6 | 	mov	local13, objptr
0294c     32 C1 02 F1 | 	add	local14, objptr
02950     60 93 02 FB | 	rdlong	arg01, local14
02954     36 00 00 FF 
02958     B0 65 86 F1 | 	sub	objptr, ##28080
0295c     30 3C B2 FD | 	call	#__system__LCase_S
02960     5C 7B 62 FC | 	wrlong	result1, local10
02964                 | LR__0139
02964     01 C2 06 F1 | 	add	local15, #1
02968     38 FF 9F FD | 	jmp	#LR__0137
0296c                 | LR__0140
0296c                 | ' 
0296c                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
0296c                 | ' 
0296c                 | ' for i=0 to k: lparts(i).token=-1: next i					' initialize all tokens to -1=invalid
0296c     00 A8 06 F6 | 	mov	local02, #0
02970     63 ED 02 F6 | 	mov	local36, local17
02974     01 EC 06 F1 | 	add	local36, #1
02978     D7 1A 48 FB | 	callpa	#(@LR__0142-@LR__0141)>>2,fcache_load_ptr_
0297c                 | LR__0141
0297c     76 A9 52 F2 | 	cmps	local02, local36 wc
02980     2C 00 90 3D |  if_ae	jmp	#LR__0143
02984     54 B9 02 F6 | 	mov	local10, local02
02988     03 B8 66 F0 | 	shl	local10, #3
0298c     32 AF 02 F6 | 	mov	local05, objptr
02990     36 00 00 FF 
02994     B0 AF 06 F1 | 	add	local05, ##28080
02998     57 B9 02 F1 | 	add	local10, local05
0299c     04 B8 06 F1 | 	add	local10, #4
029a0     FF FF FF FF 
029a4     5C FF 6B FC | 	wrlong	##-1, local10
029a8     01 A8 06 F1 | 	add	local02, #1
029ac     CC FF 9F FD | 	jmp	#LR__0141
029b0                 | LR__0142
029b0                 | LR__0143
029b0                 | ' 
029b0                 | ' if isdec(lparts(0).part$) then addptr=1 else addptr=0				' check if the abbreviated command are on the line start, or after linenum, 'then' or 'else'
029b0     36 00 00 FF 
029b4     B0 65 06 F1 | 	add	objptr, ##28080
029b8     32 93 02 FB | 	rdlong	arg01, objptr
029bc     36 00 00 FF 
029c0     B0 65 86 F1 | 	sub	objptr, ##28080
029c4     1C 47 B0 FD | 	call	#_isdec
029c8     00 7A 0E F2 | 	cmp	result1, #0 wz
029cc     01 EE 06 56 |  if_ne	mov	local37, #1
029d0     00 EE 06 A6 |  if_e	mov	local37, #0
029d4                 | ' if lparts(0).part$="else" then addptr=1 					' else is always the first
029d4     36 00 00 FF 
029d8     B0 65 06 F1 | 	add	objptr, ##28080
029dc     32 93 02 FB | 	rdlong	arg01, objptr
029e0     36 00 00 FF 
029e4     B0 65 86 F1 | 	sub	objptr, ##28080
029e8     92 01 00 FF 
029ec     7F 95 06 F6 | 	mov	arg02, ##@LR__5523
029f0     0C 20 B2 FD | 	call	#__system___string_cmp
029f4     00 7A 0E F2 | 	cmp	result1, #0 wz
029f8     01 EE 06 A6 |  if_e	mov	local37, #1
029fc     00 A8 06 F6 | 	mov	local02, #0
02a00                 | ' i=0 : do 
02a00                 | LR__0144
02a00                 | '   if lparts(i).part$="then" then exit loop 					' try to find 'then'
02a00     54 AF 02 F6 | 	mov	local05, local02
02a04     03 AE 66 F0 | 	shl	local05, #3
02a08     32 B1 02 F6 | 	mov	local06, objptr
02a0c     36 00 00 FF 
02a10     B0 B1 06 F1 | 	add	local06, ##28080
02a14     58 AF 02 F1 | 	add	local05, local06
02a18     57 93 02 FB | 	rdlong	arg01, local05
02a1c     92 01 00 FF 
02a20     84 95 06 F6 | 	mov	arg02, ##@LR__5524
02a24     D8 1F B2 FD | 	call	#__system___string_cmp
02a28     00 7A 0E F2 | 	cmp	result1, #0 wz
02a2c     0C 00 90 AD |  if_e	jmp	#LR__0145
02a30     01 A8 06 F1 | 	add	local02, #1
02a34     63 A9 5A F2 | 	cmps	local02, local17 wcz
02a38     C4 FF 9F ED |  if_be	jmp	#LR__0144
02a3c                 | LR__0145
02a3c                 | ' if i<k then addptr=i+1	 							' then found
02a3c     63 A9 52 F2 | 	cmps	local02, local17 wc
02a40     54 EF 02 C6 |  if_b	mov	local37, local02
02a44     01 EE 06 C1 |  if_b	add	local37, #1
02a48     36 00 00 FF 
02a4c     B0 65 06 F1 | 	add	objptr, ##28080
02a50                 | ' lp$=lparts(addptr).part$ 
02a50                 | ' 
02a50                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then ' ? is abbreviation of print, but it has no dots, so it has to be treated here
02a50     77 AF 02 F6 | 	mov	local05, local37
02a54     03 AE 66 F0 | 	shl	local05, #3
02a58     32 AF 02 F1 | 	add	local05, objptr
02a5c     57 93 02 FB | 	rdlong	arg01, local05
02a60     01 94 06 F6 | 	mov	arg02, #1
02a64     36 00 00 FF 
02a68     B0 65 86 F1 | 	sub	objptr, ##28080
02a6c     10 38 B2 FD | 	call	#__system__Left_S
02a70     3D 93 02 F6 | 	mov	arg01, result1
02a74     92 01 00 FF 
02a78     89 95 06 F6 | 	mov	arg02, ##@LR__5525
02a7c     80 1F B2 FD | 	call	#__system___string_cmp
02a80     00 7A 0E F2 | 	cmp	result1, #0 wz
02a84     58 01 90 5D |  if_ne	jmp	#LR__0152
02a88     77 B1 02 F6 | 	mov	local06, local37
02a8c     03 B0 66 F0 | 	shl	local06, #3
02a90     32 BD 02 F6 | 	mov	local12, objptr
02a94     36 00 00 FF 
02a98     B0 BD 06 F1 | 	add	local12, ##28080
02a9c     5E B1 02 F1 | 	add	local06, local12
02aa0     58 93 02 FB | 	rdlong	arg01, local06
02aa4     49 B3 02 F6 | 	mov	local07, arg01
02aa8     D7 06 48 FB | 	callpa	#(@LR__0147-@LR__0146)>>2,fcache_load_ptr_
02aac                 | LR__0146
02aac     59 7B CA FA | 	rdbyte	result1, local07 wz
02ab0     01 B2 06 51 |  if_ne	add	local07, #1
02ab4     F4 FF 9F 5D |  if_ne	jmp	#LR__0146
02ab8                 | LR__0147
02ab8     49 B3 82 F1 | 	sub	local07, arg01
02abc     02 B2 56 F2 | 	cmps	local07, #2 wc
02ac0     1C 01 90 CD |  if_b	jmp	#LR__0152
02ac4     01 C6 06 F1 | 	add	local17, #1
02ac8                 | '   k+=1
02ac8                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02ac8     63 A9 02 F6 | 	mov	local02, local17
02acc     77 F1 02 F6 | 	mov	local38, local37
02ad0     01 F0 06 F1 | 	add	local38, #1
02ad4     36 00 00 FF 
02ad8     B0 65 06 F1 | 	add	objptr, ##28080
02adc     D7 2E 48 FB | 	callpa	#(@LR__0149-@LR__0148)>>2,fcache_load_ptr_
02ae0                 | LR__0148
02ae0     54 AF 02 F6 | 	mov	local05, local02
02ae4     01 AE 86 F1 | 	sub	local05, #1
02ae8     03 AE 66 F0 | 	shl	local05, #3
02aec     32 AF 02 F1 | 	add	local05, objptr
02af0     57 AD 02 FB | 	rdlong	local04, local05
02af4     54 B1 02 F6 | 	mov	local06, local02
02af8     01 B0 86 F1 | 	sub	local06, #1
02afc     03 B0 66 F0 | 	shl	local06, #3
02b00     32 B1 02 F1 | 	add	local06, objptr
02b04     04 B0 06 F1 | 	add	local06, #4
02b08     58 AB 02 FB | 	rdlong	local03, local06
02b0c     54 B1 02 F6 | 	mov	local06, local02
02b10     03 B0 66 F0 | 	shl	local06, #3
02b14     32 B1 02 F1 | 	add	local06, objptr
02b18     58 AD 62 FC | 	wrlong	local04, local06
02b1c     54 BF 02 F6 | 	mov	local13, local02
02b20     03 BE 66 F0 | 	shl	local13, #3
02b24     32 BF 02 F1 | 	add	local13, objptr
02b28     04 BE 06 F1 | 	add	local13, #4
02b2c     5F AB 62 FC | 	wrlong	local03, local13
02b30     01 A8 86 F1 | 	sub	local02, #1
02b34     78 A9 52 F2 | 	cmps	local02, local38 wc
02b38     A4 FF 9F 3D |  if_ae	jmp	#LR__0148
02b3c                 | LR__0149
02b3c     77 B9 02 F6 | 	mov	local10, local37
02b40     01 B8 06 F1 | 	add	local10, #1
02b44     03 B8 66 F0 | 	shl	local10, #3
02b48     32 B9 02 F1 | 	add	local10, objptr
02b4c     77 C1 02 F6 | 	mov	local14, local37
02b50     03 C0 66 F0 | 	shl	local14, #3
02b54     32 C1 02 F1 | 	add	local14, objptr
02b58     60 B1 02 FB | 	rdlong	local06, local14
02b5c     77 BF 02 F6 | 	mov	local13, local37
02b60     5F DD 02 F6 | 	mov	local28, local13
02b64     6E D1 02 F6 | 	mov	local22, local28
02b68     03 D0 66 F0 | 	shl	local22, #3
02b6c     32 D3 02 F6 | 	mov	local23, objptr
02b70     32 D1 02 F1 | 	add	local22, objptr
02b74     68 93 02 FB | 	rdlong	arg01, local22
02b78     36 00 00 FF 
02b7c     B0 65 86 F1 | 	sub	objptr, ##28080
02b80     49 B3 02 F6 | 	mov	local07, arg01
02b84     D7 06 48 FB | 	callpa	#(@LR__0151-@LR__0150)>>2,fcache_load_ptr_
02b88                 | LR__0150
02b88     59 7B CA FA | 	rdbyte	result1, local07 wz
02b8c     01 B2 06 51 |  if_ne	add	local07, #1
02b90     F4 FF 9F 5D |  if_ne	jmp	#LR__0150
02b94                 | LR__0151
02b94     49 B3 82 F1 | 	sub	local07, arg01
02b98     59 C1 02 F6 | 	mov	local14, local07
02b9c     60 BB 02 F6 | 	mov	local11, local14
02ba0     01 BA 86 F1 | 	sub	local11, #1
02ba4     5D BD 02 F6 | 	mov	local12, local11
02ba8     58 93 02 F6 | 	mov	arg01, local06
02bac     5E 95 02 F6 | 	mov	arg02, local12
02bb0     54 37 B2 FD | 	call	#__system__Right_S
02bb4     5C 7B 62 FC | 	wrlong	result1, local10
02bb8     77 B9 02 F6 | 	mov	local10, local37
02bbc     03 B8 66 F0 | 	shl	local10, #3
02bc0     32 AF 02 F6 | 	mov	local05, objptr
02bc4     36 00 00 FF 
02bc8     B0 AF 06 F1 | 	add	local05, ##28080
02bcc     57 B9 02 F1 | 	add	local10, local05
02bd0     92 01 00 FF 
02bd4     8B B1 06 F6 | 	mov	local06, ##@LR__5526
02bd8     5C B1 62 FC | 	wrlong	local06, local10
02bdc     9C 01 90 FD | 	jmp	#LR__0160
02be0                 | LR__0152
02be0     77 B1 02 F6 | 	mov	local06, local37
02be4     03 B0 66 F0 | 	shl	local06, #3
02be8     32 BD 02 F6 | 	mov	local12, objptr
02bec     36 00 00 FF 
02bf0     B0 BD 06 F1 | 	add	local12, ##28080
02bf4     5E B1 02 F1 | 	add	local06, local12
02bf8     58 95 02 FB | 	rdlong	arg02, local06
02bfc     92 01 00 FF 
02c00     8D 97 06 F6 | 	mov	arg03, ##@LR__5527
02c04     01 92 06 F6 | 	mov	arg01, #1
02c08     BC 3B B2 FD | 	call	#__system__Instr
02c0c     3D F3 02 F6 | 	mov	local39, result1
02c10                 | ' 
02c10                 | ' dot=instr(1,lparts(addptr).part$,".")						' find a dot	
02c10                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 				' split the part
02c10     01 F2 56 F2 | 	cmps	local39, #1 wc
02c14     64 01 90 CD |  if_b	jmp	#LR__0159
02c18     77 AF 02 F6 | 	mov	local05, local37
02c1c     03 AE 66 F0 | 	shl	local05, #3
02c20     32 B1 02 F6 | 	mov	local06, objptr
02c24     36 00 00 FF 
02c28     B0 B1 06 F1 | 	add	local06, ##28080
02c2c     58 AF 02 F1 | 	add	local05, local06
02c30     57 93 02 FB | 	rdlong	arg01, local05
02c34     49 B3 02 F6 | 	mov	local07, arg01
02c38     D7 06 48 FB | 	callpa	#(@LR__0154-@LR__0153)>>2,fcache_load_ptr_
02c3c                 | LR__0153
02c3c     59 7B CA FA | 	rdbyte	result1, local07 wz
02c40     01 B2 06 51 |  if_ne	add	local07, #1
02c44     F4 FF 9F 5D |  if_ne	jmp	#LR__0153
02c48                 | LR__0154
02c48     49 B3 82 F1 | 	sub	local07, arg01
02c4c     59 F3 52 F2 | 	cmps	local39, local07 wc
02c50     28 01 90 3D |  if_ae	jmp	#LR__0159
02c54     01 C6 06 F1 | 	add	local17, #1
02c58                 | '   k+=1
02c58                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02c58     63 A9 02 F6 | 	mov	local02, local17
02c5c     77 F5 02 F6 | 	mov	local40, local37
02c60     01 F4 06 F1 | 	add	local40, #1
02c64     36 00 00 FF 
02c68     B0 65 06 F1 | 	add	objptr, ##28080
02c6c     D7 2E 48 FB | 	callpa	#(@LR__0156-@LR__0155)>>2,fcache_load_ptr_
02c70                 | LR__0155
02c70     54 AF 02 F6 | 	mov	local05, local02
02c74     01 AE 86 F1 | 	sub	local05, #1
02c78     03 AE 66 F0 | 	shl	local05, #3
02c7c     32 AF 02 F1 | 	add	local05, objptr
02c80     57 AD 02 FB | 	rdlong	local04, local05
02c84     54 B1 02 F6 | 	mov	local06, local02
02c88     01 B0 86 F1 | 	sub	local06, #1
02c8c     03 B0 66 F0 | 	shl	local06, #3
02c90     32 B1 02 F1 | 	add	local06, objptr
02c94     04 B0 06 F1 | 	add	local06, #4
02c98     58 AB 02 FB | 	rdlong	local03, local06
02c9c     54 B1 02 F6 | 	mov	local06, local02
02ca0     03 B0 66 F0 | 	shl	local06, #3
02ca4     32 B1 02 F1 | 	add	local06, objptr
02ca8     58 AD 62 FC | 	wrlong	local04, local06
02cac     54 BF 02 F6 | 	mov	local13, local02
02cb0     03 BE 66 F0 | 	shl	local13, #3
02cb4     32 BF 02 F1 | 	add	local13, objptr
02cb8     04 BE 06 F1 | 	add	local13, #4
02cbc     5F AB 62 FC | 	wrlong	local03, local13
02cc0     01 A8 86 F1 | 	sub	local02, #1
02cc4     7A A9 52 F2 | 	cmps	local02, local40 wc
02cc8     A4 FF 9F 3D |  if_ae	jmp	#LR__0155
02ccc                 | LR__0156
02ccc     77 B9 02 F6 | 	mov	local10, local37
02cd0     01 B8 06 F1 | 	add	local10, #1
02cd4     03 B8 66 F0 | 	shl	local10, #3
02cd8     32 B9 02 F1 | 	add	local10, objptr
02cdc     77 C1 02 F6 | 	mov	local14, local37
02ce0     03 C0 66 F0 | 	shl	local14, #3
02ce4     32 C1 02 F1 | 	add	local14, objptr
02ce8     60 B1 02 FB | 	rdlong	local06, local14
02cec     77 DD 02 F6 | 	mov	local28, local37
02cf0     6E D1 02 F6 | 	mov	local22, local28
02cf4     03 D0 66 F0 | 	shl	local22, #3
02cf8     32 D3 02 F6 | 	mov	local23, objptr
02cfc     32 D1 02 F1 | 	add	local22, objptr
02d00     68 93 02 FB | 	rdlong	arg01, local22
02d04     36 00 00 FF 
02d08     B0 65 86 F1 | 	sub	objptr, ##28080
02d0c     49 B3 02 F6 | 	mov	local07, arg01
02d10     D7 06 48 FB | 	callpa	#(@LR__0158-@LR__0157)>>2,fcache_load_ptr_
02d14                 | LR__0157
02d14     59 7B CA FA | 	rdbyte	result1, local07 wz
02d18     01 B2 06 51 |  if_ne	add	local07, #1
02d1c     F4 FF 9F 5D |  if_ne	jmp	#LR__0157
02d20                 | LR__0158
02d20     49 B3 82 F1 | 	sub	local07, arg01
02d24     59 95 02 F6 | 	mov	arg02, local07
02d28     79 95 82 F1 | 	sub	arg02, local39
02d2c     58 93 02 F6 | 	mov	arg01, local06
02d30     D4 35 B2 FD | 	call	#__system__Right_S
02d34     5C 7B 62 FC | 	wrlong	result1, local10
02d38     77 B9 02 F6 | 	mov	local10, local37
02d3c     03 B8 66 F0 | 	shl	local10, #3
02d40     36 00 00 FF 
02d44     B0 65 06 F1 | 	add	objptr, ##28080
02d48     32 B9 02 F1 | 	add	local10, objptr
02d4c     77 BB 02 F6 | 	mov	local11, local37
02d50     5D C1 02 F6 | 	mov	local14, local11
02d54     03 C0 66 F0 | 	shl	local14, #3
02d58     32 BF 02 F6 | 	mov	local13, objptr
02d5c     32 C1 02 F1 | 	add	local14, objptr
02d60     60 93 02 FB | 	rdlong	arg01, local14
02d64     79 BD 02 F6 | 	mov	local12, local39
02d68     5E 95 02 F6 | 	mov	arg02, local12
02d6c     36 00 00 FF 
02d70     B0 65 86 F1 | 	sub	objptr, ##28080
02d74     08 35 B2 FD | 	call	#__system__Left_S
02d78     5C 7B 62 FC | 	wrlong	result1, local10
02d7c                 | LR__0159
02d7c                 | LR__0160
02d7c     77 B9 02 F6 | 	mov	local10, local37
02d80     03 B8 66 F0 | 	shl	local10, #3
02d84     32 AF 02 F6 | 	mov	local05, objptr
02d88     36 00 00 FF 
02d8c     B0 AF 06 F1 | 	add	local05, ##28080
02d90     57 B9 02 F1 | 	add	local10, local05
02d94     5C F7 02 FB | 	rdlong	local41, local10
02d98                 | ' 
02d98                 | ' 825
02d98                 | ' lp$=lparts(addptr).part$ 
02d98                 | ' 
02d98                 | ' ' process mouse/cursor/click on/off
02d98                 | ' 
02d98                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02d98     92 01 00 FF 
02d9c     8F 95 06 F6 | 	mov	arg02, ##@LR__5528
02da0     7B 93 02 F6 | 	mov	arg01, local41
02da4     58 1C B2 FD | 	call	#__system___string_cmp
02da8     00 7A 0E F2 | 	cmp	result1, #0 wz
02dac     30 00 90 AD |  if_e	jmp	#LR__0161
02db0     92 01 00 FF 
02db4     95 95 06 F6 | 	mov	arg02, ##@LR__5529
02db8     7B 93 02 F6 | 	mov	arg01, local41
02dbc     40 1C B2 FD | 	call	#__system___string_cmp
02dc0     00 7A 0E F2 | 	cmp	result1, #0 wz
02dc4     18 00 90 AD |  if_e	jmp	#LR__0161
02dc8     92 01 00 FF 
02dcc     9C 95 06 F6 | 	mov	arg02, ##@LR__5530
02dd0     7B 93 02 F6 | 	mov	arg01, local41
02dd4     28 1C B2 FD | 	call	#__system___string_cmp
02dd8     00 7A 0E F2 | 	cmp	result1, #0 wz
02ddc     D8 00 90 5D |  if_ne	jmp	#LR__0164
02de0                 | LR__0161
02de0                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(2).token=token_decimal
02de0     77 AF 02 F6 | 	mov	local05, local37
02de4     01 AE 06 F1 | 	add	local05, #1
02de8     03 AE 66 F0 | 	shl	local05, #3
02dec     32 B1 02 F6 | 	mov	local06, objptr
02df0     36 00 00 FF 
02df4     B0 B1 06 F1 | 	add	local06, ##28080
02df8     58 AF 02 F1 | 	add	local05, local06
02dfc     57 93 02 FB | 	rdlong	arg01, local05
02e00     92 01 00 FF 
02e04     A2 95 06 F6 | 	mov	arg02, ##@LR__5531
02e08     F4 1B B2 FD | 	call	#__system___string_cmp
02e0c     00 7A 0E F2 | 	cmp	result1, #0 wz
02e10     38 00 90 5D |  if_ne	jmp	#LR__0162
02e14     77 B9 02 F6 | 	mov	local10, local37
02e18     01 B8 06 F1 | 	add	local10, #1
02e1c     03 B8 66 F0 | 	shl	local10, #3
02e20     36 00 00 FF 
02e24     B0 65 06 F1 | 	add	objptr, ##28080
02e28     32 B9 02 F1 | 	add	local10, objptr
02e2c     92 01 00 FF 
02e30     A5 B1 06 F6 | 	mov	local06, ##@LR__5532
02e34     5C B1 62 FC | 	wrlong	local06, local10
02e38     14 64 06 F1 | 	add	objptr, #20
02e3c     01 00 80 FF 
02e40     32 01 68 FC | 	wrlong	##512, objptr
02e44     36 00 00 FF 
02e48     C4 65 86 F1 | 	sub	objptr, ##28100
02e4c                 | LR__0162
02e4c                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(2).token=token_decimal
02e4c     77 AF 02 F6 | 	mov	local05, local37
02e50     01 AE 06 F1 | 	add	local05, #1
02e54     03 AE 66 F0 | 	shl	local05, #3
02e58     32 B1 02 F6 | 	mov	local06, objptr
02e5c     36 00 00 FF 
02e60     B0 B1 06 F1 | 	add	local06, ##28080
02e64     58 AF 02 F1 | 	add	local05, local06
02e68     57 93 02 FB | 	rdlong	arg01, local05
02e6c     92 01 00 FF 
02e70     A7 95 06 F6 | 	mov	arg02, ##@LR__5533
02e74     88 1B B2 FD | 	call	#__system___string_cmp
02e78     00 7A 0E F2 | 	cmp	result1, #0 wz
02e7c     38 00 90 5D |  if_ne	jmp	#LR__0163
02e80     77 B9 02 F6 | 	mov	local10, local37
02e84     01 B8 06 F1 | 	add	local10, #1
02e88     03 B8 66 F0 | 	shl	local10, #3
02e8c     36 00 00 FF 
02e90     B0 65 06 F1 | 	add	objptr, ##28080
02e94     32 B9 02 F1 | 	add	local10, objptr
02e98     92 01 00 FF 
02e9c     AB B1 06 F6 | 	mov	local06, ##@LR__5534
02ea0     5C B1 62 FC | 	wrlong	local06, local10
02ea4     14 64 06 F1 | 	add	objptr, #20
02ea8     01 00 80 FF 
02eac     32 01 68 FC | 	wrlong	##512, objptr
02eb0     36 00 00 FF 
02eb4     C4 65 86 F1 | 	sub	objptr, ##28100
02eb8                 | LR__0163
02eb8                 | LR__0164
02eb8                 | ' 		
02eb8                 | ' ' process text constant for 'mode' - TO DO all predefined constants should have # before				
02eb8                 | ' 
02eb8                 | ' if (lp$="mode" orelse lp$="m.") then 
02eb8     92 01 00 FF 
02ebc     AD 95 06 F6 | 	mov	arg02, ##@LR__5535
02ec0     7B 93 02 F6 | 	mov	arg01, local41
02ec4     38 1B B2 FD | 	call	#__system___string_cmp
02ec8     00 7A 0E F2 | 	cmp	result1, #0 wz
02ecc     18 00 90 AD |  if_e	jmp	#LR__0165
02ed0     92 01 00 FF 
02ed4     B2 95 06 F6 | 	mov	arg02, ##@LR__5536
02ed8     7B 93 02 F6 | 	mov	arg01, local41
02edc     20 1B B2 FD | 	call	#__system___string_cmp
02ee0     00 7A 0E F2 | 	cmp	result1, #0 wz
02ee4     28 02 90 5D |  if_ne	jmp	#LR__0172
02ee8                 | LR__0165
02ee8                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"       
02ee8     77 AF 02 F6 | 	mov	local05, local37
02eec     01 AE 06 F1 | 	add	local05, #1
02ef0     03 AE 66 F0 | 	shl	local05, #3
02ef4     32 B1 02 F6 | 	mov	local06, objptr
02ef8     36 00 00 FF 
02efc     B0 B1 06 F1 | 	add	local06, ##28080
02f00     58 AF 02 F1 | 	add	local05, local06
02f04     57 93 02 FB | 	rdlong	arg01, local05
02f08     92 01 00 FF 
02f0c     B5 95 06 F6 | 	mov	arg02, ##@LR__5537
02f10     EC 1A B2 FD | 	call	#__system___string_cmp
02f14     00 7A 0E F2 | 	cmp	result1, #0 wz
02f18     28 00 90 5D |  if_ne	jmp	#LR__0166
02f1c     77 B9 02 F6 | 	mov	local10, local37
02f20     01 B8 06 F1 | 	add	local10, #1
02f24     03 B8 66 F0 | 	shl	local10, #3
02f28     32 AF 02 F6 | 	mov	local05, objptr
02f2c     36 00 00 FF 
02f30     B0 AF 06 F1 | 	add	local05, ##28080
02f34     57 B9 02 F1 | 	add	local10, local05
02f38     92 01 00 FF 
02f3c     BB B1 06 F6 | 	mov	local06, ##@LR__5538
02f40     5C B1 62 FC | 	wrlong	local06, local10
02f44                 | LR__0166
02f44                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02f44     77 AF 02 F6 | 	mov	local05, local37
02f48     01 AE 06 F1 | 	add	local05, #1
02f4c     03 AE 66 F0 | 	shl	local05, #3
02f50     32 B1 02 F6 | 	mov	local06, objptr
02f54     36 00 00 FF 
02f58     B0 B1 06 F1 | 	add	local06, ##28080
02f5c     58 AF 02 F1 | 	add	local05, local06
02f60     57 93 02 FB | 	rdlong	arg01, local05
02f64     92 01 00 FF 
02f68     BD 95 06 F6 | 	mov	arg02, ##@LR__5539
02f6c     90 1A B2 FD | 	call	#__system___string_cmp
02f70     00 7A 0E F2 | 	cmp	result1, #0 wz
02f74     28 00 90 5D |  if_ne	jmp	#LR__0167
02f78     77 B9 02 F6 | 	mov	local10, local37
02f7c     01 B8 06 F1 | 	add	local10, #1
02f80     03 B8 66 F0 | 	shl	local10, #3
02f84     32 AF 02 F6 | 	mov	local05, objptr
02f88     36 00 00 FF 
02f8c     B0 AF 06 F1 | 	add	local05, ##28080
02f90     57 B9 02 F1 | 	add	local10, local05
02f94     92 01 00 FF 
02f98     C6 B1 06 F6 | 	mov	local06, ##@LR__5540
02f9c     5C B1 62 FC | 	wrlong	local06, local10
02fa0                 | LR__0167
02fa0                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02fa0     77 AF 02 F6 | 	mov	local05, local37
02fa4     01 AE 06 F1 | 	add	local05, #1
02fa8     03 AE 66 F0 | 	shl	local05, #3
02fac     32 B1 02 F6 | 	mov	local06, objptr
02fb0     36 00 00 FF 
02fb4     B0 B1 06 F1 | 	add	local06, ##28080
02fb8     58 AF 02 F1 | 	add	local05, local06
02fbc     57 93 02 FB | 	rdlong	arg01, local05
02fc0     92 01 00 FF 
02fc4     C8 95 06 F6 | 	mov	arg02, ##@LR__5541
02fc8     34 1A B2 FD | 	call	#__system___string_cmp
02fcc     00 7A 0E F2 | 	cmp	result1, #0 wz
02fd0     28 00 90 5D |  if_ne	jmp	#LR__0168
02fd4     77 B9 02 F6 | 	mov	local10, local37
02fd8     01 B8 06 F1 | 	add	local10, #1
02fdc     03 B8 66 F0 | 	shl	local10, #3
02fe0     32 AF 02 F6 | 	mov	local05, objptr
02fe4     36 00 00 FF 
02fe8     B0 AF 06 F1 | 	add	local05, ##28080
02fec     57 B9 02 F1 | 	add	local10, local05
02ff0     92 01 00 FF 
02ff4     D1 B1 06 F6 | 	mov	local06, ##@LR__5542
02ff8     5C B1 62 FC | 	wrlong	local06, local10
02ffc                 | LR__0168
02ffc                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02ffc     77 AF 02 F6 | 	mov	local05, local37
03000     01 AE 06 F1 | 	add	local05, #1
03004     03 AE 66 F0 | 	shl	local05, #3
03008     32 B1 02 F6 | 	mov	local06, objptr
0300c     36 00 00 FF 
03010     B0 B1 06 F1 | 	add	local06, ##28080
03014     58 AF 02 F1 | 	add	local05, local06
03018     57 93 02 FB | 	rdlong	arg01, local05
0301c     92 01 00 FF 
03020     D3 95 06 F6 | 	mov	arg02, ##@LR__5543
03024     D8 19 B2 FD | 	call	#__system___string_cmp
03028     00 7A 0E F2 | 	cmp	result1, #0 wz
0302c     28 00 90 5D |  if_ne	jmp	#LR__0169
03030     77 B9 02 F6 | 	mov	local10, local37
03034     01 B8 06 F1 | 	add	local10, #1
03038     03 B8 66 F0 | 	shl	local10, #3
0303c     32 AF 02 F6 | 	mov	local05, objptr
03040     36 00 00 FF 
03044     B0 AF 06 F1 | 	add	local05, ##28080
03048     57 B9 02 F1 | 	add	local10, local05
0304c     92 01 00 FF 
03050     DC B1 06 F6 | 	mov	local06, ##@LR__5544
03054     5C B1 62 FC | 	wrlong	local06, local10
03058                 | LR__0169
03058                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
03058     77 AF 02 F6 | 	mov	local05, local37
0305c     01 AE 06 F1 | 	add	local05, #1
03060     03 AE 66 F0 | 	shl	local05, #3
03064     32 B1 02 F6 | 	mov	local06, objptr
03068     36 00 00 FF 
0306c     B0 B1 06 F1 | 	add	local06, ##28080
03070     58 AF 02 F1 | 	add	local05, local06
03074     57 93 02 FB | 	rdlong	arg01, local05
03078     92 01 00 FF 
0307c     DE 95 06 F6 | 	mov	arg02, ##@LR__5545
03080     7C 19 B2 FD | 	call	#__system___string_cmp
03084     00 7A 0E F2 | 	cmp	result1, #0 wz
03088     28 00 90 5D |  if_ne	jmp	#LR__0170
0308c     77 B9 02 F6 | 	mov	local10, local37
03090     01 B8 06 F1 | 	add	local10, #1
03094     03 B8 66 F0 | 	shl	local10, #3
03098     32 AF 02 F6 | 	mov	local05, objptr
0309c     36 00 00 FF 
030a0     B0 AF 06 F1 | 	add	local05, ##28080
030a4     57 B9 02 F1 | 	add	local10, local05
030a8     92 01 00 FF 
030ac     E1 B1 06 F6 | 	mov	local06, ##@LR__5546
030b0     5C B1 62 FC | 	wrlong	local06, local10
030b4                 | LR__0170
030b4                 | '   if lparts(addptr+1).part$="amiga" then lparts(addptr+1).part$="5"  
030b4     77 AF 02 F6 | 	mov	local05, local37
030b8     01 AE 06 F1 | 	add	local05, #1
030bc     03 AE 66 F0 | 	shl	local05, #3
030c0     32 B1 02 F6 | 	mov	local06, objptr
030c4     36 00 00 FF 
030c8     B0 B1 06 F1 | 	add	local06, ##28080
030cc     58 AF 02 F1 | 	add	local05, local06
030d0     57 93 02 FB | 	rdlong	arg01, local05
030d4     92 01 00 FF 
030d8     E3 95 06 F6 | 	mov	arg02, ##@LR__5547
030dc     20 19 B2 FD | 	call	#__system___string_cmp
030e0     00 7A 0E F2 | 	cmp	result1, #0 wz
030e4     28 00 90 5D |  if_ne	jmp	#LR__0171
030e8     77 B9 02 F6 | 	mov	local10, local37
030ec     01 B8 06 F1 | 	add	local10, #1
030f0     03 B8 66 F0 | 	shl	local10, #3
030f4     32 AF 02 F6 | 	mov	local05, objptr
030f8     36 00 00 FF 
030fc     B0 AF 06 F1 | 	add	local05, ##28080
03100     57 B9 02 F1 | 	add	local10, local05
03104     92 01 00 FF 
03108     E9 B1 06 F6 | 	mov	local06, ##@LR__5548
0310c     5C B1 62 FC | 	wrlong	local06, local10
03110                 | LR__0171
03110                 | LR__0172
03110                 | ' 
03110                 | ' ' find part types 
03110                 | ' 
03110                 | ' for i=0 to k-1
03110     00 A8 06 F6 | 	mov	local02, #0
03114     63 F9 02 F6 | 	mov	local42, local17
03118                 | LR__0173
03118     7C A9 52 F2 | 	cmps	local02, local42 wc
0311c     58 07 90 3D |  if_ae	jmp	#LR__0185
03120     54 B9 02 F6 | 	mov	local10, local02
03124     03 B8 66 F0 | 	shl	local10, #3
03128     36 00 00 FF 
0312c     B0 65 06 F1 | 	add	objptr, ##28080
03130     32 B9 02 F1 | 	add	local10, objptr
03134     54 BB 02 F6 | 	mov	local11, local02
03138     5D C1 02 F6 | 	mov	local14, local11
0313c     60 BF 02 F6 | 	mov	local13, local14
03140     03 BE 66 F0 | 	shl	local13, #3
03144     32 BF 02 F1 | 	add	local13, objptr
03148     5F 93 02 FB | 	rdlong	arg01, local13
0314c     36 00 00 FF 
03150     B0 65 86 F1 | 	sub	objptr, ##28080
03154     A8 1A B0 FD | 	call	#_isseparator
03158     3D 7B E2 F8 | 	getbyte	result1, result1, #0
0315c     04 B8 06 F1 | 	add	local10, #4
03160     5C 7B 62 FC | 	wrlong	result1, local10
03164                 | ' lparts(i).token=isseparator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03164     54 B9 02 F6 | 	mov	local10, local02
03168     03 B8 66 F0 | 	shl	local10, #3
0316c     32 AF 02 F6 | 	mov	local05, objptr
03170     36 00 00 FF 
03174     B0 AF 06 F1 | 	add	local05, ##28080
03178     57 B9 02 F1 | 	add	local10, local05
0317c     04 B8 06 F1 | 	add	local10, #4
03180     5C BD 02 FB | 	rdlong	local12, local10
03184     01 BC 56 F2 | 	cmps	local12, #1 wc
03188     E4 06 90 3D |  if_ae	jmp	#LR__0184
0318c     54 B9 02 F6 | 	mov	local10, local02
03190     03 B8 66 F0 | 	shl	local10, #3
03194     36 00 00 FF 
03198     B0 65 06 F1 | 	add	objptr, ##28080
0319c     32 B9 02 F1 | 	add	local10, objptr
031a0     54 BB 02 F6 | 	mov	local11, local02
031a4     5D C1 02 F6 | 	mov	local14, local11
031a8     60 BF 02 F6 | 	mov	local13, local14
031ac     03 BE 66 F0 | 	shl	local13, #3
031b0     32 BF 02 F1 | 	add	local13, objptr
031b4     5F 93 02 FB | 	rdlong	arg01, local13
031b8     36 00 00 FF 
031bc     B0 65 86 F1 | 	sub	objptr, ##28080
031c0     88 12 B0 FD | 	call	#_isoperator
031c4     3D 7B E2 F8 | 	getbyte	result1, result1, #0
031c8     04 B8 06 F1 | 	add	local10, #4
031cc     5C 7B 62 FC | 	wrlong	result1, local10
031d0                 | ' lparts(i).token=isoperator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
031d0     54 B9 02 F6 | 	mov	local10, local02
031d4     03 B8 66 F0 | 	shl	local10, #3
031d8     32 AF 02 F6 | 	mov	local05, objptr
031dc     36 00 00 FF 
031e0     B0 AF 06 F1 | 	add	local05, ##28080
031e4     57 B9 02 F1 | 	add	local10, local05
031e8     04 B8 06 F1 | 	add	local10, #4
031ec     5C BD 02 FB | 	rdlong	local12, local10
031f0     01 BC 56 F2 | 	cmps	local12, #1 wc
031f4     78 06 90 3D |  if_ae	jmp	#LR__0184
031f8     54 B9 02 F6 | 	mov	local10, local02
031fc     03 B8 66 F0 | 	shl	local10, #3
03200     36 00 00 FF 
03204     B0 65 06 F1 | 	add	objptr, ##28080
03208     32 B9 02 F1 | 	add	local10, objptr
0320c     54 BB 02 F6 | 	mov	local11, local02
03210     5D C1 02 F6 | 	mov	local14, local11
03214     60 BF 02 F6 | 	mov	local13, local14
03218     03 BE 66 F0 | 	shl	local13, #3
0321c     32 BF 02 F1 | 	add	local13, objptr
03220     5F 93 02 FB | 	rdlong	arg01, local13
03224     36 00 00 FF 
03228     B0 65 86 F1 | 	sub	objptr, ##28080
0322c                 | ' 
0322c                 | ' select case s
0322c     93 01 00 FF 
03230     EE 94 06 F6 | 	mov	arg02, ##@LR__5639
03234     C8 17 B2 FD | 	call	#__system___string_cmp
03238     00 7A 0E F2 | 	cmp	result1, #0 wz
0323c     1B 7A 06 A6 |  if_e	mov	result1, #27
03240     00 7A 06 56 |  if_ne	mov	result1, #0
03244     3D 7B E2 F8 | 	getbyte	result1, result1, #0
03248     04 B8 06 F1 | 	add	local10, #4
0324c     5C 7B 62 FC | 	wrlong	result1, local10
03250                 | ' lparts(i).token=isassign(lparts(i).part$) 	: if lparts(i).token>0 then goto 102
03250     54 B9 02 F6 | 	mov	local10, local02
03254     03 B8 66 F0 | 	shl	local10, #3
03258     32 AF 02 F6 | 	mov	local05, objptr
0325c     36 00 00 FF 
03260     B0 AF 06 F1 | 	add	local05, ##28080
03264     57 B9 02 F1 | 	add	local10, local05
03268     04 B8 06 F1 | 	add	local10, #4
0326c     5C BD 02 FB | 	rdlong	local12, local10
03270     01 BC 56 F2 | 	cmps	local12, #1 wc
03274     F8 05 90 3D |  if_ae	jmp	#LR__0184
03278     54 B9 02 F6 | 	mov	local10, local02
0327c     03 B8 66 F0 | 	shl	local10, #3
03280     36 00 00 FF 
03284     B0 65 06 F1 | 	add	objptr, ##28080
03288     32 B9 02 F1 | 	add	local10, objptr
0328c     54 BB 02 F6 | 	mov	local11, local02
03290     5D C1 02 F6 | 	mov	local14, local11
03294     60 BF 02 F6 | 	mov	local13, local14
03298     03 BE 66 F0 | 	shl	local13, #3
0329c     32 BF 02 F1 | 	add	local13, objptr
032a0     5F 93 02 FB | 	rdlong	arg01, local13
032a4     36 00 00 FF 
032a8     B0 65 86 F1 | 	sub	objptr, ##28080
032ac     50 1B B0 FD | 	call	#_iscommand
032b0     3D 7B E2 F8 | 	getbyte	result1, result1, #0
032b4     04 B8 06 F1 | 	add	local10, #4
032b8     5C 7B 62 FC | 	wrlong	result1, local10
032bc                 | ' lparts(i).token=iscommand(lparts(i).part$)	: if lparts(i).token>0 then goto 102
032bc     54 B9 02 F6 | 	mov	local10, local02
032c0     03 B8 66 F0 | 	shl	local10, #3
032c4     32 AF 02 F6 | 	mov	local05, objptr
032c8     36 00 00 FF 
032cc     B0 AF 06 F1 | 	add	local05, ##28080
032d0     57 B9 02 F1 | 	add	local10, local05
032d4     04 B8 06 F1 | 	add	local10, #4
032d8     5C BD 02 FB | 	rdlong	local12, local10
032dc     01 BC 56 F2 | 	cmps	local12, #1 wc
032e0     8C 05 90 3D |  if_ae	jmp	#LR__0184
032e4     54 B9 02 F6 | 	mov	local10, local02
032e8     03 B8 66 F0 | 	shl	local10, #3
032ec     36 00 00 FF 
032f0     B0 65 06 F1 | 	add	objptr, ##28080
032f4     32 B9 02 F1 | 	add	local10, objptr
032f8     54 BB 02 F6 | 	mov	local11, local02
032fc     5D C1 02 F6 | 	mov	local14, local11
03300     60 BF 02 F6 | 	mov	local13, local14
03304     03 BE 66 F0 | 	shl	local13, #3
03308     32 DD 02 F6 | 	mov	local28, objptr
0330c     32 BF 02 F1 | 	add	local13, objptr
03310     5F 93 02 FB | 	rdlong	arg01, local13
03314     36 00 00 FF 
03318     B0 65 86 F1 | 	sub	objptr, ##28080
0331c     A0 2C B0 FD | 	call	#_isfunction
03320     3D 7B E2 F8 | 	getbyte	result1, result1, #0
03324     04 B8 06 F1 | 	add	local10, #4
03328     5C 7B 62 FC | 	wrlong	result1, local10
0332c                 | ' lparts(i).token=isfunction(lparts(i).part$)	: if lparts(i).token>0 then goto 102
0332c     54 B9 02 F6 | 	mov	local10, local02
03330     03 B8 66 F0 | 	shl	local10, #3
03334     32 AF 02 F6 | 	mov	local05, objptr
03338     36 00 00 FF 
0333c     B0 AF 06 F1 | 	add	local05, ##28080
03340     57 B9 02 F1 | 	add	local10, local05
03344     04 B8 06 F1 | 	add	local10, #4
03348     5C BD 02 FB | 	rdlong	local12, local10
0334c     01 BC 56 F2 | 	cmps	local12, #1 wc
03350     1C 05 90 3D |  if_ae	jmp	#LR__0184
03354     54 B9 02 F6 | 	mov	local10, local02
03358     03 B8 66 F0 | 	shl	local10, #3
0335c     36 00 00 FF 
03360     B0 65 06 F1 | 	add	objptr, ##28080
03364     32 B9 02 F1 | 	add	local10, objptr
03368     54 BB 02 F6 | 	mov	local11, local02
0336c     5D C1 02 F6 | 	mov	local14, local11
03370     03 C0 66 F0 | 	shl	local14, #3
03374     32 BF 02 F6 | 	mov	local13, objptr
03378     32 C1 02 F1 | 	add	local14, objptr
0337c     60 93 02 FB | 	rdlong	arg01, local14
03380     36 00 00 FF 
03384     B0 65 86 F1 | 	sub	objptr, ##28080
03388     08 15 B0 FD | 	call	#_isnotename
0338c     04 B8 06 F1 | 	add	local10, #4
03390     5C 7B 62 FC | 	wrlong	result1, local10
03394                 | ' lparts(i).token=isnotename(lparts(i).part$) 
03394                 | ' if lparts(i).token>0 then 
03394     54 B9 02 F6 | 	mov	local10, local02
03398     03 B8 66 F0 | 	shl	local10, #3
0339c     32 AF 02 F6 | 	mov	local05, objptr
033a0     36 00 00 FF 
033a4     B0 AF 06 F1 | 	add	local05, ##28080
033a8     57 B9 02 F1 | 	add	local10, local05
033ac     04 B8 06 F1 | 	add	local10, #4
033b0     5C B1 02 FB | 	rdlong	local06, local10
033b4     01 B0 56 F2 | 	cmps	local06, #1 wc
033b8     80 00 90 CD |  if_b	jmp	#LR__0174
033bc     54 AF 02 F6 | 	mov	local05, local02
033c0     03 AE 66 F0 | 	shl	local05, #3
033c4     32 B1 02 F6 | 	mov	local06, objptr
033c8     36 00 00 FF 
033cc     B0 B1 06 F1 | 	add	local06, ##28080
033d0     58 AF 02 F1 | 	add	local05, local06
033d4     04 AE 06 F1 | 	add	local05, #4
033d8     57 BD 02 FB | 	rdlong	local12, local05
033dc     5E 93 02 F6 | 	mov	arg01, local12
033e0     24 3E B0 FD | 	call	#_getnoteval
033e4     3D FB 02 F6 | 	mov	local43, result1
033e8     54 B9 02 F6 | 	mov	local10, local02
033ec     03 B8 66 F0 | 	shl	local10, #3
033f0     32 AF 02 F6 | 	mov	local05, objptr
033f4     36 00 00 FF 
033f8     B0 AF 06 F1 | 	add	local05, ##28080
033fc     57 B9 02 F1 | 	add	local10, local05
03400     7D 93 02 F6 | 	mov	arg01, local43
03404     70 30 B2 FD | 	call	#__system__str_S
03408     5C 7B 62 FC | 	wrlong	result1, local10
0340c     54 AD 02 F6 | 	mov	local04, local02
03410     56 AB 02 F6 | 	mov	local03, local04
03414     55 B9 02 F6 | 	mov	local10, local03
03418     03 B8 66 F0 | 	shl	local10, #3
0341c     32 AF 02 F6 | 	mov	local05, objptr
03420     36 00 00 FF 
03424     B0 AF 06 F1 | 	add	local05, ##28080
03428     57 B9 02 F1 | 	add	local10, local05
0342c     04 B8 06 F1 | 	add	local10, #4
03430     01 00 80 FF 
03434     5C 05 68 FC | 	wrlong	##514, local10
03438     34 04 90 FD | 	jmp	#LR__0184
0343c                 | LR__0174
0343c     54 B9 02 F6 | 	mov	local10, local02
03440     03 B8 66 F0 | 	shl	local10, #3
03444     36 00 00 FF 
03448     B0 65 06 F1 | 	add	objptr, ##28080
0344c     32 B9 02 F1 | 	add	local10, objptr
03450     54 C1 02 F6 | 	mov	local14, local02
03454     03 C0 66 F0 | 	shl	local14, #3
03458     32 C1 02 F1 | 	add	local14, objptr
0345c     60 93 02 FB | 	rdlong	arg01, local14
03460     36 00 00 FF 
03464     B0 65 86 F1 | 	sub	objptr, ##28080
03468     C0 12 B0 FD | 	call	#_ischannel
0346c     04 B8 06 F1 | 	add	local10, #4
03470     5C 7B 62 FC | 	wrlong	result1, local10
03474                 | ' 
03474                 | ' ' if it is #channel, make it a number from 0 to 9 while setting a token_channel
03474                 | ' 
03474                 | ' lparts(i).token=ischannel(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=right$(lparts(i).part$,1) : lparts(i).token=token_channel : goto 102
03474     54 B9 02 F6 | 	mov	local10, local02
03478     03 B8 66 F0 | 	shl	local10, #3
0347c     32 AF 02 F6 | 	mov	local05, objptr
03480     36 00 00 FF 
03484     B0 AF 06 F1 | 	add	local05, ##28080
03488     57 B9 02 F1 | 	add	local10, local05
0348c     04 B8 06 F1 | 	add	local10, #4
03490     5C B1 02 FB | 	rdlong	local06, local10
03494     01 B0 56 F2 | 	cmps	local06, #1 wc
03498     70 00 90 CD |  if_b	jmp	#LR__0175
0349c     54 B9 02 F6 | 	mov	local10, local02
034a0     03 B8 66 F0 | 	shl	local10, #3
034a4     36 00 00 FF 
034a8     B0 65 06 F1 | 	add	objptr, ##28080
034ac     32 B9 02 F1 | 	add	local10, objptr
034b0     54 BB 02 F6 | 	mov	local11, local02
034b4     5D C1 02 F6 | 	mov	local14, local11
034b8     03 C0 66 F0 | 	shl	local14, #3
034bc     32 BF 02 F6 | 	mov	local13, objptr
034c0     32 C1 02 F1 | 	add	local14, objptr
034c4     60 93 02 FB | 	rdlong	arg01, local14
034c8     01 BC 06 F6 | 	mov	local12, #1
034cc     01 94 06 F6 | 	mov	arg02, #1
034d0     36 00 00 FF 
034d4     B0 65 86 F1 | 	sub	objptr, ##28080
034d8     2C 2E B2 FD | 	call	#__system__Right_S
034dc     5C 7B 62 FC | 	wrlong	result1, local10
034e0     54 AD 02 F6 | 	mov	local04, local02
034e4     56 AB 02 F6 | 	mov	local03, local04
034e8     55 B9 02 F6 | 	mov	local10, local03
034ec     03 B8 66 F0 | 	shl	local10, #3
034f0     32 AF 02 F6 | 	mov	local05, objptr
034f4     36 00 00 FF 
034f8     B0 AF 06 F1 | 	add	local05, ##28080
034fc     57 B9 02 F1 | 	add	local10, local05
03500     04 B8 06 F1 | 	add	local10, #4
03504     5C 59 68 FC | 	wrlong	#44, local10
03508     64 03 90 FD | 	jmp	#LR__0184
0350c                 | LR__0175
0350c     54 B9 02 F6 | 	mov	local10, local02
03510     03 B8 66 F0 | 	shl	local10, #3
03514     36 00 00 FF 
03518     B0 65 06 F1 | 	add	objptr, ##28080
0351c     32 B9 02 F1 | 	add	local10, objptr
03520     54 BB 02 F6 | 	mov	local11, local02
03524     5D C1 02 F6 | 	mov	local14, local11
03528     03 C0 66 F0 | 	shl	local14, #3
0352c     32 BF 02 F6 | 	mov	local13, objptr
03530     32 C1 02 F1 | 	add	local14, objptr
03534     60 93 02 FB | 	rdlong	arg01, local14
03538     36 00 00 FF 
0353c     B0 65 86 F1 | 	sub	objptr, ##28080
03540     D0 12 B0 FD | 	call	#_isconstant
03544     04 B8 06 F1 | 	add	local10, #4
03548     5C 7B 62 FC | 	wrlong	result1, local10
0354c                 | ' lparts(i).token=isconstant(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=str$(lparts(i).token) : lparts(i).token=token_integer : goto 102
0354c     54 B9 02 F6 | 	mov	local10, local02
03550     03 B8 66 F0 | 	shl	local10, #3
03554     32 AF 02 F6 | 	mov	local05, objptr
03558     36 00 00 FF 
0355c     B0 AF 06 F1 | 	add	local05, ##28080
03560     57 B9 02 F1 | 	add	local10, local05
03564     04 B8 06 F1 | 	add	local10, #4
03568     5C B1 02 FB | 	rdlong	local06, local10
0356c     01 B0 56 F2 | 	cmps	local06, #1 wc
03570     90 00 90 CD |  if_b	jmp	#LR__0176
03574     54 B9 02 F6 | 	mov	local10, local02
03578     03 B8 66 F0 | 	shl	local10, #3
0357c     36 00 00 FF 
03580     B0 65 06 F1 | 	add	objptr, ##28080
03584     32 B9 02 F1 | 	add	local10, objptr
03588     54 BD 02 F6 | 	mov	local12, local02
0358c     5E BB 02 F6 | 	mov	local11, local12
03590     5D C1 02 F6 | 	mov	local14, local11
03594     03 C0 66 F0 | 	shl	local14, #3
03598     32 BF 02 F6 | 	mov	local13, objptr
0359c     32 C1 02 F1 | 	add	local14, objptr
035a0     04 C0 06 F1 | 	add	local14, #4
035a4     60 93 02 FB | 	rdlong	arg01, local14
035a8     04 C0 86 F1 | 	sub	local14, #4
035ac     36 00 00 FF 
035b0     B0 65 86 F1 | 	sub	objptr, ##28080
035b4     49 93 52 F6 | 	abs	arg01, arg01 wc
035b8     1F FC C6 C9 |  if_b	decod	local44, #31
035bc     00 FC 06 36 |  if_ae	mov	local44, #0
035c0     E0 36 B2 FD | 	call	#__system___float_fromuns
035c4     7E 7B 62 F5 | 	xor	result1, local44
035c8     3D 93 02 F6 | 	mov	arg01, result1
035cc     A8 2E B2 FD | 	call	#__system__str_S
035d0     5C 7B 62 FC | 	wrlong	result1, local10
035d4     54 AD 02 F6 | 	mov	local04, local02
035d8     56 AB 02 F6 | 	mov	local03, local04
035dc     55 B9 02 F6 | 	mov	local10, local03
035e0     03 B8 66 F0 | 	shl	local10, #3
035e4     32 AF 02 F6 | 	mov	local05, objptr
035e8     36 00 00 FF 
035ec     B0 AF 06 F1 | 	add	local05, ##28080
035f0     57 B9 02 F1 | 	add	local10, local05
035f4     04 B8 06 F1 | 	add	local10, #4
035f8     01 00 80 FF 
035fc     5C 03 68 FC | 	wrlong	##513, local10
03600     6C 02 90 FD | 	jmp	#LR__0184
03604                 | LR__0176
03604     54 B1 02 F6 | 	mov	local06, local02
03608     03 B0 66 F0 | 	shl	local06, #3
0360c     32 BD 02 F6 | 	mov	local12, objptr
03610     36 00 00 FF 
03614     B0 BD 06 F1 | 	add	local12, ##28080
03618     5E B1 02 F1 | 	add	local06, local12
0361c     58 93 02 FB | 	rdlong	arg01, local06
03620     30 34 B0 FD | 	call	#_isnum
03624     3D FF 02 F6 | 	mov	local45, result1
03628     07 FE 66 F7 | 	signx	local45, #7
0362c     54 B1 02 F6 | 	mov	local06, local02
03630     03 B0 66 F0 | 	shl	local06, #3
03634     32 BD 02 F6 | 	mov	local12, objptr
03638     36 00 00 FF 
0363c     B0 BD 06 F1 | 	add	local12, ##28080
03640     5E B1 02 F1 | 	add	local06, local12
03644     58 93 02 FB | 	rdlong	arg01, local06
03648     F4 37 B0 FD | 	call	#_isint
0364c     3D 01 03 F6 | 	mov	local46, result1
03650     07 00 67 F7 | 	signx	local46, #7
03654     54 B1 02 F6 | 	mov	local06, local02
03658     03 B0 66 F0 | 	shl	local06, #3
0365c     32 BD 02 F6 | 	mov	local12, objptr
03660     36 00 00 FF 
03664     B0 BD 06 F1 | 	add	local12, ##28080
03668     5E B1 02 F1 | 	add	local06, local12
0366c     58 93 02 FB | 	rdlong	arg01, local06
03670     70 3A B0 FD | 	call	#_isdec
03674     07 7A 66 F7 | 	signx	result1, #7
03678     3D 03 03 F6 | 	mov	local47, result1
0367c                 | ' 
0367c                 | ' b1=isnum(lparts(i).part$) : b2=isint(lparts(i).part$) : b3=isdec(lparts(i).part$)
0367c                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal 			: goto 102 	' pure decimal for line num
0367c     00 FE 0E F2 | 	cmp	local45, #0 wz
03680     00 00 0F 52 |  if_ne	cmp	local46, #0 wz
03684     00 02 0F 52 |  if_ne	cmp	local47, #0 wz
03688     30 00 90 AD |  if_e	jmp	#LR__0177
0368c     54 AD 02 F6 | 	mov	local04, local02
03690     56 AB 02 F6 | 	mov	local03, local04
03694     55 B9 02 F6 | 	mov	local10, local03
03698     03 B8 66 F0 | 	shl	local10, #3
0369c     32 AF 02 F6 | 	mov	local05, objptr
036a0     36 00 00 FF 
036a4     B0 AF 06 F1 | 	add	local05, ##28080
036a8     57 B9 02 F1 | 	add	local10, local05
036ac     04 B8 06 F1 | 	add	local10, #4
036b0     01 00 80 FF 
036b4     5C 01 68 FC | 	wrlong	##512, local10
036b8     B4 01 90 FD | 	jmp	#LR__0184
036bc                 | LR__0177
036bc                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer 		: goto 102 	' integer
036bc     00 FE 0E F2 | 	cmp	local45, #0 wz
036c0     00 00 0F 52 |  if_ne	cmp	local46, #0 wz
036c4     81 AD 22 56 |  if_ne	not	local04, local47
036c8     00 AC 0E 52 |  if_ne	cmp	local04, #0 wz
036cc     30 00 90 AD |  if_e	jmp	#LR__0178
036d0     54 AD 02 F6 | 	mov	local04, local02
036d4     56 AB 02 F6 | 	mov	local03, local04
036d8     55 B9 02 F6 | 	mov	local10, local03
036dc     03 B8 66 F0 | 	shl	local10, #3
036e0     32 AF 02 F6 | 	mov	local05, objptr
036e4     36 00 00 FF 
036e8     B0 AF 06 F1 | 	add	local05, ##28080
036ec     57 B9 02 F1 | 	add	local10, local05
036f0     04 B8 06 F1 | 	add	local10, #4
036f4     01 00 80 FF 
036f8     5C 03 68 FC | 	wrlong	##513, local10
036fc     70 01 90 FD | 	jmp	#LR__0184
03700                 | LR__0178
03700                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float 	: goto 102 	' float
03700     00 FE 0E F2 | 	cmp	local45, #0 wz
03704     80 AD 22 56 |  if_ne	not	local04, local46
03708     00 AC 0E 52 |  if_ne	cmp	local04, #0 wz
0370c     81 AB 22 56 |  if_ne	not	local03, local47
03710     00 AA 0E 52 |  if_ne	cmp	local03, #0 wz
03714     30 00 90 AD |  if_e	jmp	#LR__0179
03718     54 AD 02 F6 | 	mov	local04, local02
0371c     56 AB 02 F6 | 	mov	local03, local04
03720     55 B9 02 F6 | 	mov	local10, local03
03724     03 B8 66 F0 | 	shl	local10, #3
03728     32 AF 02 F6 | 	mov	local05, objptr
0372c     36 00 00 FF 
03730     B0 AF 06 F1 | 	add	local05, ##28080
03734     57 B9 02 F1 | 	add	local10, local05
03738     04 B8 06 F1 | 	add	local10, #4
0373c     01 00 80 FF 
03740     5C 05 68 FC | 	wrlong	##514, local10
03744     28 01 90 FD | 	jmp	#LR__0184
03748                 | LR__0179
03748                 | ' 
03748                 | ' if isstring(lparts(i).part$) then 
03748     54 AF 02 F6 | 	mov	local05, local02
0374c     03 AE 66 F0 | 	shl	local05, #3
03750     32 B1 02 F6 | 	mov	local06, objptr
03754     36 00 00 FF 
03758     B0 B1 06 F1 | 	add	local06, ##28080
0375c     58 AF 02 F1 | 	add	local05, local06
03760     57 93 02 FB | 	rdlong	arg01, local05
03764     3C 3A B0 FD | 	call	#_isstring
03768     00 7A 0E F2 | 	cmp	result1, #0 wz
0376c     A8 00 90 AD |  if_e	jmp	#LR__0182
03770     54 B9 02 F6 | 	mov	local10, local02
03774     03 B8 66 F0 | 	shl	local10, #3
03778     36 00 00 FF 
0377c     B0 65 06 F1 | 	add	objptr, ##28080
03780     32 B9 02 F1 | 	add	local10, objptr
03784     04 B8 06 F1 | 	add	local10, #4
03788     01 00 80 FF 
0378c     5C 07 68 FC | 	wrlong	##515, local10
03790     54 AD 02 F6 | 	mov	local04, local02
03794     56 AB 02 F6 | 	mov	local03, local04
03798     55 B9 02 F6 | 	mov	local10, local03
0379c     03 B8 66 F0 | 	shl	local10, #3
037a0     32 B9 02 F1 | 	add	local10, objptr
037a4     54 C1 02 F6 | 	mov	local14, local02
037a8     03 C0 66 F0 | 	shl	local14, #3
037ac     32 C1 02 F1 | 	add	local14, objptr
037b0     60 B1 02 FB | 	rdlong	local06, local14
037b4     02 BC 06 F6 | 	mov	local12, #2
037b8     54 D1 02 F6 | 	mov	local22, local02
037bc     68 D3 02 F6 | 	mov	local23, local22
037c0     03 D2 66 F0 | 	shl	local23, #3
037c4     32 D5 02 F6 | 	mov	local24, objptr
037c8     32 D3 02 F1 | 	add	local23, objptr
037cc     69 93 02 FB | 	rdlong	arg01, local23
037d0     36 00 00 FF 
037d4     B0 65 86 F1 | 	sub	objptr, ##28080
037d8     49 B3 02 F6 | 	mov	local07, arg01
037dc     D7 06 48 FB | 	callpa	#(@LR__0181-@LR__0180)>>2,fcache_load_ptr_
037e0                 | LR__0180
037e0     59 7B CA FA | 	rdbyte	result1, local07 wz
037e4     01 B2 06 51 |  if_ne	add	local07, #1
037e8     F4 FF 9F 5D |  if_ne	jmp	#LR__0180
037ec                 | LR__0181
037ec     49 B3 82 F1 | 	sub	local07, arg01
037f0     59 BF 02 F6 | 	mov	local13, local07
037f4     5F C1 02 F6 | 	mov	local14, local13
037f8     02 C0 86 F1 | 	sub	local14, #2
037fc     60 BB 02 F6 | 	mov	local11, local14
03800     58 93 02 F6 | 	mov	arg01, local06
03804     5E 95 02 F6 | 	mov	arg02, local12
03808     5D 97 02 F6 | 	mov	arg03, local11
0380c     88 2B B2 FD | 	call	#__system__Mid_S
03810     5C 7B 62 FC | 	wrlong	result1, local10
03814     58 00 90 FD | 	jmp	#LR__0184
03818                 | LR__0182
03818                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
03818     54 AB 02 F6 | 	mov	local03, local02
0381c     55 AF 02 F6 | 	mov	local05, local03
03820     03 AE 66 F0 | 	shl	local05, #3
03824     32 B1 02 F6 | 	mov	local06, objptr
03828     36 00 00 FF 
0382c     B0 B1 06 F1 | 	add	local06, ##28080
03830     58 AF 02 F1 | 	add	local05, local06
03834     57 93 02 FB | 	rdlong	arg01, local05
03838     A4 2F B0 FD | 	call	#_isname
0383c     3D AD 0A F6 | 	mov	local04, result1 wz
03840     2C 00 90 AD |  if_e	jmp	#LR__0183
03844     54 AD 02 F6 | 	mov	local04, local02
03848     56 AB 02 F6 | 	mov	local03, local04
0384c     55 B9 02 F6 | 	mov	local10, local03
03850     03 B8 66 F0 | 	shl	local10, #3
03854     32 AF 02 F6 | 	mov	local05, objptr
03858     36 00 00 FF 
0385c     B0 AF 06 F1 | 	add	local05, ##28080
03860     57 B9 02 F1 | 	add	local10, local05
03864     04 B8 06 F1 | 	add	local10, #4
03868     01 00 80 FF 
0386c     5C 09 68 FC | 	wrlong	##516, local10
03870                 | LR__0183
03870                 | LR__0184
03870     01 A8 06 F1 | 	add	local02, #1
03874     A0 F8 9F FD | 	jmp	#LR__0173
03878                 | LR__0185
03878     63 B9 02 F6 | 	mov	local10, local17
0387c     03 B8 66 F0 | 	shl	local10, #3
03880     36 00 00 FF 
03884     B0 65 06 F1 | 	add	objptr, ##28080
03888     32 B9 02 F1 | 	add	local10, objptr
0388c     04 B8 06 F1 | 	add	local10, #4
03890     5C FD 6B FC | 	wrlong	#510, local10
03894     63 B9 02 F6 | 	mov	local10, local17
03898     03 B8 66 F0 | 	shl	local10, #3
0389c     32 B9 02 F1 | 	add	local10, objptr
038a0     92 01 00 FF 
038a4     EB B1 06 F6 | 	mov	local06, ##@LR__5549
038a8     5C B1 62 FC | 	wrlong	local06, local10
038ac     10 00 00 FF 
038b0     54 64 06 F1 | 	add	objptr, ##8276
038b4     32 C7 62 FC | 	wrlong	local17, objptr
038b8     47 00 00 FF 
038bc     04 64 86 F1 | 	sub	objptr, ##36356
038c0                 | ' 
038c0                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
038c0                 | ' 
038c0                 | ' ' process the case when simple load or save is called without "". This cannot be done earlier, as tokens has to be known                                    					 
038c0                 | '  
038c0                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br." orelse lp$="enter" orelse lp$="e.") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
038c0     92 01 00 FF 
038c4     EC 95 06 F6 | 	mov	arg02, ##@LR__5550
038c8     7B 93 02 F6 | 	mov	arg01, local41
038cc     30 11 B2 FD | 	call	#__system___string_cmp
038d0     00 7A 0E F2 | 	cmp	result1, #0 wz
038d4     F0 00 90 AD |  if_e	jmp	#LR__0186
038d8     92 01 00 FF 
038dc     F1 95 06 F6 | 	mov	arg02, ##@LR__5551
038e0     7B 93 02 F6 | 	mov	arg01, local41
038e4     18 11 B2 FD | 	call	#__system___string_cmp
038e8     00 7A 0E F2 | 	cmp	result1, #0 wz
038ec     D8 00 90 AD |  if_e	jmp	#LR__0186
038f0     92 01 00 FF 
038f4     F6 B1 06 F6 | 	mov	local06, ##@LR__5552
038f8     7B 93 02 F6 | 	mov	arg01, local41
038fc     58 95 02 F6 | 	mov	arg02, local06
03900     FC 10 B2 FD | 	call	#__system___string_cmp
03904     00 7A 0E F2 | 	cmp	result1, #0 wz
03908     BC 00 90 AD |  if_e	jmp	#LR__0186
0390c     92 01 00 FF 
03910     FB BD 06 F6 | 	mov	local12, ##@LR__5553
03914     5E B1 02 F6 | 	mov	local06, local12
03918     7B 93 02 F6 | 	mov	arg01, local41
0391c     58 95 02 F6 | 	mov	arg02, local06
03920     DC 10 B2 FD | 	call	#__system___string_cmp
03924     00 7A 0E F2 | 	cmp	result1, #0 wz
03928     9C 00 90 AD |  if_e	jmp	#LR__0186
0392c     92 01 00 FF 
03930     FF BB 06 F6 | 	mov	local11, ##@LR__5554
03934     5D BD 02 F6 | 	mov	local12, local11
03938     7B 93 02 F6 | 	mov	arg01, local41
0393c     5E 95 02 F6 | 	mov	arg02, local12
03940     BC 10 B2 FD | 	call	#__system___string_cmp
03944     3D B1 0A F6 | 	mov	local06, result1 wz
03948     7C 00 90 AD |  if_e	jmp	#LR__0186
0394c     93 01 00 FF 
03950     03 C0 06 F6 | 	mov	local14, ##@LR__5555
03954     60 BB 02 F6 | 	mov	local11, local14
03958     7B 93 02 F6 | 	mov	arg01, local41
0395c     5D 95 02 F6 | 	mov	arg02, local11
03960     9C 10 B2 FD | 	call	#__system___string_cmp
03964     3D BD 0A F6 | 	mov	local12, result1 wz
03968     5C 00 90 AD |  if_e	jmp	#LR__0186
0396c     93 01 00 FF 
03970     06 BE 06 F6 | 	mov	local13, ##@LR__5556
03974     5F C1 02 F6 | 	mov	local14, local13
03978     7B 93 02 F6 | 	mov	arg01, local41
0397c     60 95 02 F6 | 	mov	arg02, local14
03980     7C 10 B2 FD | 	call	#__system___string_cmp
03984     3D BB 0A F6 | 	mov	local11, result1 wz
03988     3C 00 90 AD |  if_e	jmp	#LR__0186
0398c     93 01 00 FF 
03990     0A BE 06 F6 | 	mov	local13, ##@LR__5557
03994     7B 93 02 F6 | 	mov	arg01, local41
03998     5F 95 02 F6 | 	mov	arg02, local13
0399c     60 10 B2 FD | 	call	#__system___string_cmp
039a0     3D C1 0A F6 | 	mov	local14, result1 wz
039a4     20 00 90 AD |  if_e	jmp	#LR__0186
039a8     93 01 00 FF 
039ac     10 D0 06 F6 | 	mov	local22, ##@LR__5558
039b0     68 DD 02 F6 | 	mov	local28, local22
039b4     7B 93 02 F6 | 	mov	arg01, local41
039b8     6E 95 02 F6 | 	mov	arg02, local28
039bc     40 10 B2 FD | 	call	#__system___string_cmp
039c0     3D BF 0A F6 | 	mov	local13, result1 wz
039c4     B8 00 90 5D |  if_ne	jmp	#LR__0187
039c8                 | LR__0186
039c8     77 DD 02 F6 | 	mov	local28, local37
039cc     01 DC 06 F1 | 	add	local28, #1
039d0     6E D1 02 F6 | 	mov	local22, local28
039d4     68 D3 02 F6 | 	mov	local23, local22
039d8     03 D2 66 F0 | 	shl	local23, #3
039dc     32 D5 02 F6 | 	mov	local24, objptr
039e0     36 00 00 FF 
039e4     B0 D5 06 F1 | 	add	local24, ##28080
039e8     6A D3 02 F1 | 	add	local23, local24
039ec     04 D2 06 F1 | 	add	local23, #4
039f0     69 E1 02 FB | 	rdlong	local30, local23
039f4     04 D2 86 F1 | 	sub	local23, #4
039f8     70 DF 02 F6 | 	mov	local29, local30
039fc     01 00 00 FF 
03a00     04 DE 0E F2 | 	cmp	local29, ##516 wz
03a04     78 00 90 5D |  if_ne	jmp	#LR__0187
03a08     77 05 03 F6 | 	mov	local48, local37
03a0c     01 04 07 F1 | 	add	local48, #1
03a10     03 04 67 F0 | 	shl	local48, #3
03a14     32 07 03 F6 | 	mov	local49, objptr
03a18     36 00 00 FF 
03a1c     B0 07 07 F1 | 	add	local49, ##28080
03a20     83 05 03 F1 | 	add	local48, local49
03a24     82 93 02 FB | 	rdlong	arg01, local48
03a28     01 94 06 F6 | 	mov	arg02, #1
03a2c     D8 28 B2 FD | 	call	#__system__Right_S
03a30     3D 93 02 F6 | 	mov	arg01, result1
03a34     93 01 00 FF 
03a38     13 08 07 F6 | 	mov	local50, ##@LR__5559
03a3c     84 0B 03 F6 | 	mov	local51, local50
03a40     85 95 02 F6 | 	mov	arg02, local51
03a44     B8 0F B2 FD | 	call	#__system___string_cmp
03a48     3D E3 0A F6 | 	mov	local31, result1 wz
03a4c     30 00 90 AD |  if_e	jmp	#LR__0187
03a50     77 B9 02 F6 | 	mov	local10, local37
03a54     01 B8 06 F1 | 	add	local10, #1
03a58     03 B8 66 F0 | 	shl	local10, #3
03a5c     32 AF 02 F6 | 	mov	local05, objptr
03a60     36 00 00 FF 
03a64     B0 AF 06 F1 | 	add	local05, ##28080
03a68     57 B9 02 F1 | 	add	local10, local05
03a6c     01 00 00 FF 
03a70     03 B0 06 F6 | 	mov	local06, ##515
03a74     04 B8 06 F1 | 	add	local10, #4
03a78     01 00 80 FF 
03a7c     5C 07 68 FC | 	wrlong	##515, local10
03a80                 | LR__0187
03a80                 | ' if (lp$="delete" orelse lp$="mkdir") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
03a80     93 01 00 FF 
03a84     15 94 06 F6 | 	mov	arg02, ##@LR__5560
03a88     7B 93 02 F6 | 	mov	arg01, local41
03a8c     70 0F B2 FD | 	call	#__system___string_cmp
03a90     00 7A 0E F2 | 	cmp	result1, #0 wz
03a94     1C 00 90 AD |  if_e	jmp	#LR__0188
03a98     93 01 00 FF 
03a9c     1C AE 06 F6 | 	mov	local05, ##@LR__5561
03aa0     7B 93 02 F6 | 	mov	arg01, local41
03aa4     57 95 02 F6 | 	mov	arg02, local05
03aa8     54 0F B2 FD | 	call	#__system___string_cmp
03aac     00 7A 0E F2 | 	cmp	result1, #0 wz
03ab0     B4 00 90 5D |  if_ne	jmp	#LR__0189
03ab4                 | LR__0188
03ab4     77 AF 02 F6 | 	mov	local05, local37
03ab8     01 AE 06 F1 | 	add	local05, #1
03abc     57 B1 02 F6 | 	mov	local06, local05
03ac0     03 B0 66 F0 | 	shl	local06, #3
03ac4     32 BD 02 F6 | 	mov	local12, objptr
03ac8     36 00 00 FF 
03acc     B0 BD 06 F1 | 	add	local12, ##28080
03ad0     5E B1 02 F1 | 	add	local06, local12
03ad4     04 B0 06 F1 | 	add	local06, #4
03ad8     58 C1 02 FB | 	rdlong	local14, local06
03adc     04 B0 86 F1 | 	sub	local06, #4
03ae0     60 BB 02 F6 | 	mov	local11, local14
03ae4     01 00 00 FF 
03ae8     04 BA 0E F2 | 	cmp	local11, ##516 wz
03aec     78 00 90 5D |  if_ne	jmp	#LR__0189
03af0     77 D3 02 F6 | 	mov	local23, local37
03af4     01 D2 06 F1 | 	add	local23, #1
03af8     03 D2 66 F0 | 	shl	local23, #3
03afc     32 D5 02 F6 | 	mov	local24, objptr
03b00     36 00 00 FF 
03b04     B0 D5 06 F1 | 	add	local24, ##28080
03b08     6A D3 02 F1 | 	add	local23, local24
03b0c     69 93 02 FB | 	rdlong	arg01, local23
03b10     01 94 06 F6 | 	mov	arg02, #1
03b14     F0 27 B2 FD | 	call	#__system__Right_S
03b18     3D 93 02 F6 | 	mov	arg01, result1
03b1c     93 01 00 FF 
03b20     22 D0 06 F6 | 	mov	local22, ##@LR__5562
03b24     68 DD 02 F6 | 	mov	local28, local22
03b28     6E 95 02 F6 | 	mov	arg02, local28
03b2c     D0 0E B2 FD | 	call	#__system___string_cmp
03b30     3D BF 0A F6 | 	mov	local13, result1 wz
03b34     30 00 90 AD |  if_e	jmp	#LR__0189
03b38     77 B9 02 F6 | 	mov	local10, local37
03b3c     01 B8 06 F1 | 	add	local10, #1
03b40     03 B8 66 F0 | 	shl	local10, #3
03b44     32 AF 02 F6 | 	mov	local05, objptr
03b48     36 00 00 FF 
03b4c     B0 AF 06 F1 | 	add	local05, ##28080
03b50     57 B9 02 F1 | 	add	local10, local05
03b54     01 00 00 FF 
03b58     03 B0 06 F6 | 	mov	local06, ##515
03b5c     04 B8 06 F1 | 	add	local10, #4
03b60     01 00 80 FF 
03b64     5C 07 68 FC | 	wrlong	##515, local10
03b68                 | LR__0189
03b68                 | ' if (lp$="copy") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
03b68     93 01 00 FF 
03b6c     24 94 06 F6 | 	mov	arg02, ##@LR__5563
03b70     7B 93 02 F6 | 	mov	arg01, local41
03b74     88 0E B2 FD | 	call	#__system___string_cmp
03b78     00 7A 0E F2 | 	cmp	result1, #0 wz
03b7c     B0 00 90 5D |  if_ne	jmp	#LR__0190
03b80     77 AF 02 F6 | 	mov	local05, local37
03b84     01 AE 06 F1 | 	add	local05, #1
03b88     03 AE 66 F0 | 	shl	local05, #3
03b8c     32 B1 02 F6 | 	mov	local06, objptr
03b90     36 00 00 FF 
03b94     B0 B1 06 F1 | 	add	local06, ##28080
03b98     58 AF 02 F1 | 	add	local05, local06
03b9c     04 AE 06 F1 | 	add	local05, #4
03ba0     57 BB 02 FB | 	rdlong	local11, local05
03ba4     04 AE 86 F1 | 	sub	local05, #4
03ba8     5D BD 02 F6 | 	mov	local12, local11
03bac     01 00 00 FF 
03bb0     04 BC 0E F2 | 	cmp	local12, ##516 wz
03bb4     78 00 90 5D |  if_ne	jmp	#LR__0190
03bb8     77 D1 02 F6 | 	mov	local22, local37
03bbc     01 D0 06 F1 | 	add	local22, #1
03bc0     03 D0 66 F0 | 	shl	local22, #3
03bc4     32 D3 02 F6 | 	mov	local23, objptr
03bc8     36 00 00 FF 
03bcc     B0 D3 06 F1 | 	add	local23, ##28080
03bd0     69 D1 02 F1 | 	add	local22, local23
03bd4     68 93 02 FB | 	rdlong	arg01, local22
03bd8     01 94 06 F6 | 	mov	arg02, #1
03bdc     28 27 B2 FD | 	call	#__system__Right_S
03be0     3D 93 02 F6 | 	mov	arg01, result1
03be4     93 01 00 FF 
03be8     29 DC 06 F6 | 	mov	local28, ##@LR__5564
03bec     6E BF 02 F6 | 	mov	local13, local28
03bf0     5F 95 02 F6 | 	mov	arg02, local13
03bf4     08 0E B2 FD | 	call	#__system___string_cmp
03bf8     3D C1 0A F6 | 	mov	local14, result1 wz
03bfc     30 00 90 AD |  if_e	jmp	#LR__0190
03c00     77 B9 02 F6 | 	mov	local10, local37
03c04     01 B8 06 F1 | 	add	local10, #1
03c08     03 B8 66 F0 | 	shl	local10, #3
03c0c     32 AF 02 F6 | 	mov	local05, objptr
03c10     36 00 00 FF 
03c14     B0 AF 06 F1 | 	add	local05, ##28080
03c18     57 B9 02 F1 | 	add	local10, local05
03c1c     01 00 00 FF 
03c20     03 B0 06 F6 | 	mov	local06, ##515
03c24     04 B8 06 F1 | 	add	local10, #4
03c28     01 00 80 FF 
03c2c     5C 07 68 FC | 	wrlong	##515, local10
03c30                 | LR__0190
03c30                 | ' if (lp$="copy") andalso lparts(addptr+3).token=token_name andalso right$(lparts(addptr+3).part$,1)<>"$" then lparts(addptr+3).token=token_string
03c30     93 01 00 FF 
03c34     2B 94 06 F6 | 	mov	arg02, ##@LR__5565
03c38     7B 93 02 F6 | 	mov	arg01, local41
03c3c     C0 0D B2 FD | 	call	#__system___string_cmp
03c40     00 7A 0E F2 | 	cmp	result1, #0 wz
03c44     B0 00 90 5D |  if_ne	jmp	#LR__0191
03c48     77 AF 02 F6 | 	mov	local05, local37
03c4c     03 AE 06 F1 | 	add	local05, #3
03c50     03 AE 66 F0 | 	shl	local05, #3
03c54     32 B1 02 F6 | 	mov	local06, objptr
03c58     36 00 00 FF 
03c5c     B0 B1 06 F1 | 	add	local06, ##28080
03c60     58 AF 02 F1 | 	add	local05, local06
03c64     04 AE 06 F1 | 	add	local05, #4
03c68     57 BB 02 FB | 	rdlong	local11, local05
03c6c     04 AE 86 F1 | 	sub	local05, #4
03c70     5D BD 02 F6 | 	mov	local12, local11
03c74     01 00 00 FF 
03c78     04 BC 0E F2 | 	cmp	local12, ##516 wz
03c7c     78 00 90 5D |  if_ne	jmp	#LR__0191
03c80     77 D1 02 F6 | 	mov	local22, local37
03c84     03 D0 06 F1 | 	add	local22, #3
03c88     03 D0 66 F0 | 	shl	local22, #3
03c8c     32 D3 02 F6 | 	mov	local23, objptr
03c90     36 00 00 FF 
03c94     B0 D3 06 F1 | 	add	local23, ##28080
03c98     69 D1 02 F1 | 	add	local22, local23
03c9c     68 93 02 FB | 	rdlong	arg01, local22
03ca0     01 94 06 F6 | 	mov	arg02, #1
03ca4     60 26 B2 FD | 	call	#__system__Right_S
03ca8     3D 93 02 F6 | 	mov	arg01, result1
03cac     93 01 00 FF 
03cb0     30 DC 06 F6 | 	mov	local28, ##@LR__5566
03cb4     6E BF 02 F6 | 	mov	local13, local28
03cb8     5F 95 02 F6 | 	mov	arg02, local13
03cbc     40 0D B2 FD | 	call	#__system___string_cmp
03cc0     3D C1 0A F6 | 	mov	local14, result1 wz
03cc4     30 00 90 AD |  if_e	jmp	#LR__0191
03cc8     77 B9 02 F6 | 	mov	local10, local37
03ccc     03 B8 06 F1 | 	add	local10, #3
03cd0     03 B8 66 F0 | 	shl	local10, #3
03cd4     32 AF 02 F6 | 	mov	local05, objptr
03cd8     36 00 00 FF 
03cdc     B0 AF 06 F1 | 	add	local05, ##28080
03ce0     57 B9 02 F1 | 	add	local10, local05
03ce4     01 00 00 FF 
03ce8     03 B0 06 F6 | 	mov	local06, ##515
03cec     04 B8 06 F1 | 	add	local10, #4
03cf0     01 00 80 FF 
03cf4     5C 07 68 FC | 	wrlong	##515, local10
03cf8                 | LR__0191
03cf8                 | ' 
03cf8                 | ' ' cd needs special treatment..
03cf8                 | ' 
03cf8                 | ' if lp$="cd" then lparts(addptr+1).token=token_string
03cf8     93 01 00 FF 
03cfc     32 94 06 F6 | 	mov	arg02, ##@LR__5567
03d00     7B 93 02 F6 | 	mov	arg01, local41
03d04     F8 0C B2 FD | 	call	#__system___string_cmp
03d08     00 7A 0E F2 | 	cmp	result1, #0 wz
03d0c     30 00 90 5D |  if_ne	jmp	#LR__0192
03d10     77 B9 02 F6 | 	mov	local10, local37
03d14     01 B8 06 F1 | 	add	local10, #1
03d18     03 B8 66 F0 | 	shl	local10, #3
03d1c     32 AF 02 F6 | 	mov	local05, objptr
03d20     36 00 00 FF 
03d24     B0 AF 06 F1 | 	add	local05, ##28080
03d28     57 B9 02 F1 | 	add	local10, local05
03d2c     01 00 00 FF 
03d30     03 B0 06 F6 | 	mov	local06, ##515
03d34     04 B8 06 F1 | 	add	local10, #4
03d38     01 00 80 FF 
03d3c     5C 07 68 FC | 	wrlong	##515, local10
03d40                 | LR__0192
03d40                 | ' if lp$="cd." andalso lparts(addptr+1).part$="." then lparts(addptr+1).token=token_string : lparts(addptr+1).part$=".." : lparts(addptr).token=token_cd
03d40     93 01 00 FF 
03d44     35 94 06 F6 | 	mov	arg02, ##@LR__5568
03d48     7B 93 02 F6 | 	mov	arg01, local41
03d4c     B0 0C B2 FD | 	call	#__system___string_cmp
03d50     00 7A 0E F2 | 	cmp	result1, #0 wz
03d54     9C 00 90 5D |  if_ne	jmp	#LR__0193
03d58     77 B1 02 F6 | 	mov	local06, local37
03d5c     01 B0 06 F1 | 	add	local06, #1
03d60     03 B0 66 F0 | 	shl	local06, #3
03d64     32 BD 02 F6 | 	mov	local12, objptr
03d68     36 00 00 FF 
03d6c     B0 BD 06 F1 | 	add	local12, ##28080
03d70     5E B1 02 F1 | 	add	local06, local12
03d74     58 93 02 FB | 	rdlong	arg01, local06
03d78     93 01 00 FF 
03d7c     39 AE 06 F6 | 	mov	local05, ##@LR__5569
03d80     57 95 02 F6 | 	mov	arg02, local05
03d84     78 0C B2 FD | 	call	#__system___string_cmp
03d88     00 7A 0E F2 | 	cmp	result1, #0 wz
03d8c     64 00 90 5D |  if_ne	jmp	#LR__0193
03d90     77 B9 02 F6 | 	mov	local10, local37
03d94     01 B8 06 F1 | 	add	local10, #1
03d98     03 B8 66 F0 | 	shl	local10, #3
03d9c     36 00 00 FF 
03da0     B0 65 06 F1 | 	add	objptr, ##28080
03da4     32 B9 02 F1 | 	add	local10, objptr
03da8     04 B8 06 F1 | 	add	local10, #4
03dac     01 00 80 FF 
03db0     5C 07 68 FC | 	wrlong	##515, local10
03db4     77 B9 02 F6 | 	mov	local10, local37
03db8     01 B8 06 F1 | 	add	local10, #1
03dbc     03 B8 66 F0 | 	shl	local10, #3
03dc0     32 B9 02 F1 | 	add	local10, objptr
03dc4     93 01 00 FF 
03dc8     3B B0 06 F6 | 	mov	local06, ##@LR__5570
03dcc     5C B1 62 FC | 	wrlong	local06, local10
03dd0     77 B9 02 F6 | 	mov	local10, local37
03dd4     03 B8 66 F0 | 	shl	local10, #3
03dd8     32 AF 02 F6 | 	mov	local05, objptr
03ddc     32 B9 02 F1 | 	add	local10, objptr
03de0     C3 B0 06 F6 | 	mov	local06, #195
03de4     04 B8 06 F1 | 	add	local10, #4
03de8     5C 87 69 FC | 	wrlong	#195, local10
03dec     36 00 00 FF 
03df0     B0 65 86 F1 | 	sub	objptr, ##28080
03df4                 | LR__0193
03df4                 | ' if lp$="cd" andalso lparts(addptr+1).part$="/" then lparts(addptr+1).token=token_string : for i=(addptr+2) to k: lparts(addptr+1).part$+=lparts(i).part$ : next i
03df4     93 01 00 FF 
03df8     3E B8 06 F6 | 	mov	local10, ##@LR__5571
03dfc     7B 93 02 F6 | 	mov	arg01, local41
03e00     5C 95 02 F6 | 	mov	arg02, local10
03e04     F8 0B B2 FD | 	call	#__system___string_cmp
03e08     00 7A 0E F2 | 	cmp	result1, #0 wz
03e0c     F4 00 90 5D |  if_ne	jmp	#LR__0196
03e10     77 B1 02 F6 | 	mov	local06, local37
03e14     01 B0 06 F1 | 	add	local06, #1
03e18     03 B0 66 F0 | 	shl	local06, #3
03e1c     32 BD 02 F6 | 	mov	local12, objptr
03e20     36 00 00 FF 
03e24     B0 BD 06 F1 | 	add	local12, ##28080
03e28     5E B1 02 F1 | 	add	local06, local12
03e2c     58 93 02 FB | 	rdlong	arg01, local06
03e30     93 01 00 FF 
03e34     41 AE 06 F6 | 	mov	local05, ##@LR__5572
03e38     57 B9 02 F6 | 	mov	local10, local05
03e3c     5C 95 02 F6 | 	mov	arg02, local10
03e40     BC 0B B2 FD | 	call	#__system___string_cmp
03e44     00 7A 0E F2 | 	cmp	result1, #0 wz
03e48     B8 00 90 5D |  if_ne	jmp	#LR__0196
03e4c     77 B9 02 F6 | 	mov	local10, local37
03e50     01 B8 06 F1 | 	add	local10, #1
03e54     03 B8 66 F0 | 	shl	local10, #3
03e58     32 AF 02 F6 | 	mov	local05, objptr
03e5c     36 00 00 FF 
03e60     B0 AF 06 F1 | 	add	local05, ##28080
03e64     57 B9 02 F1 | 	add	local10, local05
03e68     01 00 00 FF 
03e6c     03 B0 06 F6 | 	mov	local06, ##515
03e70     04 B8 06 F1 | 	add	local10, #4
03e74     01 00 80 FF 
03e78     5C 07 68 FC | 	wrlong	##515, local10
03e7c     04 B8 86 F1 | 	sub	local10, #4
03e80     77 A9 02 F6 | 	mov	local02, local37
03e84     02 A8 06 F1 | 	add	local02, #2
03e88     63 0D 03 F6 | 	mov	local52, local17
03e8c     01 0C 07 F1 | 	add	local52, #1
03e90                 | LR__0194
03e90     86 A9 52 F2 | 	cmps	local02, local52 wc
03e94     6C 00 90 3D |  if_ae	jmp	#LR__0195
03e98     77 B9 02 F6 | 	mov	local10, local37
03e9c     01 B8 06 F1 | 	add	local10, #1
03ea0     03 B8 66 F0 | 	shl	local10, #3
03ea4     36 00 00 FF 
03ea8     B0 65 06 F1 | 	add	objptr, ##28080
03eac     32 AF 02 F6 | 	mov	local05, objptr
03eb0     32 B9 02 F1 | 	add	local10, objptr
03eb4     77 C1 02 F6 | 	mov	local14, local37
03eb8     01 C0 06 F1 | 	add	local14, #1
03ebc     03 C0 66 F0 | 	shl	local14, #3
03ec0     32 C1 02 F1 | 	add	local14, objptr
03ec4     60 93 02 FB | 	rdlong	arg01, local14
03ec8     54 BB 02 F6 | 	mov	local11, local02
03ecc     5D C1 02 F6 | 	mov	local14, local11
03ed0     60 BF 02 F6 | 	mov	local13, local14
03ed4     03 BE 66 F0 | 	shl	local13, #3
03ed8     32 DD 02 F6 | 	mov	local28, objptr
03edc     32 BF 02 F1 | 	add	local13, objptr
03ee0     5F BD 02 FB | 	rdlong	local12, local13
03ee4     5E 95 02 F6 | 	mov	arg02, local12
03ee8     36 00 00 FF 
03eec     B0 65 86 F1 | 	sub	objptr, ##28080
03ef0     40 0B B2 FD | 	call	#__system___string_concat
03ef4     3D B1 02 F6 | 	mov	local06, result1
03ef8     5C B1 62 FC | 	wrlong	local06, local10
03efc     01 A8 06 F1 | 	add	local02, #1
03f00     8C FF 9F FD | 	jmp	#LR__0194
03f04                 | LR__0195
03f04                 | LR__0196
03f04                 | ' 
03f04                 | ' ' determine a type of the line and compile it
03f04                 | ' 
03f04                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
03f04     36 00 00 FF 
03f08     B0 65 06 F1 | 	add	objptr, ##28080
03f0c     32 93 02 FB | 	rdlong	arg01, objptr
03f10     36 00 00 FF 
03f14     B0 65 86 F1 | 	sub	objptr, ##28080
03f18     C8 31 B0 FD | 	call	#_isdec
03f1c     00 7A 0E F2 | 	cmp	result1, #0 wz
03f20     30 00 90 AD |  if_e	jmp	#LR__0197
03f24     36 00 00 FF 
03f28     B0 65 06 F1 | 	add	objptr, ##28080
03f2c     32 93 02 FB | 	rdlong	arg01, objptr
03f30     36 00 00 FF 
03f34     B0 65 86 F1 | 	sub	objptr, ##28080
03f38     00 94 06 F6 | 	mov	arg02, #0
03f3c     EC 37 B2 FD | 	call	#__system____builtin_atoi
03f40     54 00 00 FF 
03f44     8C 64 06 F1 | 	add	objptr, ##43148
03f48     32 7B 62 FC | 	wrlong	result1, objptr
03f4c     54 00 00 FF 
03f50     8C 64 86 F1 | 	sub	objptr, ##43148
03f54                 | LR__0197
03f54                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104   ' this was an empty numbered line, delete it
03f54     54 00 00 FF 
03f58     8C 64 06 F1 | 	add	objptr, ##43148
03f5c     32 AD 02 FB | 	rdlong	local04, objptr
03f60     54 00 00 FF 
03f64     8C 64 86 F1 | 	sub	objptr, ##43148
03f68     01 AC 16 F2 | 	cmp	local04, #1 wc
03f6c     40 00 90 CD |  if_b	jmp	#LR__0198
03f70     01 C6 0E F2 | 	cmp	local17, #1 wz
03f74     38 00 00 AF 
03f78     C8 65 06 A1 |  if_e	add	objptr, ##29128
03f7c     32 AF 02 AB |  if_e	rdlong	local05, objptr
03f80     38 00 00 AF 
03f84     C8 65 86 A1 |  if_e	sub	objptr, ##29128
03f88     57 B9 02 A6 |  if_e	mov	local10, local05
03f8c     03 B8 0E A2 |  if_e	cmp	local10, #3 wz
03f90     1C 00 90 5D |  if_ne	jmp	#LR__0198
03f94     54 00 00 FF 
03f98     8C 64 06 F1 | 	add	objptr, ##43148
03f9c     32 93 02 FB | 	rdlong	arg01, objptr
03fa0     54 00 00 FF 
03fa4     8C 64 86 F1 | 	sub	objptr, ##43148
03fa8     E0 32 B0 FD | 	call	#_deleteline
03fac     C8 03 90 FD | 	jmp	#LR__0209
03fb0                 | LR__0198
03fb0                 | ' 
03fb0                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  		' first part, commans
03fb0     38 00 00 FF 
03fb4     C8 65 06 F1 | 	add	objptr, ##29128
03fb8     32 AD 0A FB | 	rdlong	local04, objptr wz
03fbc     38 00 00 FF 
03fc0     C8 65 86 F1 | 	sub	objptr, ##29128
03fc4     20 00 90 AD |  if_e	jmp	#LR__0199
03fc8     38 00 00 FF 
03fcc     C8 65 06 F1 | 	add	objptr, ##29128
03fd0     32 AF 02 FB | 	rdlong	local05, objptr
03fd4     38 00 00 FF 
03fd8     C8 65 86 F1 | 	sub	objptr, ##29128
03fdc     57 B9 02 F6 | 	mov	local10, local05
03fe0     03 B8 0E F2 | 	cmp	local10, #3 wz
03fe4     C0 00 90 5D |  if_ne	jmp	#LR__0201
03fe8                 | LR__0199
03fe8     36 00 00 FF 
03fec     C4 65 06 F1 | 	add	objptr, ##28100
03ff0     32 BD 02 FB | 	rdlong	local12, objptr
03ff4     36 00 00 FF 
03ff8     C4 65 86 F1 | 	sub	objptr, ##28100
03ffc     1B BC 0E F2 | 	cmp	local12, #27 wz
04000     A4 00 90 AD |  if_e	jmp	#LR__0201
04004     54 00 00 FF 
04008     8C 64 06 F1 | 	add	objptr, ##43148
0400c     32 93 02 FB | 	rdlong	arg01, objptr
04010     1B 00 00 FF 
04014     C4 64 86 F1 | 	sub	objptr, ##14020
04018     32 97 02 FB | 	rdlong	arg03, objptr
0401c     38 00 00 FF 
04020     C8 65 86 F1 | 	sub	objptr, ##29128
04024     00 94 06 F6 | 	mov	arg02, #0
04028     38 46 B0 FD | 	call	#_compile
0402c     3D A7 0A F6 | 	mov	local01, result1 wz
04030                 | '   err=compile(linenum,0,cont) 
04030                 | '   if err<>0 then printerror(err,linenum): goto 101
04030     20 00 90 AD |  if_e	jmp	#LR__0200
04034     54 00 00 FF 
04038     8C 64 06 F1 | 	add	objptr, ##43148
0403c     32 95 02 FB | 	rdlong	arg02, objptr
04040     54 00 00 FF 
04044     8C 64 86 F1 | 	sub	objptr, ##43148
04048     53 93 02 F6 | 	mov	arg01, local01
0404c     84 CC B1 FD | 	call	#_printerror
04050     44 03 90 FD | 	jmp	#LR__0210
04054                 | LR__0200
04054                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
04054     54 00 00 FF 
04058     D0 64 06 F1 | 	add	objptr, ##43216
0405c     32 93 02 FB | 	rdlong	arg01, objptr
04060     54 00 00 FF 
04064     D0 64 86 F1 | 	sub	objptr, ##43216
04068     93 01 00 FF 
0406c     43 94 06 F6 | 	mov	arg02, ##@LR__5573
04070     8C 09 B2 FD | 	call	#__system___string_cmp
04074     00 7A 0E F2 | 	cmp	result1, #0 wz
04078     FC 02 90 AD |  if_e	jmp	#LR__0209
0407c     54 00 00 FF 
04080     D0 64 06 F1 | 	add	objptr, ##43216
04084     32 AD 02 FB | 	rdlong	local04, objptr
04088     1B 00 00 FF 
0408c     10 65 86 F1 | 	sub	objptr, ##14096
04090     32 AD 62 FC | 	wrlong	local04, objptr
04094     08 64 06 F1 | 	add	objptr, #8
04098     32 09 68 FC | 	wrlong	#4, objptr
0409c     38 00 00 FF 
040a0     C8 65 86 F1 | 	sub	objptr, ##29128
040a4     0C D9 9F FD | 	jmp	#LR__0070
040a8                 | LR__0201
040a8                 | '       							
040a8                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 		' not a first part, command
040a8     38 00 00 FF 
040ac     C8 65 06 F1 | 	add	objptr, ##29128
040b0     32 AD 02 FB | 	rdlong	local04, objptr
040b4     38 00 00 FF 
040b8     C8 65 86 F1 | 	sub	objptr, ##29128
040bc     01 AC 0E F2 | 	cmp	local04, #1 wz
040c0     38 00 00 5F 
040c4     C8 65 06 51 |  if_ne	add	objptr, ##29128
040c8     32 B9 02 5B |  if_ne	rdlong	local10, objptr
040cc     38 00 00 5F 
040d0     C8 65 86 51 |  if_ne	sub	objptr, ##29128
040d4     02 B8 0E 52 |  if_ne	cmp	local10, #2 wz
040d8     C0 00 90 5D |  if_ne	jmp	#LR__0203
040dc     36 00 00 FF 
040e0     BC 65 06 F1 | 	add	objptr, ##28092
040e4     32 BD 02 FB | 	rdlong	local12, objptr
040e8     36 00 00 FF 
040ec     BC 65 86 F1 | 	sub	objptr, ##28092
040f0     1B BC 0E F2 | 	cmp	local12, #27 wz
040f4     A4 00 90 AD |  if_e	jmp	#LR__0203
040f8     54 00 00 FF 
040fc     8C 64 06 F1 | 	add	objptr, ##43148
04100     32 93 02 FB | 	rdlong	arg01, objptr
04104     1B 00 00 FF 
04108     C4 64 86 F1 | 	sub	objptr, ##14020
0410c     32 97 02 FB | 	rdlong	arg03, objptr
04110     38 00 00 FF 
04114     C8 65 86 F1 | 	sub	objptr, ##29128
04118     00 94 06 F6 | 	mov	arg02, #0
0411c     44 45 B0 FD | 	call	#_compile
04120     3D A7 0A F6 | 	mov	local01, result1 wz
04124                 | '   err=compile(linenum,0,cont) 
04124                 | '   if err<>0 then printerror(err,linenum): goto 101
04124     20 00 90 AD |  if_e	jmp	#LR__0202
04128     54 00 00 FF 
0412c     8C 64 06 F1 | 	add	objptr, ##43148
04130     32 95 02 FB | 	rdlong	arg02, objptr
04134     54 00 00 FF 
04138     8C 64 86 F1 | 	sub	objptr, ##43148
0413c     53 93 02 F6 | 	mov	arg01, local01
04140     90 CB B1 FD | 	call	#_printerror
04144     50 02 90 FD | 	jmp	#LR__0210
04148                 | LR__0202
04148                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
04148     54 00 00 FF 
0414c     D0 64 06 F1 | 	add	objptr, ##43216
04150     32 93 02 FB | 	rdlong	arg01, objptr
04154     54 00 00 FF 
04158     D0 64 86 F1 | 	sub	objptr, ##43216
0415c     93 01 00 FF 
04160     44 94 06 F6 | 	mov	arg02, ##@LR__5574
04164     98 08 B2 FD | 	call	#__system___string_cmp
04168     00 7A 0E F2 | 	cmp	result1, #0 wz
0416c     08 02 90 AD |  if_e	jmp	#LR__0209
04170     54 00 00 FF 
04174     D0 64 06 F1 | 	add	objptr, ##43216
04178     32 AD 02 FB | 	rdlong	local04, objptr
0417c     1B 00 00 FF 
04180     10 65 86 F1 | 	sub	objptr, ##14096
04184     32 AD 62 FC | 	wrlong	local04, objptr
04188     08 64 06 F1 | 	add	objptr, #8
0418c     32 09 68 FC | 	wrlong	#4, objptr
04190     38 00 00 FF 
04194     C8 65 86 F1 | 	sub	objptr, ##29128
04198     18 D8 9F FD | 	jmp	#LR__0070
0419c                 | LR__0203
0419c                 | ' 							 
0419c                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  		' first part, assign
0419c     38 00 00 FF 
041a0     C8 65 06 F1 | 	add	objptr, ##29128
041a4     32 AD 0A FB | 	rdlong	local04, objptr wz
041a8     38 00 00 FF 
041ac     C8 65 86 F1 | 	sub	objptr, ##29128
041b0     38 00 00 5F 
041b4     C8 65 06 51 |  if_ne	add	objptr, ##29128
041b8     32 B9 02 5B |  if_ne	rdlong	local10, objptr
041bc     38 00 00 5F 
041c0     C8 65 86 51 |  if_ne	sub	objptr, ##29128
041c4     03 B8 0E 52 |  if_ne	cmp	local10, #3 wz
041c8     36 00 00 AF 
041cc     C4 65 06 A1 |  if_e	add	objptr, ##28100
041d0     32 BD 02 AB |  if_e	rdlong	local12, objptr
041d4     36 00 00 AF 
041d8     C4 65 86 A1 |  if_e	sub	objptr, ##28100
041dc     1B BC 0E A2 |  if_e	cmp	local12, #27 wz
041e0     A4 00 90 5D |  if_ne	jmp	#LR__0205
041e4     54 00 00 FF 
041e8     8C 64 06 F1 | 	add	objptr, ##43148
041ec     32 93 02 FB | 	rdlong	arg01, objptr
041f0     1B 00 00 FF 
041f4     C4 64 86 F1 | 	sub	objptr, ##14020
041f8     32 97 02 FB | 	rdlong	arg03, objptr
041fc     38 00 00 FF 
04200     C8 65 86 F1 | 	sub	objptr, ##29128
04204     00 94 06 F6 | 	mov	arg02, #0
04208     20 45 B0 FD | 	call	#_compile_assign
0420c     3D A7 0A F6 | 	mov	local01, result1 wz
04210                 | '   err=compile_assign(linenum,0,cont)
04210                 | '   if err<>0 then printerror(err,linenum): goto 101
04210     20 00 90 AD |  if_e	jmp	#LR__0204
04214     54 00 00 FF 
04218     8C 64 06 F1 | 	add	objptr, ##43148
0421c     32 95 02 FB | 	rdlong	arg02, objptr
04220     54 00 00 FF 
04224     8C 64 86 F1 | 	sub	objptr, ##43148
04228     53 93 02 F6 | 	mov	arg01, local01
0422c     A4 CA B1 FD | 	call	#_printerror
04230     64 01 90 FD | 	jmp	#LR__0210
04234                 | LR__0204
04234                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
04234     54 00 00 FF 
04238     D0 64 06 F1 | 	add	objptr, ##43216
0423c     32 93 02 FB | 	rdlong	arg01, objptr
04240     54 00 00 FF 
04244     D0 64 86 F1 | 	sub	objptr, ##43216
04248     93 01 00 FF 
0424c     45 94 06 F6 | 	mov	arg02, ##@LR__5575
04250     AC 07 B2 FD | 	call	#__system___string_cmp
04254     00 7A 0E F2 | 	cmp	result1, #0 wz
04258     1C 01 90 AD |  if_e	jmp	#LR__0209
0425c     54 00 00 FF 
04260     D0 64 06 F1 | 	add	objptr, ##43216
04264     32 AD 02 FB | 	rdlong	local04, objptr
04268     1B 00 00 FF 
0426c     10 65 86 F1 | 	sub	objptr, ##14096
04270     32 AD 62 FC | 	wrlong	local04, objptr
04274     08 64 06 F1 | 	add	objptr, #8
04278     32 09 68 FC | 	wrlong	#4, objptr
0427c     38 00 00 FF 
04280     C8 65 86 F1 | 	sub	objptr, ##29128
04284     2C D7 9F FD | 	jmp	#LR__0070
04288                 | LR__0205
04288                 | '     							 
04288                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 		' not a first part, assign
04288     38 00 00 FF 
0428c     C8 65 06 F1 | 	add	objptr, ##29128
04290     32 AD 02 FB | 	rdlong	local04, objptr
04294     38 00 00 FF 
04298     C8 65 86 F1 | 	sub	objptr, ##29128
0429c     01 AC 0E F2 | 	cmp	local04, #1 wz
042a0     38 00 00 5F 
042a4     C8 65 06 51 |  if_ne	add	objptr, ##29128
042a8     32 B9 02 5B |  if_ne	rdlong	local10, objptr
042ac     38 00 00 5F 
042b0     C8 65 86 51 |  if_ne	sub	objptr, ##29128
042b4     02 B8 0E 52 |  if_ne	cmp	local10, #2 wz
042b8     36 00 00 AF 
042bc     BC 65 06 A1 |  if_e	add	objptr, ##28092
042c0     32 BD 02 AB |  if_e	rdlong	local12, objptr
042c4     36 00 00 AF 
042c8     BC 65 86 A1 |  if_e	sub	objptr, ##28092
042cc     1B BC 0E A2 |  if_e	cmp	local12, #27 wz
042d0     A4 00 90 5D |  if_ne	jmp	#LR__0208
042d4     54 00 00 FF 
042d8     8C 64 06 F1 | 	add	objptr, ##43148
042dc     32 93 02 FB | 	rdlong	arg01, objptr
042e0     1B 00 00 FF 
042e4     C4 64 86 F1 | 	sub	objptr, ##14020
042e8     32 97 02 FB | 	rdlong	arg03, objptr
042ec     38 00 00 FF 
042f0     C8 65 86 F1 | 	sub	objptr, ##29128
042f4     00 94 06 F6 | 	mov	arg02, #0
042f8     30 44 B0 FD | 	call	#_compile_assign
042fc     3D A7 0A F6 | 	mov	local01, result1 wz
04300                 | '   err=compile_assign(linenum,0,cont) 
04300                 | '   if err<>0 then printerror(err,linenum): goto 101
04300     20 00 90 AD |  if_e	jmp	#LR__0206
04304     54 00 00 FF 
04308     8C 64 06 F1 | 	add	objptr, ##43148
0430c     32 95 02 FB | 	rdlong	arg02, objptr
04310     54 00 00 FF 
04314     8C 64 86 F1 | 	sub	objptr, ##43148
04318     53 93 02 F6 | 	mov	arg01, local01
0431c     B4 C9 B1 FD | 	call	#_printerror
04320     74 00 90 FD | 	jmp	#LR__0210
04324                 | LR__0206
04324                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								 
04324     54 00 00 FF 
04328     D0 64 06 F1 | 	add	objptr, ##43216
0432c     32 93 02 FB | 	rdlong	arg01, objptr
04330     54 00 00 FF 
04334     D0 64 86 F1 | 	sub	objptr, ##43216
04338     93 01 00 FF 
0433c     46 94 06 F6 | 	mov	arg02, ##@LR__5576
04340     BC 06 B2 FD | 	call	#__system___string_cmp
04344     00 7A 4E F2 | 	cmps	result1, #0 wz
04348     2C 00 90 AD |  if_e	jmp	#LR__0207
0434c     54 00 00 FF 
04350     D0 64 06 F1 | 	add	objptr, ##43216
04354     32 AD 02 FB | 	rdlong	local04, objptr
04358     1B 00 00 FF 
0435c     10 65 86 F1 | 	sub	objptr, ##14096
04360     32 AD 62 FC | 	wrlong	local04, objptr
04364     08 64 06 F1 | 	add	objptr, #8
04368     32 09 68 FC | 	wrlong	#4, objptr
0436c     38 00 00 FF 
04370     C8 65 86 F1 | 	sub	objptr, ##29128
04374     3C D6 9F FD | 	jmp	#LR__0070
04378                 | LR__0207
04378                 | LR__0208
04378                 | LR__0209
04378                 | ' 
04378                 | ' 104 if linenum=0 then 								' line 0 is for immediate execution
04378     54 00 00 FF 
0437c     8C 64 06 F1 | 	add	objptr, ##43148
04380     32 AD 0A FB | 	rdlong	local04, objptr wz
04384     54 00 00 FF 
04388     8C 64 86 F1 | 	sub	objptr, ##43148
0438c     B0 00 90 5D |  if_ne	jmp	#LR__0213
04390     02 92 06 F6 | 	mov	arg01, #2
04394     D4 91 B0 FD | 	call	#_execute_line
04398                 | LR__0210
04398                 | '   execute_line(2)
04398                 | ' 101 if inload=0 then v.writeln("") : v.writeln("Ready") 
04398     54 00 00 FF 
0439c     B0 64 06 F1 | 	add	objptr, ##43184
043a0     32 AD 0A FB | 	rdlong	local04, objptr wz
043a4     54 00 00 FF 
043a8     B0 64 86 F1 | 	sub	objptr, ##43184
043ac     20 00 90 5D |  if_ne	jmp	#LR__0211
043b0     93 01 00 FF 
043b4     47 92 06 F6 | 	mov	arg01, ##@LR__5577
043b8                 | ' 
043b8                 | ' write(text)
043b8     B0 EA B1 FD | 	call	#_Hg010b_4_spin2_write
043bc                 | ' crlf
043bc     4C EF B1 FD | 	call	#_Hg010b_4_spin2_crlf
043c0     93 01 00 FF 
043c4     48 92 06 F6 | 	mov	arg01, ##@LR__5578
043c8                 | ' 
043c8                 | ' write(text)
043c8     A0 EA B1 FD | 	call	#_Hg010b_4_spin2_write
043cc                 | ' crlf
043cc     3C EF B1 FD | 	call	#_Hg010b_4_spin2_crlf
043d0                 | LR__0211
043d0                 | '     if inload=1 andalso err>0 then print fullline$
043d0     54 00 00 FF 
043d4     B0 64 06 F1 | 	add	objptr, ##43184
043d8     32 AD 02 FB | 	rdlong	local04, objptr
043dc     54 00 00 FF 
043e0     B0 64 86 F1 | 	sub	objptr, ##43184
043e4     01 AC 0E F2 | 	cmp	local04, #1 wz
043e8     54 00 90 5D |  if_ne	jmp	#LR__0212
043ec     01 A6 56 F2 | 	cmps	local01, #1 wc
043f0     4C 00 90 CD |  if_b	jmp	#LR__0212
043f4     00 92 06 F6 | 	mov	arg01, #0
043f8     60 5B B2 FD | 	call	#__system___getiolock_0622
043fc     3D 93 02 F6 | 	mov	arg01, result1
04400     D4 05 B2 FD | 	call	#__system___lockmem
04404     38 00 00 FF 
04408     C4 65 06 F1 | 	add	objptr, ##29124
0440c     32 95 02 FB | 	rdlong	arg02, objptr
04410     38 00 00 FF 
04414     C4 65 86 F1 | 	sub	objptr, ##29124
04418     00 92 06 F6 | 	mov	arg01, #0
0441c     00 96 06 F6 | 	mov	arg03, #0
04420     A8 12 B2 FD | 	call	#__system___basic_print_string
04424     00 92 06 F6 | 	mov	arg01, #0
04428     0A 94 06 F6 | 	mov	arg02, #10
0442c     00 96 06 F6 | 	mov	arg03, #0
04430     40 12 B2 FD | 	call	#__system___basic_print_char
04434     00 92 06 F6 | 	mov	arg01, #0
04438     20 5B B2 FD | 	call	#__system___getiolock_0622
0443c     3D 01 68 FC | 	wrlong	#0, result1
04440                 | LR__0212
04440                 | LR__0213
04440     E7 F0 03 F6 | 	mov	ptra, fp
04444     F2 00 A0 FD | 	call	#popregs_
04448                 | _interpret_ret
04448     2D 00 64 FD | 	ret
0444c                 | 
0444c                 | ' 
0444c                 | ' '---------------------------------------------------------------------------------------------------------------------
0444c                 | ' '
0444c                 | ' '                          END OF TOKENIZER MAIN CODE
0444c                 | ' '
0444c                 | ' '---------------------------------------------------------------------------------------------------------------------
0444c                 | ' 
0444c                 | ' '---------------------------------------------------------------------------------------------------------------------
0444c                 | ' '-------------------- Helper functions for the tokenizer -------------------------------------------------------------
0444c                 | ' '---------------------------------------------------------------------------------------------------------------------
0444c                 | ' 
0444c                 | ' ' Check if the part is an operator, return a token or 0 if not found
0444c                 | ' 
0444c                 | ' function isoperator(s as string) as ubyte
0444c                 | _isoperator
0444c     01 CA 05 F6 | 	mov	COUNT_, #1
04450     E8 00 A0 FD | 	call	#pushregs_
04454                 | ' 
04454                 | ' select case s
04454     49 A7 02 F6 | 	mov	local01, arg01
04458     93 01 00 FF 
0445c     4E 94 06 F6 | 	mov	arg02, ##@LR__5579
04460     53 93 02 F6 | 	mov	arg01, local01
04464     98 05 B2 FD | 	call	#__system___string_cmp
04468     00 7A 0E F2 | 	cmp	result1, #0 wz
0446c     FC 01 90 AD |  if_e	jmp	#LR__0220
04470     93 01 00 FF 
04474     50 94 06 F6 | 	mov	arg02, ##@LR__5580
04478     53 93 02 F6 | 	mov	arg01, local01
0447c     80 05 B2 FD | 	call	#__system___string_cmp
04480     00 7A 0E F2 | 	cmp	result1, #0 wz
04484     EC 01 90 AD |  if_e	jmp	#LR__0221
04488     93 01 00 FF 
0448c     52 94 06 F6 | 	mov	arg02, ##@LR__5581
04490     53 93 02 F6 | 	mov	arg01, local01
04494     68 05 B2 FD | 	call	#__system___string_cmp
04498     00 7A 0E F2 | 	cmp	result1, #0 wz
0449c     DC 01 90 AD |  if_e	jmp	#LR__0222
044a0     93 01 00 FF 
044a4     55 94 06 F6 | 	mov	arg02, ##@LR__5582
044a8     53 93 02 F6 | 	mov	arg01, local01
044ac     50 05 B2 FD | 	call	#__system___string_cmp
044b0     00 7A 0E F2 | 	cmp	result1, #0 wz
044b4     CC 01 90 AD |  if_e	jmp	#LR__0223
044b8     93 01 00 FF 
044bc     59 94 06 F6 | 	mov	arg02, ##@LR__5583
044c0     53 93 02 F6 | 	mov	arg01, local01
044c4     38 05 B2 FD | 	call	#__system___string_cmp
044c8     00 7A 0E F2 | 	cmp	result1, #0 wz
044cc     BC 01 90 AD |  if_e	jmp	#LR__0224
044d0     93 01 00 FF 
044d4     5B 94 06 F6 | 	mov	arg02, ##@LR__5584
044d8     53 93 02 F6 | 	mov	arg01, local01
044dc     20 05 B2 FD | 	call	#__system___string_cmp
044e0     00 7A 0E F2 | 	cmp	result1, #0 wz
044e4     AC 01 90 AD |  if_e	jmp	#LR__0225
044e8     93 01 00 FF 
044ec     5D 94 06 F6 | 	mov	arg02, ##@LR__5585
044f0     53 93 02 F6 | 	mov	arg01, local01
044f4     08 05 B2 FD | 	call	#__system___string_cmp
044f8     00 7A 0E F2 | 	cmp	result1, #0 wz
044fc     9C 01 90 AD |  if_e	jmp	#LR__0226
04500     93 01 00 FF 
04504     61 94 06 F6 | 	mov	arg02, ##@LR__5586
04508     53 93 02 F6 | 	mov	arg01, local01
0450c     F0 04 B2 FD | 	call	#__system___string_cmp
04510     00 7A 0E F2 | 	cmp	result1, #0 wz
04514     8C 01 90 AD |  if_e	jmp	#LR__0227
04518     93 01 00 FF 
0451c     65 94 06 F6 | 	mov	arg02, ##@LR__5587
04520     53 93 02 F6 | 	mov	arg01, local01
04524     D8 04 B2 FD | 	call	#__system___string_cmp
04528     00 7A 0E F2 | 	cmp	result1, #0 wz
0452c     7C 01 90 AD |  if_e	jmp	#LR__0228
04530     93 01 00 FF 
04534     69 94 06 F6 | 	mov	arg02, ##@LR__5588
04538     53 93 02 F6 | 	mov	arg01, local01
0453c     C0 04 B2 FD | 	call	#__system___string_cmp
04540     00 7A 0E F2 | 	cmp	result1, #0 wz
04544     6C 01 90 AD |  if_e	jmp	#LR__0229
04548     93 01 00 FF 
0454c     6D 94 06 F6 | 	mov	arg02, ##@LR__5589
04550     53 93 02 F6 | 	mov	arg01, local01
04554     A8 04 B2 FD | 	call	#__system___string_cmp
04558     00 7A 0E F2 | 	cmp	result1, #0 wz
0455c     5C 01 90 AD |  if_e	jmp	#LR__0230
04560     93 01 00 FF 
04564     71 94 06 F6 | 	mov	arg02, ##@LR__5590
04568     53 93 02 F6 | 	mov	arg01, local01
0456c     90 04 B2 FD | 	call	#__system___string_cmp
04570     00 7A 0E F2 | 	cmp	result1, #0 wz
04574     4C 01 90 AD |  if_e	jmp	#LR__0231
04578     93 01 00 FF 
0457c     73 94 06 F6 | 	mov	arg02, ##@LR__5591
04580     53 93 02 F6 | 	mov	arg01, local01
04584     78 04 B2 FD | 	call	#__system___string_cmp
04588     00 7A 0E F2 | 	cmp	result1, #0 wz
0458c     3C 01 90 AD |  if_e	jmp	#LR__0232
04590     93 01 00 FF 
04594     77 94 06 F6 | 	mov	arg02, ##@LR__5592
04598     53 93 02 F6 | 	mov	arg01, local01
0459c     60 04 B2 FD | 	call	#__system___string_cmp
045a0     00 7A 0E F2 | 	cmp	result1, #0 wz
045a4     2C 01 90 AD |  if_e	jmp	#LR__0233
045a8     93 01 00 FF 
045ac     79 94 06 F6 | 	mov	arg02, ##@LR__5593
045b0     53 93 02 F6 | 	mov	arg01, local01
045b4     48 04 B2 FD | 	call	#__system___string_cmp
045b8     00 7A 0E F2 | 	cmp	result1, #0 wz
045bc     1C 01 90 AD |  if_e	jmp	#LR__0234
045c0     93 01 00 FF 
045c4     7B 94 06 F6 | 	mov	arg02, ##@LR__5594
045c8     53 93 02 F6 | 	mov	arg01, local01
045cc     30 04 B2 FD | 	call	#__system___string_cmp
045d0     00 7A 0E F2 | 	cmp	result1, #0 wz
045d4     0C 01 90 AD |  if_e	jmp	#LR__0235
045d8     93 01 00 FF 
045dc     7E 94 06 F6 | 	mov	arg02, ##@LR__5595
045e0     53 93 02 F6 | 	mov	arg01, local01
045e4     18 04 B2 FD | 	call	#__system___string_cmp
045e8     00 7A 0E F2 | 	cmp	result1, #0 wz
045ec     FC 00 90 AD |  if_e	jmp	#LR__0236
045f0     93 01 00 FF 
045f4     81 94 06 F6 | 	mov	arg02, ##@LR__5596
045f8     53 93 02 F6 | 	mov	arg01, local01
045fc     00 04 B2 FD | 	call	#__system___string_cmp
04600     00 7A 0E F2 | 	cmp	result1, #0 wz
04604     EC 00 90 AD |  if_e	jmp	#LR__0237
04608     93 01 00 FF 
0460c     83 94 06 F6 | 	mov	arg02, ##@LR__5597
04610     53 93 02 F6 | 	mov	arg01, local01
04614     E8 03 B2 FD | 	call	#__system___string_cmp
04618     00 7A 0E F2 | 	cmp	result1, #0 wz
0461c     DC 00 90 AD |  if_e	jmp	#LR__0238
04620     93 01 00 FF 
04624     85 94 06 F6 | 	mov	arg02, ##@LR__5598
04628     53 93 02 F6 | 	mov	arg01, local01
0462c     D0 03 B2 FD | 	call	#__system___string_cmp
04630     00 7A 0E F2 | 	cmp	result1, #0 wz
04634     CC 00 90 AD |  if_e	jmp	#LR__0239
04638     93 01 00 FF 
0463c     88 94 06 F6 | 	mov	arg02, ##@LR__5599
04640     53 93 02 F6 | 	mov	arg01, local01
04644     B8 03 B2 FD | 	call	#__system___string_cmp
04648     00 7A 0E F2 | 	cmp	result1, #0 wz
0464c     BC 00 90 AD |  if_e	jmp	#LR__0240
04650     93 01 00 FF 
04654     8B 94 06 F6 | 	mov	arg02, ##@LR__5600
04658     53 93 02 F6 | 	mov	arg01, local01
0465c     A0 03 B2 FD | 	call	#__system___string_cmp
04660     00 7A 0E F2 | 	cmp	result1, #0 wz
04664     AC 00 90 AD |  if_e	jmp	#LR__0241
04668     B0 00 90 FD | 	jmp	#LR__0242
0466c                 | LR__0220
0466c     01 7A 06 F6 | 	mov	result1, #1
04670     AC 00 90 FD | 	jmp	#LR__0243
04674                 | LR__0221
04674     02 7A 06 F6 | 	mov	result1, #2
04678     A4 00 90 FD | 	jmp	#LR__0243
0467c                 | LR__0222
0467c     03 7A 06 F6 | 	mov	result1, #3
04680     9C 00 90 FD | 	jmp	#LR__0243
04684                 | LR__0223
04684     04 7A 06 F6 | 	mov	result1, #4
04688     94 00 90 FD | 	jmp	#LR__0243
0468c                 | LR__0224
0468c     05 7A 06 F6 | 	mov	result1, #5
04690     8C 00 90 FD | 	jmp	#LR__0243
04694                 | LR__0225
04694     06 7A 06 F6 | 	mov	result1, #6
04698     84 00 90 FD | 	jmp	#LR__0243
0469c                 | LR__0226
0469c     07 7A 06 F6 | 	mov	result1, #7
046a0     7C 00 90 FD | 	jmp	#LR__0243
046a4                 | LR__0227
046a4     08 7A 06 F6 | 	mov	result1, #8
046a8     74 00 90 FD | 	jmp	#LR__0243
046ac                 | LR__0228
046ac     09 7A 06 F6 | 	mov	result1, #9
046b0     6C 00 90 FD | 	jmp	#LR__0243
046b4                 | LR__0229
046b4     0A 7A 06 F6 | 	mov	result1, #10
046b8     64 00 90 FD | 	jmp	#LR__0243
046bc                 | LR__0230
046bc     0B 7A 06 F6 | 	mov	result1, #11
046c0     5C 00 90 FD | 	jmp	#LR__0243
046c4                 | LR__0231
046c4     0C 7A 06 F6 | 	mov	result1, #12
046c8     54 00 90 FD | 	jmp	#LR__0243
046cc                 | LR__0232
046cc     0D 7A 06 F6 | 	mov	result1, #13
046d0     4C 00 90 FD | 	jmp	#LR__0243
046d4                 | LR__0233
046d4     0E 7A 06 F6 | 	mov	result1, #14
046d8     44 00 90 FD | 	jmp	#LR__0243
046dc                 | LR__0234
046dc     1B 7A 06 F6 | 	mov	result1, #27
046e0     3C 00 90 FD | 	jmp	#LR__0243
046e4                 | LR__0235
046e4     27 7A 06 F6 | 	mov	result1, #39
046e8     34 00 90 FD | 	jmp	#LR__0243
046ec                 | LR__0236
046ec     26 7A 06 F6 | 	mov	result1, #38
046f0     2C 00 90 FD | 	jmp	#LR__0243
046f4                 | LR__0237
046f4     10 7A 06 F6 | 	mov	result1, #16
046f8     24 00 90 FD | 	jmp	#LR__0243
046fc                 | LR__0238
046fc     0F 7A 06 F6 | 	mov	result1, #15
04700     1C 00 90 FD | 	jmp	#LR__0243
04704                 | LR__0239
04704     2A 7A 06 F6 | 	mov	result1, #42
04708     14 00 90 FD | 	jmp	#LR__0243
0470c                 | LR__0240
0470c     28 7A 06 F6 | 	mov	result1, #40
04710     0C 00 90 FD | 	jmp	#LR__0243
04714                 | LR__0241
04714     29 7A 06 F6 | 	mov	result1, #41
04718     04 00 90 FD | 	jmp	#LR__0243
0471c                 | LR__0242
0471c     00 7A 06 F6 | 	mov	result1, #0
04720                 | LR__0243
04720     E7 F0 03 F6 | 	mov	ptra, fp
04724     F2 00 A0 FD | 	call	#popregs_
04728                 | _isoperator_ret
04728     2D 00 64 FD | 	ret
0472c                 | 
0472c                 | ' 
0472c                 | ' ' Check if the part is a channel#, return a token or 0 if not found
0472c                 | ' 
0472c                 | ' function ischannel(s as string) as ulong
0472c                 | _ischannel
0472c     02 CA 05 F6 | 	mov	COUNT_, #2
04730     E8 00 A0 FD | 	call	#pushregs_
04734                 | ' if left$(s,1)<>"#" then return 0
04734     49 A7 02 F6 | 	mov	local01, arg01
04738     01 94 06 F6 | 	mov	arg02, #1
0473c     40 1B B2 FD | 	call	#__system__Left_S
04740     3D 93 02 F6 | 	mov	arg01, result1
04744     93 01 00 FF 
04748     8E 94 06 F6 | 	mov	arg02, ##@LR__5601
0474c     B0 02 B2 FD | 	call	#__system___string_cmp
04750     00 7A 0E F2 | 	cmp	result1, #0 wz
04754     00 7A 06 56 |  if_ne	mov	result1, #0
04758     AC 00 90 5D |  if_ne	jmp	#LR__0254
0475c                 | ' if len(s)<>2 then return 0
0475c     53 93 02 F6 | 	mov	arg01, local01
04760     49 A9 02 F6 | 	mov	local02, arg01
04764     D7 06 48 FB | 	callpa	#(@LR__0251-@LR__0250)>>2,fcache_load_ptr_
04768                 | LR__0250
04768     54 7B CA FA | 	rdbyte	result1, local02 wz
0476c     01 A8 06 51 |  if_ne	add	local02, #1
04770     F4 FF 9F 5D |  if_ne	jmp	#LR__0250
04774                 | LR__0251
04774     49 A9 82 F1 | 	sub	local02, arg01
04778     54 7B 02 F6 | 	mov	result1, local02
0477c     02 7A 0E F2 | 	cmp	result1, #2 wz
04780     00 7A 06 56 |  if_ne	mov	result1, #0
04784     80 00 90 5D |  if_ne	jmp	#LR__0254
04788                 | ' if right$(s,1)<"0" orelse right$(s,1)>"9" then return 0
04788     53 93 02 F6 | 	mov	arg01, local01
0478c     01 94 06 F6 | 	mov	arg02, #1
04790     74 1B B2 FD | 	call	#__system__Right_S
04794     3D 93 02 F6 | 	mov	arg01, result1
04798     93 01 00 FF 
0479c     90 94 06 F6 | 	mov	arg02, ##@LR__5602
047a0     5C 02 B2 FD | 	call	#__system___string_cmp
047a4     00 7A 56 F2 | 	cmps	result1, #0 wc
047a8     24 00 90 CD |  if_b	jmp	#LR__0252
047ac     53 93 02 F6 | 	mov	arg01, local01
047b0     01 94 06 F6 | 	mov	arg02, #1
047b4     50 1B B2 FD | 	call	#__system__Right_S
047b8     3D 93 02 F6 | 	mov	arg01, result1
047bc     93 01 00 FF 
047c0     92 94 06 F6 | 	mov	arg02, ##@LR__5603
047c4     38 02 B2 FD | 	call	#__system___string_cmp
047c8     01 7A 56 F2 | 	cmps	result1, #1 wc
047cc     08 00 90 CD |  if_b	jmp	#LR__0253
047d0                 | LR__0252
047d0     00 7A 06 F6 | 	mov	result1, #0
047d4     30 00 90 FD | 	jmp	#LR__0254
047d8                 | LR__0253
047d8                 | ' return token_channel+val(right$(s,1))
047d8     53 93 02 F6 | 	mov	arg01, local01
047dc     01 94 06 F6 | 	mov	arg02, #1
047e0     24 1B B2 FD | 	call	#__system__Right_S
047e4     3D 93 02 F6 | 	mov	arg01, result1
047e8     D8 30 B2 FD | 	call	#__system____builtin_atof
047ec     3D 95 02 F6 | 	mov	arg02, result1
047f0     00 18 21 FF 
047f4     00 92 06 F6 | 	mov	arg01, ##1110441984
047f8     DC 24 B2 FD | 	call	#__system___float_add
047fc     3D 93 02 F6 | 	mov	arg01, result1
04800     00 94 06 F6 | 	mov	arg02, #0
04804     68 2D B2 FD | 	call	#__system___float_tointeger
04808                 | LR__0254
04808     E7 F0 03 F6 | 	mov	ptra, fp
0480c     F2 00 A0 FD | 	call	#popregs_
04810                 | _ischannel_ret
04810     2D 00 64 FD | 	ret
04814                 | 
04814                 | ' 
04814                 | ' ' Check if the part is a predefined constant, return a constant or 0 if not found
04814                 | ' ' todo: add spin2/pasm constants for pin control
04814                 | ' 
04814                 | ' function isconstant(s as string) as integer
04814                 | _isconstant
04814     01 CA 05 F6 | 	mov	COUNT_, #1
04818     E8 00 A0 FD | 	call	#pushregs_
0481c                 | ' 
0481c                 | ' select case s
0481c     49 A7 02 F6 | 	mov	local01, arg01
04820     93 01 00 FF 
04824     94 94 06 F6 | 	mov	arg02, ##@LR__5604
04828     53 93 02 F6 | 	mov	arg01, local01
0482c     D0 01 B2 FD | 	call	#__system___string_cmp
04830     00 7A 0E F2 | 	cmp	result1, #0 wz
04834     34 00 90 AD |  if_e	jmp	#LR__0260
04838     93 01 00 FF 
0483c     9A 94 06 F6 | 	mov	arg02, ##@LR__5605
04840     53 93 02 F6 | 	mov	arg01, local01
04844     B8 01 B2 FD | 	call	#__system___string_cmp
04848     00 7A 0E F2 | 	cmp	result1, #0 wz
0484c     24 00 90 AD |  if_e	jmp	#LR__0261
04850     93 01 00 FF 
04854     A1 94 06 F6 | 	mov	arg02, ##@LR__5606
04858     53 93 02 F6 | 	mov	arg01, local01
0485c     A0 01 B2 FD | 	call	#__system___string_cmp
04860     00 7A 0E F2 | 	cmp	result1, #0 wz
04864     14 00 90 AD |  if_e	jmp	#LR__0262
04868     18 00 90 FD | 	jmp	#LR__0263
0486c                 | LR__0260
0486c     01 7A 06 F6 | 	mov	result1, #1
04870     14 00 90 FD | 	jmp	#LR__0264
04874                 | LR__0261
04874     02 7A 06 F6 | 	mov	result1, #2
04878     0C 00 90 FD | 	jmp	#LR__0264
0487c                 | LR__0262
0487c     04 7A 06 F6 | 	mov	result1, #4
04880     04 00 90 FD | 	jmp	#LR__0264
04884                 | LR__0263
04884     00 7A 06 F6 | 	mov	result1, #0
04888                 | LR__0264
04888     E7 F0 03 F6 | 	mov	ptra, fp
0488c     F2 00 A0 FD | 	call	#popregs_
04890                 | _isconstant_ret
04890     2D 00 64 FD | 	ret
04894                 | 
04894                 | ' 
04894                 | ' ' Check if the part is a predefined music note name, return a token or 0 if not found
04894                 | ' 
04894                 | ' function isnotename(s as string) as ulong
04894                 | _isnotename
04894     07 CA 05 F6 | 	mov	COUNT_, #7
04898     E8 00 A0 FD | 	call	#pushregs_
0489c                 | ' if left$(s,1)<>"#" then return 0
0489c     49 A7 02 F6 | 	mov	local01, arg01
048a0     01 94 06 F6 | 	mov	arg02, #1
048a4     D8 19 B2 FD | 	call	#__system__Left_S
048a8     3D 93 02 F6 | 	mov	arg01, result1
048ac     93 01 00 FF 
048b0     A9 94 06 F6 | 	mov	arg02, ##@LR__5607
048b4     48 01 B2 FD | 	call	#__system___string_cmp
048b8     00 7A 0E F2 | 	cmp	result1, #0 wz
048bc     00 7A 06 56 |  if_ne	mov	result1, #0
048c0     30 03 90 5D |  if_ne	jmp	#LR__0293
048c4                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
048c4     53 93 02 F6 | 	mov	arg01, local01
048c8     03 94 06 F6 | 	mov	arg02, #3
048cc     01 96 06 F6 | 	mov	arg03, #1
048d0     C4 1A B2 FD | 	call	#__system__Mid_S
048d4     3D 93 02 F6 | 	mov	arg01, result1
048d8     93 01 00 FF 
048dc     AB 94 06 F6 | 	mov	arg02, ##@LR__5608
048e0     1C 01 B2 FD | 	call	#__system___string_cmp
048e4     00 7A 0E F2 | 	cmp	result1, #0 wz
048e8     18 00 90 5D |  if_ne	jmp	#LR__0270
048ec     53 93 02 F6 | 	mov	arg01, local01
048f0     02 94 06 F6 | 	mov	arg02, #2
048f4     02 96 06 F6 | 	mov	arg03, #2
048f8     9C 1A B2 FD | 	call	#__system__Mid_S
048fc     3D A9 02 F6 | 	mov	local02, result1
04900     14 00 90 FD | 	jmp	#LR__0271
04904                 | LR__0270
04904     53 93 02 F6 | 	mov	arg01, local01
04908     02 94 06 F6 | 	mov	arg02, #2
0490c     01 96 06 F6 | 	mov	arg03, #1
04910     84 1A B2 FD | 	call	#__system__Mid_S
04914     3D A9 02 F6 | 	mov	local02, result1
04918                 | LR__0271
04918                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
04918     53 93 02 F6 | 	mov	arg01, local01
0491c     49 AB 02 F6 | 	mov	local03, arg01
04920     D7 06 48 FB | 	callpa	#(@LR__0273-@LR__0272)>>2,fcache_load_ptr_
04924                 | LR__0272
04924     55 7B CA FA | 	rdbyte	result1, local03 wz
04928     01 AA 06 51 |  if_ne	add	local03, #1
0492c     F4 FF 9F 5D |  if_ne	jmp	#LR__0272
04930                 | LR__0273
04930     49 AB 82 F1 | 	sub	local03, arg01
04934     55 95 02 F6 | 	mov	arg02, local03
04938     01 94 86 F1 | 	sub	arg02, #1
0493c     53 93 02 F6 | 	mov	arg01, local01
04940     01 96 06 F6 | 	mov	arg03, #1
04944     50 1A B2 FD | 	call	#__system__Mid_S
04948     3D 93 02 F6 | 	mov	arg01, result1
0494c     93 01 00 FF 
04950     AD 94 06 F6 | 	mov	arg02, ##@LR__5609
04954     A8 00 B2 FD | 	call	#__system___string_cmp
04958     00 7A 0E F2 | 	cmp	result1, #0 wz
0495c     28 00 90 AD |  if_e	jmp	#LR__0274
04960     53 93 02 F6 | 	mov	arg01, local01
04964     01 94 06 F6 | 	mov	arg02, #1
04968     9C 19 B2 FD | 	call	#__system__Right_S
0496c     3D 93 02 F6 | 	mov	arg01, result1
04970     50 2F B2 FD | 	call	#__system____builtin_atof
04974     3D 93 02 F6 | 	mov	arg01, result1
04978     00 94 06 F6 | 	mov	arg02, #0
0497c     F0 2B B2 FD | 	call	#__system___float_tointeger
04980     3D AD 02 F6 | 	mov	local04, result1
04984     34 00 90 FD | 	jmp	#LR__0275
04988                 | LR__0274
04988     53 93 02 F6 | 	mov	arg01, local01
0498c     01 94 06 F6 | 	mov	arg02, #1
04990     74 19 B2 FD | 	call	#__system__Right_S
04994     3D 93 02 F6 | 	mov	arg01, result1
04998     28 2F B2 FD | 	call	#__system____builtin_atof
0499c     3D 95 02 F6 | 	mov	arg02, result1
049a0     00 C0 5F FF 
049a4     00 92 06 F6 | 	mov	arg01, ##-1082130432
049a8     FC 26 B2 FD | 	call	#__system___float_mul
049ac     3D 93 02 F6 | 	mov	arg01, result1
049b0     00 94 06 F6 | 	mov	arg02, #0
049b4     B8 2B B2 FD | 	call	#__system___float_tointeger
049b8     3D AD 02 F6 | 	mov	local04, result1
049bc                 | LR__0275
049bc                 | ' 
049bc                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
049bc     00 AC 0E F2 | 	cmp	local04, #0 wz
049c0     24 00 90 5D |  if_ne	jmp	#LR__0276
049c4     53 93 02 F6 | 	mov	arg01, local01
049c8     01 94 06 F6 | 	mov	arg02, #1
049cc     38 19 B2 FD | 	call	#__system__Right_S
049d0     3D 93 02 F6 | 	mov	arg01, result1
049d4     93 01 00 FF 
049d8     AF 94 06 F6 | 	mov	arg02, ##@LR__5610
049dc     20 00 B2 FD | 	call	#__system___string_cmp
049e0     00 7A 0E F2 | 	cmp	result1, #0 wz
049e4     04 AC 06 56 |  if_ne	mov	local04, #4
049e8                 | LR__0276
049e8                 | ' 
049e8                 | ' select case s1
049e8     54 AF 02 F6 | 	mov	local05, local02
049ec     93 01 00 FF 
049f0     B1 94 06 F6 | 	mov	arg02, ##@LR__5611
049f4     57 93 02 F6 | 	mov	arg01, local05
049f8     04 00 B2 FD | 	call	#__system___string_cmp
049fc     00 7A 0E F2 | 	cmp	result1, #0 wz
04a00     24 01 90 AD |  if_e	jmp	#LR__0277
04a04     93 01 00 FF 
04a08     B3 94 06 F6 | 	mov	arg02, ##@LR__5612
04a0c     57 93 02 F6 | 	mov	arg01, local05
04a10     EC FF B1 FD | 	call	#__system___string_cmp
04a14     00 7A 0E F2 | 	cmp	result1, #0 wz
04a18     18 01 90 AD |  if_e	jmp	#LR__0278
04a1c     93 01 00 FF 
04a20     B6 94 06 F6 | 	mov	arg02, ##@LR__5613
04a24     57 93 02 F6 | 	mov	arg01, local05
04a28     D4 FF B1 FD | 	call	#__system___string_cmp
04a2c     00 7A 0E F2 | 	cmp	result1, #0 wz
04a30     0C 01 90 AD |  if_e	jmp	#LR__0279
04a34     93 01 00 FF 
04a38     B8 94 06 F6 | 	mov	arg02, ##@LR__5614
04a3c     57 93 02 F6 | 	mov	arg01, local05
04a40     BC FF B1 FD | 	call	#__system___string_cmp
04a44     00 7A 0E F2 | 	cmp	result1, #0 wz
04a48     00 01 90 AD |  if_e	jmp	#LR__0280
04a4c     93 01 00 FF 
04a50     BB 94 06 F6 | 	mov	arg02, ##@LR__5615
04a54     57 93 02 F6 | 	mov	arg01, local05
04a58     A4 FF B1 FD | 	call	#__system___string_cmp
04a5c     00 7A 0E F2 | 	cmp	result1, #0 wz
04a60     F4 00 90 AD |  if_e	jmp	#LR__0281
04a64     93 01 00 FF 
04a68     BD 94 06 F6 | 	mov	arg02, ##@LR__5616
04a6c     57 93 02 F6 | 	mov	arg01, local05
04a70     8C FF B1 FD | 	call	#__system___string_cmp
04a74     00 7A 0E F2 | 	cmp	result1, #0 wz
04a78     E8 00 90 AD |  if_e	jmp	#LR__0282
04a7c     93 01 00 FF 
04a80     BF 94 06 F6 | 	mov	arg02, ##@LR__5617
04a84     57 93 02 F6 | 	mov	arg01, local05
04a88     74 FF B1 FD | 	call	#__system___string_cmp
04a8c     00 7A 0E F2 | 	cmp	result1, #0 wz
04a90     DC 00 90 AD |  if_e	jmp	#LR__0283
04a94     93 01 00 FF 
04a98     C2 94 06 F6 | 	mov	arg02, ##@LR__5618
04a9c     57 93 02 F6 | 	mov	arg01, local05
04aa0     5C FF B1 FD | 	call	#__system___string_cmp
04aa4     00 7A 0E F2 | 	cmp	result1, #0 wz
04aa8     D0 00 90 AD |  if_e	jmp	#LR__0284
04aac     93 01 00 FF 
04ab0     C4 94 06 F6 | 	mov	arg02, ##@LR__5619
04ab4     57 93 02 F6 | 	mov	arg01, local05
04ab8     44 FF B1 FD | 	call	#__system___string_cmp
04abc     00 7A 0E F2 | 	cmp	result1, #0 wz
04ac0     C4 00 90 AD |  if_e	jmp	#LR__0285
04ac4     93 01 00 FF 
04ac8     C7 94 06 F6 | 	mov	arg02, ##@LR__5620
04acc     57 93 02 F6 | 	mov	arg01, local05
04ad0     2C FF B1 FD | 	call	#__system___string_cmp
04ad4     00 7A 0E F2 | 	cmp	result1, #0 wz
04ad8     B8 00 90 AD |  if_e	jmp	#LR__0286
04adc     93 01 00 FF 
04ae0     C9 94 06 F6 | 	mov	arg02, ##@LR__5621
04ae4     57 93 02 F6 | 	mov	arg01, local05
04ae8     14 FF B1 FD | 	call	#__system___string_cmp
04aec     00 7A 0E F2 | 	cmp	result1, #0 wz
04af0     AC 00 90 AD |  if_e	jmp	#LR__0287
04af4     93 01 00 FF 
04af8     CC 94 06 F6 | 	mov	arg02, ##@LR__5622
04afc     57 93 02 F6 | 	mov	arg01, local05
04b00     FC FE B1 FD | 	call	#__system___string_cmp
04b04     00 7A 0E F2 | 	cmp	result1, #0 wz
04b08     A0 00 90 AD |  if_e	jmp	#LR__0288
04b0c     93 01 00 FF 
04b10     CE 94 06 F6 | 	mov	arg02, ##@LR__5623
04b14     57 93 02 F6 | 	mov	arg01, local05
04b18     E4 FE B1 FD | 	call	#__system___string_cmp
04b1c     00 7A 0E F2 | 	cmp	result1, #0 wz
04b20     94 00 90 AD |  if_e	jmp	#LR__0289
04b24     9C 00 90 FD | 	jmp	#LR__0290
04b28                 | LR__0277
04b28     01 00 00 FF 
04b2c     00 B1 06 F6 | 	mov	local06, ##768
04b30     98 00 90 FD | 	jmp	#LR__0291
04b34                 | LR__0278
04b34     01 00 00 FF 
04b38     01 B1 06 F6 | 	mov	local06, ##769
04b3c     8C 00 90 FD | 	jmp	#LR__0291
04b40                 | LR__0279
04b40     01 00 00 FF 
04b44     02 B1 06 F6 | 	mov	local06, ##770
04b48     80 00 90 FD | 	jmp	#LR__0291
04b4c                 | LR__0280
04b4c     01 00 00 FF 
04b50     03 B1 06 F6 | 	mov	local06, ##771
04b54     74 00 90 FD | 	jmp	#LR__0291
04b58                 | LR__0281
04b58     01 00 00 FF 
04b5c     04 B1 06 F6 | 	mov	local06, ##772
04b60     68 00 90 FD | 	jmp	#LR__0291
04b64                 | LR__0282
04b64     01 00 00 FF 
04b68     05 B1 06 F6 | 	mov	local06, ##773
04b6c     5C 00 90 FD | 	jmp	#LR__0291
04b70                 | LR__0283
04b70     01 00 00 FF 
04b74     06 B1 06 F6 | 	mov	local06, ##774
04b78     50 00 90 FD | 	jmp	#LR__0291
04b7c                 | LR__0284
04b7c     01 00 00 FF 
04b80     07 B1 06 F6 | 	mov	local06, ##775
04b84     44 00 90 FD | 	jmp	#LR__0291
04b88                 | LR__0285
04b88     01 00 00 FF 
04b8c     08 B1 06 F6 | 	mov	local06, ##776
04b90     38 00 90 FD | 	jmp	#LR__0291
04b94                 | LR__0286
04b94     01 00 00 FF 
04b98     09 B1 06 F6 | 	mov	local06, ##777
04b9c     2C 00 90 FD | 	jmp	#LR__0291
04ba0                 | LR__0287
04ba0     01 00 00 FF 
04ba4     0A B1 06 F6 | 	mov	local06, ##778
04ba8     20 00 90 FD | 	jmp	#LR__0291
04bac                 | LR__0288
04bac     01 00 00 FF 
04bb0     0B B1 06 F6 | 	mov	local06, ##779
04bb4     14 00 90 FD | 	jmp	#LR__0291
04bb8                 | LR__0289
04bb8     01 00 00 FF 
04bbc     0B B1 06 F6 | 	mov	local06, ##779
04bc0     08 00 90 FD | 	jmp	#LR__0291
04bc4                 | LR__0290
04bc4     00 7A 06 F6 | 	mov	result1, #0
04bc8     28 00 90 FD | 	jmp	#LR__0293
04bcc                 | LR__0291
04bcc                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
04bcc     FF FF 7F FF 
04bd0     FF AD 56 F2 | 	cmps	local04, ##-1 wc
04bd4     18 00 90 CD |  if_b	jmp	#LR__0292
04bd8     0A AC 56 F2 | 	cmps	local04, #10 wc
04bdc     56 B3 02 C6 |  if_b	mov	local07, local04
04be0     01 B2 66 C0 |  if_b	shl	local07, #1
04be4     56 B3 02 C1 |  if_b	add	local07, local04
04be8     02 B2 66 C0 |  if_b	shl	local07, #2
04bec     59 B1 02 C1 |  if_b	add	local06, local07
04bf0                 | LR__0292
04bf0                 | ' return token
04bf0     58 7B 02 F6 | 	mov	result1, local06
04bf4                 | LR__0293
04bf4     E7 F0 03 F6 | 	mov	ptra, fp
04bf8     F2 00 A0 FD | 	call	#popregs_
04bfc                 | _isnotename_ret
04bfc     2D 00 64 FD | 	ret
04c00                 | 
04c00                 | ' 
04c00                 | ' ' Check if the part is a separator, return a token or 0 if not found
04c00                 | ' 
04c00                 | ' function isseparator(s as string) as ubyte
04c00                 | _isseparator
04c00     01 CA 05 F6 | 	mov	COUNT_, #1
04c04     E8 00 A0 FD | 	call	#pushregs_
04c08                 | ' 
04c08                 | ' select case s
04c08     49 A7 02 F6 | 	mov	local01, arg01
04c0c     93 01 00 FF 
04c10     D0 94 06 F6 | 	mov	arg02, ##@LR__5624
04c14     53 93 02 F6 | 	mov	arg01, local01
04c18     E4 FD B1 FD | 	call	#__system___string_cmp
04c1c     00 7A 0E F2 | 	cmp	result1, #0 wz
04c20     54 01 90 AD |  if_e	jmp	#LR__0300
04c24     93 01 00 FF 
04c28     D2 94 06 F6 | 	mov	arg02, ##@LR__5625
04c2c     53 93 02 F6 | 	mov	arg01, local01
04c30     CC FD B1 FD | 	call	#__system___string_cmp
04c34     00 7A 0E F2 | 	cmp	result1, #0 wz
04c38     44 01 90 AD |  if_e	jmp	#LR__0301
04c3c     93 01 00 FF 
04c40     D4 94 06 F6 | 	mov	arg02, ##@LR__5626
04c44     53 93 02 F6 | 	mov	arg01, local01
04c48     B4 FD B1 FD | 	call	#__system___string_cmp
04c4c     00 7A 0E F2 | 	cmp	result1, #0 wz
04c50     34 01 90 AD |  if_e	jmp	#LR__0302
04c54     93 01 00 FF 
04c58     D6 94 06 F6 | 	mov	arg02, ##@LR__5627
04c5c     53 93 02 F6 | 	mov	arg01, local01
04c60     9C FD B1 FD | 	call	#__system___string_cmp
04c64     00 7A 0E F2 | 	cmp	result1, #0 wz
04c68     24 01 90 AD |  if_e	jmp	#LR__0303
04c6c     93 01 00 FF 
04c70     D8 94 06 F6 | 	mov	arg02, ##@LR__5628
04c74     53 93 02 F6 | 	mov	arg01, local01
04c78     84 FD B1 FD | 	call	#__system___string_cmp
04c7c     00 7A 0E F2 | 	cmp	result1, #0 wz
04c80     14 01 90 AD |  if_e	jmp	#LR__0304
04c84     93 01 00 FF 
04c88     DA 94 06 F6 | 	mov	arg02, ##@LR__5629
04c8c     53 93 02 F6 | 	mov	arg01, local01
04c90     6C FD B1 FD | 	call	#__system___string_cmp
04c94     00 7A 0E F2 | 	cmp	result1, #0 wz
04c98     04 01 90 AD |  if_e	jmp	#LR__0305
04c9c     93 01 00 FF 
04ca0     DC 94 06 F6 | 	mov	arg02, ##@LR__5630
04ca4     53 93 02 F6 | 	mov	arg01, local01
04ca8     54 FD B1 FD | 	call	#__system___string_cmp
04cac     00 7A 0E F2 | 	cmp	result1, #0 wz
04cb0     F4 00 90 AD |  if_e	jmp	#LR__0306
04cb4     93 01 00 FF 
04cb8     DE 94 06 F6 | 	mov	arg02, ##@LR__5631
04cbc     53 93 02 F6 | 	mov	arg01, local01
04cc0     3C FD B1 FD | 	call	#__system___string_cmp
04cc4     00 7A 0E F2 | 	cmp	result1, #0 wz
04cc8     E4 00 90 AD |  if_e	jmp	#LR__0307
04ccc     93 01 00 FF 
04cd0     E0 94 06 F6 | 	mov	arg02, ##@LR__5632
04cd4     53 93 02 F6 | 	mov	arg01, local01
04cd8     24 FD B1 FD | 	call	#__system___string_cmp
04cdc     00 7A 0E F2 | 	cmp	result1, #0 wz
04ce0     D4 00 90 AD |  if_e	jmp	#LR__0308
04ce4     93 01 00 FF 
04ce8     E2 94 06 F6 | 	mov	arg02, ##@LR__5633
04cec     53 93 02 F6 | 	mov	arg01, local01
04cf0     0C FD B1 FD | 	call	#__system___string_cmp
04cf4     00 7A 0E F2 | 	cmp	result1, #0 wz
04cf8     C4 00 90 AD |  if_e	jmp	#LR__0309
04cfc     93 01 00 FF 
04d00     E4 94 06 F6 | 	mov	arg02, ##@LR__5634
04d04     53 93 02 F6 | 	mov	arg01, local01
04d08     F4 FC B1 FD | 	call	#__system___string_cmp
04d0c     00 7A 0E F2 | 	cmp	result1, #0 wz
04d10     B4 00 90 AD |  if_e	jmp	#LR__0310
04d14     93 01 00 FF 
04d18     E6 94 06 F6 | 	mov	arg02, ##@LR__5635
04d1c     53 93 02 F6 | 	mov	arg01, local01
04d20     DC FC B1 FD | 	call	#__system___string_cmp
04d24     00 7A 0E F2 | 	cmp	result1, #0 wz
04d28     A4 00 90 AD |  if_e	jmp	#LR__0311
04d2c     93 01 00 FF 
04d30     E8 94 06 F6 | 	mov	arg02, ##@LR__5636
04d34     53 93 02 F6 | 	mov	arg01, local01
04d38     C4 FC B1 FD | 	call	#__system___string_cmp
04d3c     00 7A 0E F2 | 	cmp	result1, #0 wz
04d40     94 00 90 AD |  if_e	jmp	#LR__0312
04d44     93 01 00 FF 
04d48     EA 94 06 F6 | 	mov	arg02, ##@LR__5637
04d4c     53 93 02 F6 | 	mov	arg01, local01
04d50     AC FC B1 FD | 	call	#__system___string_cmp
04d54     00 7A 0E F2 | 	cmp	result1, #0 wz
04d58     84 00 90 AD |  if_e	jmp	#LR__0313
04d5c     93 01 00 FF 
04d60     EC 94 06 F6 | 	mov	arg02, ##@LR__5638
04d64     53 93 02 F6 | 	mov	arg01, local01
04d68     94 FC B1 FD | 	call	#__system___string_cmp
04d6c     00 7A 0E F2 | 	cmp	result1, #0 wz
04d70     74 00 90 AD |  if_e	jmp	#LR__0314
04d74     78 00 90 FD | 	jmp	#LR__0315
04d78                 | LR__0300
04d78     01 7A 06 F6 | 	mov	result1, #1
04d7c     74 00 90 FD | 	jmp	#LR__0316
04d80                 | LR__0301
04d80     02 7A 06 F6 | 	mov	result1, #2
04d84     6C 00 90 FD | 	jmp	#LR__0316
04d88                 | LR__0302
04d88     1B 7A 06 F6 | 	mov	result1, #27
04d8c     64 00 90 FD | 	jmp	#LR__0316
04d90                 | LR__0303
04d90     11 7A 06 F6 | 	mov	result1, #17
04d94     5C 00 90 FD | 	jmp	#LR__0316
04d98                 | LR__0304
04d98     05 7A 06 F6 | 	mov	result1, #5
04d9c     54 00 90 FD | 	jmp	#LR__0316
04da0                 | LR__0305
04da0     06 7A 06 F6 | 	mov	result1, #6
04da4     4C 00 90 FD | 	jmp	#LR__0316
04da8                 | LR__0306
04da8     12 7A 06 F6 | 	mov	result1, #18
04dac     44 00 90 FD | 	jmp	#LR__0316
04db0                 | LR__0307
04db0     13 7A 06 F6 | 	mov	result1, #19
04db4     3C 00 90 FD | 	jmp	#LR__0316
04db8                 | LR__0308
04db8     0C 7A 06 F6 | 	mov	result1, #12
04dbc     34 00 90 FD | 	jmp	#LR__0316
04dc0                 | LR__0309
04dc0     14 7A 06 F6 | 	mov	result1, #20
04dc4     2C 00 90 FD | 	jmp	#LR__0316
04dc8                 | LR__0310
04dc8     15 7A 06 F6 | 	mov	result1, #21
04dcc     24 00 90 FD | 	jmp	#LR__0316
04dd0                 | LR__0311
04dd0     16 7A 06 F6 | 	mov	result1, #22
04dd4     1C 00 90 FD | 	jmp	#LR__0316
04dd8                 | LR__0312
04dd8     FF 7B 06 F6 | 	mov	result1, #511
04ddc     14 00 90 FD | 	jmp	#LR__0316
04de0                 | LR__0313
04de0     0F 7A 06 F6 | 	mov	result1, #15
04de4     0C 00 90 FD | 	jmp	#LR__0316
04de8                 | LR__0314
04de8     10 7A 06 F6 | 	mov	result1, #16
04dec     04 00 90 FD | 	jmp	#LR__0316
04df0                 | LR__0315
04df0     00 7A 06 F6 | 	mov	result1, #0
04df4                 | LR__0316
04df4     E7 F0 03 F6 | 	mov	ptra, fp
04df8     F2 00 A0 FD | 	call	#popregs_
04dfc                 | _isseparator_ret
04dfc     2D 00 64 FD | 	ret
04e00                 | 
04e00                 | ' 
04e00                 | ' ' Check if the part is a command than doesn't return a value, return a token or 0 if not found
04e00                 | ' 
04e00                 | ' function iscommand(s as string) as ubyte
04e00                 | _iscommand
04e00     01 CA 05 F6 | 	mov	COUNT_, #1
04e04     E8 00 A0 FD | 	call	#pushregs_
04e08                 | ' 
04e08                 | ' select case s
04e08     49 A7 02 F6 | 	mov	local01, arg01
04e0c     93 01 00 FF 
04e10     F0 94 06 F6 | 	mov	arg02, ##@LR__5640
04e14     53 93 02 F6 | 	mov	arg01, local01
04e18     E4 FB B1 FD | 	call	#__system___string_cmp
04e1c     00 7A 0E F2 | 	cmp	result1, #0 wz
04e20     24 0D 90 AD |  if_e	jmp	#LR__0320
04e24     93 01 00 FF 
04e28     F5 94 06 F6 | 	mov	arg02, ##@LR__5641
04e2c     53 93 02 F6 | 	mov	arg01, local01
04e30     CC FB B1 FD | 	call	#__system___string_cmp
04e34     00 7A 0E F2 | 	cmp	result1, #0 wz
04e38     14 0D 90 AD |  if_e	jmp	#LR__0321
04e3c     93 01 00 FF 
04e40     F8 94 06 F6 | 	mov	arg02, ##@LR__5642
04e44     53 93 02 F6 | 	mov	arg01, local01
04e48     B4 FB B1 FD | 	call	#__system___string_cmp
04e4c     00 7A 0E F2 | 	cmp	result1, #0 wz
04e50     04 0D 90 AD |  if_e	jmp	#LR__0322
04e54     93 01 00 FF 
04e58     FD 94 06 F6 | 	mov	arg02, ##@LR__5643
04e5c     53 93 02 F6 | 	mov	arg01, local01
04e60     9C FB B1 FD | 	call	#__system___string_cmp
04e64     00 7A 0E F2 | 	cmp	result1, #0 wz
04e68     F4 0C 90 AD |  if_e	jmp	#LR__0323
04e6c     93 01 00 FF 
04e70     01 95 06 F6 | 	mov	arg02, ##@LR__5644
04e74     53 93 02 F6 | 	mov	arg01, local01
04e78     84 FB B1 FD | 	call	#__system___string_cmp
04e7c     00 7A 0E F2 | 	cmp	result1, #0 wz
04e80     E4 0C 90 AD |  if_e	jmp	#LR__0324
04e84     93 01 00 FF 
04e88     06 95 06 F6 | 	mov	arg02, ##@LR__5645
04e8c     53 93 02 F6 | 	mov	arg01, local01
04e90     6C FB B1 FD | 	call	#__system___string_cmp
04e94     00 7A 0E F2 | 	cmp	result1, #0 wz
04e98     D4 0C 90 AD |  if_e	jmp	#LR__0325
04e9c     93 01 00 FF 
04ea0     0A 95 06 F6 | 	mov	arg02, ##@LR__5646
04ea4     53 93 02 F6 | 	mov	arg01, local01
04ea8     54 FB B1 FD | 	call	#__system___string_cmp
04eac     00 7A 0E F2 | 	cmp	result1, #0 wz
04eb0     C4 0C 90 AD |  if_e	jmp	#LR__0326
04eb4     93 01 00 FF 
04eb8     0D 95 06 F6 | 	mov	arg02, ##@LR__5647
04ebc     53 93 02 F6 | 	mov	arg01, local01
04ec0     3C FB B1 FD | 	call	#__system___string_cmp
04ec4     00 7A 0E F2 | 	cmp	result1, #0 wz
04ec8     B4 0C 90 AD |  if_e	jmp	#LR__0327
04ecc     93 01 00 FF 
04ed0     18 95 06 F6 | 	mov	arg02, ##@LR__5648
04ed4     53 93 02 F6 | 	mov	arg01, local01
04ed8     24 FB B1 FD | 	call	#__system___string_cmp
04edc     00 7A 0E F2 | 	cmp	result1, #0 wz
04ee0     A4 0C 90 AD |  if_e	jmp	#LR__0328
04ee4     93 01 00 FF 
04ee8     1C 95 06 F6 | 	mov	arg02, ##@LR__5649
04eec     53 93 02 F6 | 	mov	arg01, local01
04ef0     0C FB B1 FD | 	call	#__system___string_cmp
04ef4     00 7A 0E F2 | 	cmp	result1, #0 wz
04ef8     94 0C 90 AD |  if_e	jmp	#LR__0329
04efc     93 01 00 FF 
04f00     26 95 06 F6 | 	mov	arg02, ##@LR__5650
04f04     53 93 02 F6 | 	mov	arg01, local01
04f08     F4 FA B1 FD | 	call	#__system___string_cmp
04f0c     00 7A 0E F2 | 	cmp	result1, #0 wz
04f10     84 0C 90 AD |  if_e	jmp	#LR__0330
04f14     93 01 00 FF 
04f18     2A 95 06 F6 | 	mov	arg02, ##@LR__5651
04f1c     53 93 02 F6 | 	mov	arg01, local01
04f20     DC FA B1 FD | 	call	#__system___string_cmp
04f24     00 7A 0E F2 | 	cmp	result1, #0 wz
04f28     74 0C 90 AD |  if_e	jmp	#LR__0331
04f2c     93 01 00 FF 
04f30     34 95 06 F6 | 	mov	arg02, ##@LR__5652
04f34     53 93 02 F6 | 	mov	arg01, local01
04f38     C4 FA B1 FD | 	call	#__system___string_cmp
04f3c     00 7A 0E F2 | 	cmp	result1, #0 wz
04f40     64 0C 90 AD |  if_e	jmp	#LR__0332
04f44     93 01 00 FF 
04f48     38 95 06 F6 | 	mov	arg02, ##@LR__5653
04f4c     53 93 02 F6 | 	mov	arg01, local01
04f50     AC FA B1 FD | 	call	#__system___string_cmp
04f54     00 7A 0E F2 | 	cmp	result1, #0 wz
04f58     54 0C 90 AD |  if_e	jmp	#LR__0333
04f5c     93 01 00 FF 
04f60     43 95 06 F6 | 	mov	arg02, ##@LR__5654
04f64     53 93 02 F6 | 	mov	arg01, local01
04f68     94 FA B1 FD | 	call	#__system___string_cmp
04f6c     00 7A 0E F2 | 	cmp	result1, #0 wz
04f70     44 0C 90 AD |  if_e	jmp	#LR__0334
04f74     93 01 00 FF 
04f78     47 95 06 F6 | 	mov	arg02, ##@LR__5655
04f7c     53 93 02 F6 | 	mov	arg01, local01
04f80     7C FA B1 FD | 	call	#__system___string_cmp
04f84     00 7A 0E F2 | 	cmp	result1, #0 wz
04f88     34 0C 90 AD |  if_e	jmp	#LR__0335
04f8c     93 01 00 FF 
04f90     4E 95 06 F6 | 	mov	arg02, ##@LR__5656
04f94     53 93 02 F6 | 	mov	arg01, local01
04f98     64 FA B1 FD | 	call	#__system___string_cmp
04f9c     00 7A 0E F2 | 	cmp	result1, #0 wz
04fa0     24 0C 90 AD |  if_e	jmp	#LR__0336
04fa4     93 01 00 FF 
04fa8     52 95 06 F6 | 	mov	arg02, ##@LR__5657
04fac     53 93 02 F6 | 	mov	arg01, local01
04fb0     4C FA B1 FD | 	call	#__system___string_cmp
04fb4     00 7A 0E F2 | 	cmp	result1, #0 wz
04fb8     14 0C 90 AD |  if_e	jmp	#LR__0337
04fbc     93 01 00 FF 
04fc0     58 95 06 F6 | 	mov	arg02, ##@LR__5658
04fc4     53 93 02 F6 | 	mov	arg01, local01
04fc8     34 FA B1 FD | 	call	#__system___string_cmp
04fcc     00 7A 0E F2 | 	cmp	result1, #0 wz
04fd0     04 0C 90 AD |  if_e	jmp	#LR__0338
04fd4     93 01 00 FF 
04fd8     5E 95 06 F6 | 	mov	arg02, ##@LR__5659
04fdc     53 93 02 F6 | 	mov	arg01, local01
04fe0     1C FA B1 FD | 	call	#__system___string_cmp
04fe4     00 7A 0E F2 | 	cmp	result1, #0 wz
04fe8     F4 0B 90 AD |  if_e	jmp	#LR__0339
04fec     93 01 00 FF 
04ff0     62 95 06 F6 | 	mov	arg02, ##@LR__5660
04ff4     53 93 02 F6 | 	mov	arg01, local01
04ff8     04 FA B1 FD | 	call	#__system___string_cmp
04ffc     00 7A 0E F2 | 	cmp	result1, #0 wz
05000     E4 0B 90 AD |  if_e	jmp	#LR__0340
05004     93 01 00 FF 
05008     6A 95 06 F6 | 	mov	arg02, ##@LR__5661
0500c     53 93 02 F6 | 	mov	arg01, local01
05010     EC F9 B1 FD | 	call	#__system___string_cmp
05014     00 7A 0E F2 | 	cmp	result1, #0 wz
05018     D4 0B 90 AD |  if_e	jmp	#LR__0341
0501c     93 01 00 FF 
05020     70 95 06 F6 | 	mov	arg02, ##@LR__5662
05024     53 93 02 F6 | 	mov	arg01, local01
05028     D4 F9 B1 FD | 	call	#__system___string_cmp
0502c     00 7A 0E F2 | 	cmp	result1, #0 wz
05030     C4 0B 90 AD |  if_e	jmp	#LR__0342
05034     93 01 00 FF 
05038     73 95 06 F6 | 	mov	arg02, ##@LR__5663
0503c     53 93 02 F6 | 	mov	arg01, local01
05040     BC F9 B1 FD | 	call	#__system___string_cmp
05044     00 7A 0E F2 | 	cmp	result1, #0 wz
05048     B4 0B 90 AD |  if_e	jmp	#LR__0343
0504c     93 01 00 FF 
05050     78 95 06 F6 | 	mov	arg02, ##@LR__5664
05054     53 93 02 F6 | 	mov	arg01, local01
05058     A4 F9 B1 FD | 	call	#__system___string_cmp
0505c     00 7A 0E F2 | 	cmp	result1, #0 wz
05060     A4 0B 90 AD |  if_e	jmp	#LR__0344
05064     93 01 00 FF 
05068     7F 95 06 F6 | 	mov	arg02, ##@LR__5665
0506c     53 93 02 F6 | 	mov	arg01, local01
05070     8C F9 B1 FD | 	call	#__system___string_cmp
05074     00 7A 0E F2 | 	cmp	result1, #0 wz
05078     94 0B 90 AD |  if_e	jmp	#LR__0345
0507c     93 01 00 FF 
05080     84 95 06 F6 | 	mov	arg02, ##@LR__5666
05084     53 93 02 F6 | 	mov	arg01, local01
05088     74 F9 B1 FD | 	call	#__system___string_cmp
0508c     00 7A 0E F2 | 	cmp	result1, #0 wz
05090     84 0B 90 AD |  if_e	jmp	#LR__0346
05094     93 01 00 FF 
05098     8C 95 06 F6 | 	mov	arg02, ##@LR__5667
0509c     53 93 02 F6 | 	mov	arg01, local01
050a0     5C F9 B1 FD | 	call	#__system___string_cmp
050a4     00 7A 0E F2 | 	cmp	result1, #0 wz
050a8     74 0B 90 AD |  if_e	jmp	#LR__0347
050ac     93 01 00 FF 
050b0     93 95 06 F6 | 	mov	arg02, ##@LR__5668
050b4     53 93 02 F6 | 	mov	arg01, local01
050b8     44 F9 B1 FD | 	call	#__system___string_cmp
050bc     00 7A 0E F2 | 	cmp	result1, #0 wz
050c0     64 0B 90 AD |  if_e	jmp	#LR__0348
050c4     93 01 00 FF 
050c8     9A 95 06 F6 | 	mov	arg02, ##@LR__5669
050cc     53 93 02 F6 | 	mov	arg01, local01
050d0     2C F9 B1 FD | 	call	#__system___string_cmp
050d4     00 7A 0E F2 | 	cmp	result1, #0 wz
050d8     54 0B 90 AD |  if_e	jmp	#LR__0349
050dc     93 01 00 FF 
050e0     A4 95 06 F6 | 	mov	arg02, ##@LR__5670
050e4     53 93 02 F6 | 	mov	arg01, local01
050e8     14 F9 B1 FD | 	call	#__system___string_cmp
050ec     00 7A 0E F2 | 	cmp	result1, #0 wz
050f0     44 0B 90 AD |  if_e	jmp	#LR__0350
050f4     93 01 00 FF 
050f8     A8 95 06 F6 | 	mov	arg02, ##@LR__5671
050fc     53 93 02 F6 | 	mov	arg01, local01
05100     FC F8 B1 FD | 	call	#__system___string_cmp
05104     00 7A 0E F2 | 	cmp	result1, #0 wz
05108     34 0B 90 AD |  if_e	jmp	#LR__0351
0510c     93 01 00 FF 
05110     AC 95 06 F6 | 	mov	arg02, ##@LR__5672
05114     53 93 02 F6 | 	mov	arg01, local01
05118     E4 F8 B1 FD | 	call	#__system___string_cmp
0511c     00 7A 0E F2 | 	cmp	result1, #0 wz
05120     24 0B 90 AD |  if_e	jmp	#LR__0352
05124     93 01 00 FF 
05128     B3 95 06 F6 | 	mov	arg02, ##@LR__5673
0512c     53 93 02 F6 | 	mov	arg01, local01
05130     CC F8 B1 FD | 	call	#__system___string_cmp
05134     00 7A 0E F2 | 	cmp	result1, #0 wz
05138     14 0B 90 AD |  if_e	jmp	#LR__0353
0513c     93 01 00 FF 
05140     B7 95 06 F6 | 	mov	arg02, ##@LR__5674
05144     53 93 02 F6 | 	mov	arg01, local01
05148     B4 F8 B1 FD | 	call	#__system___string_cmp
0514c     00 7A 0E F2 | 	cmp	result1, #0 wz
05150     04 0B 90 AD |  if_e	jmp	#LR__0354
05154     93 01 00 FF 
05158     BB 95 06 F6 | 	mov	arg02, ##@LR__5675
0515c     53 93 02 F6 | 	mov	arg01, local01
05160     9C F8 B1 FD | 	call	#__system___string_cmp
05164     00 7A 0E F2 | 	cmp	result1, #0 wz
05168     F4 0A 90 AD |  if_e	jmp	#LR__0355
0516c     93 01 00 FF 
05170     C1 95 06 F6 | 	mov	arg02, ##@LR__5676
05174     53 93 02 F6 | 	mov	arg01, local01
05178     84 F8 B1 FD | 	call	#__system___string_cmp
0517c     00 7A 0E F2 | 	cmp	result1, #0 wz
05180     E4 0A 90 AD |  if_e	jmp	#LR__0356
05184     93 01 00 FF 
05188     C6 95 06 F6 | 	mov	arg02, ##@LR__5677
0518c     53 93 02 F6 | 	mov	arg01, local01
05190     6C F8 B1 FD | 	call	#__system___string_cmp
05194     00 7A 0E F2 | 	cmp	result1, #0 wz
05198     D4 0A 90 AD |  if_e	jmp	#LR__0357
0519c     93 01 00 FF 
051a0     CD 95 06 F6 | 	mov	arg02, ##@LR__5678
051a4     53 93 02 F6 | 	mov	arg01, local01
051a8     54 F8 B1 FD | 	call	#__system___string_cmp
051ac     00 7A 0E F2 | 	cmp	result1, #0 wz
051b0     C4 0A 90 AD |  if_e	jmp	#LR__0358
051b4     93 01 00 FF 
051b8     D1 95 06 F6 | 	mov	arg02, ##@LR__5679
051bc     53 93 02 F6 | 	mov	arg01, local01
051c0     3C F8 B1 FD | 	call	#__system___string_cmp
051c4     00 7A 0E F2 | 	cmp	result1, #0 wz
051c8     B4 0A 90 AD |  if_e	jmp	#LR__0359
051cc     93 01 00 FF 
051d0     D6 95 06 F6 | 	mov	arg02, ##@LR__5680
051d4     53 93 02 F6 | 	mov	arg01, local01
051d8     24 F8 B1 FD | 	call	#__system___string_cmp
051dc     00 7A 0E F2 | 	cmp	result1, #0 wz
051e0     A4 0A 90 AD |  if_e	jmp	#LR__0360
051e4     93 01 00 FF 
051e8     DA 95 06 F6 | 	mov	arg02, ##@LR__5681
051ec     53 93 02 F6 | 	mov	arg01, local01
051f0     0C F8 B1 FD | 	call	#__system___string_cmp
051f4     00 7A 0E F2 | 	cmp	result1, #0 wz
051f8     94 0A 90 AD |  if_e	jmp	#LR__0361
051fc     93 01 00 FF 
05200     E0 95 06 F6 | 	mov	arg02, ##@LR__5682
05204     53 93 02 F6 | 	mov	arg01, local01
05208     F4 F7 B1 FD | 	call	#__system___string_cmp
0520c     00 7A 0E F2 | 	cmp	result1, #0 wz
05210     84 0A 90 AD |  if_e	jmp	#LR__0362
05214     93 01 00 FF 
05218     E3 95 06 F6 | 	mov	arg02, ##@LR__5683
0521c     53 93 02 F6 | 	mov	arg01, local01
05220     DC F7 B1 FD | 	call	#__system___string_cmp
05224     00 7A 0E F2 | 	cmp	result1, #0 wz
05228     74 0A 90 AD |  if_e	jmp	#LR__0363
0522c     93 01 00 FF 
05230     EB 95 06 F6 | 	mov	arg02, ##@LR__5684
05234     53 93 02 F6 | 	mov	arg01, local01
05238     C4 F7 B1 FD | 	call	#__system___string_cmp
0523c     00 7A 0E F2 | 	cmp	result1, #0 wz
05240     64 0A 90 AD |  if_e	jmp	#LR__0364
05244     93 01 00 FF 
05248     EF 95 06 F6 | 	mov	arg02, ##@LR__5685
0524c     53 93 02 F6 | 	mov	arg01, local01
05250     AC F7 B1 FD | 	call	#__system___string_cmp
05254     00 7A 0E F2 | 	cmp	result1, #0 wz
05258     54 0A 90 AD |  if_e	jmp	#LR__0365
0525c     93 01 00 FF 
05260     F4 95 06 F6 | 	mov	arg02, ##@LR__5686
05264     53 93 02 F6 | 	mov	arg01, local01
05268     94 F7 B1 FD | 	call	#__system___string_cmp
0526c     00 7A 0E F2 | 	cmp	result1, #0 wz
05270     44 0A 90 AD |  if_e	jmp	#LR__0366
05274     93 01 00 FF 
05278     F8 95 06 F6 | 	mov	arg02, ##@LR__5687
0527c     53 93 02 F6 | 	mov	arg01, local01
05280     7C F7 B1 FD | 	call	#__system___string_cmp
05284     00 7A 0E F2 | 	cmp	result1, #0 wz
05288     34 0A 90 AD |  if_e	jmp	#LR__0367
0528c     93 01 00 FF 
05290     FD 95 06 F6 | 	mov	arg02, ##@LR__5688
05294     53 93 02 F6 | 	mov	arg01, local01
05298     64 F7 B1 FD | 	call	#__system___string_cmp
0529c     00 7A 0E F2 | 	cmp	result1, #0 wz
052a0     24 0A 90 AD |  if_e	jmp	#LR__0368
052a4     94 01 00 FF 
052a8     01 94 06 F6 | 	mov	arg02, ##@LR__5689
052ac     53 93 02 F6 | 	mov	arg01, local01
052b0     4C F7 B1 FD | 	call	#__system___string_cmp
052b4     00 7A 0E F2 | 	cmp	result1, #0 wz
052b8     14 0A 90 AD |  if_e	jmp	#LR__0369
052bc     94 01 00 FF 
052c0     04 94 06 F6 | 	mov	arg02, ##@LR__5690
052c4     53 93 02 F6 | 	mov	arg01, local01
052c8     34 F7 B1 FD | 	call	#__system___string_cmp
052cc     00 7A 0E F2 | 	cmp	result1, #0 wz
052d0     04 0A 90 AD |  if_e	jmp	#LR__0370
052d4     94 01 00 FF 
052d8     0A 94 06 F6 | 	mov	arg02, ##@LR__5691
052dc     53 93 02 F6 | 	mov	arg01, local01
052e0     1C F7 B1 FD | 	call	#__system___string_cmp
052e4     00 7A 0E F2 | 	cmp	result1, #0 wz
052e8     F4 09 90 AD |  if_e	jmp	#LR__0371
052ec     94 01 00 FF 
052f0     0E 94 06 F6 | 	mov	arg02, ##@LR__5692
052f4     53 93 02 F6 | 	mov	arg01, local01
052f8     04 F7 B1 FD | 	call	#__system___string_cmp
052fc     00 7A 0E F2 | 	cmp	result1, #0 wz
05300     E4 09 90 AD |  if_e	jmp	#LR__0372
05304     94 01 00 FF 
05308     12 94 06 F6 | 	mov	arg02, ##@LR__5693
0530c     53 93 02 F6 | 	mov	arg01, local01
05310     EC F6 B1 FD | 	call	#__system___string_cmp
05314     00 7A 0E F2 | 	cmp	result1, #0 wz
05318     D4 09 90 AD |  if_e	jmp	#LR__0373
0531c     94 01 00 FF 
05320     18 94 06 F6 | 	mov	arg02, ##@LR__5694
05324     53 93 02 F6 | 	mov	arg01, local01
05328     D4 F6 B1 FD | 	call	#__system___string_cmp
0532c     00 7A 0E F2 | 	cmp	result1, #0 wz
05330     C4 09 90 AD |  if_e	jmp	#LR__0374
05334     94 01 00 FF 
05338     1D 94 06 F6 | 	mov	arg02, ##@LR__5695
0533c     53 93 02 F6 | 	mov	arg01, local01
05340     BC F6 B1 FD | 	call	#__system___string_cmp
05344     00 7A 0E F2 | 	cmp	result1, #0 wz
05348     B4 09 90 AD |  if_e	jmp	#LR__0375
0534c     94 01 00 FF 
05350     20 94 06 F6 | 	mov	arg02, ##@LR__5696
05354     53 93 02 F6 | 	mov	arg01, local01
05358     A4 F6 B1 FD | 	call	#__system___string_cmp
0535c     00 7A 0E F2 | 	cmp	result1, #0 wz
05360     A4 09 90 AD |  if_e	jmp	#LR__0376
05364     94 01 00 FF 
05368     23 94 06 F6 | 	mov	arg02, ##@LR__5697
0536c     53 93 02 F6 | 	mov	arg01, local01
05370     8C F6 B1 FD | 	call	#__system___string_cmp
05374     00 7A 0E F2 | 	cmp	result1, #0 wz
05378     94 09 90 AD |  if_e	jmp	#LR__0377
0537c     94 01 00 FF 
05380     27 94 06 F6 | 	mov	arg02, ##@LR__5698
05384     53 93 02 F6 | 	mov	arg01, local01
05388     74 F6 B1 FD | 	call	#__system___string_cmp
0538c     00 7A 0E F2 | 	cmp	result1, #0 wz
05390     84 09 90 AD |  if_e	jmp	#LR__0378
05394     94 01 00 FF 
05398     2A 94 06 F6 | 	mov	arg02, ##@LR__5699
0539c     53 93 02 F6 | 	mov	arg01, local01
053a0     5C F6 B1 FD | 	call	#__system___string_cmp
053a4     00 7A 0E F2 | 	cmp	result1, #0 wz
053a8     74 09 90 AD |  if_e	jmp	#LR__0379
053ac     94 01 00 FF 
053b0     30 94 06 F6 | 	mov	arg02, ##@LR__5700
053b4     53 93 02 F6 | 	mov	arg01, local01
053b8     44 F6 B1 FD | 	call	#__system___string_cmp
053bc     00 7A 0E F2 | 	cmp	result1, #0 wz
053c0     64 09 90 AD |  if_e	jmp	#LR__0380
053c4     94 01 00 FF 
053c8     35 94 06 F6 | 	mov	arg02, ##@LR__5701
053cc     53 93 02 F6 | 	mov	arg01, local01
053d0     2C F6 B1 FD | 	call	#__system___string_cmp
053d4     00 7A 0E F2 | 	cmp	result1, #0 wz
053d8     54 09 90 AD |  if_e	jmp	#LR__0381
053dc     94 01 00 FF 
053e0     38 94 06 F6 | 	mov	arg02, ##@LR__5702
053e4     53 93 02 F6 | 	mov	arg01, local01
053e8     14 F6 B1 FD | 	call	#__system___string_cmp
053ec     00 7A 0E F2 | 	cmp	result1, #0 wz
053f0     44 09 90 AD |  if_e	jmp	#LR__0382
053f4     94 01 00 FF 
053f8     3D 94 06 F6 | 	mov	arg02, ##@LR__5703
053fc     53 93 02 F6 | 	mov	arg01, local01
05400     FC F5 B1 FD | 	call	#__system___string_cmp
05404     00 7A 0E F2 | 	cmp	result1, #0 wz
05408     34 09 90 AD |  if_e	jmp	#LR__0383
0540c     94 01 00 FF 
05410     41 94 06 F6 | 	mov	arg02, ##@LR__5704
05414     53 93 02 F6 | 	mov	arg01, local01
05418     E4 F5 B1 FD | 	call	#__system___string_cmp
0541c     00 7A 0E F2 | 	cmp	result1, #0 wz
05420     24 09 90 AD |  if_e	jmp	#LR__0384
05424     94 01 00 FF 
05428     47 94 06 F6 | 	mov	arg02, ##@LR__5705
0542c     53 93 02 F6 | 	mov	arg01, local01
05430     CC F5 B1 FD | 	call	#__system___string_cmp
05434     00 7A 0E F2 | 	cmp	result1, #0 wz
05438     14 09 90 AD |  if_e	jmp	#LR__0385
0543c     94 01 00 FF 
05440     4D 94 06 F6 | 	mov	arg02, ##@LR__5706
05444     53 93 02 F6 | 	mov	arg01, local01
05448     B4 F5 B1 FD | 	call	#__system___string_cmp
0544c     00 7A 0E F2 | 	cmp	result1, #0 wz
05450     04 09 90 AD |  if_e	jmp	#LR__0386
05454     94 01 00 FF 
05458     52 94 06 F6 | 	mov	arg02, ##@LR__5707
0545c     53 93 02 F6 | 	mov	arg01, local01
05460     9C F5 B1 FD | 	call	#__system___string_cmp
05464     00 7A 0E F2 | 	cmp	result1, #0 wz
05468     F4 08 90 AD |  if_e	jmp	#LR__0387
0546c     94 01 00 FF 
05470     55 94 06 F6 | 	mov	arg02, ##@LR__5708
05474     53 93 02 F6 | 	mov	arg01, local01
05478     84 F5 B1 FD | 	call	#__system___string_cmp
0547c     00 7A 0E F2 | 	cmp	result1, #0 wz
05480     E4 08 90 AD |  if_e	jmp	#LR__0388
05484     94 01 00 FF 
05488     5B 94 06 F6 | 	mov	arg02, ##@LR__5709
0548c     53 93 02 F6 | 	mov	arg01, local01
05490     6C F5 B1 FD | 	call	#__system___string_cmp
05494     00 7A 0E F2 | 	cmp	result1, #0 wz
05498     D4 08 90 AD |  if_e	jmp	#LR__0389
0549c     94 01 00 FF 
054a0     5F 94 06 F6 | 	mov	arg02, ##@LR__5710
054a4     53 93 02 F6 | 	mov	arg01, local01
054a8     54 F5 B1 FD | 	call	#__system___string_cmp
054ac     00 7A 0E F2 | 	cmp	result1, #0 wz
054b0     C4 08 90 AD |  if_e	jmp	#LR__0390
054b4     94 01 00 FF 
054b8     64 94 06 F6 | 	mov	arg02, ##@LR__5711
054bc     53 93 02 F6 | 	mov	arg01, local01
054c0     3C F5 B1 FD | 	call	#__system___string_cmp
054c4     00 7A 0E F2 | 	cmp	result1, #0 wz
054c8     B4 08 90 AD |  if_e	jmp	#LR__0391
054cc     94 01 00 FF 
054d0     67 94 06 F6 | 	mov	arg02, ##@LR__5712
054d4     53 93 02 F6 | 	mov	arg01, local01
054d8     24 F5 B1 FD | 	call	#__system___string_cmp
054dc     00 7A 0E F2 | 	cmp	result1, #0 wz
054e0     A4 08 90 AD |  if_e	jmp	#LR__0392
054e4     94 01 00 FF 
054e8     6A 94 06 F6 | 	mov	arg02, ##@LR__5713
054ec     53 93 02 F6 | 	mov	arg01, local01
054f0     0C F5 B1 FD | 	call	#__system___string_cmp
054f4     00 7A 0E F2 | 	cmp	result1, #0 wz
054f8     94 08 90 AD |  if_e	jmp	#LR__0393
054fc     94 01 00 FF 
05500     6F 94 06 F6 | 	mov	arg02, ##@LR__5714
05504     53 93 02 F6 | 	mov	arg01, local01
05508     F4 F4 B1 FD | 	call	#__system___string_cmp
0550c     00 7A 0E F2 | 	cmp	result1, #0 wz
05510     84 08 90 AD |  if_e	jmp	#LR__0394
05514     94 01 00 FF 
05518     75 94 06 F6 | 	mov	arg02, ##@LR__5715
0551c     53 93 02 F6 | 	mov	arg01, local01
05520     DC F4 B1 FD | 	call	#__system___string_cmp
05524     00 7A 0E F2 | 	cmp	result1, #0 wz
05528     74 08 90 AD |  if_e	jmp	#LR__0395
0552c     94 01 00 FF 
05530     79 94 06 F6 | 	mov	arg02, ##@LR__5716
05534     53 93 02 F6 | 	mov	arg01, local01
05538     C4 F4 B1 FD | 	call	#__system___string_cmp
0553c     00 7A 0E F2 | 	cmp	result1, #0 wz
05540     64 08 90 AD |  if_e	jmp	#LR__0396
05544     94 01 00 FF 
05548     82 94 06 F6 | 	mov	arg02, ##@LR__5717
0554c     53 93 02 F6 | 	mov	arg01, local01
05550     AC F4 B1 FD | 	call	#__system___string_cmp
05554     00 7A 0E F2 | 	cmp	result1, #0 wz
05558     54 08 90 AD |  if_e	jmp	#LR__0397
0555c     94 01 00 FF 
05560     88 94 06 F6 | 	mov	arg02, ##@LR__5718
05564     53 93 02 F6 | 	mov	arg01, local01
05568     94 F4 B1 FD | 	call	#__system___string_cmp
0556c     00 7A 0E F2 | 	cmp	result1, #0 wz
05570     44 08 90 AD |  if_e	jmp	#LR__0398
05574     94 01 00 FF 
05578     8E 94 06 F6 | 	mov	arg02, ##@LR__5719
0557c     53 93 02 F6 | 	mov	arg01, local01
05580     7C F4 B1 FD | 	call	#__system___string_cmp
05584     00 7A 0E F2 | 	cmp	result1, #0 wz
05588     34 08 90 AD |  if_e	jmp	#LR__0399
0558c     94 01 00 FF 
05590     97 94 06 F6 | 	mov	arg02, ##@LR__5720
05594     53 93 02 F6 | 	mov	arg01, local01
05598     64 F4 B1 FD | 	call	#__system___string_cmp
0559c     00 7A 0E F2 | 	cmp	result1, #0 wz
055a0     24 08 90 AD |  if_e	jmp	#LR__0400
055a4     94 01 00 FF 
055a8     A1 94 06 F6 | 	mov	arg02, ##@LR__5721
055ac     53 93 02 F6 | 	mov	arg01, local01
055b0     4C F4 B1 FD | 	call	#__system___string_cmp
055b4     00 7A 0E F2 | 	cmp	result1, #0 wz
055b8     14 08 90 AD |  if_e	jmp	#LR__0401
055bc     94 01 00 FF 
055c0     AA 94 06 F6 | 	mov	arg02, ##@LR__5722
055c4     53 93 02 F6 | 	mov	arg01, local01
055c8     34 F4 B1 FD | 	call	#__system___string_cmp
055cc     00 7A 0E F2 | 	cmp	result1, #0 wz
055d0     04 08 90 AD |  if_e	jmp	#LR__0402
055d4     94 01 00 FF 
055d8     AF 94 06 F6 | 	mov	arg02, ##@LR__5723
055dc     53 93 02 F6 | 	mov	arg01, local01
055e0     1C F4 B1 FD | 	call	#__system___string_cmp
055e4     00 7A 0E F2 | 	cmp	result1, #0 wz
055e8     F4 07 90 AD |  if_e	jmp	#LR__0403
055ec     94 01 00 FF 
055f0     B2 94 06 F6 | 	mov	arg02, ##@LR__5724
055f4     53 93 02 F6 | 	mov	arg01, local01
055f8     04 F4 B1 FD | 	call	#__system___string_cmp
055fc     00 7A 0E F2 | 	cmp	result1, #0 wz
05600     E4 07 90 AD |  if_e	jmp	#LR__0404
05604     94 01 00 FF 
05608     B7 94 06 F6 | 	mov	arg02, ##@LR__5725
0560c     53 93 02 F6 | 	mov	arg01, local01
05610     EC F3 B1 FD | 	call	#__system___string_cmp
05614     00 7A 0E F2 | 	cmp	result1, #0 wz
05618     D4 07 90 AD |  if_e	jmp	#LR__0405
0561c     94 01 00 FF 
05620     BB 94 06 F6 | 	mov	arg02, ##@LR__5726
05624     53 93 02 F6 | 	mov	arg01, local01
05628     D4 F3 B1 FD | 	call	#__system___string_cmp
0562c     00 7A 0E F2 | 	cmp	result1, #0 wz
05630     C4 07 90 AD |  if_e	jmp	#LR__0406
05634     94 01 00 FF 
05638     C0 94 06 F6 | 	mov	arg02, ##@LR__5727
0563c     53 93 02 F6 | 	mov	arg01, local01
05640     BC F3 B1 FD | 	call	#__system___string_cmp
05644     00 7A 0E F2 | 	cmp	result1, #0 wz
05648     B4 07 90 AD |  if_e	jmp	#LR__0407
0564c     94 01 00 FF 
05650     C4 94 06 F6 | 	mov	arg02, ##@LR__5728
05654     53 93 02 F6 | 	mov	arg01, local01
05658     A4 F3 B1 FD | 	call	#__system___string_cmp
0565c     00 7A 0E F2 | 	cmp	result1, #0 wz
05660     A4 07 90 AD |  if_e	jmp	#LR__0408
05664     94 01 00 FF 
05668     CD 94 06 F6 | 	mov	arg02, ##@LR__5729
0566c     53 93 02 F6 | 	mov	arg01, local01
05670     8C F3 B1 FD | 	call	#__system___string_cmp
05674     00 7A 0E F2 | 	cmp	result1, #0 wz
05678     94 07 90 AD |  if_e	jmp	#LR__0409
0567c     94 01 00 FF 
05680     D2 94 06 F6 | 	mov	arg02, ##@LR__5730
05684     53 93 02 F6 | 	mov	arg01, local01
05688     74 F3 B1 FD | 	call	#__system___string_cmp
0568c     00 7A 0E F2 | 	cmp	result1, #0 wz
05690     84 07 90 AD |  if_e	jmp	#LR__0410
05694     94 01 00 FF 
05698     D8 94 06 F6 | 	mov	arg02, ##@LR__5731
0569c     53 93 02 F6 | 	mov	arg01, local01
056a0     5C F3 B1 FD | 	call	#__system___string_cmp
056a4     00 7A 0E F2 | 	cmp	result1, #0 wz
056a8     74 07 90 AD |  if_e	jmp	#LR__0411
056ac     94 01 00 FF 
056b0     DA 94 06 F6 | 	mov	arg02, ##@LR__5732
056b4     53 93 02 F6 | 	mov	arg01, local01
056b8     44 F3 B1 FD | 	call	#__system___string_cmp
056bc     00 7A 0E F2 | 	cmp	result1, #0 wz
056c0     64 07 90 AD |  if_e	jmp	#LR__0412
056c4     94 01 00 FF 
056c8     DE 94 06 F6 | 	mov	arg02, ##@LR__5733
056cc     53 93 02 F6 | 	mov	arg01, local01
056d0     2C F3 B1 FD | 	call	#__system___string_cmp
056d4     00 7A 0E F2 | 	cmp	result1, #0 wz
056d8     54 07 90 AD |  if_e	jmp	#LR__0413
056dc     94 01 00 FF 
056e0     E2 94 06 F6 | 	mov	arg02, ##@LR__5734
056e4     53 93 02 F6 | 	mov	arg01, local01
056e8     14 F3 B1 FD | 	call	#__system___string_cmp
056ec     00 7A 0E F2 | 	cmp	result1, #0 wz
056f0     44 07 90 AD |  if_e	jmp	#LR__0414
056f4     94 01 00 FF 
056f8     E7 94 06 F6 | 	mov	arg02, ##@LR__5735
056fc     53 93 02 F6 | 	mov	arg01, local01
05700     FC F2 B1 FD | 	call	#__system___string_cmp
05704     00 7A 0E F2 | 	cmp	result1, #0 wz
05708     34 07 90 AD |  if_e	jmp	#LR__0415
0570c     94 01 00 FF 
05710     EF 94 06 F6 | 	mov	arg02, ##@LR__5736
05714     53 93 02 F6 | 	mov	arg01, local01
05718     E4 F2 B1 FD | 	call	#__system___string_cmp
0571c     00 7A 0E F2 | 	cmp	result1, #0 wz
05720     24 07 90 AD |  if_e	jmp	#LR__0416
05724     94 01 00 FF 
05728     F3 94 06 F6 | 	mov	arg02, ##@LR__5737
0572c     53 93 02 F6 | 	mov	arg01, local01
05730     CC F2 B1 FD | 	call	#__system___string_cmp
05734     00 7A 0E F2 | 	cmp	result1, #0 wz
05738     14 07 90 AD |  if_e	jmp	#LR__0417
0573c     94 01 00 FF 
05740     F5 94 06 F6 | 	mov	arg02, ##@LR__5738
05744     53 93 02 F6 | 	mov	arg01, local01
05748     B4 F2 B1 FD | 	call	#__system___string_cmp
0574c     00 7A 0E F2 | 	cmp	result1, #0 wz
05750     04 07 90 AD |  if_e	jmp	#LR__0418
05754     94 01 00 FF 
05758     FD 94 06 F6 | 	mov	arg02, ##@LR__5739
0575c     53 93 02 F6 | 	mov	arg01, local01
05760     9C F2 B1 FD | 	call	#__system___string_cmp
05764     00 7A 0E F2 | 	cmp	result1, #0 wz
05768     F4 06 90 AD |  if_e	jmp	#LR__0419
0576c     94 01 00 FF 
05770     0C 95 06 F6 | 	mov	arg02, ##@LR__5740
05774     53 93 02 F6 | 	mov	arg01, local01
05778     84 F2 B1 FD | 	call	#__system___string_cmp
0577c     00 7A 0E F2 | 	cmp	result1, #0 wz
05780     E4 06 90 AD |  if_e	jmp	#LR__0420
05784     94 01 00 FF 
05788     10 95 06 F6 | 	mov	arg02, ##@LR__5741
0578c     53 93 02 F6 | 	mov	arg01, local01
05790     6C F2 B1 FD | 	call	#__system___string_cmp
05794     00 7A 0E F2 | 	cmp	result1, #0 wz
05798     D4 06 90 AD |  if_e	jmp	#LR__0421
0579c     94 01 00 FF 
057a0     17 95 06 F6 | 	mov	arg02, ##@LR__5742
057a4     53 93 02 F6 | 	mov	arg01, local01
057a8     54 F2 B1 FD | 	call	#__system___string_cmp
057ac     00 7A 0E F2 | 	cmp	result1, #0 wz
057b0     C4 06 90 AD |  if_e	jmp	#LR__0422
057b4     94 01 00 FF 
057b8     1B 95 06 F6 | 	mov	arg02, ##@LR__5743
057bc     53 93 02 F6 | 	mov	arg01, local01
057c0     3C F2 B1 FD | 	call	#__system___string_cmp
057c4     00 7A 0E F2 | 	cmp	result1, #0 wz
057c8     B4 06 90 AD |  if_e	jmp	#LR__0423
057cc     94 01 00 FF 
057d0     1E 95 06 F6 | 	mov	arg02, ##@LR__5744
057d4     53 93 02 F6 | 	mov	arg01, local01
057d8     24 F2 B1 FD | 	call	#__system___string_cmp
057dc     00 7A 0E F2 | 	cmp	result1, #0 wz
057e0     A4 06 90 AD |  if_e	jmp	#LR__0424
057e4     94 01 00 FF 
057e8     23 95 06 F6 | 	mov	arg02, ##@LR__5745
057ec     53 93 02 F6 | 	mov	arg01, local01
057f0     0C F2 B1 FD | 	call	#__system___string_cmp
057f4     00 7A 0E F2 | 	cmp	result1, #0 wz
057f8     94 06 90 AD |  if_e	jmp	#LR__0425
057fc     94 01 00 FF 
05800     26 95 06 F6 | 	mov	arg02, ##@LR__5746
05804     53 93 02 F6 | 	mov	arg01, local01
05808     F4 F1 B1 FD | 	call	#__system___string_cmp
0580c     00 7A 0E F2 | 	cmp	result1, #0 wz
05810     84 06 90 AD |  if_e	jmp	#LR__0426
05814     94 01 00 FF 
05818     2F 95 06 F6 | 	mov	arg02, ##@LR__5747
0581c     53 93 02 F6 | 	mov	arg01, local01
05820     DC F1 B1 FD | 	call	#__system___string_cmp
05824     00 7A 0E F2 | 	cmp	result1, #0 wz
05828     74 06 90 AD |  if_e	jmp	#LR__0427
0582c     94 01 00 FF 
05830     33 95 06 F6 | 	mov	arg02, ##@LR__5748
05834     53 93 02 F6 | 	mov	arg01, local01
05838     C4 F1 B1 FD | 	call	#__system___string_cmp
0583c     00 7A 0E F2 | 	cmp	result1, #0 wz
05840     64 06 90 AD |  if_e	jmp	#LR__0428
05844     94 01 00 FF 
05848     3C 95 06 F6 | 	mov	arg02, ##@LR__5749
0584c     53 93 02 F6 | 	mov	arg01, local01
05850     AC F1 B1 FD | 	call	#__system___string_cmp
05854     00 7A 0E F2 | 	cmp	result1, #0 wz
05858     54 06 90 AD |  if_e	jmp	#LR__0429
0585c     94 01 00 FF 
05860     40 95 06 F6 | 	mov	arg02, ##@LR__5750
05864     53 93 02 F6 | 	mov	arg01, local01
05868     94 F1 B1 FD | 	call	#__system___string_cmp
0586c     00 7A 0E F2 | 	cmp	result1, #0 wz
05870     44 06 90 AD |  if_e	jmp	#LR__0430
05874     94 01 00 FF 
05878     49 95 06 F6 | 	mov	arg02, ##@LR__5751
0587c     53 93 02 F6 | 	mov	arg01, local01
05880     7C F1 B1 FD | 	call	#__system___string_cmp
05884     00 7A 0E F2 | 	cmp	result1, #0 wz
05888     34 06 90 AD |  if_e	jmp	#LR__0431
0588c     94 01 00 FF 
05890     4D 95 06 F6 | 	mov	arg02, ##@LR__5752
05894     53 93 02 F6 | 	mov	arg01, local01
05898     64 F1 B1 FD | 	call	#__system___string_cmp
0589c     00 7A 0E F2 | 	cmp	result1, #0 wz
058a0     24 06 90 AD |  if_e	jmp	#LR__0432
058a4     94 01 00 FF 
058a8     54 95 06 F6 | 	mov	arg02, ##@LR__5753
058ac     53 93 02 F6 | 	mov	arg01, local01
058b0     4C F1 B1 FD | 	call	#__system___string_cmp
058b4     00 7A 0E F2 | 	cmp	result1, #0 wz
058b8     14 06 90 AD |  if_e	jmp	#LR__0433
058bc     94 01 00 FF 
058c0     58 95 06 F6 | 	mov	arg02, ##@LR__5754
058c4     53 93 02 F6 | 	mov	arg01, local01
058c8     34 F1 B1 FD | 	call	#__system___string_cmp
058cc     00 7A 0E F2 | 	cmp	result1, #0 wz
058d0     04 06 90 AD |  if_e	jmp	#LR__0434
058d4     94 01 00 FF 
058d8     5F 95 06 F6 | 	mov	arg02, ##@LR__5755
058dc     53 93 02 F6 | 	mov	arg01, local01
058e0     1C F1 B1 FD | 	call	#__system___string_cmp
058e4     00 7A 0E F2 | 	cmp	result1, #0 wz
058e8     F4 05 90 AD |  if_e	jmp	#LR__0435
058ec     94 01 00 FF 
058f0     63 95 06 F6 | 	mov	arg02, ##@LR__5756
058f4     53 93 02 F6 | 	mov	arg01, local01
058f8     04 F1 B1 FD | 	call	#__system___string_cmp
058fc     00 7A 0E F2 | 	cmp	result1, #0 wz
05900     E4 05 90 AD |  if_e	jmp	#LR__0436
05904     94 01 00 FF 
05908     6A 95 06 F6 | 	mov	arg02, ##@LR__5757
0590c     53 93 02 F6 | 	mov	arg01, local01
05910     EC F0 B1 FD | 	call	#__system___string_cmp
05914     00 7A 0E F2 | 	cmp	result1, #0 wz
05918     D4 05 90 AD |  if_e	jmp	#LR__0437
0591c     94 01 00 FF 
05920     6E 95 06 F6 | 	mov	arg02, ##@LR__5758
05924     53 93 02 F6 | 	mov	arg01, local01
05928     D4 F0 B1 FD | 	call	#__system___string_cmp
0592c     00 7A 0E F2 | 	cmp	result1, #0 wz
05930     C4 05 90 AD |  if_e	jmp	#LR__0438
05934     94 01 00 FF 
05938     79 95 06 F6 | 	mov	arg02, ##@LR__5759
0593c     53 93 02 F6 | 	mov	arg01, local01
05940     BC F0 B1 FD | 	call	#__system___string_cmp
05944     00 7A 0E F2 | 	cmp	result1, #0 wz
05948     B4 05 90 AD |  if_e	jmp	#LR__0439
0594c     94 01 00 FF 
05950     7D 95 06 F6 | 	mov	arg02, ##@LR__5760
05954     53 93 02 F6 | 	mov	arg01, local01
05958     A4 F0 B1 FD | 	call	#__system___string_cmp
0595c     00 7A 0E F2 | 	cmp	result1, #0 wz
05960     A4 05 90 AD |  if_e	jmp	#LR__0440
05964     94 01 00 FF 
05968     84 95 06 F6 | 	mov	arg02, ##@LR__5761
0596c     53 93 02 F6 | 	mov	arg01, local01
05970     8C F0 B1 FD | 	call	#__system___string_cmp
05974     00 7A 0E F2 | 	cmp	result1, #0 wz
05978     94 05 90 AD |  if_e	jmp	#LR__0441
0597c     94 01 00 FF 
05980     88 95 06 F6 | 	mov	arg02, ##@LR__5762
05984     53 93 02 F6 | 	mov	arg01, local01
05988     74 F0 B1 FD | 	call	#__system___string_cmp
0598c     00 7A 0E F2 | 	cmp	result1, #0 wz
05990     84 05 90 AD |  if_e	jmp	#LR__0442
05994     94 01 00 FF 
05998     90 95 06 F6 | 	mov	arg02, ##@LR__5763
0599c     53 93 02 F6 | 	mov	arg01, local01
059a0     5C F0 B1 FD | 	call	#__system___string_cmp
059a4     00 7A 0E F2 | 	cmp	result1, #0 wz
059a8     74 05 90 AD |  if_e	jmp	#LR__0443
059ac     94 01 00 FF 
059b0     94 95 06 F6 | 	mov	arg02, ##@LR__5764
059b4     53 93 02 F6 | 	mov	arg01, local01
059b8     44 F0 B1 FD | 	call	#__system___string_cmp
059bc     00 7A 0E F2 | 	cmp	result1, #0 wz
059c0     64 05 90 AD |  if_e	jmp	#LR__0444
059c4     94 01 00 FF 
059c8     9B 95 06 F6 | 	mov	arg02, ##@LR__5765
059cc     53 93 02 F6 | 	mov	arg01, local01
059d0     2C F0 B1 FD | 	call	#__system___string_cmp
059d4     00 7A 0E F2 | 	cmp	result1, #0 wz
059d8     54 05 90 AD |  if_e	jmp	#LR__0445
059dc     94 01 00 FF 
059e0     A2 95 06 F6 | 	mov	arg02, ##@LR__5766
059e4     53 93 02 F6 | 	mov	arg01, local01
059e8     14 F0 B1 FD | 	call	#__system___string_cmp
059ec     00 7A 0E F2 | 	cmp	result1, #0 wz
059f0     44 05 90 AD |  if_e	jmp	#LR__0446
059f4     94 01 00 FF 
059f8     A6 95 06 F6 | 	mov	arg02, ##@LR__5767
059fc     53 93 02 F6 | 	mov	arg01, local01
05a00     FC EF B1 FD | 	call	#__system___string_cmp
05a04     00 7A 0E F2 | 	cmp	result1, #0 wz
05a08     34 05 90 AD |  if_e	jmp	#LR__0447
05a0c     94 01 00 FF 
05a10     AC 95 06 F6 | 	mov	arg02, ##@LR__5768
05a14     53 93 02 F6 | 	mov	arg01, local01
05a18     E4 EF B1 FD | 	call	#__system___string_cmp
05a1c     00 7A 0E F2 | 	cmp	result1, #0 wz
05a20     24 05 90 AD |  if_e	jmp	#LR__0448
05a24     94 01 00 FF 
05a28     B0 95 06 F6 | 	mov	arg02, ##@LR__5769
05a2c     53 93 02 F6 | 	mov	arg01, local01
05a30     CC EF B1 FD | 	call	#__system___string_cmp
05a34     00 7A 0E F2 | 	cmp	result1, #0 wz
05a38     14 05 90 AD |  if_e	jmp	#LR__0449
05a3c     94 01 00 FF 
05a40     B7 95 06 F6 | 	mov	arg02, ##@LR__5770
05a44     53 93 02 F6 | 	mov	arg01, local01
05a48     B4 EF B1 FD | 	call	#__system___string_cmp
05a4c     00 7A 0E F2 | 	cmp	result1, #0 wz
05a50     04 05 90 AD |  if_e	jmp	#LR__0450
05a54     94 01 00 FF 
05a58     BC 95 06 F6 | 	mov	arg02, ##@LR__5771
05a5c     53 93 02 F6 | 	mov	arg01, local01
05a60     9C EF B1 FD | 	call	#__system___string_cmp
05a64     00 7A 0E F2 | 	cmp	result1, #0 wz
05a68     F4 04 90 AD |  if_e	jmp	#LR__0451
05a6c     94 01 00 FF 
05a70     C1 95 06 F6 | 	mov	arg02, ##@LR__5772
05a74     53 93 02 F6 | 	mov	arg01, local01
05a78     84 EF B1 FD | 	call	#__system___string_cmp
05a7c     00 7A 0E F2 | 	cmp	result1, #0 wz
05a80     E4 04 90 AD |  if_e	jmp	#LR__0452
05a84     94 01 00 FF 
05a88     C8 95 06 F6 | 	mov	arg02, ##@LR__5773
05a8c     53 93 02 F6 | 	mov	arg01, local01
05a90     6C EF B1 FD | 	call	#__system___string_cmp
05a94     00 7A 0E F2 | 	cmp	result1, #0 wz
05a98     D4 04 90 AD |  if_e	jmp	#LR__0453
05a9c     94 01 00 FF 
05aa0     CB 95 06 F6 | 	mov	arg02, ##@LR__5774
05aa4     53 93 02 F6 | 	mov	arg01, local01
05aa8     54 EF B1 FD | 	call	#__system___string_cmp
05aac     00 7A 0E F2 | 	cmp	result1, #0 wz
05ab0     C4 04 90 AD |  if_e	jmp	#LR__0454
05ab4     94 01 00 FF 
05ab8     D5 95 06 F6 | 	mov	arg02, ##@LR__5775
05abc     53 93 02 F6 | 	mov	arg01, local01
05ac0     3C EF B1 FD | 	call	#__system___string_cmp
05ac4     00 7A 0E F2 | 	cmp	result1, #0 wz
05ac8     B4 04 90 AD |  if_e	jmp	#LR__0455
05acc     94 01 00 FF 
05ad0     D9 95 06 F6 | 	mov	arg02, ##@LR__5776
05ad4     53 93 02 F6 | 	mov	arg01, local01
05ad8     24 EF B1 FD | 	call	#__system___string_cmp
05adc     00 7A 0E F2 | 	cmp	result1, #0 wz
05ae0     A4 04 90 AD |  if_e	jmp	#LR__0456
05ae4     94 01 00 FF 
05ae8     E1 95 06 F6 | 	mov	arg02, ##@LR__5777
05aec     53 93 02 F6 | 	mov	arg01, local01
05af0     0C EF B1 FD | 	call	#__system___string_cmp
05af4     00 7A 0E F2 | 	cmp	result1, #0 wz
05af8     94 04 90 AD |  if_e	jmp	#LR__0457
05afc     94 01 00 FF 
05b00     E5 95 06 F6 | 	mov	arg02, ##@LR__5778
05b04     53 93 02 F6 | 	mov	arg01, local01
05b08     F4 EE B1 FD | 	call	#__system___string_cmp
05b0c     00 7A 0E F2 | 	cmp	result1, #0 wz
05b10     84 04 90 AD |  if_e	jmp	#LR__0458
05b14     94 01 00 FF 
05b18     EB 95 06 F6 | 	mov	arg02, ##@LR__5779
05b1c     53 93 02 F6 | 	mov	arg01, local01
05b20     DC EE B1 FD | 	call	#__system___string_cmp
05b24     00 7A 0E F2 | 	cmp	result1, #0 wz
05b28     74 04 90 AD |  if_e	jmp	#LR__0459
05b2c     94 01 00 FF 
05b30     F1 95 06 F6 | 	mov	arg02, ##@LR__5780
05b34     53 93 02 F6 | 	mov	arg01, local01
05b38     C4 EE B1 FD | 	call	#__system___string_cmp
05b3c     00 7A 0E F2 | 	cmp	result1, #0 wz
05b40     64 04 90 AD |  if_e	jmp	#LR__0460
05b44     68 04 90 FD | 	jmp	#LR__0461
05b48                 | LR__0320
05b48     5C 7A 06 F6 | 	mov	result1, #92
05b4c     64 04 90 FD | 	jmp	#LR__0462
05b50                 | LR__0321
05b50     5C 7A 06 F6 | 	mov	result1, #92
05b54     5C 04 90 FD | 	jmp	#LR__0462
05b58                 | LR__0322
05b58     B9 7A 06 F6 | 	mov	result1, #185
05b5c     54 04 90 FD | 	jmp	#LR__0462
05b60                 | LR__0323
05b60     47 7A 06 F6 | 	mov	result1, #71
05b64     4C 04 90 FD | 	jmp	#LR__0462
05b68                 | LR__0324
05b68     59 7A 06 F6 | 	mov	result1, #89
05b6c     44 04 90 FD | 	jmp	#LR__0462
05b70                 | LR__0325
05b70     59 7A 06 F6 | 	mov	result1, #89
05b74     3C 04 90 FD | 	jmp	#LR__0462
05b78                 | LR__0326
05b78     C3 7A 06 F6 | 	mov	result1, #195
05b7c     34 04 90 FD | 	jmp	#LR__0462
05b80                 | LR__0327
05b80     AE 7A 06 F6 | 	mov	result1, #174
05b84     2C 04 90 FD | 	jmp	#LR__0462
05b88                 | LR__0328
05b88     AE 7A 06 F6 | 	mov	result1, #174
05b8c     24 04 90 FD | 	jmp	#LR__0462
05b90                 | LR__0329
05b90     B1 7A 06 F6 | 	mov	result1, #177
05b94     1C 04 90 FD | 	jmp	#LR__0462
05b98                 | LR__0330
05b98     B1 7A 06 F6 | 	mov	result1, #177
05b9c     14 04 90 FD | 	jmp	#LR__0462
05ba0                 | LR__0331
05ba0     AF 7A 06 F6 | 	mov	result1, #175
05ba4     0C 04 90 FD | 	jmp	#LR__0462
05ba8                 | LR__0332
05ba8     AF 7A 06 F6 | 	mov	result1, #175
05bac     04 04 90 FD | 	jmp	#LR__0462
05bb0                 | LR__0333
05bb0     B0 7A 06 F6 | 	mov	result1, #176
05bb4     FC 03 90 FD | 	jmp	#LR__0462
05bb8                 | LR__0334
05bb8     B0 7A 06 F6 | 	mov	result1, #176
05bbc     F4 03 90 FD | 	jmp	#LR__0462
05bc0                 | LR__0335
05bc0     45 7A 06 F6 | 	mov	result1, #69
05bc4     EC 03 90 FD | 	jmp	#LR__0462
05bc8                 | LR__0336
05bc8     45 7A 06 F6 | 	mov	result1, #69
05bcc     E4 03 90 FD | 	jmp	#LR__0462
05bd0                 | LR__0337
05bd0     69 7A 06 F6 | 	mov	result1, #105
05bd4     DC 03 90 FD | 	jmp	#LR__0462
05bd8                 | LR__0338
05bd8     B4 7A 06 F6 | 	mov	result1, #180
05bdc     D4 03 90 FD | 	jmp	#LR__0462
05be0                 | LR__0339
05be0     40 7A 06 F6 | 	mov	result1, #64
05be4     CC 03 90 FD | 	jmp	#LR__0462
05be8                 | LR__0340
05be8     CF 7A 06 F6 | 	mov	result1, #207
05bec     C4 03 90 FD | 	jmp	#LR__0462
05bf0                 | LR__0341
05bf0     49 7A 06 F6 | 	mov	result1, #73
05bf4     BC 03 90 FD | 	jmp	#LR__0462
05bf8                 | LR__0342
05bf8     49 7A 06 F6 | 	mov	result1, #73
05bfc     B4 03 90 FD | 	jmp	#LR__0462
05c00                 | LR__0343
05c00     C4 7A 06 F6 | 	mov	result1, #196
05c04     AC 03 90 FD | 	jmp	#LR__0462
05c08                 | LR__0344
05c08     68 7A 06 F6 | 	mov	result1, #104
05c0c     A4 03 90 FD | 	jmp	#LR__0462
05c10                 | LR__0345
05c10     B7 7A 06 F6 | 	mov	result1, #183
05c14     9C 03 90 FD | 	jmp	#LR__0462
05c18                 | LR__0346
05c18     D9 7A 06 F6 | 	mov	result1, #217
05c1c     94 03 90 FD | 	jmp	#LR__0462
05c20                 | LR__0347
05c20     73 7A 06 F6 | 	mov	result1, #115
05c24     8C 03 90 FD | 	jmp	#LR__0462
05c28                 | LR__0348
05c28     74 7A 06 F6 | 	mov	result1, #116
05c2c     84 03 90 FD | 	jmp	#LR__0462
05c30                 | LR__0349
05c30     6C 7A 06 F6 | 	mov	result1, #108
05c34     7C 03 90 FD | 	jmp	#LR__0462
05c38                 | LR__0350
05c38     6C 7A 06 F6 | 	mov	result1, #108
05c3c     74 03 90 FD | 	jmp	#LR__0462
05c40                 | LR__0351
05c40     89 7A 06 F6 | 	mov	result1, #137
05c44     6C 03 90 FD | 	jmp	#LR__0462
05c48                 | LR__0352
05c48     C2 7A 06 F6 | 	mov	result1, #194
05c4c     64 03 90 FD | 	jmp	#LR__0462
05c50                 | LR__0353
05c50     72 7A 06 F6 | 	mov	result1, #114
05c54     5C 03 90 FD | 	jmp	#LR__0462
05c58                 | LR__0354
05c58     5D 7A 06 F6 | 	mov	result1, #93
05c5c     54 03 90 FD | 	jmp	#LR__0462
05c60                 | LR__0355
05c60     96 7A 06 F6 | 	mov	result1, #150
05c64     4C 03 90 FD | 	jmp	#LR__0462
05c68                 | LR__0356
05c68     43 7A 06 F6 | 	mov	result1, #67
05c6c     44 03 90 FD | 	jmp	#LR__0462
05c70                 | LR__0357
05c70     43 7A 06 F6 | 	mov	result1, #67
05c74     3C 03 90 FD | 	jmp	#LR__0462
05c78                 | LR__0358
05c78     43 7A 06 F6 | 	mov	result1, #67
05c7c     34 03 90 FD | 	jmp	#LR__0462
05c80                 | LR__0359
05c80     5A 7A 06 F6 | 	mov	result1, #90
05c84     2C 03 90 FD | 	jmp	#LR__0462
05c88                 | LR__0360
05c88     AB 7A 06 F6 | 	mov	result1, #171
05c8c     24 03 90 FD | 	jmp	#LR__0462
05c90                 | LR__0361
05c90     BD 7A 06 F6 | 	mov	result1, #189
05c94     1C 03 90 FD | 	jmp	#LR__0462
05c98                 | LR__0362
05c98     BD 7A 06 F6 | 	mov	result1, #189
05c9c     14 03 90 FD | 	jmp	#LR__0462
05ca0                 | LR__0363
05ca0     46 7A 06 F6 | 	mov	result1, #70
05ca4     0C 03 90 FD | 	jmp	#LR__0462
05ca8                 | LR__0364
05ca8     46 7A 06 F6 | 	mov	result1, #70
05cac     04 03 90 FD | 	jmp	#LR__0462
05cb0                 | LR__0365
05cb0     71 7A 06 F6 | 	mov	result1, #113
05cb4     FC 02 90 FD | 	jmp	#LR__0462
05cb8                 | LR__0366
05cb8     71 7A 06 F6 | 	mov	result1, #113
05cbc     F4 02 90 FD | 	jmp	#LR__0462
05cc0                 | LR__0367
05cc0     60 7A 06 F6 | 	mov	result1, #96
05cc4     EC 02 90 FD | 	jmp	#LR__0462
05cc8                 | LR__0368
05cc8     4A 7A 06 F6 | 	mov	result1, #74
05ccc     E4 02 90 FD | 	jmp	#LR__0462
05cd0                 | LR__0369
05cd0     4A 7A 06 F6 | 	mov	result1, #74
05cd4     DC 02 90 FD | 	jmp	#LR__0462
05cd8                 | LR__0370
05cd8     48 7A 06 F6 | 	mov	result1, #72
05cdc     D4 02 90 FD | 	jmp	#LR__0462
05ce0                 | LR__0371
05ce0     48 7A 06 F6 | 	mov	result1, #72
05ce4     CC 02 90 FD | 	jmp	#LR__0462
05ce8                 | LR__0372
05ce8     BB 7A 06 F6 | 	mov	result1, #187
05cec     C4 02 90 FD | 	jmp	#LR__0462
05cf0                 | LR__0373
05cf0     A9 7A 06 F6 | 	mov	result1, #169
05cf4     BC 02 90 FD | 	jmp	#LR__0462
05cf8                 | LR__0374
05cf8     4E 7A 06 F6 | 	mov	result1, #78
05cfc     B4 02 90 FD | 	jmp	#LR__0462
05d00                 | LR__0375
05d00     4E 7A 06 F6 | 	mov	result1, #78
05d04     AC 02 90 FD | 	jmp	#LR__0462
05d08                 | LR__0376
05d08     58 7A 06 F6 | 	mov	result1, #88
05d0c     A4 02 90 FD | 	jmp	#LR__0462
05d10                 | LR__0377
05d10     5F 7A 06 F6 | 	mov	result1, #95
05d14     9C 02 90 FD | 	jmp	#LR__0462
05d18                 | LR__0378
05d18     5F 7A 06 F6 | 	mov	result1, #95
05d1c     94 02 90 FD | 	jmp	#LR__0462
05d20                 | LR__0379
05d20     B5 7A 06 F6 | 	mov	result1, #181
05d24     8C 02 90 FD | 	jmp	#LR__0462
05d28                 | LR__0380
05d28     4C 7A 06 F6 | 	mov	result1, #76
05d2c     84 02 90 FD | 	jmp	#LR__0462
05d30                 | LR__0381
05d30     4C 7A 06 F6 | 	mov	result1, #76
05d34     7C 02 90 FD | 	jmp	#LR__0462
05d38                 | LR__0382
05d38     52 7A 06 F6 | 	mov	result1, #82
05d3c     74 02 90 FD | 	jmp	#LR__0462
05d40                 | LR__0383
05d40     52 7A 06 F6 | 	mov	result1, #82
05d44     6C 02 90 FD | 	jmp	#LR__0462
05d48                 | LR__0384
05d48     97 7A 06 F6 | 	mov	result1, #151
05d4c     64 02 90 FD | 	jmp	#LR__0462
05d50                 | LR__0385
05d50     C6 7A 06 F6 | 	mov	result1, #198
05d54     5C 02 90 FD | 	jmp	#LR__0462
05d58                 | LR__0386
05d58     61 7A 06 F6 | 	mov	result1, #97
05d5c     54 02 90 FD | 	jmp	#LR__0462
05d60                 | LR__0387
05d60     61 7A 06 F6 | 	mov	result1, #97
05d64     4C 02 90 FD | 	jmp	#LR__0462
05d68                 | LR__0388
05d68     63 7A 06 F6 | 	mov	result1, #99
05d6c     44 02 90 FD | 	jmp	#LR__0462
05d70                 | LR__0389
05d70     41 7A 06 F6 | 	mov	result1, #65
05d74     3C 02 90 FD | 	jmp	#LR__0462
05d78                 | LR__0390
05d78     4B 7A 06 F6 | 	mov	result1, #75
05d7c     34 02 90 FD | 	jmp	#LR__0462
05d80                 | LR__0391
05d80     4B 7A 06 F6 | 	mov	result1, #75
05d84     2C 02 90 FD | 	jmp	#LR__0462
05d88                 | LR__0392
05d88     C1 7A 06 F6 | 	mov	result1, #193
05d8c     24 02 90 FD | 	jmp	#LR__0462
05d90                 | LR__0393
05d90     B3 7A 06 F6 | 	mov	result1, #179
05d94     1C 02 90 FD | 	jmp	#LR__0462
05d98                 | LR__0394
05d98     5E 7A 06 F6 | 	mov	result1, #94
05d9c     14 02 90 FD | 	jmp	#LR__0462
05da0                 | LR__0395
05da0     5E 7A 06 F6 | 	mov	result1, #94
05da4     0C 02 90 FD | 	jmp	#LR__0462
05da8                 | LR__0396
05da8     7C 7A 06 F6 | 	mov	result1, #124
05dac     04 02 90 FD | 	jmp	#LR__0462
05db0                 | LR__0397
05db0     7E 7A 06 F6 | 	mov	result1, #126
05db4     FC 01 90 FD | 	jmp	#LR__0462
05db8                 | LR__0398
05db8     7D 7A 06 F6 | 	mov	result1, #125
05dbc     F4 01 90 FD | 	jmp	#LR__0462
05dc0                 | LR__0399
05dc0     7F 7A 06 F6 | 	mov	result1, #127
05dc4     EC 01 90 FD | 	jmp	#LR__0462
05dc8                 | LR__0400
05dc8     80 7A 06 F6 | 	mov	result1, #128
05dcc     E4 01 90 FD | 	jmp	#LR__0462
05dd0                 | LR__0401
05dd0     55 7A 06 F6 | 	mov	result1, #85
05dd4     DC 01 90 FD | 	jmp	#LR__0462
05dd8                 | LR__0402
05dd8     75 7A 06 F6 | 	mov	result1, #117
05ddc     D4 01 90 FD | 	jmp	#LR__0462
05de0                 | LR__0403
05de0     75 7A 06 F6 | 	mov	result1, #117
05de4     CC 01 90 FD | 	jmp	#LR__0462
05de8                 | LR__0404
05de8     42 7A 06 F6 | 	mov	result1, #66
05dec     C4 01 90 FD | 	jmp	#LR__0462
05df0                 | LR__0405
05df0     42 7A 06 F6 | 	mov	result1, #66
05df4     BC 01 90 FD | 	jmp	#LR__0462
05df8                 | LR__0406
05df8     95 7A 06 F6 | 	mov	result1, #149
05dfc     B4 01 90 FD | 	jmp	#LR__0462
05e00                 | LR__0407
05e00     AC 7A 06 F6 | 	mov	result1, #172
05e04     AC 01 90 FD | 	jmp	#LR__0462
05e08                 | LR__0408
05e08     81 7A 06 F6 | 	mov	result1, #129
05e0c     A4 01 90 FD | 	jmp	#LR__0462
05e10                 | LR__0409
05e10     81 7A 06 F6 | 	mov	result1, #129
05e14     9C 01 90 FD | 	jmp	#LR__0462
05e18                 | LR__0410
05e18     44 7A 06 F6 | 	mov	result1, #68
05e1c     94 01 90 FD | 	jmp	#LR__0462
05e20                 | LR__0411
05e20     44 7A 06 F6 | 	mov	result1, #68
05e24     8C 01 90 FD | 	jmp	#LR__0462
05e28                 | LR__0412
05e28     BC 7A 06 F6 | 	mov	result1, #188
05e2c     84 01 90 FD | 	jmp	#LR__0462
05e30                 | LR__0413
05e30     88 7A 06 F6 | 	mov	result1, #136
05e34     7C 01 90 FD | 	jmp	#LR__0462
05e38                 | LR__0414
05e38     B6 7A 06 F6 | 	mov	result1, #182
05e3c     74 01 90 FD | 	jmp	#LR__0462
05e40                 | LR__0415
05e40     92 7A 06 F6 | 	mov	result1, #146
05e44     6C 01 90 FD | 	jmp	#LR__0462
05e48                 | LR__0416
05e48     BE 7A 06 F6 | 	mov	result1, #190
05e4c     64 01 90 FD | 	jmp	#LR__0462
05e50                 | LR__0417
05e50     BE 7A 06 F6 | 	mov	result1, #190
05e54     5C 01 90 FD | 	jmp	#LR__0462
05e58                 | LR__0418
05e58     C7 7A 06 F6 | 	mov	result1, #199
05e5c     54 01 90 FD | 	jmp	#LR__0462
05e60                 | LR__0419
05e60     D4 7A 06 F6 | 	mov	result1, #212
05e64     4C 01 90 FD | 	jmp	#LR__0462
05e68                 | LR__0420
05e68     D4 7A 06 F6 | 	mov	result1, #212
05e6c     44 01 90 FD | 	jmp	#LR__0462
05e70                 | LR__0421
05e70     AA 7A 06 F6 | 	mov	result1, #170
05e74     3C 01 90 FD | 	jmp	#LR__0462
05e78                 | LR__0422
05e78     4D 7A 06 F6 | 	mov	result1, #77
05e7c     34 01 90 FD | 	jmp	#LR__0462
05e80                 | LR__0423
05e80     4D 7A 06 F6 | 	mov	result1, #77
05e84     2C 01 90 FD | 	jmp	#LR__0462
05e88                 | LR__0424
05e88     51 7A 06 F6 | 	mov	result1, #81
05e8c     24 01 90 FD | 	jmp	#LR__0462
05e90                 | LR__0425
05e90     51 7A 06 F6 | 	mov	result1, #81
05e94     1C 01 90 FD | 	jmp	#LR__0462
05e98                 | LR__0426
05e98     D2 7A 06 F6 | 	mov	result1, #210
05e9c     14 01 90 FD | 	jmp	#LR__0462
05ea0                 | LR__0427
05ea0     D2 7A 06 F6 | 	mov	result1, #210
05ea4     0C 01 90 FD | 	jmp	#LR__0462
05ea8                 | LR__0428
05ea8     DA 7A 06 F6 | 	mov	result1, #218
05eac     04 01 90 FD | 	jmp	#LR__0462
05eb0                 | LR__0429
05eb0     DA 7A 06 F6 | 	mov	result1, #218
05eb4     FC 00 90 FD | 	jmp	#LR__0462
05eb8                 | LR__0430
05eb8     8E 7A 06 F6 | 	mov	result1, #142
05ebc     F4 00 90 FD | 	jmp	#LR__0462
05ec0                 | LR__0431
05ec0     8E 7A 06 F6 | 	mov	result1, #142
05ec4     EC 00 90 FD | 	jmp	#LR__0462
05ec8                 | LR__0432
05ec8     90 7A 06 F6 | 	mov	result1, #144
05ecc     E4 00 90 FD | 	jmp	#LR__0462
05ed0                 | LR__0433
05ed0     90 7A 06 F6 | 	mov	result1, #144
05ed4     DC 00 90 FD | 	jmp	#LR__0462
05ed8                 | LR__0434
05ed8     8D 7A 06 F6 | 	mov	result1, #141
05edc     D4 00 90 FD | 	jmp	#LR__0462
05ee0                 | LR__0435
05ee0     8D 7A 06 F6 | 	mov	result1, #141
05ee4     CC 00 90 FD | 	jmp	#LR__0462
05ee8                 | LR__0436
05ee8     8C 7A 06 F6 | 	mov	result1, #140
05eec     C4 00 90 FD | 	jmp	#LR__0462
05ef0                 | LR__0437
05ef0     8C 7A 06 F6 | 	mov	result1, #140
05ef4     BC 00 90 FD | 	jmp	#LR__0462
05ef8                 | LR__0438
05ef8     91 7A 06 F6 | 	mov	result1, #145
05efc     B4 00 90 FD | 	jmp	#LR__0462
05f00                 | LR__0439
05f00     91 7A 06 F6 | 	mov	result1, #145
05f04     AC 00 90 FD | 	jmp	#LR__0462
05f08                 | LR__0440
05f08     8B 7A 06 F6 | 	mov	result1, #139
05f0c     A4 00 90 FD | 	jmp	#LR__0462
05f10                 | LR__0441
05f10     8B 7A 06 F6 | 	mov	result1, #139
05f14     9C 00 90 FD | 	jmp	#LR__0462
05f18                 | LR__0442
05f18     8F 7A 06 F6 | 	mov	result1, #143
05f1c     94 00 90 FD | 	jmp	#LR__0462
05f20                 | LR__0443
05f20     8F 7A 06 F6 | 	mov	result1, #143
05f24     8C 00 90 FD | 	jmp	#LR__0462
05f28                 | LR__0444
05f28     8F 7A 06 F6 | 	mov	result1, #143
05f2c     84 00 90 FD | 	jmp	#LR__0462
05f30                 | LR__0445
05f30     B2 7A 06 F6 | 	mov	result1, #178
05f34     7C 00 90 FD | 	jmp	#LR__0462
05f38                 | LR__0446
05f38     B2 7A 06 F6 | 	mov	result1, #178
05f3c     74 00 90 FD | 	jmp	#LR__0462
05f40                 | LR__0447
05f40     75 7A 06 F6 | 	mov	result1, #117
05f44     6C 00 90 FD | 	jmp	#LR__0462
05f48                 | LR__0448
05f48     75 7A 06 F6 | 	mov	result1, #117
05f4c     64 00 90 FD | 	jmp	#LR__0462
05f50                 | LR__0449
05f50     6D 7A 06 F6 | 	mov	result1, #109
05f54     5C 00 90 FD | 	jmp	#LR__0462
05f58                 | LR__0450
05f58     6D 7A 06 F6 | 	mov	result1, #109
05f5c     54 00 90 FD | 	jmp	#LR__0462
05f60                 | LR__0451
05f60     5B 7A 06 F6 | 	mov	result1, #91
05f64     4C 00 90 FD | 	jmp	#LR__0462
05f68                 | LR__0452
05f68     56 7A 06 F6 | 	mov	result1, #86
05f6c     44 00 90 FD | 	jmp	#LR__0462
05f70                 | LR__0453
05f70     56 7A 06 F6 | 	mov	result1, #86
05f74     3C 00 90 FD | 	jmp	#LR__0462
05f78                 | LR__0454
05f78     70 7A 06 F6 | 	mov	result1, #112
05f7c     34 00 90 FD | 	jmp	#LR__0462
05f80                 | LR__0455
05f80     70 7A 06 F6 | 	mov	result1, #112
05f84     2C 00 90 FD | 	jmp	#LR__0462
05f88                 | LR__0456
05f88     57 7A 06 F6 | 	mov	result1, #87
05f8c     24 00 90 FD | 	jmp	#LR__0462
05f90                 | LR__0457
05f90     57 7A 06 F6 | 	mov	result1, #87
05f94     1C 00 90 FD | 	jmp	#LR__0462
05f98                 | LR__0458
05f98     79 7A 06 F6 | 	mov	result1, #121
05f9c     14 00 90 FD | 	jmp	#LR__0462
05fa0                 | LR__0459
05fa0     77 7A 06 F6 | 	mov	result1, #119
05fa4     0C 00 90 FD | 	jmp	#LR__0462
05fa8                 | LR__0460
05fa8     78 7A 06 F6 | 	mov	result1, #120
05fac     04 00 90 FD | 	jmp	#LR__0462
05fb0                 | LR__0461
05fb0     00 7A 06 F6 | 	mov	result1, #0
05fb4                 | LR__0462
05fb4     E7 F0 03 F6 | 	mov	ptra, fp
05fb8     F2 00 A0 FD | 	call	#popregs_
05fbc                 | _iscommand_ret
05fbc     2D 00 64 FD | 	ret
05fc0                 | 
05fc0                 | ' 
05fc0                 | ' ' Check if the part is a function than returns a value, return a token or 0 if not found
05fc0                 | ' 
05fc0                 | ' function isfunction(s as string) as ubyte
05fc0                 | _isfunction
05fc0     01 CA 05 F6 | 	mov	COUNT_, #1
05fc4     E8 00 A0 FD | 	call	#pushregs_
05fc8                 | ' 
05fc8                 | ' select case s
05fc8     49 A7 02 F6 | 	mov	local01, arg01
05fcc     94 01 00 FF 
05fd0     F7 95 06 F6 | 	mov	arg02, ##@LR__5781
05fd4     53 93 02 F6 | 	mov	arg01, local01
05fd8     24 EA B1 FD | 	call	#__system___string_cmp
05fdc     00 7A 0E F2 | 	cmp	result1, #0 wz
05fe0     EC 05 90 AD |  if_e	jmp	#LR__0470
05fe4     94 01 00 FF 
05fe8     FB 95 06 F6 | 	mov	arg02, ##@LR__5782
05fec     53 93 02 F6 | 	mov	arg01, local01
05ff0     0C EA B1 FD | 	call	#__system___string_cmp
05ff4     00 7A 0E F2 | 	cmp	result1, #0 wz
05ff8     DC 05 90 AD |  if_e	jmp	#LR__0471
05ffc     95 01 00 FF 
06000     00 94 06 F6 | 	mov	arg02, ##@LR__5783
06004     53 93 02 F6 | 	mov	arg01, local01
06008     F4 E9 B1 FD | 	call	#__system___string_cmp
0600c     00 7A 0E F2 | 	cmp	result1, #0 wz
06010     CC 05 90 AD |  if_e	jmp	#LR__0472
06014     95 01 00 FF 
06018     04 94 06 F6 | 	mov	arg02, ##@LR__5784
0601c     53 93 02 F6 | 	mov	arg01, local01
06020     DC E9 B1 FD | 	call	#__system___string_cmp
06024     00 7A 0E F2 | 	cmp	result1, #0 wz
06028     BC 05 90 AD |  if_e	jmp	#LR__0473
0602c     95 01 00 FF 
06030     09 94 06 F6 | 	mov	arg02, ##@LR__5785
06034     53 93 02 F6 | 	mov	arg01, local01
06038     C4 E9 B1 FD | 	call	#__system___string_cmp
0603c     00 7A 0E F2 | 	cmp	result1, #0 wz
06040     AC 05 90 AD |  if_e	jmp	#LR__0474
06044     95 01 00 FF 
06048     0D 94 06 F6 | 	mov	arg02, ##@LR__5786
0604c     53 93 02 F6 | 	mov	arg01, local01
06050     AC E9 B1 FD | 	call	#__system___string_cmp
06054     00 7A 0E F2 | 	cmp	result1, #0 wz
06058     9C 05 90 AD |  if_e	jmp	#LR__0475
0605c     95 01 00 FF 
06060     12 94 06 F6 | 	mov	arg02, ##@LR__5787
06064     53 93 02 F6 | 	mov	arg01, local01
06068     94 E9 B1 FD | 	call	#__system___string_cmp
0606c     00 7A 0E F2 | 	cmp	result1, #0 wz
06070     8C 05 90 AD |  if_e	jmp	#LR__0476
06074     95 01 00 FF 
06078     16 94 06 F6 | 	mov	arg02, ##@LR__5788
0607c     53 93 02 F6 | 	mov	arg01, local01
06080     7C E9 B1 FD | 	call	#__system___string_cmp
06084     00 7A 0E F2 | 	cmp	result1, #0 wz
06088     7C 05 90 AD |  if_e	jmp	#LR__0477
0608c     95 01 00 FF 
06090     1B 94 06 F6 | 	mov	arg02, ##@LR__5789
06094     53 93 02 F6 | 	mov	arg01, local01
06098     64 E9 B1 FD | 	call	#__system___string_cmp
0609c     00 7A 0E F2 | 	cmp	result1, #0 wz
060a0     6C 05 90 AD |  if_e	jmp	#LR__0478
060a4     95 01 00 FF 
060a8     20 94 06 F6 | 	mov	arg02, ##@LR__5790
060ac     53 93 02 F6 | 	mov	arg01, local01
060b0     4C E9 B1 FD | 	call	#__system___string_cmp
060b4     00 7A 0E F2 | 	cmp	result1, #0 wz
060b8     5C 05 90 AD |  if_e	jmp	#LR__0479
060bc     95 01 00 FF 
060c0     28 94 06 F6 | 	mov	arg02, ##@LR__5791
060c4     53 93 02 F6 | 	mov	arg01, local01
060c8     34 E9 B1 FD | 	call	#__system___string_cmp
060cc     00 7A 0E F2 | 	cmp	result1, #0 wz
060d0     4C 05 90 AD |  if_e	jmp	#LR__0480
060d4     95 01 00 FF 
060d8     2C 94 06 F6 | 	mov	arg02, ##@LR__5792
060dc     53 93 02 F6 | 	mov	arg01, local01
060e0     1C E9 B1 FD | 	call	#__system___string_cmp
060e4     00 7A 0E F2 | 	cmp	result1, #0 wz
060e8     3C 05 90 AD |  if_e	jmp	#LR__0481
060ec     95 01 00 FF 
060f0     32 94 06 F6 | 	mov	arg02, ##@LR__5793
060f4     53 93 02 F6 | 	mov	arg01, local01
060f8     04 E9 B1 FD | 	call	#__system___string_cmp
060fc     00 7A 0E F2 | 	cmp	result1, #0 wz
06100     2C 05 90 AD |  if_e	jmp	#LR__0482
06104     95 01 00 FF 
06108     3C 94 06 F6 | 	mov	arg02, ##@LR__5794
0610c     53 93 02 F6 | 	mov	arg01, local01
06110     EC E8 B1 FD | 	call	#__system___string_cmp
06114     00 7A 0E F2 | 	cmp	result1, #0 wz
06118     1C 05 90 AD |  if_e	jmp	#LR__0483
0611c     95 01 00 FF 
06120     45 94 06 F6 | 	mov	arg02, ##@LR__5795
06124     53 93 02 F6 | 	mov	arg01, local01
06128     D4 E8 B1 FD | 	call	#__system___string_cmp
0612c     00 7A 0E F2 | 	cmp	result1, #0 wz
06130     0C 05 90 AD |  if_e	jmp	#LR__0484
06134     95 01 00 FF 
06138     4E 94 06 F6 | 	mov	arg02, ##@LR__5796
0613c     53 93 02 F6 | 	mov	arg01, local01
06140     BC E8 B1 FD | 	call	#__system___string_cmp
06144     00 7A 0E F2 | 	cmp	result1, #0 wz
06148     FC 04 90 AD |  if_e	jmp	#LR__0485
0614c     95 01 00 FF 
06150     52 94 06 F6 | 	mov	arg02, ##@LR__5797
06154     53 93 02 F6 | 	mov	arg01, local01
06158     A4 E8 B1 FD | 	call	#__system___string_cmp
0615c     00 7A 0E F2 | 	cmp	result1, #0 wz
06160     EC 04 90 AD |  if_e	jmp	#LR__0486
06164     95 01 00 FF 
06168     56 94 06 F6 | 	mov	arg02, ##@LR__5798
0616c     53 93 02 F6 | 	mov	arg01, local01
06170     8C E8 B1 FD | 	call	#__system___string_cmp
06174     00 7A 0E F2 | 	cmp	result1, #0 wz
06178     DC 04 90 AD |  if_e	jmp	#LR__0487
0617c     95 01 00 FF 
06180     5A 94 06 F6 | 	mov	arg02, ##@LR__5799
06184     53 93 02 F6 | 	mov	arg01, local01
06188     74 E8 B1 FD | 	call	#__system___string_cmp
0618c     00 7A 0E F2 | 	cmp	result1, #0 wz
06190     CC 04 90 AD |  if_e	jmp	#LR__0488
06194     95 01 00 FF 
06198     63 94 06 F6 | 	mov	arg02, ##@LR__5800
0619c     53 93 02 F6 | 	mov	arg01, local01
061a0     5C E8 B1 FD | 	call	#__system___string_cmp
061a4     00 7A 0E F2 | 	cmp	result1, #0 wz
061a8     BC 04 90 AD |  if_e	jmp	#LR__0489
061ac     95 01 00 FF 
061b0     6C 94 06 F6 | 	mov	arg02, ##@LR__5801
061b4     53 93 02 F6 | 	mov	arg01, local01
061b8     44 E8 B1 FD | 	call	#__system___string_cmp
061bc     00 7A 0E F2 | 	cmp	result1, #0 wz
061c0     AC 04 90 AD |  if_e	jmp	#LR__0490
061c4     95 01 00 FF 
061c8     70 94 06 F6 | 	mov	arg02, ##@LR__5802
061cc     53 93 02 F6 | 	mov	arg01, local01
061d0     2C E8 B1 FD | 	call	#__system___string_cmp
061d4     00 7A 0E F2 | 	cmp	result1, #0 wz
061d8     9C 04 90 AD |  if_e	jmp	#LR__0491
061dc     95 01 00 FF 
061e0     7E 94 06 F6 | 	mov	arg02, ##@LR__5803
061e4     53 93 02 F6 | 	mov	arg01, local01
061e8     14 E8 B1 FD | 	call	#__system___string_cmp
061ec     00 7A 0E F2 | 	cmp	result1, #0 wz
061f0     8C 04 90 AD |  if_e	jmp	#LR__0492
061f4     95 01 00 FF 
061f8     8B 94 06 F6 | 	mov	arg02, ##@LR__5804
061fc     53 93 02 F6 | 	mov	arg01, local01
06200     FC E7 B1 FD | 	call	#__system___string_cmp
06204     00 7A 0E F2 | 	cmp	result1, #0 wz
06208     7C 04 90 AD |  if_e	jmp	#LR__0493
0620c     95 01 00 FF 
06210     97 94 06 F6 | 	mov	arg02, ##@LR__5805
06214     53 93 02 F6 | 	mov	arg01, local01
06218     E4 E7 B1 FD | 	call	#__system___string_cmp
0621c     00 7A 0E F2 | 	cmp	result1, #0 wz
06220     6C 04 90 AD |  if_e	jmp	#LR__0494
06224     95 01 00 FF 
06228     9F 94 06 F6 | 	mov	arg02, ##@LR__5806
0622c     53 93 02 F6 | 	mov	arg01, local01
06230     CC E7 B1 FD | 	call	#__system___string_cmp
06234     00 7A 0E F2 | 	cmp	result1, #0 wz
06238     5C 04 90 AD |  if_e	jmp	#LR__0495
0623c     95 01 00 FF 
06240     A3 94 06 F6 | 	mov	arg02, ##@LR__5807
06244     53 93 02 F6 | 	mov	arg01, local01
06248     B4 E7 B1 FD | 	call	#__system___string_cmp
0624c     00 7A 0E F2 | 	cmp	result1, #0 wz
06250     4C 04 90 AD |  if_e	jmp	#LR__0496
06254     95 01 00 FF 
06258     A8 94 06 F6 | 	mov	arg02, ##@LR__5808
0625c     53 93 02 F6 | 	mov	arg01, local01
06260     9C E7 B1 FD | 	call	#__system___string_cmp
06264     00 7A 0E F2 | 	cmp	result1, #0 wz
06268     3C 04 90 AD |  if_e	jmp	#LR__0497
0626c     95 01 00 FF 
06270     AF 94 06 F6 | 	mov	arg02, ##@LR__5809
06274     53 93 02 F6 | 	mov	arg01, local01
06278     84 E7 B1 FD | 	call	#__system___string_cmp
0627c     00 7A 0E F2 | 	cmp	result1, #0 wz
06280     2C 04 90 AD |  if_e	jmp	#LR__0498
06284     95 01 00 FF 
06288     B3 94 06 F6 | 	mov	arg02, ##@LR__5810
0628c     53 93 02 F6 | 	mov	arg01, local01
06290     6C E7 B1 FD | 	call	#__system___string_cmp
06294     00 7A 0E F2 | 	cmp	result1, #0 wz
06298     1C 04 90 AD |  if_e	jmp	#LR__0499
0629c     95 01 00 FF 
062a0     B9 94 06 F6 | 	mov	arg02, ##@LR__5811
062a4     53 93 02 F6 | 	mov	arg01, local01
062a8     54 E7 B1 FD | 	call	#__system___string_cmp
062ac     00 7A 0E F2 | 	cmp	result1, #0 wz
062b0     0C 04 90 AD |  if_e	jmp	#LR__0500
062b4     95 01 00 FF 
062b8     BD 94 06 F6 | 	mov	arg02, ##@LR__5812
062bc     53 93 02 F6 | 	mov	arg01, local01
062c0     3C E7 B1 FD | 	call	#__system___string_cmp
062c4     00 7A 0E F2 | 	cmp	result1, #0 wz
062c8     FC 03 90 AD |  if_e	jmp	#LR__0501
062cc     95 01 00 FF 
062d0     C1 94 06 F6 | 	mov	arg02, ##@LR__5813
062d4     53 93 02 F6 | 	mov	arg01, local01
062d8     24 E7 B1 FD | 	call	#__system___string_cmp
062dc     00 7A 0E F2 | 	cmp	result1, #0 wz
062e0     EC 03 90 AD |  if_e	jmp	#LR__0502
062e4     95 01 00 FF 
062e8     C7 94 06 F6 | 	mov	arg02, ##@LR__5814
062ec     53 93 02 F6 | 	mov	arg01, local01
062f0     0C E7 B1 FD | 	call	#__system___string_cmp
062f4     00 7A 0E F2 | 	cmp	result1, #0 wz
062f8     DC 03 90 AD |  if_e	jmp	#LR__0503
062fc     95 01 00 FF 
06300     CE 94 06 F6 | 	mov	arg02, ##@LR__5815
06304     53 93 02 F6 | 	mov	arg01, local01
06308     F4 E6 B1 FD | 	call	#__system___string_cmp
0630c     00 7A 0E F2 | 	cmp	result1, #0 wz
06310     CC 03 90 AD |  if_e	jmp	#LR__0504
06314     95 01 00 FF 
06318     D4 94 06 F6 | 	mov	arg02, ##@LR__5816
0631c     53 93 02 F6 | 	mov	arg01, local01
06320     DC E6 B1 FD | 	call	#__system___string_cmp
06324     00 7A 0E F2 | 	cmp	result1, #0 wz
06328     BC 03 90 AD |  if_e	jmp	#LR__0505
0632c     95 01 00 FF 
06330     D9 94 06 F6 | 	mov	arg02, ##@LR__5817
06334     53 93 02 F6 | 	mov	arg01, local01
06338     C4 E6 B1 FD | 	call	#__system___string_cmp
0633c     00 7A 0E F2 | 	cmp	result1, #0 wz
06340     AC 03 90 AD |  if_e	jmp	#LR__0506
06344     95 01 00 FF 
06348     E0 94 06 F6 | 	mov	arg02, ##@LR__5818
0634c     53 93 02 F6 | 	mov	arg01, local01
06350     AC E6 B1 FD | 	call	#__system___string_cmp
06354     00 7A 0E F2 | 	cmp	result1, #0 wz
06358     9C 03 90 AD |  if_e	jmp	#LR__0507
0635c     95 01 00 FF 
06360     E7 94 06 F6 | 	mov	arg02, ##@LR__5819
06364     53 93 02 F6 | 	mov	arg01, local01
06368     94 E6 B1 FD | 	call	#__system___string_cmp
0636c     00 7A 0E F2 | 	cmp	result1, #0 wz
06370     8C 03 90 AD |  if_e	jmp	#LR__0508
06374     95 01 00 FF 
06378     EE 94 06 F6 | 	mov	arg02, ##@LR__5820
0637c     53 93 02 F6 | 	mov	arg01, local01
06380     7C E6 B1 FD | 	call	#__system___string_cmp
06384     00 7A 0E F2 | 	cmp	result1, #0 wz
06388     7C 03 90 AD |  if_e	jmp	#LR__0509
0638c     95 01 00 FF 
06390     F5 94 06 F6 | 	mov	arg02, ##@LR__5821
06394     53 93 02 F6 | 	mov	arg01, local01
06398     64 E6 B1 FD | 	call	#__system___string_cmp
0639c     00 7A 0E F2 | 	cmp	result1, #0 wz
063a0     6C 03 90 AD |  if_e	jmp	#LR__0510
063a4     95 01 00 FF 
063a8     FA 94 06 F6 | 	mov	arg02, ##@LR__5822
063ac     53 93 02 F6 | 	mov	arg01, local01
063b0     4C E6 B1 FD | 	call	#__system___string_cmp
063b4     00 7A 0E F2 | 	cmp	result1, #0 wz
063b8     5C 03 90 AD |  if_e	jmp	#LR__0511
063bc     95 01 00 FF 
063c0     FF 94 06 F6 | 	mov	arg02, ##@LR__5823
063c4     53 93 02 F6 | 	mov	arg01, local01
063c8     34 E6 B1 FD | 	call	#__system___string_cmp
063cc     00 7A 0E F2 | 	cmp	result1, #0 wz
063d0     4C 03 90 AD |  if_e	jmp	#LR__0512
063d4     95 01 00 FF 
063d8     04 95 06 F6 | 	mov	arg02, ##@LR__5824
063dc     53 93 02 F6 | 	mov	arg01, local01
063e0     1C E6 B1 FD | 	call	#__system___string_cmp
063e4     00 7A 0E F2 | 	cmp	result1, #0 wz
063e8     3C 03 90 AD |  if_e	jmp	#LR__0513
063ec     95 01 00 FF 
063f0     09 95 06 F6 | 	mov	arg02, ##@LR__5825
063f4     53 93 02 F6 | 	mov	arg01, local01
063f8     04 E6 B1 FD | 	call	#__system___string_cmp
063fc     00 7A 0E F2 | 	cmp	result1, #0 wz
06400     2C 03 90 AD |  if_e	jmp	#LR__0514
06404     95 01 00 FF 
06408     0E 95 06 F6 | 	mov	arg02, ##@LR__5826
0640c     53 93 02 F6 | 	mov	arg01, local01
06410     EC E5 B1 FD | 	call	#__system___string_cmp
06414     00 7A 0E F2 | 	cmp	result1, #0 wz
06418     1C 03 90 AD |  if_e	jmp	#LR__0515
0641c     95 01 00 FF 
06420     14 95 06 F6 | 	mov	arg02, ##@LR__5827
06424     53 93 02 F6 | 	mov	arg01, local01
06428     D4 E5 B1 FD | 	call	#__system___string_cmp
0642c     00 7A 0E F2 | 	cmp	result1, #0 wz
06430     0C 03 90 AD |  if_e	jmp	#LR__0516
06434     95 01 00 FF 
06438     1A 95 06 F6 | 	mov	arg02, ##@LR__5828
0643c     53 93 02 F6 | 	mov	arg01, local01
06440     BC E5 B1 FD | 	call	#__system___string_cmp
06444     00 7A 0E F2 | 	cmp	result1, #0 wz
06448     FC 02 90 AD |  if_e	jmp	#LR__0517
0644c     95 01 00 FF 
06450     20 95 06 F6 | 	mov	arg02, ##@LR__5829
06454     53 93 02 F6 | 	mov	arg01, local01
06458     A4 E5 B1 FD | 	call	#__system___string_cmp
0645c     00 7A 0E F2 | 	cmp	result1, #0 wz
06460     EC 02 90 AD |  if_e	jmp	#LR__0518
06464     95 01 00 FF 
06468     25 95 06 F6 | 	mov	arg02, ##@LR__5830
0646c     53 93 02 F6 | 	mov	arg01, local01
06470     8C E5 B1 FD | 	call	#__system___string_cmp
06474     00 7A 0E F2 | 	cmp	result1, #0 wz
06478     DC 02 90 AD |  if_e	jmp	#LR__0519
0647c     95 01 00 FF 
06480     2A 95 06 F6 | 	mov	arg02, ##@LR__5831
06484     53 93 02 F6 | 	mov	arg01, local01
06488     74 E5 B1 FD | 	call	#__system___string_cmp
0648c     00 7A 0E F2 | 	cmp	result1, #0 wz
06490     CC 02 90 AD |  if_e	jmp	#LR__0520
06494     95 01 00 FF 
06498     32 95 06 F6 | 	mov	arg02, ##@LR__5832
0649c     53 93 02 F6 | 	mov	arg01, local01
064a0     5C E5 B1 FD | 	call	#__system___string_cmp
064a4     00 7A 0E F2 | 	cmp	result1, #0 wz
064a8     BC 02 90 AD |  if_e	jmp	#LR__0521
064ac     95 01 00 FF 
064b0     38 95 06 F6 | 	mov	arg02, ##@LR__5833
064b4     53 93 02 F6 | 	mov	arg01, local01
064b8     44 E5 B1 FD | 	call	#__system___string_cmp
064bc     00 7A 0E F2 | 	cmp	result1, #0 wz
064c0     AC 02 90 AD |  if_e	jmp	#LR__0522
064c4     95 01 00 FF 
064c8     3F 95 06 F6 | 	mov	arg02, ##@LR__5834
064cc     53 93 02 F6 | 	mov	arg01, local01
064d0     2C E5 B1 FD | 	call	#__system___string_cmp
064d4     00 7A 0E F2 | 	cmp	result1, #0 wz
064d8     9C 02 90 AD |  if_e	jmp	#LR__0523
064dc     95 01 00 FF 
064e0     45 95 06 F6 | 	mov	arg02, ##@LR__5835
064e4     53 93 02 F6 | 	mov	arg01, local01
064e8     14 E5 B1 FD | 	call	#__system___string_cmp
064ec     00 7A 0E F2 | 	cmp	result1, #0 wz
064f0     8C 02 90 AD |  if_e	jmp	#LR__0524
064f4     95 01 00 FF 
064f8     4B 95 06 F6 | 	mov	arg02, ##@LR__5836
064fc     53 93 02 F6 | 	mov	arg01, local01
06500     FC E4 B1 FD | 	call	#__system___string_cmp
06504     00 7A 0E F2 | 	cmp	result1, #0 wz
06508     7C 02 90 AD |  if_e	jmp	#LR__0525
0650c     95 01 00 FF 
06510     4F 95 06 F6 | 	mov	arg02, ##@LR__5837
06514     53 93 02 F6 | 	mov	arg01, local01
06518     E4 E4 B1 FD | 	call	#__system___string_cmp
0651c     00 7A 0E F2 | 	cmp	result1, #0 wz
06520     6C 02 90 AD |  if_e	jmp	#LR__0526
06524     95 01 00 FF 
06528     53 95 06 F6 | 	mov	arg02, ##@LR__5838
0652c     53 93 02 F6 | 	mov	arg01, local01
06530     CC E4 B1 FD | 	call	#__system___string_cmp
06534     00 7A 0E F2 | 	cmp	result1, #0 wz
06538     5C 02 90 AD |  if_e	jmp	#LR__0527
0653c     95 01 00 FF 
06540     57 95 06 F6 | 	mov	arg02, ##@LR__5839
06544     53 93 02 F6 | 	mov	arg01, local01
06548     B4 E4 B1 FD | 	call	#__system___string_cmp
0654c     00 7A 0E F2 | 	cmp	result1, #0 wz
06550     4C 02 90 AD |  if_e	jmp	#LR__0528
06554     95 01 00 FF 
06558     5D 95 06 F6 | 	mov	arg02, ##@LR__5840
0655c     53 93 02 F6 | 	mov	arg01, local01
06560     9C E4 B1 FD | 	call	#__system___string_cmp
06564     00 7A 0E F2 | 	cmp	result1, #0 wz
06568     3C 02 90 AD |  if_e	jmp	#LR__0529
0656c     95 01 00 FF 
06570     63 95 06 F6 | 	mov	arg02, ##@LR__5841
06574     53 93 02 F6 | 	mov	arg01, local01
06578     84 E4 B1 FD | 	call	#__system___string_cmp
0657c     00 7A 0E F2 | 	cmp	result1, #0 wz
06580     2C 02 90 AD |  if_e	jmp	#LR__0530
06584     95 01 00 FF 
06588     68 95 06 F6 | 	mov	arg02, ##@LR__5842
0658c     53 93 02 F6 | 	mov	arg01, local01
06590     6C E4 B1 FD | 	call	#__system___string_cmp
06594     00 7A 0E F2 | 	cmp	result1, #0 wz
06598     1C 02 90 AD |  if_e	jmp	#LR__0531
0659c     95 01 00 FF 
065a0     6C 95 06 F6 | 	mov	arg02, ##@LR__5843
065a4     53 93 02 F6 | 	mov	arg01, local01
065a8     54 E4 B1 FD | 	call	#__system___string_cmp
065ac     00 7A 0E F2 | 	cmp	result1, #0 wz
065b0     0C 02 90 AD |  if_e	jmp	#LR__0532
065b4     95 01 00 FF 
065b8     70 95 06 F6 | 	mov	arg02, ##@LR__5844
065bc     53 93 02 F6 | 	mov	arg01, local01
065c0     3C E4 B1 FD | 	call	#__system___string_cmp
065c4     00 7A 0E F2 | 	cmp	result1, #0 wz
065c8     FC 01 90 AD |  if_e	jmp	#LR__0533
065cc     00 02 90 FD | 	jmp	#LR__0534
065d0                 | LR__0470
065d0     9E 7A 06 F6 | 	mov	result1, #158
065d4     FC 01 90 FD | 	jmp	#LR__0535
065d8                 | LR__0471
065d8     85 7A 06 F6 | 	mov	result1, #133
065dc     F4 01 90 FD | 	jmp	#LR__0535
065e0                 | LR__0472
065e0     9B 7A 06 F6 | 	mov	result1, #155
065e4     EC 01 90 FD | 	jmp	#LR__0535
065e8                 | LR__0473
065e8     9B 7A 06 F6 | 	mov	result1, #155
065ec     E4 01 90 FD | 	jmp	#LR__0535
065f0                 | LR__0474
065f0     A7 7A 06 F6 | 	mov	result1, #167
065f4     DC 01 90 FD | 	jmp	#LR__0535
065f8                 | LR__0475
065f8     84 7A 06 F6 | 	mov	result1, #132
065fc     D4 01 90 FD | 	jmp	#LR__0535
06600                 | LR__0476
06600     86 7A 06 F6 | 	mov	result1, #134
06604     CC 01 90 FD | 	jmp	#LR__0535
06608                 | LR__0477
06608     A2 7A 06 F6 | 	mov	result1, #162
0660c     C4 01 90 FD | 	jmp	#LR__0535
06610                 | LR__0478
06610     9F 7A 06 F6 | 	mov	result1, #159
06614     BC 01 90 FD | 	jmp	#LR__0535
06618                 | LR__0479
06618     C0 7A 06 F6 | 	mov	result1, #192
0661c     B4 01 90 FD | 	jmp	#LR__0535
06620                 | LR__0480
06620     82 7A 06 F6 | 	mov	result1, #130
06624     AC 01 90 FD | 	jmp	#LR__0535
06628                 | LR__0481
06628     99 7A 06 F6 | 	mov	result1, #153
0662c     A4 01 90 FD | 	jmp	#LR__0535
06630                 | LR__0482
06630     D7 7A 06 F6 | 	mov	result1, #215
06634     9C 01 90 FD | 	jmp	#LR__0535
06638                 | LR__0483
06638     D8 7A 06 F6 | 	mov	result1, #216
0663c     94 01 90 FD | 	jmp	#LR__0535
06640                 | LR__0484
06640     C5 7A 06 F6 | 	mov	result1, #197
06644     8C 01 90 FD | 	jmp	#LR__0535
06648                 | LR__0485
06648     C5 7A 06 F6 | 	mov	result1, #197
0664c     84 01 90 FD | 	jmp	#LR__0535
06650                 | LR__0486
06650     9C 7A 06 F6 | 	mov	result1, #156
06654     7C 01 90 FD | 	jmp	#LR__0535
06658                 | LR__0487
06658     D3 7A 06 F6 | 	mov	result1, #211
0665c     74 01 90 FD | 	jmp	#LR__0535
06660                 | LR__0488
06660     D3 7A 06 F6 | 	mov	result1, #211
06664     6C 01 90 FD | 	jmp	#LR__0535
06668                 | LR__0489
06668     6F 7A 06 F6 | 	mov	result1, #111
0666c     64 01 90 FD | 	jmp	#LR__0535
06670                 | LR__0490
06670     6F 7A 06 F6 | 	mov	result1, #111
06674     5C 01 90 FD | 	jmp	#LR__0535
06678                 | LR__0491
06678     93 7A 06 F6 | 	mov	result1, #147
0667c     54 01 90 FD | 	jmp	#LR__0535
06680                 | LR__0492
06680     94 7A 06 F6 | 	mov	result1, #148
06684     4C 01 90 FD | 	jmp	#LR__0535
06688                 | LR__0493
06688     DB 7A 06 F6 | 	mov	result1, #219
0668c     44 01 90 FD | 	jmp	#LR__0535
06690                 | LR__0494
06690     62 7A 06 F6 | 	mov	result1, #98
06694     3C 01 90 FD | 	jmp	#LR__0535
06698                 | LR__0495
06698     62 7A 06 F6 | 	mov	result1, #98
0669c     34 01 90 FD | 	jmp	#LR__0535
066a0                 | LR__0496
066a0     A3 7A 06 F6 | 	mov	result1, #163
066a4     2C 01 90 FD | 	jmp	#LR__0535
066a8                 | LR__0497
066a8     9D 7A 06 F6 | 	mov	result1, #157
066ac     24 01 90 FD | 	jmp	#LR__0535
066b0                 | LR__0498
066b0     8A 7A 06 F6 | 	mov	result1, #138
066b4     1C 01 90 FD | 	jmp	#LR__0535
066b8                 | LR__0499
066b8     A4 7A 06 F6 | 	mov	result1, #164
066bc     14 01 90 FD | 	jmp	#LR__0535
066c0                 | LR__0500
066c0     A8 7A 06 F6 | 	mov	result1, #168
066c4     0C 01 90 FD | 	jmp	#LR__0535
066c8                 | LR__0501
066c8     AD 7A 06 F6 | 	mov	result1, #173
066cc     04 01 90 FD | 	jmp	#LR__0535
066d0                 | LR__0502
066d0     9A 7A 06 F6 | 	mov	result1, #154
066d4     FC 00 90 FD | 	jmp	#LR__0535
066d8                 | LR__0503
066d8     D1 7A 06 F6 | 	mov	result1, #209
066dc     F4 00 90 FD | 	jmp	#LR__0535
066e0                 | LR__0504
066e0     D0 7A 06 F6 | 	mov	result1, #208
066e4     EC 00 90 FD | 	jmp	#LR__0535
066e8                 | LR__0505
066e8     A6 7A 06 F6 | 	mov	result1, #166
066ec     E4 00 90 FD | 	jmp	#LR__0535
066f0                 | LR__0506
066f0     66 7A 06 F6 | 	mov	result1, #102
066f4     DC 00 90 FD | 	jmp	#LR__0535
066f8                 | LR__0507
066f8     67 7A 06 F6 | 	mov	result1, #103
066fc     D4 00 90 FD | 	jmp	#LR__0535
06700                 | LR__0508
06700     64 7A 06 F6 | 	mov	result1, #100
06704     CC 00 90 FD | 	jmp	#LR__0535
06708                 | LR__0509
06708     65 7A 06 F6 | 	mov	result1, #101
0670c     C4 00 90 FD | 	jmp	#LR__0535
06710                 | LR__0510
06710     D5 7A 06 F6 | 	mov	result1, #213
06714     BC 00 90 FD | 	jmp	#LR__0535
06718                 | LR__0511
06718     D6 7A 06 F6 | 	mov	result1, #214
0671c     B4 00 90 FD | 	jmp	#LR__0535
06720                 | LR__0512
06720     C8 7A 06 F6 | 	mov	result1, #200
06724     AC 00 90 FD | 	jmp	#LR__0535
06728                 | LR__0513
06728     C9 7A 06 F6 | 	mov	result1, #201
0672c     A4 00 90 FD | 	jmp	#LR__0535
06730                 | LR__0514
06730     CA 7A 06 F6 | 	mov	result1, #202
06734     9C 00 90 FD | 	jmp	#LR__0535
06738                 | LR__0515
06738     CC 7A 06 F6 | 	mov	result1, #204
0673c     94 00 90 FD | 	jmp	#LR__0535
06740                 | LR__0516
06740     CD 7A 06 F6 | 	mov	result1, #205
06744     8C 00 90 FD | 	jmp	#LR__0535
06748                 | LR__0517
06748     CE 7A 06 F6 | 	mov	result1, #206
0674c     84 00 90 FD | 	jmp	#LR__0535
06750                 | LR__0518
06750     CB 7A 06 F6 | 	mov	result1, #203
06754     7C 00 90 FD | 	jmp	#LR__0535
06758                 | LR__0519
06758     98 7A 06 F6 | 	mov	result1, #152
0675c     74 00 90 FD | 	jmp	#LR__0535
06760                 | LR__0520
06760     7B 7A 06 F6 | 	mov	result1, #123
06764     6C 00 90 FD | 	jmp	#LR__0535
06768                 | LR__0521
06768     76 7A 06 F6 | 	mov	result1, #118
0676c     64 00 90 FD | 	jmp	#LR__0535
06770                 | LR__0522
06770     A5 7A 06 F6 | 	mov	result1, #165
06774     5C 00 90 FD | 	jmp	#LR__0535
06778                 | LR__0523
06778     7A 7A 06 F6 | 	mov	result1, #122
0677c     54 00 90 FD | 	jmp	#LR__0535
06780                 | LR__0524
06780     BF 7A 06 F6 | 	mov	result1, #191
06784     4C 00 90 FD | 	jmp	#LR__0535
06788                 | LR__0525
06788     54 7A 06 F6 | 	mov	result1, #84
0678c     44 00 90 FD | 	jmp	#LR__0535
06790                 | LR__0526
06790     6B 7A 06 F6 | 	mov	result1, #107
06794     3C 00 90 FD | 	jmp	#LR__0535
06798                 | LR__0527
06798     87 7A 06 F6 | 	mov	result1, #135
0679c     34 00 90 FD | 	jmp	#LR__0535
067a0                 | LR__0528
067a0     6A 7A 06 F6 | 	mov	result1, #106
067a4     2C 00 90 FD | 	jmp	#LR__0535
067a8                 | LR__0529
067a8     6E 7A 06 F6 | 	mov	result1, #110
067ac     24 00 90 FD | 	jmp	#LR__0535
067b0                 | LR__0530
067b0     A1 7A 06 F6 | 	mov	result1, #161
067b4     1C 00 90 FD | 	jmp	#LR__0535
067b8                 | LR__0531
067b8     83 7A 06 F6 | 	mov	result1, #131
067bc     14 00 90 FD | 	jmp	#LR__0535
067c0                 | LR__0532
067c0     A0 7A 06 F6 | 	mov	result1, #160
067c4     0C 00 90 FD | 	jmp	#LR__0535
067c8                 | LR__0533
067c8     9B 7A 06 F6 | 	mov	result1, #155
067cc     04 00 90 FD | 	jmp	#LR__0535
067d0                 | LR__0534
067d0     00 7A 06 F6 | 	mov	result1, #0
067d4                 | LR__0535
067d4     E7 F0 03 F6 | 	mov	ptra, fp
067d8     F2 00 A0 FD | 	call	#popregs_
067dc                 | _isfunction_ret
067dc     2D 00 64 FD | 	ret
067e0                 | 
067e0                 | ' 
067e0                 | ' ' Check if the part is a name
067e0                 | ' 
067e0                 | ' function isname(s as string) as boolean
067e0                 | _isname
067e0     0D CA 05 F6 | 	mov	COUNT_, #13
067e4     E8 00 A0 FD | 	call	#pushregs_
067e8     49 A7 02 F6 | 	mov	local01, arg01
067ec     49 A9 02 F6 | 	mov	local02, arg01
067f0     D7 06 48 FB | 	callpa	#(@LR__0541-@LR__0540)>>2,fcache_load_ptr_
067f4                 | LR__0540
067f4     54 7B CA FA | 	rdbyte	result1, local02 wz
067f8     01 A8 06 51 |  if_ne	add	local02, #1
067fc     F4 FF 9F 5D |  if_ne	jmp	#LR__0540
06800                 | LR__0541
06800     49 A9 82 F1 | 	sub	local02, arg01
06804     54 7B 02 F6 | 	mov	result1, local02
06808     3D AB 0A F6 | 	mov	local03, result1 wz
0680c     00 7A 06 A6 |  if_e	mov	result1, #0
06810     34 02 90 AD |  if_e	jmp	#LR__0553
06814     53 93 02 F6 | 	mov	arg01, local01
06818     01 94 06 F6 | 	mov	arg02, #1
0681c     01 96 06 F6 | 	mov	arg03, #1
06820     74 FB B1 FD | 	call	#__system__Mid_S
06824     3D AD 02 F6 | 	mov	local04, result1
06828                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
06828     95 01 00 FF 
0682c     77 95 06 F6 | 	mov	arg02, ##@LR__5845
06830     56 93 02 F6 | 	mov	arg01, local04
06834     C8 E1 B1 FD | 	call	#__system___string_cmp
06838     00 7A 56 F2 | 	cmps	result1, #0 wc
0683c     18 00 90 CD |  if_b	jmp	#LR__0542
06840     95 01 00 FF 
06844     79 95 06 F6 | 	mov	arg02, ##@LR__5846
06848     56 93 02 F6 | 	mov	arg01, local04
0684c     B0 E1 B1 FD | 	call	#__system___string_cmp
06850     01 7A 56 F2 | 	cmps	result1, #1 wc
06854     1C 00 90 CD |  if_b	jmp	#LR__0543
06858                 | LR__0542
06858     95 01 00 FF 
0685c     7B 95 06 F6 | 	mov	arg02, ##@LR__5847
06860     56 93 02 F6 | 	mov	arg01, local04
06864     98 E1 B1 FD | 	call	#__system___string_cmp
06868     00 7A 0E F2 | 	cmp	result1, #0 wz
0686c     00 7A 06 56 |  if_ne	mov	result1, #0
06870     D4 01 90 5D |  if_ne	jmp	#LR__0553
06874                 | LR__0543
06874                 | ' if l>2 then 
06874     03 AA 56 F2 | 	cmps	local03, #3 wc
06878     C8 01 90 CD |  if_b	jmp	#LR__0552
0687c                 | '   for i=2 to l
0687c     02 AE 06 F6 | 	mov	local05, #2
06880     55 B1 02 F6 | 	mov	local06, local03
06884     01 B0 06 F1 | 	add	local06, #1
06888                 | LR__0544
06888     58 AF 52 F2 | 	cmps	local05, local06 wc
0688c     B4 01 90 3D |  if_ae	jmp	#LR__0551
06890     53 93 02 F6 | 	mov	arg01, local01
06894     57 95 02 F6 | 	mov	arg02, local05
06898     01 96 06 F6 | 	mov	arg03, #1
0689c     F8 FA B1 FD | 	call	#__system__Mid_S
068a0     3D AD 02 F6 | 	mov	local04, result1
068a4                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false 
068a4     55 AF 52 F2 | 	cmps	local05, local03 wc
068a8     9C 00 90 3D |  if_ae	jmp	#LR__0547
068ac     95 01 00 FF 
068b0     7D 95 06 F6 | 	mov	arg02, ##@LR__5848
068b4     56 93 02 F6 | 	mov	arg01, local04
068b8     44 E1 B1 FD | 	call	#__system___string_cmp
068bc     00 7A 56 F2 | 	cmps	result1, #0 wc
068c0     18 00 90 CD |  if_b	jmp	#LR__0545
068c4     95 01 00 FF 
068c8     7F 95 06 F6 | 	mov	arg02, ##@LR__5849
068cc     56 93 02 F6 | 	mov	arg01, local04
068d0     2C E1 B1 FD | 	call	#__system___string_cmp
068d4     01 7A 56 F2 | 	cmps	result1, #1 wc
068d8     6C 00 90 CD |  if_b	jmp	#LR__0547
068dc                 | LR__0545
068dc     95 01 00 FF 
068e0     81 95 06 F6 | 	mov	arg02, ##@LR__5850
068e4     56 93 02 F6 | 	mov	arg01, local04
068e8     14 E1 B1 FD | 	call	#__system___string_cmp
068ec     00 7A 56 F2 | 	cmps	result1, #0 wc
068f0     18 00 90 CD |  if_b	jmp	#LR__0546
068f4     95 01 00 FF 
068f8     83 95 06 F6 | 	mov	arg02, ##@LR__5851
068fc     56 93 02 F6 | 	mov	arg01, local04
06900     FC E0 B1 FD | 	call	#__system___string_cmp
06904     01 7A 56 F2 | 	cmps	result1, #1 wc
06908     3C 00 90 CD |  if_b	jmp	#LR__0547
0690c                 | LR__0546
0690c     95 01 00 FF 
06910     85 B3 06 F6 | 	mov	local07, ##@LR__5852
06914     56 93 02 F6 | 	mov	arg01, local04
06918     59 95 02 F6 | 	mov	arg02, local07
0691c     E0 E0 B1 FD | 	call	#__system___string_cmp
06920     00 7A 0E F2 | 	cmp	result1, #0 wz
06924     20 00 90 AD |  if_e	jmp	#LR__0547
06928     95 01 00 FF 
0692c     87 B5 06 F6 | 	mov	local08, ##@LR__5853
06930     56 93 02 F6 | 	mov	arg01, local04
06934     5A 95 02 F6 | 	mov	arg02, local08
06938     C4 E0 B1 FD | 	call	#__system___string_cmp
0693c     3D B7 0A F6 | 	mov	local09, result1 wz
06940     00 7A 06 56 |  if_ne	mov	result1, #0
06944     00 01 90 5D |  if_ne	jmp	#LR__0553
06948                 | LR__0547
06948                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
06948     55 AF 0A F2 | 	cmp	local05, local03 wz
0694c     EC 00 90 5D |  if_ne	jmp	#LR__0550
06950     95 01 00 FF 
06954     89 B9 06 F6 | 	mov	local10, ##@LR__5854
06958     56 93 02 F6 | 	mov	arg01, local04
0695c     5C 95 02 F6 | 	mov	arg02, local10
06960     9C E0 B1 FD | 	call	#__system___string_cmp
06964     3D BB 02 F6 | 	mov	local11, result1
06968     00 BA 56 F2 | 	cmps	local11, #0 wc
0696c     1C 00 90 CD |  if_b	jmp	#LR__0548
06970     95 01 00 FF 
06974     8B 95 06 F6 | 	mov	arg02, ##@LR__5855
06978     56 93 02 F6 | 	mov	arg01, local04
0697c     80 E0 B1 FD | 	call	#__system___string_cmp
06980     3D B9 02 F6 | 	mov	local10, result1
06984     01 B8 56 F2 | 	cmps	local10, #1 wc
06988     B0 00 90 CD |  if_b	jmp	#LR__0550
0698c                 | LR__0548
0698c     95 01 00 FF 
06990     8D 95 06 F6 | 	mov	arg02, ##@LR__5856
06994     56 93 02 F6 | 	mov	arg01, local04
06998     64 E0 B1 FD | 	call	#__system___string_cmp
0699c     00 7A 56 F2 | 	cmps	result1, #0 wc
069a0     1C 00 90 CD |  if_b	jmp	#LR__0549
069a4     95 01 00 FF 
069a8     8F B7 06 F6 | 	mov	local09, ##@LR__5857
069ac     56 93 02 F6 | 	mov	arg01, local04
069b0     5B 95 02 F6 | 	mov	arg02, local09
069b4     48 E0 B1 FD | 	call	#__system___string_cmp
069b8     01 7A 56 F2 | 	cmps	result1, #1 wc
069bc     7C 00 90 CD |  if_b	jmp	#LR__0550
069c0                 | LR__0549
069c0     95 01 00 FF 
069c4     91 B7 06 F6 | 	mov	local09, ##@LR__5858
069c8     56 93 02 F6 | 	mov	arg01, local04
069cc     5B 95 02 F6 | 	mov	arg02, local09
069d0     2C E0 B1 FD | 	call	#__system___string_cmp
069d4     00 7A 4E F2 | 	cmps	result1, #0 wz
069d8     60 00 90 AD |  if_e	jmp	#LR__0550
069dc     95 01 00 FF 
069e0     93 B5 06 F6 | 	mov	local08, ##@LR__5859
069e4     56 93 02 F6 | 	mov	arg01, local04
069e8     5A 95 02 F6 | 	mov	arg02, local08
069ec     10 E0 B1 FD | 	call	#__system___string_cmp
069f0     3D B7 0A F6 | 	mov	local09, result1 wz
069f4     44 00 90 AD |  if_e	jmp	#LR__0550
069f8     95 01 00 FF 
069fc     95 BD 06 F6 | 	mov	local12, ##@LR__5860
06a00     5E B5 02 F6 | 	mov	local08, local12
06a04     56 93 02 F6 | 	mov	arg01, local04
06a08     5A 95 02 F6 | 	mov	arg02, local08
06a0c     F0 DF B1 FD | 	call	#__system___string_cmp
06a10     3D B3 0A F6 | 	mov	local07, result1 wz
06a14     24 00 90 AD |  if_e	jmp	#LR__0550
06a18     95 01 00 FF 
06a1c     97 BF 06 F6 | 	mov	local13, ##@LR__5861
06a20     5F BD 02 F6 | 	mov	local12, local13
06a24     56 93 02 F6 | 	mov	arg01, local04
06a28     5E 95 02 F6 | 	mov	arg02, local12
06a2c     D0 DF B1 FD | 	call	#__system___string_cmp
06a30     3D B5 0A F6 | 	mov	local08, result1 wz
06a34     00 7A 06 56 |  if_ne	mov	result1, #0
06a38     0C 00 90 5D |  if_ne	jmp	#LR__0553
06a3c                 | LR__0550
06a3c     01 AE 06 F1 | 	add	local05, #1
06a40     44 FE 9F FD | 	jmp	#LR__0544
06a44                 | LR__0551
06a44                 | LR__0552
06a44                 | ' return true
06a44     01 7A 66 F6 | 	neg	result1, #1
06a48                 | LR__0553
06a48     E7 F0 03 F6 | 	mov	ptra, fp
06a4c     F2 00 A0 FD | 	call	#popregs_
06a50                 | _isname_ret
06a50     2D 00 64 FD | 	ret
06a54                 | 
06a54                 | ' 
06a54                 | ' ' Check if the part is a number.  
06a54                 | ' 
06a54                 | ' function isnum(s as string) as boolean 
06a54                 | _isnum
06a54     13 CA 05 F6 | 	mov	COUNT_, #19
06a58     E8 00 A0 FD | 	call	#pushregs_
06a5c     49 A7 02 F6 | 	mov	local01, arg01
06a60     00 A8 06 F6 | 	mov	local02, #0
06a64     00 AA 06 F6 | 	mov	local03, #0
06a68     53 93 02 F6 | 	mov	arg01, local01
06a6c     49 AD 02 F6 | 	mov	local04, arg01
06a70     D7 06 48 FB | 	callpa	#(@LR__0561-@LR__0560)>>2,fcache_load_ptr_
06a74                 | LR__0560
06a74     56 7B CA FA | 	rdbyte	result1, local04 wz
06a78     01 AC 06 51 |  if_ne	add	local04, #1
06a7c     F4 FF 9F 5D |  if_ne	jmp	#LR__0560
06a80                 | LR__0561
06a80     49 AD 82 F1 | 	sub	local04, arg01
06a84     56 7B 02 F6 | 	mov	result1, local04
06a88     3D AF 0A F6 | 	mov	local05, result1 wz
06a8c     00 7A 06 A6 |  if_e	mov	result1, #0
06a90     A0 03 90 AD |  if_e	jmp	#LR__0576
06a94     53 93 02 F6 | 	mov	arg01, local01
06a98     01 94 06 F6 | 	mov	arg02, #1
06a9c     01 96 06 F6 | 	mov	arg03, #1
06aa0     F4 F8 B1 FD | 	call	#__system__Mid_S
06aa4     3D B1 02 F6 | 	mov	local06, result1
06aa8                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
06aa8     95 01 00 FF 
06aac     99 95 06 F6 | 	mov	arg02, ##@LR__5862
06ab0     58 93 02 F6 | 	mov	arg01, local06
06ab4     48 DF B1 FD | 	call	#__system___string_cmp
06ab8     00 7A 56 F2 | 	cmps	result1, #0 wc
06abc     1C 00 90 CD |  if_b	jmp	#LR__0562
06ac0     95 01 00 FF 
06ac4     9B B3 06 F6 | 	mov	local07, ##@LR__5863
06ac8     58 93 02 F6 | 	mov	arg01, local06
06acc     59 95 02 F6 | 	mov	arg02, local07
06ad0     2C DF B1 FD | 	call	#__system___string_cmp
06ad4     01 7A 56 F2 | 	cmps	result1, #1 wc
06ad8     84 00 90 CD |  if_b	jmp	#LR__0563
06adc                 | LR__0562
06adc     95 01 00 FF 
06ae0     9D B5 06 F6 | 	mov	local08, ##@LR__5864
06ae4     5A B3 02 F6 | 	mov	local07, local08
06ae8     58 93 02 F6 | 	mov	arg01, local06
06aec     59 95 02 F6 | 	mov	arg02, local07
06af0     0C DF B1 FD | 	call	#__system___string_cmp
06af4     00 7A 0E F2 | 	cmp	result1, #0 wz
06af8     64 00 90 AD |  if_e	jmp	#LR__0563
06afc     95 01 00 FF 
06b00     9F B7 06 F6 | 	mov	local09, ##@LR__5865
06b04     5B B5 02 F6 | 	mov	local08, local09
06b08     58 93 02 F6 | 	mov	arg01, local06
06b0c     5A 95 02 F6 | 	mov	arg02, local08
06b10     EC DE B1 FD | 	call	#__system___string_cmp
06b14     3D B3 0A F6 | 	mov	local07, result1 wz
06b18     44 00 90 AD |  if_e	jmp	#LR__0563
06b1c     95 01 00 FF 
06b20     A1 B9 06 F6 | 	mov	local10, ##@LR__5866
06b24     5C B7 02 F6 | 	mov	local09, local10
06b28     58 93 02 F6 | 	mov	arg01, local06
06b2c     5B 95 02 F6 | 	mov	arg02, local09
06b30     CC DE B1 FD | 	call	#__system___string_cmp
06b34     3D B5 0A F6 | 	mov	local08, result1 wz
06b38     24 00 90 AD |  if_e	jmp	#LR__0563
06b3c     95 01 00 FF 
06b40     A3 BB 06 F6 | 	mov	local11, ##@LR__5867
06b44     5D B9 02 F6 | 	mov	local10, local11
06b48     58 93 02 F6 | 	mov	arg01, local06
06b4c     5C 95 02 F6 | 	mov	arg02, local10
06b50     AC DE B1 FD | 	call	#__system___string_cmp
06b54     3D B7 0A F6 | 	mov	local09, result1 wz
06b58     00 7A 06 56 |  if_ne	mov	result1, #0
06b5c     D4 02 90 5D |  if_ne	jmp	#LR__0576
06b60                 | LR__0563
06b60                 | ' if m$="." then ds=1
06b60     95 01 00 FF 
06b64     A5 95 06 F6 | 	mov	arg02, ##@LR__5868
06b68     58 93 02 F6 | 	mov	arg01, local06
06b6c     90 DE B1 FD | 	call	#__system___string_cmp
06b70     00 7A 0E F2 | 	cmp	result1, #0 wz
06b74     01 A8 06 A6 |  if_e	mov	local02, #1
06b78                 | ' if m$="$" then hex=1 else hex=0
06b78     95 01 00 FF 
06b7c     A7 95 06 F6 | 	mov	arg02, ##@LR__5869
06b80     58 93 02 F6 | 	mov	arg01, local06
06b84     78 DE B1 FD | 	call	#__system___string_cmp
06b88     00 7A 0E F2 | 	cmp	result1, #0 wz
06b8c     01 BC 06 A6 |  if_e	mov	local12, #1
06b90     00 BC 06 56 |  if_ne	mov	local12, #0
06b94                 | ' if m$="%" then bin=1 else bin=0
06b94     95 01 00 FF 
06b98     A9 95 06 F6 | 	mov	arg02, ##@LR__5870
06b9c     58 93 02 F6 | 	mov	arg01, local06
06ba0     5C DE B1 FD | 	call	#__system___string_cmp
06ba4     00 7A 0E F2 | 	cmp	result1, #0 wz
06ba8     01 BE 06 A6 |  if_e	mov	local13, #1
06bac     00 BE 06 56 |  if_ne	mov	local13, #0
06bb0                 | ' if l>1 then 
06bb0     02 AE 56 F2 | 	cmps	local05, #2 wc
06bb4     78 02 90 CD |  if_b	jmp	#LR__0575
06bb8                 | '   for i=2 to l
06bb8     02 C0 06 F6 | 	mov	local14, #2
06bbc     57 C3 02 F6 | 	mov	local15, local05
06bc0     01 C2 06 F1 | 	add	local15, #1
06bc4                 | LR__0564
06bc4     61 C1 52 F2 | 	cmps	local14, local15 wc
06bc8     64 02 90 3D |  if_ae	jmp	#LR__0574
06bcc     53 93 02 F6 | 	mov	arg01, local01
06bd0     60 95 02 F6 | 	mov	arg02, local14
06bd4     01 96 06 F6 | 	mov	arg03, #1
06bd8     BC F7 B1 FD | 	call	#__system__Mid_S
06bdc     3D B1 02 F6 | 	mov	local06, result1
06be0     00 C4 06 F6 | 	mov	local16, #0
06be4                 | '     m$=mid$(s,i,1) : b=false
06be4                 | '     if m$>="0" andalso m$<="9" then b=true  
06be4     95 01 00 FF 
06be8     AB 95 06 F6 | 	mov	arg02, ##@LR__5871
06bec     58 93 02 F6 | 	mov	arg01, local06
06bf0     0C DE B1 FD | 	call	#__system___string_cmp
06bf4     00 7A 56 F2 | 	cmps	result1, #0 wc
06bf8     1C 00 90 CD |  if_b	jmp	#LR__0565
06bfc     95 01 00 FF 
06c00     AD B3 06 F6 | 	mov	local07, ##@LR__5872
06c04     58 93 02 F6 | 	mov	arg01, local06
06c08     59 95 02 F6 | 	mov	arg02, local07
06c0c     F0 DD B1 FD | 	call	#__system___string_cmp
06c10     01 7A 56 F2 | 	cmps	result1, #1 wc
06c14     01 C4 66 C6 |  if_b	neg	local16, #1
06c18                 | LR__0565
06c18                 | '     if m$="_" orelse m$="." orelse m$="E" orelse m$="e" orelse m$="-" then b=true 
06c18     95 01 00 FF 
06c1c     AF 95 06 F6 | 	mov	arg02, ##@LR__5873
06c20     58 93 02 F6 | 	mov	arg01, local06
06c24     D8 DD B1 FD | 	call	#__system___string_cmp
06c28     00 7A 0E F2 | 	cmp	result1, #0 wz
06c2c     7C 00 90 AD |  if_e	jmp	#LR__0566
06c30     95 01 00 FF 
06c34     B1 B3 06 F6 | 	mov	local07, ##@LR__5874
06c38     58 93 02 F6 | 	mov	arg01, local06
06c3c     59 95 02 F6 | 	mov	arg02, local07
06c40     BC DD B1 FD | 	call	#__system___string_cmp
06c44     00 7A 0E F2 | 	cmp	result1, #0 wz
06c48     60 00 90 AD |  if_e	jmp	#LR__0566
06c4c     95 01 00 FF 
06c50     B3 B5 06 F6 | 	mov	local08, ##@LR__5875
06c54     5A B3 02 F6 | 	mov	local07, local08
06c58     58 93 02 F6 | 	mov	arg01, local06
06c5c     59 95 02 F6 | 	mov	arg02, local07
06c60     9C DD B1 FD | 	call	#__system___string_cmp
06c64     00 7A 0E F2 | 	cmp	result1, #0 wz
06c68     40 00 90 AD |  if_e	jmp	#LR__0566
06c6c     95 01 00 FF 
06c70     B5 B7 06 F6 | 	mov	local09, ##@LR__5876
06c74     5B B5 02 F6 | 	mov	local08, local09
06c78     58 93 02 F6 | 	mov	arg01, local06
06c7c     5A 95 02 F6 | 	mov	arg02, local08
06c80     7C DD B1 FD | 	call	#__system___string_cmp
06c84     3D B3 0A F6 | 	mov	local07, result1 wz
06c88     20 00 90 AD |  if_e	jmp	#LR__0566
06c8c     95 01 00 FF 
06c90     B7 B9 06 F6 | 	mov	local10, ##@LR__5877
06c94     5C B7 02 F6 | 	mov	local09, local10
06c98     58 93 02 F6 | 	mov	arg01, local06
06c9c     5B 95 02 F6 | 	mov	arg02, local09
06ca0     5C DD B1 FD | 	call	#__system___string_cmp
06ca4     3D B5 0A F6 | 	mov	local08, result1 wz
06ca8     04 00 90 5D |  if_ne	jmp	#LR__0567
06cac                 | LR__0566
06cac     01 C4 66 F6 | 	neg	local16, #1
06cb0                 | LR__0567
06cb0                 | '     if hex=1 andalso m$>="a" andalso m$<="f" then b=true
06cb0     01 BC 0E F2 | 	cmp	local12, #1 wz
06cb4     34 00 90 5D |  if_ne	jmp	#LR__0568
06cb8     95 01 00 FF 
06cbc     B9 95 06 F6 | 	mov	arg02, ##@LR__5878
06cc0     58 93 02 F6 | 	mov	arg01, local06
06cc4     38 DD B1 FD | 	call	#__system___string_cmp
06cc8     00 7A 56 F2 | 	cmps	result1, #0 wc
06ccc     1C 00 90 CD |  if_b	jmp	#LR__0568
06cd0     95 01 00 FF 
06cd4     BB B3 06 F6 | 	mov	local07, ##@LR__5879
06cd8     58 93 02 F6 | 	mov	arg01, local06
06cdc     59 95 02 F6 | 	mov	arg02, local07
06ce0     1C DD B1 FD | 	call	#__system___string_cmp
06ce4     01 7A 56 F2 | 	cmps	result1, #1 wc
06ce8     01 C4 66 C6 |  if_b	neg	local16, #1
06cec                 | LR__0568
06cec                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_" then return false
06cec     01 BE 0E F2 | 	cmp	local13, #1 wz
06cf0     58 00 90 5D |  if_ne	jmp	#LR__0570
06cf4     95 01 00 FF 
06cf8     BD 95 06 F6 | 	mov	arg02, ##@LR__5880
06cfc     58 93 02 F6 | 	mov	arg01, local06
06d00     FC DC B1 FD | 	call	#__system___string_cmp
06d04     00 7A 56 F2 | 	cmps	result1, #0 wc
06d08     1C 00 90 CD |  if_b	jmp	#LR__0569
06d0c     95 01 00 FF 
06d10     BF B3 06 F6 | 	mov	local07, ##@LR__5881
06d14     58 93 02 F6 | 	mov	arg01, local06
06d18     59 95 02 F6 | 	mov	arg02, local07
06d1c     E0 DC B1 FD | 	call	#__system___string_cmp
06d20     01 7A 56 F2 | 	cmps	result1, #1 wc
06d24     24 00 90 CD |  if_b	jmp	#LR__0570
06d28                 | LR__0569
06d28     95 01 00 FF 
06d2c     C1 B5 06 F6 | 	mov	local08, ##@LR__5882
06d30     5A B3 02 F6 | 	mov	local07, local08
06d34     58 93 02 F6 | 	mov	arg01, local06
06d38     59 95 02 F6 | 	mov	arg02, local07
06d3c     C0 DC B1 FD | 	call	#__system___string_cmp
06d40     00 7A 0E F2 | 	cmp	result1, #0 wz
06d44     00 7A 06 56 |  if_ne	mov	result1, #0
06d48     E8 00 90 5D |  if_ne	jmp	#LR__0576
06d4c                 | LR__0570
06d4c                 | '     if not b then return false
06d4c     62 C5 22 F6 | 	not	local16, local16
06d50     00 C4 0E F2 | 	cmp	local16, #0 wz
06d54     00 7A 06 56 |  if_ne	mov	result1, #0
06d58     D8 00 90 5D |  if_ne	jmp	#LR__0576
06d5c                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
06d5c     95 01 00 FF 
06d60     C3 95 06 F6 | 	mov	arg02, ##@LR__5883
06d64     58 93 02 F6 | 	mov	arg01, local06
06d68     94 DC B1 FD | 	call	#__system___string_cmp
06d6c     00 7A 0E F2 | 	cmp	result1, #0 wz
06d70     3C 00 90 5D |  if_ne	jmp	#LR__0571
06d74     60 95 02 F6 | 	mov	arg02, local14
06d78     01 94 86 F1 | 	sub	arg02, #1
06d7c     53 93 02 F6 | 	mov	arg01, local01
06d80     01 96 06 F6 | 	mov	arg03, #1
06d84     10 F6 B1 FD | 	call	#__system__Mid_S
06d88     3D 93 02 F6 | 	mov	arg01, result1
06d8c     00 F8 B1 FD | 	call	#__system__LCase_S
06d90     3D 93 02 F6 | 	mov	arg01, result1
06d94     95 01 00 FF 
06d98     C5 B3 06 F6 | 	mov	local07, ##@LR__5884
06d9c     59 95 02 F6 | 	mov	arg02, local07
06da0     5C DC B1 FD | 	call	#__system___string_cmp
06da4     00 7A 0E F2 | 	cmp	result1, #0 wz
06da8     00 7A 06 56 |  if_ne	mov	result1, #0
06dac     84 00 90 5D |  if_ne	jmp	#LR__0576
06db0                 | LR__0571
06db0                 | '     if m$="." then ds+=1: if ds>1 then return false
06db0     95 01 00 FF 
06db4     C7 95 06 F6 | 	mov	arg02, ##@LR__5885
06db8     58 93 02 F6 | 	mov	arg01, local06
06dbc     40 DC B1 FD | 	call	#__system___string_cmp
06dc0     00 7A 0E F2 | 	cmp	result1, #0 wz
06dc4     01 A8 06 A1 |  if_e	add	local02, #1
06dc8     02 A8 56 A2 |  if_e	cmps	local02, #2 wc
06dcc     00 7A 06 26 |  if_nc_and_z	mov	result1, #0
06dd0     60 00 90 2D |  if_nc_and_z	jmp	#LR__0576
06dd4                 | '     if m$="E" orelse m$="e" then es+=1: if hex=0 andalso es>1 then return false
06dd4     95 01 00 FF 
06dd8     C9 C7 06 F6 | 	mov	local17, ##@LR__5886
06ddc     63 C9 02 F6 | 	mov	local18, local17
06de0     58 93 02 F6 | 	mov	arg01, local06
06de4     64 95 02 F6 | 	mov	arg02, local18
06de8     14 DC B1 FD | 	call	#__system___string_cmp
06dec     3D CB 0A F6 | 	mov	local19, result1 wz
06df0     20 00 90 AD |  if_e	jmp	#LR__0572
06df4     95 01 00 FF 
06df8     CB B3 06 F6 | 	mov	local07, ##@LR__5887
06dfc     59 C7 02 F6 | 	mov	local17, local07
06e00     58 93 02 F6 | 	mov	arg01, local06
06e04     63 95 02 F6 | 	mov	arg02, local17
06e08     F4 DB B1 FD | 	call	#__system___string_cmp
06e0c     3D C9 0A F6 | 	mov	local18, result1 wz
06e10     14 00 90 5D |  if_ne	jmp	#LR__0573
06e14                 | LR__0572
06e14     01 AA 06 F1 | 	add	local03, #1
06e18     00 BC 0E F2 | 	cmp	local12, #0 wz
06e1c     02 AA 56 A2 |  if_e	cmps	local03, #2 wc
06e20     00 7A 06 26 |  if_nc_and_z	mov	result1, #0
06e24     0C 00 90 2D |  if_nc_and_z	jmp	#LR__0576
06e28                 | LR__0573
06e28     01 C0 06 F1 | 	add	local14, #1
06e2c     94 FD 9F FD | 	jmp	#LR__0564
06e30                 | LR__0574
06e30                 | LR__0575
06e30                 | ' return true
06e30     01 7A 66 F6 | 	neg	result1, #1
06e34                 | LR__0576
06e34     E7 F0 03 F6 | 	mov	ptra, fp
06e38     F2 00 A0 FD | 	call	#popregs_
06e3c                 | _isnum_ret
06e3c     2D 00 64 FD | 	ret
06e40                 | 
06e40                 | '   
06e40                 | ' ' Check if the part is an integer number.    
06e40                 | '   
06e40                 | ' function isint(s as string) as boolean
06e40                 | _isint
06e40     0E CA 05 F6 | 	mov	COUNT_, #14
06e44     E8 00 A0 FD | 	call	#pushregs_
06e48     49 A7 02 F6 | 	mov	local01, arg01
06e4c     49 A9 02 F6 | 	mov	local02, arg01
06e50     D7 06 48 FB | 	callpa	#(@LR__0581-@LR__0580)>>2,fcache_load_ptr_
06e54                 | LR__0580
06e54     54 7B CA FA | 	rdbyte	result1, local02 wz
06e58     01 A8 06 51 |  if_ne	add	local02, #1
06e5c     F4 FF 9F 5D |  if_ne	jmp	#LR__0580
06e60                 | LR__0581
06e60     49 A9 82 F1 | 	sub	local02, arg01
06e64     54 7B 02 F6 | 	mov	result1, local02
06e68     3D AB 0A F6 | 	mov	local03, result1 wz
06e6c     00 7A 06 A6 |  if_e	mov	result1, #0
06e70     64 02 90 AD |  if_e	jmp	#LR__0594
06e74     53 93 02 F6 | 	mov	arg01, local01
06e78     01 94 06 F6 | 	mov	arg02, #1
06e7c     01 96 06 F6 | 	mov	arg03, #1
06e80     14 F5 B1 FD | 	call	#__system__Mid_S
06e84     3D AD 02 F6 | 	mov	local04, result1
06e88                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
06e88     95 01 00 FF 
06e8c     CD 95 06 F6 | 	mov	arg02, ##@LR__5888
06e90     56 93 02 F6 | 	mov	arg01, local04
06e94     68 DB B1 FD | 	call	#__system___string_cmp
06e98     00 7A 56 F2 | 	cmps	result1, #0 wc
06e9c     1C 00 90 CD |  if_b	jmp	#LR__0582
06ea0     95 01 00 FF 
06ea4     CF AF 06 F6 | 	mov	local05, ##@LR__5889
06ea8     56 93 02 F6 | 	mov	arg01, local04
06eac     57 95 02 F6 | 	mov	arg02, local05
06eb0     4C DB B1 FD | 	call	#__system___string_cmp
06eb4     01 7A 56 F2 | 	cmps	result1, #1 wc
06eb8     64 00 90 CD |  if_b	jmp	#LR__0583
06ebc                 | LR__0582
06ebc     95 01 00 FF 
06ec0     D1 B1 06 F6 | 	mov	local06, ##@LR__5890
06ec4     58 AF 02 F6 | 	mov	local05, local06
06ec8     56 93 02 F6 | 	mov	arg01, local04
06ecc     57 95 02 F6 | 	mov	arg02, local05
06ed0     2C DB B1 FD | 	call	#__system___string_cmp
06ed4     00 7A 0E F2 | 	cmp	result1, #0 wz
06ed8     44 00 90 AD |  if_e	jmp	#LR__0583
06edc     95 01 00 FF 
06ee0     D3 B3 06 F6 | 	mov	local07, ##@LR__5891
06ee4     59 B1 02 F6 | 	mov	local06, local07
06ee8     56 93 02 F6 | 	mov	arg01, local04
06eec     58 95 02 F6 | 	mov	arg02, local06
06ef0     0C DB B1 FD | 	call	#__system___string_cmp
06ef4     3D AF 0A F6 | 	mov	local05, result1 wz
06ef8     24 00 90 AD |  if_e	jmp	#LR__0583
06efc     95 01 00 FF 
06f00     D5 B5 06 F6 | 	mov	local08, ##@LR__5892
06f04     5A B3 02 F6 | 	mov	local07, local08
06f08     56 93 02 F6 | 	mov	arg01, local04
06f0c     59 95 02 F6 | 	mov	arg02, local07
06f10     EC DA B1 FD | 	call	#__system___string_cmp
06f14     3D B1 0A F6 | 	mov	local06, result1 wz
06f18     00 7A 06 56 |  if_ne	mov	result1, #0
06f1c     B8 01 90 5D |  if_ne	jmp	#LR__0594
06f20                 | LR__0583
06f20                 | ' if m$="$" then hex=1 else hex=0
06f20     95 01 00 FF 
06f24     D7 95 06 F6 | 	mov	arg02, ##@LR__5893
06f28     56 93 02 F6 | 	mov	arg01, local04
06f2c     D0 DA B1 FD | 	call	#__system___string_cmp
06f30     00 7A 0E F2 | 	cmp	result1, #0 wz
06f34     01 B6 06 A6 |  if_e	mov	local09, #1
06f38     00 B6 06 56 |  if_ne	mov	local09, #0
06f3c                 | ' if m$="%" then bin=1 else bin=0
06f3c     95 01 00 FF 
06f40     D9 95 06 F6 | 	mov	arg02, ##@LR__5894
06f44     56 93 02 F6 | 	mov	arg01, local04
06f48     B4 DA B1 FD | 	call	#__system___string_cmp
06f4c     00 7A 0E F2 | 	cmp	result1, #0 wz
06f50     01 B8 06 A6 |  if_e	mov	local10, #1
06f54     00 B8 06 56 |  if_ne	mov	local10, #0
06f58                 | ' if l>1 then 
06f58     02 AA 56 F2 | 	cmps	local03, #2 wc
06f5c     74 01 90 CD |  if_b	jmp	#LR__0593
06f60                 | '   for i=2 to l
06f60     02 BA 06 F6 | 	mov	local11, #2
06f64     55 BD 02 F6 | 	mov	local12, local03
06f68     01 BC 06 F1 | 	add	local12, #1
06f6c                 | LR__0584
06f6c     5E BB 52 F2 | 	cmps	local11, local12 wc
06f70     60 01 90 3D |  if_ae	jmp	#LR__0592
06f74     53 93 02 F6 | 	mov	arg01, local01
06f78     5D 95 02 F6 | 	mov	arg02, local11
06f7c     01 96 06 F6 | 	mov	arg03, #1
06f80     14 F4 B1 FD | 	call	#__system__Mid_S
06f84     3D AD 02 F6 | 	mov	local04, result1
06f88                 | '     m$=mid$(s,i,1) 
06f88                 | '     if hex=0 andalso (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
06f88     00 B6 0E F2 | 	cmp	local09, #0 wz
06f8c     50 00 90 5D |  if_ne	jmp	#LR__0586
06f90     95 01 00 FF 
06f94     DB 95 06 F6 | 	mov	arg02, ##@LR__5895
06f98     56 93 02 F6 | 	mov	arg01, local04
06f9c     60 DA B1 FD | 	call	#__system___string_cmp
06fa0     00 7A 56 F2 | 	cmps	result1, #0 wc
06fa4     18 00 90 CD |  if_b	jmp	#LR__0585
06fa8     95 01 00 FF 
06fac     DD 95 06 F6 | 	mov	arg02, ##@LR__5896
06fb0     56 93 02 F6 | 	mov	arg01, local04
06fb4     48 DA B1 FD | 	call	#__system___string_cmp
06fb8     01 7A 56 F2 | 	cmps	result1, #1 wc
06fbc     20 00 90 CD |  if_b	jmp	#LR__0586
06fc0                 | LR__0585
06fc0     95 01 00 FF 
06fc4     DF B1 06 F6 | 	mov	local06, ##@LR__5897
06fc8     56 93 02 F6 | 	mov	arg01, local04
06fcc     58 95 02 F6 | 	mov	arg02, local06
06fd0     2C DA B1 FD | 	call	#__system___string_cmp
06fd4     00 7A 0E F2 | 	cmp	result1, #0 wz
06fd8     00 7A 06 56 |  if_ne	mov	result1, #0
06fdc     F8 00 90 5D |  if_ne	jmp	#LR__0594
06fe0                 | LR__0586
06fe0                 | '     if hex=1 andalso (m$<"0" orelse m$>"9") andalso (m$<"a" orelse m$>"f") andalso m$<>"_"  then return false
06fe0     01 B6 0E F2 | 	cmp	local09, #1 wz
06fe4     90 00 90 5D |  if_ne	jmp	#LR__0589
06fe8     95 01 00 FF 
06fec     E1 95 06 F6 | 	mov	arg02, ##@LR__5898
06ff0     56 93 02 F6 | 	mov	arg01, local04
06ff4     08 DA B1 FD | 	call	#__system___string_cmp
06ff8     00 7A 56 F2 | 	cmps	result1, #0 wc
06ffc     1C 00 90 CD |  if_b	jmp	#LR__0587
07000     95 01 00 FF 
07004     E3 95 06 F6 | 	mov	arg02, ##@LR__5899
07008     56 93 02 F6 | 	mov	arg01, local04
0700c     F0 D9 B1 FD | 	call	#__system___string_cmp
07010     3D BF 02 F6 | 	mov	local13, result1
07014     01 BE 56 F2 | 	cmps	local13, #1 wc
07018     5C 00 90 CD |  if_b	jmp	#LR__0589
0701c                 | LR__0587
0701c     95 01 00 FF 
07020     E5 AF 06 F6 | 	mov	local05, ##@LR__5900
07024     56 93 02 F6 | 	mov	arg01, local04
07028     57 95 02 F6 | 	mov	arg02, local05
0702c     D0 D9 B1 FD | 	call	#__system___string_cmp
07030     3D C1 02 F6 | 	mov	local14, result1
07034     00 C0 56 F2 | 	cmps	local14, #0 wc
07038     1C 00 90 CD |  if_b	jmp	#LR__0588
0703c     95 01 00 FF 
07040     E7 B3 06 F6 | 	mov	local07, ##@LR__5901
07044     56 93 02 F6 | 	mov	arg01, local04
07048     59 95 02 F6 | 	mov	arg02, local07
0704c     B0 D9 B1 FD | 	call	#__system___string_cmp
07050     01 7A 56 F2 | 	cmps	result1, #1 wc
07054     20 00 90 CD |  if_b	jmp	#LR__0589
07058                 | LR__0588
07058     95 01 00 FF 
0705c     E9 B5 06 F6 | 	mov	local08, ##@LR__5902
07060     56 93 02 F6 | 	mov	arg01, local04
07064     5A 95 02 F6 | 	mov	arg02, local08
07068     94 D9 B1 FD | 	call	#__system___string_cmp
0706c     00 7A 0E F2 | 	cmp	result1, #0 wz
07070     00 7A 06 56 |  if_ne	mov	result1, #0
07074     60 00 90 5D |  if_ne	jmp	#LR__0594
07078                 | LR__0589
07078                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_"  then return false
07078     01 B8 0E F2 | 	cmp	local10, #1 wz
0707c     4C 00 90 5D |  if_ne	jmp	#LR__0591
07080     95 01 00 FF 
07084     EB 95 06 F6 | 	mov	arg02, ##@LR__5903
07088     56 93 02 F6 | 	mov	arg01, local04
0708c     70 D9 B1 FD | 	call	#__system___string_cmp
07090     00 7A 56 F2 | 	cmps	result1, #0 wc
07094     18 00 90 CD |  if_b	jmp	#LR__0590
07098     95 01 00 FF 
0709c     ED 95 06 F6 | 	mov	arg02, ##@LR__5904
070a0     56 93 02 F6 | 	mov	arg01, local04
070a4     58 D9 B1 FD | 	call	#__system___string_cmp
070a8     01 7A 56 F2 | 	cmps	result1, #1 wc
070ac     1C 00 90 CD |  if_b	jmp	#LR__0591
070b0                 | LR__0590
070b0     95 01 00 FF 
070b4     EF 95 06 F6 | 	mov	arg02, ##@LR__5905
070b8     56 93 02 F6 | 	mov	arg01, local04
070bc     40 D9 B1 FD | 	call	#__system___string_cmp
070c0     00 7A 0E F2 | 	cmp	result1, #0 wz
070c4     00 7A 06 56 |  if_ne	mov	result1, #0
070c8     0C 00 90 5D |  if_ne	jmp	#LR__0594
070cc                 | LR__0591
070cc     01 BA 06 F1 | 	add	local11, #1
070d0     98 FE 9F FD | 	jmp	#LR__0584
070d4                 | LR__0592
070d4                 | LR__0593
070d4                 | ' return true
070d4     01 7A 66 F6 | 	neg	result1, #1
070d8                 | LR__0594
070d8     E7 F0 03 F6 | 	mov	ptra, fp
070dc     F2 00 A0 FD | 	call	#popregs_
070e0                 | _isint_ret
070e0     2D 00 64 FD | 	ret
070e4                 | 
070e4                 | ' 
070e4                 | ' ' Check if the part is a positive decimal number.  
070e4                 | ' 
070e4                 | ' function isdec(s as string) as boolean
070e4                 | _isdec
070e4     05 CA 05 F6 | 	mov	COUNT_, #5
070e8     E8 00 A0 FD | 	call	#pushregs_
070ec     49 A7 02 F6 | 	mov	local01, arg01
070f0     49 A9 02 F6 | 	mov	local02, arg01
070f4     D7 06 48 FB | 	callpa	#(@LR__0601-@LR__0600)>>2,fcache_load_ptr_
070f8                 | LR__0600
070f8     54 7B CA FA | 	rdbyte	result1, local02 wz
070fc     01 A8 06 51 |  if_ne	add	local02, #1
07100     F4 FF 9F 5D |  if_ne	jmp	#LR__0600
07104                 | LR__0601
07104     49 A9 82 F1 | 	sub	local02, arg01
07108     54 7B 02 F6 | 	mov	result1, local02
0710c     3D A9 0A F6 | 	mov	local02, result1 wz
07110     00 7A 06 A6 |  if_e	mov	result1, #0
07114     80 00 90 AD |  if_e	jmp	#LR__0606
07118                 | ' for i=1 to l
07118     01 AA 06 F6 | 	mov	local03, #1
0711c     54 AD 02 F6 | 	mov	local04, local02
07120     01 AC 06 F1 | 	add	local04, #1
07124                 | LR__0602
07124     56 AB 52 F2 | 	cmps	local03, local04 wc
07128     68 00 90 3D |  if_ae	jmp	#LR__0605
0712c     53 93 02 F6 | 	mov	arg01, local01
07130     55 95 02 F6 | 	mov	arg02, local03
07134     01 96 06 F6 | 	mov	arg03, #1
07138     5C F2 B1 FD | 	call	#__system__Mid_S
0713c     3D AF 02 F6 | 	mov	local05, result1
07140                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
07140     95 01 00 FF 
07144     F1 95 06 F6 | 	mov	arg02, ##@LR__5906
07148     57 93 02 F6 | 	mov	arg01, local05
0714c     B0 D8 B1 FD | 	call	#__system___string_cmp
07150     00 7A 56 F2 | 	cmps	result1, #0 wc
07154     18 00 90 CD |  if_b	jmp	#LR__0603
07158     95 01 00 FF 
0715c     F3 95 06 F6 | 	mov	arg02, ##@LR__5907
07160     57 93 02 F6 | 	mov	arg01, local05
07164     98 D8 B1 FD | 	call	#__system___string_cmp
07168     01 7A 56 F2 | 	cmps	result1, #1 wc
0716c     1C 00 90 CD |  if_b	jmp	#LR__0604
07170                 | LR__0603
07170     95 01 00 FF 
07174     F5 95 06 F6 | 	mov	arg02, ##@LR__5908
07178     57 93 02 F6 | 	mov	arg01, local05
0717c     80 D8 B1 FD | 	call	#__system___string_cmp
07180     00 7A 0E F2 | 	cmp	result1, #0 wz
07184     00 7A 06 56 |  if_ne	mov	result1, #0
07188     0C 00 90 5D |  if_ne	jmp	#LR__0606
0718c                 | LR__0604
0718c     01 AA 06 F1 | 	add	local03, #1
07190     90 FF 9F FD | 	jmp	#LR__0602
07194                 | LR__0605
07194                 | ' return true
07194     01 7A 66 F6 | 	neg	result1, #1
07198                 | LR__0606
07198     E7 F0 03 F6 | 	mov	ptra, fp
0719c     F2 00 A0 FD | 	call	#popregs_
071a0                 | _isdec_ret
071a0     2D 00 64 FD | 	ret
071a4                 | 
071a4                 | ' 
071a4                 | ' ' Check if the part is a string.  
071a4                 | ' 
071a4                 | ' function isstring(s as string) as boolean
071a4                 | _isstring
071a4     01 CA 05 F6 | 	mov	COUNT_, #1
071a8     E8 00 A0 FD | 	call	#pushregs_
071ac                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
071ac     49 A7 02 F6 | 	mov	local01, arg01
071b0     01 94 06 F6 | 	mov	arg02, #1
071b4     C8 F0 B1 FD | 	call	#__system__Left_S
071b8     3D 93 02 F6 | 	mov	arg01, result1
071bc     95 01 00 FF 
071c0     F7 95 06 F6 | 	mov	arg02, ##@LR__5909
071c4     38 D8 B1 FD | 	call	#__system___string_cmp
071c8     00 7A 4E F2 | 	cmps	result1, #0 wz
071cc     28 00 90 5D |  if_ne	jmp	#LR__0610
071d0     53 93 02 F6 | 	mov	arg01, local01
071d4     01 94 06 F6 | 	mov	arg02, #1
071d8     2C F1 B1 FD | 	call	#__system__Right_S
071dc     3D 93 02 F6 | 	mov	arg01, result1
071e0     95 01 00 FF 
071e4     F9 95 06 F6 | 	mov	arg02, ##@LR__5910
071e8     14 D8 B1 FD | 	call	#__system___string_cmp
071ec     00 7A 4E F2 | 	cmps	result1, #0 wz
071f0     01 7A 66 A6 |  if_e	neg	result1, #1
071f4     04 00 90 AD |  if_e	jmp	#LR__0611
071f8                 | LR__0610
071f8     00 7A 06 F6 | 	mov	result1, #0
071fc                 | LR__0611
071fc     E7 F0 03 F6 | 	mov	ptra, fp
07200     F2 00 A0 FD | 	call	#popregs_
07204                 | _isstring_ret
07204     2D 00 64 FD | 	ret
07208                 | 
07208                 | ' 
07208                 | ' ' getnoteval. Returns the frequency of note token
07208                 | ' 
07208                 | ' function getnoteval(token) as single
07208                 | _getnoteval
07208     02 CA 05 F6 | 	mov	COUNT_, #2
0720c     E8 00 A0 FD | 	call	#pushregs_
07210     01 00 00 FF 
07214     00 93 86 F1 | 	sub	arg01, ##768
07218     49 95 52 F6 | 	abs	arg02, arg01 wc
0721c     0C 94 16 FD | 	qdiv	arg02, #12
07220     32 95 02 F6 | 	mov	arg02, objptr
07224     16 00 00 FF 
07228     38 94 06 F1 | 	add	arg02, ##11320
0722c     19 7A 62 FD | 	getqy	result1
07230     3D 7B 82 F6 | 	negc	result1, result1
07234     02 7A 66 F0 | 	shl	result1, #2
07238     4A 7B 02 F1 | 	add	result1, arg02
0723c     49 95 52 F6 | 	abs	arg02, arg01 wc
07240     0C 94 16 FD | 	qdiv	arg02, #12
07244     3D A7 02 FB | 	rdlong	local01, result1
07248     01 92 06 F6 | 	mov	arg01, #1
0724c                 | ' noteexp=1+(note/12) 
0724c                 | ' return (2.0^noteexp)*notebase
0724c     18 94 62 FD | 	getqx	arg02
07250     4A 93 82 F3 | 	sumc	arg01, arg02
07254     49 93 52 F6 | 	abs	arg01, arg01 wc
07258     1F A8 C6 C9 |  if_b	decod	local02, #31
0725c     00 A8 06 36 |  if_ae	mov	local02, #0
07260     40 FA B1 FD | 	call	#__system___float_fromuns
07264     54 7B 62 F5 | 	xor	result1, local02
07268     3D 95 02 F6 | 	mov	arg02, result1
0726c     1E 92 C6 F9 | 	decod	arg01, #30
07270     4C 0D B2 FD | 	call	#__system____builtin_powf
07274     3D 93 02 F6 | 	mov	arg01, result1
07278     53 95 02 F6 | 	mov	arg02, local01
0727c     28 FE B1 FD | 	call	#__system___float_mul
07280     E7 F0 03 F6 | 	mov	ptra, fp
07284     F2 00 A0 FD | 	call	#popregs_
07288                 | _getnoteval_ret
07288     2D 00 64 FD | 	ret
0728c                 | 
0728c                 | ' 
0728c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0728c                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
0728c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0728c                 | ' 
0728c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0728c                 | ' '
0728c                 | ' '               		REVERSE POLISH NOTATION PRECOMPILER
0728c                 | ' '
0728c                 | ' ' A precompiler gets the tokenized line at the input, and outputs the precompiled line that uses the reverse Polish notation.
0728c                 | ' ' That means the operation is done by firs placing the arguments on the stack, and then do the operation on a top of this stack.
0728c                 | ' ' The expression a=b*(c+d) is translated to push c, push d, add, push b, mul, push variable#, assign
0728c                 | ' ' If the precompiled line has a number that is >0, then it is added to the program and saved in the PSRAM using the 2-way list structure
0728c                 | ' ' If the line number=0, it is not saved, and instead it is immediately executed in the "interpret" function
0728c                 | ' ' 
0728c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0728c                 | ' 
0728c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0728c                 | ' ' Helper functions to manage program lines
0728c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0728c                 | ' 
0728c                 | ' '----- delete a line from a program
0728c                 | ' 
0728c                 | ' function deleteline(aline as ulong) as integer
0728c                 | _deleteline
0728c     05 CA 05 F6 | 	mov	COUNT_, #5
07290     E8 00 A0 FD | 	call	#pushregs_
07294     2C F0 07 F1 | 	add	ptra, #44
07298     49 A7 02 F6 | 	mov	local01, arg01
0729c     4C 00 00 FF 
072a0     2C 64 06 F1 | 	add	objptr, ##38956
072a4     32 A9 02 FB | 	rdlong	local02, objptr
072a8                 | ' 
072a8                 | ' searchptr=programstart
072a8                 | ' do
072a8     40 00 00 FF 
072ac     60 65 86 F1 | 	sub	objptr, ##33120
072b0                 | LR__0620
072b0     E7 92 02 F6 | 	mov	arg01, fp
072b4     14 92 06 F1 | 	add	arg01, #20
072b8     54 95 02 F6 | 	mov	arg02, local02
072bc     18 96 06 F6 | 	mov	arg03, #24
072c0     A0 C7 B1 FD | 	call	#_psram4_spin2_read1
072c4     54 97 02 F6 | 	mov	arg03, local02
072c8     28 CE 05 F1 | 	add	fp, #40
072cc     E7 A8 02 FB | 	rdlong	local02, fp
072d0     14 CE 85 F1 | 	sub	fp, #20
072d4     E7 94 02 FB | 	rdlong	arg02, fp
072d8     14 CE 85 F1 | 	sub	fp, #20
072dc     53 95 12 F2 | 	cmp	arg02, local01 wc
072e0     28 CE 05 C1 |  if_b	add	fp, #40
072e4     E7 AA 02 CB |  if_b	rdlong	local03, fp
072e8     28 CE 85 C1 |  if_b	sub	fp, #40
072ec     FF FF 3F CF 
072f0     FF AB 0E C2 |  if_b	cmp	local03, ##2147483647 wz
072f4     B8 FF 9F 4D |  if_c_and_nz	jmp	#LR__0620
072f8     0B 00 00 FF 
072fc     CC 64 86 F1 | 	sub	objptr, ##5836
07300                 | ' if header(0)<>aline then return -1						' if not =, then there is no line, return
07300     14 CE 05 F1 | 	add	fp, #20
07304     E7 AA 02 FB | 	rdlong	local03, fp
07308     14 CE 85 F1 | 	sub	fp, #20
0730c     53 AB 0A F2 | 	cmp	local03, local01 wz
07310     01 7A 66 56 |  if_ne	neg	result1, #1
07314     2C 02 90 5D |  if_ne	jmp	#LR__0625
07318     4B 93 02 F6 | 	mov	arg01, arg03
0731c     01 94 66 F6 | 	neg	arg02, #1
07320     4C 9B B1 FD | 	call	#_pslpoke
07324                 | ' pslpoke(lineptr2,$FFFF_FFFF) 							' flag the deleted line
07324                 | ' 
07324                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  			' this is one and only line in the program
07324     28 CE 05 F1 | 	add	fp, #40
07328     E7 96 02 FB | 	rdlong	arg03, fp
0732c     28 CE 85 F1 | 	sub	fp, #40
07330     FF FF 3F FF 
07334     FF 97 0E F2 | 	cmp	arg03, ##2147483647 wz
07338     24 CE 05 A1 |  if_e	add	fp, #36
0733c     E7 AC 02 AB |  if_e	rdlong	local04, fp
07340     24 CE 85 A1 |  if_e	sub	fp, #36
07344     FF FF 7F AF 
07348     FF AD 0E A2 |  if_e	cmp	local04, ##-1 wz
0734c     88 00 90 5D |  if_ne	jmp	#LR__0621
07350     4C 00 00 FF 
07354     2C 64 06 F1 | 	add	objptr, ##38956
07358     00 04 80 FF 
0735c     32 01 68 FC | 	wrlong	##524288, objptr
07360     07 00 00 FF 
07364     2C 64 86 F1 | 	sub	objptr, ##3628
07368     00 04 80 FF 
0736c     32 01 68 FC | 	wrlong	##524288, objptr
07370     07 00 00 FF 
07374     30 64 06 F1 | 	add	objptr, ##3632
07378     32 01 68 FC | 	wrlong	#0, objptr
0737c     04 64 06 F1 | 	add	objptr, #4
07380     FF FF FF FF 
07384     32 FF 6B FC | 	wrlong	##-1, objptr
07388     4C 00 00 FF 
0738c     34 64 86 F1 | 	sub	objptr, ##38964
07390     00 92 06 F6 | 	mov	arg01, #0
07394     01 94 66 F6 | 	neg	arg02, #1
07398     D4 9A B1 FD | 	call	#_pslpoke
0739c     10 92 06 F6 | 	mov	arg01, #16
073a0     01 94 66 F6 | 	neg	arg02, #1
073a4     C8 9A B1 FD | 	call	#_pslpoke
073a8     14 92 06 F6 | 	mov	arg01, #20
073ac     1E 94 CE F9 | 	bmask	arg02, #30
073b0     BC 9A B1 FD | 	call	#_pslpoke
073b4     52 00 00 FF 
073b8     5C 64 06 F1 | 	add	objptr, ##42076
073bc     00 04 80 FF 
073c0     32 01 68 FC | 	wrlong	##524288, objptr
073c4     04 64 06 F1 | 	add	objptr, #4
073c8     00 04 80 FF 
073cc     32 01 68 FC | 	wrlong	##524288, objptr
073d0     52 00 00 FF 
073d4     60 64 86 F1 | 	sub	objptr, ##42080
073d8                 | LR__0621
073d8                 | ' 
073d8                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' this is the last, and not first, line of the program
073d8     28 CE 05 F1 | 	add	fp, #40
073dc     E7 AE 02 FB | 	rdlong	local05, fp
073e0     28 CE 85 F1 | 	sub	fp, #40
073e4     FF FF 3F FF 
073e8     FF AF 0E F2 | 	cmp	local05, ##2147483647 wz
073ec     74 00 90 5D |  if_ne	jmp	#LR__0622
073f0     24 CE 05 F1 | 	add	fp, #36
073f4     E7 AC 02 FB | 	rdlong	local04, fp
073f8     24 CE 85 F1 | 	sub	fp, #36
073fc     FF FF 7F FF 
07400     FF AD 0E F2 | 	cmp	local04, ##-1 wz
07404     5C 00 90 AD |  if_e	jmp	#LR__0622
07408     24 CE 05 F1 | 	add	fp, #36
0740c     E7 92 02 FB | 	rdlong	arg01, fp
07410     24 CE 85 F1 | 	sub	fp, #36
07414     14 92 06 F1 | 	add	arg01, #20
07418     1E 94 CE F9 | 	bmask	arg02, #30
0741c     50 9A B1 FD | 	call	#_pslpoke
07420     24 CE 05 F1 | 	add	fp, #36
07424     E7 AE 02 FB | 	rdlong	local05, fp
07428     4C 00 00 FF 
0742c     34 64 06 F1 | 	add	objptr, ##38964
07430     32 AF 62 FC | 	wrlong	local05, objptr
07434     4C 00 00 FF 
07438     34 64 86 F1 | 	sub	objptr, ##38964
0743c     E7 92 02 FB | 	rdlong	arg01, fp
07440     24 CE 85 F1 | 	sub	fp, #36
07444     48 9B B1 FD | 	call	#_pslpeek
07448     4C 00 00 FF 
0744c     30 64 06 F1 | 	add	objptr, ##38960
07450     32 7B 62 FC | 	wrlong	result1, objptr
07454     4C 00 00 FF 
07458     30 64 86 F1 | 	sub	objptr, ##38960
0745c                 | '   pslpoke(header(4)+20,$7FFF_FFFF) 						' unlink the previous line
0745c                 | '   lastlineptr=header(4)           						' keep the last line pointer to avoid searching while sequentially adding a new line
0745c                 | '   lastline=pslpeek(header(4))
0745c                 | '   return 0
0745c     00 7A 06 F6 | 	mov	result1, #0
07460     E0 00 90 FD | 	jmp	#LR__0625
07464                 | LR__0622
07464                 | ' 
07464                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then 			' this is the first line, but not the last
07464     28 CE 05 F1 | 	add	fp, #40
07468     E7 AE 02 FB | 	rdlong	local05, fp
0746c     28 CE 85 F1 | 	sub	fp, #40
07470     FF FF 3F FF 
07474     FF AF 0E F2 | 	cmp	local05, ##2147483647 wz
07478     58 00 90 AD |  if_e	jmp	#LR__0623
0747c     24 CE 05 F1 | 	add	fp, #36
07480     E7 AC 02 FB | 	rdlong	local04, fp
07484     24 CE 85 F1 | 	sub	fp, #36
07488     FF FF 7F FF 
0748c     FF AD 0E F2 | 	cmp	local04, ##-1 wz
07490     40 00 90 5D |  if_ne	jmp	#LR__0623
07494     28 CE 05 F1 | 	add	fp, #40
07498     E7 92 02 FB | 	rdlong	arg01, fp
0749c     28 CE 85 F1 | 	sub	fp, #40
074a0     10 92 06 F1 | 	add	arg01, #16
074a4     01 94 66 F6 | 	neg	arg02, #1
074a8     C4 99 B1 FD | 	call	#_pslpoke
074ac     28 CE 05 F1 | 	add	fp, #40
074b0     E7 AE 02 FB | 	rdlong	local05, fp
074b4     28 CE 85 F1 | 	sub	fp, #40
074b8     4C 00 00 FF 
074bc     2C 64 06 F1 | 	add	objptr, ##38956
074c0     32 AF 62 FC | 	wrlong	local05, objptr
074c4     4C 00 00 FF 
074c8     2C 64 86 F1 | 	sub	objptr, ##38956
074cc                 | ' '   print "deleted first line"
074cc                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
074cc                 | '   programstart=header(5) 							' adjust the program start to point on the first new line
074cc                 | '   return 0
074cc     00 7A 06 F6 | 	mov	result1, #0
074d0     70 00 90 FD | 	jmp	#LR__0625
074d4                 | LR__0623
074d4                 | ' 
074d4                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' the line is not first and not last
074d4     28 CE 05 F1 | 	add	fp, #40
074d8     E7 AE 02 FB | 	rdlong	local05, fp
074dc     28 CE 85 F1 | 	sub	fp, #40
074e0     FF FF 3F FF 
074e4     FF AF 0E F2 | 	cmp	local05, ##2147483647 wz
074e8     24 CE 05 51 |  if_ne	add	fp, #36
074ec     E7 AC 02 5B |  if_ne	rdlong	local04, fp
074f0     24 CE 85 51 |  if_ne	sub	fp, #36
074f4     FF FF 7F 5F 
074f8     FF AD 0E 52 |  if_ne	cmp	local04, ##-1 wz
074fc     40 00 90 AD |  if_e	jmp	#LR__0624
07500     28 CE 05 F1 | 	add	fp, #40
07504     E7 92 02 FB | 	rdlong	arg01, fp
07508     10 92 06 F1 | 	add	arg01, #16
0750c     04 CE 85 F1 | 	sub	fp, #4
07510     E7 94 02 FB | 	rdlong	arg02, fp
07514     24 CE 85 F1 | 	sub	fp, #36
07518     54 99 B1 FD | 	call	#_pslpoke
0751c     24 CE 05 F1 | 	add	fp, #36
07520     E7 92 02 FB | 	rdlong	arg01, fp
07524     14 92 06 F1 | 	add	arg01, #20
07528     04 CE 05 F1 | 	add	fp, #4
0752c     E7 94 02 FB | 	rdlong	arg02, fp
07530     28 CE 85 F1 | 	sub	fp, #40
07534     38 99 B1 FD | 	call	#_pslpoke
07538                 | '    pslpoke(header(5)+16,header(4))  
07538                 | '    pslpoke(header(4)+20, header(5))
07538                 | '    return 0
07538     00 7A 06 F6 | 	mov	result1, #0
0753c     04 00 90 FD | 	jmp	#LR__0625
07540                 | LR__0624
07540     00 7A 06 F6 | 	mov	result1, #0
07544                 | LR__0625
07544     E7 F0 03 F6 | 	mov	ptra, fp
07548     F2 00 A0 FD | 	call	#popregs_
0754c                 | _deleteline_ret
0754c     2D 00 64 FD | 	ret
07550                 | 
07550                 | ' 
07550                 | ' '----- Save a line to the PSRAM. Called from insertline and add_line_at_end
07550                 | ' 
07550                 | ' sub save_line
07550                 | _save_line
07550     03 CA 05 F6 | 	mov	COUNT_, #3
07554     E8 00 A0 FD | 	call	#pushregs_
07558     4C 00 00 FF 
0755c     20 64 06 F1 | 	add	objptr, ##38944
07560     32 97 02 FB | 	rdlong	arg03, objptr
07564     01 96 06 F1 | 	add	arg03, #1
07568     05 00 00 FF 
0756c     18 64 86 F1 | 	sub	objptr, ##2584
07570     32 95 02 FB | 	rdlong	arg02, objptr
07574     4B 95 02 FD | 	qmul	arg02, arg03
07578     0E 00 00 FF 
0757c     44 64 86 F1 | 	sub	objptr, ##7236
07580     32 93 02 FB | 	rdlong	arg01, objptr
07584     38 00 00 FF 
07588     C4 65 86 F1 | 	sub	objptr, ##29124
0758c     49 A7 02 F6 | 	mov	local01, arg01
07590     18 A8 62 FD | 	getqx	local02
07594     D7 06 48 FB | 	callpa	#(@LR__0631-@LR__0630)>>2,fcache_load_ptr_
07598                 | LR__0630
07598     53 7B CA FA | 	rdbyte	result1, local01 wz
0759c     01 A6 06 51 |  if_ne	add	local01, #1
075a0     F4 FF 9F 5D |  if_ne	jmp	#LR__0630
075a4                 | LR__0631
075a4     49 A7 82 F1 | 	sub	local01, arg01
075a8     03 A6 CE F7 | 	test	local01, #3 wz
075ac     02 A6 46 50 |  if_ne	shr	local01, #2
075b0     01 A6 06 51 |  if_ne	add	local01, #1
075b4     02 A6 66 50 |  if_ne	shl	local01, #2
075b8     54 AB 02 F6 | 	mov	local03, local02
075bc     53 AB 02 F1 | 	add	local03, local01
075c0     45 00 00 FF 
075c4     00 64 06 F1 | 	add	objptr, ##35328
075c8     32 97 02 FB | 	rdlong	arg03, objptr
075cc     54 97 02 F1 | 	add	arg03, local02
075d0     04 00 00 FF 
075d4     28 64 06 F1 | 	add	objptr, ##2088
075d8     32 97 62 FC | 	wrlong	arg03, objptr
075dc     04 64 06 F1 | 	add	objptr, #4
075e0     32 A7 62 FC | 	wrlong	local01, objptr
075e4     0C 64 86 F1 | 	sub	objptr, #12
075e8     32 93 02 F6 | 	mov	arg01, objptr
075ec     04 00 00 FF 
075f0     20 64 86 F1 | 	sub	objptr, ##2080
075f4     32 95 02 FB | 	rdlong	arg02, objptr
075f8     54 97 02 F6 | 	mov	arg03, local02
075fc     39 00 00 FF 
07600     34 65 86 F1 | 	sub	objptr, ##29492
07604     F8 C4 B1 FD | 	call	#_psram4_spin2_write
07608     2D 00 00 FF 
0760c     F8 64 06 F1 | 	add	objptr, ##23288
07610     32 93 02 FB | 	rdlong	arg01, objptr
07614     0C 00 00 FF 
07618     3C 64 06 F1 | 	add	objptr, ##6204
0761c     32 95 02 FB | 	rdlong	arg02, objptr
07620     54 95 02 F1 | 	add	arg02, local02
07624     53 97 02 F6 | 	mov	arg03, local01
07628     39 00 00 FF 
0762c     34 65 86 F1 | 	sub	objptr, ##29492
07630     CC C4 B1 FD | 	call	#_psram4_spin2_write
07634     39 00 00 FF 
07638     34 65 06 F1 | 	add	objptr, ##29492
0763c     32 A7 02 FB | 	rdlong	local01, objptr
07640     55 A7 02 F1 | 	add	local01, local03
07644     32 A7 62 FC | 	wrlong	local01, objptr
07648     45 00 00 FF 
0764c     00 64 86 F1 | 	sub	objptr, ##35328
07650     E7 F0 03 F6 | 	mov	ptra, fp
07654     F2 00 A0 FD | 	call	#popregs_
07658                 | _save_line_ret
07658     2D 00 64 FD | 	ret
0765c                 | 
0765c                 | ' 
0765c                 | ' '----- Insert a new line into the middle of the program
0765c                 | ' 
0765c                 | ' function insertline(aline as ulong) as integer
0765c                 | _insertline
0765c     04 CA 05 F6 | 	mov	COUNT_, #4
07660     E8 00 A0 FD | 	call	#pushregs_
07664     28 F0 07 F1 | 	add	ptra, #40
07668     49 A7 02 F6 | 	mov	local01, arg01
0766c     4C 00 00 FF 
07670     2C 64 06 F1 | 	add	objptr, ##38956
07674     32 A9 02 FB | 	rdlong	local02, objptr
07678                 | ' 
07678                 | ' do
07678     40 00 00 FF 
0767c     60 65 86 F1 | 	sub	objptr, ##33120
07680                 | LR__0640
07680     E7 92 02 F6 | 	mov	arg01, fp
07684     10 92 06 F1 | 	add	arg01, #16
07688     54 95 02 F6 | 	mov	arg02, local02
0768c     18 96 06 F6 | 	mov	arg03, #24
07690     D0 C3 B1 FD | 	call	#_psram4_spin2_read1
07694     54 AB 02 F6 | 	mov	local03, local02
07698     24 CE 05 F1 | 	add	fp, #36
0769c     E7 A8 02 FB | 	rdlong	local02, fp
076a0     14 CE 85 F1 | 	sub	fp, #20
076a4     E7 96 02 FB | 	rdlong	arg03, fp
076a8     10 CE 85 F1 | 	sub	fp, #16
076ac     53 97 12 F2 | 	cmp	arg03, local01 wc
076b0     24 CE 05 C1 |  if_b	add	fp, #36
076b4     E7 AC 02 CB |  if_b	rdlong	local04, fp
076b8     24 CE 85 C1 |  if_b	sub	fp, #36
076bc     FF FF 3F CF 
076c0     FF AD 0E C2 |  if_b	cmp	local04, ##2147483647 wz
076c4     B8 FF 9F 4D |  if_c_and_nz	jmp	#LR__0640
076c8     0B 00 00 FF 
076cc     CC 64 86 F1 | 	sub	objptr, ##5836
076d0                 | ' 
076d0                 | ' if header(0)=aline then return -1 				' delete it first
076d0     10 CE 05 F1 | 	add	fp, #16
076d4     E7 AC 02 FB | 	rdlong	local04, fp
076d8     10 CE 85 F1 | 	sub	fp, #16
076dc     53 AD 0A F2 | 	cmp	local04, local01 wz
076e0     01 7A 66 A6 |  if_e	neg	result1, #1
076e4     24 01 90 AD |  if_e	jmp	#LR__0643
076e8                 | ' if header(0)<aline then return -2 				' end of program reached
076e8     10 CE 05 F1 | 	add	fp, #16
076ec     E7 AC 02 FB | 	rdlong	local04, fp
076f0     10 CE 85 F1 | 	sub	fp, #16
076f4     53 AD 12 F2 | 	cmp	local04, local01 wc
076f8     02 7A 66 C6 |  if_b	neg	result1, #2
076fc     0C 01 90 CD |  if_b	jmp	#LR__0643
07700                 | ' 
07700                 | ' if  header(4)=$FFFF_FFFF then 					' this is the first line in the program so the inserted line will be new first
07700     20 CE 05 F1 | 	add	fp, #32
07704     E7 AC 02 FB | 	rdlong	local04, fp
07708     20 CE 85 F1 | 	sub	fp, #32
0770c     FF FF 7F FF 
07710     FF AD 0E F2 | 	cmp	local04, ##-1 wz
07714     64 00 90 5D |  if_ne	jmp	#LR__0641
07718     45 00 00 FF 
0771c     00 64 06 F1 | 	add	objptr, ##35328
07720     32 AD 02 FB | 	rdlong	local04, objptr
07724     07 00 00 FF 
07728     2C 64 06 F1 | 	add	objptr, ##3628
0772c     32 AD 62 FC | 	wrlong	local04, objptr
07730     55 93 02 F6 | 	mov	arg01, local03
07734     10 92 06 F1 | 	add	arg01, #16
07738     07 00 00 FF 
0773c     2C 64 86 F1 | 	sub	objptr, ##3628
07740     32 95 02 FB | 	rdlong	arg02, objptr
07744     45 00 00 FF 
07748     00 64 86 F1 | 	sub	objptr, ##35328
0774c     20 97 B1 FD | 	call	#_pslpoke
07750     49 00 00 FF 
07754     30 64 06 F1 | 	add	objptr, ##37424
07758     FF FF FF FF 
0775c     32 FF 6B FC | 	wrlong	##-1, objptr
07760     04 64 06 F1 | 	add	objptr, #4
07764     32 AB 62 FC | 	wrlong	local03, objptr
07768     49 00 00 FF 
0776c     34 64 86 F1 | 	sub	objptr, ##37428
07770     DC FD BF FD | 	call	#_save_line
07774                 | '   programstart=programptr
07774                 | '   pslpoke(lineptr2+16,programptr)
07774                 | '   ucompiledline(4)=$FFFF_FFFF
07774                 | '   ucompiledline(5)=lineptr2
07774                 | '   save_line
07774                 | '   return 0
07774     00 7A 06 F6 | 	mov	result1, #0
07778     90 00 90 FD | 	jmp	#LR__0643
0777c                 | LR__0641
0777c                 | ' 
0777c                 | ' if header(4)<>$FFFF_FFFF then 					' this is not first line of the program. It doesn't matter if it is last as we will insert a new line before
0777c     20 CE 05 F1 | 	add	fp, #32
07780     E7 AC 02 FB | 	rdlong	local04, fp
07784     20 CE 85 F1 | 	sub	fp, #32
07788     FF FF 7F FF 
0778c     FF AD 0E F2 | 	cmp	local04, ##-1 wz
07790     74 00 90 AD |  if_e	jmp	#LR__0642
07794     20 CE 05 F1 | 	add	fp, #32
07798     E7 AC 02 FB | 	rdlong	local04, fp
0779c     20 CE 85 F1 | 	sub	fp, #32
077a0     49 00 00 FF 
077a4     30 64 06 F1 | 	add	objptr, ##37424
077a8     32 AD 62 FC | 	wrlong	local04, objptr
077ac     04 64 06 F1 | 	add	objptr, #4
077b0     32 AB 62 FC | 	wrlong	local03, objptr
077b4     10 AA 06 F1 | 	add	local03, #16
077b8     04 00 00 FF 
077bc     34 64 86 F1 | 	sub	objptr, ##2100
077c0     32 95 02 FB | 	rdlong	arg02, objptr
077c4     45 00 00 FF 
077c8     00 64 86 F1 | 	sub	objptr, ##35328
077cc     55 93 02 F6 | 	mov	arg01, local03
077d0     9C 96 B1 FD | 	call	#_pslpoke
077d4     20 CE 05 F1 | 	add	fp, #32
077d8     E7 92 02 FB | 	rdlong	arg01, fp
077dc     20 CE 85 F1 | 	sub	fp, #32
077e0     14 92 06 F1 | 	add	arg01, #20
077e4     45 00 00 FF 
077e8     00 64 06 F1 | 	add	objptr, ##35328
077ec     32 95 02 FB | 	rdlong	arg02, objptr
077f0     45 00 00 FF 
077f4     00 64 86 F1 | 	sub	objptr, ##35328
077f8     74 96 B1 FD | 	call	#_pslpoke
077fc     50 FD BF FD | 	call	#_save_line
07800                 | '   ucompiledline(4)=header(4)
07800                 | '   ucompiledline(5)=lineptr2
07800                 | '   pslpoke(lineptr2+16,programptr)
07800                 | '   pslpoke(header(4)+20,programptr)
07800                 | '   save_line
07800                 | '   return 0
07800     00 7A 06 F6 | 	mov	result1, #0
07804     04 00 90 FD | 	jmp	#LR__0643
07808                 | LR__0642
07808     00 7A 06 F6 | 	mov	result1, #0
0780c                 | LR__0643
0780c     E7 F0 03 F6 | 	mov	ptra, fp
07810     F2 00 A0 FD | 	call	#popregs_
07814                 | _insertline_ret
07814     2D 00 64 FD | 	ret
07818                 | 
07818                 | ' 
07818                 | ' '----- Adds a new line at the end of the program
07818                 | ' 
07818                 | ' sub add_line_at_end(aline) 
07818                 | _add_line_at_end
07818     4C 00 00 FF 
0781c     30 64 06 F1 | 	add	objptr, ##38960
07820     32 93 62 FC | 	wrlong	arg01, objptr
07824     04 64 06 F1 | 	add	objptr, #4
07828     32 95 02 FB | 	rdlong	arg02, objptr
0782c     03 00 00 FF 
07830     04 64 86 F1 | 	sub	objptr, ##1540
07834     32 95 62 FC | 	wrlong	arg02, objptr
07838     03 00 00 FF 
0783c     04 64 06 F1 | 	add	objptr, ##1540
07840     32 93 02 FB | 	rdlong	arg01, objptr
07844     14 92 06 F1 | 	add	arg01, #20
07848     07 00 00 FF 
0784c     34 64 86 F1 | 	sub	objptr, ##3636
07850     32 95 02 FB | 	rdlong	arg02, objptr
07854     45 00 00 FF 
07858     00 64 86 F1 | 	sub	objptr, ##35328
0785c     10 96 B1 FD | 	call	#_pslpoke
07860     45 00 00 FF 
07864     00 64 06 F1 | 	add	objptr, ##35328
07868     32 95 02 FB | 	rdlong	arg02, objptr
0786c     07 00 00 FF 
07870     34 64 06 F1 | 	add	objptr, ##3636
07874     32 95 62 FC | 	wrlong	arg02, objptr
07878     03 00 00 FF 
0787c     00 64 86 F1 | 	sub	objptr, ##1536
07880     FF FF BF FF 
07884     32 FF 6B FC | 	wrlong	##2147483647, objptr
07888                 | ' 
07888                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
07888                 | ' if programptr=memlo then ucompiledline(4)=$FFFFFFFF ' that is the first line
07888     04 00 00 FF 
0788c     34 64 86 F1 | 	sub	objptr, ##2100
07890     32 95 02 FB | 	rdlong	arg02, objptr
07894     45 00 00 FF 
07898     00 64 86 F1 | 	sub	objptr, ##35328
0789c     00 04 00 FF 
078a0     00 94 0E F2 | 	cmp	arg02, ##524288 wz
078a4     49 00 00 AF 
078a8     30 64 06 A1 |  if_e	add	objptr, ##37424
078ac     FF FF FF AF 
078b0     32 FF 6B AC |  if_e	wrlong	##-1, objptr
078b4     49 00 00 AF 
078b8     30 64 86 A1 |  if_e	sub	objptr, ##37424
078bc     90 FC BF FD | 	call	#_save_line
078c0     45 00 00 FF 
078c4     00 64 06 F1 | 	add	objptr, ##35328
078c8     32 93 02 FB | 	rdlong	arg01, objptr
078cc     45 00 00 FF 
078d0     00 64 86 F1 | 	sub	objptr, ##35328
078d4     01 94 66 F6 | 	neg	arg02, #1
078d8     94 95 B1 FD | 	call	#_pslpoke
078dc                 | _add_line_at_end_ret
078dc     2D 00 64 FD | 	ret
078e0                 | 
078e0                 | ' 
078e0                 | ' '--------------------------------------------------------------------------------------------------------------------------
078e0                 | ' '---------------------------------- End of line managing helper functions -------------------------------------------------
078e0                 | ' '--------------------------------------------------------------------------------------------------------------------------
078e0                 | ' 
078e0                 | ' '--------------------------------------------------------------------------------------------------------------------------
078e0                 | ' '--------------------------------------- Compilers ------------------------------------------------------------------------
078e0                 | ' '--------------------------------------------------------------------------------------------------------------------------
078e0                 | ' 
078e0                 | ' '--- Do a main compilation task for commands, called from compile(), returns an error code
078e0                 | ' 
078e0                 | ' function compile_immediate(linetype as ulong, aline as ulong) as integer
078e0                 | _compile_immediate
078e0     0A CA 05 F6 | 	mov	COUNT_, #10
078e4     E8 00 A0 FD | 	call	#pushregs_
078e8                 | _compile_immediate_enter
078e8     49 AD 02 F6 | 	mov	local04, arg01
078ec     4A AF 02 F6 | 	mov	local05, arg02
078f0     00 B0 06 F6 | 	mov	local06, #0
078f4     00 B2 06 F6 | 	mov	local07, #0
078f8     00 B4 06 F6 | 	mov	local08, #0
078fc                 | ' 
078fc                 | ' ' linetype=cont+1
078fc                 | ' ' 1 : this is the first part of the line that will continue
078fc                 | ' ' 2 - this is the continuation of the line
078fc                 | ' ' 3 - this is the last continued line
078fc                 | ' ' 4 - this is the one and only part
078fc                 | ' ' 5 - continued after if/else
078fc                 | ' 
078fc                 | ' err=0
078fc                 | ' cmd=0
078fc                 | ' vars=0
078fc                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 
078fc     02 AC 0E F2 | 	cmp	local04, #2 wz
07900     03 AC 0E 52 |  if_ne	cmp	local04, #3 wz
07904     36 00 00 AF 
07908     B4 65 06 A1 |  if_e	add	objptr, ##28084
0790c     32 B3 02 AB |  if_e	rdlong	local07, objptr
07910     02 00 00 AF 
07914     34 64 06 A1 |  if_e	add	objptr, ##1076
07918     32 03 68 AC |  if_e	wrlong	#1, objptr
0791c     38 00 00 AF 
07920     E8 65 86 A1 |  if_e	sub	objptr, ##29160
07924                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
07924     04 AC 0E F2 | 	cmp	local04, #4 wz
07928     01 AC 0E 52 |  if_ne	cmp	local04, #1 wz
0792c     2C 00 90 5D |  if_ne	jmp	#LR__0650
07930     36 00 00 FF 
07934     BC 65 06 F1 | 	add	objptr, ##28092
07938     32 B3 02 FB | 	rdlong	local07, objptr
0793c     02 00 00 FF 
07940     2C 64 06 F1 | 	add	objptr, ##1068
07944     32 05 68 FC | 	wrlong	#2, objptr
07948     13 00 00 FF 
0794c     38 64 06 F1 | 	add	objptr, ##9784
07950     32 05 68 FC | 	wrlong	#2, objptr
07954     4C 00 00 FF 
07958     20 64 86 F1 | 	sub	objptr, ##38944
0795c                 | LR__0650
0795c                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 
0795c     05 AC 0E F2 | 	cmp	local04, #5 wz
07960     40 00 90 5D |  if_ne	jmp	#LR__0651
07964     38 00 00 FF 
07968     E8 65 06 F1 | 	add	objptr, ##29160
0796c     32 7D 02 FB | 	rdlong	result2, objptr
07970     3E B7 02 F6 | 	mov	local09, result2
07974     03 B6 66 F0 | 	shl	local09, #3
07978     02 00 00 FF 
0797c     38 64 86 F1 | 	sub	objptr, ##1080
07980     32 B7 02 F1 | 	add	local09, objptr
07984     04 B6 06 F1 | 	add	local09, #4
07988     5B B3 02 FB | 	rdlong	local07, local09
0798c     01 7C 06 F1 | 	add	result2, #1
07990     02 00 00 FF 
07994     38 64 06 F1 | 	add	objptr, ##1080
07998     32 7D 62 FC | 	wrlong	result2, objptr
0799c     38 00 00 FF 
079a0     E8 65 86 F1 | 	sub	objptr, ##29160
079a4                 | LR__0651
079a4                 | ' 
079a4                 | ' 'print  "In compile_immediate cmd=:", cmd
079a4                 | ' 451 select case cmd
079a4     5C B2 0E F2 | 	cmp	local07, #92 wz
079a8     E8 02 90 AD |  if_e	jmp	#LR__0652
079ac     B9 B2 0E F2 | 	cmp	local07, #185 wz
079b0     EC 02 90 AD |  if_e	jmp	#LR__0653
079b4     47 B2 0E F2 | 	cmp	local07, #71 wz
079b8     F4 02 90 AD |  if_e	jmp	#LR__0654
079bc     59 B2 0E F2 | 	cmp	local07, #89 wz
079c0     FC 02 90 AD |  if_e	jmp	#LR__0655
079c4     C3 B2 0E F2 | 	cmp	local07, #195 wz
079c8     04 03 90 AD |  if_e	jmp	#LR__0656
079cc     45 B2 0E F2 | 	cmp	local07, #69 wz
079d0     08 03 90 AD |  if_e	jmp	#LR__0657
079d4     69 B2 0E F2 | 	cmp	local07, #105 wz
079d8     10 03 90 AD |  if_e	jmp	#LR__0658
079dc     40 B2 0E F2 | 	cmp	local07, #64 wz
079e0     18 07 90 AD |  if_e	jmp	#LR__0735
079e4     B4 B2 0E F2 | 	cmp	local07, #180 wz
079e8     0C 03 90 AD |  if_e	jmp	#LR__0659
079ec     49 B2 0E F2 | 	cmp	local07, #73 wz
079f0     10 03 90 AD |  if_e	jmp	#LR__0660
079f4     C4 B2 0E F2 | 	cmp	local07, #196 wz
079f8     14 03 90 AD |  if_e	jmp	#LR__0661
079fc     AE B2 0E F2 | 	cmp	local07, #174 wz
07a00     18 03 90 AD |  if_e	jmp	#LR__0662
07a04     B0 B2 0E F2 | 	cmp	local07, #176 wz
07a08     1C 03 90 AD |  if_e	jmp	#LR__0663
07a0c     AF B2 0E F2 | 	cmp	local07, #175 wz
07a10     20 03 90 AD |  if_e	jmp	#LR__0664
07a14     B1 B2 0E F2 | 	cmp	local07, #177 wz
07a18     24 03 90 AD |  if_e	jmp	#LR__0665
07a1c     CF B2 0E F2 | 	cmp	local07, #207 wz
07a20     28 03 90 AD |  if_e	jmp	#LR__0666
07a24     68 B2 0E F2 | 	cmp	local07, #104 wz
07a28     2C 03 90 AD |  if_e	jmp	#LR__0667
07a2c     B7 B2 0E F2 | 	cmp	local07, #183 wz
07a30     C8 06 90 AD |  if_e	jmp	#LR__0735
07a34     D9 B2 0E F2 | 	cmp	local07, #217 wz
07a38     28 03 90 AD |  if_e	jmp	#LR__0668
07a3c     74 B2 0E F2 | 	cmp	local07, #116 wz
07a40     2C 03 90 AD |  if_e	jmp	#LR__0669
07a44     73 B2 0E F2 | 	cmp	local07, #115 wz
07a48     34 03 90 AD |  if_e	jmp	#LR__0670
07a4c     6C B2 0E F2 | 	cmp	local07, #108 wz
07a50     3C 03 90 AD |  if_e	jmp	#LR__0671
07a54     89 B2 0E F2 | 	cmp	local07, #137 wz
07a58     A0 06 90 AD |  if_e	jmp	#LR__0735
07a5c     C2 B2 0E F2 | 	cmp	local07, #194 wz
07a60     3C 03 90 AD |  if_e	jmp	#LR__0672
07a64     72 B2 0E F2 | 	cmp	local07, #114 wz
07a68     40 03 90 AD |  if_e	jmp	#LR__0673
07a6c     5D B2 0E F2 | 	cmp	local07, #93 wz
07a70     44 03 90 AD |  if_e	jmp	#LR__0674
07a74     96 B2 0E F2 | 	cmp	local07, #150 wz
07a78     4C 03 90 AD |  if_e	jmp	#LR__0675
07a7c     43 B2 0E F2 | 	cmp	local07, #67 wz
07a80     50 03 90 AD |  if_e	jmp	#LR__0676
07a84     5A B2 0E F2 | 	cmp	local07, #90 wz
07a88     58 03 90 AD |  if_e	jmp	#LR__0677
07a8c     AB B2 0E F2 | 	cmp	local07, #171 wz
07a90     68 06 90 AD |  if_e	jmp	#LR__0735
07a94     BD B2 0E F2 | 	cmp	local07, #189 wz
07a98     58 03 90 AD |  if_e	jmp	#LR__0678
07a9c     BB B2 0E F2 | 	cmp	local07, #187 wz
07aa0     60 03 90 AD |  if_e	jmp	#LR__0679
07aa4     4E B2 0E F2 | 	cmp	local07, #78 wz
07aa8     68 03 90 AD |  if_e	jmp	#LR__0680
07aac     A9 B2 0E F2 | 	cmp	local07, #169 wz
07ab0     80 03 90 AD |  if_e	jmp	#LR__0682
07ab4     46 B2 0E F2 | 	cmp	local07, #70 wz
07ab8     98 03 90 AD |  if_e	jmp	#LR__0684
07abc     71 B2 0E F2 | 	cmp	local07, #113 wz
07ac0     A0 03 90 AD |  if_e	jmp	#LR__0685
07ac4     60 B2 0E F2 | 	cmp	local07, #96 wz
07ac8     A4 03 90 AD |  if_e	jmp	#LR__0686
07acc     4A B2 0E F2 | 	cmp	local07, #74 wz
07ad0     A8 03 90 AD |  if_e	jmp	#LR__0687
07ad4     48 B2 0E F2 | 	cmp	local07, #72 wz
07ad8     AC 03 90 AD |  if_e	jmp	#LR__0688
07adc     58 B2 0E F2 | 	cmp	local07, #88 wz
07ae0     B4 03 90 AD |  if_e	jmp	#LR__0689
07ae4     5F B2 0E F2 | 	cmp	local07, #95 wz
07ae8     BC 03 90 AD |  if_e	jmp	#LR__0690
07aec     B5 B2 0E F2 | 	cmp	local07, #181 wz
07af0     C0 03 90 AD |  if_e	jmp	#LR__0691
07af4     8A B2 0E F2 | 	cmp	local07, #138 wz
07af8     C8 03 90 AD |  if_e	jmp	#LR__0692
07afc     4C B2 0E F2 | 	cmp	local07, #76 wz
07b00     CC 03 90 AD |  if_e	jmp	#LR__0693
07b04     52 B2 0E F2 | 	cmp	local07, #82 wz
07b08     D4 03 90 AD |  if_e	jmp	#LR__0694
07b0c     97 B2 0E F2 | 	cmp	local07, #151 wz
07b10     DC 03 90 AD |  if_e	jmp	#LR__0695
07b14     C6 B2 0E F2 | 	cmp	local07, #198 wz
07b18     E0 03 90 AD |  if_e	jmp	#LR__0696
07b1c     61 B2 0E F2 | 	cmp	local07, #97 wz
07b20     E4 03 90 AD |  if_e	jmp	#LR__0697
07b24     63 B2 0E F2 | 	cmp	local07, #99 wz
07b28     E8 03 90 AD |  if_e	jmp	#LR__0698
07b2c     41 B2 0E F2 | 	cmp	local07, #65 wz
07b30     C8 05 90 AD |  if_e	jmp	#LR__0735
07b34     4B B2 0E F2 | 	cmp	local07, #75 wz
07b38     E4 03 90 AD |  if_e	jmp	#LR__0699
07b3c     C1 B2 0E F2 | 	cmp	local07, #193 wz
07b40     E8 03 90 AD |  if_e	jmp	#LR__0700
07b44     B3 B2 0E F2 | 	cmp	local07, #179 wz
07b48     EC 03 90 AD |  if_e	jmp	#LR__0701
07b4c     5E B2 0E F2 | 	cmp	local07, #94 wz
07b50     F0 03 90 AD |  if_e	jmp	#LR__0702
07b54     7C B2 0E F2 | 	cmp	local07, #124 wz
07b58     F4 03 90 AD |  if_e	jmp	#LR__0703
07b5c     7D B2 0E F2 | 	cmp	local07, #125 wz
07b60     F8 03 90 AD |  if_e	jmp	#LR__0704
07b64     7E B2 0E F2 | 	cmp	local07, #126 wz
07b68     FC 03 90 AD |  if_e	jmp	#LR__0705
07b6c     7F B2 0E F2 | 	cmp	local07, #127 wz
07b70     00 04 90 AD |  if_e	jmp	#LR__0706
07b74     80 B2 0E F2 | 	cmp	local07, #128 wz
07b78     04 04 90 AD |  if_e	jmp	#LR__0707
07b7c     55 B2 0E F2 | 	cmp	local07, #85 wz
07b80     08 04 90 AD |  if_e	jmp	#LR__0708
07b84     75 B2 0E F2 | 	cmp	local07, #117 wz
07b88     0C 04 90 AD |  if_e	jmp	#LR__0709
07b8c     42 B2 0E F2 | 	cmp	local07, #66 wz
07b90     14 04 90 AD |  if_e	jmp	#LR__0710
07b94     95 B2 0E F2 | 	cmp	local07, #149 wz
07b98     1C 04 90 AD |  if_e	jmp	#LR__0711
07b9c     AC B2 0E F2 | 	cmp	local07, #172 wz
07ba0     58 05 90 AD |  if_e	jmp	#LR__0735
07ba4     81 B2 0E F2 | 	cmp	local07, #129 wz
07ba8     18 04 90 AD |  if_e	jmp	#LR__0712
07bac     44 B2 0E F2 | 	cmp	local07, #68 wz
07bb0     1C 04 90 AD |  if_e	jmp	#LR__0713
07bb4     BC B2 0E F2 | 	cmp	local07, #188 wz
07bb8     20 04 90 AD |  if_e	jmp	#LR__0714
07bbc     88 B2 0E F2 | 	cmp	local07, #136 wz
07bc0     38 05 90 AD |  if_e	jmp	#LR__0735
07bc4     B6 B2 0E F2 | 	cmp	local07, #182 wz
07bc8     20 04 90 AD |  if_e	jmp	#LR__0715
07bcc     92 B2 0E F2 | 	cmp	local07, #146 wz
07bd0     28 04 90 AD |  if_e	jmp	#LR__0716
07bd4     BE B2 0E F2 | 	cmp	local07, #190 wz
07bd8     DC 05 90 AD |  if_e	jmp	#LR__0736
07bdc     C7 B2 0E F2 | 	cmp	local07, #199 wz
07be0     D4 B2 0E 52 |  if_ne	cmp	local07, #212 wz
07be4     AA B2 0E 52 |  if_ne	cmp	local07, #170 wz
07be8     10 05 90 AD |  if_e	jmp	#LR__0735
07bec     4D B2 0E F2 | 	cmp	local07, #77 wz
07bf0     14 04 90 AD |  if_e	jmp	#LR__0717
07bf4     51 B2 0E F2 | 	cmp	local07, #81 wz
07bf8     1C 04 90 AD |  if_e	jmp	#LR__0718
07bfc     DA B2 0E F2 | 	cmp	local07, #218 wz
07c00     24 04 90 AD |  if_e	jmp	#LR__0719
07c04     D2 B2 0E F2 | 	cmp	local07, #210 wz
07c08     28 04 90 AD |  if_e	jmp	#LR__0720
07c0c     8E B2 0E F2 | 	cmp	local07, #142 wz
07c10     30 04 90 AD |  if_e	jmp	#LR__0721
07c14     90 B2 0E F2 | 	cmp	local07, #144 wz
07c18     34 04 90 AD |  if_e	jmp	#LR__0722
07c1c     8D B2 0E F2 | 	cmp	local07, #141 wz
07c20     38 04 90 AD |  if_e	jmp	#LR__0723
07c24     8C B2 0E F2 | 	cmp	local07, #140 wz
07c28     3C 04 90 AD |  if_e	jmp	#LR__0724
07c2c     91 B2 0E F2 | 	cmp	local07, #145 wz
07c30     40 04 90 AD |  if_e	jmp	#LR__0725
07c34     8B B2 0E F2 | 	cmp	local07, #139 wz
07c38     44 04 90 AD |  if_e	jmp	#LR__0726
07c3c     8F B2 0E F2 | 	cmp	local07, #143 wz
07c40     48 04 90 AD |  if_e	jmp	#LR__0727
07c44     B2 B2 0E F2 | 	cmp	local07, #178 wz
07c48     4C 04 90 AD |  if_e	jmp	#LR__0728
07c4c     6D B2 0E F2 | 	cmp	local07, #109 wz
07c50     54 04 90 AD |  if_e	jmp	#LR__0729
07c54     70 B2 0E F2 | 	cmp	local07, #112 wz
07c58     A0 04 90 AD |  if_e	jmp	#LR__0735
07c5c     56 B2 0E F2 | 	cmp	local07, #86 wz
07c60     50 04 90 AD |  if_e	jmp	#LR__0730
07c64     57 B2 0E F2 | 	cmp	local07, #87 wz
07c68     90 04 90 AD |  if_e	jmp	#LR__0735
07c6c     79 B2 0E F2 | 	cmp	local07, #121 wz
07c70     4C 04 90 AD |  if_e	jmp	#LR__0731
07c74     77 B2 0E F2 | 	cmp	local07, #119 wz
07c78     50 04 90 AD |  if_e	jmp	#LR__0732
07c7c     78 B2 0E F2 | 	cmp	local07, #120 wz
07c80     54 04 90 AD |  if_e	jmp	#LR__0733
07c84     01 00 00 FF 
07c88     04 B2 0E F2 | 	cmp	local07, ##516 wz
07c8c     54 04 90 AD |  if_e	jmp	#LR__0734
07c90     24 05 90 FD | 	jmp	#LR__0736
07c94                 | LR__0652
07c94     54 0B B0 FD | 	call	#_compile_fun_2p
07c98     3D B1 02 F6 | 	mov	local06, result1
07c9c     5C 04 90 FD | 	jmp	#LR__0735
07ca0                 | LR__0653
07ca0     18 0E B0 FD | 	call	#_compile_fun_varp
07ca4     3D B5 02 F6 | 	mov	local08, result1
07ca8     3E B1 02 F6 | 	mov	local06, result2
07cac     4C 04 90 FD | 	jmp	#LR__0735
07cb0                 | LR__0654
07cb0     08 0E B0 FD | 	call	#_compile_fun_varp
07cb4     3D B5 02 F6 | 	mov	local08, result1
07cb8     3E B1 02 F6 | 	mov	local06, result2
07cbc     3C 04 90 FD | 	jmp	#LR__0735
07cc0                 | LR__0655
07cc0     F8 0D B0 FD | 	call	#_compile_fun_varp
07cc4     3D B5 02 F6 | 	mov	local08, result1
07cc8     3E B1 02 F6 | 	mov	local06, result2
07ccc     2C 04 90 FD | 	jmp	#LR__0735
07cd0                 | LR__0656
07cd0                 | ' return expr()
07cd0     84 41 B0 FD | 	call	#_expr
07cd4     3D B1 02 F6 | 	mov	local06, result1
07cd8     20 04 90 FD | 	jmp	#LR__0735
07cdc                 | LR__0657
07cdc     DC 0D B0 FD | 	call	#_compile_fun_varp
07ce0     3D B5 02 F6 | 	mov	local08, result1
07ce4     3E B1 02 F6 | 	mov	local06, result2
07ce8     10 04 90 FD | 	jmp	#LR__0735
07cec                 | LR__0658
07cec                 | ' return expr()
07cec     68 41 B0 FD | 	call	#_expr
07cf0     3D B1 02 F6 | 	mov	local06, result1
07cf4     04 04 90 FD | 	jmp	#LR__0735
07cf8                 | LR__0659
07cf8                 | ' return expr()
07cf8     5C 41 B0 FD | 	call	#_expr
07cfc     3D B1 02 F6 | 	mov	local06, result1
07d00     F8 03 90 FD | 	jmp	#LR__0735
07d04                 | LR__0660
07d04                 | ' return expr()
07d04     50 41 B0 FD | 	call	#_expr
07d08     3D B1 02 F6 | 	mov	local06, result1
07d0c     EC 03 90 FD | 	jmp	#LR__0735
07d10                 | LR__0661
07d10     D8 0A B0 FD | 	call	#_compile_fun_2p
07d14     3D B1 02 F6 | 	mov	local06, result1
07d18     E0 03 90 FD | 	jmp	#LR__0735
07d1c                 | LR__0662
07d1c     CC 0A B0 FD | 	call	#_compile_fun_2p
07d20     3D B1 02 F6 | 	mov	local06, result1
07d24     D4 03 90 FD | 	jmp	#LR__0735
07d28                 | LR__0663
07d28     C0 0A B0 FD | 	call	#_compile_fun_2p
07d2c     3D B1 02 F6 | 	mov	local06, result1
07d30     C8 03 90 FD | 	jmp	#LR__0735
07d34                 | LR__0664
07d34     B4 0A B0 FD | 	call	#_compile_fun_2p
07d38     3D B1 02 F6 | 	mov	local06, result1
07d3c     BC 03 90 FD | 	jmp	#LR__0735
07d40                 | LR__0665
07d40     A8 0A B0 FD | 	call	#_compile_fun_2p
07d44     3D B1 02 F6 | 	mov	local06, result1
07d48     B0 03 90 FD | 	jmp	#LR__0735
07d4c                 | LR__0666
07d4c                 | ' return expr()
07d4c     08 41 B0 FD | 	call	#_expr
07d50     3D B1 02 F6 | 	mov	local06, result1
07d54     A4 03 90 FD | 	jmp	#LR__0735
07d58                 | LR__0667
07d58                 | ' return expr()
07d58     FC 40 B0 FD | 	call	#_expr
07d5c     3D B1 02 F6 | 	mov	local06, result1
07d60     98 03 90 FD | 	jmp	#LR__0735
07d64                 | LR__0668
07d64     84 0A B0 FD | 	call	#_compile_fun_2p
07d68     3D B1 02 F6 | 	mov	local06, result1
07d6c     8C 03 90 FD | 	jmp	#LR__0735
07d70                 | LR__0669
07d70     48 0D B0 FD | 	call	#_compile_fun_varp
07d74     3D B5 02 F6 | 	mov	local08, result1
07d78     3E B1 02 F6 | 	mov	local06, result2
07d7c     7C 03 90 FD | 	jmp	#LR__0735
07d80                 | LR__0670
07d80     38 0D B0 FD | 	call	#_compile_fun_varp
07d84     3D B5 02 F6 | 	mov	local08, result1
07d88     3E B1 02 F6 | 	mov	local06, result2
07d8c     6C 03 90 FD | 	jmp	#LR__0735
07d90                 | LR__0671
07d90     28 0D B0 FD | 	call	#_compile_fun_varp
07d94     3D B5 02 F6 | 	mov	local08, result1
07d98     3E B1 02 F6 | 	mov	local06, result2
07d9c     5C 03 90 FD | 	jmp	#LR__0735
07da0                 | LR__0672
07da0                 | ' return expr()
07da0     B4 40 B0 FD | 	call	#_expr
07da4     3D B1 02 F6 | 	mov	local06, result1
07da8     50 03 90 FD | 	jmp	#LR__0735
07dac                 | LR__0673
07dac     2C 22 B0 FD | 	call	#_compile_dim
07db0     3D B1 02 F6 | 	mov	local06, result1
07db4     00 04 90 FD | 	jmp	#LR__0736
07db8                 | LR__0674
07db8     00 0D B0 FD | 	call	#_compile_fun_varp
07dbc     3D B5 02 F6 | 	mov	local08, result1
07dc0     3E B1 02 F6 | 	mov	local06, result2
07dc4     34 03 90 FD | 	jmp	#LR__0735
07dc8                 | LR__0675
07dc8     20 0A B0 FD | 	call	#_compile_fun_2p
07dcc     3D B1 02 F6 | 	mov	local06, result1
07dd0     28 03 90 FD | 	jmp	#LR__0735
07dd4                 | LR__0676
07dd4     E4 0C B0 FD | 	call	#_compile_fun_varp
07dd8     3D B5 02 F6 | 	mov	local08, result1
07ddc     3E B1 02 F6 | 	mov	local06, result2
07de0     18 03 90 FD | 	jmp	#LR__0735
07de4                 | LR__0677
07de4     57 93 02 F6 | 	mov	arg01, local05
07de8     B8 20 B0 FD | 	call	#_compile_else
07dec     3D B1 02 F6 | 	mov	local06, result1
07df0     C4 03 90 FD | 	jmp	#LR__0736
07df4                 | LR__0678
07df4     C4 0C B0 FD | 	call	#_compile_fun_varp
07df8     3D B5 02 F6 | 	mov	local08, result1
07dfc     3E B1 02 F6 | 	mov	local06, result2
07e00     F8 02 90 FD | 	jmp	#LR__0735
07e04                 | LR__0679
07e04     B4 0C B0 FD | 	call	#_compile_fun_varp
07e08     3D B5 02 F6 | 	mov	local08, result1
07e0c     3E B1 02 F6 | 	mov	local06, result2
07e10     E8 02 90 FD | 	jmp	#LR__0735
07e14                 | LR__0680
07e14     01 AE 16 F2 | 	cmp	local05, #1 wc
07e18     08 00 90 CD |  if_b	jmp	#LR__0681
07e1c     40 33 B0 FD | 	call	#_compile_goto
07e20     94 03 90 FD | 	jmp	#LR__0736
07e24                 | LR__0681
07e24     19 92 06 F6 | 	mov	arg01, #25
07e28     00 94 06 F6 | 	mov	arg02, #0
07e2c     A4 8E B1 FD | 	call	#_printerror
07e30     84 03 90 FD | 	jmp	#LR__0736
07e34                 | LR__0682
07e34     01 AE 16 F2 | 	cmp	local05, #1 wc
07e38     08 00 90 CD |  if_b	jmp	#LR__0683
07e3c     BC 32 B0 FD | 	call	#_compile_gosub
07e40     74 03 90 FD | 	jmp	#LR__0736
07e44                 | LR__0683
07e44     19 92 06 F6 | 	mov	arg01, #25
07e48     00 94 06 F6 | 	mov	arg02, #0
07e4c     84 8E B1 FD | 	call	#_printerror
07e50     64 03 90 FD | 	jmp	#LR__0736
07e54                 | LR__0684
07e54     64 0C B0 FD | 	call	#_compile_fun_varp
07e58     3D B5 02 F6 | 	mov	local08, result1
07e5c     3E B1 02 F6 | 	mov	local06, result2
07e60     98 02 90 FD | 	jmp	#LR__0735
07e64                 | LR__0685
07e64     FC 0A B0 FD | 	call	#_compile_fun_4p
07e68     3D B1 02 F6 | 	mov	local06, result1
07e6c     8C 02 90 FD | 	jmp	#LR__0735
07e70                 | LR__0686
07e70                 | ' return expr()
07e70     E4 3F B0 FD | 	call	#_expr
07e74     3D B1 02 F6 | 	mov	local06, result1
07e78     80 02 90 FD | 	jmp	#LR__0735
07e7c                 | LR__0687
07e7c     10 28 B0 FD | 	call	#_compile_for
07e80     3D B1 02 F6 | 	mov	local06, result1
07e84     30 03 90 FD | 	jmp	#LR__0736
07e88                 | LR__0688
07e88     30 0C B0 FD | 	call	#_compile_fun_varp
07e8c     3D B5 02 F6 | 	mov	local08, result1
07e90     3E B1 02 F6 | 	mov	local06, result2
07e94     64 02 90 FD | 	jmp	#LR__0735
07e98                 | LR__0689
07e98     57 93 02 F6 | 	mov	arg01, local05
07e9c     7C 1E B0 FD | 	call	#_compile_if
07ea0     3D B1 02 F6 | 	mov	local06, result1
07ea4     10 03 90 FD | 	jmp	#LR__0736
07ea8                 | LR__0690
07ea8                 | ' return expr()
07ea8     AC 3F B0 FD | 	call	#_expr
07eac     3D B1 02 F6 | 	mov	local06, result1
07eb0     48 02 90 FD | 	jmp	#LR__0735
07eb4                 | LR__0691
07eb4     D0 0D B0 FD | 	call	#_compile_input
07eb8     3D B5 02 F6 | 	mov	local08, result1
07ebc     3E B1 02 F6 | 	mov	local06, result2
07ec0     38 02 90 FD | 	jmp	#LR__0735
07ec4                 | LR__0692
07ec4                 | ' return expr()
07ec4     90 3F B0 FD | 	call	#_expr
07ec8     3D B1 02 F6 | 	mov	local06, result1
07ecc     2C 02 90 FD | 	jmp	#LR__0735
07ed0                 | LR__0693
07ed0     E8 0B B0 FD | 	call	#_compile_fun_varp
07ed4     3D B5 02 F6 | 	mov	local08, result1
07ed8     3E B1 02 F6 | 	mov	local06, result2
07edc     1C 02 90 FD | 	jmp	#LR__0735
07ee0                 | LR__0694
07ee0     D8 0B B0 FD | 	call	#_compile_fun_varp
07ee4     3D B5 02 F6 | 	mov	local08, result1
07ee8     3E B1 02 F6 | 	mov	local06, result2
07eec     0C 02 90 FD | 	jmp	#LR__0735
07ef0                 | LR__0695
07ef0     F8 08 B0 FD | 	call	#_compile_fun_2p
07ef4     3D B1 02 F6 | 	mov	local06, result1
07ef8     00 02 90 FD | 	jmp	#LR__0735
07efc                 | LR__0696
07efc                 | ' return expr()
07efc     58 3F B0 FD | 	call	#_expr
07f00     3D B1 02 F6 | 	mov	local06, result1
07f04     F4 01 90 FD | 	jmp	#LR__0735
07f08                 | LR__0697
07f08                 | ' return expr()
07f08     4C 3F B0 FD | 	call	#_expr
07f0c     3D B1 02 F6 | 	mov	local06, result1
07f10     E8 01 90 FD | 	jmp	#LR__0735
07f14                 | LR__0698
07f14                 | ' return expr()
07f14     40 3F B0 FD | 	call	#_expr
07f18     3D B1 02 F6 | 	mov	local06, result1
07f1c     DC 01 90 FD | 	jmp	#LR__0735
07f20                 | LR__0699
07f20     44 30 B0 FD | 	call	#_compile_next
07f24     3D B1 02 F6 | 	mov	local06, result1
07f28     8C 02 90 FD | 	jmp	#LR__0736
07f2c                 | LR__0700
07f2c     A4 35 B0 FD | 	call	#_compile_on
07f30     3D B1 02 F6 | 	mov	local06, result1
07f34     80 02 90 FD | 	jmp	#LR__0736
07f38                 | LR__0701
07f38     38 09 B0 FD | 	call	#_compile_fun_3p
07f3c     3D B1 02 F6 | 	mov	local06, result1
07f40     B8 01 90 FD | 	jmp	#LR__0735
07f44                 | LR__0702
07f44                 | ' return expr()
07f44     10 3F B0 FD | 	call	#_expr
07f48     3D B1 02 F6 | 	mov	local06, result1
07f4c     AC 01 90 FD | 	jmp	#LR__0735
07f50                 | LR__0703
07f50                 | ' return expr()
07f50     04 3F B0 FD | 	call	#_expr
07f54     3D B1 02 F6 | 	mov	local06, result1
07f58     A0 01 90 FD | 	jmp	#LR__0735
07f5c                 | LR__0704
07f5c                 | ' return expr()
07f5c     F8 3E B0 FD | 	call	#_expr
07f60     3D B1 02 F6 | 	mov	local06, result1
07f64     94 01 90 FD | 	jmp	#LR__0735
07f68                 | LR__0705
07f68                 | ' return expr()
07f68     EC 3E B0 FD | 	call	#_expr
07f6c     3D B1 02 F6 | 	mov	local06, result1
07f70     88 01 90 FD | 	jmp	#LR__0735
07f74                 | LR__0706
07f74     EC 09 B0 FD | 	call	#_compile_fun_4p
07f78     3D B1 02 F6 | 	mov	local06, result1
07f7c     7C 01 90 FD | 	jmp	#LR__0735
07f80                 | LR__0707
07f80                 | ' return expr()
07f80     D4 3E B0 FD | 	call	#_expr
07f84     3D B1 02 F6 | 	mov	local06, result1
07f88     70 01 90 FD | 	jmp	#LR__0735
07f8c                 | LR__0708
07f8c     5C 08 B0 FD | 	call	#_compile_fun_2p
07f90     3D B1 02 F6 | 	mov	local06, result1
07f94     64 01 90 FD | 	jmp	#LR__0735
07f98                 | LR__0709
07f98     20 0B B0 FD | 	call	#_compile_fun_varp
07f9c     3D B5 02 F6 | 	mov	local08, result1
07fa0     3E B1 02 F6 | 	mov	local06, result2
07fa4     54 01 90 FD | 	jmp	#LR__0735
07fa8                 | LR__0710
07fa8     10 0B B0 FD | 	call	#_compile_fun_varp
07fac     3D B5 02 F6 | 	mov	local08, result1
07fb0     3E B1 02 F6 | 	mov	local06, result2
07fb4     44 01 90 FD | 	jmp	#LR__0735
07fb8                 | LR__0711
07fb8     30 08 B0 FD | 	call	#_compile_fun_2p
07fbc     3D B1 02 F6 | 	mov	local06, result1
07fc0     38 01 90 FD | 	jmp	#LR__0735
07fc4                 | LR__0712
07fc4     24 08 B0 FD | 	call	#_compile_fun_2p
07fc8     3D B1 02 F6 | 	mov	local06, result1
07fcc     2C 01 90 FD | 	jmp	#LR__0735
07fd0                 | LR__0713
07fd0     70 16 B0 FD | 	call	#_compile_print
07fd4     3D B1 02 F6 | 	mov	local06, result1
07fd8     DC 01 90 FD | 	jmp	#LR__0736
07fdc                 | LR__0714
07fdc     DC 0A B0 FD | 	call	#_compile_fun_varp
07fe0     3D B5 02 F6 | 	mov	local08, result1
07fe4     3E B1 02 F6 | 	mov	local06, result2
07fe8     10 01 90 FD | 	jmp	#LR__0735
07fec                 | LR__0715
07fec     A8 0B B0 FD | 	call	#_compile_read
07ff0     3D B5 02 F6 | 	mov	local08, result1
07ff4     3E B1 02 F6 | 	mov	local06, result2
07ff8     00 01 90 FD | 	jmp	#LR__0735
07ffc                 | LR__0716
07ffc                 | ' return expr()
07ffc     58 3E B0 FD | 	call	#_expr
08000     3D B1 02 F6 | 	mov	local06, result1
08004     F4 00 90 FD | 	jmp	#LR__0735
08008                 | LR__0717
08008     B0 0A B0 FD | 	call	#_compile_fun_varp
0800c     3D B5 02 F6 | 	mov	local08, result1
08010     3E B1 02 F6 | 	mov	local06, result2
08014     E4 00 90 FD | 	jmp	#LR__0735
08018                 | LR__0718
08018     A0 0A B0 FD | 	call	#_compile_fun_varp
0801c     3D B5 02 F6 | 	mov	local08, result1
08020     3E B1 02 F6 | 	mov	local06, result2
08024     D4 00 90 FD | 	jmp	#LR__0735
08028                 | LR__0719
08028     C0 07 B0 FD | 	call	#_compile_fun_2p
0802c     3D B1 02 F6 | 	mov	local06, result1
08030     C8 00 90 FD | 	jmp	#LR__0735
08034                 | LR__0720
08034     84 0A B0 FD | 	call	#_compile_fun_varp
08038     3D B5 02 F6 | 	mov	local08, result1
0803c     3E B1 02 F6 | 	mov	local06, result2
08040     B8 00 90 FD | 	jmp	#LR__0735
08044                 | LR__0721
08044     A4 07 B0 FD | 	call	#_compile_fun_2p
08048     3D B1 02 F6 | 	mov	local06, result1
0804c     AC 00 90 FD | 	jmp	#LR__0735
08050                 | LR__0722
08050     98 07 B0 FD | 	call	#_compile_fun_2p
08054     3D B1 02 F6 | 	mov	local06, result1
08058     A0 00 90 FD | 	jmp	#LR__0735
0805c                 | LR__0723
0805c     8C 07 B0 FD | 	call	#_compile_fun_2p
08060     3D B1 02 F6 | 	mov	local06, result1
08064     94 00 90 FD | 	jmp	#LR__0735
08068                 | LR__0724
08068     80 07 B0 FD | 	call	#_compile_fun_2p
0806c     3D B1 02 F6 | 	mov	local06, result1
08070     88 00 90 FD | 	jmp	#LR__0735
08074                 | LR__0725
08074     74 07 B0 FD | 	call	#_compile_fun_2p
08078     3D B1 02 F6 | 	mov	local06, result1
0807c     7C 00 90 FD | 	jmp	#LR__0735
08080                 | LR__0726
08080     68 07 B0 FD | 	call	#_compile_fun_2p
08084     3D B1 02 F6 | 	mov	local06, result1
08088     70 00 90 FD | 	jmp	#LR__0735
0808c                 | LR__0727
0808c     5C 07 B0 FD | 	call	#_compile_fun_2p
08090     3D B1 02 F6 | 	mov	local06, result1
08094     64 00 90 FD | 	jmp	#LR__0735
08098                 | LR__0728
08098     20 0A B0 FD | 	call	#_compile_fun_varp
0809c     3D B5 02 F6 | 	mov	local08, result1
080a0     3E B1 02 F6 | 	mov	local06, result2
080a4     54 00 90 FD | 	jmp	#LR__0735
080a8                 | LR__0729
080a8     C8 07 B0 FD | 	call	#_compile_fun_3p
080ac     3D B1 02 F6 | 	mov	local06, result1
080b0     48 00 90 FD | 	jmp	#LR__0735
080b4                 | LR__0730
080b4                 | ' return expr()
080b4     A0 3D B0 FD | 	call	#_expr
080b8     3D B1 02 F6 | 	mov	local06, result1
080bc     3C 00 90 FD | 	jmp	#LR__0735
080c0                 | LR__0731
080c0     28 07 B0 FD | 	call	#_compile_fun_2p
080c4     3D B1 02 F6 | 	mov	local06, result1
080c8     30 00 90 FD | 	jmp	#LR__0735
080cc                 | LR__0732
080cc     1C 07 B0 FD | 	call	#_compile_fun_2p
080d0     3D B1 02 F6 | 	mov	local06, result1
080d4     24 00 90 FD | 	jmp	#LR__0735
080d8                 | LR__0733
080d8     10 07 B0 FD | 	call	#_compile_fun_2p
080dc     3D B1 02 F6 | 	mov	local06, result1
080e0     18 00 90 FD | 	jmp	#LR__0735
080e4                 | LR__0734
080e4     00 13 B0 FD | 	call	#_compile_array_assign
080e8     3D B1 02 F6 | 	mov	local06, result1
080ec     0E B0 0E F2 | 	cmp	local06, #14 wz
080f0     C4 00 90 5D |  if_ne	jmp	#LR__0736
080f4                 | ' return 23
080f4     17 B0 06 F6 | 	mov	local06, #23
080f8     BC 00 90 FD | 	jmp	#LR__0736
080fc                 | ' return 23
080fc                 | LR__0735
080fc     59 AB 02 F6 | 	mov	local03, local07
08100     5A A7 02 F6 | 	mov	local01, local08
08104     53 B7 02 F6 | 	mov	local09, local01
08108     54 B9 02 F6 | 	mov	local10, local02
0810c     55 B3 02 F6 | 	mov	local07, local03
08110     4C 00 00 FF 
08114     20 64 06 F1 | 	add	objptr, ##38944
08118     32 A7 02 FB | 	rdlong	local01, objptr
0811c     53 B5 02 F6 | 	mov	local08, local01
08120     01 B4 66 F0 | 	shl	local08, #1
08124     53 B5 02 F1 | 	add	local08, local01
08128     02 B4 66 F0 | 	shl	local08, #2
0812c     03 00 00 FF 
08130     00 64 86 F1 | 	sub	objptr, ##1536
08134     32 B5 02 F1 | 	add	local08, objptr
08138     5A B7 62 FC | 	wrlong	local09, local08
0813c     03 00 00 FF 
08140     00 64 06 F1 | 	add	objptr, ##1536
08144     32 A7 02 FB | 	rdlong	local01, objptr
08148     53 B7 02 F6 | 	mov	local09, local01
0814c     01 B6 66 F0 | 	shl	local09, #1
08150     53 B7 02 F1 | 	add	local09, local01
08154     02 B6 66 F0 | 	shl	local09, #2
08158     03 00 00 FF 
0815c     00 64 86 F1 | 	sub	objptr, ##1536
08160     32 B7 02 F1 | 	add	local09, objptr
08164     04 B6 06 F1 | 	add	local09, #4
08168     5B B9 62 FC | 	wrlong	local10, local09
0816c     03 00 00 FF 
08170     00 64 06 F1 | 	add	objptr, ##1536
08174     32 A7 02 FB | 	rdlong	local01, objptr
08178     53 B9 02 F6 | 	mov	local10, local01
0817c     01 B8 66 F0 | 	shl	local10, #1
08180     53 B9 02 F1 | 	add	local10, local01
08184     02 B8 66 F0 | 	shl	local10, #2
08188     03 00 00 FF 
0818c     00 64 86 F1 | 	sub	objptr, ##1536
08190     32 B9 02 F1 | 	add	local10, objptr
08194     08 B8 06 F1 | 	add	local10, #8
08198     5C B3 62 FC | 	wrlong	local07, local10
0819c     03 00 00 FF 
081a0     00 64 06 F1 | 	add	objptr, ##1536
081a4     32 B7 02 FB | 	rdlong	local09, objptr
081a8     01 B6 06 F1 | 	add	local09, #1
081ac     32 B7 62 FC | 	wrlong	local09, objptr
081b0     4C 00 00 FF 
081b4     20 64 86 F1 | 	sub	objptr, ##38944
081b8                 | LR__0736
081b8                 | ' 
081b8                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
081b8                 | ' 450 if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end 				' the last part 
081b8     03 AC 0E F2 | 	cmp	local04, #3 wz
081bc     04 AC 0E 52 |  if_ne	cmp	local04, #4 wz
081c0     38 00 90 5D |  if_ne	jmp	#LR__0737
081c4     4C 00 00 FF 
081c8     20 64 06 F1 | 	add	objptr, ##38944
081cc     32 B9 02 FB | 	rdlong	local10, objptr
081d0     5C A7 02 F6 | 	mov	local01, local10
081d4     01 A6 66 F0 | 	shl	local01, #1
081d8     5C A7 02 F1 | 	add	local01, local10
081dc     02 A6 66 F0 | 	shl	local01, #2
081e0     03 00 00 FF 
081e4     00 64 86 F1 | 	sub	objptr, ##1536
081e8     32 A7 02 F1 | 	add	local01, objptr
081ec     08 A6 06 F1 | 	add	local01, #8
081f0     53 FD 6B FC | 	wrlong	#510, local01
081f4     49 00 00 FF 
081f8     20 64 86 F1 | 	sub	objptr, ##37408
081fc                 | LR__0737
081fc                 | ' ' if there is token_adr somewhere, change fun_getvar to fun_getaddr
081fc                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
081fc     4C 00 00 FF 
08200     20 64 06 F1 | 	add	objptr, ##38944
08204     32 A7 02 FB | 	rdlong	local01, objptr
08208     4C 00 00 FF 
0820c     20 64 86 F1 | 	sub	objptr, ##38944
08210     D7 52 48 FB | 	callpa	#(@LR__0740-@LR__0738)>>2,fcache_load_ptr_
08214                 | LR__0738
08214     53 B7 02 F6 | 	mov	local09, local01
08218     01 B6 66 F0 | 	shl	local09, #1
0821c     53 B7 02 F1 | 	add	local09, local01
08220     02 B6 66 F0 | 	shl	local09, #2
08224     32 B9 02 F6 | 	mov	local10, objptr
08228     49 00 00 FF 
0822c     20 B8 06 F1 | 	add	local10, ##37408
08230     5C B7 02 F1 | 	add	local09, local10
08234     08 B6 06 F1 | 	add	local09, #8
08238     5B B7 02 FB | 	rdlong	local09, local09
0823c     9B B6 0E F2 | 	cmp	local09, #155 wz
08240     68 00 90 5D |  if_ne	jmp	#LR__0739
08244     53 B7 02 F6 | 	mov	local09, local01
08248     01 B6 86 F1 | 	sub	local09, #1
0824c     5B B9 02 F6 | 	mov	local10, local09
08250     01 B8 66 F0 | 	shl	local10, #1
08254     5B B9 02 F1 | 	add	local10, local09
08258     02 B8 66 F0 | 	shl	local10, #2
0825c     32 B7 02 F6 | 	mov	local09, objptr
08260     49 00 00 FF 
08264     20 B6 06 F1 | 	add	local09, ##37408
08268     5B B9 02 F1 | 	add	local10, local09
0826c     08 B8 06 F1 | 	add	local10, #8
08270     5C B9 02 FB | 	rdlong	local10, local10
08274     11 B8 0E F2 | 	cmp	local10, #17 wz
08278     30 00 90 5D |  if_ne	jmp	#LR__0739
0827c     53 B7 02 F6 | 	mov	local09, local01
08280     01 B6 86 F1 | 	sub	local09, #1
08284     5B B9 02 F6 | 	mov	local10, local09
08288     01 B8 66 F0 | 	shl	local10, #1
0828c     5B B9 02 F1 | 	add	local10, local09
08290     02 B8 66 F0 | 	shl	local10, #2
08294     32 B7 02 F6 | 	mov	local09, objptr
08298     49 00 00 FF 
0829c     20 B6 06 F1 | 	add	local09, ##37408
082a0     5B B9 02 F1 | 	add	local10, local09
082a4     08 B8 06 F1 | 	add	local10, #8
082a8     5C 25 68 FC | 	wrlong	#18, local10
082ac                 | LR__0739
082ac     01 A6 86 F1 | 	sub	local01, #1
082b0     01 A6 56 F2 | 	cmps	local01, #1 wc
082b4     5C FF 9F 3D |  if_ae	jmp	#LR__0738
082b8                 | LR__0740
082b8                 | ' ''''print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
082b8                 | ' return err
082b8     58 7B 02 F6 | 	mov	result1, local06
082bc     E7 F0 03 F6 | 	mov	ptra, fp
082c0     F2 00 A0 FD | 	call	#popregs_
082c4                 | _compile_immediate_ret
082c4     2D 00 64 FD | 	ret
082c8                 | 
082c8                 | ' 
082c8                 | ' '--- Do a main compilation task for assigns, called from compile_assign(), returns an error code
082c8                 | ' 
082c8                 | ' function compile_immediate_assign(linetype as ulong) as ulong
082c8                 | _compile_immediate_assign
082c8     0C CA 05 F6 | 	mov	COUNT_, #12
082cc     E8 00 A0 FD | 	call	#pushregs_
082d0     49 AD 02 F6 | 	mov	local04, arg01
082d4     FF AA 06 F6 | 	mov	local03, #255
082d8     01 AE 66 F6 | 	neg	local05, #1
082dc     00 B0 06 F6 | 	mov	local06, #0
082e0                 | ' 
082e0                 | ' t1.result_type=result_error : t1.result.uresult=0
082e0                 | ' i=-1: j=-1 : err=0
082e0                 | ' 
082e0                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
082e0     02 AC 0E F2 | 	cmp	local04, #2 wz
082e4     03 AC 0E 52 |  if_ne	cmp	local04, #3 wz
082e8     36 00 00 AF 
082ec     B0 65 06 A1 |  if_e	add	objptr, ##28080
082f0     32 B3 02 AB |  if_e	rdlong	local07, objptr
082f4     02 00 00 AF 
082f8     38 64 06 A1 |  if_e	add	objptr, ##1080
082fc     32 05 68 AC |  if_e	wrlong	#2, objptr
08300     38 00 00 AF 
08304     E8 65 86 A1 |  if_e	sub	objptr, ##29160
08308                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
08308     04 AC 0E F2 | 	cmp	local04, #4 wz
0830c     01 AC 0E 52 |  if_ne	cmp	local04, #1 wz
08310     2C 00 90 5D |  if_ne	jmp	#LR__0750
08314     36 00 00 FF 
08318     B8 65 06 F1 | 	add	objptr, ##28088
0831c     32 B3 02 FB | 	rdlong	local07, objptr
08320     02 00 00 FF 
08324     30 64 06 F1 | 	add	objptr, ##1072
08328     32 07 68 FC | 	wrlong	#3, objptr
0832c     13 00 00 FF 
08330     38 64 06 F1 | 	add	objptr, ##9784
08334     32 05 68 FC | 	wrlong	#2, objptr
08338     4C 00 00 FF 
0833c     20 64 86 F1 | 	sub	objptr, ##38944
08340                 | LR__0750
08340                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
08340     05 AC 0E F2 | 	cmp	local04, #5 wz
08344     3C 00 90 5D |  if_ne	jmp	#LR__0751
08348     38 00 00 FF 
0834c     E8 65 06 F1 | 	add	objptr, ##29160
08350     32 7B 02 FB | 	rdlong	result1, objptr
08354     3D B3 02 F6 | 	mov	local07, result1
08358     03 B2 66 F0 | 	shl	local07, #3
0835c     02 00 00 FF 
08360     38 64 86 F1 | 	sub	objptr, ##1080
08364     32 B3 02 F1 | 	add	local07, objptr
08368     59 B3 02 FB | 	rdlong	local07, local07
0836c     02 7A 06 F1 | 	add	result1, #2
08370     02 00 00 FF 
08374     38 64 06 F1 | 	add	objptr, ##1080
08378     32 7B 62 FC | 	wrlong	result1, objptr
0837c     38 00 00 FF 
08380     E8 65 86 F1 | 	sub	objptr, ##29160
08384                 | LR__0751
08384     59 93 02 F6 | 	mov	arg01, local07
08388     01 94 06 F6 | 	mov	arg02, #1
0838c     78 DF B1 FD | 	call	#__system__Right_S
08390     3D B5 02 F6 | 	mov	local08, result1
08394     C0 3A B0 FD | 	call	#_expr
08398                 | ' 
08398                 | ' suffix2$=right$(varname2$,1)
08398                 | ' expr()
08398                 | ' if varnum>0 then					' try to find a variable
08398     36 00 00 FF 
0839c     AC 65 06 F1 | 	add	objptr, ##28076
083a0     32 B7 02 FB | 	rdlong	local09, objptr
083a4     36 00 00 FF 
083a8     AC 65 86 F1 | 	sub	objptr, ##28076
083ac     01 B6 56 F2 | 	cmps	local09, #1 wc
083b0     54 00 90 CD |  if_b	jmp	#LR__0754
083b4                 | '   for i=0 to varnum-1
083b4     00 B8 06 F6 | 	mov	local10, #0
083b8     36 00 00 FF 
083bc     AC 65 06 F1 | 	add	objptr, ##28076
083c0     32 BB 02 FB | 	rdlong	local11, objptr
083c4     36 00 00 FF 
083c8     AC 65 86 F1 | 	sub	objptr, ##28076
083cc                 | LR__0752
083cc     5D B9 52 F2 | 	cmps	local10, local11 wc
083d0     34 00 90 3D |  if_ae	jmp	#LR__0753
083d4                 | '     if variables(i).name=varname2$ then j=i : exit
083d4     5C B7 02 F6 | 	mov	local09, local10
083d8     04 B6 66 F0 | 	shl	local09, #4
083dc     32 95 02 F6 | 	mov	arg02, objptr
083e0     16 00 00 FF 
083e4     9C 95 06 F1 | 	add	arg02, ##11676
083e8     4A B7 02 F1 | 	add	local09, arg02
083ec     5B 93 02 FB | 	rdlong	arg01, local09
083f0     59 95 02 F6 | 	mov	arg02, local07
083f4     08 C6 B1 FD | 	call	#__system___string_cmp
083f8     00 7A 0E F2 | 	cmp	result1, #0 wz
083fc     5C AF 02 A6 |  if_e	mov	local05, local10
08400     01 B8 06 51 |  if_ne	add	local10, #1
08404     C4 FF 9F 5D |  if_ne	jmp	#LR__0752
08408                 | LR__0753
08408                 | LR__0754
08408                 | ' if  j=-1 andalso varnum<maxvars then   			' not found, add a new one
08408     FF FF 7F FF 
0840c     FF AF 0E F2 | 	cmp	local05, ##-1 wz
08410     60 00 90 5D |  if_ne	jmp	#LR__0755
08414     36 00 00 FF 
08418     AC 65 06 F1 | 	add	objptr, ##28076
0841c     32 B7 02 FB | 	rdlong	local09, objptr
08420     36 00 00 FF 
08424     AC 65 86 F1 | 	sub	objptr, ##28076
08428     02 00 00 FF 
0842c     00 B6 56 F2 | 	cmps	local09, ##1024 wc
08430     40 00 90 3D |  if_ae	jmp	#LR__0755
08434     36 00 00 FF 
08438     AC 65 06 F1 | 	add	objptr, ##28076
0843c     32 BB 02 FB | 	rdlong	local11, objptr
08440     04 BA 66 F0 | 	shl	local11, #4
08444     20 00 00 FF 
08448     10 64 86 F1 | 	sub	objptr, ##16400
0844c     32 BB 02 F1 | 	add	local11, objptr
08450     5D B3 62 FC | 	wrlong	local07, local11
08454     20 00 00 FF 
08458     10 64 06 F1 | 	add	objptr, ##16400
0845c     32 B7 02 FB | 	rdlong	local09, objptr
08460     5B AF 02 F6 | 	mov	local05, local09
08464     01 B6 06 F1 | 	add	local09, #1
08468     32 B7 62 FC | 	wrlong	local09, objptr
0846c     36 00 00 FF 
08470     AC 65 86 F1 | 	sub	objptr, ##28076
08474                 | LR__0755
08474                 | ' if varnum>=maxvars then
08474     36 00 00 FF 
08478     AC 65 06 F1 | 	add	objptr, ##28076
0847c     32 B7 02 FB | 	rdlong	local09, objptr
08480     36 00 00 FF 
08484     AC 65 86 F1 | 	sub	objptr, ##28076
08488     02 00 00 FF 
0848c     00 B6 56 F2 | 	cmps	local09, ##1024 wc
08490     2D B0 06 36 |  if_ae	mov	local06, #45
08494     BC 01 90 3D |  if_ae	jmp	#LR__0760
08498     57 A7 02 F6 | 	mov	local01, local05
0849c     17 AA 06 F6 | 	mov	local03, #23
084a0     53 B7 02 F6 | 	mov	local09, local01
084a4     54 BD 02 F6 | 	mov	local12, local02
084a8     55 A7 02 F6 | 	mov	local01, local03
084ac     4C 00 00 FF 
084b0     20 64 06 F1 | 	add	objptr, ##38944
084b4     32 BB 02 FB | 	rdlong	local11, objptr
084b8     5D B9 02 F6 | 	mov	local10, local11
084bc     01 B8 66 F0 | 	shl	local10, #1
084c0     5D B9 02 F1 | 	add	local10, local11
084c4     02 B8 66 F0 | 	shl	local10, #2
084c8     03 00 00 FF 
084cc     00 64 86 F1 | 	sub	objptr, ##1536
084d0     32 B9 02 F1 | 	add	local10, objptr
084d4     5C B7 62 FC | 	wrlong	local09, local10
084d8     03 00 00 FF 
084dc     00 64 06 F1 | 	add	objptr, ##1536
084e0     32 B7 02 FB | 	rdlong	local09, objptr
084e4     5B BB 02 F6 | 	mov	local11, local09
084e8     01 BA 66 F0 | 	shl	local11, #1
084ec     5B BB 02 F1 | 	add	local11, local09
084f0     02 BA 66 F0 | 	shl	local11, #2
084f4     03 00 00 FF 
084f8     00 64 86 F1 | 	sub	objptr, ##1536
084fc     32 BB 02 F1 | 	add	local11, objptr
08500     04 BA 06 F1 | 	add	local11, #4
08504     5D BD 62 FC | 	wrlong	local12, local11
08508     03 00 00 FF 
0850c     00 64 06 F1 | 	add	objptr, ##1536
08510     32 B7 02 FB | 	rdlong	local09, objptr
08514     5B BD 02 F6 | 	mov	local12, local09
08518     01 BC 66 F0 | 	shl	local12, #1
0851c     5B BD 02 F1 | 	add	local12, local09
08520     02 BC 66 F0 | 	shl	local12, #2
08524     03 00 00 FF 
08528     00 64 86 F1 | 	sub	objptr, ##1536
0852c     32 BD 02 F1 | 	add	local12, objptr
08530     08 BC 06 F1 | 	add	local12, #8
08534     5E A7 62 FC | 	wrlong	local01, local12
08538     03 00 00 FF 
0853c     00 64 06 F1 | 	add	objptr, ##1536
08540     32 B7 02 FB | 	rdlong	local09, objptr
08544     01 B6 06 F1 | 	add	local09, #1
08548     32 B7 62 FC | 	wrlong	local09, objptr
0854c     4C 00 00 FF 
08550     20 64 86 F1 | 	sub	objptr, ##38944
08554                 | '   t1.result.uresult=j: t1.result_type=fun_assign  
08554                 | '   compiledline(lineptr)=t1:  lineptr+=1 
08554                 | '   if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
08554     03 AC 0E F2 | 	cmp	local04, #3 wz
08558     04 AC 0E 52 |  if_ne	cmp	local04, #4 wz
0855c     38 00 90 5D |  if_ne	jmp	#LR__0756
08560     4C 00 00 FF 
08564     20 64 06 F1 | 	add	objptr, ##38944
08568     32 BD 02 FB | 	rdlong	local12, objptr
0856c     5E A7 02 F6 | 	mov	local01, local12
08570     01 A6 66 F0 | 	shl	local01, #1
08574     5E A7 02 F1 | 	add	local01, local12
08578     02 A6 66 F0 | 	shl	local01, #2
0857c     03 00 00 FF 
08580     00 64 86 F1 | 	sub	objptr, ##1536
08584     32 A7 02 F1 | 	add	local01, objptr
08588     08 A6 06 F1 | 	add	local01, #8
0858c     53 FD 6B FC | 	wrlong	#510, local01
08590     49 00 00 FF 
08594     20 64 86 F1 | 	sub	objptr, ##37408
08598                 | LR__0756
08598                 | '   for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
08598     4C 00 00 FF 
0859c     20 64 06 F1 | 	add	objptr, ##38944
085a0     32 B9 02 FB | 	rdlong	local10, objptr
085a4     4C 00 00 FF 
085a8     20 64 86 F1 | 	sub	objptr, ##38944
085ac     D7 52 48 FB | 	callpa	#(@LR__0759-@LR__0757)>>2,fcache_load_ptr_
085b0                 | LR__0757
085b0     5C BD 02 F6 | 	mov	local12, local10
085b4     01 BC 66 F0 | 	shl	local12, #1
085b8     5C BD 02 F1 | 	add	local12, local10
085bc     02 BC 66 F0 | 	shl	local12, #2
085c0     32 A7 02 F6 | 	mov	local01, objptr
085c4     49 00 00 FF 
085c8     20 A6 06 F1 | 	add	local01, ##37408
085cc     53 BD 02 F1 | 	add	local12, local01
085d0     08 BC 06 F1 | 	add	local12, #8
085d4     5E BD 02 FB | 	rdlong	local12, local12
085d8     9B BC 0E F2 | 	cmp	local12, #155 wz
085dc     68 00 90 5D |  if_ne	jmp	#LR__0758
085e0     5C BD 02 F6 | 	mov	local12, local10
085e4     01 BC 86 F1 | 	sub	local12, #1
085e8     5E A7 02 F6 | 	mov	local01, local12
085ec     01 A6 66 F0 | 	shl	local01, #1
085f0     5E A7 02 F1 | 	add	local01, local12
085f4     02 A6 66 F0 | 	shl	local01, #2
085f8     32 BD 02 F6 | 	mov	local12, objptr
085fc     49 00 00 FF 
08600     20 BC 06 F1 | 	add	local12, ##37408
08604     5E A7 02 F1 | 	add	local01, local12
08608     08 A6 06 F1 | 	add	local01, #8
0860c     53 A7 02 FB | 	rdlong	local01, local01
08610     11 A6 0E F2 | 	cmp	local01, #17 wz
08614     30 00 90 5D |  if_ne	jmp	#LR__0758
08618     5C BD 02 F6 | 	mov	local12, local10
0861c     01 BC 86 F1 | 	sub	local12, #1
08620     5E A7 02 F6 | 	mov	local01, local12
08624     01 A6 66 F0 | 	shl	local01, #1
08628     5E A7 02 F1 | 	add	local01, local12
0862c     02 A6 66 F0 | 	shl	local01, #2
08630     32 BD 02 F6 | 	mov	local12, objptr
08634     49 00 00 FF 
08638     20 BC 06 F1 | 	add	local12, ##37408
0863c     5E A7 02 F1 | 	add	local01, local12
08640     08 A6 06 F1 | 	add	local01, #8
08644     53 25 68 FC | 	wrlong	#18, local01
08648                 | LR__0758
08648     01 B8 86 F1 | 	sub	local10, #1
0864c     01 B8 56 F2 | 	cmps	local10, #1 wc
08650     5C FF 9F 3D |  if_ae	jmp	#LR__0757
08654                 | LR__0759
08654                 | LR__0760
08654                 | ' return err
08654     58 7B 02 F6 | 	mov	result1, local06
08658     E7 F0 03 F6 | 	mov	ptra, fp
0865c     F2 00 A0 FD | 	call	#popregs_
08660                 | _compile_immediate_assign_ret
08660     2D 00 64 FD | 	ret
08664                 | 
08664                 | ' 
08664                 | ' ' ------------------ compile the line that is calling a command, and save it if linenum>0, called from the interpreter 
08664                 | ' 
08664                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong) as ulong
08664                 | _compile
08664     03 CA 05 F6 | 	mov	COUNT_, #3
08668     E8 00 A0 FD | 	call	#pushregs_
0866c     49 A7 02 F6 | 	mov	local01, arg01
08670     4B A9 02 F6 | 	mov	local02, arg03
08674     49 00 00 FF 
08678     20 64 06 F1 | 	add	objptr, ##37408
0867c     32 A7 62 FC | 	wrlong	local01, objptr
08680     04 64 06 F1 | 	add	objptr, #4
08684     32 95 62 FC | 	wrlong	arg02, objptr
08688     49 00 00 FF 
0868c     24 64 86 F1 | 	sub	objptr, ##37412
08690     54 93 02 F6 | 	mov	arg01, local02
08694     01 92 06 F1 | 	add	arg01, #1
08698     53 95 02 F6 | 	mov	arg02, local01
0869c     40 F2 BF FD | 	call	#_compile_immediate
086a0     3D AB 0A F6 | 	mov	local03, result1 wz
086a4                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
086a4                 | ' ucompiledline(0)=alinemajor
086a4                 | ' ucompiledline(1)=alineminor		' this is for the future when maybe linenums will be optional.
086a4                 | ' 
086a4                 | ' ' cont: 
086a4                 | ' ' 0 - this is the first part of the line that will continue
086a4                 | ' ' 1 - this is the continuation of the line
086a4                 | ' ' 2 - this is the last continued line
086a4                 | ' ' 3 - this is the one and only part
086a4                 | ' 
086a4                 | ' err=compile_immediate(cont+1,alinemajor) 
086a4                 | ' if err=0 andalso alinemajor>0 then
086a4     74 00 90 5D |  if_ne	jmp	#LR__0775
086a8     01 A6 16 F2 | 	cmp	local01, #1 wc
086ac     6C 00 90 CD |  if_b	jmp	#LR__0775
086b0                 | '   if cont=3 orelse cont=2 then 
086b0     03 A8 0E F2 | 	cmp	local02, #3 wz
086b4     02 A8 0E 52 |  if_ne	cmp	local02, #2 wz
086b8     60 00 90 5D |  if_ne	jmp	#LR__0774
086bc                 | '     if alinemajor >lastline then 
086bc     4C 00 00 FF 
086c0     30 64 06 F1 | 	add	objptr, ##38960
086c4     32 95 02 FB | 	rdlong	arg02, objptr
086c8     4C 00 00 FF 
086cc     30 64 86 F1 | 	sub	objptr, ##38960
086d0     4A A7 1A F2 | 	cmp	local01, arg02 wcz
086d4     0C 00 90 ED |  if_be	jmp	#LR__0770
086d8     53 93 02 F6 | 	mov	arg01, local01
086dc     38 F1 BF FD | 	call	#_add_line_at_end
086e0     38 00 90 FD | 	jmp	#LR__0773
086e4                 | LR__0770
086e4     53 93 02 F6 | 	mov	arg01, local01
086e8     A0 EB BF FD | 	call	#_deleteline
086ec                 | '       deleteline(alinemajor)  
086ec                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' TODO: that's not optimal    
086ec     4C 00 00 FF 
086f0     30 64 06 F1 | 	add	objptr, ##38960
086f4     32 95 02 FB | 	rdlong	arg02, objptr
086f8     4C 00 00 FF 
086fc     30 64 86 F1 | 	sub	objptr, ##38960
08700     4A A7 1A F2 | 	cmp	local01, arg02 wcz
08704     0C 00 90 ED |  if_be	jmp	#LR__0771
08708     53 93 02 F6 | 	mov	arg01, local01
0870c     08 F1 BF FD | 	call	#_add_line_at_end
08710     08 00 90 FD | 	jmp	#LR__0772
08714                 | LR__0771
08714     53 93 02 F6 | 	mov	arg01, local01
08718     40 EF BF FD | 	call	#_insertline
0871c                 | LR__0772
0871c                 | LR__0773
0871c                 | LR__0774
0871c                 | LR__0775
0871c                 | ' return err
0871c     55 7B 02 F6 | 	mov	result1, local03
08720     E7 F0 03 F6 | 	mov	ptra, fp
08724     F2 00 A0 FD | 	call	#popregs_
08728                 | _compile_ret
08728     2D 00 64 FD | 	ret
0872c                 | 
0872c                 | ' 
0872c                 | ' ' ------------------ compile the line that is assigning to a variable and save it if linenum>0, called from the interpreter 
0872c                 | ' 
0872c                 | ' function compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  as ulong
0872c                 | _compile_assign
0872c     03 CA 05 F6 | 	mov	COUNT_, #3
08730     E8 00 A0 FD | 	call	#pushregs_
08734     49 A7 02 F6 | 	mov	local01, arg01
08738     4B A9 02 F6 | 	mov	local02, arg03
0873c     49 00 00 FF 
08740     20 64 06 F1 | 	add	objptr, ##37408
08744     32 A7 62 FC | 	wrlong	local01, objptr
08748     04 64 06 F1 | 	add	objptr, #4
0874c     32 95 62 FC | 	wrlong	arg02, objptr
08750     49 00 00 FF 
08754     24 64 86 F1 | 	sub	objptr, ##37412
08758     54 93 02 F6 | 	mov	arg01, local02
0875c     01 92 06 F1 | 	add	arg01, #1
08760     64 FB BF FD | 	call	#_compile_immediate_assign
08764     3D AB 02 F6 | 	mov	local03, result1
08768                 | ' 
08768                 | ' ucompiledline(0)=alinemajor
08768                 | ' ucompiledline(1)=alineminor
08768                 | ' 
08768                 | ' err=compile_immediate_assign(cont+1) 
08768                 | ' if alinemajor>0 then
08768     01 A6 16 F2 | 	cmp	local01, #1 wc
0876c     6C 00 90 CD |  if_b	jmp	#LR__0785
08770                 | '   if cont=3 orelse cont=2 then 
08770     03 A8 0E F2 | 	cmp	local02, #3 wz
08774     02 A8 0E 52 |  if_ne	cmp	local02, #2 wz
08778     60 00 90 5D |  if_ne	jmp	#LR__0784
0877c                 | '     if alinemajor >lastline then 
0877c     4C 00 00 FF 
08780     30 64 06 F1 | 	add	objptr, ##38960
08784     32 95 02 FB | 	rdlong	arg02, objptr
08788     4C 00 00 FF 
0878c     30 64 86 F1 | 	sub	objptr, ##38960
08790     4A A7 1A F2 | 	cmp	local01, arg02 wcz
08794     0C 00 90 ED |  if_be	jmp	#LR__0780
08798     53 93 02 F6 | 	mov	arg01, local01
0879c     78 F0 BF FD | 	call	#_add_line_at_end
087a0     38 00 90 FD | 	jmp	#LR__0783
087a4                 | LR__0780
087a4     53 93 02 F6 | 	mov	arg01, local01
087a8     E0 EA BF FD | 	call	#_deleteline
087ac                 | '       deleteline(alinemajor)  
087ac                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
087ac     4C 00 00 FF 
087b0     30 64 06 F1 | 	add	objptr, ##38960
087b4     32 95 02 FB | 	rdlong	arg02, objptr
087b8     4C 00 00 FF 
087bc     30 64 86 F1 | 	sub	objptr, ##38960
087c0     4A A7 1A F2 | 	cmp	local01, arg02 wcz
087c4     0C 00 90 ED |  if_be	jmp	#LR__0781
087c8     53 93 02 F6 | 	mov	arg01, local01
087cc     48 F0 BF FD | 	call	#_add_line_at_end
087d0     08 00 90 FD | 	jmp	#LR__0782
087d4                 | LR__0781
087d4     53 93 02 F6 | 	mov	arg01, local01
087d8     80 EE BF FD | 	call	#_insertline
087dc                 | LR__0782
087dc                 | LR__0783
087dc                 | LR__0784
087dc                 | LR__0785
087dc                 | ' return err
087dc     55 7B 02 F6 | 	mov	result1, local03
087e0     E7 F0 03 F6 | 	mov	ptra, fp
087e4     F2 00 A0 FD | 	call	#popregs_
087e8                 | _compile_assign_ret
087e8     2D 00 64 FD | 	ret
087ec                 | 
087ec                 | ' 
087ec                 | ' '----- A function that prepares 2 parameters for a 2-parameter command
087ec                 | ' 
087ec                 | ' function compile_fun_2p() as ulong
087ec                 | _compile_fun_2p
087ec     01 CA 05 F6 | 	mov	COUNT_, #1
087f0     E8 00 A0 FD | 	call	#pushregs_
087f4     60 36 B0 FD | 	call	#_expr
087f8     3D A7 02 F6 | 	mov	local01, result1
087fc                 | ' err=expr() : if err>0 then return err
087fc     01 A6 16 F2 | 	cmp	local01, #1 wc
08800     53 7B 02 36 |  if_ae	mov	result1, local01
08804     60 00 90 3D |  if_ae	jmp	#LR__0790
08808                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
08808     38 00 00 FF 
0880c     E8 65 06 F1 | 	add	objptr, ##29160
08810     32 A7 02 FB | 	rdlong	local01, objptr
08814     03 A6 66 F0 | 	shl	local01, #3
08818     02 00 00 FF 
0881c     38 64 86 F1 | 	sub	objptr, ##1080
08820     32 A7 02 F1 | 	add	local01, objptr
08824     04 A6 06 F1 | 	add	local01, #4
08828     53 A7 02 FB | 	rdlong	local01, local01
0882c     11 A6 0E F2 | 	cmp	local01, #17 wz
08830     36 00 00 FF 
08834     B0 65 86 F1 | 	sub	objptr, ##28080
08838     15 7A 06 56 |  if_ne	mov	result1, #21
0883c     28 00 90 5D |  if_ne	jmp	#LR__0790
08840     38 00 00 FF 
08844     E8 65 06 F1 | 	add	objptr, ##29160
08848     32 A7 02 FB | 	rdlong	local01, objptr
0884c     01 A6 06 F1 | 	add	local01, #1
08850     32 A7 62 FC | 	wrlong	local01, objptr
08854     38 00 00 FF 
08858     E8 65 86 F1 | 	sub	objptr, ##29160
0885c     F8 35 B0 FD | 	call	#_expr
08860                 | ' err=expr() : if err>0 then return err
08860     01 7A 16 F2 | 	cmp	result1, #1 wc
08864                 | ' return 0
08864     00 7A 06 C6 |  if_b	mov	result1, #0
08868                 | LR__0790
08868     E7 F0 03 F6 | 	mov	ptra, fp
0886c     F2 00 A0 FD | 	call	#popregs_
08870                 | _compile_fun_2p_ret
08870     2D 00 64 FD | 	ret
08874                 | 
08874                 | ' 
08874                 | ' '----- A function that prepares 3 parameters for a 3-parameter command
08874                 | ' 
08874                 | ' function compile_fun_3p() as ulong
08874                 | _compile_fun_3p
08874     01 CA 05 F6 | 	mov	COUNT_, #1
08878     E8 00 A0 FD | 	call	#pushregs_
0887c     D8 35 B0 FD | 	call	#_expr
08880     3D A7 02 F6 | 	mov	local01, result1
08884                 | ' err=expr() : if err>0 then return err
08884     01 A6 16 F2 | 	cmp	local01, #1 wc
08888     53 7B 02 36 |  if_ae	mov	result1, local01
0888c     C8 00 90 3D |  if_ae	jmp	#LR__0800
08890                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
08890     38 00 00 FF 
08894     E8 65 06 F1 | 	add	objptr, ##29160
08898     32 A7 02 FB | 	rdlong	local01, objptr
0889c     03 A6 66 F0 | 	shl	local01, #3
088a0     02 00 00 FF 
088a4     38 64 86 F1 | 	sub	objptr, ##1080
088a8     32 A7 02 F1 | 	add	local01, objptr
088ac     04 A6 06 F1 | 	add	local01, #4
088b0     53 A7 02 FB | 	rdlong	local01, local01
088b4     11 A6 0E F2 | 	cmp	local01, #17 wz
088b8     36 00 00 FF 
088bc     B0 65 86 F1 | 	sub	objptr, ##28080
088c0     15 7A 06 56 |  if_ne	mov	result1, #21
088c4     90 00 90 5D |  if_ne	jmp	#LR__0800
088c8     38 00 00 FF 
088cc     E8 65 06 F1 | 	add	objptr, ##29160
088d0     32 A7 02 FB | 	rdlong	local01, objptr
088d4     01 A6 06 F1 | 	add	local01, #1
088d8     32 A7 62 FC | 	wrlong	local01, objptr
088dc     38 00 00 FF 
088e0     E8 65 86 F1 | 	sub	objptr, ##29160
088e4     70 35 B0 FD | 	call	#_expr
088e8     3D A7 02 F6 | 	mov	local01, result1
088ec                 | ' err=expr() : if err>0 then return err
088ec     01 A6 16 F2 | 	cmp	local01, #1 wc
088f0     53 7B 02 36 |  if_ae	mov	result1, local01
088f4     60 00 90 3D |  if_ae	jmp	#LR__0800
088f8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
088f8     38 00 00 FF 
088fc     E8 65 06 F1 | 	add	objptr, ##29160
08900     32 A7 02 FB | 	rdlong	local01, objptr
08904     03 A6 66 F0 | 	shl	local01, #3
08908     02 00 00 FF 
0890c     38 64 86 F1 | 	sub	objptr, ##1080
08910     32 A7 02 F1 | 	add	local01, objptr
08914     04 A6 06 F1 | 	add	local01, #4
08918     53 A7 02 FB | 	rdlong	local01, local01
0891c     11 A6 0E F2 | 	cmp	local01, #17 wz
08920     36 00 00 FF 
08924     B0 65 86 F1 | 	sub	objptr, ##28080
08928     15 7A 06 56 |  if_ne	mov	result1, #21
0892c     28 00 90 5D |  if_ne	jmp	#LR__0800
08930     38 00 00 FF 
08934     E8 65 06 F1 | 	add	objptr, ##29160
08938     32 A7 02 FB | 	rdlong	local01, objptr
0893c     01 A6 06 F1 | 	add	local01, #1
08940     32 A7 62 FC | 	wrlong	local01, objptr
08944     38 00 00 FF 
08948     E8 65 86 F1 | 	sub	objptr, ##29160
0894c     08 35 B0 FD | 	call	#_expr
08950                 | ' err=expr() : if err>0 then return err
08950     01 7A 16 F2 | 	cmp	result1, #1 wc
08954                 | ' return 0
08954     00 7A 06 C6 |  if_b	mov	result1, #0
08958                 | LR__0800
08958     E7 F0 03 F6 | 	mov	ptra, fp
0895c     F2 00 A0 FD | 	call	#popregs_
08960                 | _compile_fun_3p_ret
08960     2D 00 64 FD | 	ret
08964                 | 
08964                 | ' 
08964                 | ' '----- A function that prepares 4 parameters for a 4-parameter command
08964                 | ' 
08964                 | ' function compile_fun_4p() as ulong
08964                 | _compile_fun_4p
08964     01 CA 05 F6 | 	mov	COUNT_, #1
08968     E8 00 A0 FD | 	call	#pushregs_
0896c     E8 34 B0 FD | 	call	#_expr
08970     3D A7 02 F6 | 	mov	local01, result1
08974                 | ' err=expr() : if err>0 then return err
08974     01 A6 16 F2 | 	cmp	local01, #1 wc
08978     53 7B 02 36 |  if_ae	mov	result1, local01
0897c     30 01 90 3D |  if_ae	jmp	#LR__0810
08980                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
08980     38 00 00 FF 
08984     E8 65 06 F1 | 	add	objptr, ##29160
08988     32 A7 02 FB | 	rdlong	local01, objptr
0898c     03 A6 66 F0 | 	shl	local01, #3
08990     02 00 00 FF 
08994     38 64 86 F1 | 	sub	objptr, ##1080
08998     32 A7 02 F1 | 	add	local01, objptr
0899c     04 A6 06 F1 | 	add	local01, #4
089a0     53 A7 02 FB | 	rdlong	local01, local01
089a4     11 A6 0E F2 | 	cmp	local01, #17 wz
089a8     36 00 00 FF 
089ac     B0 65 86 F1 | 	sub	objptr, ##28080
089b0     15 7A 06 56 |  if_ne	mov	result1, #21
089b4     F8 00 90 5D |  if_ne	jmp	#LR__0810
089b8     38 00 00 FF 
089bc     E8 65 06 F1 | 	add	objptr, ##29160
089c0     32 A7 02 FB | 	rdlong	local01, objptr
089c4     01 A6 06 F1 | 	add	local01, #1
089c8     32 A7 62 FC | 	wrlong	local01, objptr
089cc     38 00 00 FF 
089d0     E8 65 86 F1 | 	sub	objptr, ##29160
089d4     80 34 B0 FD | 	call	#_expr
089d8     3D A7 02 F6 | 	mov	local01, result1
089dc                 | ' err=expr() : if err>0 then return err
089dc     01 A6 16 F2 | 	cmp	local01, #1 wc
089e0     53 7B 02 36 |  if_ae	mov	result1, local01
089e4     C8 00 90 3D |  if_ae	jmp	#LR__0810
089e8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
089e8     38 00 00 FF 
089ec     E8 65 06 F1 | 	add	objptr, ##29160
089f0     32 A7 02 FB | 	rdlong	local01, objptr
089f4     03 A6 66 F0 | 	shl	local01, #3
089f8     02 00 00 FF 
089fc     38 64 86 F1 | 	sub	objptr, ##1080
08a00     32 A7 02 F1 | 	add	local01, objptr
08a04     04 A6 06 F1 | 	add	local01, #4
08a08     53 A7 02 FB | 	rdlong	local01, local01
08a0c     11 A6 0E F2 | 	cmp	local01, #17 wz
08a10     36 00 00 FF 
08a14     B0 65 86 F1 | 	sub	objptr, ##28080
08a18     15 7A 06 56 |  if_ne	mov	result1, #21
08a1c     90 00 90 5D |  if_ne	jmp	#LR__0810
08a20     38 00 00 FF 
08a24     E8 65 06 F1 | 	add	objptr, ##29160
08a28     32 A7 02 FB | 	rdlong	local01, objptr
08a2c     01 A6 06 F1 | 	add	local01, #1
08a30     32 A7 62 FC | 	wrlong	local01, objptr
08a34     38 00 00 FF 
08a38     E8 65 86 F1 | 	sub	objptr, ##29160
08a3c     18 34 B0 FD | 	call	#_expr
08a40     3D A7 02 F6 | 	mov	local01, result1
08a44                 | ' err=expr() : if err>0 then return err
08a44     01 A6 16 F2 | 	cmp	local01, #1 wc
08a48     53 7B 02 36 |  if_ae	mov	result1, local01
08a4c     60 00 90 3D |  if_ae	jmp	#LR__0810
08a50                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1  
08a50     38 00 00 FF 
08a54     E8 65 06 F1 | 	add	objptr, ##29160
08a58     32 A7 02 FB | 	rdlong	local01, objptr
08a5c     03 A6 66 F0 | 	shl	local01, #3
08a60     02 00 00 FF 
08a64     38 64 86 F1 | 	sub	objptr, ##1080
08a68     32 A7 02 F1 | 	add	local01, objptr
08a6c     04 A6 06 F1 | 	add	local01, #4
08a70     53 A7 02 FB | 	rdlong	local01, local01
08a74     11 A6 0E F2 | 	cmp	local01, #17 wz
08a78     36 00 00 FF 
08a7c     B0 65 86 F1 | 	sub	objptr, ##28080
08a80     15 7A 06 56 |  if_ne	mov	result1, #21
08a84     28 00 90 5D |  if_ne	jmp	#LR__0810
08a88     38 00 00 FF 
08a8c     E8 65 06 F1 | 	add	objptr, ##29160
08a90     32 A7 02 FB | 	rdlong	local01, objptr
08a94     01 A6 06 F1 | 	add	local01, #1
08a98     32 A7 62 FC | 	wrlong	local01, objptr
08a9c     38 00 00 FF 
08aa0     E8 65 86 F1 | 	sub	objptr, ##29160
08aa4     B0 33 B0 FD | 	call	#_expr
08aa8                 | ' err=expr() : if err>0 then return err
08aa8     01 7A 16 F2 | 	cmp	result1, #1 wc
08aac                 | ' return 0
08aac     00 7A 06 C6 |  if_b	mov	result1, #0
08ab0                 | LR__0810
08ab0     E7 F0 03 F6 | 	mov	ptra, fp
08ab4     F2 00 A0 FD | 	call	#popregs_
08ab8                 | _compile_fun_4p_ret
08ab8     2D 00 64 FD | 	ret
08abc                 | 
08abc                 | ' 
08abc                 | ' '----  Compile a command that can have variable number of parameters. Return num of params and error code
08abc                 | ' 
08abc                 | ' function compile_fun_varp() as ulong,ulong 
08abc                 | _compile_fun_varp
08abc     03 CA 05 F6 | 	mov	COUNT_, #3
08ac0     E8 00 A0 FD | 	call	#pushregs_
08ac4     00 A6 06 F6 | 	mov	local01, #0
08ac8                 | ' 
08ac8                 | ' i=0 : err=0
08ac8                 | ' if lparts(ct).token<>token_end then
08ac8     38 00 00 FF 
08acc     E8 65 06 F1 | 	add	objptr, ##29160
08ad0     32 A9 02 FB | 	rdlong	local02, objptr
08ad4     03 A8 66 F0 | 	shl	local02, #3
08ad8     02 00 00 FF 
08adc     38 64 86 F1 | 	sub	objptr, ##1080
08ae0     32 A9 02 F1 | 	add	local02, objptr
08ae4     04 A8 06 F1 | 	add	local02, #4
08ae8     54 A9 02 FB | 	rdlong	local02, local02
08aec     FE A9 0E F2 | 	cmp	local02, #510 wz
08af0     36 00 00 FF 
08af4     B0 65 86 F1 | 	sub	objptr, ##28080
08af8     88 00 90 AD |  if_e	jmp	#LR__0821
08afc                 | '   do
08afc                 | LR__0820
08afc     58 33 B0 FD | 	call	#_expr
08b00     01 A6 06 F1 | 	add	local01, #1
08b04                 | '     expr()
08b04                 | '     i+=1
08b04                 | '     if lparts(ct).token=token_comma then ct+=1
08b04     38 00 00 FF 
08b08     E8 65 06 F1 | 	add	objptr, ##29160
08b0c     32 A9 02 FB | 	rdlong	local02, objptr
08b10     03 A8 66 F0 | 	shl	local02, #3
08b14     02 00 00 FF 
08b18     38 64 86 F1 | 	sub	objptr, ##1080
08b1c     32 A9 02 F1 | 	add	local02, objptr
08b20     04 A8 06 F1 | 	add	local02, #4
08b24     54 A9 02 FB | 	rdlong	local02, local02
08b28     11 A8 0E F2 | 	cmp	local02, #17 wz
08b2c     36 00 00 FF 
08b30     B0 65 86 F1 | 	sub	objptr, ##28080
08b34     38 00 00 AF 
08b38     E8 65 06 A1 |  if_e	add	objptr, ##29160
08b3c     32 AB 02 AB |  if_e	rdlong	local03, objptr
08b40     01 AA 06 A1 |  if_e	add	local03, #1
08b44     32 AB 62 AC |  if_e	wrlong	local03, objptr
08b48     38 00 00 AF 
08b4c     E8 65 86 A1 |  if_e	sub	objptr, ##29160
08b50                 | '     if lparts(ct).token=token_end then exit loop
08b50     38 00 00 FF 
08b54     E8 65 06 F1 | 	add	objptr, ##29160
08b58     32 A9 02 FB | 	rdlong	local02, objptr
08b5c     03 A8 66 F0 | 	shl	local02, #3
08b60     02 00 00 FF 
08b64     38 64 86 F1 | 	sub	objptr, ##1080
08b68     32 A9 02 F1 | 	add	local02, objptr
08b6c     04 A8 06 F1 | 	add	local02, #4
08b70     54 A9 02 FB | 	rdlong	local02, local02
08b74     FE A9 0E F2 | 	cmp	local02, #510 wz
08b78     36 00 00 FF 
08b7c     B0 65 86 F1 | 	sub	objptr, ##28080
08b80     78 FF 9F 5D |  if_ne	jmp	#LR__0820
08b84                 | LR__0821
08b84                 | ' return i,err
08b84     53 7B 02 F6 | 	mov	result1, local01
08b88     00 7C 06 F6 | 	mov	result2, #0
08b8c     E7 F0 03 F6 | 	mov	ptra, fp
08b90     F2 00 A0 FD | 	call	#popregs_
08b94                 | _compile_fun_varp_ret
08b94     2D 00 64 FD | 	ret
08b98                 | 
08b98                 | ' 
08b98                 | ' '----  Compile read. The same as compile_input() except printing a prompt
08b98                 | ' 
08b98                 | ' function compile_read() as ulong,ulong 
08b98                 | _compile_read
08b98     04 CA 05 F6 | 	mov	COUNT_, #4
08b9c     E8 00 A0 FD | 	call	#pushregs_
08ba0     00 A6 06 F6 | 	mov	local01, #0
08ba4                 | ' 
08ba4                 | ' i=0 : err=0
08ba4                 | ' if lparts(ct).token<>token_end then
08ba4     38 00 00 FF 
08ba8     E8 65 06 F1 | 	add	objptr, ##29160
08bac     32 A9 02 FB | 	rdlong	local02, objptr
08bb0     03 A8 66 F0 | 	shl	local02, #3
08bb4     02 00 00 FF 
08bb8     38 64 86 F1 | 	sub	objptr, ##1080
08bbc     32 A9 02 F1 | 	add	local02, objptr
08bc0     04 A8 06 F1 | 	add	local02, #4
08bc4     54 A9 02 FB | 	rdlong	local02, local02
08bc8     FE A9 0E F2 | 	cmp	local02, #510 wz
08bcc     36 00 00 FF 
08bd0     B0 65 86 F1 | 	sub	objptr, ##28080
08bd4     98 00 90 AD |  if_e	jmp	#LR__0831
08bd8                 | '   do
08bd8                 | LR__0830
08bd8     EC 2E B0 FD | 	call	#_getaddr
08bdc     3D AB 02 F6 | 	mov	local03, result1
08be0     38 00 00 FF 
08be4     E8 65 06 F1 | 	add	objptr, ##29160
08be8     32 A9 02 FB | 	rdlong	local02, objptr
08bec     01 A8 06 F1 | 	add	local02, #1
08bf0     32 A9 62 FC | 	wrlong	local02, objptr
08bf4     01 A6 06 F1 | 	add	local01, #1
08bf8                 | '     err=getaddr() :ct+=1
08bf8                 | '     i+=1 
08bf8                 | '     if lparts(ct).token=token_comma then ct+=1 
08bf8     03 A8 66 F0 | 	shl	local02, #3
08bfc     02 00 00 FF 
08c00     38 64 86 F1 | 	sub	objptr, ##1080
08c04     32 A9 02 F1 | 	add	local02, objptr
08c08     04 A8 06 F1 | 	add	local02, #4
08c0c     54 A9 02 FB | 	rdlong	local02, local02
08c10     11 A8 0E F2 | 	cmp	local02, #17 wz
08c14     36 00 00 FF 
08c18     B0 65 86 F1 | 	sub	objptr, ##28080
08c1c     38 00 00 AF 
08c20     E8 65 06 A1 |  if_e	add	objptr, ##29160
08c24     32 AD 02 AB |  if_e	rdlong	local04, objptr
08c28     01 AC 06 A1 |  if_e	add	local04, #1
08c2c     32 AD 62 AC |  if_e	wrlong	local04, objptr
08c30     38 00 00 AF 
08c34     E8 65 86 A1 |  if_e	sub	objptr, ##29160
08c38                 | '     if lparts(ct).token=token_end then exit loop
08c38     38 00 00 FF 
08c3c     E8 65 06 F1 | 	add	objptr, ##29160
08c40     32 A9 02 FB | 	rdlong	local02, objptr
08c44     03 A8 66 F0 | 	shl	local02, #3
08c48     02 00 00 FF 
08c4c     38 64 86 F1 | 	sub	objptr, ##1080
08c50     32 A9 02 F1 | 	add	local02, objptr
08c54     04 A8 06 F1 | 	add	local02, #4
08c58     54 A9 02 FB | 	rdlong	local02, local02
08c5c     FE A9 0E F2 | 	cmp	local02, #510 wz
08c60     36 00 00 FF 
08c64     B0 65 86 F1 | 	sub	objptr, ##28080
08c68     08 00 90 AD |  if_e	jmp	#LR__0832
08c6c     68 FF 9F FD | 	jmp	#LR__0830
08c70                 | LR__0831
08c70     36 AA 06 F6 | 	mov	local03, #54
08c74                 | LR__0832
08c74                 | ' return i,err
08c74     53 7B 02 F6 | 	mov	result1, local01
08c78     55 7D 02 F6 | 	mov	result2, local03
08c7c     E7 F0 03 F6 | 	mov	ptra, fp
08c80     F2 00 A0 FD | 	call	#popregs_
08c84                 | _compile_read_ret
08c84     2D 00 64 FD | 	ret
08c88                 | 
08c88                 | ' 
08c88                 | ' '----  Compile input. The same as compile_varp() except these has to be variables, and not expressions, and also we need getaddr and not getvar
08c88                 | ' 
08c88                 | ' function compile_input() as ulong,ulong 
08c88                 | _compile_input
08c88     0F CA 05 F6 | 	mov	COUNT_, #15
08c8c     E8 00 A0 FD | 	call	#pushregs_
08c90                 | ' 
08c90                 | ' if lparts(ct).token=token_string then
08c90     38 00 00 FF 
08c94     E8 65 06 F1 | 	add	objptr, ##29160
08c98     32 97 02 FB | 	rdlong	arg03, objptr
08c9c     03 96 66 F0 | 	shl	arg03, #3
08ca0     02 00 00 FF 
08ca4     38 64 86 F1 | 	sub	objptr, ##1080
08ca8     32 97 02 F1 | 	add	arg03, objptr
08cac     04 96 06 F1 | 	add	arg03, #4
08cb0     4B 7D 02 FB | 	rdlong	result2, arg03
08cb4     01 00 00 FF 
08cb8     03 7C 0E F2 | 	cmp	result2, ##515 wz
08cbc     36 00 00 FF 
08cc0     B0 65 86 F1 | 	sub	objptr, ##28080
08cc4     38 06 90 5D |  if_ne	jmp	#LR__0847
08cc8     38 00 00 FF 
08ccc     E8 65 06 F1 | 	add	objptr, ##29160
08cd0     32 95 02 FB | 	rdlong	arg02, objptr
08cd4     03 94 66 F0 | 	shl	arg02, #3
08cd8     02 00 00 FF 
08cdc     38 64 86 F1 | 	sub	objptr, ##1080
08ce0     32 95 02 F1 | 	add	arg02, objptr
08ce4     4A 93 02 FB | 	rdlong	arg01, arg02
08ce8     36 00 00 FF 
08cec     B0 65 86 F1 | 	sub	objptr, ##28080
08cf0     49 AD 02 F6 | 	mov	local04, arg01
08cf4     D7 06 48 FB | 	callpa	#(@LR__0841-@LR__0840)>>2,fcache_load_ptr_
08cf8                 | LR__0840
08cf8     56 7B CA FA | 	rdbyte	result1, local04 wz
08cfc     01 AC 06 51 |  if_ne	add	local04, #1
08d00     F4 FF 9F 5D |  if_ne	jmp	#LR__0840
08d04                 | LR__0841
08d04     49 AD 82 F1 | 	sub	local04, arg01
08d08     56 7B 02 F6 | 	mov	result1, local04
08d0c     54 00 00 FF 
08d10     CC 64 06 F1 | 	add	objptr, ##43212
08d14     32 7B 62 FC | 	wrlong	result1, objptr
08d18     58 64 86 F1 | 	sub	objptr, #88
08d1c     32 93 02 FB | 	rdlong	arg01, objptr
08d20     3D 93 82 F1 | 	sub	arg01, result1
08d24     04 92 86 F1 | 	sub	arg01, #4
08d28     03 92 26 F5 | 	andn	arg01, #3
08d2c     32 93 62 FC | 	wrlong	arg01, objptr
08d30     58 64 06 F1 | 	add	objptr, #88
08d34     32 95 02 FB | 	rdlong	arg02, objptr
08d38     54 00 00 FF 
08d3c     CC 64 86 F1 | 	sub	objptr, ##43212
08d40     2C 81 B1 FD | 	call	#_pslpoke
08d44                 | '   pslpoke memtop,l
08d44                 | '   for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
08d44     01 AE 06 F6 | 	mov	local05, #1
08d48     54 00 00 FF 
08d4c     CC 64 06 F1 | 	add	objptr, ##43212
08d50     32 B1 02 FB | 	rdlong	local06, objptr
08d54     54 00 00 FF 
08d58     CC 64 86 F1 | 	sub	objptr, ##43212
08d5c     01 B0 06 F1 | 	add	local06, #1
08d60                 | LR__0842
08d60     58 AF 52 F2 | 	cmps	local05, local06 wc
08d64     5C 00 90 3D |  if_ae	jmp	#LR__0843
08d68     54 00 00 FF 
08d6c     74 64 06 F1 | 	add	objptr, ##43124
08d70     32 B3 02 FB | 	rdlong	local07, objptr
08d74     03 B2 06 F1 | 	add	local07, #3
08d78     57 B3 02 F1 | 	add	local07, local05
08d7c     1B 00 00 FF 
08d80     8C 64 86 F1 | 	sub	objptr, ##13964
08d84     32 95 02 FB | 	rdlong	arg02, objptr
08d88     03 94 66 F0 | 	shl	arg02, #3
08d8c     02 00 00 FF 
08d90     38 64 86 F1 | 	sub	objptr, ##1080
08d94     32 95 02 F1 | 	add	arg02, objptr
08d98     4A 93 02 FB | 	rdlong	arg01, arg02
08d9c     57 95 02 F6 | 	mov	arg02, local05
08da0     01 96 06 F6 | 	mov	arg03, #1
08da4     36 00 00 FF 
08da8     B0 65 86 F1 | 	sub	objptr, ##28080
08dac     E8 D5 B1 FD | 	call	#__system__Mid_S
08db0     3D 95 C2 FA | 	rdbyte	arg02, result1
08db4     59 93 02 F6 | 	mov	arg01, local07
08db8     44 81 B1 FD | 	call	#_pspoke
08dbc     01 AE 06 F1 | 	add	local05, #1
08dc0     9C FF 9F FD | 	jmp	#LR__0842
08dc4                 | LR__0843
08dc4     54 00 00 FF 
08dc8     74 64 06 F1 | 	add	objptr, ##43124
08dcc     32 A7 02 FB | 	rdlong	local01, objptr
08dd0     2B AA 06 F6 | 	mov	local03, #43
08dd4     53 B5 02 F6 | 	mov	local08, local01
08dd8     54 B3 02 F6 | 	mov	local07, local02
08ddc     55 B7 02 F6 | 	mov	local09, local03
08de0     08 00 00 FF 
08de4     54 64 86 F1 | 	sub	objptr, ##4180
08de8     32 B1 02 FB | 	rdlong	local06, objptr
08dec     58 AF 02 F6 | 	mov	local05, local06
08df0     01 AE 66 F0 | 	shl	local05, #1
08df4     58 AF 02 F1 | 	add	local05, local06
08df8     02 AE 66 F0 | 	shl	local05, #2
08dfc     03 00 00 FF 
08e00     00 64 86 F1 | 	sub	objptr, ##1536
08e04     32 AF 02 F1 | 	add	local05, objptr
08e08     57 B5 62 FC | 	wrlong	local08, local05
08e0c     03 00 00 FF 
08e10     00 64 06 F1 | 	add	objptr, ##1536
08e14     32 B5 02 FB | 	rdlong	local08, objptr
08e18     5A B1 02 F6 | 	mov	local06, local08
08e1c     01 B0 66 F0 | 	shl	local06, #1
08e20     5A B1 02 F1 | 	add	local06, local08
08e24     02 B0 66 F0 | 	shl	local06, #2
08e28     03 00 00 FF 
08e2c     00 64 86 F1 | 	sub	objptr, ##1536
08e30     32 B1 02 F1 | 	add	local06, objptr
08e34     04 B0 06 F1 | 	add	local06, #4
08e38     58 B3 62 FC | 	wrlong	local07, local06
08e3c     03 00 00 FF 
08e40     00 64 06 F1 | 	add	objptr, ##1536
08e44     32 B5 02 FB | 	rdlong	local08, objptr
08e48     5A B3 02 F6 | 	mov	local07, local08
08e4c     01 B2 66 F0 | 	shl	local07, #1
08e50     5A B3 02 F1 | 	add	local07, local08
08e54     02 B2 66 F0 | 	shl	local07, #2
08e58     03 00 00 FF 
08e5c     00 64 86 F1 | 	sub	objptr, ##1536
08e60     32 B3 02 F1 | 	add	local07, objptr
08e64     08 B2 06 F1 | 	add	local07, #8
08e68     59 B7 62 FC | 	wrlong	local09, local07
08e6c     03 00 00 FF 
08e70     00 64 06 F1 | 	add	objptr, ##1536
08e74     32 B5 02 FB | 	rdlong	local08, objptr
08e78     01 B4 06 F1 | 	add	local08, #1
08e7c     32 B5 62 FC | 	wrlong	local08, objptr
08e80     13 00 00 FF 
08e84     38 64 86 F1 | 	sub	objptr, ##9784
08e88     32 B5 02 FB | 	rdlong	local08, objptr
08e8c     01 B4 06 F1 | 	add	local08, #1
08e90     32 B5 62 FC | 	wrlong	local08, objptr
08e94                 | '   t1.result.uresult=memtop
08e94                 | '   t1.result_type=result_string2  
08e94                 | '   compiledline(lineptr)=t1: lineptr+=1 :ct+=1
08e94                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08e94     03 B4 66 F0 | 	shl	local08, #3
08e98     02 00 00 FF 
08e9c     38 64 86 F1 | 	sub	objptr, ##1080
08ea0     32 B5 02 F1 | 	add	local08, objptr
08ea4     04 B4 06 F1 | 	add	local08, #4
08ea8     5A B5 02 FB | 	rdlong	local08, local08
08eac     11 B4 0E F2 | 	cmp	local08, #17 wz
08eb0     36 00 00 FF 
08eb4     B0 65 86 F1 | 	sub	objptr, ##28080
08eb8     60 01 90 5D |  if_ne	jmp	#LR__0844
08ebc     21 AA 06 F6 | 	mov	local03, #33
08ec0     53 B5 02 F6 | 	mov	local08, local01
08ec4     54 B3 02 F6 | 	mov	local07, local02
08ec8     55 B9 02 F6 | 	mov	local10, local03
08ecc     4C 00 00 FF 
08ed0     20 64 06 F1 | 	add	objptr, ##38944
08ed4     32 BB 02 FB | 	rdlong	local11, objptr
08ed8     5D BD 02 F6 | 	mov	local12, local11
08edc     01 BC 66 F0 | 	shl	local12, #1
08ee0     5D BD 02 F1 | 	add	local12, local11
08ee4     02 BC 66 F0 | 	shl	local12, #2
08ee8     03 00 00 FF 
08eec     00 64 86 F1 | 	sub	objptr, ##1536
08ef0     32 BD 02 F1 | 	add	local12, objptr
08ef4     5E B5 62 FC | 	wrlong	local08, local12
08ef8     03 00 00 FF 
08efc     00 64 06 F1 | 	add	objptr, ##1536
08f00     32 BF 02 FB | 	rdlong	local13, objptr
08f04     5F B5 02 F6 | 	mov	local08, local13
08f08     01 B4 66 F0 | 	shl	local08, #1
08f0c     5F B5 02 F1 | 	add	local08, local13
08f10     02 B4 66 F0 | 	shl	local08, #2
08f14     03 00 00 FF 
08f18     00 64 86 F1 | 	sub	objptr, ##1536
08f1c     32 B5 02 F1 | 	add	local08, objptr
08f20     04 B4 06 F1 | 	add	local08, #4
08f24     5A B3 62 FC | 	wrlong	local07, local08
08f28     03 00 00 FF 
08f2c     00 64 06 F1 | 	add	objptr, ##1536
08f30     32 B5 02 FB | 	rdlong	local08, objptr
08f34     5A C1 02 F6 | 	mov	local14, local08
08f38     01 C0 66 F0 | 	shl	local14, #1
08f3c     5A C1 02 F1 | 	add	local14, local08
08f40     02 C0 66 F0 | 	shl	local14, #2
08f44     03 00 00 FF 
08f48     00 64 86 F1 | 	sub	objptr, ##1536
08f4c     32 C1 02 F1 | 	add	local14, objptr
08f50     08 C0 06 F1 | 	add	local14, #8
08f54     60 B9 62 FC | 	wrlong	local10, local14
08f58     03 00 00 FF 
08f5c     00 64 06 F1 | 	add	objptr, ##1536
08f60     32 B5 02 FB | 	rdlong	local08, objptr
08f64     01 B4 06 F1 | 	add	local08, #1
08f68     32 B5 62 FC | 	wrlong	local08, objptr
08f6c     44 AA 06 F6 | 	mov	local03, #68
08f70     53 B5 02 F6 | 	mov	local08, local01
08f74     54 B3 02 F6 | 	mov	local07, local02
08f78     55 B9 02 F6 | 	mov	local10, local03
08f7c     32 C1 02 FB | 	rdlong	local14, objptr
08f80     60 BF 02 F6 | 	mov	local13, local14
08f84     01 BE 66 F0 | 	shl	local13, #1
08f88     60 BF 02 F1 | 	add	local13, local14
08f8c     02 BE 66 F0 | 	shl	local13, #2
08f90     03 00 00 FF 
08f94     00 64 86 F1 | 	sub	objptr, ##1536
08f98     32 BF 02 F1 | 	add	local13, objptr
08f9c     5F B5 62 FC | 	wrlong	local08, local13
08fa0     03 00 00 FF 
08fa4     00 64 06 F1 | 	add	objptr, ##1536
08fa8     32 C1 02 FB | 	rdlong	local14, objptr
08fac     60 BF 02 F6 | 	mov	local13, local14
08fb0     01 BE 66 F0 | 	shl	local13, #1
08fb4     60 BF 02 F1 | 	add	local13, local14
08fb8     02 BE 66 F0 | 	shl	local13, #2
08fbc     03 00 00 FF 
08fc0     00 64 86 F1 | 	sub	objptr, ##1536
08fc4     32 BF 02 F1 | 	add	local13, objptr
08fc8     04 BE 06 F1 | 	add	local13, #4
08fcc     5F B3 62 FC | 	wrlong	local07, local13
08fd0     03 00 00 FF 
08fd4     00 64 06 F1 | 	add	objptr, ##1536
08fd8     32 BF 02 FB | 	rdlong	local13, objptr
08fdc     5F C1 02 F6 | 	mov	local14, local13
08fe0     01 C0 66 F0 | 	shl	local14, #1
08fe4     5F C1 02 F1 | 	add	local14, local13
08fe8     02 C0 66 F0 | 	shl	local14, #2
08fec     03 00 00 FF 
08ff0     00 64 86 F1 | 	sub	objptr, ##1536
08ff4     32 C1 02 F1 | 	add	local14, objptr
08ff8     08 C0 06 F1 | 	add	local14, #8
08ffc     60 B9 62 FC | 	wrlong	local10, local14
09000     03 00 00 FF 
09004     00 64 06 F1 | 	add	objptr, ##1536
09008     32 B5 02 FB | 	rdlong	local08, objptr
0900c     01 B4 06 F1 | 	add	local08, #1
09010     32 B5 62 FC | 	wrlong	local08, objptr
09014     4C 00 00 FF 
09018     20 64 86 F1 | 	sub	objptr, ##38944
0901c                 | LR__0844
0901c                 | '   if lparts(ct).token=token_semicolon then t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
0901c     38 00 00 FF 
09020     E8 65 06 F1 | 	add	objptr, ##29160
09024     32 B5 02 FB | 	rdlong	local08, objptr
09028     03 B4 66 F0 | 	shl	local08, #3
0902c     02 00 00 FF 
09030     38 64 86 F1 | 	sub	objptr, ##1080
09034     32 B5 02 F1 | 	add	local08, objptr
09038     04 B4 06 F1 | 	add	local08, #4
0903c     5A C1 02 FB | 	rdlong	local14, local08
09040     12 C0 0E F2 | 	cmp	local14, #18 wz
09044     36 00 00 FF 
09048     B0 65 86 F1 | 	sub	objptr, ##28080
0904c     60 01 90 5D |  if_ne	jmp	#LR__0845
09050     22 AA 06 F6 | 	mov	local03, #34
09054     53 B5 02 F6 | 	mov	local08, local01
09058     54 B3 02 F6 | 	mov	local07, local02
0905c     55 B9 02 F6 | 	mov	local10, local03
09060     4C 00 00 FF 
09064     20 64 06 F1 | 	add	objptr, ##38944
09068     32 C1 02 FB | 	rdlong	local14, objptr
0906c     60 BF 02 F6 | 	mov	local13, local14
09070     01 BE 66 F0 | 	shl	local13, #1
09074     60 BF 02 F1 | 	add	local13, local14
09078     02 BE 66 F0 | 	shl	local13, #2
0907c     03 00 00 FF 
09080     00 64 86 F1 | 	sub	objptr, ##1536
09084     32 BF 02 F1 | 	add	local13, objptr
09088     5F B5 62 FC | 	wrlong	local08, local13
0908c     03 00 00 FF 
09090     00 64 06 F1 | 	add	objptr, ##1536
09094     32 C1 02 FB | 	rdlong	local14, objptr
09098     60 B5 02 F6 | 	mov	local08, local14
0909c     01 B4 66 F0 | 	shl	local08, #1
090a0     60 B5 02 F1 | 	add	local08, local14
090a4     02 B4 66 F0 | 	shl	local08, #2
090a8     03 00 00 FF 
090ac     00 64 86 F1 | 	sub	objptr, ##1536
090b0     32 B5 02 F1 | 	add	local08, objptr
090b4     04 B4 06 F1 | 	add	local08, #4
090b8     5A B3 62 FC | 	wrlong	local07, local08
090bc     03 00 00 FF 
090c0     00 64 06 F1 | 	add	objptr, ##1536
090c4     32 B5 02 FB | 	rdlong	local08, objptr
090c8     5A C1 02 F6 | 	mov	local14, local08
090cc     01 C0 66 F0 | 	shl	local14, #1
090d0     5A C1 02 F1 | 	add	local14, local08
090d4     02 C0 66 F0 | 	shl	local14, #2
090d8     03 00 00 FF 
090dc     00 64 86 F1 | 	sub	objptr, ##1536
090e0     32 C1 02 F1 | 	add	local14, objptr
090e4     08 C0 06 F1 | 	add	local14, #8
090e8     60 B9 62 FC | 	wrlong	local10, local14
090ec     03 00 00 FF 
090f0     00 64 06 F1 | 	add	objptr, ##1536
090f4     32 B5 02 FB | 	rdlong	local08, objptr
090f8     01 B4 06 F1 | 	add	local08, #1
090fc     32 B5 62 FC | 	wrlong	local08, objptr
09100     44 AA 06 F6 | 	mov	local03, #68
09104     53 B5 02 F6 | 	mov	local08, local01
09108     54 B3 02 F6 | 	mov	local07, local02
0910c     55 B9 02 F6 | 	mov	local10, local03
09110     32 C1 02 FB | 	rdlong	local14, objptr
09114     60 BF 02 F6 | 	mov	local13, local14
09118     01 BE 66 F0 | 	shl	local13, #1
0911c     60 BF 02 F1 | 	add	local13, local14
09120     02 BE 66 F0 | 	shl	local13, #2
09124     03 00 00 FF 
09128     00 64 86 F1 | 	sub	objptr, ##1536
0912c     32 BF 02 F1 | 	add	local13, objptr
09130     5F B5 62 FC | 	wrlong	local08, local13
09134     03 00 00 FF 
09138     00 64 06 F1 | 	add	objptr, ##1536
0913c     32 C1 02 FB | 	rdlong	local14, objptr
09140     60 BF 02 F6 | 	mov	local13, local14
09144     01 BE 66 F0 | 	shl	local13, #1
09148     60 BF 02 F1 | 	add	local13, local14
0914c     02 BE 66 F0 | 	shl	local13, #2
09150     03 00 00 FF 
09154     00 64 86 F1 | 	sub	objptr, ##1536
09158     32 BF 02 F1 | 	add	local13, objptr
0915c     04 BE 06 F1 | 	add	local13, #4
09160     5F B3 62 FC | 	wrlong	local07, local13
09164     03 00 00 FF 
09168     00 64 06 F1 | 	add	objptr, ##1536
0916c     32 BF 02 FB | 	rdlong	local13, objptr
09170     5F C1 02 F6 | 	mov	local14, local13
09174     01 C0 66 F0 | 	shl	local14, #1
09178     5F C1 02 F1 | 	add	local14, local13
0917c     02 C0 66 F0 | 	shl	local14, #2
09180     03 00 00 FF 
09184     00 64 86 F1 | 	sub	objptr, ##1536
09188     32 C1 02 F1 | 	add	local14, objptr
0918c     08 C0 06 F1 | 	add	local14, #8
09190     60 B9 62 FC | 	wrlong	local10, local14
09194     03 00 00 FF 
09198     00 64 06 F1 | 	add	objptr, ##1536
0919c     32 B5 02 FB | 	rdlong	local08, objptr
091a0     01 B4 06 F1 | 	add	local08, #1
091a4     32 B5 62 FC | 	wrlong	local08, objptr
091a8     4C 00 00 FF 
091ac     20 64 86 F1 | 	sub	objptr, ##38944
091b0                 | LR__0845
091b0                 | '   if lparts(ct).token<>token_semicolon  andalso lparts(ct).token<>token_comma then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 : ct-=1
091b0     38 00 00 FF 
091b4     E8 65 06 F1 | 	add	objptr, ##29160
091b8     32 B5 02 FB | 	rdlong	local08, objptr
091bc     03 B4 66 F0 | 	shl	local08, #3
091c0     02 00 00 FF 
091c4     38 64 86 F1 | 	sub	objptr, ##1080
091c8     32 B5 02 F1 | 	add	local08, objptr
091cc     04 B4 06 F1 | 	add	local08, #4
091d0     5A C1 02 FB | 	rdlong	local14, local08
091d4     12 C0 0E F2 | 	cmp	local14, #18 wz
091d8     36 00 00 FF 
091dc     B0 65 86 F1 | 	sub	objptr, ##28080
091e0     00 01 90 AD |  if_e	jmp	#LR__0846
091e4     38 00 00 FF 
091e8     E8 65 06 F1 | 	add	objptr, ##29160
091ec     32 B5 02 FB | 	rdlong	local08, objptr
091f0     03 B4 66 F0 | 	shl	local08, #3
091f4     02 00 00 FF 
091f8     38 64 86 F1 | 	sub	objptr, ##1080
091fc     32 B5 02 F1 | 	add	local08, objptr
09200     04 B4 06 F1 | 	add	local08, #4
09204     5A C1 02 FB | 	rdlong	local14, local08
09208     11 C0 0E F2 | 	cmp	local14, #17 wz
0920c     36 00 00 FF 
09210     B0 65 86 F1 | 	sub	objptr, ##28080
09214     CC 00 90 AD |  if_e	jmp	#LR__0846
09218     44 AA 06 F6 | 	mov	local03, #68
0921c     53 B5 02 F6 | 	mov	local08, local01
09220     54 B3 02 F6 | 	mov	local07, local02
09224     55 B9 02 F6 | 	mov	local10, local03
09228     4C 00 00 FF 
0922c     20 64 06 F1 | 	add	objptr, ##38944
09230     32 C1 02 FB | 	rdlong	local14, objptr
09234     60 BF 02 F6 | 	mov	local13, local14
09238     01 BE 66 F0 | 	shl	local13, #1
0923c     60 BF 02 F1 | 	add	local13, local14
09240     02 BE 66 F0 | 	shl	local13, #2
09244     03 00 00 FF 
09248     00 64 86 F1 | 	sub	objptr, ##1536
0924c     32 BF 02 F1 | 	add	local13, objptr
09250     5F B5 62 FC | 	wrlong	local08, local13
09254     03 00 00 FF 
09258     00 64 06 F1 | 	add	objptr, ##1536
0925c     32 C1 02 FB | 	rdlong	local14, objptr
09260     60 BF 02 F6 | 	mov	local13, local14
09264     01 BE 66 F0 | 	shl	local13, #1
09268     60 BF 02 F1 | 	add	local13, local14
0926c     02 BE 66 F0 | 	shl	local13, #2
09270     03 00 00 FF 
09274     00 64 86 F1 | 	sub	objptr, ##1536
09278     32 BF 02 F1 | 	add	local13, objptr
0927c     04 BE 06 F1 | 	add	local13, #4
09280     5F B3 62 FC | 	wrlong	local07, local13
09284     03 00 00 FF 
09288     00 64 06 F1 | 	add	objptr, ##1536
0928c     32 BF 02 FB | 	rdlong	local13, objptr
09290     5F C1 02 F6 | 	mov	local14, local13
09294     01 C0 66 F0 | 	shl	local14, #1
09298     5F C1 02 F1 | 	add	local14, local13
0929c     02 C0 66 F0 | 	shl	local14, #2
092a0     03 00 00 FF 
092a4     00 64 86 F1 | 	sub	objptr, ##1536
092a8     32 C1 02 F1 | 	add	local14, objptr
092ac     08 C0 06 F1 | 	add	local14, #8
092b0     60 B9 62 FC | 	wrlong	local10, local14
092b4     03 00 00 FF 
092b8     00 64 06 F1 | 	add	objptr, ##1536
092bc     32 B5 02 FB | 	rdlong	local08, objptr
092c0     01 B4 06 F1 | 	add	local08, #1
092c4     32 B5 62 FC | 	wrlong	local08, objptr
092c8     13 00 00 FF 
092cc     38 64 86 F1 | 	sub	objptr, ##9784
092d0     32 B5 02 FB | 	rdlong	local08, objptr
092d4     01 B4 86 F1 | 	sub	local08, #1
092d8     32 B5 62 FC | 	wrlong	local08, objptr
092dc     38 00 00 FF 
092e0     E8 65 86 F1 | 	sub	objptr, ##29160
092e4                 | LR__0846
092e4     38 00 00 FF 
092e8     E8 65 06 F1 | 	add	objptr, ##29160
092ec     32 B5 02 FB | 	rdlong	local08, objptr
092f0     01 B4 06 F1 | 	add	local08, #1
092f4     32 B5 62 FC | 	wrlong	local08, objptr
092f8     38 00 00 FF 
092fc     E8 65 86 F1 | 	sub	objptr, ##29160
09300                 | LR__0847
09300     00 AE 06 F6 | 	mov	local05, #0
09304                 | ' i=0 : err=0
09304                 | ' if lparts(ct).token<>token_end then
09304     38 00 00 FF 
09308     E8 65 06 F1 | 	add	objptr, ##29160
0930c     32 C1 02 FB | 	rdlong	local14, objptr
09310     03 C0 66 F0 | 	shl	local14, #3
09314     02 00 00 FF 
09318     38 64 86 F1 | 	sub	objptr, ##1080
0931c     32 C1 02 F1 | 	add	local14, objptr
09320     04 C0 06 F1 | 	add	local14, #4
09324     60 C1 02 FB | 	rdlong	local14, local14
09328     FE C1 0E F2 | 	cmp	local14, #510 wz
0932c     36 00 00 FF 
09330     B0 65 86 F1 | 	sub	objptr, ##28080
09334     98 00 90 AD |  if_e	jmp	#LR__0849
09338                 | '   do
09338                 | LR__0848
09338     8C 27 B0 FD | 	call	#_getaddr
0933c     3D C3 02 F6 | 	mov	local15, result1
09340     38 00 00 FF 
09344     E8 65 06 F1 | 	add	objptr, ##29160
09348     32 C1 02 FB | 	rdlong	local14, objptr
0934c     01 C0 06 F1 | 	add	local14, #1
09350     32 C1 62 FC | 	wrlong	local14, objptr
09354     01 AE 06 F1 | 	add	local05, #1
09358                 | '     err=getaddr() :ct+=1
09358                 | '     i+=1 
09358                 | '     if lparts(ct).token=token_comma then ct+=1 
09358     03 C0 66 F0 | 	shl	local14, #3
0935c     02 00 00 FF 
09360     38 64 86 F1 | 	sub	objptr, ##1080
09364     32 C1 02 F1 | 	add	local14, objptr
09368     04 C0 06 F1 | 	add	local14, #4
0936c     60 C1 02 FB | 	rdlong	local14, local14
09370     11 C0 0E F2 | 	cmp	local14, #17 wz
09374     36 00 00 FF 
09378     B0 65 86 F1 | 	sub	objptr, ##28080
0937c     38 00 00 AF 
09380     E8 65 06 A1 |  if_e	add	objptr, ##29160
09384     32 B5 02 AB |  if_e	rdlong	local08, objptr
09388     01 B4 06 A1 |  if_e	add	local08, #1
0938c     32 B5 62 AC |  if_e	wrlong	local08, objptr
09390     38 00 00 AF 
09394     E8 65 86 A1 |  if_e	sub	objptr, ##29160
09398                 | '     if lparts(ct).token=token_end then exit loop
09398     38 00 00 FF 
0939c     E8 65 06 F1 | 	add	objptr, ##29160
093a0     32 C1 02 FB | 	rdlong	local14, objptr
093a4     03 C0 66 F0 | 	shl	local14, #3
093a8     02 00 00 FF 
093ac     38 64 86 F1 | 	sub	objptr, ##1080
093b0     32 C1 02 F1 | 	add	local14, objptr
093b4     04 C0 06 F1 | 	add	local14, #4
093b8     60 C1 02 FB | 	rdlong	local14, local14
093bc     FE C1 0E F2 | 	cmp	local14, #510 wz
093c0     36 00 00 FF 
093c4     B0 65 86 F1 | 	sub	objptr, ##28080
093c8     08 00 90 AD |  if_e	jmp	#LR__0850
093cc     68 FF 9F FD | 	jmp	#LR__0848
093d0                 | LR__0849
093d0     36 C2 06 F6 | 	mov	local15, #54
093d4                 | LR__0850
093d4                 | ' return i,err
093d4     57 7B 02 F6 | 	mov	result1, local05
093d8     61 7D 02 F6 | 	mov	result2, local15
093dc     E7 F0 03 F6 | 	mov	ptra, fp
093e0     F2 00 A0 FD | 	call	#popregs_
093e4                 | _compile_input_ret
093e4     2D 00 64 FD | 	ret
093e8                 | 
093e8                 | ' 
093e8                 | ' '----- compile assign to an array element
093e8                 | ' 
093e8                 | ' function compile_array_assign() as ulong 
093e8                 | _compile_array_assign
093e8     0B CA 05 F6 | 	mov	COUNT_, #11
093ec     E8 00 A0 FD | 	call	#pushregs_
093f0     00 AC 06 F6 | 	mov	local04, #0
093f4     00 AE 06 F6 | 	mov	local05, #0
093f8     38 00 00 FF 
093fc     E8 65 06 F1 | 	add	objptr, ##29160
09400     32 B1 02 FB | 	rdlong	local06, objptr
09404     58 7B 02 F6 | 	mov	result1, local06
09408     01 7A 86 F1 | 	sub	result1, #1
0940c     03 7A 66 F0 | 	shl	result1, #3
09410     02 00 00 FF 
09414     38 64 86 F1 | 	sub	objptr, ##1080
09418     32 7B 02 F1 | 	add	result1, objptr
0941c     3D B3 02 FB | 	rdlong	local07, result1
09420                 | ' numpar=0 : err=0
09420                 | ' varname$=lparts(ct-1).part$
09420                 | ' if lparts(ct).token=token_lpar then
09420     03 B0 66 F0 | 	shl	local06, #3
09424     32 B1 02 F1 | 	add	local06, objptr
09428     04 B0 06 F1 | 	add	local06, #4
0942c     58 B1 02 FB | 	rdlong	local06, local06
09430     15 B0 0E F2 | 	cmp	local06, #21 wz
09434     36 00 00 FF 
09438     B0 65 86 F1 | 	sub	objptr, ##28080
0943c     F0 01 90 5D |  if_ne	jmp	#LR__0864
09440     38 00 00 FF 
09444     E8 65 06 F1 | 	add	objptr, ##29160
09448     32 B5 02 FB | 	rdlong	local08, objptr
0944c     01 B4 06 F1 | 	add	local08, #1
09450     32 B5 62 FC | 	wrlong	local08, objptr
09454     38 00 00 FF 
09458     E8 65 86 F1 | 	sub	objptr, ##29160
0945c                 | '   ct+=1 											' omit this lpar, this is for expr list
0945c                 | '   do
0945c                 | LR__0860
0945c     F8 29 B0 FD | 	call	#_expr
09460     38 00 00 FF 
09464     E8 65 06 F1 | 	add	objptr, ##29160
09468     32 B1 02 FB | 	rdlong	local06, objptr
0946c     01 B0 06 F1 | 	add	local06, #1
09470     32 B1 62 FC | 	wrlong	local06, objptr
09474     01 AC 06 F1 | 	add	local04, #1
09478     01 B0 86 F1 | 	sub	local06, #1
0947c     03 B0 66 F0 | 	shl	local06, #3
09480     02 00 00 FF 
09484     38 64 86 F1 | 	sub	objptr, ##1080
09488     32 B1 02 F1 | 	add	local06, objptr
0948c     04 B0 06 F1 | 	add	local06, #4
09490     58 B5 02 FB | 	rdlong	local08, local06
09494     14 B4 0E F2 | 	cmp	local08, #20 wz
09498     36 00 00 FF 
0949c     B0 65 86 F1 | 	sub	objptr, ##28080
094a0     34 00 90 AD |  if_e	jmp	#LR__0861
094a4     38 00 00 FF 
094a8     E8 65 06 F1 | 	add	objptr, ##29160
094ac     32 B5 02 FB | 	rdlong	local08, objptr
094b0     03 B4 66 F0 | 	shl	local08, #3
094b4     02 00 00 FF 
094b8     38 64 86 F1 | 	sub	objptr, ##1080
094bc     32 B5 02 F1 | 	add	local08, objptr
094c0     04 B4 06 F1 | 	add	local08, #4
094c4     5A B5 02 FB | 	rdlong	local08, local08
094c8     FE B5 0E F2 | 	cmp	local08, #510 wz
094cc     36 00 00 FF 
094d0     B0 65 86 F1 | 	sub	objptr, ##28080
094d4     84 FF 9F 5D |  if_ne	jmp	#LR__0860
094d8                 | LR__0861
094d8     38 00 00 FF 
094dc     E8 65 06 F1 | 	add	objptr, ##29160
094e0     32 B5 02 FB | 	rdlong	local08, objptr
094e4     01 B4 06 F1 | 	add	local08, #1
094e8     32 B5 62 FC | 	wrlong	local08, objptr
094ec     38 00 00 FF 
094f0     E8 65 86 F1 | 	sub	objptr, ##29160
094f4     60 29 B0 FD | 	call	#_expr
094f8     01 B6 66 F6 | 	neg	local09, #1
094fc     00 B8 06 F6 | 	mov	local10, #0
09500                 | '   ct+=1 : expr()
09500                 | '   j=-1 : i=0 
09500                 | '   do 
09500                 | LR__0862
09500                 | '     if variables(i).name=varname$ then j=i: exit loop
09500     5C B1 02 F6 | 	mov	local06, local10
09504     04 B0 66 F0 | 	shl	local06, #4
09508     32 B5 02 F6 | 	mov	local08, objptr
0950c     16 00 00 FF 
09510     9C B5 06 F1 | 	add	local08, ##11676
09514     5A B1 02 F1 | 	add	local06, local08
09518     58 93 02 FB | 	rdlong	arg01, local06
0951c     59 95 02 F6 | 	mov	arg02, local07
09520     DC B4 B1 FD | 	call	#__system___string_cmp
09524     00 7A 0E F2 | 	cmp	result1, #0 wz
09528     5C B7 02 A6 |  if_e	mov	local09, local10
0952c     20 00 90 AD |  if_e	jmp	#LR__0863
09530     01 B8 06 F1 | 	add	local10, #1
09534     36 00 00 FF 
09538     AC 65 06 F1 | 	add	objptr, ##28076
0953c     32 B5 02 FB | 	rdlong	local08, objptr
09540     36 00 00 FF 
09544     AC 65 86 F1 | 	sub	objptr, ##28076
09548     5A B9 5A F2 | 	cmps	local10, local08 wcz
0954c     B0 FF 9F ED |  if_be	jmp	#LR__0862
09550                 | LR__0863
09550     5B A7 02 F6 | 	mov	local01, local09
09554     56 A9 02 F6 | 	mov	local02, local04
09558     17 AA 06 F6 | 	mov	local03, #23
0955c     53 B5 02 F6 | 	mov	local08, local01
09560     54 BB 02 F6 | 	mov	local11, local02
09564     55 B3 02 F6 | 	mov	local07, local03
09568     4C 00 00 FF 
0956c     20 64 06 F1 | 	add	objptr, ##38944
09570     32 A7 02 FB | 	rdlong	local01, objptr
09574     53 B7 02 F6 | 	mov	local09, local01
09578     01 B6 66 F0 | 	shl	local09, #1
0957c     53 B7 02 F1 | 	add	local09, local01
09580     02 B6 66 F0 | 	shl	local09, #2
09584     03 00 00 FF 
09588     00 64 86 F1 | 	sub	objptr, ##1536
0958c     32 B7 02 F1 | 	add	local09, objptr
09590     5B B5 62 FC | 	wrlong	local08, local09
09594     03 00 00 FF 
09598     00 64 06 F1 | 	add	objptr, ##1536
0959c     32 A7 02 FB | 	rdlong	local01, objptr
095a0     53 B7 02 F6 | 	mov	local09, local01
095a4     01 B6 66 F0 | 	shl	local09, #1
095a8     53 B7 02 F1 | 	add	local09, local01
095ac     02 B6 66 F0 | 	shl	local09, #2
095b0     03 00 00 FF 
095b4     00 64 86 F1 | 	sub	objptr, ##1536
095b8     32 B7 02 F1 | 	add	local09, objptr
095bc     04 B6 06 F1 | 	add	local09, #4
095c0     5B BB 62 FC | 	wrlong	local11, local09
095c4     03 00 00 FF 
095c8     00 64 06 F1 | 	add	objptr, ##1536
095cc     32 BB 02 FB | 	rdlong	local11, objptr
095d0     5D A7 02 F6 | 	mov	local01, local11
095d4     01 A6 66 F0 | 	shl	local01, #1
095d8     5D A7 02 F1 | 	add	local01, local11
095dc     02 A6 66 F0 | 	shl	local01, #2
095e0     03 00 00 FF 
095e4     00 64 86 F1 | 	sub	objptr, ##1536
095e8     32 A7 02 F1 | 	add	local01, objptr
095ec     08 A6 06 F1 | 	add	local01, #8
095f0     53 B3 62 FC | 	wrlong	local07, local01
095f4     03 00 00 FF 
095f8     00 64 06 F1 | 	add	objptr, ##1536
095fc     32 B5 02 FB | 	rdlong	local08, objptr
09600     01 B4 06 F1 | 	add	local08, #1
09604     32 B5 62 FC | 	wrlong	local08, objptr
09608                 | '   t1.result.twowords(0)=j: t1.result.twowords(1)=numpar : t1.result_type=fun_assign : compiledline(lineptr)=t1: lineptr +=1 
09608                 | '   if numpar>3 then err=45
09608     04 AC 16 F2 | 	cmp	local04, #4 wc
0960c     2D AE 06 36 |  if_ae	mov	local05, #45
09610                 | '   if i>varnum then err=20
09610     15 00 00 FF 
09614     74 64 86 F1 | 	sub	objptr, ##10868
09618     32 B5 02 FB | 	rdlong	local08, objptr
0961c     36 00 00 FF 
09620     AC 65 86 F1 | 	sub	objptr, ##28076
09624     5A B9 5A F2 | 	cmps	local10, local08 wcz
09628     14 AE 06 16 |  if_a	mov	local05, #20
0962c     04 00 90 FD | 	jmp	#LR__0865
09630                 | LR__0864
09630     0E AE 06 F6 | 	mov	local05, #14
09634                 | LR__0865
09634                 | ' return err
09634     57 7B 02 F6 | 	mov	result1, local05
09638     E7 F0 03 F6 | 	mov	ptra, fp
0963c     F2 00 A0 FD | 	call	#popregs_
09640                 | _compile_array_assign_ret
09640     2D 00 64 FD | 	ret
09644                 | 
09644                 | ' 
09644                 | ' '----- compile print command with its ";" and "," modifiers
09644                 | ' 
09644                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
09644                 | _compile_print
09644     0B CA 05 F6 | 	mov	COUNT_, #11
09648     E8 00 A0 FD | 	call	#pushregs_
0964c     00 A6 06 F6 | 	mov	local01, #0
09650     1D AA 06 F6 | 	mov	local03, #29
09654                 | ' t1.result.uresult=0 : t1.result_type=result_uint
09654                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
09654     38 00 00 FF 
09658     E8 65 06 F1 | 	add	objptr, ##29160
0965c     32 AD 02 FB | 	rdlong	local04, objptr
09660     03 AC 66 F0 | 	shl	local04, #3
09664     02 00 00 FF 
09668     38 64 86 F1 | 	sub	objptr, ##1080
0966c     32 AD 02 F1 | 	add	local04, objptr
09670     04 AC 06 F1 | 	add	local04, #4
09674     56 AD 02 FB | 	rdlong	local04, local04
09678     FE AD 0E F2 | 	cmp	local04, #510 wz
0967c     36 00 00 FF 
09680     B0 65 86 F1 | 	sub	objptr, ##28080
09684     68 01 90 5D |  if_ne	jmp	#LR__0870
09688     20 AA 06 F6 | 	mov	local03, #32
0968c     53 AF 02 F6 | 	mov	local05, local01
09690     54 B1 02 F6 | 	mov	local06, local02
09694     55 B3 02 F6 | 	mov	local07, local03
09698     4C 00 00 FF 
0969c     20 64 06 F1 | 	add	objptr, ##38944
096a0     32 B5 02 FB | 	rdlong	local08, objptr
096a4     5A B7 02 F6 | 	mov	local09, local08
096a8     01 B6 66 F0 | 	shl	local09, #1
096ac     5A B7 02 F1 | 	add	local09, local08
096b0     02 B6 66 F0 | 	shl	local09, #2
096b4     03 00 00 FF 
096b8     00 64 86 F1 | 	sub	objptr, ##1536
096bc     32 B7 02 F1 | 	add	local09, objptr
096c0     5B AF 62 FC | 	wrlong	local05, local09
096c4     03 00 00 FF 
096c8     00 64 06 F1 | 	add	objptr, ##1536
096cc     32 AF 02 FB | 	rdlong	local05, objptr
096d0     57 B9 02 F6 | 	mov	local10, local05
096d4     01 B8 66 F0 | 	shl	local10, #1
096d8     57 B9 02 F1 | 	add	local10, local05
096dc     02 B8 66 F0 | 	shl	local10, #2
096e0     03 00 00 FF 
096e4     00 64 86 F1 | 	sub	objptr, ##1536
096e8     32 B9 02 F1 | 	add	local10, objptr
096ec     04 B8 06 F1 | 	add	local10, #4
096f0     5C B1 62 FC | 	wrlong	local06, local10
096f4     03 00 00 FF 
096f8     00 64 06 F1 | 	add	objptr, ##1536
096fc     32 AF 02 FB | 	rdlong	local05, objptr
09700     57 BB 02 F6 | 	mov	local11, local05
09704     01 BA 66 F0 | 	shl	local11, #1
09708     57 BB 02 F1 | 	add	local11, local05
0970c     02 BA 66 F0 | 	shl	local11, #2
09710     03 00 00 FF 
09714     00 64 86 F1 | 	sub	objptr, ##1536
09718     32 BB 02 F1 | 	add	local11, objptr
0971c     08 BA 06 F1 | 	add	local11, #8
09720     5D B3 62 FC | 	wrlong	local07, local11
09724     03 00 00 FF 
09728     00 64 06 F1 | 	add	objptr, ##1536
0972c     32 AF 02 FB | 	rdlong	local05, objptr
09730     01 AE 06 F1 | 	add	local05, #1
09734     32 AF 62 FC | 	wrlong	local05, objptr
09738     44 AA 06 F6 | 	mov	local03, #68
0973c     53 AF 02 F6 | 	mov	local05, local01
09740     54 B1 02 F6 | 	mov	local06, local02
09744     55 B3 02 F6 | 	mov	local07, local03
09748     32 B5 02 FB | 	rdlong	local08, objptr
0974c     5A B7 02 F6 | 	mov	local09, local08
09750     01 B6 66 F0 | 	shl	local09, #1
09754     5A B7 02 F1 | 	add	local09, local08
09758     02 B6 66 F0 | 	shl	local09, #2
0975c     03 00 00 FF 
09760     00 64 86 F1 | 	sub	objptr, ##1536
09764     32 B7 02 F1 | 	add	local09, objptr
09768     5B AF 62 FC | 	wrlong	local05, local09
0976c     03 00 00 FF 
09770     00 64 06 F1 | 	add	objptr, ##1536
09774     32 BB 02 FB | 	rdlong	local11, objptr
09778     5D B9 02 F6 | 	mov	local10, local11
0977c     01 B8 66 F0 | 	shl	local10, #1
09780     5D B9 02 F1 | 	add	local10, local11
09784     02 B8 66 F0 | 	shl	local10, #2
09788     03 00 00 FF 
0978c     00 64 86 F1 | 	sub	objptr, ##1536
09790     32 B9 02 F1 | 	add	local10, objptr
09794     04 B8 06 F1 | 	add	local10, #4
09798     5C B1 62 FC | 	wrlong	local06, local10
0979c     03 00 00 FF 
097a0     00 64 06 F1 | 	add	objptr, ##1536
097a4     32 B9 02 FB | 	rdlong	local10, objptr
097a8     5C BB 02 F6 | 	mov	local11, local10
097ac     01 BA 66 F0 | 	shl	local11, #1
097b0     5C BB 02 F1 | 	add	local11, local10
097b4     02 BA 66 F0 | 	shl	local11, #2
097b8     03 00 00 FF 
097bc     00 64 86 F1 | 	sub	objptr, ##1536
097c0     32 BB 02 F1 | 	add	local11, objptr
097c4     08 BA 06 F1 | 	add	local11, #8
097c8     5D B3 62 FC | 	wrlong	local07, local11
097cc     03 00 00 FF 
097d0     00 64 06 F1 | 	add	objptr, ##1536
097d4     32 AF 02 FB | 	rdlong	local05, objptr
097d8     01 AE 06 F1 | 	add	local05, #1
097dc     32 AF 62 FC | 	wrlong	local05, objptr
097e0     4C 00 00 FF 
097e4     20 64 86 F1 | 	sub	objptr, ##38944
097e8     00 7A 06 F6 | 	mov	result1, #0
097ec     20 05 90 FD | 	jmp	#LR__0877
097f0                 | LR__0870
097f0                 | ' do
097f0                 | LR__0871
097f0     64 26 B0 FD | 	call	#_expr
097f4                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
097f4                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
097f4     38 00 00 FF 
097f8     E8 65 06 F1 | 	add	objptr, ##29160
097fc     32 AD 02 FB | 	rdlong	local04, objptr
09800     03 AC 66 F0 | 	shl	local04, #3
09804     02 00 00 FF 
09808     38 64 86 F1 | 	sub	objptr, ##1080
0980c     32 AD 02 F1 | 	add	local04, objptr
09810     04 AC 06 F1 | 	add	local04, #4
09814     56 B5 02 FB | 	rdlong	local08, local04
09818     11 B4 0E F2 | 	cmp	local08, #17 wz
0981c     36 00 00 FF 
09820     B0 65 86 F1 | 	sub	objptr, ##28080
09824     60 01 90 5D |  if_ne	jmp	#LR__0872
09828     21 AA 06 F6 | 	mov	local03, #33
0982c     53 AF 02 F6 | 	mov	local05, local01
09830     54 B1 02 F6 | 	mov	local06, local02
09834     55 B3 02 F6 | 	mov	local07, local03
09838     4C 00 00 FF 
0983c     20 64 06 F1 | 	add	objptr, ##38944
09840     32 B5 02 FB | 	rdlong	local08, objptr
09844     5A B7 02 F6 | 	mov	local09, local08
09848     01 B6 66 F0 | 	shl	local09, #1
0984c     5A B7 02 F1 | 	add	local09, local08
09850     02 B6 66 F0 | 	shl	local09, #2
09854     03 00 00 FF 
09858     00 64 86 F1 | 	sub	objptr, ##1536
0985c     32 B7 02 F1 | 	add	local09, objptr
09860     5B AF 62 FC | 	wrlong	local05, local09
09864     03 00 00 FF 
09868     00 64 06 F1 | 	add	objptr, ##1536
0986c     32 BB 02 FB | 	rdlong	local11, objptr
09870     5D B9 02 F6 | 	mov	local10, local11
09874     01 B8 66 F0 | 	shl	local10, #1
09878     5D B9 02 F1 | 	add	local10, local11
0987c     02 B8 66 F0 | 	shl	local10, #2
09880     03 00 00 FF 
09884     00 64 86 F1 | 	sub	objptr, ##1536
09888     32 B9 02 F1 | 	add	local10, objptr
0988c     04 B8 06 F1 | 	add	local10, #4
09890     5C B1 62 FC | 	wrlong	local06, local10
09894     03 00 00 FF 
09898     00 64 06 F1 | 	add	objptr, ##1536
0989c     32 AF 02 FB | 	rdlong	local05, objptr
098a0     57 BB 02 F6 | 	mov	local11, local05
098a4     01 BA 66 F0 | 	shl	local11, #1
098a8     57 BB 02 F1 | 	add	local11, local05
098ac     02 BA 66 F0 | 	shl	local11, #2
098b0     03 00 00 FF 
098b4     00 64 86 F1 | 	sub	objptr, ##1536
098b8     32 BB 02 F1 | 	add	local11, objptr
098bc     08 BA 06 F1 | 	add	local11, #8
098c0     5D B3 62 FC | 	wrlong	local07, local11
098c4     03 00 00 FF 
098c8     00 64 06 F1 | 	add	objptr, ##1536
098cc     32 AF 02 FB | 	rdlong	local05, objptr
098d0     01 AE 06 F1 | 	add	local05, #1
098d4     32 AF 62 FC | 	wrlong	local05, objptr
098d8     44 AA 06 F6 | 	mov	local03, #68
098dc     53 AF 02 F6 | 	mov	local05, local01
098e0     54 B1 02 F6 | 	mov	local06, local02
098e4     55 B3 02 F6 | 	mov	local07, local03
098e8     32 B5 02 FB | 	rdlong	local08, objptr
098ec     5A B7 02 F6 | 	mov	local09, local08
098f0     01 B6 66 F0 | 	shl	local09, #1
098f4     5A B7 02 F1 | 	add	local09, local08
098f8     02 B6 66 F0 | 	shl	local09, #2
098fc     03 00 00 FF 
09900     00 64 86 F1 | 	sub	objptr, ##1536
09904     32 B7 02 F1 | 	add	local09, objptr
09908     5B AF 62 FC | 	wrlong	local05, local09
0990c     03 00 00 FF 
09910     00 64 06 F1 | 	add	objptr, ##1536
09914     32 BB 02 FB | 	rdlong	local11, objptr
09918     5D B9 02 F6 | 	mov	local10, local11
0991c     01 B8 66 F0 | 	shl	local10, #1
09920     5D B9 02 F1 | 	add	local10, local11
09924     02 B8 66 F0 | 	shl	local10, #2
09928     03 00 00 FF 
0992c     00 64 86 F1 | 	sub	objptr, ##1536
09930     32 B9 02 F1 | 	add	local10, objptr
09934     04 B8 06 F1 | 	add	local10, #4
09938     5C B1 62 FC | 	wrlong	local06, local10
0993c     03 00 00 FF 
09940     00 64 06 F1 | 	add	objptr, ##1536
09944     32 B9 02 FB | 	rdlong	local10, objptr
09948     5C BB 02 F6 | 	mov	local11, local10
0994c     01 BA 66 F0 | 	shl	local11, #1
09950     5C BB 02 F1 | 	add	local11, local10
09954     02 BA 66 F0 | 	shl	local11, #2
09958     03 00 00 FF 
0995c     00 64 86 F1 | 	sub	objptr, ##1536
09960     32 BB 02 F1 | 	add	local11, objptr
09964     08 BA 06 F1 | 	add	local11, #8
09968     5D B3 62 FC | 	wrlong	local07, local11
0996c     03 00 00 FF 
09970     00 64 06 F1 | 	add	objptr, ##1536
09974     32 AF 02 FB | 	rdlong	local05, objptr
09978     01 AE 06 F1 | 	add	local05, #1
0997c     32 AF 62 FC | 	wrlong	local05, objptr
09980     4C 00 00 FF 
09984     20 64 86 F1 | 	sub	objptr, ##38944
09988                 | LR__0872
09988                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
09988     38 00 00 FF 
0998c     E8 65 06 F1 | 	add	objptr, ##29160
09990     32 AD 02 FB | 	rdlong	local04, objptr
09994     03 AC 66 F0 | 	shl	local04, #3
09998     02 00 00 FF 
0999c     38 64 86 F1 | 	sub	objptr, ##1080
099a0     32 AD 02 F1 | 	add	local04, objptr
099a4     04 AC 06 F1 | 	add	local04, #4
099a8     56 B5 02 FB | 	rdlong	local08, local04
099ac     12 B4 0E F2 | 	cmp	local08, #18 wz
099b0     36 00 00 FF 
099b4     B0 65 86 F1 | 	sub	objptr, ##28080
099b8     60 01 90 5D |  if_ne	jmp	#LR__0873
099bc     22 AA 06 F6 | 	mov	local03, #34
099c0     53 AF 02 F6 | 	mov	local05, local01
099c4     54 B1 02 F6 | 	mov	local06, local02
099c8     55 B3 02 F6 | 	mov	local07, local03
099cc     4C 00 00 FF 
099d0     20 64 06 F1 | 	add	objptr, ##38944
099d4     32 B5 02 FB | 	rdlong	local08, objptr
099d8     5A B7 02 F6 | 	mov	local09, local08
099dc     01 B6 66 F0 | 	shl	local09, #1
099e0     5A B7 02 F1 | 	add	local09, local08
099e4     02 B6 66 F0 | 	shl	local09, #2
099e8     03 00 00 FF 
099ec     00 64 86 F1 | 	sub	objptr, ##1536
099f0     32 B7 02 F1 | 	add	local09, objptr
099f4     5B AF 62 FC | 	wrlong	local05, local09
099f8     03 00 00 FF 
099fc     00 64 06 F1 | 	add	objptr, ##1536
09a00     32 BB 02 FB | 	rdlong	local11, objptr
09a04     5D B9 02 F6 | 	mov	local10, local11
09a08     01 B8 66 F0 | 	shl	local10, #1
09a0c     5D B9 02 F1 | 	add	local10, local11
09a10     02 B8 66 F0 | 	shl	local10, #2
09a14     03 00 00 FF 
09a18     00 64 86 F1 | 	sub	objptr, ##1536
09a1c     32 B9 02 F1 | 	add	local10, objptr
09a20     04 B8 06 F1 | 	add	local10, #4
09a24     5C B1 62 FC | 	wrlong	local06, local10
09a28     03 00 00 FF 
09a2c     00 64 06 F1 | 	add	objptr, ##1536
09a30     32 AF 02 FB | 	rdlong	local05, objptr
09a34     57 BB 02 F6 | 	mov	local11, local05
09a38     01 BA 66 F0 | 	shl	local11, #1
09a3c     57 BB 02 F1 | 	add	local11, local05
09a40     02 BA 66 F0 | 	shl	local11, #2
09a44     03 00 00 FF 
09a48     00 64 86 F1 | 	sub	objptr, ##1536
09a4c     32 BB 02 F1 | 	add	local11, objptr
09a50     08 BA 06 F1 | 	add	local11, #8
09a54     5D B3 62 FC | 	wrlong	local07, local11
09a58     03 00 00 FF 
09a5c     00 64 06 F1 | 	add	objptr, ##1536
09a60     32 AF 02 FB | 	rdlong	local05, objptr
09a64     01 AE 06 F1 | 	add	local05, #1
09a68     32 AF 62 FC | 	wrlong	local05, objptr
09a6c     44 AA 06 F6 | 	mov	local03, #68
09a70     53 AF 02 F6 | 	mov	local05, local01
09a74     54 B1 02 F6 | 	mov	local06, local02
09a78     55 B3 02 F6 | 	mov	local07, local03
09a7c     32 B5 02 FB | 	rdlong	local08, objptr
09a80     5A B7 02 F6 | 	mov	local09, local08
09a84     01 B6 66 F0 | 	shl	local09, #1
09a88     5A B7 02 F1 | 	add	local09, local08
09a8c     02 B6 66 F0 | 	shl	local09, #2
09a90     03 00 00 FF 
09a94     00 64 86 F1 | 	sub	objptr, ##1536
09a98     32 B7 02 F1 | 	add	local09, objptr
09a9c     5B AF 62 FC | 	wrlong	local05, local09
09aa0     03 00 00 FF 
09aa4     00 64 06 F1 | 	add	objptr, ##1536
09aa8     32 BB 02 FB | 	rdlong	local11, objptr
09aac     5D B9 02 F6 | 	mov	local10, local11
09ab0     01 B8 66 F0 | 	shl	local10, #1
09ab4     5D B9 02 F1 | 	add	local10, local11
09ab8     02 B8 66 F0 | 	shl	local10, #2
09abc     03 00 00 FF 
09ac0     00 64 86 F1 | 	sub	objptr, ##1536
09ac4     32 B9 02 F1 | 	add	local10, objptr
09ac8     04 B8 06 F1 | 	add	local10, #4
09acc     5C B1 62 FC | 	wrlong	local06, local10
09ad0     03 00 00 FF 
09ad4     00 64 06 F1 | 	add	objptr, ##1536
09ad8     32 B9 02 FB | 	rdlong	local10, objptr
09adc     5C BB 02 F6 | 	mov	local11, local10
09ae0     01 BA 66 F0 | 	shl	local11, #1
09ae4     5C BB 02 F1 | 	add	local11, local10
09ae8     02 BA 66 F0 | 	shl	local11, #2
09aec     03 00 00 FF 
09af0     00 64 86 F1 | 	sub	objptr, ##1536
09af4     32 BB 02 F1 | 	add	local11, objptr
09af8     08 BA 06 F1 | 	add	local11, #8
09afc     5D B3 62 FC | 	wrlong	local07, local11
09b00     03 00 00 FF 
09b04     00 64 06 F1 | 	add	objptr, ##1536
09b08     32 AF 02 FB | 	rdlong	local05, objptr
09b0c     01 AE 06 F1 | 	add	local05, #1
09b10     32 AF 62 FC | 	wrlong	local05, objptr
09b14     4C 00 00 FF 
09b18     20 64 86 F1 | 	sub	objptr, ##38944
09b1c                 | LR__0873
09b1c                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
09b1c     38 00 00 FF 
09b20     E8 65 06 F1 | 	add	objptr, ##29160
09b24     32 AD 02 FB | 	rdlong	local04, objptr
09b28     03 AC 66 F0 | 	shl	local04, #3
09b2c     02 00 00 FF 
09b30     38 64 86 F1 | 	sub	objptr, ##1080
09b34     32 AD 02 F1 | 	add	local04, objptr
09b38     04 AC 06 F1 | 	add	local04, #4
09b3c     56 B5 02 FB | 	rdlong	local08, local04
09b40     FE B5 0E F2 | 	cmp	local08, #510 wz
09b44     36 00 00 FF 
09b48     B0 65 86 F1 | 	sub	objptr, ##28080
09b4c     B8 00 90 5D |  if_ne	jmp	#LR__0874
09b50     44 AA 06 F6 | 	mov	local03, #68
09b54     53 AF 02 F6 | 	mov	local05, local01
09b58     54 B1 02 F6 | 	mov	local06, local02
09b5c     55 B3 02 F6 | 	mov	local07, local03
09b60     4C 00 00 FF 
09b64     20 64 06 F1 | 	add	objptr, ##38944
09b68     32 B5 02 FB | 	rdlong	local08, objptr
09b6c     5A B7 02 F6 | 	mov	local09, local08
09b70     01 B6 66 F0 | 	shl	local09, #1
09b74     5A B7 02 F1 | 	add	local09, local08
09b78     02 B6 66 F0 | 	shl	local09, #2
09b7c     03 00 00 FF 
09b80     00 64 86 F1 | 	sub	objptr, ##1536
09b84     32 B7 02 F1 | 	add	local09, objptr
09b88     5B AF 62 FC | 	wrlong	local05, local09
09b8c     03 00 00 FF 
09b90     00 64 06 F1 | 	add	objptr, ##1536
09b94     32 BB 02 FB | 	rdlong	local11, objptr
09b98     5D B9 02 F6 | 	mov	local10, local11
09b9c     01 B8 66 F0 | 	shl	local10, #1
09ba0     5D B9 02 F1 | 	add	local10, local11
09ba4     02 B8 66 F0 | 	shl	local10, #2
09ba8     03 00 00 FF 
09bac     00 64 86 F1 | 	sub	objptr, ##1536
09bb0     32 B9 02 F1 | 	add	local10, objptr
09bb4     04 B8 06 F1 | 	add	local10, #4
09bb8     5C B1 62 FC | 	wrlong	local06, local10
09bbc     03 00 00 FF 
09bc0     00 64 06 F1 | 	add	objptr, ##1536
09bc4     32 B9 02 FB | 	rdlong	local10, objptr
09bc8     5C BB 02 F6 | 	mov	local11, local10
09bcc     01 BA 66 F0 | 	shl	local11, #1
09bd0     5C BB 02 F1 | 	add	local11, local10
09bd4     02 BA 66 F0 | 	shl	local11, #2
09bd8     03 00 00 FF 
09bdc     00 64 86 F1 | 	sub	objptr, ##1536
09be0     32 BB 02 F1 | 	add	local11, objptr
09be4     08 BA 06 F1 | 	add	local11, #8
09be8     5D B3 62 FC | 	wrlong	local07, local11
09bec     03 00 00 FF 
09bf0     00 64 06 F1 | 	add	objptr, ##1536
09bf4     32 AF 02 FB | 	rdlong	local05, objptr
09bf8     01 AE 06 F1 | 	add	local05, #1
09bfc     32 AF 62 FC | 	wrlong	local05, objptr
09c00     4C 00 00 FF 
09c04     20 64 86 F1 | 	sub	objptr, ##38944
09c08                 | LR__0874
09c08                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then return 22
09c08     38 00 00 FF 
09c0c     E8 65 06 F1 | 	add	objptr, ##29160
09c10     32 AD 02 FB | 	rdlong	local04, objptr
09c14     03 AC 66 F0 | 	shl	local04, #3
09c18     02 00 00 FF 
09c1c     38 64 86 F1 | 	sub	objptr, ##1080
09c20     32 AD 02 F1 | 	add	local04, objptr
09c24     04 AC 06 F1 | 	add	local04, #4
09c28     56 B5 02 FB | 	rdlong	local08, local04
09c2c     11 B4 0E F2 | 	cmp	local08, #17 wz
09c30     36 00 00 FF 
09c34     B0 65 86 F1 | 	sub	objptr, ##28080
09c38     6C 00 90 AD |  if_e	jmp	#LR__0875
09c3c     38 00 00 FF 
09c40     E8 65 06 F1 | 	add	objptr, ##29160
09c44     32 B5 02 FB | 	rdlong	local08, objptr
09c48     03 B4 66 F0 | 	shl	local08, #3
09c4c     02 00 00 FF 
09c50     38 64 86 F1 | 	sub	objptr, ##1080
09c54     32 B5 02 F1 | 	add	local08, objptr
09c58     04 B4 06 F1 | 	add	local08, #4
09c5c     5A B5 02 FB | 	rdlong	local08, local08
09c60     12 B4 0E F2 | 	cmp	local08, #18 wz
09c64     36 00 00 FF 
09c68     B0 65 86 F1 | 	sub	objptr, ##28080
09c6c     38 00 90 AD |  if_e	jmp	#LR__0875
09c70     38 00 00 FF 
09c74     E8 65 06 F1 | 	add	objptr, ##29160
09c78     32 BB 02 FB | 	rdlong	local11, objptr
09c7c     03 BA 66 F0 | 	shl	local11, #3
09c80     02 00 00 FF 
09c84     38 64 86 F1 | 	sub	objptr, ##1080
09c88     32 BB 02 F1 | 	add	local11, objptr
09c8c     04 BA 06 F1 | 	add	local11, #4
09c90     5D BB 02 FB | 	rdlong	local11, local11
09c94     FE BB 0E F2 | 	cmp	local11, #510 wz
09c98     36 00 00 FF 
09c9c     B0 65 86 F1 | 	sub	objptr, ##28080
09ca0     16 7A 06 56 |  if_ne	mov	result1, #22
09ca4     68 00 90 5D |  if_ne	jmp	#LR__0877
09ca8                 | LR__0875
09ca8     38 00 00 FF 
09cac     E8 65 06 F1 | 	add	objptr, ##29160
09cb0     32 AD 02 FB | 	rdlong	local04, objptr
09cb4     01 AC 06 F1 | 	add	local04, #1
09cb8     32 AD 62 FC | 	wrlong	local04, objptr
09cbc     03 AC 66 F0 | 	shl	local04, #3
09cc0     02 00 00 FF 
09cc4     38 64 86 F1 | 	sub	objptr, ##1080
09cc8     32 AD 02 F1 | 	add	local04, objptr
09ccc     04 AC 06 F1 | 	add	local04, #4
09cd0     56 B5 02 FB | 	rdlong	local08, local04
09cd4     FE B5 0E F2 | 	cmp	local08, #510 wz
09cd8     36 00 00 FF 
09cdc     B0 65 86 F1 | 	sub	objptr, ##28080
09ce0     28 00 90 AD |  if_e	jmp	#LR__0876
09ce4     38 00 00 FF 
09ce8     E8 65 06 F1 | 	add	objptr, ##29160
09cec     32 BB 02 FB | 	rdlong	local11, objptr
09cf0     0E 00 00 FF 
09cf4     1C 64 06 F1 | 	add	objptr, ##7196
09cf8     32 B9 02 FB | 	rdlong	local10, objptr
09cfc     47 00 00 FF 
09d00     04 64 86 F1 | 	sub	objptr, ##36356
09d04     5C BB 52 F2 | 	cmps	local11, local10 wc
09d08     E4 FA 9F CD |  if_b	jmp	#LR__0871
09d0c                 | LR__0876
09d0c                 | ' return 0
09d0c     00 7A 06 F6 | 	mov	result1, #0
09d10                 | LR__0877
09d10     E7 F0 03 F6 | 	mov	ptra, fp
09d14     F2 00 A0 FD | 	call	#popregs_
09d18                 | _compile_print_ret
09d18     2D 00 64 FD | 	ret
09d1c                 | 
09d1c                 | ' 
09d1c                 | ' '----- compile 'if' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
09d1c                 | ' 
09d1c                 | ' function compile_if(aline as ulong) as ulong  
09d1c                 | _compile_if
09d1c     09 CA 05 F6 | 	mov	COUNT_, #9
09d20     E8 00 A0 FD | 	call	#pushregs_
09d24                 | _compile_if_enter
09d24     49 AD 02 F6 | 	mov	local04, arg01
09d28                 | ' return expr()
09d28     2C 21 B0 FD | 	call	#_expr
09d2c     38 00 00 FF 
09d30     E8 65 06 F1 | 	add	objptr, ##29160
09d34     32 95 02 FB | 	rdlong	arg02, objptr
09d38     4A AF 02 F6 | 	mov	local05, arg02
09d3c     03 AE 66 F0 | 	shl	local05, #3
09d40     02 00 00 FF 
09d44     38 64 86 F1 | 	sub	objptr, ##1080
09d48     32 AF 02 F1 | 	add	local05, objptr
09d4c     04 AE 06 F1 | 	add	local05, #4
09d50     57 AF 02 FB | 	rdlong	local05, local05
09d54     01 94 06 F1 | 	add	arg02, #1
09d58     02 00 00 FF 
09d5c     38 64 06 F1 | 	add	objptr, ##1080
09d60     32 95 62 FC | 	wrlong	arg02, objptr
09d64     38 00 00 FF 
09d68     E8 65 86 F1 | 	sub	objptr, ##29160
09d6c                 | ' 
09d6c                 | ' err=compile_fun_1p()
09d6c                 | ' cmd=lparts(ct).token : ct+=1 : if cmd<>token_then then return 52
09d6c     5B AE 0E F2 | 	cmp	local05, #91 wz
09d70     34 7A 06 56 |  if_ne	mov	result1, #52
09d74     20 01 90 5D |  if_ne	jmp	#LR__0882
09d78     58 AA 06 F6 | 	mov	local03, #88
09d7c     53 B1 02 F6 | 	mov	local06, local01
09d80     54 B3 02 F6 | 	mov	local07, local02
09d84     55 95 02 F6 | 	mov	arg02, local03
09d88     4C 00 00 FF 
09d8c     20 64 06 F1 | 	add	objptr, ##38944
09d90     32 93 02 FB | 	rdlong	arg01, objptr
09d94     49 B5 02 F6 | 	mov	local08, arg01
09d98     01 B4 66 F0 | 	shl	local08, #1
09d9c     49 B5 02 F1 | 	add	local08, arg01
09da0     02 B4 66 F0 | 	shl	local08, #2
09da4     03 00 00 FF 
09da8     00 64 86 F1 | 	sub	objptr, ##1536
09dac     32 B5 02 F1 | 	add	local08, objptr
09db0     5A B1 62 FC | 	wrlong	local06, local08
09db4     03 00 00 FF 
09db8     00 64 06 F1 | 	add	objptr, ##1536
09dbc     32 B1 02 FB | 	rdlong	local06, objptr
09dc0     58 93 02 F6 | 	mov	arg01, local06
09dc4     01 92 66 F0 | 	shl	arg01, #1
09dc8     58 93 02 F1 | 	add	arg01, local06
09dcc     02 92 66 F0 | 	shl	arg01, #2
09dd0     03 00 00 FF 
09dd4     00 64 86 F1 | 	sub	objptr, ##1536
09dd8     32 93 02 F1 | 	add	arg01, objptr
09ddc     04 92 06 F1 | 	add	arg01, #4
09de0     49 B3 62 FC | 	wrlong	local07, arg01
09de4     03 00 00 FF 
09de8     00 64 06 F1 | 	add	objptr, ##1536
09dec     32 B1 02 FB | 	rdlong	local06, objptr
09df0     58 93 02 F6 | 	mov	arg01, local06
09df4     01 92 66 F0 | 	shl	arg01, #1
09df8     58 93 02 F1 | 	add	arg01, local06
09dfc     02 92 66 F0 | 	shl	arg01, #2
09e00     03 00 00 FF 
09e04     00 64 86 F1 | 	sub	objptr, ##1536
09e08     32 93 02 F1 | 	add	arg01, objptr
09e0c     08 92 06 F1 | 	add	arg01, #8
09e10     49 95 62 FC | 	wrlong	arg02, arg01
09e14     03 00 00 FF 
09e18     00 64 06 F1 | 	add	objptr, ##1536
09e1c     32 B1 02 FB | 	rdlong	local06, objptr
09e20     01 B0 06 F1 | 	add	local06, #1
09e24     32 B1 62 FC | 	wrlong	local06, objptr
09e28                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
09e28                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
09e28     13 00 00 FF 
09e2c     38 64 86 F1 | 	sub	objptr, ##9784
09e30     32 95 02 FB | 	rdlong	arg02, objptr
09e34     01 94 06 F1 | 	add	arg02, #1
09e38     03 94 66 F0 | 	shl	arg02, #3
09e3c     02 00 00 FF 
09e40     38 64 86 F1 | 	sub	objptr, ##1080
09e44     32 95 02 F1 | 	add	arg02, objptr
09e48     4A 93 02 FB | 	rdlong	arg01, arg02
09e4c     36 00 00 FF 
09e50     B0 65 86 F1 | 	sub	objptr, ##28080
09e54                 | ' 
09e54                 | ' select case s
09e54     93 01 00 FF 
09e58     EE 94 06 F6 | 	mov	arg02, ##@LR__5639
09e5c     A0 AB B1 FD | 	call	#__system___string_cmp
09e60     00 7A 0E F2 | 	cmp	result1, #0 wz
09e64     1B 7A 06 A6 |  if_e	mov	result1, #27
09e68     00 7A 06 56 |  if_ne	mov	result1, #0
09e6c     00 7A 0E F2 | 	cmp	result1, #0 wz
09e70     10 00 90 AD |  if_e	jmp	#LR__0880
09e74     05 92 06 F6 | 	mov	arg01, #5
09e78     4C E4 BF FD | 	call	#_compile_immediate_assign
09e7c     3D B7 02 F6 | 	mov	local09, result1
09e80     10 00 90 FD | 	jmp	#LR__0881
09e84                 | LR__0880
09e84     05 92 06 F6 | 	mov	arg01, #5
09e88     56 95 02 F6 | 	mov	arg02, local04
09e8c     50 DA BF FD | 	call	#_compile_immediate
09e90     3D B7 02 F6 | 	mov	local09, result1
09e94                 | LR__0881
09e94                 | ' return err
09e94     5B 7B 02 F6 | 	mov	result1, local09
09e98                 | LR__0882
09e98     E7 F0 03 F6 | 	mov	ptra, fp
09e9c     F2 00 A0 FD | 	call	#popregs_
09ea0                 | _compile_if_ret
09ea0     2D 00 64 FD | 	ret
09ea4                 | 
09ea4                 | ' 
09ea4                 | ' '----- compile 'else' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
09ea4                 | ' 
09ea4                 | ' function compile_else(aline as ulong) as ulong  
09ea4                 | _compile_else
09ea4     07 CA 05 F6 | 	mov	COUNT_, #7
09ea8     E8 00 A0 FD | 	call	#pushregs_
09eac                 | _compile_else_enter
09eac     49 AD 02 F6 | 	mov	local04, arg01
09eb0     5A AA 06 F6 | 	mov	local03, #90
09eb4     53 AF 02 F6 | 	mov	local05, local01
09eb8     54 B1 02 F6 | 	mov	local06, local02
09ebc     55 A7 02 F6 | 	mov	local01, local03
09ec0     4C 00 00 FF 
09ec4     20 64 06 F1 | 	add	objptr, ##38944
09ec8     32 95 02 FB | 	rdlong	arg02, objptr
09ecc     4A 93 02 F6 | 	mov	arg01, arg02
09ed0     01 92 66 F0 | 	shl	arg01, #1
09ed4     4A 93 02 F1 | 	add	arg01, arg02
09ed8     02 92 66 F0 | 	shl	arg01, #2
09edc     03 00 00 FF 
09ee0     00 64 86 F1 | 	sub	objptr, ##1536
09ee4     32 93 02 F1 | 	add	arg01, objptr
09ee8     49 AF 62 FC | 	wrlong	local05, arg01
09eec     03 00 00 FF 
09ef0     00 64 06 F1 | 	add	objptr, ##1536
09ef4     32 AF 02 FB | 	rdlong	local05, objptr
09ef8     57 95 02 F6 | 	mov	arg02, local05
09efc     01 94 66 F0 | 	shl	arg02, #1
09f00     57 95 02 F1 | 	add	arg02, local05
09f04     02 94 66 F0 | 	shl	arg02, #2
09f08     03 00 00 FF 
09f0c     00 64 86 F1 | 	sub	objptr, ##1536
09f10     32 95 02 F1 | 	add	arg02, objptr
09f14     04 94 06 F1 | 	add	arg02, #4
09f18     4A B1 62 FC | 	wrlong	local06, arg02
09f1c     03 00 00 FF 
09f20     00 64 06 F1 | 	add	objptr, ##1536
09f24     32 B1 02 FB | 	rdlong	local06, objptr
09f28     58 AF 02 F6 | 	mov	local05, local06
09f2c     01 AE 66 F0 | 	shl	local05, #1
09f30     58 AF 02 F1 | 	add	local05, local06
09f34     02 AE 66 F0 | 	shl	local05, #2
09f38     03 00 00 FF 
09f3c     00 64 86 F1 | 	sub	objptr, ##1536
09f40     32 AF 02 F1 | 	add	local05, objptr
09f44     08 AE 06 F1 | 	add	local05, #8
09f48     57 A7 62 FC | 	wrlong	local01, local05
09f4c     03 00 00 FF 
09f50     00 64 06 F1 | 	add	objptr, ##1536
09f54     32 AF 02 FB | 	rdlong	local05, objptr
09f58     01 AE 06 F1 | 	add	local05, #1
09f5c     32 AF 62 FC | 	wrlong	local05, objptr
09f60                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
09f60                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
09f60     13 00 00 FF 
09f64     38 64 86 F1 | 	sub	objptr, ##9784
09f68     32 B1 02 FB | 	rdlong	local06, objptr
09f6c     01 B0 06 F1 | 	add	local06, #1
09f70     03 B0 66 F0 | 	shl	local06, #3
09f74     02 00 00 FF 
09f78     38 64 86 F1 | 	sub	objptr, ##1080
09f7c     32 B1 02 F1 | 	add	local06, objptr
09f80     58 93 02 FB | 	rdlong	arg01, local06
09f84     36 00 00 FF 
09f88     B0 65 86 F1 | 	sub	objptr, ##28080
09f8c                 | ' 
09f8c                 | ' select case s
09f8c     93 01 00 FF 
09f90     EE 94 06 F6 | 	mov	arg02, ##@LR__5639
09f94     68 AA B1 FD | 	call	#__system___string_cmp
09f98     00 7A 0E F2 | 	cmp	result1, #0 wz
09f9c     1B 7A 06 A6 |  if_e	mov	result1, #27
09fa0     00 7A 06 56 |  if_ne	mov	result1, #0
09fa4     00 7A 0E F2 | 	cmp	result1, #0 wz
09fa8     10 00 90 AD |  if_e	jmp	#LR__0890
09fac     05 92 06 F6 | 	mov	arg01, #5
09fb0     14 E3 BF FD | 	call	#_compile_immediate_assign
09fb4     3D B3 02 F6 | 	mov	local07, result1
09fb8     10 00 90 FD | 	jmp	#LR__0891
09fbc                 | LR__0890
09fbc     05 92 06 F6 | 	mov	arg01, #5
09fc0     56 95 02 F6 | 	mov	arg02, local04
09fc4     18 D9 BF FD | 	call	#_compile_immediate
09fc8     3D B3 02 F6 | 	mov	local07, result1
09fcc                 | LR__0891
09fcc                 | ' return err
09fcc     59 7B 02 F6 | 	mov	result1, local07
09fd0     E7 F0 03 F6 | 	mov	ptra, fp
09fd4     F2 00 A0 FD | 	call	#popregs_
09fd8                 | _compile_else_ret
09fd8     2D 00 64 FD | 	ret
09fdc                 | 
09fdc                 | ' 
09fdc                 | ' '----- compile 'dim' command. Also it allocates the psram for an aray from the top of the memory
09fdc                 | ' 
09fdc                 | ' function compile_dim() as ulong  
09fdc                 | _compile_dim
09fdc     11 CA 05 F6 | 	mov	COUNT_, #17
09fe0     E8 00 A0 FD | 	call	#pushregs_
09fe4     01 A6 06 F6 | 	mov	local01, #1
09fe8     01 A8 06 F6 | 	mov	local02, #1
09fec     01 AA 06 F6 | 	mov	local03, #1
09ff0                 | ' 
09ff0                 | ' dims(0)=1: dims(1)=1: dims(2)=1
09ff0                 | ' if isname(lparts(ct).part$) then 
09ff0     38 00 00 FF 
09ff4     E8 65 06 F1 | 	add	objptr, ##29160
09ff8     32 99 02 FB | 	rdlong	arg04, objptr
09ffc     03 98 66 F0 | 	shl	arg04, #3
0a000     02 00 00 FF 
0a004     38 64 86 F1 | 	sub	objptr, ##1080
0a008     32 99 02 F1 | 	add	arg04, objptr
0a00c     4C 93 02 FB | 	rdlong	arg01, arg04
0a010     36 00 00 FF 
0a014     B0 65 86 F1 | 	sub	objptr, ##28080
0a018     C4 C7 BF FD | 	call	#_isname
0a01c     00 7A 0E F2 | 	cmp	result1, #0 wz
0a020     58 05 90 AD |  if_e	jmp	#LR__0923
0a024     38 00 00 FF 
0a028     E8 65 06 F1 | 	add	objptr, ##29160
0a02c     32 AD 02 FB | 	rdlong	local04, objptr
0a030     03 AC 66 F0 | 	shl	local04, #3
0a034     02 00 00 FF 
0a038     38 64 86 F1 | 	sub	objptr, ##1080
0a03c     32 AD 02 F1 | 	add	local04, objptr
0a040     56 AF 02 FB | 	rdlong	local05, local04
0a044     01 B0 66 F6 | 	neg	local06, #1
0a048                 | '   varname2$=lparts(ct).part$ 
0a048                 | '   j=-1
0a048                 | '   if varnum>0 then
0a048     04 64 86 F1 | 	sub	objptr, #4
0a04c     32 B3 02 FB | 	rdlong	local07, objptr
0a050     36 00 00 FF 
0a054     AC 65 86 F1 | 	sub	objptr, ##28076
0a058     01 B2 56 F2 | 	cmps	local07, #1 wc
0a05c     54 00 90 CD |  if_b	jmp	#LR__0902
0a060                 | '     for i=0 to varnum-1
0a060     00 B4 06 F6 | 	mov	local08, #0
0a064     36 00 00 FF 
0a068     AC 65 06 F1 | 	add	objptr, ##28076
0a06c     32 B7 02 FB | 	rdlong	local09, objptr
0a070     36 00 00 FF 
0a074     AC 65 86 F1 | 	sub	objptr, ##28076
0a078                 | LR__0900
0a078     5B B5 52 F2 | 	cmps	local08, local09 wc
0a07c     34 00 90 3D |  if_ae	jmp	#LR__0901
0a080                 | '       if variables(i).name=varname2$ then j=i : exit
0a080     5A AD 02 F6 | 	mov	local04, local08
0a084     04 AC 66 F0 | 	shl	local04, #4
0a088     32 95 02 F6 | 	mov	arg02, objptr
0a08c     16 00 00 FF 
0a090     9C 95 06 F1 | 	add	arg02, ##11676
0a094     4A AD 02 F1 | 	add	local04, arg02
0a098     56 93 02 FB | 	rdlong	arg01, local04
0a09c     57 95 02 F6 | 	mov	arg02, local05
0a0a0     5C A9 B1 FD | 	call	#__system___string_cmp
0a0a4     00 7A 0E F2 | 	cmp	result1, #0 wz
0a0a8     5A B1 02 A6 |  if_e	mov	local06, local08
0a0ac     01 B4 06 51 |  if_ne	add	local08, #1
0a0b0     C4 FF 9F 5D |  if_ne	jmp	#LR__0900
0a0b4                 | LR__0901
0a0b4                 | LR__0902
0a0b4                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
0a0b4     FF FF 7F FF 
0a0b8     FF B1 0E F2 | 	cmp	local06, ##-1 wz
0a0bc     36 00 00 AF 
0a0c0     AC 65 06 A1 |  if_e	add	objptr, ##28076
0a0c4     32 B1 02 AB |  if_e	rdlong	local06, objptr
0a0c8     36 00 00 AF 
0a0cc     AC 65 86 A1 |  if_e	sub	objptr, ##28076
0a0d0     78 00 90 AD |  if_e	jmp	#LR__0903
0a0d4     00 92 06 F6 | 	mov	arg01, #0
0a0d8     80 FE B1 FD | 	call	#__system___getiolock_0622
0a0dc     3D 93 02 F6 | 	mov	arg01, result1
0a0e0     F4 A8 B1 FD | 	call	#__system___lockmem
0a0e4     95 01 00 FF 
0a0e8     FB 95 06 F6 | 	mov	arg02, ##@LR__5911
0a0ec     00 92 06 F6 | 	mov	arg01, #0
0a0f0     00 96 06 F6 | 	mov	arg03, #0
0a0f4     D4 B5 B1 FD | 	call	#__system___basic_print_string
0a0f8     54 00 00 FF 
0a0fc     8C 64 06 F1 | 	add	objptr, ##43148
0a100     32 95 02 FB | 	rdlong	arg02, objptr
0a104     54 00 00 FF 
0a108     8C 64 86 F1 | 	sub	objptr, ##43148
0a10c     00 92 06 F6 | 	mov	arg01, #0
0a110     00 96 06 F6 | 	mov	arg03, #0
0a114     0A 98 06 F6 | 	mov	arg04, #10
0a118     34 B6 B1 FD | 	call	#__system___basic_print_unsigned
0a11c     96 01 00 FF 
0a120     09 94 06 F6 | 	mov	arg02, ##@LR__5912
0a124     00 92 06 F6 | 	mov	arg01, #0
0a128     00 96 06 F6 | 	mov	arg03, #0
0a12c     9C B5 B1 FD | 	call	#__system___basic_print_string
0a130     00 92 06 F6 | 	mov	arg01, #0
0a134     0A 94 06 F6 | 	mov	arg02, #10
0a138     00 96 06 F6 | 	mov	arg03, #0
0a13c     34 B5 B1 FD | 	call	#__system___basic_print_char
0a140     00 92 06 F6 | 	mov	arg01, #0
0a144     14 FE B1 FD | 	call	#__system___getiolock_0622
0a148     3D 01 68 FC | 	wrlong	#0, result1
0a14c                 | LR__0903
0a14c                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then return 43
0a14c     38 00 00 FF 
0a150     E8 65 06 F1 | 	add	objptr, ##29160
0a154     32 95 02 FB | 	rdlong	arg02, objptr
0a158     01 94 06 F1 | 	add	arg02, #1
0a15c     03 94 66 F0 | 	shl	arg02, #3
0a160     02 00 00 FF 
0a164     38 64 86 F1 | 	sub	objptr, ##1080
0a168     32 95 02 F1 | 	add	arg02, objptr
0a16c     4A 93 02 FB | 	rdlong	arg01, arg02
0a170     96 01 00 FF 
0a174     2A 94 06 F6 | 	mov	arg02, ##@LR__5913
0a178     36 00 00 FF 
0a17c     B0 65 86 F1 | 	sub	objptr, ##28080
0a180     7C A8 B1 FD | 	call	#__system___string_cmp
0a184     00 7A 0E F2 | 	cmp	result1, #0 wz
0a188     44 00 90 AD |  if_e	jmp	#LR__0904
0a18c     38 00 00 FF 
0a190     E8 65 06 F1 | 	add	objptr, ##29160
0a194     32 B7 02 FB | 	rdlong	local09, objptr
0a198     01 B6 06 F1 | 	add	local09, #1
0a19c     03 B6 66 F0 | 	shl	local09, #3
0a1a0     02 00 00 FF 
0a1a4     38 64 86 F1 | 	sub	objptr, ##1080
0a1a8     32 B7 02 F1 | 	add	local09, objptr
0a1ac     5B 93 02 FB | 	rdlong	arg01, local09
0a1b0     96 01 00 FF 
0a1b4     2C 94 06 F6 | 	mov	arg02, ##@LR__5914
0a1b8     36 00 00 FF 
0a1bc     B0 65 86 F1 | 	sub	objptr, ##28080
0a1c0     3C A8 B1 FD | 	call	#__system___string_cmp
0a1c4     00 7A 0E F2 | 	cmp	result1, #0 wz
0a1c8     2B 7A 06 56 |  if_ne	mov	result1, #43
0a1cc     B4 04 90 5D |  if_ne	jmp	#LR__0925
0a1d0                 | LR__0904
0a1d0                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350	' allocate a typed array
0a1d0     38 00 00 FF 
0a1d4     E8 65 06 F1 | 	add	objptr, ##29160
0a1d8     32 95 02 FB | 	rdlong	arg02, objptr
0a1dc     01 94 06 F1 | 	add	arg02, #1
0a1e0     03 94 66 F0 | 	shl	arg02, #3
0a1e4     02 00 00 FF 
0a1e8     38 64 86 F1 | 	sub	objptr, ##1080
0a1ec     32 95 02 F1 | 	add	arg02, objptr
0a1f0     4A 93 02 FB | 	rdlong	arg01, arg02
0a1f4     96 01 00 FF 
0a1f8     2F 94 06 F6 | 	mov	arg02, ##@LR__5915
0a1fc     36 00 00 FF 
0a200     B0 65 86 F1 | 	sub	objptr, ##28080
0a204     F8 A7 B1 FD | 	call	#__system___string_cmp
0a208     00 7A 0E F2 | 	cmp	result1, #0 wz
0a20c     38 00 00 AF 
0a210     E8 65 06 A1 |  if_e	add	objptr, ##29160
0a214     32 B9 02 AB |  if_e	rdlong	local10, objptr
0a218     38 00 00 AF 
0a21c     E8 65 86 A1 |  if_e	sub	objptr, ##29160
0a220     01 B8 06 A1 |  if_e	add	local10, #1
0a224     48 01 90 AD |  if_e	jmp	#LR__0909
0a228     38 00 00 FF 
0a22c     E8 65 06 F1 | 	add	objptr, ##29160
0a230     32 B9 02 FB | 	rdlong	local10, objptr
0a234     38 00 00 FF 
0a238     E8 65 86 F1 | 	sub	objptr, ##29160
0a23c     02 B8 06 F1 | 	add	local10, #2
0a240     00 BA 06 F6 | 	mov	local11, #0
0a244                 | '   l=ct+2 : m=0 : do
0a244                 | LR__0905
0a244                 | '   if isdec(lparts(l).part$) then 
0a244     5C AD 02 F6 | 	mov	local04, local10
0a248     03 AC 66 F0 | 	shl	local04, #3
0a24c     32 B7 02 F6 | 	mov	local09, objptr
0a250     36 00 00 FF 
0a254     B0 B7 06 F1 | 	add	local09, ##28080
0a258     5B AD 02 F1 | 	add	local04, local09
0a25c     56 93 02 FB | 	rdlong	arg01, local04
0a260     80 CE BF FD | 	call	#_isdec
0a264     00 7A 0E F2 | 	cmp	result1, #0 wz
0a268     40 00 90 AD |  if_e	jmp	#LR__0906
0a26c     5D BD 02 F6 | 	mov	local12, local11
0a270     53 BD 06 F1 | 	add	local12, #local01
0a274     5C B7 02 F6 | 	mov	local09, local10
0a278     03 B6 66 F0 | 	shl	local09, #3
0a27c     32 B5 02 F6 | 	mov	local08, objptr
0a280     36 00 00 FF 
0a284     B0 B5 06 F1 | 	add	local08, ##28080
0a288     5A B7 02 F1 | 	add	local09, local08
0a28c     5B 93 02 FB | 	rdlong	arg01, local09
0a290     00 94 06 F6 | 	mov	arg02, #0
0a294     94 D4 B1 FD | 	call	#__system____builtin_atoi
0a298     3D BF 02 F6 | 	mov	local13, result1
0a29c                 | 	'.live	local13
0a29c                 | 	'.live	local12
0a29c     00 BC 8E F9 | 	altd	local12, #0
0a2a0     5F BD 02 F6 | 	mov	local12, local13
0a2a4     01 BA 06 F1 | 	add	local11, #1
0a2a8     08 00 90 FD | 	jmp	#LR__0907
0a2ac                 | LR__0906
0a2ac                 | '     return(17)
0a2ac     11 7A 06 F6 | 	mov	result1, #17
0a2b0     D0 03 90 FD | 	jmp	#LR__0925
0a2b4                 | LR__0907
0a2b4                 | '   if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then return 44 
0a2b4     5C AD 02 F6 | 	mov	local04, local10
0a2b8     01 AC 06 F1 | 	add	local04, #1
0a2bc     03 AC 66 F0 | 	shl	local04, #3
0a2c0     32 BF 02 F6 | 	mov	local13, objptr
0a2c4     36 00 00 FF 
0a2c8     B0 BF 06 F1 | 	add	local13, ##28080
0a2cc     5F AD 02 F1 | 	add	local04, local13
0a2d0     56 93 02 FB | 	rdlong	arg01, local04
0a2d4     96 01 00 FF 
0a2d8     32 94 06 F6 | 	mov	arg02, ##@LR__5916
0a2dc     20 A7 B1 FD | 	call	#__system___string_cmp
0a2e0     00 7A 0E F2 | 	cmp	result1, #0 wz
0a2e4     38 00 90 AD |  if_e	jmp	#LR__0908
0a2e8     5C BF 02 F6 | 	mov	local13, local10
0a2ec     01 BE 06 F1 | 	add	local13, #1
0a2f0     03 BE 66 F0 | 	shl	local13, #3
0a2f4     32 BD 02 F6 | 	mov	local12, objptr
0a2f8     36 00 00 FF 
0a2fc     B0 BD 06 F1 | 	add	local12, ##28080
0a300     5E BF 02 F1 | 	add	local13, local12
0a304     5F 93 02 FB | 	rdlong	arg01, local13
0a308     96 01 00 FF 
0a30c     34 94 06 F6 | 	mov	arg02, ##@LR__5917
0a310     EC A6 B1 FD | 	call	#__system___string_cmp
0a314     00 7A 0E F2 | 	cmp	result1, #0 wz
0a318     2C 7A 06 56 |  if_ne	mov	result1, #44
0a31c     64 03 90 5D |  if_ne	jmp	#LR__0925
0a320                 | LR__0908
0a320     02 B8 06 F1 | 	add	local10, #2
0a324     5C AD 02 F6 | 	mov	local04, local10
0a328     01 AC 86 F1 | 	sub	local04, #1
0a32c     03 AC 66 F0 | 	shl	local04, #3
0a330     32 BF 02 F6 | 	mov	local13, objptr
0a334     36 00 00 FF 
0a338     B0 BF 06 F1 | 	add	local13, ##28080
0a33c     5F AD 02 F1 | 	add	local04, local13
0a340     56 93 02 FB | 	rdlong	arg01, local04
0a344     96 01 00 FF 
0a348     36 94 06 F6 | 	mov	arg02, ##@LR__5918
0a34c     B0 A6 B1 FD | 	call	#__system___string_cmp
0a350     00 7A 0E F2 | 	cmp	result1, #0 wz
0a354     03 BA 56 52 |  if_ne	cmps	local11, #3 wc
0a358     E8 FE 9F 4D |  if_c_and_nz	jmp	#LR__0905
0a35c                 | '   if m>3 then return 45
0a35c     04 BA 56 F2 | 	cmps	local11, #4 wc
0a360     2D 7A 06 36 |  if_ae	mov	result1, #45
0a364     1C 03 90 3D |  if_ae	jmp	#LR__0925
0a368     00 C1 06 F6 | 	mov	local14, #256
0a36c     0C C2 06 F6 | 	mov	local15, #12
0a370                 | LR__0909
0a370                 | '   arraytype=array_no_type : esize=12
0a370                 | ' 1350 
0a370                 | '   if lparts(l).part$="as" then
0a370     5C AD 02 F6 | 	mov	local04, local10
0a374     03 AC 66 F0 | 	shl	local04, #3
0a378     32 BF 02 F6 | 	mov	local13, objptr
0a37c     36 00 00 FF 
0a380     B0 BF 06 F1 | 	add	local13, ##28080
0a384     5F AD 02 F1 | 	add	local04, local13
0a388     56 93 02 FB | 	rdlong	arg01, local04
0a38c     96 01 00 FF 
0a390     38 94 06 F6 | 	mov	arg02, ##@LR__5919
0a394     68 A6 B1 FD | 	call	#__system___string_cmp
0a398     00 7A 0E F2 | 	cmp	result1, #0 wz
0a39c     E4 01 90 5D |  if_ne	jmp	#LR__0924
0a3a0                 | '     select case lparts(l+1).part$
0a3a0     5C BD 02 F6 | 	mov	local12, local10
0a3a4     01 BC 06 F1 | 	add	local12, #1
0a3a8     03 BC 66 F0 | 	shl	local12, #3
0a3ac     32 AD 02 F6 | 	mov	local04, objptr
0a3b0     36 00 00 FF 
0a3b4     B0 AD 06 F1 | 	add	local04, ##28080
0a3b8     56 BD 02 F1 | 	add	local12, local04
0a3bc     5E C5 02 FB | 	rdlong	local16, local12
0a3c0     96 01 00 FF 
0a3c4     3B 94 06 F6 | 	mov	arg02, ##@LR__5920
0a3c8     62 93 02 F6 | 	mov	arg01, local16
0a3cc     30 A6 B1 FD | 	call	#__system___string_cmp
0a3d0     00 7A 0E F2 | 	cmp	result1, #0 wz
0a3d4     0C 01 90 AD |  if_e	jmp	#LR__0910
0a3d8     96 01 00 FF 
0a3dc     40 94 06 F6 | 	mov	arg02, ##@LR__5921
0a3e0     62 93 02 F6 | 	mov	arg01, local16
0a3e4     18 A6 B1 FD | 	call	#__system___string_cmp
0a3e8     00 7A 0E F2 | 	cmp	result1, #0 wz
0a3ec     00 01 90 AD |  if_e	jmp	#LR__0911
0a3f0     96 01 00 FF 
0a3f4     46 94 06 F6 | 	mov	arg02, ##@LR__5922
0a3f8     62 93 02 F6 | 	mov	arg01, local16
0a3fc     00 A6 B1 FD | 	call	#__system___string_cmp
0a400     00 7A 0E F2 | 	cmp	result1, #0 wz
0a404     F4 00 90 AD |  if_e	jmp	#LR__0912
0a408     96 01 00 FF 
0a40c     4C 94 06 F6 | 	mov	arg02, ##@LR__5923
0a410     62 93 02 F6 | 	mov	arg01, local16
0a414     E8 A5 B1 FD | 	call	#__system___string_cmp
0a418     00 7A 0E F2 | 	cmp	result1, #0 wz
0a41c     E8 00 90 AD |  if_e	jmp	#LR__0913
0a420     96 01 00 FF 
0a424     53 94 06 F6 | 	mov	arg02, ##@LR__5924
0a428     62 93 02 F6 | 	mov	arg01, local16
0a42c     D0 A5 B1 FD | 	call	#__system___string_cmp
0a430     00 7A 0E F2 | 	cmp	result1, #0 wz
0a434     DC 00 90 AD |  if_e	jmp	#LR__0914
0a438     96 01 00 FF 
0a43c     58 94 06 F6 | 	mov	arg02, ##@LR__5925
0a440     62 93 02 F6 | 	mov	arg01, local16
0a444     B8 A5 B1 FD | 	call	#__system___string_cmp
0a448     00 7A 0E F2 | 	cmp	result1, #0 wz
0a44c     D0 00 90 AD |  if_e	jmp	#LR__0915
0a450     96 01 00 FF 
0a454     60 94 06 F6 | 	mov	arg02, ##@LR__5926
0a458     62 93 02 F6 | 	mov	arg01, local16
0a45c     A0 A5 B1 FD | 	call	#__system___string_cmp
0a460     00 7A 0E F2 | 	cmp	result1, #0 wz
0a464     C4 00 90 AD |  if_e	jmp	#LR__0916
0a468     96 01 00 FF 
0a46c     66 94 06 F6 | 	mov	arg02, ##@LR__5927
0a470     62 93 02 F6 | 	mov	arg01, local16
0a474     88 A5 B1 FD | 	call	#__system___string_cmp
0a478     00 7A 0E F2 | 	cmp	result1, #0 wz
0a47c     B8 00 90 AD |  if_e	jmp	#LR__0917
0a480     96 01 00 FF 
0a484     6C 94 06 F6 | 	mov	arg02, ##@LR__5928
0a488     62 93 02 F6 | 	mov	arg01, local16
0a48c     70 A5 B1 FD | 	call	#__system___string_cmp
0a490     00 7A 0E F2 | 	cmp	result1, #0 wz
0a494     AC 00 90 AD |  if_e	jmp	#LR__0918
0a498     96 01 00 FF 
0a49c     73 94 06 F6 | 	mov	arg02, ##@LR__5929
0a4a0     62 93 02 F6 | 	mov	arg01, local16
0a4a4     58 A5 B1 FD | 	call	#__system___string_cmp
0a4a8     00 7A 0E F2 | 	cmp	result1, #0 wz
0a4ac     A0 00 90 AD |  if_e	jmp	#LR__0919
0a4b0     96 01 00 FF 
0a4b4     7A 94 06 F6 | 	mov	arg02, ##@LR__5930
0a4b8     62 93 02 F6 | 	mov	arg01, local16
0a4bc     40 A5 B1 FD | 	call	#__system___string_cmp
0a4c0     00 7A 0E F2 | 	cmp	result1, #0 wz
0a4c4     94 00 90 AD |  if_e	jmp	#LR__0920
0a4c8     96 01 00 FF 
0a4cc     81 94 06 F6 | 	mov	arg02, ##@LR__5931
0a4d0     62 93 02 F6 | 	mov	arg01, local16
0a4d4     28 A5 B1 FD | 	call	#__system___string_cmp
0a4d8     00 7A 0E F2 | 	cmp	result1, #0 wz
0a4dc     88 00 90 AD |  if_e	jmp	#LR__0921
0a4e0     90 00 90 FD | 	jmp	#LR__0922
0a4e4                 | LR__0910
0a4e4     01 C1 06 F6 | 	mov	local14, #257
0a4e8     01 C2 06 F6 | 	mov	local15, #1
0a4ec     94 00 90 FD | 	jmp	#LR__0924
0a4f0                 | LR__0911
0a4f0     02 C1 06 F6 | 	mov	local14, #258
0a4f4     01 C2 06 F6 | 	mov	local15, #1
0a4f8     88 00 90 FD | 	jmp	#LR__0924
0a4fc                 | LR__0912
0a4fc     03 C1 06 F6 | 	mov	local14, #259
0a500     02 C2 06 F6 | 	mov	local15, #2
0a504     7C 00 90 FD | 	jmp	#LR__0924
0a508                 | LR__0913
0a508     04 C1 06 F6 | 	mov	local14, #260
0a50c     02 C2 06 F6 | 	mov	local15, #2
0a510     70 00 90 FD | 	jmp	#LR__0924
0a514                 | LR__0914
0a514     05 C1 06 F6 | 	mov	local14, #261
0a518     04 C2 06 F6 | 	mov	local15, #4
0a51c     64 00 90 FD | 	jmp	#LR__0924
0a520                 | LR__0915
0a520     05 C1 06 F6 | 	mov	local14, #261
0a524     04 C2 06 F6 | 	mov	local15, #4
0a528     58 00 90 FD | 	jmp	#LR__0924
0a52c                 | LR__0916
0a52c     06 C1 06 F6 | 	mov	local14, #262
0a530     04 C2 06 F6 | 	mov	local15, #4
0a534     4C 00 90 FD | 	jmp	#LR__0924
0a538                 | LR__0917
0a538     07 C1 06 F6 | 	mov	local14, #263
0a53c     08 C2 06 F6 | 	mov	local15, #8
0a540     40 00 90 FD | 	jmp	#LR__0924
0a544                 | LR__0918
0a544     08 C1 06 F6 | 	mov	local14, #264
0a548     08 C2 06 F6 | 	mov	local15, #8
0a54c     34 00 90 FD | 	jmp	#LR__0924
0a550                 | LR__0919
0a550     09 C1 06 F6 | 	mov	local14, #265
0a554     04 C2 06 F6 | 	mov	local15, #4
0a558     28 00 90 FD | 	jmp	#LR__0924
0a55c                 | LR__0920
0a55c     0A C1 06 F6 | 	mov	local14, #266
0a560     08 C2 06 F6 | 	mov	local15, #8
0a564     1C 00 90 FD | 	jmp	#LR__0924
0a568                 | LR__0921
0a568     0B C1 06 F6 | 	mov	local14, #267
0a56c     04 C2 06 F6 | 	mov	local15, #4
0a570     10 00 90 FD | 	jmp	#LR__0924
0a574                 | LR__0922
0a574     2F 7A 06 F6 | 	mov	result1, #47
0a578     08 01 90 FD | 	jmp	#LR__0925
0a57c                 | LR__0923
0a57c                 | '   return 46
0a57c     2E 7A 06 F6 | 	mov	result1, #46
0a580     00 01 90 FD | 	jmp	#LR__0925
0a584                 | LR__0924
0a584     53 C3 02 FD | 	qmul	local15, local01
0a588     18 B2 62 FD | 	getqx	local07
0a58c     54 B3 02 FD | 	qmul	local07, local02
0a590     18 C4 62 FD | 	getqx	local16
0a594     55 C5 02 FD | 	qmul	local16, local03
0a598     54 00 00 FF 
0a59c     74 64 06 F1 | 	add	objptr, ##43124
0a5a0     32 C7 02 FB | 	rdlong	local17, objptr
0a5a4     60 95 02 F6 | 	mov	arg02, local14
0a5a8     18 C4 62 FD | 	getqx	local16
0a5ac     62 C7 82 F1 | 	sub	local17, local16
0a5b0     10 C6 86 F1 | 	sub	local17, #16
0a5b4     0F C6 26 F5 | 	andn	local17, #15
0a5b8     32 C7 62 FC | 	wrlong	local17, objptr
0a5bc     54 00 00 FF 
0a5c0     74 64 86 F1 | 	sub	objptr, ##43124
0a5c4     63 93 02 F6 | 	mov	arg01, local17
0a5c8     EC 68 B1 FD | 	call	#_psdpoke
0a5cc     63 93 02 F6 | 	mov	arg01, local17
0a5d0     02 92 06 F1 | 	add	arg01, #2
0a5d4     61 95 02 F6 | 	mov	arg02, local15
0a5d8     DC 68 B1 FD | 	call	#_psdpoke
0a5dc     63 93 02 F6 | 	mov	arg01, local17
0a5e0     04 92 06 F1 | 	add	arg01, #4
0a5e4     53 95 02 F6 | 	mov	arg02, local01
0a5e8     84 68 B1 FD | 	call	#_pslpoke
0a5ec     63 93 02 F6 | 	mov	arg01, local17
0a5f0     08 92 06 F1 | 	add	arg01, #8
0a5f4     54 95 02 F6 | 	mov	arg02, local02
0a5f8     74 68 B1 FD | 	call	#_pslpoke
0a5fc     63 93 02 F6 | 	mov	arg01, local17
0a600     0C 92 06 F1 | 	add	arg01, #12
0a604     55 95 02 F6 | 	mov	arg02, local03
0a608     64 68 B1 FD | 	call	#_pslpoke
0a60c     58 BD 02 F6 | 	mov	local12, local06
0a610     04 BC 66 F0 | 	shl	local12, #4
0a614     16 00 00 FF 
0a618     9C 65 06 F1 | 	add	objptr, ##11676
0a61c     32 BD 02 F1 | 	add	local12, objptr
0a620     5E AF 62 FC | 	wrlong	local05, local12
0a624     58 BD 02 F6 | 	mov	local12, local06
0a628     04 BC 66 F0 | 	shl	local12, #4
0a62c     32 BD 02 F1 | 	add	local12, objptr
0a630     04 BC 06 F1 | 	add	local12, #4
0a634     5E C7 62 FC | 	wrlong	local17, local12
0a638     58 BD 02 F6 | 	mov	local12, local06
0a63c     04 BC 66 F0 | 	shl	local12, #4
0a640     32 BD 02 F1 | 	add	local12, objptr
0a644     0C BC 06 F1 | 	add	local12, #12
0a648     5E C1 62 FC | 	wrlong	local14, local12
0a64c                 | ' memtop=arrayptr
0a64c                 | ' psdpoke arrayptr,arraytype 
0a64c                 | ' psdpoke arrayptr+2,esize 
0a64c                 | ' pslpoke arrayptr+4,dims(0)
0a64c                 | ' pslpoke arrayptr+8,dims(1)
0a64c                 | ' pslpoke arrayptr+12,dims(2)
0a64c                 | ' variables(j).name=varname2$
0a64c                 | ' variables(j).value.uresult=arrayptr
0a64c                 | ' variables(j).vartype=arraytype
0a64c                 | ' if j=varnum then varnum+=1
0a64c     20 00 00 FF 
0a650     10 64 06 F1 | 	add	objptr, ##16400
0a654     32 B3 02 FB | 	rdlong	local07, objptr
0a658     36 00 00 FF 
0a65c     AC 65 86 F1 | 	sub	objptr, ##28076
0a660     59 B1 0A F2 | 	cmp	local06, local07 wz
0a664     36 00 00 AF 
0a668     AC 65 06 A1 |  if_e	add	objptr, ##28076
0a66c     32 B3 02 AB |  if_e	rdlong	local07, objptr
0a670     01 B2 06 A1 |  if_e	add	local07, #1
0a674     32 B3 62 AC |  if_e	wrlong	local07, objptr
0a678     36 00 00 AF 
0a67c     AC 65 86 A1 |  if_e	sub	objptr, ##28076
0a680                 | ' return 0
0a680     00 7A 06 F6 | 	mov	result1, #0
0a684                 | LR__0925
0a684     E7 F0 03 F6 | 	mov	ptra, fp
0a688     F2 00 A0 FD | 	call	#popregs_
0a68c                 | _compile_dim_ret
0a68c     2D 00 64 FD | 	ret
0a690                 | 
0a690                 | ' 
0a690                 | ' '----- compile 'for' command. 
0a690                 | ' 
0a690                 | ' function compile_for() as ulong  
0a690                 | _compile_for
0a690     0F CA 05 F6 | 	mov	COUNT_, #15
0a694     E8 00 A0 FD | 	call	#pushregs_
0a698                 | ' 
0a698                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else return 32
0a698     38 00 00 FF 
0a69c     E8 65 06 F1 | 	add	objptr, ##29160
0a6a0     32 95 02 FB | 	rdlong	arg02, objptr
0a6a4     01 94 06 F1 | 	add	arg02, #1
0a6a8     03 94 66 F0 | 	shl	arg02, #3
0a6ac     02 00 00 FF 
0a6b0     38 64 86 F1 | 	sub	objptr, ##1080
0a6b4     32 95 02 F1 | 	add	arg02, objptr
0a6b8     4A 93 02 FB | 	rdlong	arg01, arg02
0a6bc     36 00 00 FF 
0a6c0     B0 65 86 F1 | 	sub	objptr, ##28080
0a6c4                 | ' 
0a6c4                 | ' select case s
0a6c4     93 01 00 FF 
0a6c8     EE 94 06 F6 | 	mov	arg02, ##@LR__5639
0a6cc     30 A3 B1 FD | 	call	#__system___string_cmp
0a6d0     00 7A 0E F2 | 	cmp	result1, #0 wz
0a6d4     1B 7A 06 A6 |  if_e	mov	result1, #27
0a6d8     00 7A 06 56 |  if_ne	mov	result1, #0
0a6dc     00 7A 0E F2 | 	cmp	result1, #0 wz
0a6e0     0C 00 90 AD |  if_e	jmp	#LR__0930
0a6e4     05 92 06 F6 | 	mov	arg01, #5
0a6e8     DC DB BF FD | 	call	#_compile_immediate_assign
0a6ec     08 00 90 FD | 	jmp	#LR__0931
0a6f0                 | LR__0930
0a6f0     20 7A 06 F6 | 	mov	result1, #32
0a6f4     64 08 90 FD | 	jmp	#LR__0947
0a6f8                 | LR__0931
0a6f8     4C 00 00 FF 
0a6fc     20 64 06 F1 | 	add	objptr, ##38944
0a700     32 95 02 FB | 	rdlong	arg02, objptr
0a704     4A 93 02 F6 | 	mov	arg01, arg02
0a708     01 92 86 F1 | 	sub	arg01, #1
0a70c     49 AD 02 F6 | 	mov	local04, arg01
0a710     01 AC 66 F0 | 	shl	local04, #1
0a714     49 AD 02 F1 | 	add	local04, arg01
0a718     02 AC 66 F0 | 	shl	local04, #2
0a71c     03 00 00 FF 
0a720     00 64 86 F1 | 	sub	objptr, ##1536
0a724     32 AD 02 F1 | 	add	local04, objptr
0a728     56 A7 02 FB | 	rdlong	local01, local04
0a72c     04 AC 06 F1 | 	add	local04, #4
0a730     56 AF 02 FB | 	rdlong	local05, local04
0a734     01 94 86 F1 | 	sub	arg02, #1
0a738     4A B1 02 F6 | 	mov	local06, arg02
0a73c     01 B0 66 F0 | 	shl	local06, #1
0a740     4A B1 02 F1 | 	add	local06, arg02
0a744     02 B0 66 F0 | 	shl	local06, #2
0a748     32 B3 02 F6 | 	mov	local07, objptr
0a74c     32 B1 02 F1 | 	add	local06, objptr
0a750     08 B0 06 F1 | 	add	local06, #8
0a754     58 AD 02 FB | 	rdlong	local04, local06
0a758     57 A9 02 F6 | 	mov	local02, local05
0a75c     56 AB 02 F6 | 	mov	local03, local04
0a760                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then  return 34'		' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
0a760     17 AA 0E F2 | 	cmp	local03, #23 wz
0a764     49 00 00 FF 
0a768     20 64 86 F1 | 	sub	objptr, ##37408
0a76c     22 7A 06 56 |  if_ne	mov	result1, #34
0a770     E8 07 90 5D |  if_ne	jmp	#LR__0947
0a774     53 B5 02 F6 | 	mov	local08, local01
0a778                 | ' varnum=t1.result.uresult
0a778                 | ' if lparts(ct).part$<>"to" then return 33
0a778     38 00 00 FF 
0a77c     E8 65 06 F1 | 	add	objptr, ##29160
0a780     32 AD 02 FB | 	rdlong	local04, objptr
0a784     03 AC 66 F0 | 	shl	local04, #3
0a788     02 00 00 FF 
0a78c     38 64 86 F1 | 	sub	objptr, ##1080
0a790     32 AD 02 F1 | 	add	local04, objptr
0a794     56 93 02 FB | 	rdlong	arg01, local04
0a798     96 01 00 FF 
0a79c     88 94 06 F6 | 	mov	arg02, ##@LR__5932
0a7a0     36 00 00 FF 
0a7a4     B0 65 86 F1 | 	sub	objptr, ##28080
0a7a8     54 A2 B1 FD | 	call	#__system___string_cmp
0a7ac     00 7A 0E F2 | 	cmp	result1, #0 wz
0a7b0     21 7A 06 56 |  if_ne	mov	result1, #33
0a7b4     A4 07 90 5D |  if_ne	jmp	#LR__0947
0a7b8     38 00 00 FF 
0a7bc     E8 65 06 F1 | 	add	objptr, ##29160
0a7c0     32 B7 02 FB | 	rdlong	local09, objptr
0a7c4     01 B6 06 F1 | 	add	local09, #1
0a7c8     32 B7 62 FC | 	wrlong	local09, objptr
0a7cc     38 00 00 FF 
0a7d0     E8 65 86 F1 | 	sub	objptr, ##29160
0a7d4     80 16 B0 FD | 	call	#_expr
0a7d8                 | ' ct+=1
0a7d8                 | ' expr()  										' there is "to" value pushed on the stack
0a7d8                 | ' if lparts(ct).part$="step" orelse left$(lparts(ct).part$,2)="s." then
0a7d8     38 00 00 FF 
0a7dc     E8 65 06 F1 | 	add	objptr, ##29160
0a7e0     32 AD 02 FB | 	rdlong	local04, objptr
0a7e4     03 AC 66 F0 | 	shl	local04, #3
0a7e8     02 00 00 FF 
0a7ec     38 64 86 F1 | 	sub	objptr, ##1080
0a7f0     32 AD 02 F1 | 	add	local04, objptr
0a7f4     56 93 02 FB | 	rdlong	arg01, local04
0a7f8     96 01 00 FF 
0a7fc     8B 94 06 F6 | 	mov	arg02, ##@LR__5933
0a800     36 00 00 FF 
0a804     B0 65 86 F1 | 	sub	objptr, ##28080
0a808     F4 A1 B1 FD | 	call	#__system___string_cmp
0a80c     00 7A 0E F2 | 	cmp	result1, #0 wz
0a810     48 00 90 AD |  if_e	jmp	#LR__0932
0a814     38 00 00 FF 
0a818     E8 65 06 F1 | 	add	objptr, ##29160
0a81c     32 AD 02 FB | 	rdlong	local04, objptr
0a820     03 AC 66 F0 | 	shl	local04, #3
0a824     02 00 00 FF 
0a828     38 64 86 F1 | 	sub	objptr, ##1080
0a82c     32 AD 02 F1 | 	add	local04, objptr
0a830     56 93 02 FB | 	rdlong	arg01, local04
0a834     02 94 06 F6 | 	mov	arg02, #2
0a838     36 00 00 FF 
0a83c     B0 65 86 F1 | 	sub	objptr, ##28080
0a840     3C BA B1 FD | 	call	#__system__Left_S
0a844     3D 93 02 F6 | 	mov	arg01, result1
0a848     96 01 00 FF 
0a84c     90 94 06 F6 | 	mov	arg02, ##@LR__5934
0a850     AC A1 B1 FD | 	call	#__system___string_cmp
0a854     00 7A 0E F2 | 	cmp	result1, #0 wz
0a858     A8 05 90 5D |  if_ne	jmp	#LR__0945
0a85c                 | LR__0932
0a85c                 | '   if left$(lparts(ct).part$,2)="s." andalso len(lparts(ct).part$)>2 then ' correct the part
0a85c     38 00 00 FF 
0a860     E8 65 06 F1 | 	add	objptr, ##29160
0a864     32 AD 02 FB | 	rdlong	local04, objptr
0a868     03 AC 66 F0 | 	shl	local04, #3
0a86c     02 00 00 FF 
0a870     38 64 86 F1 | 	sub	objptr, ##1080
0a874     32 AD 02 F1 | 	add	local04, objptr
0a878     56 93 02 FB | 	rdlong	arg01, local04
0a87c     02 94 06 F6 | 	mov	arg02, #2
0a880     36 00 00 FF 
0a884     B0 65 86 F1 | 	sub	objptr, ##28080
0a888     F4 B9 B1 FD | 	call	#__system__Left_S
0a88c     3D 93 02 F6 | 	mov	arg01, result1
0a890     96 01 00 FF 
0a894     93 94 06 F6 | 	mov	arg02, ##@LR__5935
0a898     64 A1 B1 FD | 	call	#__system___string_cmp
0a89c     00 7A 0E F2 | 	cmp	result1, #0 wz
0a8a0     3C 05 90 5D |  if_ne	jmp	#LR__0944
0a8a4     38 00 00 FF 
0a8a8     E8 65 06 F1 | 	add	objptr, ##29160
0a8ac     32 AD 02 FB | 	rdlong	local04, objptr
0a8b0     03 AC 66 F0 | 	shl	local04, #3
0a8b4     02 00 00 FF 
0a8b8     38 64 86 F1 | 	sub	objptr, ##1080
0a8bc     32 AD 02 F1 | 	add	local04, objptr
0a8c0     56 93 02 FB | 	rdlong	arg01, local04
0a8c4     36 00 00 FF 
0a8c8     B0 65 86 F1 | 	sub	objptr, ##28080
0a8cc     49 B9 02 F6 | 	mov	local10, arg01
0a8d0     D7 06 48 FB | 	callpa	#(@LR__0934-@LR__0933)>>2,fcache_load_ptr_
0a8d4                 | LR__0933
0a8d4     5C 7B CA FA | 	rdbyte	result1, local10 wz
0a8d8     01 B8 06 51 |  if_ne	add	local10, #1
0a8dc     F4 FF 9F 5D |  if_ne	jmp	#LR__0933
0a8e0                 | LR__0934
0a8e0     49 B9 82 F1 | 	sub	local10, arg01
0a8e4     03 B8 56 F2 | 	cmps	local10, #3 wc
0a8e8     F4 04 90 CD |  if_b	jmp	#LR__0944
0a8ec     38 00 00 FF 
0a8f0     E8 65 06 F1 | 	add	objptr, ##29160
0a8f4     32 AD 02 FB | 	rdlong	local04, objptr
0a8f8     56 BB 02 F6 | 	mov	local11, local04
0a8fc     03 BA 66 F0 | 	shl	local11, #3
0a900     02 00 00 FF 
0a904     38 64 86 F1 | 	sub	objptr, ##1080
0a908     32 BB 02 F1 | 	add	local11, objptr
0a90c     03 AC 66 F0 | 	shl	local04, #3
0a910     32 AD 02 F1 | 	add	local04, objptr
0a914     56 AD 02 FB | 	rdlong	local04, local04
0a918     02 00 00 FF 
0a91c     38 64 06 F1 | 	add	objptr, ##1080
0a920     32 93 02 FB | 	rdlong	arg01, objptr
0a924     03 92 66 F0 | 	shl	arg01, #3
0a928     02 00 00 FF 
0a92c     38 64 86 F1 | 	sub	objptr, ##1080
0a930     32 93 02 F1 | 	add	arg01, objptr
0a934     49 93 02 FB | 	rdlong	arg01, arg01
0a938     36 00 00 FF 
0a93c     B0 65 86 F1 | 	sub	objptr, ##28080
0a940     49 B9 02 F6 | 	mov	local10, arg01
0a944     D7 06 48 FB | 	callpa	#(@LR__0936-@LR__0935)>>2,fcache_load_ptr_
0a948                 | LR__0935
0a948     5C 7B CA FA | 	rdbyte	result1, local10 wz
0a94c     01 B8 06 51 |  if_ne	add	local10, #1
0a950     F4 FF 9F 5D |  if_ne	jmp	#LR__0935
0a954                 | LR__0936
0a954     49 B9 82 F1 | 	sub	local10, arg01
0a958     5C 95 02 F6 | 	mov	arg02, local10
0a95c     02 94 86 F1 | 	sub	arg02, #2
0a960     56 93 02 F6 | 	mov	arg01, local04
0a964     A0 B9 B1 FD | 	call	#__system__Right_S
0a968     5D 7B 62 FC | 	wrlong	result1, local11
0a96c     38 00 00 FF 
0a970     E8 65 06 F1 | 	add	objptr, ##29160
0a974     32 AD 02 FB | 	rdlong	local04, objptr
0a978     56 BB 02 F6 | 	mov	local11, local04
0a97c     03 BA 66 F0 | 	shl	local11, #3
0a980     02 00 00 FF 
0a984     38 64 86 F1 | 	sub	objptr, ##1080
0a988     32 BB 02 F1 | 	add	local11, objptr
0a98c     03 AC 66 F0 | 	shl	local04, #3
0a990     32 AD 02 F1 | 	add	local04, objptr
0a994     56 93 02 FB | 	rdlong	arg01, local04
0a998     36 00 00 FF 
0a99c     B0 65 86 F1 | 	sub	objptr, ##28080
0a9a0     1C B6 BF FD | 	call	#_isfunction
0a9a4     3D 7B E2 F8 | 	getbyte	result1, result1, #0
0a9a8     04 BA 06 F1 | 	add	local11, #4
0a9ac     5D 7B 62 FC | 	wrlong	result1, local11
0a9b0                 | '     lparts(ct).token=isfunction(lparts(ct).part$) : if lparts(ct).token>0 then goto 2102
0a9b0     38 00 00 FF 
0a9b4     E8 65 06 F1 | 	add	objptr, ##29160
0a9b8     32 BB 02 FB | 	rdlong	local11, objptr
0a9bc     03 BA 66 F0 | 	shl	local11, #3
0a9c0     02 00 00 FF 
0a9c4     38 64 86 F1 | 	sub	objptr, ##1080
0a9c8     32 BB 02 F1 | 	add	local11, objptr
0a9cc     04 BA 06 F1 | 	add	local11, #4
0a9d0     5D AD 02 FB | 	rdlong	local04, local11
0a9d4     01 AC 56 F2 | 	cmps	local04, #1 wc
0a9d8     36 00 00 FF 
0a9dc     B0 65 86 F1 | 	sub	objptr, ##28080
0a9e0     E0 03 90 3D |  if_ae	jmp	#LR__0943
0a9e4     38 00 00 FF 
0a9e8     E8 65 06 F1 | 	add	objptr, ##29160
0a9ec     32 AD 02 FB | 	rdlong	local04, objptr
0a9f0     56 BB 02 F6 | 	mov	local11, local04
0a9f4     03 BA 66 F0 | 	shl	local11, #3
0a9f8     02 00 00 FF 
0a9fc     38 64 86 F1 | 	sub	objptr, ##1080
0aa00     32 BB 02 F1 | 	add	local11, objptr
0aa04     03 AC 66 F0 | 	shl	local04, #3
0aa08     32 AD 02 F1 | 	add	local04, objptr
0aa0c     56 93 02 FB | 	rdlong	arg01, local04
0aa10     36 00 00 FF 
0aa14     B0 65 86 F1 | 	sub	objptr, ##28080
0aa18     78 9E BF FD | 	call	#_isnotename
0aa1c     04 BA 06 F1 | 	add	local11, #4
0aa20     5D 7B 62 FC | 	wrlong	result1, local11
0aa24                 | '     lparts(ct).token=isnotename(lparts(ct).part$) :
0aa24                 | '     if lparts(ct).token>0 then 
0aa24     38 00 00 FF 
0aa28     E8 65 06 F1 | 	add	objptr, ##29160
0aa2c     32 BB 02 FB | 	rdlong	local11, objptr
0aa30     03 BA 66 F0 | 	shl	local11, #3
0aa34     02 00 00 FF 
0aa38     38 64 86 F1 | 	sub	objptr, ##1080
0aa3c     32 BB 02 F1 | 	add	local11, objptr
0aa40     04 BA 06 F1 | 	add	local11, #4
0aa44     5D AD 02 FB | 	rdlong	local04, local11
0aa48     01 AC 56 F2 | 	cmps	local04, #1 wc
0aa4c     36 00 00 FF 
0aa50     B0 65 86 F1 | 	sub	objptr, ##28080
0aa54     94 00 90 CD |  if_b	jmp	#LR__0937
0aa58     38 00 00 FF 
0aa5c     E8 65 06 F1 | 	add	objptr, ##29160
0aa60     32 BB 02 FB | 	rdlong	local11, objptr
0aa64     03 BA 66 F0 | 	shl	local11, #3
0aa68     02 00 00 FF 
0aa6c     38 64 86 F1 | 	sub	objptr, ##1080
0aa70     32 BB 02 F1 | 	add	local11, objptr
0aa74     04 BA 06 F1 | 	add	local11, #4
0aa78     5D 93 02 FB | 	rdlong	arg01, local11
0aa7c     36 00 00 FF 
0aa80     B0 65 86 F1 | 	sub	objptr, ##28080
0aa84     80 C7 BF FD | 	call	#_getnoteval
0aa88     3D 93 02 F6 | 	mov	arg01, result1
0aa8c     38 00 00 FF 
0aa90     E8 65 06 F1 | 	add	objptr, ##29160
0aa94     32 BB 02 FB | 	rdlong	local11, objptr
0aa98     03 BA 66 F0 | 	shl	local11, #3
0aa9c     02 00 00 FF 
0aaa0     38 64 86 F1 | 	sub	objptr, ##1080
0aaa4     32 BB 02 F1 | 	add	local11, objptr
0aaa8     36 00 00 FF 
0aaac     B0 65 86 F1 | 	sub	objptr, ##28080
0aab0     C4 B9 B1 FD | 	call	#__system__str_S
0aab4     5D 7B 62 FC | 	wrlong	result1, local11
0aab8     38 00 00 FF 
0aabc     E8 65 06 F1 | 	add	objptr, ##29160
0aac0     32 BB 02 FB | 	rdlong	local11, objptr
0aac4     03 BA 66 F0 | 	shl	local11, #3
0aac8     02 00 00 FF 
0aacc     38 64 86 F1 | 	sub	objptr, ##1080
0aad0     32 BB 02 F1 | 	add	local11, objptr
0aad4     04 BA 06 F1 | 	add	local11, #4
0aad8     01 00 80 FF 
0aadc     5D 05 68 FC | 	wrlong	##514, local11
0aae0     36 00 00 FF 
0aae4     B0 65 86 F1 | 	sub	objptr, ##28080
0aae8     D8 02 90 FD | 	jmp	#LR__0943
0aaec                 | LR__0937
0aaec     38 00 00 FF 
0aaf0     E8 65 06 F1 | 	add	objptr, ##29160
0aaf4     32 AD 02 FB | 	rdlong	local04, objptr
0aaf8     56 BB 02 F6 | 	mov	local11, local04
0aafc     03 BA 66 F0 | 	shl	local11, #3
0ab00     02 00 00 FF 
0ab04     38 64 86 F1 | 	sub	objptr, ##1080
0ab08     32 BB 02 F1 | 	add	local11, objptr
0ab0c     03 AC 66 F0 | 	shl	local04, #3
0ab10     32 AD 02 F1 | 	add	local04, objptr
0ab14     56 93 02 FB | 	rdlong	arg01, local04
0ab18     36 00 00 FF 
0ab1c     B0 65 86 F1 | 	sub	objptr, ##28080
0ab20     F0 9C BF FD | 	call	#_isconstant
0ab24     04 BA 06 F1 | 	add	local11, #4
0ab28     5D 7B 62 FC | 	wrlong	result1, local11
0ab2c                 | '     lparts(ct).token=isconstant(lparts(ct).part$) : if lparts(ct).token>0 then lparts(ct).part$=str$(lparts(ct).token) : lparts(ct).token=token_integer : goto 2102
0ab2c     38 00 00 FF 
0ab30     E8 65 06 F1 | 	add	objptr, ##29160
0ab34     32 BB 02 FB | 	rdlong	local11, objptr
0ab38     03 BA 66 F0 | 	shl	local11, #3
0ab3c     02 00 00 FF 
0ab40     38 64 86 F1 | 	sub	objptr, ##1080
0ab44     32 BB 02 F1 | 	add	local11, objptr
0ab48     04 BA 06 F1 | 	add	local11, #4
0ab4c     5D AD 02 FB | 	rdlong	local04, local11
0ab50     01 AC 56 F2 | 	cmps	local04, #1 wc
0ab54     36 00 00 FF 
0ab58     B0 65 86 F1 | 	sub	objptr, ##28080
0ab5c     8C 00 90 CD |  if_b	jmp	#LR__0938
0ab60     38 00 00 FF 
0ab64     E8 65 06 F1 | 	add	objptr, ##29160
0ab68     32 B7 02 FB | 	rdlong	local09, objptr
0ab6c     5B BB 02 F6 | 	mov	local11, local09
0ab70     03 BA 66 F0 | 	shl	local11, #3
0ab74     02 00 00 FF 
0ab78     38 64 86 F1 | 	sub	objptr, ##1080
0ab7c     32 BB 02 F1 | 	add	local11, objptr
0ab80     03 B6 66 F0 | 	shl	local09, #3
0ab84     32 B7 02 F1 | 	add	local09, objptr
0ab88     04 B6 06 F1 | 	add	local09, #4
0ab8c     5B 93 02 FB | 	rdlong	arg01, local09
0ab90     36 00 00 FF 
0ab94     B0 65 86 F1 | 	sub	objptr, ##28080
0ab98     49 93 52 F6 | 	abs	arg01, arg01 wc
0ab9c     1F BC C6 C9 |  if_b	decod	local12, #31
0aba0     00 BC 06 36 |  if_ae	mov	local12, #0
0aba4     FC C0 B1 FD | 	call	#__system___float_fromuns
0aba8     5E 7B 62 F5 | 	xor	result1, local12
0abac     3D 93 02 F6 | 	mov	arg01, result1
0abb0     C4 B8 B1 FD | 	call	#__system__str_S
0abb4     5D 7B 62 FC | 	wrlong	result1, local11
0abb8     38 00 00 FF 
0abbc     E8 65 06 F1 | 	add	objptr, ##29160
0abc0     32 BB 02 FB | 	rdlong	local11, objptr
0abc4     03 BA 66 F0 | 	shl	local11, #3
0abc8     02 00 00 FF 
0abcc     38 64 86 F1 | 	sub	objptr, ##1080
0abd0     32 BB 02 F1 | 	add	local11, objptr
0abd4     04 BA 06 F1 | 	add	local11, #4
0abd8     01 00 80 FF 
0abdc     5D 03 68 FC | 	wrlong	##513, local11
0abe0     36 00 00 FF 
0abe4     B0 65 86 F1 | 	sub	objptr, ##28080
0abe8     D8 01 90 FD | 	jmp	#LR__0943
0abec                 | LR__0938
0abec     38 00 00 FF 
0abf0     E8 65 06 F1 | 	add	objptr, ##29160
0abf4     32 AD 02 FB | 	rdlong	local04, objptr
0abf8     03 AC 66 F0 | 	shl	local04, #3
0abfc     02 00 00 FF 
0ac00     38 64 86 F1 | 	sub	objptr, ##1080
0ac04     32 AD 02 F1 | 	add	local04, objptr
0ac08     56 93 02 FB | 	rdlong	arg01, local04
0ac0c     36 00 00 FF 
0ac10     B0 65 86 F1 | 	sub	objptr, ##28080
0ac14     3C BE BF FD | 	call	#_isnum
0ac18     3D BF 02 F6 | 	mov	local13, result1
0ac1c     07 BE 66 F7 | 	signx	local13, #7
0ac20     38 00 00 FF 
0ac24     E8 65 06 F1 | 	add	objptr, ##29160
0ac28     32 AD 02 FB | 	rdlong	local04, objptr
0ac2c     03 AC 66 F0 | 	shl	local04, #3
0ac30     02 00 00 FF 
0ac34     38 64 86 F1 | 	sub	objptr, ##1080
0ac38     32 AD 02 F1 | 	add	local04, objptr
0ac3c     56 93 02 FB | 	rdlong	arg01, local04
0ac40     36 00 00 FF 
0ac44     B0 65 86 F1 | 	sub	objptr, ##28080
0ac48     F4 C1 BF FD | 	call	#_isint
0ac4c     3D C1 02 F6 | 	mov	local14, result1
0ac50     07 C0 66 F7 | 	signx	local14, #7
0ac54     38 00 00 FF 
0ac58     E8 65 06 F1 | 	add	objptr, ##29160
0ac5c     32 AD 02 FB | 	rdlong	local04, objptr
0ac60     03 AC 66 F0 | 	shl	local04, #3
0ac64     02 00 00 FF 
0ac68     38 64 86 F1 | 	sub	objptr, ##1080
0ac6c     32 AD 02 F1 | 	add	local04, objptr
0ac70     56 93 02 FB | 	rdlong	arg01, local04
0ac74     36 00 00 FF 
0ac78     B0 65 86 F1 | 	sub	objptr, ##28080
0ac7c     64 C4 BF FD | 	call	#_isdec
0ac80     07 7A 66 F7 | 	signx	result1, #7
0ac84     3D C3 02 F6 | 	mov	local15, result1
0ac88                 | '     b1=isnum(lparts(ct).part$) : b2=isint(lparts(ct).part$) : b3=isdec(lparts(ct).part$)
0ac88                 | '     if b1 andalso b2 andalso b3 then lparts(ct).token=token_decimal 			: goto 2102 	' pure decimal for line num
0ac88     00 BE 0E F2 | 	cmp	local13, #0 wz
0ac8c     00 C0 0E 52 |  if_ne	cmp	local14, #0 wz
0ac90     00 C2 0E 52 |  if_ne	cmp	local15, #0 wz
0ac94     34 00 90 AD |  if_e	jmp	#LR__0939
0ac98     38 00 00 FF 
0ac9c     E8 65 06 F1 | 	add	objptr, ##29160
0aca0     32 BB 02 FB | 	rdlong	local11, objptr
0aca4     03 BA 66 F0 | 	shl	local11, #3
0aca8     02 00 00 FF 
0acac     38 64 86 F1 | 	sub	objptr, ##1080
0acb0     32 BB 02 F1 | 	add	local11, objptr
0acb4     04 BA 06 F1 | 	add	local11, #4
0acb8     01 00 80 FF 
0acbc     5D 01 68 FC | 	wrlong	##512, local11
0acc0     36 00 00 FF 
0acc4     B0 65 86 F1 | 	sub	objptr, ##28080
0acc8     F8 00 90 FD | 	jmp	#LR__0943
0accc                 | LR__0939
0accc                 | '     if b1 andalso b2 andalso (not b3) then lparts(ct).token=token_integer 		: goto 2102 	' integer
0accc     00 BE 0E F2 | 	cmp	local13, #0 wz
0acd0     00 C0 0E 52 |  if_ne	cmp	local14, #0 wz
0acd4     61 B7 22 56 |  if_ne	not	local09, local15
0acd8     00 B6 0E 52 |  if_ne	cmp	local09, #0 wz
0acdc     34 00 90 AD |  if_e	jmp	#LR__0940
0ace0     38 00 00 FF 
0ace4     E8 65 06 F1 | 	add	objptr, ##29160
0ace8     32 BB 02 FB | 	rdlong	local11, objptr
0acec     03 BA 66 F0 | 	shl	local11, #3
0acf0     02 00 00 FF 
0acf4     38 64 86 F1 | 	sub	objptr, ##1080
0acf8     32 BB 02 F1 | 	add	local11, objptr
0acfc     04 BA 06 F1 | 	add	local11, #4
0ad00     01 00 80 FF 
0ad04     5D 03 68 FC | 	wrlong	##513, local11
0ad08     36 00 00 FF 
0ad0c     B0 65 86 F1 | 	sub	objptr, ##28080
0ad10     B0 00 90 FD | 	jmp	#LR__0943
0ad14                 | LR__0940
0ad14                 | '     if b1 andalso (not b2) andalso (not b3) then lparts(ct).token=token_float 		: goto 2102 	' float
0ad14     00 BE 0E F2 | 	cmp	local13, #0 wz
0ad18     60 C1 22 56 |  if_ne	not	local14, local14
0ad1c     00 C0 0E 52 |  if_ne	cmp	local14, #0 wz
0ad20     61 C3 22 56 |  if_ne	not	local15, local15
0ad24     00 C2 0E 52 |  if_ne	cmp	local15, #0 wz
0ad28     34 00 90 AD |  if_e	jmp	#LR__0941
0ad2c     38 00 00 FF 
0ad30     E8 65 06 F1 | 	add	objptr, ##29160
0ad34     32 BB 02 FB | 	rdlong	local11, objptr
0ad38     03 BA 66 F0 | 	shl	local11, #3
0ad3c     02 00 00 FF 
0ad40     38 64 86 F1 | 	sub	objptr, ##1080
0ad44     32 BB 02 F1 | 	add	local11, objptr
0ad48     04 BA 06 F1 | 	add	local11, #4
0ad4c     01 00 80 FF 
0ad50     5D 05 68 FC | 	wrlong	##514, local11
0ad54     36 00 00 FF 
0ad58     B0 65 86 F1 | 	sub	objptr, ##28080
0ad5c     64 00 90 FD | 	jmp	#LR__0943
0ad60                 | LR__0941
0ad60                 | '     if isname(lparts(ct).part$) then lparts(ct).token=token_name : goto 2102	
0ad60     38 00 00 FF 
0ad64     E8 65 06 F1 | 	add	objptr, ##29160
0ad68     32 BB 02 FB | 	rdlong	local11, objptr
0ad6c     03 BA 66 F0 | 	shl	local11, #3
0ad70     02 00 00 FF 
0ad74     38 64 86 F1 | 	sub	objptr, ##1080
0ad78     32 BB 02 F1 | 	add	local11, objptr
0ad7c     5D 93 02 FB | 	rdlong	arg01, local11
0ad80     36 00 00 FF 
0ad84     B0 65 86 F1 | 	sub	objptr, ##28080
0ad88     54 BA BF FD | 	call	#_isname
0ad8c     00 7A 0E F2 | 	cmp	result1, #0 wz
0ad90     30 00 90 AD |  if_e	jmp	#LR__0942
0ad94     38 00 00 FF 
0ad98     E8 65 06 F1 | 	add	objptr, ##29160
0ad9c     32 BB 02 FB | 	rdlong	local11, objptr
0ada0     03 BA 66 F0 | 	shl	local11, #3
0ada4     02 00 00 FF 
0ada8     38 64 86 F1 | 	sub	objptr, ##1080
0adac     32 BB 02 F1 | 	add	local11, objptr
0adb0     04 BA 06 F1 | 	add	local11, #4
0adb4     01 00 80 FF 
0adb8     5D 09 68 FC | 	wrlong	##516, local11
0adbc     36 00 00 FF 
0adc0     B0 65 86 F1 | 	sub	objptr, ##28080
0adc4                 | LR__0942
0adc4                 | LR__0943
0adc4     38 00 00 FF 
0adc8     E8 65 06 F1 | 	add	objptr, ##29160
0adcc     32 B7 02 FB | 	rdlong	local09, objptr
0add0     01 B6 86 F1 | 	sub	local09, #1
0add4     32 B7 62 FC | 	wrlong	local09, objptr
0add8     38 00 00 FF 
0addc     E8 65 86 F1 | 	sub	objptr, ##29160
0ade0                 | LR__0944
0ade0     38 00 00 FF 
0ade4     E8 65 06 F1 | 	add	objptr, ##29160
0ade8     32 B7 02 FB | 	rdlong	local09, objptr
0adec     01 B6 06 F1 | 	add	local09, #1
0adf0     32 B7 62 FC | 	wrlong	local09, objptr
0adf4     38 00 00 FF 
0adf8     E8 65 86 F1 | 	sub	objptr, ##29160
0adfc     58 10 B0 FD | 	call	#_expr
0ae00     78 00 90 FD | 	jmp	#LR__0946
0ae04                 | LR__0945
0ae04     4C 00 00 FF 
0ae08     20 64 06 F1 | 	add	objptr, ##38944
0ae0c     32 C3 02 FB | 	rdlong	local15, objptr
0ae10     61 BB 02 F6 | 	mov	local11, local15
0ae14     01 BA 66 F0 | 	shl	local11, #1
0ae18     61 BB 02 F1 | 	add	local11, local15
0ae1c     02 BA 66 F0 | 	shl	local11, #2
0ae20     03 00 00 FF 
0ae24     00 64 86 F1 | 	sub	objptr, ##1536
0ae28     32 BB 02 F1 | 	add	local11, objptr
0ae2c     08 BA 06 F1 | 	add	local11, #8
0ae30     5D 39 68 FC | 	wrlong	#28, local11
0ae34     03 00 00 FF 
0ae38     00 64 06 F1 | 	add	objptr, ##1536
0ae3c     32 C3 02 FB | 	rdlong	local15, objptr
0ae40     61 BB 02 F6 | 	mov	local11, local15
0ae44     01 BA 66 F0 | 	shl	local11, #1
0ae48     61 BB 02 F1 | 	add	local11, local15
0ae4c     02 BA 66 F0 | 	shl	local11, #2
0ae50     03 00 00 FF 
0ae54     00 64 86 F1 | 	sub	objptr, ##1536
0ae58     32 BB 02 F1 | 	add	local11, objptr
0ae5c     5D 03 68 FC | 	wrlong	#1, local11
0ae60     03 00 00 FF 
0ae64     00 64 06 F1 | 	add	objptr, ##1536
0ae68     32 B7 02 FB | 	rdlong	local09, objptr
0ae6c     01 B6 06 F1 | 	add	local09, #1
0ae70     32 B7 62 FC | 	wrlong	local09, objptr
0ae74     4C 00 00 FF 
0ae78     20 64 86 F1 | 	sub	objptr, ##38944
0ae7c                 | LR__0946
0ae7c     4C 00 00 FF 
0ae80     20 64 06 F1 | 	add	objptr, ##38944
0ae84     32 C3 02 FB | 	rdlong	local15, objptr
0ae88     61 BB 02 F6 | 	mov	local11, local15
0ae8c     01 BA 66 F0 | 	shl	local11, #1
0ae90     61 BB 02 F1 | 	add	local11, local15
0ae94     02 BA 66 F0 | 	shl	local11, #2
0ae98     03 00 00 FF 
0ae9c     00 64 86 F1 | 	sub	objptr, ##1536
0aea0     32 BB 02 F1 | 	add	local11, objptr
0aea4     08 BA 06 F1 | 	add	local11, #8
0aea8     5D 39 68 FC | 	wrlong	#28, local11
0aeac     03 00 00 FF 
0aeb0     00 64 06 F1 | 	add	objptr, ##1536
0aeb4     32 C3 02 FB | 	rdlong	local15, objptr
0aeb8     61 BB 02 F6 | 	mov	local11, local15
0aebc     01 BA 66 F0 | 	shl	local11, #1
0aec0     61 BB 02 F1 | 	add	local11, local15
0aec4     02 BA 66 F0 | 	shl	local11, #2
0aec8     03 00 00 FF 
0aecc     00 64 86 F1 | 	sub	objptr, ##1536
0aed0     32 BB 02 F1 | 	add	local11, objptr
0aed4     5D B5 62 FC | 	wrlong	local08, local11
0aed8     03 00 00 FF 
0aedc     00 64 06 F1 | 	add	objptr, ##1536
0aee0     32 C3 02 FB | 	rdlong	local15, objptr
0aee4     01 C2 06 F1 | 	add	local15, #1
0aee8     32 C3 62 FC | 	wrlong	local15, objptr
0aeec     61 BB 02 F6 | 	mov	local11, local15
0aef0     01 BA 66 F0 | 	shl	local11, #1
0aef4     61 BB 02 F1 | 	add	local11, local15
0aef8     02 BA 66 F0 | 	shl	local11, #2
0aefc     03 00 00 FF 
0af00     00 64 86 F1 | 	sub	objptr, ##1536
0af04     32 BB 02 F1 | 	add	local11, objptr
0af08     08 BA 06 F1 | 	add	local11, #8
0af0c     5D 95 68 FC | 	wrlong	#74, local11
0af10     03 00 00 FF 
0af14     00 64 06 F1 | 	add	objptr, ##1536
0af18     32 C3 02 FB | 	rdlong	local15, objptr
0af1c     61 BB 02 F6 | 	mov	local11, local15
0af20     01 BA 66 F0 | 	shl	local11, #1
0af24     61 BB 02 F1 | 	add	local11, local15
0af28     02 BA 66 F0 | 	shl	local11, #2
0af2c     03 00 00 FF 
0af30     00 64 86 F1 | 	sub	objptr, ##1536
0af34     32 BB 02 F1 | 	add	local11, objptr
0af38     5D 01 68 FC | 	wrlong	#0, local11
0af3c     03 00 00 FF 
0af40     00 64 06 F1 | 	add	objptr, ##1536
0af44     32 B7 02 FB | 	rdlong	local09, objptr
0af48     01 B6 06 F1 | 	add	local09, #1
0af4c     32 B7 62 FC | 	wrlong	local09, objptr
0af50     4C 00 00 FF 
0af54     20 64 86 F1 | 	sub	objptr, ##38944
0af58                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
0af58                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
0af58                 | ' return 0
0af58     00 7A 06 F6 | 	mov	result1, #0
0af5c                 | LR__0947
0af5c     E7 F0 03 F6 | 	mov	ptra, fp
0af60     F2 00 A0 FD | 	call	#popregs_
0af64                 | _compile_for_ret
0af64     2D 00 64 FD | 	ret
0af68                 | 
0af68                 | ' 
0af68                 | ' '----- compile 'next' command. 
0af68                 | ' 
0af68                 | ' function compile_next() as ulong
0af68                 | _compile_next
0af68     04 CA 05 F6 | 	mov	COUNT_, #4
0af6c     E8 00 A0 FD | 	call	#pushregs_
0af70     38 00 00 FF 
0af74     E8 65 06 F1 | 	add	objptr, ##29160
0af78     32 93 02 FB | 	rdlong	arg01, objptr
0af7c     03 92 66 F0 | 	shl	arg01, #3
0af80     02 00 00 FF 
0af84     38 64 86 F1 | 	sub	objptr, ##1080
0af88     32 93 02 F1 | 	add	arg01, objptr
0af8c     49 A7 02 FB | 	rdlong	local01, arg01
0af90                 | ' 
0af90                 | ' varname$=lparts(ct).part$ 
0af90                 | ' if varnum=0 then return 35
0af90     04 64 86 F1 | 	sub	objptr, #4
0af94     32 93 0A FB | 	rdlong	arg01, objptr wz
0af98     36 00 00 FF 
0af9c     AC 65 86 F1 | 	sub	objptr, ##28076
0afa0     23 7A 06 A6 |  if_e	mov	result1, #35
0afa4     48 01 90 AD |  if_e	jmp	#LR__0952
0afa8     01 A8 66 F6 | 	neg	local02, #1
0afac                 | ' j=-1
0afac                 | ' for i=0 to varnum-1
0afac     00 AA 06 F6 | 	mov	local03, #0
0afb0     36 00 00 FF 
0afb4     AC 65 06 F1 | 	add	objptr, ##28076
0afb8     32 AD 02 FB | 	rdlong	local04, objptr
0afbc     36 00 00 FF 
0afc0     AC 65 86 F1 | 	sub	objptr, ##28076
0afc4                 | LR__0950
0afc4     56 AB 12 F2 | 	cmp	local03, local04 wc
0afc8     34 00 90 3D |  if_ae	jmp	#LR__0951
0afcc                 | '   if variables(i).name=varname$ then j=i : exit
0afcc     55 93 02 F6 | 	mov	arg01, local03
0afd0     04 92 66 F0 | 	shl	arg01, #4
0afd4     32 95 02 F6 | 	mov	arg02, objptr
0afd8     16 00 00 FF 
0afdc     9C 95 06 F1 | 	add	arg02, ##11676
0afe0     4A 93 02 F1 | 	add	arg01, arg02
0afe4     49 93 02 FB | 	rdlong	arg01, arg01
0afe8     53 95 02 F6 | 	mov	arg02, local01
0afec     10 9A B1 FD | 	call	#__system___string_cmp
0aff0     00 7A 0E F2 | 	cmp	result1, #0 wz
0aff4     55 A9 02 A6 |  if_e	mov	local02, local03
0aff8     01 AA 06 51 |  if_ne	add	local03, #1
0affc     C4 FF 9F 5D |  if_ne	jmp	#LR__0950
0b000                 | LR__0951
0b000                 | ' if j=-1 then return 35
0b000     FF FF 7F FF 
0b004     FF A9 0E F2 | 	cmp	local02, ##-1 wz
0b008     23 7A 06 A6 |  if_e	mov	result1, #35
0b00c     E0 00 90 AD |  if_e	jmp	#LR__0952
0b010     4C 00 00 FF 
0b014     20 64 06 F1 | 	add	objptr, ##38944
0b018     32 AD 02 FB | 	rdlong	local04, objptr
0b01c     56 AB 02 F6 | 	mov	local03, local04
0b020     01 AA 66 F0 | 	shl	local03, #1
0b024     56 AB 02 F1 | 	add	local03, local04
0b028     02 AA 66 F0 | 	shl	local03, #2
0b02c     03 00 00 FF 
0b030     00 64 86 F1 | 	sub	objptr, ##1536
0b034     32 AB 02 F1 | 	add	local03, objptr
0b038     08 AA 06 F1 | 	add	local03, #8
0b03c     55 39 68 FC | 	wrlong	#28, local03
0b040     03 00 00 FF 
0b044     00 64 06 F1 | 	add	objptr, ##1536
0b048     32 AD 02 FB | 	rdlong	local04, objptr
0b04c     56 AB 02 F6 | 	mov	local03, local04
0b050     01 AA 66 F0 | 	shl	local03, #1
0b054     56 AB 02 F1 | 	add	local03, local04
0b058     02 AA 66 F0 | 	shl	local03, #2
0b05c     03 00 00 FF 
0b060     00 64 86 F1 | 	sub	objptr, ##1536
0b064     32 AB 02 F1 | 	add	local03, objptr
0b068     55 A9 62 FC | 	wrlong	local02, local03
0b06c     03 00 00 FF 
0b070     00 64 06 F1 | 	add	objptr, ##1536
0b074     32 AD 02 FB | 	rdlong	local04, objptr
0b078     01 AC 06 F1 | 	add	local04, #1
0b07c     32 AD 62 FC | 	wrlong	local04, objptr
0b080     56 AB 02 F6 | 	mov	local03, local04
0b084     01 AA 66 F0 | 	shl	local03, #1
0b088     56 AB 02 F1 | 	add	local03, local04
0b08c     02 AA 66 F0 | 	shl	local03, #2
0b090     03 00 00 FF 
0b094     00 64 86 F1 | 	sub	objptr, ##1536
0b098     32 AB 02 F1 | 	add	local03, objptr
0b09c     08 AA 06 F1 | 	add	local03, #8
0b0a0     55 97 68 FC | 	wrlong	#75, local03
0b0a4     03 00 00 FF 
0b0a8     00 64 06 F1 | 	add	objptr, ##1536
0b0ac     32 AD 02 FB | 	rdlong	local04, objptr
0b0b0     56 AB 02 F6 | 	mov	local03, local04
0b0b4     01 AA 66 F0 | 	shl	local03, #1
0b0b8     56 AB 02 F1 | 	add	local03, local04
0b0bc     02 AA 66 F0 | 	shl	local03, #2
0b0c0     03 00 00 FF 
0b0c4     00 64 86 F1 | 	sub	objptr, ##1536
0b0c8     32 AB 02 F1 | 	add	local03, objptr
0b0cc     55 01 68 FC | 	wrlong	#0, local03
0b0d0     03 00 00 FF 
0b0d4     00 64 06 F1 | 	add	objptr, ##1536
0b0d8     32 AD 02 FB | 	rdlong	local04, objptr
0b0dc     01 AC 06 F1 | 	add	local04, #1
0b0e0     32 AD 62 FC | 	wrlong	local04, objptr
0b0e4     4C 00 00 FF 
0b0e8     20 64 86 F1 | 	sub	objptr, ##38944
0b0ec                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
0b0ec                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
0b0ec                 | ' return 0
0b0ec     00 7A 06 F6 | 	mov	result1, #0
0b0f0                 | LR__0952
0b0f0     E7 F0 03 F6 | 	mov	ptra, fp
0b0f4     F2 00 A0 FD | 	call	#popregs_
0b0f8                 | _compile_next_ret
0b0f8     2D 00 64 FD | 	ret
0b0fc                 | 
0b0fc                 | ' 
0b0fc                 | ' '----- compile 'gosub' command. Gosub is "goto" that saves the return address, so add token_gosub, then compile goto
0b0fc                 | ' 
0b0fc                 | ' function compile_gosub() as ulong
0b0fc                 | _compile_gosub
0b0fc     02 CA 05 F6 | 	mov	COUNT_, #2
0b100     E8 00 A0 FD | 	call	#pushregs_
0b104     4C 00 00 FF 
0b108     20 64 06 F1 | 	add	objptr, ##38944
0b10c     32 A7 02 FB | 	rdlong	local01, objptr
0b110     53 A9 02 F6 | 	mov	local02, local01
0b114     01 A8 66 F0 | 	shl	local02, #1
0b118     53 A9 02 F1 | 	add	local02, local01
0b11c     02 A8 66 F0 | 	shl	local02, #2
0b120     03 00 00 FF 
0b124     00 64 86 F1 | 	sub	objptr, ##1536
0b128     32 A9 02 F1 | 	add	local02, objptr
0b12c     08 A8 06 F1 | 	add	local02, #8
0b130     54 53 69 FC | 	wrlong	#169, local02
0b134     03 00 00 FF 
0b138     00 64 06 F1 | 	add	objptr, ##1536
0b13c     32 A9 02 FB | 	rdlong	local02, objptr
0b140     01 A8 06 F1 | 	add	local02, #1
0b144     32 A9 62 FC | 	wrlong	local02, objptr
0b148     4C 00 00 FF 
0b14c     20 64 86 F1 | 	sub	objptr, ##38944
0b150     0C 00 B0 FD | 	call	#_compile_goto
0b154                 | ' compiledline(lineptr).result_type=token_gosub
0b154                 | ' lineptr+=1
0b154                 | ' err=compile_goto()
0b154                 | ' return err
0b154     E7 F0 03 F6 | 	mov	ptra, fp
0b158     F2 00 A0 FD | 	call	#popregs_
0b15c                 | _compile_gosub_ret
0b15c     2D 00 64 FD | 	ret
0b160                 | 
0b160                 | ' 
0b160                 | ' '----- compile 'goto' 
0b160                 | ' 
0b160                 | ' function compile_goto() as ulong
0b160                 | _compile_goto
0b160     0A CA 05 F6 | 	mov	COUNT_, #10
0b164     E8 00 A0 FD | 	call	#pushregs_
0b168     34 F0 07 F1 | 	add	ptra, #52
0b16c                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 	' we have a goto to a constant
0b16c     38 00 00 FF 
0b170     E8 65 06 F1 | 	add	objptr, ##29160
0b174     32 97 02 FB | 	rdlong	arg03, objptr
0b178     03 96 66 F0 | 	shl	arg03, #3
0b17c     02 00 00 FF 
0b180     38 64 86 F1 | 	sub	objptr, ##1080
0b184     32 97 02 F1 | 	add	arg03, objptr
0b188     04 96 06 F1 | 	add	arg03, #4
0b18c     4B 97 02 FB | 	rdlong	arg03, arg03
0b190     01 00 00 FF 
0b194     00 96 0E F2 | 	cmp	arg03, ##512 wz
0b198     36 00 00 FF 
0b19c     B0 65 86 F1 | 	sub	objptr, ##28080
0b1a0     64 02 90 5D |  if_ne	jmp	#LR__0963
0b1a4     38 00 00 FF 
0b1a8     E8 65 06 F1 | 	add	objptr, ##29160
0b1ac     32 97 02 FB | 	rdlong	arg03, objptr
0b1b0     01 96 06 F1 | 	add	arg03, #1
0b1b4     03 96 66 F0 | 	shl	arg03, #3
0b1b8     02 00 00 FF 
0b1bc     38 64 86 F1 | 	sub	objptr, ##1080
0b1c0     32 97 02 F1 | 	add	arg03, objptr
0b1c4     04 96 06 F1 | 	add	arg03, #4
0b1c8     4B 97 02 FB | 	rdlong	arg03, arg03
0b1cc     FE 97 0E F2 | 	cmp	arg03, #510 wz
0b1d0     36 00 00 FF 
0b1d4     B0 65 86 F1 | 	sub	objptr, ##28080
0b1d8     2C 02 90 5D |  if_ne	jmp	#LR__0963
0b1dc     38 00 00 FF 
0b1e0     E8 65 06 F1 | 	add	objptr, ##29160
0b1e4     32 97 02 FB | 	rdlong	arg03, objptr
0b1e8     03 96 66 F0 | 	shl	arg03, #3
0b1ec     02 00 00 FF 
0b1f0     38 64 86 F1 | 	sub	objptr, ##1080
0b1f4     32 97 02 F1 | 	add	arg03, objptr
0b1f8     4B 93 02 FB | 	rdlong	arg01, arg03
0b1fc     00 94 06 F6 | 	mov	arg02, #0
0b200     36 00 00 FF 
0b204     B0 65 86 F1 | 	sub	objptr, ##28080
0b208     20 C5 B1 FD | 	call	#__system____builtin_atoi
0b20c     3D AD 02 F6 | 	mov	local04, result1
0b210     4C 00 00 FF 
0b214     20 64 06 F1 | 	add	objptr, ##38944
0b218     32 AF 02 FB | 	rdlong	local05, objptr
0b21c     57 B1 02 F6 | 	mov	local06, local05
0b220     01 B0 66 F0 | 	shl	local06, #1
0b224     57 B1 02 F1 | 	add	local06, local05
0b228     02 B0 66 F0 | 	shl	local06, #2
0b22c     03 00 00 FF 
0b230     00 64 86 F1 | 	sub	objptr, ##1536
0b234     32 B3 02 F6 | 	mov	local07, objptr
0b238     32 B1 02 F1 | 	add	local06, objptr
0b23c     08 B0 06 F1 | 	add	local06, #8
0b240     58 9D 68 FC | 	wrlong	#78, local06
0b244     03 00 00 FF 
0b248     0C 64 06 F1 | 	add	objptr, ##1548
0b24c     32 B5 02 FB | 	rdlong	local08, objptr
0b250                 | '   gotoline=val%(lparts(ct).part$) 
0b250                 | '   compiledline(lineptr).result_type=token_fast_goto
0b250                 | '   gotoptr=programstart 							    	' now try to find a pointer to goto
0b250                 | '   do
0b250     40 00 00 FF 
0b254     60 65 86 F1 | 	sub	objptr, ##33120
0b258                 | LR__0960
0b258     E7 92 02 F6 | 	mov	arg01, fp
0b25c     10 92 06 F1 | 	add	arg01, #16
0b260     5A 95 02 F6 | 	mov	arg02, local08
0b264     18 96 06 F6 | 	mov	arg03, #24
0b268     F8 87 B1 FD | 	call	#_psram4_spin2_read1
0b26c                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
0b26c                 | '     if gotoheader(0)<>$FFFFFFFF then
0b26c     10 CE 05 F1 | 	add	fp, #16
0b270     E7 B0 02 FB | 	rdlong	local06, fp
0b274     10 CE 85 F1 | 	sub	fp, #16
0b278     FF FF 7F FF 
0b27c     FF B1 0E F2 | 	cmp	local06, ##-1 wz
0b280     5A B7 02 56 |  if_ne	mov	local09, local08
0b284     24 CE 05 51 |  if_ne	add	fp, #36
0b288     E7 B4 02 5B |  if_ne	rdlong	local08, fp
0b28c     24 CE 85 51 |  if_ne	sub	fp, #36
0b290     24 CE 05 F1 | 	add	fp, #36
0b294     E7 B0 02 FB | 	rdlong	local06, fp
0b298     24 CE 85 F1 | 	sub	fp, #36
0b29c     FF FF 3F FF 
0b2a0     FF B1 0E F2 | 	cmp	local06, ##2147483647 wz
0b2a4     10 CE 05 51 |  if_ne	add	fp, #16
0b2a8     E7 AE 02 5B |  if_ne	rdlong	local05, fp
0b2ac     10 CE 85 51 |  if_ne	sub	fp, #16
0b2b0     FF FF 7F 5F 
0b2b4     FF AF 0E 52 |  if_ne	cmp	local05, ##-1 wz
0b2b8     10 CE 05 51 |  if_ne	add	fp, #16
0b2bc     57 B3 02 56 |  if_ne	mov	local07, local05
0b2c0     10 CE 85 51 |  if_ne	sub	fp, #16
0b2c4     56 B3 0A 52 |  if_ne	cmp	local07, local04 wz
0b2c8     8C FF 9F 5D |  if_ne	jmp	#LR__0960
0b2cc     0B 00 00 FF 
0b2d0     CC 64 86 F1 | 	sub	objptr, ##5836
0b2d4                 | '   if gotoheader(0)=gotoline then
0b2d4     10 CE 05 F1 | 	add	fp, #16
0b2d8     E7 B0 02 FB | 	rdlong	local06, fp
0b2dc     10 CE 85 F1 | 	sub	fp, #16
0b2e0     56 B1 0A F2 | 	cmp	local06, local04 wz
0b2e4     68 00 90 5D |  if_ne	jmp	#LR__0961
0b2e8     4C 00 00 FF 
0b2ec     20 64 06 F1 | 	add	objptr, ##38944
0b2f0     32 AF 02 FB | 	rdlong	local05, objptr
0b2f4     57 B1 02 F6 | 	mov	local06, local05
0b2f8     01 B0 66 F0 | 	shl	local06, #1
0b2fc     57 B1 02 F1 | 	add	local06, local05
0b300     02 B0 66 F0 | 	shl	local06, #2
0b304     03 00 00 FF 
0b308     00 64 86 F1 | 	sub	objptr, ##1536
0b30c     32 B1 02 F1 | 	add	local06, objptr
0b310     58 B7 62 FC | 	wrlong	local09, local06
0b314     03 00 00 FF 
0b318     00 64 06 F1 | 	add	objptr, ##1536
0b31c     32 AF 02 FB | 	rdlong	local05, objptr
0b320     57 B1 02 F6 | 	mov	local06, local05
0b324     01 B0 66 F0 | 	shl	local06, #1
0b328     57 B1 02 F1 | 	add	local06, local05
0b32c     02 B0 66 F0 | 	shl	local06, #2
0b330     03 00 00 FF 
0b334     00 64 86 F1 | 	sub	objptr, ##1536
0b338     32 B1 02 F1 | 	add	local06, objptr
0b33c     04 B0 06 F1 | 	add	local06, #4
0b340     58 AD 62 FC | 	wrlong	local04, local06
0b344     49 00 00 FF 
0b348     20 64 86 F1 | 	sub	objptr, ##37408
0b34c     98 00 90 FD | 	jmp	#LR__0962
0b350                 | LR__0961
0b350     4C 00 00 FF 
0b354     20 64 06 F1 | 	add	objptr, ##38944
0b358     32 AF 02 FB | 	rdlong	local05, objptr
0b35c     57 B1 02 F6 | 	mov	local06, local05
0b360     01 B0 66 F0 | 	shl	local06, #1
0b364     57 B1 02 F1 | 	add	local06, local05
0b368     02 B0 66 F0 | 	shl	local06, #2
0b36c     03 00 00 FF 
0b370     00 64 86 F1 | 	sub	objptr, ##1536
0b374     32 B1 02 F1 | 	add	local06, objptr
0b378     00 00 C0 FF 
0b37c     58 01 68 FC | 	wrlong	##-2147483648, local06
0b380     03 00 00 FF 
0b384     00 64 06 F1 | 	add	objptr, ##1536
0b388     32 AF 02 FB | 	rdlong	local05, objptr
0b38c     57 B1 02 F6 | 	mov	local06, local05
0b390     01 B0 66 F0 | 	shl	local06, #1
0b394     57 B1 02 F1 | 	add	local06, local05
0b398     02 B0 66 F0 | 	shl	local06, #2
0b39c     03 00 00 FF 
0b3a0     00 64 86 F1 | 	sub	objptr, ##1536
0b3a4     32 B1 02 F1 | 	add	local06, objptr
0b3a8     04 B0 06 F1 | 	add	local06, #4
0b3ac     58 AD 62 FC | 	wrlong	local04, local06
0b3b0     03 00 00 FF 
0b3b4     00 64 06 F1 | 	add	objptr, ##1536
0b3b8     32 AF 02 FB | 	rdlong	local05, objptr
0b3bc     57 B1 02 F6 | 	mov	local06, local05
0b3c0     01 B0 66 F0 | 	shl	local06, #1
0b3c4     57 B1 02 F1 | 	add	local06, local05
0b3c8     02 B0 66 F0 | 	shl	local06, #2
0b3cc     03 00 00 FF 
0b3d0     00 64 86 F1 | 	sub	objptr, ##1536
0b3d4     32 B1 02 F1 | 	add	local06, objptr
0b3d8     08 B0 06 F1 | 	add	local06, #8
0b3dc     58 A7 68 FC | 	wrlong	#83, local06
0b3e0     49 00 00 FF 
0b3e4     20 64 86 F1 | 	sub	objptr, ##37408
0b3e8                 | LR__0962
0b3e8     4C 00 00 FF 
0b3ec     20 64 06 F1 | 	add	objptr, ##38944
0b3f0     32 B7 02 FB | 	rdlong	local09, objptr
0b3f4     01 B6 06 F1 | 	add	local09, #1
0b3f8     32 B7 62 FC | 	wrlong	local09, objptr
0b3fc     4C 00 00 FF 
0b400     20 64 86 F1 | 	sub	objptr, ##38944
0b404     BC 00 90 FD | 	jmp	#LR__0964
0b408                 | LR__0963
0b408     4C 0A B0 FD | 	call	#_expr
0b40c     4F AA 06 F6 | 	mov	local03, #79
0b410     00 A6 06 F6 | 	mov	local01, #0
0b414     54 B9 02 F6 | 	mov	local10, local02
0b418     55 AF 02 F6 | 	mov	local05, local03
0b41c     4C 00 00 FF 
0b420     20 64 06 F1 | 	add	objptr, ##38944
0b424     32 A7 02 FB | 	rdlong	local01, objptr
0b428     53 B7 02 F6 | 	mov	local09, local01
0b42c     01 B6 66 F0 | 	shl	local09, #1
0b430     53 B7 02 F1 | 	add	local09, local01
0b434     02 B6 66 F0 | 	shl	local09, #2
0b438     03 00 00 FF 
0b43c     00 64 86 F1 | 	sub	objptr, ##1536
0b440     32 B7 02 F1 | 	add	local09, objptr
0b444     5B 01 68 FC | 	wrlong	#0, local09
0b448     03 00 00 FF 
0b44c     00 64 06 F1 | 	add	objptr, ##1536
0b450     32 A7 02 FB | 	rdlong	local01, objptr
0b454     53 B7 02 F6 | 	mov	local09, local01
0b458     01 B6 66 F0 | 	shl	local09, #1
0b45c     53 B7 02 F1 | 	add	local09, local01
0b460     02 B6 66 F0 | 	shl	local09, #2
0b464     03 00 00 FF 
0b468     00 64 86 F1 | 	sub	objptr, ##1536
0b46c     32 B7 02 F1 | 	add	local09, objptr
0b470     04 B6 06 F1 | 	add	local09, #4
0b474     5B B9 62 FC | 	wrlong	local10, local09
0b478     03 00 00 FF 
0b47c     00 64 06 F1 | 	add	objptr, ##1536
0b480     32 B9 02 FB | 	rdlong	local10, objptr
0b484     5C A7 02 F6 | 	mov	local01, local10
0b488     01 A6 66 F0 | 	shl	local01, #1
0b48c     5C A7 02 F1 | 	add	local01, local10
0b490     02 A6 66 F0 | 	shl	local01, #2
0b494     03 00 00 FF 
0b498     00 64 86 F1 | 	sub	objptr, ##1536
0b49c     32 A7 02 F1 | 	add	local01, objptr
0b4a0     08 A6 06 F1 | 	add	local01, #8
0b4a4     53 AF 62 FC | 	wrlong	local05, local01
0b4a8     03 00 00 FF 
0b4ac     00 64 06 F1 | 	add	objptr, ##1536
0b4b0     32 B9 02 FB | 	rdlong	local10, objptr
0b4b4     01 B8 06 F1 | 	add	local10, #1
0b4b8     32 B9 62 FC | 	wrlong	local10, objptr
0b4bc     4C 00 00 FF 
0b4c0     20 64 86 F1 | 	sub	objptr, ##38944
0b4c4                 | LR__0964
0b4c4                 | ' return 0
0b4c4     00 7A 06 F6 | 	mov	result1, #0
0b4c8     E7 F0 03 F6 | 	mov	ptra, fp
0b4cc     F2 00 A0 FD | 	call	#popregs_
0b4d0                 | _compile_goto_ret
0b4d0     2D 00 64 FD | 	ret
0b4d4                 | 
0b4d4                 | ' 
0b4d4                 | ' '----- compile 'on' (on..goto, on..gosub) 
0b4d4                 | ' 
0b4d4                 | ' function compile_on() as ulong
0b4d4                 | _compile_on
0b4d4     04 CA 05 F6 | 	mov	COUNT_, #4
0b4d8     E8 00 A0 FD | 	call	#pushregs_
0b4dc     78 09 B0 FD | 	call	#_expr
0b4e0     00 A6 06 F6 | 	mov	local01, #0
0b4e4     4C 00 00 FF 
0b4e8     20 64 06 F1 | 	add	objptr, ##38944
0b4ec     32 95 02 FB | 	rdlong	arg02, objptr
0b4f0     4A 93 02 F6 | 	mov	arg01, arg02
0b4f4     01 92 66 F0 | 	shl	arg01, #1
0b4f8     4A 93 02 F1 | 	add	arg01, arg02
0b4fc     02 92 66 F0 | 	shl	arg01, #2
0b500     03 00 00 FF 
0b504     00 64 86 F1 | 	sub	objptr, ##1536
0b508     32 93 02 F1 | 	add	arg01, objptr
0b50c     08 92 06 F1 | 	add	arg01, #8
0b510     49 83 69 FC | 	wrlong	#193, arg01
0b514     03 00 00 FF 
0b518     00 64 06 F1 | 	add	objptr, ##1536
0b51c     32 95 02 FB | 	rdlong	arg02, objptr
0b520     4A A9 02 F6 | 	mov	local02, arg02
0b524     01 94 06 F1 | 	add	arg02, #1
0b528     32 95 62 FC | 	wrlong	arg02, objptr
0b52c                 | ' expr()
0b52c                 | ' 'print lparts(ct).part$ 'ok
0b52c                 | ' numpar=0
0b52c                 | ' compiledline(lineptr).result_type=token_on : onlineptr=lineptr : lineptr+=1' we need onlineptr to save param# there
0b52c                 | ' if lparts(ct).part$="goto" then
0b52c     13 00 00 FF 
0b530     38 64 86 F1 | 	sub	objptr, ##9784
0b534     32 95 02 FB | 	rdlong	arg02, objptr
0b538     03 94 66 F0 | 	shl	arg02, #3
0b53c     02 00 00 FF 
0b540     38 64 86 F1 | 	sub	objptr, ##1080
0b544     32 95 02 F1 | 	add	arg02, objptr
0b548     4A 93 02 FB | 	rdlong	arg01, arg02
0b54c     96 01 00 FF 
0b550     96 94 06 F6 | 	mov	arg02, ##@LR__5936
0b554     36 00 00 FF 
0b558     B0 65 86 F1 | 	sub	objptr, ##28080
0b55c     A0 94 B1 FD | 	call	#__system___string_cmp
0b560     00 7A 0E F2 | 	cmp	result1, #0 wz
0b564     FC 01 90 5D |  if_ne	jmp	#LR__0975
0b568     38 00 00 FF 
0b56c     E8 65 06 F1 | 	add	objptr, ##29160
0b570     32 AB 02 FB | 	rdlong	local03, objptr
0b574     38 00 00 FF 
0b578     E8 65 86 F1 | 	sub	objptr, ##29160
0b57c     01 AA 06 F1 | 	add	local03, #1
0b580                 | '   i=ct+1
0b580                 | '   do
0b580                 | LR__0970
0b580                 | '     if lparts(i).token=token_decimal then
0b580     55 7B 02 F6 | 	mov	result1, local03
0b584     03 7A 66 F0 | 	shl	result1, #3
0b588     32 95 02 F6 | 	mov	arg02, objptr
0b58c     36 00 00 FF 
0b590     B0 95 06 F1 | 	add	arg02, ##28080
0b594     4A 7B 02 F1 | 	add	result1, arg02
0b598     04 7A 06 F1 | 	add	result1, #4
0b59c     3D 7B 02 FB | 	rdlong	result1, result1
0b5a0     01 00 00 FF 
0b5a4     00 7A 0E F2 | 	cmp	result1, ##512 wz
0b5a8     DC 00 90 5D |  if_ne	jmp	#LR__0971
0b5ac     4C 00 00 FF 
0b5b0     20 64 06 F1 | 	add	objptr, ##38944
0b5b4     32 7B 02 FB | 	rdlong	result1, objptr
0b5b8     3D 95 02 F6 | 	mov	arg02, result1
0b5bc     01 94 66 F0 | 	shl	arg02, #1
0b5c0     3D 95 02 F1 | 	add	arg02, result1
0b5c4     02 94 66 F0 | 	shl	arg02, #2
0b5c8     03 00 00 FF 
0b5cc     00 64 86 F1 | 	sub	objptr, ##1536
0b5d0     32 95 02 F1 | 	add	arg02, objptr
0b5d4     00 00 C0 FF 
0b5d8     4A 01 68 FC | 	wrlong	##-2147483648, arg02
0b5dc     03 00 00 FF 
0b5e0     00 64 06 F1 | 	add	objptr, ##1536
0b5e4     32 95 02 FB | 	rdlong	arg02, objptr
0b5e8     4A AD 02 F6 | 	mov	local04, arg02
0b5ec     01 AC 66 F0 | 	shl	local04, #1
0b5f0     4A AD 02 F1 | 	add	local04, arg02
0b5f4     02 AC 66 F0 | 	shl	local04, #2
0b5f8     03 00 00 FF 
0b5fc     00 64 86 F1 | 	sub	objptr, ##1536
0b600     32 AD 02 F1 | 	add	local04, objptr
0b604     55 95 02 F6 | 	mov	arg02, local03
0b608     03 94 66 F0 | 	shl	arg02, #3
0b60c     12 00 00 FF 
0b610     70 64 86 F1 | 	sub	objptr, ##9328
0b614     32 95 02 F1 | 	add	arg02, objptr
0b618     4A 93 02 FB | 	rdlong	arg01, arg02
0b61c     00 94 06 F6 | 	mov	arg02, #0
0b620     36 00 00 FF 
0b624     B0 65 86 F1 | 	sub	objptr, ##28080
0b628     00 C1 B1 FD | 	call	#__system____builtin_atoi
0b62c     04 AC 06 F1 | 	add	local04, #4
0b630     56 7B 62 FC | 	wrlong	result1, local04
0b634     4C 00 00 FF 
0b638     20 64 06 F1 | 	add	objptr, ##38944
0b63c     32 95 02 FB | 	rdlong	arg02, objptr
0b640     4A AD 02 F6 | 	mov	local04, arg02
0b644     01 AC 66 F0 | 	shl	local04, #1
0b648     4A AD 02 F1 | 	add	local04, arg02
0b64c     02 AC 66 F0 | 	shl	local04, #2
0b650     03 00 00 FF 
0b654     00 64 86 F1 | 	sub	objptr, ##1536
0b658     32 AD 02 F1 | 	add	local04, objptr
0b65c     08 AC 06 F1 | 	add	local04, #8
0b660     56 A7 68 FC | 	wrlong	#83, local04
0b664     03 00 00 FF 
0b668     00 64 06 F1 | 	add	objptr, ##1536
0b66c     32 AD 02 FB | 	rdlong	local04, objptr
0b670     01 AC 06 F1 | 	add	local04, #1
0b674     32 AD 62 FC | 	wrlong	local04, objptr
0b678     4C 00 00 FF 
0b67c     20 64 86 F1 | 	sub	objptr, ##38944
0b680     01 A6 06 F1 | 	add	local01, #1
0b684     08 00 90 FD | 	jmp	#LR__0972
0b688                 | LR__0971
0b688                 | '       return 17
0b688     11 7A 06 F6 | 	mov	result1, #17
0b68c     2C 04 90 FD | 	jmp	#LR__0985
0b690                 | LR__0972
0b690     01 AA 06 F1 | 	add	local03, #1
0b694                 | '     i+=1
0b694                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0b694     55 93 02 F6 | 	mov	arg01, local03
0b698     03 92 66 F0 | 	shl	arg01, #3
0b69c     32 AD 02 F6 | 	mov	local04, objptr
0b6a0     36 00 00 FF 
0b6a4     B0 AD 06 F1 | 	add	local04, ##28080
0b6a8     56 93 02 F1 | 	add	arg01, local04
0b6ac     04 92 06 F1 | 	add	arg01, #4
0b6b0     49 93 02 FB | 	rdlong	arg01, arg01
0b6b4     11 92 0E F2 | 	cmp	arg01, #17 wz
0b6b8     2C 00 90 AD |  if_e	jmp	#LR__0973
0b6bc     55 93 02 F6 | 	mov	arg01, local03
0b6c0     03 92 66 F0 | 	shl	arg01, #3
0b6c4     32 AD 02 F6 | 	mov	local04, objptr
0b6c8     36 00 00 FF 
0b6cc     B0 AD 06 F1 | 	add	local04, ##28080
0b6d0     56 93 02 F1 | 	add	arg01, local04
0b6d4     04 92 06 F1 | 	add	arg01, #4
0b6d8     49 AD 02 FB | 	rdlong	local04, arg01
0b6dc     FE AD 0E F2 | 	cmp	local04, #510 wz
0b6e0     15 7A 06 56 |  if_ne	mov	result1, #21
0b6e4     D4 03 90 5D |  if_ne	jmp	#LR__0985
0b6e8                 | LR__0973
0b6e8                 | '     if lparts(i).token=token_end then exit loop
0b6e8     55 7B 02 F6 | 	mov	result1, local03
0b6ec     03 7A 66 F0 | 	shl	result1, #3
0b6f0     32 AD 02 F6 | 	mov	local04, objptr
0b6f4     36 00 00 FF 
0b6f8     B0 AD 06 F1 | 	add	local04, ##28080
0b6fc     56 7B 02 F1 | 	add	result1, local04
0b700     04 7A 06 F1 | 	add	result1, #4
0b704     3D 7B 02 FB | 	rdlong	result1, result1
0b708     FE 7B 0E F2 | 	cmp	result1, #510 wz
0b70c     2C 00 90 AD |  if_e	jmp	#LR__0974
0b710     01 AA 06 F1 | 	add	local03, #1
0b714     55 7B 02 F6 | 	mov	result1, local03
0b718     03 7A 66 F0 | 	shl	result1, #3
0b71c     32 AD 02 F6 | 	mov	local04, objptr
0b720     36 00 00 FF 
0b724     B0 AD 06 F1 | 	add	local04, ##28080
0b728     56 7B 02 F1 | 	add	result1, local04
0b72c     04 7A 06 F1 | 	add	result1, #4
0b730     3D 7B 02 FB | 	rdlong	result1, result1
0b734     FE 7B 0E F2 | 	cmp	result1, #510 wz
0b738     44 FE 9F 5D |  if_ne	jmp	#LR__0970
0b73c                 | LR__0974
0b73c     54 AB 02 F6 | 	mov	local03, local02
0b740     01 AA 66 F0 | 	shl	local03, #1
0b744     54 AB 02 F1 | 	add	local03, local02
0b748     02 AA 66 F0 | 	shl	local03, #2
0b74c     32 AD 02 F6 | 	mov	local04, objptr
0b750     49 00 00 FF 
0b754     20 AC 06 F1 | 	add	local04, ##37408
0b758     56 AB 02 F1 | 	add	local03, local04
0b75c     04 AA 06 F1 | 	add	local03, #4
0b760     55 03 68 FC | 	wrlong	#1, local03
0b764                 | LR__0975
0b764                 | ' 
0b764                 | ' if lparts(ct).part$="gosub" then
0b764     38 00 00 FF 
0b768     E8 65 06 F1 | 	add	objptr, ##29160
0b76c     32 AB 02 FB | 	rdlong	local03, objptr
0b770     03 AA 66 F0 | 	shl	local03, #3
0b774     02 00 00 FF 
0b778     38 64 86 F1 | 	sub	objptr, ##1080
0b77c     32 AB 02 F1 | 	add	local03, objptr
0b780     55 93 02 FB | 	rdlong	arg01, local03
0b784     96 01 00 FF 
0b788     9B 94 06 F6 | 	mov	arg02, ##@LR__5937
0b78c     36 00 00 FF 
0b790     B0 65 86 F1 | 	sub	objptr, ##28080
0b794     68 92 B1 FD | 	call	#__system___string_cmp
0b798     00 7A 0E F2 | 	cmp	result1, #0 wz
0b79c     6C 02 90 5D |  if_ne	jmp	#LR__0981
0b7a0     38 00 00 FF 
0b7a4     E8 65 06 F1 | 	add	objptr, ##29160
0b7a8     32 AB 02 FB | 	rdlong	local03, objptr
0b7ac     38 00 00 FF 
0b7b0     E8 65 86 F1 | 	sub	objptr, ##29160
0b7b4     01 AA 06 F1 | 	add	local03, #1
0b7b8                 | '   i=ct+1
0b7b8                 | '   do
0b7b8                 | LR__0976
0b7b8                 | '     if lparts(i).token=token_decimal then
0b7b8     55 7B 02 F6 | 	mov	result1, local03
0b7bc     03 7A 66 F0 | 	shl	result1, #3
0b7c0     32 AD 02 F6 | 	mov	local04, objptr
0b7c4     36 00 00 FF 
0b7c8     B0 AD 06 F1 | 	add	local04, ##28080
0b7cc     56 7B 02 F1 | 	add	result1, local04
0b7d0     04 7A 06 F1 | 	add	result1, #4
0b7d4     3D 7B 02 FB | 	rdlong	result1, result1
0b7d8     01 00 00 FF 
0b7dc     00 7A 0E F2 | 	cmp	result1, ##512 wz
0b7e0     4C 01 90 5D |  if_ne	jmp	#LR__0977
0b7e4     4C 00 00 FF 
0b7e8     20 64 06 F1 | 	add	objptr, ##38944
0b7ec     32 7B 02 FB | 	rdlong	result1, objptr
0b7f0     3D AD 02 F6 | 	mov	local04, result1
0b7f4     01 AC 66 F0 | 	shl	local04, #1
0b7f8     3D AD 02 F1 | 	add	local04, result1
0b7fc     02 AC 66 F0 | 	shl	local04, #2
0b800     03 00 00 FF 
0b804     00 64 86 F1 | 	sub	objptr, ##1536
0b808     32 AD 02 F1 | 	add	local04, objptr
0b80c     08 AC 06 F1 | 	add	local04, #8
0b810     56 53 69 FC | 	wrlong	#169, local04
0b814     03 00 00 FF 
0b818     00 64 06 F1 | 	add	objptr, ##1536
0b81c     32 7B 02 FB | 	rdlong	result1, objptr
0b820     01 7A 06 F1 | 	add	result1, #1
0b824     32 7B 62 FC | 	wrlong	result1, objptr
0b828     3D AD 02 F6 | 	mov	local04, result1
0b82c     01 AC 66 F0 | 	shl	local04, #1
0b830     3D AD 02 F1 | 	add	local04, result1
0b834     02 AC 66 F0 | 	shl	local04, #2
0b838     03 00 00 FF 
0b83c     00 64 86 F1 | 	sub	objptr, ##1536
0b840     32 AD 02 F1 | 	add	local04, objptr
0b844     00 00 C0 FF 
0b848     56 01 68 FC | 	wrlong	##-2147483648, local04
0b84c     03 00 00 FF 
0b850     00 64 06 F1 | 	add	objptr, ##1536
0b854     32 7B 02 FB | 	rdlong	result1, objptr
0b858     3D AD 02 F6 | 	mov	local04, result1
0b85c     01 AC 66 F0 | 	shl	local04, #1
0b860     3D AD 02 F1 | 	add	local04, result1
0b864     02 AC 66 F0 | 	shl	local04, #2
0b868     03 00 00 FF 
0b86c     00 64 86 F1 | 	sub	objptr, ##1536
0b870     32 AD 02 F1 | 	add	local04, objptr
0b874     55 93 02 F6 | 	mov	arg01, local03
0b878     03 92 66 F0 | 	shl	arg01, #3
0b87c     12 00 00 FF 
0b880     70 64 86 F1 | 	sub	objptr, ##9328
0b884     32 93 02 F1 | 	add	arg01, objptr
0b888     49 93 02 FB | 	rdlong	arg01, arg01
0b88c     00 94 06 F6 | 	mov	arg02, #0
0b890     36 00 00 FF 
0b894     B0 65 86 F1 | 	sub	objptr, ##28080
0b898     90 BE B1 FD | 	call	#__system____builtin_atoi
0b89c     04 AC 06 F1 | 	add	local04, #4
0b8a0     56 7B 62 FC | 	wrlong	result1, local04
0b8a4     4C 00 00 FF 
0b8a8     20 64 06 F1 | 	add	objptr, ##38944
0b8ac     32 93 02 FB | 	rdlong	arg01, objptr
0b8b0     49 AD 02 F6 | 	mov	local04, arg01
0b8b4     01 AC 66 F0 | 	shl	local04, #1
0b8b8     49 AD 02 F1 | 	add	local04, arg01
0b8bc     02 AC 66 F0 | 	shl	local04, #2
0b8c0     03 00 00 FF 
0b8c4     00 64 86 F1 | 	sub	objptr, ##1536
0b8c8     32 AD 02 F1 | 	add	local04, objptr
0b8cc     08 AC 06 F1 | 	add	local04, #8
0b8d0     56 A7 68 FC | 	wrlong	#83, local04
0b8d4     03 00 00 FF 
0b8d8     00 64 06 F1 | 	add	objptr, ##1536
0b8dc     32 93 02 FB | 	rdlong	arg01, objptr
0b8e0     01 92 06 F1 | 	add	arg01, #1
0b8e4     32 93 62 FC | 	wrlong	arg01, objptr
0b8e8     01 A6 06 F1 | 	add	local01, #1
0b8ec     49 AD 02 F6 | 	mov	local04, arg01
0b8f0     01 AC 66 F0 | 	shl	local04, #1
0b8f4     49 AD 02 F1 | 	add	local04, arg01
0b8f8     02 AC 66 F0 | 	shl	local04, #2
0b8fc     03 00 00 FF 
0b900     00 64 86 F1 | 	sub	objptr, ##1536
0b904     32 AD 02 F1 | 	add	local04, objptr
0b908     08 AC 06 F1 | 	add	local04, #8
0b90c     56 5B 68 FC | 	wrlong	#45, local04
0b910     03 00 00 FF 
0b914     00 64 06 F1 | 	add	objptr, ##1536
0b918     32 AD 02 FB | 	rdlong	local04, objptr
0b91c     01 AC 06 F1 | 	add	local04, #1
0b920     32 AD 62 FC | 	wrlong	local04, objptr
0b924     4C 00 00 FF 
0b928     20 64 86 F1 | 	sub	objptr, ##38944
0b92c     08 00 90 FD | 	jmp	#LR__0978
0b930                 | LR__0977
0b930                 | '       return 17
0b930     11 7A 06 F6 | 	mov	result1, #17
0b934     84 01 90 FD | 	jmp	#LR__0985
0b938                 | LR__0978
0b938     01 AA 06 F1 | 	add	local03, #1
0b93c                 | '     i+=1
0b93c                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0b93c     55 93 02 F6 | 	mov	arg01, local03
0b940     03 92 66 F0 | 	shl	arg01, #3
0b944     32 AD 02 F6 | 	mov	local04, objptr
0b948     36 00 00 FF 
0b94c     B0 AD 06 F1 | 	add	local04, ##28080
0b950     56 93 02 F1 | 	add	arg01, local04
0b954     04 92 06 F1 | 	add	arg01, #4
0b958     49 93 02 FB | 	rdlong	arg01, arg01
0b95c     11 92 0E F2 | 	cmp	arg01, #17 wz
0b960     2C 00 90 AD |  if_e	jmp	#LR__0979
0b964     55 93 02 F6 | 	mov	arg01, local03
0b968     03 92 66 F0 | 	shl	arg01, #3
0b96c     32 AD 02 F6 | 	mov	local04, objptr
0b970     36 00 00 FF 
0b974     B0 AD 06 F1 | 	add	local04, ##28080
0b978     56 93 02 F1 | 	add	arg01, local04
0b97c     04 92 06 F1 | 	add	arg01, #4
0b980     49 93 02 FB | 	rdlong	arg01, arg01
0b984     FE 93 0E F2 | 	cmp	arg01, #510 wz
0b988     15 7A 06 56 |  if_ne	mov	result1, #21
0b98c     2C 01 90 5D |  if_ne	jmp	#LR__0985
0b990                 | LR__0979
0b990                 | '     if lparts(i).token=token_end then exit loop
0b990     55 7B 02 F6 | 	mov	result1, local03
0b994     03 7A 66 F0 | 	shl	result1, #3
0b998     32 AD 02 F6 | 	mov	local04, objptr
0b99c     36 00 00 FF 
0b9a0     B0 AD 06 F1 | 	add	local04, ##28080
0b9a4     56 7B 02 F1 | 	add	result1, local04
0b9a8     04 7A 06 F1 | 	add	result1, #4
0b9ac     3D 7B 02 FB | 	rdlong	result1, result1
0b9b0     FE 7B 0E F2 | 	cmp	result1, #510 wz
0b9b4     2C 00 90 AD |  if_e	jmp	#LR__0980
0b9b8     01 AA 06 F1 | 	add	local03, #1
0b9bc     55 7B 02 F6 | 	mov	result1, local03
0b9c0     03 7A 66 F0 | 	shl	result1, #3
0b9c4     32 AD 02 F6 | 	mov	local04, objptr
0b9c8     36 00 00 FF 
0b9cc     B0 AD 06 F1 | 	add	local04, ##28080
0b9d0     56 7B 02 F1 | 	add	result1, local04
0b9d4     04 7A 06 F1 | 	add	result1, #4
0b9d8     3D 7B 02 FB | 	rdlong	result1, result1
0b9dc     FE 7B 0E F2 | 	cmp	result1, #510 wz
0b9e0     D4 FD 9F 5D |  if_ne	jmp	#LR__0976
0b9e4                 | LR__0980
0b9e4     54 AB 02 F6 | 	mov	local03, local02
0b9e8     01 AA 66 F0 | 	shl	local03, #1
0b9ec     54 AB 02 F1 | 	add	local03, local02
0b9f0     02 AA 66 F0 | 	shl	local03, #2
0b9f4     32 AD 02 F6 | 	mov	local04, objptr
0b9f8     49 00 00 FF 
0b9fc     20 AC 06 F1 | 	add	local04, ##37408
0ba00     56 AB 02 F1 | 	add	local03, local04
0ba04     04 AA 06 F1 | 	add	local03, #4
0ba08     55 07 68 FC | 	wrlong	#3, local03
0ba0c                 | LR__0981
0ba0c     54 AB 02 F6 | 	mov	local03, local02
0ba10     01 AA 66 F0 | 	shl	local03, #1
0ba14     54 AB 02 F1 | 	add	local03, local02
0ba18     02 AA 66 F0 | 	shl	local03, #2
0ba1c     49 00 00 FF 
0ba20     20 64 06 F1 | 	add	objptr, ##37408
0ba24     32 AB 02 F1 | 	add	local03, objptr
0ba28     55 A7 62 FC | 	wrlong	local01, local03
0ba2c                 | ' compiledline(onlineptr).result.uresult=numpar
0ba2c                 | ' for i=lineptr to onlineptr step -1 : if compiledline(i).result_type=token_skip then compiledline(i).result.uresult=lineptr-2
0ba2c     03 00 00 FF 
0ba30     00 64 06 F1 | 	add	objptr, ##1536
0ba34     32 AB 02 FB | 	rdlong	local03, objptr
0ba38     4C 00 00 FF 
0ba3c     20 64 86 F1 | 	sub	objptr, ##38944
0ba40     D7 3A 48 FB | 	callpa	#(@LR__0984-@LR__0982)>>2,fcache_load_ptr_
0ba44                 | LR__0982
0ba44     55 AD 02 F6 | 	mov	local04, local03
0ba48     01 AC 66 F0 | 	shl	local04, #1
0ba4c     55 AD 02 F1 | 	add	local04, local03
0ba50     02 AC 66 F0 | 	shl	local04, #2
0ba54     32 A7 02 F6 | 	mov	local01, objptr
0ba58     49 00 00 FF 
0ba5c     20 A6 06 F1 | 	add	local01, ##37408
0ba60     53 AD 02 F1 | 	add	local04, local01
0ba64     08 AC 06 F1 | 	add	local04, #8
0ba68     56 AD 02 FB | 	rdlong	local04, local04
0ba6c     2D AC 0E F2 | 	cmp	local04, #45 wz
0ba70     38 00 90 5D |  if_ne	jmp	#LR__0983
0ba74     55 AD 02 F6 | 	mov	local04, local03
0ba78     01 AC 66 F0 | 	shl	local04, #1
0ba7c     55 AD 02 F1 | 	add	local04, local03
0ba80     02 AC 66 F0 | 	shl	local04, #2
0ba84     49 00 00 FF 
0ba88     20 64 06 F1 | 	add	objptr, ##37408
0ba8c     32 AD 02 F1 | 	add	local04, objptr
0ba90     03 00 00 FF 
0ba94     00 64 06 F1 | 	add	objptr, ##1536
0ba98     32 A7 02 FB | 	rdlong	local01, objptr
0ba9c     4C 00 00 FF 
0baa0     20 64 86 F1 | 	sub	objptr, ##38944
0baa4     02 A6 86 F1 | 	sub	local01, #2
0baa8     56 A7 62 FC | 	wrlong	local01, local04
0baac                 | LR__0983
0baac     01 AA 86 F1 | 	sub	local03, #1
0bab0     54 AB 52 F2 | 	cmps	local03, local02 wc
0bab4     8C FF 9F 3D |  if_ae	jmp	#LR__0982
0bab8                 | LR__0984
0bab8                 | ' return 0
0bab8     00 7A 06 F6 | 	mov	result1, #0
0babc                 | LR__0985
0babc     E7 F0 03 F6 | 	mov	ptra, fp
0bac0     F2 00 A0 FD | 	call	#popregs_
0bac4                 | _compile_on_ret
0bac4     2D 00 64 FD | 	ret
0bac8                 | 
0bac8                 | ' 
0bac8                 | ' '----- A helper for compile_input and compile_read
0bac8                 | '  
0bac8                 | ' function getaddr() as ulong
0bac8                 | _getaddr
0bac8     0B CA 05 F6 | 	mov	COUNT_, #11
0bacc     E8 00 A0 FD | 	call	#pushregs_
0bad0     38 00 00 FF 
0bad4     E8 65 06 F1 | 	add	objptr, ##29160
0bad8     32 AD 02 FB | 	rdlong	local04, objptr
0badc     03 AC 66 F0 | 	shl	local04, #3
0bae0     02 00 00 FF 
0bae4     38 64 86 F1 | 	sub	objptr, ##1080
0bae8     32 AD 02 F1 | 	add	local04, objptr
0baec     56 AF 02 FB | 	rdlong	local05, local04
0baf0     01 B0 66 F6 | 	neg	local06, #1
0baf4                 | ' 
0baf4                 | ' varname$=lparts(ct).part$
0baf4                 | ' j=-1
0baf4                 | ' 
0baf4                 | ' for i=0 to varnum-1
0baf4     00 B2 06 F6 | 	mov	local07, #0
0baf8     04 64 86 F1 | 	sub	objptr, #4
0bafc     32 B5 02 FB | 	rdlong	local08, objptr
0bb00     36 00 00 FF 
0bb04     AC 65 86 F1 | 	sub	objptr, ##28076
0bb08                 | LR__0990
0bb08     5A B3 52 F2 | 	cmps	local07, local08 wc
0bb0c     34 00 90 3D |  if_ae	jmp	#LR__0991
0bb10                 | '   if variables(i).name=varname$ then j=i : exit
0bb10     59 AD 02 F6 | 	mov	local04, local07
0bb14     04 AC 66 F0 | 	shl	local04, #4
0bb18     32 95 02 F6 | 	mov	arg02, objptr
0bb1c     16 00 00 FF 
0bb20     9C 95 06 F1 | 	add	arg02, ##11676
0bb24     4A AD 02 F1 | 	add	local04, arg02
0bb28     56 93 02 FB | 	rdlong	arg01, local04
0bb2c     57 95 02 F6 | 	mov	arg02, local05
0bb30     CC 8E B1 FD | 	call	#__system___string_cmp
0bb34     00 7A 0E F2 | 	cmp	result1, #0 wz
0bb38     59 B1 02 A6 |  if_e	mov	local06, local07
0bb3c     01 B2 06 51 |  if_ne	add	local07, #1
0bb40     C4 FF 9F 5D |  if_ne	jmp	#LR__0990
0bb44                 | LR__0991
0bb44                 | ' if  j=-1 andalso varnum<maxvars then   
0bb44     FF FF 7F FF 
0bb48     FF B1 0E F2 | 	cmp	local06, ##-1 wz
0bb4c     A8 00 90 5D |  if_ne	jmp	#LR__0992
0bb50     36 00 00 FF 
0bb54     AC 65 06 F1 | 	add	objptr, ##28076
0bb58     32 B5 02 FB | 	rdlong	local08, objptr
0bb5c     36 00 00 FF 
0bb60     AC 65 86 F1 | 	sub	objptr, ##28076
0bb64     02 00 00 FF 
0bb68     00 B4 56 F2 | 	cmps	local08, ##1024 wc
0bb6c     88 00 90 3D |  if_ae	jmp	#LR__0992
0bb70     36 00 00 FF 
0bb74     AC 65 06 F1 | 	add	objptr, ##28076
0bb78     32 AD 02 FB | 	rdlong	local04, objptr
0bb7c     04 AC 66 F0 | 	shl	local04, #4
0bb80     20 00 00 FF 
0bb84     10 64 86 F1 | 	sub	objptr, ##16400
0bb88     32 AD 02 F1 | 	add	local04, objptr
0bb8c     56 AF 62 FC | 	wrlong	local05, local04
0bb90     20 00 00 FF 
0bb94     10 64 06 F1 | 	add	objptr, ##16400
0bb98     32 AD 02 FB | 	rdlong	local04, objptr
0bb9c     04 AC 66 F0 | 	shl	local04, #4
0bba0     20 00 00 FF 
0bba4     10 64 86 F1 | 	sub	objptr, ##16400
0bba8     32 AD 02 F1 | 	add	local04, objptr
0bbac     04 AC 06 F1 | 	add	local04, #4
0bbb0     56 01 68 FC | 	wrlong	#0, local04
0bbb4     20 00 00 FF 
0bbb8     10 64 06 F1 | 	add	objptr, ##16400
0bbbc     32 AD 02 FB | 	rdlong	local04, objptr
0bbc0     04 AC 66 F0 | 	shl	local04, #4
0bbc4     20 00 00 FF 
0bbc8     10 64 86 F1 | 	sub	objptr, ##16400
0bbcc     32 AD 02 F1 | 	add	local04, objptr
0bbd0     0C AC 06 F1 | 	add	local04, #12
0bbd4     56 39 68 FC | 	wrlong	#28, local04
0bbd8     20 00 00 FF 
0bbdc     10 64 06 F1 | 	add	objptr, ##16400
0bbe0     32 B5 02 FB | 	rdlong	local08, objptr
0bbe4     5A B1 02 F6 | 	mov	local06, local08
0bbe8     01 B4 06 F1 | 	add	local08, #1
0bbec     32 B5 62 FC | 	wrlong	local08, objptr
0bbf0     36 00 00 FF 
0bbf4     AC 65 86 F1 | 	sub	objptr, ##28076
0bbf8                 | LR__0992
0bbf8     00 B2 06 F6 | 	mov	local07, #0
0bbfc                 | ' numpar=0
0bbfc                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0bbfc     38 00 00 FF 
0bc00     E8 65 06 F1 | 	add	objptr, ##29160
0bc04     32 AD 02 FB | 	rdlong	local04, objptr
0bc08     01 AC 06 F1 | 	add	local04, #1
0bc0c     03 AC 66 F0 | 	shl	local04, #3
0bc10     02 00 00 FF 
0bc14     38 64 86 F1 | 	sub	objptr, ##1080
0bc18     32 AD 02 F1 | 	add	local04, objptr
0bc1c     04 AC 06 F1 | 	add	local04, #4
0bc20     56 B5 02 FB | 	rdlong	local08, local04
0bc24     15 B4 0E F2 | 	cmp	local08, #21 wz
0bc28     36 00 00 FF 
0bc2c     B0 65 86 F1 | 	sub	objptr, ##28080
0bc30     54 01 90 5D |  if_ne	jmp	#LR__0997
0bc34     38 00 00 FF 
0bc38     E8 65 06 F1 | 	add	objptr, ##29160
0bc3c     32 B7 02 FB | 	rdlong	local09, objptr
0bc40     01 B6 06 F1 | 	add	local09, #1
0bc44     32 B7 62 FC | 	wrlong	local09, objptr
0bc48     38 00 00 FF 
0bc4c     E8 65 86 F1 | 	sub	objptr, ##29160
0bc50                 | '   ct+=1 											' omit this lpar, this is for expr list
0bc50                 | '   do
0bc50                 | LR__0993
0bc50     38 00 00 FF 
0bc54     E8 65 06 F1 | 	add	objptr, ##29160
0bc58     32 AD 02 FB | 	rdlong	local04, objptr
0bc5c     01 AC 06 F1 | 	add	local04, #1
0bc60     32 AD 62 FC | 	wrlong	local04, objptr
0bc64                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0bc64                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0bc64     03 AC 66 F0 | 	shl	local04, #3
0bc68     02 00 00 FF 
0bc6c     38 64 86 F1 | 	sub	objptr, ##1080
0bc70     32 AD 02 F1 | 	add	local04, objptr
0bc74     04 AC 06 F1 | 	add	local04, #4
0bc78     56 B7 02 FB | 	rdlong	local09, local04
0bc7c     15 B6 0E F2 | 	cmp	local09, #21 wz
0bc80     36 00 00 FF 
0bc84     B0 65 86 F1 | 	sub	objptr, ##28080
0bc88     44 00 90 5D |  if_ne	jmp	#LR__0994
0bc8c     38 00 00 FF 
0bc90     E8 65 06 F1 | 	add	objptr, ##29160
0bc94     32 B7 02 FB | 	rdlong	local09, objptr
0bc98     01 B6 06 F1 | 	add	local09, #1
0bc9c     32 B7 62 FC | 	wrlong	local09, objptr
0bca0     38 00 00 FF 
0bca4     E8 65 86 F1 | 	sub	objptr, ##29160
0bca8     AC 01 B0 FD | 	call	#_expr
0bcac     3D B9 02 F6 | 	mov	local10, result1
0bcb0     38 00 00 FF 
0bcb4     E8 65 06 F1 | 	add	objptr, ##29160
0bcb8     32 B7 02 FB | 	rdlong	local09, objptr
0bcbc     01 B6 06 F1 | 	add	local09, #1
0bcc0     32 B7 62 FC | 	wrlong	local09, objptr
0bcc4     38 00 00 FF 
0bcc8     E8 65 86 F1 | 	sub	objptr, ##29160
0bccc     08 00 90 FD | 	jmp	#LR__0995
0bcd0                 | LR__0994
0bcd0     84 01 B0 FD | 	call	#_expr
0bcd4     3D B9 02 F6 | 	mov	local10, result1
0bcd8                 | LR__0995
0bcd8                 | '     if err>0 then return err
0bcd8     01 B8 56 F2 | 	cmps	local10, #1 wc
0bcdc     5C 7B 02 36 |  if_ae	mov	result1, local10
0bce0     68 01 90 3D |  if_ae	jmp	#LR__0998
0bce4     01 B2 06 F1 | 	add	local07, #1
0bce8     38 00 00 FF 
0bcec     E8 65 06 F1 | 	add	objptr, ##29160
0bcf0     32 AD 02 FB | 	rdlong	local04, objptr
0bcf4     03 AC 66 F0 | 	shl	local04, #3
0bcf8     02 00 00 FF 
0bcfc     38 64 86 F1 | 	sub	objptr, ##1080
0bd00     32 AD 02 F1 | 	add	local04, objptr
0bd04     04 AC 06 F1 | 	add	local04, #4
0bd08     56 B9 02 FB | 	rdlong	local10, local04
0bd0c     14 B8 0E F2 | 	cmp	local10, #20 wz
0bd10     36 00 00 FF 
0bd14     B0 65 86 F1 | 	sub	objptr, ##28080
0bd18     34 00 90 AD |  if_e	jmp	#LR__0996
0bd1c     38 00 00 FF 
0bd20     E8 65 06 F1 | 	add	objptr, ##29160
0bd24     32 B9 02 FB | 	rdlong	local10, objptr
0bd28     03 B8 66 F0 | 	shl	local10, #3
0bd2c     02 00 00 FF 
0bd30     38 64 86 F1 | 	sub	objptr, ##1080
0bd34     32 B9 02 F1 | 	add	local10, objptr
0bd38     04 B8 06 F1 | 	add	local10, #4
0bd3c     5C B9 02 FB | 	rdlong	local10, local10
0bd40     FE B9 0E F2 | 	cmp	local10, #510 wz
0bd44     36 00 00 FF 
0bd48     B0 65 86 F1 | 	sub	objptr, ##28080
0bd4c     00 FF 9F 5D |  if_ne	jmp	#LR__0993
0bd50                 | LR__0996
0bd50                 | '     if lparts(ct).token=token_end then return 14
0bd50     38 00 00 FF 
0bd54     E8 65 06 F1 | 	add	objptr, ##29160
0bd58     32 AD 02 FB | 	rdlong	local04, objptr
0bd5c     03 AC 66 F0 | 	shl	local04, #3
0bd60     02 00 00 FF 
0bd64     38 64 86 F1 | 	sub	objptr, ##1080
0bd68     32 AD 02 F1 | 	add	local04, objptr
0bd6c     04 AC 06 F1 | 	add	local04, #4
0bd70     56 B9 02 FB | 	rdlong	local10, local04
0bd74     FE B9 0E F2 | 	cmp	local10, #510 wz
0bd78     36 00 00 FF 
0bd7c     B0 65 86 F1 | 	sub	objptr, ##28080
0bd80     0E 7A 06 A6 |  if_e	mov	result1, #14
0bd84     C4 00 90 AD |  if_e	jmp	#LR__0998
0bd88                 | LR__0997
0bd88     59 A9 02 F6 | 	mov	local02, local07
0bd8c     12 AA 06 F6 | 	mov	local03, #18
0bd90     58 A7 02 F6 | 	mov	local01, local06
0bd94     53 B7 02 F6 | 	mov	local09, local01
0bd98     54 BB 02 F6 | 	mov	local11, local02
0bd9c     55 A7 02 F6 | 	mov	local01, local03
0bda0     4C 00 00 FF 
0bda4     20 64 06 F1 | 	add	objptr, ##38944
0bda8     32 B9 02 FB | 	rdlong	local10, objptr
0bdac     5C B3 02 F6 | 	mov	local07, local10
0bdb0     01 B2 66 F0 | 	shl	local07, #1
0bdb4     5C B3 02 F1 | 	add	local07, local10
0bdb8     02 B2 66 F0 | 	shl	local07, #2
0bdbc     03 00 00 FF 
0bdc0     00 64 86 F1 | 	sub	objptr, ##1536
0bdc4     32 B3 02 F1 | 	add	local07, objptr
0bdc8     59 B7 62 FC | 	wrlong	local09, local07
0bdcc     03 00 00 FF 
0bdd0     00 64 06 F1 | 	add	objptr, ##1536
0bdd4     32 B9 02 FB | 	rdlong	local10, objptr
0bdd8     5C B7 02 F6 | 	mov	local09, local10
0bddc     01 B6 66 F0 | 	shl	local09, #1
0bde0     5C B7 02 F1 | 	add	local09, local10
0bde4     02 B6 66 F0 | 	shl	local09, #2
0bde8     03 00 00 FF 
0bdec     00 64 86 F1 | 	sub	objptr, ##1536
0bdf0     32 B7 02 F1 | 	add	local09, objptr
0bdf4     04 B6 06 F1 | 	add	local09, #4
0bdf8     5B BB 62 FC | 	wrlong	local11, local09
0bdfc     03 00 00 FF 
0be00     00 64 06 F1 | 	add	objptr, ##1536
0be04     32 BB 02 FB | 	rdlong	local11, objptr
0be08     5D B9 02 F6 | 	mov	local10, local11
0be0c     01 B8 66 F0 | 	shl	local10, #1
0be10     5D B9 02 F1 | 	add	local10, local11
0be14     02 B8 66 F0 | 	shl	local10, #2
0be18     03 00 00 FF 
0be1c     00 64 86 F1 | 	sub	objptr, ##1536
0be20     32 B9 02 F1 | 	add	local10, objptr
0be24     08 B8 06 F1 | 	add	local10, #8
0be28     5C A7 62 FC | 	wrlong	local01, local10
0be2c     03 00 00 FF 
0be30     00 64 06 F1 | 	add	objptr, ##1536
0be34     32 B7 02 FB | 	rdlong	local09, objptr
0be38     01 B6 06 F1 | 	add	local09, #1
0be3c     32 B7 62 FC | 	wrlong	local09, objptr
0be40     4C 00 00 FF 
0be44     20 64 86 F1 | 	sub	objptr, ##38944
0be48                 | ' t2.result.twowords(1)=numpar
0be48                 | ' t2.result_type=fun_getaddr:t2.result.twowords(0)=j
0be48                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0be48                 | ' return 0
0be48     00 7A 06 F6 | 	mov	result1, #0
0be4c                 | LR__0998
0be4c     E7 F0 03 F6 | 	mov	ptra, fp
0be50     F2 00 A0 FD | 	call	#popregs_
0be54                 | _getaddr_ret
0be54     2D 00 64 FD | 	ret
0be58                 | 
0be58                 | ' 
0be58                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0be58                 | ' '--------------------------------------------- 
0be58                 | ' 
0be58                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0be58                 | ' '------------------------------------------ The end of the precompiler  ----------------------------------------------------------------
0be58                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0be58                 | ' 
0be58                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0be58                 | ' '
0be58                 | ' '     			   	    COMPILE TIME EXPRESSION DECODER/EVALUATOR
0be58                 | ' '
0be58                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0be58                 | ' 
0be58                 | ' function expr() as ulong 
0be58                 | _expr
0be58     07 CA 05 F6 | 	mov	COUNT_, #7
0be5c     E8 00 A0 FD | 	call	#pushregs_
0be60                 | _expr_enter
0be60     38 00 00 FF 
0be64     E8 65 06 F1 | 	add	objptr, ##29160
0be68     32 AD 02 FB | 	rdlong	local04, objptr
0be6c     03 AC 66 F0 | 	shl	local04, #3
0be70     02 00 00 FF 
0be74     38 64 86 F1 | 	sub	objptr, ##1080
0be78     32 AD 02 F1 | 	add	local04, objptr
0be7c     04 AC 06 F1 | 	add	local04, #4
0be80     56 AF 02 FB | 	rdlong	local05, local04
0be84                 | ' 
0be84                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
0be84     FE AF 0E F2 | 	cmp	local05, #510 wz
0be88     36 00 00 FF 
0be8c     B0 65 86 F1 | 	sub	objptr, ##28080
0be90     C4 00 90 5D |  if_ne	jmp	#LR__1000
0be94     1D A6 06 F6 | 	mov	local01, #29
0be98     FF AA 06 F6 | 	mov	local03, #255
0be9c     53 B1 02 F6 | 	mov	local06, local01
0bea0     54 B3 02 F6 | 	mov	local07, local02
0bea4     55 A7 02 F6 | 	mov	local01, local03
0bea8     4C 00 00 FF 
0beac     20 64 06 F1 | 	add	objptr, ##38944
0beb0     32 AF 02 FB | 	rdlong	local05, objptr
0beb4     57 AD 02 F6 | 	mov	local04, local05
0beb8     01 AC 66 F0 | 	shl	local04, #1
0bebc     57 AD 02 F1 | 	add	local04, local05
0bec0     02 AC 66 F0 | 	shl	local04, #2
0bec4     03 00 00 FF 
0bec8     00 64 86 F1 | 	sub	objptr, ##1536
0becc     32 AD 02 F1 | 	add	local04, objptr
0bed0     56 B1 62 FC | 	wrlong	local06, local04
0bed4     03 00 00 FF 
0bed8     00 64 06 F1 | 	add	objptr, ##1536
0bedc     32 B1 02 FB | 	rdlong	local06, objptr
0bee0     58 AF 02 F6 | 	mov	local05, local06
0bee4     01 AE 66 F0 | 	shl	local05, #1
0bee8     58 AF 02 F1 | 	add	local05, local06
0beec     02 AE 66 F0 | 	shl	local05, #2
0bef0     03 00 00 FF 
0bef4     00 64 86 F1 | 	sub	objptr, ##1536
0bef8     32 AF 02 F1 | 	add	local05, objptr
0befc     04 AE 06 F1 | 	add	local05, #4
0bf00     57 B3 62 FC | 	wrlong	local07, local05
0bf04     03 00 00 FF 
0bf08     00 64 06 F1 | 	add	objptr, ##1536
0bf0c     32 B3 02 FB | 	rdlong	local07, objptr
0bf10     59 B1 02 F6 | 	mov	local06, local07
0bf14     01 B0 66 F0 | 	shl	local06, #1
0bf18     59 B1 02 F1 | 	add	local06, local07
0bf1c     02 B0 66 F0 | 	shl	local06, #2
0bf20     03 00 00 FF 
0bf24     00 64 86 F1 | 	sub	objptr, ##1536
0bf28     32 B1 02 F1 | 	add	local06, objptr
0bf2c     08 B0 06 F1 | 	add	local06, #8
0bf30     58 A7 62 FC | 	wrlong	local01, local06
0bf34     03 00 00 FF 
0bf38     00 64 06 F1 | 	add	objptr, ##1536
0bf3c     32 B1 02 FB | 	rdlong	local06, objptr
0bf40     01 B0 06 F1 | 	add	local06, #1
0bf44     32 B1 62 FC | 	wrlong	local06, objptr
0bf48     4C 00 00 FF 
0bf4c     20 64 86 F1 | 	sub	objptr, ##38944
0bf50     1D 7A 06 F6 | 	mov	result1, #29
0bf54     64 01 90 FD | 	jmp	#LR__1003
0bf58                 | LR__1000
0bf58     00 A6 06 F6 | 	mov	local01, #0
0bf5c     68 01 B0 FD | 	call	#_addsub
0bf60                 | ' t3.result.uresult=0
0bf60                 | ' err=addsub()             			' call higher priority operator check. It will itself call muldiv, which then calls getval/getvar 
0bf60                 | ' if err>0 then return err
0bf60     01 7A 16 F2 | 	cmp	result1, #1 wc
0bf64     54 01 90 3D |  if_ae	jmp	#LR__1003
0bf68     38 00 00 FF 
0bf6c     E8 65 06 F1 | 	add	objptr, ##29160
0bf70     32 AD 02 FB | 	rdlong	local04, objptr
0bf74     03 AC 66 F0 | 	shl	local04, #3
0bf78     02 00 00 FF 
0bf7c     38 64 86 F1 | 	sub	objptr, ##1080
0bf80     32 AD 02 F1 | 	add	local04, objptr
0bf84     04 AC 06 F1 | 	add	local04, #4
0bf88     56 AF 02 FB | 	rdlong	local05, local04
0bf8c                 | ' op = lparts(ct).token				' Lowest priority : comparison operators
0bf8c                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
0bf8c     36 00 00 FF 
0bf90     B0 65 86 F1 | 	sub	objptr, ##28080
0bf94                 | LR__1001
0bf94     1B AE 0E F2 | 	cmp	local05, #27 wz
0bf98     0F AE 0E 52 |  if_ne	cmp	local05, #15 wz
0bf9c     10 AE 0E 52 |  if_ne	cmp	local05, #16 wz
0bfa0     27 AE 0E 52 |  if_ne	cmp	local05, #39 wz
0bfa4     26 AE 0E 52 |  if_ne	cmp	local05, #38 wz
0bfa8     2A AE 0E 52 |  if_ne	cmp	local05, #42 wz
0bfac     08 01 90 5D |  if_ne	jmp	#LR__1002
0bfb0     38 00 00 FF 
0bfb4     E8 65 06 F1 | 	add	objptr, ##29160
0bfb8     32 B1 02 FB | 	rdlong	local06, objptr
0bfbc     01 B0 06 F1 | 	add	local06, #1
0bfc0     32 B1 62 FC | 	wrlong	local06, objptr
0bfc4     38 00 00 FF 
0bfc8     E8 65 86 F1 | 	sub	objptr, ##29160
0bfcc     F8 00 B0 FD | 	call	#_addsub
0bfd0                 | '   ct+=1
0bfd0                 | '   err=addsub() : if err>0 then return err
0bfd0     01 7A 16 F2 | 	cmp	result1, #1 wc
0bfd4     E4 00 90 3D |  if_ae	jmp	#LR__1003
0bfd8     57 AB 02 F6 | 	mov	local03, local05
0bfdc     53 B1 02 F6 | 	mov	local06, local01
0bfe0     54 B3 02 F6 | 	mov	local07, local02
0bfe4     55 AF 02 F6 | 	mov	local05, local03
0bfe8     4C 00 00 FF 
0bfec     20 64 06 F1 | 	add	objptr, ##38944
0bff0     32 AD 02 FB | 	rdlong	local04, objptr
0bff4     56 7B 02 F6 | 	mov	result1, local04
0bff8     01 7A 66 F0 | 	shl	result1, #1
0bffc     56 7B 02 F1 | 	add	result1, local04
0c000     02 7A 66 F0 | 	shl	result1, #2
0c004     03 00 00 FF 
0c008     00 64 86 F1 | 	sub	objptr, ##1536
0c00c     32 7B 02 F1 | 	add	result1, objptr
0c010     3D B1 62 FC | 	wrlong	local06, result1
0c014     03 00 00 FF 
0c018     00 64 06 F1 | 	add	objptr, ##1536
0c01c     32 B1 02 FB | 	rdlong	local06, objptr
0c020     58 AD 02 F6 | 	mov	local04, local06
0c024     01 AC 66 F0 | 	shl	local04, #1
0c028     58 AD 02 F1 | 	add	local04, local06
0c02c     02 AC 66 F0 | 	shl	local04, #2
0c030     03 00 00 FF 
0c034     00 64 86 F1 | 	sub	objptr, ##1536
0c038     32 AD 02 F1 | 	add	local04, objptr
0c03c     04 AC 06 F1 | 	add	local04, #4
0c040     56 B3 62 FC | 	wrlong	local07, local04
0c044     03 00 00 FF 
0c048     00 64 06 F1 | 	add	objptr, ##1536
0c04c     32 B3 02 FB | 	rdlong	local07, objptr
0c050     59 B1 02 F6 | 	mov	local06, local07
0c054     01 B0 66 F0 | 	shl	local06, #1
0c058     59 B1 02 F1 | 	add	local06, local07
0c05c     02 B0 66 F0 | 	shl	local06, #2
0c060     03 00 00 FF 
0c064     00 64 86 F1 | 	sub	objptr, ##1536
0c068     32 B1 02 F1 | 	add	local06, objptr
0c06c     08 B0 06 F1 | 	add	local06, #8
0c070     58 AF 62 FC | 	wrlong	local05, local06
0c074     03 00 00 FF 
0c078     00 64 06 F1 | 	add	objptr, ##1536
0c07c     32 B1 02 FB | 	rdlong	local06, objptr
0c080     01 B0 06 F1 | 	add	local06, #1
0c084     32 B1 62 FC | 	wrlong	local06, objptr
0c088     13 00 00 FF 
0c08c     38 64 86 F1 | 	sub	objptr, ##9784
0c090     32 AD 02 FB | 	rdlong	local04, objptr
0c094     03 AC 66 F0 | 	shl	local04, #3
0c098     02 00 00 FF 
0c09c     38 64 86 F1 | 	sub	objptr, ##1080
0c0a0     32 AD 02 F1 | 	add	local04, objptr
0c0a4     04 AC 06 F1 | 	add	local04, #4
0c0a8     56 AF 02 FB | 	rdlong	local05, local04
0c0ac     36 00 00 FF 
0c0b0     B0 65 86 F1 | 	sub	objptr, ##28080
0c0b4     DC FE 9F FD | 	jmp	#LR__1001
0c0b8                 | LR__1002
0c0b8                 | ' return 0  
0c0b8     00 7A 06 F6 | 	mov	result1, #0
0c0bc                 | LR__1003
0c0bc     E7 F0 03 F6 | 	mov	ptra, fp
0c0c0     F2 00 A0 FD | 	call	#popregs_
0c0c4                 | _expr_ret
0c0c4     2D 00 64 FD | 	ret
0c0c8                 | 
0c0c8                 | ' 
0c0c8                 | ' ' Second level operators : add, sub, logic
0c0c8                 | ' 
0c0c8                 | ' function addsub() as ulong
0c0c8                 | _addsub
0c0c8     07 CA 05 F6 | 	mov	COUNT_, #7
0c0cc     E8 00 A0 FD | 	call	#pushregs_
0c0d0                 | _addsub_enter
0c0d0     00 A6 06 F6 | 	mov	local01, #0
0c0d4     60 01 B0 FD | 	call	#_muldiv
0c0d8                 | ' 
0c0d8                 | ' t3.result.uresult=0
0c0d8                 | ' err=muldiv() : if err>0 then return err           			 
0c0d8     01 7A 16 F2 | 	cmp	result1, #1 wc
0c0dc     4C 01 90 3D |  if_ae	jmp	#LR__1012
0c0e0     38 00 00 FF 
0c0e4     E8 65 06 F1 | 	add	objptr, ##29160
0c0e8     32 AD 02 FB | 	rdlong	local04, objptr
0c0ec     03 AC 66 F0 | 	shl	local04, #3
0c0f0     02 00 00 FF 
0c0f4     38 64 86 F1 | 	sub	objptr, ##1080
0c0f8     32 AD 02 F1 | 	add	local04, objptr
0c0fc     04 AC 06 F1 | 	add	local04, #4
0c100     56 AF 02 FB | 	rdlong	local05, local04
0c104                 | ' op = lparts(ct).token				 
0c104                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
0c104     36 00 00 FF 
0c108     B0 65 86 F1 | 	sub	objptr, ##28080
0c10c                 | LR__1010
0c10c     01 AE 0E F2 | 	cmp	local05, #1 wz
0c110     02 AE 0E 52 |  if_ne	cmp	local05, #2 wz
0c114     07 AE 0E 52 |  if_ne	cmp	local05, #7 wz
0c118     03 AE 0E 52 |  if_ne	cmp	local05, #3 wz
0c11c     08 01 90 5D |  if_ne	jmp	#LR__1011
0c120     38 00 00 FF 
0c124     E8 65 06 F1 | 	add	objptr, ##29160
0c128     32 AD 02 FB | 	rdlong	local04, objptr
0c12c     01 AC 06 F1 | 	add	local04, #1
0c130     32 AD 62 FC | 	wrlong	local04, objptr
0c134     38 00 00 FF 
0c138     E8 65 86 F1 | 	sub	objptr, ##29160
0c13c     F8 00 B0 FD | 	call	#_muldiv
0c140                 | '   ct+=1
0c140                 | '   err=muldiv() : if err>0 then return err   
0c140     01 7A 16 F2 | 	cmp	result1, #1 wc
0c144     E4 00 90 3D |  if_ae	jmp	#LR__1012
0c148     57 AB 02 F6 | 	mov	local03, local05
0c14c     53 B1 02 F6 | 	mov	local06, local01
0c150     54 B3 02 F6 | 	mov	local07, local02
0c154     55 AF 02 F6 | 	mov	local05, local03
0c158     4C 00 00 FF 
0c15c     20 64 06 F1 | 	add	objptr, ##38944
0c160     32 AD 02 FB | 	rdlong	local04, objptr
0c164     56 7B 02 F6 | 	mov	result1, local04
0c168     01 7A 66 F0 | 	shl	result1, #1
0c16c     56 7B 02 F1 | 	add	result1, local04
0c170     02 7A 66 F0 | 	shl	result1, #2
0c174     03 00 00 FF 
0c178     00 64 86 F1 | 	sub	objptr, ##1536
0c17c     32 7B 02 F1 | 	add	result1, objptr
0c180     3D B1 62 FC | 	wrlong	local06, result1
0c184     03 00 00 FF 
0c188     00 64 06 F1 | 	add	objptr, ##1536
0c18c     32 B1 02 FB | 	rdlong	local06, objptr
0c190     58 AD 02 F6 | 	mov	local04, local06
0c194     01 AC 66 F0 | 	shl	local04, #1
0c198     58 AD 02 F1 | 	add	local04, local06
0c19c     02 AC 66 F0 | 	shl	local04, #2
0c1a0     03 00 00 FF 
0c1a4     00 64 86 F1 | 	sub	objptr, ##1536
0c1a8     32 AD 02 F1 | 	add	local04, objptr
0c1ac     04 AC 06 F1 | 	add	local04, #4
0c1b0     56 B3 62 FC | 	wrlong	local07, local04
0c1b4     03 00 00 FF 
0c1b8     00 64 06 F1 | 	add	objptr, ##1536
0c1bc     32 B3 02 FB | 	rdlong	local07, objptr
0c1c0     59 B1 02 F6 | 	mov	local06, local07
0c1c4     01 B0 66 F0 | 	shl	local06, #1
0c1c8     59 B1 02 F1 | 	add	local06, local07
0c1cc     02 B0 66 F0 | 	shl	local06, #2
0c1d0     03 00 00 FF 
0c1d4     00 64 86 F1 | 	sub	objptr, ##1536
0c1d8     32 B1 02 F1 | 	add	local06, objptr
0c1dc     08 B0 06 F1 | 	add	local06, #8
0c1e0     58 AF 62 FC | 	wrlong	local05, local06
0c1e4     03 00 00 FF 
0c1e8     00 64 06 F1 | 	add	objptr, ##1536
0c1ec     32 B1 02 FB | 	rdlong	local06, objptr
0c1f0     01 B0 06 F1 | 	add	local06, #1
0c1f4     32 B1 62 FC | 	wrlong	local06, objptr
0c1f8     13 00 00 FF 
0c1fc     38 64 86 F1 | 	sub	objptr, ##9784
0c200     32 AD 02 FB | 	rdlong	local04, objptr
0c204     03 AC 66 F0 | 	shl	local04, #3
0c208     02 00 00 FF 
0c20c     38 64 86 F1 | 	sub	objptr, ##1080
0c210     32 AD 02 F1 | 	add	local04, objptr
0c214     04 AC 06 F1 | 	add	local04, #4
0c218     56 AF 02 FB | 	rdlong	local05, local04
0c21c     36 00 00 FF 
0c220     B0 65 86 F1 | 	sub	objptr, ##28080
0c224     E4 FE 9F FD | 	jmp	#LR__1010
0c228                 | LR__1011
0c228                 | ' return 0
0c228     00 7A 06 F6 | 	mov	result1, #0
0c22c                 | LR__1012
0c22c     E7 F0 03 F6 | 	mov	ptra, fp
0c230     F2 00 A0 FD | 	call	#popregs_
0c234                 | _addsub_ret
0c234     2D 00 64 FD | 	ret
0c238                 | 
0c238                 | ' 
0c238                 | ' ' Third level operators : mul,div,shift,power
0c238                 | ' 
0c238                 | ' function muldiv() as ulong
0c238                 | _muldiv
0c238     07 CA 05 F6 | 	mov	COUNT_, #7
0c23c     E8 00 A0 FD | 	call	#pushregs_
0c240                 | _muldiv_enter
0c240     00 A6 06 F6 | 	mov	local01, #0
0c244     6C 01 B0 FD | 	call	#_getvalue
0c248                 | ' 
0c248                 | ' t3.result.uresult=0
0c248                 | ' err=getvalue() : if err>0 then return err     
0c248     01 7A 16 F2 | 	cmp	result1, #1 wc
0c24c     58 01 90 3D |  if_ae	jmp	#LR__1022
0c250     38 00 00 FF 
0c254     E8 65 06 F1 | 	add	objptr, ##29160
0c258     32 AD 02 FB | 	rdlong	local04, objptr
0c25c     03 AC 66 F0 | 	shl	local04, #3
0c260     02 00 00 FF 
0c264     38 64 86 F1 | 	sub	objptr, ##1080
0c268     32 AD 02 F1 | 	add	local04, objptr
0c26c     04 AC 06 F1 | 	add	local04, #4
0c270     56 AF 02 FB | 	rdlong	local05, local04
0c274                 | ' op = lparts(ct).token
0c274                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
0c274     36 00 00 FF 
0c278     B0 65 86 F1 | 	sub	objptr, ##28080
0c27c                 | LR__1020
0c27c     05 AE 0E F2 | 	cmp	local05, #5 wz
0c280     08 AE 0E 52 |  if_ne	cmp	local05, #8 wz
0c284     06 AE 0E 52 |  if_ne	cmp	local05, #6 wz
0c288     09 AE 0E 52 |  if_ne	cmp	local05, #9 wz
0c28c     0A AE 0E 52 |  if_ne	cmp	local05, #10 wz
0c290     0B AE 0E 52 |  if_ne	cmp	local05, #11 wz
0c294     0C AE 0E 52 |  if_ne	cmp	local05, #12 wz
0c298     08 01 90 5D |  if_ne	jmp	#LR__1021
0c29c     38 00 00 FF 
0c2a0     E8 65 06 F1 | 	add	objptr, ##29160
0c2a4     32 AD 02 FB | 	rdlong	local04, objptr
0c2a8     01 AC 06 F1 | 	add	local04, #1
0c2ac     32 AD 62 FC | 	wrlong	local04, objptr
0c2b0     38 00 00 FF 
0c2b4     E8 65 86 F1 | 	sub	objptr, ##29160
0c2b8     F8 00 B0 FD | 	call	#_getvalue
0c2bc                 | '   ct+=1
0c2bc                 | '   err=getvalue() :if err>0 then return err   
0c2bc     01 7A 16 F2 | 	cmp	result1, #1 wc
0c2c0     E4 00 90 3D |  if_ae	jmp	#LR__1022
0c2c4     57 AB 02 F6 | 	mov	local03, local05
0c2c8     53 B1 02 F6 | 	mov	local06, local01
0c2cc     54 B3 02 F6 | 	mov	local07, local02
0c2d0     55 AF 02 F6 | 	mov	local05, local03
0c2d4     4C 00 00 FF 
0c2d8     20 64 06 F1 | 	add	objptr, ##38944
0c2dc     32 AD 02 FB | 	rdlong	local04, objptr
0c2e0     56 7B 02 F6 | 	mov	result1, local04
0c2e4     01 7A 66 F0 | 	shl	result1, #1
0c2e8     56 7B 02 F1 | 	add	result1, local04
0c2ec     02 7A 66 F0 | 	shl	result1, #2
0c2f0     03 00 00 FF 
0c2f4     00 64 86 F1 | 	sub	objptr, ##1536
0c2f8     32 7B 02 F1 | 	add	result1, objptr
0c2fc     3D B1 62 FC | 	wrlong	local06, result1
0c300     03 00 00 FF 
0c304     00 64 06 F1 | 	add	objptr, ##1536
0c308     32 B1 02 FB | 	rdlong	local06, objptr
0c30c     58 AD 02 F6 | 	mov	local04, local06
0c310     01 AC 66 F0 | 	shl	local04, #1
0c314     58 AD 02 F1 | 	add	local04, local06
0c318     02 AC 66 F0 | 	shl	local04, #2
0c31c     03 00 00 FF 
0c320     00 64 86 F1 | 	sub	objptr, ##1536
0c324     32 AD 02 F1 | 	add	local04, objptr
0c328     04 AC 06 F1 | 	add	local04, #4
0c32c     56 B3 62 FC | 	wrlong	local07, local04
0c330     03 00 00 FF 
0c334     00 64 06 F1 | 	add	objptr, ##1536
0c338     32 B3 02 FB | 	rdlong	local07, objptr
0c33c     59 B1 02 F6 | 	mov	local06, local07
0c340     01 B0 66 F0 | 	shl	local06, #1
0c344     59 B1 02 F1 | 	add	local06, local07
0c348     02 B0 66 F0 | 	shl	local06, #2
0c34c     03 00 00 FF 
0c350     00 64 86 F1 | 	sub	objptr, ##1536
0c354     32 B1 02 F1 | 	add	local06, objptr
0c358     08 B0 06 F1 | 	add	local06, #8
0c35c     58 AF 62 FC | 	wrlong	local05, local06
0c360     03 00 00 FF 
0c364     00 64 06 F1 | 	add	objptr, ##1536
0c368     32 B1 02 FB | 	rdlong	local06, objptr
0c36c     01 B0 06 F1 | 	add	local06, #1
0c370     32 B1 62 FC | 	wrlong	local06, objptr
0c374     13 00 00 FF 
0c378     38 64 86 F1 | 	sub	objptr, ##9784
0c37c     32 AD 02 FB | 	rdlong	local04, objptr
0c380     03 AC 66 F0 | 	shl	local04, #3
0c384     02 00 00 FF 
0c388     38 64 86 F1 | 	sub	objptr, ##1080
0c38c     32 AD 02 F1 | 	add	local04, objptr
0c390     04 AC 06 F1 | 	add	local04, #4
0c394     56 AF 02 FB | 	rdlong	local05, local04
0c398     36 00 00 FF 
0c39c     B0 65 86 F1 | 	sub	objptr, ##28080
0c3a0     D8 FE 9F FD | 	jmp	#LR__1020
0c3a4                 | LR__1021
0c3a4                 | ' return 0
0c3a4     00 7A 06 F6 | 	mov	result1, #0
0c3a8                 | LR__1022
0c3a8     E7 F0 03 F6 | 	mov	ptra, fp
0c3ac     F2 00 A0 FD | 	call	#popregs_
0c3b0                 | _muldiv_ret
0c3b0     2D 00 64 FD | 	ret
0c3b4                 | 
0c3b4                 | ' 
0c3b4                 | ' ' Get a value for operations
0c3b4                 | ' 
0c3b4                 | ' function getvalue()  as ulong
0c3b4                 | _getvalue
0c3b4     0B CA 05 F6 | 	mov	COUNT_, #11
0c3b8     E8 00 A0 FD | 	call	#pushregs_
0c3bc                 | _getvalue_enter
0c3bc     01 AC 06 F6 | 	mov	local04, #1
0c3c0     00 A6 06 F6 | 	mov	local01, #0
0c3c4     1D AA 06 F6 | 	mov	local03, #29
0c3c8     38 00 00 FF 
0c3cc     E8 65 06 F1 | 	add	objptr, ##29160
0c3d0     32 97 02 FB | 	rdlong	arg03, objptr
0c3d4     03 96 66 F0 | 	shl	arg03, #3
0c3d8     02 00 00 FF 
0c3dc     38 64 86 F1 | 	sub	objptr, ##1080
0c3e0     32 97 02 F1 | 	add	arg03, objptr
0c3e4     04 96 06 F1 | 	add	arg03, #4
0c3e8     4B AF 02 FB | 	rdlong	local05, arg03
0c3ec                 | ' 
0c3ec                 | ' m=1											' for negative numbers
0c3ec                 | ' t1.result.uresult=0: t1.result_type=result_uint
0c3ec                 | ' op=lparts(ct).token
0c3ec                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token				' '-' operator found
0c3ec     02 AE 0E F2 | 	cmp	local05, #2 wz
0c3f0     36 00 00 FF 
0c3f4     B0 65 86 F1 | 	sub	objptr, ##28080
0c3f8     38 00 90 5D |  if_ne	jmp	#LR__1030
0c3fc     01 AC 66 F6 | 	neg	local04, #1
0c400     38 00 00 FF 
0c404     E8 65 06 F1 | 	add	objptr, ##29160
0c408     32 AF 02 FB | 	rdlong	local05, objptr
0c40c     01 AE 06 F1 | 	add	local05, #1
0c410     32 AF 62 FC | 	wrlong	local05, objptr
0c414     03 AE 66 F0 | 	shl	local05, #3
0c418     02 00 00 FF 
0c41c     38 64 86 F1 | 	sub	objptr, ##1080
0c420     32 AF 02 F1 | 	add	local05, objptr
0c424     04 AE 06 F1 | 	add	local05, #4
0c428     57 AF 02 FB | 	rdlong	local05, local05
0c42c     36 00 00 FF 
0c430     B0 65 86 F1 | 	sub	objptr, ##28080
0c434                 | LR__1030
0c434                 | ' select case op
0c434     01 00 00 FF 
0c438     00 AE 0E F2 | 	cmp	local05, ##512 wz
0c43c     44 00 90 AD |  if_e	jmp	#LR__1031
0c440     01 00 00 FF 
0c444     01 AE 0E F2 | 	cmp	local05, ##513 wz
0c448     90 01 90 AD |  if_e	jmp	#LR__1034
0c44c     01 00 00 FF 
0c450     02 AE 0E F2 | 	cmp	local05, ##514 wz
0c454     44 04 90 AD |  if_e	jmp	#LR__1041
0c458     01 00 00 FF 
0c45c     03 AE 0E F2 | 	cmp	local05, ##515 wz
0c460     A8 05 90 AD |  if_e	jmp	#LR__1044
0c464     2C AE 0E F2 | 	cmp	local05, #44 wz
0c468     78 07 90 AD |  if_e	jmp	#LR__1049
0c46c     01 00 00 FF 
0c470     04 AE 0E F2 | 	cmp	local05, ##516 wz
0c474     70 08 90 AD |  if_e	jmp	#LR__1050
0c478     15 AE 0E F2 | 	cmp	local05, #21 wz
0c47c     98 08 90 AD |  if_e	jmp	#LR__1051
0c480     10 09 90 FD | 	jmp	#LR__1052
0c484                 | LR__1031
0c484                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int  
0c484     01 AC 0E F2 | 	cmp	local04, #1 wz
0c488     3C 00 90 5D |  if_ne	jmp	#LR__1032
0c48c     38 00 00 FF 
0c490     E8 65 06 F1 | 	add	objptr, ##29160
0c494     32 AF 02 FB | 	rdlong	local05, objptr
0c498     03 AE 66 F0 | 	shl	local05, #3
0c49c     02 00 00 FF 
0c4a0     38 64 86 F1 | 	sub	objptr, ##1080
0c4a4     32 AF 02 F1 | 	add	local05, objptr
0c4a8     57 93 02 FB | 	rdlong	arg01, local05
0c4ac     00 94 06 F6 | 	mov	arg02, #0
0c4b0     36 00 00 FF 
0c4b4     B0 65 86 F1 | 	sub	objptr, ##28080
0c4b8     70 B2 B1 FD | 	call	#__system____builtin_atoi
0c4bc     3D AD 02 FD | 	qmul	local04, result1
0c4c0     18 A6 62 FD | 	getqx	local01
0c4c4     1C AA 06 F6 | 	mov	local03, #28
0c4c8                 | LR__1032
0c4c8                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int 	' todo token_int64?
0c4c8     FF FF 7F FF 
0c4cc     FF AD 0E F2 | 	cmp	local04, ##-1 wz
0c4d0     3C 00 90 5D |  if_ne	jmp	#LR__1033
0c4d4     38 00 00 FF 
0c4d8     E8 65 06 F1 | 	add	objptr, ##29160
0c4dc     32 AF 02 FB | 	rdlong	local05, objptr
0c4e0     03 AE 66 F0 | 	shl	local05, #3
0c4e4     02 00 00 FF 
0c4e8     38 64 86 F1 | 	sub	objptr, ##1080
0c4ec     32 AF 02 F1 | 	add	local05, objptr
0c4f0     57 93 02 FB | 	rdlong	arg01, local05
0c4f4     00 94 06 F6 | 	mov	arg02, #0
0c4f8     36 00 00 FF 
0c4fc     B0 65 86 F1 | 	sub	objptr, ##28080
0c500     28 B2 B1 FD | 	call	#__system____builtin_atoi
0c504     3D AD 02 FD | 	qmul	local04, result1
0c508     18 A6 62 FD | 	getqx	local01
0c50c     1C AA 06 F6 | 	mov	local03, #28
0c510                 | LR__1033
0c510     53 B1 02 F6 | 	mov	local06, local01
0c514     54 B3 02 F6 | 	mov	local07, local02
0c518     55 AF 02 F6 | 	mov	local05, local03
0c51c     4C 00 00 FF 
0c520     20 64 06 F1 | 	add	objptr, ##38944
0c524     32 A7 02 FB | 	rdlong	local01, objptr
0c528     53 AD 02 F6 | 	mov	local04, local01
0c52c     01 AC 66 F0 | 	shl	local04, #1
0c530     53 AD 02 F1 | 	add	local04, local01
0c534     02 AC 66 F0 | 	shl	local04, #2
0c538     03 00 00 FF 
0c53c     00 64 86 F1 | 	sub	objptr, ##1536
0c540     32 AD 02 F1 | 	add	local04, objptr
0c544     56 B1 62 FC | 	wrlong	local06, local04
0c548     03 00 00 FF 
0c54c     00 64 06 F1 | 	add	objptr, ##1536
0c550     32 B1 02 FB | 	rdlong	local06, objptr
0c554     58 A7 02 F6 | 	mov	local01, local06
0c558     01 A6 66 F0 | 	shl	local01, #1
0c55c     58 A7 02 F1 | 	add	local01, local06
0c560     02 A6 66 F0 | 	shl	local01, #2
0c564     03 00 00 FF 
0c568     00 64 86 F1 | 	sub	objptr, ##1536
0c56c     32 A7 02 F1 | 	add	local01, objptr
0c570     04 A6 06 F1 | 	add	local01, #4
0c574     53 B3 62 FC | 	wrlong	local07, local01
0c578     03 00 00 FF 
0c57c     00 64 06 F1 | 	add	objptr, ##1536
0c580     32 B3 02 FB | 	rdlong	local07, objptr
0c584     59 B1 02 F6 | 	mov	local06, local07
0c588     01 B0 66 F0 | 	shl	local06, #1
0c58c     59 B1 02 F1 | 	add	local06, local07
0c590     02 B0 66 F0 | 	shl	local06, #2
0c594     03 00 00 FF 
0c598     00 64 86 F1 | 	sub	objptr, ##1536
0c59c     32 B1 02 F1 | 	add	local06, objptr
0c5a0     08 B0 06 F1 | 	add	local06, #8
0c5a4     58 AF 62 FC | 	wrlong	local05, local06
0c5a8     03 00 00 FF 
0c5ac     00 64 06 F1 | 	add	objptr, ##1536
0c5b0     32 B1 02 FB | 	rdlong	local06, objptr
0c5b4     01 B0 06 F1 | 	add	local06, #1
0c5b8     32 B1 62 FC | 	wrlong	local06, objptr
0c5bc     13 00 00 FF 
0c5c0     38 64 86 F1 | 	sub	objptr, ##9784
0c5c4     32 B1 02 FB | 	rdlong	local06, objptr
0c5c8     01 B0 06 F1 | 	add	local06, #1
0c5cc     32 B1 62 FC | 	wrlong	local06, objptr
0c5d0     38 00 00 FF 
0c5d4     E8 65 86 F1 | 	sub	objptr, ##29160
0c5d8     E4 07 90 FD | 	jmp	#LR__1053
0c5dc                 | LR__1034
0c5dc                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0c5dc     38 00 00 FF 
0c5e0     E8 65 06 F1 | 	add	objptr, ##29160
0c5e4     32 97 02 FB | 	rdlong	arg03, objptr
0c5e8     03 96 66 F0 | 	shl	arg03, #3
0c5ec     02 00 00 FF 
0c5f0     38 64 86 F1 | 	sub	objptr, ##1080
0c5f4     32 97 02 F1 | 	add	arg03, objptr
0c5f8     4B 93 02 FB | 	rdlong	arg01, arg03
0c5fc     01 94 06 F6 | 	mov	arg02, #1
0c600     36 00 00 FF 
0c604     B0 65 86 F1 | 	sub	objptr, ##28080
0c608     74 9C B1 FD | 	call	#__system__Left_S
0c60c     3D 93 02 F6 | 	mov	arg01, result1
0c610     96 01 00 FF 
0c614     A1 94 06 F6 | 	mov	arg02, ##@LR__5938
0c618     E4 83 B1 FD | 	call	#__system___string_cmp
0c61c     00 7A 0E F2 | 	cmp	result1, #0 wz
0c620     94 00 90 5D |  if_ne	jmp	#LR__1037
0c624     38 00 00 FF 
0c628     E8 65 06 F1 | 	add	objptr, ##29160
0c62c     32 B3 02 FB | 	rdlong	local07, objptr
0c630     59 B1 02 F6 | 	mov	local06, local07
0c634     03 B0 66 F0 | 	shl	local06, #3
0c638     02 00 00 FF 
0c63c     38 64 86 F1 | 	sub	objptr, ##1080
0c640     32 B1 02 F1 | 	add	local06, objptr
0c644     96 01 00 FF 
0c648     A3 AE 06 F6 | 	mov	local05, ##@LR__5939
0c64c     03 B2 66 F0 | 	shl	local07, #3
0c650     32 B3 02 F1 | 	add	local07, objptr
0c654     59 B3 02 FB | 	rdlong	local07, local07
0c658     02 00 00 FF 
0c65c     38 64 06 F1 | 	add	objptr, ##1080
0c660     32 A7 02 FB | 	rdlong	local01, objptr
0c664     03 A6 66 F0 | 	shl	local01, #3
0c668     02 00 00 FF 
0c66c     38 64 86 F1 | 	sub	objptr, ##1080
0c670     32 A7 02 F1 | 	add	local01, objptr
0c674     53 93 02 FB | 	rdlong	arg01, local01
0c678     36 00 00 FF 
0c67c     B0 65 86 F1 | 	sub	objptr, ##28080
0c680     49 B5 02 F6 | 	mov	local08, arg01
0c684     D7 06 48 FB | 	callpa	#(@LR__1036-@LR__1035)>>2,fcache_load_ptr_
0c688                 | LR__1035
0c688     5A 7B CA FA | 	rdbyte	result1, local08 wz
0c68c     01 B4 06 51 |  if_ne	add	local08, #1
0c690     F4 FF 9F 5D |  if_ne	jmp	#LR__1035
0c694                 | LR__1036
0c694     49 B5 82 F1 | 	sub	local08, arg01
0c698     5A 95 02 F6 | 	mov	arg02, local08
0c69c     01 94 86 F1 | 	sub	arg02, #1
0c6a0     59 93 02 F6 | 	mov	arg01, local07
0c6a4     60 9C B1 FD | 	call	#__system__Right_S
0c6a8     3D 95 02 F6 | 	mov	arg02, result1
0c6ac     57 93 02 F6 | 	mov	arg01, local05
0c6b0     80 83 B1 FD | 	call	#__system___string_concat
0c6b4     58 7B 62 FC | 	wrlong	result1, local06
0c6b8                 | LR__1037
0c6b8                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0c6b8     38 00 00 FF 
0c6bc     E8 65 06 F1 | 	add	objptr, ##29160
0c6c0     32 97 02 FB | 	rdlong	arg03, objptr
0c6c4     03 96 66 F0 | 	shl	arg03, #3
0c6c8     02 00 00 FF 
0c6cc     38 64 86 F1 | 	sub	objptr, ##1080
0c6d0     32 97 02 F1 | 	add	arg03, objptr
0c6d4     4B 93 02 FB | 	rdlong	arg01, arg03
0c6d8     01 94 06 F6 | 	mov	arg02, #1
0c6dc     36 00 00 FF 
0c6e0     B0 65 86 F1 | 	sub	objptr, ##28080
0c6e4     98 9B B1 FD | 	call	#__system__Left_S
0c6e8     3D 93 02 F6 | 	mov	arg01, result1
0c6ec     96 01 00 FF 
0c6f0     A6 94 06 F6 | 	mov	arg02, ##@LR__5940
0c6f4     08 83 B1 FD | 	call	#__system___string_cmp
0c6f8     00 7A 0E F2 | 	cmp	result1, #0 wz
0c6fc     94 00 90 5D |  if_ne	jmp	#LR__1040
0c700     38 00 00 FF 
0c704     E8 65 06 F1 | 	add	objptr, ##29160
0c708     32 B3 02 FB | 	rdlong	local07, objptr
0c70c     59 B1 02 F6 | 	mov	local06, local07
0c710     03 B0 66 F0 | 	shl	local06, #3
0c714     02 00 00 FF 
0c718     38 64 86 F1 | 	sub	objptr, ##1080
0c71c     32 B1 02 F1 | 	add	local06, objptr
0c720     96 01 00 FF 
0c724     A8 AE 06 F6 | 	mov	local05, ##@LR__5941
0c728     03 B2 66 F0 | 	shl	local07, #3
0c72c     32 B3 02 F1 | 	add	local07, objptr
0c730     59 B3 02 FB | 	rdlong	local07, local07
0c734     02 00 00 FF 
0c738     38 64 06 F1 | 	add	objptr, ##1080
0c73c     32 A7 02 FB | 	rdlong	local01, objptr
0c740     03 A6 66 F0 | 	shl	local01, #3
0c744     02 00 00 FF 
0c748     38 64 86 F1 | 	sub	objptr, ##1080
0c74c     32 A7 02 F1 | 	add	local01, objptr
0c750     53 93 02 FB | 	rdlong	arg01, local01
0c754     36 00 00 FF 
0c758     B0 65 86 F1 | 	sub	objptr, ##28080
0c75c     49 B5 02 F6 | 	mov	local08, arg01
0c760     D7 06 48 FB | 	callpa	#(@LR__1039-@LR__1038)>>2,fcache_load_ptr_
0c764                 | LR__1038
0c764     5A 7B CA FA | 	rdbyte	result1, local08 wz
0c768     01 B4 06 51 |  if_ne	add	local08, #1
0c76c     F4 FF 9F 5D |  if_ne	jmp	#LR__1038
0c770                 | LR__1039
0c770     49 B5 82 F1 | 	sub	local08, arg01
0c774     5A 95 02 F6 | 	mov	arg02, local08
0c778     01 94 86 F1 | 	sub	arg02, #1
0c77c     59 93 02 F6 | 	mov	arg01, local07
0c780     84 9B B1 FD | 	call	#__system__Right_S
0c784     3D 95 02 F6 | 	mov	arg02, result1
0c788     57 93 02 F6 | 	mov	arg01, local05
0c78c     A4 82 B1 FD | 	call	#__system___string_concat
0c790     58 7B 62 FC | 	wrlong	result1, local06
0c794                 | LR__1040
0c794     38 00 00 FF 
0c798     E8 65 06 F1 | 	add	objptr, ##29160
0c79c     32 B1 02 FB | 	rdlong	local06, objptr
0c7a0     03 B0 66 F0 | 	shl	local06, #3
0c7a4     02 00 00 FF 
0c7a8     38 64 86 F1 | 	sub	objptr, ##1080
0c7ac     32 B1 02 F1 | 	add	local06, objptr
0c7b0     58 93 02 FB | 	rdlong	arg01, local06
0c7b4     00 94 06 F6 | 	mov	arg02, #0
0c7b8     36 00 00 FF 
0c7bc     B0 65 86 F1 | 	sub	objptr, ##28080
0c7c0     68 AF B1 FD | 	call	#__system____builtin_atoi
0c7c4     3D AD 02 FD | 	qmul	local04, result1
0c7c8     4C 00 00 FF 
0c7cc     20 64 06 F1 | 	add	objptr, ##38944
0c7d0     32 B1 02 FB | 	rdlong	local06, objptr
0c7d4     58 B7 02 F6 | 	mov	local09, local06
0c7d8     01 B6 66 F0 | 	shl	local09, #1
0c7dc     58 B7 02 F1 | 	add	local09, local06
0c7e0     02 B6 66 F0 | 	shl	local09, #2
0c7e4     03 00 00 FF 
0c7e8     00 64 86 F1 | 	sub	objptr, ##1536
0c7ec     32 B7 02 F1 | 	add	local09, objptr
0c7f0     03 00 00 FF 
0c7f4     00 64 06 F1 | 	add	objptr, ##1536
0c7f8     18 A6 62 FD | 	getqx	local01
0c7fc     1C AA 06 F6 | 	mov	local03, #28
0c800     53 B1 02 F6 | 	mov	local06, local01
0c804     54 B3 02 F6 | 	mov	local07, local02
0c808     5B B1 62 FC | 	wrlong	local06, local09
0c80c     55 B7 02 F6 | 	mov	local09, local03
0c810     32 B1 02 FB | 	rdlong	local06, objptr
0c814     58 AF 02 F6 | 	mov	local05, local06
0c818     01 AE 66 F0 | 	shl	local05, #1
0c81c     58 AF 02 F1 | 	add	local05, local06
0c820     02 AE 66 F0 | 	shl	local05, #2
0c824     03 00 00 FF 
0c828     00 64 86 F1 | 	sub	objptr, ##1536
0c82c     32 AF 02 F1 | 	add	local05, objptr
0c830     04 AE 06 F1 | 	add	local05, #4
0c834     57 B3 62 FC | 	wrlong	local07, local05
0c838     03 00 00 FF 
0c83c     00 64 06 F1 | 	add	objptr, ##1536
0c840     32 B3 02 FB | 	rdlong	local07, objptr
0c844     59 B1 02 F6 | 	mov	local06, local07
0c848     01 B0 66 F0 | 	shl	local06, #1
0c84c     59 B1 02 F1 | 	add	local06, local07
0c850     02 B0 66 F0 | 	shl	local06, #2
0c854     03 00 00 FF 
0c858     00 64 86 F1 | 	sub	objptr, ##1536
0c85c     32 B1 02 F1 | 	add	local06, objptr
0c860     08 B0 06 F1 | 	add	local06, #8
0c864     58 B7 62 FC | 	wrlong	local09, local06
0c868     03 00 00 FF 
0c86c     00 64 06 F1 | 	add	objptr, ##1536
0c870     32 B1 02 FB | 	rdlong	local06, objptr
0c874     01 B0 06 F1 | 	add	local06, #1
0c878     32 B1 62 FC | 	wrlong	local06, objptr
0c87c     13 00 00 FF 
0c880     38 64 86 F1 | 	sub	objptr, ##9784
0c884     32 B1 02 FB | 	rdlong	local06, objptr
0c888     01 B0 06 F1 | 	add	local06, #1
0c88c     32 B1 62 FC | 	wrlong	local06, objptr
0c890     38 00 00 FF 
0c894     E8 65 86 F1 | 	sub	objptr, ##29160
0c898     24 05 90 FD | 	jmp	#LR__1053
0c89c                 | LR__1041
0c89c                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
0c89c     01 AC 0E F2 | 	cmp	local04, #1 wz
0c8a0     48 00 90 5D |  if_ne	jmp	#LR__1042
0c8a4     00 C0 1F FF 
0c8a8     00 B0 06 F6 | 	mov	local06, ##1065353216
0c8ac     38 00 00 FF 
0c8b0     E8 65 06 F1 | 	add	objptr, ##29160
0c8b4     32 B7 02 FB | 	rdlong	local09, objptr
0c8b8     03 B6 66 F0 | 	shl	local09, #3
0c8bc     02 00 00 FF 
0c8c0     38 64 86 F1 | 	sub	objptr, ##1080
0c8c4     32 B7 02 F1 | 	add	local09, objptr
0c8c8     5B 93 02 FB | 	rdlong	arg01, local09
0c8cc     36 00 00 FF 
0c8d0     B0 65 86 F1 | 	sub	objptr, ##28080
0c8d4     EC AF B1 FD | 	call	#__system____builtin_atof
0c8d8     3D 95 02 F6 | 	mov	arg02, result1
0c8dc     58 93 02 F6 | 	mov	arg01, local06
0c8e0     C4 A7 B1 FD | 	call	#__system___float_mul
0c8e4     3D A7 02 F6 | 	mov	local01, result1
0c8e8     1E AA 06 F6 | 	mov	local03, #30
0c8ec                 | LR__1042
0c8ec                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
0c8ec     FF FF 7F FF 
0c8f0     FF AD 0E F2 | 	cmp	local04, ##-1 wz
0c8f4     48 00 90 5D |  if_ne	jmp	#LR__1043
0c8f8     00 C0 5F FF 
0c8fc     00 B0 06 F6 | 	mov	local06, ##-1082130432
0c900     38 00 00 FF 
0c904     E8 65 06 F1 | 	add	objptr, ##29160
0c908     32 B7 02 FB | 	rdlong	local09, objptr
0c90c     03 B6 66 F0 | 	shl	local09, #3
0c910     02 00 00 FF 
0c914     38 64 86 F1 | 	sub	objptr, ##1080
0c918     32 B7 02 F1 | 	add	local09, objptr
0c91c     5B 93 02 FB | 	rdlong	arg01, local09
0c920     36 00 00 FF 
0c924     B0 65 86 F1 | 	sub	objptr, ##28080
0c928     98 AF B1 FD | 	call	#__system____builtin_atof
0c92c     3D 95 02 F6 | 	mov	arg02, result1
0c930     58 93 02 F6 | 	mov	arg01, local06
0c934     70 A7 B1 FD | 	call	#__system___float_mul
0c938     3D A7 02 F6 | 	mov	local01, result1
0c93c     1E AA 06 F6 | 	mov	local03, #30
0c940                 | LR__1043
0c940     53 B1 02 F6 | 	mov	local06, local01
0c944     54 B3 02 F6 | 	mov	local07, local02
0c948     55 AF 02 F6 | 	mov	local05, local03
0c94c     4C 00 00 FF 
0c950     20 64 06 F1 | 	add	objptr, ##38944
0c954     32 A7 02 FB | 	rdlong	local01, objptr
0c958     53 B7 02 F6 | 	mov	local09, local01
0c95c     01 B6 66 F0 | 	shl	local09, #1
0c960     53 B7 02 F1 | 	add	local09, local01
0c964     02 B6 66 F0 | 	shl	local09, #2
0c968     03 00 00 FF 
0c96c     00 64 86 F1 | 	sub	objptr, ##1536
0c970     32 B7 02 F1 | 	add	local09, objptr
0c974     5B B1 62 FC | 	wrlong	local06, local09
0c978     03 00 00 FF 
0c97c     00 64 06 F1 | 	add	objptr, ##1536
0c980     32 B7 02 FB | 	rdlong	local09, objptr
0c984     5B B1 02 F6 | 	mov	local06, local09
0c988     01 B0 66 F0 | 	shl	local06, #1
0c98c     5B B1 02 F1 | 	add	local06, local09
0c990     02 B0 66 F0 | 	shl	local06, #2
0c994     03 00 00 FF 
0c998     00 64 86 F1 | 	sub	objptr, ##1536
0c99c     32 B1 02 F1 | 	add	local06, objptr
0c9a0     04 B0 06 F1 | 	add	local06, #4
0c9a4     58 B3 62 FC | 	wrlong	local07, local06
0c9a8     03 00 00 FF 
0c9ac     00 64 06 F1 | 	add	objptr, ##1536
0c9b0     32 B7 02 FB | 	rdlong	local09, objptr
0c9b4     5B B3 02 F6 | 	mov	local07, local09
0c9b8     01 B2 66 F0 | 	shl	local07, #1
0c9bc     5B B3 02 F1 | 	add	local07, local09
0c9c0     02 B2 66 F0 | 	shl	local07, #2
0c9c4     03 00 00 FF 
0c9c8     00 64 86 F1 | 	sub	objptr, ##1536
0c9cc     32 B3 02 F1 | 	add	local07, objptr
0c9d0     08 B2 06 F1 | 	add	local07, #8
0c9d4     59 AF 62 FC | 	wrlong	local05, local07
0c9d8     03 00 00 FF 
0c9dc     00 64 06 F1 | 	add	objptr, ##1536
0c9e0     32 B1 02 FB | 	rdlong	local06, objptr
0c9e4     01 B0 06 F1 | 	add	local06, #1
0c9e8     32 B1 62 FC | 	wrlong	local06, objptr
0c9ec     13 00 00 FF 
0c9f0     38 64 86 F1 | 	sub	objptr, ##9784
0c9f4     32 B1 02 FB | 	rdlong	local06, objptr
0c9f8     01 B0 06 F1 | 	add	local06, #1
0c9fc     32 B1 62 FC | 	wrlong	local06, objptr
0ca00     38 00 00 FF 
0ca04     E8 65 86 F1 | 	sub	objptr, ##29160
0ca08     B4 03 90 FD | 	jmp	#LR__1053
0ca0c                 | LR__1044
0ca0c     38 00 00 FF 
0ca10     E8 65 06 F1 | 	add	objptr, ##29160
0ca14     32 97 02 FB | 	rdlong	arg03, objptr
0ca18     03 96 66 F0 | 	shl	arg03, #3
0ca1c     02 00 00 FF 
0ca20     38 64 86 F1 | 	sub	objptr, ##1080
0ca24     32 97 02 F1 | 	add	arg03, objptr
0ca28     4B 93 02 FB | 	rdlong	arg01, arg03
0ca2c     36 00 00 FF 
0ca30     B0 65 86 F1 | 	sub	objptr, ##28080
0ca34     49 B5 02 F6 | 	mov	local08, arg01
0ca38     D7 06 48 FB | 	callpa	#(@LR__1046-@LR__1045)>>2,fcache_load_ptr_
0ca3c                 | LR__1045
0ca3c     5A 7B CA FA | 	rdbyte	result1, local08 wz
0ca40     01 B4 06 51 |  if_ne	add	local08, #1
0ca44     F4 FF 9F 5D |  if_ne	jmp	#LR__1045
0ca48                 | LR__1046
0ca48     49 B5 82 F1 | 	sub	local08, arg01
0ca4c     5A 7B 02 F6 | 	mov	result1, local08
0ca50     54 00 00 FF 
0ca54     CC 64 06 F1 | 	add	objptr, ##43212
0ca58     32 7B 62 FC | 	wrlong	result1, objptr
0ca5c     58 64 86 F1 | 	sub	objptr, #88
0ca60     32 93 02 FB | 	rdlong	arg01, objptr
0ca64     3D 93 82 F1 | 	sub	arg01, result1
0ca68     04 92 86 F1 | 	sub	arg01, #4
0ca6c     03 92 26 F5 | 	andn	arg01, #3
0ca70     32 93 62 FC | 	wrlong	arg01, objptr
0ca74     58 64 06 F1 | 	add	objptr, #88
0ca78     32 95 02 FB | 	rdlong	arg02, objptr
0ca7c     54 00 00 FF 
0ca80     CC 64 86 F1 | 	sub	objptr, ##43212
0ca84     E8 43 B1 FD | 	call	#_pslpoke
0ca88                 | '     pslpoke memtop,l
0ca88                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
0ca88     01 B8 06 F6 | 	mov	local10, #1
0ca8c     54 00 00 FF 
0ca90     CC 64 06 F1 | 	add	objptr, ##43212
0ca94     32 BB 02 FB | 	rdlong	local11, objptr
0ca98     54 00 00 FF 
0ca9c     CC 64 86 F1 | 	sub	objptr, ##43212
0caa0     01 BA 06 F1 | 	add	local11, #1
0caa4                 | LR__1047
0caa4     5D B9 52 F2 | 	cmps	local10, local11 wc
0caa8     5C 00 90 3D |  if_ae	jmp	#LR__1048
0caac     54 00 00 FF 
0cab0     74 64 06 F1 | 	add	objptr, ##43124
0cab4     32 B3 02 FB | 	rdlong	local07, objptr
0cab8     03 B2 06 F1 | 	add	local07, #3
0cabc     5C B3 02 F1 | 	add	local07, local10
0cac0     1B 00 00 FF 
0cac4     8C 64 86 F1 | 	sub	objptr, ##13964
0cac8     32 B7 02 FB | 	rdlong	local09, objptr
0cacc     03 B6 66 F0 | 	shl	local09, #3
0cad0     02 00 00 FF 
0cad4     38 64 86 F1 | 	sub	objptr, ##1080
0cad8     32 B7 02 F1 | 	add	local09, objptr
0cadc     5B 93 02 FB | 	rdlong	arg01, local09
0cae0     5C 95 02 F6 | 	mov	arg02, local10
0cae4     01 96 06 F6 | 	mov	arg03, #1
0cae8     36 00 00 FF 
0caec     B0 65 86 F1 | 	sub	objptr, ##28080
0caf0     A4 98 B1 FD | 	call	#__system__Mid_S
0caf4     3D 95 C2 FA | 	rdbyte	arg02, result1
0caf8     59 93 02 F6 | 	mov	arg01, local07
0cafc     00 44 B1 FD | 	call	#_pspoke
0cb00     01 B8 06 F1 | 	add	local10, #1
0cb04     9C FF 9F FD | 	jmp	#LR__1047
0cb08                 | LR__1048
0cb08     54 00 00 FF 
0cb0c     74 64 06 F1 | 	add	objptr, ##43124
0cb10     32 A7 02 FB | 	rdlong	local01, objptr
0cb14     2B AA 06 F6 | 	mov	local03, #43
0cb18     53 B1 02 F6 | 	mov	local06, local01
0cb1c     54 B3 02 F6 | 	mov	local07, local02
0cb20     55 BB 02 F6 | 	mov	local11, local03
0cb24     08 00 00 FF 
0cb28     54 64 86 F1 | 	sub	objptr, ##4180
0cb2c     32 B9 02 FB | 	rdlong	local10, objptr
0cb30     5C B7 02 F6 | 	mov	local09, local10
0cb34     01 B6 66 F0 | 	shl	local09, #1
0cb38     5C B7 02 F1 | 	add	local09, local10
0cb3c     02 B6 66 F0 | 	shl	local09, #2
0cb40     03 00 00 FF 
0cb44     00 64 86 F1 | 	sub	objptr, ##1536
0cb48     32 B7 02 F1 | 	add	local09, objptr
0cb4c     5B B1 62 FC | 	wrlong	local06, local09
0cb50     03 00 00 FF 
0cb54     00 64 06 F1 | 	add	objptr, ##1536
0cb58     32 B9 02 FB | 	rdlong	local10, objptr
0cb5c     5C B7 02 F6 | 	mov	local09, local10
0cb60     01 B6 66 F0 | 	shl	local09, #1
0cb64     5C B7 02 F1 | 	add	local09, local10
0cb68     02 B6 66 F0 | 	shl	local09, #2
0cb6c     03 00 00 FF 
0cb70     00 64 86 F1 | 	sub	objptr, ##1536
0cb74     32 B7 02 F1 | 	add	local09, objptr
0cb78     04 B6 06 F1 | 	add	local09, #4
0cb7c     5B B3 62 FC | 	wrlong	local07, local09
0cb80     03 00 00 FF 
0cb84     00 64 06 F1 | 	add	objptr, ##1536
0cb88     32 B9 02 FB | 	rdlong	local10, objptr
0cb8c     5C B7 02 F6 | 	mov	local09, local10
0cb90     01 B6 66 F0 | 	shl	local09, #1
0cb94     5C B7 02 F1 | 	add	local09, local10
0cb98     02 B6 66 F0 | 	shl	local09, #2
0cb9c     03 00 00 FF 
0cba0     00 64 86 F1 | 	sub	objptr, ##1536
0cba4     32 B7 02 F1 | 	add	local09, objptr
0cba8     08 B6 06 F1 | 	add	local09, #8
0cbac     5B BB 62 FC | 	wrlong	local11, local09
0cbb0     03 00 00 FF 
0cbb4     00 64 06 F1 | 	add	objptr, ##1536
0cbb8     32 B1 02 FB | 	rdlong	local06, objptr
0cbbc     01 B0 06 F1 | 	add	local06, #1
0cbc0     32 B1 62 FC | 	wrlong	local06, objptr
0cbc4     13 00 00 FF 
0cbc8     38 64 86 F1 | 	sub	objptr, ##9784
0cbcc     32 B1 02 FB | 	rdlong	local06, objptr
0cbd0     01 B0 06 F1 | 	add	local06, #1
0cbd4     32 B1 62 FC | 	wrlong	local06, objptr
0cbd8     38 00 00 FF 
0cbdc     E8 65 86 F1 | 	sub	objptr, ##29160
0cbe0     DC 01 90 FD | 	jmp	#LR__1053
0cbe4                 | LR__1049
0cbe4     2C AA 06 F6 | 	mov	local03, #44
0cbe8     38 00 00 FF 
0cbec     E8 65 06 F1 | 	add	objptr, ##29160
0cbf0     32 B1 02 FB | 	rdlong	local06, objptr
0cbf4     03 B0 66 F0 | 	shl	local06, #3
0cbf8     02 00 00 FF 
0cbfc     38 64 86 F1 | 	sub	objptr, ##1080
0cc00     32 B1 02 F1 | 	add	local06, objptr
0cc04     58 93 02 FB | 	rdlong	arg01, local06
0cc08     00 94 06 F6 | 	mov	arg02, #0
0cc0c     36 00 00 FF 
0cc10     B0 65 86 F1 | 	sub	objptr, ##28080
0cc14     14 AB B1 FD | 	call	#__system____builtin_atoi
0cc18     3D A7 02 F6 | 	mov	local01, result1
0cc1c     53 B1 02 F6 | 	mov	local06, local01
0cc20     54 B3 02 F6 | 	mov	local07, local02
0cc24     55 BB 02 F6 | 	mov	local11, local03
0cc28     4C 00 00 FF 
0cc2c     20 64 06 F1 | 	add	objptr, ##38944
0cc30     32 B9 02 FB | 	rdlong	local10, objptr
0cc34     5C B7 02 F6 | 	mov	local09, local10
0cc38     01 B6 66 F0 | 	shl	local09, #1
0cc3c     5C B7 02 F1 | 	add	local09, local10
0cc40     02 B6 66 F0 | 	shl	local09, #2
0cc44     03 00 00 FF 
0cc48     00 64 86 F1 | 	sub	objptr, ##1536
0cc4c     32 B7 02 F1 | 	add	local09, objptr
0cc50     5B B1 62 FC | 	wrlong	local06, local09
0cc54     03 00 00 FF 
0cc58     00 64 06 F1 | 	add	objptr, ##1536
0cc5c     32 B9 02 FB | 	rdlong	local10, objptr
0cc60     5C B7 02 F6 | 	mov	local09, local10
0cc64     01 B6 66 F0 | 	shl	local09, #1
0cc68     5C B7 02 F1 | 	add	local09, local10
0cc6c     02 B6 66 F0 | 	shl	local09, #2
0cc70     03 00 00 FF 
0cc74     00 64 86 F1 | 	sub	objptr, ##1536
0cc78     32 B7 02 F1 | 	add	local09, objptr
0cc7c     04 B6 06 F1 | 	add	local09, #4
0cc80     5B B3 62 FC | 	wrlong	local07, local09
0cc84     03 00 00 FF 
0cc88     00 64 06 F1 | 	add	objptr, ##1536
0cc8c     32 B9 02 FB | 	rdlong	local10, objptr
0cc90     5C B7 02 F6 | 	mov	local09, local10
0cc94     01 B6 66 F0 | 	shl	local09, #1
0cc98     5C B7 02 F1 | 	add	local09, local10
0cc9c     02 B6 66 F0 | 	shl	local09, #2
0cca0     03 00 00 FF 
0cca4     00 64 86 F1 | 	sub	objptr, ##1536
0cca8     32 B7 02 F1 | 	add	local09, objptr
0ccac     08 B6 06 F1 | 	add	local09, #8
0ccb0     5B BB 62 FC | 	wrlong	local11, local09
0ccb4     03 00 00 FF 
0ccb8     00 64 06 F1 | 	add	objptr, ##1536
0ccbc     32 B1 02 FB | 	rdlong	local06, objptr
0ccc0     01 B0 06 F1 | 	add	local06, #1
0ccc4     32 B1 62 FC | 	wrlong	local06, objptr
0ccc8     13 00 00 FF 
0cccc     38 64 86 F1 | 	sub	objptr, ##9784
0ccd0     32 B1 02 FB | 	rdlong	local06, objptr
0ccd4     01 B0 06 F1 | 	add	local06, #1
0ccd8     32 B1 62 FC | 	wrlong	local06, objptr
0ccdc     38 00 00 FF 
0cce0     E8 65 86 F1 | 	sub	objptr, ##29160
0cce4     D8 00 90 FD | 	jmp	#LR__1053
0cce8                 | LR__1050
0cce8     56 93 02 F6 | 	mov	arg01, local04
0ccec     24 04 B0 FD | 	call	#_getvar
0ccf0     38 00 00 FF 
0ccf4     E8 65 06 F1 | 	add	objptr, ##29160
0ccf8     32 B1 02 FB | 	rdlong	local06, objptr
0ccfc     01 B0 06 F1 | 	add	local06, #1
0cd00     32 B1 62 FC | 	wrlong	local06, objptr
0cd04     38 00 00 FF 
0cd08     E8 65 86 F1 | 	sub	objptr, ##29160
0cd0c                 | '     err=getvar(m) : ct+=1 : if err>0 then return err 
0cd0c     01 7A 56 F2 | 	cmps	result1, #1 wc
0cd10     B0 00 90 3D |  if_ae	jmp	#LR__1054
0cd14     A8 00 90 FD | 	jmp	#LR__1053
0cd18                 | LR__1051
0cd18     38 00 00 FF 
0cd1c     E8 65 06 F1 | 	add	objptr, ##29160
0cd20     32 B1 02 FB | 	rdlong	local06, objptr
0cd24     01 B0 06 F1 | 	add	local06, #1
0cd28     32 B1 62 FC | 	wrlong	local06, objptr
0cd2c     38 00 00 FF 
0cd30     E8 65 86 F1 | 	sub	objptr, ##29160
0cd34     20 F1 BF FD | 	call	#_expr
0cd38                 | '     ct+=1
0cd38                 | '     err=expr() : if err>0 then return err 
0cd38     01 7A 56 F2 | 	cmps	result1, #1 wc
0cd3c     84 00 90 3D |  if_ae	jmp	#LR__1054
0cd40                 | '     if lparts(ct).token=token_rpar then ct+=1
0cd40     38 00 00 FF 
0cd44     E8 65 06 F1 | 	add	objptr, ##29160
0cd48     32 BB 02 FB | 	rdlong	local11, objptr
0cd4c     03 BA 66 F0 | 	shl	local11, #3
0cd50     02 00 00 FF 
0cd54     38 64 86 F1 | 	sub	objptr, ##1080
0cd58     32 BB 02 F1 | 	add	local11, objptr
0cd5c     04 BA 06 F1 | 	add	local11, #4
0cd60     5D BB 02 FB | 	rdlong	local11, local11
0cd64     14 BA 0E F2 | 	cmp	local11, #20 wz
0cd68     36 00 00 FF 
0cd6c     B0 65 86 F1 | 	sub	objptr, ##28080
0cd70     4C 00 90 5D |  if_ne	jmp	#LR__1053
0cd74     38 00 00 FF 
0cd78     E8 65 06 F1 | 	add	objptr, ##29160
0cd7c     32 B1 02 FB | 	rdlong	local06, objptr
0cd80     01 B0 06 F1 | 	add	local06, #1
0cd84     32 B1 62 FC | 	wrlong	local06, objptr
0cd88     38 00 00 FF 
0cd8c     E8 65 86 F1 | 	sub	objptr, ##29160
0cd90     2C 00 90 FD | 	jmp	#LR__1053
0cd94                 | LR__1052
0cd94     56 93 02 F6 | 	mov	arg01, local04
0cd98     34 00 B0 FD | 	call	#_getfun
0cd9c     38 00 00 FF 
0cda0     E8 65 06 F1 | 	add	objptr, ##29160
0cda4     32 B1 02 FB | 	rdlong	local06, objptr
0cda8     01 B0 06 F1 | 	add	local06, #1
0cdac     32 B1 62 FC | 	wrlong	local06, objptr
0cdb0     38 00 00 FF 
0cdb4     E8 65 86 F1 | 	sub	objptr, ##29160
0cdb8                 | '     err=getfun(m) : ct+=1 : if err>0 then return err 
0cdb8     01 7A 56 F2 | 	cmps	result1, #1 wc
0cdbc     04 00 90 3D |  if_ae	jmp	#LR__1054
0cdc0                 | LR__1053
0cdc0                 | ' return 0  
0cdc0     00 7A 06 F6 | 	mov	result1, #0
0cdc4                 | LR__1054
0cdc4     E7 F0 03 F6 | 	mov	ptra, fp
0cdc8     F2 00 A0 FD | 	call	#popregs_
0cdcc                 | _getvalue_ret
0cdcc     2D 00 64 FD | 	ret
0cdd0                 | 
0cdd0                 | ' 
0cdd0                 | ' ' Get a function result 
0cdd0                 | ' 
0cdd0                 | ' function getfun(m as integer) as ulong
0cdd0                 | _getfun
0cdd0     0F CA 05 F6 | 	mov	COUNT_, #15
0cdd4     E8 00 A0 FD | 	call	#pushregs_
0cdd8                 | _getfun_enter
0cdd8     49 AD 02 F6 | 	mov	local04, arg01
0cddc     38 00 00 FF 
0cde0     E8 65 06 F1 | 	add	objptr, ##29160
0cde4     32 AF 02 FB | 	rdlong	local05, objptr
0cde8     57 B1 02 F6 | 	mov	local06, local05
0cdec     00 B2 06 F6 | 	mov	local07, #0
0cdf0                 | ' oldct=ct
0cdf0                 | ' numpar=0
0cdf0                 | ' if lparts(ct+1).token=token_lpar then
0cdf0     01 AE 06 F1 | 	add	local05, #1
0cdf4     03 AE 66 F0 | 	shl	local05, #3
0cdf8     02 00 00 FF 
0cdfc     38 64 86 F1 | 	sub	objptr, ##1080
0ce00     32 AF 02 F1 | 	add	local05, objptr
0ce04     04 AE 06 F1 | 	add	local05, #4
0ce08     57 AF 02 FB | 	rdlong	local05, local05
0ce0c     15 AE 0E F2 | 	cmp	local05, #21 wz
0ce10     36 00 00 FF 
0ce14     B0 65 86 F1 | 	sub	objptr, ##28080
0ce18     54 01 90 5D |  if_ne	jmp	#LR__1064
0ce1c     38 00 00 FF 
0ce20     E8 65 06 F1 | 	add	objptr, ##29160
0ce24     32 B5 02 FB | 	rdlong	local08, objptr
0ce28     01 B4 06 F1 | 	add	local08, #1
0ce2c     32 B5 62 FC | 	wrlong	local08, objptr
0ce30     38 00 00 FF 
0ce34     E8 65 86 F1 | 	sub	objptr, ##29160
0ce38                 | '   ct+=1 											' omit this lpar, this is for expr list
0ce38                 | '   do
0ce38                 | LR__1060
0ce38     38 00 00 FF 
0ce3c     E8 65 06 F1 | 	add	objptr, ##29160
0ce40     32 AF 02 FB | 	rdlong	local05, objptr
0ce44     01 AE 06 F1 | 	add	local05, #1
0ce48     32 AF 62 FC | 	wrlong	local05, objptr
0ce4c                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0ce4c                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0ce4c     03 AE 66 F0 | 	shl	local05, #3
0ce50     02 00 00 FF 
0ce54     38 64 86 F1 | 	sub	objptr, ##1080
0ce58     32 AF 02 F1 | 	add	local05, objptr
0ce5c     04 AE 06 F1 | 	add	local05, #4
0ce60     57 B5 02 FB | 	rdlong	local08, local05
0ce64     15 B4 0E F2 | 	cmp	local08, #21 wz
0ce68     36 00 00 FF 
0ce6c     B0 65 86 F1 | 	sub	objptr, ##28080
0ce70     44 00 90 5D |  if_ne	jmp	#LR__1061
0ce74     38 00 00 FF 
0ce78     E8 65 06 F1 | 	add	objptr, ##29160
0ce7c     32 B5 02 FB | 	rdlong	local08, objptr
0ce80     01 B4 06 F1 | 	add	local08, #1
0ce84     32 B5 62 FC | 	wrlong	local08, objptr
0ce88     38 00 00 FF 
0ce8c     E8 65 86 F1 | 	sub	objptr, ##29160
0ce90     C4 EF BF FD | 	call	#_expr
0ce94     3D B7 02 F6 | 	mov	local09, result1
0ce98     38 00 00 FF 
0ce9c     E8 65 06 F1 | 	add	objptr, ##29160
0cea0     32 B5 02 FB | 	rdlong	local08, objptr
0cea4     01 B4 06 F1 | 	add	local08, #1
0cea8     32 B5 62 FC | 	wrlong	local08, objptr
0ceac     38 00 00 FF 
0ceb0     E8 65 86 F1 | 	sub	objptr, ##29160
0ceb4     08 00 90 FD | 	jmp	#LR__1062
0ceb8                 | LR__1061
0ceb8     9C EF BF FD | 	call	#_expr
0cebc     3D B7 02 F6 | 	mov	local09, result1
0cec0                 | LR__1062
0cec0                 | '     if err>0 then return err
0cec0     01 B6 16 F2 | 	cmp	local09, #1 wc
0cec4     5B 7B 02 36 |  if_ae	mov	result1, local09
0cec8     3C 02 90 3D |  if_ae	jmp	#LR__1066
0cecc     01 B2 06 F1 | 	add	local07, #1
0ced0     38 00 00 FF 
0ced4     E8 65 06 F1 | 	add	objptr, ##29160
0ced8     32 AF 02 FB | 	rdlong	local05, objptr
0cedc     03 AE 66 F0 | 	shl	local05, #3
0cee0     02 00 00 FF 
0cee4     38 64 86 F1 | 	sub	objptr, ##1080
0cee8     32 AF 02 F1 | 	add	local05, objptr
0ceec     04 AE 06 F1 | 	add	local05, #4
0cef0     57 B7 02 FB | 	rdlong	local09, local05
0cef4     14 B6 0E F2 | 	cmp	local09, #20 wz
0cef8     36 00 00 FF 
0cefc     B0 65 86 F1 | 	sub	objptr, ##28080
0cf00     34 00 90 AD |  if_e	jmp	#LR__1063
0cf04     38 00 00 FF 
0cf08     E8 65 06 F1 | 	add	objptr, ##29160
0cf0c     32 B7 02 FB | 	rdlong	local09, objptr
0cf10     03 B6 66 F0 | 	shl	local09, #3
0cf14     02 00 00 FF 
0cf18     38 64 86 F1 | 	sub	objptr, ##1080
0cf1c     32 B7 02 F1 | 	add	local09, objptr
0cf20     04 B6 06 F1 | 	add	local09, #4
0cf24     5B B7 02 FB | 	rdlong	local09, local09
0cf28     FE B7 0E F2 | 	cmp	local09, #510 wz
0cf2c     36 00 00 FF 
0cf30     B0 65 86 F1 | 	sub	objptr, ##28080
0cf34     00 FF 9F 5D |  if_ne	jmp	#LR__1060
0cf38                 | LR__1063
0cf38                 | '   if lparts(ct).token=token_end then return 14
0cf38     38 00 00 FF 
0cf3c     E8 65 06 F1 | 	add	objptr, ##29160
0cf40     32 AF 02 FB | 	rdlong	local05, objptr
0cf44     03 AE 66 F0 | 	shl	local05, #3
0cf48     02 00 00 FF 
0cf4c     38 64 86 F1 | 	sub	objptr, ##1080
0cf50     32 AF 02 F1 | 	add	local05, objptr
0cf54     04 AE 06 F1 | 	add	local05, #4
0cf58     57 B7 02 FB | 	rdlong	local09, local05
0cf5c     FE B7 0E F2 | 	cmp	local09, #510 wz
0cf60     36 00 00 FF 
0cf64     B0 65 86 F1 | 	sub	objptr, ##28080
0cf68     0E 7A 06 A6 |  if_e	mov	result1, #14
0cf6c     98 01 90 AD |  if_e	jmp	#LR__1066
0cf70                 | LR__1064
0cf70     59 A7 02 F6 | 	mov	local01, local07
0cf74     03 B0 66 F0 | 	shl	local06, #3
0cf78     36 00 00 FF 
0cf7c     B0 65 06 F1 | 	add	objptr, ##28080
0cf80     32 B1 02 F1 | 	add	local06, objptr
0cf84     04 B0 06 F1 | 	add	local06, #4
0cf88     58 AB 02 FB | 	rdlong	local03, local06
0cf8c     53 B5 02 F6 | 	mov	local08, local01
0cf90     54 B9 02 F6 | 	mov	local10, local02
0cf94     55 BB 02 F6 | 	mov	local11, local03
0cf98     15 00 00 FF 
0cf9c     70 64 06 F1 | 	add	objptr, ##10864
0cfa0     32 BD 02 FB | 	rdlong	local12, objptr
0cfa4     5E BF 02 F6 | 	mov	local13, local12
0cfa8     01 BE 66 F0 | 	shl	local13, #1
0cfac     5E BF 02 F1 | 	add	local13, local12
0cfb0     02 BE 66 F0 | 	shl	local13, #2
0cfb4     03 00 00 FF 
0cfb8     00 64 86 F1 | 	sub	objptr, ##1536
0cfbc     32 BF 02 F1 | 	add	local13, objptr
0cfc0     5F B5 62 FC | 	wrlong	local08, local13
0cfc4     03 00 00 FF 
0cfc8     00 64 06 F1 | 	add	objptr, ##1536
0cfcc     32 B5 02 FB | 	rdlong	local08, objptr
0cfd0     5A C1 02 F6 | 	mov	local14, local08
0cfd4     01 C0 66 F0 | 	shl	local14, #1
0cfd8     5A C1 02 F1 | 	add	local14, local08
0cfdc     02 C0 66 F0 | 	shl	local14, #2
0cfe0     03 00 00 FF 
0cfe4     00 64 86 F1 | 	sub	objptr, ##1536
0cfe8     32 C1 02 F1 | 	add	local14, objptr
0cfec     04 C0 06 F1 | 	add	local14, #4
0cff0     60 B9 62 FC | 	wrlong	local10, local14
0cff4     03 00 00 FF 
0cff8     00 64 06 F1 | 	add	objptr, ##1536
0cffc     32 B5 02 FB | 	rdlong	local08, objptr
0d000     5A C3 02 F6 | 	mov	local15, local08
0d004     01 C2 66 F0 | 	shl	local15, #1
0d008     5A C3 02 F1 | 	add	local15, local08
0d00c     02 C2 66 F0 | 	shl	local15, #2
0d010     03 00 00 FF 
0d014     00 64 86 F1 | 	sub	objptr, ##1536
0d018     32 C3 02 F1 | 	add	local15, objptr
0d01c     08 C2 06 F1 | 	add	local15, #8
0d020     61 BB 62 FC | 	wrlong	local11, local15
0d024     03 00 00 FF 
0d028     00 64 06 F1 | 	add	objptr, ##1536
0d02c     32 B5 02 FB | 	rdlong	local08, objptr
0d030     01 B4 06 F1 | 	add	local08, #1
0d034     32 B5 62 FC | 	wrlong	local08, objptr
0d038     4C 00 00 FF 
0d03c     20 64 86 F1 | 	sub	objptr, ##38944
0d040                 | ' t2.result.uresult=numpar
0d040                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0d040                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0d040                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0d040     FF FF 7F FF 
0d044     FF AD 0E F2 | 	cmp	local04, ##-1 wz
0d048     B8 00 90 5D |  if_ne	jmp	#LR__1065
0d04c     15 AA 06 F6 | 	mov	local03, #21
0d050     53 B5 02 F6 | 	mov	local08, local01
0d054     54 B9 02 F6 | 	mov	local10, local02
0d058     55 BB 02 F6 | 	mov	local11, local03
0d05c     4C 00 00 FF 
0d060     20 64 06 F1 | 	add	objptr, ##38944
0d064     32 BD 02 FB | 	rdlong	local12, objptr
0d068     5E BF 02 F6 | 	mov	local13, local12
0d06c     01 BE 66 F0 | 	shl	local13, #1
0d070     5E BF 02 F1 | 	add	local13, local12
0d074     02 BE 66 F0 | 	shl	local13, #2
0d078     03 00 00 FF 
0d07c     00 64 86 F1 | 	sub	objptr, ##1536
0d080     32 BF 02 F1 | 	add	local13, objptr
0d084     5F B5 62 FC | 	wrlong	local08, local13
0d088     03 00 00 FF 
0d08c     00 64 06 F1 | 	add	objptr, ##1536
0d090     32 C3 02 FB | 	rdlong	local15, objptr
0d094     61 C1 02 F6 | 	mov	local14, local15
0d098     01 C0 66 F0 | 	shl	local14, #1
0d09c     61 C1 02 F1 | 	add	local14, local15
0d0a0     02 C0 66 F0 | 	shl	local14, #2
0d0a4     03 00 00 FF 
0d0a8     00 64 86 F1 | 	sub	objptr, ##1536
0d0ac     32 C1 02 F1 | 	add	local14, objptr
0d0b0     04 C0 06 F1 | 	add	local14, #4
0d0b4     60 B9 62 FC | 	wrlong	local10, local14
0d0b8     03 00 00 FF 
0d0bc     00 64 06 F1 | 	add	objptr, ##1536
0d0c0     32 C1 02 FB | 	rdlong	local14, objptr
0d0c4     60 C3 02 F6 | 	mov	local15, local14
0d0c8     01 C2 66 F0 | 	shl	local15, #1
0d0cc     60 C3 02 F1 | 	add	local15, local14
0d0d0     02 C2 66 F0 | 	shl	local15, #2
0d0d4     03 00 00 FF 
0d0d8     00 64 86 F1 | 	sub	objptr, ##1536
0d0dc     32 C3 02 F1 | 	add	local15, objptr
0d0e0     08 C2 06 F1 | 	add	local15, #8
0d0e4     61 BB 62 FC | 	wrlong	local11, local15
0d0e8     03 00 00 FF 
0d0ec     00 64 06 F1 | 	add	objptr, ##1536
0d0f0     32 B5 02 FB | 	rdlong	local08, objptr
0d0f4     01 B4 06 F1 | 	add	local08, #1
0d0f8     32 B5 62 FC | 	wrlong	local08, objptr
0d0fc     4C 00 00 FF 
0d100     20 64 86 F1 | 	sub	objptr, ##38944
0d104                 | LR__1065
0d104                 | ' return 0
0d104     00 7A 06 F6 | 	mov	result1, #0
0d108                 | LR__1066
0d108     E7 F0 03 F6 | 	mov	ptra, fp
0d10c     F2 00 A0 FD | 	call	#popregs_
0d110                 | _getfun_ret
0d110     2D 00 64 FD | 	ret
0d114                 | 
0d114                 | '   
0d114                 | '   
0d114                 | ' function getvar(m as integer) as ulong
0d114                 | _getvar
0d114     11 CA 05 F6 | 	mov	COUNT_, #17
0d118     E8 00 A0 FD | 	call	#pushregs_
0d11c                 | _getvar_enter
0d11c     49 AD 02 F6 | 	mov	local04, arg01
0d120     38 00 00 FF 
0d124     E8 65 06 F1 | 	add	objptr, ##29160
0d128     32 AF 02 FB | 	rdlong	local05, objptr
0d12c     03 AE 66 F0 | 	shl	local05, #3
0d130     02 00 00 FF 
0d134     38 64 86 F1 | 	sub	objptr, ##1080
0d138     32 AF 02 F1 | 	add	local05, objptr
0d13c     57 B1 02 FB | 	rdlong	local06, local05
0d140     01 B2 66 F6 | 	neg	local07, #1
0d144                 | ' 
0d144                 | ' varname$=lparts(ct).part$
0d144                 | ' j=-1
0d144                 | ' 
0d144                 | ' for i=0 to varnum-1
0d144     00 B4 06 F6 | 	mov	local08, #0
0d148     04 64 86 F1 | 	sub	objptr, #4
0d14c     32 B7 02 FB | 	rdlong	local09, objptr
0d150     36 00 00 FF 
0d154     AC 65 86 F1 | 	sub	objptr, ##28076
0d158                 | LR__1070
0d158     5B B5 52 F2 | 	cmps	local08, local09 wc
0d15c     34 00 90 3D |  if_ae	jmp	#LR__1071
0d160                 | '   if variables(i).name=varname$ then j=i : exit
0d160     5A AF 02 F6 | 	mov	local05, local08
0d164     04 AE 66 F0 | 	shl	local05, #4
0d168     32 95 02 F6 | 	mov	arg02, objptr
0d16c     16 00 00 FF 
0d170     9C 95 06 F1 | 	add	arg02, ##11676
0d174     4A AF 02 F1 | 	add	local05, arg02
0d178     57 93 02 FB | 	rdlong	arg01, local05
0d17c     58 95 02 F6 | 	mov	arg02, local06
0d180     7C 78 B1 FD | 	call	#__system___string_cmp
0d184     00 7A 0E F2 | 	cmp	result1, #0 wz
0d188     5A B3 02 A6 |  if_e	mov	local07, local08
0d18c     01 B4 06 51 |  if_ne	add	local08, #1
0d190     C4 FF 9F 5D |  if_ne	jmp	#LR__1070
0d194                 | LR__1071
0d194                 | ' if  j=-1 andalso varnum<maxvars then   
0d194     FF FF 7F FF 
0d198     FF B3 0E F2 | 	cmp	local07, ##-1 wz
0d19c     A8 00 90 5D |  if_ne	jmp	#LR__1072
0d1a0     36 00 00 FF 
0d1a4     AC 65 06 F1 | 	add	objptr, ##28076
0d1a8     32 B7 02 FB | 	rdlong	local09, objptr
0d1ac     36 00 00 FF 
0d1b0     AC 65 86 F1 | 	sub	objptr, ##28076
0d1b4     02 00 00 FF 
0d1b8     00 B6 56 F2 | 	cmps	local09, ##1024 wc
0d1bc     88 00 90 3D |  if_ae	jmp	#LR__1072
0d1c0     36 00 00 FF 
0d1c4     AC 65 06 F1 | 	add	objptr, ##28076
0d1c8     32 AF 02 FB | 	rdlong	local05, objptr
0d1cc     04 AE 66 F0 | 	shl	local05, #4
0d1d0     20 00 00 FF 
0d1d4     10 64 86 F1 | 	sub	objptr, ##16400
0d1d8     32 AF 02 F1 | 	add	local05, objptr
0d1dc     57 B1 62 FC | 	wrlong	local06, local05
0d1e0     20 00 00 FF 
0d1e4     10 64 06 F1 | 	add	objptr, ##16400
0d1e8     32 AF 02 FB | 	rdlong	local05, objptr
0d1ec     04 AE 66 F0 | 	shl	local05, #4
0d1f0     20 00 00 FF 
0d1f4     10 64 86 F1 | 	sub	objptr, ##16400
0d1f8     32 AF 02 F1 | 	add	local05, objptr
0d1fc     04 AE 06 F1 | 	add	local05, #4
0d200     57 01 68 FC | 	wrlong	#0, local05
0d204     20 00 00 FF 
0d208     10 64 06 F1 | 	add	objptr, ##16400
0d20c     32 AF 02 FB | 	rdlong	local05, objptr
0d210     04 AE 66 F0 | 	shl	local05, #4
0d214     20 00 00 FF 
0d218     10 64 86 F1 | 	sub	objptr, ##16400
0d21c     32 AF 02 F1 | 	add	local05, objptr
0d220     0C AE 06 F1 | 	add	local05, #12
0d224     57 39 68 FC | 	wrlong	#28, local05
0d228     20 00 00 FF 
0d22c     10 64 06 F1 | 	add	objptr, ##16400
0d230     32 B7 02 FB | 	rdlong	local09, objptr
0d234     5B B3 02 F6 | 	mov	local07, local09
0d238     01 B6 06 F1 | 	add	local09, #1
0d23c     32 B7 62 FC | 	wrlong	local09, objptr
0d240     36 00 00 FF 
0d244     AC 65 86 F1 | 	sub	objptr, ##28076
0d248                 | LR__1072
0d248     00 B4 06 F6 | 	mov	local08, #0
0d24c                 | ' numpar=0
0d24c                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0d24c     38 00 00 FF 
0d250     E8 65 06 F1 | 	add	objptr, ##29160
0d254     32 AF 02 FB | 	rdlong	local05, objptr
0d258     01 AE 06 F1 | 	add	local05, #1
0d25c     03 AE 66 F0 | 	shl	local05, #3
0d260     02 00 00 FF 
0d264     38 64 86 F1 | 	sub	objptr, ##1080
0d268     32 AF 02 F1 | 	add	local05, objptr
0d26c     04 AE 06 F1 | 	add	local05, #4
0d270     57 B7 02 FB | 	rdlong	local09, local05
0d274     15 B6 0E F2 | 	cmp	local09, #21 wz
0d278     36 00 00 FF 
0d27c     B0 65 86 F1 | 	sub	objptr, ##28080
0d280     54 01 90 5D |  if_ne	jmp	#LR__1077
0d284     38 00 00 FF 
0d288     E8 65 06 F1 | 	add	objptr, ##29160
0d28c     32 B9 02 FB | 	rdlong	local10, objptr
0d290     01 B8 06 F1 | 	add	local10, #1
0d294     32 B9 62 FC | 	wrlong	local10, objptr
0d298     38 00 00 FF 
0d29c     E8 65 86 F1 | 	sub	objptr, ##29160
0d2a0                 | '   ct+=1 											' omit this lpar, this is for expr list
0d2a0                 | '   do
0d2a0                 | LR__1073
0d2a0     38 00 00 FF 
0d2a4     E8 65 06 F1 | 	add	objptr, ##29160
0d2a8     32 AF 02 FB | 	rdlong	local05, objptr
0d2ac     01 AE 06 F1 | 	add	local05, #1
0d2b0     32 AF 62 FC | 	wrlong	local05, objptr
0d2b4                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0d2b4                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0d2b4     03 AE 66 F0 | 	shl	local05, #3
0d2b8     02 00 00 FF 
0d2bc     38 64 86 F1 | 	sub	objptr, ##1080
0d2c0     32 AF 02 F1 | 	add	local05, objptr
0d2c4     04 AE 06 F1 | 	add	local05, #4
0d2c8     57 B9 02 FB | 	rdlong	local10, local05
0d2cc     15 B8 0E F2 | 	cmp	local10, #21 wz
0d2d0     36 00 00 FF 
0d2d4     B0 65 86 F1 | 	sub	objptr, ##28080
0d2d8     44 00 90 5D |  if_ne	jmp	#LR__1074
0d2dc     38 00 00 FF 
0d2e0     E8 65 06 F1 | 	add	objptr, ##29160
0d2e4     32 B9 02 FB | 	rdlong	local10, objptr
0d2e8     01 B8 06 F1 | 	add	local10, #1
0d2ec     32 B9 62 FC | 	wrlong	local10, objptr
0d2f0     38 00 00 FF 
0d2f4     E8 65 86 F1 | 	sub	objptr, ##29160
0d2f8     5C EB BF FD | 	call	#_expr
0d2fc     3D BB 02 F6 | 	mov	local11, result1
0d300     38 00 00 FF 
0d304     E8 65 06 F1 | 	add	objptr, ##29160
0d308     32 B9 02 FB | 	rdlong	local10, objptr
0d30c     01 B8 06 F1 | 	add	local10, #1
0d310     32 B9 62 FC | 	wrlong	local10, objptr
0d314     38 00 00 FF 
0d318     E8 65 86 F1 | 	sub	objptr, ##29160
0d31c     08 00 90 FD | 	jmp	#LR__1075
0d320                 | LR__1074
0d320     34 EB BF FD | 	call	#_expr
0d324     3D BB 02 F6 | 	mov	local11, result1
0d328                 | LR__1075
0d328                 | '     if err>0 then return err
0d328     01 BA 56 F2 | 	cmps	local11, #1 wc
0d32c     5D 7B 02 36 |  if_ae	mov	result1, local11
0d330     2C 02 90 3D |  if_ae	jmp	#LR__1079
0d334     01 B4 06 F1 | 	add	local08, #1
0d338     38 00 00 FF 
0d33c     E8 65 06 F1 | 	add	objptr, ##29160
0d340     32 AF 02 FB | 	rdlong	local05, objptr
0d344     03 AE 66 F0 | 	shl	local05, #3
0d348     02 00 00 FF 
0d34c     38 64 86 F1 | 	sub	objptr, ##1080
0d350     32 AF 02 F1 | 	add	local05, objptr
0d354     04 AE 06 F1 | 	add	local05, #4
0d358     57 BB 02 FB | 	rdlong	local11, local05
0d35c     14 BA 0E F2 | 	cmp	local11, #20 wz
0d360     36 00 00 FF 
0d364     B0 65 86 F1 | 	sub	objptr, ##28080
0d368     34 00 90 AD |  if_e	jmp	#LR__1076
0d36c     38 00 00 FF 
0d370     E8 65 06 F1 | 	add	objptr, ##29160
0d374     32 BB 02 FB | 	rdlong	local11, objptr
0d378     03 BA 66 F0 | 	shl	local11, #3
0d37c     02 00 00 FF 
0d380     38 64 86 F1 | 	sub	objptr, ##1080
0d384     32 BB 02 F1 | 	add	local11, objptr
0d388     04 BA 06 F1 | 	add	local11, #4
0d38c     5D BB 02 FB | 	rdlong	local11, local11
0d390     FE BB 0E F2 | 	cmp	local11, #510 wz
0d394     36 00 00 FF 
0d398     B0 65 86 F1 | 	sub	objptr, ##28080
0d39c     00 FF 9F 5D |  if_ne	jmp	#LR__1073
0d3a0                 | LR__1076
0d3a0                 | '     if lparts(ct).token=token_end then return 14
0d3a0     38 00 00 FF 
0d3a4     E8 65 06 F1 | 	add	objptr, ##29160
0d3a8     32 AF 02 FB | 	rdlong	local05, objptr
0d3ac     03 AE 66 F0 | 	shl	local05, #3
0d3b0     02 00 00 FF 
0d3b4     38 64 86 F1 | 	sub	objptr, ##1080
0d3b8     32 AF 02 F1 | 	add	local05, objptr
0d3bc     04 AE 06 F1 | 	add	local05, #4
0d3c0     57 BB 02 FB | 	rdlong	local11, local05
0d3c4     FE BB 0E F2 | 	cmp	local11, #510 wz
0d3c8     36 00 00 FF 
0d3cc     B0 65 86 F1 | 	sub	objptr, ##28080
0d3d0     0E 7A 06 A6 |  if_e	mov	result1, #14
0d3d4     88 01 90 AD |  if_e	jmp	#LR__1079
0d3d8                 | LR__1077
0d3d8     5A A9 02 F6 | 	mov	local02, local08
0d3dc     11 AA 06 F6 | 	mov	local03, #17
0d3e0     59 A7 02 F6 | 	mov	local01, local07
0d3e4     53 B9 02 F6 | 	mov	local10, local01
0d3e8     54 BD 02 F6 | 	mov	local12, local02
0d3ec     55 BF 02 F6 | 	mov	local13, local03
0d3f0     4C 00 00 FF 
0d3f4     20 64 06 F1 | 	add	objptr, ##38944
0d3f8     32 C1 02 FB | 	rdlong	local14, objptr
0d3fc     60 C3 02 F6 | 	mov	local15, local14
0d400     01 C2 66 F0 | 	shl	local15, #1
0d404     60 C3 02 F1 | 	add	local15, local14
0d408     02 C2 66 F0 | 	shl	local15, #2
0d40c     03 00 00 FF 
0d410     00 64 86 F1 | 	sub	objptr, ##1536
0d414     32 C3 02 F1 | 	add	local15, objptr
0d418     61 B9 62 FC | 	wrlong	local10, local15
0d41c     03 00 00 FF 
0d420     00 64 06 F1 | 	add	objptr, ##1536
0d424     32 B9 02 FB | 	rdlong	local10, objptr
0d428     5C C5 02 F6 | 	mov	local16, local10
0d42c     01 C4 66 F0 | 	shl	local16, #1
0d430     5C C5 02 F1 | 	add	local16, local10
0d434     02 C4 66 F0 | 	shl	local16, #2
0d438     03 00 00 FF 
0d43c     00 64 86 F1 | 	sub	objptr, ##1536
0d440     32 C5 02 F1 | 	add	local16, objptr
0d444     04 C4 06 F1 | 	add	local16, #4
0d448     62 BD 62 FC | 	wrlong	local12, local16
0d44c     03 00 00 FF 
0d450     00 64 06 F1 | 	add	objptr, ##1536
0d454     32 B9 02 FB | 	rdlong	local10, objptr
0d458     5C C7 02 F6 | 	mov	local17, local10
0d45c     01 C6 66 F0 | 	shl	local17, #1
0d460     5C C7 02 F1 | 	add	local17, local10
0d464     02 C6 66 F0 | 	shl	local17, #2
0d468     03 00 00 FF 
0d46c     00 64 86 F1 | 	sub	objptr, ##1536
0d470     32 C7 02 F1 | 	add	local17, objptr
0d474     08 C6 06 F1 | 	add	local17, #8
0d478     63 BF 62 FC | 	wrlong	local13, local17
0d47c     03 00 00 FF 
0d480     00 64 06 F1 | 	add	objptr, ##1536
0d484     32 B9 02 FB | 	rdlong	local10, objptr
0d488     01 B8 06 F1 | 	add	local10, #1
0d48c     32 B9 62 FC | 	wrlong	local10, objptr
0d490     4C 00 00 FF 
0d494     20 64 86 F1 | 	sub	objptr, ##38944
0d498                 | ' t2.result.twowords(1)=numpar
0d498                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0d498                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0d498                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0d498     FF FF 7F FF 
0d49c     FF AD 0E F2 | 	cmp	local04, ##-1 wz
0d4a0     B8 00 90 5D |  if_ne	jmp	#LR__1078
0d4a4     15 AA 06 F6 | 	mov	local03, #21
0d4a8     53 B9 02 F6 | 	mov	local10, local01
0d4ac     54 BD 02 F6 | 	mov	local12, local02
0d4b0     55 BF 02 F6 | 	mov	local13, local03
0d4b4     4C 00 00 FF 
0d4b8     20 64 06 F1 | 	add	objptr, ##38944
0d4bc     32 C1 02 FB | 	rdlong	local14, objptr
0d4c0     60 C3 02 F6 | 	mov	local15, local14
0d4c4     01 C2 66 F0 | 	shl	local15, #1
0d4c8     60 C3 02 F1 | 	add	local15, local14
0d4cc     02 C2 66 F0 | 	shl	local15, #2
0d4d0     03 00 00 FF 
0d4d4     00 64 86 F1 | 	sub	objptr, ##1536
0d4d8     32 C3 02 F1 | 	add	local15, objptr
0d4dc     61 B9 62 FC | 	wrlong	local10, local15
0d4e0     03 00 00 FF 
0d4e4     00 64 06 F1 | 	add	objptr, ##1536
0d4e8     32 C7 02 FB | 	rdlong	local17, objptr
0d4ec     63 C5 02 F6 | 	mov	local16, local17
0d4f0     01 C4 66 F0 | 	shl	local16, #1
0d4f4     63 C5 02 F1 | 	add	local16, local17
0d4f8     02 C4 66 F0 | 	shl	local16, #2
0d4fc     03 00 00 FF 
0d500     00 64 86 F1 | 	sub	objptr, ##1536
0d504     32 C5 02 F1 | 	add	local16, objptr
0d508     04 C4 06 F1 | 	add	local16, #4
0d50c     62 BD 62 FC | 	wrlong	local12, local16
0d510     03 00 00 FF 
0d514     00 64 06 F1 | 	add	objptr, ##1536
0d518     32 C5 02 FB | 	rdlong	local16, objptr
0d51c     62 C7 02 F6 | 	mov	local17, local16
0d520     01 C6 66 F0 | 	shl	local17, #1
0d524     62 C7 02 F1 | 	add	local17, local16
0d528     02 C6 66 F0 | 	shl	local17, #2
0d52c     03 00 00 FF 
0d530     00 64 86 F1 | 	sub	objptr, ##1536
0d534     32 C7 02 F1 | 	add	local17, objptr
0d538     08 C6 06 F1 | 	add	local17, #8
0d53c     63 BF 62 FC | 	wrlong	local13, local17
0d540     03 00 00 FF 
0d544     00 64 06 F1 | 	add	objptr, ##1536
0d548     32 B9 02 FB | 	rdlong	local10, objptr
0d54c     01 B8 06 F1 | 	add	local10, #1
0d550     32 B9 62 FC | 	wrlong	local10, objptr
0d554     4C 00 00 FF 
0d558     20 64 86 F1 | 	sub	objptr, ##38944
0d55c                 | LR__1078
0d55c                 | ' return 0
0d55c     00 7A 06 F6 | 	mov	result1, #0
0d560                 | LR__1079
0d560     E7 F0 03 F6 | 	mov	ptra, fp
0d564     F2 00 A0 FD | 	call	#popregs_
0d568                 | _getvar_ret
0d568     2D 00 64 FD | 	ret
0d56c                 | 
0d56c                 | ' 
0d56c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d56c                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0d56c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d56c                 | ' 
0d56c                 | ' 
0d56c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d56c                 | ' '                                                                                                                                       -
0d56c                 | ' '                                              RUNTIME STARTS HERE                                                                      - 
0d56c                 | ' '                                                                                                                                       -
0d56c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d56c                 | ' 
0d56c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0d56c                 | ' '----------------------------------------- A main execute line function ----------------------------------------------------------------
0d56c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0d56c                 | ' 
0d56c                 | ' function execute_line (astart=0 as integer) as integer
0d56c                 | _execute_line
0d56c     04 CA 05 F6 | 	mov	COUNT_, #4
0d570     E8 00 A0 FD | 	call	#pushregs_
0d574     52 00 00 FF 
0d578     60 64 06 F1 | 	add	objptr, ##42080
0d57c     32 01 68 FC | 	wrlong	#0, objptr
0d580                 | ' 
0d580                 | ' runptr2=0
0d580                 | ' for lineptr_e=astart to lineptr-1
0d580     06 00 00 FF 
0d584     3C 64 86 F1 | 	sub	objptr, ##3132
0d588     32 93 62 FC | 	wrlong	arg01, objptr
0d58c     04 64 86 F1 | 	sub	objptr, #4
0d590     32 A7 02 FB | 	rdlong	local01, objptr
0d594     4C 00 00 FF 
0d598     20 64 86 F1 | 	sub	objptr, ##38944
0d59c                 | LR__1080
0d59c     4C 00 00 FF 
0d5a0     24 64 06 F1 | 	add	objptr, ##38948
0d5a4     32 7B 02 FB | 	rdlong	result1, objptr
0d5a8     4C 00 00 FF 
0d5ac     24 64 86 F1 | 	sub	objptr, ##38948
0d5b0     53 7B 52 F2 | 	cmps	result1, local01 wc
0d5b4     98 00 90 3D |  if_ae	jmp	#LR__1081
0d5b8     4C 00 00 FF 
0d5bc     24 64 06 F1 | 	add	objptr, ##38948
0d5c0     32 7B 02 FB | 	rdlong	result1, objptr
0d5c4     3D A9 02 F6 | 	mov	local02, result1
0d5c8     01 A8 66 F0 | 	shl	local02, #1
0d5cc     3D A9 02 F1 | 	add	local02, result1
0d5d0     02 A8 66 F0 | 	shl	local02, #2
0d5d4     03 00 00 FF 
0d5d8     04 64 86 F1 | 	sub	objptr, ##1540
0d5dc     32 A9 02 F1 | 	add	local02, objptr
0d5e0     08 A8 06 F1 | 	add	local02, #8
0d5e4     54 A9 02 FB | 	rdlong	local02, local02
0d5e8     54 A9 E2 F8 | 	getbyte	local02, local02, #0
0d5ec     02 A8 66 F0 | 	shl	local02, #2
0d5f0     04 00 00 FF 
0d5f4     1C 64 86 F1 | 	sub	objptr, ##2076
0d5f8     32 A9 02 F1 | 	add	local02, objptr
0d5fc     54 A9 02 FB | 	rdlong	local02, local02
0d600     54 AB 02 F6 | 	mov	local03, local02
0d604     13 A8 46 F7 | 	zerox	local02, #19
0d608     14 AA 46 F0 | 	shr	local03, #20
0d60c     02 AA 66 F0 | 	shl	local03, #2
0d610     2D AB 02 F1 | 	add	local03, __methods__
0d614     55 AB 02 FB | 	rdlong	local03, local03
0d618     45 00 00 FF 
0d61c     04 64 86 F1 | 	sub	objptr, ##35332
0d620     32 AD 02 F6 | 	mov	local04, objptr
0d624     54 65 02 F6 | 	mov	objptr, local02
0d628     2D AA 62 FD | 	call	local03
0d62c     56 65 02 F6 | 	mov	objptr, local04
0d630     4C 00 00 FF 
0d634     24 64 06 F1 | 	add	objptr, ##38948
0d638     32 AD 02 FB | 	rdlong	local04, objptr
0d63c     01 AC 06 F1 | 	add	local04, #1
0d640     32 AD 62 FC | 	wrlong	local04, objptr
0d644     4C 00 00 FF 
0d648     24 64 86 F1 | 	sub	objptr, ##38948
0d64c     4C FF 9F FD | 	jmp	#LR__1080
0d650                 | LR__1081
0d650                 | ' return runptr2
0d650     52 00 00 FF 
0d654     60 64 06 F1 | 	add	objptr, ##42080
0d658     32 7B 02 FB | 	rdlong	result1, objptr
0d65c     52 00 00 FF 
0d660     60 64 86 F1 | 	sub	objptr, ##42080
0d664     E7 F0 03 F6 | 	mov	ptra, fp
0d668     F2 00 A0 FD | 	call	#popregs_
0d66c                 | _execute_line_ret
0d66c     2D 00 64 FD | 	ret
0d670                 | 
0d670                 | ' 
0d670                 | ' 
0d670                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d670                 | ' '--------------------------------------- Runtime helper functions -----------------------------------------------------------------------
0d670                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d670                 | ' 
0d670                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0d670                 | ' 
0d670                 | ' function pop() as expr_result
0d670                 | _pop
0d670                 | ' if stackpointer=0 then
0d670     44 00 00 FF 
0d674     FC 65 06 F1 | 	add	objptr, ##35324
0d678     32 7B 0A FB | 	rdlong	result1, objptr wz
0d67c     44 00 00 FF 
0d680     FC 65 86 F1 | 	sub	objptr, ##35324
0d684     FF 84 06 A6 |  if_e	mov	_var03, #255
0d688     18 80 06 A6 |  if_e	mov	_var01, #24
0d68c     60 00 90 AD |  if_e	jmp	#LR__1090
0d690     44 00 00 FF 
0d694     FC 65 06 F1 | 	add	objptr, ##35324
0d698     32 7B 02 FB | 	rdlong	result1, objptr
0d69c     01 7A 86 F1 | 	sub	result1, #1
0d6a0     32 7B 62 FC | 	wrlong	result1, objptr
0d6a4     3D 7F 02 F6 | 	mov	result3, result1
0d6a8     01 7E 66 F0 | 	shl	result3, #1
0d6ac     3D 7F 02 F1 | 	add	result3, result1
0d6b0     02 7E 66 F0 | 	shl	result3, #2
0d6b4     0C 00 00 FF 
0d6b8     0C 64 86 F1 | 	sub	objptr, ##6156
0d6bc     32 7F 02 F1 | 	add	result3, objptr
0d6c0     3F 81 02 FB | 	rdlong	_var01, result3
0d6c4     04 7E 06 F1 | 	add	result3, #4
0d6c8     3F 83 02 FB | 	rdlong	_var02, result3
0d6cc     3D 7D 02 F6 | 	mov	result2, result1
0d6d0     01 7C 66 F0 | 	shl	result2, #1
0d6d4     3D 7D 02 F1 | 	add	result2, result1
0d6d8     02 7C 66 F0 | 	shl	result2, #2
0d6dc     32 7D 02 F1 | 	add	result2, objptr
0d6e0     08 7C 06 F1 | 	add	result2, #8
0d6e4     3E 85 02 FB | 	rdlong	_var03, result2
0d6e8     38 00 00 FF 
0d6ec     F0 65 86 F1 | 	sub	objptr, ##29168
0d6f0                 | LR__1090
0d6f0                 | ' return t1
0d6f0     41 7D 02 F6 | 	mov	result2, _var02
0d6f4     42 7F 02 F6 | 	mov	result3, _var03
0d6f8     40 7B 02 F6 | 	mov	result1, _var01
0d6fc                 | _pop_ret
0d6fc     2D 00 64 FD | 	ret
0d700                 | 
0d700                 | ' 
0d700                 | ' sub push(t1 as expr_result )
0d700                 | _push
0d700                 | ' if stackpointer<maxstack then 
0d700     44 00 00 FF 
0d704     FC 65 06 F1 | 	add	objptr, ##35324
0d708     32 81 02 FB | 	rdlong	_var01, objptr
0d70c     44 00 00 FF 
0d710     FC 65 86 F1 | 	sub	objptr, ##35324
0d714     01 00 00 FF 
0d718     00 80 56 F2 | 	cmps	_var01, ##512 wc
0d71c     BC 00 90 3D |  if_ae	jmp	#LR__1100
0d720     49 81 02 FB | 	rdlong	_var01, arg01
0d724     04 92 06 F1 | 	add	arg01, #4
0d728     49 83 02 FB | 	rdlong	_var02, arg01
0d72c     04 92 06 F1 | 	add	arg01, #4
0d730     49 93 02 FB | 	rdlong	arg01, arg01
0d734     44 00 00 FF 
0d738     FC 65 06 F1 | 	add	objptr, ##35324
0d73c     32 85 02 FB | 	rdlong	_var03, objptr
0d740     42 87 02 F6 | 	mov	_var04, _var03
0d744     01 86 66 F0 | 	shl	_var04, #1
0d748     42 87 02 F1 | 	add	_var04, _var03
0d74c     02 86 66 F0 | 	shl	_var04, #2
0d750     0C 00 00 FF 
0d754     0C 64 86 F1 | 	sub	objptr, ##6156
0d758     32 87 02 F1 | 	add	_var04, objptr
0d75c     43 81 62 FC | 	wrlong	_var01, _var04
0d760     0C 00 00 FF 
0d764     0C 64 06 F1 | 	add	objptr, ##6156
0d768     32 87 02 FB | 	rdlong	_var04, objptr
0d76c     43 85 02 F6 | 	mov	_var03, _var04
0d770     01 84 66 F0 | 	shl	_var03, #1
0d774     43 85 02 F1 | 	add	_var03, _var04
0d778     02 84 66 F0 | 	shl	_var03, #2
0d77c     0C 00 00 FF 
0d780     0C 64 86 F1 | 	sub	objptr, ##6156
0d784     32 85 02 F1 | 	add	_var03, objptr
0d788     04 84 06 F1 | 	add	_var03, #4
0d78c     42 83 62 FC | 	wrlong	_var02, _var03
0d790     0C 00 00 FF 
0d794     0C 64 06 F1 | 	add	objptr, ##6156
0d798     32 87 02 FB | 	rdlong	_var04, objptr
0d79c     43 85 02 F6 | 	mov	_var03, _var04
0d7a0     01 84 66 F0 | 	shl	_var03, #1
0d7a4     43 85 02 F1 | 	add	_var03, _var04
0d7a8     02 84 66 F0 | 	shl	_var03, #2
0d7ac     0C 00 00 FF 
0d7b0     0C 64 86 F1 | 	sub	objptr, ##6156
0d7b4     32 85 02 F1 | 	add	_var03, objptr
0d7b8     08 84 06 F1 | 	add	_var03, #8
0d7bc     42 93 62 FC | 	wrlong	arg01, _var03
0d7c0     0C 00 00 FF 
0d7c4     0C 64 06 F1 | 	add	objptr, ##6156
0d7c8     32 81 02 FB | 	rdlong	_var01, objptr
0d7cc     01 80 06 F1 | 	add	_var01, #1
0d7d0     32 81 62 FC | 	wrlong	_var01, objptr
0d7d4     44 00 00 FF 
0d7d8     FC 65 86 F1 | 	sub	objptr, ##35324
0d7dc                 | LR__1100
0d7dc                 | _push_ret
0d7dc     2D 00 64 FD | 	ret
0d7e0                 | 
0d7e0                 | ' 
0d7e0                 | ' ' -------------------------------- Runtime converting functions
0d7e0                 | ' 
0d7e0                 | ' ' converts the PSRAM based string to 'normal' string. A PSRAM pointer at input, a string at output
0d7e0                 | ' 
0d7e0                 | ' function  convertstring(psaddr as ulong) as string
0d7e0                 | _convertstring
0d7e0     04 CA 05 F6 | 	mov	COUNT_, #4
0d7e4     E8 00 A0 FD | 	call	#pushregs_
0d7e8     49 A7 02 F6 | 	mov	local01, arg01
0d7ec     A0 37 B1 FD | 	call	#_pslpeek
0d7f0     3D A9 02 F6 | 	mov	local02, result1
0d7f4     96 01 00 FF 
0d7f8     AB AA 06 F6 | 	mov	local03, ##@LR__5942
0d7fc                 | ' l=pslpeek(psaddr) 
0d7fc                 | ' s="" 
0d7fc                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0d7fc     01 AC 06 F6 | 	mov	local04, #1
0d800     01 A8 06 F1 | 	add	local02, #1
0d804                 | LR__1110
0d804     54 AD 52 F2 | 	cmps	local04, local02 wc
0d808     30 00 90 3D |  if_ae	jmp	#LR__1111
0d80c     53 93 02 F6 | 	mov	arg01, local01
0d810     03 92 06 F1 | 	add	arg01, #3
0d814     56 93 02 F1 | 	add	arg01, local04
0d818     2C 37 B1 FD | 	call	#_pspeek
0d81c     3D 93 E2 F8 | 	getbyte	arg01, result1, #0
0d820     20 8C B1 FD | 	call	#__system__Chr_S
0d824     3D 95 02 F6 | 	mov	arg02, result1
0d828     55 93 02 F6 | 	mov	arg01, local03
0d82c     04 72 B1 FD | 	call	#__system___string_concat
0d830     3D AB 02 F6 | 	mov	local03, result1
0d834     01 AC 06 F1 | 	add	local04, #1
0d838     C8 FF 9F FD | 	jmp	#LR__1110
0d83c                 | LR__1111
0d83c                 | ' return s
0d83c     55 7B 02 F6 | 	mov	result1, local03
0d840     E7 F0 03 F6 | 	mov	ptra, fp
0d844     F2 00 A0 FD | 	call	#popregs_
0d848                 | _convertstring_ret
0d848     2D 00 64 FD | 	ret
0d84c                 | 
0d84c                 | ' 
0d84c                 | ' ' converts a variable to an integer
0d84c                 | ' 
0d84c                 | ' function converttoint (t1 as expr_result) as integer 
0d84c                 | _converttoint
0d84c     02 CA 05 F6 | 	mov	COUNT_, #2
0d850     E8 00 A0 FD | 	call	#pushregs_
0d854     49 A7 02 F6 | 	mov	local01, arg01
0d858                 | ' 
0d858                 | ' select case t1.result_type
0d858     08 A6 06 F1 | 	add	local01, #8
0d85c     53 A9 02 FB | 	rdlong	local02, local01
0d860     08 A6 86 F1 | 	sub	local01, #8
0d864     1C A8 0E F2 | 	cmp	local02, #28 wz
0d868     2C 00 90 AD |  if_e	jmp	#LR__1120
0d86c     1D A8 0E F2 | 	cmp	local02, #29 wz
0d870     2C 00 90 AD |  if_e	jmp	#LR__1121
0d874     1E A8 0E F2 | 	cmp	local02, #30 wz
0d878     2C 00 90 AD |  if_e	jmp	#LR__1122
0d87c     1F A8 0E F2 | 	cmp	local02, #31 wz
0d880     34 00 90 AD |  if_e	jmp	#LR__1123
0d884     2B A8 0E F2 | 	cmp	local02, #43 wz
0d888     44 00 90 AD |  if_e	jmp	#LR__1124
0d88c     2C A8 0E F2 | 	cmp	local02, #44 wz
0d890     5C 00 90 AD |  if_e	jmp	#LR__1125
0d894     60 00 90 FD | 	jmp	#LR__1126
0d898                 | LR__1120
0d898     53 7B 02 FB | 	rdlong	result1, local01
0d89c     5C 00 90 FD | 	jmp	#LR__1127
0d8a0                 | LR__1121
0d8a0     53 7B 02 FB | 	rdlong	result1, local01
0d8a4     54 00 90 FD | 	jmp	#LR__1127
0d8a8                 | LR__1122
0d8a8     53 93 02 FB | 	rdlong	arg01, local01
0d8ac     01 94 06 F6 | 	mov	arg02, #1
0d8b0     BC 9C B1 FD | 	call	#__system___float_tointeger
0d8b4     44 00 90 FD | 	jmp	#LR__1127
0d8b8                 | LR__1123
0d8b8     53 93 02 FB | 	rdlong	arg01, local01
0d8bc     04 A0 B1 FD | 	call	#__system____builtin_atof
0d8c0     3D 93 02 F6 | 	mov	arg01, result1
0d8c4     01 94 06 F6 | 	mov	arg02, #1
0d8c8     A4 9C B1 FD | 	call	#__system___float_tointeger
0d8cc     2C 00 90 FD | 	jmp	#LR__1127
0d8d0                 | LR__1124
0d8d0     53 93 02 FB | 	rdlong	arg01, local01
0d8d4     08 FF BF FD | 	call	#_convertstring
0d8d8     3D 93 02 F6 | 	mov	arg01, result1
0d8dc     E4 9F B1 FD | 	call	#__system____builtin_atof
0d8e0     3D 93 02 F6 | 	mov	arg01, result1
0d8e4     01 94 06 F6 | 	mov	arg02, #1
0d8e8     84 9C B1 FD | 	call	#__system___float_tointeger
0d8ec     0C 00 90 FD | 	jmp	#LR__1127
0d8f0                 | LR__1125
0d8f0     53 7B 02 FB | 	rdlong	result1, local01
0d8f4     04 00 90 FD | 	jmp	#LR__1127
0d8f8                 | LR__1126
0d8f8     00 7A 06 F6 | 	mov	result1, #0
0d8fc                 | LR__1127
0d8fc     E7 F0 03 F6 | 	mov	ptra, fp
0d900     F2 00 A0 FD | 	call	#popregs_
0d904                 | _converttoint_ret
0d904     2D 00 64 FD | 	ret
0d908                 | 
0d908                 | ' 
0d908                 | ' ' converts a variable to float
0d908                 | ' 
0d908                 | ' function converttofloat (t1 as expr_result) as single
0d908                 | _converttofloat
0d908     03 CA 05 F6 | 	mov	COUNT_, #3
0d90c     E8 00 A0 FD | 	call	#pushregs_
0d910     49 A7 02 F6 | 	mov	local01, arg01
0d914                 | ' 
0d914                 | ' select case t1.result_type
0d914     08 A6 06 F1 | 	add	local01, #8
0d918     53 A9 02 FB | 	rdlong	local02, local01
0d91c     08 A6 86 F1 | 	sub	local01, #8
0d920     1C A8 0E F2 | 	cmp	local02, #28 wz
0d924     24 00 90 AD |  if_e	jmp	#LR__1130
0d928     1D A8 0E F2 | 	cmp	local02, #29 wz
0d92c     38 00 90 AD |  if_e	jmp	#LR__1131
0d930     1E A8 0E F2 | 	cmp	local02, #30 wz
0d934     3C 00 90 AD |  if_e	jmp	#LR__1132
0d938     1F A8 0E F2 | 	cmp	local02, #31 wz
0d93c     3C 00 90 AD |  if_e	jmp	#LR__1133
0d940     2B A8 0E F2 | 	cmp	local02, #43 wz
0d944     40 00 90 AD |  if_e	jmp	#LR__1134
0d948     50 00 90 FD | 	jmp	#LR__1135
0d94c                 | LR__1130
0d94c     53 93 02 FB | 	rdlong	arg01, local01
0d950     49 93 52 F6 | 	abs	arg01, arg01 wc
0d954     1F AA C6 C9 |  if_b	decod	local03, #31
0d958     00 AA 06 36 |  if_ae	mov	local03, #0
0d95c     44 93 B1 FD | 	call	#__system___float_fromuns
0d960     55 7B 62 F5 | 	xor	result1, local03
0d964     38 00 90 FD | 	jmp	#LR__1136
0d968                 | LR__1131
0d968     53 93 02 FB | 	rdlong	arg01, local01
0d96c     34 93 B1 FD | 	call	#__system___float_fromuns
0d970     2C 00 90 FD | 	jmp	#LR__1136
0d974                 | LR__1132
0d974     53 7B 02 FB | 	rdlong	result1, local01
0d978     24 00 90 FD | 	jmp	#LR__1136
0d97c                 | LR__1133
0d97c     53 93 02 FB | 	rdlong	arg01, local01
0d980     40 9F B1 FD | 	call	#__system____builtin_atof
0d984     18 00 90 FD | 	jmp	#LR__1136
0d988                 | LR__1134
0d988     53 93 02 FB | 	rdlong	arg01, local01
0d98c     50 FE BF FD | 	call	#_convertstring
0d990     3D 93 02 F6 | 	mov	arg01, result1
0d994     2C 9F B1 FD | 	call	#__system____builtin_atof
0d998     04 00 90 FD | 	jmp	#LR__1136
0d99c                 | LR__1135
0d99c     00 7A 06 F6 | 	mov	result1, #0
0d9a0                 | LR__1136
0d9a0     E7 F0 03 F6 | 	mov	ptra, fp
0d9a4     F2 00 A0 FD | 	call	#popregs_
0d9a8                 | _converttofloat_ret
0d9a8     2D 00 64 FD | 	ret
0d9ac                 | 
0d9ac                 | ' 
0d9ac                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d9ac                 | ' '----- End of cassette procedures -------------------------------------------------------------------------------------------------------
0d9ac                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d9ac                 | ' 
0d9ac                 | ' 
0d9ac                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d9ac                 | ' '--------------------------------------- Runtime functions ------------------------------------------------------------------------------
0d9ac                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d9ac                 | ' 
0d9ac                 | ' '-------------------- abs
0d9ac                 | ' 
0d9ac                 | ' sub do_abs
0d9ac                 | _do_abs
0d9ac     01 CA 05 F6 | 	mov	COUNT_, #1
0d9b0     E8 00 A0 FD | 	call	#pushregs_
0d9b4     0C F0 07 F1 | 	add	ptra, #12
0d9b8     B4 FC BF FD | 	call	#_pop
0d9bc     3F A7 02 F6 | 	mov	local01, result3
0d9c0     E7 7A 62 FC | 	wrlong	result1, fp
0d9c4     04 CE 05 F1 | 	add	fp, #4
0d9c8     E7 7C 62 FC | 	wrlong	result2, fp
0d9cc     04 CE 05 F1 | 	add	fp, #4
0d9d0     E7 A6 62 FC | 	wrlong	local01, fp
0d9d4                 | ' 
0d9d4                 | ' t1=pop()
0d9d4                 | ' if t1.result_type=result_int then 
0d9d4     08 CE 85 F1 | 	sub	fp, #8
0d9d8     1C A6 0E F2 | 	cmp	local01, #28 wz
0d9dc     E7 92 02 AB |  if_e	rdlong	arg01, fp
0d9e0     49 A7 42 A6 |  if_e	abs	local01, arg01
0d9e4     E7 A6 62 AC |  if_e	wrlong	local01, fp
0d9e8     2C 00 90 AD |  if_e	jmp	#LR__1140
0d9ec     08 CE 05 F1 | 	add	fp, #8
0d9f0     E7 A6 02 FB | 	rdlong	local01, fp
0d9f4     08 CE 85 F1 | 	sub	fp, #8
0d9f8     1E A6 0E F2 | 	cmp	local01, #30 wz
0d9fc     E7 7A 02 AB |  if_e	rdlong	result1, fp
0da00     1F 7A 06 A4 |  if_e	bitl	result1, #31
0da04     E7 7A 62 AC |  if_e	wrlong	result1, fp
0da08     08 CE 05 51 |  if_ne	add	fp, #8
0da0c     E7 FE 69 5C |  if_ne	wrlong	#255, fp
0da10     08 CE 85 51 |  if_ne	sub	fp, #8
0da14     E7 50 68 5C |  if_ne	wrlong	#40, fp
0da18                 | LR__1140
0da18     E7 92 02 F6 | 	mov	arg01, fp
0da1c     E0 FC BF FD | 	call	#_push
0da20     E7 F0 03 F6 | 	mov	ptra, fp
0da24     F2 00 A0 FD | 	call	#popregs_
0da28                 | _do_abs_ret
0da28     2D 00 64 FD | 	ret
0da2c                 | 
0da2c                 | ' 
0da2c                 | ' '-------------------- acos
0da2c                 | ' 
0da2c                 | ' sub do_acos
0da2c                 | _do_acos
0da2c     00 CA 05 F6 | 	mov	COUNT_, #0
0da30     E8 00 A0 FD | 	call	#pushregs_
0da34     10 F0 07 F1 | 	add	ptra, #16
0da38     4C 00 00 FF 
0da3c     24 64 06 F1 | 	add	objptr, ##38948
0da40     32 97 02 FB | 	rdlong	arg03, objptr
0da44     4B 95 02 F6 | 	mov	arg02, arg03
0da48     01 94 66 F0 | 	shl	arg02, #1
0da4c     4B 95 02 F1 | 	add	arg02, arg03
0da50     02 94 66 F0 | 	shl	arg02, #2
0da54     03 00 00 FF 
0da58     04 64 86 F1 | 	sub	objptr, ##1540
0da5c     32 95 02 F1 | 	add	arg02, objptr
0da60     4A 97 02 FB | 	rdlong	arg03, arg02
0da64                 | ' 
0da64                 | ' numpar=compiledline(lineptr_e).result.uresult
0da64                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
0da64     02 96 16 F2 | 	cmp	arg03, #2 wc
0da68     49 00 00 FF 
0da6c     20 64 86 F1 | 	sub	objptr, ##37408
0da70     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
0da74     40 00 90 4D |  if_c_and_nz	jmp	#LR__1150
0da78     00 92 06 F6 | 	mov	arg01, #0
0da7c     DC C4 B1 FD | 	call	#__system___getiolock_0622
0da80     3D 93 02 F6 | 	mov	arg01, result1
0da84     50 6F B1 FD | 	call	#__system___lockmem
0da88     96 01 00 FF 
0da8c     AC 94 06 F6 | 	mov	arg02, ##@LR__5943
0da90     00 92 06 F6 | 	mov	arg01, #0
0da94     00 96 06 F6 | 	mov	arg03, #0
0da98     30 7C B1 FD | 	call	#__system___basic_print_string
0da9c     00 92 06 F6 | 	mov	arg01, #0
0daa0     B8 C4 B1 FD | 	call	#__system___getiolock_0622
0daa4     3D 01 68 FC | 	wrlong	#0, result1
0daa8     27 92 06 F6 | 	mov	arg01, #39
0daac     00 94 06 F6 | 	mov	arg02, #0
0dab0     20 32 B1 FD | 	call	#_printerror
0dab4     64 00 90 FD | 	jmp	#LR__1151
0dab8                 | LR__1150
0dab8     B4 FB BF FD | 	call	#_pop
0dabc     3F 97 02 F6 | 	mov	arg03, result3
0dac0     E7 7A 62 FC | 	wrlong	result1, fp
0dac4     04 CE 05 F1 | 	add	fp, #4
0dac8     E7 7C 62 FC | 	wrlong	result2, fp
0dacc     04 CE 05 F1 | 	add	fp, #4
0dad0     E7 96 62 FC | 	wrlong	arg03, fp
0dad4     08 CE 85 F1 | 	sub	fp, #8
0dad8     E7 92 02 F6 | 	mov	arg01, fp
0dadc     28 FE BF FD | 	call	#_converttofloat
0dae0     3D 93 02 F6 | 	mov	arg01, result1
0dae4     10 A1 B1 FD | 	call	#__system____builtin_acosf
0dae8     3D 93 02 F6 | 	mov	arg01, result1
0daec     54 00 00 FF 
0daf0     88 64 06 F1 | 	add	objptr, ##43144
0daf4     32 95 02 FB | 	rdlong	arg02, objptr
0daf8     54 00 00 FF 
0dafc     88 64 86 F1 | 	sub	objptr, ##43144
0db00     A4 95 B1 FD | 	call	#__system___float_mul
0db04     E7 7A 62 FC | 	wrlong	result1, fp
0db08     08 CE 05 F1 | 	add	fp, #8
0db0c     E7 3C 68 FC | 	wrlong	#30, fp
0db10     08 CE 85 F1 | 	sub	fp, #8
0db14     E7 92 02 F6 | 	mov	arg01, fp
0db18     E4 FB BF FD | 	call	#_push
0db1c                 | LR__1151
0db1c     E7 F0 03 F6 | 	mov	ptra, fp
0db20     F2 00 A0 FD | 	call	#popregs_
0db24                 | _do_acos_ret
0db24     2D 00 64 FD | 	ret
0db28                 | 
0db28                 | ' 
0db28                 | ' '-------------------- asc
0db28                 | ' 
0db28                 | ' sub do_asc
0db28                 | _do_asc
0db28     00 CA 05 F6 | 	mov	COUNT_, #0
0db2c     E8 00 A0 FD | 	call	#pushregs_
0db30     14 F0 07 F1 | 	add	ptra, #20
0db34     4C 00 00 FF 
0db38     24 64 06 F1 | 	add	objptr, ##38948
0db3c     32 97 02 FB | 	rdlong	arg03, objptr
0db40     4B 95 02 F6 | 	mov	arg02, arg03
0db44     01 94 66 F0 | 	shl	arg02, #1
0db48     4B 95 02 F1 | 	add	arg02, arg03
0db4c     02 94 66 F0 | 	shl	arg02, #2
0db50     03 00 00 FF 
0db54     04 64 86 F1 | 	sub	objptr, ##1540
0db58     32 95 02 F1 | 	add	arg02, objptr
0db5c     4A 97 02 FB | 	rdlong	arg03, arg02
0db60                 | ' 
0db60                 | ' numpar=compiledline(lineptr_e).result.uresult
0db60                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
0db60     02 96 16 F2 | 	cmp	arg03, #2 wc
0db64     49 00 00 FF 
0db68     20 64 86 F1 | 	sub	objptr, ##37408
0db6c     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
0db70     40 00 90 4D |  if_c_and_nz	jmp	#LR__1160
0db74     00 92 06 F6 | 	mov	arg01, #0
0db78     E0 C3 B1 FD | 	call	#__system___getiolock_0622
0db7c     3D 93 02 F6 | 	mov	arg01, result1
0db80     54 6E B1 FD | 	call	#__system___lockmem
0db84     96 01 00 FF 
0db88     B3 94 06 F6 | 	mov	arg02, ##@LR__5944
0db8c     00 92 06 F6 | 	mov	arg01, #0
0db90     00 96 06 F6 | 	mov	arg03, #0
0db94     34 7B B1 FD | 	call	#__system___basic_print_string
0db98     00 92 06 F6 | 	mov	arg01, #0
0db9c     BC C3 B1 FD | 	call	#__system___getiolock_0622
0dba0     3D 01 68 FC | 	wrlong	#0, result1
0dba4     27 92 06 F6 | 	mov	arg01, #39
0dba8     00 94 06 F6 | 	mov	arg02, #0
0dbac     24 31 B1 FD | 	call	#_printerror
0dbb0     B4 00 90 FD | 	jmp	#LR__1163
0dbb4                 | LR__1160
0dbb4     B8 FA BF FD | 	call	#_pop
0dbb8     3F 97 02 F6 | 	mov	arg03, result3
0dbbc     E7 7A 62 FC | 	wrlong	result1, fp
0dbc0     04 CE 05 F1 | 	add	fp, #4
0dbc4     E7 7C 62 FC | 	wrlong	result2, fp
0dbc8     04 CE 05 F1 | 	add	fp, #4
0dbcc     E7 96 62 FC | 	wrlong	arg03, fp
0dbd0                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0dbd0     08 CE 85 F1 | 	sub	fp, #8
0dbd4     2B 96 0E F2 | 	cmp	arg03, #43 wz
0dbd8     18 00 90 5D |  if_ne	jmp	#LR__1161
0dbdc     E7 92 02 FB | 	rdlong	arg01, fp
0dbe0     FC FB BF FD | 	call	#_convertstring
0dbe4     E7 7A 62 FC | 	wrlong	result1, fp
0dbe8     08 CE 05 F1 | 	add	fp, #8
0dbec     E7 3E 68 FC | 	wrlong	#31, fp
0dbf0     08 CE 85 F1 | 	sub	fp, #8
0dbf4                 | LR__1161
0dbf4                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
0dbf4     08 CE 05 F1 | 	add	fp, #8
0dbf8     E7 96 02 FB | 	rdlong	arg03, fp
0dbfc     08 CE 85 F1 | 	sub	fp, #8
0dc00     1F 96 0E F2 | 	cmp	arg03, #31 wz
0dc04     40 00 90 AD |  if_e	jmp	#LR__1162
0dc08     00 92 06 F6 | 	mov	arg01, #0
0dc0c     4C C3 B1 FD | 	call	#__system___getiolock_0622
0dc10     3D 93 02 F6 | 	mov	arg01, result1
0dc14     C0 6D B1 FD | 	call	#__system___lockmem
0dc18     96 01 00 FF 
0dc1c     B9 94 06 F6 | 	mov	arg02, ##@LR__5945
0dc20     00 92 06 F6 | 	mov	arg01, #0
0dc24     00 96 06 F6 | 	mov	arg03, #0
0dc28     A0 7A B1 FD | 	call	#__system___basic_print_string
0dc2c     00 92 06 F6 | 	mov	arg01, #0
0dc30     28 C3 B1 FD | 	call	#__system___getiolock_0622
0dc34     3D 01 68 FC | 	wrlong	#0, result1
0dc38     0F 92 06 F6 | 	mov	arg01, #15
0dc3c     00 94 06 F6 | 	mov	arg02, #0
0dc40     90 30 B1 FD | 	call	#_printerror
0dc44     20 00 90 FD | 	jmp	#LR__1163
0dc48                 | LR__1162
0dc48     E7 7C 02 FB | 	rdlong	result2, fp
0dc4c     3E 7D C2 FA | 	rdbyte	result2, result2
0dc50     E7 7C 62 FC | 	wrlong	result2, fp
0dc54     08 CE 05 F1 | 	add	fp, #8
0dc58     E7 38 68 FC | 	wrlong	#28, fp
0dc5c     08 CE 85 F1 | 	sub	fp, #8
0dc60     E7 92 02 F6 | 	mov	arg01, fp
0dc64     98 FA BF FD | 	call	#_push
0dc68                 | LR__1163
0dc68     E7 F0 03 F6 | 	mov	ptra, fp
0dc6c     F2 00 A0 FD | 	call	#popregs_
0dc70                 | _do_asc_ret
0dc70     2D 00 64 FD | 	ret
0dc74                 | 
0dc74                 | ' 
0dc74                 | ' '-------------------- asin
0dc74                 | ' 
0dc74                 | ' sub do_asin
0dc74                 | _do_asin
0dc74     00 CA 05 F6 | 	mov	COUNT_, #0
0dc78     E8 00 A0 FD | 	call	#pushregs_
0dc7c     10 F0 07 F1 | 	add	ptra, #16
0dc80     4C 00 00 FF 
0dc84     24 64 06 F1 | 	add	objptr, ##38948
0dc88     32 97 02 FB | 	rdlong	arg03, objptr
0dc8c     4B 95 02 F6 | 	mov	arg02, arg03
0dc90     01 94 66 F0 | 	shl	arg02, #1
0dc94     4B 95 02 F1 | 	add	arg02, arg03
0dc98     02 94 66 F0 | 	shl	arg02, #2
0dc9c     03 00 00 FF 
0dca0     04 64 86 F1 | 	sub	objptr, ##1540
0dca4     32 95 02 F1 | 	add	arg02, objptr
0dca8     4A 97 02 FB | 	rdlong	arg03, arg02
0dcac                 | ' 
0dcac                 | ' numpar=compiledline(lineptr_e).result.uresult
0dcac                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
0dcac     02 96 16 F2 | 	cmp	arg03, #2 wc
0dcb0     49 00 00 FF 
0dcb4     20 64 86 F1 | 	sub	objptr, ##37408
0dcb8     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
0dcbc     40 00 90 4D |  if_c_and_nz	jmp	#LR__1170
0dcc0     00 92 06 F6 | 	mov	arg01, #0
0dcc4     94 C2 B1 FD | 	call	#__system___getiolock_0622
0dcc8     3D 93 02 F6 | 	mov	arg01, result1
0dccc     08 6D B1 FD | 	call	#__system___lockmem
0dcd0     96 01 00 FF 
0dcd4     BF 94 06 F6 | 	mov	arg02, ##@LR__5946
0dcd8     00 92 06 F6 | 	mov	arg01, #0
0dcdc     00 96 06 F6 | 	mov	arg03, #0
0dce0     E8 79 B1 FD | 	call	#__system___basic_print_string
0dce4     00 92 06 F6 | 	mov	arg01, #0
0dce8     70 C2 B1 FD | 	call	#__system___getiolock_0622
0dcec     3D 01 68 FC | 	wrlong	#0, result1
0dcf0     27 92 06 F6 | 	mov	arg01, #39
0dcf4     00 94 06 F6 | 	mov	arg02, #0
0dcf8     D8 2F B1 FD | 	call	#_printerror
0dcfc     64 00 90 FD | 	jmp	#LR__1171
0dd00                 | LR__1170
0dd00     6C F9 BF FD | 	call	#_pop
0dd04     3F 97 02 F6 | 	mov	arg03, result3
0dd08     E7 7A 62 FC | 	wrlong	result1, fp
0dd0c     04 CE 05 F1 | 	add	fp, #4
0dd10     E7 7C 62 FC | 	wrlong	result2, fp
0dd14     04 CE 05 F1 | 	add	fp, #4
0dd18     E7 96 62 FC | 	wrlong	arg03, fp
0dd1c     08 CE 85 F1 | 	sub	fp, #8
0dd20     E7 92 02 F6 | 	mov	arg01, fp
0dd24     E0 FB BF FD | 	call	#_converttofloat
0dd28     3D 93 02 F6 | 	mov	arg01, result1
0dd2c     7C 9E B1 FD | 	call	#__system____builtin_asinf
0dd30     3D 93 02 F6 | 	mov	arg01, result1
0dd34     54 00 00 FF 
0dd38     88 64 06 F1 | 	add	objptr, ##43144
0dd3c     32 95 02 FB | 	rdlong	arg02, objptr
0dd40     54 00 00 FF 
0dd44     88 64 86 F1 | 	sub	objptr, ##43144
0dd48     5C 93 B1 FD | 	call	#__system___float_mul
0dd4c     E7 7A 62 FC | 	wrlong	result1, fp
0dd50     08 CE 05 F1 | 	add	fp, #8
0dd54     E7 3C 68 FC | 	wrlong	#30, fp
0dd58     08 CE 85 F1 | 	sub	fp, #8
0dd5c     E7 92 02 F6 | 	mov	arg01, fp
0dd60     9C F9 BF FD | 	call	#_push
0dd64                 | LR__1171
0dd64     E7 F0 03 F6 | 	mov	ptra, fp
0dd68     F2 00 A0 FD | 	call	#popregs_
0dd6c                 | _do_asin_ret
0dd6c     2D 00 64 FD | 	ret
0dd70                 | 
0dd70                 | ' 
0dd70                 | ' '-------------------- atn
0dd70                 | ' 
0dd70                 | ' sub do_atn
0dd70                 | _do_atn
0dd70     00 CA 05 F6 | 	mov	COUNT_, #0
0dd74     E8 00 A0 FD | 	call	#pushregs_
0dd78     10 F0 07 F1 | 	add	ptra, #16
0dd7c     4C 00 00 FF 
0dd80     24 64 06 F1 | 	add	objptr, ##38948
0dd84     32 97 02 FB | 	rdlong	arg03, objptr
0dd88     4B 95 02 F6 | 	mov	arg02, arg03
0dd8c     01 94 66 F0 | 	shl	arg02, #1
0dd90     4B 95 02 F1 | 	add	arg02, arg03
0dd94     02 94 66 F0 | 	shl	arg02, #2
0dd98     03 00 00 FF 
0dd9c     04 64 86 F1 | 	sub	objptr, ##1540
0dda0     32 95 02 F1 | 	add	arg02, objptr
0dda4     4A 97 02 FB | 	rdlong	arg03, arg02
0dda8                 | ' 
0dda8                 | ' numpar=compiledline(lineptr_e).result.uresult
0dda8                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
0dda8     02 96 16 F2 | 	cmp	arg03, #2 wc
0ddac     49 00 00 FF 
0ddb0     20 64 86 F1 | 	sub	objptr, ##37408
0ddb4     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
0ddb8     40 00 90 4D |  if_c_and_nz	jmp	#LR__1180
0ddbc     00 92 06 F6 | 	mov	arg01, #0
0ddc0     98 C1 B1 FD | 	call	#__system___getiolock_0622
0ddc4     3D 93 02 F6 | 	mov	arg01, result1
0ddc8     0C 6C B1 FD | 	call	#__system___lockmem
0ddcc     96 01 00 FF 
0ddd0     C6 94 06 F6 | 	mov	arg02, ##@LR__5947
0ddd4     00 92 06 F6 | 	mov	arg01, #0
0ddd8     00 96 06 F6 | 	mov	arg03, #0
0dddc     EC 78 B1 FD | 	call	#__system___basic_print_string
0dde0     00 92 06 F6 | 	mov	arg01, #0
0dde4     74 C1 B1 FD | 	call	#__system___getiolock_0622
0dde8     3D 01 68 FC | 	wrlong	#0, result1
0ddec     27 92 06 F6 | 	mov	arg01, #39
0ddf0     00 94 06 F6 | 	mov	arg02, #0
0ddf4     DC 2E B1 FD | 	call	#_printerror
0ddf8     6C 00 90 FD | 	jmp	#LR__1181
0ddfc                 | LR__1180
0ddfc     70 F8 BF FD | 	call	#_pop
0de00     3F 97 02 F6 | 	mov	arg03, result3
0de04     E7 7A 62 FC | 	wrlong	result1, fp
0de08     04 CE 05 F1 | 	add	fp, #4
0de0c     E7 7C 62 FC | 	wrlong	result2, fp
0de10     04 CE 05 F1 | 	add	fp, #4
0de14     E7 96 62 FC | 	wrlong	arg03, fp
0de18     08 CE 85 F1 | 	sub	fp, #8
0de1c     E7 92 02 F6 | 	mov	arg01, fp
0de20     E4 FA BF FD | 	call	#_converttofloat
0de24     3D 93 02 F6 | 	mov	arg01, result1
0de28     00 C0 1F FF 
0de2c     00 94 06 F6 | 	mov	arg02, ##1065353216
0de30     10 9E B1 FD | 	call	#__system____builtin_atan2f
0de34     3D 93 02 F6 | 	mov	arg01, result1
0de38     54 00 00 FF 
0de3c     88 64 06 F1 | 	add	objptr, ##43144
0de40     32 95 02 FB | 	rdlong	arg02, objptr
0de44     54 00 00 FF 
0de48     88 64 86 F1 | 	sub	objptr, ##43144
0de4c     58 92 B1 FD | 	call	#__system___float_mul
0de50     E7 7A 62 FC | 	wrlong	result1, fp
0de54     08 CE 05 F1 | 	add	fp, #8
0de58     E7 3C 68 FC | 	wrlong	#30, fp
0de5c     08 CE 85 F1 | 	sub	fp, #8
0de60     E7 92 02 F6 | 	mov	arg01, fp
0de64     98 F8 BF FD | 	call	#_push
0de68                 | LR__1181
0de68     E7 F0 03 F6 | 	mov	ptra, fp
0de6c     F2 00 A0 FD | 	call	#popregs_
0de70                 | _do_atn_ret
0de70     2D 00 64 FD | 	ret
0de74                 | 
0de74                 | ' 
0de74                 | ' '-------------------- beep
0de74                 | ' 
0de74                 | ' sub do_beep
0de74                 | _do_beep
0de74     02 CA 05 F6 | 	mov	COUNT_, #2
0de78     E8 00 A0 FD | 	call	#pushregs_
0de7c     1C F0 07 F1 | 	add	ptra, #28
0de80     EC F7 BF FD | 	call	#_pop
0de84     3D 9F 02 F6 | 	mov	arg07, result1
0de88     3E 9D 02 F6 | 	mov	arg06, result2
0de8c     3F A7 02 F6 | 	mov	local01, result3
0de90     0C CE 05 F1 | 	add	fp, #12
0de94     E7 9E 62 FC | 	wrlong	arg07, fp
0de98     04 CE 05 F1 | 	add	fp, #4
0de9c     E7 9C 62 FC | 	wrlong	arg06, fp
0dea0     04 CE 05 F1 | 	add	fp, #4
0dea4     E7 A6 62 FC | 	wrlong	local01, fp
0dea8     14 CE 85 F1 | 	sub	fp, #20
0deac     C0 F7 BF FD | 	call	#_pop
0deb0     E7 7A 62 FC | 	wrlong	result1, fp
0deb4     04 CE 05 F1 | 	add	fp, #4
0deb8     E7 7C 62 FC | 	wrlong	result2, fp
0debc     04 CE 05 F1 | 	add	fp, #4
0dec0     E7 7E 62 FC | 	wrlong	result3, fp
0dec4                 | ' 
0dec4                 | ' 
0dec4                 | ' t2=pop()
0dec4                 | ' t1=pop()
0dec4                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
0dec4     3F 9F 02 F6 | 	mov	arg07, result3
0dec8     08 CE 85 F1 | 	sub	fp, #8
0decc     1C 9E 0E F2 | 	cmp	arg07, #28 wz
0ded0     08 CE 05 51 |  if_ne	add	fp, #8
0ded4     E7 A6 02 5B |  if_ne	rdlong	local01, fp
0ded8     08 CE 85 51 |  if_ne	sub	fp, #8
0dedc     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
0dee0     E7 A8 02 AB |  if_e	rdlong	local02, fp
0dee4     0C 00 90 AD |  if_e	jmp	#LR__1190
0dee8     E7 92 02 F6 | 	mov	arg01, fp
0deec     5C F9 BF FD | 	call	#_converttoint
0def0     3D A9 02 F6 | 	mov	local02, result1
0def4                 | LR__1190
0def4     32 95 02 F6 | 	mov	arg02, objptr
0def8     16 00 00 FF 
0defc     98 94 06 F1 | 	add	arg02, ##11416
0df00     07 92 06 F6 | 	mov	arg01, #7
0df04     54 97 02 F6 | 	mov	arg03, local02
0df08     0C 98 C6 F9 | 	decod	arg04, #12
0df0c     08 9A 06 F6 | 	mov	arg05, #8
0df10     00 9C 06 F6 | 	mov	arg06, #0
0df14     00 9E 06 F6 | 	mov	arg07, #0
0df18     0B 00 00 FF 
0df1c     CC 64 06 F1 | 	add	objptr, ##5836
0df20     14 67 B1 FD | 	call	#_Audio2_004_spin2_beep
0df24     0B 00 00 FF 
0df28     CC 64 86 F1 | 	sub	objptr, ##5836
0df2c     E7 92 02 F6 | 	mov	arg01, fp
0df30     0C 92 06 F1 | 	add	arg01, #12
0df34     C8 F7 BF FD | 	call	#_push
0df38     7C D4 B0 FD | 	call	#_do_waitms
0df3c     0B 00 00 FF 
0df40     CC 64 06 F1 | 	add	objptr, ##5836
0df44                 | ' 
0df44                 | ' base2:=@channel0[0]+64*channel
0df44     32 A9 02 F6 | 	mov	local02, objptr
0df48                 | ' word[base2+32]:=0
0df48     EC A9 06 F1 | 	add	local02, #492
0df4c     54 01 58 FC | 	wrword	#0, local02
0df50     0B 00 00 FF 
0df54     CC 64 86 F1 | 	sub	objptr, ##5836
0df58     E7 F0 03 F6 | 	mov	ptra, fp
0df5c     F2 00 A0 FD | 	call	#popregs_
0df60                 | _do_beep_ret
0df60     2D 00 64 FD | 	ret
0df64                 | 
0df64                 | ' 
0df64                 | ' '-------------------- blit
0df64                 | ' 
0df64                 | ' ' blit buf1,x1,y1,x2,y2,s1,buf2,x2,y2,s2
0df64                 | ' sub do_blit
0df64                 | _do_blit
0df64     03 CA 05 F6 | 	mov	COUNT_, #3
0df68     E8 00 A0 FD | 	call	#pushregs_
0df6c     3C F0 07 F1 | 	add	ptra, #60
0df70     4C 00 00 FF 
0df74     24 64 06 F1 | 	add	objptr, ##38948
0df78     32 A5 02 FB | 	rdlong	arg10, objptr
0df7c     52 A3 02 F6 | 	mov	arg09, arg10
0df80     01 A2 66 F0 | 	shl	arg09, #1
0df84     52 A3 02 F1 | 	add	arg09, arg10
0df88     02 A2 66 F0 | 	shl	arg09, #2
0df8c     03 00 00 FF 
0df90     04 64 86 F1 | 	sub	objptr, ##1540
0df94     32 A3 02 F1 | 	add	arg09, objptr
0df98     51 A7 02 FB | 	rdlong	local01, arg09
0df9c                 | ' 
0df9c                 | ' numpar=compiledline(lineptr_e).result.uresult
0df9c                 | ' if numpar<>10 andalso numpar<>6 then print "blit: "; : printerror (39,runheader(0)) : return
0df9c     0A A6 0E F2 | 	cmp	local01, #10 wz
0dfa0     49 00 00 FF 
0dfa4     20 64 86 F1 | 	sub	objptr, ##37408
0dfa8     06 A6 0E 52 |  if_ne	cmp	local01, #6 wz
0dfac     50 00 90 AD |  if_e	jmp	#LR__1200
0dfb0     00 92 06 F6 | 	mov	arg01, #0
0dfb4     A4 BF B1 FD | 	call	#__system___getiolock_0622
0dfb8     3D 93 02 F6 | 	mov	arg01, result1
0dfbc     18 6A B1 FD | 	call	#__system___lockmem
0dfc0     96 01 00 FF 
0dfc4     CC 94 06 F6 | 	mov	arg02, ##@LR__5948
0dfc8     00 92 06 F6 | 	mov	arg01, #0
0dfcc     00 96 06 F6 | 	mov	arg03, #0
0dfd0     F8 76 B1 FD | 	call	#__system___basic_print_string
0dfd4     00 92 06 F6 | 	mov	arg01, #0
0dfd8     80 BF B1 FD | 	call	#__system___getiolock_0622
0dfdc     3D 01 68 FC | 	wrlong	#0, result1
0dfe0     52 00 00 FF 
0dfe4     94 64 06 F1 | 	add	objptr, ##42132
0dfe8     32 95 02 FB | 	rdlong	arg02, objptr
0dfec     52 00 00 FF 
0dff0     94 64 86 F1 | 	sub	objptr, ##42132
0dff4     27 92 06 F6 | 	mov	arg01, #39
0dff8     D8 2C B1 FD | 	call	#_printerror
0dffc     04 01 90 FD | 	jmp	#LR__1205
0e000                 | LR__1200
0e000                 | ' for i=numpar-1 to 0 step -1: t1=pop() : p(i)=converttoint(t1): next i
0e000     53 A9 02 F6 | 	mov	local02, local01
0e004     01 A8 86 F1 | 	sub	local02, #1
0e008                 | LR__1201
0e008     53 A5 02 F6 | 	mov	arg10, local01
0e00c     01 A4 86 F1 | 	sub	arg10, #1
0e010     52 A9 1A F2 | 	cmp	local02, arg10 wcz
0e014     40 00 90 1D |  if_a	jmp	#LR__1202
0e018     54 F6 BF FD | 	call	#_pop
0e01c     E7 7A 62 FC | 	wrlong	result1, fp
0e020     04 CE 05 F1 | 	add	fp, #4
0e024     E7 7C 62 FC | 	wrlong	result2, fp
0e028     04 CE 05 F1 | 	add	fp, #4
0e02c     E7 7E 62 FC | 	wrlong	result3, fp
0e030     54 AB 02 F6 | 	mov	local03, local02
0e034     02 AA 66 F0 | 	shl	local03, #2
0e038     04 CE 05 F1 | 	add	fp, #4
0e03c     E7 AA 02 F1 | 	add	local03, fp
0e040     0C CE 85 F1 | 	sub	fp, #12
0e044     E7 92 02 F6 | 	mov	arg01, fp
0e048     00 F8 BF FD | 	call	#_converttoint
0e04c     55 7B 62 FC | 	wrlong	result1, local03
0e050     01 A8 86 F1 | 	sub	local02, #1
0e054     B0 FF 9F FD | 	jmp	#LR__1201
0e058                 | LR__1202
0e058                 | ' if numpar=10 then 
0e058     0A A6 0E F2 | 	cmp	local01, #10 wz
0e05c     5C 00 90 5D |  if_ne	jmp	#LR__1203
0e060     0C CE 05 F1 | 	add	fp, #12
0e064     E7 92 02 FB | 	rdlong	arg01, fp
0e068     04 CE 05 F1 | 	add	fp, #4
0e06c     E7 94 02 FB | 	rdlong	arg02, fp
0e070     04 CE 05 F1 | 	add	fp, #4
0e074     E7 96 02 FB | 	rdlong	arg03, fp
0e078     04 CE 05 F1 | 	add	fp, #4
0e07c     E7 98 02 FB | 	rdlong	arg04, fp
0e080     04 CE 05 F1 | 	add	fp, #4
0e084     E7 9A 02 FB | 	rdlong	arg05, fp
0e088     04 CE 05 F1 | 	add	fp, #4
0e08c     E7 9C 02 FB | 	rdlong	arg06, fp
0e090     04 CE 05 F1 | 	add	fp, #4
0e094     E7 9E 02 FB | 	rdlong	arg07, fp
0e098     04 CE 05 F1 | 	add	fp, #4
0e09c     E7 A0 02 FB | 	rdlong	arg08, fp
0e0a0     04 CE 05 F1 | 	add	fp, #4
0e0a4     E7 A2 02 FB | 	rdlong	arg09, fp
0e0a8     04 CE 05 F1 | 	add	fp, #4
0e0ac     E7 A4 02 FB | 	rdlong	arg10, fp
0e0b0     30 CE 85 F1 | 	sub	fp, #48
0e0b4     00 54 B1 FD | 	call	#_Hg010b_4_spin2_blit
0e0b8     48 00 90 FD | 	jmp	#LR__1204
0e0bc                 | LR__1203
0e0bc     32 9F 02 FB | 	rdlong	arg07, objptr
0e0c0     0C CE 05 F1 | 	add	fp, #12
0e0c4     E7 94 02 FB | 	rdlong	arg02, fp
0e0c8     04 CE 05 F1 | 	add	fp, #4
0e0cc     E7 96 02 FB | 	rdlong	arg03, fp
0e0d0     04 CE 05 F1 | 	add	fp, #4
0e0d4     E7 98 02 FB | 	rdlong	arg04, fp
0e0d8     04 CE 05 F1 | 	add	fp, #4
0e0dc     E7 9A 02 FB | 	rdlong	arg05, fp
0e0e0     04 CE 05 F1 | 	add	fp, #4
0e0e4     E7 A0 02 FB | 	rdlong	arg08, fp
0e0e8     04 CE 05 F1 | 	add	fp, #4
0e0ec     E7 A2 02 FB | 	rdlong	arg09, fp
0e0f0     20 CE 85 F1 | 	sub	fp, #32
0e0f4     4F 93 02 F6 | 	mov	arg01, arg07
0e0f8     0A 9C C6 F9 | 	decod	arg06, #10
0e0fc     0A A4 C6 F9 | 	decod	arg10, #10
0e100     B4 53 B1 FD | 	call	#_Hg010b_4_spin2_blit
0e104                 | LR__1204
0e104                 | LR__1205
0e104     E7 F0 03 F6 | 	mov	ptra, fp
0e108     F2 00 A0 FD | 	call	#popregs_
0e10c                 | _do_blit_ret
0e10c     2D 00 64 FD | 	ret
0e110                 | 
0e110                 | ' 
0e110                 | ' 
0e110                 | ' '-------------------- bin$
0e110                 | ' 
0e110                 | ' sub do_bin
0e110                 | _do_bin
0e110     02 CA 05 F6 | 	mov	COUNT_, #2
0e114     E8 00 A0 FD | 	call	#pushregs_
0e118     18 F0 07 F1 | 	add	ptra, #24
0e11c     4C 00 00 FF 
0e120     24 64 06 F1 | 	add	objptr, ##38948
0e124     32 97 02 FB | 	rdlong	arg03, objptr
0e128     4B 95 02 F6 | 	mov	arg02, arg03
0e12c     01 94 66 F0 | 	shl	arg02, #1
0e130     4B 95 02 F1 | 	add	arg02, arg03
0e134     02 94 66 F0 | 	shl	arg02, #2
0e138     03 00 00 FF 
0e13c     04 64 86 F1 | 	sub	objptr, ##1540
0e140     32 95 02 F1 | 	add	arg02, objptr
0e144     4A A7 02 FB | 	rdlong	local01, arg02
0e148                 | ' 
0e148                 | ' numpar=compiledline(lineptr_e).result.uresult
0e148                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
0e148     03 A6 16 F2 | 	cmp	local01, #3 wc
0e14c     49 00 00 FF 
0e150     20 64 86 F1 | 	sub	objptr, ##37408
0e154     00 A6 0E C2 |  if_b	cmp	local01, #0 wz
0e158     40 00 90 4D |  if_c_and_nz	jmp	#LR__1210
0e15c     00 92 06 F6 | 	mov	arg01, #0
0e160     F8 BD B1 FD | 	call	#__system___getiolock_0622
0e164     3D 93 02 F6 | 	mov	arg01, result1
0e168     6C 68 B1 FD | 	call	#__system___lockmem
0e16c     96 01 00 FF 
0e170     D3 94 06 F6 | 	mov	arg02, ##@LR__5949
0e174     00 92 06 F6 | 	mov	arg01, #0
0e178     00 96 06 F6 | 	mov	arg03, #0
0e17c     4C 75 B1 FD | 	call	#__system___basic_print_string
0e180     00 92 06 F6 | 	mov	arg01, #0
0e184     D4 BD B1 FD | 	call	#__system___getiolock_0622
0e188     3D 01 68 FC | 	wrlong	#0, result1
0e18c     27 92 06 F6 | 	mov	arg01, #39
0e190     00 94 06 F6 | 	mov	arg02, #0
0e194     3C 2B B1 FD | 	call	#_printerror
0e198     8C 00 90 FD | 	jmp	#LR__1213
0e19c                 | LR__1210
0e19c                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
0e19c     02 A6 0E F2 | 	cmp	local01, #2 wz
0e1a0     30 00 90 5D |  if_ne	jmp	#LR__1211
0e1a4     C8 F4 BF FD | 	call	#_pop
0e1a8     3F A7 02 F6 | 	mov	local01, result3
0e1ac     E7 7A 62 FC | 	wrlong	result1, fp
0e1b0     04 CE 05 F1 | 	add	fp, #4
0e1b4     E7 7C 62 FC | 	wrlong	result2, fp
0e1b8     04 CE 05 F1 | 	add	fp, #4
0e1bc     E7 A6 62 FC | 	wrlong	local01, fp
0e1c0     08 CE 85 F1 | 	sub	fp, #8
0e1c4     E7 92 02 F6 | 	mov	arg01, fp
0e1c8     80 F6 BF FD | 	call	#_converttoint
0e1cc     3D A9 02 F6 | 	mov	local02, result1
0e1d0     04 00 90 FD | 	jmp	#LR__1212
0e1d4                 | LR__1211
0e1d4     00 A8 06 F6 | 	mov	local02, #0
0e1d8                 | LR__1212
0e1d8     94 F4 BF FD | 	call	#_pop
0e1dc     3F A7 02 F6 | 	mov	local01, result3
0e1e0     E7 7A 62 FC | 	wrlong	result1, fp
0e1e4     04 CE 05 F1 | 	add	fp, #4
0e1e8     E7 7C 62 FC | 	wrlong	result2, fp
0e1ec     04 CE 05 F1 | 	add	fp, #4
0e1f0     E7 A6 62 FC | 	wrlong	local01, fp
0e1f4     08 CE 85 F1 | 	sub	fp, #8
0e1f8     E7 92 02 F6 | 	mov	arg01, fp
0e1fc     4C F6 BF FD | 	call	#_converttoint
0e200     3D 93 02 F6 | 	mov	arg01, result1
0e204     54 95 02 F6 | 	mov	arg02, local02
0e208     02 96 06 F6 | 	mov	arg03, #2
0e20c     C4 82 B1 FD | 	call	#__system__Number_S
0e210     E7 7A 62 FC | 	wrlong	result1, fp
0e214     08 CE 05 F1 | 	add	fp, #8
0e218     E7 3E 68 FC | 	wrlong	#31, fp
0e21c     08 CE 85 F1 | 	sub	fp, #8
0e220     E7 92 02 F6 | 	mov	arg01, fp
0e224     D8 F4 BF FD | 	call	#_push
0e228                 | LR__1213
0e228     E7 F0 03 F6 | 	mov	ptra, fp
0e22c     F2 00 A0 FD | 	call	#popregs_
0e230                 | _do_bin_ret
0e230     2D 00 64 FD | 	ret
0e234                 | 
0e234                 | ' 
0e234                 | ' '-------------------- box
0e234                 | ' 
0e234                 | ' sub do_box
0e234                 | _do_box
0e234     03 CA 05 F6 | 	mov	COUNT_, #3
0e238     E8 00 A0 FD | 	call	#pushregs_
0e23c     30 F0 07 F1 | 	add	ptra, #48
0e240     2C F4 BF FD | 	call	#_pop
0e244     3D 9B 02 F6 | 	mov	arg05, result1
0e248     3E 99 02 F6 | 	mov	arg04, result2
0e24c     3F 97 02 F6 | 	mov	arg03, result3
0e250     24 CE 05 F1 | 	add	fp, #36
0e254     E7 9A 62 FC | 	wrlong	arg05, fp
0e258     04 CE 05 F1 | 	add	fp, #4
0e25c     E7 98 62 FC | 	wrlong	arg04, fp
0e260     04 CE 05 F1 | 	add	fp, #4
0e264     E7 96 62 FC | 	wrlong	arg03, fp
0e268     2C CE 85 F1 | 	sub	fp, #44
0e26c     00 F4 BF FD | 	call	#_pop
0e270     3D 9B 02 F6 | 	mov	arg05, result1
0e274     3E 99 02 F6 | 	mov	arg04, result2
0e278     3F 97 02 F6 | 	mov	arg03, result3
0e27c     18 CE 05 F1 | 	add	fp, #24
0e280     E7 9A 62 FC | 	wrlong	arg05, fp
0e284     04 CE 05 F1 | 	add	fp, #4
0e288     E7 98 62 FC | 	wrlong	arg04, fp
0e28c     04 CE 05 F1 | 	add	fp, #4
0e290     E7 96 62 FC | 	wrlong	arg03, fp
0e294     20 CE 85 F1 | 	sub	fp, #32
0e298     D4 F3 BF FD | 	call	#_pop
0e29c     3D 9B 02 F6 | 	mov	arg05, result1
0e2a0     3E 99 02 F6 | 	mov	arg04, result2
0e2a4     3F A7 02 F6 | 	mov	local01, result3
0e2a8     0C CE 05 F1 | 	add	fp, #12
0e2ac     E7 9A 62 FC | 	wrlong	arg05, fp
0e2b0     04 CE 05 F1 | 	add	fp, #4
0e2b4     E7 98 62 FC | 	wrlong	arg04, fp
0e2b8     04 CE 05 F1 | 	add	fp, #4
0e2bc     E7 A6 62 FC | 	wrlong	local01, fp
0e2c0     14 CE 85 F1 | 	sub	fp, #20
0e2c4     A8 F3 BF FD | 	call	#_pop
0e2c8     E7 7A 62 FC | 	wrlong	result1, fp
0e2cc     04 CE 05 F1 | 	add	fp, #4
0e2d0     E7 7C 62 FC | 	wrlong	result2, fp
0e2d4     04 CE 05 F1 | 	add	fp, #4
0e2d8     E7 7E 62 FC | 	wrlong	result3, fp
0e2dc                 | ' 
0e2dc                 | ' t4=pop()
0e2dc                 | ' t3=pop()
0e2dc                 | ' t2=pop()
0e2dc                 | ' t1=pop()
0e2dc                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0e2dc     3F 9B 02 F6 | 	mov	arg05, result3
0e2e0     08 CE 85 F1 | 	sub	fp, #8
0e2e4     1C 9A 0E F2 | 	cmp	arg05, #28 wz
0e2e8     08 CE 05 51 |  if_ne	add	fp, #8
0e2ec     E7 A6 02 5B |  if_ne	rdlong	local01, fp
0e2f0     08 CE 85 51 |  if_ne	sub	fp, #8
0e2f4     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
0e2f8     A8 00 90 5D |  if_ne	jmp	#LR__1220
0e2fc     14 CE 05 F1 | 	add	fp, #20
0e300     E7 A6 02 FB | 	rdlong	local01, fp
0e304     14 CE 85 F1 | 	sub	fp, #20
0e308     1C A6 0E F2 | 	cmp	local01, #28 wz
0e30c     14 CE 05 51 |  if_ne	add	fp, #20
0e310     E7 9A 02 5B |  if_ne	rdlong	arg05, fp
0e314     14 CE 85 51 |  if_ne	sub	fp, #20
0e318     1D 9A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e31c     84 00 90 5D |  if_ne	jmp	#LR__1220
0e320     20 CE 05 F1 | 	add	fp, #32
0e324     E7 A6 02 FB | 	rdlong	local01, fp
0e328     20 CE 85 F1 | 	sub	fp, #32
0e32c     1C A6 0E F2 | 	cmp	local01, #28 wz
0e330     20 CE 05 51 |  if_ne	add	fp, #32
0e334     E7 9A 02 5B |  if_ne	rdlong	arg05, fp
0e338     20 CE 85 51 |  if_ne	sub	fp, #32
0e33c     1D 9A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e340     60 00 90 5D |  if_ne	jmp	#LR__1220
0e344     2C CE 05 F1 | 	add	fp, #44
0e348     E7 A6 02 FB | 	rdlong	local01, fp
0e34c     2C CE 85 F1 | 	sub	fp, #44
0e350     1C A6 0E F2 | 	cmp	local01, #28 wz
0e354     2C CE 05 51 |  if_ne	add	fp, #44
0e358     E7 9A 02 5B |  if_ne	rdlong	arg05, fp
0e35c     2C CE 85 51 |  if_ne	sub	fp, #44
0e360     1D 9A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e364     3C 00 90 5D |  if_ne	jmp	#LR__1220
0e368     E7 92 02 FB | 	rdlong	arg01, fp
0e36c     0C CE 05 F1 | 	add	fp, #12
0e370     E7 94 02 FB | 	rdlong	arg02, fp
0e374     0C CE 05 F1 | 	add	fp, #12
0e378     E7 96 02 FB | 	rdlong	arg03, fp
0e37c     0C CE 05 F1 | 	add	fp, #12
0e380     E7 98 02 FB | 	rdlong	arg04, fp
0e384     24 CE 85 F1 | 	sub	fp, #36
0e388     38 00 00 FF 
0e38c     CC 65 06 F1 | 	add	objptr, ##29132
0e390     32 9B 02 FB | 	rdlong	arg05, objptr
0e394     38 00 00 FF 
0e398     CC 65 86 F1 | 	sub	objptr, ##29132
0e39c     D8 43 B1 FD | 	call	#_Hg010b_4_spin2_box
0e3a0                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0e3a0     60 00 90 FD | 	jmp	#LR__1221
0e3a4                 | LR__1220
0e3a4     E7 92 02 F6 | 	mov	arg01, fp
0e3a8     A0 F4 BF FD | 	call	#_converttoint
0e3ac     3D A9 02 F6 | 	mov	local02, result1
0e3b0     E7 92 02 F6 | 	mov	arg01, fp
0e3b4     0C 92 06 F1 | 	add	arg01, #12
0e3b8     90 F4 BF FD | 	call	#_converttoint
0e3bc     3D AB 02 F6 | 	mov	local03, result1
0e3c0     E7 92 02 F6 | 	mov	arg01, fp
0e3c4     18 92 06 F1 | 	add	arg01, #24
0e3c8     80 F4 BF FD | 	call	#_converttoint
0e3cc     3D A7 02 F6 | 	mov	local01, result1
0e3d0     E7 92 02 F6 | 	mov	arg01, fp
0e3d4     24 92 06 F1 | 	add	arg01, #36
0e3d8     70 F4 BF FD | 	call	#_converttoint
0e3dc     3D 99 02 F6 | 	mov	arg04, result1
0e3e0     38 00 00 FF 
0e3e4     CC 65 06 F1 | 	add	objptr, ##29132
0e3e8     32 9B 02 FB | 	rdlong	arg05, objptr
0e3ec     38 00 00 FF 
0e3f0     CC 65 86 F1 | 	sub	objptr, ##29132
0e3f4     54 93 02 F6 | 	mov	arg01, local02
0e3f8     55 95 02 F6 | 	mov	arg02, local03
0e3fc     53 97 02 F6 | 	mov	arg03, local01
0e400     74 43 B1 FD | 	call	#_Hg010b_4_spin2_box
0e404                 | LR__1221
0e404     E7 F0 03 F6 | 	mov	ptra, fp
0e408     F2 00 A0 FD | 	call	#popregs_
0e40c                 | _do_box_ret
0e40c     2D 00 64 FD | 	ret
0e410                 | 
0e410                 | ' 
0e410                 | ' '-------------------- brun
0e410                 | ' 
0e410                 | ' sub do_brun
0e410                 | _do_brun
0e410     08 CA 05 F6 | 	mov	COUNT_, #8
0e414     E8 00 A0 FD | 	call	#pushregs_
0e418     54 F2 BF FD | 	call	#_pop
0e41c     3E 9B 02 F6 | 	mov	arg05, result2
0e420     3F 99 02 F6 | 	mov	arg04, result3
0e424     3D A7 02 F6 | 	mov	local01, result1
0e428     4D A9 02 F6 | 	mov	local02, arg05
0e42c     4C AB 02 F6 | 	mov	local03, arg04
0e430                 | ' 
0e430                 | ' t1=pop() 
0e430                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0e430     2B AA 0E F2 | 	cmp	local03, #43 wz
0e434     10 00 90 5D |  if_ne	jmp	#LR__1230
0e438     53 93 02 F6 | 	mov	arg01, local01
0e43c     A0 F3 BF FD | 	call	#_convertstring
0e440     3D A7 02 F6 | 	mov	local01, result1
0e444     1F AA 06 F6 | 	mov	local03, #31
0e448                 | LR__1230
0e448                 | ' if t1.result_type=result_string then
0e448     1F AA 0E F2 | 	cmp	local03, #31 wz
0e44c     EC 01 90 5D |  if_ne	jmp	#LR__1234
0e450     53 AD 02 F6 | 	mov	local04, local01
0e454                 | '   filename=t1.result.sresult
0e454                 | '   if left$(filename,1)="/" then 
0e454     56 93 02 F6 | 	mov	arg01, local04
0e458     01 94 06 F6 | 	mov	arg02, #1
0e45c     20 7E B1 FD | 	call	#__system__Left_S
0e460     3D 93 02 F6 | 	mov	arg01, result1
0e464     96 01 00 FF 
0e468     DA 94 06 F6 | 	mov	arg02, ##@LR__5950
0e46c     90 65 B1 FD | 	call	#__system___string_cmp
0e470     00 7A 0E F2 | 	cmp	result1, #0 wz
0e474     56 AF 02 A6 |  if_e	mov	local05, local04
0e478     14 00 90 AD |  if_e	jmp	#LR__1231
0e47c     96 01 00 FF 
0e480     DC 92 06 F6 | 	mov	arg01, ##@LR__5951
0e484     56 95 02 F6 | 	mov	arg02, local04
0e488     A8 65 B1 FD | 	call	#__system___string_concat
0e48c     3D AF 02 F6 | 	mov	local05, result1
0e490                 | LR__1231
0e490                 | '   open fullfilename for input as #9
0e490     09 92 06 F6 | 	mov	arg01, #9
0e494     57 95 02 F6 | 	mov	arg02, local05
0e498     00 96 06 F6 | 	mov	arg03, #0
0e49c     E8 70 B1 FD | 	call	#__system___basic_open_string
0e4a0     20 6A 06 F1 | 	add	ptr___system__dat__, #32
0e4a4     35 7B 02 FB | 	rdlong	result1, ptr___system__dat__
0e4a8     35 01 68 FC | 	wrlong	#0, ptr___system__dat__
0e4ac     20 6A 86 F1 | 	sub	ptr___system__dat__, #32
0e4b0     3D B1 0A F6 | 	mov	local06, result1 wz
0e4b4                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0e4b4     8C 00 90 AD |  if_e	jmp	#LR__1232
0e4b8     00 92 06 F6 | 	mov	arg01, #0
0e4bc     9C BA B1 FD | 	call	#__system___getiolock_0622
0e4c0     3D 93 02 F6 | 	mov	arg01, result1
0e4c4     10 65 B1 FD | 	call	#__system___lockmem
0e4c8     96 01 00 FF 
0e4cc     E5 94 06 F6 | 	mov	arg02, ##@LR__5952
0e4d0     00 92 06 F6 | 	mov	arg01, #0
0e4d4     00 96 06 F6 | 	mov	arg03, #0
0e4d8     F0 71 B1 FD | 	call	#__system___basic_print_string
0e4dc     00 92 06 F6 | 	mov	arg01, #0
0e4e0     58 95 02 F6 | 	mov	arg02, local06
0e4e4     00 96 06 F6 | 	mov	arg03, #0
0e4e8     0A 98 06 F6 | 	mov	arg04, #10
0e4ec     20 72 B1 FD | 	call	#__system___basic_print_integer
0e4f0     96 01 00 FF 
0e4f4     F3 94 06 F6 | 	mov	arg02, ##@LR__5953
0e4f8     00 92 06 F6 | 	mov	arg01, #0
0e4fc     00 96 06 F6 | 	mov	arg03, #0
0e500     C8 71 B1 FD | 	call	#__system___basic_print_string
0e504     58 93 02 F6 | 	mov	arg01, local06
0e508     7C 86 B1 FD | 	call	#__system___strerror
0e50c     3D 95 02 F6 | 	mov	arg02, result1
0e510     00 92 06 F6 | 	mov	arg01, #0
0e514     00 96 06 F6 | 	mov	arg03, #0
0e518     B0 71 B1 FD | 	call	#__system___basic_print_string
0e51c     00 92 06 F6 | 	mov	arg01, #0
0e520     0A 94 06 F6 | 	mov	arg02, #10
0e524     00 96 06 F6 | 	mov	arg03, #0
0e528     48 71 B1 FD | 	call	#__system___basic_print_char
0e52c     00 92 06 F6 | 	mov	arg01, #0
0e530     28 BA B1 FD | 	call	#__system___getiolock_0622
0e534     3D 01 68 FC | 	wrlong	#0, result1
0e538     09 92 06 F6 | 	mov	arg01, #9
0e53c     74 B0 B1 FD | 	call	#__system__close
0e540     F8 00 90 FD | 	jmp	#LR__1235
0e544                 | LR__1232
0e544     01 B2 06 F6 | 	mov	local07, #1
0e548     00 B4 06 F6 | 	mov	local08, #0
0e54c                 | '   do
0e54c                 | LR__1233
0e54c                 | '     get #9,pos,block(0),1024,r : pos+=r	
0e54c     32 97 02 F6 | 	mov	arg03, objptr
0e550     50 00 00 FF 
0e554     58 96 06 F1 | 	add	arg03, ##41048
0e558     09 92 06 F6 | 	mov	arg01, #9
0e55c     59 95 02 F6 | 	mov	arg02, local07
0e560     0A 98 C6 F9 | 	decod	arg04, #10
0e564     01 9A 06 F6 | 	mov	arg05, #1
0e568     E8 72 B1 FD | 	call	#__system___basic_get
0e56c     3D B1 02 F6 | 	mov	local06, result1
0e570     3D B3 02 F1 | 	add	local07, result1
0e574     32 93 02 F6 | 	mov	arg01, objptr
0e578     50 00 00 FF 
0e57c     58 92 06 F1 | 	add	arg01, ##41048
0e580     5A 95 02 F6 | 	mov	arg02, local08
0e584     0A 96 C6 F9 | 	decod	arg03, #10
0e588     0B 00 00 FF 
0e58c     CC 64 06 F1 | 	add	objptr, ##5836
0e590     6C 55 B1 FD | 	call	#_psram4_spin2_write
0e594     0B 00 00 FF 
0e598     CC 64 86 F1 | 	sub	objptr, ##5836
0e59c     58 B5 02 F1 | 	add	local08, local06
0e5a0     02 00 00 FF 
0e5a4     00 B0 0E F2 | 	cmp	local06, ##1024 wz
0e5a8     E0 03 00 AF 
0e5ac     00 B4 56 A2 |  if_e	cmps	local08, ##507904 wc
0e5b0     98 FF 9F 8D |  if_c_and_z	jmp	#LR__1233
0e5b4     38 00 00 FF 
0e5b8     A0 65 06 F1 | 	add	objptr, ##29088
0e5bc     32 93 02 FB | 	rdlong	arg01, objptr
0e5c0     03 92 62 FD | 	cogstop	arg01
0e5c4     04 64 06 F1 | 	add	objptr, #4
0e5c8     32 93 02 FB | 	rdlong	arg01, objptr
0e5cc     03 92 62 FD | 	cogstop	arg01
0e5d0     04 64 06 F1 | 	add	objptr, #4
0e5d4     32 93 02 FB | 	rdlong	arg01, objptr
0e5d8     03 92 62 FD | 	cogstop	arg01
0e5dc     19 00 00 FF 
0e5e0     3C 65 06 F1 | 	add	objptr, ##13116
0e5e4     32 93 02 FB | 	rdlong	arg01, objptr
0e5e8     52 00 00 FF 
0e5ec     E4 64 86 F1 | 	sub	objptr, ##42212
0e5f0     03 92 62 FD | 	cogstop	arg01
0e5f4     36 95 02 F6 | 	mov	arg02, ptr__dat__
0e5f8     18 00 00 FF 
0e5fc     CC 94 06 F1 | 	add	arg02, ##12492
0e600     32 97 02 F6 | 	mov	arg03, objptr
0e604     38 00 00 FF 
0e608     B0 97 06 F1 | 	add	arg03, ##29104
0e60c     1E B4 06 F6 | 	mov	local08, #30
0e610     28 96 62 FD | 	setq	arg03
0e614     4A B5 F2 FC | 	coginit	local08, arg02 wc
0e618     01 B4 66 C6 |  if_b	neg	local08, #1
0e61c     54 00 00 FF 
0e620     F4 64 06 F1 | 	add	objptr, ##43252
0e624     32 B5 62 FC | 	wrlong	local08, objptr
0e628     54 00 00 FF 
0e62c     F4 64 86 F1 | 	sub	objptr, ##43252
0e630     00 92 06 F6 | 	mov	arg01, #0
0e634     01 92 62 FD | 	cogid	arg01
0e638     03 92 62 FD | 	cogstop	arg01
0e63c                 | LR__1234
0e63c                 | LR__1235
0e63c     E7 F0 03 F6 | 	mov	ptra, fp
0e640     F2 00 A0 FD | 	call	#popregs_
0e644                 | _do_brun_ret
0e644     2D 00 64 FD | 	ret
0e648                 | 
0e648                 | ' 
0e648                 | ' '-------------------- cd
0e648                 | ' 
0e648                 | ' sub do_cd
0e648                 | _do_cd
0e648     06 CA 05 F6 | 	mov	COUNT_, #6
0e64c     E8 00 A0 FD | 	call	#pushregs_
0e650     96 01 00 FF 
0e654     F6 92 06 F6 | 	mov	arg01, ##@LR__5954
0e658     31 94 06 F6 | 	mov	arg02, #49
0e65c     B4 BA B1 FD | 	call	#__system___basic_dir
0e660     0C F0 BF FD | 	call	#_pop
0e664     3E 99 02 F6 | 	mov	arg04, result2
0e668     3F 97 02 F6 | 	mov	arg03, result3
0e66c     3D A7 02 F6 | 	mov	local01, result1
0e670     4C A9 02 F6 | 	mov	local02, arg04
0e674     4B AB 02 F6 | 	mov	local03, arg03
0e678                 | ' t1=pop()
0e678                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0e678     2B AA 0E F2 | 	cmp	local03, #43 wz
0e67c     10 00 90 5D |  if_ne	jmp	#LR__1240
0e680     53 93 02 F6 | 	mov	arg01, local01
0e684     58 F1 BF FD | 	call	#_convertstring
0e688     3D A7 02 F6 | 	mov	local01, result1
0e68c     1F AA 06 F6 | 	mov	local03, #31
0e690                 | LR__1240
0e690                 | ' if t1.result_type<>result_string then printerror(15): return
0e690     1F AA 0E F2 | 	cmp	local03, #31 wz
0e694     10 00 90 AD |  if_e	jmp	#LR__1241
0e698     0F 92 06 F6 | 	mov	arg01, #15
0e69c     00 94 06 F6 | 	mov	arg02, #0
0e6a0     30 26 B1 FD | 	call	#_printerror
0e6a4     54 05 90 FD | 	jmp	#LR__1259
0e6a8                 | LR__1241
0e6a8     53 AD 02 F6 | 	mov	local04, local01
0e6ac                 | ' newdir$=t1.result.sresult
0e6ac                 | ' if newdir$=".." then 
0e6ac     96 01 00 FF 
0e6b0     F8 94 06 F6 | 	mov	arg02, ##@LR__5955
0e6b4     56 93 02 F6 | 	mov	arg01, local04
0e6b8     44 63 B1 FD | 	call	#__system___string_cmp
0e6bc     00 7A 0E F2 | 	cmp	result1, #0 wz
0e6c0     C8 01 90 5D |  if_ne	jmp	#LR__1248
0e6c4     4C 00 00 FF 
0e6c8     38 64 06 F1 | 	add	objptr, ##38968
0e6cc     32 93 02 FB | 	rdlong	arg01, objptr
0e6d0     4C 00 00 FF 
0e6d4     38 64 86 F1 | 	sub	objptr, ##38968
0e6d8     49 AF 02 F6 | 	mov	local05, arg01
0e6dc     D7 06 48 FB | 	callpa	#(@LR__1243-@LR__1242)>>2,fcache_load_ptr_
0e6e0                 | LR__1242
0e6e0     57 7B CA FA | 	rdbyte	result1, local05 wz
0e6e4     01 AE 06 51 |  if_ne	add	local05, #1
0e6e8     F4 FF 9F 5D |  if_ne	jmp	#LR__1242
0e6ec                 | LR__1243
0e6ec     57 93 C2 F2 | 	subr	arg01, local05
0e6f0     4C 00 00 FF 
0e6f4     38 64 06 F1 | 	add	objptr, ##38968
0e6f8     32 95 02 FB | 	rdlong	arg02, objptr
0e6fc     4C 00 00 FF 
0e700     38 64 86 F1 | 	sub	objptr, ##38968
0e704     96 01 00 FF 
0e708     FB 96 06 F6 | 	mov	arg03, ##@LR__5956
0e70c     BC 81 B1 FD | 	call	#__system__InstrRev
0e710     3D AD 02 F6 | 	mov	local04, result1
0e714                 | '   if slash>1 then newdir$=left$(currentdir$,slash-1) else newdir$="/"
0e714     02 AC 56 F2 | 	cmps	local04, #2 wc
0e718     28 00 90 CD |  if_b	jmp	#LR__1244
0e71c     4C 00 00 FF 
0e720     38 64 06 F1 | 	add	objptr, ##38968
0e724     32 93 02 FB | 	rdlong	arg01, objptr
0e728     4C 00 00 FF 
0e72c     38 64 86 F1 | 	sub	objptr, ##38968
0e730     01 AC 86 F1 | 	sub	local04, #1
0e734     56 95 02 F6 | 	mov	arg02, local04
0e738     44 7B B1 FD | 	call	#__system__Left_S
0e73c     3D AD 02 F6 | 	mov	local04, result1
0e740     08 00 90 FD | 	jmp	#LR__1245
0e744                 | LR__1244
0e744     96 01 00 FF 
0e748     FD AC 06 F6 | 	mov	local04, ##@LR__5957
0e74c                 | LR__1245
0e74c     56 93 02 F6 | 	mov	arg01, local04
0e750     14 69 B1 FD | 	call	#__system___chdir
0e754     20 6A 06 F1 | 	add	ptr___system__dat__, #32
0e758     35 7B 02 FB | 	rdlong	result1, ptr___system__dat__
0e75c     35 01 68 FC | 	wrlong	#0, ptr___system__dat__
0e760     20 6A 86 F1 | 	sub	ptr___system__dat__, #32
0e764     3D B1 0A F6 | 	mov	local06, result1 wz
0e768                 | '   chdir newdir$
0e768                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e768     05 B0 0E 52 |  if_ne	cmp	local06, #5 wz
0e76c     A4 00 90 AD |  if_e	jmp	#LR__1246
0e770     00 92 06 F6 | 	mov	arg01, #0
0e774     E4 B7 B1 FD | 	call	#__system___getiolock_0622
0e778     3D 93 02 F6 | 	mov	arg01, result1
0e77c     58 62 B1 FD | 	call	#__system___lockmem
0e780     96 01 00 FF 
0e784     FF 94 06 F6 | 	mov	arg02, ##@LR__5958
0e788     00 92 06 F6 | 	mov	arg01, #0
0e78c     00 96 06 F6 | 	mov	arg03, #0
0e790     38 6F B1 FD | 	call	#__system___basic_print_string
0e794     00 92 06 F6 | 	mov	arg01, #0
0e798     58 95 02 F6 | 	mov	arg02, local06
0e79c     00 96 06 F6 | 	mov	arg03, #0
0e7a0     0A 98 06 F6 | 	mov	arg04, #10
0e7a4     68 6F B1 FD | 	call	#__system___basic_print_integer
0e7a8     96 01 00 FF 
0e7ac     0D 95 06 F6 | 	mov	arg02, ##@LR__5959
0e7b0     00 92 06 F6 | 	mov	arg01, #0
0e7b4     00 96 06 F6 | 	mov	arg03, #0
0e7b8     10 6F B1 FD | 	call	#__system___basic_print_string
0e7bc     47 00 00 FF 
0e7c0     F4 64 06 F1 | 	add	objptr, ##36596
0e7c4     32 95 02 FB | 	rdlong	arg02, objptr
0e7c8     47 00 00 FF 
0e7cc     F4 64 86 F1 | 	sub	objptr, ##36596
0e7d0     00 92 06 F6 | 	mov	arg01, #0
0e7d4     00 96 06 F6 | 	mov	arg03, #0
0e7d8     F0 6E B1 FD | 	call	#__system___basic_print_string
0e7dc     00 92 06 F6 | 	mov	arg01, #0
0e7e0     0A 94 06 F6 | 	mov	arg02, #10
0e7e4     00 96 06 F6 | 	mov	arg03, #0
0e7e8     88 6E B1 FD | 	call	#__system___basic_print_char
0e7ec     00 92 06 F6 | 	mov	arg01, #0
0e7f0     68 B7 B1 FD | 	call	#__system___getiolock_0622
0e7f4     3D 01 68 FC | 	wrlong	#0, result1
0e7f8     4C 00 00 FF 
0e7fc     38 64 06 F1 | 	add	objptr, ##38968
0e800     32 93 02 FB | 	rdlong	arg01, objptr
0e804     4C 00 00 FF 
0e808     38 64 86 F1 | 	sub	objptr, ##38968
0e80c     58 68 B1 FD | 	call	#__system___chdir
0e810     14 00 90 FD | 	jmp	#LR__1247
0e814                 | LR__1246
0e814     4C 00 00 FF 
0e818     38 64 06 F1 | 	add	objptr, ##38968
0e81c     32 AD 62 FC | 	wrlong	local04, objptr
0e820     4C 00 00 FF 
0e824     38 64 86 F1 | 	sub	objptr, ##38968
0e828                 | LR__1247
0e828                 | '   print "Current directory: ";currentdir$
0e828     00 92 06 F6 | 	mov	arg01, #0
0e82c     2C B7 B1 FD | 	call	#__system___getiolock_0622
0e830     3D 93 02 F6 | 	mov	arg01, result1
0e834     A0 61 B1 FD | 	call	#__system___lockmem
0e838     96 01 00 FF 
0e83c     10 95 06 F6 | 	mov	arg02, ##@LR__5960
0e840     00 92 06 F6 | 	mov	arg01, #0
0e844     00 96 06 F6 | 	mov	arg03, #0
0e848     80 6E B1 FD | 	call	#__system___basic_print_string
0e84c     4C 00 00 FF 
0e850     38 64 06 F1 | 	add	objptr, ##38968
0e854     32 95 02 FB | 	rdlong	arg02, objptr
0e858     4C 00 00 FF 
0e85c     38 64 86 F1 | 	sub	objptr, ##38968
0e860     00 92 06 F6 | 	mov	arg01, #0
0e864     00 96 06 F6 | 	mov	arg03, #0
0e868     60 6E B1 FD | 	call	#__system___basic_print_string
0e86c     00 92 06 F6 | 	mov	arg01, #0
0e870     0A 94 06 F6 | 	mov	arg02, #10
0e874     00 96 06 F6 | 	mov	arg03, #0
0e878     F8 6D B1 FD | 	call	#__system___basic_print_char
0e87c     00 92 06 F6 | 	mov	arg01, #0
0e880     D8 B6 B1 FD | 	call	#__system___getiolock_0622
0e884     3D 01 68 FC | 	wrlong	#0, result1
0e888                 | '   return
0e888     70 03 90 FD | 	jmp	#LR__1259
0e88c                 | LR__1248
0e88c                 | ' if left$(newdir$,1)="/" then 
0e88c     56 93 02 F6 | 	mov	arg01, local04
0e890     01 94 06 F6 | 	mov	arg02, #1
0e894     E8 79 B1 FD | 	call	#__system__Left_S
0e898     3D 93 02 F6 | 	mov	arg01, result1
0e89c     96 01 00 FF 
0e8a0     24 95 06 F6 | 	mov	arg02, ##@LR__5961
0e8a4     58 61 B1 FD | 	call	#__system___string_cmp
0e8a8     00 7A 0E F2 | 	cmp	result1, #0 wz
0e8ac     40 01 90 5D |  if_ne	jmp	#LR__1251
0e8b0     56 93 02 F6 | 	mov	arg01, local04
0e8b4     B0 67 B1 FD | 	call	#__system___chdir
0e8b8     20 6A 06 F1 | 	add	ptr___system__dat__, #32
0e8bc     35 7B 02 FB | 	rdlong	result1, ptr___system__dat__
0e8c0     35 01 68 FC | 	wrlong	#0, ptr___system__dat__
0e8c4     20 6A 86 F1 | 	sub	ptr___system__dat__, #32
0e8c8     3D B1 0A F6 | 	mov	local06, result1 wz
0e8cc                 | '   chdir(newdir$)
0e8cc                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e8cc     05 B0 0E 52 |  if_ne	cmp	local06, #5 wz
0e8d0     A4 00 90 AD |  if_e	jmp	#LR__1249
0e8d4     00 92 06 F6 | 	mov	arg01, #0
0e8d8     80 B6 B1 FD | 	call	#__system___getiolock_0622
0e8dc     3D 93 02 F6 | 	mov	arg01, result1
0e8e0     F4 60 B1 FD | 	call	#__system___lockmem
0e8e4     96 01 00 FF 
0e8e8     26 95 06 F6 | 	mov	arg02, ##@LR__5962
0e8ec     00 92 06 F6 | 	mov	arg01, #0
0e8f0     00 96 06 F6 | 	mov	arg03, #0
0e8f4     D4 6D B1 FD | 	call	#__system___basic_print_string
0e8f8     00 92 06 F6 | 	mov	arg01, #0
0e8fc     58 95 02 F6 | 	mov	arg02, local06
0e900     00 96 06 F6 | 	mov	arg03, #0
0e904     0A 98 06 F6 | 	mov	arg04, #10
0e908     04 6E B1 FD | 	call	#__system___basic_print_integer
0e90c     96 01 00 FF 
0e910     34 95 06 F6 | 	mov	arg02, ##@LR__5963
0e914     00 92 06 F6 | 	mov	arg01, #0
0e918     00 96 06 F6 | 	mov	arg03, #0
0e91c     AC 6D B1 FD | 	call	#__system___basic_print_string
0e920     47 00 00 FF 
0e924     F4 64 06 F1 | 	add	objptr, ##36596
0e928     32 95 02 FB | 	rdlong	arg02, objptr
0e92c     47 00 00 FF 
0e930     F4 64 86 F1 | 	sub	objptr, ##36596
0e934     00 92 06 F6 | 	mov	arg01, #0
0e938     00 96 06 F6 | 	mov	arg03, #0
0e93c     8C 6D B1 FD | 	call	#__system___basic_print_string
0e940     00 92 06 F6 | 	mov	arg01, #0
0e944     0A 94 06 F6 | 	mov	arg02, #10
0e948     00 96 06 F6 | 	mov	arg03, #0
0e94c     24 6D B1 FD | 	call	#__system___basic_print_char
0e950     00 92 06 F6 | 	mov	arg01, #0
0e954     04 B6 B1 FD | 	call	#__system___getiolock_0622
0e958     3D 01 68 FC | 	wrlong	#0, result1
0e95c     4C 00 00 FF 
0e960     38 64 06 F1 | 	add	objptr, ##38968
0e964     32 93 02 FB | 	rdlong	arg01, objptr
0e968     4C 00 00 FF 
0e96c     38 64 86 F1 | 	sub	objptr, ##38968
0e970     F4 66 B1 FD | 	call	#__system___chdir
0e974     14 00 90 FD | 	jmp	#LR__1250
0e978                 | LR__1249
0e978     4C 00 00 FF 
0e97c     38 64 06 F1 | 	add	objptr, ##38968
0e980     32 AD 62 FC | 	wrlong	local04, objptr
0e984     4C 00 00 FF 
0e988     38 64 86 F1 | 	sub	objptr, ##38968
0e98c                 | LR__1250
0e98c                 | '   print "Current directory: ";currentdir$
0e98c     00 92 06 F6 | 	mov	arg01, #0
0e990     C8 B5 B1 FD | 	call	#__system___getiolock_0622
0e994     3D 93 02 F6 | 	mov	arg01, result1
0e998     3C 60 B1 FD | 	call	#__system___lockmem
0e99c     96 01 00 FF 
0e9a0     37 95 06 F6 | 	mov	arg02, ##@LR__5964
0e9a4     00 92 06 F6 | 	mov	arg01, #0
0e9a8     00 96 06 F6 | 	mov	arg03, #0
0e9ac     1C 6D B1 FD | 	call	#__system___basic_print_string
0e9b0     4C 00 00 FF 
0e9b4     38 64 06 F1 | 	add	objptr, ##38968
0e9b8     32 95 02 FB | 	rdlong	arg02, objptr
0e9bc     4C 00 00 FF 
0e9c0     38 64 86 F1 | 	sub	objptr, ##38968
0e9c4     00 92 06 F6 | 	mov	arg01, #0
0e9c8     00 96 06 F6 | 	mov	arg03, #0
0e9cc     FC 6C B1 FD | 	call	#__system___basic_print_string
0e9d0     00 92 06 F6 | 	mov	arg01, #0
0e9d4     0A 94 06 F6 | 	mov	arg02, #10
0e9d8     00 96 06 F6 | 	mov	arg03, #0
0e9dc     94 6C B1 FD | 	call	#__system___basic_print_char
0e9e0     00 92 06 F6 | 	mov	arg01, #0
0e9e4     74 B5 B1 FD | 	call	#__system___getiolock_0622
0e9e8     3D 01 68 FC | 	wrlong	#0, result1
0e9ec                 | '   return
0e9ec     0C 02 90 FD | 	jmp	#LR__1259
0e9f0                 | LR__1251
0e9f0                 | '   if currentdir$<>"/" then newdir$=currentdir$+"/"+newdir$ else newdir$=currentdir$+newdir$ 
0e9f0     4C 00 00 FF 
0e9f4     38 64 06 F1 | 	add	objptr, ##38968
0e9f8     32 93 02 FB | 	rdlong	arg01, objptr
0e9fc     4C 00 00 FF 
0ea00     38 64 86 F1 | 	sub	objptr, ##38968
0ea04     96 01 00 FF 
0ea08     4B 95 06 F6 | 	mov	arg02, ##@LR__5965
0ea0c     F0 5F B1 FD | 	call	#__system___string_cmp
0ea10     00 7A 0E F2 | 	cmp	result1, #0 wz
0ea14     34 00 90 AD |  if_e	jmp	#LR__1252
0ea18     4C 00 00 FF 
0ea1c     38 64 06 F1 | 	add	objptr, ##38968
0ea20     32 93 02 FB | 	rdlong	arg01, objptr
0ea24     4C 00 00 FF 
0ea28     38 64 86 F1 | 	sub	objptr, ##38968
0ea2c     96 01 00 FF 
0ea30     4D 95 06 F6 | 	mov	arg02, ##@LR__5966
0ea34     FC 5F B1 FD | 	call	#__system___string_concat
0ea38     3D 93 02 F6 | 	mov	arg01, result1
0ea3c     56 95 02 F6 | 	mov	arg02, local04
0ea40     F0 5F B1 FD | 	call	#__system___string_concat
0ea44     3D AD 02 F6 | 	mov	local04, result1
0ea48     20 00 90 FD | 	jmp	#LR__1253
0ea4c                 | LR__1252
0ea4c     4C 00 00 FF 
0ea50     38 64 06 F1 | 	add	objptr, ##38968
0ea54     32 93 02 FB | 	rdlong	arg01, objptr
0ea58     4C 00 00 FF 
0ea5c     38 64 86 F1 | 	sub	objptr, ##38968
0ea60     56 95 02 F6 | 	mov	arg02, local04
0ea64     CC 5F B1 FD | 	call	#__system___string_concat
0ea68     3D AD 02 F6 | 	mov	local04, result1
0ea6c                 | LR__1253
0ea6c                 | '   if right$(newdir$,1)="/" then newdir$=left$(newdir$,len(newdir$)-1)
0ea6c     56 93 02 F6 | 	mov	arg01, local04
0ea70     01 94 06 F6 | 	mov	arg02, #1
0ea74     90 78 B1 FD | 	call	#__system__Right_S
0ea78     3D 93 02 F6 | 	mov	arg01, result1
0ea7c     96 01 00 FF 
0ea80     4F 95 06 F6 | 	mov	arg02, ##@LR__5967
0ea84     78 5F B1 FD | 	call	#__system___string_cmp
0ea88     00 7A 0E F2 | 	cmp	result1, #0 wz
0ea8c     30 00 90 5D |  if_ne	jmp	#LR__1256
0ea90     56 93 02 F6 | 	mov	arg01, local04
0ea94     49 AF 02 F6 | 	mov	local05, arg01
0ea98     D7 06 48 FB | 	callpa	#(@LR__1255-@LR__1254)>>2,fcache_load_ptr_
0ea9c                 | LR__1254
0ea9c     57 7B CA FA | 	rdbyte	result1, local05 wz
0eaa0     01 AE 06 51 |  if_ne	add	local05, #1
0eaa4     F4 FF 9F 5D |  if_ne	jmp	#LR__1254
0eaa8                 | LR__1255
0eaa8     49 AF 82 F1 | 	sub	local05, arg01
0eaac     57 95 02 F6 | 	mov	arg02, local05
0eab0     01 94 86 F1 | 	sub	arg02, #1
0eab4     56 93 02 F6 | 	mov	arg01, local04
0eab8     C4 77 B1 FD | 	call	#__system__Left_S
0eabc     3D AD 02 F6 | 	mov	local04, result1
0eac0                 | LR__1256
0eac0     56 93 02 F6 | 	mov	arg01, local04
0eac4     A0 65 B1 FD | 	call	#__system___chdir
0eac8     20 6A 06 F1 | 	add	ptr___system__dat__, #32
0eacc     35 7B 02 FB | 	rdlong	result1, ptr___system__dat__
0ead0     35 01 68 FC | 	wrlong	#0, ptr___system__dat__
0ead4     20 6A 86 F1 | 	sub	ptr___system__dat__, #32
0ead8     3D B1 0A F6 | 	mov	local06, result1 wz
0eadc                 | '   chdir(newdir$)
0eadc                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0eadc     05 B0 0E 52 |  if_ne	cmp	local06, #5 wz
0eae0     A4 00 90 AD |  if_e	jmp	#LR__1257
0eae4     00 92 06 F6 | 	mov	arg01, #0
0eae8     70 B4 B1 FD | 	call	#__system___getiolock_0622
0eaec     3D 93 02 F6 | 	mov	arg01, result1
0eaf0     E4 5E B1 FD | 	call	#__system___lockmem
0eaf4     96 01 00 FF 
0eaf8     51 95 06 F6 | 	mov	arg02, ##@LR__5968
0eafc     00 92 06 F6 | 	mov	arg01, #0
0eb00     00 96 06 F6 | 	mov	arg03, #0
0eb04     C4 6B B1 FD | 	call	#__system___basic_print_string
0eb08     00 92 06 F6 | 	mov	arg01, #0
0eb0c     58 95 02 F6 | 	mov	arg02, local06
0eb10     00 96 06 F6 | 	mov	arg03, #0
0eb14     0A 98 06 F6 | 	mov	arg04, #10
0eb18     F4 6B B1 FD | 	call	#__system___basic_print_integer
0eb1c     96 01 00 FF 
0eb20     5F 95 06 F6 | 	mov	arg02, ##@LR__5969
0eb24     00 92 06 F6 | 	mov	arg01, #0
0eb28     00 96 06 F6 | 	mov	arg03, #0
0eb2c     9C 6B B1 FD | 	call	#__system___basic_print_string
0eb30     47 00 00 FF 
0eb34     F4 64 06 F1 | 	add	objptr, ##36596
0eb38     32 95 02 FB | 	rdlong	arg02, objptr
0eb3c     47 00 00 FF 
0eb40     F4 64 86 F1 | 	sub	objptr, ##36596
0eb44     00 92 06 F6 | 	mov	arg01, #0
0eb48     00 96 06 F6 | 	mov	arg03, #0
0eb4c     7C 6B B1 FD | 	call	#__system___basic_print_string
0eb50     00 92 06 F6 | 	mov	arg01, #0
0eb54     0A 94 06 F6 | 	mov	arg02, #10
0eb58     00 96 06 F6 | 	mov	arg03, #0
0eb5c     14 6B B1 FD | 	call	#__system___basic_print_char
0eb60     00 92 06 F6 | 	mov	arg01, #0
0eb64     F4 B3 B1 FD | 	call	#__system___getiolock_0622
0eb68     3D 01 68 FC | 	wrlong	#0, result1
0eb6c     4C 00 00 FF 
0eb70     38 64 06 F1 | 	add	objptr, ##38968
0eb74     32 93 02 FB | 	rdlong	arg01, objptr
0eb78     4C 00 00 FF 
0eb7c     38 64 86 F1 | 	sub	objptr, ##38968
0eb80     E4 64 B1 FD | 	call	#__system___chdir
0eb84     14 00 90 FD | 	jmp	#LR__1258
0eb88                 | LR__1257
0eb88     4C 00 00 FF 
0eb8c     38 64 06 F1 | 	add	objptr, ##38968
0eb90     32 AD 62 FC | 	wrlong	local04, objptr
0eb94     4C 00 00 FF 
0eb98     38 64 86 F1 | 	sub	objptr, ##38968
0eb9c                 | LR__1258
0eb9c                 | '   print "Current directory: ";currentdir$
0eb9c     00 92 06 F6 | 	mov	arg01, #0
0eba0     B8 B3 B1 FD | 	call	#__system___getiolock_0622
0eba4     3D 93 02 F6 | 	mov	arg01, result1
0eba8     2C 5E B1 FD | 	call	#__system___lockmem
0ebac     96 01 00 FF 
0ebb0     62 95 06 F6 | 	mov	arg02, ##@LR__5970
0ebb4     00 92 06 F6 | 	mov	arg01, #0
0ebb8     00 96 06 F6 | 	mov	arg03, #0
0ebbc     0C 6B B1 FD | 	call	#__system___basic_print_string
0ebc0     4C 00 00 FF 
0ebc4     38 64 06 F1 | 	add	objptr, ##38968
0ebc8     32 95 02 FB | 	rdlong	arg02, objptr
0ebcc     4C 00 00 FF 
0ebd0     38 64 86 F1 | 	sub	objptr, ##38968
0ebd4     00 92 06 F6 | 	mov	arg01, #0
0ebd8     00 96 06 F6 | 	mov	arg03, #0
0ebdc     EC 6A B1 FD | 	call	#__system___basic_print_string
0ebe0     00 92 06 F6 | 	mov	arg01, #0
0ebe4     0A 94 06 F6 | 	mov	arg02, #10
0ebe8     00 96 06 F6 | 	mov	arg03, #0
0ebec     84 6A B1 FD | 	call	#__system___basic_print_char
0ebf0     00 92 06 F6 | 	mov	arg01, #0
0ebf4     64 B3 B1 FD | 	call	#__system___getiolock_0622
0ebf8     3D 01 68 FC | 	wrlong	#0, result1
0ebfc                 | LR__1259
0ebfc     E7 F0 03 F6 | 	mov	ptra, fp
0ec00     F2 00 A0 FD | 	call	#popregs_
0ec04                 | _do_cd_ret
0ec04     2D 00 64 FD | 	ret
0ec08                 | 
0ec08                 | ' 
0ec08                 | ' '-------------------- changefreq
0ec08                 | ' 
0ec08                 | ' sub do_changefreq
0ec08                 | _do_changefreq
0ec08     0A CA 05 F6 | 	mov	COUNT_, #10
0ec0c     E8 00 A0 FD | 	call	#pushregs_
0ec10     2C F0 07 F1 | 	add	ptra, #44
0ec14     58 EA BF FD | 	call	#_pop
0ec18     3F 95 02 F6 | 	mov	arg02, result3
0ec1c     E7 7A 62 FC | 	wrlong	result1, fp
0ec20     04 CE 05 F1 | 	add	fp, #4
0ec24     E7 7C 62 FC | 	wrlong	result2, fp
0ec28     04 CE 05 F1 | 	add	fp, #4
0ec2c     E7 94 62 FC | 	wrlong	arg02, fp
0ec30     08 CE 85 F1 | 	sub	fp, #8
0ec34     E7 92 02 F6 | 	mov	arg01, fp
0ec38     CC EC BF FD | 	call	#_converttofloat
0ec3c     3D A7 02 F6 | 	mov	local01, result1
0ec40     2C EA BF FD | 	call	#_pop
0ec44     3F 95 02 F6 | 	mov	arg02, result3
0ec48     E7 7A 62 FC | 	wrlong	result1, fp
0ec4c     04 CE 05 F1 | 	add	fp, #4
0ec50     E7 7C 62 FC | 	wrlong	result2, fp
0ec54     04 CE 05 F1 | 	add	fp, #4
0ec58     E7 94 62 FC | 	wrlong	arg02, fp
0ec5c     08 CE 85 F1 | 	sub	fp, #8
0ec60     E7 92 02 F6 | 	mov	arg01, fp
0ec64     E4 EB BF FD | 	call	#_converttoint
0ec68     3D A9 52 F6 | 	abs	local02, result1 wc
0ec6c     07 A8 06 F5 | 	and	local02, #7
0ec70     54 A9 82 F6 | 	negc	local02, local02
0ec74     54 95 02 F6 | 	mov	arg02, local02
0ec78     03 94 66 F0 | 	shl	arg02, #3
0ec7c     54 95 82 F1 | 	sub	arg02, local02
0ec80     02 94 66 F0 | 	shl	arg02, #2
0ec84     32 93 02 F6 | 	mov	arg01, objptr
0ec88     16 00 00 FF 
0ec8c     BC 92 06 F1 | 	add	arg01, ##11452
0ec90     49 95 02 F1 | 	add	arg02, arg01
0ec94     16 94 06 F1 | 	add	arg02, #22
0ec98     4A AB E2 FA | 	rdword	local03, arg02
0ec9c                 | ' amode=channels(channel).amode
0ec9c                 | ' if amode>0 then
0ec9c     01 AA 56 F2 | 	cmps	local03, #1 wc
0eca0     AC 01 90 CD |  if_b	jmp	#LR__1262
0eca4     53 95 02 F6 | 	mov	arg02, local01
0eca8     FC 16 20 FF 
0ecac     54 92 06 F6 | 	mov	arg01, ##1076754516
0ecb0     D4 93 B1 FD | 	call	#__system____builtin_logbase
0ecb4     3D AD 02 F6 | 	mov	local04, result1
0ecb8     1E 94 C6 F9 | 	decod	arg02, #30
0ecbc     FC 16 20 FF 
0ecc0     54 92 06 F6 | 	mov	arg01, ##1076754516
0ecc4     C0 93 B1 FD | 	call	#__system____builtin_logbase
0ecc8     3D 95 02 F6 | 	mov	arg02, result1
0eccc     56 93 02 F6 | 	mov	arg01, local04
0ecd0     D8 85 B1 FD | 	call	#__system___float_div
0ecd4     3D 93 02 F6 | 	mov	arg01, result1
0ecd8     00 94 06 F6 | 	mov	arg02, #0
0ecdc     90 88 B1 FD | 	call	#__system___float_tointeger
0ece0     3D AF 02 F6 | 	mov	local05, result1
0ece4     1E AC C6 F9 | 	decod	local04, #30
0ece8     57 93 02 F6 | 	mov	arg01, local05
0ecec     55 93 02 F1 | 	add	arg01, local03
0ecf0     49 93 52 F6 | 	abs	arg01, arg01 wc
0ecf4     1F B0 C6 C9 |  if_b	decod	local06, #31
0ecf8     00 B0 06 36 |  if_ae	mov	local06, #0
0ecfc     A4 7F B1 FD | 	call	#__system___float_fromuns
0ed00     58 7B 62 F5 | 	xor	result1, local06
0ed04     3D 95 02 F6 | 	mov	arg02, result1
0ed08     56 93 02 F6 | 	mov	arg01, local04
0ed0c     B0 92 B1 FD | 	call	#__system____builtin_powf
0ed10     3D 93 02 F6 | 	mov	arg01, result1
0ed14     01 94 06 F6 | 	mov	arg02, #1
0ed18     54 88 B1 FD | 	call	#__system___float_tointeger
0ed1c     3D B3 02 F6 | 	mov	local07, result1
0ed20                 | '   skip=round(2^(lfreq+amode))                     '''' this const + const 2 lines lower=18
0ed20                 | '   if skip>32768 then i=skip/32768: skip=32768 else i=1
0ed20     40 00 00 FF 
0ed24     01 B2 56 F2 | 	cmps	local07, ##32769 wc
0ed28     14 00 90 CD |  if_b	jmp	#LR__1260
0ed2c     59 B5 52 F6 | 	abs	local08, local07 wc
0ed30     0F B4 46 F0 | 	shr	local08, #15
0ed34     5A B5 82 F6 | 	negc	local08, local08
0ed38     0F B2 C6 F9 | 	decod	local07, #15
0ed3c     04 00 90 FD | 	jmp	#LR__1261
0ed40                 | LR__1260
0ed40     01 B4 06 F6 | 	mov	local08, #1
0ed44                 | LR__1261
0ed44     AA 2B 25 FF 
0ed48     00 93 06 F6 | 	mov	arg01, ##1247237376
0ed4c     53 95 02 F6 | 	mov	arg02, local01
0ed50     58 85 B1 FD | 	call	#__system___float_div
0ed54     3D AD 02 F6 | 	mov	local04, result1
0ed58     5A 93 52 F6 | 	abs	arg01, local08 wc
0ed5c     1F B0 C6 C9 |  if_b	decod	local06, #31
0ed60     00 B0 06 36 |  if_ae	mov	local06, #0
0ed64     3C 7F B1 FD | 	call	#__system___float_fromuns
0ed68     58 7B 62 F5 | 	xor	result1, local06
0ed6c     3D B5 02 F6 | 	mov	local08, result1
0ed70     1E B6 C6 F9 | 	decod	local09, #30
0ed74     12 92 06 F6 | 	mov	arg01, #18
0ed78     55 93 82 F1 | 	sub	arg01, local03
0ed7c     57 93 82 F1 | 	sub	arg01, local05
0ed80     49 93 52 F6 | 	abs	arg01, arg01 wc
0ed84     1F B0 C6 C9 |  if_b	decod	local06, #31
0ed88     00 B0 06 36 |  if_ae	mov	local06, #0
0ed8c     14 7F B1 FD | 	call	#__system___float_fromuns
0ed90     58 7B 62 F5 | 	xor	result1, local06
0ed94     3D 95 02 F6 | 	mov	arg02, result1
0ed98     5B 93 02 F6 | 	mov	arg01, local09
0ed9c     20 92 B1 FD | 	call	#__system____builtin_powf
0eda0     3D 95 02 F6 | 	mov	arg02, result1
0eda4     5A 93 02 F6 | 	mov	arg01, local08
0eda8     FC 82 B1 FD | 	call	#__system___float_mul
0edac     3D 95 02 F6 | 	mov	arg02, result1
0edb0     56 93 02 F6 | 	mov	arg01, local04
0edb4     F4 84 B1 FD | 	call	#__system___float_div
0edb8     3D 93 02 F6 | 	mov	arg01, result1
0edbc     01 94 06 F6 | 	mov	arg02, #1
0edc0     AC 87 B1 FD | 	call	#__system___float_tointeger
0edc4     3D B9 02 F6 | 	mov	local10, result1
0edc8     54 B7 02 F6 | 	mov	local09, local02
0edcc     03 B6 66 F0 | 	shl	local09, #3
0edd0     54 B7 82 F1 | 	sub	local09, local02
0edd4     02 B6 66 F0 | 	shl	local09, #2
0edd8     32 B5 02 F6 | 	mov	local08, objptr
0eddc     16 00 00 FF 
0ede0     BC B4 06 F1 | 	add	local08, ##11452
0ede4     5A B7 02 F1 | 	add	local09, local08
0ede8     AA 2B 25 FF 
0edec     00 B5 06 F6 | 	mov	local08, ##1247237376
0edf0     5C 93 52 F6 | 	abs	arg01, local10 wc
0edf4     1F B0 C6 C9 |  if_b	decod	local06, #31
0edf8     00 B0 06 36 |  if_ae	mov	local06, #0
0edfc     A4 7E B1 FD | 	call	#__system___float_fromuns
0ee00     58 7B 62 F5 | 	xor	result1, local06
0ee04     3D 95 02 F6 | 	mov	arg02, result1
0ee08     5A 93 02 F6 | 	mov	arg01, local08
0ee0c     9C 84 B1 FD | 	call	#__system___float_div
0ee10     3D B5 02 F6 | 	mov	local08, result1
0ee14     59 93 52 F6 | 	abs	arg01, local07 wc
0ee18     1F B0 C6 C9 |  if_b	decod	local06, #31
0ee1c     00 B0 06 36 |  if_ae	mov	local06, #0
0ee20     80 7E B1 FD | 	call	#__system___float_fromuns
0ee24     58 7B 62 F5 | 	xor	result1, local06
0ee28     3D 93 02 F6 | 	mov	arg01, result1
0ee2c     00 40 24 FF 
0ee30     00 94 06 F6 | 	mov	arg02, ##1216348160
0ee34     74 84 B1 FD | 	call	#__system___float_div
0ee38     3D 95 02 F6 | 	mov	arg02, result1
0ee3c     5A 93 02 F6 | 	mov	arg01, local08
0ee40     64 82 B1 FD | 	call	#__system___float_mul
0ee44     18 B6 06 F1 | 	add	local09, #24
0ee48     5B 7B 62 FC | 	wrlong	result1, local09
0ee4c     BC 00 90 FD | 	jmp	#LR__1263
0ee50                 | LR__1262
0ee50     18 B8 06 F6 | 	mov	local10, #24
0ee54     00 40 24 FF 
0ee58     00 AC 06 F6 | 	mov	local04, ##1216348160
0ee5c     53 93 02 F6 | 	mov	arg01, local01
0ee60     C7 07 24 FF 
0ee64     00 94 06 F6 | 	mov	arg02, ##1208978944
0ee68     40 84 B1 FD | 	call	#__system___float_div
0ee6c     3D 95 02 F6 | 	mov	arg02, result1
0ee70     56 93 02 F6 | 	mov	arg01, local04
0ee74     30 82 B1 FD | 	call	#__system___float_mul
0ee78     3D 93 02 F6 | 	mov	arg01, result1
0ee7c     01 94 06 F6 | 	mov	arg02, #1
0ee80     EC 86 B1 FD | 	call	#__system___float_tointeger
0ee84     3D B3 02 F6 | 	mov	local07, result1
0ee88     54 B7 02 F6 | 	mov	local09, local02
0ee8c     03 B6 66 F0 | 	shl	local09, #3
0ee90     54 B7 82 F1 | 	sub	local09, local02
0ee94     02 B6 66 F0 | 	shl	local09, #2
0ee98     32 B5 02 F6 | 	mov	local08, objptr
0ee9c     16 00 00 FF 
0eea0     BC B4 06 F1 | 	add	local08, ##11452
0eea4     5A B7 02 F1 | 	add	local09, local08
0eea8     AA 2B 25 FF 
0eeac     00 B5 06 F6 | 	mov	local08, ##1247237376
0eeb0     5C 93 52 F6 | 	abs	arg01, local10 wc
0eeb4     1F B0 C6 C9 |  if_b	decod	local06, #31
0eeb8     00 B0 06 36 |  if_ae	mov	local06, #0
0eebc     E4 7D B1 FD | 	call	#__system___float_fromuns
0eec0     58 7B 62 F5 | 	xor	result1, local06
0eec4     3D 95 02 F6 | 	mov	arg02, result1
0eec8     5A 93 02 F6 | 	mov	arg01, local08
0eecc     DC 83 B1 FD | 	call	#__system___float_div
0eed0     3D B5 02 F6 | 	mov	local08, result1
0eed4     59 93 52 F6 | 	abs	arg01, local07 wc
0eed8     1F B0 C6 C9 |  if_b	decod	local06, #31
0eedc     00 B0 06 36 |  if_ae	mov	local06, #0
0eee0     C0 7D B1 FD | 	call	#__system___float_fromuns
0eee4     58 7B 62 F5 | 	xor	result1, local06
0eee8     3D 93 02 F6 | 	mov	arg01, result1
0eeec     00 40 24 FF 
0eef0     00 94 06 F6 | 	mov	arg02, ##1216348160
0eef4     B4 83 B1 FD | 	call	#__system___float_div
0eef8     3D 95 02 F6 | 	mov	arg02, result1
0eefc     5A 93 02 F6 | 	mov	arg01, local08
0ef00     A4 81 B1 FD | 	call	#__system___float_mul
0ef04     18 B6 06 F1 | 	add	local09, #24
0ef08     5B 7B 62 FC | 	wrlong	result1, local09
0ef0c                 | LR__1263
0ef0c     10 B2 66 F0 | 	shl	local07, #16
0ef10     5C B3 02 F1 | 	add	local07, local10
0ef14                 | ' if (lpeek(base+64*channel+8) and $0800_0000)=0 then 
0ef14     38 00 00 FF 
0ef18     B4 65 06 F1 | 	add	objptr, ##29108
0ef1c     32 93 02 FB | 	rdlong	arg01, objptr
0ef20     38 00 00 FF 
0ef24     B4 65 86 F1 | 	sub	objptr, ##29108
0ef28     54 B9 02 F6 | 	mov	local10, local02
0ef2c     06 B8 66 F0 | 	shl	local10, #6
0ef30     5C 93 02 F1 | 	add	arg01, local10
0ef34     08 92 06 F1 | 	add	arg01, #8
0ef38     49 7B 02 FB | 	rdlong	result1, arg01
0ef3c     1B 7A 2E F4 | 	testbn	result1, #27 wz
0ef40     28 00 90 5D |  if_ne	jmp	#LR__1264
0ef44     38 00 00 FF 
0ef48     B4 65 06 F1 | 	add	objptr, ##29108
0ef4c     32 93 02 FB | 	rdlong	arg01, objptr
0ef50     38 00 00 FF 
0ef54     B4 65 86 F1 | 	sub	objptr, ##29108
0ef58     06 A8 66 F0 | 	shl	local02, #6
0ef5c     54 93 02 F1 | 	add	arg01, local02
0ef60     18 92 06 F1 | 	add	arg01, #24
0ef64     49 B3 62 FC | 	wrlong	local07, arg01
0ef68     68 00 90 FD | 	jmp	#LR__1265
0ef6c                 | LR__1264
0ef6c     38 00 00 FF 
0ef70     B4 65 06 F1 | 	add	objptr, ##29108
0ef74     32 AD 02 FB | 	rdlong	local04, objptr
0ef78     38 00 00 FF 
0ef7c     B4 65 86 F1 | 	sub	objptr, ##29108
0ef80     54 B9 02 F6 | 	mov	local10, local02
0ef84     06 B8 66 F0 | 	shl	local10, #6
0ef88     5C AD 02 F1 | 	add	local04, local10
0ef8c     18 AC 06 F1 | 	add	local04, #24
0ef90     3E 2C 25 FF 
0ef94     3C 92 06 F6 | 	mov	arg01, ##1247312956
0ef98     53 95 02 F6 | 	mov	arg02, local01
0ef9c     0C 83 B1 FD | 	call	#__system___float_div
0efa0     3D 93 02 F6 | 	mov	arg01, result1
0efa4     01 94 06 F6 | 	mov	arg02, #1
0efa8     C4 85 B1 FD | 	call	#__system___float_tointeger
0efac     56 7B 52 FC | 	wrword	result1, local04
0efb0     38 00 00 FF 
0efb4     B4 65 06 F1 | 	add	objptr, ##29108
0efb8     32 93 02 FB | 	rdlong	arg01, objptr
0efbc     38 00 00 FF 
0efc0     B4 65 86 F1 | 	sub	objptr, ##29108
0efc4     06 A8 66 F0 | 	shl	local02, #6
0efc8     54 93 02 F1 | 	add	arg01, local02
0efcc     1A 92 06 F1 | 	add	arg01, #26
0efd0     49 01 5A FC | 	wrword	#256, arg01
0efd4                 | LR__1265
0efd4     E7 F0 03 F6 | 	mov	ptra, fp
0efd8     F2 00 A0 FD | 	call	#popregs_
0efdc                 | _do_changefreq_ret
0efdc     2D 00 64 FD | 	ret
0efe0                 | 
0efe0                 | ' 
0efe0                 | ' '-------------------- changepan
0efe0                 | ' 
0efe0                 | ' sub do_changepan
0efe0                 | _do_changepan
0efe0     02 CA 05 F6 | 	mov	COUNT_, #2
0efe4     E8 00 A0 FD | 	call	#pushregs_
0efe8     14 F0 07 F1 | 	add	ptra, #20
0efec     80 E6 BF FD | 	call	#_pop
0eff0     E7 7A 62 FC | 	wrlong	result1, fp
0eff4     04 CE 05 F1 | 	add	fp, #4
0eff8     E7 7C 62 FC | 	wrlong	result2, fp
0effc     04 CE 05 F1 | 	add	fp, #4
0f000     E7 7E 62 FC | 	wrlong	result3, fp
0f004     08 CE 85 F1 | 	sub	fp, #8
0f008     00 00 23 FF 
0f00c     00 A6 06 F6 | 	mov	local01, ##1174405120
0f010     E7 92 02 F6 | 	mov	arg01, fp
0f014     F0 E8 BF FD | 	call	#_converttofloat
0f018     3D 95 02 F6 | 	mov	arg02, result1
0f01c     53 93 02 F6 | 	mov	arg01, local01
0f020     84 80 B1 FD | 	call	#__system___float_mul
0f024     3D 93 02 F6 | 	mov	arg01, result1
0f028     01 94 06 F6 | 	mov	arg02, #1
0f02c     40 85 B1 FD | 	call	#__system___float_tointeger
0f030     3D A7 02 F6 | 	mov	local01, result1
0f034     0D A8 C6 F9 | 	decod	local02, #13
0f038     53 A9 02 F1 | 	add	local02, local01
0f03c                 | ' 
0f03c                 | ' t1=pop()
0f03c                 | ' pan=8192+round(8192*converttofloat(t1)) 
0f03c                 | ' if pan<0 then pan=0
0f03c     00 A8 56 F2 | 	cmps	local02, #0 wc
0f040     00 A8 06 C6 |  if_b	mov	local02, #0
0f044                 | ' if pan>16384 then pan=16384
0f044     20 00 00 FF 
0f048     01 A8 56 F2 | 	cmps	local02, ##16385 wc
0f04c     0E A8 C6 39 |  if_ae	decod	local02, #14
0f050     1C E6 BF FD | 	call	#_pop
0f054     3F A7 02 F6 | 	mov	local01, result3
0f058     E7 7A 62 FC | 	wrlong	result1, fp
0f05c     04 CE 05 F1 | 	add	fp, #4
0f060     E7 7C 62 FC | 	wrlong	result2, fp
0f064     04 CE 05 F1 | 	add	fp, #4
0f068     E7 A6 62 FC | 	wrlong	local01, fp
0f06c     08 CE 85 F1 | 	sub	fp, #8
0f070     E7 92 02 F6 | 	mov	arg01, fp
0f074     D4 E7 BF FD | 	call	#_converttoint
0f078     3D A7 52 F6 | 	abs	local01, result1 wc
0f07c     07 A6 06 F5 | 	and	local01, #7
0f080     53 A7 82 F6 | 	negc	local01, local01
0f084     38 00 00 FF 
0f088     B4 65 06 F1 | 	add	objptr, ##29108
0f08c     32 93 02 FB | 	rdlong	arg01, objptr
0f090     38 00 00 FF 
0f094     B4 65 86 F1 | 	sub	objptr, ##29108
0f098     06 A6 66 F0 | 	shl	local01, #6
0f09c     53 93 02 F1 | 	add	arg01, local01
0f0a0     16 92 06 F1 | 	add	arg01, #22
0f0a4     49 A9 52 FC | 	wrword	local02, arg01
0f0a8     E7 F0 03 F6 | 	mov	ptra, fp
0f0ac     F2 00 A0 FD | 	call	#popregs_
0f0b0                 | _do_changepan_ret
0f0b0     2D 00 64 FD | 	ret
0f0b4                 | 
0f0b4                 | ' 
0f0b4                 | ' '-------------------- changevol
0f0b4                 | ' 
0f0b4                 | ' sub do_changevol
0f0b4                 | _do_changevol
0f0b4     01 CA 05 F6 | 	mov	COUNT_, #1
0f0b8     E8 00 A0 FD | 	call	#pushregs_
0f0bc     14 F0 07 F1 | 	add	ptra, #20
0f0c0     AC E5 BF FD | 	call	#_pop
0f0c4     3F 95 02 F6 | 	mov	arg02, result3
0f0c8     E7 7A 62 FC | 	wrlong	result1, fp
0f0cc     04 CE 05 F1 | 	add	fp, #4
0f0d0     E7 7C 62 FC | 	wrlong	result2, fp
0f0d4     04 CE 05 F1 | 	add	fp, #4
0f0d8     E7 94 62 FC | 	wrlong	arg02, fp
0f0dc     08 CE 85 F1 | 	sub	fp, #8
0f0e0     E7 92 02 F6 | 	mov	arg01, fp
0f0e4     20 E8 BF FD | 	call	#_converttofloat
0f0e8     3D 93 02 F6 | 	mov	arg01, result1
0f0ec     00 3D 22 FF 
0f0f0     00 94 06 F6 | 	mov	arg02, ##1148846080
0f0f4     B0 7F B1 FD | 	call	#__system___float_mul
0f0f8     3D 93 02 F6 | 	mov	arg01, result1
0f0fc     01 94 06 F6 | 	mov	arg02, #1
0f100     6C 84 B1 FD | 	call	#__system___float_tointeger
0f104     3D 95 52 F6 | 	abs	arg02, result1 wc
0f108     0D 94 46 F7 | 	zerox	arg02, #13
0f10c     4A A7 82 F6 | 	negc	local01, arg02
0f110     5C E5 BF FD | 	call	#_pop
0f114     3F 95 02 F6 | 	mov	arg02, result3
0f118     E7 7A 62 FC | 	wrlong	result1, fp
0f11c     04 CE 05 F1 | 	add	fp, #4
0f120     E7 7C 62 FC | 	wrlong	result2, fp
0f124     04 CE 05 F1 | 	add	fp, #4
0f128     E7 94 62 FC | 	wrlong	arg02, fp
0f12c     08 CE 85 F1 | 	sub	fp, #8
0f130     E7 92 02 F6 | 	mov	arg01, fp
0f134     14 E7 BF FD | 	call	#_converttoint
0f138     3D 95 52 F6 | 	abs	arg02, result1 wc
0f13c     07 94 06 F5 | 	and	arg02, #7
0f140     4A 95 82 F6 | 	negc	arg02, arg02
0f144     38 00 00 FF 
0f148     B4 65 06 F1 | 	add	objptr, ##29108
0f14c     32 93 02 FB | 	rdlong	arg01, objptr
0f150     38 00 00 FF 
0f154     B4 65 86 F1 | 	sub	objptr, ##29108
0f158     06 94 66 F0 | 	shl	arg02, #6
0f15c     4A 93 02 F1 | 	add	arg01, arg02
0f160     14 92 06 F1 | 	add	arg01, #20
0f164     49 A7 52 FC | 	wrword	local01, arg01
0f168     E7 F0 03 F6 | 	mov	ptra, fp
0f16c     F2 00 A0 FD | 	call	#popregs_
0f170                 | _do_changevol_ret
0f170     2D 00 64 FD | 	ret
0f174                 | 
0f174                 | ' 
0f174                 | ' '-------------------- changewav
0f174                 | ' 
0f174                 | ' sub do_changewav
0f174                 | _do_changewav
0f174     01 CA 05 F6 | 	mov	COUNT_, #1
0f178     E8 00 A0 FD | 	call	#pushregs_
0f17c     14 F0 07 F1 | 	add	ptra, #20
0f180     EC E4 BF FD | 	call	#_pop
0f184     3F 95 02 F6 | 	mov	arg02, result3
0f188     E7 7A 62 FC | 	wrlong	result1, fp
0f18c     04 CE 05 F1 | 	add	fp, #4
0f190     E7 7C 62 FC | 	wrlong	result2, fp
0f194     04 CE 05 F1 | 	add	fp, #4
0f198     E7 94 62 FC | 	wrlong	arg02, fp
0f19c     08 CE 85 F1 | 	sub	fp, #8
0f1a0     E7 92 02 F6 | 	mov	arg01, fp
0f1a4     A4 E6 BF FD | 	call	#_converttoint
0f1a8     3D A7 02 F6 | 	mov	local01, result1
0f1ac                 | ' 
0f1ac                 | ' t1=pop()
0f1ac                 | ' wave=converttoint(t1)
0f1ac                 | ' if wave<0 then wave=0
0f1ac     00 A6 56 F2 | 	cmps	local01, #0 wc
0f1b0     00 A6 06 C6 |  if_b	mov	local01, #0
0f1b4     B8 E4 BF FD | 	call	#_pop
0f1b8     3F 95 02 F6 | 	mov	arg02, result3
0f1bc     E7 7A 62 FC | 	wrlong	result1, fp
0f1c0     04 CE 05 F1 | 	add	fp, #4
0f1c4     E7 7C 62 FC | 	wrlong	result2, fp
0f1c8     04 CE 05 F1 | 	add	fp, #4
0f1cc     E7 94 62 FC | 	wrlong	arg02, fp
0f1d0     08 CE 85 F1 | 	sub	fp, #8
0f1d4     E7 92 02 F6 | 	mov	arg01, fp
0f1d8     70 E6 BF FD | 	call	#_converttoint
0f1dc     3D 7D 52 F6 | 	abs	result2, result1 wc
0f1e0     07 7C 06 F5 | 	and	result2, #7
0f1e4     3E 7D 82 F6 | 	negc	result2, result2
0f1e8                 | ' if wave <32 then 
0f1e8     20 A6 56 F2 | 	cmps	local01, #32 wc
0f1ec     34 00 90 3D |  if_ae	jmp	#LR__1270
0f1f0     38 00 00 FF 
0f1f4     B4 65 06 F1 | 	add	objptr, ##29108
0f1f8     32 93 02 FB | 	rdlong	arg01, objptr
0f1fc     38 00 00 FF 
0f200     B4 65 86 F1 | 	sub	objptr, ##29108
0f204     06 7C 66 F0 | 	shl	result2, #6
0f208     3E 93 02 F1 | 	add	arg01, result2
0f20c     08 92 06 F1 | 	add	arg01, #8
0f210     0B A6 66 F0 | 	shl	local01, #11
0f214     00 00 40 FF 
0f218     00 A6 06 F1 | 	add	local01, ##-2147483648
0f21c     49 A7 62 FC | 	wrlong	local01, arg01
0f220     28 00 90 FD | 	jmp	#LR__1271
0f224                 | LR__1270
0f224     38 00 00 FF 
0f228     B4 65 06 F1 | 	add	objptr, ##29108
0f22c     32 93 02 FB | 	rdlong	arg01, objptr
0f230     38 00 00 FF 
0f234     B4 65 86 F1 | 	sub	objptr, ##29108
0f238     06 7C 66 F0 | 	shl	result2, #6
0f23c     3E 93 02 F1 | 	add	arg01, result2
0f240     08 92 06 F1 | 	add	arg01, #8
0f244     00 00 C4 FF 
0f248     49 01 68 FC | 	wrlong	##-2013265920, arg01
0f24c                 | LR__1271
0f24c     E7 F0 03 F6 | 	mov	ptra, fp
0f250     F2 00 A0 FD | 	call	#popregs_
0f254                 | _do_changewav_ret
0f254     2D 00 64 FD | 	ret
0f258                 | 
0f258                 | ' 
0f258                 | ' '-------------------- chr$
0f258                 | ' 
0f258                 | ' sub do_chr
0f258                 | _do_chr
0f258     00 CA 05 F6 | 	mov	COUNT_, #0
0f25c     E8 00 A0 FD | 	call	#pushregs_
0f260     14 F0 07 F1 | 	add	ptra, #20
0f264     4C 00 00 FF 
0f268     24 64 06 F1 | 	add	objptr, ##38948
0f26c     32 97 02 FB | 	rdlong	arg03, objptr
0f270     4B 95 02 F6 | 	mov	arg02, arg03
0f274     01 94 66 F0 | 	shl	arg02, #1
0f278     4B 95 02 F1 | 	add	arg02, arg03
0f27c     02 94 66 F0 | 	shl	arg02, #2
0f280     03 00 00 FF 
0f284     04 64 86 F1 | 	sub	objptr, ##1540
0f288     32 95 02 F1 | 	add	arg02, objptr
0f28c     4A 97 02 FB | 	rdlong	arg03, arg02
0f290                 | ' 
0f290                 | ' numpar=compiledline(lineptr_e).result.uresult
0f290                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
0f290     02 96 16 F2 | 	cmp	arg03, #2 wc
0f294     49 00 00 FF 
0f298     20 64 86 F1 | 	sub	objptr, ##37408
0f29c     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
0f2a0     40 00 90 4D |  if_c_and_nz	jmp	#LR__1280
0f2a4     00 92 06 F6 | 	mov	arg01, #0
0f2a8     B0 AC B1 FD | 	call	#__system___getiolock_0622
0f2ac     3D 93 02 F6 | 	mov	arg01, result1
0f2b0     24 57 B1 FD | 	call	#__system___lockmem
0f2b4     96 01 00 FF 
0f2b8     76 95 06 F6 | 	mov	arg02, ##@LR__5971
0f2bc     00 92 06 F6 | 	mov	arg01, #0
0f2c0     00 96 06 F6 | 	mov	arg03, #0
0f2c4     04 64 B1 FD | 	call	#__system___basic_print_string
0f2c8     00 92 06 F6 | 	mov	arg01, #0
0f2cc     8C AC B1 FD | 	call	#__system___getiolock_0622
0f2d0     3D 01 68 FC | 	wrlong	#0, result1
0f2d4     27 92 06 F6 | 	mov	arg01, #39
0f2d8     00 94 06 F6 | 	mov	arg02, #0
0f2dc     F4 19 B1 FD | 	call	#_printerror
0f2e0     48 00 90 FD | 	jmp	#LR__1281
0f2e4                 | LR__1280
0f2e4     88 E3 BF FD | 	call	#_pop
0f2e8     3F 97 02 F6 | 	mov	arg03, result3
0f2ec     E7 7A 62 FC | 	wrlong	result1, fp
0f2f0     04 CE 05 F1 | 	add	fp, #4
0f2f4     E7 7C 62 FC | 	wrlong	result2, fp
0f2f8     04 CE 05 F1 | 	add	fp, #4
0f2fc     E7 96 62 FC | 	wrlong	arg03, fp
0f300     08 CE 85 F1 | 	sub	fp, #8
0f304     E7 92 02 F6 | 	mov	arg01, fp
0f308     40 E5 BF FD | 	call	#_converttoint
0f30c     3D 93 02 F6 | 	mov	arg01, result1
0f310     30 71 B1 FD | 	call	#__system__Chr_S
0f314     E7 7A 62 FC | 	wrlong	result1, fp
0f318     08 CE 05 F1 | 	add	fp, #8
0f31c     E7 3E 68 FC | 	wrlong	#31, fp
0f320     08 CE 85 F1 | 	sub	fp, #8
0f324     E7 92 02 F6 | 	mov	arg01, fp
0f328     D4 E3 BF FD | 	call	#_push
0f32c                 | LR__1281
0f32c     E7 F0 03 F6 | 	mov	ptra, fp
0f330     F2 00 A0 FD | 	call	#popregs_
0f334                 | _do_chr_ret
0f334     2D 00 64 FD | 	ret
0f338                 | 
0f338                 | ' 
0f338                 | ' '-------------------- circle
0f338                 | ' 
0f338                 | ' sub do_circle
0f338                 | _do_circle
0f338     02 CA 05 F6 | 	mov	COUNT_, #2
0f33c     E8 00 A0 FD | 	call	#pushregs_
0f340     24 F0 07 F1 | 	add	ptra, #36
0f344     28 E3 BF FD | 	call	#_pop
0f348     3D 99 02 F6 | 	mov	arg04, result1
0f34c     3E 97 02 F6 | 	mov	arg03, result2
0f350     3F 95 02 F6 | 	mov	arg02, result3
0f354     18 CE 05 F1 | 	add	fp, #24
0f358     E7 98 62 FC | 	wrlong	arg04, fp
0f35c     04 CE 05 F1 | 	add	fp, #4
0f360     E7 96 62 FC | 	wrlong	arg03, fp
0f364     04 CE 05 F1 | 	add	fp, #4
0f368     E7 94 62 FC | 	wrlong	arg02, fp
0f36c     20 CE 85 F1 | 	sub	fp, #32
0f370     FC E2 BF FD | 	call	#_pop
0f374     3D 99 02 F6 | 	mov	arg04, result1
0f378     3E 97 02 F6 | 	mov	arg03, result2
0f37c     3F A7 02 F6 | 	mov	local01, result3
0f380     0C CE 05 F1 | 	add	fp, #12
0f384     E7 98 62 FC | 	wrlong	arg04, fp
0f388     04 CE 05 F1 | 	add	fp, #4
0f38c     E7 96 62 FC | 	wrlong	arg03, fp
0f390     04 CE 05 F1 | 	add	fp, #4
0f394     E7 A6 62 FC | 	wrlong	local01, fp
0f398     14 CE 85 F1 | 	sub	fp, #20
0f39c     D0 E2 BF FD | 	call	#_pop
0f3a0     E7 7A 62 FC | 	wrlong	result1, fp
0f3a4     04 CE 05 F1 | 	add	fp, #4
0f3a8     E7 7C 62 FC | 	wrlong	result2, fp
0f3ac     04 CE 05 F1 | 	add	fp, #4
0f3b0     E7 7E 62 FC | 	wrlong	result3, fp
0f3b4                 | ' 
0f3b4                 | ' t3=pop()
0f3b4                 | ' t2=pop()
0f3b4                 | ' t1=pop()
0f3b4                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0f3b4     3F 99 02 F6 | 	mov	arg04, result3
0f3b8     08 CE 85 F1 | 	sub	fp, #8
0f3bc     1C 98 0E F2 | 	cmp	arg04, #28 wz
0f3c0     08 CE 05 51 |  if_ne	add	fp, #8
0f3c4     E7 A6 02 5B |  if_ne	rdlong	local01, fp
0f3c8     08 CE 85 51 |  if_ne	sub	fp, #8
0f3cc     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
0f3d0     7C 00 90 5D |  if_ne	jmp	#LR__1290
0f3d4     14 CE 05 F1 | 	add	fp, #20
0f3d8     E7 A6 02 FB | 	rdlong	local01, fp
0f3dc     14 CE 85 F1 | 	sub	fp, #20
0f3e0     1C A6 0E F2 | 	cmp	local01, #28 wz
0f3e4     14 CE 05 51 |  if_ne	add	fp, #20
0f3e8     E7 98 02 5B |  if_ne	rdlong	arg04, fp
0f3ec     14 CE 85 51 |  if_ne	sub	fp, #20
0f3f0     1D 98 0E 52 |  if_ne	cmp	arg04, #29 wz
0f3f4     58 00 90 5D |  if_ne	jmp	#LR__1290
0f3f8     20 CE 05 F1 | 	add	fp, #32
0f3fc     E7 A6 02 FB | 	rdlong	local01, fp
0f400     20 CE 85 F1 | 	sub	fp, #32
0f404     1C A6 0E F2 | 	cmp	local01, #28 wz
0f408     20 CE 05 51 |  if_ne	add	fp, #32
0f40c     E7 98 02 5B |  if_ne	rdlong	arg04, fp
0f410     20 CE 85 51 |  if_ne	sub	fp, #32
0f414     1D 98 0E 52 |  if_ne	cmp	arg04, #29 wz
0f418     34 00 90 5D |  if_ne	jmp	#LR__1290
0f41c     E7 92 02 FB | 	rdlong	arg01, fp
0f420     0C CE 05 F1 | 	add	fp, #12
0f424     E7 94 02 FB | 	rdlong	arg02, fp
0f428     0C CE 05 F1 | 	add	fp, #12
0f42c     E7 96 02 FB | 	rdlong	arg03, fp
0f430     18 CE 85 F1 | 	sub	fp, #24
0f434     38 00 00 FF 
0f438     CC 65 06 F1 | 	add	objptr, ##29132
0f43c     32 99 02 FB | 	rdlong	arg04, objptr
0f440     38 00 00 FF 
0f444     CC 65 86 F1 | 	sub	objptr, ##29132
0f448     60 31 B1 FD | 	call	#_Hg010b_4_spin2_circle
0f44c                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0f44c     4C 00 90 FD | 	jmp	#LR__1291
0f450                 | LR__1290
0f450     E7 92 02 F6 | 	mov	arg01, fp
0f454     F4 E3 BF FD | 	call	#_converttoint
0f458     3D A7 02 F6 | 	mov	local01, result1
0f45c     E7 92 02 F6 | 	mov	arg01, fp
0f460     0C 92 06 F1 | 	add	arg01, #12
0f464     E4 E3 BF FD | 	call	#_converttoint
0f468     3D A9 02 F6 | 	mov	local02, result1
0f46c     E7 92 02 F6 | 	mov	arg01, fp
0f470     18 92 06 F1 | 	add	arg01, #24
0f474     D4 E3 BF FD | 	call	#_converttoint
0f478     3D 97 02 F6 | 	mov	arg03, result1
0f47c     38 00 00 FF 
0f480     CC 65 06 F1 | 	add	objptr, ##29132
0f484     32 99 02 FB | 	rdlong	arg04, objptr
0f488     38 00 00 FF 
0f48c     CC 65 86 F1 | 	sub	objptr, ##29132
0f490     53 93 02 F6 | 	mov	arg01, local01
0f494     54 95 02 F6 | 	mov	arg02, local02
0f498     10 31 B1 FD | 	call	#_Hg010b_4_spin2_circle
0f49c                 | LR__1291
0f49c     E7 F0 03 F6 | 	mov	ptra, fp
0f4a0     F2 00 A0 FD | 	call	#popregs_
0f4a4                 | _do_circle_ret
0f4a4     2D 00 64 FD | 	ret
0f4a8                 | 
0f4a8                 | ' 
0f4a8                 | ' '-------------------- click
0f4a8                 | ' 
0f4a8                 | ' sub do_click
0f4a8                 | _do_click
0f4a8     C4 E1 BF FD | 	call	#_pop
0f4ac     00 7A 4E F2 | 	cmps	result1, #0 wz
0f4b0                 | ' 
0f4b0                 | ' t1=pop()
0f4b0                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
0f4b0     52 00 00 AF 
0f4b4     E0 64 06 A1 |  if_e	add	objptr, ##42208
0f4b8     32 01 68 AC |  if_e	wrlong	#0, objptr
0f4bc     52 00 00 FF 
0f4c0     E0 64 C6 F3 | 	sumz	objptr, ##42208
0f4c4     32 03 68 5C |  if_ne	wrlong	#1, objptr
0f4c8     52 00 00 5F 
0f4cc     E0 64 86 51 |  if_ne	sub	objptr, ##42208
0f4d0                 | _do_click_ret
0f4d0     2D 00 64 FD | 	ret
0f4d4                 | 
0f4d4                 | ' 
0f4d4                 | ' '-------------------- close
0f4d4                 | ' 
0f4d4                 | ' sub do_close
0f4d4                 | _do_close
0f4d4     03 CA 05 F6 | 	mov	COUNT_, #3
0f4d8     E8 00 A0 FD | 	call	#pushregs_
0f4dc     90 E1 BF FD | 	call	#_pop
0f4e0     3D A7 02 F6 | 	mov	local01, result1
0f4e4     3F 97 02 F6 | 	mov	arg03, result3
0f4e8     3E A9 02 F6 | 	mov	local02, result2
0f4ec     4B AB 02 F6 | 	mov	local03, arg03
0f4f0                 | ' 
0f4f0                 | ' numpar=compiledline(lineptr_e).result.uresult
0f4f0                 | ' t1=pop()
0f4f0                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
0f4f0     2C AA 0E F2 | 	cmp	local03, #44 wz
0f4f4     44 00 90 AD |  if_e	jmp	#LR__1300
0f4f8     00 92 06 F6 | 	mov	arg01, #0
0f4fc     5C AA B1 FD | 	call	#__system___getiolock_0622
0f500     3D 93 02 F6 | 	mov	arg01, result1
0f504     D0 54 B1 FD | 	call	#__system___lockmem
0f508     96 01 00 FF 
0f50c     7D 95 06 F6 | 	mov	arg02, ##@LR__5972
0f510     00 92 06 F6 | 	mov	arg01, #0
0f514     00 96 06 F6 | 	mov	arg03, #0
0f518     B0 61 B1 FD | 	call	#__system___basic_print_string
0f51c     00 92 06 F6 | 	mov	arg01, #0
0f520     0A 94 06 F6 | 	mov	arg02, #10
0f524     00 96 06 F6 | 	mov	arg03, #0
0f528     48 61 B1 FD | 	call	#__system___basic_print_char
0f52c     00 92 06 F6 | 	mov	arg01, #0
0f530     28 AA B1 FD | 	call	#__system___getiolock_0622
0f534     3D 01 68 FC | 	wrlong	#0, result1
0f538     08 00 90 FD | 	jmp	#LR__1301
0f53c                 | LR__1300
0f53c                 | ' channel  = t1.result.iresult
0f53c                 | ' close #channel
0f53c     53 93 02 F6 | 	mov	arg01, local01
0f540     70 A0 B1 FD | 	call	#__system__close
0f544                 | LR__1301
0f544     E7 F0 03 F6 | 	mov	ptra, fp
0f548     F2 00 A0 FD | 	call	#popregs_
0f54c                 | _do_close_ret
0f54c     2D 00 64 FD | 	ret
0f550                 | 
0f550                 | ' 
0f550                 | ' '-------------------- cls
0f550                 | ' 
0f550                 | ' sub do_cls
0f550                 | _do_cls
0f550     38 00 00 FF 
0f554     E0 65 06 F1 | 	add	objptr, ##29152
0f558     32 93 02 FB | 	rdlong	arg01, objptr
0f55c     04 64 86 F1 | 	sub	objptr, #4
0f560     32 95 02 FB | 	rdlong	arg02, objptr
0f564     38 00 00 FF 
0f568     DC 65 86 F1 | 	sub	objptr, ##29148
0f56c     48 35 B1 FD | 	call	#_Hg010b_4_spin2_cls
0f570     38 00 00 FF 
0f574     E0 65 06 F1 | 	add	objptr, ##29152
0f578     32 95 02 FB | 	rdlong	arg02, objptr
0f57c     14 64 86 F1 | 	sub	objptr, #20
0f580     32 95 62 FC | 	wrlong	arg02, objptr
0f584     38 00 00 FF 
0f588     CC 65 86 F1 | 	sub	objptr, ##29132
0f58c                 | _do_cls_ret
0f58c     2D 00 64 FD | 	ret
0f590                 | 
0f590                 | ' 
0f590                 | ' sub do_coginit
0f590                 | _do_coginit
0f590     05 CA 05 F6 | 	mov	COUNT_, #5
0f594     E8 00 A0 FD | 	call	#pushregs_
0f598     08 00 00 FF 
0f59c     1C F0 07 F1 | 	add	ptra, ##4124
0f5a0     4C 00 00 FF 
0f5a4     24 64 06 F1 | 	add	objptr, ##38948
0f5a8     32 A7 02 FB | 	rdlong	local01, objptr
0f5ac     53 A9 02 F6 | 	mov	local02, local01
0f5b0     01 A8 66 F0 | 	shl	local02, #1
0f5b4     53 A9 02 F1 | 	add	local02, local01
0f5b8     02 A8 66 F0 | 	shl	local02, #2
0f5bc     03 00 00 FF 
0f5c0     04 64 86 F1 | 	sub	objptr, ##1540
0f5c4     32 A9 02 F1 | 	add	local02, objptr
0f5c8     54 A9 02 FB | 	rdlong	local02, local02
0f5cc                 | ' numpar=compiledline(lineptr_e).result.uresult
0f5cc                 | ' if numpar<2 orelse numpar>3 then print "coginit: "; : printerror(39) : return
0f5cc     02 A8 56 F2 | 	cmps	local02, #2 wc
0f5d0     49 00 00 FF 
0f5d4     20 64 86 F1 | 	sub	objptr, ##37408
0f5d8     08 00 90 CD |  if_b	jmp	#LR__1310
0f5dc     04 A8 56 F2 | 	cmps	local02, #4 wc
0f5e0     40 00 90 CD |  if_b	jmp	#LR__1311
0f5e4                 | LR__1310
0f5e4     00 92 06 F6 | 	mov	arg01, #0
0f5e8     70 A9 B1 FD | 	call	#__system___getiolock_0622
0f5ec     3D 93 02 F6 | 	mov	arg01, result1
0f5f0     E4 53 B1 FD | 	call	#__system___lockmem
0f5f4     96 01 00 FF 
0f5f8     8F 95 06 F6 | 	mov	arg02, ##@LR__5973
0f5fc     00 92 06 F6 | 	mov	arg01, #0
0f600     00 96 06 F6 | 	mov	arg03, #0
0f604     C4 60 B1 FD | 	call	#__system___basic_print_string
0f608     00 92 06 F6 | 	mov	arg01, #0
0f60c     4C A9 B1 FD | 	call	#__system___getiolock_0622
0f610     3D 01 68 FC | 	wrlong	#0, result1
0f614     27 92 06 F6 | 	mov	arg01, #39
0f618     00 94 06 F6 | 	mov	arg02, #0
0f61c     B4 16 B1 FD | 	call	#_printerror
0f620     2C 01 90 FD | 	jmp	#LR__1315
0f624                 | LR__1311
0f624     48 E0 BF FD | 	call	#_pop
0f628     3F A7 02 F6 | 	mov	local01, result3
0f62c     08 00 00 FF 
0f630     10 CE 05 F1 | 	add	fp, ##4112
0f634     E7 7A 62 FC | 	wrlong	result1, fp
0f638     04 CE 05 F1 | 	add	fp, #4
0f63c     E7 7C 62 FC | 	wrlong	result2, fp
0f640     04 CE 05 F1 | 	add	fp, #4
0f644     E7 A6 62 FC | 	wrlong	local01, fp
0f648     08 CE 85 F1 | 	sub	fp, #8
0f64c     E7 92 02 F6 | 	mov	arg01, fp
0f650     08 00 00 FF 
0f654     10 CE 85 F1 | 	sub	fp, ##4112
0f658     F0 E1 BF FD | 	call	#_converttoint
0f65c     3D AB 02 F6 | 	mov	local03, result1
0f660     0C E0 BF FD | 	call	#_pop
0f664     3F A7 02 F6 | 	mov	local01, result3
0f668     08 00 00 FF 
0f66c     10 CE 05 F1 | 	add	fp, ##4112
0f670     E7 7A 62 FC | 	wrlong	result1, fp
0f674     04 CE 05 F1 | 	add	fp, #4
0f678     E7 7C 62 FC | 	wrlong	result2, fp
0f67c     04 CE 05 F1 | 	add	fp, #4
0f680     E7 A6 62 FC | 	wrlong	local01, fp
0f684     08 CE 85 F1 | 	sub	fp, #8
0f688     E7 92 02 F6 | 	mov	arg01, fp
0f68c     08 00 00 FF 
0f690     10 CE 85 F1 | 	sub	fp, ##4112
0f694     B4 E1 BF FD | 	call	#_converttoint
0f698     3D AD 02 F6 | 	mov	local04, result1
0f69c                 | ' t1=pop()
0f69c                 | ' ptra_val=converttoint(t1)
0f69c                 | ' t1=pop()
0f69c                 | ' addrval=converttoint(t1)
0f69c                 | ' if numpar=3 then 
0f69c     03 A8 0E F2 | 	cmp	local02, #3 wz
0f6a0     40 00 90 5D |  if_ne	jmp	#LR__1312
0f6a4     C8 DF BF FD | 	call	#_pop
0f6a8     3F A7 02 F6 | 	mov	local01, result3
0f6ac     08 00 00 FF 
0f6b0     10 CE 05 F1 | 	add	fp, ##4112
0f6b4     E7 7A 62 FC | 	wrlong	result1, fp
0f6b8     04 CE 05 F1 | 	add	fp, #4
0f6bc     E7 7C 62 FC | 	wrlong	result2, fp
0f6c0     04 CE 05 F1 | 	add	fp, #4
0f6c4     E7 A6 62 FC | 	wrlong	local01, fp
0f6c8     08 CE 85 F1 | 	sub	fp, #8
0f6cc     E7 92 02 F6 | 	mov	arg01, fp
0f6d0     08 00 00 FF 
0f6d4     10 CE 85 F1 | 	sub	fp, ##4112
0f6d8     70 E1 BF FD | 	call	#_converttoint
0f6dc     3D AF 02 F6 | 	mov	local05, result1
0f6e0     04 00 90 FD | 	jmp	#LR__1313
0f6e4                 | LR__1312
0f6e4     10 AE 06 F6 | 	mov	local05, #16
0f6e8                 | LR__1313
0f6e8                 | '     
0f6e8                 | ' if addrval>$80000 then psram.read1(varptr(tempbuf(0)),addrval,4096) : addrval=varptr(tempbuf(0))
0f6e8     00 04 00 FF 
0f6ec     01 AC 56 F2 | 	cmps	local04, ##524289 wc
0f6f0     2C 00 90 CD |  if_b	jmp	#LR__1314
0f6f4     E7 92 02 F6 | 	mov	arg01, fp
0f6f8     10 92 06 F1 | 	add	arg01, #16
0f6fc     56 95 02 F6 | 	mov	arg02, local04
0f700     0C 96 C6 F9 | 	decod	arg03, #12
0f704     0B 00 00 FF 
0f708     CC 64 06 F1 | 	add	objptr, ##5836
0f70c     54 43 B1 FD | 	call	#_psram4_spin2_read1
0f710     0B 00 00 FF 
0f714     CC 64 86 F1 | 	sub	objptr, ##5836
0f718     E7 AC 02 F6 | 	mov	local04, fp
0f71c     10 AC 06 F1 | 	add	local04, #16
0f720                 | LR__1314
0f720                 | ' 
0f720                 | '  asm
0f720     28 AA 62 FD | 	setq	local03
0f724     56 AF F2 FC | 	coginit	local05, local04 wc
0f728                 | '  
0f728                 | ' return cog 
0f728     08 00 00 FF 
0f72c     10 CE 05 F1 | 	add	fp, ##4112
0f730     E7 AE 62 FC | 	wrlong	local05, fp
0f734     08 CE 05 F1 | 	add	fp, #8
0f738     E7 38 68 FC | 	wrlong	#28, fp
0f73c     08 CE 85 F1 | 	sub	fp, #8
0f740     E7 92 02 F6 | 	mov	arg01, fp
0f744     08 00 00 FF 
0f748     10 CE 85 F1 | 	sub	fp, ##4112
0f74c     B0 DF BF FD | 	call	#_push
0f750                 | LR__1315
0f750     E7 F0 03 F6 | 	mov	ptra, fp
0f754     F2 00 A0 FD | 	call	#popregs_
0f758                 | _do_coginit_ret
0f758     2D 00 64 FD | 	ret
0f75c                 | 
0f75c                 | ' 
0f75c                 | ' '-------------------- cogstop
0f75c                 | ' 
0f75c                 | ' sub do_cogstop
0f75c                 | _do_cogstop
0f75c     00 CA 05 F6 | 	mov	COUNT_, #0
0f760     E8 00 A0 FD | 	call	#pushregs_
0f764     0C F0 07 F1 | 	add	ptra, #12
0f768     04 DF BF FD | 	call	#_pop
0f76c     E7 7A 62 FC | 	wrlong	result1, fp
0f770     04 CE 05 F1 | 	add	fp, #4
0f774     E7 7C 62 FC | 	wrlong	result2, fp
0f778     04 CE 05 F1 | 	add	fp, #4
0f77c     E7 7E 62 FC | 	wrlong	result3, fp
0f780     08 CE 85 F1 | 	sub	fp, #8
0f784     E7 92 02 F6 | 	mov	arg01, fp
0f788     C0 E0 BF FD | 	call	#_converttoint
0f78c     03 7A 62 FD | 	cogstop	result1
0f790     E7 F0 03 F6 | 	mov	ptra, fp
0f794     F2 00 A0 FD | 	call	#popregs_
0f798                 | _do_cogstop_ret
0f798     2D 00 64 FD | 	ret
0f79c                 | 
0f79c                 | ' 
0f79c                 | ' '-------------------- color
0f79c                 | ' 
0f79c                 | ' sub do_color
0f79c                 | _do_color
0f79c     03 CA 05 F6 | 	mov	COUNT_, #3
0f7a0     E8 00 A0 FD | 	call	#pushregs_
0f7a4     C8 DE BF FD | 	call	#_pop
0f7a8     3D A7 02 F6 | 	mov	local01, result1
0f7ac     3E A9 02 F6 | 	mov	local02, result2
0f7b0     3F AB 02 F6 | 	mov	local03, result3
0f7b4     38 00 00 FF 
0f7b8     CC 65 06 F1 | 	add	objptr, ##29132
0f7bc     32 A7 62 FC | 	wrlong	local01, objptr
0f7c0     38 00 00 FF 
0f7c4     CC 65 86 F1 | 	sub	objptr, ##29132
0f7c8     E7 F0 03 F6 | 	mov	ptra, fp
0f7cc     F2 00 A0 FD | 	call	#popregs_
0f7d0                 | _do_color_ret
0f7d0     2D 00 64 FD | 	ret
0f7d4                 | 
0f7d4                 | ' 
0f7d4                 | ' '-------------------- copy
0f7d4                 | ' 
0f7d4                 | ' sub do_copy
0f7d4                 | _do_copy
0f7d4     08 CA 05 F6 | 	mov	COUNT_, #8
0f7d8     E8 00 A0 FD | 	call	#pushregs_
0f7dc     90 DE BF FD | 	call	#_pop
0f7e0     3D A7 02 F6 | 	mov	local01, result1
0f7e4     3E 9B 02 F6 | 	mov	arg05, result2
0f7e8     3F 99 02 F6 | 	mov	arg04, result3
0f7ec     4D A9 02 F6 | 	mov	local02, arg05
0f7f0     4C AB 02 F6 | 	mov	local03, arg04
0f7f4     78 DE BF FD | 	call	#_pop
0f7f8     3E 9B 02 F6 | 	mov	arg05, result2
0f7fc     3F 99 02 F6 | 	mov	arg04, result3
0f800     3D AD 02 F6 | 	mov	local04, result1
0f804     4D AF 02 F6 | 	mov	local05, arg05
0f808     4C B1 02 F6 | 	mov	local06, arg04
0f80c                 | ' 
0f80c                 | ' t1=pop()
0f80c                 | ' t2=pop()
0f80c                 | ' if t2.result_type=result_string2 then 
0f80c     2B B0 0E F2 | 	cmp	local06, #43 wz
0f810     10 00 90 5D |  if_ne	jmp	#LR__1320
0f814     56 93 02 F6 | 	mov	arg01, local04
0f818     C4 DF BF FD | 	call	#_convertstring
0f81c     3D B3 02 F6 | 	mov	local07, result1
0f820     2C 00 90 FD | 	jmp	#LR__1322
0f824                 | LR__1320
0f824     1F B0 0E F2 | 	cmp	local06, #31 wz
0f828     56 B3 02 A6 |  if_e	mov	local07, local04
0f82c     20 00 90 AD |  if_e	jmp	#LR__1321
0f830     52 00 00 FF 
0f834     94 64 06 F1 | 	add	objptr, ##42132
0f838     32 95 02 FB | 	rdlong	arg02, objptr
0f83c     52 00 00 FF 
0f840     94 64 86 F1 | 	sub	objptr, ##42132
0f844     0F 92 06 F6 | 	mov	arg01, #15
0f848     88 14 B1 FD | 	call	#_printerror
0f84c                 | '   printerror(15,runheader(0)) : return
0f84c     50 03 90 FD | 	jmp	#LR__1329
0f850                 | LR__1321
0f850                 | LR__1322
0f850                 | ' if t1.result_type=result_string2 then 
0f850     2B AA 0E F2 | 	cmp	local03, #43 wz
0f854     10 00 90 5D |  if_ne	jmp	#LR__1323
0f858     53 93 02 F6 | 	mov	arg01, local01
0f85c     80 DF BF FD | 	call	#_convertstring
0f860     3D B5 02 F6 | 	mov	local08, result1
0f864     2C 00 90 FD | 	jmp	#LR__1325
0f868                 | LR__1323
0f868     1F AA 0E F2 | 	cmp	local03, #31 wz
0f86c     53 B5 02 A6 |  if_e	mov	local08, local01
0f870     20 00 90 AD |  if_e	jmp	#LR__1324
0f874     52 00 00 FF 
0f878     94 64 06 F1 | 	add	objptr, ##42132
0f87c     32 95 02 FB | 	rdlong	arg02, objptr
0f880     52 00 00 FF 
0f884     94 64 86 F1 | 	sub	objptr, ##42132
0f888     0F 92 06 F6 | 	mov	arg01, #15
0f88c     44 14 B1 FD | 	call	#_printerror
0f890                 | '   printerror(15,runheader(0)) : return
0f890     0C 03 90 FD | 	jmp	#LR__1329
0f894                 | LR__1324
0f894                 | LR__1325
0f894                 | ' 
0f894                 | ' open filename_1 for input as #9 : err=geterr(): if err<>0 then print "System error - ";err; " in line ";runheader(0);": ";strerror$(err);", file name: ";filename_1 : close #9 : return
0f894     09 92 06 F6 | 	mov	arg01, #9
0f898     59 95 02 F6 | 	mov	arg02, local07
0f89c     00 96 06 F6 | 	mov	arg03, #0
0f8a0     E4 5C B1 FD | 	call	#__system___basic_open_string
0f8a4     20 6A 06 F1 | 	add	ptr___system__dat__, #32
0f8a8     35 7B 0A FB | 	rdlong	result1, ptr___system__dat__ wz
0f8ac     35 01 68 FC | 	wrlong	#0, ptr___system__dat__
0f8b0     20 6A 86 F1 | 	sub	ptr___system__dat__, #32
0f8b4     54 00 00 FF 
0f8b8     B4 64 06 F1 | 	add	objptr, ##43188
0f8bc     32 7B 62 FC | 	wrlong	result1, objptr
0f8c0     54 00 00 FF 
0f8c4     B4 64 86 F1 | 	sub	objptr, ##43188
0f8c8     0C 01 90 AD |  if_e	jmp	#LR__1326
0f8cc     00 92 06 F6 | 	mov	arg01, #0
0f8d0     88 A6 B1 FD | 	call	#__system___getiolock_0622
0f8d4     3D 93 02 F6 | 	mov	arg01, result1
0f8d8     FC 50 B1 FD | 	call	#__system___lockmem
0f8dc     96 01 00 FF 
0f8e0     99 95 06 F6 | 	mov	arg02, ##@LR__5974
0f8e4     00 92 06 F6 | 	mov	arg01, #0
0f8e8     00 96 06 F6 | 	mov	arg03, #0
0f8ec     DC 5D B1 FD | 	call	#__system___basic_print_string
0f8f0     54 00 00 FF 
0f8f4     B4 64 06 F1 | 	add	objptr, ##43188
0f8f8     32 95 02 FB | 	rdlong	arg02, objptr
0f8fc     54 00 00 FF 
0f900     B4 64 86 F1 | 	sub	objptr, ##43188
0f904     00 92 06 F6 | 	mov	arg01, #0
0f908     00 96 06 F6 | 	mov	arg03, #0
0f90c     0A 98 06 F6 | 	mov	arg04, #10
0f910     FC 5D B1 FD | 	call	#__system___basic_print_integer
0f914     96 01 00 FF 
0f918     A9 95 06 F6 | 	mov	arg02, ##@LR__5975
0f91c     00 92 06 F6 | 	mov	arg01, #0
0f920     00 96 06 F6 | 	mov	arg03, #0
0f924     A4 5D B1 FD | 	call	#__system___basic_print_string
0f928     52 00 00 FF 
0f92c     94 64 06 F1 | 	add	objptr, ##42132
0f930     32 95 02 FB | 	rdlong	arg02, objptr
0f934     52 00 00 FF 
0f938     94 64 86 F1 | 	sub	objptr, ##42132
0f93c     00 92 06 F6 | 	mov	arg01, #0
0f940     00 96 06 F6 | 	mov	arg03, #0
0f944     0A 98 06 F6 | 	mov	arg04, #10
0f948     04 5E B1 FD | 	call	#__system___basic_print_unsigned
0f94c     96 01 00 FF 
0f950     B3 95 06 F6 | 	mov	arg02, ##@LR__5976
0f954     00 92 06 F6 | 	mov	arg01, #0
0f958     00 96 06 F6 | 	mov	arg03, #0
0f95c     6C 5D B1 FD | 	call	#__system___basic_print_string
0f960     00 B4 06 F6 | 	mov	local08, #0
0f964     54 00 00 FF 
0f968     B4 64 06 F1 | 	add	objptr, ##43188
0f96c     32 93 02 FB | 	rdlong	arg01, objptr
0f970     54 00 00 FF 
0f974     B4 64 86 F1 | 	sub	objptr, ##43188
0f978     0C 72 B1 FD | 	call	#__system___strerror
0f97c     3D 95 02 F6 | 	mov	arg02, result1
0f980     5A 93 02 F6 | 	mov	arg01, local08
0f984     00 96 06 F6 | 	mov	arg03, #0
0f988     40 5D B1 FD | 	call	#__system___basic_print_string
0f98c     96 01 00 FF 
0f990     B6 95 06 F6 | 	mov	arg02, ##@LR__5977
0f994     00 92 06 F6 | 	mov	arg01, #0
0f998     00 96 06 F6 | 	mov	arg03, #0
0f99c     2C 5D B1 FD | 	call	#__system___basic_print_string
0f9a0     00 92 06 F6 | 	mov	arg01, #0
0f9a4     59 95 02 F6 | 	mov	arg02, local07
0f9a8     00 96 06 F6 | 	mov	arg03, #0
0f9ac     1C 5D B1 FD | 	call	#__system___basic_print_string
0f9b0     00 92 06 F6 | 	mov	arg01, #0
0f9b4     0A 94 06 F6 | 	mov	arg02, #10
0f9b8     00 96 06 F6 | 	mov	arg03, #0
0f9bc     B4 5C B1 FD | 	call	#__system___basic_print_char
0f9c0     00 92 06 F6 | 	mov	arg01, #0
0f9c4     94 A5 B1 FD | 	call	#__system___getiolock_0622
0f9c8     3D 01 68 FC | 	wrlong	#0, result1
0f9cc     09 92 06 F6 | 	mov	arg01, #9
0f9d0     E0 9B B1 FD | 	call	#__system__close
0f9d4     C8 01 90 FD | 	jmp	#LR__1329
0f9d8                 | LR__1326
0f9d8                 | ' open filename_2 for output as #8 : err=geterr(): if err<>0 then print "System error - ";err; " in line ";runheader(0);": ";strerror$(err);", file name: ";filename_2  : close #8 : return
0f9d8     08 92 06 F6 | 	mov	arg01, #8
0f9dc     5A 95 02 F6 | 	mov	arg02, local08
0f9e0     0D 96 06 F6 | 	mov	arg03, #13
0f9e4     A0 5B B1 FD | 	call	#__system___basic_open_string
0f9e8     20 6A 06 F1 | 	add	ptr___system__dat__, #32
0f9ec     35 7B 0A FB | 	rdlong	result1, ptr___system__dat__ wz
0f9f0     35 01 68 FC | 	wrlong	#0, ptr___system__dat__
0f9f4     20 6A 86 F1 | 	sub	ptr___system__dat__, #32
0f9f8     54 00 00 FF 
0f9fc     B4 64 06 F1 | 	add	objptr, ##43188
0fa00     32 7B 62 FC | 	wrlong	result1, objptr
0fa04     54 00 00 FF 
0fa08     B4 64 86 F1 | 	sub	objptr, ##43188
0fa0c     0C 01 90 AD |  if_e	jmp	#LR__1327
0fa10     00 92 06 F6 | 	mov	arg01, #0
0fa14     44 A5 B1 FD | 	call	#__system___getiolock_0622
0fa18     3D 93 02 F6 | 	mov	arg01, result1
0fa1c     B8 4F B1 FD | 	call	#__system___lockmem
0fa20     96 01 00 FF 
0fa24     C4 95 06 F6 | 	mov	arg02, ##@LR__5978
0fa28     00 92 06 F6 | 	mov	arg01, #0
0fa2c     00 96 06 F6 | 	mov	arg03, #0
0fa30     98 5C B1 FD | 	call	#__system___basic_print_string
0fa34     54 00 00 FF 
0fa38     B4 64 06 F1 | 	add	objptr, ##43188
0fa3c     32 95 02 FB | 	rdlong	arg02, objptr
0fa40     54 00 00 FF 
0fa44     B4 64 86 F1 | 	sub	objptr, ##43188
0fa48     00 92 06 F6 | 	mov	arg01, #0
0fa4c     00 96 06 F6 | 	mov	arg03, #0
0fa50     0A 98 06 F6 | 	mov	arg04, #10
0fa54     B8 5C B1 FD | 	call	#__system___basic_print_integer
0fa58     96 01 00 FF 
0fa5c     D4 95 06 F6 | 	mov	arg02, ##@LR__5979
0fa60     00 92 06 F6 | 	mov	arg01, #0
0fa64     00 96 06 F6 | 	mov	arg03, #0
0fa68     60 5C B1 FD | 	call	#__system___basic_print_string
0fa6c     52 00 00 FF 
0fa70     94 64 06 F1 | 	add	objptr, ##42132
0fa74     32 95 02 FB | 	rdlong	arg02, objptr
0fa78     52 00 00 FF 
0fa7c     94 64 86 F1 | 	sub	objptr, ##42132
0fa80     00 92 06 F6 | 	mov	arg01, #0
0fa84     00 96 06 F6 | 	mov	arg03, #0
0fa88     0A 98 06 F6 | 	mov	arg04, #10
0fa8c     C0 5C B1 FD | 	call	#__system___basic_print_unsigned
0fa90     96 01 00 FF 
0fa94     DE 95 06 F6 | 	mov	arg02, ##@LR__5980
0fa98     00 92 06 F6 | 	mov	arg01, #0
0fa9c     00 96 06 F6 | 	mov	arg03, #0
0faa0     28 5C B1 FD | 	call	#__system___basic_print_string
0faa4     00 B2 06 F6 | 	mov	local07, #0
0faa8     54 00 00 FF 
0faac     B4 64 06 F1 | 	add	objptr, ##43188
0fab0     32 93 02 FB | 	rdlong	arg01, objptr
0fab4     54 00 00 FF 
0fab8     B4 64 86 F1 | 	sub	objptr, ##43188
0fabc     C8 70 B1 FD | 	call	#__system___strerror
0fac0     3D 95 02 F6 | 	mov	arg02, result1
0fac4     59 93 02 F6 | 	mov	arg01, local07
0fac8     00 96 06 F6 | 	mov	arg03, #0
0facc     FC 5B B1 FD | 	call	#__system___basic_print_string
0fad0     96 01 00 FF 
0fad4     E1 95 06 F6 | 	mov	arg02, ##@LR__5981
0fad8     00 92 06 F6 | 	mov	arg01, #0
0fadc     00 96 06 F6 | 	mov	arg03, #0
0fae0     E8 5B B1 FD | 	call	#__system___basic_print_string
0fae4     00 92 06 F6 | 	mov	arg01, #0
0fae8     5A 95 02 F6 | 	mov	arg02, local08
0faec     00 96 06 F6 | 	mov	arg03, #0
0faf0     D8 5B B1 FD | 	call	#__system___basic_print_string
0faf4     00 92 06 F6 | 	mov	arg01, #0
0faf8     0A 94 06 F6 | 	mov	arg02, #10
0fafc     00 96 06 F6 | 	mov	arg03, #0
0fb00     70 5B B1 FD | 	call	#__system___basic_print_char
0fb04     00 92 06 F6 | 	mov	arg01, #0
0fb08     50 A4 B1 FD | 	call	#__system___getiolock_0622
0fb0c     3D 01 68 FC | 	wrlong	#0, result1
0fb10     08 92 06 F6 | 	mov	arg01, #8
0fb14     9C 9A B1 FD | 	call	#__system__close
0fb18     84 00 90 FD | 	jmp	#LR__1329
0fb1c                 | LR__1327
0fb1c                 | ' 
0fb1c                 | ' do
0fb1c                 | LR__1328
0fb1c                 | '   get #9,,block(0),1024,r
0fb1c     32 97 02 F6 | 	mov	arg03, objptr
0fb20     50 00 00 FF 
0fb24     58 96 06 F1 | 	add	arg03, ##41048
0fb28     09 92 06 F6 | 	mov	arg01, #9
0fb2c     00 94 06 F6 | 	mov	arg02, #0
0fb30     0A 98 C6 F9 | 	decod	arg04, #10
0fb34     01 9A 06 F6 | 	mov	arg05, #1
0fb38     18 5D B1 FD | 	call	#__system___basic_get
0fb3c     54 00 00 FF 
0fb40     EC 64 06 F1 | 	add	objptr, ##43244
0fb44     32 7B 62 FC | 	wrlong	result1, objptr
0fb48                 | '   put #8,,block(0),r
0fb48     04 00 00 FF 
0fb4c     94 64 86 F1 | 	sub	objptr, ##2196
0fb50     32 97 02 F6 | 	mov	arg03, objptr
0fb54     3D 99 02 F6 | 	mov	arg04, result1
0fb58     50 00 00 FF 
0fb5c     58 64 86 F1 | 	sub	objptr, ##41048
0fb60     08 92 06 F6 | 	mov	arg01, #8
0fb64     00 94 06 F6 | 	mov	arg02, #0
0fb68     01 9A 06 F6 | 	mov	arg05, #1
0fb6c     6C 5C B1 FD | 	call	#__system___basic_put
0fb70     54 00 00 FF 
0fb74     EC 64 06 F1 | 	add	objptr, ##43244
0fb78     32 B5 02 FB | 	rdlong	local08, objptr
0fb7c     54 00 00 FF 
0fb80     EC 64 86 F1 | 	sub	objptr, ##43244
0fb84     02 00 00 FF 
0fb88     00 B4 0E F2 | 	cmp	local08, ##1024 wz
0fb8c     8C FF 9F AD |  if_e	jmp	#LR__1328
0fb90                 | ' close #8
0fb90     08 92 06 F6 | 	mov	arg01, #8
0fb94     1C 9A B1 FD | 	call	#__system__close
0fb98                 | ' close #9
0fb98     09 92 06 F6 | 	mov	arg01, #9
0fb9c     14 9A B1 FD | 	call	#__system__close
0fba0                 | LR__1329
0fba0     E7 F0 03 F6 | 	mov	ptra, fp
0fba4     F2 00 A0 FD | 	call	#popregs_
0fba8                 | _do_copy_ret
0fba8     2D 00 64 FD | 	ret
0fbac                 | 
0fbac                 | ' 
0fbac                 | ' '-------------------- cos
0fbac                 | ' 
0fbac                 | ' sub do_cos
0fbac                 | _do_cos
0fbac     01 CA 05 F6 | 	mov	COUNT_, #1
0fbb0     E8 00 A0 FD | 	call	#pushregs_
0fbb4     10 F0 07 F1 | 	add	ptra, #16
0fbb8     4C 00 00 FF 
0fbbc     24 64 06 F1 | 	add	objptr, ##38948
0fbc0     32 97 02 FB | 	rdlong	arg03, objptr
0fbc4     4B 95 02 F6 | 	mov	arg02, arg03
0fbc8     01 94 66 F0 | 	shl	arg02, #1
0fbcc     4B 95 02 F1 | 	add	arg02, arg03
0fbd0     02 94 66 F0 | 	shl	arg02, #2
0fbd4     03 00 00 FF 
0fbd8     04 64 86 F1 | 	sub	objptr, ##1540
0fbdc     32 95 02 F1 | 	add	arg02, objptr
0fbe0     4A 97 02 FB | 	rdlong	arg03, arg02
0fbe4                 | ' 
0fbe4                 | ' numpar=compiledline(lineptr_e).result.uresult
0fbe4                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
0fbe4     02 96 16 F2 | 	cmp	arg03, #2 wc
0fbe8     49 00 00 FF 
0fbec     20 64 86 F1 | 	sub	objptr, ##37408
0fbf0     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
0fbf4     40 00 90 4D |  if_c_and_nz	jmp	#LR__1330
0fbf8     00 92 06 F6 | 	mov	arg01, #0
0fbfc     5C A3 B1 FD | 	call	#__system___getiolock_0622
0fc00     3D 93 02 F6 | 	mov	arg01, result1
0fc04     D0 4D B1 FD | 	call	#__system___lockmem
0fc08     96 01 00 FF 
0fc0c     EF 95 06 F6 | 	mov	arg02, ##@LR__5982
0fc10     00 92 06 F6 | 	mov	arg01, #0
0fc14     00 96 06 F6 | 	mov	arg03, #0
0fc18     B0 5A B1 FD | 	call	#__system___basic_print_string
0fc1c     00 92 06 F6 | 	mov	arg01, #0
0fc20     38 A3 B1 FD | 	call	#__system___getiolock_0622
0fc24     3D 01 68 FC | 	wrlong	#0, result1
0fc28     27 92 06 F6 | 	mov	arg01, #39
0fc2c     00 94 06 F6 | 	mov	arg02, #0
0fc30     A0 10 B1 FD | 	call	#_printerror
0fc34     78 00 90 FD | 	jmp	#LR__1331
0fc38                 | LR__1330
0fc38     34 DA BF FD | 	call	#_pop
0fc3c     E7 7A 62 FC | 	wrlong	result1, fp
0fc40     04 CE 05 F1 | 	add	fp, #4
0fc44     E7 7C 62 FC | 	wrlong	result2, fp
0fc48     04 CE 05 F1 | 	add	fp, #4
0fc4c     E7 7E 62 FC | 	wrlong	result3, fp
0fc50     08 CE 85 F1 | 	sub	fp, #8
0fc54     54 00 00 FF 
0fc58     84 64 06 F1 | 	add	objptr, ##43140
0fc5c     32 A7 02 FB | 	rdlong	local01, objptr
0fc60     54 00 00 FF 
0fc64     84 64 86 F1 | 	sub	objptr, ##43140
0fc68     E7 92 02 F6 | 	mov	arg01, fp
0fc6c     98 DC BF FD | 	call	#_converttofloat
0fc70     3D 95 02 F6 | 	mov	arg02, result1
0fc74     53 93 02 F6 | 	mov	arg01, local01
0fc78     2C 74 B1 FD | 	call	#__system___float_mul
0fc7c     3D 95 02 F6 | 	mov	arg02, result1
0fc80     87 E4 1F FF 
0fc84     DB 93 06 F6 | 	mov	arg01, ##1070141403
0fc88     1F 94 E6 F4 | 	bitnot	arg02, #31
0fc8c     48 70 B1 FD | 	call	#__system___float_add
0fc90     3D 93 02 F6 | 	mov	arg01, result1
0fc94     80 7D B1 FD | 	call	#__system____builtin_sinf
0fc98     E7 7A 62 FC | 	wrlong	result1, fp
0fc9c     08 CE 05 F1 | 	add	fp, #8
0fca0     E7 3C 68 FC | 	wrlong	#30, fp
0fca4     08 CE 85 F1 | 	sub	fp, #8
0fca8     E7 92 02 F6 | 	mov	arg01, fp
0fcac     50 DA BF FD | 	call	#_push
0fcb0                 | LR__1331
0fcb0     E7 F0 03 F6 | 	mov	ptra, fp
0fcb4     F2 00 A0 FD | 	call	#popregs_
0fcb8                 | _do_cos_ret
0fcb8     2D 00 64 FD | 	ret
0fcbc                 | 
0fcbc                 | ' 
0fcbc                 | ' '-------------------- cursor
0fcbc                 | ' 
0fcbc                 | ' sub do_cursor
0fcbc                 | _do_cursor
0fcbc     B0 D9 BF FD | 	call	#_pop
0fcc0     00 7A 4E F2 | 	cmps	result1, #0 wz
0fcc4                 | ' t1=pop()
0fcc4                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
0fcc4     14 00 90 5D |  if_ne	jmp	#LR__1340
0fcc8     11 92 06 F6 | 	mov	arg01, #17
0fccc     00 94 06 F6 | 	mov	arg02, #0
0fcd0     00 96 06 F6 | 	mov	arg03, #0
0fcd4     48 20 B1 FD | 	call	#_Hg010b_4_spin2_setspritesize
0fcd8     10 00 90 FD | 	jmp	#LR__1341
0fcdc                 | LR__1340
0fcdc     11 92 06 F6 | 	mov	arg01, #17
0fce0     08 94 06 F6 | 	mov	arg02, #8
0fce4     10 96 06 F6 | 	mov	arg03, #16
0fce8     34 20 B1 FD | 	call	#_Hg010b_4_spin2_setspritesize
0fcec                 | LR__1341
0fcec                 | _do_cursor_ret
0fcec     2D 00 64 FD | 	ret
0fcf0                 | 
0fcf0                 | ' 
0fcf0                 | ' '-------------------- defchar
0fcf0                 | ' 
0fcf0                 | ' sub do_defchar
0fcf0                 | _do_defchar
0fcf0     04 CA 05 F6 | 	mov	COUNT_, #4
0fcf4     E8 00 A0 FD | 	call	#pushregs_
0fcf8     28 F0 07 F1 | 	add	ptra, #40
0fcfc     70 D9 BF FD | 	call	#_pop
0fd00     3F 95 02 F6 | 	mov	arg02, result3
0fd04     E7 7A 62 FC | 	wrlong	result1, fp
0fd08     04 CE 05 F1 | 	add	fp, #4
0fd0c     E7 7C 62 FC | 	wrlong	result2, fp
0fd10     04 CE 05 F1 | 	add	fp, #4
0fd14     E7 94 62 FC | 	wrlong	arg02, fp
0fd18     08 CE 85 F1 | 	sub	fp, #8
0fd1c     E7 92 02 F6 | 	mov	arg01, fp
0fd20     28 DB BF FD | 	call	#_converttoint
0fd24     3D A7 02 F6 | 	mov	local01, result1
0fd28     44 D9 BF FD | 	call	#_pop
0fd2c     3F 95 02 F6 | 	mov	arg02, result3
0fd30     E7 7A 62 FC | 	wrlong	result1, fp
0fd34     04 CE 05 F1 | 	add	fp, #4
0fd38     E7 7C 62 FC | 	wrlong	result2, fp
0fd3c     04 CE 05 F1 | 	add	fp, #4
0fd40     E7 94 62 FC | 	wrlong	arg02, fp
0fd44     08 CE 85 F1 | 	sub	fp, #8
0fd48     E7 92 02 F6 | 	mov	arg01, fp
0fd4c     FC DA BF FD | 	call	#_converttoint
0fd50     3D A9 02 F6 | 	mov	local02, result1
0fd54                 | ' 
0fd54                 | ' t1=pop() : cptr=converttoint(t1)
0fd54                 | ' t1=pop() : c=converttoint(t1)
0fd54                 | ' if cptr<$80000 then 
0fd54     00 04 00 FF 
0fd58     00 A6 16 F2 | 	cmp	local01, ##524288 wc
0fd5c     10 00 90 3D |  if_ae	jmp	#LR__1350
0fd60     54 93 02 F6 | 	mov	arg01, local02
0fd64     53 95 02 F6 | 	mov	arg02, local01
0fd68     BC 2B B1 FD | 	call	#_Hg010b_4_spin2_defchar
0fd6c     40 00 90 FD | 	jmp	#LR__1352
0fd70                 | LR__1350
0fd70                 | '   for i=0 to 15: buf(i)=pspeek(cptr+i): next i
0fd70     00 AA 06 F6 | 	mov	local03, #0
0fd74                 | LR__1351
0fd74     55 AD 02 F6 | 	mov	local04, local03
0fd78     E7 94 02 F6 | 	mov	arg02, fp
0fd7c     14 94 06 F1 | 	add	arg02, #20
0fd80     4A AD 02 F1 | 	add	local04, arg02
0fd84     53 93 02 F6 | 	mov	arg01, local01
0fd88     55 93 02 F1 | 	add	arg01, local03
0fd8c     B8 11 B1 FD | 	call	#_pspeek
0fd90     56 7B 42 FC | 	wrbyte	result1, local04
0fd94     01 AA 06 F1 | 	add	local03, #1
0fd98     10 AA 56 F2 | 	cmps	local03, #16 wc
0fd9c     D4 FF 9F CD |  if_b	jmp	#LR__1351
0fda0     E7 94 02 F6 | 	mov	arg02, fp
0fda4     14 94 06 F1 | 	add	arg02, #20
0fda8     54 93 02 F6 | 	mov	arg01, local02
0fdac     78 2B B1 FD | 	call	#_Hg010b_4_spin2_defchar
0fdb0                 | LR__1352
0fdb0     E7 F0 03 F6 | 	mov	ptra, fp
0fdb4     F2 00 A0 FD | 	call	#popregs_
0fdb8                 | _do_defchar_ret
0fdb8     2D 00 64 FD | 	ret
0fdbc                 | 
0fdbc                 | ' 
0fdbc                 | ' '-------------------- defenv
0fdbc                 | ' 
0fdbc                 | ' sub do_defenv
0fdbc                 | _do_defenv
0fdbc     14 CA 05 F6 | 	mov	COUNT_, #20
0fdc0     E8 00 A0 FD | 	call	#pushregs_
0fdc4     58 F0 07 F1 | 	add	ptra, #88
0fdc8     4C 00 00 FF 
0fdcc     24 64 06 F1 | 	add	objptr, ##38948
0fdd0     32 9B 02 FB | 	rdlong	arg05, objptr
0fdd4     4D 99 02 F6 | 	mov	arg04, arg05
0fdd8     01 98 66 F0 | 	shl	arg04, #1
0fddc     4D 99 02 F1 | 	add	arg04, arg05
0fde0     02 98 66 F0 | 	shl	arg04, #2
0fde4     03 00 00 FF 
0fde8     04 64 86 F1 | 	sub	objptr, ##1540
0fdec     32 99 02 F1 | 	add	arg04, objptr
0fdf0     4C A7 02 FB | 	rdlong	local01, arg04
0fdf4                 | ' 
0fdf4                 | ' numpar=compiledline(lineptr_e).result.uresult
0fdf4                 | ' if numpar<>2 andalso numpar<>5 then return 			' TODO and print error
0fdf4     02 A6 0E F2 | 	cmp	local01, #2 wz
0fdf8     49 00 00 FF 
0fdfc     20 64 86 F1 | 	sub	objptr, ##37408
0fe00     05 A6 0E 52 |  if_ne	cmp	local01, #5 wz
0fe04     50 07 90 5D |  if_ne	jmp	#LR__1380
0fe08                 | ' 
0fe08                 | ' if numpar=2 then						' env from .h2 or from a pointer
0fe08     02 A6 0E F2 | 	cmp	local01, #2 wz
0fe0c     1C 03 90 5D |  if_ne	jmp	#LR__1372
0fe10     5C D8 BF FD | 	call	#_pop
0fe14     3F 9B 02 F6 | 	mov	arg05, result3
0fe18     40 CE 05 F1 | 	add	fp, #64
0fe1c     E7 7A 62 FC | 	wrlong	result1, fp
0fe20     04 CE 05 F1 | 	add	fp, #4
0fe24     E7 7C 62 FC | 	wrlong	result2, fp
0fe28     04 CE 05 F1 | 	add	fp, #4
0fe2c     E7 9A 62 FC | 	wrlong	arg05, fp
0fe30                 | '   t1=pop()
0fe30                 | '   if t1.result_type=result_string2 then 
0fe30     48 CE 85 F1 | 	sub	fp, #72
0fe34     2B 9A 0E F2 | 	cmp	arg05, #43 wz
0fe38     18 00 90 5D |  if_ne	jmp	#LR__1360
0fe3c     40 CE 05 F1 | 	add	fp, #64
0fe40     E7 92 02 FB | 	rdlong	arg01, fp
0fe44     40 CE 85 F1 | 	sub	fp, #64
0fe48     94 D9 BF FD | 	call	#_convertstring
0fe4c     3D A9 02 F6 | 	mov	local02, result1
0fe50     38 00 90 FD | 	jmp	#LR__1362
0fe54                 | LR__1360
0fe54     48 CE 05 F1 | 	add	fp, #72
0fe58     E7 9A 02 FB | 	rdlong	arg05, fp
0fe5c     48 CE 85 F1 | 	sub	fp, #72
0fe60     1F 9A 0E F2 | 	cmp	arg05, #31 wz
0fe64     40 CE 05 A1 |  if_e	add	fp, #64
0fe68     E7 A8 02 AB |  if_e	rdlong	local02, fp
0fe6c     40 CE 85 A1 |  if_e	sub	fp, #64
0fe70     18 00 90 AD |  if_e	jmp	#LR__1361
0fe74     96 01 00 FF 
0fe78     F5 A9 06 F6 | 	mov	local02, ##@LR__5983
0fe7c     E7 92 02 F6 | 	mov	arg01, fp
0fe80     40 92 06 F1 | 	add	arg01, #64
0fe84     C4 D9 BF FD | 	call	#_converttoint
0fe88     3D AB 02 F6 | 	mov	local03, result1
0fe8c                 | LR__1361
0fe8c                 | LR__1362
0fe8c                 | '   if s1<>"" then 
0fe8c     96 01 00 FF 
0fe90     F6 95 06 F6 | 	mov	arg02, ##@LR__5984
0fe94     54 93 02 F6 | 	mov	arg01, local02
0fe98     64 4B B1 FD | 	call	#__system___string_cmp
0fe9c     00 7A 0E F2 | 	cmp	result1, #0 wz
0fea0     BC 01 90 AD |  if_e	jmp	#LR__1366
0fea4     C8 D7 BF FD | 	call	#_pop
0fea8     3F 9B 02 F6 | 	mov	arg05, result3
0feac     40 CE 05 F1 | 	add	fp, #64
0feb0     E7 7A 62 FC | 	wrlong	result1, fp
0feb4     04 CE 05 F1 | 	add	fp, #4
0feb8     E7 7C 62 FC | 	wrlong	result2, fp
0febc     04 CE 05 F1 | 	add	fp, #4
0fec0     E7 9A 62 FC | 	wrlong	arg05, fp
0fec4     08 CE 85 F1 | 	sub	fp, #8
0fec8     E7 92 02 F6 | 	mov	arg01, fp
0fecc     40 CE 85 F1 | 	sub	fp, #64
0fed0     78 D9 BF FD | 	call	#_converttoint
0fed4     3D AD 02 F6 | 	mov	local04, result1
0fed8                 | '     t1=pop()
0fed8                 | '     channel=converttoint(t1) 
0fed8                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0fed8     09 92 06 F6 | 	mov	arg01, #9
0fedc     D4 96 B1 FD | 	call	#__system__close
0fee0     09 AE 06 F6 | 	mov	local05, #9
0fee4     96 01 00 FF 
0fee8     F7 93 06 F6 | 	mov	arg01, ##@LR__5985
0feec     54 95 02 F6 | 	mov	arg02, local02
0fef0     40 4B B1 FD | 	call	#__system___string_concat
0fef4     3D 95 02 F6 | 	mov	arg02, result1
0fef8     57 93 02 F6 | 	mov	arg01, local05
0fefc     00 96 06 F6 | 	mov	arg03, #0
0ff00     84 56 B1 FD | 	call	#__system___basic_open_string
0ff04     20 6A 06 F1 | 	add	ptr___system__dat__, #32
0ff08     35 7B 02 FB | 	rdlong	result1, ptr___system__dat__
0ff0c     35 01 68 FC | 	wrlong	#0, ptr___system__dat__
0ff10     20 6A 86 F1 | 	sub	ptr___system__dat__, #32
0ff14     3D B1 0A F6 | 	mov	local06, result1 wz
0ff18                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0ff18     8C 00 90 AD |  if_e	jmp	#LR__1363
0ff1c     00 92 06 F6 | 	mov	arg01, #0
0ff20     38 A0 B1 FD | 	call	#__system___getiolock_0622
0ff24     3D 93 02 F6 | 	mov	arg01, result1
0ff28     AC 4A B1 FD | 	call	#__system___lockmem
0ff2c     97 01 00 FF 
0ff30     04 94 06 F6 | 	mov	arg02, ##@LR__5986
0ff34     00 92 06 F6 | 	mov	arg01, #0
0ff38     00 96 06 F6 | 	mov	arg03, #0
0ff3c     8C 57 B1 FD | 	call	#__system___basic_print_string
0ff40     00 92 06 F6 | 	mov	arg01, #0
0ff44     58 95 02 F6 | 	mov	arg02, local06
0ff48     00 96 06 F6 | 	mov	arg03, #0
0ff4c     0A 98 06 F6 | 	mov	arg04, #10
0ff50     BC 57 B1 FD | 	call	#__system___basic_print_integer
0ff54     97 01 00 FF 
0ff58     12 94 06 F6 | 	mov	arg02, ##@LR__5987
0ff5c     00 92 06 F6 | 	mov	arg01, #0
0ff60     00 96 06 F6 | 	mov	arg03, #0
0ff64     64 57 B1 FD | 	call	#__system___basic_print_string
0ff68     58 93 02 F6 | 	mov	arg01, local06
0ff6c     18 6C B1 FD | 	call	#__system___strerror
0ff70     3D 95 02 F6 | 	mov	arg02, result1
0ff74     00 92 06 F6 | 	mov	arg01, #0
0ff78     00 96 06 F6 | 	mov	arg03, #0
0ff7c     4C 57 B1 FD | 	call	#__system___basic_print_string
0ff80     00 92 06 F6 | 	mov	arg01, #0
0ff84     0A 94 06 F6 | 	mov	arg02, #10
0ff88     00 96 06 F6 | 	mov	arg03, #0
0ff8c     E4 56 B1 FD | 	call	#__system___basic_print_char
0ff90     00 92 06 F6 | 	mov	arg01, #0
0ff94     C4 9F B1 FD | 	call	#__system___getiolock_0622
0ff98     3D 01 68 FC | 	wrlong	#0, result1
0ff9c     09 92 06 F6 | 	mov	arg01, #9
0ffa0     10 96 B1 FD | 	call	#__system__close
0ffa4     B0 05 90 FD | 	jmp	#LR__1380
0ffa8                 | LR__1363
0ffa8                 | '     get #9,17,envbuf8(channel,0),256
0ffa8     56 97 02 F6 | 	mov	arg03, local04
0ffac     09 96 66 F0 | 	shl	arg03, #9
0ffb0     56 97 02 F1 | 	add	arg03, local04
0ffb4     32 9B 02 F6 | 	mov	arg05, objptr
0ffb8     0E 00 00 FF 
0ffbc     38 9A 06 F1 | 	add	arg05, ##7224
0ffc0     4D 97 02 F1 | 	add	arg03, arg05
0ffc4     09 92 06 F6 | 	mov	arg01, #9
0ffc8     11 94 06 F6 | 	mov	arg02, #17
0ffcc     00 99 06 F6 | 	mov	arg04, #256
0ffd0     01 9A 06 F6 | 	mov	arg05, #1
0ffd4     7C 58 B1 FD | 	call	#__system___basic_get
0ffd8                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0ffd8     FF B2 06 F6 | 	mov	local07, #255
0ffdc     0E 00 00 FF 
0ffe0     38 64 06 F1 | 	add	objptr, ##7224
0ffe4     D7 24 48 FB | 	callpa	#(@LR__1365-@LR__1364)>>2,fcache_load_ptr_
0ffe8                 | LR__1364
0ffe8     56 B1 02 F6 | 	mov	local06, local04
0ffec     09 B0 66 F0 | 	shl	local06, #9
0fff0     32 B1 02 F1 | 	add	local06, objptr
0fff4     59 AF 02 F6 | 	mov	local05, local07
0fff8     01 AE 66 F0 | 	shl	local05, #1
0fffc     58 AF 02 F1 | 	add	local05, local06
10000     56 AB 02 F6 | 	mov	local03, local04
10004     09 AA 66 F0 | 	shl	local03, #9
10008     56 AB 02 F1 | 	add	local03, local04
1000c     32 AB 02 F1 | 	add	local03, objptr
10010     59 B1 02 F6 | 	mov	local06, local07
10014     55 B1 02 F1 | 	add	local06, local03
10018     58 B1 C2 FA | 	rdbyte	local06, local06
1001c     08 B0 66 F0 | 	shl	local06, #8
10020     57 B1 52 FC | 	wrword	local06, local05
10024     01 B2 86 F1 | 	sub	local07, #1
10028     00 B2 56 F2 | 	cmps	local07, #0 wc
1002c     B8 FF 9F 3D |  if_ae	jmp	#LR__1364
10030                 | LR__1365
10030     0E 00 00 FF 
10034     38 64 86 F1 | 	sub	objptr, ##7224
10038                 | '     close #9
10038     09 92 06 F6 | 	mov	arg01, #9
1003c     74 95 B1 FD | 	call	#__system__close
10040     09 AC 66 F0 | 	shl	local04, #9
10044     32 B3 02 F6 | 	mov	local07, objptr
10048     0E 00 00 FF 
1004c     38 B2 06 F1 | 	add	local07, ##7224
10050     59 AD 02 F1 | 	add	local04, local07
10054     FE AD 06 F1 | 	add	local04, #510
10058     56 01 58 FC | 	wrword	#0, local04
1005c                 | '     envbuf(channel,255)=0                                                              
1005c                 | '     return
1005c     F8 04 90 FD | 	jmp	#LR__1380
10060                 | LR__1366
10060                 | '     if wptr < $80000 then 
10060     00 04 00 FF 
10064     00 AA 56 F2 | 	cmps	local03, ##524288 wc
10068     54 00 90 3D |  if_ae	jmp	#LR__1369
1006c                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
1006c     00 B2 06 F6 | 	mov	local07, #0
10070     D7 24 48 FB | 	callpa	#(@LR__1368-@LR__1367)>>2,fcache_load_ptr_
10074                 | LR__1367
10074     56 B1 02 F6 | 	mov	local06, local04
10078     09 B0 66 F0 | 	shl	local06, #9
1007c     32 AF 02 F6 | 	mov	local05, objptr
10080     0E 00 00 FF 
10084     38 AE 06 F1 | 	add	local05, ##7224
10088     57 B1 02 F1 | 	add	local06, local05
1008c     59 AF 02 F6 | 	mov	local05, local07
10090     01 AE 66 F0 | 	shl	local05, #1
10094     58 AF 02 F1 | 	add	local05, local06
10098     55 93 02 F6 | 	mov	arg01, local03
1009c     59 B1 02 F6 | 	mov	local06, local07
100a0     01 B0 66 F0 | 	shl	local06, #1
100a4     58 93 02 F1 | 	add	arg01, local06
100a8     49 7B E2 FA | 	rdword	result1, arg01
100ac     57 7B 52 FC | 	wrword	result1, local05
100b0     01 B2 06 F1 | 	add	local07, #1
100b4     00 B3 56 F2 | 	cmps	local07, #256 wc
100b8     B8 FF 9F CD |  if_b	jmp	#LR__1367
100bc                 | LR__1368
100bc     4C 00 90 FD | 	jmp	#LR__1371
100c0                 | LR__1369
100c0                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
100c0     00 B2 06 F6 | 	mov	local07, #0
100c4                 | LR__1370
100c4     56 B1 02 F6 | 	mov	local06, local04
100c8     09 B0 66 F0 | 	shl	local06, #9
100cc     32 AF 02 F6 | 	mov	local05, objptr
100d0     0E 00 00 FF 
100d4     38 AE 06 F1 | 	add	local05, ##7224
100d8     57 B1 02 F1 | 	add	local06, local05
100dc     59 AF 02 F6 | 	mov	local05, local07
100e0     01 AE 66 F0 | 	shl	local05, #1
100e4     58 AF 02 F1 | 	add	local05, local06
100e8     55 93 02 F6 | 	mov	arg01, local03
100ec     59 B1 02 F6 | 	mov	local06, local07
100f0     01 B0 66 F0 | 	shl	local06, #1
100f4     58 93 02 F1 | 	add	arg01, local06
100f8     DC 0E B1 FD | 	call	#_psdpeek
100fc     57 7B 52 FC | 	wrword	result1, local05
10100     01 B2 06 F1 | 	add	local07, #1
10104     00 B3 56 F2 | 	cmps	local07, #256 wc
10108     B8 FF 9F CD |  if_b	jmp	#LR__1370
1010c                 | LR__1371
1010c     09 AC 66 F0 | 	shl	local04, #9
10110     32 B3 02 F6 | 	mov	local07, objptr
10114     0E 00 00 FF 
10118     38 B2 06 F1 | 	add	local07, ##7224
1011c     59 AD 02 F1 | 	add	local04, local07
10120     FE AD 06 F1 | 	add	local04, #510
10124     56 01 58 FC | 	wrword	#0, local04
10128                 | '     envbuf(channel,255)=0
10128                 | '     return   
10128     2C 04 90 FD | 	jmp	#LR__1380
1012c                 | LR__1372
1012c                 | ' 
1012c                 | ' if numpar=5 then   						 'simple adsr
1012c     05 A6 0E F2 | 	cmp	local01, #5 wz
10130     08 04 90 5D |  if_ne	jmp	#LR__1379
10134     38 D5 BF FD | 	call	#_pop
10138     3F B3 02 F6 | 	mov	local07, result3
1013c     40 CE 05 F1 | 	add	fp, #64
10140     E7 7A 62 FC | 	wrlong	result1, fp
10144     04 CE 05 F1 | 	add	fp, #4
10148     E7 7C 62 FC | 	wrlong	result2, fp
1014c     04 CE 05 F1 | 	add	fp, #4
10150     E7 B2 62 FC | 	wrlong	local07, fp
10154     08 CE 85 F1 | 	sub	fp, #8
10158     E7 92 02 F6 | 	mov	arg01, fp
1015c     40 CE 85 F1 | 	sub	fp, #64
10160     A4 D7 BF FD | 	call	#_converttofloat
10164     3D B3 02 F6 | 	mov	local07, result1
10168     04 D5 BF FD | 	call	#_pop
1016c     3F B1 02 F6 | 	mov	local06, result3
10170     40 CE 05 F1 | 	add	fp, #64
10174     E7 7A 62 FC | 	wrlong	result1, fp
10178     04 CE 05 F1 | 	add	fp, #4
1017c     E7 7C 62 FC | 	wrlong	result2, fp
10180     04 CE 05 F1 | 	add	fp, #4
10184     E7 B0 62 FC | 	wrlong	local06, fp
10188     08 CE 85 F1 | 	sub	fp, #8
1018c     E7 92 02 F6 | 	mov	arg01, fp
10190     40 CE 85 F1 | 	sub	fp, #64
10194     70 D7 BF FD | 	call	#_converttofloat
10198     3D B5 02 F6 | 	mov	local08, result1
1019c     D0 D4 BF FD | 	call	#_pop
101a0     3F B1 02 F6 | 	mov	local06, result3
101a4     40 CE 05 F1 | 	add	fp, #64
101a8     E7 7A 62 FC | 	wrlong	result1, fp
101ac     04 CE 05 F1 | 	add	fp, #4
101b0     E7 7C 62 FC | 	wrlong	result2, fp
101b4     04 CE 05 F1 | 	add	fp, #4
101b8     E7 B0 62 FC | 	wrlong	local06, fp
101bc     08 CE 85 F1 | 	sub	fp, #8
101c0     E7 92 02 F6 | 	mov	arg01, fp
101c4     40 CE 85 F1 | 	sub	fp, #64
101c8     3C D7 BF FD | 	call	#_converttofloat
101cc     3D B1 02 F6 | 	mov	local06, result1
101d0     9C D4 BF FD | 	call	#_pop
101d4     3F AF 02 F6 | 	mov	local05, result3
101d8     40 CE 05 F1 | 	add	fp, #64
101dc     E7 7A 62 FC | 	wrlong	result1, fp
101e0     04 CE 05 F1 | 	add	fp, #4
101e4     E7 7C 62 FC | 	wrlong	result2, fp
101e8     04 CE 05 F1 | 	add	fp, #4
101ec     E7 AE 62 FC | 	wrlong	local05, fp
101f0     08 CE 85 F1 | 	sub	fp, #8
101f4     E7 92 02 F6 | 	mov	arg01, fp
101f8     40 CE 85 F1 | 	sub	fp, #64
101fc     08 D7 BF FD | 	call	#_converttofloat
10200     3D AF 02 F6 | 	mov	local05, result1
10204     68 D4 BF FD | 	call	#_pop
10208     3F AD 02 F6 | 	mov	local04, result3
1020c     40 CE 05 F1 | 	add	fp, #64
10210     E7 7A 62 FC | 	wrlong	result1, fp
10214     04 CE 05 F1 | 	add	fp, #4
10218     E7 7C 62 FC | 	wrlong	result2, fp
1021c     04 CE 05 F1 | 	add	fp, #4
10220     E7 AC 62 FC | 	wrlong	local04, fp
10224     08 CE 85 F1 | 	sub	fp, #8
10228     E7 92 02 F6 | 	mov	arg01, fp
1022c     40 CE 85 F1 | 	sub	fp, #64
10230     18 D6 BF FD | 	call	#_converttoint
10234     3D AD 02 F6 | 	mov	local04, result1
10238                 | '   t1=pop() : rr=converttofloat(t1)
10238                 | '   t1=pop() : ss=converttofloat(t1) 
10238                 | '   t1=pop() : dd=converttofloat(t1)
10238                 | '   t1=pop() : aa=converttofloat(t1)
10238                 | '   t1=pop() : channel=converttoint(t1)
10238                 | '   if ss<0.0 then ss=0.0 
10238     5A 93 02 F6 | 	mov	arg01, local08
1023c     00 94 06 F6 | 	mov	arg02, #0
10240     01 96 06 F6 | 	mov	arg03, #1
10244     94 72 B1 FD | 	call	#__system___float_cmp
10248     00 7A 56 F2 | 	cmps	result1, #0 wc
1024c     00 B4 06 C6 |  if_b	mov	local08, #0
10250                 | '   if ss>1.0 then ss=1.0
10250     5A 93 02 F6 | 	mov	arg01, local08
10254     00 C0 1F FF 
10258     00 94 06 F6 | 	mov	arg02, ##1065353216
1025c     01 96 66 F6 | 	neg	arg03, #1
10260     78 72 B1 FD | 	call	#__system___float_cmp
10264     01 7A 56 F2 | 	cmps	result1, #1 wc
10268     00 C0 1F 3F 
1026c     00 B4 06 36 |  if_ae	mov	local08, ##1065353216
10270     57 93 02 F6 | 	mov	arg01, local05
10274     58 95 02 F6 | 	mov	arg02, local06
10278     5C 6A B1 FD | 	call	#__system___float_add
1027c     3D 93 02 F6 | 	mov	arg01, result1
10280     59 95 02 F6 | 	mov	arg02, local07
10284     50 6A B1 FD | 	call	#__system___float_add
10288     3D 95 02 F6 | 	mov	arg02, result1
1028c     00 C0 21 FF 
10290     00 92 06 F6 | 	mov	arg01, ##1132462080
10294     14 70 B1 FD | 	call	#__system___float_div
10298     3D B7 02 F6 | 	mov	local09, result1
1029c     57 93 02 F6 | 	mov	arg01, local05
102a0     5B 95 02 F6 | 	mov	arg02, local09
102a4     00 6E B1 FD | 	call	#__system___float_mul
102a8     3D 93 02 F6 | 	mov	arg01, result1
102ac     01 94 06 F6 | 	mov	arg02, #1
102b0     BC 72 B1 FD | 	call	#__system___float_tointeger
102b4     3D B9 02 F6 | 	mov	local10, result1
102b8     58 93 02 F6 | 	mov	arg01, local06
102bc     5B 95 02 F6 | 	mov	arg02, local09
102c0     E4 6D B1 FD | 	call	#__system___float_mul
102c4     3D 93 02 F6 | 	mov	arg01, result1
102c8     01 94 06 F6 | 	mov	arg02, #1
102cc     A0 72 B1 FD | 	call	#__system___float_tointeger
102d0     3D BB 02 F6 | 	mov	local11, result1
102d4     59 93 02 F6 | 	mov	arg01, local07
102d8     5B 95 02 F6 | 	mov	arg02, local09
102dc     C8 6D B1 FD | 	call	#__system___float_mul
102e0     3D 93 02 F6 | 	mov	arg01, result1
102e4     01 94 06 F6 | 	mov	arg02, #1
102e8     84 72 B1 FD | 	call	#__system___float_tointeger
102ec     3D B1 02 F6 | 	mov	local06, result1
102f0     F8 BF 23 FF 
102f4     00 AE 06 F6 | 	mov	local05, ##1199566848
102f8     5C 93 52 F6 | 	abs	arg01, local10 wc
102fc     1F BC C6 C9 |  if_b	decod	local12, #31
10300     00 BC 06 36 |  if_ae	mov	local12, #0
10304     9C 69 B1 FD | 	call	#__system___float_fromuns
10308     5E 7B 62 F5 | 	xor	result1, local12
1030c     3D 95 02 F6 | 	mov	arg02, result1
10310     57 93 02 F6 | 	mov	arg01, local05
10314     94 6F B1 FD | 	call	#__system___float_div
10318     3D BF 02 F6 | 	mov	local13, result1
1031c     F8 BF 23 FF 
10320     00 AE 06 F6 | 	mov	local05, ##1199566848
10324     F8 BF 23 FF 
10328     00 92 06 F6 | 	mov	arg01, ##1199566848
1032c     5A 95 02 F6 | 	mov	arg02, local08
10330     74 6D B1 FD | 	call	#__system___float_mul
10334     3D 95 02 F6 | 	mov	arg02, result1
10338     57 93 02 F6 | 	mov	arg01, local05
1033c     1F 94 E6 F4 | 	bitnot	arg02, #31
10340     94 69 B1 FD | 	call	#__system___float_add
10344     3D AF 02 F6 | 	mov	local05, result1
10348     5D 93 52 F6 | 	abs	arg01, local11 wc
1034c     1F BC C6 C9 |  if_b	decod	local12, #31
10350     00 BC 06 36 |  if_ae	mov	local12, #0
10354     4C 69 B1 FD | 	call	#__system___float_fromuns
10358     5E 7B 62 F5 | 	xor	result1, local12
1035c     3D 95 02 F6 | 	mov	arg02, result1
10360     57 93 02 F6 | 	mov	arg01, local05
10364     44 6F B1 FD | 	call	#__system___float_div
10368     3D C1 02 F6 | 	mov	local14, result1
1036c     F8 BF 23 FF 
10370     00 92 06 F6 | 	mov	arg01, ##1199566848
10374     5A 95 02 F6 | 	mov	arg02, local08
10378     2C 6D B1 FD | 	call	#__system___float_mul
1037c     3D AF 02 F6 | 	mov	local05, result1
10380     58 93 52 F6 | 	abs	arg01, local06 wc
10384     1F BC C6 C9 |  if_b	decod	local12, #31
10388     00 BC 06 36 |  if_ae	mov	local12, #0
1038c     14 69 B1 FD | 	call	#__system___float_fromuns
10390     5E 7B 62 F5 | 	xor	result1, local12
10394     3D 95 02 F6 | 	mov	arg02, result1
10398     57 93 02 F6 | 	mov	arg01, local05
1039c     0C 6F B1 FD | 	call	#__system___float_div
103a0     3D C3 02 F6 | 	mov	local15, result1
103a4     56 B3 02 F6 | 	mov	local07, local04
103a8     01 B2 66 F0 | 	shl	local07, #1
103ac     32 C5 02 F6 | 	mov	local16, objptr
103b0     54 00 00 FF 
103b4     90 C4 06 F1 | 	add	local16, ##43152
103b8     62 B3 02 F1 | 	add	local07, local16
103bc     5C C7 02 F6 | 	mov	local17, local10
103c0     5D C7 02 F1 | 	add	local17, local11
103c4     59 C7 52 FC | 	wrword	local17, local07
103c8     00 C8 06 F6 | 	mov	local18, #0
103cc                 | '   fulltime=aa+dd+rr
103cc                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit)  
103cc                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r  
103cc                 | '   suspoints(channel)=a+d
103cc                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
103cc     00 B2 06 F6 | 	mov	local07, #0
103d0     5C CB 02 F6 | 	mov	local19, local10
103d4                 | LR__1373
103d4     65 B3 52 F2 | 	cmps	local07, local19 wc
103d8     4C 00 90 3D |  if_ae	jmp	#LR__1374
103dc     56 C7 02 F6 | 	mov	local17, local04
103e0     09 C6 66 F0 | 	shl	local17, #9
103e4     32 C5 02 F6 | 	mov	local16, objptr
103e8     0E 00 00 FF 
103ec     38 C4 06 F1 | 	add	local16, ##7224
103f0     62 C7 02 F1 | 	add	local17, local16
103f4     59 C5 02 F6 | 	mov	local16, local07
103f8     01 C4 66 F0 | 	shl	local16, #1
103fc     63 C5 02 F1 | 	add	local16, local17
10400     64 93 02 F6 | 	mov	arg01, local18
10404     01 94 06 F6 | 	mov	arg02, #1
10408     64 71 B1 FD | 	call	#__system___float_tointeger
1040c     62 7B 52 FC | 	wrword	result1, local16
10410     5F 95 02 F6 | 	mov	arg02, local13
10414     64 93 02 F6 | 	mov	arg01, local18
10418     BC 68 B1 FD | 	call	#__system___float_add
1041c     3D C9 02 F6 | 	mov	local18, result1
10420     01 B2 06 F1 | 	add	local07, #1
10424     AC FF 9F FD | 	jmp	#LR__1373
10428                 | LR__1374
10428                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
10428     5C B3 02 F6 | 	mov	local07, local10
1042c     5C CD 02 F6 | 	mov	local20, local10
10430     5D CD 02 F1 | 	add	local20, local11
10434                 | LR__1375
10434     66 B3 52 F2 | 	cmps	local07, local20 wc
10438     68 00 90 3D |  if_ae	jmp	#LR__1376
1043c     56 CB 02 F6 | 	mov	local19, local04
10440     09 CA 66 F0 | 	shl	local19, #9
10444     32 C5 02 F6 | 	mov	local16, objptr
10448     0E 00 00 FF 
1044c     38 C4 06 F1 | 	add	local16, ##7224
10450     62 CB 02 F1 | 	add	local19, local16
10454     59 C7 02 F6 | 	mov	local17, local07
10458     01 C6 66 F0 | 	shl	local17, #1
1045c     65 C7 02 F1 | 	add	local17, local19
10460     64 93 02 F6 | 	mov	arg01, local18
10464     01 94 06 F6 | 	mov	arg02, #1
10468     04 71 B1 FD | 	call	#__system___float_tointeger
1046c     63 7B 52 FC | 	wrword	result1, local17
10470     64 93 02 F6 | 	mov	arg01, local18
10474     60 95 02 F6 | 	mov	arg02, local14
10478     1F 94 E6 F4 | 	bitnot	arg02, #31
1047c     58 68 B1 FD | 	call	#__system___float_add
10480     3D C9 02 F6 | 	mov	local18, result1
10484     64 93 02 F6 | 	mov	arg01, local18
10488     00 94 06 F6 | 	mov	arg02, #0
1048c     01 96 06 F6 | 	mov	arg03, #1
10490     48 70 B1 FD | 	call	#__system___float_cmp
10494     00 7A 56 F2 | 	cmps	result1, #0 wc
10498     00 C8 06 C6 |  if_b	mov	local18, #0
1049c     01 B2 06 F1 | 	add	local07, #1
104a0     90 FF 9F FD | 	jmp	#LR__1375
104a4                 | LR__1376
104a4                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
104a4     5C B3 02 F6 | 	mov	local07, local10
104a8     5D B3 02 F1 | 	add	local07, local11
104ac                 | LR__1377
104ac     00 B3 56 F2 | 	cmps	local07, #256 wc
104b0     68 00 90 3D |  if_ae	jmp	#LR__1378
104b4     56 CD 02 F6 | 	mov	local20, local04
104b8     09 CC 66 F0 | 	shl	local20, #9
104bc     32 C7 02 F6 | 	mov	local17, objptr
104c0     0E 00 00 FF 
104c4     38 C6 06 F1 | 	add	local17, ##7224
104c8     63 CD 02 F1 | 	add	local20, local17
104cc     59 CB 02 F6 | 	mov	local19, local07
104d0     01 CA 66 F0 | 	shl	local19, #1
104d4     66 CB 02 F1 | 	add	local19, local20
104d8     64 93 02 F6 | 	mov	arg01, local18
104dc     01 94 06 F6 | 	mov	arg02, #1
104e0     8C 70 B1 FD | 	call	#__system___float_tointeger
104e4     65 7B 52 FC | 	wrword	result1, local19
104e8     64 93 02 F6 | 	mov	arg01, local18
104ec     61 95 02 F6 | 	mov	arg02, local15
104f0     1F 94 E6 F4 | 	bitnot	arg02, #31
104f4     E0 67 B1 FD | 	call	#__system___float_add
104f8     3D C9 02 F6 | 	mov	local18, result1
104fc     64 93 02 F6 | 	mov	arg01, local18
10500     00 94 06 F6 | 	mov	arg02, #0
10504     01 96 06 F6 | 	mov	arg03, #1
10508     D0 6F B1 FD | 	call	#__system___float_cmp
1050c     00 7A 56 F2 | 	cmps	result1, #0 wc
10510     00 C8 06 C6 |  if_b	mov	local18, #0
10514     01 B2 06 F1 | 	add	local07, #1
10518     90 FF 9F FD | 	jmp	#LR__1377
1051c                 | LR__1378
1051c     56 CD 02 F6 | 	mov	local20, local04
10520     09 CC 66 F0 | 	shl	local20, #9
10524     32 C5 02 F6 | 	mov	local16, objptr
10528     0E 00 00 FF 
1052c     38 C4 06 F1 | 	add	local16, ##7224
10530     62 CD 02 F1 | 	add	local20, local16
10534     FE CD 06 F1 | 	add	local20, #510
10538     66 01 58 FC | 	wrword	#0, local20
1053c                 | LR__1379
1053c     09 AC 66 F0 | 	shl	local04, #9
10540     32 C5 02 F6 | 	mov	local16, objptr
10544     0E 00 00 FF 
10548     38 C4 06 F1 | 	add	local16, ##7224
1054c     62 AD 02 F1 | 	add	local04, local16
10550     FE AD 06 F1 | 	add	local04, #510
10554     56 01 58 FC | 	wrword	#0, local04
10558                 | LR__1380
10558     E7 F0 03 F6 | 	mov	ptra, fp
1055c     F2 00 A0 FD | 	call	#popregs_
10560                 | _do_defenv_ret
10560     2D 00 64 FD | 	ret
10564                 | 
10564                 | ' 
10564                 | ' '-------------------- defsnd
10564                 | ' 
10564                 | ' sub do_defsnd
10564                 | _do_defsnd
10564     0D CA 05 F6 | 	mov	COUNT_, #13
10568     E8 00 A0 FD | 	call	#pushregs_
1056c     80 F0 07 F1 | 	add	ptra, #128
10570     4C 00 00 FF 
10574     24 64 06 F1 | 	add	objptr, ##38948
10578     32 9B 02 FB | 	rdlong	arg05, objptr
1057c     4D 99 02 F6 | 	mov	arg04, arg05
10580     01 98 66 F0 | 	shl	arg04, #1
10584     4D 99 02 F1 | 	add	arg04, arg05
10588     02 98 66 F0 | 	shl	arg04, #2
1058c     03 00 00 FF 
10590     04 64 86 F1 | 	sub	objptr, ##1540
10594     32 99 02 F1 | 	add	arg04, objptr
10598     4C A7 02 FB | 	rdlong	local01, arg04
1059c                 | ' 
1059c                 | ' numpar=compiledline(lineptr_e).result.uresult
1059c                 | ' 
1059c                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
1059c                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
1059c                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
1059c                 | ' ' defsnd channel, oneint - loads the wave from the pointer
1059c                 | ' 
1059c                 | ' if numpar<2 then return
1059c     02 A6 56 F2 | 	cmps	local01, #2 wc
105a0     49 00 00 FF 
105a4     20 64 86 F1 | 	sub	objptr, ##37408
105a8     88 06 90 CD |  if_b	jmp	#LR__1411
105ac                 | '  
105ac                 | ' if numpar=2 then
105ac     02 A6 0E F2 | 	cmp	local01, #2 wz
105b0     E4 02 90 5D |  if_ne	jmp	#LR__1399
105b4     B8 D0 BF FD | 	call	#_pop
105b8     3F 9B 02 F6 | 	mov	arg05, result3
105bc     2C CE 05 F1 | 	add	fp, #44
105c0     E7 7A 62 FC | 	wrlong	result1, fp
105c4     04 CE 05 F1 | 	add	fp, #4
105c8     E7 7C 62 FC | 	wrlong	result2, fp
105cc     04 CE 05 F1 | 	add	fp, #4
105d0     E7 9A 62 FC | 	wrlong	arg05, fp
105d4                 | '   t1=pop()
105d4                 | '   if t1.result_type=result_string2 then 
105d4     34 CE 85 F1 | 	sub	fp, #52
105d8     2B 9A 0E F2 | 	cmp	arg05, #43 wz
105dc     18 00 90 5D |  if_ne	jmp	#LR__1390
105e0     2C CE 05 F1 | 	add	fp, #44
105e4     E7 92 02 FB | 	rdlong	arg01, fp
105e8     2C CE 85 F1 | 	sub	fp, #44
105ec     F0 D1 BF FD | 	call	#_convertstring
105f0     3D A9 02 F6 | 	mov	local02, result1
105f4     38 00 90 FD | 	jmp	#LR__1392
105f8                 | LR__1390
105f8     34 CE 05 F1 | 	add	fp, #52
105fc     E7 9A 02 FB | 	rdlong	arg05, fp
10600     34 CE 85 F1 | 	sub	fp, #52
10604     1F 9A 0E F2 | 	cmp	arg05, #31 wz
10608     2C CE 05 A1 |  if_e	add	fp, #44
1060c     E7 A8 02 AB |  if_e	rdlong	local02, fp
10610     2C CE 85 A1 |  if_e	sub	fp, #44
10614     18 00 90 AD |  if_e	jmp	#LR__1391
10618     97 01 00 FF 
1061c     15 A8 06 F6 | 	mov	local02, ##@LR__5988
10620     E7 92 02 F6 | 	mov	arg01, fp
10624     2C 92 06 F1 | 	add	arg01, #44
10628     20 D2 BF FD | 	call	#_converttoint
1062c     3D AB 02 F6 | 	mov	local03, result1
10630                 | LR__1391
10630                 | LR__1392
10630                 | '   if s<>"" then 
10630     97 01 00 FF 
10634     16 94 06 F6 | 	mov	arg02, ##@LR__5989
10638     54 93 02 F6 | 	mov	arg01, local02
1063c     C0 43 B1 FD | 	call	#__system___string_cmp
10640     00 7A 0E F2 | 	cmp	result1, #0 wz
10644     B0 01 90 AD |  if_e	jmp	#LR__1395
10648     24 D0 BF FD | 	call	#_pop
1064c     3F 9B 02 F6 | 	mov	arg05, result3
10650     2C CE 05 F1 | 	add	fp, #44
10654     E7 7A 62 FC | 	wrlong	result1, fp
10658     04 CE 05 F1 | 	add	fp, #4
1065c     E7 7C 62 FC | 	wrlong	result2, fp
10660     04 CE 05 F1 | 	add	fp, #4
10664     E7 9A 62 FC | 	wrlong	arg05, fp
10668     08 CE 85 F1 | 	sub	fp, #8
1066c     E7 92 02 F6 | 	mov	arg01, fp
10670     2C CE 85 F1 | 	sub	fp, #44
10674     D4 D1 BF FD | 	call	#_converttoint
10678     3D AD 02 F6 | 	mov	local04, result1
1067c                 | '     t1=pop()
1067c                 | '     channel=converttoint(t1) : if channel>31 then return
1067c     20 AC 56 F2 | 	cmps	local04, #32 wc
10680     B0 05 90 3D |  if_ae	jmp	#LR__1411
10684                 | '     close #9 : open "/sd/media/s/"+s for input as #9
10684     09 92 06 F6 | 	mov	arg01, #9
10688     28 8F B1 FD | 	call	#__system__close
1068c     09 AA 06 F6 | 	mov	local03, #9
10690     97 01 00 FF 
10694     17 92 06 F6 | 	mov	arg01, ##@LR__5990
10698     54 95 02 F6 | 	mov	arg02, local02
1069c     94 43 B1 FD | 	call	#__system___string_concat
106a0     3D 95 02 F6 | 	mov	arg02, result1
106a4     55 93 02 F6 | 	mov	arg01, local03
106a8     00 96 06 F6 | 	mov	arg03, #0
106ac     D8 4E B1 FD | 	call	#__system___basic_open_string
106b0     20 6A 06 F1 | 	add	ptr___system__dat__, #32
106b4     35 7B 0A FB | 	rdlong	result1, ptr___system__dat__ wz
106b8     35 01 68 FC | 	wrlong	#0, ptr___system__dat__
106bc     20 6A 86 F1 | 	sub	ptr___system__dat__, #32
106c0     54 00 00 FF 
106c4     EC 64 06 F1 | 	add	objptr, ##43244
106c8     32 7B 62 FC | 	wrlong	result1, objptr
106cc                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
106cc     54 00 00 FF 
106d0     EC 64 86 F1 | 	sub	objptr, ##43244
106d4     B0 00 90 AD |  if_e	jmp	#LR__1393
106d8     00 92 06 F6 | 	mov	arg01, #0
106dc     7C 98 B1 FD | 	call	#__system___getiolock_0622
106e0     3D 93 02 F6 | 	mov	arg01, result1
106e4     F0 42 B1 FD | 	call	#__system___lockmem
106e8     97 01 00 FF 
106ec     24 94 06 F6 | 	mov	arg02, ##@LR__5991
106f0     00 92 06 F6 | 	mov	arg01, #0
106f4     00 96 06 F6 | 	mov	arg03, #0
106f8     D0 4F B1 FD | 	call	#__system___basic_print_string
106fc     54 00 00 FF 
10700     EC 64 06 F1 | 	add	objptr, ##43244
10704     32 95 02 FB | 	rdlong	arg02, objptr
10708     54 00 00 FF 
1070c     EC 64 86 F1 | 	sub	objptr, ##43244
10710     00 92 06 F6 | 	mov	arg01, #0
10714     00 96 06 F6 | 	mov	arg03, #0
10718     0A 98 06 F6 | 	mov	arg04, #10
1071c     F0 4F B1 FD | 	call	#__system___basic_print_integer
10720     97 01 00 FF 
10724     32 94 06 F6 | 	mov	arg02, ##@LR__5992
10728     00 92 06 F6 | 	mov	arg01, #0
1072c     00 96 06 F6 | 	mov	arg03, #0
10730     98 4F B1 FD | 	call	#__system___basic_print_string
10734     00 AC 06 F6 | 	mov	local04, #0
10738     54 00 00 FF 
1073c     EC 64 06 F1 | 	add	objptr, ##43244
10740     32 93 02 FB | 	rdlong	arg01, objptr
10744     54 00 00 FF 
10748     EC 64 86 F1 | 	sub	objptr, ##43244
1074c     38 64 B1 FD | 	call	#__system___strerror
10750     3D 95 02 F6 | 	mov	arg02, result1
10754     56 93 02 F6 | 	mov	arg01, local04
10758     00 96 06 F6 | 	mov	arg03, #0
1075c     6C 4F B1 FD | 	call	#__system___basic_print_string
10760     00 92 06 F6 | 	mov	arg01, #0
10764     0A 94 06 F6 | 	mov	arg02, #10
10768     00 96 06 F6 | 	mov	arg03, #0
1076c     04 4F B1 FD | 	call	#__system___basic_print_char
10770     00 92 06 F6 | 	mov	arg01, #0
10774     E4 97 B1 FD | 	call	#__system___getiolock_0622
10778     3D 01 68 FC | 	wrlong	#0, result1
1077c     09 92 06 F6 | 	mov	arg01, #9
10780     30 8E B1 FD | 	call	#__system__close
10784     AC 04 90 FD | 	jmp	#LR__1411
10788                 | LR__1393
10788                 | '     for i=0 to 1024 : get #9,17+2*i,sample,1 : psdpoke 2048*channel+2*i, sample : next i
10788     00 AE 06 F6 | 	mov	local05, #0
1078c                 | LR__1394
1078c     57 AB 02 F6 | 	mov	local03, local05
10790     01 AA 66 F0 | 	shl	local03, #1
10794     11 94 06 F6 | 	mov	arg02, #17
10798     55 95 02 F1 | 	add	arg02, local03
1079c     E7 96 02 F6 | 	mov	arg03, fp
107a0     7C 96 06 F1 | 	add	arg03, #124
107a4     09 92 06 F6 | 	mov	arg01, #9
107a8     01 98 06 F6 | 	mov	arg04, #1
107ac     02 9A 06 F6 | 	mov	arg05, #2
107b0     A0 50 B1 FD | 	call	#__system___basic_get
107b4     56 93 02 F6 | 	mov	arg01, local04
107b8     0B 92 66 F0 | 	shl	arg01, #11
107bc     57 AB 02 F6 | 	mov	local03, local05
107c0     01 AA 66 F0 | 	shl	local03, #1
107c4     55 93 02 F1 | 	add	arg01, local03
107c8     7C CE 05 F1 | 	add	fp, #124
107cc     E7 94 E2 FA | 	rdword	arg02, fp
107d0     7C CE 85 F1 | 	sub	fp, #124
107d4     0F 94 66 F7 | 	signx	arg02, #15
107d8     DC 06 B1 FD | 	call	#_psdpoke
107dc     01 AE 06 F1 | 	add	local05, #1
107e0     02 00 00 FF 
107e4     01 AE 56 F2 | 	cmps	local05, ##1025 wc
107e8     A0 FF 9F CD |  if_b	jmp	#LR__1394
107ec                 | '     close #9
107ec     09 92 06 F6 | 	mov	arg01, #9
107f0     C0 8D B1 FD | 	call	#__system__close
107f4                 | '     return
107f4     3C 04 90 FD | 	jmp	#LR__1411
107f8                 | LR__1395
107f8                 | '     if wptr < ($80000 - 2048) then 
107f8     FC 03 00 FF 
107fc     00 AA 56 F2 | 	cmps	local03, ##522240 wc
10800     48 00 90 3D |  if_ae	jmp	#LR__1397
10804                 | '       for i=0 to 1023: psdpoke 2048*channel+2*i,dpeek(wptr+2*i): next i
10804     00 AE 06 F6 | 	mov	local05, #0
10808                 | LR__1396
10808     56 A7 02 F6 | 	mov	local01, local04
1080c     0B A6 66 F0 | 	shl	local01, #11
10810     57 A9 02 F6 | 	mov	local02, local05
10814     01 A8 66 F0 | 	shl	local02, #1
10818     54 A7 02 F1 | 	add	local01, local02
1081c     55 93 02 F6 | 	mov	arg01, local03
10820     57 A9 02 F6 | 	mov	local02, local05
10824     01 A8 66 F0 | 	shl	local02, #1
10828     54 93 02 F1 | 	add	arg01, local02
1082c     49 95 E2 FA | 	rdword	arg02, arg01
10830     53 93 02 F6 | 	mov	arg01, local01
10834     80 06 B1 FD | 	call	#_psdpoke
10838     01 AE 06 F1 | 	add	local05, #1
1083c     02 00 00 FF 
10840     00 AE 56 F2 | 	cmps	local05, ##1024 wc
10844     C0 FF 9F CD |  if_b	jmp	#LR__1396
10848     E8 03 90 FD | 	jmp	#LR__1411
1084c                 | LR__1397
1084c                 | '       for i=0 to 1023 : psdpoke 2048*channel+2*i,psdpeek(wptr+2*i) : next i
1084c     00 AE 06 F6 | 	mov	local05, #0
10850                 | LR__1398
10850     56 A7 02 F6 | 	mov	local01, local04
10854     0B A6 66 F0 | 	shl	local01, #11
10858     57 A9 02 F6 | 	mov	local02, local05
1085c     01 A8 66 F0 | 	shl	local02, #1
10860     54 A7 02 F1 | 	add	local01, local02
10864     55 93 02 F6 | 	mov	arg01, local03
10868     57 A9 02 F6 | 	mov	local02, local05
1086c     01 A8 66 F0 | 	shl	local02, #1
10870     54 93 02 F1 | 	add	arg01, local02
10874     60 07 B1 FD | 	call	#_psdpeek
10878     3D 95 02 F6 | 	mov	arg02, result1
1087c     53 93 02 F6 | 	mov	arg01, local01
10880     34 06 B1 FD | 	call	#_psdpoke
10884     01 AE 06 F1 | 	add	local05, #1
10888     02 00 00 FF 
1088c     00 AE 56 F2 | 	cmps	local05, ##1024 wc
10890     BC FF 9F CD |  if_b	jmp	#LR__1398
10894                 | '     return 
10894     9C 03 90 FD | 	jmp	#LR__1411
10898                 | '   return
10898                 | LR__1399
10898                 | ' for i=0 to 15 : harm(i)=0: next i  
10898     00 AE 06 F6 | 	mov	local05, #0
1089c     3C CE 05 F1 | 	add	fp, #60
108a0     D7 0E 48 FB | 	callpa	#(@LR__1401-@LR__1400)>>2,fcache_load_ptr_
108a4                 | LR__1400
108a4     57 B1 02 F6 | 	mov	local06, local05
108a8     02 B0 66 F0 | 	shl	local06, #2
108ac     E7 B0 02 F1 | 	add	local06, fp
108b0     58 01 68 FC | 	wrlong	#0, local06
108b4     01 AE 06 F1 | 	add	local05, #1
108b8     10 AE 56 F2 | 	cmps	local05, #16 wc
108bc     E4 FF 9F CD |  if_b	jmp	#LR__1400
108c0                 | LR__1401
108c0     3C CE 85 F1 | 	sub	fp, #60
108c4                 | ' for i=numpar to 2 step -1 
108c4     53 AF 02 F6 | 	mov	local05, local01
108c8                 | LR__1402
108c8     A4 CD BF FD | 	call	#_pop
108cc     2C CE 05 F1 | 	add	fp, #44
108d0     E7 7A 62 FC | 	wrlong	result1, fp
108d4     04 CE 05 F1 | 	add	fp, #4
108d8     E7 7C 62 FC | 	wrlong	result2, fp
108dc     04 CE 05 F1 | 	add	fp, #4
108e0     E7 7E 62 FC | 	wrlong	result3, fp
108e4     57 B1 02 F6 | 	mov	local06, local05
108e8     02 B0 86 F1 | 	sub	local06, #2
108ec     02 B0 66 F0 | 	shl	local06, #2
108f0     08 CE 05 F1 | 	add	fp, #8
108f4     E7 B0 02 F1 | 	add	local06, fp
108f8     10 CE 85 F1 | 	sub	fp, #16
108fc     E7 92 02 F6 | 	mov	arg01, fp
10900     2C CE 85 F1 | 	sub	fp, #44
10904     00 D0 BF FD | 	call	#_converttofloat
10908     58 7B 62 FC | 	wrlong	result1, local06
1090c     01 AE 86 F1 | 	sub	local05, #1
10910     02 AE 56 F2 | 	cmps	local05, #2 wc
10914     B0 FF 9F 3D |  if_ae	jmp	#LR__1402
10918     54 CD BF FD | 	call	#_pop
1091c     3F AF 02 F6 | 	mov	local05, result3
10920     2C CE 05 F1 | 	add	fp, #44
10924     E7 7A 62 FC | 	wrlong	result1, fp
10928     04 CE 05 F1 | 	add	fp, #4
1092c     E7 7C 62 FC | 	wrlong	result2, fp
10930     04 CE 05 F1 | 	add	fp, #4
10934     E7 AE 62 FC | 	wrlong	local05, fp
10938     08 CE 85 F1 | 	sub	fp, #8
1093c     E7 92 02 F6 | 	mov	arg01, fp
10940     2C CE 85 F1 | 	sub	fp, #44
10944     04 CF BF FD | 	call	#_converttoint
10948     3D AD 02 F6 | 	mov	local04, result1
1094c                 | ' t1=pop()
1094c                 | ' channel=converttoint(t1) : : if channel>31 then return
1094c     20 AC 56 F2 | 	cmps	local04, #32 wc
10950     E0 02 90 3D |  if_ae	jmp	#LR__1411
10954     00 B2 06 F6 | 	mov	local07, #0
10958                 | ' max=0
10958                 | ' if harm(0)<0 then
10958     3C CE 05 F1 | 	add	fp, #60
1095c     E7 92 02 FB | 	rdlong	arg01, fp
10960     3C CE 85 F1 | 	sub	fp, #60
10964     00 94 06 F6 | 	mov	arg02, #0
10968     01 96 06 F6 | 	mov	arg03, #1
1096c     6C 6B B1 FD | 	call	#__system___float_cmp
10970     00 7A 56 F2 | 	cmps	result1, #0 wc
10974     C0 00 90 3D |  if_ae	jmp	#LR__1405
10978     3C CE 05 F1 | 	add	fp, #60
1097c     E7 B4 02 FB | 	rdlong	local08, fp
10980     1F B4 06 F4 | 	bitl	local08, #31
10984     04 CE 05 F1 | 	add	fp, #4
10988     E7 B6 02 FB | 	rdlong	local09, fp
1098c     1F B6 06 F4 | 	bitl	local09, #31
10990     04 CE 85 F1 | 	sub	fp, #4
10994     00 C0 9F FF 
10998     E7 00 68 FC | 	wrlong	##1065353216, fp
1099c     04 CE 05 F1 | 	add	fp, #4
109a0     E7 B4 62 FC | 	wrlong	local08, fp
109a4     04 CE 05 F1 | 	add	fp, #4
109a8     E7 B6 62 FC | 	wrlong	local09, fp
109ac     44 CE 85 F1 | 	sub	fp, #68
109b0                 | '   harm(0)=1
109b0                 | '   harm(1)=even
109b0                 | '   harm(2)=odd
109b0                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
109b0     03 AE 06 F6 | 	mov	local05, #3
109b4                 | LR__1403
109b4     57 B1 02 F6 | 	mov	local06, local05
109b8     02 B0 66 F0 | 	shl	local06, #2
109bc     3C CE 05 F1 | 	add	fp, #60
109c0     E7 B0 02 F1 | 	add	local06, fp
109c4     57 9B 02 F6 | 	mov	arg05, local05
109c8     02 9A 86 F1 | 	sub	arg05, #2
109cc     02 9A 66 F0 | 	shl	arg05, #2
109d0     E7 9A 02 F1 | 	add	arg05, fp
109d4     4D 93 02 FB | 	rdlong	arg01, arg05
109d8     5A 95 02 F6 | 	mov	arg02, local08
109dc     3C CE 85 F1 | 	sub	fp, #60
109e0     C4 66 B1 FD | 	call	#__system___float_mul
109e4     58 7B 62 FC | 	wrlong	result1, local06
109e8     02 AE 06 F1 | 	add	local05, #2
109ec     10 AE 56 F2 | 	cmps	local05, #16 wc
109f0     C0 FF 9F CD |  if_b	jmp	#LR__1403
109f4                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
109f4     04 AE 06 F6 | 	mov	local05, #4
109f8                 | LR__1404
109f8     57 B1 02 F6 | 	mov	local06, local05
109fc     02 B0 66 F0 | 	shl	local06, #2
10a00     3C CE 05 F1 | 	add	fp, #60
10a04     E7 B0 02 F1 | 	add	local06, fp
10a08     57 B5 02 F6 | 	mov	local08, local05
10a0c     02 B4 86 F1 | 	sub	local08, #2
10a10     02 B4 66 F0 | 	shl	local08, #2
10a14     E7 B4 02 F1 | 	add	local08, fp
10a18     5A 93 02 FB | 	rdlong	arg01, local08
10a1c     5B 95 02 F6 | 	mov	arg02, local09
10a20     3C CE 85 F1 | 	sub	fp, #60
10a24     80 66 B1 FD | 	call	#__system___float_mul
10a28     58 7B 62 FC | 	wrlong	result1, local06
10a2c     02 AE 06 F1 | 	add	local05, #2
10a30     0F AE 56 F2 | 	cmps	local05, #15 wc
10a34     C0 FF 9F CD |  if_b	jmp	#LR__1404
10a38                 | LR__1405
10a38                 | ' if harm(0)>=0 then ' synthesize with harmonics
10a38     3C CE 05 F1 | 	add	fp, #60
10a3c     E7 92 02 FB | 	rdlong	arg01, fp
10a40     3C CE 85 F1 | 	sub	fp, #60
10a44     00 94 06 F6 | 	mov	arg02, #0
10a48     01 96 66 F6 | 	neg	arg03, #1
10a4c     8C 6A B1 FD | 	call	#__system___float_cmp
10a50     00 7A 56 F2 | 	cmps	result1, #0 wc
10a54     DC 01 90 CD |  if_b	jmp	#LR__1410
10a58                 | '   for i=0 to 1023
10a58     00 AE 06 F6 | 	mov	local05, #0
10a5c                 | LR__1406
10a5c     00 B8 06 F6 | 	mov	local10, #0
10a60                 | '     spl=0
10a60                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
10a60     00 BA 06 F6 | 	mov	local11, #0
10a64                 | LR__1407
10a64     5D B1 02 F6 | 	mov	local06, local11
10a68     02 B0 66 F0 | 	shl	local06, #2
10a6c     E7 9A 02 F6 | 	mov	arg05, fp
10a70     3C 9A 06 F1 | 	add	arg05, #60
10a74     4D B1 02 F1 | 	add	local06, arg05
10a78     58 B1 02 FB | 	rdlong	local06, local06
10a7c     87 E4 1D FF 
10a80     DB B7 06 F6 | 	mov	local09, ##1003032539
10a84     57 93 52 F6 | 	abs	arg01, local05 wc
10a88     1F BC C6 C9 |  if_b	decod	local12, #31
10a8c     00 BC 06 36 |  if_ae	mov	local12, #0
10a90     10 62 B1 FD | 	call	#__system___float_fromuns
10a94     5E 7B 62 F5 | 	xor	result1, local12
10a98     3D 95 02 F6 | 	mov	arg02, result1
10a9c     5B 93 02 F6 | 	mov	arg01, local09
10aa0     04 66 B1 FD | 	call	#__system___float_mul
10aa4     3D BF 02 F6 | 	mov	local13, result1
10aa8     5D 93 02 F6 | 	mov	arg01, local11
10aac     01 92 06 F1 | 	add	arg01, #1
10ab0     49 93 52 F6 | 	abs	arg01, arg01 wc
10ab4     1F BC C6 C9 |  if_b	decod	local12, #31
10ab8     00 BC 06 36 |  if_ae	mov	local12, #0
10abc     E4 61 B1 FD | 	call	#__system___float_fromuns
10ac0     5E 7B 62 F5 | 	xor	result1, local12
10ac4     3D 95 02 F6 | 	mov	arg02, result1
10ac8     5F 93 02 F6 | 	mov	arg01, local13
10acc     D8 65 B1 FD | 	call	#__system___float_mul
10ad0     3D 93 02 F6 | 	mov	arg01, result1
10ad4     40 6F B1 FD | 	call	#__system____builtin_sinf
10ad8     3D 95 02 F6 | 	mov	arg02, result1
10adc     58 93 02 F6 | 	mov	arg01, local06
10ae0     C4 65 B1 FD | 	call	#__system___float_mul
10ae4     3D 95 02 F6 | 	mov	arg02, result1
10ae8     5C 93 02 F6 | 	mov	arg01, local10
10aec     E8 61 B1 FD | 	call	#__system___float_add
10af0     3D B9 02 F6 | 	mov	local10, result1
10af4     01 BA 06 F1 | 	add	local11, #1
10af8     10 BA 56 F2 | 	cmps	local11, #16 wc
10afc     64 FF 9F CD |  if_b	jmp	#LR__1407
10b00                 | '     if abs(spl)>max then max=abs(spl)  
10b00     5C 93 02 F6 | 	mov	arg01, local10
10b04     1F 92 06 F4 | 	bitl	arg01, #31
10b08     59 95 02 F6 | 	mov	arg02, local07
10b0c     01 96 66 F6 | 	neg	arg03, #1
10b10     C8 69 B1 FD | 	call	#__system___float_cmp
10b14     01 7A 56 F2 | 	cmps	result1, #1 wc
10b18     1F B8 06 34 |  if_ae	bitl	local10, #31
10b1c     5C B3 02 36 |  if_ae	mov	local07, local10
10b20     01 AE 06 F1 | 	add	local05, #1
10b24     02 00 00 FF 
10b28     00 AE 56 F2 | 	cmps	local05, ##1024 wc
10b2c     2C FF 9F CD |  if_b	jmp	#LR__1406
10b30                 | '   for i=0 to 1023
10b30     00 AE 06 F6 | 	mov	local05, #0
10b34                 | LR__1408
10b34     00 B8 06 F6 | 	mov	local10, #0
10b38                 | '     spl=0
10b38                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j 
10b38     00 BA 06 F6 | 	mov	local11, #0
10b3c                 | LR__1409
10b3c     5D BF 02 F6 | 	mov	local13, local11
10b40     02 BE 66 F0 | 	shl	local13, #2
10b44     E7 B6 02 F6 | 	mov	local09, fp
10b48     3C B6 06 F1 | 	add	local09, #60
10b4c     5B BF 02 F1 | 	add	local13, local09
10b50     5F B1 02 FB | 	rdlong	local06, local13
10b54     58 7F 23 FF 
10b58     00 92 06 F6 | 	mov	arg01, ##1191096320
10b5c     59 95 02 F6 | 	mov	arg02, local07
10b60     48 67 B1 FD | 	call	#__system___float_div
10b64     3D 95 02 F6 | 	mov	arg02, result1
10b68     58 93 02 F6 | 	mov	arg01, local06
10b6c     38 65 B1 FD | 	call	#__system___float_mul
10b70     3D B1 02 F6 | 	mov	local06, result1
10b74     87 E4 1D FF 
10b78     DB BF 06 F6 | 	mov	local13, ##1003032539
10b7c     57 93 52 F6 | 	abs	arg01, local05 wc
10b80     1F BC C6 C9 |  if_b	decod	local12, #31
10b84     00 BC 06 36 |  if_ae	mov	local12, #0
10b88     18 61 B1 FD | 	call	#__system___float_fromuns
10b8c     5E 7B 62 F5 | 	xor	result1, local12
10b90     3D 95 02 F6 | 	mov	arg02, result1
10b94     5F 93 02 F6 | 	mov	arg01, local13
10b98     0C 65 B1 FD | 	call	#__system___float_mul
10b9c     3D BF 02 F6 | 	mov	local13, result1
10ba0     5D 93 02 F6 | 	mov	arg01, local11
10ba4     01 92 06 F1 | 	add	arg01, #1
10ba8     49 93 52 F6 | 	abs	arg01, arg01 wc
10bac     1F BC C6 C9 |  if_b	decod	local12, #31
10bb0     00 BC 06 36 |  if_ae	mov	local12, #0
10bb4     EC 60 B1 FD | 	call	#__system___float_fromuns
10bb8     5E 7B 62 F5 | 	xor	result1, local12
10bbc     3D 95 02 F6 | 	mov	arg02, result1
10bc0     5F 93 02 F6 | 	mov	arg01, local13
10bc4     E0 64 B1 FD | 	call	#__system___float_mul
10bc8     3D 93 02 F6 | 	mov	arg01, result1
10bcc     48 6E B1 FD | 	call	#__system____builtin_sinf
10bd0     3D 95 02 F6 | 	mov	arg02, result1
10bd4     58 93 02 F6 | 	mov	arg01, local06
10bd8     CC 64 B1 FD | 	call	#__system___float_mul
10bdc     3D 95 02 F6 | 	mov	arg02, result1
10be0     5C 93 02 F6 | 	mov	arg01, local10
10be4     F0 60 B1 FD | 	call	#__system___float_add
10be8     3D B9 02 F6 | 	mov	local10, result1
10bec     01 BA 06 F1 | 	add	local11, #1
10bf0     10 BA 56 F2 | 	cmps	local11, #16 wc
10bf4     44 FF 9F CD |  if_b	jmp	#LR__1409
10bf8     56 BB 02 F6 | 	mov	local11, local04
10bfc     0B BA 66 F0 | 	shl	local11, #11
10c00     57 BF 02 F6 | 	mov	local13, local05
10c04     01 BE 66 F0 | 	shl	local13, #1
10c08     5F BB 02 F1 | 	add	local11, local13
10c0c     5C 93 02 F6 | 	mov	arg01, local10
10c10     01 94 06 F6 | 	mov	arg02, #1
10c14     58 69 B1 FD | 	call	#__system___float_tointeger
10c18     3D 95 02 F6 | 	mov	arg02, result1
10c1c     5D 93 02 F6 | 	mov	arg01, local11
10c20     94 02 B1 FD | 	call	#_psdpoke
10c24     01 AE 06 F1 | 	add	local05, #1
10c28     02 00 00 FF 
10c2c     00 AE 56 F2 | 	cmps	local05, ##1024 wc
10c30     00 FF 9F CD |  if_b	jmp	#LR__1408
10c34                 | LR__1410
10c34                 | LR__1411
10c34     E7 F0 03 F6 | 	mov	ptra, fp
10c38     F2 00 A0 FD | 	call	#popregs_
10c3c                 | _do_defsnd_ret
10c3c     2D 00 64 FD | 	ret
10c40                 | 
10c40                 | ' 
10c40                 | ' '-------------------- defsprite
10c40                 | ' 
10c40                 | ' sub do_defsprite
10c40                 | _do_defsprite
10c40     0B CA 05 F6 | 	mov	COUNT_, #11
10c44     E8 00 A0 FD | 	call	#pushregs_
10c48     60 F0 07 F1 | 	add	ptra, #96
10c4c     20 CA BF FD | 	call	#_pop
10c50     3D 97 02 F6 | 	mov	arg03, result1
10c54     3E 95 02 F6 | 	mov	arg02, result2
10c58     3F 93 02 F6 | 	mov	arg01, result3
10c5c     30 CE 05 F1 | 	add	fp, #48
10c60     E7 96 62 FC | 	wrlong	arg03, fp
10c64     04 CE 05 F1 | 	add	fp, #4
10c68     E7 94 62 FC | 	wrlong	arg02, fp
10c6c     04 CE 05 F1 | 	add	fp, #4
10c70     E7 92 62 FC | 	wrlong	arg01, fp
10c74     38 CE 85 F1 | 	sub	fp, #56
10c78     F4 C9 BF FD | 	call	#_pop
10c7c     3D 97 02 F6 | 	mov	arg03, result1
10c80     3E 95 02 F6 | 	mov	arg02, result2
10c84     3F 93 02 F6 | 	mov	arg01, result3
10c88     24 CE 05 F1 | 	add	fp, #36
10c8c     E7 96 62 FC | 	wrlong	arg03, fp
10c90     04 CE 05 F1 | 	add	fp, #4
10c94     E7 94 62 FC | 	wrlong	arg02, fp
10c98     04 CE 05 F1 | 	add	fp, #4
10c9c     E7 92 62 FC | 	wrlong	arg01, fp
10ca0     2C CE 85 F1 | 	sub	fp, #44
10ca4     C8 C9 BF FD | 	call	#_pop
10ca8     3D 97 02 F6 | 	mov	arg03, result1
10cac     3E 95 02 F6 | 	mov	arg02, result2
10cb0     3F 93 02 F6 | 	mov	arg01, result3
10cb4     18 CE 05 F1 | 	add	fp, #24
10cb8     E7 96 62 FC | 	wrlong	arg03, fp
10cbc     04 CE 05 F1 | 	add	fp, #4
10cc0     E7 94 62 FC | 	wrlong	arg02, fp
10cc4     04 CE 05 F1 | 	add	fp, #4
10cc8     E7 92 62 FC | 	wrlong	arg01, fp
10ccc     20 CE 85 F1 | 	sub	fp, #32
10cd0     9C C9 BF FD | 	call	#_pop
10cd4     3D 97 02 F6 | 	mov	arg03, result1
10cd8     3E 95 02 F6 | 	mov	arg02, result2
10cdc     3F 93 02 F6 | 	mov	arg01, result3
10ce0     0C CE 05 F1 | 	add	fp, #12
10ce4     E7 96 62 FC | 	wrlong	arg03, fp
10ce8     04 CE 05 F1 | 	add	fp, #4
10cec     E7 94 62 FC | 	wrlong	arg02, fp
10cf0     04 CE 05 F1 | 	add	fp, #4
10cf4     E7 92 62 FC | 	wrlong	arg01, fp
10cf8     14 CE 85 F1 | 	sub	fp, #20
10cfc     70 C9 BF FD | 	call	#_pop
10d00     3F 97 02 F6 | 	mov	arg03, result3
10d04     E7 7A 62 FC | 	wrlong	result1, fp
10d08     04 CE 05 F1 | 	add	fp, #4
10d0c     E7 7C 62 FC | 	wrlong	result2, fp
10d10     04 CE 05 F1 | 	add	fp, #4
10d14     E7 96 62 FC | 	wrlong	arg03, fp
10d18     08 CE 85 F1 | 	sub	fp, #8
10d1c     E7 92 02 F6 | 	mov	arg01, fp
10d20     28 CB BF FD | 	call	#_converttoint
10d24     3D A7 02 F6 | 	mov	local01, result1
10d28     E7 92 02 F6 | 	mov	arg01, fp
10d2c     0C 92 06 F1 | 	add	arg01, #12
10d30     18 CB BF FD | 	call	#_converttoint
10d34     3D A9 02 F6 | 	mov	local02, result1
10d38     E7 92 02 F6 | 	mov	arg01, fp
10d3c     18 92 06 F1 | 	add	arg01, #24
10d40     08 CB BF FD | 	call	#_converttoint
10d44     3D AB 02 F6 | 	mov	local03, result1
10d48     E7 92 02 F6 | 	mov	arg01, fp
10d4c     24 92 06 F1 | 	add	arg01, #36
10d50     F8 CA BF FD | 	call	#_converttoint
10d54     3D AD 02 F6 | 	mov	local04, result1
10d58     E7 92 02 F6 | 	mov	arg01, fp
10d5c     30 92 06 F1 | 	add	arg01, #48
10d60     E8 CA BF FD | 	call	#_converttoint
10d64     3D AF 02 F6 | 	mov	local05, result1
10d68                 | ' 
10d68                 | ' t5=pop()
10d68                 | ' t4=pop()
10d68                 | ' t3=pop()
10d68                 | ' t2=pop()
10d68                 | ' t1=pop()
10d68                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5) ' do convert, defsprite is not a racing command
10d68                 | ' if sprite(a1)<> nil then delete(sprite(a1))	' todo: check parameters for limits
10d68     53 97 02 F6 | 	mov	arg03, local01
10d6c     02 96 66 F0 | 	shl	arg03, #2
10d70     32 95 02 F6 | 	mov	arg02, objptr
10d74     54 00 00 FF 
10d78     30 94 06 F1 | 	add	arg02, ##43056
10d7c     4A 97 02 F1 | 	add	arg03, arg02
10d80     4B 97 0A FB | 	rdlong	arg03, arg03 wz
10d84     20 00 90 AD |  if_e	jmp	#LR__1420
10d88     53 97 02 F6 | 	mov	arg03, local01
10d8c     02 96 66 F0 | 	shl	arg03, #2
10d90     32 95 02 F6 | 	mov	arg02, objptr
10d94     54 00 00 FF 
10d98     30 94 06 F1 | 	add	arg02, ##43056
10d9c     4A 97 02 F1 | 	add	arg03, arg02
10da0     4B 93 02 FB | 	rdlong	arg01, arg03
10da4     6C 77 B1 FD | 	call	#__system___gc_free
10da8                 | LR__1420
10da8     57 AD 02 FD | 	qmul	local04, local05
10dac     53 B1 02 F6 | 	mov	local06, local01
10db0     02 B0 66 F0 | 	shl	local06, #2
10db4     32 97 02 F6 | 	mov	arg03, objptr
10db8     54 00 00 FF 
10dbc     30 96 06 F1 | 	add	arg03, ##43056
10dc0     4B B1 02 F1 | 	add	local06, arg03
10dc4     18 92 62 FD | 	getqx	arg01
10dc8     14 76 B1 FD | 	call	#__system___gc_alloc_managed
10dcc     58 7B 62 FC | 	wrlong	result1, local06
10dd0                 | ' for y=a3 to a3+a5-1
10dd0     55 B3 02 F6 | 	mov	local07, local03
10dd4     55 B5 02 F6 | 	mov	local08, local03
10dd8     57 B5 02 F1 | 	add	local08, local05
10ddc                 | LR__1421
10ddc     5A B3 52 F2 | 	cmps	local07, local08 wc
10de0     7C 00 90 3D |  if_ae	jmp	#LR__1424
10de4                 | '   for x=a2 to a4+a2-1
10de4     54 B7 02 F6 | 	mov	local09, local02
10de8     56 B9 02 F6 | 	mov	local10, local04
10dec     54 B9 02 F1 | 	add	local10, local02
10df0                 | LR__1422
10df0     5C B7 52 F2 | 	cmps	local09, local10 wc
10df4     60 00 90 3D |  if_ae	jmp	#LR__1423
10df8     59 B1 02 F6 | 	mov	local06, local07
10dfc     55 B1 82 F1 | 	sub	local06, local03
10e00     56 B1 02 FD | 	qmul	local06, local04
10e04     53 B1 02 F6 | 	mov	local06, local01
10e08     02 B0 66 F0 | 	shl	local06, #2
10e0c     32 97 02 F6 | 	mov	arg03, objptr
10e10     54 00 00 FF 
10e14     30 96 06 F1 | 	add	arg03, ##43056
10e18     4B B1 02 F1 | 	add	local06, arg03
10e1c     58 B1 02 FB | 	rdlong	local06, local06
10e20     5B BB 02 F6 | 	mov	local11, local09
10e24     54 BB 82 F1 | 	sub	local11, local02
10e28     32 93 02 FB | 	rdlong	arg01, objptr
10e2c     5B 93 02 F1 | 	add	arg01, local09
10e30     59 97 02 F6 | 	mov	arg03, local07
10e34     0A 96 66 F0 | 	shl	arg03, #10
10e38     4B 93 02 F1 | 	add	arg01, arg03
10e3c     18 96 62 FD | 	getqx	arg03
10e40     4B BB 02 F1 | 	add	local11, arg03
10e44     58 BB 02 F1 | 	add	local11, local06
10e48     FC 00 B1 FD | 	call	#_pspeek
10e4c     5D 7B 42 FC | 	wrbyte	result1, local11
10e50     01 B6 06 F1 | 	add	local09, #1
10e54     98 FF 9F FD | 	jmp	#LR__1422
10e58                 | LR__1423
10e58     01 B2 06 F1 | 	add	local07, #1
10e5c     7C FF 9F FD | 	jmp	#LR__1421
10e60                 | LR__1424
10e60     53 BB 02 F6 | 	mov	local11, local01
10e64     02 BA 66 F0 | 	shl	local11, #2
10e68     32 B9 02 F6 | 	mov	local10, objptr
10e6c     54 00 00 FF 
10e70     30 B8 06 F1 | 	add	local10, ##43056
10e74     5C BB 02 F1 | 	add	local11, local10
10e78     5D 95 02 FB | 	rdlong	arg02, local11
10e7c     53 93 02 F6 | 	mov	arg01, local01
10e80     10 0E B1 FD | 	call	#_Hg010b_4_spin2_setspriteptr
10e84     53 93 02 F6 | 	mov	arg01, local01
10e88     56 95 02 F6 | 	mov	arg02, local04
10e8c     57 97 02 F6 | 	mov	arg03, local05
10e90     8C 0E B1 FD | 	call	#_Hg010b_4_spin2_setspritesize
10e94     E7 F0 03 F6 | 	mov	ptra, fp
10e98     F2 00 A0 FD | 	call	#popregs_
10e9c                 | _do_defsprite_ret
10e9c     2D 00 64 FD | 	ret
10ea0                 | 
10ea0                 | ' 
10ea0                 | ' '-------------------- deg
10ea0                 | ' 
10ea0                 | ' sub do_deg
10ea0                 | _do_deg
10ea0     54 00 00 FF 
10ea4     84 64 06 F1 | 	add	objptr, ##43140
10ea8     7D 47 9E FF 
10eac     32 6B 68 FC | 	wrlong	##1016003125, objptr
10eb0     04 64 06 F1 | 	add	objptr, #4
10eb4     97 32 A1 FF 
10eb8     32 C3 69 FC | 	wrlong	##1113927393, objptr
10ebc     54 00 00 FF 
10ec0     88 64 86 F1 | 	sub	objptr, ##43144
10ec4                 | _do_deg_ret
10ec4     2D 00 64 FD | 	ret
10ec8                 | 
10ec8                 | ' 
10ec8                 | ' '-------------------- delete
10ec8                 | ' 
10ec8                 | ' sub do_delete
10ec8                 | _do_delete
10ec8     05 CA 05 F6 | 	mov	COUNT_, #5
10ecc     E8 00 A0 FD | 	call	#pushregs_
10ed0     9C C7 BF FD | 	call	#_pop
10ed4     3E 99 02 F6 | 	mov	arg04, result2
10ed8     3F 97 02 F6 | 	mov	arg03, result3
10edc     3D A7 02 F6 | 	mov	local01, result1
10ee0     4C A9 02 F6 | 	mov	local02, arg04
10ee4     4B AB 02 F6 | 	mov	local03, arg03
10ee8                 | ' 
10ee8                 | ' t1=pop()
10ee8                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
10ee8     2B AA 0E F2 | 	cmp	local03, #43 wz
10eec     10 00 90 5D |  if_ne	jmp	#LR__1430
10ef0     53 93 02 F6 | 	mov	arg01, local01
10ef4     E8 C8 BF FD | 	call	#_convertstring
10ef8     3D A7 02 F6 | 	mov	local01, result1
10efc     1F AA 06 F6 | 	mov	local03, #31
10f00                 | LR__1430
10f00                 | ' if t1.result_type<>result_string then printerror(15): return
10f00     1F AA 0E F2 | 	cmp	local03, #31 wz
10f04     10 00 90 AD |  if_e	jmp	#LR__1431
10f08     0F 92 06 F6 | 	mov	arg01, #15
10f0c     00 94 06 F6 | 	mov	arg02, #0
10f10     C0 FD B0 FD | 	call	#_printerror
10f14     E4 00 90 FD | 	jmp	#LR__1435
10f18                 | LR__1431
10f18                 | ' if currentdir$<>"/" then filename$=currentdir$+"/"+t1.result.sresult else filename$="/"+t1.result.sresult
10f18     4C 00 00 FF 
10f1c     38 64 06 F1 | 	add	objptr, ##38968
10f20     32 93 02 FB | 	rdlong	arg01, objptr
10f24     4C 00 00 FF 
10f28     38 64 86 F1 | 	sub	objptr, ##38968
10f2c     97 01 00 FF 
10f30     35 94 06 F6 | 	mov	arg02, ##@LR__5993
10f34     C8 3A B1 FD | 	call	#__system___string_cmp
10f38     00 7A 0E F2 | 	cmp	result1, #0 wz
10f3c     34 00 90 AD |  if_e	jmp	#LR__1432
10f40     4C 00 00 FF 
10f44     38 64 06 F1 | 	add	objptr, ##38968
10f48     32 93 02 FB | 	rdlong	arg01, objptr
10f4c     4C 00 00 FF 
10f50     38 64 86 F1 | 	sub	objptr, ##38968
10f54     97 01 00 FF 
10f58     37 94 06 F6 | 	mov	arg02, ##@LR__5994
10f5c     D4 3A B1 FD | 	call	#__system___string_concat
10f60     3D 93 02 F6 | 	mov	arg01, result1
10f64     53 95 02 F6 | 	mov	arg02, local01
10f68     C8 3A B1 FD | 	call	#__system___string_concat
10f6c     3D AD 02 F6 | 	mov	local04, result1
10f70     14 00 90 FD | 	jmp	#LR__1433
10f74                 | LR__1432
10f74     97 01 00 FF 
10f78     39 92 06 F6 | 	mov	arg01, ##@LR__5995
10f7c     53 95 02 F6 | 	mov	arg02, local01
10f80     B0 3A B1 FD | 	call	#__system___string_concat
10f84     3D AD 02 F6 | 	mov	local04, result1
10f88                 | LR__1433
10f88     56 93 02 F6 | 	mov	arg01, local04
10f8c     40 5A B1 FD | 	call	#__system___remove
10f90     20 6A 06 F1 | 	add	ptr___system__dat__, #32
10f94     35 7B 02 FB | 	rdlong	result1, ptr___system__dat__
10f98     35 01 68 FC | 	wrlong	#0, ptr___system__dat__
10f9c     20 6A 86 F1 | 	sub	ptr___system__dat__, #32
10fa0     3D AF 0A F6 | 	mov	local05, result1 wz
10fa4                 | ' kill filename$
10fa4                 | ' err=geterr() : if err<>0 then print "Cannot delete file or file doesn't exist: system error "; err
10fa4     54 00 90 AD |  if_e	jmp	#LR__1434
10fa8     00 92 06 F6 | 	mov	arg01, #0
10fac     AC 8F B1 FD | 	call	#__system___getiolock_0622
10fb0     3D 93 02 F6 | 	mov	arg01, result1
10fb4     20 3A B1 FD | 	call	#__system___lockmem
10fb8     97 01 00 FF 
10fbc     3B 94 06 F6 | 	mov	arg02, ##@LR__5996
10fc0     00 92 06 F6 | 	mov	arg01, #0
10fc4     00 96 06 F6 | 	mov	arg03, #0
10fc8     00 47 B1 FD | 	call	#__system___basic_print_string
10fcc     00 92 06 F6 | 	mov	arg01, #0
10fd0     57 95 02 F6 | 	mov	arg02, local05
10fd4     00 96 06 F6 | 	mov	arg03, #0
10fd8     0A 98 06 F6 | 	mov	arg04, #10
10fdc     30 47 B1 FD | 	call	#__system___basic_print_integer
10fe0     00 92 06 F6 | 	mov	arg01, #0
10fe4     0A 94 06 F6 | 	mov	arg02, #10
10fe8     00 96 06 F6 | 	mov	arg03, #0
10fec     84 46 B1 FD | 	call	#__system___basic_print_char
10ff0     00 92 06 F6 | 	mov	arg01, #0
10ff4     64 8F B1 FD | 	call	#__system___getiolock_0622
10ff8     3D 01 68 FC | 	wrlong	#0, result1
10ffc                 | LR__1434
10ffc                 | LR__1435
10ffc     E7 F0 03 F6 | 	mov	ptra, fp
11000     F2 00 A0 FD | 	call	#popregs_
11004                 | _do_delete_ret
11004     2D 00 64 FD | 	ret
11008                 | 
11008                 | ' 
11008                 | ' '-------------------- dir
11008                 | ' 
11008                 | ' sub do_dir
11008                 | _do_dir
11008     13 CA 05 F6 | 	mov	COUNT_, #19
1100c     E8 00 A0 FD | 	call	#pushregs_
11010     01 00 00 FF 
11014     38 F0 07 F1 | 	add	ptra, ##568
11018                 | ' 
11018                 | ' print "Current directory: "; currentdir$ 
11018     00 92 06 F6 | 	mov	arg01, #0
1101c     3C 8F B1 FD | 	call	#__system___getiolock_0622
11020     3D 93 02 F6 | 	mov	arg01, result1
11024     B0 39 B1 FD | 	call	#__system___lockmem
11028     97 01 00 FF 
1102c     73 94 06 F6 | 	mov	arg02, ##@LR__5997
11030     00 92 06 F6 | 	mov	arg01, #0
11034     00 96 06 F6 | 	mov	arg03, #0
11038     90 46 B1 FD | 	call	#__system___basic_print_string
1103c     4C 00 00 FF 
11040     38 64 06 F1 | 	add	objptr, ##38968
11044     32 95 02 FB | 	rdlong	arg02, objptr
11048     4C 00 00 FF 
1104c     38 64 86 F1 | 	sub	objptr, ##38968
11050     00 92 06 F6 | 	mov	arg01, #0
11054     00 96 06 F6 | 	mov	arg03, #0
11058     70 46 B1 FD | 	call	#__system___basic_print_string
1105c     00 92 06 F6 | 	mov	arg01, #0
11060     0A 94 06 F6 | 	mov	arg02, #10
11064     00 96 06 F6 | 	mov	arg03, #0
11068     08 46 B1 FD | 	call	#__system___basic_print_char
1106c     01 A6 06 F6 | 	mov	local01, #1
11070     00 92 06 F6 | 	mov	arg01, #0
11074     E4 8E B1 FD | 	call	#__system___getiolock_0622
11078     3D 01 68 FC | 	wrlong	#0, result1
1107c     00 A8 06 F6 | 	mov	local02, #0
11080     00 AA 06 F6 | 	mov	local03, #0
11084                 | ' px=0
11084                 | ' for i=0 to 127: filelist(i)="" : next i
11084     00 AC 06 F6 | 	mov	local04, #0
11088     1C CE 05 F1 | 	add	fp, #28
1108c     D7 12 48 FB | 	callpa	#(@LR__1441-@LR__1440)>>2,fcache_load_ptr_
11090                 | LR__1440
11090     56 AF 02 F6 | 	mov	local05, local04
11094     02 AE 66 F0 | 	shl	local05, #2
11098     E7 AE 02 F1 | 	add	local05, fp
1109c     97 01 00 FF 
110a0     87 B0 06 F6 | 	mov	local06, ##@LR__5998
110a4     57 B1 62 FC | 	wrlong	local06, local05
110a8     01 AC 06 F1 | 	add	local04, #1
110ac     80 AC 56 F2 | 	cmps	local04, #128 wc
110b0     DC FF 9F CD |  if_b	jmp	#LR__1440
110b4                 | LR__1441
110b4     1C CE 85 F1 | 	sub	fp, #28
110b8     97 01 00 FF 
110bc     88 92 06 F6 | 	mov	arg01, ##@LR__5999
110c0     10 94 06 F6 | 	mov	arg02, #16
110c4     4C 90 B1 FD | 	call	#__system___basic_dir
110c8     3D B3 02 F6 | 	mov	local07, result1
110cc     00 B4 06 F6 | 	mov	local08, #0
110d0                 | ' filename=dir$("*", fbDirectory)
110d0                 | ' n=0
110d0                 | ' while filename <> "" andalso filename <> nil andalso n<128
110d0                 | LR__1442
110d0     97 01 00 FF 
110d4     8A B6 06 F6 | 	mov	local09, ##@LR__6000
110d8     59 93 02 F6 | 	mov	arg01, local07
110dc     5B 95 02 F6 | 	mov	arg02, local09
110e0     1C 39 B1 FD | 	call	#__system___string_cmp
110e4     00 7A 0E F2 | 	cmp	result1, #0 wz
110e8     68 00 90 AD |  if_e	jmp	#LR__1443
110ec     00 B6 06 F6 | 	mov	local09, #0
110f0     59 93 02 F6 | 	mov	arg01, local07
110f4     00 94 06 F6 | 	mov	arg02, #0
110f8     04 39 B1 FD | 	call	#__system___string_cmp
110fc     00 7A 0E F2 | 	cmp	result1, #0 wz
11100     50 00 90 AD |  if_e	jmp	#LR__1443
11104     80 B4 56 F2 | 	cmps	local08, #128 wc
11108     48 00 90 3D |  if_ae	jmp	#LR__1443
1110c     97 01 00 FF 
11110     8B 92 06 F6 | 	mov	arg01, ##@LR__6001
11114     59 95 02 F6 | 	mov	arg02, local07
11118     18 39 B1 FD | 	call	#__system___string_concat
1111c     3D B3 02 F6 | 	mov	local07, result1
11120     5A AF 02 F6 | 	mov	local05, local08
11124     02 AE 66 F0 | 	shl	local05, #2
11128     E7 B6 02 F6 | 	mov	local09, fp
1112c     1C B6 06 F1 | 	add	local09, #28
11130     5B AF 02 F1 | 	add	local05, local09
11134     57 B3 62 FC | 	wrlong	local07, local05
11138     01 B4 06 F1 | 	add	local08, #1
1113c     00 AE 06 F6 | 	mov	local05, #0
11140     00 92 06 F6 | 	mov	arg01, #0
11144     00 94 06 F6 | 	mov	arg02, #0
11148     C8 8F B1 FD | 	call	#__system___basic_dir
1114c     3D B3 02 F6 | 	mov	local07, result1
11150     7C FF 9F FD | 	jmp	#LR__1442
11154                 | LR__1443
11154                 | ' for i=0 to n-1			' now sort this
11154     00 AC 06 F6 | 	mov	local04, #0
11158     5A B9 02 F6 | 	mov	local10, local08
1115c                 | LR__1444
1115c     5C AD 52 F2 | 	cmps	local04, local10 wc
11160     DC 00 90 3D |  if_ae	jmp	#LR__1448
11164     00 BA 06 F6 | 	mov	local11, #0
11168                 | '   swapped=false
11168                 | '   for j=0 to n-i-2
11168     00 BC 06 F6 | 	mov	local12, #0
1116c     5A BF 02 F6 | 	mov	local13, local08
11170     56 BF 82 F1 | 	sub	local13, local04
11174     01 BE 86 F1 | 	sub	local13, #1
11178                 | LR__1445
11178     5F BD 52 F2 | 	cmps	local12, local13 wc
1117c     B0 00 90 3D |  if_ae	jmp	#LR__1447
11180                 | '     if filelist(j) > filelist(j+1) then
11180     5E B7 02 F6 | 	mov	local09, local12
11184     02 B6 66 F0 | 	shl	local09, #2
11188     1C CE 05 F1 | 	add	fp, #28
1118c     E7 B6 02 F1 | 	add	local09, fp
11190     5B 93 02 FB | 	rdlong	arg01, local09
11194     5E B7 02 F6 | 	mov	local09, local12
11198     01 B6 06 F1 | 	add	local09, #1
1119c     5B B1 02 F6 | 	mov	local06, local09
111a0     02 B0 66 F0 | 	shl	local06, #2
111a4     E7 A6 02 F6 | 	mov	local01, fp
111a8     E7 B0 02 F1 | 	add	local06, fp
111ac     58 AF 02 FB | 	rdlong	local05, local06
111b0     57 95 02 F6 | 	mov	arg02, local05
111b4     1C CE 85 F1 | 	sub	fp, #28
111b8     44 38 B1 FD | 	call	#__system___string_cmp
111bc     01 7A 56 F2 | 	cmps	result1, #1 wc
111c0     64 00 90 CD |  if_b	jmp	#LR__1446
111c4     5E B7 02 F6 | 	mov	local09, local12
111c8     01 B6 06 F1 | 	add	local09, #1
111cc     02 B6 66 F0 | 	shl	local09, #2
111d0     1C CE 05 F1 | 	add	fp, #28
111d4     E7 B6 02 F1 | 	add	local09, fp
111d8     5B BB 02 FB | 	rdlong	local11, local09
111dc     5E B1 02 F6 | 	mov	local06, local12
111e0     02 B0 66 F0 | 	shl	local06, #2
111e4     E7 B0 02 F1 | 	add	local06, fp
111e8     58 AF 02 FB | 	rdlong	local05, local06
111ec     5E B7 02 F6 | 	mov	local09, local12
111f0     5B B1 02 F6 | 	mov	local06, local09
111f4     02 B0 66 F0 | 	shl	local06, #2
111f8     E7 A6 02 F6 | 	mov	local01, fp
111fc     E7 B0 02 F1 | 	add	local06, fp
11200     58 BB 62 FC | 	wrlong	local11, local06
11204     5E A9 02 F6 | 	mov	local02, local12
11208     01 A8 06 F1 | 	add	local02, #1
1120c     54 C1 02 F6 | 	mov	local14, local02
11210     02 C0 66 F0 | 	shl	local14, #2
11214     E7 C2 02 F6 | 	mov	local15, fp
11218     E7 C0 02 F1 | 	add	local14, fp
1121c     60 AF 62 FC | 	wrlong	local05, local14
11220     01 BA 66 F6 | 	neg	local11, #1
11224     1C CE 85 F1 | 	sub	fp, #28
11228                 | LR__1446
11228     01 BC 06 F1 | 	add	local12, #1
1122c     48 FF 9F FD | 	jmp	#LR__1445
11230                 | LR__1447
11230                 | ' if not swapped then exit for
11230     5D C5 22 F6 | 	not	local16, local11
11234     00 C4 0E F2 | 	cmp	local16, #0 wz
11238     01 AC 06 A1 |  if_e	add	local04, #1
1123c     1C FF 9F AD |  if_e	jmp	#LR__1444
11240                 | LR__1448
11240                 | ' for i=0 to n-1
11240     00 AC 06 F6 | 	mov	local04, #0
11244     5A C7 02 F6 | 	mov	local17, local08
11248                 | LR__1449
11248     63 AD 52 F2 | 	cmps	local04, local17 wc
1124c     90 00 90 3D |  if_ae	jmp	#LR__1451
11250                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
11250     00 92 06 F6 | 	mov	arg01, #0
11254     04 8D B1 FD | 	call	#__system___getiolock_0622
11258     3D 93 02 F6 | 	mov	arg01, result1
1125c     78 37 B1 FD | 	call	#__system___lockmem
11260     56 A9 02 F6 | 	mov	local02, local04
11264     02 A8 66 F0 | 	shl	local02, #2
11268     E7 C0 02 F6 | 	mov	local14, fp
1126c     1C C0 06 F1 | 	add	local14, #28
11270     60 A9 02 F1 | 	add	local02, local14
11274     54 95 02 FB | 	rdlong	arg02, local02
11278     00 A6 06 F6 | 	mov	local01, #0
1127c     00 92 06 F6 | 	mov	arg01, #0
11280     00 96 06 F6 | 	mov	arg03, #0
11284     44 44 B1 FD | 	call	#__system___basic_print_string
11288     00 92 06 F6 | 	mov	arg01, #0
1128c     CC 8C B1 FD | 	call	#__system___getiolock_0622
11290     3D 01 68 FC | 	wrlong	#0, result1
11294     40 AA 06 F1 | 	add	local03, #64
11298     55 93 02 F6 | 	mov	arg01, local03
1129c     18 17 B1 FD | 	call	#_Hg010b_4_spin2_setcursorx
112a0     00 AB 56 F2 | 	cmps	local03, #256 wc
112a4     30 00 90 CD |  if_b	jmp	#LR__1450
112a8     00 AA 06 F6 | 	mov	local03, #0
112ac     00 92 06 F6 | 	mov	arg01, #0
112b0     A8 8C B1 FD | 	call	#__system___getiolock_0622
112b4     3D 93 02 F6 | 	mov	arg01, result1
112b8     1C 37 B1 FD | 	call	#__system___lockmem
112bc     00 92 06 F6 | 	mov	arg01, #0
112c0     0A 94 06 F6 | 	mov	arg02, #10
112c4     00 96 06 F6 | 	mov	arg03, #0
112c8     A8 43 B1 FD | 	call	#__system___basic_print_char
112cc     00 92 06 F6 | 	mov	arg01, #0
112d0     88 8C B1 FD | 	call	#__system___getiolock_0622
112d4     3D 01 68 FC | 	wrlong	#0, result1
112d8                 | LR__1450
112d8     01 AC 06 F1 | 	add	local04, #1
112dc     68 FF 9F FD | 	jmp	#LR__1449
112e0                 | LR__1451
112e0                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
112e0     80 B4 56 F2 | 	cmps	local08, #128 wc
112e4     44 00 90 CD |  if_b	jmp	#LR__1452
112e8     00 92 06 F6 | 	mov	arg01, #0
112ec     6C 8C B1 FD | 	call	#__system___getiolock_0622
112f0     3D 93 02 F6 | 	mov	arg01, result1
112f4     E0 36 B1 FD | 	call	#__system___lockmem
112f8     97 01 00 FF 
112fc     92 94 06 F6 | 	mov	arg02, ##@LR__6002
11300     00 92 06 F6 | 	mov	arg01, #0
11304     00 96 06 F6 | 	mov	arg03, #0
11308     C0 43 B1 FD | 	call	#__system___basic_print_string
1130c     00 92 06 F6 | 	mov	arg01, #0
11310     0A 94 06 F6 | 	mov	arg02, #10
11314     00 96 06 F6 | 	mov	arg03, #0
11318     58 43 B1 FD | 	call	#__system___basic_print_char
1131c     00 92 06 F6 | 	mov	arg01, #0
11320     38 8C B1 FD | 	call	#__system___getiolock_0622
11324     3D 01 68 FC | 	wrlong	#0, result1
11328     00 A6 06 F6 | 	mov	local01, #0
1132c                 | LR__1452
1132c                 | ' print
1132c     00 92 06 F6 | 	mov	arg01, #0
11330     28 8C B1 FD | 	call	#__system___getiolock_0622
11334     3D 93 02 F6 | 	mov	arg01, result1
11338     9C 36 B1 FD | 	call	#__system___lockmem
1133c     00 92 06 F6 | 	mov	arg01, #0
11340     0A 94 06 F6 | 	mov	arg02, #10
11344     00 96 06 F6 | 	mov	arg03, #0
11348     28 43 B1 FD | 	call	#__system___basic_print_char
1134c     00 92 06 F6 | 	mov	arg01, #0
11350     08 8C B1 FD | 	call	#__system___getiolock_0622
11354     3D 01 68 FC | 	wrlong	#0, result1
11358     00 B0 06 F6 | 	mov	local06, #0
1135c     00 B4 06 F6 | 	mov	local08, #0
11360     00 AA 06 F6 | 	mov	local03, #0
11364                 | ' return cursor_y
11364     3E 64 06 F1 | 	add	objptr, #62
11368     32 C9 C2 FA | 	rdbyte	local18, objptr
1136c     3E 64 86 F1 | 	sub	objptr, #62
11370     97 01 00 FF 
11374     C4 92 06 F6 | 	mov	arg01, ##@LR__6003
11378     21 94 06 F6 | 	mov	arg02, #33
1137c     94 8D B1 FD | 	call	#__system___basic_dir
11380     3D B3 02 F6 | 	mov	local07, result1
11384                 | ' n=0
11384                 | ' px=0: py=v.getcursory()
11384                 | ' filename = dir$("*", fbNormal )   
11384                 | ' do while filename <> "" andalso filename <> nil andalso n<128
11384                 | LR__1453
11384     97 01 00 FF 
11388     C6 B6 06 F6 | 	mov	local09, ##@LR__6004
1138c     59 93 02 F6 | 	mov	arg01, local07
11390     5B 95 02 F6 | 	mov	arg02, local09
11394     68 36 B1 FD | 	call	#__system___string_cmp
11398     00 7A 0E F2 | 	cmp	result1, #0 wz
1139c     54 00 90 AD |  if_e	jmp	#LR__1454
113a0     00 B6 06 F6 | 	mov	local09, #0
113a4     59 93 02 F6 | 	mov	arg01, local07
113a8     00 94 06 F6 | 	mov	arg02, #0
113ac     50 36 B1 FD | 	call	#__system___string_cmp
113b0     00 7A 0E F2 | 	cmp	result1, #0 wz
113b4     3C 00 90 AD |  if_e	jmp	#LR__1454
113b8     80 B4 56 F2 | 	cmps	local08, #128 wc
113bc     34 00 90 3D |  if_ae	jmp	#LR__1454
113c0     5A AF 02 F6 | 	mov	local05, local08
113c4     02 AE 66 F0 | 	shl	local05, #2
113c8     E7 B6 02 F6 | 	mov	local09, fp
113cc     1C B6 06 F1 | 	add	local09, #28
113d0     5B AF 02 F1 | 	add	local05, local09
113d4     57 B3 62 FC | 	wrlong	local07, local05
113d8     01 B4 06 F1 | 	add	local08, #1
113dc     00 AE 06 F6 | 	mov	local05, #0
113e0     00 92 06 F6 | 	mov	arg01, #0
113e4     00 94 06 F6 | 	mov	arg02, #0
113e8     28 8D B1 FD | 	call	#__system___basic_dir
113ec     3D B3 02 F6 | 	mov	local07, result1
113f0     90 FF 9F FD | 	jmp	#LR__1453
113f4                 | LR__1454
113f4                 | ' for i =0 to n-1
113f4     00 AC 06 F6 | 	mov	local04, #0
113f8                 | LR__1455
113f8     5A AD 52 F2 | 	cmps	local04, local08 wc
113fc     D8 00 90 3D |  if_ae	jmp	#LR__1459
11400     00 BA 06 F6 | 	mov	local11, #0
11404                 | '   swapped=false
11404                 | '   for j=0 to n-i-2
11404     00 BC 06 F6 | 	mov	local12, #0
11408     5A CB 02 F6 | 	mov	local19, local08
1140c     56 CB 82 F1 | 	sub	local19, local04
11410     01 CA 86 F1 | 	sub	local19, #1
11414                 | LR__1456
11414     65 BD 52 F2 | 	cmps	local12, local19 wc
11418     AC 00 90 3D |  if_ae	jmp	#LR__1458
1141c                 | '     if filelist(j) > filelist(j+1) then
1141c     5E B7 02 F6 | 	mov	local09, local12
11420     02 B6 66 F0 | 	shl	local09, #2
11424     1C CE 05 F1 | 	add	fp, #28
11428     E7 B6 02 F1 | 	add	local09, fp
1142c     5B 93 02 FB | 	rdlong	arg01, local09
11430     5E B7 02 F6 | 	mov	local09, local12
11434     01 B6 06 F1 | 	add	local09, #1
11438     5B B1 02 F6 | 	mov	local06, local09
1143c     02 B0 66 F0 | 	shl	local06, #2
11440     E7 A6 02 F6 | 	mov	local01, fp
11444     E7 B0 02 F1 | 	add	local06, fp
11448     58 AF 02 FB | 	rdlong	local05, local06
1144c     57 95 02 F6 | 	mov	arg02, local05
11450     1C CE 85 F1 | 	sub	fp, #28
11454     A8 35 B1 FD | 	call	#__system___string_cmp
11458     01 7A 56 F2 | 	cmps	result1, #1 wc
1145c     60 00 90 CD |  if_b	jmp	#LR__1457
11460     5E B7 02 F6 | 	mov	local09, local12
11464     01 B6 06 F1 | 	add	local09, #1
11468     02 B6 66 F0 | 	shl	local09, #2
1146c     1C CE 05 F1 | 	add	fp, #28
11470     E7 B6 02 F1 | 	add	local09, fp
11474     5B C5 02 FB | 	rdlong	local16, local09
11478     5E B1 02 F6 | 	mov	local06, local12
1147c     02 B0 66 F0 | 	shl	local06, #2
11480     E7 B0 02 F1 | 	add	local06, fp
11484     58 AF 02 FB | 	rdlong	local05, local06
11488     5E B7 02 F6 | 	mov	local09, local12
1148c     5B B1 02 F6 | 	mov	local06, local09
11490     02 B0 66 F0 | 	shl	local06, #2
11494     E7 A6 02 F6 | 	mov	local01, fp
11498     E7 B0 02 F1 | 	add	local06, fp
1149c     58 C5 62 FC | 	wrlong	local16, local06
114a0     5E C1 02 F6 | 	mov	local14, local12
114a4     01 C0 06 F1 | 	add	local14, #1
114a8     02 C0 66 F0 | 	shl	local14, #2
114ac     E7 C2 02 F6 | 	mov	local15, fp
114b0     E7 C0 02 F1 | 	add	local14, fp
114b4     60 AF 62 FC | 	wrlong	local05, local14
114b8     01 BA 66 F6 | 	neg	local11, #1
114bc     1C CE 85 F1 | 	sub	fp, #28
114c0                 | LR__1457
114c0     01 BC 06 F1 | 	add	local12, #1
114c4     4C FF 9F FD | 	jmp	#LR__1456
114c8                 | LR__1458
114c8                 | ' if not swapped then exit for
114c8     5D C5 22 F6 | 	not	local16, local11
114cc     00 C4 0E F2 | 	cmp	local16, #0 wz
114d0     01 AC 06 A1 |  if_e	add	local04, #1
114d4     20 FF 9F AD |  if_e	jmp	#LR__1455
114d8                 | LR__1459
114d8                 | ' for i=0 to n-1
114d8     00 AC 06 F6 | 	mov	local04, #0
114dc                 | LR__1460
114dc     5A AD 52 F2 | 	cmps	local04, local08 wc
114e0     8C 00 90 3D |  if_ae	jmp	#LR__1462
114e4                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
114e4     00 92 06 F6 | 	mov	arg01, #0
114e8     70 8A B1 FD | 	call	#__system___getiolock_0622
114ec     3D 93 02 F6 | 	mov	arg01, result1
114f0     E4 34 B1 FD | 	call	#__system___lockmem
114f4     56 A9 02 F6 | 	mov	local02, local04
114f8     02 A8 66 F0 | 	shl	local02, #2
114fc     E7 C0 02 F6 | 	mov	local14, fp
11500     1C C0 06 F1 | 	add	local14, #28
11504     60 A9 02 F1 | 	add	local02, local14
11508     54 95 02 FB | 	rdlong	arg02, local02
1150c     00 92 06 F6 | 	mov	arg01, #0
11510     00 96 06 F6 | 	mov	arg03, #0
11514     B4 41 B1 FD | 	call	#__system___basic_print_string
11518     00 92 06 F6 | 	mov	arg01, #0
1151c     3C 8A B1 FD | 	call	#__system___getiolock_0622
11520     3D 01 68 FC | 	wrlong	#0, result1
11524     40 AA 06 F1 | 	add	local03, #64
11528     55 93 02 F6 | 	mov	arg01, local03
1152c     88 14 B1 FD | 	call	#_Hg010b_4_spin2_setcursorx
11530     00 AB 56 F2 | 	cmps	local03, #256 wc
11534     30 00 90 CD |  if_b	jmp	#LR__1461
11538     00 AA 06 F6 | 	mov	local03, #0
1153c     00 92 06 F6 | 	mov	arg01, #0
11540     18 8A B1 FD | 	call	#__system___getiolock_0622
11544     3D 93 02 F6 | 	mov	arg01, result1
11548     8C 34 B1 FD | 	call	#__system___lockmem
1154c     00 92 06 F6 | 	mov	arg01, #0
11550     0A 94 06 F6 | 	mov	arg02, #10
11554     00 96 06 F6 | 	mov	arg03, #0
11558     18 41 B1 FD | 	call	#__system___basic_print_char
1155c     00 92 06 F6 | 	mov	arg01, #0
11560     F8 89 B1 FD | 	call	#__system___getiolock_0622
11564     3D 01 68 FC | 	wrlong	#0, result1
11568                 | LR__1461
11568     01 AC 06 F1 | 	add	local04, #1
1156c     6C FF 9F FD | 	jmp	#LR__1460
11570                 | LR__1462
11570                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
11570     80 B4 56 F2 | 	cmps	local08, #128 wc
11574     40 00 90 CD |  if_b	jmp	#LR__1463
11578     00 92 06 F6 | 	mov	arg01, #0
1157c     DC 89 B1 FD | 	call	#__system___getiolock_0622
11580     3D 93 02 F6 | 	mov	arg01, result1
11584     50 34 B1 FD | 	call	#__system___lockmem
11588     97 01 00 FF 
1158c     C7 94 06 F6 | 	mov	arg02, ##@LR__6005
11590     00 92 06 F6 | 	mov	arg01, #0
11594     00 96 06 F6 | 	mov	arg03, #0
11598     30 41 B1 FD | 	call	#__system___basic_print_string
1159c     00 92 06 F6 | 	mov	arg01, #0
115a0     0A 94 06 F6 | 	mov	arg02, #10
115a4     00 96 06 F6 | 	mov	arg03, #0
115a8     C8 40 B1 FD | 	call	#__system___basic_print_char
115ac     00 92 06 F6 | 	mov	arg01, #0
115b0     A8 89 B1 FD | 	call	#__system___getiolock_0622
115b4     3D 01 68 FC | 	wrlong	#0, result1
115b8                 | LR__1463
115b8                 | ' print
115b8     00 92 06 F6 | 	mov	arg01, #0
115bc     9C 89 B1 FD | 	call	#__system___getiolock_0622
115c0     3D 93 02 F6 | 	mov	arg01, result1
115c4     10 34 B1 FD | 	call	#__system___lockmem
115c8     00 92 06 F6 | 	mov	arg01, #0
115cc     0A 94 06 F6 | 	mov	arg02, #10
115d0     00 96 06 F6 | 	mov	arg03, #0
115d4     9C 40 B1 FD | 	call	#__system___basic_print_char
115d8     00 92 06 F6 | 	mov	arg01, #0
115dc     7C 89 B1 FD | 	call	#__system___getiolock_0622
115e0     3D 01 68 FC | 	wrlong	#0, result1
115e4     E7 F0 03 F6 | 	mov	ptra, fp
115e8     F2 00 A0 FD | 	call	#popregs_
115ec                 | _do_dir_ret
115ec     2D 00 64 FD | 	ret
115f0                 | 
115f0                 | ' 
115f0                 | ' '-------------------- dpeek
115f0                 | ' 
115f0                 | ' sub do_dpeek
115f0                 | _do_dpeek
115f0     01 CA 05 F6 | 	mov	COUNT_, #1
115f4     E8 00 A0 FD | 	call	#pushregs_
115f8     14 F0 07 F1 | 	add	ptra, #20
115fc     70 C0 BF FD | 	call	#_pop
11600     E7 7A 62 FC | 	wrlong	result1, fp
11604     04 CE 05 F1 | 	add	fp, #4
11608     E7 7C 62 FC | 	wrlong	result2, fp
1160c     04 CE 05 F1 | 	add	fp, #4
11610     E7 7E 62 FC | 	wrlong	result3, fp
11614     08 CE 85 F1 | 	sub	fp, #8
11618     E7 92 02 F6 | 	mov	arg01, fp
1161c     2C C2 BF FD | 	call	#_converttoint
11620     3D 93 02 F6 | 	mov	arg01, result1
11624                 | ' 
11624                 | ' t1=pop()
11624                 | ' a=converttoint(t1)
11624                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
11624     00 04 00 FF 
11628     00 92 16 F2 | 	cmp	arg01, ##524288 wc
1162c     49 A7 E2 CA |  if_b	rdword	local01, arg01
11630     08 00 90 CD |  if_b	jmp	#LR__1470
11634     A0 F9 B0 FD | 	call	#_psdpeek
11638     3D A7 02 F6 | 	mov	local01, result1
1163c                 | LR__1470
1163c     08 CE 05 F1 | 	add	fp, #8
11640     E7 3A 68 FC | 	wrlong	#29, fp
11644     08 CE 85 F1 | 	sub	fp, #8
11648     E7 A6 62 FC | 	wrlong	local01, fp
1164c     E7 92 02 F6 | 	mov	arg01, fp
11650     AC C0 BF FD | 	call	#_push
11654     E7 F0 03 F6 | 	mov	ptra, fp
11658     F2 00 A0 FD | 	call	#popregs_
1165c                 | _do_dpeek_ret
1165c     2D 00 64 FD | 	ret
11660                 | 
11660                 | ' 
11660                 | ' '-------------------- dpoke
11660                 | ' 
11660                 | ' sub do_dpoke
11660                 | _do_dpoke
11660     02 CA 05 F6 | 	mov	COUNT_, #2
11664     E8 00 A0 FD | 	call	#pushregs_
11668     20 F0 07 F1 | 	add	ptra, #32
1166c     00 C0 BF FD | 	call	#_pop
11670     3D 95 02 F6 | 	mov	arg02, result1
11674     3E 93 02 F6 | 	mov	arg01, result2
11678     3F A7 02 F6 | 	mov	local01, result3
1167c     E7 94 62 FC | 	wrlong	arg02, fp
11680     04 CE 05 F1 | 	add	fp, #4
11684     E7 92 62 FC | 	wrlong	arg01, fp
11688     04 CE 05 F1 | 	add	fp, #4
1168c     E7 A6 62 FC | 	wrlong	local01, fp
11690     08 CE 85 F1 | 	sub	fp, #8
11694     D8 BF BF FD | 	call	#_pop
11698     3F A7 02 F6 | 	mov	local01, result3
1169c     0C CE 05 F1 | 	add	fp, #12
116a0     E7 7A 62 FC | 	wrlong	result1, fp
116a4     04 CE 05 F1 | 	add	fp, #4
116a8     E7 7C 62 FC | 	wrlong	result2, fp
116ac     04 CE 05 F1 | 	add	fp, #4
116b0     E7 A6 62 FC | 	wrlong	local01, fp
116b4     08 CE 85 F1 | 	sub	fp, #8
116b8     E7 92 02 F6 | 	mov	arg01, fp
116bc     0C CE 85 F1 | 	sub	fp, #12
116c0     88 C1 BF FD | 	call	#_converttoint
116c4     3D A7 02 F6 | 	mov	local01, result1
116c8     E7 92 02 F6 | 	mov	arg01, fp
116cc     7C C1 BF FD | 	call	#_converttoint
116d0     3D A9 02 F6 | 	mov	local02, result1
116d4                 | ' 
116d4                 | ' t1=pop() 'value
116d4                 | ' t2=pop() 
116d4                 | ' a=converttoint(t2) : v=converttoint(t1)
116d4                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
116d4     00 04 00 FF 
116d8     00 A6 16 F2 | 	cmp	local01, ##524288 wc
116dc     53 A9 52 CC |  if_b	wrword	local02, local01
116e0     53 93 02 36 |  if_ae	mov	arg01, local01
116e4     54 95 02 36 |  if_ae	mov	arg02, local02
116e8     CC F7 B0 3D |  if_ae	call	#_psdpoke
116ec     E7 F0 03 F6 | 	mov	ptra, fp
116f0     F2 00 A0 FD | 	call	#popregs_
116f4                 | _do_dpoke_ret
116f4     2D 00 64 FD | 	ret
116f8                 | 
116f8                 | ' '-------------------- draw
116f8                 | ' 
116f8                 | ' sub do_draw
116f8                 | _do_draw
116f8     02 CA 05 F6 | 	mov	COUNT_, #2
116fc     E8 00 A0 FD | 	call	#pushregs_
11700     20 F0 07 F1 | 	add	ptra, #32
11704     68 BF BF FD | 	call	#_pop
11708     3D 99 02 F6 | 	mov	arg04, result1
1170c     3E 97 02 F6 | 	mov	arg03, result2
11710     3F 9B 02 F6 | 	mov	arg05, result3
11714     0C CE 05 F1 | 	add	fp, #12
11718     E7 98 62 FC | 	wrlong	arg04, fp
1171c     04 CE 05 F1 | 	add	fp, #4
11720     E7 96 62 FC | 	wrlong	arg03, fp
11724     04 CE 05 F1 | 	add	fp, #4
11728     E7 9A 62 FC | 	wrlong	arg05, fp
1172c     14 CE 85 F1 | 	sub	fp, #20
11730     3C BF BF FD | 	call	#_pop
11734     3F 99 02 F6 | 	mov	arg04, result3
11738     E7 7A 62 FC | 	wrlong	result1, fp
1173c     04 CE 05 F1 | 	add	fp, #4
11740     E7 7C 62 FC | 	wrlong	result2, fp
11744     04 CE 05 F1 | 	add	fp, #4
11748     E7 98 62 FC | 	wrlong	arg04, fp
1174c     08 CE 85 F1 | 	sub	fp, #8
11750     E7 92 02 F6 | 	mov	arg01, fp
11754     F4 C0 BF FD | 	call	#_converttoint
11758     3D A7 02 F6 | 	mov	local01, result1
1175c     E7 92 02 F6 | 	mov	arg01, fp
11760     0C 92 06 F1 | 	add	arg01, #12
11764     E4 C0 BF FD | 	call	#_converttoint
11768     3D A9 02 F6 | 	mov	local02, result1
1176c     38 00 00 FF 
11770     D0 65 06 F1 | 	add	objptr, ##29136
11774     32 93 02 FB | 	rdlong	arg01, objptr
11778     04 64 06 F1 | 	add	objptr, #4
1177c     32 95 02 FB | 	rdlong	arg02, objptr
11780     08 64 86 F1 | 	sub	objptr, #8
11784     32 9B 02 FB | 	rdlong	arg05, objptr
11788     38 00 00 FF 
1178c     CC 65 86 F1 | 	sub	objptr, ##29132
11790     53 97 02 F6 | 	mov	arg03, local01
11794     54 99 02 F6 | 	mov	arg04, local02
11798     80 08 B1 FD | 	call	#_Hg010b_4_spin2_draw
1179c     38 00 00 FF 
117a0     D0 65 06 F1 | 	add	objptr, ##29136
117a4     32 A7 62 FC | 	wrlong	local01, objptr
117a8     04 64 06 F1 | 	add	objptr, #4
117ac     32 A9 62 FC | 	wrlong	local02, objptr
117b0     38 00 00 FF 
117b4     D4 65 86 F1 | 	sub	objptr, ##29140
117b8     E7 F0 03 F6 | 	mov	ptra, fp
117bc     F2 00 A0 FD | 	call	#popregs_
117c0                 | _do_draw_ret
117c0     2D 00 64 FD | 	ret
117c4                 | 
117c4                 | ' 
117c4                 | ' '-------------------- else
117c4                 | ' 
117c4                 | ' sub do_else
117c4                 | _do_else
117c4     4C 00 00 FF 
117c8     20 64 06 F1 | 	add	objptr, ##38944
117cc     32 81 02 FB | 	rdlong	_var01, objptr
117d0     01 80 86 F1 | 	sub	_var01, #1
117d4     04 64 06 F1 | 	add	objptr, #4
117d8     32 81 62 FC | 	wrlong	_var01, objptr
117dc     4C 00 00 FF 
117e0     24 64 86 F1 | 	sub	objptr, ##38948
117e4                 | _do_else_ret
117e4     2D 00 64 FD | 	ret
117e8                 | 
117e8                 | ' 
117e8                 | ' '-------------------- end
117e8                 | ' 
117e8                 | ' sub do_end
117e8                 | _do_end
117e8     4C 00 00 FF 
117ec     20 64 06 F1 | 	add	objptr, ##38944
117f0     32 81 02 FB | 	rdlong	_var01, objptr
117f4     01 80 86 F1 | 	sub	_var01, #1
117f8     04 64 06 F1 | 	add	objptr, #4
117fc     32 81 62 FC | 	wrlong	_var01, objptr
11800     06 00 00 FF 
11804     38 64 06 F1 | 	add	objptr, ##3128
11808     FF FF BF FF 
1180c     32 FF 6B FC | 	wrlong	##2147483647, objptr
11810     52 00 00 FF 
11814     5C 64 86 F1 | 	sub	objptr, ##42076
11818                 | _do_end_ret
11818     2D 00 64 FD | 	ret
1181c                 | 
1181c                 | ' 
1181c                 | ' '-------------------- enter
1181c                 | ' 
1181c                 | ' sub do_enter
1181c                 | _do_enter
1181c     02 00 00 FF 
11820     D2 92 06 F6 | 	mov	arg01, ##1234
11824     A4 2D B0 FD | 	call	#_do_load
11828                 | _do_enter_ret
11828     2D 00 64 FD | 	ret
1182c                 | 
1182c                 | ' 
1182c                 | ' '------------------- error processing
1182c                 | ' 
1182c                 | ' sub do_error
1182c                 | _do_error
1182c     01 CA 05 F6 | 	mov	COUNT_, #1
11830     E8 00 A0 FD | 	call	#pushregs_
11834     4C 00 00 FF 
11838     24 64 06 F1 | 	add	objptr, ##38948
1183c     32 99 02 FB | 	rdlong	arg04, objptr
11840     4C 97 02 F6 | 	mov	arg03, arg04
11844     01 96 66 F0 | 	shl	arg03, #1
11848     4C 97 02 F1 | 	add	arg03, arg04
1184c     02 96 66 F0 | 	shl	arg03, #2
11850     03 00 00 FF 
11854     04 64 86 F1 | 	sub	objptr, ##1540
11858     32 97 02 F1 | 	add	arg03, objptr
1185c     4B A7 02 FB | 	rdlong	local01, arg03
11860                 | ' r=compiledline(lineptr_e).result.uresult
11860                 | ' print "Error ";r;": ";errors$(r)
11860     00 92 06 F6 | 	mov	arg01, #0
11864     49 00 00 FF 
11868     20 64 86 F1 | 	sub	objptr, ##37408
1186c     EC 86 B1 FD | 	call	#__system___getiolock_0622
11870     3D 93 02 F6 | 	mov	arg01, result1
11874     60 31 B1 FD | 	call	#__system___lockmem
11878     97 01 00 FF 
1187c     F9 94 06 F6 | 	mov	arg02, ##@LR__6006
11880     00 92 06 F6 | 	mov	arg01, #0
11884     00 96 06 F6 | 	mov	arg03, #0
11888     40 3E B1 FD | 	call	#__system___basic_print_string
1188c     00 92 06 F6 | 	mov	arg01, #0
11890     53 95 02 F6 | 	mov	arg02, local01
11894     00 96 06 F6 | 	mov	arg03, #0
11898     0A 98 06 F6 | 	mov	arg04, #10
1189c     B0 3E B1 FD | 	call	#__system___basic_print_unsigned
118a0     97 01 00 FF 
118a4     00 95 06 F6 | 	mov	arg02, ##@LR__6007
118a8     00 92 06 F6 | 	mov	arg01, #0
118ac     00 96 06 F6 | 	mov	arg03, #0
118b0     18 3E B1 FD | 	call	#__system___basic_print_string
118b4     02 A6 66 F0 | 	shl	local01, #2
118b8     32 99 02 F6 | 	mov	arg04, objptr
118bc     47 00 00 FF 
118c0     20 98 06 F1 | 	add	arg04, ##36384
118c4     4C A7 02 F1 | 	add	local01, arg04
118c8     53 95 02 FB | 	rdlong	arg02, local01
118cc     00 92 06 F6 | 	mov	arg01, #0
118d0     00 96 06 F6 | 	mov	arg03, #0
118d4     F4 3D B1 FD | 	call	#__system___basic_print_string
118d8     00 92 06 F6 | 	mov	arg01, #0
118dc     0A 94 06 F6 | 	mov	arg02, #10
118e0     00 96 06 F6 | 	mov	arg03, #0
118e4     8C 3D B1 FD | 	call	#__system___basic_print_char
118e8     00 92 06 F6 | 	mov	arg01, #0
118ec     6C 86 B1 FD | 	call	#__system___getiolock_0622
118f0     3D 01 68 FC | 	wrlong	#0, result1
118f4     E7 F0 03 F6 | 	mov	ptra, fp
118f8     F2 00 A0 FD | 	call	#popregs_
118fc                 | _do_error_ret
118fc     2D 00 64 FD | 	ret
11900                 | 
11900                 | ' 
11900                 | ' '-------------------- fcircle
11900                 | ' 
11900                 | ' sub do_fcircle
11900                 | _do_fcircle
11900     02 CA 05 F6 | 	mov	COUNT_, #2
11904     E8 00 A0 FD | 	call	#pushregs_
11908     24 F0 07 F1 | 	add	ptra, #36
1190c     60 BD BF FD | 	call	#_pop
11910     3D 95 02 F6 | 	mov	arg02, result1
11914     3E 99 02 F6 | 	mov	arg04, result2
11918     3F 97 02 F6 | 	mov	arg03, result3
1191c     18 CE 05 F1 | 	add	fp, #24
11920     E7 94 62 FC | 	wrlong	arg02, fp
11924     04 CE 05 F1 | 	add	fp, #4
11928     E7 98 62 FC | 	wrlong	arg04, fp
1192c     04 CE 05 F1 | 	add	fp, #4
11930     E7 96 62 FC | 	wrlong	arg03, fp
11934     20 CE 85 F1 | 	sub	fp, #32
11938     34 BD BF FD | 	call	#_pop
1193c     3D 95 02 F6 | 	mov	arg02, result1
11940     3E 99 02 F6 | 	mov	arg04, result2
11944     3F 97 02 F6 | 	mov	arg03, result3
11948     0C CE 05 F1 | 	add	fp, #12
1194c     E7 94 62 FC | 	wrlong	arg02, fp
11950     04 CE 05 F1 | 	add	fp, #4
11954     E7 98 62 FC | 	wrlong	arg04, fp
11958     04 CE 05 F1 | 	add	fp, #4
1195c     E7 96 62 FC | 	wrlong	arg03, fp
11960     14 CE 85 F1 | 	sub	fp, #20
11964     08 BD BF FD | 	call	#_pop
11968     3F 95 02 F6 | 	mov	arg02, result3
1196c     E7 7A 62 FC | 	wrlong	result1, fp
11970     04 CE 05 F1 | 	add	fp, #4
11974     E7 7C 62 FC | 	wrlong	result2, fp
11978     04 CE 05 F1 | 	add	fp, #4
1197c     E7 94 62 FC | 	wrlong	arg02, fp
11980     08 CE 85 F1 | 	sub	fp, #8
11984     E7 92 02 F6 | 	mov	arg01, fp
11988     C0 BE BF FD | 	call	#_converttoint
1198c     3D A7 02 F6 | 	mov	local01, result1
11990     E7 92 02 F6 | 	mov	arg01, fp
11994     0C 92 06 F1 | 	add	arg01, #12
11998     B0 BE BF FD | 	call	#_converttoint
1199c     3D A9 02 F6 | 	mov	local02, result1
119a0     E7 92 02 F6 | 	mov	arg01, fp
119a4     18 92 06 F1 | 	add	arg01, #24
119a8     A0 BE BF FD | 	call	#_converttoint
119ac     3D 97 02 F6 | 	mov	arg03, result1
119b0     38 00 00 FF 
119b4     CC 65 06 F1 | 	add	objptr, ##29132
119b8     32 99 02 FB | 	rdlong	arg04, objptr
119bc     38 00 00 FF 
119c0     CC 65 86 F1 | 	sub	objptr, ##29132
119c4     53 93 02 F6 | 	mov	arg01, local01
119c8     54 95 02 F6 | 	mov	arg02, local02
119cc     D0 0A B1 FD | 	call	#_Hg010b_4_spin2_fcircle
119d0     E7 F0 03 F6 | 	mov	ptra, fp
119d4     F2 00 A0 FD | 	call	#popregs_
119d8                 | _do_fcircle_ret
119d8     2D 00 64 FD | 	ret
119dc                 | 
119dc                 | ' 
119dc                 | ' '-------------------- fill
119dc                 | ' 
119dc                 | ' sub do_fill
119dc                 | _do_fill
119dc     03 CA 05 F6 | 	mov	COUNT_, #3
119e0     E8 00 A0 FD | 	call	#pushregs_
119e4     30 F0 07 F1 | 	add	ptra, #48
119e8     84 BC BF FD | 	call	#_pop
119ec     3D 97 02 F6 | 	mov	arg03, result1
119f0     3E 95 02 F6 | 	mov	arg02, result2
119f4     3F 99 02 F6 | 	mov	arg04, result3
119f8     24 CE 05 F1 | 	add	fp, #36
119fc     E7 96 62 FC | 	wrlong	arg03, fp
11a00     04 CE 05 F1 | 	add	fp, #4
11a04     E7 94 62 FC | 	wrlong	arg02, fp
11a08     04 CE 05 F1 | 	add	fp, #4
11a0c     E7 98 62 FC | 	wrlong	arg04, fp
11a10     2C CE 85 F1 | 	sub	fp, #44
11a14     58 BC BF FD | 	call	#_pop
11a18     3D 97 02 F6 | 	mov	arg03, result1
11a1c     3E 95 02 F6 | 	mov	arg02, result2
11a20     3F 99 02 F6 | 	mov	arg04, result3
11a24     18 CE 05 F1 | 	add	fp, #24
11a28     E7 96 62 FC | 	wrlong	arg03, fp
11a2c     04 CE 05 F1 | 	add	fp, #4
11a30     E7 94 62 FC | 	wrlong	arg02, fp
11a34     04 CE 05 F1 | 	add	fp, #4
11a38     E7 98 62 FC | 	wrlong	arg04, fp
11a3c     20 CE 85 F1 | 	sub	fp, #32
11a40     2C BC BF FD | 	call	#_pop
11a44     3D 97 02 F6 | 	mov	arg03, result1
11a48     3E 95 02 F6 | 	mov	arg02, result2
11a4c     3F 99 02 F6 | 	mov	arg04, result3
11a50     0C CE 05 F1 | 	add	fp, #12
11a54     E7 96 62 FC | 	wrlong	arg03, fp
11a58     04 CE 05 F1 | 	add	fp, #4
11a5c     E7 94 62 FC | 	wrlong	arg02, fp
11a60     04 CE 05 F1 | 	add	fp, #4
11a64     E7 98 62 FC | 	wrlong	arg04, fp
11a68     14 CE 85 F1 | 	sub	fp, #20
11a6c     00 BC BF FD | 	call	#_pop
11a70     3F 97 02 F6 | 	mov	arg03, result3
11a74     E7 7A 62 FC | 	wrlong	result1, fp
11a78     04 CE 05 F1 | 	add	fp, #4
11a7c     E7 7C 62 FC | 	wrlong	result2, fp
11a80     04 CE 05 F1 | 	add	fp, #4
11a84     E7 96 62 FC | 	wrlong	arg03, fp
11a88     08 CE 85 F1 | 	sub	fp, #8
11a8c     E7 92 02 F6 | 	mov	arg01, fp
11a90     B8 BD BF FD | 	call	#_converttoint
11a94     3D A7 02 F6 | 	mov	local01, result1
11a98     E7 92 02 F6 | 	mov	arg01, fp
11a9c     0C 92 06 F1 | 	add	arg01, #12
11aa0     A8 BD BF FD | 	call	#_converttoint
11aa4     3D A9 02 F6 | 	mov	local02, result1
11aa8     E7 92 02 F6 | 	mov	arg01, fp
11aac     18 92 06 F1 | 	add	arg01, #24
11ab0     98 BD BF FD | 	call	#_converttoint
11ab4     3D AB 02 F6 | 	mov	local03, result1
11ab8     E7 92 02 F6 | 	mov	arg01, fp
11abc     24 92 06 F1 | 	add	arg01, #36
11ac0     88 BD BF FD | 	call	#_converttoint
11ac4     3D 99 02 F6 | 	mov	arg04, result1
11ac8     53 93 02 F6 | 	mov	arg01, local01
11acc     54 95 02 F6 | 	mov	arg02, local02
11ad0     55 97 02 F6 | 	mov	arg03, local03
11ad4     34 07 B1 FD | 	call	#_Hg010b_4_spin2_fill
11ad8     E7 F0 03 F6 | 	mov	ptra, fp
11adc     F2 00 A0 FD | 	call	#popregs_
11ae0                 | _do_fill_ret
11ae0     2D 00 64 FD | 	ret
11ae4                 | 
11ae4                 | ' 
11ae4                 | ' '-------------------- findfirst
11ae4                 | ' 
11ae4                 | ' sub do_findfirst
11ae4                 | _do_findfirst
11ae4     04 CA 05 F6 | 	mov	COUNT_, #4
11ae8     E8 00 A0 FD | 	call	#pushregs_
11aec     1C F0 07 F1 | 	add	ptra, #28
11af0     4C 00 00 FF 
11af4     24 64 06 F1 | 	add	objptr, ##38948
11af8     32 97 02 FB | 	rdlong	arg03, objptr
11afc     4B 95 02 F6 | 	mov	arg02, arg03
11b00     01 94 66 F0 | 	shl	arg02, #1
11b04     4B 95 02 F1 | 	add	arg02, arg03
11b08     02 94 66 F0 | 	shl	arg02, #2
11b0c     03 00 00 FF 
11b10     04 64 86 F1 | 	sub	objptr, ##1540
11b14     32 95 02 F1 | 	add	arg02, objptr
11b18     4A A7 02 FB | 	rdlong	local01, arg02
11b1c                 | ' 
11b1c                 | ' numpar=compiledline(lineptr_e).result.uresult
11b1c                 | ' if numpar=2 then
11b1c     02 A6 0E F2 | 	cmp	local01, #2 wz
11b20     49 00 00 FF 
11b24     20 64 86 F1 | 	sub	objptr, ##37408
11b28     48 01 90 5D |  if_ne	jmp	#LR__1484
11b2c     40 BB BF FD | 	call	#_pop
11b30     3F 97 02 F6 | 	mov	arg03, result3
11b34     08 CE 05 F1 | 	add	fp, #8
11b38     E7 7A 62 FC | 	wrlong	result1, fp
11b3c     04 CE 05 F1 | 	add	fp, #4
11b40     E7 7C 62 FC | 	wrlong	result2, fp
11b44     04 CE 05 F1 | 	add	fp, #4
11b48     E7 96 62 FC | 	wrlong	arg03, fp
11b4c                 | '   t1=pop()
11b4c                 | '   if t1.result_type=result_string2 then 
11b4c     10 CE 85 F1 | 	sub	fp, #16
11b50     2B 96 0E F2 | 	cmp	arg03, #43 wz
11b54     18 00 90 5D |  if_ne	jmp	#LR__1480
11b58     08 CE 05 F1 | 	add	fp, #8
11b5c     E7 92 02 FB | 	rdlong	arg01, fp
11b60     08 CE 85 F1 | 	sub	fp, #8
11b64     78 BC BF FD | 	call	#_convertstring
11b68     3D A9 02 F6 | 	mov	local02, result1
11b6c     60 00 90 FD | 	jmp	#LR__1482
11b70                 | LR__1480
11b70     10 CE 05 F1 | 	add	fp, #16
11b74     E7 96 02 FB | 	rdlong	arg03, fp
11b78     10 CE 85 F1 | 	sub	fp, #16
11b7c     1F 96 0E F2 | 	cmp	arg03, #31 wz
11b80     08 CE 05 A1 |  if_e	add	fp, #8
11b84     E7 A8 02 AB |  if_e	rdlong	local02, fp
11b88     08 CE 85 A1 |  if_e	sub	fp, #8
11b8c     40 00 90 AD |  if_e	jmp	#LR__1481
11b90                 | '     print "findfirst: "; : printerror(30) : return  
11b90     00 92 06 F6 | 	mov	arg01, #0
11b94     C4 83 B1 FD | 	call	#__system___getiolock_0622
11b98     3D 93 02 F6 | 	mov	arg01, result1
11b9c     38 2E B1 FD | 	call	#__system___lockmem
11ba0     97 01 00 FF 
11ba4     03 95 06 F6 | 	mov	arg02, ##@LR__6008
11ba8     00 92 06 F6 | 	mov	arg01, #0
11bac     00 96 06 F6 | 	mov	arg03, #0
11bb0     18 3B B1 FD | 	call	#__system___basic_print_string
11bb4     00 92 06 F6 | 	mov	arg01, #0
11bb8     A0 83 B1 FD | 	call	#__system___getiolock_0622
11bbc     3D 01 68 FC | 	wrlong	#0, result1
11bc0     1E 92 06 F6 | 	mov	arg01, #30
11bc4     00 94 06 F6 | 	mov	arg02, #0
11bc8     08 F1 B0 FD | 	call	#_printerror
11bcc     08 02 90 FD | 	jmp	#LR__1492
11bd0                 | LR__1481
11bd0                 | LR__1482
11bd0     9C BA BF FD | 	call	#_pop
11bd4     3F 97 02 F6 | 	mov	arg03, result3
11bd8     08 CE 05 F1 | 	add	fp, #8
11bdc     E7 7A 62 FC | 	wrlong	result1, fp
11be0     04 CE 05 F1 | 	add	fp, #4
11be4     E7 7C 62 FC | 	wrlong	result2, fp
11be8     04 CE 05 F1 | 	add	fp, #4
11bec     E7 96 62 FC | 	wrlong	arg03, fp
11bf0                 | '   t1=pop()
11bf0                 | '   if t1.result_type=result_string2 then 
11bf0     10 CE 85 F1 | 	sub	fp, #16
11bf4     2B 96 0E F2 | 	cmp	arg03, #43 wz
11bf8     18 00 90 5D |  if_ne	jmp	#LR__1483
11bfc     08 CE 05 F1 | 	add	fp, #8
11c00     E7 92 02 FB | 	rdlong	arg01, fp
11c04     08 CE 85 F1 | 	sub	fp, #8
11c08     D4 BB BF FD | 	call	#_convertstring
11c0c     3D AB 02 F6 | 	mov	local03, result1
11c10     58 01 90 FD | 	jmp	#LR__1490
11c14                 | LR__1483
11c14     10 CE 05 F1 | 	add	fp, #16
11c18     E7 A6 02 FB | 	rdlong	local01, fp
11c1c     10 CE 85 F1 | 	sub	fp, #16
11c20     1F A6 0E F2 | 	cmp	local01, #31 wz
11c24     08 CE 05 A1 |  if_e	add	fp, #8
11c28     E7 AA 02 AB |  if_e	rdlong	local03, fp
11c2c     08 CE 85 A1 |  if_e	sub	fp, #8
11c30     38 01 90 AD |  if_e	jmp	#LR__1490
11c34                 | '     print "findfirst: "; : printerror(30) : return  
11c34     00 92 06 F6 | 	mov	arg01, #0
11c38     20 83 B1 FD | 	call	#__system___getiolock_0622
11c3c     3D 93 02 F6 | 	mov	arg01, result1
11c40     94 2D B1 FD | 	call	#__system___lockmem
11c44     97 01 00 FF 
11c48     0F 95 06 F6 | 	mov	arg02, ##@LR__6009
11c4c     00 92 06 F6 | 	mov	arg01, #0
11c50     00 96 06 F6 | 	mov	arg03, #0
11c54     74 3A B1 FD | 	call	#__system___basic_print_string
11c58     00 92 06 F6 | 	mov	arg01, #0
11c5c     FC 82 B1 FD | 	call	#__system___getiolock_0622
11c60     3D 01 68 FC | 	wrlong	#0, result1
11c64     1E 92 06 F6 | 	mov	arg01, #30
11c68     00 94 06 F6 | 	mov	arg02, #0
11c6c     64 F0 B0 FD | 	call	#_printerror
11c70     64 01 90 FD | 	jmp	#LR__1492
11c74                 | LR__1484
11c74     01 A6 0E F2 | 	cmp	local01, #1 wz
11c78     B0 00 90 5D |  if_ne	jmp	#LR__1488
11c7c     F0 B9 BF FD | 	call	#_pop
11c80     3F 97 02 F6 | 	mov	arg03, result3
11c84     08 CE 05 F1 | 	add	fp, #8
11c88     E7 7A 62 FC | 	wrlong	result1, fp
11c8c     04 CE 05 F1 | 	add	fp, #4
11c90     E7 7C 62 FC | 	wrlong	result2, fp
11c94     04 CE 05 F1 | 	add	fp, #4
11c98     E7 96 62 FC | 	wrlong	arg03, fp
11c9c                 | '   t1=pop()
11c9c                 | '   if t1.result_type=result_string2 then 
11c9c     10 CE 85 F1 | 	sub	fp, #16
11ca0     2B 96 0E F2 | 	cmp	arg03, #43 wz
11ca4     18 00 90 5D |  if_ne	jmp	#LR__1485
11ca8     08 CE 05 F1 | 	add	fp, #8
11cac     E7 92 02 FB | 	rdlong	arg01, fp
11cb0     08 CE 85 F1 | 	sub	fp, #8
11cb4     28 BB BF FD | 	call	#_convertstring
11cb8     3D AB 02 F6 | 	mov	local03, result1
11cbc     60 00 90 FD | 	jmp	#LR__1487
11cc0                 | LR__1485
11cc0     10 CE 05 F1 | 	add	fp, #16
11cc4     E7 96 02 FB | 	rdlong	arg03, fp
11cc8     10 CE 85 F1 | 	sub	fp, #16
11ccc     1F 96 0E F2 | 	cmp	arg03, #31 wz
11cd0     08 CE 05 A1 |  if_e	add	fp, #8
11cd4     E7 AA 02 AB |  if_e	rdlong	local03, fp
11cd8     08 CE 85 A1 |  if_e	sub	fp, #8
11cdc     40 00 90 AD |  if_e	jmp	#LR__1486
11ce0                 | '     print "findfirst: "; : printerror(30) : return  
11ce0     00 92 06 F6 | 	mov	arg01, #0
11ce4     74 82 B1 FD | 	call	#__system___getiolock_0622
11ce8     3D 93 02 F6 | 	mov	arg01, result1
11cec     E8 2C B1 FD | 	call	#__system___lockmem
11cf0     97 01 00 FF 
11cf4     1B 95 06 F6 | 	mov	arg02, ##@LR__6010
11cf8     00 92 06 F6 | 	mov	arg01, #0
11cfc     00 96 06 F6 | 	mov	arg03, #0
11d00     C8 39 B1 FD | 	call	#__system___basic_print_string
11d04     00 92 06 F6 | 	mov	arg01, #0
11d08     50 82 B1 FD | 	call	#__system___getiolock_0622
11d0c     3D 01 68 FC | 	wrlong	#0, result1
11d10     1E 92 06 F6 | 	mov	arg01, #30
11d14     00 94 06 F6 | 	mov	arg02, #0
11d18     B8 EF B0 FD | 	call	#_printerror
11d1c     B8 00 90 FD | 	jmp	#LR__1492
11d20                 | LR__1486
11d20                 | LR__1487
11d20     97 01 00 FF 
11d24     27 A9 06 F6 | 	mov	local02, ##@LR__6011
11d28     40 00 90 FD | 	jmp	#LR__1489
11d2c                 | LR__1488
11d2c                 | '   print "findfirst: "; : printerror(39) : return     
11d2c     00 92 06 F6 | 	mov	arg01, #0
11d30     28 82 B1 FD | 	call	#__system___getiolock_0622
11d34     3D 93 02 F6 | 	mov	arg01, result1
11d38     9C 2C B1 FD | 	call	#__system___lockmem
11d3c     97 01 00 FF 
11d40     28 95 06 F6 | 	mov	arg02, ##@LR__6012
11d44     00 92 06 F6 | 	mov	arg01, #0
11d48     00 96 06 F6 | 	mov	arg03, #0
11d4c     7C 39 B1 FD | 	call	#__system___basic_print_string
11d50     00 92 06 F6 | 	mov	arg01, #0
11d54     04 82 B1 FD | 	call	#__system___getiolock_0622
11d58     3D 01 68 FC | 	wrlong	#0, result1
11d5c     27 92 06 F6 | 	mov	arg01, #39
11d60     00 94 06 F6 | 	mov	arg02, #0
11d64     6C EF B0 FD | 	call	#_printerror
11d68     6C 00 90 FD | 	jmp	#LR__1492
11d6c                 | LR__1489
11d6c                 | LR__1490
11d6c                 | ' 
11d6c                 | ' if s2="" then
11d6c     97 01 00 FF 
11d70     34 95 06 F6 | 	mov	arg02, ##@LR__6013
11d74     54 93 02 F6 | 	mov	arg01, local02
11d78     84 2C B1 FD | 	call	#__system___string_cmp
11d7c     00 7A 0E F2 | 	cmp	result1, #0 wz
11d80     31 AC 06 A6 |  if_e	mov	local04, #49
11d84     24 00 90 AD |  if_e	jmp	#LR__1491
11d88     54 93 02 F6 | 	mov	arg01, local02
11d8c     00 48 B1 FD | 	call	#__system__LCase_S
11d90     3D 93 02 F6 | 	mov	arg01, result1
11d94     97 01 00 FF 
11d98     35 95 06 F6 | 	mov	arg02, ##@LR__6014
11d9c     60 2C B1 FD | 	call	#__system___string_cmp
11da0     00 7A 0E F2 | 	cmp	result1, #0 wz
11da4     10 AC 06 A6 |  if_e	mov	local04, #16
11da8     21 AC 06 56 |  if_ne	mov	local04, #33
11dac                 | LR__1491
11dac     55 93 02 F6 | 	mov	arg01, local03
11db0     56 95 02 F6 | 	mov	arg02, local04
11db4     5C 83 B1 FD | 	call	#__system___basic_dir
11db8     3D A9 02 F6 | 	mov	local02, result1
11dbc     10 CE 05 F1 | 	add	fp, #16
11dc0     E7 3E 68 FC | 	wrlong	#31, fp
11dc4     08 CE 85 F1 | 	sub	fp, #8
11dc8     E7 A8 62 FC | 	wrlong	local02, fp
11dcc     E7 92 02 F6 | 	mov	arg01, fp
11dd0     08 CE 85 F1 | 	sub	fp, #8
11dd4     28 B9 BF FD | 	call	#_push
11dd8                 | LR__1492
11dd8     E7 F0 03 F6 | 	mov	ptra, fp
11ddc     F2 00 A0 FD | 	call	#popregs_
11de0                 | _do_findfirst_ret
11de0     2D 00 64 FD | 	ret
11de4                 | 
11de4                 | ' 
11de4                 | ' '-------------------- findnext
11de4                 | ' 
11de4                 | ' sub do_findnext
11de4                 | _do_findnext
11de4     00 CA 05 F6 | 	mov	COUNT_, #0
11de8     E8 00 A0 FD | 	call	#pushregs_
11dec     10 F0 07 F1 | 	add	ptra, #16
11df0                 | ' 
11df0                 | ' if compiledline(lineptr_e).result.uresult>0 then print "findnext: "; : printerror(39) : return    
11df0     4C 00 00 FF 
11df4     24 64 06 F1 | 	add	objptr, ##38948
11df8     32 97 02 FB | 	rdlong	arg03, objptr
11dfc     4B 95 02 F6 | 	mov	arg02, arg03
11e00     01 94 66 F0 | 	shl	arg02, #1
11e04     4B 95 02 F1 | 	add	arg02, arg03
11e08     02 94 66 F0 | 	shl	arg02, #2
11e0c     03 00 00 FF 
11e10     04 64 86 F1 | 	sub	objptr, ##1540
11e14     32 95 02 F1 | 	add	arg02, objptr
11e18     4A 7B 02 FB | 	rdlong	result1, arg02
11e1c     01 7A 16 F2 | 	cmp	result1, #1 wc
11e20     49 00 00 FF 
11e24     20 64 86 F1 | 	sub	objptr, ##37408
11e28     40 00 90 CD |  if_b	jmp	#LR__1500
11e2c     00 92 06 F6 | 	mov	arg01, #0
11e30     28 81 B1 FD | 	call	#__system___getiolock_0622
11e34     3D 93 02 F6 | 	mov	arg01, result1
11e38     9C 2B B1 FD | 	call	#__system___lockmem
11e3c     97 01 00 FF 
11e40     39 95 06 F6 | 	mov	arg02, ##@LR__6015
11e44     00 92 06 F6 | 	mov	arg01, #0
11e48     00 96 06 F6 | 	mov	arg03, #0
11e4c     7C 38 B1 FD | 	call	#__system___basic_print_string
11e50     00 92 06 F6 | 	mov	arg01, #0
11e54     04 81 B1 FD | 	call	#__system___getiolock_0622
11e58     3D 01 68 FC | 	wrlong	#0, result1
11e5c     27 92 06 F6 | 	mov	arg01, #39
11e60     00 94 06 F6 | 	mov	arg02, #0
11e64     6C EE B0 FD | 	call	#_printerror
11e68     28 00 90 FD | 	jmp	#LR__1501
11e6c                 | LR__1500
11e6c     00 92 06 F6 | 	mov	arg01, #0
11e70     00 94 06 F6 | 	mov	arg02, #0
11e74     9C 82 B1 FD | 	call	#__system___basic_dir
11e78     3D 97 02 F6 | 	mov	arg03, result1
11e7c     08 CE 05 F1 | 	add	fp, #8
11e80     E7 3E 68 FC | 	wrlong	#31, fp
11e84     08 CE 85 F1 | 	sub	fp, #8
11e88     E7 96 62 FC | 	wrlong	arg03, fp
11e8c     E7 92 02 F6 | 	mov	arg01, fp
11e90     6C B8 BF FD | 	call	#_push
11e94                 | LR__1501
11e94     E7 F0 03 F6 | 	mov	ptra, fp
11e98     F2 00 A0 FD | 	call	#popregs_
11e9c                 | _do_findnext_ret
11e9c     2D 00 64 FD | 	ret
11ea0                 | 
11ea0                 | ' 
11ea0                 | ' '-------------------- font
11ea0                 | ' 
11ea0                 | ' sub do_font
11ea0                 | _do_font
11ea0     03 CA 05 F6 | 	mov	COUNT_, #3
11ea4     E8 00 A0 FD | 	call	#pushregs_
11ea8     C4 B7 BF FD | 	call	#_pop
11eac     3D A7 02 F6 | 	mov	local01, result1
11eb0     3E A9 02 F6 | 	mov	local02, result2
11eb4     3F AB 02 F6 | 	mov	local03, result3
11eb8                 | ' 
11eb8                 | ' t1=pop() 
11eb8                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
11eb8     1E AA 0E F2 | 	cmp	local03, #30 wz
11ebc     10 00 90 5D |  if_ne	jmp	#LR__1510
11ec0     53 93 02 F6 | 	mov	arg01, local01
11ec4     00 94 06 F6 | 	mov	arg02, #0
11ec8     A4 56 B1 FD | 	call	#__system___float_tointeger
11ecc     3D A7 02 F6 | 	mov	local01, result1
11ed0                 | LR__1510
11ed0                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
11ed0     1F AA 0E F2 | 	cmp	local03, #31 wz
11ed4     18 00 90 5D |  if_ne	jmp	#LR__1511
11ed8     53 93 02 F6 | 	mov	arg01, local01
11edc     E4 59 B1 FD | 	call	#__system____builtin_atof
11ee0     3D 93 02 F6 | 	mov	arg01, result1
11ee4     00 94 06 F6 | 	mov	arg02, #0
11ee8     84 56 B1 FD | 	call	#__system___float_tointeger
11eec     3D A7 02 F6 | 	mov	local01, result1
11ef0                 | LR__1511
11ef0     38 00 00 FF 
11ef4     E4 65 06 F1 | 	add	objptr, ##29156
11ef8     32 A7 62 FC | 	wrlong	local01, objptr
11efc     38 00 00 FF 
11f00     E4 65 86 F1 | 	sub	objptr, ##29156
11f04     02 A6 66 F0 | 	shl	local01, #2
11f08     53 93 02 F6 | 	mov	arg01, local01
11f0c     DC 09 B1 FD | 	call	#_Hg010b_4_spin2_setfontfamily
11f10     E7 F0 03 F6 | 	mov	ptra, fp
11f14     F2 00 A0 FD | 	call	#popregs_
11f18                 | _do_font_ret
11f18     2D 00 64 FD | 	ret
11f1c                 | 
11f1c                 | ' 
11f1c                 | ' '-------------------- for
11f1c                 | ' 
11f1c                 | ' sub do_for()
11f1c                 | _do_for
11f1c     01 CA 05 F6 | 	mov	COUNT_, #1
11f20     E8 00 A0 FD | 	call	#pushregs_
11f24     10 F0 07 F1 | 	add	ptra, #16
11f28     52 00 00 FF 
11f2c     D4 64 06 F1 | 	add	objptr, ##42196
11f30     32 93 02 FB | 	rdlong	arg01, objptr
11f34     01 92 06 F1 | 	add	arg01, #1
11f38     32 93 62 FC | 	wrlong	arg01, objptr
11f3c     52 00 00 FF 
11f40     D4 64 86 F1 | 	sub	objptr, ##42196
11f44     28 B7 BF FD | 	call	#_pop
11f48     E7 7A 62 FC | 	wrlong	result1, fp
11f4c     04 CE 05 F1 | 	add	fp, #4
11f50     E7 7C 62 FC | 	wrlong	result2, fp
11f54     04 CE 05 F1 | 	add	fp, #4
11f58     E7 7E 62 FC | 	wrlong	result3, fp
11f5c     08 CE 85 F1 | 	sub	fp, #8
11f60     52 00 00 FF 
11f64     D4 64 06 F1 | 	add	objptr, ##42196
11f68     32 93 02 FB | 	rdlong	arg01, objptr
11f6c     49 A7 02 F6 | 	mov	local01, arg01
11f70     02 A6 66 F0 | 	shl	local01, #2
11f74     49 A7 02 F1 | 	add	local01, arg01
11f78     02 A6 66 F0 | 	shl	local01, #2
11f7c     06 00 00 FF 
11f80     98 64 86 F1 | 	sub	objptr, ##3224
11f84     32 A7 02 F1 | 	add	local01, objptr
11f88     E7 92 02 FB | 	rdlong	arg01, fp
11f8c     08 A6 06 F1 | 	add	local01, #8
11f90     53 93 62 FC | 	wrlong	arg01, local01
11f94     4C 00 00 FF 
11f98     3C 64 86 F1 | 	sub	objptr, ##38972
11f9c     D0 B6 BF FD | 	call	#_pop
11fa0     E7 7A 62 FC | 	wrlong	result1, fp
11fa4     04 CE 05 F1 | 	add	fp, #4
11fa8     E7 7C 62 FC | 	wrlong	result2, fp
11fac     04 CE 05 F1 | 	add	fp, #4
11fb0     E7 7E 62 FC | 	wrlong	result3, fp
11fb4     08 CE 85 F1 | 	sub	fp, #8
11fb8     52 00 00 FF 
11fbc     D4 64 06 F1 | 	add	objptr, ##42196
11fc0     32 93 02 FB | 	rdlong	arg01, objptr
11fc4     49 A7 02 F6 | 	mov	local01, arg01
11fc8     02 A6 66 F0 | 	shl	local01, #2
11fcc     49 A7 02 F1 | 	add	local01, arg01
11fd0     02 A6 66 F0 | 	shl	local01, #2
11fd4     06 00 00 FF 
11fd8     98 64 86 F1 | 	sub	objptr, ##3224
11fdc     32 A7 02 F1 | 	add	local01, objptr
11fe0     E7 92 02 F6 | 	mov	arg01, fp
11fe4     4C 00 00 FF 
11fe8     3C 64 86 F1 | 	sub	objptr, ##38972
11fec     5C B8 BF FD | 	call	#_converttoint
11ff0     3D 93 02 F6 | 	mov	arg01, result1
11ff4     0C A6 06 F1 | 	add	local01, #12
11ff8     53 93 62 FC | 	wrlong	arg01, local01
11ffc     70 B6 BF FD | 	call	#_pop
12000     E7 7A 62 FC | 	wrlong	result1, fp
12004     04 CE 05 F1 | 	add	fp, #4
12008     E7 7C 62 FC | 	wrlong	result2, fp
1200c     04 CE 05 F1 | 	add	fp, #4
12010     E7 7E 62 FC | 	wrlong	result3, fp
12014     08 CE 85 F1 | 	sub	fp, #8
12018     52 00 00 FF 
1201c     D4 64 06 F1 | 	add	objptr, ##42196
12020     32 93 02 FB | 	rdlong	arg01, objptr
12024     49 A7 02 F6 | 	mov	local01, arg01
12028     02 A6 66 F0 | 	shl	local01, #2
1202c     49 A7 02 F1 | 	add	local01, arg01
12030     02 A6 66 F0 | 	shl	local01, #2
12034     06 00 00 FF 
12038     98 64 86 F1 | 	sub	objptr, ##3224
1203c     32 A7 02 F1 | 	add	local01, objptr
12040     E7 92 02 F6 | 	mov	arg01, fp
12044     4C 00 00 FF 
12048     3C 64 86 F1 | 	sub	objptr, ##38972
1204c     FC B7 BF FD | 	call	#_converttoint
12050     10 A6 06 F1 | 	add	local01, #16
12054     53 7B 62 FC | 	wrlong	result1, local01
12058                 | ' fortop+=1
12058                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
12058                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
12058                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
12058                 | ' if compiledline(lineptr_e).result_type=token_end then	' end of line after for, set the pointer to the start of the next line
12058     4C 00 00 FF 
1205c     24 64 06 F1 | 	add	objptr, ##38948
12060     32 93 02 FB | 	rdlong	arg01, objptr
12064     49 A7 02 F6 | 	mov	local01, arg01
12068     01 A6 66 F0 | 	shl	local01, #1
1206c     49 A7 02 F1 | 	add	local01, arg01
12070     02 A6 66 F0 | 	shl	local01, #2
12074     03 00 00 FF 
12078     04 64 86 F1 | 	sub	objptr, ##1540
1207c     32 A7 02 F1 | 	add	local01, objptr
12080     08 A6 06 F1 | 	add	local01, #8
12084     53 A7 02 FB | 	rdlong	local01, local01
12088     FE A7 0E F2 | 	cmp	local01, #510 wz
1208c     49 00 00 FF 
12090     20 64 86 F1 | 	sub	objptr, ##37408
12094     70 00 90 5D |  if_ne	jmp	#LR__1520
12098     52 00 00 FF 
1209c     D4 64 06 F1 | 	add	objptr, ##42196
120a0     32 93 02 FB | 	rdlong	arg01, objptr
120a4     49 A7 02 F6 | 	mov	local01, arg01
120a8     02 A6 66 F0 | 	shl	local01, #2
120ac     49 A7 02 F1 | 	add	local01, arg01
120b0     02 A6 66 F0 | 	shl	local01, #2
120b4     06 00 00 FF 
120b8     98 64 86 F1 | 	sub	objptr, ##3224
120bc     32 A7 02 F1 | 	add	local01, objptr
120c0     06 00 00 FF 
120c4     20 64 06 F1 | 	add	objptr, ##3104
120c8     32 93 02 FB | 	rdlong	arg01, objptr
120cc     53 93 62 FC | 	wrlong	arg01, local01
120d0     78 64 06 F1 | 	add	objptr, #120
120d4     32 93 02 FB | 	rdlong	arg01, objptr
120d8     49 A7 02 F6 | 	mov	local01, arg01
120dc     02 A6 66 F0 | 	shl	local01, #2
120e0     49 A7 02 F1 | 	add	local01, arg01
120e4     02 A6 66 F0 | 	shl	local01, #2
120e8     06 00 00 FF 
120ec     98 64 86 F1 | 	sub	objptr, ##3224
120f0     32 A7 02 F1 | 	add	local01, objptr
120f4     04 A6 06 F1 | 	add	local01, #4
120f8     53 01 68 FC | 	wrlong	#0, local01
120fc     4C 00 00 FF 
12100     3C 64 86 F1 | 	sub	objptr, ##38972
12104     78 00 90 FD | 	jmp	#LR__1521
12108                 | LR__1520
12108     52 00 00 FF 
1210c     D4 64 06 F1 | 	add	objptr, ##42196
12110     32 93 02 FB | 	rdlong	arg01, objptr
12114     49 A7 02 F6 | 	mov	local01, arg01
12118     02 A6 66 F0 | 	shl	local01, #2
1211c     49 A7 02 F1 | 	add	local01, arg01
12120     02 A6 66 F0 | 	shl	local01, #2
12124     06 00 00 FF 
12128     98 64 86 F1 | 	sub	objptr, ##3224
1212c     32 A7 02 F1 | 	add	local01, objptr
12130     06 00 00 FF 
12134     28 64 06 F1 | 	add	objptr, ##3112
12138     32 93 02 FB | 	rdlong	arg01, objptr
1213c     53 93 62 FC | 	wrlong	arg01, local01
12140     70 64 06 F1 | 	add	objptr, #112
12144     32 93 02 FB | 	rdlong	arg01, objptr
12148     49 A7 02 F6 | 	mov	local01, arg01
1214c     02 A6 66 F0 | 	shl	local01, #2
12150     49 A7 02 F1 | 	add	local01, arg01
12154     02 A6 66 F0 | 	shl	local01, #2
12158     06 00 00 FF 
1215c     98 64 86 F1 | 	sub	objptr, ##3224
12160     32 A7 02 F1 | 	add	local01, objptr
12164     18 64 86 F1 | 	sub	objptr, #24
12168     32 93 02 FB | 	rdlong	arg01, objptr
1216c     4C 00 00 FF 
12170     24 64 86 F1 | 	sub	objptr, ##38948
12174     01 92 06 F1 | 	add	arg01, #1
12178     04 A6 06 F1 | 	add	local01, #4
1217c     53 93 62 FC | 	wrlong	arg01, local01
12180                 | LR__1521
12180     E7 F0 03 F6 | 	mov	ptra, fp
12184     F2 00 A0 FD | 	call	#popregs_
12188                 | _do_for_ret
12188     2D 00 64 FD | 	ret
1218c                 | 
1218c                 | ' 
1218c                 | ' '-------------------- frame
1218c                 | ' 
1218c                 | ' sub do_frame
1218c                 | _do_frame
1218c     03 CA 05 F6 | 	mov	COUNT_, #3
12190     E8 00 A0 FD | 	call	#pushregs_
12194     30 F0 07 F1 | 	add	ptra, #48
12198     D4 B4 BF FD | 	call	#_pop
1219c     3D 97 02 F6 | 	mov	arg03, result1
121a0     3E 95 02 F6 | 	mov	arg02, result2
121a4     3F 9B 02 F6 | 	mov	arg05, result3
121a8     24 CE 05 F1 | 	add	fp, #36
121ac     E7 96 62 FC | 	wrlong	arg03, fp
121b0     04 CE 05 F1 | 	add	fp, #4
121b4     E7 94 62 FC | 	wrlong	arg02, fp
121b8     04 CE 05 F1 | 	add	fp, #4
121bc     E7 9A 62 FC | 	wrlong	arg05, fp
121c0     2C CE 85 F1 | 	sub	fp, #44
121c4     A8 B4 BF FD | 	call	#_pop
121c8     3D 97 02 F6 | 	mov	arg03, result1
121cc     3E 95 02 F6 | 	mov	arg02, result2
121d0     3F 9B 02 F6 | 	mov	arg05, result3
121d4     18 CE 05 F1 | 	add	fp, #24
121d8     E7 96 62 FC | 	wrlong	arg03, fp
121dc     04 CE 05 F1 | 	add	fp, #4
121e0     E7 94 62 FC | 	wrlong	arg02, fp
121e4     04 CE 05 F1 | 	add	fp, #4
121e8     E7 9A 62 FC | 	wrlong	arg05, fp
121ec     20 CE 85 F1 | 	sub	fp, #32
121f0     7C B4 BF FD | 	call	#_pop
121f4     3D 97 02 F6 | 	mov	arg03, result1
121f8     3E 95 02 F6 | 	mov	arg02, result2
121fc     3F 9B 02 F6 | 	mov	arg05, result3
12200     0C CE 05 F1 | 	add	fp, #12
12204     E7 96 62 FC | 	wrlong	arg03, fp
12208     04 CE 05 F1 | 	add	fp, #4
1220c     E7 94 62 FC | 	wrlong	arg02, fp
12210     04 CE 05 F1 | 	add	fp, #4
12214     E7 9A 62 FC | 	wrlong	arg05, fp
12218     14 CE 85 F1 | 	sub	fp, #20
1221c     50 B4 BF FD | 	call	#_pop
12220     3F 97 02 F6 | 	mov	arg03, result3
12224     E7 7A 62 FC | 	wrlong	result1, fp
12228     04 CE 05 F1 | 	add	fp, #4
1222c     E7 7C 62 FC | 	wrlong	result2, fp
12230     04 CE 05 F1 | 	add	fp, #4
12234     E7 96 62 FC | 	wrlong	arg03, fp
12238     08 CE 85 F1 | 	sub	fp, #8
1223c     E7 92 02 F6 | 	mov	arg01, fp
12240     08 B6 BF FD | 	call	#_converttoint
12244     3D A7 02 F6 | 	mov	local01, result1
12248     E7 92 02 F6 | 	mov	arg01, fp
1224c     0C 92 06 F1 | 	add	arg01, #12
12250     F8 B5 BF FD | 	call	#_converttoint
12254     3D A9 02 F6 | 	mov	local02, result1
12258     E7 92 02 F6 | 	mov	arg01, fp
1225c     18 92 06 F1 | 	add	arg01, #24
12260     E8 B5 BF FD | 	call	#_converttoint
12264     3D AB 02 F6 | 	mov	local03, result1
12268     E7 92 02 F6 | 	mov	arg01, fp
1226c     24 92 06 F1 | 	add	arg01, #36
12270     D8 B5 BF FD | 	call	#_converttoint
12274     3D 99 02 F6 | 	mov	arg04, result1
12278     38 00 00 FF 
1227c     CC 65 06 F1 | 	add	objptr, ##29132
12280     32 9B 02 FB | 	rdlong	arg05, objptr
12284     38 00 00 FF 
12288     CC 65 86 F1 | 	sub	objptr, ##29132
1228c     53 93 02 F6 | 	mov	arg01, local01
12290     54 95 02 F6 | 	mov	arg02, local02
12294     55 97 02 F6 | 	mov	arg03, local03
12298     5C 04 B1 FD | 	call	#_Hg010b_4_spin2_frame
1229c     E7 F0 03 F6 | 	mov	ptra, fp
122a0     F2 00 A0 FD | 	call	#popregs_
122a4                 | _do_frame_ret
122a4     2D 00 64 FD | 	ret
122a8                 | 
122a8                 | ' 
122a8                 | ' '-------------------- framebuf
122a8                 | ' 
122a8                 | ' sub do_framebuf
122a8                 | _do_framebuf
122a8     00 CA 05 F6 | 	mov	COUNT_, #0
122ac     E8 00 A0 FD | 	call	#pushregs_
122b0     0C F0 07 F1 | 	add	ptra, #12
122b4     08 CE 05 F1 | 	add	fp, #8
122b8     E7 3A 68 FC | 	wrlong	#29, fp
122bc     32 93 02 FB | 	rdlong	arg01, objptr
122c0     08 CE 85 F1 | 	sub	fp, #8
122c4     E7 92 62 FC | 	wrlong	arg01, fp
122c8     E7 92 02 F6 | 	mov	arg01, fp
122cc     30 B4 BF FD | 	call	#_push
122d0     E7 F0 03 F6 | 	mov	ptra, fp
122d4     F2 00 A0 FD | 	call	#popregs_
122d8                 | _do_framebuf_ret
122d8     2D 00 64 FD | 	ret
122dc                 | 
122dc                 | ' '-------------------- fre
122dc                 | ' 
122dc                 | ' sub do_fre
122dc                 | _do_fre
122dc     01 CA 05 F6 | 	mov	COUNT_, #1
122e0     E8 00 A0 FD | 	call	#pushregs_
122e4     0C F0 07 F1 | 	add	ptra, #12
122e8     54 00 00 FF 
122ec     74 64 06 F1 | 	add	objptr, ##43124
122f0     32 93 02 FB | 	rdlong	arg01, objptr
122f4     0F 00 00 FF 
122f8     74 64 86 F1 | 	sub	objptr, ##7796
122fc     32 A7 02 FB | 	rdlong	local01, objptr
12300     53 93 82 F1 | 	sub	arg01, local01
12304     0F 00 00 FF 
12308     EC 64 06 F1 | 	add	objptr, ##7916
1230c     32 93 62 FC | 	wrlong	arg01, objptr
12310     08 CE 05 F1 | 	add	fp, #8
12314     E7 3A 68 FC | 	wrlong	#29, fp
12318     08 CE 85 F1 | 	sub	fp, #8
1231c     32 A7 02 FB | 	rdlong	local01, objptr
12320     54 00 00 FF 
12324     EC 64 86 F1 | 	sub	objptr, ##43244
12328     E7 A6 62 FC | 	wrlong	local01, fp
1232c     E7 92 02 F6 | 	mov	arg01, fp
12330     CC B3 BF FD | 	call	#_push
12334     E7 F0 03 F6 | 	mov	ptra, fp
12338     F2 00 A0 FD | 	call	#popregs_
1233c                 | _do_fre_ret
1233c     2D 00 64 FD | 	ret
12340                 | 
12340                 | ' 
12340                 | ' '-------------------- get
12340                 | ' 
12340                 | ' sub do_get		' get  #chn,addr,(amount,(pos))
12340                 | _do_get
12340     10 CA 05 F6 | 	mov	COUNT_, #16
12344     E8 00 A0 FD | 	call	#pushregs_
12348     40 F0 07 F1 | 	add	ptra, #64
1234c     4C 00 00 FF 
12350     24 64 06 F1 | 	add	objptr, ##38948
12354     32 9B 02 FB | 	rdlong	arg05, objptr
12358     4D A7 02 F6 | 	mov	local01, arg05
1235c     01 A6 66 F0 | 	shl	local01, #1
12360     4D A7 02 F1 | 	add	local01, arg05
12364     02 A6 66 F0 | 	shl	local01, #2
12368     03 00 00 FF 
1236c     04 64 86 F1 | 	sub	objptr, ##1540
12370     32 A9 02 F6 | 	mov	local02, objptr
12374     32 A7 02 F1 | 	add	local01, objptr
12378     53 AB 02 FB | 	rdlong	local03, local01
1237c                 | ' 
1237c                 | ' numpar=compiledline(lineptr_e).result.uresult
1237c                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
1237c     04 AA 0E F2 | 	cmp	local03, #4 wz
12380     49 00 00 FF 
12384     20 64 86 F1 | 	sub	objptr, ##37408
12388     48 00 90 5D |  if_ne	jmp	#LR__1530
1238c     E0 B2 BF FD | 	call	#_pop
12390     3F 9B 02 F6 | 	mov	arg05, result3
12394     1C CE 05 F1 | 	add	fp, #28
12398     E7 7A 62 FC | 	wrlong	result1, fp
1239c     04 CE 05 F1 | 	add	fp, #4
123a0     E7 7C 62 FC | 	wrlong	result2, fp
123a4     04 CE 05 F1 | 	add	fp, #4
123a8     E7 9A 62 FC | 	wrlong	arg05, fp
123ac     08 CE 85 F1 | 	sub	fp, #8
123b0     E7 92 02 F6 | 	mov	arg01, fp
123b4     1C CE 85 F1 | 	sub	fp, #28
123b8     90 B4 BF FD | 	call	#_converttoint
123bc     54 00 00 FF 
123c0     E8 64 06 F1 | 	add	objptr, ##43240
123c4     32 7B 62 FC | 	wrlong	result1, objptr
123c8     54 00 00 FF 
123cc     E8 64 86 F1 | 	sub	objptr, ##43240
123d0     18 00 90 FD | 	jmp	#LR__1531
123d4                 | LR__1530
123d4     54 00 00 FF 
123d8     E8 64 06 F1 | 	add	objptr, ##43240
123dc     FF FF FF FF 
123e0     32 FF 6B FC | 	wrlong	##-1, objptr
123e4     54 00 00 FF 
123e8     E8 64 86 F1 | 	sub	objptr, ##43240
123ec                 | LR__1531
123ec                 | ' if numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
123ec     03 AA 56 F2 | 	cmps	local03, #3 wc
123f0     38 00 90 CD |  if_b	jmp	#LR__1532
123f4     78 B2 BF FD | 	call	#_pop
123f8     3F A7 02 F6 | 	mov	local01, result3
123fc     1C CE 05 F1 | 	add	fp, #28
12400     E7 7A 62 FC | 	wrlong	result1, fp
12404     04 CE 05 F1 | 	add	fp, #4
12408     E7 7C 62 FC | 	wrlong	result2, fp
1240c     04 CE 05 F1 | 	add	fp, #4
12410     E7 A6 62 FC | 	wrlong	local01, fp
12414     08 CE 85 F1 | 	sub	fp, #8
12418     E7 92 02 F6 | 	mov	arg01, fp
1241c     1C CE 85 F1 | 	sub	fp, #28
12420     28 B4 BF FD | 	call	#_converttoint
12424     3D AD 02 F6 | 	mov	local04, result1
12428     04 00 90 FD | 	jmp	#LR__1533
1242c                 | LR__1532
1242c     01 AC 06 F6 | 	mov	local04, #1
12430                 | LR__1533
12430                 | ' if numpar>=2  then t1=pop() : adr=converttoint(t1)
12430     02 AA 56 F2 | 	cmps	local03, #2 wc
12434     34 00 90 CD |  if_b	jmp	#LR__1534
12438     34 B2 BF FD | 	call	#_pop
1243c     3F A9 02 F6 | 	mov	local02, result3
12440     1C CE 05 F1 | 	add	fp, #28
12444     E7 7A 62 FC | 	wrlong	result1, fp
12448     04 CE 05 F1 | 	add	fp, #4
1244c     E7 7C 62 FC | 	wrlong	result2, fp
12450     04 CE 05 F1 | 	add	fp, #4
12454     E7 A8 62 FC | 	wrlong	local02, fp
12458     08 CE 85 F1 | 	sub	fp, #8
1245c     E7 92 02 F6 | 	mov	arg01, fp
12460     1C CE 85 F1 | 	sub	fp, #28
12464     E4 B3 BF FD | 	call	#_converttoint
12468     3D AF 02 F6 | 	mov	local05, result1
1246c                 | LR__1534
1246c     00 B2 BF FD | 	call	#_pop
12470     3F 9B 02 F6 | 	mov	arg05, result3
12474     1C CE 05 F1 | 	add	fp, #28
12478     E7 7A 62 FC | 	wrlong	result1, fp
1247c     04 CE 05 F1 | 	add	fp, #4
12480     E7 7C 62 FC | 	wrlong	result2, fp
12484     04 CE 05 F1 | 	add	fp, #4
12488     E7 9A 62 FC | 	wrlong	arg05, fp
1248c     08 CE 85 F1 | 	sub	fp, #8
12490     E7 92 02 F6 | 	mov	arg01, fp
12494     1C CE 85 F1 | 	sub	fp, #28
12498     B0 B3 BF FD | 	call	#_converttoint
1249c     3D B1 02 F6 | 	mov	local06, result1
124a0     02 B2 66 F0 | 	shl	local07, #2
124a4     52 00 00 FF 
124a8     68 64 06 F1 | 	add	objptr, ##42088
124ac     32 B3 02 F1 | 	add	local07, objptr
124b0     59 01 68 FC | 	wrlong	#0, local07
124b4                 | ' t1=pop() : channel=converttoint(t1)
124b4                 | ' getres(j)=0
124b4                 | ' if pos>=0 then
124b4     02 00 00 FF 
124b8     80 64 06 F1 | 	add	objptr, ##1152
124bc     32 B5 02 FB | 	rdlong	local08, objptr
124c0     54 00 00 FF 
124c4     E8 64 86 F1 | 	sub	objptr, ##43240
124c8     00 B4 56 F2 | 	cmps	local08, #0 wc
124cc     28 01 90 CD |  if_b	jmp	#LR__1541
124d0                 | '   for i=0 to  amount/1024
124d0     00 B6 06 F6 | 	mov	local09, #0
124d4     56 B9 52 F6 | 	abs	local10, local04 wc
124d8     0A B8 46 F0 | 	shr	local10, #10
124dc     5C B9 82 F6 | 	negc	local10, local10
124e0     01 B8 06 F1 | 	add	local10, #1
124e4                 | LR__1535
124e4     5C B7 52 F2 | 	cmps	local09, local10 wc
124e8     20 02 90 3D |  if_ae	jmp	#LR__1549
124ec                 | '     get #channel,pos+1,block(0),amount,r
124ec     54 00 00 FF 
124f0     E8 64 06 F1 | 	add	objptr, ##43240
124f4     32 95 02 FB | 	rdlong	arg02, objptr
124f8     01 94 06 F1 | 	add	arg02, #1
124fc     04 00 00 FF 
12500     90 64 86 F1 | 	sub	objptr, ##2192
12504     32 97 02 F6 | 	mov	arg03, objptr
12508     50 00 00 FF 
1250c     58 64 86 F1 | 	sub	objptr, ##41048
12510     56 99 02 F6 | 	mov	arg04, local04
12514     58 93 02 F6 | 	mov	arg01, local06
12518     01 9A 06 F6 | 	mov	arg05, #1
1251c     34 33 B1 FD | 	call	#__system___basic_get
12520     3D BB 02 F6 | 	mov	local11, result1
12524                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
12524     00 04 00 FF 
12528     00 AE 56 F2 | 	cmps	local05, ##524288 wc
1252c     48 00 90 3D |  if_ae	jmp	#LR__1537
12530     00 B2 06 F6 | 	mov	local07, #0
12534     5D BD 02 F6 | 	mov	local12, local11
12538                 | LR__1536
12538     5E B3 52 F2 | 	cmps	local07, local12 wc
1253c     80 00 90 3D |  if_ae	jmp	#LR__1540
12540     57 93 02 F6 | 	mov	arg01, local05
12544     5B B5 02 F6 | 	mov	local08, local09
12548     0A B4 66 F0 | 	shl	local08, #10
1254c     5A 93 02 F1 | 	add	arg01, local08
12550     59 93 02 F1 | 	add	arg01, local07
12554     59 A9 02 F6 | 	mov	local02, local07
12558     32 B5 02 F6 | 	mov	local08, objptr
1255c     50 00 00 FF 
12560     58 B4 06 F1 | 	add	local08, ##41048
12564     5A A9 02 F1 | 	add	local02, local08
12568     54 95 C2 FA | 	rdbyte	arg02, local02
1256c     49 95 42 FC | 	wrbyte	arg02, arg01
12570     01 B2 06 F1 | 	add	local07, #1
12574     C0 FF 9F FD | 	jmp	#LR__1536
12578                 | LR__1537
12578     00 B2 06 F6 | 	mov	local07, #0
1257c     5D BF 02 F6 | 	mov	local13, local11
12580                 | LR__1538
12580     5F B3 52 F2 | 	cmps	local07, local13 wc
12584     38 00 90 3D |  if_ae	jmp	#LR__1539
12588     57 93 02 F6 | 	mov	arg01, local05
1258c     5B BD 02 F6 | 	mov	local12, local09
12590     0A BC 66 F0 | 	shl	local12, #10
12594     5E 93 02 F1 | 	add	arg01, local12
12598     59 93 02 F1 | 	add	arg01, local07
1259c     59 A9 02 F6 | 	mov	local02, local07
125a0     32 BD 02 F6 | 	mov	local12, objptr
125a4     50 00 00 FF 
125a8     58 BC 06 F1 | 	add	local12, ##41048
125ac     5E A9 02 F1 | 	add	local02, local12
125b0     54 95 C2 FA | 	rdbyte	arg02, local02
125b4     48 E9 B0 FD | 	call	#_pspoke
125b8     01 B2 06 F1 | 	add	local07, #1
125bc     C0 FF 9F FD | 	jmp	#LR__1538
125c0                 | LR__1539
125c0                 | LR__1540
125c0     59 BF 02 F6 | 	mov	local13, local07
125c4     02 BE 66 F0 | 	shl	local13, #2
125c8     52 00 00 FF 
125cc     68 64 06 F1 | 	add	objptr, ##42088
125d0     32 BF 02 F1 | 	add	local13, objptr
125d4     02 B2 66 F0 | 	shl	local07, #2
125d8     32 B3 02 F1 | 	add	local07, objptr
125dc     59 A7 02 FB | 	rdlong	local01, local07
125e0     5D A7 02 F1 | 	add	local01, local11
125e4     5F A7 62 FC | 	wrlong	local01, local13
125e8     01 B6 06 F1 | 	add	local09, #1
125ec     52 00 00 FF 
125f0     68 64 86 F1 | 	sub	objptr, ##42088
125f4     EC FE 9F FD | 	jmp	#LR__1535
125f8                 | LR__1541
125f8                 | '   for i=0 to  amount/1024
125f8     00 B6 06 F6 | 	mov	local09, #0
125fc     56 C1 52 F6 | 	abs	local14, local04 wc
12600     0A C0 46 F0 | 	shr	local14, #10
12604     60 C1 82 F6 | 	negc	local14, local14
12608     01 C0 06 F1 | 	add	local14, #1
1260c                 | LR__1542
1260c     60 B7 52 F2 | 	cmps	local09, local14 wc
12610     F8 00 90 3D |  if_ae	jmp	#LR__1548
12614                 | '     get #channel,,block(0),amount,r
12614     32 97 02 F6 | 	mov	arg03, objptr
12618     50 00 00 FF 
1261c     58 96 06 F1 | 	add	arg03, ##41048
12620     56 99 02 F6 | 	mov	arg04, local04
12624     58 93 02 F6 | 	mov	arg01, local06
12628     00 94 06 F6 | 	mov	arg02, #0
1262c     01 9A 06 F6 | 	mov	arg05, #1
12630     20 32 B1 FD | 	call	#__system___basic_get
12634     3D BB 02 F6 | 	mov	local11, result1
12638                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
12638     00 04 00 FF 
1263c     00 AE 56 F2 | 	cmps	local05, ##524288 wc
12640     48 00 90 3D |  if_ae	jmp	#LR__1544
12644     00 B2 06 F6 | 	mov	local07, #0
12648     5D C3 02 F6 | 	mov	local15, local11
1264c                 | LR__1543
1264c     61 B3 52 F2 | 	cmps	local07, local15 wc
12650     80 00 90 3D |  if_ae	jmp	#LR__1547
12654     57 93 02 F6 | 	mov	arg01, local05
12658     5B BF 02 F6 | 	mov	local13, local09
1265c     0A BE 66 F0 | 	shl	local13, #10
12660     5F 93 02 F1 | 	add	arg01, local13
12664     59 93 02 F1 | 	add	arg01, local07
12668     59 A9 02 F6 | 	mov	local02, local07
1266c     32 BF 02 F6 | 	mov	local13, objptr
12670     50 00 00 FF 
12674     58 BE 06 F1 | 	add	local13, ##41048
12678     5F A9 02 F1 | 	add	local02, local13
1267c     54 95 C2 FA | 	rdbyte	arg02, local02
12680     49 95 42 FC | 	wrbyte	arg02, arg01
12684     01 B2 06 F1 | 	add	local07, #1
12688     C0 FF 9F FD | 	jmp	#LR__1543
1268c                 | LR__1544
1268c     00 B2 06 F6 | 	mov	local07, #0
12690     5D C5 02 F6 | 	mov	local16, local11
12694                 | LR__1545
12694     62 B3 52 F2 | 	cmps	local07, local16 wc
12698     38 00 90 3D |  if_ae	jmp	#LR__1546
1269c     57 93 02 F6 | 	mov	arg01, local05
126a0     5B C3 02 F6 | 	mov	local15, local09
126a4     0A C2 66 F0 | 	shl	local15, #10
126a8     61 93 02 F1 | 	add	arg01, local15
126ac     59 93 02 F1 | 	add	arg01, local07
126b0     59 A9 02 F6 | 	mov	local02, local07
126b4     32 C3 02 F6 | 	mov	local15, objptr
126b8     50 00 00 FF 
126bc     58 C2 06 F1 | 	add	local15, ##41048
126c0     61 A9 02 F1 | 	add	local02, local15
126c4     54 95 C2 FA | 	rdbyte	arg02, local02
126c8     34 E8 B0 FD | 	call	#_pspoke
126cc     01 B2 06 F1 | 	add	local07, #1
126d0     C0 FF 9F FD | 	jmp	#LR__1545
126d4                 | LR__1546
126d4                 | LR__1547
126d4     59 C5 02 F6 | 	mov	local16, local07
126d8     02 C4 66 F0 | 	shl	local16, #2
126dc     52 00 00 FF 
126e0     68 64 06 F1 | 	add	objptr, ##42088
126e4     32 C5 02 F1 | 	add	local16, objptr
126e8     02 B2 66 F0 | 	shl	local07, #2
126ec     32 B3 02 F1 | 	add	local07, objptr
126f0     59 A7 02 FB | 	rdlong	local01, local07
126f4     5D A7 02 F1 | 	add	local01, local11
126f8     62 A7 62 FC | 	wrlong	local01, local16
126fc     01 B6 06 F1 | 	add	local09, #1
12700     52 00 00 FF 
12704     68 64 86 F1 | 	sub	objptr, ##42088
12708     00 FF 9F FD | 	jmp	#LR__1542
1270c                 | LR__1548
1270c                 | LR__1549
1270c     E7 F0 03 F6 | 	mov	ptra, fp
12710     F2 00 A0 FD | 	call	#popregs_
12714                 | _do_get_ret
12714     2D 00 64 FD | 	ret
12718                 | 
12718                 | ' 
12718                 | ' '-------------------- getcolor
12718                 | ' 
12718                 | ' sub do_getcolor
12718                 | _do_getcolor
12718     00 CA 05 F6 | 	mov	COUNT_, #0
1271c     E8 00 A0 FD | 	call	#pushregs_
12720     10 F0 07 F1 | 	add	ptra, #16
12724     4C 00 00 FF 
12728     24 64 06 F1 | 	add	objptr, ##38948
1272c     32 97 02 FB | 	rdlong	arg03, objptr
12730     4B 95 02 F6 | 	mov	arg02, arg03
12734     01 94 66 F0 | 	shl	arg02, #1
12738     4B 95 02 F1 | 	add	arg02, arg03
1273c     02 94 66 F0 | 	shl	arg02, #2
12740     03 00 00 FF 
12744     04 64 86 F1 | 	sub	objptr, ##1540
12748     32 95 02 F1 | 	add	arg02, objptr
1274c     4A 97 02 FB | 	rdlong	arg03, arg02
12750                 | ' 
12750                 | ' numpar=compiledline(lineptr_e).result.uresult
12750                 | ' if numpar>1 orelse numpar=0 then print "getcolor "; : printerror(39) : return
12750     02 96 16 F2 | 	cmp	arg03, #2 wc
12754     49 00 00 FF 
12758     20 64 86 F1 | 	sub	objptr, ##37408
1275c     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
12760     40 00 90 4D |  if_c_and_nz	jmp	#LR__1550
12764     00 92 06 F6 | 	mov	arg01, #0
12768     F0 77 B1 FD | 	call	#__system___getiolock_0622
1276c     3D 93 02 F6 | 	mov	arg01, result1
12770     64 22 B1 FD | 	call	#__system___lockmem
12774     97 01 00 FF 
12778     44 95 06 F6 | 	mov	arg02, ##@LR__6016
1277c     00 92 06 F6 | 	mov	arg01, #0
12780     00 96 06 F6 | 	mov	arg03, #0
12784     44 2F B1 FD | 	call	#__system___basic_print_string
12788     00 92 06 F6 | 	mov	arg01, #0
1278c     CC 77 B1 FD | 	call	#__system___getiolock_0622
12790     3D 01 68 FC | 	wrlong	#0, result1
12794     27 92 06 F6 | 	mov	arg01, #39
12798     00 94 06 F6 | 	mov	arg02, #0
1279c     34 E5 B0 FD | 	call	#_printerror
127a0     60 00 90 FD | 	jmp	#LR__1551
127a4                 | LR__1550
127a4     C8 AE BF FD | 	call	#_pop
127a8     E7 7A 62 FC | 	wrlong	result1, fp
127ac     04 CE 05 F1 | 	add	fp, #4
127b0     E7 7C 62 FC | 	wrlong	result2, fp
127b4     04 CE 05 F1 | 	add	fp, #4
127b8     E7 7E 62 FC | 	wrlong	result3, fp
127bc     08 CE 85 F1 | 	sub	fp, #8
127c0     E7 92 02 F6 | 	mov	arg01, fp
127c4     84 B0 BF FD | 	call	#_converttoint
127c8     3D 93 02 F6 | 	mov	arg01, result1
127cc                 | ' 
127cc                 | ' return long[palette_ptr+4*color]
127cc     1C 64 06 F1 | 	add	objptr, #28
127d0     32 7B 02 FB | 	rdlong	result1, objptr
127d4     1C 64 86 F1 | 	sub	objptr, #28
127d8     02 92 66 F0 | 	shl	arg01, #2
127dc     49 7B 02 F1 | 	add	result1, arg01
127e0     3D 7B 02 FB | 	rdlong	result1, result1
127e4     08 7A C6 F0 | 	sar	result1, #8
127e8     F8 7A 06 F4 | 	bitl	result1, #248
127ec     E7 7A 62 FC | 	wrlong	result1, fp
127f0     08 CE 05 F1 | 	add	fp, #8
127f4     E7 3A 68 FC | 	wrlong	#29, fp
127f8     08 CE 85 F1 | 	sub	fp, #8
127fc     E7 92 02 F6 | 	mov	arg01, fp
12800     FC AE BF FD | 	call	#_push
12804                 | LR__1551
12804     E7 F0 03 F6 | 	mov	ptra, fp
12808     F2 00 A0 FD | 	call	#popregs_
1280c                 | _do_getcolor_ret
1280c     2D 00 64 FD | 	ret
12810                 | 
12810                 | ' 
12810                 | ' '-------------------- getenvsustain
12810                 | ' 
12810                 | ' sub do_getenvsustain
12810                 | _do_getenvsustain
12810     00 CA 05 F6 | 	mov	COUNT_, #0
12814     E8 00 A0 FD | 	call	#pushregs_
12818     10 F0 07 F1 | 	add	ptra, #16
1281c     4C 00 00 FF 
12820     24 64 06 F1 | 	add	objptr, ##38948
12824     32 97 02 FB | 	rdlong	arg03, objptr
12828     4B 95 02 F6 | 	mov	arg02, arg03
1282c     01 94 66 F0 | 	shl	arg02, #1
12830     4B 95 02 F1 | 	add	arg02, arg03
12834     02 94 66 F0 | 	shl	arg02, #2
12838     03 00 00 FF 
1283c     04 64 86 F1 | 	sub	objptr, ##1540
12840     32 95 02 F1 | 	add	arg02, objptr
12844     4A 97 02 FB | 	rdlong	arg03, arg02
12848                 | ' 
12848                 | ' numpar=compiledline(lineptr_e).result.uresult
12848                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
12848     02 96 16 F2 | 	cmp	arg03, #2 wc
1284c     49 00 00 FF 
12850     20 64 86 F1 | 	sub	objptr, ##37408
12854     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
12858     40 00 90 4D |  if_c_and_nz	jmp	#LR__1560
1285c     00 92 06 F6 | 	mov	arg01, #0
12860     F8 76 B1 FD | 	call	#__system___getiolock_0622
12864     3D 93 02 F6 | 	mov	arg01, result1
12868     6C 21 B1 FD | 	call	#__system___lockmem
1286c     97 01 00 FF 
12870     4E 95 06 F6 | 	mov	arg02, ##@LR__6017
12874     00 92 06 F6 | 	mov	arg01, #0
12878     00 96 06 F6 | 	mov	arg03, #0
1287c     4C 2E B1 FD | 	call	#__system___basic_print_string
12880     00 92 06 F6 | 	mov	arg01, #0
12884     D4 76 B1 FD | 	call	#__system___getiolock_0622
12888     3D 01 68 FC | 	wrlong	#0, result1
1288c     27 92 06 F6 | 	mov	arg01, #39
12890     00 94 06 F6 | 	mov	arg02, #0
12894     3C E4 B0 FD | 	call	#_printerror
12898     60 00 90 FD | 	jmp	#LR__1561
1289c                 | LR__1560
1289c     D0 AD BF FD | 	call	#_pop
128a0     3D 97 02 F6 | 	mov	arg03, result1
128a4     3E 95 02 F6 | 	mov	arg02, result2
128a8     E7 96 62 FC | 	wrlong	arg03, fp
128ac     04 CE 05 F1 | 	add	fp, #4
128b0     E7 94 62 FC | 	wrlong	arg02, fp
128b4     04 CE 05 F1 | 	add	fp, #4
128b8     E7 7E 62 FC | 	wrlong	result3, fp
128bc     08 CE 85 F1 | 	sub	fp, #8
128c0     E7 92 02 F6 | 	mov	arg01, fp
128c4     84 AF BF FD | 	call	#_converttoint
128c8     3D 97 02 F6 | 	mov	arg03, result1
128cc     01 96 66 F0 | 	shl	arg03, #1
128d0     32 95 02 F6 | 	mov	arg02, objptr
128d4     54 00 00 FF 
128d8     90 94 06 F1 | 	add	arg02, ##43152
128dc     4A 97 02 F1 | 	add	arg03, arg02
128e0     4B 7F E2 FA | 	rdword	result3, arg03
128e4     E7 7E 62 FC | 	wrlong	result3, fp
128e8     08 CE 05 F1 | 	add	fp, #8
128ec     E7 38 68 FC | 	wrlong	#28, fp
128f0     08 CE 85 F1 | 	sub	fp, #8
128f4     E7 92 02 F6 | 	mov	arg01, fp
128f8     04 AE BF FD | 	call	#_push
128fc                 | LR__1561
128fc     E7 F0 03 F6 | 	mov	ptra, fp
12900     F2 00 A0 FD | 	call	#popregs_
12904                 | _do_getenvsustain_ret
12904     2D 00 64 FD | 	ret
12908                 | 
12908                 | ' 
12908                 | ' '-------------------- getnotevalue
12908                 | ' 
12908                 | ' sub do_getnotevalue
12908                 | _do_getnotevalue
12908     02 CA 05 F6 | 	mov	COUNT_, #2
1290c     E8 00 A0 FD | 	call	#pushregs_
12910     1C F0 07 F1 | 	add	ptra, #28
12914     58 AD BF FD | 	call	#_pop
12918     3F 95 02 F6 | 	mov	arg02, result3
1291c     10 CE 05 F1 | 	add	fp, #16
12920     E7 7A 62 FC | 	wrlong	result1, fp
12924     04 CE 05 F1 | 	add	fp, #4
12928     E7 7C 62 FC | 	wrlong	result2, fp
1292c     04 CE 05 F1 | 	add	fp, #4
12930     E7 94 62 FC | 	wrlong	arg02, fp
12934     08 CE 85 F1 | 	sub	fp, #8
12938     E7 92 02 F6 | 	mov	arg01, fp
1293c     10 CE 85 F1 | 	sub	fp, #16
12940     08 AF BF FD | 	call	#_converttoint
12944     3D 93 52 F6 | 	abs	arg01, result1 wc
12948     0C 92 16 FD | 	qdiv	arg01, #12
1294c     32 93 02 F6 | 	mov	arg01, objptr
12950     16 00 00 FF 
12954     38 92 06 F1 | 	add	arg01, ##11320
12958     19 7C 62 FD | 	getqy	result2
1295c     3E 7D 82 F6 | 	negc	result2, result2
12960     3D 7B 52 F6 | 	abs	result1, result1 wc
12964     0C 7A 16 FD | 	qdiv	result1, #12
12968     02 7C 66 F0 | 	shl	result2, #2
1296c     49 7D 02 F1 | 	add	result2, arg01
12970     3E A7 02 FB | 	rdlong	local01, result2
12974     18 94 62 FD | 	getqx	arg02
12978     4A 93 82 F6 | 	negc	arg01, arg02
1297c     49 93 52 F6 | 	abs	arg01, arg01 wc
12980     1F A8 C6 C9 |  if_b	decod	local02, #31
12984     00 A8 06 36 |  if_ae	mov	local02, #0
12988     18 43 B1 FD | 	call	#__system___float_fromuns
1298c     54 7B 62 F5 | 	xor	result1, local02
12990     3D 95 02 F6 | 	mov	arg02, result1
12994     1E 92 C6 F9 | 	decod	arg01, #30
12998     24 56 B1 FD | 	call	#__system____builtin_powf
1299c     3D 93 02 F6 | 	mov	arg01, result1
129a0     53 95 02 F6 | 	mov	arg02, local01
129a4     00 47 B1 FD | 	call	#__system___float_mul
129a8     3D A7 02 F6 | 	mov	local01, result1
129ac     10 CE 05 F1 | 	add	fp, #16
129b0     E7 A6 62 FC | 	wrlong	local01, fp
129b4     08 CE 05 F1 | 	add	fp, #8
129b8     E7 3C 68 FC | 	wrlong	#30, fp
129bc     08 CE 85 F1 | 	sub	fp, #8
129c0     E7 92 02 F6 | 	mov	arg01, fp
129c4     10 CE 85 F1 | 	sub	fp, #16
129c8     34 AD BF FD | 	call	#_push
129cc     E7 F0 03 F6 | 	mov	ptra, fp
129d0     F2 00 A0 FD | 	call	#popregs_
129d4                 | _do_getnotevalue_ret
129d4     2D 00 64 FD | 	ret
129d8                 | 
129d8                 | ' 
129d8                 | ' '-------------------- getpixel
129d8                 | ' 
129d8                 | ' sub do_getpixel
129d8                 | _do_getpixel
129d8     01 CA 05 F6 | 	mov	COUNT_, #1
129dc     E8 00 A0 FD | 	call	#pushregs_
129e0     24 F0 07 F1 | 	add	ptra, #36
129e4     4C 00 00 FF 
129e8     24 64 06 F1 | 	add	objptr, ##38948
129ec     32 97 02 FB | 	rdlong	arg03, objptr
129f0     4B 95 02 F6 | 	mov	arg02, arg03
129f4     01 94 66 F0 | 	shl	arg02, #1
129f8     4B 95 02 F1 | 	add	arg02, arg03
129fc     02 94 66 F0 | 	shl	arg02, #2
12a00     03 00 00 FF 
12a04     04 64 86 F1 | 	sub	objptr, ##1540
12a08     32 95 02 F1 | 	add	arg02, objptr
12a0c     4A 97 02 FB | 	rdlong	arg03, arg02
12a10                 | ' 
12a10                 | ' numpar=compiledline(lineptr_e).result.uresult
12a10                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
12a10     02 96 0E F2 | 	cmp	arg03, #2 wz
12a14     49 00 00 FF 
12a18     20 64 86 F1 | 	sub	objptr, ##37408
12a1c     40 00 90 AD |  if_e	jmp	#LR__1570
12a20     00 92 06 F6 | 	mov	arg01, #0
12a24     34 75 B1 FD | 	call	#__system___getiolock_0622
12a28     3D 93 02 F6 | 	mov	arg01, result1
12a2c     A8 1F B1 FD | 	call	#__system___lockmem
12a30     97 01 00 FF 
12a34     5E 95 06 F6 | 	mov	arg02, ##@LR__6018
12a38     00 92 06 F6 | 	mov	arg01, #0
12a3c     00 96 06 F6 | 	mov	arg03, #0
12a40     88 2C B1 FD | 	call	#__system___basic_print_string
12a44     00 92 06 F6 | 	mov	arg01, #0
12a48     10 75 B1 FD | 	call	#__system___getiolock_0622
12a4c     3D 01 68 FC | 	wrlong	#0, result1
12a50     27 92 06 F6 | 	mov	arg01, #39
12a54     00 94 06 F6 | 	mov	arg02, #0
12a58     78 E2 B0 FD | 	call	#_printerror
12a5c     98 00 90 FD | 	jmp	#LR__1571
12a60                 | LR__1570
12a60     0C AC BF FD | 	call	#_pop
12a64     3D 97 02 F6 | 	mov	arg03, result1
12a68     3E 95 02 F6 | 	mov	arg02, result2
12a6c     3F 93 02 F6 | 	mov	arg01, result3
12a70     0C CE 05 F1 | 	add	fp, #12
12a74     E7 96 62 FC | 	wrlong	arg03, fp
12a78     04 CE 05 F1 | 	add	fp, #4
12a7c     E7 94 62 FC | 	wrlong	arg02, fp
12a80     04 CE 05 F1 | 	add	fp, #4
12a84     E7 92 62 FC | 	wrlong	arg01, fp
12a88     14 CE 85 F1 | 	sub	fp, #20
12a8c     E0 AB BF FD | 	call	#_pop
12a90     3F 97 02 F6 | 	mov	arg03, result3
12a94     E7 7A 62 FC | 	wrlong	result1, fp
12a98     04 CE 05 F1 | 	add	fp, #4
12a9c     E7 7C 62 FC | 	wrlong	result2, fp
12aa0     04 CE 05 F1 | 	add	fp, #4
12aa4     E7 96 62 FC | 	wrlong	arg03, fp
12aa8     08 CE 85 F1 | 	sub	fp, #8
12aac     E7 92 02 F6 | 	mov	arg01, fp
12ab0     98 AD BF FD | 	call	#_converttoint
12ab4     3D A7 02 F6 | 	mov	local01, result1
12ab8     E7 92 02 F6 | 	mov	arg01, fp
12abc     0C 92 06 F1 | 	add	arg01, #12
12ac0     88 AD BF FD | 	call	#_converttoint
12ac4     3D 97 02 F6 | 	mov	arg03, result1
12ac8     32 93 02 FB | 	rdlong	arg01, objptr
12acc     53 93 02 F1 | 	add	arg01, local01
12ad0     0A 96 66 F0 | 	shl	arg03, #10
12ad4     4B 93 02 F1 | 	add	arg01, arg03
12ad8     6C E4 B0 FD | 	call	#_pspeek
12adc     3D 7B E2 F8 | 	getbyte	result1, result1, #0
12ae0     E7 7A 62 FC | 	wrlong	result1, fp
12ae4     08 CE 05 F1 | 	add	fp, #8
12ae8     E7 3A 68 FC | 	wrlong	#29, fp
12aec     08 CE 85 F1 | 	sub	fp, #8
12af0     E7 92 02 F6 | 	mov	arg01, fp
12af4     08 AC BF FD | 	call	#_push
12af8                 | LR__1571
12af8     E7 F0 03 F6 | 	mov	ptra, fp
12afc     F2 00 A0 FD | 	call	#popregs_
12b00                 | _do_getpixel_ret
12b00     2D 00 64 FD | 	ret
12b04                 | 
12b04                 | ' 
12b04                 | ' 
12b04                 | ' sub do_getrealfreq
12b04                 | _do_getrealfreq
12b04     00 CA 05 F6 | 	mov	COUNT_, #0
12b08     E8 00 A0 FD | 	call	#pushregs_
12b0c     14 F0 07 F1 | 	add	ptra, #20
12b10     4C 00 00 FF 
12b14     24 64 06 F1 | 	add	objptr, ##38948
12b18     32 97 02 FB | 	rdlong	arg03, objptr
12b1c     4B 95 02 F6 | 	mov	arg02, arg03
12b20     01 94 66 F0 | 	shl	arg02, #1
12b24     4B 95 02 F1 | 	add	arg02, arg03
12b28     02 94 66 F0 | 	shl	arg02, #2
12b2c     03 00 00 FF 
12b30     04 64 86 F1 | 	sub	objptr, ##1540
12b34     32 95 02 F1 | 	add	arg02, objptr
12b38     4A 97 02 FB | 	rdlong	arg03, arg02
12b3c                 | ' 
12b3c                 | ' numpar=compiledline(lineptr_e).result.uresult
12b3c                 | ' if numpar<>1 then print "getrealfreq: "; : printerror(39) : return
12b3c     01 96 0E F2 | 	cmp	arg03, #1 wz
12b40     49 00 00 FF 
12b44     20 64 86 F1 | 	sub	objptr, ##37408
12b48     40 00 90 AD |  if_e	jmp	#LR__1580
12b4c     00 92 06 F6 | 	mov	arg01, #0
12b50     08 74 B1 FD | 	call	#__system___getiolock_0622
12b54     3D 93 02 F6 | 	mov	arg01, result1
12b58     7C 1E B1 FD | 	call	#__system___lockmem
12b5c     97 01 00 FF 
12b60     69 95 06 F6 | 	mov	arg02, ##@LR__6019
12b64     00 92 06 F6 | 	mov	arg01, #0
12b68     00 96 06 F6 | 	mov	arg03, #0
12b6c     5C 2B B1 FD | 	call	#__system___basic_print_string
12b70     00 92 06 F6 | 	mov	arg01, #0
12b74     E4 73 B1 FD | 	call	#__system___getiolock_0622
12b78     3D 01 68 FC | 	wrlong	#0, result1
12b7c     27 92 06 F6 | 	mov	arg01, #39
12b80     00 94 06 F6 | 	mov	arg02, #0
12b84     4C E1 B0 FD | 	call	#_printerror
12b88     78 00 90 FD | 	jmp	#LR__1581
12b8c                 | LR__1580
12b8c     E0 AA BF FD | 	call	#_pop
12b90     3D 97 02 F6 | 	mov	arg03, result1
12b94     04 CE 05 F1 | 	add	fp, #4
12b98     E7 96 62 FC | 	wrlong	arg03, fp
12b9c     04 CE 05 F1 | 	add	fp, #4
12ba0     E7 7C 62 FC | 	wrlong	result2, fp
12ba4     04 CE 05 F1 | 	add	fp, #4
12ba8     E7 7E 62 FC | 	wrlong	result3, fp
12bac     08 CE 85 F1 | 	sub	fp, #8
12bb0     E7 92 02 F6 | 	mov	arg01, fp
12bb4     04 CE 85 F1 | 	sub	fp, #4
12bb8     90 AC BF FD | 	call	#_converttoint
12bbc     3D 95 02 F6 | 	mov	arg02, result1
12bc0     03 94 66 F0 | 	shl	arg02, #3
12bc4     3D 95 82 F1 | 	sub	arg02, result1
12bc8     02 94 66 F0 | 	shl	arg02, #2
12bcc     32 97 02 F6 | 	mov	arg03, objptr
12bd0     16 00 00 FF 
12bd4     BC 96 06 F1 | 	add	arg03, ##11452
12bd8     4B 95 02 F1 | 	add	arg02, arg03
12bdc     18 94 06 F1 | 	add	arg02, #24
12be0     4A 97 02 FB | 	rdlong	arg03, arg02
12be4     04 CE 05 F1 | 	add	fp, #4
12be8     E7 96 62 FC | 	wrlong	arg03, fp
12bec     08 CE 05 F1 | 	add	fp, #8
12bf0     E7 3C 68 FC | 	wrlong	#30, fp
12bf4     08 CE 85 F1 | 	sub	fp, #8
12bf8     E7 92 02 F6 | 	mov	arg01, fp
12bfc     04 CE 85 F1 | 	sub	fp, #4
12c00     FC AA BF FD | 	call	#_push
12c04                 | LR__1581
12c04     E7 F0 03 F6 | 	mov	ptra, fp
12c08     F2 00 A0 FD | 	call	#popregs_
12c0c                 | _do_getrealfreq_ret
12c0c     2D 00 64 FD | 	ret
12c10                 | 
12c10                 | ' 
12c10                 | ' 
12c10                 | ' '-------------------- gettime
12c10                 | ' 
12c10                 | ' sub do_gettime
12c10                 | _do_gettime
12c10     02 CA 05 F6 | 	mov	COUNT_, #2
12c14     E8 00 A0 FD | 	call	#pushregs_
12c18     14 F0 07 F1 | 	add	ptra, #20
12c1c                 | ' 
12c1c                 | ' const asm 
12c1c     1A A6 72 FD | 	getct	local01 wc
12c20     1A A8 62 FD | 	getct	local02
12c24                 | ' return hi1, lo1
12c24     54 7D 02 F6 | 	mov	result2, local02
12c28     53 7B 02 F6 | 	mov	result1, local01
12c2c     10 CE 05 F1 | 	add	fp, #16
12c30     E7 3A 68 FC | 	wrlong	#29, fp
12c34     08 CE 85 F1 | 	sub	fp, #8
12c38     E7 7C 62 FC | 	wrlong	result2, fp
12c3c     04 CE 05 F1 | 	add	fp, #4
12c40     E7 7A 62 FC | 	wrlong	result1, fp
12c44     04 CE 85 F1 | 	sub	fp, #4
12c48     E7 92 02 F6 | 	mov	arg01, fp
12c4c     08 CE 85 F1 | 	sub	fp, #8
12c50     AC AA BF FD | 	call	#_push
12c54     E7 F0 03 F6 | 	mov	ptra, fp
12c58     F2 00 A0 FD | 	call	#popregs_
12c5c                 | _do_gettime_ret
12c5c     2D 00 64 FD | 	ret
12c60                 | 
12c60                 | ' 
12c60                 | ' '-------------------- gosub
12c60                 | ' 
12c60                 | ' sub do_gosub()
12c60                 | _do_gosub
12c60     52 00 00 FF 
12c64     D8 64 06 F1 | 	add	objptr, ##42200
12c68     32 81 02 FB | 	rdlong	_var01, objptr
12c6c     01 80 06 F1 | 	add	_var01, #1
12c70     32 81 62 FC | 	wrlong	_var01, objptr
12c74                 | ' gosubtop+=1
12c74                 | ' if compiledline(lineptr_e+1).result_type=token_end then
12c74     06 00 00 FF 
12c78     B4 64 86 F1 | 	sub	objptr, ##3252
12c7c     32 81 02 FB | 	rdlong	_var01, objptr
12c80     01 80 06 F1 | 	add	_var01, #1
12c84     40 83 02 F6 | 	mov	_var02, _var01
12c88     01 82 66 F0 | 	shl	_var02, #1
12c8c     40 83 02 F1 | 	add	_var02, _var01
12c90     02 82 66 F0 | 	shl	_var02, #2
12c94     03 00 00 FF 
12c98     04 64 86 F1 | 	sub	objptr, ##1540
12c9c     32 83 02 F1 | 	add	_var02, objptr
12ca0     08 82 06 F1 | 	add	_var02, #8
12ca4     41 83 02 FB | 	rdlong	_var02, _var02
12ca8     FE 83 0E F2 | 	cmp	_var02, #510 wz
12cac     49 00 00 FF 
12cb0     20 64 86 F1 | 	sub	objptr, ##37408
12cb4     58 00 90 5D |  if_ne	jmp	#LR__1590
12cb8     52 00 00 FF 
12cbc     D8 64 06 F1 | 	add	objptr, ##42200
12cc0     32 83 02 FB | 	rdlong	_var02, objptr
12cc4     03 82 66 F0 | 	shl	_var02, #3
12cc8     03 00 00 FF 
12ccc     88 65 86 F1 | 	sub	objptr, ##1928
12cd0     32 83 02 F1 | 	add	_var02, objptr
12cd4     03 00 00 FF 
12cd8     0C 65 06 F1 | 	add	objptr, ##1804
12cdc     32 81 02 FB | 	rdlong	_var01, objptr
12ce0     41 81 62 FC | 	wrlong	_var01, _var02
12ce4     7C 64 06 F1 | 	add	objptr, #124
12ce8     32 83 02 FB | 	rdlong	_var02, objptr
12cec     03 82 66 F0 | 	shl	_var02, #3
12cf0     03 00 00 FF 
12cf4     88 65 86 F1 | 	sub	objptr, ##1928
12cf8     32 83 02 F1 | 	add	_var02, objptr
12cfc     04 82 06 F1 | 	add	_var02, #4
12d00     41 01 68 FC | 	wrlong	#0, _var02
12d04     4E 00 00 FF 
12d08     50 65 86 F1 | 	sub	objptr, ##40272
12d0c     64 00 90 FD | 	jmp	#LR__1591
12d10                 | LR__1590
12d10     52 00 00 FF 
12d14     D8 64 06 F1 | 	add	objptr, ##42200
12d18     32 83 02 FB | 	rdlong	_var02, objptr
12d1c     03 82 66 F0 | 	shl	_var02, #3
12d20     03 00 00 FF 
12d24     88 65 86 F1 | 	sub	objptr, ##1928
12d28     32 83 02 F1 | 	add	_var02, objptr
12d2c     03 00 00 FF 
12d30     14 65 06 F1 | 	add	objptr, ##1812
12d34     32 81 02 FB | 	rdlong	_var01, objptr
12d38     41 81 62 FC | 	wrlong	_var01, _var02
12d3c     74 64 06 F1 | 	add	objptr, #116
12d40     32 83 02 FB | 	rdlong	_var02, objptr
12d44     03 82 66 F0 | 	shl	_var02, #3
12d48     03 00 00 FF 
12d4c     88 65 86 F1 | 	sub	objptr, ##1928
12d50     32 83 02 F1 | 	add	_var02, objptr
12d54     02 00 00 FF 
12d58     2C 65 86 F1 | 	sub	objptr, ##1324
12d5c     32 81 02 FB | 	rdlong	_var01, objptr
12d60     4C 00 00 FF 
12d64     24 64 86 F1 | 	sub	objptr, ##38948
12d68     02 80 06 F1 | 	add	_var01, #2
12d6c     04 82 06 F1 | 	add	_var02, #4
12d70     41 81 62 FC | 	wrlong	_var01, _var02
12d74                 | LR__1591
12d74                 | _do_gosub_ret
12d74     2D 00 64 FD | 	ret
12d78                 | 
12d78                 | ' 
12d78                 | ' '--------------------- goto
12d78                 | ' 
12d78                 | ' '------- fast goto
12d78                 | ' 
12d78                 | ' sub do_fast_goto
12d78                 | _do_fast_goto
12d78     02 CA 05 F6 | 	mov	COUNT_, #2
12d7c     E8 00 A0 FD | 	call	#pushregs_
12d80                 | _do_fast_goto_enter
12d80     4C 00 00 FF 
12d84     24 64 06 F1 | 	add	objptr, ##38948
12d88     32 93 02 FB | 	rdlong	arg01, objptr
12d8c     49 A7 02 F6 | 	mov	local01, arg01
12d90     01 A6 66 F0 | 	shl	local01, #1
12d94     49 A7 02 F1 | 	add	local01, arg01
12d98     02 A6 66 F0 | 	shl	local01, #2
12d9c     03 00 00 FF 
12da0     04 64 86 F1 | 	sub	objptr, ##1540
12da4     32 A7 02 F1 | 	add	local01, objptr
12da8     53 A9 02 FB | 	rdlong	local02, local01
12dac     54 93 02 F6 | 	mov	arg01, local02
12db0     49 00 00 FF 
12db4     20 64 86 F1 | 	sub	objptr, ##37408
12db8     D4 E1 B0 FD | 	call	#_pslpeek
12dbc     3D 93 02 F6 | 	mov	arg01, result1
12dc0                 | ' 
12dc0                 | ' testptr=compiledline(lineptr_e).result.uresult
12dc0                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
12dc0                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
12dc0     4C 00 00 FF 
12dc4     24 64 06 F1 | 	add	objptr, ##38948
12dc8     32 7B 02 FB | 	rdlong	result1, objptr
12dcc     3D A7 02 F6 | 	mov	local01, result1
12dd0     01 A6 66 F0 | 	shl	local01, #1
12dd4     3D A7 02 F1 | 	add	local01, result1
12dd8     02 A6 66 F0 | 	shl	local01, #2
12ddc     03 00 00 FF 
12de0     04 64 86 F1 | 	sub	objptr, ##1540
12de4     32 A7 02 F1 | 	add	local01, objptr
12de8     04 A6 06 F1 | 	add	local01, #4
12dec     53 A7 02 FB | 	rdlong	local01, local01
12df0     53 93 0A F2 | 	cmp	arg01, local01 wz
12df4     49 00 00 FF 
12df8     20 64 86 F1 | 	sub	objptr, ##37408
12dfc     58 00 90 5D |  if_ne	jmp	#LR__1600
12e00     52 00 00 FF 
12e04     5C 64 06 F1 | 	add	objptr, ##42076
12e08     32 A9 62 FC | 	wrlong	local02, objptr
12e0c     06 00 00 FF 
12e10     3C 64 86 F1 | 	sub	objptr, ##3132
12e14     32 A9 02 FB | 	rdlong	local02, objptr
12e18     01 A8 86 F1 | 	sub	local02, #1
12e1c     04 64 06 F1 | 	add	objptr, #4
12e20     32 A9 62 FC | 	wrlong	local02, objptr
12e24                 | '   runptr=testptr
12e24                 | '   lineptr_e=lineptr-1
12e24                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
12e24     06 00 00 FF 
12e28     84 64 06 F1 | 	add	objptr, ##3204
12e2c     32 A9 02 FB | 	rdlong	local02, objptr
12e30     52 00 00 FF 
12e34     A8 64 86 F1 | 	sub	objptr, ##42152
12e38     FF FF 3F FF 
12e3c     FF A9 0E F2 | 	cmp	local02, ##2147483647 wz
12e40     52 00 00 AF 
12e44     A8 64 06 A1 |  if_e	add	objptr, ##42152
12e48     32 01 68 AC |  if_e	wrlong	#0, objptr
12e4c     52 00 00 AF 
12e50     A8 64 86 A1 |  if_e	sub	objptr, ##42152
12e54     04 00 90 FD | 	jmp	#LR__1601
12e58                 | LR__1600
12e58     0C 00 B0 FD | 	call	#_do_find_goto
12e5c                 | LR__1601
12e5c     E7 F0 03 F6 | 	mov	ptra, fp
12e60     F2 00 A0 FD | 	call	#popregs_
12e64                 | _do_fast_goto_ret
12e64     2D 00 64 FD | 	ret
12e68                 | 
12e68                 | ' 
12e68                 | ' '------- find goto  
12e68                 | ' 
12e68                 | ' sub do_find_goto
12e68                 | _do_find_goto
12e68     06 CA 05 F6 | 	mov	COUNT_, #6
12e6c     E8 00 A0 FD | 	call	#pushregs_
12e70     24 F0 07 F1 | 	add	ptra, #36
12e74                 | _do_find_goto_enter
12e74     4C 00 00 FF 
12e78     24 64 06 F1 | 	add	objptr, ##38948
12e7c     32 A7 02 FB | 	rdlong	local01, objptr
12e80     53 A9 02 F6 | 	mov	local02, local01
12e84     01 A8 66 F0 | 	shl	local02, #1
12e88     53 A9 02 F1 | 	add	local02, local01
12e8c     02 A8 66 F0 | 	shl	local02, #2
12e90     03 00 00 FF 
12e94     04 64 86 F1 | 	sub	objptr, ##1540
12e98     32 AB 02 F6 | 	mov	local03, objptr
12e9c     32 A9 02 F1 | 	add	local02, objptr
12ea0     04 A8 06 F1 | 	add	local02, #4
12ea4     54 AD 02 FB | 	rdlong	local04, local02
12ea8     03 00 00 FF 
12eac     0C 64 06 F1 | 	add	objptr, ##1548
12eb0     32 AF 02 FB | 	rdlong	local05, objptr
12eb4                 | ' 
12eb4                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
12eb4                 | ' gotoptr=programstart
12eb4                 | ' do
12eb4     40 00 00 FF 
12eb8     60 65 86 F1 | 	sub	objptr, ##33120
12ebc                 | LR__1610
12ebc     E7 92 02 F6 | 	mov	arg01, fp
12ec0     0C 92 06 F1 | 	add	arg01, #12
12ec4     57 95 02 F6 | 	mov	arg02, local05
12ec8     18 96 06 F6 | 	mov	arg03, #24
12ecc     94 0B B1 FD | 	call	#_psram4_spin2_read1
12ed0                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
12ed0                 | '   if gotoheader(0)<>$FFFFFFFF then
12ed0     0C CE 05 F1 | 	add	fp, #12
12ed4     E7 A8 02 FB | 	rdlong	local02, fp
12ed8     0C CE 85 F1 | 	sub	fp, #12
12edc     FF FF 7F FF 
12ee0     FF A9 0E F2 | 	cmp	local02, ##-1 wz
12ee4     57 B1 02 56 |  if_ne	mov	local06, local05
12ee8     20 CE 05 51 |  if_ne	add	fp, #32
12eec     E7 AE 02 5B |  if_ne	rdlong	local05, fp
12ef0     20 CE 85 51 |  if_ne	sub	fp, #32
12ef4     20 CE 05 F1 | 	add	fp, #32
12ef8     E7 A8 02 FB | 	rdlong	local02, fp
12efc     20 CE 85 F1 | 	sub	fp, #32
12f00     FF FF 3F FF 
12f04     FF A9 0E F2 | 	cmp	local02, ##2147483647 wz
12f08     0C CE 05 51 |  if_ne	add	fp, #12
12f0c     E7 A6 02 5B |  if_ne	rdlong	local01, fp
12f10     0C CE 85 51 |  if_ne	sub	fp, #12
12f14     FF FF 7F 5F 
12f18     FF A7 0E 52 |  if_ne	cmp	local01, ##-1 wz
12f1c     0C CE 05 51 |  if_ne	add	fp, #12
12f20     53 AB 02 56 |  if_ne	mov	local03, local01
12f24     0C CE 85 51 |  if_ne	sub	fp, #12
12f28     56 AB 0A 52 |  if_ne	cmp	local03, local04 wz
12f2c     8C FF 9F 5D |  if_ne	jmp	#LR__1610
12f30     0B 00 00 FF 
12f34     CC 64 86 F1 | 	sub	objptr, ##5836
12f38                 | ' 
12f38                 | ' if gotoheader(0)=gotoline then
12f38     0C CE 05 F1 | 	add	fp, #12
12f3c     E7 AE 02 FB | 	rdlong	local05, fp
12f40     0C CE 85 F1 | 	sub	fp, #12
12f44     56 AF 0A F2 | 	cmp	local05, local04 wz
12f48     CC 00 90 5D |  if_ne	jmp	#LR__1611
12f4c     4C 00 00 FF 
12f50     24 64 06 F1 | 	add	objptr, ##38948
12f54     32 A7 02 FB | 	rdlong	local01, objptr
12f58     53 A9 02 F6 | 	mov	local02, local01
12f5c     01 A8 66 F0 | 	shl	local02, #1
12f60     53 A9 02 F1 | 	add	local02, local01
12f64     02 A8 66 F0 | 	shl	local02, #2
12f68     03 00 00 FF 
12f6c     04 64 86 F1 | 	sub	objptr, ##1540
12f70     32 A9 02 F1 | 	add	local02, objptr
12f74     54 B1 62 FC | 	wrlong	local06, local02
12f78     03 00 00 FF 
12f7c     04 64 06 F1 | 	add	objptr, ##1540
12f80     32 A7 02 FB | 	rdlong	local01, objptr
12f84     53 A9 02 F6 | 	mov	local02, local01
12f88     01 A8 66 F0 | 	shl	local02, #1
12f8c     53 A9 02 F1 | 	add	local02, local01
12f90     02 A8 66 F0 | 	shl	local02, #2
12f94     03 00 00 FF 
12f98     04 64 86 F1 | 	sub	objptr, ##1540
12f9c     32 A9 02 F1 | 	add	local02, objptr
12fa0     08 A8 06 F1 | 	add	local02, #8
12fa4     54 9D 68 FC | 	wrlong	#78, local02
12fa8     03 00 00 FF 
12fac     04 64 06 F1 | 	add	objptr, ##1540
12fb0     32 B1 02 FB | 	rdlong	local06, objptr
12fb4     58 93 02 F6 | 	mov	arg01, local06
12fb8     01 92 66 F0 | 	shl	arg01, #1
12fbc     58 93 02 F1 | 	add	arg01, local06
12fc0     02 92 66 F0 | 	shl	arg01, #2
12fc4     03 00 00 FF 
12fc8     04 64 86 F1 | 	sub	objptr, ##1540
12fcc     32 93 02 F1 | 	add	arg01, objptr
12fd0     09 00 00 FF 
12fd4     44 64 06 F1 | 	add	objptr, ##4676
12fd8     32 95 02 FB | 	rdlong	arg02, objptr
12fdc     02 AA 06 F6 | 	mov	local03, #2
12fe0     58 AB 02 F1 | 	add	local03, local06
12fe4     0B 00 00 FF 
12fe8     5C 64 86 F1 | 	sub	objptr, ##5724
12fec     32 97 02 FB | 	rdlong	arg03, objptr
12ff0     4B AB 02 FD | 	qmul	local03, arg03
12ff4     3B 00 00 FF 
12ff8     3C 65 86 F1 | 	sub	objptr, ##30524
12ffc     18 B0 62 FD | 	getqx	local06
13000     58 95 02 F1 | 	add	arg02, local06
13004     F8 0A B1 FD | 	call	#_psram4_spin2_write
13008     0B 00 00 FF 
1300c     CC 64 86 F1 | 	sub	objptr, ##5836
13010     64 FD BF FD | 	call	#_do_fast_goto
13014     0C 00 90 FD | 	jmp	#LR__1612
13018                 | LR__1611
13018     26 92 06 F6 | 	mov	arg01, #38
1301c     00 94 06 F6 | 	mov	arg02, #0
13020     B0 DC B0 FD | 	call	#_printerror
13024                 | LR__1612
13024     E7 F0 03 F6 | 	mov	ptra, fp
13028     F2 00 A0 FD | 	call	#popregs_
1302c                 | _do_find_goto_ret
1302c     2D 00 64 FD | 	ret
13030                 | 
13030                 | ' 
13030                 | ' '------- slow goto  
13030                 | ' 
13030                 | ' sub do_slow_goto
13030                 | _do_slow_goto
13030     05 CA 05 F6 | 	mov	COUNT_, #5
13034     E8 00 A0 FD | 	call	#pushregs_
13038     30 F0 07 F1 | 	add	ptra, #48
1303c     30 A6 BF FD | 	call	#_pop
13040     3F A7 02 F6 | 	mov	local01, result3
13044     24 CE 05 F1 | 	add	fp, #36
13048     E7 7A 62 FC | 	wrlong	result1, fp
1304c     04 CE 05 F1 | 	add	fp, #4
13050     E7 7C 62 FC | 	wrlong	result2, fp
13054     04 CE 05 F1 | 	add	fp, #4
13058     E7 A6 62 FC | 	wrlong	local01, fp
1305c     08 CE 85 F1 | 	sub	fp, #8
13060     E7 92 02 F6 | 	mov	arg01, fp
13064     24 CE 85 F1 | 	sub	fp, #36
13068     E0 A7 BF FD | 	call	#_converttoint
1306c     3D A9 02 F6 | 	mov	local02, result1
13070     4C 00 00 FF 
13074     2C 64 06 F1 | 	add	objptr, ##38956
13078     32 AB 02 FB | 	rdlong	local03, objptr
1307c                 | ' 
1307c                 | ' t1=pop() : gotoline=converttoint(t1)
1307c                 | ' gotoptr=programstart
1307c                 | ' do
1307c     40 00 00 FF 
13080     60 65 86 F1 | 	sub	objptr, ##33120
13084                 | LR__1620
13084     E7 92 02 F6 | 	mov	arg01, fp
13088     0C 92 06 F1 | 	add	arg01, #12
1308c     55 95 02 F6 | 	mov	arg02, local03
13090     18 96 06 F6 | 	mov	arg03, #24
13094     CC 09 B1 FD | 	call	#_psram4_spin2_read1
13098                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
13098                 | '   if gotoheader(0)<>$FFFFFFFF then
13098     0C CE 05 F1 | 	add	fp, #12
1309c     E7 96 02 FB | 	rdlong	arg03, fp
130a0     0C CE 85 F1 | 	sub	fp, #12
130a4     FF FF 7F FF 
130a8     FF 97 0E F2 | 	cmp	arg03, ##-1 wz
130ac     55 AD 02 56 |  if_ne	mov	local04, local03
130b0     20 CE 05 51 |  if_ne	add	fp, #32
130b4     E7 AA 02 5B |  if_ne	rdlong	local03, fp
130b8     20 CE 85 51 |  if_ne	sub	fp, #32
130bc     20 CE 05 F1 | 	add	fp, #32
130c0     E7 96 02 FB | 	rdlong	arg03, fp
130c4     20 CE 85 F1 | 	sub	fp, #32
130c8     FF FF 3F FF 
130cc     FF 97 0E F2 | 	cmp	arg03, ##2147483647 wz
130d0     0C CE 05 51 |  if_ne	add	fp, #12
130d4     E7 A6 02 5B |  if_ne	rdlong	local01, fp
130d8     0C CE 85 51 |  if_ne	sub	fp, #12
130dc     FF FF 7F 5F 
130e0     FF A7 0E 52 |  if_ne	cmp	local01, ##-1 wz
130e4     0C CE 05 51 |  if_ne	add	fp, #12
130e8     53 AF 02 56 |  if_ne	mov	local05, local01
130ec     0C CE 85 51 |  if_ne	sub	fp, #12
130f0     54 AF 0A 52 |  if_ne	cmp	local05, local02 wz
130f4     8C FF 9F 5D |  if_ne	jmp	#LR__1620
130f8     0B 00 00 FF 
130fc     CC 64 86 F1 | 	sub	objptr, ##5836
13100                 | ' if gotoheader(0)=gotoline then  
13100     0C CE 05 F1 | 	add	fp, #12
13104     E7 AE 02 FB | 	rdlong	local05, fp
13108     0C CE 85 F1 | 	sub	fp, #12
1310c     54 AF 0A F2 | 	cmp	local05, local02 wz
13110     54 00 90 5D |  if_ne	jmp	#LR__1621
13114     52 00 00 FF 
13118     5C 64 06 F1 | 	add	objptr, ##42076
1311c     32 AD 62 FC | 	wrlong	local04, objptr
13120     06 00 00 FF 
13124     3C 64 86 F1 | 	sub	objptr, ##3132
13128     32 AF 02 FB | 	rdlong	local05, objptr
1312c     01 AE 86 F1 | 	sub	local05, #1
13130     04 64 06 F1 | 	add	objptr, #4
13134     32 AF 62 FC | 	wrlong	local05, objptr
13138                 | '    runptr=oldgotoptr
13138                 | '    lineptr_e=lineptr-1
13138                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0 
13138     06 00 00 FF 
1313c     84 64 06 F1 | 	add	objptr, ##3204
13140     32 AF 02 FB | 	rdlong	local05, objptr
13144     52 00 00 FF 
13148     A8 64 86 F1 | 	sub	objptr, ##42152
1314c     FF FF 3F FF 
13150     FF AF 0E F2 | 	cmp	local05, ##2147483647 wz
13154     52 00 00 AF 
13158     A8 64 06 A1 |  if_e	add	objptr, ##42152
1315c     32 01 68 AC |  if_e	wrlong	#0, objptr
13160     52 00 00 AF 
13164     A8 64 86 A1 |  if_e	sub	objptr, ##42152
13168                 | LR__1621
13168     E7 F0 03 F6 | 	mov	ptra, fp
1316c     F2 00 A0 FD | 	call	#popregs_
13170                 | _do_slow_goto_ret
13170     2D 00 64 FD | 	ret
13174                 | 
13174                 | ' 
13174                 | ' ' ----------------  hex$
13174                 | ' 
13174                 | ' sub do_hex
13174                 | _do_hex
13174     02 CA 05 F6 | 	mov	COUNT_, #2
13178     E8 00 A0 FD | 	call	#pushregs_
1317c     18 F0 07 F1 | 	add	ptra, #24
13180     4C 00 00 FF 
13184     24 64 06 F1 | 	add	objptr, ##38948
13188     32 97 02 FB | 	rdlong	arg03, objptr
1318c     4B 95 02 F6 | 	mov	arg02, arg03
13190     01 94 66 F0 | 	shl	arg02, #1
13194     4B 95 02 F1 | 	add	arg02, arg03
13198     02 94 66 F0 | 	shl	arg02, #2
1319c     03 00 00 FF 
131a0     04 64 86 F1 | 	sub	objptr, ##1540
131a4     32 95 02 F1 | 	add	arg02, objptr
131a8     4A A7 02 FB | 	rdlong	local01, arg02
131ac                 | ' 
131ac                 | ' numpar=compiledline(lineptr_e).result.uresult
131ac                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
131ac     03 A6 16 F2 | 	cmp	local01, #3 wc
131b0     49 00 00 FF 
131b4     20 64 86 F1 | 	sub	objptr, ##37408
131b8     00 A6 0E C2 |  if_b	cmp	local01, #0 wz
131bc     40 00 90 4D |  if_c_and_nz	jmp	#LR__1630
131c0     00 92 06 F6 | 	mov	arg01, #0
131c4     94 6D B1 FD | 	call	#__system___getiolock_0622
131c8     3D 93 02 F6 | 	mov	arg01, result1
131cc     08 18 B1 FD | 	call	#__system___lockmem
131d0     97 01 00 FF 
131d4     77 95 06 F6 | 	mov	arg02, ##@LR__6020
131d8     00 92 06 F6 | 	mov	arg01, #0
131dc     00 96 06 F6 | 	mov	arg03, #0
131e0     E8 24 B1 FD | 	call	#__system___basic_print_string
131e4     00 92 06 F6 | 	mov	arg01, #0
131e8     70 6D B1 FD | 	call	#__system___getiolock_0622
131ec     3D 01 68 FC | 	wrlong	#0, result1
131f0     27 92 06 F6 | 	mov	arg01, #39
131f4     00 94 06 F6 | 	mov	arg02, #0
131f8     D8 DA B0 FD | 	call	#_printerror
131fc     8C 00 90 FD | 	jmp	#LR__1633
13200                 | LR__1630
13200                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
13200     02 A6 0E F2 | 	cmp	local01, #2 wz
13204     30 00 90 5D |  if_ne	jmp	#LR__1631
13208     64 A4 BF FD | 	call	#_pop
1320c     3F A7 02 F6 | 	mov	local01, result3
13210     E7 7A 62 FC | 	wrlong	result1, fp
13214     04 CE 05 F1 | 	add	fp, #4
13218     E7 7C 62 FC | 	wrlong	result2, fp
1321c     04 CE 05 F1 | 	add	fp, #4
13220     E7 A6 62 FC | 	wrlong	local01, fp
13224     08 CE 85 F1 | 	sub	fp, #8
13228     E7 92 02 F6 | 	mov	arg01, fp
1322c     1C A6 BF FD | 	call	#_converttoint
13230     3D A9 02 F6 | 	mov	local02, result1
13234     04 00 90 FD | 	jmp	#LR__1632
13238                 | LR__1631
13238     08 A8 06 F6 | 	mov	local02, #8
1323c                 | LR__1632
1323c     30 A4 BF FD | 	call	#_pop
13240     3F A7 02 F6 | 	mov	local01, result3
13244     E7 7A 62 FC | 	wrlong	result1, fp
13248     04 CE 05 F1 | 	add	fp, #4
1324c     E7 7C 62 FC | 	wrlong	result2, fp
13250     04 CE 05 F1 | 	add	fp, #4
13254     E7 A6 62 FC | 	wrlong	local01, fp
13258     08 CE 85 F1 | 	sub	fp, #8
1325c     E7 92 02 F6 | 	mov	arg01, fp
13260     E8 A5 BF FD | 	call	#_converttoint
13264     3D 93 02 F6 | 	mov	arg01, result1
13268     54 95 02 F6 | 	mov	arg02, local02
1326c     10 96 06 F6 | 	mov	arg03, #16
13270     60 32 B1 FD | 	call	#__system__Number_S
13274     E7 7A 62 FC | 	wrlong	result1, fp
13278     08 CE 05 F1 | 	add	fp, #8
1327c     E7 3E 68 FC | 	wrlong	#31, fp
13280     08 CE 85 F1 | 	sub	fp, #8
13284     E7 92 02 F6 | 	mov	arg01, fp
13288     74 A4 BF FD | 	call	#_push
1328c                 | LR__1633
1328c     E7 F0 03 F6 | 	mov	ptra, fp
13290     F2 00 A0 FD | 	call	#popregs_
13294                 | _do_hex_ret
13294     2D 00 64 FD | 	ret
13298                 | 
13298                 | ' 
13298                 | ' ' ----------------  if
13298                 | ' 
13298                 | ' sub do_if
13298                 | _do_if
13298     05 CA 05 F6 | 	mov	COUNT_, #5
1329c     E8 00 A0 FD | 	call	#pushregs_
132a0     CC A3 BF FD | 	call	#_pop
132a4     3D A7 0A F6 | 	mov	local01, result1 wz
132a8     3E A9 02 F6 | 	mov	local02, result2
132ac     3F AB 02 F6 | 	mov	local03, result3
132b0                 | ' t1=pop()
132b0                 | ' ' if uresult=0, jump over else
132b0                 | ' if t1.result.uresult = 0 then 
132b0     BC 00 90 5D |  if_ne	jmp	#LR__1642
132b4                 | '   for i=lineptr_e to lineptr-1
132b4     4C 00 00 FF 
132b8     24 64 06 F1 | 	add	objptr, ##38948
132bc     32 AD 02 FB | 	rdlong	local04, objptr
132c0     04 64 86 F1 | 	sub	objptr, #4
132c4     32 AF 02 FB | 	rdlong	local05, objptr
132c8     4C 00 00 FF 
132cc     20 64 86 F1 | 	sub	objptr, ##38944
132d0                 | LR__1640
132d0     57 AD 52 F2 | 	cmps	local04, local05 wc
132d4     78 00 90 3D |  if_ae	jmp	#LR__1641
132d8     56 7F 02 F6 | 	mov	result3, local04
132dc     01 7E 66 F0 | 	shl	result3, #1
132e0     56 7F 02 F1 | 	add	result3, local04
132e4     02 7E 66 F0 | 	shl	result3, #2
132e8     49 00 00 FF 
132ec     20 64 06 F1 | 	add	objptr, ##37408
132f0     32 7F 02 F1 | 	add	result3, objptr
132f4     3F A7 02 FB | 	rdlong	local01, result3
132f8     04 7E 06 F1 | 	add	result3, #4
132fc     3F 7D 02 FB | 	rdlong	result2, result3
13300     56 7F 02 F6 | 	mov	result3, local04
13304     01 7E 66 F0 | 	shl	result3, #1
13308     56 7F 02 F1 | 	add	result3, local04
1330c     02 7E 66 F0 | 	shl	result3, #2
13310     32 7F 02 F1 | 	add	result3, objptr
13314     08 7E 06 F1 | 	add	result3, #8
13318     3F 7F 02 FB | 	rdlong	result3, result3
1331c     3E A9 02 F6 | 	mov	local02, result2
13320     3F AB 02 F6 | 	mov	local03, result3
13324                 | '     t1=compiledline(i)
13324                 | '     if t1.result_type=token_else then lineptr_e=i : return
13324     5A AA 0E F2 | 	cmp	local03, #90 wz
13328     49 00 00 FF 
1332c     20 64 86 F1 | 	sub	objptr, ##37408
13330     4C 00 00 AF 
13334     24 64 06 A1 |  if_e	add	objptr, ##38948
13338     32 AD 62 AC |  if_e	wrlong	local04, objptr
1333c     4C 00 00 AF 
13340     24 64 86 A1 |  if_e	sub	objptr, ##38948
13344     28 00 90 AD |  if_e	jmp	#LR__1643
13348     01 AC 06 F1 | 	add	local04, #1
1334c     80 FF 9F FD | 	jmp	#LR__1640
13350                 | LR__1641
13350     4C 00 00 FF 
13354     20 64 06 F1 | 	add	objptr, ##38944
13358     32 AF 02 FB | 	rdlong	local05, objptr
1335c     01 AE 86 F1 | 	sub	local05, #1
13360     04 64 06 F1 | 	add	objptr, #4
13364     32 AF 62 FC | 	wrlong	local05, objptr
13368     4C 00 00 FF 
1336c     24 64 86 F1 | 	sub	objptr, ##38948
13370                 | LR__1642
13370                 | LR__1643
13370     E7 F0 03 F6 | 	mov	ptra, fp
13374     F2 00 A0 FD | 	call	#popregs_
13378                 | _do_if_ret
13378     2D 00 64 FD | 	ret
1337c                 | 
1337c                 | ' 
1337c                 | ' ' ----------------  inkey$
1337c                 | ' 
1337c                 | ' sub do_inkey
1337c                 | _do_inkey
1337c     02 CA 05 F6 | 	mov	COUNT_, #2
13380     E8 00 A0 FD | 	call	#pushregs_
13384     0C F0 07 F1 | 	add	ptra, #12
13388     F4 0A B1 FD | 	call	#_usbnew_spin2_get_key
1338c     47 00 00 FF 
13390     18 64 06 F1 | 	add	objptr, ##36376
13394     32 7B 62 FC | 	wrlong	result1, objptr
13398                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
13398     47 00 00 FF 
1339c     18 64 86 F1 | 	sub	objptr, ##36376
133a0     00 7A 0E F2 | 	cmp	result1, #0 wz
133a4     A0 00 90 AD |  if_e	jmp	#LR__1651
133a8     47 00 00 FF 
133ac     18 64 06 F1 | 	add	objptr, ##36376
133b0     32 A3 02 FB | 	rdlong	arg09, objptr
133b4     47 00 00 FF 
133b8     18 64 86 F1 | 	sub	objptr, ##36376
133bc     00 00 40 FF 
133c0     00 A2 16 F2 | 	cmp	arg09, ##-2147483648 wc
133c4     47 00 00 CF 
133c8     18 64 06 C1 |  if_b	add	objptr, ##36376
133cc     32 A7 02 CB |  if_b	rdlong	local01, objptr
133d0     47 00 00 CF 
133d4     18 64 86 C1 |  if_b	sub	objptr, ##36376
133d8     53 A7 E2 C8 |  if_b	getbyte	local01, local01, #0
133dc     E0 A6 16 C2 |  if_b	cmp	local01, #224 wc
133e0     64 00 90 3D |  if_ae	jmp	#LR__1651
133e4                 | '   if keyclick=1 then audio.play(7,keyclick_spl,44100,4096,spl_len) 
133e4     52 00 00 FF 
133e8     E0 64 06 F1 | 	add	objptr, ##42208
133ec     32 A3 02 FB | 	rdlong	arg09, objptr
133f0     52 00 00 FF 
133f4     E0 64 86 F1 | 	sub	objptr, ##42208
133f8     01 A2 0E F2 | 	cmp	arg09, #1 wz
133fc     48 00 90 5D |  if_ne	jmp	#LR__1650
13400     54 00 00 FF 
13404     80 64 06 F1 | 	add	objptr, ##43136
13408     32 95 02 FB | 	rdlong	arg02, objptr
1340c     04 64 86 F1 | 	sub	objptr, #4
13410     32 9B 02 FB | 	rdlong	arg05, objptr
13414     07 92 06 F6 | 	mov	arg01, #7
13418     56 00 00 FF 
1341c     44 96 06 F6 | 	mov	arg03, ##44100
13420     0C 98 C6 F9 | 	decod	arg04, #12
13424     01 9C 66 F6 | 	neg	arg06, #1
13428     01 9E 66 F6 | 	neg	arg07, #1
1342c     01 A0 66 F6 | 	neg	arg08, #1
13430     01 A2 66 F6 | 	neg	arg09, #1
13434     48 00 00 FF 
13438     B0 65 86 F1 | 	sub	objptr, ##37296
1343c     50 0E B1 FD | 	call	#_Audio2_004_spin2_play
13440     0B 00 00 FF 
13444     CC 64 86 F1 | 	sub	objptr, ##5836
13448                 | LR__1650
13448                 | LR__1651
13448                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
13448     47 00 00 FF 
1344c     18 64 06 F1 | 	add	objptr, ##36376
13450     32 A3 0A FB | 	rdlong	arg09, objptr wz
13454     47 00 00 FF 
13458     18 64 86 F1 | 	sub	objptr, ##36376
1345c     D4 01 90 AD |  if_e	jmp	#LR__1660
13460     47 00 00 FF 
13464     18 64 06 F1 | 	add	objptr, ##36376
13468     32 A3 02 FB | 	rdlong	arg09, objptr
1346c     47 00 00 FF 
13470     18 64 86 F1 | 	sub	objptr, ##36376
13474     00 00 40 FF 
13478     00 A2 16 F2 | 	cmp	arg09, ##-2147483648 wc
1347c     47 00 00 CF 
13480     18 64 06 C1 |  if_b	add	objptr, ##36376
13484     32 A7 02 CB |  if_b	rdlong	local01, objptr
13488     47 00 00 CF 
1348c     18 64 86 C1 |  if_b	sub	objptr, ##36376
13490     53 A7 E2 C8 |  if_b	getbyte	local01, local01, #0
13494     E0 A6 16 C2 |  if_b	cmp	local01, #224 wc
13498     98 01 90 3D |  if_ae	jmp	#LR__1660
1349c                 | '   if leds and 2 = 2 then 
1349c     54 00 00 FF 
134a0     BC 64 06 F1 | 	add	objptr, ##43196
134a4     32 A7 0A FB | 	rdlong	local01, objptr wz
134a8     54 00 00 FF 
134ac     BC 64 86 F1 | 	sub	objptr, ##43196
134b0     58 01 90 AD |  if_e	jmp	#LR__1659
134b4                 | '     if key>96 andalso key<123 then
134b4     47 00 00 FF 
134b8     18 64 06 F1 | 	add	objptr, ##36376
134bc     32 A7 02 FB | 	rdlong	local01, objptr
134c0     47 00 00 FF 
134c4     18 64 86 F1 | 	sub	objptr, ##36376
134c8     61 A6 16 F2 | 	cmp	local01, #97 wc
134cc     3C 00 90 CD |  if_b	jmp	#LR__1652
134d0     47 00 00 FF 
134d4     18 64 06 F1 | 	add	objptr, ##36376
134d8     32 A7 02 FB | 	rdlong	local01, objptr
134dc     47 00 00 FF 
134e0     18 64 86 F1 | 	sub	objptr, ##36376
134e4     7B A6 16 F2 | 	cmp	local01, #123 wc
134e8     20 00 90 3D |  if_ae	jmp	#LR__1652
134ec     47 00 00 FF 
134f0     18 64 06 F1 | 	add	objptr, ##36376
134f4     32 A7 02 FB | 	rdlong	local01, objptr
134f8     20 A6 86 F1 | 	sub	local01, #32
134fc     32 A7 62 FC | 	wrlong	local01, objptr
13500     47 00 00 FF 
13504     18 64 86 F1 | 	sub	objptr, ##36376
13508     00 01 90 FD | 	jmp	#LR__1658
1350c                 | LR__1652
1350c     47 00 00 FF 
13510     18 64 06 F1 | 	add	objptr, ##36376
13514     32 A7 02 FB | 	rdlong	local01, objptr
13518     47 00 00 FF 
1351c     18 64 86 F1 | 	sub	objptr, ##36376
13520     41 A6 16 F2 | 	cmp	local01, #65 wc
13524     3C 00 90 CD |  if_b	jmp	#LR__1653
13528     47 00 00 FF 
1352c     18 64 06 F1 | 	add	objptr, ##36376
13530     32 A7 02 FB | 	rdlong	local01, objptr
13534     47 00 00 FF 
13538     18 64 86 F1 | 	sub	objptr, ##36376
1353c     5B A6 16 F2 | 	cmp	local01, #91 wc
13540     20 00 90 3D |  if_ae	jmp	#LR__1653
13544     47 00 00 FF 
13548     18 64 06 F1 | 	add	objptr, ##36376
1354c     32 A7 02 FB | 	rdlong	local01, objptr
13550     20 A6 06 F1 | 	add	local01, #32
13554     32 A7 62 FC | 	wrlong	local01, objptr
13558     47 00 00 FF 
1355c     18 64 86 F1 | 	sub	objptr, ##36376
13560     A8 00 90 FD | 	jmp	#LR__1657
13564                 | LR__1653
13564     47 00 00 FF 
13568     18 64 06 F1 | 	add	objptr, ##36376
1356c     32 A7 02 FB | 	rdlong	local01, objptr
13570     47 00 00 FF 
13574     18 64 86 F1 | 	sub	objptr, ##36376
13578     17 A6 16 F2 | 	cmp	local01, #23 wc
1357c     3C 00 90 CD |  if_b	jmp	#LR__1654
13580     47 00 00 FF 
13584     18 64 06 F1 | 	add	objptr, ##36376
13588     32 A7 02 FB | 	rdlong	local01, objptr
1358c     47 00 00 FF 
13590     18 64 86 F1 | 	sub	objptr, ##36376
13594     20 A6 16 F2 | 	cmp	local01, #32 wc
13598     20 00 90 3D |  if_ae	jmp	#LR__1654
1359c     47 00 00 FF 
135a0     18 64 06 F1 | 	add	objptr, ##36376
135a4     32 A7 02 FB | 	rdlong	local01, objptr
135a8     09 A6 86 F1 | 	sub	local01, #9
135ac     32 A7 62 FC | 	wrlong	local01, objptr
135b0     47 00 00 FF 
135b4     18 64 86 F1 | 	sub	objptr, ##36376
135b8     50 00 90 FD | 	jmp	#LR__1656
135bc                 | LR__1654
135bc     47 00 00 FF 
135c0     18 64 06 F1 | 	add	objptr, ##36376
135c4     32 A9 02 FB | 	rdlong	local02, objptr
135c8     47 00 00 FF 
135cc     18 64 86 F1 | 	sub	objptr, ##36376
135d0     0E A8 16 F2 | 	cmp	local02, #14 wc
135d4     34 00 90 CD |  if_b	jmp	#LR__1655
135d8     47 00 00 FF 
135dc     18 64 06 F1 | 	add	objptr, ##36376
135e0     32 A7 02 FB | 	rdlong	local01, objptr
135e4     47 00 00 FF 
135e8     18 64 86 F1 | 	sub	objptr, ##36376
135ec     17 A6 16 F2 | 	cmp	local01, #23 wc
135f0     54 00 00 CF 
135f4     C0 64 06 C1 |  if_b	add	objptr, ##43200
135f8     32 A9 02 CB |  if_b	rdlong	local02, objptr
135fc     27 A8 06 C1 |  if_b	add	local02, #39
13600     32 A9 62 CC |  if_b	wrlong	local02, objptr
13604     54 00 00 CF 
13608     C0 64 86 C1 |  if_b	sub	objptr, ##43200
1360c                 | LR__1655
1360c                 | LR__1656
1360c                 | LR__1657
1360c                 | LR__1658
1360c                 | LR__1659
1360c     47 00 00 FF 
13610     18 64 06 F1 | 	add	objptr, ##36376
13614     32 93 02 FB | 	rdlong	arg01, objptr
13618     47 00 00 FF 
1361c     18 64 86 F1 | 	sub	objptr, ##36376
13620     FC D9 B0 FD | 	call	#_scantochar
13624     3D 93 02 F6 | 	mov	arg01, result1
13628     18 2E B1 FD | 	call	#__system__Chr_S
1362c     E7 7A 62 FC | 	wrlong	result1, fp
13630     0C 00 90 FD | 	jmp	#LR__1661
13634                 | LR__1660
13634     97 01 00 FF 
13638     7E A9 06 F6 | 	mov	local02, ##@LR__6021
1363c     E7 A8 62 FC | 	wrlong	local02, fp
13640                 | LR__1661
13640     08 CE 05 F1 | 	add	fp, #8
13644     E7 3E 68 FC | 	wrlong	#31, fp
13648     08 CE 85 F1 | 	sub	fp, #8
1364c     E7 92 02 F6 | 	mov	arg01, fp
13650     AC A0 BF FD | 	call	#_push
13654     E7 F0 03 F6 | 	mov	ptra, fp
13658     F2 00 A0 FD | 	call	#popregs_
1365c                 | _do_inkey_ret
1365c     2D 00 64 FD | 	ret
13660                 | 
13660                 | ' 
13660                 | ' ' ----------------  ink
13660                 | ' 
13660                 | ' sub do_ink
13660                 | _do_ink
13660     00 CA 05 F6 | 	mov	COUNT_, #0
13664     E8 00 A0 FD | 	call	#pushregs_
13668     0C F0 07 F1 | 	add	ptra, #12
1366c     00 A0 BF FD | 	call	#_pop
13670     3F 95 02 F6 | 	mov	arg02, result3
13674     E7 7A 62 FC | 	wrlong	result1, fp
13678     04 CE 05 F1 | 	add	fp, #4
1367c     E7 7C 62 FC | 	wrlong	result2, fp
13680     04 CE 05 F1 | 	add	fp, #4
13684     E7 94 62 FC | 	wrlong	arg02, fp
13688     08 CE 85 F1 | 	sub	fp, #8
1368c     E7 92 02 F6 | 	mov	arg01, fp
13690     B8 A1 BF FD | 	call	#_converttoint
13694     38 00 00 FF 
13698     E0 65 06 F1 | 	add	objptr, ##29152
1369c     32 7B 62 FC | 	wrlong	result1, objptr
136a0     04 64 86 F1 | 	sub	objptr, #4
136a4     32 95 02 FB | 	rdlong	arg02, objptr
136a8                 | ' 
136a8                 | ' write_color:=ff
136a8     38 00 00 FF 
136ac     9B 65 86 F1 | 	sub	objptr, ##29083
136b0     32 7B 62 FC | 	wrlong	result1, objptr
136b4                 | ' write_background:=bb
136b4     04 64 06 F1 | 	add	objptr, #4
136b8     32 95 62 FC | 	wrlong	arg02, objptr
136bc     38 00 00 FF 
136c0     9B 65 06 F1 | 	add	objptr, ##29083
136c4     32 93 02 FB | 	rdlong	arg01, objptr
136c8     38 00 00 FF 
136cc     E0 65 86 F1 | 	sub	objptr, ##29152
136d0     F8 E1 B0 FD | 	call	#_Hg010b_4_spin2_setcursorcolor
136d4     E7 F0 03 F6 | 	mov	ptra, fp
136d8     F2 00 A0 FD | 	call	#popregs_
136dc                 | _do_ink_ret
136dc     2D 00 64 FD | 	ret
136e0                 | 
136e0                 | ' 
136e0                 | ' ' ----------------  int
136e0                 | ' 
136e0                 | ' sub do_int
136e0                 | _do_int
136e0     02 CA 05 F6 | 	mov	COUNT_, #2
136e4     E8 00 A0 FD | 	call	#pushregs_
136e8     10 F0 07 F1 | 	add	ptra, #16
136ec     80 9F BF FD | 	call	#_pop
136f0     3E A7 02 F6 | 	mov	local01, result2
136f4     3F A9 02 F6 | 	mov	local02, result3
136f8     E7 7A 62 FC | 	wrlong	result1, fp
136fc     04 CE 05 F1 | 	add	fp, #4
13700     E7 A6 62 FC | 	wrlong	local01, fp
13704     04 CE 05 F1 | 	add	fp, #4
13708     E7 A8 62 FC | 	wrlong	local02, fp
1370c                 | ' 
1370c                 | ' t1=pop()
1370c                 | ' select case t1.result_type
1370c     08 CE 85 F1 | 	sub	fp, #8
13710     1E A8 0E F2 | 	cmp	local02, #30 wz
13714     14 00 90 AD |  if_e	jmp	#LR__1670
13718     1F A8 0E F2 | 	cmp	local02, #31 wz
1371c     20 00 90 AD |  if_e	jmp	#LR__1671
13720     2B A8 0E F2 | 	cmp	local02, #43 wz
13724     34 00 90 AD |  if_e	jmp	#LR__1672
13728     50 00 90 FD | 	jmp	#LR__1673
1372c                 | LR__1670
1372c     E7 92 02 FB | 	rdlong	arg01, fp
13730     00 94 06 F6 | 	mov	arg02, #0
13734     38 3E B1 FD | 	call	#__system___float_tointeger
13738     E7 7A 62 FC | 	wrlong	result1, fp
1373c     3C 00 90 FD | 	jmp	#LR__1673
13740                 | LR__1671
13740     E7 92 02 FB | 	rdlong	arg01, fp
13744     7C 41 B1 FD | 	call	#__system____builtin_atof
13748     3D 93 02 F6 | 	mov	arg01, result1
1374c     00 94 06 F6 | 	mov	arg02, #0
13750     1C 3E B1 FD | 	call	#__system___float_tointeger
13754     E7 7A 62 FC | 	wrlong	result1, fp
13758     20 00 90 FD | 	jmp	#LR__1673
1375c                 | LR__1672
1375c     E7 92 02 FB | 	rdlong	arg01, fp
13760     7C A0 BF FD | 	call	#_convertstring
13764     3D 93 02 F6 | 	mov	arg01, result1
13768     58 41 B1 FD | 	call	#__system____builtin_atof
1376c     3D 93 02 F6 | 	mov	arg01, result1
13770     00 94 06 F6 | 	mov	arg02, #0
13774     F8 3D B1 FD | 	call	#__system___float_tointeger
13778     E7 7A 62 FC | 	wrlong	result1, fp
1377c                 | LR__1673
1377c     08 CE 05 F1 | 	add	fp, #8
13780     E7 38 68 FC | 	wrlong	#28, fp
13784     08 CE 85 F1 | 	sub	fp, #8
13788     E7 92 02 F6 | 	mov	arg01, fp
1378c     70 9F BF FD | 	call	#_push
13790     E7 F0 03 F6 | 	mov	ptra, fp
13794     F2 00 A0 FD | 	call	#popregs_
13798                 | _do_int_ret
13798     2D 00 64 FD | 	ret
1379c                 | 
1379c                 | ' 
1379c                 | ' ' ----------------  input
1379c                 | ' 
1379c                 | ' sub do_input
1379c                 | _do_input
1379c     1A CA 05 F6 | 	mov	COUNT_, #26
137a0     E8 00 A0 FD | 	call	#pushregs_
137a4     50 F1 07 F1 | 	add	ptra, #336
137a8     4C 00 00 FF 
137ac     24 64 06 F1 | 	add	objptr, ##38948
137b0     32 AD 02 FB | 	rdlong	local04, objptr
137b4     56 AF 02 F6 | 	mov	local05, local04
137b8     01 AE 66 F0 | 	shl	local05, #1
137bc     56 AF 02 F1 | 	add	local05, local04
137c0     02 AE 66 F0 | 	shl	local05, #2
137c4     03 00 00 FF 
137c8     04 64 86 F1 | 	sub	objptr, ##1540
137cc     32 B1 02 F6 | 	mov	local06, objptr
137d0     32 AF 02 F1 | 	add	local05, objptr
137d4     57 B3 02 FB | 	rdlong	local07, local05
137d8                 | ' 
137d8                 | ' numpar=compiledline(lineptr_e).result.uresult
137d8                 | ' if numpar<1 orelse numpar>64 then print "In input: ";: printerror(39,runheader(0)) : return
137d8     01 B2 16 F2 | 	cmp	local07, #1 wc
137dc     49 00 00 FF 
137e0     20 64 86 F1 | 	sub	objptr, ##37408
137e4     08 00 90 CD |  if_b	jmp	#LR__1680
137e8     41 B2 16 F2 | 	cmp	local07, #65 wc
137ec     50 00 90 CD |  if_b	jmp	#LR__1681
137f0                 | LR__1680
137f0     00 92 06 F6 | 	mov	arg01, #0
137f4     64 67 B1 FD | 	call	#__system___getiolock_0622
137f8     3D 93 02 F6 | 	mov	arg01, result1
137fc     D8 11 B1 FD | 	call	#__system___lockmem
13800     97 01 00 FF 
13804     7F 95 06 F6 | 	mov	arg02, ##@LR__6022
13808     00 92 06 F6 | 	mov	arg01, #0
1380c     00 96 06 F6 | 	mov	arg03, #0
13810     B8 1E B1 FD | 	call	#__system___basic_print_string
13814     00 92 06 F6 | 	mov	arg01, #0
13818     40 67 B1 FD | 	call	#__system___getiolock_0622
1381c     3D 01 68 FC | 	wrlong	#0, result1
13820     52 00 00 FF 
13824     94 64 06 F1 | 	add	objptr, ##42132
13828     32 95 02 FB | 	rdlong	arg02, objptr
1382c     52 00 00 FF 
13830     94 64 86 F1 | 	sub	objptr, ##42132
13834     27 92 06 F6 | 	mov	arg01, #39
13838     98 D4 B0 FD | 	call	#_printerror
1383c     5C 08 90 FD | 	jmp	#LR__1727
13840                 | LR__1681
13840     59 B5 02 F6 | 	mov	local08, local07
13844     01 B4 86 F1 | 	sub	local08, #1
13848     3C 64 06 F1 | 	add	objptr, #60
1384c     32 AD E2 FA | 	rdword	local04, objptr
13850     56 B7 52 F6 | 	abs	local09, local04 wc
13854     01 B6 46 F0 | 	shr	local09, #1
13858     5B B7 82 F6 | 	negc	local09, local09
1385c     02 64 06 F1 | 	add	objptr, #2
13860     32 B9 C2 FA | 	rdbyte	local10, objptr
13864     3E 64 86 F1 | 	sub	objptr, #62
13868                 | ' i=numpar-1
13868                 | ' cpx=v.cursor_x/2 : cpy=v.cursor_y
13868                 | ' do
13868                 | LR__1682
13868     98 D0 BE FD | 	call	#_edit
1386c     3D BB 02 F6 | 	mov	local11, result1
13870                 | ' 
13870                 | '   line$=edit()
13870                 | ' 
13870                 | '   if v.cursor_y=cpy+1 then
13870     3E 64 06 F1 | 	add	objptr, #62
13874     32 97 C2 FA | 	rdbyte	arg03, objptr
13878     3E 64 86 F1 | 	sub	objptr, #62
1387c     5C AD 02 F6 | 	mov	local04, local10
13880     01 AC 06 F1 | 	add	local04, #1
13884     56 97 0A F2 | 	cmp	arg03, local04 wz
13888     5C 00 90 5D |  if_ne	jmp	#LR__1685
1388c     5D 93 02 F6 | 	mov	arg01, local11
13890     49 BD 02 F6 | 	mov	local12, arg01
13894     D7 06 48 FB | 	callpa	#(@LR__1684-@LR__1683)>>2,fcache_load_ptr_
13898                 | LR__1683
13898     5E 7B CA FA | 	rdbyte	result1, local12 wz
1389c     01 BC 06 51 |  if_ne	add	local12, #1
138a0     F4 FF 9F 5D |  if_ne	jmp	#LR__1683
138a4                 | LR__1684
138a4     49 BD 82 F1 | 	sub	local12, arg01
138a8     5E 95 02 F6 | 	mov	arg02, local12
138ac     5B 95 82 F1 | 	sub	arg02, local09
138b0     38 00 00 FF 
138b4     D8 65 06 F1 | 	add	objptr, ##29144
138b8     32 AD 02 FB | 	rdlong	local04, objptr
138bc     38 00 00 FF 
138c0     D8 65 86 F1 | 	sub	objptr, ##29144
138c4     56 95 02 F1 | 	add	arg02, local04
138c8     5D 93 02 F6 | 	mov	arg01, local11
138cc     38 2A B1 FD | 	call	#__system__Right_S
138d0     3D 93 02 F6 | 	mov	arg01, result1
138d4     38 2E B1 FD | 	call	#__system__RTrim_S
138d8     3D 93 02 F6 | 	mov	arg01, result1
138dc     70 2D B1 FD | 	call	#__system__LTrim_S
138e0     3D BB 02 F6 | 	mov	local11, result1
138e4     14 00 90 FD | 	jmp	#LR__1686
138e8                 | LR__1685
138e8     5D 93 02 F6 | 	mov	arg01, local11
138ec     20 2E B1 FD | 	call	#__system__RTrim_S
138f0     3D 93 02 F6 | 	mov	arg01, result1
138f4     58 2D B1 FD | 	call	#__system__LTrim_S
138f8     3D BB 02 F6 | 	mov	local11, result1
138fc                 | LR__1686
138fc                 | '   do
138fc                 | LR__1687
138fc     97 01 00 FF 
13900     8A 97 06 F6 | 	mov	arg03, ##@LR__6023
13904     01 92 06 F6 | 	mov	arg01, #1
13908     5D 95 02 F6 | 	mov	arg02, local11
1390c     B8 2E B1 FD | 	call	#__system__Instr
13910     3D BF 02 F6 | 	mov	local13, result1
13914                 | '    comma=instr(1,line$,",")  
13914                 | '    if comma>0  then 
13914     01 BE 16 F2 | 	cmp	local13, #1 wc
13918     48 00 90 CD |  if_b	jmp	#LR__1690
1391c     5F 95 02 F6 | 	mov	arg02, local13
13920     01 94 86 F1 | 	sub	arg02, #1
13924     5D 93 02 F6 | 	mov	arg01, local11
13928     54 29 B1 FD | 	call	#__system__Left_S
1392c     3D C1 02 F6 | 	mov	local14, result1
13930     5D 93 02 F6 | 	mov	arg01, local11
13934     49 BD 02 F6 | 	mov	local12, arg01
13938     D7 06 48 FB | 	callpa	#(@LR__1689-@LR__1688)>>2,fcache_load_ptr_
1393c                 | LR__1688
1393c     5E 7B CA FA | 	rdbyte	result1, local12 wz
13940     01 BC 06 51 |  if_ne	add	local12, #1
13944     F4 FF 9F 5D |  if_ne	jmp	#LR__1688
13948                 | LR__1689
13948     49 BD 82 F1 | 	sub	local12, arg01
1394c     5E 95 02 F6 | 	mov	arg02, local12
13950     5F 95 82 F1 | 	sub	arg02, local13
13954     5D 93 02 F6 | 	mov	arg01, local11
13958     AC 29 B1 FD | 	call	#__system__Right_S
1395c     3D BB 02 F6 | 	mov	local11, result1
13960     1C 00 90 FD | 	jmp	#LR__1691
13964                 | LR__1690
13964     5D 93 02 F6 | 	mov	arg01, local11
13968     A4 2D B1 FD | 	call	#__system__RTrim_S
1396c     3D 93 02 F6 | 	mov	arg01, result1
13970     DC 2C B1 FD | 	call	#__system__LTrim_S
13974     3D C1 02 F6 | 	mov	local14, result1
13978     97 01 00 FF 
1397c     8C BB 06 F6 | 	mov	local11, ##@LR__6024
13980                 | LR__1691
13980     5A 95 02 F6 | 	mov	arg02, local08
13984     02 94 66 F0 | 	shl	arg02, #2
13988     E7 AC 02 F6 | 	mov	local04, fp
1398c     2C AC 06 F1 | 	add	local04, #44
13990     56 95 02 F1 | 	add	arg02, local04
13994     4A C1 62 FC | 	wrlong	local14, arg02
13998     01 B4 86 F1 | 	sub	local08, #1
1399c     00 B4 56 F2 | 	cmps	local08, #0 wc
139a0     18 00 90 CD |  if_b	jmp	#LR__1692
139a4     97 01 00 FF 
139a8     8D 95 06 F6 | 	mov	arg02, ##@LR__6025
139ac     5D 93 02 F6 | 	mov	arg01, local11
139b0     4C 10 B1 FD | 	call	#__system___string_cmp
139b4     00 7A 0E F2 | 	cmp	result1, #0 wz
139b8     40 FF 9F 5D |  if_ne	jmp	#LR__1687
139bc                 | LR__1692
139bc     00 B4 56 F2 | 	cmps	local08, #0 wc
139c0     A4 FE 9F 3D |  if_ae	jmp	#LR__1682
139c4                 | ' 
139c4                 | ' for i=0 to numpar-1
139c4     00 B4 06 F6 | 	mov	local08, #0
139c8     59 C3 02 F6 | 	mov	local15, local07
139cc                 | LR__1693
139cc     61 B5 52 F2 | 	cmps	local08, local15 wc
139d0     C8 06 90 3D |  if_ae	jmp	#LR__1726
139d4                 | ' 
139d4                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
139d4     5A AF 02 F6 | 	mov	local05, local08
139d8     02 AE 66 F0 | 	shl	local05, #2
139dc     E7 B0 02 F6 | 	mov	local06, fp
139e0     2C B0 06 F1 | 	add	local06, #44
139e4     58 AF 02 F1 | 	add	local05, local06
139e8     57 93 02 FB | 	rdlong	arg01, local05
139ec     64 30 BF FD | 	call	#_isnum
139f0     3D B1 02 F6 | 	mov	local06, result1
139f4     5A C5 02 F6 | 	mov	local16, local08
139f8     02 C4 66 F0 | 	shl	local16, #2
139fc     E7 C6 02 F6 | 	mov	local17, fp
13a00     2C C6 06 F1 | 	add	local17, #44
13a04     63 C5 02 F1 | 	add	local16, local17
13a08     62 93 02 FB | 	rdlong	arg01, local16
13a0c     30 34 BF FD | 	call	#_isint
13a10     07 7A 66 F7 | 	signx	result1, #7
13a14     3D B1 2A F5 | 	andn	local06, result1 wz
13a18     54 00 00 5F 
13a1c     EC 64 06 51 |  if_ne	add	objptr, ##43244
13a20     32 3D 68 5C |  if_ne	wrlong	#30, objptr
13a24     54 00 00 5F 
13a28     EC 64 86 51 |  if_ne	sub	objptr, ##43244
13a2c                 | '   if isint(args(i)) then r=result_int 
13a2c     5A AD 02 F6 | 	mov	local04, local08
13a30     02 AC 66 F0 | 	shl	local04, #2
13a34     E7 AE 02 F6 | 	mov	local05, fp
13a38     2C AE 06 F1 | 	add	local05, #44
13a3c     57 AD 02 F1 | 	add	local04, local05
13a40     56 93 02 FB | 	rdlong	arg01, local04
13a44     F8 33 BF FD | 	call	#_isint
13a48     00 7A 0E F2 | 	cmp	result1, #0 wz
13a4c     54 00 00 5F 
13a50     EC 64 06 51 |  if_ne	add	objptr, ##43244
13a54     32 39 68 5C |  if_ne	wrlong	#28, objptr
13a58     54 00 00 5F 
13a5c     EC 64 86 51 |  if_ne	sub	objptr, ##43244
13a60                 | '   if isdec(args(i)) then r=result_uint 
13a60     5A AD 02 F6 | 	mov	local04, local08
13a64     02 AC 66 F0 | 	shl	local04, #2
13a68     E7 AE 02 F6 | 	mov	local05, fp
13a6c     2C AE 06 F1 | 	add	local05, #44
13a70     57 AD 02 F1 | 	add	local04, local05
13a74     56 93 02 FB | 	rdlong	arg01, local04
13a78     68 36 BF FD | 	call	#_isdec
13a7c     00 7A 0E F2 | 	cmp	result1, #0 wz
13a80     54 00 00 5F 
13a84     EC 64 06 51 |  if_ne	add	objptr, ##43244
13a88     32 3B 68 5C |  if_ne	wrlong	#29, objptr
13a8c     54 00 00 5F 
13a90     EC 64 86 51 |  if_ne	sub	objptr, ##43244
13a94                 | '   if not isnum(args(i)) then 
13a94     5A AF 02 F6 | 	mov	local05, local08
13a98     02 AE 66 F0 | 	shl	local05, #2
13a9c     E7 B0 02 F6 | 	mov	local06, fp
13aa0     2C B0 06 F1 | 	add	local06, #44
13aa4     58 AF 02 F1 | 	add	local05, local06
13aa8     57 93 02 FB | 	rdlong	arg01, local05
13aac     A4 2F BF FD | 	call	#_isnum
13ab0     07 7A 66 F7 | 	signx	result1, #7
13ab4     3D 7B 22 F6 | 	not	result1, result1
13ab8     00 7A 0E F2 | 	cmp	result1, #0 wz
13abc     E8 00 90 AD |  if_e	jmp	#LR__1698
13ac0     54 00 00 FF 
13ac4     EC 64 06 F1 | 	add	objptr, ##43244
13ac8     32 57 68 FC | 	wrlong	#43, objptr
13acc     54 00 00 FF 
13ad0     EC 64 86 F1 | 	sub	objptr, ##43244
13ad4     60 93 02 F6 | 	mov	arg01, local14
13ad8     49 BD 02 F6 | 	mov	local12, arg01
13adc     D7 06 48 FB | 	callpa	#(@LR__1695-@LR__1694)>>2,fcache_load_ptr_
13ae0                 | LR__1694
13ae0     5E 7B CA FA | 	rdbyte	result1, local12 wz
13ae4     01 BC 06 51 |  if_ne	add	local12, #1
13ae8     F4 FF 9F 5D |  if_ne	jmp	#LR__1694
13aec                 | LR__1695
13aec     49 BD 82 F1 | 	sub	local12, arg01
13af0     5E C9 02 F6 | 	mov	local18, local12
13af4     54 00 00 FF 
13af8     74 64 06 F1 | 	add	objptr, ##43124
13afc     32 93 02 FB | 	rdlong	arg01, objptr
13b00     64 93 82 F1 | 	sub	arg01, local18
13b04     04 92 86 F1 | 	sub	arg01, #4
13b08     03 92 26 F5 | 	andn	arg01, #3
13b0c     32 93 62 FC | 	wrlong	arg01, objptr
13b10     54 00 00 FF 
13b14     74 64 86 F1 | 	sub	objptr, ##43124
13b18     64 95 02 F6 | 	mov	arg02, local18
13b1c     50 D3 B0 FD | 	call	#_pslpoke
13b20                 | '     pslpoke memtop,l
13b20                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
13b20     01 CA 06 F6 | 	mov	local19, #1
13b24     64 CD 02 F6 | 	mov	local20, local18
13b28     01 CC 06 F1 | 	add	local20, #1
13b2c                 | LR__1696
13b2c     66 CB 52 F2 | 	cmps	local19, local20 wc
13b30     60 00 90 3D |  if_ae	jmp	#LR__1697
13b34     54 00 00 FF 
13b38     74 64 06 F1 | 	add	objptr, ##43124
13b3c     32 AD 02 FB | 	rdlong	local04, objptr
13b40     54 00 00 FF 
13b44     74 64 86 F1 | 	sub	objptr, ##43124
13b48     03 AC 06 F1 | 	add	local04, #3
13b4c     65 AD 02 F1 | 	add	local04, local19
13b50     5A C5 02 F6 | 	mov	local16, local08
13b54     02 C4 66 F0 | 	shl	local16, #2
13b58     E7 C6 02 F6 | 	mov	local17, fp
13b5c     2C C6 06 F1 | 	add	local17, #44
13b60     63 C5 02 F1 | 	add	local16, local17
13b64     62 93 02 FB | 	rdlong	arg01, local16
13b68     65 B1 02 F6 | 	mov	local06, local19
13b6c     01 C4 06 F6 | 	mov	local16, #1
13b70     58 95 02 F6 | 	mov	arg02, local06
13b74     01 96 06 F6 | 	mov	arg03, #1
13b78     1C 28 B1 FD | 	call	#__system__Mid_S
13b7c     3D AF 02 F6 | 	mov	local05, result1
13b80     57 95 C2 FA | 	rdbyte	arg02, local05
13b84     56 93 02 F6 | 	mov	arg01, local04
13b88     74 D3 B0 FD | 	call	#_pspoke
13b8c     01 CA 06 F1 | 	add	local19, #1
13b90     98 FF 9F FD | 	jmp	#LR__1696
13b94                 | LR__1697
13b94     54 00 00 FF 
13b98     74 64 06 F1 | 	add	objptr, ##43124
13b9c     32 CF 02 FB | 	rdlong	local21, objptr
13ba0     54 00 00 FF 
13ba4     74 64 86 F1 | 	sub	objptr, ##43124
13ba8                 | LR__1698
13ba8     C4 9A BF FD | 	call	#_pop
13bac     3D D1 02 F6 | 	mov	local22, result1
13bb0     3E D3 02 F6 | 	mov	local23, result2
13bb4     3F AD 02 F6 | 	mov	local04, result3
13bb8     68 A7 02 F6 | 	mov	local01, local22
13bbc     69 A9 02 F6 | 	mov	local02, local23
13bc0     56 AB 02 F6 | 	mov	local03, local04
13bc4     54 D5 02 F6 | 	mov	local24, local02
13bc8                 | '   t1=pop() : vartype=t1.result.twowords(1)
13bc8                 | '   select case vartype
13bc8     6A D7 0A F6 | 	mov	local25, local24 wz
13bcc     64 00 90 AD |  if_e	jmp	#LR__1699
13bd0     00 D7 0E F2 | 	cmp	local25, #256 wz
13bd4     64 00 90 AD |  if_e	jmp	#LR__1700
13bd8     01 D7 0E F2 | 	cmp	local25, #257 wz
13bdc     64 00 90 AD |  if_e	jmp	#LR__1701
13be0     02 D7 0E F2 | 	cmp	local25, #258 wz
13be4     64 00 90 AD |  if_e	jmp	#LR__1702
13be8     03 D7 0E F2 | 	cmp	local25, #259 wz
13bec     64 00 90 AD |  if_e	jmp	#LR__1703
13bf0     04 D7 0E F2 | 	cmp	local25, #260 wz
13bf4     64 00 90 AD |  if_e	jmp	#LR__1704
13bf8     05 D7 0E F2 | 	cmp	local25, #261 wz
13bfc     64 00 90 AD |  if_e	jmp	#LR__1705
13c00     06 D7 0E F2 | 	cmp	local25, #262 wz
13c04     64 00 90 AD |  if_e	jmp	#LR__1706
13c08     07 D7 0E F2 | 	cmp	local25, #263 wz
13c0c     64 00 90 AD |  if_e	jmp	#LR__1707
13c10     08 D7 0E F2 | 	cmp	local25, #264 wz
13c14     64 00 90 AD |  if_e	jmp	#LR__1708
13c18     09 D7 0E F2 | 	cmp	local25, #265 wz
13c1c     64 00 90 AD |  if_e	jmp	#LR__1709
13c20     0A D7 0E F2 | 	cmp	local25, #266 wz
13c24     64 00 90 AD |  if_e	jmp	#LR__1710
13c28     0B D7 0E F2 | 	cmp	local25, #267 wz
13c2c     64 00 90 AD |  if_e	jmp	#LR__1711
13c30     68 00 90 FD | 	jmp	#LR__1712
13c34                 | LR__1699
13c34     0C D8 06 F6 | 	mov	local26, #12
13c38     64 00 90 FD | 	jmp	#LR__1713
13c3c                 | LR__1700
13c3c     0C D8 06 F6 | 	mov	local26, #12
13c40     5C 00 90 FD | 	jmp	#LR__1713
13c44                 | LR__1701
13c44     01 D8 06 F6 | 	mov	local26, #1
13c48     54 00 90 FD | 	jmp	#LR__1713
13c4c                 | LR__1702
13c4c     01 D8 06 F6 | 	mov	local26, #1
13c50     4C 00 90 FD | 	jmp	#LR__1713
13c54                 | LR__1703
13c54     02 D8 06 F6 | 	mov	local26, #2
13c58     44 00 90 FD | 	jmp	#LR__1713
13c5c                 | LR__1704
13c5c     02 D8 06 F6 | 	mov	local26, #2
13c60     3C 00 90 FD | 	jmp	#LR__1713
13c64                 | LR__1705
13c64     04 D8 06 F6 | 	mov	local26, #4
13c68     34 00 90 FD | 	jmp	#LR__1713
13c6c                 | LR__1706
13c6c     04 D8 06 F6 | 	mov	local26, #4
13c70     2C 00 90 FD | 	jmp	#LR__1713
13c74                 | LR__1707
13c74     08 D8 06 F6 | 	mov	local26, #8
13c78     24 00 90 FD | 	jmp	#LR__1713
13c7c                 | LR__1708
13c7c     08 D8 06 F6 | 	mov	local26, #8
13c80     1C 00 90 FD | 	jmp	#LR__1713
13c84                 | LR__1709
13c84     06 D8 06 F6 | 	mov	local26, #6
13c88     14 00 90 FD | 	jmp	#LR__1713
13c8c                 | LR__1710
13c8c     08 D8 06 F6 | 	mov	local26, #8
13c90     0C 00 90 FD | 	jmp	#LR__1713
13c94                 | LR__1711
13c94     05 D8 06 F6 | 	mov	local26, #5
13c98     04 00 90 FD | 	jmp	#LR__1713
13c9c                 | LR__1712
13c9c     0C D8 06 F6 | 	mov	local26, #12
13ca0                 | LR__1713
13ca0                 | '   if esize=12 andalso t1.result.uresult<$80000 then
13ca0     0C D8 0E F2 | 	cmp	local26, #12 wz
13ca4     34 01 90 5D |  if_ne	jmp	#LR__1717
13ca8     00 04 00 FF 
13cac     00 A6 16 F2 | 	cmp	local01, ##524288 wc
13cb0     28 01 90 3D |  if_ae	jmp	#LR__1717
13cb4                 | '     if r=result_int then lpoke t1.result.uresult, val%(args(i))
13cb4     54 00 00 FF 
13cb8     EC 64 06 F1 | 	add	objptr, ##43244
13cbc     32 D1 02 FB | 	rdlong	local22, objptr
13cc0     54 00 00 FF 
13cc4     EC 64 86 F1 | 	sub	objptr, ##43244
13cc8     1C D0 0E F2 | 	cmp	local22, #28 wz
13ccc     2C 00 90 5D |  if_ne	jmp	#LR__1714
13cd0     5A AF 02 F6 | 	mov	local05, local08
13cd4     02 AE 66 F0 | 	shl	local05, #2
13cd8     E7 B0 02 F6 | 	mov	local06, fp
13cdc     2C B0 06 F1 | 	add	local06, #44
13ce0     58 AF 02 F1 | 	add	local05, local06
13ce4     57 93 02 FB | 	rdlong	arg01, local05
13ce8     00 94 06 F6 | 	mov	arg02, #0
13cec     3C 3A B1 FD | 	call	#__system____builtin_atoi
13cf0     3D 95 02 F6 | 	mov	arg02, result1
13cf4     53 93 02 F6 | 	mov	arg01, local01
13cf8     49 95 62 FC | 	wrlong	arg02, arg01
13cfc                 | LR__1714
13cfc                 | '     if r=result_uint then lpoke t1.result.uresult, val%(args(i))
13cfc     54 00 00 FF 
13d00     EC 64 06 F1 | 	add	objptr, ##43244
13d04     32 D1 02 FB | 	rdlong	local22, objptr
13d08     54 00 00 FF 
13d0c     EC 64 86 F1 | 	sub	objptr, ##43244
13d10     1D D0 0E F2 | 	cmp	local22, #29 wz
13d14     2C 00 90 5D |  if_ne	jmp	#LR__1715
13d18     5A AF 02 F6 | 	mov	local05, local08
13d1c     02 AE 66 F0 | 	shl	local05, #2
13d20     E7 B0 02 F6 | 	mov	local06, fp
13d24     2C B0 06 F1 | 	add	local06, #44
13d28     58 AF 02 F1 | 	add	local05, local06
13d2c     57 93 02 FB | 	rdlong	arg01, local05
13d30     00 94 06 F6 | 	mov	arg02, #0
13d34     F4 39 B1 FD | 	call	#__system____builtin_atoi
13d38     3D 95 02 F6 | 	mov	arg02, result1
13d3c     53 93 02 F6 | 	mov	arg01, local01
13d40     49 95 62 FC | 	wrlong	arg02, arg01
13d44                 | LR__1715
13d44                 | '     if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
13d44     54 00 00 FF 
13d48     EC 64 06 F1 | 	add	objptr, ##43244
13d4c     32 D1 02 FB | 	rdlong	local22, objptr
13d50     54 00 00 FF 
13d54     EC 64 86 F1 | 	sub	objptr, ##43244
13d58     1E D0 0E F2 | 	cmp	local22, #30 wz
13d5c     3C 00 90 5D |  if_ne	jmp	#LR__1716
13d60     5A AD 02 F6 | 	mov	local04, local08
13d64     02 AC 66 F0 | 	shl	local04, #2
13d68     E7 AE 02 F6 | 	mov	local05, fp
13d6c     2C AE 06 F1 | 	add	local05, #44
13d70     57 AD 02 F1 | 	add	local04, local05
13d74     56 93 02 FB | 	rdlong	arg01, local04
13d78     48 3B B1 FD | 	call	#__system____builtin_atof
13d7c     28 CE 05 F1 | 	add	fp, #40
13d80     E7 7A 62 FC | 	wrlong	result1, fp
13d84     E7 92 02 F6 | 	mov	arg01, fp
13d88     28 CE 85 F1 | 	sub	fp, #40
13d8c     49 7B 02 FB | 	rdlong	result1, arg01
13d90     3D 95 02 F6 | 	mov	arg02, result1
13d94     53 93 02 F6 | 	mov	arg01, local01
13d98     49 95 62 FC | 	wrlong	arg02, arg01
13d9c                 | LR__1716
13d9c                 | '     if r=result_string2 then lpoke t1.result.uresult,stringaddr
13d9c     54 00 00 FF 
13da0     EC 64 06 F1 | 	add	objptr, ##43244
13da4     32 D1 02 FB | 	rdlong	local22, objptr
13da8     2B D0 0E F2 | 	cmp	local22, #43 wz
13dac     53 93 02 A6 |  if_e	mov	arg01, local01
13db0     67 95 02 A6 |  if_e	mov	arg02, local21
13db4     49 95 62 AC |  if_e	wrlong	arg02, arg01
13db8     53 D1 02 F6 | 	mov	local22, local01
13dbc     08 D0 06 F1 | 	add	local22, #8
13dc0     32 AD 02 FB | 	rdlong	local04, objptr
13dc4     54 00 00 FF 
13dc8     EC 64 86 F1 | 	sub	objptr, ##43244
13dcc     56 D3 02 F6 | 	mov	local23, local04
13dd0     68 93 02 F6 | 	mov	arg01, local22
13dd4     69 95 02 F6 | 	mov	arg02, local23
13dd8     49 95 62 FC | 	wrlong	arg02, arg01
13ddc                 | LR__1717
13ddc                 | '   if esize=12 andalso t1.result.uresult>=$80000 then
13ddc     0C D8 0E F2 | 	cmp	local26, #12 wz
13de0     38 01 90 5D |  if_ne	jmp	#LR__1721
13de4     00 04 00 FF 
13de8     00 A6 16 F2 | 	cmp	local01, ##524288 wc
13dec     2C 01 90 CD |  if_b	jmp	#LR__1721
13df0                 | '     if r=result_int then pslpoke t1.result.uresult, val%(args(i))
13df0     54 00 00 FF 
13df4     EC 64 06 F1 | 	add	objptr, ##43244
13df8     32 D1 02 FB | 	rdlong	local22, objptr
13dfc     54 00 00 FF 
13e00     EC 64 86 F1 | 	sub	objptr, ##43244
13e04     1C D0 0E F2 | 	cmp	local22, #28 wz
13e08     2C 00 90 5D |  if_ne	jmp	#LR__1718
13e0c     5A AF 02 F6 | 	mov	local05, local08
13e10     02 AE 66 F0 | 	shl	local05, #2
13e14     E7 B0 02 F6 | 	mov	local06, fp
13e18     2C B0 06 F1 | 	add	local06, #44
13e1c     58 AF 02 F1 | 	add	local05, local06
13e20     57 93 02 FB | 	rdlong	arg01, local05
13e24     00 94 06 F6 | 	mov	arg02, #0
13e28     00 39 B1 FD | 	call	#__system____builtin_atoi
13e2c     3D 95 02 F6 | 	mov	arg02, result1
13e30     53 93 02 F6 | 	mov	arg01, local01
13e34     38 D0 B0 FD | 	call	#_pslpoke
13e38                 | LR__1718
13e38                 | '     if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
13e38     54 00 00 FF 
13e3c     EC 64 06 F1 | 	add	objptr, ##43244
13e40     32 D1 02 FB | 	rdlong	local22, objptr
13e44     54 00 00 FF 
13e48     EC 64 86 F1 | 	sub	objptr, ##43244
13e4c     1D D0 0E F2 | 	cmp	local22, #29 wz
13e50     2C 00 90 5D |  if_ne	jmp	#LR__1719
13e54     5A AF 02 F6 | 	mov	local05, local08
13e58     02 AE 66 F0 | 	shl	local05, #2
13e5c     E7 B0 02 F6 | 	mov	local06, fp
13e60     2C B0 06 F1 | 	add	local06, #44
13e64     58 AF 02 F1 | 	add	local05, local06
13e68     57 93 02 FB | 	rdlong	arg01, local05
13e6c     00 94 06 F6 | 	mov	arg02, #0
13e70     B8 38 B1 FD | 	call	#__system____builtin_atoi
13e74     3D 95 02 F6 | 	mov	arg02, result1
13e78     53 93 02 F6 | 	mov	arg01, local01
13e7c     F0 CF B0 FD | 	call	#_pslpoke
13e80                 | LR__1719
13e80                 | '     if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
13e80     54 00 00 FF 
13e84     EC 64 06 F1 | 	add	objptr, ##43244
13e88     32 D1 02 FB | 	rdlong	local22, objptr
13e8c     54 00 00 FF 
13e90     EC 64 86 F1 | 	sub	objptr, ##43244
13e94     1E D0 0E F2 | 	cmp	local22, #30 wz
13e98     38 00 90 5D |  if_ne	jmp	#LR__1720
13e9c     5A AD 02 F6 | 	mov	local04, local08
13ea0     02 AC 66 F0 | 	shl	local04, #2
13ea4     E7 AE 02 F6 | 	mov	local05, fp
13ea8     2C AE 06 F1 | 	add	local05, #44
13eac     57 AD 02 F1 | 	add	local04, local05
13eb0     56 93 02 FB | 	rdlong	arg01, local04
13eb4     0C 3A B1 FD | 	call	#__system____builtin_atof
13eb8     28 CE 05 F1 | 	add	fp, #40
13ebc     E7 7A 62 FC | 	wrlong	result1, fp
13ec0     E7 92 02 F6 | 	mov	arg01, fp
13ec4     28 CE 85 F1 | 	sub	fp, #40
13ec8     49 95 02 FB | 	rdlong	arg02, arg01
13ecc     53 93 02 F6 | 	mov	arg01, local01
13ed0     9C CF B0 FD | 	call	#_pslpoke
13ed4                 | LR__1720
13ed4                 | '     if r=result_string2 then pslpoke t1.result.uresult,stringaddr
13ed4     54 00 00 FF 
13ed8     EC 64 06 F1 | 	add	objptr, ##43244
13edc     32 D1 02 FB | 	rdlong	local22, objptr
13ee0     54 00 00 FF 
13ee4     EC 64 86 F1 | 	sub	objptr, ##43244
13ee8     2B D0 0E F2 | 	cmp	local22, #43 wz
13eec     53 93 02 A6 |  if_e	mov	arg01, local01
13ef0     67 95 02 A6 |  if_e	mov	arg02, local21
13ef4     78 CF B0 AD |  if_e	call	#_pslpoke
13ef8     53 93 02 F6 | 	mov	arg01, local01
13efc     08 92 06 F1 | 	add	arg01, #8
13f00     54 00 00 FF 
13f04     EC 64 06 F1 | 	add	objptr, ##43244
13f08     32 D3 02 FB | 	rdlong	local23, objptr
13f0c     54 00 00 FF 
13f10     EC 64 86 F1 | 	sub	objptr, ##43244
13f14     69 95 02 F6 | 	mov	arg02, local23
13f18     54 CF B0 FD | 	call	#_pslpoke
13f1c                 | LR__1721
13f1c                 | '   if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
13f1c     05 D8 0E F2 | 	cmp	local26, #5 wz
13f20     54 00 00 AF 
13f24     EC 64 06 A1 |  if_e	add	objptr, ##43244
13f28     32 D3 02 AB |  if_e	rdlong	local23, objptr
13f2c     54 00 00 AF 
13f30     EC 64 86 A1 |  if_e	sub	objptr, ##43244
13f34     2B D2 0E A2 |  if_e	cmp	local23, #43 wz
13f38     67 D3 02 A6 |  if_e	mov	local23, local21
13f3c     53 93 02 A6 |  if_e	mov	arg01, local01
13f40     69 95 02 A6 |  if_e	mov	arg02, local23
13f44     28 CF B0 AD |  if_e	call	#_pslpoke
13f48                 | '   if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
13f48     04 D8 0E F2 | 	cmp	local26, #4 wz
13f4c     48 00 90 5D |  if_ne	jmp	#LR__1722
13f50     54 00 00 FF 
13f54     EC 64 06 F1 | 	add	objptr, ##43244
13f58     32 D3 02 FB | 	rdlong	local23, objptr
13f5c     54 00 00 FF 
13f60     EC 64 86 F1 | 	sub	objptr, ##43244
13f64     2B D2 0E F2 | 	cmp	local23, #43 wz
13f68     2C 00 90 AD |  if_e	jmp	#LR__1722
13f6c     5A AF 02 F6 | 	mov	local05, local08
13f70     02 AE 66 F0 | 	shl	local05, #2
13f74     E7 B0 02 F6 | 	mov	local06, fp
13f78     2C B0 06 F1 | 	add	local06, #44
13f7c     58 AF 02 F1 | 	add	local05, local06
13f80     57 93 02 FB | 	rdlong	arg01, local05
13f84     00 94 06 F6 | 	mov	arg02, #0
13f88     A0 37 B1 FD | 	call	#__system____builtin_atoi
13f8c     3D 95 02 F6 | 	mov	arg02, result1
13f90     53 93 02 F6 | 	mov	arg01, local01
13f94     D8 CE B0 FD | 	call	#_pslpoke
13f98                 | LR__1722
13f98                 | '   if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
13f98     02 D8 0E F2 | 	cmp	local26, #2 wz
13f9c     48 00 90 5D |  if_ne	jmp	#LR__1723
13fa0     54 00 00 FF 
13fa4     EC 64 06 F1 | 	add	objptr, ##43244
13fa8     32 D3 02 FB | 	rdlong	local23, objptr
13fac     54 00 00 FF 
13fb0     EC 64 86 F1 | 	sub	objptr, ##43244
13fb4     2B D2 0E F2 | 	cmp	local23, #43 wz
13fb8     2C 00 90 AD |  if_e	jmp	#LR__1723
13fbc     5A AF 02 F6 | 	mov	local05, local08
13fc0     02 AE 66 F0 | 	shl	local05, #2
13fc4     E7 B0 02 F6 | 	mov	local06, fp
13fc8     2C B0 06 F1 | 	add	local06, #44
13fcc     58 AF 02 F1 | 	add	local05, local06
13fd0     57 93 02 FB | 	rdlong	arg01, local05
13fd4     00 94 06 F6 | 	mov	arg02, #0
13fd8     50 37 B1 FD | 	call	#__system____builtin_atoi
13fdc     3D 95 02 F6 | 	mov	arg02, result1
13fe0     53 93 02 F6 | 	mov	arg01, local01
13fe4     D0 CE B0 FD | 	call	#_psdpoke
13fe8                 | LR__1723
13fe8                 | '   if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
13fe8     01 D8 0E F2 | 	cmp	local26, #1 wz
13fec     48 00 90 5D |  if_ne	jmp	#LR__1724
13ff0     54 00 00 FF 
13ff4     EC 64 06 F1 | 	add	objptr, ##43244
13ff8     32 D3 02 FB | 	rdlong	local23, objptr
13ffc     54 00 00 FF 
14000     EC 64 86 F1 | 	sub	objptr, ##43244
14004     2B D2 0E F2 | 	cmp	local23, #43 wz
14008     2C 00 90 AD |  if_e	jmp	#LR__1724
1400c     5A AF 02 F6 | 	mov	local05, local08
14010     02 AE 66 F0 | 	shl	local05, #2
14014     E7 B0 02 F6 | 	mov	local06, fp
14018     2C B0 06 F1 | 	add	local06, #44
1401c     58 AF 02 F1 | 	add	local05, local06
14020     57 93 02 FB | 	rdlong	arg01, local05
14024     00 94 06 F6 | 	mov	arg02, #0
14028     00 37 B1 FD | 	call	#__system____builtin_atoi
1402c     3D 95 02 F6 | 	mov	arg02, result1
14030     53 93 02 F6 | 	mov	arg01, local01
14034     C8 CE B0 FD | 	call	#_pspoke
14038                 | LR__1724
14038                 | '   if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
14038     06 D8 0E F2 | 	cmp	local26, #6 wz
1403c     54 00 90 5D |  if_ne	jmp	#LR__1725
14040     54 00 00 FF 
14044     EC 64 06 F1 | 	add	objptr, ##43244
14048     32 D3 02 FB | 	rdlong	local23, objptr
1404c     54 00 00 FF 
14050     EC 64 86 F1 | 	sub	objptr, ##43244
14054     2B D2 0E F2 | 	cmp	local23, #43 wz
14058     38 00 90 AD |  if_e	jmp	#LR__1725
1405c     5A AD 02 F6 | 	mov	local04, local08
14060     02 AC 66 F0 | 	shl	local04, #2
14064     E7 AE 02 F6 | 	mov	local05, fp
14068     2C AE 06 F1 | 	add	local05, #44
1406c     57 AD 02 F1 | 	add	local04, local05
14070     56 93 02 FB | 	rdlong	arg01, local04
14074     4C 38 B1 FD | 	call	#__system____builtin_atof
14078     28 CE 05 F1 | 	add	fp, #40
1407c     E7 7A 62 FC | 	wrlong	result1, fp
14080     E7 92 02 F6 | 	mov	arg01, fp
14084     28 CE 85 F1 | 	sub	fp, #40
14088     49 95 02 FB | 	rdlong	arg02, arg01
1408c     53 93 02 F6 | 	mov	arg01, local01
14090     DC CD B0 FD | 	call	#_pslpoke
14094                 | LR__1725
14094     01 B4 06 F1 | 	add	local08, #1
14098     30 F9 9F FD | 	jmp	#LR__1693
1409c                 | LR__1726
1409c                 | LR__1727
1409c     E7 F0 03 F6 | 	mov	ptra, fp
140a0     F2 00 A0 FD | 	call	#popregs_
140a4                 | _do_input_ret
140a4     2D 00 64 FD | 	ret
140a8                 | 
140a8                 | ' 
140a8                 | ' ' ----------------  left$
140a8                 | ' 
140a8                 | ' sub do_left
140a8                 | _do_left
140a8     01 CA 05 F6 | 	mov	COUNT_, #1
140ac     E8 00 A0 FD | 	call	#pushregs_
140b0     14 F0 07 F1 | 	add	ptra, #20
140b4     4C 00 00 FF 
140b8     24 64 06 F1 | 	add	objptr, ##38948
140bc     32 97 02 FB | 	rdlong	arg03, objptr
140c0     4B 95 02 F6 | 	mov	arg02, arg03
140c4     01 94 66 F0 | 	shl	arg02, #1
140c8     4B 95 02 F1 | 	add	arg02, arg03
140cc     02 94 66 F0 | 	shl	arg02, #2
140d0     03 00 00 FF 
140d4     04 64 86 F1 | 	sub	objptr, ##1540
140d8     32 95 02 F1 | 	add	arg02, objptr
140dc     4A 97 02 FB | 	rdlong	arg03, arg02
140e0                 | ' 
140e0                 | ' numpar=compiledline(lineptr_e).result.uresult
140e0                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
140e0     02 96 0E F2 | 	cmp	arg03, #2 wz
140e4     49 00 00 FF 
140e8     20 64 86 F1 | 	sub	objptr, ##37408
140ec     40 00 90 AD |  if_e	jmp	#LR__1730
140f0     00 92 06 F6 | 	mov	arg01, #0
140f4     64 5E B1 FD | 	call	#__system___getiolock_0622
140f8     3D 93 02 F6 | 	mov	arg01, result1
140fc     D8 08 B1 FD | 	call	#__system___lockmem
14100     97 01 00 FF 
14104     8E 95 06 F6 | 	mov	arg02, ##@LR__6026
14108     00 92 06 F6 | 	mov	arg01, #0
1410c     00 96 06 F6 | 	mov	arg03, #0
14110     B8 15 B1 FD | 	call	#__system___basic_print_string
14114     00 92 06 F6 | 	mov	arg01, #0
14118     40 5E B1 FD | 	call	#__system___getiolock_0622
1411c     3D 01 68 FC | 	wrlong	#0, result1
14120     27 92 06 F6 | 	mov	arg01, #39
14124     00 94 06 F6 | 	mov	arg02, #0
14128     A8 CB B0 FD | 	call	#_printerror
1412c     D8 00 90 FD | 	jmp	#LR__1733
14130                 | LR__1730
14130     3C 95 BF FD | 	call	#_pop
14134     3F 97 02 F6 | 	mov	arg03, result3
14138     E7 7A 62 FC | 	wrlong	result1, fp
1413c     04 CE 05 F1 | 	add	fp, #4
14140     E7 7C 62 FC | 	wrlong	result2, fp
14144     04 CE 05 F1 | 	add	fp, #4
14148     E7 96 62 FC | 	wrlong	arg03, fp
1414c     08 CE 85 F1 | 	sub	fp, #8
14150     E7 92 02 F6 | 	mov	arg01, fp
14154     F4 96 BF FD | 	call	#_converttoint
14158     3D A7 02 F6 | 	mov	local01, result1
1415c     10 95 BF FD | 	call	#_pop
14160     3F 97 02 F6 | 	mov	arg03, result3
14164     E7 7A 62 FC | 	wrlong	result1, fp
14168     04 CE 05 F1 | 	add	fp, #4
1416c     E7 7C 62 FC | 	wrlong	result2, fp
14170     04 CE 05 F1 | 	add	fp, #4
14174     E7 96 62 FC | 	wrlong	arg03, fp
14178                 | ' t1=pop() : arg=converttoint(t1)
14178                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14178     08 CE 85 F1 | 	sub	fp, #8
1417c     2B 96 0E F2 | 	cmp	arg03, #43 wz
14180     18 00 90 5D |  if_ne	jmp	#LR__1731
14184     E7 92 02 FB | 	rdlong	arg01, fp
14188     54 96 BF FD | 	call	#_convertstring
1418c     E7 7A 62 FC | 	wrlong	result1, fp
14190     08 CE 05 F1 | 	add	fp, #8
14194     E7 3E 68 FC | 	wrlong	#31, fp
14198     08 CE 85 F1 | 	sub	fp, #8
1419c                 | LR__1731
1419c                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
1419c     08 CE 05 F1 | 	add	fp, #8
141a0     E7 96 02 FB | 	rdlong	arg03, fp
141a4     08 CE 85 F1 | 	sub	fp, #8
141a8     1F 96 0E F2 | 	cmp	arg03, #31 wz
141ac     40 00 90 AD |  if_e	jmp	#LR__1732
141b0     00 92 06 F6 | 	mov	arg01, #0
141b4     A4 5D B1 FD | 	call	#__system___getiolock_0622
141b8     3D 93 02 F6 | 	mov	arg01, result1
141bc     18 08 B1 FD | 	call	#__system___lockmem
141c0     97 01 00 FF 
141c4     96 95 06 F6 | 	mov	arg02, ##@LR__6027
141c8     00 92 06 F6 | 	mov	arg01, #0
141cc     00 96 06 F6 | 	mov	arg03, #0
141d0     F8 14 B1 FD | 	call	#__system___basic_print_string
141d4     00 92 06 F6 | 	mov	arg01, #0
141d8     80 5D B1 FD | 	call	#__system___getiolock_0622
141dc     3D 01 68 FC | 	wrlong	#0, result1
141e0     0F 92 06 F6 | 	mov	arg01, #15
141e4     00 94 06 F6 | 	mov	arg02, #0
141e8     E8 CA B0 FD | 	call	#_printerror
141ec     18 00 90 FD | 	jmp	#LR__1733
141f0                 | LR__1732
141f0     E7 92 02 FB | 	rdlong	arg01, fp
141f4     53 95 02 F6 | 	mov	arg02, local01
141f8     84 20 B1 FD | 	call	#__system__Left_S
141fc     E7 7A 62 FC | 	wrlong	result1, fp
14200     E7 92 02 F6 | 	mov	arg01, fp
14204     F8 94 BF FD | 	call	#_push
14208                 | LR__1733
14208     E7 F0 03 F6 | 	mov	ptra, fp
1420c     F2 00 A0 FD | 	call	#popregs_
14210                 | _do_left_ret
14210     2D 00 64 FD | 	ret
14214                 | 
14214                 | ' 
14214                 | ' ' ----------------  len
14214                 | ' 
14214                 | ' sub do_len
14214                 | _do_len
14214     01 CA 05 F6 | 	mov	COUNT_, #1
14218     E8 00 A0 FD | 	call	#pushregs_
1421c     14 F0 07 F1 | 	add	ptra, #20
14220     4C 00 00 FF 
14224     24 64 06 F1 | 	add	objptr, ##38948
14228     32 97 02 FB | 	rdlong	arg03, objptr
1422c     4B 95 02 F6 | 	mov	arg02, arg03
14230     01 94 66 F0 | 	shl	arg02, #1
14234     4B 95 02 F1 | 	add	arg02, arg03
14238     02 94 66 F0 | 	shl	arg02, #2
1423c     03 00 00 FF 
14240     04 64 86 F1 | 	sub	objptr, ##1540
14244     32 95 02 F1 | 	add	arg02, objptr
14248     4A 97 02 FB | 	rdlong	arg03, arg02
1424c                 | ' 
1424c                 | ' numpar=compiledline(lineptr_e).result.uresult
1424c                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
1424c     02 96 16 F2 | 	cmp	arg03, #2 wc
14250     49 00 00 FF 
14254     20 64 86 F1 | 	sub	objptr, ##37408
14258     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
1425c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1740
14260     00 92 06 F6 | 	mov	arg01, #0
14264     F4 5C B1 FD | 	call	#__system___getiolock_0622
14268     3D 93 02 F6 | 	mov	arg01, result1
1426c     68 07 B1 FD | 	call	#__system___lockmem
14270     97 01 00 FF 
14274     9E 95 06 F6 | 	mov	arg02, ##@LR__6028
14278     00 92 06 F6 | 	mov	arg01, #0
1427c     00 96 06 F6 | 	mov	arg03, #0
14280     48 14 B1 FD | 	call	#__system___basic_print_string
14284     00 92 06 F6 | 	mov	arg01, #0
14288     D0 5C B1 FD | 	call	#__system___getiolock_0622
1428c     3D 01 68 FC | 	wrlong	#0, result1
14290     27 92 06 F6 | 	mov	arg01, #39
14294     00 94 06 F6 | 	mov	arg02, #0
14298     38 CA B0 FD | 	call	#_printerror
1429c     C8 00 90 FD | 	jmp	#LR__1745
142a0                 | LR__1740
142a0     CC 93 BF FD | 	call	#_pop
142a4     3F 97 02 F6 | 	mov	arg03, result3
142a8     E7 7A 62 FC | 	wrlong	result1, fp
142ac     04 CE 05 F1 | 	add	fp, #4
142b0     E7 7C 62 FC | 	wrlong	result2, fp
142b4     04 CE 05 F1 | 	add	fp, #4
142b8     E7 96 62 FC | 	wrlong	arg03, fp
142bc                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
142bc     08 CE 85 F1 | 	sub	fp, #8
142c0     2B 96 0E F2 | 	cmp	arg03, #43 wz
142c4     18 00 90 5D |  if_ne	jmp	#LR__1741
142c8     E7 92 02 FB | 	rdlong	arg01, fp
142cc     10 95 BF FD | 	call	#_convertstring
142d0     E7 7A 62 FC | 	wrlong	result1, fp
142d4     08 CE 05 F1 | 	add	fp, #8
142d8     E7 3E 68 FC | 	wrlong	#31, fp
142dc     08 CE 85 F1 | 	sub	fp, #8
142e0                 | LR__1741
142e0                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
142e0     08 CE 05 F1 | 	add	fp, #8
142e4     E7 96 02 FB | 	rdlong	arg03, fp
142e8     08 CE 85 F1 | 	sub	fp, #8
142ec     1F 96 0E F2 | 	cmp	arg03, #31 wz
142f0     40 00 90 AD |  if_e	jmp	#LR__1742
142f4     00 92 06 F6 | 	mov	arg01, #0
142f8     60 5C B1 FD | 	call	#__system___getiolock_0622
142fc     3D 93 02 F6 | 	mov	arg01, result1
14300     D4 06 B1 FD | 	call	#__system___lockmem
14304     97 01 00 FF 
14308     A4 95 06 F6 | 	mov	arg02, ##@LR__6029
1430c     00 92 06 F6 | 	mov	arg01, #0
14310     00 96 06 F6 | 	mov	arg03, #0
14314     B4 13 B1 FD | 	call	#__system___basic_print_string
14318     00 92 06 F6 | 	mov	arg01, #0
1431c     3C 5C B1 FD | 	call	#__system___getiolock_0622
14320     3D 01 68 FC | 	wrlong	#0, result1
14324     0F 92 06 F6 | 	mov	arg01, #15
14328     00 94 06 F6 | 	mov	arg02, #0
1432c     A4 C9 B0 FD | 	call	#_printerror
14330     34 00 90 FD | 	jmp	#LR__1745
14334                 | LR__1742
14334     E7 92 02 FB | 	rdlong	arg01, fp
14338     49 A7 02 F6 | 	mov	local01, arg01
1433c     D7 06 48 FB | 	callpa	#(@LR__1744-@LR__1743)>>2,fcache_load_ptr_
14340                 | LR__1743
14340     53 7B CA FA | 	rdbyte	result1, local01 wz
14344     01 A6 06 51 |  if_ne	add	local01, #1
14348     F4 FF 9F 5D |  if_ne	jmp	#LR__1743
1434c                 | LR__1744
1434c     49 A7 82 F1 | 	sub	local01, arg01
14350     E7 A6 62 FC | 	wrlong	local01, fp
14354     08 CE 05 F1 | 	add	fp, #8
14358     E7 38 68 FC | 	wrlong	#28, fp
1435c     08 CE 85 F1 | 	sub	fp, #8
14360     E7 92 02 F6 | 	mov	arg01, fp
14364     98 93 BF FD | 	call	#_push
14368                 | LR__1745
14368     E7 F0 03 F6 | 	mov	ptra, fp
1436c     F2 00 A0 FD | 	call	#popregs_
14370                 | _do_len_ret
14370     2D 00 64 FD | 	ret
14374                 | 
14374                 | ' 
14374                 | ' ' ----------------  list
14374                 | ' 
14374                 | ' sub do_list
14374                 | _do_list
14374     04 CA 05 F6 | 	mov	COUNT_, #4
14378     E8 00 A0 FD | 	call	#pushregs_
1437c     B8 F0 07 F1 | 	add	ptra, #184
14380     00 A6 06 F6 | 	mov	local01, #0
14384     1E A8 CE F9 | 	bmask	local02, #30
14388     4C 00 00 FF 
1438c     24 64 06 F1 | 	add	objptr, ##38948
14390     32 AB 02 FB | 	rdlong	local03, objptr
14394     55 97 02 F6 | 	mov	arg03, local03
14398     01 96 66 F0 | 	shl	arg03, #1
1439c     55 97 02 F1 | 	add	arg03, local03
143a0     02 96 66 F0 | 	shl	arg03, #2
143a4     03 00 00 FF 
143a8     04 64 86 F1 | 	sub	objptr, ##1540
143ac     32 97 02 F1 | 	add	arg03, objptr
143b0     4B AD 02 FB | 	rdlong	local04, arg03
143b4                 | ' 
143b4                 | ' startline=0 : endline=$7FFFFFFF
143b4                 | ' numpar=compiledline(lineptr_e).result.uresult
143b4                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
143b4     01 AC 0E F2 | 	cmp	local04, #1 wz
143b8     49 00 00 FF 
143bc     20 64 86 F1 | 	sub	objptr, ##37408
143c0     34 00 90 5D |  if_ne	jmp	#LR__1750
143c4     A8 92 BF FD | 	call	#_pop
143c8     3F AB 02 F6 | 	mov	local03, result3
143cc     0C CE 05 F1 | 	add	fp, #12
143d0     E7 7A 62 FC | 	wrlong	result1, fp
143d4     04 CE 05 F1 | 	add	fp, #4
143d8     E7 7C 62 FC | 	wrlong	result2, fp
143dc     04 CE 05 F1 | 	add	fp, #4
143e0     E7 AA 62 FC | 	wrlong	local03, fp
143e4     08 CE 85 F1 | 	sub	fp, #8
143e8     E7 92 02 F6 | 	mov	arg01, fp
143ec     0C CE 85 F1 | 	sub	fp, #12
143f0     58 94 BF FD | 	call	#_converttoint
143f4     3D A7 02 F6 | 	mov	local01, result1
143f8                 | LR__1750
143f8                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
143f8     02 AC 0E F2 | 	cmp	local04, #2 wz
143fc     68 00 90 5D |  if_ne	jmp	#LR__1751
14400     6C 92 BF FD | 	call	#_pop
14404     3F AB 02 F6 | 	mov	local03, result3
14408     0C CE 05 F1 | 	add	fp, #12
1440c     E7 7A 62 FC | 	wrlong	result1, fp
14410     04 CE 05 F1 | 	add	fp, #4
14414     E7 7C 62 FC | 	wrlong	result2, fp
14418     04 CE 05 F1 | 	add	fp, #4
1441c     E7 AA 62 FC | 	wrlong	local03, fp
14420     08 CE 85 F1 | 	sub	fp, #8
14424     E7 92 02 F6 | 	mov	arg01, fp
14428     0C CE 85 F1 | 	sub	fp, #12
1442c     1C 94 BF FD | 	call	#_converttoint
14430     3D A9 02 F6 | 	mov	local02, result1
14434     38 92 BF FD | 	call	#_pop
14438     3F AB 02 F6 | 	mov	local03, result3
1443c     0C CE 05 F1 | 	add	fp, #12
14440     E7 7A 62 FC | 	wrlong	result1, fp
14444     04 CE 05 F1 | 	add	fp, #4
14448     E7 7C 62 FC | 	wrlong	result2, fp
1444c     04 CE 05 F1 | 	add	fp, #4
14450     E7 AA 62 FC | 	wrlong	local03, fp
14454     08 CE 85 F1 | 	sub	fp, #8
14458     E7 92 02 F6 | 	mov	arg01, fp
1445c     0C CE 85 F1 | 	sub	fp, #12
14460     E8 93 BF FD | 	call	#_converttoint
14464     3D A7 02 F6 | 	mov	local01, result1
14468                 | LR__1751
14468                 | ' 
14468                 | ' 
14468                 | ' print
14468     00 92 06 F6 | 	mov	arg01, #0
1446c     EC 5A B1 FD | 	call	#__system___getiolock_0622
14470     3D 93 02 F6 | 	mov	arg01, result1
14474     60 05 B1 FD | 	call	#__system___lockmem
14478     00 92 06 F6 | 	mov	arg01, #0
1447c     0A 94 06 F6 | 	mov	arg02, #10
14480     00 96 06 F6 | 	mov	arg03, #0
14484     EC 11 B1 FD | 	call	#__system___basic_print_char
14488     00 92 06 F6 | 	mov	arg01, #0
1448c     CC 5A B1 FD | 	call	#__system___getiolock_0622
14490     3D 01 68 FC | 	wrlong	#0, result1
14494     4C 00 00 FF 
14498     2C 64 06 F1 | 	add	objptr, ##38956
1449c     32 AD 02 FB | 	rdlong	local04, objptr
144a0     08 00 00 FF 
144a4     CC 64 06 F1 | 	add	objptr, ##4300
144a8     32 AD 62 FC | 	wrlong	local04, objptr
144ac     54 00 00 FF 
144b0     F8 64 86 F1 | 	sub	objptr, ##43256
144b4                 | ' do 
144b4                 | LR__1752
144b4     E7 92 02 F6 | 	mov	arg01, fp
144b8     20 92 06 F1 | 	add	arg01, #32
144bc     54 00 00 FF 
144c0     F8 64 06 F1 | 	add	objptr, ##43256
144c4     32 95 02 FB | 	rdlong	arg02, objptr
144c8     18 96 06 F6 | 	mov	arg03, #24
144cc     49 00 00 FF 
144d0     2C 64 86 F1 | 	sub	objptr, ##37420
144d4     8C F5 B0 FD | 	call	#_psram4_spin2_read1
144d8     0B 00 00 FF 
144dc     CC 64 86 F1 | 	sub	objptr, ##5836
144e0                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
144e0                 | '   
144e0                 | '   if header(0)<> $FFFFFFFF then
144e0     20 CE 05 F1 | 	add	fp, #32
144e4     E7 AC 02 FB | 	rdlong	local04, fp
144e8     20 CE 85 F1 | 	sub	fp, #32
144ec     FF FF 7F FF 
144f0     FF AD 0E F2 | 	cmp	local04, ##-1 wz
144f4     9C 00 90 AD |  if_e	jmp	#LR__1754
144f8     E7 92 02 F6 | 	mov	arg01, fp
144fc     38 92 06 F1 | 	add	arg01, #56
14500     3F 96 06 F6 | 	mov	arg03, #63
14504     28 96 62 FD | 	setq	arg03
14508     49 01 68 FC | 	wrlong	#0, arg01
1450c     E7 92 02 F6 | 	mov	arg01, fp
14510     38 92 06 F1 | 	add	arg01, #56
14514     28 CE 05 F1 | 	add	fp, #40
14518     E7 94 02 FB | 	rdlong	arg02, fp
1451c     04 CE 05 F1 | 	add	fp, #4
14520     E7 96 02 FB | 	rdlong	arg03, fp
14524     2C CE 85 F1 | 	sub	fp, #44
14528     0B 00 00 FF 
1452c     CC 64 06 F1 | 	add	objptr, ##5836
14530     30 F5 B0 FD | 	call	#_psram4_spin2_read1
14534     0B 00 00 FF 
14538     CC 64 86 F1 | 	sub	objptr, ##5836
1453c                 | '     longfill(linebuf,0,64)
1453c                 | '     psram.read1(varptr(linebuf),header(2),header(3))
1453c                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
1453c     20 CE 05 F1 | 	add	fp, #32
14540     E7 AC 02 FB | 	rdlong	local04, fp
14544     20 CE 85 F1 | 	sub	fp, #32
14548     53 AD 52 F2 | 	cmps	local04, local01 wc
1454c     24 00 90 CD |  if_b	jmp	#LR__1753
14550     20 CE 05 F1 | 	add	fp, #32
14554     E7 AA 02 FB | 	rdlong	local03, fp
14558     20 CE 85 F1 | 	sub	fp, #32
1455c     54 AB 5A F2 | 	cmps	local03, local02 wcz
14560     10 00 90 1D |  if_a	jmp	#LR__1753
14564     E7 92 02 F6 | 	mov	arg01, fp
14568     38 92 06 F1 | 	add	arg01, #56
1456c                 | ' 
1456c                 | ' write(text)
1456c     FC E8 B0 FD | 	call	#_Hg010b_4_spin2_write
14570                 | ' crlf
14570     98 ED B0 FD | 	call	#_Hg010b_4_spin2_crlf
14574                 | LR__1753
14574     34 CE 05 F1 | 	add	fp, #52
14578     E7 AC 02 FB | 	rdlong	local04, fp
1457c     34 CE 85 F1 | 	sub	fp, #52
14580     54 00 00 FF 
14584     F8 64 06 F1 | 	add	objptr, ##43256
14588     32 AD 62 FC | 	wrlong	local04, objptr
1458c     54 00 00 FF 
14590     F8 64 86 F1 | 	sub	objptr, ##43256
14594                 | LR__1754
14594     34 CE 05 F1 | 	add	fp, #52
14598     E7 AC 02 FB | 	rdlong	local04, fp
1459c     34 CE 85 F1 | 	sub	fp, #52
145a0     FF FF 3F FF 
145a4     FF AD 0E F2 | 	cmp	local04, ##2147483647 wz
145a8     20 CE 05 51 |  if_ne	add	fp, #32
145ac     E7 AA 02 5B |  if_ne	rdlong	local03, fp
145b0     20 CE 85 51 |  if_ne	sub	fp, #32
145b4     FF FF 7F 5F 
145b8     FF AB 0E 52 |  if_ne	cmp	local03, ##-1 wz
145bc     F4 FE 9F 5D |  if_ne	jmp	#LR__1752
145c0     E7 F0 03 F6 | 	mov	ptra, fp
145c4     F2 00 A0 FD | 	call	#popregs_
145c8                 | _do_list_ret
145c8     2D 00 64 FD | 	ret
145cc                 | 
145cc                 | ' 
145cc                 | ' '-------------------- load
145cc                 | ' 
145cc                 | ' sub do_load(amode=0 as integer)  
145cc                 | _do_load
145cc     07 CA 05 F6 | 	mov	COUNT_, #7
145d0     E8 00 A0 FD | 	call	#pushregs_
145d4     AC F0 07 F1 | 	add	ptra, #172
145d8     49 AD 02 F6 | 	mov	local04, arg01
145dc     54 00 00 FF 
145e0     B0 64 06 F1 | 	add	objptr, ##43184
145e4     32 03 68 FC | 	wrlong	#1, objptr
145e8     08 00 00 FF 
145ec     8C 64 86 F1 | 	sub	objptr, ##4236
145f0     32 95 02 FB | 	rdlong	arg02, objptr
145f4     4A 93 02 F6 | 	mov	arg01, arg02
145f8     01 92 66 F0 | 	shl	arg01, #1
145fc     4A 93 02 F1 | 	add	arg01, arg02
14600     02 92 66 F0 | 	shl	arg01, #2
14604     03 00 00 FF 
14608     04 64 86 F1 | 	sub	objptr, ##1540
1460c     32 93 02 F1 | 	add	arg01, objptr
14610     49 AF 02 FB | 	rdlong	local05, arg01
14614     E7 92 02 F6 | 	mov	arg01, fp
14618     A8 92 06 F1 | 	add	arg01, #168
1461c     49 00 00 FF 
14620     20 64 86 F1 | 	sub	objptr, ##37408
14624     E7 94 02 F6 | 	mov	arg02, fp
14628     28 94 06 F1 | 	add	arg02, #40
1462c     49 95 62 FC | 	wrlong	arg02, arg01
14630                 | ' 
14630                 | ' inload=1
14630                 | ' numpar=compiledline(lineptr_e).result.uresult
14630                 | ' lpoke varptr(line2$),varptr(line2)
14630                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
14630     01 AE 56 F2 | 	cmps	local05, #1 wc
14634     14 00 90 CD |  if_b	jmp	#LR__1760
14638     34 90 BF FD | 	call	#_pop
1463c     3D A7 02 F6 | 	mov	local01, result1
14640     3E A9 02 F6 | 	mov	local02, result2
14644     3F AB 02 F6 | 	mov	local03, result3
14648     18 00 90 FD | 	jmp	#LR__1761
1464c                 | LR__1760
1464c     54 00 00 FF 
14650     A0 64 06 F1 | 	add	objptr, ##43168
14654     32 A7 02 FB | 	rdlong	local01, objptr
14658     54 00 00 FF 
1465c     A0 64 86 F1 | 	sub	objptr, ##43168
14660     1F AA 06 F6 | 	mov	local03, #31
14664                 | LR__1761
14664                 | ' 'print "popped "; t1.result.uresult, t1.result_type
14664                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
14664     2B AA 0E F2 | 	cmp	local03, #43 wz
14668     10 00 90 5D |  if_ne	jmp	#LR__1762
1466c     53 93 02 F6 | 	mov	arg01, local01
14670     6C 91 BF FD | 	call	#_convertstring
14674     3D A7 02 F6 | 	mov	local01, result1
14678     1F AA 06 F6 | 	mov	local03, #31
1467c                 | LR__1762
1467c                 | ' if t1.result_type=result_string then
1467c     1F AA 0E F2 | 	cmp	local03, #31 wz
14680     7C 02 90 5D |  if_ne	jmp	#LR__1766
14684                 | '   if amode<>1234 then do_new
14684     02 00 00 FF 
14688     D2 AC 0E F2 | 	cmp	local04, ##1234 wz
1468c     D8 0D B0 5D |  if_ne	call	#_do_new
14690                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
14690     97 01 00 FF 
14694     AA 95 06 F6 | 	mov	arg02, ##@LR__6030
14698     53 93 02 F6 | 	mov	arg01, local01
1469c     60 03 B1 FD | 	call	#__system___string_cmp
146a0     00 7A 0E F2 | 	cmp	result1, #0 wz
146a4     54 00 00 AF 
146a8     A0 64 06 A1 |  if_e	add	objptr, ##43168
146ac     32 A7 02 AB |  if_e	rdlong	local01, objptr
146b0     54 00 00 FF 
146b4     A0 64 C6 F3 | 	sumz	objptr, ##43168
146b8     32 A7 62 5C |  if_ne	wrlong	local01, objptr
146bc     54 00 00 5F 
146c0     A0 64 86 51 |  if_ne	sub	objptr, ##43168
146c4                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
146c4     09 92 06 F6 | 	mov	arg01, #9
146c8     E8 4E B1 FD | 	call	#__system__close
146cc     09 AE 06 F6 | 	mov	local05, #9
146d0     4C 00 00 FF 
146d4     38 64 06 F1 | 	add	objptr, ##38968
146d8     32 93 02 FB | 	rdlong	arg01, objptr
146dc     4C 00 00 FF 
146e0     38 64 86 F1 | 	sub	objptr, ##38968
146e4     97 01 00 FF 
146e8     AB 95 06 F6 | 	mov	arg02, ##@LR__6031
146ec     44 03 B1 FD | 	call	#__system___string_concat
146f0     3D 93 02 F6 | 	mov	arg01, result1
146f4     53 95 02 F6 | 	mov	arg02, local01
146f8     38 03 B1 FD | 	call	#__system___string_concat
146fc     3D 95 02 F6 | 	mov	arg02, result1
14700     57 93 02 F6 | 	mov	arg01, local05
14704     00 96 06 F6 | 	mov	arg03, #0
14708     7C 0E B1 FD | 	call	#__system___basic_open_string
1470c     20 6A 06 F1 | 	add	ptr___system__dat__, #32
14710     35 7B 0A FB | 	rdlong	result1, ptr___system__dat__ wz
14714     35 01 68 FC | 	wrlong	#0, ptr___system__dat__
14718     20 6A 86 F1 | 	sub	ptr___system__dat__, #32
1471c                 | '   r=geterr() 
1471c                 | '   if r then 
1471c     30 01 90 AD |  if_e	jmp	#LR__1764
14720                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
14720     09 92 06 F6 | 	mov	arg01, #9
14724     8C 4E B1 FD | 	call	#__system__close
14728     09 B0 06 F6 | 	mov	local06, #9
1472c     4C 00 00 FF 
14730     38 64 06 F1 | 	add	objptr, ##38968
14734     32 93 02 FB | 	rdlong	arg01, objptr
14738     4C 00 00 FF 
1473c     38 64 86 F1 | 	sub	objptr, ##38968
14740     97 01 00 FF 
14744     AD 95 06 F6 | 	mov	arg02, ##@LR__6032
14748     E8 02 B1 FD | 	call	#__system___string_concat
1474c     3D 93 02 F6 | 	mov	arg01, result1
14750     53 95 02 F6 | 	mov	arg02, local01
14754     DC 02 B1 FD | 	call	#__system___string_concat
14758     3D 93 02 F6 | 	mov	arg01, result1
1475c     97 01 00 FF 
14760     AF 95 06 F6 | 	mov	arg02, ##@LR__6033
14764     CC 02 B1 FD | 	call	#__system___string_concat
14768     3D 95 02 F6 | 	mov	arg02, result1
1476c     58 93 02 F6 | 	mov	arg01, local06
14770     00 96 06 F6 | 	mov	arg03, #0
14774     10 0E B1 FD | 	call	#__system___basic_open_string
14778     20 6A 06 F1 | 	add	ptr___system__dat__, #32
1477c     35 7B 02 FB | 	rdlong	result1, ptr___system__dat__
14780     35 01 68 FC | 	wrlong	#0, ptr___system__dat__
14784     20 6A 86 F1 | 	sub	ptr___system__dat__, #32
14788     3D B3 0A F6 | 	mov	local07, result1 wz
1478c                 | '     r=geterr() 
1478c                 | '     if r then 
1478c     8C 00 90 AD |  if_e	jmp	#LR__1763
14790                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
14790     00 92 06 F6 | 	mov	arg01, #0
14794     C4 57 B1 FD | 	call	#__system___getiolock_0622
14798     3D 93 02 F6 | 	mov	arg01, result1
1479c     38 02 B1 FD | 	call	#__system___lockmem
147a0     97 01 00 FF 
147a4     B4 95 06 F6 | 	mov	arg02, ##@LR__6034
147a8     00 92 06 F6 | 	mov	arg01, #0
147ac     00 96 06 F6 | 	mov	arg03, #0
147b0     18 0F B1 FD | 	call	#__system___basic_print_string
147b4     00 92 06 F6 | 	mov	arg01, #0
147b8     59 95 02 F6 | 	mov	arg02, local07
147bc     00 96 06 F6 | 	mov	arg03, #0
147c0     0A 98 06 F6 | 	mov	arg04, #10
147c4     48 0F B1 FD | 	call	#__system___basic_print_integer
147c8     97 01 00 FF 
147cc     C2 95 06 F6 | 	mov	arg02, ##@LR__6035
147d0     00 92 06 F6 | 	mov	arg01, #0
147d4     00 96 06 F6 | 	mov	arg03, #0
147d8     F0 0E B1 FD | 	call	#__system___basic_print_string
147dc     59 93 02 F6 | 	mov	arg01, local07
147e0     A4 23 B1 FD | 	call	#__system___strerror
147e4     3D 95 02 F6 | 	mov	arg02, result1
147e8     00 92 06 F6 | 	mov	arg01, #0
147ec     00 96 06 F6 | 	mov	arg03, #0
147f0     D8 0E B1 FD | 	call	#__system___basic_print_string
147f4     00 92 06 F6 | 	mov	arg01, #0
147f8     0A 94 06 F6 | 	mov	arg02, #10
147fc     00 96 06 F6 | 	mov	arg03, #0
14800     70 0E B1 FD | 	call	#__system___basic_print_char
14804     00 92 06 F6 | 	mov	arg01, #0
14808     50 57 B1 FD | 	call	#__system___getiolock_0622
1480c     3D 01 68 FC | 	wrlong	#0, result1
14810     09 92 06 F6 | 	mov	arg01, #9
14814     9C 4D B1 FD | 	call	#__system__close
14818     94 01 90 FD | 	jmp	#LR__1768
1481c                 | LR__1763
1481c     54 00 00 FF 
14820     A0 64 06 F1 | 	add	objptr, ##43168
14824     32 93 02 FB | 	rdlong	arg01, objptr
14828     54 00 00 FF 
1482c     A0 64 86 F1 | 	sub	objptr, ##43168
14830     97 01 00 FF 
14834     C5 95 06 F6 | 	mov	arg02, ##@LR__6036
14838     F8 01 B1 FD | 	call	#__system___string_concat
1483c     54 00 00 FF 
14840     A0 64 06 F1 | 	add	objptr, ##43168
14844     32 7B 62 FC | 	wrlong	result1, objptr
14848     54 00 00 FF 
1484c     A0 64 86 F1 | 	sub	objptr, ##43168
14850                 | LR__1764
14850                 | '   close #9: open currentdir$+"/"+loadname for input as #9
14850     09 92 06 F6 | 	mov	arg01, #9
14854     5C 4D B1 FD | 	call	#__system__close
14858     09 B0 06 F6 | 	mov	local06, #9
1485c     4C 00 00 FF 
14860     38 64 06 F1 | 	add	objptr, ##38968
14864     32 93 02 FB | 	rdlong	arg01, objptr
14868     4C 00 00 FF 
1486c     38 64 86 F1 | 	sub	objptr, ##38968
14870     97 01 00 FF 
14874     CA 95 06 F6 | 	mov	arg02, ##@LR__6037
14878     B8 01 B1 FD | 	call	#__system___string_concat
1487c     3D 93 02 F6 | 	mov	arg01, result1
14880     54 00 00 FF 
14884     A0 64 06 F1 | 	add	objptr, ##43168
14888     32 95 02 FB | 	rdlong	arg02, objptr
1488c     54 00 00 FF 
14890     A0 64 86 F1 | 	sub	objptr, ##43168
14894     9C 01 B1 FD | 	call	#__system___string_concat
14898     3D 95 02 F6 | 	mov	arg02, result1
1489c     58 93 02 F6 | 	mov	arg01, local06
148a0     00 96 06 F6 | 	mov	arg03, #0
148a4     E0 0C B1 FD | 	call	#__system___basic_open_string
148a8                 | '   do
148a8                 | LR__1765
148a8     09 92 06 F6 | 	mov	arg01, #9
148ac     34 03 B1 FD | 	call	#__system___basic_read_line
148b0     3D B1 02 F6 | 	mov	local06, result1
148b4     38 00 00 FF 
148b8     C0 65 06 F1 | 	add	objptr, ##29120
148bc     32 B1 62 FC | 	wrlong	local06, objptr
148c0     38 00 00 FF 
148c4     C0 65 86 F1 | 	sub	objptr, ##29120
148c8     7C D0 BE FD | 	call	#_interpret
148cc     38 00 00 FF 
148d0     C0 65 06 F1 | 	add	objptr, ##29120
148d4     32 93 02 FB | 	rdlong	arg01, objptr
148d8     38 00 00 FF 
148dc     C0 65 86 F1 | 	sub	objptr, ##29120
148e0     97 01 00 FF 
148e4     CC 95 06 F6 | 	mov	arg02, ##@LR__6038
148e8     14 01 B1 FD | 	call	#__system___string_cmp
148ec     00 7A 0E F2 | 	cmp	result1, #0 wz
148f0     B4 FF 9F 5D |  if_ne	jmp	#LR__1765
148f4                 | '   close #9   
148f4     09 92 06 F6 | 	mov	arg01, #9
148f8     B8 4C B1 FD | 	call	#__system__close
148fc     0C 00 90 FD | 	jmp	#LR__1767
14900                 | LR__1766
14900     1E 92 06 F6 | 	mov	arg01, #30
14904     00 94 06 F6 | 	mov	arg02, #0
14908     C8 C3 B0 FD | 	call	#_printerror
1490c                 | LR__1767
1490c                 | ' print "Loaded ";currentdir$+"/"+loadname
1490c     00 92 06 F6 | 	mov	arg01, #0
14910     48 56 B1 FD | 	call	#__system___getiolock_0622
14914     3D 93 02 F6 | 	mov	arg01, result1
14918     BC 00 B1 FD | 	call	#__system___lockmem
1491c     97 01 00 FF 
14920     CD 95 06 F6 | 	mov	arg02, ##@LR__6039
14924     00 92 06 F6 | 	mov	arg01, #0
14928     00 96 06 F6 | 	mov	arg03, #0
1492c     9C 0D B1 FD | 	call	#__system___basic_print_string
14930     00 B2 06 F6 | 	mov	local07, #0
14934     4C 00 00 FF 
14938     38 64 06 F1 | 	add	objptr, ##38968
1493c     32 93 02 FB | 	rdlong	arg01, objptr
14940     4C 00 00 FF 
14944     38 64 86 F1 | 	sub	objptr, ##38968
14948     97 01 00 FF 
1494c     D5 95 06 F6 | 	mov	arg02, ##@LR__6040
14950     E0 00 B1 FD | 	call	#__system___string_concat
14954     3D 93 02 F6 | 	mov	arg01, result1
14958     54 00 00 FF 
1495c     A0 64 06 F1 | 	add	objptr, ##43168
14960     32 95 02 FB | 	rdlong	arg02, objptr
14964     54 00 00 FF 
14968     A0 64 86 F1 | 	sub	objptr, ##43168
1496c     C4 00 B1 FD | 	call	#__system___string_concat
14970     3D 95 02 F6 | 	mov	arg02, result1
14974     59 93 02 F6 | 	mov	arg01, local07
14978     00 96 06 F6 | 	mov	arg03, #0
1497c     4C 0D B1 FD | 	call	#__system___basic_print_string
14980     00 92 06 F6 | 	mov	arg01, #0
14984     0A 94 06 F6 | 	mov	arg02, #10
14988     00 96 06 F6 | 	mov	arg03, #0
1498c     E4 0C B1 FD | 	call	#__system___basic_print_char
14990     00 92 06 F6 | 	mov	arg01, #0
14994     C4 55 B1 FD | 	call	#__system___getiolock_0622
14998     3D 01 68 FC | 	wrlong	#0, result1
1499c     54 00 00 FF 
149a0     B0 64 06 F1 | 	add	objptr, ##43184
149a4     32 01 68 FC | 	wrlong	#0, objptr
149a8     54 00 00 FF 
149ac     B0 64 86 F1 | 	sub	objptr, ##43184
149b0                 | LR__1768
149b0     E7 F0 03 F6 | 	mov	ptra, fp
149b4     F2 00 A0 FD | 	call	#popregs_
149b8                 | _do_load_ret
149b8     2D 00 64 FD | 	ret
149bc                 | 
149bc                 | ' 
149bc                 | ' '-------------------- log
149bc                 | ' 
149bc                 | ' sub do_log
149bc                 | _do_log
149bc     02 CA 05 F6 | 	mov	COUNT_, #2
149c0     E8 00 A0 FD | 	call	#pushregs_
149c4     14 F0 07 F1 | 	add	ptra, #20
149c8     4C 00 00 FF 
149cc     24 64 06 F1 | 	add	objptr, ##38948
149d0     32 97 02 FB | 	rdlong	arg03, objptr
149d4     4B 95 02 F6 | 	mov	arg02, arg03
149d8     01 94 66 F0 | 	shl	arg02, #1
149dc     4B 95 02 F1 | 	add	arg02, arg03
149e0     02 94 66 F0 | 	shl	arg02, #2
149e4     03 00 00 FF 
149e8     04 64 86 F1 | 	sub	objptr, ##1540
149ec     32 95 02 F1 | 	add	arg02, objptr
149f0     4A A7 0A FB | 	rdlong	local01, arg02 wz
149f4                 | ' 
149f4                 | ' numpar=compiledline(lineptr_e).result.uresult
149f4                 | ' if numpar=0 orelse numpar>2 then print "log: "; : printerror(39) : return
149f4     49 00 00 FF 
149f8     20 64 86 F1 | 	sub	objptr, ##37408
149fc     03 A6 16 52 |  if_ne	cmp	local01, #3 wc
14a00     40 00 90 4D |  if_c_and_nz	jmp	#LR__1770
14a04     00 92 06 F6 | 	mov	arg01, #0
14a08     50 55 B1 FD | 	call	#__system___getiolock_0622
14a0c     3D 93 02 F6 | 	mov	arg01, result1
14a10     C4 FF B0 FD | 	call	#__system___lockmem
14a14     97 01 00 FF 
14a18     D7 95 06 F6 | 	mov	arg02, ##@LR__6041
14a1c     00 92 06 F6 | 	mov	arg01, #0
14a20     00 96 06 F6 | 	mov	arg03, #0
14a24     A4 0C B1 FD | 	call	#__system___basic_print_string
14a28     00 92 06 F6 | 	mov	arg01, #0
14a2c     2C 55 B1 FD | 	call	#__system___getiolock_0622
14a30     3D 01 68 FC | 	wrlong	#0, result1
14a34     27 92 06 F6 | 	mov	arg01, #39
14a38     00 94 06 F6 | 	mov	arg02, #0
14a3c     94 C2 B0 FD | 	call	#_printerror
14a40     AC 00 90 FD | 	jmp	#LR__1773
14a44                 | LR__1770
14a44                 | ' if numpar=2 then 
14a44     02 A6 0E F2 | 	cmp	local01, #2 wz
14a48     40 00 90 5D |  if_ne	jmp	#LR__1771
14a4c     20 8C BF FD | 	call	#_pop
14a50     3F A7 02 F6 | 	mov	local01, result3
14a54     E7 7A 62 FC | 	wrlong	result1, fp
14a58     04 CE 05 F1 | 	add	fp, #4
14a5c     E7 7C 62 FC | 	wrlong	result2, fp
14a60     04 CE 05 F1 | 	add	fp, #4
14a64     E7 A6 62 FC | 	wrlong	local01, fp
14a68     08 CE 85 F1 | 	sub	fp, #8
14a6c     E7 92 02 F6 | 	mov	arg01, fp
14a70     94 8E BF FD | 	call	#_converttofloat
14a74     3D 95 02 F6 | 	mov	arg02, result1
14a78     FC 16 20 FF 
14a7c     54 92 06 F6 | 	mov	arg01, ##1076754516
14a80     04 36 B1 FD | 	call	#__system____builtin_logbase
14a84     3D A9 02 F6 | 	mov	local02, result1
14a88     08 00 90 FD | 	jmp	#LR__1772
14a8c                 | LR__1771
14a8c     00 C0 1F FF 
14a90     00 A8 06 F6 | 	mov	local02, ##1065353216
14a94                 | LR__1772
14a94     D8 8B BF FD | 	call	#_pop
14a98     3F A7 02 F6 | 	mov	local01, result3
14a9c     E7 7A 62 FC | 	wrlong	result1, fp
14aa0     04 CE 05 F1 | 	add	fp, #4
14aa4     E7 7C 62 FC | 	wrlong	result2, fp
14aa8     04 CE 05 F1 | 	add	fp, #4
14aac     E7 A6 62 FC | 	wrlong	local01, fp
14ab0     08 CE 85 F1 | 	sub	fp, #8
14ab4     E7 92 02 F6 | 	mov	arg01, fp
14ab8     4C 8E BF FD | 	call	#_converttofloat
14abc     3D 95 02 F6 | 	mov	arg02, result1
14ac0     FC 16 20 FF 
14ac4     54 92 06 F6 | 	mov	arg01, ##1076754516
14ac8     BC 35 B1 FD | 	call	#__system____builtin_logbase
14acc     3D 93 02 F6 | 	mov	arg01, result1
14ad0     54 95 02 F6 | 	mov	arg02, local02
14ad4     D4 27 B1 FD | 	call	#__system___float_div
14ad8     E7 7A 62 FC | 	wrlong	result1, fp
14adc     08 CE 05 F1 | 	add	fp, #8
14ae0     E7 3C 68 FC | 	wrlong	#30, fp
14ae4     08 CE 85 F1 | 	sub	fp, #8
14ae8     E7 92 02 F6 | 	mov	arg01, fp
14aec     10 8C BF FD | 	call	#_push
14af0                 | LR__1773
14af0     E7 F0 03 F6 | 	mov	ptra, fp
14af4     F2 00 A0 FD | 	call	#popregs_
14af8                 | _do_log_ret
14af8     2D 00 64 FD | 	ret
14afc                 | 
14afc                 | ' 
14afc                 | ' '-------------------- lpeek
14afc                 | ' 
14afc                 | ' sub do_lpeek
14afc                 | _do_lpeek
14afc     01 CA 05 F6 | 	mov	COUNT_, #1
14b00     E8 00 A0 FD | 	call	#pushregs_
14b04     14 F0 07 F1 | 	add	ptra, #20
14b08     64 8B BF FD | 	call	#_pop
14b0c     E7 7A 62 FC | 	wrlong	result1, fp
14b10     04 CE 05 F1 | 	add	fp, #4
14b14     E7 7C 62 FC | 	wrlong	result2, fp
14b18     04 CE 05 F1 | 	add	fp, #4
14b1c     E7 7E 62 FC | 	wrlong	result3, fp
14b20     08 CE 85 F1 | 	sub	fp, #8
14b24     E7 92 02 F6 | 	mov	arg01, fp
14b28     20 8D BF FD | 	call	#_converttoint
14b2c     3D 93 02 F6 | 	mov	arg01, result1
14b30                 | ' 
14b30                 | ' t1=pop()
14b30                 | ' a=converttoint(t1)
14b30                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
14b30     00 04 00 FF 
14b34     00 92 16 F2 | 	cmp	arg01, ##524288 wc
14b38     49 A7 02 CB |  if_b	rdlong	local01, arg01
14b3c     08 00 90 CD |  if_b	jmp	#LR__1780
14b40     4C C4 B0 FD | 	call	#_pslpeek
14b44     3D A7 02 F6 | 	mov	local01, result1
14b48                 | LR__1780
14b48     08 CE 05 F1 | 	add	fp, #8
14b4c     E7 3A 68 FC | 	wrlong	#29, fp
14b50     08 CE 85 F1 | 	sub	fp, #8
14b54     E7 A6 62 FC | 	wrlong	local01, fp
14b58     E7 92 02 F6 | 	mov	arg01, fp
14b5c     A0 8B BF FD | 	call	#_push
14b60     E7 F0 03 F6 | 	mov	ptra, fp
14b64     F2 00 A0 FD | 	call	#popregs_
14b68                 | _do_lpeek_ret
14b68     2D 00 64 FD | 	ret
14b6c                 | 
14b6c                 | ' 
14b6c                 | ' '-------------------- lpoke
14b6c                 | ' 
14b6c                 | ' sub do_lpoke
14b6c                 | _do_lpoke
14b6c     02 CA 05 F6 | 	mov	COUNT_, #2
14b70     E8 00 A0 FD | 	call	#pushregs_
14b74     20 F0 07 F1 | 	add	ptra, #32
14b78     F4 8A BF FD | 	call	#_pop
14b7c     3D 95 02 F6 | 	mov	arg02, result1
14b80     3E 93 02 F6 | 	mov	arg01, result2
14b84     3F A7 02 F6 | 	mov	local01, result3
14b88     E7 94 62 FC | 	wrlong	arg02, fp
14b8c     04 CE 05 F1 | 	add	fp, #4
14b90     E7 92 62 FC | 	wrlong	arg01, fp
14b94     04 CE 05 F1 | 	add	fp, #4
14b98     E7 A6 62 FC | 	wrlong	local01, fp
14b9c     08 CE 85 F1 | 	sub	fp, #8
14ba0     CC 8A BF FD | 	call	#_pop
14ba4     3F A7 02 F6 | 	mov	local01, result3
14ba8     0C CE 05 F1 | 	add	fp, #12
14bac     E7 7A 62 FC | 	wrlong	result1, fp
14bb0     04 CE 05 F1 | 	add	fp, #4
14bb4     E7 7C 62 FC | 	wrlong	result2, fp
14bb8     04 CE 05 F1 | 	add	fp, #4
14bbc     E7 A6 62 FC | 	wrlong	local01, fp
14bc0     08 CE 85 F1 | 	sub	fp, #8
14bc4     E7 92 02 F6 | 	mov	arg01, fp
14bc8     0C CE 85 F1 | 	sub	fp, #12
14bcc     7C 8C BF FD | 	call	#_converttoint
14bd0     3D A7 02 F6 | 	mov	local01, result1
14bd4     E7 92 02 F6 | 	mov	arg01, fp
14bd8     70 8C BF FD | 	call	#_converttoint
14bdc     3D A9 02 F6 | 	mov	local02, result1
14be0                 | ' 
14be0                 | ' t1=pop() 'value
14be0                 | ' t2=pop() 
14be0                 | ' a=converttoint(t2) : v=converttoint(t1)
14be0                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
14be0     00 04 00 FF 
14be4     00 A6 16 F2 | 	cmp	local01, ##524288 wc
14be8     53 A9 62 CC |  if_b	wrlong	local02, local01
14bec     53 93 02 36 |  if_ae	mov	arg01, local01
14bf0     54 95 02 36 |  if_ae	mov	arg02, local02
14bf4     78 C2 B0 3D |  if_ae	call	#_pslpoke
14bf8     E7 F0 03 F6 | 	mov	ptra, fp
14bfc     F2 00 A0 FD | 	call	#popregs_
14c00                 | _do_lpoke_ret
14c00     2D 00 64 FD | 	ret
14c04                 | 
14c04                 | ' 
14c04                 | ' '-------------------- memlo
14c04                 | ' 
14c04                 | ' sub do_memlo
14c04                 | _do_memlo
14c04     00 CA 05 F6 | 	mov	COUNT_, #0
14c08     E8 00 A0 FD | 	call	#pushregs_
14c0c     0C F0 07 F1 | 	add	ptra, #12
14c10     45 00 00 FF 
14c14     00 64 06 F1 | 	add	objptr, ##35328
14c18     32 93 02 FB | 	rdlong	arg01, objptr
14c1c     45 00 00 FF 
14c20     00 64 86 F1 | 	sub	objptr, ##35328
14c24     E7 92 62 FC | 	wrlong	arg01, fp
14c28     08 CE 05 F1 | 	add	fp, #8
14c2c     E7 3A 68 FC | 	wrlong	#29, fp
14c30     08 CE 85 F1 | 	sub	fp, #8
14c34     E7 92 02 F6 | 	mov	arg01, fp
14c38     C4 8A BF FD | 	call	#_push
14c3c     E7 F0 03 F6 | 	mov	ptra, fp
14c40     F2 00 A0 FD | 	call	#popregs_
14c44                 | _do_memlo_ret
14c44     2D 00 64 FD | 	ret
14c48                 | 
14c48                 | ' 
14c48                 | ' '-------------------- memtop
14c48                 | ' 
14c48                 | ' sub do_memtop
14c48                 | _do_memtop
14c48     00 CA 05 F6 | 	mov	COUNT_, #0
14c4c     E8 00 A0 FD | 	call	#pushregs_
14c50     0C F0 07 F1 | 	add	ptra, #12
14c54     54 00 00 FF 
14c58     74 64 06 F1 | 	add	objptr, ##43124
14c5c     32 93 02 FB | 	rdlong	arg01, objptr
14c60     54 00 00 FF 
14c64     74 64 86 F1 | 	sub	objptr, ##43124
14c68     E7 92 62 FC | 	wrlong	arg01, fp
14c6c     08 CE 05 F1 | 	add	fp, #8
14c70     E7 3A 68 FC | 	wrlong	#29, fp
14c74     08 CE 85 F1 | 	sub	fp, #8
14c78     E7 92 02 F6 | 	mov	arg01, fp
14c7c     80 8A BF FD | 	call	#_push
14c80     E7 F0 03 F6 | 	mov	ptra, fp
14c84     F2 00 A0 FD | 	call	#popregs_
14c88                 | _do_memtop_ret
14c88     2D 00 64 FD | 	ret
14c8c                 | 
14c8c                 | ' 
14c8c                 | ' '-------------------- mid$
14c8c                 | ' 
14c8c                 | ' sub do_mid
14c8c                 | _do_mid
14c8c     02 CA 05 F6 | 	mov	COUNT_, #2
14c90     E8 00 A0 FD | 	call	#pushregs_
14c94     18 F0 07 F1 | 	add	ptra, #24
14c98     4C 00 00 FF 
14c9c     24 64 06 F1 | 	add	objptr, ##38948
14ca0     32 97 02 FB | 	rdlong	arg03, objptr
14ca4     4B 95 02 F6 | 	mov	arg02, arg03
14ca8     01 94 66 F0 | 	shl	arg02, #1
14cac     4B 95 02 F1 | 	add	arg02, arg03
14cb0     02 94 66 F0 | 	shl	arg02, #2
14cb4     03 00 00 FF 
14cb8     04 64 86 F1 | 	sub	objptr, ##1540
14cbc     32 95 02 F1 | 	add	arg02, objptr
14cc0     4A 97 02 FB | 	rdlong	arg03, arg02
14cc4                 | ' 
14cc4                 | ' numpar=compiledline(lineptr_e).result.uresult
14cc4                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
14cc4     03 96 0E F2 | 	cmp	arg03, #3 wz
14cc8     49 00 00 FF 
14ccc     20 64 86 F1 | 	sub	objptr, ##37408
14cd0     40 00 90 AD |  if_e	jmp	#LR__1790
14cd4     00 92 06 F6 | 	mov	arg01, #0
14cd8     80 52 B1 FD | 	call	#__system___getiolock_0622
14cdc     3D 93 02 F6 | 	mov	arg01, result1
14ce0     F4 FC B0 FD | 	call	#__system___lockmem
14ce4     97 01 00 FF 
14ce8     DD 95 06 F6 | 	mov	arg02, ##@LR__6042
14cec     00 92 06 F6 | 	mov	arg01, #0
14cf0     00 96 06 F6 | 	mov	arg03, #0
14cf4     D4 09 B1 FD | 	call	#__system___basic_print_string
14cf8     00 92 06 F6 | 	mov	arg01, #0
14cfc     5C 52 B1 FD | 	call	#__system___getiolock_0622
14d00     3D 01 68 FC | 	wrlong	#0, result1
14d04     27 92 06 F6 | 	mov	arg01, #39
14d08     00 94 06 F6 | 	mov	arg02, #0
14d0c     C4 BF B0 FD | 	call	#_printerror
14d10     08 01 90 FD | 	jmp	#LR__1793
14d14                 | LR__1790
14d14     58 89 BF FD | 	call	#_pop
14d18     3F 97 02 F6 | 	mov	arg03, result3
14d1c     E7 7A 62 FC | 	wrlong	result1, fp
14d20     04 CE 05 F1 | 	add	fp, #4
14d24     E7 7C 62 FC | 	wrlong	result2, fp
14d28     04 CE 05 F1 | 	add	fp, #4
14d2c     E7 96 62 FC | 	wrlong	arg03, fp
14d30     08 CE 85 F1 | 	sub	fp, #8
14d34     E7 92 02 F6 | 	mov	arg01, fp
14d38     10 8B BF FD | 	call	#_converttoint
14d3c     3D A7 02 F6 | 	mov	local01, result1
14d40     2C 89 BF FD | 	call	#_pop
14d44     3F 97 02 F6 | 	mov	arg03, result3
14d48     E7 7A 62 FC | 	wrlong	result1, fp
14d4c     04 CE 05 F1 | 	add	fp, #4
14d50     E7 7C 62 FC | 	wrlong	result2, fp
14d54     04 CE 05 F1 | 	add	fp, #4
14d58     E7 96 62 FC | 	wrlong	arg03, fp
14d5c     08 CE 85 F1 | 	sub	fp, #8
14d60     E7 92 02 F6 | 	mov	arg01, fp
14d64     E4 8A BF FD | 	call	#_converttoint
14d68     3D A9 02 F6 | 	mov	local02, result1
14d6c     00 89 BF FD | 	call	#_pop
14d70     3F 97 02 F6 | 	mov	arg03, result3
14d74     E7 7A 62 FC | 	wrlong	result1, fp
14d78     04 CE 05 F1 | 	add	fp, #4
14d7c     E7 7C 62 FC | 	wrlong	result2, fp
14d80     04 CE 05 F1 | 	add	fp, #4
14d84     E7 96 62 FC | 	wrlong	arg03, fp
14d88                 | ' t1=pop() : arg2=converttoint(t1)
14d88                 | ' t1=pop() : arg1=converttoint(t1)
14d88                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14d88     08 CE 85 F1 | 	sub	fp, #8
14d8c     2B 96 0E F2 | 	cmp	arg03, #43 wz
14d90     18 00 90 5D |  if_ne	jmp	#LR__1791
14d94     E7 92 02 FB | 	rdlong	arg01, fp
14d98     44 8A BF FD | 	call	#_convertstring
14d9c     E7 7A 62 FC | 	wrlong	result1, fp
14da0     08 CE 05 F1 | 	add	fp, #8
14da4     E7 3E 68 FC | 	wrlong	#31, fp
14da8     08 CE 85 F1 | 	sub	fp, #8
14dac                 | LR__1791
14dac                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
14dac     08 CE 05 F1 | 	add	fp, #8
14db0     E7 96 02 FB | 	rdlong	arg03, fp
14db4     08 CE 85 F1 | 	sub	fp, #8
14db8     1F 96 0E F2 | 	cmp	arg03, #31 wz
14dbc     40 00 90 AD |  if_e	jmp	#LR__1792
14dc0     00 92 06 F6 | 	mov	arg01, #0
14dc4     94 51 B1 FD | 	call	#__system___getiolock_0622
14dc8     3D 93 02 F6 | 	mov	arg01, result1
14dcc     08 FC B0 FD | 	call	#__system___lockmem
14dd0     97 01 00 FF 
14dd4     E4 95 06 F6 | 	mov	arg02, ##@LR__6043
14dd8     00 92 06 F6 | 	mov	arg01, #0
14ddc     00 96 06 F6 | 	mov	arg03, #0
14de0     E8 08 B1 FD | 	call	#__system___basic_print_string
14de4     00 92 06 F6 | 	mov	arg01, #0
14de8     70 51 B1 FD | 	call	#__system___getiolock_0622
14dec     3D 01 68 FC | 	wrlong	#0, result1
14df0     0F 92 06 F6 | 	mov	arg01, #15
14df4     00 94 06 F6 | 	mov	arg02, #0
14df8     D8 BE B0 FD | 	call	#_printerror
14dfc     1C 00 90 FD | 	jmp	#LR__1793
14e00                 | LR__1792
14e00     E7 92 02 FB | 	rdlong	arg01, fp
14e04     54 95 02 F6 | 	mov	arg02, local02
14e08     53 97 02 F6 | 	mov	arg03, local01
14e0c     88 15 B1 FD | 	call	#__system__Mid_S
14e10     E7 7A 62 FC | 	wrlong	result1, fp
14e14     E7 92 02 F6 | 	mov	arg01, fp
14e18     E4 88 BF FD | 	call	#_push
14e1c                 | LR__1793
14e1c     E7 F0 03 F6 | 	mov	ptra, fp
14e20     F2 00 A0 FD | 	call	#popregs_
14e24                 | _do_mid_ret
14e24     2D 00 64 FD | 	ret
14e28                 | 
14e28                 | ' 
14e28                 | ' '-------------------- mkdir
14e28                 | ' 
14e28                 | ' sub do_mkdir
14e28                 | _do_mkdir
14e28     04 CA 05 F6 | 	mov	COUNT_, #4
14e2c     E8 00 A0 FD | 	call	#pushregs_
14e30     3C 88 BF FD | 	call	#_pop
14e34     3E 99 02 F6 | 	mov	arg04, result2
14e38     3F 97 02 F6 | 	mov	arg03, result3
14e3c     3D A7 02 F6 | 	mov	local01, result1
14e40     4C A9 02 F6 | 	mov	local02, arg04
14e44     4B AB 02 F6 | 	mov	local03, arg03
14e48                 | ' 
14e48                 | ' t1=pop()
14e48                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14e48     2B AA 0E F2 | 	cmp	local03, #43 wz
14e4c     10 00 90 5D |  if_ne	jmp	#LR__1800
14e50     53 93 02 F6 | 	mov	arg01, local01
14e54     88 89 BF FD | 	call	#_convertstring
14e58     3D A7 02 F6 | 	mov	local01, result1
14e5c     1F AA 06 F6 | 	mov	local03, #31
14e60                 | LR__1800
14e60                 | ' if t1.result_type<>result_string then printerror(15): return
14e60     1F AA 0E F2 | 	cmp	local03, #31 wz
14e64     10 00 90 AD |  if_e	jmp	#LR__1801
14e68     0F 92 06 F6 | 	mov	arg01, #15
14e6c     00 94 06 F6 | 	mov	arg02, #0
14e70     60 BE B0 FD | 	call	#_printerror
14e74     64 00 90 FD | 	jmp	#LR__1803
14e78                 | LR__1801
14e78     53 93 02 F6 | 	mov	arg01, local01
14e7c     50 1C B1 FD | 	call	#__system___mkdir
14e80     3D AD 0A F6 | 	mov	local04, result1 wz
14e84                 | ' filename$=t1.result.sresult
14e84                 | ' err=mkdir(filename$)
14e84                 | ' 'err=geterr() : 
14e84                 | ' if err<>0 then print "Cannot create a directory: system error "; err
14e84     54 00 90 AD |  if_e	jmp	#LR__1802
14e88     00 92 06 F6 | 	mov	arg01, #0
14e8c     CC 50 B1 FD | 	call	#__system___getiolock_0622
14e90     3D 93 02 F6 | 	mov	arg01, result1
14e94     40 FB B0 FD | 	call	#__system___lockmem
14e98     97 01 00 FF 
14e9c     EB 95 06 F6 | 	mov	arg02, ##@LR__6044
14ea0     00 92 06 F6 | 	mov	arg01, #0
14ea4     00 96 06 F6 | 	mov	arg03, #0
14ea8     20 08 B1 FD | 	call	#__system___basic_print_string
14eac     00 92 06 F6 | 	mov	arg01, #0
14eb0     56 95 02 F6 | 	mov	arg02, local04
14eb4     00 96 06 F6 | 	mov	arg03, #0
14eb8     0A 98 06 F6 | 	mov	arg04, #10
14ebc     50 08 B1 FD | 	call	#__system___basic_print_integer
14ec0     00 92 06 F6 | 	mov	arg01, #0
14ec4     0A 94 06 F6 | 	mov	arg02, #10
14ec8     00 96 06 F6 | 	mov	arg03, #0
14ecc     A4 07 B1 FD | 	call	#__system___basic_print_char
14ed0     00 92 06 F6 | 	mov	arg01, #0
14ed4     84 50 B1 FD | 	call	#__system___getiolock_0622
14ed8     3D 01 68 FC | 	wrlong	#0, result1
14edc                 | LR__1802
14edc                 | LR__1803
14edc     E7 F0 03 F6 | 	mov	ptra, fp
14ee0     F2 00 A0 FD | 	call	#popregs_
14ee4                 | _do_mkdir_ret
14ee4     2D 00 64 FD | 	ret
14ee8                 | 
14ee8                 | ' 
14ee8                 | ' '-------------------- mode
14ee8                 | ' 
14ee8                 | ' sub do_mode
14ee8                 | _do_mode
14ee8     05 CA 05 F6 | 	mov	COUNT_, #5
14eec     E8 00 A0 FD | 	call	#pushregs_
14ef0     7C 87 BF FD | 	call	#_pop
14ef4     3D A7 02 F6 | 	mov	local01, result1
14ef8     3E A9 02 F6 | 	mov	local02, result2
14efc     3F AB 02 F6 | 	mov	local03, result3
14f00                 | ' t1=pop() 
14f00                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
14f00     1E AA 0E F2 | 	cmp	local03, #30 wz
14f04     10 00 90 5D |  if_ne	jmp	#LR__1810
14f08     53 93 02 F6 | 	mov	arg01, local01
14f0c     00 94 06 F6 | 	mov	arg02, #0
14f10     5C 26 B1 FD | 	call	#__system___float_tointeger
14f14     3D A7 02 F6 | 	mov	local01, result1
14f18                 | LR__1810
14f18                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
14f18     1F AA 0E F2 | 	cmp	local03, #31 wz
14f1c     18 00 90 5D |  if_ne	jmp	#LR__1811
14f20     53 93 02 F6 | 	mov	arg01, local01
14f24     9C 29 B1 FD | 	call	#__system____builtin_atof
14f28     3D 93 02 F6 | 	mov	arg01, result1
14f2c     00 94 06 F6 | 	mov	arg02, #0
14f30     3C 26 B1 FD | 	call	#__system___float_tointeger
14f34     3D A7 02 F6 | 	mov	local01, result1
14f38                 | LR__1811
14f38                 | ' select case t1.result.iresult
14f38     53 AD 02 F6 | 	mov	local04, local01
14f3c     06 AC 26 F3 | 	fle	local04, #6
14f40     30 AC 62 FD | 	jmprel	local04
14f44                 | LR__1812
14f44     18 00 90 FD | 	jmp	#LR__1813
14f48     A8 00 90 FD | 	jmp	#LR__1814
14f4c     10 01 90 FD | 	jmp	#LR__1815
14f50     78 01 90 FD | 	jmp	#LR__1816
14f54     E0 01 90 FD | 	jmp	#LR__1817
14f58     70 02 90 FD | 	jmp	#LR__1818
14f5c     FC 02 90 FD | 	jmp	#LR__1819
14f60                 | LR__1813
14f60     38 00 00 FF 
14f64     E4 65 06 F1 | 	add	objptr, ##29156
14f68     32 03 68 FC | 	wrlong	#1, objptr
14f6c     04 64 86 F1 | 	sub	objptr, #4
14f70     32 35 69 FC | 	wrlong	#154, objptr
14f74     19 00 00 FF 
14f78     00 65 06 F1 | 	add	objptr, ##13056
14f7c     32 03 68 FC | 	wrlong	#1, objptr
14f80     19 00 00 FF 
14f84     04 65 86 F1 | 	sub	objptr, ##13060
14f88     32 27 69 FC | 	wrlong	#147, objptr
14f8c     38 00 00 FF 
14f90     DC 65 86 F1 | 	sub	objptr, ##29148
14f94     04 92 06 F6 | 	mov	arg01, #4
14f98     50 D9 B0 FD | 	call	#_Hg010b_4_spin2_setfontfamily
14f9c     38 00 00 FF 
14fa0     E0 65 06 F1 | 	add	objptr, ##29152
14fa4     32 93 02 FB | 	rdlong	arg01, objptr
14fa8     04 64 86 F1 | 	sub	objptr, #4
14fac     32 95 02 FB | 	rdlong	arg02, objptr
14fb0                 | ' 
14fb0                 | ' write_color:=ff
14fb0     38 00 00 FF 
14fb4     9B 65 86 F1 | 	sub	objptr, ##29083
14fb8     32 93 62 FC | 	wrlong	arg01, objptr
14fbc                 | ' write_background:=bb
14fbc     04 64 06 F1 | 	add	objptr, #4
14fc0     32 95 62 FC | 	wrlong	arg02, objptr
14fc4     36 AD 02 F6 | 	mov	local04, ptr__dat__
14fc8     01 00 00 FF 
14fcc     00 AC 06 F1 | 	add	local04, ##512
14fd0     54 00 00 FF 
14fd4     3B 64 06 F1 | 	add	objptr, ##43067
14fd8     32 AD 62 FC | 	wrlong	local04, objptr
14fdc     04 64 86 F1 | 	sub	objptr, #4
14fe0     03 00 80 FF 
14fe4     32 31 69 FC | 	wrlong	##1688, objptr
14fe8     54 00 00 FF 
14fec     7C 64 86 F1 | 	sub	objptr, ##43132
14ff0     68 02 90 FD | 	jmp	#LR__1819
14ff4                 | LR__1814
14ff4     38 00 00 FF 
14ff8     E4 65 06 F1 | 	add	objptr, ##29156
14ffc     32 01 68 FC | 	wrlong	#0, objptr
15000     04 64 86 F1 | 	sub	objptr, #4
15004     32 2F 68 FC | 	wrlong	#23, objptr
15008     19 00 00 FF 
1500c     00 65 06 F1 | 	add	objptr, ##13056
15010     32 01 68 FC | 	wrlong	#0, objptr
15014     19 00 00 FF 
15018     04 65 86 F1 | 	sub	objptr, ##13060
1501c     32 01 68 FC | 	wrlong	#0, objptr
15020     38 00 00 FF 
15024     DC 65 86 F1 | 	sub	objptr, ##29148
15028     00 92 06 F6 | 	mov	arg01, #0
1502c     BC D8 B0 FD | 	call	#_Hg010b_4_spin2_setfontfamily
15030     38 00 00 FF 
15034     E0 65 06 F1 | 	add	objptr, ##29152
15038     32 93 02 FB | 	rdlong	arg01, objptr
1503c     04 64 86 F1 | 	sub	objptr, #4
15040     32 95 02 FB | 	rdlong	arg02, objptr
15044                 | ' 
15044                 | ' write_color:=ff
15044     38 00 00 FF 
15048     9B 65 86 F1 | 	sub	objptr, ##29083
1504c     32 93 62 FC | 	wrlong	arg01, objptr
15050                 | ' write_background:=bb
15050     04 64 06 F1 | 	add	objptr, #4
15054     32 95 62 FC | 	wrlong	arg02, objptr
15058     45 64 86 F1 | 	sub	objptr, #69
1505c     FC 01 90 FD | 	jmp	#LR__1819
15060                 | LR__1815
15060     38 00 00 FF 
15064     E4 65 06 F1 | 	add	objptr, ##29156
15068     32 01 68 FC | 	wrlong	#0, objptr
1506c     04 64 86 F1 | 	sub	objptr, #4
15070     32 6B 69 FC | 	wrlong	#181, objptr
15074     19 00 00 FF 
15078     00 65 06 F1 | 	add	objptr, ##13056
1507c     32 01 68 FC | 	wrlong	#0, objptr
15080     19 00 00 FF 
15084     04 65 86 F1 | 	sub	objptr, ##13060
15088     32 01 68 FC | 	wrlong	#0, objptr
1508c     38 00 00 FF 
15090     DC 65 86 F1 | 	sub	objptr, ##29148
15094     00 92 06 F6 | 	mov	arg01, #0
15098     50 D8 B0 FD | 	call	#_Hg010b_4_spin2_setfontfamily
1509c     38 00 00 FF 
150a0     E0 65 06 F1 | 	add	objptr, ##29152
150a4     32 93 02 FB | 	rdlong	arg01, objptr
150a8     04 64 86 F1 | 	sub	objptr, #4
150ac     32 95 02 FB | 	rdlong	arg02, objptr
150b0                 | ' 
150b0                 | ' write_color:=ff
150b0     38 00 00 FF 
150b4     9B 65 86 F1 | 	sub	objptr, ##29083
150b8     32 93 62 FC | 	wrlong	arg01, objptr
150bc                 | ' write_background:=bb
150bc     04 64 06 F1 | 	add	objptr, #4
150c0     32 95 62 FC | 	wrlong	arg02, objptr
150c4     45 64 86 F1 | 	sub	objptr, #69
150c8     90 01 90 FD | 	jmp	#LR__1819
150cc                 | LR__1816
150cc     38 00 00 FF 
150d0     E4 65 06 F1 | 	add	objptr, ##29156
150d4     32 01 68 FC | 	wrlong	#0, objptr
150d8     04 64 86 F1 | 	sub	objptr, #4
150dc     32 1F 68 FC | 	wrlong	#15, objptr
150e0     19 00 00 FF 
150e4     00 65 06 F1 | 	add	objptr, ##13056
150e8     32 01 68 FC | 	wrlong	#0, objptr
150ec     19 00 00 FF 
150f0     04 65 86 F1 | 	sub	objptr, ##13060
150f4     32 01 68 FC | 	wrlong	#0, objptr
150f8     38 00 00 FF 
150fc     DC 65 86 F1 | 	sub	objptr, ##29148
15100     00 92 06 F6 | 	mov	arg01, #0
15104     E4 D7 B0 FD | 	call	#_Hg010b_4_spin2_setfontfamily
15108     38 00 00 FF 
1510c     E0 65 06 F1 | 	add	objptr, ##29152
15110     32 93 02 FB | 	rdlong	arg01, objptr
15114     04 64 86 F1 | 	sub	objptr, #4
15118     32 95 02 FB | 	rdlong	arg02, objptr
1511c                 | ' 
1511c                 | ' write_color:=ff
1511c     38 00 00 FF 
15120     9B 65 86 F1 | 	sub	objptr, ##29083
15124     32 93 62 FC | 	wrlong	arg01, objptr
15128                 | ' write_background:=bb
15128     04 64 06 F1 | 	add	objptr, #4
1512c     32 95 62 FC | 	wrlong	arg02, objptr
15130     45 64 86 F1 | 	sub	objptr, #69
15134     24 01 90 FD | 	jmp	#LR__1819
15138                 | LR__1817
15138     38 00 00 FF 
1513c     E4 65 06 F1 | 	add	objptr, ##29156
15140     32 03 68 FC | 	wrlong	#1, objptr
15144     04 64 86 F1 | 	sub	objptr, #4
15148     32 03 68 FC | 	wrlong	#1, objptr
1514c     19 00 00 FF 
15150     00 65 06 F1 | 	add	objptr, ##13056
15154     32 03 68 FC | 	wrlong	#1, objptr
15158     19 00 00 FF 
1515c     04 65 86 F1 | 	sub	objptr, ##13060
15160     32 1D 68 FC | 	wrlong	#14, objptr
15164     38 00 00 FF 
15168     DC 65 86 F1 | 	sub	objptr, ##29148
1516c     04 92 06 F6 | 	mov	arg01, #4
15170     78 D7 B0 FD | 	call	#_Hg010b_4_spin2_setfontfamily
15174     38 00 00 FF 
15178     E0 65 06 F1 | 	add	objptr, ##29152
1517c     32 93 02 FB | 	rdlong	arg01, objptr
15180     04 64 86 F1 | 	sub	objptr, #4
15184     32 95 02 FB | 	rdlong	arg02, objptr
15188                 | ' 
15188                 | ' write_color:=ff
15188     38 00 00 FF 
1518c     9B 65 86 F1 | 	sub	objptr, ##29083
15190     32 93 62 FC | 	wrlong	arg01, objptr
15194                 | ' write_background:=bb
15194     04 64 06 F1 | 	add	objptr, #4
15198     32 95 62 FC | 	wrlong	arg02, objptr
1519c     36 AF 02 F6 | 	mov	local05, ptr__dat__
151a0     07 00 00 FF 
151a4     82 AF 06 F1 | 	add	local05, ##3970
151a8     54 00 00 FF 
151ac     3B 64 06 F1 | 	add	objptr, ##43067
151b0     32 AF 62 FC | 	wrlong	local05, objptr
151b4     04 64 86 F1 | 	sub	objptr, #4
151b8     03 00 80 FF 
151bc     32 31 69 FC | 	wrlong	##1688, objptr
151c0     54 00 00 FF 
151c4     7C 64 86 F1 | 	sub	objptr, ##43132
151c8     90 00 90 FD | 	jmp	#LR__1819
151cc                 | LR__1818
151cc     38 00 00 FF 
151d0     E4 65 06 F1 | 	add	objptr, ##29156
151d4     32 05 68 FC | 	wrlong	#2, objptr
151d8     04 64 86 F1 | 	sub	objptr, #4
151dc     32 03 68 FC | 	wrlong	#1, objptr
151e0     19 00 00 FF 
151e4     00 65 06 F1 | 	add	objptr, ##13056
151e8     32 03 68 FC | 	wrlong	#1, objptr
151ec     19 00 00 FF 
151f0     04 65 86 F1 | 	sub	objptr, ##13060
151f4     32 0F 68 FC | 	wrlong	#7, objptr
151f8     38 00 00 FF 
151fc     DC 65 86 F1 | 	sub	objptr, ##29148
15200     08 92 06 F6 | 	mov	arg01, #8
15204     E4 D6 B0 FD | 	call	#_Hg010b_4_spin2_setfontfamily
15208     38 00 00 FF 
1520c     E0 65 06 F1 | 	add	objptr, ##29152
15210     32 93 02 FB | 	rdlong	arg01, objptr
15214     04 64 86 F1 | 	sub	objptr, #4
15218     32 95 02 FB | 	rdlong	arg02, objptr
1521c                 | ' 
1521c                 | ' write_color:=ff
1521c     38 00 00 FF 
15220     9B 65 86 F1 | 	sub	objptr, ##29083
15224     32 93 62 FC | 	wrlong	arg01, objptr
15228                 | ' write_background:=bb
15228     04 64 06 F1 | 	add	objptr, #4
1522c     32 95 62 FC | 	wrlong	arg02, objptr
15230     36 AF 02 F6 | 	mov	local05, ptr__dat__
15234     07 00 00 FF 
15238     82 AF 06 F1 | 	add	local05, ##3970
1523c     54 00 00 FF 
15240     3B 64 06 F1 | 	add	objptr, ##43067
15244     32 AF 62 FC | 	wrlong	local05, objptr
15248     04 64 86 F1 | 	sub	objptr, #4
1524c     03 00 80 FF 
15250     32 31 69 FC | 	wrlong	##1688, objptr
15254     54 00 00 FF 
15258     7C 64 86 F1 | 	sub	objptr, ##43132
1525c                 | LR__1819
1525c     54 00 00 FF 
15260     78 64 06 F1 | 	add	objptr, ##43128
15264     32 A7 62 FC | 	wrlong	local01, objptr
15268     04 64 86 F1 | 	sub	objptr, #4
1526c     32 93 02 FB | 	rdlong	arg01, objptr
15270     0F 00 00 FF 
15274     74 64 86 F1 | 	sub	objptr, ##7796
15278     32 AF 02 FB | 	rdlong	local05, objptr
1527c     45 00 00 FF 
15280     00 64 86 F1 | 	sub	objptr, ##35328
15284     57 93 82 F1 | 	sub	arg01, local05
15288     00 94 06 F6 | 	mov	arg02, #0
1528c     0A 96 06 F6 | 	mov	arg03, #10
15290     40 12 B1 FD | 	call	#__system__Number_S
15294     3D 93 02 F6 | 	mov	arg01, result1
15298     98 01 00 FF 
1529c     14 94 06 F6 | 	mov	arg02, ##@LR__6045
152a0     90 F7 B0 FD | 	call	#__system___string_concat
152a4     52 00 00 FF 
152a8     DC 64 06 F1 | 	add	objptr, ##42204
152ac     32 7B 62 FC | 	wrlong	result1, objptr
152b0     19 00 00 FF 
152b4     FC 64 86 F1 | 	sub	objptr, ##13052
152b8     32 93 02 FB | 	rdlong	arg01, objptr
152bc     04 64 86 F1 | 	sub	objptr, #4
152c0     32 95 02 FB | 	rdlong	arg02, objptr
152c4     38 00 00 FF 
152c8     DC 65 86 F1 | 	sub	objptr, ##29148
152cc     E8 D7 B0 FD | 	call	#_Hg010b_4_spin2_cls
152d0     98 01 00 FF 
152d4     26 92 06 F6 | 	mov	arg01, ##@LR__6046
152d8                 | ' 
152d8                 | ' write(text)
152d8     90 DB B0 FD | 	call	#_Hg010b_4_spin2_write
152dc                 | ' crlf
152dc     2C E0 B0 FD | 	call	#_Hg010b_4_spin2_crlf
152e0     18 00 00 FF 
152e4     40 6D 06 F1 | 	add	ptr__dat__, ##12608
152e8     36 93 02 FB | 	rdlong	arg01, ptr__dat__
152ec     18 00 00 FF 
152f0     40 6D 86 F1 | 	sub	ptr__dat__, ##12608
152f4                 | ' 
152f4                 | ' write(text)
152f4     74 DB B0 FD | 	call	#_Hg010b_4_spin2_write
152f8                 | ' crlf
152f8     10 E0 B0 FD | 	call	#_Hg010b_4_spin2_crlf
152fc     52 00 00 FF 
15300     DC 64 06 F1 | 	add	objptr, ##42204
15304     32 93 02 FB | 	rdlong	arg01, objptr
15308     52 00 00 FF 
1530c     DC 64 86 F1 | 	sub	objptr, ##42204
15310                 | ' 
15310                 | ' write(text)
15310     58 DB B0 FD | 	call	#_Hg010b_4_spin2_write
15314                 | ' crlf
15314     F4 DF B0 FD | 	call	#_Hg010b_4_spin2_crlf
15318     E7 F0 03 F6 | 	mov	ptra, fp
1531c     F2 00 A0 FD | 	call	#popregs_
15320                 | _do_mode_ret
15320     2D 00 64 FD | 	ret
15324                 | 
15324                 | ' 
15324                 | ' '-------------------- mouse
15324                 | ' 
15324                 | ' sub do_mouse
15324                 | _do_mouse
15324     48 83 BF FD | 	call	#_pop
15328     00 7A 4E F2 | 	cmps	result1, #0 wz
1532c                 | ' 
1532c                 | ' t1=pop()
1532c                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
1532c     14 00 90 5D |  if_ne	jmp	#LR__1820
15330     10 92 06 F6 | 	mov	arg01, #16
15334     00 94 06 F6 | 	mov	arg02, #0
15338     00 96 06 F6 | 	mov	arg03, #0
1533c     E0 C9 B0 FD | 	call	#_Hg010b_4_spin2_setspritesize
15340     10 00 90 FD | 	jmp	#LR__1821
15344                 | LR__1820
15344     10 92 06 F6 | 	mov	arg01, #16
15348     20 94 06 F6 | 	mov	arg02, #32
1534c     20 96 06 F6 | 	mov	arg03, #32
15350     CC C9 B0 FD | 	call	#_Hg010b_4_spin2_setspritesize
15354                 | LR__1821
15354                 | _do_mouse_ret
15354     2D 00 64 FD | 	ret
15358                 | 
15358                 | ' 
15358                 | ' '-------------------- mousek
15358                 | ' 
15358                 | ' sub do_mousek
15358                 | _do_mousek
15358     00 CA 05 F6 | 	mov	COUNT_, #0
1535c     E8 00 A0 FD | 	call	#pushregs_
15360     0C F0 07 F1 | 	add	ptra, #12
15364     08 CE 05 F1 | 	add	fp, #8
15368     E7 3A 68 FC | 	wrlong	#29, fp
1536c     08 CE 85 F1 | 	sub	fp, #8
15370     53 00 00 FF 
15374     F4 64 06 F1 | 	add	objptr, ##42740
15378     32 93 02 FB | 	rdlong	arg01, objptr
1537c     53 00 00 FF 
15380     F4 64 86 F1 | 	sub	objptr, ##42740
15384     E7 92 62 FC | 	wrlong	arg01, fp
15388     E7 92 02 F6 | 	mov	arg01, fp
1538c     70 83 BF FD | 	call	#_push
15390     E7 F0 03 F6 | 	mov	ptra, fp
15394     F2 00 A0 FD | 	call	#popregs_
15398                 | _do_mousek_ret
15398     2D 00 64 FD | 	ret
1539c                 | 
1539c                 | ' 
1539c                 | ' '-------------------- mousew
1539c                 | ' 
1539c                 | ' sub do_mousew
1539c                 | _do_mousew
1539c     00 CA 05 F6 | 	mov	COUNT_, #0
153a0     E8 00 A0 FD | 	call	#pushregs_
153a4     0C F0 07 F1 | 	add	ptra, #12
153a8     08 CE 05 F1 | 	add	fp, #8
153ac     E7 38 68 FC | 	wrlong	#28, fp
153b0     08 CE 85 F1 | 	sub	fp, #8
153b4     53 00 00 FF 
153b8     F8 64 06 F1 | 	add	objptr, ##42744
153bc     32 93 02 FB | 	rdlong	arg01, objptr
153c0     53 00 00 FF 
153c4     F8 64 86 F1 | 	sub	objptr, ##42744
153c8     E7 92 62 FC | 	wrlong	arg01, fp
153cc     E7 92 02 F6 | 	mov	arg01, fp
153d0     2C 83 BF FD | 	call	#_push
153d4     E7 F0 03 F6 | 	mov	ptra, fp
153d8     F2 00 A0 FD | 	call	#popregs_
153dc                 | _do_mousew_ret
153dc     2D 00 64 FD | 	ret
153e0                 | 
153e0                 | ' 
153e0                 | ' '-------------------- mousex
153e0                 | ' 
153e0                 | ' sub do_mousex
153e0                 | _do_mousex
153e0     00 CA 05 F6 | 	mov	COUNT_, #0
153e4     E8 00 A0 FD | 	call	#pushregs_
153e8     0C F0 07 F1 | 	add	ptra, #12
153ec     08 CE 05 F1 | 	add	fp, #8
153f0     E7 3A 68 FC | 	wrlong	#29, fp
153f4     08 CE 85 F1 | 	sub	fp, #8
153f8     53 00 00 FF 
153fc     EC 64 06 F1 | 	add	objptr, ##42732
15400     32 93 02 FB | 	rdlong	arg01, objptr
15404     53 00 00 FF 
15408     EC 64 86 F1 | 	sub	objptr, ##42732
1540c     E7 92 62 FC | 	wrlong	arg01, fp
15410     E7 92 02 F6 | 	mov	arg01, fp
15414     E8 82 BF FD | 	call	#_push
15418     E7 F0 03 F6 | 	mov	ptra, fp
1541c     F2 00 A0 FD | 	call	#popregs_
15420                 | _do_mousex_ret
15420     2D 00 64 FD | 	ret
15424                 | 
15424                 | ' 
15424                 | ' '-------------------- mousey
15424                 | ' 
15424                 | ' sub do_mousey
15424                 | _do_mousey
15424     00 CA 05 F6 | 	mov	COUNT_, #0
15428     E8 00 A0 FD | 	call	#pushregs_
1542c     0C F0 07 F1 | 	add	ptra, #12
15430     08 CE 05 F1 | 	add	fp, #8
15434     E7 3A 68 FC | 	wrlong	#29, fp
15438     08 CE 85 F1 | 	sub	fp, #8
1543c     53 00 00 FF 
15440     F0 64 06 F1 | 	add	objptr, ##42736
15444     32 93 02 FB | 	rdlong	arg01, objptr
15448     53 00 00 FF 
1544c     F0 64 86 F1 | 	sub	objptr, ##42736
15450     E7 92 62 FC | 	wrlong	arg01, fp
15454     E7 92 02 F6 | 	mov	arg01, fp
15458     A4 82 BF FD | 	call	#_push
1545c     E7 F0 03 F6 | 	mov	ptra, fp
15460     F2 00 A0 FD | 	call	#popregs_
15464                 | _do_mousey_ret
15464     2D 00 64 FD | 	ret
15468                 | 
15468                 | ' 
15468                 | ' '------------------ new
15468                 | ' 
15468                 | ' sub do_new
15468                 | _do_new
15468     03 CA 05 F6 | 	mov	COUNT_, #3
1546c     E8 00 A0 FD | 	call	#pushregs_
15470                 | ' 
15470                 | ' if inrun=1 then inrun=2
15470     52 00 00 FF 
15474     90 64 06 F1 | 	add	objptr, ##42128
15478     32 97 02 FB | 	rdlong	arg03, objptr
1547c     52 00 00 FF 
15480     90 64 86 F1 | 	sub	objptr, ##42128
15484     01 96 0E F2 | 	cmp	arg03, #1 wz
15488     52 00 00 AF 
1548c     90 64 06 A1 |  if_e	add	objptr, ##42128
15490     32 05 68 AC |  if_e	wrlong	#2, objptr
15494     52 00 00 AF 
15498     90 64 86 A1 |  if_e	sub	objptr, ##42128
1549c     13 92 C6 F9 | 	decod	arg01, #19
154a0     01 94 66 F6 | 	neg	arg02, #1
154a4     C8 B9 B0 FD | 	call	#_pslpoke
154a8     36 00 00 FF 
154ac     AC 65 06 F1 | 	add	objptr, ##28076
154b0     32 01 68 FC | 	wrlong	#0, objptr
154b4                 | ' pslpoke(memlo,$FFFFFFFF)
154b4                 | ' varnum=0 : for i=0 to maxvars: variables(i).name="" : variables(i).vartype=0: next i
154b4     00 A6 06 F6 | 	mov	local01, #0
154b8     20 00 00 FF 
154bc     10 64 86 F1 | 	sub	objptr, ##16400
154c0     D7 1E 48 FB | 	callpa	#(@LR__1831-@LR__1830)>>2,fcache_load_ptr_
154c4                 | LR__1830
154c4     53 97 02 F6 | 	mov	arg03, local01
154c8     04 96 66 F0 | 	shl	arg03, #4
154cc     32 97 02 F1 | 	add	arg03, objptr
154d0     98 01 00 FF 
154d4     27 94 06 F6 | 	mov	arg02, ##@LR__6047
154d8     4B 95 62 FC | 	wrlong	arg02, arg03
154dc     53 A9 02 F6 | 	mov	local02, local01
154e0     04 A8 66 F0 | 	shl	local02, #4
154e4     32 A9 02 F1 | 	add	local02, objptr
154e8     0C A8 06 F1 | 	add	local02, #12
154ec     54 01 68 FC | 	wrlong	#0, local02
154f0     01 A6 06 F1 | 	add	local01, #1
154f4     02 00 00 FF 
154f8     01 A6 56 F2 | 	cmps	local01, ##1025 wc
154fc     C4 FF 9F CD |  if_b	jmp	#LR__1830
15500                 | LR__1831
15500     35 00 00 FF 
15504     90 64 06 F1 | 	add	objptr, ##27280
15508     00 04 80 FF 
1550c     32 01 68 FC | 	wrlong	##524288, objptr
15510     06 00 00 FF 
15514     30 64 06 F1 | 	add	objptr, ##3120
15518     00 04 80 FF 
1551c     32 01 68 FC | 	wrlong	##524288, objptr
15520     04 64 06 F1 | 	add	objptr, #4
15524     00 04 80 FF 
15528     32 01 68 FC | 	wrlong	##524288, objptr
1552c     0D 00 00 FF 
15530     64 64 86 F1 | 	sub	objptr, ##6756
15534     32 01 68 FC | 	wrlong	#0, objptr
15538     07 00 00 FF 
1553c     24 64 06 F1 | 	add	objptr, ##3620
15540     32 01 68 FC | 	wrlong	#0, objptr
15544     07 00 00 FF 
15548     20 64 86 F1 | 	sub	objptr, ##3616
1554c     00 04 80 FF 
15550     32 01 68 FC | 	wrlong	##524288, objptr
15554     0D 00 00 FF 
15558     D0 64 06 F1 | 	add	objptr, ##6864
1555c     32 01 68 FC | 	wrlong	#0, objptr
15560     98 01 00 FF 
15564     28 AA 06 F6 | 	mov	local03, ##@LR__6048
15568     01 00 00 FF 
1556c     E8 65 06 F1 | 	add	objptr, ##1000
15570     32 AB 62 FC | 	wrlong	local03, objptr
15574     08 00 00 FF 
15578     88 64 86 F1 | 	sub	objptr, ##4232
1557c     32 01 68 FC | 	wrlong	#0, objptr
15580     04 64 06 F1 | 	add	objptr, #4
15584     FF FF FF FF 
15588     32 FF 6B FC | 	wrlong	##-1, objptr
1558c     06 00 00 FF 
15590     A0 64 06 F1 | 	add	objptr, ##3232
15594     32 01 68 FC | 	wrlong	#0, objptr
15598     04 64 06 F1 | 	add	objptr, #4
1559c     32 01 68 FC | 	wrlong	#0, objptr
155a0                 | ' programstart=memlo :runptr=memlo : runptr2=memlo
155a0                 | ' stackpointer=0
155a0                 | ' lineptr=0 
155a0                 | ' programptr=memlo ': stringptr=0
155a0                 | ' dataptr=0 : readline=""
155a0                 | ' lastline=0 : lastlineptr=-1 :fortop=0 :gosubtop=0
155a0                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
155a0     00 A6 06 F6 | 	mov	local01, #0
155a4     06 00 00 FF 
155a8     9C 64 86 F1 | 	sub	objptr, ##3228
155ac     D7 16 48 FB | 	callpa	#(@LR__1833-@LR__1832)>>2,fcache_load_ptr_
155b0                 | LR__1832
155b0     53 A9 02 F6 | 	mov	local02, local01
155b4     02 A8 66 F0 | 	shl	local02, #2
155b8     53 A9 02 F1 | 	add	local02, local01
155bc     02 A8 66 F0 | 	shl	local02, #2
155c0     32 A9 02 F1 | 	add	local02, objptr
155c4     08 A8 06 F1 | 	add	local02, #8
155c8     FF FF FF FF 
155cc     54 FF 6B FC | 	wrlong	##-1, local02
155d0     01 A6 06 F1 | 	add	local01, #1
155d4     41 A6 56 F2 | 	cmps	local01, #65 wc
155d8     D4 FF 9F CD |  if_b	jmp	#LR__1832
155dc                 | LR__1833
155dc     4C 00 00 FF 
155e0     3C 64 86 F1 | 	sub	objptr, ##38972
155e4                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
155e4     00 A6 06 F6 | 	mov	local01, #0
155e8                 | LR__1834
155e8     53 97 02 F6 | 	mov	arg03, local01
155ec     02 96 66 F0 | 	shl	arg03, #2
155f0     32 A9 02 F6 | 	mov	local02, objptr
155f4     54 00 00 FF 
155f8     30 A8 06 F1 | 	add	local02, ##43056
155fc     54 97 02 F1 | 	add	arg03, local02
15600     4B AB 0A FB | 	rdlong	local03, arg03 wz
15604     30 00 90 AD |  if_e	jmp	#LR__1835
15608     53 93 02 F6 | 	mov	arg01, local01
1560c     00 94 06 F6 | 	mov	arg02, #0
15610     00 96 06 F6 | 	mov	arg03, #0
15614     08 C7 B0 FD | 	call	#_Hg010b_4_spin2_setspritesize
15618     53 A9 02 F6 | 	mov	local02, local01
1561c     02 A8 66 F0 | 	shl	local02, #2
15620     32 AB 02 F6 | 	mov	local03, objptr
15624     54 00 00 FF 
15628     30 AA 06 F1 | 	add	local03, ##43056
1562c     55 A9 02 F1 | 	add	local02, local03
15630     54 93 02 FB | 	rdlong	arg01, local02
15634     DC 2E B1 FD | 	call	#__system___gc_free
15638                 | LR__1835
15638     01 A6 06 F1 | 	add	local01, #1
1563c     10 A6 56 F2 | 	cmps	local01, #16 wc
15640     A4 FF 9F CD |  if_b	jmp	#LR__1834
15644     54 00 00 FF 
15648     84 64 06 F1 | 	add	objptr, ##43140
1564c     00 C0 9F FF 
15650     32 01 68 FC | 	wrlong	##1065353216, objptr
15654     04 64 06 F1 | 	add	objptr, #4
15658     00 C0 9F FF 
1565c     32 01 68 FC | 	wrlong	##1065353216, objptr
15660     54 00 00 FF 
15664     84 64 86 F1 | 	sub	objptr, ##43140
15668     32 AB 02 FB | 	rdlong	local03, objptr
1566c     54 00 00 FF 
15670     70 64 06 F1 | 	add	objptr, ##43120
15674     32 AB 62 FC | 	wrlong	local03, objptr
15678     54 00 00 FF 
1567c     74 64 86 F1 | 	sub	objptr, ##43124
15680     11 92 06 F6 | 	mov	arg01, #17
15684     08 94 06 F6 | 	mov	arg02, #8
15688     10 96 06 F6 | 	mov	arg03, #16
1568c     90 C6 B0 FD | 	call	#_Hg010b_4_spin2_setspritesize
15690     10 92 06 F6 | 	mov	arg01, #16
15694     20 94 06 F6 | 	mov	arg02, #32
15698     20 96 06 F6 | 	mov	arg03, #32
1569c     80 C6 B0 FD | 	call	#_Hg010b_4_spin2_setspritesize
156a0     98 01 00 FF 
156a4     29 AA 06 F6 | 	mov	local03, ##@LR__6049
156a8     54 00 00 FF 
156ac     A0 64 06 F1 | 	add	objptr, ##43168
156b0     32 AB 62 FC | 	wrlong	local03, objptr
156b4     54 00 00 FF 
156b8     A0 64 86 F1 | 	sub	objptr, ##43168
156bc     F0 A9 B0 FD | 	call	#_init_audio
156c0     E7 F0 03 F6 | 	mov	ptra, fp
156c4     F2 00 A0 FD | 	call	#popregs_
156c8                 | _do_new_ret
156c8     2D 00 64 FD | 	ret
156cc                 | 
156cc                 | ' 
156cc                 | ' '-------------------- next
156cc                 | ' 
156cc                 | ' sub do_next()
156cc                 | _do_next
156cc     04 CA 05 F6 | 	mov	COUNT_, #4
156d0     E8 00 A0 FD | 	call	#pushregs_
156d4     98 7F BF FD | 	call	#_pop
156d8     3D A7 02 F6 | 	mov	local01, result1
156dc     3E A9 02 F6 | 	mov	local02, result2
156e0     3F AB 02 F6 | 	mov	local03, result3
156e4                 | ' t1=pop() :varnum=t1.result.uresult
156e4                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
156e4     52 00 00 FF 
156e8     D4 64 06 F1 | 	add	objptr, ##42196
156ec     32 95 02 FB | 	rdlong	arg02, objptr
156f0     4A 93 02 F6 | 	mov	arg01, arg02
156f4     02 92 66 F0 | 	shl	arg01, #2
156f8     4A 93 02 F1 | 	add	arg01, arg02
156fc     02 92 66 F0 | 	shl	arg01, #2
15700     06 00 00 FF 
15704     98 64 86 F1 | 	sub	objptr, ##3224
15708     32 93 02 F1 | 	add	arg01, objptr
1570c     08 92 06 F1 | 	add	arg01, #8
15710     49 95 02 FB | 	rdlong	arg02, arg01
15714     53 95 0A F2 | 	cmp	arg02, local01 wz
15718     4C 00 00 FF 
1571c     3C 64 86 F1 | 	sub	objptr, ##38972
15720     10 00 90 AD |  if_e	jmp	#LR__1840
15724     25 92 06 F6 | 	mov	arg01, #37
15728     00 94 06 F6 | 	mov	arg02, #0
1572c     A4 B5 B0 FD | 	call	#_printerror
15730     50 03 90 FD | 	jmp	#LR__1847
15734                 | LR__1840
15734                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
15734     53 95 02 F6 | 	mov	arg02, local01
15738     04 94 66 F0 | 	shl	arg02, #4
1573c     32 93 02 F6 | 	mov	arg01, objptr
15740     16 00 00 FF 
15744     9C 93 06 F1 | 	add	arg01, ##11676
15748     49 95 02 F1 | 	add	arg02, arg01
1574c     0C 94 06 F1 | 	add	arg02, #12
15750     4A 95 02 FB | 	rdlong	arg02, arg02
15754     1E 94 0E F2 | 	cmp	arg02, #30 wz
15758     54 00 90 5D |  if_ne	jmp	#LR__1841
1575c     53 95 02 F6 | 	mov	arg02, local01
15760     04 94 66 F0 | 	shl	arg02, #4
15764     16 00 00 FF 
15768     9C 65 06 F1 | 	add	objptr, ##11676
1576c     32 95 02 F1 | 	add	arg02, objptr
15770     0C 94 06 F1 | 	add	arg02, #12
15774     4A 39 68 FC | 	wrlong	#28, arg02
15778     53 AD 02 F6 | 	mov	local04, local01
1577c     04 AC 66 F0 | 	shl	local04, #4
15780     32 AD 02 F1 | 	add	local04, objptr
15784     53 95 02 F6 | 	mov	arg02, local01
15788     04 94 66 F0 | 	shl	arg02, #4
1578c     32 95 02 F1 | 	add	arg02, objptr
15790     04 94 06 F1 | 	add	arg02, #4
15794     4A 93 02 FB | 	rdlong	arg01, arg02
15798     16 00 00 FF 
1579c     9C 65 86 F1 | 	sub	objptr, ##11676
157a0     01 94 06 F6 | 	mov	arg02, #1
157a4     C8 1D B1 FD | 	call	#__system___float_tointeger
157a8     04 AC 06 F1 | 	add	local04, #4
157ac     56 7B 62 FC | 	wrlong	result1, local04
157b0                 | LR__1841
157b0     53 AD 02 F6 | 	mov	local04, local01
157b4     04 AC 66 F0 | 	shl	local04, #4
157b8     16 00 00 FF 
157bc     9C 65 06 F1 | 	add	objptr, ##11676
157c0     32 AD 02 F1 | 	add	local04, objptr
157c4     53 95 02 F6 | 	mov	arg02, local01
157c8     04 94 66 F0 | 	shl	arg02, #4
157cc     32 95 02 F1 | 	add	arg02, objptr
157d0     3B 00 00 FF 
157d4     38 65 06 F1 | 	add	objptr, ##30520
157d8     32 93 02 FB | 	rdlong	arg01, objptr
157dc     49 7F 02 F6 | 	mov	result3, arg01
157e0     02 7E 66 F0 | 	shl	result3, #2
157e4     49 7F 02 F1 | 	add	result3, arg01
157e8     02 7E 66 F0 | 	shl	result3, #2
157ec     06 00 00 FF 
157f0     98 64 86 F1 | 	sub	objptr, ##3224
157f4     32 7F 02 F1 | 	add	result3, objptr
157f8     04 94 06 F1 | 	add	arg02, #4
157fc     4A 93 02 FB | 	rdlong	arg01, arg02
15800     0C 7E 06 F1 | 	add	result3, #12
15804     3F 7F 02 FB | 	rdlong	result3, result3
15808     3F 93 02 F1 | 	add	arg01, result3
1580c     04 AC 06 F1 | 	add	local04, #4
15810     56 93 62 FC | 	wrlong	arg01, local04
15814                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
15814                 | ' if fortable(fortop).stepval>=0 then
15814     06 00 00 FF 
15818     98 64 06 F1 | 	add	objptr, ##3224
1581c     32 AD 02 FB | 	rdlong	local04, objptr
15820     56 93 02 F6 | 	mov	arg01, local04
15824     02 92 66 F0 | 	shl	arg01, #2
15828     56 93 02 F1 | 	add	arg01, local04
1582c     02 92 66 F0 | 	shl	arg01, #2
15830     06 00 00 FF 
15834     98 64 86 F1 | 	sub	objptr, ##3224
15838     32 93 02 F1 | 	add	arg01, objptr
1583c     0C 92 06 F1 | 	add	arg01, #12
15840     49 93 02 FB | 	rdlong	arg01, arg01
15844     00 92 56 F2 | 	cmps	arg01, #0 wc
15848     4C 00 00 FF 
1584c     3C 64 86 F1 | 	sub	objptr, ##38972
15850     78 00 90 CD |  if_b	jmp	#LR__1842
15854                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
15854     04 A6 66 F0 | 	shl	local01, #4
15858     16 00 00 FF 
1585c     9C 65 06 F1 | 	add	objptr, ##11676
15860     32 A7 02 F1 | 	add	local01, objptr
15864     3B 00 00 FF 
15868     38 65 06 F1 | 	add	objptr, ##30520
1586c     32 93 02 FB | 	rdlong	arg01, objptr
15870     49 AD 02 F6 | 	mov	local04, arg01
15874     02 AC 66 F0 | 	shl	local04, #2
15878     49 AD 02 F1 | 	add	local04, arg01
1587c     02 AC 66 F0 | 	shl	local04, #2
15880     06 00 00 FF 
15884     98 64 86 F1 | 	sub	objptr, ##3224
15888     32 AD 02 F1 | 	add	local04, objptr
1588c     04 A6 06 F1 | 	add	local01, #4
15890     53 A7 02 FB | 	rdlong	local01, local01
15894     10 AC 06 F1 | 	add	local04, #16
15898     56 AD 02 FB | 	rdlong	local04, local04
1589c     56 A7 5A F2 | 	cmps	local01, local04 wcz
158a0     4C 00 00 FF 
158a4     3C 64 86 F1 | 	sub	objptr, ##38972
158a8     9C 00 90 ED |  if_be	jmp	#LR__1844
158ac     52 00 00 FF 
158b0     D4 64 06 F1 | 	add	objptr, ##42196
158b4     32 AD 02 FB | 	rdlong	local04, objptr
158b8     01 AC 86 F1 | 	sub	local04, #1
158bc     32 AD 62 FC | 	wrlong	local04, objptr
158c0     52 00 00 FF 
158c4     D4 64 86 F1 | 	sub	objptr, ##42196
158c8     B8 01 90 FD | 	jmp	#LR__1847
158cc                 | LR__1842
158cc                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
158cc     53 AD 02 F6 | 	mov	local04, local01
158d0     04 AC 66 F0 | 	shl	local04, #4
158d4     16 00 00 FF 
158d8     9C 65 06 F1 | 	add	objptr, ##11676
158dc     32 AD 02 F1 | 	add	local04, objptr
158e0     3B 00 00 FF 
158e4     38 65 06 F1 | 	add	objptr, ##30520
158e8     32 A7 02 FB | 	rdlong	local01, objptr
158ec     53 93 02 F6 | 	mov	arg01, local01
158f0     02 92 66 F0 | 	shl	arg01, #2
158f4     53 93 02 F1 | 	add	arg01, local01
158f8     02 92 66 F0 | 	shl	arg01, #2
158fc     06 00 00 FF 
15900     98 64 86 F1 | 	sub	objptr, ##3224
15904     32 93 02 F1 | 	add	arg01, objptr
15908     04 AC 06 F1 | 	add	local04, #4
1590c     56 AD 02 FB | 	rdlong	local04, local04
15910     10 92 06 F1 | 	add	arg01, #16
15914     49 93 02 FB | 	rdlong	arg01, arg01
15918     49 AD 52 F2 | 	cmps	local04, arg01 wc
1591c     4C 00 00 FF 
15920     3C 64 86 F1 | 	sub	objptr, ##38972
15924     20 00 90 3D |  if_ae	jmp	#LR__1843
15928     52 00 00 FF 
1592c     D4 64 06 F1 | 	add	objptr, ##42196
15930     32 AD 02 FB | 	rdlong	local04, objptr
15934     01 AC 86 F1 | 	sub	local04, #1
15938     32 AD 62 FC | 	wrlong	local04, objptr
1593c     52 00 00 FF 
15940     D4 64 86 F1 | 	sub	objptr, ##42196
15944     3C 01 90 FD | 	jmp	#LR__1847
15948                 | LR__1843
15948                 | LR__1844
15948                 | ' ' if not returned, goto pointer 
15948                 | ' if inrun>0 andalso runptr<>fortable(fortop).lineptr then
15948     52 00 00 FF 
1594c     90 64 06 F1 | 	add	objptr, ##42128
15950     32 AD 02 FB | 	rdlong	local04, objptr
15954     52 00 00 FF 
15958     90 64 86 F1 | 	sub	objptr, ##42128
1595c     01 AC 16 F2 | 	cmp	local04, #1 wc
15960     DC 00 90 CD |  if_b	jmp	#LR__1845
15964     52 00 00 FF 
15968     D4 64 06 F1 | 	add	objptr, ##42196
1596c     32 AD 02 FB | 	rdlong	local04, objptr
15970     56 A7 02 F6 | 	mov	local01, local04
15974     02 A6 66 F0 | 	shl	local01, #2
15978     56 A7 02 F1 | 	add	local01, local04
1597c     02 A6 66 F0 | 	shl	local01, #2
15980     06 00 00 FF 
15984     98 64 86 F1 | 	sub	objptr, ##3224
15988     32 A7 02 F1 | 	add	local01, objptr
1598c     06 00 00 FF 
15990     20 64 06 F1 | 	add	objptr, ##3104
15994     32 AD 02 FB | 	rdlong	local04, objptr
15998     52 00 00 FF 
1599c     5C 64 86 F1 | 	sub	objptr, ##42076
159a0     53 A7 02 FB | 	rdlong	local01, local01
159a4     53 AD 0A F2 | 	cmp	local04, local01 wz
159a8     94 00 90 AD |  if_e	jmp	#LR__1845
159ac     52 00 00 FF 
159b0     D4 64 06 F1 | 	add	objptr, ##42196
159b4     32 AD 02 FB | 	rdlong	local04, objptr
159b8     56 A7 02 F6 | 	mov	local01, local04
159bc     02 A6 66 F0 | 	shl	local01, #2
159c0     56 A7 02 F1 | 	add	local01, local04
159c4     02 A6 66 F0 | 	shl	local01, #2
159c8     06 00 00 FF 
159cc     98 64 86 F1 | 	sub	objptr, ##3224
159d0     32 A7 02 F1 | 	add	local01, objptr
159d4     53 A7 02 FB | 	rdlong	local01, local01
159d8     06 00 00 FF 
159dc     20 64 06 F1 | 	add	objptr, ##3104
159e0     32 A7 62 FC | 	wrlong	local01, objptr
159e4     78 64 06 F1 | 	add	objptr, #120
159e8     32 AD 02 FB | 	rdlong	local04, objptr
159ec     56 A7 02 F6 | 	mov	local01, local04
159f0     02 A6 66 F0 | 	shl	local01, #2
159f4     56 A7 02 F1 | 	add	local01, local04
159f8     02 A6 66 F0 | 	shl	local01, #2
159fc     06 00 00 FF 
15a00     98 64 86 F1 | 	sub	objptr, ##3224
15a04     32 A7 02 F1 | 	add	local01, objptr
15a08     04 A6 06 F1 | 	add	local01, #4
15a0c     53 A7 02 FB | 	rdlong	local01, local01
15a10     06 00 00 FF 
15a14     24 64 06 F1 | 	add	objptr, ##3108
15a18     32 A7 62 FC | 	wrlong	local01, objptr
15a1c     06 00 00 FF 
15a20     40 64 86 F1 | 	sub	objptr, ##3136
15a24     32 AD 02 FB | 	rdlong	local04, objptr
15a28     01 AC 86 F1 | 	sub	local04, #1
15a2c     04 64 06 F1 | 	add	objptr, #4
15a30     32 AD 62 FC | 	wrlong	local04, objptr
15a34     4C 00 00 FF 
15a38     24 64 86 F1 | 	sub	objptr, ##38948
15a3c     44 00 90 FD | 	jmp	#LR__1846
15a40                 | LR__1845
15a40     52 00 00 FF 
15a44     D4 64 06 F1 | 	add	objptr, ##42196
15a48     32 AD 02 FB | 	rdlong	local04, objptr
15a4c     56 A7 02 F6 | 	mov	local01, local04
15a50     02 A6 66 F0 | 	shl	local01, #2
15a54     56 A7 02 F1 | 	add	local01, local04
15a58     02 A6 66 F0 | 	shl	local01, #2
15a5c     06 00 00 FF 
15a60     98 64 86 F1 | 	sub	objptr, ##3224
15a64     32 A7 02 F1 | 	add	local01, objptr
15a68     04 A6 06 F1 | 	add	local01, #4
15a6c     53 A7 02 FB | 	rdlong	local01, local01
15a70     01 A6 86 F1 | 	sub	local01, #1
15a74     18 64 86 F1 | 	sub	objptr, #24
15a78     32 A7 62 FC | 	wrlong	local01, objptr
15a7c     4C 00 00 FF 
15a80     24 64 86 F1 | 	sub	objptr, ##38948
15a84                 | LR__1846
15a84                 | LR__1847
15a84     E7 F0 03 F6 | 	mov	ptra, fp
15a88     F2 00 A0 FD | 	call	#popregs_
15a8c                 | _do_next_ret
15a8c     2D 00 64 FD | 	ret
15a90                 | 
15a90                 | ' 
15a90                 | ' '-------------------- no command (print "Unknown command")
15a90                 | ' 
15a90                 | ' sub do_no_command
15a90                 | _do_no_command
15a90     52 00 00 FF 
15a94     94 64 06 F1 | 	add	objptr, ##42132
15a98     32 95 02 FB | 	rdlong	arg02, objptr
15a9c     52 00 00 FF 
15aa0     94 64 86 F1 | 	sub	objptr, ##42132
15aa4     17 92 06 F6 | 	mov	arg01, #23
15aa8     28 B2 B0 FD | 	call	#_printerror
15aac                 | _do_no_command_ret
15aac     2D 00 64 FD | 	ret
15ab0                 | 
15ab0                 | ' 
15ab0                 | ' '-------------------- nothing
15ab0                 | ' 
15ab0                 | ' sub do_nothing					' a placeholder for tokens that don't do anything by themselves
15ab0                 | _do_nothing
15ab0                 | _do_nothing_ret
15ab0     2D 00 64 FD | 	ret
15ab4                 | 
15ab4                 | ' 
15ab4                 | ' '-------------------- on
15ab4                 | ' 
15ab4                 | ' sub do_on
15ab4                 | _do_on
15ab4     02 CA 05 F6 | 	mov	COUNT_, #2
15ab8     E8 00 A0 FD | 	call	#pushregs_
15abc     18 F0 07 F1 | 	add	ptra, #24
15ac0     4C 00 00 FF 
15ac4     24 64 06 F1 | 	add	objptr, ##38948
15ac8     32 93 02 FB | 	rdlong	arg01, objptr
15acc     49 7D 02 F6 | 	mov	result2, arg01
15ad0     01 7C 66 F0 | 	shl	result2, #1
15ad4     49 7D 02 F1 | 	add	result2, arg01
15ad8     02 7C 66 F0 | 	shl	result2, #2
15adc     03 00 00 FF 
15ae0     04 64 86 F1 | 	sub	objptr, ##1540
15ae4     32 7D 02 F1 | 	add	result2, objptr
15ae8     3E A7 02 FB | 	rdlong	local01, result2
15aec     49 A9 02 F6 | 	mov	local02, arg01
15af0     01 A8 66 F0 | 	shl	local02, #1
15af4     49 A9 02 F1 | 	add	local02, arg01
15af8     02 A8 66 F0 | 	shl	local02, #2
15afc     32 A9 02 F1 | 	add	local02, objptr
15b00     04 A8 06 F1 | 	add	local02, #4
15b04     54 A9 02 FB | 	rdlong	local02, local02
15b08     49 00 00 FF 
15b0c     20 64 86 F1 | 	sub	objptr, ##37408
15b10     5C 7B BF FD | 	call	#_pop
15b14     E7 7A 62 FC | 	wrlong	result1, fp
15b18     04 CE 05 F1 | 	add	fp, #4
15b1c     E7 7C 62 FC | 	wrlong	result2, fp
15b20     04 CE 05 F1 | 	add	fp, #4
15b24     E7 7E 62 FC | 	wrlong	result3, fp
15b28     08 CE 85 F1 | 	sub	fp, #8
15b2c     E7 92 02 F6 | 	mov	arg01, fp
15b30     18 7D BF FD | 	call	#_converttoint
15b34                 | ' 
15b34                 | ' numpar=compiledline(lineptr_e).result.uresult
15b34                 | ' skip=compiledline(lineptr_e).result.twowords(1)
15b34                 | ' t1=pop()
15b34                 | ' t=converttoint(t1)
15b34                 | ' if t<1 orelse t>numpar then return
15b34     01 7A 56 F2 | 	cmps	result1, #1 wc
15b38     30 00 90 CD |  if_b	jmp	#LR__1850
15b3c     53 7B 5A F2 | 	cmps	result1, local01 wcz
15b40     28 00 90 1D |  if_a	jmp	#LR__1850
15b44     01 7A 86 F1 | 	sub	result1, #1
15b48     3D A9 02 FD | 	qmul	local02, result1
15b4c     4C 00 00 FF 
15b50     24 64 06 F1 | 	add	objptr, ##38948
15b54     32 A7 02 FB | 	rdlong	local01, objptr
15b58     18 A8 62 FD | 	getqx	local02
15b5c     54 A7 02 F1 | 	add	local01, local02
15b60     32 A7 62 FC | 	wrlong	local01, objptr
15b64     4C 00 00 FF 
15b68     24 64 86 F1 | 	sub	objptr, ##38948
15b6c                 | LR__1850
15b6c     E7 F0 03 F6 | 	mov	ptra, fp
15b70     F2 00 A0 FD | 	call	#popregs_
15b74                 | _do_on_ret
15b74     2D 00 64 FD | 	ret
15b78                 | 
15b78                 | ' 
15b78                 | ' '-------------------- open
15b78                 | ' 
15b78                 | ' sub do_open
15b78                 | _do_open
15b78     04 CA 05 F6 | 	mov	COUNT_, #4
15b7c     E8 00 A0 FD | 	call	#pushregs_
15b80     20 F0 07 F1 | 	add	ptra, #32
15b84     E8 7A BF FD | 	call	#_pop
15b88     3F 97 02 F6 | 	mov	arg03, result3
15b8c     E7 7A 62 FC | 	wrlong	result1, fp
15b90     04 CE 05 F1 | 	add	fp, #4
15b94     E7 7C 62 FC | 	wrlong	result2, fp
15b98     04 CE 05 F1 | 	add	fp, #4
15b9c     E7 96 62 FC | 	wrlong	arg03, fp
15ba0                 | ' 
15ba0                 | ' numpar=compiledline(lineptr_e).result.uresult
15ba0                 | ' 
15ba0                 | ' t1=pop()
15ba0                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
15ba0     08 CE 85 F1 | 	sub	fp, #8
15ba4     2B 96 0E F2 | 	cmp	arg03, #43 wz
15ba8     18 00 90 5D |  if_ne	jmp	#LR__1860
15bac     E7 92 02 FB | 	rdlong	arg01, fp
15bb0     2C 7C BF FD | 	call	#_convertstring
15bb4     E7 7A 62 FC | 	wrlong	result1, fp
15bb8     08 CE 05 F1 | 	add	fp, #8
15bbc     E7 3E 68 FC | 	wrlong	#31, fp
15bc0     08 CE 85 F1 | 	sub	fp, #8
15bc4                 | LR__1860
15bc4                 | ' if t1.result_type<>result_string then  print "filename expected" : return  ' error here
15bc4     08 CE 05 F1 | 	add	fp, #8
15bc8     E7 96 02 FB | 	rdlong	arg03, fp
15bcc     08 CE 85 F1 | 	sub	fp, #8
15bd0     1F 96 0E F2 | 	cmp	arg03, #31 wz
15bd4     44 00 90 AD |  if_e	jmp	#LR__1861
15bd8     00 92 06 F6 | 	mov	arg01, #0
15bdc     7C 43 B1 FD | 	call	#__system___getiolock_0622
15be0     3D 93 02 F6 | 	mov	arg01, result1
15be4     F0 ED B0 FD | 	call	#__system___lockmem
15be8     98 01 00 FF 
15bec     34 94 06 F6 | 	mov	arg02, ##@LR__6050
15bf0     00 92 06 F6 | 	mov	arg01, #0
15bf4     00 96 06 F6 | 	mov	arg03, #0
15bf8     D0 FA B0 FD | 	call	#__system___basic_print_string
15bfc     00 92 06 F6 | 	mov	arg01, #0
15c00     0A 94 06 F6 | 	mov	arg02, #10
15c04     00 96 06 F6 | 	mov	arg03, #0
15c08     68 FA B0 FD | 	call	#__system___basic_print_char
15c0c     00 92 06 F6 | 	mov	arg01, #0
15c10     48 43 B1 FD | 	call	#__system___getiolock_0622
15c14     3D 01 68 FC | 	wrlong	#0, result1
15c18     C4 01 90 FD | 	jmp	#LR__1872
15c1c                 | LR__1861
15c1c     E7 A6 02 FB | 	rdlong	local01, fp
15c20     4C 7A BF FD | 	call	#_pop
15c24     3F 97 02 F6 | 	mov	arg03, result3
15c28     E7 7A 62 FC | 	wrlong	result1, fp
15c2c     04 CE 05 F1 | 	add	fp, #4
15c30     E7 7C 62 FC | 	wrlong	result2, fp
15c34     04 CE 05 F1 | 	add	fp, #4
15c38     E7 96 62 FC | 	wrlong	arg03, fp
15c3c                 | ' filename=t1.result.sresult
15c3c                 | ' t1=pop()
15c3c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
15c3c     08 CE 85 F1 | 	sub	fp, #8
15c40     2B 96 0E F2 | 	cmp	arg03, #43 wz
15c44     18 00 90 5D |  if_ne	jmp	#LR__1862
15c48     E7 92 02 FB | 	rdlong	arg01, fp
15c4c     90 7B BF FD | 	call	#_convertstring
15c50     E7 7A 62 FC | 	wrlong	result1, fp
15c54     08 CE 05 F1 | 	add	fp, #8
15c58     E7 3E 68 FC | 	wrlong	#31, fp
15c5c     08 CE 85 F1 | 	sub	fp, #8
15c60                 | LR__1862
15c60     00 A8 06 F6 | 	mov	local02, #0
15c64                 | ' mode=0
15c64                 | ' if t1.result_type=result_string then
15c64     08 CE 05 F1 | 	add	fp, #8
15c68     E7 94 02 FB | 	rdlong	arg02, fp
15c6c     08 CE 85 F1 | 	sub	fp, #8
15c70     1F 94 0E F2 | 	cmp	arg02, #31 wz
15c74     4C 00 90 5D |  if_ne	jmp	#LR__1863
15c78                 | '   if t1.result.sresult="read" then mode=1
15c78     E7 92 02 FB | 	rdlong	arg01, fp
15c7c     98 01 00 FF 
15c80     46 94 06 F6 | 	mov	arg02, ##@LR__6051
15c84     78 ED B0 FD | 	call	#__system___string_cmp
15c88     00 7A 0E F2 | 	cmp	result1, #0 wz
15c8c     01 A8 06 A6 |  if_e	mov	local02, #1
15c90                 | '   if t1.result.sresult="write" then mode=2
15c90     E7 92 02 FB | 	rdlong	arg01, fp
15c94     98 01 00 FF 
15c98     4B 94 06 F6 | 	mov	arg02, ##@LR__6052
15c9c     60 ED B0 FD | 	call	#__system___string_cmp
15ca0     00 7A 0E F2 | 	cmp	result1, #0 wz
15ca4     02 A8 06 A6 |  if_e	mov	local02, #2
15ca8                 | '   if t1.result.sresult="append" then mode=4
15ca8     E7 92 02 FB | 	rdlong	arg01, fp
15cac     98 01 00 FF 
15cb0     51 94 06 F6 | 	mov	arg02, ##@LR__6053
15cb4     48 ED B0 FD | 	call	#__system___string_cmp
15cb8     00 7A 0E F2 | 	cmp	result1, #0 wz
15cbc     04 A8 06 A6 |  if_e	mov	local02, #4
15cc0     0C 00 90 FD | 	jmp	#LR__1864
15cc4                 | LR__1863
15cc4     E7 92 02 F6 | 	mov	arg01, fp
15cc8     80 7B BF FD | 	call	#_converttoint
15ccc     3D A9 02 F6 | 	mov	local02, result1
15cd0                 | LR__1864
15cd0     9C 79 BF FD | 	call	#_pop
15cd4     3F 97 02 F6 | 	mov	arg03, result3
15cd8     E7 7A 62 FC | 	wrlong	result1, fp
15cdc     04 CE 05 F1 | 	add	fp, #4
15ce0     E7 7C 62 FC | 	wrlong	result2, fp
15ce4     04 CE 05 F1 | 	add	fp, #4
15ce8     E7 96 62 FC | 	wrlong	arg03, fp
15cec                 | ' t1=pop()
15cec                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
15cec     08 CE 85 F1 | 	sub	fp, #8
15cf0     2C 96 0E F2 | 	cmp	arg03, #44 wz
15cf4     44 00 90 AD |  if_e	jmp	#LR__1865
15cf8     00 92 06 F6 | 	mov	arg01, #0
15cfc     5C 42 B1 FD | 	call	#__system___getiolock_0622
15d00     3D 93 02 F6 | 	mov	arg01, result1
15d04     D0 EC B0 FD | 	call	#__system___lockmem
15d08     98 01 00 FF 
15d0c     58 94 06 F6 | 	mov	arg02, ##@LR__6054
15d10     00 92 06 F6 | 	mov	arg01, #0
15d14     00 96 06 F6 | 	mov	arg03, #0
15d18     B0 F9 B0 FD | 	call	#__system___basic_print_string
15d1c     00 92 06 F6 | 	mov	arg01, #0
15d20     0A 94 06 F6 | 	mov	arg02, #10
15d24     00 96 06 F6 | 	mov	arg03, #0
15d28     48 F9 B0 FD | 	call	#__system___basic_print_char
15d2c     00 92 06 F6 | 	mov	arg01, #0
15d30     28 42 B1 FD | 	call	#__system___getiolock_0622
15d34     3D 01 68 FC | 	wrlong	#0, result1
15d38     A4 00 90 FD | 	jmp	#LR__1872
15d3c                 | LR__1865
15d3c     E7 AA 02 FB | 	rdlong	local03, fp
15d40                 | ' channel  = t1.result.iresult
15d40                 | ' select case  mode
15d40     54 AD 02 F6 | 	mov	local04, local02
15d44     01 AC 86 F1 | 	sub	local04, #1
15d48     04 AC 26 F3 | 	fle	local04, #4
15d4c     30 AC 62 FD | 	jmprel	local04
15d50                 | LR__1866
15d50     10 00 90 FD | 	jmp	#LR__1867
15d54     20 00 90 FD | 	jmp	#LR__1868
15d58     44 00 90 FD | 	jmp	#LR__1870
15d5c     2C 00 90 FD | 	jmp	#LR__1869
15d60     3C 00 90 FD | 	jmp	#LR__1870
15d64                 | LR__1867
15d64     55 93 02 F6 | 	mov	arg01, local03
15d68     53 95 02 F6 | 	mov	arg02, local01
15d6c     00 96 06 F6 | 	mov	arg03, #0
15d70     14 F8 B0 FD | 	call	#__system___basic_open_string
15d74     68 00 90 FD | 	jmp	#LR__1871
15d78                 | LR__1868
15d78     55 93 02 F6 | 	mov	arg01, local03
15d7c     53 95 02 F6 | 	mov	arg02, local01
15d80     0D 96 06 F6 | 	mov	arg03, #13
15d84     00 F8 B0 FD | 	call	#__system___basic_open_string
15d88     54 00 90 FD | 	jmp	#LR__1871
15d8c                 | LR__1869
15d8c     55 93 02 F6 | 	mov	arg01, local03
15d90     53 95 02 F6 | 	mov	arg02, local01
15d94     25 96 06 F6 | 	mov	arg03, #37
15d98     EC F7 B0 FD | 	call	#__system___basic_open_string
15d9c     40 00 90 FD | 	jmp	#LR__1871
15da0                 | LR__1870
15da0     00 92 06 F6 | 	mov	arg01, #0
15da4     B4 41 B1 FD | 	call	#__system___getiolock_0622
15da8     3D 93 02 F6 | 	mov	arg01, result1
15dac     28 EC B0 FD | 	call	#__system___lockmem
15db0     98 01 00 FF 
15db4     6A 94 06 F6 | 	mov	arg02, ##@LR__6055
15db8     00 92 06 F6 | 	mov	arg01, #0
15dbc     00 96 06 F6 | 	mov	arg03, #0
15dc0     08 F9 B0 FD | 	call	#__system___basic_print_string
15dc4     00 92 06 F6 | 	mov	arg01, #0
15dc8     0A 94 06 F6 | 	mov	arg02, #10
15dcc     00 96 06 F6 | 	mov	arg03, #0
15dd0     A0 F8 B0 FD | 	call	#__system___basic_print_char
15dd4     00 92 06 F6 | 	mov	arg01, #0
15dd8     80 41 B1 FD | 	call	#__system___getiolock_0622
15ddc     3D 01 68 FC | 	wrlong	#0, result1
15de0                 | LR__1871
15de0                 | LR__1872
15de0     E7 F0 03 F6 | 	mov	ptra, fp
15de4     F2 00 A0 FD | 	call	#popregs_
15de8                 | _do_open_ret
15de8     2D 00 64 FD | 	ret
15dec                 | 
15dec                 | ' 
15dec                 | ' ' ------------------ padrx
15dec                 | ' 
15dec                 | ' sub do_padrx
15dec                 | _do_padrx
15dec     04 CA 05 F6 | 	mov	COUNT_, #4
15df0     E8 00 A0 FD | 	call	#pushregs_
15df4     14 F0 07 F1 | 	add	ptra, #20
15df8     4C 00 00 FF 
15dfc     24 64 06 F1 | 	add	objptr, ##38948
15e00     32 A7 02 FB | 	rdlong	local01, objptr
15e04     53 97 02 F6 | 	mov	arg03, local01
15e08     01 96 66 F0 | 	shl	arg03, #1
15e0c     53 97 02 F1 | 	add	arg03, local01
15e10     02 96 66 F0 | 	shl	arg03, #2
15e14     03 00 00 FF 
15e18     04 64 86 F1 | 	sub	objptr, ##1540
15e1c     32 97 02 F1 | 	add	arg03, objptr
15e20     4B A9 02 FB | 	rdlong	local02, arg03
15e24                 | ' 
15e24                 | ' numpar=compiledline(lineptr_e).result.uresult
15e24                 | ' if numpar>1 then print "padrx: "; : printerror(39) : return
15e24     02 A8 16 F2 | 	cmp	local02, #2 wc
15e28     49 00 00 FF 
15e2c     20 64 86 F1 | 	sub	objptr, ##37408
15e30     40 00 90 CD |  if_b	jmp	#LR__1880
15e34     00 92 06 F6 | 	mov	arg01, #0
15e38     20 41 B1 FD | 	call	#__system___getiolock_0622
15e3c     3D 93 02 F6 | 	mov	arg01, result1
15e40     94 EB B0 FD | 	call	#__system___lockmem
15e44     98 01 00 FF 
15e48     7D 94 06 F6 | 	mov	arg02, ##@LR__6056
15e4c     00 92 06 F6 | 	mov	arg01, #0
15e50     00 96 06 F6 | 	mov	arg03, #0
15e54     74 F8 B0 FD | 	call	#__system___basic_print_string
15e58     00 92 06 F6 | 	mov	arg01, #0
15e5c     FC 40 B1 FD | 	call	#__system___getiolock_0622
15e60     3D 01 68 FC | 	wrlong	#0, result1
15e64     27 92 06 F6 | 	mov	arg01, #39
15e68     00 94 06 F6 | 	mov	arg02, #0
15e6c     64 AE B0 FD | 	call	#_printerror
15e70     A0 01 90 FD | 	jmp	#LR__1884
15e74                 | LR__1880
15e74                 | ' if numpar=0 then 
15e74     00 A8 0E F2 | 	cmp	local02, #0 wz
15e78     8C 00 90 5D |  if_ne	jmp	#LR__1881
15e7c     00 C0 1B FF 
15e80     00 A8 06 F6 | 	mov	local02, ##931135488
15e84     53 00 00 FF 
15e88     6C 65 06 F1 | 	add	objptr, ##42860
15e8c     32 93 02 FB | 	rdlong	arg01, objptr
15e90     53 00 00 FF 
15e94     6C 65 86 F1 | 	sub	objptr, ##42860
15e98     49 93 52 F6 | 	abs	arg01, arg01 wc
15e9c     1F AA C6 C9 |  if_b	decod	local03, #31
15ea0     00 AA 06 36 |  if_ae	mov	local03, #0
15ea4     FC 0D B1 FD | 	call	#__system___float_fromuns
15ea8     55 7B 62 F5 | 	xor	result1, local03
15eac     3D 93 02 F6 | 	mov	arg01, result1
15eb0     FF 7F 23 FF 
15eb4     00 94 06 F6 | 	mov	arg02, ##1191181824
15eb8     F0 13 B1 FD | 	call	#__system___float_div
15ebc     3D 95 02 F6 | 	mov	arg02, result1
15ec0     54 93 02 F6 | 	mov	arg01, local02
15ec4     10 0E B1 FD | 	call	#__system___float_add
15ec8     3D AD 02 F6 | 	mov	local04, result1
15ecc                 | '   fpad=(1.0/65536.0)+padrx(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
15ecc     56 93 02 F6 | 	mov	arg01, local04
15ed0     1F 92 06 F4 | 	bitl	arg01, #31
15ed4     89 41 1D FF 
15ed8     6F 94 06 F6 | 	mov	arg02, ##981668463
15edc     01 96 06 F6 | 	mov	arg03, #1
15ee0     F8 15 B1 FD | 	call	#__system___float_cmp
15ee4     00 7A 56 F2 | 	cmps	result1, #0 wc
15ee8     00 AC 06 C6 |  if_b	mov	local04, #0
15eec     E7 AC 62 FC | 	wrlong	local04, fp
15ef0     08 CE 05 F1 | 	add	fp, #8
15ef4     E7 3C 68 FC | 	wrlong	#30, fp
15ef8     08 CE 85 F1 | 	sub	fp, #8
15efc     E7 92 02 F6 | 	mov	arg01, fp
15f00     FC 77 BF FD | 	call	#_push
15f04                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
15f04     0C 01 90 FD | 	jmp	#LR__1884
15f08                 | LR__1881
15f08     64 77 BF FD | 	call	#_pop
15f0c     E7 7A 62 FC | 	wrlong	result1, fp
15f10     04 CE 05 F1 | 	add	fp, #4
15f14     E7 7C 62 FC | 	wrlong	result2, fp
15f18     04 CE 05 F1 | 	add	fp, #4
15f1c     E7 7E 62 FC | 	wrlong	result3, fp
15f20                 | ' t1=pop()
15f20                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
15f20     08 CE 85 F1 | 	sub	fp, #8
15f24     1C 7E 0E F2 | 	cmp	result3, #28 wz
15f28     08 CE 05 51 |  if_ne	add	fp, #8
15f2c     E7 A6 02 5B |  if_ne	rdlong	local01, fp
15f30     08 CE 85 51 |  if_ne	sub	fp, #8
15f34     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
15f38     CC 00 90 5D |  if_ne	jmp	#LR__1883
15f3c     E7 AC 02 FB | 	rdlong	local04, fp
15f40     54 00 00 FF 
15f44     E4 64 06 F1 | 	add	objptr, ##43236
15f48     32 AD 62 FC | 	wrlong	local04, objptr
15f4c                 | '   q=t1.result.uresult
15f4c                 | '   if q<7 then 
15f4c     54 00 00 FF 
15f50     E4 64 86 F1 | 	sub	objptr, ##43236
15f54     07 AC 56 F2 | 	cmps	local04, #7 wc
15f58     9C 00 90 3D |  if_ae	jmp	#LR__1882
15f5c     00 C0 1B FF 
15f60     00 AC 06 F6 | 	mov	local04, ##931135488
15f64     54 00 00 FF 
15f68     E4 64 06 F1 | 	add	objptr, ##43236
15f6c     32 A9 02 FB | 	rdlong	local02, objptr
15f70     02 A8 66 F0 | 	shl	local02, #2
15f74     78 65 86 F1 | 	sub	objptr, #376
15f78     32 A9 02 F1 | 	add	local02, objptr
15f7c     54 93 02 FB | 	rdlong	arg01, local02
15f80     53 00 00 FF 
15f84     6C 65 86 F1 | 	sub	objptr, ##42860
15f88     49 93 52 F6 | 	abs	arg01, arg01 wc
15f8c     1F AA C6 C9 |  if_b	decod	local03, #31
15f90     00 AA 06 36 |  if_ae	mov	local03, #0
15f94     0C 0D B1 FD | 	call	#__system___float_fromuns
15f98     55 7B 62 F5 | 	xor	result1, local03
15f9c     3D 93 02 F6 | 	mov	arg01, result1
15fa0     FF 7F 23 FF 
15fa4     00 94 06 F6 | 	mov	arg02, ##1191181824
15fa8     00 13 B1 FD | 	call	#__system___float_div
15fac     3D 95 02 F6 | 	mov	arg02, result1
15fb0     56 93 02 F6 | 	mov	arg01, local04
15fb4     20 0D B1 FD | 	call	#__system___float_add
15fb8     3D AD 02 F6 | 	mov	local04, result1
15fbc                 | '     fpad=(1.0/65536.0)+padrx(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
15fbc     56 93 02 F6 | 	mov	arg01, local04
15fc0     1F 92 06 F4 | 	bitl	arg01, #31
15fc4     89 41 1D FF 
15fc8     6F 94 06 F6 | 	mov	arg02, ##981668463
15fcc     01 96 06 F6 | 	mov	arg03, #1
15fd0     08 15 B1 FD | 	call	#__system___float_cmp
15fd4     00 7A 56 F2 | 	cmps	result1, #0 wc
15fd8     00 AC 06 C6 |  if_b	mov	local04, #0
15fdc     E7 AC 62 FC | 	wrlong	local04, fp
15fe0     08 CE 05 F1 | 	add	fp, #8
15fe4     E7 3C 68 FC | 	wrlong	#30, fp
15fe8     08 CE 85 F1 | 	sub	fp, #8
15fec     E7 92 02 F6 | 	mov	arg01, fp
15ff0     0C 77 BF FD | 	call	#_push
15ff4                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
15ff4     1C 00 90 FD | 	jmp	#LR__1884
15ff8                 | LR__1882
15ff8     29 92 06 F6 | 	mov	arg01, #41
15ffc     00 94 06 F6 | 	mov	arg02, #0
16000     D0 AC B0 FD | 	call	#_printerror
16004                 | '      printerror(41) : return
16004     0C 00 90 FD | 	jmp	#LR__1884
16008                 | LR__1883
16008     29 92 06 F6 | 	mov	arg01, #41
1600c     00 94 06 F6 | 	mov	arg02, #0
16010     C0 AC B0 FD | 	call	#_printerror
16014                 | LR__1884
16014     E7 F0 03 F6 | 	mov	ptra, fp
16018     F2 00 A0 FD | 	call	#popregs_
1601c                 | _do_padrx_ret
1601c     2D 00 64 FD | 	ret
16020                 | 
16020                 | ' 
16020                 | ' ' ------------------ padry
16020                 | ' 
16020                 | ' sub do_padry
16020                 | _do_padry
16020     04 CA 05 F6 | 	mov	COUNT_, #4
16024     E8 00 A0 FD | 	call	#pushregs_
16028     14 F0 07 F1 | 	add	ptra, #20
1602c     4C 00 00 FF 
16030     24 64 06 F1 | 	add	objptr, ##38948
16034     32 A7 02 FB | 	rdlong	local01, objptr
16038     53 97 02 F6 | 	mov	arg03, local01
1603c     01 96 66 F0 | 	shl	arg03, #1
16040     53 97 02 F1 | 	add	arg03, local01
16044     02 96 66 F0 | 	shl	arg03, #2
16048     03 00 00 FF 
1604c     04 64 86 F1 | 	sub	objptr, ##1540
16050     32 97 02 F1 | 	add	arg03, objptr
16054     4B A9 02 FB | 	rdlong	local02, arg03
16058                 | ' 
16058                 | ' numpar=compiledline(lineptr_e).result.uresult
16058                 | ' if numpar>1 then print "padry: "; : printerror(39) : return
16058     02 A8 16 F2 | 	cmp	local02, #2 wc
1605c     49 00 00 FF 
16060     20 64 86 F1 | 	sub	objptr, ##37408
16064     40 00 90 CD |  if_b	jmp	#LR__1890
16068     00 92 06 F6 | 	mov	arg01, #0
1606c     EC 3E B1 FD | 	call	#__system___getiolock_0622
16070     3D 93 02 F6 | 	mov	arg01, result1
16074     60 E9 B0 FD | 	call	#__system___lockmem
16078     98 01 00 FF 
1607c     85 94 06 F6 | 	mov	arg02, ##@LR__6057
16080     00 92 06 F6 | 	mov	arg01, #0
16084     00 96 06 F6 | 	mov	arg03, #0
16088     40 F6 B0 FD | 	call	#__system___basic_print_string
1608c     00 92 06 F6 | 	mov	arg01, #0
16090     C8 3E B1 FD | 	call	#__system___getiolock_0622
16094     3D 01 68 FC | 	wrlong	#0, result1
16098     27 92 06 F6 | 	mov	arg01, #39
1609c     00 94 06 F6 | 	mov	arg02, #0
160a0     30 AC B0 FD | 	call	#_printerror
160a4     A0 01 90 FD | 	jmp	#LR__1894
160a8                 | LR__1890
160a8                 | ' if numpar=0 then 
160a8     00 A8 0E F2 | 	cmp	local02, #0 wz
160ac     8C 00 90 5D |  if_ne	jmp	#LR__1891
160b0     00 C0 1B FF 
160b4     00 A8 06 F6 | 	mov	local02, ##931135488
160b8     53 00 00 FF 
160bc     88 65 06 F1 | 	add	objptr, ##42888
160c0     32 93 02 FB | 	rdlong	arg01, objptr
160c4     53 00 00 FF 
160c8     88 65 86 F1 | 	sub	objptr, ##42888
160cc     49 93 52 F6 | 	abs	arg01, arg01 wc
160d0     1F AA C6 C9 |  if_b	decod	local03, #31
160d4     00 AA 06 36 |  if_ae	mov	local03, #0
160d8     C8 0B B1 FD | 	call	#__system___float_fromuns
160dc     55 7B 62 F5 | 	xor	result1, local03
160e0     3D 93 02 F6 | 	mov	arg01, result1
160e4     FF 7F 23 FF 
160e8     00 94 06 F6 | 	mov	arg02, ##1191181824
160ec     BC 11 B1 FD | 	call	#__system___float_div
160f0     3D 95 02 F6 | 	mov	arg02, result1
160f4     54 93 02 F6 | 	mov	arg01, local02
160f8     DC 0B B1 FD | 	call	#__system___float_add
160fc     3D AD 02 F6 | 	mov	local04, result1
16100                 | '   fpad=(1.0/65536.0)+padry(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16100     56 93 02 F6 | 	mov	arg01, local04
16104     1F 92 06 F4 | 	bitl	arg01, #31
16108     89 41 1D FF 
1610c     6F 94 06 F6 | 	mov	arg02, ##981668463
16110     01 96 06 F6 | 	mov	arg03, #1
16114     C4 13 B1 FD | 	call	#__system___float_cmp
16118     00 7A 56 F2 | 	cmps	result1, #0 wc
1611c     00 AC 06 C6 |  if_b	mov	local04, #0
16120     E7 AC 62 FC | 	wrlong	local04, fp
16124     08 CE 05 F1 | 	add	fp, #8
16128     E7 3C 68 FC | 	wrlong	#30, fp
1612c     08 CE 85 F1 | 	sub	fp, #8
16130     E7 92 02 F6 | 	mov	arg01, fp
16134     C8 75 BF FD | 	call	#_push
16138                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16138     0C 01 90 FD | 	jmp	#LR__1894
1613c                 | LR__1891
1613c     30 75 BF FD | 	call	#_pop
16140     E7 7A 62 FC | 	wrlong	result1, fp
16144     04 CE 05 F1 | 	add	fp, #4
16148     E7 7C 62 FC | 	wrlong	result2, fp
1614c     04 CE 05 F1 | 	add	fp, #4
16150     E7 7E 62 FC | 	wrlong	result3, fp
16154                 | ' t1=pop()
16154                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16154     08 CE 85 F1 | 	sub	fp, #8
16158     1C 7E 0E F2 | 	cmp	result3, #28 wz
1615c     08 CE 05 51 |  if_ne	add	fp, #8
16160     E7 A6 02 5B |  if_ne	rdlong	local01, fp
16164     08 CE 85 51 |  if_ne	sub	fp, #8
16168     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
1616c     CC 00 90 5D |  if_ne	jmp	#LR__1893
16170     E7 AC 02 FB | 	rdlong	local04, fp
16174     54 00 00 FF 
16178     E4 64 06 F1 | 	add	objptr, ##43236
1617c     32 AD 62 FC | 	wrlong	local04, objptr
16180                 | '   q=t1.result.uresult
16180                 | '   if q<7 then 
16180     54 00 00 FF 
16184     E4 64 86 F1 | 	sub	objptr, ##43236
16188     07 AC 56 F2 | 	cmps	local04, #7 wc
1618c     9C 00 90 3D |  if_ae	jmp	#LR__1892
16190     00 C0 1B FF 
16194     00 AC 06 F6 | 	mov	local04, ##931135488
16198     54 00 00 FF 
1619c     E4 64 06 F1 | 	add	objptr, ##43236
161a0     32 A9 02 FB | 	rdlong	local02, objptr
161a4     02 A8 66 F0 | 	shl	local02, #2
161a8     5C 65 86 F1 | 	sub	objptr, #348
161ac     32 A9 02 F1 | 	add	local02, objptr
161b0     54 93 02 FB | 	rdlong	arg01, local02
161b4     53 00 00 FF 
161b8     88 65 86 F1 | 	sub	objptr, ##42888
161bc     49 93 52 F6 | 	abs	arg01, arg01 wc
161c0     1F AA C6 C9 |  if_b	decod	local03, #31
161c4     00 AA 06 36 |  if_ae	mov	local03, #0
161c8     D8 0A B1 FD | 	call	#__system___float_fromuns
161cc     55 7B 62 F5 | 	xor	result1, local03
161d0     3D 93 02 F6 | 	mov	arg01, result1
161d4     FF 7F 23 FF 
161d8     00 94 06 F6 | 	mov	arg02, ##1191181824
161dc     CC 10 B1 FD | 	call	#__system___float_div
161e0     3D 95 02 F6 | 	mov	arg02, result1
161e4     56 93 02 F6 | 	mov	arg01, local04
161e8     EC 0A B1 FD | 	call	#__system___float_add
161ec     3D AD 02 F6 | 	mov	local04, result1
161f0                 | '     fpad=(1.0/65536.0)+padry(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
161f0     56 93 02 F6 | 	mov	arg01, local04
161f4     1F 92 06 F4 | 	bitl	arg01, #31
161f8     89 41 1D FF 
161fc     6F 94 06 F6 | 	mov	arg02, ##981668463
16200     01 96 06 F6 | 	mov	arg03, #1
16204     D4 12 B1 FD | 	call	#__system___float_cmp
16208     00 7A 56 F2 | 	cmps	result1, #0 wc
1620c     00 AC 06 C6 |  if_b	mov	local04, #0
16210     E7 AC 62 FC | 	wrlong	local04, fp
16214     08 CE 05 F1 | 	add	fp, #8
16218     E7 3C 68 FC | 	wrlong	#30, fp
1621c     08 CE 85 F1 | 	sub	fp, #8
16220     E7 92 02 F6 | 	mov	arg01, fp
16224     D8 74 BF FD | 	call	#_push
16228                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16228     1C 00 90 FD | 	jmp	#LR__1894
1622c                 | LR__1892
1622c     29 92 06 F6 | 	mov	arg01, #41
16230     00 94 06 F6 | 	mov	arg02, #0
16234     9C AA B0 FD | 	call	#_printerror
16238                 | '      printerror(41) : return
16238     0C 00 90 FD | 	jmp	#LR__1894
1623c                 | LR__1893
1623c     29 92 06 F6 | 	mov	arg01, #41
16240     00 94 06 F6 | 	mov	arg02, #0
16244     8C AA B0 FD | 	call	#_printerror
16248                 | LR__1894
16248     E7 F0 03 F6 | 	mov	ptra, fp
1624c     F2 00 A0 FD | 	call	#popregs_
16250                 | _do_padry_ret
16250     2D 00 64 FD | 	ret
16254                 | 
16254                 | ' 
16254                 | ' ' ------------------ padrz
16254                 | ' 
16254                 | ' sub do_padrz
16254                 | _do_padrz
16254     04 CA 05 F6 | 	mov	COUNT_, #4
16258     E8 00 A0 FD | 	call	#pushregs_
1625c     14 F0 07 F1 | 	add	ptra, #20
16260     4C 00 00 FF 
16264     24 64 06 F1 | 	add	objptr, ##38948
16268     32 A7 02 FB | 	rdlong	local01, objptr
1626c     53 97 02 F6 | 	mov	arg03, local01
16270     01 96 66 F0 | 	shl	arg03, #1
16274     53 97 02 F1 | 	add	arg03, local01
16278     02 96 66 F0 | 	shl	arg03, #2
1627c     03 00 00 FF 
16280     04 64 86 F1 | 	sub	objptr, ##1540
16284     32 97 02 F1 | 	add	arg03, objptr
16288     4B A9 02 FB | 	rdlong	local02, arg03
1628c                 | ' 
1628c                 | ' numpar=compiledline(lineptr_e).result.uresult
1628c                 | ' if numpar>1 then print "padrz: "; : printerror(39) : return
1628c     02 A8 16 F2 | 	cmp	local02, #2 wc
16290     49 00 00 FF 
16294     20 64 86 F1 | 	sub	objptr, ##37408
16298     40 00 90 CD |  if_b	jmp	#LR__1900
1629c     00 92 06 F6 | 	mov	arg01, #0
162a0     B8 3C B1 FD | 	call	#__system___getiolock_0622
162a4     3D 93 02 F6 | 	mov	arg01, result1
162a8     2C E7 B0 FD | 	call	#__system___lockmem
162ac     98 01 00 FF 
162b0     8D 94 06 F6 | 	mov	arg02, ##@LR__6058
162b4     00 92 06 F6 | 	mov	arg01, #0
162b8     00 96 06 F6 | 	mov	arg03, #0
162bc     0C F4 B0 FD | 	call	#__system___basic_print_string
162c0     00 92 06 F6 | 	mov	arg01, #0
162c4     94 3C B1 FD | 	call	#__system___getiolock_0622
162c8     3D 01 68 FC | 	wrlong	#0, result1
162cc     27 92 06 F6 | 	mov	arg01, #39
162d0     00 94 06 F6 | 	mov	arg02, #0
162d4     FC A9 B0 FD | 	call	#_printerror
162d8     A0 01 90 FD | 	jmp	#LR__1904
162dc                 | LR__1900
162dc                 | ' if numpar=0 then 
162dc     00 A8 0E F2 | 	cmp	local02, #0 wz
162e0     8C 00 90 5D |  if_ne	jmp	#LR__1901
162e4     00 C0 1B FF 
162e8     00 A8 06 F6 | 	mov	local02, ##931135488
162ec     53 00 00 FF 
162f0     A4 65 06 F1 | 	add	objptr, ##42916
162f4     32 93 02 FB | 	rdlong	arg01, objptr
162f8     53 00 00 FF 
162fc     A4 65 86 F1 | 	sub	objptr, ##42916
16300     49 93 52 F6 | 	abs	arg01, arg01 wc
16304     1F AA C6 C9 |  if_b	decod	local03, #31
16308     00 AA 06 36 |  if_ae	mov	local03, #0
1630c     94 09 B1 FD | 	call	#__system___float_fromuns
16310     55 7B 62 F5 | 	xor	result1, local03
16314     3D 93 02 F6 | 	mov	arg01, result1
16318     FF 7F 23 FF 
1631c     00 94 06 F6 | 	mov	arg02, ##1191181824
16320     88 0F B1 FD | 	call	#__system___float_div
16324     3D 95 02 F6 | 	mov	arg02, result1
16328     54 93 02 F6 | 	mov	arg01, local02
1632c     A8 09 B1 FD | 	call	#__system___float_add
16330     3D AD 02 F6 | 	mov	local04, result1
16334                 | '   fpad=(1.0/65536.0)+padrz(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16334     56 93 02 F6 | 	mov	arg01, local04
16338     1F 92 06 F4 | 	bitl	arg01, #31
1633c     89 41 1D FF 
16340     6F 94 06 F6 | 	mov	arg02, ##981668463
16344     01 96 06 F6 | 	mov	arg03, #1
16348     90 11 B1 FD | 	call	#__system___float_cmp
1634c     00 7A 56 F2 | 	cmps	result1, #0 wc
16350     00 AC 06 C6 |  if_b	mov	local04, #0
16354     E7 AC 62 FC | 	wrlong	local04, fp
16358     08 CE 05 F1 | 	add	fp, #8
1635c     E7 3C 68 FC | 	wrlong	#30, fp
16360     08 CE 85 F1 | 	sub	fp, #8
16364     E7 92 02 F6 | 	mov	arg01, fp
16368     94 73 BF FD | 	call	#_push
1636c                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
1636c     0C 01 90 FD | 	jmp	#LR__1904
16370                 | LR__1901
16370     FC 72 BF FD | 	call	#_pop
16374     E7 7A 62 FC | 	wrlong	result1, fp
16378     04 CE 05 F1 | 	add	fp, #4
1637c     E7 7C 62 FC | 	wrlong	result2, fp
16380     04 CE 05 F1 | 	add	fp, #4
16384     E7 7E 62 FC | 	wrlong	result3, fp
16388                 | ' t1=pop()
16388                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16388     08 CE 85 F1 | 	sub	fp, #8
1638c     1C 7E 0E F2 | 	cmp	result3, #28 wz
16390     08 CE 05 51 |  if_ne	add	fp, #8
16394     E7 A6 02 5B |  if_ne	rdlong	local01, fp
16398     08 CE 85 51 |  if_ne	sub	fp, #8
1639c     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
163a0     CC 00 90 5D |  if_ne	jmp	#LR__1903
163a4     E7 AC 02 FB | 	rdlong	local04, fp
163a8     54 00 00 FF 
163ac     E4 64 06 F1 | 	add	objptr, ##43236
163b0     32 AD 62 FC | 	wrlong	local04, objptr
163b4                 | '   q=t1.result.uresult
163b4                 | '   if q<7 then 
163b4     54 00 00 FF 
163b8     E4 64 86 F1 | 	sub	objptr, ##43236
163bc     07 AC 56 F2 | 	cmps	local04, #7 wc
163c0     9C 00 90 3D |  if_ae	jmp	#LR__1902
163c4     00 C0 1B FF 
163c8     00 AC 06 F6 | 	mov	local04, ##931135488
163cc     54 00 00 FF 
163d0     E4 64 06 F1 | 	add	objptr, ##43236
163d4     32 A9 02 FB | 	rdlong	local02, objptr
163d8     02 A8 66 F0 | 	shl	local02, #2
163dc     40 65 86 F1 | 	sub	objptr, #320
163e0     32 A9 02 F1 | 	add	local02, objptr
163e4     54 93 02 FB | 	rdlong	arg01, local02
163e8     53 00 00 FF 
163ec     A4 65 86 F1 | 	sub	objptr, ##42916
163f0     49 93 52 F6 | 	abs	arg01, arg01 wc
163f4     1F AA C6 C9 |  if_b	decod	local03, #31
163f8     00 AA 06 36 |  if_ae	mov	local03, #0
163fc     A4 08 B1 FD | 	call	#__system___float_fromuns
16400     55 7B 62 F5 | 	xor	result1, local03
16404     3D 93 02 F6 | 	mov	arg01, result1
16408     FF 7F 23 FF 
1640c     00 94 06 F6 | 	mov	arg02, ##1191181824
16410     98 0E B1 FD | 	call	#__system___float_div
16414     3D 95 02 F6 | 	mov	arg02, result1
16418     56 93 02 F6 | 	mov	arg01, local04
1641c     B8 08 B1 FD | 	call	#__system___float_add
16420     3D AD 02 F6 | 	mov	local04, result1
16424                 | '     fpad=(1.0/65536.0)+padrz(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16424     56 93 02 F6 | 	mov	arg01, local04
16428     1F 92 06 F4 | 	bitl	arg01, #31
1642c     89 41 1D FF 
16430     6F 94 06 F6 | 	mov	arg02, ##981668463
16434     01 96 06 F6 | 	mov	arg03, #1
16438     A0 10 B1 FD | 	call	#__system___float_cmp
1643c     00 7A 56 F2 | 	cmps	result1, #0 wc
16440     00 AC 06 C6 |  if_b	mov	local04, #0
16444     E7 AC 62 FC | 	wrlong	local04, fp
16448     08 CE 05 F1 | 	add	fp, #8
1644c     E7 3C 68 FC | 	wrlong	#30, fp
16450     08 CE 85 F1 | 	sub	fp, #8
16454     E7 92 02 F6 | 	mov	arg01, fp
16458     A4 72 BF FD | 	call	#_push
1645c                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
1645c     1C 00 90 FD | 	jmp	#LR__1904
16460                 | LR__1902
16460     29 92 06 F6 | 	mov	arg01, #41
16464     00 94 06 F6 | 	mov	arg02, #0
16468     68 A8 B0 FD | 	call	#_printerror
1646c                 | '      printerror(41) : return
1646c     0C 00 90 FD | 	jmp	#LR__1904
16470                 | LR__1903
16470     29 92 06 F6 | 	mov	arg01, #41
16474     00 94 06 F6 | 	mov	arg02, #0
16478     58 A8 B0 FD | 	call	#_printerror
1647c                 | LR__1904
1647c     E7 F0 03 F6 | 	mov	ptra, fp
16480     F2 00 A0 FD | 	call	#popregs_
16484                 | _do_padrz_ret
16484     2D 00 64 FD | 	ret
16488                 | 
16488                 | ' 
16488                 | ' ' ------------------ pads
16488                 | ' 
16488                 | ' sub do_pads
16488                 | _do_pads
16488     04 CA 05 F6 | 	mov	COUNT_, #4
1648c     E8 00 A0 FD | 	call	#pushregs_
16490     14 F0 07 F1 | 	add	ptra, #20
16494     4C 00 00 FF 
16498     24 64 06 F1 | 	add	objptr, ##38948
1649c     32 A7 02 FB | 	rdlong	local01, objptr
164a0     53 97 02 F6 | 	mov	arg03, local01
164a4     01 96 66 F0 | 	shl	arg03, #1
164a8     53 97 02 F1 | 	add	arg03, local01
164ac     02 96 66 F0 | 	shl	arg03, #2
164b0     03 00 00 FF 
164b4     04 64 86 F1 | 	sub	objptr, ##1540
164b8     32 97 02 F1 | 	add	arg03, objptr
164bc     4B A9 02 FB | 	rdlong	local02, arg03
164c0                 | ' 
164c0                 | ' numpar=compiledline(lineptr_e).result.uresult
164c0                 | ' if numpar>1 then print "pads: "; : printerror(39) : return
164c0     02 A8 16 F2 | 	cmp	local02, #2 wc
164c4     49 00 00 FF 
164c8     20 64 86 F1 | 	sub	objptr, ##37408
164cc     40 00 90 CD |  if_b	jmp	#LR__1910
164d0     00 92 06 F6 | 	mov	arg01, #0
164d4     84 3A B1 FD | 	call	#__system___getiolock_0622
164d8     3D 93 02 F6 | 	mov	arg01, result1
164dc     F8 E4 B0 FD | 	call	#__system___lockmem
164e0     98 01 00 FF 
164e4     95 94 06 F6 | 	mov	arg02, ##@LR__6059
164e8     00 92 06 F6 | 	mov	arg01, #0
164ec     00 96 06 F6 | 	mov	arg03, #0
164f0     D8 F1 B0 FD | 	call	#__system___basic_print_string
164f4     00 92 06 F6 | 	mov	arg01, #0
164f8     60 3A B1 FD | 	call	#__system___getiolock_0622
164fc     3D 01 68 FC | 	wrlong	#0, result1
16500     27 92 06 F6 | 	mov	arg01, #39
16504     00 94 06 F6 | 	mov	arg02, #0
16508     C8 A7 B0 FD | 	call	#_printerror
1650c     A0 01 90 FD | 	jmp	#LR__1914
16510                 | LR__1910
16510                 | ' if numpar=0 then 
16510     00 A8 0E F2 | 	cmp	local02, #0 wz
16514     8C 00 90 5D |  if_ne	jmp	#LR__1911
16518     00 C0 1B FF 
1651c     00 A8 06 F6 | 	mov	local02, ##931135488
16520     53 00 00 FF 
16524     C0 65 06 F1 | 	add	objptr, ##42944
16528     32 93 02 FB | 	rdlong	arg01, objptr
1652c     53 00 00 FF 
16530     C0 65 86 F1 | 	sub	objptr, ##42944
16534     49 93 52 F6 | 	abs	arg01, arg01 wc
16538     1F AA C6 C9 |  if_b	decod	local03, #31
1653c     00 AA 06 36 |  if_ae	mov	local03, #0
16540     60 07 B1 FD | 	call	#__system___float_fromuns
16544     55 7B 62 F5 | 	xor	result1, local03
16548     3D 93 02 F6 | 	mov	arg01, result1
1654c     FF 7F 23 FF 
16550     00 94 06 F6 | 	mov	arg02, ##1191181824
16554     54 0D B1 FD | 	call	#__system___float_div
16558     3D 95 02 F6 | 	mov	arg02, result1
1655c     54 93 02 F6 | 	mov	arg01, local02
16560     74 07 B1 FD | 	call	#__system___float_add
16564     3D AD 02 F6 | 	mov	local04, result1
16568                 | '   fpad=(1.0/65536.0)+pads(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16568     56 93 02 F6 | 	mov	arg01, local04
1656c     1F 92 06 F4 | 	bitl	arg01, #31
16570     89 41 1D FF 
16574     6F 94 06 F6 | 	mov	arg02, ##981668463
16578     01 96 06 F6 | 	mov	arg03, #1
1657c     5C 0F B1 FD | 	call	#__system___float_cmp
16580     00 7A 56 F2 | 	cmps	result1, #0 wc
16584     00 AC 06 C6 |  if_b	mov	local04, #0
16588     E7 AC 62 FC | 	wrlong	local04, fp
1658c     08 CE 05 F1 | 	add	fp, #8
16590     E7 3C 68 FC | 	wrlong	#30, fp
16594     08 CE 85 F1 | 	sub	fp, #8
16598     E7 92 02 F6 | 	mov	arg01, fp
1659c     60 71 BF FD | 	call	#_push
165a0                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
165a0     0C 01 90 FD | 	jmp	#LR__1914
165a4                 | LR__1911
165a4     C8 70 BF FD | 	call	#_pop
165a8     E7 7A 62 FC | 	wrlong	result1, fp
165ac     04 CE 05 F1 | 	add	fp, #4
165b0     E7 7C 62 FC | 	wrlong	result2, fp
165b4     04 CE 05 F1 | 	add	fp, #4
165b8     E7 7E 62 FC | 	wrlong	result3, fp
165bc                 | ' t1=pop()
165bc                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
165bc     08 CE 85 F1 | 	sub	fp, #8
165c0     1C 7E 0E F2 | 	cmp	result3, #28 wz
165c4     08 CE 05 51 |  if_ne	add	fp, #8
165c8     E7 A6 02 5B |  if_ne	rdlong	local01, fp
165cc     08 CE 85 51 |  if_ne	sub	fp, #8
165d0     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
165d4     CC 00 90 5D |  if_ne	jmp	#LR__1913
165d8     E7 AC 02 FB | 	rdlong	local04, fp
165dc     54 00 00 FF 
165e0     E4 64 06 F1 | 	add	objptr, ##43236
165e4     32 AD 62 FC | 	wrlong	local04, objptr
165e8                 | '   q=t1.result.uresult
165e8                 | '   if q<7 then 
165e8     54 00 00 FF 
165ec     E4 64 86 F1 | 	sub	objptr, ##43236
165f0     07 AC 56 F2 | 	cmps	local04, #7 wc
165f4     9C 00 90 3D |  if_ae	jmp	#LR__1912
165f8     00 C0 1B FF 
165fc     00 AC 06 F6 | 	mov	local04, ##931135488
16600     54 00 00 FF 
16604     E4 64 06 F1 | 	add	objptr, ##43236
16608     32 A9 02 FB | 	rdlong	local02, objptr
1660c     02 A8 66 F0 | 	shl	local02, #2
16610     24 65 86 F1 | 	sub	objptr, #292
16614     32 A9 02 F1 | 	add	local02, objptr
16618     54 93 02 FB | 	rdlong	arg01, local02
1661c     53 00 00 FF 
16620     C0 65 86 F1 | 	sub	objptr, ##42944
16624     49 93 52 F6 | 	abs	arg01, arg01 wc
16628     1F AA C6 C9 |  if_b	decod	local03, #31
1662c     00 AA 06 36 |  if_ae	mov	local03, #0
16630     70 06 B1 FD | 	call	#__system___float_fromuns
16634     55 7B 62 F5 | 	xor	result1, local03
16638     3D 93 02 F6 | 	mov	arg01, result1
1663c     FF 7F 23 FF 
16640     00 94 06 F6 | 	mov	arg02, ##1191181824
16644     64 0C B1 FD | 	call	#__system___float_div
16648     3D 95 02 F6 | 	mov	arg02, result1
1664c     56 93 02 F6 | 	mov	arg01, local04
16650     84 06 B1 FD | 	call	#__system___float_add
16654     3D AD 02 F6 | 	mov	local04, result1
16658                 | '     fpad=(1.0/65536.0)+pads(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16658     56 93 02 F6 | 	mov	arg01, local04
1665c     1F 92 06 F4 | 	bitl	arg01, #31
16660     89 41 1D FF 
16664     6F 94 06 F6 | 	mov	arg02, ##981668463
16668     01 96 06 F6 | 	mov	arg03, #1
1666c     6C 0E B1 FD | 	call	#__system___float_cmp
16670     00 7A 56 F2 | 	cmps	result1, #0 wc
16674     00 AC 06 C6 |  if_b	mov	local04, #0
16678     E7 AC 62 FC | 	wrlong	local04, fp
1667c     08 CE 05 F1 | 	add	fp, #8
16680     E7 3C 68 FC | 	wrlong	#30, fp
16684     08 CE 85 F1 | 	sub	fp, #8
16688     E7 92 02 F6 | 	mov	arg01, fp
1668c     70 70 BF FD | 	call	#_push
16690                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16690     1C 00 90 FD | 	jmp	#LR__1914
16694                 | LR__1912
16694     29 92 06 F6 | 	mov	arg01, #41
16698     00 94 06 F6 | 	mov	arg02, #0
1669c     34 A6 B0 FD | 	call	#_printerror
166a0                 | '      printerror(41) : return
166a0     0C 00 90 FD | 	jmp	#LR__1914
166a4                 | LR__1913
166a4     29 92 06 F6 | 	mov	arg01, #41
166a8     00 94 06 F6 | 	mov	arg02, #0
166ac     24 A6 B0 FD | 	call	#_printerror
166b0                 | LR__1914
166b0     E7 F0 03 F6 | 	mov	ptra, fp
166b4     F2 00 A0 FD | 	call	#popregs_
166b8                 | _do_pads_ret
166b8     2D 00 64 FD | 	ret
166bc                 | 
166bc                 | ' 
166bc                 | ' ' ------------------ padw
166bc                 | ' 
166bc                 | ' sub do_padw
166bc                 | _do_padw
166bc     04 CA 05 F6 | 	mov	COUNT_, #4
166c0     E8 00 A0 FD | 	call	#pushregs_
166c4     14 F0 07 F1 | 	add	ptra, #20
166c8     4C 00 00 FF 
166cc     24 64 06 F1 | 	add	objptr, ##38948
166d0     32 A7 02 FB | 	rdlong	local01, objptr
166d4     53 97 02 F6 | 	mov	arg03, local01
166d8     01 96 66 F0 | 	shl	arg03, #1
166dc     53 97 02 F1 | 	add	arg03, local01
166e0     02 96 66 F0 | 	shl	arg03, #2
166e4     03 00 00 FF 
166e8     04 64 86 F1 | 	sub	objptr, ##1540
166ec     32 97 02 F1 | 	add	arg03, objptr
166f0     4B A9 02 FB | 	rdlong	local02, arg03
166f4                 | ' 
166f4                 | ' numpar=compiledline(lineptr_e).result.uresult
166f4                 | ' if numpar>1 then print "padw: "; : printerror(39) : return
166f4     02 A8 16 F2 | 	cmp	local02, #2 wc
166f8     49 00 00 FF 
166fc     20 64 86 F1 | 	sub	objptr, ##37408
16700     40 00 90 CD |  if_b	jmp	#LR__1920
16704     00 92 06 F6 | 	mov	arg01, #0
16708     50 38 B1 FD | 	call	#__system___getiolock_0622
1670c     3D 93 02 F6 | 	mov	arg01, result1
16710     C4 E2 B0 FD | 	call	#__system___lockmem
16714     98 01 00 FF 
16718     9C 94 06 F6 | 	mov	arg02, ##@LR__6060
1671c     00 92 06 F6 | 	mov	arg01, #0
16720     00 96 06 F6 | 	mov	arg03, #0
16724     A4 EF B0 FD | 	call	#__system___basic_print_string
16728     00 92 06 F6 | 	mov	arg01, #0
1672c     2C 38 B1 FD | 	call	#__system___getiolock_0622
16730     3D 01 68 FC | 	wrlong	#0, result1
16734     27 92 06 F6 | 	mov	arg01, #39
16738     00 94 06 F6 | 	mov	arg02, #0
1673c     94 A5 B0 FD | 	call	#_printerror
16740     A0 01 90 FD | 	jmp	#LR__1924
16744                 | LR__1920
16744                 | ' if numpar=0 then 
16744     00 A8 0E F2 | 	cmp	local02, #0 wz
16748     8C 00 90 5D |  if_ne	jmp	#LR__1921
1674c     00 C0 1B FF 
16750     00 A8 06 F6 | 	mov	local02, ##931135488
16754     53 00 00 FF 
16758     DC 65 06 F1 | 	add	objptr, ##42972
1675c     32 93 02 FB | 	rdlong	arg01, objptr
16760     53 00 00 FF 
16764     DC 65 86 F1 | 	sub	objptr, ##42972
16768     49 93 52 F6 | 	abs	arg01, arg01 wc
1676c     1F AA C6 C9 |  if_b	decod	local03, #31
16770     00 AA 06 36 |  if_ae	mov	local03, #0
16774     2C 05 B1 FD | 	call	#__system___float_fromuns
16778     55 7B 62 F5 | 	xor	result1, local03
1677c     3D 93 02 F6 | 	mov	arg01, result1
16780     FF 7F 23 FF 
16784     00 94 06 F6 | 	mov	arg02, ##1191181824
16788     20 0B B1 FD | 	call	#__system___float_div
1678c     3D 95 02 F6 | 	mov	arg02, result1
16790     54 93 02 F6 | 	mov	arg01, local02
16794     40 05 B1 FD | 	call	#__system___float_add
16798     3D AD 02 F6 | 	mov	local04, result1
1679c                 | '   fpad=(1.0/65536.0)+padw(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
1679c     56 93 02 F6 | 	mov	arg01, local04
167a0     1F 92 06 F4 | 	bitl	arg01, #31
167a4     89 41 1D FF 
167a8     6F 94 06 F6 | 	mov	arg02, ##981668463
167ac     01 96 06 F6 | 	mov	arg03, #1
167b0     28 0D B1 FD | 	call	#__system___float_cmp
167b4     00 7A 56 F2 | 	cmps	result1, #0 wc
167b8     00 AC 06 C6 |  if_b	mov	local04, #0
167bc     E7 AC 62 FC | 	wrlong	local04, fp
167c0     08 CE 05 F1 | 	add	fp, #8
167c4     E7 3C 68 FC | 	wrlong	#30, fp
167c8     08 CE 85 F1 | 	sub	fp, #8
167cc     E7 92 02 F6 | 	mov	arg01, fp
167d0     2C 6F BF FD | 	call	#_push
167d4                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
167d4     0C 01 90 FD | 	jmp	#LR__1924
167d8                 | LR__1921
167d8     94 6E BF FD | 	call	#_pop
167dc     E7 7A 62 FC | 	wrlong	result1, fp
167e0     04 CE 05 F1 | 	add	fp, #4
167e4     E7 7C 62 FC | 	wrlong	result2, fp
167e8     04 CE 05 F1 | 	add	fp, #4
167ec     E7 7E 62 FC | 	wrlong	result3, fp
167f0                 | ' t1=pop()
167f0                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
167f0     08 CE 85 F1 | 	sub	fp, #8
167f4     1C 7E 0E F2 | 	cmp	result3, #28 wz
167f8     08 CE 05 51 |  if_ne	add	fp, #8
167fc     E7 A6 02 5B |  if_ne	rdlong	local01, fp
16800     08 CE 85 51 |  if_ne	sub	fp, #8
16804     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
16808     CC 00 90 5D |  if_ne	jmp	#LR__1923
1680c     E7 AC 02 FB | 	rdlong	local04, fp
16810     54 00 00 FF 
16814     E4 64 06 F1 | 	add	objptr, ##43236
16818     32 AD 62 FC | 	wrlong	local04, objptr
1681c                 | '   q=t1.result.uresult
1681c                 | '   if q<7 then 
1681c     54 00 00 FF 
16820     E4 64 86 F1 | 	sub	objptr, ##43236
16824     07 AC 56 F2 | 	cmps	local04, #7 wc
16828     9C 00 90 3D |  if_ae	jmp	#LR__1922
1682c     00 C0 1B FF 
16830     00 AC 06 F6 | 	mov	local04, ##931135488
16834     54 00 00 FF 
16838     E4 64 06 F1 | 	add	objptr, ##43236
1683c     32 A9 02 FB | 	rdlong	local02, objptr
16840     02 A8 66 F0 | 	shl	local02, #2
16844     08 65 86 F1 | 	sub	objptr, #264
16848     32 A9 02 F1 | 	add	local02, objptr
1684c     54 93 02 FB | 	rdlong	arg01, local02
16850     53 00 00 FF 
16854     DC 65 86 F1 | 	sub	objptr, ##42972
16858     49 93 52 F6 | 	abs	arg01, arg01 wc
1685c     1F AA C6 C9 |  if_b	decod	local03, #31
16860     00 AA 06 36 |  if_ae	mov	local03, #0
16864     3C 04 B1 FD | 	call	#__system___float_fromuns
16868     55 7B 62 F5 | 	xor	result1, local03
1686c     3D 93 02 F6 | 	mov	arg01, result1
16870     FF 7F 23 FF 
16874     00 94 06 F6 | 	mov	arg02, ##1191181824
16878     30 0A B1 FD | 	call	#__system___float_div
1687c     3D 95 02 F6 | 	mov	arg02, result1
16880     56 93 02 F6 | 	mov	arg01, local04
16884     50 04 B1 FD | 	call	#__system___float_add
16888     3D AD 02 F6 | 	mov	local04, result1
1688c                 | '     fpad=(1.0/65536.0)+padw(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
1688c     56 93 02 F6 | 	mov	arg01, local04
16890     1F 92 06 F4 | 	bitl	arg01, #31
16894     89 41 1D FF 
16898     6F 94 06 F6 | 	mov	arg02, ##981668463
1689c     01 96 06 F6 | 	mov	arg03, #1
168a0     38 0C B1 FD | 	call	#__system___float_cmp
168a4     00 7A 56 F2 | 	cmps	result1, #0 wc
168a8     00 AC 06 C6 |  if_b	mov	local04, #0
168ac     E7 AC 62 FC | 	wrlong	local04, fp
168b0     08 CE 05 F1 | 	add	fp, #8
168b4     E7 3C 68 FC | 	wrlong	#30, fp
168b8     08 CE 85 F1 | 	sub	fp, #8
168bc     E7 92 02 F6 | 	mov	arg01, fp
168c0     3C 6E BF FD | 	call	#_push
168c4                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
168c4     1C 00 90 FD | 	jmp	#LR__1924
168c8                 | LR__1922
168c8     29 92 06 F6 | 	mov	arg01, #41
168cc     00 94 06 F6 | 	mov	arg02, #0
168d0     00 A4 B0 FD | 	call	#_printerror
168d4                 | '      printerror(41) : return
168d4     0C 00 90 FD | 	jmp	#LR__1924
168d8                 | LR__1923
168d8     29 92 06 F6 | 	mov	arg01, #41
168dc     00 94 06 F6 | 	mov	arg02, #0
168e0     F0 A3 B0 FD | 	call	#_printerror
168e4                 | LR__1924
168e4     E7 F0 03 F6 | 	mov	ptra, fp
168e8     F2 00 A0 FD | 	call	#popregs_
168ec                 | _do_padw_ret
168ec     2D 00 64 FD | 	ret
168f0                 | 
168f0                 | ' 
168f0                 | ' ' ------------------ padx
168f0                 | ' 
168f0                 | ' sub do_padx
168f0                 | _do_padx
168f0     04 CA 05 F6 | 	mov	COUNT_, #4
168f4     E8 00 A0 FD | 	call	#pushregs_
168f8     14 F0 07 F1 | 	add	ptra, #20
168fc     4C 00 00 FF 
16900     24 64 06 F1 | 	add	objptr, ##38948
16904     32 A7 02 FB | 	rdlong	local01, objptr
16908     53 97 02 F6 | 	mov	arg03, local01
1690c     01 96 66 F0 | 	shl	arg03, #1
16910     53 97 02 F1 | 	add	arg03, local01
16914     02 96 66 F0 | 	shl	arg03, #2
16918     03 00 00 FF 
1691c     04 64 86 F1 | 	sub	objptr, ##1540
16920     32 97 02 F1 | 	add	arg03, objptr
16924     4B A9 02 FB | 	rdlong	local02, arg03
16928                 | ' 
16928                 | ' numpar=compiledline(lineptr_e).result.uresult
16928                 | ' if numpar>1 then print "padx: "; : printerror(39) : return
16928     02 A8 16 F2 | 	cmp	local02, #2 wc
1692c     49 00 00 FF 
16930     20 64 86 F1 | 	sub	objptr, ##37408
16934     40 00 90 CD |  if_b	jmp	#LR__1930
16938     00 92 06 F6 | 	mov	arg01, #0
1693c     1C 36 B1 FD | 	call	#__system___getiolock_0622
16940     3D 93 02 F6 | 	mov	arg01, result1
16944     90 E0 B0 FD | 	call	#__system___lockmem
16948     98 01 00 FF 
1694c     A3 94 06 F6 | 	mov	arg02, ##@LR__6061
16950     00 92 06 F6 | 	mov	arg01, #0
16954     00 96 06 F6 | 	mov	arg03, #0
16958     70 ED B0 FD | 	call	#__system___basic_print_string
1695c     00 92 06 F6 | 	mov	arg01, #0
16960     F8 35 B1 FD | 	call	#__system___getiolock_0622
16964     3D 01 68 FC | 	wrlong	#0, result1
16968     27 92 06 F6 | 	mov	arg01, #39
1696c     00 94 06 F6 | 	mov	arg02, #0
16970     60 A3 B0 FD | 	call	#_printerror
16974     A0 01 90 FD | 	jmp	#LR__1934
16978                 | LR__1930
16978                 | ' if numpar=0 then 
16978     00 A8 0E F2 | 	cmp	local02, #0 wz
1697c     8C 00 90 5D |  if_ne	jmp	#LR__1931
16980     00 C0 1B FF 
16984     00 A8 06 F6 | 	mov	local02, ##931135488
16988     53 00 00 FF 
1698c     FC 64 06 F1 | 	add	objptr, ##42748
16990     32 93 02 FB | 	rdlong	arg01, objptr
16994     53 00 00 FF 
16998     FC 64 86 F1 | 	sub	objptr, ##42748
1699c     49 93 52 F6 | 	abs	arg01, arg01 wc
169a0     1F AA C6 C9 |  if_b	decod	local03, #31
169a4     00 AA 06 36 |  if_ae	mov	local03, #0
169a8     F8 02 B1 FD | 	call	#__system___float_fromuns
169ac     55 7B 62 F5 | 	xor	result1, local03
169b0     3D 93 02 F6 | 	mov	arg01, result1
169b4     FF 7F 23 FF 
169b8     00 94 06 F6 | 	mov	arg02, ##1191181824
169bc     EC 08 B1 FD | 	call	#__system___float_div
169c0     3D 95 02 F6 | 	mov	arg02, result1
169c4     54 93 02 F6 | 	mov	arg01, local02
169c8     0C 03 B1 FD | 	call	#__system___float_add
169cc     3D AD 02 F6 | 	mov	local04, result1
169d0                 | '   fpad=(1.0/65536.0)+padx(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
169d0     56 93 02 F6 | 	mov	arg01, local04
169d4     1F 92 06 F4 | 	bitl	arg01, #31
169d8     89 41 1D FF 
169dc     6F 94 06 F6 | 	mov	arg02, ##981668463
169e0     01 96 06 F6 | 	mov	arg03, #1
169e4     F4 0A B1 FD | 	call	#__system___float_cmp
169e8     00 7A 56 F2 | 	cmps	result1, #0 wc
169ec     00 AC 06 C6 |  if_b	mov	local04, #0
169f0     E7 AC 62 FC | 	wrlong	local04, fp
169f4     08 CE 05 F1 | 	add	fp, #8
169f8     E7 3C 68 FC | 	wrlong	#30, fp
169fc     08 CE 85 F1 | 	sub	fp, #8
16a00     E7 92 02 F6 | 	mov	arg01, fp
16a04     F8 6C BF FD | 	call	#_push
16a08                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16a08     0C 01 90 FD | 	jmp	#LR__1934
16a0c                 | LR__1931
16a0c     60 6C BF FD | 	call	#_pop
16a10     E7 7A 62 FC | 	wrlong	result1, fp
16a14     04 CE 05 F1 | 	add	fp, #4
16a18     E7 7C 62 FC | 	wrlong	result2, fp
16a1c     04 CE 05 F1 | 	add	fp, #4
16a20     E7 7E 62 FC | 	wrlong	result3, fp
16a24                 | ' t1=pop()
16a24                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16a24     08 CE 85 F1 | 	sub	fp, #8
16a28     1C 7E 0E F2 | 	cmp	result3, #28 wz
16a2c     08 CE 05 51 |  if_ne	add	fp, #8
16a30     E7 A6 02 5B |  if_ne	rdlong	local01, fp
16a34     08 CE 85 51 |  if_ne	sub	fp, #8
16a38     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
16a3c     CC 00 90 5D |  if_ne	jmp	#LR__1933
16a40     E7 AC 02 FB | 	rdlong	local04, fp
16a44     54 00 00 FF 
16a48     E4 64 06 F1 | 	add	objptr, ##43236
16a4c     32 AD 62 FC | 	wrlong	local04, objptr
16a50                 | '   q=t1.result.uresult
16a50                 | '   if q<7 then 
16a50     54 00 00 FF 
16a54     E4 64 86 F1 | 	sub	objptr, ##43236
16a58     07 AC 56 F2 | 	cmps	local04, #7 wc
16a5c     9C 00 90 3D |  if_ae	jmp	#LR__1932
16a60     00 C0 1B FF 
16a64     00 AC 06 F6 | 	mov	local04, ##931135488
16a68     54 00 00 FF 
16a6c     E4 64 06 F1 | 	add	objptr, ##43236
16a70     32 A9 02 FB | 	rdlong	local02, objptr
16a74     02 A8 66 F0 | 	shl	local02, #2
16a78     E8 65 86 F1 | 	sub	objptr, #488
16a7c     32 A9 02 F1 | 	add	local02, objptr
16a80     54 93 02 FB | 	rdlong	arg01, local02
16a84     53 00 00 FF 
16a88     FC 64 86 F1 | 	sub	objptr, ##42748
16a8c     49 93 52 F6 | 	abs	arg01, arg01 wc
16a90     1F AA C6 C9 |  if_b	decod	local03, #31
16a94     00 AA 06 36 |  if_ae	mov	local03, #0
16a98     08 02 B1 FD | 	call	#__system___float_fromuns
16a9c     55 7B 62 F5 | 	xor	result1, local03
16aa0     3D 93 02 F6 | 	mov	arg01, result1
16aa4     FF 7F 23 FF 
16aa8     00 94 06 F6 | 	mov	arg02, ##1191181824
16aac     FC 07 B1 FD | 	call	#__system___float_div
16ab0     3D 95 02 F6 | 	mov	arg02, result1
16ab4     56 93 02 F6 | 	mov	arg01, local04
16ab8     1C 02 B1 FD | 	call	#__system___float_add
16abc     3D AD 02 F6 | 	mov	local04, result1
16ac0                 | '     fpad=(1.0/65536.0)+padx(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16ac0     56 93 02 F6 | 	mov	arg01, local04
16ac4     1F 92 06 F4 | 	bitl	arg01, #31
16ac8     89 41 1D FF 
16acc     6F 94 06 F6 | 	mov	arg02, ##981668463
16ad0     01 96 06 F6 | 	mov	arg03, #1
16ad4     04 0A B1 FD | 	call	#__system___float_cmp
16ad8     00 7A 56 F2 | 	cmps	result1, #0 wc
16adc     00 AC 06 C6 |  if_b	mov	local04, #0
16ae0     E7 AC 62 FC | 	wrlong	local04, fp
16ae4     08 CE 05 F1 | 	add	fp, #8
16ae8     E7 3C 68 FC | 	wrlong	#30, fp
16aec     08 CE 85 F1 | 	sub	fp, #8
16af0     E7 92 02 F6 | 	mov	arg01, fp
16af4     08 6C BF FD | 	call	#_push
16af8                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16af8     1C 00 90 FD | 	jmp	#LR__1934
16afc                 | LR__1932
16afc     29 92 06 F6 | 	mov	arg01, #41
16b00     00 94 06 F6 | 	mov	arg02, #0
16b04     CC A1 B0 FD | 	call	#_printerror
16b08                 | '      printerror(41) : return
16b08     0C 00 90 FD | 	jmp	#LR__1934
16b0c                 | LR__1933
16b0c     29 92 06 F6 | 	mov	arg01, #41
16b10     00 94 06 F6 | 	mov	arg02, #0
16b14     BC A1 B0 FD | 	call	#_printerror
16b18                 | LR__1934
16b18     E7 F0 03 F6 | 	mov	ptra, fp
16b1c     F2 00 A0 FD | 	call	#popregs_
16b20                 | _do_padx_ret
16b20     2D 00 64 FD | 	ret
16b24                 | 
16b24                 | ' 
16b24                 | ' ' ------------------ pady
16b24                 | ' 
16b24                 | ' sub do_pady
16b24                 | _do_pady
16b24     04 CA 05 F6 | 	mov	COUNT_, #4
16b28     E8 00 A0 FD | 	call	#pushregs_
16b2c     14 F0 07 F1 | 	add	ptra, #20
16b30     4C 00 00 FF 
16b34     24 64 06 F1 | 	add	objptr, ##38948
16b38     32 A7 02 FB | 	rdlong	local01, objptr
16b3c     53 97 02 F6 | 	mov	arg03, local01
16b40     01 96 66 F0 | 	shl	arg03, #1
16b44     53 97 02 F1 | 	add	arg03, local01
16b48     02 96 66 F0 | 	shl	arg03, #2
16b4c     03 00 00 FF 
16b50     04 64 86 F1 | 	sub	objptr, ##1540
16b54     32 97 02 F1 | 	add	arg03, objptr
16b58     4B A9 02 FB | 	rdlong	local02, arg03
16b5c                 | ' 
16b5c                 | ' numpar=compiledline(lineptr_e).result.uresult
16b5c                 | ' if numpar>1 then print "pady: "; : printerror(39) : return
16b5c     02 A8 16 F2 | 	cmp	local02, #2 wc
16b60     49 00 00 FF 
16b64     20 64 86 F1 | 	sub	objptr, ##37408
16b68     40 00 90 CD |  if_b	jmp	#LR__1940
16b6c     00 92 06 F6 | 	mov	arg01, #0
16b70     E8 33 B1 FD | 	call	#__system___getiolock_0622
16b74     3D 93 02 F6 | 	mov	arg01, result1
16b78     5C DE B0 FD | 	call	#__system___lockmem
16b7c     98 01 00 FF 
16b80     AA 94 06 F6 | 	mov	arg02, ##@LR__6062
16b84     00 92 06 F6 | 	mov	arg01, #0
16b88     00 96 06 F6 | 	mov	arg03, #0
16b8c     3C EB B0 FD | 	call	#__system___basic_print_string
16b90     00 92 06 F6 | 	mov	arg01, #0
16b94     C4 33 B1 FD | 	call	#__system___getiolock_0622
16b98     3D 01 68 FC | 	wrlong	#0, result1
16b9c     27 92 06 F6 | 	mov	arg01, #39
16ba0     00 94 06 F6 | 	mov	arg02, #0
16ba4     2C A1 B0 FD | 	call	#_printerror
16ba8     A0 01 90 FD | 	jmp	#LR__1944
16bac                 | LR__1940
16bac                 | ' if numpar=0 then 
16bac     00 A8 0E F2 | 	cmp	local02, #0 wz
16bb0     8C 00 90 5D |  if_ne	jmp	#LR__1941
16bb4     00 C0 1B FF 
16bb8     00 A8 06 F6 | 	mov	local02, ##931135488
16bbc     53 00 00 FF 
16bc0     18 65 06 F1 | 	add	objptr, ##42776
16bc4     32 93 02 FB | 	rdlong	arg01, objptr
16bc8     53 00 00 FF 
16bcc     18 65 86 F1 | 	sub	objptr, ##42776
16bd0     49 93 52 F6 | 	abs	arg01, arg01 wc
16bd4     1F AA C6 C9 |  if_b	decod	local03, #31
16bd8     00 AA 06 36 |  if_ae	mov	local03, #0
16bdc     C4 00 B1 FD | 	call	#__system___float_fromuns
16be0     55 7B 62 F5 | 	xor	result1, local03
16be4     3D 93 02 F6 | 	mov	arg01, result1
16be8     FF 7F 23 FF 
16bec     00 94 06 F6 | 	mov	arg02, ##1191181824
16bf0     B8 06 B1 FD | 	call	#__system___float_div
16bf4     3D 95 02 F6 | 	mov	arg02, result1
16bf8     54 93 02 F6 | 	mov	arg01, local02
16bfc     D8 00 B1 FD | 	call	#__system___float_add
16c00     3D AD 02 F6 | 	mov	local04, result1
16c04                 | '   fpad=(1.0/65536.0)+pady(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16c04     56 93 02 F6 | 	mov	arg01, local04
16c08     1F 92 06 F4 | 	bitl	arg01, #31
16c0c     89 41 1D FF 
16c10     6F 94 06 F6 | 	mov	arg02, ##981668463
16c14     01 96 06 F6 | 	mov	arg03, #1
16c18     C0 08 B1 FD | 	call	#__system___float_cmp
16c1c     00 7A 56 F2 | 	cmps	result1, #0 wc
16c20     00 AC 06 C6 |  if_b	mov	local04, #0
16c24     E7 AC 62 FC | 	wrlong	local04, fp
16c28     08 CE 05 F1 | 	add	fp, #8
16c2c     E7 3C 68 FC | 	wrlong	#30, fp
16c30     08 CE 85 F1 | 	sub	fp, #8
16c34     E7 92 02 F6 | 	mov	arg01, fp
16c38     C4 6A BF FD | 	call	#_push
16c3c                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16c3c     0C 01 90 FD | 	jmp	#LR__1944
16c40                 | LR__1941
16c40     2C 6A BF FD | 	call	#_pop
16c44     E7 7A 62 FC | 	wrlong	result1, fp
16c48     04 CE 05 F1 | 	add	fp, #4
16c4c     E7 7C 62 FC | 	wrlong	result2, fp
16c50     04 CE 05 F1 | 	add	fp, #4
16c54     E7 7E 62 FC | 	wrlong	result3, fp
16c58                 | ' t1=pop()
16c58                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16c58     08 CE 85 F1 | 	sub	fp, #8
16c5c     1C 7E 0E F2 | 	cmp	result3, #28 wz
16c60     08 CE 05 51 |  if_ne	add	fp, #8
16c64     E7 A6 02 5B |  if_ne	rdlong	local01, fp
16c68     08 CE 85 51 |  if_ne	sub	fp, #8
16c6c     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
16c70     CC 00 90 5D |  if_ne	jmp	#LR__1943
16c74     E7 AC 02 FB | 	rdlong	local04, fp
16c78     54 00 00 FF 
16c7c     E4 64 06 F1 | 	add	objptr, ##43236
16c80     32 AD 62 FC | 	wrlong	local04, objptr
16c84                 | '   q=t1.result.uresult
16c84                 | '   if q<7 then 
16c84     54 00 00 FF 
16c88     E4 64 86 F1 | 	sub	objptr, ##43236
16c8c     07 AC 56 F2 | 	cmps	local04, #7 wc
16c90     9C 00 90 3D |  if_ae	jmp	#LR__1942
16c94     00 C0 1B FF 
16c98     00 AC 06 F6 | 	mov	local04, ##931135488
16c9c     54 00 00 FF 
16ca0     E4 64 06 F1 | 	add	objptr, ##43236
16ca4     32 A9 02 FB | 	rdlong	local02, objptr
16ca8     02 A8 66 F0 | 	shl	local02, #2
16cac     CC 65 86 F1 | 	sub	objptr, #460
16cb0     32 A9 02 F1 | 	add	local02, objptr
16cb4     54 93 02 FB | 	rdlong	arg01, local02
16cb8     53 00 00 FF 
16cbc     18 65 86 F1 | 	sub	objptr, ##42776
16cc0     49 93 52 F6 | 	abs	arg01, arg01 wc
16cc4     1F AA C6 C9 |  if_b	decod	local03, #31
16cc8     00 AA 06 36 |  if_ae	mov	local03, #0
16ccc     D4 FF B0 FD | 	call	#__system___float_fromuns
16cd0     55 7B 62 F5 | 	xor	result1, local03
16cd4     3D 93 02 F6 | 	mov	arg01, result1
16cd8     FF 7F 23 FF 
16cdc     00 94 06 F6 | 	mov	arg02, ##1191181824
16ce0     C8 05 B1 FD | 	call	#__system___float_div
16ce4     3D 95 02 F6 | 	mov	arg02, result1
16ce8     56 93 02 F6 | 	mov	arg01, local04
16cec     E8 FF B0 FD | 	call	#__system___float_add
16cf0     3D AD 02 F6 | 	mov	local04, result1
16cf4                 | '     fpad=(1.0/65536.0)+pady(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16cf4     56 93 02 F6 | 	mov	arg01, local04
16cf8     1F 92 06 F4 | 	bitl	arg01, #31
16cfc     89 41 1D FF 
16d00     6F 94 06 F6 | 	mov	arg02, ##981668463
16d04     01 96 06 F6 | 	mov	arg03, #1
16d08     D0 07 B1 FD | 	call	#__system___float_cmp
16d0c     00 7A 56 F2 | 	cmps	result1, #0 wc
16d10     00 AC 06 C6 |  if_b	mov	local04, #0
16d14     E7 AC 62 FC | 	wrlong	local04, fp
16d18     08 CE 05 F1 | 	add	fp, #8
16d1c     E7 3C 68 FC | 	wrlong	#30, fp
16d20     08 CE 85 F1 | 	sub	fp, #8
16d24     E7 92 02 F6 | 	mov	arg01, fp
16d28     D4 69 BF FD | 	call	#_push
16d2c                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16d2c     1C 00 90 FD | 	jmp	#LR__1944
16d30                 | LR__1942
16d30     29 92 06 F6 | 	mov	arg01, #41
16d34     00 94 06 F6 | 	mov	arg02, #0
16d38     98 9F B0 FD | 	call	#_printerror
16d3c                 | '      printerror(41) : return
16d3c     0C 00 90 FD | 	jmp	#LR__1944
16d40                 | LR__1943
16d40     29 92 06 F6 | 	mov	arg01, #41
16d44     00 94 06 F6 | 	mov	arg02, #0
16d48     88 9F B0 FD | 	call	#_printerror
16d4c                 | LR__1944
16d4c     E7 F0 03 F6 | 	mov	ptra, fp
16d50     F2 00 A0 FD | 	call	#popregs_
16d54                 | _do_pady_ret
16d54     2D 00 64 FD | 	ret
16d58                 | 
16d58                 | ' 
16d58                 | ' ' ------------------ padz
16d58                 | ' 
16d58                 | ' sub do_padz
16d58                 | _do_padz
16d58     04 CA 05 F6 | 	mov	COUNT_, #4
16d5c     E8 00 A0 FD | 	call	#pushregs_
16d60     14 F0 07 F1 | 	add	ptra, #20
16d64     4C 00 00 FF 
16d68     24 64 06 F1 | 	add	objptr, ##38948
16d6c     32 A7 02 FB | 	rdlong	local01, objptr
16d70     53 97 02 F6 | 	mov	arg03, local01
16d74     01 96 66 F0 | 	shl	arg03, #1
16d78     53 97 02 F1 | 	add	arg03, local01
16d7c     02 96 66 F0 | 	shl	arg03, #2
16d80     03 00 00 FF 
16d84     04 64 86 F1 | 	sub	objptr, ##1540
16d88     32 97 02 F1 | 	add	arg03, objptr
16d8c     4B A9 02 FB | 	rdlong	local02, arg03
16d90                 | ' 
16d90                 | ' numpar=compiledline(lineptr_e).result.uresult
16d90                 | ' if numpar>1 then print "padz: "; : printerror(39) : return
16d90     02 A8 16 F2 | 	cmp	local02, #2 wc
16d94     49 00 00 FF 
16d98     20 64 86 F1 | 	sub	objptr, ##37408
16d9c     40 00 90 CD |  if_b	jmp	#LR__1950
16da0     00 92 06 F6 | 	mov	arg01, #0
16da4     B4 31 B1 FD | 	call	#__system___getiolock_0622
16da8     3D 93 02 F6 | 	mov	arg01, result1
16dac     28 DC B0 FD | 	call	#__system___lockmem
16db0     98 01 00 FF 
16db4     B1 94 06 F6 | 	mov	arg02, ##@LR__6063
16db8     00 92 06 F6 | 	mov	arg01, #0
16dbc     00 96 06 F6 | 	mov	arg03, #0
16dc0     08 E9 B0 FD | 	call	#__system___basic_print_string
16dc4     00 92 06 F6 | 	mov	arg01, #0
16dc8     90 31 B1 FD | 	call	#__system___getiolock_0622
16dcc     3D 01 68 FC | 	wrlong	#0, result1
16dd0     27 92 06 F6 | 	mov	arg01, #39
16dd4     00 94 06 F6 | 	mov	arg02, #0
16dd8     F8 9E B0 FD | 	call	#_printerror
16ddc     A0 01 90 FD | 	jmp	#LR__1954
16de0                 | LR__1950
16de0                 | ' if numpar=0 then 
16de0     00 A8 0E F2 | 	cmp	local02, #0 wz
16de4     8C 00 90 5D |  if_ne	jmp	#LR__1951
16de8     00 C0 1B FF 
16dec     00 A8 06 F6 | 	mov	local02, ##931135488
16df0     53 00 00 FF 
16df4     34 65 06 F1 | 	add	objptr, ##42804
16df8     32 93 02 FB | 	rdlong	arg01, objptr
16dfc     53 00 00 FF 
16e00     34 65 86 F1 | 	sub	objptr, ##42804
16e04     49 93 52 F6 | 	abs	arg01, arg01 wc
16e08     1F AA C6 C9 |  if_b	decod	local03, #31
16e0c     00 AA 06 36 |  if_ae	mov	local03, #0
16e10     90 FE B0 FD | 	call	#__system___float_fromuns
16e14     55 7B 62 F5 | 	xor	result1, local03
16e18     3D 93 02 F6 | 	mov	arg01, result1
16e1c     FF 7F 23 FF 
16e20     00 94 06 F6 | 	mov	arg02, ##1191181824
16e24     84 04 B1 FD | 	call	#__system___float_div
16e28     3D 95 02 F6 | 	mov	arg02, result1
16e2c     54 93 02 F6 | 	mov	arg01, local02
16e30     A4 FE B0 FD | 	call	#__system___float_add
16e34     3D AD 02 F6 | 	mov	local04, result1
16e38                 | '   fpad=(1.0/65536.0)+padz(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16e38     56 93 02 F6 | 	mov	arg01, local04
16e3c     1F 92 06 F4 | 	bitl	arg01, #31
16e40     89 41 1D FF 
16e44     6F 94 06 F6 | 	mov	arg02, ##981668463
16e48     01 96 06 F6 | 	mov	arg03, #1
16e4c     8C 06 B1 FD | 	call	#__system___float_cmp
16e50     00 7A 56 F2 | 	cmps	result1, #0 wc
16e54     00 AC 06 C6 |  if_b	mov	local04, #0
16e58     E7 AC 62 FC | 	wrlong	local04, fp
16e5c     08 CE 05 F1 | 	add	fp, #8
16e60     E7 3C 68 FC | 	wrlong	#30, fp
16e64     08 CE 85 F1 | 	sub	fp, #8
16e68     E7 92 02 F6 | 	mov	arg01, fp
16e6c     90 68 BF FD | 	call	#_push
16e70                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16e70     0C 01 90 FD | 	jmp	#LR__1954
16e74                 | LR__1951
16e74     F8 67 BF FD | 	call	#_pop
16e78     E7 7A 62 FC | 	wrlong	result1, fp
16e7c     04 CE 05 F1 | 	add	fp, #4
16e80     E7 7C 62 FC | 	wrlong	result2, fp
16e84     04 CE 05 F1 | 	add	fp, #4
16e88     E7 7E 62 FC | 	wrlong	result3, fp
16e8c                 | ' t1=pop()
16e8c                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16e8c     08 CE 85 F1 | 	sub	fp, #8
16e90     1C 7E 0E F2 | 	cmp	result3, #28 wz
16e94     08 CE 05 51 |  if_ne	add	fp, #8
16e98     E7 A6 02 5B |  if_ne	rdlong	local01, fp
16e9c     08 CE 85 51 |  if_ne	sub	fp, #8
16ea0     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
16ea4     CC 00 90 5D |  if_ne	jmp	#LR__1953
16ea8     E7 AC 02 FB | 	rdlong	local04, fp
16eac     54 00 00 FF 
16eb0     E4 64 06 F1 | 	add	objptr, ##43236
16eb4     32 AD 62 FC | 	wrlong	local04, objptr
16eb8                 | '   q=t1.result.uresult
16eb8                 | '   if q<7 then 
16eb8     54 00 00 FF 
16ebc     E4 64 86 F1 | 	sub	objptr, ##43236
16ec0     07 AC 56 F2 | 	cmps	local04, #7 wc
16ec4     9C 00 90 3D |  if_ae	jmp	#LR__1952
16ec8     00 C0 1B FF 
16ecc     00 AC 06 F6 | 	mov	local04, ##931135488
16ed0     54 00 00 FF 
16ed4     E4 64 06 F1 | 	add	objptr, ##43236
16ed8     32 A9 02 FB | 	rdlong	local02, objptr
16edc     02 A8 66 F0 | 	shl	local02, #2
16ee0     B0 65 86 F1 | 	sub	objptr, #432
16ee4     32 A9 02 F1 | 	add	local02, objptr
16ee8     54 93 02 FB | 	rdlong	arg01, local02
16eec     53 00 00 FF 
16ef0     34 65 86 F1 | 	sub	objptr, ##42804
16ef4     49 93 52 F6 | 	abs	arg01, arg01 wc
16ef8     1F AA C6 C9 |  if_b	decod	local03, #31
16efc     00 AA 06 36 |  if_ae	mov	local03, #0
16f00     A0 FD B0 FD | 	call	#__system___float_fromuns
16f04     55 7B 62 F5 | 	xor	result1, local03
16f08     3D 93 02 F6 | 	mov	arg01, result1
16f0c     FF 7F 23 FF 
16f10     00 94 06 F6 | 	mov	arg02, ##1191181824
16f14     94 03 B1 FD | 	call	#__system___float_div
16f18     3D 95 02 F6 | 	mov	arg02, result1
16f1c     56 93 02 F6 | 	mov	arg01, local04
16f20     B4 FD B0 FD | 	call	#__system___float_add
16f24     3D AD 02 F6 | 	mov	local04, result1
16f28                 | '     fpad=(1.0/65536.0)+padz(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16f28     56 93 02 F6 | 	mov	arg01, local04
16f2c     1F 92 06 F4 | 	bitl	arg01, #31
16f30     89 41 1D FF 
16f34     6F 94 06 F6 | 	mov	arg02, ##981668463
16f38     01 96 06 F6 | 	mov	arg03, #1
16f3c     9C 05 B1 FD | 	call	#__system___float_cmp
16f40     00 7A 56 F2 | 	cmps	result1, #0 wc
16f44     00 AC 06 C6 |  if_b	mov	local04, #0
16f48     E7 AC 62 FC | 	wrlong	local04, fp
16f4c     08 CE 05 F1 | 	add	fp, #8
16f50     E7 3C 68 FC | 	wrlong	#30, fp
16f54     08 CE 85 F1 | 	sub	fp, #8
16f58     E7 92 02 F6 | 	mov	arg01, fp
16f5c     A0 67 BF FD | 	call	#_push
16f60                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16f60     1C 00 90 FD | 	jmp	#LR__1954
16f64                 | LR__1952
16f64     29 92 06 F6 | 	mov	arg01, #41
16f68     00 94 06 F6 | 	mov	arg02, #0
16f6c     64 9D B0 FD | 	call	#_printerror
16f70                 | '      printerror(41) : return
16f70     0C 00 90 FD | 	jmp	#LR__1954
16f74                 | LR__1953
16f74     29 92 06 F6 | 	mov	arg01, #41
16f78     00 94 06 F6 | 	mov	arg02, #0
16f7c     54 9D B0 FD | 	call	#_printerror
16f80                 | LR__1954
16f80     E7 F0 03 F6 | 	mov	ptra, fp
16f84     F2 00 A0 FD | 	call	#popregs_
16f88                 | _do_padz_ret
16f88     2D 00 64 FD | 	ret
16f8c                 | 
16f8c                 | ' 
16f8c                 | ' '-------------------- paper
16f8c                 | ' 
16f8c                 | ' sub do_paper
16f8c                 | _do_paper
16f8c     03 CA 05 F6 | 	mov	COUNT_, #3
16f90     E8 00 A0 FD | 	call	#pushregs_
16f94     D8 66 BF FD | 	call	#_pop
16f98     3D A7 02 F6 | 	mov	local01, result1
16f9c     3E A9 02 F6 | 	mov	local02, result2
16fa0     3F AB 02 F6 | 	mov	local03, result3
16fa4                 | ' t1=pop() 
16fa4                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
16fa4     1E AA 0E F2 | 	cmp	local03, #30 wz
16fa8     10 00 90 5D |  if_ne	jmp	#LR__1960
16fac     53 93 02 F6 | 	mov	arg01, local01
16fb0     00 94 06 F6 | 	mov	arg02, #0
16fb4     B8 05 B1 FD | 	call	#__system___float_tointeger
16fb8     3D A7 02 F6 | 	mov	local01, result1
16fbc                 | LR__1960
16fbc                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
16fbc     1F AA 0E F2 | 	cmp	local03, #31 wz
16fc0     18 00 90 5D |  if_ne	jmp	#LR__1961
16fc4     53 93 02 F6 | 	mov	arg01, local01
16fc8     F8 08 B1 FD | 	call	#__system____builtin_atof
16fcc     3D 93 02 F6 | 	mov	arg01, result1
16fd0     00 94 06 F6 | 	mov	arg02, #0
16fd4     98 05 B1 FD | 	call	#__system___float_tointeger
16fd8     3D A7 02 F6 | 	mov	local01, result1
16fdc                 | LR__1961
16fdc     38 00 00 FF 
16fe0     DC 65 06 F1 | 	add	objptr, ##29148
16fe4     32 A7 62 FC | 	wrlong	local01, objptr
16fe8     04 64 06 F1 | 	add	objptr, #4
16fec     32 93 02 FB | 	rdlong	arg01, objptr
16ff0                 | ' 
16ff0                 | ' write_color:=ff
16ff0     38 00 00 FF 
16ff4     9F 65 86 F1 | 	sub	objptr, ##29087
16ff8     32 93 62 FC | 	wrlong	arg01, objptr
16ffc                 | ' write_background:=bb
16ffc     04 64 06 F1 | 	add	objptr, #4
17000     32 A7 62 FC | 	wrlong	local01, objptr
17004     45 64 86 F1 | 	sub	objptr, #69
17008     E7 F0 03 F6 | 	mov	ptra, fp
1700c     F2 00 A0 FD | 	call	#popregs_
17010                 | _do_paper_ret
17010     2D 00 64 FD | 	ret
17014                 | 
17014                 | ' 
17014                 | ' '-------------------- peek
17014                 | ' 
17014                 | ' sub do_peek
17014                 | _do_peek
17014     01 CA 05 F6 | 	mov	COUNT_, #1
17018     E8 00 A0 FD | 	call	#pushregs_
1701c     14 F0 07 F1 | 	add	ptra, #20
17020     4C 66 BF FD | 	call	#_pop
17024     E7 7A 62 FC | 	wrlong	result1, fp
17028     04 CE 05 F1 | 	add	fp, #4
1702c     E7 7C 62 FC | 	wrlong	result2, fp
17030     04 CE 05 F1 | 	add	fp, #4
17034     E7 7E 62 FC | 	wrlong	result3, fp
17038     08 CE 85 F1 | 	sub	fp, #8
1703c     E7 92 02 F6 | 	mov	arg01, fp
17040     08 68 BF FD | 	call	#_converttoint
17044     3D 93 02 F6 | 	mov	arg01, result1
17048                 | ' 
17048                 | ' t1=pop()
17048                 | ' a=converttoint(t1)
17048                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
17048     00 04 00 FF 
1704c     00 92 16 F2 | 	cmp	arg01, ##524288 wc
17050     49 A7 C2 CA |  if_b	rdbyte	local01, arg01
17054     08 00 90 CD |  if_b	jmp	#LR__1970
17058     EC 9E B0 FD | 	call	#_pspeek
1705c     3D A7 E2 F8 | 	getbyte	local01, result1, #0
17060                 | LR__1970
17060     08 CE 05 F1 | 	add	fp, #8
17064     E7 3A 68 FC | 	wrlong	#29, fp
17068     08 CE 85 F1 | 	sub	fp, #8
1706c     E7 A6 62 FC | 	wrlong	local01, fp
17070     E7 92 02 F6 | 	mov	arg01, fp
17074     88 66 BF FD | 	call	#_push
17078     E7 F0 03 F6 | 	mov	ptra, fp
1707c     F2 00 A0 FD | 	call	#popregs_
17080                 | _do_peek_ret
17080     2D 00 64 FD | 	ret
17084                 | 
17084                 | ' 
17084                 | ' '-------------------- pinfloat
17084                 | ' 
17084                 | ' sub do_pinfloat
17084                 | _do_pinfloat
17084     00 CA 05 F6 | 	mov	COUNT_, #0
17088     E8 00 A0 FD | 	call	#pushregs_
1708c     0C F0 07 F1 | 	add	ptra, #12
17090     DC 65 BF FD | 	call	#_pop
17094     E7 7A 62 FC | 	wrlong	result1, fp
17098     04 CE 05 F1 | 	add	fp, #4
1709c     E7 7C 62 FC | 	wrlong	result2, fp
170a0     04 CE 05 F1 | 	add	fp, #4
170a4     E7 7E 62 FC | 	wrlong	result3, fp
170a8     08 CE 85 F1 | 	sub	fp, #8
170ac     E7 92 02 F6 | 	mov	arg01, fp
170b0     98 67 BF FD | 	call	#_converttoint
170b4     50 7A 62 FD | 	fltl	result1
170b8     E7 F0 03 F6 | 	mov	ptra, fp
170bc     F2 00 A0 FD | 	call	#popregs_
170c0                 | _do_pinfloat_ret
170c0     2D 00 64 FD | 	ret
170c4                 | 
170c4                 | ' 
170c4                 | ' '-------------------- pinhi
170c4                 | ' 
170c4                 | ' sub do_pinhi
170c4                 | _do_pinhi
170c4     00 CA 05 F6 | 	mov	COUNT_, #0
170c8     E8 00 A0 FD | 	call	#pushregs_
170cc     0C F0 07 F1 | 	add	ptra, #12
170d0     9C 65 BF FD | 	call	#_pop
170d4     E7 7A 62 FC | 	wrlong	result1, fp
170d8     04 CE 05 F1 | 	add	fp, #4
170dc     E7 7C 62 FC | 	wrlong	result2, fp
170e0     04 CE 05 F1 | 	add	fp, #4
170e4     E7 7E 62 FC | 	wrlong	result3, fp
170e8     08 CE 85 F1 | 	sub	fp, #8
170ec     E7 92 02 F6 | 	mov	arg01, fp
170f0     58 67 BF FD | 	call	#_converttoint
170f4     59 7A 62 FD | 	drvh	result1
170f8     E7 F0 03 F6 | 	mov	ptra, fp
170fc     F2 00 A0 FD | 	call	#popregs_
17100                 | _do_pinhi_ret
17100     2D 00 64 FD | 	ret
17104                 | 
17104                 | ' 
17104                 | ' '-------------------- pinlo
17104                 | ' 
17104                 | ' sub do_pinlo
17104                 | _do_pinlo
17104     00 CA 05 F6 | 	mov	COUNT_, #0
17108     E8 00 A0 FD | 	call	#pushregs_
1710c     0C F0 07 F1 | 	add	ptra, #12
17110     5C 65 BF FD | 	call	#_pop
17114     E7 7A 62 FC | 	wrlong	result1, fp
17118     04 CE 05 F1 | 	add	fp, #4
1711c     E7 7C 62 FC | 	wrlong	result2, fp
17120     04 CE 05 F1 | 	add	fp, #4
17124     E7 7E 62 FC | 	wrlong	result3, fp
17128     08 CE 85 F1 | 	sub	fp, #8
1712c     E7 92 02 F6 | 	mov	arg01, fp
17130     18 67 BF FD | 	call	#_converttoint
17134     58 7A 62 FD | 	drvl	result1
17138     E7 F0 03 F6 | 	mov	ptra, fp
1713c     F2 00 A0 FD | 	call	#popregs_
17140                 | _do_pinlo_ret
17140     2D 00 64 FD | 	ret
17144                 | 
17144                 | ' 
17144                 | ' '-------------------- pinread
17144                 | ' 
17144                 | ' sub do_pinread
17144                 | _do_pinread
17144     00 CA 05 F6 | 	mov	COUNT_, #0
17148     E8 00 A0 FD | 	call	#pushregs_
1714c     0C F0 07 F1 | 	add	ptra, #12
17150     1C 65 BF FD | 	call	#_pop
17154     E7 7A 62 FC | 	wrlong	result1, fp
17158     04 CE 05 F1 | 	add	fp, #4
1715c     E7 7C 62 FC | 	wrlong	result2, fp
17160     04 CE 05 F1 | 	add	fp, #4
17164     E7 7E 62 FC | 	wrlong	result3, fp
17168     08 CE 85 F1 | 	sub	fp, #8
1716c     E7 92 02 F6 | 	mov	arg01, fp
17170     D8 66 BF FD | 	call	#_converttoint
17174     3D 93 02 F6 | 	mov	arg01, result1
17178     20 92 CE F7 | 	test	arg01, #32 wz
1717c     FF 7B 02 56 |  if_ne	mov	result1, inb
17180     FE 7B 02 A6 |  if_e	mov	result1, ina
17184     49 7B 42 F0 | 	shr	result1, arg01
17188     06 92 46 F0 | 	shr	arg01, #6
1718c     49 7B 42 F7 | 	zerox	result1, arg01
17190     54 00 00 FF 
17194     EC 64 06 F1 | 	add	objptr, ##43244
17198     32 7B 62 FC | 	wrlong	result1, objptr
1719c     54 00 00 FF 
171a0     EC 64 86 F1 | 	sub	objptr, ##43244
171a4     08 CE 05 F1 | 	add	fp, #8
171a8     E7 3A 68 FC | 	wrlong	#29, fp
171ac     08 CE 85 F1 | 	sub	fp, #8
171b0     E7 08 68 FC | 	wrlong	#4, fp
171b4     E7 92 02 F6 | 	mov	arg01, fp
171b8     44 65 BF FD | 	call	#_push
171bc     E7 F0 03 F6 | 	mov	ptra, fp
171c0     F2 00 A0 FD | 	call	#popregs_
171c4                 | _do_pinread_ret
171c4     2D 00 64 FD | 	ret
171c8                 | 
171c8                 | ' 
171c8                 | ' '-------------------- pinstart
171c8                 | ' 
171c8                 | ' sub do_pinstart
171c8                 | _do_pinstart
171c8     03 CA 05 F6 | 	mov	COUNT_, #3
171cc     E8 00 A0 FD | 	call	#pushregs_
171d0     30 F0 07 F1 | 	add	ptra, #48
171d4     98 64 BF FD | 	call	#_pop
171d8     3D 97 02 F6 | 	mov	arg03, result1
171dc     3E 95 02 F6 | 	mov	arg02, result2
171e0     3F 99 02 F6 | 	mov	arg04, result3
171e4     E7 96 62 FC | 	wrlong	arg03, fp
171e8     04 CE 05 F1 | 	add	fp, #4
171ec     E7 94 62 FC | 	wrlong	arg02, fp
171f0     04 CE 05 F1 | 	add	fp, #4
171f4     E7 98 62 FC | 	wrlong	arg04, fp
171f8     08 CE 85 F1 | 	sub	fp, #8
171fc     70 64 BF FD | 	call	#_pop
17200     3D 97 02 F6 | 	mov	arg03, result1
17204     3E 95 02 F6 | 	mov	arg02, result2
17208     3F 99 02 F6 | 	mov	arg04, result3
1720c     0C CE 05 F1 | 	add	fp, #12
17210     E7 96 62 FC | 	wrlong	arg03, fp
17214     04 CE 05 F1 | 	add	fp, #4
17218     E7 94 62 FC | 	wrlong	arg02, fp
1721c     04 CE 05 F1 | 	add	fp, #4
17220     E7 98 62 FC | 	wrlong	arg04, fp
17224     14 CE 85 F1 | 	sub	fp, #20
17228     44 64 BF FD | 	call	#_pop
1722c     3D 97 02 F6 | 	mov	arg03, result1
17230     3E 95 02 F6 | 	mov	arg02, result2
17234     3F 99 02 F6 | 	mov	arg04, result3
17238     18 CE 05 F1 | 	add	fp, #24
1723c     E7 96 62 FC | 	wrlong	arg03, fp
17240     04 CE 05 F1 | 	add	fp, #4
17244     E7 94 62 FC | 	wrlong	arg02, fp
17248     04 CE 05 F1 | 	add	fp, #4
1724c     E7 98 62 FC | 	wrlong	arg04, fp
17250     20 CE 85 F1 | 	sub	fp, #32
17254     18 64 BF FD | 	call	#_pop
17258     3F 97 02 F6 | 	mov	arg03, result3
1725c     24 CE 05 F1 | 	add	fp, #36
17260     E7 7A 62 FC | 	wrlong	result1, fp
17264     04 CE 05 F1 | 	add	fp, #4
17268     E7 7C 62 FC | 	wrlong	result2, fp
1726c     04 CE 05 F1 | 	add	fp, #4
17270     E7 96 62 FC | 	wrlong	arg03, fp
17274     08 CE 85 F1 | 	sub	fp, #8
17278     E7 92 02 F6 | 	mov	arg01, fp
1727c     24 CE 85 F1 | 	sub	fp, #36
17280     C8 65 BF FD | 	call	#_converttoint
17284     3D A7 02 F6 | 	mov	local01, result1
17288     E7 92 02 F6 | 	mov	arg01, fp
1728c     18 92 06 F1 | 	add	arg01, #24
17290     B8 65 BF FD | 	call	#_converttoint
17294     3D A9 02 F6 | 	mov	local02, result1
17298     E7 92 02 F6 | 	mov	arg01, fp
1729c     0C 92 06 F1 | 	add	arg01, #12
172a0     A8 65 BF FD | 	call	#_converttoint
172a4     3D AB 02 F6 | 	mov	local03, result1
172a8     E7 92 02 F6 | 	mov	arg01, fp
172ac     9C 65 BF FD | 	call	#_converttoint
172b0     40 A6 62 FD | 	dirl	local01
172b4     53 A9 02 FC | 	wrpin	local02, local01
172b8     53 AB 12 FC | 	wxpin	local03, local01
172bc     53 7B 22 FC | 	wypin	result1, local01
172c0     41 A6 62 FD | 	dirh	local01
172c4     E7 F0 03 F6 | 	mov	ptra, fp
172c8     F2 00 A0 FD | 	call	#popregs_
172cc                 | _do_pinstart_ret
172cc     2D 00 64 FD | 	ret
172d0                 | 
172d0                 | ' 
172d0                 | ' '-------------------- pintoggle
172d0                 | ' 
172d0                 | ' sub do_pintoggle
172d0                 | _do_pintoggle
172d0     00 CA 05 F6 | 	mov	COUNT_, #0
172d4     E8 00 A0 FD | 	call	#pushregs_
172d8     0C F0 07 F1 | 	add	ptra, #12
172dc     90 63 BF FD | 	call	#_pop
172e0     E7 7A 62 FC | 	wrlong	result1, fp
172e4     04 CE 05 F1 | 	add	fp, #4
172e8     E7 7C 62 FC | 	wrlong	result2, fp
172ec     04 CE 05 F1 | 	add	fp, #4
172f0     E7 7E 62 FC | 	wrlong	result3, fp
172f4     08 CE 85 F1 | 	sub	fp, #8
172f8     E7 92 02 F6 | 	mov	arg01, fp
172fc     4C 65 BF FD | 	call	#_converttoint
17300     5F 7A 62 FD | 	drvnot	result1
17304     E7 F0 03 F6 | 	mov	ptra, fp
17308     F2 00 A0 FD | 	call	#popregs_
1730c                 | _do_pintoggle_ret
1730c     2D 00 64 FD | 	ret
17310                 | 
17310                 | ' 
17310                 | ' '-------------------- pinwrite
17310                 | ' 
17310                 | ' sub do_pinwrite
17310                 | _do_pinwrite
17310     01 CA 05 F6 | 	mov	COUNT_, #1
17314     E8 00 A0 FD | 	call	#pushregs_
17318     18 F0 07 F1 | 	add	ptra, #24
1731c     50 63 BF FD | 	call	#_pop
17320     3D 95 02 F6 | 	mov	arg02, result1
17324     3E 93 02 F6 | 	mov	arg01, result2
17328     3F A7 02 F6 | 	mov	local01, result3
1732c     E7 94 62 FC | 	wrlong	arg02, fp
17330     04 CE 05 F1 | 	add	fp, #4
17334     E7 92 62 FC | 	wrlong	arg01, fp
17338     04 CE 05 F1 | 	add	fp, #4
1733c     E7 A6 62 FC | 	wrlong	local01, fp
17340     08 CE 85 F1 | 	sub	fp, #8
17344     28 63 BF FD | 	call	#_pop
17348     3F A7 02 F6 | 	mov	local01, result3
1734c     0C CE 05 F1 | 	add	fp, #12
17350     E7 7A 62 FC | 	wrlong	result1, fp
17354     04 CE 05 F1 | 	add	fp, #4
17358     E7 7C 62 FC | 	wrlong	result2, fp
1735c     04 CE 05 F1 | 	add	fp, #4
17360     E7 A6 62 FC | 	wrlong	local01, fp
17364     08 CE 85 F1 | 	sub	fp, #8
17368     E7 92 02 F6 | 	mov	arg01, fp
1736c     0C CE 85 F1 | 	sub	fp, #12
17370     D8 64 BF FD | 	call	#_converttoint
17374     3D A7 02 F6 | 	mov	local01, result1
17378     E7 92 02 F6 | 	mov	arg01, fp
1737c     CC 64 BF FD | 	call	#_converttoint
17380     3D 95 02 F6 | 	mov	arg02, result1
17384     53 93 02 F6 | 	mov	arg01, local01
17388     00 D8 B0 FD | 	call	#__system___pinwrite
1738c     E7 F0 03 F6 | 	mov	ptra, fp
17390     F2 00 A0 FD | 	call	#popregs_
17394                 | _do_pinwrite_ret
17394     2D 00 64 FD | 	ret
17398                 | 
17398                 | ' 
17398                 | ' '-------------------- play
17398                 | ' 
17398                 | ' sub do_play
17398                 | _do_play
17398     10 CA 05 F6 | 	mov	COUNT_, #16
1739c     E8 00 A0 FD | 	call	#pushregs_
173a0     88 F0 07 F1 | 	add	ptra, #136
173a4     77 CC 21 FF 
173a8     BE A7 06 F6 | 	mov	local01, ##1134096318
173ac                 | ' speed_coeff=305.873
173ac                 | ' 
173ac                 | ' for i=0 to 9 : params(i)=-2.0 : next i
173ac     00 A8 06 F6 | 	mov	local02, #0
173b0     40 CE 05 F1 | 	add	fp, #64
173b4     D7 10 48 FB | 	callpa	#(@LR__1981-@LR__1980)>>2,fcache_load_ptr_
173b8                 | LR__1980
173b8     54 AB 02 F6 | 	mov	local03, local02
173bc     02 AA 66 F0 | 	shl	local03, #2
173c0     E7 AA 02 F1 | 	add	local03, fp
173c4     00 00 E0 FF 
173c8     55 01 68 FC | 	wrlong	##-1073741824, local03
173cc     01 A8 06 F1 | 	add	local02, #1
173d0     0A A8 56 F2 | 	cmps	local02, #10 wc
173d4     E0 FF 9F CD |  if_b	jmp	#LR__1980
173d8                 | LR__1981
173d8     40 CE 85 F1 | 	sub	fp, #64
173dc     4C 00 00 FF 
173e0     24 64 06 F1 | 	add	objptr, ##38948
173e4     32 A9 02 FB | 	rdlong	local02, objptr
173e8     54 AD 02 F6 | 	mov	local04, local02
173ec     01 AC 66 F0 | 	shl	local04, #1
173f0     54 AD 02 F1 | 	add	local04, local02
173f4     02 AC 66 F0 | 	shl	local04, #2
173f8     03 00 00 FF 
173fc     04 64 86 F1 | 	sub	objptr, ##1540
17400     32 AD 02 F1 | 	add	local04, objptr
17404     56 AF 02 FB | 	rdlong	local05, local04
17408                 | ' numpar=compiledline(lineptr_e).result.uresult
17408                 | ' for i=numpar to 1 step -1 
17408     57 A9 02 F6 | 	mov	local02, local05
1740c     49 00 00 FF 
17410     20 64 86 F1 | 	sub	objptr, ##37408
17414                 | LR__1982
17414     58 62 BF FD | 	call	#_pop
17418     68 CE 05 F1 | 	add	fp, #104
1741c     E7 7A 62 FC | 	wrlong	result1, fp
17420     04 CE 05 F1 | 	add	fp, #4
17424     E7 7C 62 FC | 	wrlong	result2, fp
17428     04 CE 05 F1 | 	add	fp, #4
1742c     E7 7E 62 FC | 	wrlong	result3, fp
17430     54 AB 02 F6 | 	mov	local03, local02
17434     01 AA 86 F1 | 	sub	local03, #1
17438     02 AA 66 F0 | 	shl	local03, #2
1743c     30 CE 85 F1 | 	sub	fp, #48
17440     E7 AA 02 F1 | 	add	local03, fp
17444     28 CE 05 F1 | 	add	fp, #40
17448     E7 B0 02 F6 | 	mov	local06, fp
1744c     58 93 02 F6 | 	mov	arg01, local06
17450     68 CE 85 F1 | 	sub	fp, #104
17454     B0 64 BF FD | 	call	#_converttofloat
17458     55 7B 62 FC | 	wrlong	result1, local03
1745c     01 A8 86 F1 | 	sub	local02, #1
17460     01 A8 56 F2 | 	cmps	local02, #1 wc
17464     AC FF 9F 3D |  if_ae	jmp	#LR__1982
17468                 | ' 
17468                 | ' if params(0)<0 then channel=0 else channel=round(params(0)) mod 8
17468     40 CE 05 F1 | 	add	fp, #64
1746c     E7 92 02 FB | 	rdlong	arg01, fp
17470     40 CE 85 F1 | 	sub	fp, #64
17474     00 94 06 F6 | 	mov	arg02, #0
17478     01 96 06 F6 | 	mov	arg03, #1
1747c     5C 00 B1 FD | 	call	#__system___float_cmp
17480     00 7A 56 F2 | 	cmps	result1, #0 wc
17484     00 B2 06 C6 |  if_b	mov	local07, #0
17488     20 00 90 CD |  if_b	jmp	#LR__1983
1748c     40 CE 05 F1 | 	add	fp, #64
17490     E7 92 02 FB | 	rdlong	arg01, fp
17494     40 CE 85 F1 | 	sub	fp, #64
17498     01 94 06 F6 | 	mov	arg02, #1
1749c     D0 00 B1 FD | 	call	#__system___float_tointeger
174a0     3D B3 52 F6 | 	abs	local07, result1 wc
174a4     07 B2 06 F5 | 	and	local07, #7
174a8     59 B3 82 F6 | 	negc	local07, local07
174ac                 | LR__1983
174ac                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
174ac     44 CE 05 F1 | 	add	fp, #68
174b0     E7 92 02 FB | 	rdlong	arg01, fp
174b4     44 CE 85 F1 | 	sub	fp, #68
174b8     00 94 06 F6 | 	mov	arg02, #0
174bc     01 96 06 F6 | 	mov	arg03, #1
174c0     18 00 B1 FD | 	call	#__system___float_cmp
174c4     00 7A 56 F2 | 	cmps	result1, #0 wc
174c8     28 00 90 3D |  if_ae	jmp	#LR__1984
174cc     59 97 02 F6 | 	mov	arg03, local07
174d0     03 96 66 F0 | 	shl	arg03, #3
174d4     59 97 82 F1 | 	sub	arg03, local07
174d8     02 96 66 F0 | 	shl	arg03, #2
174dc     32 AD 02 F6 | 	mov	local04, objptr
174e0     16 00 00 FF 
174e4     BC AC 06 F1 | 	add	local04, ##11452
174e8     56 97 02 F1 | 	add	arg03, local04
174ec     4B B5 02 FB | 	rdlong	local08, arg03
174f0     30 00 90 FD | 	jmp	#LR__1985
174f4                 | LR__1984
174f4     44 CE 05 F1 | 	add	fp, #68
174f8     E7 B4 02 FB | 	rdlong	local08, fp
174fc     44 CE 85 F1 | 	sub	fp, #68
17500     59 97 02 F6 | 	mov	arg03, local07
17504     03 96 66 F0 | 	shl	arg03, #3
17508     59 97 82 F1 | 	sub	arg03, local07
1750c     02 96 66 F0 | 	shl	arg03, #2
17510     32 AD 02 F6 | 	mov	local04, objptr
17514     16 00 00 FF 
17518     BC AC 06 F1 | 	add	local04, ##11452
1751c     56 97 02 F1 | 	add	arg03, local04
17520     4B B5 62 FC | 	wrlong	local08, arg03
17524                 | LR__1985
17524                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
17524     48 CE 05 F1 | 	add	fp, #72
17528     E7 92 02 FB | 	rdlong	arg01, fp
1752c     48 CE 85 F1 | 	sub	fp, #72
17530     00 94 06 F6 | 	mov	arg02, #0
17534     01 96 06 F6 | 	mov	arg03, #1
17538     A0 FF B0 FD | 	call	#__system___float_cmp
1753c     00 7A 56 F2 | 	cmps	result1, #0 wc
17540     24 00 90 CD |  if_b	jmp	#LR__1986
17544     48 CE 05 F1 | 	add	fp, #72
17548     E7 92 02 FB | 	rdlong	arg01, fp
1754c     48 CE 85 F1 | 	sub	fp, #72
17550     20 0E 23 FF 
17554     00 94 06 F6 | 	mov	arg02, ##1176256512
17558     01 96 66 F6 | 	neg	arg03, #1
1755c     7C FF B0 FD | 	call	#__system___float_cmp
17560     01 7A 56 F2 | 	cmps	result1, #1 wc
17564     30 00 90 CD |  if_b	jmp	#LR__1987
17568                 | LR__1986
17568     59 AD 02 F6 | 	mov	local04, local07
1756c     03 AC 66 F0 | 	shl	local04, #3
17570     59 AD 82 F1 | 	sub	local04, local07
17574     02 AC 66 F0 | 	shl	local04, #2
17578     32 B1 02 F6 | 	mov	local06, objptr
1757c     16 00 00 FF 
17580     BC B0 06 F1 | 	add	local06, ##11452
17584     58 AD 02 F1 | 	add	local04, local06
17588     06 AC 06 F1 | 	add	local04, #6
1758c     56 B7 E2 FA | 	rdword	local09, local04
17590     5B B9 32 F9 | 	getword	local10, local09, #0
17594     40 00 90 FD | 	jmp	#LR__1988
17598                 | LR__1987
17598     48 CE 05 F1 | 	add	fp, #72
1759c     E7 92 02 FB | 	rdlong	arg01, fp
175a0     48 CE 85 F1 | 	sub	fp, #72
175a4     01 94 06 F6 | 	mov	arg02, #1
175a8     C4 FF B0 FD | 	call	#__system___float_tointeger
175ac     3D B9 02 F6 | 	mov	local10, result1
175b0     59 97 02 F6 | 	mov	arg03, local07
175b4     03 96 66 F0 | 	shl	arg03, #3
175b8     59 97 82 F1 | 	sub	arg03, local07
175bc     02 96 66 F0 | 	shl	arg03, #2
175c0     32 AD 02 F6 | 	mov	local04, objptr
175c4     16 00 00 FF 
175c8     BC AC 06 F1 | 	add	local04, ##11452
175cc     56 97 02 F1 | 	add	arg03, local04
175d0     06 96 06 F1 | 	add	arg03, #6
175d4     4B B9 52 FC | 	wrword	local10, arg03
175d8                 | LR__1988
175d8                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
175d8     4C CE 05 F1 | 	add	fp, #76
175dc     E7 92 02 FB | 	rdlong	arg01, fp
175e0     4C CE 85 F1 | 	sub	fp, #76
175e4     00 94 06 F6 | 	mov	arg02, #0
175e8     01 96 06 F6 | 	mov	arg03, #1
175ec     EC FE B0 FD | 	call	#__system___float_cmp
175f0     00 7A 56 F2 | 	cmps	result1, #0 wc
175f4     24 00 90 CD |  if_b	jmp	#LR__1989
175f8     4C CE 05 F1 | 	add	fp, #76
175fc     E7 92 02 FB | 	rdlong	arg01, fp
17600     4C CE 85 F1 | 	sub	fp, #76
17604     89 C1 20 FF 
17608     6F 94 06 F6 | 	mov	arg02, ##1099108975
1760c     01 96 66 F6 | 	neg	arg03, #1
17610     C8 FE B0 FD | 	call	#__system___float_cmp
17614     01 7A 56 F2 | 	cmps	result1, #1 wc
17618     30 00 90 CD |  if_b	jmp	#LR__1990
1761c                 | LR__1989
1761c     59 B1 02 F6 | 	mov	local06, local07
17620     03 B0 66 F0 | 	shl	local06, #3
17624     59 B1 82 F1 | 	sub	local06, local07
17628     02 B0 66 F0 | 	shl	local06, #2
1762c     32 AD 02 F6 | 	mov	local04, objptr
17630     16 00 00 FF 
17634     BC AC 06 F1 | 	add	local04, ##11452
17638     56 B1 02 F1 | 	add	local06, local04
1763c     0C B0 06 F1 | 	add	local06, #12
17640     58 B1 02 FB | 	rdlong	local06, local06
17644     58 BB 02 F6 | 	mov	local11, local06
17648     34 00 90 FD | 	jmp	#LR__1991
1764c                 | LR__1990
1764c     4C CE 05 F1 | 	add	fp, #76
17650     E7 BA 02 FB | 	rdlong	local11, fp
17654     4C CE 85 F1 | 	sub	fp, #76
17658     59 97 02 F6 | 	mov	arg03, local07
1765c     03 96 66 F0 | 	shl	arg03, #3
17660     59 97 82 F1 | 	sub	arg03, local07
17664     02 96 66 F0 | 	shl	arg03, #2
17668     32 AD 02 F6 | 	mov	local04, objptr
1766c     16 00 00 FF 
17670     BC AC 06 F1 | 	add	local04, ##11452
17674     56 97 02 F1 | 	add	arg03, local04
17678     0C 96 06 F1 | 	add	arg03, #12
1767c     4B BB 62 FC | 	wrlong	local11, arg03
17680                 | LR__1991
17680                 | ' if params(4)<0 orelse params(4)>32 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
17680     50 CE 05 F1 | 	add	fp, #80
17684     E7 92 02 FB | 	rdlong	arg01, fp
17688     50 CE 85 F1 | 	sub	fp, #80
1768c     00 94 06 F6 | 	mov	arg02, #0
17690     01 96 06 F6 | 	mov	arg03, #1
17694     44 FE B0 FD | 	call	#__system___float_cmp
17698     00 7A 56 F2 | 	cmps	result1, #0 wc
1769c     24 00 90 CD |  if_b	jmp	#LR__1992
176a0     50 CE 05 F1 | 	add	fp, #80
176a4     E7 92 02 FB | 	rdlong	arg01, fp
176a8     50 CE 85 F1 | 	sub	fp, #80
176ac     00 00 21 FF 
176b0     00 94 06 F6 | 	mov	arg02, ##1107296256
176b4     01 96 66 F6 | 	neg	arg03, #1
176b8     20 FE B0 FD | 	call	#__system___float_cmp
176bc     01 7A 56 F2 | 	cmps	result1, #1 wc
176c0     30 00 90 CD |  if_b	jmp	#LR__1993
176c4                 | LR__1992
176c4     59 AD 02 F6 | 	mov	local04, local07
176c8     03 AC 66 F0 | 	shl	local04, #3
176cc     59 AD 82 F1 | 	sub	local04, local07
176d0     02 AC 66 F0 | 	shl	local04, #2
176d4     32 B1 02 F6 | 	mov	local06, objptr
176d8     16 00 00 FF 
176dc     BC B0 06 F1 | 	add	local06, ##11452
176e0     58 AD 02 F1 | 	add	local04, local06
176e4     04 AC 06 F1 | 	add	local04, #4
176e8     56 B7 C2 FA | 	rdbyte	local09, local04
176ec     5B BD E2 F8 | 	getbyte	local12, local09, #0
176f0     40 00 90 FD | 	jmp	#LR__1994
176f4                 | LR__1993
176f4     50 CE 05 F1 | 	add	fp, #80
176f8     E7 92 02 FB | 	rdlong	arg01, fp
176fc     50 CE 85 F1 | 	sub	fp, #80
17700     01 94 06 F6 | 	mov	arg02, #1
17704     68 FE B0 FD | 	call	#__system___float_tointeger
17708     3D BD 02 F6 | 	mov	local12, result1
1770c     59 97 02 F6 | 	mov	arg03, local07
17710     03 96 66 F0 | 	shl	arg03, #3
17714     59 97 82 F1 | 	sub	arg03, local07
17718     02 96 66 F0 | 	shl	arg03, #2
1771c     32 AD 02 F6 | 	mov	local04, objptr
17720     16 00 00 FF 
17724     BC AC 06 F1 | 	add	local04, ##11452
17728     56 97 02 F1 | 	add	arg03, local04
1772c     04 96 06 F1 | 	add	arg03, #4
17730     4B BD 42 FC | 	wrbyte	local12, arg03
17734                 | LR__1994
17734                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
17734     54 CE 05 F1 | 	add	fp, #84
17738     E7 92 02 FB | 	rdlong	arg01, fp
1773c     54 CE 85 F1 | 	sub	fp, #84
17740     00 94 06 F6 | 	mov	arg02, #0
17744     01 96 06 F6 | 	mov	arg03, #1
17748     90 FD B0 FD | 	call	#__system___float_cmp
1774c     00 7A 56 F2 | 	cmps	result1, #0 wc
17750     24 00 90 CD |  if_b	jmp	#LR__1995
17754     54 CE 05 F1 | 	add	fp, #84
17758     E7 92 02 FB | 	rdlong	arg01, fp
1775c     54 CE 85 F1 | 	sub	fp, #84
17760     00 80 20 FF 
17764     00 94 06 F6 | 	mov	arg02, ##1090519040
17768     01 96 66 F6 | 	neg	arg03, #1
1776c     6C FD B0 FD | 	call	#__system___float_cmp
17770     01 7A 56 F2 | 	cmps	result1, #1 wc
17774     30 00 90 CD |  if_b	jmp	#LR__1996
17778                 | LR__1995
17778     59 AD 02 F6 | 	mov	local04, local07
1777c     03 AC 66 F0 | 	shl	local04, #3
17780     59 AD 82 F1 | 	sub	local04, local07
17784     02 AC 66 F0 | 	shl	local04, #2
17788     32 B1 02 F6 | 	mov	local06, objptr
1778c     16 00 00 FF 
17790     BC B0 06 F1 | 	add	local06, ##11452
17794     58 AD 02 F1 | 	add	local04, local06
17798     05 AC 06 F1 | 	add	local04, #5
1779c     56 B7 C2 FA | 	rdbyte	local09, local04
177a0     5B BF E2 F8 | 	getbyte	local13, local09, #0
177a4     40 00 90 FD | 	jmp	#LR__1997
177a8                 | LR__1996
177a8     54 CE 05 F1 | 	add	fp, #84
177ac     E7 92 02 FB | 	rdlong	arg01, fp
177b0     54 CE 85 F1 | 	sub	fp, #84
177b4     01 94 06 F6 | 	mov	arg02, #1
177b8     B4 FD B0 FD | 	call	#__system___float_tointeger
177bc     3D BF 02 F6 | 	mov	local13, result1
177c0     59 97 02 F6 | 	mov	arg03, local07
177c4     03 96 66 F0 | 	shl	arg03, #3
177c8     59 97 82 F1 | 	sub	arg03, local07
177cc     02 96 66 F0 | 	shl	arg03, #2
177d0     32 AD 02 F6 | 	mov	local04, objptr
177d4     16 00 00 FF 
177d8     BC AC 06 F1 | 	add	local04, ##11452
177dc     56 97 02 F1 | 	add	arg03, local04
177e0     05 96 06 F1 | 	add	arg03, #5
177e4     4B BF 42 FC | 	wrbyte	local13, arg03
177e8                 | LR__1997
177e8                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
177e8     58 CE 05 F1 | 	add	fp, #88
177ec     E7 92 02 FB | 	rdlong	arg01, fp
177f0     58 CE 85 F1 | 	sub	fp, #88
177f4     00 94 06 F6 | 	mov	arg02, #0
177f8     01 96 06 F6 | 	mov	arg03, #1
177fc     DC FC B0 FD | 	call	#__system___float_cmp
17800     00 7A 56 F2 | 	cmps	result1, #0 wc
17804     24 00 90 CD |  if_b	jmp	#LR__1998
17808     58 CE 05 F1 | 	add	fp, #88
1780c     E7 92 02 FB | 	rdlong	arg01, fp
17810     58 CE 85 F1 | 	sub	fp, #88
17814     00 3D 22 FF 
17818     00 94 06 F6 | 	mov	arg02, ##1148846080
1781c     01 96 66 F6 | 	neg	arg03, #1
17820     B8 FC B0 FD | 	call	#__system___float_cmp
17824     01 7A 56 F2 | 	cmps	result1, #1 wc
17828     2C 00 90 CD |  if_b	jmp	#LR__1999
1782c                 | LR__1998
1782c     59 B1 02 F6 | 	mov	local06, local07
17830     03 B0 66 F0 | 	shl	local06, #3
17834     59 B1 82 F1 | 	sub	local06, local07
17838     02 B0 66 F0 | 	shl	local06, #2
1783c     32 AD 02 F6 | 	mov	local04, objptr
17840     16 00 00 FF 
17844     BC AC 06 F1 | 	add	local04, ##11452
17848     56 B1 02 F1 | 	add	local06, local04
1784c     08 B0 06 F1 | 	add	local06, #8
17850     58 C1 02 FB | 	rdlong	local14, local06
17854     34 00 90 FD | 	jmp	#LR__2000
17858                 | LR__1999
17858     58 CE 05 F1 | 	add	fp, #88
1785c     E7 C0 02 FB | 	rdlong	local14, fp
17860     58 CE 85 F1 | 	sub	fp, #88
17864     59 B7 02 F6 | 	mov	local09, local07
17868     03 B6 66 F0 | 	shl	local09, #3
1786c     59 B7 82 F1 | 	sub	local09, local07
17870     02 B6 66 F0 | 	shl	local09, #2
17874     32 AD 02 F6 | 	mov	local04, objptr
17878     16 00 00 FF 
1787c     BC AC 06 F1 | 	add	local04, ##11452
17880     56 B7 02 F1 | 	add	local09, local04
17884     08 B6 06 F1 | 	add	local09, #8
17888     5B C1 62 FC | 	wrlong	local14, local09
1788c                 | LR__2000
1788c                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
1788c     5C CE 05 F1 | 	add	fp, #92
17890     E7 92 02 FB | 	rdlong	arg01, fp
17894     5C CE 85 F1 | 	sub	fp, #92
17898     00 C0 5F FF 
1789c     00 94 06 F6 | 	mov	arg02, ##-1082130432
178a0     01 96 06 F6 | 	mov	arg03, #1
178a4     34 FC B0 FD | 	call	#__system___float_cmp
178a8     00 7A 56 F2 | 	cmps	result1, #0 wc
178ac     24 00 90 CD |  if_b	jmp	#LR__2001
178b0     5C CE 05 F1 | 	add	fp, #92
178b4     E7 92 02 FB | 	rdlong	arg01, fp
178b8     5C CE 85 F1 | 	sub	fp, #92
178bc     00 C0 1F FF 
178c0     00 94 06 F6 | 	mov	arg02, ##1065353216
178c4     01 96 66 F6 | 	neg	arg03, #1
178c8     10 FC B0 FD | 	call	#__system___float_cmp
178cc     01 7A 56 F2 | 	cmps	result1, #1 wc
178d0     2C 00 90 CD |  if_b	jmp	#LR__2002
178d4                 | LR__2001
178d4     59 B7 02 F6 | 	mov	local09, local07
178d8     03 B6 66 F0 | 	shl	local09, #3
178dc     59 B7 82 F1 | 	sub	local09, local07
178e0     02 B6 66 F0 | 	shl	local09, #2
178e4     32 AD 02 F6 | 	mov	local04, objptr
178e8     16 00 00 FF 
178ec     BC AC 06 F1 | 	add	local04, ##11452
178f0     56 B7 02 F1 | 	add	local09, local04
178f4     10 B6 06 F1 | 	add	local09, #16
178f8     5B C3 02 FB | 	rdlong	local15, local09
178fc     34 00 90 FD | 	jmp	#LR__2003
17900                 | LR__2002
17900     5C CE 05 F1 | 	add	fp, #92
17904     E7 C2 02 FB | 	rdlong	local15, fp
17908     5C CE 85 F1 | 	sub	fp, #92
1790c     59 B7 02 F6 | 	mov	local09, local07
17910     03 B6 66 F0 | 	shl	local09, #3
17914     59 B7 82 F1 | 	sub	local09, local07
17918     02 B6 66 F0 | 	shl	local09, #2
1791c     32 AD 02 F6 | 	mov	local04, objptr
17920     16 00 00 FF 
17924     BC AC 06 F1 | 	add	local04, ##11452
17928     56 B7 02 F1 | 	add	local09, local04
1792c     10 B6 06 F1 | 	add	local09, #16
17930     5B C3 62 FC | 	wrlong	local15, local09
17934                 | LR__2003
17934                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
17934     60 CE 05 F1 | 	add	fp, #96
17938     E7 92 02 FB | 	rdlong	arg01, fp
1793c     60 CE 85 F1 | 	sub	fp, #96
17940     00 94 06 F6 | 	mov	arg02, #0
17944     01 96 06 F6 | 	mov	arg03, #1
17948     90 FB B0 FD | 	call	#__system___float_cmp
1794c     00 7A 56 F2 | 	cmps	result1, #0 wc
17950     24 00 90 CD |  if_b	jmp	#LR__2004
17954     60 CE 05 F1 | 	add	fp, #96
17958     E7 92 02 FB | 	rdlong	arg01, fp
1795c     60 CE 85 F1 | 	sub	fp, #96
17960     80 BF 21 FF 
17964     00 94 06 F6 | 	mov	arg02, ##1132396544
17968     01 96 66 F6 | 	neg	arg03, #1
1796c     6C FB B0 FD | 	call	#__system___float_cmp
17970     01 7A 56 F2 | 	cmps	result1, #1 wc
17974     2C 00 90 CD |  if_b	jmp	#LR__2005
17978                 | LR__2004
17978     59 AD 02 F6 | 	mov	local04, local07
1797c     03 AC 66 F0 | 	shl	local04, #3
17980     59 AD 82 F1 | 	sub	local04, local07
17984     02 AC 66 F0 | 	shl	local04, #2
17988     32 B1 02 F6 | 	mov	local06, objptr
1798c     16 00 00 FF 
17990     BC B0 06 F1 | 	add	local06, ##11452
17994     58 AD 02 F1 | 	add	local04, local06
17998     14 AC 06 F1 | 	add	local04, #20
1799c     56 C5 E2 FA | 	rdword	local16, local04
179a0     40 00 90 FD | 	jmp	#LR__2006
179a4                 | LR__2005
179a4     60 CE 05 F1 | 	add	fp, #96
179a8     E7 92 02 FB | 	rdlong	arg01, fp
179ac     60 CE 85 F1 | 	sub	fp, #96
179b0     01 94 06 F6 | 	mov	arg02, #1
179b4     B8 FB B0 FD | 	call	#__system___float_tointeger
179b8     3D C5 02 F6 | 	mov	local16, result1
179bc     59 B7 02 F6 | 	mov	local09, local07
179c0     03 B6 66 F0 | 	shl	local09, #3
179c4     59 B7 82 F1 | 	sub	local09, local07
179c8     02 B6 66 F0 | 	shl	local09, #2
179cc     32 AD 02 F6 | 	mov	local04, objptr
179d0     16 00 00 FF 
179d4     BC AC 06 F1 | 	add	local04, ##11452
179d8     56 B7 02 F1 | 	add	local09, local04
179dc     14 B6 06 F1 | 	add	local09, #20
179e0     5B C5 52 FC | 	wrword	local16, local09
179e4                 | LR__2006
179e4                 | ' if params(9)<0 orelse params(9)>255 then amode=channels(channel).amode else amode= round(params(9)) : channels(channel).amode=amode
179e4     64 CE 05 F1 | 	add	fp, #100
179e8     E7 92 02 FB | 	rdlong	arg01, fp
179ec     64 CE 85 F1 | 	sub	fp, #100
179f0     00 94 06 F6 | 	mov	arg02, #0
179f4     01 96 06 F6 | 	mov	arg03, #1
179f8     E0 FA B0 FD | 	call	#__system___float_cmp
179fc     00 7A 56 F2 | 	cmps	result1, #0 wc
17a00     60 00 90 CD |  if_b	jmp	#LR__2007
17a04     64 CE 05 F1 | 	add	fp, #100
17a08     E7 92 02 FB | 	rdlong	arg01, fp
17a0c     64 CE 85 F1 | 	sub	fp, #100
17a10     80 BF 21 FF 
17a14     00 94 06 F6 | 	mov	arg02, ##1132396544
17a18     01 96 66 F6 | 	neg	arg03, #1
17a1c     BC FA B0 FD | 	call	#__system___float_cmp
17a20     01 7A 56 F2 | 	cmps	result1, #1 wc
17a24     3C 00 90 3D |  if_ae	jmp	#LR__2007
17a28     64 CE 05 F1 | 	add	fp, #100
17a2c     E7 92 02 FB | 	rdlong	arg01, fp
17a30     64 CE 85 F1 | 	sub	fp, #100
17a34     01 94 06 F6 | 	mov	arg02, #1
17a38     34 FB B0 FD | 	call	#__system___float_tointeger
17a3c     59 B7 02 F6 | 	mov	local09, local07
17a40     03 B6 66 F0 | 	shl	local09, #3
17a44     59 B7 82 F1 | 	sub	local09, local07
17a48     02 B6 66 F0 | 	shl	local09, #2
17a4c     32 AD 02 F6 | 	mov	local04, objptr
17a50     16 00 00 FF 
17a54     BC AC 06 F1 | 	add	local04, ##11452
17a58     56 B7 02 F1 | 	add	local09, local04
17a5c     16 B6 06 F1 | 	add	local09, #22
17a60     5B 7B 52 FC | 	wrword	result1, local09
17a64                 | LR__2007
17a64     5A 93 02 F6 | 	mov	arg01, local08
17a68     00 3D 22 FF 
17a6c     00 94 06 F6 | 	mov	arg02, ##1148846080
17a70     34 F6 B0 FD | 	call	#__system___float_mul
17a74     3D 93 02 F6 | 	mov	arg01, result1
17a78     01 94 06 F6 | 	mov	arg02, #1
17a7c     F0 FA B0 FD | 	call	#__system___float_tointeger
17a80     3D B7 02 F6 | 	mov	local09, result1
17a84                 | ' 
17a84                 | ' ifreq=round(freq*1000)
17a84                 | ' if wave <32 then 
17a84     20 BC 56 F2 | 	cmps	local12, #32 wc
17a88     0B BC 66 C0 |  if_b	shl	local12, #11
17a8c     00 00 60 CF 
17a90     00 BC 06 C1 |  if_b	add	local12, ##-1073741824
17a94     00 00 64 3F 
17a98     00 BC 06 36 |  if_ae	mov	local12, ##-939524096
17a9c                 | ' if env=8 then env=0 else env=varptr(envbuf(env,0))
17a9c     08 BE 0E F2 | 	cmp	local13, #8 wz
17aa0     00 BE 06 A6 |  if_e	mov	local13, #0
17aa4     09 BE 66 50 |  if_ne	shl	local13, #9
17aa8     32 B1 02 56 |  if_ne	mov	local06, objptr
17aac     0E 00 00 5F 
17ab0     38 B0 06 51 |  if_ne	add	local06, ##7224
17ab4     58 BF 02 51 |  if_ne	add	local13, local06
17ab8     77 CC 21 FF 
17abc     BE 93 06 F6 | 	mov	arg01, ##1134096318
17ac0     60 95 02 F6 | 	mov	arg02, local14
17ac4     E4 F7 B0 FD | 	call	#__system___float_div
17ac8     3D 93 02 F6 | 	mov	arg01, result1
17acc     01 94 06 F6 | 	mov	arg02, #1
17ad0     9C FA B0 FD | 	call	#__system___float_tointeger
17ad4     00 00 23 FF 
17ad8     00 92 06 F6 | 	mov	arg01, ##1174405120
17adc     61 95 02 F6 | 	mov	arg02, local15
17ae0     C4 F5 B0 FD | 	call	#__system___float_mul
17ae4     3D 93 02 F6 | 	mov	arg01, result1
17ae8     01 94 06 F6 | 	mov	arg02, #1
17aec     80 FA B0 FD | 	call	#__system___float_tointeger
17af0     0D C2 C6 F9 | 	decod	local15, #13
17af4     3D C3 02 F1 | 	add	local15, result1
17af8     00 3D 22 FF 
17afc     00 92 06 F6 | 	mov	arg01, ##1148846080
17b00     5D 95 02 F6 | 	mov	arg02, local11
17b04     A0 F5 B0 FD | 	call	#__system___float_mul
17b08     3D 93 02 F6 | 	mov	arg01, result1
17b0c     01 94 06 F6 | 	mov	arg02, #1
17b10     5C FA B0 FD | 	call	#__system___float_tointeger
17b14     3D AD 02 F6 | 	mov	local04, result1
17b18     60 93 02 F6 | 	mov	arg01, local14
17b1c     01 94 06 F6 | 	mov	arg02, #1
17b20     4C FA B0 FD | 	call	#__system___float_tointeger
17b24     3D 9F 02 F6 | 	mov	arg07, result1
17b28     59 93 02 F6 | 	mov	arg01, local07
17b2c     5B 95 02 F6 | 	mov	arg02, local09
17b30     5C 97 02 F6 | 	mov	arg03, local10
17b34     56 99 02 F6 | 	mov	arg04, local04
17b38     5E 9B 02 F6 | 	mov	arg05, local12
17b3c     5F 9D 02 F6 | 	mov	arg06, local13
17b40     61 A1 02 F6 | 	mov	arg08, local15
17b44     62 A3 02 F6 | 	mov	arg09, local16
17b48     0B 00 00 FF 
17b4c     CC 64 06 F1 | 	add	objptr, ##5836
17b50     3C C7 B0 FD | 	call	#_Audio2_004_spin2_play
17b54     0B 00 00 FF 
17b58     CC 64 86 F1 | 	sub	objptr, ##5836
17b5c                 | ' speed=round(speed_coeff/slen)
17b5c                 | ' ipan=8192+round(8192*pan)
17b5c                 | ' ivol=round(1000.0*vol)
17b5c                 | ' 
17b5c                 | ' audio.play(channel,ifreq,delay,ivol,wave,env,round(slen),ipan,sus)
17b5c                 | ' 
17b5c                 | ' if delay>0 then waitms(delay) 
17b5c     01 B8 56 F2 | 	cmps	local10, #1 wc
17b60     5C 93 02 36 |  if_ae	mov	arg01, local10
17b64     64 D1 B0 3D |  if_ae	call	#__system___waitms
17b68     E7 F0 03 F6 | 	mov	ptra, fp
17b6c     F2 00 A0 FD | 	call	#popregs_
17b70                 | _do_play_ret
17b70     2D 00 64 FD | 	ret
17b74                 | 
17b74                 | ' 
17b74                 | ' '-------------------- plot
17b74                 | ' 
17b74                 | ' sub do_plot
17b74                 | _do_plot
17b74     01 CA 05 F6 | 	mov	COUNT_, #1
17b78     E8 00 A0 FD | 	call	#pushregs_
17b7c     20 F0 07 F1 | 	add	ptra, #32
17b80     EC 5A BF FD | 	call	#_pop
17b84     3D 97 02 F6 | 	mov	arg03, result1
17b88     3E 95 02 F6 | 	mov	arg02, result2
17b8c     3F 93 02 F6 | 	mov	arg01, result3
17b90     0C CE 05 F1 | 	add	fp, #12
17b94     E7 96 62 FC | 	wrlong	arg03, fp
17b98     04 CE 05 F1 | 	add	fp, #4
17b9c     E7 94 62 FC | 	wrlong	arg02, fp
17ba0     04 CE 05 F1 | 	add	fp, #4
17ba4     E7 92 62 FC | 	wrlong	arg01, fp
17ba8     14 CE 85 F1 | 	sub	fp, #20
17bac     C0 5A BF FD | 	call	#_pop
17bb0     3F 97 02 F6 | 	mov	arg03, result3
17bb4     E7 7A 62 FC | 	wrlong	result1, fp
17bb8     04 CE 05 F1 | 	add	fp, #4
17bbc     E7 7C 62 FC | 	wrlong	result2, fp
17bc0     04 CE 05 F1 | 	add	fp, #4
17bc4     E7 96 62 FC | 	wrlong	arg03, fp
17bc8     08 CE 85 F1 | 	sub	fp, #8
17bcc     E7 92 02 F6 | 	mov	arg01, fp
17bd0     78 5C BF FD | 	call	#_converttoint
17bd4     3D A7 02 F6 | 	mov	local01, result1
17bd8     E7 92 02 F6 | 	mov	arg01, fp
17bdc     0C 92 06 F1 | 	add	arg01, #12
17be0     68 5C BF FD | 	call	#_converttoint
17be4     3D 95 02 F6 | 	mov	arg02, result1
17be8     38 00 00 FF 
17bec     D0 65 06 F1 | 	add	objptr, ##29136
17bf0     32 A7 62 FC | 	wrlong	local01, objptr
17bf4     04 64 06 F1 | 	add	objptr, #4
17bf8     32 95 62 FC | 	wrlong	arg02, objptr
17bfc     04 64 86 F1 | 	sub	objptr, #4
17c00     32 93 02 FB | 	rdlong	arg01, objptr
17c04     04 64 86 F1 | 	sub	objptr, #4
17c08     32 97 02 FB | 	rdlong	arg03, objptr
17c0c     38 00 00 FF 
17c10     CC 65 86 F1 | 	sub	objptr, ##29132
17c14     54 A1 B0 FD | 	call	#_Hg010b_4_spin2_putpixel
17c18     E7 F0 03 F6 | 	mov	ptra, fp
17c1c     F2 00 A0 FD | 	call	#popregs_
17c20                 | _do_plot_ret
17c20     2D 00 64 FD | 	ret
17c24                 | 
17c24                 | ' 
17c24                 | ' '-------------------- poke
17c24                 | ' 
17c24                 | ' sub do_poke
17c24                 | _do_poke
17c24     02 CA 05 F6 | 	mov	COUNT_, #2
17c28     E8 00 A0 FD | 	call	#pushregs_
17c2c     20 F0 07 F1 | 	add	ptra, #32
17c30     3C 5A BF FD | 	call	#_pop
17c34     3D 95 02 F6 | 	mov	arg02, result1
17c38     3E 93 02 F6 | 	mov	arg01, result2
17c3c     3F A7 02 F6 | 	mov	local01, result3
17c40     E7 94 62 FC | 	wrlong	arg02, fp
17c44     04 CE 05 F1 | 	add	fp, #4
17c48     E7 92 62 FC | 	wrlong	arg01, fp
17c4c     04 CE 05 F1 | 	add	fp, #4
17c50     E7 A6 62 FC | 	wrlong	local01, fp
17c54     08 CE 85 F1 | 	sub	fp, #8
17c58     14 5A BF FD | 	call	#_pop
17c5c     3F A7 02 F6 | 	mov	local01, result3
17c60     0C CE 05 F1 | 	add	fp, #12
17c64     E7 7A 62 FC | 	wrlong	result1, fp
17c68     04 CE 05 F1 | 	add	fp, #4
17c6c     E7 7C 62 FC | 	wrlong	result2, fp
17c70     04 CE 05 F1 | 	add	fp, #4
17c74     E7 A6 62 FC | 	wrlong	local01, fp
17c78     08 CE 85 F1 | 	sub	fp, #8
17c7c     E7 92 02 F6 | 	mov	arg01, fp
17c80     0C CE 85 F1 | 	sub	fp, #12
17c84     C4 5B BF FD | 	call	#_converttoint
17c88     3D A7 02 F6 | 	mov	local01, result1
17c8c     E7 92 02 F6 | 	mov	arg01, fp
17c90     B8 5B BF FD | 	call	#_converttoint
17c94     3D A9 02 F6 | 	mov	local02, result1
17c98                 | ' t1=pop() 'value
17c98                 | ' t2=pop() 
17c98                 | ' a=converttoint(t2) : v=converttoint(t1)
17c98                 | ' if a<$80000 then poke a,v else pspoke a,v
17c98     00 04 00 FF 
17c9c     00 A6 16 F2 | 	cmp	local01, ##524288 wc
17ca0     53 A9 42 CC |  if_b	wrbyte	local02, local01
17ca4     53 93 02 36 |  if_ae	mov	arg01, local01
17ca8     54 95 02 36 |  if_ae	mov	arg02, local02
17cac     50 92 B0 3D |  if_ae	call	#_pspoke
17cb0     E7 F0 03 F6 | 	mov	ptra, fp
17cb4     F2 00 A0 FD | 	call	#popregs_
17cb8                 | _do_poke_ret
17cb8     2D 00 64 FD | 	ret
17cbc                 | 
17cbc                 | ' 
17cbc                 | ' '-------------------- pop
17cbc                 | ' 
17cbc                 | ' sub do_pop()
17cbc                 | _do_pop
17cbc                 | ' if gosubtop>0 then  gosubtop -=1 
17cbc     52 00 00 FF 
17cc0     D8 64 06 F1 | 	add	objptr, ##42200
17cc4     32 81 02 FB | 	rdlong	_var01, objptr
17cc8     52 00 00 FF 
17ccc     D8 64 86 F1 | 	sub	objptr, ##42200
17cd0     01 80 56 F2 | 	cmps	_var01, #1 wc
17cd4     52 00 00 3F 
17cd8     D8 64 06 31 |  if_ae	add	objptr, ##42200
17cdc     32 81 02 3B |  if_ae	rdlong	_var01, objptr
17ce0     01 80 86 31 |  if_ae	sub	_var01, #1
17ce4     32 81 62 3C |  if_ae	wrlong	_var01, objptr
17ce8     52 00 00 3F 
17cec     D8 64 86 31 |  if_ae	sub	objptr, ##42200
17cf0                 | _do_pop_ret
17cf0     2D 00 64 FD | 	ret
17cf4                 | 
17cf4                 | ' 
17cf4                 | ' '-------------------- position
17cf4                 | ' 
17cf4                 | ' sub do_position
17cf4                 | _do_position
17cf4     01 CA 05 F6 | 	mov	COUNT_, #1
17cf8     E8 00 A0 FD | 	call	#pushregs_
17cfc     18 F0 07 F1 | 	add	ptra, #24
17d00     6C 59 BF FD | 	call	#_pop
17d04     3D 95 02 F6 | 	mov	arg02, result1
17d08     3E 93 02 F6 | 	mov	arg01, result2
17d0c     3F A7 02 F6 | 	mov	local01, result3
17d10     E7 94 62 FC | 	wrlong	arg02, fp
17d14     04 CE 05 F1 | 	add	fp, #4
17d18     E7 92 62 FC | 	wrlong	arg01, fp
17d1c     04 CE 05 F1 | 	add	fp, #4
17d20     E7 A6 62 FC | 	wrlong	local01, fp
17d24     08 CE 85 F1 | 	sub	fp, #8
17d28     44 59 BF FD | 	call	#_pop
17d2c     3F A7 02 F6 | 	mov	local01, result3
17d30     0C CE 05 F1 | 	add	fp, #12
17d34     E7 7A 62 FC | 	wrlong	result1, fp
17d38     04 CE 05 F1 | 	add	fp, #4
17d3c     E7 7C 62 FC | 	wrlong	result2, fp
17d40     04 CE 05 F1 | 	add	fp, #4
17d44     E7 A6 62 FC | 	wrlong	local01, fp
17d48     08 CE 85 F1 | 	sub	fp, #8
17d4c     E7 92 02 F6 | 	mov	arg01, fp
17d50     0C CE 85 F1 | 	sub	fp, #12
17d54     F4 5A BF FD | 	call	#_converttoint
17d58     3D A7 02 F6 | 	mov	local01, result1
17d5c     E7 92 02 F6 | 	mov	arg01, fp
17d60     E8 5A BF FD | 	call	#_converttoint
17d64     3D 95 02 F6 | 	mov	arg02, result1
17d68     53 93 02 F6 | 	mov	arg01, local01
17d6c     FC AB B0 FD | 	call	#_Hg010b_4_spin2_setcursorpos
17d70     E7 F0 03 F6 | 	mov	ptra, fp
17d74     F2 00 A0 FD | 	call	#popregs_
17d78                 | _do_position_ret
17d78     2D 00 64 FD | 	ret
17d7c                 | 
17d7c                 | ' 
17d7c                 | ' '-------------------- print
17d7c                 | ' 
17d7c                 | ' sub do_print  
17d7c                 | _do_print
17d7c     0B CA 05 F6 | 	mov	COUNT_, #11
17d80     E8 00 A0 FD | 	call	#pushregs_
17d84     00 AC 06 F6 | 	mov	local04, #0
17d88     E4 58 BF FD | 	call	#_pop
17d8c     3D AF 02 F6 | 	mov	local05, result1
17d90     3E B1 02 F6 | 	mov	local06, result2
17d94     3F B3 02 F6 | 	mov	local07, result3
17d98     57 A7 02 F6 | 	mov	local01, local05
17d9c     58 A9 02 F6 | 	mov	local02, local06
17da0     59 AB 02 F6 | 	mov	local03, local07
17da4                 | '  
17da4                 | ' r=0
17da4                 | ' t1=pop() 
17da4                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
17da4     21 AA 0E F2 | 	cmp	local03, #33 wz
17da8     22 AA 0E 52 |  if_ne	cmp	local03, #34 wz
17dac     20 00 90 5D |  if_ne	jmp	#LR__2010
17db0     55 AD 02 F6 | 	mov	local04, local03
17db4     B8 58 BF FD | 	call	#_pop
17db8     3D AF 02 F6 | 	mov	local05, result1
17dbc     3E B1 02 F6 | 	mov	local06, result2
17dc0     3F B3 02 F6 | 	mov	local07, result3
17dc4     57 A7 02 F6 | 	mov	local01, local05
17dc8     58 A9 02 F6 | 	mov	local02, local06
17dcc     59 AB 02 F6 | 	mov	local03, local07
17dd0                 | LR__2010
17dd0                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
17dd0     20 AA 0E F2 | 	cmp	local03, #32 wz
17dd4     55 AD 02 A6 |  if_e	mov	local04, local03
17dd8                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
17dd8     FF AA 0E F2 | 	cmp	local03, #255 wz
17ddc     10 00 90 5D |  if_ne	jmp	#LR__2011
17de0     53 93 02 F6 | 	mov	arg01, local01
17de4     00 94 06 F6 | 	mov	arg02, #0
17de8     E8 8E B0 FD | 	call	#_printerror
17dec     D4 04 90 FD | 	jmp	#LR__2030
17df0                 | LR__2011
17df0                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
17df0     2B AA 0E F2 | 	cmp	local03, #43 wz
17df4     14 00 90 5D |  if_ne	jmp	#LR__2012
17df8     53 93 02 F6 | 	mov	arg01, local01
17dfc     E0 59 BF FD | 	call	#_convertstring
17e00     3D AF 02 F6 | 	mov	local05, result1
17e04     57 A7 02 F6 | 	mov	local01, local05
17e08     1F AA 06 F6 | 	mov	local03, #31
17e0c                 | LR__2012
17e0c                 | ' 
17e0c                 | ' if t1.result_type=token_channel then print "Print to channel (not yet implemented)"; t1.result.iresult : t1=pop()
17e0c     2C AA 0E F2 | 	cmp	local03, #44 wz
17e10     80 00 90 5D |  if_ne	jmp	#LR__2013
17e14     00 92 06 F6 | 	mov	arg01, #0
17e18     40 21 B1 FD | 	call	#__system___getiolock_0622
17e1c     3D 93 02 F6 | 	mov	arg01, result1
17e20     B4 CB B0 FD | 	call	#__system___lockmem
17e24     98 01 00 FF 
17e28     B8 94 06 F6 | 	mov	arg02, ##@LR__6064
17e2c     00 92 06 F6 | 	mov	arg01, #0
17e30     00 96 06 F6 | 	mov	arg03, #0
17e34     94 D8 B0 FD | 	call	#__system___basic_print_string
17e38     0A B4 06 F6 | 	mov	local08, #10
17e3c     00 92 06 F6 | 	mov	arg01, #0
17e40     53 95 02 F6 | 	mov	arg02, local01
17e44     00 96 06 F6 | 	mov	arg03, #0
17e48     0A 98 06 F6 | 	mov	arg04, #10
17e4c     C0 D8 B0 FD | 	call	#__system___basic_print_integer
17e50     3D B7 02 F6 | 	mov	local09, result1
17e54     00 92 06 F6 | 	mov	arg01, #0
17e58     0A 94 06 F6 | 	mov	arg02, #10
17e5c     00 96 06 F6 | 	mov	arg03, #0
17e60     10 D8 B0 FD | 	call	#__system___basic_print_char
17e64     01 B8 06 F6 | 	mov	local10, #1
17e68     00 92 06 F6 | 	mov	arg01, #0
17e6c     EC 20 B1 FD | 	call	#__system___getiolock_0622
17e70     3D 01 68 FC | 	wrlong	#0, result1
17e74     00 BA 06 F6 | 	mov	local11, #0
17e78     F4 57 BF FD | 	call	#_pop
17e7c     3D AF 02 F6 | 	mov	local05, result1
17e80     3E B1 02 F6 | 	mov	local06, result2
17e84     3F B3 02 F6 | 	mov	local07, result3
17e88     57 A7 02 F6 | 	mov	local01, local05
17e8c     58 A9 02 F6 | 	mov	local02, local06
17e90     59 AB 02 F6 | 	mov	local03, local07
17e94                 | LR__2013
17e94                 | ' 
17e94                 | ' if r=print_mod_comma  then
17e94     21 AC 0E F2 | 	cmp	local04, #33 wz
17e98     AC 01 90 5D |  if_ne	jmp	#LR__2018
17e9c                 | '   if t1.result_type=result_int then print t1.result.iresult,
17e9c     1C AA 0E F2 | 	cmp	local03, #28 wz
17ea0     64 00 90 5D |  if_ne	jmp	#LR__2014
17ea4     00 92 06 F6 | 	mov	arg01, #0
17ea8     B0 20 B1 FD | 	call	#__system___getiolock_0622
17eac     3D 93 02 F6 | 	mov	arg01, result1
17eb0     24 CB B0 FD | 	call	#__system___lockmem
17eb4     00 B0 06 F6 | 	mov	local06, #0
17eb8     00 92 06 F6 | 	mov	arg01, #0
17ebc     53 95 02 F6 | 	mov	arg02, local01
17ec0     00 96 06 F6 | 	mov	arg03, #0
17ec4     0A 98 06 F6 | 	mov	arg04, #10
17ec8     44 D8 B0 FD | 	call	#__system___basic_print_integer
17ecc     3D B3 02 F6 | 	mov	local07, result1
17ed0     58 AF 02 F6 | 	mov	local05, local06
17ed4     59 AF 02 F1 | 	add	local05, local07
17ed8     00 BA 06 F6 | 	mov	local11, #0
17edc     00 92 06 F6 | 	mov	arg01, #0
17ee0     09 94 06 F6 | 	mov	arg02, #9
17ee4     00 96 06 F6 | 	mov	arg03, #0
17ee8     88 D7 B0 FD | 	call	#__system___basic_print_char
17eec     3D B7 02 F6 | 	mov	local09, result1
17ef0     3D AF 02 F1 | 	add	local05, result1
17ef4     00 92 06 F6 | 	mov	arg01, #0
17ef8     60 20 B1 FD | 	call	#__system___getiolock_0622
17efc     3D 01 68 FC | 	wrlong	#0, result1
17f00     00 7A 06 F6 | 	mov	result1, #0
17f04     00 B8 06 F6 | 	mov	local10, #0
17f08                 | LR__2014
17f08                 | '   if t1.result_type=result_uint then print t1.result.uresult,
17f08     1D AA 0E F2 | 	cmp	local03, #29 wz
17f0c     64 00 90 5D |  if_ne	jmp	#LR__2015
17f10     00 92 06 F6 | 	mov	arg01, #0
17f14     44 20 B1 FD | 	call	#__system___getiolock_0622
17f18     3D 93 02 F6 | 	mov	arg01, result1
17f1c     B8 CA B0 FD | 	call	#__system___lockmem
17f20     00 B0 06 F6 | 	mov	local06, #0
17f24     00 92 06 F6 | 	mov	arg01, #0
17f28     53 95 02 F6 | 	mov	arg02, local01
17f2c     00 96 06 F6 | 	mov	arg03, #0
17f30     0A 98 06 F6 | 	mov	arg04, #10
17f34     18 D8 B0 FD | 	call	#__system___basic_print_unsigned
17f38     3D B3 02 F6 | 	mov	local07, result1
17f3c     58 AF 02 F6 | 	mov	local05, local06
17f40     59 AF 02 F1 | 	add	local05, local07
17f44     00 BA 06 F6 | 	mov	local11, #0
17f48     00 92 06 F6 | 	mov	arg01, #0
17f4c     09 94 06 F6 | 	mov	arg02, #9
17f50     00 96 06 F6 | 	mov	arg03, #0
17f54     1C D7 B0 FD | 	call	#__system___basic_print_char
17f58     3D B7 02 F6 | 	mov	local09, result1
17f5c     3D AF 02 F1 | 	add	local05, result1
17f60     00 92 06 F6 | 	mov	arg01, #0
17f64     F4 1F B1 FD | 	call	#__system___getiolock_0622
17f68     3D 01 68 FC | 	wrlong	#0, result1
17f6c     00 7A 06 F6 | 	mov	result1, #0
17f70     00 B8 06 F6 | 	mov	local10, #0
17f74                 | LR__2015
17f74                 | '   if t1.result_type=result_float then print t1.result.fresult,
17f74     1E AA 0E F2 | 	cmp	local03, #30 wz
17f78     64 00 90 5D |  if_ne	jmp	#LR__2016
17f7c     00 92 06 F6 | 	mov	arg01, #0
17f80     D8 1F B1 FD | 	call	#__system___getiolock_0622
17f84     3D 93 02 F6 | 	mov	arg01, result1
17f88     4C CA B0 FD | 	call	#__system___lockmem
17f8c     00 B0 06 F6 | 	mov	local06, #0
17f90     00 92 06 F6 | 	mov	arg01, #0
17f94     53 95 02 F6 | 	mov	arg02, local01
17f98     00 96 06 F6 | 	mov	arg03, #0
17f9c     23 98 06 F6 | 	mov	arg04, #35
17fa0     28 F7 B0 FD | 	call	#__system___basic_print_float
17fa4     3D B3 02 F6 | 	mov	local07, result1
17fa8     58 AF 02 F6 | 	mov	local05, local06
17fac     59 AF 02 F1 | 	add	local05, local07
17fb0     00 BA 06 F6 | 	mov	local11, #0
17fb4     00 92 06 F6 | 	mov	arg01, #0
17fb8     09 94 06 F6 | 	mov	arg02, #9
17fbc     00 96 06 F6 | 	mov	arg03, #0
17fc0     B0 D6 B0 FD | 	call	#__system___basic_print_char
17fc4     3D B7 02 F6 | 	mov	local09, result1
17fc8     3D AF 02 F1 | 	add	local05, result1
17fcc     00 92 06 F6 | 	mov	arg01, #0
17fd0     88 1F B1 FD | 	call	#__system___getiolock_0622
17fd4     3D 01 68 FC | 	wrlong	#0, result1
17fd8     00 7A 06 F6 | 	mov	result1, #0
17fdc     00 B8 06 F6 | 	mov	local10, #0
17fe0                 | LR__2016
17fe0                 | '   if t1.result_type=result_string then print t1.result.sresult,
17fe0     1F AA 0E F2 | 	cmp	local03, #31 wz
17fe4     60 00 90 5D |  if_ne	jmp	#LR__2017
17fe8     00 92 06 F6 | 	mov	arg01, #0
17fec     6C 1F B1 FD | 	call	#__system___getiolock_0622
17ff0     3D 93 02 F6 | 	mov	arg01, result1
17ff4     E0 C9 B0 FD | 	call	#__system___lockmem
17ff8     00 B0 06 F6 | 	mov	local06, #0
17ffc     00 92 06 F6 | 	mov	arg01, #0
18000     53 95 02 F6 | 	mov	arg02, local01
18004     00 96 06 F6 | 	mov	arg03, #0
18008     C0 D6 B0 FD | 	call	#__system___basic_print_string
1800c     3D B3 02 F6 | 	mov	local07, result1
18010     58 AF 02 F6 | 	mov	local05, local06
18014     59 AF 02 F1 | 	add	local05, local07
18018     00 BA 06 F6 | 	mov	local11, #0
1801c     00 92 06 F6 | 	mov	arg01, #0
18020     09 94 06 F6 | 	mov	arg02, #9
18024     00 96 06 F6 | 	mov	arg03, #0
18028     48 D6 B0 FD | 	call	#__system___basic_print_char
1802c     3D B7 02 F6 | 	mov	local09, result1
18030     3D AF 02 F1 | 	add	local05, result1
18034     00 92 06 F6 | 	mov	arg01, #0
18038     20 1F B1 FD | 	call	#__system___getiolock_0622
1803c     3D 01 68 FC | 	wrlong	#0, result1
18040     00 7A 06 F6 | 	mov	result1, #0
18044     00 B8 06 F6 | 	mov	local10, #0
18048                 | LR__2017
18048                 | LR__2018
18048                 | ' if r=print_mod_semicolon then 
18048     22 AC 0E F2 | 	cmp	local04, #34 wz
1804c     1C 01 90 5D |  if_ne	jmp	#LR__2023
18050                 | '   if t1.result_type=result_int then print t1.result.iresult;
18050     1C AA 0E F2 | 	cmp	local03, #28 wz
18054     50 00 90 5D |  if_ne	jmp	#LR__2019
18058     00 92 06 F6 | 	mov	arg01, #0
1805c     FC 1E B1 FD | 	call	#__system___getiolock_0622
18060     3D 93 02 F6 | 	mov	arg01, result1
18064     70 C9 B0 FD | 	call	#__system___lockmem
18068     00 B0 06 F6 | 	mov	local06, #0
1806c     00 B8 06 F6 | 	mov	local10, #0
18070     0A BA 06 F6 | 	mov	local11, #10
18074     00 92 06 F6 | 	mov	arg01, #0
18078     53 95 02 F6 | 	mov	arg02, local01
1807c     00 96 06 F6 | 	mov	arg03, #0
18080     0A 98 06 F6 | 	mov	arg04, #10
18084     88 D6 B0 FD | 	call	#__system___basic_print_integer
18088     3D B3 02 F6 | 	mov	local07, result1
1808c     58 AF 02 F6 | 	mov	local05, local06
18090     59 AF 02 F1 | 	add	local05, local07
18094     00 92 06 F6 | 	mov	arg01, #0
18098     C0 1E B1 FD | 	call	#__system___getiolock_0622
1809c     3D 01 68 FC | 	wrlong	#0, result1
180a0     00 7A 06 F6 | 	mov	result1, #0
180a4     00 B6 06 F6 | 	mov	local09, #0
180a8                 | LR__2019
180a8                 | '   if t1.result_type=result_uint then print t1.result.uresult;
180a8     1D AA 0E F2 | 	cmp	local03, #29 wz
180ac     50 00 90 5D |  if_ne	jmp	#LR__2020
180b0     00 92 06 F6 | 	mov	arg01, #0
180b4     A4 1E B1 FD | 	call	#__system___getiolock_0622
180b8     3D 93 02 F6 | 	mov	arg01, result1
180bc     18 C9 B0 FD | 	call	#__system___lockmem
180c0     00 B0 06 F6 | 	mov	local06, #0
180c4     00 B8 06 F6 | 	mov	local10, #0
180c8     0A BA 06 F6 | 	mov	local11, #10
180cc     00 92 06 F6 | 	mov	arg01, #0
180d0     53 95 02 F6 | 	mov	arg02, local01
180d4     00 96 06 F6 | 	mov	arg03, #0
180d8     0A 98 06 F6 | 	mov	arg04, #10
180dc     70 D6 B0 FD | 	call	#__system___basic_print_unsigned
180e0     3D B3 02 F6 | 	mov	local07, result1
180e4     58 AF 02 F6 | 	mov	local05, local06
180e8     59 AF 02 F1 | 	add	local05, local07
180ec     00 92 06 F6 | 	mov	arg01, #0
180f0     68 1E B1 FD | 	call	#__system___getiolock_0622
180f4     3D 01 68 FC | 	wrlong	#0, result1
180f8     00 7A 06 F6 | 	mov	result1, #0
180fc     00 B6 06 F6 | 	mov	local09, #0
18100                 | LR__2020
18100                 | '   if t1.result_type=result_float then print t1.result.fresult;
18100     1E AA 0E F2 | 	cmp	local03, #30 wz
18104     30 00 90 5D |  if_ne	jmp	#LR__2021
18108     00 92 06 F6 | 	mov	arg01, #0
1810c     4C 1E B1 FD | 	call	#__system___getiolock_0622
18110     3D 93 02 F6 | 	mov	arg01, result1
18114     C0 C8 B0 FD | 	call	#__system___lockmem
18118     00 92 06 F6 | 	mov	arg01, #0
1811c     53 95 02 F6 | 	mov	arg02, local01
18120     00 96 06 F6 | 	mov	arg03, #0
18124     23 98 06 F6 | 	mov	arg04, #35
18128     A0 F5 B0 FD | 	call	#__system___basic_print_float
1812c     00 92 06 F6 | 	mov	arg01, #0
18130     28 1E B1 FD | 	call	#__system___getiolock_0622
18134     3D 01 68 FC | 	wrlong	#0, result1
18138                 | LR__2021
18138                 | '   if t1.result_type=result_string then print t1.result.sresult;
18138     1F AA 0E F2 | 	cmp	local03, #31 wz
1813c     2C 00 90 5D |  if_ne	jmp	#LR__2022
18140     00 92 06 F6 | 	mov	arg01, #0
18144     14 1E B1 FD | 	call	#__system___getiolock_0622
18148     3D 93 02 F6 | 	mov	arg01, result1
1814c     88 C8 B0 FD | 	call	#__system___lockmem
18150     00 92 06 F6 | 	mov	arg01, #0
18154     53 95 02 F6 | 	mov	arg02, local01
18158     00 96 06 F6 | 	mov	arg03, #0
1815c     6C D5 B0 FD | 	call	#__system___basic_print_string
18160     00 92 06 F6 | 	mov	arg01, #0
18164     F4 1D B1 FD | 	call	#__system___getiolock_0622
18168     3D 01 68 FC | 	wrlong	#0, result1
1816c                 | LR__2022
1816c                 | LR__2023
1816c                 | ' if r=0 then 
1816c     00 AC 0E F2 | 	cmp	local04, #0 wz
18170     1C 01 90 5D |  if_ne	jmp	#LR__2028
18174                 | '   if t1.result_type=result_int then print t1.result.iresult
18174     1C AA 0E F2 | 	cmp	local03, #28 wz
18178     40 00 90 5D |  if_ne	jmp	#LR__2024
1817c     00 92 06 F6 | 	mov	arg01, #0
18180     D8 1D B1 FD | 	call	#__system___getiolock_0622
18184     3D 93 02 F6 | 	mov	arg01, result1
18188     4C C8 B0 FD | 	call	#__system___lockmem
1818c     00 92 06 F6 | 	mov	arg01, #0
18190     53 95 02 F6 | 	mov	arg02, local01
18194     00 96 06 F6 | 	mov	arg03, #0
18198     0A 98 06 F6 | 	mov	arg04, #10
1819c     70 D5 B0 FD | 	call	#__system___basic_print_integer
181a0     00 92 06 F6 | 	mov	arg01, #0
181a4     0A 94 06 F6 | 	mov	arg02, #10
181a8     00 96 06 F6 | 	mov	arg03, #0
181ac     C4 D4 B0 FD | 	call	#__system___basic_print_char
181b0     00 92 06 F6 | 	mov	arg01, #0
181b4     A4 1D B1 FD | 	call	#__system___getiolock_0622
181b8     3D 01 68 FC | 	wrlong	#0, result1
181bc                 | LR__2024
181bc                 | '   if t1.result_type=result_uint then print t1.result.uresult
181bc     1D AA 0E F2 | 	cmp	local03, #29 wz
181c0     40 00 90 5D |  if_ne	jmp	#LR__2025
181c4     00 92 06 F6 | 	mov	arg01, #0
181c8     90 1D B1 FD | 	call	#__system___getiolock_0622
181cc     3D 93 02 F6 | 	mov	arg01, result1
181d0     04 C8 B0 FD | 	call	#__system___lockmem
181d4     00 92 06 F6 | 	mov	arg01, #0
181d8     53 95 02 F6 | 	mov	arg02, local01
181dc     00 96 06 F6 | 	mov	arg03, #0
181e0     0A 98 06 F6 | 	mov	arg04, #10
181e4     68 D5 B0 FD | 	call	#__system___basic_print_unsigned
181e8     00 92 06 F6 | 	mov	arg01, #0
181ec     0A 94 06 F6 | 	mov	arg02, #10
181f0     00 96 06 F6 | 	mov	arg03, #0
181f4     7C D4 B0 FD | 	call	#__system___basic_print_char
181f8     00 92 06 F6 | 	mov	arg01, #0
181fc     5C 1D B1 FD | 	call	#__system___getiolock_0622
18200     3D 01 68 FC | 	wrlong	#0, result1
18204                 | LR__2025
18204                 | '   if t1.result_type=result_float then print t1.result.fresult
18204     1E AA 0E F2 | 	cmp	local03, #30 wz
18208     40 00 90 5D |  if_ne	jmp	#LR__2026
1820c     00 92 06 F6 | 	mov	arg01, #0
18210     48 1D B1 FD | 	call	#__system___getiolock_0622
18214     3D 93 02 F6 | 	mov	arg01, result1
18218     BC C7 B0 FD | 	call	#__system___lockmem
1821c     00 92 06 F6 | 	mov	arg01, #0
18220     53 95 02 F6 | 	mov	arg02, local01
18224     00 96 06 F6 | 	mov	arg03, #0
18228     23 98 06 F6 | 	mov	arg04, #35
1822c     9C F4 B0 FD | 	call	#__system___basic_print_float
18230     00 92 06 F6 | 	mov	arg01, #0
18234     0A 94 06 F6 | 	mov	arg02, #10
18238     00 96 06 F6 | 	mov	arg03, #0
1823c     34 D4 B0 FD | 	call	#__system___basic_print_char
18240     00 92 06 F6 | 	mov	arg01, #0
18244     14 1D B1 FD | 	call	#__system___getiolock_0622
18248     3D 01 68 FC | 	wrlong	#0, result1
1824c                 | LR__2026
1824c                 | '   if t1.result_type=result_string then print t1.result.sresult
1824c     1F AA 0E F2 | 	cmp	local03, #31 wz
18250     3C 00 90 5D |  if_ne	jmp	#LR__2027
18254     00 92 06 F6 | 	mov	arg01, #0
18258     00 1D B1 FD | 	call	#__system___getiolock_0622
1825c     3D 93 02 F6 | 	mov	arg01, result1
18260     74 C7 B0 FD | 	call	#__system___lockmem
18264     00 92 06 F6 | 	mov	arg01, #0
18268     53 95 02 F6 | 	mov	arg02, local01
1826c     00 96 06 F6 | 	mov	arg03, #0
18270     58 D4 B0 FD | 	call	#__system___basic_print_string
18274     00 92 06 F6 | 	mov	arg01, #0
18278     0A 94 06 F6 | 	mov	arg02, #10
1827c     00 96 06 F6 | 	mov	arg03, #0
18280     F0 D3 B0 FD | 	call	#__system___basic_print_char
18284     00 92 06 F6 | 	mov	arg01, #0
18288     D0 1C B1 FD | 	call	#__system___getiolock_0622
1828c     3D 01 68 FC | 	wrlong	#0, result1
18290                 | LR__2027
18290                 | LR__2028
18290                 | ' if r=print_mod_empty then print
18290     20 AC 0E F2 | 	cmp	local04, #32 wz
18294     2C 00 90 5D |  if_ne	jmp	#LR__2029
18298     00 92 06 F6 | 	mov	arg01, #0
1829c     BC 1C B1 FD | 	call	#__system___getiolock_0622
182a0     3D 93 02 F6 | 	mov	arg01, result1
182a4     30 C7 B0 FD | 	call	#__system___lockmem
182a8     00 92 06 F6 | 	mov	arg01, #0
182ac     0A 94 06 F6 | 	mov	arg02, #10
182b0     00 96 06 F6 | 	mov	arg03, #0
182b4     BC D3 B0 FD | 	call	#__system___basic_print_char
182b8     00 92 06 F6 | 	mov	arg01, #0
182bc     9C 1C B1 FD | 	call	#__system___getiolock_0622
182c0     3D 01 68 FC | 	wrlong	#0, result1
182c4                 | LR__2029
182c4                 | LR__2030
182c4     E7 F0 03 F6 | 	mov	ptra, fp
182c8     F2 00 A0 FD | 	call	#popregs_
182cc                 | _do_print_ret
182cc     2D 00 64 FD | 	ret
182d0                 | 
182d0                 | ' 
182d0                 | ' ' ------------------- push a variable on the stack. No command for this, a variable is a command
182d0                 | ' 
182d0                 | ' sub do_push
182d0                 | _do_push
182d0                 | ' if stackpointer<maxstack then 
182d0     44 00 00 FF 
182d4     FC 65 06 F1 | 	add	objptr, ##35324
182d8     32 81 02 FB | 	rdlong	_var01, objptr
182dc     44 00 00 FF 
182e0     FC 65 86 F1 | 	sub	objptr, ##35324
182e4     01 00 00 FF 
182e8     00 80 56 F2 | 	cmps	_var01, ##512 wc
182ec     F8 00 90 3D |  if_ae	jmp	#LR__2040
182f0     4C 00 00 FF 
182f4     24 64 06 F1 | 	add	objptr, ##38948
182f8     32 83 02 FB | 	rdlong	_var02, objptr
182fc     41 85 02 F6 | 	mov	_var03, _var02
18300     01 84 66 F0 | 	shl	_var03, #1
18304     41 85 02 F1 | 	add	_var03, _var02
18308     02 84 66 F0 | 	shl	_var03, #2
1830c     03 00 00 FF 
18310     04 64 86 F1 | 	sub	objptr, ##1540
18314     32 85 02 F1 | 	add	_var03, objptr
18318     42 81 02 FB | 	rdlong	_var01, _var03
1831c     04 84 06 F1 | 	add	_var03, #4
18320     42 87 02 FB | 	rdlong	_var04, _var03
18324     41 85 02 F6 | 	mov	_var03, _var02
18328     01 84 66 F0 | 	shl	_var03, #1
1832c     41 85 02 F1 | 	add	_var03, _var02
18330     02 84 66 F0 | 	shl	_var03, #2
18334     32 85 02 F1 | 	add	_var03, objptr
18338     08 84 06 F1 | 	add	_var03, #8
1833c     42 83 02 FB | 	rdlong	_var02, _var03
18340     04 00 00 FF 
18344     24 64 86 F1 | 	sub	objptr, ##2084
18348     32 85 02 FB | 	rdlong	_var03, objptr
1834c     42 89 02 F6 | 	mov	_var05, _var03
18350     01 88 66 F0 | 	shl	_var05, #1
18354     42 89 02 F1 | 	add	_var05, _var03
18358     02 88 66 F0 | 	shl	_var05, #2
1835c     0C 00 00 FF 
18360     0C 64 86 F1 | 	sub	objptr, ##6156
18364     32 89 02 F1 | 	add	_var05, objptr
18368     44 81 62 FC | 	wrlong	_var01, _var05
1836c     0C 00 00 FF 
18370     0C 64 06 F1 | 	add	objptr, ##6156
18374     32 89 02 FB | 	rdlong	_var05, objptr
18378     44 85 02 F6 | 	mov	_var03, _var05
1837c     01 84 66 F0 | 	shl	_var03, #1
18380     44 85 02 F1 | 	add	_var03, _var05
18384     02 84 66 F0 | 	shl	_var03, #2
18388     0C 00 00 FF 
1838c     0C 64 86 F1 | 	sub	objptr, ##6156
18390     32 85 02 F1 | 	add	_var03, objptr
18394     04 84 06 F1 | 	add	_var03, #4
18398     42 87 62 FC | 	wrlong	_var04, _var03
1839c     0C 00 00 FF 
183a0     0C 64 06 F1 | 	add	objptr, ##6156
183a4     32 89 02 FB | 	rdlong	_var05, objptr
183a8     44 87 02 F6 | 	mov	_var04, _var05
183ac     01 86 66 F0 | 	shl	_var04, #1
183b0     44 87 02 F1 | 	add	_var04, _var05
183b4     02 86 66 F0 | 	shl	_var04, #2
183b8     0C 00 00 FF 
183bc     0C 64 86 F1 | 	sub	objptr, ##6156
183c0     32 87 02 F1 | 	add	_var04, objptr
183c4     08 86 06 F1 | 	add	_var04, #8
183c8     43 83 62 FC | 	wrlong	_var02, _var04
183cc     0C 00 00 FF 
183d0     0C 64 06 F1 | 	add	objptr, ##6156
183d4     32 81 02 FB | 	rdlong	_var01, objptr
183d8     01 80 06 F1 | 	add	_var01, #1
183dc     32 81 62 FC | 	wrlong	_var01, objptr
183e0     44 00 00 FF 
183e4     FC 65 86 F1 | 	sub	objptr, ##35324
183e8                 | LR__2040
183e8                 | _do_push_ret
183e8     2D 00 64 FD | 	ret
183ec                 | 
183ec                 | ' 
183ec                 | ' '-------------------- put
183ec                 | ' 
183ec                 | ' sub do_put			' put  #chn,addr,(amount,(pos))
183ec                 | _do_put
183ec     07 CA 05 F6 | 	mov	COUNT_, #7
183f0     E8 00 A0 FD | 	call	#pushregs_
183f4     28 F0 07 F1 | 	add	ptra, #40
183f8     4C 00 00 FF 
183fc     24 64 06 F1 | 	add	objptr, ##38948
18400     32 9B 02 FB | 	rdlong	arg05, objptr
18404     4D 99 02 F6 | 	mov	arg04, arg05
18408     01 98 66 F0 | 	shl	arg04, #1
1840c     4D 99 02 F1 | 	add	arg04, arg05
18410     02 98 66 F0 | 	shl	arg04, #2
18414     03 00 00 FF 
18418     04 64 86 F1 | 	sub	objptr, ##1540
1841c     32 99 02 F1 | 	add	arg04, objptr
18420     4C A7 02 FB | 	rdlong	local01, arg04
18424                 | ' 
18424                 | ' numpar=compiledline(lineptr_e).result.uresult
18424                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
18424     04 A6 0E F2 | 	cmp	local01, #4 wz
18428     49 00 00 FF 
1842c     20 64 86 F1 | 	sub	objptr, ##37408
18430     48 00 90 5D |  if_ne	jmp	#LR__2050
18434     38 52 BF FD | 	call	#_pop
18438     3F 9B 02 F6 | 	mov	arg05, result3
1843c     1C CE 05 F1 | 	add	fp, #28
18440     E7 7A 62 FC | 	wrlong	result1, fp
18444     04 CE 05 F1 | 	add	fp, #4
18448     E7 7C 62 FC | 	wrlong	result2, fp
1844c     04 CE 05 F1 | 	add	fp, #4
18450     E7 9A 62 FC | 	wrlong	arg05, fp
18454     08 CE 85 F1 | 	sub	fp, #8
18458     E7 92 02 F6 | 	mov	arg01, fp
1845c     1C CE 85 F1 | 	sub	fp, #28
18460     E8 53 BF FD | 	call	#_converttoint
18464     54 00 00 FF 
18468     E8 64 06 F1 | 	add	objptr, ##43240
1846c     32 7B 62 FC | 	wrlong	result1, objptr
18470     54 00 00 FF 
18474     E8 64 86 F1 | 	sub	objptr, ##43240
18478     18 00 90 FD | 	jmp	#LR__2051
1847c                 | LR__2050
1847c     54 00 00 FF 
18480     E8 64 06 F1 | 	add	objptr, ##43240
18484     FF FF FF FF 
18488     32 FF 6B FC | 	wrlong	##-1, objptr
1848c     54 00 00 FF 
18490     E8 64 86 F1 | 	sub	objptr, ##43240
18494                 | LR__2051
18494                 | ' if numpar>=3 then t1=pop() : amount=converttoint(t1) else amount=1
18494     03 A6 56 F2 | 	cmps	local01, #3 wc
18498     38 00 90 CD |  if_b	jmp	#LR__2052
1849c     D0 51 BF FD | 	call	#_pop
184a0     3F 9B 02 F6 | 	mov	arg05, result3
184a4     1C CE 05 F1 | 	add	fp, #28
184a8     E7 7A 62 FC | 	wrlong	result1, fp
184ac     04 CE 05 F1 | 	add	fp, #4
184b0     E7 7C 62 FC | 	wrlong	result2, fp
184b4     04 CE 05 F1 | 	add	fp, #4
184b8     E7 9A 62 FC | 	wrlong	arg05, fp
184bc     08 CE 85 F1 | 	sub	fp, #8
184c0     E7 92 02 F6 | 	mov	arg01, fp
184c4     1C CE 85 F1 | 	sub	fp, #28
184c8     80 53 BF FD | 	call	#_converttoint
184cc     3D A9 02 F6 | 	mov	local02, result1
184d0     04 00 90 FD | 	jmp	#LR__2053
184d4                 | LR__2052
184d4     01 A8 06 F6 | 	mov	local02, #1
184d8                 | LR__2053
184d8                 | ' if numpar>=2 then t1=pop() : adr=converttoint(t1)
184d8     02 A6 56 F2 | 	cmps	local01, #2 wc
184dc     34 00 90 CD |  if_b	jmp	#LR__2054
184e0     8C 51 BF FD | 	call	#_pop
184e4     3F A7 02 F6 | 	mov	local01, result3
184e8     1C CE 05 F1 | 	add	fp, #28
184ec     E7 7A 62 FC | 	wrlong	result1, fp
184f0     04 CE 05 F1 | 	add	fp, #4
184f4     E7 7C 62 FC | 	wrlong	result2, fp
184f8     04 CE 05 F1 | 	add	fp, #4
184fc     E7 A6 62 FC | 	wrlong	local01, fp
18500     08 CE 85 F1 | 	sub	fp, #8
18504     E7 92 02 F6 | 	mov	arg01, fp
18508     1C CE 85 F1 | 	sub	fp, #28
1850c     3C 53 BF FD | 	call	#_converttoint
18510     3D AB 02 F6 | 	mov	local03, result1
18514                 | LR__2054
18514     58 51 BF FD | 	call	#_pop
18518     3F A7 02 F6 | 	mov	local01, result3
1851c     1C CE 05 F1 | 	add	fp, #28
18520     E7 7A 62 FC | 	wrlong	result1, fp
18524     04 CE 05 F1 | 	add	fp, #4
18528     E7 7C 62 FC | 	wrlong	result2, fp
1852c     04 CE 05 F1 | 	add	fp, #4
18530     E7 A6 62 FC | 	wrlong	local01, fp
18534     08 CE 85 F1 | 	sub	fp, #8
18538     E7 92 02 F6 | 	mov	arg01, fp
1853c     1C CE 85 F1 | 	sub	fp, #28
18540     08 53 BF FD | 	call	#_converttoint
18544     3D AD 02 F6 | 	mov	local04, result1
18548     02 AE 66 F0 | 	shl	local05, #2
1854c     52 00 00 FF 
18550     68 64 06 F1 | 	add	objptr, ##42088
18554     32 AF 02 F1 | 	add	local05, objptr
18558     57 01 68 FC | 	wrlong	#0, local05
1855c                 | ' t1=pop() : channel=converttoint(t1)
1855c                 | ' getres(j)=0
1855c                 | ' if pos>=0 then
1855c     02 00 00 FF 
18560     80 64 06 F1 | 	add	objptr, ##1152
18564     32 B1 02 FB | 	rdlong	local06, objptr
18568     54 00 00 FF 
1856c     E8 64 86 F1 | 	sub	objptr, ##43240
18570     00 B0 56 F2 | 	cmps	local06, #0 wc
18574     08 01 90 CD |  if_b	jmp	#LR__2060
18578     00 B2 06 F6 | 	mov	local07, #0
1857c                 | '    i=0: do
1857c                 | LR__2055
1857c     00 AE 06 F6 | 	mov	local05, #0
18580                 | '    j=0: do    
18580                 | LR__2056
18580                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
18580     00 04 00 FF 
18584     00 AA 56 F2 | 	cmps	local03, ##524288 wc
18588     34 00 90 3D |  if_ae	jmp	#LR__2057
1858c     57 B1 02 F6 | 	mov	local06, local05
18590     32 A7 02 F6 | 	mov	local01, objptr
18594     50 00 00 FF 
18598     58 A6 06 F1 | 	add	local01, ##41048
1859c     53 B1 02 F1 | 	add	local06, local01
185a0     55 93 02 F6 | 	mov	arg01, local03
185a4     59 A7 02 F6 | 	mov	local01, local07
185a8     0A A6 66 F0 | 	shl	local01, #10
185ac     53 93 02 F1 | 	add	arg01, local01
185b0     57 93 02 F1 | 	add	arg01, local05
185b4     49 7B C2 FA | 	rdbyte	result1, arg01
185b8     58 7B 42 FC | 	wrbyte	result1, local06
185bc     30 00 90 FD | 	jmp	#LR__2058
185c0                 | LR__2057
185c0     57 B1 02 F6 | 	mov	local06, local05
185c4     32 A7 02 F6 | 	mov	local01, objptr
185c8     50 00 00 FF 
185cc     58 A6 06 F1 | 	add	local01, ##41048
185d0     53 B1 02 F1 | 	add	local06, local01
185d4     55 93 02 F6 | 	mov	arg01, local03
185d8     59 A7 02 F6 | 	mov	local01, local07
185dc     0A A6 66 F0 | 	shl	local01, #10
185e0     53 93 02 F1 | 	add	arg01, local01
185e4     57 93 02 F1 | 	add	arg01, local05
185e8     5C 89 B0 FD | 	call	#_pspeek
185ec     58 7B 42 FC | 	wrbyte	result1, local06
185f0                 | LR__2058
185f0     01 AE 06 F1 | 	add	local05, #1
185f4     02 00 00 FF 
185f8     00 AE 56 F2 | 	cmps	local05, ##1024 wc
185fc     14 00 90 3D |  if_ae	jmp	#LR__2059
18600     59 B1 02 F6 | 	mov	local06, local07
18604     0A B0 66 F0 | 	shl	local06, #10
18608     57 B1 02 F1 | 	add	local06, local05
1860c     54 B1 5A F2 | 	cmps	local06, local02 wcz
18610     6C FF 9F ED |  if_be	jmp	#LR__2056
18614                 | LR__2059
18614                 | '    put #channel, pos+1,block(0),amount, r : getres(channel)=r
18614     54 00 00 FF 
18618     E8 64 06 F1 | 	add	objptr, ##43240
1861c     32 95 02 FB | 	rdlong	arg02, objptr
18620     01 94 06 F1 | 	add	arg02, #1
18624     04 00 00 FF 
18628     90 64 86 F1 | 	sub	objptr, ##2192
1862c     32 97 02 F6 | 	mov	arg03, objptr
18630     50 00 00 FF 
18634     58 64 86 F1 | 	sub	objptr, ##41048
18638     54 99 02 F6 | 	mov	arg04, local02
1863c     56 93 02 F6 | 	mov	arg01, local04
18640     01 9A 06 F6 | 	mov	arg05, #1
18644     94 D1 B0 FD | 	call	#__system___basic_put
18648     56 B1 02 F6 | 	mov	local06, local04
1864c     02 B0 66 F0 | 	shl	local06, #2
18650     32 A7 02 F6 | 	mov	local01, objptr
18654     52 00 00 FF 
18658     68 A6 06 F1 | 	add	local01, ##42088
1865c     53 B1 02 F1 | 	add	local06, local01
18660     58 7B 62 FC | 	wrlong	result1, local06
18664                 | '    if 1024*i+j>amount then exit loop
18664     59 B1 02 F6 | 	mov	local06, local07
18668     0A B0 66 F0 | 	shl	local06, #10
1866c     57 B1 02 F1 | 	add	local06, local05
18670     54 B1 5A F2 | 	cmps	local06, local02 wcz
18674     F8 00 90 1D |  if_a	jmp	#LR__2066
18678     01 B2 06 F1 | 	add	local07, #1
1867c     FC FE 9F FD | 	jmp	#LR__2055
18680                 | LR__2060
18680     00 B2 06 F6 | 	mov	local07, #0
18684                 | '    i=0: do
18684                 | LR__2061
18684     00 AE 06 F6 | 	mov	local05, #0
18688                 | '    j=0: do  
18688                 | LR__2062
18688                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
18688     00 04 00 FF 
1868c     00 AA 56 F2 | 	cmps	local03, ##524288 wc
18690     34 00 90 3D |  if_ae	jmp	#LR__2063
18694     57 B1 02 F6 | 	mov	local06, local05
18698     32 A7 02 F6 | 	mov	local01, objptr
1869c     50 00 00 FF 
186a0     58 A6 06 F1 | 	add	local01, ##41048
186a4     53 B1 02 F1 | 	add	local06, local01
186a8     55 93 02 F6 | 	mov	arg01, local03
186ac     59 A7 02 F6 | 	mov	local01, local07
186b0     0A A6 66 F0 | 	shl	local01, #10
186b4     53 93 02 F1 | 	add	arg01, local01
186b8     57 93 02 F1 | 	add	arg01, local05
186bc     49 7B C2 FA | 	rdbyte	result1, arg01
186c0     58 7B 42 FC | 	wrbyte	result1, local06
186c4     30 00 90 FD | 	jmp	#LR__2064
186c8                 | LR__2063
186c8     57 B1 02 F6 | 	mov	local06, local05
186cc     32 A7 02 F6 | 	mov	local01, objptr
186d0     50 00 00 FF 
186d4     58 A6 06 F1 | 	add	local01, ##41048
186d8     53 B1 02 F1 | 	add	local06, local01
186dc     55 93 02 F6 | 	mov	arg01, local03
186e0     59 A7 02 F6 | 	mov	local01, local07
186e4     0A A6 66 F0 | 	shl	local01, #10
186e8     53 93 02 F1 | 	add	arg01, local01
186ec     57 93 02 F1 | 	add	arg01, local05
186f0     54 88 B0 FD | 	call	#_pspeek
186f4     58 7B 42 FC | 	wrbyte	result1, local06
186f8                 | LR__2064
186f8     01 AE 06 F1 | 	add	local05, #1
186fc     02 00 00 FF 
18700     00 AE 56 F2 | 	cmps	local05, ##1024 wc
18704     14 00 90 3D |  if_ae	jmp	#LR__2065
18708     59 B1 02 F6 | 	mov	local06, local07
1870c     0A B0 66 F0 | 	shl	local06, #10
18710     57 B1 02 F1 | 	add	local06, local05
18714     54 B1 5A F2 | 	cmps	local06, local02 wcz
18718     6C FF 9F ED |  if_be	jmp	#LR__2062
1871c                 | LR__2065
1871c                 | '    put #channel,,block(0),amount, r : getres(channel)=r
1871c     32 97 02 F6 | 	mov	arg03, objptr
18720     50 00 00 FF 
18724     58 96 06 F1 | 	add	arg03, ##41048
18728     54 99 02 F6 | 	mov	arg04, local02
1872c     56 93 02 F6 | 	mov	arg01, local04
18730     00 94 06 F6 | 	mov	arg02, #0
18734     01 9A 06 F6 | 	mov	arg05, #1
18738     A0 D0 B0 FD | 	call	#__system___basic_put
1873c     56 B1 02 F6 | 	mov	local06, local04
18740     02 B0 66 F0 | 	shl	local06, #2
18744     32 A7 02 F6 | 	mov	local01, objptr
18748     52 00 00 FF 
1874c     68 A6 06 F1 | 	add	local01, ##42088
18750     53 B1 02 F1 | 	add	local06, local01
18754     58 7B 62 FC | 	wrlong	result1, local06
18758                 | '    if 1024*i+j>amount then exit loop
18758     59 B1 02 F6 | 	mov	local06, local07
1875c     0A B0 66 F0 | 	shl	local06, #10
18760     57 B1 02 F1 | 	add	local06, local05
18764     54 B1 5A F2 | 	cmps	local06, local02 wcz
18768     01 B2 06 E1 |  if_be	add	local07, #1
1876c     14 FF 9F ED |  if_be	jmp	#LR__2061
18770                 | LR__2066
18770     E7 F0 03 F6 | 	mov	ptra, fp
18774     F2 00 A0 FD | 	call	#popregs_
18778                 | _do_put_ret
18778     2D 00 64 FD | 	ret
1877c                 | 
1877c                 | ' 
1877c                 | ' '-------------------- rad
1877c                 | ' 
1877c                 | ' sub do_rad
1877c                 | _do_rad
1877c     54 00 00 FF 
18780     84 64 06 F1 | 	add	objptr, ##43140
18784     00 C0 9F FF 
18788     32 01 68 FC | 	wrlong	##1065353216, objptr
1878c     04 64 06 F1 | 	add	objptr, #4
18790     00 C0 9F FF 
18794     32 01 68 FC | 	wrlong	##1065353216, objptr
18798     54 00 00 FF 
1879c     88 64 86 F1 | 	sub	objptr, ##43144
187a0                 | _do_rad_ret
187a0     2D 00 64 FD | 	ret
187a4                 | 
187a4                 | ' 
187a4                 | ' '-------------------- rdpin
187a4                 | ' 
187a4                 | ' sub do_rdpin
187a4                 | _do_rdpin
187a4     00 CA 05 F6 | 	mov	COUNT_, #0
187a8     E8 00 A0 FD | 	call	#pushregs_
187ac     0C F0 07 F1 | 	add	ptra, #12
187b0     BC 4E BF FD | 	call	#_pop
187b4     E7 7A 62 FC | 	wrlong	result1, fp
187b8     04 CE 05 F1 | 	add	fp, #4
187bc     E7 7C 62 FC | 	wrlong	result2, fp
187c0     04 CE 05 F1 | 	add	fp, #4
187c4     E7 7E 62 FC | 	wrlong	result3, fp
187c8     08 CE 85 F1 | 	sub	fp, #8
187cc     E7 92 02 F6 | 	mov	arg01, fp
187d0     78 50 BF FD | 	call	#_converttoint
187d4     3D 7B 8A FA | 	rdpin	result1, result1
187d8     54 00 00 FF 
187dc     EC 64 06 F1 | 	add	objptr, ##43244
187e0     32 7B 62 FC | 	wrlong	result1, objptr
187e4     54 00 00 FF 
187e8     EC 64 86 F1 | 	sub	objptr, ##43244
187ec     08 CE 05 F1 | 	add	fp, #8
187f0     E7 3A 68 FC | 	wrlong	#29, fp
187f4     08 CE 85 F1 | 	sub	fp, #8
187f8     E7 08 68 FC | 	wrlong	#4, fp
187fc     E7 92 02 F6 | 	mov	arg01, fp
18800     FC 4E BF FD | 	call	#_push
18804     E7 F0 03 F6 | 	mov	ptra, fp
18808     F2 00 A0 FD | 	call	#popregs_
1880c                 | _do_rdpin_ret
1880c     2D 00 64 FD | 	ret
18810                 | 
18810                 | ' 
18810                 | ' ' ----------------  read
18810                 | ' 
18810                 | ' function read_next_line() as string
18810                 | _read_next_line
18810     07 CA 05 F6 | 	mov	COUNT_, #7
18814     E8 00 A0 FD | 	call	#pushregs_
18818                 | ' if dataptr=$7FFFFFFF then return("")
18818     52 00 00 FF 
1881c     D0 64 06 F1 | 	add	objptr, ##42192
18820     32 A7 02 FB | 	rdlong	local01, objptr
18824     52 00 00 FF 
18828     D0 64 86 F1 | 	sub	objptr, ##42192
1882c     FF FF 3F FF 
18830     FF A7 0E F2 | 	cmp	local01, ##2147483647 wz
18834     98 01 00 AF 
18838     DF 7A 06 A6 |  if_e	mov	result1, ##@LR__6065
1883c     C0 01 90 AD |  if_e	jmp	#LR__2077
18840                 | ' do
18840                 | LR__2070
18840     32 93 02 F6 | 	mov	arg01, objptr
18844     52 00 00 FF 
18848     AC 92 06 F1 | 	add	arg01, ##42156
1884c     52 00 00 FF 
18850     D0 64 06 F1 | 	add	objptr, ##42192
18854     32 95 02 FB | 	rdlong	arg02, objptr
18858     24 96 06 F6 | 	mov	arg03, #36
1885c     47 00 00 FF 
18860     04 64 86 F1 | 	sub	objptr, ##36356
18864     FC B1 B0 FD | 	call	#_psram4_spin2_read1
18868                 | '  ' print dataptr
18868                 | '   psram.read1(varptr(dataheader),dataptr,36) 
18868                 | '   if dataheader(0)<>$FFFFFFFF then dataptr=dataheader(5)
18868     46 00 00 FF 
1886c     E0 65 06 F1 | 	add	objptr, ##36320
18870     32 A7 02 FB | 	rdlong	local01, objptr
18874     52 00 00 FF 
18878     AC 64 86 F1 | 	sub	objptr, ##42156
1887c     FF FF 7F FF 
18880     FF A7 0E F2 | 	cmp	local01, ##-1 wz
18884     52 00 00 5F 
18888     C0 64 06 51 |  if_ne	add	objptr, ##42176
1888c     32 A7 02 5B |  if_ne	rdlong	local01, objptr
18890     10 64 06 51 |  if_ne	add	objptr, #16
18894     32 A7 62 5C |  if_ne	wrlong	local01, objptr
18898     52 00 00 5F 
1889c     D0 64 86 51 |  if_ne	sub	objptr, ##42192
188a0     52 00 00 FF 
188a4     C0 64 06 F1 | 	add	objptr, ##42176
188a8     32 A7 02 FB | 	rdlong	local01, objptr
188ac     52 00 00 FF 
188b0     C0 64 86 F1 | 	sub	objptr, ##42176
188b4     FF FF 3F FF 
188b8     FF A7 0E F2 | 	cmp	local01, ##2147483647 wz
188bc     52 00 00 5F 
188c0     AC 64 06 51 |  if_ne	add	objptr, ##42156
188c4     32 A9 02 5B |  if_ne	rdlong	local02, objptr
188c8     52 00 00 5F 
188cc     AC 64 86 51 |  if_ne	sub	objptr, ##42156
188d0     FF FF 7F 5F 
188d4     FF A9 0E 52 |  if_ne	cmp	local02, ##-1 wz
188d8     52 00 00 5F 
188dc     CC 64 06 51 |  if_ne	add	objptr, ##42188
188e0     32 AB 02 5B |  if_ne	rdlong	local03, objptr
188e4     52 00 00 5F 
188e8     CC 64 86 51 |  if_ne	sub	objptr, ##42188
188ec     B7 AA 0E 52 |  if_ne	cmp	local03, #183 wz
188f0     4C FF 9F 5D |  if_ne	jmp	#LR__2070
188f4                 | ' if dataheader(8)=token_data then 
188f4     52 00 00 FF 
188f8     CC 64 06 F1 | 	add	objptr, ##42188
188fc     32 A7 02 FB | 	rdlong	local01, objptr
18900     52 00 00 FF 
18904     CC 64 86 F1 | 	sub	objptr, ##42188
18908     B7 A6 0E F2 | 	cmp	local01, #183 wz
1890c     E0 00 90 5D |  if_ne	jmp	#LR__2075
18910     52 00 00 FF 
18914     B4 64 06 F1 | 	add	objptr, ##42164
18918     32 A7 02 FB | 	rdlong	local01, objptr
1891c     02 00 00 FF 
18920     18 64 06 F1 | 	add	objptr, ##1048
18924     32 A7 62 FC | 	wrlong	local01, objptr
18928     02 00 00 FF 
1892c     14 64 86 F1 | 	sub	objptr, ##1044
18930     32 AD 02 FB | 	rdlong	local04, objptr
18934     02 00 00 FF 
18938     0C 64 06 F1 | 	add	objptr, ##1036
1893c     32 AD 62 FC | 	wrlong	local04, objptr
18940                 | '  'print "data found at line "; dataheader(0)
18940                 | '   l=dataheader(2) : j=dataheader(3) : for i=0 to j-1: readline+=chr$(pspeek(l+i)): next i 
18940     00 AE 06 F6 | 	mov	local05, #0
18944     54 00 00 FF 
18948     C4 64 86 F1 | 	sub	objptr, ##43204
1894c                 | LR__2071
1894c     56 AF 52 F2 | 	cmps	local05, local04 wc
18950     3C 00 90 3D |  if_ae	jmp	#LR__2072
18954     54 00 00 FF 
18958     CC 64 06 F1 | 	add	objptr, ##43212
1895c     32 93 02 FB | 	rdlong	arg01, objptr
18960     54 00 00 FF 
18964     CC 64 86 F1 | 	sub	objptr, ##43212
18968     57 93 02 F1 | 	add	arg01, local05
1896c     D8 85 B0 FD | 	call	#_pspeek
18970     3D 93 E2 F8 | 	getbyte	arg01, result1, #0
18974     CC DA B0 FD | 	call	#__system__Chr_S
18978     3D 95 02 F6 | 	mov	arg02, result1
1897c     58 93 02 F6 | 	mov	arg01, local06
18980     B0 C0 B0 FD | 	call	#__system___string_concat
18984     3D B1 02 F6 | 	mov	local06, result1
18988     01 AE 06 F1 | 	add	local05, #1
1898c     BC FF 9F FD | 	jmp	#LR__2071
18990                 | LR__2072
18990     98 01 00 FF 
18994     E0 96 06 F6 | 	mov	arg03, ##@LR__6066
18998     01 92 06 F6 | 	mov	arg01, #1
1899c     58 95 02 F6 | 	mov	arg02, local06
189a0     24 DE B0 FD | 	call	#__system__Instr
189a4     3D AF 02 F6 | 	mov	local05, result1
189a8     58 93 02 F6 | 	mov	arg01, local06
189ac     49 B3 02 F6 | 	mov	local07, arg01
189b0     D7 06 48 FB | 	callpa	#(@LR__2074-@LR__2073)>>2,fcache_load_ptr_
189b4                 | LR__2073
189b4     59 7B CA FA | 	rdbyte	result1, local07 wz
189b8     01 B2 06 51 |  if_ne	add	local07, #1
189bc     F4 FF 9F 5D |  if_ne	jmp	#LR__2073
189c0                 | LR__2074
189c0     49 B3 82 F1 | 	sub	local07, arg01
189c4     59 95 02 F6 | 	mov	arg02, local07
189c8     57 95 82 F1 | 	sub	arg02, local05
189cc     04 94 86 F1 | 	sub	arg02, #4
189d0     58 93 02 F6 | 	mov	arg01, local06
189d4     30 D9 B0 FD | 	call	#__system__Right_S
189d8     3D 93 02 F6 | 	mov	arg01, result1
189dc     30 DD B0 FD | 	call	#__system__RTrim_S
189e0     3D 93 02 F6 | 	mov	arg01, result1
189e4     68 DC B0 FD | 	call	#__system__LTrim_S
189e8     3D B1 02 F6 | 	mov	local06, result1
189ec     0C 00 90 FD | 	jmp	#LR__2076
189f0                 | LR__2075
189f0                 | '   return ("") 'todo proper err
189f0     98 01 00 FF 
189f4     E5 7A 06 F6 | 	mov	result1, ##@LR__6067
189f8     04 00 90 FD | 	jmp	#LR__2077
189fc                 | LR__2076
189fc                 | ' return readline
189fc     58 7B 02 F6 | 	mov	result1, local06
18a00                 | LR__2077
18a00     E7 F0 03 F6 | 	mov	ptra, fp
18a04     F2 00 A0 FD | 	call	#popregs_
18a08                 | _read_next_line_ret
18a08     2D 00 64 FD | 	ret
18a0c                 | 
18a0c                 | ' 
18a0c                 | ' sub do_read
18a0c                 | _do_read
18a0c     17 CA 05 F6 | 	mov	COUNT_, #23
18a10     E8 00 A0 FD | 	call	#pushregs_
18a14     58 F1 07 F1 | 	add	ptra, #344
18a18     4C 00 00 FF 
18a1c     24 64 06 F1 | 	add	objptr, ##38948
18a20     32 AD 02 FB | 	rdlong	local04, objptr
18a24     56 AF 02 F6 | 	mov	local05, local04
18a28     01 AE 66 F0 | 	shl	local05, #1
18a2c     56 AF 02 F1 | 	add	local05, local04
18a30     02 AE 66 F0 | 	shl	local05, #2
18a34     03 00 00 FF 
18a38     04 64 86 F1 | 	sub	objptr, ##1540
18a3c     32 B1 02 F6 | 	mov	local06, objptr
18a40     32 AF 02 F1 | 	add	local05, objptr
18a44     57 B3 02 FB | 	rdlong	local07, local05
18a48                 | ' 
18a48                 | ' 
18a48                 | ' numpar=compiledline(lineptr_e).result.uresult
18a48                 | ' if numpar<1 orelse numpar>64 then print "In read: ";: printerror(39,runheader(0)) : return
18a48     01 B2 16 F2 | 	cmp	local07, #1 wc
18a4c     49 00 00 FF 
18a50     20 64 86 F1 | 	sub	objptr, ##37408
18a54     08 00 90 CD |  if_b	jmp	#LR__2080
18a58     41 B2 16 F2 | 	cmp	local07, #65 wc
18a5c     50 00 90 CD |  if_b	jmp	#LR__2081
18a60                 | LR__2080
18a60     00 92 06 F6 | 	mov	arg01, #0
18a64     F4 14 B1 FD | 	call	#__system___getiolock_0622
18a68     3D 93 02 F6 | 	mov	arg01, result1
18a6c     68 BF B0 FD | 	call	#__system___lockmem
18a70     98 01 00 FF 
18a74     E6 94 06 F6 | 	mov	arg02, ##@LR__6068
18a78     00 92 06 F6 | 	mov	arg01, #0
18a7c     00 96 06 F6 | 	mov	arg03, #0
18a80     48 CC B0 FD | 	call	#__system___basic_print_string
18a84     00 92 06 F6 | 	mov	arg01, #0
18a88     D0 14 B1 FD | 	call	#__system___getiolock_0622
18a8c     3D 01 68 FC | 	wrlong	#0, result1
18a90     52 00 00 FF 
18a94     94 64 06 F1 | 	add	objptr, ##42132
18a98     32 95 02 FB | 	rdlong	arg02, objptr
18a9c     52 00 00 FF 
18aa0     94 64 86 F1 | 	sub	objptr, ##42132
18aa4     27 92 06 F6 | 	mov	arg01, #39
18aa8     28 82 B0 FD | 	call	#_printerror
18aac     A8 09 90 FD | 	jmp	#LR__2128
18ab0                 | LR__2081
18ab0                 | ' i=numpar-1
18ab0                 | ' if readline="" then readline=read_next_line() ': print readline
18ab0     54 00 00 FF 
18ab4     B8 64 06 F1 | 	add	objptr, ##43192
18ab8     32 93 02 FB | 	rdlong	arg01, objptr
18abc     54 00 00 FF 
18ac0     B8 64 86 F1 | 	sub	objptr, ##43192
18ac4     98 01 00 FF 
18ac8     F0 94 06 F6 | 	mov	arg02, ##@LR__6069
18acc     30 BF B0 FD | 	call	#__system___string_cmp
18ad0     00 7A 0E F2 | 	cmp	result1, #0 wz
18ad4     18 00 90 5D |  if_ne	jmp	#LR__2082
18ad8     34 FD BF FD | 	call	#_read_next_line
18adc     54 00 00 FF 
18ae0     B8 64 06 F1 | 	add	objptr, ##43192
18ae4     32 7B 62 FC | 	wrlong	result1, objptr
18ae8     54 00 00 FF 
18aec     B8 64 86 F1 | 	sub	objptr, ##43192
18af0                 | LR__2082
18af0                 | ' if readline="" then printerror(55,runheader(0)) :return
18af0     54 00 00 FF 
18af4     B8 64 06 F1 | 	add	objptr, ##43192
18af8     32 93 02 FB | 	rdlong	arg01, objptr
18afc     54 00 00 FF 
18b00     B8 64 86 F1 | 	sub	objptr, ##43192
18b04     98 01 00 FF 
18b08     F1 94 06 F6 | 	mov	arg02, ##@LR__6070
18b0c     F0 BE B0 FD | 	call	#__system___string_cmp
18b10     00 7A 0E F2 | 	cmp	result1, #0 wz
18b14     20 00 90 5D |  if_ne	jmp	#LR__2083
18b18     52 00 00 FF 
18b1c     94 64 06 F1 | 	add	objptr, ##42132
18b20     32 95 02 FB | 	rdlong	arg02, objptr
18b24     52 00 00 FF 
18b28     94 64 86 F1 | 	sub	objptr, ##42132
18b2c     37 92 06 F6 | 	mov	arg01, #55
18b30     A0 81 B0 FD | 	call	#_printerror
18b34     20 09 90 FD | 	jmp	#LR__2128
18b38                 | LR__2083
18b38     00 B4 06 F6 | 	mov	local08, #0
18b3c     59 B7 02 F6 | 	mov	local09, local07
18b40     01 B6 86 F1 | 	sub	local09, #1
18b44                 | ' j=0
18b44                 | ' i=numpar-1
18b44                 | ' do
18b44                 | LR__2084
18b44                 | '   do
18b44                 | LR__2085
18b44     54 00 00 FF 
18b48     B8 64 06 F1 | 	add	objptr, ##43192
18b4c     32 95 02 FB | 	rdlong	arg02, objptr
18b50     54 00 00 FF 
18b54     B8 64 86 F1 | 	sub	objptr, ##43192
18b58     98 01 00 FF 
18b5c     F2 96 06 F6 | 	mov	arg03, ##@LR__6071
18b60     01 92 06 F6 | 	mov	arg01, #1
18b64     60 DC B0 FD | 	call	#__system__Instr
18b68     3D 97 02 F6 | 	mov	arg03, result1
18b6c                 | '     comma=instr(1,readline,"'") : if comma>0 then readline=left$(readline,comma-1) ' allows comments in data
18b6c     01 96 16 F2 | 	cmp	arg03, #1 wc
18b70     34 00 90 CD |  if_b	jmp	#LR__2086
18b74     54 00 00 FF 
18b78     B8 64 06 F1 | 	add	objptr, ##43192
18b7c     32 93 02 FB | 	rdlong	arg01, objptr
18b80     54 00 00 FF 
18b84     B8 64 86 F1 | 	sub	objptr, ##43192
18b88     01 96 86 F1 | 	sub	arg03, #1
18b8c     4B 95 02 F6 | 	mov	arg02, arg03
18b90     EC D6 B0 FD | 	call	#__system__Left_S
18b94     54 00 00 FF 
18b98     B8 64 06 F1 | 	add	objptr, ##43192
18b9c     32 7B 62 FC | 	wrlong	result1, objptr
18ba0     54 00 00 FF 
18ba4     B8 64 86 F1 | 	sub	objptr, ##43192
18ba8                 | LR__2086
18ba8     54 00 00 FF 
18bac     B8 64 06 F1 | 	add	objptr, ##43192
18bb0     32 95 02 FB | 	rdlong	arg02, objptr
18bb4     54 00 00 FF 
18bb8     B8 64 86 F1 | 	sub	objptr, ##43192
18bbc     98 01 00 FF 
18bc0     F4 96 06 F6 | 	mov	arg03, ##@LR__6072
18bc4     01 92 06 F6 | 	mov	arg01, #1
18bc8     FC DB B0 FD | 	call	#__system__Instr
18bcc     3D B9 02 F6 | 	mov	local10, result1
18bd0                 | '     comma=instr(1,readline,",")  
18bd0                 | '       if comma>0  then 
18bd0     01 B8 16 F2 | 	cmp	local10, #1 wc
18bd4     7C 00 90 CD |  if_b	jmp	#LR__2089
18bd8     54 00 00 FF 
18bdc     B8 64 06 F1 | 	add	objptr, ##43192
18be0     32 93 02 FB | 	rdlong	arg01, objptr
18be4     54 00 00 FF 
18be8     B8 64 86 F1 | 	sub	objptr, ##43192
18bec     5C 95 02 F6 | 	mov	arg02, local10
18bf0     01 94 86 F1 | 	sub	arg02, #1
18bf4     88 D6 B0 FD | 	call	#__system__Left_S
18bf8     3D BB 02 F6 | 	mov	local11, result1
18bfc     54 00 00 FF 
18c00     B8 64 06 F1 | 	add	objptr, ##43192
18c04     32 B1 02 FB | 	rdlong	local06, objptr
18c08     54 00 00 FF 
18c0c     B8 64 86 F1 | 	sub	objptr, ##43192
18c10     58 93 02 F6 | 	mov	arg01, local06
18c14     49 BD 02 F6 | 	mov	local12, arg01
18c18     D7 06 48 FB | 	callpa	#(@LR__2088-@LR__2087)>>2,fcache_load_ptr_
18c1c                 | LR__2087
18c1c     5E 7B CA FA | 	rdbyte	result1, local12 wz
18c20     01 BC 06 51 |  if_ne	add	local12, #1
18c24     F4 FF 9F 5D |  if_ne	jmp	#LR__2087
18c28                 | LR__2088
18c28     49 BD 82 F1 | 	sub	local12, arg01
18c2c     5E 95 02 F6 | 	mov	arg02, local12
18c30     5C 95 82 F1 | 	sub	arg02, local10
18c34     58 93 02 F6 | 	mov	arg01, local06
18c38     CC D6 B0 FD | 	call	#__system__Right_S
18c3c     54 00 00 FF 
18c40     B8 64 06 F1 | 	add	objptr, ##43192
18c44     32 7B 62 FC | 	wrlong	result1, objptr
18c48     54 00 00 FF 
18c4c     B8 64 86 F1 | 	sub	objptr, ##43192
18c50     40 00 90 FD | 	jmp	#LR__2090
18c54                 | LR__2089
18c54     54 00 00 FF 
18c58     B8 64 06 F1 | 	add	objptr, ##43192
18c5c     32 93 02 FB | 	rdlong	arg01, objptr
18c60     54 00 00 FF 
18c64     B8 64 86 F1 | 	sub	objptr, ##43192
18c68     A4 DA B0 FD | 	call	#__system__RTrim_S
18c6c     3D 93 02 F6 | 	mov	arg01, result1
18c70     DC D9 B0 FD | 	call	#__system__LTrim_S
18c74     3D BB 02 F6 | 	mov	local11, result1
18c78     98 01 00 FF 
18c7c     F6 BE 06 F6 | 	mov	local13, ##@LR__6073
18c80     54 00 00 FF 
18c84     B8 64 06 F1 | 	add	objptr, ##43192
18c88     32 BF 62 FC | 	wrlong	local13, objptr
18c8c     54 00 00 FF 
18c90     B8 64 86 F1 | 	sub	objptr, ##43192
18c94                 | LR__2090
18c94                 | '      
18c94                 | '      if part$<>"" then j=j+1
18c94     98 01 00 FF 
18c98     F7 94 06 F6 | 	mov	arg02, ##@LR__6074
18c9c     5D 93 02 F6 | 	mov	arg01, local11
18ca0     5C BD B0 FD | 	call	#__system___string_cmp
18ca4     00 7A 0E F2 | 	cmp	result1, #0 wz
18ca8     01 B4 06 51 |  if_ne	add	local08, #1
18cac     5B 97 02 F6 | 	mov	arg03, local09
18cb0     02 96 66 F0 | 	shl	arg03, #2
18cb4     E7 AC 02 F6 | 	mov	local04, fp
18cb8     2C AC 06 F1 | 	add	local04, #44
18cbc     56 97 02 F1 | 	add	arg03, local04
18cc0     4B BB 62 FC | 	wrlong	local11, arg03
18cc4     01 B6 86 F1 | 	sub	local09, #1
18cc8                 | '      args(i)=part$  
18cc8                 | '      i=i-1
18cc8                 | '     if readline="" then readline=read_next_line() 
18cc8     54 00 00 FF 
18ccc     B8 64 06 F1 | 	add	objptr, ##43192
18cd0     32 93 02 FB | 	rdlong	arg01, objptr
18cd4     54 00 00 FF 
18cd8     B8 64 86 F1 | 	sub	objptr, ##43192
18cdc     98 01 00 FF 
18ce0     F8 94 06 F6 | 	mov	arg02, ##@LR__6075
18ce4     18 BD B0 FD | 	call	#__system___string_cmp
18ce8     00 7A 0E F2 | 	cmp	result1, #0 wz
18cec     18 00 90 5D |  if_ne	jmp	#LR__2091
18cf0     1C FB BF FD | 	call	#_read_next_line
18cf4     54 00 00 FF 
18cf8     B8 64 06 F1 | 	add	objptr, ##43192
18cfc     32 7B 62 FC | 	wrlong	result1, objptr
18d00     54 00 00 FF 
18d04     B8 64 86 F1 | 	sub	objptr, ##43192
18d08                 | LR__2091
18d08     00 B6 56 F2 | 	cmps	local09, #0 wc
18d0c     28 00 90 CD |  if_b	jmp	#LR__2092
18d10     54 00 00 FF 
18d14     B8 64 06 F1 | 	add	objptr, ##43192
18d18     32 93 02 FB | 	rdlong	arg01, objptr
18d1c     54 00 00 FF 
18d20     B8 64 86 F1 | 	sub	objptr, ##43192
18d24     98 01 00 FF 
18d28     F9 94 06 F6 | 	mov	arg02, ##@LR__6076
18d2c     D0 BC B0 FD | 	call	#__system___string_cmp
18d30     00 7A 0E F2 | 	cmp	result1, #0 wz
18d34     0C FE 9F 5D |  if_ne	jmp	#LR__2085
18d38                 | LR__2092
18d38     00 B6 56 F2 | 	cmps	local09, #0 wc
18d3c     04 FE 9F 3D |  if_ae	jmp	#LR__2084
18d40                 | ' if j<numpar then printerror(55,runheader(0))
18d40     59 B5 52 F2 | 	cmps	local08, local07 wc
18d44     52 00 00 CF 
18d48     94 64 06 C1 |  if_b	add	objptr, ##42132
18d4c     32 95 02 CB |  if_b	rdlong	arg02, objptr
18d50     52 00 00 CF 
18d54     94 64 86 C1 |  if_b	sub	objptr, ##42132
18d58     37 92 06 C6 |  if_b	mov	arg01, #55
18d5c     74 7F B0 CD |  if_b	call	#_printerror
18d60                 | ' 
18d60                 | ' for i=0 to numpar-1
18d60     00 B6 06 F6 | 	mov	local09, #0
18d64     59 C1 02 F6 | 	mov	local14, local07
18d68                 | LR__2093
18d68     60 B7 52 F2 | 	cmps	local09, local14 wc
18d6c     E8 06 90 3D |  if_ae	jmp	#LR__2127
18d70                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
18d70     5B AF 02 F6 | 	mov	local05, local09
18d74     02 AE 66 F0 | 	shl	local05, #2
18d78     E7 B0 02 F6 | 	mov	local06, fp
18d7c     2C B0 06 F1 | 	add	local06, #44
18d80     58 AF 02 F1 | 	add	local05, local06
18d84     57 93 02 FB | 	rdlong	arg01, local05
18d88     C8 DC BE FD | 	call	#_isnum
18d8c     3D BF 02 F6 | 	mov	local13, result1
18d90     5B C3 02 F6 | 	mov	local15, local09
18d94     02 C2 66 F0 | 	shl	local15, #2
18d98     E7 C4 02 F6 | 	mov	local16, fp
18d9c     2C C4 06 F1 | 	add	local16, #44
18da0     62 C3 02 F1 | 	add	local15, local16
18da4     61 93 02 FB | 	rdlong	arg01, local15
18da8     94 E0 BE FD | 	call	#_isint
18dac     07 7A 66 F7 | 	signx	result1, #7
18db0     3D BF 2A F5 | 	andn	local13, result1 wz
18db4     54 00 00 5F 
18db8     EC 64 06 51 |  if_ne	add	objptr, ##43244
18dbc     32 3D 68 5C |  if_ne	wrlong	#30, objptr
18dc0     54 00 00 5F 
18dc4     EC 64 86 51 |  if_ne	sub	objptr, ##43244
18dc8                 | '   if isint(args(i)) then r=result_int 
18dc8     5B AD 02 F6 | 	mov	local04, local09
18dcc     02 AC 66 F0 | 	shl	local04, #2
18dd0     E7 AE 02 F6 | 	mov	local05, fp
18dd4     2C AE 06 F1 | 	add	local05, #44
18dd8     57 AD 02 F1 | 	add	local04, local05
18ddc     56 93 02 FB | 	rdlong	arg01, local04
18de0     5C E0 BE FD | 	call	#_isint
18de4     00 7A 0E F2 | 	cmp	result1, #0 wz
18de8     54 00 00 5F 
18dec     EC 64 06 51 |  if_ne	add	objptr, ##43244
18df0     32 39 68 5C |  if_ne	wrlong	#28, objptr
18df4     54 00 00 5F 
18df8     EC 64 86 51 |  if_ne	sub	objptr, ##43244
18dfc                 | '   if isdec(args(i)) then r=result_uint 
18dfc     5B AD 02 F6 | 	mov	local04, local09
18e00     02 AC 66 F0 | 	shl	local04, #2
18e04     E7 AE 02 F6 | 	mov	local05, fp
18e08     2C AE 06 F1 | 	add	local05, #44
18e0c     57 AD 02 F1 | 	add	local04, local05
18e10     56 93 02 FB | 	rdlong	arg01, local04
18e14     CC E2 BE FD | 	call	#_isdec
18e18     00 7A 0E F2 | 	cmp	result1, #0 wz
18e1c     54 00 00 5F 
18e20     EC 64 06 51 |  if_ne	add	objptr, ##43244
18e24     32 3B 68 5C |  if_ne	wrlong	#29, objptr
18e28     54 00 00 5F 
18e2c     EC 64 86 51 |  if_ne	sub	objptr, ##43244
18e30                 | '   if not isnum(args(i)) then 
18e30     5B AF 02 F6 | 	mov	local05, local09
18e34     02 AE 66 F0 | 	shl	local05, #2
18e38     E7 B0 02 F6 | 	mov	local06, fp
18e3c     2C B0 06 F1 | 	add	local06, #44
18e40     58 AF 02 F1 | 	add	local05, local06
18e44     57 93 02 FB | 	rdlong	arg01, local05
18e48     08 DC BE FD | 	call	#_isnum
18e4c     07 7A 66 F7 | 	signx	result1, #7
18e50     3D 7B 22 F6 | 	not	result1, result1
18e54     00 7A 0E F2 | 	cmp	result1, #0 wz
18e58     FC 00 90 AD |  if_e	jmp	#LR__2098
18e5c     54 00 00 FF 
18e60     EC 64 06 F1 | 	add	objptr, ##43244
18e64     32 57 68 FC | 	wrlong	#43, objptr
18e68     54 00 00 FF 
18e6c     EC 64 86 F1 | 	sub	objptr, ##43244
18e70     5B AD 02 F6 | 	mov	local04, local09
18e74     02 AC 66 F0 | 	shl	local04, #2
18e78     E7 AE 02 F6 | 	mov	local05, fp
18e7c     2C AE 06 F1 | 	add	local05, #44
18e80     57 AD 02 F1 | 	add	local04, local05
18e84     56 93 02 FB | 	rdlong	arg01, local04
18e88     49 BD 02 F6 | 	mov	local12, arg01
18e8c     D7 06 48 FB | 	callpa	#(@LR__2095-@LR__2094)>>2,fcache_load_ptr_
18e90                 | LR__2094
18e90     5E 7B CA FA | 	rdbyte	result1, local12 wz
18e94     01 BC 06 51 |  if_ne	add	local12, #1
18e98     F4 FF 9F 5D |  if_ne	jmp	#LR__2094
18e9c                 | LR__2095
18e9c     49 BD 82 F1 | 	sub	local12, arg01
18ea0     5E C7 02 F6 | 	mov	local17, local12
18ea4     54 00 00 FF 
18ea8     74 64 06 F1 | 	add	objptr, ##43124
18eac     32 93 02 FB | 	rdlong	arg01, objptr
18eb0     63 93 82 F1 | 	sub	arg01, local17
18eb4     04 92 86 F1 | 	sub	arg01, #4
18eb8     03 92 26 F5 | 	andn	arg01, #3
18ebc     32 93 62 FC | 	wrlong	arg01, objptr
18ec0     54 00 00 FF 
18ec4     74 64 86 F1 | 	sub	objptr, ##43124
18ec8     63 95 02 F6 | 	mov	arg02, local17
18ecc     A0 7F B0 FD | 	call	#_pslpoke
18ed0                 | '     pslpoke memtop,l
18ed0                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
18ed0     01 B4 06 F6 | 	mov	local08, #1
18ed4     63 C9 02 F6 | 	mov	local18, local17
18ed8     01 C8 06 F1 | 	add	local18, #1
18edc                 | LR__2096
18edc     64 B5 52 F2 | 	cmps	local08, local18 wc
18ee0     60 00 90 3D |  if_ae	jmp	#LR__2097
18ee4     54 00 00 FF 
18ee8     74 64 06 F1 | 	add	objptr, ##43124
18eec     32 BF 02 FB | 	rdlong	local13, objptr
18ef0     54 00 00 FF 
18ef4     74 64 86 F1 | 	sub	objptr, ##43124
18ef8     03 BE 06 F1 | 	add	local13, #3
18efc     5A BF 02 F1 | 	add	local13, local08
18f00     5B C3 02 F6 | 	mov	local15, local09
18f04     02 C2 66 F0 | 	shl	local15, #2
18f08     E7 C4 02 F6 | 	mov	local16, fp
18f0c     2C C4 06 F1 | 	add	local16, #44
18f10     62 C3 02 F1 | 	add	local15, local16
18f14     61 93 02 FB | 	rdlong	arg01, local15
18f18     5A B1 02 F6 | 	mov	local06, local08
18f1c     01 C2 06 F6 | 	mov	local15, #1
18f20     58 95 02 F6 | 	mov	arg02, local06
18f24     01 96 06 F6 | 	mov	arg03, #1
18f28     6C D4 B0 FD | 	call	#__system__Mid_S
18f2c     3D AF 02 F6 | 	mov	local05, result1
18f30     57 95 C2 FA | 	rdbyte	arg02, local05
18f34     5F 93 02 F6 | 	mov	arg01, local13
18f38     C4 7F B0 FD | 	call	#_pspoke
18f3c     01 B4 06 F1 | 	add	local08, #1
18f40     98 FF 9F FD | 	jmp	#LR__2096
18f44                 | LR__2097
18f44     54 00 00 FF 
18f48     74 64 06 F1 | 	add	objptr, ##43124
18f4c     32 CB 02 FB | 	rdlong	local19, objptr
18f50     54 00 00 FF 
18f54     74 64 86 F1 | 	sub	objptr, ##43124
18f58                 | LR__2098
18f58     14 47 BF FD | 	call	#_pop
18f5c     3E CD 02 F6 | 	mov	local20, result2
18f60     3F AD 02 F6 | 	mov	local04, result3
18f64     3D A7 02 F6 | 	mov	local01, result1
18f68     66 A9 02 F6 | 	mov	local02, local20
18f6c     56 AB 02 F6 | 	mov	local03, local04
18f70                 | '   t1=pop() 
18f70                 | '   if i>=numpar-j then
18f70     59 BF 02 F6 | 	mov	local13, local07
18f74     5A BF 82 F1 | 	sub	local13, local08
18f78     5F B7 52 F2 | 	cmps	local09, local13 wc
18f7c     D0 04 90 CD |  if_b	jmp	#LR__2126
18f80     54 CF 02 F6 | 	mov	local21, local02
18f84                 | '     vartype=t1.result.twowords(1)
18f84                 | '     select case vartype
18f84     67 D1 0A F6 | 	mov	local22, local21 wz
18f88     64 00 90 AD |  if_e	jmp	#LR__2099
18f8c     00 D1 0E F2 | 	cmp	local22, #256 wz
18f90     64 00 90 AD |  if_e	jmp	#LR__2100
18f94     01 D1 0E F2 | 	cmp	local22, #257 wz
18f98     64 00 90 AD |  if_e	jmp	#LR__2101
18f9c     02 D1 0E F2 | 	cmp	local22, #258 wz
18fa0     64 00 90 AD |  if_e	jmp	#LR__2102
18fa4     03 D1 0E F2 | 	cmp	local22, #259 wz
18fa8     64 00 90 AD |  if_e	jmp	#LR__2103
18fac     04 D1 0E F2 | 	cmp	local22, #260 wz
18fb0     64 00 90 AD |  if_e	jmp	#LR__2104
18fb4     05 D1 0E F2 | 	cmp	local22, #261 wz
18fb8     64 00 90 AD |  if_e	jmp	#LR__2105
18fbc     06 D1 0E F2 | 	cmp	local22, #262 wz
18fc0     64 00 90 AD |  if_e	jmp	#LR__2106
18fc4     07 D1 0E F2 | 	cmp	local22, #263 wz
18fc8     64 00 90 AD |  if_e	jmp	#LR__2107
18fcc     08 D1 0E F2 | 	cmp	local22, #264 wz
18fd0     64 00 90 AD |  if_e	jmp	#LR__2108
18fd4     09 D1 0E F2 | 	cmp	local22, #265 wz
18fd8     64 00 90 AD |  if_e	jmp	#LR__2109
18fdc     0A D1 0E F2 | 	cmp	local22, #266 wz
18fe0     64 00 90 AD |  if_e	jmp	#LR__2110
18fe4     0B D1 0E F2 | 	cmp	local22, #267 wz
18fe8     64 00 90 AD |  if_e	jmp	#LR__2111
18fec     68 00 90 FD | 	jmp	#LR__2112
18ff0                 | LR__2099
18ff0     0C D2 06 F6 | 	mov	local23, #12
18ff4     64 00 90 FD | 	jmp	#LR__2113
18ff8                 | LR__2100
18ff8     0C D2 06 F6 | 	mov	local23, #12
18ffc     5C 00 90 FD | 	jmp	#LR__2113
19000                 | LR__2101
19000     01 D2 06 F6 | 	mov	local23, #1
19004     54 00 90 FD | 	jmp	#LR__2113
19008                 | LR__2102
19008     01 D2 06 F6 | 	mov	local23, #1
1900c     4C 00 90 FD | 	jmp	#LR__2113
19010                 | LR__2103
19010     02 D2 06 F6 | 	mov	local23, #2
19014     44 00 90 FD | 	jmp	#LR__2113
19018                 | LR__2104
19018     02 D2 06 F6 | 	mov	local23, #2
1901c     3C 00 90 FD | 	jmp	#LR__2113
19020                 | LR__2105
19020     04 D2 06 F6 | 	mov	local23, #4
19024     34 00 90 FD | 	jmp	#LR__2113
19028                 | LR__2106
19028     04 D2 06 F6 | 	mov	local23, #4
1902c     2C 00 90 FD | 	jmp	#LR__2113
19030                 | LR__2107
19030     08 D2 06 F6 | 	mov	local23, #8
19034     24 00 90 FD | 	jmp	#LR__2113
19038                 | LR__2108
19038     08 D2 06 F6 | 	mov	local23, #8
1903c     1C 00 90 FD | 	jmp	#LR__2113
19040                 | LR__2109
19040     06 D2 06 F6 | 	mov	local23, #6
19044     14 00 90 FD | 	jmp	#LR__2113
19048                 | LR__2110
19048     08 D2 06 F6 | 	mov	local23, #8
1904c     0C 00 90 FD | 	jmp	#LR__2113
19050                 | LR__2111
19050     05 D2 06 F6 | 	mov	local23, #5
19054     04 00 90 FD | 	jmp	#LR__2113
19058                 | LR__2112
19058     0C D2 06 F6 | 	mov	local23, #12
1905c                 | LR__2113
1905c                 | '     if esize=12 andalso t1.result.uresult<$80000 then
1905c     0C D2 0E F2 | 	cmp	local23, #12 wz
19060     34 01 90 5D |  if_ne	jmp	#LR__2117
19064     00 04 00 FF 
19068     00 A6 16 F2 | 	cmp	local01, ##524288 wc
1906c     28 01 90 3D |  if_ae	jmp	#LR__2117
19070                 | '       if r=result_int then lpoke t1.result.uresult, val%(args(i))
19070     54 00 00 FF 
19074     EC 64 06 F1 | 	add	objptr, ##43244
19078     32 BF 02 FB | 	rdlong	local13, objptr
1907c     54 00 00 FF 
19080     EC 64 86 F1 | 	sub	objptr, ##43244
19084     1C BE 0E F2 | 	cmp	local13, #28 wz
19088     2C 00 90 5D |  if_ne	jmp	#LR__2114
1908c     5B AF 02 F6 | 	mov	local05, local09
19090     02 AE 66 F0 | 	shl	local05, #2
19094     E7 B0 02 F6 | 	mov	local06, fp
19098     2C B0 06 F1 | 	add	local06, #44
1909c     58 AF 02 F1 | 	add	local05, local06
190a0     57 93 02 FB | 	rdlong	arg01, local05
190a4     00 94 06 F6 | 	mov	arg02, #0
190a8     80 E6 B0 FD | 	call	#__system____builtin_atoi
190ac     3D 95 02 F6 | 	mov	arg02, result1
190b0     53 93 02 F6 | 	mov	arg01, local01
190b4     49 95 62 FC | 	wrlong	arg02, arg01
190b8                 | LR__2114
190b8                 | '       if r=result_uint then lpoke t1.result.uresult, val%(args(i))
190b8     54 00 00 FF 
190bc     EC 64 06 F1 | 	add	objptr, ##43244
190c0     32 BF 02 FB | 	rdlong	local13, objptr
190c4     54 00 00 FF 
190c8     EC 64 86 F1 | 	sub	objptr, ##43244
190cc     1D BE 0E F2 | 	cmp	local13, #29 wz
190d0     2C 00 90 5D |  if_ne	jmp	#LR__2115
190d4     5B AF 02 F6 | 	mov	local05, local09
190d8     02 AE 66 F0 | 	shl	local05, #2
190dc     E7 B0 02 F6 | 	mov	local06, fp
190e0     2C B0 06 F1 | 	add	local06, #44
190e4     58 AF 02 F1 | 	add	local05, local06
190e8     57 93 02 FB | 	rdlong	arg01, local05
190ec     00 94 06 F6 | 	mov	arg02, #0
190f0     38 E6 B0 FD | 	call	#__system____builtin_atoi
190f4     3D 95 02 F6 | 	mov	arg02, result1
190f8     53 93 02 F6 | 	mov	arg01, local01
190fc     49 95 62 FC | 	wrlong	arg02, arg01
19100                 | LR__2115
19100                 | '       if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
19100     54 00 00 FF 
19104     EC 64 06 F1 | 	add	objptr, ##43244
19108     32 BF 02 FB | 	rdlong	local13, objptr
1910c     54 00 00 FF 
19110     EC 64 86 F1 | 	sub	objptr, ##43244
19114     1E BE 0E F2 | 	cmp	local13, #30 wz
19118     3C 00 90 5D |  if_ne	jmp	#LR__2116
1911c     5B AD 02 F6 | 	mov	local04, local09
19120     02 AC 66 F0 | 	shl	local04, #2
19124     E7 AE 02 F6 | 	mov	local05, fp
19128     2C AE 06 F1 | 	add	local05, #44
1912c     57 AD 02 F1 | 	add	local04, local05
19130     56 93 02 FB | 	rdlong	arg01, local04
19134     8C E7 B0 FD | 	call	#__system____builtin_atof
19138     28 CE 05 F1 | 	add	fp, #40
1913c     E7 7A 62 FC | 	wrlong	result1, fp
19140     E7 92 02 F6 | 	mov	arg01, fp
19144     28 CE 85 F1 | 	sub	fp, #40
19148     49 7B 02 FB | 	rdlong	result1, arg01
1914c     3D 95 02 F6 | 	mov	arg02, result1
19150     53 93 02 F6 | 	mov	arg01, local01
19154     49 95 62 FC | 	wrlong	arg02, arg01
19158                 | LR__2116
19158                 | '       if r=result_string2 then lpoke t1.result.uresult,stringaddr
19158     54 00 00 FF 
1915c     EC 64 06 F1 | 	add	objptr, ##43244
19160     32 BF 02 FB | 	rdlong	local13, objptr
19164     2B BE 0E F2 | 	cmp	local13, #43 wz
19168     53 93 02 A6 |  if_e	mov	arg01, local01
1916c     65 95 02 A6 |  if_e	mov	arg02, local19
19170     49 95 62 AC |  if_e	wrlong	arg02, arg01
19174     53 BF 02 F6 | 	mov	local13, local01
19178     08 BE 06 F1 | 	add	local13, #8
1917c     32 AD 02 FB | 	rdlong	local04, objptr
19180     54 00 00 FF 
19184     EC 64 86 F1 | 	sub	objptr, ##43244
19188     56 CD 02 F6 | 	mov	local20, local04
1918c     5F 93 02 F6 | 	mov	arg01, local13
19190     66 95 02 F6 | 	mov	arg02, local20
19194     49 95 62 FC | 	wrlong	arg02, arg01
19198                 | LR__2117
19198                 | '     if esize=12 andalso t1.result.uresult>=$80000 then
19198     0C D2 0E F2 | 	cmp	local23, #12 wz
1919c     38 01 90 5D |  if_ne	jmp	#LR__2121
191a0     00 04 00 FF 
191a4     00 A6 16 F2 | 	cmp	local01, ##524288 wc
191a8     2C 01 90 CD |  if_b	jmp	#LR__2121
191ac                 | '       if r=result_int then pslpoke t1.result.uresult, val%(args(i))
191ac     54 00 00 FF 
191b0     EC 64 06 F1 | 	add	objptr, ##43244
191b4     32 BF 02 FB | 	rdlong	local13, objptr
191b8     54 00 00 FF 
191bc     EC 64 86 F1 | 	sub	objptr, ##43244
191c0     1C BE 0E F2 | 	cmp	local13, #28 wz
191c4     2C 00 90 5D |  if_ne	jmp	#LR__2118
191c8     5B AF 02 F6 | 	mov	local05, local09
191cc     02 AE 66 F0 | 	shl	local05, #2
191d0     E7 B0 02 F6 | 	mov	local06, fp
191d4     2C B0 06 F1 | 	add	local06, #44
191d8     58 AF 02 F1 | 	add	local05, local06
191dc     57 93 02 FB | 	rdlong	arg01, local05
191e0     00 94 06 F6 | 	mov	arg02, #0
191e4     44 E5 B0 FD | 	call	#__system____builtin_atoi
191e8     3D 95 02 F6 | 	mov	arg02, result1
191ec     53 93 02 F6 | 	mov	arg01, local01
191f0     7C 7C B0 FD | 	call	#_pslpoke
191f4                 | LR__2118
191f4                 | '       if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
191f4     54 00 00 FF 
191f8     EC 64 06 F1 | 	add	objptr, ##43244
191fc     32 BF 02 FB | 	rdlong	local13, objptr
19200     54 00 00 FF 
19204     EC 64 86 F1 | 	sub	objptr, ##43244
19208     1D BE 0E F2 | 	cmp	local13, #29 wz
1920c     2C 00 90 5D |  if_ne	jmp	#LR__2119
19210     5B AF 02 F6 | 	mov	local05, local09
19214     02 AE 66 F0 | 	shl	local05, #2
19218     E7 B0 02 F6 | 	mov	local06, fp
1921c     2C B0 06 F1 | 	add	local06, #44
19220     58 AF 02 F1 | 	add	local05, local06
19224     57 93 02 FB | 	rdlong	arg01, local05
19228     00 94 06 F6 | 	mov	arg02, #0
1922c     FC E4 B0 FD | 	call	#__system____builtin_atoi
19230     3D 95 02 F6 | 	mov	arg02, result1
19234     53 93 02 F6 | 	mov	arg01, local01
19238     34 7C B0 FD | 	call	#_pslpoke
1923c                 | LR__2119
1923c                 | '       if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
1923c     54 00 00 FF 
19240     EC 64 06 F1 | 	add	objptr, ##43244
19244     32 BF 02 FB | 	rdlong	local13, objptr
19248     54 00 00 FF 
1924c     EC 64 86 F1 | 	sub	objptr, ##43244
19250     1E BE 0E F2 | 	cmp	local13, #30 wz
19254     38 00 90 5D |  if_ne	jmp	#LR__2120
19258     5B AD 02 F6 | 	mov	local04, local09
1925c     02 AC 66 F0 | 	shl	local04, #2
19260     E7 AE 02 F6 | 	mov	local05, fp
19264     2C AE 06 F1 | 	add	local05, #44
19268     57 AD 02 F1 | 	add	local04, local05
1926c     56 93 02 FB | 	rdlong	arg01, local04
19270     50 E6 B0 FD | 	call	#__system____builtin_atof
19274     28 CE 05 F1 | 	add	fp, #40
19278     E7 7A 62 FC | 	wrlong	result1, fp
1927c     E7 92 02 F6 | 	mov	arg01, fp
19280     28 CE 85 F1 | 	sub	fp, #40
19284     49 95 02 FB | 	rdlong	arg02, arg01
19288     53 93 02 F6 | 	mov	arg01, local01
1928c     E0 7B B0 FD | 	call	#_pslpoke
19290                 | LR__2120
19290                 | '       if r=result_string2 then pslpoke t1.result.uresult,stringaddr
19290     54 00 00 FF 
19294     EC 64 06 F1 | 	add	objptr, ##43244
19298     32 BF 02 FB | 	rdlong	local13, objptr
1929c     54 00 00 FF 
192a0     EC 64 86 F1 | 	sub	objptr, ##43244
192a4     2B BE 0E F2 | 	cmp	local13, #43 wz
192a8     53 93 02 A6 |  if_e	mov	arg01, local01
192ac     65 95 02 A6 |  if_e	mov	arg02, local19
192b0     BC 7B B0 AD |  if_e	call	#_pslpoke
192b4     53 93 02 F6 | 	mov	arg01, local01
192b8     08 92 06 F1 | 	add	arg01, #8
192bc     54 00 00 FF 
192c0     EC 64 06 F1 | 	add	objptr, ##43244
192c4     32 CD 02 FB | 	rdlong	local20, objptr
192c8     54 00 00 FF 
192cc     EC 64 86 F1 | 	sub	objptr, ##43244
192d0     66 95 02 F6 | 	mov	arg02, local20
192d4     98 7B B0 FD | 	call	#_pslpoke
192d8                 | LR__2121
192d8                 | '     if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
192d8     05 D2 0E F2 | 	cmp	local23, #5 wz
192dc     54 00 00 AF 
192e0     EC 64 06 A1 |  if_e	add	objptr, ##43244
192e4     32 CD 02 AB |  if_e	rdlong	local20, objptr
192e8     54 00 00 AF 
192ec     EC 64 86 A1 |  if_e	sub	objptr, ##43244
192f0     2B CC 0E A2 |  if_e	cmp	local20, #43 wz
192f4     65 CD 02 A6 |  if_e	mov	local20, local19
192f8     53 93 02 A6 |  if_e	mov	arg01, local01
192fc     66 95 02 A6 |  if_e	mov	arg02, local20
19300     6C 7B B0 AD |  if_e	call	#_pslpoke
19304                 | '     if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
19304     04 D2 0E F2 | 	cmp	local23, #4 wz
19308     48 00 90 5D |  if_ne	jmp	#LR__2122
1930c     54 00 00 FF 
19310     EC 64 06 F1 | 	add	objptr, ##43244
19314     32 CD 02 FB | 	rdlong	local20, objptr
19318     54 00 00 FF 
1931c     EC 64 86 F1 | 	sub	objptr, ##43244
19320     2B CC 0E F2 | 	cmp	local20, #43 wz
19324     2C 00 90 AD |  if_e	jmp	#LR__2122
19328     5B AF 02 F6 | 	mov	local05, local09
1932c     02 AE 66 F0 | 	shl	local05, #2
19330     E7 B0 02 F6 | 	mov	local06, fp
19334     2C B0 06 F1 | 	add	local06, #44
19338     58 AF 02 F1 | 	add	local05, local06
1933c     57 93 02 FB | 	rdlong	arg01, local05
19340     00 94 06 F6 | 	mov	arg02, #0
19344     E4 E3 B0 FD | 	call	#__system____builtin_atoi
19348     3D 95 02 F6 | 	mov	arg02, result1
1934c     53 93 02 F6 | 	mov	arg01, local01
19350     1C 7B B0 FD | 	call	#_pslpoke
19354                 | LR__2122
19354                 | '     if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
19354     02 D2 0E F2 | 	cmp	local23, #2 wz
19358     48 00 90 5D |  if_ne	jmp	#LR__2123
1935c     54 00 00 FF 
19360     EC 64 06 F1 | 	add	objptr, ##43244
19364     32 CD 02 FB | 	rdlong	local20, objptr
19368     54 00 00 FF 
1936c     EC 64 86 F1 | 	sub	objptr, ##43244
19370     2B CC 0E F2 | 	cmp	local20, #43 wz
19374     2C 00 90 AD |  if_e	jmp	#LR__2123
19378     5B AF 02 F6 | 	mov	local05, local09
1937c     02 AE 66 F0 | 	shl	local05, #2
19380     E7 B0 02 F6 | 	mov	local06, fp
19384     2C B0 06 F1 | 	add	local06, #44
19388     58 AF 02 F1 | 	add	local05, local06
1938c     57 93 02 FB | 	rdlong	arg01, local05
19390     00 94 06 F6 | 	mov	arg02, #0
19394     94 E3 B0 FD | 	call	#__system____builtin_atoi
19398     3D 95 02 F6 | 	mov	arg02, result1
1939c     53 93 02 F6 | 	mov	arg01, local01
193a0     14 7B B0 FD | 	call	#_psdpoke
193a4                 | LR__2123
193a4                 | '     if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
193a4     01 D2 0E F2 | 	cmp	local23, #1 wz
193a8     48 00 90 5D |  if_ne	jmp	#LR__2124
193ac     54 00 00 FF 
193b0     EC 64 06 F1 | 	add	objptr, ##43244
193b4     32 CD 02 FB | 	rdlong	local20, objptr
193b8     54 00 00 FF 
193bc     EC 64 86 F1 | 	sub	objptr, ##43244
193c0     2B CC 0E F2 | 	cmp	local20, #43 wz
193c4     2C 00 90 AD |  if_e	jmp	#LR__2124
193c8     5B AF 02 F6 | 	mov	local05, local09
193cc     02 AE 66 F0 | 	shl	local05, #2
193d0     E7 B0 02 F6 | 	mov	local06, fp
193d4     2C B0 06 F1 | 	add	local06, #44
193d8     58 AF 02 F1 | 	add	local05, local06
193dc     57 93 02 FB | 	rdlong	arg01, local05
193e0     00 94 06 F6 | 	mov	arg02, #0
193e4     44 E3 B0 FD | 	call	#__system____builtin_atoi
193e8     3D 95 02 F6 | 	mov	arg02, result1
193ec     53 93 02 F6 | 	mov	arg01, local01
193f0     0C 7B B0 FD | 	call	#_pspoke
193f4                 | LR__2124
193f4                 | '     if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
193f4     06 D2 0E F2 | 	cmp	local23, #6 wz
193f8     54 00 90 5D |  if_ne	jmp	#LR__2125
193fc     54 00 00 FF 
19400     EC 64 06 F1 | 	add	objptr, ##43244
19404     32 CD 02 FB | 	rdlong	local20, objptr
19408     54 00 00 FF 
1940c     EC 64 86 F1 | 	sub	objptr, ##43244
19410     2B CC 0E F2 | 	cmp	local20, #43 wz
19414     38 00 90 AD |  if_e	jmp	#LR__2125
19418     5B AD 02 F6 | 	mov	local04, local09
1941c     02 AC 66 F0 | 	shl	local04, #2
19420     E7 AE 02 F6 | 	mov	local05, fp
19424     2C AE 06 F1 | 	add	local05, #44
19428     57 AD 02 F1 | 	add	local04, local05
1942c     56 93 02 FB | 	rdlong	arg01, local04
19430     90 E4 B0 FD | 	call	#__system____builtin_atof
19434     28 CE 05 F1 | 	add	fp, #40
19438     E7 7A 62 FC | 	wrlong	result1, fp
1943c     E7 92 02 F6 | 	mov	arg01, fp
19440     28 CE 85 F1 | 	sub	fp, #40
19444     49 95 02 FB | 	rdlong	arg02, arg01
19448     53 93 02 F6 | 	mov	arg01, local01
1944c     20 7A B0 FD | 	call	#_pslpoke
19450                 | LR__2125
19450                 | LR__2126
19450     01 B6 06 F1 | 	add	local09, #1
19454     10 F9 9F FD | 	jmp	#LR__2093
19458                 | LR__2127
19458                 | LR__2128
19458     E7 F0 03 F6 | 	mov	ptra, fp
1945c     F2 00 A0 FD | 	call	#popregs_
19460                 | _do_read_ret
19460     2D 00 64 FD | 	ret
19464                 | 
19464                 | ' 
19464                 | ' '------------------- release
19464                 | ' 
19464                 | ' sub do_release
19464                 | _do_release
19464     00 CA 05 F6 | 	mov	COUNT_, #0
19468     E8 00 A0 FD | 	call	#pushregs_
1946c     10 F0 07 F1 | 	add	ptra, #16
19470     FC 41 BF FD | 	call	#_pop
19474     3F 95 02 F6 | 	mov	arg02, result3
19478     E7 7A 62 FC | 	wrlong	result1, fp
1947c     04 CE 05 F1 | 	add	fp, #4
19480     E7 7C 62 FC | 	wrlong	result2, fp
19484     04 CE 05 F1 | 	add	fp, #4
19488     E7 94 62 FC | 	wrlong	arg02, fp
1948c     08 CE 85 F1 | 	sub	fp, #8
19490     E7 92 02 F6 | 	mov	arg01, fp
19494     B4 43 BF FD | 	call	#_converttoint
19498                 | ' 
19498                 | ' t1=pop()
19498                 | ' channel=converttoint(t1)
19498                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255  
19498     00 7A 56 F2 | 	cmps	result1, #0 wc
1949c     2C 00 90 CD |  if_b	jmp	#LR__2130
194a0     08 7A 56 F2 | 	cmps	result1, #8 wc
194a4     24 00 90 3D |  if_ae	jmp	#LR__2130
194a8     38 00 00 FF 
194ac     B4 65 06 F1 | 	add	objptr, ##29108
194b0     32 93 02 FB | 	rdlong	arg01, objptr
194b4     38 00 00 FF 
194b8     B4 65 86 F1 | 	sub	objptr, ##29108
194bc     06 7A 66 F0 | 	shl	result1, #6
194c0     3D 93 02 F1 | 	add	arg01, result1
194c4     2C 92 06 F1 | 	add	arg01, #44
194c8     49 FF 69 FC | 	wrlong	#255, arg01
194cc                 | LR__2130
194cc     E7 F0 03 F6 | 	mov	ptra, fp
194d0     F2 00 A0 FD | 	call	#popregs_
194d4                 | _do_release_ret
194d4     2D 00 64 FD | 	ret
194d8                 | 
194d8                 | ' 
194d8                 | ' '------------------- restore
194d8                 | ' 
194d8                 | ' sub do_restore()
194d8                 | _do_restore
194d8     4C 00 00 FF 
194dc     2C 64 06 F1 | 	add	objptr, ##38956
194e0     32 81 02 FB | 	rdlong	_var01, objptr
194e4     06 00 00 FF 
194e8     A4 64 06 F1 | 	add	objptr, ##3236
194ec     32 81 62 FC | 	wrlong	_var01, objptr
194f0     98 01 00 FF 
194f4     FA 80 06 F6 | 	mov	_var01, ##@LR__6077
194f8     01 00 00 FF 
194fc     E8 65 06 F1 | 	add	objptr, ##1000
19500     32 81 62 FC | 	wrlong	_var01, objptr
19504     54 00 00 FF 
19508     B8 64 86 F1 | 	sub	objptr, ##43192
1950c                 | _do_restore_ret
1950c     2D 00 64 FD | 	ret
19510                 | 
19510                 | ' 
19510                 | ' '------------------- restorepalette
19510                 | ' 
19510                 | ' sub do_restorepalette()
19510                 | _do_restorepalette
19510     0C 82 B0 FD | 	call	#_Hg010b_4_spin2_restorepalette
19514                 | _do_restorepalette_ret
19514     2D 00 64 FD | 	ret
19518                 | 
19518                 | ' '------------------- return
19518                 | ' 
19518                 | ' sub do_return()
19518                 | _do_return
19518                 | ' if gosubtop>0 then
19518     52 00 00 FF 
1951c     D8 64 06 F1 | 	add	objptr, ##42200
19520     32 81 02 FB | 	rdlong	_var01, objptr
19524     52 00 00 FF 
19528     D8 64 86 F1 | 	sub	objptr, ##42200
1952c     01 80 56 F2 | 	cmps	_var01, #1 wc
19530     8C 00 90 CD |  if_b	jmp	#LR__2140
19534     52 00 00 FF 
19538     D8 64 06 F1 | 	add	objptr, ##42200
1953c     32 81 02 FB | 	rdlong	_var01, objptr
19540     03 80 66 F0 | 	shl	_var01, #3
19544     03 00 00 FF 
19548     88 65 86 F1 | 	sub	objptr, ##1928
1954c     32 81 02 F1 | 	add	_var01, objptr
19550     40 81 02 FB | 	rdlong	_var01, _var01
19554     03 00 00 FF 
19558     0C 65 06 F1 | 	add	objptr, ##1804
1955c     32 81 62 FC | 	wrlong	_var01, objptr
19560     7C 64 06 F1 | 	add	objptr, #124
19564     32 81 02 FB | 	rdlong	_var01, objptr
19568     03 80 66 F0 | 	shl	_var01, #3
1956c     03 00 00 FF 
19570     88 65 86 F1 | 	sub	objptr, ##1928
19574     32 81 02 F1 | 	add	_var01, objptr
19578     04 80 06 F1 | 	add	_var01, #4
1957c     40 81 02 FB | 	rdlong	_var01, _var01
19580     03 00 00 FF 
19584     10 65 06 F1 | 	add	objptr, ##1808
19588     32 81 62 FC | 	wrlong	_var01, objptr
1958c     06 00 00 FF 
19590     40 64 86 F1 | 	sub	objptr, ##3136
19594     32 81 02 FB | 	rdlong	_var01, objptr
19598     01 80 86 F1 | 	sub	_var01, #1
1959c     04 64 06 F1 | 	add	objptr, #4
195a0     32 81 62 FC | 	wrlong	_var01, objptr
195a4     06 00 00 FF 
195a8     B4 64 06 F1 | 	add	objptr, ##3252
195ac     32 81 02 FB | 	rdlong	_var01, objptr
195b0     01 80 86 F1 | 	sub	_var01, #1
195b4     32 81 62 FC | 	wrlong	_var01, objptr
195b8     52 00 00 FF 
195bc     D8 64 86 F1 | 	sub	objptr, ##42200
195c0                 | LR__2140
195c0                 | _do_return_ret
195c0     2D 00 64 FD | 	ret
195c4                 | 
195c4                 | ' 
195c4                 | ' '------------------- right$
195c4                 | ' 
195c4                 | ' sub do_right
195c4                 | _do_right
195c4     01 CA 05 F6 | 	mov	COUNT_, #1
195c8     E8 00 A0 FD | 	call	#pushregs_
195cc     14 F0 07 F1 | 	add	ptra, #20
195d0     4C 00 00 FF 
195d4     24 64 06 F1 | 	add	objptr, ##38948
195d8     32 97 02 FB | 	rdlong	arg03, objptr
195dc     4B 95 02 F6 | 	mov	arg02, arg03
195e0     01 94 66 F0 | 	shl	arg02, #1
195e4     4B 95 02 F1 | 	add	arg02, arg03
195e8     02 94 66 F0 | 	shl	arg02, #2
195ec     03 00 00 FF 
195f0     04 64 86 F1 | 	sub	objptr, ##1540
195f4     32 95 02 F1 | 	add	arg02, objptr
195f8     4A 97 02 FB | 	rdlong	arg03, arg02
195fc                 | ' 
195fc                 | ' numpar=compiledline(lineptr_e).result.uresult
195fc                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
195fc     02 96 0E F2 | 	cmp	arg03, #2 wz
19600     49 00 00 FF 
19604     20 64 86 F1 | 	sub	objptr, ##37408
19608     40 00 90 AD |  if_e	jmp	#LR__2150
1960c     00 92 06 F6 | 	mov	arg01, #0
19610     48 09 B1 FD | 	call	#__system___getiolock_0622
19614     3D 93 02 F6 | 	mov	arg01, result1
19618     BC B3 B0 FD | 	call	#__system___lockmem
1961c     98 01 00 FF 
19620     FB 94 06 F6 | 	mov	arg02, ##@LR__6078
19624     00 92 06 F6 | 	mov	arg01, #0
19628     00 96 06 F6 | 	mov	arg03, #0
1962c     9C C0 B0 FD | 	call	#__system___basic_print_string
19630     00 92 06 F6 | 	mov	arg01, #0
19634     24 09 B1 FD | 	call	#__system___getiolock_0622
19638     3D 01 68 FC | 	wrlong	#0, result1
1963c     27 92 06 F6 | 	mov	arg01, #39
19640     00 94 06 F6 | 	mov	arg02, #0
19644     8C 76 B0 FD | 	call	#_printerror
19648     D8 00 90 FD | 	jmp	#LR__2153
1964c                 | LR__2150
1964c     20 40 BF FD | 	call	#_pop
19650     3F 97 02 F6 | 	mov	arg03, result3
19654     E7 7A 62 FC | 	wrlong	result1, fp
19658     04 CE 05 F1 | 	add	fp, #4
1965c     E7 7C 62 FC | 	wrlong	result2, fp
19660     04 CE 05 F1 | 	add	fp, #4
19664     E7 96 62 FC | 	wrlong	arg03, fp
19668     08 CE 85 F1 | 	sub	fp, #8
1966c     E7 92 02 F6 | 	mov	arg01, fp
19670     D8 41 BF FD | 	call	#_converttoint
19674     3D A7 02 F6 | 	mov	local01, result1
19678     F4 3F BF FD | 	call	#_pop
1967c     3F 97 02 F6 | 	mov	arg03, result3
19680     E7 7A 62 FC | 	wrlong	result1, fp
19684     04 CE 05 F1 | 	add	fp, #4
19688     E7 7C 62 FC | 	wrlong	result2, fp
1968c     04 CE 05 F1 | 	add	fp, #4
19690     E7 96 62 FC | 	wrlong	arg03, fp
19694                 | ' t1=pop() : arg=converttoint(t1)
19694                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
19694     08 CE 85 F1 | 	sub	fp, #8
19698     2B 96 0E F2 | 	cmp	arg03, #43 wz
1969c     18 00 90 5D |  if_ne	jmp	#LR__2151
196a0     E7 92 02 FB | 	rdlong	arg01, fp
196a4     38 41 BF FD | 	call	#_convertstring
196a8     E7 7A 62 FC | 	wrlong	result1, fp
196ac     08 CE 05 F1 | 	add	fp, #8
196b0     E7 3E 68 FC | 	wrlong	#31, fp
196b4     08 CE 85 F1 | 	sub	fp, #8
196b8                 | LR__2151
196b8                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
196b8     08 CE 05 F1 | 	add	fp, #8
196bc     E7 96 02 FB | 	rdlong	arg03, fp
196c0     08 CE 85 F1 | 	sub	fp, #8
196c4     1F 96 0E F2 | 	cmp	arg03, #31 wz
196c8     40 00 90 AD |  if_e	jmp	#LR__2152
196cc     00 92 06 F6 | 	mov	arg01, #0
196d0     88 08 B1 FD | 	call	#__system___getiolock_0622
196d4     3D 93 02 F6 | 	mov	arg01, result1
196d8     FC B2 B0 FD | 	call	#__system___lockmem
196dc     98 01 00 FF 
196e0     04 95 06 F6 | 	mov	arg02, ##@LR__6079
196e4     00 92 06 F6 | 	mov	arg01, #0
196e8     00 96 06 F6 | 	mov	arg03, #0
196ec     DC BF B0 FD | 	call	#__system___basic_print_string
196f0     00 92 06 F6 | 	mov	arg01, #0
196f4     64 08 B1 FD | 	call	#__system___getiolock_0622
196f8     3D 01 68 FC | 	wrlong	#0, result1
196fc     0F 92 06 F6 | 	mov	arg01, #15
19700     00 94 06 F6 | 	mov	arg02, #0
19704     CC 75 B0 FD | 	call	#_printerror
19708     18 00 90 FD | 	jmp	#LR__2153
1970c                 | LR__2152
1970c     E7 92 02 FB | 	rdlong	arg01, fp
19710     53 95 02 F6 | 	mov	arg02, local01
19714     F0 CB B0 FD | 	call	#__system__Right_S
19718     E7 7A 62 FC | 	wrlong	result1, fp
1971c     E7 92 02 F6 | 	mov	arg01, fp
19720     DC 3F BF FD | 	call	#_push
19724                 | LR__2153
19724     E7 F0 03 F6 | 	mov	ptra, fp
19728     F2 00 A0 FD | 	call	#popregs_
1972c                 | _do_right_ret
1972c     2D 00 64 FD | 	ret
19730                 | 
19730                 | ' 
19730                 | ' '------------------- rnd
19730                 | ' 
19730                 | ' sub do_rnd
19730                 | _do_rnd
19730     02 CA 05 F6 | 	mov	COUNT_, #2
19734     E8 00 A0 FD | 	call	#pushregs_
19738     10 F0 07 F1 | 	add	ptra, #16
1973c     4C 00 00 FF 
19740     24 64 06 F1 | 	add	objptr, ##38948
19744     32 A7 02 FB | 	rdlong	local01, objptr
19748     53 97 02 F6 | 	mov	arg03, local01
1974c     01 96 66 F0 | 	shl	arg03, #1
19750     53 97 02 F1 | 	add	arg03, local01
19754     02 96 66 F0 | 	shl	arg03, #2
19758     03 00 00 FF 
1975c     04 64 86 F1 | 	sub	objptr, ##1540
19760     32 97 02 F1 | 	add	arg03, objptr
19764     4B A9 02 FB | 	rdlong	local02, arg03
19768                 | ' 
19768                 | ' numpar=compiledline(lineptr_e).result.uresult
19768                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
19768     02 A8 16 F2 | 	cmp	local02, #2 wc
1976c     49 00 00 FF 
19770     20 64 86 F1 | 	sub	objptr, ##37408
19774     40 00 90 CD |  if_b	jmp	#LR__2160
19778     00 92 06 F6 | 	mov	arg01, #0
1977c     DC 07 B1 FD | 	call	#__system___getiolock_0622
19780     3D 93 02 F6 | 	mov	arg01, result1
19784     50 B2 B0 FD | 	call	#__system___lockmem
19788     98 01 00 FF 
1978c     0D 95 06 F6 | 	mov	arg02, ##@LR__6080
19790     00 92 06 F6 | 	mov	arg01, #0
19794     00 96 06 F6 | 	mov	arg03, #0
19798     30 BF B0 FD | 	call	#__system___basic_print_string
1979c     00 92 06 F6 | 	mov	arg01, #0
197a0     B8 07 B1 FD | 	call	#__system___getiolock_0622
197a4     3D 01 68 FC | 	wrlong	#0, result1
197a8     27 92 06 F6 | 	mov	arg01, #39
197ac     00 94 06 F6 | 	mov	arg02, #0
197b0     20 75 B0 FD | 	call	#_printerror
197b4     28 01 90 FD | 	jmp	#LR__2167
197b8                 | LR__2160
197b8                 | ' if numpar=0 then
197b8     00 A8 0E F2 | 	cmp	local02, #0 wz
197bc     20 00 90 5D |  if_ne	jmp	#LR__2161
197c0     08 CE 05 F1 | 	add	fp, #8
197c4     E7 3A 68 FC | 	wrlong	#29, fp
197c8     08 CE 85 F1 | 	sub	fp, #8
197cc     1B 7A 62 FD | 	getrnd	result1
197d0     E7 7A 62 FC | 	wrlong	result1, fp
197d4     E7 92 02 F6 | 	mov	arg01, fp
197d8     24 3F BF FD | 	call	#_push
197dc     00 01 90 FD | 	jmp	#LR__2166
197e0                 | LR__2161
197e0     8C 3E BF FD | 	call	#_pop
197e4     E7 7A 62 FC | 	wrlong	result1, fp
197e8     04 CE 05 F1 | 	add	fp, #4
197ec     E7 7C 62 FC | 	wrlong	result2, fp
197f0     04 CE 05 F1 | 	add	fp, #4
197f4     E7 7E 62 FC | 	wrlong	result3, fp
197f8                 | '   t1=pop()
197f8                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
197f8     08 CE 85 F1 | 	sub	fp, #8
197fc     1C 7E 0E F2 | 	cmp	result3, #28 wz
19800     08 CE 05 51 |  if_ne	add	fp, #8
19804     E7 A6 02 5B |  if_ne	rdlong	local01, fp
19808     08 CE 85 51 |  if_ne	sub	fp, #8
1980c     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
19810     2C 00 90 5D |  if_ne	jmp	#LR__2162
19814     1B 7A 62 FD | 	getrnd	result1
19818     E7 A6 02 FB | 	rdlong	local01, fp
1981c     53 7B 12 FD | 	qdiv	result1, local01
19820     E7 92 02 F6 | 	mov	arg01, fp
19824     19 A8 62 FD | 	getqy	local02
19828     E7 A8 62 FC | 	wrlong	local02, fp
1982c     08 CE 05 F1 | 	add	fp, #8
19830     E7 3A 68 FC | 	wrlong	#29, fp
19834     08 CE 85 F1 | 	sub	fp, #8
19838     C4 3E BF FD | 	call	#_push
1983c     A0 00 90 FD | 	jmp	#LR__2165
19840                 | LR__2162
19840     08 CE 05 F1 | 	add	fp, #8
19844     E7 A8 02 FB | 	rdlong	local02, fp
19848     08 CE 85 F1 | 	sub	fp, #8
1984c     1E A8 0E F2 | 	cmp	local02, #30 wz
19850     48 00 90 5D |  if_ne	jmp	#LR__2163
19854     E7 92 02 FB | 	rdlong	arg01, fp
19858     00 C0 24 FF 
1985c     00 94 06 F6 | 	mov	arg02, ##1233125376
19860     48 DA B0 FD | 	call	#__system___float_div
19864     3D A9 02 F6 | 	mov	local02, result1
19868     1B 92 62 FD | 	getrnd	arg01
1986c     74 93 06 F4 | 	bitl	arg01, #372
19870     30 D4 B0 FD | 	call	#__system___float_fromuns
19874     3D 95 02 F6 | 	mov	arg02, result1
19878     54 93 02 F6 | 	mov	arg01, local02
1987c     28 D8 B0 FD | 	call	#__system___float_mul
19880     E7 7A 62 FC | 	wrlong	result1, fp
19884     08 CE 05 F1 | 	add	fp, #8
19888     E7 3C 68 FC | 	wrlong	#30, fp
1988c     08 CE 85 F1 | 	sub	fp, #8
19890     E7 92 02 F6 | 	mov	arg01, fp
19894     68 3E BF FD | 	call	#_push
19898     44 00 90 FD | 	jmp	#LR__2164
1989c                 | LR__2163
1989c                 | '     print "rnd: "; : printerror(40) 
1989c     00 92 06 F6 | 	mov	arg01, #0
198a0     B8 06 B1 FD | 	call	#__system___getiolock_0622
198a4     3D 93 02 F6 | 	mov	arg01, result1
198a8     2C B1 B0 FD | 	call	#__system___lockmem
198ac     98 01 00 FF 
198b0     13 95 06 F6 | 	mov	arg02, ##@LR__6081
198b4     00 92 06 F6 | 	mov	arg01, #0
198b8     00 96 06 F6 | 	mov	arg03, #0
198bc     0C BE B0 FD | 	call	#__system___basic_print_string
198c0     00 92 06 F6 | 	mov	arg01, #0
198c4     94 06 B1 FD | 	call	#__system___getiolock_0622
198c8     3D 01 68 FC | 	wrlong	#0, result1
198cc     28 92 06 F6 | 	mov	arg01, #40
198d0     00 94 06 F6 | 	mov	arg02, #0
198d4     FC 73 B0 FD | 	call	#_printerror
198d8     E7 92 02 F6 | 	mov	arg01, fp
198dc     20 3E BF FD | 	call	#_push
198e0                 | LR__2164
198e0                 | LR__2165
198e0                 | LR__2166
198e0                 | LR__2167
198e0     E7 F0 03 F6 | 	mov	ptra, fp
198e4     F2 00 A0 FD | 	call	#popregs_
198e8                 | _do_rnd_ret
198e8     2D 00 64 FD | 	ret
198ec                 | 
198ec                 | ' 
198ec                 | ' '-------------------- round
198ec                 | ' 
198ec                 | ' sub do_round
198ec                 | _do_round
198ec     00 CA 05 F6 | 	mov	COUNT_, #0
198f0     E8 00 A0 FD | 	call	#pushregs_
198f4     0C F0 07 F1 | 	add	ptra, #12
198f8     74 3D BF FD | 	call	#_pop
198fc     E7 7A 62 FC | 	wrlong	result1, fp
19900     04 CE 05 F1 | 	add	fp, #4
19904     E7 7C 62 FC | 	wrlong	result2, fp
19908     04 CE 05 F1 | 	add	fp, #4
1990c     E7 7E 62 FC | 	wrlong	result3, fp
19910     08 CE 85 F1 | 	sub	fp, #8
19914     E7 92 02 F6 | 	mov	arg01, fp
19918     30 3F BF FD | 	call	#_converttoint
1991c     E7 7A 62 FC | 	wrlong	result1, fp
19920     08 CE 05 F1 | 	add	fp, #8
19924     E7 38 68 FC | 	wrlong	#28, fp
19928     08 CE 85 F1 | 	sub	fp, #8
1992c     E7 92 02 F6 | 	mov	arg01, fp
19930     CC 3D BF FD | 	call	#_push
19934     E7 F0 03 F6 | 	mov	ptra, fp
19938     F2 00 A0 FD | 	call	#popregs_
1993c                 | _do_round_ret
1993c     2D 00 64 FD | 	ret
19940                 | 
19940                 | ' 
19940                 | ' '-------------------- rqpin
19940                 | ' 
19940                 | ' sub do_rqpin
19940                 | _do_rqpin
19940     00 CA 05 F6 | 	mov	COUNT_, #0
19944     E8 00 A0 FD | 	call	#pushregs_
19948     0C F0 07 F1 | 	add	ptra, #12
1994c     20 3D BF FD | 	call	#_pop
19950     E7 7A 62 FC | 	wrlong	result1, fp
19954     04 CE 05 F1 | 	add	fp, #4
19958     E7 7C 62 FC | 	wrlong	result2, fp
1995c     04 CE 05 F1 | 	add	fp, #4
19960     E7 7E 62 FC | 	wrlong	result3, fp
19964     08 CE 85 F1 | 	sub	fp, #8
19968     E7 92 02 F6 | 	mov	arg01, fp
1996c     DC 3E BF FD | 	call	#_converttoint
19970     3D 93 02 F6 | 	mov	arg01, result1
19974     00 7A 06 F6 | 	mov	result1, #0
19978     49 7B 82 FA | 	rqpin	result1, arg01
1997c     54 00 00 FF 
19980     EC 64 06 F1 | 	add	objptr, ##43244
19984     32 7B 62 FC | 	wrlong	result1, objptr
19988     54 00 00 FF 
1998c     EC 64 86 F1 | 	sub	objptr, ##43244
19990     08 CE 05 F1 | 	add	fp, #8
19994     E7 3A 68 FC | 	wrlong	#29, fp
19998     08 CE 85 F1 | 	sub	fp, #8
1999c     E7 08 68 FC | 	wrlong	#4, fp
199a0     E7 92 02 F6 | 	mov	arg01, fp
199a4     58 3D BF FD | 	call	#_push
199a8     E7 F0 03 F6 | 	mov	ptra, fp
199ac     F2 00 A0 FD | 	call	#popregs_
199b0                 | _do_rqpin_ret
199b0     2D 00 64 FD | 	ret
199b4                 | 
199b4                 | ' 
199b4                 | ' ' ------------------ run
199b4                 | ' 
199b4                 | ' sub do_run
199b4                 | _do_run
199b4     04 CA 05 F6 | 	mov	COUNT_, #4
199b8     E8 00 A0 FD | 	call	#pushregs_
199bc     4C 00 00 FF 
199c0     24 64 06 F1 | 	add	objptr, ##38948
199c4     32 A7 02 FB | 	rdlong	local01, objptr
199c8     06 00 00 FF 
199cc     38 64 06 F1 | 	add	objptr, ##3128
199d0     32 A9 02 FB | 	rdlong	local02, objptr
199d4     04 64 06 F1 | 	add	objptr, #4
199d8     32 AB 02 FB | 	rdlong	local03, objptr
199dc     53 99 02 F6 | 	mov	arg04, local01
199e0     4C 97 02 F6 | 	mov	arg03, arg04
199e4     01 96 66 F0 | 	shl	arg03, #1
199e8     4C 97 02 F1 | 	add	arg03, arg04
199ec     02 96 66 F0 | 	shl	arg03, #2
199f0     09 00 00 FF 
199f4     40 64 86 F1 | 	sub	objptr, ##4672
199f8     32 97 02 F1 | 	add	arg03, objptr
199fc     4B 95 02 FB | 	rdlong	arg02, arg03
19a00                 | ' 
19a00                 | ' r_lineptr_e=lineptr_e
19a00                 | ' r_runptr=runptr
19a00                 | ' r_runptr2=runptr2
19a00                 | ' 
19a00                 | ' numpar=compiledline(lineptr_e).result.uresult
19a00                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
19a00     01 94 0E F2 | 	cmp	arg02, #1 wz
19a04     49 00 00 FF 
19a08     20 64 86 F1 | 	sub	objptr, ##37408
19a0c     00 92 06 A6 |  if_e	mov	arg01, #0
19a10     B8 AB BF AD |  if_e	call	#_do_load
19a14     4C 00 00 FF 
19a18     2C 64 06 F1 | 	add	objptr, ##38956
19a1c     32 99 02 FB | 	rdlong	arg04, objptr
19a20     06 00 00 FF 
19a24     30 64 06 F1 | 	add	objptr, ##3120
19a28     32 99 62 FC | 	wrlong	arg04, objptr
19a2c     04 64 06 F1 | 	add	objptr, #4
19a30     32 01 68 FC | 	wrlong	#0, objptr
19a34     04 64 06 F1 | 	add	objptr, #4
19a38     FF FF FF FF 
19a3c     32 FF 6B FC | 	wrlong	##-1, objptr
19a40     06 00 00 FF 
19a44     38 64 86 F1 | 	sub	objptr, ##3128
19a48     32 99 02 FB | 	rdlong	arg04, objptr
19a4c     06 00 00 FF 
19a50     A4 64 06 F1 | 	add	objptr, ##3236
19a54     32 99 62 FC | 	wrlong	arg04, objptr
19a58     98 01 00 FF 
19a5c     19 99 06 F6 | 	mov	arg04, ##@LR__6082
19a60     01 00 00 FF 
19a64     E8 65 06 F1 | 	add	objptr, ##1000
19a68     32 99 62 FC | 	wrlong	arg04, objptr
19a6c                 | ' runptr=programstart : runptr2=0 : oldrunptr=-1 
19a6c                 | ' dataptr=programstart : readline="" ' reset the data pointer
19a6c                 | ' if inrun>0 then 
19a6c     02 00 00 FF 
19a70     28 64 86 F1 | 	sub	objptr, ##1064
19a74     32 99 02 FB | 	rdlong	arg04, objptr
19a78     52 00 00 FF 
19a7c     90 64 86 F1 | 	sub	objptr, ##42128
19a80     01 98 16 F2 | 	cmp	arg04, #1 wc
19a84     34 00 90 CD |  if_b	jmp	#LR__2170
19a88     32 93 02 F6 | 	mov	arg01, objptr
19a8c     52 00 00 FF 
19a90     94 92 06 F1 | 	add	arg01, ##42132
19a94     52 00 00 FF 
19a98     5C 64 06 F1 | 	add	objptr, ##42076
19a9c     32 95 02 FB | 	rdlong	arg02, objptr
19aa0     18 96 06 F6 | 	mov	arg03, #24
19aa4     46 00 00 FF 
19aa8     90 65 86 F1 | 	sub	objptr, ##36240
19aac     B4 9F B0 FD | 	call	#_psram4_spin2_read1
19ab0     0B 00 00 FF 
19ab4     CC 64 86 F1 | 	sub	objptr, ##5836
19ab8                 | '   psram.read1(varptr(runheader),runptr,24)  
19ab8                 | '   return
19ab8     10 03 90 FD | 	jmp	#LR__2177
19abc                 | LR__2170
19abc     52 00 00 FF 
19ac0     90 64 06 F1 | 	add	objptr, ##42128
19ac4     32 03 68 FC | 	wrlong	#1, objptr
19ac8     04 64 06 F1 | 	add	objptr, #4
19acc     32 93 02 F6 | 	mov	arg01, objptr
19ad0     38 64 86 F1 | 	sub	objptr, #56
19ad4     32 95 02 FB | 	rdlong	arg02, objptr
19ad8     18 96 06 F6 | 	mov	arg03, #24
19adc     46 00 00 FF 
19ae0     90 65 86 F1 | 	sub	objptr, ##36240
19ae4     7C 9F B0 FD | 	call	#_psram4_spin2_read1
19ae8                 | ' inrun=1
19ae8                 | ' psram.read1(varptr(runheader),runptr,24) 
19ae8                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
19ae8     46 00 00 FF 
19aec     C8 65 06 F1 | 	add	objptr, ##36296
19af0     32 AD 02 FB | 	rdlong	local04, objptr
19af4     52 00 00 FF 
19af8     94 64 86 F1 | 	sub	objptr, ##42132
19afc     FF FF 7F FF 
19b00     FF AD 0E F2 | 	cmp	local04, ##-1 wz
19b04     52 00 00 AF 
19b08     90 64 06 A1 |  if_e	add	objptr, ##42128
19b0c     32 01 68 AC |  if_e	wrlong	#0, objptr
19b10     52 00 00 AF 
19b14     90 64 86 A1 |  if_e	sub	objptr, ##42128
19b18     B0 02 90 AD |  if_e	jmp	#LR__2177
19b1c                 | ' do 
19b1c                 | LR__2171
19b1c                 | '   if runptr<>oldrunptr then
19b1c     52 00 00 FF 
19b20     5C 64 06 F1 | 	add	objptr, ##42076
19b24     32 AD 02 FB | 	rdlong	local04, objptr
19b28     08 64 06 F1 | 	add	objptr, #8
19b2c     32 99 02 FB | 	rdlong	arg04, objptr
19b30     52 00 00 FF 
19b34     64 64 86 F1 | 	sub	objptr, ##42084
19b38     4C AD 0A F2 | 	cmp	local04, arg04 wz
19b3c     D0 00 90 AD |  if_e	jmp	#LR__2172
19b40     32 93 02 F6 | 	mov	arg01, objptr
19b44     52 00 00 FF 
19b48     94 92 06 F1 | 	add	arg01, ##42132
19b4c     52 00 00 FF 
19b50     5C 64 06 F1 | 	add	objptr, ##42076
19b54     32 95 02 FB | 	rdlong	arg02, objptr
19b58     18 96 06 F6 | 	mov	arg03, #24
19b5c     46 00 00 FF 
19b60     90 65 86 F1 | 	sub	objptr, ##36240
19b64     FC 9E B0 FD | 	call	#_psram4_spin2_read1
19b68     3D 00 00 FF 
19b6c     54 65 06 F1 | 	add	objptr, ##31572
19b70     32 93 02 F6 | 	mov	arg01, objptr
19b74     09 00 00 FF 
19b78     3C 64 06 F1 | 	add	objptr, ##4668
19b7c     32 95 02 FB | 	rdlong	arg02, objptr
19b80     0B 00 00 FF 
19b84     54 64 86 F1 | 	sub	objptr, ##5716
19b88     32 AD 02 FB | 	rdlong	local04, objptr
19b8c     01 AC 66 F0 | 	shl	local04, #1
19b90     56 95 02 F1 | 	add	arg02, local04
19b94     0B 00 00 FF 
19b98     94 64 06 F1 | 	add	objptr, ##5780
19b9c     32 97 02 FB | 	rdlong	arg03, objptr
19ba0     40 64 86 F1 | 	sub	objptr, #64
19ba4     32 AD 02 FB | 	rdlong	local04, objptr
19ba8     56 97 82 F1 | 	sub	arg03, local04
19bac     46 00 00 FF 
19bb0     90 65 86 F1 | 	sub	objptr, ##36240
19bb4     AC 9E B0 FD | 	call	#_psram4_spin2_read1
19bb8     46 00 00 FF 
19bbc     D0 65 06 F1 | 	add	objptr, ##36304
19bc0     32 AD 02 FB | 	rdlong	local04, objptr
19bc4     40 64 86 F1 | 	sub	objptr, #64
19bc8     32 95 02 FB | 	rdlong	arg02, objptr
19bcc     4A AD 82 F1 | 	sub	local04, arg02
19bd0     0B 00 00 FF 
19bd4     54 64 86 F1 | 	sub	objptr, ##5716
19bd8     32 95 02 FB | 	rdlong	arg02, objptr
19bdc     4A AD 12 FD | 	qdiv	local04, arg02
19be0     05 00 00 FF 
19be4     18 64 06 F1 | 	add	objptr, ##2584
19be8     18 AC 62 FD | 	getqx	local04
19bec     03 AC 86 F1 | 	sub	local04, #3
19bf0     32 AD 62 FC | 	wrlong	local04, objptr
19bf4     06 00 00 FF 
19bf8     3C 64 06 F1 | 	add	objptr, ##3132
19bfc     32 AD 02 FB | 	rdlong	local04, objptr
19c00     08 64 06 F1 | 	add	objptr, #8
19c04     32 AD 62 FC | 	wrlong	local04, objptr
19c08     52 00 00 FF 
19c0c     64 64 86 F1 | 	sub	objptr, ##42084
19c10                 | LR__2172
19c10     52 00 00 FF 
19c14     A8 64 06 F1 | 	add	objptr, ##42152
19c18     32 AD 02 FB | 	rdlong	local04, objptr
19c1c     4C 64 86 F1 | 	sub	objptr, #76
19c20     32 AD 62 FC | 	wrlong	local04, objptr
19c24     04 64 06 F1 | 	add	objptr, #4
19c28     32 93 02 FB | 	rdlong	arg01, objptr
19c2c     52 00 00 FF 
19c30     60 64 86 F1 | 	sub	objptr, ##42080
19c34     34 39 BF FD | 	call	#_execute_line
19c38     52 00 00 FF 
19c3c     60 64 06 F1 | 	add	objptr, ##42080
19c40     32 7B 62 FC | 	wrlong	result1, objptr
19c44     04 64 86 F1 | 	sub	objptr, #4
19c48     32 AD 02 FB | 	rdlong	local04, objptr
19c4c     52 00 00 FF 
19c50     5C 64 86 F1 | 	sub	objptr, ##42076
19c54     FF FF 3F FF 
19c58     FF AD 0E F2 | 	cmp	local04, ##2147483647 wz
19c5c     4C 00 90 AD |  if_e	jmp	#LR__2175
19c60     E0 92 06 F6 | 	mov	arg01, #224
19c64     88 A1 B0 FD | 	call	#_usbnew_spin2_keystate
19c68     00 7A 0E F2 | 	cmp	result1, #0 wz
19c6c     10 00 90 5D |  if_ne	jmp	#LR__2173
19c70     E4 92 06 F6 | 	mov	arg01, #228
19c74     78 A1 B0 FD | 	call	#_usbnew_spin2_keystate
19c78     00 7A 0E F2 | 	cmp	result1, #0 wz
19c7c     10 00 90 AD |  if_e	jmp	#LR__2174
19c80                 | LR__2173
19c80     06 92 06 F6 | 	mov	arg01, #6
19c84     68 A1 B0 FD | 	call	#_usbnew_spin2_keystate
19c88     00 7A 0E F2 | 	cmp	result1, #0 wz
19c8c     1C 00 90 5D |  if_ne	jmp	#LR__2175
19c90                 | LR__2174
19c90     52 00 00 FF 
19c94     90 64 06 F1 | 	add	objptr, ##42128
19c98     32 AD 02 FB | 	rdlong	local04, objptr
19c9c     52 00 00 FF 
19ca0     90 64 86 F1 | 	sub	objptr, ##42128
19ca4     02 AC 0E F2 | 	cmp	local04, #2 wz
19ca8     70 FE 9F 5D |  if_ne	jmp	#LR__2171
19cac                 | LR__2175
19cac                 | '   ''do whatever kbm.peek_latest_key()=$106 
19cac                 | ' if runptr<>$7FFF_FFFF andalso inrun=1 then 
19cac     52 00 00 FF 
19cb0     5C 64 06 F1 | 	add	objptr, ##42076
19cb4     32 AD 02 FB | 	rdlong	local04, objptr
19cb8     52 00 00 FF 
19cbc     5C 64 86 F1 | 	sub	objptr, ##42076
19cc0     FF FF 3F FF 
19cc4     FF AD 0E F2 | 	cmp	local04, ##2147483647 wz
19cc8     AC 00 90 AD |  if_e	jmp	#LR__2176
19ccc     52 00 00 FF 
19cd0     90 64 06 F1 | 	add	objptr, ##42128
19cd4     32 AD 02 FB | 	rdlong	local04, objptr
19cd8     52 00 00 FF 
19cdc     90 64 86 F1 | 	sub	objptr, ##42128
19ce0     01 AC 0E F2 | 	cmp	local04, #1 wz
19ce4     90 00 90 5D |  if_ne	jmp	#LR__2176
19ce8                 | '   print: print "Stopped at line ";runheader(0) 
19ce8     00 92 06 F6 | 	mov	arg01, #0
19cec     6C 02 B1 FD | 	call	#__system___getiolock_0622
19cf0     3D 93 02 F6 | 	mov	arg01, result1
19cf4     E0 AC B0 FD | 	call	#__system___lockmem
19cf8     00 92 06 F6 | 	mov	arg01, #0
19cfc     0A 94 06 F6 | 	mov	arg02, #10
19d00     00 96 06 F6 | 	mov	arg03, #0
19d04     6C B9 B0 FD | 	call	#__system___basic_print_char
19d08     00 92 06 F6 | 	mov	arg01, #0
19d0c     4C 02 B1 FD | 	call	#__system___getiolock_0622
19d10     3D 01 68 FC | 	wrlong	#0, result1
19d14     00 92 06 F6 | 	mov	arg01, #0
19d18     40 02 B1 FD | 	call	#__system___getiolock_0622
19d1c     3D 93 02 F6 | 	mov	arg01, result1
19d20     B4 AC B0 FD | 	call	#__system___lockmem
19d24     98 01 00 FF 
19d28     1A 95 06 F6 | 	mov	arg02, ##@LR__6083
19d2c     00 92 06 F6 | 	mov	arg01, #0
19d30     00 96 06 F6 | 	mov	arg03, #0
19d34     94 B9 B0 FD | 	call	#__system___basic_print_string
19d38     52 00 00 FF 
19d3c     94 64 06 F1 | 	add	objptr, ##42132
19d40     32 95 02 FB | 	rdlong	arg02, objptr
19d44     52 00 00 FF 
19d48     94 64 86 F1 | 	sub	objptr, ##42132
19d4c     00 92 06 F6 | 	mov	arg01, #0
19d50     00 96 06 F6 | 	mov	arg03, #0
19d54     0A 98 06 F6 | 	mov	arg04, #10
19d58     F4 B9 B0 FD | 	call	#__system___basic_print_unsigned
19d5c     00 92 06 F6 | 	mov	arg01, #0
19d60     0A 94 06 F6 | 	mov	arg02, #10
19d64     00 96 06 F6 | 	mov	arg03, #0
19d68     08 B9 B0 FD | 	call	#__system___basic_print_char
19d6c     00 92 06 F6 | 	mov	arg01, #0
19d70     E8 01 B1 FD | 	call	#__system___getiolock_0622
19d74     3D 01 68 FC | 	wrlong	#0, result1
19d78                 | LR__2176
19d78     52 00 00 FF 
19d7c     90 64 06 F1 | 	add	objptr, ##42128
19d80     32 01 68 FC | 	wrlong	#0, objptr
19d84     06 00 00 FF 
19d88     6C 64 86 F1 | 	sub	objptr, ##3180
19d8c     32 A7 62 FC | 	wrlong	local01, objptr
19d90     06 00 00 FF 
19d94     38 64 06 F1 | 	add	objptr, ##3128
19d98     32 A9 62 FC | 	wrlong	local02, objptr
19d9c     04 64 06 F1 | 	add	objptr, #4
19da0     32 AB 62 FC | 	wrlong	local03, objptr
19da4     52 00 00 FF 
19da8     60 64 86 F1 | 	sub	objptr, ##42080
19dac     11 92 06 F6 | 	mov	arg01, #17
19db0     08 94 06 F6 | 	mov	arg02, #8
19db4     10 96 06 F6 | 	mov	arg03, #16
19db8     64 7F B0 FD | 	call	#_Hg010b_4_spin2_setspritesize
19dbc     10 92 06 F6 | 	mov	arg01, #16
19dc0     20 94 06 F6 | 	mov	arg02, #32
19dc4     20 96 06 F6 | 	mov	arg03, #32
19dc8     54 7F B0 FD | 	call	#_Hg010b_4_spin2_setspritesize
19dcc                 | LR__2177
19dcc     E7 F0 03 F6 | 	mov	ptra, fp
19dd0     F2 00 A0 FD | 	call	#popregs_
19dd4                 | _do_run_ret
19dd4     2D 00 64 FD | 	ret
19dd8                 | 
19dd8                 | ' 
19dd8                 | ' ' ------------------ save
19dd8                 | ' 
19dd8                 | ' sub do_save                        
19dd8                 | _do_save
19dd8     0A CA 05 F6 | 	mov	COUNT_, #10
19ddc     E8 00 A0 FD | 	call	#pushregs_
19de0     B8 F0 07 F1 | 	add	ptra, #184
19de4     4C 00 00 FF 
19de8     24 64 06 F1 | 	add	objptr, ##38948
19dec     32 97 02 FB | 	rdlong	arg03, objptr
19df0     4B AD 02 F6 | 	mov	local04, arg03
19df4     01 AC 66 F0 | 	shl	local04, #1
19df8     4B AD 02 F1 | 	add	local04, arg03
19dfc     02 AC 66 F0 | 	shl	local04, #2
19e00     03 00 00 FF 
19e04     04 64 86 F1 | 	sub	objptr, ##1540
19e08     32 AD 02 F1 | 	add	local04, objptr
19e0c     56 AF 02 FB | 	rdlong	local05, local04
19e10                 | ' 
19e10                 | ' numpar=compiledline(lineptr_e).result.uresult
19e10                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
19e10     01 AE 56 F2 | 	cmps	local05, #1 wc
19e14     49 00 00 FF 
19e18     20 64 86 F1 | 	sub	objptr, ##37408
19e1c     14 00 90 CD |  if_b	jmp	#LR__2180
19e20     4C 38 BF FD | 	call	#_pop
19e24     3D A7 02 F6 | 	mov	local01, result1
19e28     3E A9 02 F6 | 	mov	local02, result2
19e2c     3F AB 02 F6 | 	mov	local03, result3
19e30     18 00 90 FD | 	jmp	#LR__2181
19e34                 | LR__2180
19e34     54 00 00 FF 
19e38     A0 64 06 F1 | 	add	objptr, ##43168
19e3c     32 A7 02 FB | 	rdlong	local01, objptr
19e40     54 00 00 FF 
19e44     A0 64 86 F1 | 	sub	objptr, ##43168
19e48     1F AA 06 F6 | 	mov	local03, #31
19e4c                 | LR__2181
19e4c                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
19e4c     4C 00 00 FF 
19e50     2C 64 06 F1 | 	add	objptr, ##38956
19e54     32 93 02 FB | 	rdlong	arg01, objptr
19e58     4C 00 00 FF 
19e5c     2C 64 86 F1 | 	sub	objptr, ##38956
19e60     2C 71 B0 FD | 	call	#_pslpeek
19e64     FF FF 7F FF 
19e68     FF 7B 0E F2 | 	cmp	result1, ##-1 wz
19e6c     10 00 90 5D |  if_ne	jmp	#LR__2182
19e70     1B 92 06 F6 | 	mov	arg01, #27
19e74     00 94 06 F6 | 	mov	arg02, #0
19e78     58 6E B0 FD | 	call	#_printerror
19e7c     3C 02 90 FD | 	jmp	#LR__2188
19e80                 | LR__2182
19e80                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
19e80     2B AA 0E F2 | 	cmp	local03, #43 wz
19e84     10 00 90 5D |  if_ne	jmp	#LR__2183
19e88     53 93 02 F6 | 	mov	arg01, local01
19e8c     50 39 BF FD | 	call	#_convertstring
19e90     3D A7 02 F6 | 	mov	local01, result1
19e94     1F AA 06 F6 | 	mov	local03, #31
19e98                 | LR__2183
19e98                 | ' if t1.result_type=result_string then
19e98     1F AA 0E F2 | 	cmp	local03, #31 wz
19e9c     1C 02 90 5D |  if_ne	jmp	#LR__2187
19ea0                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
19ea0     98 01 00 FF 
19ea4     2B 95 06 F6 | 	mov	arg02, ##@LR__6084
19ea8     53 93 02 F6 | 	mov	arg01, local01
19eac     50 AB B0 FD | 	call	#__system___string_cmp
19eb0     00 7A 0E F2 | 	cmp	result1, #0 wz
19eb4     54 00 00 AF 
19eb8     A0 64 06 A1 |  if_e	add	objptr, ##43168
19ebc     32 A7 02 AB |  if_e	rdlong	local01, objptr
19ec0     54 00 00 FF 
19ec4     A0 64 C6 F3 | 	sumz	objptr, ##43168
19ec8     32 A7 62 5C |  if_ne	wrlong	local01, objptr
19ecc     54 00 00 5F 
19ed0     A0 64 86 51 |  if_ne	sub	objptr, ##43168
19ed4                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
19ed4     09 92 06 F6 | 	mov	arg01, #9
19ed8     D8 F6 B0 FD | 	call	#__system__close
19edc     09 B0 06 F6 | 	mov	local06, #9
19ee0     4C 00 00 FF 
19ee4     38 64 06 F1 | 	add	objptr, ##38968
19ee8     32 93 02 FB | 	rdlong	arg01, objptr
19eec     4C 00 00 FF 
19ef0     38 64 86 F1 | 	sub	objptr, ##38968
19ef4     98 01 00 FF 
19ef8     2C 95 06 F6 | 	mov	arg02, ##@LR__6085
19efc     34 AB B0 FD | 	call	#__system___string_concat
19f00     3D 93 02 F6 | 	mov	arg01, result1
19f04     53 95 02 F6 | 	mov	arg02, local01
19f08     28 AB B0 FD | 	call	#__system___string_concat
19f0c     3D 95 02 F6 | 	mov	arg02, result1
19f10     58 93 02 F6 | 	mov	arg01, local06
19f14     0D 96 06 F6 | 	mov	arg03, #13
19f18     6C B6 B0 FD | 	call	#__system___basic_open_string
19f1c     4C 00 00 FF 
19f20     2C 64 06 F1 | 	add	objptr, ##38956
19f24     32 B3 02 FB | 	rdlong	local07, objptr
19f28     4C 00 00 FF 
19f2c     2C 64 86 F1 | 	sub	objptr, ##38956
19f30                 | '   saveptr=programstart
19f30                 | '   do
19f30                 | LR__2184
19f30     E7 92 02 F6 | 	mov	arg01, fp
19f34     14 92 06 F1 | 	add	arg01, #20
19f38     59 95 02 F6 | 	mov	arg02, local07
19f3c     18 96 06 F6 | 	mov	arg03, #24
19f40     0B 00 00 FF 
19f44     CC 64 06 F1 | 	add	objptr, ##5836
19f48     18 9B B0 FD | 	call	#_psram4_spin2_read1
19f4c     E7 92 02 F6 | 	mov	arg01, fp
19f50     2C 92 06 F1 | 	add	arg01, #44
19f54     1C CE 05 F1 | 	add	fp, #28
19f58     E7 94 02 FB | 	rdlong	arg02, fp
19f5c     04 CE 05 F1 | 	add	fp, #4
19f60     E7 96 02 FB | 	rdlong	arg03, fp
19f64     20 CE 85 F1 | 	sub	fp, #32
19f68     F8 9A B0 FD | 	call	#_psram4_spin2_read1
19f6c     0B 00 00 FF 
19f70     CC 64 86 F1 | 	sub	objptr, ##5836
19f74     98 01 00 FF 
19f78     2E B5 06 F6 | 	mov	local08, ##@LR__6086
19f7c                 | '     psram.read1(varptr(header(0)),saveptr,24)
19f7c                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
19f7c                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
19f7c     01 B6 06 F6 | 	mov	local09, #1
19f80     20 CE 05 F1 | 	add	fp, #32
19f84     E7 B8 02 FB | 	rdlong	local10, fp
19f88     20 CE 85 F1 | 	sub	fp, #32
19f8c     01 B8 06 F1 | 	add	local10, #1
19f90                 | LR__2185
19f90     5C B7 52 F2 | 	cmps	local09, local10 wc
19f94     34 00 90 3D |  if_ae	jmp	#LR__2186
19f98     5B B3 02 F6 | 	mov	local07, local09
19f9c     01 B2 86 F1 | 	sub	local07, #1
19fa0     E7 B0 02 F6 | 	mov	local06, fp
19fa4     2C B0 06 F1 | 	add	local06, #44
19fa8     58 B3 02 F1 | 	add	local07, local06
19fac     59 93 C2 FA | 	rdbyte	arg01, local07
19fb0     90 C4 B0 FD | 	call	#__system__Chr_S
19fb4     3D 95 02 F6 | 	mov	arg02, result1
19fb8     5A 93 02 F6 | 	mov	arg01, local08
19fbc     74 AA B0 FD | 	call	#__system___string_concat
19fc0     3D B5 02 F6 | 	mov	local08, result1
19fc4     01 B6 06 F1 | 	add	local09, #1
19fc8     C4 FF 9F FD | 	jmp	#LR__2185
19fcc                 | LR__2186
19fcc                 | '     print #9, saveline$
19fcc     09 92 06 F6 | 	mov	arg01, #9
19fd0     88 FF B0 FD | 	call	#__system___getiolock_0622
19fd4     3D 93 02 F6 | 	mov	arg01, result1
19fd8     FC A9 B0 FD | 	call	#__system___lockmem
19fdc     09 92 06 F6 | 	mov	arg01, #9
19fe0     5A 95 02 F6 | 	mov	arg02, local08
19fe4     00 96 06 F6 | 	mov	arg03, #0
19fe8     E0 B6 B0 FD | 	call	#__system___basic_print_string
19fec     09 92 06 F6 | 	mov	arg01, #9
19ff0     0A 94 06 F6 | 	mov	arg02, #10
19ff4     00 96 06 F6 | 	mov	arg03, #0
19ff8     78 B6 B0 FD | 	call	#__system___basic_print_char
19ffc     09 92 06 F6 | 	mov	arg01, #9
1a000     58 FF B0 FD | 	call	#__system___getiolock_0622
1a004     3D 01 68 FC | 	wrlong	#0, result1
1a008     28 CE 05 F1 | 	add	fp, #40
1a00c     E7 B0 02 FB | 	rdlong	local06, fp
1a010     58 B3 02 F6 | 	mov	local07, local06
1a014     28 CE 85 F1 | 	sub	fp, #40
1a018     FF FF 3F FF 
1a01c     FF B1 0E F2 | 	cmp	local06, ##2147483647 wz
1a020     0C FF 9F 5D |  if_ne	jmp	#LR__2184
1a024                 | '   close #9  
1a024     09 92 06 F6 | 	mov	arg01, #9
1a028     88 F5 B0 FD | 	call	#__system__close
1a02c                 | '   print "Saved as ";currentdir$+"/"+loadname
1a02c     00 92 06 F6 | 	mov	arg01, #0
1a030     28 FF B0 FD | 	call	#__system___getiolock_0622
1a034     3D 93 02 F6 | 	mov	arg01, result1
1a038     9C A9 B0 FD | 	call	#__system___lockmem
1a03c     98 01 00 FF 
1a040     2F 95 06 F6 | 	mov	arg02, ##@LR__6087
1a044     00 92 06 F6 | 	mov	arg01, #0
1a048     00 96 06 F6 | 	mov	arg03, #0
1a04c     7C B6 B0 FD | 	call	#__system___basic_print_string
1a050     00 AC 06 F6 | 	mov	local04, #0
1a054     4C 00 00 FF 
1a058     38 64 06 F1 | 	add	objptr, ##38968
1a05c     32 93 02 FB | 	rdlong	arg01, objptr
1a060     4C 00 00 FF 
1a064     38 64 86 F1 | 	sub	objptr, ##38968
1a068     98 01 00 FF 
1a06c     39 95 06 F6 | 	mov	arg02, ##@LR__6088
1a070     C0 A9 B0 FD | 	call	#__system___string_concat
1a074     3D 93 02 F6 | 	mov	arg01, result1
1a078     54 00 00 FF 
1a07c     A0 64 06 F1 | 	add	objptr, ##43168
1a080     32 95 02 FB | 	rdlong	arg02, objptr
1a084     54 00 00 FF 
1a088     A0 64 86 F1 | 	sub	objptr, ##43168
1a08c     A4 A9 B0 FD | 	call	#__system___string_concat
1a090     3D 95 02 F6 | 	mov	arg02, result1
1a094     56 93 02 F6 | 	mov	arg01, local04
1a098     00 96 06 F6 | 	mov	arg03, #0
1a09c     2C B6 B0 FD | 	call	#__system___basic_print_string
1a0a0     00 92 06 F6 | 	mov	arg01, #0
1a0a4     0A 94 06 F6 | 	mov	arg02, #10
1a0a8     00 96 06 F6 | 	mov	arg03, #0
1a0ac     C4 B5 B0 FD | 	call	#__system___basic_print_char
1a0b0     00 92 06 F6 | 	mov	arg01, #0
1a0b4     A4 FE B0 FD | 	call	#__system___getiolock_0622
1a0b8     3D 01 68 FC | 	wrlong	#0, result1
1a0bc                 | LR__2187
1a0bc                 | LR__2188
1a0bc     E7 F0 03 F6 | 	mov	ptra, fp
1a0c0     F2 00 A0 FD | 	call	#popregs_
1a0c4                 | _do_save_ret
1a0c4     2D 00 64 FD | 	ret
1a0c8                 | 
1a0c8                 | ' 
1a0c8                 | ' ' ------------------ setamode
1a0c8                 | ' 
1a0c8                 | ' sub do_setamode
1a0c8                 | _do_setamode
1a0c8     02 CA 05 F6 | 	mov	COUNT_, #2
1a0cc     E8 00 A0 FD | 	call	#pushregs_
1a0d0     18 F0 07 F1 | 	add	ptra, #24
1a0d4     98 35 BF FD | 	call	#_pop
1a0d8     3D 93 02 F6 | 	mov	arg01, result1
1a0dc     3E A7 02 F6 | 	mov	local01, result2
1a0e0     3F A9 02 F6 | 	mov	local02, result3
1a0e4     E7 92 62 FC | 	wrlong	arg01, fp
1a0e8     04 CE 05 F1 | 	add	fp, #4
1a0ec     E7 A6 62 FC | 	wrlong	local01, fp
1a0f0     04 CE 05 F1 | 	add	fp, #4
1a0f4     E7 A8 62 FC | 	wrlong	local02, fp
1a0f8     08 CE 85 F1 | 	sub	fp, #8
1a0fc     70 35 BF FD | 	call	#_pop
1a100     3D A9 02 F6 | 	mov	local02, result1
1a104     0C CE 05 F1 | 	add	fp, #12
1a108     E7 A8 62 FC | 	wrlong	local02, fp
1a10c     04 CE 05 F1 | 	add	fp, #4
1a110     E7 7C 62 FC | 	wrlong	result2, fp
1a114     04 CE 05 F1 | 	add	fp, #4
1a118     E7 7E 62 FC | 	wrlong	result3, fp
1a11c     08 CE 85 F1 | 	sub	fp, #8
1a120     E7 92 02 F6 | 	mov	arg01, fp
1a124     0C CE 85 F1 | 	sub	fp, #12
1a128     20 37 BF FD | 	call	#_converttoint
1a12c     3D A7 02 F6 | 	mov	local01, result1
1a130     03 A6 66 F0 | 	shl	local01, #3
1a134     3D A7 82 F1 | 	sub	local01, result1
1a138     02 A6 66 F0 | 	shl	local01, #2
1a13c     32 A9 02 F6 | 	mov	local02, objptr
1a140     16 00 00 FF 
1a144     BC A8 06 F1 | 	add	local02, ##11452
1a148     54 A7 02 F1 | 	add	local01, local02
1a14c     E7 92 02 F6 | 	mov	arg01, fp
1a150     F8 36 BF FD | 	call	#_converttoint
1a154     16 A6 06 F1 | 	add	local01, #22
1a158     53 7B 52 FC | 	wrword	result1, local01
1a15c     E7 F0 03 F6 | 	mov	ptra, fp
1a160     F2 00 A0 FD | 	call	#popregs_
1a164                 | _do_setamode_ret
1a164     2D 00 64 FD | 	ret
1a168                 | 
1a168                 | ' 
1a168                 | ' 
1a168                 | ' ' ------------------ setcolor
1a168                 | ' 
1a168                 | ' sub do_setcolor
1a168                 | _do_setcolor
1a168     05 CA 05 F6 | 	mov	COUNT_, #5
1a16c     E8 00 A0 FD | 	call	#pushregs_
1a170     20 F0 07 F1 | 	add	ptra, #32
1a174     4C 00 00 FF 
1a178     24 64 06 F1 | 	add	objptr, ##38948
1a17c     32 99 02 FB | 	rdlong	arg04, objptr
1a180     4C 97 02 F6 | 	mov	arg03, arg04
1a184     01 96 66 F0 | 	shl	arg03, #1
1a188     4C 97 02 F1 | 	add	arg03, arg04
1a18c     02 96 66 F0 | 	shl	arg03, #2
1a190     03 00 00 FF 
1a194     04 64 86 F1 | 	sub	objptr, ##1540
1a198     32 97 02 F1 | 	add	arg03, objptr
1a19c     4B A7 02 FB | 	rdlong	local01, arg03
1a1a0                 | ' 
1a1a0                 | ' numpar=compiledline(lineptr_e).result.uresult
1a1a0                 | ' 
1a1a0                 | ' if numpar=4 then
1a1a0     04 A6 0E F2 | 	cmp	local01, #4 wz
1a1a4     49 00 00 FF 
1a1a8     20 64 86 F1 | 	sub	objptr, ##37408
1a1ac     B4 00 90 5D |  if_ne	jmp	#LR__2190
1a1b0     BC 34 BF FD | 	call	#_pop
1a1b4     3F A7 02 F6 | 	mov	local01, result3
1a1b8     E7 7A 62 FC | 	wrlong	result1, fp
1a1bc     04 CE 05 F1 | 	add	fp, #4
1a1c0     E7 7C 62 FC | 	wrlong	result2, fp
1a1c4     04 CE 05 F1 | 	add	fp, #4
1a1c8     E7 A6 62 FC | 	wrlong	local01, fp
1a1cc     08 CE 85 F1 | 	sub	fp, #8
1a1d0     E7 92 02 F6 | 	mov	arg01, fp
1a1d4     74 36 BF FD | 	call	#_converttoint
1a1d8     3D A9 02 F6 | 	mov	local02, result1
1a1dc     90 34 BF FD | 	call	#_pop
1a1e0     3F A7 02 F6 | 	mov	local01, result3
1a1e4     E7 7A 62 FC | 	wrlong	result1, fp
1a1e8     04 CE 05 F1 | 	add	fp, #4
1a1ec     E7 7C 62 FC | 	wrlong	result2, fp
1a1f0     04 CE 05 F1 | 	add	fp, #4
1a1f4     E7 A6 62 FC | 	wrlong	local01, fp
1a1f8     08 CE 85 F1 | 	sub	fp, #8
1a1fc     E7 92 02 F6 | 	mov	arg01, fp
1a200     48 36 BF FD | 	call	#_converttoint
1a204     3D AB 02 F6 | 	mov	local03, result1
1a208     64 34 BF FD | 	call	#_pop
1a20c     3F A7 02 F6 | 	mov	local01, result3
1a210     E7 7A 62 FC | 	wrlong	result1, fp
1a214     04 CE 05 F1 | 	add	fp, #4
1a218     E7 7C 62 FC | 	wrlong	result2, fp
1a21c     04 CE 05 F1 | 	add	fp, #4
1a220     E7 A6 62 FC | 	wrlong	local01, fp
1a224     08 CE 85 F1 | 	sub	fp, #8
1a228     E7 92 02 F6 | 	mov	arg01, fp
1a22c     1C 36 BF FD | 	call	#_converttoint
1a230     3D AD 02 F6 | 	mov	local04, result1
1a234     38 34 BF FD | 	call	#_pop
1a238     3F A7 02 F6 | 	mov	local01, result3
1a23c     E7 7A 62 FC | 	wrlong	result1, fp
1a240     04 CE 05 F1 | 	add	fp, #4
1a244     E7 7C 62 FC | 	wrlong	result2, fp
1a248     04 CE 05 F1 | 	add	fp, #4
1a24c     E7 A6 62 FC | 	wrlong	local01, fp
1a250     08 CE 85 F1 | 	sub	fp, #8
1a254     E7 92 02 F6 | 	mov	arg01, fp
1a258     F0 35 BF FD | 	call	#_converttoint
1a25c     3D AF 02 F6 | 	mov	local05, result1
1a260     C0 00 90 FD | 	jmp	#LR__2193
1a264                 | LR__2190
1a264     02 A6 0E F2 | 	cmp	local01, #2 wz
1a268     68 00 90 5D |  if_ne	jmp	#LR__2191
1a26c     00 34 BF FD | 	call	#_pop
1a270     3F AF 02 F6 | 	mov	local05, result3
1a274     E7 7A 62 FC | 	wrlong	result1, fp
1a278     04 CE 05 F1 | 	add	fp, #4
1a27c     E7 7C 62 FC | 	wrlong	result2, fp
1a280     04 CE 05 F1 | 	add	fp, #4
1a284     E7 AE 62 FC | 	wrlong	local05, fp
1a288     08 CE 85 F1 | 	sub	fp, #8
1a28c     E7 92 02 F6 | 	mov	arg01, fp
1a290     B8 35 BF FD | 	call	#_converttoint
1a294     3D AD 02 F6 | 	mov	local04, result1
1a298     56 A9 E2 F8 | 	getbyte	local02, local04, #0
1a29c     56 AB EA F8 | 	getbyte	local03, local04, #1
1a2a0     56 AD F2 F8 | 	getbyte	local04, local04, #2
1a2a4     C8 33 BF FD | 	call	#_pop
1a2a8     3F AF 02 F6 | 	mov	local05, result3
1a2ac     E7 7A 62 FC | 	wrlong	result1, fp
1a2b0     04 CE 05 F1 | 	add	fp, #4
1a2b4     E7 7C 62 FC | 	wrlong	result2, fp
1a2b8     04 CE 05 F1 | 	add	fp, #4
1a2bc     E7 AE 62 FC | 	wrlong	local05, fp
1a2c0     08 CE 85 F1 | 	sub	fp, #8
1a2c4     E7 92 02 F6 | 	mov	arg01, fp
1a2c8     80 35 BF FD | 	call	#_converttoint
1a2cc     3D AF 02 F6 | 	mov	local05, result1
1a2d0     50 00 90 FD | 	jmp	#LR__2192
1a2d4                 | LR__2191
1a2d4                 | '   print "setcolor: "; : printerror(39,runheader(0)) : return  
1a2d4     00 92 06 F6 | 	mov	arg01, #0
1a2d8     80 FC B0 FD | 	call	#__system___getiolock_0622
1a2dc     3D 93 02 F6 | 	mov	arg01, result1
1a2e0     F4 A6 B0 FD | 	call	#__system___lockmem
1a2e4     98 01 00 FF 
1a2e8     3B 95 06 F6 | 	mov	arg02, ##@LR__6089
1a2ec     00 92 06 F6 | 	mov	arg01, #0
1a2f0     00 96 06 F6 | 	mov	arg03, #0
1a2f4     D4 B3 B0 FD | 	call	#__system___basic_print_string
1a2f8     00 92 06 F6 | 	mov	arg01, #0
1a2fc     5C FC B0 FD | 	call	#__system___getiolock_0622
1a300     3D 01 68 FC | 	wrlong	#0, result1
1a304     52 00 00 FF 
1a308     94 64 06 F1 | 	add	objptr, ##42132
1a30c     32 95 02 FB | 	rdlong	arg02, objptr
1a310     52 00 00 FF 
1a314     94 64 86 F1 | 	sub	objptr, ##42132
1a318     27 92 06 F6 | 	mov	arg01, #39
1a31c     B4 69 B0 FD | 	call	#_printerror
1a320     14 00 90 FD | 	jmp	#LR__2194
1a324                 | LR__2192
1a324                 | LR__2193
1a324     57 93 02 F6 | 	mov	arg01, local05
1a328     56 95 02 F6 | 	mov	arg02, local04
1a32c     55 97 02 F6 | 	mov	arg03, local03
1a330     54 99 02 F6 | 	mov	arg04, local02
1a334     50 87 B0 FD | 	call	#_Hg010b_4_spin2_setcolor
1a338                 | LR__2194
1a338     E7 F0 03 F6 | 	mov	ptra, fp
1a33c     F2 00 A0 FD | 	call	#popregs_
1a340                 | _do_setcolor_ret
1a340     2D 00 64 FD | 	ret
1a344                 | 
1a344                 | ' 
1a344                 | ' ' ------------------ setdelay
1a344                 | ' 
1a344                 | ' sub do_setdelay
1a344                 | _do_setdelay
1a344     02 CA 05 F6 | 	mov	COUNT_, #2
1a348     E8 00 A0 FD | 	call	#pushregs_
1a34c     18 F0 07 F1 | 	add	ptra, #24
1a350     1C 33 BF FD | 	call	#_pop
1a354     3D 93 02 F6 | 	mov	arg01, result1
1a358     3E A7 02 F6 | 	mov	local01, result2
1a35c     3F A9 02 F6 | 	mov	local02, result3
1a360     E7 92 62 FC | 	wrlong	arg01, fp
1a364     04 CE 05 F1 | 	add	fp, #4
1a368     E7 A6 62 FC | 	wrlong	local01, fp
1a36c     04 CE 05 F1 | 	add	fp, #4
1a370     E7 A8 62 FC | 	wrlong	local02, fp
1a374     08 CE 85 F1 | 	sub	fp, #8
1a378     F4 32 BF FD | 	call	#_pop
1a37c     3D A9 02 F6 | 	mov	local02, result1
1a380     0C CE 05 F1 | 	add	fp, #12
1a384     E7 A8 62 FC | 	wrlong	local02, fp
1a388     04 CE 05 F1 | 	add	fp, #4
1a38c     E7 7C 62 FC | 	wrlong	result2, fp
1a390     04 CE 05 F1 | 	add	fp, #4
1a394     E7 7E 62 FC | 	wrlong	result3, fp
1a398     08 CE 85 F1 | 	sub	fp, #8
1a39c     E7 92 02 F6 | 	mov	arg01, fp
1a3a0     0C CE 85 F1 | 	sub	fp, #12
1a3a4     A4 34 BF FD | 	call	#_converttoint
1a3a8     3D A7 02 F6 | 	mov	local01, result1
1a3ac     03 A6 66 F0 | 	shl	local01, #3
1a3b0     3D A7 82 F1 | 	sub	local01, result1
1a3b4     02 A6 66 F0 | 	shl	local01, #2
1a3b8     32 A9 02 F6 | 	mov	local02, objptr
1a3bc     16 00 00 FF 
1a3c0     BC A8 06 F1 | 	add	local02, ##11452
1a3c4     54 A7 02 F1 | 	add	local01, local02
1a3c8     E7 92 02 F6 | 	mov	arg01, fp
1a3cc     7C 34 BF FD | 	call	#_converttoint
1a3d0     06 A6 06 F1 | 	add	local01, #6
1a3d4     53 7B 52 FC | 	wrword	result1, local01
1a3d8     E7 F0 03 F6 | 	mov	ptra, fp
1a3dc     F2 00 A0 FD | 	call	#popregs_
1a3e0                 | _do_setdelay_ret
1a3e0     2D 00 64 FD | 	ret
1a3e4                 | 
1a3e4                 | ' 
1a3e4                 | ' ' ------------------ setenv
1a3e4                 | ' 
1a3e4                 | ' sub do_setenv
1a3e4                 | _do_setenv
1a3e4     02 CA 05 F6 | 	mov	COUNT_, #2
1a3e8     E8 00 A0 FD | 	call	#pushregs_
1a3ec     18 F0 07 F1 | 	add	ptra, #24
1a3f0     7C 32 BF FD | 	call	#_pop
1a3f4     3D 93 02 F6 | 	mov	arg01, result1
1a3f8     3E A7 02 F6 | 	mov	local01, result2
1a3fc     3F A9 02 F6 | 	mov	local02, result3
1a400     E7 92 62 FC | 	wrlong	arg01, fp
1a404     04 CE 05 F1 | 	add	fp, #4
1a408     E7 A6 62 FC | 	wrlong	local01, fp
1a40c     04 CE 05 F1 | 	add	fp, #4
1a410     E7 A8 62 FC | 	wrlong	local02, fp
1a414     08 CE 85 F1 | 	sub	fp, #8
1a418     54 32 BF FD | 	call	#_pop
1a41c     3D A9 02 F6 | 	mov	local02, result1
1a420     0C CE 05 F1 | 	add	fp, #12
1a424     E7 A8 62 FC | 	wrlong	local02, fp
1a428     04 CE 05 F1 | 	add	fp, #4
1a42c     E7 7C 62 FC | 	wrlong	result2, fp
1a430     04 CE 05 F1 | 	add	fp, #4
1a434     E7 7E 62 FC | 	wrlong	result3, fp
1a438     08 CE 85 F1 | 	sub	fp, #8
1a43c     E7 92 02 F6 | 	mov	arg01, fp
1a440     0C CE 85 F1 | 	sub	fp, #12
1a444     04 34 BF FD | 	call	#_converttoint
1a448     3D A7 02 F6 | 	mov	local01, result1
1a44c     03 A6 66 F0 | 	shl	local01, #3
1a450     3D A7 82 F1 | 	sub	local01, result1
1a454     02 A6 66 F0 | 	shl	local01, #2
1a458     32 A9 02 F6 | 	mov	local02, objptr
1a45c     16 00 00 FF 
1a460     BC A8 06 F1 | 	add	local02, ##11452
1a464     54 A7 02 F1 | 	add	local01, local02
1a468     E7 92 02 F6 | 	mov	arg01, fp
1a46c     DC 33 BF FD | 	call	#_converttoint
1a470     05 A6 06 F1 | 	add	local01, #5
1a474     53 7B 42 FC | 	wrbyte	result1, local01
1a478     E7 F0 03 F6 | 	mov	ptra, fp
1a47c     F2 00 A0 FD | 	call	#popregs_
1a480                 | _do_setenv_ret
1a480     2D 00 64 FD | 	ret
1a484                 | 
1a484                 | ' 
1a484                 | ' ' ------------------ setlen
1a484                 | ' 
1a484                 | ' sub do_setlen
1a484                 | _do_setlen
1a484     02 CA 05 F6 | 	mov	COUNT_, #2
1a488     E8 00 A0 FD | 	call	#pushregs_
1a48c     18 F0 07 F1 | 	add	ptra, #24
1a490     DC 31 BF FD | 	call	#_pop
1a494     3D 93 02 F6 | 	mov	arg01, result1
1a498     3E A7 02 F6 | 	mov	local01, result2
1a49c     3F A9 02 F6 | 	mov	local02, result3
1a4a0     E7 92 62 FC | 	wrlong	arg01, fp
1a4a4     04 CE 05 F1 | 	add	fp, #4
1a4a8     E7 A6 62 FC | 	wrlong	local01, fp
1a4ac     04 CE 05 F1 | 	add	fp, #4
1a4b0     E7 A8 62 FC | 	wrlong	local02, fp
1a4b4     08 CE 85 F1 | 	sub	fp, #8
1a4b8     B4 31 BF FD | 	call	#_pop
1a4bc     3D A9 02 F6 | 	mov	local02, result1
1a4c0     0C CE 05 F1 | 	add	fp, #12
1a4c4     E7 A8 62 FC | 	wrlong	local02, fp
1a4c8     04 CE 05 F1 | 	add	fp, #4
1a4cc     E7 7C 62 FC | 	wrlong	result2, fp
1a4d0     04 CE 05 F1 | 	add	fp, #4
1a4d4     E7 7E 62 FC | 	wrlong	result3, fp
1a4d8     08 CE 85 F1 | 	sub	fp, #8
1a4dc     E7 92 02 F6 | 	mov	arg01, fp
1a4e0     0C CE 85 F1 | 	sub	fp, #12
1a4e4     64 33 BF FD | 	call	#_converttoint
1a4e8     3D A7 02 F6 | 	mov	local01, result1
1a4ec     03 A6 66 F0 | 	shl	local01, #3
1a4f0     3D A7 82 F1 | 	sub	local01, result1
1a4f4     02 A6 66 F0 | 	shl	local01, #2
1a4f8     32 A9 02 F6 | 	mov	local02, objptr
1a4fc     16 00 00 FF 
1a500     BC A8 06 F1 | 	add	local02, ##11452
1a504     54 A7 02 F1 | 	add	local01, local02
1a508     E7 92 02 F6 | 	mov	arg01, fp
1a50c     F8 33 BF FD | 	call	#_converttofloat
1a510     08 A6 06 F1 | 	add	local01, #8
1a514     53 7B 62 FC | 	wrlong	result1, local01
1a518     E7 F0 03 F6 | 	mov	ptra, fp
1a51c     F2 00 A0 FD | 	call	#popregs_
1a520                 | _do_setlen_ret
1a520     2D 00 64 FD | 	ret
1a524                 | 
1a524                 | ' 
1a524                 | ' ' ------------------ setpan
1a524                 | ' 
1a524                 | ' sub do_setpan
1a524                 | _do_setpan
1a524     02 CA 05 F6 | 	mov	COUNT_, #2
1a528     E8 00 A0 FD | 	call	#pushregs_
1a52c     18 F0 07 F1 | 	add	ptra, #24
1a530     3C 31 BF FD | 	call	#_pop
1a534     3D 93 02 F6 | 	mov	arg01, result1
1a538     3E A7 02 F6 | 	mov	local01, result2
1a53c     3F A9 02 F6 | 	mov	local02, result3
1a540     E7 92 62 FC | 	wrlong	arg01, fp
1a544     04 CE 05 F1 | 	add	fp, #4
1a548     E7 A6 62 FC | 	wrlong	local01, fp
1a54c     04 CE 05 F1 | 	add	fp, #4
1a550     E7 A8 62 FC | 	wrlong	local02, fp
1a554     08 CE 85 F1 | 	sub	fp, #8
1a558     14 31 BF FD | 	call	#_pop
1a55c     3D A9 02 F6 | 	mov	local02, result1
1a560     0C CE 05 F1 | 	add	fp, #12
1a564     E7 A8 62 FC | 	wrlong	local02, fp
1a568     04 CE 05 F1 | 	add	fp, #4
1a56c     E7 7C 62 FC | 	wrlong	result2, fp
1a570     04 CE 05 F1 | 	add	fp, #4
1a574     E7 7E 62 FC | 	wrlong	result3, fp
1a578     08 CE 85 F1 | 	sub	fp, #8
1a57c     E7 92 02 F6 | 	mov	arg01, fp
1a580     0C CE 85 F1 | 	sub	fp, #12
1a584     C4 32 BF FD | 	call	#_converttoint
1a588     3D A7 02 F6 | 	mov	local01, result1
1a58c     03 A6 66 F0 | 	shl	local01, #3
1a590     3D A7 82 F1 | 	sub	local01, result1
1a594     02 A6 66 F0 | 	shl	local01, #2
1a598     32 A9 02 F6 | 	mov	local02, objptr
1a59c     16 00 00 FF 
1a5a0     BC A8 06 F1 | 	add	local02, ##11452
1a5a4     54 A7 02 F1 | 	add	local01, local02
1a5a8     E7 92 02 F6 | 	mov	arg01, fp
1a5ac     58 33 BF FD | 	call	#_converttofloat
1a5b0     10 A6 06 F1 | 	add	local01, #16
1a5b4     53 7B 62 FC | 	wrlong	result1, local01
1a5b8     E7 F0 03 F6 | 	mov	ptra, fp
1a5bc     F2 00 A0 FD | 	call	#popregs_
1a5c0                 | _do_setpan_ret
1a5c0     2D 00 64 FD | 	ret
1a5c4                 | 
1a5c4                 | ' 
1a5c4                 | ' ' ------------------ setsustain
1a5c4                 | ' 
1a5c4                 | ' sub do_setsustain
1a5c4                 | _do_setsustain
1a5c4     02 CA 05 F6 | 	mov	COUNT_, #2
1a5c8     E8 00 A0 FD | 	call	#pushregs_
1a5cc     18 F0 07 F1 | 	add	ptra, #24
1a5d0     9C 30 BF FD | 	call	#_pop
1a5d4     3D 93 02 F6 | 	mov	arg01, result1
1a5d8     3E A7 02 F6 | 	mov	local01, result2
1a5dc     3F A9 02 F6 | 	mov	local02, result3
1a5e0     E7 92 62 FC | 	wrlong	arg01, fp
1a5e4     04 CE 05 F1 | 	add	fp, #4
1a5e8     E7 A6 62 FC | 	wrlong	local01, fp
1a5ec     04 CE 05 F1 | 	add	fp, #4
1a5f0     E7 A8 62 FC | 	wrlong	local02, fp
1a5f4     08 CE 85 F1 | 	sub	fp, #8
1a5f8     74 30 BF FD | 	call	#_pop
1a5fc     3D A9 02 F6 | 	mov	local02, result1
1a600     0C CE 05 F1 | 	add	fp, #12
1a604     E7 A8 62 FC | 	wrlong	local02, fp
1a608     04 CE 05 F1 | 	add	fp, #4
1a60c     E7 7C 62 FC | 	wrlong	result2, fp
1a610     04 CE 05 F1 | 	add	fp, #4
1a614     E7 7E 62 FC | 	wrlong	result3, fp
1a618     08 CE 85 F1 | 	sub	fp, #8
1a61c     E7 92 02 F6 | 	mov	arg01, fp
1a620     0C CE 85 F1 | 	sub	fp, #12
1a624     24 32 BF FD | 	call	#_converttoint
1a628     3D A7 02 F6 | 	mov	local01, result1
1a62c     03 A6 66 F0 | 	shl	local01, #3
1a630     3D A7 82 F1 | 	sub	local01, result1
1a634     02 A6 66 F0 | 	shl	local01, #2
1a638     32 A9 02 F6 | 	mov	local02, objptr
1a63c     16 00 00 FF 
1a640     BC A8 06 F1 | 	add	local02, ##11452
1a644     54 A7 02 F1 | 	add	local01, local02
1a648     E7 92 02 F6 | 	mov	arg01, fp
1a64c     FC 31 BF FD | 	call	#_converttoint
1a650     14 A6 06 F1 | 	add	local01, #20
1a654     53 7B 52 FC | 	wrword	result1, local01
1a658     E7 F0 03 F6 | 	mov	ptra, fp
1a65c     F2 00 A0 FD | 	call	#popregs_
1a660                 | _do_setsustain_ret
1a660     2D 00 64 FD | 	ret
1a664                 | 
1a664                 | ' 
1a664                 | ' ' ------------------ setvol
1a664                 | ' 
1a664                 | ' sub do_setvol
1a664                 | _do_setvol
1a664     02 CA 05 F6 | 	mov	COUNT_, #2
1a668     E8 00 A0 FD | 	call	#pushregs_
1a66c     18 F0 07 F1 | 	add	ptra, #24
1a670     FC 2F BF FD | 	call	#_pop
1a674     3D 93 02 F6 | 	mov	arg01, result1
1a678     3E A7 02 F6 | 	mov	local01, result2
1a67c     3F A9 02 F6 | 	mov	local02, result3
1a680     E7 92 62 FC | 	wrlong	arg01, fp
1a684     04 CE 05 F1 | 	add	fp, #4
1a688     E7 A6 62 FC | 	wrlong	local01, fp
1a68c     04 CE 05 F1 | 	add	fp, #4
1a690     E7 A8 62 FC | 	wrlong	local02, fp
1a694     08 CE 85 F1 | 	sub	fp, #8
1a698     D4 2F BF FD | 	call	#_pop
1a69c     3D A9 02 F6 | 	mov	local02, result1
1a6a0     0C CE 05 F1 | 	add	fp, #12
1a6a4     E7 A8 62 FC | 	wrlong	local02, fp
1a6a8     04 CE 05 F1 | 	add	fp, #4
1a6ac     E7 7C 62 FC | 	wrlong	result2, fp
1a6b0     04 CE 05 F1 | 	add	fp, #4
1a6b4     E7 7E 62 FC | 	wrlong	result3, fp
1a6b8     08 CE 85 F1 | 	sub	fp, #8
1a6bc     E7 92 02 F6 | 	mov	arg01, fp
1a6c0     0C CE 85 F1 | 	sub	fp, #12
1a6c4     84 31 BF FD | 	call	#_converttoint
1a6c8     3D A7 02 F6 | 	mov	local01, result1
1a6cc     03 A6 66 F0 | 	shl	local01, #3
1a6d0     3D A7 82 F1 | 	sub	local01, result1
1a6d4     02 A6 66 F0 | 	shl	local01, #2
1a6d8     32 A9 02 F6 | 	mov	local02, objptr
1a6dc     16 00 00 FF 
1a6e0     BC A8 06 F1 | 	add	local02, ##11452
1a6e4     54 A7 02 F1 | 	add	local01, local02
1a6e8     E7 92 02 F6 | 	mov	arg01, fp
1a6ec     18 32 BF FD | 	call	#_converttofloat
1a6f0     0C A6 06 F1 | 	add	local01, #12
1a6f4     53 7B 62 FC | 	wrlong	result1, local01
1a6f8     E7 F0 03 F6 | 	mov	ptra, fp
1a6fc     F2 00 A0 FD | 	call	#popregs_
1a700                 | _do_setvol_ret
1a700     2D 00 64 FD | 	ret
1a704                 | 
1a704                 | ' 
1a704                 | ' ' ------------------ setwave
1a704                 | ' 
1a704                 | ' sub do_setwave
1a704                 | _do_setwave
1a704     02 CA 05 F6 | 	mov	COUNT_, #2
1a708     E8 00 A0 FD | 	call	#pushregs_
1a70c     18 F0 07 F1 | 	add	ptra, #24
1a710     5C 2F BF FD | 	call	#_pop
1a714     3D 93 02 F6 | 	mov	arg01, result1
1a718     3E A7 02 F6 | 	mov	local01, result2
1a71c     3F A9 02 F6 | 	mov	local02, result3
1a720     E7 92 62 FC | 	wrlong	arg01, fp
1a724     04 CE 05 F1 | 	add	fp, #4
1a728     E7 A6 62 FC | 	wrlong	local01, fp
1a72c     04 CE 05 F1 | 	add	fp, #4
1a730     E7 A8 62 FC | 	wrlong	local02, fp
1a734     08 CE 85 F1 | 	sub	fp, #8
1a738     34 2F BF FD | 	call	#_pop
1a73c     3D A9 02 F6 | 	mov	local02, result1
1a740     0C CE 05 F1 | 	add	fp, #12
1a744     E7 A8 62 FC | 	wrlong	local02, fp
1a748     04 CE 05 F1 | 	add	fp, #4
1a74c     E7 7C 62 FC | 	wrlong	result2, fp
1a750     04 CE 05 F1 | 	add	fp, #4
1a754     E7 7E 62 FC | 	wrlong	result3, fp
1a758     08 CE 85 F1 | 	sub	fp, #8
1a75c     E7 92 02 F6 | 	mov	arg01, fp
1a760     0C CE 85 F1 | 	sub	fp, #12
1a764     E4 30 BF FD | 	call	#_converttoint
1a768     3D A7 02 F6 | 	mov	local01, result1
1a76c     03 A6 66 F0 | 	shl	local01, #3
1a770     3D A7 82 F1 | 	sub	local01, result1
1a774     02 A6 66 F0 | 	shl	local01, #2
1a778     32 A9 02 F6 | 	mov	local02, objptr
1a77c     16 00 00 FF 
1a780     BC A8 06 F1 | 	add	local02, ##11452
1a784     54 A7 02 F1 | 	add	local01, local02
1a788     E7 92 02 F6 | 	mov	arg01, fp
1a78c     BC 30 BF FD | 	call	#_converttoint
1a790     04 A6 06 F1 | 	add	local01, #4
1a794     53 7B 42 FC | 	wrbyte	result1, local01
1a798     E7 F0 03 F6 | 	mov	ptra, fp
1a79c     F2 00 A0 FD | 	call	#popregs_
1a7a0                 | _do_setwave_ret
1a7a0     2D 00 64 FD | 	ret
1a7a4                 | 
1a7a4                 | ' 
1a7a4                 | ' ' ------------------ shutup
1a7a4                 | ' 
1a7a4                 | ' sub do_shutup
1a7a4                 | _do_shutup
1a7a4     03 CA 05 F6 | 	mov	COUNT_, #3
1a7a8     E8 00 A0 FD | 	call	#pushregs_
1a7ac     18 F0 07 F1 | 	add	ptra, #24
1a7b0     4C 00 00 FF 
1a7b4     24 64 06 F1 | 	add	objptr, ##38948
1a7b8     32 A7 02 FB | 	rdlong	local01, objptr
1a7bc     53 A9 02 F6 | 	mov	local02, local01
1a7c0     01 A8 66 F0 | 	shl	local02, #1
1a7c4     53 A9 02 F1 | 	add	local02, local01
1a7c8     02 A8 66 F0 | 	shl	local02, #2
1a7cc     03 00 00 FF 
1a7d0     04 64 86 F1 | 	sub	objptr, ##1540
1a7d4     32 A9 02 F1 | 	add	local02, objptr
1a7d8     54 A9 0A FB | 	rdlong	local02, local02 wz
1a7dc                 | ' 
1a7dc                 | ' numpar=compiledline(lineptr_e).result.uresult
1a7dc                 | ' if numpar=0 then
1a7dc     49 00 00 FF 
1a7e0     20 64 86 F1 | 	sub	objptr, ##37408
1a7e4     40 00 90 5D |  if_ne	jmp	#LR__2202
1a7e8                 | '   for i=0 to 7 : dpoke base+64*i+20,0 : next i
1a7e8     00 AA 06 F6 | 	mov	local03, #0
1a7ec     38 00 00 FF 
1a7f0     B4 65 06 F1 | 	add	objptr, ##29108
1a7f4     D7 12 48 FB | 	callpa	#(@LR__2201-@LR__2200)>>2,fcache_load_ptr_
1a7f8                 | LR__2200
1a7f8     32 93 02 FB | 	rdlong	arg01, objptr
1a7fc     55 A9 02 F6 | 	mov	local02, local03
1a800     06 A8 66 F0 | 	shl	local02, #6
1a804     54 93 02 F1 | 	add	arg01, local02
1a808     14 92 06 F1 | 	add	arg01, #20
1a80c     49 01 58 FC | 	wrword	#0, arg01
1a810     01 AA 06 F1 | 	add	local03, #1
1a814     08 AA 56 F2 | 	cmps	local03, #8 wc
1a818     DC FF 9F CD |  if_b	jmp	#LR__2200
1a81c                 | LR__2201
1a81c     38 00 00 FF 
1a820     B4 65 86 F1 | 	sub	objptr, ##29108
1a824     58 00 90 FD | 	jmp	#LR__2203
1a828                 | LR__2202
1a828     44 2E BF FD | 	call	#_pop
1a82c     3F A7 02 F6 | 	mov	local01, result3
1a830     E7 7A 62 FC | 	wrlong	result1, fp
1a834     04 CE 05 F1 | 	add	fp, #4
1a838     E7 7C 62 FC | 	wrlong	result2, fp
1a83c     04 CE 05 F1 | 	add	fp, #4
1a840     E7 A6 62 FC | 	wrlong	local01, fp
1a844     08 CE 85 F1 | 	sub	fp, #8
1a848     E7 92 02 F6 | 	mov	arg01, fp
1a84c     FC 2F BF FD | 	call	#_converttoint
1a850     3D AB 52 F6 | 	abs	local03, result1 wc
1a854     07 AA 06 F5 | 	and	local03, #7
1a858     55 A9 82 F6 | 	negc	local02, local03
1a85c     38 00 00 FF 
1a860     B4 65 06 F1 | 	add	objptr, ##29108
1a864     32 93 02 FB | 	rdlong	arg01, objptr
1a868     38 00 00 FF 
1a86c     B4 65 86 F1 | 	sub	objptr, ##29108
1a870     06 A8 66 F0 | 	shl	local02, #6
1a874     54 93 02 F1 | 	add	arg01, local02
1a878     14 92 06 F1 | 	add	arg01, #20
1a87c     49 01 58 FC | 	wrword	#0, arg01
1a880                 | LR__2203
1a880     E7 F0 03 F6 | 	mov	ptra, fp
1a884     F2 00 A0 FD | 	call	#popregs_
1a888                 | _do_shutup_ret
1a888     2D 00 64 FD | 	ret
1a88c                 | 
1a88c                 | ' 
1a88c                 | ' ' ------------------ sin
1a88c                 | ' 
1a88c                 | ' sub do_sin
1a88c                 | _do_sin
1a88c     01 CA 05 F6 | 	mov	COUNT_, #1
1a890     E8 00 A0 FD | 	call	#pushregs_
1a894     10 F0 07 F1 | 	add	ptra, #16
1a898     4C 00 00 FF 
1a89c     24 64 06 F1 | 	add	objptr, ##38948
1a8a0     32 97 02 FB | 	rdlong	arg03, objptr
1a8a4     4B 95 02 F6 | 	mov	arg02, arg03
1a8a8     01 94 66 F0 | 	shl	arg02, #1
1a8ac     4B 95 02 F1 | 	add	arg02, arg03
1a8b0     02 94 66 F0 | 	shl	arg02, #2
1a8b4     03 00 00 FF 
1a8b8     04 64 86 F1 | 	sub	objptr, ##1540
1a8bc     32 95 02 F1 | 	add	arg02, objptr
1a8c0     4A 97 02 FB | 	rdlong	arg03, arg02
1a8c4                 | ' 
1a8c4                 | ' numpar=compiledline(lineptr_e).result.uresult
1a8c4                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
1a8c4     02 96 16 F2 | 	cmp	arg03, #2 wc
1a8c8     49 00 00 FF 
1a8cc     20 64 86 F1 | 	sub	objptr, ##37408
1a8d0     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
1a8d4     40 00 90 4D |  if_c_and_nz	jmp	#LR__2210
1a8d8     00 92 06 F6 | 	mov	arg01, #0
1a8dc     7C F6 B0 FD | 	call	#__system___getiolock_0622
1a8e0     3D 93 02 F6 | 	mov	arg01, result1
1a8e4     F0 A0 B0 FD | 	call	#__system___lockmem
1a8e8     98 01 00 FF 
1a8ec     46 95 06 F6 | 	mov	arg02, ##@LR__6090
1a8f0     00 92 06 F6 | 	mov	arg01, #0
1a8f4     00 96 06 F6 | 	mov	arg03, #0
1a8f8     D0 AD B0 FD | 	call	#__system___basic_print_string
1a8fc     00 92 06 F6 | 	mov	arg01, #0
1a900     58 F6 B0 FD | 	call	#__system___getiolock_0622
1a904     3D 01 68 FC | 	wrlong	#0, result1
1a908     27 92 06 F6 | 	mov	arg01, #39
1a90c     00 94 06 F6 | 	mov	arg02, #0
1a910     C0 63 B0 FD | 	call	#_printerror
1a914     64 00 90 FD | 	jmp	#LR__2211
1a918                 | LR__2210
1a918     54 2D BF FD | 	call	#_pop
1a91c     E7 7A 62 FC | 	wrlong	result1, fp
1a920     04 CE 05 F1 | 	add	fp, #4
1a924     E7 7C 62 FC | 	wrlong	result2, fp
1a928     04 CE 05 F1 | 	add	fp, #4
1a92c     E7 7E 62 FC | 	wrlong	result3, fp
1a930     08 CE 85 F1 | 	sub	fp, #8
1a934     54 00 00 FF 
1a938     84 64 06 F1 | 	add	objptr, ##43140
1a93c     32 A7 02 FB | 	rdlong	local01, objptr
1a940     54 00 00 FF 
1a944     84 64 86 F1 | 	sub	objptr, ##43140
1a948     E7 92 02 F6 | 	mov	arg01, fp
1a94c     B8 2F BF FD | 	call	#_converttofloat
1a950     3D 95 02 F6 | 	mov	arg02, result1
1a954     53 93 02 F6 | 	mov	arg01, local01
1a958     4C C7 B0 FD | 	call	#__system___float_mul
1a95c     3D 93 02 F6 | 	mov	arg01, result1
1a960     B4 D0 B0 FD | 	call	#__system____builtin_sinf
1a964     E7 7A 62 FC | 	wrlong	result1, fp
1a968     08 CE 05 F1 | 	add	fp, #8
1a96c     E7 3C 68 FC | 	wrlong	#30, fp
1a970     08 CE 85 F1 | 	sub	fp, #8
1a974     E7 92 02 F6 | 	mov	arg01, fp
1a978     84 2D BF FD | 	call	#_push
1a97c                 | LR__2211
1a97c     E7 F0 03 F6 | 	mov	ptra, fp
1a980     F2 00 A0 FD | 	call	#popregs_
1a984                 | _do_sin_ret
1a984     2D 00 64 FD | 	ret
1a988                 | 
1a988                 | ' 
1a988                 | ' ' ------------------ skip
1a988                 | ' ' A helper token for on-gosub: skips the rest of gosubs
1a988                 | ' 
1a988                 | ' sub do_skip
1a988                 | _do_skip
1a988     4C 00 00 FF 
1a98c     24 64 06 F1 | 	add	objptr, ##38948
1a990     32 81 02 FB | 	rdlong	_var01, objptr
1a994     40 83 02 F6 | 	mov	_var02, _var01
1a998     01 82 66 F0 | 	shl	_var02, #1
1a99c     40 83 02 F1 | 	add	_var02, _var01
1a9a0     02 82 66 F0 | 	shl	_var02, #2
1a9a4     03 00 00 FF 
1a9a8     04 64 86 F1 | 	sub	objptr, ##1540
1a9ac     32 83 02 F1 | 	add	_var02, objptr
1a9b0     41 83 02 FB | 	rdlong	_var02, _var02
1a9b4     01 82 86 F1 | 	sub	_var02, #1
1a9b8     03 00 00 FF 
1a9bc     04 64 06 F1 | 	add	objptr, ##1540
1a9c0     32 83 62 FC | 	wrlong	_var02, objptr
1a9c4     4C 00 00 FF 
1a9c8     24 64 86 F1 | 	sub	objptr, ##38948
1a9cc                 | _do_skip_ret
1a9cc     2D 00 64 FD | 	ret
1a9d0                 | 
1a9d0                 | ' 
1a9d0                 | ' ' ------------------ sprite
1a9d0                 | ' 
1a9d0                 | ' sub do_sprite
1a9d0                 | _do_sprite
1a9d0     02 CA 05 F6 | 	mov	COUNT_, #2
1a9d4     E8 00 A0 FD | 	call	#pushregs_
1a9d8     30 F0 07 F1 | 	add	ptra, #48
1a9dc     90 2C BF FD | 	call	#_pop
1a9e0     3D 95 02 F6 | 	mov	arg02, result1
1a9e4     3E 97 02 F6 | 	mov	arg03, result2
1a9e8     3F 93 02 F6 | 	mov	arg01, result3
1a9ec     18 CE 05 F1 | 	add	fp, #24
1a9f0     E7 94 62 FC | 	wrlong	arg02, fp
1a9f4     04 CE 05 F1 | 	add	fp, #4
1a9f8     E7 96 62 FC | 	wrlong	arg03, fp
1a9fc     04 CE 05 F1 | 	add	fp, #4
1aa00     E7 92 62 FC | 	wrlong	arg01, fp
1aa04     20 CE 85 F1 | 	sub	fp, #32
1aa08     64 2C BF FD | 	call	#_pop
1aa0c     3D 95 02 F6 | 	mov	arg02, result1
1aa10     3E 97 02 F6 | 	mov	arg03, result2
1aa14     3F 93 02 F6 | 	mov	arg01, result3
1aa18     0C CE 05 F1 | 	add	fp, #12
1aa1c     E7 94 62 FC | 	wrlong	arg02, fp
1aa20     04 CE 05 F1 | 	add	fp, #4
1aa24     E7 96 62 FC | 	wrlong	arg03, fp
1aa28     04 CE 05 F1 | 	add	fp, #4
1aa2c     E7 92 62 FC | 	wrlong	arg01, fp
1aa30     14 CE 85 F1 | 	sub	fp, #20
1aa34     38 2C BF FD | 	call	#_pop
1aa38     3F 95 02 F6 | 	mov	arg02, result3
1aa3c     E7 7A 62 FC | 	wrlong	result1, fp
1aa40     04 CE 05 F1 | 	add	fp, #4
1aa44     E7 7C 62 FC | 	wrlong	result2, fp
1aa48     04 CE 05 F1 | 	add	fp, #4
1aa4c     E7 94 62 FC | 	wrlong	arg02, fp
1aa50     08 CE 85 F1 | 	sub	fp, #8
1aa54     E7 92 02 F6 | 	mov	arg01, fp
1aa58     F0 2D BF FD | 	call	#_converttoint
1aa5c     3D A7 02 F6 | 	mov	local01, result1
1aa60     E7 92 02 F6 | 	mov	arg01, fp
1aa64     0C 92 06 F1 | 	add	arg01, #12
1aa68     E0 2D BF FD | 	call	#_converttoint
1aa6c     3D A9 02 F6 | 	mov	local02, result1
1aa70     E7 92 02 F6 | 	mov	arg01, fp
1aa74     18 92 06 F1 | 	add	arg01, #24
1aa78     D0 2D BF FD | 	call	#_converttoint
1aa7c     3D 97 02 F6 | 	mov	arg03, result1
1aa80     53 93 02 F6 | 	mov	arg01, local01
1aa84     54 95 02 F6 | 	mov	arg02, local02
1aa88     2C 72 B0 FD | 	call	#_Hg010b_4_spin2_setspritepos
1aa8c     E7 F0 03 F6 | 	mov	ptra, fp
1aa90     F2 00 A0 FD | 	call	#popregs_
1aa94                 | _do_sprite_ret
1aa94     2D 00 64 FD | 	ret
1aa98                 | 
1aa98                 | ' 
1aa98                 | ' ' ------------------ sqr
1aa98                 | ' 
1aa98                 | ' sub do_sqr
1aa98                 | _do_sqr
1aa98     00 CA 05 F6 | 	mov	COUNT_, #0
1aa9c     E8 00 A0 FD | 	call	#pushregs_
1aaa0     10 F0 07 F1 | 	add	ptra, #16
1aaa4     4C 00 00 FF 
1aaa8     24 64 06 F1 | 	add	objptr, ##38948
1aaac     32 97 02 FB | 	rdlong	arg03, objptr
1aab0     4B 95 02 F6 | 	mov	arg02, arg03
1aab4     01 94 66 F0 | 	shl	arg02, #1
1aab8     4B 95 02 F1 | 	add	arg02, arg03
1aabc     02 94 66 F0 | 	shl	arg02, #2
1aac0     03 00 00 FF 
1aac4     04 64 86 F1 | 	sub	objptr, ##1540
1aac8     32 95 02 F1 | 	add	arg02, objptr
1aacc     4A 97 02 FB | 	rdlong	arg03, arg02
1aad0                 | ' 
1aad0                 | ' numpar=compiledline(lineptr_e).result.uresult
1aad0                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
1aad0     02 96 16 F2 | 	cmp	arg03, #2 wc
1aad4     49 00 00 FF 
1aad8     20 64 86 F1 | 	sub	objptr, ##37408
1aadc     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
1aae0     40 00 90 4D |  if_c_and_nz	jmp	#LR__2220
1aae4     00 92 06 F6 | 	mov	arg01, #0
1aae8     70 F4 B0 FD | 	call	#__system___getiolock_0622
1aaec     3D 93 02 F6 | 	mov	arg01, result1
1aaf0     E4 9E B0 FD | 	call	#__system___lockmem
1aaf4     98 01 00 FF 
1aaf8     4C 95 06 F6 | 	mov	arg02, ##@LR__6091
1aafc     00 92 06 F6 | 	mov	arg01, #0
1ab00     00 96 06 F6 | 	mov	arg03, #0
1ab04     C4 AB B0 FD | 	call	#__system___basic_print_string
1ab08     00 92 06 F6 | 	mov	arg01, #0
1ab0c     4C F4 B0 FD | 	call	#__system___getiolock_0622
1ab10     3D 01 68 FC | 	wrlong	#0, result1
1ab14     27 92 06 F6 | 	mov	arg01, #39
1ab18     00 94 06 F6 | 	mov	arg02, #0
1ab1c     B4 61 B0 FD | 	call	#_printerror
1ab20     48 00 90 FD | 	jmp	#LR__2221
1ab24                 | LR__2220
1ab24     48 2B BF FD | 	call	#_pop
1ab28     3F 97 02 F6 | 	mov	arg03, result3
1ab2c     E7 7A 62 FC | 	wrlong	result1, fp
1ab30     04 CE 05 F1 | 	add	fp, #4
1ab34     E7 7C 62 FC | 	wrlong	result2, fp
1ab38     04 CE 05 F1 | 	add	fp, #4
1ab3c     E7 96 62 FC | 	wrlong	arg03, fp
1ab40     08 CE 85 F1 | 	sub	fp, #8
1ab44     E7 92 02 F6 | 	mov	arg01, fp
1ab48     BC 2D BF FD | 	call	#_converttofloat
1ab4c     3D 93 02 F6 | 	mov	arg01, result1
1ab50     7C C4 B0 FD | 	call	#__system___float_sqrt
1ab54     E7 7A 62 FC | 	wrlong	result1, fp
1ab58     08 CE 05 F1 | 	add	fp, #8
1ab5c     E7 3C 68 FC | 	wrlong	#30, fp
1ab60     08 CE 85 F1 | 	sub	fp, #8
1ab64     E7 92 02 F6 | 	mov	arg01, fp
1ab68     94 2B BF FD | 	call	#_push
1ab6c                 | LR__2221
1ab6c     E7 F0 03 F6 | 	mov	ptra, fp
1ab70     F2 00 A0 FD | 	call	#popregs_
1ab74                 | _do_sqr_ret
1ab74     2D 00 64 FD | 	ret
1ab78                 | 
1ab78                 | ' 
1ab78                 | ' ' ------------------ stick
1ab78                 | ' 
1ab78                 | ' sub do_stick
1ab78                 | _do_stick
1ab78     02 CA 05 F6 | 	mov	COUNT_, #2
1ab7c     E8 00 A0 FD | 	call	#pushregs_
1ab80     10 F0 07 F1 | 	add	ptra, #16
1ab84     4C 00 00 FF 
1ab88     24 64 06 F1 | 	add	objptr, ##38948
1ab8c     32 A7 02 FB | 	rdlong	local01, objptr
1ab90     53 97 02 F6 | 	mov	arg03, local01
1ab94     01 96 66 F0 | 	shl	arg03, #1
1ab98     53 97 02 F1 | 	add	arg03, local01
1ab9c     02 96 66 F0 | 	shl	arg03, #2
1aba0     03 00 00 FF 
1aba4     04 64 86 F1 | 	sub	objptr, ##1540
1aba8     32 97 02 F1 | 	add	arg03, objptr
1abac     4B A9 02 FB | 	rdlong	local02, arg03
1abb0                 | ' 
1abb0                 | ' numpar=compiledline(lineptr_e).result.uresult
1abb0                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
1abb0     02 A8 16 F2 | 	cmp	local02, #2 wc
1abb4     49 00 00 FF 
1abb8     20 64 86 F1 | 	sub	objptr, ##37408
1abbc     40 00 90 CD |  if_b	jmp	#LR__2230
1abc0     00 92 06 F6 | 	mov	arg01, #0
1abc4     94 F3 B0 FD | 	call	#__system___getiolock_0622
1abc8     3D 93 02 F6 | 	mov	arg01, result1
1abcc     08 9E B0 FD | 	call	#__system___lockmem
1abd0     98 01 00 FF 
1abd4     52 95 06 F6 | 	mov	arg02, ##@LR__6092
1abd8     00 92 06 F6 | 	mov	arg01, #0
1abdc     00 96 06 F6 | 	mov	arg03, #0
1abe0     E8 AA B0 FD | 	call	#__system___basic_print_string
1abe4     00 92 06 F6 | 	mov	arg01, #0
1abe8     70 F3 B0 FD | 	call	#__system___getiolock_0622
1abec     3D 01 68 FC | 	wrlong	#0, result1
1abf0     27 92 06 F6 | 	mov	arg01, #39
1abf4     00 94 06 F6 | 	mov	arg02, #0
1abf8     D8 60 B0 FD | 	call	#_printerror
1abfc     E8 00 90 FD | 	jmp	#LR__2234
1ac00                 | LR__2230
1ac00                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
1ac00     00 A8 0E F2 | 	cmp	local02, #0 wz
1ac04     30 00 90 5D |  if_ne	jmp	#LR__2231
1ac08     53 00 00 FF 
1ac0c     F8 65 06 F1 | 	add	objptr, ##43000
1ac10     32 A9 02 FB | 	rdlong	local02, objptr
1ac14     53 00 00 FF 
1ac18     F8 65 86 F1 | 	sub	objptr, ##43000
1ac1c     E7 A8 62 FC | 	wrlong	local02, fp
1ac20     08 CE 05 F1 | 	add	fp, #8
1ac24     E7 3A 68 FC | 	wrlong	#29, fp
1ac28     08 CE 85 F1 | 	sub	fp, #8
1ac2c     E7 92 02 F6 | 	mov	arg01, fp
1ac30     CC 2A BF FD | 	call	#_push
1ac34     B0 00 90 FD | 	jmp	#LR__2234
1ac38                 | LR__2231
1ac38     34 2A BF FD | 	call	#_pop
1ac3c     E7 7A 62 FC | 	wrlong	result1, fp
1ac40     04 CE 05 F1 | 	add	fp, #4
1ac44     E7 7C 62 FC | 	wrlong	result2, fp
1ac48     04 CE 05 F1 | 	add	fp, #4
1ac4c     E7 7E 62 FC | 	wrlong	result3, fp
1ac50                 | ' t1=pop()
1ac50                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1ac50     08 CE 85 F1 | 	sub	fp, #8
1ac54     1C 7E 0E F2 | 	cmp	result3, #28 wz
1ac58     08 CE 05 51 |  if_ne	add	fp, #8
1ac5c     E7 A6 02 5B |  if_ne	rdlong	local01, fp
1ac60     08 CE 85 51 |  if_ne	sub	fp, #8
1ac64     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
1ac68     70 00 90 5D |  if_ne	jmp	#LR__2233
1ac6c     E7 A6 02 FB | 	rdlong	local01, fp
1ac70     54 00 00 FF 
1ac74     E4 64 06 F1 | 	add	objptr, ##43236
1ac78     32 A7 62 FC | 	wrlong	local01, objptr
1ac7c                 | '   q=t1.result.uresult
1ac7c                 | '   if q<7 then 
1ac7c     54 00 00 FF 
1ac80     E4 64 86 F1 | 	sub	objptr, ##43236
1ac84     07 A6 56 F2 | 	cmps	local01, #7 wc
1ac88     40 00 90 3D |  if_ae	jmp	#LR__2232
1ac8c     54 00 00 FF 
1ac90     E4 64 06 F1 | 	add	objptr, ##43236
1ac94     32 A7 02 FB | 	rdlong	local01, objptr
1ac98     02 A6 66 F0 | 	shl	local01, #2
1ac9c     EC 64 86 F1 | 	sub	objptr, #236
1aca0     32 A7 02 F1 | 	add	local01, objptr
1aca4     53 A9 02 FB | 	rdlong	local02, local01
1aca8     E7 A8 62 FC | 	wrlong	local02, fp
1acac     08 CE 05 F1 | 	add	fp, #8
1acb0     E7 3A 68 FC | 	wrlong	#29, fp
1acb4     08 CE 85 F1 | 	sub	fp, #8
1acb8     E7 92 02 F6 | 	mov	arg01, fp
1acbc     53 00 00 FF 
1acc0     F8 65 86 F1 | 	sub	objptr, ##43000
1acc4     38 2A BF FD | 	call	#_push
1acc8                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
1acc8     1C 00 90 FD | 	jmp	#LR__2234
1accc                 | LR__2232
1accc     29 92 06 F6 | 	mov	arg01, #41
1acd0     00 94 06 F6 | 	mov	arg02, #0
1acd4     FC 5F B0 FD | 	call	#_printerror
1acd8                 | '      printerror(41) : return
1acd8     0C 00 90 FD | 	jmp	#LR__2234
1acdc                 | LR__2233
1acdc     29 92 06 F6 | 	mov	arg01, #41
1ace0     00 94 06 F6 | 	mov	arg02, #0
1ace4     EC 5F B0 FD | 	call	#_printerror
1ace8                 | LR__2234
1ace8     E7 F0 03 F6 | 	mov	ptra, fp
1acec     F2 00 A0 FD | 	call	#popregs_
1acf0                 | _do_stick_ret
1acf0     2D 00 64 FD | 	ret
1acf4                 | 
1acf4                 | ' 
1acf4                 | ' 
1acf4                 | ' sub do_str
1acf4                 | _do_str
1acf4     02 CA 05 F6 | 	mov	COUNT_, #2
1acf8     E8 00 A0 FD | 	call	#pushregs_
1acfc     14 F0 07 F1 | 	add	ptra, #20
1ad00     4C 00 00 FF 
1ad04     24 64 06 F1 | 	add	objptr, ##38948
1ad08     32 97 02 FB | 	rdlong	arg03, objptr
1ad0c     4B 95 02 F6 | 	mov	arg02, arg03
1ad10     01 94 66 F0 | 	shl	arg02, #1
1ad14     4B 95 02 F1 | 	add	arg02, arg03
1ad18     02 94 66 F0 | 	shl	arg02, #2
1ad1c     03 00 00 FF 
1ad20     04 64 86 F1 | 	sub	objptr, ##1540
1ad24     32 95 02 F1 | 	add	arg02, objptr
1ad28     4A 97 02 FB | 	rdlong	arg03, arg02
1ad2c                 | ' 
1ad2c                 | ' numpar=compiledline(lineptr_e).result.uresult
1ad2c                 | ' if numpar<>1 then print "str$: "; : printerror(39) : return
1ad2c     01 96 0E F2 | 	cmp	arg03, #1 wz
1ad30     49 00 00 FF 
1ad34     20 64 86 F1 | 	sub	objptr, ##37408
1ad38     40 00 90 AD |  if_e	jmp	#LR__2240
1ad3c     00 92 06 F6 | 	mov	arg01, #0
1ad40     18 F2 B0 FD | 	call	#__system___getiolock_0622
1ad44     3D 93 02 F6 | 	mov	arg01, result1
1ad48     8C 9C B0 FD | 	call	#__system___lockmem
1ad4c     98 01 00 FF 
1ad50     5A 95 06 F6 | 	mov	arg02, ##@LR__6093
1ad54     00 92 06 F6 | 	mov	arg01, #0
1ad58     00 96 06 F6 | 	mov	arg03, #0
1ad5c     6C A9 B0 FD | 	call	#__system___basic_print_string
1ad60     00 92 06 F6 | 	mov	arg01, #0
1ad64     F4 F1 B0 FD | 	call	#__system___getiolock_0622
1ad68     3D 01 68 FC | 	wrlong	#0, result1
1ad6c     27 92 06 F6 | 	mov	arg01, #39
1ad70     00 94 06 F6 | 	mov	arg02, #0
1ad74     5C 5F B0 FD | 	call	#_printerror
1ad78     F0 00 90 FD | 	jmp	#LR__2249
1ad7c                 | LR__2240
1ad7c     F0 28 BF FD | 	call	#_pop
1ad80     3F 97 02 F6 | 	mov	arg03, result3
1ad84     E7 7A 62 FC | 	wrlong	result1, fp
1ad88     04 CE 05 F1 | 	add	fp, #4
1ad8c     E7 7C 62 FC | 	wrlong	result2, fp
1ad90     04 CE 05 F1 | 	add	fp, #4
1ad94     E7 96 62 FC | 	wrlong	arg03, fp
1ad98                 | ' 
1ad98                 | ' t1=pop()
1ad98                 | ' if t1.result_type=result_int then 
1ad98     08 CE 85 F1 | 	sub	fp, #8
1ad9c     1C 96 0E F2 | 	cmp	arg03, #28 wz
1ada0     28 00 90 5D |  if_ne	jmp	#LR__2241
1ada4     E7 92 02 FB | 	rdlong	arg01, fp
1ada8     49 93 52 F6 | 	abs	arg01, arg01 wc
1adac     1F A6 C6 C9 |  if_b	decod	local01, #31
1adb0     00 A6 06 36 |  if_ae	mov	local01, #0
1adb4     EC BE B0 FD | 	call	#__system___float_fromuns
1adb8     53 7B 62 F5 | 	xor	result1, local01
1adbc     3D 93 02 F6 | 	mov	arg01, result1
1adc0     B4 B6 B0 FD | 	call	#__system__str_S
1adc4     3D A9 02 F6 | 	mov	local02, result1
1adc8     88 00 90 FD | 	jmp	#LR__2248
1adcc                 | LR__2241
1adcc     08 CE 05 F1 | 	add	fp, #8
1add0     E7 96 02 FB | 	rdlong	arg03, fp
1add4     08 CE 85 F1 | 	sub	fp, #8
1add8     1D 96 0E F2 | 	cmp	arg03, #29 wz
1addc     18 00 90 5D |  if_ne	jmp	#LR__2242
1ade0     E7 92 02 FB | 	rdlong	arg01, fp
1ade4     BC BE B0 FD | 	call	#__system___float_fromuns
1ade8     3D 93 02 F6 | 	mov	arg01, result1
1adec     88 B6 B0 FD | 	call	#__system__str_S
1adf0     3D A9 02 F6 | 	mov	local02, result1
1adf4     5C 00 90 FD | 	jmp	#LR__2247
1adf8                 | LR__2242
1adf8     08 CE 05 F1 | 	add	fp, #8
1adfc     E7 96 02 FB | 	rdlong	arg03, fp
1ae00     08 CE 85 F1 | 	sub	fp, #8
1ae04     1E 96 0E F2 | 	cmp	arg03, #30 wz
1ae08     10 00 90 5D |  if_ne	jmp	#LR__2243
1ae0c     E7 92 02 FB | 	rdlong	arg01, fp
1ae10     64 B6 B0 FD | 	call	#__system__str_S
1ae14     3D A9 02 F6 | 	mov	local02, result1
1ae18     38 00 90 FD | 	jmp	#LR__2246
1ae1c                 | LR__2243
1ae1c     08 CE 05 F1 | 	add	fp, #8
1ae20     E7 96 02 FB | 	rdlong	arg03, fp
1ae24     08 CE 85 F1 | 	sub	fp, #8
1ae28     2B 96 0E F2 | 	cmp	arg03, #43 wz
1ae2c     10 00 90 5D |  if_ne	jmp	#LR__2244
1ae30     E7 92 02 FB | 	rdlong	arg01, fp
1ae34     A8 29 BF FD | 	call	#_convertstring
1ae38     3D A9 02 F6 | 	mov	local02, result1
1ae3c     14 00 90 FD | 	jmp	#LR__2245
1ae40                 | LR__2244
1ae40     08 CE 05 F1 | 	add	fp, #8
1ae44     E7 7C 02 FB | 	rdlong	result2, fp
1ae48     08 CE 85 F1 | 	sub	fp, #8
1ae4c     1F 7C 0E F2 | 	cmp	result2, #31 wz
1ae50     E7 A8 02 AB |  if_e	rdlong	local02, fp
1ae54                 | LR__2245
1ae54                 | LR__2246
1ae54                 | LR__2247
1ae54                 | LR__2248
1ae54     E7 A8 62 FC | 	wrlong	local02, fp
1ae58     08 CE 05 F1 | 	add	fp, #8
1ae5c     E7 3E 68 FC | 	wrlong	#31, fp
1ae60     08 CE 85 F1 | 	sub	fp, #8
1ae64     E7 92 02 F6 | 	mov	arg01, fp
1ae68     94 28 BF FD | 	call	#_push
1ae6c                 | '     t1.result.sresult=s : t1.result_type=result_string : push t1 : return 
1ae6c                 | LR__2249
1ae6c     E7 F0 03 F6 | 	mov	ptra, fp
1ae70     F2 00 A0 FD | 	call	#popregs_
1ae74                 | _do_str_ret
1ae74     2D 00 64 FD | 	ret
1ae78                 | 
1ae78                 | ' ' ------------------ strig
1ae78                 | ' 
1ae78                 | ' sub do_strig
1ae78                 | _do_strig
1ae78     02 CA 05 F6 | 	mov	COUNT_, #2
1ae7c     E8 00 A0 FD | 	call	#pushregs_
1ae80     10 F0 07 F1 | 	add	ptra, #16
1ae84     4C 00 00 FF 
1ae88     24 64 06 F1 | 	add	objptr, ##38948
1ae8c     32 A7 02 FB | 	rdlong	local01, objptr
1ae90     53 97 02 F6 | 	mov	arg03, local01
1ae94     01 96 66 F0 | 	shl	arg03, #1
1ae98     53 97 02 F1 | 	add	arg03, local01
1ae9c     02 96 66 F0 | 	shl	arg03, #2
1aea0     03 00 00 FF 
1aea4     04 64 86 F1 | 	sub	objptr, ##1540
1aea8     32 97 02 F1 | 	add	arg03, objptr
1aeac     4B A9 02 FB | 	rdlong	local02, arg03
1aeb0                 | ' 
1aeb0                 | ' numpar=compiledline(lineptr_e).result.uresult
1aeb0                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
1aeb0     02 A8 16 F2 | 	cmp	local02, #2 wc
1aeb4     49 00 00 FF 
1aeb8     20 64 86 F1 | 	sub	objptr, ##37408
1aebc     40 00 90 CD |  if_b	jmp	#LR__2250
1aec0     00 92 06 F6 | 	mov	arg01, #0
1aec4     94 F0 B0 FD | 	call	#__system___getiolock_0622
1aec8     3D 93 02 F6 | 	mov	arg01, result1
1aecc     08 9B B0 FD | 	call	#__system___lockmem
1aed0     98 01 00 FF 
1aed4     61 95 06 F6 | 	mov	arg02, ##@LR__6094
1aed8     00 92 06 F6 | 	mov	arg01, #0
1aedc     00 96 06 F6 | 	mov	arg03, #0
1aee0     E8 A7 B0 FD | 	call	#__system___basic_print_string
1aee4     00 92 06 F6 | 	mov	arg01, #0
1aee8     70 F0 B0 FD | 	call	#__system___getiolock_0622
1aeec     3D 01 68 FC | 	wrlong	#0, result1
1aef0     27 92 06 F6 | 	mov	arg01, #39
1aef4     00 94 06 F6 | 	mov	arg02, #0
1aef8     D8 5D B0 FD | 	call	#_printerror
1aefc     E8 00 90 FD | 	jmp	#LR__2254
1af00                 | LR__2250
1af00                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
1af00     00 A8 0E F2 | 	cmp	local02, #0 wz
1af04     30 00 90 5D |  if_ne	jmp	#LR__2251
1af08     54 00 00 FF 
1af0c     14 64 06 F1 | 	add	objptr, ##43028
1af10     32 A9 02 FB | 	rdlong	local02, objptr
1af14     54 00 00 FF 
1af18     14 64 86 F1 | 	sub	objptr, ##43028
1af1c     E7 A8 62 FC | 	wrlong	local02, fp
1af20     08 CE 05 F1 | 	add	fp, #8
1af24     E7 3A 68 FC | 	wrlong	#29, fp
1af28     08 CE 85 F1 | 	sub	fp, #8
1af2c     E7 92 02 F6 | 	mov	arg01, fp
1af30     CC 27 BF FD | 	call	#_push
1af34     B0 00 90 FD | 	jmp	#LR__2254
1af38                 | LR__2251
1af38     34 27 BF FD | 	call	#_pop
1af3c     E7 7A 62 FC | 	wrlong	result1, fp
1af40     04 CE 05 F1 | 	add	fp, #4
1af44     E7 7C 62 FC | 	wrlong	result2, fp
1af48     04 CE 05 F1 | 	add	fp, #4
1af4c     E7 7E 62 FC | 	wrlong	result3, fp
1af50                 | ' t1=pop()
1af50                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1af50     08 CE 85 F1 | 	sub	fp, #8
1af54     1C 7E 0E F2 | 	cmp	result3, #28 wz
1af58     08 CE 05 51 |  if_ne	add	fp, #8
1af5c     E7 A6 02 5B |  if_ne	rdlong	local01, fp
1af60     08 CE 85 51 |  if_ne	sub	fp, #8
1af64     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
1af68     70 00 90 5D |  if_ne	jmp	#LR__2253
1af6c     E7 A6 02 FB | 	rdlong	local01, fp
1af70     54 00 00 FF 
1af74     E4 64 06 F1 | 	add	objptr, ##43236
1af78     32 A7 62 FC | 	wrlong	local01, objptr
1af7c                 | '   q=t1.result.uresult
1af7c                 | '   if q<7 then 
1af7c     54 00 00 FF 
1af80     E4 64 86 F1 | 	sub	objptr, ##43236
1af84     07 A6 56 F2 | 	cmps	local01, #7 wc
1af88     40 00 90 3D |  if_ae	jmp	#LR__2252
1af8c     54 00 00 FF 
1af90     E4 64 06 F1 | 	add	objptr, ##43236
1af94     32 A7 02 FB | 	rdlong	local01, objptr
1af98     02 A6 66 F0 | 	shl	local01, #2
1af9c     D0 64 86 F1 | 	sub	objptr, #208
1afa0     32 A7 02 F1 | 	add	local01, objptr
1afa4     53 A9 02 FB | 	rdlong	local02, local01
1afa8     E7 A8 62 FC | 	wrlong	local02, fp
1afac     08 CE 05 F1 | 	add	fp, #8
1afb0     E7 3A 68 FC | 	wrlong	#29, fp
1afb4     08 CE 85 F1 | 	sub	fp, #8
1afb8     E7 92 02 F6 | 	mov	arg01, fp
1afbc     54 00 00 FF 
1afc0     14 64 86 F1 | 	sub	objptr, ##43028
1afc4     38 27 BF FD | 	call	#_push
1afc8                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
1afc8     1C 00 90 FD | 	jmp	#LR__2254
1afcc                 | LR__2252
1afcc     29 92 06 F6 | 	mov	arg01, #41
1afd0     00 94 06 F6 | 	mov	arg02, #0
1afd4     FC 5C B0 FD | 	call	#_printerror
1afd8                 | '      printerror(41) : return
1afd8     0C 00 90 FD | 	jmp	#LR__2254
1afdc                 | LR__2253
1afdc     29 92 06 F6 | 	mov	arg01, #41
1afe0     00 94 06 F6 | 	mov	arg02, #0
1afe4     EC 5C B0 FD | 	call	#_printerror
1afe8                 | LR__2254
1afe8     E7 F0 03 F6 | 	mov	ptra, fp
1afec     F2 00 A0 FD | 	call	#popregs_
1aff0                 | _do_strig_ret
1aff0     2D 00 64 FD | 	ret
1aff4                 | 
1aff4                 | ' 
1aff4                 | ' ' ------------------ tan
1aff4                 | ' 
1aff4                 | ' sub do_tan
1aff4                 | _do_tan
1aff4     01 CA 05 F6 | 	mov	COUNT_, #1
1aff8     E8 00 A0 FD | 	call	#pushregs_
1affc     10 F0 07 F1 | 	add	ptra, #16
1b000     4C 00 00 FF 
1b004     24 64 06 F1 | 	add	objptr, ##38948
1b008     32 97 02 FB | 	rdlong	arg03, objptr
1b00c     4B 95 02 F6 | 	mov	arg02, arg03
1b010     01 94 66 F0 | 	shl	arg02, #1
1b014     4B 95 02 F1 | 	add	arg02, arg03
1b018     02 94 66 F0 | 	shl	arg02, #2
1b01c     03 00 00 FF 
1b020     04 64 86 F1 | 	sub	objptr, ##1540
1b024     32 95 02 F1 | 	add	arg02, objptr
1b028     4A 97 02 FB | 	rdlong	arg03, arg02
1b02c                 | ' 
1b02c                 | ' numpar=compiledline(lineptr_e).result.uresult
1b02c                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
1b02c     02 96 16 F2 | 	cmp	arg03, #2 wc
1b030     49 00 00 FF 
1b034     20 64 86 F1 | 	sub	objptr, ##37408
1b038     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
1b03c     40 00 90 4D |  if_c_and_nz	jmp	#LR__2260
1b040     00 92 06 F6 | 	mov	arg01, #0
1b044     14 EF B0 FD | 	call	#__system___getiolock_0622
1b048     3D 93 02 F6 | 	mov	arg01, result1
1b04c     88 99 B0 FD | 	call	#__system___lockmem
1b050     98 01 00 FF 
1b054     69 95 06 F6 | 	mov	arg02, ##@LR__6095
1b058     00 92 06 F6 | 	mov	arg01, #0
1b05c     00 96 06 F6 | 	mov	arg03, #0
1b060     68 A6 B0 FD | 	call	#__system___basic_print_string
1b064     00 92 06 F6 | 	mov	arg01, #0
1b068     F0 EE B0 FD | 	call	#__system___getiolock_0622
1b06c     3D 01 68 FC | 	wrlong	#0, result1
1b070     27 92 06 F6 | 	mov	arg01, #39
1b074     00 94 06 F6 | 	mov	arg02, #0
1b078     58 5C B0 FD | 	call	#_printerror
1b07c     64 00 90 FD | 	jmp	#LR__2261
1b080                 | LR__2260
1b080     EC 25 BF FD | 	call	#_pop
1b084     E7 7A 62 FC | 	wrlong	result1, fp
1b088     04 CE 05 F1 | 	add	fp, #4
1b08c     E7 7C 62 FC | 	wrlong	result2, fp
1b090     04 CE 05 F1 | 	add	fp, #4
1b094     E7 7E 62 FC | 	wrlong	result3, fp
1b098     08 CE 85 F1 | 	sub	fp, #8
1b09c     54 00 00 FF 
1b0a0     84 64 06 F1 | 	add	objptr, ##43140
1b0a4     32 A7 02 FB | 	rdlong	local01, objptr
1b0a8     54 00 00 FF 
1b0ac     84 64 86 F1 | 	sub	objptr, ##43140
1b0b0     E7 92 02 F6 | 	mov	arg01, fp
1b0b4     50 28 BF FD | 	call	#_converttofloat
1b0b8     3D 95 02 F6 | 	mov	arg02, result1
1b0bc     53 93 02 F6 | 	mov	arg01, local01
1b0c0     E4 BF B0 FD | 	call	#__system___float_mul
1b0c4     3D 93 02 F6 | 	mov	arg01, result1
1b0c8     98 CA B0 FD | 	call	#__system____builtin_tanf
1b0cc     E7 7A 62 FC | 	wrlong	result1, fp
1b0d0     08 CE 05 F1 | 	add	fp, #8
1b0d4     E7 3C 68 FC | 	wrlong	#30, fp
1b0d8     08 CE 85 F1 | 	sub	fp, #8
1b0dc     E7 92 02 F6 | 	mov	arg01, fp
1b0e0     1C 26 BF FD | 	call	#_push
1b0e4                 | LR__2261
1b0e4     E7 F0 03 F6 | 	mov	ptra, fp
1b0e8     F2 00 A0 FD | 	call	#popregs_
1b0ec                 | _do_tan_ret
1b0ec     2D 00 64 FD | 	ret
1b0f0                 | 
1b0f0                 | ' 
1b0f0                 | ' ' ------------------ val
1b0f0                 | ' 
1b0f0                 | ' sub do_val
1b0f0                 | _do_val
1b0f0     05 CA 05 F6 | 	mov	COUNT_, #5
1b0f4     E8 00 A0 FD | 	call	#pushregs_
1b0f8     20 F0 07 F1 | 	add	ptra, #32
1b0fc     4C 00 00 FF 
1b100     24 64 06 F1 | 	add	objptr, ##38948
1b104     32 97 02 FB | 	rdlong	arg03, objptr
1b108     4B 95 02 F6 | 	mov	arg02, arg03
1b10c     01 94 66 F0 | 	shl	arg02, #1
1b110     4B 95 02 F1 | 	add	arg02, arg03
1b114     02 94 66 F0 | 	shl	arg02, #2
1b118     03 00 00 FF 
1b11c     04 64 86 F1 | 	sub	objptr, ##1540
1b120     32 95 02 F1 | 	add	arg02, objptr
1b124     4A 97 02 FB | 	rdlong	arg03, arg02
1b128                 | ' 
1b128                 | ' numpar=compiledline(lineptr_e).result.uresult
1b128                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
1b128     02 96 16 F2 | 	cmp	arg03, #2 wc
1b12c     49 00 00 FF 
1b130     20 64 86 F1 | 	sub	objptr, ##37408
1b134     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
1b138     40 00 90 4D |  if_c_and_nz	jmp	#LR__2270
1b13c     00 92 06 F6 | 	mov	arg01, #0
1b140     18 EE B0 FD | 	call	#__system___getiolock_0622
1b144     3D 93 02 F6 | 	mov	arg01, result1
1b148     8C 98 B0 FD | 	call	#__system___lockmem
1b14c     98 01 00 FF 
1b150     6F 95 06 F6 | 	mov	arg02, ##@LR__6096
1b154     00 92 06 F6 | 	mov	arg01, #0
1b158     00 96 06 F6 | 	mov	arg03, #0
1b15c     6C A5 B0 FD | 	call	#__system___basic_print_string
1b160     00 92 06 F6 | 	mov	arg01, #0
1b164     F4 ED B0 FD | 	call	#__system___getiolock_0622
1b168     3D 01 68 FC | 	wrlong	#0, result1
1b16c     27 92 06 F6 | 	mov	arg01, #39
1b170     00 94 06 F6 | 	mov	arg02, #0
1b174     5C 5B B0 FD | 	call	#_printerror
1b178     0C 02 90 FD | 	jmp	#LR__2282
1b17c                 | LR__2270
1b17c     F0 24 BF FD | 	call	#_pop
1b180     3F 97 02 F6 | 	mov	arg03, result3
1b184     E7 7A 62 FC | 	wrlong	result1, fp
1b188     04 CE 05 F1 | 	add	fp, #4
1b18c     E7 7C 62 FC | 	wrlong	result2, fp
1b190     04 CE 05 F1 | 	add	fp, #4
1b194     E7 96 62 FC | 	wrlong	arg03, fp
1b198                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1b198     08 CE 85 F1 | 	sub	fp, #8
1b19c     2B 96 0E F2 | 	cmp	arg03, #43 wz
1b1a0     18 00 90 5D |  if_ne	jmp	#LR__2271
1b1a4     E7 92 02 FB | 	rdlong	arg01, fp
1b1a8     34 26 BF FD | 	call	#_convertstring
1b1ac     E7 7A 62 FC | 	wrlong	result1, fp
1b1b0     08 CE 05 F1 | 	add	fp, #8
1b1b4     E7 3E 68 FC | 	wrlong	#31, fp
1b1b8     08 CE 85 F1 | 	sub	fp, #8
1b1bc                 | LR__2271
1b1bc                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
1b1bc     08 CE 05 F1 | 	add	fp, #8
1b1c0     E7 96 02 FB | 	rdlong	arg03, fp
1b1c4     08 CE 85 F1 | 	sub	fp, #8
1b1c8     1F 96 0E F2 | 	cmp	arg03, #31 wz
1b1cc     40 00 90 AD |  if_e	jmp	#LR__2272
1b1d0     00 92 06 F6 | 	mov	arg01, #0
1b1d4     84 ED B0 FD | 	call	#__system___getiolock_0622
1b1d8     3D 93 02 F6 | 	mov	arg01, result1
1b1dc     F8 97 B0 FD | 	call	#__system___lockmem
1b1e0     98 01 00 FF 
1b1e4     75 95 06 F6 | 	mov	arg02, ##@LR__6097
1b1e8     00 92 06 F6 | 	mov	arg01, #0
1b1ec     00 96 06 F6 | 	mov	arg03, #0
1b1f0     D8 A4 B0 FD | 	call	#__system___basic_print_string
1b1f4     00 92 06 F6 | 	mov	arg01, #0
1b1f8     60 ED B0 FD | 	call	#__system___getiolock_0622
1b1fc     3D 01 68 FC | 	wrlong	#0, result1
1b200     0F 92 06 F6 | 	mov	arg01, #15
1b204     00 94 06 F6 | 	mov	arg02, #0
1b208     C8 5A B0 FD | 	call	#_printerror
1b20c     78 01 90 FD | 	jmp	#LR__2282
1b210                 | LR__2272
1b210                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1b210     E7 92 02 FB | 	rdlong	arg01, fp
1b214     01 94 06 F6 | 	mov	arg02, #1
1b218     64 B0 B0 FD | 	call	#__system__Left_S
1b21c     3D 93 02 F6 | 	mov	arg01, result1
1b220     98 01 00 FF 
1b224     7B 95 06 F6 | 	mov	arg02, ##@LR__6098
1b228     D4 97 B0 FD | 	call	#__system___string_cmp
1b22c     00 7A 0E F2 | 	cmp	result1, #0 wz
1b230     48 00 90 5D |  if_ne	jmp	#LR__2275
1b234     98 01 00 FF 
1b238     7D A7 06 F6 | 	mov	local01, ##@LR__6099
1b23c     E7 96 02 FB | 	rdlong	arg03, fp
1b240     4B 93 02 F6 | 	mov	arg01, arg03
1b244     49 A9 02 F6 | 	mov	local02, arg01
1b248     D7 06 48 FB | 	callpa	#(@LR__2274-@LR__2273)>>2,fcache_load_ptr_
1b24c                 | LR__2273
1b24c     54 7B CA FA | 	rdbyte	result1, local02 wz
1b250     01 A8 06 51 |  if_ne	add	local02, #1
1b254     F4 FF 9F 5D |  if_ne	jmp	#LR__2273
1b258                 | LR__2274
1b258     49 A9 82 F1 | 	sub	local02, arg01
1b25c     54 95 02 F6 | 	mov	arg02, local02
1b260     01 94 86 F1 | 	sub	arg02, #1
1b264     4B 93 02 F6 | 	mov	arg01, arg03
1b268     9C B0 B0 FD | 	call	#__system__Right_S
1b26c     3D 95 02 F6 | 	mov	arg02, result1
1b270     53 93 02 F6 | 	mov	arg01, local01
1b274     BC 97 B0 FD | 	call	#__system___string_concat
1b278     E7 7A 62 FC | 	wrlong	result1, fp
1b27c                 | LR__2275
1b27c                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1b27c     E7 92 02 FB | 	rdlong	arg01, fp
1b280     01 94 06 F6 | 	mov	arg02, #1
1b284     F8 AF B0 FD | 	call	#__system__Left_S
1b288     3D 93 02 F6 | 	mov	arg01, result1
1b28c     98 01 00 FF 
1b290     80 95 06 F6 | 	mov	arg02, ##@LR__6100
1b294     68 97 B0 FD | 	call	#__system___string_cmp
1b298     00 7A 0E F2 | 	cmp	result1, #0 wz
1b29c     48 00 90 5D |  if_ne	jmp	#LR__2278
1b2a0     98 01 00 FF 
1b2a4     82 A7 06 F6 | 	mov	local01, ##@LR__6101
1b2a8     E7 96 02 FB | 	rdlong	arg03, fp
1b2ac     4B 93 02 F6 | 	mov	arg01, arg03
1b2b0     49 A9 02 F6 | 	mov	local02, arg01
1b2b4     D7 06 48 FB | 	callpa	#(@LR__2277-@LR__2276)>>2,fcache_load_ptr_
1b2b8                 | LR__2276
1b2b8     54 7B CA FA | 	rdbyte	result1, local02 wz
1b2bc     01 A8 06 51 |  if_ne	add	local02, #1
1b2c0     F4 FF 9F 5D |  if_ne	jmp	#LR__2276
1b2c4                 | LR__2277
1b2c4     49 A9 82 F1 | 	sub	local02, arg01
1b2c8     54 95 02 F6 | 	mov	arg02, local02
1b2cc     01 94 86 F1 | 	sub	arg02, #1
1b2d0     4B 93 02 F6 | 	mov	arg01, arg03
1b2d4     30 B0 B0 FD | 	call	#__system__Right_S
1b2d8     3D 95 02 F6 | 	mov	arg02, result1
1b2dc     53 93 02 F6 | 	mov	arg01, local01
1b2e0     50 97 B0 FD | 	call	#__system___string_concat
1b2e4     E7 7A 62 FC | 	wrlong	result1, fp
1b2e8                 | LR__2278
1b2e8     E7 92 02 FB | 	rdlong	arg01, fp
1b2ec     D4 C5 B0 FD | 	call	#__system____builtin_atof
1b2f0     3D AB 02 F6 | 	mov	local03, result1
1b2f4     E7 92 02 FB | 	rdlong	arg01, fp
1b2f8     00 94 06 F6 | 	mov	arg02, #0
1b2fc     2C C4 B0 FD | 	call	#__system____builtin_atoi
1b300     3D AD 02 F6 | 	mov	local04, result1
1b304                 | ' fval=val(t1.result.sresult)
1b304                 | ' ival=val%(t1.result.sresult)
1b304                 | ' if fval=ival then
1b304     56 93 52 F6 | 	abs	arg01, local04 wc
1b308     1F AE C6 C9 |  if_b	decod	local05, #31
1b30c     00 AE 06 36 |  if_ae	mov	local05, #0
1b310     90 B9 B0 FD | 	call	#__system___float_fromuns
1b314     57 7B 62 F5 | 	xor	result1, local05
1b318     3D 95 02 F6 | 	mov	arg02, result1
1b31c     55 93 02 F6 | 	mov	arg01, local03
1b320     01 96 06 F6 | 	mov	arg03, #1
1b324     B4 C1 B0 FD | 	call	#__system___float_cmp
1b328     00 7A 0E F2 | 	cmp	result1, #0 wz
1b32c     E7 AC 62 AC |  if_e	wrlong	local04, fp
1b330     08 CE 05 A1 |  if_e	add	fp, #8
1b334     E7 38 68 AC |  if_e	wrlong	#28, fp
1b338     08 CE 85 A1 |  if_e	sub	fp, #8
1b33c     40 00 90 AD |  if_e	jmp	#LR__2281
1b340                 | '   if fval=0 andalso ival<>0 then
1b340     55 93 02 F6 | 	mov	arg01, local03
1b344     00 94 06 F6 | 	mov	arg02, #0
1b348     01 96 06 F6 | 	mov	arg03, #1
1b34c     8C C1 B0 FD | 	call	#__system___float_cmp
1b350     00 7A 0E F2 | 	cmp	result1, #0 wz
1b354     18 00 90 5D |  if_ne	jmp	#LR__2279
1b358     00 AC 0E F2 | 	cmp	local04, #0 wz
1b35c     E7 AC 62 5C |  if_ne	wrlong	local04, fp
1b360     08 CE 05 51 |  if_ne	add	fp, #8
1b364     E7 38 68 5C |  if_ne	wrlong	#28, fp
1b368     08 CE 85 51 |  if_ne	sub	fp, #8
1b36c     10 00 90 5D |  if_ne	jmp	#LR__2280
1b370                 | LR__2279
1b370     E7 AA 62 FC | 	wrlong	local03, fp
1b374     08 CE 05 F1 | 	add	fp, #8
1b378     E7 3C 68 FC | 	wrlong	#30, fp
1b37c     08 CE 85 F1 | 	sub	fp, #8
1b380                 | LR__2280
1b380                 | LR__2281
1b380     E7 92 02 F6 | 	mov	arg01, fp
1b384     78 23 BF FD | 	call	#_push
1b388                 | LR__2282
1b388     E7 F0 03 F6 | 	mov	ptra, fp
1b38c     F2 00 A0 FD | 	call	#popregs_
1b390                 | _do_val_ret
1b390     2D 00 64 FD | 	ret
1b394                 | 
1b394                 | ' 
1b394                 | ' ' ------------------ waitclock
1b394                 | ' 
1b394                 | ' sub do_waitclock
1b394                 | _do_waitclock
1b394     54 00 00 FF 
1b398     70 64 06 F1 | 	add	objptr, ##43120
1b39c     32 81 02 FB | 	rdlong	_var01, objptr
1b3a0                 | ' c=hkcnt
1b3a0                 | ' do: loop until hkcnt<>c
1b3a0                 | LR__2290
1b3a0     32 83 02 FB | 	rdlong	_var02, objptr
1b3a4     40 83 0A F2 | 	cmp	_var02, _var01 wz
1b3a8     F4 FF 9F AD |  if_e	jmp	#LR__2290
1b3ac     54 00 00 FF 
1b3b0     70 64 86 F1 | 	sub	objptr, ##43120
1b3b4                 | _do_waitclock_ret
1b3b4     2D 00 64 FD | 	ret
1b3b8                 | 
1b3b8                 | ' 
1b3b8                 | ' ' ------------------ waitms
1b3b8                 | ' 
1b3b8                 | ' sub do_waitms
1b3b8                 | _do_waitms
1b3b8     03 CA 05 F6 | 	mov	COUNT_, #3
1b3bc     E8 00 A0 FD | 	call	#pushregs_
1b3c0     18 F0 07 F1 | 	add	ptra, #24
1b3c4     A8 22 BF FD | 	call	#_pop
1b3c8     E7 7A 62 FC | 	wrlong	result1, fp
1b3cc     04 CE 05 F1 | 	add	fp, #4
1b3d0     E7 7C 62 FC | 	wrlong	result2, fp
1b3d4     04 CE 05 F1 | 	add	fp, #4
1b3d8     E7 7E 62 FC | 	wrlong	result3, fp
1b3dc     08 CE 85 F1 | 	sub	fp, #8
1b3e0     E7 92 02 F6 | 	mov	arg01, fp
1b3e4     64 24 BF FD | 	call	#_converttoint
1b3e8     3D A7 02 F6 | 	mov	local01, result1
1b3ec                 | ' 
1b3ec                 | ' t1=pop()  
1b3ec                 | ' t=converttoint(t1)
1b3ec                 | ' if t<0 then return
1b3ec     00 A6 56 F2 | 	cmps	local01, #0 wc
1b3f0     98 00 90 CD |  if_b	jmp	#LR__2306
1b3f4                 | ' if t < 1000 then 
1b3f4     01 00 00 FF 
1b3f8     E8 A7 56 F2 | 	cmps	local01, ##1000 wc
1b3fc     0C 00 90 3D |  if_ae	jmp	#LR__2300
1b400     53 93 02 F6 | 	mov	arg01, local01
1b404     C4 98 B0 FD | 	call	#__system___waitms
1b408     80 00 90 FD | 	jmp	#LR__2305
1b40c                 | LR__2300
1b40c     53 93 52 F6 | 	abs	arg01, local01 wc
1b410     01 00 00 FF 
1b414     E8 93 16 FD | 	qdiv	arg01, ##1000
1b418                 | '   for i=1 to t/1000
1b418     01 A8 06 F6 | 	mov	local02, #1
1b41c     18 AA 62 FD | 	getqx	local03
1b420     55 AB 82 F6 | 	negc	local03, local03
1b424     01 AA 06 F1 | 	add	local03, #1
1b428                 | LR__2301
1b428     55 A9 52 F2 | 	cmps	local02, local03 wc
1b42c     44 00 90 3D |  if_ae	jmp	#LR__2304
1b430     01 00 00 FF 
1b434     E8 93 06 F6 | 	mov	arg01, ##1000
1b438     90 98 B0 FD | 	call	#__system___waitms
1b43c                 | '     waitms(1000)
1b43c                 | '     if ((kbm.keystate(kbm.KEY_LCTRL) orelse kbm.keystate(kbm.KEY_RCTRL)) andalso kbm.keystate(kbm.KEY_C)) then return
1b43c     E0 92 06 F6 | 	mov	arg01, #224
1b440     AC 89 B0 FD | 	call	#_usbnew_spin2_keystate
1b444     00 7A 0E F2 | 	cmp	result1, #0 wz
1b448     10 00 90 5D |  if_ne	jmp	#LR__2302
1b44c     E4 92 06 F6 | 	mov	arg01, #228
1b450     9C 89 B0 FD | 	call	#_usbnew_spin2_keystate
1b454     00 7A 0E F2 | 	cmp	result1, #0 wz
1b458     10 00 90 AD |  if_e	jmp	#LR__2303
1b45c                 | LR__2302
1b45c     06 92 06 F6 | 	mov	arg01, #6
1b460     8C 89 B0 FD | 	call	#_usbnew_spin2_keystate
1b464     00 7A 0E F2 | 	cmp	result1, #0 wz
1b468     20 00 90 5D |  if_ne	jmp	#LR__2306
1b46c                 | LR__2303
1b46c     01 A8 06 F1 | 	add	local02, #1
1b470     B4 FF 9F FD | 	jmp	#LR__2301
1b474                 | LR__2304
1b474     53 AB 52 F6 | 	abs	local03, local01 wc
1b478     01 00 00 FF 
1b47c     E8 AB 16 FD | 	qdiv	local03, ##1000
1b480     19 AA 62 FD | 	getqy	local03
1b484     55 93 82 F6 | 	negc	arg01, local03
1b488     40 98 B0 FD | 	call	#__system___waitms
1b48c                 | LR__2305
1b48c                 | LR__2306
1b48c     E7 F0 03 F6 | 	mov	ptra, fp
1b490     F2 00 A0 FD | 	call	#popregs_
1b494                 | _do_waitms_ret
1b494     2D 00 64 FD | 	ret
1b498                 | 
1b498                 | ' 
1b498                 | ' ' ------------------ waitvbl
1b498                 | ' 
1b498                 | ' sub do_waitvbl
1b498                 | _do_waitvbl
1b498     01 92 06 F6 | 	mov	arg01, #1
1b49c     78 75 B0 FD | 	call	#_Hg010b_4_spin2_waitvbl
1b4a0                 | _do_waitvbl_ret
1b4a0     2D 00 64 FD | 	ret
1b4a4                 | 
1b4a4                 | ' 
1b4a4                 | ' ' ------------------ wrpin
1b4a4                 | ' 
1b4a4                 | ' sub do_wrpin
1b4a4                 | _do_wrpin
1b4a4     01 CA 05 F6 | 	mov	COUNT_, #1
1b4a8     E8 00 A0 FD | 	call	#pushregs_
1b4ac     18 F0 07 F1 | 	add	ptra, #24
1b4b0     BC 21 BF FD | 	call	#_pop
1b4b4     3D 95 02 F6 | 	mov	arg02, result1
1b4b8     3E 93 02 F6 | 	mov	arg01, result2
1b4bc     3F A7 02 F6 | 	mov	local01, result3
1b4c0     E7 94 62 FC | 	wrlong	arg02, fp
1b4c4     04 CE 05 F1 | 	add	fp, #4
1b4c8     E7 92 62 FC | 	wrlong	arg01, fp
1b4cc     04 CE 05 F1 | 	add	fp, #4
1b4d0     E7 A6 62 FC | 	wrlong	local01, fp
1b4d4     08 CE 85 F1 | 	sub	fp, #8
1b4d8     94 21 BF FD | 	call	#_pop
1b4dc     3F A7 02 F6 | 	mov	local01, result3
1b4e0     0C CE 05 F1 | 	add	fp, #12
1b4e4     E7 7A 62 FC | 	wrlong	result1, fp
1b4e8     04 CE 05 F1 | 	add	fp, #4
1b4ec     E7 7C 62 FC | 	wrlong	result2, fp
1b4f0     04 CE 05 F1 | 	add	fp, #4
1b4f4     E7 A6 62 FC | 	wrlong	local01, fp
1b4f8     08 CE 85 F1 | 	sub	fp, #8
1b4fc     E7 92 02 F6 | 	mov	arg01, fp
1b500     0C CE 85 F1 | 	sub	fp, #12
1b504     44 23 BF FD | 	call	#_converttoint
1b508     3D A7 02 F6 | 	mov	local01, result1
1b50c     E7 92 02 F6 | 	mov	arg01, fp
1b510     38 23 BF FD | 	call	#_converttoint
1b514     53 7B 02 FC | 	wrpin	result1, local01
1b518     E7 F0 03 F6 | 	mov	ptra, fp
1b51c     F2 00 A0 FD | 	call	#popregs_
1b520                 | _do_wrpin_ret
1b520     2D 00 64 FD | 	ret
1b524                 | 
1b524                 | ' 
1b524                 | ' ' ------------------ wxpin
1b524                 | ' 
1b524                 | ' sub do_wxpin
1b524                 | _do_wxpin
1b524     01 CA 05 F6 | 	mov	COUNT_, #1
1b528     E8 00 A0 FD | 	call	#pushregs_
1b52c     18 F0 07 F1 | 	add	ptra, #24
1b530     3C 21 BF FD | 	call	#_pop
1b534     3D 95 02 F6 | 	mov	arg02, result1
1b538     3E 93 02 F6 | 	mov	arg01, result2
1b53c     3F A7 02 F6 | 	mov	local01, result3
1b540     E7 94 62 FC | 	wrlong	arg02, fp
1b544     04 CE 05 F1 | 	add	fp, #4
1b548     E7 92 62 FC | 	wrlong	arg01, fp
1b54c     04 CE 05 F1 | 	add	fp, #4
1b550     E7 A6 62 FC | 	wrlong	local01, fp
1b554     08 CE 85 F1 | 	sub	fp, #8
1b558     14 21 BF FD | 	call	#_pop
1b55c     3F A7 02 F6 | 	mov	local01, result3
1b560     0C CE 05 F1 | 	add	fp, #12
1b564     E7 7A 62 FC | 	wrlong	result1, fp
1b568     04 CE 05 F1 | 	add	fp, #4
1b56c     E7 7C 62 FC | 	wrlong	result2, fp
1b570     04 CE 05 F1 | 	add	fp, #4
1b574     E7 A6 62 FC | 	wrlong	local01, fp
1b578     08 CE 85 F1 | 	sub	fp, #8
1b57c     E7 92 02 F6 | 	mov	arg01, fp
1b580     0C CE 85 F1 | 	sub	fp, #12
1b584     C4 22 BF FD | 	call	#_converttoint
1b588     3D A7 02 F6 | 	mov	local01, result1
1b58c     E7 92 02 F6 | 	mov	arg01, fp
1b590     B8 22 BF FD | 	call	#_converttoint
1b594     53 7B 12 FC | 	wxpin	result1, local01
1b598     E7 F0 03 F6 | 	mov	ptra, fp
1b59c     F2 00 A0 FD | 	call	#popregs_
1b5a0                 | _do_wxpin_ret
1b5a0     2D 00 64 FD | 	ret
1b5a4                 | 
1b5a4                 | ' 
1b5a4                 | ' ' ------------------ wypin
1b5a4                 | ' 
1b5a4                 | ' sub do_wypin
1b5a4                 | _do_wypin
1b5a4     01 CA 05 F6 | 	mov	COUNT_, #1
1b5a8     E8 00 A0 FD | 	call	#pushregs_
1b5ac     18 F0 07 F1 | 	add	ptra, #24
1b5b0     BC 20 BF FD | 	call	#_pop
1b5b4     3D 95 02 F6 | 	mov	arg02, result1
1b5b8     3E 93 02 F6 | 	mov	arg01, result2
1b5bc     3F A7 02 F6 | 	mov	local01, result3
1b5c0     E7 94 62 FC | 	wrlong	arg02, fp
1b5c4     04 CE 05 F1 | 	add	fp, #4
1b5c8     E7 92 62 FC | 	wrlong	arg01, fp
1b5cc     04 CE 05 F1 | 	add	fp, #4
1b5d0     E7 A6 62 FC | 	wrlong	local01, fp
1b5d4     08 CE 85 F1 | 	sub	fp, #8
1b5d8     94 20 BF FD | 	call	#_pop
1b5dc     3F A7 02 F6 | 	mov	local01, result3
1b5e0     0C CE 05 F1 | 	add	fp, #12
1b5e4     E7 7A 62 FC | 	wrlong	result1, fp
1b5e8     04 CE 05 F1 | 	add	fp, #4
1b5ec     E7 7C 62 FC | 	wrlong	result2, fp
1b5f0     04 CE 05 F1 | 	add	fp, #4
1b5f4     E7 A6 62 FC | 	wrlong	local01, fp
1b5f8     08 CE 85 F1 | 	sub	fp, #8
1b5fc     E7 92 02 F6 | 	mov	arg01, fp
1b600     0C CE 85 F1 | 	sub	fp, #12
1b604     44 22 BF FD | 	call	#_converttoint
1b608     3D A7 02 F6 | 	mov	local01, result1
1b60c     E7 92 02 F6 | 	mov	arg01, fp
1b610     38 22 BF FD | 	call	#_converttoint
1b614     53 7B 22 FC | 	wypin	result1, local01
1b618     E7 F0 03 F6 | 	mov	ptra, fp
1b61c     F2 00 A0 FD | 	call	#popregs_
1b620                 | _do_wypin_ret
1b620     2D 00 64 FD | 	ret
1b624                 | 
1b624                 | ' 
1b624                 | ' 
1b624                 | ' 
1b624                 | ' 
1b624                 | ' 
1b624                 | ' 
1b624                 | ' 
1b624                 | ' 
1b624                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1b624                 | ' '--------------------------------------- Runtime variable processing--------------------------------------------------------------------- 
1b624                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1b624                 | ' 
1b624                 | ' 
1b624                 | ' '------------------ Assign
1b624                 | ' 
1b624                 | ' sub do_assign
1b624                 | _do_assign
1b624     0E CA 05 F6 | 	mov	COUNT_, #14
1b628     E8 00 A0 FD | 	call	#pushregs_
1b62c     44 F0 07 F1 | 	add	ptra, #68
1b630     4C 00 00 FF 
1b634     24 64 06 F1 | 	add	objptr, ##38948
1b638     32 97 02 FB | 	rdlong	arg03, objptr
1b63c     4B 95 02 F6 | 	mov	arg02, arg03
1b640     01 94 66 F0 | 	shl	arg02, #1
1b644     4B 95 02 F1 | 	add	arg02, arg03
1b648     02 94 66 F0 | 	shl	arg02, #2
1b64c     03 00 00 FF 
1b650     04 64 86 F1 | 	sub	objptr, ##1540
1b654     32 95 02 F1 | 	add	arg02, objptr
1b658     4A AD 02 FB | 	rdlong	local04, arg02
1b65c                 | ' 
1b65c                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
1b65c                 | ' if variables(varnum).vartype<array_no_type then 
1b65c     56 97 02 F6 | 	mov	arg03, local04
1b660     04 96 66 F0 | 	shl	arg03, #4
1b664     32 00 00 FF 
1b668     84 64 86 F1 | 	sub	objptr, ##25732
1b66c     32 97 02 F1 | 	add	arg03, objptr
1b670     0C 96 06 F1 | 	add	arg03, #12
1b674     4B 97 02 FB | 	rdlong	arg03, arg03
1b678     00 97 16 F2 | 	cmp	arg03, #256 wc
1b67c     16 00 00 FF 
1b680     9C 65 86 F1 | 	sub	objptr, ##11676
1b684     F8 00 90 3D |  if_ae	jmp	#LR__2310
1b688     E4 1F BF FD | 	call	#_pop
1b68c     E7 7A 62 FC | 	wrlong	result1, fp
1b690     04 CE 05 F1 | 	add	fp, #4
1b694     E7 7C 62 FC | 	wrlong	result2, fp
1b698     04 CE 05 F1 | 	add	fp, #4
1b69c     E7 7E 62 FC | 	wrlong	result3, fp
1b6a0     08 CE 85 F1 | 	sub	fp, #8
1b6a4     E7 96 02 FB | 	rdlong	arg03, fp
1b6a8     04 CE 05 F1 | 	add	fp, #4
1b6ac     E7 94 02 FB | 	rdlong	arg02, fp
1b6b0     56 93 02 F6 | 	mov	arg01, local04
1b6b4     04 92 66 F0 | 	shl	arg01, #4
1b6b8     16 00 00 FF 
1b6bc     9C 65 06 F1 | 	add	objptr, ##11676
1b6c0     32 93 02 F1 | 	add	arg01, objptr
1b6c4     04 92 06 F1 | 	add	arg01, #4
1b6c8     49 97 62 FC | 	wrlong	arg03, arg01
1b6cc     56 97 02 F6 | 	mov	arg03, local04
1b6d0     04 96 66 F0 | 	shl	arg03, #4
1b6d4     32 97 02 F1 | 	add	arg03, objptr
1b6d8     08 96 06 F1 | 	add	arg03, #8
1b6dc     4B 95 62 FC | 	wrlong	arg02, arg03
1b6e0     56 97 02 F6 | 	mov	arg03, local04
1b6e4     04 96 66 F0 | 	shl	arg03, #4
1b6e8     32 97 02 F1 | 	add	arg03, objptr
1b6ec     04 CE 05 F1 | 	add	fp, #4
1b6f0     E7 94 02 FB | 	rdlong	arg02, fp
1b6f4     08 CE 85 F1 | 	sub	fp, #8
1b6f8     0C 96 06 F1 | 	add	arg03, #12
1b6fc     4B 95 62 FC | 	wrlong	arg02, arg03
1b700                 | '   t1=pop() 
1b700                 | '   variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
1b700                 | '   if variables(varnum).vartype<>result_string2 then return
1b700     56 97 02 F6 | 	mov	arg03, local04
1b704     04 96 66 F0 | 	shl	arg03, #4
1b708     32 97 02 F1 | 	add	arg03, objptr
1b70c     0C 96 06 F1 | 	add	arg03, #12
1b710     4B 97 02 FB | 	rdlong	arg03, arg03
1b714     2B 96 0E F2 | 	cmp	arg03, #43 wz
1b718     16 00 00 FF 
1b71c     9C 65 86 F1 | 	sub	objptr, ##11676
1b720     68 03 90 5D |  if_ne	jmp	#LR__2332
1b724     56 AF 02 F6 | 	mov	local05, local04
1b728     04 AE 66 F0 | 	shl	local05, #4
1b72c     16 00 00 FF 
1b730     9C 65 06 F1 | 	add	objptr, ##11676
1b734     32 AF 02 F1 | 	add	local05, objptr
1b738     56 97 02 F6 | 	mov	arg03, local04
1b73c     04 96 66 F0 | 	shl	arg03, #4
1b740     32 97 02 F1 | 	add	arg03, objptr
1b744     04 96 06 F1 | 	add	arg03, #4
1b748     4B 93 02 FB | 	rdlong	arg01, arg03
1b74c     16 00 00 FF 
1b750     9C 65 86 F1 | 	sub	objptr, ##11676
1b754     88 20 BF FD | 	call	#_convertstring
1b758     04 AE 06 F1 | 	add	local05, #4
1b75c     57 7B 62 FC | 	wrlong	result1, local05
1b760     04 AC 66 F0 | 	shl	local04, #4
1b764     32 AF 02 F6 | 	mov	local05, objptr
1b768     16 00 00 FF 
1b76c     9C AF 06 F1 | 	add	local05, ##11676
1b770     57 AD 02 F1 | 	add	local04, local05
1b774     0C AC 06 F1 | 	add	local04, #12
1b778     56 3F 68 FC | 	wrlong	#31, local04
1b77c                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
1b77c                 | '   variables(varnum).vartype=result_string
1b77c                 | '   return
1b77c     0C 03 90 FD | 	jmp	#LR__2332
1b780                 | LR__2310
1b780                 | ' for i=0 to 2 : arrid(i)=0 : next i
1b780     00 B0 06 F6 | 	mov	local06, #0
1b784                 | LR__2311
1b784     58 AF 02 F6 | 	mov	local05, local06
1b788     53 AF 06 F1 | 	add	local05, #local01
1b78c     00 B2 06 F6 | 	mov	local07, #0
1b790                 | 	'.live	local07
1b790                 | 	'.live	local05
1b790     00 AE 8E F9 | 	altd	local05, #0
1b794     59 AF 02 F6 | 	mov	local05, local07
1b798     01 B0 06 F1 | 	add	local06, #1
1b79c     03 B0 16 F2 | 	cmp	local06, #3 wc
1b7a0     E0 FF 9F CD |  if_b	jmp	#LR__2311
1b7a4     4C 00 00 FF 
1b7a8     24 64 06 F1 | 	add	objptr, ##38948
1b7ac     32 AF 02 FB | 	rdlong	local05, objptr
1b7b0     57 B1 02 F6 | 	mov	local06, local05
1b7b4     01 B0 66 F0 | 	shl	local06, #1
1b7b8     57 B1 02 F1 | 	add	local06, local05
1b7bc     02 B0 66 F0 | 	shl	local06, #2
1b7c0     03 00 00 FF 
1b7c4     04 64 86 F1 | 	sub	objptr, ##1540
1b7c8     32 B1 02 F1 | 	add	local06, objptr
1b7cc     04 B0 06 F1 | 	add	local06, #4
1b7d0     58 B1 02 FB | 	rdlong	local06, local06
1b7d4     49 00 00 FF 
1b7d8     20 64 86 F1 | 	sub	objptr, ##37408
1b7dc     90 1E BF FD | 	call	#_pop
1b7e0     3D B5 02 F6 | 	mov	local08, result1
1b7e4     3E B7 02 F6 | 	mov	local09, result2
1b7e8     3F AF 02 F6 | 	mov	local05, result3
1b7ec     E7 B4 62 FC | 	wrlong	local08, fp
1b7f0     04 CE 05 F1 | 	add	fp, #4
1b7f4     E7 B6 62 FC | 	wrlong	local09, fp
1b7f8     04 CE 05 F1 | 	add	fp, #4
1b7fc     E7 AE 62 FC | 	wrlong	local05, fp
1b800     08 CE 85 F1 | 	sub	fp, #8
1b804                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
1b804                 | ' t1=pop() ' var value
1b804                 | ' if numpar>0 then
1b804     01 B0 16 F2 | 	cmp	local06, #1 wc
1b808     50 00 90 CD |  if_b	jmp	#LR__2314
1b80c                 | '   for i=numpar to 1 step -1
1b80c     00 B0 4E F2 | 	cmps	local06, #0 wz
1b810     48 00 90 AD |  if_e	jmp	#LR__2313
1b814                 | LR__2312
1b814     58 1E BF FD | 	call	#_pop
1b818     0C CE 05 F1 | 	add	fp, #12
1b81c     E7 7A 62 FC | 	wrlong	result1, fp
1b820     04 CE 05 F1 | 	add	fp, #4
1b824     E7 7C 62 FC | 	wrlong	result2, fp
1b828     04 CE 05 F1 | 	add	fp, #4
1b82c     E7 7E 62 FC | 	wrlong	result3, fp
1b830     58 AF 02 F6 | 	mov	local05, local06
1b834     01 AE 86 F1 | 	sub	local05, #1
1b838     53 AF 06 F1 | 	add	local05, #local01
1b83c     08 CE 85 F1 | 	sub	fp, #8
1b840     E7 92 02 F6 | 	mov	arg01, fp
1b844     0C CE 85 F1 | 	sub	fp, #12
1b848     00 20 BF FD | 	call	#_converttoint
1b84c     3D B3 02 F6 | 	mov	local07, result1
1b850                 | 	'.live	local07
1b850                 | 	'.live	local05
1b850     00 AE 8E F9 | 	altd	local05, #0
1b854     59 AF 02 F6 | 	mov	local05, local07
1b858     EE B1 6E FB | 	djnz	local06, #LR__2312
1b85c                 | LR__2313
1b85c                 | LR__2314
1b85c     04 AC 66 F0 | 	shl	local04, #4
1b860     32 97 02 F6 | 	mov	arg03, objptr
1b864     16 00 00 FF 
1b868     9C 97 06 F1 | 	add	arg03, ##11676
1b86c     4B AD 02 F1 | 	add	local04, arg03
1b870     04 AC 06 F1 | 	add	local04, #4
1b874     56 B9 02 FB | 	rdlong	local10, local04
1b878     5C 93 02 F6 | 	mov	arg01, local10
1b87c     10 57 B0 FD | 	call	#_pslpeek
1b880     3D BB 32 F9 | 	getword	local11, result1, #0
1b884     5C 93 02 F6 | 	mov	arg01, local10
1b888     02 92 06 F1 | 	add	arg01, #2
1b88c     B8 56 B0 FD | 	call	#_pspeek
1b890     3D BD E2 F8 | 	getbyte	local12, result1, #0
1b894                 | ' esize=pspeek(arrptr+2)
1b894                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
1b894     5C 93 02 F6 | 	mov	arg01, local10
1b898     04 92 06 F1 | 	add	arg01, #4
1b89c     F0 56 B0 FD | 	call	#_pslpeek
1b8a0     3D A7 12 F2 | 	cmp	local01, result1 wc
1b8a4     28 00 90 3D |  if_ae	jmp	#LR__2315
1b8a8     5C 93 02 F6 | 	mov	arg01, local10
1b8ac     08 92 06 F1 | 	add	arg01, #8
1b8b0     DC 56 B0 FD | 	call	#_pslpeek
1b8b4     3D A9 12 F2 | 	cmp	local02, result1 wc
1b8b8     14 00 90 3D |  if_ae	jmp	#LR__2315
1b8bc     5C 93 02 F6 | 	mov	arg01, local10
1b8c0     0C 92 06 F1 | 	add	arg01, #12
1b8c4     C8 56 B0 FD | 	call	#_pslpeek
1b8c8     3D AB 12 F2 | 	cmp	local03, result1 wc
1b8cc     10 00 90 CD |  if_b	jmp	#LR__2316
1b8d0                 | LR__2315
1b8d0     31 92 06 F6 | 	mov	arg01, #49
1b8d4     00 94 06 F6 | 	mov	arg02, #0
1b8d8     F8 53 B0 FD | 	call	#_printerror
1b8dc     AC 01 90 FD | 	jmp	#LR__2332
1b8e0                 | LR__2316
1b8e0     5C BF 02 F6 | 	mov	local13, local10
1b8e4     10 BE 06 F1 | 	add	local13, #16
1b8e8     5C 93 02 F6 | 	mov	arg01, local10
1b8ec     04 92 06 F1 | 	add	arg01, #4
1b8f0     9C 56 B0 FD | 	call	#_pslpeek
1b8f4     54 7B 02 FD | 	qmul	result1, local02
1b8f8     53 B7 02 F6 | 	mov	local09, local01
1b8fc     5C 93 02 F6 | 	mov	arg01, local10
1b900     08 92 06 F1 | 	add	arg01, #8
1b904     18 B4 62 FD | 	getqx	local08
1b908     5A B7 02 F1 | 	add	local09, local08
1b90c     80 56 B0 FD | 	call	#_pslpeek
1b910     3D B3 02 F6 | 	mov	local07, result1
1b914     04 B8 06 F1 | 	add	local10, #4
1b918     5C 93 02 F6 | 	mov	arg01, local10
1b91c     70 56 B0 FD | 	call	#_pslpeek
1b920     3D B3 02 FD | 	qmul	local07, result1
1b924     18 B8 62 FD | 	getqx	local10
1b928     55 B9 02 FD | 	qmul	local10, local03
1b92c     18 A6 62 FD | 	getqx	local01
1b930     53 B7 02 F1 | 	add	local09, local01
1b934     5B BD 02 FD | 	qmul	local12, local09
1b938                 | ' 
1b938                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
1b938                 | ' select case arrtype
1b938     5D C1 02 F6 | 	mov	local14, local11
1b93c     00 C1 86 F1 | 	sub	local14, #256
1b940     0C C0 26 F3 | 	fle	local14, #12
1b944     18 A6 62 FD | 	getqx	local01
1b948     53 BF 02 F1 | 	add	local13, local01
1b94c     30 C0 62 FD | 	jmprel	local14
1b950                 | LR__2317
1b950     30 00 90 FD | 	jmp	#LR__2318
1b954     50 00 90 FD | 	jmp	#LR__2319
1b958     5C 00 90 FD | 	jmp	#LR__2320
1b95c     68 00 90 FD | 	jmp	#LR__2321
1b960     88 00 90 FD | 	jmp	#LR__2322
1b964     A8 00 90 FD | 	jmp	#LR__2323
1b968     B4 00 90 FD | 	jmp	#LR__2324
1b96c     C0 00 90 FD | 	jmp	#LR__2325
1b970     CC 00 90 FD | 	jmp	#LR__2326
1b974     D8 00 90 FD | 	jmp	#LR__2327
1b978     E4 00 90 FD | 	jmp	#LR__2328
1b97c     F0 00 90 FD | 	jmp	#LR__2329
1b980     FC 00 90 FD | 	jmp	#LR__2330
1b984                 | LR__2318
1b984     E7 92 02 F6 | 	mov	arg01, fp
1b988     5F 95 02 F6 | 	mov	arg02, local13
1b98c     0C 96 06 F6 | 	mov	arg03, #12
1b990     0B 00 00 FF 
1b994     CC 64 06 F1 | 	add	objptr, ##5836
1b998     64 81 B0 FD | 	call	#_psram4_spin2_write
1b99c     0B 00 00 FF 
1b9a0     CC 64 86 F1 | 	sub	objptr, ##5836
1b9a4     E4 00 90 FD | 	jmp	#LR__2331
1b9a8                 | LR__2319
1b9a8     E7 94 02 FB | 	rdlong	arg02, fp
1b9ac     5F 93 02 F6 | 	mov	arg01, local13
1b9b0     4C 55 B0 FD | 	call	#_pspoke
1b9b4     D4 00 90 FD | 	jmp	#LR__2331
1b9b8                 | LR__2320
1b9b8     E7 94 02 FB | 	rdlong	arg02, fp
1b9bc     5F 93 02 F6 | 	mov	arg01, local13
1b9c0     3C 55 B0 FD | 	call	#_pspoke
1b9c4     C4 00 90 FD | 	jmp	#LR__2331
1b9c8                 | LR__2321
1b9c8     E7 94 02 FB | 	rdlong	arg02, fp
1b9cc     5F 93 02 F6 | 	mov	arg01, local13
1b9d0     2C 55 B0 FD | 	call	#_pspoke
1b9d4     01 BE 06 F1 | 	add	local13, #1
1b9d8     E7 94 02 FB | 	rdlong	arg02, fp
1b9dc     08 94 46 F0 | 	shr	arg02, #8
1b9e0     5F 93 02 F6 | 	mov	arg01, local13
1b9e4     18 55 B0 FD | 	call	#_pspoke
1b9e8     A0 00 90 FD | 	jmp	#LR__2331
1b9ec                 | LR__2322
1b9ec     E7 94 02 FB | 	rdlong	arg02, fp
1b9f0     5F 93 02 F6 | 	mov	arg01, local13
1b9f4     08 55 B0 FD | 	call	#_pspoke
1b9f8     01 BE 06 F1 | 	add	local13, #1
1b9fc     E7 94 02 FB | 	rdlong	arg02, fp
1ba00     08 94 46 F0 | 	shr	arg02, #8
1ba04     5F 93 02 F6 | 	mov	arg01, local13
1ba08     F4 54 B0 FD | 	call	#_pspoke
1ba0c     7C 00 90 FD | 	jmp	#LR__2331
1ba10                 | LR__2323
1ba10     E7 94 02 FB | 	rdlong	arg02, fp
1ba14     5F 93 02 F6 | 	mov	arg01, local13
1ba18     54 54 B0 FD | 	call	#_pslpoke
1ba1c     6C 00 90 FD | 	jmp	#LR__2331
1ba20                 | LR__2324
1ba20     E7 94 02 FB | 	rdlong	arg02, fp
1ba24     5F 93 02 F6 | 	mov	arg01, local13
1ba28     44 54 B0 FD | 	call	#_pslpoke
1ba2c     5C 00 90 FD | 	jmp	#LR__2331
1ba30                 | LR__2325
1ba30     E7 94 02 FB | 	rdlong	arg02, fp
1ba34     5F 93 02 F6 | 	mov	arg01, local13
1ba38     34 54 B0 FD | 	call	#_pslpoke
1ba3c     4C 00 90 FD | 	jmp	#LR__2331
1ba40                 | LR__2326
1ba40     E7 94 02 FB | 	rdlong	arg02, fp
1ba44     5F 93 02 F6 | 	mov	arg01, local13
1ba48     24 54 B0 FD | 	call	#_pslpoke
1ba4c     3C 00 90 FD | 	jmp	#LR__2331
1ba50                 | LR__2327
1ba50     E7 94 02 FB | 	rdlong	arg02, fp
1ba54     5F 93 02 F6 | 	mov	arg01, local13
1ba58     14 54 B0 FD | 	call	#_pslpoke
1ba5c     2C 00 90 FD | 	jmp	#LR__2331
1ba60                 | LR__2328
1ba60     E7 94 02 FB | 	rdlong	arg02, fp
1ba64     5F 93 02 F6 | 	mov	arg01, local13
1ba68     04 54 B0 FD | 	call	#_pslpoke
1ba6c     1C 00 90 FD | 	jmp	#LR__2331
1ba70                 | LR__2329
1ba70     E7 94 02 FB | 	rdlong	arg02, fp
1ba74     5F 93 02 F6 | 	mov	arg01, local13
1ba78     F4 53 B0 FD | 	call	#_pslpoke
1ba7c     0C 00 90 FD | 	jmp	#LR__2331
1ba80                 | LR__2330
1ba80     32 92 06 F6 | 	mov	arg01, #50
1ba84     00 94 06 F6 | 	mov	arg02, #0
1ba88     48 52 B0 FD | 	call	#_printerror
1ba8c                 | LR__2331
1ba8c                 | LR__2332
1ba8c     E7 F0 03 F6 | 	mov	ptra, fp
1ba90     F2 00 A0 FD | 	call	#popregs_
1ba94                 | _do_assign_ret
1ba94     2D 00 64 FD | 	ret
1ba98                 | 
1ba98                 | ' 
1ba98                 | ' 
1ba98                 | ' '------------------ getvar.  Read a variable and push it to the RPN stack
1ba98                 | ' 
1ba98                 | ' sub do_getvar
1ba98                 | _do_getvar
1ba98     0D CA 05 F6 | 	mov	COUNT_, #13
1ba9c     E8 00 A0 FD | 	call	#pushregs_
1baa0     3C F0 07 F1 | 	add	ptra, #60
1baa4                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1baa4     4C 00 00 FF 
1baa8     24 64 06 F1 | 	add	objptr, ##38948
1baac     32 A7 02 FB | 	rdlong	local01, objptr
1bab0     53 97 02 F6 | 	mov	arg03, local01
1bab4     01 96 66 F0 | 	shl	arg03, #1
1bab8     53 97 02 F1 | 	add	arg03, local01
1babc     02 96 66 F0 | 	shl	arg03, #2
1bac0     03 00 00 FF 
1bac4     04 64 86 F1 | 	sub	objptr, ##1540
1bac8     32 97 02 F1 | 	add	arg03, objptr
1bacc     04 96 06 F1 | 	add	arg03, #4
1bad0     4B 97 0A FB | 	rdlong	arg03, arg03 wz
1bad4     49 00 00 FF 
1bad8     20 64 86 F1 | 	sub	objptr, ##37408
1badc     C4 00 90 5D |  if_ne	jmp	#LR__2341
1bae0     4C 00 00 FF 
1bae4     24 64 06 F1 | 	add	objptr, ##38948
1bae8     32 A7 02 FB | 	rdlong	local01, objptr
1baec     53 93 02 F6 | 	mov	arg01, local01
1baf0     01 92 66 F0 | 	shl	arg01, #1
1baf4     53 93 02 F1 | 	add	arg01, local01
1baf8     02 92 66 F0 | 	shl	arg01, #2
1bafc     03 00 00 FF 
1bb00     04 64 86 F1 | 	sub	objptr, ##1540
1bb04     32 93 02 F1 | 	add	arg01, objptr
1bb08     49 A7 02 FB | 	rdlong	local01, arg01
1bb0c     04 A6 66 F0 | 	shl	local01, #4
1bb10     32 00 00 FF 
1bb14     84 64 86 F1 | 	sub	objptr, ##25732
1bb18     32 A7 02 F1 | 	add	local01, objptr
1bb1c     04 A6 06 F1 | 	add	local01, #4
1bb20     53 93 02 FB | 	rdlong	arg01, local01
1bb24     04 A6 06 F1 | 	add	local01, #4
1bb28     53 A7 02 FB | 	rdlong	local01, local01
1bb2c     E7 92 62 FC | 	wrlong	arg01, fp
1bb30     04 CE 05 F1 | 	add	fp, #4
1bb34     E7 A6 62 FC | 	wrlong	local01, fp
1bb38     35 00 00 FF 
1bb3c     88 64 06 F1 | 	add	objptr, ##27272
1bb40     32 A7 02 FB | 	rdlong	local01, objptr
1bb44     53 93 02 F6 | 	mov	arg01, local01
1bb48     01 92 66 F0 | 	shl	arg01, #1
1bb4c     53 93 02 F1 | 	add	arg01, local01
1bb50     02 92 66 F0 | 	shl	arg01, #2
1bb54     03 00 00 FF 
1bb58     04 64 86 F1 | 	sub	objptr, ##1540
1bb5c     32 93 02 F1 | 	add	arg01, objptr
1bb60     49 A7 02 FB | 	rdlong	local01, arg01
1bb64     04 A6 66 F0 | 	shl	local01, #4
1bb68     32 00 00 FF 
1bb6c     84 64 86 F1 | 	sub	objptr, ##25732
1bb70     32 A7 02 F1 | 	add	local01, objptr
1bb74     0C A6 06 F1 | 	add	local01, #12
1bb78     53 A7 02 FB | 	rdlong	local01, local01
1bb7c     04 CE 05 F1 | 	add	fp, #4
1bb80     E7 A6 62 FC | 	wrlong	local01, fp
1bb84                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
1bb84                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1bb84                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
1bb84     08 CE 85 F1 | 	sub	fp, #8
1bb88     00 A7 16 F2 | 	cmp	local01, #256 wc
1bb8c     16 00 00 FF 
1bb90     9C 65 86 F1 | 	sub	objptr, ##11676
1bb94     0C 00 90 3D |  if_ae	jmp	#LR__2340
1bb98     E7 92 02 F6 | 	mov	arg01, fp
1bb9c     60 1B BF FD | 	call	#_push
1bba0     94 03 90 FD | 	jmp	#LR__2362
1bba4                 | LR__2340
1bba4                 | LR__2341
1bba4     4C 00 00 FF 
1bba8     24 64 06 F1 | 	add	objptr, ##38948
1bbac     32 97 02 FB | 	rdlong	arg03, objptr
1bbb0     4B 95 02 F6 | 	mov	arg02, arg03
1bbb4     01 94 66 F0 | 	shl	arg02, #1
1bbb8     4B 95 02 F1 | 	add	arg02, arg03
1bbbc     02 94 66 F0 | 	shl	arg02, #2
1bbc0     03 00 00 FF 
1bbc4     04 64 86 F1 | 	sub	objptr, ##1540
1bbc8     32 95 02 F1 | 	add	arg02, objptr
1bbcc     4A 97 02 FB | 	rdlong	arg03, arg02
1bbd0     04 96 66 F0 | 	shl	arg03, #4
1bbd4     32 00 00 FF 
1bbd8     84 64 86 F1 | 	sub	objptr, ##25732
1bbdc     32 97 02 F1 | 	add	arg03, objptr
1bbe0     04 96 06 F1 | 	add	arg03, #4
1bbe4     4B A9 02 FB | 	rdlong	local02, arg03
1bbe8     54 93 02 F6 | 	mov	arg01, local02
1bbec     16 00 00 FF 
1bbf0     9C 65 86 F1 | 	sub	objptr, ##11676
1bbf4     98 53 B0 FD | 	call	#_pslpeek
1bbf8     3D AB 32 F9 | 	getword	local03, result1, #0
1bbfc     4C 00 00 FF 
1bc00     24 64 06 F1 | 	add	objptr, ##38948
1bc04     32 97 02 FB | 	rdlong	arg03, objptr
1bc08     4B 95 02 F6 | 	mov	arg02, arg03
1bc0c     01 94 66 F0 | 	shl	arg02, #1
1bc10     4B 95 02 F1 | 	add	arg02, arg03
1bc14     02 94 66 F0 | 	shl	arg02, #2
1bc18     03 00 00 FF 
1bc1c     04 64 86 F1 | 	sub	objptr, ##1540
1bc20     32 95 02 F1 | 	add	arg02, objptr
1bc24     04 94 06 F1 | 	add	arg02, #4
1bc28     4A AD 02 FB | 	rdlong	local04, arg02
1bc2c     54 93 02 F6 | 	mov	arg01, local02
1bc30     02 92 06 F1 | 	add	arg01, #2
1bc34     49 00 00 FF 
1bc38     20 64 86 F1 | 	sub	objptr, ##37408
1bc3c     08 53 B0 FD | 	call	#_pspeek
1bc40     3D AF E2 F8 | 	getbyte	local05, result1, #0
1bc44     54 93 02 F6 | 	mov	arg01, local02
1bc48     04 92 06 F1 | 	add	arg01, #4
1bc4c     40 53 B0 FD | 	call	#_pslpeek
1bc50     3D B1 02 F6 | 	mov	local06, result1
1bc54     54 93 02 F6 | 	mov	arg01, local02
1bc58     08 92 06 F1 | 	add	arg01, #8
1bc5c     30 53 B0 FD | 	call	#_pslpeek
1bc60     3D B3 02 F6 | 	mov	local07, result1
1bc64     54 93 02 F6 | 	mov	arg01, local02
1bc68     0C 92 06 F1 | 	add	arg01, #12
1bc6c     20 53 B0 FD | 	call	#_pslpeek
1bc70                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1bc70                 | ' esize=pspeek(arrptr+2)
1bc70                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1bc70                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1bc70                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1bc70                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1bc70     03 AC 16 F2 | 	cmp	local04, #3 wc
1bc74     30 00 90 CD |  if_b	jmp	#LR__2342
1bc78     F4 19 BF FD | 	call	#_pop
1bc7c     3F 97 02 F6 | 	mov	arg03, result3
1bc80     E7 7A 62 FC | 	wrlong	result1, fp
1bc84     04 CE 05 F1 | 	add	fp, #4
1bc88     E7 7C 62 FC | 	wrlong	result2, fp
1bc8c     04 CE 05 F1 | 	add	fp, #4
1bc90     E7 96 62 FC | 	wrlong	arg03, fp
1bc94     08 CE 85 F1 | 	sub	fp, #8
1bc98     E7 92 02 F6 | 	mov	arg01, fp
1bc9c     AC 1B BF FD | 	call	#_converttoint
1bca0     3D B5 02 F6 | 	mov	local08, result1
1bca4     04 00 90 FD | 	jmp	#LR__2343
1bca8                 | LR__2342
1bca8     00 B4 06 F6 | 	mov	local08, #0
1bcac                 | LR__2343
1bcac                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1bcac     02 AC 16 F2 | 	cmp	local04, #2 wc
1bcb0     30 00 90 CD |  if_b	jmp	#LR__2344
1bcb4     B8 19 BF FD | 	call	#_pop
1bcb8     3F 97 02 F6 | 	mov	arg03, result3
1bcbc     E7 7A 62 FC | 	wrlong	result1, fp
1bcc0     04 CE 05 F1 | 	add	fp, #4
1bcc4     E7 7C 62 FC | 	wrlong	result2, fp
1bcc8     04 CE 05 F1 | 	add	fp, #4
1bccc     E7 96 62 FC | 	wrlong	arg03, fp
1bcd0     08 CE 85 F1 | 	sub	fp, #8
1bcd4     E7 92 02 F6 | 	mov	arg01, fp
1bcd8     70 1B BF FD | 	call	#_converttoint
1bcdc     3D B7 02 F6 | 	mov	local09, result1
1bce0     04 00 90 FD | 	jmp	#LR__2345
1bce4                 | LR__2344
1bce4     00 B6 06 F6 | 	mov	local09, #0
1bce8                 | LR__2345
1bce8                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1bce8     01 AC 16 F2 | 	cmp	local04, #1 wc
1bcec     30 00 90 CD |  if_b	jmp	#LR__2346
1bcf0     7C 19 BF FD | 	call	#_pop
1bcf4     3F AD 02 F6 | 	mov	local04, result3
1bcf8     E7 7A 62 FC | 	wrlong	result1, fp
1bcfc     04 CE 05 F1 | 	add	fp, #4
1bd00     E7 7C 62 FC | 	wrlong	result2, fp
1bd04     04 CE 05 F1 | 	add	fp, #4
1bd08     E7 AC 62 FC | 	wrlong	local04, fp
1bd0c     08 CE 85 F1 | 	sub	fp, #8
1bd10     E7 92 02 F6 | 	mov	arg01, fp
1bd14     34 1B BF FD | 	call	#_converttoint
1bd18     3D B9 02 F6 | 	mov	local10, result1
1bd1c     04 00 90 FD | 	jmp	#LR__2347
1bd20                 | LR__2346
1bd20     00 B8 06 F6 | 	mov	local10, #0
1bd24                 | LR__2347
1bd24     58 B7 02 FD | 	qmul	local09, local06
1bd28     54 BB 02 F6 | 	mov	local11, local02
1bd2c     10 BA 06 F1 | 	add	local11, #16
1bd30     5C BD 02 F6 | 	mov	local12, local10
1bd34     18 B8 62 FD | 	getqx	local10
1bd38     58 B5 02 FD | 	qmul	local08, local06
1bd3c     5C BD 02 F1 | 	add	local12, local10
1bd40     18 B8 62 FD | 	getqx	local10
1bd44     59 B9 02 FD | 	qmul	local10, local07
1bd48     18 B8 62 FD | 	getqx	local10
1bd4c     5C BD 02 F1 | 	add	local12, local10
1bd50     57 BD 02 FD | 	qmul	local12, local05
1bd54                 | ' 
1bd54                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize 
1bd54                 | ' 
1bd54                 | ' select case vartype
1bd54     55 BF 02 F6 | 	mov	local13, local03
1bd58     00 BF 86 F1 | 	sub	local13, #256
1bd5c     0C BE 26 F3 | 	fle	local13, #12
1bd60     18 B8 62 FD | 	getqx	local10
1bd64     5C BB 02 F1 | 	add	local11, local10
1bd68     30 BE 62 FD | 	jmprel	local13
1bd6c                 | LR__2348
1bd6c     30 00 90 FD | 	jmp	#LR__2349
1bd70     50 00 90 FD | 	jmp	#LR__2350
1bd74     80 00 90 FD | 	jmp	#LR__2351
1bd78     9C 00 90 FD | 	jmp	#LR__2352
1bd7c     D4 00 90 FD | 	jmp	#LR__2353
1bd80     F0 00 90 FD | 	jmp	#LR__2354
1bd84     08 01 90 FD | 	jmp	#LR__2355
1bd88     20 01 90 FD | 	jmp	#LR__2356
1bd8c     30 01 90 FD | 	jmp	#LR__2357
1bd90     40 01 90 FD | 	jmp	#LR__2358
1bd94     58 01 90 FD | 	jmp	#LR__2359
1bd98     68 01 90 FD | 	jmp	#LR__2360
1bd9c     90 01 90 FD | 	jmp	#LR__2361
1bda0                 | LR__2349
1bda0     E7 92 02 F6 | 	mov	arg01, fp
1bda4     5D 95 02 F6 | 	mov	arg02, local11
1bda8     0C 96 06 F6 | 	mov	arg03, #12
1bdac     0B 00 00 FF 
1bdb0     CC 64 06 F1 | 	add	objptr, ##5836
1bdb4     AC 7C B0 FD | 	call	#_psram4_spin2_read1
1bdb8     0B 00 00 FF 
1bdbc     CC 64 86 F1 | 	sub	objptr, ##5836
1bdc0     6C 01 90 FD | 	jmp	#LR__2361
1bdc4                 | LR__2350
1bdc4     08 CE 05 F1 | 	add	fp, #8
1bdc8     E7 38 68 FC | 	wrlong	#28, fp
1bdcc     08 CE 85 F1 | 	sub	fp, #8
1bdd0     5D 93 02 F6 | 	mov	arg01, local11
1bdd4     70 51 B0 FD | 	call	#_pspeek
1bdd8     3D 7B E2 F8 | 	getbyte	result1, result1, #0
1bddc     E7 7A 62 FC | 	wrlong	result1, fp
1bde0     80 7A 16 F2 | 	cmp	result1, #128 wc
1bde4     00 A7 66 36 |  if_ae	neg	local01, #256
1bde8     3D BD 02 36 |  if_ae	mov	local12, result1
1bdec     5E A7 42 35 |  if_ae	or	local01, local12
1bdf0     E7 A6 62 3C |  if_ae	wrlong	local01, fp
1bdf4     38 01 90 FD | 	jmp	#LR__2361
1bdf8                 | LR__2351
1bdf8     08 CE 05 F1 | 	add	fp, #8
1bdfc     E7 3A 68 FC | 	wrlong	#29, fp
1be00     08 CE 85 F1 | 	sub	fp, #8
1be04     5D 93 02 F6 | 	mov	arg01, local11
1be08     3C 51 B0 FD | 	call	#_pspeek
1be0c     3D 7B E2 F8 | 	getbyte	result1, result1, #0
1be10     E7 7A 62 FC | 	wrlong	result1, fp
1be14     18 01 90 FD | 	jmp	#LR__2361
1be18                 | LR__2352
1be18     08 CE 05 F1 | 	add	fp, #8
1be1c     E7 38 68 FC | 	wrlong	#28, fp
1be20     08 CE 85 F1 | 	sub	fp, #8
1be24     5D 93 02 F6 | 	mov	arg01, local11
1be28     64 51 B0 FD | 	call	#_pslpeek
1be2c     3D 7B 32 F9 | 	getword	result1, result1, #0
1be30     E7 7A 62 FC | 	wrlong	result1, fp
1be34     40 00 00 FF 
1be38     00 7A 16 F2 | 	cmp	result1, ##32768 wc
1be3c     FF 7F 00 3F 
1be40     00 A7 06 36 |  if_ae	mov	local01, ##16776960
1be44     3D BD 02 36 |  if_ae	mov	local12, result1
1be48     5E A7 42 35 |  if_ae	or	local01, local12
1be4c     E7 A6 62 3C |  if_ae	wrlong	local01, fp
1be50     DC 00 90 FD | 	jmp	#LR__2361
1be54                 | LR__2353
1be54     08 CE 05 F1 | 	add	fp, #8
1be58     E7 3A 68 FC | 	wrlong	#29, fp
1be5c     08 CE 85 F1 | 	sub	fp, #8
1be60     5D 93 02 F6 | 	mov	arg01, local11
1be64     28 51 B0 FD | 	call	#_pslpeek
1be68     3D 7B 32 F9 | 	getword	result1, result1, #0
1be6c     E7 7A 62 FC | 	wrlong	result1, fp
1be70     BC 00 90 FD | 	jmp	#LR__2361
1be74                 | LR__2354
1be74     08 CE 05 F1 | 	add	fp, #8
1be78     E7 38 68 FC | 	wrlong	#28, fp
1be7c     08 CE 85 F1 | 	sub	fp, #8
1be80     5D 93 02 F6 | 	mov	arg01, local11
1be84     08 51 B0 FD | 	call	#_pslpeek
1be88     E7 7A 62 FC | 	wrlong	result1, fp
1be8c     A0 00 90 FD | 	jmp	#LR__2361
1be90                 | LR__2355
1be90     08 CE 05 F1 | 	add	fp, #8
1be94     E7 3A 68 FC | 	wrlong	#29, fp
1be98     08 CE 85 F1 | 	sub	fp, #8
1be9c     5D 93 02 F6 | 	mov	arg01, local11
1bea0     EC 50 B0 FD | 	call	#_pslpeek
1bea4     E7 7A 62 FC | 	wrlong	result1, fp
1bea8     84 00 90 FD | 	jmp	#LR__2361
1beac                 | LR__2356
1beac     08 CE 05 F1 | 	add	fp, #8
1beb0     E7 FE 69 FC | 	wrlong	#255, fp
1beb4     08 CE 85 F1 | 	sub	fp, #8
1beb8     E7 60 68 FC | 	wrlong	#48, fp
1bebc     70 00 90 FD | 	jmp	#LR__2361
1bec0                 | LR__2357
1bec0     08 CE 05 F1 | 	add	fp, #8
1bec4     E7 FE 69 FC | 	wrlong	#255, fp
1bec8     08 CE 85 F1 | 	sub	fp, #8
1becc     E7 60 68 FC | 	wrlong	#48, fp
1bed0     5C 00 90 FD | 	jmp	#LR__2361
1bed4                 | LR__2358
1bed4     08 CE 05 F1 | 	add	fp, #8
1bed8     E7 3C 68 FC | 	wrlong	#30, fp
1bedc     08 CE 85 F1 | 	sub	fp, #8
1bee0     5D 93 02 F6 | 	mov	arg01, local11
1bee4     A8 50 B0 FD | 	call	#_pslpeek
1bee8     E7 7A 62 FC | 	wrlong	result1, fp
1beec     40 00 90 FD | 	jmp	#LR__2361
1bef0                 | LR__2359
1bef0     08 CE 05 F1 | 	add	fp, #8
1bef4     E7 FE 69 FC | 	wrlong	#255, fp
1bef8     08 CE 85 F1 | 	sub	fp, #8
1befc     E7 60 68 FC | 	wrlong	#48, fp
1bf00     2C 00 90 FD | 	jmp	#LR__2361
1bf04                 | LR__2360
1bf04     08 CE 05 F1 | 	add	fp, #8
1bf08     E7 3E 68 FC | 	wrlong	#31, fp
1bf0c     08 CE 85 F1 | 	sub	fp, #8
1bf10     5D 93 02 F6 | 	mov	arg01, local11
1bf14     78 50 B0 FD | 	call	#_pslpeek
1bf18     E7 7A 62 FC | 	wrlong	result1, fp
1bf1c     00 04 00 FF 
1bf20     00 7A 16 F2 | 	cmp	result1, ##524288 wc
1bf24     08 CE 05 31 |  if_ae	add	fp, #8
1bf28     E7 56 68 3C |  if_ae	wrlong	#43, fp
1bf2c     08 CE 85 31 |  if_ae	sub	fp, #8
1bf30                 | LR__2361
1bf30     E7 92 02 F6 | 	mov	arg01, fp
1bf34     C8 17 BF FD | 	call	#_push
1bf38                 | LR__2362
1bf38     E7 F0 03 F6 | 	mov	ptra, fp
1bf3c     F2 00 A0 FD | 	call	#popregs_
1bf40                 | _do_getvar_ret
1bf40     2D 00 64 FD | 	ret
1bf44                 | 
1bf44                 | ' 
1bf44                 | ' '------------------ getaddr.  Get a pointer to a variable and push it to the RPN stack
1bf44                 | ' 
1bf44                 | ' sub do_getaddr
1bf44                 | _do_getaddr
1bf44     09 CA 05 F6 | 	mov	COUNT_, #9
1bf48     E8 00 A0 FD | 	call	#pushregs_
1bf4c     38 F0 07 F1 | 	add	ptra, #56
1bf50                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
1bf50                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1bf50     4C 00 00 FF 
1bf54     24 64 06 F1 | 	add	objptr, ##38948
1bf58     32 93 02 FB | 	rdlong	arg01, objptr
1bf5c     49 7D 02 F6 | 	mov	result2, arg01
1bf60     01 7C 66 F0 | 	shl	result2, #1
1bf64     49 7D 02 F1 | 	add	result2, arg01
1bf68     02 7C 66 F0 | 	shl	result2, #2
1bf6c     03 00 00 FF 
1bf70     04 64 86 F1 | 	sub	objptr, ##1540
1bf74     32 7D 02 F1 | 	add	result2, objptr
1bf78     04 7C 06 F1 | 	add	result2, #4
1bf7c     3E 7D 0A FB | 	rdlong	result2, result2 wz
1bf80     49 00 00 FF 
1bf84     20 64 86 F1 | 	sub	objptr, ##37408
1bf88     10 01 90 5D |  if_ne	jmp	#LR__2370
1bf8c     4C 00 00 FF 
1bf90     24 64 06 F1 | 	add	objptr, ##38948
1bf94     32 93 02 FB | 	rdlong	arg01, objptr
1bf98     49 7D 02 F6 | 	mov	result2, arg01
1bf9c     01 7C 66 F0 | 	shl	result2, #1
1bfa0     49 7D 02 F1 | 	add	result2, arg01
1bfa4     02 7C 66 F0 | 	shl	result2, #2
1bfa8     03 00 00 FF 
1bfac     04 64 86 F1 | 	sub	objptr, ##1540
1bfb0     32 7D 02 F1 | 	add	result2, objptr
1bfb4     3E 93 02 FB | 	rdlong	arg01, result2
1bfb8     04 92 66 F0 | 	shl	arg01, #4
1bfbc     32 00 00 FF 
1bfc0     84 64 86 F1 | 	sub	objptr, ##25732
1bfc4     32 93 02 F1 | 	add	arg01, objptr
1bfc8     0C 92 06 F1 | 	add	arg01, #12
1bfcc     49 93 02 FB | 	rdlong	arg01, arg01
1bfd0     08 CE 05 F1 | 	add	fp, #8
1bfd4     E7 92 62 FC | 	wrlong	arg01, fp
1bfd8                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1bfd8                 | '    if t1.result_type>=array_no_type then goto 2200
1bfd8     08 CE 85 F1 | 	sub	fp, #8
1bfdc     00 93 16 F2 | 	cmp	arg01, #256 wc
1bfe0     16 00 00 FF 
1bfe4     9C 65 86 F1 | 	sub	objptr, ##11676
1bfe8     B0 00 90 3D |  if_ae	jmp	#LR__2371
1bfec     4C 00 00 FF 
1bff0     24 64 06 F1 | 	add	objptr, ##38948
1bff4     32 93 02 FB | 	rdlong	arg01, objptr
1bff8     49 7F 02 F6 | 	mov	result3, arg01
1bffc     01 7E 66 F0 | 	shl	result3, #1
1c000     49 7F 02 F1 | 	add	result3, arg01
1c004     02 7E 66 F0 | 	shl	result3, #2
1c008     03 00 00 FF 
1c00c     04 64 86 F1 | 	sub	objptr, ##1540
1c010     32 7F 02 F1 | 	add	result3, objptr
1c014     3F 7B 02 FB | 	rdlong	result1, result3
1c018     04 7A 66 F0 | 	shl	result1, #4
1c01c     32 00 00 FF 
1c020     84 64 86 F1 | 	sub	objptr, ##25732
1c024     32 7B 02 F1 | 	add	result1, objptr
1c028     04 7A 06 F1 | 	add	result1, #4
1c02c     E7 7A 62 FC | 	wrlong	result1, fp
1c030     35 00 00 FF 
1c034     88 64 06 F1 | 	add	objptr, ##27272
1c038     32 7F 02 FB | 	rdlong	result3, objptr
1c03c     3F 93 02 F6 | 	mov	arg01, result3
1c040     01 92 66 F0 | 	shl	arg01, #1
1c044     3F 93 02 F1 | 	add	arg01, result3
1c048     02 92 66 F0 | 	shl	arg01, #2
1c04c     03 00 00 FF 
1c050     04 64 86 F1 | 	sub	objptr, ##1540
1c054     32 93 02 F1 | 	add	arg01, objptr
1c058     49 93 02 FB | 	rdlong	arg01, arg01
1c05c     04 92 66 F0 | 	shl	arg01, #4
1c060     32 00 00 FF 
1c064     84 64 86 F1 | 	sub	objptr, ##25732
1c068     32 93 02 F1 | 	add	arg01, objptr
1c06c     0C 92 06 F1 | 	add	arg01, #12
1c070     49 93 02 FB | 	rdlong	arg01, arg01
1c074     04 CE 05 F1 | 	add	fp, #4
1c078     E7 92 62 FC | 	wrlong	arg01, fp
1c07c     04 CE 05 F1 | 	add	fp, #4
1c080     E7 3A 68 FC | 	wrlong	#29, fp
1c084     08 CE 85 F1 | 	sub	fp, #8
1c088     E7 92 02 F6 | 	mov	arg01, fp
1c08c     16 00 00 FF 
1c090     9C 65 86 F1 | 	sub	objptr, ##11676
1c094     68 16 BF FD | 	call	#_push
1c098                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
1c098                 | '   t1.result.twowords(1)=variables(compiledline(lineptr_e).result.uresult).vartype
1c098                 | '   t1.result_type=result_uint
1c098                 | '   push t1 : return
1c098     24 02 90 FD | 	jmp	#LR__2380
1c09c                 | LR__2370
1c09c                 | LR__2371
1c09c     4C 00 00 FF 
1c0a0     24 64 06 F1 | 	add	objptr, ##38948
1c0a4     32 A7 02 FB | 	rdlong	local01, objptr
1c0a8     53 7D 02 F6 | 	mov	result2, local01
1c0ac     01 7C 66 F0 | 	shl	result2, #1
1c0b0     53 7D 02 F1 | 	add	result2, local01
1c0b4     02 7C 66 F0 | 	shl	result2, #2
1c0b8     03 00 00 FF 
1c0bc     04 64 86 F1 | 	sub	objptr, ##1540
1c0c0     32 7D 02 F1 | 	add	result2, objptr
1c0c4     3E 7D 02 FB | 	rdlong	result2, result2
1c0c8     04 7C 66 F0 | 	shl	result2, #4
1c0cc     32 00 00 FF 
1c0d0     84 64 86 F1 | 	sub	objptr, ##25732
1c0d4     32 7D 02 F1 | 	add	result2, objptr
1c0d8     04 7C 06 F1 | 	add	result2, #4
1c0dc     3E A9 02 FB | 	rdlong	local02, result2
1c0e0     53 93 02 F6 | 	mov	arg01, local01
1c0e4     01 92 66 F0 | 	shl	arg01, #1
1c0e8     53 93 02 F1 | 	add	arg01, local01
1c0ec     02 92 66 F0 | 	shl	arg01, #2
1c0f0     32 00 00 FF 
1c0f4     84 64 06 F1 | 	add	objptr, ##25732
1c0f8     32 93 02 F1 | 	add	arg01, objptr
1c0fc     49 93 02 FB | 	rdlong	arg01, arg01
1c100     04 92 66 F0 | 	shl	arg01, #4
1c104     32 00 00 FF 
1c108     84 64 86 F1 | 	sub	objptr, ##25732
1c10c     32 93 02 F1 | 	add	arg01, objptr
1c110     0C 92 06 F1 | 	add	arg01, #12
1c114     49 93 02 FB | 	rdlong	arg01, arg01
1c118     04 CE 05 F1 | 	add	fp, #4
1c11c     E7 92 62 FC | 	wrlong	arg01, fp
1c120     04 CE 85 F1 | 	sub	fp, #4
1c124     54 93 02 F6 | 	mov	arg01, local02
1c128     16 00 00 FF 
1c12c     9C 65 86 F1 | 	sub	objptr, ##11676
1c130     5C 4E B0 FD | 	call	#_pslpeek
1c134     4C 00 00 FF 
1c138     24 64 06 F1 | 	add	objptr, ##38948
1c13c     32 A7 02 FB | 	rdlong	local01, objptr
1c140     53 93 02 F6 | 	mov	arg01, local01
1c144     01 92 66 F0 | 	shl	arg01, #1
1c148     53 93 02 F1 | 	add	arg01, local01
1c14c     02 92 66 F0 | 	shl	arg01, #2
1c150     03 00 00 FF 
1c154     04 64 86 F1 | 	sub	objptr, ##1540
1c158     32 93 02 F1 | 	add	arg01, objptr
1c15c     04 92 06 F1 | 	add	arg01, #4
1c160     49 AB 02 FB | 	rdlong	local03, arg01
1c164     54 93 02 F6 | 	mov	arg01, local02
1c168     02 92 06 F1 | 	add	arg01, #2
1c16c     49 00 00 FF 
1c170     20 64 86 F1 | 	sub	objptr, ##37408
1c174     D0 4D B0 FD | 	call	#_pspeek
1c178     3D AD E2 F8 | 	getbyte	local04, result1, #0
1c17c     54 93 02 F6 | 	mov	arg01, local02
1c180     04 92 06 F1 | 	add	arg01, #4
1c184     08 4E B0 FD | 	call	#_pslpeek
1c188     3D AF 02 F6 | 	mov	local05, result1
1c18c     54 93 02 F6 | 	mov	arg01, local02
1c190     08 92 06 F1 | 	add	arg01, #8
1c194     F8 4D B0 FD | 	call	#_pslpeek
1c198     3D B1 02 F6 | 	mov	local06, result1
1c19c     54 93 02 F6 | 	mov	arg01, local02
1c1a0     0C 92 06 F1 | 	add	arg01, #12
1c1a4     E8 4D B0 FD | 	call	#_pslpeek
1c1a8                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1c1a8                 | ' esize=pspeek(arrptr+2)
1c1a8                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1c1a8                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1c1a8                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1c1a8                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1c1a8     03 AA 16 F2 | 	cmp	local03, #3 wc
1c1ac     30 00 90 CD |  if_b	jmp	#LR__2372
1c1b0     BC 14 BF FD | 	call	#_pop
1c1b4     3F A7 02 F6 | 	mov	local01, result3
1c1b8     E7 7A 62 FC | 	wrlong	result1, fp
1c1bc     04 CE 05 F1 | 	add	fp, #4
1c1c0     E7 7C 62 FC | 	wrlong	result2, fp
1c1c4     04 CE 05 F1 | 	add	fp, #4
1c1c8     E7 A6 62 FC | 	wrlong	local01, fp
1c1cc     08 CE 85 F1 | 	sub	fp, #8
1c1d0     E7 92 02 F6 | 	mov	arg01, fp
1c1d4     74 16 BF FD | 	call	#_converttoint
1c1d8     3D B3 02 F6 | 	mov	local07, result1
1c1dc     04 00 90 FD | 	jmp	#LR__2373
1c1e0                 | LR__2372
1c1e0     00 B2 06 F6 | 	mov	local07, #0
1c1e4                 | LR__2373
1c1e4                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1c1e4     02 AA 16 F2 | 	cmp	local03, #2 wc
1c1e8     30 00 90 CD |  if_b	jmp	#LR__2374
1c1ec     80 14 BF FD | 	call	#_pop
1c1f0     3F A7 02 F6 | 	mov	local01, result3
1c1f4     E7 7A 62 FC | 	wrlong	result1, fp
1c1f8     04 CE 05 F1 | 	add	fp, #4
1c1fc     E7 7C 62 FC | 	wrlong	result2, fp
1c200     04 CE 05 F1 | 	add	fp, #4
1c204     E7 A6 62 FC | 	wrlong	local01, fp
1c208     08 CE 85 F1 | 	sub	fp, #8
1c20c     E7 92 02 F6 | 	mov	arg01, fp
1c210     38 16 BF FD | 	call	#_converttoint
1c214     3D B5 02 F6 | 	mov	local08, result1
1c218     04 00 90 FD | 	jmp	#LR__2375
1c21c                 | LR__2374
1c21c     00 B4 06 F6 | 	mov	local08, #0
1c220                 | LR__2375
1c220                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1c220     01 AA 16 F2 | 	cmp	local03, #1 wc
1c224     30 00 90 CD |  if_b	jmp	#LR__2376
1c228     44 14 BF FD | 	call	#_pop
1c22c     3F A7 02 F6 | 	mov	local01, result3
1c230     E7 7A 62 FC | 	wrlong	result1, fp
1c234     04 CE 05 F1 | 	add	fp, #4
1c238     E7 7C 62 FC | 	wrlong	result2, fp
1c23c     04 CE 05 F1 | 	add	fp, #4
1c240     E7 A6 62 FC | 	wrlong	local01, fp
1c244     08 CE 85 F1 | 	sub	fp, #8
1c248     E7 92 02 F6 | 	mov	arg01, fp
1c24c     FC 15 BF FD | 	call	#_converttoint
1c250     3D B7 02 F6 | 	mov	local09, result1
1c254     04 00 90 FD | 	jmp	#LR__2377
1c258                 | LR__2376
1c258     00 B6 06 F6 | 	mov	local09, #0
1c25c                 | LR__2377
1c25c                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
1c25c                 | ' if numpar>0 then
1c25c     01 AA 16 F2 | 	cmp	local03, #1 wc
1c260     44 00 90 CD |  if_b	jmp	#LR__2378
1c264     57 B5 02 FD | 	qmul	local08, local05
1c268     10 A8 06 F1 | 	add	local02, #16
1c26c     18 B4 62 FD | 	getqx	local08
1c270     57 B3 02 FD | 	qmul	local07, local05
1c274     5A B7 02 F1 | 	add	local09, local08
1c278     18 B4 62 FD | 	getqx	local08
1c27c     58 B5 02 FD | 	qmul	local08, local06
1c280     18 B4 62 FD | 	getqx	local08
1c284     5A B7 02 F1 | 	add	local09, local08
1c288     56 B7 02 FD | 	qmul	local09, local04
1c28c     08 CE 05 F1 | 	add	fp, #8
1c290     E7 3A 68 FC | 	wrlong	#29, fp
1c294     08 CE 85 F1 | 	sub	fp, #8
1c298     18 A6 62 FD | 	getqx	local01
1c29c     53 A9 02 F1 | 	add	local02, local01
1c2a0     E7 A8 62 FC | 	wrlong	local02, fp
1c2a4     10 00 90 FD | 	jmp	#LR__2379
1c2a8                 | LR__2378
1c2a8     08 CE 05 F1 | 	add	fp, #8
1c2ac     E7 3A 68 FC | 	wrlong	#29, fp
1c2b0     08 CE 85 F1 | 	sub	fp, #8
1c2b4     E7 A8 62 FC | 	wrlong	local02, fp
1c2b8                 | LR__2379
1c2b8     E7 92 02 F6 | 	mov	arg01, fp
1c2bc     40 14 BF FD | 	call	#_push
1c2c0                 | LR__2380
1c2c0     E7 F0 03 F6 | 	mov	ptra, fp
1c2c4     F2 00 A0 FD | 	call	#popregs_
1c2c8                 | _do_getaddr_ret
1c2c8     2D 00 64 FD | 	ret
1c2cc                 | 
1c2cc                 | ' 
1c2cc                 | ' 
1c2cc                 | ' 
1c2cc                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1c2cc                 | ' '--------------------------------------- Operators ------------------------------------------------------------------------------------- 
1c2cc                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1c2cc                 | ' 
1c2cc                 | ' '--------------------------------- AND 
1c2cc                 | ' 
1c2cc                 | ' sub do_and 
1c2cc                 | _do_and
1c2cc     05 CA 05 F6 | 	mov	COUNT_, #5
1c2d0     E8 00 A0 FD | 	call	#pushregs_
1c2d4     18 F0 07 F1 | 	add	ptra, #24
1c2d8     94 13 BF FD | 	call	#_pop
1c2dc     3D A7 02 F6 | 	mov	local01, result1
1c2e0     3E 93 02 F6 | 	mov	arg01, result2
1c2e4     3F AD 02 F6 | 	mov	local04, result3
1c2e8     49 A9 02 F6 | 	mov	local02, arg01
1c2ec     56 AB 02 F6 | 	mov	local03, local04
1c2f0     7C 13 BF FD | 	call	#_pop
1c2f4     3F AF 02 F6 | 	mov	local05, result3
1c2f8     E7 7A 62 FC | 	wrlong	result1, fp
1c2fc     04 CE 05 F1 | 	add	fp, #4
1c300     E7 7C 62 FC | 	wrlong	result2, fp
1c304     04 CE 05 F1 | 	add	fp, #4
1c308     E7 AE 62 FC | 	wrlong	local05, fp
1c30c                 | ' 
1c30c                 | ' t2=pop()
1c30c                 | ' t1=pop()
1c30c                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1c30c     08 CE 85 F1 | 	sub	fp, #8
1c310     1C AE 0E F2 | 	cmp	local05, #28 wz
1c314     E7 AE 02 AB |  if_e	rdlong	local05, fp
1c318     E7 AE 62 AC |  if_e	wrlong	local05, fp
1c31c     08 CE 05 A1 |  if_e	add	fp, #8
1c320     E7 3A 68 AC |  if_e	wrlong	#29, fp
1c324     08 CE 85 A1 |  if_e	sub	fp, #8
1c328                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1c328     1C AA 0E F2 | 	cmp	local03, #28 wz
1c32c     1D AA 06 A6 |  if_e	mov	local03, #29
1c330                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
1c330     08 CE 05 F1 | 	add	fp, #8
1c334     E7 AE 02 FB | 	rdlong	local05, fp
1c338     08 CE 85 F1 | 	sub	fp, #8
1c33c     1F AE 0E F2 | 	cmp	local05, #31 wz
1c340     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1c344     08 CE 05 51 |  if_ne	add	fp, #8
1c348     E7 AC 02 5B |  if_ne	rdlong	local04, fp
1c34c     08 CE 85 51 |  if_ne	sub	fp, #8
1c350     1E AC 0E 52 |  if_ne	cmp	local04, #30 wz
1c354     1E AA 0E 52 |  if_ne	cmp	local03, #30 wz
1c358     E7 0C 68 AC |  if_e	wrlong	#6, fp
1c35c     08 CE 05 A1 |  if_e	add	fp, #8
1c360     E7 FE 69 AC |  if_e	wrlong	#255, fp
1c364     08 CE 85 A1 |  if_e	sub	fp, #8
1c368     E7 AE 02 5B |  if_ne	rdlong	local05, fp
1c36c     53 AF 02 55 |  if_ne	and	local05, local01
1c370     E7 AE 62 5C |  if_ne	wrlong	local05, fp
1c374     E7 92 02 F6 | 	mov	arg01, fp
1c378     84 13 BF FD | 	call	#_push
1c37c     E7 F0 03 F6 | 	mov	ptra, fp
1c380     F2 00 A0 FD | 	call	#popregs_
1c384                 | _do_and_ret
1c384     2D 00 64 FD | 	ret
1c388                 | 
1c388                 | ' 
1c388                 | ' '--------------------------------- DIV (integer divide)
1c388                 | ' 
1c388                 | ' sub do_div 
1c388                 | _do_div
1c388     04 CA 05 F6 | 	mov	COUNT_, #4
1c38c     E8 00 A0 FD | 	call	#pushregs_
1c390     18 F0 07 F1 | 	add	ptra, #24
1c394     D8 12 BF FD | 	call	#_pop
1c398     3D A7 02 F6 | 	mov	local01, result1
1c39c     3E 11 03 F6 | 	mov	muldivb_, result2
1c3a0     3F 0F 03 F6 | 	mov	muldiva_, result3
1c3a4     88 A9 02 F6 | 	mov	local02, muldivb_
1c3a8     87 AB 02 F6 | 	mov	local03, muldiva_
1c3ac     C0 12 BF FD | 	call	#_pop
1c3b0     E7 7A 62 FC | 	wrlong	result1, fp
1c3b4     04 CE 05 F1 | 	add	fp, #4
1c3b8     E7 7C 62 FC | 	wrlong	result2, fp
1c3bc     04 CE 05 F1 | 	add	fp, #4
1c3c0     E7 7E 62 FC | 	wrlong	result3, fp
1c3c4                 | ' 
1c3c4                 | ' t2=pop()
1c3c4                 | ' t1=pop()
1c3c4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
1c3c4     08 CE 85 F1 | 	sub	fp, #8
1c3c8     1F 7E 0E F2 | 	cmp	result3, #31 wz
1c3cc     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1c3d0     E7 14 68 AC |  if_e	wrlong	#10, fp
1c3d4     08 CE 05 A1 |  if_e	add	fp, #8
1c3d8     E7 FE 69 AC |  if_e	wrlong	#255, fp
1c3dc     08 CE 85 A1 |  if_e	sub	fp, #8
1c3e0     14 01 90 AD |  if_e	jmp	#LR__2395
1c3e4                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1c3e4     08 CE 05 F1 | 	add	fp, #8
1c3e8     E7 10 03 FB | 	rdlong	muldivb_, fp
1c3ec     08 CE 85 F1 | 	sub	fp, #8
1c3f0     1E 10 0F F2 | 	cmp	muldivb_, #30 wz
1c3f4     1C 00 90 5D |  if_ne	jmp	#LR__2390
1c3f8     08 CE 05 F1 | 	add	fp, #8
1c3fc     E7 38 68 FC | 	wrlong	#28, fp
1c400     08 CE 85 F1 | 	sub	fp, #8
1c404     E7 92 02 FB | 	rdlong	arg01, fp
1c408     00 94 06 F6 | 	mov	arg02, #0
1c40c     60 B1 B0 FD | 	call	#__system___float_tointeger
1c410     E7 7A 62 FC | 	wrlong	result1, fp
1c414                 | LR__2390
1c414                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1c414     1E AA 0E F2 | 	cmp	local03, #30 wz
1c418     14 00 90 5D |  if_ne	jmp	#LR__2391
1c41c     1C AA 06 F6 | 	mov	local03, #28
1c420     53 93 02 F6 | 	mov	arg01, local01
1c424     00 94 06 F6 | 	mov	arg02, #0
1c428     44 B1 B0 FD | 	call	#__system___float_tointeger
1c42c     3D A7 02 F6 | 	mov	local01, result1
1c430                 | LR__2391
1c430     08 CE 05 F1 | 	add	fp, #8
1c434     E7 AC 02 FB | 	rdlong	local04, fp
1c438     08 CE 85 F1 | 	sub	fp, #8
1c43c     1D AC 0E F2 | 	cmp	local04, #29 wz
1c440     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1c444     E7 AC 02 AB |  if_e	rdlong	local04, fp
1c448     53 AD 12 AD |  if_e	qdiv	local04, local01
1c44c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
1c44c     18 AC 62 AD |  if_e	getqx	local04
1c450     E7 AC 62 AC |  if_e	wrlong	local04, fp
1c454     A0 00 90 AD |  if_e	jmp	#LR__2395
1c458                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
1c458     08 CE 05 F1 | 	add	fp, #8
1c45c     E7 AC 02 FB | 	rdlong	local04, fp
1c460     08 CE 85 F1 | 	sub	fp, #8
1c464     1D AC 0E F2 | 	cmp	local04, #29 wz
1c468     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1c46c     20 00 90 5D |  if_ne	jmp	#LR__2392
1c470     E7 AC 02 FB | 	rdlong	local04, fp
1c474     53 AD 12 FD | 	qdiv	local04, local01
1c478     18 AC 62 FD | 	getqx	local04
1c47c     E7 AC 62 FC | 	wrlong	local04, fp
1c480     08 CE 05 F1 | 	add	fp, #8
1c484     E7 38 68 FC | 	wrlong	#28, fp
1c488     08 CE 85 F1 | 	sub	fp, #8
1c48c     68 00 90 FD | 	jmp	#LR__2395
1c490                 | LR__2392
1c490                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
1c490     08 CE 05 F1 | 	add	fp, #8
1c494     E7 AC 02 FB | 	rdlong	local04, fp
1c498     08 CE 85 F1 | 	sub	fp, #8
1c49c     1C AC 0E F2 | 	cmp	local04, #28 wz
1c4a0     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1c4a4     14 00 90 5D |  if_ne	jmp	#LR__2393
1c4a8     E7 0E 03 FB | 	rdlong	muldiva_, fp
1c4ac     53 11 03 F6 | 	mov	muldivb_, local01
1c4b0     FA 00 A0 FD | 	call	#divide_
1c4b4     E7 10 63 FC | 	wrlong	muldivb_, fp
1c4b8     3C 00 90 FD | 	jmp	#LR__2395
1c4bc                 | LR__2393
1c4bc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
1c4bc     08 CE 05 F1 | 	add	fp, #8
1c4c0     E7 AC 02 FB | 	rdlong	local04, fp
1c4c4     08 CE 85 F1 | 	sub	fp, #8
1c4c8     1C AC 0E F2 | 	cmp	local04, #28 wz
1c4cc     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1c4d0     14 00 90 5D |  if_ne	jmp	#LR__2394
1c4d4     E7 0E 03 FB | 	rdlong	muldiva_, fp
1c4d8     53 11 03 F6 | 	mov	muldivb_, local01
1c4dc     FA 00 A0 FD | 	call	#divide_
1c4e0     E7 10 63 FC | 	wrlong	muldivb_, fp
1c4e4     10 00 90 FD | 	jmp	#LR__2395
1c4e8                 | LR__2394
1c4e8     E7 16 68 FC | 	wrlong	#11, fp
1c4ec     08 CE 05 F1 | 	add	fp, #8
1c4f0     E7 FE 69 FC | 	wrlong	#255, fp
1c4f4     08 CE 85 F1 | 	sub	fp, #8
1c4f8                 | LR__2395
1c4f8     E7 92 02 F6 | 	mov	arg01, fp
1c4fc     00 12 BF FD | 	call	#_push
1c500     E7 F0 03 F6 | 	mov	ptra, fp
1c504     F2 00 A0 FD | 	call	#popregs_
1c508                 | _do_div_ret
1c508     2D 00 64 FD | 	ret
1c50c                 | 
1c50c                 | ' 
1c50c                 | ' '--------------------------------- equal (=)
1c50c                 | ' 
1c50c                 | ' sub do_eq
1c50c                 | _do_eq
1c50c     07 CA 05 F6 | 	mov	COUNT_, #7
1c510     E8 00 A0 FD | 	call	#pushregs_
1c514     18 F0 07 F1 | 	add	ptra, #24
1c518     54 11 BF FD | 	call	#_pop
1c51c     3D A7 02 F6 | 	mov	local01, result1
1c520     3E AD 02 F6 | 	mov	local04, result2
1c524     3F AF 02 F6 | 	mov	local05, result3
1c528     56 A9 02 F6 | 	mov	local02, local04
1c52c     57 AB 02 F6 | 	mov	local03, local05
1c530     3C 11 BF FD | 	call	#_pop
1c534     3F AF 02 F6 | 	mov	local05, result3
1c538     E7 7A 62 FC | 	wrlong	result1, fp
1c53c     04 CE 05 F1 | 	add	fp, #4
1c540     E7 7C 62 FC | 	wrlong	result2, fp
1c544     04 CE 05 F1 | 	add	fp, #4
1c548     E7 AE 62 FC | 	wrlong	local05, fp
1c54c                 | ' 
1c54c                 | ' t2=pop()
1c54c                 | ' t1=pop()
1c54c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
1c54c     08 CE 85 F1 | 	sub	fp, #8
1c550     1F AE 0E F2 | 	cmp	local05, #31 wz
1c554     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1c558     20 00 90 5D |  if_ne	jmp	#LR__2400
1c55c     00 B0 06 F6 | 	mov	local06, #0
1c560     E7 92 02 FB | 	rdlong	arg01, fp
1c564     53 95 02 F6 | 	mov	arg02, local01
1c568     94 84 B0 FD | 	call	#__system___string_cmp
1c56c     00 7A 0E F2 | 	cmp	result1, #0 wz
1c570     00 B0 26 A6 |  if_e	not	local06, #0
1c574     E7 B0 62 FC | 	wrlong	local06, fp
1c578     04 03 90 FD | 	jmp	#LR__2413
1c57c                 | LR__2400
1c57c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
1c57c     08 CE 05 F1 | 	add	fp, #8
1c580     E7 B0 02 FB | 	rdlong	local06, fp
1c584     08 CE 85 F1 | 	sub	fp, #8
1c588     1E B0 0E F2 | 	cmp	local06, #30 wz
1c58c     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1c590     24 00 90 5D |  if_ne	jmp	#LR__2401
1c594     00 B0 06 F6 | 	mov	local06, #0
1c598     E7 92 02 FB | 	rdlong	arg01, fp
1c59c     53 95 02 F6 | 	mov	arg02, local01
1c5a0     01 96 06 F6 | 	mov	arg03, #1
1c5a4     34 AF B0 FD | 	call	#__system___float_cmp
1c5a8     00 7A 0E F2 | 	cmp	result1, #0 wz
1c5ac     00 B0 26 A6 |  if_e	not	local06, #0
1c5b0     E7 B0 62 FC | 	wrlong	local06, fp
1c5b4     C8 02 90 FD | 	jmp	#LR__2413
1c5b8                 | LR__2401
1c5b8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
1c5b8     08 CE 05 F1 | 	add	fp, #8
1c5bc     E7 B0 02 FB | 	rdlong	local06, fp
1c5c0     08 CE 85 F1 | 	sub	fp, #8
1c5c4     1E B0 0E F2 | 	cmp	local06, #30 wz
1c5c8     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1c5cc     3C 00 90 5D |  if_ne	jmp	#LR__2402
1c5d0     00 B0 06 F6 | 	mov	local06, #0
1c5d4     E7 AC 02 FB | 	rdlong	local04, fp
1c5d8     53 93 52 F6 | 	abs	arg01, local01 wc
1c5dc     1F B2 C6 C9 |  if_b	decod	local07, #31
1c5e0     00 B2 06 36 |  if_ae	mov	local07, #0
1c5e4     BC A6 B0 FD | 	call	#__system___float_fromuns
1c5e8     59 7B 62 F5 | 	xor	result1, local07
1c5ec     3D 95 02 F6 | 	mov	arg02, result1
1c5f0     56 93 02 F6 | 	mov	arg01, local04
1c5f4     01 96 06 F6 | 	mov	arg03, #1
1c5f8     E0 AE B0 FD | 	call	#__system___float_cmp
1c5fc     00 7A 0E F2 | 	cmp	result1, #0 wz
1c600     00 B0 26 A6 |  if_e	not	local06, #0
1c604     E7 B0 62 FC | 	wrlong	local06, fp
1c608     74 02 90 FD | 	jmp	#LR__2413
1c60c                 | LR__2402
1c60c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
1c60c     08 CE 05 F1 | 	add	fp, #8
1c610     E7 B0 02 FB | 	rdlong	local06, fp
1c614     08 CE 85 F1 | 	sub	fp, #8
1c618     1E B0 0E F2 | 	cmp	local06, #30 wz
1c61c     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1c620     30 00 90 5D |  if_ne	jmp	#LR__2403
1c624     00 B0 06 F6 | 	mov	local06, #0
1c628     E7 AC 02 FB | 	rdlong	local04, fp
1c62c     53 93 02 F6 | 	mov	arg01, local01
1c630     70 A6 B0 FD | 	call	#__system___float_fromuns
1c634     3D 95 02 F6 | 	mov	arg02, result1
1c638     56 93 02 F6 | 	mov	arg01, local04
1c63c     01 96 06 F6 | 	mov	arg03, #1
1c640     98 AE B0 FD | 	call	#__system___float_cmp
1c644     00 7A 0E F2 | 	cmp	result1, #0 wz
1c648     00 B0 26 A6 |  if_e	not	local06, #0
1c64c     E7 B0 62 FC | 	wrlong	local06, fp
1c650     2C 02 90 FD | 	jmp	#LR__2413
1c654                 | LR__2403
1c654                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
1c654     08 CE 05 F1 | 	add	fp, #8
1c658     E7 B0 02 FB | 	rdlong	local06, fp
1c65c     08 CE 85 F1 | 	sub	fp, #8
1c660     1C B0 0E F2 | 	cmp	local06, #28 wz
1c664     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1c668     3C 00 90 5D |  if_ne	jmp	#LR__2404
1c66c     00 B0 06 F6 | 	mov	local06, #0
1c670     E7 92 02 FB | 	rdlong	arg01, fp
1c674     49 93 52 F6 | 	abs	arg01, arg01 wc
1c678     1F B2 C6 C9 |  if_b	decod	local07, #31
1c67c     00 B2 06 36 |  if_ae	mov	local07, #0
1c680     20 A6 B0 FD | 	call	#__system___float_fromuns
1c684     59 7B 62 F5 | 	xor	result1, local07
1c688     3D 93 02 F6 | 	mov	arg01, result1
1c68c     53 95 02 F6 | 	mov	arg02, local01
1c690     01 96 06 F6 | 	mov	arg03, #1
1c694     44 AE B0 FD | 	call	#__system___float_cmp
1c698     00 7A 0E F2 | 	cmp	result1, #0 wz
1c69c     00 B0 26 A6 |  if_e	not	local06, #0
1c6a0     E7 B0 62 FC | 	wrlong	local06, fp
1c6a4     D8 01 90 FD | 	jmp	#LR__2413
1c6a8                 | LR__2404
1c6a8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
1c6a8     08 CE 05 F1 | 	add	fp, #8
1c6ac     E7 B0 02 FB | 	rdlong	local06, fp
1c6b0     08 CE 85 F1 | 	sub	fp, #8
1c6b4     1C B0 0E F2 | 	cmp	local06, #28 wz
1c6b8     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1c6bc     18 00 90 5D |  if_ne	jmp	#LR__2405
1c6c0     00 B0 06 F6 | 	mov	local06, #0
1c6c4     E7 AC 02 FB | 	rdlong	local04, fp
1c6c8     53 AD 0A F2 | 	cmp	local04, local01 wz
1c6cc     01 B0 66 A6 |  if_e	neg	local06, #1
1c6d0     E7 B0 62 FC | 	wrlong	local06, fp
1c6d4     A8 01 90 FD | 	jmp	#LR__2413
1c6d8                 | LR__2405
1c6d8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
1c6d8     08 CE 05 F1 | 	add	fp, #8
1c6dc     E7 B0 02 FB | 	rdlong	local06, fp
1c6e0     08 CE 85 F1 | 	sub	fp, #8
1c6e4     1C B0 0E F2 | 	cmp	local06, #28 wz
1c6e8     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1c6ec     18 00 90 5D |  if_ne	jmp	#LR__2406
1c6f0     00 B0 06 F6 | 	mov	local06, #0
1c6f4     E7 AC 02 FB | 	rdlong	local04, fp
1c6f8     53 AD 0A F2 | 	cmp	local04, local01 wz
1c6fc     01 B0 66 A6 |  if_e	neg	local06, #1
1c700     E7 B0 62 FC | 	wrlong	local06, fp
1c704     78 01 90 FD | 	jmp	#LR__2413
1c708                 | LR__2406
1c708                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
1c708     08 CE 05 F1 | 	add	fp, #8
1c70c     E7 B0 02 FB | 	rdlong	local06, fp
1c710     08 CE 85 F1 | 	sub	fp, #8
1c714     1D B0 0E F2 | 	cmp	local06, #29 wz
1c718     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1c71c     2C 00 90 5D |  if_ne	jmp	#LR__2407
1c720     00 B0 06 F6 | 	mov	local06, #0
1c724     E7 92 02 FB | 	rdlong	arg01, fp
1c728     78 A5 B0 FD | 	call	#__system___float_fromuns
1c72c     3D 93 02 F6 | 	mov	arg01, result1
1c730     53 95 02 F6 | 	mov	arg02, local01
1c734     01 96 06 F6 | 	mov	arg03, #1
1c738     A0 AD B0 FD | 	call	#__system___float_cmp
1c73c     00 7A 0E F2 | 	cmp	result1, #0 wz
1c740     00 B0 26 A6 |  if_e	not	local06, #0
1c744     E7 B0 62 FC | 	wrlong	local06, fp
1c748     34 01 90 FD | 	jmp	#LR__2413
1c74c                 | LR__2407
1c74c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
1c74c     08 CE 05 F1 | 	add	fp, #8
1c750     E7 B0 02 FB | 	rdlong	local06, fp
1c754     08 CE 85 F1 | 	sub	fp, #8
1c758     1D B0 0E F2 | 	cmp	local06, #29 wz
1c75c     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1c760     18 00 90 5D |  if_ne	jmp	#LR__2408
1c764     00 B0 06 F6 | 	mov	local06, #0
1c768     E7 AC 02 FB | 	rdlong	local04, fp
1c76c     53 AD 0A F2 | 	cmp	local04, local01 wz
1c770     01 B0 66 A6 |  if_e	neg	local06, #1
1c774     E7 B0 62 FC | 	wrlong	local06, fp
1c778     04 01 90 FD | 	jmp	#LR__2413
1c77c                 | LR__2408
1c77c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
1c77c     08 CE 05 F1 | 	add	fp, #8
1c780     E7 B0 02 FB | 	rdlong	local06, fp
1c784     08 CE 85 F1 | 	sub	fp, #8
1c788     1D B0 0E F2 | 	cmp	local06, #29 wz
1c78c     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1c790     18 00 90 5D |  if_ne	jmp	#LR__2409
1c794     00 B0 06 F6 | 	mov	local06, #0
1c798     E7 AC 02 FB | 	rdlong	local04, fp
1c79c     53 AD 0A F2 | 	cmp	local04, local01 wz
1c7a0     01 B0 66 A6 |  if_e	neg	local06, #1
1c7a4     E7 B0 62 FC | 	wrlong	local06, fp
1c7a8     D4 00 90 FD | 	jmp	#LR__2413
1c7ac                 | LR__2409
1c7ac                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
1c7ac     08 CE 05 F1 | 	add	fp, #8
1c7b0     E7 B0 02 FB | 	rdlong	local06, fp
1c7b4     08 CE 85 F1 | 	sub	fp, #8
1c7b8     2B B0 0E F2 | 	cmp	local06, #43 wz
1c7bc     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1c7c0     28 00 90 5D |  if_ne	jmp	#LR__2410
1c7c4     00 B0 06 F6 | 	mov	local06, #0
1c7c8     E7 92 02 FB | 	rdlong	arg01, fp
1c7cc     10 10 BF FD | 	call	#_convertstring
1c7d0     3D 93 02 F6 | 	mov	arg01, result1
1c7d4     53 95 02 F6 | 	mov	arg02, local01
1c7d8     24 82 B0 FD | 	call	#__system___string_cmp
1c7dc     00 7A 0E F2 | 	cmp	result1, #0 wz
1c7e0     00 B0 26 A6 |  if_e	not	local06, #0
1c7e4     E7 B0 62 FC | 	wrlong	local06, fp
1c7e8     94 00 90 FD | 	jmp	#LR__2413
1c7ec                 | LR__2410
1c7ec                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
1c7ec     08 CE 05 F1 | 	add	fp, #8
1c7f0     E7 B0 02 FB | 	rdlong	local06, fp
1c7f4     08 CE 85 F1 | 	sub	fp, #8
1c7f8     1F B0 0E F2 | 	cmp	local06, #31 wz
1c7fc     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1c800     2C 00 90 5D |  if_ne	jmp	#LR__2411
1c804     00 B0 06 F6 | 	mov	local06, #0
1c808     E7 AC 02 FB | 	rdlong	local04, fp
1c80c     53 93 02 F6 | 	mov	arg01, local01
1c810     CC 0F BF FD | 	call	#_convertstring
1c814     3D 95 02 F6 | 	mov	arg02, result1
1c818     56 93 02 F6 | 	mov	arg01, local04
1c81c     E0 81 B0 FD | 	call	#__system___string_cmp
1c820     00 7A 0E F2 | 	cmp	result1, #0 wz
1c824     00 B0 26 A6 |  if_e	not	local06, #0
1c828     E7 B0 62 FC | 	wrlong	local06, fp
1c82c     50 00 90 FD | 	jmp	#LR__2413
1c830                 | LR__2411
1c830                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
1c830     08 CE 05 F1 | 	add	fp, #8
1c834     E7 B0 02 FB | 	rdlong	local06, fp
1c838     08 CE 85 F1 | 	sub	fp, #8
1c83c     2B B0 0E F2 | 	cmp	local06, #43 wz
1c840     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1c844     34 00 90 5D |  if_ne	jmp	#LR__2412
1c848     00 B0 06 F6 | 	mov	local06, #0
1c84c     E7 92 02 FB | 	rdlong	arg01, fp
1c850     8C 0F BF FD | 	call	#_convertstring
1c854     3D AD 02 F6 | 	mov	local04, result1
1c858     53 93 02 F6 | 	mov	arg01, local01
1c85c     80 0F BF FD | 	call	#_convertstring
1c860     3D 95 02 F6 | 	mov	arg02, result1
1c864     56 93 02 F6 | 	mov	arg01, local04
1c868     94 81 B0 FD | 	call	#__system___string_cmp
1c86c     00 7A 0E F2 | 	cmp	result1, #0 wz
1c870     00 B0 26 A6 |  if_e	not	local06, #0
1c874     E7 B0 62 FC | 	wrlong	local06, fp
1c878     04 00 90 FD | 	jmp	#LR__2413
1c87c                 | LR__2412
1c87c     E7 00 68 FC | 	wrlong	#0, fp
1c880                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1c880                 | LR__2413
1c880     08 CE 05 F1 | 	add	fp, #8
1c884     E7 38 68 FC | 	wrlong	#28, fp
1c888     08 CE 85 F1 | 	sub	fp, #8
1c88c     E7 92 02 F6 | 	mov	arg01, fp
1c890     6C 0E BF FD | 	call	#_push
1c894     E7 F0 03 F6 | 	mov	ptra, fp
1c898     F2 00 A0 FD | 	call	#popregs_
1c89c                 | _do_eq_ret
1c89c     2D 00 64 FD | 	ret
1c8a0                 | 
1c8a0                 | ' 
1c8a0                 | ' '--------------------------------- fdiv (/) - float divide
1c8a0                 | ' 
1c8a0                 | ' sub do_fdiv 
1c8a0                 | _do_fdiv
1c8a0     04 CA 05 F6 | 	mov	COUNT_, #4
1c8a4     E8 00 A0 FD | 	call	#pushregs_
1c8a8     18 F0 07 F1 | 	add	ptra, #24
1c8ac     C0 0D BF FD | 	call	#_pop
1c8b0     3D A7 02 F6 | 	mov	local01, result1
1c8b4     3E 95 02 F6 | 	mov	arg02, result2
1c8b8     3F 93 02 F6 | 	mov	arg01, result3
1c8bc     4A A9 02 F6 | 	mov	local02, arg02
1c8c0     49 AB 02 F6 | 	mov	local03, arg01
1c8c4     A8 0D BF FD | 	call	#_pop
1c8c8     E7 7A 62 FC | 	wrlong	result1, fp
1c8cc     04 CE 05 F1 | 	add	fp, #4
1c8d0     E7 7C 62 FC | 	wrlong	result2, fp
1c8d4     04 CE 05 F1 | 	add	fp, #4
1c8d8     E7 7E 62 FC | 	wrlong	result3, fp
1c8dc                 | ' 
1c8dc                 | ' t2=pop()
1c8dc                 | ' t1=pop()
1c8dc                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
1c8dc     08 CE 85 F1 | 	sub	fp, #8
1c8e0     1F 7E 0E F2 | 	cmp	result3, #31 wz
1c8e4     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1c8e8     E7 14 68 AC |  if_e	wrlong	#10, fp
1c8ec     08 CE 05 A1 |  if_e	add	fp, #8
1c8f0     E7 FE 69 AC |  if_e	wrlong	#255, fp
1c8f4     08 CE 85 A1 |  if_e	sub	fp, #8
1c8f8     E0 00 90 AD |  if_e	jmp	#LR__2425
1c8fc                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1c8fc     08 CE 05 F1 | 	add	fp, #8
1c900     E7 94 02 FB | 	rdlong	arg02, fp
1c904     08 CE 85 F1 | 	sub	fp, #8
1c908     1C 94 0E F2 | 	cmp	arg02, #28 wz
1c90c     28 00 90 5D |  if_ne	jmp	#LR__2420
1c910     08 CE 05 F1 | 	add	fp, #8
1c914     E7 3C 68 FC | 	wrlong	#30, fp
1c918     08 CE 85 F1 | 	sub	fp, #8
1c91c     E7 92 02 FB | 	rdlong	arg01, fp
1c920     49 93 52 F6 | 	abs	arg01, arg01 wc
1c924     1F AC C6 C9 |  if_b	decod	local04, #31
1c928     00 AC 06 36 |  if_ae	mov	local04, #0
1c92c     74 A3 B0 FD | 	call	#__system___float_fromuns
1c930     56 7B 62 F5 | 	xor	result1, local04
1c934     E7 7A 62 FC | 	wrlong	result1, fp
1c938                 | LR__2420
1c938                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
1c938     08 CE 05 F1 | 	add	fp, #8
1c93c     E7 94 02 FB | 	rdlong	arg02, fp
1c940     08 CE 85 F1 | 	sub	fp, #8
1c944     1D 94 0E F2 | 	cmp	arg02, #29 wz
1c948     18 00 90 5D |  if_ne	jmp	#LR__2421
1c94c     08 CE 05 F1 | 	add	fp, #8
1c950     E7 3C 68 FC | 	wrlong	#30, fp
1c954     08 CE 85 F1 | 	sub	fp, #8
1c958     E7 92 02 FB | 	rdlong	arg01, fp
1c95c     44 A3 B0 FD | 	call	#__system___float_fromuns
1c960     E7 7A 62 FC | 	wrlong	result1, fp
1c964                 | LR__2421
1c964                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1c964     1C AA 0E F2 | 	cmp	local03, #28 wz
1c968     1C 00 90 5D |  if_ne	jmp	#LR__2422
1c96c     1E AA 06 F6 | 	mov	local03, #30
1c970     53 93 52 F6 | 	abs	arg01, local01 wc
1c974     1F AC C6 C9 |  if_b	decod	local04, #31
1c978     00 AC 06 36 |  if_ae	mov	local04, #0
1c97c     24 A3 B0 FD | 	call	#__system___float_fromuns
1c980     56 7B 62 F5 | 	xor	result1, local04
1c984     3D A7 02 F6 | 	mov	local01, result1
1c988                 | LR__2422
1c988                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1c988     1D AA 0E F2 | 	cmp	local03, #29 wz
1c98c     10 00 90 5D |  if_ne	jmp	#LR__2423
1c990     1E AA 06 F6 | 	mov	local03, #30
1c994     53 93 02 F6 | 	mov	arg01, local01
1c998     08 A3 B0 FD | 	call	#__system___float_fromuns
1c99c     3D A7 02 F6 | 	mov	local01, result1
1c9a0                 | LR__2423
1c9a0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
1c9a0     08 CE 05 F1 | 	add	fp, #8
1c9a4     E7 94 02 FB | 	rdlong	arg02, fp
1c9a8     08 CE 85 F1 | 	sub	fp, #8
1c9ac     1E 94 0E F2 | 	cmp	arg02, #30 wz
1c9b0     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1c9b4     14 00 90 5D |  if_ne	jmp	#LR__2424
1c9b8     E7 92 02 FB | 	rdlong	arg01, fp
1c9bc     53 95 02 F6 | 	mov	arg02, local01
1c9c0     E8 A8 B0 FD | 	call	#__system___float_div
1c9c4     E7 7A 62 FC | 	wrlong	result1, fp
1c9c8     10 00 90 FD | 	jmp	#LR__2425
1c9cc                 | LR__2424
1c9cc     E7 16 68 FC | 	wrlong	#11, fp
1c9d0     08 CE 05 F1 | 	add	fp, #8
1c9d4     E7 FE 69 FC | 	wrlong	#255, fp
1c9d8     08 CE 85 F1 | 	sub	fp, #8
1c9dc                 | LR__2425
1c9dc     E7 92 02 F6 | 	mov	arg01, fp
1c9e0     1C 0D BF FD | 	call	#_push
1c9e4     E7 F0 03 F6 | 	mov	ptra, fp
1c9e8     F2 00 A0 FD | 	call	#popregs_
1c9ec                 | _do_fdiv_ret
1c9ec     2D 00 64 FD | 	ret
1c9f0                 | 
1c9f0                 | ' 
1c9f0                 | ' '--------------------------------- greater or equal (>=)
1c9f0                 | ' 
1c9f0                 | ' sub do_ge
1c9f0                 | _do_ge
1c9f0     07 CA 05 F6 | 	mov	COUNT_, #7
1c9f4     E8 00 A0 FD | 	call	#pushregs_
1c9f8     18 F0 07 F1 | 	add	ptra, #24
1c9fc     70 0C BF FD | 	call	#_pop
1ca00     3D A7 02 F6 | 	mov	local01, result1
1ca04     3E AD 02 F6 | 	mov	local04, result2
1ca08     3F AF 02 F6 | 	mov	local05, result3
1ca0c     56 A9 02 F6 | 	mov	local02, local04
1ca10     57 AB 02 F6 | 	mov	local03, local05
1ca14     58 0C BF FD | 	call	#_pop
1ca18     3F AF 02 F6 | 	mov	local05, result3
1ca1c     E7 7A 62 FC | 	wrlong	result1, fp
1ca20     04 CE 05 F1 | 	add	fp, #4
1ca24     E7 7C 62 FC | 	wrlong	result2, fp
1ca28     04 CE 05 F1 | 	add	fp, #4
1ca2c     E7 AE 62 FC | 	wrlong	local05, fp
1ca30                 | ' 
1ca30                 | ' t2=pop()
1ca30                 | ' t1=pop()
1ca30                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
1ca30     08 CE 85 F1 | 	sub	fp, #8
1ca34     1F AE 0E F2 | 	cmp	local05, #31 wz
1ca38     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1ca3c     20 00 90 5D |  if_ne	jmp	#LR__2430
1ca40     00 B0 06 F6 | 	mov	local06, #0
1ca44     E7 92 02 FB | 	rdlong	arg01, fp
1ca48     53 95 02 F6 | 	mov	arg02, local01
1ca4c     B0 7F B0 FD | 	call	#__system___string_cmp
1ca50     00 7A 56 F2 | 	cmps	result1, #0 wc
1ca54     00 B0 26 36 |  if_ae	not	local06, #0
1ca58     E7 B0 62 FC | 	wrlong	local06, fp
1ca5c     04 03 90 FD | 	jmp	#LR__2443
1ca60                 | LR__2430
1ca60                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
1ca60     08 CE 05 F1 | 	add	fp, #8
1ca64     E7 B0 02 FB | 	rdlong	local06, fp
1ca68     08 CE 85 F1 | 	sub	fp, #8
1ca6c     1E B0 0E F2 | 	cmp	local06, #30 wz
1ca70     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1ca74     24 00 90 5D |  if_ne	jmp	#LR__2431
1ca78     00 B0 06 F6 | 	mov	local06, #0
1ca7c     E7 92 02 FB | 	rdlong	arg01, fp
1ca80     53 95 02 F6 | 	mov	arg02, local01
1ca84     01 96 66 F6 | 	neg	arg03, #1
1ca88     50 AA B0 FD | 	call	#__system___float_cmp
1ca8c     00 7A 56 F2 | 	cmps	result1, #0 wc
1ca90     00 B0 26 36 |  if_ae	not	local06, #0
1ca94     E7 B0 62 FC | 	wrlong	local06, fp
1ca98     C8 02 90 FD | 	jmp	#LR__2443
1ca9c                 | LR__2431
1ca9c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
1ca9c     08 CE 05 F1 | 	add	fp, #8
1caa0     E7 B0 02 FB | 	rdlong	local06, fp
1caa4     08 CE 85 F1 | 	sub	fp, #8
1caa8     1E B0 0E F2 | 	cmp	local06, #30 wz
1caac     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1cab0     3C 00 90 5D |  if_ne	jmp	#LR__2432
1cab4     00 B0 06 F6 | 	mov	local06, #0
1cab8     E7 AC 02 FB | 	rdlong	local04, fp
1cabc     53 93 52 F6 | 	abs	arg01, local01 wc
1cac0     1F B2 C6 C9 |  if_b	decod	local07, #31
1cac4     00 B2 06 36 |  if_ae	mov	local07, #0
1cac8     D8 A1 B0 FD | 	call	#__system___float_fromuns
1cacc     59 7B 62 F5 | 	xor	result1, local07
1cad0     3D 95 02 F6 | 	mov	arg02, result1
1cad4     56 93 02 F6 | 	mov	arg01, local04
1cad8     01 96 66 F6 | 	neg	arg03, #1
1cadc     FC A9 B0 FD | 	call	#__system___float_cmp
1cae0     00 7A 56 F2 | 	cmps	result1, #0 wc
1cae4     00 B0 26 36 |  if_ae	not	local06, #0
1cae8     E7 B0 62 FC | 	wrlong	local06, fp
1caec     74 02 90 FD | 	jmp	#LR__2443
1caf0                 | LR__2432
1caf0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
1caf0     08 CE 05 F1 | 	add	fp, #8
1caf4     E7 B0 02 FB | 	rdlong	local06, fp
1caf8     08 CE 85 F1 | 	sub	fp, #8
1cafc     1E B0 0E F2 | 	cmp	local06, #30 wz
1cb00     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1cb04     30 00 90 5D |  if_ne	jmp	#LR__2433
1cb08     00 B0 06 F6 | 	mov	local06, #0
1cb0c     E7 AC 02 FB | 	rdlong	local04, fp
1cb10     53 93 02 F6 | 	mov	arg01, local01
1cb14     8C A1 B0 FD | 	call	#__system___float_fromuns
1cb18     3D 95 02 F6 | 	mov	arg02, result1
1cb1c     56 93 02 F6 | 	mov	arg01, local04
1cb20     01 96 66 F6 | 	neg	arg03, #1
1cb24     B4 A9 B0 FD | 	call	#__system___float_cmp
1cb28     00 7A 56 F2 | 	cmps	result1, #0 wc
1cb2c     00 B0 26 36 |  if_ae	not	local06, #0
1cb30     E7 B0 62 FC | 	wrlong	local06, fp
1cb34     2C 02 90 FD | 	jmp	#LR__2443
1cb38                 | LR__2433
1cb38                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
1cb38     08 CE 05 F1 | 	add	fp, #8
1cb3c     E7 B0 02 FB | 	rdlong	local06, fp
1cb40     08 CE 85 F1 | 	sub	fp, #8
1cb44     1C B0 0E F2 | 	cmp	local06, #28 wz
1cb48     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1cb4c     3C 00 90 5D |  if_ne	jmp	#LR__2434
1cb50     00 B0 06 F6 | 	mov	local06, #0
1cb54     E7 92 02 FB | 	rdlong	arg01, fp
1cb58     49 93 52 F6 | 	abs	arg01, arg01 wc
1cb5c     1F B2 C6 C9 |  if_b	decod	local07, #31
1cb60     00 B2 06 36 |  if_ae	mov	local07, #0
1cb64     3C A1 B0 FD | 	call	#__system___float_fromuns
1cb68     59 7B 62 F5 | 	xor	result1, local07
1cb6c     3D 93 02 F6 | 	mov	arg01, result1
1cb70     53 95 02 F6 | 	mov	arg02, local01
1cb74     01 96 66 F6 | 	neg	arg03, #1
1cb78     60 A9 B0 FD | 	call	#__system___float_cmp
1cb7c     00 7A 56 F2 | 	cmps	result1, #0 wc
1cb80     00 B0 26 36 |  if_ae	not	local06, #0
1cb84     E7 B0 62 FC | 	wrlong	local06, fp
1cb88     D8 01 90 FD | 	jmp	#LR__2443
1cb8c                 | LR__2434
1cb8c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
1cb8c     08 CE 05 F1 | 	add	fp, #8
1cb90     E7 B0 02 FB | 	rdlong	local06, fp
1cb94     08 CE 85 F1 | 	sub	fp, #8
1cb98     1C B0 0E F2 | 	cmp	local06, #28 wz
1cb9c     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1cba0     18 00 90 5D |  if_ne	jmp	#LR__2435
1cba4     00 B0 06 F6 | 	mov	local06, #0
1cba8     E7 AC 02 FB | 	rdlong	local04, fp
1cbac     53 AD 52 F2 | 	cmps	local04, local01 wc
1cbb0     01 B0 66 36 |  if_ae	neg	local06, #1
1cbb4     E7 B0 62 FC | 	wrlong	local06, fp
1cbb8     A8 01 90 FD | 	jmp	#LR__2443
1cbbc                 | LR__2435
1cbbc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
1cbbc     08 CE 05 F1 | 	add	fp, #8
1cbc0     E7 B0 02 FB | 	rdlong	local06, fp
1cbc4     08 CE 85 F1 | 	sub	fp, #8
1cbc8     1C B0 0E F2 | 	cmp	local06, #28 wz
1cbcc     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1cbd0     18 00 90 5D |  if_ne	jmp	#LR__2436
1cbd4     00 B0 06 F6 | 	mov	local06, #0
1cbd8     E7 AC 02 FB | 	rdlong	local04, fp
1cbdc     53 AD 52 F2 | 	cmps	local04, local01 wc
1cbe0     01 B0 66 36 |  if_ae	neg	local06, #1
1cbe4     E7 B0 62 FC | 	wrlong	local06, fp
1cbe8     78 01 90 FD | 	jmp	#LR__2443
1cbec                 | LR__2436
1cbec                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
1cbec     08 CE 05 F1 | 	add	fp, #8
1cbf0     E7 B0 02 FB | 	rdlong	local06, fp
1cbf4     08 CE 85 F1 | 	sub	fp, #8
1cbf8     1D B0 0E F2 | 	cmp	local06, #29 wz
1cbfc     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1cc00     2C 00 90 5D |  if_ne	jmp	#LR__2437
1cc04     00 B0 06 F6 | 	mov	local06, #0
1cc08     E7 92 02 FB | 	rdlong	arg01, fp
1cc0c     94 A0 B0 FD | 	call	#__system___float_fromuns
1cc10     3D 93 02 F6 | 	mov	arg01, result1
1cc14     53 95 02 F6 | 	mov	arg02, local01
1cc18     01 96 66 F6 | 	neg	arg03, #1
1cc1c     BC A8 B0 FD | 	call	#__system___float_cmp
1cc20     00 7A 56 F2 | 	cmps	result1, #0 wc
1cc24     00 B0 26 36 |  if_ae	not	local06, #0
1cc28     E7 B0 62 FC | 	wrlong	local06, fp
1cc2c     34 01 90 FD | 	jmp	#LR__2443
1cc30                 | LR__2437
1cc30                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
1cc30     08 CE 05 F1 | 	add	fp, #8
1cc34     E7 B0 02 FB | 	rdlong	local06, fp
1cc38     08 CE 85 F1 | 	sub	fp, #8
1cc3c     1D B0 0E F2 | 	cmp	local06, #29 wz
1cc40     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1cc44     18 00 90 5D |  if_ne	jmp	#LR__2438
1cc48     00 B0 06 F6 | 	mov	local06, #0
1cc4c     E7 AC 02 FB | 	rdlong	local04, fp
1cc50     53 AD 52 F2 | 	cmps	local04, local01 wc
1cc54     01 B0 66 36 |  if_ae	neg	local06, #1
1cc58     E7 B0 62 FC | 	wrlong	local06, fp
1cc5c     04 01 90 FD | 	jmp	#LR__2443
1cc60                 | LR__2438
1cc60                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
1cc60     08 CE 05 F1 | 	add	fp, #8
1cc64     E7 B0 02 FB | 	rdlong	local06, fp
1cc68     08 CE 85 F1 | 	sub	fp, #8
1cc6c     1D B0 0E F2 | 	cmp	local06, #29 wz
1cc70     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1cc74     18 00 90 5D |  if_ne	jmp	#LR__2439
1cc78     00 B0 06 F6 | 	mov	local06, #0
1cc7c     E7 AC 02 FB | 	rdlong	local04, fp
1cc80     53 AD 12 F2 | 	cmp	local04, local01 wc
1cc84     01 B0 66 36 |  if_ae	neg	local06, #1
1cc88     E7 B0 62 FC | 	wrlong	local06, fp
1cc8c     D4 00 90 FD | 	jmp	#LR__2443
1cc90                 | LR__2439
1cc90                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
1cc90     08 CE 05 F1 | 	add	fp, #8
1cc94     E7 B0 02 FB | 	rdlong	local06, fp
1cc98     08 CE 85 F1 | 	sub	fp, #8
1cc9c     2B B0 0E F2 | 	cmp	local06, #43 wz
1cca0     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1cca4     28 00 90 5D |  if_ne	jmp	#LR__2440
1cca8     00 B0 06 F6 | 	mov	local06, #0
1ccac     E7 92 02 FB | 	rdlong	arg01, fp
1ccb0     2C 0B BF FD | 	call	#_convertstring
1ccb4     3D 93 02 F6 | 	mov	arg01, result1
1ccb8     53 95 02 F6 | 	mov	arg02, local01
1ccbc     40 7D B0 FD | 	call	#__system___string_cmp
1ccc0     00 7A 56 F2 | 	cmps	result1, #0 wc
1ccc4     00 B0 26 36 |  if_ae	not	local06, #0
1ccc8     E7 B0 62 FC | 	wrlong	local06, fp
1cccc     94 00 90 FD | 	jmp	#LR__2443
1ccd0                 | LR__2440
1ccd0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
1ccd0     08 CE 05 F1 | 	add	fp, #8
1ccd4     E7 B0 02 FB | 	rdlong	local06, fp
1ccd8     08 CE 85 F1 | 	sub	fp, #8
1ccdc     1F B0 0E F2 | 	cmp	local06, #31 wz
1cce0     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1cce4     2C 00 90 5D |  if_ne	jmp	#LR__2441
1cce8     00 B0 06 F6 | 	mov	local06, #0
1ccec     E7 AC 02 FB | 	rdlong	local04, fp
1ccf0     53 93 02 F6 | 	mov	arg01, local01
1ccf4     E8 0A BF FD | 	call	#_convertstring
1ccf8     3D 95 02 F6 | 	mov	arg02, result1
1ccfc     56 93 02 F6 | 	mov	arg01, local04
1cd00     FC 7C B0 FD | 	call	#__system___string_cmp
1cd04     00 7A 56 F2 | 	cmps	result1, #0 wc
1cd08     00 B0 26 36 |  if_ae	not	local06, #0
1cd0c     E7 B0 62 FC | 	wrlong	local06, fp
1cd10     50 00 90 FD | 	jmp	#LR__2443
1cd14                 | LR__2441
1cd14                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
1cd14     08 CE 05 F1 | 	add	fp, #8
1cd18     E7 B0 02 FB | 	rdlong	local06, fp
1cd1c     08 CE 85 F1 | 	sub	fp, #8
1cd20     2B B0 0E F2 | 	cmp	local06, #43 wz
1cd24     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1cd28     34 00 90 5D |  if_ne	jmp	#LR__2442
1cd2c     00 B0 06 F6 | 	mov	local06, #0
1cd30     E7 92 02 FB | 	rdlong	arg01, fp
1cd34     A8 0A BF FD | 	call	#_convertstring
1cd38     3D AD 02 F6 | 	mov	local04, result1
1cd3c     53 93 02 F6 | 	mov	arg01, local01
1cd40     9C 0A BF FD | 	call	#_convertstring
1cd44     3D 95 02 F6 | 	mov	arg02, result1
1cd48     56 93 02 F6 | 	mov	arg01, local04
1cd4c     B0 7C B0 FD | 	call	#__system___string_cmp
1cd50     00 7A 56 F2 | 	cmps	result1, #0 wc
1cd54     00 B0 26 36 |  if_ae	not	local06, #0
1cd58     E7 B0 62 FC | 	wrlong	local06, fp
1cd5c     04 00 90 FD | 	jmp	#LR__2443
1cd60                 | LR__2442
1cd60     E7 00 68 FC | 	wrlong	#0, fp
1cd64                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1cd64                 | LR__2443
1cd64     08 CE 05 F1 | 	add	fp, #8
1cd68     E7 38 68 FC | 	wrlong	#28, fp
1cd6c     08 CE 85 F1 | 	sub	fp, #8
1cd70                 | ' 1180 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1cd70     E7 B0 0A FB | 	rdlong	local06, fp wz
1cd74     E7 02 68 5C |  if_ne	wrlong	#1, fp
1cd78     E7 92 02 F6 | 	mov	arg01, fp
1cd7c     80 09 BF FD | 	call	#_push
1cd80     E7 F0 03 F6 | 	mov	ptra, fp
1cd84     F2 00 A0 FD | 	call	#popregs_
1cd88                 | _do_ge_ret
1cd88     2D 00 64 FD | 	ret
1cd8c                 | 
1cd8c                 | ' 
1cd8c                 | ' '--------------------------------- greater than (>)
1cd8c                 | ' 
1cd8c                 | ' sub do_gt
1cd8c                 | _do_gt
1cd8c     07 CA 05 F6 | 	mov	COUNT_, #7
1cd90     E8 00 A0 FD | 	call	#pushregs_
1cd94     18 F0 07 F1 | 	add	ptra, #24
1cd98     D4 08 BF FD | 	call	#_pop
1cd9c     3D A7 02 F6 | 	mov	local01, result1
1cda0     3E AD 02 F6 | 	mov	local04, result2
1cda4     3F AF 02 F6 | 	mov	local05, result3
1cda8     56 A9 02 F6 | 	mov	local02, local04
1cdac     57 AB 02 F6 | 	mov	local03, local05
1cdb0     BC 08 BF FD | 	call	#_pop
1cdb4     3F AF 02 F6 | 	mov	local05, result3
1cdb8     E7 7A 62 FC | 	wrlong	result1, fp
1cdbc     04 CE 05 F1 | 	add	fp, #4
1cdc0     E7 7C 62 FC | 	wrlong	result2, fp
1cdc4     04 CE 05 F1 | 	add	fp, #4
1cdc8     E7 AE 62 FC | 	wrlong	local05, fp
1cdcc                 | ' 
1cdcc                 | ' t2=pop()
1cdcc                 | ' t1=pop()
1cdcc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
1cdcc     08 CE 85 F1 | 	sub	fp, #8
1cdd0     1F AE 0E F2 | 	cmp	local05, #31 wz
1cdd4     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1cdd8     20 00 90 5D |  if_ne	jmp	#LR__2450
1cddc     00 B0 06 F6 | 	mov	local06, #0
1cde0     E7 92 02 FB | 	rdlong	arg01, fp
1cde4     53 95 02 F6 | 	mov	arg02, local01
1cde8     14 7C B0 FD | 	call	#__system___string_cmp
1cdec     01 7A 56 F2 | 	cmps	result1, #1 wc
1cdf0     00 B0 26 36 |  if_ae	not	local06, #0
1cdf4     E7 B0 62 FC | 	wrlong	local06, fp
1cdf8     04 03 90 FD | 	jmp	#LR__2463
1cdfc                 | LR__2450
1cdfc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
1cdfc     08 CE 05 F1 | 	add	fp, #8
1ce00     E7 B0 02 FB | 	rdlong	local06, fp
1ce04     08 CE 85 F1 | 	sub	fp, #8
1ce08     1E B0 0E F2 | 	cmp	local06, #30 wz
1ce0c     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1ce10     24 00 90 5D |  if_ne	jmp	#LR__2451
1ce14     00 B0 06 F6 | 	mov	local06, #0
1ce18     E7 92 02 FB | 	rdlong	arg01, fp
1ce1c     53 95 02 F6 | 	mov	arg02, local01
1ce20     01 96 66 F6 | 	neg	arg03, #1
1ce24     B4 A6 B0 FD | 	call	#__system___float_cmp
1ce28     01 7A 56 F2 | 	cmps	result1, #1 wc
1ce2c     00 B0 26 36 |  if_ae	not	local06, #0
1ce30     E7 B0 62 FC | 	wrlong	local06, fp
1ce34     C8 02 90 FD | 	jmp	#LR__2463
1ce38                 | LR__2451
1ce38                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
1ce38     08 CE 05 F1 | 	add	fp, #8
1ce3c     E7 B0 02 FB | 	rdlong	local06, fp
1ce40     08 CE 85 F1 | 	sub	fp, #8
1ce44     1E B0 0E F2 | 	cmp	local06, #30 wz
1ce48     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1ce4c     3C 00 90 5D |  if_ne	jmp	#LR__2452
1ce50     00 B0 06 F6 | 	mov	local06, #0
1ce54     E7 AC 02 FB | 	rdlong	local04, fp
1ce58     53 93 52 F6 | 	abs	arg01, local01 wc
1ce5c     1F B2 C6 C9 |  if_b	decod	local07, #31
1ce60     00 B2 06 36 |  if_ae	mov	local07, #0
1ce64     3C 9E B0 FD | 	call	#__system___float_fromuns
1ce68     59 7B 62 F5 | 	xor	result1, local07
1ce6c     3D 95 02 F6 | 	mov	arg02, result1
1ce70     56 93 02 F6 | 	mov	arg01, local04
1ce74     01 96 66 F6 | 	neg	arg03, #1
1ce78     60 A6 B0 FD | 	call	#__system___float_cmp
1ce7c     01 7A 56 F2 | 	cmps	result1, #1 wc
1ce80     00 B0 26 36 |  if_ae	not	local06, #0
1ce84     E7 B0 62 FC | 	wrlong	local06, fp
1ce88     74 02 90 FD | 	jmp	#LR__2463
1ce8c                 | LR__2452
1ce8c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
1ce8c     08 CE 05 F1 | 	add	fp, #8
1ce90     E7 B0 02 FB | 	rdlong	local06, fp
1ce94     08 CE 85 F1 | 	sub	fp, #8
1ce98     1E B0 0E F2 | 	cmp	local06, #30 wz
1ce9c     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1cea0     30 00 90 5D |  if_ne	jmp	#LR__2453
1cea4     00 B0 06 F6 | 	mov	local06, #0
1cea8     E7 AC 02 FB | 	rdlong	local04, fp
1ceac     53 93 02 F6 | 	mov	arg01, local01
1ceb0     F0 9D B0 FD | 	call	#__system___float_fromuns
1ceb4     3D 95 02 F6 | 	mov	arg02, result1
1ceb8     56 93 02 F6 | 	mov	arg01, local04
1cebc     01 96 66 F6 | 	neg	arg03, #1
1cec0     18 A6 B0 FD | 	call	#__system___float_cmp
1cec4     01 7A 56 F2 | 	cmps	result1, #1 wc
1cec8     00 B0 26 36 |  if_ae	not	local06, #0
1cecc     E7 B0 62 FC | 	wrlong	local06, fp
1ced0     2C 02 90 FD | 	jmp	#LR__2463
1ced4                 | LR__2453
1ced4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
1ced4     08 CE 05 F1 | 	add	fp, #8
1ced8     E7 B0 02 FB | 	rdlong	local06, fp
1cedc     08 CE 85 F1 | 	sub	fp, #8
1cee0     1C B0 0E F2 | 	cmp	local06, #28 wz
1cee4     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1cee8     3C 00 90 5D |  if_ne	jmp	#LR__2454
1ceec     00 B0 06 F6 | 	mov	local06, #0
1cef0     E7 92 02 FB | 	rdlong	arg01, fp
1cef4     49 93 52 F6 | 	abs	arg01, arg01 wc
1cef8     1F B2 C6 C9 |  if_b	decod	local07, #31
1cefc     00 B2 06 36 |  if_ae	mov	local07, #0
1cf00     A0 9D B0 FD | 	call	#__system___float_fromuns
1cf04     59 7B 62 F5 | 	xor	result1, local07
1cf08     3D 93 02 F6 | 	mov	arg01, result1
1cf0c     53 95 02 F6 | 	mov	arg02, local01
1cf10     01 96 66 F6 | 	neg	arg03, #1
1cf14     C4 A5 B0 FD | 	call	#__system___float_cmp
1cf18     01 7A 56 F2 | 	cmps	result1, #1 wc
1cf1c     00 B0 26 36 |  if_ae	not	local06, #0
1cf20     E7 B0 62 FC | 	wrlong	local06, fp
1cf24     D8 01 90 FD | 	jmp	#LR__2463
1cf28                 | LR__2454
1cf28                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
1cf28     08 CE 05 F1 | 	add	fp, #8
1cf2c     E7 B0 02 FB | 	rdlong	local06, fp
1cf30     08 CE 85 F1 | 	sub	fp, #8
1cf34     1C B0 0E F2 | 	cmp	local06, #28 wz
1cf38     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1cf3c     18 00 90 5D |  if_ne	jmp	#LR__2455
1cf40     00 B0 06 F6 | 	mov	local06, #0
1cf44     E7 AC 02 FB | 	rdlong	local04, fp
1cf48     53 AD 5A F2 | 	cmps	local04, local01 wcz
1cf4c     01 B0 66 16 |  if_a	neg	local06, #1
1cf50     E7 B0 62 FC | 	wrlong	local06, fp
1cf54     A8 01 90 FD | 	jmp	#LR__2463
1cf58                 | LR__2455
1cf58                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
1cf58     08 CE 05 F1 | 	add	fp, #8
1cf5c     E7 B0 02 FB | 	rdlong	local06, fp
1cf60     08 CE 85 F1 | 	sub	fp, #8
1cf64     1C B0 0E F2 | 	cmp	local06, #28 wz
1cf68     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1cf6c     18 00 90 5D |  if_ne	jmp	#LR__2456
1cf70     00 B0 06 F6 | 	mov	local06, #0
1cf74     E7 AC 02 FB | 	rdlong	local04, fp
1cf78     53 AD 5A F2 | 	cmps	local04, local01 wcz
1cf7c     01 B0 66 16 |  if_a	neg	local06, #1
1cf80     E7 B0 62 FC | 	wrlong	local06, fp
1cf84     78 01 90 FD | 	jmp	#LR__2463
1cf88                 | LR__2456
1cf88                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
1cf88     08 CE 05 F1 | 	add	fp, #8
1cf8c     E7 B0 02 FB | 	rdlong	local06, fp
1cf90     08 CE 85 F1 | 	sub	fp, #8
1cf94     1D B0 0E F2 | 	cmp	local06, #29 wz
1cf98     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1cf9c     2C 00 90 5D |  if_ne	jmp	#LR__2457
1cfa0     00 B0 06 F6 | 	mov	local06, #0
1cfa4     E7 92 02 FB | 	rdlong	arg01, fp
1cfa8     F8 9C B0 FD | 	call	#__system___float_fromuns
1cfac     3D 93 02 F6 | 	mov	arg01, result1
1cfb0     53 95 02 F6 | 	mov	arg02, local01
1cfb4     01 96 66 F6 | 	neg	arg03, #1
1cfb8     20 A5 B0 FD | 	call	#__system___float_cmp
1cfbc     01 7A 56 F2 | 	cmps	result1, #1 wc
1cfc0     00 B0 26 36 |  if_ae	not	local06, #0
1cfc4     E7 B0 62 FC | 	wrlong	local06, fp
1cfc8     34 01 90 FD | 	jmp	#LR__2463
1cfcc                 | LR__2457
1cfcc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
1cfcc     08 CE 05 F1 | 	add	fp, #8
1cfd0     E7 B0 02 FB | 	rdlong	local06, fp
1cfd4     08 CE 85 F1 | 	sub	fp, #8
1cfd8     1D B0 0E F2 | 	cmp	local06, #29 wz
1cfdc     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1cfe0     18 00 90 5D |  if_ne	jmp	#LR__2458
1cfe4     00 B0 06 F6 | 	mov	local06, #0
1cfe8     E7 AC 02 FB | 	rdlong	local04, fp
1cfec     53 AD 5A F2 | 	cmps	local04, local01 wcz
1cff0     01 B0 66 16 |  if_a	neg	local06, #1
1cff4     E7 B0 62 FC | 	wrlong	local06, fp
1cff8     04 01 90 FD | 	jmp	#LR__2463
1cffc                 | LR__2458
1cffc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
1cffc     08 CE 05 F1 | 	add	fp, #8
1d000     E7 B0 02 FB | 	rdlong	local06, fp
1d004     08 CE 85 F1 | 	sub	fp, #8
1d008     1D B0 0E F2 | 	cmp	local06, #29 wz
1d00c     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d010     18 00 90 5D |  if_ne	jmp	#LR__2459
1d014     00 B0 06 F6 | 	mov	local06, #0
1d018     E7 AC 02 FB | 	rdlong	local04, fp
1d01c     53 AD 1A F2 | 	cmp	local04, local01 wcz
1d020     01 B0 66 16 |  if_a	neg	local06, #1
1d024     E7 B0 62 FC | 	wrlong	local06, fp
1d028     D4 00 90 FD | 	jmp	#LR__2463
1d02c                 | LR__2459
1d02c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
1d02c     08 CE 05 F1 | 	add	fp, #8
1d030     E7 B0 02 FB | 	rdlong	local06, fp
1d034     08 CE 85 F1 | 	sub	fp, #8
1d038     2B B0 0E F2 | 	cmp	local06, #43 wz
1d03c     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1d040     28 00 90 5D |  if_ne	jmp	#LR__2460
1d044     00 B0 06 F6 | 	mov	local06, #0
1d048     E7 92 02 FB | 	rdlong	arg01, fp
1d04c     90 07 BF FD | 	call	#_convertstring
1d050     3D 93 02 F6 | 	mov	arg01, result1
1d054     53 95 02 F6 | 	mov	arg02, local01
1d058     A4 79 B0 FD | 	call	#__system___string_cmp
1d05c     01 7A 56 F2 | 	cmps	result1, #1 wc
1d060     00 B0 26 36 |  if_ae	not	local06, #0
1d064     E7 B0 62 FC | 	wrlong	local06, fp
1d068     94 00 90 FD | 	jmp	#LR__2463
1d06c                 | LR__2460
1d06c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
1d06c     08 CE 05 F1 | 	add	fp, #8
1d070     E7 B0 02 FB | 	rdlong	local06, fp
1d074     08 CE 85 F1 | 	sub	fp, #8
1d078     1F B0 0E F2 | 	cmp	local06, #31 wz
1d07c     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1d080     2C 00 90 5D |  if_ne	jmp	#LR__2461
1d084     00 B0 06 F6 | 	mov	local06, #0
1d088     E7 AC 02 FB | 	rdlong	local04, fp
1d08c     53 93 02 F6 | 	mov	arg01, local01
1d090     4C 07 BF FD | 	call	#_convertstring
1d094     3D 95 02 F6 | 	mov	arg02, result1
1d098     56 93 02 F6 | 	mov	arg01, local04
1d09c     60 79 B0 FD | 	call	#__system___string_cmp
1d0a0     01 7A 56 F2 | 	cmps	result1, #1 wc
1d0a4     00 B0 26 36 |  if_ae	not	local06, #0
1d0a8     E7 B0 62 FC | 	wrlong	local06, fp
1d0ac     50 00 90 FD | 	jmp	#LR__2463
1d0b0                 | LR__2461
1d0b0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
1d0b0     08 CE 05 F1 | 	add	fp, #8
1d0b4     E7 B0 02 FB | 	rdlong	local06, fp
1d0b8     08 CE 85 F1 | 	sub	fp, #8
1d0bc     2B B0 0E F2 | 	cmp	local06, #43 wz
1d0c0     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1d0c4     34 00 90 5D |  if_ne	jmp	#LR__2462
1d0c8     00 B0 06 F6 | 	mov	local06, #0
1d0cc     E7 92 02 FB | 	rdlong	arg01, fp
1d0d0     0C 07 BF FD | 	call	#_convertstring
1d0d4     3D AD 02 F6 | 	mov	local04, result1
1d0d8     53 93 02 F6 | 	mov	arg01, local01
1d0dc     00 07 BF FD | 	call	#_convertstring
1d0e0     3D 95 02 F6 | 	mov	arg02, result1
1d0e4     56 93 02 F6 | 	mov	arg01, local04
1d0e8     14 79 B0 FD | 	call	#__system___string_cmp
1d0ec     01 7A 56 F2 | 	cmps	result1, #1 wc
1d0f0     00 B0 26 36 |  if_ae	not	local06, #0
1d0f4     E7 B0 62 FC | 	wrlong	local06, fp
1d0f8     04 00 90 FD | 	jmp	#LR__2463
1d0fc                 | LR__2462
1d0fc     E7 00 68 FC | 	wrlong	#0, fp
1d100                 | LR__2463
1d100     08 CE 05 F1 | 	add	fp, #8
1d104     E7 38 68 FC | 	wrlong	#28, fp
1d108     08 CE 85 F1 | 	sub	fp, #8
1d10c                 | ' t1.result.uresult=0
1d10c                 | ' 1160 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1d10c     E7 B0 0A FB | 	rdlong	local06, fp wz
1d110     E7 02 68 5C |  if_ne	wrlong	#1, fp
1d114     E7 92 02 F6 | 	mov	arg01, fp
1d118     E4 05 BF FD | 	call	#_push
1d11c     E7 F0 03 F6 | 	mov	ptra, fp
1d120     F2 00 A0 FD | 	call	#popregs_
1d124                 | _do_gt_ret
1d124     2D 00 64 FD | 	ret
1d128                 | 
1d128                 | ' 
1d128                 | ' '--------------------------------- less or equal (<=)
1d128                 | ' 
1d128                 | ' sub do_le
1d128                 | _do_le
1d128     07 CA 05 F6 | 	mov	COUNT_, #7
1d12c     E8 00 A0 FD | 	call	#pushregs_
1d130     18 F0 07 F1 | 	add	ptra, #24
1d134     38 05 BF FD | 	call	#_pop
1d138     3D A7 02 F6 | 	mov	local01, result1
1d13c     3E AD 02 F6 | 	mov	local04, result2
1d140     3F AF 02 F6 | 	mov	local05, result3
1d144     56 A9 02 F6 | 	mov	local02, local04
1d148     57 AB 02 F6 | 	mov	local03, local05
1d14c     20 05 BF FD | 	call	#_pop
1d150     3F AF 02 F6 | 	mov	local05, result3
1d154     E7 7A 62 FC | 	wrlong	result1, fp
1d158     04 CE 05 F1 | 	add	fp, #4
1d15c     E7 7C 62 FC | 	wrlong	result2, fp
1d160     04 CE 05 F1 | 	add	fp, #4
1d164     E7 AE 62 FC | 	wrlong	local05, fp
1d168                 | ' 
1d168                 | ' t2=pop()
1d168                 | ' t1=pop()
1d168                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
1d168     08 CE 85 F1 | 	sub	fp, #8
1d16c     1F AE 0E F2 | 	cmp	local05, #31 wz
1d170     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1d174     20 00 90 5D |  if_ne	jmp	#LR__2470
1d178     00 B0 06 F6 | 	mov	local06, #0
1d17c     E7 92 02 FB | 	rdlong	arg01, fp
1d180     53 95 02 F6 | 	mov	arg02, local01
1d184     78 78 B0 FD | 	call	#__system___string_cmp
1d188     01 7A 56 F2 | 	cmps	result1, #1 wc
1d18c     00 B0 26 C6 |  if_b	not	local06, #0
1d190     E7 B0 62 FC | 	wrlong	local06, fp
1d194     04 03 90 FD | 	jmp	#LR__2483
1d198                 | LR__2470
1d198                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
1d198     08 CE 05 F1 | 	add	fp, #8
1d19c     E7 B0 02 FB | 	rdlong	local06, fp
1d1a0     08 CE 85 F1 | 	sub	fp, #8
1d1a4     1E B0 0E F2 | 	cmp	local06, #30 wz
1d1a8     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1d1ac     24 00 90 5D |  if_ne	jmp	#LR__2471
1d1b0     00 B0 06 F6 | 	mov	local06, #0
1d1b4     E7 92 02 FB | 	rdlong	arg01, fp
1d1b8     53 95 02 F6 | 	mov	arg02, local01
1d1bc     01 96 06 F6 | 	mov	arg03, #1
1d1c0     18 A3 B0 FD | 	call	#__system___float_cmp
1d1c4     01 7A 56 F2 | 	cmps	result1, #1 wc
1d1c8     00 B0 26 C6 |  if_b	not	local06, #0
1d1cc     E7 B0 62 FC | 	wrlong	local06, fp
1d1d0     C8 02 90 FD | 	jmp	#LR__2483
1d1d4                 | LR__2471
1d1d4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
1d1d4     08 CE 05 F1 | 	add	fp, #8
1d1d8     E7 B0 02 FB | 	rdlong	local06, fp
1d1dc     08 CE 85 F1 | 	sub	fp, #8
1d1e0     1E B0 0E F2 | 	cmp	local06, #30 wz
1d1e4     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d1e8     3C 00 90 5D |  if_ne	jmp	#LR__2472
1d1ec     00 B0 06 F6 | 	mov	local06, #0
1d1f0     E7 AC 02 FB | 	rdlong	local04, fp
1d1f4     53 93 52 F6 | 	abs	arg01, local01 wc
1d1f8     1F B2 C6 C9 |  if_b	decod	local07, #31
1d1fc     00 B2 06 36 |  if_ae	mov	local07, #0
1d200     A0 9A B0 FD | 	call	#__system___float_fromuns
1d204     59 7B 62 F5 | 	xor	result1, local07
1d208     3D 95 02 F6 | 	mov	arg02, result1
1d20c     56 93 02 F6 | 	mov	arg01, local04
1d210     01 96 06 F6 | 	mov	arg03, #1
1d214     C4 A2 B0 FD | 	call	#__system___float_cmp
1d218     01 7A 56 F2 | 	cmps	result1, #1 wc
1d21c     00 B0 26 C6 |  if_b	not	local06, #0
1d220     E7 B0 62 FC | 	wrlong	local06, fp
1d224     74 02 90 FD | 	jmp	#LR__2483
1d228                 | LR__2472
1d228                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
1d228     08 CE 05 F1 | 	add	fp, #8
1d22c     E7 B0 02 FB | 	rdlong	local06, fp
1d230     08 CE 85 F1 | 	sub	fp, #8
1d234     1E B0 0E F2 | 	cmp	local06, #30 wz
1d238     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d23c     30 00 90 5D |  if_ne	jmp	#LR__2473
1d240     00 B0 06 F6 | 	mov	local06, #0
1d244     E7 AC 02 FB | 	rdlong	local04, fp
1d248     53 93 02 F6 | 	mov	arg01, local01
1d24c     54 9A B0 FD | 	call	#__system___float_fromuns
1d250     3D 95 02 F6 | 	mov	arg02, result1
1d254     56 93 02 F6 | 	mov	arg01, local04
1d258     01 96 06 F6 | 	mov	arg03, #1
1d25c     7C A2 B0 FD | 	call	#__system___float_cmp
1d260     01 7A 56 F2 | 	cmps	result1, #1 wc
1d264     00 B0 26 C6 |  if_b	not	local06, #0
1d268     E7 B0 62 FC | 	wrlong	local06, fp
1d26c     2C 02 90 FD | 	jmp	#LR__2483
1d270                 | LR__2473
1d270                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
1d270     08 CE 05 F1 | 	add	fp, #8
1d274     E7 B0 02 FB | 	rdlong	local06, fp
1d278     08 CE 85 F1 | 	sub	fp, #8
1d27c     1C B0 0E F2 | 	cmp	local06, #28 wz
1d280     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1d284     3C 00 90 5D |  if_ne	jmp	#LR__2474
1d288     00 B0 06 F6 | 	mov	local06, #0
1d28c     E7 92 02 FB | 	rdlong	arg01, fp
1d290     49 93 52 F6 | 	abs	arg01, arg01 wc
1d294     1F B2 C6 C9 |  if_b	decod	local07, #31
1d298     00 B2 06 36 |  if_ae	mov	local07, #0
1d29c     04 9A B0 FD | 	call	#__system___float_fromuns
1d2a0     59 7B 62 F5 | 	xor	result1, local07
1d2a4     3D 93 02 F6 | 	mov	arg01, result1
1d2a8     53 95 02 F6 | 	mov	arg02, local01
1d2ac     01 96 06 F6 | 	mov	arg03, #1
1d2b0     28 A2 B0 FD | 	call	#__system___float_cmp
1d2b4     01 7A 56 F2 | 	cmps	result1, #1 wc
1d2b8     00 B0 26 C6 |  if_b	not	local06, #0
1d2bc     E7 B0 62 FC | 	wrlong	local06, fp
1d2c0     D8 01 90 FD | 	jmp	#LR__2483
1d2c4                 | LR__2474
1d2c4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
1d2c4     08 CE 05 F1 | 	add	fp, #8
1d2c8     E7 B0 02 FB | 	rdlong	local06, fp
1d2cc     08 CE 85 F1 | 	sub	fp, #8
1d2d0     1C B0 0E F2 | 	cmp	local06, #28 wz
1d2d4     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d2d8     18 00 90 5D |  if_ne	jmp	#LR__2475
1d2dc     00 B0 06 F6 | 	mov	local06, #0
1d2e0     E7 AC 02 FB | 	rdlong	local04, fp
1d2e4     53 AD 5A F2 | 	cmps	local04, local01 wcz
1d2e8     01 B0 66 E6 |  if_be	neg	local06, #1
1d2ec     E7 B0 62 FC | 	wrlong	local06, fp
1d2f0     A8 01 90 FD | 	jmp	#LR__2483
1d2f4                 | LR__2475
1d2f4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
1d2f4     08 CE 05 F1 | 	add	fp, #8
1d2f8     E7 B0 02 FB | 	rdlong	local06, fp
1d2fc     08 CE 85 F1 | 	sub	fp, #8
1d300     1C B0 0E F2 | 	cmp	local06, #28 wz
1d304     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d308     18 00 90 5D |  if_ne	jmp	#LR__2476
1d30c     00 B0 06 F6 | 	mov	local06, #0
1d310     E7 AC 02 FB | 	rdlong	local04, fp
1d314     53 AD 5A F2 | 	cmps	local04, local01 wcz
1d318     01 B0 66 E6 |  if_be	neg	local06, #1
1d31c     E7 B0 62 FC | 	wrlong	local06, fp
1d320     78 01 90 FD | 	jmp	#LR__2483
1d324                 | LR__2476
1d324                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
1d324     08 CE 05 F1 | 	add	fp, #8
1d328     E7 B0 02 FB | 	rdlong	local06, fp
1d32c     08 CE 85 F1 | 	sub	fp, #8
1d330     1D B0 0E F2 | 	cmp	local06, #29 wz
1d334     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1d338     2C 00 90 5D |  if_ne	jmp	#LR__2477
1d33c     00 B0 06 F6 | 	mov	local06, #0
1d340     E7 92 02 FB | 	rdlong	arg01, fp
1d344     5C 99 B0 FD | 	call	#__system___float_fromuns
1d348     3D 93 02 F6 | 	mov	arg01, result1
1d34c     53 95 02 F6 | 	mov	arg02, local01
1d350     01 96 06 F6 | 	mov	arg03, #1
1d354     84 A1 B0 FD | 	call	#__system___float_cmp
1d358     01 7A 56 F2 | 	cmps	result1, #1 wc
1d35c     00 B0 26 C6 |  if_b	not	local06, #0
1d360     E7 B0 62 FC | 	wrlong	local06, fp
1d364     34 01 90 FD | 	jmp	#LR__2483
1d368                 | LR__2477
1d368                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
1d368     08 CE 05 F1 | 	add	fp, #8
1d36c     E7 B0 02 FB | 	rdlong	local06, fp
1d370     08 CE 85 F1 | 	sub	fp, #8
1d374     1D B0 0E F2 | 	cmp	local06, #29 wz
1d378     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d37c     18 00 90 5D |  if_ne	jmp	#LR__2478
1d380     00 B0 06 F6 | 	mov	local06, #0
1d384     E7 AC 02 FB | 	rdlong	local04, fp
1d388     53 AD 5A F2 | 	cmps	local04, local01 wcz
1d38c     01 B0 66 E6 |  if_be	neg	local06, #1
1d390     E7 B0 62 FC | 	wrlong	local06, fp
1d394     04 01 90 FD | 	jmp	#LR__2483
1d398                 | LR__2478
1d398                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
1d398     08 CE 05 F1 | 	add	fp, #8
1d39c     E7 B0 02 FB | 	rdlong	local06, fp
1d3a0     08 CE 85 F1 | 	sub	fp, #8
1d3a4     1D B0 0E F2 | 	cmp	local06, #29 wz
1d3a8     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d3ac     18 00 90 5D |  if_ne	jmp	#LR__2479
1d3b0     00 B0 06 F6 | 	mov	local06, #0
1d3b4     E7 AC 02 FB | 	rdlong	local04, fp
1d3b8     53 AD 1A F2 | 	cmp	local04, local01 wcz
1d3bc     01 B0 66 E6 |  if_be	neg	local06, #1
1d3c0     E7 B0 62 FC | 	wrlong	local06, fp
1d3c4     D4 00 90 FD | 	jmp	#LR__2483
1d3c8                 | LR__2479
1d3c8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
1d3c8     08 CE 05 F1 | 	add	fp, #8
1d3cc     E7 B0 02 FB | 	rdlong	local06, fp
1d3d0     08 CE 85 F1 | 	sub	fp, #8
1d3d4     2B B0 0E F2 | 	cmp	local06, #43 wz
1d3d8     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1d3dc     28 00 90 5D |  if_ne	jmp	#LR__2480
1d3e0     00 B0 06 F6 | 	mov	local06, #0
1d3e4     E7 92 02 FB | 	rdlong	arg01, fp
1d3e8     F4 03 BF FD | 	call	#_convertstring
1d3ec     3D 93 02 F6 | 	mov	arg01, result1
1d3f0     53 95 02 F6 | 	mov	arg02, local01
1d3f4     08 76 B0 FD | 	call	#__system___string_cmp
1d3f8     01 7A 56 F2 | 	cmps	result1, #1 wc
1d3fc     00 B0 26 C6 |  if_b	not	local06, #0
1d400     E7 B0 62 FC | 	wrlong	local06, fp
1d404     94 00 90 FD | 	jmp	#LR__2483
1d408                 | LR__2480
1d408                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
1d408     08 CE 05 F1 | 	add	fp, #8
1d40c     E7 B0 02 FB | 	rdlong	local06, fp
1d410     08 CE 85 F1 | 	sub	fp, #8
1d414     1F B0 0E F2 | 	cmp	local06, #31 wz
1d418     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1d41c     2C 00 90 5D |  if_ne	jmp	#LR__2481
1d420     00 B0 06 F6 | 	mov	local06, #0
1d424     E7 AC 02 FB | 	rdlong	local04, fp
1d428     53 93 02 F6 | 	mov	arg01, local01
1d42c     B0 03 BF FD | 	call	#_convertstring
1d430     3D 95 02 F6 | 	mov	arg02, result1
1d434     56 93 02 F6 | 	mov	arg01, local04
1d438     C4 75 B0 FD | 	call	#__system___string_cmp
1d43c     01 7A 56 F2 | 	cmps	result1, #1 wc
1d440     00 B0 26 C6 |  if_b	not	local06, #0
1d444     E7 B0 62 FC | 	wrlong	local06, fp
1d448     50 00 90 FD | 	jmp	#LR__2483
1d44c                 | LR__2481
1d44c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
1d44c     08 CE 05 F1 | 	add	fp, #8
1d450     E7 B0 02 FB | 	rdlong	local06, fp
1d454     08 CE 85 F1 | 	sub	fp, #8
1d458     2B B0 0E F2 | 	cmp	local06, #43 wz
1d45c     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1d460     34 00 90 5D |  if_ne	jmp	#LR__2482
1d464     00 B0 06 F6 | 	mov	local06, #0
1d468     E7 92 02 FB | 	rdlong	arg01, fp
1d46c     70 03 BF FD | 	call	#_convertstring
1d470     3D AD 02 F6 | 	mov	local04, result1
1d474     53 93 02 F6 | 	mov	arg01, local01
1d478     64 03 BF FD | 	call	#_convertstring
1d47c     3D 95 02 F6 | 	mov	arg02, result1
1d480     56 93 02 F6 | 	mov	arg01, local04
1d484     78 75 B0 FD | 	call	#__system___string_cmp
1d488     01 7A 56 F2 | 	cmps	result1, #1 wc
1d48c     00 B0 26 C6 |  if_b	not	local06, #0
1d490     E7 B0 62 FC | 	wrlong	local06, fp
1d494     04 00 90 FD | 	jmp	#LR__2483
1d498                 | LR__2482
1d498     E7 00 68 FC | 	wrlong	#0, fp
1d49c                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1d49c                 | LR__2483
1d49c     08 CE 05 F1 | 	add	fp, #8
1d4a0     E7 38 68 FC | 	wrlong	#28, fp
1d4a4     08 CE 85 F1 | 	sub	fp, #8
1d4a8     E7 92 02 F6 | 	mov	arg01, fp
1d4ac     50 02 BF FD | 	call	#_push
1d4b0     E7 F0 03 F6 | 	mov	ptra, fp
1d4b4     F2 00 A0 FD | 	call	#popregs_
1d4b8                 | _do_le_ret
1d4b8     2D 00 64 FD | 	ret
1d4bc                 | 
1d4bc                 | ' 
1d4bc                 | ' '--------------------------------- less than (<)
1d4bc                 | ' 
1d4bc                 | ' sub do_lt
1d4bc                 | _do_lt
1d4bc     07 CA 05 F6 | 	mov	COUNT_, #7
1d4c0     E8 00 A0 FD | 	call	#pushregs_
1d4c4     18 F0 07 F1 | 	add	ptra, #24
1d4c8     A4 01 BF FD | 	call	#_pop
1d4cc     3D A7 02 F6 | 	mov	local01, result1
1d4d0     3E AD 02 F6 | 	mov	local04, result2
1d4d4     3F AF 02 F6 | 	mov	local05, result3
1d4d8     56 A9 02 F6 | 	mov	local02, local04
1d4dc     57 AB 02 F6 | 	mov	local03, local05
1d4e0     8C 01 BF FD | 	call	#_pop
1d4e4     3F AF 02 F6 | 	mov	local05, result3
1d4e8     E7 7A 62 FC | 	wrlong	result1, fp
1d4ec     04 CE 05 F1 | 	add	fp, #4
1d4f0     E7 7C 62 FC | 	wrlong	result2, fp
1d4f4     04 CE 05 F1 | 	add	fp, #4
1d4f8     E7 AE 62 FC | 	wrlong	local05, fp
1d4fc                 | ' 
1d4fc                 | ' t2=pop()
1d4fc                 | ' t1=pop()
1d4fc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
1d4fc     08 CE 85 F1 | 	sub	fp, #8
1d500     1F AE 0E F2 | 	cmp	local05, #31 wz
1d504     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1d508     20 00 90 5D |  if_ne	jmp	#LR__2490
1d50c     00 B0 06 F6 | 	mov	local06, #0
1d510     E7 92 02 FB | 	rdlong	arg01, fp
1d514     53 95 02 F6 | 	mov	arg02, local01
1d518     E4 74 B0 FD | 	call	#__system___string_cmp
1d51c     00 7A 56 F2 | 	cmps	result1, #0 wc
1d520     00 B0 26 C6 |  if_b	not	local06, #0
1d524     E7 B0 62 FC | 	wrlong	local06, fp
1d528     E4 02 90 FD | 	jmp	#LR__2499
1d52c                 | LR__2490
1d52c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
1d52c     08 CE 05 F1 | 	add	fp, #8
1d530     E7 B0 02 FB | 	rdlong	local06, fp
1d534     08 CE 85 F1 | 	sub	fp, #8
1d538     1E B0 0E F2 | 	cmp	local06, #30 wz
1d53c     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1d540     24 00 90 5D |  if_ne	jmp	#LR__2491
1d544     00 B0 06 F6 | 	mov	local06, #0
1d548     E7 92 02 FB | 	rdlong	arg01, fp
1d54c     53 95 02 F6 | 	mov	arg02, local01
1d550     01 96 06 F6 | 	mov	arg03, #1
1d554     84 9F B0 FD | 	call	#__system___float_cmp
1d558     00 7A 56 F2 | 	cmps	result1, #0 wc
1d55c     00 B0 26 C6 |  if_b	not	local06, #0
1d560     E7 B0 62 FC | 	wrlong	local06, fp
1d564     A8 02 90 FD | 	jmp	#LR__2499
1d568                 | LR__2491
1d568                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
1d568     08 CE 05 F1 | 	add	fp, #8
1d56c     E7 B0 02 FB | 	rdlong	local06, fp
1d570     08 CE 85 F1 | 	sub	fp, #8
1d574     1E B0 0E F2 | 	cmp	local06, #30 wz
1d578     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d57c     3C 00 90 5D |  if_ne	jmp	#LR__2492
1d580     00 B0 06 F6 | 	mov	local06, #0
1d584     E7 AC 02 FB | 	rdlong	local04, fp
1d588     53 93 52 F6 | 	abs	arg01, local01 wc
1d58c     1F B2 C6 C9 |  if_b	decod	local07, #31
1d590     00 B2 06 36 |  if_ae	mov	local07, #0
1d594     0C 97 B0 FD | 	call	#__system___float_fromuns
1d598     59 7B 62 F5 | 	xor	result1, local07
1d59c     3D 95 02 F6 | 	mov	arg02, result1
1d5a0     56 93 02 F6 | 	mov	arg01, local04
1d5a4     01 96 06 F6 | 	mov	arg03, #1
1d5a8     30 9F B0 FD | 	call	#__system___float_cmp
1d5ac     00 7A 56 F2 | 	cmps	result1, #0 wc
1d5b0     00 B0 26 C6 |  if_b	not	local06, #0
1d5b4     E7 B0 62 FC | 	wrlong	local06, fp
1d5b8     54 02 90 FD | 	jmp	#LR__2499
1d5bc                 | LR__2492
1d5bc                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
1d5bc     08 CE 05 F1 | 	add	fp, #8
1d5c0     E7 B0 02 FB | 	rdlong	local06, fp
1d5c4     08 CE 85 F1 | 	sub	fp, #8
1d5c8     1E B0 0E F2 | 	cmp	local06, #30 wz
1d5cc     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d5d0     30 00 90 5D |  if_ne	jmp	#LR__2493
1d5d4     00 B0 06 F6 | 	mov	local06, #0
1d5d8     E7 AC 02 FB | 	rdlong	local04, fp
1d5dc     53 93 02 F6 | 	mov	arg01, local01
1d5e0     C0 96 B0 FD | 	call	#__system___float_fromuns
1d5e4     3D 95 02 F6 | 	mov	arg02, result1
1d5e8     56 93 02 F6 | 	mov	arg01, local04
1d5ec     01 96 06 F6 | 	mov	arg03, #1
1d5f0     E8 9E B0 FD | 	call	#__system___float_cmp
1d5f4     00 7A 56 F2 | 	cmps	result1, #0 wc
1d5f8     00 B0 26 C6 |  if_b	not	local06, #0
1d5fc     E7 B0 62 FC | 	wrlong	local06, fp
1d600     0C 02 90 FD | 	jmp	#LR__2499
1d604                 | LR__2493
1d604                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
1d604     08 CE 05 F1 | 	add	fp, #8
1d608     E7 B0 02 FB | 	rdlong	local06, fp
1d60c     08 CE 85 F1 | 	sub	fp, #8
1d610     1C B0 0E F2 | 	cmp	local06, #28 wz
1d614     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1d618     3C 00 90 5D |  if_ne	jmp	#LR__2494
1d61c     00 B0 06 F6 | 	mov	local06, #0
1d620     E7 92 02 FB | 	rdlong	arg01, fp
1d624     49 93 52 F6 | 	abs	arg01, arg01 wc
1d628     1F B2 C6 C9 |  if_b	decod	local07, #31
1d62c     00 B2 06 36 |  if_ae	mov	local07, #0
1d630     70 96 B0 FD | 	call	#__system___float_fromuns
1d634     59 7B 62 F5 | 	xor	result1, local07
1d638     3D 93 02 F6 | 	mov	arg01, result1
1d63c     53 95 02 F6 | 	mov	arg02, local01
1d640     01 96 06 F6 | 	mov	arg03, #1
1d644     94 9E B0 FD | 	call	#__system___float_cmp
1d648     00 7A 56 F2 | 	cmps	result1, #0 wc
1d64c     00 B0 26 C6 |  if_b	not	local06, #0
1d650     E7 B0 62 FC | 	wrlong	local06, fp
1d654     B8 01 90 FD | 	jmp	#LR__2499
1d658                 | LR__2494
1d658                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
1d658     08 CE 05 F1 | 	add	fp, #8
1d65c     E7 B0 02 FB | 	rdlong	local06, fp
1d660     08 CE 85 F1 | 	sub	fp, #8
1d664     1C B0 0E F2 | 	cmp	local06, #28 wz
1d668     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d66c     E7 AC 02 AB |  if_e	rdlong	local04, fp
1d670     53 AD 52 A2 |  if_e	cmps	local04, local01 wc
1d674     58 B1 A2 A1 |  if_e	subx	local06, local06
1d678     E7 B0 62 AC |  if_e	wrlong	local06, fp
1d67c     90 01 90 AD |  if_e	jmp	#LR__2499
1d680                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
1d680     08 CE 05 F1 | 	add	fp, #8
1d684     E7 B0 02 FB | 	rdlong	local06, fp
1d688     08 CE 85 F1 | 	sub	fp, #8
1d68c     1C B0 0E F2 | 	cmp	local06, #28 wz
1d690     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d694     E7 AC 02 AB |  if_e	rdlong	local04, fp
1d698     53 AD 52 A2 |  if_e	cmps	local04, local01 wc
1d69c     58 B1 A2 A1 |  if_e	subx	local06, local06
1d6a0     E7 B0 62 AC |  if_e	wrlong	local06, fp
1d6a4     68 01 90 AD |  if_e	jmp	#LR__2499
1d6a8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
1d6a8     08 CE 05 F1 | 	add	fp, #8
1d6ac     E7 B0 02 FB | 	rdlong	local06, fp
1d6b0     08 CE 85 F1 | 	sub	fp, #8
1d6b4     1D B0 0E F2 | 	cmp	local06, #29 wz
1d6b8     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1d6bc     2C 00 90 5D |  if_ne	jmp	#LR__2495
1d6c0     00 B0 06 F6 | 	mov	local06, #0
1d6c4     E7 92 02 FB | 	rdlong	arg01, fp
1d6c8     D8 95 B0 FD | 	call	#__system___float_fromuns
1d6cc     3D 93 02 F6 | 	mov	arg01, result1
1d6d0     53 95 02 F6 | 	mov	arg02, local01
1d6d4     01 96 06 F6 | 	mov	arg03, #1
1d6d8     00 9E B0 FD | 	call	#__system___float_cmp
1d6dc     00 7A 56 F2 | 	cmps	result1, #0 wc
1d6e0     00 B0 26 C6 |  if_b	not	local06, #0
1d6e4     E7 B0 62 FC | 	wrlong	local06, fp
1d6e8     24 01 90 FD | 	jmp	#LR__2499
1d6ec                 | LR__2495
1d6ec                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
1d6ec     08 CE 05 F1 | 	add	fp, #8
1d6f0     E7 B0 02 FB | 	rdlong	local06, fp
1d6f4     08 CE 85 F1 | 	sub	fp, #8
1d6f8     1D B0 0E F2 | 	cmp	local06, #29 wz
1d6fc     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d700     E7 AC 02 AB |  if_e	rdlong	local04, fp
1d704     53 AD 52 A2 |  if_e	cmps	local04, local01 wc
1d708     58 B1 A2 A1 |  if_e	subx	local06, local06
1d70c     E7 B0 62 AC |  if_e	wrlong	local06, fp
1d710     FC 00 90 AD |  if_e	jmp	#LR__2499
1d714                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
1d714     08 CE 05 F1 | 	add	fp, #8
1d718     E7 B0 02 FB | 	rdlong	local06, fp
1d71c     08 CE 85 F1 | 	sub	fp, #8
1d720     1D B0 0E F2 | 	cmp	local06, #29 wz
1d724     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d728     E7 AC 02 AB |  if_e	rdlong	local04, fp
1d72c     53 AD 12 A2 |  if_e	cmp	local04, local01 wc
1d730     58 B1 A2 A1 |  if_e	subx	local06, local06
1d734     E7 B0 62 AC |  if_e	wrlong	local06, fp
1d738     D4 00 90 AD |  if_e	jmp	#LR__2499
1d73c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
1d73c     08 CE 05 F1 | 	add	fp, #8
1d740     E7 B0 02 FB | 	rdlong	local06, fp
1d744     08 CE 85 F1 | 	sub	fp, #8
1d748     2B B0 0E F2 | 	cmp	local06, #43 wz
1d74c     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1d750     28 00 90 5D |  if_ne	jmp	#LR__2496
1d754     00 B0 06 F6 | 	mov	local06, #0
1d758     E7 92 02 FB | 	rdlong	arg01, fp
1d75c     80 00 BF FD | 	call	#_convertstring
1d760     3D 93 02 F6 | 	mov	arg01, result1
1d764     53 95 02 F6 | 	mov	arg02, local01
1d768     94 72 B0 FD | 	call	#__system___string_cmp
1d76c     00 7A 56 F2 | 	cmps	result1, #0 wc
1d770     00 B0 26 C6 |  if_b	not	local06, #0
1d774     E7 B0 62 FC | 	wrlong	local06, fp
1d778     94 00 90 FD | 	jmp	#LR__2499
1d77c                 | LR__2496
1d77c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
1d77c     08 CE 05 F1 | 	add	fp, #8
1d780     E7 B0 02 FB | 	rdlong	local06, fp
1d784     08 CE 85 F1 | 	sub	fp, #8
1d788     1F B0 0E F2 | 	cmp	local06, #31 wz
1d78c     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1d790     2C 00 90 5D |  if_ne	jmp	#LR__2497
1d794     00 B0 06 F6 | 	mov	local06, #0
1d798     E7 AC 02 FB | 	rdlong	local04, fp
1d79c     53 93 02 F6 | 	mov	arg01, local01
1d7a0     3C 00 BF FD | 	call	#_convertstring
1d7a4     3D 95 02 F6 | 	mov	arg02, result1
1d7a8     56 93 02 F6 | 	mov	arg01, local04
1d7ac     50 72 B0 FD | 	call	#__system___string_cmp
1d7b0     00 7A 56 F2 | 	cmps	result1, #0 wc
1d7b4     00 B0 26 C6 |  if_b	not	local06, #0
1d7b8     E7 B0 62 FC | 	wrlong	local06, fp
1d7bc     50 00 90 FD | 	jmp	#LR__2499
1d7c0                 | LR__2497
1d7c0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
1d7c0     08 CE 05 F1 | 	add	fp, #8
1d7c4     E7 B0 02 FB | 	rdlong	local06, fp
1d7c8     08 CE 85 F1 | 	sub	fp, #8
1d7cc     2B B0 0E F2 | 	cmp	local06, #43 wz
1d7d0     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1d7d4     34 00 90 5D |  if_ne	jmp	#LR__2498
1d7d8     00 B0 06 F6 | 	mov	local06, #0
1d7dc     E7 92 02 FB | 	rdlong	arg01, fp
1d7e0     FC FF BE FD | 	call	#_convertstring
1d7e4     3D AD 02 F6 | 	mov	local04, result1
1d7e8     53 93 02 F6 | 	mov	arg01, local01
1d7ec     F0 FF BE FD | 	call	#_convertstring
1d7f0     3D 95 02 F6 | 	mov	arg02, result1
1d7f4     56 93 02 F6 | 	mov	arg01, local04
1d7f8     04 72 B0 FD | 	call	#__system___string_cmp
1d7fc     00 7A 56 F2 | 	cmps	result1, #0 wc
1d800     00 B0 26 C6 |  if_b	not	local06, #0
1d804     E7 B0 62 FC | 	wrlong	local06, fp
1d808     04 00 90 FD | 	jmp	#LR__2499
1d80c                 | LR__2498
1d80c     E7 00 68 FC | 	wrlong	#0, fp
1d810                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1d810                 | LR__2499
1d810     08 CE 05 F1 | 	add	fp, #8
1d814     E7 38 68 FC | 	wrlong	#28, fp
1d818     08 CE 85 F1 | 	sub	fp, #8
1d81c     E7 92 02 F6 | 	mov	arg01, fp
1d820     DC FE BE FD | 	call	#_push
1d824     E7 F0 03 F6 | 	mov	ptra, fp
1d828     F2 00 A0 FD | 	call	#popregs_
1d82c                 | _do_lt_ret
1d82c     2D 00 64 FD | 	ret
1d830                 | 
1d830                 | ' 
1d830                 | ' '--------------------------------- minus (-)
1d830                 | ' 
1d830                 | ' sub do_minus
1d830                 | _do_minus
1d830     07 CA 05 F6 | 	mov	COUNT_, #7
1d834     E8 00 A0 FD | 	call	#pushregs_
1d838     18 F0 07 F1 | 	add	ptra, #24
1d83c     30 FE BE FD | 	call	#_pop
1d840     3D A7 02 F6 | 	mov	local01, result1
1d844     3E AD 02 F6 | 	mov	local04, result2
1d848     3F AF 02 F6 | 	mov	local05, result3
1d84c     56 A9 02 F6 | 	mov	local02, local04
1d850     57 AB 02 F6 | 	mov	local03, local05
1d854     18 FE BE FD | 	call	#_pop
1d858     3F AF 02 F6 | 	mov	local05, result3
1d85c     E7 7A 62 FC | 	wrlong	result1, fp
1d860     04 CE 05 F1 | 	add	fp, #4
1d864     E7 7C 62 FC | 	wrlong	result2, fp
1d868     04 CE 05 F1 | 	add	fp, #4
1d86c     E7 AE 62 FC | 	wrlong	local05, fp
1d870                 | ' 
1d870                 | ' t2=pop()
1d870                 | ' t1=pop()
1d870                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
1d870     08 CE 85 F1 | 	sub	fp, #8
1d874     1D AE 0E F2 | 	cmp	local05, #29 wz
1d878     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d87c     30 00 90 5D |  if_ne	jmp	#LR__2500
1d880                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
1d880     E7 B0 02 FB | 	rdlong	local06, fp
1d884     58 A7 12 F2 | 	cmp	local01, local06 wc
1d888     53 B1 82 C1 |  if_b	sub	local06, local01
1d88c     E7 B0 62 CC |  if_b	wrlong	local06, fp
1d890     18 02 90 CD |  if_b	jmp	#LR__2507
1d894     E7 B0 02 FB | 	rdlong	local06, fp
1d898     53 B1 82 F1 | 	sub	local06, local01
1d89c     E7 B0 62 FC | 	wrlong	local06, fp
1d8a0     08 CE 05 F1 | 	add	fp, #8
1d8a4     E7 38 68 FC | 	wrlong	#28, fp
1d8a8     08 CE 85 F1 | 	sub	fp, #8
1d8ac     FC 01 90 FD | 	jmp	#LR__2507
1d8b0                 | LR__2500
1d8b0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
1d8b0     08 CE 05 F1 | 	add	fp, #8
1d8b4     E7 B0 02 FB | 	rdlong	local06, fp
1d8b8     08 CE 85 F1 | 	sub	fp, #8
1d8bc     1D B0 0E F2 | 	cmp	local06, #29 wz
1d8c0     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d8c4     1C 00 90 5D |  if_ne	jmp	#LR__2501
1d8c8     E7 B0 02 FB | 	rdlong	local06, fp
1d8cc     53 B1 82 F1 | 	sub	local06, local01
1d8d0     E7 B0 62 FC | 	wrlong	local06, fp
1d8d4     08 CE 05 F1 | 	add	fp, #8
1d8d8     E7 38 68 FC | 	wrlong	#28, fp
1d8dc     08 CE 85 F1 | 	sub	fp, #8
1d8e0     C8 01 90 FD | 	jmp	#LR__2507
1d8e4                 | LR__2501
1d8e4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1d8e4     08 CE 05 F1 | 	add	fp, #8
1d8e8     E7 B0 02 FB | 	rdlong	local06, fp
1d8ec     08 CE 85 F1 | 	sub	fp, #8
1d8f0     1D B0 0E F2 | 	cmp	local06, #29 wz
1d8f4     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1d8f8     2C 00 90 5D |  if_ne	jmp	#LR__2502
1d8fc     E7 92 02 FB | 	rdlong	arg01, fp
1d900     A0 93 B0 FD | 	call	#__system___float_fromuns
1d904     3D 93 02 F6 | 	mov	arg01, result1
1d908     53 95 02 F6 | 	mov	arg02, local01
1d90c     1F 94 E6 F4 | 	bitnot	arg02, #31
1d910     C4 93 B0 FD | 	call	#__system___float_add
1d914     E7 7A 62 FC | 	wrlong	result1, fp
1d918     08 CE 05 F1 | 	add	fp, #8
1d91c     E7 3C 68 FC | 	wrlong	#30, fp
1d920     08 CE 85 F1 | 	sub	fp, #8
1d924     84 01 90 FD | 	jmp	#LR__2507
1d928                 | LR__2502
1d928                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
1d928     08 CE 05 F1 | 	add	fp, #8
1d92c     E7 B0 02 FB | 	rdlong	local06, fp
1d930     08 CE 85 F1 | 	sub	fp, #8
1d934     1C B0 0E F2 | 	cmp	local06, #28 wz
1d938     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d93c     E7 B0 02 AB |  if_e	rdlong	local06, fp
1d940     53 B1 82 A1 |  if_e	sub	local06, local01
1d944     E7 B0 62 AC |  if_e	wrlong	local06, fp
1d948     60 01 90 AD |  if_e	jmp	#LR__2507
1d94c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
1d94c     08 CE 05 F1 | 	add	fp, #8
1d950     E7 B0 02 FB | 	rdlong	local06, fp
1d954     08 CE 85 F1 | 	sub	fp, #8
1d958     1C B0 0E F2 | 	cmp	local06, #28 wz
1d95c     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d960     E7 B0 02 AB |  if_e	rdlong	local06, fp
1d964     53 B1 82 A1 |  if_e	sub	local06, local01
1d968     E7 B0 62 AC |  if_e	wrlong	local06, fp
1d96c     3C 01 90 AD |  if_e	jmp	#LR__2507
1d970                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1d970     08 CE 05 F1 | 	add	fp, #8
1d974     E7 B0 02 FB | 	rdlong	local06, fp
1d978     08 CE 85 F1 | 	sub	fp, #8
1d97c     1C B0 0E F2 | 	cmp	local06, #28 wz
1d980     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1d984     3C 00 90 5D |  if_ne	jmp	#LR__2503
1d988     E7 92 02 FB | 	rdlong	arg01, fp
1d98c     49 93 52 F6 | 	abs	arg01, arg01 wc
1d990     1F B2 C6 C9 |  if_b	decod	local07, #31
1d994     00 B2 06 36 |  if_ae	mov	local07, #0
1d998     08 93 B0 FD | 	call	#__system___float_fromuns
1d99c     59 7B 62 F5 | 	xor	result1, local07
1d9a0     3D 93 02 F6 | 	mov	arg01, result1
1d9a4     53 95 02 F6 | 	mov	arg02, local01
1d9a8     1F 94 E6 F4 | 	bitnot	arg02, #31
1d9ac     28 93 B0 FD | 	call	#__system___float_add
1d9b0     E7 7A 62 FC | 	wrlong	result1, fp
1d9b4     08 CE 05 F1 | 	add	fp, #8
1d9b8     E7 3C 68 FC | 	wrlong	#30, fp
1d9bc     08 CE 85 F1 | 	sub	fp, #8
1d9c0     E8 00 90 FD | 	jmp	#LR__2507
1d9c4                 | LR__2503
1d9c4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
1d9c4     08 CE 05 F1 | 	add	fp, #8
1d9c8     E7 B0 02 FB | 	rdlong	local06, fp
1d9cc     08 CE 85 F1 | 	sub	fp, #8
1d9d0     1E B0 0E F2 | 	cmp	local06, #30 wz
1d9d4     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d9d8     24 00 90 5D |  if_ne	jmp	#LR__2504
1d9dc     E7 B0 02 FB | 	rdlong	local06, fp
1d9e0     53 93 02 F6 | 	mov	arg01, local01
1d9e4     BC 92 B0 FD | 	call	#__system___float_fromuns
1d9e8     3D 95 02 F6 | 	mov	arg02, result1
1d9ec     58 93 02 F6 | 	mov	arg01, local06
1d9f0     1F 94 E6 F4 | 	bitnot	arg02, #31
1d9f4     E0 92 B0 FD | 	call	#__system___float_add
1d9f8     E7 7A 62 FC | 	wrlong	result1, fp
1d9fc     AC 00 90 FD | 	jmp	#LR__2507
1da00                 | LR__2504
1da00                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
1da00     08 CE 05 F1 | 	add	fp, #8
1da04     E7 B0 02 FB | 	rdlong	local06, fp
1da08     08 CE 85 F1 | 	sub	fp, #8
1da0c     1E B0 0E F2 | 	cmp	local06, #30 wz
1da10     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1da14     30 00 90 5D |  if_ne	jmp	#LR__2505
1da18     E7 B0 02 FB | 	rdlong	local06, fp
1da1c     53 93 52 F6 | 	abs	arg01, local01 wc
1da20     1F B2 C6 C9 |  if_b	decod	local07, #31
1da24     00 B2 06 36 |  if_ae	mov	local07, #0
1da28     78 92 B0 FD | 	call	#__system___float_fromuns
1da2c     59 7B 62 F5 | 	xor	result1, local07
1da30     3D 95 02 F6 | 	mov	arg02, result1
1da34     58 93 02 F6 | 	mov	arg01, local06
1da38     1F 94 E6 F4 | 	bitnot	arg02, #31
1da3c     98 92 B0 FD | 	call	#__system___float_add
1da40     E7 7A 62 FC | 	wrlong	result1, fp
1da44     64 00 90 FD | 	jmp	#LR__2507
1da48                 | LR__2505
1da48                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
1da48     08 CE 05 F1 | 	add	fp, #8
1da4c     E7 B0 02 FB | 	rdlong	local06, fp
1da50     08 CE 85 F1 | 	sub	fp, #8
1da54     1E B0 0E F2 | 	cmp	local06, #30 wz
1da58     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1da5c     18 00 90 5D |  if_ne	jmp	#LR__2506
1da60     E7 92 02 FB | 	rdlong	arg01, fp
1da64     53 95 02 F6 | 	mov	arg02, local01
1da68     1F 94 E6 F4 | 	bitnot	arg02, #31
1da6c     68 92 B0 FD | 	call	#__system___float_add
1da70     E7 7A 62 FC | 	wrlong	result1, fp
1da74     34 00 90 FD | 	jmp	#LR__2507
1da78                 | LR__2506
1da78                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
1da78     08 CE 05 F1 | 	add	fp, #8
1da7c     E7 B0 02 FB | 	rdlong	local06, fp
1da80     08 CE 85 F1 | 	sub	fp, #8
1da84     1F B0 0E F2 | 	cmp	local06, #31 wz
1da88     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1da8c     E7 06 68 AC |  if_e	wrlong	#3, fp
1da90     08 CE 05 A1 |  if_e	add	fp, #8
1da94     E7 FE 69 AC |  if_e	wrlong	#255, fp
1da98     08 CE 85 A1 |  if_e	sub	fp, #8
1da9c     E7 0A 68 5C |  if_ne	wrlong	#5, fp
1daa0     08 CE 05 51 |  if_ne	add	fp, #8
1daa4     E7 FE 69 5C |  if_ne	wrlong	#255, fp
1daa8     08 CE 85 51 |  if_ne	sub	fp, #8
1daac                 | LR__2507
1daac     E7 92 02 F6 | 	mov	arg01, fp
1dab0     4C FC BE FD | 	call	#_push
1dab4     E7 F0 03 F6 | 	mov	ptra, fp
1dab8     F2 00 A0 FD | 	call	#popregs_
1dabc                 | _do_minus_ret
1dabc     2D 00 64 FD | 	ret
1dac0                 | 
1dac0                 | ' 
1dac0                 | ' '--------------------------------- negative (-), one argument negative
1dac0                 | ' 
1dac0                 | ' sub do_negative
1dac0                 | _do_negative
1dac0     02 CA 05 F6 | 	mov	COUNT_, #2
1dac4     E8 00 A0 FD | 	call	#pushregs_
1dac8     0C F0 07 F1 | 	add	ptra, #12
1dacc     A0 FB BE FD | 	call	#_pop
1dad0     3F A7 02 F6 | 	mov	local01, result3
1dad4     E7 7A 62 FC | 	wrlong	result1, fp
1dad8     04 CE 05 F1 | 	add	fp, #4
1dadc     E7 7C 62 FC | 	wrlong	result2, fp
1dae0     04 CE 05 F1 | 	add	fp, #4
1dae4     E7 A6 62 FC | 	wrlong	local01, fp
1dae8                 | ' 
1dae8                 | ' t1=pop()
1dae8                 | ' if t1.result_type=result_int then 
1dae8     08 CE 85 F1 | 	sub	fp, #8
1daec     1C A6 0E F2 | 	cmp	local01, #28 wz
1daf0     E7 A8 02 AB |  if_e	rdlong	local02, fp
1daf4     54 A7 62 A6 |  if_e	neg	local01, local02
1daf8     E7 A6 62 AC |  if_e	wrlong	local01, fp
1dafc     5C 00 90 AD |  if_e	jmp	#LR__2512
1db00     08 CE 05 F1 | 	add	fp, #8
1db04     E7 A6 02 FB | 	rdlong	local01, fp
1db08     08 CE 85 F1 | 	sub	fp, #8
1db0c     1D A6 0E F2 | 	cmp	local01, #29 wz
1db10     1C 00 90 5D |  if_ne	jmp	#LR__2510
1db14     E7 A8 02 FB | 	rdlong	local02, fp
1db18     54 A7 62 F6 | 	neg	local01, local02
1db1c     E7 A6 62 FC | 	wrlong	local01, fp
1db20     08 CE 05 F1 | 	add	fp, #8
1db24     E7 38 68 FC | 	wrlong	#28, fp
1db28     08 CE 85 F1 | 	sub	fp, #8
1db2c     2C 00 90 FD | 	jmp	#LR__2511
1db30                 | LR__2510
1db30     08 CE 05 F1 | 	add	fp, #8
1db34     E7 A6 02 FB | 	rdlong	local01, fp
1db38     08 CE 85 F1 | 	sub	fp, #8
1db3c     1E A6 0E F2 | 	cmp	local01, #30 wz
1db40     E7 7A 02 AB |  if_e	rdlong	result1, fp
1db44     1F 7A E6 A4 |  if_e	bitnot	result1, #31
1db48     E7 7A 62 AC |  if_e	wrlong	result1, fp
1db4c     08 CE 05 51 |  if_ne	add	fp, #8
1db50     E7 FE 69 5C |  if_ne	wrlong	#255, fp
1db54     08 CE 85 51 |  if_ne	sub	fp, #8
1db58     E7 50 68 5C |  if_ne	wrlong	#40, fp
1db5c                 | LR__2511
1db5c                 | LR__2512
1db5c     E7 92 02 F6 | 	mov	arg01, fp
1db60     9C FB BE FD | 	call	#_push
1db64     E7 F0 03 F6 | 	mov	ptra, fp
1db68     F2 00 A0 FD | 	call	#popregs_
1db6c                 | _do_negative_ret
1db6c     2D 00 64 FD | 	ret
1db70                 | 
1db70                 | ' 
1db70                 | ' '--------------------------------- MOD (modulo)
1db70                 | ' 
1db70                 | ' sub do_mod 
1db70                 | _do_mod
1db70     04 CA 05 F6 | 	mov	COUNT_, #4
1db74     E8 00 A0 FD | 	call	#pushregs_
1db78     18 F0 07 F1 | 	add	ptra, #24
1db7c     F0 FA BE FD | 	call	#_pop
1db80     3D A7 02 F6 | 	mov	local01, result1
1db84     3E 11 03 F6 | 	mov	muldivb_, result2
1db88     3F 0F 03 F6 | 	mov	muldiva_, result3
1db8c     88 A9 02 F6 | 	mov	local02, muldivb_
1db90     87 AB 02 F6 | 	mov	local03, muldiva_
1db94     D8 FA BE FD | 	call	#_pop
1db98     E7 7A 62 FC | 	wrlong	result1, fp
1db9c     04 CE 05 F1 | 	add	fp, #4
1dba0     E7 7C 62 FC | 	wrlong	result2, fp
1dba4     04 CE 05 F1 | 	add	fp, #4
1dba8     E7 7E 62 FC | 	wrlong	result3, fp
1dbac                 | ' 
1dbac                 | ' t2=pop()
1dbac                 | ' t1=pop()
1dbac                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
1dbac     08 CE 85 F1 | 	sub	fp, #8
1dbb0     1F 7E 0E F2 | 	cmp	result3, #31 wz
1dbb4     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1dbb8     E7 14 68 AC |  if_e	wrlong	#10, fp
1dbbc     08 CE 05 A1 |  if_e	add	fp, #8
1dbc0     E7 FE 69 AC |  if_e	wrlong	#255, fp
1dbc4     08 CE 85 A1 |  if_e	sub	fp, #8
1dbc8     14 01 90 AD |  if_e	jmp	#LR__2525
1dbcc                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1dbcc     08 CE 05 F1 | 	add	fp, #8
1dbd0     E7 10 03 FB | 	rdlong	muldivb_, fp
1dbd4     08 CE 85 F1 | 	sub	fp, #8
1dbd8     1E 10 0F F2 | 	cmp	muldivb_, #30 wz
1dbdc     1C 00 90 5D |  if_ne	jmp	#LR__2520
1dbe0     08 CE 05 F1 | 	add	fp, #8
1dbe4     E7 38 68 FC | 	wrlong	#28, fp
1dbe8     08 CE 85 F1 | 	sub	fp, #8
1dbec     E7 92 02 FB | 	rdlong	arg01, fp
1dbf0     00 94 06 F6 | 	mov	arg02, #0
1dbf4     78 99 B0 FD | 	call	#__system___float_tointeger
1dbf8     E7 7A 62 FC | 	wrlong	result1, fp
1dbfc                 | LR__2520
1dbfc                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1dbfc     1E AA 0E F2 | 	cmp	local03, #30 wz
1dc00     14 00 90 5D |  if_ne	jmp	#LR__2521
1dc04     1C AA 06 F6 | 	mov	local03, #28
1dc08     53 93 02 F6 | 	mov	arg01, local01
1dc0c     00 94 06 F6 | 	mov	arg02, #0
1dc10     5C 99 B0 FD | 	call	#__system___float_tointeger
1dc14     3D A7 02 F6 | 	mov	local01, result1
1dc18                 | LR__2521
1dc18     08 CE 05 F1 | 	add	fp, #8
1dc1c     E7 AC 02 FB | 	rdlong	local04, fp
1dc20     08 CE 85 F1 | 	sub	fp, #8
1dc24     1D AC 0E F2 | 	cmp	local04, #29 wz
1dc28     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1dc2c     E7 AC 02 AB |  if_e	rdlong	local04, fp
1dc30     53 AD 12 AD |  if_e	qdiv	local04, local01
1dc34                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
1dc34     19 AC 62 AD |  if_e	getqy	local04
1dc38     E7 AC 62 AC |  if_e	wrlong	local04, fp
1dc3c     A0 00 90 AD |  if_e	jmp	#LR__2525
1dc40                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
1dc40     08 CE 05 F1 | 	add	fp, #8
1dc44     E7 AC 02 FB | 	rdlong	local04, fp
1dc48     08 CE 85 F1 | 	sub	fp, #8
1dc4c     1D AC 0E F2 | 	cmp	local04, #29 wz
1dc50     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1dc54     20 00 90 5D |  if_ne	jmp	#LR__2522
1dc58     E7 AC 02 FB | 	rdlong	local04, fp
1dc5c     53 AD 12 FD | 	qdiv	local04, local01
1dc60     19 AC 62 FD | 	getqy	local04
1dc64     E7 AC 62 FC | 	wrlong	local04, fp
1dc68     08 CE 05 F1 | 	add	fp, #8
1dc6c     E7 38 68 FC | 	wrlong	#28, fp
1dc70     08 CE 85 F1 | 	sub	fp, #8
1dc74     68 00 90 FD | 	jmp	#LR__2525
1dc78                 | LR__2522
1dc78                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
1dc78     08 CE 05 F1 | 	add	fp, #8
1dc7c     E7 AC 02 FB | 	rdlong	local04, fp
1dc80     08 CE 85 F1 | 	sub	fp, #8
1dc84     1C AC 0E F2 | 	cmp	local04, #28 wz
1dc88     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1dc8c     14 00 90 5D |  if_ne	jmp	#LR__2523
1dc90     E7 0E 03 FB | 	rdlong	muldiva_, fp
1dc94     53 11 03 F6 | 	mov	muldivb_, local01
1dc98     FA 00 A0 FD | 	call	#divide_
1dc9c     E7 0E 63 FC | 	wrlong	muldiva_, fp
1dca0     3C 00 90 FD | 	jmp	#LR__2525
1dca4                 | LR__2523
1dca4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
1dca4     08 CE 05 F1 | 	add	fp, #8
1dca8     E7 AC 02 FB | 	rdlong	local04, fp
1dcac     08 CE 85 F1 | 	sub	fp, #8
1dcb0     1C AC 0E F2 | 	cmp	local04, #28 wz
1dcb4     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1dcb8     14 00 90 5D |  if_ne	jmp	#LR__2524
1dcbc     E7 0E 03 FB | 	rdlong	muldiva_, fp
1dcc0     53 11 03 F6 | 	mov	muldivb_, local01
1dcc4     FA 00 A0 FD | 	call	#divide_
1dcc8     E7 0E 63 FC | 	wrlong	muldiva_, fp
1dccc     10 00 90 FD | 	jmp	#LR__2525
1dcd0                 | LR__2524
1dcd0     E7 16 68 FC | 	wrlong	#11, fp
1dcd4     08 CE 05 F1 | 	add	fp, #8
1dcd8     E7 FE 69 FC | 	wrlong	#255, fp
1dcdc     08 CE 85 F1 | 	sub	fp, #8
1dce0                 | LR__2525
1dce0     E7 92 02 F6 | 	mov	arg01, fp
1dce4     18 FA BE FD | 	call	#_push
1dce8     E7 F0 03 F6 | 	mov	ptra, fp
1dcec     F2 00 A0 FD | 	call	#popregs_
1dcf0                 | _do_mod_ret
1dcf0     2D 00 64 FD | 	ret
1dcf4                 | 
1dcf4                 | ' 
1dcf4                 | ' '--------------------------------- mul (*)
1dcf4                 | ' 
1dcf4                 | ' sub do_mul
1dcf4                 | _do_mul
1dcf4     07 CA 05 F6 | 	mov	COUNT_, #7
1dcf8     E8 00 A0 FD | 	call	#pushregs_
1dcfc     18 F0 07 F1 | 	add	ptra, #24
1dd00     6C F9 BE FD | 	call	#_pop
1dd04     3D A7 02 F6 | 	mov	local01, result1
1dd08     3E AD 02 F6 | 	mov	local04, result2
1dd0c     3F 95 02 F6 | 	mov	arg02, result3
1dd10     56 A9 02 F6 | 	mov	local02, local04
1dd14     4A AB 02 F6 | 	mov	local03, arg02
1dd18     54 F9 BE FD | 	call	#_pop
1dd1c     3F AF 02 F6 | 	mov	local05, result3
1dd20     E7 7A 62 FC | 	wrlong	result1, fp
1dd24     04 CE 05 F1 | 	add	fp, #4
1dd28     E7 7C 62 FC | 	wrlong	result2, fp
1dd2c     04 CE 05 F1 | 	add	fp, #4
1dd30     E7 AE 62 FC | 	wrlong	local05, fp
1dd34     08 CE 85 F1 | 	sub	fp, #8
1dd38     1D AE 0E F2 | 	cmp	local05, #29 wz
1dd3c     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1dd40     E7 AC 02 AB |  if_e	rdlong	local04, fp
1dd44     53 AD 02 AD |  if_e	qmul	local04, local01
1dd48                 | ' 
1dd48                 | ' t2=pop()
1dd48                 | ' t1=pop()
1dd48                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
1dd48     18 B0 62 AD |  if_e	getqx	local06
1dd4c     E7 B0 62 AC |  if_e	wrlong	local06, fp
1dd50     F4 01 90 AD |  if_e	jmp	#LR__2536
1dd54                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
1dd54     08 CE 05 F1 | 	add	fp, #8
1dd58     E7 B0 02 FB | 	rdlong	local06, fp
1dd5c     08 CE 85 F1 | 	sub	fp, #8
1dd60     1D B0 0E F2 | 	cmp	local06, #29 wz
1dd64     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1dd68     20 00 90 5D |  if_ne	jmp	#LR__2530
1dd6c     E7 AC 02 FB | 	rdlong	local04, fp
1dd70     53 AD 02 FD | 	qmul	local04, local01
1dd74     18 B0 62 FD | 	getqx	local06
1dd78     E7 B0 62 FC | 	wrlong	local06, fp
1dd7c     08 CE 05 F1 | 	add	fp, #8
1dd80     E7 38 68 FC | 	wrlong	#28, fp
1dd84     08 CE 85 F1 | 	sub	fp, #8
1dd88     BC 01 90 FD | 	jmp	#LR__2536
1dd8c                 | LR__2530
1dd8c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1dd8c     08 CE 05 F1 | 	add	fp, #8
1dd90     E7 B0 02 FB | 	rdlong	local06, fp
1dd94     08 CE 85 F1 | 	sub	fp, #8
1dd98     1D B0 0E F2 | 	cmp	local06, #29 wz
1dd9c     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1dda0     28 00 90 5D |  if_ne	jmp	#LR__2531
1dda4     E7 92 02 FB | 	rdlong	arg01, fp
1dda8     F8 8E B0 FD | 	call	#__system___float_fromuns
1ddac     3D 93 02 F6 | 	mov	arg01, result1
1ddb0     53 95 02 F6 | 	mov	arg02, local01
1ddb4     F0 92 B0 FD | 	call	#__system___float_mul
1ddb8     E7 7A 62 FC | 	wrlong	result1, fp
1ddbc     08 CE 05 F1 | 	add	fp, #8
1ddc0     E7 3C 68 FC | 	wrlong	#30, fp
1ddc4     08 CE 85 F1 | 	sub	fp, #8
1ddc8     7C 01 90 FD | 	jmp	#LR__2536
1ddcc                 | LR__2531
1ddcc     08 CE 05 F1 | 	add	fp, #8
1ddd0     E7 B0 02 FB | 	rdlong	local06, fp
1ddd4     08 CE 85 F1 | 	sub	fp, #8
1ddd8     1C B0 0E F2 | 	cmp	local06, #28 wz
1dddc     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1dde0     E7 AC 02 AB |  if_e	rdlong	local04, fp
1dde4     53 AD 02 AD |  if_e	qmul	local04, local01
1dde8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
1dde8     18 B0 62 AD |  if_e	getqx	local06
1ddec     E7 B0 62 AC |  if_e	wrlong	local06, fp
1ddf0     54 01 90 AD |  if_e	jmp	#LR__2536
1ddf4     08 CE 05 F1 | 	add	fp, #8
1ddf8     E7 B0 02 FB | 	rdlong	local06, fp
1ddfc     08 CE 85 F1 | 	sub	fp, #8
1de00     1C B0 0E F2 | 	cmp	local06, #28 wz
1de04     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1de08     E7 AC 02 AB |  if_e	rdlong	local04, fp
1de0c     53 AD 02 AD |  if_e	qmul	local04, local01
1de10                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
1de10     18 B0 62 AD |  if_e	getqx	local06
1de14     E7 B0 62 AC |  if_e	wrlong	local06, fp
1de18     2C 01 90 AD |  if_e	jmp	#LR__2536
1de1c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1de1c     08 CE 05 F1 | 	add	fp, #8
1de20     E7 B0 02 FB | 	rdlong	local06, fp
1de24     08 CE 85 F1 | 	sub	fp, #8
1de28     1C B0 0E F2 | 	cmp	local06, #28 wz
1de2c     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1de30     38 00 90 5D |  if_ne	jmp	#LR__2532
1de34     E7 92 02 FB | 	rdlong	arg01, fp
1de38     49 93 52 F6 | 	abs	arg01, arg01 wc
1de3c     1F B2 C6 C9 |  if_b	decod	local07, #31
1de40     00 B2 06 36 |  if_ae	mov	local07, #0
1de44     5C 8E B0 FD | 	call	#__system___float_fromuns
1de48     59 7B 62 F5 | 	xor	result1, local07
1de4c     3D 93 02 F6 | 	mov	arg01, result1
1de50     53 95 02 F6 | 	mov	arg02, local01
1de54     50 92 B0 FD | 	call	#__system___float_mul
1de58     E7 7A 62 FC | 	wrlong	result1, fp
1de5c     08 CE 05 F1 | 	add	fp, #8
1de60     E7 3C 68 FC | 	wrlong	#30, fp
1de64     08 CE 85 F1 | 	sub	fp, #8
1de68     DC 00 90 FD | 	jmp	#LR__2536
1de6c                 | LR__2532
1de6c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
1de6c     08 CE 05 F1 | 	add	fp, #8
1de70     E7 B0 02 FB | 	rdlong	local06, fp
1de74     08 CE 85 F1 | 	sub	fp, #8
1de78     1E B0 0E F2 | 	cmp	local06, #30 wz
1de7c     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1de80     20 00 90 5D |  if_ne	jmp	#LR__2533
1de84     E7 B0 02 FB | 	rdlong	local06, fp
1de88     53 93 02 F6 | 	mov	arg01, local01
1de8c     14 8E B0 FD | 	call	#__system___float_fromuns
1de90     3D 95 02 F6 | 	mov	arg02, result1
1de94     58 93 02 F6 | 	mov	arg01, local06
1de98     0C 92 B0 FD | 	call	#__system___float_mul
1de9c     E7 7A 62 FC | 	wrlong	result1, fp
1dea0     A4 00 90 FD | 	jmp	#LR__2536
1dea4                 | LR__2533
1dea4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
1dea4     08 CE 05 F1 | 	add	fp, #8
1dea8     E7 B0 02 FB | 	rdlong	local06, fp
1deac     08 CE 85 F1 | 	sub	fp, #8
1deb0     1E B0 0E F2 | 	cmp	local06, #30 wz
1deb4     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1deb8     2C 00 90 5D |  if_ne	jmp	#LR__2534
1debc     E7 B0 02 FB | 	rdlong	local06, fp
1dec0     53 93 52 F6 | 	abs	arg01, local01 wc
1dec4     1F B2 C6 C9 |  if_b	decod	local07, #31
1dec8     00 B2 06 36 |  if_ae	mov	local07, #0
1decc     D4 8D B0 FD | 	call	#__system___float_fromuns
1ded0     59 7B 62 F5 | 	xor	result1, local07
1ded4     3D 95 02 F6 | 	mov	arg02, result1
1ded8     58 93 02 F6 | 	mov	arg01, local06
1dedc     C8 91 B0 FD | 	call	#__system___float_mul
1dee0     E7 7A 62 FC | 	wrlong	result1, fp
1dee4     60 00 90 FD | 	jmp	#LR__2536
1dee8                 | LR__2534
1dee8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
1dee8     08 CE 05 F1 | 	add	fp, #8
1deec     E7 B0 02 FB | 	rdlong	local06, fp
1def0     08 CE 85 F1 | 	sub	fp, #8
1def4     1E B0 0E F2 | 	cmp	local06, #30 wz
1def8     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1defc     14 00 90 5D |  if_ne	jmp	#LR__2535
1df00     E7 92 02 FB | 	rdlong	arg01, fp
1df04     53 95 02 F6 | 	mov	arg02, local01
1df08     9C 91 B0 FD | 	call	#__system___float_mul
1df0c     E7 7A 62 FC | 	wrlong	result1, fp
1df10     34 00 90 FD | 	jmp	#LR__2536
1df14                 | LR__2535
1df14                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
1df14     08 CE 05 F1 | 	add	fp, #8
1df18     E7 B0 02 FB | 	rdlong	local06, fp
1df1c     08 CE 85 F1 | 	sub	fp, #8
1df20     1F B0 0E F2 | 	cmp	local06, #31 wz
1df24     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1df28     E7 10 68 AC |  if_e	wrlong	#8, fp
1df2c     08 CE 05 A1 |  if_e	add	fp, #8
1df30     E7 FE 69 AC |  if_e	wrlong	#255, fp
1df34     08 CE 85 A1 |  if_e	sub	fp, #8
1df38     E7 12 68 5C |  if_ne	wrlong	#9, fp
1df3c     08 CE 05 51 |  if_ne	add	fp, #8
1df40     E7 FE 69 5C |  if_ne	wrlong	#255, fp
1df44     08 CE 85 51 |  if_ne	sub	fp, #8
1df48                 | LR__2536
1df48     E7 92 02 F6 | 	mov	arg01, fp
1df4c     B0 F7 BE FD | 	call	#_push
1df50     E7 F0 03 F6 | 	mov	ptra, fp
1df54     F2 00 A0 FD | 	call	#popregs_
1df58                 | _do_mul_ret
1df58     2D 00 64 FD | 	ret
1df5c                 | 
1df5c                 | ' 
1df5c                 | ' '--------------------------------- not equal (<>)
1df5c                 | ' 
1df5c                 | ' sub do_ne
1df5c                 | _do_ne
1df5c     07 CA 05 F6 | 	mov	COUNT_, #7
1df60     E8 00 A0 FD | 	call	#pushregs_
1df64     18 F0 07 F1 | 	add	ptra, #24
1df68     04 F7 BE FD | 	call	#_pop
1df6c     3D A7 02 F6 | 	mov	local01, result1
1df70     3E AD 02 F6 | 	mov	local04, result2
1df74     3F AF 02 F6 | 	mov	local05, result3
1df78     56 A9 02 F6 | 	mov	local02, local04
1df7c     57 AB 02 F6 | 	mov	local03, local05
1df80     EC F6 BE FD | 	call	#_pop
1df84     3F AF 02 F6 | 	mov	local05, result3
1df88     E7 7A 62 FC | 	wrlong	result1, fp
1df8c     04 CE 05 F1 | 	add	fp, #4
1df90     E7 7C 62 FC | 	wrlong	result2, fp
1df94     04 CE 05 F1 | 	add	fp, #4
1df98     E7 AE 62 FC | 	wrlong	local05, fp
1df9c                 | ' 
1df9c                 | ' t2=pop()
1df9c                 | ' t1=pop()
1df9c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
1df9c     08 CE 85 F1 | 	sub	fp, #8
1dfa0     1F AE 0E F2 | 	cmp	local05, #31 wz
1dfa4     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1dfa8     20 00 90 5D |  if_ne	jmp	#LR__2540
1dfac     00 B0 06 F6 | 	mov	local06, #0
1dfb0     E7 92 02 FB | 	rdlong	arg01, fp
1dfb4     53 95 02 F6 | 	mov	arg02, local01
1dfb8     44 6A B0 FD | 	call	#__system___string_cmp
1dfbc     00 7A 0E F2 | 	cmp	result1, #0 wz
1dfc0     00 B0 26 56 |  if_ne	not	local06, #0
1dfc4     E7 B0 62 FC | 	wrlong	local06, fp
1dfc8     04 03 90 FD | 	jmp	#LR__2553
1dfcc                 | LR__2540
1dfcc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
1dfcc     08 CE 05 F1 | 	add	fp, #8
1dfd0     E7 B0 02 FB | 	rdlong	local06, fp
1dfd4     08 CE 85 F1 | 	sub	fp, #8
1dfd8     1E B0 0E F2 | 	cmp	local06, #30 wz
1dfdc     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1dfe0     24 00 90 5D |  if_ne	jmp	#LR__2541
1dfe4     00 B0 06 F6 | 	mov	local06, #0
1dfe8     E7 92 02 FB | 	rdlong	arg01, fp
1dfec     53 95 02 F6 | 	mov	arg02, local01
1dff0     01 96 06 F6 | 	mov	arg03, #1
1dff4     E4 94 B0 FD | 	call	#__system___float_cmp
1dff8     00 7A 0E F2 | 	cmp	result1, #0 wz
1dffc     00 B0 26 56 |  if_ne	not	local06, #0
1e000     E7 B0 62 FC | 	wrlong	local06, fp
1e004     C8 02 90 FD | 	jmp	#LR__2553
1e008                 | LR__2541
1e008                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
1e008     08 CE 05 F1 | 	add	fp, #8
1e00c     E7 B0 02 FB | 	rdlong	local06, fp
1e010     08 CE 85 F1 | 	sub	fp, #8
1e014     1E B0 0E F2 | 	cmp	local06, #30 wz
1e018     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1e01c     3C 00 90 5D |  if_ne	jmp	#LR__2542
1e020     00 B0 06 F6 | 	mov	local06, #0
1e024     E7 AC 02 FB | 	rdlong	local04, fp
1e028     53 93 52 F6 | 	abs	arg01, local01 wc
1e02c     1F B2 C6 C9 |  if_b	decod	local07, #31
1e030     00 B2 06 36 |  if_ae	mov	local07, #0
1e034     6C 8C B0 FD | 	call	#__system___float_fromuns
1e038     59 7B 62 F5 | 	xor	result1, local07
1e03c     3D 95 02 F6 | 	mov	arg02, result1
1e040     56 93 02 F6 | 	mov	arg01, local04
1e044     01 96 06 F6 | 	mov	arg03, #1
1e048     90 94 B0 FD | 	call	#__system___float_cmp
1e04c     00 7A 0E F2 | 	cmp	result1, #0 wz
1e050     00 B0 26 56 |  if_ne	not	local06, #0
1e054     E7 B0 62 FC | 	wrlong	local06, fp
1e058     74 02 90 FD | 	jmp	#LR__2553
1e05c                 | LR__2542
1e05c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
1e05c     08 CE 05 F1 | 	add	fp, #8
1e060     E7 B0 02 FB | 	rdlong	local06, fp
1e064     08 CE 85 F1 | 	sub	fp, #8
1e068     1E B0 0E F2 | 	cmp	local06, #30 wz
1e06c     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1e070     30 00 90 5D |  if_ne	jmp	#LR__2543
1e074     00 B0 06 F6 | 	mov	local06, #0
1e078     E7 AC 02 FB | 	rdlong	local04, fp
1e07c     53 93 02 F6 | 	mov	arg01, local01
1e080     20 8C B0 FD | 	call	#__system___float_fromuns
1e084     3D 95 02 F6 | 	mov	arg02, result1
1e088     56 93 02 F6 | 	mov	arg01, local04
1e08c     01 96 06 F6 | 	mov	arg03, #1
1e090     48 94 B0 FD | 	call	#__system___float_cmp
1e094     00 7A 0E F2 | 	cmp	result1, #0 wz
1e098     00 B0 26 56 |  if_ne	not	local06, #0
1e09c     E7 B0 62 FC | 	wrlong	local06, fp
1e0a0     2C 02 90 FD | 	jmp	#LR__2553
1e0a4                 | LR__2543
1e0a4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
1e0a4     08 CE 05 F1 | 	add	fp, #8
1e0a8     E7 B0 02 FB | 	rdlong	local06, fp
1e0ac     08 CE 85 F1 | 	sub	fp, #8
1e0b0     1C B0 0E F2 | 	cmp	local06, #28 wz
1e0b4     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1e0b8     3C 00 90 5D |  if_ne	jmp	#LR__2544
1e0bc     00 B0 06 F6 | 	mov	local06, #0
1e0c0     E7 92 02 FB | 	rdlong	arg01, fp
1e0c4     49 93 52 F6 | 	abs	arg01, arg01 wc
1e0c8     1F B2 C6 C9 |  if_b	decod	local07, #31
1e0cc     00 B2 06 36 |  if_ae	mov	local07, #0
1e0d0     D0 8B B0 FD | 	call	#__system___float_fromuns
1e0d4     59 7B 62 F5 | 	xor	result1, local07
1e0d8     3D 93 02 F6 | 	mov	arg01, result1
1e0dc     53 95 02 F6 | 	mov	arg02, local01
1e0e0     01 96 06 F6 | 	mov	arg03, #1
1e0e4     F4 93 B0 FD | 	call	#__system___float_cmp
1e0e8     00 7A 0E F2 | 	cmp	result1, #0 wz
1e0ec     00 B0 26 56 |  if_ne	not	local06, #0
1e0f0     E7 B0 62 FC | 	wrlong	local06, fp
1e0f4     D8 01 90 FD | 	jmp	#LR__2553
1e0f8                 | LR__2544
1e0f8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
1e0f8     08 CE 05 F1 | 	add	fp, #8
1e0fc     E7 B0 02 FB | 	rdlong	local06, fp
1e100     08 CE 85 F1 | 	sub	fp, #8
1e104     1C B0 0E F2 | 	cmp	local06, #28 wz
1e108     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1e10c     18 00 90 5D |  if_ne	jmp	#LR__2545
1e110     00 B0 06 F6 | 	mov	local06, #0
1e114     E7 AC 02 FB | 	rdlong	local04, fp
1e118     53 AD 0A F2 | 	cmp	local04, local01 wz
1e11c     01 B0 66 56 |  if_ne	neg	local06, #1
1e120     E7 B0 62 FC | 	wrlong	local06, fp
1e124     A8 01 90 FD | 	jmp	#LR__2553
1e128                 | LR__2545
1e128                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
1e128     08 CE 05 F1 | 	add	fp, #8
1e12c     E7 B0 02 FB | 	rdlong	local06, fp
1e130     08 CE 85 F1 | 	sub	fp, #8
1e134     1C B0 0E F2 | 	cmp	local06, #28 wz
1e138     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1e13c     18 00 90 5D |  if_ne	jmp	#LR__2546
1e140     00 B0 06 F6 | 	mov	local06, #0
1e144     E7 AC 02 FB | 	rdlong	local04, fp
1e148     53 AD 0A F2 | 	cmp	local04, local01 wz
1e14c     01 B0 66 56 |  if_ne	neg	local06, #1
1e150     E7 B0 62 FC | 	wrlong	local06, fp
1e154     78 01 90 FD | 	jmp	#LR__2553
1e158                 | LR__2546
1e158                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
1e158     08 CE 05 F1 | 	add	fp, #8
1e15c     E7 B0 02 FB | 	rdlong	local06, fp
1e160     08 CE 85 F1 | 	sub	fp, #8
1e164     1D B0 0E F2 | 	cmp	local06, #29 wz
1e168     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1e16c     2C 00 90 5D |  if_ne	jmp	#LR__2547
1e170     00 B0 06 F6 | 	mov	local06, #0
1e174     E7 92 02 FB | 	rdlong	arg01, fp
1e178     28 8B B0 FD | 	call	#__system___float_fromuns
1e17c     3D 93 02 F6 | 	mov	arg01, result1
1e180     53 95 02 F6 | 	mov	arg02, local01
1e184     01 96 06 F6 | 	mov	arg03, #1
1e188     50 93 B0 FD | 	call	#__system___float_cmp
1e18c     00 7A 0E F2 | 	cmp	result1, #0 wz
1e190     00 B0 26 56 |  if_ne	not	local06, #0
1e194     E7 B0 62 FC | 	wrlong	local06, fp
1e198     34 01 90 FD | 	jmp	#LR__2553
1e19c                 | LR__2547
1e19c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
1e19c     08 CE 05 F1 | 	add	fp, #8
1e1a0     E7 B0 02 FB | 	rdlong	local06, fp
1e1a4     08 CE 85 F1 | 	sub	fp, #8
1e1a8     1D B0 0E F2 | 	cmp	local06, #29 wz
1e1ac     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1e1b0     18 00 90 5D |  if_ne	jmp	#LR__2548
1e1b4     00 B0 06 F6 | 	mov	local06, #0
1e1b8     E7 AC 02 FB | 	rdlong	local04, fp
1e1bc     53 AD 0A F2 | 	cmp	local04, local01 wz
1e1c0     01 B0 66 56 |  if_ne	neg	local06, #1
1e1c4     E7 B0 62 FC | 	wrlong	local06, fp
1e1c8     04 01 90 FD | 	jmp	#LR__2553
1e1cc                 | LR__2548
1e1cc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
1e1cc     08 CE 05 F1 | 	add	fp, #8
1e1d0     E7 B0 02 FB | 	rdlong	local06, fp
1e1d4     08 CE 85 F1 | 	sub	fp, #8
1e1d8     1D B0 0E F2 | 	cmp	local06, #29 wz
1e1dc     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1e1e0     18 00 90 5D |  if_ne	jmp	#LR__2549
1e1e4     00 B0 06 F6 | 	mov	local06, #0
1e1e8     E7 AC 02 FB | 	rdlong	local04, fp
1e1ec     53 AD 0A F2 | 	cmp	local04, local01 wz
1e1f0     01 B0 66 56 |  if_ne	neg	local06, #1
1e1f4     E7 B0 62 FC | 	wrlong	local06, fp
1e1f8     D4 00 90 FD | 	jmp	#LR__2553
1e1fc                 | LR__2549
1e1fc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
1e1fc     08 CE 05 F1 | 	add	fp, #8
1e200     E7 B0 02 FB | 	rdlong	local06, fp
1e204     08 CE 85 F1 | 	sub	fp, #8
1e208     2B B0 0E F2 | 	cmp	local06, #43 wz
1e20c     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1e210     28 00 90 5D |  if_ne	jmp	#LR__2550
1e214     00 B0 06 F6 | 	mov	local06, #0
1e218     E7 92 02 FB | 	rdlong	arg01, fp
1e21c     C0 F5 BE FD | 	call	#_convertstring
1e220     3D 93 02 F6 | 	mov	arg01, result1
1e224     53 95 02 F6 | 	mov	arg02, local01
1e228     D4 67 B0 FD | 	call	#__system___string_cmp
1e22c     00 7A 0E F2 | 	cmp	result1, #0 wz
1e230     00 B0 26 56 |  if_ne	not	local06, #0
1e234     E7 B0 62 FC | 	wrlong	local06, fp
1e238     94 00 90 FD | 	jmp	#LR__2553
1e23c                 | LR__2550
1e23c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
1e23c     08 CE 05 F1 | 	add	fp, #8
1e240     E7 B0 02 FB | 	rdlong	local06, fp
1e244     08 CE 85 F1 | 	sub	fp, #8
1e248     1F B0 0E F2 | 	cmp	local06, #31 wz
1e24c     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1e250     2C 00 90 5D |  if_ne	jmp	#LR__2551
1e254     00 B0 06 F6 | 	mov	local06, #0
1e258     E7 AC 02 FB | 	rdlong	local04, fp
1e25c     53 93 02 F6 | 	mov	arg01, local01
1e260     7C F5 BE FD | 	call	#_convertstring
1e264     3D 95 02 F6 | 	mov	arg02, result1
1e268     56 93 02 F6 | 	mov	arg01, local04
1e26c     90 67 B0 FD | 	call	#__system___string_cmp
1e270     00 7A 0E F2 | 	cmp	result1, #0 wz
1e274     00 B0 26 56 |  if_ne	not	local06, #0
1e278     E7 B0 62 FC | 	wrlong	local06, fp
1e27c     50 00 90 FD | 	jmp	#LR__2553
1e280                 | LR__2551
1e280                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
1e280     08 CE 05 F1 | 	add	fp, #8
1e284     E7 B0 02 FB | 	rdlong	local06, fp
1e288     08 CE 85 F1 | 	sub	fp, #8
1e28c     2B B0 0E F2 | 	cmp	local06, #43 wz
1e290     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1e294     34 00 90 5D |  if_ne	jmp	#LR__2552
1e298     00 B0 06 F6 | 	mov	local06, #0
1e29c     E7 92 02 FB | 	rdlong	arg01, fp
1e2a0     3C F5 BE FD | 	call	#_convertstring
1e2a4     3D AD 02 F6 | 	mov	local04, result1
1e2a8     53 93 02 F6 | 	mov	arg01, local01
1e2ac     30 F5 BE FD | 	call	#_convertstring
1e2b0     3D 95 02 F6 | 	mov	arg02, result1
1e2b4     56 93 02 F6 | 	mov	arg01, local04
1e2b8     44 67 B0 FD | 	call	#__system___string_cmp
1e2bc     00 7A 0E F2 | 	cmp	result1, #0 wz
1e2c0     00 B0 26 56 |  if_ne	not	local06, #0
1e2c4     E7 B0 62 FC | 	wrlong	local06, fp
1e2c8     04 00 90 FD | 	jmp	#LR__2553
1e2cc                 | LR__2552
1e2cc     E7 00 68 FC | 	wrlong	#0, fp
1e2d0                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1e2d0                 | LR__2553
1e2d0     08 CE 05 F1 | 	add	fp, #8
1e2d4     E7 38 68 FC | 	wrlong	#28, fp
1e2d8     08 CE 85 F1 | 	sub	fp, #8
1e2dc     E7 92 02 F6 | 	mov	arg01, fp
1e2e0     1C F4 BE FD | 	call	#_push
1e2e4     E7 F0 03 F6 | 	mov	ptra, fp
1e2e8     F2 00 A0 FD | 	call	#popregs_
1e2ec                 | _do_ne_ret
1e2ec     2D 00 64 FD | 	ret
1e2f0                 | 
1e2f0                 | ' 
1e2f0                 | ' '--------------------------------- OR
1e2f0                 | ' 
1e2f0                 | ' sub do_or 
1e2f0                 | _do_or
1e2f0     05 CA 05 F6 | 	mov	COUNT_, #5
1e2f4     E8 00 A0 FD | 	call	#pushregs_
1e2f8     18 F0 07 F1 | 	add	ptra, #24
1e2fc     70 F3 BE FD | 	call	#_pop
1e300     3D A7 02 F6 | 	mov	local01, result1
1e304     3E 93 02 F6 | 	mov	arg01, result2
1e308     3F AD 02 F6 | 	mov	local04, result3
1e30c     49 A9 02 F6 | 	mov	local02, arg01
1e310     56 AB 02 F6 | 	mov	local03, local04
1e314     58 F3 BE FD | 	call	#_pop
1e318     3F AF 02 F6 | 	mov	local05, result3
1e31c     E7 7A 62 FC | 	wrlong	result1, fp
1e320     04 CE 05 F1 | 	add	fp, #4
1e324     E7 7C 62 FC | 	wrlong	result2, fp
1e328     04 CE 05 F1 | 	add	fp, #4
1e32c     E7 AE 62 FC | 	wrlong	local05, fp
1e330                 | ' 
1e330                 | ' t2=pop()
1e330                 | ' t1=pop()
1e330                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1e330     08 CE 85 F1 | 	sub	fp, #8
1e334     1C AE 0E F2 | 	cmp	local05, #28 wz
1e338     E7 AE 02 AB |  if_e	rdlong	local05, fp
1e33c     E7 AE 62 AC |  if_e	wrlong	local05, fp
1e340     08 CE 05 A1 |  if_e	add	fp, #8
1e344     E7 3A 68 AC |  if_e	wrlong	#29, fp
1e348     08 CE 85 A1 |  if_e	sub	fp, #8
1e34c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1e34c     1C AA 0E F2 | 	cmp	local03, #28 wz
1e350     1D AA 06 A6 |  if_e	mov	local03, #29
1e354                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
1e354     08 CE 05 F1 | 	add	fp, #8
1e358     E7 AE 02 FB | 	rdlong	local05, fp
1e35c     08 CE 85 F1 | 	sub	fp, #8
1e360     1F AE 0E F2 | 	cmp	local05, #31 wz
1e364     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1e368     08 CE 05 51 |  if_ne	add	fp, #8
1e36c     E7 AC 02 5B |  if_ne	rdlong	local04, fp
1e370     08 CE 85 51 |  if_ne	sub	fp, #8
1e374     1E AC 0E 52 |  if_ne	cmp	local04, #30 wz
1e378     1E AA 0E 52 |  if_ne	cmp	local03, #30 wz
1e37c     E7 0C 68 AC |  if_e	wrlong	#6, fp
1e380     08 CE 05 A1 |  if_e	add	fp, #8
1e384     E7 FE 69 AC |  if_e	wrlong	#255, fp
1e388     08 CE 85 A1 |  if_e	sub	fp, #8
1e38c     E7 AE 02 5B |  if_ne	rdlong	local05, fp
1e390     53 AF 42 55 |  if_ne	or	local05, local01
1e394     E7 AE 62 5C |  if_ne	wrlong	local05, fp
1e398     E7 92 02 F6 | 	mov	arg01, fp
1e39c     60 F3 BE FD | 	call	#_push
1e3a0     E7 F0 03 F6 | 	mov	ptra, fp
1e3a4     F2 00 A0 FD | 	call	#popregs_
1e3a8                 | _do_or_ret
1e3a8     2D 00 64 FD | 	ret
1e3ac                 | 
1e3ac                 | ' 
1e3ac                 | ' '--------------------------------- plus (+)
1e3ac                 | ' 
1e3ac                 | ' sub do_plus 
1e3ac                 | _do_plus
1e3ac     07 CA 05 F6 | 	mov	COUNT_, #7
1e3b0     E8 00 A0 FD | 	call	#pushregs_
1e3b4     18 F0 07 F1 | 	add	ptra, #24
1e3b8     B4 F2 BE FD | 	call	#_pop
1e3bc     3D A7 02 F6 | 	mov	local01, result1
1e3c0     3E AD 02 F6 | 	mov	local04, result2
1e3c4     3F AF 02 F6 | 	mov	local05, result3
1e3c8     56 A9 02 F6 | 	mov	local02, local04
1e3cc     57 AB 02 F6 | 	mov	local03, local05
1e3d0     9C F2 BE FD | 	call	#_pop
1e3d4     3F AF 02 F6 | 	mov	local05, result3
1e3d8     E7 7A 62 FC | 	wrlong	result1, fp
1e3dc     04 CE 05 F1 | 	add	fp, #4
1e3e0     E7 7C 62 FC | 	wrlong	result2, fp
1e3e4     04 CE 05 F1 | 	add	fp, #4
1e3e8     E7 AE 62 FC | 	wrlong	local05, fp
1e3ec                 | ' 
1e3ec                 | ' t2=pop()
1e3ec                 | ' t1=pop()
1e3ec                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
1e3ec     57 B1 02 F6 | 	mov	local06, local05
1e3f0     08 CE 85 F1 | 	sub	fp, #8
1e3f4     1D B0 0E F2 | 	cmp	local06, #29 wz
1e3f8     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1e3fc     E7 B0 02 AB |  if_e	rdlong	local06, fp
1e400     53 B1 02 A1 |  if_e	add	local06, local01
1e404     E7 B0 62 AC |  if_e	wrlong	local06, fp
1e408     0C 03 90 AD |  if_e	jmp	#LR__2572
1e40c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
1e40c     08 CE 05 F1 | 	add	fp, #8
1e410     E7 B0 02 FB | 	rdlong	local06, fp
1e414     08 CE 85 F1 | 	sub	fp, #8
1e418     1D B0 0E F2 | 	cmp	local06, #29 wz
1e41c     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1e420     1C 00 90 5D |  if_ne	jmp	#LR__2560
1e424     E7 B0 02 FB | 	rdlong	local06, fp
1e428     53 B1 02 F1 | 	add	local06, local01
1e42c     E7 B0 62 FC | 	wrlong	local06, fp
1e430     08 CE 05 F1 | 	add	fp, #8
1e434     E7 38 68 FC | 	wrlong	#28, fp
1e438     08 CE 85 F1 | 	sub	fp, #8
1e43c     D8 02 90 FD | 	jmp	#LR__2572
1e440                 | LR__2560
1e440                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1e440     08 CE 05 F1 | 	add	fp, #8
1e444     E7 B0 02 FB | 	rdlong	local06, fp
1e448     08 CE 85 F1 | 	sub	fp, #8
1e44c     1D B0 0E F2 | 	cmp	local06, #29 wz
1e450     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1e454     28 00 90 5D |  if_ne	jmp	#LR__2561
1e458     E7 92 02 FB | 	rdlong	arg01, fp
1e45c     44 88 B0 FD | 	call	#__system___float_fromuns
1e460     3D 93 02 F6 | 	mov	arg01, result1
1e464     53 95 02 F6 | 	mov	arg02, local01
1e468     6C 88 B0 FD | 	call	#__system___float_add
1e46c     E7 7A 62 FC | 	wrlong	result1, fp
1e470     08 CE 05 F1 | 	add	fp, #8
1e474     E7 3C 68 FC | 	wrlong	#30, fp
1e478     08 CE 85 F1 | 	sub	fp, #8
1e47c     98 02 90 FD | 	jmp	#LR__2572
1e480                 | LR__2561
1e480                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
1e480     08 CE 05 F1 | 	add	fp, #8
1e484     E7 B0 02 FB | 	rdlong	local06, fp
1e488     08 CE 85 F1 | 	sub	fp, #8
1e48c     1C B0 0E F2 | 	cmp	local06, #28 wz
1e490     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1e494     E7 B0 02 AB |  if_e	rdlong	local06, fp
1e498     53 B1 02 A1 |  if_e	add	local06, local01
1e49c     E7 B0 62 AC |  if_e	wrlong	local06, fp
1e4a0     74 02 90 AD |  if_e	jmp	#LR__2572
1e4a4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
1e4a4     08 CE 05 F1 | 	add	fp, #8
1e4a8     E7 B0 02 FB | 	rdlong	local06, fp
1e4ac     08 CE 85 F1 | 	sub	fp, #8
1e4b0     1C B0 0E F2 | 	cmp	local06, #28 wz
1e4b4     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1e4b8     E7 B0 02 AB |  if_e	rdlong	local06, fp
1e4bc     53 B1 02 A1 |  if_e	add	local06, local01
1e4c0     E7 B0 62 AC |  if_e	wrlong	local06, fp
1e4c4     50 02 90 AD |  if_e	jmp	#LR__2572
1e4c8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1e4c8     08 CE 05 F1 | 	add	fp, #8
1e4cc     E7 B0 02 FB | 	rdlong	local06, fp
1e4d0     08 CE 85 F1 | 	sub	fp, #8
1e4d4     1C B0 0E F2 | 	cmp	local06, #28 wz
1e4d8     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1e4dc     38 00 90 5D |  if_ne	jmp	#LR__2562
1e4e0     E7 92 02 FB | 	rdlong	arg01, fp
1e4e4     49 93 52 F6 | 	abs	arg01, arg01 wc
1e4e8     1F B2 C6 C9 |  if_b	decod	local07, #31
1e4ec     00 B2 06 36 |  if_ae	mov	local07, #0
1e4f0     B0 87 B0 FD | 	call	#__system___float_fromuns
1e4f4     59 7B 62 F5 | 	xor	result1, local07
1e4f8     3D 93 02 F6 | 	mov	arg01, result1
1e4fc     53 95 02 F6 | 	mov	arg02, local01
1e500     D4 87 B0 FD | 	call	#__system___float_add
1e504     E7 7A 62 FC | 	wrlong	result1, fp
1e508     08 CE 05 F1 | 	add	fp, #8
1e50c     E7 3C 68 FC | 	wrlong	#30, fp
1e510     08 CE 85 F1 | 	sub	fp, #8
1e514     00 02 90 FD | 	jmp	#LR__2572
1e518                 | LR__2562
1e518                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
1e518     08 CE 05 F1 | 	add	fp, #8
1e51c     E7 B0 02 FB | 	rdlong	local06, fp
1e520     08 CE 85 F1 | 	sub	fp, #8
1e524     1E B0 0E F2 | 	cmp	local06, #30 wz
1e528     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1e52c     20 00 90 5D |  if_ne	jmp	#LR__2563
1e530     E7 B0 02 FB | 	rdlong	local06, fp
1e534     53 93 02 F6 | 	mov	arg01, local01
1e538     68 87 B0 FD | 	call	#__system___float_fromuns
1e53c     3D 95 02 F6 | 	mov	arg02, result1
1e540     58 93 02 F6 | 	mov	arg01, local06
1e544     90 87 B0 FD | 	call	#__system___float_add
1e548     E7 7A 62 FC | 	wrlong	result1, fp
1e54c     C8 01 90 FD | 	jmp	#LR__2572
1e550                 | LR__2563
1e550                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
1e550     08 CE 05 F1 | 	add	fp, #8
1e554     E7 B0 02 FB | 	rdlong	local06, fp
1e558     08 CE 85 F1 | 	sub	fp, #8
1e55c     1E B0 0E F2 | 	cmp	local06, #30 wz
1e560     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1e564     2C 00 90 5D |  if_ne	jmp	#LR__2564
1e568     E7 B0 02 FB | 	rdlong	local06, fp
1e56c     53 93 52 F6 | 	abs	arg01, local01 wc
1e570     1F B2 C6 C9 |  if_b	decod	local07, #31
1e574     00 B2 06 36 |  if_ae	mov	local07, #0
1e578     28 87 B0 FD | 	call	#__system___float_fromuns
1e57c     59 7B 62 F5 | 	xor	result1, local07
1e580     3D 95 02 F6 | 	mov	arg02, result1
1e584     58 93 02 F6 | 	mov	arg01, local06
1e588     4C 87 B0 FD | 	call	#__system___float_add
1e58c     E7 7A 62 FC | 	wrlong	result1, fp
1e590     84 01 90 FD | 	jmp	#LR__2572
1e594                 | LR__2564
1e594                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
1e594     08 CE 05 F1 | 	add	fp, #8
1e598     E7 B0 02 FB | 	rdlong	local06, fp
1e59c     08 CE 85 F1 | 	sub	fp, #8
1e5a0     1E B0 0E F2 | 	cmp	local06, #30 wz
1e5a4     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1e5a8     14 00 90 5D |  if_ne	jmp	#LR__2565
1e5ac     E7 92 02 FB | 	rdlong	arg01, fp
1e5b0     53 95 02 F6 | 	mov	arg02, local01
1e5b4     20 87 B0 FD | 	call	#__system___float_add
1e5b8     E7 7A 62 FC | 	wrlong	result1, fp
1e5bc     58 01 90 FD | 	jmp	#LR__2572
1e5c0                 | LR__2565
1e5c0                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
1e5c0     08 CE 05 F1 | 	add	fp, #8
1e5c4     E7 B0 02 FB | 	rdlong	local06, fp
1e5c8     08 CE 85 F1 | 	sub	fp, #8
1e5cc     1F B0 0E F2 | 	cmp	local06, #31 wz
1e5d0     18 00 90 5D |  if_ne	jmp	#LR__2566
1e5d4     1F AA 0E F2 | 	cmp	local03, #31 wz
1e5d8     E7 04 68 5C |  if_ne	wrlong	#2, fp
1e5dc     08 CE 05 51 |  if_ne	add	fp, #8
1e5e0     E7 FE 69 5C |  if_ne	wrlong	#255, fp
1e5e4     08 CE 85 51 |  if_ne	sub	fp, #8
1e5e8     2C 01 90 5D |  if_ne	jmp	#LR__2572
1e5ec                 | LR__2566
1e5ec                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
1e5ec     1F AA 0E F2 | 	cmp	local03, #31 wz
1e5f0     24 00 90 5D |  if_ne	jmp	#LR__2567
1e5f4     08 CE 05 F1 | 	add	fp, #8
1e5f8     E7 B0 02 FB | 	rdlong	local06, fp
1e5fc     08 CE 85 F1 | 	sub	fp, #8
1e600     1F B0 0E F2 | 	cmp	local06, #31 wz
1e604     E7 04 68 5C |  if_ne	wrlong	#2, fp
1e608     08 CE 05 51 |  if_ne	add	fp, #8
1e60c     E7 FE 69 5C |  if_ne	wrlong	#255, fp
1e610     08 CE 85 51 |  if_ne	sub	fp, #8
1e614     00 01 90 5D |  if_ne	jmp	#LR__2572
1e618                 | LR__2567
1e618                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
1e618     08 CE 05 F1 | 	add	fp, #8
1e61c     E7 B0 02 FB | 	rdlong	local06, fp
1e620     08 CE 85 F1 | 	sub	fp, #8
1e624     1F B0 0E F2 | 	cmp	local06, #31 wz
1e628     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1e62c     14 00 90 5D |  if_ne	jmp	#LR__2568
1e630     E7 92 02 FB | 	rdlong	arg01, fp
1e634     53 95 02 F6 | 	mov	arg02, local01
1e638     F8 63 B0 FD | 	call	#__system___string_concat
1e63c     E7 7A 62 FC | 	wrlong	result1, fp
1e640     D4 00 90 FD | 	jmp	#LR__2572
1e644                 | LR__2568
1e644                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
1e644     08 CE 05 F1 | 	add	fp, #8
1e648     E7 B0 02 FB | 	rdlong	local06, fp
1e64c     08 CE 85 F1 | 	sub	fp, #8
1e650     2B B0 0E F2 | 	cmp	local06, #43 wz
1e654     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1e658     28 00 90 5D |  if_ne	jmp	#LR__2569
1e65c     E7 92 02 FB | 	rdlong	arg01, fp
1e660     7C F1 BE FD | 	call	#_convertstring
1e664     3D 93 02 F6 | 	mov	arg01, result1
1e668     53 95 02 F6 | 	mov	arg02, local01
1e66c     C4 63 B0 FD | 	call	#__system___string_concat
1e670     E7 7A 62 FC | 	wrlong	result1, fp
1e674     08 CE 05 F1 | 	add	fp, #8
1e678     E7 3E 68 FC | 	wrlong	#31, fp
1e67c     08 CE 85 F1 | 	sub	fp, #8
1e680     94 00 90 FD | 	jmp	#LR__2572
1e684                 | LR__2569
1e684                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
1e684     08 CE 05 F1 | 	add	fp, #8
1e688     E7 B0 02 FB | 	rdlong	local06, fp
1e68c     08 CE 85 F1 | 	sub	fp, #8
1e690     1F B0 0E F2 | 	cmp	local06, #31 wz
1e694     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1e698     20 00 90 5D |  if_ne	jmp	#LR__2570
1e69c     E7 B0 02 FB | 	rdlong	local06, fp
1e6a0     53 93 02 F6 | 	mov	arg01, local01
1e6a4     38 F1 BE FD | 	call	#_convertstring
1e6a8     3D 95 02 F6 | 	mov	arg02, result1
1e6ac     58 93 02 F6 | 	mov	arg01, local06
1e6b0     80 63 B0 FD | 	call	#__system___string_concat
1e6b4     E7 7A 62 FC | 	wrlong	result1, fp
1e6b8     5C 00 90 FD | 	jmp	#LR__2572
1e6bc                 | LR__2570
1e6bc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
1e6bc     08 CE 05 F1 | 	add	fp, #8
1e6c0     E7 B0 02 FB | 	rdlong	local06, fp
1e6c4     08 CE 85 F1 | 	sub	fp, #8
1e6c8     2B B0 0E F2 | 	cmp	local06, #43 wz
1e6cc     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1e6d0     34 00 90 5D |  if_ne	jmp	#LR__2571
1e6d4     E7 92 02 FB | 	rdlong	arg01, fp
1e6d8     04 F1 BE FD | 	call	#_convertstring
1e6dc     3D B1 02 F6 | 	mov	local06, result1
1e6e0     53 93 02 F6 | 	mov	arg01, local01
1e6e4     F8 F0 BE FD | 	call	#_convertstring
1e6e8     3D 95 02 F6 | 	mov	arg02, result1
1e6ec     58 93 02 F6 | 	mov	arg01, local06
1e6f0     40 63 B0 FD | 	call	#__system___string_concat
1e6f4     E7 7A 62 FC | 	wrlong	result1, fp
1e6f8     08 CE 05 F1 | 	add	fp, #8
1e6fc     E7 3E 68 FC | 	wrlong	#31, fp
1e700     08 CE 85 F1 | 	sub	fp, #8
1e704     10 00 90 FD | 	jmp	#LR__2572
1e708                 | LR__2571
1e708     E7 08 68 FC | 	wrlong	#4, fp
1e70c     08 CE 05 F1 | 	add	fp, #8
1e710     E7 FE 69 FC | 	wrlong	#255, fp
1e714     08 CE 85 F1 | 	sub	fp, #8
1e718                 | LR__2572
1e718     E7 92 02 F6 | 	mov	arg01, fp
1e71c     E0 EF BE FD | 	call	#_push
1e720     E7 F0 03 F6 | 	mov	ptra, fp
1e724     F2 00 A0 FD | 	call	#popregs_
1e728                 | _do_plus_ret
1e728     2D 00 64 FD | 	ret
1e72c                 | 
1e72c                 | ' 
1e72c                 | ' '--------------------------------- power (^)
1e72c                 | ' 
1e72c                 | ' sub do_power 
1e72c                 | _do_power
1e72c     04 CA 05 F6 | 	mov	COUNT_, #4
1e730     E8 00 A0 FD | 	call	#pushregs_
1e734     18 F0 07 F1 | 	add	ptra, #24
1e738     34 EF BE FD | 	call	#_pop
1e73c     3D A7 02 F6 | 	mov	local01, result1
1e740     3E 95 02 F6 | 	mov	arg02, result2
1e744     3F 93 02 F6 | 	mov	arg01, result3
1e748     4A A9 02 F6 | 	mov	local02, arg02
1e74c     49 AB 02 F6 | 	mov	local03, arg01
1e750     1C EF BE FD | 	call	#_pop
1e754     E7 7A 62 FC | 	wrlong	result1, fp
1e758     04 CE 05 F1 | 	add	fp, #4
1e75c     E7 7C 62 FC | 	wrlong	result2, fp
1e760     04 CE 05 F1 | 	add	fp, #4
1e764     E7 7E 62 FC | 	wrlong	result3, fp
1e768                 | ' 
1e768                 | ' t2=pop()
1e768                 | ' t1=pop()
1e768                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
1e768     08 CE 85 F1 | 	sub	fp, #8
1e76c     1F 7E 0E F2 | 	cmp	result3, #31 wz
1e770     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1e774     E7 18 68 AC |  if_e	wrlong	#12, fp
1e778     08 CE 05 A1 |  if_e	add	fp, #8
1e77c     E7 FE 69 AC |  if_e	wrlong	#255, fp
1e780     08 CE 85 A1 |  if_e	sub	fp, #8
1e784     E0 00 90 AD |  if_e	jmp	#LR__2585
1e788                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1e788     08 CE 05 F1 | 	add	fp, #8
1e78c     E7 94 02 FB | 	rdlong	arg02, fp
1e790     08 CE 85 F1 | 	sub	fp, #8
1e794     1C 94 0E F2 | 	cmp	arg02, #28 wz
1e798     28 00 90 5D |  if_ne	jmp	#LR__2580
1e79c     08 CE 05 F1 | 	add	fp, #8
1e7a0     E7 3C 68 FC | 	wrlong	#30, fp
1e7a4     08 CE 85 F1 | 	sub	fp, #8
1e7a8     E7 92 02 FB | 	rdlong	arg01, fp
1e7ac     49 93 52 F6 | 	abs	arg01, arg01 wc
1e7b0     1F AC C6 C9 |  if_b	decod	local04, #31
1e7b4     00 AC 06 36 |  if_ae	mov	local04, #0
1e7b8     E8 84 B0 FD | 	call	#__system___float_fromuns
1e7bc     56 7B 62 F5 | 	xor	result1, local04
1e7c0     E7 7A 62 FC | 	wrlong	result1, fp
1e7c4                 | LR__2580
1e7c4                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
1e7c4     08 CE 05 F1 | 	add	fp, #8
1e7c8     E7 94 02 FB | 	rdlong	arg02, fp
1e7cc     08 CE 85 F1 | 	sub	fp, #8
1e7d0     1D 94 0E F2 | 	cmp	arg02, #29 wz
1e7d4     18 00 90 5D |  if_ne	jmp	#LR__2581
1e7d8     08 CE 05 F1 | 	add	fp, #8
1e7dc     E7 3C 68 FC | 	wrlong	#30, fp
1e7e0     08 CE 85 F1 | 	sub	fp, #8
1e7e4     E7 92 02 FB | 	rdlong	arg01, fp
1e7e8     B8 84 B0 FD | 	call	#__system___float_fromuns
1e7ec     E7 7A 62 FC | 	wrlong	result1, fp
1e7f0                 | LR__2581
1e7f0                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1e7f0     1C AA 0E F2 | 	cmp	local03, #28 wz
1e7f4     1C 00 90 5D |  if_ne	jmp	#LR__2582
1e7f8     1E AA 06 F6 | 	mov	local03, #30
1e7fc     53 93 52 F6 | 	abs	arg01, local01 wc
1e800     1F AC C6 C9 |  if_b	decod	local04, #31
1e804     00 AC 06 36 |  if_ae	mov	local04, #0
1e808     98 84 B0 FD | 	call	#__system___float_fromuns
1e80c     56 7B 62 F5 | 	xor	result1, local04
1e810     3D A7 02 F6 | 	mov	local01, result1
1e814                 | LR__2582
1e814                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1e814     1D AA 0E F2 | 	cmp	local03, #29 wz
1e818     10 00 90 5D |  if_ne	jmp	#LR__2583
1e81c     1E AA 06 F6 | 	mov	local03, #30
1e820     53 93 02 F6 | 	mov	arg01, local01
1e824     7C 84 B0 FD | 	call	#__system___float_fromuns
1e828     3D A7 02 F6 | 	mov	local01, result1
1e82c                 | LR__2583
1e82c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
1e82c     08 CE 05 F1 | 	add	fp, #8
1e830     E7 94 02 FB | 	rdlong	arg02, fp
1e834     08 CE 85 F1 | 	sub	fp, #8
1e838     1E 94 0E F2 | 	cmp	arg02, #30 wz
1e83c     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1e840     14 00 90 5D |  if_ne	jmp	#LR__2584
1e844     E7 92 02 FB | 	rdlong	arg01, fp
1e848     53 95 02 F6 | 	mov	arg02, local01
1e84c     70 97 B0 FD | 	call	#__system____builtin_powf
1e850     E7 7A 62 FC | 	wrlong	result1, fp
1e854     10 00 90 FD | 	jmp	#LR__2585
1e858                 | LR__2584
1e858     E7 1A 68 FC | 	wrlong	#13, fp
1e85c     08 CE 05 F1 | 	add	fp, #8
1e860     E7 FE 69 FC | 	wrlong	#255, fp
1e864     08 CE 85 F1 | 	sub	fp, #8
1e868                 | LR__2585
1e868     E7 92 02 F6 | 	mov	arg01, fp
1e86c     90 EE BE FD | 	call	#_push
1e870     E7 F0 03 F6 | 	mov	ptra, fp
1e874     F2 00 A0 FD | 	call	#popregs_
1e878                 | _do_power_ret
1e878     2D 00 64 FD | 	ret
1e87c                 | 
1e87c                 | ' 
1e87c                 | ' '--------------------------------- SHL
1e87c                 | ' 
1e87c                 | ' sub do_shl 
1e87c                 | _do_shl
1e87c     05 CA 05 F6 | 	mov	COUNT_, #5
1e880     E8 00 A0 FD | 	call	#pushregs_
1e884     18 F0 07 F1 | 	add	ptra, #24
1e888     E4 ED BE FD | 	call	#_pop
1e88c     3D A7 02 F6 | 	mov	local01, result1
1e890     3E 93 02 F6 | 	mov	arg01, result2
1e894     3F AD 02 F6 | 	mov	local04, result3
1e898     49 A9 02 F6 | 	mov	local02, arg01
1e89c     56 AB 02 F6 | 	mov	local03, local04
1e8a0     CC ED BE FD | 	call	#_pop
1e8a4     3F AF 02 F6 | 	mov	local05, result3
1e8a8     E7 7A 62 FC | 	wrlong	result1, fp
1e8ac     04 CE 05 F1 | 	add	fp, #4
1e8b0     E7 7C 62 FC | 	wrlong	result2, fp
1e8b4     04 CE 05 F1 | 	add	fp, #4
1e8b8     E7 AE 62 FC | 	wrlong	local05, fp
1e8bc                 | ' 
1e8bc                 | ' t2=pop()
1e8bc                 | ' t1=pop()
1e8bc                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1e8bc     08 CE 85 F1 | 	sub	fp, #8
1e8c0     1C AE 0E F2 | 	cmp	local05, #28 wz
1e8c4     E7 AE 02 AB |  if_e	rdlong	local05, fp
1e8c8     E7 AE 62 AC |  if_e	wrlong	local05, fp
1e8cc     08 CE 05 A1 |  if_e	add	fp, #8
1e8d0     E7 3A 68 AC |  if_e	wrlong	#29, fp
1e8d4     08 CE 85 A1 |  if_e	sub	fp, #8
1e8d8                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1e8d8     1C AA 0E F2 | 	cmp	local03, #28 wz
1e8dc     1D AA 06 A6 |  if_e	mov	local03, #29
1e8e0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
1e8e0     08 CE 05 F1 | 	add	fp, #8
1e8e4     E7 AE 02 FB | 	rdlong	local05, fp
1e8e8     08 CE 85 F1 | 	sub	fp, #8
1e8ec     1F AE 0E F2 | 	cmp	local05, #31 wz
1e8f0     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1e8f4     08 CE 05 51 |  if_ne	add	fp, #8
1e8f8     E7 AC 02 5B |  if_ne	rdlong	local04, fp
1e8fc     08 CE 85 51 |  if_ne	sub	fp, #8
1e900     1E AC 0E 52 |  if_ne	cmp	local04, #30 wz
1e904     1E AA 0E 52 |  if_ne	cmp	local03, #30 wz
1e908     E7 0C 68 AC |  if_e	wrlong	#6, fp
1e90c     08 CE 05 A1 |  if_e	add	fp, #8
1e910     E7 FE 69 AC |  if_e	wrlong	#255, fp
1e914     08 CE 85 A1 |  if_e	sub	fp, #8
1e918     E7 AE 02 5B |  if_ne	rdlong	local05, fp
1e91c     53 AF 62 50 |  if_ne	shl	local05, local01
1e920     E7 AE 62 5C |  if_ne	wrlong	local05, fp
1e924     E7 92 02 F6 | 	mov	arg01, fp
1e928     D4 ED BE FD | 	call	#_push
1e92c     E7 F0 03 F6 | 	mov	ptra, fp
1e930     F2 00 A0 FD | 	call	#popregs_
1e934                 | _do_shl_ret
1e934     2D 00 64 FD | 	ret
1e938                 | 
1e938                 | ' 
1e938                 | ' '--------------------------------- SHR
1e938                 | ' 
1e938                 | ' sub do_shr 
1e938                 | _do_shr
1e938     05 CA 05 F6 | 	mov	COUNT_, #5
1e93c     E8 00 A0 FD | 	call	#pushregs_
1e940     18 F0 07 F1 | 	add	ptra, #24
1e944     28 ED BE FD | 	call	#_pop
1e948     3D A7 02 F6 | 	mov	local01, result1
1e94c     3E 93 02 F6 | 	mov	arg01, result2
1e950     3F AD 02 F6 | 	mov	local04, result3
1e954     49 A9 02 F6 | 	mov	local02, arg01
1e958     56 AB 02 F6 | 	mov	local03, local04
1e95c     10 ED BE FD | 	call	#_pop
1e960     3F AF 02 F6 | 	mov	local05, result3
1e964     E7 7A 62 FC | 	wrlong	result1, fp
1e968     04 CE 05 F1 | 	add	fp, #4
1e96c     E7 7C 62 FC | 	wrlong	result2, fp
1e970     04 CE 05 F1 | 	add	fp, #4
1e974     E7 AE 62 FC | 	wrlong	local05, fp
1e978                 | ' 
1e978                 | ' t2=pop()
1e978                 | ' t1=pop()
1e978                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1e978     08 CE 85 F1 | 	sub	fp, #8
1e97c     1C AE 0E F2 | 	cmp	local05, #28 wz
1e980     E7 AE 02 AB |  if_e	rdlong	local05, fp
1e984     E7 AE 62 AC |  if_e	wrlong	local05, fp
1e988     08 CE 05 A1 |  if_e	add	fp, #8
1e98c     E7 3A 68 AC |  if_e	wrlong	#29, fp
1e990     08 CE 85 A1 |  if_e	sub	fp, #8
1e994                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1e994     1C AA 0E F2 | 	cmp	local03, #28 wz
1e998     1D AA 06 A6 |  if_e	mov	local03, #29
1e99c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
1e99c     08 CE 05 F1 | 	add	fp, #8
1e9a0     E7 AE 02 FB | 	rdlong	local05, fp
1e9a4     08 CE 85 F1 | 	sub	fp, #8
1e9a8     1F AE 0E F2 | 	cmp	local05, #31 wz
1e9ac     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1e9b0     08 CE 05 51 |  if_ne	add	fp, #8
1e9b4     E7 AC 02 5B |  if_ne	rdlong	local04, fp
1e9b8     08 CE 85 51 |  if_ne	sub	fp, #8
1e9bc     1E AC 0E 52 |  if_ne	cmp	local04, #30 wz
1e9c0     1E AA 0E 52 |  if_ne	cmp	local03, #30 wz
1e9c4     E7 0C 68 AC |  if_e	wrlong	#6, fp
1e9c8     08 CE 05 A1 |  if_e	add	fp, #8
1e9cc     E7 FE 69 AC |  if_e	wrlong	#255, fp
1e9d0     08 CE 85 A1 |  if_e	sub	fp, #8
1e9d4     E7 AE 02 5B |  if_ne	rdlong	local05, fp
1e9d8     53 AF 42 50 |  if_ne	shr	local05, local01
1e9dc     E7 AE 62 5C |  if_ne	wrlong	local05, fp
1e9e0     E7 92 02 F6 | 	mov	arg01, fp
1e9e4     18 ED BE FD | 	call	#_push
1e9e8     E7 F0 03 F6 | 	mov	ptra, fp
1e9ec     F2 00 A0 FD | 	call	#popregs_
1e9f0                 | _do_shr_ret
1e9f0     2D 00 64 FD | 	ret
1e9f4                 | 
1e9f4                 | ' 
1e9f4                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
1e9f4                 | ' 
1e9f4                 | ' ''----------------------------------------------------------------------------------------------------
1e9f4                 | ' ''------------------ Initialization procedures and helper procedures ---------------------------------
1e9f4                 | ' ''----------------------------------------------------------------------------------------------------
1e9f4                 | ' 
1e9f4                 | ' ''--------------------------- Command function pointers
1e9f4                 | ' 
1e9f4                 | ' sub init_commands
1e9f4                 | _init_commands
1e9f4                 | ' 
1e9f4                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
1e9f4     00 80 06 F6 | 	mov	_var01, #0
1e9f8     D7 14 48 FB | 	callpa	#(@LR__2591-@LR__2590)>>2,fcache_load_ptr_
1e9fc                 | LR__2590
1e9fc     40 7B 02 F6 | 	mov	result1, _var01
1ea00     02 7A 66 F0 | 	shl	result1, #2
1ea04     32 95 02 F6 | 	mov	arg02, objptr
1ea08     45 00 00 FF 
1ea0c     04 94 06 F1 | 	add	arg02, ##35332
1ea10     4A 7B 02 F1 | 	add	result1, arg02
1ea14     3D 65 62 FC | 	wrlong	objptr, result1
1ea18     01 80 06 F1 | 	add	_var01, #1
1ea1c     00 81 56 F2 | 	cmps	_var01, #256 wc
1ea20     D8 FF 9F CD |  if_b	jmp	#LR__2590
1ea24                 | LR__2591
1ea24     32 7B 02 F6 | 	mov	result1, objptr
1ea28     14 7A 26 F4 | 	bith	result1, #20
1ea2c     45 00 00 FF 
1ea30     08 64 06 F1 | 	add	objptr, ##35336
1ea34     32 7B 62 FC | 	wrlong	result1, objptr
1ea38     45 00 00 FF 
1ea3c     08 64 86 F1 | 	sub	objptr, ##35336
1ea40     32 7B 02 F6 | 	mov	result1, objptr
1ea44     15 7A 26 F4 | 	bith	result1, #21
1ea48     45 00 00 FF 
1ea4c     0C 64 06 F1 | 	add	objptr, ##35340
1ea50     32 7B 62 FC | 	wrlong	result1, objptr
1ea54     45 00 00 FF 
1ea58     0C 64 86 F1 | 	sub	objptr, ##35340
1ea5c     32 7B 02 F6 | 	mov	result1, objptr
1ea60     34 7A 26 F4 | 	bith	result1, #52
1ea64     45 00 00 FF 
1ea68     10 64 06 F1 | 	add	objptr, ##35344
1ea6c     32 7B 62 FC | 	wrlong	result1, objptr
1ea70     45 00 00 FF 
1ea74     10 64 86 F1 | 	sub	objptr, ##35344
1ea78     32 7B 02 F6 | 	mov	result1, objptr
1ea7c     16 7A 26 F4 | 	bith	result1, #22
1ea80     45 00 00 FF 
1ea84     18 64 06 F1 | 	add	objptr, ##35352
1ea88     32 7B 62 FC | 	wrlong	result1, objptr
1ea8c     45 00 00 FF 
1ea90     18 64 86 F1 | 	sub	objptr, ##35352
1ea94     32 7B 02 F6 | 	mov	result1, objptr
1ea98     00 28 00 FF 
1ea9c     00 7A 46 F5 | 	or	result1, ##5242880
1eaa0     45 00 00 FF 
1eaa4     1C 64 06 F1 | 	add	objptr, ##35356
1eaa8     32 7B 62 FC | 	wrlong	result1, objptr
1eaac     45 00 00 FF 
1eab0     1C 64 86 F1 | 	sub	objptr, ##35356
1eab4     32 7B 02 F6 | 	mov	result1, objptr
1eab8     35 7A 26 F4 | 	bith	result1, #53
1eabc     45 00 00 FF 
1eac0     20 64 06 F1 | 	add	objptr, ##35360
1eac4     32 7B 62 FC | 	wrlong	result1, objptr
1eac8     45 00 00 FF 
1eacc     20 64 86 F1 | 	sub	objptr, ##35360
1ead0     32 7B 02 F6 | 	mov	result1, objptr
1ead4     54 7A 26 F4 | 	bith	result1, #84
1ead8     45 00 00 FF 
1eadc     24 64 06 F1 | 	add	objptr, ##35364
1eae0     32 7B 62 FC | 	wrlong	result1, objptr
1eae4     45 00 00 FF 
1eae8     24 64 86 F1 | 	sub	objptr, ##35364
1eaec     32 7B 02 F6 | 	mov	result1, objptr
1eaf0     17 7A 26 F4 | 	bith	result1, #23
1eaf4     45 00 00 FF 
1eaf8     28 64 06 F1 | 	add	objptr, ##35368
1eafc     32 7B 62 FC | 	wrlong	result1, objptr
1eb00     45 00 00 FF 
1eb04     28 64 86 F1 | 	sub	objptr, ##35368
1eb08     32 7B 02 F6 | 	mov	result1, objptr
1eb0c     00 48 00 FF 
1eb10     00 7A 46 F5 | 	or	result1, ##9437184
1eb14     45 00 00 FF 
1eb18     2C 64 06 F1 | 	add	objptr, ##35372
1eb1c     32 7B 62 FC | 	wrlong	result1, objptr
1eb20     45 00 00 FF 
1eb24     2C 64 86 F1 | 	sub	objptr, ##35372
1eb28     32 7B 02 F6 | 	mov	result1, objptr
1eb2c     00 50 00 FF 
1eb30     00 7A 46 F5 | 	or	result1, ##10485760
1eb34     45 00 00 FF 
1eb38     30 64 06 F1 | 	add	objptr, ##35376
1eb3c     32 7B 62 FC | 	wrlong	result1, objptr
1eb40     45 00 00 FF 
1eb44     30 64 86 F1 | 	sub	objptr, ##35376
1eb48     32 7B 02 F6 | 	mov	result1, objptr
1eb4c     00 58 00 FF 
1eb50     00 7A 46 F5 | 	or	result1, ##11534336
1eb54     45 00 00 FF 
1eb58     34 64 06 F1 | 	add	objptr, ##35380
1eb5c     32 7B 62 FC | 	wrlong	result1, objptr
1eb60     45 00 00 FF 
1eb64     34 64 86 F1 | 	sub	objptr, ##35380
1eb68     32 7B 02 F6 | 	mov	result1, objptr
1eb6c     36 7A 26 F4 | 	bith	result1, #54
1eb70     45 00 00 FF 
1eb74     48 64 06 F1 | 	add	objptr, ##35400
1eb78     32 7B 62 FC | 	wrlong	result1, objptr
1eb7c     45 00 00 FF 
1eb80     48 64 86 F1 | 	sub	objptr, ##35400
1eb84     32 7B 02 F6 | 	mov	result1, objptr
1eb88     00 68 00 FF 
1eb8c     00 7A 46 F5 | 	or	result1, ##13631488
1eb90     45 00 00 FF 
1eb94     78 64 06 F1 | 	add	objptr, ##35448
1eb98     32 7B 62 FC | 	wrlong	result1, objptr
1eb9c     45 00 00 FF 
1eba0     78 64 86 F1 | 	sub	objptr, ##35448
1eba4     32 7B 02 F6 | 	mov	result1, objptr
1eba8     00 68 00 FF 
1ebac     00 7A 46 F5 | 	or	result1, ##13631488
1ebb0     45 00 00 FF 
1ebb4     74 64 06 F1 | 	add	objptr, ##35444
1ebb8     32 7B 62 FC | 	wrlong	result1, objptr
1ebbc     45 00 00 FF 
1ebc0     74 64 86 F1 | 	sub	objptr, ##35444
1ebc4     32 7B 02 F6 | 	mov	result1, objptr
1ebc8     00 68 00 FF 
1ebcc     00 7A 46 F5 | 	or	result1, ##13631488
1ebd0     45 00 00 FF 
1ebd4     7C 64 06 F1 | 	add	objptr, ##35452
1ebd8     32 7B 62 FC | 	wrlong	result1, objptr
1ebdc     45 00 00 FF 
1ebe0     7C 64 86 F1 | 	sub	objptr, ##35452
1ebe4     32 7B 02 F6 | 	mov	result1, objptr
1ebe8     00 68 00 FF 
1ebec     00 7A 46 F5 | 	or	result1, ##13631488
1ebf0     45 00 00 FF 
1ebf4     80 64 06 F1 | 	add	objptr, ##35456
1ebf8     32 7B 62 FC | 	wrlong	result1, objptr
1ebfc     45 00 00 FF 
1ec00     80 64 86 F1 | 	sub	objptr, ##35456
1ec04     32 7B 02 F6 | 	mov	result1, objptr
1ec08     00 68 00 FF 
1ec0c     00 7A 46 F5 | 	or	result1, ##13631488
1ec10     45 00 00 FF 
1ec14     B0 64 06 F1 | 	add	objptr, ##35504
1ec18     32 7B 62 FC | 	wrlong	result1, objptr
1ec1c     45 00 00 FF 
1ec20     B0 64 86 F1 | 	sub	objptr, ##35504
1ec24     32 7B 02 F6 | 	mov	result1, objptr
1ec28     55 7A 26 F4 | 	bith	result1, #85
1ec2c     45 00 00 FF 
1ec30     60 64 06 F1 | 	add	objptr, ##35424
1ec34     32 7B 62 FC | 	wrlong	result1, objptr
1ec38     45 00 00 FF 
1ec3c     60 64 86 F1 | 	sub	objptr, ##35424
1ec40     32 7B 02 F6 | 	mov	result1, objptr
1ec44     00 68 00 FF 
1ec48     00 7A 46 F5 | 	or	result1, ##13631488
1ec4c     45 00 00 FF 
1ec50     B4 64 06 F1 | 	add	objptr, ##35508
1ec54     32 7B 62 FC | 	wrlong	result1, objptr
1ec58     45 00 00 FF 
1ec5c     B4 64 86 F1 | 	sub	objptr, ##35508
1ec60     32 7B 02 F6 | 	mov	result1, objptr
1ec64     00 68 00 FF 
1ec68     00 7A 46 F5 | 	or	result1, ##13631488
1ec6c     45 00 00 FF 
1ec70     84 64 06 F1 | 	add	objptr, ##35460
1ec74     32 7B 62 FC | 	wrlong	result1, objptr
1ec78     45 00 00 FF 
1ec7c     84 64 86 F1 | 	sub	objptr, ##35460
1ec80     32 7B 02 F6 | 	mov	result1, objptr
1ec84     00 68 00 FF 
1ec88     00 7A 46 F5 | 	or	result1, ##13631488
1ec8c     45 00 00 FF 
1ec90     88 64 06 F1 | 	add	objptr, ##35464
1ec94     32 7B 62 FC | 	wrlong	result1, objptr
1ec98     45 00 00 FF 
1ec9c     88 64 86 F1 | 	sub	objptr, ##35464
1eca0     32 7B 02 F6 | 	mov	result1, objptr
1eca4     00 68 00 FF 
1eca8     00 7A 46 F5 | 	or	result1, ##13631488
1ecac     45 00 00 FF 
1ecb0     8C 64 06 F1 | 	add	objptr, ##35468
1ecb4     32 7B 62 FC | 	wrlong	result1, objptr
1ecb8     45 00 00 FF 
1ecbc     8C 64 86 F1 | 	sub	objptr, ##35468
1ecc0     32 7B 02 F6 | 	mov	result1, objptr
1ecc4     74 7A 26 F4 | 	bith	result1, #116
1ecc8     45 00 00 FF 
1eccc     04 65 06 F1 | 	add	objptr, ##35588
1ecd0     32 7B 62 FC | 	wrlong	result1, objptr
1ecd4     45 00 00 FF 
1ecd8     04 65 86 F1 | 	sub	objptr, ##35588
1ecdc     32 7B 02 F6 | 	mov	result1, objptr
1ece0     18 7A 26 F4 | 	bith	result1, #24
1ece4     45 00 00 FF 
1ece8     08 65 06 F1 | 	add	objptr, ##35592
1ecec     32 7B 62 FC | 	wrlong	result1, objptr
1ecf0     45 00 00 FF 
1ecf4     08 65 86 F1 | 	sub	objptr, ##35592
1ecf8     32 7B 02 F6 | 	mov	result1, objptr
1ecfc     00 88 00 FF 
1ed00     00 7A 46 F5 | 	or	result1, ##17825792
1ed04     45 00 00 FF 
1ed08     0C 65 06 F1 | 	add	objptr, ##35596
1ed0c     32 7B 62 FC | 	wrlong	result1, objptr
1ed10     45 00 00 FF 
1ed14     0C 65 86 F1 | 	sub	objptr, ##35596
1ed18     32 7B 02 F6 | 	mov	result1, objptr
1ed1c     00 90 00 FF 
1ed20     00 7A 46 F5 | 	or	result1, ##18874368
1ed24     45 00 00 FF 
1ed28     10 65 06 F1 | 	add	objptr, ##35600
1ed2c     32 7B 62 FC | 	wrlong	result1, objptr
1ed30     45 00 00 FF 
1ed34     10 65 86 F1 | 	sub	objptr, ##35600
1ed38     32 7B 02 F6 | 	mov	result1, objptr
1ed3c     00 98 00 FF 
1ed40     00 7A 46 F5 | 	or	result1, ##19922944
1ed44     45 00 00 FF 
1ed48     14 65 06 F1 | 	add	objptr, ##35604
1ed4c     32 7B 62 FC | 	wrlong	result1, objptr
1ed50     45 00 00 FF 
1ed54     14 65 86 F1 | 	sub	objptr, ##35604
1ed58     32 7B 02 F6 | 	mov	result1, objptr
1ed5c     00 A0 00 FF 
1ed60     00 7A 46 F5 | 	or	result1, ##20971520
1ed64     45 00 00 FF 
1ed68     18 65 06 F1 | 	add	objptr, ##35608
1ed6c     32 7B 62 FC | 	wrlong	result1, objptr
1ed70     45 00 00 FF 
1ed74     18 65 86 F1 | 	sub	objptr, ##35608
1ed78     32 7B 02 F6 | 	mov	result1, objptr
1ed7c     00 A8 00 FF 
1ed80     00 7A 46 F5 | 	or	result1, ##22020096
1ed84     45 00 00 FF 
1ed88     1C 65 06 F1 | 	add	objptr, ##35612
1ed8c     32 7B 62 FC | 	wrlong	result1, objptr
1ed90     45 00 00 FF 
1ed94     1C 65 86 F1 | 	sub	objptr, ##35612
1ed98     32 7B 02 F6 | 	mov	result1, objptr
1ed9c     00 B0 00 FF 
1eda0     00 7A 46 F5 | 	or	result1, ##23068672
1eda4     45 00 00 FF 
1eda8     20 65 06 F1 | 	add	objptr, ##35616
1edac     32 7B 62 FC | 	wrlong	result1, objptr
1edb0     45 00 00 FF 
1edb4     20 65 86 F1 | 	sub	objptr, ##35616
1edb8     32 7B 02 F6 | 	mov	result1, objptr
1edbc     00 B8 00 FF 
1edc0     00 7A 46 F5 | 	or	result1, ##24117248
1edc4     45 00 00 FF 
1edc8     24 65 06 F1 | 	add	objptr, ##35620
1edcc     32 7B 62 FC | 	wrlong	result1, objptr
1edd0     45 00 00 FF 
1edd4     24 65 86 F1 | 	sub	objptr, ##35620
1edd8     32 7B 02 F6 | 	mov	result1, objptr
1eddc     37 7A 26 F4 | 	bith	result1, #55
1ede0     45 00 00 FF 
1ede4     28 65 06 F1 | 	add	objptr, ##35624
1ede8     32 7B 62 FC | 	wrlong	result1, objptr
1edec     45 00 00 FF 
1edf0     28 65 86 F1 | 	sub	objptr, ##35624
1edf4     32 7B 02 F6 | 	mov	result1, objptr
1edf8     00 C8 00 FF 
1edfc     00 7A 46 F5 | 	or	result1, ##26214400
1ee00     45 00 00 FF 
1ee04     2C 65 06 F1 | 	add	objptr, ##35628
1ee08     32 7B 62 FC | 	wrlong	result1, objptr
1ee0c     45 00 00 FF 
1ee10     2C 65 86 F1 | 	sub	objptr, ##35628
1ee14     32 7B 02 F6 | 	mov	result1, objptr
1ee18     00 D0 00 FF 
1ee1c     00 7A 46 F5 | 	or	result1, ##27262976
1ee20     45 00 00 FF 
1ee24     30 65 06 F1 | 	add	objptr, ##35632
1ee28     32 7B 62 FC | 	wrlong	result1, objptr
1ee2c     45 00 00 FF 
1ee30     30 65 86 F1 | 	sub	objptr, ##35632
1ee34     32 7B 02 F6 | 	mov	result1, objptr
1ee38     00 D8 00 FF 
1ee3c     00 7A 46 F5 | 	or	result1, ##28311552
1ee40     45 00 00 FF 
1ee44     34 65 06 F1 | 	add	objptr, ##35636
1ee48     32 7B 62 FC | 	wrlong	result1, objptr
1ee4c     45 00 00 FF 
1ee50     34 65 86 F1 | 	sub	objptr, ##35636
1ee54     32 7B 02 F6 | 	mov	result1, objptr
1ee58     56 7A 26 F4 | 	bith	result1, #86
1ee5c     45 00 00 FF 
1ee60     38 65 06 F1 | 	add	objptr, ##35640
1ee64     32 7B 62 FC | 	wrlong	result1, objptr
1ee68     45 00 00 FF 
1ee6c     38 65 86 F1 | 	sub	objptr, ##35640
1ee70     32 7B 02 F6 | 	mov	result1, objptr
1ee74     00 E8 00 FF 
1ee78     00 7A 46 F5 | 	or	result1, ##30408704
1ee7c     47 00 00 FF 
1ee80     00 64 06 F1 | 	add	objptr, ##36352
1ee84     32 7B 62 FC | 	wrlong	result1, objptr
1ee88     47 00 00 FF 
1ee8c     00 64 86 F1 | 	sub	objptr, ##36352
1ee90     32 7B 02 F6 | 	mov	result1, objptr
1ee94     75 7A 26 F4 | 	bith	result1, #117
1ee98     45 00 00 FF 
1ee9c     3C 65 06 F1 | 	add	objptr, ##35644
1eea0     32 7B 62 FC | 	wrlong	result1, objptr
1eea4     45 00 00 FF 
1eea8     3C 65 86 F1 | 	sub	objptr, ##35644
1eeac     32 7B 02 F6 | 	mov	result1, objptr
1eeb0     94 7A 26 F4 | 	bith	result1, #148
1eeb4     45 00 00 FF 
1eeb8     50 65 06 F1 | 	add	objptr, ##35664
1eebc     32 7B 62 FC | 	wrlong	result1, objptr
1eec0     45 00 00 FF 
1eec4     50 65 86 F1 | 	sub	objptr, ##35664
1eec8     32 7B 02 F6 | 	mov	result1, objptr
1eecc     19 7A 26 F4 | 	bith	result1, #25
1eed0     45 00 00 FF 
1eed4     40 65 06 F1 | 	add	objptr, ##35648
1eed8     32 7B 62 FC | 	wrlong	result1, objptr
1eedc     45 00 00 FF 
1eee0     40 65 86 F1 | 	sub	objptr, ##35648
1eee4     32 7B 02 F6 | 	mov	result1, objptr
1eee8     00 08 01 FF 
1eeec     00 7A 46 F5 | 	or	result1, ##34603008
1eef0     45 00 00 FF 
1eef4     5C 64 06 F1 | 	add	objptr, ##35420
1eef8     32 7B 62 FC | 	wrlong	result1, objptr
1eefc     45 00 00 FF 
1ef00     5C 64 86 F1 | 	sub	objptr, ##35420
1ef04     32 7B 02 F6 | 	mov	result1, objptr
1ef08     00 10 01 FF 
1ef0c     00 7A 46 F5 | 	or	result1, ##35651584
1ef10     45 00 00 FF 
1ef14     48 65 06 F1 | 	add	objptr, ##35656
1ef18     32 7B 62 FC | 	wrlong	result1, objptr
1ef1c     45 00 00 FF 
1ef20     48 65 86 F1 | 	sub	objptr, ##35656
1ef24     32 7B 02 F6 | 	mov	result1, objptr
1ef28     00 18 01 FF 
1ef2c     00 7A 46 F5 | 	or	result1, ##36700160
1ef30     45 00 00 FF 
1ef34     4C 65 06 F1 | 	add	objptr, ##35660
1ef38     32 7B 62 FC | 	wrlong	result1, objptr
1ef3c     45 00 00 FF 
1ef40     4C 65 86 F1 | 	sub	objptr, ##35660
1ef44     32 7B 02 F6 | 	mov	result1, objptr
1ef48     00 20 01 FF 
1ef4c     00 7A 46 F5 | 	or	result1, ##37748736
1ef50     45 00 00 FF 
1ef54     58 65 06 F1 | 	add	objptr, ##35672
1ef58     32 7B 62 FC | 	wrlong	result1, objptr
1ef5c     45 00 00 FF 
1ef60     58 65 86 F1 | 	sub	objptr, ##35672
1ef64     32 7B 02 F6 | 	mov	result1, objptr
1ef68     00 28 01 FF 
1ef6c     00 7A 46 F5 | 	or	result1, ##38797312
1ef70     45 00 00 FF 
1ef74     5C 65 06 F1 | 	add	objptr, ##35676
1ef78     32 7B 62 FC | 	wrlong	result1, objptr
1ef7c     45 00 00 FF 
1ef80     5C 65 86 F1 | 	sub	objptr, ##35676
1ef84     32 7B 02 F6 | 	mov	result1, objptr
1ef88     00 30 01 FF 
1ef8c     00 7A 46 F5 | 	or	result1, ##39845888
1ef90     45 00 00 FF 
1ef94     60 65 06 F1 | 	add	objptr, ##35680
1ef98     32 7B 62 FC | 	wrlong	result1, objptr
1ef9c     45 00 00 FF 
1efa0     60 65 86 F1 | 	sub	objptr, ##35680
1efa4     32 7B 02 F6 | 	mov	result1, objptr
1efa8     00 38 01 FF 
1efac     00 7A 46 F5 | 	or	result1, ##40894464
1efb0     45 00 00 FF 
1efb4     64 65 06 F1 | 	add	objptr, ##35684
1efb8     32 7B 62 FC | 	wrlong	result1, objptr
1efbc     45 00 00 FF 
1efc0     64 65 86 F1 | 	sub	objptr, ##35684
1efc4     32 7B 02 F6 | 	mov	result1, objptr
1efc8     00 40 01 FF 
1efcc     00 7A 46 F5 | 	or	result1, ##41943040
1efd0     45 00 00 FF 
1efd4     6C 65 06 F1 | 	add	objptr, ##35692
1efd8     32 7B 62 FC | 	wrlong	result1, objptr
1efdc     45 00 00 FF 
1efe0     6C 65 86 F1 | 	sub	objptr, ##35692
1efe4     32 7B 02 F6 | 	mov	result1, objptr
1efe8     00 08 01 FF 
1efec     00 7A 46 F5 | 	or	result1, ##34603008
1eff0     45 00 00 FF 
1eff4     70 65 06 F1 | 	add	objptr, ##35696
1eff8     32 7B 62 FC | 	wrlong	result1, objptr
1effc     45 00 00 FF 
1f000     70 65 86 F1 | 	sub	objptr, ##35696
1f004     32 7B 02 F6 | 	mov	result1, objptr
1f008     00 48 01 FF 
1f00c     00 7A 46 F5 | 	or	result1, ##42991616
1f010     45 00 00 FF 
1f014     70 64 06 F1 | 	add	objptr, ##35440
1f018     32 7B 62 FC | 	wrlong	result1, objptr
1f01c     45 00 00 FF 
1f020     70 64 86 F1 | 	sub	objptr, ##35440
1f024     32 7B 02 F6 | 	mov	result1, objptr
1f028     00 50 01 FF 
1f02c     00 7A 46 F5 | 	or	result1, ##44040192
1f030     45 00 00 FF 
1f034     A0 64 06 F1 | 	add	objptr, ##35488
1f038     32 7B 62 FC | 	wrlong	result1, objptr
1f03c     45 00 00 FF 
1f040     A0 64 86 F1 | 	sub	objptr, ##35488
1f044     32 7B 02 F6 | 	mov	result1, objptr
1f048     00 58 01 FF 
1f04c     00 7A 46 F5 | 	or	result1, ##45088768
1f050     45 00 00 FF 
1f054     9C 64 06 F1 | 	add	objptr, ##35484
1f058     32 7B 62 FC | 	wrlong	result1, objptr
1f05c     45 00 00 FF 
1f060     9C 64 86 F1 | 	sub	objptr, ##35484
1f064     32 7B 02 F6 | 	mov	result1, objptr
1f068     00 60 01 FF 
1f06c     00 7A 46 F5 | 	or	result1, ##46137344
1f070     45 00 00 FF 
1f074     40 64 06 F1 | 	add	objptr, ##35392
1f078     32 7B 62 FC | 	wrlong	result1, objptr
1f07c     45 00 00 FF 
1f080     40 64 86 F1 | 	sub	objptr, ##35392
1f084     32 7B 02 F6 | 	mov	result1, objptr
1f088     00 68 01 FF 
1f08c     00 7A 46 F5 | 	or	result1, ##47185920
1f090     45 00 00 FF 
1f094     44 64 06 F1 | 	add	objptr, ##35396
1f098     32 7B 62 FC | 	wrlong	result1, objptr
1f09c     45 00 00 FF 
1f0a0     44 64 86 F1 | 	sub	objptr, ##35396
1f0a4     32 7B 02 F6 | 	mov	result1, objptr
1f0a8     00 70 01 FF 
1f0ac     00 7A 46 F5 | 	or	result1, ##48234496
1f0b0     45 00 00 FF 
1f0b4     AC 64 06 F1 | 	add	objptr, ##35500
1f0b8     32 7B 62 FC | 	wrlong	result1, objptr
1f0bc     45 00 00 FF 
1f0c0     AC 64 86 F1 | 	sub	objptr, ##35500
1f0c4     32 7B 02 F6 | 	mov	result1, objptr
1f0c8     00 78 01 FF 
1f0cc     00 7A 46 F5 | 	or	result1, ##49283072
1f0d0     45 00 00 FF 
1f0d4     54 65 06 F1 | 	add	objptr, ##35668
1f0d8     32 7B 62 FC | 	wrlong	result1, objptr
1f0dc     45 00 00 FF 
1f0e0     54 65 86 F1 | 	sub	objptr, ##35668
1f0e4     32 7B 02 F6 | 	mov	result1, objptr
1f0e8     38 7A 26 F4 | 	bith	result1, #56
1f0ec     45 00 00 FF 
1f0f0     68 65 06 F1 | 	add	objptr, ##35688
1f0f4     32 7B 62 FC | 	wrlong	result1, objptr
1f0f8     45 00 00 FF 
1f0fc     68 65 86 F1 | 	sub	objptr, ##35688
1f100     32 7B 02 F6 | 	mov	result1, objptr
1f104     00 88 01 FF 
1f108     00 7A 46 F5 | 	or	result1, ##51380224
1f10c     45 00 00 FF 
1f110     74 65 06 F1 | 	add	objptr, ##35700
1f114     32 7B 62 FC | 	wrlong	result1, objptr
1f118     45 00 00 FF 
1f11c     74 65 86 F1 | 	sub	objptr, ##35700
1f120     32 7B 02 F6 | 	mov	result1, objptr
1f124     00 90 01 FF 
1f128     00 7A 46 F5 | 	or	result1, ##52428800
1f12c     45 00 00 FF 
1f130     78 65 06 F1 | 	add	objptr, ##35704
1f134     32 7B 62 FC | 	wrlong	result1, objptr
1f138     45 00 00 FF 
1f13c     78 65 86 F1 | 	sub	objptr, ##35704
1f140     32 7B 02 F6 | 	mov	result1, objptr
1f144     00 98 01 FF 
1f148     00 7A 46 F5 | 	or	result1, ##53477376
1f14c     45 00 00 FF 
1f150     7C 65 06 F1 | 	add	objptr, ##35708
1f154     32 7B 62 FC | 	wrlong	result1, objptr
1f158     45 00 00 FF 
1f15c     7C 65 86 F1 | 	sub	objptr, ##35708
1f160     32 7B 02 F6 | 	mov	result1, objptr
1f164     00 A0 01 FF 
1f168     00 7A 46 F5 | 	or	result1, ##54525952
1f16c     45 00 00 FF 
1f170     80 65 06 F1 | 	add	objptr, ##35712
1f174     32 7B 62 FC | 	wrlong	result1, objptr
1f178     45 00 00 FF 
1f17c     80 65 86 F1 | 	sub	objptr, ##35712
1f180     32 7B 02 F6 | 	mov	result1, objptr
1f184     00 A8 01 FF 
1f188     00 7A 46 F5 | 	or	result1, ##55574528
1f18c     45 00 00 FF 
1f190     84 65 06 F1 | 	add	objptr, ##35716
1f194     32 7B 62 FC | 	wrlong	result1, objptr
1f198     45 00 00 FF 
1f19c     84 65 86 F1 | 	sub	objptr, ##35716
1f1a0     32 7B 02 F6 | 	mov	result1, objptr
1f1a4     00 B0 01 FF 
1f1a8     00 7A 46 F5 | 	or	result1, ##56623104
1f1ac     45 00 00 FF 
1f1b0     88 65 06 F1 | 	add	objptr, ##35720
1f1b4     32 7B 62 FC | 	wrlong	result1, objptr
1f1b8     45 00 00 FF 
1f1bc     88 65 86 F1 | 	sub	objptr, ##35720
1f1c0     32 7B 02 F6 | 	mov	result1, objptr
1f1c4     94 7A 26 F4 | 	bith	result1, #148
1f1c8     45 00 00 FF 
1f1cc     50 65 06 F1 | 	add	objptr, ##35664
1f1d0     32 7B 62 FC | 	wrlong	result1, objptr
1f1d4     45 00 00 FF 
1f1d8     50 65 86 F1 | 	sub	objptr, ##35664
1f1dc     32 7B 02 F6 | 	mov	result1, objptr
1f1e0     00 B8 01 FF 
1f1e4     00 7A 46 F5 | 	or	result1, ##57671680
1f1e8     45 00 00 FF 
1f1ec     90 65 06 F1 | 	add	objptr, ##35728
1f1f0     32 7B 62 FC | 	wrlong	result1, objptr
1f1f4     45 00 00 FF 
1f1f8     90 65 86 F1 | 	sub	objptr, ##35728
1f1fc     32 7B 02 F6 | 	mov	result1, objptr
1f200     57 7A 26 F4 | 	bith	result1, #87
1f204     45 00 00 FF 
1f208     8C 65 06 F1 | 	add	objptr, ##35724
1f20c     32 7B 62 FC | 	wrlong	result1, objptr
1f210     45 00 00 FF 
1f214     8C 65 86 F1 | 	sub	objptr, ##35724
1f218     32 7B 02 F6 | 	mov	result1, objptr
1f21c     00 C8 01 FF 
1f220     00 7A 46 F5 | 	or	result1, ##59768832
1f224     45 00 00 FF 
1f228     A4 65 06 F1 | 	add	objptr, ##35748
1f22c     32 7B 62 FC | 	wrlong	result1, objptr
1f230     45 00 00 FF 
1f234     A4 65 86 F1 | 	sub	objptr, ##35748
1f238     32 7B 02 F6 | 	mov	result1, objptr
1f23c     00 D0 01 FF 
1f240     00 7A 46 F5 | 	or	result1, ##60817408
1f244     45 00 00 FF 
1f248     A8 65 06 F1 | 	add	objptr, ##35752
1f24c     32 7B 62 FC | 	wrlong	result1, objptr
1f250     45 00 00 FF 
1f254     A8 65 86 F1 | 	sub	objptr, ##35752
1f258     32 7B 02 F6 | 	mov	result1, objptr
1f25c     00 D8 01 FF 
1f260     00 7A 46 F5 | 	or	result1, ##61865984
1f264     45 00 00 FF 
1f268     94 65 06 F1 | 	add	objptr, ##35732
1f26c     32 7B 62 FC | 	wrlong	result1, objptr
1f270     45 00 00 FF 
1f274     94 65 86 F1 | 	sub	objptr, ##35732
1f278     32 7B 02 F6 | 	mov	result1, objptr
1f27c     76 7A 26 F4 | 	bith	result1, #118
1f280     45 00 00 FF 
1f284     98 65 06 F1 | 	add	objptr, ##35736
1f288     32 7B 62 FC | 	wrlong	result1, objptr
1f28c     45 00 00 FF 
1f290     98 65 86 F1 | 	sub	objptr, ##35736
1f294     32 7B 02 F6 | 	mov	result1, objptr
1f298     00 E8 01 FF 
1f29c     00 7A 46 F5 | 	or	result1, ##63963136
1f2a0     45 00 00 FF 
1f2a4     9C 65 06 F1 | 	add	objptr, ##35740
1f2a8     32 7B 62 FC | 	wrlong	result1, objptr
1f2ac     45 00 00 FF 
1f2b0     9C 65 86 F1 | 	sub	objptr, ##35740
1f2b4     32 7B 02 F6 | 	mov	result1, objptr
1f2b8     95 7A 26 F4 | 	bith	result1, #149
1f2bc     45 00 00 FF 
1f2c0     A0 65 06 F1 | 	add	objptr, ##35744
1f2c4     32 7B 62 FC | 	wrlong	result1, objptr
1f2c8     45 00 00 FF 
1f2cc     A0 65 86 F1 | 	sub	objptr, ##35744
1f2d0     32 7B 02 F6 | 	mov	result1, objptr
1f2d4     B4 7A 26 F4 | 	bith	result1, #180
1f2d8     45 00 00 FF 
1f2dc     B0 65 06 F1 | 	add	objptr, ##35760
1f2e0     32 7B 62 FC | 	wrlong	result1, objptr
1f2e4     45 00 00 FF 
1f2e8     B0 65 86 F1 | 	sub	objptr, ##35760
1f2ec     32 7B 02 F6 | 	mov	result1, objptr
1f2f0     1A 7A 26 F4 | 	bith	result1, #26
1f2f4     45 00 00 FF 
1f2f8     AC 65 06 F1 | 	add	objptr, ##35756
1f2fc     32 7B 62 FC | 	wrlong	result1, objptr
1f300     45 00 00 FF 
1f304     AC 65 86 F1 | 	sub	objptr, ##35756
1f308     32 7B 02 F6 | 	mov	result1, objptr
1f30c     00 08 02 FF 
1f310     00 7A 46 F5 | 	or	result1, ##68157440
1f314     45 00 00 FF 
1f318     BC 65 06 F1 | 	add	objptr, ##35772
1f31c     32 7B 62 FC | 	wrlong	result1, objptr
1f320     45 00 00 FF 
1f324     BC 65 86 F1 | 	sub	objptr, ##35772
1f328     32 7B 02 F6 | 	mov	result1, objptr
1f32c     00 10 02 FF 
1f330     00 7A 46 F5 | 	or	result1, ##69206016
1f334     45 00 00 FF 
1f338     B8 65 06 F1 | 	add	objptr, ##35768
1f33c     32 7B 62 FC | 	wrlong	result1, objptr
1f340     45 00 00 FF 
1f344     B8 65 86 F1 | 	sub	objptr, ##35768
1f348     32 7B 02 F6 | 	mov	result1, objptr
1f34c     00 18 02 FF 
1f350     00 7A 46 F5 | 	or	result1, ##70254592
1f354     45 00 00 FF 
1f358     B4 65 06 F1 | 	add	objptr, ##35764
1f35c     32 7B 62 FC | 	wrlong	result1, objptr
1f360     45 00 00 FF 
1f364     B4 65 86 F1 | 	sub	objptr, ##35764
1f368     32 7B 02 F6 | 	mov	result1, objptr
1f36c     00 20 02 FF 
1f370     00 7A 46 F5 | 	or	result1, ##71303168
1f374     45 00 00 FF 
1f378     C0 65 06 F1 | 	add	objptr, ##35776
1f37c     32 7B 62 FC | 	wrlong	result1, objptr
1f380     45 00 00 FF 
1f384     C0 65 86 F1 | 	sub	objptr, ##35776
1f388     32 7B 02 F6 | 	mov	result1, objptr
1f38c     00 28 02 FF 
1f390     00 7A 46 F5 | 	or	result1, ##72351744
1f394     45 00 00 FF 
1f398     C4 65 06 F1 | 	add	objptr, ##35780
1f39c     32 7B 62 FC | 	wrlong	result1, objptr
1f3a0     45 00 00 FF 
1f3a4     C4 65 86 F1 | 	sub	objptr, ##35780
1f3a8     32 7B 02 F6 | 	mov	result1, objptr
1f3ac     00 30 02 FF 
1f3b0     00 7A 46 F5 | 	or	result1, ##73400320
1f3b4     45 00 00 FF 
1f3b8     58 64 06 F1 | 	add	objptr, ##35416
1f3bc     32 7B 62 FC | 	wrlong	result1, objptr
1f3c0     45 00 00 FF 
1f3c4     58 64 86 F1 | 	sub	objptr, ##35416
1f3c8     32 7B 02 F6 | 	mov	result1, objptr
1f3cc     00 38 02 FF 
1f3d0     00 7A 46 F5 | 	or	result1, ##74448896
1f3d4     45 00 00 FF 
1f3d8     DC 65 06 F1 | 	add	objptr, ##35804
1f3dc     32 7B 62 FC | 	wrlong	result1, objptr
1f3e0     45 00 00 FF 
1f3e4     DC 65 86 F1 | 	sub	objptr, ##35804
1f3e8     32 7B 02 F6 | 	mov	result1, objptr
1f3ec     00 40 02 FF 
1f3f0     00 7A 46 F5 | 	or	result1, ##75497472
1f3f4     45 00 00 FF 
1f3f8     EC 65 06 F1 | 	add	objptr, ##35820
1f3fc     32 7B 62 FC | 	wrlong	result1, objptr
1f400     45 00 00 FF 
1f404     EC 65 86 F1 | 	sub	objptr, ##35820
1f408     32 7B 02 F6 | 	mov	result1, objptr
1f40c     00 48 02 FF 
1f410     00 7A 46 F5 | 	or	result1, ##76546048
1f414     45 00 00 FF 
1f418     F0 65 06 F1 | 	add	objptr, ##35824
1f41c     32 7B 62 FC | 	wrlong	result1, objptr
1f420     45 00 00 FF 
1f424     F0 65 86 F1 | 	sub	objptr, ##35824
1f428     32 7B 02 F6 | 	mov	result1, objptr
1f42c     00 50 02 FF 
1f430     00 7A 46 F5 | 	or	result1, ##77594624
1f434     45 00 00 FF 
1f438     E8 65 06 F1 | 	add	objptr, ##35816
1f43c     32 7B 62 FC | 	wrlong	result1, objptr
1f440     45 00 00 FF 
1f444     E8 65 86 F1 | 	sub	objptr, ##35816
1f448     32 7B 02 F6 | 	mov	result1, objptr
1f44c     00 58 02 FF 
1f450     00 7A 46 F5 | 	or	result1, ##78643200
1f454     45 00 00 FF 
1f458     E0 65 06 F1 | 	add	objptr, ##35808
1f45c     32 7B 62 FC | 	wrlong	result1, objptr
1f460     45 00 00 FF 
1f464     E0 65 86 F1 | 	sub	objptr, ##35808
1f468     32 7B 02 F6 | 	mov	result1, objptr
1f46c     00 60 02 FF 
1f470     00 7A 46 F5 | 	or	result1, ##79691776
1f474     45 00 00 FF 
1f478     E4 65 06 F1 | 	add	objptr, ##35812
1f47c     32 7B 62 FC | 	wrlong	result1, objptr
1f480     45 00 00 FF 
1f484     E4 65 86 F1 | 	sub	objptr, ##35812
1f488     32 7B 02 F6 | 	mov	result1, objptr
1f48c     00 68 02 FF 
1f490     00 7A 46 F5 | 	or	result1, ##80740352
1f494     45 00 00 FF 
1f498     F4 65 06 F1 | 	add	objptr, ##35828
1f49c     32 7B 62 FC | 	wrlong	result1, objptr
1f4a0     45 00 00 FF 
1f4a4     F4 65 86 F1 | 	sub	objptr, ##35828
1f4a8     32 7B 02 F6 | 	mov	result1, objptr
1f4ac     00 70 02 FF 
1f4b0     00 7A 46 F5 | 	or	result1, ##81788928
1f4b4     45 00 00 FF 
1f4b8     F8 65 06 F1 | 	add	objptr, ##35832
1f4bc     32 7B 62 FC | 	wrlong	result1, objptr
1f4c0     45 00 00 FF 
1f4c4     F8 65 86 F1 | 	sub	objptr, ##35832
1f4c8     32 7B 02 F6 | 	mov	result1, objptr
1f4cc     00 78 02 FF 
1f4d0     00 7A 46 F5 | 	or	result1, ##82837504
1f4d4     45 00 00 FF 
1f4d8     FC 65 06 F1 | 	add	objptr, ##35836
1f4dc     32 7B 62 FC | 	wrlong	result1, objptr
1f4e0     45 00 00 FF 
1f4e4     FC 65 86 F1 | 	sub	objptr, ##35836
1f4e8     32 7B 02 F6 | 	mov	result1, objptr
1f4ec     00 80 02 FF 
1f4f0     00 7A 46 F5 | 	or	result1, ##83886080
1f4f4     46 00 00 FF 
1f4f8     00 64 06 F1 | 	add	objptr, ##35840
1f4fc     32 7B 62 FC | 	wrlong	result1, objptr
1f500     46 00 00 FF 
1f504     00 64 86 F1 | 	sub	objptr, ##35840
1f508     32 7B 02 F6 | 	mov	result1, objptr
1f50c     00 88 02 FF 
1f510     00 7A 46 F5 | 	or	result1, ##84934656
1f514     46 00 00 FF 
1f518     04 64 06 F1 | 	add	objptr, ##35844
1f51c     32 7B 62 FC | 	wrlong	result1, objptr
1f520     46 00 00 FF 
1f524     04 64 86 F1 | 	sub	objptr, ##35844
1f528     32 7B 02 F6 | 	mov	result1, objptr
1f52c     00 90 02 FF 
1f530     00 7A 46 F5 | 	or	result1, ##85983232
1f534     46 00 00 FF 
1f538     08 64 06 F1 | 	add	objptr, ##35848
1f53c     32 7B 62 FC | 	wrlong	result1, objptr
1f540     46 00 00 FF 
1f544     08 64 86 F1 | 	sub	objptr, ##35848
1f548     32 7B 02 F6 | 	mov	result1, objptr
1f54c     00 98 02 FF 
1f550     00 7A 46 F5 | 	or	result1, ##87031808
1f554     46 00 00 FF 
1f558     0C 64 06 F1 | 	add	objptr, ##35852
1f55c     32 7B 62 FC | 	wrlong	result1, objptr
1f560     46 00 00 FF 
1f564     0C 64 86 F1 | 	sub	objptr, ##35852
1f568     32 7B 02 F6 | 	mov	result1, objptr
1f56c     00 A0 02 FF 
1f570     00 7A 46 F5 | 	or	result1, ##88080384
1f574     46 00 00 FF 
1f578     10 64 06 F1 | 	add	objptr, ##35856
1f57c     32 7B 62 FC | 	wrlong	result1, objptr
1f580     46 00 00 FF 
1f584     10 64 86 F1 | 	sub	objptr, ##35856
1f588     32 7B 02 F6 | 	mov	result1, objptr
1f58c     00 A8 02 FF 
1f590     00 7A 46 F5 | 	or	result1, ##89128960
1f594     46 00 00 FF 
1f598     1C 64 06 F1 | 	add	objptr, ##35868
1f59c     32 7B 62 FC | 	wrlong	result1, objptr
1f5a0     46 00 00 FF 
1f5a4     1C 64 86 F1 | 	sub	objptr, ##35868
1f5a8     32 7B 02 F6 | 	mov	result1, objptr
1f5ac     00 B0 02 FF 
1f5b0     00 7A 46 F5 | 	or	result1, ##90177536
1f5b4     46 00 00 FF 
1f5b8     14 64 06 F1 | 	add	objptr, ##35860
1f5bc     32 7B 62 FC | 	wrlong	result1, objptr
1f5c0     46 00 00 FF 
1f5c4     14 64 86 F1 | 	sub	objptr, ##35860
1f5c8     32 7B 02 F6 | 	mov	result1, objptr
1f5cc     00 B8 02 FF 
1f5d0     00 7A 46 F5 | 	or	result1, ##91226112
1f5d4     46 00 00 FF 
1f5d8     18 64 06 F1 | 	add	objptr, ##35864
1f5dc     32 7B 62 FC | 	wrlong	result1, objptr
1f5e0     46 00 00 FF 
1f5e4     18 64 86 F1 | 	sub	objptr, ##35864
1f5e8     32 7B 02 F6 | 	mov	result1, objptr
1f5ec     00 C0 02 FF 
1f5f0     00 7A 46 F5 | 	or	result1, ##92274688
1f5f4     46 00 00 FF 
1f5f8     20 64 06 F1 | 	add	objptr, ##35872
1f5fc     32 7B 62 FC | 	wrlong	result1, objptr
1f600     46 00 00 FF 
1f604     20 64 86 F1 | 	sub	objptr, ##35872
1f608     32 7B 02 F6 | 	mov	result1, objptr
1f60c     00 C8 02 FF 
1f610     00 7A 46 F5 | 	or	result1, ##93323264
1f614     45 00 00 FF 
1f618     C8 65 06 F1 | 	add	objptr, ##35784
1f61c     32 7B 62 FC | 	wrlong	result1, objptr
1f620     45 00 00 FF 
1f624     C8 65 86 F1 | 	sub	objptr, ##35784
1f628     32 7B 02 F6 | 	mov	result1, objptr
1f62c     00 D0 02 FF 
1f630     00 7A 46 F5 | 	or	result1, ##94371840
1f634     45 00 00 FF 
1f638     D0 65 06 F1 | 	add	objptr, ##35792
1f63c     32 7B 62 FC | 	wrlong	result1, objptr
1f640     45 00 00 FF 
1f644     D0 65 86 F1 | 	sub	objptr, ##35792
1f648     32 7B 02 F6 | 	mov	result1, objptr
1f64c     00 D8 02 FF 
1f650     00 7A 46 F5 | 	or	result1, ##95420416
1f654     45 00 00 FF 
1f658     D4 65 06 F1 | 	add	objptr, ##35796
1f65c     32 7B 62 FC | 	wrlong	result1, objptr
1f660     45 00 00 FF 
1f664     D4 65 86 F1 | 	sub	objptr, ##35796
1f668     32 7B 02 F6 | 	mov	result1, objptr
1f66c     00 E0 02 FF 
1f670     00 7A 46 F5 | 	or	result1, ##96468992
1f674     46 00 00 FF 
1f678     24 64 06 F1 | 	add	objptr, ##35876
1f67c     32 7B 62 FC | 	wrlong	result1, objptr
1f680     46 00 00 FF 
1f684     24 64 86 F1 | 	sub	objptr, ##35876
1f688     32 7B 02 F6 | 	mov	result1, objptr
1f68c     00 E8 02 FF 
1f690     00 7A 46 F5 | 	or	result1, ##97517568
1f694     46 00 00 FF 
1f698     28 64 06 F1 | 	add	objptr, ##35880
1f69c     32 7B 62 FC | 	wrlong	result1, objptr
1f6a0     46 00 00 FF 
1f6a4     28 64 86 F1 | 	sub	objptr, ##35880
1f6a8     32 7B 02 F6 | 	mov	result1, objptr
1f6ac     00 F0 02 FF 
1f6b0     00 7A 46 F5 | 	or	result1, ##98566144
1f6b4     46 00 00 FF 
1f6b8     2C 64 06 F1 | 	add	objptr, ##35884
1f6bc     32 7B 62 FC | 	wrlong	result1, objptr
1f6c0     46 00 00 FF 
1f6c4     2C 64 86 F1 | 	sub	objptr, ##35884
1f6c8     32 7B 02 F6 | 	mov	result1, objptr
1f6cc     00 F8 02 FF 
1f6d0     00 7A 46 F5 | 	or	result1, ##99614720
1f6d4     45 00 00 FF 
1f6d8     D8 65 06 F1 | 	add	objptr, ##35800
1f6dc     32 7B 62 FC | 	wrlong	result1, objptr
1f6e0     45 00 00 FF 
1f6e4     D8 65 86 F1 | 	sub	objptr, ##35800
1f6e8     32 7B 02 F6 | 	mov	result1, objptr
1f6ec     39 7A 26 F4 | 	bith	result1, #57
1f6f0     46 00 00 FF 
1f6f4     3C 64 06 F1 | 	add	objptr, ##35900
1f6f8     32 7B 62 FC | 	wrlong	result1, objptr
1f6fc     46 00 00 FF 
1f700     3C 64 86 F1 | 	sub	objptr, ##35900
1f704     32 7B 02 F6 | 	mov	result1, objptr
1f708     00 08 03 FF 
1f70c     00 7A 46 F5 | 	or	result1, ##101711872
1f710     46 00 00 FF 
1f714     44 64 06 F1 | 	add	objptr, ##35908
1f718     32 7B 62 FC | 	wrlong	result1, objptr
1f71c     46 00 00 FF 
1f720     44 64 86 F1 | 	sub	objptr, ##35908
1f724     32 7B 02 F6 | 	mov	result1, objptr
1f728     00 10 03 FF 
1f72c     00 7A 46 F5 | 	or	result1, ##102760448
1f730     46 00 00 FF 
1f734     38 64 06 F1 | 	add	objptr, ##35896
1f738     32 7B 62 FC | 	wrlong	result1, objptr
1f73c     46 00 00 FF 
1f740     38 64 86 F1 | 	sub	objptr, ##35896
1f744     32 7B 02 F6 | 	mov	result1, objptr
1f748     00 18 03 FF 
1f74c     00 7A 46 F5 | 	or	result1, ##103809024
1f750     46 00 00 FF 
1f754     34 64 06 F1 | 	add	objptr, ##35892
1f758     32 7B 62 FC | 	wrlong	result1, objptr
1f75c     46 00 00 FF 
1f760     34 64 86 F1 | 	sub	objptr, ##35892
1f764     32 7B 02 F6 | 	mov	result1, objptr
1f768     00 20 03 FF 
1f76c     00 7A 46 F5 | 	or	result1, ##104857600
1f770     46 00 00 FF 
1f774     30 64 06 F1 | 	add	objptr, ##35888
1f778     32 7B 62 FC | 	wrlong	result1, objptr
1f77c     46 00 00 FF 
1f780     30 64 86 F1 | 	sub	objptr, ##35888
1f784     32 7B 02 F6 | 	mov	result1, objptr
1f788     00 28 03 FF 
1f78c     00 7A 46 F5 | 	or	result1, ##105906176
1f790     46 00 00 FF 
1f794     40 64 06 F1 | 	add	objptr, ##35904
1f798     32 7B 62 FC | 	wrlong	result1, objptr
1f79c     46 00 00 FF 
1f7a0     40 64 86 F1 | 	sub	objptr, ##35904
1f7a4     32 7B 02 F6 | 	mov	result1, objptr
1f7a8     00 30 03 FF 
1f7ac     00 7A 46 F5 | 	or	result1, ##106954752
1f7b0     46 00 00 FF 
1f7b4     48 64 06 F1 | 	add	objptr, ##35912
1f7b8     32 7B 62 FC | 	wrlong	result1, objptr
1f7bc     46 00 00 FF 
1f7c0     48 64 86 F1 | 	sub	objptr, ##35912
1f7c4     32 7B 02 F6 | 	mov	result1, objptr
1f7c8     00 38 03 FF 
1f7cc     00 7A 46 F5 | 	or	result1, ##108003328
1f7d0     46 00 00 FF 
1f7d4     4C 64 06 F1 | 	add	objptr, ##35916
1f7d8     32 7B 62 FC | 	wrlong	result1, objptr
1f7dc     46 00 00 FF 
1f7e0     4C 64 86 F1 | 	sub	objptr, ##35916
1f7e4     32 7B 02 F6 | 	mov	result1, objptr
1f7e8     00 40 03 FF 
1f7ec     00 7A 46 F5 | 	or	result1, ##109051904
1f7f0     46 00 00 FF 
1f7f4     50 64 06 F1 | 	add	objptr, ##35920
1f7f8     32 7B 62 FC | 	wrlong	result1, objptr
1f7fc     46 00 00 FF 
1f800     50 64 86 F1 | 	sub	objptr, ##35920
1f804     32 7B 02 F6 | 	mov	result1, objptr
1f808     00 48 03 FF 
1f80c     00 7A 46 F5 | 	or	result1, ##110100480
1f810     46 00 00 FF 
1f814     58 64 06 F1 | 	add	objptr, ##35928
1f818     32 7B 62 FC | 	wrlong	result1, objptr
1f81c     46 00 00 FF 
1f820     58 64 86 F1 | 	sub	objptr, ##35928
1f824     32 7B 02 F6 | 	mov	result1, objptr
1f828     00 50 03 FF 
1f82c     00 7A 46 F5 | 	or	result1, ##111149056
1f830     46 00 00 FF 
1f834     5C 64 06 F1 | 	add	objptr, ##35932
1f838     32 7B 62 FC | 	wrlong	result1, objptr
1f83c     46 00 00 FF 
1f840     5C 64 86 F1 | 	sub	objptr, ##35932
1f844     32 7B 02 F6 | 	mov	result1, objptr
1f848     00 58 03 FF 
1f84c     00 7A 46 F5 | 	or	result1, ##112197632
1f850     46 00 00 FF 
1f854     60 64 06 F1 | 	add	objptr, ##35936
1f858     32 7B 62 FC | 	wrlong	result1, objptr
1f85c     46 00 00 FF 
1f860     60 64 86 F1 | 	sub	objptr, ##35936
1f864     32 7B 02 F6 | 	mov	result1, objptr
1f868     00 60 03 FF 
1f86c     00 7A 46 F5 | 	or	result1, ##113246208
1f870     46 00 00 FF 
1f874     64 64 06 F1 | 	add	objptr, ##35940
1f878     32 7B 62 FC | 	wrlong	result1, objptr
1f87c     46 00 00 FF 
1f880     64 64 86 F1 | 	sub	objptr, ##35940
1f884     32 7B 02 F6 | 	mov	result1, objptr
1f888     00 68 03 FF 
1f88c     00 7A 46 F5 | 	or	result1, ##114294784
1f890     46 00 00 FF 
1f894     68 64 06 F1 | 	add	objptr, ##35944
1f898     32 7B 62 FC | 	wrlong	result1, objptr
1f89c     46 00 00 FF 
1f8a0     68 64 86 F1 | 	sub	objptr, ##35944
1f8a4     32 7B 02 F6 | 	mov	result1, objptr
1f8a8     00 70 03 FF 
1f8ac     00 7A 46 F5 | 	or	result1, ##115343360
1f8b0     46 00 00 FF 
1f8b4     6C 64 06 F1 | 	add	objptr, ##35948
1f8b8     32 7B 62 FC | 	wrlong	result1, objptr
1f8bc     46 00 00 FF 
1f8c0     6C 64 86 F1 | 	sub	objptr, ##35948
1f8c4     32 7B 02 F6 | 	mov	result1, objptr
1f8c8     00 08 01 FF 
1f8cc     00 7A 46 F5 | 	or	result1, ##34603008
1f8d0     46 00 00 FF 
1f8d4     70 64 06 F1 | 	add	objptr, ##35952
1f8d8     32 7B 62 FC | 	wrlong	result1, objptr
1f8dc     46 00 00 FF 
1f8e0     70 64 86 F1 | 	sub	objptr, ##35952
1f8e4     32 7B 02 F6 | 	mov	result1, objptr
1f8e8     00 78 03 FF 
1f8ec     00 7A 46 F5 | 	or	result1, ##116391936
1f8f0     46 00 00 FF 
1f8f4     74 64 06 F1 | 	add	objptr, ##35956
1f8f8     32 7B 62 FC | 	wrlong	result1, objptr
1f8fc     46 00 00 FF 
1f900     74 64 86 F1 | 	sub	objptr, ##35956
1f904     32 7B 02 F6 | 	mov	result1, objptr
1f908     58 7A 26 F4 | 	bith	result1, #88
1f90c     46 00 00 FF 
1f910     54 64 06 F1 | 	add	objptr, ##35924
1f914     32 7B 62 FC | 	wrlong	result1, objptr
1f918     46 00 00 FF 
1f91c     54 64 86 F1 | 	sub	objptr, ##35924
1f920     32 7B 02 F6 | 	mov	result1, objptr
1f924     00 88 03 FF 
1f928     00 7A 46 F5 | 	or	result1, ##118489088
1f92c     45 00 00 FF 
1f930     4C 64 06 F1 | 	add	objptr, ##35404
1f934     32 7B 62 FC | 	wrlong	result1, objptr
1f938     45 00 00 FF 
1f93c     4C 64 86 F1 | 	sub	objptr, ##35404
1f940     32 7B 02 F6 | 	mov	result1, objptr
1f944     00 90 03 FF 
1f948     00 7A 46 F5 | 	or	result1, ##119537664
1f94c     46 00 00 FF 
1f950     78 64 06 F1 | 	add	objptr, ##35960
1f954     32 7B 62 FC | 	wrlong	result1, objptr
1f958     46 00 00 FF 
1f95c     78 64 86 F1 | 	sub	objptr, ##35960
1f960     32 7B 02 F6 | 	mov	result1, objptr
1f964     00 98 03 FF 
1f968     00 7A 46 F5 | 	or	result1, ##120586240
1f96c     46 00 00 FF 
1f970     7C 64 06 F1 | 	add	objptr, ##35964
1f974     32 7B 62 FC | 	wrlong	result1, objptr
1f978     46 00 00 FF 
1f97c     7C 64 86 F1 | 	sub	objptr, ##35964
1f980     32 7B 02 F6 | 	mov	result1, objptr
1f984     00 A0 03 FF 
1f988     00 7A 46 F5 | 	or	result1, ##121634816
1f98c     46 00 00 FF 
1f990     90 64 06 F1 | 	add	objptr, ##35984
1f994     32 7B 62 FC | 	wrlong	result1, objptr
1f998     46 00 00 FF 
1f99c     90 64 86 F1 | 	sub	objptr, ##35984
1f9a0     32 7B 02 F6 | 	mov	result1, objptr
1f9a4     00 A8 03 FF 
1f9a8     00 7A 46 F5 | 	or	result1, ##122683392
1f9ac     46 00 00 FF 
1f9b0     8C 64 06 F1 | 	add	objptr, ##35980
1f9b4     32 7B 62 FC | 	wrlong	result1, objptr
1f9b8     46 00 00 FF 
1f9bc     8C 64 86 F1 | 	sub	objptr, ##35980
1f9c0     32 7B 02 F6 | 	mov	result1, objptr
1f9c4     00 B0 03 FF 
1f9c8     00 7A 46 F5 | 	or	result1, ##123731968
1f9cc     46 00 00 FF 
1f9d0     84 64 06 F1 | 	add	objptr, ##35972
1f9d4     32 7B 62 FC | 	wrlong	result1, objptr
1f9d8     46 00 00 FF 
1f9dc     84 64 86 F1 | 	sub	objptr, ##35972
1f9e0     32 7B 02 F6 | 	mov	result1, objptr
1f9e4     00 B8 03 FF 
1f9e8     00 7A 46 F5 | 	or	result1, ##124780544
1f9ec     46 00 00 FF 
1f9f0     80 64 06 F1 | 	add	objptr, ##35968
1f9f4     32 7B 62 FC | 	wrlong	result1, objptr
1f9f8     46 00 00 FF 
1f9fc     80 64 86 F1 | 	sub	objptr, ##35968
1fa00     32 7B 02 F6 | 	mov	result1, objptr
1fa04     77 7A 26 F4 | 	bith	result1, #119
1fa08     46 00 00 FF 
1fa0c     A0 64 06 F1 | 	add	objptr, ##36000
1fa10     32 7B 62 FC | 	wrlong	result1, objptr
1fa14     46 00 00 FF 
1fa18     A0 64 86 F1 | 	sub	objptr, ##36000
1fa1c     32 7B 02 F6 | 	mov	result1, objptr
1fa20     00 C8 03 FF 
1fa24     00 7A 46 F5 | 	or	result1, ##126877696
1fa28     46 00 00 FF 
1fa2c     94 64 06 F1 | 	add	objptr, ##35988
1fa30     32 7B 62 FC | 	wrlong	result1, objptr
1fa34     46 00 00 FF 
1fa38     94 64 86 F1 | 	sub	objptr, ##35988
1fa3c     32 7B 02 F6 | 	mov	result1, objptr
1fa40     00 D0 03 FF 
1fa44     00 7A 46 F5 | 	or	result1, ##127926272
1fa48     46 00 00 FF 
1fa4c     98 64 06 F1 | 	add	objptr, ##35992
1fa50     32 7B 62 FC | 	wrlong	result1, objptr
1fa54     46 00 00 FF 
1fa58     98 64 86 F1 | 	sub	objptr, ##35992
1fa5c     32 7B 02 F6 | 	mov	result1, objptr
1fa60     00 D8 03 FF 
1fa64     00 7A 46 F5 | 	or	result1, ##128974848
1fa68     46 00 00 FF 
1fa6c     9C 64 06 F1 | 	add	objptr, ##35996
1fa70     32 7B 62 FC | 	wrlong	result1, objptr
1fa74     46 00 00 FF 
1fa78     9C 64 86 F1 | 	sub	objptr, ##35996
1fa7c     32 7B 02 F6 | 	mov	result1, objptr
1fa80     96 7A 26 F4 | 	bith	result1, #150
1fa84     46 00 00 FF 
1fa88     A4 64 06 F1 | 	add	objptr, ##36004
1fa8c     32 7B 62 FC | 	wrlong	result1, objptr
1fa90     46 00 00 FF 
1fa94     A4 64 86 F1 | 	sub	objptr, ##36004
1fa98     32 7B 02 F6 | 	mov	result1, objptr
1fa9c     00 E8 03 FF 
1faa0     00 7A 46 F5 | 	or	result1, ##131072000
1faa4     46 00 00 FF 
1faa8     A8 64 06 F1 | 	add	objptr, ##36008
1faac     32 7B 62 FC | 	wrlong	result1, objptr
1fab0     46 00 00 FF 
1fab4     A8 64 86 F1 | 	sub	objptr, ##36008
1fab8     32 7B 02 F6 | 	mov	result1, objptr
1fabc     B5 7A 26 F4 | 	bith	result1, #181
1fac0     46 00 00 FF 
1fac4     AC 64 06 F1 | 	add	objptr, ##36012
1fac8     32 7B 62 FC | 	wrlong	result1, objptr
1facc     46 00 00 FF 
1fad0     AC 64 86 F1 | 	sub	objptr, ##36012
1fad4     32 7B 02 F6 | 	mov	result1, objptr
1fad8     D4 7A 26 F4 | 	bith	result1, #212
1fadc     46 00 00 FF 
1fae0     B0 64 06 F1 | 	add	objptr, ##36016
1fae4     32 7B 62 FC | 	wrlong	result1, objptr
1fae8     46 00 00 FF 
1faec     B0 64 86 F1 | 	sub	objptr, ##36016
1faf0     32 7B 02 F6 | 	mov	result1, objptr
1faf4     1B 7A 26 F4 | 	bith	result1, #27
1faf8     46 00 00 FF 
1fafc     B4 64 06 F1 | 	add	objptr, ##36020
1fb00     32 7B 62 FC | 	wrlong	result1, objptr
1fb04     46 00 00 FF 
1fb08     B4 64 86 F1 | 	sub	objptr, ##36020
1fb0c     32 7B 02 F6 | 	mov	result1, objptr
1fb10     00 08 04 FF 
1fb14     00 7A 46 F5 | 	or	result1, ##135266304
1fb18     46 00 00 FF 
1fb1c     B8 64 06 F1 | 	add	objptr, ##36024
1fb20     32 7B 62 FC | 	wrlong	result1, objptr
1fb24     46 00 00 FF 
1fb28     B8 64 86 F1 | 	sub	objptr, ##36024
1fb2c     32 7B 02 F6 | 	mov	result1, objptr
1fb30     00 10 04 FF 
1fb34     00 7A 46 F5 | 	or	result1, ##136314880
1fb38     46 00 00 FF 
1fb3c     C0 64 06 F1 | 	add	objptr, ##36032
1fb40     32 7B 62 FC | 	wrlong	result1, objptr
1fb44     46 00 00 FF 
1fb48     C0 64 86 F1 | 	sub	objptr, ##36032
1fb4c     32 7B 02 F6 | 	mov	result1, objptr
1fb50     00 18 04 FF 
1fb54     00 7A 46 F5 | 	or	result1, ##137363456
1fb58     46 00 00 FF 
1fb5c     C4 64 06 F1 | 	add	objptr, ##36036
1fb60     32 7B 62 FC | 	wrlong	result1, objptr
1fb64     46 00 00 FF 
1fb68     C4 64 86 F1 | 	sub	objptr, ##36036
1fb6c     32 7B 02 F6 | 	mov	result1, objptr
1fb70     00 20 04 FF 
1fb74     00 7A 46 F5 | 	or	result1, ##138412032
1fb78     46 00 00 FF 
1fb7c     C8 64 06 F1 | 	add	objptr, ##36040
1fb80     32 7B 62 FC | 	wrlong	result1, objptr
1fb84     46 00 00 FF 
1fb88     C8 64 86 F1 | 	sub	objptr, ##36040
1fb8c     32 7B 02 F6 | 	mov	result1, objptr
1fb90     00 28 04 FF 
1fb94     00 7A 46 F5 | 	or	result1, ##139460608
1fb98     46 00 00 FF 
1fb9c     BC 64 06 F1 | 	add	objptr, ##36028
1fba0     32 7B 62 FC | 	wrlong	result1, objptr
1fba4     46 00 00 FF 
1fba8     BC 64 86 F1 | 	sub	objptr, ##36028
1fbac     32 7B 02 F6 | 	mov	result1, objptr
1fbb0     00 30 04 FF 
1fbb4     00 7A 46 F5 | 	or	result1, ##140509184
1fbb8     46 00 00 FF 
1fbbc     CC 64 06 F1 | 	add	objptr, ##36044
1fbc0     32 7B 62 FC | 	wrlong	result1, objptr
1fbc4     46 00 00 FF 
1fbc8     CC 64 86 F1 | 	sub	objptr, ##36044
1fbcc     32 7B 02 F6 | 	mov	result1, objptr
1fbd0     00 38 04 FF 
1fbd4     00 7A 46 F5 | 	or	result1, ##141557760
1fbd8     46 00 00 FF 
1fbdc     00 65 06 F1 | 	add	objptr, ##36096
1fbe0     32 7B 62 FC | 	wrlong	result1, objptr
1fbe4     46 00 00 FF 
1fbe8     00 65 86 F1 | 	sub	objptr, ##36096
1fbec     32 7B 02 F6 | 	mov	result1, objptr
1fbf0     00 40 04 FF 
1fbf4     00 7A 46 F5 | 	or	result1, ##142606336
1fbf8     46 00 00 FF 
1fbfc     F8 64 06 F1 | 	add	objptr, ##36088
1fc00     32 7B 62 FC | 	wrlong	result1, objptr
1fc04     46 00 00 FF 
1fc08     F8 64 86 F1 | 	sub	objptr, ##36088
1fc0c     32 7B 02 F6 | 	mov	result1, objptr
1fc10     00 48 04 FF 
1fc14     00 7A 46 F5 | 	or	result1, ##143654912
1fc18     46 00 00 FF 
1fc1c     D0 64 06 F1 | 	add	objptr, ##36048
1fc20     32 7B 62 FC | 	wrlong	result1, objptr
1fc24     46 00 00 FF 
1fc28     D0 64 86 F1 | 	sub	objptr, ##36048
1fc2c     32 7B 02 F6 | 	mov	result1, objptr
1fc30     00 50 04 FF 
1fc34     00 7A 46 F5 | 	or	result1, ##144703488
1fc38     46 00 00 FF 
1fc3c     D4 64 06 F1 | 	add	objptr, ##36052
1fc40     32 7B 62 FC | 	wrlong	result1, objptr
1fc44     46 00 00 FF 
1fc48     D4 64 86 F1 | 	sub	objptr, ##36052
1fc4c     32 7B 02 F6 | 	mov	result1, objptr
1fc50     00 58 04 FF 
1fc54     00 7A 46 F5 | 	or	result1, ##145752064
1fc58     46 00 00 FF 
1fc5c     F0 64 06 F1 | 	add	objptr, ##36080
1fc60     32 7B 62 FC | 	wrlong	result1, objptr
1fc64     46 00 00 FF 
1fc68     F0 64 86 F1 | 	sub	objptr, ##36080
1fc6c     32 7B 02 F6 | 	mov	result1, objptr
1fc70     00 60 04 FF 
1fc74     00 7A 46 F5 | 	or	result1, ##146800640
1fc78     46 00 00 FF 
1fc7c     F4 64 06 F1 | 	add	objptr, ##36084
1fc80     32 7B 62 FC | 	wrlong	result1, objptr
1fc84     46 00 00 FF 
1fc88     F4 64 86 F1 | 	sub	objptr, ##36084
1fc8c     32 7B 02 F6 | 	mov	result1, objptr
1fc90     00 68 04 FF 
1fc94     00 7A 46 F5 | 	or	result1, ##147849216
1fc98     46 00 00 FF 
1fc9c     10 65 06 F1 | 	add	objptr, ##36112
1fca0     32 7B 62 FC | 	wrlong	result1, objptr
1fca4     46 00 00 FF 
1fca8     10 65 86 F1 | 	sub	objptr, ##36112
1fcac     32 7B 02 F6 | 	mov	result1, objptr
1fcb0     00 70 04 FF 
1fcb4     00 7A 46 F5 | 	or	result1, ##148897792
1fcb8     46 00 00 FF 
1fcbc     0C 65 06 F1 | 	add	objptr, ##36108
1fcc0     32 7B 62 FC | 	wrlong	result1, objptr
1fcc4     46 00 00 FF 
1fcc8     0C 65 86 F1 | 	sub	objptr, ##36108
1fccc     32 7B 02 F6 | 	mov	result1, objptr
1fcd0     00 78 04 FF 
1fcd4     00 7A 46 F5 | 	or	result1, ##149946368
1fcd8     46 00 00 FF 
1fcdc     1C 65 06 F1 | 	add	objptr, ##36124
1fce0     32 7B 62 FC | 	wrlong	result1, objptr
1fce4     46 00 00 FF 
1fce8     1C 65 86 F1 | 	sub	objptr, ##36124
1fcec     32 7B 02 F6 | 	mov	result1, objptr
1fcf0     00 80 04 FF 
1fcf4     00 7A 46 F5 | 	or	result1, ##150994944
1fcf8     46 00 00 FF 
1fcfc     E8 64 06 F1 | 	add	objptr, ##36072
1fd00     32 7B 62 FC | 	wrlong	result1, objptr
1fd04     46 00 00 FF 
1fd08     E8 64 86 F1 | 	sub	objptr, ##36072
1fd0c     32 7B 02 F6 | 	mov	result1, objptr
1fd10     00 88 04 FF 
1fd14     00 7A 46 F5 | 	or	result1, ##152043520
1fd18     46 00 00 FF 
1fd1c     18 65 06 F1 | 	add	objptr, ##36120
1fd20     32 7B 62 FC | 	wrlong	result1, objptr
1fd24     46 00 00 FF 
1fd28     18 65 86 F1 | 	sub	objptr, ##36120
1fd2c     32 7B 02 F6 | 	mov	result1, objptr
1fd30     00 90 04 FF 
1fd34     00 7A 46 F5 | 	or	result1, ##153092096
1fd38     46 00 00 FF 
1fd3c     08 65 06 F1 | 	add	objptr, ##36104
1fd40     32 7B 62 FC | 	wrlong	result1, objptr
1fd44     46 00 00 FF 
1fd48     08 65 86 F1 | 	sub	objptr, ##36104
1fd4c     32 7B 02 F6 | 	mov	result1, objptr
1fd50     00 98 04 FF 
1fd54     00 7A 46 F5 | 	or	result1, ##154140672
1fd58     45 00 00 FF 
1fd5c     B8 64 06 F1 | 	add	objptr, ##35512
1fd60     32 7B 62 FC | 	wrlong	result1, objptr
1fd64     45 00 00 FF 
1fd68     B8 64 86 F1 | 	sub	objptr, ##35512
1fd6c     32 7B 02 F6 | 	mov	result1, objptr
1fd70     00 A0 04 FF 
1fd74     00 7A 46 F5 | 	or	result1, ##155189248
1fd78     46 00 00 FF 
1fd7c     D8 64 06 F1 | 	add	objptr, ##36056
1fd80     32 7B 62 FC | 	wrlong	result1, objptr
1fd84     46 00 00 FF 
1fd88     D8 64 86 F1 | 	sub	objptr, ##36056
1fd8c     32 7B 02 F6 | 	mov	result1, objptr
1fd90     00 08 01 FF 
1fd94     00 7A 46 F5 | 	or	result1, ##34603008
1fd98     46 00 00 FF 
1fd9c     E0 64 06 F1 | 	add	objptr, ##36064
1fda0     32 7B 62 FC | 	wrlong	result1, objptr
1fda4     46 00 00 FF 
1fda8     E0 64 86 F1 | 	sub	objptr, ##36064
1fdac     32 7B 02 F6 | 	mov	result1, objptr
1fdb0     00 A8 04 FF 
1fdb4     00 7A 46 F5 | 	or	result1, ##156237824
1fdb8     46 00 00 FF 
1fdbc     DC 64 06 F1 | 	add	objptr, ##36060
1fdc0     32 7B 62 FC | 	wrlong	result1, objptr
1fdc4     46 00 00 FF 
1fdc8     DC 64 86 F1 | 	sub	objptr, ##36060
1fdcc     32 7B 02 F6 | 	mov	result1, objptr
1fdd0     00 B0 04 FF 
1fdd4     00 7A 46 F5 | 	or	result1, ##157286400
1fdd8     46 00 00 FF 
1fddc     20 65 06 F1 | 	add	objptr, ##36128
1fde0     32 7B 62 FC | 	wrlong	result1, objptr
1fde4     46 00 00 FF 
1fde8     20 65 86 F1 | 	sub	objptr, ##36128
1fdec     32 7B 02 F6 | 	mov	result1, objptr
1fdf0     00 B8 04 FF 
1fdf4     00 7A 46 F5 | 	or	result1, ##158334976
1fdf8     46 00 00 FF 
1fdfc     24 65 06 F1 | 	add	objptr, ##36132
1fe00     32 7B 62 FC | 	wrlong	result1, objptr
1fe04     46 00 00 FF 
1fe08     24 65 86 F1 | 	sub	objptr, ##36132
1fe0c     32 7B 02 F6 | 	mov	result1, objptr
1fe10     00 C0 04 FF 
1fe14     00 7A 46 F5 | 	or	result1, ##159383552
1fe18     46 00 00 FF 
1fe1c     28 65 06 F1 | 	add	objptr, ##36136
1fe20     32 7B 62 FC | 	wrlong	result1, objptr
1fe24     46 00 00 FF 
1fe28     28 65 86 F1 | 	sub	objptr, ##36136
1fe2c     32 7B 02 F6 | 	mov	result1, objptr
1fe30     00 C8 04 FF 
1fe34     00 7A 46 F5 | 	or	result1, ##160432128
1fe38     46 00 00 FF 
1fe3c     2C 65 06 F1 | 	add	objptr, ##36140
1fe40     32 7B 62 FC | 	wrlong	result1, objptr
1fe44     46 00 00 FF 
1fe48     2C 65 86 F1 | 	sub	objptr, ##36140
1fe4c     32 7B 02 F6 | 	mov	result1, objptr
1fe50     00 D0 04 FF 
1fe54     00 7A 46 F5 | 	or	result1, ##161480704
1fe58     46 00 00 FF 
1fe5c     34 65 06 F1 | 	add	objptr, ##36148
1fe60     32 7B 62 FC | 	wrlong	result1, objptr
1fe64     46 00 00 FF 
1fe68     34 65 86 F1 | 	sub	objptr, ##36148
1fe6c     32 7B 02 F6 | 	mov	result1, objptr
1fe70     00 D8 04 FF 
1fe74     00 7A 46 F5 | 	or	result1, ##162529280
1fe78     46 00 00 FF 
1fe7c     38 65 06 F1 | 	add	objptr, ##36152
1fe80     32 7B 62 FC | 	wrlong	result1, objptr
1fe84     46 00 00 FF 
1fe88     38 65 86 F1 | 	sub	objptr, ##36152
1fe8c     32 7B 02 F6 | 	mov	result1, objptr
1fe90     00 E0 04 FF 
1fe94     00 7A 46 F5 | 	or	result1, ##163577856
1fe98     46 00 00 FF 
1fe9c     3C 65 06 F1 | 	add	objptr, ##36156
1fea0     32 7B 62 FC | 	wrlong	result1, objptr
1fea4     46 00 00 FF 
1fea8     3C 65 86 F1 | 	sub	objptr, ##36156
1feac     32 7B 02 F6 | 	mov	result1, objptr
1feb0     00 E8 04 FF 
1feb4     00 7A 46 F5 | 	or	result1, ##164626432
1feb8     46 00 00 FF 
1febc     5C 65 06 F1 | 	add	objptr, ##36188
1fec0     32 7B 62 FC | 	wrlong	result1, objptr
1fec4     46 00 00 FF 
1fec8     5C 65 86 F1 | 	sub	objptr, ##36188
1fecc     32 7B 02 F6 | 	mov	result1, objptr
1fed0     00 F0 04 FF 
1fed4     00 7A 46 F5 | 	or	result1, ##165675008
1fed8     46 00 00 FF 
1fedc     58 65 06 F1 | 	add	objptr, ##36184
1fee0     32 7B 62 FC | 	wrlong	result1, objptr
1fee4     46 00 00 FF 
1fee8     58 65 86 F1 | 	sub	objptr, ##36184
1feec     32 7B 02 F6 | 	mov	result1, objptr
1fef0     00 F8 04 FF 
1fef4     00 7A 46 F5 | 	or	result1, ##166723584
1fef8     46 00 00 FF 
1fefc     14 65 06 F1 | 	add	objptr, ##36116
1ff00     32 7B 62 FC | 	wrlong	result1, objptr
1ff04     46 00 00 FF 
1ff08     14 65 86 F1 | 	sub	objptr, ##36116
1ff0c     32 7B 02 F6 | 	mov	result1, objptr
1ff10     00 00 05 FF 
1ff14     00 7A 46 F5 | 	or	result1, ##167772160
1ff18     46 00 00 FF 
1ff1c     04 65 06 F1 | 	add	objptr, ##36100
1ff20     32 7B 62 FC | 	wrlong	result1, objptr
1ff24     46 00 00 FF 
1ff28     04 65 86 F1 | 	sub	objptr, ##36100
1ff2c     32 7B 02 F6 | 	mov	result1, objptr
1ff30     00 08 05 FF 
1ff34     00 7A 46 F5 | 	or	result1, ##168820736
1ff38     46 00 00 FF 
1ff3c     40 65 06 F1 | 	add	objptr, ##36160
1ff40     32 7B 62 FC | 	wrlong	result1, objptr
1ff44     46 00 00 FF 
1ff48     40 65 86 F1 | 	sub	objptr, ##36160
1ff4c     32 7B 02 F6 | 	mov	result1, objptr
1ff50     00 10 05 FF 
1ff54     00 7A 46 F5 | 	or	result1, ##169869312
1ff58     46 00 00 FF 
1ff5c     44 65 06 F1 | 	add	objptr, ##36164
1ff60     32 7B 62 FC | 	wrlong	result1, objptr
1ff64     46 00 00 FF 
1ff68     44 65 86 F1 | 	sub	objptr, ##36164
1ff6c     32 7B 02 F6 | 	mov	result1, objptr
1ff70     00 18 05 FF 
1ff74     00 7A 46 F5 | 	or	result1, ##170917888
1ff78     46 00 00 FF 
1ff7c     48 65 06 F1 | 	add	objptr, ##36168
1ff80     32 7B 62 FC | 	wrlong	result1, objptr
1ff84     46 00 00 FF 
1ff88     48 65 86 F1 | 	sub	objptr, ##36168
1ff8c     32 7B 02 F6 | 	mov	result1, objptr
1ff90     00 20 05 FF 
1ff94     00 7A 46 F5 | 	or	result1, ##171966464
1ff98     46 00 00 FF 
1ff9c     4C 65 06 F1 | 	add	objptr, ##36172
1ffa0     32 7B 62 FC | 	wrlong	result1, objptr
1ffa4     46 00 00 FF 
1ffa8     4C 65 86 F1 | 	sub	objptr, ##36172
1ffac     32 7B 02 F6 | 	mov	result1, objptr
1ffb0     00 28 05 FF 
1ffb4     00 7A 46 F5 | 	or	result1, ##173015040
1ffb8     46 00 00 FF 
1ffbc     50 65 06 F1 | 	add	objptr, ##36176
1ffc0     32 7B 62 FC | 	wrlong	result1, objptr
1ffc4     46 00 00 FF 
1ffc8     50 65 86 F1 | 	sub	objptr, ##36176
1ffcc     32 7B 02 F6 | 	mov	result1, objptr
1ffd0     00 30 05 FF 
1ffd4     00 7A 46 F5 | 	or	result1, ##174063616
1ffd8     46 00 00 FF 
1ffdc     68 65 06 F1 | 	add	objptr, ##36200
1ffe0     32 7B 62 FC | 	wrlong	result1, objptr
1ffe4     46 00 00 FF 
1ffe8     68 65 86 F1 | 	sub	objptr, ##36200
1ffec     32 7B 02 F6 | 	mov	result1, objptr
1fff0     00 38 05 FF 
1fff4     00 7A 46 F5 | 	or	result1, ##175112192
1fff8     46 00 00 FF 
1fffc     54 65 06 F1 | 	add	objptr, ##36180
20000     32 7B 62 FC | 	wrlong	result1, objptr
20004     46 00 00 FF 
20008     54 65 86 F1 | 	sub	objptr, ##36180
2000c     32 7B 02 F6 | 	mov	result1, objptr
20010     00 40 05 FF 
20014     00 7A 46 F5 | 	or	result1, ##176160768
20018     46 00 00 FF 
2001c     60 65 06 F1 | 	add	objptr, ##36192
20020     32 7B 62 FC | 	wrlong	result1, objptr
20024     46 00 00 FF 
20028     60 65 86 F1 | 	sub	objptr, ##36192
2002c     32 7B 02 F6 | 	mov	result1, objptr
20030     00 48 05 FF 
20034     00 7A 46 F5 | 	or	result1, ##177209344
20038     46 00 00 FF 
2003c     64 65 06 F1 | 	add	objptr, ##36196
20040     32 7B 62 FC | 	wrlong	result1, objptr
20044     46 00 00 FF 
20048     64 65 86 F1 | 	sub	objptr, ##36196
2004c     32 7B 02 F6 | 	mov	result1, objptr
20050     00 50 05 FF 
20054     00 7A 46 F5 | 	or	result1, ##178257920
20058     46 00 00 FF 
2005c     6C 65 06 F1 | 	add	objptr, ##36204
20060     32 7B 62 FC | 	wrlong	result1, objptr
20064     46 00 00 FF 
20068     6C 65 86 F1 | 	sub	objptr, ##36204
2006c     32 7B 02 F6 | 	mov	result1, objptr
20070     00 58 05 FF 
20074     00 7A 46 F5 | 	or	result1, ##179306496
20078     46 00 00 FF 
2007c     70 65 06 F1 | 	add	objptr, ##36208
20080     32 7B 62 FC | 	wrlong	result1, objptr
20084     46 00 00 FF 
20088     70 65 86 F1 | 	sub	objptr, ##36208
2008c     32 7B 02 F6 | 	mov	result1, objptr
20090     00 60 05 FF 
20094     00 7A 46 F5 | 	or	result1, ##180355072
20098     46 00 00 FF 
2009c     88 64 06 F1 | 	add	objptr, ##35976
200a0     32 7B 62 FC | 	wrlong	result1, objptr
200a4     46 00 00 FF 
200a8     88 64 86 F1 | 	sub	objptr, ##35976
200ac                 | _init_commands_ret
200ac     2D 00 64 FD | 	ret
200b0                 | 
200b0                 | ' 
200b0                 | ' ''-------------------------------- Audio subsystem init  -------------------------------------
200b0                 | ' 
200b0                 | ' sub init_audio
200b0                 | _init_audio
200b0     07 CA 05 F6 | 	mov	COUNT_, #7
200b4     E8 00 A0 FD | 	call	#pushregs_
200b8     00 C0 1F FF 
200bc     00 A6 06 F6 | 	mov	local01, ##1065353216
200c0                 | ' 
200c0                 | ' for i=0 to 1023 : psdpoke       2*i,round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
200c0     00 A8 06 F6 | 	mov	local02, #0
200c4                 | LR__2600
200c4     54 AB 02 F6 | 	mov	local03, local02
200c8     01 AA 66 F0 | 	shl	local03, #1
200cc     58 7F 23 FF 
200d0     00 AC 06 F6 | 	mov	local04, ##1191096320
200d4     54 93 52 F6 | 	abs	arg01, local02 wc
200d8     1F AE C6 C9 |  if_b	decod	local05, #31
200dc     00 AE 06 36 |  if_ae	mov	local05, #0
200e0     C0 6B B0 FD | 	call	#__system___float_fromuns
200e4     57 7B 62 F5 | 	xor	result1, local05
200e8     3D 93 02 F6 | 	mov	arg01, result1
200ec     87 24 20 FF 
200f0     DB 95 06 F6 | 	mov	arg02, ##1078530011
200f4     B0 6F B0 FD | 	call	#__system___float_mul
200f8     3D 93 02 F6 | 	mov	arg01, result1
200fc     00 00 22 FF 
20100     00 94 06 F6 | 	mov	arg02, ##1140850688
20104     A4 71 B0 FD | 	call	#__system___float_div
20108     3D 93 02 F6 | 	mov	arg01, result1
2010c     08 79 B0 FD | 	call	#__system____builtin_sinf
20110     3D 95 02 F6 | 	mov	arg02, result1
20114     56 93 02 F6 | 	mov	arg01, local04
20118     8C 6F B0 FD | 	call	#__system___float_mul
2011c     3D 93 02 F6 | 	mov	arg01, result1
20120     01 94 06 F6 | 	mov	arg02, #1
20124     48 74 B0 FD | 	call	#__system___float_tointeger
20128     3D 95 02 F6 | 	mov	arg02, result1
2012c     55 93 02 F6 | 	mov	arg01, local03
20130     84 0D B0 FD | 	call	#_psdpoke
20134     01 A8 06 F1 | 	add	local02, #1
20138     02 00 00 FF 
2013c     00 A8 56 F2 | 	cmps	local02, ##1024 wc
20140     80 FF 9F CD |  if_b	jmp	#LR__2600
20144                 | ' for i=0 to 511  : psdpoke  2048+2*i, -32512+127*i: psdpoke 2048+2*(512+i),32512-127*i : next i   		' 1 : triangle 
20144     00 A8 06 F6 | 	mov	local02, #0
20148                 | LR__2601
20148     54 95 02 F6 | 	mov	arg02, local02
2014c     01 94 66 F0 | 	shl	arg02, #1
20150     0B 92 C6 F9 | 	decod	arg01, #11
20154     4A 93 02 F1 | 	add	arg01, arg02
20158     54 AD 02 F6 | 	mov	local04, local02
2015c     07 AC 66 F0 | 	shl	local04, #7
20160     54 AD 82 F1 | 	sub	local04, local02
20164     C0 FF 7F FF 
20168     00 95 06 F6 | 	mov	arg02, ##-32512
2016c     56 95 02 F1 | 	add	arg02, local04
20170     44 0D B0 FD | 	call	#_psdpoke
20174     09 AC C6 F9 | 	decod	local04, #9
20178     54 AD 02 F1 | 	add	local04, local02
2017c     01 AC 66 F0 | 	shl	local04, #1
20180     0B 92 C6 F9 | 	decod	arg01, #11
20184     56 93 02 F1 | 	add	arg01, local04
20188     54 AF 02 F6 | 	mov	local05, local02
2018c     07 AE 66 F0 | 	shl	local05, #7
20190     54 AF 82 F1 | 	sub	local05, local02
20194     3F 00 00 FF 
20198     00 95 06 F6 | 	mov	arg02, ##32512
2019c     57 95 82 F1 | 	sub	arg02, local05
201a0     14 0D B0 FD | 	call	#_psdpoke
201a4     01 A8 06 F1 | 	add	local02, #1
201a8     01 00 00 FF 
201ac     00 A8 56 F2 | 	cmps	local02, ##512 wc
201b0     94 FF 9F CD |  if_b	jmp	#LR__2601
201b4                 | ' for i=0 to 1023 : psdpoke  4096+2*i, -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
201b4     00 A8 06 F6 | 	mov	local02, #0
201b8                 | LR__2602
201b8     54 AF 02 F6 | 	mov	local05, local02
201bc     01 AE 66 F0 | 	shl	local05, #1
201c0     0C 92 C6 F9 | 	decod	arg01, #12
201c4     57 93 02 F1 | 	add	arg01, local05
201c8     54 AF 02 F6 | 	mov	local05, local02
201cc     06 AE 66 F0 | 	shl	local05, #6
201d0     54 AF 82 F1 | 	sub	local05, local02
201d4     C1 FF 7F FF 
201d8     00 94 06 F6 | 	mov	arg02, ##-32256
201dc     57 95 02 F1 | 	add	arg02, local05
201e0     D4 0C B0 FD | 	call	#_psdpoke
201e4     01 A8 06 F1 | 	add	local02, #1
201e8     02 00 00 FF 
201ec     00 A8 56 F2 | 	cmps	local02, ##1024 wc
201f0     C4 FF 9F CD |  if_b	jmp	#LR__2602
201f4                 | ' for i=0 to 127  : psdpoke  6144+2*i, -32600 : next i : for i=128 to 1023 :  psdpoke 6144+2*i, 32600 : next i 	' 3 pulse 12.5%
201f4     00 A8 06 F6 | 	mov	local02, #0
201f8                 | LR__2603
201f8     54 95 02 F6 | 	mov	arg02, local02
201fc     01 94 66 F0 | 	shl	arg02, #1
20200     0C 00 00 FF 
20204     00 92 06 F6 | 	mov	arg01, ##6144
20208     4A 93 02 F1 | 	add	arg01, arg02
2020c     C0 FF 7F FF 
20210     A8 94 06 F6 | 	mov	arg02, ##-32600
20214     A0 0C B0 FD | 	call	#_psdpoke
20218     01 A8 06 F1 | 	add	local02, #1
2021c     80 A8 56 F2 | 	cmps	local02, #128 wc
20220     D4 FF 9F CD |  if_b	jmp	#LR__2603
20224     80 A8 06 F6 | 	mov	local02, #128
20228                 | LR__2604
20228     54 95 02 F6 | 	mov	arg02, local02
2022c     01 94 66 F0 | 	shl	arg02, #1
20230     0C 00 00 FF 
20234     00 92 06 F6 | 	mov	arg01, ##6144
20238     4A 93 02 F1 | 	add	arg01, arg02
2023c     3F 00 00 FF 
20240     58 95 06 F6 | 	mov	arg02, ##32600
20244     70 0C B0 FD | 	call	#_psdpoke
20248     01 A8 06 F1 | 	add	local02, #1
2024c     02 00 00 FF 
20250     00 A8 16 F2 | 	cmp	local02, ##1024 wc
20254     D0 FF 9F CD |  if_b	jmp	#LR__2604
20258                 | ' for i=0 to 511  : psdpoke  8192+2*i, -32600 : next i : for i=512 to 1023 :  psdpoke 8192+2*i, 32600 : next i 	' 4 square
20258     00 A8 06 F6 | 	mov	local02, #0
2025c                 | LR__2605
2025c     54 95 02 F6 | 	mov	arg02, local02
20260     01 94 66 F0 | 	shl	arg02, #1
20264     0D 92 C6 F9 | 	decod	arg01, #13
20268     4A 93 02 F1 | 	add	arg01, arg02
2026c     C0 FF 7F FF 
20270     A8 94 06 F6 | 	mov	arg02, ##-32600
20274     40 0C B0 FD | 	call	#_psdpoke
20278     01 A8 06 F1 | 	add	local02, #1
2027c     01 00 00 FF 
20280     00 A8 56 F2 | 	cmps	local02, ##512 wc
20284     D4 FF 9F CD |  if_b	jmp	#LR__2605
20288     09 A8 C6 F9 | 	decod	local02, #9
2028c                 | LR__2606
2028c     54 95 02 F6 | 	mov	arg02, local02
20290     01 94 66 F0 | 	shl	arg02, #1
20294     0D 92 C6 F9 | 	decod	arg01, #13
20298     4A 93 02 F1 | 	add	arg01, arg02
2029c     3F 00 00 FF 
202a0     58 95 06 F6 | 	mov	arg02, ##32600
202a4     10 0C B0 FD | 	call	#_psdpoke
202a8     01 A8 06 F1 | 	add	local02, #1
202ac     02 00 00 FF 
202b0     00 A8 16 F2 | 	cmp	local02, ##1024 wc
202b4     D4 FF 9F CD |  if_b	jmp	#LR__2606
202b8                 | ' for i=0 to 255  : psdpoke 10240+2*i, -32600 : next i : for i=256 to 1023 : psdpoke 10240+2*i, 32600 : next i 	' 5 pulse 25%
202b8     00 A8 06 F6 | 	mov	local02, #0
202bc                 | LR__2607
202bc     54 95 02 F6 | 	mov	arg02, local02
202c0     01 94 66 F0 | 	shl	arg02, #1
202c4     14 00 00 FF 
202c8     00 92 06 F6 | 	mov	arg01, ##10240
202cc     4A 93 02 F1 | 	add	arg01, arg02
202d0     C0 FF 7F FF 
202d4     A8 94 06 F6 | 	mov	arg02, ##-32600
202d8     DC 0B B0 FD | 	call	#_psdpoke
202dc     01 A8 06 F1 | 	add	local02, #1
202e0     00 A9 56 F2 | 	cmps	local02, #256 wc
202e4     D4 FF 9F CD |  if_b	jmp	#LR__2607
202e8     00 A9 06 F6 | 	mov	local02, #256
202ec                 | LR__2608
202ec     54 95 02 F6 | 	mov	arg02, local02
202f0     01 94 66 F0 | 	shl	arg02, #1
202f4     14 00 00 FF 
202f8     00 92 06 F6 | 	mov	arg01, ##10240
202fc     4A 93 02 F1 | 	add	arg01, arg02
20300     3F 00 00 FF 
20304     58 95 06 F6 | 	mov	arg02, ##32600
20308     AC 0B B0 FD | 	call	#_psdpoke
2030c     01 A8 06 F1 | 	add	local02, #1
20310     02 00 00 FF 
20314     00 A8 16 F2 | 	cmp	local02, ##1024 wc
20318     D0 FF 9F CD |  if_b	jmp	#LR__2608
2031c                 | ' for i=12288 to 61436 step 4 : pslpoke i,0 : next i 
2031c     18 00 00 FF 
20320     00 A8 06 F6 | 	mov	local02, ##12288
20324                 | LR__2609
20324     54 93 02 F6 | 	mov	arg01, local02
20328     00 94 06 F6 | 	mov	arg02, #0
2032c     40 0B B0 FD | 	call	#_pslpoke
20330     04 A8 06 F1 | 	add	local02, #4
20334     77 00 00 FF 
20338     FD A9 56 F2 | 	cmps	local02, ##61437 wc
2033c     E4 FF 9F CD |  if_b	jmp	#LR__2609
20340                 | ' for i=0 to 1023 : psdpoke 61440+2*i, dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
20340     00 A8 06 F6 | 	mov	local02, #0
20344                 | LR__2610
20344     54 95 02 F6 | 	mov	arg02, local02
20348     01 94 66 F0 | 	shl	arg02, #1
2034c     78 00 00 FF 
20350     00 AA 06 F6 | 	mov	local03, ##61440
20354     4A AB 02 F1 | 	add	local03, arg02
20358     36 93 02 F6 | 	mov	arg01, ptr__dat__
2035c     12 00 00 FF 
20360     CA 92 06 F1 | 	add	arg01, ##9418
20364     54 95 02 F6 | 	mov	arg02, local02
20368     01 94 66 F0 | 	shl	arg02, #1
2036c     4A 93 02 F1 | 	add	arg01, arg02
20370     49 95 E2 FA | 	rdword	arg02, arg01
20374     55 93 02 F6 | 	mov	arg01, local03
20378     3C 0B B0 FD | 	call	#_psdpoke
2037c     01 A8 06 F1 | 	add	local02, #1
20380     02 00 00 FF 
20384     00 A8 56 F2 | 	cmps	local02, ##1024 wc
20388     B8 FF 9F CD |  if_b	jmp	#LR__2610
2038c                 | ' for i=0 to 1023 : psdpoke 63488+2*i, dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
2038c     00 A8 06 F6 | 	mov	local02, #0
20390                 | LR__2611
20390     54 95 02 F6 | 	mov	arg02, local02
20394     01 94 66 F0 | 	shl	arg02, #1
20398     7C 00 00 FF 
2039c     00 AA 06 F6 | 	mov	local03, ##63488
203a0     4A AB 02 F1 | 	add	local03, arg02
203a4     36 93 02 F6 | 	mov	arg01, ptr__dat__
203a8     0E 00 00 FF 
203ac     BA 92 06 F1 | 	add	arg01, ##7354
203b0     54 95 02 F6 | 	mov	arg02, local02
203b4     01 94 66 F0 | 	shl	arg02, #1
203b8     4A 93 02 F1 | 	add	arg01, arg02
203bc     49 95 E2 FA | 	rdword	arg02, arg01
203c0     55 93 02 F6 | 	mov	arg01, local03
203c4     F0 0A B0 FD | 	call	#_psdpoke
203c8     01 A8 06 F1 | 	add	local02, #1
203cc     02 00 00 FF 
203d0     00 A8 56 F2 | 	cmps	local02, ##1024 wc
203d4     B8 FF 9F CD |  if_b	jmp	#LR__2611
203d8                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
203d8     00 A8 06 F6 | 	mov	local02, #0
203dc     0E 00 00 FF 
203e0     38 64 06 F1 | 	add	objptr, ##7224
203e4     D7 18 48 FB | 	callpa	#(@LR__2613-@LR__2612)>>2,fcache_load_ptr_
203e8                 | LR__2612
203e8     54 AB 02 F6 | 	mov	local03, local02
203ec     01 AA 66 F0 | 	shl	local03, #1
203f0     32 AB 02 F1 | 	add	local03, objptr
203f4     54 B1 02 F6 | 	mov	local06, local02
203f8     08 B0 66 F0 | 	shl	local06, #8
203fc     7F 00 00 FF 
20400     00 B3 06 F6 | 	mov	local07, ##65280
20404     58 B3 82 F1 | 	sub	local07, local06
20408     55 B3 52 FC | 	wrword	local07, local03
2040c     01 A8 06 F1 | 	add	local02, #1
20410     00 A9 56 F2 | 	cmps	local02, #256 wc
20414     D0 FF 9F CD |  if_b	jmp	#LR__2612
20418                 | LR__2613
20418     0E 00 00 FF 
2041c     38 64 86 F1 | 	sub	objptr, ##7224
20420                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
20420     00 A8 06 F6 | 	mov	local02, #0
20424                 | LR__2614
20424     54 AB 02 F6 | 	mov	local03, local02
20428     01 AA 66 F0 | 	shl	local03, #1
2042c     32 AF 02 F6 | 	mov	local05, objptr
20430     0F 00 00 FF 
20434     38 AE 06 F1 | 	add	local05, ##7736
20438     57 AB 02 F1 | 	add	local03, local05
2043c     80 BF 23 FF 
20440     00 92 06 F6 | 	mov	arg01, ##1199505408
20444     53 95 02 F6 | 	mov	arg02, local01
20448     5C 6C B0 FD | 	call	#__system___float_mul
2044c     3D 93 02 F6 | 	mov	arg01, result1
20450     01 94 06 F6 | 	mov	arg02, #1
20454     18 71 B0 FD | 	call	#__system___float_tointeger
20458     55 7B 52 FC | 	wrword	result1, local03
2045c     53 93 02 F6 | 	mov	arg01, local01
20460     CC BC 1F FF 
20464     9A 95 06 F6 | 	mov	arg02, ##1064933786
20468     3C 6C B0 FD | 	call	#__system___float_mul
2046c     3D A7 02 F6 | 	mov	local01, result1
20470     01 A8 06 F1 | 	add	local02, #1
20474     00 A9 56 F2 | 	cmps	local02, #256 wc
20478     A8 FF 9F CD |  if_b	jmp	#LR__2614
2047c     10 00 00 FF 
20480     36 64 06 F1 | 	add	objptr, ##8246
20484     32 01 58 FC | 	wrword	#0, objptr
20488                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
20488     00 A8 06 F6 | 	mov	local02, #0
2048c     02 64 06 F1 | 	add	objptr, #2
20490     D7 10 48 FB | 	callpa	#(@LR__2616-@LR__2615)>>2,fcache_load_ptr_
20494                 | LR__2615
20494     54 AB 02 F6 | 	mov	local03, local02
20498     01 AA 66 F0 | 	shl	local03, #1
2049c     32 AB 02 F1 | 	add	local03, objptr
204a0     7F 00 80 FF 
204a4     55 01 5A FC | 	wrword	##65280, local03
204a8     01 A8 06 F1 | 	add	local02, #1
204ac     FF A8 56 F2 | 	cmps	local02, #255 wc
204b0     E0 FF 9F CD |  if_b	jmp	#LR__2615
204b4                 | LR__2616
204b4     FE 65 06 F1 | 	add	objptr, #510
204b8     32 01 58 FC | 	wrword	#0, objptr
204bc                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
204bc     00 A8 06 F6 | 	mov	local02, #0
204c0     02 64 06 F1 | 	add	objptr, #2
204c4     D7 12 48 FB | 	callpa	#(@LR__2618-@LR__2617)>>2,fcache_load_ptr_
204c8                 | LR__2617
204c8     54 AB 02 F6 | 	mov	local03, local02
204cc     01 AA 66 F0 | 	shl	local03, #1
204d0     32 AB 02 F1 | 	add	local03, objptr
204d4     54 B3 02 F6 | 	mov	local07, local02
204d8     0C B2 66 F0 | 	shl	local07, #12
204dc     55 B3 52 FC | 	wrword	local07, local03
204e0     01 A8 06 F1 | 	add	local02, #1
204e4     10 A8 56 F2 | 	cmps	local02, #16 wc
204e8     DC FF 9F CD |  if_b	jmp	#LR__2617
204ec                 | LR__2618
204ec                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
204ec     10 A8 06 F6 | 	mov	local02, #16
204f0     D7 10 48 FB | 	callpa	#(@LR__2620-@LR__2619)>>2,fcache_load_ptr_
204f4                 | LR__2619
204f4     54 AB 02 F6 | 	mov	local03, local02
204f8     01 AA 66 F0 | 	shl	local03, #1
204fc     32 AB 02 F1 | 	add	local03, objptr
20500     7F 00 80 FF 
20504     55 01 5A FC | 	wrword	##65280, local03
20508     01 A8 06 F1 | 	add	local02, #1
2050c     F0 A8 16 F2 | 	cmp	local02, #240 wc
20510     E0 FF 9F CD |  if_b	jmp	#LR__2619
20514                 | LR__2620
20514                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
20514     F0 A8 06 F6 | 	mov	local02, #240
20518     D7 14 48 FB | 	callpa	#(@LR__2622-@LR__2621)>>2,fcache_load_ptr_
2051c                 | LR__2621
2051c     54 AB 02 F6 | 	mov	local03, local02
20520     01 AA 66 F0 | 	shl	local03, #1
20524     32 AB 02 F1 | 	add	local03, objptr
20528     FF B0 06 F6 | 	mov	local06, #255
2052c     54 B1 82 F1 | 	sub	local06, local02
20530     0C B0 66 F0 | 	shl	local06, #12
20534     55 B1 52 FC | 	wrword	local06, local03
20538     01 A8 06 F1 | 	add	local02, #1
2053c     00 A9 16 F2 | 	cmp	local02, #256 wc
20540     D8 FF 9F CD |  if_b	jmp	#LR__2621
20544                 | LR__2622
20544                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
20544     00 A8 06 F6 | 	mov	local02, #0
20548     01 00 00 FF 
2054c     00 64 06 F1 | 	add	objptr, ##512
20550     D7 12 48 FB | 	callpa	#(@LR__2624-@LR__2623)>>2,fcache_load_ptr_
20554                 | LR__2623
20554     54 AB 02 F6 | 	mov	local03, local02
20558     01 AA 66 F0 | 	shl	local03, #1
2055c     32 AB 02 F1 | 	add	local03, objptr
20560     54 B3 02 F6 | 	mov	local07, local02
20564     08 B2 66 F0 | 	shl	local07, #8
20568     55 B3 52 FC | 	wrword	local07, local03
2056c     01 A8 06 F1 | 	add	local02, #1
20570     00 A9 56 F2 | 	cmps	local02, #256 wc
20574     DC FF 9F CD |  if_b	jmp	#LR__2623
20578                 | LR__2624
20578     FE 65 06 F1 | 	add	objptr, #510
2057c     32 01 58 FC | 	wrword	#0, objptr
20580                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
20580     00 A8 06 F6 | 	mov	local02, #0
20584     02 64 06 F1 | 	add	objptr, #2
20588     D7 16 48 FB | 	callpa	#(@LR__2626-@LR__2625)>>2,fcache_load_ptr_
2058c                 | LR__2625
2058c     54 AB 02 F6 | 	mov	local03, local02
20590     01 AA 66 F0 | 	shl	local03, #1
20594     32 AB 02 F1 | 	add	local03, objptr
20598     54 B3 02 F6 | 	mov	local07, local02
2059c     04 B2 66 F0 | 	shl	local07, #4
205a0     54 B3 02 F1 | 	add	local07, local02
205a4     04 B2 66 F0 | 	shl	local07, #4
205a8     55 B3 52 FC | 	wrword	local07, local03
205ac     01 A8 06 F1 | 	add	local02, #1
205b0     F0 A8 56 F2 | 	cmps	local02, #240 wc
205b4     D4 FF 9F CD |  if_b	jmp	#LR__2625
205b8                 | LR__2626
205b8     F0 A8 06 F6 | 	mov	local02, #240
205bc     D7 14 48 FB | 	callpa	#(@LR__2628-@LR__2627)>>2,fcache_load_ptr_
205c0                 | LR__2627
205c0     54 AB 02 F6 | 	mov	local03, local02
205c4     01 AA 66 F0 | 	shl	local03, #1
205c8     32 AB 02 F1 | 	add	local03, objptr
205cc     FF B0 06 F6 | 	mov	local06, #255
205d0     54 B1 82 F1 | 	sub	local06, local02
205d4     0C B0 66 F0 | 	shl	local06, #12
205d8     55 B1 52 FC | 	wrword	local06, local03
205dc     01 A8 06 F1 | 	add	local02, #1
205e0     00 A9 16 F2 | 	cmp	local02, #256 wc
205e4     D8 FF 9F CD |  if_b	jmp	#LR__2627
205e8                 | LR__2628
205e8                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
205e8     00 A8 06 F6 | 	mov	local02, #0
205ec     01 00 00 FF 
205f0     00 64 06 F1 | 	add	objptr, ##512
205f4     D7 20 48 FB | 	callpa	#(@LR__2630-@LR__2629)>>2,fcache_load_ptr_
205f8                 | LR__2629
205f8     54 AB 02 F6 | 	mov	local03, local02
205fc     01 AA 66 F0 | 	shl	local03, #1
20600     32 AB 02 F1 | 	add	local03, objptr
20604     54 B3 02 F6 | 	mov	local07, local02
20608     09 B2 66 F0 | 	shl	local07, #9
2060c     55 B3 52 FC | 	wrword	local07, local03
20610     FF AA 06 F6 | 	mov	local03, #255
20614     54 AB 82 F1 | 	sub	local03, local02
20618     01 AA 66 F0 | 	shl	local03, #1
2061c     32 AB 02 F1 | 	add	local03, objptr
20620     54 B3 02 F6 | 	mov	local07, local02
20624     09 B2 66 F0 | 	shl	local07, #9
20628     55 B3 52 FC | 	wrword	local07, local03
2062c     01 A8 06 F1 | 	add	local02, #1
20630     80 A8 56 F2 | 	cmps	local02, #128 wc
20634     C0 FF 9F CD |  if_b	jmp	#LR__2629
20638                 | LR__2630
20638                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
20638     00 A8 06 F6 | 	mov	local02, #0
2063c     01 00 00 FF 
20640     00 64 06 F1 | 	add	objptr, ##512
20644     D7 12 48 FB | 	callpa	#(@LR__2632-@LR__2631)>>2,fcache_load_ptr_
20648                 | LR__2631
20648     54 AB 02 F6 | 	mov	local03, local02
2064c     01 AA 66 F0 | 	shl	local03, #1
20650     32 AB 02 F1 | 	add	local03, objptr
20654     54 B3 02 F6 | 	mov	local07, local02
20658     0D B2 66 F0 | 	shl	local07, #13
2065c     55 B3 52 FC | 	wrword	local07, local03
20660     01 A8 06 F1 | 	add	local02, #1
20664     08 A8 56 F2 | 	cmps	local02, #8 wc
20668     DC FF 9F CD |  if_b	jmp	#LR__2631
2066c                 | LR__2632
2066c                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
2066c     08 A8 06 F6 | 	mov	local02, #8
20670     D7 1A 48 FB | 	callpa	#(@LR__2634-@LR__2633)>>2,fcache_load_ptr_
20674                 | LR__2633
20674     54 AB 02 F6 | 	mov	local03, local02
20678     01 AA 66 F0 | 	shl	local03, #1
2067c     32 AB 02 F1 | 	add	local03, objptr
20680     54 AF 02 F6 | 	mov	local05, local02
20684     08 AE 86 F1 | 	sub	local05, #8
20688     0B AE 66 F0 | 	shl	local05, #11
2068c     7F 00 00 FF 
20690     00 B3 06 F6 | 	mov	local07, ##65280
20694     57 B3 82 F1 | 	sub	local07, local05
20698     55 B3 52 FC | 	wrword	local07, local03
2069c     01 A8 06 F1 | 	add	local02, #1
206a0     18 A8 16 F2 | 	cmp	local02, #24 wc
206a4     CC FF 9F CD |  if_b	jmp	#LR__2633
206a8                 | LR__2634
206a8                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
206a8     18 A8 06 F6 | 	mov	local02, #24
206ac     D7 10 48 FB | 	callpa	#(@LR__2636-@LR__2635)>>2,fcache_load_ptr_
206b0                 | LR__2635
206b0     54 AB 02 F6 | 	mov	local03, local02
206b4     01 AA 66 F0 | 	shl	local03, #1
206b8     32 AB 02 F1 | 	add	local03, objptr
206bc     40 00 80 FF 
206c0     55 01 58 FC | 	wrword	##32768, local03
206c4     01 A8 06 F1 | 	add	local02, #1
206c8     81 A8 16 F2 | 	cmp	local02, #129 wc
206cc     E0 FF 9F CD |  if_b	jmp	#LR__2635
206d0                 | LR__2636
206d0                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
206d0     81 A8 06 F6 | 	mov	local02, #129
206d4     D7 14 48 FB | 	callpa	#(@LR__2638-@LR__2637)>>2,fcache_load_ptr_
206d8                 | LR__2637
206d8     54 AB 02 F6 | 	mov	local03, local02
206dc     01 AA 66 F0 | 	shl	local03, #1
206e0     32 AB 02 F1 | 	add	local03, objptr
206e4     FF B0 06 F6 | 	mov	local06, #255
206e8     54 B1 82 F1 | 	sub	local06, local02
206ec     08 B0 66 F0 | 	shl	local06, #8
206f0     55 B1 52 FC | 	wrword	local06, local03
206f4     01 A8 06 F1 | 	add	local02, #1
206f8     00 A9 16 F2 | 	cmp	local02, #256 wc
206fc     D8 FF 9F CD |  if_b	jmp	#LR__2637
20700                 | LR__2638
20700     3F 00 00 FF 
20704     66 64 06 F1 | 	add	objptr, ##32358
20708     32 01 59 FC | 	wrword	#128, objptr
2070c     54 00 00 FF 
20710     9E 64 86 F1 | 	sub	objptr, ##43166
20714                 | ' for i=0 to 7
20714     00 A8 06 F6 | 	mov	local02, #0
20718     D7 9C 48 FB | 	callpa	#(@LR__2640-@LR__2639)>>2,fcache_load_ptr_
2071c                 | LR__2639
2071c     54 AB 02 F6 | 	mov	local03, local02
20720     03 AA 66 F0 | 	shl	local03, #3
20724     54 AB 82 F1 | 	sub	local03, local02
20728     02 AA 66 F0 | 	shl	local03, #2
2072c     16 00 00 FF 
20730     BC 64 06 F1 | 	add	objptr, ##11452
20734     32 AB 02 F1 | 	add	local03, objptr
20738     00 EE A1 FF 
2073c     55 01 68 FC | 	wrlong	##1138491392, local03
20740     54 AB 02 F6 | 	mov	local03, local02
20744     03 AA 66 F0 | 	shl	local03, #3
20748     54 AB 82 F1 | 	sub	local03, local02
2074c     02 AA 66 F0 | 	shl	local03, #2
20750     32 AB 02 F1 | 	add	local03, objptr
20754     04 AA 06 F1 | 	add	local03, #4
20758     55 A9 42 FC | 	wrbyte	local02, local03
2075c     54 AB 02 F6 | 	mov	local03, local02
20760     03 AA 66 F0 | 	shl	local03, #3
20764     54 AB 82 F1 | 	sub	local03, local02
20768     02 AA 66 F0 | 	shl	local03, #2
2076c     32 AB 02 F1 | 	add	local03, objptr
20770     05 AA 06 F1 | 	add	local03, #5
20774     55 A9 42 FC | 	wrbyte	local02, local03
20778     54 AB 02 F6 | 	mov	local03, local02
2077c     03 AA 66 F0 | 	shl	local03, #3
20780     54 AB 82 F1 | 	sub	local03, local02
20784     02 AA 66 F0 | 	shl	local03, #2
20788     32 AB 02 F1 | 	add	local03, objptr
2078c     06 AA 06 F1 | 	add	local03, #6
20790     55 01 58 FC | 	wrword	#0, local03
20794     54 AB 02 F6 | 	mov	local03, local02
20798     03 AA 66 F0 | 	shl	local03, #3
2079c     54 AB 82 F1 | 	sub	local03, local02
207a0     02 AA 66 F0 | 	shl	local03, #2
207a4     32 AB 02 F1 | 	add	local03, objptr
207a8     08 AA 06 F1 | 	add	local03, #8
207ac     00 C0 9F FF 
207b0     55 01 68 FC | 	wrlong	##1065353216, local03
207b4     54 AB 02 F6 | 	mov	local03, local02
207b8     03 AA 66 F0 | 	shl	local03, #3
207bc     54 AB 82 F1 | 	sub	local03, local02
207c0     02 AA 66 F0 | 	shl	local03, #2
207c4     32 AB 02 F1 | 	add	local03, objptr
207c8     0C AA 06 F1 | 	add	local03, #12
207cc     00 40 A0 FF 
207d0     55 01 68 FC | 	wrlong	##1082130432, local03
207d4     54 AB 02 F6 | 	mov	local03, local02
207d8     03 AA 66 F0 | 	shl	local03, #3
207dc     54 AB 82 F1 | 	sub	local03, local02
207e0     02 AA 66 F0 | 	shl	local03, #2
207e4     32 AB 02 F1 | 	add	local03, objptr
207e8     10 AA 06 F1 | 	add	local03, #16
207ec     55 01 68 FC | 	wrlong	#0, local03
207f0     54 AB 02 F6 | 	mov	local03, local02
207f4     03 AA 66 F0 | 	shl	local03, #3
207f8     54 AB 82 F1 | 	sub	local03, local02
207fc     02 AA 66 F0 | 	shl	local03, #2
20800     32 AB 02 F1 | 	add	local03, objptr
20804     14 AA 06 F1 | 	add	local03, #20
20808     55 FF 59 FC | 	wrword	#255, local03
2080c     54 AB 02 F6 | 	mov	local03, local02
20810     03 AA 66 F0 | 	shl	local03, #3
20814     54 AB 82 F1 | 	sub	local03, local02
20818     02 AA 66 F0 | 	shl	local03, #2
2081c     32 AB 02 F1 | 	add	local03, objptr
20820     16 AA 06 F1 | 	add	local03, #22
20824     55 01 58 FC | 	wrword	#0, local03
20828     54 AB 02 F6 | 	mov	local03, local02
2082c     01 AA 66 F0 | 	shl	local03, #1
20830     3D 00 00 FF 
20834     D4 65 06 F1 | 	add	objptr, ##31700
20838     32 AB 02 F1 | 	add	local03, objptr
2083c     55 FF 59 FC | 	wrword	#255, local03
20840     01 A8 06 F1 | 	add	local02, #1
20844     08 A8 56 F2 | 	cmps	local02, #8 wc
20848     54 00 00 FF 
2084c     90 64 86 F1 | 	sub	objptr, ##43152
20850     C8 FE 9F CD |  if_b	jmp	#LR__2639
20854                 | LR__2640
20854     00 6E 20 FF 
20858     00 B2 06 F6 | 	mov	local07, ##1088159744
2085c                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
2085c     03 B0 06 F6 | 	mov	local06, #3
20860                 | LR__2641
20860     59 93 02 F6 | 	mov	arg01, local07
20864     CE C3 1F FF 
20868     7D 94 06 F6 | 	mov	arg02, ##1065852029
2086c     38 68 B0 FD | 	call	#__system___float_mul
20870     3D B3 02 F6 | 	mov	local07, result1
20874     FA B1 6E FB | 	djnz	local06, #LR__2641
20878     00 A8 06 F6 | 	mov	local02, #0
2087c                 | LR__2642
2087c     54 AD 02 F6 | 	mov	local04, local02
20880     02 AC 66 F0 | 	shl	local04, #2
20884     32 AB 02 F6 | 	mov	local03, objptr
20888     16 00 00 FF 
2088c     38 AA 06 F1 | 	add	local03, ##11320
20890     55 AD 02 F1 | 	add	local04, local03
20894     56 B3 62 FC | 	wrlong	local07, local04
20898     59 93 02 F6 | 	mov	arg01, local07
2089c     CE C3 1F FF 
208a0     7D 94 06 F6 | 	mov	arg02, ##1065852029
208a4     00 68 B0 FD | 	call	#__system___float_mul
208a8     3D B3 02 F6 | 	mov	local07, result1
208ac     01 A8 06 F1 | 	add	local02, #1
208b0     0C A8 56 F2 | 	cmps	local02, #12 wc
208b4     C4 FF 9F CD |  if_b	jmp	#LR__2642
208b8     16 00 00 FF 
208bc     68 64 06 F1 | 	add	objptr, ##11368
208c0     32 51 6B FC | 	wrlong	#424, objptr
208c4     04 64 06 F1 | 	add	objptr, #4
208c8     32 21 6B FC | 	wrlong	#400, objptr
208cc     04 64 06 F1 | 	add	objptr, #4
208d0     32 F3 6A FC | 	wrlong	#377, objptr
208d4     04 64 06 F1 | 	add	objptr, #4
208d8     32 C9 6A FC | 	wrlong	#356, objptr
208dc     04 64 06 F1 | 	add	objptr, #4
208e0     32 A1 6A FC | 	wrlong	#336, objptr
208e4     04 64 06 F1 | 	add	objptr, #4
208e8     32 7B 6A FC | 	wrlong	#317, objptr
208ec     04 64 06 F1 | 	add	objptr, #4
208f0     32 59 6A FC | 	wrlong	#300, objptr
208f4     04 64 06 F1 | 	add	objptr, #4
208f8     32 37 6A FC | 	wrlong	#283, objptr
208fc     04 64 06 F1 | 	add	objptr, #4
20900     32 17 6A FC | 	wrlong	#267, objptr
20904     04 64 06 F1 | 	add	objptr, #4
20908     32 F9 69 FC | 	wrlong	#252, objptr
2090c     04 64 06 F1 | 	add	objptr, #4
20910     32 DD 69 FC | 	wrlong	#238, objptr
20914     04 64 06 F1 | 	add	objptr, #4
20918     32 C1 69 FC | 	wrlong	#224, objptr
2091c     3E 00 00 FF 
20920     0A 64 06 F1 | 	add	objptr, ##31754
20924     32 01 59 FC | 	wrword	#128, objptr
20928     02 64 86 F1 | 	sub	objptr, #2
2092c     32 01 59 FC | 	wrword	#128, objptr
20930     54 00 00 FF 
20934     9C 64 86 F1 | 	sub	objptr, ##43164
20938     E7 F0 03 F6 | 	mov	ptra, fp
2093c     F2 00 A0 FD | 	call	#popregs_
20940                 | _init_audio_ret
20940     2D 00 64 FD | 	ret
20944                 | 
20944                 | ' 
20944                 | ' '------------------- Error messages
20944                 | ' 
20944                 | ' sub init_error_strings
20944                 | _init_error_strings
20944     98 01 00 FF 
20948     85 81 06 F6 | 	mov	_var01, ##@LR__6102
2094c     47 00 00 FF 
20950     20 64 06 F1 | 	add	objptr, ##36384
20954     32 81 62 FC | 	wrlong	_var01, objptr
20958     98 01 00 FF 
2095c     86 81 06 F6 | 	mov	_var01, ##@LR__6103
20960     04 64 06 F1 | 	add	objptr, #4
20964     32 81 62 FC | 	wrlong	_var01, objptr
20968     98 01 00 FF 
2096c     AA 81 06 F6 | 	mov	_var01, ##@LR__6104
20970     04 64 06 F1 | 	add	objptr, #4
20974     32 81 62 FC | 	wrlong	_var01, objptr
20978     98 01 00 FF 
2097c     CA 81 06 F6 | 	mov	_var01, ##@LR__6105
20980     04 64 06 F1 | 	add	objptr, #4
20984     32 81 62 FC | 	wrlong	_var01, objptr
20988     98 01 00 FF 
2098c     E3 81 06 F6 | 	mov	_var01, ##@LR__6106
20990     04 64 06 F1 | 	add	objptr, #4
20994     32 81 62 FC | 	wrlong	_var01, objptr
20998     98 01 00 FF 
2099c     FE 81 06 F6 | 	mov	_var01, ##@LR__6107
209a0     04 64 06 F1 | 	add	objptr, #4
209a4     32 81 62 FC | 	wrlong	_var01, objptr
209a8     99 01 00 FF 
209ac     1F 80 06 F6 | 	mov	_var01, ##@LR__6108
209b0     04 64 06 F1 | 	add	objptr, #4
209b4     32 81 62 FC | 	wrlong	_var01, objptr
209b8     99 01 00 FF 
209bc     4C 80 06 F6 | 	mov	_var01, ##@LR__6109
209c0     04 64 06 F1 | 	add	objptr, #4
209c4     32 81 62 FC | 	wrlong	_var01, objptr
209c8     99 01 00 FF 
209cc     76 80 06 F6 | 	mov	_var01, ##@LR__6110
209d0     04 64 06 F1 | 	add	objptr, #4
209d4     32 81 62 FC | 	wrlong	_var01, objptr
209d8     99 01 00 FF 
209dc     8E 80 06 F6 | 	mov	_var01, ##@LR__6111
209e0     04 64 06 F1 | 	add	objptr, #4
209e4     32 81 62 FC | 	wrlong	_var01, objptr
209e8     99 01 00 FF 
209ec     AE 80 06 F6 | 	mov	_var01, ##@LR__6112
209f0     04 64 06 F1 | 	add	objptr, #4
209f4     32 81 62 FC | 	wrlong	_var01, objptr
209f8     99 01 00 FF 
209fc     C4 80 06 F6 | 	mov	_var01, ##@LR__6113
20a00     04 64 06 F1 | 	add	objptr, #4
20a04     32 81 62 FC | 	wrlong	_var01, objptr
20a08     99 01 00 FF 
20a0c     E1 80 06 F6 | 	mov	_var01, ##@LR__6114
20a10     04 64 06 F1 | 	add	objptr, #4
20a14     32 81 62 FC | 	wrlong	_var01, objptr
20a18     99 01 00 FF 
20a1c     04 81 06 F6 | 	mov	_var01, ##@LR__6115
20a20     04 64 06 F1 | 	add	objptr, #4
20a24     32 81 62 FC | 	wrlong	_var01, objptr
20a28     99 01 00 FF 
20a2c     2A 81 06 F6 | 	mov	_var01, ##@LR__6116
20a30     04 64 06 F1 | 	add	objptr, #4
20a34     32 81 62 FC | 	wrlong	_var01, objptr
20a38     99 01 00 FF 
20a3c     45 81 06 F6 | 	mov	_var01, ##@LR__6117
20a40     04 64 06 F1 | 	add	objptr, #4
20a44     32 81 62 FC | 	wrlong	_var01, objptr
20a48     99 01 00 FF 
20a4c     55 81 06 F6 | 	mov	_var01, ##@LR__6118
20a50     04 64 06 F1 | 	add	objptr, #4
20a54     32 81 62 FC | 	wrlong	_var01, objptr
20a58     99 01 00 FF 
20a5c     64 81 06 F6 | 	mov	_var01, ##@LR__6119
20a60     04 64 06 F1 | 	add	objptr, #4
20a64     32 81 62 FC | 	wrlong	_var01, objptr
20a68     99 01 00 FF 
20a6c     7E 81 06 F6 | 	mov	_var01, ##@LR__6120
20a70     04 64 06 F1 | 	add	objptr, #4
20a74     32 81 62 FC | 	wrlong	_var01, objptr
20a78     99 01 00 FF 
20a7c     8F 81 06 F6 | 	mov	_var01, ##@LR__6121
20a80     04 64 06 F1 | 	add	objptr, #4
20a84     32 81 62 FC | 	wrlong	_var01, objptr
20a88     99 01 00 FF 
20a8c     A6 81 06 F6 | 	mov	_var01, ##@LR__6122
20a90     04 64 06 F1 | 	add	objptr, #4
20a94     32 81 62 FC | 	wrlong	_var01, objptr
20a98     99 01 00 FF 
20a9c     B9 81 06 F6 | 	mov	_var01, ##@LR__6123
20aa0     04 64 06 F1 | 	add	objptr, #4
20aa4     32 81 62 FC | 	wrlong	_var01, objptr
20aa8     99 01 00 FF 
20aac     C8 81 06 F6 | 	mov	_var01, ##@LR__6124
20ab0     04 64 06 F1 | 	add	objptr, #4
20ab4     32 81 62 FC | 	wrlong	_var01, objptr
20ab8     99 01 00 FF 
20abc     E4 81 06 F6 | 	mov	_var01, ##@LR__6125
20ac0     04 64 06 F1 | 	add	objptr, #4
20ac4     32 81 62 FC | 	wrlong	_var01, objptr
20ac8     99 01 00 FF 
20acc     F4 81 06 F6 | 	mov	_var01, ##@LR__6126
20ad0     04 64 06 F1 | 	add	objptr, #4
20ad4     32 81 62 FC | 	wrlong	_var01, objptr
20ad8     9A 01 00 FF 
20adc     04 80 06 F6 | 	mov	_var01, ##@LR__6127
20ae0     04 64 06 F1 | 	add	objptr, #4
20ae4     32 81 62 FC | 	wrlong	_var01, objptr
20ae8     9A 01 00 FF 
20aec     37 80 06 F6 | 	mov	_var01, ##@LR__6128
20af0     04 64 06 F1 | 	add	objptr, #4
20af4     32 81 62 FC | 	wrlong	_var01, objptr
20af8     9A 01 00 FF 
20afc     52 80 06 F6 | 	mov	_var01, ##@LR__6129
20b00     04 64 06 F1 | 	add	objptr, #4
20b04     32 81 62 FC | 	wrlong	_var01, objptr
20b08     9A 01 00 FF 
20b0c     67 80 06 F6 | 	mov	_var01, ##@LR__6130
20b10     04 64 06 F1 | 	add	objptr, #4
20b14     32 81 62 FC | 	wrlong	_var01, objptr
20b18     9A 01 00 FF 
20b1c     73 80 06 F6 | 	mov	_var01, ##@LR__6131
20b20     04 64 06 F1 | 	add	objptr, #4
20b24     32 81 62 FC | 	wrlong	_var01, objptr
20b28     9A 01 00 FF 
20b2c     84 80 06 F6 | 	mov	_var01, ##@LR__6132
20b30     04 64 06 F1 | 	add	objptr, #4
20b34     32 81 62 FC | 	wrlong	_var01, objptr
20b38     9A 01 00 FF 
20b3c     94 80 06 F6 | 	mov	_var01, ##@LR__6133
20b40     04 64 06 F1 | 	add	objptr, #4
20b44     32 81 62 FC | 	wrlong	_var01, objptr
20b48     9A 01 00 FF 
20b4c     AF 80 06 F6 | 	mov	_var01, ##@LR__6134
20b50     04 64 06 F1 | 	add	objptr, #4
20b54     32 81 62 FC | 	wrlong	_var01, objptr
20b58     9A 01 00 FF 
20b5c     BF 80 06 F6 | 	mov	_var01, ##@LR__6135
20b60     04 64 06 F1 | 	add	objptr, #4
20b64     32 81 62 FC | 	wrlong	_var01, objptr
20b68     9A 01 00 FF 
20b6c     CD 80 06 F6 | 	mov	_var01, ##@LR__6136
20b70     04 64 06 F1 | 	add	objptr, #4
20b74     32 81 62 FC | 	wrlong	_var01, objptr
20b78     9A 01 00 FF 
20b7c     E7 80 06 F6 | 	mov	_var01, ##@LR__6137
20b80     04 64 06 F1 | 	add	objptr, #4
20b84     32 81 62 FC | 	wrlong	_var01, objptr
20b88     9A 01 00 FF 
20b8c     1A 81 06 F6 | 	mov	_var01, ##@LR__6138
20b90     04 64 06 F1 | 	add	objptr, #4
20b94     32 81 62 FC | 	wrlong	_var01, objptr
20b98     9A 01 00 FF 
20b9c     32 81 06 F6 | 	mov	_var01, ##@LR__6139
20ba0     04 64 06 F1 | 	add	objptr, #4
20ba4     32 81 62 FC | 	wrlong	_var01, objptr
20ba8     9A 01 00 FF 
20bac     4D 81 06 F6 | 	mov	_var01, ##@LR__6140
20bb0     04 64 06 F1 | 	add	objptr, #4
20bb4     32 81 62 FC | 	wrlong	_var01, objptr
20bb8     9A 01 00 FF 
20bbc     6A 81 06 F6 | 	mov	_var01, ##@LR__6141
20bc0     04 64 06 F1 | 	add	objptr, #4
20bc4     32 81 62 FC | 	wrlong	_var01, objptr
20bc8     9A 01 00 FF 
20bcc     83 81 06 F6 | 	mov	_var01, ##@LR__6142
20bd0     04 64 06 F1 | 	add	objptr, #4
20bd4     32 81 62 FC | 	wrlong	_var01, objptr
20bd8     9A 01 00 FF 
20bdc     A2 81 06 F6 | 	mov	_var01, ##@LR__6143
20be0     04 64 06 F1 | 	add	objptr, #4
20be4     32 81 62 FC | 	wrlong	_var01, objptr
20be8     9A 01 00 FF 
20bec     B0 81 06 F6 | 	mov	_var01, ##@LR__6144
20bf0     04 64 06 F1 | 	add	objptr, #4
20bf4     32 81 62 FC | 	wrlong	_var01, objptr
20bf8     9A 01 00 FF 
20bfc     DD 81 06 F6 | 	mov	_var01, ##@LR__6145
20c00     04 64 06 F1 | 	add	objptr, #4
20c04     32 81 62 FC | 	wrlong	_var01, objptr
20c08     9A 01 00 FF 
20c0c     EA 81 06 F6 | 	mov	_var01, ##@LR__6146
20c10     04 64 06 F1 | 	add	objptr, #4
20c14     32 81 62 FC | 	wrlong	_var01, objptr
20c18     9A 01 00 FF 
20c1c     FE 81 06 F6 | 	mov	_var01, ##@LR__6147
20c20     04 64 06 F1 | 	add	objptr, #4
20c24     32 81 62 FC | 	wrlong	_var01, objptr
20c28     9B 01 00 FF 
20c2c     22 80 06 F6 | 	mov	_var01, ##@LR__6148
20c30     04 64 06 F1 | 	add	objptr, #4
20c34     32 81 62 FC | 	wrlong	_var01, objptr
20c38     9B 01 00 FF 
20c3c     39 80 06 F6 | 	mov	_var01, ##@LR__6149
20c40     04 64 06 F1 | 	add	objptr, #4
20c44     32 81 62 FC | 	wrlong	_var01, objptr
20c48     9B 01 00 FF 
20c4c     4C 80 06 F6 | 	mov	_var01, ##@LR__6150
20c50     04 64 06 F1 | 	add	objptr, #4
20c54     32 81 62 FC | 	wrlong	_var01, objptr
20c58     9B 01 00 FF 
20c5c     63 80 06 F6 | 	mov	_var01, ##@LR__6151
20c60     04 64 06 F1 | 	add	objptr, #4
20c64     32 81 62 FC | 	wrlong	_var01, objptr
20c68     9B 01 00 FF 
20c6c     7C 80 06 F6 | 	mov	_var01, ##@LR__6152
20c70     04 64 06 F1 | 	add	objptr, #4
20c74     32 81 62 FC | 	wrlong	_var01, objptr
20c78     9B 01 00 FF 
20c7c     9E 80 06 F6 | 	mov	_var01, ##@LR__6153
20c80     04 64 06 F1 | 	add	objptr, #4
20c84     32 81 62 FC | 	wrlong	_var01, objptr
20c88     9B 01 00 FF 
20c8c     B1 80 06 F6 | 	mov	_var01, ##@LR__6154
20c90     04 64 06 F1 | 	add	objptr, #4
20c94     32 81 62 FC | 	wrlong	_var01, objptr
20c98     9B 01 00 FF 
20c9c     C1 80 06 F6 | 	mov	_var01, ##@LR__6155
20ca0     04 64 06 F1 | 	add	objptr, #4
20ca4     32 81 62 FC | 	wrlong	_var01, objptr
20ca8     9B 01 00 FF 
20cac     D9 80 06 F6 | 	mov	_var01, ##@LR__6156
20cb0     04 64 06 F1 | 	add	objptr, #4
20cb4     32 81 62 FC | 	wrlong	_var01, objptr
20cb8     9B 01 00 FF 
20cbc     F0 80 06 F6 | 	mov	_var01, ##@LR__6157
20cc0     04 64 06 F1 | 	add	objptr, #4
20cc4     32 81 62 FC | 	wrlong	_var01, objptr
20cc8     47 00 00 FF 
20ccc     FC 64 86 F1 | 	sub	objptr, ##36604
20cd0                 | _init_error_strings_ret
20cd0     2D 00 64 FD | 	ret
20cd4                 | 
20cd4                 | '         
20cd4                 | ' sub printerror(err as integer, linenum=0 as integer)
20cd4                 | _printerror
20cd4     02 CA 05 F6 | 	mov	COUNT_, #2
20cd8     E8 00 A0 FD | 	call	#pushregs_
20cdc     49 A7 02 F6 | 	mov	local01, arg01
20ce0     4A A9 02 F6 | 	mov	local02, arg02
20ce4     9B 01 00 FF 
20ce8     FD 92 06 F6 | 	mov	arg01, ##@LR__6158
20cec     7C 21 B0 FD | 	call	#_Hg010b_4_spin2_write
20cf0     53 93 02 F6 | 	mov	arg01, local01
20cf4     B8 26 B0 FD | 	call	#_Hg010b_4_spin2_inttostr
20cf8     3D 93 02 F6 | 	mov	arg01, result1
20cfc     6C 21 B0 FD | 	call	#_Hg010b_4_spin2_write
20d00     9B 01 00 FF 
20d04     04 93 06 F6 | 	mov	arg01, ##@LR__6159
20d08     60 21 B0 FD | 	call	#_Hg010b_4_spin2_write
20d0c     02 A6 66 F0 | 	shl	local01, #2
20d10     32 95 02 F6 | 	mov	arg02, objptr
20d14     47 00 00 FF 
20d18     20 94 06 F1 | 	add	arg02, ##36384
20d1c     4A A7 02 F1 | 	add	local01, arg02
20d20     53 93 02 FB | 	rdlong	arg01, local01
20d24     44 21 B0 FD | 	call	#_Hg010b_4_spin2_write
20d28                 | ' v.write("Error " ): v.write(v.inttostr(err)) : v.write(" - ")  : v.write(errors$(err))
20d28                 | ' if linenum>0 then v.write(" in line " ): v.writeln(v.inttostr(linenum)) else v.writeln("")
20d28     01 A8 56 F2 | 	cmps	local02, #1 wc
20d2c     24 00 90 CD |  if_b	jmp	#LR__2650
20d30     9B 01 00 FF 
20d34     08 93 06 F6 | 	mov	arg01, ##@LR__6160
20d38     30 21 B0 FD | 	call	#_Hg010b_4_spin2_write
20d3c     54 93 02 F6 | 	mov	arg01, local02
20d40     6C 26 B0 FD | 	call	#_Hg010b_4_spin2_inttostr
20d44     3D 93 02 F6 | 	mov	arg01, result1
20d48                 | ' 
20d48                 | ' write(text)
20d48     20 21 B0 FD | 	call	#_Hg010b_4_spin2_write
20d4c                 | ' crlf
20d4c     BC 25 B0 FD | 	call	#_Hg010b_4_spin2_crlf
20d50     10 00 90 FD | 	jmp	#LR__2651
20d54                 | LR__2650
20d54     9B 01 00 FF 
20d58     12 93 06 F6 | 	mov	arg01, ##@LR__6161
20d5c                 | ' 
20d5c                 | ' write(text)
20d5c     0C 21 B0 FD | 	call	#_Hg010b_4_spin2_write
20d60                 | ' crlf
20d60     A8 25 B0 FD | 	call	#_Hg010b_4_spin2_crlf
20d64                 | LR__2651
20d64     E7 F0 03 F6 | 	mov	ptra, fp
20d68     F2 00 A0 FD | 	call	#popregs_
20d6c                 | _printerror_ret
20d6c     2D 00 64 FD | 	ret
20d70                 | 
20d70                 | ' 
20d70                 | ' '' ------------------------------- Hardware start/stop/initialization 
20d70                 | ' 
20d70                 | ' sub startpsram
20d70                 | _startpsram
20d70     00 92 06 F6 | 	mov	arg01, #0
20d74     0A 94 C6 F9 | 	decod	arg02, #10
20d78     0B 96 06 F6 | 	mov	arg03, #11
20d7c     07 98 06 F6 | 	mov	arg04, #7
20d80     0B 00 00 FF 
20d84     CC 64 06 F1 | 	add	objptr, ##5836
20d88     A8 2A B0 FD | 	call	#_psram4_spin2_startx
20d8c     2D 00 00 FF 
20d90     E0 64 06 F1 | 	add	objptr, ##23264
20d94     32 7B 62 FC | 	wrlong	result1, objptr
20d98                 | '     return $7FF00 + cog*12
20d98     0C 64 06 F1 | 	add	objptr, #12
20d9c     FF 03 80 FF 
20da0     32 01 6A FC | 	wrlong	##524032, objptr
20da4     38 00 00 FF 
20da8     B8 65 86 F1 | 	sub	objptr, ##29112
20dac                 | _startpsram_ret
20dac     2D 00 64 FD | 	ret
20db0                 | 
20db0                 | ' 
20db0                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
20db0                 | _startvideo
20db0     01 CA 05 F6 | 	mov	COUNT_, #1
20db4     E8 00 A0 FD | 	call	#pushregs_
20db8     38 00 00 FF 
20dbc     B8 65 06 F1 | 	add	objptr, ##29112
20dc0     32 99 02 FB | 	rdlong	arg04, objptr
20dc4     38 00 00 FF 
20dc8     B8 65 86 F1 | 	sub	objptr, ##29112
20dcc     4A 93 02 F6 | 	mov	arg01, arg02
20dd0     4C 95 02 F6 | 	mov	arg02, arg04
20dd4     14 08 B0 FD | 	call	#_Hg010b_4_spin2_start
20dd8     38 00 00 FF 
20ddc     A4 65 06 F1 | 	add	objptr, ##29092
20de0     32 7B 62 FC | 	wrlong	result1, objptr
20de4                 | ' 
20de4                 | ' videocog=v.start(pin,mbox)
20de4                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
20de4     00 A6 06 F6 | 	mov	local01, #0
20de8     2D 00 00 FF 
20dec     D8 64 86 F1 | 	sub	objptr, ##23256
20df0                 | LR__2660
20df0     53 93 02 F6 | 	mov	arg01, local01
20df4     00 28 00 FF 
20df8     00 94 06 F6 | 	mov	arg02, ##5242880
20dfc     90 2E B0 FD | 	call	#_psram4_spin2_setQos
20e00     01 A6 06 F1 | 	add	local01, #1
20e04     08 A6 56 F2 | 	cmps	local01, #8 wc
20e08     E4 FF 9F CD |  if_b	jmp	#LR__2660
20e0c     2D 00 00 FF 
20e10     D8 64 06 F1 | 	add	objptr, ##23256
20e14     32 93 02 FB | 	rdlong	arg01, objptr
20e18     7A 00 02 FF 
20e1c     00 94 06 F6 | 	mov	arg02, ##67171328
20e20     2D 00 00 FF 
20e24     D8 64 86 F1 | 	sub	objptr, ##23256
20e28     64 2E B0 FD | 	call	#_psram4_spin2_setQos
20e2c     0B 00 00 FF 
20e30     CC 64 86 F1 | 	sub	objptr, ##5836
20e34                 | ' psram.setQoS(videocog, $0400f400) 
20e34                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
20e34     32 95 02 F6 | 	mov	arg02, objptr
20e38     00 68 05 FF 
20e3c     00 94 46 F5 | 	or	arg02, ##181403648
20e40     00 96 06 F6 | 	mov	arg03, #0
20e44     00 98 06 F6 | 	mov	arg04, #0
20e48     00 92 06 F6 | 	mov	arg01, #0
20e4c     D8 45 B0 FD | 	call	#__system___basic_open
20e50                 | ' return videocog
20e50     38 00 00 FF 
20e54     A4 65 06 F1 | 	add	objptr, ##29092
20e58     32 7B 02 FB | 	rdlong	result1, objptr
20e5c     38 00 00 FF 
20e60     A4 65 86 F1 | 	sub	objptr, ##29092
20e64     E7 F0 03 F6 | 	mov	ptra, fp
20e68     F2 00 A0 FD | 	call	#popregs_
20e6c                 | _startvideo_ret
20e6c     2D 00 64 FD | 	ret
20e70                 | 
20e70                 | ' 
20e70                 | ' 
20e70                 | ' 
20e70                 | ' '' ------------------------------- Convenient psram peek/poke
20e70                 | ' 
20e70                 | ' sub pslpoke(addr as ulong,value as ulong)
20e70                 | _pslpoke
20e70     00 CA 05 F6 | 	mov	COUNT_, #0
20e74     E8 00 A0 FD | 	call	#pushregs_
20e78     08 F0 07 F1 | 	add	ptra, #8
20e7c     49 97 02 F6 | 	mov	arg03, arg01
20e80     04 CE 05 F1 | 	add	fp, #4
20e84     E7 94 62 FC | 	wrlong	arg02, fp
20e88     E7 92 02 F6 | 	mov	arg01, fp
20e8c     04 CE 85 F1 | 	sub	fp, #4
20e90     4B 95 02 F6 | 	mov	arg02, arg03
20e94     04 96 06 F6 | 	mov	arg03, #4
20e98     0B 00 00 FF 
20e9c     CC 64 06 F1 | 	add	objptr, ##5836
20ea0     5C 2C B0 FD | 	call	#_psram4_spin2_write
20ea4     0B 00 00 FF 
20ea8     CC 64 86 F1 | 	sub	objptr, ##5836
20eac     E7 F0 03 F6 | 	mov	ptra, fp
20eb0     F2 00 A0 FD | 	call	#popregs_
20eb4                 | _pslpoke_ret
20eb4     2D 00 64 FD | 	ret
20eb8                 | 
20eb8                 | ' 
20eb8                 | ' sub psdpoke(addr as ulong,value as ulong)
20eb8                 | _psdpoke
20eb8     00 CA 05 F6 | 	mov	COUNT_, #0
20ebc     E8 00 A0 FD | 	call	#pushregs_
20ec0     08 F0 07 F1 | 	add	ptra, #8
20ec4     49 97 02 F6 | 	mov	arg03, arg01
20ec8     04 CE 05 F1 | 	add	fp, #4
20ecc     E7 94 62 FC | 	wrlong	arg02, fp
20ed0     E7 92 02 F6 | 	mov	arg01, fp
20ed4     04 CE 85 F1 | 	sub	fp, #4
20ed8     4B 95 02 F6 | 	mov	arg02, arg03
20edc     02 96 06 F6 | 	mov	arg03, #2
20ee0     0B 00 00 FF 
20ee4     CC 64 06 F1 | 	add	objptr, ##5836
20ee8     14 2C B0 FD | 	call	#_psram4_spin2_write
20eec     0B 00 00 FF 
20ef0     CC 64 86 F1 | 	sub	objptr, ##5836
20ef4     E7 F0 03 F6 | 	mov	ptra, fp
20ef8     F2 00 A0 FD | 	call	#popregs_
20efc                 | _psdpoke_ret
20efc     2D 00 64 FD | 	ret
20f00                 | 
20f00                 | ' 
20f00                 | ' sub pspoke(addr as ulong,value as ulong)
20f00                 | _pspoke
20f00     00 CA 05 F6 | 	mov	COUNT_, #0
20f04     E8 00 A0 FD | 	call	#pushregs_
20f08     08 F0 07 F1 | 	add	ptra, #8
20f0c     49 97 02 F6 | 	mov	arg03, arg01
20f10     04 CE 05 F1 | 	add	fp, #4
20f14     E7 94 62 FC | 	wrlong	arg02, fp
20f18     E7 92 02 F6 | 	mov	arg01, fp
20f1c     04 CE 85 F1 | 	sub	fp, #4
20f20     4B 95 02 F6 | 	mov	arg02, arg03
20f24     01 96 06 F6 | 	mov	arg03, #1
20f28     0B 00 00 FF 
20f2c     CC 64 06 F1 | 	add	objptr, ##5836
20f30     CC 2B B0 FD | 	call	#_psram4_spin2_write
20f34     0B 00 00 FF 
20f38     CC 64 86 F1 | 	sub	objptr, ##5836
20f3c     E7 F0 03 F6 | 	mov	ptra, fp
20f40     F2 00 A0 FD | 	call	#popregs_
20f44                 | _pspoke_ret
20f44     2D 00 64 FD | 	ret
20f48                 | 
20f48                 | ' 
20f48                 | ' function pspeek(adr as ulong) as ubyte
20f48                 | _pspeek
20f48     00 CA 05 F6 | 	mov	COUNT_, #0
20f4c     E8 00 A0 FD | 	call	#pushregs_
20f50     0C F0 07 F1 | 	add	ptra, #12
20f54     49 95 02 F6 | 	mov	arg02, arg01
20f58     E7 92 02 F6 | 	mov	arg01, fp
20f5c     08 92 06 F1 | 	add	arg01, #8
20f60     01 96 06 F6 | 	mov	arg03, #1
20f64     0B 00 00 FF 
20f68     CC 64 06 F1 | 	add	objptr, ##5836
20f6c     F4 2A B0 FD | 	call	#_psram4_spin2_read1
20f70     0B 00 00 FF 
20f74     CC 64 86 F1 | 	sub	objptr, ##5836
20f78                 | ' psram.read1(varptr(res),adr,1)
20f78                 | ' return res
20f78     08 CE 05 F1 | 	add	fp, #8
20f7c     E7 7A C2 FA | 	rdbyte	result1, fp
20f80     08 CE 85 F1 | 	sub	fp, #8
20f84     E7 F0 03 F6 | 	mov	ptra, fp
20f88     F2 00 A0 FD | 	call	#popregs_
20f8c                 | _pspeek_ret
20f8c     2D 00 64 FD | 	ret
20f90                 | 
20f90                 | ' 
20f90                 | ' function pslpeek(adr as ulong) as ulong
20f90                 | _pslpeek
20f90     00 CA 05 F6 | 	mov	COUNT_, #0
20f94     E8 00 A0 FD | 	call	#pushregs_
20f98     0C F0 07 F1 | 	add	ptra, #12
20f9c     49 95 02 F6 | 	mov	arg02, arg01
20fa0     E7 92 02 F6 | 	mov	arg01, fp
20fa4     08 92 06 F1 | 	add	arg01, #8
20fa8     04 96 06 F6 | 	mov	arg03, #4
20fac     0B 00 00 FF 
20fb0     CC 64 06 F1 | 	add	objptr, ##5836
20fb4     AC 2A B0 FD | 	call	#_psram4_spin2_read1
20fb8     0B 00 00 FF 
20fbc     CC 64 86 F1 | 	sub	objptr, ##5836
20fc0                 | ' psram.read1(varptr(res),adr,4)
20fc0                 | ' return res
20fc0     08 CE 05 F1 | 	add	fp, #8
20fc4     E7 7A 02 FB | 	rdlong	result1, fp
20fc8     08 CE 85 F1 | 	sub	fp, #8
20fcc     E7 F0 03 F6 | 	mov	ptra, fp
20fd0     F2 00 A0 FD | 	call	#popregs_
20fd4                 | _pslpeek_ret
20fd4     2D 00 64 FD | 	ret
20fd8                 | 
20fd8                 | ' 
20fd8                 | ' function psdpeek(adr as ulong) as ulong
20fd8                 | _psdpeek
20fd8     00 CA 05 F6 | 	mov	COUNT_, #0
20fdc     E8 00 A0 FD | 	call	#pushregs_
20fe0     0C F0 07 F1 | 	add	ptra, #12
20fe4     49 95 02 F6 | 	mov	arg02, arg01
20fe8     E7 92 02 F6 | 	mov	arg01, fp
20fec     08 92 06 F1 | 	add	arg01, #8
20ff0     02 96 06 F6 | 	mov	arg03, #2
20ff4     0B 00 00 FF 
20ff8     CC 64 06 F1 | 	add	objptr, ##5836
20ffc     64 2A B0 FD | 	call	#_psram4_spin2_read1
21000     0B 00 00 FF 
21004     CC 64 86 F1 | 	sub	objptr, ##5836
21008                 | ' psram.read1(varptr(res),adr,2)
21008                 | ' return res
21008     08 CE 05 F1 | 	add	fp, #8
2100c     E7 7A E2 FA | 	rdword	result1, fp
21010     08 CE 85 F1 | 	sub	fp, #8
21014     E7 F0 03 F6 | 	mov	ptra, fp
21018     F2 00 A0 FD | 	call	#popregs_
2101c                 | _psdpeek_ret
2101c     2D 00 64 FD | 	ret
21020                 | 
21020                 | ' 
21020                 | ' '' ------------------------------- USB keyboard scan to char translator
21020                 | ' 
21020                 | ' function scantochar(key)
21020                 | _scantochar
21020                 | ' 
21020                 | ' select case (key shr 8) and 255
21020     49 81 02 F6 | 	mov	_var01, arg01
21024     08 80 C6 F0 | 	sar	_var01, #8
21028     FF 80 0E F5 | 	and	_var01, #255 wz
2102c     24 00 90 AD |  if_e	jmp	#LR__2670
21030     02 80 0E F2 | 	cmp	_var01, #2 wz
21034     20 80 0E 52 |  if_ne	cmp	_var01, #32 wz
21038     30 00 90 AD |  if_e	jmp	#LR__2671
2103c     40 80 0E F2 | 	cmp	_var01, #64 wz
21040     44 00 90 AD |  if_e	jmp	#LR__2672
21044     42 80 0E F2 | 	cmp	_var01, #66 wz
21048     60 80 0E 52 |  if_ne	cmp	_var01, #96 wz
2104c     70 00 90 5D |  if_ne	jmp	#LR__2674
21050     50 00 90 FD | 	jmp	#LR__2673
21054                 | LR__2670
21054     49 7B 02 F6 | 	mov	result1, arg01
21058     7F 7A 06 F5 | 	and	result1, #127
2105c     02 7A 66 F0 | 	shl	result1, #2
21060     36 7B 02 F1 | 	add	result1, ptr__dat__
21064     3D 7B C2 FA | 	rdbyte	result1, result1
21068     54 00 90 FD | 	jmp	#_scantochar_ret
2106c                 | LR__2671
2106c     49 7B 02 F6 | 	mov	result1, arg01
21070     7F 7A 06 F5 | 	and	result1, #127
21074     02 7A 66 F0 | 	shl	result1, #2
21078     01 7A 06 F1 | 	add	result1, #1
2107c     36 7B 02 F1 | 	add	result1, ptr__dat__
21080     3D 7B C2 FA | 	rdbyte	result1, result1
21084     38 00 90 FD | 	jmp	#_scantochar_ret
21088                 | LR__2672
21088     49 7B 02 F6 | 	mov	result1, arg01
2108c     7F 7A 06 F5 | 	and	result1, #127
21090     02 7A 66 F0 | 	shl	result1, #2
21094     02 7A 06 F1 | 	add	result1, #2
21098     36 7B 02 F1 | 	add	result1, ptr__dat__
2109c     3D 7B C2 FA | 	rdbyte	result1, result1
210a0     1C 00 90 FD | 	jmp	#_scantochar_ret
210a4                 | LR__2673
210a4     49 7B 02 F6 | 	mov	result1, arg01
210a8     7F 7A 06 F5 | 	and	result1, #127
210ac     02 7A 66 F0 | 	shl	result1, #2
210b0     03 7A 06 F1 | 	add	result1, #3
210b4     36 7B 02 F1 | 	add	result1, ptr__dat__
210b8     3D 7B C2 FA | 	rdbyte	result1, result1
210bc     00 00 90 FD | 	jmp	#_scantochar_ret
210c0                 | LR__2674
210c0                 | _scantochar_ret
210c0     2D 00 64 FD | 	ret
210c4                 | 
210c4                 | _program
210c4     03 CA 05 F6 | 	mov	COUNT_, #3
210c8     E8 00 A0 FD | 	call	#pushregs_
210cc     A0 FC BF FD | 	call	#_startpsram
210d0     38 00 00 FF 
210d4     B8 65 06 F1 | 	add	objptr, ##29112
210d8     32 93 02 FB | 	rdlong	arg01, objptr
210dc     00 94 06 F6 | 	mov	arg02, #0
210e0     F0 03 00 FF 
210e4     00 96 06 F6 | 	mov	arg03, ##516096
210e8     2D 00 00 FF 
210ec     EC 64 86 F1 | 	sub	objptr, ##23276
210f0     00 2F B0 FD | 	call	#_Audio2_004_spin2_start
210f4     3E 97 02 F6 | 	mov	arg03, result2
210f8     2D 00 00 FF 
210fc     D4 64 06 F1 | 	add	objptr, ##23252
21100     32 7B 62 FC | 	wrlong	result1, objptr
21104     14 64 06 F1 | 	add	objptr, #20
21108     32 97 62 FC | 	wrlong	arg03, objptr
2110c     38 00 00 FF 
21110     B4 65 86 F1 | 	sub	objptr, ##29108
21114     32 92 06 F6 | 	mov	arg01, #50
21118     B0 3B B0 FD | 	call	#__system___waitms
2111c     74 2C B0 FD | 	call	#_usbnew_spin2_start
21120     38 00 00 FF 
21124     A8 65 06 F1 | 	add	objptr, ##29096
21128     32 7B 62 FC | 	wrlong	result1, objptr
2112c     38 00 00 FF 
21130     A8 65 86 F1 | 	sub	objptr, ##29096
21134     40 92 06 F6 | 	mov	arg01, #64
21138     00 94 06 F6 | 	mov	arg02, #0
2113c     00 96 06 F6 | 	mov	arg03, #0
21140     6C FC BF FD | 	call	#_startvideo
21144                 | '   mouse_limits[0] := xlim
21144     0F 00 00 FF 
21148     C8 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##7880
2114c     01 00 80 FF 
21150     3B FF 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
21154                 | '   mouse_limits[1] := ylim
21154     04 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, #4
21158     01 00 80 FF 
2115c     3B AF 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
21160     32 93 02 F6 | 	mov	arg01, objptr
21164     D5 93 06 F1 | 	add	arg01, #469
21168                 | '   mouse_outptr := ptr
21168     04 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, #4
2116c     3B 93 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
21170     0F 00 00 FF 
21174     D0 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7888
21178     36 95 02 F6 | 	mov	arg02, ptr__dat__
2117c     16 00 00 FF 
21180     CA 94 06 F1 | 	add	arg02, ##11466
21184     10 92 06 F6 | 	mov	arg01, #16
21188     08 0B B0 FD | 	call	#_Hg010b_4_spin2_setspriteptr
2118c     10 92 06 F6 | 	mov	arg01, #16
21190     20 94 06 F6 | 	mov	arg02, #32
21194     20 96 06 F6 | 	mov	arg03, #32
21198     84 0B B0 FD | 	call	#_Hg010b_4_spin2_setspritesize
2119c     09 92 C6 F9 | 	decod	arg01, #9
211a0     2C 95 06 F6 | 	mov	arg02, #300
211a4     40 2D B0 FD | 	call	#_usbnew_spin2_mouse_move
211a8     32 97 02 F6 | 	mov	arg03, objptr
211ac     52 00 00 FF 
211b0     E8 64 06 F1 | 	add	objptr, ##42216
211b4     32 95 02 F6 | 	mov	arg02, objptr
211b8     4A 97 62 FC | 	wrlong	arg03, arg02
211bc     04 94 06 F1 | 	add	arg02, #4
211c0     4A 71 62 FC | 	wrlong	ptr__housekeeper_, arg02
211c4     2F 95 02 F6 | 	mov	arg02, entryptr__
211c8     1E 7A 06 F6 | 	mov	result1, #30
211cc     28 64 62 FD | 	setq	objptr
211d0     4A 7B F2 FC | 	coginit	result1, arg02 wc
211d4     01 7A 66 C6 |  if_b	neg	result1, #1
211d8     04 64 86 F1 | 	sub	objptr, #4
211dc     32 7B 62 FC | 	wrlong	result1, objptr
211e0     01 00 00 FF 
211e4     8C 65 06 F1 | 	add	objptr, ##908
211e8     32 01 68 FC | 	wrlong	#0, objptr
211ec     1B 00 00 FF 
211f0     98 64 86 F1 | 	sub	objptr, ##13976
211f4     32 05 68 FC | 	wrlong	#2, objptr
211f8     04 64 06 F1 | 	add	objptr, #4
211fc     32 27 69 FC | 	wrlong	#147, objptr
21200     04 64 06 F1 | 	add	objptr, #4
21204     32 35 69 FC | 	wrlong	#154, objptr
21208     04 64 06 F1 | 	add	objptr, #4
2120c     32 09 68 FC | 	wrlong	#4, objptr
21210     04 64 86 F1 | 	sub	objptr, #4
21214     32 7B 02 FB | 	rdlong	result1, objptr
21218     14 64 86 F1 | 	sub	objptr, #20
2121c     32 7B 62 FC | 	wrlong	result1, objptr
21220     04 64 06 F1 | 	add	objptr, #4
21224     32 01 68 FC | 	wrlong	#0, objptr
21228     04 64 06 F1 | 	add	objptr, #4
2122c     32 01 68 FC | 	wrlong	#0, objptr
21230     19 00 00 FF 
21234     0C 65 06 F1 | 	add	objptr, ##13068
21238     32 03 68 FC | 	wrlong	#1, objptr
2123c     01 00 00 FF 
21240     98 65 06 F1 | 	add	objptr, ##920
21244     32 01 68 FC | 	wrlong	#0, objptr
21248     36 97 02 F6 | 	mov	arg03, ptr__dat__
2124c     01 00 00 FF 
21250     00 96 06 F1 | 	add	arg03, ##512
21254     08 64 06 F1 | 	add	objptr, #8
21258     32 97 62 FC | 	wrlong	arg03, objptr
2125c     04 64 86 F1 | 	sub	objptr, #4
21260     03 00 80 FF 
21264     32 3D 69 FC | 	wrlong	##1694, objptr
21268     0D 00 00 FF 
2126c     74 64 86 F1 | 	sub	objptr, ##6772
21270     32 19 68 FC | 	wrlong	#12, objptr
21274     47 00 00 FF 
21278     08 64 86 F1 | 	sub	objptr, ##36360
2127c     74 D7 BF FD | 	call	#_init_commands
21280     C0 F6 BF FD | 	call	#_init_error_strings
21284     28 EE BF FD | 	call	#_init_audio
21288     DC 41 BF FD | 	call	#_do_new
2128c     38 00 00 FF 
21290     E0 65 06 F1 | 	add	objptr, ##29152
21294     32 93 02 FB | 	rdlong	arg01, objptr
21298     04 64 86 F1 | 	sub	objptr, #4
2129c     32 95 02 FB | 	rdlong	arg02, objptr
212a0     38 00 00 FF 
212a4     DC 65 86 F1 | 	sub	objptr, ##29148
212a8     0C 18 B0 FD | 	call	#_Hg010b_4_spin2_cls
212ac     38 00 00 FF 
212b0     E4 65 06 F1 | 	add	objptr, ##29156
212b4     32 93 02 FB | 	rdlong	arg01, objptr
212b8     38 00 00 FF 
212bc     E4 65 86 F1 | 	sub	objptr, ##29156
212c0     28 16 B0 FD | 	call	#_Hg010b_4_spin2_setfontfamily
212c4                 | ' 
212c4                 | ' leading_spaces:=amount
212c4     01 00 00 FF 
212c8     B6 64 06 F1 | 	add	objptr, ##694
212cc     32 05 68 FC | 	wrlong	#2, objptr
212d0     01 00 00 FF 
212d4     B6 64 86 F1 | 	sub	objptr, ##694
212d8     9B 01 00 FF 
212dc     13 A7 06 F6 | 	mov	local01, ##@LR__6162
212e0     3D 92 06 F6 | 	mov	arg01, #61
212e4     3C 94 06 F6 | 	mov	arg02, #60
212e8     3B 96 06 F6 | 	mov	arg03, #59
212ec     3A 98 06 F6 | 	mov	arg04, #58
212f0     EC 7D B0 FD | 	call	#__system___vfs_open_sdcardx
212f4     3D 95 02 F6 | 	mov	arg02, result1
212f8     53 93 02 F6 | 	mov	arg01, local01
212fc     A4 3A B0 FD | 	call	#__system___mount
21300     9B 01 00 FF 
21304     17 93 06 F6 | 	mov	arg01, ##@LR__6163
21308     5C 3D B0 FD | 	call	#__system___chdir
2130c     9B 01 00 FF 
21310     1F A7 06 F6 | 	mov	local01, ##@LR__6164
21314     4C 00 00 FF 
21318     38 64 06 F1 | 	add	objptr, ##38968
2131c     32 A7 62 FC | 	wrlong	local01, objptr
21320     13 00 00 FF 
21324     60 64 86 F1 | 	sub	objptr, ##9824
21328     32 93 02 FB | 	rdlong	arg01, objptr
2132c     38 00 00 FF 
21330     D8 65 86 F1 | 	sub	objptr, ##29144
21334     01 92 66 F0 | 	shl	arg01, #1
21338     01 94 06 F6 | 	mov	arg02, #1
2133c     2C 16 B0 FD | 	call	#_Hg010b_4_spin2_setcursorpos
21340                 | ' init_commands
21340                 | ' init_error_strings
21340                 | ' init_audio
21340                 | ' do_new
21340                 | ' cls(ink, paper)
21340                 | ' v.setfontfamily(font) 				' use ST Mono font
21340                 | ' v.setleadingspaces(2)
21340                 | ' mount "/sd", _vfs_open_sdcard()
21340                 | ' chdir "/sd/bas"
21340                 | ' currentdir$="/sd/bas"
21340                 | ' position 2*editor_spaces,1 : print ver$
21340     00 92 06 F6 | 	mov	arg01, #0
21344     14 8C B0 FD | 	call	#__system___getiolock_0622
21348     3D 93 02 F6 | 	mov	arg01, result1
2134c     88 36 B0 FD | 	call	#__system___lockmem
21350     18 00 00 FF 
21354     40 6D 06 F1 | 	add	ptr__dat__, ##12608
21358     36 95 02 FB | 	rdlong	arg02, ptr__dat__
2135c     18 00 00 FF 
21360     40 6D 86 F1 | 	sub	ptr__dat__, ##12608
21364     00 92 06 F6 | 	mov	arg01, #0
21368     00 96 06 F6 | 	mov	arg03, #0
2136c     5C 43 B0 FD | 	call	#__system___basic_print_string
21370     00 92 06 F6 | 	mov	arg01, #0
21374     0A 94 06 F6 | 	mov	arg02, #10
21378     00 96 06 F6 | 	mov	arg03, #0
2137c     F4 42 B0 FD | 	call	#__system___basic_print_char
21380     00 92 06 F6 | 	mov	arg01, #0
21384     D4 8B B0 FD | 	call	#__system___getiolock_0622
21388     3D 01 68 FC | 	wrlong	#0, result1
2138c     54 00 00 FF 
21390     74 64 06 F1 | 	add	objptr, ##43124
21394     32 93 02 FB | 	rdlong	arg01, objptr
21398     0F 00 00 FF 
2139c     74 64 86 F1 | 	sub	objptr, ##7796
213a0     32 A7 02 FB | 	rdlong	local01, objptr
213a4     45 00 00 FF 
213a8     00 64 86 F1 | 	sub	objptr, ##35328
213ac     53 93 82 F1 | 	sub	arg01, local01
213b0     00 94 06 F6 | 	mov	arg02, #0
213b4     0A 96 06 F6 | 	mov	arg03, #10
213b8     18 51 B0 FD | 	call	#__system__Number_S
213bc     3D 93 02 F6 | 	mov	arg01, result1
213c0     9B 01 00 FF 
213c4     27 95 06 F6 | 	mov	arg02, ##@LR__6165
213c8     68 36 B0 FD | 	call	#__system___string_concat
213cc     3D A7 02 F6 | 	mov	local01, result1
213d0     52 00 00 FF 
213d4     DC 64 06 F1 | 	add	objptr, ##42204
213d8     32 A7 62 FC | 	wrlong	local01, objptr
213dc     52 00 00 FF 
213e0     DC 64 86 F1 | 	sub	objptr, ##42204
213e4                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
213e4     00 92 06 F6 | 	mov	arg01, #0
213e8     70 8B B0 FD | 	call	#__system___getiolock_0622
213ec     3D 93 02 F6 | 	mov	arg01, result1
213f0     E4 35 B0 FD | 	call	#__system___lockmem
213f4     52 00 00 FF 
213f8     DC 64 06 F1 | 	add	objptr, ##42204
213fc     32 95 02 FB | 	rdlong	arg02, objptr
21400     52 00 00 FF 
21404     DC 64 86 F1 | 	sub	objptr, ##42204
21408     00 92 06 F6 | 	mov	arg01, #0
2140c     00 96 06 F6 | 	mov	arg03, #0
21410     B8 42 B0 FD | 	call	#__system___basic_print_string
21414     00 92 06 F6 | 	mov	arg01, #0
21418     0A 94 06 F6 | 	mov	arg02, #10
2141c     00 96 06 F6 | 	mov	arg03, #0
21420     50 42 B0 FD | 	call	#__system___basic_print_char
21424     00 92 06 F6 | 	mov	arg01, #0
21428     30 8B B0 FD | 	call	#__system___getiolock_0622
2142c     3D 01 68 FC | 	wrlong	#0, result1
21430     38 00 00 FF 
21434     D8 65 06 F1 | 	add	objptr, ##29144
21438     32 93 02 FB | 	rdlong	arg01, objptr
2143c     38 00 00 FF 
21440     D8 65 86 F1 | 	sub	objptr, ##29144
21444     01 92 66 F0 | 	shl	arg01, #1
21448     04 94 06 F6 | 	mov	arg02, #4
2144c     1C 15 B0 FD | 	call	#_Hg010b_4_spin2_setcursorpos
21450                 | ' position 2*editor_spaces,4 : print "Ready"
21450     00 92 06 F6 | 	mov	arg01, #0
21454     04 8B B0 FD | 	call	#__system___getiolock_0622
21458     3D 93 02 F6 | 	mov	arg01, result1
2145c     78 35 B0 FD | 	call	#__system___lockmem
21460     9B 01 00 FF 
21464     39 95 06 F6 | 	mov	arg02, ##@LR__6166
21468     00 92 06 F6 | 	mov	arg01, #0
2146c     00 96 06 F6 | 	mov	arg03, #0
21470     58 42 B0 FD | 	call	#__system___basic_print_string
21474     00 92 06 F6 | 	mov	arg01, #0
21478     0A 94 06 F6 | 	mov	arg02, #10
2147c     00 96 06 F6 | 	mov	arg03, #0
21480     F0 41 B0 FD | 	call	#__system___basic_print_char
21484     00 92 06 F6 | 	mov	arg01, #0
21488     D0 8A B0 FD | 	call	#__system___getiolock_0622
2148c     3D 01 68 FC | 	wrlong	#0, result1
21490     00 94 06 F6 | 	mov	arg02, #0
21494     01 94 D6 F7 | 	test	arg02, #1 wc
21498     5A 4C 64 FD | 	drvc	#38
2149c     01 94 D6 F7 | 	test	arg02, #1 wc
214a0     5A 4E 64 FD | 	drvc	#39
214a4     9B 01 00 FF 
214a8     3F A7 06 F6 | 	mov	local01, ##@LR__6167
214ac     54 00 00 FF 
214b0     A0 64 06 F1 | 	add	objptr, ##43168
214b4     32 A7 62 FC | 	wrlong	local01, objptr
214b8     04 64 06 F1 | 	add	objptr, #4
214bc     FF FF FF FF 
214c0     32 FF 6B FC | 	wrlong	##-1, objptr
214c4     0C 64 06 F1 | 	add	objptr, #12
214c8     32 01 68 FC | 	wrlong	#0, objptr
214cc                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
214cc                 | ' loadname="noname.bas"
214cc                 | ' do_insert=-1
214cc                 | ' inload=0
214cc                 | ' for i=0 to 1 : beepsample(i)=32767  : next i : for i=2 to 3: beepsample(i)=-32767 : next i
214cc     00 A8 06 F6 | 	mov	local02, #0
214d0     3E 00 00 FF 
214d4     18 64 86 F1 | 	sub	objptr, ##31768
214d8     D7 10 48 FB | 	callpa	#(@LR__2681-@LR__2680)>>2,fcache_load_ptr_
214dc                 | LR__2680
214dc     54 AB 02 F6 | 	mov	local03, local02
214e0     01 AA 66 F0 | 	shl	local03, #1
214e4     32 AB 02 F1 | 	add	local03, objptr
214e8     3F 00 80 FF 
214ec     55 FF 5B FC | 	wrword	##32767, local03
214f0     01 A8 06 F1 | 	add	local02, #1
214f4     02 A8 56 F2 | 	cmps	local02, #2 wc
214f8     E0 FF 9F CD |  if_b	jmp	#LR__2680
214fc                 | LR__2681
214fc     02 A8 06 F6 | 	mov	local02, #2
21500     D7 10 48 FB | 	callpa	#(@LR__2683-@LR__2682)>>2,fcache_load_ptr_
21504                 | LR__2682
21504     54 AB 02 F6 | 	mov	local03, local02
21508     01 AA 66 F0 | 	shl	local03, #1
2150c     32 AB 02 F1 | 	add	local03, objptr
21510     40 00 80 FF 
21514     55 03 58 FC | 	wrword	##32769, local03
21518     01 A8 06 F1 | 	add	local02, #1
2151c     04 A8 16 F2 | 	cmp	local02, #4 wc
21520     E0 FF 9F CD |  if_b	jmp	#LR__2682
21524                 | LR__2683
21524     16 00 00 FF 
21528     98 64 86 F1 | 	sub	objptr, ##11416
2152c                 | ' 
2152c                 | ' open "/sd/bas/autorun.bas" for input as #9
2152c     9B 01 00 FF 
21530     4A 95 06 F6 | 	mov	arg02, ##@LR__6168
21534     09 92 06 F6 | 	mov	arg01, #9
21538     00 96 06 F6 | 	mov	arg03, #0
2153c     48 40 B0 FD | 	call	#__system___basic_open_string
21540     20 6A 06 F1 | 	add	ptr___system__dat__, #32
21544     35 7B 02 FB | 	rdlong	result1, ptr___system__dat__
21548     35 01 68 FC | 	wrlong	#0, ptr___system__dat__
2154c     20 6A 86 F1 | 	sub	ptr___system__dat__, #32
21550     54 00 00 FF 
21554     B4 64 06 F1 | 	add	objptr, ##43188
21558     32 7B 62 FC | 	wrlong	result1, objptr
2155c     54 00 00 FF 
21560     B4 64 86 F1 | 	sub	objptr, ##43188
21564                 | ' err=geterr()
21564                 | ' close #9
21564     09 92 06 F6 | 	mov	arg01, #9
21568     48 80 B0 FD | 	call	#__system__close
2156c                 | ' if err=0 then line$="run autorun.bas" : interpret
2156c     54 00 00 FF 
21570     B4 64 06 F1 | 	add	objptr, ##43188
21574     32 A7 0A FB | 	rdlong	local01, objptr wz
21578     54 00 00 FF 
2157c     B4 64 86 F1 | 	sub	objptr, ##43188
21580     9B 01 00 AF 
21584     5E A7 06 A6 |  if_e	mov	local01, ##@LR__6169
21588     38 00 00 AF 
2158c     C0 65 06 A1 |  if_e	add	objptr, ##29120
21590     32 A7 62 AC |  if_e	wrlong	local01, objptr
21594     38 00 00 AF 
21598     C0 65 86 A1 |  if_e	sub	objptr, ##29120
2159c     A8 03 BE AD |  if_e	call	#_interpret
215a0                 | ' 
215a0                 | ' 
215a0                 | ' '-------------------------------------------------------------------------------------------------------- 
215a0                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
215a0                 | ' '--------------------------------------------------------------------------------------------------------
215a0                 | ' 
215a0                 | ' do
215a0                 | LR__2684
215a0     60 F3 BD FD | 	call	#_edit
215a4     3D A7 02 F6 | 	mov	local01, result1
215a8     38 00 00 FF 
215ac     C0 65 06 F1 | 	add	objptr, ##29120
215b0     32 A7 62 FC | 	wrlong	local01, objptr
215b4     38 00 00 FF 
215b8     C0 65 86 F1 | 	sub	objptr, ##29120
215bc     88 03 BE FD | 	call	#_interpret
215c0     9B 01 00 FF 
215c4     6E A7 06 F6 | 	mov	local01, ##@LR__6170
215c8     38 00 00 FF 
215cc     C0 65 06 F1 | 	add	objptr, ##29120
215d0     32 A7 62 FC | 	wrlong	local01, objptr
215d4     38 00 00 FF 
215d8     C0 65 86 F1 | 	sub	objptr, ##29120
215dc     C0 FF 9F FD | 	jmp	#LR__2684
215e0     E7 F0 03 F6 | 	mov	ptra, fp
215e4     F2 00 A0 FD | 	call	#popregs_
215e8                 | _program_ret
215e8     2D 00 64 FD | 	ret
215ec                 | 
215ec                 | ' '' this is not a main program.
215ec                 | ' 
215ec                 | ' '****************************************************************************************************************
215ec                 | ' '                                                                                                             	*
215ec                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
215ec                 | ' '                                                                                                            	*
215ec                 | ' ' base - HDMI base pin												*
215ec                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
215ec                 | ' '														*
215ec                 | ' '														*
215ec                 | ' '****************************************************************************************************************
215ec                 | ' 
215ec                 | ' pub start(base,mb):result |i
215ec                 | _Hg010b_4_spin2_start
215ec                 | ' 
215ec                 | ' '--------------------------- initialize pointers and variables
215ec                 | ' 
215ec                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
215ec     34 64 06 F1 | 	add	objptr, #52
215f0     32 7B 02 F6 | 	mov	result1, objptr
215f4     28 64 86 F1 | 	sub	objptr, #40
215f8     32 7B 62 FC | 	wrlong	result1, objptr
215fc                 | ' hdmibase:=base							' HDMI base pin, 8*n
215fc     18 64 06 F1 | 	add	objptr, #24
21600     32 93 62 FC | 	wrlong	arg01, objptr
21604                 | ' mailbox_ptr:=mb		
21604     04 64 06 F1 | 	add	objptr, #4
21608     32 95 62 FC | 	wrlong	arg02, objptr
2160c                 | ' mailbox0:=mb				' PSRAM mailbox pointer
2160c     C1 65 06 F1 | 	add	objptr, #449
21610     32 95 62 FC | 	wrlong	arg02, objptr
21614                 | ' sprite_ptr:=@spr1ptr
21614     D8 64 86 F1 | 	sub	objptr, #216
21618     32 7B 02 F6 | 	mov	result1, objptr
2161c     E5 64 86 F1 | 	sub	objptr, #229
21620     32 7B 62 FC | 	wrlong	result1, objptr
21624                 | ' 		'
21624                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
21624     E5 64 06 F1 | 	add	objptr, #229
21628     32 7B 02 FB | 	rdlong	result1, objptr
2162c     D0 7A 06 F1 | 	add	result1, #208
21630     3D 11 58 FC | 	wrword	#8, result1
21634                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
21634     32 97 02 FB | 	rdlong	arg03, objptr
21638     D2 96 06 F1 | 	add	arg03, #210
2163c     4B 21 58 FC | 	wrword	#16, arg03
21640                 | ' leading_spaces:=0				'
21640     A5 65 06 F1 | 	add	objptr, #421
21644     32 01 68 FC | 	wrlong	#0, objptr
21648                 | ' 
21648                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
21648     99 64 86 F1 | 	sub	objptr, #153
2164c     00 00 A0 FF 
21650     32 0F 68 FC | 	wrlong	##1073741831, objptr
21654                 | ' emptydl[1]:=0
21654     04 64 06 F1 | 	add	objptr, #4
21658     32 01 68 FC | 	wrlong	#0, objptr
2165c                 | ' 
2165c                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
2165c                 | ' 
2165c                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
2165c     28 65 86 F1 | 	sub	objptr, #296
21660     32 03 68 FC | 	wrlong	#1, objptr
21664                 | ' if s_debug<>0
21664                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
21664     20 00 80 FF 
21668     32 01 68 FC | 	wrlong	##16384, objptr
2166c     F9 64 86 F1 | 	sub	objptr, #249
21670                 | ' setmode()							' set the mode, see below
21670     18 03 B0 FD | 	call	#_Hg010b_4_spin2_setmode
21674                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
21674     49 64 06 F1 | 	add	objptr, #73
21678     32 7B 02 F6 | 	mov	result1, objptr
2167c     35 64 86 F1 | 	sub	objptr, #53
21680     32 7B 62 FC | 	wrlong	result1, objptr
21684                 | ' cursor_ptr:=@cursor_x						
21684     28 64 06 F1 | 	add	objptr, #40
21688     32 97 02 F6 | 	mov	arg03, objptr
2168c     2C 64 86 F1 | 	sub	objptr, #44
21690     32 97 62 FC | 	wrlong	arg03, objptr
21694                 | ' fontnum:=0  							' start with a PC type font 
21694     55 64 06 F1 | 	add	objptr, #85
21698     32 01 68 FC | 	wrlong	#0, objptr
2169c                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
2169c     1C 64 06 F1 | 	add	objptr, #28
216a0     32 93 02 F6 | 	mov	arg01, objptr
216a4     81 64 86 F1 | 	sub	objptr, #129
216a8     34 95 02 F6 | 	mov	arg02, ptr__Hg010b_4_spin2_dat__
216ac     1C 00 00 FF 
216b0     80 94 06 F1 | 	add	arg02, ##14464
216b4     10 96 06 F6 | 	mov	arg03, #16
216b8     CC 31 B0 FD | 	call	#__system____builtin_memmove
216bc                 | ' leading_spaces:=0
216bc     01 00 00 FF 
216c0     B6 64 06 F1 | 	add	objptr, ##694
216c4     32 01 68 FC | 	wrlong	#0, objptr
216c8     01 00 00 FF 
216cc     B6 64 86 F1 | 	sub	objptr, ##694
216d0                 | ' '---------------------------- initialize a cursor (MSDOS type)
216d0                 | ' 
216d0                 | ' initcursor(154)
216d0     9A 92 06 F6 | 	mov	arg01, #154
216d4     74 00 B0 FD | 	call	#_Hg010b_4_spin2_initcursor
216d8                 | ' 
216d8                 | ' '---------------------------- start the cog
216d8                 | ' 
216d8                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
216d8     34 95 02 F6 | 	mov	arg02, ptr__Hg010b_4_spin2_dat__
216dc     1C 00 00 FF 
216e0     90 94 06 F1 | 	add	arg02, ##14480
216e4     32 97 02 F6 | 	mov	arg03, objptr
216e8     14 96 06 F1 | 	add	arg03, #20
216ec     10 7A 06 F6 | 	mov	result1, #16
216f0     28 96 62 FD | 	setq	arg03
216f4     4A 7B F2 FC | 	coginit	result1, arg02 wc
216f8     01 7A 66 C6 |  if_b	neg	result1, #1
216fc     30 64 06 F1 | 	add	objptr, #48
21700     32 7B 62 FC | 	wrlong	result1, objptr
21704     30 64 86 F1 | 	sub	objptr, #48
21708                 | ' waitms(40)							' wait for stabilize
21708     28 92 06 F6 | 	mov	arg01, #40
2170c     BC 35 B0 FD | 	call	#__system___waitms
21710                 | ' return cog							' return the driver's cog #
21710     30 64 06 F1 | 	add	objptr, #48
21714     32 7B 02 FB | 	rdlong	result1, objptr
21718     30 64 86 F1 | 	sub	objptr, #48
2171c                 | _Hg010b_4_spin2_start_ret
2171c     2D 00 64 FD | 	ret
21720                 | 
21720                 | ' 
21720                 | ' 
21720                 | ' '**************************************************************************************************************** 
21720                 | ' '                                                                                                             	*
21720                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
21720                 | ' '  Mode number - see start() above or bits below								*
21720                 | ' '                                                                                                             	*
21720                 | ' '****************************************************************************************************************
21720                 | ' 
21720                 | ' 
21720                 | ' pub restorepalette()
21720                 | _Hg010b_4_spin2_restorepalette
21720                 | ' 
21720                 | ' longmove(@ataripalette,@ataripalette2,256)
21720     18 00 00 FF 
21724     40 68 06 F1 | 	add	ptr__Hg010b_4_spin2_dat__, ##12352
21728     34 93 02 F6 | 	mov	arg01, ptr__Hg010b_4_spin2_dat__
2172c     02 00 00 FF 
21730     00 68 06 F1 | 	add	ptr__Hg010b_4_spin2_dat__, ##1024
21734     34 95 02 F6 | 	mov	arg02, ptr__Hg010b_4_spin2_dat__
21738     1A 00 00 FF 
2173c     40 68 86 F1 | 	sub	ptr__Hg010b_4_spin2_dat__, ##13376
21740     00 97 06 F6 | 	mov	arg03, #256
21744     D4 31 B0 FD | 	call	#__system__longmove
21748                 | _Hg010b_4_spin2_restorepalette_ret
21748     2D 00 64 FD | 	ret
2174c                 | 
2174c                 | ' 
2174c                 | ' '---------------------------- initialize a cursor (MSDOS type)
2174c                 | ' pub initcursor(color) |i
2174c                 | _Hg010b_4_spin2_initcursor
2174c     03 CA 05 F6 | 	mov	COUNT_, #3
21750     E8 00 A0 FD | 	call	#pushregs_
21754     49 A7 02 F6 | 	mov	local01, arg01
21758                 | ' 
21758                 | ' cursor_x:=0							' place the cursor at 0:0
21758     3C 64 06 F1 | 	add	objptr, #60
2175c     32 01 58 FC | 	wrword	#0, objptr
21760                 | ' cursor_y:=0
21760     02 64 06 F1 | 	add	objptr, #2
21764     32 01 48 FC | 	wrbyte	#0, objptr
21768                 | ' repeat i from 0 to 111
21768     00 A8 06 F6 | 	mov	local02, #0
2176c     F8 65 06 F1 | 	add	objptr, #504
21770     D7 0C 48 FB | 	callpa	#(@LR__2691-@LR__2690)>>2,fcache_load_ptr_
21774                 | LR__2690
21774                 | '   cursor[i]:=0
21774     54 AB 02 F6 | 	mov	local03, local02
21778     32 AB 02 F1 | 	add	local03, objptr
2177c     55 01 48 FC | 	wrbyte	#0, local03
21780     01 A8 06 F1 | 	add	local02, #1
21784     70 A8 56 F2 | 	cmps	local02, #112 wc
21788     E8 FF 9F CD |  if_b	jmp	#LR__2690
2178c                 | LR__2691
2178c                 | ' repeat i from 112 to 127
2178c     70 A8 06 F6 | 	mov	local02, #112
21790     D7 0C 48 FB | 	callpa	#(@LR__2693-@LR__2692)>>2,fcache_load_ptr_
21794                 | LR__2692
21794                 | '   cursor[i]:=color  
21794     54 AB 02 F6 | 	mov	local03, local02
21798     32 AB 02 F1 | 	add	local03, objptr
2179c     55 A7 42 FC | 	wrbyte	local01, local03
217a0     01 A8 06 F1 | 	add	local02, #1
217a4     80 A8 16 F2 | 	cmp	local02, #128 wc
217a8     E8 FF 9F CD |  if_b	jmp	#LR__2692
217ac                 | LR__2693
217ac     01 00 00 FF 
217b0     36 64 86 F1 | 	sub	objptr, ##566
217b4                 | ' 'repeat i from 0 to 127
217b4                 | ' '  if ((i/8)//2)
217b4                 | ' '    cursor[i]:=15
217b4                 | ' '  else
217b4                 | ' '    cursor[i]:=0
217b4                 | ' '  if i>=120    
217b4                 | ' '    cursor[i]:=40
217b4                 | ' setspriteptr(17,@cursor)
217b4     32 95 02 F6 | 	mov	arg02, objptr
217b8     01 00 00 FF 
217bc     36 94 06 F1 | 	add	arg02, ##566
217c0     11 92 06 F6 | 	mov	arg01, #17
217c4     CC 04 B0 FD | 	call	#_Hg010b_4_spin2_setspriteptr
217c8                 | ' setspritesize(17,8,16)
217c8     11 92 06 F6 | 	mov	arg01, #17
217cc     08 94 06 F6 | 	mov	arg02, #8
217d0     10 96 06 F6 | 	mov	arg03, #16
217d4     48 05 B0 FD | 	call	#_Hg010b_4_spin2_setspritesize
217d8                 | ' setspritepos(17,0,0)
217d8     11 92 06 F6 | 	mov	arg01, #17
217dc     00 94 06 F6 | 	mov	arg02, #0
217e0     00 96 06 F6 | 	mov	arg03, #0
217e4     D0 04 B0 FD | 	call	#_Hg010b_4_spin2_setspritepos
217e8                 | ' cursorshape:=14
217e8     0B 00 00 FF 
217ec     C6 64 06 F1 | 	add	objptr, ##5830
217f0     32 1D 68 FC | 	wrlong	#14, objptr
217f4                 | ' cursorcolor:=color
217f4     04 64 86 F1 | 	sub	objptr, #4
217f8     32 A7 62 FC | 	wrlong	local01, objptr
217fc     0B 00 00 FF 
21800     C2 64 86 F1 | 	sub	objptr, ##5826
21804     E7 F0 03 F6 | 	mov	ptra, fp
21808     F2 00 A0 FD | 	call	#popregs_
2180c                 | _Hg010b_4_spin2_initcursor_ret
2180c     2D 00 64 FD | 	ret
21810                 | 
21810                 | ' 
21810                 | ' pub setcursorshape(shape) | i
21810                 | _Hg010b_4_spin2_setcursorshape
21810                 | ' 
21810                 | ' cursorshape:=shape
21810     0B 00 00 FF 
21814     C6 64 06 F1 | 	add	objptr, ##5830
21818     32 93 62 FC | 	wrlong	arg01, objptr
2181c                 | ' repeat i from 0 to (8*cursorshape)-1
2181c     00 80 06 F6 | 	mov	_var01, #0
21820     49 83 02 F6 | 	mov	_var02, arg01
21824     03 82 66 F0 | 	shl	_var02, #3
21828     01 82 86 F1 | 	sub	_var02, #1
2182c     00 82 56 F2 | 	cmps	_var02, #0 wc
21830     01 84 86 F6 | 	negc	_var03, #1
21834     42 87 02 F6 | 	mov	_var04, _var03
21838     42 83 02 F1 | 	add	_var02, _var03
2183c     0A 00 00 FF 
21840     90 64 86 F1 | 	sub	objptr, ##5264
21844     D7 0C 48 FB | 	callpa	#(@LR__2701-@LR__2700)>>2,fcache_load_ptr_
21848                 | LR__2700
21848                 | '   cursor[i]:=0
21848     40 85 02 F6 | 	mov	_var03, _var01
2184c     32 85 02 F1 | 	add	_var03, objptr
21850     42 01 48 FC | 	wrbyte	#0, _var03
21854     43 81 02 F1 | 	add	_var01, _var04
21858     41 81 0A F2 | 	cmp	_var01, _var02 wz
2185c     E8 FF 9F 5D |  if_ne	jmp	#LR__2700
21860                 | LR__2701
21860                 | ' repeat i from 8*cursorshape to 127
21860     0A 00 00 FF 
21864     90 64 06 F1 | 	add	objptr, ##5264
21868     32 87 02 FB | 	rdlong	_var04, objptr
2186c     43 81 02 F6 | 	mov	_var01, _var04
21870     03 80 66 F0 | 	shl	_var01, #3
21874     0B 00 00 FF 
21878     C6 64 86 F1 | 	sub	objptr, ##5830
2187c     03 86 66 F0 | 	shl	_var04, #3
21880     80 86 56 F2 | 	cmps	_var04, #128 wc
21884     01 84 A6 F6 | 	negnc	_var03, #1
21888     7F 82 06 F6 | 	mov	_var02, #127
2188c     42 83 02 F1 | 	add	_var02, _var03
21890     D7 1A 48 FB | 	callpa	#(@LR__2703-@LR__2702)>>2,fcache_load_ptr_
21894                 | LR__2702
21894                 | '   cursor[i]:=cursorcolor
21894     40 87 02 F6 | 	mov	_var04, _var01
21898     01 00 00 FF 
2189c     36 64 06 F1 | 	add	objptr, ##566
218a0     32 87 02 F1 | 	add	_var04, objptr
218a4     0A 00 00 FF 
218a8     8C 64 06 F1 | 	add	objptr, ##5260
218ac     32 93 02 FB | 	rdlong	arg01, objptr
218b0     0B 00 00 FF 
218b4     C2 64 86 F1 | 	sub	objptr, ##5826
218b8     43 93 42 FC | 	wrbyte	arg01, _var04
218bc     42 81 02 F1 | 	add	_var01, _var03
218c0     41 81 0A F2 | 	cmp	_var01, _var02 wz
218c4     CC FF 9F 5D |  if_ne	jmp	#LR__2702
218c8                 | LR__2703
218c8                 | _Hg010b_4_spin2_setcursorshape_ret
218c8     2D 00 64 FD | 	ret
218cc                 | 
218cc                 | ' 
218cc                 | ' pub setcursorcolor(color) | i
218cc                 | _Hg010b_4_spin2_setcursorcolor
218cc                 | ' 
218cc                 | ' cursorcolor:=color
218cc     0B 00 00 FF 
218d0     C2 64 06 F1 | 	add	objptr, ##5826
218d4     32 93 62 FC | 	wrlong	arg01, objptr
218d8                 | ' repeat i from 0 to (8*cursorshape)-1
218d8     00 92 06 F6 | 	mov	arg01, #0
218dc     04 64 06 F1 | 	add	objptr, #4
218e0     32 81 02 FB | 	rdlong	_var01, objptr
218e4     03 80 66 F0 | 	shl	_var01, #3
218e8     01 80 86 F1 | 	sub	_var01, #1
218ec     00 80 56 F2 | 	cmps	_var01, #0 wc
218f0     01 82 86 F6 | 	negc	_var02, #1
218f4     41 85 02 F6 | 	mov	_var03, _var02
218f8     41 81 02 F1 | 	add	_var01, _var02
218fc     0A 00 00 FF 
21900     90 64 86 F1 | 	sub	objptr, ##5264
21904     D7 0C 48 FB | 	callpa	#(@LR__2711-@LR__2710)>>2,fcache_load_ptr_
21908                 | LR__2710
21908                 | '   cursor[i]:=0
21908     49 83 02 F6 | 	mov	_var02, arg01
2190c     32 83 02 F1 | 	add	_var02, objptr
21910     41 01 48 FC | 	wrbyte	#0, _var02
21914     42 93 02 F1 | 	add	arg01, _var03
21918     40 93 0A F2 | 	cmp	arg01, _var01 wz
2191c     E8 FF 9F 5D |  if_ne	jmp	#LR__2710
21920                 | LR__2711
21920                 | ' repeat i from 8*cursorshape to 127
21920     0A 00 00 FF 
21924     90 64 06 F1 | 	add	objptr, ##5264
21928     32 85 02 FB | 	rdlong	_var03, objptr
2192c     42 93 02 F6 | 	mov	arg01, _var03
21930     03 92 66 F0 | 	shl	arg01, #3
21934     0B 00 00 FF 
21938     C6 64 86 F1 | 	sub	objptr, ##5830
2193c     03 84 66 F0 | 	shl	_var03, #3
21940     80 84 56 F2 | 	cmps	_var03, #128 wc
21944     01 82 A6 F6 | 	negnc	_var02, #1
21948     7F 80 06 F6 | 	mov	_var01, #127
2194c     41 81 02 F1 | 	add	_var01, _var02
21950     D7 1A 48 FB | 	callpa	#(@LR__2713-@LR__2712)>>2,fcache_load_ptr_
21954                 | LR__2712
21954                 | '   cursor[i]:=cursorcolor
21954     49 85 02 F6 | 	mov	_var03, arg01
21958     01 00 00 FF 
2195c     36 64 06 F1 | 	add	objptr, ##566
21960     32 85 02 F1 | 	add	_var03, objptr
21964     0A 00 00 FF 
21968     8C 64 06 F1 | 	add	objptr, ##5260
2196c     32 87 02 FB | 	rdlong	_var04, objptr
21970     0B 00 00 FF 
21974     C2 64 86 F1 | 	sub	objptr, ##5826
21978     42 87 42 FC | 	wrbyte	_var04, _var03
2197c     41 93 02 F1 | 	add	arg01, _var02
21980     40 93 0A F2 | 	cmp	arg01, _var01 wz
21984     CC FF 9F 5D |  if_ne	jmp	#LR__2712
21988                 | LR__2713
21988                 | _Hg010b_4_spin2_setcursorcolor_ret
21988     2D 00 64 FD | 	ret
2198c                 | 
2198c                 | '   
2198c                 | '   
2198c                 | '   
2198c                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
2198c                 | _Hg010b_4_spin2_setmode
2198c     02 CA 05 F6 | 	mov	COUNT_, #2
21990     E8 00 A0 FD | 	call	#pushregs_
21994                 | ' 
21994                 | ' 
21994                 | ' dl_ptr:=@emptydl[0]
21994     01 00 00 FF 
21998     1D 64 06 F1 | 	add	objptr, ##541
2199c     32 9B 02 F6 | 	mov	arg05, objptr
219a0     FD 65 86 F1 | 	sub	objptr, #509
219a4     32 9B 62 FC | 	wrlong	arg05, objptr
219a8                 | ' 
219a8                 | ' if cog>0 
219a8     10 64 06 F1 | 	add	objptr, #16
219ac     32 9B 02 FB | 	rdlong	arg05, objptr
219b0     30 64 86 F1 | 	sub	objptr, #48
219b4     01 9A 56 F2 | 	cmps	arg05, #1 wc
219b8                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
219b8     01 92 06 36 |  if_ae	mov	arg01, #1
219bc     58 10 B0 3D |  if_ae	call	#_Hg010b_4_spin2_waitvbl
219c0                 | ' xres:=1024
219c0     01 00 00 FF 
219c4     26 64 06 F1 | 	add	objptr, ##550
219c8     02 00 80 FF 
219cc     32 01 68 FC | 	wrlong	##1024, objptr
219d0                 | ' yres:=600
219d0     04 64 06 F1 | 	add	objptr, #4
219d4     01 00 80 FF 
219d8     32 B1 68 FC | 	wrlong	##600, objptr
219dc                 | ' ppl:=(timings[3])
219dc     1C 00 00 FF 
219e0     4C 68 06 F1 | 	add	ptr__Hg010b_4_spin2_dat__, ##14412
219e4     34 9B 02 FB | 	rdlong	arg05, ptr__Hg010b_4_spin2_dat__
219e8     51 65 86 F1 | 	sub	objptr, #337
219ec     32 9B 62 FC | 	wrlong	arg05, objptr
219f0                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
219f0     10 68 06 F1 | 	add	ptr__Hg010b_4_spin2_dat__, #16
219f4     34 A7 02 FB | 	rdlong	local01, ptr__Hg010b_4_spin2_dat__
219f8     01 A6 66 F0 | 	shl	local01, #1
219fc     80 64 86 F1 | 	sub	objptr, #128
21a00     32 A7 62 FC | 	wrlong	local01, objptr
21a04                 | ' cpl1:=cpl '' todo remove
21a04     04 64 06 F1 | 	add	objptr, #4
21a08     32 A7 62 FC | 	wrlong	local01, objptr
21a0c                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
21a0c     04 00 00 FF 
21a10     1C 68 86 F1 | 	sub	ptr__Hg010b_4_spin2_dat__, ##2076
21a14     41 64 86 F1 | 	sub	objptr, #65
21a18     32 69 62 FC | 	wrlong	ptr__Hg010b_4_spin2_dat__, objptr
21a1c                 | ' repeat i from 0 to 3
21a1c     00 A8 06 F6 | 	mov	local02, #0
21a20     04 00 00 FF 
21a24     00 68 06 F1 | 	add	ptr__Hg010b_4_spin2_dat__, ##2048
21a28     08 64 06 F1 | 	add	objptr, #8
21a2c     D7 20 48 FB | 	callpa	#(@LR__2721-@LR__2720)>>2,fcache_load_ptr_
21a30                 | LR__2720
21a30                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
21a30     54 A7 02 F6 | 	mov	local01, local02
21a34     02 A6 66 F0 | 	shl	local01, #2
21a38     34 A7 02 F1 | 	add	local01, ptr__Hg010b_4_spin2_dat__
21a3c     32 9B 02 FB | 	rdlong	arg05, objptr
21a40     11 9A 66 F0 | 	shl	arg05, #17
21a44     53 A7 02 FB | 	rdlong	local01, local01
21a48     4D A7 02 F1 | 	add	local01, arg05
21a4c     80 40 38 FF 
21a50     00 A6 06 F1 | 	add	local01, ##1887502336
21a54     54 9B 02 F6 | 	mov	arg05, local02
21a58     02 9A 66 F0 | 	shl	arg05, #2
21a5c     34 9B 02 F1 | 	add	arg05, ptr__Hg010b_4_spin2_dat__
21a60     4D A7 62 FC | 	wrlong	local01, arg05
21a64     01 A8 06 F1 | 	add	local02, #1
21a68     04 A8 56 F2 | 	cmps	local02, #4 wc
21a6c     C0 FF 9F CD |  if_b	jmp	#LR__2720
21a70                 | LR__2721
21a70     24 64 86 F1 | 	sub	objptr, #36
21a74     1C 00 00 FF 
21a78     40 68 86 F1 | 	sub	ptr__Hg010b_4_spin2_dat__, ##14400
21a7c                 | ' 'clkfreq:=timings[9]					    	' set the clock frequency for the mode
21a7c                 | ' 'hubset(timings[10])
21a7c                 | ' waitms(1)                                                   	' wait for stabilization
21a7c     01 92 06 F6 | 	mov	arg01, #1
21a80     48 32 B0 FD | 	call	#__system___waitms
21a84     1C 00 00 FF 
21a88     6C 68 06 F1 | 	add	ptr__Hg010b_4_spin2_dat__, ##14444
21a8c     34 A9 02 FB | 	rdlong	local02, ptr__Hg010b_4_spin2_dat__
21a90     61 64 06 F1 | 	add	objptr, #97
21a94     32 A9 62 FC | 	wrlong	local02, objptr
21a98     54 A7 52 F6 | 	abs	local01, local02 wc
21a9c     04 A6 46 F0 | 	shr	local01, #4
21aa0     53 A7 82 F6 | 	negc	local01, local01
21aa4     9C 64 06 F1 | 	add	objptr, #156
21aa8     32 A7 62 FC | 	wrlong	local01, objptr
21aac     A4 64 86 F1 | 	sub	objptr, #164
21ab0     32 A9 02 FB | 	rdlong	local02, objptr
21ab4     08 64 06 F1 | 	add	objptr, #8
21ab8     32 A7 02 FB | 	rdlong	local01, objptr
21abc     53 A9 02 FD | 	qmul	local02, local01
21ac0                 | ' lines:=timings[11]
21ac0                 | ' t_lines:=lines/16
21ac0                 | ' buflen:=cpl*lines						' framebuffer length in longs
21ac0     29 64 86 F1 | 	sub	objptr, #41
21ac4     17 A6 C6 F9 | 	decod	local01, #23
21ac8     10 68 86 F1 | 	sub	ptr__Hg010b_4_spin2_dat__, #16
21acc     18 A8 62 FD | 	getqx	local02
21ad0     32 A9 62 FC | 	wrlong	local02, objptr
21ad4     38 64 86 F1 | 	sub	objptr, #56
21ad8     02 A8 66 F0 | 	shl	local02, #2
21adc     54 A7 82 F1 | 	sub	local01, local02
21ae0     32 A7 62 FC | 	wrlong	local01, objptr
21ae4     FD 64 06 F1 | 	add	objptr, #253
21ae8     32 A9 02 FB | 	rdlong	local02, objptr
21aec     34 9B 02 FB | 	rdlong	arg05, ptr__Hg010b_4_spin2_dat__
21af0     4D A9 02 FD | 	qmul	local02, arg05
21af4                 | ' buf_ptr:=$800000-4*buflen                          	     	' todo: get a PSRAM real himem 
21af4                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
21af4     F9 64 86 F1 | 	sub	objptr, #249
21af8                 | ' mode_ptr:=@timings						' set pointers to timings
21af8     1C 68 86 F1 | 	sub	ptr__Hg010b_4_spin2_dat__, #28
21afc                 | ' graphmode:=1024+512+192+48							' det global variable
21afc                 | ' makedl(graphmode)							' make a DL for the mode
21afc     03 00 00 FF 
21b00     F0 92 06 F6 | 	mov	arg01, ##1776
21b04     18 A8 62 FD | 	getqx	local02
21b08     54 A7 82 F1 | 	sub	local01, local02
21b0c     32 A7 62 FC | 	wrlong	local01, objptr
21b10     14 64 06 F1 | 	add	objptr, #20
21b14     32 69 62 FC | 	wrlong	ptr__Hg010b_4_spin2_dat__, objptr
21b18     79 64 06 F1 | 	add	objptr, #121
21b1c     03 00 80 FF 
21b20     32 E1 69 FC | 	wrlong	##1776, objptr
21b24     91 64 86 F1 | 	sub	objptr, #145
21b28     1C 00 00 FF 
21b2c     40 68 86 F1 | 	sub	ptr__Hg010b_4_spin2_dat__, ##14400
21b30     E0 00 B0 FD | 	call	#_Hg010b_4_spin2_makedl
21b34                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
21b34     32 A7 02 FB | 	rdlong	local01, objptr
21b38     DD 64 06 F1 | 	add	objptr, #221
21b3c     32 A7 62 FC | 	wrlong	local01, objptr
21b40                 | ' s_font_ptr:=font_ptr
21b40     D5 64 86 F1 | 	sub	objptr, #213
21b44     32 A7 02 FB | 	rdlong	local01, objptr
21b48     D9 64 06 F1 | 	add	objptr, #217
21b4c     32 A7 62 FC | 	wrlong	local01, objptr
21b50                 | ' s_lines:=lines
21b50     80 64 86 F1 | 	sub	objptr, #128
21b54     32 A7 02 FB | 	rdlong	local01, objptr
21b58     84 64 06 F1 | 	add	objptr, #132
21b5c     32 A7 62 FC | 	wrlong	local01, objptr
21b60                 | ' s_buflen:=buflen
21b60     AD 64 86 F1 | 	sub	objptr, #173
21b64     32 A7 02 FB | 	rdlong	local01, objptr
21b68     B5 64 06 F1 | 	add	objptr, #181
21b6c     32 A7 62 FC | 	wrlong	local01, objptr
21b70                 | ' s_cpl:=cpl
21b70     94 64 86 F1 | 	sub	objptr, #148
21b74     32 A7 02 FB | 	rdlong	local01, objptr
21b78     90 64 06 F1 | 	add	objptr, #144
21b7c     32 A7 62 FC | 	wrlong	local01, objptr
21b80                 | ' s_cpl1:=cpl
21b80     90 64 86 F1 | 	sub	objptr, #144
21b84     32 A7 02 FB | 	rdlong	local01, objptr
21b88     98 64 06 F1 | 	add	objptr, #152
21b8c     32 A7 62 FC | 	wrlong	local01, objptr
21b90                 | ' st_lines:=t_lines
21b90     0C 64 06 F1 | 	add	objptr, #12
21b94     32 A7 02 FB | 	rdlong	local01, objptr
21b98     04 64 06 F1 | 	add	objptr, #4
21b9c     32 A7 62 FC | 	wrlong	local01, objptr
21ba0                 | ' ppl:=ppl/xzoom  
21ba0     28 64 86 F1 | 	sub	objptr, #40
21ba4     32 0F 03 FB | 	rdlong	muldiva_, objptr
21ba8     2C 64 06 F1 | 	add	objptr, #44
21bac     32 11 03 FB | 	rdlong	muldivb_, objptr
21bb0     05 65 86 F1 | 	sub	objptr, #261
21bb4     FA 00 A0 FD | 	call	#divide_
21bb8     D9 64 06 F1 | 	add	objptr, #217
21bbc     32 11 63 FC | 	wrlong	muldivb_, objptr
21bc0                 | ' s_ppl:=ppl
21bc0     1C 64 06 F1 | 	add	objptr, #28
21bc4     32 11 63 FC | 	wrlong	muldivb_, objptr
21bc8     F5 64 86 F1 | 	sub	objptr, #245
21bcc                 | ' waitms(20)							' wait 
21bcc     14 92 06 F6 | 	mov	arg01, #20
21bd0     F8 30 B0 FD | 	call	#__system___waitms
21bd4                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
21bd4     04 64 06 F1 | 	add	objptr, #4
21bd8     32 93 02 FB | 	rdlong	arg01, objptr
21bdc     04 64 86 F1 | 	sub	objptr, #4
21be0     32 97 02 FB | 	rdlong	arg03, objptr
21be4     49 97 82 F1 | 	sub	arg03, arg01
21be8     20 94 06 F6 | 	mov	arg02, #32
21bec     00 98 06 F6 | 	mov	arg04, #0
21bf0     01 9A 06 F6 | 	mov	arg05, #1
21bf4     0B 00 00 FF 
21bf8     CC 64 06 F1 | 	add	objptr, ##5836
21bfc     9C 1F B0 FD | 	call	#_psram4_spin2_fill
21c00     0B 00 00 FF 
21c04     CC 64 86 F1 | 	sub	objptr, ##5836
21c08     E7 F0 03 F6 | 	mov	ptra, fp
21c0c     F2 00 A0 FD | 	call	#popregs_
21c10                 | _Hg010b_4_spin2_setmode_ret
21c10     2D 00 64 FD | 	ret
21c14                 | 
21c14                 | ' 
21c14                 | ' '****************************************************************************************************************
21c14                 | ' '                                                                                                             	*
21c14                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
21c14                 | ' '                                                                                                             	*
21c14                 | ' '****************************************************************************************************************
21c14                 | ' 
21c14                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
21c14                 | _Hg010b_4_spin2_makedl
21c14                 | ' 
21c14                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
21c14                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
21c14                 | ' repeat i from 0 to 11                                                           ' clear DL
21c14     00 80 06 F6 | 	mov	_var01, #0
21c18     ED 65 06 F1 | 	add	objptr, #493
21c1c     D7 0E 48 FB | 	callpa	#(@LR__2731-@LR__2730)>>2,fcache_load_ptr_
21c20                 | LR__2730
21c20                 | '   displaylist[i]:=0 
21c20     40 83 02 F6 | 	mov	_var02, _var01
21c24     02 82 66 F0 | 	shl	_var02, #2
21c28     32 83 02 F1 | 	add	_var02, objptr
21c2c     41 01 68 FC | 	wrlong	#0, _var02
21c30     01 80 06 F1 | 	add	_var01, #1
21c34     0C 80 56 F2 | 	cmps	_var01, #12 wc
21c38     E4 FF 9F CD |  if_b	jmp	#LR__2730
21c3c                 | LR__2731
21c3c                 | '                         ' 
21c3c                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
21c3c     8C 65 86 F1 | 	sub	objptr, #396
21c40     32 83 02 FB | 	rdlong	_var02, objptr
21c44     14 82 66 F0 | 	shl	_var02, #20
21c48     01 82 06 F1 | 	add	_var02, #1
21c4c     04 64 86 F1 | 	sub	objptr, #4
21c50     32 81 02 FB | 	rdlong	_var01, objptr
21c54     06 80 66 F0 | 	shl	_var01, #6
21c58     40 83 02 F1 | 	add	_var02, _var01
21c5c     90 65 06 F1 | 	add	objptr, #400
21c60     32 83 62 FC | 	wrlong	_var02, objptr
21c64     ED 65 86 F1 | 	sub	objptr, #493
21c68                 | ' displaylist[1]:=buf_ptr<<4+%10  
21c68     32 83 02 FB | 	rdlong	_var02, objptr
21c6c     04 82 66 F0 | 	shl	_var02, #4
21c70     02 82 06 F1 | 	add	_var02, #2
21c74     F1 65 06 F1 | 	add	objptr, #497
21c78     32 83 62 FC | 	wrlong	_var02, objptr
21c7c                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
21c7c     04 64 86 F1 | 	sub	objptr, #4
21c80     32 83 02 F6 | 	mov	_var02, objptr
21c84     CD 65 86 F1 | 	sub	objptr, #461
21c88     32 83 62 FC | 	wrlong	_var02, objptr
21c8c     20 64 86 F1 | 	sub	objptr, #32
21c90                 | _Hg010b_4_spin2_makedl_ret
21c90     2D 00 64 FD | 	ret
21c94                 | 
21c94                 | ' 
21c94                 | ' 
21c94                 | ' '****************************************************************************************************************
21c94                 | ' '                                                                        					*
21c94                 | ' '  Graphic primitives                                                    					*
21c94                 | ' '                                                                        					*
21c94                 | ' '****************************************************************************************************************
21c94                 | ' 
21c94                 | ' pub setspriteptr(num,ptr)
21c94                 | _Hg010b_4_spin2_setspriteptr
21c94                 | ' long[@spr1ptr+12*num]:=ptr
21c94     32 81 02 F6 | 	mov	_var01, objptr
21c98     11 81 06 F1 | 	add	_var01, #273
21c9c     49 83 02 F6 | 	mov	_var02, arg01
21ca0     01 82 66 F0 | 	shl	_var02, #1
21ca4     49 83 02 F1 | 	add	_var02, arg01
21ca8     02 82 66 F0 | 	shl	_var02, #2
21cac     41 81 02 F1 | 	add	_var01, _var02
21cb0     40 95 62 FC | 	wrlong	arg02, _var01
21cb4                 | _Hg010b_4_spin2_setspriteptr_ret
21cb4     2D 00 64 FD | 	ret
21cb8                 | 
21cb8                 | ' 
21cb8                 | ' pub setspritepos(num,x,y)
21cb8                 | _Hg010b_4_spin2_setspritepos
21cb8                 | ' if y>601
21cb8     01 00 00 FF 
21cbc     5A 96 56 F2 | 	cmps	arg03, ##602 wc
21cc0                 | '   y:=601
21cc0     01 00 00 3F 
21cc4     59 96 06 36 |  if_ae	mov	arg03, ##601
21cc8                 | ' if x>1024
21cc8     02 00 00 FF 
21ccc     01 94 56 F2 | 	cmps	arg02, ##1025 wc
21cd0                 | '   x:=1024
21cd0     0A 94 C6 39 |  if_ae	decod	arg02, #10
21cd4                 | ' word[@spr1ptr+12*num+4]:=x
21cd4     11 65 06 F1 | 	add	objptr, #273
21cd8     32 81 02 F6 | 	mov	_var01, objptr
21cdc     49 83 02 F6 | 	mov	_var02, arg01
21ce0     01 82 66 F0 | 	shl	_var02, #1
21ce4     49 83 02 F1 | 	add	_var02, arg01
21ce8     02 82 66 F0 | 	shl	_var02, #2
21cec     41 81 02 F1 | 	add	_var01, _var02
21cf0     04 80 06 F1 | 	add	_var01, #4
21cf4     40 95 52 FC | 	wrword	arg02, _var01
21cf8                 | ' word[@spr1ptr+12*num+6]:=y
21cf8     32 81 02 F6 | 	mov	_var01, objptr
21cfc     49 83 02 F6 | 	mov	_var02, arg01
21d00     01 82 66 F0 | 	shl	_var02, #1
21d04     49 83 02 F1 | 	add	_var02, arg01
21d08     02 82 66 F0 | 	shl	_var02, #2
21d0c     41 81 02 F1 | 	add	_var01, _var02
21d10     06 80 06 F1 | 	add	_var01, #6
21d14     40 97 52 FC | 	wrword	arg03, _var01
21d18     11 65 86 F1 | 	sub	objptr, #273
21d1c                 | _Hg010b_4_spin2_setspritepos_ret
21d1c     2D 00 64 FD | 	ret
21d20                 | 
21d20                 | ' 
21d20                 | ' pub setspritesize(num,w,h)
21d20                 | _Hg010b_4_spin2_setspritesize
21d20                 | ' word[@spr1ptr+12*num+8]:=w
21d20     11 65 06 F1 | 	add	objptr, #273
21d24     32 81 02 F6 | 	mov	_var01, objptr
21d28     49 83 02 F6 | 	mov	_var02, arg01
21d2c     01 82 66 F0 | 	shl	_var02, #1
21d30     49 83 02 F1 | 	add	_var02, arg01
21d34     02 82 66 F0 | 	shl	_var02, #2
21d38     41 81 02 F1 | 	add	_var01, _var02
21d3c     08 80 06 F1 | 	add	_var01, #8
21d40     40 95 52 FC | 	wrword	arg02, _var01
21d44                 | ' word[@spr1ptr+12*num+10]:=h
21d44     32 81 02 F6 | 	mov	_var01, objptr
21d48     49 83 02 F6 | 	mov	_var02, arg01
21d4c     01 82 66 F0 | 	shl	_var02, #1
21d50     49 83 02 F1 | 	add	_var02, arg01
21d54     02 82 66 F0 | 	shl	_var02, #2
21d58     41 81 02 F1 | 	add	_var01, _var02
21d5c     0A 80 06 F1 | 	add	_var01, #10
21d60     40 97 52 FC | 	wrword	arg03, _var01
21d64     11 65 86 F1 | 	sub	objptr, #273
21d68                 | _Hg010b_4_spin2_setspritesize_ret
21d68     2D 00 64 FD | 	ret
21d6c                 | 
21d6c                 | ' 
21d6c                 | ' 
21d6c                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
21d6c                 | ' 
21d6c                 | ' 
21d6c                 | ' pub putpixel(x,y,c)
21d6c                 | _Hg010b_4_spin2_putpixel
21d6c     04 CA 05 F6 | 	mov	COUNT_, #4
21d70     E8 00 A0 FD | 	call	#pushregs_
21d74     49 A7 02 F6 | 	mov	local01, arg01
21d78                 | ' 
21d78                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
21d78     00 A8 06 F6 | 	mov	local02, #0
21d7c     00 A6 56 F2 | 	cmps	local01, #0 wc
21d80     01 A8 66 36 |  if_ae	neg	local02, #1
21d84     E9 64 06 F1 | 	add	objptr, #233
21d88     32 9B 02 FB | 	rdlong	arg05, objptr
21d8c     02 9A 66 F0 | 	shl	arg05, #2
21d90     4D A7 52 F2 | 	cmps	local01, arg05 wc
21d94     55 AB A2 F1 | 	subx	local03, local03
21d98     55 A9 02 F5 | 	and	local02, local03
21d9c     00 AA 06 F6 | 	mov	local03, #0
21da0     00 94 56 F2 | 	cmps	arg02, #0 wc
21da4     01 AA 66 36 |  if_ae	neg	local03, #1
21da8     55 A9 02 F5 | 	and	local02, local03
21dac     04 64 86 F1 | 	sub	objptr, #4
21db0     32 AB 02 FB | 	rdlong	local03, objptr
21db4     E5 64 86 F1 | 	sub	objptr, #229
21db8     55 95 52 F2 | 	cmps	arg02, local03 wc
21dbc     56 AD A2 F1 | 	subx	local04, local04
21dc0     56 A9 CA F7 | 	test	local02, local04 wz
21dc4     48 00 90 AD |  if_e	jmp	#LR__2740
21dc8     DD 64 06 F1 | 	add	objptr, #221
21dcc     32 93 02 FB | 	rdlong	arg01, objptr
21dd0     14 64 06 F1 | 	add	objptr, #20
21dd4     32 AD 02 FB | 	rdlong	local04, objptr
21dd8     02 AC 66 F0 | 	shl	local04, #2
21ddc     4A AD 02 FD | 	qmul	local04, arg02
21de0                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
21de0     4B 95 02 F6 | 	mov	arg02, arg03
21de4     01 96 06 F6 | 	mov	arg03, #1
21de8     00 98 06 F6 | 	mov	arg04, #0
21dec     01 9A 06 F6 | 	mov	arg05, #1
21df0     0A 00 00 FF 
21df4     DB 65 06 F1 | 	add	objptr, ##5595
21df8     18 AC 62 FD | 	getqx	local04
21dfc     53 AD 02 F1 | 	add	local04, local01
21e00     56 93 02 F1 | 	add	arg01, local04
21e04     94 1D B0 FD | 	call	#_psram4_spin2_fill
21e08     0B 00 00 FF 
21e0c     CC 64 86 F1 | 	sub	objptr, ##5836
21e10                 | LR__2740
21e10     E7 F0 03 F6 | 	mov	ptra, fp
21e14     F2 00 A0 FD | 	call	#popregs_
21e18                 | _Hg010b_4_spin2_putpixel_ret
21e18     2D 00 64 FD | 	ret
21e1c                 | 
21e1c                 | ' 
21e1c                 | ' pub putpixel2(x,y,c)
21e1c                 | _Hg010b_4_spin2_putpixel2
21e1c     02 CA 05 F6 | 	mov	COUNT_, #2
21e20     E8 00 A0 FD | 	call	#pushregs_
21e24     DD 64 06 F1 | 	add	objptr, #221
21e28     32 A7 02 FB | 	rdlong	local01, objptr
21e2c     14 64 06 F1 | 	add	objptr, #20
21e30     32 9B 02 FB | 	rdlong	arg05, objptr
21e34     02 9A 66 F0 | 	shl	arg05, #2
21e38     4A 9B 02 FD | 	qmul	arg05, arg02
21e3c                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
21e3c     4B 95 02 F6 | 	mov	arg02, arg03
21e40     01 96 06 F6 | 	mov	arg03, #1
21e44     00 98 06 F6 | 	mov	arg04, #0
21e48     01 9A 06 F6 | 	mov	arg05, #1
21e4c     0A 00 00 FF 
21e50     DB 65 06 F1 | 	add	objptr, ##5595
21e54     18 A8 62 FD | 	getqx	local02
21e58     49 A9 02 F1 | 	add	local02, arg01
21e5c     54 A7 02 F1 | 	add	local01, local02
21e60     53 93 02 F6 | 	mov	arg01, local01
21e64     34 1D B0 FD | 	call	#_psram4_spin2_fill
21e68     0B 00 00 FF 
21e6c     CC 64 86 F1 | 	sub	objptr, ##5836
21e70     E7 F0 03 F6 | 	mov	ptra, fp
21e74     F2 00 A0 FD | 	call	#popregs_
21e78                 | _Hg010b_4_spin2_putpixel2_ret
21e78     2D 00 64 FD | 	ret
21e7c                 | 
21e7c                 | ' 
21e7c                 | ' pub getpixel2(x,y): c 
21e7c                 | _Hg010b_4_spin2_getpixel2
21e7c     02 CA 05 F6 | 	mov	COUNT_, #2
21e80     E8 00 A0 FD | 	call	#pushregs_
21e84     0C F0 07 F1 | 	add	ptra, #12
21e88     04 CE 05 F1 | 	add	fp, #4
21e8c     E7 92 62 FC | 	wrlong	arg01, fp
21e90     04 CE 05 F1 | 	add	fp, #4
21e94     E7 94 62 FC | 	wrlong	arg02, fp
21e98     08 CE 85 F1 | 	sub	fp, #8
21e9c     E7 00 68 FC | 	wrlong	#0, fp
21ea0     E7 92 02 F6 | 	mov	arg01, fp
21ea4     DD 64 06 F1 | 	add	objptr, #221
21ea8     32 95 02 FB | 	rdlong	arg02, objptr
21eac     14 64 06 F1 | 	add	objptr, #20
21eb0     32 97 02 FB | 	rdlong	arg03, objptr
21eb4     02 96 66 F0 | 	shl	arg03, #2
21eb8     08 CE 05 F1 | 	add	fp, #8
21ebc     E7 7A 02 FB | 	rdlong	result1, fp
21ec0     3D 97 02 FD | 	qmul	arg03, result1
21ec4                 | ' 
21ec4                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
21ec4     04 CE 85 F1 | 	sub	fp, #4
21ec8     E7 A6 02 FB | 	rdlong	local01, fp
21ecc     04 CE 85 F1 | 	sub	fp, #4
21ed0     01 96 06 F6 | 	mov	arg03, #1
21ed4     0A 00 00 FF 
21ed8     DB 65 06 F1 | 	add	objptr, ##5595
21edc     18 A8 62 FD | 	getqx	local02
21ee0     53 A9 02 F1 | 	add	local02, local01
21ee4     54 95 02 F1 | 	add	arg02, local02
21ee8     78 1B B0 FD | 	call	#_psram4_spin2_read1
21eec     0B 00 00 FF 
21ef0     CC 64 86 F1 | 	sub	objptr, ##5836
21ef4                 | ' return c
21ef4     E7 7A 02 FB | 	rdlong	result1, fp
21ef8     E7 F0 03 F6 | 	mov	ptra, fp
21efc     F2 00 A0 FD | 	call	#popregs_
21f00                 | _Hg010b_4_spin2_getpixel2_ret
21f00     2D 00 64 FD | 	ret
21f04                 | 
21f04                 | '   
21f04                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
21f04                 | ' 
21f04                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
21f04                 | _Hg010b_4_spin2_fastline
21f04     02 CA 05 F6 | 	mov	COUNT_, #2
21f08     E8 00 A0 FD | 	call	#pushregs_
21f0c     49 A7 02 F6 | 	mov	local01, arg01
21f10     4A A9 02 F6 | 	mov	local02, arg02
21f14                 | ' 
21f14                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
21f14     00 96 56 F2 | 	cmps	arg03, #0 wc
21f18     F4 00 90 CD |  if_b	jmp	#LR__2750
21f1c     01 00 00 FF 
21f20     2A 64 06 F1 | 	add	objptr, ##554
21f24     32 9B 02 FB | 	rdlong	arg05, objptr
21f28     01 00 00 FF 
21f2c     2A 64 86 F1 | 	sub	objptr, ##554
21f30     4D 97 52 F2 | 	cmps	arg03, arg05 wc
21f34     D8 00 90 3D |  if_ae	jmp	#LR__2750
21f38     00 A6 56 F2 | 	cmps	local01, #0 wc
21f3c     00 A8 56 C2 |  if_b	cmps	local02, #0 wc
21f40     CC 00 90 CD |  if_b	jmp	#LR__2750
21f44     01 00 00 FF 
21f48     26 64 06 F1 | 	add	objptr, ##550
21f4c     32 9B 02 FB | 	rdlong	arg05, objptr
21f50     01 00 00 FF 
21f54     26 64 86 F1 | 	sub	objptr, ##550
21f58     4D A7 5A F2 | 	cmps	local01, arg05 wcz
21f5c     01 00 00 1F 
21f60     26 64 06 11 |  if_a	add	objptr, ##550
21f64     32 93 02 1B |  if_a	rdlong	arg01, objptr
21f68     01 00 00 1F 
21f6c     26 64 86 11 |  if_a	sub	objptr, ##550
21f70     49 A9 5A 12 |  if_a	cmps	local02, arg01 wcz
21f74                 | '   return
21f74     98 00 90 1D |  if_a	jmp	#LR__2750
21f78     54 A7 5A F2 | 	cmps	local01, local02 wcz
21f7c     53 9B 02 16 |  if_a	mov	arg05, local01
21f80     54 A7 02 16 |  if_a	mov	local01, local02
21f84     4D A9 02 16 |  if_a	mov	local02, arg05
21f88     00 A6 56 F2 | 	cmps	local01, #0 wc
21f8c     00 A6 06 C6 |  if_b	mov	local01, #0
21f90     01 00 00 FF 
21f94     26 64 06 F1 | 	add	objptr, ##550
21f98     32 9B 02 FB | 	rdlong	arg05, objptr
21f9c     01 00 00 FF 
21fa0     26 64 86 F1 | 	sub	objptr, ##550
21fa4     4D A9 52 F2 | 	cmps	local02, arg05 wc
21fa8     01 00 00 3F 
21fac     26 64 06 31 |  if_ae	add	objptr, ##550
21fb0     32 A9 02 3B |  if_ae	rdlong	local02, objptr
21fb4     01 00 00 3F 
21fb8     26 64 86 31 |  if_ae	sub	objptr, ##550
21fbc     DD 64 06 F1 | 	add	objptr, #221
21fc0     32 93 02 FB | 	rdlong	arg01, objptr
21fc4     14 64 06 F1 | 	add	objptr, #20
21fc8     32 9B 02 FB | 	rdlong	arg05, objptr
21fcc     02 9A 66 F0 | 	shl	arg05, #2
21fd0     4B 9B 02 FD | 	qmul	arg05, arg03
21fd4                 | ' if x1>x2
21fd4                 | '   x1,x2:=x2,x1
21fd4                 | ' if x1<0 
21fd4                 | '   x1:=0
21fd4                 | ' if x2>=xres
21fd4                 | '   x2:=xres-1  
21fd4     01 A8 86 31 |  if_ae	sub	local02, #1
21fd8                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
21fd8     01 96 06 F6 | 	mov	arg03, #1
21fdc     54 97 02 F1 | 	add	arg03, local02
21fe0     53 97 82 F1 | 	sub	arg03, local01
21fe4     4C 95 02 F6 | 	mov	arg02, arg04
21fe8     00 98 06 F6 | 	mov	arg04, #0
21fec     01 9A 06 F6 | 	mov	arg05, #1
21ff0     0A 00 00 FF 
21ff4     DB 65 06 F1 | 	add	objptr, ##5595
21ff8     18 A8 62 FD | 	getqx	local02
21ffc     53 A9 02 F1 | 	add	local02, local01
22000     54 93 02 F1 | 	add	arg01, local02
22004     94 1B B0 FD | 	call	#_psram4_spin2_fill
22008     0B 00 00 FF 
2200c     CC 64 86 F1 | 	sub	objptr, ##5836
22010                 | LR__2750
22010     E7 F0 03 F6 | 	mov	ptra, fp
22014     F2 00 A0 FD | 	call	#popregs_
22018                 | _Hg010b_4_spin2_fastline_ret
22018     2D 00 64 FD | 	ret
2201c                 | 
2201c                 | ' 
2201c                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
2201c                 | _Hg010b_4_spin2_draw
2201c     0E CA 05 F6 | 	mov	COUNT_, #14
22020     E8 00 A0 FD | 	call	#pushregs_
22024     49 A7 02 F6 | 	mov	local01, arg01
22028     4A A9 02 F6 | 	mov	local02, arg02
2202c     4B AB 02 F6 | 	mov	local03, arg03
22030     4C AD 02 F6 | 	mov	local04, arg04
22034     4D AF 02 F6 | 	mov	local05, arg05
22038                 | ' 
22038                 | ' if (y1==y2)
22038     56 A9 0A F2 | 	cmp	local02, local04 wz
2203c     18 00 90 5D |  if_ne	jmp	#LR__2760
22040                 | '   fastline(x1,x2,y1,c)
22040     53 93 02 F6 | 	mov	arg01, local01
22044     55 95 02 F6 | 	mov	arg02, local03
22048     54 97 02 F6 | 	mov	arg03, local02
2204c     57 99 02 F6 | 	mov	arg04, local05
22050     B0 FE BF FD | 	call	#_Hg010b_4_spin2_fastline
22054     F8 00 90 FD | 	jmp	#LR__2766
22058                 | LR__2760
22058                 | ' else  
22058                 | '   x:=x1
22058     53 B1 02 F6 | 	mov	local06, local01
2205c                 | '   y:=y1
2205c     54 B3 02 F6 | 	mov	local07, local02
22060                 | ' 
22060                 | '   if (x1<x2) 
22060     55 A7 52 F2 | 	cmps	local01, local03 wc
22064                 | '     xi:=1
22064     01 B4 06 C6 |  if_b	mov	local08, #1
22068                 | '     dx:=x2-x1
22068     55 B7 02 C6 |  if_b	mov	local09, local03
2206c     53 B7 82 C1 |  if_b	sub	local09, local01
22070                 | '   else
22070                 | '     xi:=-1
22070     01 B4 66 36 |  if_ae	neg	local08, #1
22074                 | '     dx:=x1-x2
22074     55 A7 82 31 |  if_ae	sub	local01, local03
22078     53 B7 02 36 |  if_ae	mov	local09, local01
2207c                 | '   
2207c                 | '   if (y1<y2) 
2207c     56 A9 52 F2 | 	cmps	local02, local04 wc
22080                 | '     yi:=1
22080     01 B8 06 C6 |  if_b	mov	local10, #1
22084                 | '     dy:=y2-y1
22084     56 BB 02 C6 |  if_b	mov	local11, local04
22088     54 BB 82 C1 |  if_b	sub	local11, local02
2208c                 | '   else
2208c                 | '     yi:=-1
2208c     01 B8 66 36 |  if_ae	neg	local10, #1
22090                 | '     dy:=y1-y2
22090     56 A9 82 31 |  if_ae	sub	local02, local04
22094     54 BB 02 36 |  if_ae	mov	local11, local02
22098                 | ' 
22098                 | '   putpixel(x,y,c)
22098     57 97 02 F6 | 	mov	arg03, local05
2209c     58 93 02 F6 | 	mov	arg01, local06
220a0     59 95 02 F6 | 	mov	arg02, local07
220a4     C4 FC BF FD | 	call	#_Hg010b_4_spin2_putpixel
220a8                 | ' 
220a8                 | '   if (dx>dy)
220a8     5D B7 5A F2 | 	cmps	local09, local11 wcz
220ac     50 00 90 ED |  if_be	jmp	#LR__2762
220b0                 | '     ai:=(dy-dx)*2
220b0     5D BD 02 F6 | 	mov	local12, local11
220b4     5B BD 82 F1 | 	sub	local12, local09
220b8     01 BC 66 F0 | 	shl	local12, #1
220bc                 | '     bi:=dy*2
220bc     01 BA 66 F0 | 	shl	local11, #1
220c0     5D BF 02 F6 | 	mov	local13, local11
220c4                 | '     d:= bi-dx
220c4     5F C1 02 F6 | 	mov	local14, local13
220c8     5B C1 82 F1 | 	sub	local14, local09
220cc                 | '     repeat while (x<>x2) 
220cc                 | LR__2761
220cc     55 B1 0A F2 | 	cmp	local06, local03 wz
220d0     7C 00 90 AD |  if_e	jmp	#LR__2765
220d4                 | '       if (d>=0) 
220d4     00 C0 56 F2 | 	cmps	local14, #0 wc
220d8                 | '         x+=xi
220d8     5A B1 02 31 |  if_ae	add	local06, local08
220dc                 | '         y+=yi
220dc     5C B3 02 31 |  if_ae	add	local07, local10
220e0                 | '         d+=ai
220e0     5E C1 02 31 |  if_ae	add	local14, local12
220e4                 | '       else
220e4                 | '         d+=bi
220e4     5F C1 02 C1 |  if_b	add	local14, local13
220e8                 | '         x+=xi
220e8     5A B1 02 C1 |  if_b	add	local06, local08
220ec                 | '       putpixel(x,y,c)
220ec     58 93 02 F6 | 	mov	arg01, local06
220f0     59 95 02 F6 | 	mov	arg02, local07
220f4     57 97 02 F6 | 	mov	arg03, local05
220f8     70 FC BF FD | 	call	#_Hg010b_4_spin2_putpixel
220fc     CC FF 9F FD | 	jmp	#LR__2761
22100                 | LR__2762
22100                 | '   else
22100                 | '     ai:=(dx-dy)*2
22100     5B BD 02 F6 | 	mov	local12, local09
22104     5D BD 82 F1 | 	sub	local12, local11
22108     01 BC 66 F0 | 	shl	local12, #1
2210c                 | '     bi:=dx*2
2210c     01 B6 66 F0 | 	shl	local09, #1
22110     5B BF 02 F6 | 	mov	local13, local09
22114                 | '     d:=bi-dy
22114     5F C1 02 F6 | 	mov	local14, local13
22118     5D C1 82 F1 | 	sub	local14, local11
2211c                 | '     repeat while (y<>y2)
2211c                 | LR__2763
2211c     56 B3 0A F2 | 	cmp	local07, local04 wz
22120     2C 00 90 AD |  if_e	jmp	#LR__2764
22124                 | '       if (d>=0)
22124     00 C0 56 F2 | 	cmps	local14, #0 wc
22128                 | '         x+=xi
22128     5A B1 02 31 |  if_ae	add	local06, local08
2212c                 | '         y+=yi
2212c     5C B3 02 31 |  if_ae	add	local07, local10
22130                 | '         d+=ai
22130     5E C1 02 31 |  if_ae	add	local14, local12
22134                 | '       else
22134                 | '         d+=bi
22134     5F C1 02 C1 |  if_b	add	local14, local13
22138                 | '         y+=yi
22138     5C B3 02 C1 |  if_b	add	local07, local10
2213c                 | '       putpixel(x, y,c)
2213c     58 93 02 F6 | 	mov	arg01, local06
22140     59 95 02 F6 | 	mov	arg02, local07
22144     57 97 02 F6 | 	mov	arg03, local05
22148     20 FC BF FD | 	call	#_Hg010b_4_spin2_putpixel
2214c     CC FF 9F FD | 	jmp	#LR__2763
22150                 | LR__2764
22150                 | LR__2765
22150                 | LR__2766
22150     E7 F0 03 F6 | 	mov	ptra, fp
22154     F2 00 A0 FD | 	call	#popregs_
22158                 | _Hg010b_4_spin2_draw_ret
22158     2D 00 64 FD | 	ret
2215c                 | 
2215c                 | '       
2215c                 | '       
2215c                 | '       
2215c                 | '       
2215c                 | '       
2215c                 | '       
2215c                 | '  
2215c                 | ' pub fillpush(val) 
2215c                 | _Hg010b_4_spin2_fillpush
2215c                 | ' fillstack[fillptr]:=val
2215c     0B 00 00 FF 
22160     BA 64 06 F1 | 	add	objptr, ##5818
22164     32 81 02 FB | 	rdlong	_var01, objptr
22168     02 80 66 F0 | 	shl	_var01, #2
2216c     0A 00 00 FF 
22170     00 64 86 F1 | 	sub	objptr, ##5120
22174     32 81 02 F1 | 	add	_var01, objptr
22178     40 93 62 FC | 	wrlong	arg01, _var01
2217c                 | ' fillptr+=1   
2217c     0A 00 00 FF 
22180     00 64 06 F1 | 	add	objptr, ##5120
22184     32 81 02 FB | 	rdlong	_var01, objptr
22188     01 80 06 F1 | 	add	_var01, #1
2218c     32 81 62 FC | 	wrlong	_var01, objptr
22190     0B 00 00 FF 
22194     BA 64 86 F1 | 	sub	objptr, ##5818
22198                 | _Hg010b_4_spin2_fillpush_ret
22198     2D 00 64 FD | 	ret
2219c                 | 
2219c                 | ' 
2219c                 | '     
2219c                 | ' pub fillpop() : val
2219c                 | _Hg010b_4_spin2_fillpop
2219c                 | ' 
2219c                 | ' fillptr-=1
2219c     0B 00 00 FF 
221a0     BA 64 06 F1 | 	add	objptr, ##5818
221a4     32 7B 02 FB | 	rdlong	result1, objptr
221a8     01 7A 86 F1 | 	sub	result1, #1
221ac     32 7B 62 FC | 	wrlong	result1, objptr
221b0                 | ' if fillptr<0
221b0     0B 00 00 FF 
221b4     BA 64 86 F1 | 	sub	objptr, ##5818
221b8     00 7A 56 F2 | 	cmps	result1, #0 wc
221bc                 | '   fillptr:=0
221bc     0B 00 00 CF 
221c0     BA 64 06 C1 |  if_b	add	objptr, ##5818
221c4     32 01 68 CC |  if_b	wrlong	#0, objptr
221c8     0B 00 00 CF 
221cc     BA 64 86 C1 |  if_b	sub	objptr, ##5818
221d0                 | '   val:=-12345
221d0     E7 FF 7F CF 
221d4     C7 81 06 C6 |  if_b	mov	_var01, ##-12345
221d8     28 00 90 CD |  if_b	jmp	#LR__2770
221dc                 | ' else 
221dc                 | '   val:=fillstack[fillptr]
221dc     0B 00 00 FF 
221e0     BA 64 06 F1 | 	add	objptr, ##5818
221e4     32 81 02 FB | 	rdlong	_var01, objptr
221e8     02 80 66 F0 | 	shl	_var01, #2
221ec     0A 00 00 FF 
221f0     00 64 86 F1 | 	sub	objptr, ##5120
221f4     32 81 02 F1 | 	add	_var01, objptr
221f8     40 81 02 FB | 	rdlong	_var01, _var01
221fc     01 00 00 FF 
22200     BA 64 86 F1 | 	sub	objptr, ##698
22204                 | LR__2770
22204                 | ' return val
22204     40 7B 02 F6 | 	mov	result1, _var01
22208                 | _Hg010b_4_spin2_fillpop_ret
22208     2D 00 64 FD | 	ret
2220c                 | 
2220c                 | ' 
2220c                 | '       
2220c                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
2220c                 | _Hg010b_4_spin2_fill
2220c     0B CA 05 F6 | 	mov	COUNT_, #11
22210     E8 00 A0 FD | 	call	#pushregs_
22214                 | ' 
22214                 | ' newcolor:=newcolor & 255
22214     4B A7 E2 F8 | 	getbyte	local01, arg03, #0
22218                 | ' oldcolor:=oldcolor & 255
22218     4C A9 E2 F8 | 	getbyte	local02, arg04, #0
2221c                 | ' 
2221c                 | ' if (oldcolor == newcolor) 
2221c     53 A9 0A F2 | 	cmp	local02, local01 wz
22220                 | '   return
22220     70 02 90 AD |  if_e	jmp	#LR__2789
22224                 | ' 
22224                 | ' fillptr:=0
22224     0B 00 00 FF 
22228     BA 64 06 F1 | 	add	objptr, ##5818
2222c     32 01 68 FC | 	wrlong	#0, objptr
22230                 | ' fillmax:=0
22230     04 64 06 F1 | 	add	objptr, #4
22234     32 01 68 FC | 	wrlong	#0, objptr
22238     0B 00 00 FF 
2223c     BE 64 86 F1 | 	sub	objptr, ##5822
22240                 | ' fillpush(x)
22240     18 FF BF FD | 	call	#_Hg010b_4_spin2_fillpush
22244                 | ' fillpush(y)
22244     4A 93 02 F6 | 	mov	arg01, arg02
22248     10 FF BF FD | 	call	#_Hg010b_4_spin2_fillpush
2224c                 | ' y:=fillpop()
2224c     4C FF BF FD | 	call	#_Hg010b_4_spin2_fillpop
22250     3D AB 02 F6 | 	mov	local03, result1
22254                 | ' x:=fillpop()
22254     44 FF BF FD | 	call	#_Hg010b_4_spin2_fillpop
22258     3D AD 02 F6 | 	mov	local04, result1
2225c                 | ' 'pinhigh(38)
2225c                 | ' repeat while (x>-1)       
2225c                 | LR__2780
2225c     00 AC 56 F2 | 	cmps	local04, #0 wc
22260     30 02 90 CD |  if_b	jmp	#LR__2788
22264                 | '  ' pintoggle(39)
22264                 | '   x1 := x
22264     56 AF 02 F6 | 	mov	local05, local04
22268                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
22268                 | LR__2781
22268     00 B0 06 F6 | 	mov	local06, #0
2226c     00 B2 06 F6 | 	mov	local07, #0
22270     00 AE 56 F2 | 	cmps	local05, #0 wc
22274     01 B2 66 36 |  if_ae	neg	local07, #1
22278     00 B2 0E F2 | 	cmp	local07, #0 wz
2227c     00 B0 26 56 |  if_ne	not	local06, #0
22280     00 B4 06 F6 | 	mov	local08, #0
22284     00 B6 06 F6 | 	mov	local09, #0
22288     55 95 02 F6 | 	mov	arg02, local03
2228c     57 93 02 F6 | 	mov	arg01, local05
22290     E8 FB BF FD | 	call	#_Hg010b_4_spin2_getpixel2
22294     54 7B 0A F2 | 	cmp	result1, local02 wz
22298     00 B6 26 A6 |  if_e	not	local09, #0
2229c     00 B6 0E F2 | 	cmp	local09, #0 wz
222a0     00 B4 26 56 |  if_ne	not	local08, #0
222a4     5A B1 CA F7 | 	test	local06, local08 wz
222a8                 | '     x1--
222a8     01 AE 86 51 |  if_ne	sub	local05, #1
222ac     B8 FF 9F 5D |  if_ne	jmp	#LR__2781
222b0                 | '   x1++
222b0     01 AE 06 F1 | 	add	local05, #1
222b4                 | '   spanabove := 0
222b4     00 B8 06 F6 | 	mov	local10, #0
222b8                 | '   spanbelow := 0
222b8     00 BA 06 F6 | 	mov	local11, #0
222bc                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
222bc                 | LR__2782
222bc     00 B0 06 F6 | 	mov	local06, #0
222c0     02 00 00 FF 
222c4     00 AE 56 F2 | 	cmps	local05, ##1024 wc
222c8     00 B0 26 C6 |  if_b	not	local06, #0
222cc     00 B4 06 F6 | 	mov	local08, #0
222d0     00 B6 06 F6 | 	mov	local09, #0
222d4     55 95 02 F6 | 	mov	arg02, local03
222d8     57 93 02 F6 | 	mov	arg01, local05
222dc     9C FB BF FD | 	call	#_Hg010b_4_spin2_getpixel2
222e0     54 7B 0A F2 | 	cmp	result1, local02 wz
222e4     00 B6 26 A6 |  if_e	not	local09, #0
222e8     00 B6 0E F2 | 	cmp	local09, #0 wz
222ec     00 B4 26 56 |  if_ne	not	local08, #0
222f0     5A B1 CA F7 | 	test	local06, local08 wz
222f4     88 01 90 AD |  if_e	jmp	#LR__2787
222f8                 | '     putpixel2 (x1,y, newcolor & 255)
222f8     53 97 E2 F8 | 	getbyte	arg03, local01, #0
222fc     57 93 02 F6 | 	mov	arg01, local05
22300     55 95 02 F6 | 	mov	arg02, local03
22304     14 FB BF FD | 	call	#_Hg010b_4_spin2_putpixel2
22308                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
22308     00 B0 06 F6 | 	mov	local06, #0
2230c     00 B2 06 F6 | 	mov	local07, #0
22310     00 B8 0E F2 | 	cmp	local10, #0 wz
22314     01 AA 56 A2 |  if_e	cmps	local03, #1 wc
22318     01 B2 66 26 |  if_nc_and_z	neg	local07, #1
2231c     00 B2 0E F2 | 	cmp	local07, #0 wz
22320     00 B0 26 56 |  if_ne	not	local06, #0
22324     00 B4 06 F6 | 	mov	local08, #0
22328     00 B6 06 F6 | 	mov	local09, #0
2232c     55 95 02 F6 | 	mov	arg02, local03
22330     01 94 86 F1 | 	sub	arg02, #1
22334     57 93 02 F6 | 	mov	arg01, local05
22338     40 FB BF FD | 	call	#_Hg010b_4_spin2_getpixel2
2233c     54 7B 0A F2 | 	cmp	result1, local02 wz
22340     00 B6 26 A6 |  if_e	not	local09, #0
22344     00 B6 0E F2 | 	cmp	local09, #0 wz
22348     00 B4 26 56 |  if_ne	not	local08, #0
2234c     5A B1 CA F7 | 	test	local06, local08 wz
22350     1C 00 90 AD |  if_e	jmp	#LR__2783
22354                 | '       fillpush(x1)
22354     57 93 02 F6 | 	mov	arg01, local05
22358     00 FE BF FD | 	call	#_Hg010b_4_spin2_fillpush
2235c                 | '       fillpush(y-1)
2235c     55 93 02 F6 | 	mov	arg01, local03
22360     01 92 86 F1 | 	sub	arg01, #1
22364     F4 FD BF FD | 	call	#_Hg010b_4_spin2_fillpush
22368                 | '       spanabove := 1 
22368     01 B8 06 F6 | 	mov	local10, #1
2236c     4C 00 90 FD | 	jmp	#LR__2784
22370                 | LR__2783
22370                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
22370     00 B0 06 F6 | 	mov	local06, #0
22374     00 B2 06 F6 | 	mov	local07, #0
22378     00 B8 0E F2 | 	cmp	local10, #0 wz
2237c     01 AA 56 52 |  if_ne	cmps	local03, #1 wc
22380     01 B2 66 16 |  if_a	neg	local07, #1
22384     00 B2 0E F2 | 	cmp	local07, #0 wz
22388     00 B0 26 56 |  if_ne	not	local06, #0
2238c     00 B4 06 F6 | 	mov	local08, #0
22390     00 B6 06 F6 | 	mov	local09, #0
22394     55 95 02 F6 | 	mov	arg02, local03
22398     01 94 86 F1 | 	sub	arg02, #1
2239c     57 93 02 F6 | 	mov	arg01, local05
223a0     D8 FA BF FD | 	call	#_Hg010b_4_spin2_getpixel2
223a4     54 7B 0A F2 | 	cmp	result1, local02 wz
223a8     00 B6 26 56 |  if_ne	not	local09, #0
223ac     00 B6 0E F2 | 	cmp	local09, #0 wz
223b0     00 B4 26 56 |  if_ne	not	local08, #0
223b4     5A B1 CA F7 | 	test	local06, local08 wz
223b8                 | '       spanabove := 0 
223b8     00 B8 06 56 |  if_ne	mov	local10, #0
223bc                 | LR__2784
223bc                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
223bc     00 B0 06 F6 | 	mov	local06, #0
223c0     00 B2 06 F6 | 	mov	local07, #0
223c4     00 BA 0E F2 | 	cmp	local11, #0 wz
223c8     01 00 00 AF 
223cc     3F AA 56 A2 |  if_e	cmps	local03, ##575 wc
223d0     01 B2 66 86 |  if_c_and_z	neg	local07, #1
223d4     00 B2 0E F2 | 	cmp	local07, #0 wz
223d8     00 B0 26 56 |  if_ne	not	local06, #0
223dc     00 B4 06 F6 | 	mov	local08, #0
223e0     00 B6 06 F6 | 	mov	local09, #0
223e4     55 95 02 F6 | 	mov	arg02, local03
223e8     01 94 06 F1 | 	add	arg02, #1
223ec     57 93 02 F6 | 	mov	arg01, local05
223f0     88 FA BF FD | 	call	#_Hg010b_4_spin2_getpixel2
223f4     54 7B 0A F2 | 	cmp	result1, local02 wz
223f8     00 B6 26 A6 |  if_e	not	local09, #0
223fc     00 B6 0E F2 | 	cmp	local09, #0 wz
22400     00 B4 26 56 |  if_ne	not	local08, #0
22404     5A B1 CA F7 | 	test	local06, local08 wz
22408     1C 00 90 AD |  if_e	jmp	#LR__2785
2240c                 | '       fillpush(x1)
2240c     57 93 02 F6 | 	mov	arg01, local05
22410     48 FD BF FD | 	call	#_Hg010b_4_spin2_fillpush
22414                 | '       fillpush(y + 1)
22414     55 93 02 F6 | 	mov	arg01, local03
22418     01 92 06 F1 | 	add	arg01, #1
2241c     3C FD BF FD | 	call	#_Hg010b_4_spin2_fillpush
22420                 | '       spanBelow := 1
22420     01 BA 06 F6 | 	mov	local11, #1
22424     50 00 90 FD | 	jmp	#LR__2786
22428                 | LR__2785
22428                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
22428     00 B0 06 F6 | 	mov	local06, #0
2242c     00 B2 06 F6 | 	mov	local07, #0
22430     00 BA 0E F2 | 	cmp	local11, #0 wz
22434     01 00 00 5F 
22438     3F AA 56 52 |  if_ne	cmps	local03, ##575 wc
2243c     01 B2 66 46 |  if_c_and_nz	neg	local07, #1
22440     00 B2 0E F2 | 	cmp	local07, #0 wz
22444     00 B0 26 56 |  if_ne	not	local06, #0
22448     00 B4 06 F6 | 	mov	local08, #0
2244c     00 B6 06 F6 | 	mov	local09, #0
22450     55 95 02 F6 | 	mov	arg02, local03
22454     01 94 06 F1 | 	add	arg02, #1
22458     57 93 02 F6 | 	mov	arg01, local05
2245c     1C FA BF FD | 	call	#_Hg010b_4_spin2_getpixel2
22460     54 7B 0A F2 | 	cmp	result1, local02 wz
22464     00 B6 26 56 |  if_ne	not	local09, #0
22468     00 B6 0E F2 | 	cmp	local09, #0 wz
2246c     00 B4 26 56 |  if_ne	not	local08, #0
22470     5A B1 CA F7 | 	test	local06, local08 wz
22474                 | '       spanbelow := 0
22474     00 BA 06 56 |  if_ne	mov	local11, #0
22478                 | LR__2786
22478                 | '     x1++
22478     01 AE 06 F1 | 	add	local05, #1
2247c     3C FE 9F FD | 	jmp	#LR__2782
22480                 | LR__2787
22480                 | '   y:=fillpop()
22480     18 FD BF FD | 	call	#_Hg010b_4_spin2_fillpop
22484     3D AB 02 F6 | 	mov	local03, result1
22488                 | '   x:=fillpop()
22488     10 FD BF FD | 	call	#_Hg010b_4_spin2_fillpop
2248c     3D AD 02 F6 | 	mov	local04, result1
22490     C8 FD 9F FD | 	jmp	#LR__2780
22494                 | LR__2788
22494                 | LR__2789
22494     E7 F0 03 F6 | 	mov	ptra, fp
22498     F2 00 A0 FD | 	call	#popregs_
2249c                 | _Hg010b_4_spin2_fill_ret
2249c     2D 00 64 FD | 	ret
224a0                 | 
224a0                 | ' 'pinlow(38)    
224a0                 | ' 
224a0                 | ' '-- A filled circle -----------------------------------------------------
224a0                 | ' 
224a0                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
224a0                 | _Hg010b_4_spin2_fcircle
224a0     08 CA 05 F6 | 	mov	COUNT_, #8
224a4     E8 00 A0 FD | 	call	#pushregs_
224a8     4B A7 02 F6 | 	mov	local01, arg03
224ac     FF FF 7F FF 
224b0     FE A7 06 FD | 	qmul	local01, ##-2
224b4     49 A9 02 F6 | 	mov	local02, arg01
224b8     4A AB 02 F6 | 	mov	local03, arg02
224bc     4C AD 02 F6 | 	mov	local04, arg04
224c0                 | ' 
224c0                 | ' d:=5-4*r
224c0     53 99 02 F6 | 	mov	arg04, local01
224c4     02 98 66 F0 | 	shl	arg04, #2
224c8     05 AE 06 F6 | 	mov	local05, #5
224cc     4C AF 82 F1 | 	sub	local05, arg04
224d0                 | ' x:=0
224d0     00 B0 06 F6 | 	mov	local06, #0
224d4                 | ' y:=r
224d4                 | ' da:=(-2*r+5)*4
224d4                 | ' db:=3*4
224d4     0C B2 06 F6 | 	mov	local07, #12
224d8                 | ' repeat while (x<=y) 
224d8     18 B4 62 FD | 	getqx	local08
224dc     05 B4 06 F1 | 	add	local08, #5
224e0     02 B4 66 F0 | 	shl	local08, #2
224e4                 | LR__2790
224e4     53 B1 5A F2 | 	cmps	local06, local01 wcz
224e8     B4 00 90 1D |  if_a	jmp	#LR__2792
224ec                 | '   fastline(x0-x,x0+x,y0-y,c)
224ec     54 93 02 F6 | 	mov	arg01, local02
224f0     58 93 82 F1 | 	sub	arg01, local06
224f4     54 95 02 F6 | 	mov	arg02, local02
224f8     58 95 02 F1 | 	add	arg02, local06
224fc     55 97 02 F6 | 	mov	arg03, local03
22500     53 97 82 F1 | 	sub	arg03, local01
22504     56 99 02 F6 | 	mov	arg04, local04
22508     F8 F9 BF FD | 	call	#_Hg010b_4_spin2_fastline
2250c                 | '   fastline(x0-x,x0+x,y0+y,c)
2250c     54 93 02 F6 | 	mov	arg01, local02
22510     58 93 82 F1 | 	sub	arg01, local06
22514     54 95 02 F6 | 	mov	arg02, local02
22518     58 95 02 F1 | 	add	arg02, local06
2251c     55 97 02 F6 | 	mov	arg03, local03
22520     53 97 02 F1 | 	add	arg03, local01
22524     56 99 02 F6 | 	mov	arg04, local04
22528     D8 F9 BF FD | 	call	#_Hg010b_4_spin2_fastline
2252c                 | '   fastline(x0-y,x0+y,y0-x,c)
2252c     54 93 02 F6 | 	mov	arg01, local02
22530     53 93 82 F1 | 	sub	arg01, local01
22534     54 95 02 F6 | 	mov	arg02, local02
22538     53 95 02 F1 | 	add	arg02, local01
2253c     55 97 02 F6 | 	mov	arg03, local03
22540     58 97 82 F1 | 	sub	arg03, local06
22544     56 99 02 F6 | 	mov	arg04, local04
22548     B8 F9 BF FD | 	call	#_Hg010b_4_spin2_fastline
2254c                 | '   fastline(x0-y,x0+y,y0+x,c)
2254c     54 93 02 F6 | 	mov	arg01, local02
22550     53 93 82 F1 | 	sub	arg01, local01
22554     54 95 02 F6 | 	mov	arg02, local02
22558     53 95 02 F1 | 	add	arg02, local01
2255c     55 97 02 F6 | 	mov	arg03, local03
22560     58 97 02 F1 | 	add	arg03, local06
22564     56 99 02 F6 | 	mov	arg04, local04
22568     98 F9 BF FD | 	call	#_Hg010b_4_spin2_fastline
2256c                 | '   if d>0 
2256c     01 AE 56 F2 | 	cmps	local05, #1 wc
22570     18 00 90 CD |  if_b	jmp	#LR__2791
22574                 | '     d+=da
22574     5A AF 02 F1 | 	add	local05, local08
22578                 | '     y-=1
22578     01 A6 86 F1 | 	sub	local01, #1
2257c                 | '     x+=1
2257c     01 B0 06 F1 | 	add	local06, #1
22580                 | '     da+=4*4
22580     10 B4 06 F1 | 	add	local08, #16
22584                 | '     db+=2*4
22584     08 B2 06 F1 | 	add	local07, #8
22588     58 FF 9F FD | 	jmp	#LR__2790
2258c                 | LR__2791
2258c                 | '   else
2258c                 | '     d+=db
2258c     59 AF 02 F1 | 	add	local05, local07
22590                 | '     x+=1
22590     01 B0 06 F1 | 	add	local06, #1
22594                 | '     da+=2*4
22594     08 B4 06 F1 | 	add	local08, #8
22598                 | '     db+=2*4
22598     08 B2 06 F1 | 	add	local07, #8
2259c     44 FF 9F FD | 	jmp	#LR__2790
225a0                 | LR__2792
225a0     E7 F0 03 F6 | 	mov	ptra, fp
225a4     F2 00 A0 FD | 	call	#popregs_
225a8                 | _Hg010b_4_spin2_fcircle_ret
225a8     2D 00 64 FD | 	ret
225ac                 | 
225ac                 | '  
225ac                 | ' '-- A circle ------------------------------------------------------------ 
225ac                 | '  
225ac                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
225ac                 | _Hg010b_4_spin2_circle
225ac     08 CA 05 F6 | 	mov	COUNT_, #8
225b0     E8 00 A0 FD | 	call	#pushregs_
225b4     4B A7 02 F6 | 	mov	local01, arg03
225b8     FF FF 7F FF 
225bc     FE A7 06 FD | 	qmul	local01, ##-2
225c0     49 A9 02 F6 | 	mov	local02, arg01
225c4     4A AB 02 F6 | 	mov	local03, arg02
225c8     4C AD 02 F6 | 	mov	local04, arg04
225cc                 | ' 
225cc                 | '  
225cc                 | ' d:=5-4*r
225cc     53 99 02 F6 | 	mov	arg04, local01
225d0     02 98 66 F0 | 	shl	arg04, #2
225d4     05 AE 06 F6 | 	mov	local05, #5
225d8     4C AF 82 F1 | 	sub	local05, arg04
225dc                 | ' x:=0
225dc     00 B0 06 F6 | 	mov	local06, #0
225e0                 | ' y:=r
225e0                 | ' da:=(-2*r+5)*4
225e0                 | ' db:=3*4
225e0     0C B2 06 F6 | 	mov	local07, #12
225e4                 | ' repeat while (x<=y) 
225e4     18 B4 62 FD | 	getqx	local08
225e8     05 B4 06 F1 | 	add	local08, #5
225ec     02 B4 66 F0 | 	shl	local08, #2
225f0                 | LR__2800
225f0     53 B1 5A F2 | 	cmps	local06, local01 wcz
225f4     F4 00 90 1D |  if_a	jmp	#LR__2802
225f8                 | '   putpixel(x0-x,y0-y,c)
225f8     54 93 02 F6 | 	mov	arg01, local02
225fc     58 93 82 F1 | 	sub	arg01, local06
22600     55 95 02 F6 | 	mov	arg02, local03
22604     53 95 82 F1 | 	sub	arg02, local01
22608     56 97 02 F6 | 	mov	arg03, local04
2260c     5C F7 BF FD | 	call	#_Hg010b_4_spin2_putpixel
22610                 | '   putpixel(x0-x,y0+y,c)
22610     54 93 02 F6 | 	mov	arg01, local02
22614     58 93 82 F1 | 	sub	arg01, local06
22618     55 95 02 F6 | 	mov	arg02, local03
2261c     53 95 02 F1 | 	add	arg02, local01
22620     56 97 02 F6 | 	mov	arg03, local04
22624     44 F7 BF FD | 	call	#_Hg010b_4_spin2_putpixel
22628                 | '   putpixel(x0+x,y0-y,c)
22628     54 93 02 F6 | 	mov	arg01, local02
2262c     58 93 02 F1 | 	add	arg01, local06
22630     55 95 02 F6 | 	mov	arg02, local03
22634     53 95 82 F1 | 	sub	arg02, local01
22638     56 97 02 F6 | 	mov	arg03, local04
2263c     2C F7 BF FD | 	call	#_Hg010b_4_spin2_putpixel
22640                 | '   putpixel(x0+x,y0+y,c)
22640     54 93 02 F6 | 	mov	arg01, local02
22644     58 93 02 F1 | 	add	arg01, local06
22648     55 95 02 F6 | 	mov	arg02, local03
2264c     53 95 02 F1 | 	add	arg02, local01
22650     56 97 02 F6 | 	mov	arg03, local04
22654     14 F7 BF FD | 	call	#_Hg010b_4_spin2_putpixel
22658                 | '   putpixel(x0-y,y0-x,c)
22658     54 93 02 F6 | 	mov	arg01, local02
2265c     53 93 82 F1 | 	sub	arg01, local01
22660     55 95 02 F6 | 	mov	arg02, local03
22664     58 95 82 F1 | 	sub	arg02, local06
22668     56 97 02 F6 | 	mov	arg03, local04
2266c     FC F6 BF FD | 	call	#_Hg010b_4_spin2_putpixel
22670                 | '   putpixel(x0-y,y0+x,c)
22670     54 93 02 F6 | 	mov	arg01, local02
22674     53 93 82 F1 | 	sub	arg01, local01
22678     55 95 02 F6 | 	mov	arg02, local03
2267c     58 95 02 F1 | 	add	arg02, local06
22680     56 97 02 F6 | 	mov	arg03, local04
22684     E4 F6 BF FD | 	call	#_Hg010b_4_spin2_putpixel
22688                 | '   putpixel(x0+y,y0-x,c)
22688     54 93 02 F6 | 	mov	arg01, local02
2268c     53 93 02 F1 | 	add	arg01, local01
22690     55 95 02 F6 | 	mov	arg02, local03
22694     58 95 82 F1 | 	sub	arg02, local06
22698     56 97 02 F6 | 	mov	arg03, local04
2269c     CC F6 BF FD | 	call	#_Hg010b_4_spin2_putpixel
226a0                 | '   putpixel(x0+y,y0+x,c)
226a0     54 93 02 F6 | 	mov	arg01, local02
226a4     53 93 02 F1 | 	add	arg01, local01
226a8     55 95 02 F6 | 	mov	arg02, local03
226ac     58 95 02 F1 | 	add	arg02, local06
226b0     56 97 02 F6 | 	mov	arg03, local04
226b4     B4 F6 BF FD | 	call	#_Hg010b_4_spin2_putpixel
226b8                 | '   if d>0 
226b8     01 AE 56 F2 | 	cmps	local05, #1 wc
226bc     18 00 90 CD |  if_b	jmp	#LR__2801
226c0                 | '     d+=da
226c0     5A AF 02 F1 | 	add	local05, local08
226c4                 | '     y-=1
226c4     01 A6 86 F1 | 	sub	local01, #1
226c8                 | '     x+=1
226c8     01 B0 06 F1 | 	add	local06, #1
226cc                 | '     da+=4*4
226cc     10 B4 06 F1 | 	add	local08, #16
226d0                 | '     db+=2*4
226d0     08 B2 06 F1 | 	add	local07, #8
226d4     18 FF 9F FD | 	jmp	#LR__2800
226d8                 | LR__2801
226d8                 | '   else
226d8                 | '     d+=db
226d8     59 AF 02 F1 | 	add	local05, local07
226dc                 | '     x+=1
226dc     01 B0 06 F1 | 	add	local06, #1
226e0                 | '     da+=2*4
226e0     08 B4 06 F1 | 	add	local08, #8
226e4                 | '     db+=2*4
226e4     08 B2 06 F1 | 	add	local07, #8
226e8     04 FF 9F FD | 	jmp	#LR__2800
226ec                 | LR__2802
226ec     E7 F0 03 F6 | 	mov	ptra, fp
226f0     F2 00 A0 FD | 	call	#popregs_
226f4                 | _Hg010b_4_spin2_circle_ret
226f4     2D 00 64 FD | 	ret
226f8                 | 
226f8                 | '     
226f8                 | ' '-- A frame (an empty rectangle) ---------------------------------------
226f8                 | ' 
226f8                 | ' pub frame(x1,y1,x2,y2,c)
226f8                 | _Hg010b_4_spin2_frame
226f8     05 CA 05 F6 | 	mov	COUNT_, #5
226fc     E8 00 A0 FD | 	call	#pushregs_
22700     49 A7 02 F6 | 	mov	local01, arg01
22704     4A A9 02 F6 | 	mov	local02, arg02
22708     4B AB 02 F6 | 	mov	local03, arg03
2270c     4C AD 02 F6 | 	mov	local04, arg04
22710     4D AF 02 F6 | 	mov	local05, arg05
22714                 | ' 
22714                 | ' fastline(x1,x2,y1,c)
22714     53 93 02 F6 | 	mov	arg01, local01
22718     55 95 02 F6 | 	mov	arg02, local03
2271c     54 97 02 F6 | 	mov	arg03, local02
22720     57 99 02 F6 | 	mov	arg04, local05
22724     DC F7 BF FD | 	call	#_Hg010b_4_spin2_fastline
22728                 | ' fastline(x1,x2,y2,c)
22728     53 93 02 F6 | 	mov	arg01, local01
2272c     55 95 02 F6 | 	mov	arg02, local03
22730     56 97 02 F6 | 	mov	arg03, local04
22734     57 99 02 F6 | 	mov	arg04, local05
22738     C8 F7 BF FD | 	call	#_Hg010b_4_spin2_fastline
2273c                 | ' line(x1,y1,x1,y2,c)
2273c     53 93 02 F6 | 	mov	arg01, local01
22740     54 95 02 F6 | 	mov	arg02, local02
22744     53 97 02 F6 | 	mov	arg03, local01
22748     56 99 02 F6 | 	mov	arg04, local04
2274c     57 9B 02 F6 | 	mov	arg05, local05
22750                 | ' draw(x1,y1,x2,y2,c)
22750     C8 F8 BF FD | 	call	#_Hg010b_4_spin2_draw
22754                 | ' line(x2,y1,x2,y2,c)
22754     55 93 02 F6 | 	mov	arg01, local03
22758     54 95 02 F6 | 	mov	arg02, local02
2275c     55 97 02 F6 | 	mov	arg03, local03
22760     56 99 02 F6 | 	mov	arg04, local04
22764     57 9B 02 F6 | 	mov	arg05, local05
22768                 | ' draw(x1,y1,x2,y2,c)
22768     B0 F8 BF FD | 	call	#_Hg010b_4_spin2_draw
2276c     E7 F0 03 F6 | 	mov	ptra, fp
22770     F2 00 A0 FD | 	call	#popregs_
22774                 | _Hg010b_4_spin2_frame_ret
22774     2D 00 64 FD | 	ret
22778                 | 
22778                 | ' 
22778                 | ' '-- A box (a filled rectangle) ----------------------------------------
22778                 | ' 
22778                 | ' pub box(x1,y1,x2,y2,c) |yy
22778                 | _Hg010b_4_spin2_box
22778     06 CA 05 F6 | 	mov	COUNT_, #6
2277c     E8 00 A0 FD | 	call	#pushregs_
22780     49 A7 02 F6 | 	mov	local01, arg01
22784     4A A9 02 F6 | 	mov	local02, arg02
22788     4B AB 02 F6 | 	mov	local03, arg03
2278c     4C AD 02 F6 | 	mov	local04, arg04
22790     4D AF 02 F6 | 	mov	local05, arg05
22794                 | ' 
22794                 | ' repeat yy from y1 to y2
22794     54 AD 52 F2 | 	cmps	local04, local02 wc
22798     01 B0 86 F6 | 	negc	local06, #1
2279c     58 AD 02 F1 | 	add	local04, local06
227a0                 | LR__2810
227a0                 | '   fastline(x1,x2,yy,c)
227a0     53 93 02 F6 | 	mov	arg01, local01
227a4     55 95 02 F6 | 	mov	arg02, local03
227a8     57 99 02 F6 | 	mov	arg04, local05
227ac     54 97 02 F6 | 	mov	arg03, local02
227b0     50 F7 BF FD | 	call	#_Hg010b_4_spin2_fastline
227b4     58 A9 02 F1 | 	add	local02, local06
227b8     56 A9 0A F2 | 	cmp	local02, local04 wz
227bc     E0 FF 9F 5D |  if_ne	jmp	#LR__2810
227c0     E7 F0 03 F6 | 	mov	ptra, fp
227c4     F2 00 A0 FD | 	call	#popregs_
227c8                 | _Hg010b_4_spin2_box_ret
227c8     2D 00 64 FD | 	ret
227cc                 | 
227cc                 | '       
227cc                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
227cc                 | _Hg010b_4_spin2_putcharxycgf
227cc                 | ' 
227cc                 | '  
227cc                 | ' repeat yy from 0 to 15
227cc     00 80 06 F6 | 	mov	_var01, #0
227d0     D7 8A 48 FB | 	callpa	#(@LR__2822-@LR__2820)>>2,fcache_load_ptr_
227d4                 | LR__2820
227d4                 | ' 
227d4                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
227d4     95 64 06 F1 | 	add	objptr, #149
227d8     32 83 02 FB | 	rdlong	_var02, objptr
227dc     0A 82 66 F0 | 	shl	_var02, #10
227e0     34 85 02 F6 | 	mov	_var03, ptr__Hg010b_4_spin2_dat__
227e4     41 85 02 F1 | 	add	_var03, _var02
227e8     4B 83 02 F6 | 	mov	_var02, arg03
227ec     04 82 66 F0 | 	shl	_var02, #4
227f0     41 85 02 F1 | 	add	_var03, _var02
227f4     40 85 02 F1 | 	add	_var03, _var01
227f8     42 85 C2 FA | 	rdbyte	_var03, _var03
227fc                 | '   asm
227fc     00 84 0E F4 | 	testb	_var03, #0 wz
22800     4C 87 C2 A8 |  if_e	setbyte	_var04, arg04, #0
22804     4D 87 C2 58 |  if_ne	setbyte	_var04, arg05, #0
22808     01 84 0E F4 | 	testb	_var03, #1 wz
2280c     4C 87 CA A8 |  if_e	setbyte	_var04, arg04, #1
22810     4D 87 CA 58 |  if_ne	setbyte	_var04, arg05, #1
22814     02 84 0E F4 | 	testb	_var03, #2 wz
22818     4C 87 D2 A8 |  if_e	setbyte	_var04, arg04, #2
2281c     4D 87 D2 58 |  if_ne	setbyte	_var04, arg05, #2
22820     03 84 0E F4 | 	testb	_var03, #3 wz
22824     4C 87 DA A8 |  if_e	setbyte	_var04, arg04, #3
22828     4D 87 DA 58 |  if_ne	setbyte	_var04, arg05, #3
2282c     04 84 0E F4 | 	testb	_var03, #4 wz
22830     4C 89 C2 A8 |  if_e	setbyte	_var05, arg04, #0
22834     4D 89 C2 58 |  if_ne	setbyte	_var05, arg05, #0
22838     05 84 0E F4 | 	testb	_var03, #5 wz
2283c     4C 89 CA A8 |  if_e	setbyte	_var05, arg04, #1
22840     4D 89 CA 58 |  if_ne	setbyte	_var05, arg05, #1
22844     06 84 0E F4 | 	testb	_var03, #6 wz
22848     4C 89 D2 A8 |  if_e	setbyte	_var05, arg04, #2
2284c     4D 89 D2 58 |  if_ne	setbyte	_var05, arg05, #2
22850     07 84 0E F4 | 	testb	_var03, #7 wz
22854     4C 89 DA A8 |  if_e	setbyte	_var05, arg04, #3
22858     4D 89 DA 58 |  if_ne	setbyte	_var05, arg05, #3
2285c                 | '   
2285c                 | '   ccc[0]:=c1
2285c     99 65 06 F1 | 	add	objptr, #409
22860     32 87 62 FC | 	wrlong	_var04, objptr
22864                 | '   ccc[1]:=c2 
22864     04 64 06 F1 | 	add	objptr, #4
22868     32 89 62 FC | 	wrlong	_var05, objptr
2286c                 | '   long[mailbox0][2]:=8
2286c     49 64 86 F1 | 	sub	objptr, #73
22870     32 85 02 FB | 	rdlong	_var03, objptr
22874     08 84 06 F1 | 	add	_var03, #8
22878     42 11 68 FC | 	wrlong	#8, _var03
2287c                 | '   long[mailbox0][1]:=@ccc
2287c     32 85 02 F6 | 	mov	_var03, objptr
22880     45 84 06 F1 | 	add	_var03, #69
22884     32 83 02 FB | 	rdlong	_var02, objptr
22888     04 82 06 F1 | 	add	_var02, #4
2288c     41 85 62 FC | 	wrlong	_var03, _var02
22890                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
22890     0C 65 86 F1 | 	sub	objptr, #268
22894     32 85 02 FB | 	rdlong	_var03, objptr
22898     4A 83 02 F6 | 	mov	_var02, arg02
2289c     40 83 02 F1 | 	add	_var02, _var01
228a0     0A 82 66 F0 | 	shl	_var02, #10
228a4     49 8B 02 F6 | 	mov	_var06, arg01
228a8     02 8A 66 F0 | 	shl	_var06, #2
228ac     45 83 02 F1 | 	add	_var02, _var06
228b0     41 85 02 F1 | 	add	_var03, _var02
228b4     00 00 78 FF 
228b8     00 84 06 F1 | 	add	_var03, ##-268435456
228bc     0C 65 06 F1 | 	add	objptr, #268
228c0     32 8B 02 FB | 	rdlong	_var06, objptr
228c4     45 85 62 FC | 	wrlong	_var03, _var06
228c8                 | '   repeat
228c8                 | LR__2821
228c8     32 85 02 FB | 	rdlong	_var03, objptr
228cc     42 83 02 FB | 	rdlong	_var02, _var03
228d0     00 82 56 F2 | 	cmps	_var02, #0 wc
228d4     F0 FF 9F CD |  if_b	jmp	#LR__2821
228d8     E9 65 86 F1 | 	sub	objptr, #489
228dc     01 80 06 F1 | 	add	_var01, #1
228e0     10 80 56 F2 | 	cmps	_var01, #16 wc
228e4     EC FE 9F CD |  if_b	jmp	#LR__2820
228e8                 | LR__2822
228e8                 | _Hg010b_4_spin2_putcharxycgf_ret
228e8     2D 00 64 FD | 	ret
228ec                 | 
228ec                 | ' 
228ec                 | ' 
228ec                 | ' '**********************************************************************r***
228ec                 | ' '                                                                        *
228ec                 | ' ' Font related functions                                                 *
228ec                 | ' '                                                                        *
228ec                 | ' '*************************************************************************
228ec                 | ' 
228ec                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
228ec                 | ' 
228ec                 | ' pub setfontfamily(afontnum)
228ec                 | _Hg010b_4_spin2_setfontfamily
228ec                 | ' 
228ec                 | ' font_family:=afontnum
228ec     95 64 06 F1 | 	add	objptr, #149
228f0     32 93 62 FC | 	wrlong	arg01, objptr
228f4     95 64 86 F1 | 	sub	objptr, #149
228f8                 | ' 'if afontnum==8
228f8                 | ' '  font_ptr:=@amiga_font
228f8                 | ' 
228f8                 | ' if afontnum==4
228f8     04 92 0E F2 | 	cmp	arg01, #4 wz
228fc                 | '   font_ptr:=@st_font
228fc     34 81 02 A6 |  if_e	mov	_var01, ptr__Hg010b_4_spin2_dat__
22900     08 00 00 AF 
22904     00 80 06 A1 |  if_e	add	_var01, ##4096
22908     08 64 06 A1 |  if_e	add	objptr, #8
2290c     32 81 62 AC |  if_e	wrlong	_var01, objptr
22910     08 64 86 A1 |  if_e	sub	objptr, #8
22914                 | ' if afontnum==0
22914     00 92 0E F2 | 	cmp	arg01, #0 wz
22918                 | '   font_ptr:=@vga_font
22918     08 64 06 A1 |  if_e	add	objptr, #8
2291c     32 69 62 AC |  if_e	wrlong	ptr__Hg010b_4_spin2_dat__, objptr
22920     08 64 86 A1 |  if_e	sub	objptr, #8
22924                 | _Hg010b_4_spin2_setfontfamily_ret
22924     2D 00 64 FD | 	ret
22928                 | 
22928                 | ' 
22928                 | ' ''--------- Redefine a character
22928                 | ' 
22928                 | ' pub defchar(ch,ptr) | s,i ' 
22928                 | _Hg010b_4_spin2_defchar
22928                 | ' 
22928                 | ' s:=font_ptr+ch*16
22928     08 64 06 F1 | 	add	objptr, #8
2292c     32 81 02 FB | 	rdlong	_var01, objptr
22930     08 64 86 F1 | 	sub	objptr, #8
22934     04 92 66 F0 | 	shl	arg01, #4
22938     49 81 02 F1 | 	add	_var01, arg01
2293c                 | ' repeat i from 0 to 15
2293c     00 82 06 F6 | 	mov	_var02, #0
22940     D7 12 48 FB | 	callpa	#(@LR__2831-@LR__2830)>>2,fcache_load_ptr_
22944                 | LR__2830
22944                 | '   byte[s+i]:=byte[ptr+i]
22944     4A 93 02 F6 | 	mov	arg01, arg02
22948     41 93 02 F1 | 	add	arg01, _var02
2294c     40 85 02 F6 | 	mov	_var03, _var01
22950     49 93 C2 FA | 	rdbyte	arg01, arg01
22954     41 85 02 F1 | 	add	_var03, _var02
22958     42 93 42 FC | 	wrbyte	arg01, _var03
2295c     01 82 06 F1 | 	add	_var02, #1
22960     10 82 56 F2 | 	cmps	_var02, #16 wc
22964     DC FF 9F CD |  if_b	jmp	#LR__2830
22968                 | LR__2831
22968                 | _Hg010b_4_spin2_defchar_ret
22968     2D 00 64 FD | 	ret
2296c                 | 
2296c                 | ' 
2296c                 | ' 
2296c                 | ' '*************************************************************************
2296c                 | ' '                                                                        *
2296c                 | ' '  Cursor functions                                                      *
2296c                 | ' '                                                                        *
2296c                 | ' '*************************************************************************
2296c                 | ' 
2296c                 | ' 
2296c                 | ' pub setcursorpos(x,y)
2296c                 | _Hg010b_4_spin2_setcursorpos
2296c     01 CA 05 F6 | 	mov	COUNT_, #1
22970     E8 00 A0 FD | 	call	#pushregs_
22974                 | ' 
22974                 | ' ''---------- Set the (x,y) position of cursor
22974                 | ' 
22974                 | ' cursor_x:=x
22974     3C 64 06 F1 | 	add	objptr, #60
22978     32 93 52 FC | 	wrword	arg01, objptr
2297c                 | ' cursor_y:=y
2297c     02 64 06 F1 | 	add	objptr, #2
22980     32 95 42 FC | 	wrbyte	arg02, objptr
22984                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
22984     02 64 86 F1 | 	sub	objptr, #2
22988     32 A7 E2 FA | 	rdword	local01, objptr
2298c     02 A6 66 F0 | 	shl	local01, #2
22990     4A 97 E2 F8 | 	getbyte	arg03, arg02, #0
22994     3C 64 86 F1 | 	sub	objptr, #60
22998     04 96 66 F0 | 	shl	arg03, #4
2299c     04 96 06 F1 | 	add	arg03, #4
229a0     11 92 06 F6 | 	mov	arg01, #17
229a4     53 95 02 F6 | 	mov	arg02, local01
229a8     0C F3 BF FD | 	call	#_Hg010b_4_spin2_setspritepos
229ac     E7 F0 03 F6 | 	mov	ptra, fp
229b0     F2 00 A0 FD | 	call	#popregs_
229b4                 | _Hg010b_4_spin2_setcursorpos_ret
229b4     2D 00 64 FD | 	ret
229b8                 | 
229b8                 | ' 
229b8                 | ' pub setcursorx(x)
229b8                 | _Hg010b_4_spin2_setcursorx
229b8                 | ' cursor_x:=x
229b8     3C 64 06 F1 | 	add	objptr, #60
229bc     32 93 52 FC | 	wrword	arg01, objptr
229c0                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
229c0     49 95 32 F9 | 	getword	arg02, arg01, #0
229c4     02 94 66 F0 | 	shl	arg02, #2
229c8     02 64 06 F1 | 	add	objptr, #2
229cc     32 97 C2 FA | 	rdbyte	arg03, objptr
229d0     3E 64 86 F1 | 	sub	objptr, #62
229d4     04 96 66 F0 | 	shl	arg03, #4
229d8     04 96 06 F1 | 	add	arg03, #4
229dc     11 92 06 F6 | 	mov	arg01, #17
229e0     D4 F2 BF FD | 	call	#_Hg010b_4_spin2_setspritepos
229e4                 | _Hg010b_4_spin2_setcursorx_ret
229e4     2D 00 64 FD | 	ret
229e8                 | 
229e8                 | ' 
229e8                 | ' pub setcursory(y) 
229e8                 | _Hg010b_4_spin2_setcursory
229e8                 | ' cursor_y:=y
229e8     3E 64 06 F1 | 	add	objptr, #62
229ec     32 93 42 FC | 	wrbyte	arg01, objptr
229f0                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
229f0     02 64 86 F1 | 	sub	objptr, #2
229f4     32 95 E2 FA | 	rdword	arg02, objptr
229f8     02 94 66 F0 | 	shl	arg02, #2
229fc     49 97 E2 F8 | 	getbyte	arg03, arg01, #0
22a00     3C 64 86 F1 | 	sub	objptr, #60
22a04     04 96 66 F0 | 	shl	arg03, #4
22a08     04 96 06 F1 | 	add	arg03, #4
22a0c     11 92 06 F6 | 	mov	arg01, #17
22a10     A4 F2 BF FD | 	call	#_Hg010b_4_spin2_setspritepos
22a14                 | _Hg010b_4_spin2_setcursory_ret
22a14     2D 00 64 FD | 	ret
22a18                 | 
22a18                 | ' 
22a18                 | ' '*************************************************************************
22a18                 | ' '                                                                        *
22a18                 | ' '  VBlank functions                                                      *
22a18                 | ' '                                                                        *
22a18                 | ' '*************************************************************************
22a18                 | ' 
22a18                 | ' pub waitvbl(amount) | i
22a18                 | _Hg010b_4_spin2_waitvbl
22a18     03 CA 05 F6 | 	mov	COUNT_, #3
22a1c     E8 00 A0 FD | 	call	#pushregs_
22a20     49 A7 02 F6 | 	mov	local01, arg01
22a24                 | ' 
22a24                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
22a24                 | ' 
22a24                 | ' repeat i from 1 to amount
22a24     01 A8 06 F6 | 	mov	local02, #1
22a28     01 A6 56 F2 | 	cmps	local01, #1 wc
22a2c     01 AA 86 F6 | 	negc	local03, #1
22a30     55 A7 02 F1 | 	add	local01, local03
22a34                 | LR__2840
22a34                 | '   repeat until vblank==0
22a34                 | LR__2841
22a34     49 64 06 F1 | 	add	objptr, #73
22a38     32 93 0A FB | 	rdlong	arg01, objptr wz
22a3c     49 64 86 F1 | 	sub	objptr, #73
22a40     0C 00 90 AD |  if_e	jmp	#LR__2842
22a44                 | '     waitus(100)
22a44     64 92 06 F6 | 	mov	arg01, #100
22a48     EC 22 B0 FD | 	call	#__system___waitus
22a4c     E4 FF 9F FD | 	jmp	#LR__2841
22a50                 | LR__2842
22a50                 | '   repeat until vblank==1
22a50                 | LR__2843
22a50     49 64 06 F1 | 	add	objptr, #73
22a54     32 93 02 FB | 	rdlong	arg01, objptr
22a58     49 64 86 F1 | 	sub	objptr, #73
22a5c     01 92 0E F2 | 	cmp	arg01, #1 wz
22a60     0C 00 90 AD |  if_e	jmp	#LR__2844
22a64                 | '     waitus(100)
22a64     64 92 06 F6 | 	mov	arg01, #100
22a68     CC 22 B0 FD | 	call	#__system___waitus
22a6c     E0 FF 9F FD | 	jmp	#LR__2843
22a70                 | LR__2844
22a70     55 A9 02 F1 | 	add	local02, local03
22a74     53 A9 0A F2 | 	cmp	local02, local01 wz
22a78     B8 FF 9F 5D |  if_ne	jmp	#LR__2840
22a7c     E7 F0 03 F6 | 	mov	ptra, fp
22a80     F2 00 A0 FD | 	call	#popregs_
22a84                 | _Hg010b_4_spin2_waitvbl_ret
22a84     2D 00 64 FD | 	ret
22a88                 | 
22a88                 | ' 
22a88                 | ' ''---------- Set color #c in palette to r,g,b
22a88                 | ' 
22a88                 | ' pub setcolor(c,r,g,b)  |cc
22a88                 | _Hg010b_4_spin2_setcolor
22a88                 | ' 
22a88                 | ' cc:=r<<24+g<<16+b<<8
22a88     18 94 66 F0 | 	shl	arg02, #24
22a8c     10 96 66 F0 | 	shl	arg03, #16
22a90     4B 95 02 F1 | 	add	arg02, arg03
22a94     08 98 66 F0 | 	shl	arg04, #8
22a98     4C 95 02 F1 | 	add	arg02, arg04
22a9c                 | ' long[palette_ptr+4*c]:=cc
22a9c     1C 64 06 F1 | 	add	objptr, #28
22aa0     32 99 02 FB | 	rdlong	arg04, objptr
22aa4     1C 64 86 F1 | 	sub	objptr, #28
22aa8     02 92 66 F0 | 	shl	arg01, #2
22aac     49 99 02 F1 | 	add	arg04, arg01
22ab0     4C 95 62 FC | 	wrlong	arg02, arg04
22ab4                 | _Hg010b_4_spin2_setcolor_ret
22ab4     2D 00 64 FD | 	ret
22ab8                 | 
22ab8                 | ' 
22ab8                 | ' 
22ab8                 | ' pub cls(fc,bc)   :c,i
22ab8                 | _Hg010b_4_spin2_cls
22ab8     02 CA 05 F6 | 	mov	COUNT_, #2
22abc     E8 00 A0 FD | 	call	#pushregs_
22ac0     49 A7 02 F6 | 	mov	local01, arg01
22ac4     4A A9 02 F6 | 	mov	local02, arg02
22ac8                 | ' 
22ac8                 | ' c:=bc
22ac8                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
22ac8     DD 64 06 F1 | 	add	objptr, #221
22acc     32 93 02 FB | 	rdlong	arg01, objptr
22ad0     A5 64 86 F1 | 	sub	objptr, #165
22ad4     32 97 02 FB | 	rdlong	arg03, objptr
22ad8     02 96 66 F0 | 	shl	arg03, #2
22adc     54 95 02 F6 | 	mov	arg02, local02
22ae0     00 98 06 F6 | 	mov	arg04, #0
22ae4     01 9A 06 F6 | 	mov	arg05, #1
22ae8     0B 00 00 FF 
22aec     94 64 06 F1 | 	add	objptr, ##5780
22af0     A8 10 B0 FD | 	call	#_psram4_spin2_fill
22af4                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
22af4     0B 00 00 FF 
22af8     C8 64 86 F1 | 	sub	objptr, ##5832
22afc     32 93 02 FB | 	rdlong	arg01, objptr
22b00     04 64 86 F1 | 	sub	objptr, #4
22b04     32 97 02 FB | 	rdlong	arg03, objptr
22b08     49 97 82 F1 | 	sub	arg03, arg01
22b0c     20 94 06 F6 | 	mov	arg02, #32
22b10     00 98 06 F6 | 	mov	arg04, #0
22b14     01 9A 06 F6 | 	mov	arg05, #1
22b18     0B 00 00 FF 
22b1c     CC 64 06 F1 | 	add	objptr, ##5836
22b20     78 10 B0 FD | 	call	#_psram4_spin2_fill
22b24                 | ' setwritecolors(fc,bc)
22b24                 | ' 
22b24                 | ' write_color:=ff
22b24     0B 00 00 FF 
22b28     8B 64 86 F1 | 	sub	objptr, ##5771
22b2c     32 A7 62 FC | 	wrlong	local01, objptr
22b30                 | ' write_background:=bb
22b30     04 64 06 F1 | 	add	objptr, #4
22b34     32 A9 62 FC | 	wrlong	local02, objptr
22b38                 | ' cursor_x:=0
22b38     09 64 86 F1 | 	sub	objptr, #9
22b3c     32 01 58 FC | 	wrword	#0, objptr
22b40                 | ' cursor_y:=0
22b40     02 64 06 F1 | 	add	objptr, #2
22b44     32 01 48 FC | 	wrbyte	#0, objptr
22b48                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
22b48     02 64 86 F1 | 	sub	objptr, #2
22b4c     32 95 E2 FA | 	rdword	arg02, objptr
22b50     02 94 66 F0 | 	shl	arg02, #2
22b54     3C 64 86 F1 | 	sub	objptr, #60
22b58     04 96 06 F6 | 	mov	arg03, #4
22b5c     11 92 06 F6 | 	mov	arg01, #17
22b60     54 F1 BF FD | 	call	#_Hg010b_4_spin2_setspritepos
22b64                 | ' setcursorcolor(fc)
22b64     53 93 02 F6 | 	mov	arg01, local01
22b68     60 ED BF FD | 	call	#_Hg010b_4_spin2_setcursorcolor
22b6c     54 7B 02 F6 | 	mov	result1, local02
22b70     00 7C 06 F6 | 	mov	result2, #0
22b74     E7 F0 03 F6 | 	mov	ptra, fp
22b78     F2 00 A0 FD | 	call	#popregs_
22b7c                 | _Hg010b_4_spin2_cls_ret
22b7c     2D 00 64 FD | 	ret
22b80                 | 
22b80                 | ' 
22b80                 | ' ''---------- Output a char at the cursor position, move the cursor 
22b80                 | ' 
22b80                 | ' pub putchar(achar) | c,x,y,l,newcpl
22b80                 | _Hg010b_4_spin2_putchar
22b80     02 CA 05 F6 | 	mov	COUNT_, #2
22b84     E8 00 A0 FD | 	call	#pushregs_
22b88     49 A7 02 F6 | 	mov	local01, arg01
22b8c                 | ' 
22b8c                 | ' if achar==10
22b8c     0A A6 0E F2 | 	cmp	local01, #10 wz
22b90                 | '   crlf()
22b90     78 07 B0 AD |  if_e	call	#_Hg010b_4_spin2_crlf
22b94                 | ' if achar==9
22b94     09 A6 0E F2 | 	cmp	local01, #9 wz
22b98     18 00 90 5D |  if_ne	jmp	#LR__2850
22b9c                 | '   cursor_x:=(cursor_x& %11110000)+16
22b9c     3C 64 06 F1 | 	add	objptr, #60
22ba0     32 97 E2 FA | 	rdword	arg03, objptr
22ba4     F0 96 06 F5 | 	and	arg03, #240
22ba8     10 96 06 F1 | 	add	arg03, #16
22bac     32 97 52 FC | 	wrword	arg03, objptr
22bb0     3C 64 86 F1 | 	sub	objptr, #60
22bb4                 | LR__2850
22bb4                 | '   
22bb4                 | ' if (achar<>9) && (achar<>10) 
22bb4     09 A6 0E F2 | 	cmp	local01, #9 wz
22bb8     0A A6 0E 52 |  if_ne	cmp	local01, #10 wz
22bbc     A8 00 90 AD |  if_e	jmp	#LR__2851
22bc0                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
22bc0     3C 64 06 F1 | 	add	objptr, #60
22bc4     32 93 E2 FA | 	rdword	arg01, objptr
22bc8     02 64 06 F1 | 	add	objptr, #2
22bcc     32 95 C2 FA | 	rdbyte	arg02, objptr
22bd0     04 94 66 F0 | 	shl	arg02, #4
22bd4     04 94 06 F1 | 	add	arg02, #4
22bd8     03 64 06 F1 | 	add	objptr, #3
22bdc     32 99 02 FB | 	rdlong	arg04, objptr
22be0     04 64 06 F1 | 	add	objptr, #4
22be4     32 9B 02 FB | 	rdlong	arg05, objptr
22be8     45 64 86 F1 | 	sub	objptr, #69
22bec     53 97 02 F6 | 	mov	arg03, local01
22bf0     D8 FB BF FD | 	call	#_Hg010b_4_spin2_putcharxycgf
22bf4     04 64 06 F1 | 	add	objptr, #4
22bf8     32 93 02 FB | 	rdlong	arg01, objptr
22bfc     1C 00 00 FF 
22c00     5C 68 06 F1 | 	add	ptr__Hg010b_4_spin2_dat__, ##14428
22c04     34 97 02 FB | 	rdlong	arg03, ptr__Hg010b_4_spin2_dat__
22c08     3A 64 06 F1 | 	add	objptr, #58
22c0c     32 9B C2 FA | 	rdbyte	arg05, objptr
22c10     4D 97 02 FD | 	qmul	arg03, arg05
22c14                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
22c14     1C 00 00 FF 
22c18     5C 68 86 F1 | 	sub	ptr__Hg010b_4_spin2_dat__, ##14428
22c1c     02 64 86 F1 | 	sub	objptr, #2
22c20     32 A9 E2 FA | 	rdword	local02, objptr
22c24     01 A8 46 F0 | 	shr	local02, #1
22c28     53 95 02 F6 | 	mov	arg02, local01
22c2c     01 96 06 F6 | 	mov	arg03, #1
22c30     00 98 06 F6 | 	mov	arg04, #0
22c34     01 9A 06 F6 | 	mov	arg05, #1
22c38     0B 00 00 FF 
22c3c     90 64 06 F1 | 	add	objptr, ##5776
22c40     18 A6 62 FD | 	getqx	local01
22c44     54 A7 02 F1 | 	add	local01, local02
22c48     53 93 02 F1 | 	add	arg01, local01
22c4c     4C 0F B0 FD | 	call	#_psram4_spin2_fill
22c50                 | '   cursor_x+=2
22c50     0B 00 00 FF 
22c54     90 64 86 F1 | 	sub	objptr, ##5776
22c58     32 A9 E2 FA | 	rdword	local02, objptr
22c5c     02 A8 06 F1 | 	add	local02, #2
22c60     32 A9 52 FC | 	wrword	local02, objptr
22c64     3C 64 86 F1 | 	sub	objptr, #60
22c68                 | LR__2851
22c68                 | ' 
22c68                 | ' if cursor_x>=256
22c68     3C 64 06 F1 | 	add	objptr, #60
22c6c     32 A9 E2 FA | 	rdword	local02, objptr
22c70     3C 64 86 F1 | 	sub	objptr, #60
22c74     00 A9 56 F2 | 	cmps	local02, #256 wc
22c78     64 00 90 CD |  if_b	jmp	#LR__2853
22c7c                 | '   cursor_x:=0
22c7c     3C 64 06 F1 | 	add	objptr, #60
22c80     32 01 58 FC | 	wrword	#0, objptr
22c84                 | '   cursor_y+=1
22c84     02 64 06 F1 | 	add	objptr, #2
22c88     32 A9 C2 FA | 	rdbyte	local02, objptr
22c8c     01 A8 06 F1 | 	add	local02, #1
22c90     32 A9 42 FC | 	wrbyte	local02, objptr
22c94                 | '   if cursor_y>st_lines-1
22c94     C3 64 06 F1 | 	add	objptr, #195
22c98     32 A9 02 FB | 	rdlong	local02, objptr
22c9c     01 A8 86 F1 | 	sub	local02, #1
22ca0     C3 64 86 F1 | 	sub	objptr, #195
22ca4     32 97 C2 FA | 	rdbyte	arg03, objptr
22ca8     3E 64 86 F1 | 	sub	objptr, #62
22cac     54 97 5A F2 | 	cmps	arg03, local02 wcz
22cb0     2C 00 90 ED |  if_be	jmp	#LR__2852
22cb4                 | '     scrollup2()
22cb4     00 92 06 F6 | 	mov	arg01, #0
22cb8     01 00 00 FF 
22cbc     58 94 06 F6 | 	mov	arg02, ##600
22cc0     10 96 06 F6 | 	mov	arg03, #16
22cc4     08 02 B0 FD | 	call	#_Hg010b_4_spin2_scrollup2
22cc8                 | '     cursor_y:=st_lines-1
22cc8     01 65 06 F1 | 	add	objptr, #257
22ccc     32 A9 02 FB | 	rdlong	local02, objptr
22cd0     01 A8 86 F1 | 	sub	local02, #1
22cd4     C3 64 86 F1 | 	sub	objptr, #195
22cd8     32 A9 42 FC | 	wrbyte	local02, objptr
22cdc     3E 64 86 F1 | 	sub	objptr, #62
22ce0                 | LR__2852
22ce0                 | LR__2853
22ce0                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
22ce0     3C 64 06 F1 | 	add	objptr, #60
22ce4     32 95 E2 FA | 	rdword	arg02, objptr
22ce8     02 94 66 F0 | 	shl	arg02, #2
22cec     02 64 06 F1 | 	add	objptr, #2
22cf0     32 97 C2 FA | 	rdbyte	arg03, objptr
22cf4     3E 64 86 F1 | 	sub	objptr, #62
22cf8     04 96 66 F0 | 	shl	arg03, #4
22cfc     04 96 06 F1 | 	add	arg03, #4
22d00     11 92 06 F6 | 	mov	arg01, #17
22d04     B0 EF BF FD | 	call	#_Hg010b_4_spin2_setspritepos
22d08     E7 F0 03 F6 | 	mov	ptra, fp
22d0c     F2 00 A0 FD | 	call	#popregs_
22d10                 | _Hg010b_4_spin2_putchar_ret
22d10     2D 00 64 FD | 	ret
22d14                 | 
22d14                 | '     
22d14                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
22d14                 | ' 
22d14                 | ' pub putchar2(achar) | c,x,y,l,newcpl
22d14                 | _Hg010b_4_spin2_putchar2
22d14     02 CA 05 F6 | 	mov	COUNT_, #2
22d18     E8 00 A0 FD | 	call	#pushregs_
22d1c     49 A7 02 F6 | 	mov	local01, arg01
22d20                 | ' 
22d20                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
22d20     3C 64 06 F1 | 	add	objptr, #60
22d24     32 93 E2 FA | 	rdword	arg01, objptr
22d28     02 64 06 F1 | 	add	objptr, #2
22d2c     32 95 C2 FA | 	rdbyte	arg02, objptr
22d30     04 94 66 F0 | 	shl	arg02, #4
22d34     04 94 06 F1 | 	add	arg02, #4
22d38     03 64 06 F1 | 	add	objptr, #3
22d3c     32 99 02 FB | 	rdlong	arg04, objptr
22d40     04 64 06 F1 | 	add	objptr, #4
22d44     32 9B 02 FB | 	rdlong	arg05, objptr
22d48     45 64 86 F1 | 	sub	objptr, #69
22d4c     53 97 02 F6 | 	mov	arg03, local01
22d50     78 FA BF FD | 	call	#_Hg010b_4_spin2_putcharxycgf
22d54     04 64 06 F1 | 	add	objptr, #4
22d58     32 93 02 FB | 	rdlong	arg01, objptr
22d5c     1C 00 00 FF 
22d60     5C 68 06 F1 | 	add	ptr__Hg010b_4_spin2_dat__, ##14428
22d64     34 97 02 FB | 	rdlong	arg03, ptr__Hg010b_4_spin2_dat__
22d68     3A 64 06 F1 | 	add	objptr, #58
22d6c     32 9B C2 FA | 	rdbyte	arg05, objptr
22d70     4D 97 02 FD | 	qmul	arg03, arg05
22d74                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
22d74     1C 00 00 FF 
22d78     5C 68 86 F1 | 	sub	ptr__Hg010b_4_spin2_dat__, ##14428
22d7c     02 64 86 F1 | 	sub	objptr, #2
22d80     32 A9 E2 FA | 	rdword	local02, objptr
22d84     01 A8 46 F0 | 	shr	local02, #1
22d88     53 95 02 F6 | 	mov	arg02, local01
22d8c     01 96 06 F6 | 	mov	arg03, #1
22d90     00 98 06 F6 | 	mov	arg04, #0
22d94     01 9A 06 F6 | 	mov	arg05, #1
22d98     0B 00 00 FF 
22d9c     90 64 06 F1 | 	add	objptr, ##5776
22da0     18 A6 62 FD | 	getqx	local01
22da4     54 A7 02 F1 | 	add	local01, local02
22da8     53 93 02 F1 | 	add	arg01, local01
22dac     EC 0D B0 FD | 	call	#_psram4_spin2_fill
22db0                 | ' 
22db0                 | ' cursor_x+=2
22db0     0B 00 00 FF 
22db4     90 64 86 F1 | 	sub	objptr, ##5776
22db8     32 A9 E2 FA | 	rdword	local02, objptr
22dbc     02 A8 06 F1 | 	add	local02, #2
22dc0     32 A9 52 FC | 	wrword	local02, objptr
22dc4                 | ' if cursor_x>=256
22dc4     54 A9 32 F9 | 	getword	local02, local02, #0
22dc8     3C 64 86 F1 | 	sub	objptr, #60
22dcc     00 A9 56 F2 | 	cmps	local02, #256 wc
22dd0     64 00 90 CD |  if_b	jmp	#LR__2861
22dd4                 | '   cursor_x:=0
22dd4     3C 64 06 F1 | 	add	objptr, #60
22dd8     32 01 58 FC | 	wrword	#0, objptr
22ddc                 | '   cursor_y+=1
22ddc     02 64 06 F1 | 	add	objptr, #2
22de0     32 A9 C2 FA | 	rdbyte	local02, objptr
22de4     01 A8 06 F1 | 	add	local02, #1
22de8     32 A9 42 FC | 	wrbyte	local02, objptr
22dec                 | '   if cursor_y>st_lines-1
22dec     C3 64 06 F1 | 	add	objptr, #195
22df0     32 A9 02 FB | 	rdlong	local02, objptr
22df4     01 A8 86 F1 | 	sub	local02, #1
22df8     C3 64 86 F1 | 	sub	objptr, #195
22dfc     32 97 C2 FA | 	rdbyte	arg03, objptr
22e00     3E 64 86 F1 | 	sub	objptr, #62
22e04     54 97 5A F2 | 	cmps	arg03, local02 wcz
22e08     2C 00 90 ED |  if_be	jmp	#LR__2860
22e0c                 | '     scrollup2()
22e0c     00 92 06 F6 | 	mov	arg01, #0
22e10     01 00 00 FF 
22e14     58 94 06 F6 | 	mov	arg02, ##600
22e18     10 96 06 F6 | 	mov	arg03, #16
22e1c     B0 00 B0 FD | 	call	#_Hg010b_4_spin2_scrollup2
22e20                 | '     cursor_y:=st_lines-1
22e20     01 65 06 F1 | 	add	objptr, #257
22e24     32 A9 02 FB | 	rdlong	local02, objptr
22e28     01 A8 86 F1 | 	sub	local02, #1
22e2c     C3 64 86 F1 | 	sub	objptr, #195
22e30     32 A9 42 FC | 	wrbyte	local02, objptr
22e34     3E 64 86 F1 | 	sub	objptr, #62
22e38                 | LR__2860
22e38                 | LR__2861
22e38                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
22e38     3C 64 06 F1 | 	add	objptr, #60
22e3c     32 95 E2 FA | 	rdword	arg02, objptr
22e40     02 94 66 F0 | 	shl	arg02, #2
22e44     02 64 06 F1 | 	add	objptr, #2
22e48     32 97 C2 FA | 	rdbyte	arg03, objptr
22e4c     3E 64 86 F1 | 	sub	objptr, #62
22e50     04 96 66 F0 | 	shl	arg03, #4
22e54     04 96 06 F1 | 	add	arg03, #4
22e58     11 92 06 F6 | 	mov	arg01, #17
22e5c     58 EE BF FD | 	call	#_Hg010b_4_spin2_setspritepos
22e60     E7 F0 03 F6 | 	mov	ptra, fp
22e64     F2 00 A0 FD | 	call	#popregs_
22e68                 | _Hg010b_4_spin2_putchar2_ret
22e68     2D 00 64 FD | 	ret
22e6c                 | 
22e6c                 | ' ''--------- Output a string at the cursor position, move the cursor  
22e6c                 | ' 
22e6c                 | ' pub write(text) | iii,c,ncx,ncy
22e6c                 | _Hg010b_4_spin2_write
22e6c     04 CA 05 F6 | 	mov	COUNT_, #4
22e70     E8 00 A0 FD | 	call	#pushregs_
22e74     49 A7 02 F6 | 	mov	local01, arg01
22e78                 | ' 
22e78                 | ' repeat iii from 0 to strsize(text)-1
22e78     00 A8 06 F6 | 	mov	local02, #0
22e7c     53 93 02 F6 | 	mov	arg01, local01
22e80     49 AB 02 F6 | 	mov	local03, arg01
22e84     D7 06 48 FB | 	callpa	#(@LR__2871-@LR__2870)>>2,fcache_load_ptr_
22e88                 | LR__2870
22e88     55 7B CA FA | 	rdbyte	result1, local03 wz
22e8c     01 AA 06 51 |  if_ne	add	local03, #1
22e90     F4 FF 9F 5D |  if_ne	jmp	#LR__2870
22e94                 | LR__2871
22e94     49 AB 82 F1 | 	sub	local03, arg01
22e98     01 AA 86 F1 | 	sub	local03, #1
22e9c     00 AA 56 F2 | 	cmps	local03, #0 wc
22ea0     01 AC 86 F6 | 	negc	local04, #1
22ea4     56 AB 02 F1 | 	add	local03, local04
22ea8                 | LR__2872
22ea8                 | '   putchar2(byte[text+iii])
22ea8     53 93 02 F6 | 	mov	arg01, local01
22eac     54 93 02 F1 | 	add	arg01, local02
22eb0     49 93 C2 FA | 	rdbyte	arg01, arg01
22eb4     5C FE BF FD | 	call	#_Hg010b_4_spin2_putchar2
22eb8     56 A9 02 F1 | 	add	local02, local04
22ebc     55 A9 0A F2 | 	cmp	local02, local03 wz
22ec0     E4 FF 9F 5D |  if_ne	jmp	#LR__2872
22ec4     E7 F0 03 F6 | 	mov	ptra, fp
22ec8     F2 00 A0 FD | 	call	#popregs_
22ecc                 | _Hg010b_4_spin2_write_ret
22ecc     2D 00 64 FD | 	ret
22ed0                 | 
22ed0                 | '    
22ed0                 | ' ' a version for text scrolling in Basic shifted 4 lines down
22ed0                 | ' 
22ed0                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
22ed0                 | _Hg010b_4_spin2_scrollup2
22ed0     03 CA 05 F6 | 	mov	COUNT_, #3
22ed4     E8 00 A0 FD | 	call	#pushregs_
22ed8                 | ' 	
22ed8                 | ' repeat i from 4 to 579 
22ed8     04 A6 06 F6 | 	mov	local01, #4
22edc                 | LR__2880
22edc     DD 64 06 F1 | 	add	objptr, #221
22ee0     32 95 02 FB | 	rdlong	arg02, objptr
22ee4     53 9B 02 F6 | 	mov	arg05, local01
22ee8     10 9A 06 F1 | 	add	arg05, #16
22eec     02 9A 66 F0 | 	shl	arg05, #2
22ef0     14 64 06 F1 | 	add	objptr, #20
22ef4     32 97 02 FB | 	rdlong	arg03, objptr
22ef8     4B 9B 02 FD | 	qmul	arg05, arg03
22efc                 | '   ram.read1($7E800, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
22efc     02 96 66 F0 | 	shl	arg03, #2
22f00     F4 03 00 FF 
22f04     00 92 06 F6 | 	mov	arg01, ##518144
22f08     0A 00 00 FF 
22f0c     DB 65 06 F1 | 	add	objptr, ##5595
22f10     18 9A 62 FD | 	getqx	arg05
22f14     4D 95 02 F1 | 	add	arg02, arg05
22f18     48 0B B0 FD | 	call	#_psram4_spin2_read1
22f1c     0A 00 00 FF 
22f20     EF 65 86 F1 | 	sub	objptr, ##5615
22f24     32 95 02 FB | 	rdlong	arg02, objptr
22f28     53 9B 02 F6 | 	mov	arg05, local01
22f2c     02 9A 66 F0 | 	shl	arg05, #2
22f30     14 64 06 F1 | 	add	objptr, #20
22f34     32 97 02 FB | 	rdlong	arg03, objptr
22f38     4B 9B 02 FD | 	qmul	arg05, arg03
22f3c                 | '   ram.write($7E800, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
22f3c     02 96 66 F0 | 	shl	arg03, #2
22f40     F4 03 00 FF 
22f44     00 92 06 F6 | 	mov	arg01, ##518144
22f48     0A 00 00 FF 
22f4c     DB 65 06 F1 | 	add	objptr, ##5595
22f50     18 9A 62 FD | 	getqx	arg05
22f54     4D 95 02 F1 | 	add	arg02, arg05
22f58     A4 0B B0 FD | 	call	#_psram4_spin2_write
22f5c     0B 00 00 FF 
22f60     CC 64 86 F1 | 	sub	objptr, ##5836
22f64     01 A6 06 F1 | 	add	local01, #1
22f68     01 00 00 FF 
22f6c     44 A6 16 F2 | 	cmp	local01, ##580 wc
22f70     68 FF 9F CD |  if_b	jmp	#LR__2880
22f74                 | ' 
22f74                 | ' repeat i from 580 to 599
22f74     01 00 00 FF 
22f78     44 A6 06 F6 | 	mov	local01, ##580
22f7c                 | LR__2881
22f7c                 | '    fastline(0,1023,i,write_background)   
22f7c     45 64 06 F1 | 	add	objptr, #69
22f80     32 99 02 FB | 	rdlong	arg04, objptr
22f84     45 64 86 F1 | 	sub	objptr, #69
22f88     00 92 06 F6 | 	mov	arg01, #0
22f8c     09 94 CE F9 | 	bmask	arg02, #9
22f90     53 97 02 F6 | 	mov	arg03, local01
22f94     6C EF BF FD | 	call	#_Hg010b_4_spin2_fastline
22f98     01 A6 06 F1 | 	add	local01, #1
22f9c     01 00 00 FF 
22fa0     58 A6 16 F2 | 	cmp	local01, ##600 wc
22fa4     D4 FF 9F CD |  if_b	jmp	#LR__2881
22fa8                 | ' repeat i from 0 to 3
22fa8     00 A6 06 F6 | 	mov	local01, #0
22fac                 | LR__2882
22fac                 | '    fastline(0,1023,i,write_background)      
22fac     45 64 06 F1 | 	add	objptr, #69
22fb0     32 99 02 FB | 	rdlong	arg04, objptr
22fb4     45 64 86 F1 | 	sub	objptr, #69
22fb8     00 92 06 F6 | 	mov	arg01, #0
22fbc     09 94 CE F9 | 	bmask	arg02, #9
22fc0     53 97 02 F6 | 	mov	arg03, local01
22fc4     3C EF BF FD | 	call	#_Hg010b_4_spin2_fastline
22fc8     01 A6 06 F1 | 	add	local01, #1
22fcc     04 A6 56 F2 | 	cmps	local01, #4 wc
22fd0     D8 FF 9F CD |  if_b	jmp	#LR__2882
22fd4                 | ' 
22fd4                 | ' repeat i from 0 to 35
22fd4     00 A6 06 F6 | 	mov	local01, #0
22fd8                 | LR__2883
22fd8     53 9B 02 F6 | 	mov	arg05, local01
22fdc     01 9A 06 F1 | 	add	arg05, #1
22fe0     1C 00 00 FF 
22fe4     5C 68 06 F1 | 	add	ptr__Hg010b_4_spin2_dat__, ##14428
22fe8     34 97 02 FB | 	rdlong	arg03, ptr__Hg010b_4_spin2_dat__
22fec     4B 9B 02 FD | 	qmul	arg05, arg03
22ff0                 | '   ram.read1($7E800, textbuf_ptr+(i+1)*timings[7], timings[7])
22ff0     04 64 06 F1 | 	add	objptr, #4
22ff4     32 95 02 FB | 	rdlong	arg02, objptr
22ff8     1C 00 00 FF 
22ffc     5C 68 86 F1 | 	sub	ptr__Hg010b_4_spin2_dat__, ##14428
23000     F4 03 00 FF 
23004     00 92 06 F6 | 	mov	arg01, ##518144
23008     0B 00 00 FF 
2300c     C8 64 06 F1 | 	add	objptr, ##5832
23010     18 9A 62 FD | 	getqx	arg05
23014     4D 95 02 F1 | 	add	arg02, arg05
23018     48 0A B0 FD | 	call	#_psram4_spin2_read1
2301c     1C 00 00 FF 
23020     5C 68 06 F1 | 	add	ptr__Hg010b_4_spin2_dat__, ##14428
23024     34 97 02 FB | 	rdlong	arg03, ptr__Hg010b_4_spin2_dat__
23028     4B A7 02 FD | 	qmul	local01, arg03
2302c                 | '   ram.write($7E800, textbuf_ptr+i*timings[7], timings[7])
2302c     0B 00 00 FF 
23030     C8 64 86 F1 | 	sub	objptr, ##5832
23034     32 95 02 FB | 	rdlong	arg02, objptr
23038     1C 00 00 FF 
2303c     5C 68 86 F1 | 	sub	ptr__Hg010b_4_spin2_dat__, ##14428
23040     F4 03 00 FF 
23044     00 92 06 F6 | 	mov	arg01, ##518144
23048     0B 00 00 FF 
2304c     C8 64 06 F1 | 	add	objptr, ##5832
23050     18 9A 62 FD | 	getqx	arg05
23054     4D 95 02 F1 | 	add	arg02, arg05
23058     A4 0A B0 FD | 	call	#_psram4_spin2_write
2305c     0B 00 00 FF 
23060     CC 64 86 F1 | 	sub	objptr, ##5836
23064     01 A6 06 F1 | 	add	local01, #1
23068     24 A6 56 F2 | 	cmps	local01, #36 wc
2306c     68 FF 9F CD |  if_b	jmp	#LR__2883
23070                 | ' repeat i from 0 to timings[7]-1
23070     00 A6 06 F6 | 	mov	local01, #0
23074     1C 00 00 FF 
23078     5C 68 06 F1 | 	add	ptr__Hg010b_4_spin2_dat__, ##14428
2307c     34 A9 02 FB | 	rdlong	local02, ptr__Hg010b_4_spin2_dat__
23080     1C 00 00 FF 
23084     5C 68 86 F1 | 	sub	ptr__Hg010b_4_spin2_dat__, ##14428
23088     01 A8 86 F1 | 	sub	local02, #1
2308c     00 A8 56 F2 | 	cmps	local02, #0 wc
23090     01 AA 86 F6 | 	negc	local03, #1
23094     55 A9 02 F1 | 	add	local02, local03
23098                 | LR__2884
23098                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
23098     04 64 06 F1 | 	add	objptr, #4
2309c     32 93 02 FB | 	rdlong	arg01, objptr
230a0     1C 00 00 FF 
230a4     5C 68 06 F1 | 	add	ptr__Hg010b_4_spin2_dat__, ##14428
230a8     34 9B 02 FB | 	rdlong	arg05, ptr__Hg010b_4_spin2_dat__
230ac     1C 00 00 FF 
230b0     5C 68 86 F1 | 	sub	ptr__Hg010b_4_spin2_dat__, ##14428
230b4     4D 99 02 F6 | 	mov	arg04, arg05
230b8     03 98 66 F0 | 	shl	arg04, #3
230bc     4D 99 02 F1 | 	add	arg04, arg05
230c0     02 98 66 F0 | 	shl	arg04, #2
230c4     53 99 02 F1 | 	add	arg04, local01
230c8     4C 93 02 F1 | 	add	arg01, arg04
230cc     20 94 06 F6 | 	mov	arg02, #32
230d0     01 96 06 F6 | 	mov	arg03, #1
230d4     00 98 06 F6 | 	mov	arg04, #0
230d8     01 9A 06 F6 | 	mov	arg05, #1
230dc     0B 00 00 FF 
230e0     C8 64 06 F1 | 	add	objptr, ##5832
230e4     B4 0A B0 FD | 	call	#_psram4_spin2_fill
230e8     0B 00 00 FF 
230ec     CC 64 86 F1 | 	sub	objptr, ##5836
230f0     55 A7 02 F1 | 	add	local01, local03
230f4     54 A7 0A F2 | 	cmp	local01, local02 wz
230f8     9C FF 9F 5D |  if_ne	jmp	#LR__2884
230fc     E7 F0 03 F6 | 	mov	ptra, fp
23100     F2 00 A0 FD | 	call	#popregs_
23104                 | _Hg010b_4_spin2_scrollup2_ret
23104     2D 00 64 FD | 	ret
23108                 | 
23108                 | '  
23108                 | ' ''----------- Scroll the screen one line down 
23108                 | ' 
23108                 | ' pub scrolldown(start=0) | i
23108                 | _Hg010b_4_spin2_scrolldown
23108     05 CA 05 F6 | 	mov	COUNT_, #5
2310c     E8 00 A0 FD | 	call	#pushregs_
23110     49 A7 02 F6 | 	mov	local01, arg01
23114                 | ' 
23114                 | ' repeat i from 579 to (start*16)+4
23114     01 00 00 FF 
23118     43 A8 06 F6 | 	mov	local02, ##579
2311c     53 AB 02 F6 | 	mov	local03, local01
23120     04 AA 66 F0 | 	shl	local03, #4
23124     04 AA 06 F1 | 	add	local03, #4
23128     01 00 00 FF 
2312c     43 AA 56 F2 | 	cmps	local03, ##579 wc
23130     01 AC 86 F6 | 	negc	local04, #1
23134     56 AF 02 F6 | 	mov	local05, local04
23138     56 AB 02 F1 | 	add	local03, local04
2313c                 | LR__2890
2313c     DD 64 06 F1 | 	add	objptr, #221
23140     32 95 02 FB | 	rdlong	arg02, objptr
23144     54 AD 02 F6 | 	mov	local04, local02
23148     02 AC 66 F0 | 	shl	local04, #2
2314c     14 64 06 F1 | 	add	objptr, #20
23150     32 97 02 FB | 	rdlong	arg03, objptr
23154     4B AD 02 FD | 	qmul	local04, arg03
23158                 | '   ram.read1($7E800, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
23158     02 96 66 F0 | 	shl	arg03, #2
2315c     F4 03 00 FF 
23160     00 92 06 F6 | 	mov	arg01, ##518144
23164     0A 00 00 FF 
23168     DB 65 06 F1 | 	add	objptr, ##5595
2316c     18 AC 62 FD | 	getqx	local04
23170     56 95 02 F1 | 	add	arg02, local04
23174     EC 08 B0 FD | 	call	#_psram4_spin2_read1
23178     0A 00 00 FF 
2317c     EF 65 86 F1 | 	sub	objptr, ##5615
23180     32 95 02 FB | 	rdlong	arg02, objptr
23184     54 AD 02 F6 | 	mov	local04, local02
23188     10 AC 06 F1 | 	add	local04, #16
2318c     02 AC 66 F0 | 	shl	local04, #2
23190     14 64 06 F1 | 	add	objptr, #20
23194     32 97 02 FB | 	rdlong	arg03, objptr
23198     4B AD 02 FD | 	qmul	local04, arg03
2319c                 | '   ram.write($7E800, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
2319c     02 96 66 F0 | 	shl	arg03, #2
231a0     F4 03 00 FF 
231a4     00 92 06 F6 | 	mov	arg01, ##518144
231a8     0A 00 00 FF 
231ac     DB 65 06 F1 | 	add	objptr, ##5595
231b0     18 AC 62 FD | 	getqx	local04
231b4     56 95 02 F1 | 	add	arg02, local04
231b8     44 09 B0 FD | 	call	#_psram4_spin2_write
231bc     0B 00 00 FF 
231c0     CC 64 86 F1 | 	sub	objptr, ##5836
231c4     57 A9 02 F1 | 	add	local02, local05
231c8     55 A9 0A F2 | 	cmp	local02, local03 wz
231cc     6C FF 9F 5D |  if_ne	jmp	#LR__2890
231d0                 | ' 
231d0                 | ' repeat i from (start*16)+4 to (start*16)+19
231d0     53 A9 02 F6 | 	mov	local02, local01
231d4     04 A8 66 F0 | 	shl	local02, #4
231d8     04 A8 06 F1 | 	add	local02, #4
231dc     53 AF 02 F6 | 	mov	local05, local01
231e0     04 AE 66 F0 | 	shl	local05, #4
231e4     13 AE 06 F1 | 	add	local05, #19
231e8     53 AD 02 F6 | 	mov	local04, local01
231ec     04 AC 66 F0 | 	shl	local04, #4
231f0     04 AC 06 F1 | 	add	local04, #4
231f4     56 AF 52 F2 | 	cmps	local05, local04 wc
231f8     01 AC 86 F6 | 	negc	local04, #1
231fc     56 AB 02 F6 | 	mov	local03, local04
23200     56 AF 02 F1 | 	add	local05, local04
23204                 | LR__2891
23204                 | '    fastline(0,1023,i,write_background)    
23204     45 64 06 F1 | 	add	objptr, #69
23208     32 99 02 FB | 	rdlong	arg04, objptr
2320c     45 64 86 F1 | 	sub	objptr, #69
23210     00 92 06 F6 | 	mov	arg01, #0
23214     09 94 CE F9 | 	bmask	arg02, #9
23218     54 97 02 F6 | 	mov	arg03, local02
2321c     E4 EC BF FD | 	call	#_Hg010b_4_spin2_fastline
23220     55 A9 02 F1 | 	add	local02, local03
23224     57 A9 0A F2 | 	cmp	local02, local05 wz
23228     D8 FF 9F 5D |  if_ne	jmp	#LR__2891
2322c                 | '    
2322c                 | ' repeat i from 35 to start
2322c     23 A8 06 F6 | 	mov	local02, #35
23230     23 A6 56 F2 | 	cmps	local01, #35 wc
23234     01 AC 86 F6 | 	negc	local04, #1
23238     53 AF 02 F6 | 	mov	local05, local01
2323c     56 AF 02 F1 | 	add	local05, local04
23240                 | LR__2892
23240                 | '   ram.read1($7E800, textbuf_ptr+(i*128), 128)
23240     04 64 06 F1 | 	add	objptr, #4
23244     32 95 02 FB | 	rdlong	arg02, objptr
23248     54 AB 02 F6 | 	mov	local03, local02
2324c     07 AA 66 F0 | 	shl	local03, #7
23250     55 95 02 F1 | 	add	arg02, local03
23254     F4 03 00 FF 
23258     00 92 06 F6 | 	mov	arg01, ##518144
2325c     80 96 06 F6 | 	mov	arg03, #128
23260     0B 00 00 FF 
23264     C8 64 06 F1 | 	add	objptr, ##5832
23268     F8 07 B0 FD | 	call	#_psram4_spin2_read1
2326c                 | '   ram.write($7E800, textbuf_ptr+(i+1)*128,128)
2326c     0B 00 00 FF 
23270     C8 64 86 F1 | 	sub	objptr, ##5832
23274     32 95 02 FB | 	rdlong	arg02, objptr
23278     54 AB 02 F6 | 	mov	local03, local02
2327c     01 AA 06 F1 | 	add	local03, #1
23280     07 AA 66 F0 | 	shl	local03, #7
23284     55 95 02 F1 | 	add	arg02, local03
23288     F4 03 00 FF 
2328c     00 92 06 F6 | 	mov	arg01, ##518144
23290     80 96 06 F6 | 	mov	arg03, #128
23294     0B 00 00 FF 
23298     C8 64 06 F1 | 	add	objptr, ##5832
2329c     60 08 B0 FD | 	call	#_psram4_spin2_write
232a0     0B 00 00 FF 
232a4     CC 64 86 F1 | 	sub	objptr, ##5836
232a8     56 A9 02 F1 | 	add	local02, local04
232ac     57 A9 0A F2 | 	cmp	local02, local05 wz
232b0     8C FF 9F 5D |  if_ne	jmp	#LR__2892
232b4                 | ' repeat i from 0 to 127
232b4     00 A8 06 F6 | 	mov	local02, #0
232b8                 | LR__2893
232b8                 | '   ram.fill((textbuf_ptr+start*128+i),32,1,0,1)      
232b8     04 64 06 F1 | 	add	objptr, #4
232bc     32 93 02 FB | 	rdlong	arg01, objptr
232c0     53 AF 02 F6 | 	mov	local05, local01
232c4     07 AE 66 F0 | 	shl	local05, #7
232c8     57 93 02 F1 | 	add	arg01, local05
232cc     54 93 02 F1 | 	add	arg01, local02
232d0     20 94 06 F6 | 	mov	arg02, #32
232d4     01 96 06 F6 | 	mov	arg03, #1
232d8     00 98 06 F6 | 	mov	arg04, #0
232dc     01 9A 06 F6 | 	mov	arg05, #1
232e0     0B 00 00 FF 
232e4     C8 64 06 F1 | 	add	objptr, ##5832
232e8     B0 08 B0 FD | 	call	#_psram4_spin2_fill
232ec     0B 00 00 FF 
232f0     CC 64 86 F1 | 	sub	objptr, ##5836
232f4     01 A8 06 F1 | 	add	local02, #1
232f8     80 A8 56 F2 | 	cmps	local02, #128 wc
232fc     B8 FF 9F CD |  if_b	jmp	#LR__2893
23300     E7 F0 03 F6 | 	mov	ptra, fp
23304     F2 00 A0 FD | 	call	#popregs_
23308                 | _Hg010b_4_spin2_scrolldown_ret
23308     2D 00 64 FD | 	ret
2330c                 | 
2330c                 | ' 
2330c                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
2330c                 | ' 
2330c                 | ' pub crlf()
2330c                 | _Hg010b_4_spin2_crlf
2330c                 | ' 
2330c                 | ' cursor_x:=leading_spaces*2
2330c     01 00 00 FF 
23310     B6 64 06 F1 | 	add	objptr, ##694
23314     32 97 02 FB | 	rdlong	arg03, objptr
23318     01 96 66 F0 | 	shl	arg03, #1
2331c     01 00 00 FF 
23320     7A 64 86 F1 | 	sub	objptr, ##634
23324     32 97 52 FC | 	wrword	arg03, objptr
23328                 | ' cursor_y+=1
23328     02 64 06 F1 | 	add	objptr, #2
2332c     32 97 C2 FA | 	rdbyte	arg03, objptr
23330     01 96 06 F1 | 	add	arg03, #1
23334     32 97 42 FC | 	wrbyte	arg03, objptr
23338                 | ' if cursor_y>st_lines-1
23338     C3 64 06 F1 | 	add	objptr, #195
2333c     32 97 02 FB | 	rdlong	arg03, objptr
23340     01 96 86 F1 | 	sub	arg03, #1
23344     C3 64 86 F1 | 	sub	objptr, #195
23348     32 95 C2 FA | 	rdbyte	arg02, objptr
2334c     3E 64 86 F1 | 	sub	objptr, #62
23350     4B 95 5A F2 | 	cmps	arg02, arg03 wcz
23354     2C 00 90 ED |  if_be	jmp	#LR__2900
23358                 | '   scrollup2()
23358     00 92 06 F6 | 	mov	arg01, #0
2335c     01 00 00 FF 
23360     58 94 06 F6 | 	mov	arg02, ##600
23364     10 96 06 F6 | 	mov	arg03, #16
23368     64 FB BF FD | 	call	#_Hg010b_4_spin2_scrollup2
2336c                 | '   cursor_y:=st_lines-1
2336c     01 65 06 F1 | 	add	objptr, #257
23370     32 97 02 FB | 	rdlong	arg03, objptr
23374     01 96 86 F1 | 	sub	arg03, #1
23378     C3 64 86 F1 | 	sub	objptr, #195
2337c     32 97 42 FC | 	wrbyte	arg03, objptr
23380     3E 64 86 F1 | 	sub	objptr, #62
23384                 | LR__2900
23384                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
23384     3C 64 06 F1 | 	add	objptr, #60
23388     32 95 E2 FA | 	rdword	arg02, objptr
2338c     02 94 66 F0 | 	shl	arg02, #2
23390     02 64 06 F1 | 	add	objptr, #2
23394     32 97 C2 FA | 	rdbyte	arg03, objptr
23398     3E 64 86 F1 | 	sub	objptr, #62
2339c     04 96 66 F0 | 	shl	arg03, #4
233a0     04 96 06 F1 | 	add	arg03, #4
233a4     11 92 06 F6 | 	mov	arg01, #17
233a8     0C E9 BF FD | 	call	#_Hg010b_4_spin2_setspritepos
233ac                 | _Hg010b_4_spin2_crlf_ret
233ac     2D 00 64 FD | 	ret
233b0                 | 
233b0                 | ' 
233b0                 | ' 
233b0                 | ' '*************************************************************************
233b0                 | ' '                                                                        *
233b0                 | ' '  Conversions                                                           *
233b0                 | ' '                                                                        *
233b0                 | ' '*************************************************************************
233b0                 | ' 
233b0                 | ' ''---------- Convert a integer to dec string, return a pointer
233b0                 | ' 
233b0                 | ' pub inttostr(i):result |q,pos,k,j
233b0                 | _Hg010b_4_spin2_inttostr
233b0     03 CA 05 F6 | 	mov	COUNT_, #3
233b4     E8 00 A0 FD | 	call	#pushregs_
233b8     49 A7 0A F6 | 	mov	local01, arg01 wz
233bc                 | ' 
233bc                 | ' j:=i
233bc                 | ' pos:=10
233bc     0A A8 06 F6 | 	mov	local02, #10
233c0                 | ' k:=0
233c0     00 AA 06 F6 | 	mov	local03, #0
233c4                 | ' 
233c4                 | ' if (j==0)
233c4     18 00 90 5D |  if_ne	jmp	#LR__2910
233c8                 | '   n_string[0]:=48
233c8     4D 64 06 F1 | 	add	objptr, #77
233cc     32 61 48 FC | 	wrbyte	#48, objptr
233d0                 | '   n_string[1]:=0
233d0     01 64 06 F1 | 	add	objptr, #1
233d4     32 01 48 FC | 	wrbyte	#0, objptr
233d8     4E 64 86 F1 | 	sub	objptr, #78
233dc     C4 00 90 FD | 	jmp	#LR__2917
233e0                 | LR__2910
233e0                 | ' 
233e0                 | ' else
233e0                 | '   if (j<0)
233e0     53 A7 52 F6 | 	abs	local01, local01 wc
233e4                 | '     j:=0-j
233e4                 | '     k:=45
233e4     2D AA 06 C6 |  if_b	mov	local03, #45
233e8                 | ' 
233e8                 | '   n_string[11]:=0
233e8     58 64 06 F1 | 	add	objptr, #88
233ec     32 01 48 FC | 	wrbyte	#0, objptr
233f0     58 64 86 F1 | 	sub	objptr, #88
233f4     D7 24 48 FB | 	callpa	#(@LR__2912-@LR__2911)>>2,fcache_load_ptr_
233f8                 | '   repeat while (pos>-1)
233f8                 | LR__2911
233f8     00 A8 56 F2 | 	cmps	local02, #0 wc
233fc     40 00 90 CD |  if_b	jmp	#LR__2913
23400     53 7B 52 F6 | 	abs	result1, local01 wc
23404     0A 7A 16 FD | 	qdiv	result1, #10
23408                 | '     q:=j//10
23408     19 7A 62 FD | 	getqy	result1
2340c     3D 7B 82 F6 | 	negc	result1, result1
23410     53 A7 52 F6 | 	abs	local01, local01 wc
23414     0A A6 16 FD | 	qdiv	local01, #10
23418                 | '     q:=48+q
23418     30 7A 06 F1 | 	add	result1, #48
2341c                 | '     n_string[pos]:=q
2341c     54 A7 02 F6 | 	mov	local01, local02
23420     32 97 02 F6 | 	mov	arg03, objptr
23424     4D 96 06 F1 | 	add	arg03, #77
23428     4B A7 02 F1 | 	add	local01, arg03
2342c     53 7B 42 FC | 	wrbyte	result1, local01
23430                 | '     j:=j/10
23430                 | '     pos-=1
23430     01 A8 86 F1 | 	sub	local02, #1
23434     18 A6 62 FD | 	getqx	local01
23438     53 A7 82 F6 | 	negc	local01, local01
2343c     B8 FF 9F FD | 	jmp	#LR__2911
23440                 | LR__2912
23440                 | LR__2913
23440                 | '   repeat while n_string[0]==48
23440                 | LR__2914
23440     4D 64 06 F1 | 	add	objptr, #77
23444     32 97 C2 FA | 	rdbyte	arg03, objptr
23448     4D 64 86 F1 | 	sub	objptr, #77
2344c     30 96 0E F2 | 	cmp	arg03, #48 wz
23450     20 00 90 5D |  if_ne	jmp	#LR__2915
23454                 | '     bytemove(@n_string,@n_string+1,12)
23454     4D 64 06 F1 | 	add	objptr, #77
23458     32 93 02 F6 | 	mov	arg01, objptr
2345c     32 95 02 F6 | 	mov	arg02, objptr
23460     4D 64 86 F1 | 	sub	objptr, #77
23464     01 94 06 F1 | 	add	arg02, #1
23468     0C 96 06 F6 | 	mov	arg03, #12
2346c     18 14 B0 FD | 	call	#__system____builtin_memmove
23470     CC FF 9F FD | 	jmp	#LR__2914
23474                 | LR__2915
23474                 | ' 
23474                 | '   if k==45
23474     2D AA 0E F2 | 	cmp	local03, #45 wz
23478     28 00 90 5D |  if_ne	jmp	#LR__2916
2347c                 | '      bytemove(@n_string+1,@n_string,12)
2347c     4D 64 06 F1 | 	add	objptr, #77
23480     32 93 02 F6 | 	mov	arg01, objptr
23484     01 92 06 F1 | 	add	arg01, #1
23488     32 95 02 F6 | 	mov	arg02, objptr
2348c     4D 64 86 F1 | 	sub	objptr, #77
23490     0C 96 06 F6 | 	mov	arg03, #12
23494     F0 13 B0 FD | 	call	#__system____builtin_memmove
23498                 | '      n_string[0]:=k
23498     4D 64 06 F1 | 	add	objptr, #77
2349c     32 AB 42 FC | 	wrbyte	local03, objptr
234a0     4D 64 86 F1 | 	sub	objptr, #77
234a4                 | LR__2916
234a4                 | LR__2917
234a4                 | ' 
234a4                 | ' q:=@n_string
234a4     32 7B 02 F6 | 	mov	result1, objptr
234a8     4D 7A 06 F1 | 	add	result1, #77
234ac                 | ' return q
234ac     E7 F0 03 F6 | 	mov	ptra, fp
234b0     F2 00 A0 FD | 	call	#popregs_
234b4                 | _Hg010b_4_spin2_inttostr_ret
234b4     2D 00 64 FD | 	ret
234b8                 | 
234b8                 | ' 
234b8                 | ' '**********************************************************************************
234b8                 | ' '
234b8                 | ' '        Blitting
234b8                 | ' '
234b8                 | ' '**********************************************************************************
234b8                 | ' 
234b8                 | ' pub blit(f,x1a,y1a,x2a,y2a,s1,t,x1b,y1b,s2) | y
234b8                 | _Hg010b_4_spin2_blit
234b8     18 CA 05 F6 | 	mov	COUNT_, #24
234bc     E8 00 A0 FD | 	call	#pushregs_
234c0     49 A7 02 F6 | 	mov	local01, arg01
234c4     4A A9 02 F6 | 	mov	local02, arg02
234c8     4B AB 02 F6 | 	mov	local03, arg03
234cc     4C AD 02 F6 | 	mov	local04, arg04
234d0     4D AF 02 F6 | 	mov	local05, arg05
234d4     4E B1 02 F6 | 	mov	local06, arg06
234d8     4F B3 02 F6 | 	mov	local07, arg07
234dc     50 B5 02 F6 | 	mov	local08, arg08
234e0     51 B7 02 F6 | 	mov	local09, arg09
234e4     52 B9 02 F6 | 	mov	local10, arg10
234e8                 | ' 
234e8                 | ' if ((f>=$80000) && (t>=$80000)) ' todo: check if the fields overlap and reorder the move
234e8     00 04 00 FF 
234ec     00 A6 56 F2 | 	cmps	local01, ##524288 wc
234f0     00 04 00 3F 
234f4     00 B2 56 32 |  if_ae	cmps	local07, ##524288 wc
234f8     98 01 90 CD |  if_b	jmp	#LR__2924
234fc     56 A9 5A F2 | 	cmps	local02, local04 wcz
23500     54 BB 02 16 |  if_a	mov	local11, local02
23504     56 A9 02 16 |  if_a	mov	local02, local04
23508     5D AD 02 16 |  if_a	mov	local04, local11
2350c     57 AB 5A F2 | 	cmps	local03, local05 wcz
23510     55 BB 02 16 |  if_a	mov	local11, local03
23514     57 AB 02 16 |  if_a	mov	local03, local05
23518     58 AB 02 FD | 	qmul	local03, local06
2351c                 | '   if x1a>x2a
2351c                 | '     x1a,x2a:=x2a,x1a
2351c                 | '   if y1a>y2a
2351c                 | '     y1a,y2a:=y2a,y1a  
2351c     5D AF 02 16 |  if_a	mov	local05, local11
23520                 | '   if x2a-x1a>1023 
23520     56 BB 02 F6 | 	mov	local11, local04
23524     54 BB 82 F1 | 	sub	local11, local02
23528     02 00 00 FF 
2352c     00 BA 56 F2 | 	cmps	local11, ##1024 wc
23530                 | '     x2a:=x1a+1023 ' limit the line to 1024
23530     54 AD 02 36 |  if_ae	mov	local04, local02
23534     01 00 00 3F 
23538     FF AD 06 31 |  if_ae	add	local04, ##1023
2353c                 | '   if t+x1a+y1a*s1>f+x1b+y1b*s2
2353c     59 BD 02 F6 | 	mov	local12, local07
23540     54 BD 02 F1 | 	add	local12, local02
23544     18 BA 62 FD | 	getqx	local11
23548     5C B7 02 FD | 	qmul	local09, local10
2354c     5D BD 02 F1 | 	add	local12, local11
23550     53 BF 02 F6 | 	mov	local13, local01
23554     5A BF 02 F1 | 	add	local13, local08
23558     18 BA 62 FD | 	getqx	local11
2355c     5D BF 02 F1 | 	add	local13, local11
23560     5F BD 5A F2 | 	cmps	local12, local13 wcz
23564     98 00 90 ED |  if_be	jmp	#LR__2921
23568                 | '     repeat y from y1a to y2a
23568     55 C1 02 F6 | 	mov	local14, local03
2356c     55 AF 52 F2 | 	cmps	local05, local03 wc
23570     01 C2 86 F6 | 	negc	local15, #1
23574     57 C5 02 F6 | 	mov	local16, local05
23578     61 C5 02 F1 | 	add	local16, local15
2357c     0B 00 00 FF 
23580     CC 64 06 F1 | 	add	objptr, ##5836
23584                 | LR__2920
23584     58 C1 02 FD | 	qmul	local14, local06
23588                 | '   '    writeln(string("I am here"))
23588                 | '       ram.read1($7E800, f+(y)*s1+x1a, x2a-x1a+1)
23588     53 95 02 F6 | 	mov	arg02, local01
2358c     56 97 02 F6 | 	mov	arg03, local04
23590     54 97 82 F1 | 	sub	arg03, local02
23594     01 96 06 F1 | 	add	arg03, #1
23598     F4 03 00 FF 
2359c     00 92 06 F6 | 	mov	arg01, ##518144
235a0     18 BE 62 FD | 	getqx	local13
235a4     5F 95 02 F1 | 	add	arg02, local13
235a8     54 95 02 F1 | 	add	arg02, local02
235ac     B4 04 B0 FD | 	call	#_psram4_spin2_read1
235b0     5B BF 02 F6 | 	mov	local13, local09
235b4     55 BF 82 F1 | 	sub	local13, local03
235b8     60 BF 02 F1 | 	add	local13, local14
235bc     5C BF 02 FD | 	qmul	local13, local10
235c0                 | '       ram.write($7E800, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)
235c0     59 95 02 F6 | 	mov	arg02, local07
235c4     56 97 02 F6 | 	mov	arg03, local04
235c8     54 97 82 F1 | 	sub	arg03, local02
235cc     01 96 06 F1 | 	add	arg03, #1
235d0     F4 03 00 FF 
235d4     00 92 06 F6 | 	mov	arg01, ##518144
235d8     18 BE 62 FD | 	getqx	local13
235dc     5F 95 02 F1 | 	add	arg02, local13
235e0     5A 95 02 F1 | 	add	arg02, local08
235e4     18 05 B0 FD | 	call	#_psram4_spin2_write
235e8     61 C1 02 F1 | 	add	local14, local15
235ec     62 C1 0A F2 | 	cmp	local14, local16 wz
235f0     90 FF 9F 5D |  if_ne	jmp	#LR__2920
235f4     0B 00 00 FF 
235f8     CC 64 86 F1 | 	sub	objptr, ##5836
235fc     94 00 90 FD | 	jmp	#LR__2923
23600                 | LR__2921
23600                 | '   else
23600                 | '     repeat y from y2a to y1a
23600     57 C1 02 F6 | 	mov	local14, local05
23604     57 AB 52 F2 | 	cmps	local03, local05 wc
23608     01 C6 86 F6 | 	negc	local17, #1
2360c     55 C9 02 F6 | 	mov	local18, local03
23610     63 C9 02 F1 | 	add	local18, local17
23614     0B 00 00 FF 
23618     CC 64 06 F1 | 	add	objptr, ##5836
2361c                 | LR__2922
2361c     58 C1 02 FD | 	qmul	local14, local06
23620                 | '  '     writeln(string("I am there"))
23620                 | '       ram.read1($7E800, f+(y)*s1+x1a, x2a-x1a+1)
23620     53 95 02 F6 | 	mov	arg02, local01
23624     56 97 02 F6 | 	mov	arg03, local04
23628     54 97 82 F1 | 	sub	arg03, local02
2362c     01 96 06 F1 | 	add	arg03, #1
23630     F4 03 00 FF 
23634     00 92 06 F6 | 	mov	arg01, ##518144
23638     18 C4 62 FD | 	getqx	local16
2363c     62 95 02 F1 | 	add	arg02, local16
23640     54 95 02 F1 | 	add	arg02, local02
23644     1C 04 B0 FD | 	call	#_psram4_spin2_read1
23648     5B C5 02 F6 | 	mov	local16, local09
2364c     55 C5 82 F1 | 	sub	local16, local03
23650     60 C5 02 F1 | 	add	local16, local14
23654     5C C5 02 FD | 	qmul	local16, local10
23658                 | '       ram.write($7E800, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)     
23658     59 95 02 F6 | 	mov	arg02, local07
2365c     56 97 02 F6 | 	mov	arg03, local04
23660     54 97 82 F1 | 	sub	arg03, local02
23664     01 96 06 F1 | 	add	arg03, #1
23668     F4 03 00 FF 
2366c     00 92 06 F6 | 	mov	arg01, ##518144
23670     18 C4 62 FD | 	getqx	local16
23674     62 95 02 F1 | 	add	arg02, local16
23678     5A 95 02 F1 | 	add	arg02, local08
2367c     80 04 B0 FD | 	call	#_psram4_spin2_write
23680     63 C1 02 F1 | 	add	local14, local17
23684     64 C1 0A F2 | 	cmp	local14, local18 wz
23688     90 FF 9F 5D |  if_ne	jmp	#LR__2922
2368c     0B 00 00 FF 
23690     CC 64 86 F1 | 	sub	objptr, ##5836
23694                 | LR__2923
23694                 | LR__2924
23694                 | '     
23694                 | ' if ((f>=$80000) && (t<$80000)) 
23694     00 04 00 FF 
23698     00 A6 56 F2 | 	cmps	local01, ##524288 wc
2369c     80 00 90 CD |  if_b	jmp	#LR__2926
236a0     00 04 00 FF 
236a4     00 B2 56 F2 | 	cmps	local07, ##524288 wc
236a8     74 00 90 3D |  if_ae	jmp	#LR__2926
236ac                 | '   repeat y from y1a to y2a
236ac     55 C1 02 F6 | 	mov	local14, local03
236b0     55 AF 52 F2 | 	cmps	local05, local03 wc
236b4     01 CA 86 F6 | 	negc	local19, #1
236b8     57 CD 02 F6 | 	mov	local20, local05
236bc     65 CD 02 F1 | 	add	local20, local19
236c0     0B 00 00 FF 
236c4     CC 64 06 F1 | 	add	objptr, ##5836
236c8                 | LR__2925
236c8     5B C9 02 F6 | 	mov	local18, local09
236cc     55 C9 82 F1 | 	sub	local18, local03
236d0     60 C9 02 F1 | 	add	local18, local14
236d4     5C C9 02 FD | 	qmul	local18, local10
236d8                 | '     ram.read1(t+(y1b-y1a+y)*s2+x1b,f+(y)*s1+x1a,x2a-x1a+1)
236d8     59 93 02 F6 | 	mov	arg01, local07
236dc     18 C8 62 FD | 	getqx	local18
236e0     58 C1 02 FD | 	qmul	local14, local06
236e4     64 93 02 F1 | 	add	arg01, local18
236e8     5A 93 02 F1 | 	add	arg01, local08
236ec     53 95 02 F6 | 	mov	arg02, local01
236f0     56 97 02 F6 | 	mov	arg03, local04
236f4     54 97 82 F1 | 	sub	arg03, local02
236f8     01 96 06 F1 | 	add	arg03, #1
236fc     18 C8 62 FD | 	getqx	local18
23700     64 95 02 F1 | 	add	arg02, local18
23704     54 95 02 F1 | 	add	arg02, local02
23708     58 03 B0 FD | 	call	#_psram4_spin2_read1
2370c     65 C1 02 F1 | 	add	local14, local19
23710     66 C1 0A F2 | 	cmp	local14, local20 wz
23714     B0 FF 9F 5D |  if_ne	jmp	#LR__2925
23718     0B 00 00 FF 
2371c     CC 64 86 F1 | 	sub	objptr, ##5836
23720                 | LR__2926
23720                 | '     
23720                 | ' if ((f<$80000) && (t>=$80000)) 
23720     00 04 00 FF 
23724     00 A6 56 F2 | 	cmps	local01, ##524288 wc
23728     84 00 90 3D |  if_ae	jmp	#LR__2928
2372c     00 04 00 FF 
23730     00 B2 56 F2 | 	cmps	local07, ##524288 wc
23734     78 00 90 CD |  if_b	jmp	#LR__2928
23738                 | '   t:=t & $FFFFFFF
23738     7C B2 06 F4 | 	bitl	local07, #124
2373c                 | '   repeat y from y1a to y2a
2373c     55 C1 02 F6 | 	mov	local14, local03
23740     55 AF 52 F2 | 	cmps	local05, local03 wc
23744     01 CE 86 F6 | 	negc	local21, #1
23748     57 D1 02 F6 | 	mov	local22, local05
2374c     67 D1 02 F1 | 	add	local22, local21
23750     0B 00 00 FF 
23754     CC 64 06 F1 | 	add	objptr, ##5836
23758                 | LR__2927
23758     58 C1 02 FD | 	qmul	local14, local06
2375c                 | '     ram.write(f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
2375c     53 93 02 F6 | 	mov	arg01, local01
23760     5B CD 02 F6 | 	mov	local20, local09
23764     55 CD 82 F1 | 	sub	local20, local03
23768     60 CD 02 F1 | 	add	local20, local14
2376c     18 CA 62 FD | 	getqx	local19
23770     5C CD 02 FD | 	qmul	local20, local10
23774     65 93 02 F1 | 	add	arg01, local19
23778     54 93 02 F1 | 	add	arg01, local02
2377c     59 95 02 F6 | 	mov	arg02, local07
23780     56 97 02 F6 | 	mov	arg03, local04
23784     54 97 82 F1 | 	sub	arg03, local02
23788     01 96 06 F1 | 	add	arg03, #1
2378c     18 CC 62 FD | 	getqx	local20
23790     66 95 02 F1 | 	add	arg02, local20
23794     5A 95 02 F1 | 	add	arg02, local08
23798     64 03 B0 FD | 	call	#_psram4_spin2_write
2379c     67 C1 02 F1 | 	add	local14, local21
237a0     68 C1 0A F2 | 	cmp	local14, local22 wz
237a4     B0 FF 9F 5D |  if_ne	jmp	#LR__2927
237a8     0B 00 00 FF 
237ac     CC 64 86 F1 | 	sub	objptr, ##5836
237b0                 | LR__2928
237b0                 | '     
237b0                 | ' if ((f<$80000) && (t<$80000)) 
237b0     00 04 00 FF 
237b4     00 A6 56 F2 | 	cmps	local01, ##524288 wc
237b8     00 04 00 CF 
237bc     00 B2 56 C2 |  if_b	cmps	local07, ##524288 wc
237c0     64 00 90 3D |  if_ae	jmp	#LR__2930
237c4                 | '   repeat y from y1a to y2a
237c4     55 C1 02 F6 | 	mov	local14, local03
237c8     55 AF 52 F2 | 	cmps	local05, local03 wc
237cc     01 D2 86 F6 | 	negc	local23, #1
237d0     57 D5 02 F6 | 	mov	local24, local05
237d4     69 D5 02 F1 | 	add	local24, local23
237d8                 | LR__2929
237d8     58 C1 02 FD | 	qmul	local14, local06
237dc                 | '     bytemove (f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
237dc     53 93 02 F6 | 	mov	arg01, local01
237e0     5B D1 02 F6 | 	mov	local22, local09
237e4     55 D1 82 F1 | 	sub	local22, local03
237e8     60 D1 02 F1 | 	add	local22, local14
237ec     18 CE 62 FD | 	getqx	local21
237f0     5C D1 02 FD | 	qmul	local22, local10
237f4     67 93 02 F1 | 	add	arg01, local21
237f8     54 93 02 F1 | 	add	arg01, local02
237fc     59 95 02 F6 | 	mov	arg02, local07
23800     56 97 02 F6 | 	mov	arg03, local04
23804     54 97 82 F1 | 	sub	arg03, local02
23808     01 96 06 F1 | 	add	arg03, #1
2380c     18 D0 62 FD | 	getqx	local22
23810     68 95 02 F1 | 	add	arg02, local22
23814     5A 95 02 F1 | 	add	arg02, local08
23818     6C 10 B0 FD | 	call	#__system____builtin_memmove
2381c     69 C1 02 F1 | 	add	local14, local23
23820     6A C1 0A F2 | 	cmp	local14, local24 wz
23824     B0 FF 9F 5D |  if_ne	jmp	#LR__2929
23828                 | LR__2930
23828     E7 F0 03 F6 | 	mov	ptra, fp
2382c     F2 00 A0 FD | 	call	#popregs_
23830                 | _Hg010b_4_spin2_blit_ret
23830     2D 00 64 FD | 	ret
23834                 | 
23834                 | ' 
23834                 | ' '..............................................................................
23834                 | ' 
23834                 | ' {{
23834                 | ' }}
23834                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
23834                 | _psram4_spin2_startx
23834     04 CA 05 F6 | 	mov	COUNT_, #4
23838     E8 00 A0 FD | 	call	#pushregs_
2383c     49 A7 02 F6 | 	mov	local01, arg01
23840     4B A9 02 F6 | 	mov	local02, arg03
23844     4C AB 02 F6 | 	mov	local03, arg04
23848                 | '     stop() ' restart driver if required
23848     58 01 B0 FD | 	call	#_psram4_spin2_stop
2384c     00 A6 0E F2 | 	cmp	local01, #0 wz
23850     14 A6 06 AB |  if_e	rdlong	local01, #20
23854     53 95 52 F6 | 	abs	arg02, local01 wc
23858     84 1E 00 FF 
2385c     00 95 16 FD | 	qdiv	arg02, ##4000000
23860                 | ' 
23860                 | '     ' use current frequency if none specified
23860                 | ' 
23860                 | '     if freq == 0 
23860                 | '         freq := clkfreq 
23860                 | ' 
23860                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
23860                 | ' 
23860                 | '     burst := (((MAX_CS_LOW_USEC*(freq/4000000)) - 132) >> 4) << 4  ' some sane rounded value
23860                 | '     if burst < 0
23860                 | '         return ERR_TOO_SLOW 'P2 frequency is too low for any 8us transfers
23860     18 94 62 FD | 	getqx	arg02
23864     4A 99 82 F6 | 	negc	arg04, arg02
23868     03 98 66 F0 | 	shl	arg04, #3
2386c     84 98 86 F1 | 	sub	arg04, #132
23870     04 98 46 F0 | 	shr	arg04, #4
23874     04 98 66 F0 | 	shl	arg04, #4
23878     00 98 56 F2 | 	cmps	arg04, #0 wc
2387c     0E 7A 66 C6 |  if_b	neg	result1, #14
23880     14 01 90 CD |  if_b	jmp	#LR__2944
23884                 | ' 
23884                 | '     ' compute the input delay
23884                 | ' 
23884                 | '     if delay <= 0
23884     01 A8 56 F2 | 	cmps	local02, #1 wc
23888     10 00 90 3D |  if_ae	jmp	#LR__2940
2388c                 | '         delay := lookupDelay(freq)
2388c     53 93 02 F6 | 	mov	arg01, local01
23890     BC 04 B0 FD | 	call	#_psram4_spin2_lookupDelay
23894     3D A9 02 F6 | 	mov	local02, result1
23898     04 00 90 FD | 	jmp	#LR__2941
2389c                 | LR__2940
2389c                 | '     else
2389c                 | '         delay <#= $f ' limit to 15
2389c     0F A8 66 F3 | 	fles	local02, #15
238a0                 | LR__2941
238a0                 | ' 
238a0                 | '     ' create our lock
238a0                 | ' 
238a0                 | '     driverlock := LOCKNEW()  
238a0     00 7A 06 F6 | 	mov	result1, #0
238a4     04 7A 62 FD | 	locknew	result1
238a8     04 73 06 F1 | 	add	ptr__psram4_spin2_dat__, #260
238ac     39 7B 62 FC | 	wrlong	result1, ptr__psram4_spin2_dat__
238b0                 | '     if driverlock == -1
238b0     04 73 86 F1 | 	sub	ptr__psram4_spin2_dat__, #260
238b4     FF FF 7F FF 
238b8     FF 7B 0E F2 | 	cmp	result1, ##-1 wz
238bc                 | '         return ERR_NO_LOCK
238bc     1A 7A 66 A6 |  if_e	neg	result1, #26
238c0     D4 00 90 AD |  if_e	jmp	#LR__2944
238c4                 | ' 
238c4                 | '     ' patch in the proper data and HUB addresses to the startup structure
238c4                 | ' 
238c4                 | '     long[@startupData][0]:=clkfreq
238c4     14 A6 06 FB | 	rdlong	local01, #20
238c8     28 73 06 F1 | 	add	ptr__psram4_spin2_dat__, #296
238cc     39 A7 62 FC | 	wrlong	local01, ptr__psram4_spin2_dat__
238d0                 | '     long[@startupData][5]:=@deviceData
238d0     39 A7 02 F6 | 	mov	local01, ptr__psram4_spin2_dat__
238d4     20 A6 06 F1 | 	add	local01, #32
238d8     39 95 02 F6 | 	mov	arg02, ptr__psram4_spin2_dat__
238dc     14 94 06 F1 | 	add	arg02, #20
238e0     4A A7 62 FC | 	wrlong	local01, arg02
238e4                 | '     long[@startupData][6]:=@qosData
238e4     39 A7 02 F6 | 	mov	local01, ptr__psram4_spin2_dat__
238e8     A0 A6 06 F1 | 	add	local01, #160
238ec     39 95 02 F6 | 	mov	arg02, ptr__psram4_spin2_dat__
238f0     18 94 06 F1 | 	add	arg02, #24
238f4     4A A7 62 FC | 	wrlong	local01, arg02
238f8                 | '     long[@startupData][7]:=$7FF00
238f8     39 A7 02 F6 | 	mov	local01, ptr__psram4_spin2_dat__
238fc     1C A6 06 F1 | 	add	local01, #28
23900     FF 03 80 FF 
23904     53 01 6A FC | 	wrlong	##524032, local01
23908                 | ' 
23908                 | '     ' setup some default bank and QoS parameter values
23908                 | ' 
23908                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
23908     20 72 06 F1 | 	add	ptr__psram4_spin2_dat__, #32
2390c     39 93 02 F6 | 	mov	arg01, ptr__psram4_spin2_dat__
23910     48 73 86 F1 | 	sub	ptr__psram4_spin2_dat__, #328
23914     10 98 66 F0 | 	shl	arg04, #16
23918     0C A8 66 F0 | 	shl	local02, #12
2391c     54 99 42 F5 | 	or	arg04, local02
23920     16 98 46 F5 | 	or	arg04, #22
23924     4C 95 02 F6 | 	mov	arg02, arg04
23928     02 96 06 F6 | 	mov	arg03, #2
2392c     E0 00 A0 FD | 	call	#\builtin_longfill_
23930                 | '     longfill(@qosData, $7FFF0000, 8)
23930     39 93 02 F6 | 	mov	arg01, ptr__psram4_spin2_dat__
23934     C8 93 06 F1 | 	add	arg01, #456
23938     07 96 06 F6 | 	mov	arg03, #7
2393c     28 96 62 FD | 	setq	arg03
23940     80 FF BF FF 
23944     49 01 68 FC | 	wrlong	##2147418112, arg01
23948                 | ' 
23948                 | '     ' get the address of the PSRAM memory driver so we can start it
23948                 | ' 
23948                 | '     driverAddr:= driver.getDriverAddr()
23948                 | '     return @driver_start
23948     3A 95 02 F6 | 	mov	arg02, ptr__psram4drv_spin2_dat__
2394c                 | ' 
2394c                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
2394c                 | ' 
2394c                 | '     if desiredcog < 0
2394c     00 AA 56 F2 | 	cmps	local03, #0 wc
23950                 | '         desiredcog := NEWCOG
23950     10 AA 06 C6 |  if_b	mov	local03, #16
23954                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
23954     39 97 02 F6 | 	mov	arg03, ptr__psram4_spin2_dat__
23958     28 97 06 F1 | 	add	arg03, #296
2395c     55 AD 02 F6 | 	mov	local04, local03
23960     28 96 62 FD | 	setq	arg03
23964     4A AD F2 FC | 	coginit	local04, arg02 wc
23968     01 AC 66 C6 |  if_b	neg	local04, #1
2396c     00 73 06 F1 | 	add	ptr__psram4_spin2_dat__, #256
23970     39 AD 62 FC | 	wrlong	local04, ptr__psram4_spin2_dat__
23974     00 73 86 F1 | 	sub	ptr__psram4_spin2_dat__, #256
23978     D7 08 48 FB | 	callpa	#(@LR__2943-@LR__2942)>>2,fcache_load_ptr_
2397c                 | '     repeat until long[@startupData] == 0 
2397c                 | LR__2942
2397c     39 AD 02 F6 | 	mov	local04, ptr__psram4_spin2_dat__
23980     28 AD 06 F1 | 	add	local04, #296
23984     56 AD 0A FB | 	rdlong	local04, local04 wz
23988     F0 FF 9F 5D |  if_ne	jmp	#LR__2942
2398c                 | LR__2943
2398c                 | ' 
2398c                 | '     return drivercog 
2398c     00 73 06 F1 | 	add	ptr__psram4_spin2_dat__, #256
23990     39 7B 02 FB | 	rdlong	result1, ptr__psram4_spin2_dat__
23994     00 73 86 F1 | 	sub	ptr__psram4_spin2_dat__, #256
23998                 | LR__2944
23998     E7 F0 03 F6 | 	mov	ptra, fp
2399c     F2 00 A0 FD | 	call	#popregs_
239a0                 | _psram4_spin2_startx_ret
239a0     2D 00 64 FD | 	ret
239a4                 | 
239a4                 | ' 
239a4                 | ' '..............................................................................
239a4                 | ' 
239a4                 | ' {{
239a4                 | ' }}
239a4                 | ' PUB stop() : i
239a4                 | _psram4_spin2_stop
239a4     00 80 06 F6 | 	mov	_var01, #0
239a8                 | '     if drivercog <> -1
239a8     00 73 06 F1 | 	add	ptr__psram4_spin2_dat__, #256
239ac     39 93 02 FB | 	rdlong	arg01, ptr__psram4_spin2_dat__
239b0     00 73 86 F1 | 	sub	ptr__psram4_spin2_dat__, #256
239b4     FF FF 7F FF 
239b8     FF 93 0E F2 | 	cmp	arg01, ##-1 wz
239bc     70 00 90 AD |  if_e	jmp	#LR__2953
239c0                 | '         cogstop(drivercog) ' a rather brutal stop
239c0     00 73 06 F1 | 	add	ptr__psram4_spin2_dat__, #256
239c4     39 93 02 FB | 	rdlong	arg01, ptr__psram4_spin2_dat__
239c8     00 73 86 F1 | 	sub	ptr__psram4_spin2_dat__, #256
239cc     03 92 62 FD | 	cogstop	arg01
239d0     D7 26 48 FB | 	callpa	#(@LR__2952-@LR__2950)>>2,fcache_load_ptr_
239d4                 | '         repeat i from 0 to 7
239d4                 | LR__2950
239d4                 | '             if long[$7FF00+i*3] < 0
239d4     40 7B 02 F6 | 	mov	result1, _var01
239d8     01 7A 66 F0 | 	shl	result1, #1
239dc     40 7B 02 F1 | 	add	result1, _var01
239e0     FF 03 00 FF 
239e4     00 93 06 F6 | 	mov	arg01, ##524032
239e8     3D 93 02 F1 | 	add	arg01, result1
239ec     49 7B 02 FB | 	rdlong	result1, arg01
239f0     00 7A 56 F2 | 	cmps	result1, #0 wc
239f4     1C 00 90 3D |  if_ae	jmp	#LR__2951
239f8                 | '                 long[$7FF00+i*3] := -ERR_ABORTED ' abort request
239f8     40 7B 02 F6 | 	mov	result1, _var01
239fc     01 7A 66 F0 | 	shl	result1, #1
23a00     40 7B 02 F1 | 	add	result1, _var01
23a04     FF 03 00 FF 
23a08     00 93 06 F6 | 	mov	arg01, ##524032
23a0c     3D 93 02 F1 | 	add	arg01, result1
23a10     49 21 68 FC | 	wrlong	#16, arg01
23a14                 | LR__2951
23a14     01 80 06 F1 | 	add	_var01, #1
23a18     08 80 56 F2 | 	cmps	_var01, #8 wc
23a1c     B4 FF 9F CD |  if_b	jmp	#LR__2950
23a20                 | LR__2952
23a20                 | '         drivercog := -1
23a20     00 73 06 F1 | 	add	ptr__psram4_spin2_dat__, #256
23a24     FF FF FF FF 
23a28     39 FF 6B FC | 	wrlong	##-1, ptr__psram4_spin2_dat__
23a2c     00 73 86 F1 | 	sub	ptr__psram4_spin2_dat__, #256
23a30                 | LR__2953
23a30                 | '     if driverlock <> -1
23a30     04 73 06 F1 | 	add	ptr__psram4_spin2_dat__, #260
23a34     39 93 02 FB | 	rdlong	arg01, ptr__psram4_spin2_dat__
23a38     04 73 86 F1 | 	sub	ptr__psram4_spin2_dat__, #260
23a3c     FF FF 7F FF 
23a40     FF 93 0E F2 | 	cmp	arg01, ##-1 wz
23a44                 | '         LOCKRET(driverlock)
23a44     04 73 06 51 |  if_ne	add	ptr__psram4_spin2_dat__, #260
23a48     39 93 02 5B |  if_ne	rdlong	arg01, ptr__psram4_spin2_dat__
23a4c     05 92 62 5D |  if_ne	lockret	arg01
23a50                 | '         driverlock := -1
23a50     FF FF FF 5F 
23a54     39 FF 6B 5C |  if_ne	wrlong	##-1, ptr__psram4_spin2_dat__
23a58     04 73 86 51 |  if_ne	sub	ptr__psram4_spin2_dat__, #260
23a5c     40 7B 02 F6 | 	mov	result1, _var01
23a60                 | _psram4_spin2_stop_ret
23a60     2D 00 64 FD | 	ret
23a64                 | 
23a64                 | ' 
23a64                 | ' '..............................................................................
23a64                 | ' 
23a64                 | ' {{
23a64                 | ' }}
23a64                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
23a64                 | _psram4_spin2_read1
23a64                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
23a64                 | '     if drivercog == -1 ' driver must be running
23a64     00 73 06 F1 | 	add	ptr__psram4_spin2_dat__, #256
23a68     39 81 02 FB | 	rdlong	_var01, ptr__psram4_spin2_dat__
23a6c     00 73 86 F1 | 	sub	ptr__psram4_spin2_dat__, #256
23a70     FF FF 7F FF 
23a74     FF 81 0E F2 | 	cmp	_var01, ##-1 wz
23a78                 | '         return ERR_INACTIVE
23a78     0F 7A 66 A6 |  if_e	neg	result1, #15
23a7c     7C 00 90 AD |  if_e	jmp	#LR__2961
23a80                 | '     if count == 0 ' don't even bother reading
23a80     00 96 0E F2 | 	cmp	arg03, #0 wz
23a84                 | '         return 0
23a84     00 7A 06 A6 |  if_e	mov	result1, #0
23a88     70 00 90 AD |  if_e	jmp	#LR__2961
23a8c                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
23a8c     00 7A 06 F6 | 	mov	result1, #0
23a90     01 7A 62 FD | 	cogid	result1
23a94     3D 81 02 F6 | 	mov	_var01, result1
23a98     01 80 66 F0 | 	shl	_var01, #1
23a9c     3D 81 02 F1 | 	add	_var01, result1
23aa0     02 80 66 F0 | 	shl	_var01, #2
23aa4     FF 03 00 FF 
23aa8     00 83 06 F6 | 	mov	_var02, ##524032
23aac     40 83 02 F1 | 	add	_var02, _var01
23ab0                 | '     if long[mailbox] < 0
23ab0     41 81 02 FB | 	rdlong	_var01, _var02
23ab4     00 80 56 F2 | 	cmps	_var01, #0 wc
23ab8                 | '         return ERR_MAILBOX_BUSY
23ab8     1C 7A 66 C6 |  if_b	neg	result1, #28
23abc     3C 00 90 CD |  if_b	jmp	#LR__2961
23ac0                 | '     long[mailbox][2] := count
23ac0     08 82 06 F1 | 	add	_var02, #8
23ac4     41 97 62 FC | 	wrlong	arg03, _var02
23ac8                 | '     long[mailbox][1] := dstHubAddr
23ac8     04 82 86 F1 | 	sub	_var02, #4
23acc     41 93 62 FC | 	wrlong	arg01, _var02
23ad0     04 82 86 F1 | 	sub	_var02, #4
23ad4                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $0ffffff) ' trigger burst read operation
23ad4     4A 85 02 F6 | 	mov	_var03, arg02
23ad8     F8 84 06 F4 | 	bitl	_var03, #248
23adc     00 00 58 FF 
23ae0     00 80 06 F6 | 	mov	_var01, ##-1342177280
23ae4     42 81 02 F1 | 	add	_var01, _var03
23ae8     41 81 62 FC | 	wrlong	_var01, _var02
23aec                 | '     repeat
23aec                 | LR__2960
23aec                 | '         result := long[mailbox]    
23aec     41 85 02 FB | 	rdlong	_var03, _var02
23af0     00 84 56 F2 | 	cmps	_var03, #0 wc
23af4     F4 FF 9F CD |  if_b	jmp	#LR__2960
23af8                 | '     while result < 0   
23af8                 | '     return -result                       'return success or error
23af8     42 7B 62 F6 | 	neg	result1, _var03
23afc                 | LR__2961
23afc                 | _psram4_spin2_read1_ret
23afc     2D 00 64 FD | 	ret
23b00                 | 
23b00                 | ' 
23b00                 | ' '..............................................................................
23b00                 | ' 
23b00                 | ' {{
23b00                 | ' }}
23b00                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
23b00                 | _psram4_spin2_write
23b00                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
23b00                 | '     if drivercog == -1 ' driver must be running
23b00     00 73 06 F1 | 	add	ptr__psram4_spin2_dat__, #256
23b04     39 81 02 FB | 	rdlong	_var01, ptr__psram4_spin2_dat__
23b08     00 73 86 F1 | 	sub	ptr__psram4_spin2_dat__, #256
23b0c     FF FF 7F FF 
23b10     FF 81 0E F2 | 	cmp	_var01, ##-1 wz
23b14                 | '         return ERR_INACTIVE
23b14     0F 7A 66 A6 |  if_e	neg	result1, #15
23b18     7C 00 90 AD |  if_e	jmp	#LR__2971
23b1c                 | '     if count == 0 ' don't even bother writing
23b1c     00 96 0E F2 | 	cmp	arg03, #0 wz
23b20                 | '         return 0
23b20     00 7A 06 A6 |  if_e	mov	result1, #0
23b24     70 00 90 AD |  if_e	jmp	#LR__2971
23b28                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
23b28     00 7A 06 F6 | 	mov	result1, #0
23b2c     01 7A 62 FD | 	cogid	result1
23b30     3D 81 02 F6 | 	mov	_var01, result1
23b34     01 80 66 F0 | 	shl	_var01, #1
23b38     3D 81 02 F1 | 	add	_var01, result1
23b3c     02 80 66 F0 | 	shl	_var01, #2
23b40     FF 03 00 FF 
23b44     00 83 06 F6 | 	mov	_var02, ##524032
23b48     40 83 02 F1 | 	add	_var02, _var01
23b4c                 | '     if long[mailbox] < 0
23b4c     41 81 02 FB | 	rdlong	_var01, _var02
23b50     00 80 56 F2 | 	cmps	_var01, #0 wc
23b54                 | '         return ERR_MAILBOX_BUSY
23b54     1C 7A 66 C6 |  if_b	neg	result1, #28
23b58     3C 00 90 CD |  if_b	jmp	#LR__2971
23b5c                 | '     long[mailbox][2] := count
23b5c     08 82 06 F1 | 	add	_var02, #8
23b60     41 97 62 FC | 	wrlong	arg03, _var02
23b64                 | '     long[mailbox][1] := srcHubAddr
23b64     04 82 86 F1 | 	sub	_var02, #4
23b68     41 93 62 FC | 	wrlong	arg01, _var02
23b6c     04 82 86 F1 | 	sub	_var02, #4
23b70                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $0ffffff) ' trigger burst write operation
23b70     4A 85 02 F6 | 	mov	_var03, arg02
23b74     F8 84 06 F4 | 	bitl	_var03, #248
23b78     00 00 78 FF 
23b7c     00 80 06 F6 | 	mov	_var01, ##-268435456
23b80     42 81 02 F1 | 	add	_var01, _var03
23b84     41 81 62 FC | 	wrlong	_var01, _var02
23b88                 | '     repeat
23b88                 | LR__2970
23b88                 | '         result := long[mailbox]    
23b88     41 85 02 FB | 	rdlong	_var03, _var02
23b8c     00 84 56 F2 | 	cmps	_var03, #0 wc
23b90     F4 FF 9F CD |  if_b	jmp	#LR__2970
23b94                 | '     while result < 0   
23b94                 | '     return -result                       'return success or error
23b94     42 7B 62 F6 | 	neg	result1, _var03
23b98                 | LR__2971
23b98                 | _psram4_spin2_write_ret
23b98     2D 00 64 FD | 	ret
23b9c                 | 
23b9c                 | ' 
23b9c                 | ' ' generalized fill
23b9c                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
23b9c                 | _psram4_spin2_fill
23b9c     49 81 02 F6 | 	mov	_var01, arg01
23ba0     4A 83 02 F6 | 	mov	_var02, arg02
23ba4     4B 85 02 F6 | 	mov	_var03, arg03
23ba8     4D 87 02 F6 | 	mov	_var04, arg05
23bac                 | '     case datasize 
23bac     01 86 86 F1 | 	sub	_var04, #1
23bb0     04 86 26 F3 | 	fle	_var04, #4
23bb4     30 86 62 FD | 	jmprel	_var04
23bb8                 | LR__2980
23bb8     10 00 90 FD | 	jmp	#LR__2981
23bbc     18 00 90 FD | 	jmp	#LR__2982
23bc0     2C 00 90 FD | 	jmp	#LR__2984
23bc4     1C 00 90 FD | 	jmp	#LR__2983
23bc8     24 00 90 FD | 	jmp	#LR__2984
23bcc                 | LR__2981
23bcc                 | '         1: req := driver.R_WRITEBYTE
23bcc     00 00 60 FF 
23bd0     00 88 06 F6 | 	mov	_var05, ##-1073741824
23bd4     20 00 90 FD | 	jmp	#LR__2985
23bd8                 | LR__2982
23bd8                 | '         2: req := driver.R_WRITEWORD
23bd8     00 00 68 FF 
23bdc     00 88 06 F6 | 	mov	_var05, ##-805306368
23be0     14 00 90 FD | 	jmp	#LR__2985
23be4                 | LR__2983
23be4                 | '         4: req := driver.R_WRITELONG
23be4     00 00 70 FF 
23be8     00 88 06 F6 | 	mov	_var05, ##-536870912
23bec     08 00 90 FD | 	jmp	#LR__2985
23bf0                 | LR__2984
23bf0                 | '         other : return ERR_INVALID
23bf0     06 7A 66 F6 | 	neg	result1, #6
23bf4     94 00 90 FD | 	jmp	#LR__2987
23bf8                 | LR__2985
23bf8                 | '     if count == 0   ' nothing to do
23bf8     00 84 0E F2 | 	cmp	_var03, #0 wz
23bfc                 | '         return 0
23bfc     00 7A 06 A6 |  if_e	mov	result1, #0
23c00     88 00 90 AD |  if_e	jmp	#LR__2987
23c04                 | '     if drivercog == -1
23c04     00 73 06 F1 | 	add	ptr__psram4_spin2_dat__, #256
23c08     39 87 02 FB | 	rdlong	_var04, ptr__psram4_spin2_dat__
23c0c     00 73 86 F1 | 	sub	ptr__psram4_spin2_dat__, #256
23c10     FF FF 7F FF 
23c14     FF 87 0E F2 | 	cmp	_var04, ##-1 wz
23c18                 | '         return ERR_INACTIVE
23c18     0F 7A 66 A6 |  if_e	neg	result1, #15
23c1c     6C 00 90 AD |  if_e	jmp	#LR__2987
23c20                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
23c20     00 7A 06 F6 | 	mov	result1, #0
23c24     01 7A 62 FD | 	cogid	result1
23c28     3D 87 02 F6 | 	mov	_var04, result1
23c2c     01 86 66 F0 | 	shl	_var04, #1
23c30     3D 87 02 F1 | 	add	_var04, result1
23c34     02 86 66 F0 | 	shl	_var04, #2
23c38     FF 03 00 FF 
23c3c     00 8B 06 F6 | 	mov	_var06, ##524032
23c40     43 8B 02 F1 | 	add	_var06, _var04
23c44                 | '     if long[mailbox] < 0
23c44     45 87 02 FB | 	rdlong	_var04, _var06
23c48     00 86 56 F2 | 	cmps	_var04, #0 wc
23c4c                 | '         return ERR_MAILBOX_BUSY
23c4c     1C 7A 66 C6 |  if_b	neg	result1, #28
23c50     38 00 90 CD |  if_b	jmp	#LR__2987
23c54                 | '     long[mailbox][2] := count
23c54     08 8A 06 F1 | 	add	_var06, #8
23c58     45 85 62 FC | 	wrlong	_var03, _var06
23c5c                 | '     long[mailbox][1] := pattern
23c5c     04 8A 86 F1 | 	sub	_var06, #4
23c60     45 83 62 FC | 	wrlong	_var02, _var06
23c64     04 8A 86 F1 | 	sub	_var06, #4
23c68                 | '     long[mailbox] := req + (addr & $0ffffff)
23c68     44 8D 02 F6 | 	mov	_var07, _var05
23c6c     40 8F 02 F6 | 	mov	_var08, _var01
23c70     F8 8E 06 F4 | 	bitl	_var08, #248
23c74     47 8D 02 F1 | 	add	_var07, _var08
23c78     45 8D 62 FC | 	wrlong	_var07, _var06
23c7c                 | '     repeat
23c7c                 | LR__2986
23c7c                 | '         r := long[mailbox]
23c7c     45 8F 02 FB | 	rdlong	_var08, _var06
23c80     00 8E 56 F2 | 	cmps	_var08, #0 wc
23c84     F4 FF 9F CD |  if_b	jmp	#LR__2986
23c88                 | '     while r < 0
23c88                 | '     return -r                  ' return 0 for success or negated error code
23c88     47 7B 62 F6 | 	neg	result1, _var08
23c8c                 | LR__2987
23c8c                 | _psram4_spin2_fill_ret
23c8c     2D 00 64 FD | 	ret
23c90                 | 
23c90                 | ' 
23c90                 | ' '..............................................................................
23c90                 | ' 
23c90                 | ' {{
23c90                 | ' }}
23c90                 | ' PUB setQos(cog, qos) : result | mailbox
23c90                 | _psram4_spin2_setQos
23c90     49 81 02 F6 | 	mov	_var01, arg01
23c94                 | '     if drivercog == -1 ' driver must be running
23c94     00 73 06 F1 | 	add	ptr__psram4_spin2_dat__, #256
23c98     39 83 02 FB | 	rdlong	_var02, ptr__psram4_spin2_dat__
23c9c     00 73 86 F1 | 	sub	ptr__psram4_spin2_dat__, #256
23ca0     FF FF 7F FF 
23ca4     FF 83 0E F2 | 	cmp	_var02, ##-1 wz
23ca8                 | '         return ERR_INACTIVE
23ca8     0F 7A 66 A6 |  if_e	neg	result1, #15
23cac     9C 00 90 AD |  if_e	jmp	#LR__2994
23cb0                 | '     if cog < 0 or cog > 7 ' enforce cog id range
23cb0     00 80 56 F2 | 	cmps	_var01, #0 wc
23cb4     08 00 90 CD |  if_b	jmp	#LR__2990
23cb8     08 80 56 F2 | 	cmps	_var01, #8 wc
23cbc     08 00 90 CD |  if_b	jmp	#LR__2991
23cc0                 | LR__2990
23cc0                 | '         return ERR_INVALID
23cc0     06 7A 66 F6 | 	neg	result1, #6
23cc4     84 00 90 FD | 	jmp	#LR__2994
23cc8                 | LR__2991
23cc8                 | '     long[@qosData][cog] := qos & !$1ff
23cc8     FF 95 26 F5 | 	andn	arg02, #511
23ccc     C8 73 06 F1 | 	add	ptr__psram4_spin2_dat__, #456
23cd0     02 80 66 F0 | 	shl	_var01, #2
23cd4     39 81 02 F1 | 	add	_var01, ptr__psram4_spin2_dat__
23cd8     40 95 62 FC | 	wrlong	arg02, _var01
23cdc                 | '     mailbox := $7FF00 + drivercog*12
23cdc     C8 72 86 F1 | 	sub	ptr__psram4_spin2_dat__, #200
23ce0     39 85 02 FB | 	rdlong	_var03, ptr__psram4_spin2_dat__
23ce4     42 87 02 F6 | 	mov	_var04, _var03
23ce8     01 86 66 F0 | 	shl	_var04, #1
23cec     42 87 02 F1 | 	add	_var04, _var03
23cf0     02 86 66 F0 | 	shl	_var04, #2
23cf4     FF 03 00 FF 
23cf8     00 89 06 F6 | 	mov	_var05, ##524032
23cfc     43 89 02 F1 | 	add	_var05, _var04
23d00                 | '     repeat until LOCKTRY(driverlock)
23d00     04 72 06 F1 | 	add	ptr__psram4_spin2_dat__, #4
23d04                 | LR__2992
23d04     39 93 02 FB | 	rdlong	arg01, ptr__psram4_spin2_dat__
23d08     06 92 72 FD | 	locktry	arg01 wc
23d0c     F4 FF 9F 3D |  if_ae	jmp	#LR__2992
23d10     04 73 86 F1 | 	sub	ptr__psram4_spin2_dat__, #260
23d14                 | '     long[mailbox] := driver.R_CONFIG + cogid()
23d14     00 86 06 F6 | 	mov	_var04, #0
23d18     01 86 62 FD | 	cogid	_var04
23d1c     00 00 78 FF 
23d20     00 82 06 F6 | 	mov	_var02, ##-268435456
23d24     43 83 02 F1 | 	add	_var02, _var04
23d28     44 83 62 FC | 	wrlong	_var02, _var05
23d2c                 | '     repeat while long[mailbox] < 0
23d2c                 | LR__2993
23d2c     44 83 02 FB | 	rdlong	_var02, _var05
23d30     00 82 56 F2 | 	cmps	_var02, #0 wc
23d34     F4 FF 9F CD |  if_b	jmp	#LR__2993
23d38                 | '     LOCKREL(driverlock)
23d38     04 73 06 F1 | 	add	ptr__psram4_spin2_dat__, #260
23d3c     39 93 02 FB | 	rdlong	arg01, ptr__psram4_spin2_dat__
23d40     04 73 86 F1 | 	sub	ptr__psram4_spin2_dat__, #260
23d44     07 92 72 FD | 	lockrel	arg01 wc
23d48     00 7A 06 F6 | 	mov	result1, #0
23d4c                 | LR__2994
23d4c                 | _psram4_spin2_setQos_ret
23d4c     2D 00 64 FD | 	ret
23d50                 | 
23d50                 | ' 
23d50                 | ' '..............................................................................
23d50                 | ' 
23d50                 | ' {{
23d50                 | ' }}
23d50                 | ' PRI lookupDelay(freq) : delay | profile
23d50                 | _psram4_spin2_lookupDelay
23d50                 | '     profile := @delayTable
23d50     39 81 02 F6 | 	mov	_var01, ptr__psram4_spin2_dat__
23d54     08 81 06 F1 | 	add	_var01, #264
23d58                 | '     delay := long[profile][0]
23d58     40 83 02 FB | 	rdlong	_var02, _var01
23d5c     D7 16 48 FB | 	callpa	#(@LR__3001-@LR__3000)>>2,fcache_load_ptr_
23d60                 | '     repeat while long[profile][1] 
23d60                 | LR__3000
23d60     04 80 06 F1 | 	add	_var01, #4
23d64     40 7B 0A FB | 	rdlong	result1, _var01 wz
23d68     04 80 86 F1 | 	sub	_var01, #4
23d6c     1C 00 90 AD |  if_e	jmp	#LR__3002
23d70                 | '         if freq +< long[profile][1] 
23d70     04 80 06 F1 | 	add	_var01, #4
23d74     40 7B 02 FB | 	rdlong	result1, _var01
23d78     04 80 86 F1 | 	sub	_var01, #4
23d7c     3D 93 12 F2 | 	cmp	arg01, result1 wc
23d80                 | '             quit
23d80                 | '         profile += 4
23d80     04 80 06 31 |  if_ae	add	_var01, #4
23d84                 | '         delay++
23d84     01 82 06 31 |  if_ae	add	_var02, #1
23d88     D4 FF 9F 3D |  if_ae	jmp	#LR__3000
23d8c                 | LR__3001
23d8c                 | LR__3002
23d8c     41 7B 02 F6 | 	mov	result1, _var02
23d90                 | _psram4_spin2_lookupDelay_ret
23d90     2D 00 64 FD | 	ret
23d94                 | 
23d94                 | ' 
23d94                 | ' PUB start() : r
23d94                 | _usbnew_spin2_start
23d94     00 80 06 F6 | 	mov	_var01, #0
23d98                 | '   ifnot driver_cog
23d98     15 00 00 FF 
23d9c     87 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##10887
23da0     3B 83 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
23da4     15 00 00 FF 
23da8     87 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10887
23dac     38 00 90 5D |  if_ne	jmp	#LR__3010
23db0                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
23db0     3B 95 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
23db4     10 80 06 F6 | 	mov	_var01, #16
23db8     00 96 06 F6 | 	mov	arg03, #0
23dbc     28 96 62 FD | 	setq	arg03
23dc0     4A 81 F2 FC | 	coginit	_var01, arg02 wc
23dc4     01 80 66 C6 |  if_b	neg	_var01, #1
23dc8                 | '     if r >= 0
23dc8     00 80 56 F2 | 	cmps	_var01, #0 wc
23dcc                 | '       driver_cog := r+1
23dcc     40 83 02 36 |  if_ae	mov	_var02, _var01
23dd0     01 82 06 31 |  if_ae	add	_var02, #1
23dd4     15 00 00 3F 
23dd8     87 76 06 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10887
23ddc     3B 83 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
23de0     15 00 00 3F 
23de4     87 76 86 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10887
23de8                 | LR__3010
23de8     40 7B 02 F6 | 	mov	result1, _var01
23dec                 | _usbnew_spin2_start_ret
23dec     2D 00 64 FD | 	ret
23df0                 | 
23df0                 | '     '' (Always enabled)
23df0                 | ' 
23df0                 | ' '' Get current pressed state of a keyboard key
23df0                 | ' PUB keystate(key) : r | buf[2],tmp
23df0                 | _usbnew_spin2_keystate
23df0     00 84 06 F6 | 	mov	_var03, #0
23df4                 | '   if key >= $E0 && key < $E8
23df4     E0 92 56 F2 | 	cmps	arg01, #224 wc
23df8     30 00 90 CD |  if_b	jmp	#LR__3020
23dfc     E8 92 56 F2 | 	cmps	arg01, #232 wc
23e00     28 00 90 3D |  if_ae	jmp	#LR__3020
23e04                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
23e04     00 7A 06 F6 | 	mov	result1, #0
23e08     3B 87 02 F6 | 	mov	_var04, ptr__usbnew_spin2_dat__
23e0c     13 00 00 FF 
23e10     D8 87 06 F1 | 	add	_var04, ##10200
23e14     49 89 02 F6 | 	mov	_var05, arg01
23e18     E0 88 86 F1 | 	sub	_var05, #224
23e1c     43 8B C2 FA | 	rdbyte	_var06, _var04
23e20     44 8B 4A F0 | 	shr	_var06, _var05 wz
23e24     01 7A 66 56 |  if_ne	neg	result1, #1
23e28     50 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
23e2c                 | LR__3020
23e2c                 | '   else
23e2c                 | '     '' Do this in inline ASM to ensure atomicity
23e2c                 | '     tmp := @hkbd_report
23e2c     3B 8B 02 F6 | 	mov	_var06, ptr__usbnew_spin2_dat__
23e30     13 00 00 FF 
23e34     D8 8B 06 F1 | 	add	_var06, ##10200
23e38                 | '     org
23e38     D7 1E 48 FB | 	callpa	#(@LR__3022-@LR__3021)>>2,fcache_load_ptr_
23e3c                 | LR__3021
23e3c 000             | 	org	0
23e3c 000 28 02 64 FD | 	setq	#1
23e40 001 45 81 02 FB | 	rdlong	_var01, _var06
23e44 002 40 8D F2 F8 | 	getbyte	_var07, _var01, #2
23e48 003 49 8D 0A F2 | 	cmp	_var07, arg01 wz
23e4c 004 40 8D FA F8 | 	getbyte	_var07, _var01, #3
23e50 005 49 8D 0A 52 |  if_ne	cmp	_var07, arg01 wz
23e54 006 41 8D E2 F8 | 	getbyte	_var07, _var02, #0
23e58 007 49 8D 0A 52 |  if_ne	cmp	_var07, arg01 wz
23e5c 008 41 8D EA F8 | 	getbyte	_var07, _var02, #1
23e60 009 49 8D 0A 52 |  if_ne	cmp	_var07, arg01 wz
23e64 00a 41 8D F2 F8 | 	getbyte	_var07, _var02, #2
23e68 00b 49 8D 0A 52 |  if_ne	cmp	_var07, arg01 wz
23e6c 00c 41 8D FA F8 | 	getbyte	_var07, _var02, #3
23e70 00d 49 8D 0A 52 |  if_ne	cmp	_var07, arg01 wz
23e74 00e 01 84 66 A6 |  if_e	neg	_var03, #1
23e78 00f             | 	fit	192
23e78 00f             | LR__3022
23e78                 | 	orgh
23e78     42 7B 02 F6 | 	mov	result1, _var03
23e7c                 | _usbnew_spin2_keystate_ret
23e7c     2D 00 64 FD | 	ret
23e80                 | 
23e80                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
23e80                 | ' 
23e80                 | ' '' Return key event from buffer if there is one
23e80                 | ' PUB get_key() : r | tail
23e80                 | _usbnew_spin2_get_key
23e80                 | '   tail := keyq_tail
23e80     0F 00 00 FF 
23e84     D5 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##7893
23e88     3B 81 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
23e8c                 | '   if keyq_head == tail
23e8c     01 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
23e90     3B 83 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
23e94     0F 00 00 FF 
23e98     D4 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7892
23e9c     40 83 0A F2 | 	cmp	_var02, _var01 wz
23ea0                 | '     return 0 ' No event
23ea0     00 7A 06 A6 |  if_e	mov	result1, #0
23ea4     3C 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
23ea8                 | '   r := keyq_data[tail]
23ea8     40 83 02 F6 | 	mov	_var02, _var01
23eac     02 82 66 F0 | 	shl	_var02, #2
23eb0     3B 7B 02 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
23eb4     0F 00 00 FF 
23eb8     D6 7A 06 F1 | 	add	result1, ##7894
23ebc     3D 83 02 F1 | 	add	_var02, result1
23ec0     41 7B 02 FB | 	rdlong	result1, _var02
23ec4                 | '   if ++tail == KEYQUEUE_SIZE
23ec4     01 80 06 F1 | 	add	_var01, #1
23ec8     80 80 0E F2 | 	cmp	_var01, #128 wz
23ecc                 | '     tail := 0
23ecc     00 80 06 A6 |  if_e	mov	_var01, #0
23ed0                 | '   keyq_tail := tail
23ed0     0F 00 00 FF 
23ed4     D5 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##7893
23ed8     3B 81 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
23edc     0F 00 00 FF 
23ee0     D5 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7893
23ee4                 | _usbnew_spin2_get_key_ret
23ee4     2D 00 64 FD | 	ret
23ee8                 | 
23ee8                 | ' 
23ee8                 | ' '' Emulate mouse movement
23ee8                 | ' PUB mouse_move(x,y)
23ee8                 | _usbnew_spin2_mouse_move
23ee8     02 CA 05 F6 | 	mov	COUNT_, #2
23eec     E8 00 A0 FD | 	call	#pushregs_
23ef0     49 A7 02 F6 | 	mov	local01, arg01
23ef4     4A A9 02 F6 | 	mov	local02, arg02
23ef8                 | '   mouse_lock := 1
23ef8     14 00 00 FF 
23efc     F1 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##10481
23f00     3B 03 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
23f04     14 00 00 FF 
23f08     F1 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10481
23f0c                 | '   waitus(2) ' hope driver is now done
23f0c     02 92 06 F6 | 	mov	arg01, #2
23f10     24 0E B0 FD | 	call	#__system___waitus
23f14                 | '   mouse_xacc := x
23f14     14 00 00 FF 
23f18     E1 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##10465
23f1c     3B A7 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
23f20                 | '   mouse_yacc := y
23f20     04 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, #4
23f24     3B A9 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
23f28                 | '   if mouse_outptr
23f28     05 00 00 FF 
23f2c     15 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2581
23f30     3B 95 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
23f34     0F 00 00 FF 
23f38     D0 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7888
23f3c     24 00 90 AD |  if_e	jmp	#LR__3030
23f40                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
23f40     10 A8 66 F0 | 	shl	local02, #16
23f44     53 A7 32 F9 | 	getword	local01, local01, #0
23f48     53 A9 42 F5 | 	or	local02, local01
23f4c     0F 00 00 FF 
23f50     D0 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##7888
23f54     3B A7 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
23f58     0F 00 00 FF 
23f5c     D0 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7888
23f60     53 A9 62 FC | 	wrlong	local02, local01
23f64                 | LR__3030
23f64                 | '   mouse_lock := 0
23f64     14 00 00 FF 
23f68     F1 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##10481
23f6c     3B 01 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
23f70     14 00 00 FF 
23f74     F1 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10481
23f78     E7 F0 03 F6 | 	mov	ptra, fp
23f7c     F2 00 A0 FD | 	call	#popregs_
23f80                 | _usbnew_spin2_mouse_move_ret
23f80     2D 00 64 FD | 	ret
23f84                 | 
23f84                 | ' 
23f84                 | ' '' Get state of an axis (normalized between -32768 and 32767)
23f84                 | ' PUB hidpad_axis(dev,axnum) : r
23f84                 | _usbnew_spin2_hidpad_axis
23f84                 | '   if axnum +>= 8
23f84     08 94 16 F2 | 	cmp	arg02, #8 wc
23f88                 | '     return 0
23f88     00 7A 06 36 |  if_ae	mov	result1, #0
23f8c     2C 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
23f90                 | '   else 
23f90                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
23f90     3B 7B 02 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
23f94     13 00 00 FF 
23f98     F8 7B 06 F1 | 	add	result1, ##10232
23f9c     05 92 66 F0 | 	shl	arg01, #5
23fa0     49 7B 02 F1 | 	add	result1, arg01
23fa4     04 92 06 F6 | 	mov	arg01, #4
23fa8     4A 93 02 F1 | 	add	arg01, arg02
23fac     01 92 66 F0 | 	shl	arg01, #1
23fb0     3D 93 02 F1 | 	add	arg01, result1
23fb4     49 7B E2 FA | 	rdword	result1, arg01
23fb8     0F 7A 66 F7 | 	signx	result1, #15
23fbc                 | _usbnew_spin2_hidpad_axis_ret
23fbc     2D 00 64 FD | 	ret
23fc0                 | 
23fc0                 | ' 
23fc0                 | ' '' Get state of a hat
23fc0                 | ' PUB hidpad_hat(dev,hatnum) : r
23fc0                 | _usbnew_spin2_hidpad_hat
23fc0                 | '   if hatnum +>= 4
23fc0     04 94 16 F2 | 	cmp	arg02, #4 wc
23fc4                 | '     return 0
23fc4     00 7A 06 36 |  if_ae	mov	result1, #0
23fc8     24 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_hat_ret
23fcc                 | '   else 
23fcc                 | '     return byte[@hidpad_report+dev*HIDPAD_REPORT_SIZE][7*4+hatnum]
23fcc     3B 7B 02 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
23fd0     13 00 00 FF 
23fd4     F8 7B 06 F1 | 	add	result1, ##10232
23fd8     05 92 66 F0 | 	shl	arg01, #5
23fdc     49 7B 02 F1 | 	add	result1, arg01
23fe0     1C 92 06 F6 | 	mov	arg01, #28
23fe4     4A 93 02 F1 | 	add	arg01, arg02
23fe8     3D 93 02 F1 | 	add	arg01, result1
23fec     49 7B C2 FA | 	rdbyte	result1, arg01
23ff0                 | _usbnew_spin2_hidpad_hat_ret
23ff0     2D 00 64 FD | 	ret
23ff4                 | 
23ff4                 | ' 
23ff4                 | ' '--------------------------------------------------------------
23ff4                 | ' '---------- Init the variables, start the cog. ----------------
23ff4                 | ' '--------------------------------------------------------------
23ff4                 | ' 
23ff4                 | ' pub start(mbox,scope,cache) :cog,base | iii
23ff4                 | _Audio2_004_spin2_start
23ff4     04 CA 05 F6 | 	mov	COUNT_, #4
23ff8     E8 00 A0 FD | 	call	#pushregs_
23ffc     49 A7 02 F6 | 	mov	local01, arg01
24000                 | ' 
24000                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
24000                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
24000                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
24000                 | ' 
24000                 | ' mailboxaddr:=mbox 
24000     32 A7 62 FC | 	wrlong	local01, objptr
24004                 | ' scope_ptr:=scope
24004     04 64 06 F1 | 	add	objptr, #4
24008     32 95 62 FC | 	wrlong	arg02, objptr
2400c                 | ' cache_ptr:=cache
2400c     04 64 06 F1 | 	add	objptr, #4
24010     32 97 62 FC | 	wrlong	arg03, objptr
24014                 | ' base:=@channel0[0]
24014     04 64 06 F1 | 	add	objptr, #4
24018     32 A9 02 F6 | 	mov	local02, objptr
2401c                 | ' 
2401c                 | ' repeat iii from 0 to 15
2401c     00 AA 06 F6 | 	mov	local03, #0
24020     0C 64 86 F1 | 	sub	objptr, #12
24024     D7 1A 49 FB | 	callpa	#(@LR__3041-@LR__3040)>>2,fcache_load_ptr_
24028                 | LR__3040
24028                 | '   long[base+64*iii]:=0
24028     54 A7 02 F6 | 	mov	local01, local02
2402c     55 7D 02 F6 | 	mov	result2, local03
24030     06 7C 66 F0 | 	shl	result2, #6
24034     3E A7 02 F1 | 	add	local01, result2
24038     53 01 68 FC | 	wrlong	#0, local01
2403c                 | '   long[base+64*iii+4]:=0  		
2403c     54 A7 02 F6 | 	mov	local01, local02
24040     55 7D 02 F6 | 	mov	result2, local03
24044     06 7C 66 F0 | 	shl	result2, #6
24048     3E A7 02 F1 | 	add	local01, result2
2404c     04 A6 06 F1 | 	add	local01, #4
24050     53 01 68 FC | 	wrlong	#0, local01
24054                 | '   long[base+64*iii+8]:=0
24054     54 AD 02 F6 | 	mov	local04, local02
24058     55 A7 02 F6 | 	mov	local01, local03
2405c     06 A6 66 F0 | 	shl	local01, #6
24060     53 AD 02 F1 | 	add	local04, local01
24064     08 AC 06 F1 | 	add	local04, #8
24068     56 01 68 FC | 	wrlong	#0, local04
2406c                 | '   long[base+64*iii+12]:=0
2406c     54 AD 02 F6 | 	mov	local04, local02
24070     55 A7 02 F6 | 	mov	local01, local03
24074     06 A6 66 F0 | 	shl	local01, #6
24078     53 AD 02 F1 | 	add	local04, local01
2407c     0C AC 06 F1 | 	add	local04, #12
24080     56 01 68 FC | 	wrlong	#0, local04
24084                 | '   long[base+64*iii+16]:=0
24084     54 AD 02 F6 | 	mov	local04, local02
24088     55 A7 02 F6 | 	mov	local01, local03
2408c     06 A6 66 F0 | 	shl	local01, #6
24090     53 AD 02 F1 | 	add	local04, local01
24094     10 AC 06 F1 | 	add	local04, #16
24098     56 01 68 FC | 	wrlong	#0, local04
2409c                 | '   long[base+64*iii+20]:=0
2409c     54 AD 02 F6 | 	mov	local04, local02
240a0     55 A7 02 F6 | 	mov	local01, local03
240a4     06 A6 66 F0 | 	shl	local01, #6
240a8     53 AD 02 F1 | 	add	local04, local01
240ac     14 AC 06 F1 | 	add	local04, #20
240b0     56 01 68 FC | 	wrlong	#0, local04
240b4                 | '   long[base+64*iii+24]:=0
240b4     54 AD 02 F6 | 	mov	local04, local02
240b8     55 A7 02 F6 | 	mov	local01, local03
240bc     06 A6 66 F0 | 	shl	local01, #6
240c0     53 AD 02 F1 | 	add	local04, local01
240c4     18 AC 06 F1 | 	add	local04, #24
240c8     56 01 68 FC | 	wrlong	#0, local04
240cc                 | '   long[base+64*iii+28]:=0
240cc     54 AD 02 F6 | 	mov	local04, local02
240d0     55 A7 02 F6 | 	mov	local01, local03
240d4     06 A6 66 F0 | 	shl	local01, #6
240d8     53 AD 02 F1 | 	add	local04, local01
240dc     1C AC 06 F1 | 	add	local04, #28
240e0     56 01 68 FC | 	wrlong	#0, local04
240e4                 | '   word[base+64*iii+32]:=8192
240e4     54 AD 02 F6 | 	mov	local04, local02
240e8     55 A7 02 F6 | 	mov	local01, local03
240ec     06 A6 66 F0 | 	shl	local01, #6
240f0     53 AD 02 F1 | 	add	local04, local01
240f4     20 AC 06 F1 | 	add	local04, #32
240f8     10 00 80 FF 
240fc     56 01 58 FC | 	wrword	##8192, local04
24100                 | '   word[base+64*iii+34]:=8192
24100     54 AD 02 F6 | 	mov	local04, local02
24104     55 A7 02 F6 | 	mov	local01, local03
24108     06 A6 66 F0 | 	shl	local01, #6
2410c     53 AD 02 F1 | 	add	local04, local01
24110     22 AC 06 F1 | 	add	local04, #34
24114     10 00 80 FF 
24118     56 01 58 FC | 	wrword	##8192, local04
2411c                 | '   long[base+64*iii+36]:=0
2411c     54 AD 02 F6 | 	mov	local04, local02
24120     55 A7 02 F6 | 	mov	local01, local03
24124     06 A6 66 F0 | 	shl	local01, #6
24128     53 AD 02 F1 | 	add	local04, local01
2412c     24 AC 06 F1 | 	add	local04, #36
24130     56 01 68 FC | 	wrlong	#0, local04
24134                 | '   long[base+64*iii+40]:=0
24134     54 AD 02 F6 | 	mov	local04, local02
24138     55 A7 02 F6 | 	mov	local01, local03
2413c     06 A6 66 F0 | 	shl	local01, #6
24140     53 AD 02 F1 | 	add	local04, local01
24144     28 AC 06 F1 | 	add	local04, #40
24148     56 01 68 FC | 	wrlong	#0, local04
2414c                 | '   long[base+64*iii+44]:=0
2414c     54 AD 02 F6 | 	mov	local04, local02
24150     55 A7 02 F6 | 	mov	local01, local03
24154     06 A6 66 F0 | 	shl	local01, #6
24158     53 AD 02 F1 | 	add	local04, local01
2415c     2C AC 06 F1 | 	add	local04, #44
24160     56 01 68 FC | 	wrlong	#0, local04
24164                 | '   long[base+64*iii+48]:=0
24164     54 AD 02 F6 | 	mov	local04, local02
24168     55 A7 02 F6 | 	mov	local01, local03
2416c     06 A6 66 F0 | 	shl	local01, #6
24170     53 AD 02 F1 | 	add	local04, local01
24174     30 AC 06 F1 | 	add	local04, #48
24178     56 01 68 FC | 	wrlong	#0, local04
2417c                 | '   long[base+64*iii+52]:=0
2417c     54 AD 02 F6 | 	mov	local04, local02
24180     55 A7 02 F6 | 	mov	local01, local03
24184     06 A6 66 F0 | 	shl	local01, #6
24188     53 AD 02 F1 | 	add	local04, local01
2418c     34 AC 06 F1 | 	add	local04, #52
24190     56 01 68 FC | 	wrlong	#0, local04
24194                 | '   freqs[iii]:=440000
24194     55 AD 02 F6 | 	mov	local04, local03
24198     02 AC 66 F0 | 	shl	local04, #2
2419c     02 00 00 FF 
241a0     0C 64 06 F1 | 	add	objptr, ##1036
241a4     32 AD 02 F1 | 	add	local04, objptr
241a8     5B 03 80 FF 
241ac     56 81 69 FC | 	wrlong	##440000, local04
241b0                 | '   delays[iii]:=0
241b0     55 AD 02 F6 | 	mov	local04, local03
241b4     01 AC 66 F0 | 	shl	local04, #1
241b8     40 64 06 F1 | 	add	objptr, #64
241bc     32 AD 02 F1 | 	add	local04, objptr
241c0     56 01 58 FC | 	wrword	#0, local04
241c4                 | '   volumes[iii]:=4096
241c4     55 AD 02 F6 | 	mov	local04, local03
241c8     01 AC 66 F0 | 	shl	local04, #1
241cc     20 64 06 F1 | 	add	objptr, #32
241d0     32 AD 02 F1 | 	add	local04, objptr
241d4     08 00 80 FF 
241d8     56 01 58 FC | 	wrword	##4096, local04
241dc                 | '   waveforms[iii]:=0
241dc     55 AD 02 F6 | 	mov	local04, local03
241e0     02 AC 66 F0 | 	shl	local04, #2
241e4     20 64 06 F1 | 	add	objptr, #32
241e8     32 AD 02 F1 | 	add	local04, objptr
241ec     56 01 68 FC | 	wrlong	#0, local04
241f0                 | '   envelopes[iii]:=0
241f0     55 AD 02 F6 | 	mov	local04, local03
241f4     02 AC 66 F0 | 	shl	local04, #2
241f8     40 64 06 F1 | 	add	objptr, #64
241fc     32 AD 02 F1 | 	add	local04, objptr
24200     56 01 68 FC | 	wrlong	#0, local04
24204                 | '   lengths[iii]:=1000
24204     55 AD 02 F6 | 	mov	local04, local03
24208     01 AC 66 F0 | 	shl	local04, #1
2420c     40 64 06 F1 | 	add	objptr, #64
24210     32 AD 02 F1 | 	add	local04, objptr
24214     01 00 80 FF 
24218     56 D1 5B FC | 	wrword	##1000, local04
2421c                 | '   pans[iii]:=8192
2421c     55 AD 02 F6 | 	mov	local04, local03
24220     01 AC 66 F0 | 	shl	local04, #1
24224     20 64 06 F1 | 	add	objptr, #32
24228     32 AD 02 F1 | 	add	local04, objptr
2422c     10 00 80 FF 
24230     56 01 58 FC | 	wrword	##8192, local04
24234                 | '   sustains[iii]:=255
24234     55 AD 02 F6 | 	mov	local04, local03
24238     01 AC 66 F0 | 	shl	local04, #1
2423c     20 64 06 F1 | 	add	objptr, #32
24240     32 AD 02 F1 | 	add	local04, objptr
24244     56 FF 59 FC | 	wrword	#255, local04
24248     01 AA 06 F1 | 	add	local03, #1
2424c     10 AA 56 F2 | 	cmps	local03, #16 wc
24250     02 00 00 FF 
24254     4C 65 86 F1 | 	sub	objptr, ##1356
24258     CC FD 9F CD |  if_b	jmp	#LR__3040
2425c                 | LR__3041
2425c                 | '   
2425c                 | ' cog:=coginit(16,@audio,@mailboxaddr)
2425c     33 95 02 F6 | 	mov	arg02, ptr__Audio2_004_spin2_dat__
24260     32 97 02 F6 | 	mov	arg03, objptr
24264     10 AC 06 F6 | 	mov	local04, #16
24268     28 96 62 FD | 	setq	arg03
2426c     4A AD F2 FC | 	coginit	local04, arg02 wc
24270     01 AC 66 C6 |  if_b	neg	local04, #1
24274                 | ' waitms(10)
24274     0A 92 06 F6 | 	mov	arg01, #10
24278     50 0A B0 FD | 	call	#__system___waitms
2427c                 | ' return cog,base
2427c     54 7D 02 F6 | 	mov	result2, local02
24280     56 7B 02 F6 | 	mov	result1, local04
24284     E7 F0 03 F6 | 	mov	ptra, fp
24288     F2 00 A0 FD | 	call	#popregs_
2428c                 | _Audio2_004_spin2_start_ret
2428c     2D 00 64 FD | 	ret
24290                 | 
24290                 | ' 
24290                 | ' pub play (channel, frequency=-1, delay=-1, volume=-1, waveform=-1, envelope=-1, length=-1, pan=-1, sustain=-1) | base2
24290                 | _Audio2_004_spin2_play
24290     0B CA 05 F6 | 	mov	COUNT_, #11
24294     E8 00 A0 FD | 	call	#pushregs_
24298     49 A7 02 F6 | 	mov	local01, arg01
2429c     4A A9 02 F6 | 	mov	local02, arg02
242a0     4B AB 02 F6 | 	mov	local03, arg03
242a4     4C AD 02 F6 | 	mov	local04, arg04
242a8     4D AF 02 F6 | 	mov	local05, arg05
242ac     4E B1 02 F6 | 	mov	local06, arg06
242b0     4F B3 02 F6 | 	mov	local07, arg07
242b4     50 B5 02 F6 | 	mov	local08, arg08
242b8     51 B7 02 F6 | 	mov	local09, arg09
242bc                 | ' 
242bc                 | ' if frequency==(-1)
242bc     FF FF 7F FF 
242c0     FF A9 0E F2 | 	cmp	local02, ##-1 wz
242c4     20 00 90 5D |  if_ne	jmp	#LR__3050
242c8                 | '   frequency:=freqs[channel]
242c8     53 A9 02 F6 | 	mov	local02, local01
242cc     02 A8 66 F0 | 	shl	local02, #2
242d0     32 B9 02 F6 | 	mov	local10, objptr
242d4     02 00 00 FF 
242d8     0C B8 06 F1 | 	add	local10, ##1036
242dc     5C A9 02 F1 | 	add	local02, local10
242e0     54 A9 02 FB | 	rdlong	local02, local02
242e4     1C 00 90 FD | 	jmp	#LR__3051
242e8                 | LR__3050
242e8                 | ' else
242e8                 | '   freqs[channel]:=frequency
242e8     53 BB 02 F6 | 	mov	local11, local01
242ec     02 BA 66 F0 | 	shl	local11, #2
242f0     32 B9 02 F6 | 	mov	local10, objptr
242f4     02 00 00 FF 
242f8     0C B8 06 F1 | 	add	local10, ##1036
242fc     5C BB 02 F1 | 	add	local11, local10
24300     5D A9 62 FC | 	wrlong	local02, local11
24304                 | LR__3051
24304                 | '   
24304                 | ' if delay==(-1)
24304     FF FF 7F FF 
24308     FF AB 0E F2 | 	cmp	local03, ##-1 wz
2430c     20 00 90 5D |  if_ne	jmp	#LR__3052
24310                 | '   delay:=delays[channel]
24310     53 B9 02 F6 | 	mov	local10, local01
24314     01 B8 66 F0 | 	shl	local10, #1
24318     32 BB 02 F6 | 	mov	local11, objptr
2431c     02 00 00 FF 
24320     4C BA 06 F1 | 	add	local11, ##1100
24324     5D B9 02 F1 | 	add	local10, local11
24328     5C AB E2 FA | 	rdword	local03, local10
2432c     1C 00 90 FD | 	jmp	#LR__3053
24330                 | LR__3052
24330                 | ' else
24330                 | '   delays[channel]:=delay
24330     53 B9 02 F6 | 	mov	local10, local01
24334     01 B8 66 F0 | 	shl	local10, #1
24338     32 BB 02 F6 | 	mov	local11, objptr
2433c     02 00 00 FF 
24340     4C BA 06 F1 | 	add	local11, ##1100
24344     5D B9 02 F1 | 	add	local10, local11
24348     5C AB 52 FC | 	wrword	local03, local10
2434c                 | LR__3053
2434c                 | '   
2434c                 | ' if volume==(-1)      
2434c     FF FF 7F FF 
24350     FF AD 0E F2 | 	cmp	local04, ##-1 wz
24354     20 00 90 5D |  if_ne	jmp	#LR__3054
24358                 | '   volume:=volumes[channel]
24358     53 B9 02 F6 | 	mov	local10, local01
2435c     01 B8 66 F0 | 	shl	local10, #1
24360     32 BB 02 F6 | 	mov	local11, objptr
24364     02 00 00 FF 
24368     6C BA 06 F1 | 	add	local11, ##1132
2436c     5D B9 02 F1 | 	add	local10, local11
24370     5C AD E2 FA | 	rdword	local04, local10
24374     1C 00 90 FD | 	jmp	#LR__3055
24378                 | LR__3054
24378                 | ' else
24378                 | '   volumes[channel]:=volume
24378     53 B9 02 F6 | 	mov	local10, local01
2437c     01 B8 66 F0 | 	shl	local10, #1
24380     32 BB 02 F6 | 	mov	local11, objptr
24384     02 00 00 FF 
24388     6C BA 06 F1 | 	add	local11, ##1132
2438c     5D B9 02 F1 | 	add	local10, local11
24390     5C AD 52 FC | 	wrword	local04, local10
24394                 | LR__3055
24394                 | '   
24394                 | ' if waveform==(-1)
24394     FF FF 7F FF 
24398     FF AF 0E F2 | 	cmp	local05, ##-1 wz
2439c     20 00 90 5D |  if_ne	jmp	#LR__3056
243a0                 | '   waveform:=waveforms[channel]
243a0     53 BB 02 F6 | 	mov	local11, local01
243a4     02 BA 66 F0 | 	shl	local11, #2
243a8     32 B9 02 F6 | 	mov	local10, objptr
243ac     02 00 00 FF 
243b0     8C B8 06 F1 | 	add	local10, ##1164
243b4     5C BB 02 F1 | 	add	local11, local10
243b8     5D AF 02 FB | 	rdlong	local05, local11
243bc     1C 00 90 FD | 	jmp	#LR__3057
243c0                 | LR__3056
243c0                 | ' else
243c0                 | '   waveforms[channel]:=waveform
243c0     53 BB 02 F6 | 	mov	local11, local01
243c4     02 BA 66 F0 | 	shl	local11, #2
243c8     32 B9 02 F6 | 	mov	local10, objptr
243cc     02 00 00 FF 
243d0     8C B8 06 F1 | 	add	local10, ##1164
243d4     5C BB 02 F1 | 	add	local11, local10
243d8     5D AF 62 FC | 	wrlong	local05, local11
243dc                 | LR__3057
243dc                 | '   
243dc                 | ' if envelope==(-1)
243dc     FF FF 7F FF 
243e0     FF B1 0E F2 | 	cmp	local06, ##-1 wz
243e4     20 00 90 5D |  if_ne	jmp	#LR__3058
243e8                 | '   envelope:=envelopes[channel]
243e8     53 BB 02 F6 | 	mov	local11, local01
243ec     02 BA 66 F0 | 	shl	local11, #2
243f0     32 B9 02 F6 | 	mov	local10, objptr
243f4     02 00 00 FF 
243f8     CC B8 06 F1 | 	add	local10, ##1228
243fc     5C BB 02 F1 | 	add	local11, local10
24400     5D B1 02 FB | 	rdlong	local06, local11
24404     1C 00 90 FD | 	jmp	#LR__3059
24408                 | LR__3058
24408                 | ' else
24408                 | '   envelopes[channel]:=envelope
24408     53 BB 02 F6 | 	mov	local11, local01
2440c     02 BA 66 F0 | 	shl	local11, #2
24410     32 B9 02 F6 | 	mov	local10, objptr
24414     02 00 00 FF 
24418     CC B8 06 F1 | 	add	local10, ##1228
2441c     5C BB 02 F1 | 	add	local11, local10
24420     5D B1 62 FC | 	wrlong	local06, local11
24424                 | LR__3059
24424                 | '   
24424                 | ' if length==(-1)
24424     FF FF 7F FF 
24428     FF B3 0E F2 | 	cmp	local07, ##-1 wz
2442c     20 00 90 5D |  if_ne	jmp	#LR__3060
24430                 | '   length:=lengths[channel]
24430     53 B9 02 F6 | 	mov	local10, local01
24434     01 B8 66 F0 | 	shl	local10, #1
24438     32 BB 02 F6 | 	mov	local11, objptr
2443c     02 00 00 FF 
24440     0C BB 06 F1 | 	add	local11, ##1292
24444     5D B9 02 F1 | 	add	local10, local11
24448     5C B3 E2 FA | 	rdword	local07, local10
2444c     1C 00 90 FD | 	jmp	#LR__3061
24450                 | LR__3060
24450                 | ' else
24450                 | '   lengths[channel]:=length
24450     53 B9 02 F6 | 	mov	local10, local01
24454     01 B8 66 F0 | 	shl	local10, #1
24458     32 BB 02 F6 | 	mov	local11, objptr
2445c     02 00 00 FF 
24460     0C BB 06 F1 | 	add	local11, ##1292
24464     5D B9 02 F1 | 	add	local10, local11
24468     5C B3 52 FC | 	wrword	local07, local10
2446c                 | LR__3061
2446c                 | '   
2446c                 | ' if pan==(-1)
2446c     FF FF 7F FF 
24470     FF B5 0E F2 | 	cmp	local08, ##-1 wz
24474     20 00 90 5D |  if_ne	jmp	#LR__3062
24478                 | '   pan:=pans[channel]
24478     53 B9 02 F6 | 	mov	local10, local01
2447c     01 B8 66 F0 | 	shl	local10, #1
24480     32 BB 02 F6 | 	mov	local11, objptr
24484     02 00 00 FF 
24488     2C BB 06 F1 | 	add	local11, ##1324
2448c     5D B9 02 F1 | 	add	local10, local11
24490     5C B5 E2 FA | 	rdword	local08, local10
24494     1C 00 90 FD | 	jmp	#LR__3063
24498                 | LR__3062
24498                 | ' else
24498                 | '   pans[channel]:=pan
24498     53 B9 02 F6 | 	mov	local10, local01
2449c     01 B8 66 F0 | 	shl	local10, #1
244a0     32 BB 02 F6 | 	mov	local11, objptr
244a4     02 00 00 FF 
244a8     2C BB 06 F1 | 	add	local11, ##1324
244ac     5D B9 02 F1 | 	add	local10, local11
244b0     5C B5 52 FC | 	wrword	local08, local10
244b4                 | LR__3063
244b4                 | '  
244b4                 | ' if sustain==(-1)
244b4     FF FF 7F FF 
244b8     FF B7 0E F2 | 	cmp	local09, ##-1 wz
244bc     20 00 90 5D |  if_ne	jmp	#LR__3064
244c0                 | '   sustain:=sustains[channel]
244c0     53 B9 02 F6 | 	mov	local10, local01
244c4     01 B8 66 F0 | 	shl	local10, #1
244c8     32 BB 02 F6 | 	mov	local11, objptr
244cc     02 00 00 FF 
244d0     4C BB 06 F1 | 	add	local11, ##1356
244d4     5D B9 02 F1 | 	add	local10, local11
244d8     5C B7 E2 FA | 	rdword	local09, local10
244dc     1C 00 90 FD | 	jmp	#LR__3065
244e0                 | LR__3064
244e0                 | ' else
244e0                 | '   sustains[channel]:=sustain
244e0     53 B9 02 F6 | 	mov	local10, local01
244e4     01 B8 66 F0 | 	shl	local10, #1
244e8     32 BB 02 F6 | 	mov	local11, objptr
244ec     02 00 00 FF 
244f0     4C BB 06 F1 | 	add	local11, ##1356
244f4     5D B9 02 F1 | 	add	local10, local11
244f8     5C B7 52 FC | 	wrword	local09, local10
244fc                 | LR__3065
244fc     59 BB 52 F6 | 	abs	local11, local07 wc
24500     C2 B9 80 FF 
24504     5D DF 19 FD | 	qdiv	##24347887, local11
24508                 | '                 
24508                 | ' length:=24347887/length  
24508     18 BA 62 FD | 	getqx	local11
2450c     6D A8 06 FD | 	qmul	local02, #109
24510     5D B3 82 F6 | 	negc	local07, local11
24514                 | ' debug(udec(sustain))
24514                 | ' base2:=@channel0[0]+64*channel
24514     32 A9 02 F6 | 	mov	local02, objptr
24518     0C A8 06 F1 | 	add	local02, #12
2451c     06 A6 66 F0 | 	shl	local01, #6
24520     53 A9 02 F1 | 	add	local02, local01
24524                 | ' long[base2+20]:=waveform+$C0000000 
24524     00 00 60 FF 
24528     00 AE 06 F1 | 	add	local05, ##-1073741824
2452c     54 B9 02 F6 | 	mov	local10, local02
24530     14 B8 06 F1 | 	add	local10, #20
24534     5C AF 62 FC | 	wrlong	local05, local10
24538                 | ' long[base2+28]:= 2048
24538     54 BB 02 F6 | 	mov	local11, local02
2453c     1C BA 06 F1 | 	add	local11, #28
24540     04 00 80 FF 
24544     5D 01 68 FC | 	wrlong	##2048, local11
24548                 | ' long[base2+24]:= 0
24548     54 BB 02 F6 | 	mov	local11, local02
2454c     18 BA 06 F1 | 	add	local11, #24
24550     5D 01 68 FC | 	wrlong	#0, local11
24554                 | ' word[base2+32]:=volume
24554     54 BB 02 F6 | 	mov	local11, local02
24558     20 BA 06 F1 | 	add	local11, #32
2455c     5D AD 52 FC | 	wrword	local04, local11
24560                 | ' word[base2+32]:=pan
24560     54 BB 02 F6 | 	mov	local11, local02
24564     20 BA 06 F1 | 	add	local11, #32
24568     5D B5 52 FC | 	wrword	local08, local11
2456c                 | ' long[base2+36]:=((frequency*109)/1000)*3574 ' (frequency*389566)/1000  freq*3574*109/1000
2456c     18 BA 62 FD | 	getqx	local11
24570     5D B9 52 F6 | 	abs	local10, local11 wc
24574     01 00 00 FF 
24578     E8 B9 16 FD | 	qdiv	local10, ##1000
2457c     18 B8 62 FD | 	getqx	local10
24580     5C B9 82 F6 | 	negc	local10, local10
24584     06 00 00 FF 
24588     F6 B9 06 FD | 	qmul	local10, ##3574
2458c     54 B9 02 F6 | 	mov	local10, local02
24590     24 B8 06 F1 | 	add	local10, #36
24594                 | ' long[base2+44]:=envelope
24594     54 BB 02 F6 | 	mov	local11, local02
24598     2C BA 06 F1 | 	add	local11, #44
2459c                 | ' long[base2+48]:=length
2459c                 | ' long[base2+52]:=sustain
2459c                 | ' waitms(delay)
2459c     55 93 02 F6 | 	mov	arg01, local03
245a0     18 B4 62 FD | 	getqx	local08
245a4     5C B5 62 FC | 	wrlong	local08, local10
245a8     5D B1 62 FC | 	wrlong	local06, local11
245ac     54 BB 02 F6 | 	mov	local11, local02
245b0     30 BA 06 F1 | 	add	local11, #48
245b4     5D B3 62 FC | 	wrlong	local07, local11
245b8     34 A8 06 F1 | 	add	local02, #52
245bc     54 B7 62 FC | 	wrlong	local09, local02
245c0     08 07 B0 FD | 	call	#__system___waitms
245c4     E7 F0 03 F6 | 	mov	ptra, fp
245c8     F2 00 A0 FD | 	call	#popregs_
245cc                 | _Audio2_004_spin2_play_ret
245cc     2D 00 64 FD | 	ret
245d0                 | 
245d0                 | ' 
245d0                 | ' 
245d0                 | ' pub play16(channel,sample,splfreq,vol,len,loop,delay) | base2
245d0                 | _Audio2_004_spin2_play16
245d0     F8 02 00 FF 
245d4     BE 97 06 FD | 	qmul	arg03, ##389566
245d8                 | ' 
245d8                 | ' base2:=@channel0[0]+64*channel
245d8     32 97 02 F6 | 	mov	arg03, objptr
245dc     0C 96 06 F1 | 	add	arg03, #12
245e0     06 92 66 F0 | 	shl	arg01, #6
245e4     49 97 02 F1 | 	add	arg03, arg01
245e8                 | ' long[base2+20]:=sample+$C0000000 
245e8     00 00 60 FF 
245ec     00 94 06 F1 | 	add	arg02, ##-1073741824
245f0     4B 93 02 F6 | 	mov	arg01, arg03
245f4     14 92 06 F1 | 	add	arg01, #20
245f8     49 95 62 FC | 	wrlong	arg02, arg01
245fc                 | ' long[base2+28]:= len
245fc     4B 95 02 F6 | 	mov	arg02, arg03
24600     1C 94 06 F1 | 	add	arg02, #28
24604     4A 9B 62 FC | 	wrlong	arg05, arg02
24608                 | ' long[base2+24]:= loop
24608     4B 9B 02 F6 | 	mov	arg05, arg03
2460c     18 9A 06 F1 | 	add	arg05, #24
24610     4D 9D 62 FC | 	wrlong	arg06, arg05
24614                 | ' word[base2+32]:= vol
24614     4B 9D 02 F6 | 	mov	arg06, arg03
24618     20 9C 06 F1 | 	add	arg06, #32
2461c     4E 99 52 FC | 	wrword	arg04, arg06
24620                 | ' long[base2+36]:= splfreq*389566
24620     24 96 06 F1 | 	add	arg03, #36
24624                 | ' waitms(delay)
24624     4F 93 02 F6 | 	mov	arg01, arg07
24628     18 9E 62 FD | 	getqx	arg07
2462c     4B 9F 62 FC | 	wrlong	arg07, arg03
24630     98 06 B0 FD | 	call	#__system___waitms
24634                 | _Audio2_004_spin2_play16_ret
24634     2D 00 64 FD | 	ret
24638                 | 
24638                 | ' 
24638                 | ' pub beep(channel,sample,splfreq,vol,len,loop,delay) | base2
24638                 | _Audio2_004_spin2_beep
24638     02 00 00 FF 
2463c     F2 97 06 FD | 	qmul	arg03, ##1522
24640                 | ' 
24640                 | ' base2:=@channel0[0]+64*channel
24640     32 97 02 F6 | 	mov	arg03, objptr
24644     0C 96 06 F1 | 	add	arg03, #12
24648     06 92 66 F0 | 	shl	arg01, #6
2464c     49 97 02 F1 | 	add	arg03, arg01
24650                 | ' long[base2+20]:=sample+$C0000000 
24650     00 00 60 FF 
24654     00 94 06 F1 | 	add	arg02, ##-1073741824
24658     4B 93 02 F6 | 	mov	arg01, arg03
2465c     14 92 06 F1 | 	add	arg01, #20
24660     49 95 62 FC | 	wrlong	arg02, arg01
24664                 | ' long[base2+28]:= len
24664     4B 95 02 F6 | 	mov	arg02, arg03
24668     1C 94 06 F1 | 	add	arg02, #28
2466c     4A 9B 62 FC | 	wrlong	arg05, arg02
24670                 | ' long[base2+24]:= loop
24670     4B 9B 02 F6 | 	mov	arg05, arg03
24674     18 9A 06 F1 | 	add	arg05, #24
24678     4D 9D 62 FC | 	wrlong	arg06, arg05
2467c                 | ' word[base2+32]:= vol
2467c     4B 9D 02 F6 | 	mov	arg06, arg03
24680     20 9C 06 F1 | 	add	arg06, #32
24684     4E 99 52 FC | 	wrword	arg04, arg06
24688                 | ' long[base2+36]:= splfreq*1522
24688     24 96 06 F1 | 	add	arg03, #36
2468c                 | ' waitms(delay)
2468c     4F 93 02 F6 | 	mov	arg01, arg07
24690     18 9E 62 FD | 	getqx	arg07
24694     4B 9F 62 FC | 	wrlong	arg07, arg03
24698     30 06 B0 FD | 	call	#__system___waitms
2469c                 | _Audio2_004_spin2_beep_ret
2469c     2D 00 64 FD | 	ret
246a0                 | hubexit
246a0     C1 00 80 FD | 	jmp	#cogexit
246a4                 | 
246a4                 | __system___setbaud
246a4     14 0E 07 FB | 	rdlong	muldiva_, #20
246a8     49 11 03 F6 | 	mov	muldivb_, arg01
246ac     FA 00 A0 FD | 	call	#divide_
246b0     D7 06 48 FB | 	callpa	#(@LR__3071-@LR__3070)>>2,fcache_load_ptr_
246b4                 | LR__3070
246b4     3E 7A 9E FA | 	rdpin	result1, #62 wc
246b8     3E 7D A2 F1 | 	subx	result2, result2
246bc     F4 FF 9F CD |  if_b	jmp	#LR__3070
246c0                 | LR__3071
246c0     40 7C 64 FD | 	dirl	#62
246c4     40 7E 64 FD | 	dirl	#63
246c8     35 11 63 FC | 	wrlong	muldivb_, ptr___system__dat__
246cc     10 10 67 F0 | 	shl	muldivb_, #16
246d0     07 94 06 F6 | 	mov	arg02, #7
246d4     88 95 02 F1 | 	add	arg02, muldivb_
246d8     3E F8 0C FC | 	wrpin	#124, #62
246dc     3E 94 16 FC | 	wxpin	arg02, #62
246e0     3F 7C 0C FC | 	wrpin	#62, #63
246e4     14 94 06 F1 | 	add	arg02, #20
246e8     3F 94 16 FC | 	wxpin	arg02, #63
246ec     41 7C 64 FD | 	dirh	#62
246f0     41 7E 64 FD | 	dirh	#63
246f4                 | __system___setbaud_ret
246f4     2D 00 64 FD | 	ret
246f8                 | 
246f8                 | __system___txraw
246f8     01 CA 05 F6 | 	mov	COUNT_, #1
246fc     E8 00 A0 FD | 	call	#pushregs_
24700     49 A7 02 F6 | 	mov	local01, arg01
24704     D7 06 48 FB | 	callpa	#(@LR__3081-@LR__3080)>>2,fcache_load_ptr_
24708                 | LR__3080
24708     3E 7A 9E FA | 	rdpin	result1, #62 wc
2470c     3E 7D A2 F1 | 	subx	result2, result2
24710     F4 FF 9F CD |  if_b	jmp	#LR__3080
24714                 | LR__3081
24714     35 7B 0A FB | 	rdlong	result1, ptr___system__dat__ wz
24718     42 0F 00 AF 
2471c     80 92 06 A6 |  if_e	mov	arg01, ##2000000
24720     80 FF BF AD |  if_e	call	#__system___setbaud
24724     58 7C 64 FD | 	drvl	#62
24728     3E A6 26 FC | 	wypin	local01, #62
2472c     01 7A 06 F6 | 	mov	result1, #1
24730     E7 F0 03 F6 | 	mov	ptra, fp
24734     F2 00 A0 FD | 	call	#popregs_
24738                 | __system___txraw_ret
24738     2D 00 64 FD | 	ret
2473c                 | 
2473c                 | __system___rxraw
2473c     0D CA 05 F6 | 	mov	COUNT_, #13
24740     E8 00 A0 FD | 	call	#pushregs_
24744     49 A7 02 F6 | 	mov	local01, arg01
24748     35 A9 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2474c     42 0F 00 AF 
24750     80 92 06 A6 |  if_e	mov	arg01, ##2000000
24754     4C FF BF AD |  if_e	call	#__system___setbaud
24758     00 A6 0E F2 | 	cmp	local01, #0 wz
2475c     20 00 90 AD |  if_e	jmp	#LR__3090
24760     14 AA 06 FB | 	rdlong	local03, #20
24764     0A AA 46 F0 | 	shr	local03, #10
24768     55 A7 02 FD | 	qmul	local01, local03
2476c     1A 7A 62 FD | 	getct	result1
24770     18 AC 62 FD | 	getqx	local04
24774     56 7B 02 F1 | 	add	result1, local04
24778     3D AF 02 F6 | 	mov	local05, result1
2477c     04 00 90 FD | 	jmp	#LR__3091
24780                 | LR__3090
24780     00 AE 06 F6 | 	mov	local05, #0
24784                 | LR__3091
24784     01 B0 66 F6 | 	neg	local06, #1
24788     3F B2 06 F6 | 	mov	local07, #63
2478c     00 B4 06 F6 | 	mov	local08, #0
24790     04 6A 06 F1 | 	add	ptr___system__dat__, #4
24794     35 B7 02 FB | 	rdlong	local09, ptr___system__dat__
24798     04 6A 86 F1 | 	sub	ptr___system__dat__, #4
2479c                 | LR__3092
2479c     08 B6 16 F4 | 	testb	local09, #8 wc
247a0     09 B6 76 F4 | 	testbn	local09, #9 andc
247a4     0A B6 46 F0 | 	shr	local09, #10
247a8     01 B4 06 C6 |  if_b	mov	local08, #1
247ac     40 7E 6C 3D |  if_ae	testp	#63 wz
247b0     01 B4 06 26 |  if_nc_and_z	mov	local08, #1
247b4     3F B6 8E 2A |  if_nc_and_z	rdpin	local09, #63
247b8     04 B6 46 20 |  if_nc_and_z	shr	local09, #4
247bc                 | LR__3093
247bc     00 A8 06 F6 | 	mov	local02, #0
247c0     00 B4 0E F2 | 	cmp	local08, #0 wz
247c4     01 A8 66 56 |  if_ne	neg	local02, #1
247c8     00 B8 06 F6 | 	mov	local10, #0
247cc     00 AA 06 F6 | 	mov	local03, #0
247d0     00 A6 0E F2 | 	cmp	local01, #0 wz
247d4     01 AA 66 56 |  if_ne	neg	local03, #1
247d8     00 AC 06 F6 | 	mov	local04, #0
247dc     00 BA 06 F6 | 	mov	local11, #0
247e0     57 BD 02 F6 | 	mov	local12, local05
247e4     1A 7A 62 FD | 	getct	result1
247e8     3D BF 02 F6 | 	mov	local13, result1
247ec     5F BD 82 F1 | 	sub	local12, local13
247f0     00 BC 56 F2 | 	cmps	local12, #0 wc
247f4     00 BA 26 C6 |  if_b	not	local11, #0
247f8     00 BA 0E F2 | 	cmp	local11, #0 wz
247fc     00 AC 26 56 |  if_ne	not	local04, #0
24800     56 AB CA F7 | 	test	local03, local04 wz
24804     00 B8 26 56 |  if_ne	not	local10, #0
24808     5C A9 4A F5 | 	or	local02, local10 wz
2480c     8C FF 9F AD |  if_e	jmp	#LR__3092
24810     00 B4 0E F2 | 	cmp	local08, #0 wz
24814     5B B1 02 56 |  if_ne	mov	local06, local09
24818     58 B1 E2 58 |  if_ne	getbyte	local06, local06, #0
2481c     04 6A 06 F1 | 	add	ptr___system__dat__, #4
24820     35 B7 62 FC | 	wrlong	local09, ptr___system__dat__
24824     04 6A 86 F1 | 	sub	ptr___system__dat__, #4
24828     58 7B 02 F6 | 	mov	result1, local06
2482c     E7 F0 03 F6 | 	mov	ptra, fp
24830     F2 00 A0 FD | 	call	#popregs_
24834                 | __system___rxraw_ret
24834     2D 00 64 FD | 	ret
24838                 | 
24838                 | __system___getus
24838     1A 7C 72 FD | 	getct	result2 wc
2483c     1A 80 62 FD | 	getct	_var01
24840     10 6A 06 F1 | 	add	ptr___system__dat__, #16
24844     35 83 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
24848     10 6A 86 F1 | 	sub	ptr___system__dat__, #16
2484c     20 00 90 5D |  if_ne	jmp	#LR__3100
24850     14 82 06 FB | 	rdlong	_var02, #20
24854     A1 07 00 FF 
24858     40 82 16 FD | 	qdiv	_var02, ##1000000
2485c     10 6A 06 F1 | 	add	ptr___system__dat__, #16
24860     18 7A 62 FD | 	getqx	result1
24864     3D 83 02 F6 | 	mov	_var02, result1
24868     35 7B 62 FC | 	wrlong	result1, ptr___system__dat__
2486c     10 6A 86 F1 | 	sub	ptr___system__dat__, #16
24870                 | LR__3100
24870     41 7D 12 FD | 	qdiv	result2, _var02
24874     19 7C 62 FD | 	getqy	result2
24878     28 7C 62 FD | 	setq	result2
2487c     41 81 12 FD | 	qdiv	_var01, _var02
24880     18 7A 62 FD | 	getqx	result1
24884                 | __system___getus_ret
24884     2D 00 64 FD | 	ret
24888                 | 
24888                 | __system____builtin_memmove
24888     49 81 02 F6 | 	mov	_var01, arg01
2488c     4A 93 52 F2 | 	cmps	arg01, arg02 wc
24890     10 00 90 CD |  if_b	jmp	#LR__3110
24894     4A 83 02 F6 | 	mov	_var02, arg02
24898     4B 83 02 F1 | 	add	_var02, arg03
2489c     41 93 52 F2 | 	cmps	arg01, _var02 wc
248a0     48 00 90 CD |  if_b	jmp	#LR__3116
248a4                 | LR__3110
248a4     4B 85 02 F6 | 	mov	_var03, arg03
248a8     02 84 4E F0 | 	shr	_var03, #2 wz
248ac     18 00 90 AD |  if_e	jmp	#LR__3115
248b0     D7 0A 48 FB | 	callpa	#(@LR__3113-@LR__3111)>>2,fcache_load_ptr_
248b4                 | LR__3111
248b4     42 09 D8 FC | 	rep	@LR__3114, _var03
248b8                 | LR__3112
248b8     4A 85 02 FB | 	rdlong	_var03, arg02
248bc     49 85 62 FC | 	wrlong	_var03, arg01
248c0     04 92 06 F1 | 	add	arg01, #4
248c4     04 94 06 F1 | 	add	arg02, #4
248c8                 | LR__3113
248c8                 | LR__3114
248c8                 | LR__3115
248c8     02 96 CE F7 | 	test	arg03, #2 wz
248cc     4A 83 E2 5A |  if_ne	rdword	_var02, arg02
248d0     49 83 52 5C |  if_ne	wrword	_var02, arg01
248d4     02 92 06 51 |  if_ne	add	arg01, #2
248d8     02 94 06 51 |  if_ne	add	arg02, #2
248dc     01 96 CE F7 | 	test	arg03, #1 wz
248e0     4A 83 C2 5A |  if_ne	rdbyte	_var02, arg02
248e4     49 83 42 5C |  if_ne	wrbyte	_var02, arg01
248e8     28 00 90 FD | 	jmp	#LR__3122
248ec                 | LR__3116
248ec     4B 93 02 F1 | 	add	arg01, arg03
248f0     4B 95 02 F1 | 	add	arg02, arg03
248f4     4B 87 0A F6 | 	mov	_var04, arg03 wz
248f8     18 00 90 AD |  if_e	jmp	#LR__3121
248fc     D7 0A 48 FB | 	callpa	#(@LR__3119-@LR__3117)>>2,fcache_load_ptr_
24900                 | LR__3117
24900     43 09 D8 FC | 	rep	@LR__3120, _var04
24904                 | LR__3118
24904     01 92 86 F1 | 	sub	arg01, #1
24908     01 94 86 F1 | 	sub	arg02, #1
2490c     4A 83 C2 FA | 	rdbyte	_var02, arg02
24910     49 83 42 FC | 	wrbyte	_var02, arg01
24914                 | LR__3119
24914                 | LR__3120
24914                 | LR__3121
24914                 | LR__3122
24914     40 7B 02 F6 | 	mov	result1, _var01
24918                 | __system____builtin_memmove_ret
24918     2D 00 64 FD | 	ret
2491c                 | 
2491c                 | __system__longmove
2491c     49 81 02 F6 | 	mov	_var01, arg01
24920     4A 93 52 F2 | 	cmps	arg01, arg02 wc
24924     24 00 90 3D |  if_ae	jmp	#LR__3134
24928     4B 83 0A F6 | 	mov	_var02, arg03 wz
2492c     54 00 90 AD |  if_e	jmp	#LR__3140
24930     D7 0A 48 FB | 	callpa	#(@LR__3132-@LR__3130)>>2,fcache_load_ptr_
24934                 | LR__3130
24934     41 09 D8 FC | 	rep	@LR__3133, _var02
24938                 | LR__3131
24938     4A 83 02 FB | 	rdlong	_var02, arg02
2493c     49 83 62 FC | 	wrlong	_var02, arg01
24940     04 92 06 F1 | 	add	arg01, #4
24944     04 94 06 F1 | 	add	arg02, #4
24948                 | LR__3132
24948                 | LR__3133
24948     38 00 90 FD | 	jmp	#LR__3140
2494c                 | LR__3134
2494c     4B 83 02 F6 | 	mov	_var02, arg03
24950     02 82 66 F0 | 	shl	_var02, #2
24954     41 93 02 F1 | 	add	arg01, _var02
24958     4B 85 02 F6 | 	mov	_var03, arg03
2495c     02 84 66 F0 | 	shl	_var03, #2
24960     42 95 02 F1 | 	add	arg02, _var03
24964     4B 87 0A F6 | 	mov	_var04, arg03 wz
24968     18 00 90 AD |  if_e	jmp	#LR__3139
2496c     D7 0A 48 FB | 	callpa	#(@LR__3137-@LR__3135)>>2,fcache_load_ptr_
24970                 | LR__3135
24970     43 09 D8 FC | 	rep	@LR__3138, _var04
24974                 | LR__3136
24974     04 92 86 F1 | 	sub	arg01, #4
24978     04 94 86 F1 | 	sub	arg02, #4
2497c     4A 87 02 FB | 	rdlong	_var04, arg02
24980     49 87 62 FC | 	wrlong	_var04, arg01
24984                 | LR__3137
24984                 | LR__3138
24984                 | LR__3139
24984                 | LR__3140
24984     40 7B 02 F6 | 	mov	result1, _var01
24988                 | __system__longmove_ret
24988     2D 00 64 FD | 	ret
2498c                 | 
2498c                 | __system____builtin_strcpy
2498c     49 81 02 F6 | 	mov	_var01, arg01
24990     D7 0A 48 FB | 	callpa	#(@LR__3151-@LR__3150)>>2,fcache_load_ptr_
24994                 | LR__3150
24994     4A 7B CA FA | 	rdbyte	result1, arg02 wz
24998     49 7B 42 FC | 	wrbyte	result1, arg01
2499c     01 94 06 F1 | 	add	arg02, #1
249a0     01 92 06 F1 | 	add	arg01, #1
249a4     EC FF 9F 5D |  if_ne	jmp	#LR__3150
249a8                 | LR__3151
249a8     40 7B 02 F6 | 	mov	result1, _var01
249ac                 | __system____builtin_strcpy_ret
249ac     2D 00 64 FD | 	ret
249b0                 | 
249b0                 | __system____topofstack
249b0     00 CA 05 F6 | 	mov	COUNT_, #0
249b4     E8 00 A0 FD | 	call	#pushregs_
249b8     08 F0 07 F1 | 	add	ptra, #8
249bc     04 CE 05 F1 | 	add	fp, #4
249c0     E7 92 62 FC | 	wrlong	arg01, fp
249c4     E7 7A 02 F6 | 	mov	result1, fp
249c8     04 CE 85 F1 | 	sub	fp, #4
249cc     E7 F0 03 F6 | 	mov	ptra, fp
249d0     F2 00 A0 FD | 	call	#popregs_
249d4                 | __system____topofstack_ret
249d4     2D 00 64 FD | 	ret
249d8                 | 
249d8                 | __system___lockmem
249d8     00 7A 06 F6 | 	mov	result1, #0
249dc     01 7A 62 FD | 	cogid	result1
249e0     00 7B 06 F1 | 	add	result1, #256
249e4                 | LR__3160
249e4     49 81 0A FB | 	rdlong	_var01, arg01 wz
249e8     49 7B 62 AC |  if_e	wrlong	result1, arg01
249ec     49 81 02 AB |  if_e	rdlong	_var01, arg01
249f0     49 81 02 AB |  if_e	rdlong	_var01, arg01
249f4     3D 81 0A F2 | 	cmp	_var01, result1 wz
249f8     E8 FF 9F 5D |  if_ne	jmp	#LR__3160
249fc                 | __system___lockmem_ret
249fc     2D 00 64 FD | 	ret
24a00                 | 
24a00                 | __system___string_cmp
24a00     D7 14 48 FB | 	callpa	#(@LR__3171-@LR__3170)>>2,fcache_load_ptr_
24a04                 | LR__3170
24a04     49 81 C2 FA | 	rdbyte	_var01, arg01
24a08     4A 83 C2 FA | 	rdbyte	_var02, arg02
24a0c     40 85 02 F6 | 	mov	_var03, _var01
24a10     41 85 8A F1 | 	sub	_var03, _var02 wz
24a14     01 92 06 F1 | 	add	arg01, #1
24a18     01 94 06 F1 | 	add	arg02, #1
24a1c     0C 00 90 5D |  if_ne	jmp	#LR__3172
24a20     00 80 0E F2 | 	cmp	_var01, #0 wz
24a24     00 82 0E 52 |  if_ne	cmp	_var02, #0 wz
24a28     D8 FF 9F 5D |  if_ne	jmp	#LR__3170
24a2c                 | LR__3171
24a2c                 | LR__3172
24a2c     42 7B 02 F6 | 	mov	result1, _var03
24a30                 | __system___string_cmp_ret
24a30     2D 00 64 FD | 	ret
24a34                 | 
24a34                 | __system___string_concat
24a34     05 CA 05 F6 | 	mov	COUNT_, #5
24a38     E8 00 A0 FD | 	call	#pushregs_
24a3c     49 A7 02 F6 | 	mov	local01, arg01
24a40     4A A9 02 F6 | 	mov	local02, arg02
24a44     53 93 02 F6 | 	mov	arg01, local01
24a48     49 AB 02 F6 | 	mov	local03, arg01
24a4c     D7 06 48 FB | 	callpa	#(@LR__3181-@LR__3180)>>2,fcache_load_ptr_
24a50                 | LR__3180
24a50     55 7B CA FA | 	rdbyte	result1, local03 wz
24a54     01 AA 06 51 |  if_ne	add	local03, #1
24a58     F4 FF 9F 5D |  if_ne	jmp	#LR__3180
24a5c                 | LR__3181
24a5c     49 AB 82 F1 | 	sub	local03, arg01
24a60     55 AD 02 F6 | 	mov	local04, local03
24a64     54 93 02 F6 | 	mov	arg01, local02
24a68     49 AB 02 F6 | 	mov	local03, arg01
24a6c     D7 06 48 FB | 	callpa	#(@LR__3183-@LR__3182)>>2,fcache_load_ptr_
24a70                 | LR__3182
24a70     55 7B CA FA | 	rdbyte	result1, local03 wz
24a74     01 AA 06 51 |  if_ne	add	local03, #1
24a78     F4 FF 9F 5D |  if_ne	jmp	#LR__3182
24a7c                 | LR__3183
24a7c     49 AB 82 F1 | 	sub	local03, arg01
24a80     56 93 02 F6 | 	mov	arg01, local04
24a84     55 93 02 F1 | 	add	arg01, local03
24a88     01 92 06 F1 | 	add	arg01, #1
24a8c     50 39 B0 FD | 	call	#__system___gc_alloc_managed
24a90     3D AF 0A F6 | 	mov	local05, result1 wz
24a94     28 00 90 AD |  if_e	jmp	#LR__3184
24a98     57 93 02 F6 | 	mov	arg01, local05
24a9c     53 95 02 F6 | 	mov	arg02, local01
24aa0     56 97 02 F6 | 	mov	arg03, local04
24aa4     E0 FD BF FD | 	call	#__system____builtin_memmove
24aa8     57 93 02 F6 | 	mov	arg01, local05
24aac     56 93 02 F1 | 	add	arg01, local04
24ab0     01 AA 06 F1 | 	add	local03, #1
24ab4     54 95 02 F6 | 	mov	arg02, local02
24ab8     55 97 02 F6 | 	mov	arg03, local03
24abc     C8 FD BF FD | 	call	#__system____builtin_memmove
24ac0                 | LR__3184
24ac0     57 7B 02 F6 | 	mov	result1, local05
24ac4     E7 F0 03 F6 | 	mov	ptra, fp
24ac8     F2 00 A0 FD | 	call	#popregs_
24acc                 | __system___string_concat_ret
24acc     2D 00 64 FD | 	ret
24ad0                 | 
24ad0                 | __system___tx
24ad0     02 CA 05 F6 | 	mov	COUNT_, #2
24ad4     E8 00 A0 FD | 	call	#pushregs_
24ad8     49 A7 02 F6 | 	mov	local01, arg01
24adc     0A A6 0E F2 | 	cmp	local01, #10 wz
24ae0     18 00 90 5D |  if_ne	jmp	#LR__3190
24ae4     08 6A 06 F1 | 	add	ptr___system__dat__, #8
24ae8     35 A9 02 FB | 	rdlong	local02, ptr___system__dat__
24aec     08 6A 86 F1 | 	sub	ptr___system__dat__, #8
24af0     02 A8 CE F7 | 	test	local02, #2 wz
24af4     0D 92 06 56 |  if_ne	mov	arg01, #13
24af8     FC FB BF 5D |  if_ne	call	#__system___txraw
24afc                 | LR__3190
24afc     53 93 02 F6 | 	mov	arg01, local01
24b00     F4 FB BF FD | 	call	#__system___txraw
24b04     E7 F0 03 F6 | 	mov	ptra, fp
24b08     F2 00 A0 FD | 	call	#popregs_
24b0c                 | __system___tx_ret
24b0c     2D 00 64 FD | 	ret
24b10                 | 
24b10                 | __system___rx
24b10     01 CA 05 F6 | 	mov	COUNT_, #1
24b14     E8 00 A0 FD | 	call	#pushregs_
24b18                 | LR__3200
24b18     00 92 06 F6 | 	mov	arg01, #0
24b1c     1C FC BF FD | 	call	#__system___rxraw
24b20     3D A7 02 F6 | 	mov	local01, result1
24b24     FF FF 7F FF 
24b28     FF A7 0E F2 | 	cmp	local01, ##-1 wz
24b2c     E8 FF 9F AD |  if_e	jmp	#LR__3200
24b30     0D A6 0E F2 | 	cmp	local01, #13 wz
24b34     14 00 90 5D |  if_ne	jmp	#LR__3201
24b38     08 6A 06 F1 | 	add	ptr___system__dat__, #8
24b3c     35 7B 02 FB | 	rdlong	result1, ptr___system__dat__
24b40     08 6A 86 F1 | 	sub	ptr___system__dat__, #8
24b44     02 7A CE F7 | 	test	result1, #2 wz
24b48     0A A6 06 56 |  if_ne	mov	local01, #10
24b4c                 | LR__3201
24b4c     08 6A 06 F1 | 	add	ptr___system__dat__, #8
24b50     35 93 02 FB | 	rdlong	arg01, ptr___system__dat__
24b54     08 6A 86 F1 | 	sub	ptr___system__dat__, #8
24b58     01 92 CE F7 | 	test	arg01, #1 wz
24b5c     1C 00 90 AD |  if_e	jmp	#LR__3204
24b60     7F A6 0E F2 | 	cmp	local01, #127 wz
24b64     0C 00 90 5D |  if_ne	jmp	#LR__3202
24b68     08 92 06 F6 | 	mov	arg01, #8
24b6c     60 FF BF FD | 	call	#__system___tx
24b70     08 00 90 FD | 	jmp	#LR__3203
24b74                 | LR__3202
24b74     53 93 02 F6 | 	mov	arg01, local01
24b78     54 FF BF FD | 	call	#__system___tx
24b7c                 | LR__3203
24b7c                 | LR__3204
24b7c     53 7B 02 F6 | 	mov	result1, local01
24b80     E7 F0 03 F6 | 	mov	ptra, fp
24b84     F2 00 A0 FD | 	call	#popregs_
24b88                 | __system___rx_ret
24b88     2D 00 64 FD | 	ret
24b8c                 | 
24b8c                 | __system___pinwrite
24b8c     49 81 02 F6 | 	mov	_var01, arg01
24b90     1F 80 06 F5 | 	and	_var01, #31
24b94     20 92 CE F7 | 	test	arg01, #32 wz
24b98     06 92 46 F0 | 	shr	arg01, #6
24b9c     49 93 CA F9 | 	bmask	arg01, arg01
24ba0     40 93 62 F0 | 	shl	arg01, _var01
24ba4     40 95 62 F0 | 	shl	arg02, _var01
24ba8     1C 00 90 AD |  if_e	jmp	#LR__3210
24bac     49 F7 43 F5 | 	or	dirb, arg01
24bb0     FD 81 02 F6 | 	mov	_var01, outb
24bb4     49 81 22 F5 | 	andn	_var01, arg01
24bb8     49 95 02 F5 | 	and	arg02, arg01
24bbc     4A 81 42 F5 | 	or	_var01, arg02
24bc0     40 FB 03 F6 | 	mov	outb, _var01
24bc4     18 00 90 FD | 	jmp	#LR__3211
24bc8                 | LR__3210
24bc8     49 F5 43 F5 | 	or	dira, arg01
24bcc     FC 81 02 F6 | 	mov	_var01, outa
24bd0     49 81 22 F5 | 	andn	_var01, arg01
24bd4     49 95 02 F5 | 	and	arg02, arg01
24bd8     4A 81 42 F5 | 	or	_var01, arg02
24bdc     40 F9 03 F6 | 	mov	outa, _var01
24be0                 | LR__3211
24be0                 | __system___pinwrite_ret
24be0     2D 00 64 FD | 	ret
24be4                 | 
24be4                 | __system___basic_read_line
24be4     06 CA 05 F6 | 	mov	COUNT_, #6
24be8     E8 00 A0 FD | 	call	#pushregs_
24bec     49 A7 02 F6 | 	mov	local01, arg01
24bf0     00 A8 06 F6 | 	mov	local02, #0
24bf4     18 AA 06 F6 | 	mov	local03, #24
24bf8     00 AC 06 F6 | 	mov	local04, #0
24bfc     18 92 06 F6 | 	mov	arg01, #24
24c00     DC 37 B0 FD | 	call	#__system___gc_alloc_managed
24c04     3D AF 0A F6 | 	mov	local05, result1 wz
24c08     57 7B 02 A6 |  if_e	mov	result1, local05
24c0c     B0 00 90 AD |  if_e	jmp	#LR__3223
24c10                 | LR__3220
24c10     53 93 02 F6 | 	mov	arg01, local01
24c14     78 0B B0 FD | 	call	#__system___basic_get_char
24c18     3D B1 02 F6 | 	mov	local06, result1
24c1c     01 B0 56 F2 | 	cmps	local06, #1 wc
24c20     8C 00 90 CD |  if_b	jmp	#LR__3222
24c24     0A B0 0E F2 | 	cmp	local06, #10 wz
24c28     10 00 90 5D |  if_ne	jmp	#LR__3221
24c2c     00 AC 0E F2 | 	cmp	local04, #0 wz
24c30     01 A8 56 52 |  if_ne	cmps	local02, #1 wc
24c34     01 A8 86 11 |  if_a	sub	local02, #1
24c38     74 00 90 FD | 	jmp	#LR__3222
24c3c                 | LR__3221
24c3c     0D B0 0E F2 | 	cmp	local06, #13 wz
24c40     01 AC 06 A6 |  if_e	mov	local04, #1
24c44     00 AC 06 56 |  if_ne	mov	local04, #0
24c48     08 B0 0E F2 | 	cmp	local06, #8 wz
24c4c     7F B0 0E 52 |  if_ne	cmp	local06, #127 wz
24c50     01 A8 56 A2 |  if_e	cmps	local02, #1 wc
24c54     01 A8 86 21 |  if_nc_and_z	sub	local02, #1
24c58     B4 FF 9F AD |  if_e	jmp	#LR__3220
24c5c     57 97 02 F6 | 	mov	arg03, local05
24c60     54 97 02 F1 | 	add	arg03, local02
24c64     4B B1 42 FC | 	wrbyte	local06, arg03
24c68     01 A8 06 F1 | 	add	local02, #1
24c6c     55 A9 0A F2 | 	cmp	local02, local03 wz
24c70     9C FF 9F 5D |  if_ne	jmp	#LR__3220
24c74     55 93 02 F6 | 	mov	arg01, local03
24c78     20 92 06 F1 | 	add	arg01, #32
24c7c     60 37 B0 FD | 	call	#__system___gc_alloc_managed
24c80     3D B1 0A F6 | 	mov	local06, result1 wz
24c84     58 7B 02 A6 |  if_e	mov	result1, local06
24c88     34 00 90 AD |  if_e	jmp	#LR__3223
24c8c     58 93 02 F6 | 	mov	arg01, local06
24c90     57 95 02 F6 | 	mov	arg02, local05
24c94     55 97 02 F6 | 	mov	arg03, local03
24c98     EC FB BF FD | 	call	#__system____builtin_memmove
24c9c     20 AA 06 F1 | 	add	local03, #32
24ca0     57 93 02 F6 | 	mov	arg01, local05
24ca4     6C 38 B0 FD | 	call	#__system___gc_free
24ca8     58 AF 02 F6 | 	mov	local05, local06
24cac     60 FF 9F FD | 	jmp	#LR__3220
24cb0                 | LR__3222
24cb0     57 B1 02 F6 | 	mov	local06, local05
24cb4     54 B1 02 F1 | 	add	local06, local02
24cb8     58 01 48 FC | 	wrbyte	#0, local06
24cbc     57 7B 02 F6 | 	mov	result1, local05
24cc0                 | LR__3223
24cc0     E7 F0 03 F6 | 	mov	ptra, fp
24cc4     F2 00 A0 FD | 	call	#popregs_
24cc8                 | __system___basic_read_line_ret
24cc8     2D 00 64 FD | 	ret
24ccc                 | 
24ccc                 | __system___waitms
24ccc     49 81 02 F6 | 	mov	_var01, arg01
24cd0     1A 82 62 FD | 	getct	_var02
24cd4     14 84 06 FB | 	rdlong	_var03, #20
24cd8     D7 14 48 FB | 	callpa	#(@LR__3231-@LR__3230)>>2,fcache_load_ptr_
24cdc                 | LR__3230
24cdc     01 00 00 FF 
24ce0     E8 81 56 F2 | 	cmps	_var01, ##1000 wc
24ce4     1C 00 90 CD |  if_b	jmp	#LR__3232
24ce8     42 83 02 F1 | 	add	_var02, _var03
24cec     41 93 02 F6 | 	mov	arg01, _var02
24cf0     00 92 66 FA | 	addct1	arg01, #0
24cf4     24 22 60 FD | 	waitct1
24cf8     01 00 00 FF 
24cfc     E8 81 86 F1 | 	sub	_var01, ##1000
24d00     D8 FF 9F FD | 	jmp	#LR__3230
24d04                 | LR__3231
24d04                 | LR__3232
24d04     01 80 56 F2 | 	cmps	_var01, #1 wc
24d08     28 00 90 CD |  if_b	jmp	#LR__3233
24d0c     42 81 02 FD | 	qmul	_var01, _var03
24d10     01 00 00 FF 
24d14     E8 97 06 F6 | 	mov	arg03, ##1000
24d18     19 7A 62 FD | 	getqy	result1
24d1c     18 92 62 FD | 	getqx	arg01
24d20     28 7A 62 FD | 	setq	result1
24d24     4B 93 12 FD | 	qdiv	arg01, arg03
24d28     18 92 62 FD | 	getqx	arg01
24d2c     41 93 62 FA | 	addct1	arg01, _var02
24d30     24 22 60 FD | 	waitct1
24d34                 | LR__3233
24d34                 | __system___waitms_ret
24d34     2D 00 64 FD | 	ret
24d38                 | 
24d38                 | __system___waitus
24d38     49 81 02 F6 | 	mov	_var01, arg01
24d3c     1A 82 62 FD | 	getct	_var02
24d40     14 84 06 FB | 	rdlong	_var03, #20
24d44     D7 14 48 FB | 	callpa	#(@LR__3241-@LR__3240)>>2,fcache_load_ptr_
24d48                 | LR__3240
24d48     A1 07 00 FF 
24d4c     40 80 56 F2 | 	cmps	_var01, ##1000000 wc
24d50     1C 00 90 CD |  if_b	jmp	#LR__3242
24d54     42 83 02 F1 | 	add	_var02, _var03
24d58     41 93 02 F6 | 	mov	arg01, _var02
24d5c     00 92 66 FA | 	addct1	arg01, #0
24d60     24 22 60 FD | 	waitct1
24d64     A1 07 00 FF 
24d68     40 80 86 F1 | 	sub	_var01, ##1000000
24d6c     D8 FF 9F FD | 	jmp	#LR__3240
24d70                 | LR__3241
24d70                 | LR__3242
24d70     01 80 56 F2 | 	cmps	_var01, #1 wc
24d74     28 00 90 CD |  if_b	jmp	#LR__3243
24d78     42 81 02 FD | 	qmul	_var01, _var03
24d7c     A1 07 00 FF 
24d80     40 96 06 F6 | 	mov	arg03, ##1000000
24d84     19 7A 62 FD | 	getqy	result1
24d88     18 92 62 FD | 	getqx	arg01
24d8c     28 7A 62 FD | 	setq	result1
24d90     4B 93 12 FD | 	qdiv	arg01, arg03
24d94     18 7A 62 FD | 	getqx	result1
24d98     3D 83 62 FA | 	addct1	_var02, result1
24d9c     24 22 60 FD | 	waitct1
24da0                 | LR__3243
24da0                 | __system___waitus_ret
24da0     2D 00 64 FD | 	ret
24da4                 | 
24da4                 | __system___mount
24da4     09 CA 05 F6 | 	mov	COUNT_, #9
24da8     E8 00 A0 FD | 	call	#pushregs_
24dac     49 A7 02 F6 | 	mov	local01, arg01
24db0     4A A9 0A F6 | 	mov	local02, arg02 wz
24db4     01 AA 66 F6 | 	neg	local03, #1
24db8     01 7A 66 A6 |  if_e	neg	result1, #1
24dbc     9C 02 90 AD |  if_e	jmp	#LR__3265
24dc0     53 7B C2 FA | 	rdbyte	result1, local01
24dc4     2F 7A 0E F2 | 	cmp	result1, #47 wz
24dc8     28 00 90 5D |  if_ne	jmp	#LR__3252
24dcc     53 93 02 F6 | 	mov	arg01, local01
24dd0     49 AD 02 F6 | 	mov	local04, arg01
24dd4     D7 06 48 FB | 	callpa	#(@LR__3251-@LR__3250)>>2,fcache_load_ptr_
24dd8                 | LR__3250
24dd8     56 7B CA FA | 	rdbyte	result1, local04 wz
24ddc     01 AC 06 51 |  if_ne	add	local04, #1
24de0     F4 FF 9F 5D |  if_ne	jmp	#LR__3250
24de4                 | LR__3251
24de4     49 AD 82 F1 | 	sub	local04, arg01
24de8     56 7B 02 F6 | 	mov	result1, local04
24dec     10 7A 56 F2 | 	cmps	result1, #16 wc
24df0     14 00 90 CD |  if_b	jmp	#LR__3253
24df4                 | LR__3252
24df4     20 6A 06 F1 | 	add	ptr___system__dat__, #32
24df8     35 15 68 FC | 	wrlong	#10, ptr___system__dat__
24dfc     20 6A 86 F1 | 	sub	ptr___system__dat__, #32
24e00     01 7A 66 F6 | 	neg	result1, #1
24e04     54 02 90 FD | 	jmp	#LR__3265
24e08                 | LR__3253
24e08     00 AE 06 F6 | 	mov	local05, #0
24e0c                 | LR__3254
24e0c     04 AE 56 F2 | 	cmps	local05, #4 wc
24e10     B4 00 90 3D |  if_ae	jmp	#LR__3259
24e14     57 93 02 F6 | 	mov	arg01, local05
24e18     02 92 66 F0 | 	shl	arg01, #2
24e1c     35 7B 02 F6 | 	mov	result1, ptr___system__dat__
24e20     64 7A 06 F1 | 	add	result1, #100
24e24     3D 93 02 F1 | 	add	arg01, result1
24e28     49 7B 0A FB | 	rdlong	result1, arg01 wz
24e2c     00 AA 56 A2 |  if_e	cmps	local03, #0 wc
24e30     57 AB 02 86 |  if_c_and_z	mov	local03, local05
24e34     88 00 90 8D |  if_c_and_z	jmp	#LR__3258
24e38     57 93 02 F6 | 	mov	arg01, local05
24e3c     02 92 66 F0 | 	shl	arg01, #2
24e40     35 AD 02 F6 | 	mov	local04, ptr___system__dat__
24e44     64 AC 06 F1 | 	add	local04, #100
24e48     56 93 02 F1 | 	add	arg01, local04
24e4c     49 93 02 FB | 	rdlong	arg01, arg01
24e50     49 AD 02 F6 | 	mov	local04, arg01
24e54     D7 06 48 FB | 	callpa	#(@LR__3256-@LR__3255)>>2,fcache_load_ptr_
24e58                 | LR__3255
24e58     56 7B CA FA | 	rdbyte	result1, local04 wz
24e5c     01 AC 06 51 |  if_ne	add	local04, #1
24e60     F4 FF 9F 5D |  if_ne	jmp	#LR__3255
24e64                 | LR__3256
24e64     49 AD 82 F1 | 	sub	local04, arg01
24e68     56 7B 02 F6 | 	mov	result1, local04
24e6c     3D B1 02 F6 | 	mov	local06, result1
24e70     58 93 02 F6 | 	mov	arg01, local06
24e74     53 93 02 F1 | 	add	arg01, local01
24e78     49 AD C2 FA | 	rdbyte	local04, arg01
24e7c     2F AC 0E F2 | 	cmp	local04, #47 wz
24e80     58 B3 02 56 |  if_ne	mov	local07, local06
24e84     53 B3 02 51 |  if_ne	add	local07, local01
24e88     59 93 CA 5A |  if_ne	rdbyte	arg01, local07 wz
24e8c     30 00 90 5D |  if_ne	jmp	#LR__3257
24e90     57 AD 02 F6 | 	mov	local04, local05
24e94     02 AC 66 F0 | 	shl	local04, #2
24e98     35 97 02 F6 | 	mov	arg03, ptr___system__dat__
24e9c     64 96 06 F1 | 	add	arg03, #100
24ea0     4B AD 02 F1 | 	add	local04, arg03
24ea4     56 95 02 FB | 	rdlong	arg02, local04
24ea8     53 93 02 F6 | 	mov	arg01, local01
24eac     58 97 02 F6 | 	mov	arg03, local06
24eb0     24 4A B0 FD | 	call	#__system__strncmp
24eb4     00 7A 0E F2 | 	cmp	result1, #0 wz
24eb8     57 AB 02 A6 |  if_e	mov	local03, local05
24ebc     08 00 90 AD |  if_e	jmp	#LR__3259
24ec0                 | LR__3257
24ec0                 | LR__3258
24ec0     01 AE 06 F1 | 	add	local05, #1
24ec4     44 FF 9F FD | 	jmp	#LR__3254
24ec8                 | LR__3259
24ec8     FF FF 7F FF 
24ecc     FF AB 0E F2 | 	cmp	local03, ##-1 wz
24ed0     20 6A 06 A1 |  if_e	add	ptr___system__dat__, #32
24ed4     35 17 68 AC |  if_e	wrlong	#11, ptr___system__dat__
24ed8     20 6A 86 A1 |  if_e	sub	ptr___system__dat__, #32
24edc     01 7A 66 A6 |  if_e	neg	result1, #1
24ee0     78 01 90 AD |  if_e	jmp	#LR__3265
24ee4     55 AF 02 F6 | 	mov	local05, local03
24ee8     57 B3 02 F6 | 	mov	local07, local05
24eec     02 B2 66 F0 | 	shl	local07, #2
24ef0     35 B1 02 F6 | 	mov	local06, ptr___system__dat__
24ef4     74 B0 06 F1 | 	add	local06, #116
24ef8     58 B3 02 F1 | 	add	local07, local06
24efc     59 B1 0A FB | 	rdlong	local06, local07 wz
24f00     58 00 90 AD |  if_e	jmp	#LR__3260
24f04     4C B0 06 F1 | 	add	local06, #76
24f08     58 B3 0A FB | 	rdlong	local07, local06 wz
24f0c     4C B0 86 F1 | 	sub	local06, #76
24f10     48 00 90 AD |  if_e	jmp	#LR__3260
24f14     4C B0 06 F1 | 	add	local06, #76
24f18     58 B3 02 FB | 	rdlong	local07, local06
24f1c     59 AD 02 F6 | 	mov	local04, local07
24f20     13 B2 46 F7 | 	zerox	local07, #19
24f24     14 AC 46 F0 | 	shr	local04, #20
24f28     02 AC 66 F0 | 	shl	local04, #2
24f2c     2D AD 02 F1 | 	add	local04, __methods__
24f30     56 AD 02 FB | 	rdlong	local04, local04
24f34     57 B1 02 F6 | 	mov	local06, local05
24f38     02 B0 66 F0 | 	shl	local06, #2
24f3c     35 AB 02 F6 | 	mov	local03, ptr___system__dat__
24f40     64 AA 06 F1 | 	add	local03, #100
24f44     55 B1 02 F1 | 	add	local06, local03
24f48     58 93 02 FB | 	rdlong	arg01, local06
24f4c     32 B1 02 F6 | 	mov	local06, objptr
24f50     59 65 02 F6 | 	mov	objptr, local07
24f54     2D AC 62 FD | 	call	local04
24f58     58 65 02 F6 | 	mov	objptr, local06
24f5c                 | LR__3260
24f5c     57 B1 02 F6 | 	mov	local06, local05
24f60     02 B0 66 F0 | 	shl	local06, #2
24f64     35 B3 02 F6 | 	mov	local07, ptr___system__dat__
24f68     74 B2 06 F1 | 	add	local07, #116
24f6c     59 B1 02 F1 | 	add	local06, local07
24f70     58 A9 62 FC | 	wrlong	local02, local06
24f74     00 A8 0E F2 | 	cmp	local02, #0 wz
24f78     18 00 90 5D |  if_ne	jmp	#LR__3261
24f7c     02 AE 66 F0 | 	shl	local05, #2
24f80     35 B3 02 F6 | 	mov	local07, ptr___system__dat__
24f84     64 B2 06 F1 | 	add	local07, #100
24f88     59 AF 02 F1 | 	add	local05, local07
24f8c     57 01 68 FC | 	wrlong	#0, local05
24f90     C4 00 90 FD | 	jmp	#LR__3264
24f94                 | LR__3261
24f94     57 B5 02 F6 | 	mov	local08, local05
24f98     04 B4 66 F0 | 	shl	local08, #4
24f9c     35 B3 02 F6 | 	mov	local07, ptr___system__dat__
24fa0     24 B2 06 F1 | 	add	local07, #36
24fa4     59 B5 02 F1 | 	add	local08, local07
24fa8     5A 93 02 F6 | 	mov	arg01, local08
24fac     53 95 02 F6 | 	mov	arg02, local01
24fb0     10 96 06 F6 | 	mov	arg03, #16
24fb4     64 48 B0 FD | 	call	#__system__strncpy
24fb8     48 A8 06 F1 | 	add	local02, #72
24fbc     54 B3 0A FB | 	rdlong	local07, local02 wz
24fc0     48 A8 86 F1 | 	sub	local02, #72
24fc4     7C 00 90 AD |  if_e	jmp	#LR__3263
24fc8     48 A8 06 F1 | 	add	local02, #72
24fcc     54 B3 02 FB | 	rdlong	local07, local02
24fd0     59 B7 02 F6 | 	mov	local09, local07
24fd4     13 B2 46 F7 | 	zerox	local07, #19
24fd8     14 B6 46 F0 | 	shr	local09, #20
24fdc     02 B6 66 F0 | 	shl	local09, #2
24fe0     2D B7 02 F1 | 	add	local09, __methods__
24fe4     5B B7 02 FB | 	rdlong	local09, local09
24fe8     5A 93 02 F6 | 	mov	arg01, local08
24fec     32 B1 02 F6 | 	mov	local06, objptr
24ff0     59 65 02 F6 | 	mov	objptr, local07
24ff4     2D B6 62 FD | 	call	local09
24ff8     58 65 02 F6 | 	mov	objptr, local06
24ffc     3D 93 0A F6 | 	mov	arg01, result1 wz
25000     40 00 90 AD |  if_e	jmp	#LR__3262
25004     57 B5 02 F6 | 	mov	local08, local05
25008     02 B4 66 F0 | 	shl	local08, #2
2500c     74 6A 06 F1 | 	add	ptr___system__dat__, #116
25010     35 B5 02 F1 | 	add	local08, ptr___system__dat__
25014     5A 01 68 FC | 	wrlong	#0, local08
25018     02 AE 66 F0 | 	shl	local05, #2
2501c     10 6A 86 F1 | 	sub	ptr___system__dat__, #16
25020     35 AF 02 F1 | 	add	local05, ptr___system__dat__
25024     57 01 68 FC | 	wrlong	#0, local05
25028     49 93 6A F6 | 	neg	arg01, arg01 wz
2502c     44 6A 86 F1 | 	sub	ptr___system__dat__, #68
25030     35 93 62 FC | 	wrlong	arg01, ptr___system__dat__
25034     20 6A 86 F1 | 	sub	ptr___system__dat__, #32
25038     01 7A 66 56 |  if_ne	neg	result1, #1
2503c     00 7A 06 A6 |  if_e	mov	result1, #0
25040     18 00 90 FD | 	jmp	#LR__3265
25044                 | LR__3262
25044                 | LR__3263
25044     02 AE 66 F0 | 	shl	local05, #2
25048     35 B3 02 F6 | 	mov	local07, ptr___system__dat__
2504c     64 B2 06 F1 | 	add	local07, #100
25050     59 AF 02 F1 | 	add	local05, local07
25054     57 B5 62 FC | 	wrlong	local08, local05
25058                 | LR__3264
25058     00 7A 06 F6 | 	mov	result1, #0
2505c                 | LR__3265
2505c     E7 F0 03 F6 | 	mov	ptra, fp
25060     F2 00 A0 FD | 	call	#popregs_
25064                 | __system___mount_ret
25064     2D 00 64 FD | 	ret
25068                 | 
25068                 | __system___chdir
25068     02 CA 05 F6 | 	mov	COUNT_, #2
2506c     E8 00 A0 FD | 	call	#pushregs_
25070     44 F0 07 F1 | 	add	ptra, #68
25074     49 A7 02 F6 | 	mov	local01, arg01
25078     E7 94 02 F6 | 	mov	arg02, fp
2507c     08 94 06 F1 | 	add	arg02, #8
25080     53 93 02 F6 | 	mov	arg01, local01
25084     D8 43 B0 FD | 	call	#__system__stat
25088     00 7A 0E F2 | 	cmp	result1, #0 wz
2508c     88 00 90 5D |  if_ne	jmp	#LR__3272
25090     10 CE 05 F1 | 	add	fp, #16
25094     E7 92 02 FB | 	rdlong	arg01, fp
25098     10 CE 85 F1 | 	sub	fp, #16
2509c     78 00 00 FF 
250a0     00 92 06 F5 | 	and	arg01, ##61440
250a4     08 00 00 FF 
250a8     00 92 0E F2 | 	cmp	arg01, ##4096 wz
250ac     20 6A 06 51 |  if_ne	add	ptr___system__dat__, #32
250b0     35 1B 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
250b4     20 6A 86 51 |  if_ne	sub	ptr___system__dat__, #32
250b8     01 7A 66 56 |  if_ne	neg	result1, #1
250bc     58 00 90 5D |  if_ne	jmp	#LR__3272
250c0     53 97 C2 FA | 	rdbyte	arg03, local01
250c4     2F 96 0E F2 | 	cmp	arg03, #47 wz
250c8     18 00 90 5D |  if_ne	jmp	#LR__3270
250cc     35 93 02 F6 | 	mov	arg01, ptr___system__dat__
250d0     84 92 06 F1 | 	add	arg01, #132
250d4     53 95 02 F6 | 	mov	arg02, local01
250d8     00 97 06 F6 | 	mov	arg03, #256
250dc     3C 47 B0 FD | 	call	#__system__strncpy
250e0     30 00 90 FD | 	jmp	#LR__3271
250e4                 | LR__3270
250e4     35 A9 02 F6 | 	mov	local02, ptr___system__dat__
250e8     84 A9 06 F1 | 	add	local02, #388
250ec     35 95 02 F6 | 	mov	arg02, ptr___system__dat__
250f0     84 94 06 F1 | 	add	arg02, #132
250f4     54 93 02 F6 | 	mov	arg01, local02
250f8     00 97 06 F6 | 	mov	arg03, #256
250fc     1C 47 B0 FD | 	call	#__system__strncpy
25100     35 97 02 F6 | 	mov	arg03, ptr___system__dat__
25104     84 96 06 F1 | 	add	arg03, #132
25108     54 93 02 F6 | 	mov	arg01, local02
2510c     53 95 02 F6 | 	mov	arg02, local01
25110     10 00 B0 FD | 	call	#__system____getvfsforfile
25114                 | LR__3271
25114     00 7A 06 F6 | 	mov	result1, #0
25118                 | LR__3272
25118     E7 F0 03 F6 | 	mov	ptra, fp
2511c     F2 00 A0 FD | 	call	#popregs_
25120                 | __system___chdir_ret
25120     2D 00 64 FD | 	ret
25124                 | 
25124                 | __system____getvfsforfile
25124     0E CA 05 F6 | 	mov	COUNT_, #14
25128     E8 00 A0 FD | 	call	#pushregs_
2512c     49 A7 02 F6 | 	mov	local01, arg01
25130     4A A9 02 F6 | 	mov	local02, arg02
25134     4B AB 02 F6 | 	mov	local03, arg03
25138     D7 10 48 FB | 	callpa	#(@LR__3281-@LR__3280)>>2,fcache_load_ptr_
2513c                 | LR__3280
2513c     54 7B C2 FA | 	rdbyte	result1, local02
25140     2F 7A 0E F2 | 	cmp	result1, #47 wz
25144     01 A8 06 A1 |  if_e	add	local02, #1
25148     54 AD C2 AA |  if_e	rdbyte	local04, local02
2514c     01 A8 86 A1 |  if_e	sub	local02, #1
25150     2F AC 0E A2 |  if_e	cmp	local04, #47 wz
25154     01 A8 06 A1 |  if_e	add	local02, #1
25158     E0 FF 9F AD |  if_e	jmp	#LR__3280
2515c                 | LR__3281
2515c     54 AD C2 FA | 	rdbyte	local04, local02
25160     2F AC 0E F2 | 	cmp	local04, #47 wz
25164     14 00 90 5D |  if_ne	jmp	#LR__3282
25168     53 93 02 F6 | 	mov	arg01, local01
2516c     54 95 02 F6 | 	mov	arg02, local02
25170     00 97 06 F6 | 	mov	arg03, #256
25174     A4 46 B0 FD | 	call	#__system__strncpy
25178     78 00 90 FD | 	jmp	#LR__3284
2517c                 | LR__3282
2517c     35 95 02 F6 | 	mov	arg02, ptr___system__dat__
25180     84 94 06 F1 | 	add	arg02, #132
25184     53 93 02 F6 | 	mov	arg01, local01
25188     00 97 06 F6 | 	mov	arg03, #256
2518c     8C 46 B0 FD | 	call	#__system__strncpy
25190     54 AD CA FA | 	rdbyte	local04, local02 wz
25194     5C 00 90 AD |  if_e	jmp	#LR__3283
25198     54 AD C2 FA | 	rdbyte	local04, local02
2519c     2E AC 0E F2 | 	cmp	local04, #46 wz
251a0     01 A8 06 A1 |  if_e	add	local02, #1
251a4     54 AF C2 AA |  if_e	rdbyte	local05, local02
251a8     01 A8 86 A1 |  if_e	sub	local02, #1
251ac     57 B1 02 A6 |  if_e	mov	local06, local05
251b0     07 B0 4E A7 |  if_e	zerox	local06, #7 wz
251b4     3C 00 90 AD |  if_e	jmp	#LR__3283
251b8     53 AF C2 FA | 	rdbyte	local05, local01
251bc     2F AE 0E F2 | 	cmp	local05, #47 wz
251c0     01 A6 06 A1 |  if_e	add	local01, #1
251c4     53 AD C2 AA |  if_e	rdbyte	local04, local01
251c8     01 A6 86 A1 |  if_e	sub	local01, #1
251cc     00 AC 4E A2 |  if_e	cmps	local04, #0 wz
251d0     92 01 00 5F 
251d4     B0 94 06 56 |  if_ne	mov	arg02, ##@LR__5460
251d8     53 93 02 56 |  if_ne	mov	arg01, local01
251dc     00 97 06 56 |  if_ne	mov	arg03, #256
251e0     90 46 B0 5D |  if_ne	call	#__system__strncat
251e4     53 93 02 F6 | 	mov	arg01, local01
251e8     54 95 02 F6 | 	mov	arg02, local02
251ec     00 97 06 F6 | 	mov	arg03, #256
251f0     80 46 B0 FD | 	call	#__system__strncat
251f4                 | LR__3283
251f4                 | LR__3284
251f4     53 93 02 F6 | 	mov	arg01, local01
251f8     3C 48 B0 FD | 	call	#__system___normalizeName
251fc     53 AD CA FA | 	rdbyte	local04, local01 wz
25200     1C 00 90 AD |  if_e	jmp	#LR__3285
25204     53 AD C2 FA | 	rdbyte	local04, local01
25208     2F AC 0E F2 | 	cmp	local04, #47 wz
2520c     01 A6 06 A1 |  if_e	add	local01, #1
25210     53 B1 C2 AA |  if_e	rdbyte	local06, local01
25214     01 A6 86 A1 |  if_e	sub	local01, #1
25218     00 B0 4E A2 |  if_e	cmps	local06, #0 wz
2521c     10 00 90 5D |  if_ne	jmp	#LR__3286
25220                 | LR__3285
25220     35 7B 02 F6 | 	mov	result1, ptr___system__dat__
25224     01 00 00 FF 
25228     84 7A 06 F1 | 	add	result1, ##644
2522c     EC 01 90 FD | 	jmp	#LR__3300
25230                 | LR__3286
25230     00 B2 06 F6 | 	mov	local07, #0
25234                 | LR__3287
25234     04 B2 56 F2 | 	cmps	local07, #4 wc
25238     CC 01 90 3D |  if_ae	jmp	#LR__3299
2523c     59 B1 02 F6 | 	mov	local06, local07
25240     02 B0 66 F0 | 	shl	local06, #2
25244     35 AD 02 F6 | 	mov	local04, ptr___system__dat__
25248     64 AC 06 F1 | 	add	local04, #100
2524c     56 B1 02 F1 | 	add	local06, local04
25250     58 B1 0A FB | 	rdlong	local06, local06 wz
25254     A8 01 90 AD |  if_e	jmp	#LR__3298
25258     59 AD 02 F6 | 	mov	local04, local07
2525c     02 AC 66 F0 | 	shl	local04, #2
25260     35 B1 02 F6 | 	mov	local06, ptr___system__dat__
25264     64 B0 06 F1 | 	add	local06, #100
25268     58 AD 02 F1 | 	add	local04, local06
2526c     56 93 02 FB | 	rdlong	arg01, local04
25270     49 B5 02 F6 | 	mov	local08, arg01
25274     D7 06 48 FB | 	callpa	#(@LR__3289-@LR__3288)>>2,fcache_load_ptr_
25278                 | LR__3288
25278     5A 7B CA FA | 	rdbyte	result1, local08 wz
2527c     01 B4 06 51 |  if_ne	add	local08, #1
25280     F4 FF 9F 5D |  if_ne	jmp	#LR__3288
25284                 | LR__3289
25284     49 B5 82 F1 | 	sub	local08, arg01
25288     5A B7 02 F6 | 	mov	local09, local08
2528c     5B AD 02 F6 | 	mov	local04, local09
25290     53 AD 02 F1 | 	add	local04, local01
25294     56 B1 C2 FA | 	rdbyte	local06, local04
25298     2F B0 0E F2 | 	cmp	local06, #47 wz
2529c     5B B9 02 56 |  if_ne	mov	local10, local09
252a0     53 B9 02 51 |  if_ne	add	local10, local01
252a4     5C AF CA 5A |  if_ne	rdbyte	local05, local10 wz
252a8     54 01 90 5D |  if_ne	jmp	#LR__3297
252ac     59 AD 02 F6 | 	mov	local04, local07
252b0     02 AC 66 F0 | 	shl	local04, #2
252b4     35 97 02 F6 | 	mov	arg03, ptr___system__dat__
252b8     64 96 06 F1 | 	add	arg03, #100
252bc     4B AD 02 F1 | 	add	local04, arg03
252c0     56 95 02 FB | 	rdlong	arg02, local04
252c4     5B 97 02 F6 | 	mov	arg03, local09
252c8     53 93 02 F6 | 	mov	arg01, local01
252cc     08 46 B0 FD | 	call	#__system__strncmp
252d0     00 7A 4E F2 | 	cmps	result1, #0 wz
252d4     28 01 90 5D |  if_ne	jmp	#LR__3297
252d8     59 BB 02 F6 | 	mov	local11, local07
252dc     02 BA 66 F0 | 	shl	local11, #2
252e0     35 AD 02 F6 | 	mov	local04, ptr___system__dat__
252e4     74 AC 06 F1 | 	add	local04, #116
252e8     56 BB 02 F1 | 	add	local11, local04
252ec     5D BD 02 FB | 	rdlong	local12, local11
252f0     D7 22 48 FB | 	callpa	#(@LR__3291-@LR__3290)>>2,fcache_load_ptr_
252f4                 | LR__3290
252f4     5B B1 02 F6 | 	mov	local06, local09
252f8     01 B0 06 F1 | 	add	local06, #1
252fc     53 B1 02 F1 | 	add	local06, local01
25300     58 BB C2 FA | 	rdbyte	local11, local06
25304     2E BA 0E F2 | 	cmp	local11, #46 wz
25308     2C 00 90 5D |  if_ne	jmp	#LR__3292
2530c     5B BB 02 F6 | 	mov	local11, local09
25310     02 BA 06 F1 | 	add	local11, #2
25314     53 BB 02 F1 | 	add	local11, local01
25318     5D B9 C2 FA | 	rdbyte	local10, local11
2531c     2F B8 0E F2 | 	cmp	local10, #47 wz
25320     5B BF 02 56 |  if_ne	mov	local13, local09
25324     02 BE 06 51 |  if_ne	add	local13, #2
25328     53 BF 02 51 |  if_ne	add	local13, local01
2532c     5F C1 CA 5A |  if_ne	rdbyte	local14, local13 wz
25330     01 B6 06 A1 |  if_e	add	local09, #1
25334     BC FF 9F AD |  if_e	jmp	#LR__3290
25338                 | LR__3291
25338                 | LR__3292
25338     00 AA 0E F2 | 	cmp	local03, #0 wz
2533c     55 93 02 56 |  if_ne	mov	arg01, local03
25340     53 95 02 56 |  if_ne	mov	arg02, local01
25344     00 97 06 56 |  if_ne	mov	arg03, #256
25348     D0 44 B0 5D |  if_ne	call	#__system__strncpy
2534c     53 95 02 F6 | 	mov	arg02, local01
25350     5B 95 02 F1 | 	add	arg02, local09
25354     01 94 06 F1 | 	add	arg02, #1
25358     53 93 02 F6 | 	mov	arg01, local01
2535c     2C F6 BF FD | 	call	#__system____builtin_strcpy
25360     53 93 02 F6 | 	mov	arg01, local01
25364     49 B5 02 F6 | 	mov	local08, arg01
25368     D7 06 48 FB | 	callpa	#(@LR__3294-@LR__3293)>>2,fcache_load_ptr_
2536c                 | LR__3293
2536c     5A 7B CA FA | 	rdbyte	result1, local08 wz
25370     01 B4 06 51 |  if_ne	add	local08, #1
25374     F4 FF 9F 5D |  if_ne	jmp	#LR__3293
25378                 | LR__3294
25378     49 B5 82 F1 | 	sub	local08, arg01
2537c     5A B7 02 F6 | 	mov	local09, local08
25380                 | LR__3295
25380     01 B6 56 F2 | 	cmps	local09, #1 wc
25384     70 00 90 CD |  if_b	jmp	#LR__3296
25388     5B AD 02 F6 | 	mov	local04, local09
2538c     53 AD 02 F1 | 	add	local04, local01
25390     56 BB C2 FA | 	rdbyte	local11, local04
25394     2F BA 0E F2 | 	cmp	local11, #47 wz
25398     5B BB 02 A6 |  if_e	mov	local11, local09
2539c     53 BB 02 A1 |  if_e	add	local11, local01
253a0     5D 01 48 AC |  if_e	wrbyte	#0, local11
253a4     01 B6 86 A1 |  if_e	sub	local09, #1
253a8     D4 FF 9F AD |  if_e	jmp	#LR__3295
253ac     5B AD 02 F6 | 	mov	local04, local09
253b0     53 AD 02 F1 | 	add	local04, local01
253b4     56 BB C2 FA | 	rdbyte	local11, local04
253b8     2E BA 0E F2 | 	cmp	local11, #46 wz
253bc     38 00 90 5D |  if_ne	jmp	#LR__3296
253c0     02 B6 56 F2 | 	cmps	local09, #2 wc
253c4     30 00 90 CD |  if_b	jmp	#LR__3296
253c8     5B C1 02 F6 | 	mov	local14, local09
253cc     01 C0 86 F1 | 	sub	local14, #1
253d0     53 C1 02 F1 | 	add	local14, local01
253d4     60 AF C2 FA | 	rdbyte	local05, local14
253d8     2F AE 0E F2 | 	cmp	local05, #47 wz
253dc     18 00 90 5D |  if_ne	jmp	#LR__3296
253e0     5B AD 02 F6 | 	mov	local04, local09
253e4     01 AC 86 F1 | 	sub	local04, #1
253e8     53 AD 02 F1 | 	add	local04, local01
253ec     56 01 48 FC | 	wrbyte	#0, local04
253f0     02 B6 86 F1 | 	sub	local09, #2
253f4     88 FF 9F FD | 	jmp	#LR__3295
253f8                 | LR__3296
253f8     5E 7B 02 F6 | 	mov	result1, local12
253fc     1C 00 90 FD | 	jmp	#LR__3300
25400                 | LR__3297
25400                 | LR__3298
25400     01 B2 06 F1 | 	add	local07, #1
25404     2C FE 9F FD | 	jmp	#LR__3287
25408                 | LR__3299
25408     02 00 00 FF 
2540c     28 6B 06 F1 | 	add	ptr___system__dat__, ##1320
25410     35 7B 02 FB | 	rdlong	result1, ptr___system__dat__
25414     02 00 00 FF 
25418     28 6B 86 F1 | 	sub	ptr___system__dat__, ##1320
2541c                 | LR__3300
2541c     E7 F0 03 F6 | 	mov	ptra, fp
25420     F2 00 A0 FD | 	call	#popregs_
25424                 | __system____getvfsforfile_ret
25424     2D 00 64 FD | 	ret
25428                 | 
25428                 | __system___basic_open
25428     05 CA 05 F6 | 	mov	COUNT_, #5
2542c     E8 00 A0 FD | 	call	#pushregs_
25430     4A A7 02 F6 | 	mov	local01, arg02
25434     4B A9 02 F6 | 	mov	local02, arg03
25438     4C AB 02 F6 | 	mov	local03, arg04
2543c     00 AC 06 F6 | 	mov	local04, #0
25440     B4 43 B0 FD | 	call	#__system____getftab
25444     3D AF 0A F6 | 	mov	local05, result1 wz
25448     18 00 90 5D |  if_ne	jmp	#LR__3310
2544c     2E 93 02 F6 | 	mov	arg01, abortchain
25450     0C 94 06 F6 | 	mov	arg02, #12
25454     01 96 06 F6 | 	mov	arg03, #1
25458     1A 01 A0 FD | 	call	#__longjmp
2545c     01 7A 66 F6 | 	neg	result1, #1
25460     18 01 90 FD | 	jmp	#LR__3319
25464                 | LR__3310
25464     08 AE 06 F1 | 	add	local05, #8
25468     57 7B 0A FB | 	rdlong	result1, local05 wz
2546c     08 AE 86 F1 | 	sub	local05, #8
25470     57 93 02 56 |  if_ne	mov	arg01, local05
25474     D8 3A B0 5D |  if_ne	call	#__system___closeraw
25478     00 A6 0E F2 | 	cmp	local01, #0 wz
2547c     00 A8 0E A2 |  if_e	cmp	local02, #0 wz
25480     00 AA 0E A2 |  if_e	cmp	local03, #0 wz
25484     3C 00 90 AD |  if_e	jmp	#LR__3312
25488     0C 92 06 F6 | 	mov	arg01, #12
2548c     50 2F B0 FD | 	call	#__system___gc_alloc_managed
25490     3D AD 0A F6 | 	mov	local04, result1 wz
25494     18 00 90 5D |  if_ne	jmp	#LR__3311
25498     2E 93 02 F6 | 	mov	arg01, abortchain
2549c     07 94 06 F6 | 	mov	arg02, #7
254a0     01 96 06 F6 | 	mov	arg03, #1
254a4     1A 01 A0 FD | 	call	#__longjmp
254a8     01 7A 66 F6 | 	neg	result1, #1
254ac     CC 00 90 FD | 	jmp	#LR__3319
254b0                 | LR__3311
254b0     56 01 68 FC | 	wrlong	#0, local04
254b4     04 AC 06 F1 | 	add	local04, #4
254b8     56 01 68 FC | 	wrlong	#0, local04
254bc     04 AC 86 F1 | 	sub	local04, #4
254c0     57 AD 62 FC | 	wrlong	local04, local05
254c4                 | LR__3312
254c4     00 A6 0E F2 | 	cmp	local01, #0 wz
254c8     20 00 90 AD |  if_e	jmp	#LR__3313
254cc     56 A7 62 FC | 	wrlong	local01, local04
254d0     56 7B 02 F6 | 	mov	result1, local04
254d4     00 70 05 FF 
254d8     00 7A 46 F5 | 	or	result1, ##182452224
254dc     1C AE 06 F1 | 	add	local05, #28
254e0     57 7B 62 FC | 	wrlong	result1, local05
254e4     1C AE 86 F1 | 	sub	local05, #28
254e8     0C 00 90 FD | 	jmp	#LR__3314
254ec                 | LR__3313
254ec     1C AE 06 F1 | 	add	local05, #28
254f0     57 01 68 FC | 	wrlong	#0, local05
254f4     1C AE 86 F1 | 	sub	local05, #28
254f8                 | LR__3314
254f8     00 A8 0E F2 | 	cmp	local02, #0 wz
254fc     28 00 90 AD |  if_e	jmp	#LR__3315
25500     04 AC 06 F1 | 	add	local04, #4
25504     56 A9 62 FC | 	wrlong	local02, local04
25508     04 AC 86 F1 | 	sub	local04, #4
2550c     56 7B 02 F6 | 	mov	result1, local04
25510     00 78 05 FF 
25514     00 7A 46 F5 | 	or	result1, ##183500800
25518     20 AE 06 F1 | 	add	local05, #32
2551c     57 7B 62 FC | 	wrlong	result1, local05
25520     20 AE 86 F1 | 	sub	local05, #32
25524     0C 00 90 FD | 	jmp	#LR__3316
25528                 | LR__3315
25528     20 AE 06 F1 | 	add	local05, #32
2552c     57 01 68 FC | 	wrlong	#0, local05
25530     20 AE 86 F1 | 	sub	local05, #32
25534                 | LR__3316
25534     00 AA 0E F2 | 	cmp	local03, #0 wz
25538     24 00 90 AD |  if_e	jmp	#LR__3317
2553c     08 AC 06 F1 | 	add	local04, #8
25540     56 AB 62 FC | 	wrlong	local03, local04
25544     08 AC 86 F1 | 	sub	local04, #8
25548     00 80 05 FF 
2554c     00 AC 46 F5 | 	or	local04, ##184549376
25550     24 AE 06 F1 | 	add	local05, #36
25554     57 AD 62 FC | 	wrlong	local04, local05
25558     24 AE 86 F1 | 	sub	local05, #36
2555c     0C 00 90 FD | 	jmp	#LR__3318
25560                 | LR__3317
25560     24 AE 06 F1 | 	add	local05, #36
25564     57 01 68 FC | 	wrlong	#0, local05
25568     24 AE 86 F1 | 	sub	local05, #36
2556c                 | LR__3318
2556c     08 AE 06 F1 | 	add	local05, #8
25570     40 00 80 FF 
25574     57 07 68 FC | 	wrlong	##32771, local05
25578     00 7A 06 F6 | 	mov	result1, #0
2557c                 | LR__3319
2557c     E7 F0 03 F6 | 	mov	ptra, fp
25580     F2 00 A0 FD | 	call	#popregs_
25584                 | __system___basic_open_ret
25584     2D 00 64 FD | 	ret
25588                 | 
25588                 | __system___basic_open_string
25588     04 CA 05 F6 | 	mov	COUNT_, #4
2558c     E8 00 A0 FD | 	call	#pushregs_
25590     4A A7 02 F6 | 	mov	local01, arg02
25594     4B A9 02 F6 | 	mov	local02, arg03
25598     5C 42 B0 FD | 	call	#__system____getftab
2559c     3D AB 0A F6 | 	mov	local03, result1 wz
255a0     18 00 90 5D |  if_ne	jmp	#LR__3320
255a4     2E 93 02 F6 | 	mov	arg01, abortchain
255a8     0C 94 06 F6 | 	mov	arg02, #12
255ac     01 96 06 F6 | 	mov	arg03, #1
255b0     1A 01 A0 FD | 	call	#__longjmp
255b4     01 7A 66 F6 | 	neg	result1, #1
255b8     58 00 90 FD | 	jmp	#LR__3322
255bc                 | LR__3320
255bc     08 AA 06 F1 | 	add	local03, #8
255c0     55 99 0A FB | 	rdlong	arg04, local03 wz
255c4     08 AA 86 F1 | 	sub	local03, #8
255c8     55 93 02 56 |  if_ne	mov	arg01, local03
255cc     80 39 B0 5D |  if_ne	call	#__system___closeraw
255d0     53 95 02 F6 | 	mov	arg02, local01
255d4     54 97 02 F6 | 	mov	arg03, local02
255d8     55 93 02 F6 | 	mov	arg01, local03
255dc     B6 99 06 F6 | 	mov	arg04, #438
255e0     1C 36 B0 FD | 	call	#__system___openraw
255e4     3D AD 02 F6 | 	mov	local04, result1
255e8     00 AC 56 F2 | 	cmps	local04, #0 wc
255ec     20 00 90 3D |  if_ae	jmp	#LR__3321
255f0     35 7B 02 F6 | 	mov	result1, ptr___system__dat__
255f4     20 7A 06 F1 | 	add	result1, #32
255f8     2E 93 02 F6 | 	mov	arg01, abortchain
255fc     3D 95 02 FB | 	rdlong	arg02, result1
25600     01 96 06 F6 | 	mov	arg03, #1
25604     1A 01 A0 FD | 	call	#__longjmp
25608     01 7A 66 F6 | 	neg	result1, #1
2560c     04 00 90 FD | 	jmp	#LR__3322
25610                 | LR__3321
25610     56 7B 02 F6 | 	mov	result1, local04
25614                 | LR__3322
25614     E7 F0 03 F6 | 	mov	ptra, fp
25618     F2 00 A0 FD | 	call	#popregs_
2561c                 | __system___basic_open_string_ret
2561c     2D 00 64 FD | 	ret
25620                 | 
25620                 | __system___find_free_file
25620     35 81 02 F6 | 	mov	_var01, ptr___system__dat__
25624     02 00 00 FF 
25628     2C 81 06 F1 | 	add	_var01, ##1324
2562c     00 82 06 F6 | 	mov	_var02, #0
25630     D7 12 48 FB | 	callpa	#(@LR__3331-@LR__3330)>>2,fcache_load_ptr_
25634                 | LR__3330
25634     0A 82 56 F2 | 	cmps	_var02, #10 wc
25638     1C 00 90 3D |  if_ae	jmp	#LR__3332
2563c     34 82 06 FD | 	qmul	_var02, #52
25640     18 7A 62 FD | 	getqx	result1
25644     40 7B 02 F1 | 	add	result1, _var01
25648     08 7A 06 F1 | 	add	result1, #8
2564c     3D 7B 0A FB | 	rdlong	result1, result1 wz
25650     01 82 06 51 |  if_ne	add	_var02, #1
25654     DC FF 9F 5D |  if_ne	jmp	#LR__3330
25658                 | LR__3331
25658                 | LR__3332
25658     0A 82 0E F2 | 	cmp	_var02, #10 wz
2565c     20 6A 06 A1 |  if_e	add	ptr___system__dat__, #32
25660     35 17 68 AC |  if_e	wrlong	#11, ptr___system__dat__
25664     20 6A 86 A1 |  if_e	sub	ptr___system__dat__, #32
25668     01 7A 66 A6 |  if_e	neg	result1, #1
2566c     41 7B 02 56 |  if_ne	mov	result1, _var02
25670                 | __system___find_free_file_ret
25670     2D 00 64 FD | 	ret
25674                 | 
25674                 | __system___basic_print_char
25674     03 CA 05 F6 | 	mov	COUNT_, #3
25678     E8 00 A0 FD | 	call	#pushregs_
2567c     4A A7 02 F6 | 	mov	local01, arg02
25680     20 49 B0 FD | 	call	#__system___gettxfunc
25684     3D A9 0A F6 | 	mov	local02, result1 wz
25688     00 7A 06 A6 |  if_e	mov	result1, #0
2568c     30 00 90 AD |  if_e	jmp	#LR__3340
25690     54 AB 02 F6 | 	mov	local03, local02
25694     13 A8 46 F7 | 	zerox	local02, #19
25698     14 AA 46 F0 | 	shr	local03, #20
2569c     02 AA 66 F0 | 	shl	local03, #2
256a0     2D AB 02 F1 | 	add	local03, __methods__
256a4     55 AB 02 FB | 	rdlong	local03, local03
256a8     53 93 02 F6 | 	mov	arg01, local01
256ac     32 A7 02 F6 | 	mov	local01, objptr
256b0     54 65 02 F6 | 	mov	objptr, local02
256b4     2D AA 62 FD | 	call	local03
256b8     53 65 02 F6 | 	mov	objptr, local01
256bc     01 7A 06 F6 | 	mov	result1, #1
256c0                 | LR__3340
256c0     E7 F0 03 F6 | 	mov	ptra, fp
256c4     F2 00 A0 FD | 	call	#popregs_
256c8                 | __system___basic_print_char_ret
256c8     2D 00 64 FD | 	ret
256cc                 | 
256cc                 | __system___basic_print_string
256cc     03 CA 05 F6 | 	mov	COUNT_, #3
256d0     E8 00 A0 FD | 	call	#pushregs_
256d4     4A A7 02 F6 | 	mov	local01, arg02
256d8     4B A9 02 F6 | 	mov	local02, arg03
256dc     C4 48 B0 FD | 	call	#__system___gettxfunc
256e0     3D AB 0A F6 | 	mov	local03, result1 wz
256e4     00 7A 06 A6 |  if_e	mov	result1, #0
256e8     18 00 90 AD |  if_e	jmp	#LR__3350
256ec     00 A6 0E F2 | 	cmp	local01, #0 wz
256f0     00 7A 06 A6 |  if_e	mov	result1, #0
256f4     55 93 02 56 |  if_ne	mov	arg01, local03
256f8     54 95 02 56 |  if_ne	mov	arg02, local02
256fc     53 97 02 56 |  if_ne	mov	arg03, local01
25700     FC 01 B0 5D |  if_ne	call	#__system___fmtstr
25704                 | LR__3350
25704     E7 F0 03 F6 | 	mov	ptra, fp
25708     F2 00 A0 FD | 	call	#popregs_
2570c                 | __system___basic_print_string_ret
2570c     2D 00 64 FD | 	ret
25710                 | 
25710                 | __system___basic_print_integer
25710     04 CA 05 F6 | 	mov	COUNT_, #4
25714     E8 00 A0 FD | 	call	#pushregs_
25718     4A A7 02 F6 | 	mov	local01, arg02
2571c     4B A9 02 F6 | 	mov	local02, arg03
25720     4C AB 02 F6 | 	mov	local03, arg04
25724     7C 48 B0 FD | 	call	#__system___gettxfunc
25728     3D AD 0A F6 | 	mov	local04, result1 wz
2572c     00 7A 06 A6 |  if_e	mov	result1, #0
25730     56 93 02 56 |  if_ne	mov	arg01, local04
25734     54 95 02 56 |  if_ne	mov	arg02, local02
25738     53 97 02 56 |  if_ne	mov	arg03, local01
2573c     55 99 02 56 |  if_ne	mov	arg04, local03
25740     A8 02 B0 5D |  if_ne	call	#__system___fmtnum
25744     E7 F0 03 F6 | 	mov	ptra, fp
25748     F2 00 A0 FD | 	call	#popregs_
2574c                 | __system___basic_print_integer_ret
2574c     2D 00 64 FD | 	ret
25750                 | 
25750                 | __system___basic_print_unsigned
25750     03 CA 05 F6 | 	mov	COUNT_, #3
25754     E8 00 A0 FD | 	call	#pushregs_
25758     4A A7 02 F6 | 	mov	local01, arg02
2575c     4B A9 02 F6 | 	mov	local02, arg03
25760     4C AB 02 F6 | 	mov	local03, arg04
25764     3C 48 B0 FD | 	call	#__system___gettxfunc
25768     3D 93 0A F6 | 	mov	arg01, result1 wz
2576c     00 7A 06 A6 |  if_e	mov	result1, #0
25770     3A A8 26 54 |  if_ne	bith	local02, #58
25774     54 95 02 56 |  if_ne	mov	arg02, local02
25778     53 97 02 56 |  if_ne	mov	arg03, local01
2577c     55 99 02 56 |  if_ne	mov	arg04, local03
25780     68 02 B0 5D |  if_ne	call	#__system___fmtnum
25784     E7 F0 03 F6 | 	mov	ptra, fp
25788     F2 00 A0 FD | 	call	#popregs_
2578c                 | __system___basic_print_unsigned_ret
2578c     2D 00 64 FD | 	ret
25790                 | 
25790                 | __system___basic_get_char
25790     03 CA 05 F6 | 	mov	COUNT_, #3
25794     E8 00 A0 FD | 	call	#pushregs_
25798     4C 48 B0 FD | 	call	#__system___getrxfunc
2579c     3D A7 0A F6 | 	mov	local01, result1 wz
257a0     01 7A 66 A6 |  if_e	neg	result1, #1
257a4     28 00 90 AD |  if_e	jmp	#LR__3360
257a8     53 A9 02 F6 | 	mov	local02, local01
257ac     13 A6 46 F7 | 	zerox	local01, #19
257b0     14 A8 46 F0 | 	shr	local02, #20
257b4     02 A8 66 F0 | 	shl	local02, #2
257b8     2D A9 02 F1 | 	add	local02, __methods__
257bc     54 A9 02 FB | 	rdlong	local02, local02
257c0     32 AB 02 F6 | 	mov	local03, objptr
257c4     53 65 02 F6 | 	mov	objptr, local01
257c8     2D A8 62 FD | 	call	local02
257cc     55 65 02 F6 | 	mov	objptr, local03
257d0                 | LR__3360
257d0     E7 F0 03 F6 | 	mov	ptra, fp
257d4     F2 00 A0 FD | 	call	#popregs_
257d8                 | __system___basic_get_char_ret
257d8     2D 00 64 FD | 	ret
257dc                 | 
257dc                 | __system___basic_put
257dc     04 CA 05 F6 | 	mov	COUNT_, #4
257e0     E8 00 A0 FD | 	call	#pushregs_
257e4     4D A7 02 F6 | 	mov	local01, arg05
257e8     53 99 02 FD | 	qmul	arg04, local01
257ec     49 A9 02 F6 | 	mov	local02, arg01
257f0     4B AB 02 F6 | 	mov	local03, arg03
257f4     00 94 0E F2 | 	cmp	arg02, #0 wz
257f8     18 AC 62 FD | 	getqx	local04
257fc     18 00 90 AD |  if_e	jmp	#LR__3370
25800     01 94 86 F1 | 	sub	arg02, #1
25804     4A 97 02 F6 | 	mov	arg03, arg02
25808     1F 96 C6 F0 | 	sar	arg03, #31
2580c     54 93 02 F6 | 	mov	arg01, local02
25810     00 98 06 F6 | 	mov	arg04, #0
25814     E4 3D B0 FD | 	call	#__system__lseek
25818                 | LR__3370
25818     55 95 02 F6 | 	mov	arg02, local03
2581c     56 97 02 F6 | 	mov	arg03, local04
25820     54 93 02 F6 | 	mov	arg01, local02
25824     FC 3C B0 FD | 	call	#__system__write
25828     3D AD 02 F6 | 	mov	local04, result1
2582c     01 AC 56 F2 | 	cmps	local04, #1 wc
25830     10 00 90 CD |  if_b	jmp	#LR__3371
25834     56 0F 03 F6 | 	mov	muldiva_, local04
25838     53 11 03 F6 | 	mov	muldivb_, local01
2583c     FA 00 A0 FD | 	call	#divide_
25840     88 AD 02 F6 | 	mov	local04, muldivb_
25844                 | LR__3371
25844     56 7B 02 F6 | 	mov	result1, local04
25848     E7 F0 03 F6 | 	mov	ptra, fp
2584c     F2 00 A0 FD | 	call	#popregs_
25850                 | __system___basic_put_ret
25850     2D 00 64 FD | 	ret
25854                 | 
25854                 | __system___basic_get
25854     04 CA 05 F6 | 	mov	COUNT_, #4
25858     E8 00 A0 FD | 	call	#pushregs_
2585c     4D A7 02 F6 | 	mov	local01, arg05
25860     53 99 02 FD | 	qmul	arg04, local01
25864     49 A9 02 F6 | 	mov	local02, arg01
25868     4B AB 02 F6 | 	mov	local03, arg03
2586c     00 94 0E F2 | 	cmp	arg02, #0 wz
25870     18 AC 62 FD | 	getqx	local04
25874     18 00 90 AD |  if_e	jmp	#LR__3380
25878     01 94 86 F1 | 	sub	arg02, #1
2587c     4A 97 02 F6 | 	mov	arg03, arg02
25880     1F 96 C6 F0 | 	sar	arg03, #31
25884     54 93 02 F6 | 	mov	arg01, local02
25888     00 98 06 F6 | 	mov	arg04, #0
2588c     6C 3D B0 FD | 	call	#__system__lseek
25890                 | LR__3380
25890     55 95 02 F6 | 	mov	arg02, local03
25894     56 97 02 F6 | 	mov	arg03, local04
25898     54 93 02 F6 | 	mov	arg01, local02
2589c     CC 3C B0 FD | 	call	#__system__read
258a0     3D AD 02 F6 | 	mov	local04, result1
258a4     01 AC 56 F2 | 	cmps	local04, #1 wc
258a8     10 00 90 CD |  if_b	jmp	#LR__3381
258ac     56 0F 03 F6 | 	mov	muldiva_, local04
258b0     53 11 03 F6 | 	mov	muldivb_, local01
258b4     FA 00 A0 FD | 	call	#divide_
258b8     88 AD 02 F6 | 	mov	local04, muldivb_
258bc                 | LR__3381
258bc     56 7B 02 F6 | 	mov	result1, local04
258c0     E7 F0 03 F6 | 	mov	ptra, fp
258c4     F2 00 A0 FD | 	call	#popregs_
258c8                 | __system___basic_get_ret
258c8     2D 00 64 FD | 	ret
258cc                 | 
258cc                 | __system___fmtchar
258cc     00 CA 05 F6 | 	mov	COUNT_, #0
258d0     E8 00 A0 FD | 	call	#pushregs_
258d4     10 F0 07 F1 | 	add	ptra, #16
258d8     0C CE 05 F1 | 	add	fp, #12
258dc     E7 96 62 FC | 	wrlong	arg03, fp
258e0     4B 97 E2 F8 | 	getbyte	arg03, arg03, #0
258e4     E7 96 62 FC | 	wrlong	arg03, fp
258e8     E7 96 02 F6 | 	mov	arg03, fp
258ec     0C CE 85 F1 | 	sub	fp, #12
258f0     0C 00 B0 FD | 	call	#__system___fmtstr
258f4     E7 F0 03 F6 | 	mov	ptra, fp
258f8     F2 00 A0 FD | 	call	#popregs_
258fc                 | __system___fmtchar_ret
258fc     2D 00 64 FD | 	ret
25900                 | 
25900                 | __system___fmtstr
25900     09 CA 05 F6 | 	mov	COUNT_, #9
25904     E8 00 A0 FD | 	call	#pushregs_
25908     49 A7 02 F6 | 	mov	local01, arg01
2590c     4A A9 02 F6 | 	mov	local02, arg02
25910     4B AB 02 F6 | 	mov	local03, arg03
25914     54 99 E2 F8 | 	getbyte	arg04, local02, #0
25918     55 93 02 F6 | 	mov	arg01, local03
2591c     49 AD 02 F6 | 	mov	local04, arg01
25920     D7 06 48 FB | 	callpa	#(@LR__3391-@LR__3390)>>2,fcache_load_ptr_
25924                 | LR__3390
25924     56 7B CA FA | 	rdbyte	result1, local04 wz
25928     01 AC 06 51 |  if_ne	add	local04, #1
2592c     F4 FF 9F 5D |  if_ne	jmp	#LR__3390
25930                 | LR__3391
25930     49 AD 82 F1 | 	sub	local04, arg01
25934     00 98 0E F2 | 	cmp	arg04, #0 wz
25938     4C AD 7A 53 |  if_ne	fles	local04, arg04 wcz
2593c     54 95 02 F6 | 	mov	arg02, local02
25940     56 97 02 F6 | 	mov	arg03, local04
25944     53 93 02 F6 | 	mov	arg01, local01
25948     02 98 06 F6 | 	mov	arg04, #2
2594c     AC 42 B0 FD | 	call	#__system___fmtpad
25950     3D AF 02 F6 | 	mov	local05, result1
25954     00 AE 56 F2 | 	cmps	local05, #0 wc
25958     57 7B 02 C6 |  if_b	mov	result1, local05
2595c     80 00 90 CD |  if_b	jmp	#LR__3394
25960     01 AC 56 F2 | 	cmps	local04, #1 wc
25964     50 00 90 CD |  if_b	jmp	#LR__3393
25968     56 B1 02 F6 | 	mov	local06, local04
2596c                 | LR__3392
2596c     53 B3 02 F6 | 	mov	local07, local01
25970     53 B5 02 F6 | 	mov	local08, local01
25974     13 B2 46 F7 | 	zerox	local07, #19
25978     14 B4 46 F0 | 	shr	local08, #20
2597c     02 B4 66 F0 | 	shl	local08, #2
25980     2D B5 02 F1 | 	add	local08, __methods__
25984     5A B5 02 FB | 	rdlong	local08, local08
25988     55 93 C2 FA | 	rdbyte	arg01, local03
2598c     32 B7 02 F6 | 	mov	local09, objptr
25990     59 65 02 F6 | 	mov	objptr, local07
25994     01 AA 06 F1 | 	add	local03, #1
25998     2D B4 62 FD | 	call	local08
2599c     5B 65 02 F6 | 	mov	objptr, local09
259a0     3D B7 02 F6 | 	mov	local09, result1
259a4     00 B6 56 F2 | 	cmps	local09, #0 wc
259a8     5B 7B 02 C6 |  if_b	mov	result1, local09
259ac     30 00 90 CD |  if_b	jmp	#LR__3394
259b0     5B AF 02 F1 | 	add	local05, local09
259b4     ED B1 6E FB | 	djnz	local06, #LR__3392
259b8                 | LR__3393
259b8     54 95 02 F6 | 	mov	arg02, local02
259bc     56 97 02 F6 | 	mov	arg03, local04
259c0     53 93 02 F6 | 	mov	arg01, local01
259c4     01 98 06 F6 | 	mov	arg04, #1
259c8     30 42 B0 FD | 	call	#__system___fmtpad
259cc     3D B7 02 F6 | 	mov	local09, result1
259d0     00 B6 56 F2 | 	cmps	local09, #0 wc
259d4     5B 7B 02 C6 |  if_b	mov	result1, local09
259d8     5B AF 02 31 |  if_ae	add	local05, local09
259dc     57 7B 02 36 |  if_ae	mov	result1, local05
259e0                 | LR__3394
259e0     E7 F0 03 F6 | 	mov	ptra, fp
259e4     F2 00 A0 FD | 	call	#popregs_
259e8                 | __system___fmtstr_ret
259e8     2D 00 64 FD | 	ret
259ec                 | 
259ec                 | __system___fmtnum
259ec     0B CA 05 F6 | 	mov	COUNT_, #11
259f0     E8 00 A0 FD | 	call	#pushregs_
259f4     49 A7 02 F6 | 	mov	local01, arg01
259f8     4A A9 02 F6 | 	mov	local02, arg02
259fc     4B AB 02 F6 | 	mov	local03, arg03
25a00     4C AD 02 F6 | 	mov	local04, arg04
25a04     F8 AF 02 F6 | 	mov	local05, ptra
25a08     57 B1 02 F6 | 	mov	local06, local05
25a0c     00 B2 06 F6 | 	mov	local07, #0
25a10     54 B5 02 F6 | 	mov	local08, local02
25a14     10 B4 46 F0 | 	shr	local08, #16
25a18     3F B4 06 F5 | 	and	local08, #63
25a1c     54 B7 E2 F8 | 	getbyte	local09, local02, #0
25a20     54 B9 02 F6 | 	mov	local10, local02
25a24     1A B8 46 F0 | 	shr	local10, #26
25a28     03 B8 06 F5 | 	and	local10, #3
25a2c     5C BB 02 F6 | 	mov	local11, local10
25a30     01 B4 56 F2 | 	cmps	local08, #1 wc
25a34     44 F0 07 F1 | 	add	ptra, #68
25a38     01 B4 86 31 |  if_ae	sub	local08, #1
25a3c     41 B6 56 F2 | 	cmps	local09, #65 wc
25a40     00 B6 0E C2 |  if_b	cmp	local09, #0 wz
25a44     40 B6 06 B6 |  if_nc_or_z	mov	local09, #64
25a48     03 BA 0E F2 | 	cmp	local11, #3 wz
25a4c     00 BA 06 A6 |  if_e	mov	local11, #0
25a50     00 AA 56 52 |  if_ne	cmps	local03, #0 wc
25a54     04 BA 06 46 |  if_c_and_nz	mov	local11, #4
25a58     55 AB 62 46 |  if_c_and_nz	neg	local03, local03
25a5c     00 BA 0E F2 | 	cmp	local11, #0 wz
25a60     4C 00 90 AD |  if_e	jmp	#LR__3403
25a64     01 B2 06 F6 | 	mov	local07, #1
25a68     5B B5 0A F2 | 	cmp	local08, local09 wz
25a6c     18 00 90 5D |  if_ne	jmp	#LR__3401
25a70     05 B4 6E FB | 	djnz	local08, #LR__3400
25a74     53 93 02 F6 | 	mov	arg01, local01
25a78     54 95 02 F6 | 	mov	arg02, local02
25a7c     23 96 06 F6 | 	mov	arg03, #35
25a80     48 FE BF FD | 	call	#__system___fmtchar
25a84     8C 00 90 FD | 	jmp	#LR__3407
25a88                 | LR__3400
25a88                 | LR__3401
25a88     02 BA 0E F2 | 	cmp	local11, #2 wz
25a8c     58 B9 02 A6 |  if_e	mov	local10, local06
25a90     01 B0 06 A1 |  if_e	add	local06, #1
25a94     5C 41 48 AC |  if_e	wrbyte	#32, local10
25a98     14 00 90 AD |  if_e	jmp	#LR__3402
25a9c     04 BA 0E F2 | 	cmp	local11, #4 wz
25aa0     58 5B 48 AC |  if_e	wrbyte	#45, local06
25aa4     01 B0 06 A1 |  if_e	add	local06, #1
25aa8     58 57 48 5C |  if_ne	wrbyte	#43, local06
25aac     01 B0 06 51 |  if_ne	add	local06, #1
25ab0                 | LR__3402
25ab0                 | LR__3403
25ab0     59 B9 02 F6 | 	mov	local10, local07
25ab4     58 93 02 F6 | 	mov	arg01, local06
25ab8     55 95 02 F6 | 	mov	arg02, local03
25abc     56 97 02 F6 | 	mov	arg03, local04
25ac0     5A 99 02 F6 | 	mov	arg04, local08
25ac4     00 9A 06 F6 | 	mov	arg05, #0
25ac8     1D A8 2E F4 | 	testbn	local02, #29 wz
25acc     01 9A 06 56 |  if_ne	mov	arg05, #1
25ad0     F0 41 B0 FD | 	call	#__system___uitoa
25ad4     3D B9 02 F1 | 	add	local10, result1
25ad8     5B B9 5A F2 | 	cmps	local10, local09 wcz
25adc     24 00 90 ED |  if_be	jmp	#LR__3406
25ae0     D7 0E 48 FB | 	callpa	#(@LR__3405-@LR__3404)>>2,fcache_load_ptr_
25ae4                 | LR__3404
25ae4     5B B9 02 F6 | 	mov	local10, local09
25ae8     01 B8 56 F2 | 	cmps	local10, #1 wc
25aec     01 B6 86 F1 | 	sub	local09, #1
25af0     58 B9 02 36 |  if_ae	mov	local10, local06
25af4     01 B0 06 31 |  if_ae	add	local06, #1
25af8     5C 47 48 3C |  if_ae	wrbyte	#35, local10
25afc     E4 FF 9F 3D |  if_ae	jmp	#LR__3404
25b00                 | LR__3405
25b00     58 01 48 FC | 	wrbyte	#0, local06
25b04                 | LR__3406
25b04     53 93 02 F6 | 	mov	arg01, local01
25b08     54 95 02 F6 | 	mov	arg02, local02
25b0c     57 97 02 F6 | 	mov	arg03, local05
25b10     EC FD BF FD | 	call	#__system___fmtstr
25b14                 | LR__3407
25b14     E7 F0 03 F6 | 	mov	ptra, fp
25b18     F2 00 A0 FD | 	call	#popregs_
25b1c                 | __system___fmtnum_ret
25b1c     2D 00 64 FD | 	ret
25b20                 | 
25b20                 | __system___fmtfloat
25b20     29 CA 05 F6 | 	mov	COUNT_, #41
25b24     E8 00 A0 FD | 	call	#pushregs_
25b28     24 F1 07 F1 | 	add	ptra, #292
25b2c     49 A7 02 F6 | 	mov	local01, arg01
25b30     4A A9 02 F6 | 	mov	local02, arg02
25b34     4B AB 02 F6 | 	mov	local03, arg03
25b38     4C AD 02 F6 | 	mov	local04, arg04
25b3c     0A AE 06 F6 | 	mov	local05, #10
25b40     00 B0 06 F6 | 	mov	local06, #0
25b44     00 B2 06 F6 | 	mov	local07, #0
25b48     02 B4 06 F6 | 	mov	local08, #2
25b4c     00 B6 06 F6 | 	mov	local09, #0
25b50     00 B8 06 F6 | 	mov	local10, #0
25b54     00 BA 06 F6 | 	mov	local11, #0
25b58     E7 BC 02 F6 | 	mov	local12, fp
25b5c     C8 BC 06 F1 | 	add	local12, #200
25b60     5E BF 02 F6 | 	mov	local13, local12
25b64     54 C1 02 F6 | 	mov	local14, local02
25b68     10 C0 46 F0 | 	shr	local14, #16
25b6c     3F C0 0E F5 | 	and	local14, #63 wz
25b70     54 C3 02 F6 | 	mov	local15, local02
25b74     1C C2 46 F0 | 	shr	local15, #28
25b78     01 C2 06 F5 | 	and	local15, #1
25b7c     18 00 90 5D |  if_ne	jmp	#LR__3410
25b80     61 AC 0E F2 | 	cmp	local04, #97 wz
25b84     0D C0 06 A6 |  if_e	mov	local14, #13
25b88     01 B2 06 A6 |  if_e	mov	local07, #1
25b8c     0C 00 90 AD |  if_e	jmp	#LR__3411
25b90     06 C0 06 F6 | 	mov	local14, #6
25b94     04 00 90 FD | 	jmp	#LR__3411
25b98                 | LR__3410
25b98     01 C0 86 F1 | 	sub	local14, #1
25b9c                 | LR__3411
25b9c     54 C5 02 F6 | 	mov	local16, local02
25ba0     16 C4 46 F0 | 	shr	local16, #22
25ba4     03 C4 06 F5 | 	and	local16, #3
25ba8     54 C7 02 F6 | 	mov	local17, local02
25bac     1D C6 46 F0 | 	shr	local17, #29
25bb0     01 C6 06 F5 | 	and	local17, #1
25bb4     54 C9 EA F8 | 	getbyte	local18, local02, #1
25bb8     54 CB E2 F8 | 	getbyte	local19, local02, #0
25bbc     65 AC 0E F2 | 	cmp	local04, #101 wz
25bc0     6E CC 62 FD | 	wrz	local20
25bc4     66 CF 02 F6 | 	mov	local21, local20
25bc8     00 C6 0E F2 | 	cmp	local17, #0 wz
25bcc     45 CC 06 56 |  if_ne	mov	local20, #69
25bd0     65 CC 06 A6 |  if_e	mov	local20, #101
25bd4     66 D1 02 F6 | 	mov	local22, local20
25bd8     61 AC 0E F2 | 	cmp	local04, #97 wz
25bdc     2C 00 90 5D |  if_ne	jmp	#LR__3412
25be0     01 CE 06 F6 | 	mov	local21, #1
25be4     00 C6 0E F2 | 	cmp	local17, #0 wz
25be8     50 CC 06 56 |  if_ne	mov	local20, #80
25bec     70 CC 06 A6 |  if_e	mov	local20, #112
25bf0     66 D1 02 F6 | 	mov	local22, local20
25bf4     02 AE 06 F6 | 	mov	local05, #2
25bf8     01 B4 06 F6 | 	mov	local08, #1
25bfc     00 C6 0E F2 | 	cmp	local17, #0 wz
25c00     58 CC 06 56 |  if_ne	mov	local20, #88
25c04     78 CC 06 A6 |  if_e	mov	local20, #120
25c08     66 B7 02 F6 | 	mov	local09, local20
25c0c                 | LR__3412
25c0c     23 AC 0E F2 | 	cmp	local04, #35 wz
25c10     14 00 90 5D |  if_ne	jmp	#LR__3413
25c14     01 B8 06 F6 | 	mov	local10, #1
25c18     00 C2 0E F2 | 	cmp	local15, #0 wz
25c1c     66 AC 06 56 |  if_ne	mov	local04, #102
25c20     00 C2 06 56 |  if_ne	mov	local15, #0
25c24     01 C2 06 A6 |  if_e	mov	local15, #1
25c28                 | LR__3413
25c28     54 D3 02 F6 | 	mov	local23, local02
25c2c     1A D2 46 F0 | 	shr	local23, #26
25c30     03 D2 06 F5 | 	and	local23, #3
25c34     55 7B 02 F6 | 	mov	result1, local03
25c38     1F 7A 4E F0 | 	shr	result1, #31 wz
25c3c     2D B0 06 56 |  if_ne	mov	local06, #45
25c40     1F AA E6 54 |  if_ne	bitnot	local03, #31
25c44     14 00 90 5D |  if_ne	jmp	#LR__3415
25c48     01 D2 0E F2 | 	cmp	local23, #1 wz
25c4c     2B B0 06 A6 |  if_e	mov	local06, #43
25c50     08 00 90 AD |  if_e	jmp	#LR__3414
25c54     02 D2 0E F2 | 	cmp	local23, #2 wz
25c58     20 B0 06 A6 |  if_e	mov	local06, #32
25c5c                 | LR__3414
25c5c                 | LR__3415
25c5c     54 D5 02 F6 | 	mov	local24, local02
25c60     18 D4 46 F0 | 	shr	local24, #24
25c64     03 D4 06 F5 | 	and	local24, #3
25c68     00 CC 06 F6 | 	mov	local20, #0
25c6c     00 B0 0E F2 | 	cmp	local06, #0 wz
25c70     0A AE 0E A2 |  if_e	cmp	local05, #10 wz
25c74     01 CC 06 56 |  if_ne	mov	local20, #1
25c78     66 D7 0A F6 | 	mov	local25, local20 wz
25c7c     60 00 90 AD |  if_e	jmp	#LR__3417
25c80     02 D4 0E F2 | 	cmp	local24, #2 wz
25c84     58 00 90 5D |  if_ne	jmp	#LR__3417
25c88     02 C4 0E F2 | 	cmp	local16, #2 wz
25c8c     50 00 90 AD |  if_e	jmp	#LR__3417
25c90     58 95 02 F6 | 	mov	arg02, local06
25c94     5B D9 02 F6 | 	mov	local26, local09
25c98     5E 93 02 F6 | 	mov	arg01, local12
25c9c     6C 97 02 F6 | 	mov	arg03, local26
25ca0     88 42 B0 FD | 	call	#__system__emitsign_0584
25ca4     3D DB 02 F6 | 	mov	local27, result1
25ca8     00 DA 56 F2 | 	cmps	local27, #0 wc
25cac     6D 7B 02 C6 |  if_b	mov	result1, local27
25cb0     C0 05 90 CD |  if_b	jmp	#LR__3460
25cb4     6D DD 02 F6 | 	mov	local28, local27
25cb8     6D BD 02 F1 | 	add	local12, local27
25cbc     00 C8 0E F2 | 	cmp	local18, #0 wz
25cc0     18 00 90 AD |  if_e	jmp	#LR__3416
25cc4     6D C9 82 F1 | 	sub	local18, local27
25cc8     00 C8 56 F3 | 	fges	local18, #0 wc
25ccc     E8 A8 06 F4 | 	bitl	local02, #232
25cd0     64 DD 02 F6 | 	mov	local28, local18
25cd4     08 DC 66 F0 | 	shl	local28, #8
25cd8     6E A9 42 F5 | 	or	local02, local28
25cdc                 | LR__3416
25cdc     00 D6 06 F6 | 	mov	local25, #0
25ce0                 | LR__3417
25ce0     55 93 02 F6 | 	mov	arg01, local03
25ce4     F4 1C B0 FD | 	call	#__system____builtin_ilogb
25ce8     FF FF 3F FF 
25cec     FF 7B 0E F2 | 	cmp	result1, ##2147483647 wz
25cf0     24 00 90 5D |  if_ne	jmp	#LR__3418
25cf4     00 B0 0E F2 | 	cmp	local06, #0 wz
25cf8     5E CD 02 56 |  if_ne	mov	local20, local12
25cfc     01 BC 06 51 |  if_ne	add	local12, #1
25d00     66 B1 42 5C |  if_ne	wrbyte	local06, local20
25d04     92 01 00 FF 
25d08     B2 94 06 F6 | 	mov	arg02, ##@LR__5461
25d0c     5E 93 02 F6 | 	mov	arg01, local12
25d10     78 EC BF FD | 	call	#__system____builtin_strcpy
25d14     AC 04 90 FD | 	jmp	#LR__3450
25d18                 | LR__3418
25d18     55 93 02 F6 | 	mov	arg01, local03
25d1c     BC 1C B0 FD | 	call	#__system____builtin_ilogb
25d20     3D CD 02 F6 | 	mov	local20, result1
25d24     00 00 40 FF 
25d28     00 CC 0E F2 | 	cmp	local20, ##-2147483648 wz
25d2c     24 00 90 5D |  if_ne	jmp	#LR__3419
25d30     00 B0 0E F2 | 	cmp	local06, #0 wz
25d34     5E CD 02 56 |  if_ne	mov	local20, local12
25d38     01 BC 06 51 |  if_ne	add	local12, #1
25d3c     66 B1 42 5C |  if_ne	wrbyte	local06, local20
25d40     5E 93 02 F6 | 	mov	arg01, local12
25d44     92 01 00 FF 
25d48     B6 94 06 F6 | 	mov	arg02, ##@LR__5462
25d4c     3C EC BF FD | 	call	#__system____builtin_strcpy
25d50     70 04 90 FD | 	jmp	#LR__3450
25d54                 | LR__3419
25d54     67 AC 0E F2 | 	cmp	local04, #103 wz
25d58     23 AC 0E 52 |  if_ne	cmp	local04, #35 wz
25d5c     0C 01 90 5D |  if_ne	jmp	#LR__3424
25d60     14 CE 05 F1 | 	add	fp, #20
25d64     E7 94 02 F6 | 	mov	arg02, fp
25d68     0C CE 05 F1 | 	add	fp, #12
25d6c     E7 96 02 F6 | 	mov	arg03, fp
25d70     20 CE 85 F1 | 	sub	fp, #32
25d74     60 99 02 F6 | 	mov	arg04, local14
25d78     57 9B 02 F6 | 	mov	arg05, local05
25d7c     55 93 02 F6 | 	mov	arg01, local03
25d80     B4 3F B0 FD | 	call	#__system__disassemble_0582
25d84     23 AC 0E F2 | 	cmp	local04, #35 wz
25d88     6C 00 90 5D |  if_ne	jmp	#LR__3421
25d8c     20 CE 05 F1 | 	add	fp, #32
25d90     E7 CC 02 FB | 	rdlong	local20, fp
25d94     20 CE 85 F1 | 	sub	fp, #32
25d98     60 CD 5A F2 | 	cmps	local20, local14 wcz
25d9c     01 CE 06 16 |  if_a	mov	local21, #1
25da0     24 01 90 1D |  if_a	jmp	#LR__3427
25da4     20 CE 05 F1 | 	add	fp, #32
25da8     E7 CC 02 FB | 	rdlong	local20, fp
25dac     20 CE 85 F1 | 	sub	fp, #32
25db0     00 CC 56 F2 | 	cmps	local20, #0 wc
25db4     1C 00 90 3D |  if_ae	jmp	#LR__3420
25db8     60 CD 62 F6 | 	neg	local20, local14
25dbc     20 CE 05 F1 | 	add	fp, #32
25dc0     E7 DC 02 FB | 	rdlong	local28, fp
25dc4     20 CE 85 F1 | 	sub	fp, #32
25dc8     66 DD 5A F2 | 	cmps	local28, local20 wcz
25dcc     01 CE 06 E6 |  if_be	mov	local21, #1
25dd0     F4 00 90 FD | 	jmp	#LR__3427
25dd4                 | LR__3420
25dd4     20 CE 05 F1 | 	add	fp, #32
25dd8     E7 CC 02 FB | 	rdlong	local20, fp
25ddc     20 CE 85 F1 | 	sub	fp, #32
25de0     01 CC 56 F2 | 	cmps	local20, #1 wc
25de4     20 CE 05 31 |  if_ae	add	fp, #32
25de8     E7 DC 02 3B |  if_ae	rdlong	local28, fp
25dec     20 CE 85 31 |  if_ae	sub	fp, #32
25df0     6E C1 82 31 |  if_ae	sub	local14, local28
25df4     D0 00 90 FD | 	jmp	#LR__3427
25df8                 | LR__3421
25df8     00 B2 06 F6 | 	mov	local07, #0
25dfc     1C A8 2E F4 | 	testbn	local02, #28 wz
25e00     01 B2 06 A6 |  if_e	mov	local07, #1
25e04     20 CE 05 F1 | 	add	fp, #32
25e08     E7 CC 02 FB | 	rdlong	local20, fp
25e0c     20 CE 85 F1 | 	sub	fp, #32
25e10     60 CD 52 F2 | 	cmps	local20, local14 wc
25e14     18 00 90 3D |  if_ae	jmp	#LR__3422
25e18     20 CE 05 F1 | 	add	fp, #32
25e1c     E7 D8 02 FB | 	rdlong	local26, fp
25e20     20 CE 85 F1 | 	sub	fp, #32
25e24     FF FF 7F FF 
25e28     FC D9 56 F2 | 	cmps	local26, ##-4 wc
25e2c     08 00 90 3D |  if_ae	jmp	#LR__3423
25e30                 | LR__3422
25e30     01 CE 06 F6 | 	mov	local21, #1
25e34     90 00 90 FD | 	jmp	#LR__3427
25e38                 | LR__3423
25e38     20 CE 05 F1 | 	add	fp, #32
25e3c     E7 DC 02 FB | 	rdlong	local28, fp
25e40     6E C1 82 F1 | 	sub	local14, local28
25e44     0C CE 85 F1 | 	sub	fp, #12
25e48     E7 94 02 F6 | 	mov	arg02, fp
25e4c     0C CE 05 F1 | 	add	fp, #12
25e50     E7 96 02 F6 | 	mov	arg03, fp
25e54     20 CE 85 F1 | 	sub	fp, #32
25e58     60 99 62 F6 | 	neg	arg04, local14
25e5c     55 93 02 F6 | 	mov	arg01, local03
25e60     57 9B 02 F6 | 	mov	arg05, local05
25e64     D0 3E B0 FD | 	call	#__system__disassemble_0582
25e68     5C 00 90 FD | 	jmp	#LR__3427
25e6c                 | LR__3424
25e6c     00 CE 0E F2 | 	cmp	local21, #0 wz
25e70     28 00 90 AD |  if_e	jmp	#LR__3425
25e74     14 CE 05 F1 | 	add	fp, #20
25e78     E7 94 02 F6 | 	mov	arg02, fp
25e7c     0C CE 05 F1 | 	add	fp, #12
25e80     E7 96 02 F6 | 	mov	arg03, fp
25e84     20 CE 85 F1 | 	sub	fp, #32
25e88     55 93 02 F6 | 	mov	arg01, local03
25e8c     60 99 02 F6 | 	mov	arg04, local14
25e90     57 9B 02 F6 | 	mov	arg05, local05
25e94     A0 3E B0 FD | 	call	#__system__disassemble_0582
25e98     2C 00 90 FD | 	jmp	#LR__3426
25e9c                 | LR__3425
25e9c     14 CE 05 F1 | 	add	fp, #20
25ea0     E7 94 02 F6 | 	mov	arg02, fp
25ea4     0C CE 05 F1 | 	add	fp, #12
25ea8     E7 96 02 F6 | 	mov	arg03, fp
25eac     20 CE 85 F1 | 	sub	fp, #32
25eb0     60 DD 02 F6 | 	mov	local28, local14
25eb4     01 DC 06 F1 | 	add	local28, #1
25eb8     6E 99 62 F6 | 	neg	arg04, local28
25ebc     55 93 02 F6 | 	mov	arg01, local03
25ec0     57 9B 02 F6 | 	mov	arg05, local05
25ec4     70 3E B0 FD | 	call	#__system__disassemble_0582
25ec8                 | LR__3426
25ec8                 | LR__3427
25ec8     02 AE 0E F2 | 	cmp	local05, #2 wz
25ecc     44 00 90 5D |  if_ne	jmp	#LR__3430
25ed0     10 AE 06 F6 | 	mov	local05, #16
25ed4                 | LR__3428
25ed4     14 CE 05 F1 | 	add	fp, #20
25ed8     E7 CC 0A FB | 	rdlong	local20, fp wz
25edc     14 CE 85 F1 | 	sub	fp, #20
25ee0     30 00 90 AD |  if_e	jmp	#LR__3429
25ee4     14 CE 05 F1 | 	add	fp, #20
25ee8     E7 D8 02 FB | 	rdlong	local26, fp
25eec     14 CE 85 F1 | 	sub	fp, #20
25ef0     00 80 00 FF 
25ef4     00 D8 16 F2 | 	cmp	local26, ##16777216 wc
25ef8     18 00 90 3D |  if_ae	jmp	#LR__3429
25efc     14 CE 05 F1 | 	add	fp, #20
25f00     E7 CC 02 FB | 	rdlong	local20, fp
25f04     01 CC 66 F0 | 	shl	local20, #1
25f08     E7 CC 62 FC | 	wrlong	local20, fp
25f0c     14 CE 85 F1 | 	sub	fp, #20
25f10     C0 FF 9F FD | 	jmp	#LR__3428
25f14                 | LR__3429
25f14                 | LR__3430
25f14     70 CE 05 F1 | 	add	fp, #112
25f18     E7 92 02 F6 | 	mov	arg01, fp
25f1c     5C CE 85 F1 | 	sub	fp, #92
25f20     E7 94 02 FB | 	rdlong	arg02, fp
25f24     14 CE 85 F1 | 	sub	fp, #20
25f28     57 97 02 F6 | 	mov	arg03, local05
25f2c     01 98 06 F6 | 	mov	arg04, #1
25f30     63 9B 02 F6 | 	mov	arg05, local17
25f34     8C 3D B0 FD | 	call	#__system___uitoa
25f38     3D DF 02 F6 | 	mov	local29, result1
25f3c     20 CE 05 F1 | 	add	fp, #32
25f40     E7 CC 02 FB | 	rdlong	local20, fp
25f44     20 CE 85 F1 | 	sub	fp, #32
25f48     00 CC 56 F2 | 	cmps	local20, #0 wc
25f4c     44 00 90 3D |  if_ae	jmp	#LR__3431
25f50     2D BA 06 F6 | 	mov	local11, #45
25f54     B0 CE 05 F1 | 	add	fp, #176
25f58     E7 92 02 F6 | 	mov	arg01, fp
25f5c     90 CE 85 F1 | 	sub	fp, #144
25f60     E7 D8 02 FB | 	rdlong	local26, fp
25f64     20 CE 85 F1 | 	sub	fp, #32
25f68     6C DD 62 F6 | 	neg	local28, local26
25f6c     0A D8 06 F6 | 	mov	local26, #10
25f70     5A E1 02 F6 | 	mov	local30, local08
25f74     63 E3 02 F6 | 	mov	local31, local17
25f78     6E 95 02 F6 | 	mov	arg02, local28
25f7c     0A 96 06 F6 | 	mov	arg03, #10
25f80     70 99 02 F6 | 	mov	arg04, local30
25f84     71 9B 02 F6 | 	mov	arg05, local31
25f88     38 3D B0 FD | 	call	#__system___uitoa
25f8c     3D E5 02 F6 | 	mov	local32, result1
25f90     3C 00 90 FD | 	jmp	#LR__3432
25f94                 | LR__3431
25f94     2B BA 06 F6 | 	mov	local11, #43
25f98     B0 CE 05 F1 | 	add	fp, #176
25f9c     E7 92 02 F6 | 	mov	arg01, fp
25fa0     90 CE 85 F1 | 	sub	fp, #144
25fa4     E7 DC 02 FB | 	rdlong	local28, fp
25fa8     20 CE 85 F1 | 	sub	fp, #32
25fac     0A D8 06 F6 | 	mov	local26, #10
25fb0     5A E1 02 F6 | 	mov	local30, local08
25fb4     63 E3 02 F6 | 	mov	local31, local17
25fb8     6E 95 02 F6 | 	mov	arg02, local28
25fbc     0A 96 06 F6 | 	mov	arg03, #10
25fc0     70 99 02 F6 | 	mov	arg04, local30
25fc4     71 9B 02 F6 | 	mov	arg05, local31
25fc8     F8 3C B0 FD | 	call	#__system___uitoa
25fcc     3D E5 02 F6 | 	mov	local32, result1
25fd0                 | LR__3432
25fd0     00 CE 0E F2 | 	cmp	local21, #0 wz
25fd4     00 E6 06 56 |  if_ne	mov	local33, #0
25fd8     00 E8 06 56 |  if_ne	mov	local34, #0
25fdc     60 EB 02 56 |  if_ne	mov	local35, local14
25fe0     01 EA 06 51 |  if_ne	add	local35, #1
25fe4     54 00 90 5D |  if_ne	jmp	#LR__3435
25fe8     20 CE 05 F1 | 	add	fp, #32
25fec     E7 DC 02 FB | 	rdlong	local28, fp
25ff0     20 CE 85 F1 | 	sub	fp, #32
25ff4     00 DC 56 F2 | 	cmps	local28, #0 wc
25ff8     24 00 90 3D |  if_ae	jmp	#LR__3433
25ffc     20 CE 05 F1 | 	add	fp, #32
26000     E7 DC 02 FB | 	rdlong	local28, fp
26004     6E E7 02 F6 | 	mov	local33, local28
26008     73 E9 02 F6 | 	mov	local34, local33
2600c     20 CE 85 F1 | 	sub	fp, #32
26010     6E EB 02 F6 | 	mov	local35, local28
26014     60 EB 02 F1 | 	add	local35, local14
26018     01 EA 06 F1 | 	add	local35, #1
2601c     1C 00 90 FD | 	jmp	#LR__3434
26020                 | LR__3433
26020     00 E8 06 F6 | 	mov	local34, #0
26024     20 CE 05 F1 | 	add	fp, #32
26028     E7 E6 02 FB | 	rdlong	local33, fp
2602c     20 CE 85 F1 | 	sub	fp, #32
26030     73 EB 02 F6 | 	mov	local35, local33
26034     60 EB 02 F1 | 	add	local35, local14
26038     01 EA 06 F1 | 	add	local35, #1
2603c                 | LR__3434
2603c                 | LR__3435
2603c     75 CD 02 F6 | 	mov	local20, local35
26040     74 CD 82 F1 | 	sub	local20, local34
26044     01 CC 06 F1 | 	add	local20, #1
26048     66 ED 02 F6 | 	mov	local36, local20
2604c     00 B0 0E F2 | 	cmp	local06, #0 wz
26050     76 CD 02 56 |  if_ne	mov	local20, local36
26054     76 DD 02 56 |  if_ne	mov	local28, local36
26058     01 DC 06 51 |  if_ne	add	local28, #1
2605c     6E ED 02 56 |  if_ne	mov	local36, local28
26060     10 AE 0E F2 | 	cmp	local05, #16 wz
26064     02 EC 06 A1 |  if_e	add	local36, #2
26068     00 CE 0E F2 | 	cmp	local21, #0 wz
2606c     02 DC 06 56 |  if_ne	mov	local28, #2
26070     72 DD 02 51 |  if_ne	add	local28, local32
26074     6E ED 02 51 |  if_ne	add	local36, local28
26078     41 EC 56 F2 | 	cmps	local36, #65 wc
2607c     01 7A 66 36 |  if_ae	neg	result1, #1
26080     F0 01 90 3D |  if_ae	jmp	#LR__3460
26084     00 D6 0E F2 | 	cmp	local25, #0 wz
26088     28 00 90 AD |  if_e	jmp	#LR__3436
2608c     58 95 02 F6 | 	mov	arg02, local06
26090     5E 93 02 F6 | 	mov	arg01, local12
26094     5B 97 02 F6 | 	mov	arg03, local09
26098     90 3E B0 FD | 	call	#__system__emitsign_0584
2609c     3D EF 02 F6 | 	mov	local37, result1
260a0     00 EE 56 F2 | 	cmps	local37, #0 wc
260a4     77 7B 02 C6 |  if_b	mov	result1, local37
260a8     C8 01 90 CD |  if_b	jmp	#LR__3460
260ac     77 DD 02 F6 | 	mov	local28, local37
260b0     77 BD 02 F1 | 	add	local12, local37
260b4                 | LR__3436
260b4     74 F1 02 F6 | 	mov	local38, local34
260b8     D7 42 48 FB | 	callpa	#(@LR__3441-@LR__3437)>>2,fcache_load_ptr_
260bc                 | LR__3437
260bc     75 F1 52 F2 | 	cmps	local38, local35 wc
260c0     7C 00 90 3D |  if_ae	jmp	#LR__3442
260c4     00 F0 56 F2 | 	cmps	local38, #0 wc
260c8     2C 00 90 CD |  if_b	jmp	#LR__3438
260cc     6F F1 52 F2 | 	cmps	local38, local29 wc
260d0     24 00 90 3D |  if_ae	jmp	#LR__3438
260d4     5E CD 02 F6 | 	mov	local20, local12
260d8     78 D9 02 F6 | 	mov	local26, local38
260dc     E7 E0 02 F6 | 	mov	local30, fp
260e0     70 E0 06 F1 | 	add	local30, #112
260e4     70 D9 02 F1 | 	add	local26, local30
260e8     6C E3 C2 FA | 	rdbyte	local31, local26
260ec     66 E3 42 FC | 	wrbyte	local31, local20
260f0     01 BC 06 F1 | 	add	local12, #1
260f4     10 00 90 FD | 	jmp	#LR__3439
260f8                 | LR__3438
260f8     5E CD 02 F6 | 	mov	local20, local12
260fc     30 D8 06 F6 | 	mov	local26, #48
26100     66 61 48 FC | 	wrbyte	#48, local20
26104     01 BC 06 F1 | 	add	local12, #1
26108                 | LR__3439
26108     73 F1 0A F2 | 	cmp	local38, local33 wz
2610c     20 00 90 5D |  if_ne	jmp	#LR__3440
26110     00 C2 0E F2 | 	cmp	local15, #0 wz
26114     75 CD 02 A6 |  if_e	mov	local20, local35
26118     01 CC 86 A1 |  if_e	sub	local20, #1
2611c     66 F1 52 A2 |  if_e	cmps	local38, local20 wc
26120     5E CD 02 D6 |  if_c_or_nz	mov	local20, local12
26124     2E D8 06 D6 |  if_c_or_nz	mov	local26, #46
26128     66 5D 48 DC |  if_c_or_nz	wrbyte	#46, local20
2612c     01 BC 06 D1 |  if_c_or_nz	add	local12, #1
26130                 | LR__3440
26130     78 DD 02 F6 | 	mov	local28, local38
26134     01 DC 06 F1 | 	add	local28, #1
26138     6E F1 02 F6 | 	mov	local38, local28
2613c     7C FF 9F FD | 	jmp	#LR__3437
26140                 | LR__3441
26140                 | LR__3442
26140     00 B2 0E F2 | 	cmp	local07, #0 wz
26144     30 00 90 AD |  if_e	jmp	#LR__3446
26148     01 BC 86 F1 | 	sub	local12, #1
2614c     D7 0C 48 FB | 	callpa	#(@LR__3444-@LR__3443)>>2,fcache_load_ptr_
26150                 | LR__3443
26150     5F BD 5A F2 | 	cmps	local12, local13 wcz
26154     10 00 90 ED |  if_be	jmp	#LR__3445
26158     5E CD C2 FA | 	rdbyte	local20, local12
2615c     30 CC 0E F2 | 	cmp	local20, #48 wz
26160     01 BC 86 A1 |  if_e	sub	local12, #1
26164     E8 FF 9F AD |  if_e	jmp	#LR__3443
26168                 | LR__3444
26168                 | LR__3445
26168     5E CD C2 FA | 	rdbyte	local20, local12
2616c     2E CC 0E F2 | 	cmp	local20, #46 wz
26170     01 BC 86 A1 |  if_e	sub	local12, #1
26174     01 BC 06 F1 | 	add	local12, #1
26178                 | LR__3446
26178     00 CE 0E F2 | 	cmp	local21, #0 wz
2617c     40 00 90 AD |  if_e	jmp	#LR__3449
26180     5E D1 42 FC | 	wrbyte	local22, local12
26184     01 BC 06 F1 | 	add	local12, #1
26188     5E BB 42 FC | 	wrbyte	local11, local12
2618c     00 F0 06 F6 | 	mov	local38, #0
26190     01 BC 06 F1 | 	add	local12, #1
26194                 | LR__3447
26194     72 F1 52 F2 | 	cmps	local38, local32 wc
26198     24 00 90 3D |  if_ae	jmp	#LR__3448
2619c     78 D9 02 F6 | 	mov	local26, local38
261a0     E7 E0 02 F6 | 	mov	local30, fp
261a4     B0 E0 06 F1 | 	add	local30, #176
261a8     70 D9 02 F1 | 	add	local26, local30
261ac     6C E3 C2 FA | 	rdbyte	local31, local26
261b0     5E E3 42 FC | 	wrbyte	local31, local12
261b4     01 F0 06 F1 | 	add	local38, #1
261b8     01 BC 06 F1 | 	add	local12, #1
261bc     D4 FF 9F FD | 	jmp	#LR__3447
261c0                 | LR__3448
261c0                 | LR__3449
261c0     5E 01 48 FC | 	wrbyte	#0, local12
261c4                 | LR__3450
261c4     00 CA 0E F2 | 	cmp	local19, #0 wz
261c8     00 B8 0E 52 |  if_ne	cmp	local10, #0 wz
261cc     94 00 90 AD |  if_e	jmp	#LR__3459
261d0     5F 93 02 F6 | 	mov	arg01, local13
261d4     49 F3 02 F6 | 	mov	local39, arg01
261d8     D7 06 48 FB | 	callpa	#(@LR__3452-@LR__3451)>>2,fcache_load_ptr_
261dc                 | LR__3451
261dc     79 7B CA FA | 	rdbyte	result1, local39 wz
261e0     01 F2 06 51 |  if_ne	add	local39, #1
261e4     F4 FF 9F 5D |  if_ne	jmp	#LR__3451
261e8                 | LR__3452
261e8     49 F3 82 F1 | 	sub	local39, arg01
261ec     65 F3 5A F2 | 	cmps	local39, local19 wcz
261f0     70 00 90 ED |  if_be	jmp	#LR__3459
261f4     5F F5 02 F6 | 	mov	local40, local13
261f8     00 CE 0E F2 | 	cmp	local21, #0 wz
261fc     00 C0 06 56 |  if_ne	mov	local14, #0
26200     65 F7 02 56 |  if_ne	mov	local41, local19
26204     01 CA 86 A1 |  if_e	sub	local19, #1
26208     60 CB 82 A1 |  if_e	sub	local19, local14
2620c     65 F7 02 A6 |  if_e	mov	local41, local19
26210     00 F6 0E F2 | 	cmp	local41, #0 wz
26214     14 00 90 AD |  if_e	jmp	#LR__3455
26218     D7 08 48 FB | 	callpa	#(@LR__3454-@LR__3453)>>2,fcache_load_ptr_
2621c                 | LR__3453
2621c     7A 55 48 FC | 	wrbyte	#42, local40
26220     01 F6 8E F1 | 	sub	local41, #1 wz
26224     01 F4 06 F1 | 	add	local40, #1
26228     F0 FF 9F 5D |  if_ne	jmp	#LR__3453
2622c                 | LR__3454
2622c                 | LR__3455
2622c     00 C0 0E F2 | 	cmp	local14, #0 wz
26230     2C 00 90 AD |  if_e	jmp	#LR__3458
26234     7A CD 02 F6 | 	mov	local20, local40
26238     66 5D 48 FC | 	wrbyte	#46, local20
2623c     00 F6 06 F6 | 	mov	local41, #0
26240     01 F4 06 F1 | 	add	local40, #1
26244     D7 0C 48 FB | 	callpa	#(@LR__3457-@LR__3456)>>2,fcache_load_ptr_
26248                 | LR__3456
26248     60 F7 52 F2 | 	cmps	local41, local14 wc
2624c     7A CD 02 C6 |  if_b	mov	local20, local40
26250     01 F4 06 C1 |  if_b	add	local40, #1
26254     66 55 48 CC |  if_b	wrbyte	#42, local20
26258     01 F6 06 C1 |  if_b	add	local41, #1
2625c     E8 FF 9F CD |  if_b	jmp	#LR__3456
26260                 | LR__3457
26260                 | LR__3458
26260     7A 01 48 FC | 	wrbyte	#0, local40
26264                 | LR__3459
26264     53 93 02 F6 | 	mov	arg01, local01
26268     54 95 02 F6 | 	mov	arg02, local02
2626c     5F 97 02 F6 | 	mov	arg03, local13
26270     8C F6 BF FD | 	call	#__system___fmtstr
26274                 | LR__3460
26274     E7 F0 03 F6 | 	mov	ptra, fp
26278     F2 00 A0 FD | 	call	#popregs_
2627c                 | __system___fmtfloat_ret
2627c     2D 00 64 FD | 	ret
26280                 | 
26280                 | __system__Left_S
26280     04 CA 05 F6 | 	mov	COUNT_, #4
26284     E8 00 A0 FD | 	call	#pushregs_
26288     49 A7 02 F6 | 	mov	local01, arg01
2628c     4A A9 02 F6 | 	mov	local02, arg02
26290     01 A8 56 F2 | 	cmps	local02, #1 wc
26294     92 01 00 CF 
26298     BA 7A 06 C6 |  if_b	mov	result1, ##@LR__5463
2629c     5C 00 90 CD |  if_b	jmp	#LR__3473
262a0     53 93 02 F6 | 	mov	arg01, local01
262a4     49 AB 02 F6 | 	mov	local03, arg01
262a8     D7 06 48 FB | 	callpa	#(@LR__3471-@LR__3470)>>2,fcache_load_ptr_
262ac                 | LR__3470
262ac     55 7B CA FA | 	rdbyte	result1, local03 wz
262b0     01 AA 06 51 |  if_ne	add	local03, #1
262b4     F4 FF 9F 5D |  if_ne	jmp	#LR__3470
262b8                 | LR__3471
262b8     49 AB 82 F1 | 	sub	local03, arg01
262bc     55 7B 02 F6 | 	mov	result1, local03
262c0     54 7B 5A F2 | 	cmps	result1, local02 wcz
262c4     53 7B 02 E6 |  if_be	mov	result1, local01
262c8     30 00 90 ED |  if_be	jmp	#LR__3473
262cc     54 93 02 F6 | 	mov	arg01, local02
262d0     02 92 06 F1 | 	add	arg01, #2
262d4     08 21 B0 FD | 	call	#__system___gc_alloc_managed
262d8     3D AD 0A F6 | 	mov	local04, result1 wz
262dc     18 00 90 AD |  if_e	jmp	#LR__3472
262e0     56 93 02 F6 | 	mov	arg01, local04
262e4     53 95 02 F6 | 	mov	arg02, local01
262e8     54 97 02 F6 | 	mov	arg03, local02
262ec     98 E5 BF FD | 	call	#__system____builtin_memmove
262f0     56 A9 02 F1 | 	add	local02, local04
262f4     54 01 48 FC | 	wrbyte	#0, local02
262f8                 | LR__3472
262f8     56 7B 02 F6 | 	mov	result1, local04
262fc                 | LR__3473
262fc     E7 F0 03 F6 | 	mov	ptra, fp
26300     F2 00 A0 FD | 	call	#popregs_
26304                 | __system__Left_S_ret
26304     2D 00 64 FD | 	ret
26308                 | 
26308                 | __system__Right_S
26308     05 CA 05 F6 | 	mov	COUNT_, #5
2630c     E8 00 A0 FD | 	call	#pushregs_
26310     49 A7 02 F6 | 	mov	local01, arg01
26314     4A A9 02 F6 | 	mov	local02, arg02
26318     01 A8 56 F2 | 	cmps	local02, #1 wc
2631c     92 01 00 CF 
26320     BB 7A 06 C6 |  if_b	mov	result1, ##@LR__5464
26324     64 00 90 CD |  if_b	jmp	#LR__3483
26328     53 93 02 F6 | 	mov	arg01, local01
2632c     49 AB 02 F6 | 	mov	local03, arg01
26330     D7 06 48 FB | 	callpa	#(@LR__3481-@LR__3480)>>2,fcache_load_ptr_
26334                 | LR__3480
26334     55 7B CA FA | 	rdbyte	result1, local03 wz
26338     01 AA 06 51 |  if_ne	add	local03, #1
2633c     F4 FF 9F 5D |  if_ne	jmp	#LR__3480
26340                 | LR__3481
26340     49 AB 82 F1 | 	sub	local03, arg01
26344     55 7B 02 F6 | 	mov	result1, local03
26348     3D AD 02 F6 | 	mov	local04, result1
2634c     54 AD 5A F2 | 	cmps	local04, local02 wcz
26350     53 7B 02 E6 |  if_be	mov	result1, local01
26354     34 00 90 ED |  if_be	jmp	#LR__3483
26358     54 93 02 F6 | 	mov	arg01, local02
2635c     02 92 06 F1 | 	add	arg01, #2
26360     7C 20 B0 FD | 	call	#__system___gc_alloc_managed
26364     3D AF 0A F6 | 	mov	local05, result1 wz
26368     1C 00 90 AD |  if_e	jmp	#LR__3482
2636c     54 AD 82 F1 | 	sub	local04, local02
26370     53 AD 02 F1 | 	add	local04, local01
26374     01 A8 06 F1 | 	add	local02, #1
26378     57 93 02 F6 | 	mov	arg01, local05
2637c     56 95 02 F6 | 	mov	arg02, local04
26380     54 97 02 F6 | 	mov	arg03, local02
26384     00 E5 BF FD | 	call	#__system____builtin_memmove
26388                 | LR__3482
26388     57 7B 02 F6 | 	mov	result1, local05
2638c                 | LR__3483
2638c     E7 F0 03 F6 | 	mov	ptra, fp
26390     F2 00 A0 FD | 	call	#popregs_
26394                 | __system__Right_S_ret
26394     2D 00 64 FD | 	ret
26398                 | 
26398                 | __system__Mid_S
26398     05 CA 05 F6 | 	mov	COUNT_, #5
2639c     E8 00 A0 FD | 	call	#pushregs_
263a0     49 A7 02 F6 | 	mov	local01, arg01
263a4     4A A9 02 F6 | 	mov	local02, arg02
263a8     01 96 56 F2 | 	cmps	arg03, #1 wc
263ac     92 01 00 CF 
263b0     BC 7A 06 C6 |  if_b	mov	result1, ##@LR__5465
263b4     80 00 90 CD |  if_b	jmp	#LR__3493
263b8     01 A8 86 F1 | 	sub	local02, #1
263bc     00 A8 56 F3 | 	fges	local02, #0 wc
263c0     53 93 02 F6 | 	mov	arg01, local01
263c4     49 AB 02 F6 | 	mov	local03, arg01
263c8     D7 06 48 FB | 	callpa	#(@LR__3491-@LR__3490)>>2,fcache_load_ptr_
263cc                 | LR__3490
263cc     55 7B CA FA | 	rdbyte	result1, local03 wz
263d0     01 AA 06 51 |  if_ne	add	local03, #1
263d4     F4 FF 9F 5D |  if_ne	jmp	#LR__3490
263d8                 | LR__3491
263d8     49 AB 82 F1 | 	sub	local03, arg01
263dc     55 7B 02 F6 | 	mov	result1, local03
263e0     3D 95 02 F6 | 	mov	arg02, result1
263e4     54 95 52 F2 | 	cmps	arg02, local02 wc
263e8     92 01 00 CF 
263ec     BD 7A 06 C6 |  if_b	mov	result1, ##@LR__5466
263f0     44 00 90 CD |  if_b	jmp	#LR__3493
263f4     4A AD 02 F6 | 	mov	local04, arg02
263f8     54 AD 82 F1 | 	sub	local04, local02
263fc     4B AD 5A F2 | 	cmps	local04, arg03 wcz
26400     4B AD 02 16 |  if_a	mov	local04, arg03
26404     56 93 02 F6 | 	mov	arg01, local04
26408     02 92 06 F1 | 	add	arg01, #2
2640c     D0 1F B0 FD | 	call	#__system___gc_alloc_managed
26410     3D AF 0A F6 | 	mov	local05, result1 wz
26414     1C 00 90 AD |  if_e	jmp	#LR__3492
26418     53 A9 02 F1 | 	add	local02, local01
2641c     57 93 02 F6 | 	mov	arg01, local05
26420     54 95 02 F6 | 	mov	arg02, local02
26424     56 97 02 F6 | 	mov	arg03, local04
26428     5C E4 BF FD | 	call	#__system____builtin_memmove
2642c     57 AD 02 F1 | 	add	local04, local05
26430     56 01 48 FC | 	wrbyte	#0, local04
26434                 | LR__3492
26434     57 7B 02 F6 | 	mov	result1, local05
26438                 | LR__3493
26438     E7 F0 03 F6 | 	mov	ptra, fp
2643c     F2 00 A0 FD | 	call	#popregs_
26440                 | __system__Mid_S_ret
26440     2D 00 64 FD | 	ret
26444                 | 
26444                 | __system__Chr_S
26444     01 CA 05 F6 | 	mov	COUNT_, #1
26448     E8 00 A0 FD | 	call	#pushregs_
2644c     49 A7 02 F6 | 	mov	local01, arg01
26450     03 92 06 F6 | 	mov	arg01, #3
26454     88 1F B0 FD | 	call	#__system___gc_alloc_managed
26458     00 7A 4E F2 | 	cmps	result1, #0 wz
2645c     3D A7 42 5C |  if_ne	wrbyte	local01, result1
26460     01 7A 06 51 |  if_ne	add	result1, #1
26464     3D 01 48 5C |  if_ne	wrbyte	#0, result1
26468     01 7A 86 51 |  if_ne	sub	result1, #1
2646c     E7 F0 03 F6 | 	mov	ptra, fp
26470     F2 00 A0 FD | 	call	#popregs_
26474                 | __system__Chr_S_ret
26474     2D 00 64 FD | 	ret
26478                 | 
26478                 | __system__str_S
26478     02 CA 05 F6 | 	mov	COUNT_, #2
2647c     E8 00 A0 FD | 	call	#pushregs_
26480     49 A7 02 F6 | 	mov	local01, arg01
26484     10 92 06 F6 | 	mov	arg01, #16
26488     54 1F B0 FD | 	call	#__system___gc_alloc_managed
2648c     3D A9 0A F6 | 	mov	local02, result1 wz
26490     30 00 90 AD |  if_e	jmp	#LR__3500
26494     F8 93 02 F6 | 	mov	arg01, ptra
26498     08 F0 07 F1 | 	add	ptra, #8
2649c     49 A9 62 FC | 	wrlong	local02, arg01
264a0     04 92 06 F1 | 	add	arg01, #4
264a4     49 01 68 FC | 	wrlong	#0, arg01
264a8     04 92 86 F1 | 	sub	arg01, #4
264ac     00 98 05 FF 
264b0     00 92 46 F5 | 	or	arg01, ##187695104
264b4     00 94 06 F6 | 	mov	arg02, #0
264b8     53 97 02 F6 | 	mov	arg03, local01
264bc     67 98 06 F6 | 	mov	arg04, #103
264c0     5C F6 BF FD | 	call	#__system___fmtfloat
264c4                 | LR__3500
264c4     54 7B 02 F6 | 	mov	result1, local02
264c8     E7 F0 03 F6 | 	mov	ptra, fp
264cc     F2 00 A0 FD | 	call	#popregs_
264d0                 | __system__str_S_ret
264d0     2D 00 64 FD | 	ret
264d4                 | 
264d4                 | __system__Number_S
264d4     08 CA 05 F6 | 	mov	COUNT_, #8
264d8     E8 00 A0 FD | 	call	#pushregs_
264dc     49 A7 02 F6 | 	mov	local01, arg01
264e0     4A A9 0A F6 | 	mov	local02, arg02 wz
264e4     4B AB 02 F6 | 	mov	local03, arg03
264e8     3C 00 90 5D |  if_ne	jmp	#LR__3512
264ec     01 A8 06 F6 | 	mov	local02, #1
264f0     55 AD 02 F6 | 	mov	local04, local03
264f4     01 AE 06 F6 | 	mov	local05, #1
264f8     D7 16 48 FB | 	callpa	#(@LR__3511-@LR__3510)>>2,fcache_load_ptr_
264fc                 | LR__3510
264fc     00 B0 06 F6 | 	mov	local06, #0
26500     53 AD 1A F2 | 	cmp	local04, local01 wcz
26504     01 B0 66 E6 |  if_be	neg	local06, #1
26508     56 AF 12 F2 | 	cmp	local05, local04 wc
2650c     59 B3 A2 F1 | 	subx	local07, local07
26510     59 B1 CA F7 | 	test	local06, local07 wz
26514     55 AD 02 5D |  if_ne	qmul	local04, local03
26518     56 AF 02 56 |  if_ne	mov	local05, local04
2651c     01 A8 06 51 |  if_ne	add	local02, #1
26520     18 AC 62 5D |  if_ne	getqx	local04
26524     D4 FF 9F 5D |  if_ne	jmp	#LR__3510
26528                 | LR__3511
26528                 | LR__3512
26528     20 A8 36 F3 | 	fle	local02, #32 wc
2652c     54 93 02 F6 | 	mov	arg01, local02
26530     02 92 06 F1 | 	add	arg01, #2
26534     A8 1E B0 FD | 	call	#__system___gc_alloc_managed
26538     3D B1 02 F6 | 	mov	local06, result1
2653c     54 B3 02 F6 | 	mov	local07, local02
26540     58 B3 02 F1 | 	add	local07, local06
26544     59 01 48 FC | 	wrbyte	#0, local07
26548     D7 1A 48 FB | 	callpa	#(@LR__3514-@LR__3513)>>2,fcache_load_ptr_
2654c                 | LR__3513
2654c     01 A8 16 F2 | 	cmp	local02, #1 wc
26550     2C 00 90 CD |  if_b	jmp	#LR__3515
26554     55 A7 12 FD | 	qdiv	local01, local03
26558     01 A8 86 F1 | 	sub	local02, #1
2655c     54 B3 02 F6 | 	mov	local07, local02
26560     58 B3 02 F1 | 	add	local07, local06
26564     19 B4 62 FD | 	getqy	local08
26568     0A B4 16 F2 | 	cmp	local08, #10 wc
2656c     30 B4 06 C1 |  if_b	add	local08, #48
26570     37 B4 06 31 |  if_ae	add	local08, #55
26574     59 B5 42 FC | 	wrbyte	local08, local07
26578     18 A6 62 FD | 	getqx	local01
2657c     CC FF 9F FD | 	jmp	#LR__3513
26580                 | LR__3514
26580                 | LR__3515
26580     58 7B 02 F6 | 	mov	result1, local06
26584     E7 F0 03 F6 | 	mov	ptra, fp
26588     F2 00 A0 FD | 	call	#popregs_
2658c                 | __system__Number_S_ret
2658c     2D 00 64 FD | 	ret
26590                 | 
26590                 | __system__LCase_S
26590     07 CA 05 F6 | 	mov	COUNT_, #7
26594     E8 00 A0 FD | 	call	#pushregs_
26598     49 A7 02 F6 | 	mov	local01, arg01
2659c     49 A9 02 F6 | 	mov	local02, arg01
265a0     D7 06 48 FB | 	callpa	#(@LR__3521-@LR__3520)>>2,fcache_load_ptr_
265a4                 | LR__3520
265a4     54 7B CA FA | 	rdbyte	result1, local02 wz
265a8     01 A8 06 51 |  if_ne	add	local02, #1
265ac     F4 FF 9F 5D |  if_ne	jmp	#LR__3520
265b0                 | LR__3521
265b0     49 A9 82 F1 | 	sub	local02, arg01
265b4     54 7B 02 F6 | 	mov	result1, local02
265b8     3D A9 0A F6 | 	mov	local02, result1 wz
265bc     92 01 00 AF 
265c0     BE 7A 06 A6 |  if_e	mov	result1, ##@LR__5467
265c4     7C 00 90 AD |  if_e	jmp	#LR__3527
265c8     54 93 02 F6 | 	mov	arg01, local02
265cc     02 92 06 F1 | 	add	arg01, #2
265d0     0C 1E B0 FD | 	call	#__system___gc_alloc_managed
265d4     3D AB 0A F6 | 	mov	local03, result1 wz
265d8     64 00 90 AD |  if_e	jmp	#LR__3526
265dc     01 AC 66 F6 | 	neg	local04, #1
265e0     D7 26 48 FB | 	callpa	#(@LR__3525-@LR__3522)>>2,fcache_load_ptr_
265e4                 | LR__3522
265e4     01 AC 06 F1 | 	add	local04, #1
265e8     56 AF 02 F6 | 	mov	local05, local04
265ec     53 AF 02 F1 | 	add	local05, local01
265f0     57 B1 C2 FA | 	rdbyte	local06, local05
265f4     41 B0 56 F2 | 	cmps	local06, #65 wc
265f8     18 00 90 CD |  if_b	jmp	#LR__3523
265fc     5B B0 56 F2 | 	cmps	local06, #91 wc
26600     56 B3 02 C6 |  if_b	mov	local07, local04
26604     55 B3 02 C1 |  if_b	add	local07, local03
26608     20 B0 06 C1 |  if_b	add	local06, #32
2660c     59 B1 42 CC |  if_b	wrbyte	local06, local07
26610     0C 00 90 CD |  if_b	jmp	#LR__3524
26614                 | LR__3523
26614     56 B3 02 F6 | 	mov	local07, local04
26618     55 B3 02 F1 | 	add	local07, local03
2661c     59 B1 42 FC | 	wrbyte	local06, local07
26620                 | LR__3524
26620     54 B1 02 F6 | 	mov	local06, local02
26624     01 B0 86 F1 | 	sub	local06, #1
26628     58 AD 0A F2 | 	cmp	local04, local06 wz
2662c     B4 FF 9F 5D |  if_ne	jmp	#LR__3522
26630                 | LR__3525
26630     55 A9 02 F1 | 	add	local02, local03
26634     54 01 48 FC | 	wrbyte	#0, local02
26638     55 7B 02 F6 | 	mov	result1, local03
2663c     04 00 90 FD | 	jmp	#LR__3527
26640                 | LR__3526
26640     55 7B 02 F6 | 	mov	result1, local03
26644                 | LR__3527
26644     E7 F0 03 F6 | 	mov	ptra, fp
26648     F2 00 A0 FD | 	call	#popregs_
2664c                 | __system__LCase_S_ret
2664c     2D 00 64 FD | 	ret
26650                 | 
26650                 | __system__LTrim_S
26650     05 CA 05 F6 | 	mov	COUNT_, #5
26654     E8 00 A0 FD | 	call	#pushregs_
26658     49 A7 02 F6 | 	mov	local01, arg01
2665c     49 A9 02 F6 | 	mov	local02, arg01
26660     D7 06 48 FB | 	callpa	#(@LR__3531-@LR__3530)>>2,fcache_load_ptr_
26664                 | LR__3530
26664     54 7B CA FA | 	rdbyte	result1, local02 wz
26668     01 A8 06 51 |  if_ne	add	local02, #1
2666c     F4 FF 9F 5D |  if_ne	jmp	#LR__3530
26670                 | LR__3531
26670     49 A9 82 F1 | 	sub	local02, arg01
26674     54 7B 02 F6 | 	mov	result1, local02
26678     3D A9 0A F6 | 	mov	local02, result1 wz
2667c     92 01 00 AF 
26680     BF 7A 06 A6 |  if_e	mov	result1, ##@LR__5468
26684     7C 00 90 AD |  if_e	jmp	#LR__3536
26688     00 AA 06 F6 | 	mov	local03, #0
2668c     54 AD 02 F6 | 	mov	local04, local02
26690                 | LR__3532
26690     56 AB 52 F2 | 	cmps	local03, local04 wc
26694     68 00 90 3D |  if_ae	jmp	#LR__3535
26698     55 97 02 F6 | 	mov	arg03, local03
2669c     53 97 02 F1 | 	add	arg03, local01
266a0     4B 97 C2 FA | 	rdbyte	arg03, arg03
266a4     20 96 0E F2 | 	cmp	arg03, #32 wz
266a8     4C 00 90 AD |  if_e	jmp	#LR__3534
266ac     54 93 02 F6 | 	mov	arg01, local02
266b0     55 93 82 F1 | 	sub	arg01, local03
266b4     02 92 06 F1 | 	add	arg01, #2
266b8     24 1D B0 FD | 	call	#__system___gc_alloc_managed
266bc     3D AF 0A F6 | 	mov	local05, result1 wz
266c0     2C 00 90 AD |  if_e	jmp	#LR__3533
266c4     55 95 02 F6 | 	mov	arg02, local03
266c8     53 95 02 F1 | 	add	arg02, local01
266cc     54 97 02 F6 | 	mov	arg03, local02
266d0     55 97 82 F1 | 	sub	arg03, local03
266d4     57 93 02 F6 | 	mov	arg01, local05
266d8     AC E1 BF FD | 	call	#__system____builtin_memmove
266dc     55 A9 82 F1 | 	sub	local02, local03
266e0     57 A9 02 F1 | 	add	local02, local05
266e4     54 01 48 FC | 	wrbyte	#0, local02
266e8     57 7B 02 F6 | 	mov	result1, local05
266ec     14 00 90 FD | 	jmp	#LR__3536
266f0                 | LR__3533
266f0     57 7B 02 F6 | 	mov	result1, local05
266f4     0C 00 90 FD | 	jmp	#LR__3536
266f8                 | LR__3534
266f8     01 AA 06 F1 | 	add	local03, #1
266fc     90 FF 9F FD | 	jmp	#LR__3532
26700                 | LR__3535
26700     53 7B 02 F6 | 	mov	result1, local01
26704                 | LR__3536
26704     E7 F0 03 F6 | 	mov	ptra, fp
26708     F2 00 A0 FD | 	call	#popregs_
2670c                 | __system__LTrim_S_ret
2670c     2D 00 64 FD | 	ret
26710                 | 
26710                 | __system__RTrim_S
26710     04 CA 05 F6 | 	mov	COUNT_, #4
26714     E8 00 A0 FD | 	call	#pushregs_
26718     49 A7 02 F6 | 	mov	local01, arg01
2671c     49 A9 02 F6 | 	mov	local02, arg01
26720     D7 06 48 FB | 	callpa	#(@LR__3541-@LR__3540)>>2,fcache_load_ptr_
26724                 | LR__3540
26724     54 7B CA FA | 	rdbyte	result1, local02 wz
26728     01 A8 06 51 |  if_ne	add	local02, #1
2672c     F4 FF 9F 5D |  if_ne	jmp	#LR__3540
26730                 | LR__3541
26730     49 A9 82 F1 | 	sub	local02, arg01
26734     54 7B 02 F6 | 	mov	result1, local02
26738     3D A9 0A F6 | 	mov	local02, result1 wz
2673c     92 01 00 AF 
26740     C0 7A 06 A6 |  if_e	mov	result1, ##@LR__5469
26744     74 00 90 AD |  if_e	jmp	#LR__3545
26748     54 AB 02 F6 | 	mov	local03, local02
2674c     01 AA 86 F1 | 	sub	local03, #1
26750                 | LR__3542
26750     55 95 02 F6 | 	mov	arg02, local03
26754     53 95 02 F1 | 	add	arg02, local01
26758     4A A9 C2 FA | 	rdbyte	local02, arg02
2675c     20 A8 0E F2 | 	cmp	local02, #32 wz
26760     44 00 90 AD |  if_e	jmp	#LR__3544
26764     55 93 02 F6 | 	mov	arg01, local03
26768     02 92 06 F1 | 	add	arg01, #2
2676c     70 1C B0 FD | 	call	#__system___gc_alloc_managed
26770     3D AD 0A F6 | 	mov	local04, result1 wz
26774     28 00 90 AD |  if_e	jmp	#LR__3543
26778     55 97 02 F6 | 	mov	arg03, local03
2677c     01 96 06 F1 | 	add	arg03, #1
26780     56 93 02 F6 | 	mov	arg01, local04
26784     53 95 02 F6 | 	mov	arg02, local01
26788     FC E0 BF FD | 	call	#__system____builtin_memmove
2678c     01 AA 06 F1 | 	add	local03, #1
26790     56 AB 02 F1 | 	add	local03, local04
26794     55 01 48 FC | 	wrbyte	#0, local03
26798     56 7B 02 F6 | 	mov	result1, local04
2679c     1C 00 90 FD | 	jmp	#LR__3545
267a0                 | LR__3543
267a0     56 7B 02 F6 | 	mov	result1, local04
267a4     14 00 90 FD | 	jmp	#LR__3545
267a8                 | LR__3544
267a8     01 AA 86 F1 | 	sub	local03, #1
267ac     00 AA 56 F2 | 	cmps	local03, #0 wc
267b0     9C FF 9F 3D |  if_ae	jmp	#LR__3542
267b4     92 01 00 FF 
267b8     C1 7A 06 F6 | 	mov	result1, ##@LR__5470
267bc                 | LR__3545
267bc     E7 F0 03 F6 | 	mov	ptra, fp
267c0     F2 00 A0 FD | 	call	#popregs_
267c4                 | __system__RTrim_S_ret
267c4     2D 00 64 FD | 	ret
267c8                 | 
267c8                 | __system__Instr
267c8     07 CA 05 F6 | 	mov	COUNT_, #7
267cc     E8 00 A0 FD | 	call	#pushregs_
267d0     49 A7 02 F6 | 	mov	local01, arg01
267d4     4A A9 02 F6 | 	mov	local02, arg02
267d8     4B AB 02 F6 | 	mov	local03, arg03
267dc     55 93 02 F6 | 	mov	arg01, local03
267e0     49 AD 02 F6 | 	mov	local04, arg01
267e4     D7 06 48 FB | 	callpa	#(@LR__3551-@LR__3550)>>2,fcache_load_ptr_
267e8                 | LR__3550
267e8     56 7B CA FA | 	rdbyte	result1, local04 wz
267ec     01 AC 06 51 |  if_ne	add	local04, #1
267f0     F4 FF 9F 5D |  if_ne	jmp	#LR__3550
267f4                 | LR__3551
267f4     49 AD 82 F1 | 	sub	local04, arg01
267f8     56 AF 02 F6 | 	mov	local05, local04
267fc     54 93 02 F6 | 	mov	arg01, local02
26800     49 AD 02 F6 | 	mov	local04, arg01
26804     D7 06 48 FB | 	callpa	#(@LR__3553-@LR__3552)>>2,fcache_load_ptr_
26808                 | LR__3552
26808     56 7B CA FA | 	rdbyte	result1, local04 wz
2680c     01 AC 06 51 |  if_ne	add	local04, #1
26810     F4 FF 9F 5D |  if_ne	jmp	#LR__3552
26814                 | LR__3553
26814     49 AD 82 F1 | 	sub	local04, arg01
26818     56 7B 02 F6 | 	mov	result1, local04
2681c     3D 99 0A F6 | 	mov	arg04, result1 wz
26820     00 7A 06 A6 |  if_e	mov	result1, #0
26824     98 00 90 AD |  if_e	jmp	#LR__3557
26828     00 AE 0E F2 | 	cmp	local05, #0 wz
2682c     00 7A 06 A6 |  if_e	mov	result1, #0
26830     8C 00 90 AD |  if_e	jmp	#LR__3557
26834     4C A7 5A F2 | 	cmps	local01, arg04 wcz
26838     00 7A 06 16 |  if_a	mov	result1, #0
2683c     80 00 90 1D |  if_a	jmp	#LR__3557
26840     01 A6 56 F2 | 	cmps	local01, #1 wc
26844     01 A6 06 C6 |  if_b	mov	local01, #1
26848     55 B1 C2 FA | 	rdbyte	local06, local03
2684c     01 AE 0E F2 | 	cmp	local05, #1 wz
26850     18 00 90 5D |  if_ne	jmp	#LR__3554
26854     54 93 02 F6 | 	mov	arg01, local02
26858     58 95 02 F6 | 	mov	arg02, local06
2685c     53 97 02 F6 | 	mov	arg03, local01
26860     00 98 06 F6 | 	mov	arg04, #0
26864     C4 37 B0 FD | 	call	#__system____ScanForChar
26868     54 00 90 FD | 	jmp	#LR__3557
2686c                 | LR__3554
2686c     53 B3 02 F6 | 	mov	local07, local01
26870                 | LR__3555
26870     54 93 02 F6 | 	mov	arg01, local02
26874     58 95 02 F6 | 	mov	arg02, local06
26878     59 97 02 F6 | 	mov	arg03, local07
2687c     00 98 06 F6 | 	mov	arg04, #0
26880     A8 37 B0 FD | 	call	#__system____ScanForChar
26884     3D B3 0A F6 | 	mov	local07, result1 wz
26888     30 00 90 AD |  if_e	jmp	#LR__3556
2688c     57 97 02 F6 | 	mov	arg03, local05
26890     54 93 02 F6 | 	mov	arg01, local02
26894     59 95 02 F6 | 	mov	arg02, local07
26898     FC FA BF FD | 	call	#__system__Mid_S
2689c     3D 93 02 F6 | 	mov	arg01, result1
268a0     55 95 02 F6 | 	mov	arg02, local03
268a4     58 E1 BF FD | 	call	#__system___string_cmp
268a8     00 7A 0E F2 | 	cmp	result1, #0 wz
268ac     59 7B 02 A6 |  if_e	mov	result1, local07
268b0     0C 00 90 AD |  if_e	jmp	#LR__3557
268b4     57 B3 02 F1 | 	add	local07, local05
268b8     B4 FF 9F FD | 	jmp	#LR__3555
268bc                 | LR__3556
268bc     00 7A 06 F6 | 	mov	result1, #0
268c0                 | LR__3557
268c0     E7 F0 03 F6 | 	mov	ptra, fp
268c4     F2 00 A0 FD | 	call	#popregs_
268c8                 | __system__Instr_ret
268c8     2D 00 64 FD | 	ret
268cc                 | 
268cc                 | __system__InstrRev
268cc     07 CA 05 F6 | 	mov	COUNT_, #7
268d0     E8 00 A0 FD | 	call	#pushregs_
268d4     49 A7 02 F6 | 	mov	local01, arg01
268d8     4A A9 02 F6 | 	mov	local02, arg02
268dc     4B AB 02 F6 | 	mov	local03, arg03
268e0     55 93 02 F6 | 	mov	arg01, local03
268e4     49 AD 02 F6 | 	mov	local04, arg01
268e8     D7 06 48 FB | 	callpa	#(@LR__3561-@LR__3560)>>2,fcache_load_ptr_
268ec                 | LR__3560
268ec     56 7B CA FA | 	rdbyte	result1, local04 wz
268f0     01 AC 06 51 |  if_ne	add	local04, #1
268f4     F4 FF 9F 5D |  if_ne	jmp	#LR__3560
268f8                 | LR__3561
268f8     49 AD 82 F1 | 	sub	local04, arg01
268fc     56 AF 02 F6 | 	mov	local05, local04
26900     54 93 02 F6 | 	mov	arg01, local02
26904     49 AD 02 F6 | 	mov	local04, arg01
26908     D7 06 48 FB | 	callpa	#(@LR__3563-@LR__3562)>>2,fcache_load_ptr_
2690c                 | LR__3562
2690c     56 7B CA FA | 	rdbyte	result1, local04 wz
26910     01 AC 06 51 |  if_ne	add	local04, #1
26914     F4 FF 9F 5D |  if_ne	jmp	#LR__3562
26918                 | LR__3563
26918     49 AD 82 F1 | 	sub	local04, arg01
2691c     56 7B 02 F6 | 	mov	result1, local04
26920     3D 99 0A F6 | 	mov	arg04, result1 wz
26924     00 7A 06 A6 |  if_e	mov	result1, #0
26928     98 00 90 AD |  if_e	jmp	#LR__3567
2692c     00 AE 0E F2 | 	cmp	local05, #0 wz
26930     00 7A 06 A6 |  if_e	mov	result1, #0
26934     8C 00 90 AD |  if_e	jmp	#LR__3567
26938     4C A7 5A F2 | 	cmps	local01, arg04 wcz
2693c     4C A7 02 16 |  if_a	mov	local01, arg04
26940     01 A6 56 F2 | 	cmps	local01, #1 wc
26944     01 A6 06 C6 |  if_b	mov	local01, #1
26948     55 B1 C2 FA | 	rdbyte	local06, local03
2694c     01 AE 0E F2 | 	cmp	local05, #1 wz
26950     18 00 90 5D |  if_ne	jmp	#LR__3564
26954     54 93 02 F6 | 	mov	arg01, local02
26958     58 95 02 F6 | 	mov	arg02, local06
2695c     53 97 02 F6 | 	mov	arg03, local01
26960     01 98 06 F6 | 	mov	arg04, #1
26964     C4 36 B0 FD | 	call	#__system____ScanForChar
26968     58 00 90 FD | 	jmp	#LR__3567
2696c                 | LR__3564
2696c     57 B3 02 F6 | 	mov	local07, local05
26970     01 B2 86 F1 | 	sub	local07, #1
26974                 | LR__3565
26974     54 93 02 F6 | 	mov	arg01, local02
26978     58 95 02 F6 | 	mov	arg02, local06
2697c     59 97 02 F6 | 	mov	arg03, local07
26980     01 98 06 F6 | 	mov	arg04, #1
26984     A4 36 B0 FD | 	call	#__system____ScanForChar
26988     3D B3 0A F6 | 	mov	local07, result1 wz
2698c     30 00 90 AD |  if_e	jmp	#LR__3566
26990     57 97 02 F6 | 	mov	arg03, local05
26994     54 93 02 F6 | 	mov	arg01, local02
26998     59 95 02 F6 | 	mov	arg02, local07
2699c     F8 F9 BF FD | 	call	#__system__Mid_S
269a0     3D 93 02 F6 | 	mov	arg01, result1
269a4     55 95 02 F6 | 	mov	arg02, local03
269a8     54 E0 BF FD | 	call	#__system___string_cmp
269ac     00 7A 0E F2 | 	cmp	result1, #0 wz
269b0     59 7B 02 A6 |  if_e	mov	result1, local07
269b4     0C 00 90 AD |  if_e	jmp	#LR__3567
269b8     57 B3 82 F1 | 	sub	local07, local05
269bc     B4 FF 9F FD | 	jmp	#LR__3565
269c0                 | LR__3566
269c0     00 7A 06 F6 | 	mov	result1, #0
269c4                 | LR__3567
269c4     E7 F0 03 F6 | 	mov	ptra, fp
269c8     F2 00 A0 FD | 	call	#popregs_
269cc                 | __system__InstrRev_ret
269cc     2D 00 64 FD | 	ret
269d0                 | 
269d0                 | __system___remove
269d0     06 CA 05 F6 | 	mov	COUNT_, #6
269d4     E8 00 A0 FD | 	call	#pushregs_
269d8     35 A7 02 F6 | 	mov	local01, ptr___system__dat__
269dc     84 A7 06 F1 | 	add	local01, #388
269e0     49 95 02 F6 | 	mov	arg02, arg01
269e4     53 93 02 F6 | 	mov	arg01, local01
269e8     00 96 06 F6 | 	mov	arg03, #0
269ec     34 E7 BF FD | 	call	#__system____getvfsforfile
269f0     3D A9 0A F6 | 	mov	local02, result1 wz
269f4     10 00 90 AD |  if_e	jmp	#LR__3570
269f8     20 A8 06 F1 | 	add	local02, #32
269fc     54 93 0A FB | 	rdlong	arg01, local02 wz
26a00     20 A8 86 F1 | 	sub	local02, #32
26a04     14 00 90 5D |  if_ne	jmp	#LR__3571
26a08                 | LR__3570
26a08     20 6A 06 F1 | 	add	ptr___system__dat__, #32
26a0c     35 21 68 FC | 	wrlong	#16, ptr___system__dat__
26a10     20 6A 86 F1 | 	sub	ptr___system__dat__, #32
26a14     01 7A 66 F6 | 	neg	result1, #1
26a18     A8 00 90 FD | 	jmp	#LR__3574
26a1c                 | LR__3571
26a1c     40 A8 06 F1 | 	add	local02, #64
26a20     54 AB 02 FB | 	rdlong	local03, local02
26a24     55 AD 02 F6 | 	mov	local04, local03
26a28     40 A8 86 F1 | 	sub	local02, #64
26a2c     13 AC 46 F7 | 	zerox	local04, #19
26a30     14 AA 46 F0 | 	shr	local03, #20
26a34     02 AA 66 F0 | 	shl	local03, #2
26a38     2D AB 02 F1 | 	add	local03, __methods__
26a3c     55 AB 02 FB | 	rdlong	local03, local03
26a40     53 93 02 F6 | 	mov	arg01, local01
26a44     32 AF 02 F6 | 	mov	local05, objptr
26a48     56 65 02 F6 | 	mov	objptr, local04
26a4c     2D AA 62 FD | 	call	local03
26a50     57 65 02 F6 | 	mov	objptr, local05
26a54     3D B1 02 F6 | 	mov	local06, result1
26a58     FF FF 7F FF 
26a5c     F2 B1 0E F2 | 	cmp	local06, ##-14 wz
26a60     38 00 90 5D |  if_ne	jmp	#LR__3572
26a64     3C A8 06 F1 | 	add	local02, #60
26a68     54 B1 02 FB | 	rdlong	local06, local02
26a6c     58 AB 02 F6 | 	mov	local03, local06
26a70     13 B0 46 F7 | 	zerox	local06, #19
26a74     14 AA 46 F0 | 	shr	local03, #20
26a78     02 AA 66 F0 | 	shl	local03, #2
26a7c     2D AB 02 F1 | 	add	local03, __methods__
26a80     55 AB 02 FB | 	rdlong	local03, local03
26a84     53 93 02 F6 | 	mov	arg01, local01
26a88     32 AF 02 F6 | 	mov	local05, objptr
26a8c     58 65 02 F6 | 	mov	objptr, local06
26a90     2D AA 62 FD | 	call	local03
26a94     57 65 02 F6 | 	mov	objptr, local05
26a98     3D B1 02 F6 | 	mov	local06, result1
26a9c                 | LR__3572
26a9c     00 B0 0E F2 | 	cmp	local06, #0 wz
26aa0     1C 00 90 AD |  if_e	jmp	#LR__3573
26aa4     58 93 6A F6 | 	neg	arg01, local06 wz
26aa8     20 6A 06 F1 | 	add	ptr___system__dat__, #32
26aac     35 93 62 FC | 	wrlong	arg01, ptr___system__dat__
26ab0     20 6A 86 F1 | 	sub	ptr___system__dat__, #32
26ab4     01 7A 66 56 |  if_ne	neg	result1, #1
26ab8     00 7A 06 A6 |  if_e	mov	result1, #0
26abc     04 00 90 FD | 	jmp	#LR__3574
26ac0                 | LR__3573
26ac0     00 7A 06 F6 | 	mov	result1, #0
26ac4                 | LR__3574
26ac4     E7 F0 03 F6 | 	mov	ptra, fp
26ac8     F2 00 A0 FD | 	call	#popregs_
26acc                 | __system___remove_ret
26acc     2D 00 64 FD | 	ret
26ad0                 | 
26ad0                 | __system___mkdir
26ad0     05 CA 05 F6 | 	mov	COUNT_, #5
26ad4     E8 00 A0 FD | 	call	#pushregs_
26ad8     35 A7 02 F6 | 	mov	local01, ptr___system__dat__
26adc     84 A7 06 F1 | 	add	local01, #388
26ae0     49 95 02 F6 | 	mov	arg02, arg01
26ae4     53 93 02 F6 | 	mov	arg01, local01
26ae8     00 96 06 F6 | 	mov	arg03, #0
26aec     34 E6 BF FD | 	call	#__system____getvfsforfile
26af0     3D A9 0A F6 | 	mov	local02, result1 wz
26af4     10 00 90 AD |  if_e	jmp	#LR__3580
26af8     20 A8 06 F1 | 	add	local02, #32
26afc     54 95 0A FB | 	rdlong	arg02, local02 wz
26b00     20 A8 86 F1 | 	sub	local02, #32
26b04     14 00 90 5D |  if_ne	jmp	#LR__3581
26b08                 | LR__3580
26b08     20 6A 06 F1 | 	add	ptr___system__dat__, #32
26b0c     35 21 68 FC | 	wrlong	#16, ptr___system__dat__
26b10     20 6A 86 F1 | 	sub	ptr___system__dat__, #32
26b14     01 7A 66 F6 | 	neg	result1, #1
26b18     60 00 90 FD | 	jmp	#LR__3583
26b1c                 | LR__3581
26b1c     38 A8 06 F1 | 	add	local02, #56
26b20     54 AB 02 FB | 	rdlong	local03, local02
26b24     55 AD 02 F6 | 	mov	local04, local03
26b28     13 AA 46 F7 | 	zerox	local03, #19
26b2c     14 AC 46 F0 | 	shr	local04, #20
26b30     02 AC 66 F0 | 	shl	local04, #2
26b34     2D AD 02 F1 | 	add	local04, __methods__
26b38     56 AD 02 FB | 	rdlong	local04, local04
26b3c     53 93 02 F6 | 	mov	arg01, local01
26b40     FF 95 06 F6 | 	mov	arg02, #511
26b44     32 AF 02 F6 | 	mov	local05, objptr
26b48     55 65 02 F6 | 	mov	objptr, local03
26b4c     2D AC 62 FD | 	call	local04
26b50     57 65 02 F6 | 	mov	objptr, local05
26b54     3D 93 0A F6 | 	mov	arg01, result1 wz
26b58     1C 00 90 AD |  if_e	jmp	#LR__3582
26b5c     49 93 6A F6 | 	neg	arg01, arg01 wz
26b60     20 6A 06 F1 | 	add	ptr___system__dat__, #32
26b64     35 93 62 FC | 	wrlong	arg01, ptr___system__dat__
26b68     20 6A 86 F1 | 	sub	ptr___system__dat__, #32
26b6c     01 7A 66 56 |  if_ne	neg	result1, #1
26b70     00 7A 06 A6 |  if_e	mov	result1, #0
26b74     04 00 90 FD | 	jmp	#LR__3583
26b78                 | LR__3582
26b78     00 7A 06 F6 | 	mov	result1, #0
26b7c                 | LR__3583
26b7c     E7 F0 03 F6 | 	mov	ptra, fp
26b80     F2 00 A0 FD | 	call	#popregs_
26b84                 | __system___mkdir_ret
26b84     2D 00 64 FD | 	ret
26b88                 | 
26b88                 | __system___strerror
26b88     00 92 56 F2 | 	cmps	arg01, #0 wc
26b8c     08 00 90 CD |  if_b	jmp	#LR__3590
26b90     1A 92 56 F2 | 	cmps	arg01, #26 wc
26b94     04 00 90 CD |  if_b	jmp	#LR__3591
26b98                 | LR__3590
26b98     19 92 06 F6 | 	mov	arg01, #25
26b9c                 | LR__3591
26b9c     02 92 66 F0 | 	shl	arg01, #2
26ba0     35 7B 02 F6 | 	mov	result1, ptr___system__dat__
26ba4     01 00 00 FF 
26ba8     E0 7A 06 F1 | 	add	result1, ##736
26bac     3D 93 02 F1 | 	add	arg01, result1
26bb0     49 7B 02 FB | 	rdlong	result1, arg01
26bb4                 | __system___strerror_ret
26bb4     2D 00 64 FD | 	ret
26bb8                 | 
26bb8                 | __system___int64_shl
26bb8     20 96 CE F7 | 	test	arg03, #32 wz
26bbc     49 95 02 56 |  if_ne	mov	arg02, arg01
26bc0     00 92 06 56 |  if_ne	mov	arg01, #0
26bc4     1F 96 CE F7 | 	test	arg03, #31 wz
26bc8     18 00 90 AD |  if_e	jmp	#LR__3600
26bcc     4B 95 62 F0 | 	shl	arg02, arg03
26bd0     49 7B 02 F6 | 	mov	result1, arg01
26bd4     4B 7D 62 F6 | 	neg	result2, arg03
26bd8     3E 7B 42 F0 | 	shr	result1, result2
26bdc     3D 95 42 F5 | 	or	arg02, result1
26be0     4B 93 62 F0 | 	shl	arg01, arg03
26be4                 | LR__3600
26be4     4A 7D 02 F6 | 	mov	result2, arg02
26be8     49 7B 02 F6 | 	mov	result1, arg01
26bec                 | __system___int64_shl_ret
26bec     2D 00 64 FD | 	ret
26bf0                 | 
26bf0                 | __system___int64_sar
26bf0     20 96 CE F7 | 	test	arg03, #32 wz
26bf4     4A 93 02 56 |  if_ne	mov	arg01, arg02
26bf8     1F 94 C6 50 |  if_ne	sar	arg02, #31
26bfc     1F 96 CE F7 | 	test	arg03, #31 wz
26c00     18 00 90 AD |  if_e	jmp	#LR__3610
26c04     4B 93 42 F0 | 	shr	arg01, arg03
26c08     4A 7B 02 F6 | 	mov	result1, arg02
26c0c     4B 7D 62 F6 | 	neg	result2, arg03
26c10     3E 7B 62 F0 | 	shl	result1, result2
26c14     3D 93 42 F5 | 	or	arg01, result1
26c18     4B 95 C2 F0 | 	sar	arg02, arg03
26c1c                 | LR__3610
26c1c     4A 7D 02 F6 | 	mov	result2, arg02
26c20     49 7B 02 F6 | 	mov	result1, arg01
26c24                 | __system___int64_sar_ret
26c24     2D 00 64 FD | 	ret
26c28                 | 
26c28                 | __system___usepins
26c28     14 6A 06 F1 | 	add	ptr___system__dat__, #20
26c2c     35 81 02 FB | 	rdlong	_var01, ptr___system__dat__
26c30     14 6A 86 F1 | 	sub	ptr___system__dat__, #20
26c34     40 93 CA F7 | 	test	arg01, _var01 wz
26c38     18 6A 06 A1 |  if_e	add	ptr___system__dat__, #24
26c3c     35 83 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
26c40     18 6A 86 A1 |  if_e	sub	ptr___system__dat__, #24
26c44     41 95 CA A7 |  if_e	test	arg02, _var02 wz
26c48     00 7A 06 56 |  if_ne	mov	result1, #0
26c4c     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
26c50     14 6A 06 F1 | 	add	ptr___system__dat__, #20
26c54     35 83 02 FB | 	rdlong	_var02, ptr___system__dat__
26c58     49 83 42 F5 | 	or	_var02, arg01
26c5c     35 83 62 FC | 	wrlong	_var02, ptr___system__dat__
26c60     04 6A 06 F1 | 	add	ptr___system__dat__, #4
26c64     35 83 02 FB | 	rdlong	_var02, ptr___system__dat__
26c68     4A 83 42 F5 | 	or	_var02, arg02
26c6c     35 83 62 FC | 	wrlong	_var02, ptr___system__dat__
26c70     18 6A 86 F1 | 	sub	ptr___system__dat__, #24
26c74     01 7A 66 F6 | 	neg	result1, #1
26c78                 | __system___usepins_ret
26c78     2D 00 64 FD | 	ret
26c7c                 | 
26c7c                 | __system___freepins
26c7c     14 6A 06 F1 | 	add	ptr___system__dat__, #20
26c80     35 81 02 FB | 	rdlong	_var01, ptr___system__dat__
26c84     49 81 22 F5 | 	andn	_var01, arg01
26c88     35 81 62 FC | 	wrlong	_var01, ptr___system__dat__
26c8c     04 6A 06 F1 | 	add	ptr___system__dat__, #4
26c90     35 81 02 FB | 	rdlong	_var01, ptr___system__dat__
26c94     4A 81 22 F5 | 	andn	_var01, arg02
26c98     35 81 62 FC | 	wrlong	_var01, ptr___system__dat__
26c9c     18 6A 86 F1 | 	sub	ptr___system__dat__, #24
26ca0                 | __system___freepins_ret
26ca0     2D 00 64 FD | 	ret
26ca4                 | 
26ca4                 | __system___float_fromuns
26ca4     49 97 0A F6 | 	mov	arg03, arg01 wz
26ca8     4B 7B 02 A6 |  if_e	mov	result1, arg03
26cac     24 00 90 AD |  if_e	jmp	#LR__3620
26cb0     4B 95 92 F7 | 	encod	arg02, arg03 wc
26cb4     01 94 06 C1 |  if_b	add	arg02, #1
26cb8     01 94 86 F1 | 	sub	arg02, #1
26cbc     1F 92 06 F6 | 	mov	arg01, #31
26cc0     4A 93 82 F1 | 	sub	arg01, arg02
26cc4     49 97 62 F0 | 	shl	arg03, arg01
26cc8     02 96 46 F0 | 	shr	arg03, #2
26ccc     00 92 06 F6 | 	mov	arg01, #0
26cd0     58 09 B0 FD | 	call	#__system___float_Pack
26cd4                 | LR__3620
26cd4                 | __system___float_fromuns_ret
26cd4     2D 00 64 FD | 	ret
26cd8                 | 
26cd8                 | __system___float_add
26cd8     0F CA 05 F6 | 	mov	COUNT_, #15
26cdc     E8 00 A0 FD | 	call	#pushregs_
26ce0     49 A7 02 F6 | 	mov	local01, arg01
26ce4     4A A9 02 F6 | 	mov	local02, arg02
26ce8     00 AA 06 F6 | 	mov	local03, #0
26cec     53 AD 02 F6 | 	mov	local04, local01
26cf0     56 AF 02 F6 | 	mov	local05, local04
26cf4     16 AE 46 F7 | 	zerox	local05, #22
26cf8     56 B1 02 F6 | 	mov	local06, local04
26cfc     01 B0 66 F0 | 	shl	local06, #1
26d00     18 B0 46 F0 | 	shr	local06, #24
26d04     1F AC 46 F0 | 	shr	local04, #31
26d08     54 93 02 F6 | 	mov	arg01, local02
26d0c     49 7B 02 F6 | 	mov	result1, arg01
26d10     3D B3 02 F6 | 	mov	local07, result1
26d14     59 B5 02 F6 | 	mov	local08, local07
26d18     16 B4 46 F7 | 	zerox	local08, #22
26d1c     59 B7 02 F6 | 	mov	local09, local07
26d20     01 B6 66 F0 | 	shl	local09, #1
26d24     18 B6 46 F0 | 	shr	local09, #24
26d28     5B B9 02 F6 | 	mov	local10, local09
26d2c     1F B2 46 F0 | 	shr	local07, #31
26d30     00 BA 06 F6 | 	mov	local11, #0
26d34     00 BC 06 F6 | 	mov	local12, #0
26d38     5C B1 12 F2 | 	cmp	local06, local10 wc
26d3c     5C B1 0A 32 |  if_ae	cmp	local06, local10 wz
26d40     2C 00 90 1D |  if_a	jmp	#LR__3630
26d44     5A AF 12 32 |  if_ae	cmp	local05, local08 wc
26d48     24 00 90 3D |  if_ae	jmp	#LR__3630
26d4c     57 BF 02 F6 | 	mov	local13, local05
26d50     5A AF 02 F6 | 	mov	local05, local08
26d54     5F B5 02 F6 | 	mov	local08, local13
26d58     58 BF 02 F6 | 	mov	local13, local06
26d5c     5C B1 02 F6 | 	mov	local06, local10
26d60     5F B9 02 F6 | 	mov	local10, local13
26d64     56 BF 02 F6 | 	mov	local13, local04
26d68     59 AD 02 F6 | 	mov	local04, local07
26d6c     5F B3 02 F6 | 	mov	local07, local13
26d70                 | LR__3630
26d70     FF B0 0E F2 | 	cmp	local06, #255 wz
26d74     70 01 90 AD |  if_e	jmp	#LR__3645
26d78     00 B0 0E F2 | 	cmp	local06, #0 wz
26d7c     AC 01 90 AD |  if_e	jmp	#LR__3647
26d80     17 AE 26 F4 | 	bith	local05, #23
26d84                 | LR__3631
26d84     00 B8 0E F2 | 	cmp	local10, #0 wz
26d88     F0 01 90 AD |  if_e	jmp	#LR__3651
26d8c     17 B4 26 F4 | 	bith	local08, #23
26d90                 | LR__3632
26d90     7F B0 86 F1 | 	sub	local06, #127
26d94     7F B8 86 F1 | 	sub	local10, #127
26d98     58 C1 02 F6 | 	mov	local14, local06
26d9c     5C C1 82 F1 | 	sub	local14, local10
26da0     D7 14 48 FB | 	callpa	#(@LR__3634-@LR__3633)>>2,fcache_load_ptr_
26da4                 | LR__3633
26da4     20 C0 56 F2 | 	cmps	local14, #32 wc
26da8     20 00 90 CD |  if_b	jmp	#LR__3635
26dac     5A B7 02 F6 | 	mov	local09, local08
26db0     00 BA 0E F2 | 	cmp	local11, #0 wz
26db4     6F BA 62 FD | 	wrnz	local11
26db8     5D B7 42 F5 | 	or	local09, local11
26dbc     5B BB 02 F6 | 	mov	local11, local09
26dc0     00 B4 06 F6 | 	mov	local08, #0
26dc4     20 C0 86 F1 | 	sub	local14, #32
26dc8     D8 FF 9F FD | 	jmp	#LR__3633
26dcc                 | LR__3634
26dcc                 | LR__3635
26dcc     00 C0 0E F2 | 	cmp	local14, #0 wz
26dd0     38 00 90 AD |  if_e	jmp	#LR__3636
26dd4     5A BF 02 F6 | 	mov	local13, local08
26dd8     20 B8 06 F6 | 	mov	local10, #32
26ddc     60 B9 82 F1 | 	sub	local10, local14
26de0     5C BF 62 F0 | 	shl	local13, local10
26de4     5D B9 02 F6 | 	mov	local10, local11
26de8     20 B6 06 F6 | 	mov	local09, #32
26dec     60 B7 82 F1 | 	sub	local09, local14
26df0     5B B9 6A F0 | 	shl	local10, local09 wz
26df4     60 BB 42 F0 | 	shr	local11, local14
26df8     60 B5 42 F0 | 	shr	local08, local14
26dfc     5F BB 42 F5 | 	or	local11, local13
26e00     00 C2 06 F6 | 	mov	local15, #0
26e04     01 C2 06 56 |  if_ne	mov	local15, #1
26e08     61 BB 42 F5 | 	or	local11, local15
26e0c                 | LR__3636
26e0c     56 C3 02 F6 | 	mov	local15, local04
26e10     59 C3 62 F5 | 	xor	local15, local07
26e14     01 C2 CE F7 | 	test	local15, #1 wz
26e18     18 00 90 AD |  if_e	jmp	#LR__3637
26e1c     5A B5 22 F6 | 	not	local08, local08
26e20     5D BB 22 F6 | 	not	local11, local11
26e24     01 BA 0E F1 | 	add	local11, #1 wz
26e28     00 C2 06 F6 | 	mov	local15, #0
26e2c     01 C2 06 A6 |  if_e	mov	local15, #1
26e30     61 B5 02 F1 | 	add	local08, local15
26e34                 | LR__3637
26e34     5D BD 12 F1 | 	add	local12, local11 wc
26e38     5A AF 22 F1 | 	addx	local05, local08
26e3c     00 AE 56 F2 | 	cmps	local05, #0 wc
26e40     1C 00 90 3D |  if_ae	jmp	#LR__3638
26e44     01 AC 66 F5 | 	xor	local04, #1
26e48     57 AF 22 F6 | 	not	local05, local05
26e4c     5E BD 22 F6 | 	not	local12, local12
26e50     01 BC 0E F1 | 	add	local12, #1 wz
26e54     00 C2 06 F6 | 	mov	local15, #0
26e58     01 C2 06 A6 |  if_e	mov	local15, #1
26e5c     61 AF 02 F1 | 	add	local05, local15
26e60                 | LR__3638
26e60     00 80 00 FF 
26e64     00 AE 16 F2 | 	cmp	local05, ##16777216 wc
26e68     28 00 90 CD |  if_b	jmp	#LR__3639
26e6c     01 B0 06 F1 | 	add	local06, #1
26e70     5E C1 02 F6 | 	mov	local14, local12
26e74     01 C0 06 F5 | 	and	local14, #1
26e78     01 BC 46 F0 | 	shr	local12, #1
26e7c     57 C3 02 F6 | 	mov	local15, local05
26e80     1F C2 66 F0 | 	shl	local15, #31
26e84     61 BD 42 F5 | 	or	local12, local15
26e88     60 BD 42 F5 | 	or	local12, local14
26e8c     01 AE 46 F0 | 	shr	local05, #1
26e90     3C 00 90 FD | 	jmp	#LR__3644
26e94                 | LR__3639
26e94     00 40 00 FF 
26e98     00 AE 16 F2 | 	cmp	local05, ##8388608 wc
26e9c     30 00 90 3D |  if_ae	jmp	#LR__3643
26ea0     00 AE 0E F2 | 	cmp	local05, #0 wz
26ea4     00 BC 0E A2 |  if_e	cmp	local12, #0 wz
26ea8     08 AC 46 A5 |  if_e	or	local04, #8
26eac     01 AC 26 A5 |  if_e	andn	local04, #1
26eb0     1C 00 90 AD |  if_e	jmp	#LR__3642
26eb4                 | LR__3640
26eb4     00 40 00 FF 
26eb8     00 AE 16 F2 | 	cmp	local05, ##8388608 wc
26ebc     10 00 90 3D |  if_ae	jmp	#LR__3641
26ec0     5E BD 12 F1 | 	add	local12, local12 wc
26ec4     57 AF 22 F1 | 	addx	local05, local05
26ec8     01 B0 86 F1 | 	sub	local06, #1
26ecc     E4 FF 9F FD | 	jmp	#LR__3640
26ed0                 | LR__3641
26ed0                 | LR__3642
26ed0                 | LR__3643
26ed0                 | LR__3644
26ed0     57 93 02 F6 | 	mov	arg01, local05
26ed4     5E 95 02 F6 | 	mov	arg02, local12
26ed8     58 97 02 F6 | 	mov	arg03, local06
26edc     56 99 02 F6 | 	mov	arg04, local04
26ee0     50 34 B0 FD | 	call	#__system__pack_0698
26ee4     DC 00 90 FD | 	jmp	#LR__3655
26ee8                 | LR__3645
26ee8     FF B8 0E F2 | 	cmp	local10, #255 wz
26eec     10 00 90 5D |  if_ne	jmp	#LR__3646
26ef0     56 B3 0A F2 | 	cmp	local07, local04 wz
26ef4     00 F8 3F 5F 
26ef8     00 7A 06 56 |  if_ne	mov	result1, ##2146435072
26efc     C4 00 90 5D |  if_ne	jmp	#LR__3655
26f00                 | LR__3646
26f00     00 AE 0E F2 | 	cmp	local05, #0 wz
26f04     00 F8 3F 5F 
26f08     00 7A 06 56 |  if_ne	mov	result1, ##2146435072
26f0c     B4 00 90 5D |  if_ne	jmp	#LR__3655
26f10     5E 95 02 F6 | 	mov	arg02, local12
26f14     58 97 02 F6 | 	mov	arg03, local06
26f18     56 99 02 F6 | 	mov	arg04, local04
26f1c     02 98 46 F5 | 	or	arg04, #2
26f20     57 93 02 F6 | 	mov	arg01, local05
26f24     0C 34 B0 FD | 	call	#__system__pack_0698
26f28     98 00 90 FD | 	jmp	#LR__3655
26f2c                 | LR__3647
26f2c     00 AE 0E F2 | 	cmp	local05, #0 wz
26f30     28 00 90 AD |  if_e	jmp	#LR__3650
26f34     01 AE 66 F0 | 	shl	local05, #1
26f38     D7 0E 48 FB | 	callpa	#(@LR__3649-@LR__3648)>>2,fcache_load_ptr_
26f3c                 | LR__3648
26f3c     00 40 00 FF 
26f40     00 AE 16 F2 | 	cmp	local05, ##8388608 wc
26f44     58 C3 02 C6 |  if_b	mov	local15, local06
26f48     01 C2 86 C1 |  if_b	sub	local15, #1
26f4c     61 B1 02 C6 |  if_b	mov	local06, local15
26f50     01 AE 66 C0 |  if_b	shl	local05, #1
26f54     E4 FF 9F CD |  if_b	jmp	#LR__3648
26f58                 | LR__3649
26f58     28 FE 9F FD | 	jmp	#LR__3631
26f5c                 | LR__3650
26f5c     59 AD 02 F5 | 	and	local04, local07
26f60     56 99 02 F6 | 	mov	arg04, local04
26f64     08 98 46 F5 | 	or	arg04, #8
26f68     00 92 06 F6 | 	mov	arg01, #0
26f6c     00 94 06 F6 | 	mov	arg02, #0
26f70     00 96 06 F6 | 	mov	arg03, #0
26f74     BC 33 B0 FD | 	call	#__system__pack_0698
26f78     48 00 90 FD | 	jmp	#LR__3655
26f7c                 | LR__3651
26f7c     00 B4 0E F2 | 	cmp	local08, #0 wz
26f80     28 00 90 AD |  if_e	jmp	#LR__3654
26f84     01 B4 66 F0 | 	shl	local08, #1
26f88     D7 0E 48 FB | 	callpa	#(@LR__3653-@LR__3652)>>2,fcache_load_ptr_
26f8c                 | LR__3652
26f8c     00 40 00 FF 
26f90     00 B4 16 F2 | 	cmp	local08, ##8388608 wc
26f94     5C C3 02 C6 |  if_b	mov	local15, local10
26f98     01 C2 86 C1 |  if_b	sub	local15, #1
26f9c     61 B9 02 C6 |  if_b	mov	local10, local15
26fa0     01 B4 66 C0 |  if_b	shl	local08, #1
26fa4     E4 FF 9F CD |  if_b	jmp	#LR__3652
26fa8                 | LR__3653
26fa8     E4 FD 9F FD | 	jmp	#LR__3632
26fac                 | LR__3654
26fac     7F B0 86 F1 | 	sub	local06, #127
26fb0     57 93 02 F6 | 	mov	arg01, local05
26fb4     5E 95 02 F6 | 	mov	arg02, local12
26fb8     58 97 02 F6 | 	mov	arg03, local06
26fbc     56 99 02 F6 | 	mov	arg04, local04
26fc0     70 33 B0 FD | 	call	#__system__pack_0698
26fc4                 | LR__3655
26fc4     E7 F0 03 F6 | 	mov	ptra, fp
26fc8     F2 00 A0 FD | 	call	#popregs_
26fcc                 | __system___float_add_ret
26fcc     2D 00 64 FD | 	ret
26fd0                 | 
26fd0                 | __system___float_sqrt
26fd0     04 CA 05 F6 | 	mov	COUNT_, #4
26fd4     E8 00 A0 FD | 	call	#pushregs_
26fd8     49 A7 02 F6 | 	mov	local01, arg01
26fdc     49 7B 02 F6 | 	mov	result1, arg01
26fe0     3D A9 02 F6 | 	mov	local02, result1
26fe4     54 AB 02 F6 | 	mov	local03, local02
26fe8     16 AA 46 F7 | 	zerox	local03, #22
26fec     54 AD 02 F6 | 	mov	local04, local02
26ff0     01 AC 66 F0 | 	shl	local04, #1
26ff4     18 AC 4E F0 | 	shr	local04, #24 wz
26ff8     1F A8 46 F0 | 	shr	local02, #31
26ffc     70 00 90 AD |  if_e	jmp	#LR__3661
27000     17 AA 26 F4 | 	bith	local03, #23
27004                 | LR__3660
27004     00 A8 0E F2 | 	cmp	local02, #0 wz
27008     00 F8 3F 5F 
2700c     00 7A 06 56 |  if_ne	mov	result1, ##2146435072
27010     88 00 90 5D |  if_ne	jmp	#LR__3664
27014     FF AC 0E F2 | 	cmp	local04, #255 wz
27018     53 7B 02 A6 |  if_e	mov	result1, local01
2701c     7C 00 90 AD |  if_e	jmp	#LR__3664
27020     7F AC 86 F1 | 	sub	local04, #127
27024     01 AC CE F7 | 	test	local04, #1 wz
27028     01 AA 66 50 |  if_ne	shl	local03, #1
2702c     05 AA 66 F0 | 	shl	local03, #5
27030     55 01 38 FD | 	qsqrt	#0, local03
27034     01 AC 86 51 |  if_ne	sub	local04, #1
27038     56 AD 52 F6 | 	abs	local04, local04 wc
2703c     01 AC 46 F0 | 	shr	local04, #1
27040     56 97 82 F6 | 	negc	arg03, local04
27044     54 99 02 F6 | 	mov	arg04, local02
27048     18 92 62 FD | 	getqx	arg01
2704c     49 95 02 F6 | 	mov	arg02, arg01
27050     19 94 66 F0 | 	shl	arg02, #25
27054     07 92 46 F0 | 	shr	arg01, #7
27058     00 80 00 FF 
2705c     01 92 16 F2 | 	cmp	arg01, ##16777217 wc
27060     01 96 06 31 |  if_ae	add	arg03, #1
27064     01 92 46 30 |  if_ae	shr	arg01, #1
27068     C8 32 B0 FD | 	call	#__system__pack_0698
2706c     2C 00 90 FD | 	jmp	#LR__3664
27070                 | LR__3661
27070     00 AA 0E F2 | 	cmp	local03, #0 wz
27074     53 7B 02 A6 |  if_e	mov	result1, local01
27078     20 00 90 AD |  if_e	jmp	#LR__3664
2707c     01 AA 66 F0 | 	shl	local03, #1
27080     D7 0A 48 FB | 	callpa	#(@LR__3663-@LR__3662)>>2,fcache_load_ptr_
27084                 | LR__3662
27084     00 40 00 FF 
27088     00 AA 16 F2 | 	cmp	local03, ##8388608 wc
2708c     01 AC 86 C1 |  if_b	sub	local04, #1
27090     01 AA 66 C0 |  if_b	shl	local03, #1
27094     EC FF 9F CD |  if_b	jmp	#LR__3662
27098                 | LR__3663
27098     68 FF 9F FD | 	jmp	#LR__3660
2709c                 | LR__3664
2709c     E7 F0 03 F6 | 	mov	ptra, fp
270a0     F2 00 A0 FD | 	call	#popregs_
270a4                 | __system___float_sqrt_ret
270a4     2D 00 64 FD | 	ret
270a8                 | 
270a8                 | __system___float_mul
270a8     0B CA 05 F6 | 	mov	COUNT_, #11
270ac     E8 00 A0 FD | 	call	#pushregs_
270b0     49 A7 02 F6 | 	mov	local01, arg01
270b4     4A A9 02 F6 | 	mov	local02, arg02
270b8     53 AB 02 F6 | 	mov	local03, local01
270bc     55 AD 02 F6 | 	mov	local04, local03
270c0     16 AC 46 F7 | 	zerox	local04, #22
270c4     55 AF 02 F6 | 	mov	local05, local03
270c8     01 AE 66 F0 | 	shl	local05, #1
270cc     18 AE 46 F0 | 	shr	local05, #24
270d0     1F AA 46 F0 | 	shr	local03, #31
270d4     54 7B 02 F6 | 	mov	result1, local02
270d8     3D B1 02 F6 | 	mov	local06, result1
270dc     58 B3 02 F6 | 	mov	local07, local06
270e0     16 B2 46 F7 | 	zerox	local07, #22
270e4     58 B5 02 F6 | 	mov	local08, local06
270e8     01 B4 66 F0 | 	shl	local08, #1
270ec     18 B4 46 F0 | 	shr	local08, #24
270f0     1F B0 46 F0 | 	shr	local06, #31
270f4     58 AB 62 F5 | 	xor	local03, local06
270f8     FF AE 0E F2 | 	cmp	local05, #255 wz
270fc     90 00 90 AD |  if_e	jmp	#LR__3673
27100     FF B4 0E F2 | 	cmp	local08, #255 wz
27104     D8 00 90 AD |  if_e	jmp	#LR__3675
27108     00 AE 0E F2 | 	cmp	local05, #0 wz
2710c     0C 01 90 AD |  if_e	jmp	#LR__3676
27110     17 AC 26 F4 | 	bith	local04, #23
27114                 | LR__3670
27114     00 B4 0E F2 | 	cmp	local08, #0 wz
27118     44 01 90 AD |  if_e	jmp	#LR__3680
2711c     17 B2 26 F4 | 	bith	local07, #23
27120                 | LR__3671
27120     56 A9 02 F6 | 	mov	local02, local04
27124     04 A8 66 F0 | 	shl	local02, #4
27128     59 B1 02 F6 | 	mov	local06, local07
2712c     05 B0 66 F0 | 	shl	local06, #5
27130     58 A9 02 FD | 	qmul	local02, local06
27134     5A AF 02 F1 | 	add	local05, local08
27138     FE AE 86 F1 | 	sub	local05, #254
2713c     57 B7 02 F6 | 	mov	local09, local05
27140     04 AC 66 F0 | 	shl	local04, #4
27144     05 B2 66 F0 | 	shl	local07, #5
27148     18 B8 62 FD | 	getqx	local10
2714c     59 AD 02 FD | 	qmul	local04, local07
27150     19 BA 62 FD | 	getqy	local11
27154     00 80 00 FF 
27158     00 BA 16 F2 | 	cmp	local11, ##16777216 wc
2715c     18 00 90 CD |  if_b	jmp	#LR__3672
27160     01 B6 06 F1 | 	add	local09, #1
27164     01 B8 46 F0 | 	shr	local10, #1
27168     5D B5 02 F6 | 	mov	local08, local11
2716c     1F B4 66 F0 | 	shl	local08, #31
27170     5A B9 42 F5 | 	or	local10, local08
27174     01 BA 46 F0 | 	shr	local11, #1
27178                 | LR__3672
27178     5D 93 02 F6 | 	mov	arg01, local11
2717c     5C 95 02 F6 | 	mov	arg02, local10
27180     5B 97 02 F6 | 	mov	arg03, local09
27184     55 99 02 F6 | 	mov	arg04, local03
27188     A8 31 B0 FD | 	call	#__system__pack_0698
2718c     10 01 90 FD | 	jmp	#LR__3684
27190                 | LR__3673
27190     00 AC 0E F2 | 	cmp	local04, #0 wz
27194     53 7B 02 56 |  if_ne	mov	result1, local01
27198     04 01 90 5D |  if_ne	jmp	#LR__3684
2719c     FF B4 56 F2 | 	cmps	local08, #255 wc
271a0     00 B4 0E C2 |  if_b	cmp	local08, #0 wz
271a4     00 B2 0E 82 |  if_c_and_z	cmp	local07, #0 wz
271a8     18 00 90 4D |  if_c_and_nz	jmp	#LR__3674
271ac     00 F8 3F CF 
271b0     00 7A 06 C6 |  if_b	mov	result1, ##2146435072
271b4     E8 00 90 CD |  if_b	jmp	#LR__3684
271b8     00 B2 0E F2 | 	cmp	local07, #0 wz
271bc     54 7B 02 56 |  if_ne	mov	result1, local02
271c0     DC 00 90 5D |  if_ne	jmp	#LR__3684
271c4                 | LR__3674
271c4     02 AA 46 F5 | 	or	local03, #2
271c8     00 92 06 F6 | 	mov	arg01, #0
271cc     00 94 06 F6 | 	mov	arg02, #0
271d0     57 97 02 F6 | 	mov	arg03, local05
271d4     55 99 02 F6 | 	mov	arg04, local03
271d8     58 31 B0 FD | 	call	#__system__pack_0698
271dc     C0 00 90 FD | 	jmp	#LR__3684
271e0                 | LR__3675
271e0     00 AE 0E F2 | 	cmp	local05, #0 wz
271e4     00 AC 0E A2 |  if_e	cmp	local04, #0 wz
271e8     00 F8 3F AF 
271ec     00 7A 06 A6 |  if_e	mov	result1, ##2146435072
271f0     AC 00 90 AD |  if_e	jmp	#LR__3684
271f4     00 B2 0E F2 | 	cmp	local07, #0 wz
271f8     54 7B 02 56 |  if_ne	mov	result1, local02
271fc     A0 00 90 5D |  if_ne	jmp	#LR__3684
27200     5A 97 02 F6 | 	mov	arg03, local08
27204     55 99 02 F6 | 	mov	arg04, local03
27208     02 98 46 F5 | 	or	arg04, #2
2720c     00 92 06 F6 | 	mov	arg01, #0
27210     00 94 06 F6 | 	mov	arg02, #0
27214     1C 31 B0 FD | 	call	#__system__pack_0698
27218     84 00 90 FD | 	jmp	#LR__3684
2721c                 | LR__3676
2721c     00 AC 0E F2 | 	cmp	local04, #0 wz
27220     20 00 90 AD |  if_e	jmp	#LR__3679
27224     01 AC 66 F0 | 	shl	local04, #1
27228     D7 0A 48 FB | 	callpa	#(@LR__3678-@LR__3677)>>2,fcache_load_ptr_
2722c                 | LR__3677
2722c     00 40 00 FF 
27230     00 AC 16 F2 | 	cmp	local04, ##8388608 wc
27234     01 AE 86 C1 |  if_b	sub	local05, #1
27238     01 AC 66 C0 |  if_b	shl	local04, #1
2723c     EC FF 9F CD |  if_b	jmp	#LR__3677
27240                 | LR__3678
27240     D0 FE 9F FD | 	jmp	#LR__3670
27244                 | LR__3679
27244     08 AA 46 F5 | 	or	local03, #8
27248     00 92 06 F6 | 	mov	arg01, #0
2724c     00 94 06 F6 | 	mov	arg02, #0
27250     00 96 06 F6 | 	mov	arg03, #0
27254     55 99 02 F6 | 	mov	arg04, local03
27258     D8 30 B0 FD | 	call	#__system__pack_0698
2725c     40 00 90 FD | 	jmp	#LR__3684
27260                 | LR__3680
27260     00 B2 0E F2 | 	cmp	local07, #0 wz
27264     20 00 90 AD |  if_e	jmp	#LR__3683
27268     01 B2 66 F0 | 	shl	local07, #1
2726c     D7 0A 48 FB | 	callpa	#(@LR__3682-@LR__3681)>>2,fcache_load_ptr_
27270                 | LR__3681
27270     00 40 00 FF 
27274     00 B2 16 F2 | 	cmp	local07, ##8388608 wc
27278     01 B4 86 C1 |  if_b	sub	local08, #1
2727c     01 B2 66 C0 |  if_b	shl	local07, #1
27280     EC FF 9F CD |  if_b	jmp	#LR__3681
27284                 | LR__3682
27284     98 FE 9F FD | 	jmp	#LR__3671
27288                 | LR__3683
27288     08 AA 46 F5 | 	or	local03, #8
2728c     00 92 06 F6 | 	mov	arg01, #0
27290     00 94 06 F6 | 	mov	arg02, #0
27294     00 96 06 F6 | 	mov	arg03, #0
27298     55 99 02 F6 | 	mov	arg04, local03
2729c     94 30 B0 FD | 	call	#__system__pack_0698
272a0                 | LR__3684
272a0     E7 F0 03 F6 | 	mov	ptra, fp
272a4     F2 00 A0 FD | 	call	#popregs_
272a8                 | __system___float_mul_ret
272a8     2D 00 64 FD | 	ret
272ac                 | 
272ac                 | __system___float_div
272ac     0E CA 05 F6 | 	mov	COUNT_, #14
272b0     E8 00 A0 FD | 	call	#pushregs_
272b4     49 AB 02 F6 | 	mov	local03, arg01
272b8     4A AD 02 F6 | 	mov	local04, arg02
272bc     55 AF 02 F6 | 	mov	local05, local03
272c0     57 B1 02 F6 | 	mov	local06, local05
272c4     16 B0 46 F7 | 	zerox	local06, #22
272c8     57 B3 02 F6 | 	mov	local07, local05
272cc     01 B2 66 F0 | 	shl	local07, #1
272d0     18 B2 46 F0 | 	shr	local07, #24
272d4     1F AE 46 F0 | 	shr	local05, #31
272d8     56 7B 02 F6 | 	mov	result1, local04
272dc     3D B5 02 F6 | 	mov	local08, result1
272e0     5A B7 02 F6 | 	mov	local09, local08
272e4     16 B6 46 F7 | 	zerox	local09, #22
272e8     5A B9 02 F6 | 	mov	local10, local08
272ec     01 B8 66 F0 | 	shl	local10, #1
272f0     18 B8 46 F0 | 	shr	local10, #24
272f4     1F B4 46 F0 | 	shr	local08, #31
272f8     5A AF 62 F5 | 	xor	local05, local08
272fc     FF B2 0E F2 | 	cmp	local07, #255 wz
27300     D4 00 90 AD |  if_e	jmp	#LR__3695
27304     FF B8 0E F2 | 	cmp	local10, #255 wz
27308     04 01 90 AD |  if_e	jmp	#LR__3696
2730c     00 B2 0E F2 | 	cmp	local07, #0 wz
27310     24 01 90 AD |  if_e	jmp	#LR__3697
27314     17 B0 26 F4 | 	bith	local06, #23
27318                 | LR__3690
27318     00 B8 0E F2 | 	cmp	local10, #0 wz
2731c     70 01 90 AD |  if_e	jmp	#LR__3701
27320     17 B6 26 F4 | 	bith	local09, #23
27324                 | LR__3691
27324     5C B3 82 F1 | 	sub	local07, local10
27328     59 BB 02 F6 | 	mov	local11, local07
2732c     58 93 02 F6 | 	mov	arg01, local06
27330     02 92 46 F0 | 	shr	arg01, #2
27334     1E B0 66 F0 | 	shl	local06, #30
27338     58 95 02 F6 | 	mov	arg02, local06
2733c     5B 97 02 F6 | 	mov	arg03, local09
27340     28 92 62 FD | 	setq	arg01
27344     4B 95 12 FD | 	qdiv	arg02, arg03
27348     00 BC 06 F6 | 	mov	local12, #0
2734c     18 A6 62 FD | 	getqx	local01
27350     19 7C 62 FD | 	getqy	result2
27354     3E A9 02 F6 | 	mov	local02, result2
27358     53 BF 02 F6 | 	mov	local13, local01
2735c     00 A8 4E F2 | 	cmps	local02, #0 wz
27360     5F C1 02 F6 | 	mov	local14, local13
27364     19 C0 66 F0 | 	shl	local14, #25
27368     01 BC 06 56 |  if_ne	mov	local12, #1
2736c     5E C1 42 F5 | 	or	local14, local12
27370     07 BE 46 F0 | 	shr	local13, #7
27374     00 80 00 FF 
27378     00 BE 16 F2 | 	cmp	local13, ##16777216 wc
2737c     1C 00 90 CD |  if_b	jmp	#LR__3692
27380     01 BA 06 F1 | 	add	local11, #1
27384     01 C0 46 F0 | 	shr	local14, #1
27388     5F BD 02 F6 | 	mov	local12, local13
2738c     1F BC 66 F0 | 	shl	local12, #31
27390     5E C1 42 F5 | 	or	local14, local12
27394     01 BE 46 F0 | 	shr	local13, #1
27398     24 00 90 FD | 	jmp	#LR__3694
2739c                 | LR__3692
2739c     00 40 00 FF 
273a0     00 BE 16 F2 | 	cmp	local13, ##8388608 wc
273a4     18 00 90 3D |  if_ae	jmp	#LR__3693
273a8     01 BA 86 F1 | 	sub	local11, #1
273ac     01 BE 66 F0 | 	shl	local13, #1
273b0     60 BD 02 F6 | 	mov	local12, local14
273b4     1F BC 46 F0 | 	shr	local12, #31
273b8     5E BF 42 F5 | 	or	local13, local12
273bc     01 C0 66 F0 | 	shl	local14, #1
273c0                 | LR__3693
273c0                 | LR__3694
273c0     5F 93 02 F6 | 	mov	arg01, local13
273c4     60 95 02 F6 | 	mov	arg02, local14
273c8     5D 97 02 F6 | 	mov	arg03, local11
273cc     57 99 02 F6 | 	mov	arg04, local05
273d0     60 2F B0 FD | 	call	#__system__pack_0698
273d4     F8 00 90 FD | 	jmp	#LR__3705
273d8                 | LR__3695
273d8     00 B0 0E F2 | 	cmp	local06, #0 wz
273dc     55 7B 02 56 |  if_ne	mov	result1, local03
273e0     EC 00 90 5D |  if_ne	jmp	#LR__3705
273e4     FF B8 0E F2 | 	cmp	local10, #255 wz
273e8     00 F8 3F AF 
273ec     00 7A 06 A6 |  if_e	mov	result1, ##2146435072
273f0     DC 00 90 AD |  if_e	jmp	#LR__3705
273f4     02 AE 46 F5 | 	or	local05, #2
273f8     00 92 06 F6 | 	mov	arg01, #0
273fc     00 94 06 F6 | 	mov	arg02, #0
27400     59 97 02 F6 | 	mov	arg03, local07
27404     57 99 02 F6 | 	mov	arg04, local05
27408     28 2F B0 FD | 	call	#__system__pack_0698
2740c     C0 00 90 FD | 	jmp	#LR__3705
27410                 | LR__3696
27410     00 B6 0E F2 | 	cmp	local09, #0 wz
27414     56 7B 02 56 |  if_ne	mov	result1, local04
27418     B4 00 90 5D |  if_ne	jmp	#LR__3705
2741c     57 99 02 F6 | 	mov	arg04, local05
27420     08 98 46 F5 | 	or	arg04, #8
27424     00 92 06 F6 | 	mov	arg01, #0
27428     00 94 06 F6 | 	mov	arg02, #0
2742c     00 96 06 F6 | 	mov	arg03, #0
27430     00 2F B0 FD | 	call	#__system__pack_0698
27434     98 00 90 FD | 	jmp	#LR__3705
27438                 | LR__3697
27438     00 B0 0E F2 | 	cmp	local06, #0 wz
2743c     20 00 90 AD |  if_e	jmp	#LR__3700
27440     01 B0 66 F0 | 	shl	local06, #1
27444     D7 0A 48 FB | 	callpa	#(@LR__3699-@LR__3698)>>2,fcache_load_ptr_
27448                 | LR__3698
27448     00 40 00 FF 
2744c     00 B0 16 F2 | 	cmp	local06, ##8388608 wc
27450     01 B2 86 C1 |  if_b	sub	local07, #1
27454     01 B0 66 C0 |  if_b	shl	local06, #1
27458     EC FF 9F CD |  if_b	jmp	#LR__3698
2745c                 | LR__3699
2745c     B8 FE 9F FD | 	jmp	#LR__3690
27460                 | LR__3700
27460     00 B8 0E F2 | 	cmp	local10, #0 wz
27464     00 B6 0E A2 |  if_e	cmp	local09, #0 wz
27468     00 F8 3F AF 
2746c     00 7A 06 A6 |  if_e	mov	result1, ##2146435072
27470     5C 00 90 AD |  if_e	jmp	#LR__3705
27474     57 99 02 F6 | 	mov	arg04, local05
27478     08 98 46 F5 | 	or	arg04, #8
2747c     00 92 06 F6 | 	mov	arg01, #0
27480     00 94 06 F6 | 	mov	arg02, #0
27484     00 96 06 F6 | 	mov	arg03, #0
27488     A8 2E B0 FD | 	call	#__system__pack_0698
2748c     40 00 90 FD | 	jmp	#LR__3705
27490                 | LR__3701
27490     00 B6 0E F2 | 	cmp	local09, #0 wz
27494     20 00 90 AD |  if_e	jmp	#LR__3704
27498     01 B6 66 F0 | 	shl	local09, #1
2749c     D7 0A 48 FB | 	callpa	#(@LR__3703-@LR__3702)>>2,fcache_load_ptr_
274a0                 | LR__3702
274a0     00 40 00 FF 
274a4     00 B6 16 F2 | 	cmp	local09, ##8388608 wc
274a8     01 B8 86 C1 |  if_b	sub	local10, #1
274ac     01 B6 66 C0 |  if_b	shl	local09, #1
274b0     EC FF 9F CD |  if_b	jmp	#LR__3702
274b4                 | LR__3703
274b4     6C FE 9F FD | 	jmp	#LR__3691
274b8                 | LR__3704
274b8     02 AE 46 F5 | 	or	local05, #2
274bc     00 92 06 F6 | 	mov	arg01, #0
274c0     00 94 06 F6 | 	mov	arg02, #0
274c4     00 96 06 F6 | 	mov	arg03, #0
274c8     57 99 02 F6 | 	mov	arg04, local05
274cc     64 2E B0 FD | 	call	#__system__pack_0698
274d0                 | LR__3705
274d0     E7 F0 03 F6 | 	mov	ptra, fp
274d4     F2 00 A0 FD | 	call	#popregs_
274d8                 | __system___float_div_ret
274d8     2D 00 64 FD | 	ret
274dc                 | 
274dc                 | __system___float_cmp
274dc     00 C0 3F FF 
274e0     01 92 56 F2 | 	cmps	arg01, ##2139095041 wc
274e4     00 C0 3F CF 
274e8     01 94 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
274ec     4B 7B 02 36 |  if_ae	mov	result1, arg03
274f0     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
274f4     00 C0 7F FF 
274f8     01 92 16 F2 | 	cmp	arg01, ##-8388607 wc
274fc     00 C0 7F CF 
27500     01 92 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
27504     4B 7B 02 36 |  if_ae	mov	result1, arg03
27508     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
2750c     00 92 56 F2 | 	cmps	arg01, #0 wc
27510     2C 00 90 3D |  if_ae	jmp	#LR__3710
27514     00 94 56 F2 | 	cmps	arg02, #0 wc
27518     4A 7B 02 C6 |  if_b	mov	result1, arg02
2751c     49 7B 82 C1 |  if_b	sub	result1, arg01
27520     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
27524     00 94 0E F2 | 	cmp	arg02, #0 wz
27528     00 00 40 AF 
2752c     00 92 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
27530     00 7A 06 A6 |  if_e	mov	result1, #0
27534     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
27538     01 7A 66 F6 | 	neg	result1, #1
2753c     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
27540                 | LR__3710
27540     00 94 56 F2 | 	cmps	arg02, #0 wc
27544     1C 00 90 3D |  if_ae	jmp	#LR__3711
27548     00 92 0E F2 | 	cmp	arg01, #0 wz
2754c     00 00 40 AF 
27550     00 94 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
27554     00 7A 06 A6 |  if_e	mov	result1, #0
27558     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
2755c     01 7A 06 F6 | 	mov	result1, #1
27560     08 00 90 FD | 	jmp	#__system___float_cmp_ret
27564                 | LR__3711
27564     4A 93 82 F1 | 	sub	arg01, arg02
27568     49 7B 02 F6 | 	mov	result1, arg01
2756c                 | __system___float_cmp_ret
2756c     2D 00 64 FD | 	ret
27570                 | 
27570                 | __system___float_tointeger
27570     02 CA 05 F6 | 	mov	COUNT_, #2
27574     E8 00 A0 FD | 	call	#pushregs_
27578     5C 00 B0 FD | 	call	#__system___float_Unpack
2757c     3D A7 02 F6 | 	mov	local01, result1
27580     1F 7C 56 F2 | 	cmps	result2, #31 wc
27584     00 A6 0E 32 |  if_ae	cmp	local01, #0 wz
27588     1F A8 C6 19 |  if_a	decod	local02, #31
2758c     1E A8 CE 29 |  if_nc_and_z	bmask	local02, #30
27590     54 7F 02 36 |  if_ae	mov	result3, local02
27594     30 00 90 3D |  if_ae	jmp	#LR__3721
27598     FF FF 7F FF 
2759c     FF 7D 56 F2 | 	cmps	result2, ##-1 wc
275a0     00 7E 06 C6 |  if_b	mov	result3, #0
275a4     20 00 90 CD |  if_b	jmp	#LR__3720
275a8     02 7E 66 F0 | 	shl	result3, #2
275ac     1E A8 06 F6 | 	mov	local02, #30
275b0     3E A9 82 F1 | 	sub	local02, result2
275b4     54 7F 42 F0 | 	shr	result3, local02
275b8     4A 7F 02 F1 | 	add	result3, arg02
275bc     01 7E 46 F0 | 	shr	result3, #1
275c0     00 A6 0E F2 | 	cmp	local01, #0 wz
275c4     3F 7F 62 56 |  if_ne	neg	result3, result3
275c8                 | LR__3720
275c8                 | LR__3721
275c8     3F 7B 02 F6 | 	mov	result1, result3
275cc     E7 F0 03 F6 | 	mov	ptra, fp
275d0     F2 00 A0 FD | 	call	#popregs_
275d4                 | __system___float_tointeger_ret
275d4     2D 00 64 FD | 	ret
275d8                 | 
275d8                 | __system___float_Unpack
275d8     49 81 02 F6 | 	mov	_var01, arg01
275dc     1F 80 46 F0 | 	shr	_var01, #31
275e0     49 83 02 F6 | 	mov	_var02, arg01
275e4     01 82 66 F0 | 	shl	_var02, #1
275e8     18 82 4E F0 | 	shr	_var02, #24 wz
275ec     17 93 06 F4 | 	bitl	arg01, #279
275f0     06 92 66 50 |  if_ne	shl	arg01, #6
275f4     1D 92 26 54 |  if_ne	bith	arg01, #29
275f8     1C 00 90 5D |  if_ne	jmp	#LR__3730
275fc     49 85 92 F7 | 	encod	_var03, arg01 wc
27600     01 84 06 C1 |  if_b	add	_var03, #1
27604     17 84 86 F1 | 	sub	_var03, #23
27608     42 83 02 F6 | 	mov	_var02, _var03
2760c     07 7C 06 F6 | 	mov	result2, #7
27610     42 7D 82 F1 | 	sub	result2, _var03
27614     3E 93 62 F0 | 	shl	arg01, result2
27618                 | LR__3730
27618     7F 82 86 F1 | 	sub	_var02, #127
2761c     49 7F 02 F6 | 	mov	result3, arg01
27620     40 7B 02 F6 | 	mov	result1, _var01
27624     41 7D 02 F6 | 	mov	result2, _var02
27628                 | __system___float_Unpack_ret
27628     2D 00 64 FD | 	ret
2762c                 | 
2762c                 | __system___float_Pack
2762c     00 80 06 F6 | 	mov	_var01, #0
27630     00 96 0E F2 | 	cmp	arg03, #0 wz
27634     8C 00 90 AD |  if_e	jmp	#LR__3741
27638     4B 83 92 F7 | 	encod	_var02, arg03 wc
2763c     01 82 06 C1 |  if_b	add	_var02, #1
27640     21 80 06 F6 | 	mov	_var01, #33
27644     41 81 82 F1 | 	sub	_var01, _var02
27648     40 97 62 F0 | 	shl	arg03, _var01
2764c     03 82 06 F6 | 	mov	_var02, #3
27650     40 83 82 F1 | 	sub	_var02, _var01
27654     41 95 02 F1 | 	add	arg02, _var02
27658     4A 85 02 F6 | 	mov	_var03, arg02
2765c     00 97 06 F1 | 	add	arg03, #256
27660     4B 83 02 F6 | 	mov	_var02, arg03
27664     FF 82 2E F5 | 	andn	_var02, #255 wz
27668     01 84 06 A1 |  if_e	add	_var03, #1
2766c     7F 84 06 F1 | 	add	_var03, #127
27670     FF FF 7F FF 
27674     E9 85 46 F3 | 	fges	_var03, ##-23
27678     FF 84 66 F3 | 	fles	_var03, #255
2767c     01 84 56 F2 | 	cmps	_var03, #1 wc
27680     1C 00 90 3D |  if_ae	jmp	#LR__3740
27684     01 96 46 F0 | 	shr	arg03, #1
27688     1F 82 C6 F9 | 	decod	_var02, #31
2768c     4B 83 02 F1 | 	add	_var02, arg03
27690     42 85 62 F6 | 	neg	_var03, _var03
27694     42 83 42 F0 | 	shr	_var02, _var03
27698     41 97 02 F6 | 	mov	arg03, _var02
2769c     00 84 06 F6 | 	mov	_var03, #0
276a0                 | LR__3740
276a0     49 7B 02 F6 | 	mov	result1, arg01
276a4     1F 7A 66 F0 | 	shl	result1, #31
276a8     42 83 02 F6 | 	mov	_var02, _var03
276ac     17 82 66 F0 | 	shl	_var02, #23
276b0     41 7B 42 F5 | 	or	result1, _var02
276b4     4B 87 02 F6 | 	mov	_var04, arg03
276b8     09 86 46 F0 | 	shr	_var04, #9
276bc     43 7B 42 F5 | 	or	result1, _var04
276c0     04 00 90 FD | 	jmp	#__system___float_Pack_ret
276c4                 | LR__3741
276c4     40 7B 02 F6 | 	mov	result1, _var01
276c8                 | __system___float_Pack_ret
276c8     2D 00 64 FD | 	ret
276cc                 | 
276cc                 | __system___basic_print_float
276cc     05 CA 05 F6 | 	mov	COUNT_, #5
276d0     E8 00 A0 FD | 	call	#pushregs_
276d4     49 A7 02 F6 | 	mov	local01, arg01
276d8     4A A9 02 F6 | 	mov	local02, arg02
276dc     4B AB 0A F6 | 	mov	local03, arg03 wz
276e0     4C AD 02 F6 | 	mov	local04, arg04
276e4     14 00 90 5D |  if_ne	jmp	#LR__3750
276e8     23 AC 0E F2 | 	cmp	local04, #35 wz
276ec     80 02 10 AF 
276f0     00 AE 06 A6 |  if_e	mov	local05, ##537198592
276f4     1D AE C6 59 |  if_ne	decod	local05, #29
276f8     57 AB 02 F6 | 	mov	local03, local05
276fc                 | LR__3750
276fc     53 93 02 F6 | 	mov	arg01, local01
27700     A0 28 B0 FD | 	call	#__system___gettxfunc
27704     3D AF 0A F6 | 	mov	local05, result1 wz
27708     00 7A 06 A6 |  if_e	mov	result1, #0
2770c     57 93 02 56 |  if_ne	mov	arg01, local05
27710     55 95 02 56 |  if_ne	mov	arg02, local03
27714     54 97 02 56 |  if_ne	mov	arg03, local02
27718     56 99 02 56 |  if_ne	mov	arg04, local04
2771c     00 E4 BF 5D |  if_ne	call	#__system___fmtfloat
27720     E7 F0 03 F6 | 	mov	ptra, fp
27724     F2 00 A0 FD | 	call	#popregs_
27728                 | __system___basic_print_float_ret
27728     2D 00 64 FD | 	ret
2772c                 | 
2772c                 | __system____builtin_atoi
2772c     07 CA 05 F6 | 	mov	COUNT_, #7
27730     E8 00 A0 FD | 	call	#pushregs_
27734                 | __system____builtin_atoi_enter
27734     49 A7 02 F6 | 	mov	local01, arg01
27738     4A A9 02 F6 | 	mov	local02, arg02
2773c     00 AA 06 F6 | 	mov	local03, #0
27740     00 AC 06 F6 | 	mov	local04, #0
27744     00 AE 06 F6 | 	mov	local05, #0
27748     D7 08 48 FB | 	callpa	#(@LR__3761-@LR__3760)>>2,fcache_load_ptr_
2774c                 | LR__3760
2774c     53 B1 C2 FA | 	rdbyte	local06, local01
27750     20 B0 0E F2 | 	cmp	local06, #32 wz
27754     01 A6 06 A1 |  if_e	add	local01, #1
27758     F0 FF 9F AD |  if_e	jmp	#LR__3760
2775c                 | LR__3761
2775c     53 B3 C2 FA | 	rdbyte	local07, local01
27760     D7 12 48 FB | 	callpa	#(@LR__3763-@LR__3762)>>2,fcache_load_ptr_
27764                 | LR__3762
27764     2D B2 0E F2 | 	cmp	local07, #45 wz
27768     2B B2 0E 52 |  if_ne	cmp	local07, #43 wz
2776c     18 00 90 5D |  if_ne	jmp	#LR__3764
27770     01 A6 06 F1 | 	add	local01, #1
27774     2D B2 0E F2 | 	cmp	local07, #45 wz
27778     01 B0 06 A6 |  if_e	mov	local06, #1
2777c     58 AF C2 A2 |  if_e	subr	local05, local06
27780     53 B3 C2 FA | 	rdbyte	local07, local01
27784     DC FF 9F FD | 	jmp	#LR__3762
27788                 | LR__3763
27788                 | LR__3764
27788     00 A8 0E F2 | 	cmp	local02, #0 wz
2778c     1C 00 90 5D |  if_ne	jmp	#LR__3766
27790     24 B2 0E F2 | 	cmp	local07, #36 wz
27794     10 A8 06 A6 |  if_e	mov	local02, #16
27798     01 A6 06 A1 |  if_e	add	local01, #1
2779c     0C 00 90 AD |  if_e	jmp	#LR__3765
277a0     25 B2 0E F2 | 	cmp	local07, #37 wz
277a4     02 A8 06 A6 |  if_e	mov	local02, #2
277a8     01 A6 06 A1 |  if_e	add	local01, #1
277ac                 | LR__3765
277ac                 | LR__3766
277ac     D7 48 48 FB | 	callpa	#(@LR__3774-@LR__3767)>>2,fcache_load_ptr_
277b0                 | LR__3767
277b0                 | LR__3768
277b0     53 B3 C2 FA | 	rdbyte	local07, local01
277b4     5F B2 0E F2 | 	cmp	local07, #95 wz
277b8     01 A6 06 F1 | 	add	local01, #1
277bc     F0 FF 9F AD |  if_e	jmp	#LR__3768
277c0     30 B2 0E F2 | 	cmp	local07, #48 wz
277c4     26 B2 0E 52 |  if_ne	cmp	local07, #38 wz
277c8     00 AC 06 A6 |  if_e	mov	local04, #0
277cc     60 00 90 AD |  if_e	jmp	#LR__3773
277d0     31 B2 56 F2 | 	cmps	local07, #49 wc
277d4     18 00 90 CD |  if_b	jmp	#LR__3769
277d8     3A B2 56 F2 | 	cmps	local07, #58 wc
277dc     59 AD 02 C6 |  if_b	mov	local04, local07
277e0     30 AC 86 C1 |  if_b	sub	local04, #48
277e4     00 A8 0E C2 |  if_b	cmp	local02, #0 wz
277e8     0A A8 06 86 |  if_c_and_z	mov	local02, #10
277ec     40 00 90 CD |  if_b	jmp	#LR__3772
277f0                 | LR__3769
277f0     0B A8 56 F2 | 	cmps	local02, #11 wc
277f4     61 B2 56 32 |  if_ae	cmps	local07, #97 wc
277f8     14 00 90 CD |  if_b	jmp	#LR__3770
277fc     67 B2 56 F2 | 	cmps	local07, #103 wc
27800     61 B2 86 C1 |  if_b	sub	local07, #97
27804     0A AC 06 C6 |  if_b	mov	local04, #10
27808     59 AD 02 C1 |  if_b	add	local04, local07
2780c     20 00 90 CD |  if_b	jmp	#LR__3771
27810                 | LR__3770
27810     0B A8 56 F2 | 	cmps	local02, #11 wc
27814     41 B2 56 32 |  if_ae	cmps	local07, #65 wc
27818     24 00 90 CD |  if_b	jmp	#LR__3775
2781c     47 B2 56 F2 | 	cmps	local07, #71 wc
27820     41 B2 86 C1 |  if_b	sub	local07, #65
27824     0A AC 06 C6 |  if_b	mov	local04, #10
27828     59 AD 02 C1 |  if_b	add	local04, local07
2782c     10 00 90 3D |  if_ae	jmp	#LR__3775
27830                 | LR__3771
27830                 | LR__3772
27830                 | LR__3773
27830     55 A9 02 FD | 	qmul	local02, local03
27834     18 AA 62 FD | 	getqx	local03
27838     56 AB 02 F1 | 	add	local03, local04
2783c     70 FF 9F FD | 	jmp	#LR__3767
27840                 | LR__3774
27840                 | LR__3775
27840     00 A8 0E F2 | 	cmp	local02, #0 wz
27844     64 00 90 5D |  if_ne	jmp	#LR__3781
27848     78 B2 0E F2 | 	cmp	local07, #120 wz
2784c     68 B2 0E 52 |  if_ne	cmp	local07, #104 wz
27850     58 B2 0E 52 |  if_ne	cmp	local07, #88 wz
27854     48 B2 0E 52 |  if_ne	cmp	local07, #72 wz
27858     14 00 90 5D |  if_ne	jmp	#LR__3776
2785c     53 93 02 F6 | 	mov	arg01, local01
27860     10 94 06 F6 | 	mov	arg02, #16
27864     C4 FE BF FD | 	call	#__system____builtin_atoi
27868     3D AB 02 F6 | 	mov	local03, result1
2786c     3C 00 90 FD | 	jmp	#LR__3780
27870                 | LR__3776
27870     62 B2 0E F2 | 	cmp	local07, #98 wz
27874     42 B2 0E 52 |  if_ne	cmp	local07, #66 wz
27878     14 00 90 5D |  if_ne	jmp	#LR__3777
2787c     53 93 02 F6 | 	mov	arg01, local01
27880     02 94 06 F6 | 	mov	arg02, #2
27884     A4 FE BF FD | 	call	#__system____builtin_atoi
27888     3D AB 02 F6 | 	mov	local03, result1
2788c     1C 00 90 FD | 	jmp	#LR__3779
27890                 | LR__3777
27890     6F B2 0E F2 | 	cmp	local07, #111 wz
27894     4F B2 0E 52 |  if_ne	cmp	local07, #79 wz
27898     10 00 90 5D |  if_ne	jmp	#LR__3778
2789c     53 93 02 F6 | 	mov	arg01, local01
278a0     08 94 06 F6 | 	mov	arg02, #8
278a4     84 FE BF FD | 	call	#__system____builtin_atoi
278a8     3D AB 02 F6 | 	mov	local03, result1
278ac                 | LR__3778
278ac                 | LR__3779
278ac                 | LR__3780
278ac                 | LR__3781
278ac     00 AE 0E F2 | 	cmp	local05, #0 wz
278b0     55 AB 62 56 |  if_ne	neg	local03, local03
278b4     55 7B 02 F6 | 	mov	result1, local03
278b8     E7 F0 03 F6 | 	mov	ptra, fp
278bc     F2 00 A0 FD | 	call	#popregs_
278c0                 | __system____builtin_atoi_ret
278c0     2D 00 64 FD | 	ret
278c4                 | 
278c4                 | __system____builtin_atof
278c4     07 CA 05 F6 | 	mov	COUNT_, #7
278c8     E8 00 A0 FD | 	call	#pushregs_
278cc     49 A7 02 F6 | 	mov	local01, arg01
278d0     00 A8 06 F6 | 	mov	local02, #0
278d4     00 AA 06 F6 | 	mov	local03, #0
278d8     00 AC 06 F6 | 	mov	local04, #0
278dc     00 AE 06 F6 | 	mov	local05, #0
278e0     D7 08 48 FB | 	callpa	#(@LR__3791-@LR__3790)>>2,fcache_load_ptr_
278e4                 | LR__3790
278e4     53 97 C2 FA | 	rdbyte	arg03, local01
278e8     20 96 0E F2 | 	cmp	arg03, #32 wz
278ec     01 A6 06 A1 |  if_e	add	local01, #1
278f0     F0 FF 9F AD |  if_e	jmp	#LR__3790
278f4                 | LR__3791
278f4     53 B1 C2 FA | 	rdbyte	local06, local01
278f8                 | LR__3792
278f8     2B B0 0E F2 | 	cmp	local06, #43 wz
278fc     2D B0 0E 52 |  if_ne	cmp	local06, #45 wz
27900     14 00 90 5D |  if_ne	jmp	#LR__3793
27904     2D B0 0E F2 | 	cmp	local06, #45 wz
27908     1F AC E6 A4 |  if_e	bitnot	local04, #31
2790c     01 A6 06 F1 | 	add	local01, #1
27910     53 B1 C2 FA | 	rdbyte	local06, local01
27914     E0 FF 9F FD | 	jmp	#LR__3792
27918                 | LR__3793
27918                 | LR__3794
27918     D7 08 48 FB | 	callpa	#(@LR__3796-@LR__3795)>>2,fcache_load_ptr_
2791c                 | LR__3795
2791c     53 B1 C2 FA | 	rdbyte	local06, local01
27920     5F B0 0E F2 | 	cmp	local06, #95 wz
27924     01 A6 06 F1 | 	add	local01, #1
27928     F0 FF 9F AD |  if_e	jmp	#LR__3795
2792c                 | LR__3796
2792c     00 B0 0E F2 | 	cmp	local06, #0 wz
27930     5C 00 90 AD |  if_e	jmp	#LR__3798
27934     30 B0 56 F2 | 	cmps	local06, #48 wc
27938     44 00 90 CD |  if_b	jmp	#LR__3797
2793c     3A B0 56 F2 | 	cmps	local06, #58 wc
27940     3C 00 90 3D |  if_ae	jmp	#LR__3797
27944     54 93 02 F6 | 	mov	arg01, local02
27948     00 90 20 FF 
2794c     00 94 06 F6 | 	mov	arg02, ##1092616192
27950     54 F7 BF FD | 	call	#__system___float_mul
27954     3D A9 02 F6 | 	mov	local02, result1
27958     30 B0 86 F1 | 	sub	local06, #48
2795c     58 93 02 F6 | 	mov	arg01, local06
27960     40 F3 BF FD | 	call	#__system___float_fromuns
27964     3D 95 02 F6 | 	mov	arg02, result1
27968     54 93 02 F6 | 	mov	arg01, local02
2796c     68 F3 BF FD | 	call	#__system___float_add
27970     3D A9 02 F6 | 	mov	local02, result1
27974     00 AE 0E F2 | 	cmp	local05, #0 wz
27978     01 AA 86 51 |  if_ne	sub	local03, #1
2797c     98 FF 9F FD | 	jmp	#LR__3794
27980                 | LR__3797
27980     2E B0 0E F2 | 	cmp	local06, #46 wz
27984     00 AE 0E A2 |  if_e	cmp	local05, #0 wz
27988     01 AE 06 A6 |  if_e	mov	local05, #1
2798c     88 FF 9F AD |  if_e	jmp	#LR__3794
27990                 | LR__3798
27990     45 B0 0E F2 | 	cmp	local06, #69 wz
27994     65 B0 0E 52 |  if_ne	cmp	local06, #101 wz
27998     18 00 90 5D |  if_ne	jmp	#LR__3799
2799c     53 93 02 F6 | 	mov	arg01, local01
279a0     00 94 06 F6 | 	mov	arg02, #0
279a4     84 FD BF FD | 	call	#__system____builtin_atoi
279a8     55 7B 02 F1 | 	add	result1, local03
279ac     3D B3 02 F6 | 	mov	local07, result1
279b0     04 00 90 FD | 	jmp	#LR__3800
279b4                 | LR__3799
279b4     55 B3 02 F6 | 	mov	local07, local03
279b8                 | LR__3800
279b8     59 97 02 F6 | 	mov	arg03, local07
279bc     54 93 02 F6 | 	mov	arg01, local02
279c0     00 90 20 FF 
279c4     00 94 06 F6 | 	mov	arg02, ##1092616192
279c8     F4 06 B0 FD | 	call	#__system___float_pow_n
279cc     56 7B 62 F5 | 	xor	result1, local04
279d0     E7 F0 03 F6 | 	mov	ptra, fp
279d4     F2 00 A0 FD | 	call	#popregs_
279d8                 | __system____builtin_atof_ret
279d8     2D 00 64 FD | 	ret
279dc                 | 
279dc                 | __system____builtin_ilogb
279dc     F8 FB BF FD | 	call	#__system___float_Unpack
279e0     00 7E 0E F2 | 	cmp	result3, #0 wz
279e4     00 00 40 AF 
279e8     01 7A 06 A6 |  if_e	mov	result1, ##-2147483647
279ec     24 00 90 AD |  if_e	jmp	#LR__3811
279f0     80 7C 0E F2 | 	cmp	result2, #128 wz
279f4     18 00 90 5D |  if_ne	jmp	#LR__3810
279f8     00 00 10 FF 
279fc     00 7E 0E F2 | 	cmp	result3, ##536870912 wz
27a00     1E 7A CE A9 |  if_e	bmask	result1, #30
27a04     0C 00 90 AD |  if_e	jmp	#LR__3811
27a08     1F 7A C6 F9 | 	decod	result1, #31
27a0c     04 00 90 FD | 	jmp	#LR__3811
27a10                 | LR__3810
27a10     3E 7B 02 F6 | 	mov	result1, result2
27a14                 | LR__3811
27a14                 | __system____builtin_ilogb_ret
27a14     2D 00 64 FD | 	ret
27a18                 | 
27a18                 | __system____builtin_sinf
27a18     03 CA 05 F6 | 	mov	COUNT_, #3
27a1c     E8 00 A0 FD | 	call	#pushregs_
27a20     49 A7 02 F6 | 	mov	local01, arg01
27a24     87 64 20 FF 
27a28     DB 95 06 F6 | 	mov	arg02, ##1086918619
27a2c     7C F8 BF FD | 	call	#__system___float_div
27a30     3D 93 02 F6 | 	mov	arg01, result1
27a34     00 94 06 F6 | 	mov	arg02, #0
27a38     34 FB BF FD | 	call	#__system___float_tointeger
27a3c     3D 97 0A F6 | 	mov	arg03, result1 wz
27a40     44 00 90 AD |  if_e	jmp	#LR__3820
27a44     4B 93 52 F6 | 	abs	arg01, arg03 wc
27a48     1F A8 C6 C9 |  if_b	decod	local02, #31
27a4c     00 A8 06 36 |  if_ae	mov	local02, #0
27a50     50 F2 BF FD | 	call	#__system___float_fromuns
27a54     54 7B 62 F5 | 	xor	result1, local02
27a58     3D 93 02 F6 | 	mov	arg01, result1
27a5c     1E 94 C6 F9 | 	decod	arg02, #30
27a60     44 F6 BF FD | 	call	#__system___float_mul
27a64     3D 93 02 F6 | 	mov	arg01, result1
27a68     87 24 20 FF 
27a6c     DB 95 06 F6 | 	mov	arg02, ##1078530011
27a70     34 F6 BF FD | 	call	#__system___float_mul
27a74     3D 95 02 F6 | 	mov	arg02, result1
27a78     53 93 02 F6 | 	mov	arg01, local01
27a7c     1F 94 E6 F4 | 	bitnot	arg02, #31
27a80     54 F2 BF FD | 	call	#__system___float_add
27a84     3D A7 02 F6 | 	mov	local01, result1
27a88                 | LR__3820
27a88     53 93 02 F6 | 	mov	arg01, local01
27a8c     66 E6 1E FF 
27a90     CD 94 06 F6 | 	mov	arg02, ##1036831949
27a94     01 96 06 F6 | 	mov	arg03, #1
27a98     40 FA BF FD | 	call	#__system___float_cmp
27a9c     00 7A 56 F2 | 	cmps	result1, #0 wc
27aa0     5C 00 90 3D |  if_ae	jmp	#LR__3821
27aa4     53 93 02 F6 | 	mov	arg01, local01
27aa8     66 E6 5E FF 
27aac     CD 94 06 F6 | 	mov	arg02, ##-1110651699
27ab0     01 96 66 F6 | 	neg	arg03, #1
27ab4     24 FA BF FD | 	call	#__system___float_cmp
27ab8     01 7A 56 F2 | 	cmps	result1, #1 wc
27abc     40 00 90 CD |  if_b	jmp	#LR__3821
27ac0     53 93 02 F6 | 	mov	arg01, local01
27ac4     53 95 02 F6 | 	mov	arg02, local01
27ac8     DC F5 BF FD | 	call	#__system___float_mul
27acc     3D 93 02 F6 | 	mov	arg01, result1
27ad0     53 95 02 F6 | 	mov	arg02, local01
27ad4     D0 F5 BF FD | 	call	#__system___float_mul
27ad8     3D 93 02 F6 | 	mov	arg01, result1
27adc     00 60 20 FF 
27ae0     00 94 06 F6 | 	mov	arg02, ##1086324736
27ae4     C4 F7 BF FD | 	call	#__system___float_div
27ae8     3D 95 02 F6 | 	mov	arg02, result1
27aec     53 93 02 F6 | 	mov	arg01, local01
27af0     1F 94 E6 F4 | 	bitnot	arg02, #31
27af4     E0 F1 BF FD | 	call	#__system___float_add
27af8     3D AB 02 F6 | 	mov	local03, result1
27afc     54 00 90 FD | 	jmp	#LR__3822
27b00                 | LR__3821
27b00     53 93 02 F6 | 	mov	arg01, local01
27b04     7C 91 26 FF 
27b08     83 95 06 F6 | 	mov	arg02, ##1294137731
27b0c     98 F5 BF FD | 	call	#__system___float_mul
27b10     3D 93 02 F6 | 	mov	arg01, result1
27b14     00 94 06 F6 | 	mov	arg02, #0
27b18     54 FA BF FD | 	call	#__system___float_tointeger
27b1c     02 7A 66 F0 | 	shl	result1, #2
27b20     00 00 A0 FF 
27b24     3D 01 48 FD | 	qrotate	##1073741824, result1
27b28     19 92 62 FD | 	getqy	arg01
27b2c     49 93 52 F6 | 	abs	arg01, arg01 wc
27b30     1F A8 C6 C9 |  if_b	decod	local02, #31
27b34     00 A8 06 36 |  if_ae	mov	local02, #0
27b38     68 F1 BF FD | 	call	#__system___float_fromuns
27b3c     54 7B 62 F5 | 	xor	result1, local02
27b40     3D 93 02 F6 | 	mov	arg01, result1
27b44     00 40 27 FF 
27b48     00 94 06 F6 | 	mov	arg02, ##1317011456
27b4c     5C F7 BF FD | 	call	#__system___float_div
27b50     3D AB 02 F6 | 	mov	local03, result1
27b54                 | LR__3822
27b54     55 7B 02 F6 | 	mov	result1, local03
27b58     E7 F0 03 F6 | 	mov	ptra, fp
27b5c     F2 00 A0 FD | 	call	#popregs_
27b60                 | __system____builtin_sinf_ret
27b60     2D 00 64 FD | 	ret
27b64                 | 
27b64                 | __system____builtin_tanf
27b64     02 CA 05 F6 | 	mov	COUNT_, #2
27b68     E8 00 A0 FD | 	call	#pushregs_
27b6c     49 A7 02 F6 | 	mov	local01, arg01
27b70     A4 FE BF FD | 	call	#__system____builtin_sinf
27b74     3D A9 02 F6 | 	mov	local02, result1
27b78     53 95 02 F6 | 	mov	arg02, local01
27b7c     87 E4 1F FF 
27b80     DB 93 06 F6 | 	mov	arg01, ##1070141403
27b84     1F 94 E6 F4 | 	bitnot	arg02, #31
27b88     4C F1 BF FD | 	call	#__system___float_add
27b8c     3D 93 02 F6 | 	mov	arg01, result1
27b90     84 FE BF FD | 	call	#__system____builtin_sinf
27b94     3D 95 02 F6 | 	mov	arg02, result1
27b98     54 93 02 F6 | 	mov	arg01, local02
27b9c     0C F7 BF FD | 	call	#__system___float_div
27ba0     E7 F0 03 F6 | 	mov	ptra, fp
27ba4     F2 00 A0 FD | 	call	#popregs_
27ba8                 | __system____builtin_tanf_ret
27ba8     2D 00 64 FD | 	ret
27bac                 | 
27bac                 | __system____builtin_asinf
27bac     01 CA 05 F6 | 	mov	COUNT_, #1
27bb0     E8 00 A0 FD | 	call	#pushregs_
27bb4     49 A7 02 F6 | 	mov	local01, arg01
27bb8     53 95 02 F6 | 	mov	arg02, local01
27bbc     53 93 02 F6 | 	mov	arg01, local01
27bc0     E4 F4 BF FD | 	call	#__system___float_mul
27bc4     3D 95 02 F6 | 	mov	arg02, result1
27bc8     00 C0 1F FF 
27bcc     00 92 06 F6 | 	mov	arg01, ##1065353216
27bd0     1F 94 E6 F4 | 	bitnot	arg02, #31
27bd4     00 F1 BF FD | 	call	#__system___float_add
27bd8     3D 93 02 F6 | 	mov	arg01, result1
27bdc     F0 F3 BF FD | 	call	#__system___float_sqrt
27be0     3D 95 02 F6 | 	mov	arg02, result1
27be4     53 93 02 F6 | 	mov	arg01, local01
27be8     58 00 B0 FD | 	call	#__system____builtin_atan2f
27bec     E7 F0 03 F6 | 	mov	ptra, fp
27bf0     F2 00 A0 FD | 	call	#popregs_
27bf4                 | __system____builtin_asinf_ret
27bf4     2D 00 64 FD | 	ret
27bf8                 | 
27bf8                 | __system____builtin_acosf
27bf8     01 CA 05 F6 | 	mov	COUNT_, #1
27bfc     E8 00 A0 FD | 	call	#pushregs_
27c00     49 A7 02 F6 | 	mov	local01, arg01
27c04     53 95 02 F6 | 	mov	arg02, local01
27c08     53 93 02 F6 | 	mov	arg01, local01
27c0c     98 F4 BF FD | 	call	#__system___float_mul
27c10     3D 95 02 F6 | 	mov	arg02, result1
27c14     00 C0 1F FF 
27c18     00 92 06 F6 | 	mov	arg01, ##1065353216
27c1c     1F 94 E6 F4 | 	bitnot	arg02, #31
27c20     B4 F0 BF FD | 	call	#__system___float_add
27c24     3D 93 02 F6 | 	mov	arg01, result1
27c28     A4 F3 BF FD | 	call	#__system___float_sqrt
27c2c     3D 93 02 F6 | 	mov	arg01, result1
27c30     53 95 02 F6 | 	mov	arg02, local01
27c34     0C 00 B0 FD | 	call	#__system____builtin_atan2f
27c38     E7 F0 03 F6 | 	mov	ptra, fp
27c3c     F2 00 A0 FD | 	call	#popregs_
27c40                 | __system____builtin_acosf_ret
27c40     2D 00 64 FD | 	ret
27c44                 | 
27c44                 | __system____builtin_atan2f
27c44     04 CA 05 F6 | 	mov	COUNT_, #4
27c48     E8 00 A0 FD | 	call	#pushregs_
27c4c     49 A7 02 F6 | 	mov	local01, arg01
27c50     4A A9 02 F6 | 	mov	local02, arg02
27c54     53 93 02 F6 | 	mov	arg01, local01
27c58     00 94 06 F6 | 	mov	arg02, #0
27c5c     01 96 06 F6 | 	mov	arg03, #1
27c60     78 F8 BF FD | 	call	#__system___float_cmp
27c64     00 7A 0E F2 | 	cmp	result1, #0 wz
27c68     28 00 90 5D |  if_ne	jmp	#LR__3830
27c6c     54 93 02 F6 | 	mov	arg01, local02
27c70     00 94 06 F6 | 	mov	arg02, #0
27c74     01 96 06 F6 | 	mov	arg03, #1
27c78     60 F8 BF FD | 	call	#__system___float_cmp
27c7c     00 7A 56 F2 | 	cmps	result1, #0 wc
27c80     87 24 60 CF 
27c84     DB 7B 06 C6 |  if_b	mov	result1, ##-1068953637
27c88     DC 00 90 CD |  if_b	jmp	#LR__3831
27c8c     00 7A 06 F6 | 	mov	result1, #0
27c90     D4 00 90 FD | 	jmp	#LR__3831
27c94                 | LR__3830
27c94     54 93 02 F6 | 	mov	arg01, local02
27c98     54 95 02 F6 | 	mov	arg02, local02
27c9c     08 F4 BF FD | 	call	#__system___float_mul
27ca0     3D AB 02 F6 | 	mov	local03, result1
27ca4     53 93 02 F6 | 	mov	arg01, local01
27ca8     53 95 02 F6 | 	mov	arg02, local01
27cac     F8 F3 BF FD | 	call	#__system___float_mul
27cb0     3D 95 02 F6 | 	mov	arg02, result1
27cb4     55 93 02 F6 | 	mov	arg01, local03
27cb8     1C F0 BF FD | 	call	#__system___float_add
27cbc     3D 93 02 F6 | 	mov	arg01, result1
27cc0     0C F3 BF FD | 	call	#__system___float_sqrt
27cc4     3D AB 02 F6 | 	mov	local03, result1
27cc8     54 93 02 F6 | 	mov	arg01, local02
27ccc     55 95 02 F6 | 	mov	arg02, local03
27cd0     D8 F5 BF FD | 	call	#__system___float_div
27cd4     3D A9 02 F6 | 	mov	local02, result1
27cd8     53 93 02 F6 | 	mov	arg01, local01
27cdc     55 95 02 F6 | 	mov	arg02, local03
27ce0     C8 F5 BF FD | 	call	#__system___float_div
27ce4     3D A7 02 F6 | 	mov	local01, result1
27ce8     00 40 27 FF 
27cec     00 92 06 F6 | 	mov	arg01, ##1317011456
27cf0     54 95 02 F6 | 	mov	arg02, local02
27cf4     B0 F3 BF FD | 	call	#__system___float_mul
27cf8     3D 93 02 F6 | 	mov	arg01, result1
27cfc     00 94 06 F6 | 	mov	arg02, #0
27d00     6C F8 BF FD | 	call	#__system___float_tointeger
27d04     3D AB 02 F6 | 	mov	local03, result1
27d08     00 40 27 FF 
27d0c     00 92 06 F6 | 	mov	arg01, ##1317011456
27d10     53 95 02 F6 | 	mov	arg02, local01
27d14     90 F3 BF FD | 	call	#__system___float_mul
27d18     3D 93 02 F6 | 	mov	arg01, result1
27d1c     00 94 06 F6 | 	mov	arg02, #0
27d20     4C F8 BF FD | 	call	#__system___float_tointeger
27d24     3D AB 52 FD | 	qvector	local03, result1
27d28     87 24 20 FF 
27d2c     DB AB 06 F6 | 	mov	local03, ##1078530011
27d30     19 92 62 FD | 	getqy	arg01
27d34     01 92 C6 F0 | 	sar	arg01, #1
27d38     49 93 52 F6 | 	abs	arg01, arg01 wc
27d3c     1F AC C6 C9 |  if_b	decod	local04, #31
27d40     00 AC 06 36 |  if_ae	mov	local04, #0
27d44     5C EF BF FD | 	call	#__system___float_fromuns
27d48     56 7B 62 F5 | 	xor	result1, local04
27d4c     3D 93 02 F6 | 	mov	arg01, result1
27d50     00 40 27 FF 
27d54     00 94 06 F6 | 	mov	arg02, ##1317011456
27d58     50 F5 BF FD | 	call	#__system___float_div
27d5c     3D 95 02 F6 | 	mov	arg02, result1
27d60     55 93 02 F6 | 	mov	arg01, local03
27d64     40 F3 BF FD | 	call	#__system___float_mul
27d68                 | LR__3831
27d68     E7 F0 03 F6 | 	mov	ptra, fp
27d6c     F2 00 A0 FD | 	call	#popregs_
27d70                 | __system____builtin_atan2f_ret
27d70     2D 00 64 FD | 	ret
27d74                 | 
27d74                 | __system____builtin_exp2f
27d74     04 CA 05 F6 | 	mov	COUNT_, #4
27d78     E8 00 A0 FD | 	call	#pushregs_
27d7c     49 A7 02 F6 | 	mov	local01, arg01
27d80     00 7F 21 FF 
27d84     00 94 06 F6 | 	mov	arg02, ##1123942400
27d88     01 96 66 F6 | 	neg	arg03, #1
27d8c     4C F7 BF FD | 	call	#__system___float_cmp
27d90     00 7A 56 F2 | 	cmps	result1, #0 wc
27d94     00 C0 3F 3F 
27d98     00 7A 06 36 |  if_ae	mov	result1, ##2139095040
27d9c     DC 00 90 3D |  if_ae	jmp	#LR__3841
27da0     53 93 02 F6 | 	mov	arg01, local01
27da4     00 7F 61 FF 
27da8     00 94 06 F6 | 	mov	arg02, ##-1023541248
27dac     01 96 06 F6 | 	mov	arg03, #1
27db0     28 F7 BF FD | 	call	#__system___float_cmp
27db4     00 7A 56 F2 | 	cmps	result1, #0 wc
27db8     00 7A 06 C6 |  if_b	mov	result1, #0
27dbc     BC 00 90 CD |  if_b	jmp	#LR__3841
27dc0     53 93 02 F6 | 	mov	arg01, local01
27dc4     00 94 06 F6 | 	mov	arg02, #0
27dc8     A4 F7 BF FD | 	call	#__system___float_tointeger
27dcc     3D A9 02 F6 | 	mov	local02, result1
27dd0     54 93 52 F6 | 	abs	arg01, local02 wc
27dd4     1F AA C6 C9 |  if_b	decod	local03, #31
27dd8     00 AA 06 36 |  if_ae	mov	local03, #0
27ddc     C4 EE BF FD | 	call	#__system___float_fromuns
27de0     55 7B 62 F5 | 	xor	result1, local03
27de4     3D 95 02 F6 | 	mov	arg02, result1
27de8     53 93 02 F6 | 	mov	arg01, local01
27dec     1F 94 E6 F4 | 	bitnot	arg02, #31
27df0     E4 EE BF FD | 	call	#__system___float_add
27df4     3D AD 02 F6 | 	mov	local04, result1
27df8     56 93 02 F6 | 	mov	arg01, local04
27dfc     00 94 06 F6 | 	mov	arg02, #0
27e00     01 96 06 F6 | 	mov	arg03, #1
27e04     D4 F6 BF FD | 	call	#__system___float_cmp
27e08     00 7A 56 F2 | 	cmps	result1, #0 wc
27e0c     18 00 90 3D |  if_ae	jmp	#LR__3840
27e10     56 93 02 F6 | 	mov	arg01, local04
27e14     00 C0 1F FF 
27e18     00 94 06 F6 | 	mov	arg02, ##1065353216
27e1c     B8 EE BF FD | 	call	#__system___float_add
27e20     3D AD 02 F6 | 	mov	local04, result1
27e24     01 A8 86 F1 | 	sub	local02, #1
27e28                 | LR__3840
27e28     7F A8 06 F1 | 	add	local02, #127
27e2c     17 A8 66 F0 | 	shl	local02, #23
27e30     56 93 02 F6 | 	mov	arg01, local04
27e34     00 80 26 FF 
27e38     00 94 06 F6 | 	mov	arg02, ##1291845632
27e3c     68 F2 BF FD | 	call	#__system___float_mul
27e40     3D 93 02 F6 | 	mov	arg01, result1
27e44     00 94 06 F6 | 	mov	arg02, #0
27e48     24 F7 BF FD | 	call	#__system___float_tointeger
27e4c     3D AD 0A F6 | 	mov	local04, result1 wz
27e50     54 7B 02 A6 |  if_e	mov	result1, local02
27e54     24 00 90 AD |  if_e	jmp	#LR__3841
27e58     3E AC 26 F4 | 	bith	local04, #62
27e5c     0F AC 62 FD | 	qexp	local04
27e60     54 93 02 F6 | 	mov	arg01, local02
27e64     18 94 62 FD | 	getqx	arg02
27e68     01 94 06 F1 | 	add	arg02, #1
27e6c     01 94 46 F0 | 	shr	arg02, #1
27e70     00 80 1F FF 
27e74     00 94 06 F1 | 	add	arg02, ##1056964608
27e78     2C F2 BF FD | 	call	#__system___float_mul
27e7c                 | LR__3841
27e7c     E7 F0 03 F6 | 	mov	ptra, fp
27e80     F2 00 A0 FD | 	call	#popregs_
27e84                 | __system____builtin_exp2f_ret
27e84     2D 00 64 FD | 	ret
27e88                 | 
27e88                 | __system____builtin_log2f
27e88     06 CA 05 F6 | 	mov	COUNT_, #6
27e8c     E8 00 A0 FD | 	call	#pushregs_
27e90     49 A7 02 F6 | 	mov	local01, arg01
27e94     49 A9 0A F6 | 	mov	local02, arg01 wz
27e98     00 00 40 5F 
27e9c     00 A8 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
27ea0     00 40 00 AF 
27ea4     00 7A 66 A6 |  if_e	neg	result1, ##8388608
27ea8     08 01 90 AD |  if_e	jmp	#LR__3854
27eac     00 A8 56 F2 | 	cmps	local02, #0 wc
27eb0     00 E0 3F CF 
27eb4     00 7A 06 C6 |  if_b	mov	result1, ##2143289344
27eb8     F8 00 90 CD |  if_b	jmp	#LR__3854
27ebc     53 93 02 F6 | 	mov	arg01, local01
27ec0     00 90 20 FF 
27ec4     00 94 06 F6 | 	mov	arg02, ##1092616192
27ec8     01 96 06 F6 | 	mov	arg03, #1
27ecc     0C F6 BF FD | 	call	#__system___float_cmp
27ed0     00 7A 0E F2 | 	cmp	result1, #0 wz
27ed4     4D 2A 20 AF 
27ed8     78 7A 06 A6 |  if_e	mov	result1, ##1079286392
27edc     D4 00 90 AD |  if_e	jmp	#LR__3854
27ee0     53 93 02 F6 | 	mov	arg01, local01
27ee4     FC 16 20 FF 
27ee8     54 94 06 F6 | 	mov	arg02, ##1076754516
27eec     01 96 06 F6 | 	mov	arg03, #1
27ef0     E8 F5 BF FD | 	call	#__system___float_cmp
27ef4     00 7A 0E F2 | 	cmp	result1, #0 wz
27ef8     55 DC 1F AF 
27efc     3B 7A 06 A6 |  if_e	mov	result1, ##1069066811
27f00     B0 00 90 AD |  if_e	jmp	#LR__3854
27f04     54 AB 02 F6 | 	mov	local03, local02
27f08     17 AA 46 F0 | 	shr	local03, #23
27f0c     55 AB E2 F8 | 	getbyte	local03, local03, #0
27f10     17 A9 06 F4 | 	bitl	local02, #279
27f14     54 AD 02 F6 | 	mov	local04, local02
27f18     FF AA 0E F2 | 	cmp	local03, #255 wz
27f1c     1C 00 90 5D |  if_ne	jmp	#LR__3850
27f20     00 AC 0E F2 | 	cmp	local04, #0 wz
27f24     00 C0 3F 5F 
27f28     00 AE 06 56 |  if_ne	mov	local05, ##2139095040
27f2c     00 E0 3F AF 
27f30     00 AE 06 A6 |  if_e	mov	local05, ##2143289344
27f34     57 7B 02 F6 | 	mov	result1, local05
27f38     78 00 90 FD | 	jmp	#LR__3854
27f3c                 | LR__3850
27f3c     00 AA 0E F2 | 	cmp	local03, #0 wz
27f40     17 AC 26 54 |  if_ne	bith	local04, #23
27f44     7F AA 86 51 |  if_ne	sub	local03, #127
27f48     28 00 90 5D |  if_ne	jmp	#LR__3853
27f4c     00 AC 0E F2 | 	cmp	local04, #0 wz
27f50     00 40 00 AF 
27f54     00 7A 66 A6 |  if_e	neg	result1, ##8388608
27f58     58 00 90 AD |  if_e	jmp	#LR__3854
27f5c     7E AA 66 F6 | 	neg	local03, #126
27f60     D7 08 48 FB | 	callpa	#(@LR__3852-@LR__3851)>>2,fcache_load_ptr_
27f64                 | LR__3851
27f64     17 AC 2E F4 | 	testbn	local04, #23 wz
27f68     01 AC 66 A0 |  if_e	shl	local04, #1
27f6c     01 AA 06 A1 |  if_e	add	local03, #1
27f70     F0 FF 9F AD |  if_e	jmp	#LR__3851
27f74                 | LR__3852
27f74                 | LR__3853
27f74     0E AC 62 FD | 	qlog	local04
27f78     01 AA 86 F1 | 	sub	local03, #1
27f7c     55 93 52 F6 | 	abs	arg01, local03 wc
27f80     1F B0 C6 C9 |  if_b	decod	local06, #31
27f84     00 B0 06 36 |  if_ae	mov	local06, #0
27f88     18 AE 62 FD | 	getqx	local05
27f8c     9B AE 06 F4 | 	bitl	local05, #155
27f90     08 AE 06 F1 | 	add	local05, #8
27f94     04 AE 46 F0 | 	shr	local05, #4
27f98     00 C0 1F FF 
27f9c     00 AE 06 F1 | 	add	local05, ##1065353216
27fa0     00 ED BF FD | 	call	#__system___float_fromuns
27fa4     58 7B 62 F5 | 	xor	result1, local06
27fa8     3D 95 02 F6 | 	mov	arg02, result1
27fac     57 93 02 F6 | 	mov	arg01, local05
27fb0     24 ED BF FD | 	call	#__system___float_add
27fb4                 | LR__3854
27fb4     E7 F0 03 F6 | 	mov	ptra, fp
27fb8     F2 00 A0 FD | 	call	#popregs_
27fbc                 | __system____builtin_log2f_ret
27fbc     2D 00 64 FD | 	ret
27fc0                 | 
27fc0                 | __system____builtin_powf
27fc0     04 CA 05 F6 | 	mov	COUNT_, #4
27fc4     E8 00 A0 FD | 	call	#pushregs_
27fc8     49 A7 02 F6 | 	mov	local01, arg01
27fcc     4A A9 02 F6 | 	mov	local02, arg02
27fd0     54 93 02 F6 | 	mov	arg01, local02
27fd4     00 94 06 F6 | 	mov	arg02, #0
27fd8     94 F5 BF FD | 	call	#__system___float_tointeger
27fdc     3D AB 02 F6 | 	mov	local03, result1
27fe0     55 93 52 F6 | 	abs	arg01, local03 wc
27fe4     1F AC C6 C9 |  if_b	decod	local04, #31
27fe8     00 AC 06 36 |  if_ae	mov	local04, #0
27fec     B4 EC BF FD | 	call	#__system___float_fromuns
27ff0     56 7B 62 F5 | 	xor	result1, local04
27ff4     3D 93 02 F6 | 	mov	arg01, result1
27ff8     54 95 02 F6 | 	mov	arg02, local02
27ffc     01 96 06 F6 | 	mov	arg03, #1
28000     D8 F4 BF FD | 	call	#__system___float_cmp
28004     00 7A 0E F2 | 	cmp	result1, #0 wz
28008     18 00 90 5D |  if_ne	jmp	#LR__3860
2800c     00 C0 1F FF 
28010     00 92 06 F6 | 	mov	arg01, ##1065353216
28014     53 95 02 F6 | 	mov	arg02, local01
28018     55 97 02 F6 | 	mov	arg03, local03
2801c     A0 00 B0 FD | 	call	#__system___float_pow_n
28020     58 00 90 FD | 	jmp	#LR__3861
28024                 | LR__3860
28024     53 93 02 F6 | 	mov	arg01, local01
28028     00 94 06 F6 | 	mov	arg02, #0
2802c     01 96 06 F6 | 	mov	arg03, #1
28030     A8 F4 BF FD | 	call	#__system___float_cmp
28034     00 7A 56 F2 | 	cmps	result1, #0 wc
28038     00 E0 3F CF 
2803c     00 7A 06 C6 |  if_b	mov	result1, ##2143289344
28040     38 00 90 CD |  if_b	jmp	#LR__3861
28044     53 93 02 F6 | 	mov	arg01, local01
28048     00 94 06 F6 | 	mov	arg02, #0
2804c     01 96 06 F6 | 	mov	arg03, #1
28050     88 F4 BF FD | 	call	#__system___float_cmp
28054     00 7A 0E F2 | 	cmp	result1, #0 wz
28058     00 7A 06 A6 |  if_e	mov	result1, #0
2805c     1C 00 90 AD |  if_e	jmp	#LR__3861
28060     53 93 02 F6 | 	mov	arg01, local01
28064     20 FE BF FD | 	call	#__system____builtin_log2f
28068     3D 93 02 F6 | 	mov	arg01, result1
2806c     54 95 02 F6 | 	mov	arg02, local02
28070     34 F0 BF FD | 	call	#__system___float_mul
28074     3D 93 02 F6 | 	mov	arg01, result1
28078     F8 FC BF FD | 	call	#__system____builtin_exp2f
2807c                 | LR__3861
2807c     E7 F0 03 F6 | 	mov	ptra, fp
28080     F2 00 A0 FD | 	call	#popregs_
28084                 | __system____builtin_powf_ret
28084     2D 00 64 FD | 	ret
28088                 | 
28088                 | __system____builtin_logbase
28088     02 CA 05 F6 | 	mov	COUNT_, #2
2808c     E8 00 A0 FD | 	call	#pushregs_
28090     49 A7 02 F6 | 	mov	local01, arg01
28094     4A 93 02 F6 | 	mov	arg01, arg02
28098     EC FD BF FD | 	call	#__system____builtin_log2f
2809c     3D A9 02 F6 | 	mov	local02, result1
280a0     53 93 02 F6 | 	mov	arg01, local01
280a4     E0 FD BF FD | 	call	#__system____builtin_log2f
280a8     3D 95 02 F6 | 	mov	arg02, result1
280ac     54 93 02 F6 | 	mov	arg01, local02
280b0     F8 F1 BF FD | 	call	#__system___float_div
280b4     E7 F0 03 F6 | 	mov	ptra, fp
280b8     F2 00 A0 FD | 	call	#popregs_
280bc                 | __system____builtin_logbase_ret
280bc     2D 00 64 FD | 	ret
280c0                 | 
280c0                 | __system___float_pow_n
280c0     05 CA 05 F6 | 	mov	COUNT_, #5
280c4     E8 00 A0 FD | 	call	#pushregs_
280c8     49 A7 02 F6 | 	mov	local01, arg01
280cc     4A A9 02 F6 | 	mov	local02, arg02
280d0     4B AB 02 F6 | 	mov	local03, arg03
280d4     00 AA 56 F2 | 	cmps	local03, #0 wc
280d8     18 00 90 3D |  if_ae	jmp	#LR__3870
280dc     01 AC 06 F6 | 	mov	local04, #1
280e0     55 AB 62 F6 | 	neg	local03, local03
280e4     00 AA 56 F2 | 	cmps	local03, #0 wc
280e8     00 7A 06 C6 |  if_b	mov	result1, #0
280ec     94 00 90 CD |  if_b	jmp	#LR__3878
280f0     04 00 90 FD | 	jmp	#LR__3871
280f4                 | LR__3870
280f4     00 AC 06 F6 | 	mov	local04, #0
280f8                 | LR__3871
280f8     00 C0 1F FF 
280fc     00 AE 06 F6 | 	mov	local05, ##1065353216
28100                 | LR__3872
28100     01 AA 56 F2 | 	cmps	local03, #1 wc
28104     30 00 90 CD |  if_b	jmp	#LR__3874
28108     01 AA CE F7 | 	test	local03, #1 wz
2810c     10 00 90 AD |  if_e	jmp	#LR__3873
28110     57 93 02 F6 | 	mov	arg01, local05
28114     54 95 02 F6 | 	mov	arg02, local02
28118     8C EF BF FD | 	call	#__system___float_mul
2811c     3D AF 02 F6 | 	mov	local05, result1
28120                 | LR__3873
28120     01 AA C6 F0 | 	sar	local03, #1
28124     54 93 02 F6 | 	mov	arg01, local02
28128     54 95 02 F6 | 	mov	arg02, local02
2812c     78 EF BF FD | 	call	#__system___float_mul
28130     3D A9 02 F6 | 	mov	local02, result1
28134     C8 FF 9F FD | 	jmp	#LR__3872
28138                 | LR__3874
28138     00 AC 0E F2 | 	cmp	local04, #0 wz
2813c     14 00 90 AD |  if_e	jmp	#LR__3875
28140     53 93 02 F6 | 	mov	arg01, local01
28144     57 95 02 F6 | 	mov	arg02, local05
28148     60 F1 BF FD | 	call	#__system___float_div
2814c     3D AF 02 F6 | 	mov	local05, result1
28150     2C 00 90 FD | 	jmp	#LR__3877
28154                 | LR__3875
28154     53 93 02 F6 | 	mov	arg01, local01
28158     00 C0 1F FF 
2815c     00 94 06 F6 | 	mov	arg02, ##1065353216
28160     01 96 06 F6 | 	mov	arg03, #1
28164     74 F3 BF FD | 	call	#__system___float_cmp
28168     00 7A 0E F2 | 	cmp	result1, #0 wz
2816c     10 00 90 AD |  if_e	jmp	#LR__3876
28170     53 93 02 F6 | 	mov	arg01, local01
28174     57 95 02 F6 | 	mov	arg02, local05
28178     2C EF BF FD | 	call	#__system___float_mul
2817c     3D AF 02 F6 | 	mov	local05, result1
28180                 | LR__3876
28180                 | LR__3877
28180     57 7B 02 F6 | 	mov	result1, local05
28184                 | LR__3878
28184     E7 F0 03 F6 | 	mov	ptra, fp
28188     F2 00 A0 FD | 	call	#popregs_
2818c                 | __system___float_pow_n_ret
2818c     2D 00 64 FD | 	ret
28190                 | 
28190                 | __system___gc_ptrs
28190     2C 81 02 F6 | 	mov	_var01, __heap_ptr
28194     40 83 02 F6 | 	mov	_var02, _var01
28198     BB 00 00 FF 
2819c     F8 82 06 F1 | 	add	_var02, ##95992
281a0     40 7D 0A FB | 	rdlong	result2, _var01 wz
281a4     74 00 90 5D |  if_ne	jmp	#LR__3880
281a8     41 7D 02 F6 | 	mov	result2, _var02
281ac     40 7D 82 F1 | 	sub	result2, _var01
281b0     40 03 58 FC | 	wrword	#1, _var01
281b4     40 7B 02 F6 | 	mov	result1, _var01
281b8     02 7A 06 F1 | 	add	result1, #2
281bc     36 00 80 FF 
281c0     3D 21 59 FC | 	wrword	##27792, result1
281c4     40 7B 02 F6 | 	mov	result1, _var01
281c8     04 7A 06 F1 | 	add	result1, #4
281cc     3D 01 58 FC | 	wrword	#0, result1
281d0     40 7B 02 F6 | 	mov	result1, _var01
281d4     06 7A 06 F1 | 	add	result1, #6
281d8     3D 03 58 FC | 	wrword	#1, result1
281dc     10 80 06 F1 | 	add	_var01, #16
281e0     3E 7D 52 F6 | 	abs	result2, result2 wc
281e4     04 7C 46 F0 | 	shr	result2, #4
281e8     3E 7D 82 F6 | 	negc	result2, result2
281ec     40 7D 52 FC | 	wrword	result2, _var01
281f0     40 7D 02 F6 | 	mov	result2, _var01
281f4     02 7C 06 F1 | 	add	result2, #2
281f8     36 00 80 FF 
281fc     3E 1F 59 FC | 	wrword	##27791, result2
28200     40 7D 02 F6 | 	mov	result2, _var01
28204     04 7C 06 F1 | 	add	result2, #4
28208     3E 01 58 FC | 	wrword	#0, result2
2820c     40 7D 02 F6 | 	mov	result2, _var01
28210     06 7C 06 F1 | 	add	result2, #6
28214     3E 01 58 FC | 	wrword	#0, result2
28218     10 80 86 F1 | 	sub	_var01, #16
2821c                 | LR__3880
2821c     40 7B 02 F6 | 	mov	result1, _var01
28220     41 7D 02 F6 | 	mov	result2, _var02
28224                 | __system___gc_ptrs_ret
28224     2D 00 64 FD | 	ret
28228                 | 
28228                 | __system___gc_tryalloc
28228     0B CA 05 F6 | 	mov	COUNT_, #11
2822c     E8 00 A0 FD | 	call	#pushregs_
28230     49 A7 02 F6 | 	mov	local01, arg01
28234     4A A9 02 F6 | 	mov	local02, arg02
28238     54 FF BF FD | 	call	#__system___gc_ptrs
2823c     3D AB 02 F6 | 	mov	local03, result1
28240     3E AD 02 F6 | 	mov	local04, result2
28244     55 AF 02 F6 | 	mov	local05, local03
28248     00 B0 06 F6 | 	mov	local06, #0
2824c     D7 1E 48 FB | 	callpa	#(@LR__3891-@LR__3890)>>2,fcache_load_ptr_
28250                 | LR__3890
28250     57 B3 02 F6 | 	mov	local07, local05
28254     06 AE 06 F1 | 	add	local05, #6
28258     57 95 EA FA | 	rdword	arg02, local05 wz
2825c     55 93 02 F6 | 	mov	arg01, local03
28260     00 7A 06 A6 |  if_e	mov	result1, #0
28264     04 94 66 50 |  if_ne	shl	arg02, #4
28268     4A 93 02 51 |  if_ne	add	arg01, arg02
2826c     49 7B 02 56 |  if_ne	mov	result1, arg01
28270     3D AF 0A F6 | 	mov	local05, result1 wz
28274     57 B1 E2 5A |  if_ne	rdword	local06, local05
28278     00 AE 0E F2 | 	cmp	local05, #0 wz
2827c     56 AF 52 52 |  if_ne	cmps	local05, local04 wc
28280     08 00 90 1D |  if_a	jmp	#LR__3892
28284     58 A7 5A 52 |  if_ne	cmps	local01, local06 wcz
28288     C4 FF 9F 1D |  if_a	jmp	#LR__3890
2828c                 | LR__3891
2828c                 | LR__3892
2828c     00 AE 0E F2 | 	cmp	local05, #0 wz
28290     57 7B 02 A6 |  if_e	mov	result1, local05
28294     3C 01 90 AD |  if_e	jmp	#LR__3895
28298     57 7D 02 F6 | 	mov	result2, local05
2829c     06 7C 06 F1 | 	add	result2, #6
282a0     3E B5 E2 FA | 	rdword	local08, result2
282a4     58 A7 52 F2 | 	cmps	local01, local06 wc
282a8     C0 00 90 3D |  if_ae	jmp	#LR__3894
282ac     57 A7 52 FC | 	wrword	local01, local05
282b0     57 93 02 F6 | 	mov	arg01, local05
282b4     53 B5 02 F6 | 	mov	local08, local01
282b8     04 B4 66 F0 | 	shl	local08, #4
282bc     5A 93 02 F1 | 	add	arg01, local08
282c0     53 B1 82 F1 | 	sub	local06, local01
282c4     49 B1 52 FC | 	wrword	local06, arg01
282c8     49 B5 02 F6 | 	mov	local08, arg01
282cc     02 B4 06 F1 | 	add	local08, #2
282d0     36 00 80 FF 
282d4     5A 1F 59 FC | 	wrword	##27791, local08
282d8     57 95 0A F6 | 	mov	arg02, local05 wz
282dc     00 7A 06 A6 |  if_e	mov	result1, #0
282e0     55 95 82 51 |  if_ne	sub	arg02, local03
282e4     04 94 46 50 |  if_ne	shr	arg02, #4
282e8     4A 7B 02 56 |  if_ne	mov	result1, arg02
282ec     49 B5 02 F6 | 	mov	local08, arg01
282f0     04 B4 06 F1 | 	add	local08, #4
282f4     5A 7B 52 FC | 	wrword	result1, local08
282f8     57 B5 02 F6 | 	mov	local08, local05
282fc     06 B4 06 F1 | 	add	local08, #6
28300     49 95 02 F6 | 	mov	arg02, arg01
28304     5A B5 E2 FA | 	rdword	local08, local08
28308     06 94 06 F1 | 	add	arg02, #6
2830c     4A B5 52 FC | 	wrword	local08, arg02
28310     49 B7 02 F6 | 	mov	local09, arg01
28314     5B 95 0A F6 | 	mov	arg02, local09 wz
28318     00 7A 06 A6 |  if_e	mov	result1, #0
2831c     55 95 82 51 |  if_ne	sub	arg02, local03
28320     04 94 46 50 |  if_ne	shr	arg02, #4
28324     4A 7B 02 56 |  if_ne	mov	result1, arg02
28328     3D B5 02 F6 | 	mov	local08, result1
2832c     49 B9 EA FA | 	rdword	local10, arg01 wz
28330     00 7A 06 A6 |  if_e	mov	result1, #0
28334     04 B8 66 50 |  if_ne	shl	local10, #4
28338     5C 93 02 51 |  if_ne	add	arg01, local10
2833c     49 7B 02 56 |  if_ne	mov	result1, arg01
28340     3D BB 0A F6 | 	mov	local11, result1 wz
28344     24 00 90 AD |  if_e	jmp	#LR__3893
28348     56 BB 52 F2 | 	cmps	local11, local04 wc
2834c     1C 00 90 3D |  if_ae	jmp	#LR__3893
28350     5B 95 0A F6 | 	mov	arg02, local09 wz
28354     00 7A 06 A6 |  if_e	mov	result1, #0
28358     55 95 82 51 |  if_ne	sub	arg02, local03
2835c     04 94 46 50 |  if_ne	shr	arg02, #4
28360     4A 7B 02 56 |  if_ne	mov	result1, arg02
28364     04 BA 06 F1 | 	add	local11, #4
28368     5D 7B 52 FC | 	wrword	result1, local11
2836c                 | LR__3893
2836c                 | LR__3894
2836c     06 B2 06 F1 | 	add	local07, #6
28370     59 B5 52 FC | 	wrword	local08, local07
28374     36 00 00 FF 
28378     80 B6 06 F6 | 	mov	local09, ##27776
2837c     54 B7 42 F5 | 	or	local09, local02
28380     00 7A 06 F6 | 	mov	result1, #0
28384     01 7A 62 FD | 	cogid	result1
28388     3D B7 42 F5 | 	or	local09, result1
2838c     57 BB 02 F6 | 	mov	local11, local05
28390     02 BA 06 F1 | 	add	local11, #2
28394     5D B7 52 FC | 	wrword	local09, local11
28398     55 B7 02 F6 | 	mov	local09, local03
2839c     08 B6 06 F1 | 	add	local09, #8
283a0     57 BB 02 F6 | 	mov	local11, local05
283a4     5B B7 E2 FA | 	rdword	local09, local09
283a8     06 BA 06 F1 | 	add	local11, #6
283ac     5D B7 52 FC | 	wrword	local09, local11
283b0     57 95 0A F6 | 	mov	arg02, local05 wz
283b4     00 7A 06 A6 |  if_e	mov	result1, #0
283b8     55 95 82 51 |  if_ne	sub	arg02, local03
283bc     04 94 46 50 |  if_ne	shr	arg02, #4
283c0     4A 7B 02 56 |  if_ne	mov	result1, arg02
283c4     08 AA 06 F1 | 	add	local03, #8
283c8     55 7B 52 FC | 	wrword	result1, local03
283cc     08 AE 06 F1 | 	add	local05, #8
283d0     57 7B 02 F6 | 	mov	result1, local05
283d4                 | LR__3895
283d4     E7 F0 03 F6 | 	mov	ptra, fp
283d8     F2 00 A0 FD | 	call	#popregs_
283dc                 | __system___gc_tryalloc_ret
283dc     2D 00 64 FD | 	ret
283e0                 | 
283e0                 | __system___gc_alloc_managed
283e0     01 CA 05 F6 | 	mov	COUNT_, #1
283e4     E8 00 A0 FD | 	call	#pushregs_
283e8     49 A7 02 F6 | 	mov	local01, arg01
283ec     00 94 06 F6 | 	mov	arg02, #0
283f0     1C 00 B0 FD | 	call	#__system___gc_doalloc
283f4     3D 95 0A F6 | 	mov	arg02, result1 wz
283f8     01 A6 56 A2 |  if_e	cmps	local01, #1 wc
283fc     00 7A 06 26 |  if_nc_and_z	mov	result1, #0
28400     4A 7B 02 D6 |  if_c_or_nz	mov	result1, arg02
28404     E7 F0 03 F6 | 	mov	ptra, fp
28408     F2 00 A0 FD | 	call	#popregs_
2840c                 | __system___gc_alloc_managed_ret
2840c     2D 00 64 FD | 	ret
28410                 | 
28410                 | __system___gc_doalloc
28410     06 CA 05 F6 | 	mov	COUNT_, #6
28414     E8 00 A0 FD | 	call	#pushregs_
28418     49 A7 0A F6 | 	mov	local01, arg01 wz
2841c     4A A9 02 F6 | 	mov	local02, arg02
28420     00 7A 06 A6 |  if_e	mov	result1, #0
28424     84 00 90 AD |  if_e	jmp	#LR__3907
28428     17 A6 06 F1 | 	add	local01, #23
2842c     0F A6 26 F5 | 	andn	local01, #15
28430     04 A6 46 F0 | 	shr	local01, #4
28434     35 93 02 F6 | 	mov	arg01, ptr___system__dat__
28438     1C 92 06 F1 | 	add	arg01, #28
2843c     98 C5 BF FD | 	call	#__system___lockmem
28440     53 93 02 F6 | 	mov	arg01, local01
28444     54 95 02 F6 | 	mov	arg02, local02
28448     DC FD BF FD | 	call	#__system___gc_tryalloc
2844c     3D AB 0A F6 | 	mov	local03, result1 wz
28450     14 00 90 5D |  if_ne	jmp	#LR__3900
28454     64 03 B0 FD | 	call	#__system___gc_docollect
28458     53 93 02 F6 | 	mov	arg01, local01
2845c     54 95 02 F6 | 	mov	arg02, local02
28460     C4 FD BF FD | 	call	#__system___gc_tryalloc
28464     3D AB 02 F6 | 	mov	local03, result1
28468                 | LR__3900
28468     35 93 02 F6 | 	mov	arg01, ptr___system__dat__
2846c     1C 92 06 F1 | 	add	arg01, #28
28470     49 01 68 FC | 	wrlong	#0, arg01
28474     00 AA 0E F2 | 	cmp	local03, #0 wz
28478     2C 00 90 AD |  if_e	jmp	#LR__3906
2847c     04 A6 66 F0 | 	shl	local01, #4
28480     08 A6 86 F1 | 	sub	local01, #8
28484     53 AD 52 F6 | 	abs	local04, local01 wc
28488     02 AC 46 F0 | 	shr	local04, #2
2848c     56 AF 8A F6 | 	negc	local05, local04 wz
28490     55 B1 02 F6 | 	mov	local06, local03
28494     10 00 90 AD |  if_e	jmp	#LR__3905
28498     D7 06 48 FB | 	callpa	#(@LR__3903-@LR__3901)>>2,fcache_load_ptr_
2849c                 | LR__3901
2849c     57 05 D8 FC | 	rep	@LR__3904, local05
284a0                 | LR__3902
284a0     58 01 68 FC | 	wrlong	#0, local06
284a4     04 B0 06 F1 | 	add	local06, #4
284a8                 | LR__3903
284a8                 | LR__3904
284a8                 | LR__3905
284a8                 | LR__3906
284a8     55 7B 02 F6 | 	mov	result1, local03
284ac                 | LR__3907
284ac     E7 F0 03 F6 | 	mov	ptra, fp
284b0     F2 00 A0 FD | 	call	#popregs_
284b4                 | __system___gc_doalloc_ret
284b4     2D 00 64 FD | 	ret
284b8                 | 
284b8                 | __system___gc_isvalidptr
284b8     F8 96 06 F4 | 	bitl	arg03, #248
284bc     08 96 86 F1 | 	sub	arg03, #8
284c0     49 97 52 F2 | 	cmps	arg03, arg01 wc
284c4     08 00 90 CD |  if_b	jmp	#LR__3910
284c8     4A 97 52 F2 | 	cmps	arg03, arg02 wc
284cc     08 00 90 CD |  if_b	jmp	#LR__3911
284d0                 | LR__3910
284d0     00 7A 06 F6 | 	mov	result1, #0
284d4     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
284d8                 | LR__3911
284d8     4B 81 02 F6 | 	mov	_var01, arg03
284dc     49 81 62 F5 | 	xor	_var01, arg01
284e0     0F 80 CE F7 | 	test	_var01, #15 wz
284e4     00 7A 06 56 |  if_ne	mov	result1, #0
284e8     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
284ec     4B 81 02 F6 | 	mov	_var01, arg03
284f0     02 80 06 F1 | 	add	_var01, #2
284f4     40 81 E2 FA | 	rdword	_var01, _var01
284f8     7F 00 00 FF 
284fc     C0 81 06 F5 | 	and	_var01, ##65472
28500     36 00 00 FF 
28504     80 80 0E F2 | 	cmp	_var01, ##27776 wz
28508     00 7A 06 56 |  if_ne	mov	result1, #0
2850c     4B 7B 02 A6 |  if_e	mov	result1, arg03
28510                 | __system___gc_isvalidptr_ret
28510     2D 00 64 FD | 	ret
28514                 | 
28514                 | __system___gc_free
28514     49 97 02 F6 | 	mov	arg03, arg01
28518     74 FC BF FD | 	call	#__system___gc_ptrs
2851c     3D 93 02 F6 | 	mov	arg01, result1
28520     3E 95 02 F6 | 	mov	arg02, result2
28524     90 FF BF FD | 	call	#__system___gc_isvalidptr
28528     3D 95 0A F6 | 	mov	arg02, result1 wz
2852c     20 00 90 AD |  if_e	jmp	#LR__3920
28530     35 93 02 F6 | 	mov	arg01, ptr___system__dat__
28534     1C 92 06 F1 | 	add	arg01, #28
28538     9C C4 BF FD | 	call	#__system___lockmem
2853c     4A 93 02 F6 | 	mov	arg01, arg02
28540     10 00 B0 FD | 	call	#__system___gc_dofree
28544     35 93 02 F6 | 	mov	arg01, ptr___system__dat__
28548     1C 92 06 F1 | 	add	arg01, #28
2854c     49 01 68 FC | 	wrlong	#0, arg01
28550                 | LR__3920
28550                 | __system___gc_free_ret
28550     2D 00 64 FD | 	ret
28554                 | 
28554                 | __system___gc_dofree
28554     06 CA 05 F6 | 	mov	COUNT_, #6
28558     E8 00 A0 FD | 	call	#pushregs_
2855c     49 A7 02 F6 | 	mov	local01, arg01
28560     2C FC BF FD | 	call	#__system___gc_ptrs
28564     3D A9 02 F6 | 	mov	local02, result1
28568     3E AB 02 F6 | 	mov	local03, result2
2856c     53 95 02 F6 | 	mov	arg02, local01
28570     02 94 06 F1 | 	add	arg02, #2
28574     36 00 80 FF 
28578     4A 1F 59 FC | 	wrword	##27791, arg02
2857c     53 AD 02 F6 | 	mov	local04, local01
28580     53 93 02 F6 | 	mov	arg01, local01
28584     49 AF EA FA | 	rdword	local05, arg01 wz
28588     00 7A 06 A6 |  if_e	mov	result1, #0
2858c     04 AE 66 50 |  if_ne	shl	local05, #4
28590     57 93 02 51 |  if_ne	add	arg01, local05
28594     49 7B 02 56 |  if_ne	mov	result1, arg01
28598     3D B1 02 F6 | 	mov	local06, result1
2859c     D7 24 48 FB | 	callpa	#(@LR__3931-@LR__3930)>>2,fcache_load_ptr_
285a0                 | LR__3930
285a0     04 AC 06 F1 | 	add	local04, #4
285a4     56 95 EA FA | 	rdword	arg02, local04 wz
285a8     54 93 02 F6 | 	mov	arg01, local02
285ac     00 7A 06 A6 |  if_e	mov	result1, #0
285b0     04 94 66 50 |  if_ne	shl	arg02, #4
285b4     4A 93 02 51 |  if_ne	add	arg01, arg02
285b8     49 7B 02 56 |  if_ne	mov	result1, arg01
285bc     3D AD 0A F6 | 	mov	local04, result1 wz
285c0     24 00 90 AD |  if_e	jmp	#LR__3932
285c4     56 93 02 F6 | 	mov	arg01, local04
285c8     00 7A 06 F6 | 	mov	result1, #0
285cc     02 92 06 F1 | 	add	arg01, #2
285d0     49 93 E2 FA | 	rdword	arg01, arg01
285d4     36 00 00 FF 
285d8     8F 92 0E F2 | 	cmp	arg01, ##27791 wz
285dc     01 7A 66 A6 |  if_e	neg	result1, #1
285e0     00 7A 0E F2 | 	cmp	result1, #0 wz
285e4     B8 FF 9F AD |  if_e	jmp	#LR__3930
285e8                 | LR__3931
285e8                 | LR__3932
285e8     00 AC 0E F2 | 	cmp	local04, #0 wz
285ec     54 AD 02 A6 |  if_e	mov	local04, local02
285f0     56 95 02 F6 | 	mov	arg02, local04
285f4     06 94 06 F1 | 	add	arg02, #6
285f8     53 93 02 F6 | 	mov	arg01, local01
285fc     4A 95 E2 FA | 	rdword	arg02, arg02
28600     06 92 06 F1 | 	add	arg01, #6
28604     49 95 52 FC | 	wrword	arg02, arg01
28608     53 95 0A F6 | 	mov	arg02, local01 wz
2860c     00 7A 06 A6 |  if_e	mov	result1, #0
28610     54 95 82 51 |  if_ne	sub	arg02, local02
28614     04 94 46 50 |  if_ne	shr	arg02, #4
28618     4A 7B 02 56 |  if_ne	mov	result1, arg02
2861c     56 95 02 F6 | 	mov	arg02, local04
28620     06 94 06 F1 | 	add	arg02, #6
28624     4A 7B 52 FC | 	wrword	result1, arg02
28628     54 AD 0A F2 | 	cmp	local04, local02 wz
2862c     A4 00 90 AD |  if_e	jmp	#LR__3935
28630     56 93 02 F6 | 	mov	arg01, local04
28634     49 AF EA FA | 	rdword	local05, arg01 wz
28638     00 7A 06 A6 |  if_e	mov	result1, #0
2863c     04 AE 66 50 |  if_ne	shl	local05, #4
28640     57 93 02 51 |  if_ne	add	arg01, local05
28644     49 7B 02 56 |  if_ne	mov	result1, arg01
28648     53 7B 0A F2 | 	cmp	result1, local01 wz
2864c     84 00 90 5D |  if_ne	jmp	#LR__3934
28650     56 B1 E2 FA | 	rdword	local06, local04
28654     53 95 E2 FA | 	rdword	arg02, local01
28658     4A B1 02 F1 | 	add	local06, arg02
2865c     56 B1 52 FC | 	wrword	local06, local04
28660     53 B1 02 F6 | 	mov	local06, local01
28664     02 B0 06 F1 | 	add	local06, #2
28668     58 01 58 FC | 	wrword	#0, local06
2866c     53 93 02 F6 | 	mov	arg01, local01
28670     49 AF EA FA | 	rdword	local05, arg01 wz
28674     00 7A 06 A6 |  if_e	mov	result1, #0
28678     04 AE 66 50 |  if_ne	shl	local05, #4
2867c     57 93 02 51 |  if_ne	add	arg01, local05
28680     49 7B 02 56 |  if_ne	mov	result1, arg01
28684     3D B1 02 F6 | 	mov	local06, result1
28688     55 B1 52 F2 | 	cmps	local06, local03 wc
2868c     20 00 90 3D |  if_ae	jmp	#LR__3933
28690     56 95 0A F6 | 	mov	arg02, local04 wz
28694     00 7A 06 A6 |  if_e	mov	result1, #0
28698     54 95 82 51 |  if_ne	sub	arg02, local02
2869c     04 94 46 50 |  if_ne	shr	arg02, #4
286a0     4A 7B 02 56 |  if_ne	mov	result1, arg02
286a4     58 95 02 F6 | 	mov	arg02, local06
286a8     04 94 06 F1 | 	add	arg02, #4
286ac     4A 7B 52 FC | 	wrword	result1, arg02
286b0                 | LR__3933
286b0     53 95 02 F6 | 	mov	arg02, local01
286b4     06 94 06 F1 | 	add	arg02, #6
286b8     56 7D 02 F6 | 	mov	result2, local04
286bc     4A 95 E2 FA | 	rdword	arg02, arg02
286c0     06 7C 06 F1 | 	add	result2, #6
286c4     3E 95 52 FC | 	wrword	arg02, result2
286c8     06 A6 06 F1 | 	add	local01, #6
286cc     53 01 58 FC | 	wrword	#0, local01
286d0     56 A7 02 F6 | 	mov	local01, local04
286d4                 | LR__3934
286d4                 | LR__3935
286d4     53 93 02 F6 | 	mov	arg01, local01
286d8     49 AF EA FA | 	rdword	local05, arg01 wz
286dc     00 7A 06 A6 |  if_e	mov	result1, #0
286e0     04 AE 66 50 |  if_ne	shl	local05, #4
286e4     57 93 02 51 |  if_ne	add	arg01, local05
286e8     49 7B 02 56 |  if_ne	mov	result1, arg01
286ec     3D 95 0A F6 | 	mov	arg02, result1 wz
286f0     B8 00 90 AD |  if_e	jmp	#LR__3937
286f4     55 95 52 F2 | 	cmps	arg02, local03 wc
286f8     B0 00 90 3D |  if_ae	jmp	#LR__3937
286fc     4A 93 02 F6 | 	mov	arg01, arg02
28700     00 7A 06 F6 | 	mov	result1, #0
28704     02 92 06 F1 | 	add	arg01, #2
28708     49 93 E2 FA | 	rdword	arg01, arg01
2870c     36 00 00 FF 
28710     8F 92 0E F2 | 	cmp	arg01, ##27791 wz
28714     01 7A 66 A6 |  if_e	neg	result1, #1
28718     00 7A 0E F2 | 	cmp	result1, #0 wz
2871c     8C 00 90 AD |  if_e	jmp	#LR__3937
28720     53 AD 02 F6 | 	mov	local04, local01
28724     56 B1 E2 FA | 	rdword	local06, local04
28728     4A 93 02 F6 | 	mov	arg01, arg02
2872c     49 A7 E2 FA | 	rdword	local01, arg01
28730     53 B1 02 F1 | 	add	local06, local01
28734     56 B1 52 FC | 	wrword	local06, local04
28738     49 B1 02 F6 | 	mov	local06, arg01
2873c     06 B0 06 F1 | 	add	local06, #6
28740     56 A7 02 F6 | 	mov	local01, local04
28744     58 B1 E2 FA | 	rdword	local06, local06
28748     06 A6 06 F1 | 	add	local01, #6
2874c     53 B1 52 FC | 	wrword	local06, local01
28750     49 B1 02 F6 | 	mov	local06, arg01
28754     02 B0 06 F1 | 	add	local06, #2
28758     58 55 59 FC | 	wrword	#170, local06
2875c     49 B1 02 F6 | 	mov	local06, arg01
28760     06 B0 06 F1 | 	add	local06, #6
28764     58 01 58 FC | 	wrword	#0, local06
28768     49 AF EA FA | 	rdword	local05, arg01 wz
2876c     00 7A 06 A6 |  if_e	mov	result1, #0
28770     04 AE 66 50 |  if_ne	shl	local05, #4
28774     57 93 02 51 |  if_ne	add	arg01, local05
28778     49 7B 02 56 |  if_ne	mov	result1, arg01
2877c     3D B1 0A F6 | 	mov	local06, result1 wz
28780     28 00 90 AD |  if_e	jmp	#LR__3936
28784     55 B1 52 F2 | 	cmps	local06, local03 wc
28788     20 00 90 3D |  if_ae	jmp	#LR__3936
2878c     56 95 0A F6 | 	mov	arg02, local04 wz
28790     00 7A 06 A6 |  if_e	mov	result1, #0
28794     54 95 82 51 |  if_ne	sub	arg02, local02
28798     04 94 46 50 |  if_ne	shr	arg02, #4
2879c     4A 7B 02 56 |  if_ne	mov	result1, arg02
287a0     58 AD 02 F6 | 	mov	local04, local06
287a4     04 AC 06 F1 | 	add	local04, #4
287a8     56 7B 52 FC | 	wrword	result1, local04
287ac                 | LR__3936
287ac                 | LR__3937
287ac     58 7B 02 F6 | 	mov	result1, local06
287b0     E7 F0 03 F6 | 	mov	ptra, fp
287b4     F2 00 A0 FD | 	call	#popregs_
287b8                 | __system___gc_dofree_ret
287b8     2D 00 64 FD | 	ret
287bc                 | 
287bc                 | __system___gc_docollect
287bc     05 CA 05 F6 | 	mov	COUNT_, #5
287c0     E8 00 A0 FD | 	call	#pushregs_
287c4     C8 F9 BF FD | 	call	#__system___gc_ptrs
287c8     3E A7 02 F6 | 	mov	local01, result2
287cc     3D A9 02 F6 | 	mov	local02, result1
287d0     54 93 02 F6 | 	mov	arg01, local02
287d4     49 AB EA FA | 	rdword	local03, arg01 wz
287d8     00 7A 06 A6 |  if_e	mov	result1, #0
287dc     04 AA 66 50 |  if_ne	shl	local03, #4
287e0     55 93 02 51 |  if_ne	add	arg01, local03
287e4     49 7B 02 56 |  if_ne	mov	result1, arg01
287e8     3D AD 0A F6 | 	mov	local04, result1 wz
287ec     00 7A 06 F6 | 	mov	result1, #0
287f0     01 7A 62 FD | 	cogid	result1
287f4     3D AF 02 F6 | 	mov	local05, result1
287f8     48 00 90 AD |  if_e	jmp	#LR__3942
287fc     D7 22 48 FB | 	callpa	#(@LR__3941-@LR__3940)>>2,fcache_load_ptr_
28800                 | LR__3940
28800     53 AD 52 F2 | 	cmps	local04, local01 wc
28804     3C 00 90 3D |  if_ae	jmp	#LR__3942
28808     56 95 02 F6 | 	mov	arg02, local04
2880c     02 94 06 F1 | 	add	arg02, #2
28810     4A 95 E2 FA | 	rdword	arg02, arg02
28814     20 94 26 F5 | 	andn	arg02, #32
28818     56 93 02 F6 | 	mov	arg01, local04
2881c     02 92 06 F1 | 	add	arg01, #2
28820     49 95 52 FC | 	wrword	arg02, arg01
28824     56 93 02 F6 | 	mov	arg01, local04
28828     49 AB EA FA | 	rdword	local03, arg01 wz
2882c     00 7A 06 A6 |  if_e	mov	result1, #0
28830     04 AA 66 50 |  if_ne	shl	local03, #4
28834     55 93 02 51 |  if_ne	add	arg01, local03
28838     49 7B 02 56 |  if_ne	mov	result1, arg01
2883c     3D AD 0A F6 | 	mov	local04, result1 wz
28840     BC FF 9F 5D |  if_ne	jmp	#LR__3940
28844                 | LR__3941
28844                 | LR__3942
28844     00 AA 06 F6 | 	mov	local03, #0
28848     00 92 06 F6 | 	mov	arg01, #0
2884c     60 C1 BF FD | 	call	#__system____topofstack
28850     3D 95 02 F6 | 	mov	arg02, result1
28854     55 93 02 F6 | 	mov	arg01, local03
28858     90 00 B0 FD | 	call	#__system___gc_markhub
2885c     1C 01 B0 FD | 	call	#__system___gc_markcog
28860     54 93 02 F6 | 	mov	arg01, local02
28864     49 AB EA FA | 	rdword	local03, arg01 wz
28868     00 7A 06 A6 |  if_e	mov	result1, #0
2886c     04 AA 66 50 |  if_ne	shl	local03, #4
28870     55 93 02 51 |  if_ne	add	arg01, local03
28874     49 7B 02 56 |  if_ne	mov	result1, arg01
28878     3D A9 0A F6 | 	mov	local02, result1 wz
2887c     60 00 90 AD |  if_e	jmp	#LR__3946
28880                 | LR__3943
28880     54 AD 02 F6 | 	mov	local04, local02
28884     56 93 02 F6 | 	mov	arg01, local04
28888     49 AB EA FA | 	rdword	local03, arg01 wz
2888c     00 7A 06 A6 |  if_e	mov	result1, #0
28890     04 AA 66 50 |  if_ne	shl	local03, #4
28894     55 93 02 51 |  if_ne	add	arg01, local03
28898     49 7B 02 56 |  if_ne	mov	result1, arg01
2889c     3D A9 02 F6 | 	mov	local02, result1
288a0     56 95 02 F6 | 	mov	arg02, local04
288a4     02 94 06 F1 | 	add	arg02, #2
288a8     4A 95 E2 FA | 	rdword	arg02, arg02
288ac     20 94 CE F7 | 	test	arg02, #32 wz
288b0     10 94 CE A7 |  if_e	test	arg02, #16 wz
288b4     1C 00 90 5D |  if_ne	jmp	#LR__3945
288b8     4A 95 42 F8 | 	getnib	arg02, arg02, #0
288bc     57 95 0A F2 | 	cmp	arg02, local05 wz
288c0     0E 94 0E 52 |  if_ne	cmp	arg02, #14 wz
288c4     0C 00 90 5D |  if_ne	jmp	#LR__3944
288c8     56 93 02 F6 | 	mov	arg01, local04
288cc     84 FC BF FD | 	call	#__system___gc_dofree
288d0     3D A9 02 F6 | 	mov	local02, result1
288d4                 | LR__3944
288d4                 | LR__3945
288d4     00 A8 0E F2 | 	cmp	local02, #0 wz
288d8     53 A9 52 52 |  if_ne	cmps	local02, local01 wc
288dc     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3943
288e0                 | LR__3946
288e0     E7 F0 03 F6 | 	mov	ptra, fp
288e4     F2 00 A0 FD | 	call	#popregs_
288e8                 | __system___gc_docollect_ret
288e8     2D 00 64 FD | 	ret
288ec                 | 
288ec                 | __system___gc_markhub
288ec     04 CA 05 F6 | 	mov	COUNT_, #4
288f0     E8 00 A0 FD | 	call	#pushregs_
288f4     49 A7 02 F6 | 	mov	local01, arg01
288f8     4A A9 02 F6 | 	mov	local02, arg02
288fc     90 F8 BF FD | 	call	#__system___gc_ptrs
28900     3D AB 02 F6 | 	mov	local03, result1
28904     3E AD 02 F6 | 	mov	local04, result2
28908                 | LR__3950
28908     54 A7 52 F2 | 	cmps	local01, local02 wc
2890c     60 00 90 3D |  if_ae	jmp	#LR__3951
28910     53 97 02 FB | 	rdlong	arg03, local01
28914     04 A6 06 F1 | 	add	local01, #4
28918     56 95 02 F6 | 	mov	arg02, local04
2891c     55 93 02 F6 | 	mov	arg01, local03
28920     94 FB BF FD | 	call	#__system___gc_isvalidptr
28924     3D 97 0A F6 | 	mov	arg03, result1 wz
28928     DC FF 9F AD |  if_e	jmp	#LR__3950
2892c     4B 93 02 F6 | 	mov	arg01, arg03
28930     00 7A 06 F6 | 	mov	result1, #0
28934     02 92 06 F1 | 	add	arg01, #2
28938     49 93 E2 FA | 	rdword	arg01, arg01
2893c     36 00 00 FF 
28940     8F 92 0E F2 | 	cmp	arg01, ##27791 wz
28944     01 7A 66 A6 |  if_e	neg	result1, #1
28948     00 7A 0E F2 | 	cmp	result1, #0 wz
2894c     B8 FF 9F 5D |  if_ne	jmp	#LR__3950
28950     4B 7D 02 F6 | 	mov	result2, arg03
28954     02 7C 06 F1 | 	add	result2, #2
28958     3E 7D E2 FA | 	rdword	result2, result2
2895c     0F 7C 26 F5 | 	andn	result2, #15
28960     2E 7C 46 F5 | 	or	result2, #46
28964     02 96 06 F1 | 	add	arg03, #2
28968     4B 7D 52 FC | 	wrword	result2, arg03
2896c     98 FF 9F FD | 	jmp	#LR__3950
28970                 | LR__3951
28970     E7 F0 03 F6 | 	mov	ptra, fp
28974     F2 00 A0 FD | 	call	#popregs_
28978                 | __system___gc_markhub_ret
28978     2D 00 64 FD | 	ret
2897c                 | 
2897c                 | __system___gc_markcog
2897c     04 CA 05 F6 | 	mov	COUNT_, #4
28980     E8 00 A0 FD | 	call	#pushregs_
28984     08 F8 BF FD | 	call	#__system___gc_ptrs
28988     3D A7 02 F6 | 	mov	local01, result1
2898c     3E A9 02 F6 | 	mov	local02, result2
28990     EF AB 06 F6 | 	mov	local03, #495
28994                 | LR__3960
28994                 | 	'.live	local03
28994     00 AA 96 F9 | 	alts	local03, #0
28998     55 AD 02 F6 | 	mov	local04, local03
2899c     53 93 02 F6 | 	mov	arg01, local01
289a0     54 95 02 F6 | 	mov	arg02, local02
289a4     56 97 02 F6 | 	mov	arg03, local04
289a8     0C FB BF FD | 	call	#__system___gc_isvalidptr
289ac     00 7A 0E F2 | 	cmp	result1, #0 wz
289b0     18 00 90 AD |  if_e	jmp	#LR__3961
289b4     3D AD 02 F6 | 	mov	local04, result1
289b8     02 AC 06 F1 | 	add	local04, #2
289bc     56 AD E2 FA | 	rdword	local04, local04
289c0     20 AC 46 F5 | 	or	local04, #32
289c4     02 7A 06 F1 | 	add	result1, #2
289c8     3D AD 52 FC | 	wrword	local04, result1
289cc                 | LR__3961
289cc     01 AA 86 F1 | 	sub	local03, #1
289d0     00 AA 56 F2 | 	cmps	local03, #0 wc
289d4     BC FF 9F 3D |  if_ae	jmp	#LR__3960
289d8     E7 F0 03 F6 | 	mov	ptra, fp
289dc     F2 00 A0 FD | 	call	#popregs_
289e0                 | __system___gc_markcog_ret
289e0     2D 00 64 FD | 	ret
289e4                 | 
289e4                 | __system___get_vfs_file_handle
289e4     01 CA 05 F6 | 	mov	COUNT_, #1
289e8     E8 00 A0 FD | 	call	#pushregs_
289ec     30 CC BF FD | 	call	#__system___find_free_file
289f0     3D A7 02 F6 | 	mov	local01, result1
289f4     00 A6 56 F2 | 	cmps	local01, #0 wc
289f8     34 A6 06 3D |  if_ae	qmul	local01, #52
289fc     00 7A 06 C6 |  if_b	mov	result1, #0
28a00     35 A7 02 36 |  if_ae	mov	local01, ptr___system__dat__
28a04     02 00 00 3F 
28a08     2C A7 06 31 |  if_ae	add	local01, ##1324
28a0c     18 7A 62 3D |  if_ae	getqx	result1
28a10     53 7B 02 31 |  if_ae	add	result1, local01
28a14     E7 F0 03 F6 | 	mov	ptra, fp
28a18     F2 00 A0 FD | 	call	#popregs_
28a1c                 | __system___get_vfs_file_handle_ret
28a1c     2D 00 64 FD | 	ret
28a20                 | 
28a20                 | __system__opendir
28a20     06 CA 05 F6 | 	mov	COUNT_, #6
28a24     E8 00 A0 FD | 	call	#pushregs_
28a28     35 A7 02 F6 | 	mov	local01, ptr___system__dat__
28a2c     84 A7 06 F1 | 	add	local01, #388
28a30     49 95 02 F6 | 	mov	arg02, arg01
28a34     53 93 02 F6 | 	mov	arg01, local01
28a38     00 96 06 F6 | 	mov	arg03, #0
28a3c     E4 C6 BF FD | 	call	#__system____getvfsforfile
28a40     3D A9 0A F6 | 	mov	local02, result1 wz
28a44     10 00 90 AD |  if_e	jmp	#LR__3970
28a48     28 A8 06 F1 | 	add	local02, #40
28a4c     54 97 0A FB | 	rdlong	arg03, local02 wz
28a50     28 A8 86 F1 | 	sub	local02, #40
28a54     14 00 90 5D |  if_ne	jmp	#LR__3971
28a58                 | LR__3970
28a58     20 6A 06 F1 | 	add	ptr___system__dat__, #32
28a5c     35 21 68 FC | 	wrlong	#16, ptr___system__dat__
28a60     20 6A 86 F1 | 	sub	ptr___system__dat__, #32
28a64     00 7A 06 F6 | 	mov	result1, #0
28a68     90 00 90 FD | 	jmp	#LR__3973
28a6c                 | LR__3971
28a6c     5C 92 06 F6 | 	mov	arg01, #92
28a70     10 94 06 F6 | 	mov	arg02, #16
28a74     98 F9 BF FD | 	call	#__system___gc_doalloc
28a78     3D AB 0A F6 | 	mov	local03, result1 wz
28a7c     20 6A 06 A1 |  if_e	add	ptr___system__dat__, #32
28a80     35 0F 68 AC |  if_e	wrlong	#7, ptr___system__dat__
28a84     20 6A 86 A1 |  if_e	sub	ptr___system__dat__, #32
28a88     00 7A 06 A6 |  if_e	mov	result1, #0
28a8c     6C 00 90 AD |  if_e	jmp	#LR__3973
28a90     28 A8 06 F1 | 	add	local02, #40
28a94     54 AD 02 FB | 	rdlong	local04, local02
28a98     56 AF 02 F6 | 	mov	local05, local04
28a9c     28 A8 86 F1 | 	sub	local02, #40
28aa0     13 AE 46 F7 | 	zerox	local05, #19
28aa4     14 AC 46 F0 | 	shr	local04, #20
28aa8     02 AC 66 F0 | 	shl	local04, #2
28aac     2D AD 02 F1 | 	add	local04, __methods__
28ab0     56 AD 02 FB | 	rdlong	local04, local04
28ab4     55 93 02 F6 | 	mov	arg01, local03
28ab8     53 95 02 F6 | 	mov	arg02, local01
28abc     32 B1 02 F6 | 	mov	local06, objptr
28ac0     57 65 02 F6 | 	mov	objptr, local05
28ac4     2D AC 62 FD | 	call	local04
28ac8     58 65 02 F6 | 	mov	objptr, local06
28acc     3D 97 0A F6 | 	mov	arg03, result1 wz
28ad0     20 00 90 AD |  if_e	jmp	#LR__3972
28ad4     00 96 4E F2 | 	cmps	arg03, #0 wz
28ad8     20 6A 06 F1 | 	add	ptr___system__dat__, #32
28adc     35 97 62 FC | 	wrlong	arg03, ptr___system__dat__
28ae0     20 6A 86 F1 | 	sub	ptr___system__dat__, #32
28ae4     55 93 02 F6 | 	mov	arg01, local03
28ae8     28 FA BF FD | 	call	#__system___gc_free
28aec     00 7A 06 F6 | 	mov	result1, #0
28af0     08 00 90 FD | 	jmp	#LR__3973
28af4                 | LR__3972
28af4     55 A9 62 FC | 	wrlong	local02, local03
28af8     55 7B 02 F6 | 	mov	result1, local03
28afc                 | LR__3973
28afc     E7 F0 03 F6 | 	mov	ptra, fp
28b00     F2 00 A0 FD | 	call	#popregs_
28b04                 | __system__opendir_ret
28b04     2D 00 64 FD | 	ret
28b08                 | 
28b08                 | __system__closedir
28b08     04 CA 05 F6 | 	mov	COUNT_, #4
28b0c     E8 00 A0 FD | 	call	#pushregs_
28b10     49 A7 02 F6 | 	mov	local01, arg01
28b14     53 93 02 FB | 	rdlong	arg01, local01
28b18     2C 92 06 F1 | 	add	arg01, #44
28b1c     49 A9 02 FB | 	rdlong	local02, arg01
28b20     54 AB 02 F6 | 	mov	local03, local02
28b24     13 AA 46 F7 | 	zerox	local03, #19
28b28     14 A8 46 F0 | 	shr	local02, #20
28b2c     02 A8 66 F0 | 	shl	local02, #2
28b30     2D A9 02 F1 | 	add	local02, __methods__
28b34     54 A9 02 FB | 	rdlong	local02, local02
28b38     53 93 02 F6 | 	mov	arg01, local01
28b3c     32 AD 02 F6 | 	mov	local04, objptr
28b40     55 65 02 F6 | 	mov	objptr, local03
28b44     2D A8 62 FD | 	call	local02
28b48     56 65 02 F6 | 	mov	objptr, local04
28b4c     3D AD 02 F6 | 	mov	local04, result1
28b50     53 93 02 F6 | 	mov	arg01, local01
28b54     BC F9 BF FD | 	call	#__system___gc_free
28b58     00 AC 4E F2 | 	cmps	local04, #0 wz
28b5c     20 6A 06 F1 | 	add	ptr___system__dat__, #32
28b60     35 AD 62 FC | 	wrlong	local04, ptr___system__dat__
28b64     20 6A 86 F1 | 	sub	ptr___system__dat__, #32
28b68     01 7A 66 56 |  if_ne	neg	result1, #1
28b6c     00 7A 06 A6 |  if_e	mov	result1, #0
28b70     E7 F0 03 F6 | 	mov	ptra, fp
28b74     F2 00 A0 FD | 	call	#popregs_
28b78                 | __system__closedir_ret
28b78     2D 00 64 FD | 	ret
28b7c                 | 
28b7c                 | __system__readdir
28b7c     04 CA 05 F6 | 	mov	COUNT_, #4
28b80     E8 00 A0 FD | 	call	#pushregs_
28b84     49 95 0A FB | 	rdlong	arg02, arg01 wz
28b88     49 A7 02 F6 | 	mov	local01, arg01
28b8c     08 A6 06 F1 | 	add	local01, #8
28b90     00 7A 06 A6 |  if_e	mov	result1, #0
28b94     5C 00 90 AD |  if_e	jmp	#LR__3981
28b98     30 94 06 F1 | 	add	arg02, #48
28b9c     4A A9 02 FB | 	rdlong	local02, arg02
28ba0     54 AB 02 F6 | 	mov	local03, local02
28ba4     13 AA 46 F7 | 	zerox	local03, #19
28ba8     14 A8 46 F0 | 	shr	local02, #20
28bac     02 A8 66 F0 | 	shl	local02, #2
28bb0     2D A9 02 F1 | 	add	local02, __methods__
28bb4     54 A9 02 FB | 	rdlong	local02, local02
28bb8     53 95 02 F6 | 	mov	arg02, local01
28bbc     32 AD 02 F6 | 	mov	local04, objptr
28bc0     55 65 02 F6 | 	mov	objptr, local03
28bc4     2D A8 62 FD | 	call	local02
28bc8     56 65 02 F6 | 	mov	objptr, local04
28bcc     00 7A 4E F2 | 	cmps	result1, #0 wz
28bd0     1C 00 90 AD |  if_e	jmp	#LR__3980
28bd4     01 7A 56 F2 | 	cmps	result1, #1 wc
28bd8     00 7A 4E 32 |  if_ae	cmps	result1, #0 wz
28bdc     20 6A 06 31 |  if_ae	add	ptr___system__dat__, #32
28be0     35 7B 62 3C |  if_ae	wrlong	result1, ptr___system__dat__
28be4     20 6A 86 31 |  if_ae	sub	ptr___system__dat__, #32
28be8     00 7A 06 F6 | 	mov	result1, #0
28bec     04 00 90 FD | 	jmp	#LR__3981
28bf0                 | LR__3980
28bf0     53 7B 02 F6 | 	mov	result1, local01
28bf4                 | LR__3981
28bf4     E7 F0 03 F6 | 	mov	ptra, fp
28bf8     F2 00 A0 FD | 	call	#popregs_
28bfc                 | __system__readdir_ret
28bfc     2D 00 64 FD | 	ret
28c00                 | 
28c00                 | __system___openraw
28c00     15 CA 05 F6 | 	mov	COUNT_, #21
28c04     E8 00 A0 FD | 	call	#pushregs_
28c08     49 A7 02 F6 | 	mov	local01, arg01
28c0c     4A A9 02 F6 | 	mov	local02, arg02
28c10     4B AB 02 F6 | 	mov	local03, arg03
28c14     4C AD 02 F6 | 	mov	local04, arg04
28c18     0F AE C6 F9 | 	decod	local05, #15
28c1c     53 B1 02 F6 | 	mov	local06, local01
28c20     00 B2 06 F6 | 	mov	local07, #0
28c24     35 B5 02 F6 | 	mov	local08, ptr___system__dat__
28c28     84 B5 06 F1 | 	add	local08, #388
28c2c     5A 93 02 F6 | 	mov	arg01, local08
28c30     54 95 02 F6 | 	mov	arg02, local02
28c34     00 96 06 F6 | 	mov	arg03, #0
28c38     E8 C4 BF FD | 	call	#__system____getvfsforfile
28c3c     3D B7 0A F6 | 	mov	local09, result1 wz
28c40     10 00 90 AD |  if_e	jmp	#LR__3990
28c44     20 B6 06 F1 | 	add	local09, #32
28c48     5B 7B 0A FB | 	rdlong	result1, local09 wz
28c4c     20 B6 86 F1 | 	sub	local09, #32
28c50     14 00 90 5D |  if_ne	jmp	#LR__3991
28c54                 | LR__3990
28c54     20 6A 06 F1 | 	add	ptr___system__dat__, #32
28c58     35 21 68 FC | 	wrlong	#16, ptr___system__dat__
28c5c     20 6A 86 F1 | 	sub	ptr___system__dat__, #32
28c60     01 7A 66 F6 | 	neg	result1, #1
28c64     DC 02 90 FD | 	jmp	#LR__4006
28c68                 | LR__3991
28c68     58 93 02 F6 | 	mov	arg01, local06
28c6c     00 94 06 F6 | 	mov	arg02, #0
28c70     34 96 06 F6 | 	mov	arg03, #52
28c74     49 B9 02 F6 | 	mov	local10, arg01
28c78     D8 00 A0 FD | 	call	#\builtin_bytefill_
28c7c     20 B6 06 F1 | 	add	local09, #32
28c80     5B BB 02 FB | 	rdlong	local11, local09
28c84     5D BD 02 F6 | 	mov	local12, local11
28c88     5D BF 02 F6 | 	mov	local13, local11
28c8c     20 B6 86 F1 | 	sub	local09, #32
28c90     5F C1 02 F6 | 	mov	local14, local13
28c94     13 BC 46 F7 | 	zerox	local12, #19
28c98     14 C0 46 F0 | 	shr	local14, #20
28c9c     02 C0 66 F0 | 	shl	local14, #2
28ca0     2D C1 02 F1 | 	add	local14, __methods__
28ca4     60 C1 02 FB | 	rdlong	local14, local14
28ca8     58 C3 02 F6 | 	mov	local15, local06
28cac     5A C5 02 F6 | 	mov	local16, local08
28cb0     55 C7 02 F6 | 	mov	local17, local03
28cb4     61 93 02 F6 | 	mov	arg01, local15
28cb8     62 95 02 F6 | 	mov	arg02, local16
28cbc     63 97 02 F6 | 	mov	arg03, local17
28cc0     32 C9 02 F6 | 	mov	local18, objptr
28cc4     5E 65 02 F6 | 	mov	objptr, local12
28cc8     2D C0 62 FD | 	call	local14
28ccc     64 65 02 F6 | 	mov	objptr, local18
28cd0     3D CB 0A F6 | 	mov	local19, result1 wz
28cd4     04 AA CE 57 |  if_ne	test	local03, #4 wz
28cd8     58 00 90 AD |  if_e	jmp	#LR__3992
28cdc     24 B6 06 F1 | 	add	local09, #36
28ce0     5B BB 02 FB | 	rdlong	local11, local09
28ce4     5D BD 02 F6 | 	mov	local12, local11
28ce8     5D BF 02 F6 | 	mov	local13, local11
28cec     24 B6 86 F1 | 	sub	local09, #36
28cf0     5F C1 02 F6 | 	mov	local14, local13
28cf4     13 BC 46 F7 | 	zerox	local12, #19
28cf8     14 C0 46 F0 | 	shr	local14, #20
28cfc     02 C0 66 F0 | 	shl	local14, #2
28d00     2D C1 02 F1 | 	add	local14, __methods__
28d04     60 C1 02 FB | 	rdlong	local14, local14
28d08     58 C3 02 F6 | 	mov	local15, local06
28d0c     5A C5 02 F6 | 	mov	local16, local08
28d10     56 C7 02 F6 | 	mov	local17, local04
28d14     61 93 02 F6 | 	mov	arg01, local15
28d18     62 95 02 F6 | 	mov	arg02, local16
28d1c     63 97 02 F6 | 	mov	arg03, local17
28d20     32 C9 02 F6 | 	mov	local18, objptr
28d24     5E 65 02 F6 | 	mov	objptr, local12
28d28     2D C0 62 FD | 	call	local14
28d2c     64 65 02 F6 | 	mov	objptr, local18
28d30     3D CB 02 F6 | 	mov	local19, result1
28d34                 | LR__3992
28d34     00 CA 0E F2 | 	cmp	local19, #0 wz
28d38     DC 01 90 5D |  if_ne	jmp	#LR__4004
28d3c     55 CD 02 F6 | 	mov	local20, local03
28d40     03 CC 0E F5 | 	and	local20, #3 wz
28d44     02 AE 46 55 |  if_ne	or	local05, #2
28d48     01 CC 0E F2 | 	cmp	local20, #1 wz
28d4c     01 AE 46 55 |  if_ne	or	local05, #1
28d50     20 AA CE F7 | 	test	local03, #32 wz
28d54     80 AF 46 55 |  if_ne	or	local05, #384
28d58     08 B0 06 F1 | 	add	local06, #8
28d5c     58 AF 62 FC | 	wrlong	local05, local06
28d60     0C B0 06 F1 | 	add	local06, #12
28d64     58 CF 0A FB | 	rdlong	local21, local06 wz
28d68     14 B0 86 F1 | 	sub	local06, #20
28d6c     18 00 90 5D |  if_ne	jmp	#LR__3993
28d70     04 B6 06 F1 | 	add	local09, #4
28d74     5B CF 02 FB | 	rdlong	local21, local09
28d78     04 B6 86 F1 | 	sub	local09, #4
28d7c     14 B0 06 F1 | 	add	local06, #20
28d80     58 CF 62 FC | 	wrlong	local21, local06
28d84     14 B0 86 F1 | 	sub	local06, #20
28d88                 | LR__3993
28d88     18 B0 06 F1 | 	add	local06, #24
28d8c     58 CF 0A FB | 	rdlong	local21, local06 wz
28d90     18 B0 86 F1 | 	sub	local06, #24
28d94     18 00 90 5D |  if_ne	jmp	#LR__3994
28d98     08 B6 06 F1 | 	add	local09, #8
28d9c     5B CF 02 FB | 	rdlong	local21, local09
28da0     08 B6 86 F1 | 	sub	local09, #8
28da4     18 B0 06 F1 | 	add	local06, #24
28da8     58 CF 62 FC | 	wrlong	local21, local06
28dac     18 B0 86 F1 | 	sub	local06, #24
28db0                 | LR__3994
28db0     24 B0 06 F1 | 	add	local06, #36
28db4     58 CF 0A FB | 	rdlong	local21, local06 wz
28db8     24 B0 86 F1 | 	sub	local06, #36
28dbc     5B CF 02 AB |  if_e	rdlong	local21, local09
28dc0     24 B0 06 A1 |  if_e	add	local06, #36
28dc4     58 CF 62 AC |  if_e	wrlong	local21, local06
28dc8     24 B0 86 A1 |  if_e	sub	local06, #36
28dcc     28 B0 06 F1 | 	add	local06, #40
28dd0     58 CF 0A FB | 	rdlong	local21, local06 wz
28dd4     28 B0 86 F1 | 	sub	local06, #40
28dd8     18 00 90 5D |  if_ne	jmp	#LR__3995
28ddc     10 B6 06 F1 | 	add	local09, #16
28de0     5B CF 02 FB | 	rdlong	local21, local09
28de4     10 B6 86 F1 | 	sub	local09, #16
28de8     28 B0 06 F1 | 	add	local06, #40
28dec     58 CF 62 FC | 	wrlong	local21, local06
28df0     28 B0 86 F1 | 	sub	local06, #40
28df4                 | LR__3995
28df4     30 B0 06 F1 | 	add	local06, #48
28df8     58 CF 0A FB | 	rdlong	local21, local06 wz
28dfc     30 B0 86 F1 | 	sub	local06, #48
28e00     18 00 90 5D |  if_ne	jmp	#LR__3996
28e04     0C B6 06 F1 | 	add	local09, #12
28e08     5B CF 02 FB | 	rdlong	local21, local09
28e0c     0C B6 86 F1 | 	sub	local09, #12
28e10     30 B0 06 F1 | 	add	local06, #48
28e14     58 CF 62 FC | 	wrlong	local21, local06
28e18     30 B0 86 F1 | 	sub	local06, #48
28e1c                 | LR__3996
28e1c     20 B0 06 F1 | 	add	local06, #32
28e20     58 CF 0A FB | 	rdlong	local21, local06 wz
28e24     20 B0 86 F1 | 	sub	local06, #32
28e28     18 00 90 5D |  if_ne	jmp	#LR__3997
28e2c     50 B6 06 F1 | 	add	local09, #80
28e30     5B CF 02 FB | 	rdlong	local21, local09
28e34     50 B6 86 F1 | 	sub	local09, #80
28e38     20 B0 06 F1 | 	add	local06, #32
28e3c     58 CF 62 FC | 	wrlong	local21, local06
28e40     20 B0 86 F1 | 	sub	local06, #32
28e44                 | LR__3997
28e44     1C B0 06 F1 | 	add	local06, #28
28e48     58 CF 0A FB | 	rdlong	local21, local06 wz
28e4c     1C B0 86 F1 | 	sub	local06, #28
28e50     18 00 90 5D |  if_ne	jmp	#LR__3998
28e54     54 B6 06 F1 | 	add	local09, #84
28e58     5B CF 02 FB | 	rdlong	local21, local09
28e5c     54 B6 86 F1 | 	sub	local09, #84
28e60     1C B0 06 F1 | 	add	local06, #28
28e64     58 CF 62 FC | 	wrlong	local21, local06
28e68     1C B0 86 F1 | 	sub	local06, #28
28e6c                 | LR__3998
28e6c     1C B0 06 F1 | 	add	local06, #28
28e70     58 CF 0A FB | 	rdlong	local21, local06 wz
28e74     1C B0 86 F1 | 	sub	local06, #28
28e78     1C 00 90 5D |  if_ne	jmp	#LR__3999
28e7c     01 B2 06 F6 | 	mov	local07, #1
28e80     32 93 02 F6 | 	mov	arg01, objptr
28e84     00 C0 05 FF 
28e88     00 92 46 F5 | 	or	arg01, ##192937984
28e8c     1C B0 06 F1 | 	add	local06, #28
28e90     58 93 62 FC | 	wrlong	arg01, local06
28e94     1C B0 86 F1 | 	sub	local06, #28
28e98                 | LR__3999
28e98     20 B0 06 F1 | 	add	local06, #32
28e9c     58 CF 0A FB | 	rdlong	local21, local06 wz
28ea0     20 B0 86 F1 | 	sub	local06, #32
28ea4     1C 00 90 5D |  if_ne	jmp	#LR__4000
28ea8     01 B2 06 F6 | 	mov	local07, #1
28eac     32 93 02 F6 | 	mov	arg01, objptr
28eb0     00 C8 05 FF 
28eb4     00 92 46 F5 | 	or	arg01, ##193986560
28eb8     20 B0 06 F1 | 	add	local06, #32
28ebc     58 93 62 FC | 	wrlong	arg01, local06
28ec0     20 B0 86 F1 | 	sub	local06, #32
28ec4                 | LR__4000
28ec4     2C B0 06 F1 | 	add	local06, #44
28ec8     58 CF 0A FB | 	rdlong	local21, local06 wz
28ecc     2C B0 86 F1 | 	sub	local06, #44
28ed0     44 00 90 5D |  if_ne	jmp	#LR__4003
28ed4     14 B6 06 F1 | 	add	local09, #20
28ed8     5B CF 0A FB | 	rdlong	local21, local09 wz
28edc     14 B6 86 F1 | 	sub	local09, #20
28ee0     18 00 90 AD |  if_e	jmp	#LR__4001
28ee4     14 B6 06 F1 | 	add	local09, #20
28ee8     5B CF 02 FB | 	rdlong	local21, local09
28eec     2C B0 06 F1 | 	add	local06, #44
28ef0     58 CF 62 FC | 	wrlong	local21, local06
28ef4     2C B0 86 F1 | 	sub	local06, #44
28ef8     1C 00 90 FD | 	jmp	#LR__4002
28efc                 | LR__4001
28efc     01 B2 06 F6 | 	mov	local07, #1
28f00     32 93 02 F6 | 	mov	arg01, objptr
28f04     00 D0 05 FF 
28f08     00 92 46 F5 | 	or	arg01, ##195035136
28f0c     2C B0 06 F1 | 	add	local06, #44
28f10     58 93 62 FC | 	wrlong	arg01, local06
28f14     2C B0 86 F1 | 	sub	local06, #44
28f18                 | LR__4002
28f18                 | LR__4003
28f18                 | LR__4004
28f18     00 B2 0E F2 | 	cmp	local07, #0 wz
28f1c     58 93 02 56 |  if_ne	mov	arg01, local06
28f20     E4 04 B0 5D |  if_ne	call	#__system____default_buffer_init
28f24     00 CA 0E F2 | 	cmp	local19, #0 wz
28f28     00 92 06 A6 |  if_e	mov	arg01, #0
28f2c     10 00 90 5D |  if_ne	jmp	#LR__4005
28f30     00 92 4E F2 | 	cmps	arg01, #0 wz
28f34     20 6A 06 F1 | 	add	ptr___system__dat__, #32
28f38     35 93 62 FC | 	wrlong	arg01, ptr___system__dat__
28f3c     20 6A 86 F1 | 	sub	ptr___system__dat__, #32
28f40                 | LR__4005
28f40     65 7B 02 F6 | 	mov	result1, local19
28f44                 | LR__4006
28f44     E7 F0 03 F6 | 	mov	ptra, fp
28f48     F2 00 A0 FD | 	call	#popregs_
28f4c                 | __system___openraw_ret
28f4c     2D 00 64 FD | 	ret
28f50                 | 
28f50                 | __system___closeraw
28f50     05 CA 05 F6 | 	mov	COUNT_, #5
28f54     E8 00 A0 FD | 	call	#pushregs_
28f58     49 A7 02 F6 | 	mov	local01, arg01
28f5c     00 A8 06 F6 | 	mov	local02, #0
28f60     08 A6 06 F1 | 	add	local01, #8
28f64     53 7B 0A FB | 	rdlong	result1, local01 wz
28f68     08 A6 86 F1 | 	sub	local01, #8
28f6c     20 6A 06 A1 |  if_e	add	ptr___system__dat__, #32
28f70     35 0B 68 AC |  if_e	wrlong	#5, ptr___system__dat__
28f74     20 6A 86 A1 |  if_e	sub	ptr___system__dat__, #32
28f78     01 7A 66 A6 |  if_e	neg	result1, #1
28f7c     A8 00 90 AD |  if_e	jmp	#LR__4012
28f80     2C A6 06 F1 | 	add	local01, #44
28f84     53 7B 0A FB | 	rdlong	result1, local01 wz
28f88     2C A6 86 F1 | 	sub	local01, #44
28f8c     38 00 90 AD |  if_e	jmp	#LR__4010
28f90     2C A6 06 F1 | 	add	local01, #44
28f94     53 AB 02 FB | 	rdlong	local03, local01
28f98     55 AD 02 F6 | 	mov	local04, local03
28f9c     2C A6 86 F1 | 	sub	local01, #44
28fa0     13 AC 46 F7 | 	zerox	local04, #19
28fa4     14 AA 46 F0 | 	shr	local03, #20
28fa8     02 AA 66 F0 | 	shl	local03, #2
28fac     2D AB 02 F1 | 	add	local03, __methods__
28fb0     55 AB 02 FB | 	rdlong	local03, local03
28fb4     53 93 02 F6 | 	mov	arg01, local01
28fb8     32 AF 02 F6 | 	mov	local05, objptr
28fbc     56 65 02 F6 | 	mov	objptr, local04
28fc0     2D AA 62 FD | 	call	local03
28fc4     57 65 02 F6 | 	mov	objptr, local05
28fc8                 | LR__4010
28fc8     24 A6 06 F1 | 	add	local01, #36
28fcc     53 AF 0A FB | 	rdlong	local05, local01 wz
28fd0     24 A6 86 F1 | 	sub	local01, #36
28fd4     3C 00 90 AD |  if_e	jmp	#LR__4011
28fd8     24 A6 06 F1 | 	add	local01, #36
28fdc     53 AB 02 FB | 	rdlong	local03, local01
28fe0     55 AD 02 F6 | 	mov	local04, local03
28fe4     24 A6 86 F1 | 	sub	local01, #36
28fe8     13 AC 46 F7 | 	zerox	local04, #19
28fec     14 AA 46 F0 | 	shr	local03, #20
28ff0     02 AA 66 F0 | 	shl	local03, #2
28ff4     2D AB 02 F1 | 	add	local03, __methods__
28ff8     55 AB 02 FB | 	rdlong	local03, local03
28ffc     53 93 02 F6 | 	mov	arg01, local01
29000     32 AF 02 F6 | 	mov	local05, objptr
29004     56 65 02 F6 | 	mov	objptr, local04
29008     2D AA 62 FD | 	call	local03
2900c     57 65 02 F6 | 	mov	objptr, local05
29010     3D A9 02 F6 | 	mov	local02, result1
29014                 | LR__4011
29014     53 93 02 F6 | 	mov	arg01, local01
29018     00 94 06 F6 | 	mov	arg02, #0
2901c     34 96 06 F6 | 	mov	arg03, #52
29020     D8 00 A0 FD | 	call	#\builtin_bytefill_
29024     54 7B 02 F6 | 	mov	result1, local02
29028                 | LR__4012
29028     E7 F0 03 F6 | 	mov	ptra, fp
2902c     F2 00 A0 FD | 	call	#popregs_
29030                 | __system___closeraw_ret
29030     2D 00 64 FD | 	ret
29034                 | 
29034                 | __system___vfs_open_fat_handle
29034     03 CA 05 F6 | 	mov	COUNT_, #3
29038     E8 00 A0 FD | 	call	#pushregs_
2903c     49 A7 0A F6 | 	mov	local01, arg01 wz
29040     20 6A 06 A1 |  if_e	add	ptr___system__dat__, #32
29044     35 0B 68 AC |  if_e	wrlong	#5, ptr___system__dat__
29048     20 6A 86 A1 |  if_e	sub	ptr___system__dat__, #32
2904c     01 7A 66 A6 |  if_e	neg	result1, #1
29050     80 00 90 AD |  if_e	jmp	#LR__4021
29054     01 00 00 FF 
29058     14 92 06 F6 | 	mov	arg01, ##532
2905c     80 F3 BF FD | 	call	#__system___gc_alloc_managed
29060     3D A9 02 F6 | 	mov	local02, result1
29064     01 00 00 FF 
29068     34 92 06 F6 | 	mov	arg01, ##564
2906c     70 F3 BF FD | 	call	#__system___gc_alloc_managed
29070     32 AB 02 F6 | 	mov	local03, objptr
29074     54 65 02 F6 | 	mov	objptr, local02
29078     01 00 00 FF 
2907c     10 64 06 F1 | 	add	objptr, ##528
29080     32 A7 62 FC | 	wrlong	local01, objptr
29084                 | ' #line 4 "C:/Users/Piotr/Downloads/flexprop-7.0.0/flexprop/include/filesys/fatfs/diskio.cc"
29084                 | ' 
29084                 | ' 
29084                 | ' vfs_file_t *fh;
29084                 | ' 
29084                 | ' DRESULT disk_sethandle(BYTE pdrv, vfs_file_t *fhandle) {
29084                 | '     fh = fhandle;
29084                 | '     return RES_OK;
29084     92 01 00 FF 
29088     1A 95 06 F6 | 	mov	arg02, ##@LR__5477
2908c     3D 93 02 F6 | 	mov	arg01, result1
29090     00 96 06 F6 | 	mov	arg03, #0
29094     54 65 02 F6 | 	mov	objptr, local02
29098     4C 65 B0 FD | 	call	#_fatfs_cc_f_mount
2909c     55 65 02 F6 | 	mov	objptr, local03
290a0     3D 93 0A F6 | 	mov	arg01, result1 wz
290a4     18 00 90 AD |  if_e	jmp	#LR__4020
290a8     49 93 6A F6 | 	neg	arg01, arg01 wz
290ac     20 6A 06 F1 | 	add	ptr___system__dat__, #32
290b0     35 93 62 FC | 	wrlong	arg01, ptr___system__dat__
290b4     20 6A 86 F1 | 	sub	ptr___system__dat__, #32
290b8     00 7A 06 F6 | 	mov	result1, #0
290bc     14 00 90 FD | 	jmp	#LR__4021
290c0                 | LR__4020
290c0     54 93 02 F6 | 	mov	arg01, local02
290c4     32 AB 02 F6 | 	mov	local03, objptr
290c8     54 65 02 F6 | 	mov	objptr, local02
290cc     88 8B B0 FD | 	call	#_fatfs_cc_get_vfs
290d0     55 65 02 F6 | 	mov	objptr, local03
290d4                 | LR__4021
290d4     E7 F0 03 F6 | 	mov	ptra, fp
290d8     F2 00 A0 FD | 	call	#popregs_
290dc                 | __system___vfs_open_fat_handle_ret
290dc     2D 00 64 FD | 	ret
290e0                 | 
290e0                 | __system___vfs_open_sdcardx
290e0     04 CA 05 F6 | 	mov	COUNT_, #4
290e4     E8 00 A0 FD | 	call	#pushregs_
290e8     4C 17 B0 FD | 	call	#__system___sdmm_open
290ec     3D A7 0A F6 | 	mov	local01, result1 wz
290f0     00 7A 06 A6 |  if_e	mov	result1, #0
290f4     4C 00 90 AD |  if_e	jmp	#LR__4031
290f8     53 93 02 F6 | 	mov	arg01, local01
290fc     34 FF BF FD | 	call	#__system___vfs_open_fat_handle
29100     3D A9 0A F6 | 	mov	local02, result1 wz
29104     38 00 90 5D |  if_ne	jmp	#LR__4030
29108     24 A6 06 F1 | 	add	local01, #36
2910c     53 AB 02 FB | 	rdlong	local03, local01
29110     55 AD 02 F6 | 	mov	local04, local03
29114     24 A6 86 F1 | 	sub	local01, #36
29118     13 AC 46 F7 | 	zerox	local04, #19
2911c     14 AA 46 F0 | 	shr	local03, #20
29120     02 AA 66 F0 | 	shl	local03, #2
29124     2D AB 02 F1 | 	add	local03, __methods__
29128     55 AB 02 FB | 	rdlong	local03, local03
2912c     53 93 02 F6 | 	mov	arg01, local01
29130     32 A7 02 F6 | 	mov	local01, objptr
29134     56 65 02 F6 | 	mov	objptr, local04
29138     2D AA 62 FD | 	call	local03
2913c     53 65 02 F6 | 	mov	objptr, local01
29140                 | LR__4030
29140     54 7B 02 F6 | 	mov	result1, local02
29144                 | LR__4031
29144     E7 F0 03 F6 | 	mov	ptra, fp
29148     F2 00 A0 FD | 	call	#popregs_
2914c                 | __system___vfs_open_sdcardx_ret
2914c     2D 00 64 FD | 	ret
29150                 | 
29150                 | __system____default_getc
29150     03 CA 05 F6 | 	mov	COUNT_, #3
29154     E8 00 A0 FD | 	call	#pushregs_
29158     49 A7 02 F6 | 	mov	local01, arg01
2915c     53 A9 02 FB | 	rdlong	local02, local01
29160     08 A6 06 F1 | 	add	local01, #8
29164     53 AB 02 FB | 	rdlong	local03, local01
29168     08 A6 86 F1 | 	sub	local01, #8
2916c     08 AA CE F7 | 	test	local03, #8 wz
29170     53 93 02 56 |  if_ne	mov	arg01, local01
29174     08 01 B0 5D |  if_ne	call	#__system____default_flush
29178     08 A6 06 F1 | 	add	local01, #8
2917c     53 AB 02 FB | 	rdlong	local03, local01
29180     04 AA 46 F5 | 	or	local03, #4
29184     53 AB 62 FC | 	wrlong	local03, local01
29188     08 A6 86 F1 | 	sub	local01, #8
2918c     54 AB 0A FB | 	rdlong	local03, local02 wz
29190     0C 00 90 5D |  if_ne	jmp	#LR__4040
29194     53 93 02 F6 | 	mov	arg01, local01
29198     E0 18 B0 FD | 	call	#__system____default_filbuf
2919c     3D AB 02 F6 | 	mov	local03, result1
291a0                 | LR__4040
291a0     01 AA 56 F2 | 	cmps	local03, #1 wc
291a4     01 7A 66 C6 |  if_b	neg	result1, #1
291a8     1C 00 90 CD |  if_b	jmp	#LR__4041
291ac     01 AA 86 F1 | 	sub	local03, #1
291b0     54 AB 62 FC | 	wrlong	local03, local02
291b4     04 A8 06 F1 | 	add	local02, #4
291b8     54 AB 02 FB | 	rdlong	local03, local02
291bc     55 7B C2 FA | 	rdbyte	result1, local03
291c0     01 AA 06 F1 | 	add	local03, #1
291c4     54 AB 62 FC | 	wrlong	local03, local02
291c8                 | LR__4041
291c8     E7 F0 03 F6 | 	mov	ptra, fp
291cc     F2 00 A0 FD | 	call	#popregs_
291d0                 | __system____default_getc_ret
291d0     2D 00 64 FD | 	ret
291d4                 | 
291d4                 | __system____default_putc
291d4     06 CA 05 F6 | 	mov	COUNT_, #6
291d8     E8 00 A0 FD | 	call	#pushregs_
291dc     49 A7 02 F6 | 	mov	local01, arg01
291e0     4A A9 02 F6 | 	mov	local02, arg02
291e4     54 AB 02 FB | 	rdlong	local03, local02
291e8     08 A8 06 F1 | 	add	local02, #8
291ec     54 95 02 FB | 	rdlong	arg02, local02
291f0     08 A8 86 F1 | 	sub	local02, #8
291f4     04 94 CE F7 | 	test	arg02, #4 wz
291f8     54 93 02 56 |  if_ne	mov	arg01, local02
291fc     80 00 B0 5D |  if_ne	call	#__system____default_flush
29200     08 A8 06 F1 | 	add	local02, #8
29204     54 AD 02 FB | 	rdlong	local04, local02
29208     08 AC 46 F5 | 	or	local04, #8
2920c     54 AD 62 FC | 	wrlong	local04, local02
29210     55 AF 02 FB | 	rdlong	local05, local03
29214     0C AA 06 F1 | 	add	local03, #12
29218     55 95 02 FB | 	rdlong	arg02, local03
2921c     0C AA 86 F1 | 	sub	local03, #12
29220     57 7B 02 F6 | 	mov	result1, local05
29224     4A 7B 02 F1 | 	add	result1, arg02
29228     3D A7 42 FC | 	wrbyte	local01, result1
2922c     53 A7 E2 F8 | 	getbyte	local01, local01, #0
29230     01 AE 06 F1 | 	add	local05, #1
29234     55 AF 62 FC | 	wrlong	local05, local03
29238     02 A8 86 F1 | 	sub	local02, #2
2923c     54 B1 EA FA | 	rdword	local06, local02 wz
29240     06 A8 86 F1 | 	sub	local02, #6
29244     08 AA 06 51 |  if_ne	add	local03, #8
29248     55 AD 02 5B |  if_ne	rdlong	local04, local03
2924c     56 AF 0A 52 |  if_ne	cmp	local05, local04 wz
29250     0C 00 90 AD |  if_e	jmp	#LR__4050
29254     0A A6 0E F2 | 	cmp	local01, #10 wz
29258     01 B0 0E A2 |  if_e	cmp	local06, #1 wz
2925c     10 00 90 5D |  if_ne	jmp	#LR__4051
29260                 | LR__4050
29260     54 93 02 F6 | 	mov	arg01, local02
29264     18 00 B0 FD | 	call	#__system____default_flush
29268     00 7A 0E F2 | 	cmp	result1, #0 wz
2926c     01 A6 66 56 |  if_ne	neg	local01, #1
29270                 | LR__4051
29270     53 7B 02 F6 | 	mov	result1, local01
29274     E7 F0 03 F6 | 	mov	ptra, fp
29278     F2 00 A0 FD | 	call	#popregs_
2927c                 | __system____default_putc_ret
2927c     2D 00 64 FD | 	ret
29280                 | 
29280                 | __system____default_flush
29280     07 CA 05 F6 | 	mov	COUNT_, #7
29284     E8 00 A0 FD | 	call	#pushregs_
29288     49 A7 02 F6 | 	mov	local01, arg01
2928c     53 A9 02 FB | 	rdlong	local02, local01
29290     54 AB 02 FB | 	rdlong	local03, local02
29294     08 A6 06 F1 | 	add	local01, #8
29298     53 7D 02 FB | 	rdlong	result2, local01
2929c     08 A6 86 F1 | 	sub	local01, #8
292a0     08 7C CE F7 | 	test	result2, #8 wz
292a4     D4 00 90 AD |  if_e	jmp	#LR__4062
292a8     01 AA 56 F2 | 	cmps	local03, #1 wc
292ac     2C 01 90 CD |  if_b	jmp	#LR__4064
292b0     08 A6 06 F1 | 	add	local01, #8
292b4     53 7D 02 FB | 	rdlong	result2, local01
292b8     08 A6 86 F1 | 	sub	local01, #8
292bc     80 7C CE F7 | 	test	result2, #128 wz
292c0     6C 00 90 AD |  if_e	jmp	#LR__4061
292c4     08 A6 06 F1 | 	add	local01, #8
292c8     53 97 02 FB | 	rdlong	arg03, local01
292cc     08 A6 86 F1 | 	sub	local01, #8
292d0     00 97 CE F7 | 	test	arg03, #256 wz
292d4     58 00 90 AD |  if_e	jmp	#LR__4060
292d8     30 A6 06 F1 | 	add	local01, #48
292dc     53 AD 02 FB | 	rdlong	local04, local01
292e0     56 AF 02 F6 | 	mov	local05, local04
292e4     30 A6 86 F1 | 	sub	local01, #48
292e8     13 AE 46 F7 | 	zerox	local05, #19
292ec     14 AC 46 F0 | 	shr	local04, #20
292f0     02 AC 66 F0 | 	shl	local04, #2
292f4     2D AD 02 F1 | 	add	local04, __methods__
292f8     56 AD 02 FB | 	rdlong	local04, local04
292fc     53 93 02 F6 | 	mov	arg01, local01
29300     00 94 06 F6 | 	mov	arg02, #0
29304     00 96 06 F6 | 	mov	arg03, #0
29308     02 98 06 F6 | 	mov	arg04, #2
2930c     32 B1 02 F6 | 	mov	local06, objptr
29310     57 65 02 F6 | 	mov	objptr, local05
29314     2D AC 62 FD | 	call	local04
29318     58 65 02 F6 | 	mov	objptr, local06
2931c     08 A6 06 F1 | 	add	local01, #8
29320     53 B1 02 FB | 	rdlong	local06, local01
29324     00 B1 26 F5 | 	andn	local06, #256
29328     53 B1 62 FC | 	wrlong	local06, local01
2932c     08 A6 86 F1 | 	sub	local01, #8
29330                 | LR__4060
29330                 | LR__4061
29330     18 A6 06 F1 | 	add	local01, #24
29334     53 AD 02 FB | 	rdlong	local04, local01
29338     56 AF 02 F6 | 	mov	local05, local04
2933c     18 A6 86 F1 | 	sub	local01, #24
29340     13 AE 46 F7 | 	zerox	local05, #19
29344     14 AC 46 F0 | 	shr	local04, #20
29348     02 AC 66 F0 | 	shl	local04, #2
2934c     2D AD 02 F1 | 	add	local04, __methods__
29350     56 AD 02 FB | 	rdlong	local04, local04
29354     0C A8 06 F1 | 	add	local02, #12
29358     54 95 02 FB | 	rdlong	arg02, local02
2935c     0C A8 86 F1 | 	sub	local02, #12
29360     53 93 02 F6 | 	mov	arg01, local01
29364     55 97 02 F6 | 	mov	arg03, local03
29368     32 B1 02 F6 | 	mov	local06, objptr
2936c     57 65 02 F6 | 	mov	objptr, local05
29370     2D AC 62 FD | 	call	local04
29374     58 65 02 F6 | 	mov	objptr, local06
29378     60 00 90 FD | 	jmp	#LR__4064
2937c                 | LR__4062
2937c     08 A6 06 F1 | 	add	local01, #8
29380     53 B1 02 FB | 	rdlong	local06, local01
29384     08 A6 86 F1 | 	sub	local01, #8
29388     04 B0 CE F7 | 	test	local06, #4 wz
2938c     00 AA 0E 52 |  if_ne	cmp	local03, #0 wz
29390     48 00 90 AD |  if_e	jmp	#LR__4063
29394     55 95 62 F6 | 	neg	arg02, local03
29398     4A 97 02 F6 | 	mov	arg03, arg02
2939c     1F 96 C6 F0 | 	sar	arg03, #31
293a0     30 A6 06 F1 | 	add	local01, #48
293a4     53 AD 02 FB | 	rdlong	local04, local01
293a8     56 AF 02 F6 | 	mov	local05, local04
293ac     30 A6 86 F1 | 	sub	local01, #48
293b0     13 AE 46 F7 | 	zerox	local05, #19
293b4     14 AC 46 F0 | 	shr	local04, #20
293b8     02 AC 66 F0 | 	shl	local04, #2
293bc     2D AD 02 F1 | 	add	local04, __methods__
293c0     56 AD 02 FB | 	rdlong	local04, local04
293c4     53 93 02 F6 | 	mov	arg01, local01
293c8     01 98 06 F6 | 	mov	arg04, #1
293cc     32 B1 02 F6 | 	mov	local06, objptr
293d0     57 65 02 F6 | 	mov	objptr, local05
293d4     2D AC 62 FD | 	call	local04
293d8     58 65 02 F6 | 	mov	objptr, local06
293dc                 | LR__4063
293dc                 | LR__4064
293dc     54 01 68 FC | 	wrlong	#0, local02
293e0     04 A8 06 F1 | 	add	local02, #4
293e4     54 01 68 FC | 	wrlong	#0, local02
293e8     08 A6 06 F1 | 	add	local01, #8
293ec     53 B3 02 FB | 	rdlong	local07, local01
293f0     0C B2 26 F5 | 	andn	local07, #12
293f4     53 B3 62 FC | 	wrlong	local07, local01
293f8     00 7A 06 F6 | 	mov	result1, #0
293fc     E7 F0 03 F6 | 	mov	ptra, fp
29400     F2 00 A0 FD | 	call	#popregs_
29404                 | __system____default_flush_ret
29404     2D 00 64 FD | 	ret
29408                 | 
29408                 | __system____default_buffer_init
29408     02 CA 05 F6 | 	mov	COUNT_, #2
2940c     E8 00 A0 FD | 	call	#pushregs_
29410     49 A7 02 F6 | 	mov	local01, arg01
29414     53 A9 02 FB | 	rdlong	local02, local01
29418     53 93 02 F6 | 	mov	arg01, local01
2941c     A4 03 B0 FD | 	call	#__system___isatty
29420     00 7A 0E F2 | 	cmp	result1, #0 wz
29424     06 A6 06 51 |  if_ne	add	local01, #6
29428     53 0B 58 5C |  if_ne	wrword	#5, local01
2942c     06 A6 06 A1 |  if_e	add	local01, #6
29430     53 0D 58 AC |  if_e	wrword	#6, local01
29434     10 A8 06 F1 | 	add	local02, #16
29438     54 A7 02 F6 | 	mov	local01, local02
2943c     04 A8 86 F1 | 	sub	local02, #4
29440     54 A7 62 FC | 	wrlong	local01, local02
29444     04 A8 86 F1 | 	sub	local02, #4
29448     02 00 80 FF 
2944c     54 01 68 FC | 	wrlong	##1024, local02
29450     00 7A 06 F6 | 	mov	result1, #0
29454     E7 F0 03 F6 | 	mov	ptra, fp
29458     F2 00 A0 FD | 	call	#popregs_
2945c                 | __system____default_buffer_init_ret
2945c     2D 00 64 FD | 	ret
29460                 | 
29460                 | __system__stat
29460     04 CA 05 F6 | 	mov	COUNT_, #4
29464     E8 00 A0 FD | 	call	#pushregs_
29468     4A A7 02 F6 | 	mov	local01, arg02
2946c     35 A9 02 F6 | 	mov	local02, ptr___system__dat__
29470     84 A9 06 F1 | 	add	local02, #388
29474     49 95 02 F6 | 	mov	arg02, arg01
29478     54 93 02 F6 | 	mov	arg01, local02
2947c     00 96 06 F6 | 	mov	arg03, #0
29480     A0 BC BF FD | 	call	#__system____getvfsforfile
29484     3D AB 0A F6 | 	mov	local03, result1 wz
29488     10 00 90 AD |  if_e	jmp	#LR__4070
2948c     34 AA 06 F1 | 	add	local03, #52
29490     55 97 0A FB | 	rdlong	arg03, local03 wz
29494     34 AA 86 F1 | 	sub	local03, #52
29498     14 00 90 5D |  if_ne	jmp	#LR__4071
2949c                 | LR__4070
2949c     20 6A 06 F1 | 	add	ptr___system__dat__, #32
294a0     35 21 68 FC | 	wrlong	#16, ptr___system__dat__
294a4     20 6A 86 F1 | 	sub	ptr___system__dat__, #32
294a8     01 7A 66 F6 | 	neg	result1, #1
294ac     68 00 90 FD | 	jmp	#LR__4072
294b0                 | LR__4071
294b0     53 93 02 F6 | 	mov	arg01, local01
294b4     00 94 06 F6 | 	mov	arg02, #0
294b8     34 96 06 F6 | 	mov	arg03, #52
294bc     49 AD 02 F6 | 	mov	local04, arg01
294c0     D8 00 A0 FD | 	call	#\builtin_bytefill_
294c4     56 7B 02 F6 | 	mov	result1, local04
294c8     54 93 CA FA | 	rdbyte	arg01, local02 wz
294cc     08 A6 06 A1 |  if_e	add	local01, #8
294d0     08 00 80 AF 
294d4     53 FF 6B AC |  if_e	wrlong	##4607, local01
294d8     00 7A 06 A6 |  if_e	mov	result1, #0
294dc     38 00 90 AD |  if_e	jmp	#LR__4072
294e0     34 AA 06 F1 | 	add	local03, #52
294e4     55 AB 02 FB | 	rdlong	local03, local03
294e8     55 AD 02 F6 | 	mov	local04, local03
294ec     13 AA 46 F7 | 	zerox	local03, #19
294f0     14 AC 46 F0 | 	shr	local04, #20
294f4     02 AC 66 F0 | 	shl	local04, #2
294f8     2D AD 02 F1 | 	add	local04, __methods__
294fc     56 AD 02 FB | 	rdlong	local04, local04
29500     54 93 02 F6 | 	mov	arg01, local02
29504     53 95 02 F6 | 	mov	arg02, local01
29508     32 A9 02 F6 | 	mov	local02, objptr
2950c     55 65 02 F6 | 	mov	objptr, local03
29510     2D AC 62 FD | 	call	local04
29514     54 65 02 F6 | 	mov	objptr, local02
29518                 | LR__4072
29518     E7 F0 03 F6 | 	mov	ptra, fp
2951c     F2 00 A0 FD | 	call	#popregs_
29520                 | __system__stat_ret
29520     2D 00 64 FD | 	ret
29524                 | 
29524                 | __system__write
29524     01 CA 05 F6 | 	mov	COUNT_, #1
29528     E8 00 A0 FD | 	call	#pushregs_
2952c     0A 92 16 F2 | 	cmp	arg01, #10 wc
29530     20 6A 06 31 |  if_ae	add	ptr___system__dat__, #32
29534     35 0B 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
29538     20 6A 86 31 |  if_ae	sub	ptr___system__dat__, #32
2953c     01 7A 66 36 |  if_ae	neg	result1, #1
29540     1C 00 90 3D |  if_ae	jmp	#LR__4080
29544     34 92 06 FD | 	qmul	arg01, #52
29548     35 A7 02 F6 | 	mov	local01, ptr___system__dat__
2954c     02 00 00 FF 
29550     2C A7 06 F1 | 	add	local01, ##1324
29554     18 92 62 FD | 	getqx	arg01
29558     53 93 02 F1 | 	add	arg01, local01
2955c     3C 0F B0 FD | 	call	#__system___vfswrite
29560                 | LR__4080
29560     E7 F0 03 F6 | 	mov	ptra, fp
29564     F2 00 A0 FD | 	call	#popregs_
29568                 | __system__write_ret
29568     2D 00 64 FD | 	ret
2956c                 | 
2956c                 | __system__read
2956c     01 CA 05 F6 | 	mov	COUNT_, #1
29570     E8 00 A0 FD | 	call	#pushregs_
29574     0A 92 16 F2 | 	cmp	arg01, #10 wc
29578     20 6A 06 31 |  if_ae	add	ptr___system__dat__, #32
2957c     35 0B 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
29580     20 6A 86 31 |  if_ae	sub	ptr___system__dat__, #32
29584     01 7A 66 36 |  if_ae	neg	result1, #1
29588     1C 00 90 3D |  if_ae	jmp	#LR__4090
2958c     34 92 06 FD | 	qmul	arg01, #52
29590     35 A7 02 F6 | 	mov	local01, ptr___system__dat__
29594     02 00 00 FF 
29598     2C A7 06 F1 | 	add	local01, ##1324
2959c     18 92 62 FD | 	getqx	arg01
295a0     53 93 02 F1 | 	add	arg01, local01
295a4     C0 10 B0 FD | 	call	#__system___vfsread
295a8                 | LR__4090
295a8     E7 F0 03 F6 | 	mov	ptra, fp
295ac     F2 00 A0 FD | 	call	#popregs_
295b0                 | __system__read_ret
295b0     2D 00 64 FD | 	ret
295b4                 | 
295b4                 | __system__close
295b4     01 CA 05 F6 | 	mov	COUNT_, #1
295b8     E8 00 A0 FD | 	call	#pushregs_
295bc     0A 92 16 F2 | 	cmp	arg01, #10 wc
295c0     20 6A 06 31 |  if_ae	add	ptr___system__dat__, #32
295c4     35 0B 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
295c8     20 6A 86 31 |  if_ae	sub	ptr___system__dat__, #32
295cc     01 7A 66 36 |  if_ae	neg	result1, #1
295d0     1C 00 90 3D |  if_ae	jmp	#LR__4100
295d4     34 92 06 FD | 	qmul	arg01, #52
295d8     35 A7 02 F6 | 	mov	local01, ptr___system__dat__
295dc     02 00 00 FF 
295e0     2C A7 06 F1 | 	add	local01, ##1324
295e4     18 92 62 FD | 	getqx	arg01
295e8     53 93 02 F1 | 	add	arg01, local01
295ec     60 F9 BF FD | 	call	#__system___closeraw
295f0                 | LR__4100
295f0     E7 F0 03 F6 | 	mov	ptra, fp
295f4     F2 00 A0 FD | 	call	#popregs_
295f8                 | __system__close_ret
295f8     2D 00 64 FD | 	ret
295fc                 | 
295fc                 | __system__lseek
295fc     0B CA 05 F6 | 	mov	COUNT_, #11
29600     E8 00 A0 FD | 	call	#pushregs_
29604     49 AF 02 F6 | 	mov	local05, arg01
29608     4A A7 02 F6 | 	mov	local01, arg02
2960c     4B A9 02 F6 | 	mov	local02, arg03
29610     4C B1 02 F6 | 	mov	local06, arg04
29614     0A AE 16 F2 | 	cmp	local05, #10 wc
29618     18 00 90 CD |  if_b	jmp	#LR__4110
2961c     20 6A 06 F1 | 	add	ptr___system__dat__, #32
29620     35 0B 68 FC | 	wrlong	#5, ptr___system__dat__
29624     20 6A 86 F1 | 	sub	ptr___system__dat__, #32
29628     01 7C 66 F6 | 	neg	result2, #1
2962c     01 7A 66 F6 | 	neg	result1, #1
29630     FC 00 90 FD | 	jmp	#LR__4113
29634                 | LR__4110
29634     34 AE 06 FD | 	qmul	local05, #52
29638     35 93 02 F6 | 	mov	arg01, ptr___system__dat__
2963c     02 00 00 FF 
29640     2C 93 06 F1 | 	add	arg01, ##1324
29644     18 B2 62 FD | 	getqx	local07
29648     49 B3 02 F1 | 	add	local07, arg01
2964c     30 B2 06 F1 | 	add	local07, #48
29650     59 AF 0A FB | 	rdlong	local05, local07 wz
29654     30 B2 86 F1 | 	sub	local07, #48
29658     18 00 90 5D |  if_ne	jmp	#LR__4111
2965c     20 6A 06 F1 | 	add	ptr___system__dat__, #32
29660     35 21 68 FC | 	wrlong	#16, ptr___system__dat__
29664     20 6A 86 F1 | 	sub	ptr___system__dat__, #32
29668     01 7C 66 F6 | 	neg	result2, #1
2966c     01 7A 66 F6 | 	neg	result1, #1
29670     BC 00 90 FD | 	jmp	#LR__4113
29674                 | LR__4111
29674     08 B2 06 F1 | 	add	local07, #8
29678     59 B5 02 FB | 	rdlong	local08, local07
2967c     08 B2 86 F1 | 	sub	local07, #8
29680     80 B4 CE F7 | 	test	local08, #128 wz
29684     08 B2 06 51 |  if_ne	add	local07, #8
29688     59 B5 02 5B |  if_ne	rdlong	local08, local07
2968c     00 B5 46 55 |  if_ne	or	local08, #256
29690     59 B5 62 5C |  if_ne	wrlong	local08, local07
29694     08 B2 86 51 |  if_ne	sub	local07, #8
29698     53 95 02 F6 | 	mov	arg02, local01
2969c     54 97 02 F6 | 	mov	arg03, local02
296a0     30 B2 06 F1 | 	add	local07, #48
296a4     59 B7 02 FB | 	rdlong	local09, local07
296a8     5B B9 02 F6 | 	mov	local10, local09
296ac     30 B2 86 F1 | 	sub	local07, #48
296b0     13 B8 46 F7 | 	zerox	local10, #19
296b4     14 B6 46 F0 | 	shr	local09, #20
296b8     02 B6 66 F0 | 	shl	local09, #2
296bc     2D B7 02 F1 | 	add	local09, __methods__
296c0     5B B7 02 FB | 	rdlong	local09, local09
296c4     59 93 02 F6 | 	mov	arg01, local07
296c8     58 99 02 F6 | 	mov	arg04, local06
296cc     32 BB 02 F6 | 	mov	local11, objptr
296d0     5C 65 02 F6 | 	mov	objptr, local10
296d4     2D B6 62 FD | 	call	local09
296d8     5D 65 02 F6 | 	mov	objptr, local11
296dc     3D AB 02 F6 | 	mov	local03, result1
296e0     3E AD 02 F6 | 	mov	local04, result2
296e4     55 93 02 F6 | 	mov	arg01, local03
296e8     56 95 02 F6 | 	mov	arg02, local04
296ec     00 7A 06 F6 | 	mov	result1, #0
296f0     00 92 1E F2 | 	cmp	arg01, #0 wcz
296f4     00 94 7E F2 | 	cmpsx	arg02, #0 wcz
296f8     01 7A 86 56 |  if_ne	negc	result1, #1
296fc     00 7A 56 F2 | 	cmps	result1, #0 wc
29700     24 00 90 3D |  if_ae	jmp	#LR__4112
29704     55 93 6A F6 | 	neg	arg01, local03 wz
29708     20 6A 06 F1 | 	add	ptr___system__dat__, #32
2970c     35 93 62 FC | 	wrlong	arg01, ptr___system__dat__
29710     20 6A 86 F1 | 	sub	ptr___system__dat__, #32
29714     01 7A 66 56 |  if_ne	neg	result1, #1
29718     00 7A 06 A6 |  if_e	mov	result1, #0
2971c     3D 7D 02 F6 | 	mov	result2, result1
29720     1F 7C C6 F0 | 	sar	result2, #31
29724     08 00 90 FD | 	jmp	#LR__4113
29728                 | LR__4112
29728     55 7B 02 F6 | 	mov	result1, local03
2972c     56 7D 02 F6 | 	mov	result2, local04
29730                 | LR__4113
29730     E7 F0 03 F6 | 	mov	ptra, fp
29734     F2 00 A0 FD | 	call	#popregs_
29738                 | __system__lseek_ret
29738     2D 00 64 FD | 	ret
2973c                 | 
2973c                 | __system___ioctl
2973c     03 CA 05 F6 | 	mov	COUNT_, #3
29740     E8 00 A0 FD | 	call	#pushregs_
29744     00 92 4E F2 | 	cmps	arg01, #0 wz
29748     20 6A 06 A1 |  if_e	add	ptr___system__dat__, #32
2974c     35 0B 68 AC |  if_e	wrlong	#5, ptr___system__dat__
29750     20 6A 86 A1 |  if_e	sub	ptr___system__dat__, #32
29754     01 7A 66 A6 |  if_e	neg	result1, #1
29758     5C 00 90 AD |  if_e	jmp	#LR__4121
2975c     28 92 06 F1 | 	add	arg01, #40
29760     49 A7 02 FB | 	rdlong	local01, arg01
29764     53 A9 02 F6 | 	mov	local02, local01
29768     28 92 86 F1 | 	sub	arg01, #40
2976c     13 A8 46 F7 | 	zerox	local02, #19
29770     14 A6 46 F0 | 	shr	local01, #20
29774     02 A6 66 F0 | 	shl	local01, #2
29778     2D A7 02 F1 | 	add	local01, __methods__
2977c     53 A7 02 FB | 	rdlong	local01, local01
29780     32 AB 02 F6 | 	mov	local03, objptr
29784     54 65 02 F6 | 	mov	objptr, local02
29788     2D A6 62 FD | 	call	local01
2978c     55 65 02 F6 | 	mov	objptr, local03
29790     3D 93 0A F6 | 	mov	arg01, result1 wz
29794     1C 00 90 AD |  if_e	jmp	#LR__4120
29798     00 92 4E F2 | 	cmps	arg01, #0 wz
2979c     20 6A 06 F1 | 	add	ptr___system__dat__, #32
297a0     35 93 62 FC | 	wrlong	arg01, ptr___system__dat__
297a4     20 6A 86 F1 | 	sub	ptr___system__dat__, #32
297a8     01 7A 66 56 |  if_ne	neg	result1, #1
297ac     00 7A 06 A6 |  if_e	mov	result1, #0
297b0     04 00 90 FD | 	jmp	#LR__4121
297b4                 | LR__4120
297b4     00 7A 06 F6 | 	mov	result1, #0
297b8                 | LR__4121
297b8     E7 F0 03 F6 | 	mov	ptra, fp
297bc     F2 00 A0 FD | 	call	#popregs_
297c0                 | __system___ioctl_ret
297c0     2D 00 64 FD | 	ret
297c4                 | 
297c4                 | __system___isatty
297c4     00 CA 05 F6 | 	mov	COUNT_, #0
297c8     E8 00 A0 FD | 	call	#pushregs_
297cc     0C F0 07 F1 | 	add	ptra, #12
297d0     E7 96 02 F6 | 	mov	arg03, fp
297d4     08 96 06 F1 | 	add	arg03, #8
297d8     00 95 06 F6 | 	mov	arg02, #256
297dc     5C FF BF FD | 	call	#__system___ioctl
297e0     00 7A 0E F2 | 	cmp	result1, #0 wz
297e4     01 7A 06 A6 |  if_e	mov	result1, #1
297e8     00 7A 06 56 |  if_ne	mov	result1, #0
297ec     E7 F0 03 F6 | 	mov	ptra, fp
297f0     F2 00 A0 FD | 	call	#popregs_
297f4                 | __system___isatty_ret
297f4     2D 00 64 FD | 	ret
297f8                 | 
297f8                 | __system____getftab
297f8     0A 92 16 F2 | 	cmp	arg01, #10 wc
297fc     34 92 06 CD |  if_b	qmul	arg01, #52
29800     00 7A 06 36 |  if_ae	mov	result1, #0
29804     35 93 02 C6 |  if_b	mov	arg01, ptr___system__dat__
29808     02 00 00 CF 
2980c     2C 93 06 C1 |  if_b	add	arg01, ##1324
29810     18 7A 62 CD |  if_b	getqx	result1
29814     49 7B 02 C1 |  if_b	add	result1, arg01
29818                 | __system____getftab_ret
29818     2D 00 64 FD | 	ret
2981c                 | 
2981c                 | __system__strncpy
2981c     49 81 02 F6 | 	mov	_var01, arg01
29820                 | LR__4130
29820     01 96 86 F1 | 	sub	arg03, #1
29824     00 96 56 F2 | 	cmps	arg03, #0 wc
29828     24 00 90 CD |  if_b	jmp	#LR__4131
2982c     4A 7B 02 F6 | 	mov	result1, arg02
29830     01 7A 06 F1 | 	add	result1, #1
29834     4A 83 C2 FA | 	rdbyte	_var02, arg02
29838     3D 95 02 F6 | 	mov	arg02, result1
2983c     40 83 42 FC | 	wrbyte	_var02, _var01
29840     41 83 E2 F8 | 	getbyte	_var02, _var02, #0
29844     07 82 4E F7 | 	zerox	_var02, #7 wz
29848     01 80 06 F1 | 	add	_var01, #1
2984c     D0 FF 9F 5D |  if_ne	jmp	#LR__4130
29850                 | LR__4131
29850     D7 0C 48 FB | 	callpa	#(@LR__4133-@LR__4132)>>2,fcache_load_ptr_
29854                 | LR__4132
29854     01 96 86 F1 | 	sub	arg03, #1
29858     00 96 56 F2 | 	cmps	arg03, #0 wc
2985c     40 85 02 36 |  if_ae	mov	_var03, _var01
29860     01 80 06 31 |  if_ae	add	_var01, #1
29864     42 01 48 3C |  if_ae	wrbyte	#0, _var03
29868     E8 FF 9F 3D |  if_ae	jmp	#LR__4132
2986c                 | LR__4133
2986c     49 7B 02 F6 | 	mov	result1, arg01
29870                 | __system__strncpy_ret
29870     2D 00 64 FD | 	ret
29874                 | 
29874                 | __system__strncat
29874     00 94 4E F2 | 	cmps	arg02, #0 wz
29878     54 00 90 AD |  if_e	jmp	#LR__4145
2987c     01 96 16 F2 | 	cmp	arg03, #1 wc
29880     4C 00 90 CD |  if_b	jmp	#LR__4145
29884     49 81 02 F6 | 	mov	_var01, arg01
29888     D7 06 48 FB | 	callpa	#(@LR__4141-@LR__4140)>>2,fcache_load_ptr_
2988c                 | LR__4140
2988c     40 7B CA FA | 	rdbyte	result1, _var01 wz
29890     01 80 06 51 |  if_ne	add	_var01, #1
29894     F4 FF 9F 5D |  if_ne	jmp	#LR__4140
29898                 | LR__4141
29898     4B 83 02 F6 | 	mov	_var02, arg03
2989c     D7 16 48 FB | 	callpa	#(@LR__4143-@LR__4142)>>2,fcache_load_ptr_
298a0                 | LR__4142
298a0     4A 85 C2 FA | 	rdbyte	_var03, arg02
298a4     42 87 02 F6 | 	mov	_var04, _var03
298a8     07 86 4E F7 | 	zerox	_var04, #7 wz
298ac     01 94 06 F1 | 	add	arg02, #1
298b0     18 00 90 AD |  if_e	jmp	#LR__4144
298b4     01 82 86 F1 | 	sub	_var02, #1
298b8     00 82 56 F2 | 	cmps	_var02, #0 wc
298bc     40 87 02 36 |  if_ae	mov	_var04, _var01
298c0     01 80 06 31 |  if_ae	add	_var01, #1
298c4     43 85 42 3C |  if_ae	wrbyte	_var03, _var04
298c8     D4 FF 9F 3D |  if_ae	jmp	#LR__4142
298cc                 | LR__4143
298cc                 | LR__4144
298cc     40 01 48 FC | 	wrbyte	#0, _var01
298d0                 | LR__4145
298d0     49 7B 02 F6 | 	mov	result1, arg01
298d4                 | __system__strncat_ret
298d4     2D 00 64 FD | 	ret
298d8                 | 
298d8                 | __system__strncmp
298d8     49 81 0A F6 | 	mov	_var01, arg01 wz
298dc     14 00 90 5D |  if_ne	jmp	#LR__4150
298e0     00 94 0E F2 | 	cmp	arg02, #0 wz
298e4     01 82 66 56 |  if_ne	neg	_var02, #1
298e8     00 82 06 A6 |  if_e	mov	_var02, #0
298ec     41 7B 02 F6 | 	mov	result1, _var02
298f0     74 00 90 FD | 	jmp	#__system__strncmp_ret
298f4                 | LR__4150
298f4     00 94 0E F2 | 	cmp	arg02, #0 wz
298f8     01 7A 06 A6 |  if_e	mov	result1, #1
298fc     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
29900     4B 85 02 F6 | 	mov	_var03, arg03
29904     D7 16 48 FB | 	callpa	#(@LR__4152-@LR__4151)>>2,fcache_load_ptr_
29908                 | LR__4151
29908     40 87 C2 FA | 	rdbyte	_var04, _var01
2990c     4A 89 02 F6 | 	mov	_var05, arg02
29910     44 8B C2 FA | 	rdbyte	_var06, _var05
29914     01 84 86 F1 | 	sub	_var03, #1
29918     00 84 56 F2 | 	cmps	_var03, #0 wc
2991c     01 80 06 F1 | 	add	_var01, #1
29920     01 94 06 F1 | 	add	arg02, #1
29924     00 86 0E 32 |  if_ae	cmp	_var04, #0 wz
29928     08 00 90 2D |  if_nc_and_z	jmp	#LR__4153
2992c     45 87 0A 32 |  if_ae	cmp	_var04, _var06 wz
29930     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4151
29934                 | LR__4152
29934                 | LR__4153
29934     00 84 56 F2 | 	cmps	_var03, #0 wc
29938     00 7A 06 C6 |  if_b	mov	result1, #0
2993c     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
29940     45 87 0A F2 | 	cmp	_var04, _var06 wz
29944     00 7A 06 A6 |  if_e	mov	result1, #0
29948     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2994c     00 86 0E F2 | 	cmp	_var04, #0 wz
29950     01 7A 66 A6 |  if_e	neg	result1, #1
29954     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
29958     00 8A 0E F2 | 	cmp	_var06, #0 wz
2995c     01 7A 06 A6 |  if_e	mov	result1, #1
29960     43 7B 02 56 |  if_ne	mov	result1, _var04
29964     45 7B 82 51 |  if_ne	sub	result1, _var06
29968                 | __system__strncmp_ret
29968     2D 00 64 FD | 	ret
2996c                 | 
2996c                 | __system____root_opendir
2996c     35 7B 02 F6 | 	mov	result1, ptr___system__dat__
29970     64 7A 06 F1 | 	add	result1, #100
29974     04 92 06 F1 | 	add	arg01, #4
29978     49 7B 62 FC | 	wrlong	result1, arg01
2997c     00 7A 06 F6 | 	mov	result1, #0
29980                 | __system____root_opendir_ret
29980     2D 00 64 FD | 	ret
29984                 | 
29984                 | __system____root_readdir
29984     03 CA 05 F6 | 	mov	COUNT_, #3
29988     E8 00 A0 FD | 	call	#pushregs_
2998c     49 A7 02 F6 | 	mov	local01, arg01
29990     4A A9 02 F6 | 	mov	local02, arg02
29994     04 A6 06 F1 | 	add	local01, #4
29998     53 AB 02 FB | 	rdlong	local03, local01
2999c     04 A6 86 F1 | 	sub	local01, #4
299a0                 | LR__4160
299a0     35 97 02 F6 | 	mov	arg03, ptr___system__dat__
299a4     74 96 06 F1 | 	add	arg03, #116
299a8     4B AB 0A F2 | 	cmp	local03, arg03 wz
299ac     01 7A 66 A6 |  if_e	neg	result1, #1
299b0     48 00 90 AD |  if_e	jmp	#LR__4161
299b4     55 97 0A FB | 	rdlong	arg03, local03 wz
299b8     04 AA 06 A1 |  if_e	add	local03, #4
299bc     E0 FF 9F AD |  if_e	jmp	#LR__4160
299c0     55 95 02 FB | 	rdlong	arg02, local03
299c4     01 94 06 F1 | 	add	arg02, #1
299c8     54 93 02 F6 | 	mov	arg01, local02
299cc     40 96 06 F6 | 	mov	arg03, #64
299d0     48 FE BF FD | 	call	#__system__strncpy
299d4     50 A8 06 F1 | 	add	local02, #80
299d8     54 03 48 FC | 	wrbyte	#1, local02
299dc     08 A8 86 F1 | 	sub	local02, #8
299e0     54 01 68 FC | 	wrlong	#0, local02
299e4     04 A8 06 F1 | 	add	local02, #4
299e8     54 01 68 FC | 	wrlong	#0, local02
299ec     04 AA 06 F1 | 	add	local03, #4
299f0     04 A6 06 F1 | 	add	local01, #4
299f4     53 AB 62 FC | 	wrlong	local03, local01
299f8     00 7A 06 F6 | 	mov	result1, #0
299fc                 | LR__4161
299fc     E7 F0 03 F6 | 	mov	ptra, fp
29a00     F2 00 A0 FD | 	call	#popregs_
29a04                 | __system____root_readdir_ret
29a04     2D 00 64 FD | 	ret
29a08                 | 
29a08                 | __system____root_closedir
29a08     00 7A 06 F6 | 	mov	result1, #0
29a0c                 | __system____root_closedir_ret
29a0c     2D 00 64 FD | 	ret
29a10                 | 
29a10                 | __system____root_stat
29a10     4A 81 02 F6 | 	mov	_var01, arg02
29a14     40 93 02 F6 | 	mov	arg01, _var01
29a18     00 94 06 F6 | 	mov	arg02, #0
29a1c     34 96 06 F6 | 	mov	arg03, #52
29a20     D8 00 A0 FD | 	call	#\builtin_bytefill_
29a24     08 80 06 F1 | 	add	_var01, #8
29a28     08 00 80 FF 
29a2c     40 FF 6B FC | 	wrlong	##4607, _var01
29a30     00 7A 06 F6 | 	mov	result1, #0
29a34                 | __system____root_stat_ret
29a34     2D 00 64 FD | 	ret
29a38                 | 
29a38                 | __system___normalizeName
29a38     00 80 06 F6 | 	mov	_var01, #0
29a3c     49 83 02 F6 | 	mov	_var02, arg01
29a40     41 85 02 F6 | 	mov	_var03, _var02
29a44                 | LR__4170
29a44     41 87 CA FA | 	rdbyte	_var04, _var02 wz
29a48     5C 01 90 AD |  if_e	jmp	#LR__4189
29a4c     00 80 0E F2 | 	cmp	_var01, #0 wz
29a50     42 87 02 56 |  if_ne	mov	_var04, _var03
29a54     01 84 06 51 |  if_ne	add	_var03, #1
29a58     43 5F 48 5C |  if_ne	wrbyte	#47, _var04
29a5c     00 80 06 56 |  if_ne	mov	_var01, #0
29a60     41 87 C2 FA | 	rdbyte	_var04, _var02
29a64     2E 86 0E F2 | 	cmp	_var04, #46 wz
29a68     D8 00 90 5D |  if_ne	jmp	#LR__4182
29a6c     01 82 06 F1 | 	add	_var02, #1
29a70     41 87 C2 FA | 	rdbyte	_var04, _var02
29a74     01 82 86 F1 | 	sub	_var02, #1
29a78     2F 86 0E F2 | 	cmp	_var04, #47 wz
29a7c     18 00 90 AD |  if_e	jmp	#LR__4171
29a80     01 82 06 F1 | 	add	_var02, #1
29a84     41 89 C2 FA | 	rdbyte	_var05, _var02
29a88     01 82 86 F1 | 	sub	_var02, #1
29a8c     44 8B 02 F6 | 	mov	_var06, _var05
29a90     07 8A 4E F7 | 	zerox	_var06, #7 wz
29a94     10 00 90 5D |  if_ne	jmp	#LR__4172
29a98                 | LR__4171
29a98     41 8D 02 F6 | 	mov	_var07, _var02
29a9c     01 8C 06 F1 | 	add	_var07, #1
29aa0     46 83 02 F6 | 	mov	_var02, _var07
29aa4     E0 00 90 FD | 	jmp	#LR__4186
29aa8                 | LR__4172
29aa8     01 82 06 F1 | 	add	_var02, #1
29aac     41 8D C2 FA | 	rdbyte	_var07, _var02
29ab0     01 82 86 F1 | 	sub	_var02, #1
29ab4     46 87 E2 F8 | 	getbyte	_var04, _var07, #0
29ab8     2E 86 0E F2 | 	cmp	_var04, #46 wz
29abc     84 00 90 5D |  if_ne	jmp	#LR__4181
29ac0     02 82 06 F1 | 	add	_var02, #2
29ac4     41 8D C2 FA | 	rdbyte	_var07, _var02
29ac8     02 82 86 F1 | 	sub	_var02, #2
29acc     46 87 E2 F8 | 	getbyte	_var04, _var07, #0
29ad0     2F 86 0E F2 | 	cmp	_var04, #47 wz
29ad4     18 00 90 AD |  if_e	jmp	#LR__4173
29ad8     02 82 06 F1 | 	add	_var02, #2
29adc     41 89 C2 FA | 	rdbyte	_var05, _var02
29ae0     02 82 86 F1 | 	sub	_var02, #2
29ae4     44 8B 02 F6 | 	mov	_var06, _var05
29ae8     07 8A 4E F7 | 	zerox	_var06, #7 wz
29aec     54 00 90 5D |  if_ne	jmp	#LR__4180
29af0                 | LR__4173
29af0     02 82 06 F1 | 	add	_var02, #2
29af4     49 85 5A F2 | 	cmps	_var03, arg01 wcz
29af8     40 00 90 ED |  if_be	jmp	#LR__4179
29afc     42 8F 02 F6 | 	mov	_var08, _var03
29b00     01 8E 86 F1 | 	sub	_var08, #1
29b04                 | LR__4174
29b04     47 87 C2 FA | 	rdbyte	_var04, _var08
29b08     2F 86 0E F2 | 	cmp	_var04, #47 wz
29b0c     0C 00 90 5D |  if_ne	jmp	#LR__4175
29b10     49 8F 5A F2 | 	cmps	_var08, arg01 wcz
29b14     01 8E 86 11 |  if_a	sub	_var08, #1
29b18     E8 FF 9F 1D |  if_a	jmp	#LR__4174
29b1c                 | LR__4175
29b1c     D7 0C 48 FB | 	callpa	#(@LR__4177-@LR__4176)>>2,fcache_load_ptr_
29b20                 | LR__4176
29b20     49 8F 5A F2 | 	cmps	_var08, arg01 wcz
29b24     10 00 90 ED |  if_be	jmp	#LR__4178
29b28     47 87 C2 FA | 	rdbyte	_var04, _var08
29b2c     2F 86 0E F2 | 	cmp	_var04, #47 wz
29b30     01 8E 86 51 |  if_ne	sub	_var08, #1
29b34     E8 FF 9F 5D |  if_ne	jmp	#LR__4176
29b38                 | LR__4177
29b38                 | LR__4178
29b38     47 85 02 F6 | 	mov	_var03, _var08
29b3c                 | LR__4179
29b3c     01 80 06 F6 | 	mov	_var01, #1
29b40     44 00 90 FD | 	jmp	#LR__4186
29b44                 | LR__4180
29b44                 | LR__4181
29b44                 | LR__4182
29b44     D7 18 48 FB | 	callpa	#(@LR__4184-@LR__4183)>>2,fcache_load_ptr_
29b48                 | LR__4183
29b48     41 87 CA FA | 	rdbyte	_var04, _var02 wz
29b4c     43 8D 02 56 |  if_ne	mov	_var07, _var04
29b50     2F 8C 0E 52 |  if_ne	cmp	_var07, #47 wz
29b54     20 00 90 AD |  if_e	jmp	#LR__4185
29b58     41 8B 02 F6 | 	mov	_var06, _var02
29b5c     41 89 02 F6 | 	mov	_var05, _var02
29b60     01 88 06 F1 | 	add	_var05, #1
29b64     45 91 C2 FA | 	rdbyte	_var09, _var06
29b68     44 83 02 F6 | 	mov	_var02, _var05
29b6c     42 91 42 FC | 	wrbyte	_var09, _var03
29b70     01 84 06 F1 | 	add	_var03, #1
29b74     D0 FF 9F FD | 	jmp	#LR__4183
29b78                 | LR__4184
29b78                 | LR__4185
29b78     41 87 C2 FA | 	rdbyte	_var04, _var02
29b7c     2F 86 0E F2 | 	cmp	_var04, #47 wz
29b80     C0 FE 9F 5D |  if_ne	jmp	#LR__4170
29b84     01 80 06 F6 | 	mov	_var01, #1
29b88                 | LR__4186
29b88     D7 0C 48 FB | 	callpa	#(@LR__4188-@LR__4187)>>2,fcache_load_ptr_
29b8c                 | LR__4187
29b8c     41 87 C2 FA | 	rdbyte	_var04, _var02
29b90     2F 86 0E F2 | 	cmp	_var04, #47 wz
29b94     41 8D 02 A6 |  if_e	mov	_var07, _var02
29b98     01 8C 06 A1 |  if_e	add	_var07, #1
29b9c     46 83 02 A6 |  if_e	mov	_var02, _var07
29ba0     E8 FF 9F AD |  if_e	jmp	#LR__4187
29ba4                 | LR__4188
29ba4     9C FE 9F FD | 	jmp	#LR__4170
29ba8                 | LR__4189
29ba8     42 01 48 FC | 	wrbyte	#0, _var03
29bac                 | __system___normalizeName_ret
29bac     2D 00 64 FD | 	ret
29bb0                 | 
29bb0                 | __system___strrev
29bb0     49 81 CA FA | 	rdbyte	_var01, arg01 wz
29bb4     40 00 90 AD |  if_e	jmp	#__system___strrev_ret
29bb8     49 83 02 F6 | 	mov	_var02, arg01
29bbc     D7 06 48 FB | 	callpa	#(@LR__4191-@LR__4190)>>2,fcache_load_ptr_
29bc0                 | LR__4190
29bc0     41 81 CA FA | 	rdbyte	_var01, _var02 wz
29bc4     01 82 06 51 |  if_ne	add	_var02, #1
29bc8     F4 FF 9F 5D |  if_ne	jmp	#LR__4190
29bcc                 | LR__4191
29bcc     01 82 86 F1 | 	sub	_var02, #1
29bd0     D7 12 48 FB | 	callpa	#(@LR__4193-@LR__4192)>>2,fcache_load_ptr_
29bd4                 | LR__4192
29bd4     49 83 5A F2 | 	cmps	_var02, arg01 wcz
29bd8     1C 00 90 ED |  if_be	jmp	#LR__4194
29bdc     49 81 C2 FA | 	rdbyte	_var01, arg01
29be0     41 85 C2 FA | 	rdbyte	_var03, _var02
29be4     49 85 42 FC | 	wrbyte	_var03, arg01
29be8     41 81 42 FC | 	wrbyte	_var01, _var02
29bec     01 92 06 F1 | 	add	arg01, #1
29bf0     01 82 86 F1 | 	sub	_var02, #1
29bf4     DC FF 9F FD | 	jmp	#LR__4192
29bf8                 | LR__4193
29bf8                 | LR__4194
29bf8                 | __system___strrev_ret
29bf8     2D 00 64 FD | 	ret
29bfc                 | 
29bfc                 | __system___fmtpad
29bfc     06 CA 05 F6 | 	mov	COUNT_, #6
29c00     E8 00 A0 FD | 	call	#pushregs_
29c04     49 A7 02 F6 | 	mov	local01, arg01
29c08     4A A9 02 F6 | 	mov	local02, arg02
29c0c     4B AB 02 F6 | 	mov	local03, arg03
29c10     54 93 EA F8 | 	getbyte	arg01, local02, #1
29c14     16 A8 46 F0 | 	shr	local02, #22
29c18     03 A8 0E F5 | 	and	local02, #3 wz
29c1c     00 AC 06 F6 | 	mov	local04, #0
29c20     01 A8 06 A6 |  if_e	mov	local02, #1
29c24     4C A9 CA F7 | 	test	local02, arg04 wz
29c28     00 7A 06 A6 |  if_e	mov	result1, #0
29c2c     88 00 90 AD |  if_e	jmp	#LR__4203
29c30     49 AB C2 F2 | 	subr	local03, arg01
29c34     01 AA 56 F2 | 	cmps	local03, #1 wc
29c38     00 7A 06 C6 |  if_b	mov	result1, #0
29c3c     78 00 90 CD |  if_b	jmp	#LR__4203
29c40     03 A8 0E F2 | 	cmp	local02, #3 wz
29c44     18 00 90 5D |  if_ne	jmp	#LR__4200
29c48     01 98 0E F2 | 	cmp	arg04, #1 wz
29c4c     6E A8 62 FD | 	wrz	local02
29c50     54 AB 02 F1 | 	add	local03, local02
29c54     55 AB 52 F6 | 	abs	local03, local03 wc
29c58     01 AA 46 F0 | 	shr	local03, #1
29c5c     55 AB 82 F6 | 	negc	local03, local03
29c60                 | LR__4200
29c60     01 AA 56 F2 | 	cmps	local03, #1 wc
29c64     4C 00 90 CD |  if_b	jmp	#LR__4202
29c68     55 AF 02 F6 | 	mov	local05, local03
29c6c                 | LR__4201
29c6c     53 A9 02 F6 | 	mov	local02, local01
29c70     53 B1 02 F6 | 	mov	local06, local01
29c74     13 A8 46 F7 | 	zerox	local02, #19
29c78     14 B0 46 F0 | 	shr	local06, #20
29c7c     02 B0 66 F0 | 	shl	local06, #2
29c80     2D B1 02 F1 | 	add	local06, __methods__
29c84     58 B1 02 FB | 	rdlong	local06, local06
29c88     20 92 06 F6 | 	mov	arg01, #32
29c8c     32 AB 02 F6 | 	mov	local03, objptr
29c90     54 65 02 F6 | 	mov	objptr, local02
29c94     2D B0 62 FD | 	call	local06
29c98     55 65 02 F6 | 	mov	objptr, local03
29c9c     3D B1 02 F6 | 	mov	local06, result1
29ca0     00 B0 56 F2 | 	cmps	local06, #0 wc
29ca4     58 7B 02 C6 |  if_b	mov	result1, local06
29ca8     0C 00 90 CD |  if_b	jmp	#LR__4203
29cac     58 AD 02 F1 | 	add	local04, local06
29cb0     EE AF 6E FB | 	djnz	local05, #LR__4201
29cb4                 | LR__4202
29cb4     56 7B 02 F6 | 	mov	result1, local04
29cb8                 | LR__4203
29cb8     E7 F0 03 F6 | 	mov	ptra, fp
29cbc     F2 00 A0 FD | 	call	#popregs_
29cc0                 | __system___fmtpad_ret
29cc0     2D 00 64 FD | 	ret
29cc4                 | 
29cc4                 | __system___uitoa
29cc4     04 CA 05 F6 | 	mov	COUNT_, #4
29cc8     E8 00 A0 FD | 	call	#pushregs_
29ccc     49 A7 02 F6 | 	mov	local01, arg01
29cd0     00 9A 4E F2 | 	cmps	arg05, #0 wz
29cd4     53 9B 02 F6 | 	mov	arg05, local01
29cd8     00 A8 06 F6 | 	mov	local02, #0
29cdc     37 AA 06 56 |  if_ne	mov	local03, #55
29ce0     57 AA 06 A6 |  if_e	mov	local03, #87
29ce4                 | LR__4210
29ce4     4B 95 12 FD | 	qdiv	arg02, arg03
29ce8     19 AC 62 FD | 	getqy	local04
29cec     4B 95 12 FD | 	qdiv	arg02, arg03
29cf0     0A AC 16 F2 | 	cmp	local04, #10 wc
29cf4     30 AC 06 C1 |  if_b	add	local04, #48
29cf8     55 AD 02 31 |  if_ae	add	local04, local03
29cfc     4D AD 42 FC | 	wrbyte	local04, arg05
29d00     01 9A 06 F1 | 	add	arg05, #1
29d04     01 A8 06 F1 | 	add	local02, #1
29d08     18 94 62 FD | 	getqx	arg02
29d0c     00 94 0E F2 | 	cmp	arg02, #0 wz
29d10     D0 FF 9F 5D |  if_ne	jmp	#LR__4210
29d14     4C A9 12 F2 | 	cmp	local02, arg04 wc
29d18     C8 FF 9F CD |  if_b	jmp	#LR__4210
29d1c     4D 01 48 FC | 	wrbyte	#0, arg05
29d20     53 93 02 F6 | 	mov	arg01, local01
29d24     88 FE BF FD | 	call	#__system___strrev
29d28     54 7B 02 F6 | 	mov	result1, local02
29d2c     E7 F0 03 F6 | 	mov	ptra, fp
29d30     F2 00 A0 FD | 	call	#popregs_
29d34                 | __system___uitoa_ret
29d34     2D 00 64 FD | 	ret
29d38                 | 
29d38                 | __system__disassemble_0582
29d38     10 CA 05 F6 | 	mov	COUNT_, #16
29d3c     E8 00 A0 FD | 	call	#pushregs_
29d40     49 A7 02 F6 | 	mov	local01, arg01
29d44     4A A9 02 F6 | 	mov	local02, arg02
29d48     4B AB 02 F6 | 	mov	local03, arg03
29d4c     4C AD 02 F6 | 	mov	local04, arg04
29d50     4D AF 02 F6 | 	mov	local05, arg05
29d54     57 93 52 F6 | 	abs	arg01, local05 wc
29d58     1F B0 C6 C9 |  if_b	decod	local06, #31
29d5c     00 B0 06 36 |  if_ae	mov	local06, #0
29d60     40 CF BF FD | 	call	#__system___float_fromuns
29d64     58 7B 62 F5 | 	xor	result1, local06
29d68     3D B3 02 F6 | 	mov	local07, result1
29d6c     00 B4 06 F6 | 	mov	local08, #0
29d70     53 93 02 F6 | 	mov	arg01, local01
29d74     00 94 06 F6 | 	mov	arg02, #0
29d78     01 96 06 F6 | 	mov	arg03, #1
29d7c     5C D7 BF FD | 	call	#__system___float_cmp
29d80     00 7A 0E F2 | 	cmp	result1, #0 wz
29d84     00 B6 06 A6 |  if_e	mov	local09, #0
29d88     54 01 68 AC |  if_e	wrlong	#0, local02
29d8c     55 B7 62 AC |  if_e	wrlong	local09, local03
29d90     8C 01 90 AD |  if_e	jmp	#LR__4232
29d94     53 93 02 F6 | 	mov	arg01, local01
29d98     40 DC BF FD | 	call	#__system____builtin_ilogb
29d9c     3D B9 02 F6 | 	mov	local10, result1
29da0     0A AE 0E F2 | 	cmp	local05, #10 wz
29da4     24 00 90 5D |  if_ne	jmp	#LR__4220
29da8     5C B7 02 F6 | 	mov	local09, local10
29dac     01 B6 66 F0 | 	shl	local09, #1
29db0     5C B7 02 F1 | 	add	local09, local10
29db4     5B B9 52 F6 | 	abs	local10, local09 wc
29db8     0A B8 16 FD | 	qdiv	local10, #10
29dbc     09 BA 06 F6 | 	mov	local11, #9
29dc0     18 B8 62 FD | 	getqx	local10
29dc4     5C B9 82 F6 | 	negc	local10, local10
29dc8     04 00 90 FD | 	jmp	#LR__4221
29dcc                 | LR__4220
29dcc     18 BA 06 F6 | 	mov	local11, #24
29dd0                 | LR__4221
29dd0                 | LR__4222
29dd0     08 B4 56 F2 | 	cmps	local08, #8 wc
29dd4     01 B4 06 F1 | 	add	local08, #1
29dd8     60 00 90 3D |  if_ae	jmp	#LR__4223
29ddc     00 C0 1F FF 
29de0     00 92 06 F6 | 	mov	arg01, ##1065353216
29de4     59 95 02 F6 | 	mov	arg02, local07
29de8     5C 97 02 F6 | 	mov	arg03, local10
29dec     D0 E2 BF FD | 	call	#__system___float_pow_n
29df0     3D 95 02 F6 | 	mov	arg02, result1
29df4     53 93 02 F6 | 	mov	arg01, local01
29df8     B0 D4 BF FD | 	call	#__system___float_div
29dfc     3D BD 02 F6 | 	mov	local12, result1
29e00     5E 93 02 F6 | 	mov	arg01, local12
29e04     00 C0 1F FF 
29e08     00 94 06 F6 | 	mov	arg02, ##1065353216
29e0c     01 96 06 F6 | 	mov	arg03, #1
29e10     C8 D6 BF FD | 	call	#__system___float_cmp
29e14     00 7A 56 F2 | 	cmps	result1, #0 wc
29e18     01 B8 86 C1 |  if_b	sub	local10, #1
29e1c     B0 FF 9F CD |  if_b	jmp	#LR__4222
29e20     59 95 02 F6 | 	mov	arg02, local07
29e24     5E 93 02 F6 | 	mov	arg01, local12
29e28     01 96 66 F6 | 	neg	arg03, #1
29e2c     AC D6 BF FD | 	call	#__system___float_cmp
29e30     00 7A 56 F2 | 	cmps	result1, #0 wc
29e34     01 B8 06 31 |  if_ae	add	local10, #1
29e38     94 FF 9F 3D |  if_ae	jmp	#LR__4222
29e3c                 | LR__4223
29e3c     5E 93 02 F6 | 	mov	arg01, local12
29e40     98 DB BF FD | 	call	#__system____builtin_ilogb
29e44     3D BF 02 F6 | 	mov	local13, result1
29e48     5E C1 02 F6 | 	mov	local14, local12
29e4c     17 C1 06 F4 | 	bitl	local14, #279
29e50     17 C0 26 F4 | 	bith	local14, #23
29e54     5F C1 62 F0 | 	shl	local14, local13
29e58     02 AE 0E F2 | 	cmp	local05, #2 wz
29e5c     02 AC 66 A0 |  if_e	shl	local04, #2
29e60     00 C2 06 F6 | 	mov	local15, #0
29e64     00 AC 56 F2 | 	cmps	local04, #0 wc
29e68     10 00 90 3D |  if_ae	jmp	#LR__4224
29e6c     5C AD C2 F2 | 	subr	local04, local10
29e70     00 AC 56 F2 | 	cmps	local04, #0 wc
29e74     A0 00 90 CD |  if_b	jmp	#LR__4231
29e78     04 00 90 FD | 	jmp	#LR__4225
29e7c                 | LR__4224
29e7c     01 AC 06 F1 | 	add	local04, #1
29e80                 | LR__4225
29e80     5D AD 7A F3 | 	fles	local04, local11 wcz
29e84     01 C4 06 F6 | 	mov	local16, #1
29e88     D7 22 48 FB | 	callpa	#(@LR__4227-@LR__4226)>>2,fcache_load_ptr_
29e8c                 | LR__4226
29e8c     00 40 00 FF 
29e90     00 C2 16 F2 | 	cmp	local15, ##8388608 wc
29e94     38 00 90 3D |  if_ae	jmp	#LR__4228
29e98     01 AC 56 F2 | 	cmps	local04, #1 wc
29e9c     01 AC 86 F1 | 	sub	local04, #1
29ea0     2C 00 90 CD |  if_b	jmp	#LR__4228
29ea4     57 C3 02 FD | 	qmul	local15, local05
29ea8     60 BF 02 F6 | 	mov	local13, local14
29eac     17 BE 46 F0 | 	shr	local13, #23
29eb0     17 C1 06 F4 | 	bitl	local14, #279
29eb4     18 C2 62 FD | 	getqx	local15
29eb8     57 C5 02 FD | 	qmul	local16, local05
29ebc     18 C4 62 FD | 	getqx	local16
29ec0     57 C1 02 FD | 	qmul	local14, local05
29ec4     5F C3 02 F1 | 	add	local15, local13
29ec8     18 C0 62 FD | 	getqx	local14
29ecc     BC FF 9F FD | 	jmp	#LR__4226
29ed0                 | LR__4227
29ed0                 | LR__4228
29ed0     57 B7 02 F6 | 	mov	local09, local05
29ed4     17 B6 66 F0 | 	shl	local09, #23
29ed8     5B BF 52 F6 | 	abs	local13, local09 wc
29edc     01 BE 46 F0 | 	shr	local13, #1
29ee0     5F BF 82 F6 | 	negc	local13, local13
29ee4     5F C1 1A F2 | 	cmp	local14, local13 wcz
29ee8     20 00 90 1D |  if_a	jmp	#LR__4229
29eec     17 AE 66 F0 | 	shl	local05, #23
29ef0     57 BF 52 F6 | 	abs	local13, local05 wc
29ef4     01 BE 46 F0 | 	shr	local13, #1
29ef8     5F BF 82 F6 | 	negc	local13, local13
29efc     5F C1 0A F2 | 	cmp	local14, local13 wz
29f00     14 00 90 5D |  if_ne	jmp	#LR__4230
29f04     01 C2 CE F7 | 	test	local15, #1 wz
29f08     0C 00 90 AD |  if_e	jmp	#LR__4230
29f0c                 | LR__4229
29f0c     01 C2 06 F1 | 	add	local15, #1
29f10     62 C3 0A F2 | 	cmp	local15, local16 wz
29f14     01 B8 06 A1 |  if_e	add	local10, #1
29f18                 | LR__4230
29f18                 | LR__4231
29f18     54 C3 62 FC | 	wrlong	local15, local02
29f1c     55 B9 62 FC | 	wrlong	local10, local03
29f20                 | LR__4232
29f20     E7 F0 03 F6 | 	mov	ptra, fp
29f24     F2 00 A0 FD | 	call	#popregs_
29f28                 | __system__disassemble_0582_ret
29f28     2D 00 64 FD | 	ret
29f2c                 | 
29f2c                 | __system__emitsign_0584
29f2c     00 7A 06 F6 | 	mov	result1, #0
29f30     00 94 0E F2 | 	cmp	arg02, #0 wz
29f34     49 81 02 56 |  if_ne	mov	_var01, arg01
29f38     01 92 06 51 |  if_ne	add	arg01, #1
29f3c     40 95 42 5C |  if_ne	wrbyte	arg02, _var01
29f40     01 7A 06 56 |  if_ne	mov	result1, #1
29f44     00 96 0E F2 | 	cmp	arg03, #0 wz
29f48     49 61 48 5C |  if_ne	wrbyte	#48, arg01
29f4c     01 92 06 51 |  if_ne	add	arg01, #1
29f50     49 97 42 5C |  if_ne	wrbyte	arg03, arg01
29f54     02 7A 06 51 |  if_ne	add	result1, #2
29f58                 | __system__emitsign_0584_ret
29f58     2D 00 64 FD | 	ret
29f5c                 | 
29f5c                 | __system___getiolock_0622
29f5c     01 CA 05 F6 | 	mov	COUNT_, #1
29f60     E8 00 A0 FD | 	call	#pushregs_
29f64     90 F8 BF FD | 	call	#__system____getftab
29f68     3D A7 0A F6 | 	mov	local01, result1 wz
29f6c     10 00 90 AD |  if_e	jmp	#LR__4240
29f70     08 A6 06 F1 | 	add	local01, #8
29f74     53 7B 0A FB | 	rdlong	result1, local01 wz
29f78     08 A6 86 F1 | 	sub	local01, #8
29f7c     10 00 90 5D |  if_ne	jmp	#LR__4241
29f80                 | LR__4240
29f80     35 7B 02 F6 | 	mov	result1, ptr___system__dat__
29f84     01 00 00 FF 
29f88     DC 7A 06 F1 | 	add	result1, ##732
29f8c     08 00 90 FD | 	jmp	#LR__4242
29f90                 | LR__4241
29f90     0C A6 06 F1 | 	add	local01, #12
29f94     53 7B 02 F6 | 	mov	result1, local01
29f98                 | LR__4242
29f98     E7 F0 03 F6 | 	mov	ptra, fp
29f9c     F2 00 A0 FD | 	call	#popregs_
29fa0                 | __system___getiolock_0622_ret
29fa0     2D 00 64 FD | 	ret
29fa4                 | 
29fa4                 | __system___gettxfunc
29fa4     01 CA 05 F6 | 	mov	COUNT_, #1
29fa8     E8 00 A0 FD | 	call	#pushregs_
29fac     48 F8 BF FD | 	call	#__system____getftab
29fb0     3D A7 0A F6 | 	mov	local01, result1 wz
29fb4     10 00 90 AD |  if_e	jmp	#LR__4250
29fb8     08 A6 06 F1 | 	add	local01, #8
29fbc     53 95 0A FB | 	rdlong	arg02, local01 wz
29fc0     08 A6 86 F1 | 	sub	local01, #8
29fc4     08 00 90 5D |  if_ne	jmp	#LR__4251
29fc8                 | LR__4250
29fc8     00 7A 06 F6 | 	mov	result1, #0
29fcc     0C 00 90 FD | 	jmp	#LR__4252
29fd0                 | LR__4251
29fd0     00 88 05 FF 
29fd4     00 A6 46 F5 | 	or	local01, ##185597952
29fd8     53 7B 02 F6 | 	mov	result1, local01
29fdc                 | LR__4252
29fdc     E7 F0 03 F6 | 	mov	ptra, fp
29fe0     F2 00 A0 FD | 	call	#popregs_
29fe4                 | __system___gettxfunc_ret
29fe4     2D 00 64 FD | 	ret
29fe8                 | 
29fe8                 | __system___getrxfunc
29fe8     01 CA 05 F6 | 	mov	COUNT_, #1
29fec     E8 00 A0 FD | 	call	#pushregs_
29ff0     04 F8 BF FD | 	call	#__system____getftab
29ff4     3D A7 0A F6 | 	mov	local01, result1 wz
29ff8     10 00 90 AD |  if_e	jmp	#LR__4260
29ffc     08 A6 06 F1 | 	add	local01, #8
2a000     53 95 0A FB | 	rdlong	arg02, local01 wz
2a004     08 A6 86 F1 | 	sub	local01, #8
2a008     08 00 90 5D |  if_ne	jmp	#LR__4261
2a00c                 | LR__4260
2a00c     00 7A 06 F6 | 	mov	result1, #0
2a010     0C 00 90 FD | 	jmp	#LR__4262
2a014                 | LR__4261
2a014     00 90 05 FF 
2a018     00 A6 46 F5 | 	or	local01, ##186646528
2a01c     53 7B 02 F6 | 	mov	result1, local01
2a020                 | LR__4262
2a020     E7 F0 03 F6 | 	mov	ptra, fp
2a024     F2 00 A0 FD | 	call	#popregs_
2a028                 | __system___getrxfunc_ret
2a028     2D 00 64 FD | 	ret
2a02c                 | 
2a02c                 | __system____ScanForChar
2a02c     49 81 02 F6 | 	mov	_var01, arg01
2a030     49 83 02 F6 | 	mov	_var02, arg01
2a034     D7 06 48 FB | 	callpa	#(@LR__4271-@LR__4270)>>2,fcache_load_ptr_
2a038                 | LR__4270
2a038     41 7B CA FA | 	rdbyte	result1, _var02 wz
2a03c     01 82 06 51 |  if_ne	add	_var02, #1
2a040     F4 FF 9F 5D |  if_ne	jmp	#LR__4270
2a044                 | LR__4271
2a044     49 83 82 F1 | 	sub	_var02, arg01
2a048     41 7B 02 F6 | 	mov	result1, _var02
2a04c     3D 93 0A F6 | 	mov	arg01, result1 wz
2a050     00 7A 06 A6 |  if_e	mov	result1, #0
2a054     B8 00 90 AD |  if_e	jmp	#LR__4278
2a058     4A 85 02 F6 | 	mov	_var03, arg02
2a05c     07 84 4E F7 | 	zerox	_var03, #7 wz
2a060     00 7A 06 A6 |  if_e	mov	result1, #0
2a064     A8 00 90 AD |  if_e	jmp	#LR__4278
2a068     01 96 16 F2 | 	cmp	arg03, #1 wc
2a06c     00 98 0E C2 |  if_b	cmp	arg04, #0 wz
2a070     01 96 06 86 |  if_c_and_z	mov	arg03, #1
2a074     00 7A 06 46 |  if_c_and_nz	mov	result1, #0
2a078     94 00 90 4D |  if_c_and_nz	jmp	#LR__4278
2a07c     49 97 1A F2 | 	cmp	arg03, arg01 wcz
2a080     10 00 90 ED |  if_be	jmp	#LR__4272
2a084     00 98 0E F2 | 	cmp	arg04, #0 wz
2a088     00 7A 06 A6 |  if_e	mov	result1, #0
2a08c     80 00 90 AD |  if_e	jmp	#LR__4278
2a090     49 97 02 F6 | 	mov	arg03, arg01
2a094                 | LR__4272
2a094     01 96 86 F1 | 	sub	arg03, #1
2a098     00 98 0E F2 | 	cmp	arg04, #0 wz
2a09c     38 00 90 5D |  if_ne	jmp	#LR__4274
2a0a0     4B 87 02 F6 | 	mov	_var04, arg03
2a0a4     49 89 02 F6 | 	mov	_var05, arg01
2a0a8                 | LR__4273
2a0a8     44 87 12 F2 | 	cmp	_var04, _var05 wc
2a0ac     5C 00 90 3D |  if_ae	jmp	#LR__4277
2a0b0     43 85 02 F6 | 	mov	_var03, _var04
2a0b4     40 85 02 F1 | 	add	_var03, _var01
2a0b8     42 85 C2 FA | 	rdbyte	_var03, _var03
2a0bc     4A 99 E2 F8 | 	getbyte	arg04, arg02, #0
2a0c0     4C 85 0A F2 | 	cmp	_var03, arg04 wz
2a0c4     01 86 06 A1 |  if_e	add	_var04, #1
2a0c8     43 7B 02 A6 |  if_e	mov	result1, _var04
2a0cc     40 00 90 AD |  if_e	jmp	#LR__4278
2a0d0     01 86 06 F1 | 	add	_var04, #1
2a0d4     D0 FF 9F FD | 	jmp	#LR__4273
2a0d8                 | LR__4274
2a0d8     4B 87 02 F6 | 	mov	_var04, arg03
2a0dc                 | LR__4275
2a0dc     4B 87 1A F2 | 	cmp	_var04, arg03 wcz
2a0e0     28 00 90 1D |  if_a	jmp	#LR__4276
2a0e4     43 89 02 F6 | 	mov	_var05, _var04
2a0e8     40 89 02 F1 | 	add	_var05, _var01
2a0ec     44 85 C2 FA | 	rdbyte	_var03, _var05
2a0f0     4A 89 E2 F8 | 	getbyte	_var05, arg02, #0
2a0f4     44 85 0A F2 | 	cmp	_var03, _var05 wz
2a0f8     01 86 06 A1 |  if_e	add	_var04, #1
2a0fc     43 7B 02 A6 |  if_e	mov	result1, _var04
2a100     0C 00 90 AD |  if_e	jmp	#LR__4278
2a104     01 86 86 F1 | 	sub	_var04, #1
2a108     D0 FF 9F FD | 	jmp	#LR__4275
2a10c                 | LR__4276
2a10c                 | LR__4277
2a10c     00 7A 06 F6 | 	mov	result1, #0
2a110                 | LR__4278
2a110                 | __system____ScanForChar_ret
2a110     2D 00 64 FD | 	ret
2a114                 | 
2a114                 | __system___basic_dir
2a114     06 CA 05 F6 | 	mov	COUNT_, #6
2a118     E8 00 A0 FD | 	call	#pushregs_
2a11c     50 F0 07 F1 | 	add	ptra, #80
2a120     49 A7 0A F6 | 	mov	local01, arg01 wz
2a124     4A A9 02 F6 | 	mov	local02, arg02
2a128     53 AB CA 5A |  if_ne	rdbyte	local03, local01 wz
2a12c     5C 00 90 AD |  if_e	jmp	#LR__4280
2a130     03 00 00 FF 
2a134     34 6B 06 F1 | 	add	ptr___system__dat__, ##1844
2a138     35 AB 0A FB | 	rdlong	local03, ptr___system__dat__ wz
2a13c     03 00 00 FF 
2a140     34 6B 86 F1 | 	sub	ptr___system__dat__, ##1844
2a144     03 00 00 5F 
2a148     34 6B 06 51 |  if_ne	add	ptr___system__dat__, ##1844
2a14c     35 93 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
2a150     03 00 00 5F 
2a154     34 6B 86 51 |  if_ne	sub	ptr___system__dat__, ##1844
2a158     AC E9 BF 5D |  if_ne	call	#__system__closedir
2a15c     92 01 00 FF 
2a160     1C 93 06 F6 | 	mov	arg01, ##@LR__5478
2a164     B8 E8 BF FD | 	call	#__system__opendir
2a168     03 00 00 FF 
2a16c     34 6B 06 F1 | 	add	ptr___system__dat__, ##1844
2a170     35 7B 62 FC | 	wrlong	result1, ptr___system__dat__
2a174     04 6A 06 F1 | 	add	ptr___system__dat__, #4
2a178     35 A9 62 FC | 	wrlong	local02, ptr___system__dat__
2a17c     04 6A 06 F1 | 	add	ptr___system__dat__, #4
2a180     35 A7 62 FC | 	wrlong	local01, ptr___system__dat__
2a184     03 00 00 FF 
2a188     3C 6B 86 F1 | 	sub	ptr___system__dat__, ##1852
2a18c                 | LR__4280
2a18c     03 00 00 FF 
2a190     34 6B 06 F1 | 	add	ptr___system__dat__, ##1844
2a194     35 AB 0A FB | 	rdlong	local03, ptr___system__dat__ wz
2a198     03 00 00 FF 
2a19c     34 6B 86 F1 | 	sub	ptr___system__dat__, ##1844
2a1a0     92 01 00 AF 
2a1a4     1E 7B 06 A6 |  if_e	mov	result1, ##@LR__5479
2a1a8     7C 01 90 AD |  if_e	jmp	#LR__4288
2a1ac                 | LR__4281
2a1ac     03 00 00 FF 
2a1b0     34 6B 06 F1 | 	add	ptr___system__dat__, ##1844
2a1b4     35 93 02 FB | 	rdlong	arg01, ptr___system__dat__
2a1b8     03 00 00 FF 
2a1bc     34 6B 86 F1 | 	sub	ptr___system__dat__, ##1844
2a1c0     B8 E9 BF FD | 	call	#__system__readdir
2a1c4     3D AD 0A F6 | 	mov	local04, result1 wz
2a1c8     38 00 90 5D |  if_ne	jmp	#LR__4282
2a1cc     03 00 00 FF 
2a1d0     34 6B 06 F1 | 	add	ptr___system__dat__, ##1844
2a1d4     35 93 02 FB | 	rdlong	arg01, ptr___system__dat__
2a1d8     03 00 00 FF 
2a1dc     34 6B 86 F1 | 	sub	ptr___system__dat__, ##1844
2a1e0     24 E9 BF FD | 	call	#__system__closedir
2a1e4     03 00 00 FF 
2a1e8     34 6B 06 F1 | 	add	ptr___system__dat__, ##1844
2a1ec     35 01 68 FC | 	wrlong	#0, ptr___system__dat__
2a1f0     03 00 00 FF 
2a1f4     34 6B 86 F1 | 	sub	ptr___system__dat__, ##1844
2a1f8     92 01 00 FF 
2a1fc     20 7B 06 F6 | 	mov	result1, ##@LR__5480
2a200     24 01 90 FD | 	jmp	#LR__4288
2a204                 | LR__4282
2a204     03 00 00 FF 
2a208     3C 6B 06 F1 | 	add	ptr___system__dat__, ##1852
2a20c     35 95 02 FB | 	rdlong	arg02, ptr___system__dat__
2a210     03 00 00 FF 
2a214     3C 6B 86 F1 | 	sub	ptr___system__dat__, ##1852
2a218     56 93 02 F6 | 	mov	arg01, local04
2a21c     4C 09 B0 FD | 	call	#__system___pat_match
2a220     00 7A 0E F2 | 	cmp	result1, #0 wz
2a224     84 FF 9F AD |  if_e	jmp	#LR__4281
2a228     03 00 00 FF 
2a22c     38 6B 06 F1 | 	add	ptr___system__dat__, ##1848
2a230     35 AB 0A FB | 	rdlong	local03, ptr___system__dat__ wz
2a234     03 00 00 FF 
2a238     38 6B 86 F1 | 	sub	ptr___system__dat__, ##1848
2a23c     B0 00 90 AD |  if_e	jmp	#LR__4285
2a240     E7 94 02 F6 | 	mov	arg02, fp
2a244     10 94 06 F1 | 	add	arg02, #16
2a248     56 93 02 F6 | 	mov	arg01, local04
2a24c     10 F2 BF FD | 	call	#__system__stat
2a250     00 7A 4E F2 | 	cmps	result1, #0 wz
2a254     92 01 00 5F 
2a258     22 7B 06 56 |  if_ne	mov	result1, ##@LR__5481
2a25c     C8 00 90 5D |  if_ne	jmp	#LR__4288
2a260     18 CE 05 F1 | 	add	fp, #24
2a264     E7 AE 02 FB | 	rdlong	local05, fp
2a268     18 CE 85 F1 | 	sub	fp, #24
2a26c     78 00 00 FF 
2a270     00 AE 06 F5 | 	and	local05, ##61440
2a274     56 AB C2 FA | 	rdbyte	local03, local04
2a278     2E AA 0E F2 | 	cmp	local03, #46 wz
2a27c     02 A8 06 A6 |  if_e	mov	local02, #2
2a280     00 A8 06 56 |  if_ne	mov	local02, #0
2a284     08 00 00 FF 
2a288     00 AE 0E F2 | 	cmp	local05, ##4096 wz
2a28c     10 A8 46 A5 |  if_e	or	local02, #16
2a290     40 00 90 AD |  if_e	jmp	#LR__4284
2a294     10 00 00 FF 
2a298     00 AE 0E F2 | 	cmp	local05, ##8192 wz
2a29c     18 00 00 5F 
2a2a0     00 AE 0E 52 |  if_ne	cmp	local05, ##12288 wz
2a2a4     20 00 00 5F 
2a2a8     00 AE 0E 52 |  if_ne	cmp	local05, ##16384 wz
2a2ac     04 A8 46 A5 |  if_e	or	local02, #4
2a2b0     20 00 90 AD |  if_e	jmp	#LR__4283
2a2b4     18 CE 05 F1 | 	add	fp, #24
2a2b8     E7 AA 02 FB | 	rdlong	local03, fp
2a2bc     18 CE 85 F1 | 	sub	fp, #24
2a2c0     92 AA CE F7 | 	test	local03, #146 wz
2a2c4     01 A8 46 A5 |  if_e	or	local02, #1
2a2c8     08 00 00 5F 
2a2cc     00 AE 0E 52 |  if_ne	cmp	local05, ##4096 wz
2a2d0     20 A8 46 55 |  if_ne	or	local02, #32
2a2d4                 | LR__4283
2a2d4                 | LR__4284
2a2d4     03 00 00 FF 
2a2d8     38 6B 06 F1 | 	add	ptr___system__dat__, ##1848
2a2dc     35 AF 02 FB | 	rdlong	local05, ptr___system__dat__
2a2e0     03 00 00 FF 
2a2e4     38 6B 86 F1 | 	sub	ptr___system__dat__, ##1848
2a2e8     57 A9 CA F7 | 	test	local02, local05 wz
2a2ec     BC FE 9F AD |  if_e	jmp	#LR__4281
2a2f0                 | LR__4285
2a2f0     56 93 02 F6 | 	mov	arg01, local04
2a2f4     49 B1 02 F6 | 	mov	local06, arg01
2a2f8     D7 06 48 FB | 	callpa	#(@LR__4287-@LR__4286)>>2,fcache_load_ptr_
2a2fc                 | LR__4286
2a2fc     58 7B CA FA | 	rdbyte	result1, local06 wz
2a300     01 B0 06 51 |  if_ne	add	local06, #1
2a304     F4 FF 9F 5D |  if_ne	jmp	#LR__4286
2a308                 | LR__4287
2a308     58 93 C2 F2 | 	subr	arg01, local06
2a30c     01 92 06 F1 | 	add	arg01, #1
2a310     CC E0 BF FD | 	call	#__system___gc_alloc_managed
2a314     3D AF 0A F6 | 	mov	local05, result1 wz
2a318     57 93 02 56 |  if_ne	mov	arg01, local05
2a31c     56 95 02 56 |  if_ne	mov	arg02, local04
2a320     68 A6 BF 5D |  if_ne	call	#__system____builtin_strcpy
2a324     57 7B 02 F6 | 	mov	result1, local05
2a328                 | LR__4288
2a328     E7 F0 03 F6 | 	mov	ptra, fp
2a32c     F2 00 A0 FD | 	call	#popregs_
2a330                 | __system___basic_dir_ret
2a330     2D 00 64 FD | 	ret
2a334                 | 
2a334                 | __system__pack_0698
2a334     49 81 02 F6 | 	mov	_var01, arg01
2a338     7F 96 06 F1 | 	add	arg03, #127
2a33c     04 98 CE F7 | 	test	arg04, #4 wz
2a340     10 00 90 AD |  if_e	jmp	#LR__4290
2a344     00 80 0E F2 | 	cmp	_var01, #0 wz
2a348     16 80 C6 A9 |  if_e	decod	_var01, #22
2a34c     F7 80 26 F4 | 	bith	_var01, #247
2a350     B4 00 90 FD | 	jmp	#LR__4299
2a354                 | LR__4290
2a354     02 98 CE F7 | 	test	arg04, #2 wz
2a358     00 C0 3F 5F 
2a35c     00 80 06 56 |  if_ne	mov	_var01, ##2139095040
2a360     00 94 06 56 |  if_ne	mov	arg02, #0
2a364     A0 00 90 5D |  if_ne	jmp	#LR__4298
2a368     08 98 CE F7 | 	test	arg04, #8 wz
2a36c     00 80 06 56 |  if_ne	mov	_var01, #0
2a370     94 00 90 5D |  if_ne	jmp	#LR__4297
2a374     FF 96 56 F2 | 	cmps	arg03, #255 wc
2a378     00 C0 3F 3F 
2a37c     00 80 06 36 |  if_ae	mov	_var01, ##2139095040
2a380     00 94 06 36 |  if_ae	mov	arg02, #0
2a384     80 00 90 3D |  if_ae	jmp	#LR__4296
2a388     01 96 56 F2 | 	cmps	arg03, #1 wc
2a38c     6C 00 90 3D |  if_ae	jmp	#LR__4294
2a390     01 94 46 F0 | 	shr	arg02, #1
2a394     40 83 02 F6 | 	mov	_var02, _var01
2a398     01 82 06 F5 | 	and	_var02, #1
2a39c     1F 82 66 F0 | 	shl	_var02, #31
2a3a0     41 95 42 F5 | 	or	arg02, _var02
2a3a4     01 80 46 F0 | 	shr	_var01, #1
2a3a8     D7 1E 48 FB | 	callpa	#(@LR__4292-@LR__4291)>>2,fcache_load_ptr_
2a3ac                 | LR__4291
2a3ac     00 96 56 F2 | 	cmps	arg03, #0 wc
2a3b0     34 00 90 3D |  if_ae	jmp	#LR__4293
2a3b4     00 80 0E F2 | 	cmp	_var01, #0 wz
2a3b8     2C 00 90 AD |  if_e	jmp	#LR__4293
2a3bc     4A 93 02 F6 | 	mov	arg01, arg02
2a3c0     01 92 06 F5 | 	and	arg01, #1
2a3c4     01 96 06 F1 | 	add	arg03, #1
2a3c8     01 94 46 F0 | 	shr	arg02, #1
2a3cc     40 83 02 F6 | 	mov	_var02, _var01
2a3d0     01 82 06 F5 | 	and	_var02, #1
2a3d4     1F 82 66 F0 | 	shl	_var02, #31
2a3d8     41 95 42 F5 | 	or	arg02, _var02
2a3dc     49 95 42 F5 | 	or	arg02, arg01
2a3e0     01 80 46 F0 | 	shr	_var01, #1
2a3e4     C4 FF 9F FD | 	jmp	#LR__4291
2a3e8                 | LR__4292
2a3e8                 | LR__4293
2a3e8     00 96 56 F2 | 	cmps	arg03, #0 wc
2a3ec     18 00 90 3D |  if_ae	jmp	#LR__4295
2a3f0     00 94 0E F2 | 	cmp	arg02, #0 wz
2a3f4     6F 94 62 FD | 	wrnz	arg02
2a3f8     0C 00 90 FD | 	jmp	#LR__4295
2a3fc                 | LR__4294
2a3fc     17 81 06 F4 | 	bitl	_var01, #279
2a400     17 96 66 F0 | 	shl	arg03, #23
2a404     4B 81 42 F5 | 	or	_var01, arg03
2a408                 | LR__4295
2a408                 | LR__4296
2a408                 | LR__4297
2a408                 | LR__4298
2a408                 | LR__4299
2a408     01 80 CE F7 | 	test	_var01, #1 wz
2a40c     01 94 46 55 |  if_ne	or	arg02, #1
2a410     4A 97 02 F6 | 	mov	arg03, arg02
2a414     00 82 06 F6 | 	mov	_var02, #0
2a418     FF FF 3F FF 
2a41c     FF 95 06 F1 | 	add	arg02, ##2147483647
2a420     4B 95 12 F2 | 	cmp	arg02, arg03 wc
2a424     01 82 06 C6 |  if_b	mov	_var02, #1
2a428     41 81 02 F1 | 	add	_var01, _var02
2a42c     01 98 CE F7 | 	test	arg04, #1 wz
2a430     1F 80 26 54 |  if_ne	bith	_var01, #31
2a434     40 7B 02 F6 | 	mov	result1, _var01
2a438                 | __system__pack_0698_ret
2a438     2D 00 64 FD | 	ret
2a43c                 | 
2a43c                 | __system___rxtxioctl_0788
2a43c     00 95 0E F2 | 	cmp	arg02, #256 wz
2a440     0C 00 90 AD |  if_e	jmp	#LR__4300
2a444     01 95 0E F2 | 	cmp	arg02, #257 wz
2a448     1C 00 90 AD |  if_e	jmp	#LR__4301
2a44c     30 00 90 FD | 	jmp	#LR__4302
2a450                 | LR__4300
2a450     08 6A 06 F1 | 	add	ptr___system__dat__, #8
2a454     35 7B 02 FB | 	rdlong	result1, ptr___system__dat__
2a458     08 6A 86 F1 | 	sub	ptr___system__dat__, #8
2a45c     4B 7B 62 FC | 	wrlong	result1, arg03
2a460     00 7A 06 F6 | 	mov	result1, #0
2a464     28 00 90 FD | 	jmp	#LR__4303
2a468                 | LR__4301
2a468     4B 93 02 FB | 	rdlong	arg01, arg03
2a46c     08 6A 06 F1 | 	add	ptr___system__dat__, #8
2a470     35 93 62 FC | 	wrlong	arg01, ptr___system__dat__
2a474     08 6A 86 F1 | 	sub	ptr___system__dat__, #8
2a478     00 7A 06 F6 | 	mov	result1, #0
2a47c     10 00 90 FD | 	jmp	#LR__4303
2a480                 | LR__4302
2a480     20 6A 06 F1 | 	add	ptr___system__dat__, #32
2a484     35 15 68 FC | 	wrlong	#10, ptr___system__dat__
2a488     20 6A 86 F1 | 	sub	ptr___system__dat__, #32
2a48c     01 7A 66 F6 | 	neg	result1, #1
2a490                 | LR__4303
2a490                 | __system___rxtxioctl_0788_ret
2a490     2D 00 64 FD | 	ret
2a494                 | 
2a494                 | __system____dummy_flush_0789
2a494     00 7A 06 F6 | 	mov	result1, #0
2a498                 | __system____dummy_flush_0789_ret
2a498     2D 00 64 FD | 	ret
2a49c                 | 
2a49c                 | __system___vfswrite
2a49c     09 CA 05 F6 | 	mov	COUNT_, #9
2a4a0     E8 00 A0 FD | 	call	#pushregs_
2a4a4     49 A7 02 F6 | 	mov	local01, arg01
2a4a8     4A A9 02 F6 | 	mov	local02, arg02
2a4ac     4B AB 02 F6 | 	mov	local03, arg03
2a4b0     54 AD 02 F6 | 	mov	local04, local02
2a4b4     08 A6 06 F1 | 	add	local01, #8
2a4b8     53 93 02 FB | 	rdlong	arg01, local01
2a4bc     08 A6 86 F1 | 	sub	local01, #8
2a4c0     02 92 CE F7 | 	test	arg01, #2 wz
2a4c4     20 6A 06 A1 |  if_e	add	ptr___system__dat__, #32
2a4c8     35 0D 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2a4cc     20 6A 86 A1 |  if_e	sub	ptr___system__dat__, #32
2a4d0     01 7A 66 A6 |  if_e	neg	result1, #1
2a4d4     84 01 90 AD |  if_e	jmp	#LR__4316
2a4d8     08 A6 06 F1 | 	add	local01, #8
2a4dc     53 7B 02 FB | 	rdlong	result1, local01
2a4e0     08 A6 86 F1 | 	sub	local01, #8
2a4e4     80 7A CE F7 | 	test	result1, #128 wz
2a4e8     6C 00 90 AD |  if_e	jmp	#LR__4311
2a4ec     08 A6 06 F1 | 	add	local01, #8
2a4f0     53 95 02 FB | 	rdlong	arg02, local01
2a4f4     08 A6 86 F1 | 	sub	local01, #8
2a4f8     00 95 CE F7 | 	test	arg02, #256 wz
2a4fc     58 00 90 AD |  if_e	jmp	#LR__4310
2a500     30 A6 06 F1 | 	add	local01, #48
2a504     53 AF 02 FB | 	rdlong	local05, local01
2a508     57 B1 02 F6 | 	mov	local06, local05
2a50c     30 A6 86 F1 | 	sub	local01, #48
2a510     13 B0 46 F7 | 	zerox	local06, #19
2a514     14 AE 46 F0 | 	shr	local05, #20
2a518     02 AE 66 F0 | 	shl	local05, #2
2a51c     2D AF 02 F1 | 	add	local05, __methods__
2a520     57 AF 02 FB | 	rdlong	local05, local05
2a524     53 93 02 F6 | 	mov	arg01, local01
2a528     00 94 06 F6 | 	mov	arg02, #0
2a52c     00 96 06 F6 | 	mov	arg03, #0
2a530     02 98 06 F6 | 	mov	arg04, #2
2a534     32 B3 02 F6 | 	mov	local07, objptr
2a538     58 65 02 F6 | 	mov	objptr, local06
2a53c     2D AE 62 FD | 	call	local05
2a540     59 65 02 F6 | 	mov	objptr, local07
2a544     08 A6 06 F1 | 	add	local01, #8
2a548     53 B3 02 FB | 	rdlong	local07, local01
2a54c     00 B3 26 F5 | 	andn	local07, #256
2a550     53 B3 62 FC | 	wrlong	local07, local01
2a554     08 A6 86 F1 | 	sub	local01, #8
2a558                 | LR__4310
2a558                 | LR__4311
2a558     18 A6 06 F1 | 	add	local01, #24
2a55c     53 B3 0A FB | 	rdlong	local07, local01 wz
2a560     18 A6 86 F1 | 	sub	local01, #24
2a564     80 00 90 AD |  if_e	jmp	#LR__4313
2a568     18 A6 06 F1 | 	add	local01, #24
2a56c     53 AF 02 FB | 	rdlong	local05, local01
2a570     57 B1 02 F6 | 	mov	local06, local05
2a574     18 A6 86 F1 | 	sub	local01, #24
2a578     13 B0 46 F7 | 	zerox	local06, #19
2a57c     14 AE 46 F0 | 	shr	local05, #20
2a580     02 AE 66 F0 | 	shl	local05, #2
2a584     2D AF 02 F1 | 	add	local05, __methods__
2a588     57 AF 02 FB | 	rdlong	local05, local05
2a58c     54 95 02 F6 | 	mov	arg02, local02
2a590     55 97 02 F6 | 	mov	arg03, local03
2a594     53 93 02 F6 | 	mov	arg01, local01
2a598     32 B3 02 F6 | 	mov	local07, objptr
2a59c     58 65 02 F6 | 	mov	objptr, local06
2a5a0     2D AE 62 FD | 	call	local05
2a5a4     59 65 02 F6 | 	mov	objptr, local07
2a5a8     3D B5 02 F6 | 	mov	local08, result1
2a5ac     00 B4 56 F2 | 	cmps	local08, #0 wc
2a5b0     2C 00 90 3D |  if_ae	jmp	#LR__4312
2a5b4     08 A6 06 F1 | 	add	local01, #8
2a5b8     53 B3 02 FB | 	rdlong	local07, local01
2a5bc     20 B2 46 F5 | 	or	local07, #32
2a5c0     53 B3 62 FC | 	wrlong	local07, local01
2a5c4     00 B4 4E F2 | 	cmps	local08, #0 wz
2a5c8     20 6A 06 F1 | 	add	ptr___system__dat__, #32
2a5cc     35 B5 62 FC | 	wrlong	local08, ptr___system__dat__
2a5d0     20 6A 86 F1 | 	sub	ptr___system__dat__, #32
2a5d4     01 7A 66 56 |  if_ne	neg	result1, #1
2a5d8     00 7A 06 A6 |  if_e	mov	result1, #0
2a5dc     7C 00 90 FD | 	jmp	#LR__4316
2a5e0                 | LR__4312
2a5e0     5A 7B 02 F6 | 	mov	result1, local08
2a5e4     74 00 90 FD | 	jmp	#LR__4316
2a5e8                 | LR__4313
2a5e8     1C A6 06 F1 | 	add	local01, #28
2a5ec     53 B7 0A FB | 	rdlong	local09, local01 wz
2a5f0     1C A6 86 F1 | 	sub	local01, #28
2a5f4     20 6A 06 A1 |  if_e	add	ptr___system__dat__, #32
2a5f8     35 0D 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2a5fc     20 6A 86 A1 |  if_e	sub	ptr___system__dat__, #32
2a600     01 7A 66 A6 |  if_e	neg	result1, #1
2a604     54 00 90 AD |  if_e	jmp	#LR__4316
2a608     00 B4 06 F6 | 	mov	local08, #0
2a60c                 | LR__4314
2a60c     01 AA 16 F2 | 	cmp	local03, #1 wc
2a610     44 00 90 CD |  if_b	jmp	#LR__4315
2a614     5B AF 02 F6 | 	mov	local05, local09
2a618     5B B1 02 F6 | 	mov	local06, local09
2a61c     13 AE 46 F7 | 	zerox	local05, #19
2a620     14 B0 46 F0 | 	shr	local06, #20
2a624     02 B0 66 F0 | 	shl	local06, #2
2a628     2D B1 02 F1 | 	add	local06, __methods__
2a62c     58 B1 02 FB | 	rdlong	local06, local06
2a630     56 93 C2 FA | 	rdbyte	arg01, local04
2a634     53 95 02 F6 | 	mov	arg02, local01
2a638     32 B3 02 F6 | 	mov	local07, objptr
2a63c     57 65 02 F6 | 	mov	objptr, local05
2a640     01 AC 06 F1 | 	add	local04, #1
2a644     2D B0 62 FD | 	call	local06
2a648     59 65 02 F6 | 	mov	objptr, local07
2a64c     3D B5 02 F1 | 	add	local08, result1
2a650     01 AA 86 F1 | 	sub	local03, #1
2a654     B4 FF 9F FD | 	jmp	#LR__4314
2a658                 | LR__4315
2a658     5A 7B 02 F6 | 	mov	result1, local08
2a65c                 | LR__4316
2a65c     E7 F0 03 F6 | 	mov	ptra, fp
2a660     F2 00 A0 FD | 	call	#popregs_
2a664                 | __system___vfswrite_ret
2a664     2D 00 64 FD | 	ret
2a668                 | 
2a668                 | __system___vfsread
2a668     09 CA 05 F6 | 	mov	COUNT_, #9
2a66c     E8 00 A0 FD | 	call	#pushregs_
2a670     28 F0 07 F1 | 	add	ptra, #40
2a674     49 A7 02 F6 | 	mov	local01, arg01
2a678     4B A9 02 F6 | 	mov	local02, arg03
2a67c     4A AB 02 F6 | 	mov	local03, arg02
2a680     00 AC 06 F6 | 	mov	local04, #0
2a684     08 A6 06 F1 | 	add	local01, #8
2a688     53 93 02 FB | 	rdlong	arg01, local01
2a68c     08 A6 86 F1 | 	sub	local01, #8
2a690     01 92 CE F7 | 	test	arg01, #1 wz
2a694     20 6A 06 A1 |  if_e	add	ptr___system__dat__, #32
2a698     35 0D 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2a69c     20 6A 86 A1 |  if_e	sub	ptr___system__dat__, #32
2a6a0     01 7A 66 A6 |  if_e	neg	result1, #1
2a6a4     84 01 90 AD |  if_e	jmp	#LR__4326
2a6a8     14 A6 06 F1 | 	add	local01, #20
2a6ac     53 7B 0A FB | 	rdlong	result1, local01 wz
2a6b0     14 A6 86 F1 | 	sub	local01, #20
2a6b4     7C 00 90 AD |  if_e	jmp	#LR__4321
2a6b8     14 A6 06 F1 | 	add	local01, #20
2a6bc     53 AF 02 FB | 	rdlong	local05, local01
2a6c0     57 AB 02 F6 | 	mov	local03, local05
2a6c4     14 A6 86 F1 | 	sub	local01, #20
2a6c8     13 AA 46 F7 | 	zerox	local03, #19
2a6cc     14 AE 46 F0 | 	shr	local05, #20
2a6d0     02 AE 66 F0 | 	shl	local05, #2
2a6d4     2D AF 02 F1 | 	add	local05, __methods__
2a6d8     57 AF 02 FB | 	rdlong	local05, local05
2a6dc     54 97 02 F6 | 	mov	arg03, local02
2a6e0     53 93 02 F6 | 	mov	arg01, local01
2a6e4     32 AD 02 F6 | 	mov	local04, objptr
2a6e8     55 65 02 F6 | 	mov	objptr, local03
2a6ec     2D AE 62 FD | 	call	local05
2a6f0     56 65 02 F6 | 	mov	objptr, local04
2a6f4     3D B1 02 F6 | 	mov	local06, result1
2a6f8     00 B0 56 F2 | 	cmps	local06, #0 wc
2a6fc     2C 00 90 3D |  if_ae	jmp	#LR__4320
2a700     08 A6 06 F1 | 	add	local01, #8
2a704     53 AF 02 FB | 	rdlong	local05, local01
2a708     20 AE 46 F5 | 	or	local05, #32
2a70c     53 AF 62 FC | 	wrlong	local05, local01
2a710     00 B0 4E F2 | 	cmps	local06, #0 wz
2a714     20 6A 06 F1 | 	add	ptr___system__dat__, #32
2a718     35 B1 62 FC | 	wrlong	local06, ptr___system__dat__
2a71c     20 6A 86 F1 | 	sub	ptr___system__dat__, #32
2a720     01 7A 66 56 |  if_ne	neg	result1, #1
2a724     00 7A 06 A6 |  if_e	mov	result1, #0
2a728     00 01 90 FD | 	jmp	#LR__4326
2a72c                 | LR__4320
2a72c     58 7B 02 F6 | 	mov	result1, local06
2a730     F8 00 90 FD | 	jmp	#LR__4326
2a734                 | LR__4321
2a734     20 A6 06 F1 | 	add	local01, #32
2a738     53 B3 0A FB | 	rdlong	local07, local01 wz
2a73c     20 A6 86 F1 | 	sub	local01, #32
2a740     20 6A 06 A1 |  if_e	add	ptr___system__dat__, #32
2a744     35 0D 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2a748     20 6A 86 A1 |  if_e	sub	ptr___system__dat__, #32
2a74c     01 7A 66 A6 |  if_e	neg	result1, #1
2a750     D8 00 90 AD |  if_e	jmp	#LR__4326
2a754     28 A6 06 F1 | 	add	local01, #40
2a758     53 B1 0A FB | 	rdlong	local06, local01 wz
2a75c     28 A6 86 F1 | 	sub	local01, #40
2a760     60 00 90 AD |  if_e	jmp	#LR__4323
2a764     28 A6 06 F1 | 	add	local01, #40
2a768     53 AF 02 FB | 	rdlong	local05, local01
2a76c     57 B5 02 F6 | 	mov	local08, local05
2a770     28 A6 86 F1 | 	sub	local01, #40
2a774     13 B4 46 F7 | 	zerox	local08, #19
2a778     14 AE 46 F0 | 	shr	local05, #20
2a77c     02 AE 66 F0 | 	shl	local05, #2
2a780     2D AF 02 F1 | 	add	local05, __methods__
2a784     57 AF 02 FB | 	rdlong	local05, local05
2a788     53 93 02 F6 | 	mov	arg01, local01
2a78c     E7 96 02 F6 | 	mov	arg03, fp
2a790     24 96 06 F1 | 	add	arg03, #36
2a794     00 95 06 F6 | 	mov	arg02, #256
2a798     32 B1 02 F6 | 	mov	local06, objptr
2a79c     5A 65 02 F6 | 	mov	objptr, local08
2a7a0     2D AE 62 FD | 	call	local05
2a7a4     58 65 02 F6 | 	mov	objptr, local06
2a7a8     00 7A 0E F2 | 	cmp	result1, #0 wz
2a7ac     14 00 90 5D |  if_ne	jmp	#LR__4322
2a7b0     24 CE 05 F1 | 	add	fp, #36
2a7b4     E7 B0 02 FB | 	rdlong	local06, fp
2a7b8     24 CE 85 F1 | 	sub	fp, #36
2a7bc     02 B0 CE F7 | 	test	local06, #2 wz
2a7c0     01 AC 06 56 |  if_ne	mov	local04, #1
2a7c4                 | LR__4322
2a7c4                 | LR__4323
2a7c4     00 B0 06 F6 | 	mov	local06, #0
2a7c8                 | LR__4324
2a7c8     01 A8 16 F2 | 	cmp	local02, #1 wc
2a7cc     58 00 90 CD |  if_b	jmp	#LR__4325
2a7d0     59 B5 02 F6 | 	mov	local08, local07
2a7d4     59 AF 02 F6 | 	mov	local05, local07
2a7d8     13 B4 46 F7 | 	zerox	local08, #19
2a7dc     14 AE 46 F0 | 	shr	local05, #20
2a7e0     02 AE 66 F0 | 	shl	local05, #2
2a7e4     2D AF 02 F1 | 	add	local05, __methods__
2a7e8     57 AF 02 FB | 	rdlong	local05, local05
2a7ec     53 93 02 F6 | 	mov	arg01, local01
2a7f0     32 B7 02 F6 | 	mov	local09, objptr
2a7f4     5A 65 02 F6 | 	mov	objptr, local08
2a7f8     2D AE 62 FD | 	call	local05
2a7fc     5B 65 02 F6 | 	mov	objptr, local09
2a800     00 7A 56 F2 | 	cmps	result1, #0 wc
2a804     20 00 90 CD |  if_b	jmp	#LR__4325
2a808     55 7B 42 FC | 	wrbyte	result1, local03
2a80c     01 B0 06 F1 | 	add	local06, #1
2a810     01 A8 86 F1 | 	sub	local02, #1
2a814     00 AC 0E F2 | 	cmp	local04, #0 wz
2a818     01 AA 06 F1 | 	add	local03, #1
2a81c     A8 FF 9F AD |  if_e	jmp	#LR__4324
2a820     0A 7A 0E F2 | 	cmp	result1, #10 wz
2a824     A0 FF 9F 5D |  if_ne	jmp	#LR__4324
2a828                 | LR__4325
2a828     58 7B 02 F6 | 	mov	result1, local06
2a82c                 | LR__4326
2a82c     E7 F0 03 F6 | 	mov	ptra, fp
2a830     F2 00 A0 FD | 	call	#popregs_
2a834                 | __system___vfsread_ret
2a834     2D 00 64 FD | 	ret
2a838                 | 
2a838                 | __system___sdmm_open
2a838     0B CA 05 F6 | 	mov	COUNT_, #11
2a83c     E8 00 A0 FD | 	call	#pushregs_
2a840     49 AB 02 F6 | 	mov	local03, arg01
2a844     4A AD 02 F6 | 	mov	local04, arg02
2a848     4B AF 02 F6 | 	mov	local05, arg03
2a84c     4C B1 02 F6 | 	mov	local06, arg04
2a850     28 92 06 F6 | 	mov	arg01, #40
2a854     88 DB BF FD | 	call	#__system___gc_alloc_managed
2a858     3D B3 02 F6 | 	mov	local07, result1
2a85c     55 99 02 F6 | 	mov	arg04, local03
2a860     1F 98 C6 F0 | 	sar	arg04, #31
2a864     55 97 02 F6 | 	mov	arg03, local03
2a868     01 92 06 F6 | 	mov	arg01, #1
2a86c     00 94 06 F6 | 	mov	arg02, #0
2a870     44 C3 BF FD | 	call	#__system___int64_shl
2a874     3D A7 02 F6 | 	mov	local01, result1
2a878     3E B5 02 F6 | 	mov	local08, result2
2a87c     56 99 02 F6 | 	mov	arg04, local04
2a880     1F 98 C6 F0 | 	sar	arg04, #31
2a884     56 97 02 F6 | 	mov	arg03, local04
2a888     01 92 06 F6 | 	mov	arg01, #1
2a88c     00 94 06 F6 | 	mov	arg02, #0
2a890     24 C3 BF FD | 	call	#__system___int64_shl
2a894     3D A7 42 F5 | 	or	local01, result1
2a898     3E B5 42 F5 | 	or	local08, result2
2a89c     57 99 02 F6 | 	mov	arg04, local05
2a8a0     1F 98 C6 F0 | 	sar	arg04, #31
2a8a4     57 97 02 F6 | 	mov	arg03, local05
2a8a8     01 92 06 F6 | 	mov	arg01, #1
2a8ac     00 94 06 F6 | 	mov	arg02, #0
2a8b0     04 C3 BF FD | 	call	#__system___int64_shl
2a8b4     3D A7 42 F5 | 	or	local01, result1
2a8b8     3E B5 42 F5 | 	or	local08, result2
2a8bc     58 99 02 F6 | 	mov	arg04, local06
2a8c0     1F 98 C6 F0 | 	sar	arg04, #31
2a8c4     58 97 02 F6 | 	mov	arg03, local06
2a8c8     01 92 06 F6 | 	mov	arg01, #1
2a8cc     00 94 06 F6 | 	mov	arg02, #0
2a8d0     E4 C2 BF FD | 	call	#__system___int64_shl
2a8d4     5A 95 02 F6 | 	mov	arg02, local08
2a8d8     3D A7 42 F5 | 	or	local01, result1
2a8dc     4A 7D 42 F5 | 	or	result2, arg02
2a8e0     3E A9 02 F6 | 	mov	local02, result2
2a8e4     53 93 02 F6 | 	mov	arg01, local01
2a8e8     54 95 02 F6 | 	mov	arg02, local02
2a8ec     38 C3 BF FD | 	call	#__system___usepins
2a8f0     00 7A 0E F2 | 	cmp	result1, #0 wz
2a8f4     1C 00 90 5D |  if_ne	jmp	#LR__4330
2a8f8     59 93 02 F6 | 	mov	arg01, local07
2a8fc     14 DC BF FD | 	call	#__system___gc_free
2a900     20 6A 06 F1 | 	add	ptr___system__dat__, #32
2a904     35 2D 68 FC | 	wrlong	#22, ptr___system__dat__
2a908     20 6A 86 F1 | 	sub	ptr___system__dat__, #32
2a90c     00 7A 06 F6 | 	mov	result1, #0
2a910     5C 01 90 FD | 	jmp	#LR__4333
2a914                 | LR__4330
2a914     53 B7 02 F6 | 	mov	local09, local01
2a918     54 9B 02 F6 | 	mov	arg05, local02
2a91c     20 B2 06 F1 | 	add	local07, #32
2a920     59 B7 62 FC | 	wrlong	local09, local07
2a924     04 B2 06 F1 | 	add	local07, #4
2a928     59 9B 62 FC | 	wrlong	arg05, local07
2a92c     24 B2 86 F1 | 	sub	local07, #36
2a930     57 99 02 F6 | 	mov	arg04, local05
2a934     58 9B 02 F6 | 	mov	arg05, local06
2a938     00 92 06 F6 | 	mov	arg01, #0
2a93c     55 95 02 F6 | 	mov	arg02, local03
2a940     56 97 02 F6 | 	mov	arg03, local04
2a944     32 B9 02 F6 | 	mov	local10, objptr
2a948     59 65 02 F6 | 	mov	objptr, local07
2a94c     34 0F B0 FD | 	call	#_sdmm_cc_disk_setpins
2a950     5C 65 02 F6 | 	mov	objptr, local10
2a954     3D BB 0A F6 | 	mov	local11, result1 wz
2a958     18 00 90 5D |  if_ne	jmp	#LR__4331
2a95c     00 92 06 F6 | 	mov	arg01, #0
2a960     32 BB 02 F6 | 	mov	local11, objptr
2a964     59 65 02 F6 | 	mov	objptr, local07
2a968     4C 03 B0 FD | 	call	#_sdmm_cc_disk_initialize
2a96c     5D 65 02 F6 | 	mov	objptr, local11
2a970     3D BB E2 F8 | 	getbyte	local11, result1, #0
2a974                 | LR__4331
2a974     00 BA 0E F2 | 	cmp	local11, #0 wz
2a978     D0 00 90 5D |  if_ne	jmp	#LR__4332
2a97c     64 E0 BF FD | 	call	#__system___get_vfs_file_handle
2a980     3D BB 0A F6 | 	mov	local11, result1 wz
2a984     C4 00 90 AD |  if_e	jmp	#LR__4332
2a988     04 BA 06 F1 | 	add	local11, #4
2a98c     5D 05 58 FC | 	wrword	#2, local11
2a990     02 BA 06 F1 | 	add	local11, #2
2a994     5D 01 58 FC | 	wrword	#0, local11
2a998     02 BA 06 F1 | 	add	local11, #2
2a99c     40 00 80 FF 
2a9a0     5D 07 68 FC | 	wrlong	##32771, local11
2a9a4     59 7B 02 F6 | 	mov	result1, local07
2a9a8     00 68 06 FF 
2a9ac     00 7A 46 F5 | 	or	result1, ##214958080
2a9b0     0C BA 06 F1 | 	add	local11, #12
2a9b4     5D 7B 62 FC | 	wrlong	result1, local11
2a9b8     59 7B 02 F6 | 	mov	result1, local07
2a9bc     00 70 06 FF 
2a9c0     00 7A 46 F5 | 	or	result1, ##216006656
2a9c4     04 BA 06 F1 | 	add	local11, #4
2a9c8     5D 7B 62 FC | 	wrlong	result1, local11
2a9cc     59 7B 02 F6 | 	mov	result1, local07
2a9d0     00 78 06 FF 
2a9d4     00 7A 46 F5 | 	or	result1, ##217055232
2a9d8     0C BA 06 F1 | 	add	local11, #12
2a9dc     5D 7B 62 FC | 	wrlong	result1, local11
2a9e0     59 7B 02 F6 | 	mov	result1, local07
2a9e4     00 80 06 FF 
2a9e8     00 7A 46 F5 | 	or	result1, ##218103808
2a9ec     04 BA 06 F1 | 	add	local11, #4
2a9f0     5D 7B 62 FC | 	wrlong	result1, local11
2a9f4     59 7B 02 F6 | 	mov	result1, local07
2a9f8     00 88 06 FF 
2a9fc     00 7A 46 F5 | 	or	result1, ##219152384
2aa00     04 BA 06 F1 | 	add	local11, #4
2aa04     5D 7B 62 FC | 	wrlong	result1, local11
2aa08     59 7B 02 F6 | 	mov	result1, local07
2aa0c     00 90 06 FF 
2aa10     00 7A 46 F5 | 	or	result1, ##220200960
2aa14     04 BA 06 F1 | 	add	local11, #4
2aa18     5D 7B 62 FC | 	wrlong	result1, local11
2aa1c     59 7B 02 F6 | 	mov	result1, local07
2aa20     00 98 06 FF 
2aa24     00 7A 46 F5 | 	or	result1, ##221249536
2aa28     14 BA 86 F1 | 	sub	local11, #20
2aa2c     5D 7B 62 FC | 	wrlong	result1, local11
2aa30     00 A0 06 FF 
2aa34     00 B2 46 F5 | 	or	local07, ##222298112
2aa38     04 BA 06 F1 | 	add	local11, #4
2aa3c     5D B3 62 FC | 	wrlong	local07, local11
2aa40     20 BA 86 F1 | 	sub	local11, #32
2aa44     5D 7B 02 F6 | 	mov	result1, local11
2aa48     24 00 90 FD | 	jmp	#LR__4333
2aa4c                 | LR__4332
2aa4c     53 93 02 F6 | 	mov	arg01, local01
2aa50     54 95 02 F6 | 	mov	arg02, local02
2aa54     24 C2 BF FD | 	call	#__system___freepins
2aa58     59 93 02 F6 | 	mov	arg01, local07
2aa5c     B4 DA BF FD | 	call	#__system___gc_free
2aa60     20 6A 06 F1 | 	add	ptr___system__dat__, #32
2aa64     35 19 68 FC | 	wrlong	#12, ptr___system__dat__
2aa68     20 6A 86 F1 | 	sub	ptr___system__dat__, #32
2aa6c     00 7A 06 F6 | 	mov	result1, #0
2aa70                 | LR__4333
2aa70     E7 F0 03 F6 | 	mov	ptra, fp
2aa74     F2 00 A0 FD | 	call	#popregs_
2aa78                 | __system___sdmm_open_ret
2aa78     2D 00 64 FD | 	ret
2aa7c                 | 
2aa7c                 | __system____default_filbuf
2aa7c     05 CA 05 F6 | 	mov	COUNT_, #5
2aa80     E8 00 A0 FD | 	call	#pushregs_
2aa84     49 A7 02 F6 | 	mov	local01, arg01
2aa88     53 A9 02 FB | 	rdlong	local02, local01
2aa8c     08 A8 06 F1 | 	add	local02, #8
2aa90     54 7B 0A FB | 	rdlong	result1, local02 wz
2aa94     08 A8 86 F1 | 	sub	local02, #8
2aa98     20 00 90 5D |  if_ne	jmp	#LR__4340
2aa9c     10 A8 06 F1 | 	add	local02, #16
2aaa0     54 7B 02 F6 | 	mov	result1, local02
2aaa4     04 A8 86 F1 | 	sub	local02, #4
2aaa8     54 7B 62 FC | 	wrlong	result1, local02
2aaac     04 A8 86 F1 | 	sub	local02, #4
2aab0     02 00 80 FF 
2aab4     54 01 68 FC | 	wrlong	##1024, local02
2aab8     08 A8 86 F1 | 	sub	local02, #8
2aabc                 | LR__4340
2aabc     14 A6 06 F1 | 	add	local01, #20
2aac0     53 AB 02 FB | 	rdlong	local03, local01
2aac4     55 AD 02 F6 | 	mov	local04, local03
2aac8     14 A6 86 F1 | 	sub	local01, #20
2aacc     13 AC 46 F7 | 	zerox	local04, #19
2aad0     14 AA 46 F0 | 	shr	local03, #20
2aad4     02 AA 66 F0 | 	shl	local03, #2
2aad8     2D AB 02 F1 | 	add	local03, __methods__
2aadc     55 AB 02 FB | 	rdlong	local03, local03
2aae0     53 93 02 F6 | 	mov	arg01, local01
2aae4     0C A8 06 F1 | 	add	local02, #12
2aae8     54 95 02 FB | 	rdlong	arg02, local02
2aaec     04 A8 86 F1 | 	sub	local02, #4
2aaf0     54 97 02 FB | 	rdlong	arg03, local02
2aaf4     08 A8 86 F1 | 	sub	local02, #8
2aaf8     32 AF 02 F6 | 	mov	local05, objptr
2aafc     56 65 02 F6 | 	mov	objptr, local04
2ab00     2D AA 62 FD | 	call	local03
2ab04     57 65 02 F6 | 	mov	objptr, local05
2ab08     3D AF 02 F6 | 	mov	local05, result1
2ab0c     00 AE 56 F2 | 	cmps	local05, #0 wc
2ab10     01 7A 66 C6 |  if_b	neg	result1, #1
2ab14     28 00 90 CD |  if_b	jmp	#LR__4341
2ab18     54 AF 62 FC | 	wrlong	local05, local02
2ab1c     0C A8 06 F1 | 	add	local02, #12
2ab20     54 AB 02 FB | 	rdlong	local03, local02
2ab24     08 A8 86 F1 | 	sub	local02, #8
2ab28     54 AB 62 FC | 	wrlong	local03, local02
2ab2c     08 A6 06 F1 | 	add	local01, #8
2ab30     53 AD 02 FB | 	rdlong	local04, local01
2ab34     04 AC 46 F5 | 	or	local04, #4
2ab38     53 AD 62 FC | 	wrlong	local04, local01
2ab3c     57 7B 02 F6 | 	mov	result1, local05
2ab40                 | LR__4341
2ab40     E7 F0 03 F6 | 	mov	ptra, fp
2ab44     F2 00 A0 FD | 	call	#popregs_
2ab48                 | __system____default_filbuf_ret
2ab48     2D 00 64 FD | 	ret
2ab4c                 | 
2ab4c                 | __system__getlower_1283
2ab4c     41 92 56 F2 | 	cmps	arg01, #65 wc
2ab50     10 00 90 CD |  if_b	jmp	#LR__4350
2ab54     5B 92 56 F2 | 	cmps	arg01, #91 wc
2ab58     49 7B 02 C6 |  if_b	mov	result1, arg01
2ab5c     20 7A 06 C1 |  if_b	add	result1, #32
2ab60     04 00 90 CD |  if_b	jmp	#__system__getlower_1283_ret
2ab64                 | LR__4350
2ab64     49 7B 02 F6 | 	mov	result1, arg01
2ab68                 | __system__getlower_1283_ret
2ab68     2D 00 64 FD | 	ret
2ab6c                 | 
2ab6c                 | __system___pat_match
2ab6c     07 CA 05 F6 | 	mov	COUNT_, #7
2ab70     E8 00 A0 FD | 	call	#pushregs_
2ab74     49 A7 02 F6 | 	mov	local01, arg01
2ab78                 | LR__4360
2ab78     4A 93 CA FA | 	rdbyte	arg01, arg02 wz
2ab7c     53 A9 CA 5A |  if_ne	rdbyte	local02, local01 wz
2ab80     49 AB 02 56 |  if_ne	mov	local03, arg01
2ab84     2A AA 0E 52 |  if_ne	cmp	local03, #42 wz
2ab88     2C 00 90 AD |  if_e	jmp	#LR__4361
2ab8c     4A 93 C2 FA | 	rdbyte	arg01, arg02
2ab90     B8 FF BF FD | 	call	#__system__getlower_1283
2ab94     3D A9 02 F6 | 	mov	local02, result1
2ab98     53 93 C2 FA | 	rdbyte	arg01, local01
2ab9c     AC FF BF FD | 	call	#__system__getlower_1283
2aba0     54 7B 0A F2 | 	cmp	result1, local02 wz
2aba4     00 7A 06 56 |  if_ne	mov	result1, #0
2aba8     00 01 90 5D |  if_ne	jmp	#LR__4370
2abac     01 A6 06 F1 | 	add	local01, #1
2abb0     01 94 06 F1 | 	add	arg02, #1
2abb4     C0 FF 9F FD | 	jmp	#LR__4360
2abb8                 | LR__4361
2abb8     4A AB C2 FA | 	rdbyte	local03, arg02
2abbc     2A AA 0E F2 | 	cmp	local03, #42 wz
2abc0     D8 00 90 5D |  if_ne	jmp	#LR__4369
2abc4     01 94 06 F1 | 	add	arg02, #1
2abc8     4A AB C2 FA | 	rdbyte	local03, arg02
2abcc     01 94 86 F1 | 	sub	arg02, #1
2abd0     2E AA 0E F2 | 	cmp	local03, #46 wz
2abd4     28 00 90 5D |  if_ne	jmp	#LR__4362
2abd8     02 94 06 F1 | 	add	arg02, #2
2abdc     4A AB C2 FA | 	rdbyte	local03, arg02
2abe0     02 94 86 F1 | 	sub	arg02, #2
2abe4     2A AA 0E F2 | 	cmp	local03, #42 wz
2abe8     03 94 06 A1 |  if_e	add	arg02, #3
2abec     4A AD C2 AA |  if_e	rdbyte	local04, arg02
2abf0     03 94 86 A1 |  if_e	sub	arg02, #3
2abf4     56 AF 0A A6 |  if_e	mov	local05, local04 wz
2abf8     01 7A 06 A6 |  if_e	mov	result1, #1
2abfc     AC 00 90 AD |  if_e	jmp	#LR__4370
2ac00                 | LR__4362
2ac00     01 94 06 F1 | 	add	arg02, #1
2ac04     00 B0 06 F6 | 	mov	local06, #0
2ac08     D7 0E 48 FB | 	callpa	#(@LR__4364-@LR__4363)>>2,fcache_load_ptr_
2ac0c                 | LR__4363
2ac0c     58 A9 02 F6 | 	mov	local02, local06
2ac10     4A A9 02 F1 | 	add	local02, arg02
2ac14     54 AD CA FA | 	rdbyte	local04, local02 wz
2ac18     58 AF 02 56 |  if_ne	mov	local05, local06
2ac1c     01 AE 06 51 |  if_ne	add	local05, #1
2ac20     57 B1 02 56 |  if_ne	mov	local06, local05
2ac24     E4 FF 9F 5D |  if_ne	jmp	#LR__4363
2ac28                 | LR__4364
2ac28     00 B2 06 F6 | 	mov	local07, #0
2ac2c     D7 0E 48 FB | 	callpa	#(@LR__4366-@LR__4365)>>2,fcache_load_ptr_
2ac30                 | LR__4365
2ac30     59 A9 02 F6 | 	mov	local02, local07
2ac34     53 A9 02 F1 | 	add	local02, local01
2ac38     54 AD CA FA | 	rdbyte	local04, local02 wz
2ac3c     59 AF 02 56 |  if_ne	mov	local05, local07
2ac40     01 AE 06 51 |  if_ne	add	local05, #1
2ac44     57 B3 02 56 |  if_ne	mov	local07, local05
2ac48     E4 FF 9F 5D |  if_ne	jmp	#LR__4365
2ac4c                 | LR__4366
2ac4c     58 B3 52 F2 | 	cmps	local07, local06 wc
2ac50     00 7A 06 C6 |  if_b	mov	result1, #0
2ac54     54 00 90 CD |  if_b	jmp	#LR__4370
2ac58     59 AB 02 F6 | 	mov	local03, local07
2ac5c     58 AB 82 F1 | 	sub	local03, local06
2ac60     55 A7 02 F1 | 	add	local01, local03
2ac64                 | LR__4367
2ac64     01 B0 56 F2 | 	cmps	local06, #1 wc
2ac68     30 00 90 CD |  if_b	jmp	#LR__4368
2ac6c     53 93 C2 FA | 	rdbyte	arg01, local01
2ac70     D8 FE BF FD | 	call	#__system__getlower_1283
2ac74     3D B3 02 F6 | 	mov	local07, result1
2ac78     4A 93 C2 FA | 	rdbyte	arg01, arg02
2ac7c     CC FE BF FD | 	call	#__system__getlower_1283
2ac80     3D B3 0A F2 | 	cmp	local07, result1 wz
2ac84     00 7A 06 56 |  if_ne	mov	result1, #0
2ac88     20 00 90 5D |  if_ne	jmp	#LR__4370
2ac8c     01 A6 06 F1 | 	add	local01, #1
2ac90     01 94 06 F1 | 	add	arg02, #1
2ac94     01 B0 86 F1 | 	sub	local06, #1
2ac98     C8 FF 9F FD | 	jmp	#LR__4367
2ac9c                 | LR__4368
2ac9c                 | LR__4369
2ac9c     4A B3 CA FA | 	rdbyte	local07, arg02 wz
2aca0     53 A9 CA AA |  if_e	rdbyte	local02, local01 wz
2aca4     01 7A 06 A6 |  if_e	mov	result1, #1
2aca8     00 7A 06 56 |  if_ne	mov	result1, #0
2acac                 | LR__4370
2acac     E7 F0 03 F6 | 	mov	ptra, fp
2acb0     F2 00 A0 FD | 	call	#popregs_
2acb4                 | __system___pat_match_ret
2acb4     2D 00 64 FD | 	ret
2acb8                 | 
2acb8                 | _sdmm_cc_disk_initialize
2acb8     0F CA 05 F6 | 	mov	COUNT_, #15
2acbc     E8 00 A0 FD | 	call	#pushregs_
2acc0     49 A7 0A F6 | 	mov	local01, arg01 wz
2acc4     F8 A9 02 F6 | 	mov	local02, ptra
2acc8     32 AB 02 FB | 	rdlong	local03, objptr
2accc     04 64 06 F1 | 	add	objptr, #4
2acd0     32 AD 02 FB | 	rdlong	local04, objptr
2acd4     04 64 06 F1 | 	add	objptr, #4
2acd8     32 AF 02 FB | 	rdlong	local05, objptr
2acdc     04 64 06 F1 | 	add	objptr, #4
2ace0     32 B1 02 FB | 	rdlong	local06, objptr
2ace4     08 64 06 F1 | 	add	objptr, #8
2ace8     32 03 48 FC | 	wrbyte	#1, objptr
2acec     14 64 86 F1 | 	sub	objptr, #20
2acf0                 | ' #line 539 "C:/Users/Piotr/Downloads/flexprop-7.0.0/flexprop/include/filesys/block/sdmm.cc"
2acf0                 | ' 		return RES_NOTRDY;
2acf0     0C F0 07 F1 | 	add	ptra, #12
2acf4     03 7A 06 56 |  if_ne	mov	result1, #3
2acf8     68 04 90 5D |  if_ne	jmp	#LR__4400
2acfc     13 00 00 FF 
2ad00     10 93 06 F6 | 	mov	arg01, ##10000
2ad04     30 A0 BF FD | 	call	#__system___waitus
2ad08     55 99 02 F6 | 	mov	arg04, local03
2ad0c     57 99 82 F1 | 	sub	arg04, local05
2ad10     4C 99 42 F6 | 	abs	arg04, arg04
2ad14     04 98 56 F2 | 	cmps	arg04, #4 wc
2ad18     04 7A 06 36 |  if_ae	mov	result1, #4
2ad1c     44 04 90 3D |  if_ae	jmp	#LR__4400
2ad20     55 B3 02 F6 | 	mov	local07, local03
2ad24     58 B3 82 F1 | 	sub	local07, local06
2ad28     59 B3 42 F6 | 	abs	local07, local07
2ad2c     04 B2 56 F2 | 	cmps	local07, #4 wc
2ad30     34 00 90 3D |  if_ae	jmp	#LR__4380
2ad34     55 B5 02 F6 | 	mov	local08, local03
2ad38     58 B5 82 F1 | 	sub	local08, local06
2ad3c     07 B4 06 F5 | 	and	local08, #7
2ad40     18 B4 66 F0 | 	shl	local08, #24
2ad44     29 00 00 FF 
2ad48     7A B4 46 F5 | 	or	local08, ##21114
2ad4c     58 B7 02 F6 | 	mov	local09, local06
2ad50     0C 64 06 F1 | 	add	objptr, #12
2ad54     32 B7 62 FC | 	wrlong	local09, objptr
2ad58     04 64 06 F1 | 	add	objptr, #4
2ad5c     32 B7 62 FC | 	wrlong	local09, objptr
2ad60     10 64 86 F1 | 	sub	objptr, #16
2ad64     A4 00 90 FD | 	jmp	#LR__4383
2ad68                 | LR__4380
2ad68     58 AB 5A F2 | 	cmps	local03, local06 wcz
2ad6c     28 00 90 ED |  if_be	jmp	#LR__4381
2ad70     55 B7 02 F6 | 	mov	local09, local03
2ad74     03 B6 86 F1 | 	sub	local09, #3
2ad78     57 B7 0A F2 | 	cmp	local09, local05 wz
2ad7c     56 B7 0A 52 |  if_ne	cmp	local09, local04 wz
2ad80     01 B6 06 A1 |  if_e	add	local09, #1
2ad84     57 B7 0A F2 | 	cmp	local09, local05 wz
2ad88     56 B7 0A 52 |  if_ne	cmp	local09, local04 wz
2ad8c     28 00 90 5D |  if_ne	jmp	#LR__4382
2ad90     01 B6 06 F1 | 	add	local09, #1
2ad94     20 00 90 FD | 	jmp	#LR__4382
2ad98                 | LR__4381
2ad98     55 B7 02 F6 | 	mov	local09, local03
2ad9c     03 B6 06 F1 | 	add	local09, #3
2ada0     57 B7 0A F2 | 	cmp	local09, local05 wz
2ada4     56 B7 0A 52 |  if_ne	cmp	local09, local04 wz
2ada8     01 B6 86 A1 |  if_e	sub	local09, #1
2adac     57 B7 0A F2 | 	cmp	local09, local05 wz
2adb0     56 B7 0A 52 |  if_ne	cmp	local09, local04 wz
2adb4     01 B6 86 A1 |  if_e	sub	local09, #1
2adb8                 | LR__4382
2adb8     58 B3 02 F6 | 	mov	local07, local06
2adbc     5B B3 82 F1 | 	sub	local07, local09
2adc0     59 B3 42 F6 | 	abs	local07, local07
2adc4     04 B2 56 F2 | 	cmps	local07, #4 wc
2adc8     04 7A 06 36 |  if_ae	mov	result1, #4
2adcc     94 03 90 3D |  if_ae	jmp	#LR__4400
2add0     58 B5 02 F6 | 	mov	local08, local06
2add4     5B B5 82 F1 | 	sub	local08, local09
2add8     07 B4 06 F5 | 	and	local08, #7
2addc     1C B4 66 F0 | 	shl	local08, #28
2ade0     55 B3 02 F6 | 	mov	local07, local03
2ade4     5B B3 82 F1 | 	sub	local07, local09
2ade8     07 B2 06 F5 | 	and	local07, #7
2adec     18 B2 66 F0 | 	shl	local07, #24
2adf0     59 B5 42 F5 | 	or	local08, local07
2adf4     3A B4 46 F5 | 	or	local08, #58
2adf8     10 64 06 F1 | 	add	objptr, #16
2adfc     32 B1 62 FC | 	wrlong	local06, objptr
2ae00     04 64 86 F1 | 	sub	objptr, #4
2ae04     32 B7 62 FC | 	wrlong	local09, objptr
2ae08     0C 64 86 F1 | 	sub	objptr, #12
2ae0c                 | LR__4383
2ae0c     56 01 08 FC | 	wrpin	#0, local04
2ae10     59 AC 62 FD | 	drvh	local04
2ae14     00 08 00 FF 
2ae18     20 B8 06 F6 | 	mov	local10, ##1048608
2ae1c     40 AA 62 FD | 	dirl	local03
2ae20     A0 03 80 FF 
2ae24     55 91 08 FC | 	wrpin	##475208, local03
2ae28     00 08 80 FF 
2ae2c     55 41 18 FC | 	wxpin	##1048608, local03
2ae30     55 01 28 FC | 	wypin	#0, local03
2ae34     41 AA 62 FD | 	dirh	local03
2ae38     55 B3 02 F6 | 	mov	local07, local03
2ae3c     57 B3 82 F1 | 	sub	local07, local05
2ae40     07 B2 06 F5 | 	and	local07, #7
2ae44     18 B2 66 F0 | 	shl	local07, #24
2ae48     78 BA 06 F6 | 	mov	local11, #120
2ae4c     59 BB 42 F5 | 	or	local11, local07
2ae50     5D 95 02 F6 | 	mov	arg02, local11
2ae54     10 94 26 F4 | 	bith	arg02, #16
2ae58     40 AE 62 FD | 	dirl	local05
2ae5c     57 95 02 FC | 	wrpin	arg02, local05
2ae60     57 3F 18 FC | 	wxpin	#31, local05
2ae64     FF FF FF FF 
2ae68     57 FF 2B FC | 	wypin	##-1, local05
2ae6c     41 AE 62 FD | 	dirh	local05
2ae70     29 00 80 FF 
2ae74     58 01 08 FC | 	wrpin	##20992, local06
2ae78     40 B6 62 FD | 	dirl	local09
2ae7c     5B B5 02 FC | 	wrpin	local08, local09
2ae80     5B 4F 18 FC | 	wxpin	#39, local09
2ae84     5B 01 28 FC | 	wypin	#0, local09
2ae88     41 B6 62 FD | 	dirh	local09
2ae8c     54 93 02 F6 | 	mov	arg01, local02
2ae90     0A 94 06 F6 | 	mov	arg02, #10
2ae94     5C 06 B0 FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2ae98     00 92 06 F6 | 	mov	arg01, #0
2ae9c     00 94 06 F6 | 	mov	arg02, #0
2aea0     D4 08 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2aea4     20 07 B0 FD | 	call	#_sdmm_cc_deselect_0858
2aea8     64 92 06 F6 | 	mov	arg01, #100
2aeac     88 9E BF FD | 	call	#__system___waitus
2aeb0     54 93 02 F6 | 	mov	arg01, local02
2aeb4     0A 94 06 F6 | 	mov	arg02, #10
2aeb8     38 06 B0 FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2aebc     00 BC 06 F6 | 	mov	local12, #0
2aec0     00 92 06 F6 | 	mov	arg01, #0
2aec4     00 94 06 F6 | 	mov	arg02, #0
2aec8     AC 08 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2aecc     3D B3 E2 F8 | 	getbyte	local07, result1, #0
2aed0     01 B2 0E F2 | 	cmp	local07, #1 wz
2aed4     5C 02 90 5D |  if_ne	jmp	#LR__4399
2aed8     08 92 06 F6 | 	mov	arg01, #8
2aedc     AA 95 06 F6 | 	mov	arg02, #426
2aee0     94 08 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2aee4     3D 7B E2 F8 | 	getbyte	result1, result1, #0
2aee8     01 7A 0E F2 | 	cmp	result1, #1 wz
2aeec     30 01 90 5D |  if_ne	jmp	#LR__4388
2aef0     54 93 02 F6 | 	mov	arg01, local02
2aef4     04 94 06 F6 | 	mov	arg02, #4
2aef8     F8 05 B0 FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2aefc     02 A8 06 F1 | 	add	local02, #2
2af00     54 B3 C2 FA | 	rdbyte	local07, local02
2af04     02 A8 86 F1 | 	sub	local02, #2
2af08     01 B2 0E F2 | 	cmp	local07, #1 wz
2af0c     03 A8 06 A1 |  if_e	add	local02, #3
2af10     54 BF C2 AA |  if_e	rdbyte	local13, local02
2af14     03 A8 86 A1 |  if_e	sub	local02, #3
2af18     AA BE 0E A2 |  if_e	cmp	local13, #170 wz
2af1c     14 02 90 5D |  if_ne	jmp	#LR__4398
2af20                 | ' 				for (tmr = 1000; tmr; tmr--) {
2af20     01 00 00 FF 
2af24     E8 C1 06 F6 | 	mov	local14, ##1000
2af28                 | LR__4384
2af28     A9 92 06 F6 | 	mov	arg01, #169
2af2c     1E 94 C6 F9 | 	decod	arg02, #30
2af30     44 08 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2af34     3D B3 02 F6 | 	mov	local07, result1
2af38     07 B2 4E F7 | 	zerox	local07, #7 wz
2af3c     18 00 90 AD |  if_e	jmp	#LR__4385
2af40     01 00 00 FF 
2af44     E8 93 06 F6 | 	mov	arg01, ##1000
2af48     EC 9D BF FD | 	call	#__system___waitus
2af4c     60 B3 02 F6 | 	mov	local07, local14
2af50     01 C0 8E F1 | 	sub	local14, #1 wz
2af54     D0 FF 9F 5D |  if_ne	jmp	#LR__4384
2af58                 | LR__4385
2af58     00 C0 0E F2 | 	cmp	local14, #0 wz
2af5c     38 00 90 AD |  if_e	jmp	#LR__4386
2af60     3A 92 06 F6 | 	mov	arg01, #58
2af64     00 94 06 F6 | 	mov	arg02, #0
2af68     0C 08 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2af6c     3D B3 02 F6 | 	mov	local07, result1
2af70     07 B2 4E F7 | 	zerox	local07, #7 wz
2af74     20 00 90 5D |  if_ne	jmp	#LR__4386
2af78     54 93 02 F6 | 	mov	arg01, local02
2af7c     04 94 06 F6 | 	mov	arg02, #4
2af80     70 05 B0 FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2af84     54 C1 C2 FA | 	rdbyte	local14, local02
2af88     40 C0 CE F7 | 	test	local14, #64 wz
2af8c     0C B2 06 56 |  if_ne	mov	local07, #12
2af90     04 B2 06 A6 |  if_e	mov	local07, #4
2af94     59 BD 02 F6 | 	mov	local12, local07
2af98                 | LR__4386
2af98     14 C0 06 FB | 	rdlong	local14, #20
2af9c     F0 FA 02 FF 
2afa0     01 C1 16 F2 | 	cmp	local14, ##100000001 wc
2afa4     5D B3 02 C6 |  if_b	mov	local07, local11
2afa8     1B B2 26 C4 |  if_b	bith	local07, #27
2afac     59 BB 02 C6 |  if_b	mov	local11, local07
2afb0     10 00 90 CD |  if_b	jmp	#LR__4387
2afb4     E1 F5 05 FF 
2afb8     01 C0 16 F2 | 	cmp	local14, ##200000001 wc
2afbc     80 00 04 CF 
2afc0     00 BA 46 C5 |  if_b	or	local11, ##134283264
2afc4                 | LR__4387
2afc4     F0 FA 02 FF 
2afc8     01 C1 16 F2 | 	cmp	local14, ##100000001 wc
2afcc     00 01 00 CF 
2afd0     04 B8 06 C6 |  if_b	mov	local10, ##131076
2afd4     5C 01 90 CD |  if_b	jmp	#LR__4398
2afd8     68 78 04 FF 
2afdc     81 C1 16 F2 | 	cmp	local14, ##150000001 wc
2afe0     80 01 00 CF 
2afe4     06 B8 06 C6 |  if_b	mov	local10, ##196614
2afe8     48 01 90 CD |  if_b	jmp	#LR__4398
2afec     E1 F5 05 FF 
2aff0     01 C0 16 F2 | 	cmp	local14, ##200000001 wc
2aff4     00 02 00 CF 
2aff8     08 B8 06 C6 |  if_b	mov	local10, ##262152
2affc     34 01 90 CD |  if_b	jmp	#LR__4398
2b000     59 73 07 FF 
2b004     81 C0 16 F2 | 	cmp	local14, ##250000001 wc
2b008     80 02 00 CF 
2b00c     0A B8 06 C6 |  if_b	mov	local10, ##327690
2b010     20 01 90 CD |  if_b	jmp	#LR__4398
2b014     00 03 00 FF 
2b018     0C B8 06 F6 | 	mov	local10, ##393228
2b01c     14 01 90 FD | 	jmp	#LR__4398
2b020                 | LR__4388
2b020     A9 92 06 F6 | 	mov	arg01, #169
2b024     00 94 06 F6 | 	mov	arg02, #0
2b028     4C 07 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b02c     3D B3 E2 F8 | 	getbyte	local07, result1, #0
2b030     02 B2 16 F2 | 	cmp	local07, #2 wc
2b034     02 BC 06 C6 |  if_b	mov	local12, #2
2b038     A9 C2 06 C6 |  if_b	mov	local15, #169
2b03c     01 BC 06 36 |  if_ae	mov	local12, #1
2b040     01 C2 06 36 |  if_ae	mov	local15, #1
2b044                 | ' 				ty =  0x01 ; cmd =  (1) ;
2b044                 | ' 			}
2b044                 | ' 			for (tmr = 1000; tmr; tmr--) {
2b044     01 00 00 FF 
2b048     E8 C1 06 F6 | 	mov	local14, ##1000
2b04c                 | LR__4389
2b04c     61 93 02 F6 | 	mov	arg01, local15
2b050     00 94 06 F6 | 	mov	arg02, #0
2b054     20 07 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b058     3D B3 02 F6 | 	mov	local07, result1
2b05c     07 B2 4E F7 | 	zerox	local07, #7 wz
2b060     18 00 90 AD |  if_e	jmp	#LR__4390
2b064     01 00 00 FF 
2b068     E8 93 06 F6 | 	mov	arg01, ##1000
2b06c     C8 9C BF FD | 	call	#__system___waitus
2b070     60 B3 02 F6 | 	mov	local07, local14
2b074     01 C0 8E F1 | 	sub	local14, #1 wz
2b078     D0 FF 9F 5D |  if_ne	jmp	#LR__4389
2b07c                 | LR__4390
2b07c     00 C0 0E F2 | 	cmp	local14, #0 wz
2b080     18 00 90 AD |  if_e	jmp	#LR__4391
2b084     10 92 06 F6 | 	mov	arg01, #16
2b088     09 94 C6 F9 | 	decod	arg02, #9
2b08c     E8 06 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b090     3D B3 02 F6 | 	mov	local07, result1
2b094     07 B2 4E F7 | 	zerox	local07, #7 wz
2b098     04 00 90 AD |  if_e	jmp	#LR__4392
2b09c                 | LR__4391
2b09c     00 BC 06 F6 | 	mov	local12, #0
2b0a0                 | LR__4392
2b0a0     14 C0 06 FB | 	rdlong	local14, #20
2b0a4     F0 FA 02 FF 
2b0a8     01 C1 16 F2 | 	cmp	local14, ##100000001 wc
2b0ac     5D B3 02 C6 |  if_b	mov	local07, local11
2b0b0     1B B2 26 C4 |  if_b	bith	local07, #27
2b0b4     59 BB 02 C6 |  if_b	mov	local11, local07
2b0b8     10 00 90 CD |  if_b	jmp	#LR__4393
2b0bc     E1 F5 05 FF 
2b0c0     01 C0 16 F2 | 	cmp	local14, ##200000001 wc
2b0c4     80 00 04 CF 
2b0c8     00 BA 46 C5 |  if_b	or	local11, ##134283264
2b0cc                 | LR__4393
2b0cc     F0 FA 02 FF 
2b0d0     01 C1 16 F2 | 	cmp	local14, ##100000001 wc
2b0d4     00 01 00 CF 
2b0d8     04 B8 06 C6 |  if_b	mov	local10, ##131076
2b0dc     54 00 90 CD |  if_b	jmp	#LR__4397
2b0e0     68 78 04 FF 
2b0e4     81 C1 16 F2 | 	cmp	local14, ##150000001 wc
2b0e8     80 01 00 CF 
2b0ec     06 B8 06 C6 |  if_b	mov	local10, ##196614
2b0f0     40 00 90 CD |  if_b	jmp	#LR__4396
2b0f4     E1 F5 05 FF 
2b0f8     01 C0 16 F2 | 	cmp	local14, ##200000001 wc
2b0fc     00 02 00 CF 
2b100     08 B8 06 C6 |  if_b	mov	local10, ##262152
2b104     2C 00 90 CD |  if_b	jmp	#LR__4395
2b108     59 73 07 FF 
2b10c     81 C0 16 F2 | 	cmp	local14, ##250000001 wc
2b110     80 02 00 CF 
2b114     0A B8 06 C6 |  if_b	mov	local10, ##327690
2b118     18 00 90 CD |  if_b	jmp	#LR__4394
2b11c     D1 F0 08 FF 
2b120     01 C1 16 F2 | 	cmp	local14, ##300000001 wc
2b124     00 03 00 CF 
2b128     0C B8 06 C6 |  if_b	mov	local10, ##393228
2b12c     80 03 00 3F 
2b130     0E B8 06 36 |  if_ae	mov	local10, ##458766
2b134                 | LR__4394
2b134                 | LR__4395
2b134                 | LR__4396
2b134                 | LR__4397
2b134                 | LR__4398
2b134                 | LR__4399
2b134     15 64 06 F1 | 	add	objptr, #21
2b138     32 BD 42 FC | 	wrbyte	local12, objptr
2b13c     00 BC 0E F2 | 	cmp	local12, #0 wz
2b140     00 B2 06 56 |  if_ne	mov	local07, #0
2b144     01 B2 06 A6 |  if_e	mov	local07, #1
2b148     01 64 86 F1 | 	sub	objptr, #1
2b14c     32 B3 42 FC | 	wrbyte	local07, objptr
2b150     14 64 86 F1 | 	sub	objptr, #20
2b154     70 04 B0 FD | 	call	#_sdmm_cc_deselect_0858
2b158     55 B9 12 FC | 	wxpin	local10, local03
2b15c     57 BB 02 FC | 	wrpin	local11, local05
2b160                 | ' #line 682 "C:/Users/Piotr/Downloads/flexprop-7.0.0/flexprop/include/filesys/block/sdmm.cc"
2b160                 | ' 		}
2b160                 | ' 	}
2b160                 | ' #line 687 "C:/Users/Piotr/Downloads/flexprop-7.0.0/flexprop/include/filesys/block/sdmm.cc"
2b160                 | ' 	CardType = ty;
2b160                 | ' 	s = ty ? 0 :  0x01 ;
2b160                 | ' 	Stat = s;
2b160                 | ' 
2b160                 | ' 	deselect();
2b160                 | ' 
2b160                 | ' 
2b160                 | ' 	_wxpin( PIN_CLK, ck_div );
2b160                 | ' 	_wrpin( PIN_DI, spm_tx );
2b160                 | ' #line 700 "C:/Users/Piotr/Downloads/flexprop-7.0.0/flexprop/include/filesys/block/sdmm.cc"
2b160                 | ' 	return s;
2b160     59 7B 02 F6 | 	mov	result1, local07
2b164                 | LR__4400
2b164     E7 F0 03 F6 | 	mov	ptra, fp
2b168     F2 00 A0 FD | 	call	#popregs_
2b16c                 | _sdmm_cc_disk_initialize_ret
2b16c     2D 00 64 FD | 	ret
2b170                 | 
2b170                 | _sdmm_cc_disk_read
2b170     05 CA 05 F6 | 	mov	COUNT_, #5
2b174     E8 00 A0 FD | 	call	#pushregs_
2b178     4A A7 02 F6 | 	mov	local01, arg02
2b17c     4B A9 02 F6 | 	mov	local02, arg03
2b180     4C AB 02 F6 | 	mov	local03, arg04
2b184     00 92 0E F2 | 	cmp	arg01, #0 wz
2b188     01 7A 06 56 |  if_ne	mov	result1, #1
2b18c                 | ' 
2b18c                 | ' 	return Stat;
2b18c     14 64 06 A1 |  if_e	add	objptr, #20
2b190     32 7B C2 AA |  if_e	rdbyte	result1, objptr
2b194     14 64 86 A1 |  if_e	sub	objptr, #20
2b198     3D 7B E2 F8 | 	getbyte	result1, result1, #0
2b19c     01 7A CE F7 | 	test	result1, #1 wz
2b1a0     03 7A 06 56 |  if_ne	mov	result1, #3
2b1a4     7C 00 90 5D |  if_ne	jmp	#LR__4412
2b1a8     15 64 06 F1 | 	add	objptr, #21
2b1ac     32 AD C2 FA | 	rdbyte	local04, objptr
2b1b0     15 64 86 F1 | 	sub	objptr, #21
2b1b4     08 AC CE F7 | 	test	local04, #8 wz
2b1b8     09 A8 66 A0 |  if_e	shl	local02, #9
2b1bc     02 AA 16 F2 | 	cmp	local03, #2 wc
2b1c0     12 AC 06 36 |  if_ae	mov	local04, #18
2b1c4     11 AC 06 C6 |  if_b	mov	local04, #17
2b1c8     54 95 02 F6 | 	mov	arg02, local02
2b1cc     56 93 02 F6 | 	mov	arg01, local04
2b1d0     A4 05 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b1d4     3D AF 02 F6 | 	mov	local05, result1
2b1d8     07 AE 4E F7 | 	zerox	local05, #7 wz
2b1dc     30 00 90 5D |  if_ne	jmp	#LR__4411
2b1e0                 | ' 		do {
2b1e0                 | LR__4410
2b1e0     53 93 02 F6 | 	mov	arg01, local01
2b1e4     09 94 C6 F9 | 	decod	arg02, #9
2b1e8     7C 04 B0 FD | 	call	#_sdmm_cc_rcvr_datablock_0866
2b1ec     00 7A 0E F2 | 	cmp	result1, #0 wz
2b1f0     01 00 00 5F 
2b1f4     00 A6 06 51 |  if_ne	add	local01, ##512
2b1f8     F9 AB 6E 5B |  if_ne	djnz	local03, #LR__4410
2b1fc     56 AD E2 F8 | 	getbyte	local04, local04, #0
2b200     12 AC 0E F2 | 	cmp	local04, #18 wz
2b204     0C 92 06 A6 |  if_e	mov	arg01, #12
2b208     00 94 06 A6 |  if_e	mov	arg02, #0
2b20c     68 05 B0 AD |  if_e	call	#_sdmm_cc_send_cmd_0871
2b210                 | LR__4411
2b210     B4 03 B0 FD | 	call	#_sdmm_cc_deselect_0858
2b214                 | ' 	}
2b214                 | ' 	deselect();
2b214                 | ' 
2b214                 | ' 	return count ? RES_ERROR : RES_OK;
2b214     00 AA 0E F2 | 	cmp	local03, #0 wz
2b218     01 AE 06 56 |  if_ne	mov	local05, #1
2b21c     00 AE 06 A6 |  if_e	mov	local05, #0
2b220     57 7B 02 F6 | 	mov	result1, local05
2b224                 | LR__4412
2b224     E7 F0 03 F6 | 	mov	ptra, fp
2b228     F2 00 A0 FD | 	call	#popregs_
2b22c                 | _sdmm_cc_disk_read_ret
2b22c     2D 00 64 FD | 	ret
2b230                 | 
2b230                 | _sdmm_cc_disk_write
2b230     04 CA 05 F6 | 	mov	COUNT_, #4
2b234     E8 00 A0 FD | 	call	#pushregs_
2b238     4A A7 02 F6 | 	mov	local01, arg02
2b23c     4C A9 02 F6 | 	mov	local02, arg04
2b240     4B AB 02 F6 | 	mov	local03, arg03
2b244     00 92 0E F2 | 	cmp	arg01, #0 wz
2b248     01 7A 06 56 |  if_ne	mov	result1, #1
2b24c                 | ' 
2b24c                 | ' 	return Stat;
2b24c     14 64 06 A1 |  if_e	add	objptr, #20
2b250     32 7B C2 AA |  if_e	rdbyte	result1, objptr
2b254     14 64 86 A1 |  if_e	sub	objptr, #20
2b258     3D 7B E2 F8 | 	getbyte	result1, result1, #0
2b25c     01 7A CE F7 | 	test	result1, #1 wz
2b260     03 7A 06 56 |  if_ne	mov	result1, #3
2b264     C4 00 90 5D |  if_ne	jmp	#LR__4424
2b268     15 64 06 F1 | 	add	objptr, #21
2b26c     32 97 C2 FA | 	rdbyte	arg03, objptr
2b270     15 64 86 F1 | 	sub	objptr, #21
2b274     08 96 CE F7 | 	test	arg03, #8 wz
2b278     09 AA 66 A0 |  if_e	shl	local03, #9
2b27c     01 A8 0E F2 | 	cmp	local02, #1 wz
2b280     30 00 90 5D |  if_ne	jmp	#LR__4420
2b284     18 92 06 F6 | 	mov	arg01, #24
2b288     55 95 02 F6 | 	mov	arg02, local03
2b28c     E8 04 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b290     3D AD 02 F6 | 	mov	local04, result1
2b294     07 AC 4E F7 | 	zerox	local04, #7 wz
2b298     7C 00 90 5D |  if_ne	jmp	#LR__4423
2b29c     53 93 02 F6 | 	mov	arg01, local01
2b2a0     FE 94 06 F6 | 	mov	arg02, #254
2b2a4     44 04 B0 FD | 	call	#_sdmm_cc_xmit_datablock_0868
2b2a8     00 7A 0E F2 | 	cmp	result1, #0 wz
2b2ac     00 A8 06 56 |  if_ne	mov	local02, #0
2b2b0     64 00 90 FD | 	jmp	#LR__4423
2b2b4                 | LR__4420
2b2b4     15 64 06 F1 | 	add	objptr, #21
2b2b8     32 AD C2 FA | 	rdbyte	local04, objptr
2b2bc     15 64 86 F1 | 	sub	objptr, #21
2b2c0     06 AC CE F7 | 	test	local04, #6 wz
2b2c4     97 92 06 56 |  if_ne	mov	arg01, #151
2b2c8     54 95 02 56 |  if_ne	mov	arg02, local02
2b2cc     A8 04 B0 5D |  if_ne	call	#_sdmm_cc_send_cmd_0871
2b2d0     55 95 02 F6 | 	mov	arg02, local03
2b2d4     19 92 06 F6 | 	mov	arg01, #25
2b2d8     9C 04 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b2dc     3D AD 02 F6 | 	mov	local04, result1
2b2e0     07 AC 4E F7 | 	zerox	local04, #7 wz
2b2e4     30 00 90 5D |  if_ne	jmp	#LR__4422
2b2e8                 | ' 			do {
2b2e8                 | LR__4421
2b2e8     53 93 02 F6 | 	mov	arg01, local01
2b2ec     FC 94 06 F6 | 	mov	arg02, #252
2b2f0     F8 03 B0 FD | 	call	#_sdmm_cc_xmit_datablock_0868
2b2f4     00 7A 0E F2 | 	cmp	result1, #0 wz
2b2f8     01 00 00 5F 
2b2fc     00 A6 06 51 |  if_ne	add	local01, ##512
2b300     F9 A9 6E 5B |  if_ne	djnz	local02, #LR__4421
2b304     00 92 06 F6 | 	mov	arg01, #0
2b308     FD 94 06 F6 | 	mov	arg02, #253
2b30c     DC 03 B0 FD | 	call	#_sdmm_cc_xmit_datablock_0868
2b310     00 7A 0E F2 | 	cmp	result1, #0 wz
2b314     01 A8 06 A6 |  if_e	mov	local02, #1
2b318                 | LR__4422
2b318                 | LR__4423
2b318     AC 02 B0 FD | 	call	#_sdmm_cc_deselect_0858
2b31c                 | ' 				count = 1;
2b31c                 | ' 		}
2b31c                 | ' 	}
2b31c                 | ' 	deselect();
2b31c                 | ' 
2b31c                 | ' 	return count ? RES_ERROR : RES_OK;
2b31c     00 A8 0E F2 | 	cmp	local02, #0 wz
2b320     01 AC 06 56 |  if_ne	mov	local04, #1
2b324     00 AC 06 A6 |  if_e	mov	local04, #0
2b328     56 7B 02 F6 | 	mov	result1, local04
2b32c                 | LR__4424
2b32c     E7 F0 03 F6 | 	mov	ptra, fp
2b330     F2 00 A0 FD | 	call	#popregs_
2b334                 | _sdmm_cc_disk_write_ret
2b334     2D 00 64 FD | 	ret
2b338                 | 
2b338                 | _sdmm_cc_disk_ioctl
2b338     06 CA 05 F6 | 	mov	COUNT_, #6
2b33c     E8 00 A0 FD | 	call	#pushregs_
2b340     30 F0 07 F1 | 	add	ptra, #48
2b344     4A A7 02 F6 | 	mov	local01, arg02
2b348     4B A9 02 F6 | 	mov	local02, arg03
2b34c     00 92 0E F2 | 	cmp	arg01, #0 wz
2b350     01 7A 06 56 |  if_ne	mov	result1, #1
2b354                 | ' 
2b354                 | ' 	return Stat;
2b354     14 64 06 A1 |  if_e	add	objptr, #20
2b358     32 7B C2 AA |  if_e	rdbyte	result1, objptr
2b35c     14 64 86 A1 |  if_e	sub	objptr, #20
2b360     3D 7B E2 F8 | 	getbyte	result1, result1, #0
2b364     01 7A CE F7 | 	test	result1, #1 wz
2b368     03 7A 06 56 |  if_ne	mov	result1, #3
2b36c     F4 00 90 5D |  if_ne	jmp	#LR__4437
2b370     01 AA 06 F6 | 	mov	local03, #1
2b374                 | ' 
2b374                 | ' 	res = RES_ERROR;
2b374                 | ' 	switch (ctrl) {
2b374     53 AD E2 F8 | 	getbyte	local04, local01, #0
2b378     04 AC 26 F3 | 	fle	local04, #4
2b37c     30 AC 62 FD | 	jmprel	local04
2b380                 | LR__4430
2b380     10 00 90 FD | 	jmp	#LR__4431
2b384     1C 00 90 FD | 	jmp	#LR__4432
2b388     CC 00 90 FD | 	jmp	#LR__4435
2b38c     BC 00 90 FD | 	jmp	#LR__4434
2b390     C4 00 90 FD | 	jmp	#LR__4435
2b394                 | LR__4431
2b394     6C 02 B0 FD | 	call	#_sdmm_cc_select_0862
2b398     00 7A 0E F2 | 	cmp	result1, #0 wz
2b39c     00 AA 06 56 |  if_ne	mov	local03, #0
2b3a0                 | ' 			break;
2b3a0     B8 00 90 FD | 	jmp	#LR__4436
2b3a4                 | LR__4432
2b3a4     09 92 06 F6 | 	mov	arg01, #9
2b3a8     00 94 06 F6 | 	mov	arg02, #0
2b3ac     C8 03 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b3b0     3D AD 02 F6 | 	mov	local04, result1
2b3b4     07 AC 4E F7 | 	zerox	local04, #7 wz
2b3b8     A0 00 90 5D |  if_ne	jmp	#LR__4436
2b3bc     E7 92 02 F6 | 	mov	arg01, fp
2b3c0     18 92 06 F1 | 	add	arg01, #24
2b3c4     10 94 06 F6 | 	mov	arg02, #16
2b3c8     9C 02 B0 FD | 	call	#_sdmm_cc_rcvr_datablock_0866
2b3cc     00 7A 0E F2 | 	cmp	result1, #0 wz
2b3d0     88 00 90 AD |  if_e	jmp	#LR__4436
2b3d4     E7 92 02 F6 | 	mov	arg01, fp
2b3d8     18 92 06 F1 | 	add	arg01, #24
2b3dc     49 7B 02 F6 | 	mov	result1, arg01
2b3e0     06 92 06 F1 | 	add	arg01, #6
2b3e4     49 AF 02 FB | 	rdlong	local05, arg01
2b3e8     1B AE FE F9 | 	movbyts	local05, #27
2b3ec     3D 93 C2 FA | 	rdbyte	arg01, result1
2b3f0     06 92 46 F0 | 	shr	arg01, #6
2b3f4     01 92 0E F2 | 	cmp	arg01, #1 wz
2b3f8     36 AF 06 A4 |  if_e	bitl	local05, #310
2b3fc     01 AE 06 A1 |  if_e	add	local05, #1
2b400     0A B0 06 A6 |  if_e	mov	local06, #10
2b404     34 00 90 AD |  if_e	jmp	#LR__4433
2b408     0E AE 46 F0 | 	shr	local05, #14
2b40c     0B AE 46 F7 | 	zerox	local05, #11
2b410     01 AE 06 F1 | 	add	local05, #1
2b414     05 7A 06 F1 | 	add	result1, #5
2b418     3D B1 C2 FA | 	rdbyte	local06, result1
2b41c     58 B1 42 F8 | 	getnib	local06, local06, #0
2b420     04 7A 06 F1 | 	add	result1, #4
2b424     3D 7B E2 FA | 	rdword	result1, result1
2b428     1B 7A FE F9 | 	movbyts	result1, #27
2b42c     17 7A 46 F0 | 	shr	result1, #23
2b430     07 7A 06 F5 | 	and	result1, #7
2b434     3D B1 02 F1 | 	add	local06, result1
2b438     07 B0 86 F1 | 	sub	local06, #7
2b43c                 | LR__4433
2b43c                 | '         cs = (LBA_t)(cs>>14 & 0xfff)+1;
2b43c                 | '         n = (csd[5] & 15) + (__builtin_bswap32(*(uint16_t*)(&csd[9]))>>23 & 0x7)+(2-9);
2b43c                 | '     }
2b43c                 | '     return (LBA_t)cs << n;
2b43c     58 AF 62 F0 | 	shl	local05, local06
2b440     54 AF 62 FC | 	wrlong	local05, local02
2b444     00 AA 06 F6 | 	mov	local03, #0
2b448                 | '                			*(LBA_t*)buff = disc_size(csd);
2b448                 | ' 				res = RES_OK;
2b448                 | ' 			}
2b448                 | ' 			break;
2b448     10 00 90 FD | 	jmp	#LR__4436
2b44c                 | LR__4434
2b44c     54 01 69 FC | 	wrlong	#128, local02
2b450     00 AA 06 F6 | 	mov	local03, #0
2b454                 | ' 			*(DWORD*)buff = 128;
2b454                 | ' 			res = RES_OK;
2b454                 | ' 			break;
2b454     04 00 90 FD | 	jmp	#LR__4436
2b458                 | LR__4435
2b458     04 AA 06 F6 | 	mov	local03, #4
2b45c                 | LR__4436
2b45c     68 01 B0 FD | 	call	#_sdmm_cc_deselect_0858
2b460                 | ' 			res = RES_PARERR;
2b460                 | ' 	}
2b460                 | ' 
2b460                 | ' 	deselect();
2b460                 | ' 
2b460                 | ' 	return res;
2b460     55 7B 02 F6 | 	mov	result1, local03
2b464                 | LR__4437
2b464     E7 F0 03 F6 | 	mov	ptra, fp
2b468     F2 00 A0 FD | 	call	#popregs_
2b46c                 | _sdmm_cc_disk_ioctl_ret
2b46c     2D 00 64 FD | 	ret
2b470                 | 
2b470                 | _sdmm_cc_xmit_mmc_0841
2b470     32 81 02 FB | 	rdlong	_var01, objptr
2b474     08 64 06 F1 | 	add	objptr, #8
2b478     32 83 02 FB | 	rdlong	_var02, objptr
2b47c     08 64 86 F1 | 	sub	objptr, #8
2b480     40 82 62 FD | 	dirl	_var02
2b484     28 02 64 FD | 	setq	#1
2b488     49 85 02 FB | 	rdlong	_var03, arg01
2b48c     69 84 62 FD | 	rev	_var03
2b490     1B 84 FE F9 | 	movbyts	_var03, #27
2b494     41 85 22 FC | 	wypin	_var03, _var02
2b498     4A 85 02 F6 | 	mov	_var03, arg02
2b49c     02 94 4E F0 | 	shr	arg02, #2 wz
2b4a0     03 84 66 F0 | 	shl	_var03, #3
2b4a4     40 85 22 FC | 	wypin	_var03, _var01
2b4a8     41 82 62 FD | 	dirh	_var02
2b4ac     08 92 06 F1 | 	add	arg01, #8
2b4b0     69 86 62 FD | 	rev	_var04
2b4b4     1B 86 FE F9 | 	movbyts	_var04, #27
2b4b8                 | LR__4440
2b4b8     41 87 22 5C |  if_ne	wypin	_var04, _var02
2b4bc     49 87 02 5B |  if_ne	rdlong	_var04, arg01
2b4c0     04 92 06 51 |  if_ne	add	arg01, #4
2b4c4     69 86 62 5D |  if_ne	rev	_var04
2b4c8     1B 86 FE 59 |  if_ne	movbyts	_var04, #27
2b4cc                 | LR__4441
2b4cc     40 82 72 5D |  if_ne	testp	_var02 wc
2b4d0     F8 FF 9F 1D |  if_a	jmp	#LR__4441
2b4d4     F8 95 6E 5B |  if_ne	djnz	arg02, #LR__4440
2b4d8                 | LR__4442
2b4d8     40 80 72 FD | 	testp	_var01 wc
2b4dc     F8 FF 9F 3D |  if_ae	jmp	#LR__4442
2b4e0     40 82 62 FD | 	dirl	_var02
2b4e4     FF FF FF FF 
2b4e8     41 FF 2B FC | 	wypin	##-1, _var02
2b4ec     41 82 62 FD | 	dirh	_var02
2b4f0                 | _sdmm_cc_xmit_mmc_0841_ret
2b4f0     2D 00 64 FD | 	ret
2b4f4                 | 
2b4f4                 | _sdmm_cc_rcvr_mmc_0848
2b4f4     32 81 02 FB | 	rdlong	_var01, objptr
2b4f8     0C 64 06 F1 | 	add	objptr, #12
2b4fc     32 83 02 FB | 	rdlong	_var02, objptr
2b500     0C 64 86 F1 | 	sub	objptr, #12
2b504     41 03 08 FC | 	akpin	_var02
2b508     4A 85 0A F6 | 	mov	_var03, arg02 wz
2b50c     02 84 4E F0 | 	shr	_var03, #2 wz
2b510     30 00 90 AD |  if_e	jmp	#LR__4452
2b514     42 87 02 F6 | 	mov	_var04, _var03
2b518     05 86 66 F0 | 	shl	_var04, #5
2b51c     40 87 22 FC | 	wypin	_var04, _var01
2b520     41 7F 18 FC | 	wxpin	#63, _var02
2b524                 | LR__4450
2b524                 | LR__4451
2b524     40 82 72 FD | 	testp	_var02 wc
2b528     F8 FF 9F 3D |  if_ae	jmp	#LR__4451
2b52c     41 87 8A FA | 	rdpin	_var04, _var02
2b530     69 86 62 FD | 	rev	_var04
2b534     1B 86 FE F9 | 	movbyts	_var04, #27
2b538     49 87 62 FC | 	wrlong	_var04, arg01
2b53c     04 92 06 F1 | 	add	arg01, #4
2b540     F8 85 6E FB | 	djnz	_var03, #LR__4450
2b544                 | LR__4452
2b544     03 94 0E F5 | 	and	arg02, #3 wz
2b548     24 00 90 AD |  if_e	jmp	#LR__4455
2b54c     41 4F 18 FC | 	wxpin	#39, _var02
2b550                 | LR__4453
2b550     40 11 28 FC | 	wypin	#8, _var01
2b554                 | LR__4454
2b554     40 82 72 FD | 	testp	_var02 wc
2b558     F8 FF 9F 3D |  if_ae	jmp	#LR__4454
2b55c     41 87 8A FA | 	rdpin	_var04, _var02
2b560     69 86 62 FD | 	rev	_var04
2b564     49 87 42 FC | 	wrbyte	_var04, arg01
2b568     01 92 06 F1 | 	add	arg01, #1
2b56c     F8 95 6E FB | 	djnz	arg02, #LR__4453
2b570                 | LR__4455
2b570                 | _sdmm_cc_rcvr_mmc_0848_ret
2b570     2D 00 64 FD | 	ret
2b574                 | 
2b574                 | _sdmm_cc_wait_ready_0852
2b574     03 CA 05 F6 | 	mov	COUNT_, #3
2b578     E8 00 A0 FD | 	call	#pushregs_
2b57c     F8 A7 02 F6 | 	mov	local01, ptra
2b580     1A A8 62 FD | 	getct	local02
2b584     14 AA 06 FB | 	rdlong	local03, #20
2b588     01 AA 46 F0 | 	shr	local03, #1
2b58c                 | ' 	UINT tmr, tmout;
2b58c                 | ' 
2b58c                 | ' 	tmr = _cnt();
2b58c                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
2b58c                 | ' 	for(;;) {
2b58c     04 F0 07 F1 | 	add	ptra, #4
2b590                 | LR__4460
2b590     53 93 02 F6 | 	mov	arg01, local01
2b594     01 94 06 F6 | 	mov	arg02, #1
2b598     58 FF BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b59c     53 95 C2 FA | 	rdbyte	arg02, local01
2b5a0     FF 94 0E F2 | 	cmp	arg02, #255 wz
2b5a4     01 7A 06 A6 |  if_e	mov	result1, #1
2b5a8     1A 7A 62 5D |  if_ne	getct	result1
2b5ac     54 7B 82 51 |  if_ne	sub	result1, local02
2b5b0     55 7B 12 52 |  if_ne	cmp	result1, local03 wc
2b5b4     00 7A 06 16 |  if_a	mov	result1, #0
2b5b8     D4 FF 9F 4D |  if_c_and_nz	jmp	#LR__4460
2b5bc     E7 F0 03 F6 | 	mov	ptra, fp
2b5c0     F2 00 A0 FD | 	call	#popregs_
2b5c4                 | _sdmm_cc_wait_ready_0852_ret
2b5c4     2D 00 64 FD | 	ret
2b5c8                 | 
2b5c8                 | _sdmm_cc_deselect_0858
2b5c8     00 CA 05 F6 | 	mov	COUNT_, #0
2b5cc     E8 00 A0 FD | 	call	#pushregs_
2b5d0     F8 95 02 F6 | 	mov	arg02, ptra
2b5d4     04 64 06 F1 | 	add	objptr, #4
2b5d8     32 93 02 FB | 	rdlong	arg01, objptr
2b5dc     04 64 86 F1 | 	sub	objptr, #4
2b5e0     04 F0 07 F1 | 	add	ptra, #4
2b5e4     59 92 62 FD | 	drvh	arg01
2b5e8     1F 20 64 FD | 	waitx	#16
2b5ec     4A 93 02 F6 | 	mov	arg01, arg02
2b5f0     01 94 06 F6 | 	mov	arg02, #1
2b5f4     FC FE BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b5f8     E7 F0 03 F6 | 	mov	ptra, fp
2b5fc     F2 00 A0 FD | 	call	#popregs_
2b600                 | _sdmm_cc_deselect_0858_ret
2b600     2D 00 64 FD | 	ret
2b604                 | 
2b604                 | _sdmm_cc_select_0862
2b604     01 CA 05 F6 | 	mov	COUNT_, #1
2b608     E8 00 A0 FD | 	call	#pushregs_
2b60c     F8 95 02 F6 | 	mov	arg02, ptra
2b610     04 64 06 F1 | 	add	objptr, #4
2b614     32 93 02 FB | 	rdlong	arg01, objptr
2b618     08 64 06 F1 | 	add	objptr, #8
2b61c     32 A7 02 FB | 	rdlong	local01, objptr
2b620     0C 64 86 F1 | 	sub	objptr, #12
2b624     04 F0 07 F1 | 	add	ptra, #4
2b628     50 A6 62 FD | 	fltl	local01
2b62c     58 92 62 FD | 	drvl	arg01
2b630     1F 20 64 FD | 	waitx	#16
2b634     41 A6 62 FD | 	dirh	local01
2b638     4A 93 02 F6 | 	mov	arg01, arg02
2b63c     01 94 06 F6 | 	mov	arg02, #1
2b640     B0 FE BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b644     2C FF BF FD | 	call	#_sdmm_cc_wait_ready_0852
2b648     00 7A 0E F2 | 	cmp	result1, #0 wz
2b64c     01 7A 06 56 |  if_ne	mov	result1, #1
2b650     08 00 90 5D |  if_ne	jmp	#LR__4470
2b654     70 FF BF FD | 	call	#_sdmm_cc_deselect_0858
2b658                 | ' 
2b658                 | ' 	deselect();
2b658                 | ' 	return 0;
2b658     00 7A 06 F6 | 	mov	result1, #0
2b65c                 | LR__4470
2b65c     E7 F0 03 F6 | 	mov	ptra, fp
2b660     F2 00 A0 FD | 	call	#popregs_
2b664                 | _sdmm_cc_select_0862_ret
2b664     2D 00 64 FD | 	ret
2b668                 | 
2b668                 | _sdmm_cc_rcvr_datablock_0866
2b668     05 CA 05 F6 | 	mov	COUNT_, #5
2b66c     E8 00 A0 FD | 	call	#pushregs_
2b670     49 A7 02 F6 | 	mov	local01, arg01
2b674     4A A9 02 F6 | 	mov	local02, arg02
2b678     F8 AB 02 F6 | 	mov	local03, ptra
2b67c     1A AC 62 FD | 	getct	local04
2b680     14 AE 06 FB | 	rdlong	local05, #20
2b684     03 AE 46 F0 | 	shr	local05, #3
2b688                 | ' 	UINT tmr, tmout;
2b688                 | ' 
2b688                 | ' 	tmr = _cnt();
2b688                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
2b688                 | ' 	for(;;) {
2b688     04 F0 07 F1 | 	add	ptra, #4
2b68c                 | LR__4480
2b68c     55 93 02 F6 | 	mov	arg01, local03
2b690     01 94 06 F6 | 	mov	arg02, #1
2b694     5C FE BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b698     55 95 C2 FA | 	rdbyte	arg02, local03
2b69c     FF 94 0E F2 | 	cmp	arg02, #255 wz
2b6a0     1A 7A 62 AD |  if_e	getct	result1
2b6a4     3D 95 02 A6 |  if_e	mov	arg02, result1
2b6a8     56 95 82 A1 |  if_e	sub	arg02, local04
2b6ac     57 95 12 A2 |  if_e	cmp	arg02, local05 wc
2b6b0     D8 FF 9F 8D |  if_c_and_z	jmp	#LR__4480
2b6b4     55 AF C2 FA | 	rdbyte	local05, local03
2b6b8     FE AE 0E F2 | 	cmp	local05, #254 wz
2b6bc     00 7A 06 56 |  if_ne	mov	result1, #0
2b6c0     1C 00 90 5D |  if_ne	jmp	#LR__4481
2b6c4     53 93 02 F6 | 	mov	arg01, local01
2b6c8     54 95 02 F6 | 	mov	arg02, local02
2b6cc     24 FE BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b6d0     55 93 02 F6 | 	mov	arg01, local03
2b6d4     02 94 06 F6 | 	mov	arg02, #2
2b6d8     18 FE BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b6dc                 | ' 
2b6dc                 | ' 	rcvr_mmc(buff, btr);
2b6dc                 | ' 	rcvr_mmc(d, 2);
2b6dc                 | ' 
2b6dc                 | ' 	return 1;
2b6dc     01 7A 06 F6 | 	mov	result1, #1
2b6e0                 | LR__4481
2b6e0     E7 F0 03 F6 | 	mov	ptra, fp
2b6e4     F2 00 A0 FD | 	call	#popregs_
2b6e8                 | _sdmm_cc_rcvr_datablock_0866_ret
2b6e8     2D 00 64 FD | 	ret
2b6ec                 | 
2b6ec                 | _sdmm_cc_xmit_datablock_0868
2b6ec     03 CA 05 F6 | 	mov	COUNT_, #3
2b6f0     E8 00 A0 FD | 	call	#pushregs_
2b6f4     49 A7 02 F6 | 	mov	local01, arg01
2b6f8     4A A9 02 F6 | 	mov	local02, arg02
2b6fc     F8 AB 02 F6 | 	mov	local03, ptra
2b700     04 F0 07 F1 | 	add	ptra, #4
2b704     6C FE BF FD | 	call	#_sdmm_cc_wait_ready_0852
2b708     00 7A 0E F2 | 	cmp	result1, #0 wz
2b70c     00 7A 06 A6 |  if_e	mov	result1, #0
2b710     58 00 90 AD |  if_e	jmp	#LR__4491
2b714     55 A9 42 FC | 	wrbyte	local02, local03
2b718     55 93 02 F6 | 	mov	arg01, local03
2b71c     01 94 06 F6 | 	mov	arg02, #1
2b720     4C FD BF FD | 	call	#_sdmm_cc_xmit_mmc_0841
2b724     54 A9 E2 F8 | 	getbyte	local02, local02, #0
2b728     FD A8 0E F2 | 	cmp	local02, #253 wz
2b72c     38 00 90 AD |  if_e	jmp	#LR__4490
2b730     53 93 02 F6 | 	mov	arg01, local01
2b734     09 94 C6 F9 | 	decod	arg02, #9
2b738     34 FD BF FD | 	call	#_sdmm_cc_xmit_mmc_0841
2b73c     55 93 02 F6 | 	mov	arg01, local03
2b740     02 94 06 F6 | 	mov	arg02, #2
2b744     AC FD BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b748     55 93 02 F6 | 	mov	arg01, local03
2b74c     01 94 06 F6 | 	mov	arg02, #1
2b750     A0 FD BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b754     55 AB C2 FA | 	rdbyte	local03, local03
2b758     1F AA 06 F5 | 	and	local03, #31
2b75c     05 AA 0E F2 | 	cmp	local03, #5 wz
2b760                 | ' 			return 0;
2b760     00 7A 06 56 |  if_ne	mov	result1, #0
2b764     04 00 90 5D |  if_ne	jmp	#LR__4491
2b768                 | LR__4490
2b768                 | ' 	}
2b768                 | ' 
2b768                 | ' 	return 1;
2b768     01 7A 06 F6 | 	mov	result1, #1
2b76c                 | LR__4491
2b76c     E7 F0 03 F6 | 	mov	ptra, fp
2b770     F2 00 A0 FD | 	call	#popregs_
2b774                 | _sdmm_cc_xmit_datablock_0868_ret
2b774     2D 00 64 FD | 	ret
2b778                 | 
2b778                 | _sdmm_cc_send_cmd_0871
2b778     04 CA 05 F6 | 	mov	COUNT_, #4
2b77c     E8 00 A0 FD | 	call	#pushregs_
2b780                 | _sdmm_cc_send_cmd_0871_enter
2b780     49 A7 02 F6 | 	mov	local01, arg01
2b784     4A A9 02 F6 | 	mov	local02, arg02
2b788     F8 AB 02 F6 | 	mov	local03, ptra
2b78c     53 7B E2 F8 | 	getbyte	result1, local01, #0
2b790     80 7A CE F7 | 	test	result1, #128 wz
2b794     08 F0 07 F1 | 	add	ptra, #8
2b798     20 00 90 AD |  if_e	jmp	#LR__4500
2b79c     53 A7 E2 F8 | 	getbyte	local01, local01, #0
2b7a0     7F A6 06 F5 | 	and	local01, #127
2b7a4     37 92 06 F6 | 	mov	arg01, #55
2b7a8     00 94 06 F6 | 	mov	arg02, #0
2b7ac     C8 FF BF FD | 	call	#_sdmm_cc_send_cmd_0871
2b7b0     3D 95 E2 F8 | 	getbyte	arg02, result1, #0
2b7b4     02 94 16 F2 | 	cmp	arg02, #2 wc
2b7b8     BC 00 90 3D |  if_ae	jmp	#LR__4503
2b7bc                 | LR__4500
2b7bc     53 7B E2 F8 | 	getbyte	result1, local01, #0
2b7c0     0C 7A 0E F2 | 	cmp	result1, #12 wz
2b7c4     14 00 90 AD |  if_e	jmp	#LR__4501
2b7c8     FC FD BF FD | 	call	#_sdmm_cc_deselect_0858
2b7cc     34 FE BF FD | 	call	#_sdmm_cc_select_0862
2b7d0     00 7A 0E F2 | 	cmp	result1, #0 wz
2b7d4     FF 7A 06 A6 |  if_e	mov	result1, #255
2b7d8     9C 00 90 AD |  if_e	jmp	#LR__4503
2b7dc                 | LR__4501
2b7dc     53 95 E2 F8 | 	getbyte	arg02, local01, #0
2b7e0     40 7A 06 F6 | 	mov	result1, #64
2b7e4     4A 7B 42 F5 | 	or	result1, arg02
2b7e8     55 7B 42 FC | 	wrbyte	result1, local03
2b7ec     55 95 02 F6 | 	mov	arg02, local03
2b7f0     01 94 06 F1 | 	add	arg02, #1
2b7f4     1B A8 FE F9 | 	movbyts	local02, #27
2b7f8     4A A9 62 FC | 	wrlong	local02, arg02
2b7fc     01 AC 06 F6 | 	mov	local04, #1
2b800     53 A9 02 F6 | 	mov	local02, local01
2b804     07 A8 4E F7 | 	zerox	local02, #7 wz
2b808     95 AC 06 A6 |  if_e	mov	local04, #149
2b80c     53 A9 E2 F8 | 	getbyte	local02, local01, #0
2b810     08 A8 0E F2 | 	cmp	local02, #8 wz
2b814     87 AC 06 A6 |  if_e	mov	local04, #135
2b818     05 AA 06 F1 | 	add	local03, #5
2b81c     55 AD 42 FC | 	wrbyte	local04, local03
2b820     05 AA 86 F1 | 	sub	local03, #5
2b824     55 93 02 F6 | 	mov	arg01, local03
2b828     06 94 06 F6 | 	mov	arg02, #6
2b82c     40 FC BF FD | 	call	#_sdmm_cc_xmit_mmc_0841
2b830     53 A7 E2 F8 | 	getbyte	local01, local01, #0
2b834     0C A6 0E F2 | 	cmp	local01, #12 wz
2b838     55 93 02 A6 |  if_e	mov	arg01, local03
2b83c     06 92 06 A1 |  if_e	add	arg01, #6
2b840     01 94 06 A6 |  if_e	mov	arg02, #1
2b844     AC FC BF AD |  if_e	call	#_sdmm_cc_rcvr_mmc_0848
2b848     0A AC 06 F6 | 	mov	local04, #10
2b84c                 | ' 	n = 10;
2b84c                 | ' 	do
2b84c                 | LR__4502
2b84c     55 93 02 F6 | 	mov	arg01, local03
2b850     06 92 06 F1 | 	add	arg01, #6
2b854     01 94 06 F6 | 	mov	arg02, #1
2b858     98 FC BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b85c     06 AA 06 F1 | 	add	local03, #6
2b860     55 A9 C2 FA | 	rdbyte	local02, local03
2b864     06 AA 86 F1 | 	sub	local03, #6
2b868     80 A8 CE F7 | 	test	local02, #128 wz
2b86c     F7 AD 6E 5B |  if_ne	djnz	local04, #LR__4502
2b870                 | ' 
2b870                 | ' 	return buf[6];
2b870     06 AA 06 F1 | 	add	local03, #6
2b874     55 7B C2 FA | 	rdbyte	result1, local03
2b878                 | LR__4503
2b878     E7 F0 03 F6 | 	mov	ptra, fp
2b87c     F2 00 A0 FD | 	call	#popregs_
2b880                 | _sdmm_cc_send_cmd_0871_ret
2b880     2D 00 64 FD | 	ret
2b884                 | 
2b884                 | _sdmm_cc_disk_setpins
2b884     00 92 0E F2 | 	cmp	arg01, #0 wz
2b888     01 7A 66 56 |  if_ne	neg	result1, #1
2b88c     24 00 90 5D |  if_ne	jmp	#_sdmm_cc_disk_setpins_ret
2b890     32 95 62 FC | 	wrlong	arg02, objptr
2b894     04 64 06 F1 | 	add	objptr, #4
2b898     32 97 62 FC | 	wrlong	arg03, objptr
2b89c     04 64 06 F1 | 	add	objptr, #4
2b8a0     32 99 62 FC | 	wrlong	arg04, objptr
2b8a4     04 64 06 F1 | 	add	objptr, #4
2b8a8     32 9B 62 FC | 	wrlong	arg05, objptr
2b8ac     0C 64 86 F1 | 	sub	objptr, #12
2b8b0                 | '     _pin_clk = pclk;
2b8b0                 | '     _pin_ss = pss;
2b8b0                 | '     _pin_di = pdi;
2b8b0                 | '     _pin_do = pdo;
2b8b0                 | ' #line 848 "C:/Users/Piotr/Downloads/flexprop-7.0.0/flexprop/include/filesys/block/sdmm.cc"
2b8b0                 | '     return 0;
2b8b0     00 7A 06 F6 | 	mov	result1, #0
2b8b4                 | _sdmm_cc_disk_setpins_ret
2b8b4     2D 00 64 FD | 	ret
2b8b8                 | 
2b8b8                 | _sdmm_cc_disk_deinitialize
2b8b8     04 CA 05 F6 | 	mov	COUNT_, #4
2b8bc     E8 00 A0 FD | 	call	#pushregs_
2b8c0     00 92 4E F2 | 	cmps	arg01, #0 wz
2b8c4     32 A7 02 FB | 	rdlong	local01, objptr
2b8c8     04 64 06 F1 | 	add	objptr, #4
2b8cc     32 A9 02 FB | 	rdlong	local02, objptr
2b8d0     04 64 06 F1 | 	add	objptr, #4
2b8d4     32 AB 02 FB | 	rdlong	local03, objptr
2b8d8     08 64 06 F1 | 	add	objptr, #8
2b8dc     32 AD 02 FB | 	rdlong	local04, objptr
2b8e0     04 64 86 F1 | 	sub	objptr, #4
2b8e4     32 93 02 FB | 	rdlong	arg01, objptr
2b8e8     0C 64 86 F1 | 	sub	objptr, #12
2b8ec                 | ' #line 865 "C:/Users/Piotr/Downloads/flexprop-7.0.0/flexprop/include/filesys/block/sdmm.cc"
2b8ec                 | '         return RES_NOTRDY;
2b8ec     03 7A 06 56 |  if_ne	mov	result1, #3
2b8f0     34 00 90 5D |  if_ne	jmp	#LR__4510
2b8f4     50 92 62 FD | 	fltl	arg01
2b8f8     49 01 08 FC | 	wrpin	#0, arg01
2b8fc     50 AC 62 FD | 	fltl	local04
2b900     56 01 08 FC | 	wrpin	#0, local04
2b904     50 AA 62 FD | 	fltl	local03
2b908     55 01 08 FC | 	wrpin	#0, local03
2b90c     50 A6 62 FD | 	fltl	local01
2b910     53 01 08 FC | 	wrpin	#0, local01
2b914     50 A8 62 FD | 	fltl	local02
2b918     54 01 08 FC | 	wrpin	#0, local02
2b91c     0A 92 06 F6 | 	mov	arg01, #10
2b920     A8 93 BF FD | 	call	#__system___waitms
2b924                 | '     }
2b924                 | ' #line 871 "C:/Users/Piotr/Downloads/flexprop-7.0.0/flexprop/include/filesys/block/sdmm.cc"
2b924                 | '     _pinclear(SMPIN_DO);
2b924                 | '     _pinclear(PIN_DO);
2b924                 | '     _pinclear(PIN_DI);
2b924                 | '     _pinclear(PIN_CLK);
2b924                 | '     _pinclear(PIN_SS);
2b924                 | ' 
2b924                 | '     _waitms(10);
2b924                 | ' 
2b924                 | '     return 0;
2b924     00 7A 06 F6 | 	mov	result1, #0
2b928                 | LR__4510
2b928     E7 F0 03 F6 | 	mov	ptra, fp
2b92c     F2 00 A0 FD | 	call	#popregs_
2b930                 | _sdmm_cc_disk_deinitialize_ret
2b930     2D 00 64 FD | 	ret
2b934                 | 
2b934                 | _sdmm_cc_v_do_io
2b934     08 CA 05 F6 | 	mov	COUNT_, #8
2b938     E8 00 A0 FD | 	call	#pushregs_
2b93c     4B A7 02 F6 | 	mov	local01, arg03
2b940     4C A9 02 F6 | 	mov	local02, arg04
2b944     4A AB 02 F6 | 	mov	local03, arg02
2b948     18 64 06 F1 | 	add	objptr, #24
2b94c     32 AD 02 FB | 	rdlong	local04, objptr
2b950     00 98 06 F6 | 	mov	arg04, #0
2b954     FF AD 06 F5 | 	and	local04, #511
2b958     00 AE 06 F6 | 	mov	local05, #0
2b95c     32 93 02 FB | 	rdlong	arg01, objptr
2b960     04 64 06 F1 | 	add	objptr, #4
2b964     32 95 02 FB | 	rdlong	arg02, objptr
2b968     1C 64 86 F1 | 	sub	objptr, #28
2b96c     09 96 06 F6 | 	mov	arg03, #9
2b970     7C B2 BF FD | 	call	#__system___int64_sar
2b974     3D B1 02 F6 | 	mov	local06, result1
2b978     00 AC 0E F2 | 	cmp	local04, #0 wz
2b97c                 | ' 
2b97c                 | ' 
2b97c                 | '         return -1;
2b97c     01 7A 66 56 |  if_ne	neg	result1, #1
2b980     84 00 90 5D |  if_ne	jmp	#LR__4523
2b984     53 B3 02 F6 | 	mov	local07, local01
2b988     09 B2 46 F0 | 	shr	local07, #9
2b98c     00 A8 0E F2 | 	cmp	local02, #0 wz
2b990     1C 00 90 AD |  if_e	jmp	#LR__4520
2b994     00 92 06 F6 | 	mov	arg01, #0
2b998     55 95 02 F6 | 	mov	arg02, local03
2b99c     58 97 02 F6 | 	mov	arg03, local06
2b9a0     59 99 02 F6 | 	mov	arg04, local07
2b9a4     88 F8 BF FD | 	call	#_sdmm_cc_disk_write
2b9a8     3D B5 02 F6 | 	mov	local08, result1
2b9ac     18 00 90 FD | 	jmp	#LR__4521
2b9b0                 | LR__4520
2b9b0     00 92 06 F6 | 	mov	arg01, #0
2b9b4     55 95 02 F6 | 	mov	arg02, local03
2b9b8     58 97 02 F6 | 	mov	arg03, local06
2b9bc     59 99 02 F6 | 	mov	arg04, local07
2b9c0     AC F7 BF FD | 	call	#_sdmm_cc_disk_read
2b9c4     3D B5 02 F6 | 	mov	local08, result1
2b9c8                 | LR__4521
2b9c8     00 B4 0E F2 | 	cmp	local08, #0 wz
2b9cc     34 00 90 5D |  if_ne	jmp	#LR__4522
2b9d0     09 B2 66 F0 | 	shl	local07, #9
2b9d4     59 AF 02 F1 | 	add	local05, local07
2b9d8     18 64 06 F1 | 	add	objptr, #24
2b9dc     32 7B 02 FB | 	rdlong	result1, objptr
2b9e0     04 64 06 F1 | 	add	objptr, #4
2b9e4     32 7D 02 FB | 	rdlong	result2, objptr
2b9e8     59 7B 12 F1 | 	add	result1, local07 wc
2b9ec     00 7C 26 F1 | 	addx	result2, #0
2b9f0     04 64 86 F1 | 	sub	objptr, #4
2b9f4     32 7B 62 FC | 	wrlong	result1, objptr
2b9f8     04 64 06 F1 | 	add	objptr, #4
2b9fc     32 7D 62 FC | 	wrlong	result2, objptr
2ba00     1C 64 86 F1 | 	sub	objptr, #28
2ba04                 | LR__4522
2ba04                 | ' 
2ba04                 | ' 
2ba04                 | '     }
2ba04                 | '     return bytes_io;
2ba04     57 7B 02 F6 | 	mov	result1, local05
2ba08                 | LR__4523
2ba08     E7 F0 03 F6 | 	mov	ptra, fp
2ba0c     F2 00 A0 FD | 	call	#popregs_
2ba10                 | _sdmm_cc_v_do_io_ret
2ba10     2D 00 64 FD | 	ret
2ba14                 | 
2ba14                 | _sdmm_cc_v_read
2ba14                 | ' {
2ba14                 | '     return v_do_io(fil, buf, count,  (0) );
2ba14     00 98 06 F6 | 	mov	arg04, #0
2ba18     18 FF BF FD | 	call	#_sdmm_cc_v_do_io
2ba1c                 | _sdmm_cc_v_read_ret
2ba1c     2D 00 64 FD | 	ret
2ba20                 | 
2ba20                 | _sdmm_cc_v_write
2ba20                 | ' {
2ba20                 | '     return v_do_io(fil, buf, count,  (1) );
2ba20     01 98 06 F6 | 	mov	arg04, #1
2ba24     0C FF BF FD | 	call	#_sdmm_cc_v_do_io
2ba28                 | _sdmm_cc_v_write_ret
2ba28     2D 00 64 FD | 	ret
2ba2c                 | 
2ba2c                 | _sdmm_cc_v_ioctl
2ba2c     00 92 06 F6 | 	mov	arg01, #0
2ba30     04 F9 BF FD | 	call	#_sdmm_cc_disk_ioctl
2ba34     00 7A 0E F2 | 	cmp	result1, #0 wz
2ba38                 | '         return _seterror( 10 );
2ba38     20 6A 06 51 |  if_ne	add	ptr___system__dat__, #32
2ba3c     35 15 68 5C |  if_ne	wrlong	#10, ptr___system__dat__
2ba40     20 6A 86 51 |  if_ne	sub	ptr___system__dat__, #32
2ba44     01 7A 66 56 |  if_ne	neg	result1, #1
2ba48                 | '     return 0;
2ba48     00 7A 06 A6 |  if_e	mov	result1, #0
2ba4c                 | _sdmm_cc_v_ioctl_ret
2ba4c     2D 00 64 FD | 	ret
2ba50                 | 
2ba50                 | _sdmm_cc_v_lseek
2ba50     4A 81 02 F6 | 	mov	_var01, arg02
2ba54     4C 85 0A F6 | 	mov	_var03, arg04 wz
2ba58     1C 00 90 5D |  if_ne	jmp	#LR__4530
2ba5c     4B 85 02 F6 | 	mov	_var03, arg03
2ba60     18 64 06 F1 | 	add	objptr, #24
2ba64     32 81 62 FC | 	wrlong	_var01, objptr
2ba68     04 64 06 F1 | 	add	objptr, #4
2ba6c     32 85 62 FC | 	wrlong	_var03, objptr
2ba70     1C 64 86 F1 | 	sub	objptr, #28
2ba74     64 00 90 FD | 	jmp	#LR__4533
2ba78                 | LR__4530
2ba78     01 84 0E F2 | 	cmp	_var03, #1 wz
2ba7c     30 00 90 5D |  if_ne	jmp	#LR__4531
2ba80     18 64 06 F1 | 	add	objptr, #24
2ba84     32 7B 02 FB | 	rdlong	result1, objptr
2ba88     04 64 06 F1 | 	add	objptr, #4
2ba8c     32 7D 02 FB | 	rdlong	result2, objptr
2ba90     40 7B 12 F1 | 	add	result1, _var01 wc
2ba94     4B 7D 22 F1 | 	addx	result2, arg03
2ba98     04 64 86 F1 | 	sub	objptr, #4
2ba9c     32 7B 62 FC | 	wrlong	result1, objptr
2baa0     04 64 06 F1 | 	add	objptr, #4
2baa4     32 7D 62 FC | 	wrlong	result2, objptr
2baa8     1C 64 86 F1 | 	sub	objptr, #28
2baac     2C 00 90 FD | 	jmp	#LR__4532
2bab0                 | LR__4531
2bab0     40 7B 22 F6 | 	not	result1, _var01
2bab4     01 7A 0E F1 | 	add	result1, #1 wz
2bab8     4B 7D 22 F6 | 	not	result2, arg03
2babc     00 94 06 F6 | 	mov	arg02, #0
2bac0     01 94 66 A6 |  if_e	neg	arg02, #1
2bac4     4A 7D 82 F1 | 	sub	result2, arg02
2bac8     18 64 06 F1 | 	add	objptr, #24
2bacc     32 7B 62 FC | 	wrlong	result1, objptr
2bad0     04 64 06 F1 | 	add	objptr, #4
2bad4     32 7D 62 FC | 	wrlong	result2, objptr
2bad8     1C 64 86 F1 | 	sub	objptr, #28
2badc                 | LR__4532
2badc                 | LR__4533
2badc                 | '         curpos = -off;
2badc                 | '     }
2badc                 | '     return curpos;
2badc     18 64 06 F1 | 	add	objptr, #24
2bae0     32 7B 02 FB | 	rdlong	result1, objptr
2bae4     04 64 06 F1 | 	add	objptr, #4
2bae8     32 7D 02 FB | 	rdlong	result2, objptr
2baec     1C 64 86 F1 | 	sub	objptr, #28
2baf0                 | _sdmm_cc_v_lseek_ret
2baf0     2D 00 64 FD | 	ret
2baf4                 | 
2baf4                 | _sdmm_cc_v_flush
2baf4                 | ' {
2baf4                 | '     return 0;
2baf4     00 7A 06 F6 | 	mov	result1, #0
2baf8                 | _sdmm_cc_v_flush_ret
2baf8     2D 00 64 FD | 	ret
2bafc                 | 
2bafc                 | _sdmm_cc_v_close
2bafc     00 92 06 F6 | 	mov	arg01, #0
2bb00     B4 FD BF FD | 	call	#_sdmm_cc_disk_deinitialize
2bb04     20 64 06 F1 | 	add	objptr, #32
2bb08     32 93 02 FB | 	rdlong	arg01, objptr
2bb0c     04 64 06 F1 | 	add	objptr, #4
2bb10     32 95 02 FB | 	rdlong	arg02, objptr
2bb14     24 64 86 F1 | 	sub	objptr, #36
2bb18     60 B1 BF FD | 	call	#__system___freepins
2bb1c                 | ' {
2bb1c                 | '     disk_deinitialize(0);
2bb1c                 | '     _freepins(f_pinmask);
2bb1c                 | '     return 0;
2bb1c     00 7A 06 F6 | 	mov	result1, #0
2bb20                 | _sdmm_cc_v_close_ret
2bb20     2D 00 64 FD | 	ret
2bb24                 | 
2bb24                 | _sdmm_cc_v_putc
2bb24     00 CA 05 F6 | 	mov	COUNT_, #0
2bb28     E8 00 A0 FD | 	call	#pushregs_
2bb2c     0C F0 07 F1 | 	add	ptra, #12
2bb30     04 CE 05 F1 | 	add	fp, #4
2bb34     E7 92 62 FC | 	wrlong	arg01, fp
2bb38     4A 93 02 F6 | 	mov	arg01, arg02
2bb3c     E7 94 02 F6 | 	mov	arg02, fp
2bb40     01 96 06 F6 | 	mov	arg03, #1
2bb44     04 CE 85 F1 | 	sub	fp, #4
2bb48                 | ' {
2bb48                 | '     return v_do_io(fil, buf, count,  (1) );
2bb48     01 98 06 F6 | 	mov	arg04, #1
2bb4c     E4 FD BF FD | 	call	#_sdmm_cc_v_do_io
2bb50     01 7A 0E F2 | 	cmp	result1, #1 wz
2bb54     04 CE 05 A1 |  if_e	add	fp, #4
2bb58     E7 7A 02 AB |  if_e	rdlong	result1, fp
2bb5c     04 CE 85 A1 |  if_e	sub	fp, #4
2bb60                 | '     return -1;
2bb60     01 7A 66 56 |  if_ne	neg	result1, #1
2bb64     E7 F0 03 F6 | 	mov	ptra, fp
2bb68     F2 00 A0 FD | 	call	#popregs_
2bb6c                 | _sdmm_cc_v_putc_ret
2bb6c     2D 00 64 FD | 	ret
2bb70                 | 
2bb70                 | _sdmm_cc_v_getc
2bb70     00 CA 05 F6 | 	mov	COUNT_, #0
2bb74     E8 00 A0 FD | 	call	#pushregs_
2bb78     0C F0 07 F1 | 	add	ptra, #12
2bb7c     08 CE 05 F1 | 	add	fp, #8
2bb80     E7 00 68 FC | 	wrlong	#0, fp
2bb84     E7 94 02 F6 | 	mov	arg02, fp
2bb88     08 CE 85 F1 | 	sub	fp, #8
2bb8c     01 96 06 F6 | 	mov	arg03, #1
2bb90                 | ' {
2bb90                 | '     return v_do_io(fil, buf, count,  (0) );
2bb90     00 98 06 F6 | 	mov	arg04, #0
2bb94     9C FD BF FD | 	call	#_sdmm_cc_v_do_io
2bb98     01 7A 0E F2 | 	cmp	result1, #1 wz
2bb9c     08 CE 05 A1 |  if_e	add	fp, #8
2bba0     E7 7A 02 AB |  if_e	rdlong	result1, fp
2bba4     08 CE 85 A1 |  if_e	sub	fp, #8
2bba8                 | '     return -1;
2bba8     01 7A 66 56 |  if_ne	neg	result1, #1
2bbac     E7 F0 03 F6 | 	mov	ptra, fp
2bbb0     F2 00 A0 FD | 	call	#popregs_
2bbb4                 | _sdmm_cc_v_getc_ret
2bbb4     2D 00 64 FD | 	ret
2bbb8                 | 
2bbb8                 | _fatfs_cc_ff_uni2oem
2bbb8     00 80 06 F6 | 	mov	_var01, #0
2bbbc     80 92 16 F2 | 	cmp	arg01, #128 wc
2bbc0     49 81 02 C6 |  if_b	mov	_var01, arg01
2bbc4     58 00 90 CD |  if_b	jmp	#LR__4544
2bbc8     80 00 00 FF 
2bbcc     00 92 16 F2 | 	cmp	arg01, ##65536 wc
2bbd0     4C 00 90 3D |  if_ae	jmp	#LR__4543
2bbd4     4A 7B 32 F9 | 	getword	result1, arg02, #0
2bbd8     01 00 00 FF 
2bbdc     52 7B 0E F2 | 	cmp	result1, ##850 wz
2bbe0     3C 00 90 5D |  if_ne	jmp	#LR__4543
2bbe4                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
2bbe4     00 80 06 F6 | 	mov	_var01, #0
2bbe8     D7 14 48 FB | 	callpa	#(@LR__4541-@LR__4540)>>2,fcache_load_ptr_
2bbec                 | LR__4540
2bbec     40 7B 32 F9 | 	getword	result1, _var01, #0
2bbf0     80 7A 16 F2 | 	cmp	result1, #128 wc
2bbf4     1C 00 90 3D |  if_ae	jmp	#LR__4542
2bbf8     40 7B 32 F9 | 	getword	result1, _var01, #0
2bbfc     01 7A 66 F0 | 	shl	result1, #1
2bc00     37 7B 02 F1 | 	add	result1, ptr__fatfs_cc_dat__
2bc04     3D 7B E2 FA | 	rdword	result1, result1
2bc08     3D 93 0A F2 | 	cmp	arg01, result1 wz
2bc0c     01 80 06 51 |  if_ne	add	_var01, #1
2bc10     D8 FF 9F 5D |  if_ne	jmp	#LR__4540
2bc14                 | LR__4541
2bc14                 | LR__4542
2bc14     40 81 32 F9 | 	getword	_var01, _var01, #0
2bc18     80 80 06 F1 | 	add	_var01, #128
2bc1c     40 81 E2 F8 | 	getbyte	_var01, _var01, #0
2bc20                 | LR__4543
2bc20                 | LR__4544
2bc20                 | ' 			c = (c + 0x80) & 0xFF;
2bc20                 | ' 		}
2bc20                 | ' 	}
2bc20                 | ' 
2bc20                 | ' 	return c;
2bc20     40 7B 02 F6 | 	mov	result1, _var01
2bc24                 | _fatfs_cc_ff_uni2oem_ret
2bc24     2D 00 64 FD | 	ret
2bc28                 | 
2bc28                 | _fatfs_cc_ff_oem2uni
2bc28     00 80 06 F6 | 	mov	_var01, #0
2bc2c     49 7B 32 F9 | 	getword	result1, arg01, #0
2bc30     80 7A 16 F2 | 	cmp	result1, #128 wc
2bc34     49 81 02 C6 |  if_b	mov	_var01, arg01
2bc38     2C 00 90 CD |  if_b	jmp	#LR__4551
2bc3c     4A 95 32 F9 | 	getword	arg02, arg02, #0
2bc40     01 00 00 FF 
2bc44     52 95 0E F2 | 	cmp	arg02, ##850 wz
2bc48     1C 00 90 5D |  if_ne	jmp	#LR__4550
2bc4c     49 7B 32 F9 | 	getword	result1, arg01, #0
2bc50     00 7B 16 F2 | 	cmp	result1, #256 wc
2bc54     49 93 32 C9 |  if_b	getword	arg01, arg01, #0
2bc58     80 92 86 C1 |  if_b	sub	arg01, #128
2bc5c     01 92 66 C0 |  if_b	shl	arg01, #1
2bc60     37 93 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
2bc64     49 81 E2 CA |  if_b	rdword	_var01, arg01
2bc68                 | LR__4550
2bc68                 | LR__4551
2bc68                 | ' 		}
2bc68                 | ' 	}
2bc68                 | ' 
2bc68                 | ' 	return c;
2bc68     40 7B 02 F6 | 	mov	result1, _var01
2bc6c                 | _fatfs_cc_ff_oem2uni_ret
2bc6c     2D 00 64 FD | 	ret
2bc70                 | 
2bc70                 | _fatfs_cc_ff_wtoupper
2bc70     49 81 02 F6 | 	mov	_var01, arg01
2bc74     80 00 00 FF 
2bc78     00 80 16 F2 | 	cmp	_var01, ##65536 wc
2bc7c     58 01 90 3D |  if_ae	jmp	#LR__4573
2bc80     40 83 02 F6 | 	mov	_var02, _var01
2bc84     41 81 32 F9 | 	getword	_var01, _var02, #0
2bc88     08 00 00 FF 
2bc8c     00 80 16 F2 | 	cmp	_var01, ##4096 wc
2bc90     37 85 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
2bc94     00 85 06 C1 |  if_b	add	_var03, #256
2bc98     37 85 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
2bc9c     01 00 00 3F 
2bca0     F2 84 06 31 |  if_ae	add	_var03, ##754
2bca4     42 87 02 F6 | 	mov	_var04, _var03
2bca8                 | ' 		uc = (WORD)uni;
2bca8                 | ' 		p = uc < 0x1000 ? (WORD*) cvt1 : (WORD *) cvt2;
2bca8                 | ' 		for (;;) {
2bca8                 | LR__4560
2bca8     43 89 E2 FA | 	rdword	_var05, _var04
2bcac     44 85 02 F6 | 	mov	_var03, _var05
2bcb0     0F 84 4E F7 | 	zerox	_var03, #15 wz
2bcb4     02 86 06 F1 | 	add	_var04, #2
2bcb8     18 01 90 AD |  if_e	jmp	#LR__4572
2bcbc     41 85 32 F9 | 	getword	_var03, _var02, #0
2bcc0     44 81 32 F9 | 	getword	_var01, _var05, #0
2bcc4     40 85 12 F2 | 	cmp	_var03, _var01 wc
2bcc8     08 01 90 CD |  if_b	jmp	#LR__4572
2bccc     43 8B E2 FA | 	rdword	_var06, _var04
2bcd0     45 8D 32 F9 | 	getword	_var07, _var06, #0
2bcd4     08 8C 46 F0 | 	shr	_var07, #8
2bcd8     45 8B 32 F9 | 	getword	_var06, _var06, #0
2bcdc     45 8B E2 F8 | 	getbyte	_var06, _var06, #0
2bce0     41 85 32 F9 | 	getword	_var03, _var02, #0
2bce4     44 8F 32 F9 | 	getword	_var08, _var05, #0
2bce8     45 81 32 F9 | 	getword	_var01, _var06, #0
2bcec     40 8F 02 F1 | 	add	_var08, _var01
2bcf0     47 85 52 F2 | 	cmps	_var03, _var08 wc
2bcf4     02 86 06 F1 | 	add	_var04, #2
2bcf8     C4 00 90 3D |  if_ae	jmp	#LR__4571
2bcfc                 | ' 				switch (cmd) {
2bcfc     46 91 32 F9 | 	getword	_var09, _var07, #0
2bd00     09 90 26 F3 | 	fle	_var09, #9
2bd04     30 90 62 FD | 	jmprel	_var09
2bd08                 | LR__4561
2bd08     24 00 90 FD | 	jmp	#LR__4562
2bd0c     3C 00 90 FD | 	jmp	#LR__4563
2bd10     54 00 90 FD | 	jmp	#LR__4564
2bd14     5C 00 90 FD | 	jmp	#LR__4565
2bd18     64 00 90 FD | 	jmp	#LR__4566
2bd1c     6C 00 90 FD | 	jmp	#LR__4567
2bd20     74 00 90 FD | 	jmp	#LR__4568
2bd24     7C 00 90 FD | 	jmp	#LR__4569
2bd28     84 00 90 FD | 	jmp	#LR__4570
2bd2c     A4 00 90 FD | 	jmp	#LR__4572
2bd30                 | LR__4562
2bd30     41 83 32 F9 | 	getword	_var02, _var02, #0
2bd34     44 89 32 F9 | 	getword	_var05, _var05, #0
2bd38     44 83 82 F1 | 	sub	_var02, _var05
2bd3c     01 82 66 F0 | 	shl	_var02, #1
2bd40     43 83 02 F1 | 	add	_var02, _var04
2bd44     41 83 E2 FA | 	rdword	_var02, _var02
2bd48     88 00 90 FD | 	jmp	#LR__4572
2bd4c                 | LR__4563
2bd4c     41 85 32 F9 | 	getword	_var03, _var02, #0
2bd50     41 83 32 F9 | 	getword	_var02, _var02, #0
2bd54     44 89 32 F9 | 	getword	_var05, _var05, #0
2bd58     44 83 82 F1 | 	sub	_var02, _var05
2bd5c     01 82 06 F5 | 	and	_var02, #1
2bd60     42 83 C2 F2 | 	subr	_var02, _var03
2bd64     6C 00 90 FD | 	jmp	#LR__4572
2bd68                 | LR__4564
2bd68     41 83 32 F9 | 	getword	_var02, _var02, #0
2bd6c     10 82 86 F1 | 	sub	_var02, #16
2bd70     60 00 90 FD | 	jmp	#LR__4572
2bd74                 | LR__4565
2bd74     41 83 32 F9 | 	getword	_var02, _var02, #0
2bd78     20 82 86 F1 | 	sub	_var02, #32
2bd7c     54 00 90 FD | 	jmp	#LR__4572
2bd80                 | LR__4566
2bd80     41 83 32 F9 | 	getword	_var02, _var02, #0
2bd84     30 82 86 F1 | 	sub	_var02, #48
2bd88     48 00 90 FD | 	jmp	#LR__4572
2bd8c                 | LR__4567
2bd8c     41 83 32 F9 | 	getword	_var02, _var02, #0
2bd90     1A 82 86 F1 | 	sub	_var02, #26
2bd94     3C 00 90 FD | 	jmp	#LR__4572
2bd98                 | LR__4568
2bd98     41 83 32 F9 | 	getword	_var02, _var02, #0
2bd9c     08 82 06 F1 | 	add	_var02, #8
2bda0     30 00 90 FD | 	jmp	#LR__4572
2bda4                 | LR__4569
2bda4     41 83 32 F9 | 	getword	_var02, _var02, #0
2bda8     50 82 86 F1 | 	sub	_var02, #80
2bdac     24 00 90 FD | 	jmp	#LR__4572
2bdb0                 | LR__4570
2bdb0     41 83 32 F9 | 	getword	_var02, _var02, #0
2bdb4     0E 00 00 FF 
2bdb8     60 82 86 F1 | 	sub	_var02, ##7264
2bdbc                 | ' 				}
2bdbc                 | ' 				break;
2bdbc     14 00 90 FD | 	jmp	#LR__4572
2bdc0                 | LR__4571
2bdc0     0F 8C 4E F7 | 	zerox	_var07, #15 wz
2bdc4     45 8B 32 A9 |  if_e	getword	_var06, _var06, #0
2bdc8     01 8A 66 A0 |  if_e	shl	_var06, #1
2bdcc     45 87 02 A1 |  if_e	add	_var04, _var06
2bdd0     D4 FE 9F FD | 	jmp	#LR__4560
2bdd4                 | LR__4572
2bdd4     41 81 32 F9 | 	getword	_var01, _var02, #0
2bdd8                 | LR__4573
2bdd8                 | ' 		}
2bdd8                 | ' 		uni = uc;
2bdd8                 | ' 	}
2bdd8                 | ' 
2bdd8                 | ' 	return uni;
2bdd8     40 7B 02 F6 | 	mov	result1, _var01
2bddc                 | _fatfs_cc_ff_wtoupper_ret
2bddc     2D 00 64 FD | 	ret
2bde0                 | 
2bde0                 | _fatfs_cc_strncpy
2bde0     49 81 02 F6 | 	mov	_var01, arg01
2bde4     D7 18 48 FB | 	callpa	#(@LR__4581-@LR__4580)>>2,fcache_load_ptr_
2bde8                 | ' 
2bde8                 | ' 	dscan = dst;
2bde8                 | ' 	sscan = src;
2bde8                 | ' 	count = n;
2bde8                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
2bde8                 | LR__4580
2bde8     01 96 86 F1 | 	sub	arg03, #1
2bdec     00 96 56 F2 | 	cmps	arg03, #0 wc
2bdf0     24 00 90 CD |  if_b	jmp	#LR__4582
2bdf4     4A 7B 02 F6 | 	mov	result1, arg02
2bdf8     01 7A 06 F1 | 	add	result1, #1
2bdfc     4A 83 C2 FA | 	rdbyte	_var02, arg02
2be00     3D 95 02 F6 | 	mov	arg02, result1
2be04     40 83 42 FC | 	wrbyte	_var02, _var01
2be08     41 83 E2 F8 | 	getbyte	_var02, _var02, #0
2be0c     07 82 4E F7 | 	zerox	_var02, #7 wz
2be10                 | ' 		continue;
2be10     01 80 06 F1 | 	add	_var01, #1
2be14     D0 FF 9F 5D |  if_ne	jmp	#LR__4580
2be18                 | LR__4581
2be18                 | LR__4582
2be18     D7 0C 48 FB | 	callpa	#(@LR__4584-@LR__4583)>>2,fcache_load_ptr_
2be1c                 | ' 	while (--count >= 0)
2be1c                 | LR__4583
2be1c     01 96 86 F1 | 	sub	arg03, #1
2be20     00 96 56 F2 | 	cmps	arg03, #0 wc
2be24     40 85 02 36 |  if_ae	mov	_var03, _var01
2be28     01 80 06 31 |  if_ae	add	_var01, #1
2be2c     42 01 48 3C |  if_ae	wrbyte	#0, _var03
2be30     E8 FF 9F 3D |  if_ae	jmp	#LR__4583
2be34                 | LR__4584
2be34                 | ' 		*dscan++ = '\0';
2be34                 | ' 	return(dst);
2be34     49 7B 02 F6 | 	mov	result1, arg01
2be38                 | _fatfs_cc_strncpy_ret
2be38     2D 00 64 FD | 	ret
2be3c                 | 
2be3c                 | _fatfs_cc_memcmp
2be3c                 | ' 	for (n = size; n > 0; n--)
2be3c     00 96 0E F2 | 	cmp	arg03, #0 wz
2be40     28 00 90 AD |  if_e	jmp	#LR__4591
2be44                 | LR__4590
2be44     49 81 C2 FA | 	rdbyte	_var01, arg01
2be48     4A 83 C2 FA | 	rdbyte	_var02, arg02
2be4c     41 81 0A F2 | 	cmp	_var01, _var02 wz
2be50     01 92 06 A1 |  if_e	add	arg01, #1
2be54     01 94 06 A1 |  if_e	add	arg02, #1
2be58                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
2be58     49 7B C2 5A |  if_ne	rdbyte	result1, arg01
2be5c     4A 83 C2 5A |  if_ne	rdbyte	_var02, arg02
2be60     41 7B 82 51 |  if_ne	sub	result1, _var02
2be64     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
2be68     F6 97 6E FB | 	djnz	arg03, #LR__4590
2be6c                 | LR__4591
2be6c                 | ' 
2be6c                 | ' 	return(0);
2be6c     00 7A 06 F6 | 	mov	result1, #0
2be70                 | _fatfs_cc_memcmp_ret
2be70     2D 00 64 FD | 	ret
2be74                 | 
2be74                 | _fatfs_cc_strncmp
2be74     49 81 0A F6 | 	mov	_var01, arg01 wz
2be78     14 00 90 5D |  if_ne	jmp	#LR__4600
2be7c                 | ' 		return scan2 ? -1 : 0;
2be7c     00 94 0E F2 | 	cmp	arg02, #0 wz
2be80     01 82 66 56 |  if_ne	neg	_var02, #1
2be84     00 82 06 A6 |  if_e	mov	_var02, #0
2be88     41 7B 02 F6 | 	mov	result1, _var02
2be8c     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
2be90                 | LR__4600
2be90     00 94 0E F2 | 	cmp	arg02, #0 wz
2be94     01 7A 06 A6 |  if_e	mov	result1, #1
2be98     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2be9c     4B 85 02 F6 | 	mov	_var03, arg03
2bea0     D7 16 48 FB | 	callpa	#(@LR__4602-@LR__4601)>>2,fcache_load_ptr_
2bea4                 | ' 	count = n;
2bea4                 | ' 	do {
2bea4                 | LR__4601
2bea4     40 87 C2 FA | 	rdbyte	_var04, _var01
2bea8     4A 89 02 F6 | 	mov	_var05, arg02
2beac     44 8B C2 FA | 	rdbyte	_var06, _var05
2beb0     01 84 86 F1 | 	sub	_var03, #1
2beb4     00 84 56 F2 | 	cmps	_var03, #0 wc
2beb8     01 80 06 F1 | 	add	_var01, #1
2bebc     01 94 06 F1 | 	add	arg02, #1
2bec0     00 86 0E 32 |  if_ae	cmp	_var04, #0 wz
2bec4     08 00 90 2D |  if_nc_and_z	jmp	#LR__4603
2bec8     45 87 0A 32 |  if_ae	cmp	_var04, _var06 wz
2becc     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4601
2bed0                 | LR__4602
2bed0                 | LR__4603
2bed0     00 84 56 F2 | 	cmps	_var03, #0 wc
2bed4                 | ' 		return(0);
2bed4     00 7A 06 C6 |  if_b	mov	result1, #0
2bed8     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
2bedc     45 87 0A F2 | 	cmp	_var04, _var06 wz
2bee0                 | ' 		return(0);
2bee0     00 7A 06 A6 |  if_e	mov	result1, #0
2bee4     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2bee8     00 86 0E F2 | 	cmp	_var04, #0 wz
2beec                 | ' 		return(-1);
2beec     01 7A 66 A6 |  if_e	neg	result1, #1
2bef0     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2bef4     00 8A 0E F2 | 	cmp	_var06, #0 wz
2bef8                 | ' 		return(1);
2bef8     01 7A 06 A6 |  if_e	mov	result1, #1
2befc                 | ' 		return(c1 - c2);
2befc     43 7B 02 56 |  if_ne	mov	result1, _var04
2bf00     45 7B 82 51 |  if_ne	sub	result1, _var06
2bf04                 | _fatfs_cc_strncmp_ret
2bf04     2D 00 64 FD | 	ret
2bf08                 | 
2bf08                 | _fatfs_cc_strchr
2bf08                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-7.0.0/flexprop/include/libc/string/strchr.c"
2bf08                 | ' 	while ((c = *s++) != (char) charwanted)
2bf08                 | LR__4610
2bf08     49 81 02 F6 | 	mov	_var01, arg01
2bf0c     40 83 C2 FA | 	rdbyte	_var02, _var01
2bf10     41 85 E2 F8 | 	getbyte	_var03, _var02, #0
2bf14     4A 87 E2 F8 | 	getbyte	_var04, arg02, #0
2bf18     43 85 0A F2 | 	cmp	_var03, _var04 wz
2bf1c     01 92 06 F1 | 	add	arg01, #1
2bf20     14 00 90 AD |  if_e	jmp	#LR__4611
2bf24     41 85 02 F6 | 	mov	_var03, _var02
2bf28     07 84 4E F7 | 	zerox	_var03, #7 wz
2bf2c     00 7A 06 A6 |  if_e	mov	result1, #0
2bf30     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
2bf34     D0 FF 9F FD | 	jmp	#LR__4610
2bf38                 | LR__4611
2bf38                 | ' 	return((char *)--s);
2bf38     01 92 86 F1 | 	sub	arg01, #1
2bf3c     49 7B 02 F6 | 	mov	result1, arg01
2bf40                 | _fatfs_cc_strchr_ret
2bf40     2D 00 64 FD | 	ret
2bf44                 | 
2bf44                 | _fatfs_cc_time
2bf44     01 CA 05 F6 | 	mov	COUNT_, #1
2bf48     E8 00 A0 FD | 	call	#pushregs_
2bf4c     14 F0 07 F1 | 	add	ptra, #20
2bf50     49 A7 02 F6 | 	mov	local01, arg01
2bf54     E7 92 02 F6 | 	mov	arg01, fp
2bf58     08 92 06 F1 | 	add	arg01, #8
2bf5c     00 94 06 F6 | 	mov	arg02, #0
2bf60     A0 5E B0 FD | 	call	#_fatfs_cc_gettimeofday
2bf64     08 CE 05 F1 | 	add	fp, #8
2bf68     E7 7A 02 FB | 	rdlong	result1, fp
2bf6c     08 CE 85 F1 | 	sub	fp, #8
2bf70     00 A6 0E F2 | 	cmp	local01, #0 wz
2bf74     53 7B 62 5C |  if_ne	wrlong	result1, local01
2bf78                 | '         *tp = now;
2bf78                 | '     return now;
2bf78     E7 F0 03 F6 | 	mov	ptra, fp
2bf7c     F2 00 A0 FD | 	call	#popregs_
2bf80                 | _fatfs_cc_time_ret
2bf80     2D 00 64 FD | 	ret
2bf84                 | 
2bf84                 | _fatfs_cc_mktime
2bf84     06 CA 05 F6 | 	mov	COUNT_, #6
2bf88     E8 00 A0 FD | 	call	#pushregs_
2bf8c     49 A7 02 F6 | 	mov	local01, arg01
2bf90     14 A6 06 F1 | 	add	local01, #20
2bf94     53 93 02 FB | 	rdlong	arg01, local01
2bf98     14 A6 86 F1 | 	sub	local01, #20
2bf9c     46 92 56 F2 | 	cmps	arg01, #70 wc
2bfa0                 | '                 return (time_t) -1;
2bfa0     01 7A 66 C6 |  if_b	neg	result1, #1
2bfa4     78 01 90 CD |  if_b	jmp	#LR__4624
2bfa8     03 00 00 FF 
2bfac     6C A9 06 F6 | 	mov	local02, ##1900
2bfb0     14 A6 06 F1 | 	add	local01, #20
2bfb4     53 7B 02 FB | 	rdlong	result1, local01
2bfb8     3D A9 02 F1 | 	add	local02, result1
2bfbc     08 A6 86 F1 | 	sub	local01, #8
2bfc0     53 AB 02 FB | 	rdlong	local03, local01
2bfc4     01 AA 86 F1 | 	sub	local03, #1
2bfc8     04 A6 06 F1 | 	add	local01, #4
2bfcc     53 93 02 FB | 	rdlong	arg01, local01
2bfd0     10 A6 86 F1 | 	sub	local01, #16
2bfd4     02 92 66 F0 | 	shl	arg01, #2
2bfd8     37 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
2bfdc     02 00 00 FF 
2bfe0     78 7A 06 F1 | 	add	result1, ##1144
2bfe4     3D 93 02 F1 | 	add	arg01, result1
2bfe8     49 7B 02 FB | 	rdlong	result1, arg01
2bfec     3D AB 02 F1 | 	add	local03, result1
2bff0     54 93 02 F6 | 	mov	arg01, local02
2bff4     B4 5E B0 FD | 	call	#_fatfs_cc__is_leap_year
2bff8     00 7A 0E F2 | 	cmp	result1, #0 wz
2bffc     1C 00 90 AD |  if_e	jmp	#LR__4620
2c000     00 AC 06 F6 | 	mov	local04, #0
2c004     10 A6 06 F1 | 	add	local01, #16
2c008     53 7B 02 FB | 	rdlong	result1, local01
2c00c     10 A6 86 F1 | 	sub	local01, #16
2c010     02 7A 56 F2 | 	cmps	result1, #2 wc
2c014     01 AC 06 36 |  if_ae	mov	local04, #1
2c018     04 00 90 FD | 	jmp	#LR__4621
2c01c                 | LR__4620
2c01c     00 AC 06 F6 | 	mov	local04, #0
2c020                 | LR__4621
2c020     04 A6 06 F1 | 	add	local01, #4
2c024     53 93 02 FB | 	rdlong	arg01, local01
2c028     04 A6 86 F1 | 	sub	local01, #4
2c02c     53 AF 02 FB | 	rdlong	local05, local01
2c030     08 A6 06 F1 | 	add	local01, #8
2c034     53 7B 02 FB | 	rdlong	result1, local01
2c038     07 00 00 FF 
2c03c     10 7A 06 FD | 	qmul	result1, ##3600
2c040     56 AB 02 F1 | 	add	local03, local04
2c044     49 AD 02 F6 | 	mov	local04, arg01
2c048     04 AC 66 F0 | 	shl	local04, #4
2c04c     49 AD 82 F1 | 	sub	local04, arg01
2c050     02 AC 66 F0 | 	shl	local04, #2
2c054     56 AF 02 F1 | 	add	local05, local04
2c058     08 A6 86 F1 | 	sub	local01, #8
2c05c     18 AC 62 FD | 	getqx	local04
2c060     A8 00 00 FF 
2c064     80 AB 06 FD | 	qmul	local03, ##86400
2c068     56 AF 02 F1 | 	add	local05, local04
2c06c     54 AB 02 F6 | 	mov	local03, local02
2c070     03 00 00 FF 
2c074     B2 AB 86 F1 | 	sub	local03, ##1970
2c078     18 AC 62 FD | 	getqx	local04
2c07c     99 F0 00 FF 
2c080     80 AB 06 FD | 	qmul	local03, ##31536000
2c084     56 AF 02 F1 | 	add	local05, local04
2c088     54 AB 02 F6 | 	mov	local03, local02
2c08c     03 00 00 FF 
2c090     B1 AB 86 F1 | 	sub	local03, ##1969
2c094     55 B1 52 F6 | 	abs	local06, local03 wc
2c098     02 B0 46 F0 | 	shr	local06, #2
2c09c     58 B1 82 F6 | 	negc	local06, local06
2c0a0     03 00 00 FF 
2c0a4     D1 A9 56 F2 | 	cmps	local02, ##2001 wc
2c0a8     18 AC 62 FD | 	getqx	local04
2c0ac     56 AF 02 F1 | 	add	local05, local04
2c0b0     18 00 90 CD |  if_b	jmp	#LR__4622
2c0b4     03 00 00 FF 
2c0b8     D0 A9 86 F1 | 	sub	local02, ##2000
2c0bc     54 AD 52 F6 | 	abs	local04, local02 wc
2c0c0     64 AC 16 FD | 	qdiv	local04, #100
2c0c4     18 AC 62 FD | 	getqx	local04
2c0c8     56 B1 A2 F3 | 	sumnc	local06, local04
2c0cc                 | LR__4622
2c0cc     A8 00 00 FF 
2c0d0     80 B1 06 FD | 	qmul	local06, ##86400
2c0d4     18 B0 62 FD | 	getqx	local06
2c0d8     58 AF 02 F1 | 	add	local05, local06
2c0dc     E8 01 B0 FD | 	call	#_fatfs_cc__tzset
2c0e0     02 00 00 FF 
2c0e4     44 6E 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1092
2c0e8     37 B1 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
2c0ec     58 AF 02 F1 | 	add	local05, local06
2c0f0     68 6E 06 F1 | 	add	ptr__fatfs_cc_dat__, #104
2c0f4     37 AB 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2c0f8     02 00 00 FF 
2c0fc     AC 6E 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1196
2c100     01 AA 0E F2 | 	cmp	local03, #1 wz
2c104     14 00 90 5D |  if_ne	jmp	#LR__4623
2c108     53 93 02 F6 | 	mov	arg01, local01
2c10c     88 60 B0 FD | 	call	#_fatfs_cc___indst
2c110     00 7A 0E F2 | 	cmp	result1, #0 wz
2c114     07 00 00 5F 
2c118     10 AE 86 51 |  if_ne	sub	local05, ##3600
2c11c                 | LR__4623
2c11c                 | '                 s -=  (3600L) ;
2c11c                 | ' 
2c11c                 | '         return s;
2c11c     57 7B 02 F6 | 	mov	result1, local05
2c120                 | LR__4624
2c120     E7 F0 03 F6 | 	mov	ptra, fp
2c124     F2 00 A0 FD | 	call	#popregs_
2c128                 | _fatfs_cc_mktime_ret
2c128     2D 00 64 FD | 	ret
2c12c                 | 
2c12c                 | _fatfs_cc__gmtime_r
2c12c     03 CA 05 F6 | 	mov	COUNT_, #3
2c130     E8 00 A0 FD | 	call	#pushregs_
2c134     49 A7 02 FB | 	rdlong	local01, arg01
2c138     A8 00 00 FF 
2c13c     80 A7 16 FD | 	qdiv	local01, ##86400
2c140     18 7A 62 FD | 	getqx	result1
2c144     04 7A 06 F1 | 	add	result1, #4
2c148     07 7A 16 FD | 	qdiv	result1, #7
2c14c     18 94 06 F1 | 	add	arg02, #24
2c150     D1 7F 27 FF 
2c154     00 A6 16 F2 | 	cmp	local01, ##1325376000 wc
2c158     D1 7F 27 3F 
2c15c     00 A6 86 31 |  if_ae	sub	local01, ##1325376000
2c160     03 00 00 3F 
2c164     DC A9 06 36 |  if_ae	mov	local02, ##2012
2c168     03 00 00 CF 
2c16c     B2 A9 06 C6 |  if_b	mov	local02, ##1970
2c170                 | ' 	  year = 1970;
2c170                 | ' 	}
2c170                 | ' 
2c170                 | ' 	for(;;) {
2c170     19 7A 62 FD | 	getqy	result1
2c174     4A 7B 62 FC | 	wrlong	result1, arg02
2c178     18 94 86 F1 | 	sub	arg02, #24
2c17c                 | LR__4630
2c17c     54 93 02 F6 | 	mov	arg01, local02
2c180     28 5D B0 FD | 	call	#_fatfs_cc__is_leap_year
2c184     00 7A 0E F2 | 	cmp	result1, #0 wz
2c188     42 F1 00 5F 
2c18c     00 AB 06 56 |  if_ne	mov	local03, ##31622400
2c190     99 F0 00 AF 
2c194     80 AB 06 A6 |  if_e	mov	local03, ##31536000
2c198     55 A7 12 F2 | 	cmp	local01, local03 wc
2c19c                 | ' 	    break;
2c19c     01 A8 06 31 |  if_ae	add	local02, #1
2c1a0     55 A7 82 31 |  if_ae	sub	local01, local03
2c1a4     D4 FF 9F 3D |  if_ae	jmp	#LR__4630
2c1a8     A8 00 00 FF 
2c1ac     80 A7 16 FD | 	qdiv	local01, ##86400
2c1b0     54 AB 02 F6 | 	mov	local03, local02
2c1b4     03 00 00 FF 
2c1b8     6C AB 86 F1 | 	sub	local03, ##1900
2c1bc     14 94 06 F1 | 	add	arg02, #20
2c1c0     4A AB 62 FC | 	wrlong	local03, arg02
2c1c4     08 94 06 F1 | 	add	arg02, #8
2c1c8     54 93 02 F6 | 	mov	arg01, local02
2c1cc     18 A8 62 FD | 	getqx	local02
2c1d0     4A A9 62 FC | 	wrlong	local02, arg02
2c1d4     1C 94 86 F1 | 	sub	arg02, #28
2c1d8     D0 5C B0 FD | 	call	#_fatfs_cc__is_leap_year
2c1dc     00 7A 0E F2 | 	cmp	result1, #0 wz
2c1e0     1D AA 06 56 |  if_ne	mov	local03, #29
2c1e4     1C AA 06 A6 |  if_e	mov	local03, #28
2c1e8     02 00 00 FF 
2c1ec     4C 6E 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1100
2c1f0     37 AB 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
2c1f4     02 00 00 FF 
2c1f8     4C 6E 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1100
2c1fc                 | ' 
2c1fc                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
2c1fc                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
2c1fc     00 92 06 F6 | 	mov	arg01, #0
2c200     D7 26 48 FB | 	callpa	#(@LR__4632-@LR__4631)>>2,fcache_load_ptr_
2c204                 | LR__4631
2c204     49 AB 02 F6 | 	mov	local03, arg01
2c208     02 AA 66 F0 | 	shl	local03, #2
2c20c     37 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
2c210     02 00 00 FF 
2c214     48 7A 06 F1 | 	add	result1, ##1096
2c218     3D AB 02 F1 | 	add	local03, result1
2c21c     55 AB 02 FB | 	rdlong	local03, local03
2c220     55 A9 52 F2 | 	cmps	local02, local03 wc
2c224     28 00 90 CD |  if_b	jmp	#LR__4633
2c228     49 7B 02 F6 | 	mov	result1, arg01
2c22c     02 7A 66 F0 | 	shl	result1, #2
2c230     37 AB 02 F6 | 	mov	local03, ptr__fatfs_cc_dat__
2c234     02 00 00 FF 
2c238     48 AA 06 F1 | 	add	local03, ##1096
2c23c     55 7B 02 F1 | 	add	result1, local03
2c240     3D 7B 02 FB | 	rdlong	result1, result1
2c244     3D A9 82 F1 | 	sub	local02, result1
2c248     01 92 06 F1 | 	add	arg01, #1
2c24c     B4 FF 9F FD | 	jmp	#LR__4631
2c250                 | LR__4632
2c250                 | LR__4633
2c250     A8 00 00 FF 
2c254     80 A7 16 FD | 	qdiv	local01, ##86400
2c258     10 94 06 F1 | 	add	arg02, #16
2c25c     4A 93 62 FC | 	wrlong	arg01, arg02
2c260     01 A8 06 F1 | 	add	local02, #1
2c264     04 94 86 F1 | 	sub	arg02, #4
2c268     4A A9 62 FC | 	wrlong	local02, arg02
2c26c     19 A6 62 FD | 	getqy	local01
2c270     07 00 00 FF 
2c274     10 A6 16 FD | 	qdiv	local01, ##3600
2c278     18 AA 62 FD | 	getqx	local03
2c27c     07 00 00 FF 
2c280     10 A6 16 FD | 	qdiv	local01, ##3600
2c284     04 94 86 F1 | 	sub	arg02, #4
2c288     4A AB 62 FC | 	wrlong	local03, arg02
2c28c     19 A6 62 FD | 	getqy	local01
2c290     3C A6 16 FD | 	qdiv	local01, #60
2c294     18 AA 62 FD | 	getqx	local03
2c298     3C A6 16 FD | 	qdiv	local01, #60
2c29c     04 94 86 F1 | 	sub	arg02, #4
2c2a0     4A AB 62 FC | 	wrlong	local03, arg02
2c2a4     04 94 86 F1 | 	sub	arg02, #4
2c2a8                 | '         stm->tm_isdst = 0;
2c2a8                 | ' 
2c2a8                 | ' ;
2c2a8                 | '         return stm;
2c2a8     4A 7B 02 F6 | 	mov	result1, arg02
2c2ac     19 AA 62 FD | 	getqy	local03
2c2b0     4A AB 62 FC | 	wrlong	local03, arg02
2c2b4     20 94 06 F1 | 	add	arg02, #32
2c2b8     4A 01 68 FC | 	wrlong	#0, arg02
2c2bc     E7 F0 03 F6 | 	mov	ptra, fp
2c2c0     F2 00 A0 FD | 	call	#popregs_
2c2c4                 | _fatfs_cc__gmtime_r_ret
2c2c4     2D 00 64 FD | 	ret
2c2c8                 | 
2c2c8                 | _fatfs_cc__tzset
2c2c8     92 01 00 FF 
2c2cc     24 93 06 F6 | 	mov	arg01, ##@LR__5482
2c2d0     0C 50 B0 FD | 	call	#_fatfs_cc_getenv
2c2d4     3D 93 02 F6 | 	mov	arg01, result1
2c2d8     37 95 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
2c2dc     02 00 00 FF 
2c2e0     AC 94 06 F1 | 	add	arg02, ##1196
2c2e4     14 5C B0 FD | 	call	#_fatfs_cc___tzoffset
2c2e8     02 00 00 FF 
2c2ec     44 6E 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1092
2c2f0     37 7B 62 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
2c2f4     02 00 00 FF 
2c2f8     44 6E 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1092
2c2fc                 | _fatfs_cc__tzset_ret
2c2fc     2D 00 64 FD | 	ret
2c300                 | 
2c300                 | _fatfs_cc_disk_read
2c300     09 CA 05 F6 | 	mov	COUNT_, #9
2c304     E8 00 A0 FD | 	call	#pushregs_
2c308     4A AF 02 F6 | 	mov	local05, arg02
2c30c     4C B1 02 F6 | 	mov	local06, arg04
2c310     4B 93 02 F6 | 	mov	arg01, arg03
2c314     00 94 06 F6 | 	mov	arg02, #0
2c318     09 96 06 F6 | 	mov	arg03, #9
2c31c     00 98 06 F6 | 	mov	arg04, #0
2c320     94 A8 BF FD | 	call	#__system___int64_shl
2c324     3D A7 02 F6 | 	mov	local01, result1
2c328     3E A9 02 F6 | 	mov	local02, result2
2c32c     01 00 00 FF 
2c330     10 64 06 F1 | 	add	objptr, ##528
2c334     32 7D 0A FB | 	rdlong	result2, objptr wz
2c338     01 00 00 FF 
2c33c     10 64 86 F1 | 	sub	objptr, ##528
2c340                 | '         return RES_NOTRDY;
2c340     03 7A 06 A6 |  if_e	mov	result1, #3
2c344     E8 00 90 AD |  if_e	jmp	#LR__4640
2c348     53 95 02 F6 | 	mov	arg02, local01
2c34c     54 97 02 F6 | 	mov	arg03, local02
2c350     01 00 00 FF 
2c354     10 64 06 F1 | 	add	objptr, ##528
2c358     32 93 02 FB | 	rdlong	arg01, objptr
2c35c     49 99 02 F6 | 	mov	arg04, arg01
2c360     30 98 06 F1 | 	add	arg04, #48
2c364     4C B3 02 FB | 	rdlong	local07, arg04
2c368     59 B5 02 F6 | 	mov	local08, local07
2c36c     13 B2 46 F7 | 	zerox	local07, #19
2c370     14 B4 46 F0 | 	shr	local08, #20
2c374     02 B4 66 F0 | 	shl	local08, #2
2c378     2D B5 02 F1 | 	add	local08, __methods__
2c37c     5A B5 02 FB | 	rdlong	local08, local08
2c380     01 00 00 FF 
2c384     10 64 86 F1 | 	sub	objptr, ##528
2c388     00 98 06 F6 | 	mov	arg04, #0
2c38c     32 B7 02 F6 | 	mov	local09, objptr
2c390     59 65 02 F6 | 	mov	objptr, local07
2c394     2D B4 62 FD | 	call	local08
2c398     5B 65 02 F6 | 	mov	objptr, local09
2c39c     3D AB 02 F6 | 	mov	local03, result1
2c3a0     3E AD 02 F6 | 	mov	local04, result2
2c3a4     55 93 02 F6 | 	mov	arg01, local03
2c3a8     56 95 02 F6 | 	mov	arg02, local04
2c3ac     53 97 02 F6 | 	mov	arg03, local01
2c3b0     54 99 02 F6 | 	mov	arg04, local02
2c3b4     00 7A 06 F6 | 	mov	result1, #0
2c3b8     4B 93 1A F2 | 	cmp	arg01, arg03 wcz
2c3bc     4C 95 7A F2 | 	cmpsx	arg02, arg04 wcz
2c3c0     01 7A 86 56 |  if_ne	negc	result1, #1
2c3c4     00 7A 0E F2 | 	cmp	result1, #0 wz
2c3c8                 | '         return RES_ERROR;
2c3c8     01 7A 06 56 |  if_ne	mov	result1, #1
2c3cc     60 00 90 5D |  if_ne	jmp	#LR__4640
2c3d0     09 B0 66 F0 | 	shl	local06, #9
2c3d4     01 00 00 FF 
2c3d8     10 64 06 F1 | 	add	objptr, ##528
2c3dc     32 93 02 FB | 	rdlong	arg01, objptr
2c3e0     49 AB 02 F6 | 	mov	local03, arg01
2c3e4     14 AA 06 F1 | 	add	local03, #20
2c3e8     55 AB 02 FB | 	rdlong	local03, local03
2c3ec     55 B7 02 F6 | 	mov	local09, local03
2c3f0     13 B6 46 F7 | 	zerox	local09, #19
2c3f4     14 AA 46 F0 | 	shr	local03, #20
2c3f8     02 AA 66 F0 | 	shl	local03, #2
2c3fc     2D AB 02 F1 | 	add	local03, __methods__
2c400     55 AB 02 FB | 	rdlong	local03, local03
2c404     01 00 00 FF 
2c408     10 64 86 F1 | 	sub	objptr, ##528
2c40c     57 95 02 F6 | 	mov	arg02, local05
2c410     58 97 02 F6 | 	mov	arg03, local06
2c414     32 B5 02 F6 | 	mov	local08, objptr
2c418     5B 65 02 F6 | 	mov	objptr, local09
2c41c     2D AA 62 FD | 	call	local03
2c420     5A 65 02 F6 | 	mov	objptr, local08
2c424     58 7B 0A F2 | 	cmp	result1, local06 wz
2c428                 | '         return RES_ERROR;
2c428     01 7A 06 56 |  if_ne	mov	result1, #1
2c42c                 | '     }
2c42c                 | '     return RES_OK;
2c42c     00 7A 06 A6 |  if_e	mov	result1, #0
2c430                 | LR__4640
2c430     E7 F0 03 F6 | 	mov	ptra, fp
2c434     F2 00 A0 FD | 	call	#popregs_
2c438                 | _fatfs_cc_disk_read_ret
2c438     2D 00 64 FD | 	ret
2c43c                 | 
2c43c                 | _fatfs_cc_disk_write
2c43c     09 CA 05 F6 | 	mov	COUNT_, #9
2c440     E8 00 A0 FD | 	call	#pushregs_
2c444     4A AF 02 F6 | 	mov	local05, arg02
2c448     4C B1 02 F6 | 	mov	local06, arg04
2c44c     4B 93 02 F6 | 	mov	arg01, arg03
2c450     00 94 06 F6 | 	mov	arg02, #0
2c454     09 96 06 F6 | 	mov	arg03, #9
2c458     00 98 06 F6 | 	mov	arg04, #0
2c45c     58 A7 BF FD | 	call	#__system___int64_shl
2c460     3D A7 02 F6 | 	mov	local01, result1
2c464     3E A9 02 F6 | 	mov	local02, result2
2c468     01 00 00 FF 
2c46c     10 64 06 F1 | 	add	objptr, ##528
2c470     32 7D 0A FB | 	rdlong	result2, objptr wz
2c474     01 00 00 FF 
2c478     10 64 86 F1 | 	sub	objptr, ##528
2c47c                 | '         return RES_NOTRDY;
2c47c     03 7A 06 A6 |  if_e	mov	result1, #3
2c480     E8 00 90 AD |  if_e	jmp	#LR__4650
2c484     53 95 02 F6 | 	mov	arg02, local01
2c488     54 97 02 F6 | 	mov	arg03, local02
2c48c     01 00 00 FF 
2c490     10 64 06 F1 | 	add	objptr, ##528
2c494     32 93 02 FB | 	rdlong	arg01, objptr
2c498     49 99 02 F6 | 	mov	arg04, arg01
2c49c     30 98 06 F1 | 	add	arg04, #48
2c4a0     4C B3 02 FB | 	rdlong	local07, arg04
2c4a4     59 B5 02 F6 | 	mov	local08, local07
2c4a8     13 B2 46 F7 | 	zerox	local07, #19
2c4ac     14 B4 46 F0 | 	shr	local08, #20
2c4b0     02 B4 66 F0 | 	shl	local08, #2
2c4b4     2D B5 02 F1 | 	add	local08, __methods__
2c4b8     5A B5 02 FB | 	rdlong	local08, local08
2c4bc     01 00 00 FF 
2c4c0     10 64 86 F1 | 	sub	objptr, ##528
2c4c4     00 98 06 F6 | 	mov	arg04, #0
2c4c8     32 B7 02 F6 | 	mov	local09, objptr
2c4cc     59 65 02 F6 | 	mov	objptr, local07
2c4d0     2D B4 62 FD | 	call	local08
2c4d4     5B 65 02 F6 | 	mov	objptr, local09
2c4d8     3D AB 02 F6 | 	mov	local03, result1
2c4dc     3E AD 02 F6 | 	mov	local04, result2
2c4e0     55 93 02 F6 | 	mov	arg01, local03
2c4e4     56 95 02 F6 | 	mov	arg02, local04
2c4e8     53 97 02 F6 | 	mov	arg03, local01
2c4ec     54 99 02 F6 | 	mov	arg04, local02
2c4f0     00 7A 06 F6 | 	mov	result1, #0
2c4f4     4B 93 1A F2 | 	cmp	arg01, arg03 wcz
2c4f8     4C 95 7A F2 | 	cmpsx	arg02, arg04 wcz
2c4fc     01 7A 86 56 |  if_ne	negc	result1, #1
2c500     00 7A 0E F2 | 	cmp	result1, #0 wz
2c504                 | '         return RES_ERROR;
2c504     01 7A 06 56 |  if_ne	mov	result1, #1
2c508     60 00 90 5D |  if_ne	jmp	#LR__4650
2c50c     09 B0 66 F0 | 	shl	local06, #9
2c510     01 00 00 FF 
2c514     10 64 06 F1 | 	add	objptr, ##528
2c518     32 93 02 FB | 	rdlong	arg01, objptr
2c51c     49 AB 02 F6 | 	mov	local03, arg01
2c520     18 AA 06 F1 | 	add	local03, #24
2c524     55 AB 02 FB | 	rdlong	local03, local03
2c528     55 B7 02 F6 | 	mov	local09, local03
2c52c     13 B6 46 F7 | 	zerox	local09, #19
2c530     14 AA 46 F0 | 	shr	local03, #20
2c534     02 AA 66 F0 | 	shl	local03, #2
2c538     2D AB 02 F1 | 	add	local03, __methods__
2c53c     55 AB 02 FB | 	rdlong	local03, local03
2c540     01 00 00 FF 
2c544     10 64 86 F1 | 	sub	objptr, ##528
2c548     57 95 02 F6 | 	mov	arg02, local05
2c54c     58 97 02 F6 | 	mov	arg03, local06
2c550     32 B5 02 F6 | 	mov	local08, objptr
2c554     5B 65 02 F6 | 	mov	objptr, local09
2c558     2D AA 62 FD | 	call	local03
2c55c     5A 65 02 F6 | 	mov	objptr, local08
2c560     58 7B 0A F2 | 	cmp	result1, local06 wz
2c564                 | '         return RES_ERROR;
2c564     01 7A 06 56 |  if_ne	mov	result1, #1
2c568                 | '     }
2c568                 | '     return RES_OK;
2c568     00 7A 06 A6 |  if_e	mov	result1, #0
2c56c                 | LR__4650
2c56c     E7 F0 03 F6 | 	mov	ptra, fp
2c570     F2 00 A0 FD | 	call	#popregs_
2c574                 | _fatfs_cc_disk_write_ret
2c574     2D 00 64 FD | 	ret
2c578                 | 
2c578                 | _fatfs_cc_disk_ioctl
2c578     03 CA 05 F6 | 	mov	COUNT_, #3
2c57c     E8 00 A0 FD | 	call	#pushregs_
2c580     01 00 00 FF 
2c584     10 64 06 F1 | 	add	objptr, ##528
2c588     32 93 0A FB | 	rdlong	arg01, objptr wz
2c58c     01 00 00 FF 
2c590     10 64 86 F1 | 	sub	objptr, ##528
2c594                 | '         return RES_NOTRDY;
2c594     03 7A 06 A6 |  if_e	mov	result1, #3
2c598     58 00 90 AD |  if_e	jmp	#LR__4660
2c59c     01 00 00 FF 
2c5a0     10 64 06 F1 | 	add	objptr, ##528
2c5a4     32 93 02 FB | 	rdlong	arg01, objptr
2c5a8     49 A7 02 F6 | 	mov	local01, arg01
2c5ac     28 A6 06 F1 | 	add	local01, #40
2c5b0     53 A7 02 FB | 	rdlong	local01, local01
2c5b4     53 A9 02 F6 | 	mov	local02, local01
2c5b8     13 A8 46 F7 | 	zerox	local02, #19
2c5bc     14 A6 46 F0 | 	shr	local01, #20
2c5c0     02 A6 66 F0 | 	shl	local01, #2
2c5c4     2D A7 02 F1 | 	add	local01, __methods__
2c5c8     53 A7 02 FB | 	rdlong	local01, local01
2c5cc     01 00 00 FF 
2c5d0     10 64 86 F1 | 	sub	objptr, ##528
2c5d4     4A 95 E2 F8 | 	getbyte	arg02, arg02, #0
2c5d8     32 AB 02 F6 | 	mov	local03, objptr
2c5dc     54 65 02 F6 | 	mov	objptr, local02
2c5e0     2D A6 62 FD | 	call	local01
2c5e4     55 65 02 F6 | 	mov	objptr, local03
2c5e8     00 7A 0E F2 | 	cmp	result1, #0 wz
2c5ec                 | '         return RES_ERROR;
2c5ec     01 7A 06 56 |  if_ne	mov	result1, #1
2c5f0                 | '     return RES_OK;
2c5f0     00 7A 06 A6 |  if_e	mov	result1, #0
2c5f4                 | LR__4660
2c5f4     E7 F0 03 F6 | 	mov	ptra, fp
2c5f8     F2 00 A0 FD | 	call	#popregs_
2c5fc                 | _fatfs_cc_disk_ioctl_ret
2c5fc     2D 00 64 FD | 	ret
2c600                 | 
2c600                 | _fatfs_cc_tchar2uni
2c600     49 81 02 FB | 	rdlong	_var01, arg01
2c604     40 83 02 F6 | 	mov	_var02, _var01
2c608     01 80 06 F1 | 	add	_var01, #1
2c60c     40 85 02 F6 | 	mov	_var03, _var01
2c610     41 87 C2 FA | 	rdbyte	_var04, _var02
2c614     80 86 CE F7 | 	test	_var04, #128 wz
2c618     E8 00 90 AD |  if_e	jmp	#LR__4677
2c61c     43 89 02 F6 | 	mov	_var05, _var04
2c620     E0 88 06 F5 | 	and	_var05, #224
2c624     C0 88 0E F2 | 	cmp	_var05, #192 wz
2c628     1F 86 06 A5 |  if_e	and	_var04, #31
2c62c     01 8A 06 A6 |  if_e	mov	_var06, #1
2c630     34 00 90 AD |  if_e	jmp	#LR__4671
2c634     43 89 02 F6 | 	mov	_var05, _var04
2c638     F0 88 06 F5 | 	and	_var05, #240
2c63c     E0 88 0E F2 | 	cmp	_var05, #224 wz
2c640     43 87 42 A8 |  if_e	getnib	_var04, _var04, #0
2c644     02 8A 06 A6 |  if_e	mov	_var06, #2
2c648     1C 00 90 AD |  if_e	jmp	#LR__4670
2c64c     43 89 02 F6 | 	mov	_var05, _var04
2c650     F8 88 06 F5 | 	and	_var05, #248
2c654     F0 88 0E F2 | 	cmp	_var05, #240 wz
2c658     07 86 06 A5 |  if_e	and	_var04, #7
2c65c     03 8A 06 A6 |  if_e	mov	_var06, #3
2c660                 | ' 			return 0xFFFFFFFF;
2c660     01 7A 66 56 |  if_ne	neg	result1, #1
2c664     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2c668                 | LR__4670
2c668                 | LR__4671
2c668                 | ' 		}
2c668                 | ' 		do {
2c668                 | LR__4672
2c668     42 8D C2 FA | 	rdbyte	_var07, _var03
2c66c     46 89 E2 F8 | 	getbyte	_var05, _var07, #0
2c670     C0 88 06 F5 | 	and	_var05, #192
2c674     80 88 0E F2 | 	cmp	_var05, #128 wz
2c678     01 84 06 F1 | 	add	_var03, #1
2c67c     01 7A 66 56 |  if_ne	neg	result1, #1
2c680     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2c684     06 86 66 F0 | 	shl	_var04, #6
2c688     46 83 E2 F8 | 	getbyte	_var02, _var07, #0
2c68c     3F 82 06 F5 | 	and	_var02, #63
2c690     41 87 42 F5 | 	or	_var04, _var02
2c694     F4 8B 6E FB | 	djnz	_var06, #LR__4672
2c698     80 86 16 F2 | 	cmp	_var04, #128 wc
2c69c     24 00 90 CD |  if_b	jmp	#LR__4674
2c6a0     6C 00 00 FF 
2c6a4     00 86 16 F2 | 	cmp	_var04, ##55296 wc
2c6a8     0C 00 90 CD |  if_b	jmp	#LR__4673
2c6ac     70 00 00 FF 
2c6b0     00 86 16 F2 | 	cmp	_var04, ##57344 wc
2c6b4     0C 00 90 CD |  if_b	jmp	#LR__4674
2c6b8                 | LR__4673
2c6b8     80 08 00 FF 
2c6bc     00 86 16 F2 | 	cmp	_var04, ##1114112 wc
2c6c0     08 00 90 CD |  if_b	jmp	#LR__4675
2c6c4                 | LR__4674
2c6c4     01 7A 66 F6 | 	neg	result1, #1
2c6c8     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
2c6cc                 | LR__4675
2c6cc     80 00 00 FF 
2c6d0     00 86 16 F2 | 	cmp	_var04, ##65536 wc
2c6d4     2C 00 90 CD |  if_b	jmp	#LR__4676
2c6d8     43 83 02 F6 | 	mov	_var02, _var04
2c6dc     80 00 00 FF 
2c6e0     00 82 86 F1 | 	sub	_var02, ##65536
2c6e4     06 82 66 F0 | 	shl	_var02, #6
2c6e8     80 FF 01 FF 
2c6ec     00 82 06 F5 | 	and	_var02, ##67043328
2c6f0     6E 00 6C FF 
2c6f4     00 88 06 F6 | 	mov	_var05, ##-671032320
2c6f8     41 89 42 F5 | 	or	_var05, _var02
2c6fc     09 86 46 F7 | 	zerox	_var04, #9
2c700     44 87 42 F5 | 	or	_var04, _var05
2c704                 | LR__4676
2c704                 | LR__4677
2c704     49 85 62 FC | 	wrlong	_var03, arg01
2c708                 | ' 	}
2c708                 | ' #line 811 "ff.c"
2c708                 | ' 	*str = p;
2c708                 | ' 	return uc;
2c708     43 7B 02 F6 | 	mov	result1, _var04
2c70c                 | _fatfs_cc_tchar2uni_ret
2c70c     2D 00 64 FD | 	ret
2c710                 | 
2c710                 | _fatfs_cc_put_utf
2c710     80 92 16 F2 | 	cmp	arg01, #128 wc
2c714     18 00 90 3D |  if_ae	jmp	#LR__4680
2c718     01 96 16 F2 | 	cmp	arg03, #1 wc
2c71c     00 7A 06 C6 |  if_b	mov	result1, #0
2c720     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2c724     4A 93 42 FC | 	wrbyte	arg01, arg02
2c728                 | ' 		*buf = (TCHAR)chr;
2c728                 | ' 		return 1;
2c728     01 7A 06 F6 | 	mov	result1, #1
2c72c     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2c730                 | LR__4680
2c730     04 00 00 FF 
2c734     00 92 16 F2 | 	cmp	arg01, ##2048 wc
2c738     40 00 90 3D |  if_ae	jmp	#LR__4681
2c73c     02 96 16 F2 | 	cmp	arg03, #2 wc
2c740     00 7A 06 C6 |  if_b	mov	result1, #0
2c744     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2c748     49 7B 02 F6 | 	mov	result1, arg01
2c74c     06 7A 46 F0 | 	shr	result1, #6
2c750     1F 7A 06 F5 | 	and	result1, #31
2c754     C0 96 06 F6 | 	mov	arg03, #192
2c758     3D 97 42 F5 | 	or	arg03, result1
2c75c     4A 97 42 FC | 	wrbyte	arg03, arg02
2c760     01 94 06 F1 | 	add	arg02, #1
2c764     3F 92 06 F5 | 	and	arg01, #63
2c768     80 7A 06 F6 | 	mov	result1, #128
2c76c     49 7B 42 F5 | 	or	result1, arg01
2c770     4A 7B 42 FC | 	wrbyte	result1, arg02
2c774                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
2c774                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2c774                 | ' 		return 2;
2c774     02 7A 06 F6 | 	mov	result1, #2
2c778     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2c77c                 | LR__4681
2c77c     80 00 00 FF 
2c780     00 92 16 F2 | 	cmp	arg01, ##65536 wc
2c784     70 00 90 3D |  if_ae	jmp	#LR__4684
2c788     03 96 16 F2 | 	cmp	arg03, #3 wc
2c78c     18 00 90 CD |  if_b	jmp	#LR__4682
2c790     6C 00 00 FF 
2c794     00 92 16 F2 | 	cmp	arg01, ##55296 wc
2c798     14 00 90 CD |  if_b	jmp	#LR__4683
2c79c     70 00 00 FF 
2c7a0     00 92 16 F2 | 	cmp	arg01, ##57344 wc
2c7a4     08 00 90 3D |  if_ae	jmp	#LR__4683
2c7a8                 | LR__4682
2c7a8     00 7A 06 F6 | 	mov	result1, #0
2c7ac     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2c7b0                 | LR__4683
2c7b0     49 7B 5A F8 | 	getnib	result1, arg01, #3
2c7b4     E0 96 06 F6 | 	mov	arg03, #224
2c7b8     3D 97 42 F5 | 	or	arg03, result1
2c7bc     4A 97 42 FC | 	wrbyte	arg03, arg02
2c7c0     01 94 06 F1 | 	add	arg02, #1
2c7c4     49 7B 02 F6 | 	mov	result1, arg01
2c7c8     06 7A 46 F0 | 	shr	result1, #6
2c7cc     3F 7A 06 F5 | 	and	result1, #63
2c7d0     80 96 06 F6 | 	mov	arg03, #128
2c7d4     3D 97 42 F5 | 	or	arg03, result1
2c7d8     4A 97 42 FC | 	wrbyte	arg03, arg02
2c7dc     01 94 06 F1 | 	add	arg02, #1
2c7e0     3F 92 06 F5 | 	and	arg01, #63
2c7e4     80 7A 06 F6 | 	mov	result1, #128
2c7e8     49 7B 42 F5 | 	or	result1, arg01
2c7ec     4A 7B 42 FC | 	wrbyte	result1, arg02
2c7f0                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
2c7f0                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2c7f0                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2c7f0                 | ' 		return 3;
2c7f0     03 7A 06 F6 | 	mov	result1, #3
2c7f4     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2c7f8                 | LR__4684
2c7f8     04 96 16 F2 | 	cmp	arg03, #4 wc
2c7fc     00 7A 06 C6 |  if_b	mov	result1, #0
2c800     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2c804     49 81 02 F6 | 	mov	_var01, arg01
2c808     E0 81 06 F4 | 	bitl	_var01, #480
2c80c     00 00 6C FF 
2c810     00 80 86 F1 | 	sub	_var01, ##-671088640
2c814     06 80 46 F0 | 	shr	_var01, #6
2c818     49 93 32 F9 | 	getword	arg01, arg01, #0
2c81c     6E 00 00 FF 
2c820     00 92 86 F1 | 	sub	arg01, ##56320
2c824     00 08 00 FF 
2c828     00 80 16 F2 | 	cmp	_var01, ##1048576 wc
2c82c     02 00 00 CF 
2c830     00 92 16 C2 |  if_b	cmp	arg01, ##1024 wc
2c834     00 7A 06 36 |  if_ae	mov	result1, #0
2c838     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
2c83c     49 81 42 F5 | 	or	_var01, arg01
2c840     80 00 00 FF 
2c844     00 80 06 F1 | 	add	_var01, ##65536
2c848     40 7B 02 F6 | 	mov	result1, _var01
2c84c     12 7A 46 F0 | 	shr	result1, #18
2c850     07 7A 06 F5 | 	and	result1, #7
2c854     F0 96 06 F6 | 	mov	arg03, #240
2c858     3D 97 42 F5 | 	or	arg03, result1
2c85c     4A 97 42 FC | 	wrbyte	arg03, arg02
2c860     01 94 06 F1 | 	add	arg02, #1
2c864     40 7B 02 F6 | 	mov	result1, _var01
2c868     0C 7A 46 F0 | 	shr	result1, #12
2c86c     3F 7A 06 F5 | 	and	result1, #63
2c870     80 96 06 F6 | 	mov	arg03, #128
2c874     3D 97 42 F5 | 	or	arg03, result1
2c878     4A 97 42 FC | 	wrbyte	arg03, arg02
2c87c     01 94 06 F1 | 	add	arg02, #1
2c880     40 7B 02 F6 | 	mov	result1, _var01
2c884     06 7A 46 F0 | 	shr	result1, #6
2c888     3F 7A 06 F5 | 	and	result1, #63
2c88c     80 96 06 F6 | 	mov	arg03, #128
2c890     3D 97 42 F5 | 	or	arg03, result1
2c894     4A 97 42 FC | 	wrbyte	arg03, arg02
2c898     01 94 06 F1 | 	add	arg02, #1
2c89c     3F 80 06 F5 | 	and	_var01, #63
2c8a0     80 7A 06 F6 | 	mov	result1, #128
2c8a4     40 7B 42 F5 | 	or	result1, _var01
2c8a8     4A 7B 42 FC | 	wrbyte	result1, arg02
2c8ac                 | ' 	chr = (hc | chr) + 0x10000;
2c8ac                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
2c8ac                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
2c8ac                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2c8ac                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2c8ac                 | ' 	return 4;
2c8ac     04 7A 06 F6 | 	mov	result1, #4
2c8b0                 | _fatfs_cc_put_utf_ret
2c8b0     2D 00 64 FD | 	ret
2c8b4                 | 
2c8b4                 | _fatfs_cc_sync_window
2c8b4     02 CA 05 F6 | 	mov	COUNT_, #2
2c8b8     E8 00 A0 FD | 	call	#pushregs_
2c8bc     49 A7 02 F6 | 	mov	local01, arg01
2c8c0     00 A8 06 F6 | 	mov	local02, #0
2c8c4     03 A6 06 F1 | 	add	local01, #3
2c8c8     53 7B CA FA | 	rdbyte	result1, local01 wz
2c8cc     03 A6 86 F1 | 	sub	local01, #3
2c8d0     A4 00 90 AD |  if_e	jmp	#LR__4692
2c8d4     01 A6 06 F1 | 	add	local01, #1
2c8d8     53 93 C2 FA | 	rdbyte	arg01, local01
2c8dc     33 A6 06 F1 | 	add	local01, #51
2c8e0     53 95 02 F6 | 	mov	arg02, local01
2c8e4     04 A6 86 F1 | 	sub	local01, #4
2c8e8     53 97 02 FB | 	rdlong	arg03, local01
2c8ec     30 A6 86 F1 | 	sub	local01, #48
2c8f0     01 98 06 F6 | 	mov	arg04, #1
2c8f4     44 FB BF FD | 	call	#_fatfs_cc_disk_write
2c8f8     00 7A 0E F2 | 	cmp	result1, #0 wz
2c8fc     74 00 90 5D |  if_ne	jmp	#LR__4690
2c900     03 A6 06 F1 | 	add	local01, #3
2c904     53 01 48 FC | 	wrbyte	#0, local01
2c908     2D A6 06 F1 | 	add	local01, #45
2c90c     53 7B 02 FB | 	rdlong	result1, local01
2c910     0C A6 86 F1 | 	sub	local01, #12
2c914     53 99 02 FB | 	rdlong	arg04, local01
2c918     4C 7B 82 F1 | 	sub	result1, arg04
2c91c     08 A6 86 F1 | 	sub	local01, #8
2c920     53 99 02 FB | 	rdlong	arg04, local01
2c924     1C A6 86 F1 | 	sub	local01, #28
2c928     4C 7B 12 F2 | 	cmp	result1, arg04 wc
2c92c     48 00 90 3D |  if_ae	jmp	#LR__4691
2c930     02 A6 06 F1 | 	add	local01, #2
2c934     53 99 C2 FA | 	rdbyte	arg04, local01
2c938     02 A6 86 F1 | 	sub	local01, #2
2c93c     02 98 0E F2 | 	cmp	arg04, #2 wz
2c940     34 00 90 5D |  if_ne	jmp	#LR__4691
2c944     01 A6 06 F1 | 	add	local01, #1
2c948     53 93 C2 FA | 	rdbyte	arg01, local01
2c94c     33 A6 06 F1 | 	add	local01, #51
2c950     53 95 02 F6 | 	mov	arg02, local01
2c954     04 A6 86 F1 | 	sub	local01, #4
2c958     53 97 02 FB | 	rdlong	arg03, local01
2c95c     14 A6 86 F1 | 	sub	local01, #20
2c960     53 A7 02 FB | 	rdlong	local01, local01
2c964     53 97 02 F1 | 	add	arg03, local01
2c968     01 98 06 F6 | 	mov	arg04, #1
2c96c     CC FA BF FD | 	call	#_fatfs_cc_disk_write
2c970     04 00 90 FD | 	jmp	#LR__4691
2c974                 | LR__4690
2c974     01 A8 06 F6 | 	mov	local02, #1
2c978                 | LR__4691
2c978                 | LR__4692
2c978                 | ' 			res = FR_DISK_ERR;
2c978                 | ' 		}
2c978                 | ' 	}
2c978                 | ' 	return res;
2c978     54 7B 02 F6 | 	mov	result1, local02
2c97c     E7 F0 03 F6 | 	mov	ptra, fp
2c980     F2 00 A0 FD | 	call	#popregs_
2c984                 | _fatfs_cc_sync_window_ret
2c984     2D 00 64 FD | 	ret
2c988                 | 
2c988                 | _fatfs_cc_move_window
2c988     03 CA 05 F6 | 	mov	COUNT_, #3
2c98c     E8 00 A0 FD | 	call	#pushregs_
2c990     49 A7 02 F6 | 	mov	local01, arg01
2c994     4A A9 02 F6 | 	mov	local02, arg02
2c998     00 AA 06 F6 | 	mov	local03, #0
2c99c     30 A6 06 F1 | 	add	local01, #48
2c9a0     53 99 02 FB | 	rdlong	arg04, local01
2c9a4     30 A6 86 F1 | 	sub	local01, #48
2c9a8     4C A9 0A F2 | 	cmp	local02, arg04 wz
2c9ac     40 00 90 AD |  if_e	jmp	#LR__4701
2c9b0     53 93 02 F6 | 	mov	arg01, local01
2c9b4     FC FE BF FD | 	call	#_fatfs_cc_sync_window
2c9b8     3D AB 0A F6 | 	mov	local03, result1 wz
2c9bc     30 00 90 5D |  if_ne	jmp	#LR__4700
2c9c0     01 A6 06 F1 | 	add	local01, #1
2c9c4     53 93 C2 FA | 	rdbyte	arg01, local01
2c9c8     33 A6 06 F1 | 	add	local01, #51
2c9cc     53 95 02 F6 | 	mov	arg02, local01
2c9d0     54 97 02 F6 | 	mov	arg03, local02
2c9d4     01 98 06 F6 | 	mov	arg04, #1
2c9d8     24 F9 BF FD | 	call	#_fatfs_cc_disk_read
2c9dc     00 7A 0E F2 | 	cmp	result1, #0 wz
2c9e0     01 A8 66 56 |  if_ne	neg	local02, #1
2c9e4     01 AA 06 56 |  if_ne	mov	local03, #1
2c9e8     04 A6 86 F1 | 	sub	local01, #4
2c9ec     53 A9 62 FC | 	wrlong	local02, local01
2c9f0                 | LR__4700
2c9f0                 | LR__4701
2c9f0                 | ' 				sect = (LBA_t)0 - 1;
2c9f0                 | ' 				res = FR_DISK_ERR;
2c9f0                 | ' 			}
2c9f0                 | ' 			fs->winsect = sect;
2c9f0                 | ' 		}
2c9f0                 | ' 	}
2c9f0                 | ' 	return res;
2c9f0     55 7B 02 F6 | 	mov	result1, local03
2c9f4     E7 F0 03 F6 | 	mov	ptra, fp
2c9f8     F2 00 A0 FD | 	call	#popregs_
2c9fc                 | _fatfs_cc_move_window_ret
2c9fc     2D 00 64 FD | 	ret
2ca00                 | 
2ca00                 | _fatfs_cc_sync_fs
2ca00     02 CA 05 F6 | 	mov	COUNT_, #2
2ca04     E8 00 A0 FD | 	call	#pushregs_
2ca08     49 A7 02 F6 | 	mov	local01, arg01
2ca0c     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
2ca10     3D A9 0A F6 | 	mov	local02, result1 wz
2ca14     D8 00 90 5D |  if_ne	jmp	#LR__4711
2ca18     53 99 C2 FA | 	rdbyte	arg04, local01
2ca1c     03 98 0E F2 | 	cmp	arg04, #3 wz
2ca20     04 A6 06 A1 |  if_e	add	local01, #4
2ca24     53 99 C2 AA |  if_e	rdbyte	arg04, local01
2ca28     04 A6 86 A1 |  if_e	sub	local01, #4
2ca2c     01 98 0E A2 |  if_e	cmp	arg04, #1 wz
2ca30     A0 00 90 5D |  if_ne	jmp	#LR__4710
2ca34     34 A6 06 F1 | 	add	local01, #52
2ca38     53 93 02 F6 | 	mov	arg01, local01
2ca3c     00 94 06 F6 | 	mov	arg02, #0
2ca40     09 96 C6 F9 | 	decod	arg03, #9
2ca44     D8 00 A0 FD | 	call	#\builtin_bytefill_
2ca48     53 93 02 F6 | 	mov	arg01, local01
2ca4c     FE 93 06 F1 | 	add	arg01, #510
2ca50     55 00 80 FF 
2ca54     49 AB 58 FC | 	wrword	##43605, arg01
2ca58     A9 B0 A0 FF 
2ca5c     53 A5 68 FC | 	wrlong	##1096897106, local01
2ca60     53 93 02 F6 | 	mov	arg01, local01
2ca64     E4 93 06 F1 | 	add	arg01, #484
2ca68     B9 A0 B0 FF 
2ca6c     49 E5 68 FC | 	wrlong	##1631679090, arg01
2ca70     53 93 02 F6 | 	mov	arg01, local01
2ca74     E8 93 06 F1 | 	add	arg01, #488
2ca78     20 A6 86 F1 | 	sub	local01, #32
2ca7c     53 95 02 FB | 	rdlong	arg02, local01
2ca80     49 95 62 FC | 	wrlong	arg02, arg01
2ca84     20 A6 06 F1 | 	add	local01, #32
2ca88     53 93 02 F6 | 	mov	arg01, local01
2ca8c     EC 93 06 F1 | 	add	arg01, #492
2ca90     24 A6 86 F1 | 	sub	local01, #36
2ca94     53 95 02 FB | 	rdlong	arg02, local01
2ca98     49 95 62 FC | 	wrlong	arg02, arg01
2ca9c     10 A6 06 F1 | 	add	local01, #16
2caa0     53 97 02 FB | 	rdlong	arg03, local01
2caa4     01 96 06 F1 | 	add	arg03, #1
2caa8     10 A6 06 F1 | 	add	local01, #16
2caac     53 97 62 FC | 	wrlong	arg03, local01
2cab0     2F A6 86 F1 | 	sub	local01, #47
2cab4     53 93 C2 FA | 	rdbyte	arg01, local01
2cab8     33 A6 06 F1 | 	add	local01, #51
2cabc     53 95 02 F6 | 	mov	arg02, local01
2cac0     01 98 06 F6 | 	mov	arg04, #1
2cac4     74 F9 BF FD | 	call	#_fatfs_cc_disk_write
2cac8     30 A6 86 F1 | 	sub	local01, #48
2cacc     53 01 48 FC | 	wrbyte	#0, local01
2cad0     04 A6 86 F1 | 	sub	local01, #4
2cad4                 | LR__4710
2cad4     01 A6 06 F1 | 	add	local01, #1
2cad8     53 93 C2 FA | 	rdbyte	arg01, local01
2cadc     00 94 06 F6 | 	mov	arg02, #0
2cae0     00 96 06 F6 | 	mov	arg03, #0
2cae4     90 FA BF FD | 	call	#_fatfs_cc_disk_ioctl
2cae8     00 7A 0E F2 | 	cmp	result1, #0 wz
2caec     01 A8 06 56 |  if_ne	mov	local02, #1
2caf0                 | LR__4711
2caf0                 | ' 	}
2caf0                 | ' 
2caf0                 | ' 	return res;
2caf0     54 7B 02 F6 | 	mov	result1, local02
2caf4     E7 F0 03 F6 | 	mov	ptra, fp
2caf8     F2 00 A0 FD | 	call	#popregs_
2cafc                 | _fatfs_cc_sync_fs_ret
2cafc     2D 00 64 FD | 	ret
2cb00                 | 
2cb00                 | _fatfs_cc_clst2sect
2cb00     02 94 86 F1 | 	sub	arg02, #2
2cb04     18 92 06 F1 | 	add	arg01, #24
2cb08     49 81 02 FB | 	rdlong	_var01, arg01
2cb0c     18 92 86 F1 | 	sub	arg01, #24
2cb10     02 80 86 F1 | 	sub	_var01, #2
2cb14     40 95 12 F2 | 	cmp	arg02, _var01 wc
2cb18     00 7A 06 36 |  if_ae	mov	result1, #0
2cb1c     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
2cb20     0A 92 06 F1 | 	add	arg01, #10
2cb24     49 81 E2 FA | 	rdword	_var01, arg01
2cb28     4A 81 02 FD | 	qmul	_var01, arg02
2cb2c                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
2cb2c     22 92 06 F1 | 	add	arg01, #34
2cb30     49 7B 02 FB | 	rdlong	result1, arg01
2cb34     18 80 62 FD | 	getqx	_var01
2cb38     40 7B 02 F1 | 	add	result1, _var01
2cb3c                 | _fatfs_cc_clst2sect_ret
2cb3c     2D 00 64 FD | 	ret
2cb40                 | 
2cb40                 | _fatfs_cc_get_fat
2cb40     07 CA 05 F6 | 	mov	COUNT_, #7
2cb44     E8 00 A0 FD | 	call	#pushregs_
2cb48     4A A7 02 F6 | 	mov	local01, arg02
2cb4c     49 A9 02 FB | 	rdlong	local02, arg01
2cb50     02 A6 16 F2 | 	cmp	local01, #2 wc
2cb54     14 00 90 CD |  if_b	jmp	#LR__4720
2cb58     18 A8 06 F1 | 	add	local02, #24
2cb5c     54 AB 02 FB | 	rdlong	local03, local02
2cb60     18 A8 86 F1 | 	sub	local02, #24
2cb64     55 A7 12 F2 | 	cmp	local01, local03 wc
2cb68     08 00 90 CD |  if_b	jmp	#LR__4721
2cb6c                 | LR__4720
2cb6c     01 AC 06 F6 | 	mov	local04, #1
2cb70     60 01 90 FD | 	jmp	#LR__4728
2cb74                 | LR__4721
2cb74     01 AC 66 F6 | 	neg	local04, #1
2cb78                 | ' 		val = 0xFFFFFFFF;
2cb78                 | ' 
2cb78                 | ' 		switch (fs->fs_type) {
2cb78     54 AF C2 FA | 	rdbyte	local05, local02
2cb7c     01 AE 86 F1 | 	sub	local05, #1
2cb80     03 AE 26 F3 | 	fle	local05, #3
2cb84     30 AE 62 FD | 	jmprel	local05
2cb88                 | LR__4722
2cb88     0C 00 90 FD | 	jmp	#LR__4723
2cb8c     B8 00 90 FD | 	jmp	#LR__4724
2cb90     F8 00 90 FD | 	jmp	#LR__4725
2cb94     38 01 90 FD | 	jmp	#LR__4726
2cb98                 | LR__4723
2cb98     53 AF 02 F6 | 	mov	local05, local01
2cb9c     53 93 02 F6 | 	mov	arg01, local01
2cba0     01 92 46 F0 | 	shr	arg01, #1
2cba4     49 AF 02 F1 | 	add	local05, arg01
2cba8     54 93 02 F6 | 	mov	arg01, local02
2cbac     57 B1 02 F6 | 	mov	local06, local05
2cbb0     09 B0 46 F0 | 	shr	local06, #9
2cbb4     24 A8 06 F1 | 	add	local02, #36
2cbb8     54 95 02 FB | 	rdlong	arg02, local02
2cbbc     24 A8 86 F1 | 	sub	local02, #36
2cbc0     58 95 02 F1 | 	add	arg02, local06
2cbc4     C0 FD BF FD | 	call	#_fatfs_cc_move_window
2cbc8     00 7A 0E F2 | 	cmp	result1, #0 wz
2cbcc     04 01 90 5D |  if_ne	jmp	#LR__4727
2cbd0     57 B1 02 F6 | 	mov	local06, local05
2cbd4     FF B1 06 F5 | 	and	local06, #511
2cbd8     54 93 02 F6 | 	mov	arg01, local02
2cbdc     34 92 06 F1 | 	add	arg01, #52
2cbe0     49 B1 02 F1 | 	add	local06, arg01
2cbe4     58 B3 C2 FA | 	rdbyte	local07, local06
2cbe8     54 93 02 F6 | 	mov	arg01, local02
2cbec     01 AE 06 F1 | 	add	local05, #1
2cbf0     57 B1 02 F6 | 	mov	local06, local05
2cbf4     09 B0 46 F0 | 	shr	local06, #9
2cbf8     24 A8 06 F1 | 	add	local02, #36
2cbfc     54 95 02 FB | 	rdlong	arg02, local02
2cc00     24 A8 86 F1 | 	sub	local02, #36
2cc04     58 95 02 F1 | 	add	arg02, local06
2cc08     7C FD BF FD | 	call	#_fatfs_cc_move_window
2cc0c     00 7A 0E F2 | 	cmp	result1, #0 wz
2cc10     C0 00 90 5D |  if_ne	jmp	#LR__4727
2cc14     FF AF 06 F5 | 	and	local05, #511
2cc18     34 A8 06 F1 | 	add	local02, #52
2cc1c     54 AF 02 F1 | 	add	local05, local02
2cc20     57 B1 C2 FA | 	rdbyte	local06, local05
2cc24     08 B0 66 F0 | 	shl	local06, #8
2cc28     58 B3 42 F5 | 	or	local07, local06
2cc2c     01 A6 CE F7 | 	test	local01, #1 wz
2cc30     04 B2 46 50 |  if_ne	shr	local07, #4
2cc34     59 AB 02 56 |  if_ne	mov	local03, local07
2cc38     0B B2 46 A7 |  if_e	zerox	local07, #11
2cc3c     59 AB 02 A6 |  if_e	mov	local03, local07
2cc40     55 AD 02 F6 | 	mov	local04, local03
2cc44                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
2cc44                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2cc44                 | ' 			break;
2cc44     8C 00 90 FD | 	jmp	#LR__4727
2cc48                 | LR__4724
2cc48     54 93 02 F6 | 	mov	arg01, local02
2cc4c     53 B1 02 F6 | 	mov	local06, local01
2cc50     08 B0 46 F0 | 	shr	local06, #8
2cc54     24 A8 06 F1 | 	add	local02, #36
2cc58     54 95 02 FB | 	rdlong	arg02, local02
2cc5c     24 A8 86 F1 | 	sub	local02, #36
2cc60     58 95 02 F1 | 	add	arg02, local06
2cc64     20 FD BF FD | 	call	#_fatfs_cc_move_window
2cc68     00 7A 0E F2 | 	cmp	result1, #0 wz
2cc6c     64 00 90 5D |  if_ne	jmp	#LR__4727
2cc70     34 A8 06 F1 | 	add	local02, #52
2cc74     01 A6 66 F0 | 	shl	local01, #1
2cc78     FF A7 06 F5 | 	and	local01, #511
2cc7c     53 A9 02 F1 | 	add	local02, local01
2cc80                 | ' {
2cc80                 | ' 
2cc80                 | ' 	return *((WORD*)ptr);
2cc80     54 7B E2 FA | 	rdword	result1, local02
2cc84     3D AD 32 F9 | 	getword	local04, result1, #0
2cc88                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
2cc88                 | ' 			break;
2cc88     48 00 90 FD | 	jmp	#LR__4727
2cc8c                 | LR__4725
2cc8c     54 93 02 F6 | 	mov	arg01, local02
2cc90     53 B1 02 F6 | 	mov	local06, local01
2cc94     07 B0 46 F0 | 	shr	local06, #7
2cc98     24 A8 06 F1 | 	add	local02, #36
2cc9c     54 95 02 FB | 	rdlong	arg02, local02
2cca0     24 A8 86 F1 | 	sub	local02, #36
2cca4     58 95 02 F1 | 	add	arg02, local06
2cca8     DC FC BF FD | 	call	#_fatfs_cc_move_window
2ccac     00 7A 0E F2 | 	cmp	result1, #0 wz
2ccb0     20 00 90 5D |  if_ne	jmp	#LR__4727
2ccb4     34 A8 06 F1 | 	add	local02, #52
2ccb8     02 A6 66 F0 | 	shl	local01, #2
2ccbc     FF A7 06 F5 | 	and	local01, #511
2ccc0     53 A9 02 F1 | 	add	local02, local01
2ccc4                 | ' {
2ccc4                 | ' 
2ccc4                 | ' 	return *((DWORD*)ptr);
2ccc4     54 AD 02 FB | 	rdlong	local04, local02
2ccc8     7C AC 06 F4 | 	bitl	local04, #124
2cccc                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
2cccc                 | ' 			break;
2cccc     04 00 90 FD | 	jmp	#LR__4727
2ccd0                 | LR__4726
2ccd0     01 AC 06 F6 | 	mov	local04, #1
2ccd4                 | LR__4727
2ccd4                 | LR__4728
2ccd4                 | ' 			val = 1;
2ccd4                 | ' 		}
2ccd4                 | ' 	}
2ccd4                 | ' 
2ccd4                 | ' 	return val;
2ccd4     56 7B 02 F6 | 	mov	result1, local04
2ccd8     E7 F0 03 F6 | 	mov	ptra, fp
2ccdc     F2 00 A0 FD | 	call	#popregs_
2cce0                 | _fatfs_cc_get_fat_ret
2cce0     2D 00 64 FD | 	ret
2cce4                 | 
2cce4                 | _fatfs_cc_put_fat
2cce4     08 CA 05 F6 | 	mov	COUNT_, #8
2cce8     E8 00 A0 FD | 	call	#pushregs_
2ccec     49 A7 02 F6 | 	mov	local01, arg01
2ccf0     4A A9 02 F6 | 	mov	local02, arg02
2ccf4     4B AB 02 F6 | 	mov	local03, arg03
2ccf8     02 AC 06 F6 | 	mov	local04, #2
2ccfc     02 A8 16 F2 | 	cmp	local02, #2 wc
2cd00     E0 01 90 CD |  if_b	jmp	#LR__4737
2cd04     18 A6 06 F1 | 	add	local01, #24
2cd08     53 AF 02 FB | 	rdlong	local05, local01
2cd0c     18 A6 86 F1 | 	sub	local01, #24
2cd10     57 A9 12 F2 | 	cmp	local02, local05 wc
2cd14     CC 01 90 3D |  if_ae	jmp	#LR__4737
2cd18                 | ' 		switch (fs->fs_type) {
2cd18     53 B1 C2 FA | 	rdbyte	local06, local01
2cd1c     01 B0 86 F1 | 	sub	local06, #1
2cd20     03 B0 26 F3 | 	fle	local06, #3
2cd24     30 B0 62 FD | 	jmprel	local06
2cd28                 | LR__4730
2cd28     0C 00 90 FD | 	jmp	#LR__4731
2cd2c     F4 00 90 FD | 	jmp	#LR__4734
2cd30     3C 01 90 FD | 	jmp	#LR__4735
2cd34     AC 01 90 FD | 	jmp	#LR__4736
2cd38                 | LR__4731
2cd38     54 B3 02 F6 | 	mov	local07, local02
2cd3c     54 AF 02 F6 | 	mov	local05, local02
2cd40     01 AE 46 F0 | 	shr	local05, #1
2cd44     57 B3 02 F1 | 	add	local07, local05
2cd48     53 93 02 F6 | 	mov	arg01, local01
2cd4c     59 B1 02 F6 | 	mov	local06, local07
2cd50     09 B0 46 F0 | 	shr	local06, #9
2cd54     24 A6 06 F1 | 	add	local01, #36
2cd58     53 95 02 FB | 	rdlong	arg02, local01
2cd5c     24 A6 86 F1 | 	sub	local01, #36
2cd60     58 95 02 F1 | 	add	arg02, local06
2cd64     20 FC BF FD | 	call	#_fatfs_cc_move_window
2cd68     3D AD 0A F6 | 	mov	local04, result1 wz
2cd6c     74 01 90 5D |  if_ne	jmp	#LR__4736
2cd70     53 B5 02 F6 | 	mov	local08, local01
2cd74     34 B4 06 F1 | 	add	local08, #52
2cd78     59 AF 02 F6 | 	mov	local05, local07
2cd7c     FF AF 06 F5 | 	and	local05, #511
2cd80     57 B5 02 F1 | 	add	local08, local05
2cd84     01 A8 CE F7 | 	test	local02, #1 wz
2cd88     01 B2 06 F1 | 	add	local07, #1
2cd8c     18 00 90 AD |  if_e	jmp	#LR__4732
2cd90     5A AF C2 FA | 	rdbyte	local05, local08
2cd94     57 AF 42 F8 | 	getnib	local05, local05, #0
2cd98     55 B1 E2 F8 | 	getbyte	local06, local03, #0
2cd9c     04 B0 66 F0 | 	shl	local06, #4
2cda0     58 AF 42 F5 | 	or	local05, local06
2cda4     04 00 90 FD | 	jmp	#LR__4733
2cda8                 | LR__4732
2cda8     55 AF 02 F6 | 	mov	local05, local03
2cdac                 | LR__4733
2cdac     5A AF 42 FC | 	wrbyte	local05, local08
2cdb0     03 A6 06 F1 | 	add	local01, #3
2cdb4     53 03 48 FC | 	wrbyte	#1, local01
2cdb8     03 A6 86 F1 | 	sub	local01, #3
2cdbc     53 93 02 F6 | 	mov	arg01, local01
2cdc0     59 B5 02 F6 | 	mov	local08, local07
2cdc4     09 B4 46 F0 | 	shr	local08, #9
2cdc8     24 A6 06 F1 | 	add	local01, #36
2cdcc     53 95 02 FB | 	rdlong	arg02, local01
2cdd0     24 A6 86 F1 | 	sub	local01, #36
2cdd4     5A 95 02 F1 | 	add	arg02, local08
2cdd8     AC FB BF FD | 	call	#_fatfs_cc_move_window
2cddc     3D AD 0A F6 | 	mov	local04, result1 wz
2cde0     00 01 90 5D |  if_ne	jmp	#LR__4736
2cde4     53 B5 02 F6 | 	mov	local08, local01
2cde8     34 B4 06 F1 | 	add	local08, #52
2cdec     FF B3 06 F5 | 	and	local07, #511
2cdf0     59 B5 02 F1 | 	add	local08, local07
2cdf4     01 A8 CE F7 | 	test	local02, #1 wz
2cdf8     04 AA 46 50 |  if_ne	shr	local03, #4
2cdfc     55 AF 02 56 |  if_ne	mov	local05, local03
2ce00     5A AF C2 AA |  if_e	rdbyte	local05, local08
2ce04     F0 AE 06 A5 |  if_e	and	local05, #240
2ce08     55 AB EA A8 |  if_e	getbyte	local03, local03, #1
2ce0c     55 AB 42 A8 |  if_e	getnib	local03, local03, #0
2ce10     55 AF 42 A5 |  if_e	or	local05, local03
2ce14     5A AF 42 FC | 	wrbyte	local05, local08
2ce18     03 A6 06 F1 | 	add	local01, #3
2ce1c     53 03 48 FC | 	wrbyte	#1, local01
2ce20                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
2ce20                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2ce20                 | ' 			fs->wflag = 1;
2ce20                 | ' 			break;
2ce20     C0 00 90 FD | 	jmp	#LR__4736
2ce24                 | LR__4734
2ce24     53 93 02 F6 | 	mov	arg01, local01
2ce28     54 B5 02 F6 | 	mov	local08, local02
2ce2c     08 B4 46 F0 | 	shr	local08, #8
2ce30     24 A6 06 F1 | 	add	local01, #36
2ce34     53 95 02 FB | 	rdlong	arg02, local01
2ce38     24 A6 86 F1 | 	sub	local01, #36
2ce3c     5A 95 02 F1 | 	add	arg02, local08
2ce40     44 FB BF FD | 	call	#_fatfs_cc_move_window
2ce44     3D AD 0A F6 | 	mov	local04, result1 wz
2ce48     98 00 90 5D |  if_ne	jmp	#LR__4736
2ce4c     34 A6 06 F1 | 	add	local01, #52
2ce50     53 93 02 F6 | 	mov	arg01, local01
2ce54     01 A8 66 F0 | 	shl	local02, #1
2ce58     FF A9 06 F5 | 	and	local02, #511
2ce5c     54 93 02 F1 | 	add	arg01, local02
2ce60     49 AB 52 FC | 	wrword	local03, arg01
2ce64     31 A6 86 F1 | 	sub	local01, #49
2ce68     53 03 48 FC | 	wrbyte	#1, local01
2ce6c                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
2ce6c                 | ' 			fs->wflag = 1;
2ce6c                 | ' 			break;
2ce6c     74 00 90 FD | 	jmp	#LR__4736
2ce70                 | LR__4735
2ce70     53 93 02 F6 | 	mov	arg01, local01
2ce74     54 B5 02 F6 | 	mov	local08, local02
2ce78     07 B4 46 F0 | 	shr	local08, #7
2ce7c     24 A6 06 F1 | 	add	local01, #36
2ce80     53 95 02 FB | 	rdlong	arg02, local01
2ce84     24 A6 86 F1 | 	sub	local01, #36
2ce88     5A 95 02 F1 | 	add	arg02, local08
2ce8c     F8 FA BF FD | 	call	#_fatfs_cc_move_window
2ce90     3D AD 0A F6 | 	mov	local04, result1 wz
2ce94     4C 00 90 5D |  if_ne	jmp	#LR__4736
2ce98     7C AA 06 F4 | 	bitl	local03, #124
2ce9c     53 93 02 F6 | 	mov	arg01, local01
2cea0     34 92 06 F1 | 	add	arg01, #52
2cea4     54 B5 02 F6 | 	mov	local08, local02
2cea8     02 B4 66 F0 | 	shl	local08, #2
2ceac     FF B5 06 F5 | 	and	local08, #511
2ceb0     5A 93 02 F1 | 	add	arg01, local08
2ceb4                 | ' {
2ceb4                 | ' 
2ceb4                 | ' 	return *((DWORD*)ptr);
2ceb4     49 B5 02 FB | 	rdlong	local08, arg01
2ceb8     00 00 78 FF 
2cebc     00 B4 06 F5 | 	and	local08, ##-268435456
2cec0     5A AB 42 F5 | 	or	local03, local08
2cec4     34 A6 06 F1 | 	add	local01, #52
2cec8     53 93 02 F6 | 	mov	arg01, local01
2cecc     02 A8 66 F0 | 	shl	local02, #2
2ced0     FF A9 06 F5 | 	and	local02, #511
2ced4     54 93 02 F1 | 	add	arg01, local02
2ced8     49 AB 62 FC | 	wrlong	local03, arg01
2cedc     31 A6 86 F1 | 	sub	local01, #49
2cee0     53 03 48 FC | 	wrbyte	#1, local01
2cee4                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
2cee4                 | ' 			}
2cee4                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
2cee4                 | ' 			fs->wflag = 1;
2cee4                 | ' 			break;
2cee4                 | LR__4736
2cee4                 | LR__4737
2cee4                 | ' 		}
2cee4                 | ' 	}
2cee4                 | ' 	return res;
2cee4     56 7B 02 F6 | 	mov	result1, local04
2cee8     E7 F0 03 F6 | 	mov	ptra, fp
2ceec     F2 00 A0 FD | 	call	#popregs_
2cef0                 | _fatfs_cc_put_fat_ret
2cef0     2D 00 64 FD | 	ret
2cef4                 | 
2cef4                 | _fatfs_cc_remove_chain
2cef4     05 CA 05 F6 | 	mov	COUNT_, #5
2cef8     E8 00 A0 FD | 	call	#pushregs_
2cefc     49 A7 02 F6 | 	mov	local01, arg01
2cf00     4A A9 02 F6 | 	mov	local02, arg02
2cf04     4B AB 02 F6 | 	mov	local03, arg03
2cf08     53 AD 02 FB | 	rdlong	local04, local01
2cf0c     02 A8 16 F2 | 	cmp	local02, #2 wc
2cf10     14 00 90 CD |  if_b	jmp	#LR__4740
2cf14     18 AC 06 F1 | 	add	local04, #24
2cf18     56 7B 02 FB | 	rdlong	result1, local04
2cf1c     18 AC 86 F1 | 	sub	local04, #24
2cf20     3D A9 12 F2 | 	cmp	local02, result1 wc
2cf24     08 00 90 CD |  if_b	jmp	#LR__4741
2cf28                 | LR__4740
2cf28     02 7A 06 F6 | 	mov	result1, #2
2cf2c     CC 00 90 FD | 	jmp	#LR__4746
2cf30                 | LR__4741
2cf30     00 AA 0E F2 | 	cmp	local03, #0 wz
2cf34     18 00 90 AD |  if_e	jmp	#LR__4742
2cf38     55 95 02 F6 | 	mov	arg02, local03
2cf3c     56 93 02 F6 | 	mov	arg01, local04
2cf40     01 96 66 F6 | 	neg	arg03, #1
2cf44     9C FD BF FD | 	call	#_fatfs_cc_put_fat
2cf48     00 7A 0E F2 | 	cmp	result1, #0 wz
2cf4c     AC 00 90 5D |  if_ne	jmp	#LR__4746
2cf50                 | LR__4742
2cf50                 | ' 	}
2cf50                 | ' 
2cf50                 | ' 
2cf50                 | ' 	do {
2cf50                 | LR__4743
2cf50     54 95 02 F6 | 	mov	arg02, local02
2cf54     53 93 02 F6 | 	mov	arg01, local01
2cf58     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
2cf5c     3D AF 0A F6 | 	mov	local05, result1 wz
2cf60     94 00 90 AD |  if_e	jmp	#LR__4745
2cf64     01 AE 0E F2 | 	cmp	local05, #1 wz
2cf68     02 7A 06 A6 |  if_e	mov	result1, #2
2cf6c     8C 00 90 AD |  if_e	jmp	#LR__4746
2cf70     FF FF 7F FF 
2cf74     FF AF 0E F2 | 	cmp	local05, ##-1 wz
2cf78     01 7A 06 A6 |  if_e	mov	result1, #1
2cf7c     7C 00 90 AD |  if_e	jmp	#LR__4746
2cf80     54 95 02 F6 | 	mov	arg02, local02
2cf84     56 93 02 F6 | 	mov	arg01, local04
2cf88     00 96 06 F6 | 	mov	arg03, #0
2cf8c     54 FD BF FD | 	call	#_fatfs_cc_put_fat
2cf90     3D AB 0A F6 | 	mov	local03, result1 wz
2cf94     55 7B 02 56 |  if_ne	mov	result1, local03
2cf98     60 00 90 5D |  if_ne	jmp	#LR__4746
2cf9c     18 AC 06 F1 | 	add	local04, #24
2cfa0     56 AB 02 FB | 	rdlong	local03, local04
2cfa4     02 AA 86 F1 | 	sub	local03, #2
2cfa8     04 AC 86 F1 | 	sub	local04, #4
2cfac     56 A9 02 FB | 	rdlong	local02, local04
2cfb0     14 AC 86 F1 | 	sub	local04, #20
2cfb4     55 A9 12 F2 | 	cmp	local02, local03 wc
2cfb8     24 00 90 3D |  if_ae	jmp	#LR__4744
2cfbc     14 AC 06 F1 | 	add	local04, #20
2cfc0     56 AB 02 FB | 	rdlong	local03, local04
2cfc4     01 AA 06 F1 | 	add	local03, #1
2cfc8     56 AB 62 FC | 	wrlong	local03, local04
2cfcc     10 AC 86 F1 | 	sub	local04, #16
2cfd0     56 AB C2 FA | 	rdbyte	local03, local04
2cfd4     01 AA 46 F5 | 	or	local03, #1
2cfd8     56 AB 42 FC | 	wrbyte	local03, local04
2cfdc     04 AC 86 F1 | 	sub	local04, #4
2cfe0                 | LR__4744
2cfe0     57 A9 02 F6 | 	mov	local02, local05
2cfe4     18 AC 06 F1 | 	add	local04, #24
2cfe8     56 AF 02 FB | 	rdlong	local05, local04
2cfec     18 AC 86 F1 | 	sub	local04, #24
2cff0     57 A9 12 F2 | 	cmp	local02, local05 wc
2cff4     58 FF 9F CD |  if_b	jmp	#LR__4743
2cff8                 | LR__4745
2cff8                 | ' #line 1500 "ff.c"
2cff8                 | ' 	return FR_OK;
2cff8     00 7A 06 F6 | 	mov	result1, #0
2cffc                 | LR__4746
2cffc     E7 F0 03 F6 | 	mov	ptra, fp
2d000     F2 00 A0 FD | 	call	#popregs_
2d004                 | _fatfs_cc_remove_chain_ret
2d004     2D 00 64 FD | 	ret
2d008                 | 
2d008                 | _fatfs_cc_create_chain
2d008     09 CA 05 F6 | 	mov	COUNT_, #9
2d00c     E8 00 A0 FD | 	call	#pushregs_
2d010     49 A7 02 F6 | 	mov	local01, arg01
2d014     4A A9 0A F6 | 	mov	local02, arg02 wz
2d018     53 AB 02 FB | 	rdlong	local03, local01
2d01c     28 00 90 5D |  if_ne	jmp	#LR__4750
2d020     10 AA 06 F1 | 	add	local03, #16
2d024     55 AD 0A FB | 	rdlong	local04, local03 wz
2d028     10 AA 86 F1 | 	sub	local03, #16
2d02c     18 AA 06 51 |  if_ne	add	local03, #24
2d030     55 AF 02 5B |  if_ne	rdlong	local05, local03
2d034     18 AA 86 51 |  if_ne	sub	local03, #24
2d038     57 AD 12 52 |  if_ne	cmp	local04, local05 wc
2d03c     50 00 90 4D |  if_c_and_nz	jmp	#LR__4751
2d040     01 AC 06 F6 | 	mov	local04, #1
2d044     48 00 90 FD | 	jmp	#LR__4751
2d048                 | LR__4750
2d048     54 95 02 F6 | 	mov	arg02, local02
2d04c     53 93 02 F6 | 	mov	arg01, local01
2d050     EC FA BF FD | 	call	#_fatfs_cc_get_fat
2d054     3D AD 02 F6 | 	mov	local04, result1
2d058     02 AC 16 F2 | 	cmp	local04, #2 wc
2d05c     01 7A 06 C6 |  if_b	mov	result1, #1
2d060     BC 01 90 CD |  if_b	jmp	#LR__4761
2d064     FF FF 7F FF 
2d068     FF AD 0E F2 | 	cmp	local04, ##-1 wz
2d06c     56 7B 02 A6 |  if_e	mov	result1, local04
2d070     AC 01 90 AD |  if_e	jmp	#LR__4761
2d074     18 AA 06 F1 | 	add	local03, #24
2d078     55 AF 02 FB | 	rdlong	local05, local03
2d07c     18 AA 86 F1 | 	sub	local03, #24
2d080     57 AD 12 F2 | 	cmp	local04, local05 wc
2d084     56 7B 02 C6 |  if_b	mov	result1, local04
2d088     94 01 90 CD |  if_b	jmp	#LR__4761
2d08c     54 AD 02 F6 | 	mov	local04, local02
2d090                 | LR__4751
2d090     14 AA 06 F1 | 	add	local03, #20
2d094     55 AF 0A FB | 	rdlong	local05, local03 wz
2d098     14 AA 86 F1 | 	sub	local03, #20
2d09c     00 7A 06 A6 |  if_e	mov	result1, #0
2d0a0     7C 01 90 AD |  if_e	jmp	#LR__4761
2d0a4     00 B0 06 F6 | 	mov	local06, #0
2d0a8     54 AD 0A F2 | 	cmp	local04, local02 wz
2d0ac     74 00 90 5D |  if_ne	jmp	#LR__4754
2d0b0     56 B1 02 F6 | 	mov	local06, local04
2d0b4     01 B0 06 F1 | 	add	local06, #1
2d0b8     18 AA 06 F1 | 	add	local03, #24
2d0bc     55 AF 02 FB | 	rdlong	local05, local03
2d0c0     18 AA 86 F1 | 	sub	local03, #24
2d0c4     57 B1 12 F2 | 	cmp	local06, local05 wc
2d0c8     02 B0 06 36 |  if_ae	mov	local06, #2
2d0cc     58 95 02 F6 | 	mov	arg02, local06
2d0d0     53 93 02 F6 | 	mov	arg01, local01
2d0d4     68 FA BF FD | 	call	#_fatfs_cc_get_fat
2d0d8     3D AF 02 F6 | 	mov	local05, result1
2d0dc     01 AE 0E F2 | 	cmp	local05, #1 wz
2d0e0     FF FF 7F 5F 
2d0e4     FF AF 0E 52 |  if_ne	cmp	local05, ##-1 wz
2d0e8     57 7B 02 A6 |  if_e	mov	result1, local05
2d0ec     30 01 90 AD |  if_e	jmp	#LR__4761
2d0f0     00 AE 0E F2 | 	cmp	local05, #0 wz
2d0f4     2C 00 90 AD |  if_e	jmp	#LR__4753
2d0f8     10 AA 06 F1 | 	add	local03, #16
2d0fc     55 B3 02 FB | 	rdlong	local07, local03
2d100     10 AA 86 F1 | 	sub	local03, #16
2d104     02 B2 16 F2 | 	cmp	local07, #2 wc
2d108     14 00 90 CD |  if_b	jmp	#LR__4752
2d10c     18 AA 06 F1 | 	add	local03, #24
2d110     55 AF 02 FB | 	rdlong	local05, local03
2d114     18 AA 86 F1 | 	sub	local03, #24
2d118     57 B3 12 F2 | 	cmp	local07, local05 wc
2d11c     59 AD 02 C6 |  if_b	mov	local04, local07
2d120                 | LR__4752
2d120     00 B0 06 F6 | 	mov	local06, #0
2d124                 | LR__4753
2d124                 | LR__4754
2d124     00 B0 0E F2 | 	cmp	local06, #0 wz
2d128     60 00 90 5D |  if_ne	jmp	#LR__4757
2d12c     56 B1 02 F6 | 	mov	local06, local04
2d130                 | ' 			ncl = scl;
2d130                 | ' 			for (;;) {
2d130                 | LR__4755
2d130     01 B0 06 F1 | 	add	local06, #1
2d134     18 AA 06 F1 | 	add	local03, #24
2d138     55 AF 02 FB | 	rdlong	local05, local03
2d13c     18 AA 86 F1 | 	sub	local03, #24
2d140     57 B1 12 F2 | 	cmp	local06, local05 wc
2d144     02 B0 06 36 |  if_ae	mov	local06, #2
2d148     56 B1 1A 32 |  if_ae	cmp	local06, local04 wcz
2d14c     00 7A 06 16 |  if_a	mov	result1, #0
2d150     CC 00 90 1D |  if_a	jmp	#LR__4761
2d154     58 95 02 F6 | 	mov	arg02, local06
2d158     53 93 02 F6 | 	mov	arg01, local01
2d15c     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
2d160     3D B3 0A F6 | 	mov	local07, result1 wz
2d164     24 00 90 AD |  if_e	jmp	#LR__4756
2d168     01 B2 0E F2 | 	cmp	local07, #1 wz
2d16c     FF FF 7F 5F 
2d170     FF B3 0E 52 |  if_ne	cmp	local07, ##-1 wz
2d174     59 7B 02 A6 |  if_e	mov	result1, local07
2d178     A4 00 90 AD |  if_e	jmp	#LR__4761
2d17c     56 B1 0A F2 | 	cmp	local06, local04 wz
2d180     00 7A 06 A6 |  if_e	mov	result1, #0
2d184     98 00 90 AD |  if_e	jmp	#LR__4761
2d188     A4 FF 9F FD | 	jmp	#LR__4755
2d18c                 | LR__4756
2d18c                 | LR__4757
2d18c     55 93 02 F6 | 	mov	arg01, local03
2d190     58 95 02 F6 | 	mov	arg02, local06
2d194     01 96 66 F6 | 	neg	arg03, #1
2d198     48 FB BF FD | 	call	#_fatfs_cc_put_fat
2d19c     3D B5 0A F6 | 	mov	local08, result1 wz
2d1a0     1C 00 90 5D |  if_ne	jmp	#LR__4758
2d1a4     00 A8 0E F2 | 	cmp	local02, #0 wz
2d1a8     14 00 90 AD |  if_e	jmp	#LR__4758
2d1ac     55 93 02 F6 | 	mov	arg01, local03
2d1b0     54 95 02 F6 | 	mov	arg02, local02
2d1b4     58 97 02 F6 | 	mov	arg03, local06
2d1b8     28 FB BF FD | 	call	#_fatfs_cc_put_fat
2d1bc     3D B5 02 F6 | 	mov	local08, result1
2d1c0                 | LR__4758
2d1c0     00 B4 0E F2 | 	cmp	local08, #0 wz
2d1c4     4C 00 90 5D |  if_ne	jmp	#LR__4759
2d1c8     10 AA 06 F1 | 	add	local03, #16
2d1cc     55 B1 62 FC | 	wrlong	local06, local03
2d1d0     08 AA 06 F1 | 	add	local03, #8
2d1d4     55 AF 02 FB | 	rdlong	local05, local03
2d1d8     02 AE 86 F1 | 	sub	local05, #2
2d1dc     04 AA 86 F1 | 	sub	local03, #4
2d1e0     55 B7 02 FB | 	rdlong	local09, local03
2d1e4     14 AA 86 F1 | 	sub	local03, #20
2d1e8     57 B7 1A F2 | 	cmp	local09, local05 wcz
2d1ec     14 AA 06 E1 |  if_be	add	local03, #20
2d1f0     55 B7 02 EB |  if_be	rdlong	local09, local03
2d1f4     01 B6 86 E1 |  if_be	sub	local09, #1
2d1f8     55 B7 62 EC |  if_be	wrlong	local09, local03
2d1fc     14 AA 86 E1 |  if_be	sub	local03, #20
2d200     04 AA 06 F1 | 	add	local03, #4
2d204     55 AF C2 FA | 	rdbyte	local05, local03
2d208     01 AE 46 F5 | 	or	local05, #1
2d20c     55 AF 42 FC | 	wrbyte	local05, local03
2d210     08 00 90 FD | 	jmp	#LR__4760
2d214                 | LR__4759
2d214     01 B4 0E F2 | 	cmp	local08, #1 wz
2d218     01 B0 C6 F6 | 	negz	local06, #1
2d21c                 | LR__4760
2d21c                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
2d21c                 | ' 	}
2d21c                 | ' 
2d21c                 | ' 	return ncl;
2d21c     58 7B 02 F6 | 	mov	result1, local06
2d220                 | LR__4761
2d220     E7 F0 03 F6 | 	mov	ptra, fp
2d224     F2 00 A0 FD | 	call	#popregs_
2d228                 | _fatfs_cc_create_chain_ret
2d228     2D 00 64 FD | 	ret
2d22c                 | 
2d22c                 | _fatfs_cc_dir_clear
2d22c     06 CA 05 F6 | 	mov	COUNT_, #6
2d230     E8 00 A0 FD | 	call	#pushregs_
2d234     49 A7 02 F6 | 	mov	local01, arg01
2d238     4A A9 02 F6 | 	mov	local02, arg02
2d23c     53 93 02 F6 | 	mov	arg01, local01
2d240     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
2d244     00 7A 0E F2 | 	cmp	result1, #0 wz
2d248     01 7A 06 56 |  if_ne	mov	result1, #1
2d24c     90 00 90 5D |  if_ne	jmp	#LR__4772
2d250     53 93 02 F6 | 	mov	arg01, local01
2d254     54 95 02 F6 | 	mov	arg02, local02
2d258     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
2d25c     3D AB 02 F6 | 	mov	local03, result1
2d260     30 A6 06 F1 | 	add	local01, #48
2d264     53 AB 62 FC | 	wrlong	local03, local01
2d268     04 A6 06 F1 | 	add	local01, #4
2d26c     53 93 02 F6 | 	mov	arg01, local01
2d270     00 94 06 F6 | 	mov	arg02, #0
2d274     09 96 C6 F9 | 	decod	arg03, #9
2d278     D8 00 A0 FD | 	call	#\builtin_bytefill_
2d27c     53 AD 02 F6 | 	mov	local04, local01
2d280                 | ' #line 1667 "ff.c"
2d280                 | ' 	{
2d280                 | ' 		ibuf = fs->win; szb = 1;
2d280                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
2d280     00 AE 06 F6 | 	mov	local05, #0
2d284     34 A6 86 F1 | 	sub	local01, #52
2d288                 | LR__4770
2d288     0A A6 06 F1 | 	add	local01, #10
2d28c     53 B1 E2 FA | 	rdword	local06, local01
2d290     0A A6 86 F1 | 	sub	local01, #10
2d294     58 AF 12 F2 | 	cmp	local05, local06 wc
2d298     2C 00 90 3D |  if_ae	jmp	#LR__4771
2d29c     01 A6 06 F1 | 	add	local01, #1
2d2a0     53 93 C2 FA | 	rdbyte	arg01, local01
2d2a4     01 A6 86 F1 | 	sub	local01, #1
2d2a8     56 95 02 F6 | 	mov	arg02, local04
2d2ac     55 97 02 F6 | 	mov	arg03, local03
2d2b0     57 97 02 F1 | 	add	arg03, local05
2d2b4     01 98 06 F6 | 	mov	arg04, #1
2d2b8     80 F1 BF FD | 	call	#_fatfs_cc_disk_write
2d2bc     00 7A 0E F2 | 	cmp	result1, #0 wz
2d2c0     01 AE 06 A1 |  if_e	add	local05, #1
2d2c4     C0 FF 9F AD |  if_e	jmp	#LR__4770
2d2c8                 | LR__4771
2d2c8                 | ' 	}
2d2c8                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
2d2c8     0A A6 06 F1 | 	add	local01, #10
2d2cc     53 AD E2 FA | 	rdword	local04, local01
2d2d0     56 AF 0A F2 | 	cmp	local05, local04 wz
2d2d4     00 B0 06 A6 |  if_e	mov	local06, #0
2d2d8     01 B0 06 56 |  if_ne	mov	local06, #1
2d2dc     58 7B 02 F6 | 	mov	result1, local06
2d2e0                 | LR__4772
2d2e0     E7 F0 03 F6 | 	mov	ptra, fp
2d2e4     F2 00 A0 FD | 	call	#popregs_
2d2e8                 | _fatfs_cc_dir_clear_ret
2d2e8     2D 00 64 FD | 	ret
2d2ec                 | 
2d2ec                 | _fatfs_cc_dir_sdi
2d2ec     06 CA 05 F6 | 	mov	COUNT_, #6
2d2f0     E8 00 A0 FD | 	call	#pushregs_
2d2f4     49 A7 02 F6 | 	mov	local01, arg01
2d2f8     4A A9 02 F6 | 	mov	local02, arg02
2d2fc     53 AB 02 FB | 	rdlong	local03, local01
2d300     00 10 00 FF 
2d304     00 A8 16 F2 | 	cmp	local02, ##2097152 wc
2d308     1F A8 CE C7 |  if_b	test	local02, #31 wz
2d30c                 | ' 		return FR_INT_ERR;
2d30c     02 7A 06 76 |  if_nc_or_nz	mov	result1, #2
2d310     34 01 90 7D |  if_nc_or_nz	jmp	#LR__4786
2d314     10 A6 06 F1 | 	add	local01, #16
2d318     53 A9 62 FC | 	wrlong	local02, local01
2d31c     08 A6 86 F1 | 	sub	local01, #8
2d320     53 AD 0A FB | 	rdlong	local04, local01 wz
2d324     08 A6 86 F1 | 	sub	local01, #8
2d328     55 AF C2 AA |  if_e	rdbyte	local05, local03
2d32c     03 AE 16 A2 |  if_e	cmp	local05, #3 wc
2d330     28 AA 06 21 |  if_nc_and_z	add	local03, #40
2d334     55 AD 02 2B |  if_nc_and_z	rdlong	local04, local03
2d338     28 AA 86 21 |  if_nc_and_z	sub	local03, #40
2d33c     00 AC 0E F2 | 	cmp	local04, #0 wz
2d340     3C 00 90 5D |  if_ne	jmp	#LR__4780
2d344     54 AF 02 F6 | 	mov	local05, local02
2d348     05 AE 46 F0 | 	shr	local05, #5
2d34c     08 AA 06 F1 | 	add	local03, #8
2d350     55 95 E2 FA | 	rdword	arg02, local03
2d354     08 AA 86 F1 | 	sub	local03, #8
2d358     4A AF 12 F2 | 	cmp	local05, arg02 wc
2d35c     02 7A 06 36 |  if_ae	mov	result1, #2
2d360     E4 00 90 3D |  if_ae	jmp	#LR__4786
2d364     28 AA 06 F1 | 	add	local03, #40
2d368     55 AF 02 FB | 	rdlong	local05, local03
2d36c     28 AA 86 F1 | 	sub	local03, #40
2d370     18 A6 06 F1 | 	add	local01, #24
2d374     53 AF 62 FC | 	wrlong	local05, local01
2d378     18 A6 86 F1 | 	sub	local01, #24
2d37c     7C 00 90 FD | 	jmp	#LR__4785
2d380                 | LR__4780
2d380     0A AA 06 F1 | 	add	local03, #10
2d384     55 B1 E2 FA | 	rdword	local06, local03
2d388     0A AA 86 F1 | 	sub	local03, #10
2d38c     09 B0 66 F0 | 	shl	local06, #9
2d390                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
2d390                 | ' 		while (ofs >= csz) {
2d390                 | LR__4781
2d390     58 A9 12 F2 | 	cmp	local02, local06 wc
2d394     4C 00 90 CD |  if_b	jmp	#LR__4784
2d398     53 93 02 F6 | 	mov	arg01, local01
2d39c     56 95 02 F6 | 	mov	arg02, local04
2d3a0     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
2d3a4     3D AD 02 F6 | 	mov	local04, result1
2d3a8     FF FF 7F FF 
2d3ac     FF AD 0E F2 | 	cmp	local04, ##-1 wz
2d3b0     01 7A 06 A6 |  if_e	mov	result1, #1
2d3b4     90 00 90 AD |  if_e	jmp	#LR__4786
2d3b8     02 AC 16 F2 | 	cmp	local04, #2 wc
2d3bc     14 00 90 CD |  if_b	jmp	#LR__4782
2d3c0     18 AA 06 F1 | 	add	local03, #24
2d3c4     55 AF 02 FB | 	rdlong	local05, local03
2d3c8     18 AA 86 F1 | 	sub	local03, #24
2d3cc     57 AD 12 F2 | 	cmp	local04, local05 wc
2d3d0     08 00 90 CD |  if_b	jmp	#LR__4783
2d3d4                 | LR__4782
2d3d4     02 7A 06 F6 | 	mov	result1, #2
2d3d8     6C 00 90 FD | 	jmp	#LR__4786
2d3dc                 | LR__4783
2d3dc     58 A9 82 F1 | 	sub	local02, local06
2d3e0     AC FF 9F FD | 	jmp	#LR__4781
2d3e4                 | LR__4784
2d3e4     55 93 02 F6 | 	mov	arg01, local03
2d3e8     56 95 02 F6 | 	mov	arg02, local04
2d3ec     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
2d3f0     18 A6 06 F1 | 	add	local01, #24
2d3f4     53 7B 62 FC | 	wrlong	result1, local01
2d3f8     18 A6 86 F1 | 	sub	local01, #24
2d3fc                 | LR__4785
2d3fc     14 A6 06 F1 | 	add	local01, #20
2d400     53 AD 62 FC | 	wrlong	local04, local01
2d404     04 A6 06 F1 | 	add	local01, #4
2d408     53 AF 0A FB | 	rdlong	local05, local01 wz
2d40c     18 A6 86 F1 | 	sub	local01, #24
2d410     02 7A 06 A6 |  if_e	mov	result1, #2
2d414     30 00 90 AD |  if_e	jmp	#LR__4786
2d418     54 B1 02 F6 | 	mov	local06, local02
2d41c     09 B0 46 F0 | 	shr	local06, #9
2d420     18 A6 06 F1 | 	add	local01, #24
2d424     53 AF 02 FB | 	rdlong	local05, local01
2d428     58 AF 02 F1 | 	add	local05, local06
2d42c     53 AF 62 FC | 	wrlong	local05, local01
2d430     34 AA 06 F1 | 	add	local03, #52
2d434     FF A9 06 F5 | 	and	local02, #511
2d438     54 AB 02 F1 | 	add	local03, local02
2d43c     04 A6 06 F1 | 	add	local01, #4
2d440     53 AB 62 FC | 	wrlong	local03, local01
2d444                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
2d444                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
2d444                 | ' 
2d444                 | ' 	return FR_OK;
2d444     00 7A 06 F6 | 	mov	result1, #0
2d448                 | LR__4786
2d448     E7 F0 03 F6 | 	mov	ptra, fp
2d44c     F2 00 A0 FD | 	call	#popregs_
2d450                 | _fatfs_cc_dir_sdi_ret
2d450     2D 00 64 FD | 	ret
2d454                 | 
2d454                 | _fatfs_cc_dir_next
2d454     05 CA 05 F6 | 	mov	COUNT_, #5
2d458     E8 00 A0 FD | 	call	#pushregs_
2d45c     49 A7 02 F6 | 	mov	local01, arg01
2d460     4A A9 02 F6 | 	mov	local02, arg02
2d464     53 AB 02 FB | 	rdlong	local03, local01
2d468     10 A6 06 F1 | 	add	local01, #16
2d46c     53 AD 02 FB | 	rdlong	local04, local01
2d470     10 A6 86 F1 | 	sub	local01, #16
2d474     20 AC 06 F1 | 	add	local04, #32
2d478     00 10 00 FF 
2d47c     00 AC 16 F2 | 	cmp	local04, ##2097152 wc
2d480     18 A6 06 31 |  if_ae	add	local01, #24
2d484     53 01 68 3C |  if_ae	wrlong	#0, local01
2d488     18 A6 86 31 |  if_ae	sub	local01, #24
2d48c     18 A6 06 F1 | 	add	local01, #24
2d490     53 95 0A FB | 	rdlong	arg02, local01 wz
2d494     18 A6 86 F1 | 	sub	local01, #24
2d498     04 7A 06 A6 |  if_e	mov	result1, #4
2d49c     64 01 90 AD |  if_e	jmp	#LR__4795
2d4a0     FF AD CE F7 | 	test	local04, #511 wz
2d4a4     3C 01 90 5D |  if_ne	jmp	#LR__4794
2d4a8     18 A6 06 F1 | 	add	local01, #24
2d4ac     53 95 02 FB | 	rdlong	arg02, local01
2d4b0     01 94 06 F1 | 	add	arg02, #1
2d4b4     53 95 62 FC | 	wrlong	arg02, local01
2d4b8     04 A6 86 F1 | 	sub	local01, #4
2d4bc     53 95 0A FB | 	rdlong	arg02, local01 wz
2d4c0     14 A6 86 F1 | 	sub	local01, #20
2d4c4     2C 00 90 5D |  if_ne	jmp	#LR__4790
2d4c8     56 95 02 F6 | 	mov	arg02, local04
2d4cc     05 94 46 F0 | 	shr	arg02, #5
2d4d0     08 AA 06 F1 | 	add	local03, #8
2d4d4     55 A9 E2 FA | 	rdword	local02, local03
2d4d8     08 AA 86 F1 | 	sub	local03, #8
2d4dc     54 95 12 F2 | 	cmp	arg02, local02 wc
2d4e0     18 A6 06 31 |  if_ae	add	local01, #24
2d4e4     53 01 68 3C |  if_ae	wrlong	#0, local01
2d4e8                 | ' 				dp->sect = 0; return FR_NO_FILE;
2d4e8     04 7A 06 36 |  if_ae	mov	result1, #4
2d4ec     14 01 90 3D |  if_ae	jmp	#LR__4795
2d4f0     F0 00 90 FD | 	jmp	#LR__4793
2d4f4                 | LR__4790
2d4f4     56 93 02 F6 | 	mov	arg01, local04
2d4f8     09 92 46 F0 | 	shr	arg01, #9
2d4fc     0A AA 06 F1 | 	add	local03, #10
2d500     55 95 E2 FA | 	rdword	arg02, local03
2d504     0A AA 86 F1 | 	sub	local03, #10
2d508     01 94 86 F1 | 	sub	arg02, #1
2d50c     4A 93 CA F7 | 	test	arg01, arg02 wz
2d510     D0 00 90 5D |  if_ne	jmp	#LR__4792
2d514     53 93 02 F6 | 	mov	arg01, local01
2d518     14 A6 06 F1 | 	add	local01, #20
2d51c     53 95 02 FB | 	rdlong	arg02, local01
2d520     14 A6 86 F1 | 	sub	local01, #20
2d524     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
2d528     3D AF 02 F6 | 	mov	local05, result1
2d52c     02 AE 16 F2 | 	cmp	local05, #2 wc
2d530     02 7A 06 C6 |  if_b	mov	result1, #2
2d534     CC 00 90 CD |  if_b	jmp	#LR__4795
2d538     FF FF 7F FF 
2d53c     FF AF 0E F2 | 	cmp	local05, ##-1 wz
2d540     01 7A 06 A6 |  if_e	mov	result1, #1
2d544     BC 00 90 AD |  if_e	jmp	#LR__4795
2d548     18 AA 06 F1 | 	add	local03, #24
2d54c     55 95 02 FB | 	rdlong	arg02, local03
2d550     18 AA 86 F1 | 	sub	local03, #24
2d554     4A AF 12 F2 | 	cmp	local05, arg02 wc
2d558     68 00 90 CD |  if_b	jmp	#LR__4791
2d55c     00 A8 0E F2 | 	cmp	local02, #0 wz
2d560     18 A6 06 A1 |  if_e	add	local01, #24
2d564     53 01 68 AC |  if_e	wrlong	#0, local01
2d568                 | ' 						dp->sect = 0; return FR_NO_FILE;
2d568     04 7A 06 A6 |  if_e	mov	result1, #4
2d56c     94 00 90 AD |  if_e	jmp	#LR__4795
2d570     53 93 02 F6 | 	mov	arg01, local01
2d574     14 A6 06 F1 | 	add	local01, #20
2d578     53 95 02 FB | 	rdlong	arg02, local01
2d57c     14 A6 86 F1 | 	sub	local01, #20
2d580     84 FA BF FD | 	call	#_fatfs_cc_create_chain
2d584     3D AF 0A F6 | 	mov	local05, result1 wz
2d588     07 7A 06 A6 |  if_e	mov	result1, #7
2d58c     74 00 90 AD |  if_e	jmp	#LR__4795
2d590     01 AE 0E F2 | 	cmp	local05, #1 wz
2d594     02 7A 06 A6 |  if_e	mov	result1, #2
2d598     68 00 90 AD |  if_e	jmp	#LR__4795
2d59c     FF FF 7F FF 
2d5a0     FF AF 0E F2 | 	cmp	local05, ##-1 wz
2d5a4     01 7A 06 A6 |  if_e	mov	result1, #1
2d5a8     58 00 90 AD |  if_e	jmp	#LR__4795
2d5ac     57 95 02 F6 | 	mov	arg02, local05
2d5b0     55 93 02 F6 | 	mov	arg01, local03
2d5b4     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
2d5b8     00 7A 0E F2 | 	cmp	result1, #0 wz
2d5bc     01 7A 06 56 |  if_ne	mov	result1, #1
2d5c0     40 00 90 5D |  if_ne	jmp	#LR__4795
2d5c4                 | LR__4791
2d5c4     14 A6 06 F1 | 	add	local01, #20
2d5c8     53 AF 62 FC | 	wrlong	local05, local01
2d5cc     55 93 02 F6 | 	mov	arg01, local03
2d5d0     57 95 02 F6 | 	mov	arg02, local05
2d5d4     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
2d5d8     04 A6 06 F1 | 	add	local01, #4
2d5dc     53 7B 62 FC | 	wrlong	result1, local01
2d5e0     18 A6 86 F1 | 	sub	local01, #24
2d5e4                 | LR__4792
2d5e4                 | LR__4793
2d5e4                 | LR__4794
2d5e4     10 A6 06 F1 | 	add	local01, #16
2d5e8     53 AD 62 FC | 	wrlong	local04, local01
2d5ec     34 AA 06 F1 | 	add	local03, #52
2d5f0     FF AD 06 F5 | 	and	local04, #511
2d5f4     56 AB 02 F1 | 	add	local03, local04
2d5f8     0C A6 06 F1 | 	add	local01, #12
2d5fc     53 AB 62 FC | 	wrlong	local03, local01
2d600                 | ' #line 1771 "ff.c"
2d600                 | ' 				}
2d600                 | ' 				dp->clust = clst;
2d600                 | ' 				dp->sect = clst2sect(fs, clst);
2d600                 | ' 			}
2d600                 | ' 		}
2d600                 | ' 	}
2d600                 | ' 	dp->dptr = ofs;
2d600                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
2d600                 | ' 
2d600                 | ' 	return FR_OK;
2d600     00 7A 06 F6 | 	mov	result1, #0
2d604                 | LR__4795
2d604     E7 F0 03 F6 | 	mov	ptra, fp
2d608     F2 00 A0 FD | 	call	#popregs_
2d60c                 | _fatfs_cc_dir_next_ret
2d60c     2D 00 64 FD | 	ret
2d610                 | 
2d610                 | _fatfs_cc_dir_alloc
2d610     08 CA 05 F6 | 	mov	COUNT_, #8
2d614     E8 00 A0 FD | 	call	#pushregs_
2d618     49 A7 02 F6 | 	mov	local01, arg01
2d61c     4A A9 02 F6 | 	mov	local02, arg02
2d620     53 AB 02 FB | 	rdlong	local03, local01
2d624     53 93 02 F6 | 	mov	arg01, local01
2d628     00 94 06 F6 | 	mov	arg02, #0
2d62c     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
2d630     3D AD 0A F6 | 	mov	local04, result1 wz
2d634     70 00 90 5D |  if_ne	jmp	#LR__4804
2d638     00 AE 06 F6 | 	mov	local05, #0
2d63c                 | ' 		n = 0;
2d63c                 | ' 		do {
2d63c                 | LR__4800
2d63c     18 A6 06 F1 | 	add	local01, #24
2d640     53 95 02 FB | 	rdlong	arg02, local01
2d644     18 A6 86 F1 | 	sub	local01, #24
2d648     55 93 02 F6 | 	mov	arg01, local03
2d64c     38 F3 BF FD | 	call	#_fatfs_cc_move_window
2d650     3D AD 0A F6 | 	mov	local04, result1 wz
2d654     50 00 90 5D |  if_ne	jmp	#LR__4803
2d658     1C A6 06 F1 | 	add	local01, #28
2d65c     53 B1 02 FB | 	rdlong	local06, local01
2d660     1C A6 86 F1 | 	sub	local01, #28
2d664     58 B1 C2 FA | 	rdbyte	local06, local06
2d668     E5 B0 0E F2 | 	cmp	local06, #229 wz
2d66c     1C A6 06 51 |  if_ne	add	local01, #28
2d670     53 B3 02 5B |  if_ne	rdlong	local07, local01
2d674     1C A6 86 51 |  if_ne	sub	local01, #28
2d678     59 B5 CA 5A |  if_ne	rdbyte	local08, local07 wz
2d67c     10 00 90 5D |  if_ne	jmp	#LR__4801
2d680     01 AE 06 F1 | 	add	local05, #1
2d684     54 AF 0A F2 | 	cmp	local05, local02 wz
2d688     1C 00 90 AD |  if_e	jmp	#LR__4803
2d68c     04 00 90 FD | 	jmp	#LR__4802
2d690                 | LR__4801
2d690     00 AE 06 F6 | 	mov	local05, #0
2d694                 | LR__4802
2d694     53 93 02 F6 | 	mov	arg01, local01
2d698     01 94 06 F6 | 	mov	arg02, #1
2d69c     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
2d6a0     3D AD 0A F6 | 	mov	local04, result1 wz
2d6a4     94 FF 9F AD |  if_e	jmp	#LR__4800
2d6a8                 | LR__4803
2d6a8                 | LR__4804
2d6a8     04 AC 0E F2 | 	cmp	local04, #4 wz
2d6ac     07 AC 06 A6 |  if_e	mov	local04, #7
2d6b0                 | ' 	return res;
2d6b0     56 7B 02 F6 | 	mov	result1, local04
2d6b4     E7 F0 03 F6 | 	mov	ptra, fp
2d6b8     F2 00 A0 FD | 	call	#popregs_
2d6bc                 | _fatfs_cc_dir_alloc_ret
2d6bc     2D 00 64 FD | 	ret
2d6c0                 | 
2d6c0                 | _fatfs_cc_ld_clust
2d6c0     49 81 02 F6 | 	mov	_var01, arg01
2d6c4     4A 93 02 F6 | 	mov	arg01, arg02
2d6c8     1A 92 06 F1 | 	add	arg01, #26
2d6cc                 | ' {
2d6cc                 | ' 
2d6cc                 | ' 	return *((WORD*)ptr);
2d6cc     49 7B E2 FA | 	rdword	result1, arg01
2d6d0     3D 93 32 F9 | 	getword	arg01, result1, #0
2d6d4     40 81 C2 FA | 	rdbyte	_var01, _var01
2d6d8     03 80 0E F2 | 	cmp	_var01, #3 wz
2d6dc     14 94 06 A1 |  if_e	add	arg02, #20
2d6e0                 | ' {
2d6e0                 | ' 
2d6e0                 | ' 	return *((WORD*)ptr);
2d6e0     4A 7B E2 AA |  if_e	rdword	result1, arg02
2d6e4     10 7A 66 A0 |  if_e	shl	result1, #16
2d6e8     3D 93 42 A5 |  if_e	or	arg01, result1
2d6ec                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
2d6ec                 | ' 	}
2d6ec                 | ' 
2d6ec                 | ' 	return cl;
2d6ec     49 7B 02 F6 | 	mov	result1, arg01
2d6f0                 | _fatfs_cc_ld_clust_ret
2d6f0     2D 00 64 FD | 	ret
2d6f4                 | 
2d6f4                 | _fatfs_cc_st_clust
2d6f4     49 81 02 F6 | 	mov	_var01, arg01
2d6f8     4A 93 02 F6 | 	mov	arg01, arg02
2d6fc     1A 92 06 F1 | 	add	arg01, #26
2d700     49 97 52 FC | 	wrword	arg03, arg01
2d704     40 81 C2 FA | 	rdbyte	_var01, _var01
2d708     03 80 0E F2 | 	cmp	_var01, #3 wz
2d70c     14 94 06 A1 |  if_e	add	arg02, #20
2d710     10 96 46 A0 |  if_e	shr	arg03, #16
2d714     4A 97 52 AC |  if_e	wrword	arg03, arg02
2d718                 | _fatfs_cc_st_clust_ret
2d718     2D 00 64 FD | 	ret
2d71c                 | 
2d71c                 | _fatfs_cc_cmp_lfn
2d71c     07 CA 05 F6 | 	mov	COUNT_, #7
2d720     E8 00 A0 FD | 	call	#pushregs_
2d724     49 A7 02 F6 | 	mov	local01, arg01
2d728     4A 93 02 F6 | 	mov	arg01, arg02
2d72c     1A 92 06 F1 | 	add	arg01, #26
2d730                 | ' {
2d730                 | ' 
2d730                 | ' 	return *((WORD*)ptr);
2d730     49 7B EA FA | 	rdword	result1, arg01 wz
2d734     00 7A 06 56 |  if_ne	mov	result1, #0
2d738     D8 00 90 5D |  if_ne	jmp	#LR__4816
2d73c     4A A9 C2 FA | 	rdbyte	local02, arg02
2d740     3F A8 06 F5 | 	and	local02, #63
2d744     01 A8 86 F1 | 	sub	local02, #1
2d748     0D A8 06 FD | 	qmul	local02, #13
2d74c                 | ' 
2d74c                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
2d74c                 | ' 
2d74c                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2d74c     01 AA 06 F6 | 	mov	local03, #1
2d750     00 AC 06 F6 | 	mov	local04, #0
2d754     18 AE 62 FD | 	getqx	local05
2d758                 | LR__4810
2d758     0D AC 16 F2 | 	cmp	local04, #13 wc
2d75c     94 00 90 3D |  if_ae	jmp	#LR__4815
2d760     4A 93 02 F6 | 	mov	arg01, arg02
2d764     56 A9 02 F6 | 	mov	local02, local04
2d768     37 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
2d76c     01 00 00 FF 
2d770     AE 7B 06 F1 | 	add	result1, ##942
2d774     3D A9 02 F1 | 	add	local02, result1
2d778     54 A9 C2 FA | 	rdbyte	local02, local02
2d77c     54 93 02 F1 | 	add	arg01, local02
2d780                 | ' {
2d780                 | ' 
2d780                 | ' 	return *((WORD*)ptr);
2d780     49 7B E2 FA | 	rdword	result1, arg01
2d784     3D B1 02 F6 | 	mov	local06, result1
2d788     55 A9 02 F6 | 	mov	local02, local03
2d78c     0F A8 4E F7 | 	zerox	local02, #15 wz
2d790     44 00 90 AD |  if_e	jmp	#LR__4813
2d794     00 AF 16 F2 | 	cmp	local05, #256 wc
2d798     2C 00 90 3D |  if_ae	jmp	#LR__4811
2d79c     58 93 32 F9 | 	getword	arg01, local06, #0
2d7a0     CC E4 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2d7a4     3D A9 02 F6 | 	mov	local02, result1
2d7a8     57 AB 02 F6 | 	mov	local03, local05
2d7ac     01 AA 66 F0 | 	shl	local03, #1
2d7b0     53 AB 02 F1 | 	add	local03, local01
2d7b4     55 93 E2 FA | 	rdword	arg01, local03
2d7b8     01 AE 06 F1 | 	add	local05, #1
2d7bc     B0 E4 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2d7c0     3D A9 0A F2 | 	cmp	local02, result1 wz
2d7c4     08 00 90 AD |  if_e	jmp	#LR__4812
2d7c8                 | LR__4811
2d7c8                 | ' 				return 0;
2d7c8     00 7A 06 F6 | 	mov	result1, #0
2d7cc     44 00 90 FD | 	jmp	#LR__4816
2d7d0                 | LR__4812
2d7d0     58 AB 02 F6 | 	mov	local03, local06
2d7d4     14 00 90 FD | 	jmp	#LR__4814
2d7d8                 | LR__4813
2d7d8     58 B1 32 F9 | 	getword	local06, local06, #0
2d7dc     7F 00 00 FF 
2d7e0     FF B1 0E F2 | 	cmp	local06, ##65535 wz
2d7e4     00 7A 06 56 |  if_ne	mov	result1, #0
2d7e8     28 00 90 5D |  if_ne	jmp	#LR__4816
2d7ec                 | LR__4814
2d7ec     01 AC 06 F1 | 	add	local04, #1
2d7f0     64 FF 9F FD | 	jmp	#LR__4810
2d7f4                 | LR__4815
2d7f4     4A A9 C2 FA | 	rdbyte	local02, arg02
2d7f8     40 A8 CE F7 | 	test	local02, #64 wz
2d7fc     00 AA 0E 52 |  if_ne	cmp	local03, #0 wz
2d800     01 AE 66 50 |  if_ne	shl	local05, #1
2d804     53 AF 02 51 |  if_ne	add	local05, local01
2d808     57 B3 EA 5A |  if_ne	rdword	local07, local05 wz
2d80c     00 7A 06 56 |  if_ne	mov	result1, #0
2d810                 | ' 
2d810                 | ' 	return 1;
2d810     01 7A 06 A6 |  if_e	mov	result1, #1
2d814                 | LR__4816
2d814     E7 F0 03 F6 | 	mov	ptra, fp
2d818     F2 00 A0 FD | 	call	#popregs_
2d81c                 | _fatfs_cc_cmp_lfn_ret
2d81c     2D 00 64 FD | 	ret
2d820                 | 
2d820                 | _fatfs_cc_pick_lfn
2d820     49 81 02 F6 | 	mov	_var01, arg01
2d824     4A 93 02 F6 | 	mov	arg01, arg02
2d828     1A 92 06 F1 | 	add	arg01, #26
2d82c                 | ' {
2d82c                 | ' 
2d82c                 | ' 	return *((WORD*)ptr);
2d82c     49 7B EA FA | 	rdword	result1, arg01 wz
2d830     00 7A 06 56 |  if_ne	mov	result1, #0
2d834     CC 00 90 5D |  if_ne	jmp	#LR__4825
2d838     4A 83 C2 FA | 	rdbyte	_var02, arg02
2d83c     40 82 26 F5 | 	andn	_var02, #64
2d840     01 82 86 F1 | 	sub	_var02, #1
2d844     0D 82 06 FD | 	qmul	_var02, #13
2d848                 | ' 
2d848                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
2d848                 | ' 
2d848                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2d848     01 84 06 F6 | 	mov	_var03, #1
2d84c     00 86 06 F6 | 	mov	_var04, #0
2d850     18 88 62 FD | 	getqx	_var05
2d854                 | LR__4820
2d854     0D 86 16 F2 | 	cmp	_var04, #13 wc
2d858     78 00 90 3D |  if_ae	jmp	#LR__4823
2d85c     4A 93 02 F6 | 	mov	arg01, arg02
2d860     43 83 02 F6 | 	mov	_var02, _var04
2d864     37 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
2d868     01 00 00 FF 
2d86c     AE 7B 06 F1 | 	add	result1, ##942
2d870     3D 83 02 F1 | 	add	_var02, result1
2d874     41 83 C2 FA | 	rdbyte	_var02, _var02
2d878     41 93 02 F1 | 	add	arg01, _var02
2d87c                 | ' {
2d87c                 | ' 
2d87c                 | ' 	return *((WORD*)ptr);
2d87c     49 7B E2 FA | 	rdword	result1, arg01
2d880     3D 8B 02 F6 | 	mov	_var06, result1
2d884     42 83 02 F6 | 	mov	_var02, _var03
2d888     0F 82 4E F7 | 	zerox	_var02, #15 wz
2d88c     28 00 90 AD |  if_e	jmp	#LR__4821
2d890     00 89 16 F2 | 	cmp	_var05, #256 wc
2d894     00 7A 06 36 |  if_ae	mov	result1, #0
2d898     68 00 90 3D |  if_ae	jmp	#LR__4825
2d89c     44 83 02 F6 | 	mov	_var02, _var05
2d8a0     01 82 66 F0 | 	shl	_var02, #1
2d8a4     40 83 02 F1 | 	add	_var02, _var01
2d8a8     45 85 02 F6 | 	mov	_var03, _var06
2d8ac     41 85 52 FC | 	wrword	_var03, _var02
2d8b0     01 88 06 F1 | 	add	_var05, #1
2d8b4     14 00 90 FD | 	jmp	#LR__4822
2d8b8                 | LR__4821
2d8b8     45 8B 32 F9 | 	getword	_var06, _var06, #0
2d8bc     7F 00 00 FF 
2d8c0     FF 8B 0E F2 | 	cmp	_var06, ##65535 wz
2d8c4     00 7A 06 56 |  if_ne	mov	result1, #0
2d8c8     38 00 90 5D |  if_ne	jmp	#LR__4825
2d8cc                 | LR__4822
2d8cc     01 86 06 F1 | 	add	_var04, #1
2d8d0     80 FF 9F FD | 	jmp	#LR__4820
2d8d4                 | LR__4823
2d8d4     4A 83 C2 FA | 	rdbyte	_var02, arg02
2d8d8     40 82 CE F7 | 	test	_var02, #64 wz
2d8dc     42 8D 02 56 |  if_ne	mov	_var07, _var03
2d8e0     0F 8C 4E 57 |  if_ne	zerox	_var07, #15 wz
2d8e4     18 00 90 AD |  if_e	jmp	#LR__4824
2d8e8     00 89 16 F2 | 	cmp	_var05, #256 wc
2d8ec     00 7A 06 36 |  if_ae	mov	result1, #0
2d8f0     10 00 90 3D |  if_ae	jmp	#LR__4825
2d8f4     01 88 66 F0 | 	shl	_var05, #1
2d8f8     40 89 02 F1 | 	add	_var05, _var01
2d8fc     44 01 58 FC | 	wrword	#0, _var05
2d900                 | LR__4824
2d900                 | ' 		lfnbuf[i] = 0;
2d900                 | ' 	}
2d900                 | ' 
2d900                 | ' 	return 1;
2d900     01 7A 06 F6 | 	mov	result1, #1
2d904                 | LR__4825
2d904                 | _fatfs_cc_pick_lfn_ret
2d904     2D 00 64 FD | 	ret
2d908                 | 
2d908                 | _fatfs_cc_put_lfn
2d908     4A 81 02 F6 | 	mov	_var01, arg02
2d90c     0D 80 06 F1 | 	add	_var01, #13
2d910     40 99 42 FC | 	wrbyte	arg04, _var01
2d914     4B 99 E2 F8 | 	getbyte	arg04, arg03, #0
2d918     01 98 86 F1 | 	sub	arg04, #1
2d91c     0D 98 06 FD | 	qmul	arg04, #13
2d920     49 83 02 F6 | 	mov	_var02, arg01
2d924     02 80 86 F1 | 	sub	_var01, #2
2d928     40 1F 48 FC | 	wrbyte	#15, _var01
2d92c     01 80 06 F1 | 	add	_var01, #1
2d930     40 01 48 FC | 	wrbyte	#0, _var01
2d934     0C 80 86 F1 | 	sub	_var01, #12
2d938     40 93 02 F6 | 	mov	arg01, _var01
2d93c     1A 92 06 F1 | 	add	arg01, #26
2d940     49 01 58 FC | 	wrword	#0, arg01
2d944     00 84 06 F6 | 	mov	_var03, #0
2d948     00 86 06 F6 | 	mov	_var04, #0
2d94c                 | ' 	BYTE* dir,
2d94c                 | ' 	BYTE ord,
2d94c                 | ' 	BYTE sum
2d94c                 | ' )
2d94c                 | ' {
2d94c                 | ' 	UINT i, s;
2d94c                 | ' 	WCHAR wc;
2d94c                 | ' 
2d94c                 | ' 
2d94c                 | ' 	dir[ 13 ] = sum;
2d94c                 | ' 	dir[ 11 ] =  0x0F ;
2d94c                 | ' 	dir[ 12 ] = 0;
2d94c                 | ' 	st_word(dir +  26 , 0);
2d94c                 | ' 
2d94c                 | ' 	i = (ord - 1) * 13;
2d94c                 | ' 	s = wc = 0;
2d94c                 | ' 	do {
2d94c     18 88 62 FD | 	getqx	_var05
2d950     D7 2E 48 FB | 	callpa	#(@LR__4831-@LR__4830)>>2,fcache_load_ptr_
2d954                 | LR__4830
2d954     42 99 32 F9 | 	getword	arg04, _var03, #0
2d958     7F 00 00 FF 
2d95c     FF 99 0E F2 | 	cmp	arg04, ##65535 wz
2d960     44 93 02 56 |  if_ne	mov	arg01, _var05
2d964     01 88 06 51 |  if_ne	add	_var05, #1
2d968     01 92 66 50 |  if_ne	shl	arg01, #1
2d96c     41 93 02 51 |  if_ne	add	arg01, _var02
2d970     49 85 E2 5A |  if_ne	rdword	_var03, arg01
2d974     40 93 02 F6 | 	mov	arg01, _var01
2d978     43 99 02 F6 | 	mov	arg04, _var04
2d97c     37 95 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
2d980     01 00 00 FF 
2d984     AE 95 06 F1 | 	add	arg02, ##942
2d988     4A 99 02 F1 | 	add	arg04, arg02
2d98c     4C 99 C2 FA | 	rdbyte	arg04, arg04
2d990     4C 93 02 F1 | 	add	arg01, arg04
2d994     49 85 52 FC | 	wrword	_var03, arg01
2d998     42 99 02 F6 | 	mov	arg04, _var03
2d99c     0F 98 4E F7 | 	zerox	arg04, #15 wz
2d9a0     0F 84 CE A9 |  if_e	bmask	_var03, #15
2d9a4     01 86 06 F1 | 	add	_var04, #1
2d9a8     0D 86 16 F2 | 	cmp	_var04, #13 wc
2d9ac     A4 FF 9F CD |  if_b	jmp	#LR__4830
2d9b0                 | LR__4831
2d9b0     42 85 32 F9 | 	getword	_var03, _var03, #0
2d9b4     7F 00 00 FF 
2d9b8     FF 85 0E F2 | 	cmp	_var03, ##65535 wz
2d9bc     01 88 66 50 |  if_ne	shl	_var05, #1
2d9c0     41 89 02 51 |  if_ne	add	_var05, _var02
2d9c4     44 89 EA 5A |  if_ne	rdword	_var05, _var05 wz
2d9c8     4B 97 E2 A8 |  if_e	getbyte	arg03, arg03, #0
2d9cc     40 96 46 A5 |  if_e	or	arg03, #64
2d9d0     40 97 42 FC | 	wrbyte	arg03, _var01
2d9d4                 | _fatfs_cc_put_lfn_ret
2d9d4     2D 00 64 FD | 	ret
2d9d8                 | 
2d9d8                 | _fatfs_cc_gen_numname
2d9d8     08 CA 05 F6 | 	mov	COUNT_, #8
2d9dc     E8 00 A0 FD | 	call	#pushregs_
2d9e0     2C F0 07 F1 | 	add	ptra, #44
2d9e4     49 A7 02 F6 | 	mov	local01, arg01
2d9e8     4A A9 02 F6 | 	mov	local02, arg02
2d9ec     4B AB 02 F6 | 	mov	local03, arg03
2d9f0     4C AD 02 F6 | 	mov	local04, arg04
2d9f4     53 93 02 F6 | 	mov	arg01, local01
2d9f8     54 95 02 F6 | 	mov	arg02, local02
2d9fc     0B 96 06 F6 | 	mov	arg03, #11
2da00     84 6E BF FD | 	call	#__system____builtin_memmove
2da04     06 AC 16 F2 | 	cmp	local04, #6 wc
2da08     48 00 90 CD |  if_b	jmp	#LR__4845
2da0c     56 AF 02 F6 | 	mov	local05, local04
2da10     D7 1E 48 FB | 	callpa	#(@LR__4843-@LR__4840)>>2,fcache_load_ptr_
2da14                 | ' 		sreg = seq;
2da14                 | ' 		while (*lfn) {
2da14                 | LR__4840
2da14     55 B1 EA FA | 	rdword	local06, local03 wz
2da18     34 00 90 AD |  if_e	jmp	#LR__4844
2da1c     55 B3 E2 FA | 	rdword	local07, local03
2da20                 | ' 			wc = *lfn++;
2da20                 | ' 			for (i = 0; i < 16; i++) {
2da20     02 AA 06 F1 | 	add	local03, #2
2da24     10 12 DC FC | 	rep	@LR__4842, #16
2da28                 | LR__4841
2da28     01 AE 66 F0 | 	shl	local05, #1
2da2c     59 B1 32 F9 | 	getword	local06, local07, #0
2da30     01 B0 06 F5 | 	and	local06, #1
2da34     58 AF 02 F1 | 	add	local05, local06
2da38     59 B3 32 F9 | 	getword	local07, local07, #0
2da3c     01 B2 46 F0 | 	shr	local07, #1
2da40     10 AE 2E F4 | 	testbn	local05, #16 wz
2da44     88 00 00 5F 
2da48     21 AE 66 55 |  if_ne	xor	local05, ##69665
2da4c                 | LR__4842
2da4c     C4 FF 9F FD | 	jmp	#LR__4840
2da50                 | LR__4843
2da50                 | LR__4844
2da50     57 AD 02 F6 | 	mov	local04, local05
2da54                 | LR__4845
2da54     07 B2 06 F6 | 	mov	local07, #7
2da58     D7 1E 48 FB | 	callpa	#(@LR__4847-@LR__4846)>>2,fcache_load_ptr_
2da5c                 | ' 			}
2da5c                 | ' 		}
2da5c                 | ' 		seq = (UINT)sreg;
2da5c                 | ' 	}
2da5c                 | ' 
2da5c                 | ' 
2da5c                 | ' 	i = 7;
2da5c                 | ' 	do {
2da5c                 | LR__4846
2da5c     56 AF 42 F8 | 	getnib	local05, local04, #0
2da60     30 AE 06 F1 | 	add	local05, #48
2da64     04 AC 46 F0 | 	shr	local04, #4
2da68     57 B1 E2 F8 | 	getbyte	local06, local05, #0
2da6c     3A B0 16 F2 | 	cmp	local06, #58 wc
2da70     57 AF E2 38 |  if_ae	getbyte	local05, local05, #0
2da74     07 AE 06 31 |  if_ae	add	local05, #7
2da78     59 B1 02 F6 | 	mov	local06, local07
2da7c     01 B2 8E F1 | 	sub	local07, #1 wz
2da80     E7 AA 02 F6 | 	mov	local03, fp
2da84     10 AA 06 F1 | 	add	local03, #16
2da88     55 B1 02 F1 | 	add	local06, local03
2da8c     58 AF 42 FC | 	wrbyte	local05, local06
2da90     00 AC 0E 52 |  if_ne	cmp	local04, #0 wz
2da94     C4 FF 9F 5D |  if_ne	jmp	#LR__4846
2da98                 | LR__4847
2da98     59 B1 02 F6 | 	mov	local06, local07
2da9c     E7 AE 02 F6 | 	mov	local05, fp
2daa0     10 AE 06 F1 | 	add	local05, #16
2daa4     57 B1 02 F1 | 	add	local06, local05
2daa8     58 FD 48 FC | 	wrbyte	#126, local06
2daac                 | ' 	ns[i] = '~';
2daac                 | ' 
2daac                 | ' 
2daac                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
2daac     00 AC 06 F6 | 	mov	local04, #0
2dab0     D7 2A 48 FB | 	callpa	#(@LR__4850-@LR__4848)>>2,fcache_load_ptr_
2dab4                 | LR__4848
2dab4     59 AD 12 F2 | 	cmp	local04, local07 wc
2dab8     4C 00 90 3D |  if_ae	jmp	#LR__4851
2dabc     56 AF 02 F6 | 	mov	local05, local04
2dac0     53 AF 02 F1 | 	add	local05, local01
2dac4     57 B1 C2 FA | 	rdbyte	local06, local05
2dac8     20 B0 0E F2 | 	cmp	local06, #32 wz
2dacc     38 00 90 AD |  if_e	jmp	#LR__4851
2dad0     56 AB 02 F6 | 	mov	local03, local04
2dad4     53 AB 02 F1 | 	add	local03, local01
2dad8     55 93 CA FA | 	rdbyte	arg01, local03 wz
2dadc     00 7A 06 56 |  if_ne	mov	result1, #0
2dae0                 | ' 
2dae0                 | ' 	return 0;
2dae0     00 7A 06 A6 |  if_e	mov	result1, #0
2dae4     00 7A 0E F2 | 	cmp	result1, #0 wz
2dae8     14 00 90 AD |  if_e	jmp	#LR__4849
2daec     59 AB 02 F6 | 	mov	local03, local07
2daf0     01 AA 86 F1 | 	sub	local03, #1
2daf4     55 AD 0A F2 | 	cmp	local04, local03 wz
2daf8     0C 00 90 AD |  if_e	jmp	#LR__4851
2dafc     01 AC 06 F1 | 	add	local04, #1
2db00                 | LR__4849
2db00     01 AC 06 F1 | 	add	local04, #1
2db04     AC FF 9F FD | 	jmp	#LR__4848
2db08                 | LR__4850
2db08                 | LR__4851
2db08     D7 20 48 FB | 	callpa	#(@LR__4855-@LR__4852)>>2,fcache_load_ptr_
2db0c                 | ' 			j++;
2db0c                 | ' 		}
2db0c                 | ' 	}
2db0c                 | ' 	do {
2db0c                 | LR__4852
2db0c     56 B1 02 F6 | 	mov	local06, local04
2db10     53 B1 02 F1 | 	add	local06, local01
2db14     08 B2 16 F2 | 	cmp	local07, #8 wc
2db18     01 AC 06 F1 | 	add	local04, #1
2db1c     1C 00 90 3D |  if_ae	jmp	#LR__4853
2db20     59 AF 02 F6 | 	mov	local05, local07
2db24     E7 AA 02 F6 | 	mov	local03, fp
2db28     10 AA 06 F1 | 	add	local03, #16
2db2c     55 AF 02 F1 | 	add	local05, local03
2db30     57 B5 C2 FA | 	rdbyte	local08, local05
2db34     01 B2 06 F1 | 	add	local07, #1
2db38     04 00 90 FD | 	jmp	#LR__4854
2db3c                 | LR__4853
2db3c     20 B4 06 F6 | 	mov	local08, #32
2db40                 | LR__4854
2db40     58 B5 42 FC | 	wrbyte	local08, local06
2db44     08 AC 16 F2 | 	cmp	local04, #8 wc
2db48     C0 FF 9F CD |  if_b	jmp	#LR__4852
2db4c                 | LR__4855
2db4c     E7 F0 03 F6 | 	mov	ptra, fp
2db50     F2 00 A0 FD | 	call	#popregs_
2db54                 | _fatfs_cc_gen_numname_ret
2db54     2D 00 64 FD | 	ret
2db58                 | 
2db58                 | _fatfs_cc_sum_sfn
2db58     00 80 06 F6 | 	mov	_var01, #0
2db5c                 | ' )
2db5c                 | ' {
2db5c                 | ' 	BYTE sum = 0;
2db5c                 | ' 	UINT n = 11;
2db5c                 | ' 
2db5c                 | ' 	do {
2db5c     D7 12 48 FB | 	callpa	#(@LR__4862-@LR__4860)>>2,fcache_load_ptr_
2db60                 | LR__4860
2db60     0B 10 DC FC | 	rep	@LR__4863, #11
2db64                 | LR__4861
2db64     40 7B E2 F8 | 	getbyte	result1, _var01, #0
2db68     01 7A 46 F0 | 	shr	result1, #1
2db6c     40 81 E2 F8 | 	getbyte	_var01, _var01, #0
2db70     07 80 66 F0 | 	shl	_var01, #7
2db74     40 7B 02 F1 | 	add	result1, _var01
2db78     49 81 C2 FA | 	rdbyte	_var01, arg01
2db7c     3D 81 02 F1 | 	add	_var01, result1
2db80     01 92 06 F1 | 	add	arg01, #1
2db84                 | LR__4862
2db84                 | LR__4863
2db84                 | ' 	return sum;
2db84     40 7B 02 F6 | 	mov	result1, _var01
2db88                 | _fatfs_cc_sum_sfn_ret
2db88     2D 00 64 FD | 	ret
2db8c                 | 
2db8c                 | _fatfs_cc_dir_read
2db8c     0C CA 05 F6 | 	mov	COUNT_, #12
2db90     E8 00 A0 FD | 	call	#pushregs_
2db94     49 A7 02 F6 | 	mov	local01, arg01
2db98     4A A9 02 F6 | 	mov	local02, arg02
2db9c     04 AA 06 F6 | 	mov	local03, #4
2dba0     53 AD 02 FB | 	rdlong	local04, local01
2dba4     FF AE 06 F6 | 	mov	local05, #255
2dba8     FF B0 06 F6 | 	mov	local06, #255
2dbac                 | ' )
2dbac                 | ' {
2dbac                 | ' 	FRESULT res = FR_NO_FILE;
2dbac                 | ' 	FATFS *fs = dp->obj.fs;
2dbac                 | ' 	BYTE attr, b;
2dbac                 | ' 
2dbac                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
2dbac                 | ' 
2dbac                 | ' 
2dbac                 | ' 	while (dp->sect) {
2dbac                 | LR__4870
2dbac     18 A6 06 F1 | 	add	local01, #24
2dbb0     53 7B 0A FB | 	rdlong	result1, local01 wz
2dbb4     18 A6 86 F1 | 	sub	local01, #24
2dbb8     AC 01 90 AD |  if_e	jmp	#LR__4880
2dbbc     18 A6 06 F1 | 	add	local01, #24
2dbc0     53 95 02 FB | 	rdlong	arg02, local01
2dbc4     18 A6 86 F1 | 	sub	local01, #24
2dbc8     56 93 02 F6 | 	mov	arg01, local04
2dbcc     B8 ED BF FD | 	call	#_fatfs_cc_move_window
2dbd0     3D AB 0A F6 | 	mov	local03, result1 wz
2dbd4     90 01 90 5D |  if_ne	jmp	#LR__4880
2dbd8     1C A6 06 F1 | 	add	local01, #28
2dbdc     53 7B 02 FB | 	rdlong	result1, local01
2dbe0     1C A6 86 F1 | 	sub	local01, #28
2dbe4     3D B3 C2 FA | 	rdbyte	local07, result1
2dbe8     59 7B 02 F6 | 	mov	result1, local07
2dbec     07 7A 4E F7 | 	zerox	result1, #7 wz
2dbf0     04 AA 06 A6 |  if_e	mov	local03, #4
2dbf4                 | ' 			res = FR_NO_FILE; break;
2dbf4     70 01 90 AD |  if_e	jmp	#LR__4880
2dbf8     1C A6 06 F1 | 	add	local01, #28
2dbfc     53 B5 02 FB | 	rdlong	local08, local01
2dc00     0B B4 06 F1 | 	add	local08, #11
2dc04     5A B7 C2 FA | 	rdbyte	local09, local08
2dc08     3F B6 06 F5 | 	and	local09, #63
2dc0c     16 A6 86 F1 | 	sub	local01, #22
2dc10     53 B7 42 FC | 	wrbyte	local09, local01
2dc14     06 A6 86 F1 | 	sub	local01, #6
2dc18     59 7B E2 F8 | 	getbyte	result1, local07, #0
2dc1c     E5 7A 0E F2 | 	cmp	result1, #229 wz
2dc20     59 B5 02 56 |  if_ne	mov	local08, local07
2dc24     5A B5 E2 58 |  if_ne	getbyte	local08, local08, #0
2dc28     2E B4 0E 52 |  if_ne	cmp	local08, #46 wz
2dc2c     1C 00 90 AD |  if_e	jmp	#LR__4871
2dc30     00 B8 06 F6 | 	mov	local10, #0
2dc34     5B B5 E2 F8 | 	getbyte	local08, local09, #0
2dc38     20 B4 26 F5 | 	andn	local08, #32
2dc3c     08 B4 0E F2 | 	cmp	local08, #8 wz
2dc40     01 B8 06 A6 |  if_e	mov	local10, #1
2dc44     54 B9 0A F2 | 	cmp	local10, local02 wz
2dc48     08 00 90 AD |  if_e	jmp	#LR__4872
2dc4c                 | LR__4871
2dc4c     FF AE 06 F6 | 	mov	local05, #255
2dc50     00 01 90 FD | 	jmp	#LR__4879
2dc54                 | LR__4872
2dc54     5B B7 E2 F8 | 	getbyte	local09, local09, #0
2dc58     0F B6 0E F2 | 	cmp	local09, #15 wz
2dc5c     B4 00 90 5D |  if_ne	jmp	#LR__4876
2dc60     59 BB E2 F8 | 	getbyte	local11, local07, #0
2dc64     40 BA CE F7 | 	test	local11, #64 wz
2dc68     30 00 90 AD |  if_e	jmp	#LR__4873
2dc6c     1C A6 06 F1 | 	add	local01, #28
2dc70     53 BB 02 FB | 	rdlong	local11, local01
2dc74     0D BA 06 F1 | 	add	local11, #13
2dc78     5D B1 C2 FA | 	rdbyte	local06, local11
2dc7c     59 B3 E2 F8 | 	getbyte	local07, local07, #0
2dc80     BF B2 06 F5 | 	and	local07, #191
2dc84     59 AF 02 F6 | 	mov	local05, local07
2dc88     0C A6 86 F1 | 	sub	local01, #12
2dc8c     53 BB 02 FB | 	rdlong	local11, local01
2dc90     1C A6 06 F1 | 	add	local01, #28
2dc94     53 BB 62 FC | 	wrlong	local11, local01
2dc98     2C A6 86 F1 | 	sub	local01, #44
2dc9c                 | LR__4873
2dc9c     59 B5 E2 F8 | 	getbyte	local08, local07, #0
2dca0     57 B9 E2 F8 | 	getbyte	local10, local05, #0
2dca4     5C B5 0A F2 | 	cmp	local08, local10 wz
2dca8     5C 00 90 5D |  if_ne	jmp	#LR__4874
2dcac     58 B9 E2 F8 | 	getbyte	local10, local06, #0
2dcb0     1C A6 06 F1 | 	add	local01, #28
2dcb4     53 B7 02 FB | 	rdlong	local09, local01
2dcb8     1C A6 86 F1 | 	sub	local01, #28
2dcbc     0D B6 06 F1 | 	add	local09, #13
2dcc0     5B B5 C2 FA | 	rdbyte	local08, local09
2dcc4     5A B7 E2 F8 | 	getbyte	local09, local08, #0
2dcc8     5B B9 0A F2 | 	cmp	local10, local09 wz
2dccc     38 00 90 5D |  if_ne	jmp	#LR__4874
2dcd0     0C AC 06 F1 | 	add	local04, #12
2dcd4     56 93 02 FB | 	rdlong	arg01, local04
2dcd8     0C AC 86 F1 | 	sub	local04, #12
2dcdc     1C A6 06 F1 | 	add	local01, #28
2dce0     53 BD 02 FB | 	rdlong	local12, local01
2dce4     1C A6 86 F1 | 	sub	local01, #28
2dce8     5E 95 02 F6 | 	mov	arg02, local12
2dcec     30 FB BF FD | 	call	#_fatfs_cc_pick_lfn
2dcf0     00 7A 4E F2 | 	cmps	result1, #0 wz
2dcf4     57 BD 02 56 |  if_ne	mov	local12, local05
2dcf8     5E BD E2 58 |  if_ne	getbyte	local12, local12, #0
2dcfc     01 BC 86 51 |  if_ne	sub	local12, #1
2dd00     5E BB 02 56 |  if_ne	mov	local11, local12
2dd04     04 00 90 5D |  if_ne	jmp	#LR__4875
2dd08                 | LR__4874
2dd08     FF BA 06 F6 | 	mov	local11, #255
2dd0c                 | LR__4875
2dd0c     5D AF 02 F6 | 	mov	local05, local11
2dd10     40 00 90 FD | 	jmp	#LR__4878
2dd14                 | LR__4876
2dd14     57 BB 02 F6 | 	mov	local11, local05
2dd18     07 BA 4E F7 | 	zerox	local11, #7 wz
2dd1c     20 00 90 5D |  if_ne	jmp	#LR__4877
2dd20     58 B1 E2 F8 | 	getbyte	local06, local06, #0
2dd24     1C A6 06 F1 | 	add	local01, #28
2dd28     53 93 02 FB | 	rdlong	arg01, local01
2dd2c     1C A6 86 F1 | 	sub	local01, #28
2dd30     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
2dd34     3D 7B E2 F8 | 	getbyte	result1, result1, #0
2dd38     3D B1 0A F2 | 	cmp	local06, result1 wz
2dd3c     28 00 90 AD |  if_e	jmp	#LR__4880
2dd40                 | LR__4877
2dd40     2C A6 06 F1 | 	add	local01, #44
2dd44     FF FF FF FF 
2dd48     53 FF 6B FC | 	wrlong	##-1, local01
2dd4c     2C A6 86 F1 | 	sub	local01, #44
2dd50                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
2dd50                 | ' 					}
2dd50                 | ' 					break;
2dd50     14 00 90 FD | 	jmp	#LR__4880
2dd54                 | LR__4878
2dd54                 | LR__4879
2dd54     53 93 02 F6 | 	mov	arg01, local01
2dd58     00 94 06 F6 | 	mov	arg02, #0
2dd5c     F4 F6 BF FD | 	call	#_fatfs_cc_dir_next
2dd60     3D AB 0A F6 | 	mov	local03, result1 wz
2dd64     44 FE 9F AD |  if_e	jmp	#LR__4870
2dd68                 | LR__4880
2dd68     00 AA 0E F2 | 	cmp	local03, #0 wz
2dd6c     18 A6 06 51 |  if_ne	add	local01, #24
2dd70     53 01 68 5C |  if_ne	wrlong	#0, local01
2dd74                 | ' 	return res;
2dd74     55 7B 02 F6 | 	mov	result1, local03
2dd78     E7 F0 03 F6 | 	mov	ptra, fp
2dd7c     F2 00 A0 FD | 	call	#popregs_
2dd80                 | _fatfs_cc_dir_read_ret
2dd80     2D 00 64 FD | 	ret
2dd84                 | 
2dd84                 | _fatfs_cc_dir_find
2dd84     0B CA 05 F6 | 	mov	COUNT_, #11
2dd88     E8 00 A0 FD | 	call	#pushregs_
2dd8c     49 A7 02 F6 | 	mov	local01, arg01
2dd90     53 A9 02 FB | 	rdlong	local02, local01
2dd94     53 93 02 F6 | 	mov	arg01, local01
2dd98     00 94 06 F6 | 	mov	arg02, #0
2dd9c     4C F5 BF FD | 	call	#_fatfs_cc_dir_sdi
2dda0     00 7A 0E F2 | 	cmp	result1, #0 wz
2dda4     18 02 90 5D |  if_ne	jmp	#LR__4902
2dda8     FF AA 06 F6 | 	mov	local03, #255
2ddac     FF AC 06 F6 | 	mov	local04, #255
2ddb0     2C A6 06 F1 | 	add	local01, #44
2ddb4     FF FF FF FF 
2ddb8     53 FF 6B FC | 	wrlong	##-1, local01
2ddbc     2C A6 86 F1 | 	sub	local01, #44
2ddc0                 | ' #line 2404 "ff.c"
2ddc0                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
2ddc0                 | ' 
2ddc0                 | ' 	do {
2ddc0                 | LR__4890
2ddc0     18 A6 06 F1 | 	add	local01, #24
2ddc4     53 95 02 FB | 	rdlong	arg02, local01
2ddc8     18 A6 86 F1 | 	sub	local01, #24
2ddcc     54 93 02 F6 | 	mov	arg01, local02
2ddd0     B4 EB BF FD | 	call	#_fatfs_cc_move_window
2ddd4     3D AF 0A F6 | 	mov	local05, result1 wz
2ddd8     E0 01 90 5D |  if_ne	jmp	#LR__4901
2dddc     1C A6 06 F1 | 	add	local01, #28
2dde0     53 97 02 FB | 	rdlong	arg03, local01
2dde4     1C A6 86 F1 | 	sub	local01, #28
2dde8     4B B1 C2 FA | 	rdbyte	local06, arg03
2ddec     58 97 02 F6 | 	mov	arg03, local06
2ddf0     07 96 4E F7 | 	zerox	arg03, #7 wz
2ddf4     04 AE 06 A6 |  if_e	mov	local05, #4
2ddf8     C0 01 90 AD |  if_e	jmp	#LR__4901
2ddfc     1C A6 06 F1 | 	add	local01, #28
2de00     53 B3 02 FB | 	rdlong	local07, local01
2de04     59 97 02 F6 | 	mov	arg03, local07
2de08     0B 96 06 F1 | 	add	arg03, #11
2de0c     4B B5 C2 FA | 	rdbyte	local08, arg03
2de10     3F B4 06 F5 | 	and	local08, #63
2de14     16 A6 86 F1 | 	sub	local01, #22
2de18     53 B5 42 FC | 	wrbyte	local08, local01
2de1c     06 A6 86 F1 | 	sub	local01, #6
2de20     58 97 E2 F8 | 	getbyte	arg03, local06, #0
2de24     E5 96 0E F2 | 	cmp	arg03, #229 wz
2de28     18 00 90 AD |  if_e	jmp	#LR__4891
2de2c     5A 97 E2 F8 | 	getbyte	arg03, local08, #0
2de30     08 96 CE F7 | 	test	arg03, #8 wz
2de34     5A B3 02 56 |  if_ne	mov	local07, local08
2de38     59 B3 E2 58 |  if_ne	getbyte	local07, local07, #0
2de3c     0F B2 0E 52 |  if_ne	cmp	local07, #15 wz
2de40     18 00 90 AD |  if_e	jmp	#LR__4892
2de44                 | LR__4891
2de44     FF AC 06 F6 | 	mov	local04, #255
2de48     2C A6 06 F1 | 	add	local01, #44
2de4c     FF FF FF FF 
2de50     53 FF 6B FC | 	wrlong	##-1, local01
2de54     2C A6 86 F1 | 	sub	local01, #44
2de58     4C 01 90 FD | 	jmp	#LR__4900
2de5c                 | LR__4892
2de5c     5A B5 E2 F8 | 	getbyte	local08, local08, #0
2de60     0F B4 0E F2 | 	cmp	local08, #15 wz
2de64     C8 00 90 5D |  if_ne	jmp	#LR__4896
2de68     2B A6 06 F1 | 	add	local01, #43
2de6c     53 B5 C2 FA | 	rdbyte	local08, local01
2de70     2B A6 86 F1 | 	sub	local01, #43
2de74     40 B4 CE F7 | 	test	local08, #64 wz
2de78     2C 01 90 5D |  if_ne	jmp	#LR__4899
2de7c     58 B7 E2 F8 | 	getbyte	local09, local06, #0
2de80     40 B6 CE F7 | 	test	local09, #64 wz
2de84     30 00 90 AD |  if_e	jmp	#LR__4893
2de88     1C A6 06 F1 | 	add	local01, #28
2de8c     53 B7 02 FB | 	rdlong	local09, local01
2de90     0D B6 06 F1 | 	add	local09, #13
2de94     5B AB C2 FA | 	rdbyte	local03, local09
2de98     58 B1 E2 F8 | 	getbyte	local06, local06, #0
2de9c     BF B0 06 F5 | 	and	local06, #191
2dea0     58 AD 02 F6 | 	mov	local04, local06
2dea4     0C A6 86 F1 | 	sub	local01, #12
2dea8     53 B7 02 FB | 	rdlong	local09, local01
2deac     1C A6 06 F1 | 	add	local01, #28
2deb0     53 B7 62 FC | 	wrlong	local09, local01
2deb4     2C A6 86 F1 | 	sub	local01, #44
2deb8                 | LR__4893
2deb8     58 B9 E2 F8 | 	getbyte	local10, local06, #0
2debc     56 B3 E2 F8 | 	getbyte	local07, local04, #0
2dec0     59 B9 0A F2 | 	cmp	local10, local07 wz
2dec4     5C 00 90 5D |  if_ne	jmp	#LR__4894
2dec8     55 B5 E2 F8 | 	getbyte	local08, local03, #0
2decc     1C A6 06 F1 | 	add	local01, #28
2ded0     53 B3 02 FB | 	rdlong	local07, local01
2ded4     1C A6 86 F1 | 	sub	local01, #28
2ded8     0D B2 06 F1 | 	add	local07, #13
2dedc     59 B1 C2 FA | 	rdbyte	local06, local07
2dee0     58 B3 E2 F8 | 	getbyte	local07, local06, #0
2dee4     59 B5 0A F2 | 	cmp	local08, local07 wz
2dee8     38 00 90 5D |  if_ne	jmp	#LR__4894
2deec     0C A8 06 F1 | 	add	local02, #12
2def0     54 93 02 FB | 	rdlong	arg01, local02
2def4     0C A8 86 F1 | 	sub	local02, #12
2def8     1C A6 06 F1 | 	add	local01, #28
2defc     53 BB 02 FB | 	rdlong	local11, local01
2df00     1C A6 86 F1 | 	sub	local01, #28
2df04     5D 95 02 F6 | 	mov	arg02, local11
2df08     10 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
2df0c     00 7A 4E F2 | 	cmps	result1, #0 wz
2df10     56 BB 02 56 |  if_ne	mov	local11, local04
2df14     5D BB E2 58 |  if_ne	getbyte	local11, local11, #0
2df18     01 BA 86 51 |  if_ne	sub	local11, #1
2df1c     5D B7 02 56 |  if_ne	mov	local09, local11
2df20     04 00 90 5D |  if_ne	jmp	#LR__4895
2df24                 | LR__4894
2df24     FF B6 06 F6 | 	mov	local09, #255
2df28                 | LR__4895
2df28     5B AD 02 F6 | 	mov	local04, local09
2df2c     78 00 90 FD | 	jmp	#LR__4899
2df30                 | LR__4896
2df30     56 B7 02 F6 | 	mov	local09, local04
2df34     07 B6 4E F7 | 	zerox	local09, #7 wz
2df38     20 00 90 5D |  if_ne	jmp	#LR__4897
2df3c     55 B9 E2 F8 | 	getbyte	local10, local03, #0
2df40     1C A6 06 F1 | 	add	local01, #28
2df44     53 93 02 FB | 	rdlong	arg01, local01
2df48     1C A6 86 F1 | 	sub	local01, #28
2df4c     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
2df50     3D 7B E2 F8 | 	getbyte	result1, result1, #0
2df54     3D B9 0A F2 | 	cmp	local10, result1 wz
2df58     60 00 90 AD |  if_e	jmp	#LR__4901
2df5c                 | LR__4897
2df5c     2B A6 06 F1 | 	add	local01, #43
2df60     53 B7 C2 FA | 	rdbyte	local09, local01
2df64     2B A6 86 F1 | 	sub	local01, #43
2df68     01 B6 CE F7 | 	test	local09, #1 wz
2df6c     24 00 90 5D |  if_ne	jmp	#LR__4898
2df70     1C A6 06 F1 | 	add	local01, #28
2df74     53 93 02 FB | 	rdlong	arg01, local01
2df78     04 A6 06 F1 | 	add	local01, #4
2df7c     53 95 02 F6 | 	mov	arg02, local01
2df80     20 A6 86 F1 | 	sub	local01, #32
2df84     0B 96 06 F6 | 	mov	arg03, #11
2df88     B0 DE BF FD | 	call	#_fatfs_cc_memcmp
2df8c     00 7A 0E F2 | 	cmp	result1, #0 wz
2df90     28 00 90 AD |  if_e	jmp	#LR__4901
2df94                 | LR__4898
2df94     FF AC 06 F6 | 	mov	local04, #255
2df98     2C A6 06 F1 | 	add	local01, #44
2df9c     FF FF FF FF 
2dfa0     53 FF 6B FC | 	wrlong	##-1, local01
2dfa4     2C A6 86 F1 | 	sub	local01, #44
2dfa8                 | LR__4899
2dfa8                 | LR__4900
2dfa8     53 93 02 F6 | 	mov	arg01, local01
2dfac     00 94 06 F6 | 	mov	arg02, #0
2dfb0     A0 F4 BF FD | 	call	#_fatfs_cc_dir_next
2dfb4     3D AF 0A F6 | 	mov	local05, result1 wz
2dfb8     04 FE 9F AD |  if_e	jmp	#LR__4890
2dfbc                 | LR__4901
2dfbc                 | ' 
2dfbc                 | ' 	return res;
2dfbc     57 7B 02 F6 | 	mov	result1, local05
2dfc0                 | LR__4902
2dfc0     E7 F0 03 F6 | 	mov	ptra, fp
2dfc4     F2 00 A0 FD | 	call	#popregs_
2dfc8                 | _fatfs_cc_dir_find_ret
2dfc8     2D 00 64 FD | 	ret
2dfcc                 | 
2dfcc                 | _fatfs_cc_dir_register
2dfcc     09 CA 05 F6 | 	mov	COUNT_, #9
2dfd0     E8 00 A0 FD | 	call	#pushregs_
2dfd4     2C F0 07 F1 | 	add	ptra, #44
2dfd8     49 A7 02 F6 | 	mov	local01, arg01
2dfdc     53 A9 02 FB | 	rdlong	local02, local01
2dfe0     2B A6 06 F1 | 	add	local01, #43
2dfe4     53 AB C2 FA | 	rdbyte	local03, local01
2dfe8     2B A6 86 F1 | 	sub	local01, #43
2dfec     A0 AA CE F7 | 	test	local03, #160 wz
2dff0     06 7A 06 56 |  if_ne	mov	result1, #6
2dff4     2C 02 90 5D |  if_ne	jmp	#LR__4921
2dff8                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
2dff8     00 AC 06 F6 | 	mov	local04, #0
2dffc     0C A8 06 F1 | 	add	local02, #12
2e000     D7 12 48 FB | 	callpa	#(@LR__4911-@LR__4910)>>2,fcache_load_ptr_
2e004                 | LR__4910
2e004     54 AB 02 FB | 	rdlong	local03, local02
2e008     56 99 02 F6 | 	mov	arg04, local04
2e00c     01 98 66 F0 | 	shl	arg04, #1
2e010     55 99 02 F1 | 	add	arg04, local03
2e014     4C AB EA FA | 	rdword	local03, arg04 wz
2e018     56 AF 02 56 |  if_ne	mov	local05, local04
2e01c     01 AE 06 51 |  if_ne	add	local05, #1
2e020     57 AD 02 56 |  if_ne	mov	local04, local05
2e024     DC FF 9F 5D |  if_ne	jmp	#LR__4910
2e028                 | LR__4911
2e028     0C A8 86 F1 | 	sub	local02, #12
2e02c     E7 92 02 F6 | 	mov	arg01, fp
2e030     1C 92 06 F1 | 	add	arg01, #28
2e034     53 95 02 F6 | 	mov	arg02, local01
2e038     20 94 06 F1 | 	add	arg02, #32
2e03c     0C 96 06 F6 | 	mov	arg03, #12
2e040     44 68 BF FD | 	call	#__system____builtin_memmove
2e044     27 CE 05 F1 | 	add	fp, #39
2e048     E7 AA C2 FA | 	rdbyte	local03, fp
2e04c     27 CE 85 F1 | 	sub	fp, #39
2e050     01 AA CE F7 | 	test	local03, #1 wz
2e054     80 00 90 AD |  if_e	jmp	#LR__4914
2e058     2B A6 06 F1 | 	add	local01, #43
2e05c     53 81 48 FC | 	wrbyte	#64, local01
2e060     2B A6 86 F1 | 	sub	local01, #43
2e064                 | ' 		dp->fn[ 11 ] =  0x40 ;
2e064                 | ' 		for (n = 1; n < 100; n++) {
2e064     01 B0 06 F6 | 	mov	local06, #1
2e068                 | LR__4912
2e068     64 B0 16 F2 | 	cmp	local06, #100 wc
2e06c     38 00 90 3D |  if_ae	jmp	#LR__4913
2e070     53 93 02 F6 | 	mov	arg01, local01
2e074     20 92 06 F1 | 	add	arg01, #32
2e078     E7 94 02 F6 | 	mov	arg02, fp
2e07c     1C 94 06 F1 | 	add	arg02, #28
2e080     0C A8 06 F1 | 	add	local02, #12
2e084     54 97 02 FB | 	rdlong	arg03, local02
2e088     0C A8 86 F1 | 	sub	local02, #12
2e08c     58 99 02 F6 | 	mov	arg04, local06
2e090     44 F9 BF FD | 	call	#_fatfs_cc_gen_numname
2e094     53 93 02 F6 | 	mov	arg01, local01
2e098     E8 FC BF FD | 	call	#_fatfs_cc_dir_find
2e09c     3D B3 0A F6 | 	mov	local07, result1 wz
2e0a0     01 B0 06 A1 |  if_e	add	local06, #1
2e0a4     C0 FF 9F AD |  if_e	jmp	#LR__4912
2e0a8                 | LR__4913
2e0a8     64 B0 0E F2 | 	cmp	local06, #100 wz
2e0ac     07 7A 06 A6 |  if_e	mov	result1, #7
2e0b0     70 01 90 AD |  if_e	jmp	#LR__4921
2e0b4     04 B2 0E F2 | 	cmp	local07, #4 wz
2e0b8     59 7B 02 56 |  if_ne	mov	result1, local07
2e0bc     64 01 90 5D |  if_ne	jmp	#LR__4921
2e0c0     27 CE 05 F1 | 	add	fp, #39
2e0c4     E7 AA C2 FA | 	rdbyte	local03, fp
2e0c8     27 CE 85 F1 | 	sub	fp, #39
2e0cc     2B A6 06 F1 | 	add	local01, #43
2e0d0     53 AB 42 FC | 	wrbyte	local03, local01
2e0d4     2B A6 86 F1 | 	sub	local01, #43
2e0d8                 | LR__4914
2e0d8     27 CE 05 F1 | 	add	fp, #39
2e0dc     E7 B2 C2 FA | 	rdbyte	local07, fp
2e0e0     02 B2 CE F7 | 	test	local07, #2 wz
2e0e4     0C AC 06 51 |  if_ne	add	local04, #12
2e0e8     0D AC 16 5D |  if_ne	qdiv	local04, #13
2e0ec     27 CE 85 F1 | 	sub	fp, #39
2e0f0     53 93 02 F6 | 	mov	arg01, local01
2e0f4     18 AA 62 5D |  if_ne	getqx	local03
2e0f8     01 AA 06 51 |  if_ne	add	local03, #1
2e0fc     01 AA 06 A6 |  if_e	mov	local03, #1
2e100     55 B5 02 F6 | 	mov	local08, local03
2e104     5A 95 02 F6 | 	mov	arg02, local08
2e108     04 F5 BF FD | 	call	#_fatfs_cc_dir_alloc
2e10c     3D B3 0A F6 | 	mov	local07, result1 wz
2e110     9C 00 90 5D |  if_ne	jmp	#LR__4918
2e114     01 B4 8E F1 | 	sub	local08, #1 wz
2e118     94 00 90 AD |  if_e	jmp	#LR__4918
2e11c     53 93 02 F6 | 	mov	arg01, local01
2e120     5A B3 02 F6 | 	mov	local07, local08
2e124     05 B2 66 F0 | 	shl	local07, #5
2e128     10 A6 06 F1 | 	add	local01, #16
2e12c     53 95 02 FB | 	rdlong	arg02, local01
2e130     10 A6 86 F1 | 	sub	local01, #16
2e134     59 95 82 F1 | 	sub	arg02, local07
2e138     B0 F1 BF FD | 	call	#_fatfs_cc_dir_sdi
2e13c     3D B3 0A F6 | 	mov	local07, result1 wz
2e140     6C 00 90 5D |  if_ne	jmp	#LR__4917
2e144     53 93 02 F6 | 	mov	arg01, local01
2e148     20 92 06 F1 | 	add	arg01, #32
2e14c     08 FA BF FD | 	call	#_fatfs_cc_sum_sfn
2e150     3D B7 02 F6 | 	mov	local09, result1
2e154                 | ' 			sum = sum_sfn(dp->fn);
2e154                 | ' 			do {
2e154                 | LR__4915
2e154     18 A6 06 F1 | 	add	local01, #24
2e158     53 95 02 FB | 	rdlong	arg02, local01
2e15c     18 A6 86 F1 | 	sub	local01, #24
2e160     54 93 02 F6 | 	mov	arg01, local02
2e164     20 E8 BF FD | 	call	#_fatfs_cc_move_window
2e168     3D B3 0A F6 | 	mov	local07, result1 wz
2e16c     40 00 90 5D |  if_ne	jmp	#LR__4916
2e170     0C A8 06 F1 | 	add	local02, #12
2e174     54 93 02 FB | 	rdlong	arg01, local02
2e178     1C A6 06 F1 | 	add	local01, #28
2e17c     53 95 02 FB | 	rdlong	arg02, local01
2e180     1C A6 86 F1 | 	sub	local01, #28
2e184     5B 99 02 F6 | 	mov	arg04, local09
2e188     5A 97 02 F6 | 	mov	arg03, local08
2e18c     78 F7 BF FD | 	call	#_fatfs_cc_put_lfn
2e190     09 A8 86 F1 | 	sub	local02, #9
2e194     54 03 48 FC | 	wrbyte	#1, local02
2e198     03 A8 86 F1 | 	sub	local02, #3
2e19c     53 93 02 F6 | 	mov	arg01, local01
2e1a0     00 94 06 F6 | 	mov	arg02, #0
2e1a4     AC F2 BF FD | 	call	#_fatfs_cc_dir_next
2e1a8     3D B3 0A F6 | 	mov	local07, result1 wz
2e1ac     E9 B5 6E AB |  if_e	djnz	local08, #LR__4915
2e1b0                 | LR__4916
2e1b0                 | LR__4917
2e1b0                 | LR__4918
2e1b0     00 B2 0E F2 | 	cmp	local07, #0 wz
2e1b4     68 00 90 5D |  if_ne	jmp	#LR__4920
2e1b8     18 A6 06 F1 | 	add	local01, #24
2e1bc     53 95 02 FB | 	rdlong	arg02, local01
2e1c0     18 A6 86 F1 | 	sub	local01, #24
2e1c4     54 93 02 F6 | 	mov	arg01, local02
2e1c8     BC E7 BF FD | 	call	#_fatfs_cc_move_window
2e1cc     3D B3 0A F6 | 	mov	local07, result1 wz
2e1d0     4C 00 90 5D |  if_ne	jmp	#LR__4919
2e1d4     1C A6 06 F1 | 	add	local01, #28
2e1d8     53 93 02 FB | 	rdlong	arg01, local01
2e1dc     00 94 06 F6 | 	mov	arg02, #0
2e1e0     20 96 06 F6 | 	mov	arg03, #32
2e1e4     D8 00 A0 FD | 	call	#\builtin_bytefill_
2e1e8     53 93 02 FB | 	rdlong	arg01, local01
2e1ec     04 A6 06 F1 | 	add	local01, #4
2e1f0     53 95 02 F6 | 	mov	arg02, local01
2e1f4     0B 96 06 F6 | 	mov	arg03, #11
2e1f8     8C 66 BF FD | 	call	#__system____builtin_memmove
2e1fc     04 A6 86 F1 | 	sub	local01, #4
2e200     53 AB 02 FB | 	rdlong	local03, local01
2e204     0F A6 06 F1 | 	add	local01, #15
2e208     53 B7 C2 FA | 	rdbyte	local09, local01
2e20c     18 B6 06 F5 | 	and	local09, #24
2e210     0C AA 06 F1 | 	add	local03, #12
2e214     55 B7 42 FC | 	wrbyte	local09, local03
2e218     03 A8 06 F1 | 	add	local02, #3
2e21c     54 03 48 FC | 	wrbyte	#1, local02
2e220                 | LR__4919
2e220                 | LR__4920
2e220                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
2e220                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
2e220                 | ' 
2e220                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
2e220                 | ' 
2e220                 | ' 			fs->wflag = 1;
2e220                 | ' 		}
2e220                 | ' 	}
2e220                 | ' 
2e220                 | ' 	return res;
2e220     59 7B 02 F6 | 	mov	result1, local07
2e224                 | LR__4921
2e224     E7 F0 03 F6 | 	mov	ptra, fp
2e228     F2 00 A0 FD | 	call	#popregs_
2e22c                 | _fatfs_cc_dir_register_ret
2e22c     2D 00 64 FD | 	ret
2e230                 | 
2e230                 | _fatfs_cc_dir_remove
2e230     05 CA 05 F6 | 	mov	COUNT_, #5
2e234     E8 00 A0 FD | 	call	#pushregs_
2e238     49 A7 02 F6 | 	mov	local01, arg01
2e23c     53 A9 02 FB | 	rdlong	local02, local01
2e240     10 A6 06 F1 | 	add	local01, #16
2e244     53 AB 02 FB | 	rdlong	local03, local01
2e248     1C A6 06 F1 | 	add	local01, #28
2e24c     53 95 02 FB | 	rdlong	arg02, local01
2e250     2C A6 86 F1 | 	sub	local01, #44
2e254     FF FF 7F FF 
2e258     FF 95 0E F2 | 	cmp	arg02, ##-1 wz
2e25c     00 AC 06 A6 |  if_e	mov	local04, #0
2e260     18 00 90 AD |  if_e	jmp	#LR__4930
2e264     53 93 02 F6 | 	mov	arg01, local01
2e268     2C A6 06 F1 | 	add	local01, #44
2e26c     53 95 02 FB | 	rdlong	arg02, local01
2e270     2C A6 86 F1 | 	sub	local01, #44
2e274     74 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
2e278     3D AD 02 F6 | 	mov	local04, result1
2e27c                 | LR__4930
2e27c     56 AF 0A F6 | 	mov	local05, local04 wz
2e280     64 00 90 5D |  if_ne	jmp	#LR__4933
2e284                 | ' 		do {
2e284                 | LR__4931
2e284     18 A6 06 F1 | 	add	local01, #24
2e288     53 95 02 FB | 	rdlong	arg02, local01
2e28c     18 A6 86 F1 | 	sub	local01, #24
2e290     54 93 02 F6 | 	mov	arg01, local02
2e294     F0 E6 BF FD | 	call	#_fatfs_cc_move_window
2e298     3D AF 0A F6 | 	mov	local05, result1 wz
2e29c     40 00 90 5D |  if_ne	jmp	#LR__4932
2e2a0     1C A6 06 F1 | 	add	local01, #28
2e2a4     53 AD 02 FB | 	rdlong	local04, local01
2e2a8     56 CB 49 FC | 	wrbyte	#229, local04
2e2ac     03 A8 06 F1 | 	add	local02, #3
2e2b0     54 03 48 FC | 	wrbyte	#1, local02
2e2b4     03 A8 86 F1 | 	sub	local02, #3
2e2b8     0C A6 86 F1 | 	sub	local01, #12
2e2bc     53 AD 02 FB | 	rdlong	local04, local01
2e2c0     10 A6 86 F1 | 	sub	local01, #16
2e2c4     55 AD 12 F2 | 	cmp	local04, local03 wc
2e2c8     14 00 90 3D |  if_ae	jmp	#LR__4932
2e2cc     53 93 02 F6 | 	mov	arg01, local01
2e2d0     00 94 06 F6 | 	mov	arg02, #0
2e2d4     7C F1 BF FD | 	call	#_fatfs_cc_dir_next
2e2d8     3D AF 0A F6 | 	mov	local05, result1 wz
2e2dc     A4 FF 9F AD |  if_e	jmp	#LR__4931
2e2e0                 | LR__4932
2e2e0     04 AE 0E F2 | 	cmp	local05, #4 wz
2e2e4     02 AE 06 A6 |  if_e	mov	local05, #2
2e2e8                 | LR__4933
2e2e8                 | ' 	}
2e2e8                 | ' #line 2590 "ff.c"
2e2e8                 | ' 	return res;
2e2e8     57 7B 02 F6 | 	mov	result1, local05
2e2ec     E7 F0 03 F6 | 	mov	ptra, fp
2e2f0     F2 00 A0 FD | 	call	#popregs_
2e2f4                 | _fatfs_cc_dir_remove_ret
2e2f4     2D 00 64 FD | 	ret
2e2f8                 | 
2e2f8                 | _fatfs_cc_get_fileinfo
2e2f8     0C CA 05 F6 | 	mov	COUNT_, #12
2e2fc     E8 00 A0 FD | 	call	#pushregs_
2e300     49 A7 02 F6 | 	mov	local01, arg01
2e304     4A A9 02 F6 | 	mov	local02, arg02
2e308     53 AB 02 FB | 	rdlong	local03, local01
2e30c     1C A8 06 F1 | 	add	local02, #28
2e310     54 01 48 FC | 	wrbyte	#0, local02
2e314     1C A8 86 F1 | 	sub	local02, #28
2e318     18 A6 06 F1 | 	add	local01, #24
2e31c     53 AD 0A FB | 	rdlong	local04, local01 wz
2e320     18 A6 86 F1 | 	sub	local01, #24
2e324     90 03 90 AD |  if_e	jmp	#LR__4954
2e328     2C A6 06 F1 | 	add	local01, #44
2e32c     53 AD 02 FB | 	rdlong	local04, local01
2e330     2C A6 86 F1 | 	sub	local01, #44
2e334     FF FF 7F FF 
2e338     FF AD 0E F2 | 	cmp	local04, ##-1 wz
2e33c     D8 00 90 AD |  if_e	jmp	#LR__4943
2e340     00 AE 06 F6 | 	mov	local05, #0
2e344     00 B0 06 F6 | 	mov	local06, #0
2e348     00 B2 06 F6 | 	mov	local07, #0
2e34c                 | ' 			si = di = 0;
2e34c                 | ' 			hs = 0;
2e34c                 | ' 			while (fs->lfnbuf[si] != 0) {
2e34c                 | LR__4940
2e34c     0C AA 06 F1 | 	add	local03, #12
2e350     55 AD 02 FB | 	rdlong	local04, local03
2e354     0C AA 86 F1 | 	sub	local03, #12
2e358     58 B5 02 F6 | 	mov	local08, local06
2e35c     01 B4 66 F0 | 	shl	local08, #1
2e360     56 B5 02 F1 | 	add	local08, local04
2e364     5A AD EA FA | 	rdword	local04, local08 wz
2e368     90 00 90 AD |  if_e	jmp	#LR__4942
2e36c     0C AA 06 F1 | 	add	local03, #12
2e370     55 B7 02 FB | 	rdlong	local09, local03
2e374     0C AA 86 F1 | 	sub	local03, #12
2e378     58 AD 02 F6 | 	mov	local04, local06
2e37c     01 AC 66 F0 | 	shl	local04, #1
2e380     5B AD 02 F1 | 	add	local04, local09
2e384     56 B9 E2 FA | 	rdword	local10, local04
2e388     59 AD 02 F6 | 	mov	local04, local07
2e38c     0F AC 4E F7 | 	zerox	local04, #15 wz
2e390     01 B0 06 F1 | 	add	local06, #1
2e394     24 00 90 5D |  if_ne	jmp	#LR__4941
2e398     5C AD 32 F9 | 	getword	local04, local10, #0
2e39c     6C 00 00 FF 
2e3a0     00 AC 16 F2 | 	cmp	local04, ##55296 wc
2e3a4     14 00 90 CD |  if_b	jmp	#LR__4941
2e3a8     5C BB 32 F9 | 	getword	local11, local10, #0
2e3ac     70 00 00 FF 
2e3b0     00 BA 16 F2 | 	cmp	local11, ##57344 wc
2e3b4     5C B3 02 C6 |  if_b	mov	local07, local10
2e3b8                 | ' 					hs = wc; continue;
2e3b8     90 FF 9F CD |  if_b	jmp	#LR__4940
2e3bc                 | LR__4941
2e3bc     59 93 32 F9 | 	getword	arg01, local07, #0
2e3c0     10 92 66 F0 | 	shl	arg01, #16
2e3c4     5C B9 32 F9 | 	getword	local10, local10, #0
2e3c8     5C 93 42 F5 | 	or	arg01, local10
2e3cc     57 95 02 F6 | 	mov	arg02, local05
2e3d0     54 B9 02 F6 | 	mov	local10, local02
2e3d4     1C B8 06 F1 | 	add	local10, #28
2e3d8     5C 95 02 F1 | 	add	arg02, local10
2e3dc     FF 96 06 F6 | 	mov	arg03, #255
2e3e0     57 97 82 F1 | 	sub	arg03, local05
2e3e4     28 E3 BF FD | 	call	#_fatfs_cc_put_utf
2e3e8     3D B9 0A F6 | 	mov	local10, result1 wz
2e3ec     00 AE 06 A6 |  if_e	mov	local05, #0
2e3f0     5C AF 02 51 |  if_ne	add	local05, local10
2e3f4     00 B2 06 56 |  if_ne	mov	local07, #0
2e3f8     50 FF 9F 5D |  if_ne	jmp	#LR__4940
2e3fc                 | LR__4942
2e3fc     59 AD 02 F6 | 	mov	local04, local07
2e400     0F AC 4E F7 | 	zerox	local04, #15 wz
2e404     00 AE 06 56 |  if_ne	mov	local05, #0
2e408     54 B9 02 F6 | 	mov	local10, local02
2e40c     1C B8 06 F1 | 	add	local10, #28
2e410     5C AF 02 F1 | 	add	local05, local10
2e414     57 01 48 FC | 	wrbyte	#0, local05
2e418                 | LR__4943
2e418     00 AE 06 F6 | 	mov	local05, #0
2e41c     00 B0 06 F6 | 	mov	local06, #0
2e420                 | ' 			fno->fname[di] = 0;
2e420                 | ' 		}
2e420                 | ' 	}
2e420                 | ' 
2e420                 | ' 	si = di = 0;
2e420                 | ' 	while (si < 11) {
2e420                 | LR__4944
2e420     0B B0 16 F2 | 	cmp	local06, #11 wc
2e424     20 01 90 3D |  if_ae	jmp	#LR__4947
2e428     1C A6 06 F1 | 	add	local01, #28
2e42c     53 B7 02 FB | 	rdlong	local09, local01
2e430     1C A6 86 F1 | 	sub	local01, #28
2e434     58 B9 02 F6 | 	mov	local10, local06
2e438     5B B9 02 F1 | 	add	local10, local09
2e43c     5C B9 C2 FA | 	rdbyte	local10, local10
2e440     5C AD 32 F9 | 	getword	local04, local10, #0
2e444     20 AC 0E F2 | 	cmp	local04, #32 wz
2e448     01 B0 06 F1 | 	add	local06, #1
2e44c     D0 FF 9F AD |  if_e	jmp	#LR__4944
2e450     5C AD 32 F9 | 	getword	local04, local10, #0
2e454     05 AC 0E F2 | 	cmp	local04, #5 wz
2e458     E5 B8 06 A6 |  if_e	mov	local10, #229
2e45c     09 B0 0E F2 | 	cmp	local06, #9 wz
2e460     20 00 90 5D |  if_ne	jmp	#LR__4945
2e464     0C AE 16 F2 | 	cmp	local05, #12 wc
2e468     18 00 90 3D |  if_ae	jmp	#LR__4945
2e46c     57 BB 02 F6 | 	mov	local11, local05
2e470     54 B5 02 F6 | 	mov	local08, local02
2e474     0C B4 06 F1 | 	add	local08, #12
2e478     5A BB 02 F1 | 	add	local11, local08
2e47c     5D 5D 48 FC | 	wrbyte	#46, local11
2e480     01 AE 06 F1 | 	add	local05, #1
2e484                 | LR__4945
2e484     5C 93 32 F9 | 	getword	arg01, local10, #0
2e488     07 92 4E F7 | 	zerox	arg01, #7 wz
2e48c     00 7A 06 56 |  if_ne	mov	result1, #0
2e490                 | ' 
2e490                 | ' 	return 0;
2e490     00 7A 06 A6 |  if_e	mov	result1, #0
2e494     00 7A 0E F2 | 	cmp	result1, #0 wz
2e498     08 B0 0E 52 |  if_ne	cmp	local06, #8 wz
2e49c     0B B0 0E 52 |  if_ne	cmp	local06, #11 wz
2e4a0     50 00 90 AD |  if_e	jmp	#LR__4946
2e4a4     1C A6 06 F1 | 	add	local01, #28
2e4a8     53 BB 02 FB | 	rdlong	local11, local01
2e4ac     1C A6 86 F1 | 	sub	local01, #28
2e4b0     58 B5 02 F6 | 	mov	local08, local06
2e4b4     5D B5 02 F1 | 	add	local08, local11
2e4b8     5A 93 CA FA | 	rdbyte	arg01, local08 wz
2e4bc     00 7A 06 56 |  if_ne	mov	result1, #0
2e4c0                 | ' 
2e4c0                 | ' 	return 0;
2e4c0     00 7A 06 A6 |  if_e	mov	result1, #0
2e4c4     00 7A 0E F2 | 	cmp	result1, #0 wz
2e4c8     28 00 90 AD |  if_e	jmp	#LR__4946
2e4cc     5C B9 32 F9 | 	getword	local10, local10, #0
2e4d0     08 B8 66 F0 | 	shl	local10, #8
2e4d4     1C A6 06 F1 | 	add	local01, #28
2e4d8     53 BB 02 FB | 	rdlong	local11, local01
2e4dc     1C A6 86 F1 | 	sub	local01, #28
2e4e0     58 B7 02 F6 | 	mov	local09, local06
2e4e4     5D B7 02 F1 | 	add	local09, local11
2e4e8     5B BB C2 FA | 	rdbyte	local11, local09
2e4ec     5D B9 42 F5 | 	or	local10, local11
2e4f0     01 B0 06 F1 | 	add	local06, #1
2e4f4                 | LR__4946
2e4f4     5C 93 02 F6 | 	mov	arg01, local10
2e4f8     01 00 00 FF 
2e4fc     52 95 06 F6 | 	mov	arg02, ##850
2e500     24 D7 BF FD | 	call	#_fatfs_cc_ff_oem2uni
2e504     3D B9 02 F6 | 	mov	local10, result1
2e508     5C AD 02 F6 | 	mov	local04, local10
2e50c     0F AC 4E F7 | 	zerox	local04, #15 wz
2e510     00 AE 06 A6 |  if_e	mov	local05, #0
2e514     30 00 90 AD |  if_e	jmp	#LR__4947
2e518     5C 93 32 F9 | 	getword	arg01, local10, #0
2e51c     57 95 02 F6 | 	mov	arg02, local05
2e520     54 BB 02 F6 | 	mov	local11, local02
2e524     0C BA 06 F1 | 	add	local11, #12
2e528     5D 95 02 F1 | 	add	arg02, local11
2e52c     0C 96 06 F6 | 	mov	arg03, #12
2e530     57 97 82 F1 | 	sub	arg03, local05
2e534     D8 E1 BF FD | 	call	#_fatfs_cc_put_utf
2e538     3D BB 0A F6 | 	mov	local11, result1 wz
2e53c     00 AE 06 A6 |  if_e	mov	local05, #0
2e540     5D AF 02 51 |  if_ne	add	local05, local11
2e544     D8 FE 9F 5D |  if_ne	jmp	#LR__4944
2e548                 | LR__4947
2e548     57 AD 02 F6 | 	mov	local04, local05
2e54c     0C A8 06 F1 | 	add	local02, #12
2e550     54 AD 02 F1 | 	add	local04, local02
2e554     56 01 48 FC | 	wrbyte	#0, local04
2e558     10 A8 06 F1 | 	add	local02, #16
2e55c     54 AD CA FA | 	rdbyte	local04, local02 wz
2e560     1C A8 86 F1 | 	sub	local02, #28
2e564     F8 00 90 5D |  if_ne	jmp	#LR__4953
2e568     00 AE 0E F2 | 	cmp	local05, #0 wz
2e56c     1C 00 90 5D |  if_ne	jmp	#LR__4948
2e570     57 BB 02 F6 | 	mov	local11, local05
2e574     54 B9 02 F6 | 	mov	local10, local02
2e578     1C B8 06 F1 | 	add	local10, #28
2e57c     5C BB 02 F1 | 	add	local11, local10
2e580     5D 7F 48 FC | 	wrbyte	#63, local11
2e584     01 AE 06 F1 | 	add	local05, #1
2e588     A4 00 90 FD | 	jmp	#LR__4952
2e58c                 | LR__4948
2e58c                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
2e58c     00 AE 06 F6 | 	mov	local05, #0
2e590     00 B0 06 F6 | 	mov	local06, #0
2e594     08 BC 06 F6 | 	mov	local12, #8
2e598                 | LR__4949
2e598     58 AD 02 F6 | 	mov	local04, local06
2e59c     54 BB 02 F6 | 	mov	local11, local02
2e5a0     0C BA 06 F1 | 	add	local11, #12
2e5a4     5D AD 02 F1 | 	add	local04, local11
2e5a8     56 BB CA FA | 	rdbyte	local11, local04 wz
2e5ac     80 00 90 AD |  if_e	jmp	#LR__4951
2e5b0     58 B5 02 F6 | 	mov	local08, local06
2e5b4     54 BB 02 F6 | 	mov	local11, local02
2e5b8     0C BA 06 F1 | 	add	local11, #12
2e5bc     5D B5 02 F1 | 	add	local08, local11
2e5c0     5A B9 C2 FA | 	rdbyte	local10, local08
2e5c4     5C BB 32 F9 | 	getword	local11, local10, #0
2e5c8     2E BA 0E F2 | 	cmp	local11, #46 wz
2e5cc     10 BC 06 A6 |  if_e	mov	local12, #16
2e5d0     5C BB 32 F9 | 	getword	local11, local10, #0
2e5d4     41 BA 16 F2 | 	cmp	local11, #65 wc
2e5d8     30 00 90 CD |  if_b	jmp	#LR__4950
2e5dc     5C B5 32 F9 | 	getword	local08, local10, #0
2e5e0     5B B4 16 F2 | 	cmp	local08, #91 wc
2e5e4     24 00 90 3D |  if_ae	jmp	#LR__4950
2e5e8     1C A6 06 F1 | 	add	local01, #28
2e5ec     53 B7 02 FB | 	rdlong	local09, local01
2e5f0     1C A6 86 F1 | 	sub	local01, #28
2e5f4     0C B6 06 F1 | 	add	local09, #12
2e5f8     5B B7 C2 FA | 	rdbyte	local09, local09
2e5fc     5E BB E2 F8 | 	getbyte	local11, local12, #0
2e600     5D B7 CA F7 | 	test	local09, local11 wz
2e604     5C B9 32 59 |  if_ne	getword	local10, local10, #0
2e608     20 B8 06 51 |  if_ne	add	local10, #32
2e60c                 | LR__4950
2e60c     57 BB 02 F6 | 	mov	local11, local05
2e610     54 B5 02 F6 | 	mov	local08, local02
2e614     1C B4 06 F1 | 	add	local08, #28
2e618     5A BB 02 F1 | 	add	local11, local08
2e61c     5C B9 32 F9 | 	getword	local10, local10, #0
2e620     5D B9 42 FC | 	wrbyte	local10, local11
2e624     01 B0 06 F1 | 	add	local06, #1
2e628     01 AE 06 F1 | 	add	local05, #1
2e62c     68 FF 9F FD | 	jmp	#LR__4949
2e630                 | LR__4951
2e630                 | LR__4952
2e630     54 BD 02 F6 | 	mov	local12, local02
2e634     1C BC 06 F1 | 	add	local12, #28
2e638     5E AF 02 F1 | 	add	local05, local12
2e63c     57 01 48 FC | 	wrbyte	#0, local05
2e640     1C A6 06 F1 | 	add	local01, #28
2e644     53 AD 02 FB | 	rdlong	local04, local01
2e648     1C A6 86 F1 | 	sub	local01, #28
2e64c     0C AC 06 F1 | 	add	local04, #12
2e650     56 BB CA FA | 	rdbyte	local11, local04 wz
2e654     0C A8 06 A1 |  if_e	add	local02, #12
2e658     54 01 48 AC |  if_e	wrbyte	#0, local02
2e65c     0C A8 86 A1 |  if_e	sub	local02, #12
2e660                 | LR__4953
2e660     1C A6 06 F1 | 	add	local01, #28
2e664     53 BD 02 FB | 	rdlong	local12, local01
2e668     0B BC 06 F1 | 	add	local12, #11
2e66c     5E AD C2 FA | 	rdbyte	local04, local12
2e670     3F AC 06 F5 | 	and	local04, #63
2e674     08 A8 06 F1 | 	add	local02, #8
2e678     54 AD 42 FC | 	wrbyte	local04, local02
2e67c     08 A8 86 F1 | 	sub	local02, #8
2e680     53 93 02 FB | 	rdlong	arg01, local01
2e684     1C 92 06 F1 | 	add	arg01, #28
2e688                 | ' {
2e688                 | ' 
2e688                 | ' 	return *((DWORD*)ptr);
2e688     49 7B 02 FB | 	rdlong	result1, arg01
2e68c     54 7B 62 FC | 	wrlong	result1, local02
2e690     53 93 02 FB | 	rdlong	arg01, local01
2e694     16 92 06 F1 | 	add	arg01, #22
2e698                 | ' {
2e698                 | ' 
2e698                 | ' 	return *((WORD*)ptr);
2e698     49 7B E2 FA | 	rdword	result1, arg01
2e69c     06 A8 06 F1 | 	add	local02, #6
2e6a0     54 7B 52 FC | 	wrword	result1, local02
2e6a4     53 93 02 FB | 	rdlong	arg01, local01
2e6a8     18 92 06 F1 | 	add	arg01, #24
2e6ac                 | ' {
2e6ac                 | ' 
2e6ac                 | ' 	return *((WORD*)ptr);
2e6ac     49 7B E2 FA | 	rdword	result1, arg01
2e6b0     02 A8 86 F1 | 	sub	local02, #2
2e6b4     54 7B 52 FC | 	wrword	result1, local02
2e6b8                 | LR__4954
2e6b8     E7 F0 03 F6 | 	mov	ptra, fp
2e6bc     F2 00 A0 FD | 	call	#popregs_
2e6c0                 | _fatfs_cc_get_fileinfo_ret
2e6c0     2D 00 64 FD | 	ret
2e6c4                 | 
2e6c4                 | _fatfs_cc_create_name
2e6c4     12 CA 05 F6 | 	mov	COUNT_, #18
2e6c8     E8 00 A0 FD | 	call	#pushregs_
2e6cc     34 F0 07 F1 | 	add	ptra, #52
2e6d0     49 A7 02 F6 | 	mov	local01, arg01
2e6d4     4A A9 02 F6 | 	mov	local02, arg02
2e6d8     54 7B 02 FB | 	rdlong	result1, local02
2e6dc     30 CE 05 F1 | 	add	fp, #48
2e6e0     E7 7A 62 FC | 	wrlong	result1, fp
2e6e4     30 CE 85 F1 | 	sub	fp, #48
2e6e8     53 AB 02 FB | 	rdlong	local03, local01
2e6ec     0C AA 06 F1 | 	add	local03, #12
2e6f0     55 AD 02 FB | 	rdlong	local04, local03
2e6f4     00 AE 06 F6 | 	mov	local05, #0
2e6f8                 | ' 
2e6f8                 | ' 
2e6f8                 | ' 
2e6f8                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
2e6f8                 | ' 	for (;;) {
2e6f8                 | LR__4960
2e6f8     E7 92 02 F6 | 	mov	arg01, fp
2e6fc     30 92 06 F1 | 	add	arg01, #48
2e700     FC DE BF FD | 	call	#_fatfs_cc_tchar2uni
2e704     3D B1 02 F6 | 	mov	local06, result1
2e708     FF FF 7F FF 
2e70c     FF B1 0E F2 | 	cmp	local06, ##-1 wz
2e710     06 7A 06 A6 |  if_e	mov	result1, #6
2e714     84 04 90 AD |  if_e	jmp	#LR__4994
2e718     80 00 00 FF 
2e71c     00 B0 16 F2 | 	cmp	local06, ##65536 wc
2e720     20 00 90 CD |  if_b	jmp	#LR__4961
2e724     57 AB 02 F6 | 	mov	local03, local05
2e728     01 AA 66 F0 | 	shl	local03, #1
2e72c     56 B3 02 F6 | 	mov	local07, local04
2e730     56 AB 02 F1 | 	add	local03, local04
2e734     58 B5 02 F6 | 	mov	local08, local06
2e738     10 B4 46 F0 | 	shr	local08, #16
2e73c     55 B5 52 FC | 	wrword	local08, local03
2e740     01 AE 06 F1 | 	add	local05, #1
2e744                 | LR__4961
2e744     58 B7 02 F6 | 	mov	local09, local06
2e748     5B AB 32 F9 | 	getword	local03, local09, #0
2e74c     20 AA 16 F2 | 	cmp	local03, #32 wc
2e750     68 00 90 CD |  if_b	jmp	#LR__4963
2e754     5B B9 32 F9 | 	getword	local10, local09, #0
2e758     2F B8 0E F2 | 	cmp	local10, #47 wz
2e75c     5B AB 02 56 |  if_ne	mov	local03, local09
2e760     55 AB 32 59 |  if_ne	getword	local03, local03, #0
2e764     5C AA 0E 52 |  if_ne	cmp	local03, #92 wz
2e768     50 00 90 AD |  if_e	jmp	#LR__4963
2e76c     5B AB 32 F9 | 	getword	local03, local09, #0
2e770     80 AA 16 F2 | 	cmp	local03, #128 wc
2e774     1C 00 90 3D |  if_ae	jmp	#LR__4962
2e778     92 01 00 FF 
2e77c     27 93 06 F6 | 	mov	arg01, ##@LR__5483
2e780     5B 95 32 F9 | 	getword	arg02, local09, #0
2e784     80 D7 BF FD | 	call	#_fatfs_cc_strchr
2e788     3D B9 0A F6 | 	mov	local10, result1 wz
2e78c     06 7A 06 56 |  if_ne	mov	result1, #6
2e790     08 04 90 5D |  if_ne	jmp	#LR__4994
2e794                 | LR__4962
2e794     FF AE 16 F2 | 	cmp	local05, #255 wc
2e798     06 7A 06 36 |  if_ae	mov	result1, #6
2e79c     FC 03 90 3D |  if_ae	jmp	#LR__4994
2e7a0     57 B1 02 F6 | 	mov	local06, local05
2e7a4     01 B0 66 F0 | 	shl	local06, #1
2e7a8     56 B3 02 F6 | 	mov	local07, local04
2e7ac     56 B1 02 F1 | 	add	local06, local04
2e7b0     58 B7 52 FC | 	wrword	local09, local06
2e7b4     01 AE 06 F1 | 	add	local05, #1
2e7b8     3C FF 9F FD | 	jmp	#LR__4960
2e7bc                 | LR__4963
2e7bc     5B AB 32 F9 | 	getword	local03, local09, #0
2e7c0     20 AA 16 F2 | 	cmp	local03, #32 wc
2e7c4     04 BA 06 C6 |  if_b	mov	local11, #4
2e7c8     68 00 90 CD |  if_b	jmp	#LR__4968
2e7cc     D7 24 48 FB | 	callpa	#(@LR__4966-@LR__4964)>>2,fcache_load_ptr_
2e7d0                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
2e7d0                 | LR__4964
2e7d0     30 CE 05 F1 | 	add	fp, #48
2e7d4     E7 B8 02 FB | 	rdlong	local10, fp
2e7d8     30 CE 85 F1 | 	sub	fp, #48
2e7dc     5C AB C2 FA | 	rdbyte	local03, local10
2e7e0     2F AA 0E F2 | 	cmp	local03, #47 wz
2e7e4     18 00 90 AD |  if_e	jmp	#LR__4965
2e7e8     30 CE 05 F1 | 	add	fp, #48
2e7ec     E7 B4 02 FB | 	rdlong	local08, fp
2e7f0     30 CE 85 F1 | 	sub	fp, #48
2e7f4     5A BB C2 FA | 	rdbyte	local11, local08
2e7f8     5C BA 0E F2 | 	cmp	local11, #92 wz
2e7fc     18 00 90 5D |  if_ne	jmp	#LR__4967
2e800                 | LR__4965
2e800     30 CE 05 F1 | 	add	fp, #48
2e804     E7 BA 02 FB | 	rdlong	local11, fp
2e808     01 BA 06 F1 | 	add	local11, #1
2e80c     E7 BA 62 FC | 	wrlong	local11, fp
2e810     30 CE 85 F1 | 	sub	fp, #48
2e814     B8 FF 9F FD | 	jmp	#LR__4964
2e818                 | LR__4966
2e818                 | LR__4967
2e818     00 BA 06 F6 | 	mov	local11, #0
2e81c     30 CE 05 F1 | 	add	fp, #48
2e820     E7 B8 02 FB | 	rdlong	local10, fp
2e824     30 CE 85 F1 | 	sub	fp, #48
2e828     5C AB C2 FA | 	rdbyte	local03, local10
2e82c     20 AA 16 F2 | 	cmp	local03, #32 wc
2e830     04 BA 06 C6 |  if_b	mov	local11, #4
2e834                 | LR__4968
2e834     30 CE 05 F1 | 	add	fp, #48
2e838     E7 AA 02 FB | 	rdlong	local03, fp
2e83c     30 CE 85 F1 | 	sub	fp, #48
2e840     54 AB 62 FC | 	wrlong	local03, local02
2e844                 | ' 	}
2e844                 | ' 	*path = p;
2e844                 | ' #line 2862 "ff.c"
2e844                 | ' 	while (di) {
2e844     00 AE 0E F2 | 	cmp	local05, #0 wz
2e848     30 00 90 AD |  if_e	jmp	#LR__4971
2e84c     D7 16 48 FB | 	callpa	#(@LR__4970-@LR__4969)>>2,fcache_load_ptr_
2e850                 | LR__4969
2e850     57 B7 02 F6 | 	mov	local09, local05
2e854     01 B6 86 F1 | 	sub	local09, #1
2e858     01 B6 66 F0 | 	shl	local09, #1
2e85c     56 B7 02 F1 | 	add	local09, local04
2e860     5B B7 E2 FA | 	rdword	local09, local09
2e864     5B AB 32 F9 | 	getword	local03, local09, #0
2e868     20 AA 0E F2 | 	cmp	local03, #32 wz
2e86c     5B B9 02 56 |  if_ne	mov	local10, local09
2e870     5C B9 32 59 |  if_ne	getword	local10, local10, #0
2e874     2E B8 0E 52 |  if_ne	cmp	local10, #46 wz
2e878     F5 AF 6E AB |  if_e	djnz	local05, #LR__4969
2e87c                 | LR__4970
2e87c                 | LR__4971
2e87c     57 B9 02 F6 | 	mov	local10, local05
2e880     01 B8 66 F0 | 	shl	local10, #1
2e884     56 B9 02 F1 | 	add	local10, local04
2e888     5C 01 58 FC | 	wrword	#0, local10
2e88c     00 AE 0E F2 | 	cmp	local05, #0 wz
2e890     06 7A 06 A6 |  if_e	mov	result1, #6
2e894     04 03 90 AD |  if_e	jmp	#LR__4994
2e898                 | ' 
2e898                 | ' 
2e898                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
2e898     00 BC 06 F6 | 	mov	local12, #0
2e89c     D7 12 48 FB | 	callpa	#(@LR__4973-@LR__4972)>>2,fcache_load_ptr_
2e8a0                 | LR__4972
2e8a0     5E B7 02 F6 | 	mov	local09, local12
2e8a4     01 B6 66 F0 | 	shl	local09, #1
2e8a8     56 B7 02 F1 | 	add	local09, local04
2e8ac     5B AB E2 FA | 	rdword	local03, local09
2e8b0     20 AA 0E F2 | 	cmp	local03, #32 wz
2e8b4     5E B5 02 A6 |  if_e	mov	local08, local12
2e8b8     01 B4 06 A1 |  if_e	add	local08, #1
2e8bc     5A BD 02 A6 |  if_e	mov	local12, local08
2e8c0     DC FF 9F AD |  if_e	jmp	#LR__4972
2e8c4                 | LR__4973
2e8c4     01 BC 16 F2 | 	cmp	local12, #1 wc
2e8c8     18 00 90 3D |  if_ae	jmp	#LR__4974
2e8cc     5E B7 02 F6 | 	mov	local09, local12
2e8d0     01 B6 66 F0 | 	shl	local09, #1
2e8d4     56 B7 02 F1 | 	add	local09, local04
2e8d8     5B AB E2 FA | 	rdword	local03, local09
2e8dc     2E AA 0E F2 | 	cmp	local03, #46 wz
2e8e0     08 00 90 5D |  if_ne	jmp	#LR__4975
2e8e4                 | LR__4974
2e8e4     5D BB E2 F8 | 	getbyte	local11, local11, #0
2e8e8     03 BA 46 F5 | 	or	local11, #3
2e8ec                 | LR__4975
2e8ec     D7 14 48 FB | 	callpa	#(@LR__4977-@LR__4976)>>2,fcache_load_ptr_
2e8f0                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
2e8f0                 | LR__4976
2e8f0     01 AE 16 F2 | 	cmp	local05, #1 wc
2e8f4     20 00 90 CD |  if_b	jmp	#LR__4978
2e8f8     57 B7 02 F6 | 	mov	local09, local05
2e8fc     01 B6 86 F1 | 	sub	local09, #1
2e900     01 B6 66 F0 | 	shl	local09, #1
2e904     56 B7 02 F1 | 	add	local09, local04
2e908     5B AB E2 FA | 	rdword	local03, local09
2e90c     2E AA 0E F2 | 	cmp	local03, #46 wz
2e910     01 AE 86 51 |  if_ne	sub	local05, #1
2e914     D8 FF 9F 5D |  if_ne	jmp	#LR__4976
2e918                 | LR__4977
2e918                 | LR__4978
2e918     53 93 02 F6 | 	mov	arg01, local01
2e91c     20 92 06 F1 | 	add	arg01, #32
2e920     20 94 06 F6 | 	mov	arg02, #32
2e924     0B 96 06 F6 | 	mov	arg03, #11
2e928     49 BF 02 F6 | 	mov	local13, arg01
2e92c     D8 00 A0 FD | 	call	#\builtin_bytefill_
2e930     5F 7B 02 F6 | 	mov	result1, local13
2e934     00 C0 06 F6 | 	mov	local14, #0
2e938     00 C2 06 F6 | 	mov	local15, #0
2e93c     08 C4 06 F6 | 	mov	local16, #8
2e940                 | ' 
2e940                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
2e940                 | ' 	i = b = 0; ni = 8;
2e940                 | ' 	for (;;) {
2e940                 | LR__4979
2e940     5E C7 02 F6 | 	mov	local17, local12
2e944     63 C9 02 F6 | 	mov	local18, local17
2e948     01 C8 66 F0 | 	shl	local18, #1
2e94c     56 B3 02 F6 | 	mov	local07, local04
2e950     56 C9 02 F1 | 	add	local18, local04
2e954     64 B7 E2 FA | 	rdword	local09, local18
2e958     5B AB 02 F6 | 	mov	local03, local09
2e95c     0F AA 4E F7 | 	zerox	local03, #15 wz
2e960     01 BC 06 F1 | 	add	local12, #1
2e964     B0 01 90 AD |  if_e	jmp	#LR__4992
2e968     5B AB 32 F9 | 	getword	local03, local09, #0
2e96c     20 AA 0E F2 | 	cmp	local03, #32 wz
2e970     14 00 90 AD |  if_e	jmp	#LR__4980
2e974     5B B9 32 F9 | 	getword	local10, local09, #0
2e978     2E B8 0E F2 | 	cmp	local10, #46 wz
2e97c     14 00 90 5D |  if_ne	jmp	#LR__4981
2e980     57 BD 0A F2 | 	cmp	local12, local05 wz
2e984     0C 00 90 AD |  if_e	jmp	#LR__4981
2e988                 | LR__4980
2e988     5D BB E2 F8 | 	getbyte	local11, local11, #0
2e98c     03 BA 46 F5 | 	or	local11, #3
2e990                 | ' 			cf |=  0x01  |  0x02 ;
2e990                 | ' 			continue;
2e990     AC FF 9F FD | 	jmp	#LR__4979
2e994                 | LR__4981
2e994     62 C3 12 F2 | 	cmp	local15, local16 wc
2e998     57 BD 0A C2 |  if_b	cmp	local12, local05 wz
2e99c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__4982
2e9a0     0B C4 0E F2 | 	cmp	local16, #11 wz
2e9a4     5D BB E2 A8 |  if_e	getbyte	local11, local11, #0
2e9a8     03 BA 46 A5 |  if_e	or	local11, #3
2e9ac                 | ' 				cf |=  0x01  |  0x02 ;
2e9ac                 | ' 				break;
2e9ac     68 01 90 AD |  if_e	jmp	#LR__4992
2e9b0     57 BD 0A F2 | 	cmp	local12, local05 wz
2e9b4     5D BB E2 58 |  if_ne	getbyte	local11, local11, #0
2e9b8     03 BA 46 55 |  if_ne	or	local11, #3
2e9bc     57 BD 1A F2 | 	cmp	local12, local05 wcz
2e9c0     54 01 90 1D |  if_a	jmp	#LR__4992
2e9c4     57 BD 02 F6 | 	mov	local12, local05
2e9c8     08 C2 06 F6 | 	mov	local15, #8
2e9cc     0B C4 06 F6 | 	mov	local16, #11
2e9d0     60 C1 E2 F8 | 	getbyte	local14, local14, #0
2e9d4     02 C0 66 F0 | 	shl	local14, #2
2e9d8                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
2e9d8                 | ' 			continue;
2e9d8     64 FF 9F FD | 	jmp	#LR__4979
2e9dc                 | LR__4982
2e9dc     5B AB 32 F9 | 	getword	local03, local09, #0
2e9e0     80 AA 16 F2 | 	cmp	local03, #128 wc
2e9e4     50 00 90 CD |  if_b	jmp	#LR__4984
2e9e8     5D BB E2 F8 | 	getbyte	local11, local11, #0
2e9ec     02 BA 46 F5 | 	or	local11, #2
2e9f0     5B 93 32 F9 | 	getword	arg01, local09, #0
2e9f4     01 00 00 FF 
2e9f8     52 B9 06 F6 | 	mov	local10, ##850
2e9fc     01 00 00 FF 
2ea00     52 95 06 F6 | 	mov	arg02, ##850
2ea04     B0 D1 BF FD | 	call	#_fatfs_cc_ff_uni2oem
2ea08     3D B7 02 F6 | 	mov	local09, result1
2ea0c     5B AB 32 F9 | 	getword	local03, local09, #0
2ea10     80 AA CE F7 | 	test	local03, #128 wz
2ea14     20 00 90 AD |  if_e	jmp	#LR__4983
2ea18     5B B9 32 F9 | 	getword	local10, local09, #0
2ea1c     7F B8 06 F5 | 	and	local10, #127
2ea20     5C C7 02 F6 | 	mov	local17, local10
2ea24     37 C9 02 F6 | 	mov	local18, ptr__fatfs_cc_dat__
2ea28     01 00 00 FF 
2ea2c     BB C9 06 F1 | 	add	local18, ##955
2ea30     64 C7 02 F1 | 	add	local17, local18
2ea34     63 B7 C2 FA | 	rdbyte	local09, local17
2ea38                 | LR__4983
2ea38                 | LR__4984
2ea38     5B AB 32 F9 | 	getword	local03, local09, #0
2ea3c     00 AB 16 F2 | 	cmp	local03, #256 wc
2ea40     40 00 90 CD |  if_b	jmp	#LR__4985
2ea44     62 AB 02 F6 | 	mov	local03, local16
2ea48     01 AA 86 F1 | 	sub	local03, #1
2ea4c     55 C3 12 F2 | 	cmp	local15, local03 wc
2ea50     5D BB E2 38 |  if_ae	getbyte	local11, local11, #0
2ea54     03 BA 46 35 |  if_ae	or	local11, #3
2ea58     62 C3 02 36 |  if_ae	mov	local15, local16
2ea5c                 | ' 				cf |=  0x01  |  0x02 ;
2ea5c                 | ' 				i = ni; continue;
2ea5c     E0 FE 9F 3D |  if_ae	jmp	#LR__4979
2ea60     61 C7 02 F6 | 	mov	local17, local15
2ea64     53 C9 02 F6 | 	mov	local18, local01
2ea68     20 C8 06 F1 | 	add	local18, #32
2ea6c     64 C7 02 F1 | 	add	local17, local18
2ea70     5B B3 32 F9 | 	getword	local07, local09, #0
2ea74     08 B2 46 F0 | 	shr	local07, #8
2ea78     63 B3 42 FC | 	wrbyte	local07, local17
2ea7c     01 C2 06 F1 | 	add	local15, #1
2ea80     74 00 90 FD | 	jmp	#LR__4991
2ea84                 | LR__4985
2ea84     5B AB 02 F6 | 	mov	local03, local09
2ea88     0F AA 4E F7 | 	zerox	local03, #15 wz
2ea8c     18 00 90 AD |  if_e	jmp	#LR__4986
2ea90     92 01 00 FF 
2ea94     30 93 06 F6 | 	mov	arg01, ##@LR__5484
2ea98     5B 95 32 F9 | 	getword	arg02, local09, #0
2ea9c     68 D4 BF FD | 	call	#_fatfs_cc_strchr
2eaa0     00 7A 0E F2 | 	cmp	result1, #0 wz
2eaa4     10 00 90 AD |  if_e	jmp	#LR__4987
2eaa8                 | LR__4986
2eaa8     5F B6 06 F6 | 	mov	local09, #95
2eaac     5D BB E2 F8 | 	getbyte	local11, local11, #0
2eab0     03 BA 46 F5 | 	or	local11, #3
2eab4     40 00 90 FD | 	jmp	#LR__4990
2eab8                 | LR__4987
2eab8     5B AB 32 F9 | 	getword	local03, local09, #0
2eabc     41 AA 16 F2 | 	cmp	local03, #65 wc
2eac0     10 00 90 CD |  if_b	jmp	#LR__4988
2eac4     5B B9 32 F9 | 	getword	local10, local09, #0
2eac8     5B B8 16 F2 | 	cmp	local10, #91 wc
2eacc     60 C1 E2 C8 |  if_b	getbyte	local14, local14, #0
2ead0     02 C0 46 C5 |  if_b	or	local14, #2
2ead4                 | LR__4988
2ead4     5B AB 32 F9 | 	getword	local03, local09, #0
2ead8     61 AA 16 F2 | 	cmp	local03, #97 wc
2eadc     18 00 90 CD |  if_b	jmp	#LR__4989
2eae0     5B B9 32 F9 | 	getword	local10, local09, #0
2eae4     7B B8 16 F2 | 	cmp	local10, #123 wc
2eae8     60 C1 E2 C8 |  if_b	getbyte	local14, local14, #0
2eaec     01 C0 46 C5 |  if_b	or	local14, #1
2eaf0     5B B7 32 C9 |  if_b	getword	local09, local09, #0
2eaf4     20 B6 86 C1 |  if_b	sub	local09, #32
2eaf8                 | LR__4989
2eaf8                 | LR__4990
2eaf8                 | LR__4991
2eaf8     61 C7 02 F6 | 	mov	local17, local15
2eafc     53 C9 02 F6 | 	mov	local18, local01
2eb00     20 C8 06 F1 | 	add	local18, #32
2eb04     64 C7 02 F1 | 	add	local17, local18
2eb08     5B B7 32 F9 | 	getword	local09, local09, #0
2eb0c     63 B7 42 FC | 	wrbyte	local09, local17
2eb10     01 C2 06 F1 | 	add	local15, #1
2eb14     28 FE 9F FD | 	jmp	#LR__4979
2eb18                 | LR__4992
2eb18     20 A6 06 F1 | 	add	local01, #32
2eb1c     53 AB C2 FA | 	rdbyte	local03, local01
2eb20     20 A6 86 F1 | 	sub	local01, #32
2eb24     E5 AA 0E F2 | 	cmp	local03, #229 wz
2eb28     20 A6 06 A1 |  if_e	add	local01, #32
2eb2c     53 0B 48 AC |  if_e	wrbyte	#5, local01
2eb30     20 A6 86 A1 |  if_e	sub	local01, #32
2eb34     08 C4 0E F2 | 	cmp	local16, #8 wz
2eb38     60 C1 E2 A8 |  if_e	getbyte	local14, local14, #0
2eb3c     02 C0 66 A0 |  if_e	shl	local14, #2
2eb40     60 AB E2 F8 | 	getbyte	local03, local14, #0
2eb44     0C AA 06 F5 | 	and	local03, #12
2eb48     0C AA 0E F2 | 	cmp	local03, #12 wz
2eb4c     60 B9 02 56 |  if_ne	mov	local10, local14
2eb50     5C B9 E2 58 |  if_ne	getbyte	local10, local10, #0
2eb54     03 B8 06 55 |  if_ne	and	local10, #3
2eb58     03 B8 0E 52 |  if_ne	cmp	local10, #3 wz
2eb5c     5D BB E2 A8 |  if_e	getbyte	local11, local11, #0
2eb60     02 BA 46 A5 |  if_e	or	local11, #2
2eb64     5D AB E2 F8 | 	getbyte	local03, local11, #0
2eb68     02 AA CE F7 | 	test	local03, #2 wz
2eb6c     20 00 90 5D |  if_ne	jmp	#LR__4993
2eb70     60 AB E2 F8 | 	getbyte	local03, local14, #0
2eb74     01 AA CE F7 | 	test	local03, #1 wz
2eb78     5D BB E2 58 |  if_ne	getbyte	local11, local11, #0
2eb7c     10 BA 46 55 |  if_ne	or	local11, #16
2eb80     60 C1 E2 F8 | 	getbyte	local14, local14, #0
2eb84     04 C0 CE F7 | 	test	local14, #4 wz
2eb88     5D BB E2 58 |  if_ne	getbyte	local11, local11, #0
2eb8c     08 BA 46 55 |  if_ne	or	local11, #8
2eb90                 | LR__4993
2eb90     2B A6 06 F1 | 	add	local01, #43
2eb94     53 BB 42 FC | 	wrbyte	local11, local01
2eb98                 | ' 	}
2eb98                 | ' 
2eb98                 | ' 	dp->fn[ 11 ] = cf;
2eb98                 | ' 
2eb98                 | ' 	return FR_OK;
2eb98     00 7A 06 F6 | 	mov	result1, #0
2eb9c                 | LR__4994
2eb9c     E7 F0 03 F6 | 	mov	ptra, fp
2eba0     F2 00 A0 FD | 	call	#popregs_
2eba4                 | _fatfs_cc_create_name_ret
2eba4     2D 00 64 FD | 	ret
2eba8                 | 
2eba8                 | _fatfs_cc_follow_path
2eba8     04 CA 05 F6 | 	mov	COUNT_, #4
2ebac     E8 00 A0 FD | 	call	#pushregs_
2ebb0     18 F0 07 F1 | 	add	ptra, #24
2ebb4     49 A7 02 F6 | 	mov	local01, arg01
2ebb8     08 CE 05 F1 | 	add	fp, #8
2ebbc     E7 94 62 FC | 	wrlong	arg02, fp
2ebc0     08 CE 85 F1 | 	sub	fp, #8
2ebc4     53 A9 02 FB | 	rdlong	local02, local01
2ebc8     D7 24 48 FB | 	callpa	#(@LR__5002-@LR__5000)>>2,fcache_load_ptr_
2ebcc                 | ' )
2ebcc                 | ' {
2ebcc                 | ' 	FRESULT res;
2ebcc                 | ' 	BYTE ns;
2ebcc                 | ' 	FATFS *fs = dp->obj.fs;
2ebcc                 | ' #line 3034 "ff.c"
2ebcc                 | ' 	{
2ebcc                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
2ebcc                 | LR__5000
2ebcc     08 CE 05 F1 | 	add	fp, #8
2ebd0     E7 7A 02 FB | 	rdlong	result1, fp
2ebd4     08 CE 85 F1 | 	sub	fp, #8
2ebd8     3D 7B C2 FA | 	rdbyte	result1, result1
2ebdc     2F 7A 0E F2 | 	cmp	result1, #47 wz
2ebe0     18 00 90 AD |  if_e	jmp	#LR__5001
2ebe4     08 CE 05 F1 | 	add	fp, #8
2ebe8     E7 7A 02 FB | 	rdlong	result1, fp
2ebec     08 CE 85 F1 | 	sub	fp, #8
2ebf0     3D 7B C2 FA | 	rdbyte	result1, result1
2ebf4     5C 7A 0E F2 | 	cmp	result1, #92 wz
2ebf8     18 00 90 5D |  if_ne	jmp	#LR__5003
2ebfc                 | LR__5001
2ebfc     08 CE 05 F1 | 	add	fp, #8
2ec00     E7 7A 02 FB | 	rdlong	result1, fp
2ec04     01 7A 06 F1 | 	add	result1, #1
2ec08     E7 7A 62 FC | 	wrlong	result1, fp
2ec0c     08 CE 85 F1 | 	sub	fp, #8
2ec10     B8 FF 9F FD | 	jmp	#LR__5000
2ec14                 | LR__5002
2ec14                 | LR__5003
2ec14     08 A6 06 F1 | 	add	local01, #8
2ec18     53 01 68 FC | 	wrlong	#0, local01
2ec1c     08 A6 86 F1 | 	sub	local01, #8
2ec20     08 CE 05 F1 | 	add	fp, #8
2ec24     E7 94 02 FB | 	rdlong	arg02, fp
2ec28     08 CE 85 F1 | 	sub	fp, #8
2ec2c     4A 95 C2 FA | 	rdbyte	arg02, arg02
2ec30     20 94 16 F2 | 	cmp	arg02, #32 wc
2ec34     20 00 90 3D |  if_ae	jmp	#LR__5004
2ec38     2B A6 06 F1 | 	add	local01, #43
2ec3c     53 01 49 FC | 	wrbyte	#128, local01
2ec40     2B A6 86 F1 | 	sub	local01, #43
2ec44     53 93 02 F6 | 	mov	arg01, local01
2ec48     00 94 06 F6 | 	mov	arg02, #0
2ec4c     9C E6 BF FD | 	call	#_fatfs_cc_dir_sdi
2ec50     3D AB 02 F6 | 	mov	local03, result1
2ec54     A0 00 90 FD | 	jmp	#LR__5008
2ec58                 | LR__5004
2ec58                 | ' 		for (;;) {
2ec58                 | LR__5005
2ec58     E7 94 02 F6 | 	mov	arg02, fp
2ec5c     08 94 06 F1 | 	add	arg02, #8
2ec60     53 93 02 F6 | 	mov	arg01, local01
2ec64     5C FA BF FD | 	call	#_fatfs_cc_create_name
2ec68     3D AB 0A F6 | 	mov	local03, result1 wz
2ec6c     88 00 90 5D |  if_ne	jmp	#LR__5007
2ec70     53 93 02 F6 | 	mov	arg01, local01
2ec74     0C F1 BF FD | 	call	#_fatfs_cc_dir_find
2ec78     3D AB 0A F6 | 	mov	local03, result1 wz
2ec7c     2B A6 06 F1 | 	add	local01, #43
2ec80     53 AD C2 FA | 	rdbyte	local04, local01
2ec84     2B A6 86 F1 | 	sub	local01, #43
2ec88     18 00 90 AD |  if_e	jmp	#LR__5006
2ec8c     04 AA 0E F2 | 	cmp	local03, #4 wz
2ec90     64 00 90 5D |  if_ne	jmp	#LR__5007
2ec94     56 AD E2 F8 | 	getbyte	local04, local04, #0
2ec98     04 AC CE F7 | 	test	local04, #4 wz
2ec9c     05 AA 06 A6 |  if_e	mov	local03, #5
2eca0                 | ' 					}
2eca0                 | ' 				}
2eca0                 | ' 				break;
2eca0     54 00 90 FD | 	jmp	#LR__5007
2eca4                 | LR__5006
2eca4     56 AD E2 F8 | 	getbyte	local04, local04, #0
2eca8     04 AC CE F7 | 	test	local04, #4 wz
2ecac     48 00 90 5D |  if_ne	jmp	#LR__5007
2ecb0     06 A6 06 F1 | 	add	local01, #6
2ecb4     53 AD C2 FA | 	rdbyte	local04, local01
2ecb8     06 A6 86 F1 | 	sub	local01, #6
2ecbc     10 AC CE F7 | 	test	local04, #16 wz
2ecc0     05 AA 06 A6 |  if_e	mov	local03, #5
2ecc4                 | ' 				res = FR_NO_PATH; break;
2ecc4     30 00 90 AD |  if_e	jmp	#LR__5007
2ecc8     54 93 02 F6 | 	mov	arg01, local02
2eccc     54 95 02 F6 | 	mov	arg02, local02
2ecd0     34 94 06 F1 | 	add	arg02, #52
2ecd4     10 A6 06 F1 | 	add	local01, #16
2ecd8     53 AD 02 FB | 	rdlong	local04, local01
2ecdc     FF AD 06 F5 | 	and	local04, #511
2ece0     56 95 02 F1 | 	add	arg02, local04
2ece4     D8 E9 BF FD | 	call	#_fatfs_cc_ld_clust
2ece8     08 A6 86 F1 | 	sub	local01, #8
2ecec     53 7B 62 FC | 	wrlong	result1, local01
2ecf0     08 A6 86 F1 | 	sub	local01, #8
2ecf4     60 FF 9F FD | 	jmp	#LR__5005
2ecf8                 | LR__5007
2ecf8                 | LR__5008
2ecf8                 | ' 			}
2ecf8                 | ' #line 3090 "ff.c"
2ecf8                 | ' 			{
2ecf8                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
2ecf8                 | ' 			}
2ecf8                 | ' 		}
2ecf8                 | ' 	}
2ecf8                 | ' 
2ecf8                 | ' 	return res;
2ecf8     55 7B 02 F6 | 	mov	result1, local03
2ecfc     E7 F0 03 F6 | 	mov	ptra, fp
2ed00     F2 00 A0 FD | 	call	#popregs_
2ed04                 | _fatfs_cc_follow_path_ret
2ed04     2D 00 64 FD | 	ret
2ed08                 | 
2ed08                 | _fatfs_cc_get_ldnumber
2ed08     01 80 66 F6 | 	neg	_var01, #1
2ed0c     49 83 0A FB | 	rdlong	_var02, arg01 wz
2ed10     41 85 02 F6 | 	mov	_var03, _var02
2ed14     01 7A 66 A6 |  if_e	neg	result1, #1
2ed18     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
2ed1c     D7 10 48 FB | 	callpa	#(@LR__5011-@LR__5010)>>2,fcache_load_ptr_
2ed20                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
2ed20                 | LR__5010
2ed20     42 87 C2 FA | 	rdbyte	_var04, _var03
2ed24     43 7B E2 F8 | 	getbyte	result1, _var04, #0
2ed28     20 7A 16 F2 | 	cmp	result1, #32 wc
2ed2c     01 84 06 F1 | 	add	_var03, #1
2ed30     43 89 02 36 |  if_ae	mov	_var05, _var04
2ed34     44 89 E2 38 |  if_ae	getbyte	_var05, _var05, #0
2ed38     3A 88 0E 32 |  if_ae	cmp	_var05, #58 wz
2ed3c     E0 FF 9F 1D |  if_a	jmp	#LR__5010
2ed40                 | LR__5011
2ed40     43 87 E2 F8 | 	getbyte	_var04, _var04, #0
2ed44     3A 86 0E F2 | 	cmp	_var04, #58 wz
2ed48     40 00 90 5D |  if_ne	jmp	#LR__5013
2ed4c     01 8A 06 F6 | 	mov	_var06, #1
2ed50     41 89 C2 FA | 	rdbyte	_var05, _var02
2ed54     30 88 16 F2 | 	cmp	_var05, #48 wc
2ed58     1C 00 90 CD |  if_b	jmp	#LR__5012
2ed5c     41 89 C2 FA | 	rdbyte	_var05, _var02
2ed60     3A 88 16 F2 | 	cmp	_var05, #58 wc
2ed64     41 8D 02 C6 |  if_b	mov	_var07, _var02
2ed68     02 8C 06 C1 |  if_b	add	_var07, #2
2ed6c     42 8D 0A C2 |  if_b	cmp	_var07, _var03 wz
2ed70     44 8B 02 86 |  if_c_and_z	mov	_var06, _var05
2ed74     30 8A 86 81 |  if_c_and_z	sub	_var06, #48
2ed78                 | LR__5012
2ed78     01 8A 56 F2 | 	cmps	_var06, #1 wc
2ed7c     45 81 02 C6 |  if_b	mov	_var01, _var06
2ed80     49 85 62 CC |  if_b	wrlong	_var03, arg01
2ed84                 | ' 			vol = i;
2ed84                 | ' 			*path = tt;
2ed84                 | ' 		}
2ed84                 | ' 		return vol;
2ed84     40 7B 02 F6 | 	mov	result1, _var01
2ed88     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
2ed8c                 | LR__5013
2ed8c                 | ' 	}
2ed8c                 | ' #line 3170 "ff.c"
2ed8c                 | ' 	vol = 0;
2ed8c                 | ' 
2ed8c                 | ' 	return vol;
2ed8c     00 7A 06 F6 | 	mov	result1, #0
2ed90                 | _fatfs_cc_get_ldnumber_ret
2ed90     2D 00 64 FD | 	ret
2ed94                 | 
2ed94                 | _fatfs_cc_check_fs
2ed94     04 CA 05 F6 | 	mov	COUNT_, #4
2ed98     E8 00 A0 FD | 	call	#pushregs_
2ed9c     49 A7 02 F6 | 	mov	local01, arg01
2eda0     03 A6 06 F1 | 	add	local01, #3
2eda4     53 01 48 FC | 	wrbyte	#0, local01
2eda8     2D A6 06 F1 | 	add	local01, #45
2edac     FF FF FF FF 
2edb0     53 FF 6B FC | 	wrlong	##-1, local01
2edb4     30 A6 86 F1 | 	sub	local01, #48
2edb8     53 93 02 F6 | 	mov	arg01, local01
2edbc     C8 DB BF FD | 	call	#_fatfs_cc_move_window
2edc0     00 7A 0E F2 | 	cmp	result1, #0 wz
2edc4     04 7A 06 56 |  if_ne	mov	result1, #4
2edc8     64 01 90 5D |  if_ne	jmp	#LR__5023
2edcc     34 A6 06 F1 | 	add	local01, #52
2edd0     53 93 02 F6 | 	mov	arg01, local01
2edd4     FE 93 06 F1 | 	add	arg01, #510
2edd8                 | ' {
2edd8                 | ' 
2edd8                 | ' 	return *((WORD*)ptr);
2edd8     49 A9 E2 FA | 	rdword	local02, arg01
2eddc     53 AB C2 FA | 	rdbyte	local03, local01
2ede0     34 A6 86 F1 | 	sub	local01, #52
2ede4     55 AD E2 F8 | 	getbyte	local04, local03, #0
2ede8     EB AC 0E F2 | 	cmp	local04, #235 wz
2edec     55 97 02 56 |  if_ne	mov	arg03, local03
2edf0     4B 97 E2 58 |  if_ne	getbyte	arg03, arg03, #0
2edf4     E9 96 0E 52 |  if_ne	cmp	arg03, #233 wz
2edf8     55 AB E2 58 |  if_ne	getbyte	local03, local03, #0
2edfc     E8 AA 0E 52 |  if_ne	cmp	local03, #232 wz
2ee00     14 01 90 5D |  if_ne	jmp	#LR__5022
2ee04     54 AD 32 F9 | 	getword	local04, local02, #0
2ee08     55 00 00 FF 
2ee0c     55 AC 0E F2 | 	cmp	local04, ##43605 wz
2ee10     24 00 90 5D |  if_ne	jmp	#LR__5020
2ee14     53 93 02 F6 | 	mov	arg01, local01
2ee18     86 92 06 F1 | 	add	arg01, #134
2ee1c     92 01 00 FF 
2ee20     37 95 06 F6 | 	mov	arg02, ##@LR__5485
2ee24     08 96 06 F6 | 	mov	arg03, #8
2ee28     10 D0 BF FD | 	call	#_fatfs_cc_memcmp
2ee2c     00 7A 0E F2 | 	cmp	result1, #0 wz
2ee30                 | ' 			return 0;
2ee30     00 7A 06 A6 |  if_e	mov	result1, #0
2ee34     F8 00 90 AD |  if_e	jmp	#LR__5023
2ee38                 | LR__5020
2ee38     34 A6 06 F1 | 	add	local01, #52
2ee3c     53 93 02 F6 | 	mov	arg01, local01
2ee40     0B 92 06 F1 | 	add	arg01, #11
2ee44                 | ' {
2ee44                 | ' 
2ee44                 | ' 	return *((WORD*)ptr);
2ee44     49 7B E2 FA | 	rdword	result1, arg01
2ee48     0D A6 06 F1 | 	add	local01, #13
2ee4c     53 AB C2 FA | 	rdbyte	local03, local01
2ee50     41 A6 86 F1 | 	sub	local01, #65
2ee54     3D AD 32 F9 | 	getword	local04, result1, #0
2ee58     3D 95 32 F9 | 	getword	arg02, result1, #0
2ee5c     01 94 86 F1 | 	sub	arg02, #1
2ee60     4A AD CA F7 | 	test	local04, arg02 wz
2ee64     B0 00 90 5D |  if_ne	jmp	#LR__5021
2ee68     3D 95 32 F9 | 	getword	arg02, result1, #0
2ee6c     01 00 00 FF 
2ee70     00 94 16 F2 | 	cmp	arg02, ##512 wc
2ee74     A0 00 90 CD |  if_b	jmp	#LR__5021
2ee78     3D 95 32 F9 | 	getword	arg02, result1, #0
2ee7c     01 00 00 FF 
2ee80     01 94 16 F2 | 	cmp	arg02, ##513 wc
2ee84     90 00 90 3D |  if_ae	jmp	#LR__5021
2ee88     55 93 02 F6 | 	mov	arg01, local03
2ee8c     07 92 4E F7 | 	zerox	arg01, #7 wz
2ee90     84 00 90 AD |  if_e	jmp	#LR__5021
2ee94     55 93 E2 F8 | 	getbyte	arg01, local03, #0
2ee98     55 AB E2 F8 | 	getbyte	local03, local03, #0
2ee9c     01 AA 86 F1 | 	sub	local03, #1
2eea0     55 93 CA F7 | 	test	arg01, local03 wz
2eea4     70 00 90 5D |  if_ne	jmp	#LR__5021
2eea8     53 93 02 F6 | 	mov	arg01, local01
2eeac     42 92 06 F1 | 	add	arg01, #66
2eeb0                 | ' {
2eeb0                 | ' 
2eeb0                 | ' 	return *((WORD*)ptr);
2eeb0     49 7B EA FA | 	rdword	result1, arg01 wz
2eeb4     60 00 90 AD |  if_e	jmp	#LR__5021
2eeb8     44 A6 06 F1 | 	add	local01, #68
2eebc     53 93 C2 FA | 	rdbyte	arg01, local01
2eec0     44 A6 86 F1 | 	sub	local01, #68
2eec4     01 92 86 F1 | 	sub	arg01, #1
2eec8     02 92 16 F2 | 	cmp	arg01, #2 wc
2eecc     48 00 90 3D |  if_ae	jmp	#LR__5021
2eed0     53 93 02 F6 | 	mov	arg01, local01
2eed4     45 92 06 F1 | 	add	arg01, #69
2eed8                 | ' {
2eed8                 | ' 
2eed8                 | ' 	return *((WORD*)ptr);
2eed8     49 7B EA FA | 	rdword	result1, arg01 wz
2eedc     38 00 90 AD |  if_e	jmp	#LR__5021
2eee0     53 93 02 F6 | 	mov	arg01, local01
2eee4     47 92 06 F1 | 	add	arg01, #71
2eee8                 | ' {
2eee8                 | ' 
2eee8                 | ' 	return *((WORD*)ptr);
2eee8     49 7B E2 FA | 	rdword	result1, arg01
2eeec     3D AB 32 F9 | 	getword	local03, result1, #0
2eef0     80 AA 16 F2 | 	cmp	local03, #128 wc
2eef4     53 93 02 C6 |  if_b	mov	arg01, local01
2eef8     54 92 06 C1 |  if_b	add	arg01, #84
2eefc                 | ' {
2eefc                 | ' 
2eefc                 | ' 	return *((DWORD*)ptr);
2eefc     49 7B 02 CB |  if_b	rdlong	result1, arg01
2ef00     80 00 00 CF 
2ef04     00 7A 16 C2 |  if_b	cmp	result1, ##65536 wc
2ef08     4A A6 06 31 |  if_ae	add	local01, #74
2ef0c                 | ' {
2ef0c                 | ' 
2ef0c                 | ' 	return *((WORD*)ptr);
2ef0c     53 7B EA 3A |  if_ae	rdword	result1, local01 wz
2ef10                 | ' 			&& b != 0 && (b & (b - 1)) == 0
2ef10                 | ' 			&& ld_word(fs->win +  14 ) != 0
2ef10                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
2ef10                 | ' 			&& ld_word(fs->win +  17 ) != 0
2ef10                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
2ef10                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
2ef10                 | ' 				return 0;
2ef10     00 7A 06 16 |  if_a	mov	result1, #0
2ef14     18 00 90 1D |  if_a	jmp	#LR__5023
2ef18                 | LR__5021
2ef18                 | LR__5022
2ef18                 | ' 		}
2ef18                 | ' 	}
2ef18                 | ' 	return sign == 0xAA55 ? 2 : 3;
2ef18     54 AB 32 F9 | 	getword	local03, local02, #0
2ef1c     55 00 00 FF 
2ef20     55 AA 0E F2 | 	cmp	local03, ##43605 wz
2ef24     02 AC 06 A6 |  if_e	mov	local04, #2
2ef28     03 AC 06 56 |  if_ne	mov	local04, #3
2ef2c     56 7B 02 F6 | 	mov	result1, local04
2ef30                 | LR__5023
2ef30     E7 F0 03 F6 | 	mov	ptra, fp
2ef34     F2 00 A0 FD | 	call	#popregs_
2ef38                 | _fatfs_cc_check_fs_ret
2ef38     2D 00 64 FD | 	ret
2ef3c                 | 
2ef3c                 | _fatfs_cc_find_volume
2ef3c     05 CA 05 F6 | 	mov	COUNT_, #5
2ef40     E8 00 A0 FD | 	call	#pushregs_
2ef44     24 F0 07 F1 | 	add	ptra, #36
2ef48     49 A7 02 F6 | 	mov	local01, arg01
2ef4c     4A A9 02 F6 | 	mov	local02, arg02
2ef50     53 93 02 F6 | 	mov	arg01, local01
2ef54     00 94 06 F6 | 	mov	arg02, #0
2ef58     38 FE BF FD | 	call	#_fatfs_cc_check_fs
2ef5c     02 7A 0E F2 | 	cmp	result1, #2 wz
2ef60     0C 00 90 AD |  if_e	jmp	#LR__5030
2ef64     03 7A 16 F2 | 	cmp	result1, #3 wc
2ef68     00 A8 0E C2 |  if_b	cmp	local02, #0 wz
2ef6c     C8 00 90 BD |  if_nc_or_z	jmp	#LR__5038
2ef70                 | LR__5030
2ef70                 | ' 	for (i = 0; i < 4; i++) {
2ef70     00 AA 06 F6 | 	mov	local03, #0
2ef74     D7 22 48 FB | 	callpa	#(@LR__5032-@LR__5031)>>2,fcache_load_ptr_
2ef78                 | LR__5031
2ef78     04 AA 16 F2 | 	cmp	local03, #4 wc
2ef7c     3C 00 90 3D |  if_ae	jmp	#LR__5033
2ef80     55 AD 02 F6 | 	mov	local04, local03
2ef84     02 AC 66 F0 | 	shl	local04, #2
2ef88     E7 94 02 F6 | 	mov	arg02, fp
2ef8c     14 94 06 F1 | 	add	arg02, #20
2ef90     4A AD 02 F1 | 	add	local04, arg02
2ef94     53 93 02 F6 | 	mov	arg01, local01
2ef98     F2 93 06 F1 | 	add	arg01, #498
2ef9c     55 95 02 F6 | 	mov	arg02, local03
2efa0     04 94 66 F0 | 	shl	arg02, #4
2efa4     4A 93 02 F1 | 	add	arg01, arg02
2efa8     08 92 06 F1 | 	add	arg01, #8
2efac                 | ' {
2efac                 | ' 
2efac                 | ' 	return *((DWORD*)ptr);
2efac     49 7B 02 FB | 	rdlong	result1, arg01
2efb0     56 7B 62 FC | 	wrlong	result1, local04
2efb4     01 AA 06 F1 | 	add	local03, #1
2efb8     BC FF 9F FD | 	jmp	#LR__5031
2efbc                 | LR__5032
2efbc                 | LR__5033
2efbc     00 A8 0E F2 | 	cmp	local02, #0 wz
2efc0     54 AD 02 56 |  if_ne	mov	local04, local02
2efc4     01 AC 86 51 |  if_ne	sub	local04, #1
2efc8     00 AC 06 A6 |  if_e	mov	local04, #0
2efcc     56 AB 02 F6 | 	mov	local03, local04
2efd0                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
2efd0                 | ' 	}
2efd0                 | ' 	i = part ? part - 1 : 0;
2efd0                 | ' 	do {
2efd0                 | LR__5034
2efd0     55 AD 02 F6 | 	mov	local04, local03
2efd4     02 AC 66 F0 | 	shl	local04, #2
2efd8     E7 94 02 F6 | 	mov	arg02, fp
2efdc     14 94 06 F1 | 	add	arg02, #20
2efe0     4A AD 02 F1 | 	add	local04, arg02
2efe4     56 AD 0A FB | 	rdlong	local04, local04 wz
2efe8     28 00 90 AD |  if_e	jmp	#LR__5035
2efec     55 AD 02 F6 | 	mov	local04, local03
2eff0     02 AC 66 F0 | 	shl	local04, #2
2eff4     E7 94 02 F6 | 	mov	arg02, fp
2eff8     14 94 06 F1 | 	add	arg02, #20
2effc     4A AD 02 F1 | 	add	local04, arg02
2f000     56 95 02 FB | 	rdlong	arg02, local04
2f004     53 93 02 F6 | 	mov	arg01, local01
2f008     88 FD BF FD | 	call	#_fatfs_cc_check_fs
2f00c     3D AD 02 F6 | 	mov	local04, result1
2f010     04 00 90 FD | 	jmp	#LR__5036
2f014                 | LR__5035
2f014     03 AC 06 F6 | 	mov	local04, #3
2f018                 | LR__5036
2f018     56 AF 02 F6 | 	mov	local05, local04
2f01c     00 A8 0E F2 | 	cmp	local02, #0 wz
2f020     02 AE 16 A2 |  if_e	cmp	local05, #2 wc
2f024     0C 00 90 8D |  if_c_and_z	jmp	#LR__5037
2f028     01 AA 06 A1 |  if_e	add	local03, #1
2f02c     04 AA 16 A2 |  if_e	cmp	local03, #4 wc
2f030     9C FF 9F 8D |  if_c_and_z	jmp	#LR__5034
2f034                 | LR__5037
2f034                 | ' 	return fmt;
2f034     57 7B 02 F6 | 	mov	result1, local05
2f038                 | LR__5038
2f038     E7 F0 03 F6 | 	mov	ptra, fp
2f03c     F2 00 A0 FD | 	call	#popregs_
2f040                 | _fatfs_cc_find_volume_ret
2f040     2D 00 64 FD | 	ret
2f044                 | 
2f044                 | _fatfs_cc_mount_volume
2f044     0A CA 05 F6 | 	mov	COUNT_, #10
2f048     E8 00 A0 FD | 	call	#pushregs_
2f04c     4B A7 02 F6 | 	mov	local01, arg03
2f050     4A 01 68 FC | 	wrlong	#0, arg02
2f054     B0 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
2f058     3D A9 02 F6 | 	mov	local02, result1
2f05c     00 A8 56 F2 | 	cmps	local02, #0 wc
2f060     0B 7A 06 C6 |  if_b	mov	result1, #11
2f064     00 05 90 CD |  if_b	jmp	#LR__5049
2f068     54 97 02 F6 | 	mov	arg03, local02
2f06c     02 96 66 F0 | 	shl	arg03, #2
2f070     32 97 02 F1 | 	add	arg03, objptr
2f074     4B AB 0A FB | 	rdlong	local03, arg03 wz
2f078     0C 7A 06 A6 |  if_e	mov	result1, #12
2f07c     E8 04 90 AD |  if_e	jmp	#LR__5049
2f080     4A AB 62 FC | 	wrlong	local03, arg02
2f084     53 A7 E2 F8 | 	getbyte	local01, local01, #0
2f088     FE A6 06 F5 | 	and	local01, #254
2f08c     55 97 CA FA | 	rdbyte	arg03, local03 wz
2f090     44 00 90 AD |  if_e	jmp	#LR__5041
2f094     01 00 00 FF 
2f098     10 64 06 F1 | 	add	objptr, ##528
2f09c     32 93 0A FB | 	rdlong	arg01, objptr wz
2f0a0     01 00 00 FF 
2f0a4     10 64 86 F1 | 	sub	objptr, ##528
2f0a8                 | '         return RES_NOTRDY;
2f0a8     03 7A 06 A6 |  if_e	mov	result1, #3
2f0ac                 | '     }
2f0ac                 | '     return RES_OK;
2f0ac     00 7A 06 56 |  if_ne	mov	result1, #0
2f0b0     3D 97 E2 F8 | 	getbyte	arg03, result1, #0
2f0b4     01 96 CE F7 | 	test	arg03, #1 wz
2f0b8     1C 00 90 5D |  if_ne	jmp	#LR__5040
2f0bc     00 A6 0E F2 | 	cmp	local01, #0 wz
2f0c0     3D 7B E2 58 |  if_ne	getbyte	result1, result1, #0
2f0c4     04 7A CE 57 |  if_ne	test	result1, #4 wz
2f0c8                 | ' 				return FR_WRITE_PROTECTED;
2f0c8     0A 7A 06 56 |  if_ne	mov	result1, #10
2f0cc     98 04 90 5D |  if_ne	jmp	#LR__5049
2f0d0                 | ' 			}
2f0d0                 | ' 			return FR_OK;
2f0d0     00 7A 06 F6 | 	mov	result1, #0
2f0d4     90 04 90 FD | 	jmp	#LR__5049
2f0d8                 | LR__5040
2f0d8                 | LR__5041
2f0d8     55 01 48 FC | 	wrbyte	#0, local03
2f0dc     01 AA 06 F1 | 	add	local03, #1
2f0e0     55 A9 42 FC | 	wrbyte	local02, local03
2f0e4     01 AA 86 F1 | 	sub	local03, #1
2f0e8     01 00 00 FF 
2f0ec     10 64 06 F1 | 	add	objptr, ##528
2f0f0     32 A9 0A FB | 	rdlong	local02, objptr wz
2f0f4     01 00 00 FF 
2f0f8     10 64 86 F1 | 	sub	objptr, ##528
2f0fc                 | ' 
2f0fc                 | '         return RES_NOTRDY;
2f0fc     03 7A 06 A6 |  if_e	mov	result1, #3
2f100                 | '     }
2f100                 | '     return RES_OK;
2f100     00 7A 06 56 |  if_ne	mov	result1, #0
2f104     3D 97 02 F6 | 	mov	arg03, result1
2f108     4B AD E2 F8 | 	getbyte	local04, arg03, #0
2f10c     01 AC CE F7 | 	test	local04, #1 wz
2f110                 | ' 		return FR_NOT_READY;
2f110     03 7A 06 56 |  if_ne	mov	result1, #3
2f114     50 04 90 5D |  if_ne	jmp	#LR__5049
2f118     00 A6 0E F2 | 	cmp	local01, #0 wz
2f11c     4B AD 02 56 |  if_ne	mov	local04, arg03
2f120     56 AD E2 58 |  if_ne	getbyte	local04, local04, #0
2f124     04 AC CE 57 |  if_ne	test	local04, #4 wz
2f128                 | ' 		return FR_WRITE_PROTECTED;
2f128     0A 7A 06 56 |  if_ne	mov	result1, #10
2f12c     38 04 90 5D |  if_ne	jmp	#LR__5049
2f130     55 93 02 F6 | 	mov	arg01, local03
2f134     00 94 06 F6 | 	mov	arg02, #0
2f138     00 FE BF FD | 	call	#_fatfs_cc_find_volume
2f13c     3D 93 02 F6 | 	mov	arg01, result1
2f140     04 92 0E F2 | 	cmp	arg01, #4 wz
2f144     01 7A 06 A6 |  if_e	mov	result1, #1
2f148     1C 04 90 AD |  if_e	jmp	#LR__5049
2f14c     02 92 16 F2 | 	cmp	arg01, #2 wc
2f150     0D 7A 06 36 |  if_ae	mov	result1, #13
2f154     10 04 90 3D |  if_ae	jmp	#LR__5049
2f158     30 AA 06 F1 | 	add	local03, #48
2f15c     55 AF 02 FB | 	rdlong	local05, local03
2f160     04 AA 06 F1 | 	add	local03, #4
2f164     55 93 02 F6 | 	mov	arg01, local03
2f168     34 AA 86 F1 | 	sub	local03, #52
2f16c     0B 92 06 F1 | 	add	arg01, #11
2f170                 | ' {
2f170                 | ' 
2f170                 | ' 	return *((WORD*)ptr);
2f170     49 7B E2 FA | 	rdword	result1, arg01
2f174     01 00 00 FF 
2f178     00 7A 0E F2 | 	cmp	result1, ##512 wz
2f17c     0D 7A 06 56 |  if_ne	mov	result1, #13
2f180     E4 03 90 5D |  if_ne	jmp	#LR__5049
2f184     55 93 02 F6 | 	mov	arg01, local03
2f188     4A 92 06 F1 | 	add	arg01, #74
2f18c                 | ' {
2f18c                 | ' 
2f18c                 | ' 	return *((WORD*)ptr);
2f18c     49 7B E2 FA | 	rdword	result1, arg01
2f190     3D B1 0A F6 | 	mov	local06, result1 wz
2f194     55 93 02 A6 |  if_e	mov	arg01, local03
2f198     58 92 06 A1 |  if_e	add	arg01, #88
2f19c                 | ' {
2f19c                 | ' 
2f19c                 | ' 	return *((DWORD*)ptr);
2f19c     49 7B 02 AB |  if_e	rdlong	result1, arg01
2f1a0     3D B1 02 A6 |  if_e	mov	local06, result1
2f1a4     1C AA 06 F1 | 	add	local03, #28
2f1a8     55 B1 62 FC | 	wrlong	local06, local03
2f1ac     28 AA 06 F1 | 	add	local03, #40
2f1b0     55 AD C2 FA | 	rdbyte	local04, local03
2f1b4     42 AA 86 F1 | 	sub	local03, #66
2f1b8     55 AD 42 FC | 	wrbyte	local04, local03
2f1bc     56 AD E2 F8 | 	getbyte	local04, local04, #0
2f1c0     02 AA 86 F1 | 	sub	local03, #2
2f1c4     01 AC 0E F2 | 	cmp	local04, #1 wz
2f1c8     02 AA 06 51 |  if_ne	add	local03, #2
2f1cc     55 AD C2 5A |  if_ne	rdbyte	local04, local03
2f1d0     02 AA 86 51 |  if_ne	sub	local03, #2
2f1d4     02 AC 0E 52 |  if_ne	cmp	local04, #2 wz
2f1d8     0D 7A 06 56 |  if_ne	mov	result1, #13
2f1dc     88 03 90 5D |  if_ne	jmp	#LR__5049
2f1e0     02 AA 06 F1 | 	add	local03, #2
2f1e4     55 AD C2 FA | 	rdbyte	local04, local03
2f1e8     56 B1 02 FD | 	qmul	local06, local04
2f1ec     3F AA 06 F1 | 	add	local03, #63
2f1f0     55 AD C2 FA | 	rdbyte	local04, local03
2f1f4     37 AA 86 F1 | 	sub	local03, #55
2f1f8     55 AD 52 FC | 	wrword	local04, local03
2f1fc     56 AD 32 F9 | 	getword	local04, local04, #0
2f200     0A AA 86 F1 | 	sub	local03, #10
2f204     0F AC 4E F7 | 	zerox	local04, #15 wz
2f208     18 B0 62 FD | 	getqx	local06
2f20c     20 00 90 AD |  if_e	jmp	#LR__5042
2f210     0A AA 06 F1 | 	add	local03, #10
2f214     55 AD E2 FA | 	rdword	local04, local03
2f218     56 A9 32 F9 | 	getword	local02, local04, #0
2f21c     0A AA 86 F1 | 	sub	local03, #10
2f220     56 AD 32 F9 | 	getword	local04, local04, #0
2f224     01 AC 86 F1 | 	sub	local04, #1
2f228     56 A9 CA F7 | 	test	local02, local04 wz
2f22c     08 00 90 AD |  if_e	jmp	#LR__5043
2f230                 | LR__5042
2f230     0D 7A 06 F6 | 	mov	result1, #13
2f234     30 03 90 FD | 	jmp	#LR__5049
2f238                 | LR__5043
2f238     34 AA 06 F1 | 	add	local03, #52
2f23c     55 93 02 F6 | 	mov	arg01, local03
2f240     11 92 06 F1 | 	add	arg01, #17
2f244                 | ' {
2f244                 | ' 
2f244                 | ' 	return *((WORD*)ptr);
2f244     49 7B E2 FA | 	rdword	result1, arg01
2f248     2C AA 86 F1 | 	sub	local03, #44
2f24c     55 7B 52 FC | 	wrword	result1, local03
2f250     3D AD 32 F9 | 	getword	local04, result1, #0
2f254     08 AA 86 F1 | 	sub	local03, #8
2f258     56 93 52 F6 | 	abs	arg01, local04 wc
2f25c     49 93 42 F8 | 	getnib	arg01, arg01, #0
2f260     49 93 8A F6 | 	negc	arg01, arg01 wz
2f264     0D 7A 06 56 |  if_ne	mov	result1, #13
2f268     FC 02 90 5D |  if_ne	jmp	#LR__5049
2f26c     55 93 02 F6 | 	mov	arg01, local03
2f270     47 92 06 F1 | 	add	arg01, #71
2f274                 | ' {
2f274                 | ' 
2f274                 | ' 	return *((WORD*)ptr);
2f274     49 7B E2 FA | 	rdword	result1, arg01
2f278     3D B3 0A F6 | 	mov	local07, result1 wz
2f27c     55 93 02 A6 |  if_e	mov	arg01, local03
2f280     54 92 06 A1 |  if_e	add	arg01, #84
2f284                 | ' {
2f284                 | ' 
2f284                 | ' 	return *((DWORD*)ptr);
2f284     49 B3 02 AB |  if_e	rdlong	local07, arg01
2f288     55 93 02 F6 | 	mov	arg01, local03
2f28c     42 92 06 F1 | 	add	arg01, #66
2f290                 | ' {
2f290                 | ' 
2f290                 | ' 	return *((WORD*)ptr);
2f290     49 7B E2 FA | 	rdword	result1, arg01
2f294     3D 93 02 F6 | 	mov	arg01, result1
2f298     49 AD 02 F6 | 	mov	local04, arg01
2f29c     0F AC 4E F7 | 	zerox	local04, #15 wz
2f2a0     0D 7A 06 A6 |  if_e	mov	result1, #13
2f2a4     C0 02 90 AD |  if_e	jmp	#LR__5049
2f2a8     49 B5 32 F9 | 	getword	local08, arg01, #0
2f2ac     58 B5 02 F1 | 	add	local08, local06
2f2b0     08 AA 06 F1 | 	add	local03, #8
2f2b4     55 AD E2 FA | 	rdword	local04, local03
2f2b8     08 AA 86 F1 | 	sub	local03, #8
2f2bc     56 AD 52 F6 | 	abs	local04, local04 wc
2f2c0     04 AC 46 F0 | 	shr	local04, #4
2f2c4     56 B5 82 F3 | 	sumc	local08, local04
2f2c8     5A B3 12 F2 | 	cmp	local07, local08 wc
2f2cc     0D 7A 06 C6 |  if_b	mov	result1, #13
2f2d0     94 02 90 CD |  if_b	jmp	#LR__5049
2f2d4     5A B3 82 F1 | 	sub	local07, local08
2f2d8     0A AA 06 F1 | 	add	local03, #10
2f2dc     55 AD E2 FA | 	rdword	local04, local03
2f2e0     56 B3 12 FD | 	qdiv	local07, local04
2f2e4     0A AA 86 F1 | 	sub	local03, #10
2f2e8     18 AC 62 FD | 	getqx	local04
2f2ec     00 AC 0E F2 | 	cmp	local04, #0 wz
2f2f0     0D 7A 06 A6 |  if_e	mov	result1, #13
2f2f4     70 02 90 AD |  if_e	jmp	#LR__5049
2f2f8     00 B6 06 F6 | 	mov	local09, #0
2f2fc     FF FF 07 FF 
2f300     F6 AD 16 F2 | 	cmp	local04, ##268435446 wc
2f304     03 B6 06 C6 |  if_b	mov	local09, #3
2f308     7F 00 00 FF 
2f30c     F6 AD 16 F2 | 	cmp	local04, ##65526 wc
2f310     02 B6 06 C6 |  if_b	mov	local09, #2
2f314     07 00 00 FF 
2f318     F6 AD 16 F2 | 	cmp	local04, ##4086 wc
2f31c     01 B6 06 C6 |  if_b	mov	local09, #1
2f320     00 B6 0E F2 | 	cmp	local09, #0 wz
2f324     0D 7A 06 A6 |  if_e	mov	result1, #13
2f328     3C 02 90 AD |  if_e	jmp	#LR__5049
2f32c     02 AC 06 F1 | 	add	local04, #2
2f330     18 AA 06 F1 | 	add	local03, #24
2f334     55 AD 62 FC | 	wrlong	local04, local03
2f338     08 AA 06 F1 | 	add	local03, #8
2f33c     55 AF 62 FC | 	wrlong	local05, local03
2f340     57 AD 02 F6 | 	mov	local04, local05
2f344     49 93 32 F9 | 	getword	arg01, arg01, #0
2f348     49 AD 02 F1 | 	add	local04, arg01
2f34c     04 AA 06 F1 | 	add	local03, #4
2f350     55 AD 62 FC | 	wrlong	local04, local03
2f354     57 AD 02 F6 | 	mov	local04, local05
2f358     5A AD 02 F1 | 	add	local04, local08
2f35c     08 AA 06 F1 | 	add	local03, #8
2f360     55 AD 62 FC | 	wrlong	local04, local03
2f364     2C AA 86 F1 | 	sub	local03, #44
2f368     03 B6 0E F2 | 	cmp	local09, #3 wz
2f36c     54 00 90 5D |  if_ne	jmp	#LR__5044
2f370     55 93 02 F6 | 	mov	arg01, local03
2f374     5E 92 06 F1 | 	add	arg01, #94
2f378                 | ' {
2f378                 | ' 
2f378                 | ' 	return *((WORD*)ptr);
2f378     49 7B EA FA | 	rdword	result1, arg01 wz
2f37c     0D 7A 06 56 |  if_ne	mov	result1, #13
2f380     E4 01 90 5D |  if_ne	jmp	#LR__5049
2f384     08 AA 06 F1 | 	add	local03, #8
2f388     55 AD EA FA | 	rdword	local04, local03 wz
2f38c     08 AA 86 F1 | 	sub	local03, #8
2f390     0D 7A 06 56 |  if_ne	mov	result1, #13
2f394     D0 01 90 5D |  if_ne	jmp	#LR__5049
2f398     34 AA 06 F1 | 	add	local03, #52
2f39c     55 93 02 F6 | 	mov	arg01, local03
2f3a0     2C 92 06 F1 | 	add	arg01, #44
2f3a4                 | ' {
2f3a4                 | ' 
2f3a4                 | ' 	return *((DWORD*)ptr);
2f3a4     49 7B 02 FB | 	rdlong	result1, arg01
2f3a8     0C AA 86 F1 | 	sub	local03, #12
2f3ac     55 7B 62 FC | 	wrlong	result1, local03
2f3b0     10 AA 86 F1 | 	sub	local03, #16
2f3b4     55 B9 02 FB | 	rdlong	local10, local03
2f3b8     18 AA 86 F1 | 	sub	local03, #24
2f3bc     02 B8 66 F0 | 	shl	local10, #2
2f3c0     6C 00 90 FD | 	jmp	#LR__5046
2f3c4                 | LR__5044
2f3c4     08 AA 06 F1 | 	add	local03, #8
2f3c8     55 AD EA FA | 	rdword	local04, local03 wz
2f3cc     08 AA 86 F1 | 	sub	local03, #8
2f3d0     0D 7A 06 A6 |  if_e	mov	result1, #13
2f3d4     90 01 90 AD |  if_e	jmp	#LR__5049
2f3d8     24 AA 06 F1 | 	add	local03, #36
2f3dc     55 AD 02 FB | 	rdlong	local04, local03
2f3e0     58 AD 02 F1 | 	add	local04, local06
2f3e4     04 AA 06 F1 | 	add	local03, #4
2f3e8     55 AD 62 FC | 	wrlong	local04, local03
2f3ec     28 AA 86 F1 | 	sub	local03, #40
2f3f0     02 B6 0E F2 | 	cmp	local09, #2 wz
2f3f4     18 AA 06 A1 |  if_e	add	local03, #24
2f3f8     55 AD 02 AB |  if_e	rdlong	local04, local03
2f3fc     18 AA 86 A1 |  if_e	sub	local03, #24
2f400     01 AC 66 A0 |  if_e	shl	local04, #1
2f404     24 00 90 AD |  if_e	jmp	#LR__5045
2f408     18 AA 06 F1 | 	add	local03, #24
2f40c     55 B9 02 FB | 	rdlong	local10, local03
2f410     5C AD 02 F6 | 	mov	local04, local10
2f414     01 AC 66 F0 | 	shl	local04, #1
2f418     5C AD 02 F1 | 	add	local04, local10
2f41c     01 AC 46 F0 | 	shr	local04, #1
2f420     18 AA 86 F1 | 	sub	local03, #24
2f424     01 B8 06 F5 | 	and	local10, #1
2f428     5C AD 02 F1 | 	add	local04, local10
2f42c                 | LR__5045
2f42c     56 B9 02 F6 | 	mov	local10, local04
2f430                 | LR__5046
2f430     FF B9 06 F1 | 	add	local10, #511
2f434     09 B8 46 F0 | 	shr	local10, #9
2f438     1C AA 06 F1 | 	add	local03, #28
2f43c     55 97 02 FB | 	rdlong	arg03, local03
2f440     1C AA 86 F1 | 	sub	local03, #28
2f444     5C 97 12 F2 | 	cmp	arg03, local10 wc
2f448     0D 7A 06 C6 |  if_b	mov	result1, #13
2f44c     18 01 90 CD |  if_b	jmp	#LR__5049
2f450     14 AA 06 F1 | 	add	local03, #20
2f454     FF FF FF FF 
2f458     55 FF 6B FC | 	wrlong	##-1, local03
2f45c     04 AA 86 F1 | 	sub	local03, #4
2f460     FF FF FF FF 
2f464     55 FF 6B FC | 	wrlong	##-1, local03
2f468     0C AA 86 F1 | 	sub	local03, #12
2f46c     55 01 49 FC | 	wrbyte	#128, local03
2f470     04 AA 86 F1 | 	sub	local03, #4
2f474     03 B6 0E F2 | 	cmp	local09, #3 wz
2f478     55 93 02 A6 |  if_e	mov	arg01, local03
2f47c     64 92 06 A1 |  if_e	add	arg01, #100
2f480                 | ' {
2f480                 | ' 
2f480                 | ' 	return *((WORD*)ptr);
2f480     49 7B E2 AA |  if_e	rdword	result1, arg01
2f484     3D AD 32 A9 |  if_e	getword	local04, result1, #0
2f488     01 AC 0E A2 |  if_e	cmp	local04, #1 wz
2f48c     A4 00 90 5D |  if_ne	jmp	#LR__5048
2f490     01 AE 06 F1 | 	add	local05, #1
2f494     55 93 02 F6 | 	mov	arg01, local03
2f498     57 95 02 F6 | 	mov	arg02, local05
2f49c     E8 D4 BF FD | 	call	#_fatfs_cc_move_window
2f4a0     00 7A 0E F2 | 	cmp	result1, #0 wz
2f4a4     8C 00 90 5D |  if_ne	jmp	#LR__5048
2f4a8     04 AA 06 F1 | 	add	local03, #4
2f4ac     55 01 48 FC | 	wrbyte	#0, local03
2f4b0     30 AA 06 F1 | 	add	local03, #48
2f4b4     55 93 02 F6 | 	mov	arg01, local03
2f4b8     34 AA 86 F1 | 	sub	local03, #52
2f4bc     FE 93 06 F1 | 	add	arg01, #510
2f4c0                 | ' {
2f4c0                 | ' 
2f4c0                 | ' 	return *((WORD*)ptr);
2f4c0     49 7B E2 FA | 	rdword	result1, arg01
2f4c4     3D AD 32 F9 | 	getword	local04, result1, #0
2f4c8     55 00 00 FF 
2f4cc     55 AC 0E F2 | 	cmp	local04, ##43605 wz
2f4d0     55 93 02 A6 |  if_e	mov	arg01, local03
2f4d4     34 92 06 A1 |  if_e	add	arg01, #52
2f4d8                 | ' {
2f4d8                 | ' 
2f4d8                 | ' 	return *((DWORD*)ptr);
2f4d8     49 7B 02 AB |  if_e	rdlong	result1, arg01
2f4dc     A9 B0 20 AF 
2f4e0     52 7A 0E A2 |  if_e	cmp	result1, ##1096897106 wz
2f4e4     55 93 02 A6 |  if_e	mov	arg01, local03
2f4e8     01 00 00 AF 
2f4ec     18 92 06 A1 |  if_e	add	arg01, ##536
2f4f0                 | ' {
2f4f0                 | ' 
2f4f0                 | ' 	return *((DWORD*)ptr);
2f4f0     49 7B 02 AB |  if_e	rdlong	result1, arg01
2f4f4     B9 A0 30 AF 
2f4f8     72 7A 0E A2 |  if_e	cmp	result1, ##1631679090 wz
2f4fc     34 00 90 5D |  if_ne	jmp	#LR__5047
2f500     34 AA 06 F1 | 	add	local03, #52
2f504     55 93 02 F6 | 	mov	arg01, local03
2f508     E8 93 06 F1 | 	add	arg01, #488
2f50c                 | ' {
2f50c                 | ' 
2f50c                 | ' 	return *((DWORD*)ptr);
2f50c     49 7B 02 FB | 	rdlong	result1, arg01
2f510     20 AA 86 F1 | 	sub	local03, #32
2f514     55 7B 62 FC | 	wrlong	result1, local03
2f518     20 AA 06 F1 | 	add	local03, #32
2f51c     55 93 02 F6 | 	mov	arg01, local03
2f520     EC 93 06 F1 | 	add	arg01, #492
2f524                 | ' {
2f524                 | ' 
2f524                 | ' 	return *((DWORD*)ptr);
2f524     49 7B 02 FB | 	rdlong	result1, arg01
2f528     24 AA 86 F1 | 	sub	local03, #36
2f52c     55 7B 62 FC | 	wrlong	result1, local03
2f530     10 AA 86 F1 | 	sub	local03, #16
2f534                 | LR__5047
2f534                 | LR__5048
2f534     55 B7 42 FC | 	wrbyte	local09, local03
2f538     04 64 06 F1 | 	add	objptr, #4
2f53c     32 AD E2 FA | 	rdword	local04, objptr
2f540     01 AC 06 F1 | 	add	local04, #1
2f544     32 AD 52 FC | 	wrword	local04, objptr
2f548     56 B9 32 F9 | 	getword	local10, local04, #0
2f54c     06 AA 06 F1 | 	add	local03, #6
2f550     55 B9 52 FC | 	wrword	local10, local03
2f554     04 64 06 F1 | 	add	objptr, #4
2f558     06 AA 06 F1 | 	add	local03, #6
2f55c     55 65 62 FC | 	wrlong	objptr, local03
2f560                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
2f560                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
2f560                 | ' 			{
2f560                 | ' 
2f560                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
2f560                 | ' 
2f560                 | ' 
2f560                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
2f560                 | ' 
2f560                 | ' 			}
2f560                 | ' 		}
2f560                 | ' 
2f560                 | ' 
2f560                 | ' 	}
2f560                 | ' 
2f560                 | ' 	fs->fs_type = (BYTE)fmt;
2f560                 | ' 	fs->id = ++Fsid;
2f560                 | ' 
2f560                 | ' 	fs->lfnbuf = LfnBuf;
2f560                 | ' #line 3567 "ff.c"
2f560                 | ' 	return FR_OK;
2f560     00 7A 06 F6 | 	mov	result1, #0
2f564     08 64 86 F1 | 	sub	objptr, #8
2f568                 | LR__5049
2f568     E7 F0 03 F6 | 	mov	ptra, fp
2f56c     F2 00 A0 FD | 	call	#popregs_
2f570                 | _fatfs_cc_mount_volume_ret
2f570     2D 00 64 FD | 	ret
2f574                 | 
2f574                 | _fatfs_cc_validate
2f574     49 81 0A F6 | 	mov	_var01, arg01 wz
2f578     09 82 06 F6 | 	mov	_var02, #9
2f57c     40 85 0A 5B |  if_ne	rdlong	_var03, _var01 wz
2f580     42 87 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
2f584     48 00 90 AD |  if_e	jmp	#LR__5050
2f588     04 80 06 F1 | 	add	_var01, #4
2f58c     40 87 E2 FA | 	rdword	_var04, _var01
2f590     04 80 86 F1 | 	sub	_var01, #4
2f594     40 93 02 FB | 	rdlong	arg01, _var01
2f598     06 92 06 F1 | 	add	arg01, #6
2f59c     49 7B E2 FA | 	rdword	result1, arg01
2f5a0     3D 87 0A F2 | 	cmp	_var04, result1 wz
2f5a4     28 00 90 5D |  if_ne	jmp	#LR__5050
2f5a8     01 00 00 FF 
2f5ac     10 64 06 F1 | 	add	objptr, ##528
2f5b0     32 87 0A FB | 	rdlong	_var04, objptr wz
2f5b4     01 00 00 FF 
2f5b8     10 64 86 F1 | 	sub	objptr, ##528
2f5bc                 | '         return RES_NOTRDY;
2f5bc     03 7A 06 A6 |  if_e	mov	result1, #3
2f5c0                 | '     }
2f5c0                 | '     return RES_OK;
2f5c0     00 7A 06 56 |  if_ne	mov	result1, #0
2f5c4     3D 85 E2 F8 | 	getbyte	_var03, result1, #0
2f5c8     01 84 CE F7 | 	test	_var03, #1 wz
2f5cc     00 82 06 A6 |  if_e	mov	_var02, #0
2f5d0                 | LR__5050
2f5d0     00 82 0E F2 | 	cmp	_var02, #0 wz
2f5d4     40 85 02 AB |  if_e	rdlong	_var03, _var01
2f5d8     00 84 06 56 |  if_ne	mov	_var03, #0
2f5dc     4A 85 62 FC | 	wrlong	_var03, arg02
2f5e0                 | ' 			res = FR_OK;
2f5e0                 | ' 		}
2f5e0                 | ' 
2f5e0                 | ' 	}
2f5e0                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
2f5e0                 | ' 	return res;
2f5e0     41 7B 02 F6 | 	mov	result1, _var02
2f5e4                 | _fatfs_cc_validate_ret
2f5e4     2D 00 64 FD | 	ret
2f5e8                 | 
2f5e8                 | _fatfs_cc_f_mount
2f5e8     04 CA 05 F6 | 	mov	COUNT_, #4
2f5ec     E8 00 A0 FD | 	call	#pushregs_
2f5f0     20 F0 07 F1 | 	add	ptra, #32
2f5f4     04 CE 05 F1 | 	add	fp, #4
2f5f8     E7 92 62 FC | 	wrlong	arg01, fp
2f5fc     04 CE 05 F1 | 	add	fp, #4
2f600     E7 94 62 FC | 	wrlong	arg02, fp
2f604     4B A7 02 F6 | 	mov	local01, arg03
2f608     14 CE 05 F1 | 	add	fp, #20
2f60c     E7 94 62 FC | 	wrlong	arg02, fp
2f610     E7 92 02 F6 | 	mov	arg01, fp
2f614     1C CE 85 F1 | 	sub	fp, #28
2f618     EC F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
2f61c     3D A9 02 F6 | 	mov	local02, result1
2f620     00 A8 56 F2 | 	cmps	local02, #0 wc
2f624     0B 7A 06 C6 |  if_b	mov	result1, #11
2f628     84 00 90 CD |  if_b	jmp	#LR__5061
2f62c     54 97 02 F6 | 	mov	arg03, local02
2f630     02 96 66 F0 | 	shl	arg03, #2
2f634     32 97 02 F1 | 	add	arg03, objptr
2f638     4B AB 0A FB | 	rdlong	local03, arg03 wz
2f63c     14 00 90 AD |  if_e	jmp	#LR__5060
2f640     01 AA 06 F1 | 	add	local03, #1
2f644     55 93 C2 FA | 	rdbyte	arg01, local03
2f648     01 AA 86 F1 | 	sub	local03, #1
2f64c     F8 2B B0 FD | 	call	#_fatfs_cc_disk_deinitialize
2f650     55 01 48 FC | 	wrbyte	#0, local03
2f654                 | LR__5060
2f654     04 CE 05 F1 | 	add	fp, #4
2f658     E7 AC 0A FB | 	rdlong	local04, fp wz
2f65c     04 CE 85 F1 | 	sub	fp, #4
2f660     04 CE 05 51 |  if_ne	add	fp, #4
2f664     E7 AC 02 5B |  if_ne	rdlong	local04, fp
2f668     04 CE 85 51 |  if_ne	sub	fp, #4
2f66c     56 01 48 5C |  if_ne	wrbyte	#0, local04
2f670     02 A8 66 F0 | 	shl	local02, #2
2f674     32 A9 02 F1 | 	add	local02, objptr
2f678     04 CE 05 F1 | 	add	fp, #4
2f67c     E7 AC 02 FB | 	rdlong	local04, fp
2f680     04 CE 85 F1 | 	sub	fp, #4
2f684     54 AD 62 FC | 	wrlong	local04, local02
2f688     07 A6 4E F7 | 	zerox	local01, #7 wz
2f68c     00 7A 06 A6 |  if_e	mov	result1, #0
2f690     1C 00 90 AD |  if_e	jmp	#LR__5061
2f694     08 CE 05 F1 | 	add	fp, #8
2f698     E7 92 02 F6 | 	mov	arg01, fp
2f69c     04 CE 85 F1 | 	sub	fp, #4
2f6a0     E7 94 02 F6 | 	mov	arg02, fp
2f6a4     04 CE 85 F1 | 	sub	fp, #4
2f6a8     00 96 06 F6 | 	mov	arg03, #0
2f6ac     94 F9 BF FD | 	call	#_fatfs_cc_mount_volume
2f6b0                 | ' 
2f6b0                 | ' 	res = mount_volume(&path, &fs, 0);
2f6b0                 | ' 	return res ;
2f6b0                 | LR__5061
2f6b0     E7 F0 03 F6 | 	mov	ptra, fp
2f6b4     F2 00 A0 FD | 	call	#popregs_
2f6b8                 | _fatfs_cc_f_mount_ret
2f6b8     2D 00 64 FD | 	ret
2f6bc                 | 
2f6bc                 | _fatfs_cc_f_open
2f6bc     08 CA 05 F6 | 	mov	COUNT_, #8
2f6c0     E8 00 A0 FD | 	call	#pushregs_
2f6c4     60 F0 07 F1 | 	add	ptra, #96
2f6c8     49 A7 0A F6 | 	mov	local01, arg01 wz
2f6cc     08 CE 05 F1 | 	add	fp, #8
2f6d0     E7 94 62 FC | 	wrlong	arg02, fp
2f6d4     08 CE 85 F1 | 	sub	fp, #8
2f6d8     4B A9 02 F6 | 	mov	local02, arg03
2f6dc     09 7A 06 A6 |  if_e	mov	result1, #9
2f6e0     24 04 90 AD |  if_e	jmp	#LR__5087
2f6e4     54 A9 E2 F8 | 	getbyte	local02, local02, #0
2f6e8     3F A8 06 F5 | 	and	local02, #63
2f6ec     08 CE 05 F1 | 	add	fp, #8
2f6f0     E7 92 02 F6 | 	mov	arg01, fp
2f6f4     3C CE 05 F1 | 	add	fp, #60
2f6f8     E7 94 02 F6 | 	mov	arg02, fp
2f6fc     44 CE 85 F1 | 	sub	fp, #68
2f700     54 97 02 F6 | 	mov	arg03, local02
2f704     3C F9 BF FD | 	call	#_fatfs_cc_mount_volume
2f708     3D AB 0A F6 | 	mov	local03, result1 wz
2f70c     EC 03 90 5D |  if_ne	jmp	#LR__5086
2f710     44 CE 05 F1 | 	add	fp, #68
2f714     E7 AA 02 FB | 	rdlong	local03, fp
2f718     30 CE 85 F1 | 	sub	fp, #48
2f71c     E7 AA 62 FC | 	wrlong	local03, fp
2f720     E7 92 02 F6 | 	mov	arg01, fp
2f724     0C CE 85 F1 | 	sub	fp, #12
2f728     E7 AC 02 FB | 	rdlong	local04, fp
2f72c     08 CE 85 F1 | 	sub	fp, #8
2f730     56 95 02 F6 | 	mov	arg02, local04
2f734     70 F4 BF FD | 	call	#_fatfs_cc_follow_path
2f738     3D AB 0A F6 | 	mov	local03, result1 wz
2f73c     18 00 90 5D |  if_ne	jmp	#LR__5070
2f740     3F CE 05 F1 | 	add	fp, #63
2f744     E7 AC C2 FA | 	rdbyte	local04, fp
2f748     3F CE 85 F1 | 	sub	fp, #63
2f74c     56 99 E2 F8 | 	getbyte	arg04, local04, #0
2f750     80 98 CE F7 | 	test	arg04, #128 wz
2f754     06 AA 06 56 |  if_ne	mov	local03, #6
2f758                 | LR__5070
2f758     54 99 E2 F8 | 	getbyte	arg04, local02, #0
2f75c     1C 98 CE F7 | 	test	arg04, #28 wz
2f760     5C 01 90 AD |  if_e	jmp	#LR__5075
2f764     00 AA 0E F2 | 	cmp	local03, #0 wz
2f768     24 00 90 AD |  if_e	jmp	#LR__5072
2f76c     04 AA 0E F2 | 	cmp	local03, #4 wz
2f770     10 00 90 5D |  if_ne	jmp	#LR__5071
2f774     E7 92 02 F6 | 	mov	arg01, fp
2f778     14 92 06 F1 | 	add	arg01, #20
2f77c     4C E8 BF FD | 	call	#_fatfs_cc_dir_register
2f780     3D AB 02 F6 | 	mov	local03, result1
2f784                 | LR__5071
2f784     54 A9 E2 F8 | 	getbyte	local02, local02, #0
2f788     08 A8 46 F5 | 	or	local02, #8
2f78c     24 00 90 FD | 	jmp	#LR__5074
2f790                 | LR__5072
2f790     1A CE 05 F1 | 	add	fp, #26
2f794     E7 AC C2 FA | 	rdbyte	local04, fp
2f798     1A CE 85 F1 | 	sub	fp, #26
2f79c     11 AC CE F7 | 	test	local04, #17 wz
2f7a0     07 AA 06 56 |  if_ne	mov	local03, #7
2f7a4     0C 00 90 5D |  if_ne	jmp	#LR__5073
2f7a8     54 AD E2 F8 | 	getbyte	local04, local02, #0
2f7ac     04 AC CE F7 | 	test	local04, #4 wz
2f7b0     08 AA 06 56 |  if_ne	mov	local03, #8
2f7b4                 | LR__5073
2f7b4                 | LR__5074
2f7b4     00 AA 0E F2 | 	cmp	local03, #0 wz
2f7b8     40 01 90 5D |  if_ne	jmp	#LR__5078
2f7bc     54 AD E2 F8 | 	getbyte	local04, local02, #0
2f7c0     08 AC CE F7 | 	test	local04, #8 wz
2f7c4     34 01 90 AD |  if_e	jmp	#LR__5078
2f7c8     C0 1B B0 FD | 	call	#_fatfs_cc__get_fattime
2f7cc     30 CE 05 F1 | 	add	fp, #48
2f7d0     E7 92 02 FB | 	rdlong	arg01, fp
2f7d4     0E 92 06 F1 | 	add	arg01, #14
2f7d8     49 7B 62 FC | 	wrlong	result1, arg01
2f7dc     E7 92 02 FB | 	rdlong	arg01, fp
2f7e0     16 92 06 F1 | 	add	arg01, #22
2f7e4     49 7B 62 FC | 	wrlong	result1, arg01
2f7e8     14 CE 05 F1 | 	add	fp, #20
2f7ec     E7 92 02 FB | 	rdlong	arg01, fp
2f7f0     14 CE 85 F1 | 	sub	fp, #20
2f7f4     E7 94 02 FB | 	rdlong	arg02, fp
2f7f8     30 CE 85 F1 | 	sub	fp, #48
2f7fc     C0 DE BF FD | 	call	#_fatfs_cc_ld_clust
2f800     3D AD 02 F6 | 	mov	local04, result1
2f804     30 CE 05 F1 | 	add	fp, #48
2f808     E7 98 02 FB | 	rdlong	arg04, fp
2f80c     0B 98 06 F1 | 	add	arg04, #11
2f810     4C 41 48 FC | 	wrbyte	#32, arg04
2f814     14 CE 05 F1 | 	add	fp, #20
2f818     E7 92 02 FB | 	rdlong	arg01, fp
2f81c     14 CE 85 F1 | 	sub	fp, #20
2f820     E7 94 02 FB | 	rdlong	arg02, fp
2f824     30 CE 85 F1 | 	sub	fp, #48
2f828     00 96 06 F6 | 	mov	arg03, #0
2f82c     C4 DE BF FD | 	call	#_fatfs_cc_st_clust
2f830     30 CE 05 F1 | 	add	fp, #48
2f834     E7 92 02 FB | 	rdlong	arg01, fp
2f838     1C 92 06 F1 | 	add	arg01, #28
2f83c     49 01 68 FC | 	wrlong	#0, arg01
2f840     14 CE 05 F1 | 	add	fp, #20
2f844     E7 98 02 FB | 	rdlong	arg04, fp
2f848     44 CE 85 F1 | 	sub	fp, #68
2f84c     03 98 06 F1 | 	add	arg04, #3
2f850     4C 03 48 FC | 	wrbyte	#1, arg04
2f854     00 AC 0E F2 | 	cmp	local04, #0 wz
2f858     A0 00 90 AD |  if_e	jmp	#LR__5078
2f85c     44 CE 05 F1 | 	add	fp, #68
2f860     E7 AA 02 FB | 	rdlong	local03, fp
2f864     30 AA 06 F1 | 	add	local03, #48
2f868     55 AF 02 FB | 	rdlong	local05, local03
2f86c     30 CE 85 F1 | 	sub	fp, #48
2f870     E7 92 02 F6 | 	mov	arg01, fp
2f874     14 CE 85 F1 | 	sub	fp, #20
2f878     56 95 02 F6 | 	mov	arg02, local04
2f87c     00 96 06 F6 | 	mov	arg03, #0
2f880     70 D6 BF FD | 	call	#_fatfs_cc_remove_chain
2f884     3D AB 0A F6 | 	mov	local03, result1 wz
2f888     70 00 90 5D |  if_ne	jmp	#LR__5078
2f88c     44 CE 05 F1 | 	add	fp, #68
2f890     E7 92 02 FB | 	rdlong	arg01, fp
2f894     44 CE 85 F1 | 	sub	fp, #68
2f898     57 95 02 F6 | 	mov	arg02, local05
2f89c     E8 D0 BF FD | 	call	#_fatfs_cc_move_window
2f8a0     3D AB 02 F6 | 	mov	local03, result1
2f8a4     44 CE 05 F1 | 	add	fp, #68
2f8a8     E7 AE 02 FB | 	rdlong	local05, fp
2f8ac     44 CE 85 F1 | 	sub	fp, #68
2f8b0     01 AC 86 F1 | 	sub	local04, #1
2f8b4     10 AE 06 F1 | 	add	local05, #16
2f8b8     57 AD 62 FC | 	wrlong	local04, local05
2f8bc     3C 00 90 FD | 	jmp	#LR__5078
2f8c0                 | LR__5075
2f8c0     00 AA 0E F2 | 	cmp	local03, #0 wz
2f8c4     34 00 90 5D |  if_ne	jmp	#LR__5077
2f8c8     1A CE 05 F1 | 	add	fp, #26
2f8cc     E7 AE C2 FA | 	rdbyte	local05, fp
2f8d0     1A CE 85 F1 | 	sub	fp, #26
2f8d4     10 AE CE F7 | 	test	local05, #16 wz
2f8d8     04 AA 06 56 |  if_ne	mov	local03, #4
2f8dc     1C 00 90 5D |  if_ne	jmp	#LR__5076
2f8e0     54 AF E2 F8 | 	getbyte	local05, local02, #0
2f8e4     02 AE CE F7 | 	test	local05, #2 wz
2f8e8     1A CE 05 51 |  if_ne	add	fp, #26
2f8ec     E7 AC C2 5A |  if_ne	rdbyte	local04, fp
2f8f0     1A CE 85 51 |  if_ne	sub	fp, #26
2f8f4     01 AC CE 57 |  if_ne	test	local04, #1 wz
2f8f8     07 AA 06 56 |  if_ne	mov	local03, #7
2f8fc                 | LR__5076
2f8fc                 | LR__5077
2f8fc                 | LR__5078
2f8fc     00 AA 0E F2 | 	cmp	local03, #0 wz
2f900     40 00 90 5D |  if_ne	jmp	#LR__5079
2f904     54 AF E2 F8 | 	getbyte	local05, local02, #0
2f908     08 AE CE F7 | 	test	local05, #8 wz
2f90c     54 A9 E2 58 |  if_ne	getbyte	local02, local02, #0
2f910     40 A8 46 55 |  if_ne	or	local02, #64
2f914     44 CE 05 F1 | 	add	fp, #68
2f918     E7 AE 02 FB | 	rdlong	local05, fp
2f91c     30 AE 06 F1 | 	add	local05, #48
2f920     57 AF 02 FB | 	rdlong	local05, local05
2f924     20 A6 06 F1 | 	add	local01, #32
2f928     53 AF 62 FC | 	wrlong	local05, local01
2f92c     14 CE 85 F1 | 	sub	fp, #20
2f930     E7 AE 02 FB | 	rdlong	local05, fp
2f934     30 CE 85 F1 | 	sub	fp, #48
2f938     04 A6 06 F1 | 	add	local01, #4
2f93c     53 AF 62 FC | 	wrlong	local05, local01
2f940     24 A6 86 F1 | 	sub	local01, #36
2f944                 | LR__5079
2f944     00 AA 0E F2 | 	cmp	local03, #0 wz
2f948     B0 01 90 5D |  if_ne	jmp	#LR__5085
2f94c     44 CE 05 F1 | 	add	fp, #68
2f950     E7 92 02 FB | 	rdlong	arg01, fp
2f954     14 CE 85 F1 | 	sub	fp, #20
2f958     E7 94 02 FB | 	rdlong	arg02, fp
2f95c     30 CE 85 F1 | 	sub	fp, #48
2f960     5C DD BF FD | 	call	#_fatfs_cc_ld_clust
2f964     08 A6 06 F1 | 	add	local01, #8
2f968     53 7B 62 FC | 	wrlong	result1, local01
2f96c     30 CE 05 F1 | 	add	fp, #48
2f970     E7 92 02 FB | 	rdlong	arg01, fp
2f974     1C 92 06 F1 | 	add	arg01, #28
2f978                 | ' {
2f978                 | ' 
2f978                 | ' 	return *((DWORD*)ptr);
2f978     49 7B 02 FB | 	rdlong	result1, arg01
2f97c     04 A6 06 F1 | 	add	local01, #4
2f980     53 7B 62 FC | 	wrlong	result1, local01
2f984     0C A6 86 F1 | 	sub	local01, #12
2f988     14 CE 05 F1 | 	add	fp, #20
2f98c     E7 AE 02 FB | 	rdlong	local05, fp
2f990     53 AF 62 FC | 	wrlong	local05, local01
2f994     E7 AE 02 FB | 	rdlong	local05, fp
2f998     44 CE 85 F1 | 	sub	fp, #68
2f99c     06 AE 06 F1 | 	add	local05, #6
2f9a0     57 AD E2 FA | 	rdword	local04, local05
2f9a4     04 A6 06 F1 | 	add	local01, #4
2f9a8     53 AD 52 FC | 	wrword	local04, local01
2f9ac     0C A6 06 F1 | 	add	local01, #12
2f9b0     53 A9 42 FC | 	wrbyte	local02, local01
2f9b4     01 A6 06 F1 | 	add	local01, #1
2f9b8     53 01 48 FC | 	wrbyte	#0, local01
2f9bc     0B A6 06 F1 | 	add	local01, #11
2f9c0     53 01 68 FC | 	wrlong	#0, local01
2f9c4     08 A6 86 F1 | 	sub	local01, #8
2f9c8     53 01 68 FC | 	wrlong	#0, local01
2f9cc     14 A6 06 F1 | 	add	local01, #20
2f9d0     53 93 02 F6 | 	mov	arg01, local01
2f9d4     28 A6 86 F1 | 	sub	local01, #40
2f9d8     00 94 06 F6 | 	mov	arg02, #0
2f9dc     09 96 C6 F9 | 	decod	arg03, #9
2f9e0     D8 00 A0 FD | 	call	#\builtin_bytefill_
2f9e4     54 A9 E2 F8 | 	getbyte	local02, local02, #0
2f9e8     20 A8 CE F7 | 	test	local02, #32 wz
2f9ec     0C 01 90 AD |  if_e	jmp	#LR__5084
2f9f0     0C A6 06 F1 | 	add	local01, #12
2f9f4     53 AD 02 FB | 	rdlong	local04, local01
2f9f8     0C A6 86 F1 | 	sub	local01, #12
2f9fc     01 AC 16 F2 | 	cmp	local04, #1 wc
2fa00     F8 00 90 CD |  if_b	jmp	#LR__5084
2fa04     0C A6 06 F1 | 	add	local01, #12
2fa08     53 AD 02 FB | 	rdlong	local04, local01
2fa0c     08 A6 06 F1 | 	add	local01, #8
2fa10     53 AD 62 FC | 	wrlong	local04, local01
2fa14     44 CE 05 F1 | 	add	fp, #68
2fa18     E7 AC 02 FB | 	rdlong	local04, fp
2fa1c     44 CE 85 F1 | 	sub	fp, #68
2fa20     0A AC 06 F1 | 	add	local04, #10
2fa24     56 B1 E2 FA | 	rdword	local06, local04
2fa28     09 B0 66 F0 | 	shl	local06, #9
2fa2c     0C A6 86 F1 | 	sub	local01, #12
2fa30     53 B3 02 FB | 	rdlong	local07, local01
2fa34                 | ' 				fp->fptr = fp->obj.objsize;
2fa34                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
2fa34                 | ' 				clst = fp->obj.sclust;
2fa34                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2fa34     04 A6 06 F1 | 	add	local01, #4
2fa38     53 B5 02 FB | 	rdlong	local08, local01
2fa3c     0C A6 86 F1 | 	sub	local01, #12
2fa40                 | LR__5080
2fa40     00 AA 0E F2 | 	cmp	local03, #0 wz
2fa44     34 00 90 5D |  if_ne	jmp	#LR__5081
2fa48     58 B5 1A F2 | 	cmp	local08, local06 wcz
2fa4c     2C 00 90 ED |  if_be	jmp	#LR__5081
2fa50     53 93 02 F6 | 	mov	arg01, local01
2fa54     59 95 02 F6 | 	mov	arg02, local07
2fa58     E4 D0 BF FD | 	call	#_fatfs_cc_get_fat
2fa5c     3D B3 02 F6 | 	mov	local07, result1
2fa60     02 B2 16 F2 | 	cmp	local07, #2 wc
2fa64     02 AA 06 C6 |  if_b	mov	local03, #2
2fa68     FF FF 7F FF 
2fa6c     FF B3 0E F2 | 	cmp	local07, ##-1 wz
2fa70     01 AA 06 A6 |  if_e	mov	local03, #1
2fa74     58 B5 82 F1 | 	sub	local08, local06
2fa78     C4 FF 9F FD | 	jmp	#LR__5080
2fa7c                 | LR__5081
2fa7c     18 A6 06 F1 | 	add	local01, #24
2fa80     53 B3 62 FC | 	wrlong	local07, local01
2fa84     18 A6 86 F1 | 	sub	local01, #24
2fa88     00 AA 0E F2 | 	cmp	local03, #0 wz
2fa8c     6C 00 90 5D |  if_ne	jmp	#LR__5083
2fa90     FF B5 CE F7 | 	test	local08, #511 wz
2fa94     64 00 90 AD |  if_e	jmp	#LR__5083
2fa98     44 CE 05 F1 | 	add	fp, #68
2fa9c     E7 92 02 FB | 	rdlong	arg01, fp
2faa0     44 CE 85 F1 | 	sub	fp, #68
2faa4     59 95 02 F6 | 	mov	arg02, local07
2faa8     54 D0 BF FD | 	call	#_fatfs_cc_clst2sect
2faac     3D AF 0A F6 | 	mov	local05, result1 wz
2fab0     02 AA 06 A6 |  if_e	mov	local03, #2
2fab4     44 00 90 AD |  if_e	jmp	#LR__5082
2fab8     09 B4 46 F0 | 	shr	local08, #9
2fabc     5A AF 02 F1 | 	add	local05, local08
2fac0     1C A6 06 F1 | 	add	local01, #28
2fac4     53 AF 62 FC | 	wrlong	local05, local01
2fac8     44 CE 05 F1 | 	add	fp, #68
2facc     E7 AC 02 FB | 	rdlong	local04, fp
2fad0     44 CE 85 F1 | 	sub	fp, #68
2fad4     01 AC 06 F1 | 	add	local04, #1
2fad8     56 93 C2 FA | 	rdbyte	arg01, local04
2fadc     53 95 02 F6 | 	mov	arg02, local01
2fae0     0C 94 06 F1 | 	add	arg02, #12
2fae4     57 97 02 F6 | 	mov	arg03, local05
2fae8     1C A6 86 F1 | 	sub	local01, #28
2faec     01 98 06 F6 | 	mov	arg04, #1
2faf0     0C C8 BF FD | 	call	#_fatfs_cc_disk_read
2faf4     00 7A 0E F2 | 	cmp	result1, #0 wz
2faf8     01 AA 06 56 |  if_ne	mov	local03, #1
2fafc                 | LR__5082
2fafc                 | LR__5083
2fafc                 | LR__5084
2fafc                 | LR__5085
2fafc                 | LR__5086
2fafc     00 AA 0E F2 | 	cmp	local03, #0 wz
2fb00     53 01 68 5C |  if_ne	wrlong	#0, local01
2fb04                 | ' 
2fb04                 | ' 	return res ;
2fb04     55 7B 02 F6 | 	mov	result1, local03
2fb08                 | LR__5087
2fb08     E7 F0 03 F6 | 	mov	ptra, fp
2fb0c     F2 00 A0 FD | 	call	#popregs_
2fb10                 | _fatfs_cc_f_open_ret
2fb10     2D 00 64 FD | 	ret
2fb14                 | 
2fb14                 | _fatfs_cc_f_read
2fb14     0E CA 05 F6 | 	mov	COUNT_, #14
2fb18     E8 00 A0 FD | 	call	#pushregs_
2fb1c     38 F0 07 F1 | 	add	ptra, #56
2fb20     49 A7 02 F6 | 	mov	local01, arg01
2fb24     4A A9 02 F6 | 	mov	local02, arg02
2fb28     4B AB 02 F6 | 	mov	local03, arg03
2fb2c     4C AD 02 F6 | 	mov	local04, arg04
2fb30     54 AF 02 F6 | 	mov	local05, local02
2fb34     56 01 68 FC | 	wrlong	#0, local04
2fb38     E7 94 02 F6 | 	mov	arg02, fp
2fb3c     18 94 06 F1 | 	add	arg02, #24
2fb40     53 93 02 F6 | 	mov	arg01, local01
2fb44     2C FA BF FD | 	call	#_fatfs_cc_validate
2fb48     3D B1 0A F6 | 	mov	local06, result1 wz
2fb4c     11 A6 06 A1 |  if_e	add	local01, #17
2fb50     53 B1 C2 AA |  if_e	rdbyte	local06, local01
2fb54     11 A6 86 A1 |  if_e	sub	local01, #17
2fb58     00 B0 4E A2 |  if_e	cmps	local06, #0 wz
2fb5c     58 7B 02 56 |  if_ne	mov	result1, local06
2fb60     3C 03 90 5D |  if_ne	jmp	#LR__5101
2fb64     10 A6 06 F1 | 	add	local01, #16
2fb68     53 B3 C2 FA | 	rdbyte	local07, local01
2fb6c     10 A6 86 F1 | 	sub	local01, #16
2fb70     01 B2 CE F7 | 	test	local07, #1 wz
2fb74     07 7A 06 A6 |  if_e	mov	result1, #7
2fb78     24 03 90 AD |  if_e	jmp	#LR__5101
2fb7c     0C A6 06 F1 | 	add	local01, #12
2fb80     53 B5 02 FB | 	rdlong	local08, local01
2fb84     08 A6 06 F1 | 	add	local01, #8
2fb88     53 B7 02 FB | 	rdlong	local09, local01
2fb8c     14 A6 86 F1 | 	sub	local01, #20
2fb90     5B B5 82 F1 | 	sub	local08, local09
2fb94     5A AB 3A F3 | 	fle	local03, local08 wcz
2fb98                 | ' 
2fb98                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
2fb98                 | LR__5090
2fb98     01 AA 16 F2 | 	cmp	local03, #1 wc
2fb9c     FC 02 90 CD |  if_b	jmp	#LR__5100
2fba0     14 A6 06 F1 | 	add	local01, #20
2fba4     53 B3 02 FB | 	rdlong	local07, local01
2fba8     14 A6 86 F1 | 	sub	local01, #20
2fbac     FF B3 CE F7 | 	test	local07, #511 wz
2fbb0     80 02 90 5D |  if_ne	jmp	#LR__5098
2fbb4     14 A6 06 F1 | 	add	local01, #20
2fbb8     53 B9 02 FB | 	rdlong	local10, local01
2fbbc     14 A6 86 F1 | 	sub	local01, #20
2fbc0     09 B8 46 F0 | 	shr	local10, #9
2fbc4     18 CE 05 F1 | 	add	fp, #24
2fbc8     E7 B2 02 FB | 	rdlong	local07, fp
2fbcc     18 CE 85 F1 | 	sub	fp, #24
2fbd0     0A B2 06 F1 | 	add	local07, #10
2fbd4     59 B3 E2 FA | 	rdword	local07, local07
2fbd8     01 B2 86 F1 | 	sub	local07, #1
2fbdc     59 B9 0A F5 | 	and	local10, local07 wz
2fbe0     6C 00 90 5D |  if_ne	jmp	#LR__5092
2fbe4     14 A6 06 F1 | 	add	local01, #20
2fbe8     53 B3 0A FB | 	rdlong	local07, local01 wz
2fbec     14 A6 86 F1 | 	sub	local01, #20
2fbf0     08 A6 06 A1 |  if_e	add	local01, #8
2fbf4     53 BB 02 AB |  if_e	rdlong	local11, local01
2fbf8     08 A6 86 A1 |  if_e	sub	local01, #8
2fbfc     18 00 90 AD |  if_e	jmp	#LR__5091
2fc00     53 93 02 F6 | 	mov	arg01, local01
2fc04     18 A6 06 F1 | 	add	local01, #24
2fc08     53 95 02 FB | 	rdlong	arg02, local01
2fc0c     18 A6 86 F1 | 	sub	local01, #24
2fc10     2C CF BF FD | 	call	#_fatfs_cc_get_fat
2fc14     3D BB 02 F6 | 	mov	local11, result1
2fc18                 | LR__5091
2fc18     02 BA 16 F2 | 	cmp	local11, #2 wc
2fc1c     11 A6 06 C1 |  if_b	add	local01, #17
2fc20     53 05 48 CC |  if_b	wrbyte	#2, local01
2fc24     02 7A 06 C6 |  if_b	mov	result1, #2
2fc28     74 02 90 CD |  if_b	jmp	#LR__5101
2fc2c     FF FF 7F FF 
2fc30     FF BB 0E F2 | 	cmp	local11, ##-1 wz
2fc34     11 A6 06 A1 |  if_e	add	local01, #17
2fc38     53 03 48 AC |  if_e	wrbyte	#1, local01
2fc3c     01 7A 06 A6 |  if_e	mov	result1, #1
2fc40     5C 02 90 AD |  if_e	jmp	#LR__5101
2fc44     18 A6 06 F1 | 	add	local01, #24
2fc48     53 BB 62 FC | 	wrlong	local11, local01
2fc4c     18 A6 86 F1 | 	sub	local01, #24
2fc50                 | LR__5092
2fc50     18 CE 05 F1 | 	add	fp, #24
2fc54     E7 92 02 FB | 	rdlong	arg01, fp
2fc58     18 CE 85 F1 | 	sub	fp, #24
2fc5c     18 A6 06 F1 | 	add	local01, #24
2fc60     53 95 02 FB | 	rdlong	arg02, local01
2fc64     18 A6 86 F1 | 	sub	local01, #24
2fc68     94 CE BF FD | 	call	#_fatfs_cc_clst2sect
2fc6c     3D BD 0A F6 | 	mov	local12, result1 wz
2fc70     11 A6 06 A1 |  if_e	add	local01, #17
2fc74     53 05 48 AC |  if_e	wrbyte	#2, local01
2fc78     02 7A 06 A6 |  if_e	mov	result1, #2
2fc7c     20 02 90 AD |  if_e	jmp	#LR__5101
2fc80     5C BD 02 F1 | 	add	local12, local10
2fc84     55 BF 02 F6 | 	mov	local13, local03
2fc88     09 BE 46 F0 | 	shr	local13, #9
2fc8c     01 BE 16 F2 | 	cmp	local13, #1 wc
2fc90     D8 00 90 CD |  if_b	jmp	#LR__5095
2fc94     5C B3 02 F6 | 	mov	local07, local10
2fc98     5F B3 02 F1 | 	add	local07, local13
2fc9c     18 CE 05 F1 | 	add	fp, #24
2fca0     E7 B6 02 FB | 	rdlong	local09, fp
2fca4     18 CE 85 F1 | 	sub	fp, #24
2fca8     0A B6 06 F1 | 	add	local09, #10
2fcac     5B 7B E2 FA | 	rdword	result1, local09
2fcb0     3D B3 1A F2 | 	cmp	local07, result1 wcz
2fcb4     18 00 90 ED |  if_be	jmp	#LR__5093
2fcb8     18 CE 05 F1 | 	add	fp, #24
2fcbc     E7 BE 02 FB | 	rdlong	local13, fp
2fcc0     18 CE 85 F1 | 	sub	fp, #24
2fcc4     0A BE 06 F1 | 	add	local13, #10
2fcc8     5F BF E2 FA | 	rdword	local13, local13
2fccc     5C BF 82 F1 | 	sub	local13, local10
2fcd0                 | LR__5093
2fcd0     18 CE 05 F1 | 	add	fp, #24
2fcd4     E7 B2 02 FB | 	rdlong	local07, fp
2fcd8     18 CE 85 F1 | 	sub	fp, #24
2fcdc     01 B2 06 F1 | 	add	local07, #1
2fce0     59 93 C2 FA | 	rdbyte	arg01, local07
2fce4     57 95 02 F6 | 	mov	arg02, local05
2fce8     5F 99 02 F6 | 	mov	arg04, local13
2fcec     5E 97 02 F6 | 	mov	arg03, local12
2fcf0     0C C6 BF FD | 	call	#_fatfs_cc_disk_read
2fcf4     00 7A 0E F2 | 	cmp	result1, #0 wz
2fcf8     11 A6 06 51 |  if_ne	add	local01, #17
2fcfc     53 03 48 5C |  if_ne	wrbyte	#1, local01
2fd00     01 7A 06 56 |  if_ne	mov	result1, #1
2fd04     98 01 90 5D |  if_ne	jmp	#LR__5101
2fd08     10 A6 06 F1 | 	add	local01, #16
2fd0c     53 B3 C2 FA | 	rdbyte	local07, local01
2fd10     10 A6 86 F1 | 	sub	local01, #16
2fd14     80 B2 CE F7 | 	test	local07, #128 wz
2fd18     44 00 90 AD |  if_e	jmp	#LR__5094
2fd1c     1C A6 06 F1 | 	add	local01, #28
2fd20     53 B7 02 FB | 	rdlong	local09, local01
2fd24     1C A6 86 F1 | 	sub	local01, #28
2fd28     5E B7 82 F1 | 	sub	local09, local12
2fd2c     5F B7 12 F2 | 	cmp	local09, local13 wc
2fd30     2C 00 90 3D |  if_ae	jmp	#LR__5094
2fd34     57 93 02 F6 | 	mov	arg01, local05
2fd38     1C A6 06 F1 | 	add	local01, #28
2fd3c     53 B9 02 FB | 	rdlong	local10, local01
2fd40     5E B9 82 F1 | 	sub	local10, local12
2fd44     09 B8 66 F0 | 	shl	local10, #9
2fd48     5C 93 02 F1 | 	add	arg01, local10
2fd4c     0C A6 06 F1 | 	add	local01, #12
2fd50     53 95 02 F6 | 	mov	arg02, local01
2fd54     28 A6 86 F1 | 	sub	local01, #40
2fd58     09 96 C6 F9 | 	decod	arg03, #9
2fd5c     28 4B BF FD | 	call	#__system____builtin_memmove
2fd60                 | LR__5094
2fd60     09 BE 66 F0 | 	shl	local13, #9
2fd64     5F C1 02 F6 | 	mov	local14, local13
2fd68                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
2fd68                 | ' 				}
2fd68                 | ' 
2fd68                 | ' 
2fd68                 | ' 				rcnt =  ((UINT) 512 )  * cc;
2fd68                 | ' 				continue;
2fd68     04 01 90 FD | 	jmp	#LR__5099
2fd6c                 | LR__5095
2fd6c     1C A6 06 F1 | 	add	local01, #28
2fd70     53 B3 02 FB | 	rdlong	local07, local01
2fd74     1C A6 86 F1 | 	sub	local01, #28
2fd78     5E B3 0A F2 | 	cmp	local07, local12 wz
2fd7c     A8 00 90 AD |  if_e	jmp	#LR__5097
2fd80     10 A6 06 F1 | 	add	local01, #16
2fd84     53 B3 C2 FA | 	rdbyte	local07, local01
2fd88     10 A6 86 F1 | 	sub	local01, #16
2fd8c     80 B2 CE F7 | 	test	local07, #128 wz
2fd90     58 00 90 AD |  if_e	jmp	#LR__5096
2fd94     18 CE 05 F1 | 	add	fp, #24
2fd98     E7 C0 02 FB | 	rdlong	local14, fp
2fd9c     18 CE 85 F1 | 	sub	fp, #24
2fda0     01 C0 06 F1 | 	add	local14, #1
2fda4     60 93 C2 FA | 	rdbyte	arg01, local14
2fda8     28 A6 06 F1 | 	add	local01, #40
2fdac     53 95 02 F6 | 	mov	arg02, local01
2fdb0     0C A6 86 F1 | 	sub	local01, #12
2fdb4     53 97 02 FB | 	rdlong	arg03, local01
2fdb8     1C A6 86 F1 | 	sub	local01, #28
2fdbc     01 98 06 F6 | 	mov	arg04, #1
2fdc0     78 C6 BF FD | 	call	#_fatfs_cc_disk_write
2fdc4     00 7A 0E F2 | 	cmp	result1, #0 wz
2fdc8     11 A6 06 51 |  if_ne	add	local01, #17
2fdcc     53 03 48 5C |  if_ne	wrbyte	#1, local01
2fdd0     01 7A 06 56 |  if_ne	mov	result1, #1
2fdd4     C8 00 90 5D |  if_ne	jmp	#LR__5101
2fdd8     10 A6 06 F1 | 	add	local01, #16
2fddc     53 B3 C2 FA | 	rdbyte	local07, local01
2fde0     7F B2 06 F5 | 	and	local07, #127
2fde4     53 B3 42 FC | 	wrbyte	local07, local01
2fde8     10 A6 86 F1 | 	sub	local01, #16
2fdec                 | LR__5096
2fdec     18 CE 05 F1 | 	add	fp, #24
2fdf0     E7 C0 02 FB | 	rdlong	local14, fp
2fdf4     18 CE 85 F1 | 	sub	fp, #24
2fdf8     01 C0 06 F1 | 	add	local14, #1
2fdfc     60 93 C2 FA | 	rdbyte	arg01, local14
2fe00     53 95 02 F6 | 	mov	arg02, local01
2fe04     28 94 06 F1 | 	add	arg02, #40
2fe08     5E 97 02 F6 | 	mov	arg03, local12
2fe0c     01 98 06 F6 | 	mov	arg04, #1
2fe10     EC C4 BF FD | 	call	#_fatfs_cc_disk_read
2fe14     00 7A 0E F2 | 	cmp	result1, #0 wz
2fe18     11 A6 06 51 |  if_ne	add	local01, #17
2fe1c     53 03 48 5C |  if_ne	wrbyte	#1, local01
2fe20     01 7A 06 56 |  if_ne	mov	result1, #1
2fe24     78 00 90 5D |  if_ne	jmp	#LR__5101
2fe28                 | LR__5097
2fe28     1C A6 06 F1 | 	add	local01, #28
2fe2c     53 BD 62 FC | 	wrlong	local12, local01
2fe30     1C A6 86 F1 | 	sub	local01, #28
2fe34                 | LR__5098
2fe34     14 A6 06 F1 | 	add	local01, #20
2fe38     53 BF 02 FB | 	rdlong	local13, local01
2fe3c     FF BF 06 F5 | 	and	local13, #511
2fe40     09 C0 C6 F9 | 	decod	local14, #9
2fe44     5F C1 82 F1 | 	sub	local14, local13
2fe48     55 C1 3A F3 | 	fle	local14, local03 wcz
2fe4c     53 95 02 F6 | 	mov	arg02, local01
2fe50     14 94 06 F1 | 	add	arg02, #20
2fe54     53 BF 02 FB | 	rdlong	local13, local01
2fe58     14 A6 86 F1 | 	sub	local01, #20
2fe5c     FF BF 06 F5 | 	and	local13, #511
2fe60     5F 95 02 F1 | 	add	arg02, local13
2fe64     57 93 02 F6 | 	mov	arg01, local05
2fe68     60 97 02 F6 | 	mov	arg03, local14
2fe6c     18 4A BF FD | 	call	#__system____builtin_memmove
2fe70                 | LR__5099
2fe70     60 AB 82 F1 | 	sub	local03, local14
2fe74     56 B3 02 FB | 	rdlong	local07, local04
2fe78     60 B3 02 F1 | 	add	local07, local14
2fe7c     56 B3 62 FC | 	wrlong	local07, local04
2fe80     60 AF 02 F1 | 	add	local05, local14
2fe84     14 A6 06 F1 | 	add	local01, #20
2fe88     53 B3 02 FB | 	rdlong	local07, local01
2fe8c     60 B3 02 F1 | 	add	local07, local14
2fe90     53 B3 62 FC | 	wrlong	local07, local01
2fe94     14 A6 86 F1 | 	sub	local01, #20
2fe98     FC FC 9F FD | 	jmp	#LR__5090
2fe9c                 | LR__5100
2fe9c                 | ' 
2fe9c                 | ' 
2fe9c                 | ' 
2fe9c                 | ' 
2fe9c                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
2fe9c                 | ' 
2fe9c                 | ' 	}
2fe9c                 | ' 
2fe9c                 | ' 	return FR_OK ;
2fe9c     00 7A 06 F6 | 	mov	result1, #0
2fea0                 | LR__5101
2fea0     E7 F0 03 F6 | 	mov	ptra, fp
2fea4     F2 00 A0 FD | 	call	#popregs_
2fea8                 | _fatfs_cc_f_read_ret
2fea8     2D 00 64 FD | 	ret
2feac                 | 
2feac                 | _fatfs_cc_f_write
2feac     12 CA 05 F6 | 	mov	COUNT_, #18
2feb0     E8 00 A0 FD | 	call	#pushregs_
2feb4     34 F0 07 F1 | 	add	ptra, #52
2feb8     49 A7 02 F6 | 	mov	local01, arg01
2febc     4A A9 02 F6 | 	mov	local02, arg02
2fec0     4B AB 02 F6 | 	mov	local03, arg03
2fec4     4C AD 02 F6 | 	mov	local04, arg04
2fec8     54 AF 02 F6 | 	mov	local05, local02
2fecc     56 01 68 FC | 	wrlong	#0, local04
2fed0     E7 94 02 F6 | 	mov	arg02, fp
2fed4     18 94 06 F1 | 	add	arg02, #24
2fed8     53 93 02 F6 | 	mov	arg01, local01
2fedc     94 F6 BF FD | 	call	#_fatfs_cc_validate
2fee0     3D B1 0A F6 | 	mov	local06, result1 wz
2fee4     11 A6 06 A1 |  if_e	add	local01, #17
2fee8     53 B1 C2 AA |  if_e	rdbyte	local06, local01
2feec     11 A6 86 A1 |  if_e	sub	local01, #17
2fef0     00 B0 4E A2 |  if_e	cmps	local06, #0 wz
2fef4     58 7B 02 56 |  if_ne	mov	result1, local06
2fef8     F4 03 90 5D |  if_ne	jmp	#LR__5122
2fefc     10 A6 06 F1 | 	add	local01, #16
2ff00     53 B3 C2 FA | 	rdbyte	local07, local01
2ff04     10 A6 86 F1 | 	sub	local01, #16
2ff08     02 B2 CE F7 | 	test	local07, #2 wz
2ff0c     07 7A 06 A6 |  if_e	mov	result1, #7
2ff10     DC 03 90 AD |  if_e	jmp	#LR__5122
2ff14     14 A6 06 F1 | 	add	local01, #20
2ff18     53 B5 02 FB | 	rdlong	local08, local01
2ff1c     5A B7 02 F6 | 	mov	local09, local08
2ff20     55 B7 02 F1 | 	add	local09, local03
2ff24     14 A6 86 F1 | 	sub	local01, #20
2ff28     5A B7 12 F2 | 	cmp	local09, local08 wc
2ff2c     01 AA 66 C6 |  if_b	neg	local03, #1
2ff30     14 A6 06 C1 |  if_b	add	local01, #20
2ff34     53 B9 02 CB |  if_b	rdlong	local10, local01
2ff38     14 A6 86 C1 |  if_b	sub	local01, #20
2ff3c     5C AB 82 C1 |  if_b	sub	local03, local10
2ff40                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
2ff40                 | ' 	}
2ff40                 | ' 
2ff40                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
2ff40                 | LR__5110
2ff40     01 AA 16 F2 | 	cmp	local03, #1 wc
2ff44     94 03 90 CD |  if_b	jmp	#LR__5121
2ff48     14 A6 06 F1 | 	add	local01, #20
2ff4c     53 B3 02 FB | 	rdlong	local07, local01
2ff50     14 A6 86 F1 | 	sub	local01, #20
2ff54     FF B3 CE F7 | 	test	local07, #511 wz
2ff58     D8 02 90 5D |  if_ne	jmp	#LR__5119
2ff5c     14 A6 06 F1 | 	add	local01, #20
2ff60     53 BB 02 FB | 	rdlong	local11, local01
2ff64     14 A6 86 F1 | 	sub	local01, #20
2ff68     09 BA 46 F0 | 	shr	local11, #9
2ff6c     18 CE 05 F1 | 	add	fp, #24
2ff70     E7 B4 02 FB | 	rdlong	local08, fp
2ff74     18 CE 85 F1 | 	sub	fp, #24
2ff78     5A BD 02 F6 | 	mov	local12, local08
2ff7c     0A BC 06 F1 | 	add	local12, #10
2ff80     5E BF E2 FA | 	rdword	local13, local12
2ff84     0A BC 86 F1 | 	sub	local12, #10
2ff88     5F B7 32 F9 | 	getword	local09, local13, #0
2ff8c     01 B6 86 F1 | 	sub	local09, #1
2ff90     5B BB 0A F5 | 	and	local11, local09 wz
2ff94     A0 00 90 5D |  if_ne	jmp	#LR__5113
2ff98     14 A6 06 F1 | 	add	local01, #20
2ff9c     53 B3 0A FB | 	rdlong	local07, local01 wz
2ffa0     14 A6 86 F1 | 	sub	local01, #20
2ffa4     24 00 90 5D |  if_ne	jmp	#LR__5111
2ffa8     08 A6 06 F1 | 	add	local01, #8
2ffac     53 C1 0A FB | 	rdlong	local14, local01 wz
2ffb0     08 A6 86 F1 | 	sub	local01, #8
2ffb4     2C 00 90 5D |  if_ne	jmp	#LR__5112
2ffb8     53 93 02 F6 | 	mov	arg01, local01
2ffbc     00 94 06 F6 | 	mov	arg02, #0
2ffc0     44 D0 BF FD | 	call	#_fatfs_cc_create_chain
2ffc4     3D C1 02 F6 | 	mov	local14, result1
2ffc8     18 00 90 FD | 	jmp	#LR__5112
2ffcc                 | LR__5111
2ffcc     53 93 02 F6 | 	mov	arg01, local01
2ffd0     18 A6 06 F1 | 	add	local01, #24
2ffd4     53 95 02 FB | 	rdlong	arg02, local01
2ffd8     18 A6 86 F1 | 	sub	local01, #24
2ffdc     28 D0 BF FD | 	call	#_fatfs_cc_create_chain
2ffe0     3D C1 02 F6 | 	mov	local14, result1
2ffe4                 | LR__5112
2ffe4     00 C0 0E F2 | 	cmp	local14, #0 wz
2ffe8     F0 02 90 AD |  if_e	jmp	#LR__5121
2ffec     01 C0 0E F2 | 	cmp	local14, #1 wz
2fff0     11 A6 06 A1 |  if_e	add	local01, #17
2fff4     53 05 48 AC |  if_e	wrbyte	#2, local01
2fff8     02 7A 06 A6 |  if_e	mov	result1, #2
2fffc     F0 02 90 AD |  if_e	jmp	#LR__5122
30000     FF FF 7F FF 
30004     FF C1 0E F2 | 	cmp	local14, ##-1 wz
30008     11 A6 06 A1 |  if_e	add	local01, #17
3000c     53 03 48 AC |  if_e	wrbyte	#1, local01
30010     01 7A 06 A6 |  if_e	mov	result1, #1
30014     D8 02 90 AD |  if_e	jmp	#LR__5122
30018     18 A6 06 F1 | 	add	local01, #24
3001c     53 C1 62 FC | 	wrlong	local14, local01
30020     10 A6 86 F1 | 	sub	local01, #16
30024     53 B3 0A FB | 	rdlong	local07, local01 wz
30028     08 A6 86 F1 | 	sub	local01, #8
3002c     08 A6 06 A1 |  if_e	add	local01, #8
30030     53 C1 62 AC |  if_e	wrlong	local14, local01
30034     08 A6 86 A1 |  if_e	sub	local01, #8
30038                 | LR__5113
30038     10 A6 06 F1 | 	add	local01, #16
3003c     53 B3 C2 FA | 	rdbyte	local07, local01
30040     10 A6 86 F1 | 	sub	local01, #16
30044     80 B2 CE F7 | 	test	local07, #128 wz
30048     58 00 90 AD |  if_e	jmp	#LR__5114
3004c     18 CE 05 F1 | 	add	fp, #24
30050     E7 B8 02 FB | 	rdlong	local10, fp
30054     18 CE 85 F1 | 	sub	fp, #24
30058     01 B8 06 F1 | 	add	local10, #1
3005c     5C 93 C2 FA | 	rdbyte	arg01, local10
30060     28 A6 06 F1 | 	add	local01, #40
30064     53 95 02 F6 | 	mov	arg02, local01
30068     0C A6 86 F1 | 	sub	local01, #12
3006c     53 97 02 FB | 	rdlong	arg03, local01
30070     1C A6 86 F1 | 	sub	local01, #28
30074     01 98 06 F6 | 	mov	arg04, #1
30078     C0 C3 BF FD | 	call	#_fatfs_cc_disk_write
3007c     00 7A 0E F2 | 	cmp	result1, #0 wz
30080     11 A6 06 51 |  if_ne	add	local01, #17
30084     53 03 48 5C |  if_ne	wrbyte	#1, local01
30088     01 7A 06 56 |  if_ne	mov	result1, #1
3008c     60 02 90 5D |  if_ne	jmp	#LR__5122
30090     10 A6 06 F1 | 	add	local01, #16
30094     53 B3 C2 FA | 	rdbyte	local07, local01
30098     7F B2 06 F5 | 	and	local07, #127
3009c     53 B3 42 FC | 	wrbyte	local07, local01
300a0     10 A6 86 F1 | 	sub	local01, #16
300a4                 | LR__5114
300a4     18 CE 05 F1 | 	add	fp, #24
300a8     E7 92 02 FB | 	rdlong	arg01, fp
300ac     18 CE 85 F1 | 	sub	fp, #24
300b0     18 A6 06 F1 | 	add	local01, #24
300b4     53 95 02 FB | 	rdlong	arg02, local01
300b8     18 A6 86 F1 | 	sub	local01, #24
300bc     40 CA BF FD | 	call	#_fatfs_cc_clst2sect
300c0     3D C3 0A F6 | 	mov	local15, result1 wz
300c4     11 A6 06 A1 |  if_e	add	local01, #17
300c8     53 05 48 AC |  if_e	wrbyte	#2, local01
300cc     02 7A 06 A6 |  if_e	mov	result1, #2
300d0     1C 02 90 AD |  if_e	jmp	#LR__5122
300d4     5D C3 02 F1 | 	add	local15, local11
300d8     55 C5 02 F6 | 	mov	local16, local03
300dc     09 C4 46 F0 | 	shr	local16, #9
300e0     01 C4 16 F2 | 	cmp	local16, #1 wc
300e4     D4 00 90 CD |  if_b	jmp	#LR__5117
300e8     5D B3 02 F6 | 	mov	local07, local11
300ec     62 B3 02 F1 | 	add	local07, local16
300f0     18 CE 05 F1 | 	add	fp, #24
300f4     E7 C6 02 FB | 	rdlong	local17, fp
300f8     18 CE 85 F1 | 	sub	fp, #24
300fc     0A C6 06 F1 | 	add	local17, #10
30100     63 B9 E2 FA | 	rdword	local10, local17
30104     5C B3 1A F2 | 	cmp	local07, local10 wcz
30108     18 00 90 ED |  if_be	jmp	#LR__5115
3010c     18 CE 05 F1 | 	add	fp, #24
30110     E7 B8 02 FB | 	rdlong	local10, fp
30114     18 CE 85 F1 | 	sub	fp, #24
30118     0A B8 06 F1 | 	add	local10, #10
3011c     5C C5 E2 FA | 	rdword	local16, local10
30120     5D C5 82 F1 | 	sub	local16, local11
30124                 | LR__5115
30124     18 CE 05 F1 | 	add	fp, #24
30128     E7 B8 02 FB | 	rdlong	local10, fp
3012c     18 CE 85 F1 | 	sub	fp, #24
30130     01 B8 06 F1 | 	add	local10, #1
30134     5C 93 C2 FA | 	rdbyte	arg01, local10
30138     57 95 02 F6 | 	mov	arg02, local05
3013c     61 97 02 F6 | 	mov	arg03, local15
30140     62 99 02 F6 | 	mov	arg04, local16
30144     F4 C2 BF FD | 	call	#_fatfs_cc_disk_write
30148     00 7A 0E F2 | 	cmp	result1, #0 wz
3014c     11 A6 06 51 |  if_ne	add	local01, #17
30150     53 03 48 5C |  if_ne	wrbyte	#1, local01
30154     01 7A 06 56 |  if_ne	mov	result1, #1
30158     94 01 90 5D |  if_ne	jmp	#LR__5122
3015c     1C A6 06 F1 | 	add	local01, #28
30160     53 B3 02 FB | 	rdlong	local07, local01
30164     1C A6 86 F1 | 	sub	local01, #28
30168     61 B3 82 F1 | 	sub	local07, local15
3016c     62 B3 12 F2 | 	cmp	local07, local16 wc
30170     3C 00 90 3D |  if_ae	jmp	#LR__5116
30174     28 A6 06 F1 | 	add	local01, #40
30178     53 93 02 F6 | 	mov	arg01, local01
3017c     57 95 02 F6 | 	mov	arg02, local05
30180     0C A6 86 F1 | 	sub	local01, #12
30184     53 BF 02 FB | 	rdlong	local13, local01
30188     61 BF 82 F1 | 	sub	local13, local15
3018c     09 BE 66 F0 | 	shl	local13, #9
30190     5F 95 02 F1 | 	add	arg02, local13
30194     09 96 C6 F9 | 	decod	arg03, #9
30198     EC 46 BF FD | 	call	#__system____builtin_memmove
3019c     0C A6 86 F1 | 	sub	local01, #12
301a0     53 B3 C2 FA | 	rdbyte	local07, local01
301a4     7F B2 06 F5 | 	and	local07, #127
301a8     53 B3 42 FC | 	wrbyte	local07, local01
301ac     10 A6 86 F1 | 	sub	local01, #16
301b0                 | LR__5116
301b0     62 C9 02 F6 | 	mov	local18, local16
301b4     09 C8 66 F0 | 	shl	local18, #9
301b8                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
301b8                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
301b8                 | ' 				}
301b8                 | ' 
301b8                 | ' 
301b8                 | ' 				wcnt =  ((UINT) 512 )  * cc;
301b8                 | ' 				continue;
301b8     C4 00 90 FD | 	jmp	#LR__5120
301bc                 | LR__5117
301bc     1C A6 06 F1 | 	add	local01, #28
301c0     53 B3 02 FB | 	rdlong	local07, local01
301c4     1C A6 86 F1 | 	sub	local01, #28
301c8     61 B3 0A F2 | 	cmp	local07, local15 wz
301cc     58 00 90 AD |  if_e	jmp	#LR__5118
301d0     14 A6 06 F1 | 	add	local01, #20
301d4     53 C7 02 FB | 	rdlong	local17, local01
301d8     08 A6 86 F1 | 	sub	local01, #8
301dc     53 BD 02 FB | 	rdlong	local12, local01
301e0     0C A6 86 F1 | 	sub	local01, #12
301e4     5E C7 12 F2 | 	cmp	local17, local12 wc
301e8     3C 00 90 3D |  if_ae	jmp	#LR__5118
301ec     18 CE 05 F1 | 	add	fp, #24
301f0     E7 C8 02 FB | 	rdlong	local18, fp
301f4     18 CE 85 F1 | 	sub	fp, #24
301f8     01 C8 06 F1 | 	add	local18, #1
301fc     64 93 C2 FA | 	rdbyte	arg01, local18
30200     53 95 02 F6 | 	mov	arg02, local01
30204     28 94 06 F1 | 	add	arg02, #40
30208     61 97 02 F6 | 	mov	arg03, local15
3020c     01 98 06 F6 | 	mov	arg04, #1
30210     EC C0 BF FD | 	call	#_fatfs_cc_disk_read
30214     00 7A 0E F2 | 	cmp	result1, #0 wz
30218     11 A6 06 51 |  if_ne	add	local01, #17
3021c     53 03 48 5C |  if_ne	wrbyte	#1, local01
30220                 | ' 				fp->fptr < fp->obj.objsize &&
30220                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
30220                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
30220     01 7A 06 56 |  if_ne	mov	result1, #1
30224     C8 00 90 5D |  if_ne	jmp	#LR__5122
30228                 | LR__5118
30228     1C A6 06 F1 | 	add	local01, #28
3022c     53 C3 62 FC | 	wrlong	local15, local01
30230     1C A6 86 F1 | 	sub	local01, #28
30234                 | LR__5119
30234     14 A6 06 F1 | 	add	local01, #20
30238     53 B9 02 FB | 	rdlong	local10, local01
3023c     FF B9 06 F5 | 	and	local10, #511
30240     09 C8 C6 F9 | 	decod	local18, #9
30244     5C C9 82 F1 | 	sub	local18, local10
30248     55 C9 3A F3 | 	fle	local18, local03 wcz
3024c     53 93 02 F6 | 	mov	arg01, local01
30250     14 92 06 F1 | 	add	arg01, #20
30254     53 BF 02 FB | 	rdlong	local13, local01
30258     FF BF 06 F5 | 	and	local13, #511
3025c     5F 93 02 F1 | 	add	arg01, local13
30260     57 95 02 F6 | 	mov	arg02, local05
30264     64 97 02 F6 | 	mov	arg03, local18
30268     1C 46 BF FD | 	call	#__system____builtin_memmove
3026c     04 A6 86 F1 | 	sub	local01, #4
30270     53 B3 C2 FA | 	rdbyte	local07, local01
30274     80 B2 46 F5 | 	or	local07, #128
30278     53 B3 42 FC | 	wrbyte	local07, local01
3027c     10 A6 86 F1 | 	sub	local01, #16
30280                 | LR__5120
30280     64 AB 82 F1 | 	sub	local03, local18
30284     56 B3 02 FB | 	rdlong	local07, local04
30288     64 B3 02 F1 | 	add	local07, local18
3028c     56 B3 62 FC | 	wrlong	local07, local04
30290     64 AF 02 F1 | 	add	local05, local18
30294     14 A6 06 F1 | 	add	local01, #20
30298     53 B9 02 FB | 	rdlong	local10, local01
3029c     64 B9 02 F1 | 	add	local10, local18
302a0     53 B9 62 FC | 	wrlong	local10, local01
302a4     08 A6 86 F1 | 	sub	local01, #8
302a8     53 B7 02 FB | 	rdlong	local09, local01
302ac     0C A6 86 F1 | 	sub	local01, #12
302b0     5B B9 1A F2 | 	cmp	local10, local09 wcz
302b4     14 A6 06 11 |  if_a	add	local01, #20
302b8     53 B3 02 1B |  if_a	rdlong	local07, local01
302bc     14 A6 86 11 |  if_a	sub	local01, #20
302c0     0C A6 06 E1 |  if_be	add	local01, #12
302c4     53 B3 02 EB |  if_be	rdlong	local07, local01
302c8     0C A6 86 E1 |  if_be	sub	local01, #12
302cc     0C A6 06 F1 | 	add	local01, #12
302d0     53 B3 62 FC | 	wrlong	local07, local01
302d4     0C A6 86 F1 | 	sub	local01, #12
302d8     64 FC 9F FD | 	jmp	#LR__5110
302dc                 | LR__5121
302dc     10 A6 06 F1 | 	add	local01, #16
302e0     53 B3 C2 FA | 	rdbyte	local07, local01
302e4     40 B2 46 F5 | 	or	local07, #64
302e8     53 B3 42 FC | 	wrbyte	local07, local01
302ec                 | ' 
302ec                 | ' 
302ec                 | ' 
302ec                 | ' 
302ec                 | ' 
302ec                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
302ec                 | ' 		fp->flag |=  0x80 ;
302ec                 | ' 
302ec                 | ' 	}
302ec                 | ' 
302ec                 | ' 	fp->flag |=  0x40 ;
302ec                 | ' 
302ec                 | ' 	return FR_OK ;
302ec     00 7A 06 F6 | 	mov	result1, #0
302f0                 | LR__5122
302f0     E7 F0 03 F6 | 	mov	ptra, fp
302f4     F2 00 A0 FD | 	call	#popregs_
302f8                 | _fatfs_cc_f_write_ret
302f8     2D 00 64 FD | 	ret
302fc                 | 
302fc                 | _fatfs_cc_f_sync
302fc     03 CA 05 F6 | 	mov	COUNT_, #3
30300     E8 00 A0 FD | 	call	#pushregs_
30304     18 F0 07 F1 | 	add	ptra, #24
30308     49 A7 02 F6 | 	mov	local01, arg01
3030c     E7 94 02 F6 | 	mov	arg02, fp
30310     0C 94 06 F1 | 	add	arg02, #12
30314     53 93 02 F6 | 	mov	arg01, local01
30318     58 F2 BF FD | 	call	#_fatfs_cc_validate
3031c     3D A9 0A F6 | 	mov	local02, result1 wz
30320     30 01 90 5D |  if_ne	jmp	#LR__5133
30324     10 A6 06 F1 | 	add	local01, #16
30328     53 99 C2 FA | 	rdbyte	arg04, local01
3032c     10 A6 86 F1 | 	sub	local01, #16
30330     40 98 CE F7 | 	test	arg04, #64 wz
30334     1C 01 90 AD |  if_e	jmp	#LR__5132
30338     10 A6 06 F1 | 	add	local01, #16
3033c     53 A9 C2 FA | 	rdbyte	local02, local01
30340     10 A6 86 F1 | 	sub	local01, #16
30344     80 A8 CE F7 | 	test	local02, #128 wz
30348     50 00 90 AD |  if_e	jmp	#LR__5130
3034c     0C CE 05 F1 | 	add	fp, #12
30350     E7 A8 02 FB | 	rdlong	local02, fp
30354     0C CE 85 F1 | 	sub	fp, #12
30358     01 A8 06 F1 | 	add	local02, #1
3035c     54 93 C2 FA | 	rdbyte	arg01, local02
30360     28 A6 06 F1 | 	add	local01, #40
30364     53 95 02 F6 | 	mov	arg02, local01
30368     0C A6 86 F1 | 	sub	local01, #12
3036c     53 97 02 FB | 	rdlong	arg03, local01
30370     1C A6 86 F1 | 	sub	local01, #28
30374     01 98 06 F6 | 	mov	arg04, #1
30378     C0 C0 BF FD | 	call	#_fatfs_cc_disk_write
3037c     00 7A 0E F2 | 	cmp	result1, #0 wz
30380     01 7A 06 56 |  if_ne	mov	result1, #1
30384     D0 00 90 5D |  if_ne	jmp	#LR__5134
30388     10 A6 06 F1 | 	add	local01, #16
3038c     53 A9 C2 FA | 	rdbyte	local02, local01
30390     7F A8 06 F5 | 	and	local02, #127
30394     53 A9 42 FC | 	wrbyte	local02, local01
30398     10 A6 86 F1 | 	sub	local01, #16
3039c                 | LR__5130
3039c     EC 0F B0 FD | 	call	#_fatfs_cc__get_fattime
303a0     3D AB 02 F6 | 	mov	local03, result1
303a4     0C CE 05 F1 | 	add	fp, #12
303a8     E7 92 02 FB | 	rdlong	arg01, fp
303ac     0C CE 85 F1 | 	sub	fp, #12
303b0     20 A6 06 F1 | 	add	local01, #32
303b4     53 95 02 FB | 	rdlong	arg02, local01
303b8     20 A6 86 F1 | 	sub	local01, #32
303bc     C8 C5 BF FD | 	call	#_fatfs_cc_move_window
303c0     3D A9 0A F6 | 	mov	local02, result1 wz
303c4     8C 00 90 5D |  if_ne	jmp	#LR__5131
303c8     24 A6 06 F1 | 	add	local01, #36
303cc     53 A9 02 FB | 	rdlong	local02, local01
303d0     24 A6 86 F1 | 	sub	local01, #36
303d4     0B A8 06 F1 | 	add	local02, #11
303d8     54 99 C2 FA | 	rdbyte	arg04, local02
303dc     20 98 46 F5 | 	or	arg04, #32
303e0     54 99 42 FC | 	wrbyte	arg04, local02
303e4     0B A8 86 F1 | 	sub	local02, #11
303e8     53 93 02 FB | 	rdlong	arg01, local01
303ec     08 A6 06 F1 | 	add	local01, #8
303f0     53 97 02 FB | 	rdlong	arg03, local01
303f4     54 95 02 F6 | 	mov	arg02, local02
303f8     F8 D2 BF FD | 	call	#_fatfs_cc_st_clust
303fc     54 93 02 F6 | 	mov	arg01, local02
30400     1C 92 06 F1 | 	add	arg01, #28
30404     04 A6 06 F1 | 	add	local01, #4
30408     53 95 02 FB | 	rdlong	arg02, local01
3040c     49 95 62 FC | 	wrlong	arg02, arg01
30410     54 93 02 F6 | 	mov	arg01, local02
30414     16 92 06 F1 | 	add	arg01, #22
30418     49 AB 62 FC | 	wrlong	local03, arg01
3041c     12 A8 06 F1 | 	add	local02, #18
30420     54 01 58 FC | 	wrword	#0, local02
30424     0C CE 05 F1 | 	add	fp, #12
30428     E7 AA 02 FB | 	rdlong	local03, fp
3042c     03 AA 06 F1 | 	add	local03, #3
30430     55 03 48 FC | 	wrbyte	#1, local03
30434     E7 92 02 FB | 	rdlong	arg01, fp
30438     0C CE 85 F1 | 	sub	fp, #12
3043c     C0 C5 BF FD | 	call	#_fatfs_cc_sync_fs
30440     3D A9 02 F6 | 	mov	local02, result1
30444     04 A6 06 F1 | 	add	local01, #4
30448     53 AB C2 FA | 	rdbyte	local03, local01
3044c     BF AA 06 F5 | 	and	local03, #191
30450     53 AB 42 FC | 	wrbyte	local03, local01
30454                 | LR__5131
30454                 | LR__5132
30454                 | LR__5133
30454                 | ' 					dir = fp->dir_ptr;
30454                 | ' 					dir[ 11 ] |=  0x20 ;
30454                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
30454                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
30454                 | ' 					st_dword(dir +  22 , tm);
30454                 | ' 					st_word(dir +  18 , 0);
30454                 | ' 					fs->wflag = 1;
30454                 | ' 					res = sync_fs(fs);
30454                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
30454                 | ' 				}
30454                 | ' 			}
30454                 | ' 		}
30454                 | ' 	}
30454                 | ' 
30454                 | ' 	return res ;
30454     54 7B 02 F6 | 	mov	result1, local02
30458                 | LR__5134
30458     E7 F0 03 F6 | 	mov	ptra, fp
3045c     F2 00 A0 FD | 	call	#popregs_
30460                 | _fatfs_cc_f_sync_ret
30460     2D 00 64 FD | 	ret
30464                 | 
30464                 | _fatfs_cc_f_close
30464     02 CA 05 F6 | 	mov	COUNT_, #2
30468     E8 00 A0 FD | 	call	#pushregs_
3046c     10 F0 07 F1 | 	add	ptra, #16
30470     49 A7 02 F6 | 	mov	local01, arg01
30474     84 FE BF FD | 	call	#_fatfs_cc_f_sync
30478     3D A9 0A F6 | 	mov	local02, result1 wz
3047c     18 00 90 5D |  if_ne	jmp	#LR__5140
30480     E7 94 02 F6 | 	mov	arg02, fp
30484     0C 94 06 F1 | 	add	arg02, #12
30488     53 93 02 F6 | 	mov	arg01, local01
3048c     E4 F0 BF FD | 	call	#_fatfs_cc_validate
30490     3D A9 0A F6 | 	mov	local02, result1 wz
30494     53 01 68 AC |  if_e	wrlong	#0, local01
30498                 | LR__5140
30498                 | ' 
30498                 | ' 
30498                 | ' 
30498                 | ' 
30498                 | ' 			fp->obj.fs = 0;
30498                 | ' #line 4192 "ff.c"
30498                 | ' 		}
30498                 | ' 	}
30498                 | ' 	return res;
30498     54 7B 02 F6 | 	mov	result1, local02
3049c     E7 F0 03 F6 | 	mov	ptra, fp
304a0     F2 00 A0 FD | 	call	#popregs_
304a4                 | _fatfs_cc_f_close_ret
304a4     2D 00 64 FD | 	ret
304a8                 | 
304a8                 | _fatfs_cc_f_lseek
304a8     0D CA 05 F6 | 	mov	COUNT_, #13
304ac     E8 00 A0 FD | 	call	#pushregs_
304b0     24 F0 07 F1 | 	add	ptra, #36
304b4     49 A7 02 F6 | 	mov	local01, arg01
304b8     4A A9 02 F6 | 	mov	local02, arg02
304bc     E7 94 02 F6 | 	mov	arg02, fp
304c0     10 94 06 F1 | 	add	arg02, #16
304c4     53 93 02 F6 | 	mov	arg01, local01
304c8     A8 F0 BF FD | 	call	#_fatfs_cc_validate
304cc     3D AB 0A F6 | 	mov	local03, result1 wz
304d0     11 A6 06 A1 |  if_e	add	local01, #17
304d4     53 AB C2 AA |  if_e	rdbyte	local03, local01
304d8     11 A6 86 A1 |  if_e	sub	local01, #17
304dc     00 AA 0E F2 | 	cmp	local03, #0 wz
304e0     55 7B 02 56 |  if_ne	mov	result1, local03
304e4     5C 03 90 5D |  if_ne	jmp	#LR__5166
304e8     0C A6 06 F1 | 	add	local01, #12
304ec     53 AD 02 FB | 	rdlong	local04, local01
304f0     0C A6 86 F1 | 	sub	local01, #12
304f4     56 A9 1A F2 | 	cmp	local02, local04 wcz
304f8     20 00 90 ED |  if_be	jmp	#LR__5150
304fc     10 A6 06 F1 | 	add	local01, #16
30500     53 AF C2 FA | 	rdbyte	local05, local01
30504     10 A6 86 F1 | 	sub	local01, #16
30508     57 B1 E2 F8 | 	getbyte	local06, local05, #0
3050c     02 B0 CE F7 | 	test	local06, #2 wz
30510     0C A6 06 A1 |  if_e	add	local01, #12
30514     53 A9 02 AB |  if_e	rdlong	local02, local01
30518     0C A6 86 A1 |  if_e	sub	local01, #12
3051c                 | LR__5150
3051c     14 A6 06 F1 | 	add	local01, #20
30520     53 B3 02 FB | 	rdlong	local07, local01
30524     00 B4 06 F6 | 	mov	local08, #0
30528     53 01 68 FC | 	wrlong	#0, local01
3052c     14 A6 86 F1 | 	sub	local01, #20
30530     01 A8 16 F2 | 	cmp	local02, #1 wc
30534     F4 01 90 CD |  if_b	jmp	#LR__5162
30538     10 CE 05 F1 | 	add	fp, #16
3053c     E7 B6 02 FB | 	rdlong	local09, fp
30540     10 CE 85 F1 | 	sub	fp, #16
30544     0A B6 06 F1 | 	add	local09, #10
30548     5B AF E2 FA | 	rdword	local05, local09
3054c     57 B9 32 F9 | 	getword	local10, local05, #0
30550     09 B8 66 F0 | 	shl	local10, #9
30554     5C BB 02 F6 | 	mov	local11, local10
30558     01 B2 16 F2 | 	cmp	local07, #1 wc
3055c     5C 00 90 CD |  if_b	jmp	#LR__5151
30560     54 B7 02 F6 | 	mov	local09, local02
30564     01 B6 86 F1 | 	sub	local09, #1
30568     5D B7 12 FD | 	qdiv	local09, local11
3056c     59 AF 02 F6 | 	mov	local05, local07
30570     01 AE 86 F1 | 	sub	local05, #1
30574     5D BD 02 F6 | 	mov	local12, local11
30578     18 B6 62 FD | 	getqx	local09
3057c     5E AF 12 FD | 	qdiv	local05, local12
30580     18 B8 62 FD | 	getqx	local10
30584     5C B7 12 F2 | 	cmp	local09, local10 wc
30588     30 00 90 CD |  if_b	jmp	#LR__5151
3058c     59 B1 02 F6 | 	mov	local06, local07
30590     01 B0 86 F1 | 	sub	local06, #1
30594     5D B7 02 F6 | 	mov	local09, local11
30598     01 B6 86 F1 | 	sub	local09, #1
3059c     5B B1 22 F5 | 	andn	local06, local09
305a0     14 A6 06 F1 | 	add	local01, #20
305a4     53 B1 62 FC | 	wrlong	local06, local01
305a8     58 A9 82 F1 | 	sub	local02, local06
305ac     04 A6 06 F1 | 	add	local01, #4
305b0     53 BF 02 FB | 	rdlong	local13, local01
305b4     18 A6 86 F1 | 	sub	local01, #24
305b8     64 00 90 FD | 	jmp	#LR__5153
305bc                 | LR__5151
305bc     08 A6 06 F1 | 	add	local01, #8
305c0     53 BF 0A FB | 	rdlong	local13, local01 wz
305c4     08 A6 86 F1 | 	sub	local01, #8
305c8     48 00 90 5D |  if_ne	jmp	#LR__5152
305cc     53 93 02 F6 | 	mov	arg01, local01
305d0     00 94 06 F6 | 	mov	arg02, #0
305d4     30 CA BF FD | 	call	#_fatfs_cc_create_chain
305d8     3D BF 02 F6 | 	mov	local13, result1
305dc     01 BE 0E F2 | 	cmp	local13, #1 wz
305e0     11 A6 06 A1 |  if_e	add	local01, #17
305e4     53 05 48 AC |  if_e	wrbyte	#2, local01
305e8     02 7A 06 A6 |  if_e	mov	result1, #2
305ec     54 02 90 AD |  if_e	jmp	#LR__5166
305f0     FF FF 7F FF 
305f4     FF BF 0E F2 | 	cmp	local13, ##-1 wz
305f8     11 A6 06 A1 |  if_e	add	local01, #17
305fc     53 03 48 AC |  if_e	wrbyte	#1, local01
30600     01 7A 06 A6 |  if_e	mov	result1, #1
30604     3C 02 90 AD |  if_e	jmp	#LR__5166
30608     08 A6 06 F1 | 	add	local01, #8
3060c     53 BF 62 FC | 	wrlong	local13, local01
30610     08 A6 86 F1 | 	sub	local01, #8
30614                 | LR__5152
30614     18 A6 06 F1 | 	add	local01, #24
30618     53 BF 62 FC | 	wrlong	local13, local01
3061c     18 A6 86 F1 | 	sub	local01, #24
30620                 | LR__5153
30620     00 BE 0E F2 | 	cmp	local13, #0 wz
30624     04 01 90 AD |  if_e	jmp	#LR__5161
30628                 | ' 				while (ofs > bcs) {
30628                 | LR__5154
30628     5D A9 1A F2 | 	cmp	local02, local11 wcz
3062c     B0 00 90 ED |  if_be	jmp	#LR__5159
30630     5D A9 82 F1 | 	sub	local02, local11
30634     14 A6 06 F1 | 	add	local01, #20
30638     53 AD 02 FB | 	rdlong	local04, local01
3063c     5D AD 02 F1 | 	add	local04, local11
30640     53 AD 62 FC | 	wrlong	local04, local01
30644     04 A6 86 F1 | 	sub	local01, #4
30648     53 AD C2 FA | 	rdbyte	local04, local01
3064c     10 A6 86 F1 | 	sub	local01, #16
30650     02 AC CE F7 | 	test	local04, #2 wz
30654     1C 00 90 AD |  if_e	jmp	#LR__5155
30658     53 93 02 F6 | 	mov	arg01, local01
3065c     5F 95 02 F6 | 	mov	arg02, local13
30660     A4 C9 BF FD | 	call	#_fatfs_cc_create_chain
30664     3D BF 0A F6 | 	mov	local13, result1 wz
30668     00 A8 06 A6 |  if_e	mov	local02, #0
3066c                 | ' 							ofs = 0; break;
3066c     70 00 90 AD |  if_e	jmp	#LR__5159
30670     10 00 90 FD | 	jmp	#LR__5156
30674                 | LR__5155
30674     53 93 02 F6 | 	mov	arg01, local01
30678     5F 95 02 F6 | 	mov	arg02, local13
3067c     C0 C4 BF FD | 	call	#_fatfs_cc_get_fat
30680     3D BF 02 F6 | 	mov	local13, result1
30684                 | LR__5156
30684     FF FF 7F FF 
30688     FF BF 0E F2 | 	cmp	local13, ##-1 wz
3068c     11 A6 06 A1 |  if_e	add	local01, #17
30690     53 03 48 AC |  if_e	wrbyte	#1, local01
30694     01 7A 06 A6 |  if_e	mov	result1, #1
30698     A8 01 90 AD |  if_e	jmp	#LR__5166
3069c     02 BE 16 F2 | 	cmp	local13, #2 wc
306a0     1C 00 90 CD |  if_b	jmp	#LR__5157
306a4     10 CE 05 F1 | 	add	fp, #16
306a8     E7 AC 02 FB | 	rdlong	local04, fp
306ac     10 CE 85 F1 | 	sub	fp, #16
306b0     18 AC 06 F1 | 	add	local04, #24
306b4     56 AF 02 FB | 	rdlong	local05, local04
306b8     57 BF 12 F2 | 	cmp	local13, local05 wc
306bc     10 00 90 CD |  if_b	jmp	#LR__5158
306c0                 | LR__5157
306c0     11 A6 06 F1 | 	add	local01, #17
306c4     53 05 48 FC | 	wrbyte	#2, local01
306c8     02 7A 06 F6 | 	mov	result1, #2
306cc     74 01 90 FD | 	jmp	#LR__5166
306d0                 | LR__5158
306d0     18 A6 06 F1 | 	add	local01, #24
306d4     53 BF 62 FC | 	wrlong	local13, local01
306d8     18 A6 86 F1 | 	sub	local01, #24
306dc     48 FF 9F FD | 	jmp	#LR__5154
306e0                 | LR__5159
306e0     14 A6 06 F1 | 	add	local01, #20
306e4     53 AD 02 FB | 	rdlong	local04, local01
306e8     54 AD 02 F1 | 	add	local04, local02
306ec     53 AD 62 FC | 	wrlong	local04, local01
306f0     14 A6 86 F1 | 	sub	local01, #20
306f4     FF A9 CE F7 | 	test	local02, #511 wz
306f8     30 00 90 AD |  if_e	jmp	#LR__5160
306fc     10 CE 05 F1 | 	add	fp, #16
30700     E7 92 02 FB | 	rdlong	arg01, fp
30704     10 CE 85 F1 | 	sub	fp, #16
30708     5F 95 02 F6 | 	mov	arg02, local13
3070c     F0 C3 BF FD | 	call	#_fatfs_cc_clst2sect
30710     3D B5 0A F6 | 	mov	local08, result1 wz
30714     11 A6 06 A1 |  if_e	add	local01, #17
30718     53 05 48 AC |  if_e	wrbyte	#2, local01
3071c     02 7A 06 A6 |  if_e	mov	result1, #2
30720     20 01 90 AD |  if_e	jmp	#LR__5166
30724     09 A8 46 F0 | 	shr	local02, #9
30728     54 B5 02 F1 | 	add	local08, local02
3072c                 | LR__5160
3072c                 | LR__5161
3072c                 | LR__5162
3072c     14 A6 06 F1 | 	add	local01, #20
30730     53 AD 02 FB | 	rdlong	local04, local01
30734     08 A6 86 F1 | 	sub	local01, #8
30738     53 B1 02 FB | 	rdlong	local06, local01
3073c     0C A6 86 F1 | 	sub	local01, #12
30740     58 AD 1A F2 | 	cmp	local04, local06 wcz
30744     24 00 90 ED |  if_be	jmp	#LR__5163
30748     14 A6 06 F1 | 	add	local01, #20
3074c     53 AD 02 FB | 	rdlong	local04, local01
30750     08 A6 86 F1 | 	sub	local01, #8
30754     53 AD 62 FC | 	wrlong	local04, local01
30758     04 A6 06 F1 | 	add	local01, #4
3075c     53 AD C2 FA | 	rdbyte	local04, local01
30760     40 AC 46 F5 | 	or	local04, #64
30764     53 AD 42 FC | 	wrbyte	local04, local01
30768     10 A6 86 F1 | 	sub	local01, #16
3076c                 | LR__5163
3076c     14 A6 06 F1 | 	add	local01, #20
30770     53 AD 02 FB | 	rdlong	local04, local01
30774     14 A6 86 F1 | 	sub	local01, #20
30778     FF AD CE F7 | 	test	local04, #511 wz
3077c     1C A6 06 51 |  if_ne	add	local01, #28
30780     53 AF 02 5B |  if_ne	rdlong	local05, local01
30784     1C A6 86 51 |  if_ne	sub	local01, #28
30788     57 B5 0A 52 |  if_ne	cmp	local08, local05 wz
3078c     B0 00 90 AD |  if_e	jmp	#LR__5165
30790     10 A6 06 F1 | 	add	local01, #16
30794     53 AD C2 FA | 	rdbyte	local04, local01
30798     10 A6 86 F1 | 	sub	local01, #16
3079c     80 AC CE F7 | 	test	local04, #128 wz
307a0     58 00 90 AD |  if_e	jmp	#LR__5164
307a4     10 CE 05 F1 | 	add	fp, #16
307a8     E7 B6 02 FB | 	rdlong	local09, fp
307ac     10 CE 85 F1 | 	sub	fp, #16
307b0     01 B6 06 F1 | 	add	local09, #1
307b4     5B 93 C2 FA | 	rdbyte	arg01, local09
307b8     28 A6 06 F1 | 	add	local01, #40
307bc     53 95 02 F6 | 	mov	arg02, local01
307c0     0C A6 86 F1 | 	sub	local01, #12
307c4     53 97 02 FB | 	rdlong	arg03, local01
307c8     1C A6 86 F1 | 	sub	local01, #28
307cc     01 98 06 F6 | 	mov	arg04, #1
307d0     68 BC BF FD | 	call	#_fatfs_cc_disk_write
307d4     00 7A 0E F2 | 	cmp	result1, #0 wz
307d8     11 A6 06 51 |  if_ne	add	local01, #17
307dc     53 03 48 5C |  if_ne	wrbyte	#1, local01
307e0     01 7A 06 56 |  if_ne	mov	result1, #1
307e4     5C 00 90 5D |  if_ne	jmp	#LR__5166
307e8     10 A6 06 F1 | 	add	local01, #16
307ec     53 AD C2 FA | 	rdbyte	local04, local01
307f0     7F AC 06 F5 | 	and	local04, #127
307f4     53 AD 42 FC | 	wrbyte	local04, local01
307f8     10 A6 86 F1 | 	sub	local01, #16
307fc                 | LR__5164
307fc     10 CE 05 F1 | 	add	fp, #16
30800     E7 B6 02 FB | 	rdlong	local09, fp
30804     10 CE 85 F1 | 	sub	fp, #16
30808     01 B6 06 F1 | 	add	local09, #1
3080c     5B 93 C2 FA | 	rdbyte	arg01, local09
30810     53 95 02 F6 | 	mov	arg02, local01
30814     28 94 06 F1 | 	add	arg02, #40
30818     5A 97 02 F6 | 	mov	arg03, local08
3081c     01 98 06 F6 | 	mov	arg04, #1
30820     DC BA BF FD | 	call	#_fatfs_cc_disk_read
30824     00 7A 0E F2 | 	cmp	result1, #0 wz
30828     11 A6 06 51 |  if_ne	add	local01, #17
3082c     53 03 48 5C |  if_ne	wrbyte	#1, local01
30830     01 7A 06 56 |  if_ne	mov	result1, #1
30834     0C 00 90 5D |  if_ne	jmp	#LR__5166
30838     1C A6 06 F1 | 	add	local01, #28
3083c     53 B5 62 FC | 	wrlong	local08, local01
30840                 | LR__5165
30840                 | ' 
30840                 | ' 			fp->sect = nsect;
30840                 | ' 		}
30840                 | ' 	}
30840                 | ' 
30840                 | ' 	return res ;
30840     55 7B 02 F6 | 	mov	result1, local03
30844                 | LR__5166
30844     E7 F0 03 F6 | 	mov	ptra, fp
30848     F2 00 A0 FD | 	call	#popregs_
3084c                 | _fatfs_cc_f_lseek_ret
3084c     2D 00 64 FD | 	ret
30850                 | 
30850                 | _fatfs_cc_f_opendir
30850     02 CA 05 F6 | 	mov	COUNT_, #2
30854     E8 00 A0 FD | 	call	#pushregs_
30858     14 F0 07 F1 | 	add	ptra, #20
3085c     49 A7 0A F6 | 	mov	local01, arg01 wz
30860     08 CE 05 F1 | 	add	fp, #8
30864     E7 94 62 FC | 	wrlong	arg02, fp
30868     08 CE 85 F1 | 	sub	fp, #8
3086c     09 7A 06 A6 |  if_e	mov	result1, #9
30870     EC 00 90 AD |  if_e	jmp	#LR__5176
30874     08 CE 05 F1 | 	add	fp, #8
30878     E7 92 02 F6 | 	mov	arg01, fp
3087c     08 CE 05 F1 | 	add	fp, #8
30880     E7 94 02 F6 | 	mov	arg02, fp
30884     10 CE 85 F1 | 	sub	fp, #16
30888     00 96 06 F6 | 	mov	arg03, #0
3088c     B4 E7 BF FD | 	call	#_fatfs_cc_mount_volume
30890     3D A9 0A F6 | 	mov	local02, result1 wz
30894     BC 00 90 5D |  if_ne	jmp	#LR__5175
30898     10 CE 05 F1 | 	add	fp, #16
3089c     E7 A8 02 FB | 	rdlong	local02, fp
308a0     53 A9 62 FC | 	wrlong	local02, local01
308a4     08 CE 85 F1 | 	sub	fp, #8
308a8     E7 94 02 FB | 	rdlong	arg02, fp
308ac     08 CE 85 F1 | 	sub	fp, #8
308b0     53 93 02 F6 | 	mov	arg01, local01
308b4     F0 E2 BF FD | 	call	#_fatfs_cc_follow_path
308b8     3D A9 0A F6 | 	mov	local02, result1 wz
308bc     8C 00 90 5D |  if_ne	jmp	#LR__5174
308c0     2B A6 06 F1 | 	add	local01, #43
308c4     53 97 C2 FA | 	rdbyte	arg03, local01
308c8     2B A6 86 F1 | 	sub	local01, #43
308cc     80 96 CE F7 | 	test	arg03, #128 wz
308d0     40 00 90 5D |  if_ne	jmp	#LR__5172
308d4     06 A6 06 F1 | 	add	local01, #6
308d8     53 97 C2 FA | 	rdbyte	arg03, local01
308dc     06 A6 86 F1 | 	sub	local01, #6
308e0     10 96 CE F7 | 	test	arg03, #16 wz
308e4     28 00 90 AD |  if_e	jmp	#LR__5170
308e8     10 CE 05 F1 | 	add	fp, #16
308ec     E7 92 02 FB | 	rdlong	arg01, fp
308f0     10 CE 85 F1 | 	sub	fp, #16
308f4     1C A6 06 F1 | 	add	local01, #28
308f8     53 95 02 FB | 	rdlong	arg02, local01
308fc     C0 CD BF FD | 	call	#_fatfs_cc_ld_clust
30900     14 A6 86 F1 | 	sub	local01, #20
30904     53 7B 62 FC | 	wrlong	result1, local01
30908     08 A6 86 F1 | 	sub	local01, #8
3090c     04 00 90 FD | 	jmp	#LR__5171
30910                 | LR__5170
30910     05 A8 06 F6 | 	mov	local02, #5
30914                 | LR__5171
30914                 | LR__5172
30914     00 A8 0E F2 | 	cmp	local02, #0 wz
30918     30 00 90 5D |  if_ne	jmp	#LR__5173
3091c     10 CE 05 F1 | 	add	fp, #16
30920     E7 A8 02 FB | 	rdlong	local02, fp
30924     10 CE 85 F1 | 	sub	fp, #16
30928     06 A8 06 F1 | 	add	local02, #6
3092c     54 A9 E2 FA | 	rdword	local02, local02
30930     04 A6 06 F1 | 	add	local01, #4
30934     53 A9 52 FC | 	wrword	local02, local01
30938     04 A6 86 F1 | 	sub	local01, #4
3093c     53 93 02 F6 | 	mov	arg01, local01
30940     00 94 06 F6 | 	mov	arg02, #0
30944     A4 C9 BF FD | 	call	#_fatfs_cc_dir_sdi
30948     3D A9 02 F6 | 	mov	local02, result1
3094c                 | LR__5173
3094c                 | LR__5174
3094c     04 A8 0E F2 | 	cmp	local02, #4 wz
30950     05 A8 06 A6 |  if_e	mov	local02, #5
30954                 | LR__5175
30954     00 A8 0E F2 | 	cmp	local02, #0 wz
30958     53 01 68 5C |  if_ne	wrlong	#0, local01
3095c                 | ' 
3095c                 | ' 	return res ;
3095c     54 7B 02 F6 | 	mov	result1, local02
30960                 | LR__5176
30960     E7 F0 03 F6 | 	mov	ptra, fp
30964     F2 00 A0 FD | 	call	#popregs_
30968                 | _fatfs_cc_f_opendir_ret
30968     2D 00 64 FD | 	ret
3096c                 | 
3096c                 | _fatfs_cc_f_closedir
3096c     01 CA 05 F6 | 	mov	COUNT_, #1
30970     E8 00 A0 FD | 	call	#pushregs_
30974     10 F0 07 F1 | 	add	ptra, #16
30978     49 A7 02 F6 | 	mov	local01, arg01
3097c     E7 94 02 F6 | 	mov	arg02, fp
30980     0C 94 06 F1 | 	add	arg02, #12
30984     53 93 02 F6 | 	mov	arg01, local01
30988     E8 EB BF FD | 	call	#_fatfs_cc_validate
3098c     00 7A 4E F2 | 	cmps	result1, #0 wz
30990     53 01 68 AC |  if_e	wrlong	#0, local01
30994                 | ' 
30994                 | ' 
30994                 | ' 
30994                 | ' 
30994                 | ' 		dp->obj.fs = 0;
30994                 | ' #line 4633 "ff.c"
30994                 | ' 	}
30994                 | ' 	return res;
30994     E7 F0 03 F6 | 	mov	ptra, fp
30998     F2 00 A0 FD | 	call	#popregs_
3099c                 | _fatfs_cc_f_closedir_ret
3099c     2D 00 64 FD | 	ret
309a0                 | 
309a0                 | _fatfs_cc_f_readdir
309a0     03 CA 05 F6 | 	mov	COUNT_, #3
309a4     E8 00 A0 FD | 	call	#pushregs_
309a8     14 F0 07 F1 | 	add	ptra, #20
309ac     49 A7 02 F6 | 	mov	local01, arg01
309b0     4A A9 02 F6 | 	mov	local02, arg02
309b4     E7 94 02 F6 | 	mov	arg02, fp
309b8     10 94 06 F1 | 	add	arg02, #16
309bc     53 93 02 F6 | 	mov	arg01, local01
309c0     B0 EB BF FD | 	call	#_fatfs_cc_validate
309c4     3D AB 0A F6 | 	mov	local03, result1 wz
309c8     60 00 90 5D |  if_ne	jmp	#LR__5183
309cc     00 A8 0E F2 | 	cmp	local02, #0 wz
309d0     14 00 90 5D |  if_ne	jmp	#LR__5180
309d4     53 93 02 F6 | 	mov	arg01, local01
309d8     00 94 06 F6 | 	mov	arg02, #0
309dc     0C C9 BF FD | 	call	#_fatfs_cc_dir_sdi
309e0     3D AB 02 F6 | 	mov	local03, result1
309e4     44 00 90 FD | 	jmp	#LR__5182
309e8                 | LR__5180
309e8     53 93 02 F6 | 	mov	arg01, local01
309ec     00 94 06 F6 | 	mov	arg02, #0
309f0     98 D1 BF FD | 	call	#_fatfs_cc_dir_read
309f4     3D AB 02 F6 | 	mov	local03, result1
309f8     04 AA 0E F2 | 	cmp	local03, #4 wz
309fc     00 AA 06 A6 |  if_e	mov	local03, #0
30a00     00 AA 0E F2 | 	cmp	local03, #0 wz
30a04     24 00 90 5D |  if_ne	jmp	#LR__5181
30a08     53 93 02 F6 | 	mov	arg01, local01
30a0c     54 95 02 F6 | 	mov	arg02, local02
30a10     E4 D8 BF FD | 	call	#_fatfs_cc_get_fileinfo
30a14     53 93 02 F6 | 	mov	arg01, local01
30a18     00 94 06 F6 | 	mov	arg02, #0
30a1c     34 CA BF FD | 	call	#_fatfs_cc_dir_next
30a20     3D AB 02 F6 | 	mov	local03, result1
30a24     04 AA 0E F2 | 	cmp	local03, #4 wz
30a28     00 AA 06 A6 |  if_e	mov	local03, #0
30a2c                 | LR__5181
30a2c                 | LR__5182
30a2c                 | LR__5183
30a2c                 | ' 			}
30a2c                 | ' 			;
30a2c                 | ' 		}
30a2c                 | ' 	}
30a2c                 | ' 	return res ;
30a2c     55 7B 02 F6 | 	mov	result1, local03
30a30     E7 F0 03 F6 | 	mov	ptra, fp
30a34     F2 00 A0 FD | 	call	#popregs_
30a38                 | _fatfs_cc_f_readdir_ret
30a38     2D 00 64 FD | 	ret
30a3c                 | 
30a3c                 | _fatfs_cc_f_stat
30a3c     02 CA 05 F6 | 	mov	COUNT_, #2
30a40     E8 00 A0 FD | 	call	#pushregs_
30a44     40 F0 07 F1 | 	add	ptra, #64
30a48     04 CE 05 F1 | 	add	fp, #4
30a4c     E7 92 62 FC | 	wrlong	arg01, fp
30a50     4A A7 02 F6 | 	mov	local01, arg02
30a54     E7 92 02 F6 | 	mov	arg01, fp
30a58     0C CE 05 F1 | 	add	fp, #12
30a5c     E7 94 02 F6 | 	mov	arg02, fp
30a60     10 CE 85 F1 | 	sub	fp, #16
30a64     00 96 06 F6 | 	mov	arg03, #0
30a68     D8 E5 BF FD | 	call	#_fatfs_cc_mount_volume
30a6c     3D A9 0A F6 | 	mov	local02, result1 wz
30a70     4C 00 90 5D |  if_ne	jmp	#LR__5192
30a74     10 CE 05 F1 | 	add	fp, #16
30a78     E7 92 02 F6 | 	mov	arg01, fp
30a7c     0C CE 85 F1 | 	sub	fp, #12
30a80     E7 94 02 FB | 	rdlong	arg02, fp
30a84     04 CE 85 F1 | 	sub	fp, #4
30a88     1C E1 BF FD | 	call	#_fatfs_cc_follow_path
30a8c     3D A9 0A F6 | 	mov	local02, result1 wz
30a90     2C 00 90 5D |  if_ne	jmp	#LR__5191
30a94     3B CE 05 F1 | 	add	fp, #59
30a98     E7 96 C2 FA | 	rdbyte	arg03, fp
30a9c     3B CE 85 F1 | 	sub	fp, #59
30aa0     80 96 CE F7 | 	test	arg03, #128 wz
30aa4     06 A8 06 56 |  if_ne	mov	local02, #6
30aa8     14 00 90 5D |  if_ne	jmp	#LR__5190
30aac     00 A6 0E F2 | 	cmp	local01, #0 wz
30ab0     E7 92 02 56 |  if_ne	mov	arg01, fp
30ab4     10 92 06 51 |  if_ne	add	arg01, #16
30ab8     53 95 02 56 |  if_ne	mov	arg02, local01
30abc     38 D8 BF 5D |  if_ne	call	#_fatfs_cc_get_fileinfo
30ac0                 | LR__5190
30ac0                 | LR__5191
30ac0                 | LR__5192
30ac0                 | ' 			}
30ac0                 | ' 		}
30ac0                 | ' 		;
30ac0                 | ' 	}
30ac0                 | ' 
30ac0                 | ' 	return res ;
30ac0     54 7B 02 F6 | 	mov	result1, local02
30ac4     E7 F0 03 F6 | 	mov	ptra, fp
30ac8     F2 00 A0 FD | 	call	#popregs_
30acc                 | _fatfs_cc_f_stat_ret
30acc     2D 00 64 FD | 	ret
30ad0                 | 
30ad0                 | _fatfs_cc_f_unlink
30ad0     02 CA 05 F6 | 	mov	COUNT_, #2
30ad4     E8 00 A0 FD | 	call	#pushregs_
30ad8     74 F0 07 F1 | 	add	ptra, #116
30adc     04 CE 05 F1 | 	add	fp, #4
30ae0     E7 92 62 FC | 	wrlong	arg01, fp
30ae4     00 A6 06 F6 | 	mov	local01, #0
30ae8     E7 92 02 F6 | 	mov	arg01, fp
30aec     6C CE 05 F1 | 	add	fp, #108
30af0     E7 94 02 F6 | 	mov	arg02, fp
30af4     70 CE 85 F1 | 	sub	fp, #112
30af8     02 96 06 F6 | 	mov	arg03, #2
30afc     44 E5 BF FD | 	call	#_fatfs_cc_mount_volume
30b00     3D A9 0A F6 | 	mov	local02, result1 wz
30b04     3C 01 90 5D |  if_ne	jmp	#LR__5208
30b08     70 CE 05 F1 | 	add	fp, #112
30b0c     E7 A8 02 FB | 	rdlong	local02, fp
30b10     64 CE 85 F1 | 	sub	fp, #100
30b14     E7 A8 62 FC | 	wrlong	local02, fp
30b18     E7 92 02 F6 | 	mov	arg01, fp
30b1c     08 CE 85 F1 | 	sub	fp, #8
30b20     E7 94 02 FB | 	rdlong	arg02, fp
30b24     04 CE 85 F1 | 	sub	fp, #4
30b28     7C E0 BF FD | 	call	#_fatfs_cc_follow_path
30b2c     3D A9 0A F6 | 	mov	local02, result1 wz
30b30     10 01 90 5D |  if_ne	jmp	#LR__5207
30b34     37 CE 05 F1 | 	add	fp, #55
30b38     E7 7A C2 FA | 	rdbyte	result1, fp
30b3c     37 CE 85 F1 | 	sub	fp, #55
30b40     80 7A CE F7 | 	test	result1, #128 wz
30b44     06 A8 06 56 |  if_ne	mov	local02, #6
30b48     14 00 90 5D |  if_ne	jmp	#LR__5200
30b4c     12 CE 05 F1 | 	add	fp, #18
30b50     E7 7A C2 FA | 	rdbyte	result1, fp
30b54     12 CE 85 F1 | 	sub	fp, #18
30b58     01 7A CE F7 | 	test	result1, #1 wz
30b5c     07 A8 06 56 |  if_ne	mov	local02, #7
30b60                 | LR__5200
30b60     00 A8 0E F2 | 	cmp	local02, #0 wz
30b64     84 00 90 5D |  if_ne	jmp	#LR__5203
30b68     70 CE 05 F1 | 	add	fp, #112
30b6c     E7 92 02 FB | 	rdlong	arg01, fp
30b70     48 CE 85 F1 | 	sub	fp, #72
30b74     E7 94 02 FB | 	rdlong	arg02, fp
30b78     28 CE 85 F1 | 	sub	fp, #40
30b7c     40 CB BF FD | 	call	#_fatfs_cc_ld_clust
30b80     3D A7 02 F6 | 	mov	local01, result1
30b84     12 CE 05 F1 | 	add	fp, #18
30b88     E7 7A C2 FA | 	rdbyte	result1, fp
30b8c     12 CE 85 F1 | 	sub	fp, #18
30b90     10 7A CE F7 | 	test	result1, #16 wz
30b94     54 00 90 AD |  if_e	jmp	#LR__5202
30b98     70 CE 05 F1 | 	add	fp, #112
30b9c     E7 A8 02 FB | 	rdlong	local02, fp
30ba0     34 CE 85 F1 | 	sub	fp, #52
30ba4     E7 A8 62 FC | 	wrlong	local02, fp
30ba8     08 CE 05 F1 | 	add	fp, #8
30bac     E7 A6 62 FC | 	wrlong	local01, fp
30bb0     08 CE 85 F1 | 	sub	fp, #8
30bb4     E7 92 02 F6 | 	mov	arg01, fp
30bb8     3C CE 85 F1 | 	sub	fp, #60
30bbc     00 94 06 F6 | 	mov	arg02, #0
30bc0     28 C7 BF FD | 	call	#_fatfs_cc_dir_sdi
30bc4     3D A9 0A F6 | 	mov	local02, result1 wz
30bc8     20 00 90 5D |  if_ne	jmp	#LR__5201
30bcc     E7 92 02 F6 | 	mov	arg01, fp
30bd0     3C 92 06 F1 | 	add	arg01, #60
30bd4     00 94 06 F6 | 	mov	arg02, #0
30bd8     B0 CF BF FD | 	call	#_fatfs_cc_dir_read
30bdc     3D A9 0A F6 | 	mov	local02, result1 wz
30be0     07 A8 06 A6 |  if_e	mov	local02, #7
30be4     04 A8 0E F2 | 	cmp	local02, #4 wz
30be8     00 A8 06 A6 |  if_e	mov	local02, #0
30bec                 | LR__5201
30bec                 | LR__5202
30bec                 | LR__5203
30bec     00 A8 0E F2 | 	cmp	local02, #0 wz
30bf0     50 00 90 5D |  if_ne	jmp	#LR__5206
30bf4     E7 92 02 F6 | 	mov	arg01, fp
30bf8     0C 92 06 F1 | 	add	arg01, #12
30bfc     30 D6 BF FD | 	call	#_fatfs_cc_dir_remove
30c00     3D A9 0A F6 | 	mov	local02, result1 wz
30c04     20 00 90 5D |  if_ne	jmp	#LR__5204
30c08     00 A6 0E F2 | 	cmp	local01, #0 wz
30c0c     18 00 90 AD |  if_e	jmp	#LR__5204
30c10     E7 92 02 F6 | 	mov	arg01, fp
30c14     0C 92 06 F1 | 	add	arg01, #12
30c18     53 95 02 F6 | 	mov	arg02, local01
30c1c     00 96 06 F6 | 	mov	arg03, #0
30c20     D0 C2 BF FD | 	call	#_fatfs_cc_remove_chain
30c24     3D A9 02 F6 | 	mov	local02, result1
30c28                 | LR__5204
30c28     00 A8 0E F2 | 	cmp	local02, #0 wz
30c2c     14 00 90 5D |  if_ne	jmp	#LR__5205
30c30     70 CE 05 F1 | 	add	fp, #112
30c34     E7 92 02 FB | 	rdlong	arg01, fp
30c38     70 CE 85 F1 | 	sub	fp, #112
30c3c     C0 BD BF FD | 	call	#_fatfs_cc_sync_fs
30c40     3D A9 02 F6 | 	mov	local02, result1
30c44                 | LR__5205
30c44                 | LR__5206
30c44                 | LR__5207
30c44                 | LR__5208
30c44                 | ' 			}
30c44                 | ' 		}
30c44                 | ' 		;
30c44                 | ' 	}
30c44                 | ' 
30c44                 | ' 	return res ;
30c44     54 7B 02 F6 | 	mov	result1, local02
30c48     E7 F0 03 F6 | 	mov	ptra, fp
30c4c     F2 00 A0 FD | 	call	#popregs_
30c50                 | _fatfs_cc_f_unlink_ret
30c50     2D 00 64 FD | 	ret
30c54                 | 
30c54                 | _fatfs_cc_f_mkdir
30c54     03 CA 05 F6 | 	mov	COUNT_, #3
30c58     E8 00 A0 FD | 	call	#pushregs_
30c5c     5C F0 07 F1 | 	add	ptra, #92
30c60     04 CE 05 F1 | 	add	fp, #4
30c64     E7 92 62 FC | 	wrlong	arg01, fp
30c68     E7 92 02 F6 | 	mov	arg01, fp
30c6c     48 CE 05 F1 | 	add	fp, #72
30c70     E7 94 02 F6 | 	mov	arg02, fp
30c74     4C CE 85 F1 | 	sub	fp, #76
30c78     02 96 06 F6 | 	mov	arg03, #2
30c7c     C4 E3 BF FD | 	call	#_fatfs_cc_mount_volume
30c80     3D A7 0A F6 | 	mov	local01, result1 wz
30c84     FC 01 90 5D |  if_ne	jmp	#LR__5215
30c88     4C CE 05 F1 | 	add	fp, #76
30c8c     E7 A6 02 FB | 	rdlong	local01, fp
30c90     40 CE 85 F1 | 	sub	fp, #64
30c94     E7 A6 62 FC | 	wrlong	local01, fp
30c98     E7 92 02 F6 | 	mov	arg01, fp
30c9c     08 CE 85 F1 | 	sub	fp, #8
30ca0     E7 94 02 FB | 	rdlong	arg02, fp
30ca4     04 CE 85 F1 | 	sub	fp, #4
30ca8     FC DE BF FD | 	call	#_fatfs_cc_follow_path
30cac     3D A7 0A F6 | 	mov	local01, result1 wz
30cb0     08 A6 06 A6 |  if_e	mov	local01, #8
30cb4     04 A6 0E F2 | 	cmp	local01, #4 wz
30cb8     C8 01 90 5D |  if_ne	jmp	#LR__5214
30cbc     4C CE 05 F1 | 	add	fp, #76
30cc0     E7 A6 02 FB | 	rdlong	local01, fp
30cc4     10 CE 85 F1 | 	sub	fp, #16
30cc8     E7 A6 62 FC | 	wrlong	local01, fp
30ccc     E7 92 02 F6 | 	mov	arg01, fp
30cd0     3C CE 85 F1 | 	sub	fp, #60
30cd4     00 94 06 F6 | 	mov	arg02, #0
30cd8     2C C3 BF FD | 	call	#_fatfs_cc_create_chain
30cdc     3D A9 0A F6 | 	mov	local02, result1 wz
30ce0     00 A6 06 F6 | 	mov	local01, #0
30ce4     07 A6 06 A6 |  if_e	mov	local01, #7
30ce8     01 A8 0E F2 | 	cmp	local02, #1 wz
30cec     02 A6 06 A6 |  if_e	mov	local01, #2
30cf0     FF FF 7F FF 
30cf4     FF A9 0E F2 | 	cmp	local02, ##-1 wz
30cf8     01 A6 06 A6 |  if_e	mov	local01, #1
30cfc     8C 06 B0 FD | 	call	#_fatfs_cc__get_fattime
30d00     3D AB 02 F6 | 	mov	local03, result1
30d04     00 A6 0E F2 | 	cmp	local01, #0 wz
30d08     EC 00 90 5D |  if_ne	jmp	#LR__5211
30d0c     4C CE 05 F1 | 	add	fp, #76
30d10     E7 92 02 FB | 	rdlong	arg01, fp
30d14     4C CE 85 F1 | 	sub	fp, #76
30d18     54 95 02 F6 | 	mov	arg02, local02
30d1c     0C C5 BF FD | 	call	#_fatfs_cc_dir_clear
30d20     3D A7 0A F6 | 	mov	local01, result1 wz
30d24     D0 00 90 5D |  if_ne	jmp	#LR__5210
30d28     4C CE 05 F1 | 	add	fp, #76
30d2c     E7 92 02 FB | 	rdlong	arg01, fp
30d30     4C CE 85 F1 | 	sub	fp, #76
30d34     34 92 06 F1 | 	add	arg01, #52
30d38     20 94 06 F6 | 	mov	arg02, #32
30d3c     0B 96 06 F6 | 	mov	arg03, #11
30d40     D8 00 A0 FD | 	call	#\builtin_bytefill_
30d44     4C CE 05 F1 | 	add	fp, #76
30d48     E7 A6 02 FB | 	rdlong	local01, fp
30d4c     34 A6 06 F1 | 	add	local01, #52
30d50     53 5D 48 FC | 	wrbyte	#46, local01
30d54     E7 A6 02 FB | 	rdlong	local01, fp
30d58     3F A6 06 F1 | 	add	local01, #63
30d5c     53 21 48 FC | 	wrbyte	#16, local01
30d60     E7 92 02 FB | 	rdlong	arg01, fp
30d64     4A 92 06 F1 | 	add	arg01, #74
30d68     49 AB 62 FC | 	wrlong	local03, arg01
30d6c     E7 94 02 FB | 	rdlong	arg02, fp
30d70     4A 93 02 F6 | 	mov	arg01, arg02
30d74     4C CE 85 F1 | 	sub	fp, #76
30d78     34 94 06 F1 | 	add	arg02, #52
30d7c     54 97 02 F6 | 	mov	arg03, local02
30d80     70 C9 BF FD | 	call	#_fatfs_cc_st_clust
30d84     4C CE 05 F1 | 	add	fp, #76
30d88     E7 94 02 FB | 	rdlong	arg02, fp
30d8c     4A 93 02 F6 | 	mov	arg01, arg02
30d90     54 92 06 F1 | 	add	arg01, #84
30d94     4C CE 85 F1 | 	sub	fp, #76
30d98     34 94 06 F1 | 	add	arg02, #52
30d9c     20 96 06 F6 | 	mov	arg03, #32
30da0     E4 3A BF FD | 	call	#__system____builtin_memmove
30da4     4C CE 05 F1 | 	add	fp, #76
30da8     E7 A6 02 FB | 	rdlong	local01, fp
30dac     55 A6 06 F1 | 	add	local01, #85
30db0     53 5D 48 FC | 	wrbyte	#46, local01
30db4     38 CE 85 F1 | 	sub	fp, #56
30db8     E7 96 02 FB | 	rdlong	arg03, fp
30dbc     38 CE 05 F1 | 	add	fp, #56
30dc0     E7 94 02 FB | 	rdlong	arg02, fp
30dc4     4A 93 02 F6 | 	mov	arg01, arg02
30dc8     4C CE 85 F1 | 	sub	fp, #76
30dcc     54 94 06 F1 | 	add	arg02, #84
30dd0     20 C9 BF FD | 	call	#_fatfs_cc_st_clust
30dd4     4C CE 05 F1 | 	add	fp, #76
30dd8     E7 A6 02 FB | 	rdlong	local01, fp
30ddc     4C CE 85 F1 | 	sub	fp, #76
30de0     03 A6 06 F1 | 	add	local01, #3
30de4     53 03 48 FC | 	wrbyte	#1, local01
30de8     E7 92 02 F6 | 	mov	arg01, fp
30dec     0C 92 06 F1 | 	add	arg01, #12
30df0     D8 D1 BF FD | 	call	#_fatfs_cc_dir_register
30df4     3D A7 02 F6 | 	mov	local01, result1
30df8                 | LR__5210
30df8                 | LR__5211
30df8     00 A6 0E F2 | 	cmp	local01, #0 wz
30dfc     70 00 90 5D |  if_ne	jmp	#LR__5212
30e00     28 CE 05 F1 | 	add	fp, #40
30e04     E7 92 02 FB | 	rdlong	arg01, fp
30e08     16 92 06 F1 | 	add	arg01, #22
30e0c     49 AB 62 FC | 	wrlong	local03, arg01
30e10     24 CE 05 F1 | 	add	fp, #36
30e14     E7 92 02 FB | 	rdlong	arg01, fp
30e18     24 CE 85 F1 | 	sub	fp, #36
30e1c     E7 94 02 FB | 	rdlong	arg02, fp
30e20     28 CE 85 F1 | 	sub	fp, #40
30e24     54 97 02 F6 | 	mov	arg03, local02
30e28     C8 C8 BF FD | 	call	#_fatfs_cc_st_clust
30e2c     28 CE 05 F1 | 	add	fp, #40
30e30     E7 AA 02 FB | 	rdlong	local03, fp
30e34     0B AA 06 F1 | 	add	local03, #11
30e38     55 21 48 FC | 	wrbyte	#16, local03
30e3c     24 CE 05 F1 | 	add	fp, #36
30e40     E7 AA 02 FB | 	rdlong	local03, fp
30e44     4C CE 85 F1 | 	sub	fp, #76
30e48     03 AA 06 F1 | 	add	local03, #3
30e4c     55 03 48 FC | 	wrbyte	#1, local03
30e50     00 A6 0E F2 | 	cmp	local01, #0 wz
30e54     2C 00 90 5D |  if_ne	jmp	#LR__5213
30e58     4C CE 05 F1 | 	add	fp, #76
30e5c     E7 92 02 FB | 	rdlong	arg01, fp
30e60     4C CE 85 F1 | 	sub	fp, #76
30e64     98 BB BF FD | 	call	#_fatfs_cc_sync_fs
30e68     3D A7 02 F6 | 	mov	local01, result1
30e6c     14 00 90 FD | 	jmp	#LR__5213
30e70                 | LR__5212
30e70     E7 92 02 F6 | 	mov	arg01, fp
30e74     3C 92 06 F1 | 	add	arg01, #60
30e78     54 95 02 F6 | 	mov	arg02, local02
30e7c     00 96 06 F6 | 	mov	arg03, #0
30e80     70 C0 BF FD | 	call	#_fatfs_cc_remove_chain
30e84                 | LR__5213
30e84                 | LR__5214
30e84                 | LR__5215
30e84                 | ' 				remove_chain(&sobj, dcl, 0);
30e84                 | ' 			}
30e84                 | ' 		}
30e84                 | ' 		;
30e84                 | ' 	}
30e84                 | ' 
30e84                 | ' 	return res ;
30e84     53 7B 02 F6 | 	mov	result1, local01
30e88     E7 F0 03 F6 | 	mov	ptra, fp
30e8c     F2 00 A0 FD | 	call	#popregs_
30e90                 | _fatfs_cc_f_mkdir_ret
30e90     2D 00 64 FD | 	ret
30e94                 | 
30e94                 | _fatfs_cc_f_rename
30e94     03 CA 05 F6 | 	mov	COUNT_, #3
30e98     E8 00 A0 FD | 	call	#pushregs_
30e9c     9C F0 07 F1 | 	add	ptra, #156
30ea0     04 CE 05 F1 | 	add	fp, #4
30ea4     E7 92 62 FC | 	wrlong	arg01, fp
30ea8     04 CE 05 F1 | 	add	fp, #4
30eac     E7 94 62 FC | 	wrlong	arg02, fp
30eb0     E7 92 02 F6 | 	mov	arg01, fp
30eb4     08 CE 85 F1 | 	sub	fp, #8
30eb8     4C DE BF FD | 	call	#_fatfs_cc_get_ldnumber
30ebc     04 CE 05 F1 | 	add	fp, #4
30ec0     E7 92 02 F6 | 	mov	arg01, fp
30ec4     6C CE 05 F1 | 	add	fp, #108
30ec8     E7 94 02 F6 | 	mov	arg02, fp
30ecc     70 CE 85 F1 | 	sub	fp, #112
30ed0     02 96 06 F6 | 	mov	arg03, #2
30ed4     6C E1 BF FD | 	call	#_fatfs_cc_mount_volume
30ed8     3D A7 0A F6 | 	mov	local01, result1 wz
30edc     68 02 90 5D |  if_ne	jmp	#LR__5232
30ee0     70 CE 05 F1 | 	add	fp, #112
30ee4     E7 A8 02 FB | 	rdlong	local02, fp
30ee8     60 CE 85 F1 | 	sub	fp, #96
30eec     E7 A8 62 FC | 	wrlong	local02, fp
30ef0     E7 92 02 F6 | 	mov	arg01, fp
30ef4     0C CE 85 F1 | 	sub	fp, #12
30ef8     E7 94 02 FB | 	rdlong	arg02, fp
30efc     04 CE 85 F1 | 	sub	fp, #4
30f00     A4 DC BF FD | 	call	#_fatfs_cc_follow_path
30f04     3D A7 0A F6 | 	mov	local01, result1 wz
30f08     14 00 90 5D |  if_ne	jmp	#LR__5220
30f0c     3B CE 05 F1 | 	add	fp, #59
30f10     E7 A8 C2 FA | 	rdbyte	local02, fp
30f14     3B CE 85 F1 | 	sub	fp, #59
30f18     A0 A8 CE F7 | 	test	local02, #160 wz
30f1c     06 A6 06 56 |  if_ne	mov	local01, #6
30f20                 | LR__5220
30f20     00 A6 0E F2 | 	cmp	local01, #0 wz
30f24     20 02 90 5D |  if_ne	jmp	#LR__5231
30f28     74 CE 05 F1 | 	add	fp, #116
30f2c     E7 92 02 F6 | 	mov	arg01, fp
30f30     48 CE 85 F1 | 	sub	fp, #72
30f34     E7 94 02 FB | 	rdlong	arg02, fp
30f38     2C CE 85 F1 | 	sub	fp, #44
30f3c     20 96 06 F6 | 	mov	arg03, #32
30f40     44 39 BF FD | 	call	#__system____builtin_memmove
30f44     40 CE 05 F1 | 	add	fp, #64
30f48     E7 92 02 F6 | 	mov	arg01, fp
30f4c     30 CE 85 F1 | 	sub	fp, #48
30f50     E7 94 02 F6 | 	mov	arg02, fp
30f54     10 CE 85 F1 | 	sub	fp, #16
30f58     30 96 06 F6 | 	mov	arg03, #48
30f5c     28 39 BF FD | 	call	#__system____builtin_memmove
30f60     40 CE 05 F1 | 	add	fp, #64
30f64     E7 92 02 F6 | 	mov	arg01, fp
30f68     38 CE 85 F1 | 	sub	fp, #56
30f6c     E7 94 02 FB | 	rdlong	arg02, fp
30f70     08 CE 85 F1 | 	sub	fp, #8
30f74     30 DC BF FD | 	call	#_fatfs_cc_follow_path
30f78     3D A7 0A F6 | 	mov	local01, result1 wz
30f7c     44 00 90 5D |  if_ne	jmp	#LR__5223
30f80     48 CE 05 F1 | 	add	fp, #72
30f84     E7 A6 02 FB | 	rdlong	local01, fp
30f88     30 CE 85 F1 | 	sub	fp, #48
30f8c     E7 7A 02 FB | 	rdlong	result1, fp
30f90     18 CE 85 F1 | 	sub	fp, #24
30f94     3D A7 0A F2 | 	cmp	local01, result1 wz
30f98     20 00 90 5D |  if_ne	jmp	#LR__5221
30f9c     50 CE 05 F1 | 	add	fp, #80
30fa0     E7 A6 02 FB | 	rdlong	local01, fp
30fa4     30 CE 85 F1 | 	sub	fp, #48
30fa8     E7 7A 02 FB | 	rdlong	result1, fp
30fac     20 CE 85 F1 | 	sub	fp, #32
30fb0     3D A7 0A F2 | 	cmp	local01, result1 wz
30fb4     04 A8 06 A6 |  if_e	mov	local02, #4
30fb8     04 00 90 AD |  if_e	jmp	#LR__5222
30fbc                 | LR__5221
30fbc     08 A8 06 F6 | 	mov	local02, #8
30fc0                 | LR__5222
30fc0     54 A7 02 F6 | 	mov	local01, local02
30fc4                 | LR__5223
30fc4     04 A6 0E F2 | 	cmp	local01, #4 wz
30fc8     4C 01 90 5D |  if_ne	jmp	#LR__5228
30fcc     E7 92 02 F6 | 	mov	arg01, fp
30fd0     40 92 06 F1 | 	add	arg01, #64
30fd4     F4 CF BF FD | 	call	#_fatfs_cc_dir_register
30fd8     3D A7 0A F6 | 	mov	local01, result1 wz
30fdc     38 01 90 5D |  if_ne	jmp	#LR__5227
30fe0     5C CE 05 F1 | 	add	fp, #92
30fe4     E7 AA 02 FB | 	rdlong	local03, fp
30fe8     55 93 02 F6 | 	mov	arg01, local03
30fec     0D 92 06 F1 | 	add	arg01, #13
30ff0     18 CE 05 F1 | 	add	fp, #24
30ff4     E7 94 02 F6 | 	mov	arg02, fp
30ff8     74 CE 85 F1 | 	sub	fp, #116
30ffc     0D 94 06 F1 | 	add	arg02, #13
31000     13 96 06 F6 | 	mov	arg03, #19
31004     80 38 BF FD | 	call	#__system____builtin_memmove
31008     7F CE 05 F1 | 	add	fp, #127
3100c     E7 A8 C2 FA | 	rdbyte	local02, fp
31010     0B AA 06 F1 | 	add	local03, #11
31014     55 A9 42 FC | 	wrbyte	local02, local03
31018     54 A9 E2 F8 | 	getbyte	local02, local02, #0
3101c     0B AA 86 F1 | 	sub	local03, #11
31020     10 A8 CE F7 | 	test	local02, #16 wz
31024     0B AA 06 A1 |  if_e	add	local03, #11
31028     55 A9 C2 AA |  if_e	rdbyte	local02, local03
3102c     20 A8 46 A5 |  if_e	or	local02, #32
31030     55 A9 42 AC |  if_e	wrbyte	local02, local03
31034     0B AA 86 A1 |  if_e	sub	local03, #11
31038     0F CE 85 F1 | 	sub	fp, #15
3103c     E7 A8 02 FB | 	rdlong	local02, fp
31040     70 CE 85 F1 | 	sub	fp, #112
31044     03 A8 06 F1 | 	add	local02, #3
31048     54 03 48 FC | 	wrbyte	#1, local02
3104c     0B AA 06 F1 | 	add	local03, #11
31050     55 A9 C2 FA | 	rdbyte	local02, local03
31054     0B AA 86 F1 | 	sub	local03, #11
31058     10 A8 CE F7 | 	test	local02, #16 wz
3105c     B8 00 90 AD |  if_e	jmp	#LR__5226
31060     18 CE 05 F1 | 	add	fp, #24
31064     E7 A8 02 FB | 	rdlong	local02, fp
31068     30 CE 05 F1 | 	add	fp, #48
3106c     E7 96 02 FB | 	rdlong	arg03, fp
31070     48 CE 85 F1 | 	sub	fp, #72
31074     4B A9 0A F2 | 	cmp	local02, arg03 wz
31078     9C 00 90 AD |  if_e	jmp	#LR__5226
3107c     70 CE 05 F1 | 	add	fp, #112
31080     E7 92 02 FB | 	rdlong	arg01, fp
31084     49 A9 02 F6 | 	mov	local02, arg01
31088     70 CE 85 F1 | 	sub	fp, #112
3108c     55 95 02 F6 | 	mov	arg02, local03
31090     2C C6 BF FD | 	call	#_fatfs_cc_ld_clust
31094     3D 95 02 F6 | 	mov	arg02, result1
31098     54 93 02 F6 | 	mov	arg01, local02
3109c     60 BA BF FD | 	call	#_fatfs_cc_clst2sect
310a0     3D AB 0A F6 | 	mov	local03, result1 wz
310a4     02 A6 06 A6 |  if_e	mov	local01, #2
310a8     6C 00 90 AD |  if_e	jmp	#LR__5225
310ac     70 CE 05 F1 | 	add	fp, #112
310b0     E7 92 02 FB | 	rdlong	arg01, fp
310b4     70 CE 85 F1 | 	sub	fp, #112
310b8     55 95 02 F6 | 	mov	arg02, local03
310bc     C8 B8 BF FD | 	call	#_fatfs_cc_move_window
310c0     3D A7 0A F6 | 	mov	local01, result1 wz
310c4     70 CE 05 F1 | 	add	fp, #112
310c8     E7 AA 02 FB | 	rdlong	local03, fp
310cc     70 CE 85 F1 | 	sub	fp, #112
310d0     54 AA 06 F1 | 	add	local03, #84
310d4     01 AA 06 A1 |  if_e	add	local03, #1
310d8     55 A9 C2 AA |  if_e	rdbyte	local02, local03
310dc     01 AA 86 A1 |  if_e	sub	local03, #1
310e0     2E A8 0E A2 |  if_e	cmp	local02, #46 wz
310e4     30 00 90 5D |  if_ne	jmp	#LR__5224
310e8     70 CE 05 F1 | 	add	fp, #112
310ec     E7 92 02 FB | 	rdlong	arg01, fp
310f0     28 CE 85 F1 | 	sub	fp, #40
310f4     E7 96 02 FB | 	rdlong	arg03, fp
310f8     48 CE 85 F1 | 	sub	fp, #72
310fc     55 95 02 F6 | 	mov	arg02, local03
31100     F0 C5 BF FD | 	call	#_fatfs_cc_st_clust
31104     70 CE 05 F1 | 	add	fp, #112
31108     E7 A8 02 FB | 	rdlong	local02, fp
3110c     70 CE 85 F1 | 	sub	fp, #112
31110     03 A8 06 F1 | 	add	local02, #3
31114     54 03 48 FC | 	wrbyte	#1, local02
31118                 | LR__5224
31118                 | LR__5225
31118                 | LR__5226
31118                 | LR__5227
31118                 | LR__5228
31118     00 A6 0E F2 | 	cmp	local01, #0 wz
3111c     28 00 90 5D |  if_ne	jmp	#LR__5230
31120     E7 92 02 F6 | 	mov	arg01, fp
31124     10 92 06 F1 | 	add	arg01, #16
31128     04 D1 BF FD | 	call	#_fatfs_cc_dir_remove
3112c     3D A7 0A F6 | 	mov	local01, result1 wz
31130     14 00 90 5D |  if_ne	jmp	#LR__5229
31134     70 CE 05 F1 | 	add	fp, #112
31138     E7 92 02 FB | 	rdlong	arg01, fp
3113c     70 CE 85 F1 | 	sub	fp, #112
31140     BC B8 BF FD | 	call	#_fatfs_cc_sync_fs
31144     3D A7 02 F6 | 	mov	local01, result1
31148                 | LR__5229
31148                 | LR__5230
31148                 | LR__5231
31148                 | LR__5232
31148                 | ' 					res = sync_fs(fs);
31148                 | ' 				}
31148                 | ' 			}
31148                 | ' 
31148                 | ' 		}
31148                 | ' 		;
31148                 | ' 	}
31148                 | ' 
31148                 | ' 	return res ;
31148     53 7B 02 F6 | 	mov	result1, local01
3114c     E7 F0 03 F6 | 	mov	ptra, fp
31150     F2 00 A0 FD | 	call	#popregs_
31154                 | _fatfs_cc_f_rename_ret
31154     2D 00 64 FD | 	ret
31158                 | 
31158                 | _fatfs_cc___default_flush
31158     07 CA 05 F6 | 	mov	COUNT_, #7
3115c     E8 00 A0 FD | 	call	#pushregs_
31160     49 A7 02 F6 | 	mov	local01, arg01
31164     53 A9 02 FB | 	rdlong	local02, local01
31168     54 AB 02 FB | 	rdlong	local03, local02
3116c     08 A6 06 F1 | 	add	local01, #8
31170     53 7D 02 FB | 	rdlong	result2, local01
31174     08 A6 86 F1 | 	sub	local01, #8
31178     08 7C CE F7 | 	test	result2, #8 wz
3117c     D4 00 90 AD |  if_e	jmp	#LR__5242
31180     01 AA 56 F2 | 	cmps	local03, #1 wc
31184     2C 01 90 CD |  if_b	jmp	#LR__5244
31188     08 A6 06 F1 | 	add	local01, #8
3118c     53 7D 02 FB | 	rdlong	result2, local01
31190     08 A6 86 F1 | 	sub	local01, #8
31194     80 7C CE F7 | 	test	result2, #128 wz
31198     6C 00 90 AD |  if_e	jmp	#LR__5241
3119c     08 A6 06 F1 | 	add	local01, #8
311a0     53 97 02 FB | 	rdlong	arg03, local01
311a4     08 A6 86 F1 | 	sub	local01, #8
311a8     00 97 CE F7 | 	test	arg03, #256 wz
311ac     58 00 90 AD |  if_e	jmp	#LR__5240
311b0     30 A6 06 F1 | 	add	local01, #48
311b4     53 AD 02 FB | 	rdlong	local04, local01
311b8     56 AF 02 F6 | 	mov	local05, local04
311bc     30 A6 86 F1 | 	sub	local01, #48
311c0     13 AE 46 F7 | 	zerox	local05, #19
311c4     14 AC 46 F0 | 	shr	local04, #20
311c8     02 AC 66 F0 | 	shl	local04, #2
311cc     2D AD 02 F1 | 	add	local04, __methods__
311d0     56 AD 02 FB | 	rdlong	local04, local04
311d4     53 93 02 F6 | 	mov	arg01, local01
311d8     00 94 06 F6 | 	mov	arg02, #0
311dc     00 96 06 F6 | 	mov	arg03, #0
311e0     02 98 06 F6 | 	mov	arg04, #2
311e4     32 B1 02 F6 | 	mov	local06, objptr
311e8     57 65 02 F6 | 	mov	objptr, local05
311ec     2D AC 62 FD | 	call	local04
311f0     58 65 02 F6 | 	mov	objptr, local06
311f4     08 A6 06 F1 | 	add	local01, #8
311f8     53 B1 02 FB | 	rdlong	local06, local01
311fc     00 B1 26 F5 | 	andn	local06, #256
31200     53 B1 62 FC | 	wrlong	local06, local01
31204     08 A6 86 F1 | 	sub	local01, #8
31208                 | LR__5240
31208                 | LR__5241
31208     18 A6 06 F1 | 	add	local01, #24
3120c     53 AD 02 FB | 	rdlong	local04, local01
31210     56 AF 02 F6 | 	mov	local05, local04
31214     18 A6 86 F1 | 	sub	local01, #24
31218     13 AE 46 F7 | 	zerox	local05, #19
3121c     14 AC 46 F0 | 	shr	local04, #20
31220     02 AC 66 F0 | 	shl	local04, #2
31224     2D AD 02 F1 | 	add	local04, __methods__
31228     56 AD 02 FB | 	rdlong	local04, local04
3122c     0C A8 06 F1 | 	add	local02, #12
31230     54 95 02 FB | 	rdlong	arg02, local02
31234     0C A8 86 F1 | 	sub	local02, #12
31238     53 93 02 F6 | 	mov	arg01, local01
3123c     55 97 02 F6 | 	mov	arg03, local03
31240     32 B1 02 F6 | 	mov	local06, objptr
31244     57 65 02 F6 | 	mov	objptr, local05
31248     2D AC 62 FD | 	call	local04
3124c     58 65 02 F6 | 	mov	objptr, local06
31250     60 00 90 FD | 	jmp	#LR__5244
31254                 | LR__5242
31254     08 A6 06 F1 | 	add	local01, #8
31258     53 B1 02 FB | 	rdlong	local06, local01
3125c     08 A6 86 F1 | 	sub	local01, #8
31260     04 B0 CE F7 | 	test	local06, #4 wz
31264     00 AA 0E 52 |  if_ne	cmp	local03, #0 wz
31268     48 00 90 AD |  if_e	jmp	#LR__5243
3126c     55 95 62 F6 | 	neg	arg02, local03
31270     4A 97 02 F6 | 	mov	arg03, arg02
31274     1F 96 C6 F0 | 	sar	arg03, #31
31278     30 A6 06 F1 | 	add	local01, #48
3127c     53 AD 02 FB | 	rdlong	local04, local01
31280     56 AF 02 F6 | 	mov	local05, local04
31284     30 A6 86 F1 | 	sub	local01, #48
31288     13 AE 46 F7 | 	zerox	local05, #19
3128c     14 AC 46 F0 | 	shr	local04, #20
31290     02 AC 66 F0 | 	shl	local04, #2
31294     2D AD 02 F1 | 	add	local04, __methods__
31298     56 AD 02 FB | 	rdlong	local04, local04
3129c     53 93 02 F6 | 	mov	arg01, local01
312a0     01 98 06 F6 | 	mov	arg04, #1
312a4     32 B1 02 F6 | 	mov	local06, objptr
312a8     57 65 02 F6 | 	mov	objptr, local05
312ac     2D AC 62 FD | 	call	local04
312b0     58 65 02 F6 | 	mov	objptr, local06
312b4                 | LR__5243
312b4                 | LR__5244
312b4     54 01 68 FC | 	wrlong	#0, local02
312b8     04 A8 06 F1 | 	add	local02, #4
312bc     54 01 68 FC | 	wrlong	#0, local02
312c0     08 A6 06 F1 | 	add	local01, #8
312c4     53 B3 02 FB | 	rdlong	local07, local01
312c8     0C B2 26 F5 | 	andn	local07, #12
312cc     53 B3 62 FC | 	wrlong	local07, local01
312d0                 | '     }
312d0                 | '     b->cnt = 0;
312d0                 | '     b->ptr = 0;
312d0                 | '     f->state &= ~( (0x08) | (0x04) );
312d0                 | '     return 0;
312d0     00 7A 06 F6 | 	mov	result1, #0
312d4     E7 F0 03 F6 | 	mov	ptra, fp
312d8     F2 00 A0 FD | 	call	#popregs_
312dc                 | _fatfs_cc___default_flush_ret
312dc     2D 00 64 FD | 	ret
312e0                 | 
312e0                 | _fatfs_cc_getenv
312e0     06 CA 05 F6 | 	mov	COUNT_, #6
312e4     E8 00 A0 FD | 	call	#pushregs_
312e8     49 A7 02 F6 | 	mov	local01, arg01
312ec     49 A9 02 F6 | 	mov	local02, arg01
312f0     D7 06 48 FB | 	callpa	#(@LR__5251-@LR__5250)>>2,fcache_load_ptr_
312f4                 | LR__5250
312f4     54 7B CA FA | 	rdbyte	result1, local02 wz
312f8     01 A8 06 51 |  if_ne	add	local02, #1
312fc     F4 FF 9F 5D |  if_ne	jmp	#LR__5250
31300                 | LR__5251
31300     49 A9 82 F1 | 	sub	local02, arg01
31304     54 7B 02 F6 | 	mov	result1, local02
31308     02 00 00 FF 
3130c     FC 6E 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
31310     37 97 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
31314     02 00 00 FF 
31318     FC 6E 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
3131c                 | '             return 0;
3131c     00 7A 06 A6 |  if_e	mov	result1, #0
31320     5C 00 90 AD |  if_e	jmp	#LR__5254
31324                 | ' 
31324                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
31324     02 00 00 FF 
31328     FC 6E 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
3132c     37 AB 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
31330     02 00 00 FF 
31334     FC 6E 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
31338                 | LR__5252
31338     55 AD 0A FB | 	rdlong	local04, local03 wz
3133c     3C 00 90 AD |  if_e	jmp	#LR__5253
31340     56 93 02 F6 | 	mov	arg01, local04
31344     53 95 02 F6 | 	mov	arg02, local01
31348     54 97 02 F6 | 	mov	arg03, local02
3134c     24 AB BF FD | 	call	#_fatfs_cc_strncmp
31350     00 7A 0E F2 | 	cmp	result1, #0 wz
31354     54 AF 02 A6 |  if_e	mov	local05, local02
31358     56 AF 02 A1 |  if_e	add	local05, local04
3135c     57 B1 C2 AA |  if_e	rdbyte	local06, local05
31360     3D B0 0E A2 |  if_e	cmp	local06, #61 wz
31364                 | ' 			return name+len+1;
31364     54 AD 02 A1 |  if_e	add	local04, local02
31368     01 AC 06 A1 |  if_e	add	local04, #1
3136c     56 7B 02 A6 |  if_e	mov	result1, local04
31370     0C 00 90 AD |  if_e	jmp	#LR__5254
31374     04 AA 06 F1 | 	add	local03, #4
31378     BC FF 9F FD | 	jmp	#LR__5252
3137c                 | LR__5253
3137c                 | ' 	}
3137c                 | ' 	return 0;
3137c     00 7A 06 F6 | 	mov	result1, #0
31380                 | LR__5254
31380     E7 F0 03 F6 | 	mov	ptra, fp
31384     F2 00 A0 FD | 	call	#popregs_
31388                 | _fatfs_cc_getenv_ret
31388     2D 00 64 FD | 	ret
3138c                 | 
3138c                 | _fatfs_cc__get_fattime
3138c     00 CA 05 F6 | 	mov	COUNT_, #0
31390     E8 00 A0 FD | 	call	#pushregs_
31394     34 F0 07 F1 | 	add	ptra, #52
31398     00 92 06 F6 | 	mov	arg01, #0
3139c     A4 AB BF FD | 	call	#_fatfs_cc_time
313a0     04 CE 05 F1 | 	add	fp, #4
313a4     E7 7A 62 FC | 	wrlong	result1, fp
313a8     E7 92 02 F6 | 	mov	arg01, fp
313ac     0C CE 05 F1 | 	add	fp, #12
313b0     E7 94 02 F6 | 	mov	arg02, fp
313b4     10 CE 85 F1 | 	sub	fp, #16
313b8     70 AD BF FD | 	call	#_fatfs_cc__gmtime_r
313bc     24 CE 05 F1 | 	add	fp, #36
313c0     E7 7A 02 FB | 	rdlong	result1, fp
313c4     50 7A 86 F1 | 	sub	result1, #80
313c8     09 7A 66 F0 | 	shl	result1, #9
313cc     04 CE 85 F1 | 	sub	fp, #4
313d0     E7 94 02 FB | 	rdlong	arg02, fp
313d4     01 94 06 F1 | 	add	arg02, #1
313d8     05 94 66 F0 | 	shl	arg02, #5
313dc     4A 7B 42 F5 | 	or	result1, arg02
313e0     04 CE 85 F1 | 	sub	fp, #4
313e4     E7 94 02 FB | 	rdlong	arg02, fp
313e8     4A 7B 42 F5 | 	or	result1, arg02
313ec     04 CE 85 F1 | 	sub	fp, #4
313f0     E7 94 02 FB | 	rdlong	arg02, fp
313f4     0B 94 66 F0 | 	shl	arg02, #11
313f8     04 CE 85 F1 | 	sub	fp, #4
313fc     E7 92 02 FB | 	rdlong	arg01, fp
31400     05 92 66 F0 | 	shl	arg01, #5
31404     49 95 42 F5 | 	or	arg02, arg01
31408     04 CE 85 F1 | 	sub	fp, #4
3140c     E7 92 02 FB | 	rdlong	arg01, fp
31410     10 CE 85 F1 | 	sub	fp, #16
31414     49 95 42 F5 | 	or	arg02, arg01
31418                 | ' 
31418                 | '     now = time(0);
31418                 | '     _gmtime_r (&now, &date);
31418                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
31418                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
31418                 | '     return (ffdate << 16) | fftime;
31418     10 7A 66 F0 | 	shl	result1, #16
3141c     4A 7B 42 F5 | 	or	result1, arg02
31420     E7 F0 03 F6 | 	mov	ptra, fp
31424     F2 00 A0 FD | 	call	#popregs_
31428                 | _fatfs_cc__get_fattime_ret
31428     2D 00 64 FD | 	ret
3142c                 | 
3142c                 | _fatfs_cc_unixtime_1154
3142c     02 CA 05 F6 | 	mov	COUNT_, #2
31430     E8 00 A0 FD | 	call	#pushregs_
31434     34 F0 07 F1 | 	add	ptra, #52
31438     49 A7 02 F6 | 	mov	local01, arg01
3143c     09 A6 46 F0 | 	shr	local01, #9
31440     7F A6 06 F5 | 	and	local01, #127
31444     50 A8 06 F6 | 	mov	local02, #80
31448     53 A9 02 F1 | 	add	local02, local01
3144c     24 CE 05 F1 | 	add	fp, #36
31450     E7 A8 62 FC | 	wrlong	local02, fp
31454     49 A9 02 F6 | 	mov	local02, arg01
31458     05 A8 46 F0 | 	shr	local02, #5
3145c     54 A9 42 F8 | 	getnib	local02, local02, #0
31460     01 A8 86 F1 | 	sub	local02, #1
31464     04 CE 85 F1 | 	sub	fp, #4
31468     E7 A8 62 FC | 	wrlong	local02, fp
3146c     1F 92 06 F5 | 	and	arg01, #31
31470     04 CE 85 F1 | 	sub	fp, #4
31474     E7 92 62 FC | 	wrlong	arg01, fp
31478     4A A9 02 F6 | 	mov	local02, arg02
3147c     0B A8 46 F0 | 	shr	local02, #11
31480     1F A8 06 F5 | 	and	local02, #31
31484     04 CE 85 F1 | 	sub	fp, #4
31488     E7 A8 62 FC | 	wrlong	local02, fp
3148c     4A A9 02 F6 | 	mov	local02, arg02
31490     05 A8 46 F0 | 	shr	local02, #5
31494     3F A8 06 F5 | 	and	local02, #63
31498     04 CE 85 F1 | 	sub	fp, #4
3149c     E7 A8 62 FC | 	wrlong	local02, fp
314a0     1F 94 06 F5 | 	and	arg02, #31
314a4     01 94 66 F0 | 	shl	arg02, #1
314a8     04 CE 85 F1 | 	sub	fp, #4
314ac     E7 94 62 FC | 	wrlong	arg02, fp
314b0     E7 92 02 F6 | 	mov	arg01, fp
314b4     10 CE 85 F1 | 	sub	fp, #16
314b8     C8 AA BF FD | 	call	#_fatfs_cc_mktime
314bc                 | ' 
314bc                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
314bc                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
314bc                 | '     date.tm_mday = (dosdate & 0x1f);
314bc                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
314bc                 | '     date.tm_min = (dostime >> 5) & 0x3f;
314bc                 | '     date.tm_sec = (dostime & 0x1f) << 1;
314bc                 | ' 
314bc                 | '     t = mktime(&date);
314bc                 | ' #line 66 "C:/Users/Piotr/Downloads/flexprop-7.0.0/flexprop/include/filesys/fatfs/fatfs.cc"
314bc                 | '     return t;
314bc     E7 F0 03 F6 | 	mov	ptra, fp
314c0     F2 00 A0 FD | 	call	#popregs_
314c4                 | _fatfs_cc_unixtime_1154_ret
314c4     2D 00 64 FD | 	ret
314c8                 | 
314c8                 | _fatfs_cc__set_dos_error_1156
314c8     49 81 02 F6 | 	mov	_var01, arg01
314cc                 | ' #line 82 "C:/Users/Piotr/Downloads/flexprop-7.0.0/flexprop/include/filesys/fatfs/fatfs.cc"
314cc                 | '     switch (derr) {
314cc     14 80 26 F3 | 	fle	_var01, #20
314d0     30 80 62 FD | 	jmprel	_var01
314d4                 | LR__5260
314d4     50 00 90 FD | 	jmp	#LR__5261
314d8     84 00 90 FD | 	jmp	#LR__5275
314dc     80 00 90 FD | 	jmp	#LR__5276
314e0     7C 00 90 FD | 	jmp	#LR__5277
314e4     48 00 90 FD | 	jmp	#LR__5262
314e8     44 00 90 FD | 	jmp	#LR__5263
314ec     40 00 90 FD | 	jmp	#LR__5264
314f0     44 00 90 FD | 	jmp	#LR__5265
314f4     48 00 90 FD | 	jmp	#LR__5267
314f8     54 00 90 FD | 	jmp	#LR__5270
314fc     38 00 90 FD | 	jmp	#LR__5266
31500     4C 00 90 FD | 	jmp	#LR__5271
31504     48 00 90 FD | 	jmp	#LR__5272
31508     44 00 90 FD | 	jmp	#LR__5273
3150c     50 00 90 FD | 	jmp	#LR__5278
31510     4C 00 90 FD | 	jmp	#LR__5278
31514     48 00 90 FD | 	jmp	#LR__5278
31518     2C 00 90 FD | 	jmp	#LR__5268
3151c     38 00 90 FD | 	jmp	#LR__5274
31520     2C 00 90 FD | 	jmp	#LR__5269
31524     38 00 90 FD | 	jmp	#LR__5278
31528                 | LR__5261
31528     00 82 06 F6 | 	mov	_var02, #0
3152c                 | '         r = 0;
3152c                 | '         break;
3152c     34 00 90 FD | 	jmp	#LR__5279
31530                 | LR__5262
31530                 | LR__5263
31530                 | LR__5264
31530     04 82 06 F6 | 	mov	_var02, #4
31534                 | '         r =  4 ;
31534                 | '         break;
31534     2C 00 90 FD | 	jmp	#LR__5279
31538                 | LR__5265
31538                 | LR__5266
31538     06 82 06 F6 | 	mov	_var02, #6
3153c                 | '         r =  6 ;
3153c                 | '         break;
3153c     24 00 90 FD | 	jmp	#LR__5279
31540                 | LR__5267
31540     09 82 06 F6 | 	mov	_var02, #9
31544                 | '         r =  9 ;
31544                 | '         break;
31544     1C 00 90 FD | 	jmp	#LR__5279
31548                 | LR__5268
31548     07 82 06 F6 | 	mov	_var02, #7
3154c                 | '         r =  7 ;
3154c                 | '         break;
3154c     14 00 90 FD | 	jmp	#LR__5279
31550                 | LR__5269
31550                 | LR__5270
31550                 | LR__5271
31550                 | LR__5272
31550                 | LR__5273
31550     0A 82 06 F6 | 	mov	_var02, #10
31554                 | '         r =  10 ;
31554                 | '         break;
31554     0C 00 90 FD | 	jmp	#LR__5279
31558                 | LR__5274
31558     0B 82 06 F6 | 	mov	_var02, #11
3155c                 | '         r =  11 ;
3155c                 | '         break;
3155c     04 00 90 FD | 	jmp	#LR__5279
31560                 | LR__5275
31560                 | LR__5276
31560                 | LR__5277
31560                 | LR__5278
31560     0C 82 06 F6 | 	mov	_var02, #12
31564                 | '         r =  12 ;
31564                 | '         break;
31564                 | LR__5279
31564                 | '     }
31564                 | '     return _seterror(r);
31564     00 82 4E F2 | 	cmps	_var02, #0 wz
31568     20 6A 06 F1 | 	add	ptr___system__dat__, #32
3156c     35 83 62 FC | 	wrlong	_var02, ptr___system__dat__
31570     20 6A 86 F1 | 	sub	ptr___system__dat__, #32
31574     01 7A 66 56 |  if_ne	neg	result1, #1
31578     00 7A 06 A6 |  if_e	mov	result1, #0
3157c                 | _fatfs_cc__set_dos_error_1156_ret
3157c     2D 00 64 FD | 	ret
31580                 | 
31580                 | _fatfs_cc_v_creat
31580     04 CA 05 F6 | 	mov	COUNT_, #4
31584     E8 00 A0 FD | 	call	#pushregs_
31588     49 A7 02 F6 | 	mov	local01, arg01
3158c     4A A9 02 F6 | 	mov	local02, arg02
31590     03 00 00 FF 
31594     38 92 06 F6 | 	mov	arg01, ##1592
31598                 | '     return _gc_alloc(size);
31598     10 94 06 F6 | 	mov	arg02, #16
3159c     70 6E BF FD | 	call	#__system___gc_doalloc
315a0     3D AB 0A F6 | 	mov	local03, result1 wz
315a4                 | '       return _seterror( 7 );
315a4     20 6A 06 A1 |  if_e	add	ptr___system__dat__, #32
315a8     35 0F 68 AC |  if_e	wrlong	#7, ptr___system__dat__
315ac     20 6A 86 A1 |  if_e	sub	ptr___system__dat__, #32
315b0     01 7A 66 A6 |  if_e	neg	result1, #1
315b4     50 00 90 AD |  if_e	jmp	#LR__5281
315b8     55 93 02 F6 | 	mov	arg01, local03
315bc     00 94 06 F6 | 	mov	arg02, #0
315c0     03 00 00 FF 
315c4     38 96 06 F6 | 	mov	arg03, ##1592
315c8     D8 00 A0 FD | 	call	#\builtin_bytefill_
315cc     55 93 02 F6 | 	mov	arg01, local03
315d0     02 00 00 FF 
315d4     10 92 06 F1 | 	add	arg01, ##1040
315d8     54 95 02 F6 | 	mov	arg02, local02
315dc     07 96 06 F6 | 	mov	arg03, #7
315e0     D8 E0 BF FD | 	call	#_fatfs_cc_f_open
315e4     3D AD 0A F6 | 	mov	local04, result1 wz
315e8     14 00 90 AD |  if_e	jmp	#LR__5280
315ec     55 93 02 F6 | 	mov	arg01, local03
315f0                 | '     return _gc_free(ptr);
315f0     20 6F BF FD | 	call	#__system___gc_free
315f4                 | '     free(f);
315f4                 | '     return _set_dos_error(r);
315f4     56 93 02 F6 | 	mov	arg01, local04
315f8     CC FE BF FD | 	call	#_fatfs_cc__set_dos_error_1156
315fc     08 00 90 FD | 	jmp	#LR__5281
31600                 | LR__5280
31600     53 AB 62 FC | 	wrlong	local03, local01
31604                 | '   }
31604                 | '   fil->vfsdata = f;
31604                 | '   return 0;
31604     00 7A 06 F6 | 	mov	result1, #0
31608                 | LR__5281
31608     E7 F0 03 F6 | 	mov	ptra, fp
3160c     F2 00 A0 FD | 	call	#popregs_
31610                 | _fatfs_cc_v_creat_ret
31610     2D 00 64 FD | 	ret
31614                 | 
31614                 | _fatfs_cc_v_close
31614     02 CA 05 F6 | 	mov	COUNT_, #2
31618     E8 00 A0 FD | 	call	#pushregs_
3161c     49 A7 02 FB | 	rdlong	local01, arg01
31620     53 93 02 F6 | 	mov	arg01, local01
31624     02 00 00 FF 
31628     10 92 06 F1 | 	add	arg01, ##1040
3162c     34 EE BF FD | 	call	#_fatfs_cc_f_close
31630     3D A9 02 F6 | 	mov	local02, result1
31634     53 93 02 F6 | 	mov	arg01, local01
31638                 | '     return _gc_free(ptr);
31638     D8 6E BF FD | 	call	#__system___gc_free
3163c                 | '     FAT_FIL *f = fil->vfsdata;
3163c                 | '     r=f_close(&f->fil);
3163c                 | '     free(f);
3163c                 | '     return _set_dos_error(r);
3163c     54 93 02 F6 | 	mov	arg01, local02
31640     84 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31644     E7 F0 03 F6 | 	mov	ptra, fp
31648     F2 00 A0 FD | 	call	#popregs_
3164c                 | _fatfs_cc_v_close_ret
3164c     2D 00 64 FD | 	ret
31650                 | 
31650                 | _fatfs_cc_v_opendir
31650     04 CA 05 F6 | 	mov	COUNT_, #4
31654     E8 00 A0 FD | 	call	#pushregs_
31658     49 A7 02 F6 | 	mov	local01, arg01
3165c     4A A9 02 F6 | 	mov	local02, arg02
31660     30 92 06 F6 | 	mov	arg01, #48
31664                 | '     return _gc_alloc(size);
31664     10 94 06 F6 | 	mov	arg02, #16
31668     A4 6D BF FD | 	call	#__system___gc_doalloc
3166c     3D AB 0A F6 | 	mov	local03, result1 wz
31670                 | ' #line 166 "C:/Users/Piotr/Downloads/flexprop-7.0.0/flexprop/include/filesys/fatfs/fatfs.cc"
31670                 | '       return _seterror( 7 );
31670     20 6A 06 A1 |  if_e	add	ptr___system__dat__, #32
31674     35 0F 68 AC |  if_e	wrlong	#7, ptr___system__dat__
31678     20 6A 86 A1 |  if_e	sub	ptr___system__dat__, #32
3167c     01 7A 66 A6 |  if_e	neg	result1, #1
31680     34 00 90 AD |  if_e	jmp	#LR__5291
31684     54 95 02 F6 | 	mov	arg02, local02
31688     55 93 02 F6 | 	mov	arg01, local03
3168c     C0 F1 BF FD | 	call	#_fatfs_cc_f_opendir
31690     3D AD 0A F6 | 	mov	local04, result1 wz
31694     14 00 90 AD |  if_e	jmp	#LR__5290
31698     55 93 02 F6 | 	mov	arg01, local03
3169c                 | '     return _gc_free(ptr);
3169c     74 6E BF FD | 	call	#__system___gc_free
316a0                 | '         free(f);
316a0                 | '         return _set_dos_error(r);
316a0     56 93 02 F6 | 	mov	arg01, local04
316a4     20 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1156
316a8     0C 00 90 FD | 	jmp	#LR__5291
316ac                 | LR__5290
316ac     04 A6 06 F1 | 	add	local01, #4
316b0     53 AB 62 FC | 	wrlong	local03, local01
316b4                 | '     }
316b4                 | '     dir->vfsdata = f;
316b4                 | '     return 0;
316b4     00 7A 06 F6 | 	mov	result1, #0
316b8                 | LR__5291
316b8     E7 F0 03 F6 | 	mov	ptra, fp
316bc     F2 00 A0 FD | 	call	#popregs_
316c0                 | _fatfs_cc_v_opendir_ret
316c0     2D 00 64 FD | 	ret
316c4                 | 
316c4                 | _fatfs_cc_v_closedir
316c4     02 CA 05 F6 | 	mov	COUNT_, #2
316c8     E8 00 A0 FD | 	call	#pushregs_
316cc     04 92 06 F1 | 	add	arg01, #4
316d0     49 A7 02 FB | 	rdlong	local01, arg01
316d4     53 93 02 F6 | 	mov	arg01, local01
316d8     90 F2 BF FD | 	call	#_fatfs_cc_f_closedir
316dc     3D A9 02 F6 | 	mov	local02, result1
316e0     53 93 02 F6 | 	mov	arg01, local01
316e4                 | '     return _gc_free(ptr);
316e4     2C 6E BF FD | 	call	#__system___gc_free
316e8     00 A8 0E F2 | 	cmp	local02, #0 wz
316ec     54 93 02 56 |  if_ne	mov	arg01, local02
316f0     D4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_1156
316f4                 | '     return r;
316f4     54 7B 02 F6 | 	mov	result1, local02
316f8     E7 F0 03 F6 | 	mov	ptra, fp
316fc     F2 00 A0 FD | 	call	#popregs_
31700                 | _fatfs_cc_v_closedir_ret
31700     2D 00 64 FD | 	ret
31704                 | 
31704                 | _fatfs_cc_v_readdir
31704     01 CA 05 F6 | 	mov	COUNT_, #1
31708     E8 00 A0 FD | 	call	#pushregs_
3170c     2C F1 07 F1 | 	add	ptra, #300
31710     4A A7 02 F6 | 	mov	local01, arg02
31714     04 92 06 F1 | 	add	arg01, #4
31718     49 93 02 FB | 	rdlong	arg01, arg01
3171c     E7 94 02 F6 | 	mov	arg02, fp
31720     0C 94 06 F1 | 	add	arg02, #12
31724     78 F2 BF FD | 	call	#_fatfs_cc_f_readdir
31728     3D 97 0A F6 | 	mov	arg03, result1 wz
3172c     0C 00 90 AD |  if_e	jmp	#LR__5300
31730                 | '         return _set_dos_error(r);
31730     4B 93 02 F6 | 	mov	arg01, arg03
31734     90 FD BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31738     88 00 90 FD | 	jmp	#LR__5301
3173c                 | LR__5300
3173c     28 CE 05 F1 | 	add	fp, #40
31740     E7 96 CA FA | 	rdbyte	arg03, fp wz
31744     28 CE 85 F1 | 	sub	fp, #40
31748                 | '         return -1;
31748     01 7A 66 A6 |  if_e	neg	result1, #1
3174c     74 00 90 AD |  if_e	jmp	#LR__5301
31750     E7 94 02 F6 | 	mov	arg02, fp
31754     28 94 06 F1 | 	add	arg02, #40
31758     53 93 02 F6 | 	mov	arg01, local01
3175c     3F 96 06 F6 | 	mov	arg03, #63
31760     7C A6 BF FD | 	call	#_fatfs_cc_strncpy
31764     3F A6 06 F1 | 	add	local01, #63
31768     53 01 48 FC | 	wrbyte	#0, local01
3176c     3F A6 86 F1 | 	sub	local01, #63
31770     14 CE 05 F1 | 	add	fp, #20
31774     E7 96 C2 FA | 	rdbyte	arg03, fp
31778     10 96 CE F7 | 	test	arg03, #16 wz
3177c     50 A6 06 51 |  if_ne	add	local01, #80
31780     53 03 48 5C |  if_ne	wrbyte	#1, local01
31784     50 A6 E6 F3 | 	sumnz	local01, #80
31788     53 01 48 AC |  if_e	wrbyte	#0, local01
3178c     50 A6 86 A1 |  if_e	sub	local01, #80
31790     08 CE 85 F1 | 	sub	fp, #8
31794     E7 96 02 FB | 	rdlong	arg03, fp
31798     48 A6 06 F1 | 	add	local01, #72
3179c     53 97 62 FC | 	wrlong	arg03, local01
317a0     04 CE 05 F1 | 	add	fp, #4
317a4     E7 92 E2 FA | 	rdword	arg01, fp
317a8     02 CE 05 F1 | 	add	fp, #2
317ac     E7 94 E2 FA | 	rdword	arg02, fp
317b0     12 CE 85 F1 | 	sub	fp, #18
317b4     74 FC BF FD | 	call	#_fatfs_cc_unixtime_1154
317b8     04 A6 06 F1 | 	add	local01, #4
317bc     53 7B 62 FC | 	wrlong	result1, local01
317c0                 | '         ent->d_type =  (0) ;
317c0                 | '     }
317c0                 | '     ent->d_size = finfo.fsize;
317c0                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
317c0                 | '     return 0;
317c0     00 7A 06 F6 | 	mov	result1, #0
317c4                 | LR__5301
317c4     E7 F0 03 F6 | 	mov	ptra, fp
317c8     F2 00 A0 FD | 	call	#popregs_
317cc                 | _fatfs_cc_v_readdir_ret
317cc     2D 00 64 FD | 	ret
317d0                 | 
317d0                 | _fatfs_cc_v_stat
317d0     05 CA 05 F6 | 	mov	COUNT_, #5
317d4     E8 00 A0 FD | 	call	#pushregs_
317d8     30 F1 07 F1 | 	add	ptra, #304
317dc     49 A7 02 F6 | 	mov	local01, arg01
317e0     4A A9 02 F6 | 	mov	local02, arg02
317e4     54 93 02 F6 | 	mov	arg01, local02
317e8     00 94 06 F6 | 	mov	arg02, #0
317ec     34 96 06 F6 | 	mov	arg03, #52
317f0     D8 00 A0 FD | 	call	#\builtin_bytefill_
317f4     53 7D CA FA | 	rdbyte	result2, local01 wz
317f8     1C 00 90 AD |  if_e	jmp	#LR__5310
317fc     53 7D C2 FA | 	rdbyte	result2, local01
31800     2E 7C 0E F2 | 	cmp	result2, #46 wz
31804     01 A6 06 A1 |  if_e	add	local01, #1
31808     53 AB C2 AA |  if_e	rdbyte	local03, local01
3180c     01 A6 86 A1 |  if_e	sub	local01, #1
31810     00 AA 4E A2 |  if_e	cmps	local03, #0 wz
31814     14 00 90 5D |  if_ne	jmp	#LR__5311
31818                 | LR__5310
31818     18 CE 05 F1 | 	add	fp, #24
3181c     E7 20 48 FC | 	wrbyte	#16, fp
31820     18 CE 85 F1 | 	sub	fp, #24
31824     00 AC 06 F6 | 	mov	local04, #0
31828     14 00 90 FD | 	jmp	#LR__5312
3182c                 | LR__5311
3182c     E7 94 02 F6 | 	mov	arg02, fp
31830     10 94 06 F1 | 	add	arg02, #16
31834     53 93 02 F6 | 	mov	arg01, local01
31838     00 F2 BF FD | 	call	#_fatfs_cc_f_stat
3183c     3D AD 02 F6 | 	mov	local04, result1
31840                 | LR__5312
31840     00 AC 0E F2 | 	cmp	local04, #0 wz
31844     0C 00 90 AD |  if_e	jmp	#LR__5313
31848                 | '         return _set_dos_error(r);
31848     56 93 02 F6 | 	mov	arg01, local04
3184c     78 FC BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31850     9C 00 90 FD | 	jmp	#LR__5314
31854                 | LR__5313
31854     24 AF 06 F6 | 	mov	local05, #292
31858     18 CE 05 F1 | 	add	fp, #24
3185c     E7 AA C2 FA | 	rdbyte	local03, fp
31860     01 AA CE F7 | 	test	local03, #1 wz
31864     B6 AF 06 A6 |  if_e	mov	local05, #438
31868     10 AA CE F7 | 	test	local03, #16 wz
3186c     08 00 00 5F 
31870     49 AE 46 55 |  if_ne	or	local05, ##4169
31874     08 A8 06 F1 | 	add	local02, #8
31878     54 AF 62 FC | 	wrlong	local05, local02
3187c     04 A8 06 F1 | 	add	local02, #4
31880     54 03 68 FC | 	wrlong	#1, local02
31884     08 CE 85 F1 | 	sub	fp, #8
31888     E7 7A 02 FB | 	rdlong	result1, fp
3188c     0C A8 06 F1 | 	add	local02, #12
31890     54 7B 62 FC | 	wrlong	result1, local02
31894     04 A8 06 F1 | 	add	local02, #4
31898     54 01 68 FC | 	wrlong	#0, local02
3189c     04 A8 06 F1 | 	add	local02, #4
318a0     01 00 80 FF 
318a4     54 01 68 FC | 	wrlong	##512, local02
318a8     E7 AA 02 FB | 	rdlong	local03, fp
318ac     FF AB 06 F1 | 	add	local03, #511
318b0     09 AA 46 F0 | 	shr	local03, #9
318b4     04 A8 06 F1 | 	add	local02, #4
318b8     54 AB 62 FC | 	wrlong	local03, local02
318bc     04 CE 05 F1 | 	add	fp, #4
318c0     E7 92 E2 FA | 	rdword	arg01, fp
318c4     02 CE 05 F1 | 	add	fp, #2
318c8     E7 94 E2 FA | 	rdword	arg02, fp
318cc     16 CE 85 F1 | 	sub	fp, #22
318d0     58 FB BF FD | 	call	#_fatfs_cc_unixtime_1154
318d4     0C A8 06 F1 | 	add	local02, #12
318d8     54 7B 62 FC | 	wrlong	result1, local02
318dc     04 A8 86 F1 | 	sub	local02, #4
318e0     54 7B 62 FC | 	wrlong	result1, local02
318e4     04 A8 86 F1 | 	sub	local02, #4
318e8     54 7B 62 FC | 	wrlong	result1, local02
318ec                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
318ec                 | '     }
318ec                 | '     buf->st_mode = mode;
318ec                 | '     buf->st_nlink = 1;
318ec                 | '     buf->st_size = finfo.fsize;
318ec                 | '     buf->st_blksize = 512;
318ec                 | '     buf->st_blocks = (finfo.fsize + 511) / 512;
318ec                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
318ec                 | ' #line 257 "C:/Users/Piotr/Downloads/flexprop-7.0.0/flexprop/include/filesys/fatfs/fatfs.cc"
318ec                 | '     return r;
318ec     56 7B 02 F6 | 	mov	result1, local04
318f0                 | LR__5314
318f0     E7 F0 03 F6 | 	mov	ptra, fp
318f4     F2 00 A0 FD | 	call	#popregs_
318f8                 | _fatfs_cc_v_stat_ret
318f8     2D 00 64 FD | 	ret
318fc                 | 
318fc                 | _fatfs_cc_v_read
318fc     02 CA 05 F6 | 	mov	COUNT_, #2
31900     E8 00 A0 FD | 	call	#pushregs_
31904     1C F0 07 F1 | 	add	ptra, #28
31908     49 A7 02 F6 | 	mov	local01, arg01
3190c     53 93 0A FB | 	rdlong	arg01, local01 wz
31910                 | '         return _seterror( 5 );
31910     20 6A 06 A1 |  if_e	add	ptr___system__dat__, #32
31914     35 0B 68 AC |  if_e	wrlong	#5, ptr___system__dat__
31918     20 6A 86 A1 |  if_e	sub	ptr___system__dat__, #32
3191c     01 7A 66 A6 |  if_e	neg	result1, #1
31920     58 00 90 AD |  if_e	jmp	#LR__5321
31924     02 00 00 FF 
31928     10 92 06 F1 | 	add	arg01, ##1040
3192c     E7 98 02 F6 | 	mov	arg04, fp
31930     18 98 06 F1 | 	add	arg04, #24
31934     DC E1 BF FD | 	call	#_fatfs_cc_f_read
31938     3D 99 0A F6 | 	mov	arg04, result1 wz
3193c     1C 00 90 AD |  if_e	jmp	#LR__5320
31940     08 A6 06 F1 | 	add	local01, #8
31944     53 93 02 FB | 	rdlong	arg01, local01
31948     20 92 46 F5 | 	or	arg01, #32
3194c     53 93 62 FC | 	wrlong	arg01, local01
31950                 | '         fil->state |=  (0x20) ;
31950                 | '         return _set_dos_error(r);
31950     4C 93 02 F6 | 	mov	arg01, arg04
31954     70 FB BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31958     20 00 90 FD | 	jmp	#LR__5321
3195c                 | LR__5320
3195c     18 CE 05 F1 | 	add	fp, #24
31960     E7 A8 0A FB | 	rdlong	local02, fp wz
31964     08 A6 06 A1 |  if_e	add	local01, #8
31968     53 A9 02 AB |  if_e	rdlong	local02, local01
3196c     10 A8 46 A5 |  if_e	or	local02, #16
31970     53 A9 62 AC |  if_e	wrlong	local02, local01
31974                 | '         fil->state |=  (0x10) ;
31974                 | '     }
31974                 | '     return x;
31974     E7 7A 02 FB | 	rdlong	result1, fp
31978     18 CE 85 F1 | 	sub	fp, #24
3197c                 | LR__5321
3197c     E7 F0 03 F6 | 	mov	ptra, fp
31980     F2 00 A0 FD | 	call	#popregs_
31984                 | _fatfs_cc_v_read_ret
31984     2D 00 64 FD | 	ret
31988                 | 
31988                 | _fatfs_cc_v_write
31988     01 CA 05 F6 | 	mov	COUNT_, #1
3198c     E8 00 A0 FD | 	call	#pushregs_
31990     1C F0 07 F1 | 	add	ptra, #28
31994     49 A7 02 F6 | 	mov	local01, arg01
31998     53 93 0A FB | 	rdlong	arg01, local01 wz
3199c                 | '         return _seterror( 5 );
3199c     20 6A 06 A1 |  if_e	add	ptr___system__dat__, #32
319a0     35 0B 68 AC |  if_e	wrlong	#5, ptr___system__dat__
319a4     20 6A 86 A1 |  if_e	sub	ptr___system__dat__, #32
319a8     01 7A 66 A6 |  if_e	neg	result1, #1
319ac     44 00 90 AD |  if_e	jmp	#LR__5331
319b0     02 00 00 FF 
319b4     10 92 06 F1 | 	add	arg01, ##1040
319b8     E7 98 02 F6 | 	mov	arg04, fp
319bc     18 98 06 F1 | 	add	arg04, #24
319c0     E8 E4 BF FD | 	call	#_fatfs_cc_f_write
319c4     3D 99 0A F6 | 	mov	arg04, result1 wz
319c8     1C 00 90 AD |  if_e	jmp	#LR__5330
319cc     08 A6 06 F1 | 	add	local01, #8
319d0     53 93 02 FB | 	rdlong	arg01, local01
319d4     20 92 46 F5 | 	or	arg01, #32
319d8     53 93 62 FC | 	wrlong	arg01, local01
319dc                 | '         fil->state |=  (0x20) ;
319dc                 | '         return _set_dos_error(r);
319dc     4C 93 02 F6 | 	mov	arg01, arg04
319e0     E4 FA BF FD | 	call	#_fatfs_cc__set_dos_error_1156
319e4     0C 00 90 FD | 	jmp	#LR__5331
319e8                 | LR__5330
319e8                 | '     }
319e8                 | '     return x;
319e8     18 CE 05 F1 | 	add	fp, #24
319ec     E7 7A 02 FB | 	rdlong	result1, fp
319f0     18 CE 85 F1 | 	sub	fp, #24
319f4                 | LR__5331
319f4     E7 F0 03 F6 | 	mov	ptra, fp
319f8     F2 00 A0 FD | 	call	#popregs_
319fc                 | _fatfs_cc_v_write_ret
319fc     2D 00 64 FD | 	ret
31a00                 | 
31a00                 | _fatfs_cc_v_lseek
31a00     06 CA 05 F6 | 	mov	COUNT_, #6
31a04     E8 00 A0 FD | 	call	#pushregs_
31a08     4A AB 02 F6 | 	mov	local03, arg02
31a0c     4C AD 02 F6 | 	mov	local04, arg04
31a10     49 AF 02 FB | 	rdlong	local05, arg01
31a14     02 00 00 FF 
31a18     10 AE 0E F1 | 	add	local05, ##1040 wz
31a1c     18 00 90 5D |  if_ne	jmp	#LR__5340
31a20                 | '         return _seterror( 5 );
31a20     20 6A 06 F1 | 	add	ptr___system__dat__, #32
31a24     35 0B 68 FC | 	wrlong	#5, ptr___system__dat__
31a28     20 6A 86 F1 | 	sub	ptr___system__dat__, #32
31a2c     01 7C 66 F6 | 	neg	result2, #1
31a30     01 7A 66 F6 | 	neg	result1, #1
31a34     58 00 90 FD | 	jmp	#LR__5343
31a38                 | LR__5340
31a38     00 AC 0E F2 | 	cmp	local04, #0 wz
31a3c     24 00 90 AD |  if_e	jmp	#LR__5341
31a40     01 AC 0E F2 | 	cmp	local04, #1 wz
31a44     14 AE 06 A1 |  if_e	add	local05, #20
31a48     57 B1 02 AB |  if_e	rdlong	local06, local05
31a4c     14 AE 86 A1 |  if_e	sub	local05, #20
31a50     58 AB 02 A1 |  if_e	add	local03, local06
31a54     0C AE 06 51 |  if_ne	add	local05, #12
31a58     57 B1 02 5B |  if_ne	rdlong	local06, local05
31a5c     0C AE 86 51 |  if_ne	sub	local05, #12
31a60     58 AB 02 51 |  if_ne	add	local03, local06
31a64                 | LR__5341
31a64     57 93 02 F6 | 	mov	arg01, local05
31a68     55 95 02 F6 | 	mov	arg02, local03
31a6c     38 EA BF FD | 	call	#_fatfs_cc_f_lseek
31a70     3D 93 0A F6 | 	mov	arg01, result1 wz
31a74     10 00 90 AD |  if_e	jmp	#LR__5342
31a78                 | '         return _set_dos_error(result);
31a78     4C FA BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31a7c     3D 7D 02 F6 | 	mov	result2, result1
31a80     1F 7C C6 F0 | 	sar	result2, #31
31a84     08 00 90 FD | 	jmp	#LR__5343
31a88                 | LR__5342
31a88                 | '     }
31a88                 | '     return (off_t)offset;
31a88     55 7B 02 F6 | 	mov	result1, local03
31a8c     54 7D 02 F6 | 	mov	result2, local02
31a90                 | LR__5343
31a90     E7 F0 03 F6 | 	mov	ptra, fp
31a94     F2 00 A0 FD | 	call	#popregs_
31a98                 | _fatfs_cc_v_lseek_ret
31a98     2D 00 64 FD | 	ret
31a9c                 | 
31a9c                 | _fatfs_cc_v_ioctl
31a9c                 | ' {
31a9c                 | '     return _seterror( 10 );
31a9c     20 6A 06 F1 | 	add	ptr___system__dat__, #32
31aa0     35 15 68 FC | 	wrlong	#10, ptr___system__dat__
31aa4     20 6A 86 F1 | 	sub	ptr___system__dat__, #32
31aa8     01 7A 66 F6 | 	neg	result1, #1
31aac                 | _fatfs_cc_v_ioctl_ret
31aac     2D 00 64 FD | 	ret
31ab0                 | 
31ab0                 | _fatfs_cc_v_mkdir
31ab0     A0 F1 BF FD | 	call	#_fatfs_cc_f_mkdir
31ab4     3D 93 02 F6 | 	mov	arg01, result1
31ab8                 | ' 
31ab8                 | '     r = f_mkdir(name);
31ab8                 | '     return _set_dos_error(r);
31ab8     0C FA BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31abc                 | _fatfs_cc_v_mkdir_ret
31abc     2D 00 64 FD | 	ret
31ac0                 | 
31ac0                 | _fatfs_cc_v_remove
31ac0     0C F0 BF FD | 	call	#_fatfs_cc_f_unlink
31ac4     3D 93 02 F6 | 	mov	arg01, result1
31ac8                 | ' 
31ac8                 | '     r = f_unlink(name);
31ac8                 | '     return _set_dos_error(r);
31ac8     FC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31acc                 | _fatfs_cc_v_remove_ret
31acc     2D 00 64 FD | 	ret
31ad0                 | 
31ad0                 | _fatfs_cc_v_rmdir
31ad0     FC EF BF FD | 	call	#_fatfs_cc_f_unlink
31ad4     3D 93 02 F6 | 	mov	arg01, result1
31ad8                 | ' 
31ad8                 | '     r = f_unlink(name);
31ad8                 | '     return _set_dos_error(r);
31ad8     EC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31adc                 | _fatfs_cc_v_rmdir_ret
31adc     2D 00 64 FD | 	ret
31ae0                 | 
31ae0                 | _fatfs_cc_v_rename
31ae0     B0 F3 BF FD | 	call	#_fatfs_cc_f_rename
31ae4     3D 93 02 F6 | 	mov	arg01, result1
31ae8                 | '     return _set_dos_error(r);
31ae8     DC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31aec                 | _fatfs_cc_v_rename_ret
31aec     2D 00 64 FD | 	ret
31af0                 | 
31af0                 | _fatfs_cc_v_open
31af0     07 CA 05 F6 | 	mov	COUNT_, #7
31af4     E8 00 A0 FD | 	call	#pushregs_
31af8     49 A7 02 F6 | 	mov	local01, arg01
31afc     4A A9 02 F6 | 	mov	local02, arg02
31b00     4B AB 02 F6 | 	mov	local03, arg03
31b04     03 00 00 FF 
31b08     38 92 06 F6 | 	mov	arg01, ##1592
31b0c                 | '     return _gc_alloc(size);
31b0c     10 94 06 F6 | 	mov	arg02, #16
31b10     FC 68 BF FD | 	call	#__system___gc_doalloc
31b14     3D AD 0A F6 | 	mov	local04, result1 wz
31b18                 | '       return _seterror( 7 );
31b18     20 6A 06 A1 |  if_e	add	ptr___system__dat__, #32
31b1c     35 0F 68 AC |  if_e	wrlong	#7, ptr___system__dat__
31b20     20 6A 86 A1 |  if_e	sub	ptr___system__dat__, #32
31b24     01 7A 66 A6 |  if_e	neg	result1, #1
31b28     90 00 90 AD |  if_e	jmp	#LR__5356
31b2c     56 93 02 F6 | 	mov	arg01, local04
31b30     00 94 06 F6 | 	mov	arg02, #0
31b34     03 00 00 FF 
31b38     38 96 06 F6 | 	mov	arg03, ##1592
31b3c     D8 00 A0 FD | 	call	#\builtin_bytefill_
31b40                 | '   switch (flags & 3) {
31b40     55 AF 02 F6 | 	mov	local05, local03
31b44     03 AE 0E F5 | 	and	local05, #3 wz
31b48     0C 00 90 AD |  if_e	jmp	#LR__5350
31b4c     01 AE 0E F2 | 	cmp	local05, #1 wz
31b50     0C 00 90 AD |  if_e	jmp	#LR__5351
31b54     10 00 90 FD | 	jmp	#LR__5352
31b58                 | LR__5350
31b58     01 B0 06 F6 | 	mov	local06, #1
31b5c                 | '       fs_flags =  0x01 ;
31b5c                 | '       break;
31b5c     0C 00 90 FD | 	jmp	#LR__5353
31b60                 | LR__5351
31b60     02 B0 06 F6 | 	mov	local06, #2
31b64                 | '       fs_flags =  0x02 ;
31b64                 | '       break;
31b64     04 00 90 FD | 	jmp	#LR__5353
31b68                 | LR__5352
31b68     03 B0 06 F6 | 	mov	local06, #3
31b6c                 | '       fs_flags =  0x01  |  0x02 ;
31b6c                 | '       break;
31b6c                 | LR__5353
31b6c     08 AA CE F7 | 	test	local03, #8 wz
31b70     18 B0 46 55 |  if_ne	or	local06, #24
31b74     08 00 90 5D |  if_ne	jmp	#LR__5354
31b78     20 AA CE F7 | 	test	local03, #32 wz
31b7c     30 B0 46 55 |  if_ne	or	local06, #48
31b80                 | LR__5354
31b80     56 93 02 F6 | 	mov	arg01, local04
31b84     02 00 00 FF 
31b88     10 92 06 F1 | 	add	arg01, ##1040
31b8c     54 95 02 F6 | 	mov	arg02, local02
31b90     58 97 02 F6 | 	mov	arg03, local06
31b94     24 DB BF FD | 	call	#_fatfs_cc_f_open
31b98     3D B3 0A F6 | 	mov	local07, result1 wz
31b9c     14 00 90 AD |  if_e	jmp	#LR__5355
31ba0     56 93 02 F6 | 	mov	arg01, local04
31ba4                 | '     return _gc_free(ptr);
31ba4     6C 69 BF FD | 	call	#__system___gc_free
31ba8                 | '     free(f);
31ba8                 | ' #line 426 "C:/Users/Piotr/Downloads/flexprop-7.0.0/flexprop/include/filesys/fatfs/fatfs.cc"
31ba8                 | '     return _set_dos_error(r);
31ba8     59 93 02 F6 | 	mov	arg01, local07
31bac     18 F9 BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31bb0     08 00 90 FD | 	jmp	#LR__5356
31bb4                 | LR__5355
31bb4     53 AD 62 FC | 	wrlong	local04, local01
31bb8                 | '   }
31bb8                 | '   fil->vfsdata = f;
31bb8                 | '   return 0;
31bb8     00 7A 06 F6 | 	mov	result1, #0
31bbc                 | LR__5356
31bbc     E7 F0 03 F6 | 	mov	ptra, fp
31bc0     F2 00 A0 FD | 	call	#popregs_
31bc4                 | _fatfs_cc_v_open_ret
31bc4     2D 00 64 FD | 	ret
31bc8                 | 
31bc8                 | _fatfs_cc_v_flush
31bc8     01 CA 05 F6 | 	mov	COUNT_, #1
31bcc     E8 00 A0 FD | 	call	#pushregs_
31bd0     49 A7 02 F6 | 	mov	local01, arg01
31bd4     80 F5 BF FD | 	call	#_fatfs_cc___default_flush
31bd8     53 A7 02 FB | 	rdlong	local01, local01
31bdc     02 00 00 FF 
31be0     10 A6 0E F1 | 	add	local01, ##1040 wz
31be4                 | '         return _seterror( 5 );
31be4     20 6A 06 A1 |  if_e	add	ptr___system__dat__, #32
31be8     35 0B 68 AC |  if_e	wrlong	#5, ptr___system__dat__
31bec     20 6A 86 A1 |  if_e	sub	ptr___system__dat__, #32
31bf0     01 7A 66 A6 |  if_e	neg	result1, #1
31bf4     10 00 90 AD |  if_e	jmp	#LR__5360
31bf8     53 93 02 F6 | 	mov	arg01, local01
31bfc     FC E6 BF FD | 	call	#_fatfs_cc_f_sync
31c00     3D 93 02 F6 | 	mov	arg01, result1
31c04                 | '     }
31c04                 | ' #line 449 "C:/Users/Piotr/Downloads/flexprop-7.0.0/flexprop/include/filesys/fatfs/fatfs.cc"
31c04                 | '     result = f_sync(f);
31c04                 | ' #line 453 "C:/Users/Piotr/Downloads/flexprop-7.0.0/flexprop/include/filesys/fatfs/fatfs.cc"
31c04                 | '     return _set_dos_error(result);
31c04     C0 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31c08                 | LR__5360
31c08     E7 F0 03 F6 | 	mov	ptra, fp
31c0c     F2 00 A0 FD | 	call	#popregs_
31c10                 | _fatfs_cc_v_flush_ret
31c10     2D 00 64 FD | 	ret
31c14                 | 
31c14                 | _fatfs_cc_v_init
31c14                 | ' {
31c14                 | '     return 0;
31c14     00 7A 06 F6 | 	mov	result1, #0
31c18                 | _fatfs_cc_v_init_ret
31c18     2D 00 64 FD | 	ret
31c1c                 | 
31c1c                 | _fatfs_cc_v_deinit
31c1c     92 01 00 FF 
31c20     40 95 06 F6 | 	mov	arg02, ##@LR__5486
31c24     00 92 06 F6 | 	mov	arg01, #0
31c28     00 96 06 F6 | 	mov	arg03, #0
31c2c     B8 D9 BF FD | 	call	#_fatfs_cc_f_mount
31c30     01 00 00 FF 
31c34     08 64 06 F1 | 	add	objptr, ##520
31c38     32 93 02 FB | 	rdlong	arg01, objptr
31c3c     04 64 06 F1 | 	add	objptr, #4
31c40     32 95 02 FB | 	rdlong	arg02, objptr
31c44     01 00 00 FF 
31c48     0C 64 86 F1 | 	sub	objptr, ##524
31c4c     2C 50 BF FD | 	call	#__system___freepins
31c50                 | ' #line 474 "C:/Users/Piotr/Downloads/flexprop-7.0.0/flexprop/include/filesys/fatfs/fatfs.cc"
31c50                 | '     _freepins(f_pinmask);
31c50                 | '     return 0;
31c50     00 7A 06 F6 | 	mov	result1, #0
31c54                 | _fatfs_cc_v_deinit_ret
31c54     2D 00 64 FD | 	ret
31c58                 | 
31c58                 | _fatfs_cc_get_vfs
31c58     01 CA 05 F6 | 	mov	COUNT_, #1
31c5c     E8 00 A0 FD | 	call	#pushregs_
31c60     49 A7 02 F6 | 	mov	local01, arg01
31c64     58 92 06 F6 | 	mov	arg01, #88
31c68     74 67 BF FD | 	call	#__system___gc_alloc_managed
31c6c     3D 93 02 F6 | 	mov	arg01, result1
31c70     32 7B 02 F6 | 	mov	result1, objptr
31c74     00 D8 05 FF 
31c78     00 7A 46 F5 | 	or	result1, ##196083712
31c7c     49 7B 62 FC | 	wrlong	result1, arg01
31c80     32 7B 02 F6 | 	mov	result1, objptr
31c84     00 E0 05 FF 
31c88     00 7A 46 F5 | 	or	result1, ##197132288
31c8c     04 92 06 F1 | 	add	arg01, #4
31c90     49 7B 62 FC | 	wrlong	result1, arg01
31c94     32 7B 02 F6 | 	mov	result1, objptr
31c98     00 E8 05 FF 
31c9c     00 7A 46 F5 | 	or	result1, ##198180864
31ca0     04 92 06 F1 | 	add	arg01, #4
31ca4     49 7B 62 FC | 	wrlong	result1, arg01
31ca8     32 7B 02 F6 | 	mov	result1, objptr
31cac     00 F0 05 FF 
31cb0     00 7A 46 F5 | 	or	result1, ##199229440
31cb4     04 92 06 F1 | 	add	arg01, #4
31cb8     49 7B 62 FC | 	wrlong	result1, arg01
31cbc     32 7B 02 F6 | 	mov	result1, objptr
31cc0     00 F8 05 FF 
31cc4     00 7A 46 F5 | 	or	result1, ##200278016
31cc8     04 92 06 F1 | 	add	arg01, #4
31ccc     49 7B 62 FC | 	wrlong	result1, arg01
31cd0     32 7B 02 F6 | 	mov	result1, objptr
31cd4     3A 7A 26 F4 | 	bith	result1, #58
31cd8     04 92 06 F1 | 	add	arg01, #4
31cdc     49 7B 62 FC | 	wrlong	result1, arg01
31ce0     04 92 06 F1 | 	add	arg01, #4
31ce4     49 A7 62 FC | 	wrlong	local01, arg01
31ce8     04 92 06 F1 | 	add	arg01, #4
31cec     49 01 68 FC | 	wrlong	#0, arg01
31cf0     32 7B 02 F6 | 	mov	result1, objptr
31cf4     00 08 06 FF 
31cf8     00 7A 46 F5 | 	or	result1, ##202375168
31cfc     04 92 06 F1 | 	add	arg01, #4
31d00     49 7B 62 FC | 	wrlong	result1, arg01
31d04     32 7B 02 F6 | 	mov	result1, objptr
31d08     00 10 06 FF 
31d0c     00 7A 46 F5 | 	or	result1, ##203423744
31d10     04 92 06 F1 | 	add	arg01, #4
31d14     49 7B 62 FC | 	wrlong	result1, arg01
31d18     32 7B 02 F6 | 	mov	result1, objptr
31d1c     00 18 06 FF 
31d20     00 7A 46 F5 | 	or	result1, ##204472320
31d24     04 92 06 F1 | 	add	arg01, #4
31d28     49 7B 62 FC | 	wrlong	result1, arg01
31d2c     32 7B 02 F6 | 	mov	result1, objptr
31d30     00 20 06 FF 
31d34     00 7A 46 F5 | 	or	result1, ##205520896
31d38     04 92 06 F1 | 	add	arg01, #4
31d3c     49 7B 62 FC | 	wrlong	result1, arg01
31d40     32 7B 02 F6 | 	mov	result1, objptr
31d44     00 28 06 FF 
31d48     00 7A 46 F5 | 	or	result1, ##206569472
31d4c     04 92 06 F1 | 	add	arg01, #4
31d50     49 7B 62 FC | 	wrlong	result1, arg01
31d54     32 7B 02 F6 | 	mov	result1, objptr
31d58     00 30 06 FF 
31d5c     00 7A 46 F5 | 	or	result1, ##207618048
31d60     04 92 06 F1 | 	add	arg01, #4
31d64     49 7B 62 FC | 	wrlong	result1, arg01
31d68     32 7B 02 F6 | 	mov	result1, objptr
31d6c     00 38 06 FF 
31d70     00 7A 46 F5 | 	or	result1, ##208666624
31d74     04 92 06 F1 | 	add	arg01, #4
31d78     49 7B 62 FC | 	wrlong	result1, arg01
31d7c     32 7B 02 F6 | 	mov	result1, objptr
31d80     00 40 06 FF 
31d84     00 7A 46 F5 | 	or	result1, ##209715200
31d88     04 92 06 F1 | 	add	arg01, #4
31d8c     49 7B 62 FC | 	wrlong	result1, arg01
31d90     32 7B 02 F6 | 	mov	result1, objptr
31d94     00 48 06 FF 
31d98     00 7A 46 F5 | 	or	result1, ##210763776
31d9c     04 92 06 F1 | 	add	arg01, #4
31da0     49 7B 62 FC | 	wrlong	result1, arg01
31da4     32 7B 02 F6 | 	mov	result1, objptr
31da8     00 50 06 FF 
31dac     00 7A 46 F5 | 	or	result1, ##211812352
31db0     04 92 06 F1 | 	add	arg01, #4
31db4     49 7B 62 FC | 	wrlong	result1, arg01
31db8     32 7B 02 F6 | 	mov	result1, objptr
31dbc     00 58 06 FF 
31dc0     00 7A 46 F5 | 	or	result1, ##212860928
31dc4     04 92 06 F1 | 	add	arg01, #4
31dc8     49 7B 62 FC | 	wrlong	result1, arg01
31dcc     32 7B 02 F6 | 	mov	result1, objptr
31dd0     00 60 06 FF 
31dd4     00 7A 46 F5 | 	or	result1, ##213909504
31dd8     04 92 06 F1 | 	add	arg01, #4
31ddc     49 7B 62 FC | 	wrlong	result1, arg01
31de0     04 92 06 F1 | 	add	arg01, #4
31de4     49 01 68 FC | 	wrlong	#0, arg01
31de8     04 92 06 F1 | 	add	arg01, #4
31dec     49 01 68 FC | 	wrlong	#0, arg01
31df0     54 92 86 F1 | 	sub	arg01, #84
31df4                 | ' 
31df4                 | '     v->close = &v_close;
31df4                 | '     v->read = &v_read;
31df4                 | '     v->write = &v_write;
31df4                 | '     v->lseek = &v_lseek;
31df4                 | '     v->ioctl = &v_ioctl;
31df4                 | '     v->flush = &v_flush;
31df4                 | '     v->vfs_data = ptr;
31df4                 | '     v->reserved = 0;
31df4                 | ' 
31df4                 | '     v->open = &v_open;
31df4                 | '     v->creat = &v_creat;
31df4                 | '     v->opendir = &v_opendir;
31df4                 | '     v->closedir = &v_closedir;
31df4                 | '     v->readdir = &v_readdir;
31df4                 | '     v->stat = &v_stat;
31df4                 | ' 
31df4                 | '     v->mkdir = &v_mkdir;
31df4                 | '     v->rmdir = &v_rmdir;
31df4                 | ' 
31df4                 | '     v->remove = &v_remove;
31df4                 | '     v->rename = &v_rename;
31df4                 | ' 
31df4                 | '     v->init = &v_init;
31df4                 | '     v->deinit = &v_deinit;
31df4                 | ' 
31df4                 | ' 
31df4                 | '     v->getcf = 0;
31df4                 | '     v->putcf = 0;
31df4                 | ' #line 532 "C:/Users/Piotr/Downloads/flexprop-7.0.0/flexprop/include/filesys/fatfs/fatfs.cc"
31df4                 | '     return v;
31df4     49 7B 02 F6 | 	mov	result1, arg01
31df8     E7 F0 03 F6 | 	mov	ptra, fp
31dfc     F2 00 A0 FD | 	call	#popregs_
31e00                 | _fatfs_cc_get_vfs_ret
31e00     2D 00 64 FD | 	ret
31e04                 | 
31e04                 | _fatfs_cc_gettimeofday
31e04     04 CA 05 F6 | 	mov	COUNT_, #4
31e08     E8 00 A0 FD | 	call	#pushregs_
31e0c     49 A7 02 F6 | 	mov	local01, arg01
31e10     24 2A BF FD | 	call	#__system___getus
31e14     3D 93 02 F6 | 	mov	arg01, result1
31e18     02 00 00 FF 
31e1c     08 6F 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1288
31e20     37 A9 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
31e24     49 7B 02 F6 | 	mov	result1, arg01
31e28     54 7B 82 F1 | 	sub	result1, local02
31e2c     A1 07 00 FF 
31e30     40 7A 16 FD | 	qdiv	result1, ##1000000
31e34     02 00 00 FF 
31e38     08 6F 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1288
31e3c     18 A8 62 FD | 	getqx	local02
31e40     A1 07 00 FF 
31e44     40 7A 16 FD | 	qdiv	result1, ##1000000
31e48     00 A8 0E F2 | 	cmp	local02, #0 wz
31e4c     19 AA 62 FD | 	getqy	local03
31e50     28 00 90 AD |  if_e	jmp	#LR__5370
31e54     02 00 00 FF 
31e58     04 6F 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1284
31e5c     37 AD 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
31e60     54 AD 02 F1 | 	add	local04, local02
31e64     37 AD 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
31e68     55 93 82 F1 | 	sub	arg01, local03
31e6c     04 6E 06 F1 | 	add	ptr__fatfs_cc_dat__, #4
31e70     37 93 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
31e74     02 00 00 FF 
31e78     08 6F 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1288
31e7c                 | LR__5370
31e7c     02 00 00 FF 
31e80     04 6F 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1284
31e84     37 AD 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
31e88     02 00 00 FF 
31e8c     04 6F 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1284
31e90     53 AD 62 FC | 	wrlong	local04, local01
31e94     04 A6 06 F1 | 	add	local01, #4
31e98     53 AB 62 FC | 	wrlong	local03, local01
31e9c                 | '         lastsec += secs;
31e9c                 | '         lastus = now - leftover;
31e9c                 | '     }
31e9c                 | '     tv->tv_sec = lastsec;
31e9c                 | '     tv->tv_usec = leftover;
31e9c                 | '     return 0;
31e9c     00 7A 06 F6 | 	mov	result1, #0
31ea0     E7 F0 03 F6 | 	mov	ptra, fp
31ea4     F2 00 A0 FD | 	call	#popregs_
31ea8                 | _fatfs_cc_gettimeofday_ret
31ea8     2D 00 64 FD | 	ret
31eac                 | 
31eac                 | _fatfs_cc__is_leap_year
31eac     49 7B 52 F6 | 	abs	result1, arg01 wc
31eb0     03 7A 06 F5 | 	and	result1, #3
31eb4     3D 7B 8A F6 | 	negc	result1, result1 wz
31eb8     38 00 90 5D |  if_ne	jmp	#LR__5381
31ebc     49 7B 52 F6 | 	abs	result1, arg01 wc
31ec0     64 7A 16 FD | 	qdiv	result1, #100
31ec4     19 7A 62 FD | 	getqy	result1
31ec8     3D 7B 8A F6 | 	negc	result1, result1 wz
31ecc     1C 00 90 5D |  if_ne	jmp	#LR__5380
31ed0     49 7B 52 F6 | 	abs	result1, arg01 wc
31ed4     90 7B 16 FD | 	qdiv	result1, #400
31ed8                 | '       return (0 == y % 400);
31ed8     00 7A 06 F6 | 	mov	result1, #0
31edc     19 80 62 FD | 	getqy	_var01
31ee0     40 81 8A F6 | 	negc	_var01, _var01 wz
31ee4     01 7A 06 A6 |  if_e	mov	result1, #1
31ee8     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
31eec                 | LR__5380
31eec                 | '     return 1;
31eec     01 7A 06 F6 | 	mov	result1, #1
31ef0     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
31ef4                 | LR__5381
31ef4                 | '   }
31ef4                 | '   return 0;
31ef4     00 7A 06 F6 | 	mov	result1, #0
31ef8                 | _fatfs_cc__is_leap_year_ret
31ef8     2D 00 64 FD | 	ret
31efc                 | 
31efc                 | _fatfs_cc___tzoffset
31efc     49 81 0A F6 | 	mov	_var01, arg01 wz
31f00     FF FF FF FF 
31f04     4A FF 6B FC | 	wrlong	##-1, arg02
31f08     01 82 06 F6 | 	mov	_var02, #1
31f0c     40 85 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
31f10                 | '                 return 0;
31f10     00 7A 06 A6 |  if_e	mov	result1, #0
31f14     7C 02 90 AD |  if_e	jmp	#LR__5407
31f18     4A 01 68 FC | 	wrlong	#0, arg02
31f1c     37 87 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
31f20     02 00 00 FF 
31f24     DC 86 06 F1 | 	add	_var04, ##1244
31f28     D7 26 48 FB | 	callpa	#(@LR__5391-@LR__5390)>>2,fcache_load_ptr_
31f2c                 | ' 
31f2c                 | '        *hasdst = 0;
31f2c                 | ' 
31f2c                 | ' 	n = stdname;
31f2c                 | '         while (*s && isalpha(*s)) {
31f2c                 | LR__5390
31f2c     40 85 CA FA | 	rdbyte	_var03, _var01 wz
31f30     44 00 90 AD |  if_e	jmp	#LR__5392
31f34     40 93 C2 FA | 	rdbyte	arg01, _var01
31f38                 | ' {
31f38                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
31f38     80 92 36 F3 | 	fle	arg01, #128 wc
31f3c                 | '     return __ctype[c];
31f3c     37 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
31f40     02 00 00 FF 
31f44     0C 7B 06 F1 | 	add	result1, ##1292
31f48     3D 93 02 F1 | 	add	arg01, result1
31f4c     49 7B C2 FA | 	rdbyte	result1, arg01
31f50     0C 7A CE F7 | 	test	result1, #12 wz
31f54     20 00 90 AD |  if_e	jmp	#LR__5392
31f58     40 89 02 F6 | 	mov	_var05, _var01
31f5c     40 8B 02 F6 | 	mov	_var06, _var01
31f60     01 8A 06 F1 | 	add	_var06, #1
31f64     44 8D C2 FA | 	rdbyte	_var07, _var05
31f68     45 81 02 F6 | 	mov	_var01, _var06
31f6c     43 8D 42 FC | 	wrbyte	_var07, _var04
31f70     01 86 06 F1 | 	add	_var04, #1
31f74     B4 FF 9F FD | 	jmp	#LR__5390
31f78                 | LR__5391
31f78                 | LR__5392
31f78     43 01 48 FC | 	wrbyte	#0, _var04
31f7c     00 8E 06 F6 | 	mov	_var08, #0
31f80     40 85 C2 FA | 	rdbyte	_var03, _var01
31f84     2D 84 0E F2 | 	cmp	_var03, #45 wz
31f88     01 82 66 A6 |  if_e	neg	_var02, #1
31f8c     01 80 06 A1 |  if_e	add	_var01, #1
31f90     D7 26 48 FB | 	callpa	#(@LR__5394-@LR__5393)>>2,fcache_load_ptr_
31f94                 | '                 sgn = -1;
31f94                 | '                 s++;
31f94                 | '         }
31f94                 | '         while (isdigit(*s)) {
31f94                 | LR__5393
31f94     40 93 C2 FA | 	rdbyte	arg01, _var01
31f98                 | ' {
31f98                 | '   return  (__ctype_get(c) & 0x02 ) ;
31f98     80 92 36 F3 | 	fle	arg01, #128 wc
31f9c                 | '     return __ctype[c];
31f9c     37 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
31fa0     02 00 00 FF 
31fa4     0C 7B 06 F1 | 	add	result1, ##1292
31fa8     3D 93 02 F1 | 	add	arg01, result1
31fac     49 7B C2 FA | 	rdbyte	result1, arg01
31fb0     02 7A CE F7 | 	test	result1, #2 wz
31fb4     28 00 90 AD |  if_e	jmp	#LR__5395
31fb8     47 85 02 F6 | 	mov	_var03, _var08
31fbc     02 84 66 F0 | 	shl	_var03, #2
31fc0     47 85 02 F1 | 	add	_var03, _var08
31fc4     01 84 66 F0 | 	shl	_var03, #1
31fc8     40 89 C2 FA | 	rdbyte	_var05, _var01
31fcc     30 88 86 F1 | 	sub	_var05, #48
31fd0     44 85 02 F1 | 	add	_var03, _var05
31fd4     42 8F 02 F6 | 	mov	_var08, _var03
31fd8     01 80 06 F1 | 	add	_var01, #1
31fdc     B4 FF 9F FD | 	jmp	#LR__5393
31fe0                 | LR__5394
31fe0                 | LR__5395
31fe0     07 00 00 FF 
31fe4     10 8E 06 FD | 	qmul	_var08, ##3600
31fe8     40 85 C2 FA | 	rdbyte	_var03, _var01
31fec     3A 84 0E F2 | 	cmp	_var03, #58 wz
31ff0     18 90 62 FD | 	getqx	_var09
31ff4     6C 00 90 5D |  if_ne	jmp	#LR__5399
31ff8     00 8E 06 F6 | 	mov	_var08, #0
31ffc     01 80 06 F1 | 	add	_var01, #1
32000     D7 26 48 FB | 	callpa	#(@LR__5397-@LR__5396)>>2,fcache_load_ptr_
32004                 | '                 x = 0;
32004                 | '                 s++;
32004                 | '                 while (isdigit(*s)) {
32004                 | LR__5396
32004     40 93 C2 FA | 	rdbyte	arg01, _var01
32008                 | ' {
32008                 | '   return  (__ctype_get(c) & 0x02 ) ;
32008     80 92 36 F3 | 	fle	arg01, #128 wc
3200c                 | '     return __ctype[c];
3200c     37 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
32010     02 00 00 FF 
32014     0C 7B 06 F1 | 	add	result1, ##1292
32018     3D 93 02 F1 | 	add	arg01, result1
3201c     49 7B C2 FA | 	rdbyte	result1, arg01
32020     02 7A CE F7 | 	test	result1, #2 wz
32024     28 00 90 AD |  if_e	jmp	#LR__5398
32028     47 85 02 F6 | 	mov	_var03, _var08
3202c     02 84 66 F0 | 	shl	_var03, #2
32030     47 85 02 F1 | 	add	_var03, _var08
32034     01 84 66 F0 | 	shl	_var03, #1
32038     40 89 C2 FA | 	rdbyte	_var05, _var01
3203c     30 88 86 F1 | 	sub	_var05, #48
32040     44 85 02 F1 | 	add	_var03, _var05
32044     42 8F 02 F6 | 	mov	_var08, _var03
32048     01 80 06 F1 | 	add	_var01, #1
3204c     B4 FF 9F FD | 	jmp	#LR__5396
32050                 | LR__5397
32050                 | LR__5398
32050     47 8D 02 F6 | 	mov	_var07, _var08
32054     04 8C 66 F0 | 	shl	_var07, #4
32058     47 8D 82 F1 | 	sub	_var07, _var08
3205c     02 8C 66 F0 | 	shl	_var07, #2
32060     46 91 02 F1 | 	add	_var09, _var07
32064                 | LR__5399
32064     37 87 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
32068     02 00 00 FF 
3206c     E5 86 06 F1 | 	add	_var04, ##1253
32070     40 93 C2 FA | 	rdbyte	arg01, _var01
32074                 | ' {
32074                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
32074     80 92 36 F3 | 	fle	arg01, #128 wc
32078                 | '     return __ctype[c];
32078     37 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
3207c     02 00 00 FF 
32080     0C 7B 06 F1 | 	add	result1, ##1292
32084     3D 93 02 F1 | 	add	arg01, result1
32088     49 7B C2 FA | 	rdbyte	result1, arg01
3208c     0C 7A CE F7 | 	test	result1, #12 wz
32090     4C 00 90 AD |  if_e	jmp	#LR__5402
32094     4A 03 68 FC | 	wrlong	#1, arg02
32098                 | '                 *hasdst = 1;
32098                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
32098                 | LR__5400
32098     40 85 CA FA | 	rdbyte	_var03, _var01 wz
3209c     40 00 90 AD |  if_e	jmp	#LR__5401
320a0     40 93 C2 FA | 	rdbyte	arg01, _var01
320a4                 | ' {
320a4                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
320a4     80 92 36 F3 | 	fle	arg01, #128 wc
320a8                 | '     return __ctype[c];
320a8     37 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
320ac     02 00 00 FF 
320b0     0C 7B 06 F1 | 	add	result1, ##1292
320b4     3D 93 02 F1 | 	add	arg01, result1
320b8     49 7B C2 FA | 	rdbyte	result1, arg01
320bc     0C 7A CE F7 | 	test	result1, #12 wz
320c0     1C 00 90 AD |  if_e	jmp	#LR__5401
320c4     40 8B 02 F6 | 	mov	_var06, _var01
320c8     01 8A 06 F1 | 	add	_var06, #1
320cc     40 8D C2 FA | 	rdbyte	_var07, _var01
320d0     45 81 02 F6 | 	mov	_var01, _var06
320d4     43 8D 42 FC | 	wrbyte	_var07, _var04
320d8     01 86 06 F1 | 	add	_var04, #1
320dc     B8 FF 9F FD | 	jmp	#LR__5400
320e0                 | LR__5401
320e0                 | LR__5402
320e0     43 01 48 FC | 	wrbyte	#0, _var04
320e4     02 00 00 FF 
320e8     DC 6E 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1244
320ec     37 85 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
320f0     02 00 00 FF 
320f4     DC 6E 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1244
320f8     20 00 90 AD |  if_e	jmp	#LR__5403
320fc     02 00 00 FF 
32100     DC 6E 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1244
32104     37 85 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
32108     08 6E 86 F1 | 	sub	ptr__fatfs_cc_dat__, #8
3210c     37 85 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
32110     02 00 00 FF 
32114     D4 6E 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1236
32118     1C 00 90 FD | 	jmp	#LR__5404
3211c                 | LR__5403
3211c     02 00 00 FF 
32120     EE 6E 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1262
32124     37 85 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
32128     1A 6E 86 F1 | 	sub	ptr__fatfs_cc_dat__, #26
3212c     37 85 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
32130     02 00 00 FF 
32134     D4 6E 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1236
32138                 | LR__5404
32138     02 00 00 FF 
3213c     E5 6E 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1253
32140     37 85 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
32144     02 00 00 FF 
32148     E5 6E 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1253
3214c     20 00 90 AD |  if_e	jmp	#LR__5405
32150     02 00 00 FF 
32154     E5 6E 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1253
32158     37 85 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
3215c     0D 6E 86 F1 | 	sub	ptr__fatfs_cc_dat__, #13
32160     37 85 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
32164     02 00 00 FF 
32168     D8 6E 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1240
3216c     1C 00 90 FD | 	jmp	#LR__5406
32170                 | LR__5405
32170     02 00 00 FF 
32174     DC 6E 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1244
32178     37 85 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
3217c     04 6E 86 F1 | 	sub	ptr__fatfs_cc_dat__, #4
32180     37 85 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
32184     02 00 00 FF 
32188     D8 6E 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1240
3218c                 | LR__5406
3218c     48 83 02 FD | 	qmul	_var02, _var09
32190                 | ' 		_tzname[1] = stdname;
32190                 | ' 
32190                 | '         return sgn * off;
32190     18 7A 62 FD | 	getqx	result1
32194                 | LR__5407
32194                 | _fatfs_cc___tzoffset_ret
32194     2D 00 64 FD | 	ret
32198                 | 
32198                 | _fatfs_cc___indst
32198     10 92 06 F1 | 	add	arg01, #16
3219c     49 81 02 FB | 	rdlong	_var01, arg01
321a0     10 92 86 F1 | 	sub	arg01, #16
321a4     02 80 0E F2 | 	cmp	_var01, #2 wz
321a8     30 00 90 5D |  if_ne	jmp	#LR__5410
321ac     07 80 06 F6 | 	mov	_var01, #7
321b0     18 92 06 F1 | 	add	arg01, #24
321b4     49 83 02 FB | 	rdlong	_var02, arg01
321b8     41 81 02 F1 | 	add	_var01, _var02
321bc     0C 92 86 F1 | 	sub	arg01, #12
321c0     49 85 02 FB | 	rdlong	_var03, arg01
321c4     42 81 82 F1 | 	sub	_var01, _var03
321c8     00 80 56 F2 | 	cmps	_var01, #0 wc
321cc                 | '                         return 1;
321cc     01 7A 06 C6 |  if_b	mov	result1, #1
321d0     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
321d4                 | '                 return 0;
321d4     00 7A 06 F6 | 	mov	result1, #0
321d8     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
321dc                 | LR__5410
321dc     10 92 06 F1 | 	add	arg01, #16
321e0     49 81 02 FB | 	rdlong	_var01, arg01
321e4     10 92 86 F1 | 	sub	arg01, #16
321e8     0A 80 0E F2 | 	cmp	_var01, #10 wz
321ec     28 00 90 5D |  if_ne	jmp	#LR__5411
321f0     18 92 06 F1 | 	add	arg01, #24
321f4     49 81 02 FB | 	rdlong	_var01, arg01
321f8     0C 92 86 F1 | 	sub	arg01, #12
321fc     49 87 02 FB | 	rdlong	_var04, arg01
32200     43 81 82 F1 | 	sub	_var01, _var04
32204     00 80 56 F2 | 	cmps	_var01, #0 wc
32208                 | '                         return 0;
32208     00 7A 06 C6 |  if_b	mov	result1, #0
3220c     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
32210                 | '                 return 1;
32210     01 7A 06 F6 | 	mov	result1, #1
32214     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
32218                 | LR__5411
32218                 | '         }
32218                 | ' 
32218                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
32218     00 80 06 F6 | 	mov	_var01, #0
3221c     10 92 06 F1 | 	add	arg01, #16
32220     49 83 02 FB | 	rdlong	_var02, arg01
32224     10 92 86 F1 | 	sub	arg01, #16
32228     03 82 56 F2 | 	cmps	_var02, #3 wc
3222c     10 00 90 CD |  if_b	jmp	#LR__5412
32230     10 92 06 F1 | 	add	arg01, #16
32234     49 85 02 FB | 	rdlong	_var03, arg01
32238     0A 84 56 F2 | 	cmps	_var03, #10 wc
3223c     01 80 06 C6 |  if_b	mov	_var01, #1
32240                 | LR__5412
32240     40 7B 02 F6 | 	mov	result1, _var01
32244                 | _fatfs_cc___indst_ret
32244     2D 00 64 FD | 	ret
32248                 | 
32248                 | _fatfs_cc_disk_deinitialize
32248     03 CA 05 F6 | 	mov	COUNT_, #3
3224c     E8 00 A0 FD | 	call	#pushregs_
32250     01 00 00 FF 
32254     10 64 06 F1 | 	add	objptr, ##528
32258     32 93 0A FB | 	rdlong	arg01, objptr wz
3225c     01 00 00 FF 
32260     10 64 86 F1 | 	sub	objptr, ##528
32264                 | ' 
32264                 | '         return RES_NOTRDY;
32264     03 7A 06 A6 |  if_e	mov	result1, #3
32268     4C 00 90 AD |  if_e	jmp	#LR__5420
3226c     01 00 00 FF 
32270     10 64 06 F1 | 	add	objptr, ##528
32274     32 93 02 FB | 	rdlong	arg01, objptr
32278     49 A7 02 F6 | 	mov	local01, arg01
3227c     24 A6 06 F1 | 	add	local01, #36
32280     53 A7 02 FB | 	rdlong	local01, local01
32284     53 A9 02 F6 | 	mov	local02, local01
32288     13 A6 46 F7 | 	zerox	local01, #19
3228c     14 A8 46 F0 | 	shr	local02, #20
32290     02 A8 66 F0 | 	shl	local02, #2
32294     2D A9 02 F1 | 	add	local02, __methods__
32298     54 A9 02 FB | 	rdlong	local02, local02
3229c     01 00 00 FF 
322a0     10 64 86 F1 | 	sub	objptr, ##528
322a4     32 AB 02 F6 | 	mov	local03, objptr
322a8     53 65 02 F6 | 	mov	objptr, local01
322ac     2D A8 62 FD | 	call	local02
322b0     55 65 02 F6 | 	mov	objptr, local03
322b4                 | '     }
322b4                 | '     fh->close(fh);
322b4                 | '     return RES_OK;
322b4     00 7A 06 F6 | 	mov	result1, #0
322b8                 | LR__5420
322b8     E7 F0 03 F6 | 	mov	ptra, fp
322bc     F2 00 A0 FD | 	call	#popregs_
322c0                 | _fatfs_cc_disk_deinitialize_ret
322c0     2D 00 64 FD | 	ret
322c4                 | 
322c4                 | ' 	
322c4                 | ' 	FUNCTION pfunc(c as integer) as integer
322c4                 | __system____strs_cl_pfunc_
322c4                 | ' 		if (i < 16) then
322c4     04 64 06 F1 | 	add	objptr, #4
322c8     32 7B 02 FB | 	rdlong	result1, objptr
322cc     04 64 86 F1 | 	sub	objptr, #4
322d0     10 7A 56 F2 | 	cmps	result1, #16 wc
322d4     2C 00 90 3D |  if_ae	jmp	#LR__5430
322d8     32 7B 02 FB | 	rdlong	result1, objptr
322dc     04 64 06 F1 | 	add	objptr, #4
322e0     32 81 02 FB | 	rdlong	_var01, objptr
322e4     3D 81 02 F1 | 	add	_var01, result1
322e8     40 93 42 FC | 	wrbyte	arg01, _var01
322ec     32 7B 02 FB | 	rdlong	result1, objptr
322f0     01 7A 06 F1 | 	add	result1, #1
322f4     32 7B 62 FC | 	wrlong	result1, objptr
322f8     04 64 86 F1 | 	sub	objptr, #4
322fc                 | ' 			p(i) = c
322fc                 | ' 			i = i+1
322fc                 | ' 			return 1
322fc     01 7A 06 F6 | 	mov	result1, #1
32300     04 00 90 FD | 	jmp	#__system____strs_cl_pfunc__ret
32304                 | LR__5430
32304                 | ' 			return -1
32304     01 7A 66 F6 | 	neg	result1, #1
32308                 | __system____strs_cl_pfunc__ret
32308     2D 00 64 FD | 	ret
3230c                 | 
3230c                 | __system___struct__s_vfs_file_t_putchar_
3230c     04 CA 05 F6 | 	mov	COUNT_, #4
32310     E8 00 A0 FD | 	call	#pushregs_
32314     1C 64 06 F1 | 	add	objptr, #28
32318     32 A7 0A FB | 	rdlong	local01, objptr wz
3231c     1C 64 86 F1 | 	sub	objptr, #28
32320     00 7A 06 A6 |  if_e	mov	result1, #0
32324     48 00 90 AD |  if_e	jmp	#LR__5440
32328     1C 64 06 F1 | 	add	objptr, #28
3232c     32 A9 02 FB | 	rdlong	local02, objptr
32330     54 AB 02 F6 | 	mov	local03, local02
32334     1C 64 86 F1 | 	sub	objptr, #28
32338     13 AA 46 F7 | 	zerox	local03, #19
3233c     14 A8 46 F0 | 	shr	local02, #20
32340     02 A8 66 F0 | 	shl	local02, #2
32344     2D A9 02 F1 | 	add	local02, __methods__
32348     54 A9 02 FB | 	rdlong	local02, local02
3234c     32 95 02 F6 | 	mov	arg02, objptr
32350     32 AD 02 F6 | 	mov	local04, objptr
32354     55 65 02 F6 | 	mov	objptr, local03
32358     2D A8 62 FD | 	call	local02
3235c     56 65 02 F6 | 	mov	objptr, local04
32360                 | '     return (i < 0) ? 0 : 1;
32360     00 7A 56 F2 | 	cmps	result1, #0 wc
32364     00 A6 06 C6 |  if_b	mov	local01, #0
32368     01 A6 06 36 |  if_ae	mov	local01, #1
3236c     53 7B 02 F6 | 	mov	result1, local01
32370                 | LR__5440
32370     E7 F0 03 F6 | 	mov	ptra, fp
32374     F2 00 A0 FD | 	call	#popregs_
32378                 | __system___struct__s_vfs_file_t_putchar__ret
32378     2D 00 64 FD | 	ret
3237c                 | 
3237c                 | __system___struct__s_vfs_file_t_getchar_
3237c     03 CA 05 F6 | 	mov	COUNT_, #3
32380     E8 00 A0 FD | 	call	#pushregs_
32384     20 64 06 F1 | 	add	objptr, #32
32388     32 93 0A FB | 	rdlong	arg01, objptr wz
3238c     20 64 86 F1 | 	sub	objptr, #32
32390     01 7A 66 A6 |  if_e	neg	result1, #1
32394     38 00 90 AD |  if_e	jmp	#LR__5450
32398                 | '     return getcf(__this);
32398     20 64 06 F1 | 	add	objptr, #32
3239c     32 A7 02 FB | 	rdlong	local01, objptr
323a0     53 A9 02 F6 | 	mov	local02, local01
323a4     20 64 86 F1 | 	sub	objptr, #32
323a8     13 A8 46 F7 | 	zerox	local02, #19
323ac     14 A6 46 F0 | 	shr	local01, #20
323b0     02 A6 66 F0 | 	shl	local01, #2
323b4     2D A7 02 F1 | 	add	local01, __methods__
323b8     53 A7 02 FB | 	rdlong	local01, local01
323bc     32 93 02 F6 | 	mov	arg01, objptr
323c0     32 AB 02 F6 | 	mov	local03, objptr
323c4     54 65 02 F6 | 	mov	objptr, local02
323c8     2D A6 62 FD | 	call	local01
323cc     55 65 02 F6 | 	mov	objptr, local03
323d0                 | LR__5450
323d0     E7 F0 03 F6 | 	mov	ptra, fp
323d4     F2 00 A0 FD | 	call	#popregs_
323d8                 | __system___struct__s_vfs_file_t_getchar__ret
323d8     2D 00 64 FD | 	ret
323dc                 | 
323dc                 | __system___struct___bas_wrap_sender_tx_
323dc     03 CA 05 F6 | 	mov	COUNT_, #3
323e0     E8 00 A0 FD | 	call	#pushregs_
323e4     32 A7 02 FB | 	rdlong	local01, objptr
323e8     53 A9 02 F6 | 	mov	local02, local01
323ec     13 A6 46 F7 | 	zerox	local01, #19
323f0     14 A8 46 F0 | 	shr	local02, #20
323f4     02 A8 66 F0 | 	shl	local02, #2
323f8     2D A9 02 F1 | 	add	local02, __methods__
323fc     54 A9 02 FB | 	rdlong	local02, local02
32400     32 AB 02 F6 | 	mov	local03, objptr
32404     53 65 02 F6 | 	mov	objptr, local01
32408     2D A8 62 FD | 	call	local02
3240c     55 65 02 F6 | 	mov	objptr, local03
32410     01 7A 06 F6 | 	mov	result1, #1
32414     E7 F0 03 F6 | 	mov	ptra, fp
32418     F2 00 A0 FD | 	call	#popregs_
3241c                 | __system___struct___bas_wrap_sender_tx__ret
3241c     2D 00 64 FD | 	ret
32420                 | 
32420                 | __system___struct___bas_wrap_sender_rx_
32420     03 CA 05 F6 | 	mov	COUNT_, #3
32424     E8 00 A0 FD | 	call	#pushregs_
32428     04 64 06 F1 | 	add	objptr, #4
3242c     32 A7 02 FB | 	rdlong	local01, objptr
32430     53 A9 02 F6 | 	mov	local02, local01
32434     04 64 86 F1 | 	sub	objptr, #4
32438     13 A8 46 F7 | 	zerox	local02, #19
3243c     14 A6 46 F0 | 	shr	local01, #20
32440     02 A6 66 F0 | 	shl	local01, #2
32444     2D A7 02 F1 | 	add	local01, __methods__
32448     53 A7 02 FB | 	rdlong	local01, local01
3244c     32 AB 02 F6 | 	mov	local03, objptr
32450     54 65 02 F6 | 	mov	objptr, local02
32454     2D A6 62 FD | 	call	local01
32458     55 65 02 F6 | 	mov	objptr, local03
3245c     E7 F0 03 F6 | 	mov	ptra, fp
32460     F2 00 A0 FD | 	call	#popregs_
32464                 | __system___struct___bas_wrap_sender_rx__ret
32464     2D 00 64 FD | 	ret
32468                 | 
32468                 | __system___struct___bas_wrap_sender_close_
32468     03 CA 05 F6 | 	mov	COUNT_, #3
3246c     E8 00 A0 FD | 	call	#pushregs_
32470     08 64 06 F1 | 	add	objptr, #8
32474     32 A7 02 FB | 	rdlong	local01, objptr
32478     53 A9 02 F6 | 	mov	local02, local01
3247c     08 64 86 F1 | 	sub	objptr, #8
32480     13 A8 46 F7 | 	zerox	local02, #19
32484     14 A6 46 F0 | 	shr	local01, #20
32488     02 A6 66 F0 | 	shl	local01, #2
3248c     2D A7 02 F1 | 	add	local01, __methods__
32490     53 A7 02 FB | 	rdlong	local01, local01
32494     32 AB 02 F6 | 	mov	local03, objptr
32498     54 65 02 F6 | 	mov	objptr, local02
3249c     2D A6 62 FD | 	call	local01
324a0     55 65 02 F6 | 	mov	objptr, local03
324a4     E7 F0 03 F6 | 	mov	ptra, fp
324a8     F2 00 A0 FD | 	call	#popregs_
324ac                 | __system___struct___bas_wrap_sender_close__ret
324ac     2D 00 64 FD | 	ret
324b0                 | 
324b0                 | LR__5460
324b0     2F          | 	byte	"/"
324b1     00          | 	byte	0
324b2                 | LR__5461
324b2     69 6E 66    | 	byte	"inf"
324b5     00          | 	byte	0
324b6                 | LR__5462
324b6     6E 61 6E    | 	byte	"nan"
324b9     00          | 	byte	0
324ba                 | LR__5463
324ba                 | 	byte	
324ba     00          | 	byte	0
324bb                 | LR__5464
324bb                 | 	byte	
324bb     00          | 	byte	0
324bc                 | LR__5465
324bc                 | 	byte	
324bc     00          | 	byte	0
324bd                 | LR__5466
324bd                 | 	byte	
324bd     00          | 	byte	0
324be                 | LR__5467
324be                 | 	byte	
324be     00          | 	byte	0
324bf                 | LR__5468
324bf                 | 	byte	
324bf     00          | 	byte	0
324c0                 | LR__5469
324c0                 | 	byte	
324c0     00          | 	byte	0
324c1                 | LR__5470
324c1                 | 	byte	
324c1     00          | 	byte	0
324c2                 | LR__5471
324c2     00          | 	byte	0
324c3     00          | 	byte	0
324c4                 | LR__5472
324c4     00          | 	byte	0
324c5     00          | 	byte	0
324c6                 | LR__5473
324c6     00          | 	byte	0
324c7     00          | 	byte	0
324c8                 | LR__5474
324c8     20 21 21 21 
324cc     20 63 6F 72 
324d0     72 75 70 74 
324d4     65 64 20 68 
324d8     65 61 70 3F 
324dc     3F 3F 20 21 
324e0     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
324e3     00          | 	byte	0
324e4                 | LR__5475
324e4     20 21 21 21 
324e8     20 6F 75 74 
324ec     20 6F 66 20 
324f0     68 65 61 70 
324f4     20 6D 65 6D 
324f8     6F 72 79 20 
324fc     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
32500     00          | 	byte	0
32501                 | LR__5476
32501     20 21 21 21 
32505     20 63 6F 72 
32509     72 75 70 74 
3250d     65 64 20 68 
32511     65 61 70 20 
32515     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
32519     00          | 	byte	0
3251a                 | LR__5477
3251a     00          | 	byte	0
3251b     00          | 	byte	0
3251c                 | LR__5478
3251c     2E          | 	byte	"."
3251d     00          | 	byte	0
3251e                 | LR__5479
3251e     00          | 	byte	0
3251f     00          | 	byte	0
32520                 | LR__5480
32520     00          | 	byte	0
32521     00          | 	byte	0
32522                 | LR__5481
32522     00          | 	byte	0
32523     00          | 	byte	0
32524                 | LR__5482
32524     54 5A       | 	byte	"TZ"
32526     00          | 	byte	0
32527                 | LR__5483
32527     2A 3A 3C 3E 
3252b     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
3252f     00          | 	byte	0
32530                 | LR__5484
32530     2B 2C 3B 3D 
32534     5B 5D       | 	byte	"+,;=[]"
32536     00          | 	byte	0
32537                 | LR__5485
32537     46 41 54 33 
3253b     32 20 20 20 | 	byte	"FAT32   "
3253f     00          | 	byte	0
32540                 | LR__5486
32540     00          | 	byte	0
32541     00          | 	byte	0
32542                 | LR__5487
32542                 | 	byte	
32542     00          | 	byte	0
32543                 | LR__5488
32543                 | 	byte	
32543     00          | 	byte	0
32544                 | LR__5489
32544                 | 	byte	
32544     00          | 	byte	0
32545                 | LR__5490
32545                 | 	byte	
32545     00          | 	byte	0
32546                 | LR__5491
32546     22          | 	byte	34
32547     00          | 	byte	0
32548                 | LR__5492
32548     22          | 	byte	34
32549     00          | 	byte	0
3254a                 | LR__5493
3254a     3A          | 	byte	":"
3254b     00          | 	byte	0
3254c                 | LR__5494
3254c                 | 	byte	
3254c     00          | 	byte	0
3254d                 | LR__5495
3254d                 | 	byte	
3254d     00          | 	byte	0
3254e                 | LR__5496
3254e                 | 	byte	
3254e     00          | 	byte	0
3254f                 | LR__5497
3254f                 | 	byte	
3254f     00          | 	byte	0
32550                 | LR__5498
32550                 | 	byte	
32550     00          | 	byte	0
32551                 | LR__5499
32551                 | 	byte	
32551     00          | 	byte	0
32552                 | LR__5500
32552                 | 	byte	
32552     00          | 	byte	0
32553                 | LR__5501
32553     30          | 	byte	"0"
32554     00          | 	byte	0
32555                 | LR__5502
32555     22          | 	byte	34
32556     00          | 	byte	0
32557                 | LR__5503
32557     22          | 	byte	34
32558     00          | 	byte	0
32559                 | LR__5504
32559     22          | 	byte	34
3255a     00          | 	byte	0
3255b                 | LR__5505
3255b     22          | 	byte	34
3255c     00          | 	byte	0
3255d                 | LR__5506
3255d     22          | 	byte	34
3255e     00          | 	byte	0
3255f                 | LR__5507
3255f     3E          | 	byte	">"
32560     00          | 	byte	0
32561                 | LR__5508
32561     3C          | 	byte	"<"
32562     00          | 	byte	0
32563                 | LR__5509
32563     2B          | 	byte	"+"
32564     00          | 	byte	0
32565                 | LR__5510
32565     2D          | 	byte	"-"
32566     00          | 	byte	0
32567                 | LR__5511
32567     2A          | 	byte	"*"
32568     00          | 	byte	0
32569                 | LR__5512
32569     2F          | 	byte	"/"
3256a     00          | 	byte	0
3256b                 | LR__5513
3256b     5E          | 	byte	"^"
3256c     00          | 	byte	0
3256d                 | LR__5514
3256d     3D          | 	byte	"="
3256e     00          | 	byte	0
3256f                 | LR__5515
3256f     2B          | 	byte	"+"
32570     00          | 	byte	0
32571                 | LR__5516
32571     2B          | 	byte	"+"
32572     00          | 	byte	0
32573                 | LR__5517
32573     2D          | 	byte	"-"
32574     00          | 	byte	0
32575                 | LR__5518
32575     2D          | 	byte	"-"
32576     00          | 	byte	0
32577                 | LR__5519
32577     3C          | 	byte	"<"
32578     00          | 	byte	0
32579                 | LR__5520
32579     3E          | 	byte	">"
3257a     00          | 	byte	0
3257b                 | LR__5521
3257b     22          | 	byte	34
3257c     00          | 	byte	0
3257d                 | LR__5522
3257d     22          | 	byte	34
3257e     00          | 	byte	0
3257f                 | LR__5523
3257f     65 6C 73 65 | 	byte	"else"
32583     00          | 	byte	0
32584                 | LR__5524
32584     74 68 65 6E | 	byte	"then"
32588     00          | 	byte	0
32589                 | LR__5525
32589     3F          | 	byte	"?"
3258a     00          | 	byte	0
3258b                 | LR__5526
3258b     3F          | 	byte	"?"
3258c     00          | 	byte	0
3258d                 | LR__5527
3258d     2E          | 	byte	"."
3258e     00          | 	byte	0
3258f                 | LR__5528
3258f     6D 6F 75 73 
32593     65          | 	byte	"mouse"
32594     00          | 	byte	0
32595                 | LR__5529
32595     63 75 72 73 
32599     6F 72       | 	byte	"cursor"
3259b     00          | 	byte	0
3259c                 | LR__5530
3259c     63 6C 69 63 
325a0     6B          | 	byte	"click"
325a1     00          | 	byte	0
325a2                 | LR__5531
325a2     6F 6E       | 	byte	"on"
325a4     00          | 	byte	0
325a5                 | LR__5532
325a5     31          | 	byte	"1"
325a6     00          | 	byte	0
325a7                 | LR__5533
325a7     6F 66 66    | 	byte	"off"
325aa     00          | 	byte	0
325ab                 | LR__5534
325ab     30          | 	byte	"0"
325ac     00          | 	byte	0
325ad                 | LR__5535
325ad     6D 6F 64 65 | 	byte	"mode"
325b1     00          | 	byte	0
325b2                 | LR__5536
325b2     6D 2E       | 	byte	"m."
325b4     00          | 	byte	0
325b5                 | LR__5537
325b5     61 74 61 72 
325b9     69          | 	byte	"atari"
325ba     00          | 	byte	0
325bb                 | LR__5538
325bb     30          | 	byte	"0"
325bc     00          | 	byte	0
325bd                 | LR__5539
325bd     70 63 5F 61 
325c1     6D 62 65 72 | 	byte	"pc_amber"
325c5     00          | 	byte	0
325c6                 | LR__5540
325c6     31          | 	byte	"1"
325c7     00          | 	byte	0
325c8                 | LR__5541
325c8     70 63 5F 67 
325cc     72 65 65 6E | 	byte	"pc_green"
325d0     00          | 	byte	0
325d1                 | LR__5542
325d1     32          | 	byte	"2"
325d2     00          | 	byte	0
325d3                 | LR__5543
325d3     70 63 5F 77 
325d7     68 69 74 65 | 	byte	"pc_white"
325db     00          | 	byte	0
325dc                 | LR__5544
325dc     33          | 	byte	"3"
325dd     00          | 	byte	0
325de                 | LR__5545
325de     73 74       | 	byte	"st"
325e0     00          | 	byte	0
325e1                 | LR__5546
325e1     34          | 	byte	"4"
325e2     00          | 	byte	0
325e3                 | LR__5547
325e3     61 6D 69 67 
325e7     61          | 	byte	"amiga"
325e8     00          | 	byte	0
325e9                 | LR__5548
325e9     35          | 	byte	"5"
325ea     00          | 	byte	0
325eb                 | LR__5549
325eb                 | 	byte	
325eb     00          | 	byte	0
325ec                 | LR__5550
325ec     6C 6F 61 64 | 	byte	"load"
325f0     00          | 	byte	0
325f1                 | LR__5551
325f1     73 61 76 65 | 	byte	"save"
325f5     00          | 	byte	0
325f6                 | LR__5552
325f6     62 72 75 6E | 	byte	"brun"
325fa     00          | 	byte	0
325fb                 | LR__5553
325fb     72 75 6E    | 	byte	"run"
325fe     00          | 	byte	0
325ff                 | LR__5554
325ff     6C 6F 2E    | 	byte	"lo."
32602     00          | 	byte	0
32603                 | LR__5555
32603     73 2E       | 	byte	"s."
32605     00          | 	byte	0
32606                 | LR__5556
32606     62 72 2E    | 	byte	"br."
32609     00          | 	byte	0
3260a                 | LR__5557
3260a     65 6E 74 65 
3260e     72          | 	byte	"enter"
3260f     00          | 	byte	0
32610                 | LR__5558
32610     65 2E       | 	byte	"e."
32612     00          | 	byte	0
32613                 | LR__5559
32613     24          | 	byte	"$"
32614     00          | 	byte	0
32615                 | LR__5560
32615     64 65 6C 65 
32619     74 65       | 	byte	"delete"
3261b     00          | 	byte	0
3261c                 | LR__5561
3261c     6D 6B 64 69 
32620     72          | 	byte	"mkdir"
32621     00          | 	byte	0
32622                 | LR__5562
32622     24          | 	byte	"$"
32623     00          | 	byte	0
32624                 | LR__5563
32624     63 6F 70 79 | 	byte	"copy"
32628     00          | 	byte	0
32629                 | LR__5564
32629     24          | 	byte	"$"
3262a     00          | 	byte	0
3262b                 | LR__5565
3262b     63 6F 70 79 | 	byte	"copy"
3262f     00          | 	byte	0
32630                 | LR__5566
32630     24          | 	byte	"$"
32631     00          | 	byte	0
32632                 | LR__5567
32632     63 64       | 	byte	"cd"
32634     00          | 	byte	0
32635                 | LR__5568
32635     63 64 2E    | 	byte	"cd."
32638     00          | 	byte	0
32639                 | LR__5569
32639     2E          | 	byte	"."
3263a     00          | 	byte	0
3263b                 | LR__5570
3263b     2E 2E       | 	byte	".."
3263d     00          | 	byte	0
3263e                 | LR__5571
3263e     63 64       | 	byte	"cd"
32640     00          | 	byte	0
32641                 | LR__5572
32641     2F          | 	byte	"/"
32642     00          | 	byte	0
32643                 | LR__5573
32643                 | 	byte	
32643     00          | 	byte	0
32644                 | LR__5574
32644                 | 	byte	
32644     00          | 	byte	0
32645                 | LR__5575
32645                 | 	byte	
32645     00          | 	byte	0
32646                 | LR__5576
32646                 | 	byte	
32646     00          | 	byte	0
32647                 | LR__5577
32647                 | 	byte	
32647     00          | 	byte	0
32648                 | LR__5578
32648     52 65 61 64 
3264c     79          | 	byte	"Ready"
3264d     00          | 	byte	0
3264e                 | LR__5579
3264e     2B          | 	byte	"+"
3264f     00          | 	byte	0
32650                 | LR__5580
32650     2D          | 	byte	"-"
32651     00          | 	byte	0
32652                 | LR__5581
32652     6F 72       | 	byte	"or"
32654     00          | 	byte	0
32655                 | LR__5582
32655     78 6F 72    | 	byte	"xor"
32658     00          | 	byte	0
32659                 | LR__5583
32659     2A          | 	byte	"*"
3265a     00          | 	byte	0
3265b                 | LR__5584
3265b     2F          | 	byte	"/"
3265c     00          | 	byte	0
3265d                 | LR__5585
3265d     61 6E 64    | 	byte	"and"
32660     00          | 	byte	0
32661                 | LR__5586
32661     64 69 76    | 	byte	"div"
32664     00          | 	byte	0
32665                 | LR__5587
32665     6D 6F 64    | 	byte	"mod"
32668     00          | 	byte	0
32669                 | LR__5588
32669     73 68 6C    | 	byte	"shl"
3266c     00          | 	byte	0
3266d                 | LR__5589
3266d     73 68 72    | 	byte	"shr"
32670     00          | 	byte	0
32671                 | LR__5590
32671     5E          | 	byte	"^"
32672     00          | 	byte	0
32673                 | LR__5591
32673     6E 6F 74    | 	byte	"not"
32676     00          | 	byte	0
32677                 | LR__5592
32677     40          | 	byte	"@"
32678     00          | 	byte	0
32679                 | LR__5593
32679     3D          | 	byte	"="
3267a     00          | 	byte	0
3267b                 | LR__5594
3267b     3E 3D       | 	byte	">="
3267d     00          | 	byte	0
3267e                 | LR__5595
3267e     3C 3D       | 	byte	"<="
32680     00          | 	byte	0
32681                 | LR__5596
32681     3C          | 	byte	"<"
32682     00          | 	byte	0
32683                 | LR__5597
32683     3E          | 	byte	">"
32684     00          | 	byte	0
32685                 | LR__5598
32685     3C 3E       | 	byte	"<>"
32687     00          | 	byte	0
32688                 | LR__5599
32688     2B 2B       | 	byte	"++"
3268a     00          | 	byte	0
3268b                 | LR__5600
3268b     2D 2D       | 	byte	"--"
3268d     00          | 	byte	0
3268e                 | LR__5601
3268e     23          | 	byte	"#"
3268f     00          | 	byte	0
32690                 | LR__5602
32690     30          | 	byte	"0"
32691     00          | 	byte	0
32692                 | LR__5603
32692     39          | 	byte	"9"
32693     00          | 	byte	0
32694                 | LR__5604
32694     23 72 65 61 
32698     64          | 	byte	"#read"
32699     00          | 	byte	0
3269a                 | LR__5605
3269a     23 77 72 69 
3269e     74 65       | 	byte	"#write"
326a0     00          | 	byte	0
326a1                 | LR__5606
326a1     23 61 70 70 
326a5     65 6E 64    | 	byte	"#append"
326a8     00          | 	byte	0
326a9                 | LR__5607
326a9     23          | 	byte	"#"
326aa     00          | 	byte	0
326ab                 | LR__5608
326ab     23          | 	byte	"#"
326ac     00          | 	byte	0
326ad                 | LR__5609
326ad     2D          | 	byte	"-"
326ae     00          | 	byte	0
326af                 | LR__5610
326af     30          | 	byte	"0"
326b0     00          | 	byte	0
326b1                 | LR__5611
326b1     63          | 	byte	"c"
326b2     00          | 	byte	0
326b3                 | LR__5612
326b3     63 23       | 	byte	"c#"
326b5     00          | 	byte	0
326b6                 | LR__5613
326b6     64          | 	byte	"d"
326b7     00          | 	byte	0
326b8                 | LR__5614
326b8     64 23       | 	byte	"d#"
326ba     00          | 	byte	0
326bb                 | LR__5615
326bb     65          | 	byte	"e"
326bc     00          | 	byte	0
326bd                 | LR__5616
326bd     66          | 	byte	"f"
326be     00          | 	byte	0
326bf                 | LR__5617
326bf     66 23       | 	byte	"f#"
326c1     00          | 	byte	0
326c2                 | LR__5618
326c2     67          | 	byte	"g"
326c3     00          | 	byte	0
326c4                 | LR__5619
326c4     67 23       | 	byte	"g#"
326c6     00          | 	byte	0
326c7                 | LR__5620
326c7     61          | 	byte	"a"
326c8     00          | 	byte	0
326c9                 | LR__5621
326c9     61 23       | 	byte	"a#"
326cb     00          | 	byte	0
326cc                 | LR__5622
326cc     68          | 	byte	"h"
326cd     00          | 	byte	0
326ce                 | LR__5623
326ce     62          | 	byte	"b"
326cf     00          | 	byte	0
326d0                 | LR__5624
326d0     2B          | 	byte	"+"
326d1     00          | 	byte	0
326d2                 | LR__5625
326d2     2D          | 	byte	"-"
326d3     00          | 	byte	0
326d4                 | LR__5626
326d4     3D          | 	byte	"="
326d5     00          | 	byte	0
326d6                 | LR__5627
326d6     2C          | 	byte	","
326d7     00          | 	byte	0
326d8                 | LR__5628
326d8     2A          | 	byte	"*"
326d9     00          | 	byte	0
326da                 | LR__5629
326da     2F          | 	byte	"/"
326db     00          | 	byte	0
326dc                 | LR__5630
326dc     3B          | 	byte	";"
326dd     00          | 	byte	0
326de                 | LR__5631
326de     22          | 	byte	34
326df     00          | 	byte	0
326e0                 | LR__5632
326e0     5E          | 	byte	"^"
326e1     00          | 	byte	0
326e2                 | LR__5633
326e2     29          | 	byte	")"
326e3     00          | 	byte	0
326e4                 | LR__5634
326e4     28          | 	byte	"("
326e5     00          | 	byte	0
326e6                 | LR__5635
326e6     3A          | 	byte	":"
326e7     00          | 	byte	0
326e8                 | LR__5636
326e8     20          | 	byte	" "
326e9     00          | 	byte	0
326ea                 | LR__5637
326ea     3E          | 	byte	">"
326eb     00          | 	byte	0
326ec                 | LR__5638
326ec     3C          | 	byte	"<"
326ed     00          | 	byte	0
326ee                 | LR__5639
326ee     3D          | 	byte	"="
326ef     00          | 	byte	0
326f0                 | LR__5640
326f0     62 65 65 70 | 	byte	"beep"
326f4     00          | 	byte	0
326f5                 | LR__5641
326f5     62 2E       | 	byte	"b."
326f7     00          | 	byte	0
326f8                 | LR__5642
326f8     62 6C 69 74 | 	byte	"blit"
326fc     00          | 	byte	0
326fd                 | LR__5643
326fd     62 6F 78    | 	byte	"box"
32700     00          | 	byte	0
32701                 | LR__5644
32701     62 72 75 6E | 	byte	"brun"
32705     00          | 	byte	0
32706                 | LR__5645
32706     62 72 2E    | 	byte	"br."
32709     00          | 	byte	0
3270a                 | LR__5646
3270a     63 64       | 	byte	"cd"
3270c     00          | 	byte	0
3270d                 | LR__5647
3270d     63 68 61 6E 
32711     67 65 66 72 
32715     65 71       | 	byte	"changefreq"
32717     00          | 	byte	0
32718                 | LR__5648
32718     63 66 2E    | 	byte	"cf."
3271b     00          | 	byte	0
3271c                 | LR__5649
3271c     63 68 61 6E 
32720     67 65 70 61 
32724     6E          | 	byte	"changepan"
32725     00          | 	byte	0
32726                 | LR__5650
32726     63 70 2E    | 	byte	"cp."
32729     00          | 	byte	0
3272a                 | LR__5651
3272a     63 68 61 6E 
3272e     67 65 76 6F 
32732     6C          | 	byte	"changevol"
32733     00          | 	byte	0
32734                 | LR__5652
32734     63 76 2E    | 	byte	"cv."
32737     00          | 	byte	0
32738                 | LR__5653
32738     63 68 61 6E 
3273c     67 65 77 61 
32740     76 65       | 	byte	"changewave"
32742     00          | 	byte	0
32743                 | LR__5654
32743     63 77 2E    | 	byte	"cw."
32746     00          | 	byte	0
32747                 | LR__5655
32747     63 69 72 63 
3274b     6C 65       | 	byte	"circle"
3274d     00          | 	byte	0
3274e                 | LR__5656
3274e     63 69 2E    | 	byte	"ci."
32751     00          | 	byte	0
32752                 | LR__5657
32752     63 6C 69 63 
32756     6B          | 	byte	"click"
32757     00          | 	byte	0
32758                 | LR__5658
32758     63 6C 6F 73 
3275c     65          | 	byte	"close"
3275d     00          | 	byte	0
3275e                 | LR__5659
3275e     63 6C 73    | 	byte	"cls"
32761     00          | 	byte	0
32762                 | LR__5660
32762     63 6F 67 73 
32766     74 6F 70    | 	byte	"cogstop"
32769     00          | 	byte	0
3276a                 | LR__5661
3276a     63 6F 6C 6F 
3276e     72          | 	byte	"color"
3276f     00          | 	byte	0
32770                 | LR__5662
32770     63 2E       | 	byte	"c."
32772     00          | 	byte	0
32773                 | LR__5663
32773     63 6F 70 79 | 	byte	"copy"
32777     00          | 	byte	0
32778                 | LR__5664
32778     63 75 72 73 
3277c     6F 72       | 	byte	"cursor"
3277e     00          | 	byte	0
3277f                 | LR__5665
3277f     64 61 74 61 | 	byte	"data"
32783     00          | 	byte	0
32784                 | LR__5666
32784     64 65 66 63 
32788     68 61 72    | 	byte	"defchar"
3278b     00          | 	byte	0
3278c                 | LR__5667
3278c     64 65 66 73 
32790     6E 64       | 	byte	"defsnd"
32792     00          | 	byte	0
32793                 | LR__5668
32793     64 65 66 65 
32797     6E 76       | 	byte	"defenv"
32799     00          | 	byte	0
3279a                 | LR__5669
3279a     64 65 66 73 
3279e     70 72 69 74 
327a2     65          | 	byte	"defsprite"
327a3     00          | 	byte	0
327a4                 | LR__5670
327a4     64 73 2E    | 	byte	"ds."
327a7     00          | 	byte	0
327a8                 | LR__5671
327a8     64 65 67    | 	byte	"deg"
327ab     00          | 	byte	0
327ac                 | LR__5672
327ac     64 65 6C 65 
327b0     74 65       | 	byte	"delete"
327b2     00          | 	byte	0
327b3                 | LR__5673
327b3     64 69 6D    | 	byte	"dim"
327b6     00          | 	byte	0
327b7                 | LR__5674
327b7     64 69 72    | 	byte	"dir"
327ba     00          | 	byte	0
327bb                 | LR__5675
327bb     64 70 6F 6B 
327bf     65          | 	byte	"dpoke"
327c0     00          | 	byte	0
327c1                 | LR__5676
327c1     64 72 61 77 | 	byte	"draw"
327c5     00          | 	byte	0
327c6                 | LR__5677
327c6     64 72 61 77 
327ca     74 6F       | 	byte	"drawto"
327cc     00          | 	byte	0
327cd                 | LR__5678
327cd     64 72 2E    | 	byte	"dr."
327d0     00          | 	byte	0
327d1                 | LR__5679
327d1     65 6C 73 65 | 	byte	"else"
327d5     00          | 	byte	0
327d6                 | LR__5680
327d6     65 6E 64    | 	byte	"end"
327d9     00          | 	byte	0
327da                 | LR__5681
327da     65 6E 74 65 
327de     72          | 	byte	"enter"
327df     00          | 	byte	0
327e0                 | LR__5682
327e0     65 2E       | 	byte	"e."
327e2     00          | 	byte	0
327e3                 | LR__5683
327e3     66 63 69 72 
327e7     63 6C 65    | 	byte	"fcircle"
327ea     00          | 	byte	0
327eb                 | LR__5684
327eb     66 63 2E    | 	byte	"fc."
327ee     00          | 	byte	0
327ef                 | LR__5685
327ef     66 69 6C 6C | 	byte	"fill"
327f3     00          | 	byte	0
327f4                 | LR__5686
327f4     66 69 2E    | 	byte	"fi."
327f7     00          | 	byte	0
327f8                 | LR__5687
327f8     66 6F 6E 74 | 	byte	"font"
327fc     00          | 	byte	0
327fd                 | LR__5688
327fd     66 6F 72    | 	byte	"for"
32800     00          | 	byte	0
32801                 | LR__5689
32801     66 2E       | 	byte	"f."
32803     00          | 	byte	0
32804                 | LR__5690
32804     66 72 61 6D 
32808     65          | 	byte	"frame"
32809     00          | 	byte	0
3280a                 | LR__5691
3280a     66 72 2E    | 	byte	"fr."
3280d     00          | 	byte	0
3280e                 | LR__5692
3280e     67 65 74    | 	byte	"get"
32811     00          | 	byte	0
32812                 | LR__5693
32812     67 6F 73 75 
32816     62          | 	byte	"gosub"
32817     00          | 	byte	0
32818                 | LR__5694
32818     67 6F 74 6F | 	byte	"goto"
3281c     00          | 	byte	0
3281d                 | LR__5695
3281d     67 2E       | 	byte	"g."
3281f     00          | 	byte	0
32820                 | LR__5696
32820     69 66       | 	byte	"if"
32822     00          | 	byte	0
32823                 | LR__5697
32823     69 6E 6B    | 	byte	"ink"
32826     00          | 	byte	0
32827                 | LR__5698
32827     69 2E       | 	byte	"i."
32829     00          | 	byte	0
3282a                 | LR__5699
3282a     69 6E 70 75 
3282e     74          | 	byte	"input"
3282f     00          | 	byte	0
32830                 | LR__5700
32830     6C 69 73 74 | 	byte	"list"
32834     00          | 	byte	0
32835                 | LR__5701
32835     6C 2E       | 	byte	"l."
32837     00          | 	byte	0
32838                 | LR__5702
32838     6C 6F 61 64 | 	byte	"load"
3283c     00          | 	byte	0
3283d                 | LR__5703
3283d     6C 6F 2E    | 	byte	"lo."
32840     00          | 	byte	0
32841                 | LR__5704
32841     6C 70 6F 6B 
32845     65          | 	byte	"lpoke"
32846     00          | 	byte	0
32847                 | LR__5705
32847     6D 6B 64 69 
3284b     72          | 	byte	"mkdir"
3284c     00          | 	byte	0
3284d                 | LR__5706
3284d     6D 6F 64 65 | 	byte	"mode"
32851     00          | 	byte	0
32852                 | LR__5707
32852     6D 2E       | 	byte	"m."
32854     00          | 	byte	0
32855                 | LR__5708
32855     6D 6F 75 73 
32859     65          | 	byte	"mouse"
3285a     00          | 	byte	0
3285b                 | LR__5709
3285b     6E 65 77    | 	byte	"new"
3285e     00          | 	byte	0
3285f                 | LR__5710
3285f     6E 65 78 74 | 	byte	"next"
32863     00          | 	byte	0
32864                 | LR__5711
32864     6E 2E       | 	byte	"n."
32866     00          | 	byte	0
32867                 | LR__5712
32867     6F 6E       | 	byte	"on"
32869     00          | 	byte	0
3286a                 | LR__5713
3286a     6F 70 65 6E | 	byte	"open"
3286e     00          | 	byte	0
3286f                 | LR__5714
3286f     70 61 70 65 
32873     72          | 	byte	"paper"
32874     00          | 	byte	0
32875                 | LR__5715
32875     70 61 2E    | 	byte	"pa."
32878     00          | 	byte	0
32879                 | LR__5716
32879     70 69 6E 66 
3287d     6C 6F 61 74 | 	byte	"pinfloat"
32881     00          | 	byte	0
32882                 | LR__5717
32882     70 69 6E 68 
32886     69          | 	byte	"pinhi"
32887     00          | 	byte	0
32888                 | LR__5718
32888     70 69 6E 6C 
3288c     6F          | 	byte	"pinlo"
3288d     00          | 	byte	0
3288e                 | LR__5719
3288e     70 69 6E 73 
32892     74 61 72 74 | 	byte	"pinstart"
32896     00          | 	byte	0
32897                 | LR__5720
32897     70 69 6E 74 
3289b     6F 67 67 6C 
3289f     65          | 	byte	"pintoggle"
328a0     00          | 	byte	0
328a1                 | LR__5721
328a1     70 69 6E 77 
328a5     72 69 74 65 | 	byte	"pinwrite"
328a9     00          | 	byte	0
328aa                 | LR__5722
328aa     70 6C 61 79 | 	byte	"play"
328ae     00          | 	byte	0
328af                 | LR__5723
328af     70 2E       | 	byte	"p."
328b1     00          | 	byte	0
328b2                 | LR__5724
328b2     70 6C 6F 74 | 	byte	"plot"
328b6     00          | 	byte	0
328b7                 | LR__5725
328b7     70 6C 2E    | 	byte	"pl."
328ba     00          | 	byte	0
328bb                 | LR__5726
328bb     70 6F 6B 65 | 	byte	"poke"
328bf     00          | 	byte	0
328c0                 | LR__5727
328c0     70 6F 70    | 	byte	"pop"
328c3     00          | 	byte	0
328c4                 | LR__5728
328c4     70 6F 73 69 
328c8     74 69 6F 6E | 	byte	"position"
328cc     00          | 	byte	0
328cd                 | LR__5729
328cd     70 6F 73 2E | 	byte	"pos."
328d1     00          | 	byte	0
328d2                 | LR__5730
328d2     70 72 69 6E 
328d6     74          | 	byte	"print"
328d7     00          | 	byte	0
328d8                 | LR__5731
328d8     3F          | 	byte	"?"
328d9     00          | 	byte	0
328da                 | LR__5732
328da     70 75 74    | 	byte	"put"
328dd     00          | 	byte	0
328de                 | LR__5733
328de     72 61 64    | 	byte	"rad"
328e1     00          | 	byte	0
328e2                 | LR__5734
328e2     72 65 61 64 | 	byte	"read"
328e6     00          | 	byte	0
328e7                 | LR__5735
328e7     72 65 6C 65 
328eb     61 73 65    | 	byte	"release"
328ee     00          | 	byte	0
328ef                 | LR__5736
328ef     72 65 6D    | 	byte	"rem"
328f2     00          | 	byte	0
328f3                 | LR__5737
328f3     27          | 	byte	"'"
328f4     00          | 	byte	0
328f5                 | LR__5738
328f5     72 65 73 74 
328f9     6F 72 65    | 	byte	"restore"
328fc     00          | 	byte	0
328fd                 | LR__5739
328fd     72 65 73 74 
32901     6F 72 65 70 
32905     61 6C 65 74 
32909     74 65       | 	byte	"restorepalette"
3290b     00          | 	byte	0
3290c                 | LR__5740
3290c     72 70 2E    | 	byte	"rp."
3290f     00          | 	byte	0
32910                 | LR__5741
32910     72 65 74 75 
32914     72 6E       | 	byte	"return"
32916     00          | 	byte	0
32917                 | LR__5742
32917     72 75 6E    | 	byte	"run"
3291a     00          | 	byte	0
3291b                 | LR__5743
3291b     72 2E       | 	byte	"r."
3291d     00          | 	byte	0
3291e                 | LR__5744
3291e     73 61 76 65 | 	byte	"save"
32922     00          | 	byte	0
32923                 | LR__5745
32923     73 2E       | 	byte	"s."
32925     00          | 	byte	0
32926                 | LR__5746
32926     73 65 74 63 
3292a     6F 6C 6F 72 | 	byte	"setcolor"
3292e     00          | 	byte	0
3292f                 | LR__5747
3292f     73 63 2E    | 	byte	"sc."
32932     00          | 	byte	0
32933                 | LR__5748
32933     73 65 74 61 
32937     6D 6F 64 65 | 	byte	"setamode"
3293b     00          | 	byte	0
3293c                 | LR__5749
3293c     73 61 2E    | 	byte	"sa."
3293f     00          | 	byte	0
32940                 | LR__5750
32940     73 65 74 64 
32944     65 6C 61 79 | 	byte	"setdelay"
32948     00          | 	byte	0
32949                 | LR__5751
32949     73 64 2E    | 	byte	"sd."
3294c     00          | 	byte	0
3294d                 | LR__5752
3294d     73 65 74 65 
32951     6E 76       | 	byte	"setenv"
32953     00          | 	byte	0
32954                 | LR__5753
32954     73 65 2E    | 	byte	"se."
32957     00          | 	byte	0
32958                 | LR__5754
32958     73 65 74 6C 
3295c     65 6E       | 	byte	"setlen"
3295e     00          | 	byte	0
3295f                 | LR__5755
3295f     73 6C 2E    | 	byte	"sl."
32962     00          | 	byte	0
32963                 | LR__5756
32963     73 65 74 70 
32967     61 6E       | 	byte	"setpan"
32969     00          | 	byte	0
3296a                 | LR__5757
3296a     73 70 2E    | 	byte	"sp."
3296d     00          | 	byte	0
3296e                 | LR__5758
3296e     73 65 74 73 
32972     75 73 74 61 
32976     69 6E       | 	byte	"setsustain"
32978     00          | 	byte	0
32979                 | LR__5759
32979     73 73 2E    | 	byte	"ss."
3297c     00          | 	byte	0
3297d                 | LR__5760
3297d     73 65 74 76 
32981     6F 6C       | 	byte	"setvol"
32983     00          | 	byte	0
32984                 | LR__5761
32984     73 76 2E    | 	byte	"sv."
32987     00          | 	byte	0
32988                 | LR__5762
32988     73 65 74 77 
3298c     61 76 65    | 	byte	"setwave"
3298f     00          | 	byte	0
32990                 | LR__5763
32990     73 77 2E    | 	byte	"sw."
32993     00          | 	byte	0
32994                 | LR__5764
32994     73 65 74 77 
32998     61 76       | 	byte	"setwav"
3299a     00          | 	byte	0
3299b                 | LR__5765
3299b     73 68 75 74 
3299f     75 70       | 	byte	"shutup"
329a1     00          | 	byte	0
329a2                 | LR__5766
329a2     73 68 2E    | 	byte	"sh."
329a5     00          | 	byte	0
329a6                 | LR__5767
329a6     73 6F 75 6E 
329aa     64          | 	byte	"sound"
329ab     00          | 	byte	0
329ac                 | LR__5768
329ac     73 6F 2E    | 	byte	"so."
329af     00          | 	byte	0
329b0                 | LR__5769
329b0     73 70 72 69 
329b4     74 65       | 	byte	"sprite"
329b6     00          | 	byte	0
329b7                 | LR__5770
329b7     73 70 72 2E | 	byte	"spr."
329bb     00          | 	byte	0
329bc                 | LR__5771
329bc     74 68 65 6E | 	byte	"then"
329c0     00          | 	byte	0
329c1                 | LR__5772
329c1     77 61 69 74 
329c5     6D 73       | 	byte	"waitms"
329c7     00          | 	byte	0
329c8                 | LR__5773
329c8     77 2E       | 	byte	"w."
329ca     00          | 	byte	0
329cb                 | LR__5774
329cb     77 61 69 74 
329cf     63 6C 6F 63 
329d3     6B          | 	byte	"waitclock"
329d4     00          | 	byte	0
329d5                 | LR__5775
329d5     77 63 2E    | 	byte	"wc."
329d8     00          | 	byte	0
329d9                 | LR__5776
329d9     77 61 69 74 
329dd     76 62 6C    | 	byte	"waitvbl"
329e0     00          | 	byte	0
329e1                 | LR__5777
329e1     77 76 2E    | 	byte	"wv."
329e4     00          | 	byte	0
329e5                 | LR__5778
329e5     77 72 70 69 
329e9     6E          | 	byte	"wrpin"
329ea     00          | 	byte	0
329eb                 | LR__5779
329eb     77 78 70 69 
329ef     6E          | 	byte	"wxpin"
329f0     00          | 	byte	0
329f1                 | LR__5780
329f1     77 79 70 69 
329f5     6E          | 	byte	"wypin"
329f6     00          | 	byte	0
329f7                 | LR__5781
329f7     61 62 73    | 	byte	"abs"
329fa     00          | 	byte	0
329fb                 | LR__5782
329fb     61 63 6F 73 | 	byte	"acos"
329ff     00          | 	byte	0
32a00                 | LR__5783
32a00     61 64 72    | 	byte	"adr"
32a03     00          | 	byte	0
32a04                 | LR__5784
32a04     61 64 64 72 | 	byte	"addr"
32a08     00          | 	byte	0
32a09                 | LR__5785
32a09     61 73 63    | 	byte	"asc"
32a0c     00          | 	byte	0
32a0d                 | LR__5786
32a0d     61 73 69 6E | 	byte	"asin"
32a11     00          | 	byte	0
32a12                 | LR__5787
32a12     61 74 6E    | 	byte	"atn"
32a15     00          | 	byte	0
32a16                 | LR__5788
32a16     62 69 6E 24 | 	byte	"bin$"
32a1a     00          | 	byte	0
32a1b                 | LR__5789
32a1b     63 68 72 24 | 	byte	"chr$"
32a1f     00          | 	byte	0
32a20                 | LR__5790
32a20     63 6F 67 69 
32a24     6E 69 74    | 	byte	"coginit"
32a27     00          | 	byte	0
32a28                 | LR__5791
32a28     63 6F 73    | 	byte	"cos"
32a2b     00          | 	byte	0
32a2c                 | LR__5792
32a2c     64 70 65 65 
32a30     6B          | 	byte	"dpeek"
32a31     00          | 	byte	0
32a32                 | LR__5793
32a32     66 69 6E 64 
32a36     66 69 72 73 
32a3a     74          | 	byte	"findfirst"
32a3b     00          | 	byte	0
32a3c                 | LR__5794
32a3c     66 69 6E 64 
32a40     6E 65 78 74 | 	byte	"findnext"
32a44     00          | 	byte	0
32a45                 | LR__5795
32a45     66 72 61 6D 
32a49     65 62 75 66 | 	byte	"framebuf"
32a4d     00          | 	byte	0
32a4e                 | LR__5796
32a4e     66 62 2E    | 	byte	"fb."
32a51     00          | 	byte	0
32a52                 | LR__5797
32a52     66 72 65    | 	byte	"fre"
32a55     00          | 	byte	0
32a56                 | LR__5798
32a56     67 63 2E    | 	byte	"gc."
32a59     00          | 	byte	0
32a5a                 | LR__5799
32a5a     67 65 74 63 
32a5e     6F 6C 6F 72 | 	byte	"getcolor"
32a62     00          | 	byte	0
32a63                 | LR__5800
32a63     67 65 74 70 
32a67     69 78 65 6C | 	byte	"getpixel"
32a6b     00          | 	byte	0
32a6c                 | LR__5801
32a6c     67 65 2E    | 	byte	"ge."
32a6f     00          | 	byte	0
32a70                 | LR__5802
32a70     67 65 74 65 
32a74     6E 76 73 75 
32a78     73 74 61 69 
32a7c     6E          | 	byte	"getenvsustain"
32a7d     00          | 	byte	0
32a7e                 | LR__5803
32a7e     67 65 74 6E 
32a82     6F 74 65 76 
32a86     61 6C 75 65 | 	byte	"getnotevalue"
32a8a     00          | 	byte	0
32a8b                 | LR__5804
32a8b     67 65 74 72 
32a8f     65 61 6C 66 
32a93     72 65 71    | 	byte	"getrealfreq"
32a96     00          | 	byte	0
32a97                 | LR__5805
32a97     67 65 74 74 
32a9b     69 6D 65    | 	byte	"gettime"
32a9e     00          | 	byte	0
32a9f                 | LR__5806
32a9f     67 74 2E    | 	byte	"gt."
32aa2     00          | 	byte	0
32aa3                 | LR__5807
32aa3     68 65 78 24 | 	byte	"hex$"
32aa7     00          | 	byte	0
32aa8                 | LR__5808
32aa8     69 6E 6B 65 
32aac     79 24       | 	byte	"inkey$"
32aae     00          | 	byte	0
32aaf                 | LR__5809
32aaf     69 6E 74    | 	byte	"int"
32ab2     00          | 	byte	0
32ab3                 | LR__5810
32ab3     6C 65 66 74 
32ab7     24          | 	byte	"left$"
32ab8     00          | 	byte	0
32ab9                 | LR__5811
32ab9     6C 65 6E    | 	byte	"len"
32abc     00          | 	byte	0
32abd                 | LR__5812
32abd     6C 6F 67    | 	byte	"log"
32ac0     00          | 	byte	0
32ac1                 | LR__5813
32ac1     6C 70 65 65 
32ac5     6B          | 	byte	"lpeek"
32ac6     00          | 	byte	0
32ac7                 | LR__5814
32ac7     6D 65 6D 74 
32acb     6F 70       | 	byte	"memtop"
32acd     00          | 	byte	0
32ace                 | LR__5815
32ace     6D 65 6D 6C 
32ad2     6F          | 	byte	"memlo"
32ad3     00          | 	byte	0
32ad4                 | LR__5816
32ad4     6D 69 64 24 | 	byte	"mid$"
32ad8     00          | 	byte	0
32ad9                 | LR__5817
32ad9     6D 6F 75 73 
32add     65 6B       | 	byte	"mousek"
32adf     00          | 	byte	0
32ae0                 | LR__5818
32ae0     6D 6F 75 73 
32ae4     65 77       | 	byte	"mousew"
32ae6     00          | 	byte	0
32ae7                 | LR__5819
32ae7     6D 6F 75 73 
32aeb     65 78       | 	byte	"mousex"
32aed     00          | 	byte	0
32aee                 | LR__5820
32aee     6D 6F 75 73 
32af2     65 79       | 	byte	"mousey"
32af4     00          | 	byte	0
32af5                 | LR__5821
32af5     70 61 64 73 | 	byte	"pads"
32af9     00          | 	byte	0
32afa                 | LR__5822
32afa     70 61 64 77 | 	byte	"padw"
32afe     00          | 	byte	0
32aff                 | LR__5823
32aff     70 61 64 78 | 	byte	"padx"
32b03     00          | 	byte	0
32b04                 | LR__5824
32b04     70 61 64 79 | 	byte	"pady"
32b08     00          | 	byte	0
32b09                 | LR__5825
32b09     70 61 64 7A | 	byte	"padz"
32b0d     00          | 	byte	0
32b0e                 | LR__5826
32b0e     70 61 64 72 
32b12     78          | 	byte	"padrx"
32b13     00          | 	byte	0
32b14                 | LR__5827
32b14     70 61 64 72 
32b18     79          | 	byte	"padry"
32b19     00          | 	byte	0
32b1a                 | LR__5828
32b1a     70 61 64 72 
32b1e     7A          | 	byte	"padrz"
32b1f     00          | 	byte	0
32b20                 | LR__5829
32b20     70 61 64 68 | 	byte	"padh"
32b24     00          | 	byte	0
32b25                 | LR__5830
32b25     70 65 65 6B | 	byte	"peek"
32b29     00          | 	byte	0
32b2a                 | LR__5831
32b2a     70 69 6E 72 
32b2e     65 61 64    | 	byte	"pinread"
32b31     00          | 	byte	0
32b32                 | LR__5832
32b32     72 64 70 69 
32b36     6E          | 	byte	"rdpin"
32b37     00          | 	byte	0
32b38                 | LR__5833
32b38     72 69 67 68 
32b3c     74 24       | 	byte	"right$"
32b3e     00          | 	byte	0
32b3f                 | LR__5834
32b3f     72 71 70 69 
32b43     6E          | 	byte	"rqpin"
32b44     00          | 	byte	0
32b45                 | LR__5835
32b45     72 6F 75 6E 
32b49     64          | 	byte	"round"
32b4a     00          | 	byte	0
32b4b                 | LR__5836
32b4b     72 6E 64    | 	byte	"rnd"
32b4e     00          | 	byte	0
32b4f                 | LR__5837
32b4f     73 69 6E    | 	byte	"sin"
32b52     00          | 	byte	0
32b53                 | LR__5838
32b53     73 71 72    | 	byte	"sqr"
32b56     00          | 	byte	0
32b57                 | LR__5839
32b57     73 74 69 63 
32b5b     6B          | 	byte	"stick"
32b5c     00          | 	byte	0
32b5d                 | LR__5840
32b5d     73 74 72 69 
32b61     67          | 	byte	"strig"
32b62     00          | 	byte	0
32b63                 | LR__5841
32b63     73 74 72 24 | 	byte	"str$"
32b67     00          | 	byte	0
32b68                 | LR__5842
32b68     74 61 6E    | 	byte	"tan"
32b6b     00          | 	byte	0
32b6c                 | LR__5843
32b6c     76 61 6C    | 	byte	"val"
32b6f     00          | 	byte	0
32b70                 | LR__5844
32b70     76 61 72 70 
32b74     74 72       | 	byte	"varptr"
32b76     00          | 	byte	0
32b77                 | LR__5845
32b77     61          | 	byte	"a"
32b78     00          | 	byte	0
32b79                 | LR__5846
32b79     7A          | 	byte	"z"
32b7a     00          | 	byte	0
32b7b                 | LR__5847
32b7b     5F          | 	byte	"_"
32b7c     00          | 	byte	0
32b7d                 | LR__5848
32b7d     61          | 	byte	"a"
32b7e     00          | 	byte	0
32b7f                 | LR__5849
32b7f     7A          | 	byte	"z"
32b80     00          | 	byte	0
32b81                 | LR__5850
32b81     30          | 	byte	"0"
32b82     00          | 	byte	0
32b83                 | LR__5851
32b83     39          | 	byte	"9"
32b84     00          | 	byte	0
32b85                 | LR__5852
32b85     5F          | 	byte	"_"
32b86     00          | 	byte	0
32b87                 | LR__5853
32b87     2E          | 	byte	"."
32b88     00          | 	byte	0
32b89                 | LR__5854
32b89     61          | 	byte	"a"
32b8a     00          | 	byte	0
32b8b                 | LR__5855
32b8b     7A          | 	byte	"z"
32b8c     00          | 	byte	0
32b8d                 | LR__5856
32b8d     30          | 	byte	"0"
32b8e     00          | 	byte	0
32b8f                 | LR__5857
32b8f     39          | 	byte	"9"
32b90     00          | 	byte	0
32b91                 | LR__5858
32b91     5F          | 	byte	"_"
32b92     00          | 	byte	0
32b93                 | LR__5859
32b93     24          | 	byte	"$"
32b94     00          | 	byte	0
32b95                 | LR__5860
32b95     25          | 	byte	"%"
32b96     00          | 	byte	0
32b97                 | LR__5861
32b97     21          | 	byte	"!"
32b98     00          | 	byte	0
32b99                 | LR__5862
32b99     30          | 	byte	"0"
32b9a     00          | 	byte	0
32b9b                 | LR__5863
32b9b     39          | 	byte	"9"
32b9c     00          | 	byte	0
32b9d                 | LR__5864
32b9d     2E          | 	byte	"."
32b9e     00          | 	byte	0
32b9f                 | LR__5865
32b9f     24          | 	byte	"$"
32ba0     00          | 	byte	0
32ba1                 | LR__5866
32ba1     25          | 	byte	"%"
32ba2     00          | 	byte	0
32ba3                 | LR__5867
32ba3     2D          | 	byte	"-"
32ba4     00          | 	byte	0
32ba5                 | LR__5868
32ba5     2E          | 	byte	"."
32ba6     00          | 	byte	0
32ba7                 | LR__5869
32ba7     24          | 	byte	"$"
32ba8     00          | 	byte	0
32ba9                 | LR__5870
32ba9     25          | 	byte	"%"
32baa     00          | 	byte	0
32bab                 | LR__5871
32bab     30          | 	byte	"0"
32bac     00          | 	byte	0
32bad                 | LR__5872
32bad     39          | 	byte	"9"
32bae     00          | 	byte	0
32baf                 | LR__5873
32baf     5F          | 	byte	"_"
32bb0     00          | 	byte	0
32bb1                 | LR__5874
32bb1     2E          | 	byte	"."
32bb2     00          | 	byte	0
32bb3                 | LR__5875
32bb3     45          | 	byte	"E"
32bb4     00          | 	byte	0
32bb5                 | LR__5876
32bb5     65          | 	byte	"e"
32bb6     00          | 	byte	0
32bb7                 | LR__5877
32bb7     2D          | 	byte	"-"
32bb8     00          | 	byte	0
32bb9                 | LR__5878
32bb9     61          | 	byte	"a"
32bba     00          | 	byte	0
32bbb                 | LR__5879
32bbb     66          | 	byte	"f"
32bbc     00          | 	byte	0
32bbd                 | LR__5880
32bbd     30          | 	byte	"0"
32bbe     00          | 	byte	0
32bbf                 | LR__5881
32bbf     31          | 	byte	"1"
32bc0     00          | 	byte	0
32bc1                 | LR__5882
32bc1     5F          | 	byte	"_"
32bc2     00          | 	byte	0
32bc3                 | LR__5883
32bc3     2D          | 	byte	"-"
32bc4     00          | 	byte	0
32bc5                 | LR__5884
32bc5     65          | 	byte	"e"
32bc6     00          | 	byte	0
32bc7                 | LR__5885
32bc7     2E          | 	byte	"."
32bc8     00          | 	byte	0
32bc9                 | LR__5886
32bc9     45          | 	byte	"E"
32bca     00          | 	byte	0
32bcb                 | LR__5887
32bcb     65          | 	byte	"e"
32bcc     00          | 	byte	0
32bcd                 | LR__5888
32bcd     30          | 	byte	"0"
32bce     00          | 	byte	0
32bcf                 | LR__5889
32bcf     39          | 	byte	"9"
32bd0     00          | 	byte	0
32bd1                 | LR__5890
32bd1     24          | 	byte	"$"
32bd2     00          | 	byte	0
32bd3                 | LR__5891
32bd3     25          | 	byte	"%"
32bd4     00          | 	byte	0
32bd5                 | LR__5892
32bd5     2D          | 	byte	"-"
32bd6     00          | 	byte	0
32bd7                 | LR__5893
32bd7     24          | 	byte	"$"
32bd8     00          | 	byte	0
32bd9                 | LR__5894
32bd9     25          | 	byte	"%"
32bda     00          | 	byte	0
32bdb                 | LR__5895
32bdb     30          | 	byte	"0"
32bdc     00          | 	byte	0
32bdd                 | LR__5896
32bdd     39          | 	byte	"9"
32bde     00          | 	byte	0
32bdf                 | LR__5897
32bdf     5F          | 	byte	"_"
32be0     00          | 	byte	0
32be1                 | LR__5898
32be1     30          | 	byte	"0"
32be2     00          | 	byte	0
32be3                 | LR__5899
32be3     39          | 	byte	"9"
32be4     00          | 	byte	0
32be5                 | LR__5900
32be5     61          | 	byte	"a"
32be6     00          | 	byte	0
32be7                 | LR__5901
32be7     66          | 	byte	"f"
32be8     00          | 	byte	0
32be9                 | LR__5902
32be9     5F          | 	byte	"_"
32bea     00          | 	byte	0
32beb                 | LR__5903
32beb     30          | 	byte	"0"
32bec     00          | 	byte	0
32bed                 | LR__5904
32bed     31          | 	byte	"1"
32bee     00          | 	byte	0
32bef                 | LR__5905
32bef     5F          | 	byte	"_"
32bf0     00          | 	byte	0
32bf1                 | LR__5906
32bf1     30          | 	byte	"0"
32bf2     00          | 	byte	0
32bf3                 | LR__5907
32bf3     39          | 	byte	"9"
32bf4     00          | 	byte	0
32bf5                 | LR__5908
32bf5     5F          | 	byte	"_"
32bf6     00          | 	byte	0
32bf7                 | LR__5909
32bf7     22          | 	byte	34
32bf8     00          | 	byte	0
32bf9                 | LR__5910
32bf9     22          | 	byte	34
32bfa     00          | 	byte	0
32bfb                 | LR__5911
32bfb     44 69 6D 3A 
32bff     20 61 74 20 
32c03     6C 69 6E 65 
32c07     20          | 	byte	"Dim: at line "
32c08     00          | 	byte	0
32c09                 | LR__5912
32c09     3A 20 77 61 
32c0d     72 6E 69 6E 
32c11     67 3A 20 74 
32c15     68 65 20 76 
32c19     61 72 69 61 
32c1d     62 6C 65 20 
32c21     65 78 69 73 
32c25     74 65 64 2E | 	byte	": warning: the variable existed."
32c29     00          | 	byte	0
32c2a                 | LR__5913
32c2a     28          | 	byte	"("
32c2b     00          | 	byte	0
32c2c                 | LR__5914
32c2c     61 73       | 	byte	"as"
32c2e     00          | 	byte	0
32c2f                 | LR__5915
32c2f     61 73       | 	byte	"as"
32c31     00          | 	byte	0
32c32                 | LR__5916
32c32     2C          | 	byte	","
32c33     00          | 	byte	0
32c34                 | LR__5917
32c34     29          | 	byte	")"
32c35     00          | 	byte	0
32c36                 | LR__5918
32c36     29          | 	byte	")"
32c37     00          | 	byte	0
32c38                 | LR__5919
32c38     61 73       | 	byte	"as"
32c3a     00          | 	byte	0
32c3b                 | LR__5920
32c3b     62 79 74 65 | 	byte	"byte"
32c3f     00          | 	byte	0
32c40                 | LR__5921
32c40     75 62 79 74 
32c44     65          | 	byte	"ubyte"
32c45     00          | 	byte	0
32c46                 | LR__5922
32c46     73 68 6F 72 
32c4a     74          | 	byte	"short"
32c4b     00          | 	byte	0
32c4c                 | LR__5923
32c4c     75 73 68 6F 
32c50     72 74       | 	byte	"ushort"
32c52     00          | 	byte	0
32c53                 | LR__5924
32c53     6C 6F 6E 67 | 	byte	"long"
32c57     00          | 	byte	0
32c58                 | LR__5925
32c58     69 6E 74 65 
32c5c     67 65 72    | 	byte	"integer"
32c5f     00          | 	byte	0
32c60                 | LR__5926
32c60     75 6C 6F 6E 
32c64     67          | 	byte	"ulong"
32c65     00          | 	byte	0
32c66                 | LR__5927
32c66     69 6E 74 36 
32c6a     34          | 	byte	"int64"
32c6b     00          | 	byte	0
32c6c                 | LR__5928
32c6c     75 69 6E 74 
32c70     36 34       | 	byte	"uint64"
32c72     00          | 	byte	0
32c73                 | LR__5929
32c73     73 69 6E 67 
32c77     6C 65       | 	byte	"single"
32c79     00          | 	byte	0
32c7a                 | LR__5930
32c7a     64 6F 75 62 
32c7e     6C 65       | 	byte	"double"
32c80     00          | 	byte	0
32c81                 | LR__5931
32c81     73 74 72 69 
32c85     6E 67       | 	byte	"string"
32c87     00          | 	byte	0
32c88                 | LR__5932
32c88     74 6F       | 	byte	"to"
32c8a     00          | 	byte	0
32c8b                 | LR__5933
32c8b     73 74 65 70 | 	byte	"step"
32c8f     00          | 	byte	0
32c90                 | LR__5934
32c90     73 2E       | 	byte	"s."
32c92     00          | 	byte	0
32c93                 | LR__5935
32c93     73 2E       | 	byte	"s."
32c95     00          | 	byte	0
32c96                 | LR__5936
32c96     67 6F 74 6F | 	byte	"goto"
32c9a     00          | 	byte	0
32c9b                 | LR__5937
32c9b     67 6F 73 75 
32c9f     62          | 	byte	"gosub"
32ca0     00          | 	byte	0
32ca1                 | LR__5938
32ca1     24          | 	byte	"$"
32ca2     00          | 	byte	0
32ca3                 | LR__5939
32ca3     26 68       | 	byte	"&h"
32ca5     00          | 	byte	0
32ca6                 | LR__5940
32ca6     25          | 	byte	"%"
32ca7     00          | 	byte	0
32ca8                 | LR__5941
32ca8     26 62       | 	byte	"&b"
32caa     00          | 	byte	0
32cab                 | LR__5942
32cab                 | 	byte	
32cab     00          | 	byte	0
32cac                 | LR__5943
32cac     61 63 6F 73 
32cb0     3A 20       | 	byte	"acos: "
32cb2     00          | 	byte	0
32cb3                 | LR__5944
32cb3     61 73 63 3A 
32cb7     20          | 	byte	"asc: "
32cb8     00          | 	byte	0
32cb9                 | LR__5945
32cb9     61 73 63 3A 
32cbd     20          | 	byte	"asc: "
32cbe     00          | 	byte	0
32cbf                 | LR__5946
32cbf     61 73 69 6E 
32cc3     3A 20       | 	byte	"asin: "
32cc5     00          | 	byte	0
32cc6                 | LR__5947
32cc6     61 74 6E 3A 
32cca     20          | 	byte	"atn: "
32ccb     00          | 	byte	0
32ccc                 | LR__5948
32ccc     62 6C 69 74 
32cd0     3A 20       | 	byte	"blit: "
32cd2     00          | 	byte	0
32cd3                 | LR__5949
32cd3     62 69 6E 24 
32cd7     3A 20       | 	byte	"bin$: "
32cd9     00          | 	byte	0
32cda                 | LR__5950
32cda     2F          | 	byte	"/"
32cdb     00          | 	byte	0
32cdc                 | LR__5951
32cdc     2F 73 64 2F 
32ce0     62 69 6E 2F | 	byte	"/sd/bin/"
32ce4     00          | 	byte	0
32ce5                 | LR__5952
32ce5     53 79 73 74 
32ce9     65 6D 20 65 
32ced     72 72 6F 72 
32cf1     20          | 	byte	"System error "
32cf2     00          | 	byte	0
32cf3                 | LR__5953
32cf3     3A 20       | 	byte	": "
32cf5     00          | 	byte	0
32cf6                 | LR__5954
32cf6     2A          | 	byte	"*"
32cf7     00          | 	byte	0
32cf8                 | LR__5955
32cf8     2E 2E       | 	byte	".."
32cfa     00          | 	byte	0
32cfb                 | LR__5956
32cfb     2F          | 	byte	"/"
32cfc     00          | 	byte	0
32cfd                 | LR__5957
32cfd     2F          | 	byte	"/"
32cfe     00          | 	byte	0
32cff                 | LR__5958
32cff     53 79 73 74 
32d03     65 6D 20 65 
32d07     72 72 6F 72 
32d0b     20          | 	byte	"System error "
32d0c     00          | 	byte	0
32d0d                 | LR__5959
32d0d     3A 20       | 	byte	": "
32d0f     00          | 	byte	0
32d10                 | LR__5960
32d10     43 75 72 72 
32d14     65 6E 74 20 
32d18     64 69 72 65 
32d1c     63 74 6F 72 
32d20     79 3A 20    | 	byte	"Current directory: "
32d23     00          | 	byte	0
32d24                 | LR__5961
32d24     2F          | 	byte	"/"
32d25     00          | 	byte	0
32d26                 | LR__5962
32d26     53 79 73 74 
32d2a     65 6D 20 65 
32d2e     72 72 6F 72 
32d32     20          | 	byte	"System error "
32d33     00          | 	byte	0
32d34                 | LR__5963
32d34     3A 20       | 	byte	": "
32d36     00          | 	byte	0
32d37                 | LR__5964
32d37     43 75 72 72 
32d3b     65 6E 74 20 
32d3f     64 69 72 65 
32d43     63 74 6F 72 
32d47     79 3A 20    | 	byte	"Current directory: "
32d4a     00          | 	byte	0
32d4b                 | LR__5965
32d4b     2F          | 	byte	"/"
32d4c     00          | 	byte	0
32d4d                 | LR__5966
32d4d     2F          | 	byte	"/"
32d4e     00          | 	byte	0
32d4f                 | LR__5967
32d4f     2F          | 	byte	"/"
32d50     00          | 	byte	0
32d51                 | LR__5968
32d51     53 79 73 74 
32d55     65 6D 20 65 
32d59     72 72 6F 72 
32d5d     20          | 	byte	"System error "
32d5e     00          | 	byte	0
32d5f                 | LR__5969
32d5f     3A 20       | 	byte	": "
32d61     00          | 	byte	0
32d62                 | LR__5970
32d62     43 75 72 72 
32d66     65 6E 74 20 
32d6a     64 69 72 65 
32d6e     63 74 6F 72 
32d72     79 3A 20    | 	byte	"Current directory: "
32d75     00          | 	byte	0
32d76                 | LR__5971
32d76     63 68 72 24 
32d7a     3A 20       | 	byte	"chr$: "
32d7c     00          | 	byte	0
32d7d                 | LR__5972
32d7d     63 68 61 6E 
32d81     6E 65 6C 23 
32d85     20 65 78 70 
32d89     65 63 74 65 
32d8d     64          | 	byte	"channel# expected"
32d8e     00          | 	byte	0
32d8f                 | LR__5973
32d8f     63 6F 67 69 
32d93     6E 69 74 3A 
32d97     20          | 	byte	"coginit: "
32d98     00          | 	byte	0
32d99                 | LR__5974
32d99     53 79 73 74 
32d9d     65 6D 20 65 
32da1     72 72 6F 72 
32da5     20 2D 20    | 	byte	"System error - "
32da8     00          | 	byte	0
32da9                 | LR__5975
32da9     20 69 6E 20 
32dad     6C 69 6E 65 
32db1     20          | 	byte	" in line "
32db2     00          | 	byte	0
32db3                 | LR__5976
32db3     3A 20       | 	byte	": "
32db5     00          | 	byte	0
32db6                 | LR__5977
32db6     2C 20 66 69 
32dba     6C 65 20 6E 
32dbe     61 6D 65 3A 
32dc2     20          | 	byte	", file name: "
32dc3     00          | 	byte	0
32dc4                 | LR__5978
32dc4     53 79 73 74 
32dc8     65 6D 20 65 
32dcc     72 72 6F 72 
32dd0     20 2D 20    | 	byte	"System error - "
32dd3     00          | 	byte	0
32dd4                 | LR__5979
32dd4     20 69 6E 20 
32dd8     6C 69 6E 65 
32ddc     20          | 	byte	" in line "
32ddd     00          | 	byte	0
32dde                 | LR__5980
32dde     3A 20       | 	byte	": "
32de0     00          | 	byte	0
32de1                 | LR__5981
32de1     2C 20 66 69 
32de5     6C 65 20 6E 
32de9     61 6D 65 3A 
32ded     20          | 	byte	", file name: "
32dee     00          | 	byte	0
32def                 | LR__5982
32def     63 6F 73 3A 
32df3     20          | 	byte	"cos: "
32df4     00          | 	byte	0
32df5                 | LR__5983
32df5                 | 	byte	
32df5     00          | 	byte	0
32df6                 | LR__5984
32df6                 | 	byte	
32df6     00          | 	byte	0
32df7                 | LR__5985
32df7     2F 73 64 2F 
32dfb     6D 65 64 69 
32dff     61 2F 68 2F | 	byte	"/sd/media/h/"
32e03     00          | 	byte	0
32e04                 | LR__5986
32e04     53 79 73 74 
32e08     65 6D 20 65 
32e0c     72 72 6F 72 
32e10     20          | 	byte	"System error "
32e11     00          | 	byte	0
32e12                 | LR__5987
32e12     3A 20       | 	byte	": "
32e14     00          | 	byte	0
32e15                 | LR__5988
32e15                 | 	byte	
32e15     00          | 	byte	0
32e16                 | LR__5989
32e16                 | 	byte	
32e16     00          | 	byte	0
32e17                 | LR__5990
32e17     2F 73 64 2F 
32e1b     6D 65 64 69 
32e1f     61 2F 73 2F | 	byte	"/sd/media/s/"
32e23     00          | 	byte	0
32e24                 | LR__5991
32e24     53 79 73 74 
32e28     65 6D 20 65 
32e2c     72 72 6F 72 
32e30     20          | 	byte	"System error "
32e31     00          | 	byte	0
32e32                 | LR__5992
32e32     3A 20       | 	byte	": "
32e34     00          | 	byte	0
32e35                 | LR__5993
32e35     2F          | 	byte	"/"
32e36     00          | 	byte	0
32e37                 | LR__5994
32e37     2F          | 	byte	"/"
32e38     00          | 	byte	0
32e39                 | LR__5995
32e39     2F          | 	byte	"/"
32e3a     00          | 	byte	0
32e3b                 | LR__5996
32e3b     43 61 6E 6E 
32e3f     6F 74 20 64 
32e43     65 6C 65 74 
32e47     65 20 66 69 
32e4b     6C 65 20 6F 
32e4f     72 20 66 69 
32e53     6C 65 20 64 
32e57     6F 65 73 6E 
32e5b     27 74 20 65 
32e5f     78 69 73 74 
32e63     3A 20 73 79 
32e67     73 74 65 6D 
32e6b     20 65 72 72 
32e6f     6F 72 20    | 	byte	"Cannot delete file or file doesn't exist: system error "
32e72     00          | 	byte	0
32e73                 | LR__5997
32e73     43 75 72 72 
32e77     65 6E 74 20 
32e7b     64 69 72 65 
32e7f     63 74 6F 72 
32e83     79 3A 20    | 	byte	"Current directory: "
32e86     00          | 	byte	0
32e87                 | LR__5998
32e87                 | 	byte	
32e87     00          | 	byte	0
32e88                 | LR__5999
32e88     2A          | 	byte	"*"
32e89     00          | 	byte	0
32e8a                 | LR__6000
32e8a                 | 	byte	
32e8a     00          | 	byte	0
32e8b                 | LR__6001
32e8b     5B 64 69 72 
32e8f     5D 20       | 	byte	"[dir] "
32e91     00          | 	byte	0
32e92                 | LR__6002
32e92     4D 6F 72 65 
32e96     20 74 68 61 
32e9a     6E 20 31 32 
32e9e     38 20 65 6E 
32ea2     74 72 69 65 
32ea6     73 20 66 6F 
32eaa     75 6E 64 3A 
32eae     20 63 6C 65 
32eb2     61 6E 20 79 
32eb6     6F 75 72 20 
32eba     64 69 72 65 
32ebe     63 74 6F 72 
32ec2     79          | 	byte	"More than 128 entries found: clean your directory"
32ec3     00          | 	byte	0
32ec4                 | LR__6003
32ec4     2A          | 	byte	"*"
32ec5     00          | 	byte	0
32ec6                 | LR__6004
32ec6                 | 	byte	
32ec6     00          | 	byte	0
32ec7                 | LR__6005
32ec7     4D 6F 72 65 
32ecb     20 74 68 61 
32ecf     6E 20 31 32 
32ed3     38 20 65 6E 
32ed7     74 72 69 65 
32edb     73 20 66 6F 
32edf     75 6E 64 3A 
32ee3     20 63 6C 65 
32ee7     61 6E 20 79 
32eeb     6F 75 72 20 
32eef     64 69 72 65 
32ef3     63 74 6F 72 
32ef7     79          | 	byte	"More than 128 entries found: clean your directory"
32ef8     00          | 	byte	0
32ef9                 | LR__6006
32ef9     45 72 72 6F 
32efd     72 20       | 	byte	"Error "
32eff     00          | 	byte	0
32f00                 | LR__6007
32f00     3A 20       | 	byte	": "
32f02     00          | 	byte	0
32f03                 | LR__6008
32f03     66 69 6E 64 
32f07     66 69 72 73 
32f0b     74 3A 20    | 	byte	"findfirst: "
32f0e     00          | 	byte	0
32f0f                 | LR__6009
32f0f     66 69 6E 64 
32f13     66 69 72 73 
32f17     74 3A 20    | 	byte	"findfirst: "
32f1a     00          | 	byte	0
32f1b                 | LR__6010
32f1b     66 69 6E 64 
32f1f     66 69 72 73 
32f23     74 3A 20    | 	byte	"findfirst: "
32f26     00          | 	byte	0
32f27                 | LR__6011
32f27                 | 	byte	
32f27     00          | 	byte	0
32f28                 | LR__6012
32f28     66 69 6E 64 
32f2c     66 69 72 73 
32f30     74 3A 20    | 	byte	"findfirst: "
32f33     00          | 	byte	0
32f34                 | LR__6013
32f34                 | 	byte	
32f34     00          | 	byte	0
32f35                 | LR__6014
32f35     64 69 72    | 	byte	"dir"
32f38     00          | 	byte	0
32f39                 | LR__6015
32f39     66 69 6E 64 
32f3d     6E 65 78 74 
32f41     3A 20       | 	byte	"findnext: "
32f43     00          | 	byte	0
32f44                 | LR__6016
32f44     67 65 74 63 
32f48     6F 6C 6F 72 
32f4c     20          | 	byte	"getcolor "
32f4d     00          | 	byte	0
32f4e                 | LR__6017
32f4e     67 65 74 65 
32f52     6E 76 73 75 
32f56     73 74 61 69 
32f5a     6E 3A 20    | 	byte	"getenvsustain: "
32f5d     00          | 	byte	0
32f5e                 | LR__6018
32f5e     67 65 74 70 
32f62     69 78 65 6C 
32f66     3A 20       | 	byte	"getpixel: "
32f68     00          | 	byte	0
32f69                 | LR__6019
32f69     67 65 74 72 
32f6d     65 61 6C 66 
32f71     72 65 71 3A 
32f75     20          | 	byte	"getrealfreq: "
32f76     00          | 	byte	0
32f77                 | LR__6020
32f77     68 65 78 24 
32f7b     3A 20       | 	byte	"hex$: "
32f7d     00          | 	byte	0
32f7e                 | LR__6021
32f7e                 | 	byte	
32f7e     00          | 	byte	0
32f7f                 | LR__6022
32f7f     49 6E 20 69 
32f83     6E 70 75 74 
32f87     3A 20       | 	byte	"In input: "
32f89     00          | 	byte	0
32f8a                 | LR__6023
32f8a     2C          | 	byte	","
32f8b     00          | 	byte	0
32f8c                 | LR__6024
32f8c                 | 	byte	
32f8c     00          | 	byte	0
32f8d                 | LR__6025
32f8d                 | 	byte	
32f8d     00          | 	byte	0
32f8e                 | LR__6026
32f8e     6C 65 66 74 
32f92     24 3A 20    | 	byte	"left$: "
32f95     00          | 	byte	0
32f96                 | LR__6027
32f96     6C 65 66 74 
32f9a     24 3A 20    | 	byte	"left$: "
32f9d     00          | 	byte	0
32f9e                 | LR__6028
32f9e     6C 65 6E 3A 
32fa2     20          | 	byte	"len: "
32fa3     00          | 	byte	0
32fa4                 | LR__6029
32fa4     6C 65 6E 3A 
32fa8     20          | 	byte	"len: "
32fa9     00          | 	byte	0
32faa                 | LR__6030
32faa                 | 	byte	
32faa     00          | 	byte	0
32fab                 | LR__6031
32fab     2F          | 	byte	"/"
32fac     00          | 	byte	0
32fad                 | LR__6032
32fad     2F          | 	byte	"/"
32fae     00          | 	byte	0
32faf                 | LR__6033
32faf     2E 62 61 73 | 	byte	".bas"
32fb3     00          | 	byte	0
32fb4                 | LR__6034
32fb4     53 79 73 74 
32fb8     65 6D 20 65 
32fbc     72 72 6F 72 
32fc0     20          | 	byte	"System error "
32fc1     00          | 	byte	0
32fc2                 | LR__6035
32fc2     3A 20       | 	byte	": "
32fc4     00          | 	byte	0
32fc5                 | LR__6036
32fc5     2E 62 61 73 | 	byte	".bas"
32fc9     00          | 	byte	0
32fca                 | LR__6037
32fca     2F          | 	byte	"/"
32fcb     00          | 	byte	0
32fcc                 | LR__6038
32fcc                 | 	byte	
32fcc     00          | 	byte	0
32fcd                 | LR__6039
32fcd     4C 6F 61 64 
32fd1     65 64 20    | 	byte	"Loaded "
32fd4     00          | 	byte	0
32fd5                 | LR__6040
32fd5     2F          | 	byte	"/"
32fd6     00          | 	byte	0
32fd7                 | LR__6041
32fd7     6C 6F 67 3A 
32fdb     20          | 	byte	"log: "
32fdc     00          | 	byte	0
32fdd                 | LR__6042
32fdd     6D 69 64 24 
32fe1     3A 20       | 	byte	"mid$: "
32fe3     00          | 	byte	0
32fe4                 | LR__6043
32fe4     6D 69 64 24 
32fe8     3A 20       | 	byte	"mid$: "
32fea     00          | 	byte	0
32feb                 | LR__6044
32feb     43 61 6E 6E 
32fef     6F 74 20 63 
32ff3     72 65 61 74 
32ff7     65 20 61 20 
32ffb     64 69 72 65 
32fff     63 74 6F 72 
33003     79 3A 20 73 
33007     79 73 74 65 
3300b     6D 20 65 72 
3300f     72 6F 72 20 | 	byte	"Cannot create a directory: system error "
33013     00          | 	byte	0
33014                 | LR__6045
33014     20 42 41 53 
33018     49 43 20 62 
3301c     79 74 65 73 
33020     20 66 72 65 
33024     65          | 	byte	" BASIC bytes free"
33025     00          | 	byte	0
33026                 | LR__6046
33026                 | 	byte	
33026     00          | 	byte	0
33027                 | LR__6047
33027                 | 	byte	
33027     00          | 	byte	0
33028                 | LR__6048
33028                 | 	byte	
33028     00          | 	byte	0
33029                 | LR__6049
33029     6E 6F 6E 61 
3302d     6D 65 2E 62 
33031     61 73       | 	byte	"noname.bas"
33033     00          | 	byte	0
33034                 | LR__6050
33034     66 69 6C 65 
33038     6E 61 6D 65 
3303c     20 65 78 70 
33040     65 63 74 65 
33044     64          | 	byte	"filename expected"
33045     00          | 	byte	0
33046                 | LR__6051
33046     72 65 61 64 | 	byte	"read"
3304a     00          | 	byte	0
3304b                 | LR__6052
3304b     77 72 69 74 
3304f     65          | 	byte	"write"
33050     00          | 	byte	0
33051                 | LR__6053
33051     61 70 70 65 
33055     6E 64       | 	byte	"append"
33057     00          | 	byte	0
33058                 | LR__6054
33058     63 68 61 6E 
3305c     6E 65 6C 23 
33060     20 65 78 70 
33064     65 63 74 65 
33068     64          | 	byte	"channel# expected"
33069     00          | 	byte	0
3306a                 | LR__6055
3306a     4F 70 65 6E 
3306e     3A 20 69 6E 
33072     76 61 6C 69 
33076     64 20 6D 6F 
3307a     64 65       | 	byte	"Open: invalid mode"
3307c     00          | 	byte	0
3307d                 | LR__6056
3307d     70 61 64 72 
33081     78 3A 20    | 	byte	"padrx: "
33084     00          | 	byte	0
33085                 | LR__6057
33085     70 61 64 72 
33089     79 3A 20    | 	byte	"padry: "
3308c     00          | 	byte	0
3308d                 | LR__6058
3308d     70 61 64 72 
33091     7A 3A 20    | 	byte	"padrz: "
33094     00          | 	byte	0
33095                 | LR__6059
33095     70 61 64 73 
33099     3A 20       | 	byte	"pads: "
3309b     00          | 	byte	0
3309c                 | LR__6060
3309c     70 61 64 77 
330a0     3A 20       | 	byte	"padw: "
330a2     00          | 	byte	0
330a3                 | LR__6061
330a3     70 61 64 78 
330a7     3A 20       | 	byte	"padx: "
330a9     00          | 	byte	0
330aa                 | LR__6062
330aa     70 61 64 79 
330ae     3A 20       | 	byte	"pady: "
330b0     00          | 	byte	0
330b1                 | LR__6063
330b1     70 61 64 7A 
330b5     3A 20       | 	byte	"padz: "
330b7     00          | 	byte	0
330b8                 | LR__6064
330b8     50 72 69 6E 
330bc     74 20 74 6F 
330c0     20 63 68 61 
330c4     6E 6E 65 6C 
330c8     20 28 6E 6F 
330cc     74 20 79 65 
330d0     74 20 69 6D 
330d4     70 6C 65 6D 
330d8     65 6E 74 65 
330dc     64 29       | 	byte	"Print to channel (not yet implemented)"
330de     00          | 	byte	0
330df                 | LR__6065
330df                 | 	byte	
330df     00          | 	byte	0
330e0                 | LR__6066
330e0     64 61 74 61 | 	byte	"data"
330e4     00          | 	byte	0
330e5                 | LR__6067
330e5                 | 	byte	
330e5     00          | 	byte	0
330e6                 | LR__6068
330e6     49 6E 20 72 
330ea     65 61 64 3A 
330ee     20          | 	byte	"In read: "
330ef     00          | 	byte	0
330f0                 | LR__6069
330f0                 | 	byte	
330f0     00          | 	byte	0
330f1                 | LR__6070
330f1                 | 	byte	
330f1     00          | 	byte	0
330f2                 | LR__6071
330f2     27          | 	byte	"'"
330f3     00          | 	byte	0
330f4                 | LR__6072
330f4     2C          | 	byte	","
330f5     00          | 	byte	0
330f6                 | LR__6073
330f6                 | 	byte	
330f6     00          | 	byte	0
330f7                 | LR__6074
330f7                 | 	byte	
330f7     00          | 	byte	0
330f8                 | LR__6075
330f8                 | 	byte	
330f8     00          | 	byte	0
330f9                 | LR__6076
330f9                 | 	byte	
330f9     00          | 	byte	0
330fa                 | LR__6077
330fa                 | 	byte	
330fa     00          | 	byte	0
330fb                 | LR__6078
330fb     72 69 67 68 
330ff     74 24 3A 20 | 	byte	"right$: "
33103     00          | 	byte	0
33104                 | LR__6079
33104     72 69 67 68 
33108     74 24 3A 20 | 	byte	"right$: "
3310c     00          | 	byte	0
3310d                 | LR__6080
3310d     72 6E 64 3A 
33111     20          | 	byte	"rnd: "
33112     00          | 	byte	0
33113                 | LR__6081
33113     72 6E 64 3A 
33117     20          | 	byte	"rnd: "
33118     00          | 	byte	0
33119                 | LR__6082
33119                 | 	byte	
33119     00          | 	byte	0
3311a                 | LR__6083
3311a     53 74 6F 70 
3311e     70 65 64 20 
33122     61 74 20 6C 
33126     69 6E 65 20 | 	byte	"Stopped at line "
3312a     00          | 	byte	0
3312b                 | LR__6084
3312b                 | 	byte	
3312b     00          | 	byte	0
3312c                 | LR__6085
3312c     2F          | 	byte	"/"
3312d     00          | 	byte	0
3312e                 | LR__6086
3312e                 | 	byte	
3312e     00          | 	byte	0
3312f                 | LR__6087
3312f     53 61 76 65 
33133     64 20 61 73 
33137     20          | 	byte	"Saved as "
33138     00          | 	byte	0
33139                 | LR__6088
33139     2F          | 	byte	"/"
3313a     00          | 	byte	0
3313b                 | LR__6089
3313b     73 65 74 63 
3313f     6F 6C 6F 72 
33143     3A 20       | 	byte	"setcolor: "
33145     00          | 	byte	0
33146                 | LR__6090
33146     73 69 6E 3A 
3314a     20          | 	byte	"sin: "
3314b     00          | 	byte	0
3314c                 | LR__6091
3314c     73 71 72 3A 
33150     20          | 	byte	"sqr: "
33151     00          | 	byte	0
33152                 | LR__6092
33152     73 74 69 63 
33156     6B 3A 20    | 	byte	"stick: "
33159     00          | 	byte	0
3315a                 | LR__6093
3315a     73 74 72 24 
3315e     3A 20       | 	byte	"str$: "
33160     00          | 	byte	0
33161                 | LR__6094
33161     73 74 72 69 
33165     67 3A 20    | 	byte	"strig: "
33168     00          | 	byte	0
33169                 | LR__6095
33169     74 61 6E 3A 
3316d     20          | 	byte	"tan: "
3316e     00          | 	byte	0
3316f                 | LR__6096
3316f     76 61 6C 3A 
33173     20          | 	byte	"val: "
33174     00          | 	byte	0
33175                 | LR__6097
33175     76 61 6C 3A 
33179     20          | 	byte	"val: "
3317a     00          | 	byte	0
3317b                 | LR__6098
3317b     24          | 	byte	"$"
3317c     00          | 	byte	0
3317d                 | LR__6099
3317d     26 68       | 	byte	"&h"
3317f     00          | 	byte	0
33180                 | LR__6100
33180     25          | 	byte	"%"
33181     00          | 	byte	0
33182                 | LR__6101
33182     26 62       | 	byte	"&b"
33184     00          | 	byte	0
33185                 | LR__6102
33185                 | 	byte	
33185     00          | 	byte	0
33186                 | LR__6103
33186     45 78 70 65 
3318a     63 74 65 64 
3318e     20 6E 75 6D 
33192     62 65 72 2C 
33196     20 67 6F 74 
3319a     20 73 6F 6D 
3319e     65 74 68 69 
331a2     6E 67 20 65 
331a6     6C 73 65    | 	byte	"Expected number, got something else"
331a9     00          | 	byte	0
331aa                 | LR__6104
331aa     43 61 6E 6E 
331ae     6F 74 20 61 
331b2     64 64 20 61 
331b6     20 6E 75 6D 
331ba     62 65 72 20 
331be     74 6F 20 61 
331c2     20 73 74 72 
331c6     69 6E 67    | 	byte	"Cannot add a number to a string"
331c9     00          | 	byte	0
331ca                 | LR__6105
331ca     43 61 6E 6E 
331ce     6F 74 20 73 
331d2     75 62 73 74 
331d6     72 61 63 74 
331da     20 73 74 72 
331de     69 6E 67 73 | 	byte	"Cannot substract strings"
331e2     00          | 	byte	0
331e3                 | LR__6106
331e3     55 6E 6B 6E 
331e7     6F 77 6E 20 
331eb     65 72 72 6F 
331ef     72 20 77 68 
331f3     69 6C 65 20 
331f7     61 64 64 69 
331fb     6E 67       | 	byte	"Unknown error while adding"
331fd     00          | 	byte	0
331fe                 | LR__6107
331fe     55 6E 6B 6E 
33202     6F 77 6E 20 
33206     65 72 72 6F 
3320a     72 20 77 68 
3320e     69 6C 65 20 
33212     73 75 62 73 
33216     74 72 61 63 
3321a     74 69 6E 67 | 	byte	"Unknown error while substracting"
3321e     00          | 	byte	0
3321f                 | LR__6108
3321f     43 61 6E 6E 
33223     6F 74 20 64 
33227     6F 20 6C 6F 
3322b     67 69 63 20 
3322f     6F 70 65 72 
33233     61 74 69 6F 
33237     6E 20 6F 6E 
3323b     20 73 74 72 
3323f     69 6E 67 20 
33243     6F 72 20 66 
33247     6C 6F 61 74 | 	byte	"Cannot do logic operation on string or float"
3324b     00          | 	byte	0
3324c                 | LR__6109
3324c     55 6E 6B 6E 
33250     6F 77 6E 20 
33254     65 72 72 6F 
33258     72 20 77 68 
3325c     69 6C 65 20 
33260     64 6F 69 6E 
33264     67 20 6C 6F 
33268     67 69 63 20 
3326c     6F 70 65 72 
33270     61 74 69 6F 
33274     6E          | 	byte	"Unknown error while doing logic operation"
33275     00          | 	byte	0
33276                 | LR__6110
33276     43 61 6E 6E 
3327a     6F 74 20 6D 
3327e     75 6C 74 69 
33282     70 6C 79 20 
33286     73 74 72 69 
3328a     6E 67 73    | 	byte	"Cannot multiply strings"
3328d     00          | 	byte	0
3328e                 | LR__6111
3328e     55 6E 6B 6E 
33292     6F 77 6E 20 
33296     65 72 72 6F 
3329a     72 20 77 68 
3329e     69 6C 65 20 
332a2     6D 75 6C 74 
332a6     69 70 6C 79 
332aa     69 6E 67    | 	byte	"Unknown error while multiplying"
332ad     00          | 	byte	0
332ae                 | LR__6112
332ae     43 61 6E 6E 
332b2     6F 74 20 64 
332b6     69 76 69 64 
332ba     65 20 73 74 
332be     72 69 6E 67 
332c2     73          | 	byte	"Cannot divide strings"
332c3     00          | 	byte	0
332c4                 | LR__6113
332c4     55 6E 6B 6E 
332c8     6F 77 6E 20 
332cc     65 72 72 6F 
332d0     72 20 77 68 
332d4     69 6C 65 20 
332d8     64 69 76 69 
332dc     64 69 6E 67 | 	byte	"Unknown error while dividing"
332e0     00          | 	byte	0
332e1                 | LR__6114
332e1     43 61 6E 6E 
332e5     6F 74 20 63 
332e9     6F 6D 70 75 
332ed     74 65 20 61 
332f1     20 70 6F 77 
332f5     65 72 20 6F 
332f9     66 20 61 20 
332fd     73 74 72 69 
33301     6E 67       | 	byte	"Cannot compute a power of a string"
33303     00          | 	byte	0
33304                 | LR__6115
33304     55 6E 6B 6E 
33308     6F 77 6E 20 
3330c     65 72 72 6F 
33310     72 20 77 68 
33314     69 6C 65 20 
33318     63 6F 6D 70 
3331c     75 74 69 6E 
33320     67 20 61 20 
33324     70 6F 77 65 
33328     72          | 	byte	"Unknown error while computing a power"
33329     00          | 	byte	0
3332a                 | LR__6116
3332a     52 69 67 68 
3332e     74 20 70 61 
33332     72 65 6E 74 
33336     68 65 73 69 
3333a     73 20 65 78 
3333e     70 65 63 74 
33342     65 64       | 	byte	"Right parenthesis expected"
33344     00          | 	byte	0
33345                 | LR__6117
33345     45 78 70 65 
33349     63 74 65 64 
3334d     20 73 74 72 
33351     69 6E 67    | 	byte	"Expected string"
33354     00          | 	byte	0
33355                 | LR__6118
33355     45 78 70 65 
33359     63 74 65 64 
3335d     20 66 6C 6F 
33361     61 74       | 	byte	"Expected float"
33363     00          | 	byte	0
33364                 | LR__6119
33364     45 78 70 65 
33368     63 74 65 64 
3336c     20 75 6E 73 
33370     69 67 6E 65 
33374     64 20 69 6E 
33378     74 65 67 65 
3337c     72          | 	byte	"Expected unsigned integer"
3337d     00          | 	byte	0
3337e                 | LR__6120
3337e     45 78 70 65 
33382     63 74 65 64 
33386     20 69 6E 74 
3338a     65 67 65 72 | 	byte	"Expected integer"
3338e     00          | 	byte	0
3338f                 | LR__6121
3338f     4E 6F 20 6D 
33393     6F 72 65 20 
33397     76 61 72 69 
3339b     61 62 6C 65 
3339f     20 73 6C 6F 
333a3     74 73       | 	byte	"No more variable slots"
333a5     00          | 	byte	0
333a6                 | LR__6122
333a6     56 61 72 69 
333aa     61 62 6C 65 
333ae     20 6E 6F 74 
333b2     20 66 6F 75 
333b6     6E 64       | 	byte	"Variable not found"
333b8     00          | 	byte	0
333b9                 | LR__6123
333b9     43 6F 6D 6D 
333bd     61 20 65 78 
333c1     70 65 63 74 
333c5     65 64       | 	byte	"Comma expected"
333c7     00          | 	byte	0
333c8                 | LR__6124
333c8     43 6F 6D 6D 
333cc     61 20 6F 72 
333d0     20 73 65 6D 
333d4     69 63 6F 6C 
333d8     6F 6E 20 65 
333dc     78 70 65 63 
333e0     74 65 64    | 	byte	"Comma or semicolon expected"
333e3     00          | 	byte	0
333e4                 | LR__6125
333e4     55 6E 6B 6E 
333e8     6F 77 6E 20 
333ec     63 6F 6D 6D 
333f0     61 6E 64    | 	byte	"Unknown command"
333f3     00          | 	byte	0
333f4                 | LR__6126
333f4     53 74 61 63 
333f8     6B 20 75 6E 
333fc     64 65 72 66 
33400     6C 6F 77    | 	byte	"Stack underflow"
33403     00          | 	byte	0
33404                 | LR__6127
33404     43 61 6E 6E 
33408     6F 74 20 65 
3340c     78 65 63 75 
33410     74 65 20 67 
33414     6F 74 6F 20 
33418     6F 72 20 67 
3341c     6F 73 75 62 
33420     20 69 6E 20 
33424     74 68 65 20 
33428     69 6D 6D 65 
3342c     64 69 61 74 
33430     65 20 6D 6F 
33434     64 65       | 	byte	"Cannot execute goto or gosub in the immediate mode"
33436     00          | 	byte	0
33437                 | LR__6128
33437     43 61 6E 6E 
3343b     6F 74 20 6C 
3343f     6F 61 64 20 
33443     66 72 6F 6D 
33447     20 74 68 69 
3344b     73 20 66 69 
3344f     6C 65       | 	byte	"Cannot load from this file"
33451     00          | 	byte	0
33452                 | LR__6129
33452     54 68 65 20 
33456     70 72 6F 67 
3345a     72 61 6D 20 
3345e     69 73 20 65 
33462     6D 70 74 79 | 	byte	"The program is empty"
33466     00          | 	byte	0
33467                 | LR__6130
33467     49 66 20 61 
3346b     66 74 65 72 
3346f     20 69 66    | 	byte	"If after if"
33472     00          | 	byte	0
33473                 | LR__6131
33473     45 6D 70 74 
33477     79 20 65 78 
3347b     70 72 65 73 
3347f     73 69 6F 6E | 	byte	"Empty expression"
33483     00          | 	byte	0
33484                 | LR__6132
33484     53 74 72 69 
33488     6E 67 20 65 
3348c     78 70 65 63 
33490     74 65 64    | 	byte	"String expected"
33493     00          | 	byte	0
33494                 | LR__6133
33494     49 6E 74 65 
33498     72 70 72 65 
3349c     74 65 72 20 
334a0     69 6E 74 65 
334a4     72 6E 61 6C 
334a8     20 65 72 72 
334ac     6F 72       | 	byte	"Interpreter internal error"
334ae     00          | 	byte	0
334af                 | LR__6134
334af     45 78 70 65 
334b3     63 74 65 64 
334b7     20 61 73 73 
334bb     69 67 6E    | 	byte	"Expected assign"
334be     00          | 	byte	0
334bf                 | LR__6135
334bf     45 78 70 65 
334c3     63 74 65 64 
334c7     20 27 74 6F 
334cb     27          | 	byte	"Expected 'to'"
334cc     00          | 	byte	0
334cd                 | LR__6136
334cd     45 78 70 65 
334d1     63 74 65 64 
334d5     20 69 6E 74 
334d9     65 67 65 72 
334dd     20 76 61 72 
334e1     69 61 62 6C 
334e5     65          | 	byte	"Expected integer variable"
334e6     00          | 	byte	0
334e7                 | LR__6137
334e7     55 6E 69 6E 
334eb     69 74 69 61 
334ef     6C 69 7A 65 
334f3     64 20 76 61 
334f7     72 69 61 62 
334fb     6C 65 20 69 
334ff     6E 20 27 6E 
33503     65 78 74 27 
33507     2C 20 75 73 
3350b     65 20 27 66 
3350f     6F 72 27 20 
33513     62 65 66 6F 
33517     72 65       | 	byte	"Uninitialized variable in 'next', use 'for' before"
33519     00          | 	byte	0
3351a                 | LR__6138
3351a     4E 6F 20 6D 
3351e     6F 72 65 20 
33522     73 6C 6F 74 
33526     73 20 66 6F 
3352a     72 20 27 66 
3352e     6F 72 27    | 	byte	"No more slots for 'for'"
33531     00          | 	byte	0
33532                 | LR__6139
33532     27 4E 65 78 
33536     74 27 20 64 
3353a     6F 65 73 6E 
3353e     27 74 20 6D 
33542     61 74 63 68 
33546     20 27 66 6F 
3354a     72 27       | 	byte	"'Next' doesn't match 'for'"
3354c     00          | 	byte	0
3354d                 | LR__6140
3354d     27 47 6F 74 
33551     6F 27 20 74 
33555     61 72 67 65 
33559     74 20 6C 69 
3355d     6E 65 20 6E 
33561     6F 74 20 66 
33565     6F 75 6E 64 | 	byte	"'Goto' target line not found"
33569     00          | 	byte	0
3356a                 | LR__6141
3356a     42 61 64 20 
3356e     6E 75 6D 62 
33572     65 72 20 6F 
33576     66 20 70 61 
3357a     72 61 6D 65 
3357e     74 65 72 73 | 	byte	"Bad number of parameters"
33582     00          | 	byte	0
33583                 | LR__6142
33583     46 75 6E 63 
33587     74 69 6F 6E 
3358b     20 75 6E 64 
3358f     65 66 69 6E 
33593     65 64 20 66 
33597     6F 72 20 73 
3359b     74 72 69 6E 
3359f     67 73       | 	byte	"Function undefined for strings"
335a1     00          | 	byte	0
335a2                 | LR__6143
335a2     42 61 64 20 
335a6     70 61 72 61 
335aa     6D 65 74 65 
335ae     72          | 	byte	"Bad parameter"
335af     00          | 	byte	0
335b0                 | LR__6144
335b0     43 61 6E 6E 
335b4     6F 74 20 64 
335b8     65 63 6C 61 
335bc     72 65 20 61 
335c0     6E 20 61 72 
335c4     72 61 79 3A 
335c8     20 74 68 65 
335cc     20 76 61 72 
335d0     69 61 62 6C 
335d4     65 20 65 78 
335d8     69 73 74 73 | 	byte	"Cannot declare an array: the variable exists"
335dc     00          | 	byte	0
335dd                 | LR__6145
335dd     45 78 70 65 
335e1     63 74 65 64 
335e5     20 27 28 27 | 	byte	"Expected '('"
335e9     00          | 	byte	0
335ea                 | LR__6146
335ea     45 78 70 65 
335ee     63 74 65 64 
335f2     20 27 29 27 
335f6     20 6F 72 20 
335fa     27 2C 27    | 	byte	"Expected ')' or ','"
335fd     00          | 	byte	0
335fe                 | LR__6147
335fe     4E 6F 20 6D 
33602     6F 72 65 20 
33606     74 68 61 6E 
3360a     20 33 20 64 
3360e     69 6D 65 6E 
33612     73 69 6F 6E 
33616     73 20 73 75 
3361a     70 70 6F 72 
3361e     74 65 64    | 	byte	"No more than 3 dimensions supported"
33621     00          | 	byte	0
33622                 | LR__6148
33622     56 61 72 69 
33626     61 62 6C 65 
3362a     20 6E 61 6D 
3362e     65 20 65 78 
33632     70 65 63 74 
33636     65 64       | 	byte	"Variable name expected"
33638     00          | 	byte	0
33639                 | LR__6149
33639     54 79 70 65 
3363d     20 6E 61 6D 
33641     65 20 65 78 
33645     70 65 63 74 
33649     65 64       | 	byte	"Type name expected"
3364b     00          | 	byte	0
3364c                 | LR__6150
3364c     54 79 70 65 
33650     20 6E 6F 74 
33654     20 73 75 70 
33658     70 6F 72 74 
3365c     65 64 20 79 
33660     65 74       | 	byte	"Type not supported yet"
33662     00          | 	byte	0
33663                 | LR__6151
33663     41 72 72 61 
33667     79 20 69 6E 
3366b     64 65 78 20 
3366f     6F 75 74 20 
33673     6F 66 20 72 
33677     61 6E 67 65 | 	byte	"Array index out of range"
3367b     00          | 	byte	0
3367c                 | LR__6152
3367c     42 61 64 20 
33680     74 79 70 65 
33684     20 77 68 69 
33688     6C 65 20 61 
3368c     73 73 69 67 
33690     6E 69 6E 67 
33694     20 74 6F 20 
33698     61 72 72 61 
3369c     79          | 	byte	"Bad type while assigning to array"
3369d     00          | 	byte	0
3369e                 | LR__6153
3369e     54 6F 6F 20 
336a2     6D 61 6E 79 
336a6     20 76 61 72 
336aa     69 61 62 6C 
336ae     65 73       | 	byte	"Too many variables"
336b0     00          | 	byte	0
336b1                 | LR__6154
336b1     27 54 68 65 
336b5     6E 27 20 65 
336b9     78 70 65 63 
336bd     74 65 64    | 	byte	"'Then' expected"
336c0     00          | 	byte	0
336c1                 | LR__6155
336c1     44 69 72 65 
336c5     63 74 6F 72 
336c9     79 20 64 6F 
336cd     65 73 6E 27 
336d1     74 20 65 78 
336d5     69 73 74    | 	byte	"Directory doesn't exist"
336d8     00          | 	byte	0
336d9                 | LR__6156
336d9     55 6E 65 78 
336dd     70 65 63 74 
336e1     65 64 20 65 
336e5     6E 64 20 6F 
336e9     66 20 6C 69 
336ed     6E 65       | 	byte	"Unexpected end of line"
336ef     00          | 	byte	0
336f0                 | LR__6157
336f0     4E 6F 20 6D 
336f4     6F 72 65 20 
336f8     64 61 74 61 | 	byte	"No more data"
336fc     00          | 	byte	0
336fd                 | LR__6158
336fd     45 72 72 6F 
33701     72 20       | 	byte	"Error "
33703     00          | 	byte	0
33704                 | LR__6159
33704     20 2D 20    | 	byte	" - "
33707     00          | 	byte	0
33708                 | LR__6160
33708     20 69 6E 20 
3370c     6C 69 6E 65 
33710     20          | 	byte	" in line "
33711     00          | 	byte	0
33712                 | LR__6161
33712                 | 	byte	
33712     00          | 	byte	0
33713                 | LR__6162
33713     2F 73 64    | 	byte	"/sd"
33716     00          | 	byte	0
33717                 | LR__6163
33717     2F 73 64 2F 
3371b     62 61 73    | 	byte	"/sd/bas"
3371e     00          | 	byte	0
3371f                 | LR__6164
3371f     2F 73 64 2F 
33723     62 61 73    | 	byte	"/sd/bas"
33726     00          | 	byte	0
33727                 | LR__6165
33727     20 42 41 53 
3372b     49 43 20 62 
3372f     79 74 65 73 
33733     20 66 72 65 
33737     65          | 	byte	" BASIC bytes free"
33738     00          | 	byte	0
33739                 | LR__6166
33739     52 65 61 64 
3373d     79          | 	byte	"Ready"
3373e     00          | 	byte	0
3373f                 | LR__6167
3373f     6E 6F 6E 61 
33743     6D 65 2E 62 
33747     61 73       | 	byte	"noname.bas"
33749     00          | 	byte	0
3374a                 | LR__6168
3374a     2F 73 64 2F 
3374e     62 61 73 2F 
33752     61 75 74 6F 
33756     72 75 6E 2E 
3375a     62 61 73    | 	byte	"/sd/bas/autorun.bas"
3375d     00          | 	byte	0
3375e                 | LR__6169
3375e     72 75 6E 20 
33762     61 75 74 6F 
33766     72 75 6E 2E 
3376a     62 61 73    | 	byte	"run autorun.bas"
3376d     00          | 	byte	0
3376e                 | LR__6170
3376e                 | 	byte	
3376e     00          | 	byte	0
3376f     00          | 	alignl
33770                 | _dat_
33770     00 00 00 00 
33774     00 00 00 00 
33778     00 00 00 00 
3377c     00 00 00 00 | 	byte	$00[16]
33780     61 41 17 0E 
33784     62 42 00 00 
33788     63 43 19 10 
3378c     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
33790     65 45 18 0F 
33794     66 46 00 00 
33798     67 47 00 00 
3379c     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
337a0     69 49 00 00 
337a4     6A 4A 00 00 
337a8     6B 4B 00 00 
337ac     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
337b0     6D 4D 00 00 
337b4     6E 4E 1A 11 
337b8     6F 4F 1E 15 
337bc     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
337c0     71 51 00 00 
337c4     72 52 00 00 
337c8     73 53 1B 12 
337cc     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
337d0     75 55 00 00 
337d4     76 56 00 00 
337d8     77 57 00 00 
337dc     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
337e0     79 59 00 00 
337e4     7A 5A 1D 14 
337e8     31 21 04 00 
337ec     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
337f0     33 23 06 00 
337f4     34 24 07 00 
337f8     35 25 08 00 
337fc     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
33800     37 26 0A 00 
33804     38 2A 0B 00 
33808     39 28 0C 00 
3380c     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
33810     8D 8D 00 00 
33814     9B 9B 00 00 
33818     88 88 00 00 
3381c     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
33820     20 20 00 00 
33824     2D 5F 00 00 
33828     3D 2B 00 00 
3382c     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
33830     5D 7D 00 00 
33834     5C 7C 00 00 
33838     23 7E 00 00 
3383c     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
33840     27 22 00 00 
33844     60 7E 03 00 
33848     2C 3C 00 00 
3384c     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
33850     2F 3F 00 00 
33854     B9 B9 00 00 
33858     BA 00 00 00 
3385c     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
33860     BC 00 00 00 
33864     BD 00 00 00 
33868     BE 00 00 00 
3386c     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
33870     C0 00 00 00 
33874     C1 00 00 00 
33878     C2 00 00 00 
3387c     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
33880     C4 00 00 00 
33884     C5 00 00 00 
33888     C6 00 00 00 
3388c     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
33890     C8 00 00 00 
33894     C9 00 00 00 
33898     CA 00 00 00 
3389c     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
338a0     7F 7F 00 00 
338a4     CC 00 00 00 
338a8     CD 00 00 00 
338ac     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
338b0     CF 00 00 00 
338b4     D0 00 00 00 
338b8     D1 00 00 00 
338bc     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
338c0     2F 2F 00 00 
338c4     2A 2A 00 00 
338c8     2D 2D 00 00 
338cc     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
338d0     8D 8D 00 00 
338d4     31 31 00 00 
338d8     32 32 00 00 
338dc     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
338e0     34 34 00 00 
338e4     35 35 00 00 
338e8     36 36 00 00 
338ec     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
338f0     38 38 00 00 
338f4     39 39 00 00 
338f8     30 30 00 00 
338fc     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
33900     5C 7C 00 00 
33904     00 00 00 00 
33908     00 00 00 00 
3390c     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
33910     00 00 00 00 
      ...             
33968     00 00 00 00 
3396c     00 00 00 00 | 	byte	$00[96]
33970     2B 00 A6 F2 
33974     24 A7 09 80 
33978     5B 88 4D 89 
3397c     80 88 A5 88 | atari_spl file "atari.spl"
33980     6D 88 B8 88 
33984     80 88 CB 88 
33988     92 88 A5 88 
3398c     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
33990     A5 88 CA 88 
33994     A6 88 DD 88 
33998     B8 88 AB 89 
3399c     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
339a0     C8 AD C6 F1 
339a4     91 06 B6 FF 
339a8     13 00 4A 00 
339ac     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
339b0     5D 00 5E 00 
339b4     5D 00 5E 00 
339b8     5E 00 5D 00 
339bc     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
339c0     38 00 83 00 
339c4     25 00 83 00 
339c8     C3 FE D1 04 
339cc     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
339d0     48 88 38 85 
339d4     41 8A CB 88 
339d8     28 89 B8 88 
339dc     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
339e0     15 89 03 89 
339e4     02 89 15 89 
339e8     16 89 15 89 
339ec     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
339f0     15 89 3A 89 
339f4     72 89 E3 89 
339f8     52 83 AD 97 
339fc     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
33a00     0C 02 B6 FF 
33a04     E1 00 A8 00 
33a08     F3 00 A8 00 
33a0c     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
33a10     CE 00 CD 00 
33a14     CD 00 BA 00 
33a18     E1 00 BB 00 
33a1c     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
33a20     DF 00 C9 FF 
33a24     E6 01 B6 06 
33a28     EE DD 8D 98 
33a2c     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
33a30     97 89 73 89 
33a34     3B 89 60 89 
33a38     60 89 60 89 
33a3c     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
33a40     73 89 72 89 
33a44     85 89 73 89 
33a48     AA 89 60 89 
33a4c     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
33a50     E8 8A 18 86 
33a54     92 88 A5 C2 
33a58     E0 00 C3 05 
33a5c     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
33a60     F2 00 64 01 
33a64     06 01 3E 01 
33a68     2B 01 2B 01 
33a6c     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
33a70     2B 01 2A 01 
33a74     2B 01 2B 01 
33a78     2B 01 18 01 
33a7c     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
33a80     39 07 61 F3 
33a84     C0 AF 37 85 
33a88     0F 88 8B 8A 
33a8c     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
33a90     AB 89 D0 89 
33a94     AB 89 D0 89 
33a98     D0 89 CF 89 
33a9c     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
33aa0     D0 89 F5 89 
33aa4     BD 89 08 8A 
33aa8     CF 89 E8 8A 
33aac     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
33ab0     53 B3 0D F8 
33ab4     F4 07 38 00 
33ab8     63 01 63 01 
33abc     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
33ac0     88 01 88 01 
33ac4     76 01 88 01 
33ac8     88 01 89 01 
33acc     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
33ad0     75 01 AE 01 
33ad4     76 01 88 01 
33ad8     4A 00 46 06 
33adc     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
33ae0     08 8A 9A 86 
33ae4     33 8B 08 8A 
33ae8     2D 8A F5 89 
33aec     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
33af0     2D 8A 2D 8A 
33af4     2E 8A 1B 8A 
33af8     40 8A 2D 8A 
33afc     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
33b00     2E 8A 79 8A 
33b04     66 8A C8 8B 
33b08     72 82 2B 97 
33b0c     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
33b10     1D 02 05 01 
33b14     F8 01 C0 01 
33b18     0B 02 C0 01 
33b1c     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
33b20     F9 01 D3 01 
33b24     F8 01 D3 01 
33b28     F8 01 D2 01 
33b2c     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
33b30     E6 01 2B 01 
33b34     8E 02 5F 07 
33b38     F7 E2 ED 9C 
33b3c     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
33b40     E8 8A 78 8A 
33b44     78 8A 65 8A 
33b48     8B 8A 78 8A 
33b4c     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
33b50     8B 8A 9D 8A 
33b54     9D 8A 8B 8A 
33b58     C2 8A 78 8A 
33b5c     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
33b60     70 8C 18 86 
33b64     8B 8A 23 C9 
33b68     CB 03 C4 05 
33b6c     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
33b70     0B 02 7B 02 
33b74     1E 02 55 02 
33b78     30 02 43 02 
33b7c     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
33b80     43 02 44 02 
33b84     43 02 30 02 
33b88     68 02 31 02 
33b8c     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
33b90     07 08 3F F7 
33b94     73 B2 13 85 
33b98     15 89 ED 8B 
33b9c     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
33ba0     B0 8A FB 8A 
33ba4     D5 8A FA 8A 
33ba8     E8 8A FB 8A 
33bac     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
33bb0     E8 8A 21 8B 
33bb4     E7 8A 33 8B 
33bb8     E8 8A 26 8C 
33bbc     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
33bc0     8D B0 27 F6 
33bc4     9C 08 AD 01 
33bc8     7B 02 8D 02 
33bcc     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
33bd0     A1 02 A0 02 
33bd4     A1 02 A0 02 
33bd8     A0 02 A0 02 
33bdc     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
33be0     7B 02 D8 02 
33be4     7B 02 C6 02 
33be8     3E 01 C3 05 
33bec     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
33bf0     00 8C 2A 86 
33bf4     E0 8C FA 8A 
33bf8     6A 8B FB 8A 
33bfc     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
33c00     45 8B 45 8B 
33c04     45 8B 6B 8B 
33c08     46 8B 59 8B 
33c0c     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
33c10     6B 8B 6B 8B 
33c14     6B 8B 6B 8B 
33c18     7D 8B 7D 8B 
33c1c     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
33c20     90 8B 91 8B 
33c24     90 8B 90 8B 
33c28     A3 8B A3 8B 
33c2c     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
33c30     B5 8B B6 8B 
33c34     B5 8B B5 8B 
33c38     B6 8B C8 8B 
33c3c     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
33c40     C8 8B DA 8B 
33c44     DB 8B DB 8B 
33c48     DB 8B DC 8B 
33c4c     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
33c50     EE 8B EE 8B 
33c54     00 8C 01 8C 
33c58     00 8C 01 8C 
33c5c     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
33c60     12 8C 13 8C 
33c64     13 8C 26 8C 
33c68     26 8C 26 8C 
33c6c     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
33c70     38 8C 38 8C 
33c74     38 8C 38 8C 
33c78     4B 8C 4B 8C 
33c7c     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
33c80     5E 8C 5E 8C 
33c84     5E 8C 5E 8C 
33c88     70 8C 70 8C 
33c8c     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
33c90     70 8C 83 8C 
33c94     83 8C 83 8C 
33c98     83 8C 96 8C 
33c9c     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
33ca0     95 8C A9 8C 
33ca4     A9 8C A8 8C 
33ca8     A8 8C A8 8C 
33cac     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
33cb0     BB 8C BB 8C 
33cb4     BB 8C CE 8C 
33cb8     CE 8C CE 8C 
33cbc     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
33cc0     E0 8C E1 8C 
33cc4     E1 8C E0 8C 
33cc8     F4 8C F2 8C 
33ccc     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
33cd0     05 8D 05 8D 
33cd4     06 8D 06 8D 
33cd8     19 8D 19 8D 
33cdc     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
33ce0     18 8D 2B 8D 
33ce4     2B 8D 2B 8D 
33ce8     2A 8D 3E 8D 
33cec     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
33cf0     3E 8D 51 8D 
33cf4     50 8D 50 8D 
33cf8     50 8D 51 8D 
33cfc     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
33d00     63 8D 64 8D 
33d04     76 8D 75 8D 
33d08     75 8D 76 8D 
33d0c     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
33d10     88 8D 88 8D 
33d14     89 8D 9B 8D 
33d18     9A 8D 9B 8D 
33d1c     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
33d20     AD 8D AE 8D 
33d24     AD 8D AE 8D 
33d28     C1 8D C1 8D 
33d2c     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
33d30     D3 8D D3 8D 
33d34     D3 8D D3 8D 
33d38     D3 8D E6 8D 
33d3c     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
33d40     E6 8D E6 8D 
33d44     F9 8D F9 8D 
33d48     F9 8D F8 8D 
33d4c     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
33d50     0B 8E 0B 8E 
33d54     1D 8E 1D 8E 
33d58     1E 8E 1E 8E 
33d5c     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
33d60     31 8E 31 8E 
33d64     31 8E 42 8E 
33d68     43 8E 43 8E 
33d6c     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
33d70     56 8E 56 8E 
33d74     55 8E 56 8E 
33d78     68 8E 69 8E 
33d7c     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
33d80     69 8E 7B 8E 
33d84     7C 8E 7B 8E 
33d88     7B 8E 8D 8E 
33d8c     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
33d90     8D 8E A1 8E 
33d94     A0 8E A1 8E 
33d98     A1 8E A0 8E 
33d9c     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
33da0     B3 8E B3 8E 
33da4     C6 8E C5 8E 
33da8     C6 8E C6 8E 
33dac     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
33db0     D8 8E D9 8E 
33db4     D8 8E EC 8E 
33db8     EB 8E EC 8E 
33dbc     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
33dc0     FE 8E FE 8E 
33dc4     FE 8E FE 8E 
33dc8     10 8F 10 8F 
33dcc     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
33dd0     11 8F 23 8F 
33dd4     24 8F 23 8F 
33dd8     24 8F 37 8F 
33ddc     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
33de0     36 8F 36 8F 
33de4     48 8F 49 8F 
33de8     49 8F 49 8F 
33dec     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
33df0     5B 8F 5C 8F 
33df4     5B 8F 6E 8F 
33df8     6E 8F 6E 8F 
33dfc     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
33e00     81 8F 81 8F 
33e04     81 8F 81 8F 
33e08     93 8F 93 8F 
33e0c     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
33e10     93 8F A6 8F 
33e14     A6 8F A6 8F 
33e18     A6 8F B9 8F 
33e1c     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
33e20     B9 8F B9 8F 
33e24     CC 8F CB 8F 
33e28     CB 8F CC 8F 
33e2c     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
33e30     DF 8F DE 8F 
33e34     DE 8F F1 8F 
33e38     F1 8F F1 8F 
33e3c     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
33e40     03 90 04 90 
33e44     04 90 04 90 
33e48     16 90 17 90 
33e4c     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
33e50     29 90 28 90 
33e54     29 90 28 90 
33e58     29 90 3C 90 
33e5c     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
33e60     3C 90 4F 90 
33e64     4E 90 4E 90 
33e68     4E 90 4E 90 
33e6c     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
33e70     61 90 61 90 
33e74     73 90 74 90 
33e78     74 90 74 90 
33e7c     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
33e80     87 90 86 90 
33e84     87 90 86 90 
33e88     99 90 99 90 
33e8c     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
33e90     AB 90 AB 90 
33e94     AC 90 AB 90 
33e98     AB 90 BF 90 
33e9c     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
33ea0     BE 90 D1 90 
33ea4     D0 90 D1 90 
33ea8     D1 90 D1 90 
33eac     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
33eb0     E3 90 E4 90 
33eb4     F6 90 F6 90 
33eb8     F6 90 F6 90 
33ebc     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
33ec0     09 91 0A 91 
33ec4     0A 91 1C 91 
33ec8     1C 91 1C 91 
33ecc     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
33ed0     2F 91 2E 91 
33ed4     2F 91 2F 91 
33ed8     2E 91 41 91 
33edc     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
33ee0     41 91 53 91 
33ee4     54 91 54 91 
33ee8     53 91 54 91 
33eec     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
33ef0     67 91 67 91 
33ef4     79 91 7A 91 
33ef8     79 91 78 91 
33efc     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
33f00     8C 91 8B 91 
33f04     8C 91 8C 91 
33f08     9E 91 9E 91 
33f0c     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
33f10     B1 91 B1 91 
33f14     B2 91 B1 91 
33f18     B1 91 C4 91 
33f1c     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
33f20     C4 91 D6 91 
33f24     D7 91 D7 91 
33f28     D7 91 D6 91 
33f2c     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
33f30     EA 91 EA 91 
33f34     EA 91 FC 91 
33f38     FC 91 FB 91 
33f3c     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
33f40     0E 92 0F 92 
33f44     0F 92 0E 92 
33f48     21 92 21 92 
33f4c     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
33f50     21 92 34 92 
33f54     33 92 34 92 
33f58     34 92 47 92 
33f5c     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
33f60     46 92 47 92 
33f64     59 92 59 92 
33f68     59 92 59 92 
33f6c     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
33f70     6C 92 6C 92 
33f74     6B 92 7E 92 
33f78     7E 92 7E 92 
33f7c     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
33f80     92 92 91 92 
33f84     91 92 90 92 
33f88     91 92 A4 92 
33f8c     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
33f90     A3 92 B6 92 
33f94     B6 92 B7 92 
33f98     B7 92 B6 92 
33f9c     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
33fa0     CA 92 C9 92 
33fa4     CA 92 DC 92 
33fa8     DC 92 DC 92 
33fac     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
33fb0     EF 92 EF 92 
33fb4     EF 92 EF 92 
33fb8     01 93 01 93 
33fbc     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
33fc0     15 93 14 93 
33fc4     14 93 14 93 
33fc8     14 93 27 93 
33fcc     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
33fd0     27 93 39 93 
33fd4     3A 93 39 93 
33fd8     39 93 39 93 
33fdc     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
33fe0     4B 93 4C 93 
33fe4     5F 93 5F 93 
33fe8     5F 93 5E 93 
33fec     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
33ff0     5F 93 84 93 
33ff4     4C 93 96 93 
33ff8     5F 93 AE 94 
33ffc     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
34000     7B C1 00 00 
34004     00 00 00 00 
34008     00 00 00 00 
3400c     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34010     00 00 00 00 | 	byte	$00, $00, $00, $00
34014     7A D7 00 80 
34018     87 8A 48 8F 
3401c     EC 8C 76 8D 
34020     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
34024     3C 8D 82 8D 
34028     42 8D 88 8D 
3402c     8C 8D 8E 8D 
34030     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
34034     97 8D DE 8D 
34038     E1 8D F1 8E 
3403c     D8 8C A3 83 
34040     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
34044     65 71 C9 65 
34048     FC 64 C4 65 
3404c     C1 65 BF 65 
34050     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
34054     B6 65 B4 65 
34058     B2 65 AE 65 
3405c     AC 65 ED 65 
34060     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
34064     5E 65 25 66 
34068     FA 62 23 6B 
3406c     B5 6C 61 0A 
34070     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
34074     5D 90 BE 8D 
34078     47 8E C3 8D 
3407c     09 8E C9 8D 
34080     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
34084     15 8E 19 8E 
34088     1B 8E 62 8E 
3408c     64 8E 68 8E 
34090     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
34094     B5 8E 4C 90 
34098     FA 84 3C 9D 
3409c     98 13 79 6D 
340a0     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
340a4     D9 66 50 66 
340a8     D4 66 4B 66 
340ac     8C 66 46 66 
340b0     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
340b4     81 66 3A 66 
340b8     7C 66 36 66 
340bc     76 66 30 66 
340c0     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
340c4     6B 66 88 72 
340c8     BF 37 E7 B7 
340cc     75 83 8B 8E 
340d0     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
340d4     94 8E 96 8E 
340d8     DD 8E 9C 8E 
340dc     E2 8E A2 8E 
340e0     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
340e4     EE 8E AE 8E 
340e8     38 8F B5 8E 
340ec     3F 8F FD 8E 
340f0     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
340f4     A5 87 1E E3 
340f8     6D 5D FA 71 
340fc     41 64 25 67 
34100     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
34104     D9 66 1A 67 
34108     18 67 15 67 
3410c     12 67 0F 67 
34110     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
34114     07 67 C0 66 
34118     01 67 BC 66 
3411c     B8 66 DE 64 
34120     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
34124     43 E5 1F 8B 
34128     14 8A F1 90 
3412c     1C 8F 63 8F 
34130     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
34134     29 8F 6E 8F 
34138     72 8F 75 8F 
3413c     34 8F BE 8F 
34140     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
34144     84 8F 87 8F 
34148     CC 8F 56 90 
3414c     67 91 49 80 
34150     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
34154     46 77 A6 66 
34158     E8 66 B0 67 
3415c     AD 67 ED 67 
34160     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
34164     A2 67 E3 67 
34168     9D 67 9A 67 
3416c     98 67 94 67 
34170     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
34174     49 67 CD 67 
34178     28 65 5F 6E 
3417c     82 67 3A 01 
34180     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
34184     C2 91 A9 8F 
34188     EF 8F AE 8F 
3418c     F4 8F B5 8F 
34190     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
34194     01 90 03 90 
34198     07 90 09 90 
3419c     0C 90 53 90 
341a0     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
341a4     18 90 44 93 
341a8     85 84 D6 9D 
341ac     87 1F 2F 75 
341b0     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
341b4     C4 68 F6 67 
341b8     BE 68 F1 67 
341bc     76 68 2E 68 
341c0     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
341c4     27 68 24 68 
341c8     64 68 1E 68 
341cc     5F 68 19 68 
341d0     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
341d4     DC 68 56 72 
341d8     7E 36 C2 B8 
341dc     D7 84 73 90 
341e0     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
341e4     7B 90 7F 90 
341e8     82 90 84 90 
341ec     CB 90 8B 90 
341f0     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
341f4     D7 90 96 90 
341f8     20 91 59 90 
341fc     25 91 A2 90 
34200     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
34204     D0 89 40 EE 
34208     12 64 C4 71 
3420c     29 66 0C 69 
34210     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
34214     C0 68 02 69 
34218     FE 68 FB 68 
3421c     F9 68 F6 68 
34220     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
34224     EE 68 A8 68 
34228     2C 69 5F 68 
3422c     E2 68 81 66 
34230     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
34234     1E EB A6 8A 
34238     73 8B 5E 93 
3423c     7B 90 48 91 
34240     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
34244     0D 91 11 91 
34248     14 91 16 91 
3424c     5C 91 1C 91 
34250     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
34254     68 91 AF 91 
34258     2A 91 B5 91 
3425c     75 91 1A 94 
34260     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
34264     70 0E CB 6C 
34268     5D 6E C4 67 
3426c     99 69 54 69 
34270     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
34274     D2 69 49 69 
34278     89 69 86 69 
3427c     40 69 C4 69 
34280     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
34284     35 69 76 69 
34288     58 67 EB 6D 
3428c     E9 6D 89 0F 
34290     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
34294     33 94 94 91 
34298     D9 91 56 91 
3429c     E0 91 9F 91 
342a0     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
342a4     EC 91 EE 91 
342a8     F1 91 F4 91 
342ac     F7 91 3D 92 
342b0     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
342b4     46 92 21 94 
342b8     11 89 A4 9D 
342bc     FD 0E 8F 6C 
342c0     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
342c4     28 6A E1 69 
342c8     65 6A 1F 6A 
342cc     5F 6A 1A 6A 
342d0     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
342d4     54 6A 0F 6A 
342d8     4F 6A 09 6A 
342dc     06 6A 03 6A 
342e0     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
342e4     23 68 69 77 
342e8     3A 4D 38 CA 
342ec     38 86 4E 91 
342f0     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
342f4     64 92 24 92 
342f8     6A 92 2A 92 
342fc     70 92 30 92 
34300     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
34304     7B 92 7E 92 
34308     C5 92 84 92 
3430c     CB 92 8A 92 
34310     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
34314     4D 8D F9 E2 
34318     97 59 FE 74 
3431c     DB 68 6D 6A 
34320     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
34324     A8 6A A5 6A 
34328     A3 6A 9F 6A 
3432c     9D 6A 9B 6A 
34330     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
34334     D6 6A 8F 6A 
34338     CF 6A 46 6A 
3433c     CA 6A E1 67 
34340     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
34344     D3 F7 15 92 
34348     90 8C BF 94 
3434c     A6 92 EB 92 
34350     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
34354     B1 92 F7 92 
34358     FA 92 FD 92 
3435c     00 93 02 93 
34360     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
34364     4F 93 52 93 
34368     54 93 22 94 
3436c     5A 93 8F 88 
34370     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
34374     1C 77 07 6C 
34378     E8 69 7A 6B 
3437c     34 6B 75 6B 
34380     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
34384     29 6B 26 6B 
34388     24 6B 21 6B 
3438c     1D 6B 5E 6B 
34390     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
34394     12 6B 52 6B 
34398     34 69 34 6E 
3439c     BA 73 A4 24 
343a0     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
343a4     7A 94 B3 93 
343a8     72 93 31 93 
343ac     78 93 7A 93 
343b0     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
343b4     83 93 86 93 
343b8     89 93 D0 93 
343bc     D2 93 D5 93 
343c0     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
343c4     DD 93 40 96 
343c8     30 8B 99 9C 
343cc     52 10 94 71 
343d0     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
343d4     46 6C 79 6B 
343d8     40 6C B7 6B 
343dc     F7 6B B1 6B 
343e0     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
343e4     EC 6B A5 6B 
343e8     A2 6B 9F 6B 
343ec     9D 6B 9A 6B 
343f0     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
343f4     C8 6A E4 76 
343f8     20 4B F9 CE 
343fc     2E 8A 1A 92 
34400     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
34404     FB 93 BA 93 
34408     01 94 03 94 
3440c     4A 94 09 94 
34410     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
34414     55 94 14 94 
34418     9E 94 1A 94 
3441c     61 94 20 94 
34420     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
34424     3E 87 E5 CD 
34428     5F 50 6C 78 
3442c     B5 6A 04 6C 
34430     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
34434     83 6C 7F 6C 
34438     7C 6C 36 6C 
3443c     76 6C 74 6C 
34440     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
34444     6B 6C 25 6C 
34448     66 6C 1F 6C 
3444c     1D 6C 41 6A 
34450     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
34454     BA FA FC 94 
34458     5B 8D 97 96 
3445c     3B 94 C5 94 
34460     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
34464     89 94 8C 94 
34468     8F 94 92 94 
3446c     94 94 DB 94 
34470     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
34474     E4 94 E7 94 
34478     2D 95 74 95 
3447c     C8 96 15 89 
34480     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
34484     CB 75 31 6F 
34488     7E 6B 10 6D 
3448c     C9 6C 0A 6D 
34490     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
34494     BD 6C FF 6C 
34498     FB 6C F9 6C 
3449c     B2 6C F3 6C 
344a0     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
344a4     A7 6C E8 6C 
344a8     0D 6B 85 6F 
344ac     C7 74 10 28 
344b0     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
344b4     96 96 47 95 
344b8     06 95 0A 95 
344bc     0C 95 0F 95 
344c0     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
344c4     17 95 5E 95 
344c8     61 95 63 95 
344cc     22 95 AC 95 
344d0     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
344d4     72 95 17 98 
344d8     59 8E 01 96 
344dc     CF FC 5A 68 
344e0     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
344e4     96 6D 50 6D 
344e8     D5 6D 4A 6D 
344ec     8C 6D 89 6D 
344f0     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
344f4     80 6D 3A 6D 
344f8     7A 6D 77 6D 
344fc     75 6D 71 6D 
34500     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
34504     18 6C BC 78 
34508     9A 4F 7E CF 
3450c     1F 89 F1 93 
34510     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
34514     D2 95 4E 95 
34518     D7 95 53 95 
3451c     DD 95 E0 95 
34520     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
34524     A5 95 EB 95 
34528     EE 95 F0 95 
3452c     37 96 B3 95 
34530     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
34534     1A 98 D5 8D 
34538     C5 9F CD 0F 
3453c     0F 71 F3 73 
34540     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
34544     D9 6D 5E 6E 
34548     D3 6D 58 6E 
3454c     12 6E 0F 6E 
34550     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
34554     49 6E BF 6D 
34558     87 6E 76 6D 
3455c     81 6E 11 6B 
34560     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
34564     3F 09 44 95 
34568     E5 8D 3F 99 
3456c     D4 95 A2 96 
34570     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
34574     23 96 69 96 
34578     6B 96 6E 96 
3457c     71 96 74 96 
34580     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
34584     BF 96 3C 96 
34588     C6 96 C8 96 
3458c     A3 98 51 8D 
34590     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
34594     CF 75 29 73 
34598     90 6C EC 6E 
3459c     62 6E E7 6E 
345a0     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
345a4     9A 6E 98 6E 
345a8     95 6E 91 6E 
345ac     8E 6E CF 6E 
345b0     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
345b4     40 6E C3 6E 
345b8     E8 6C 45 6F 
345bc     A5 7B C9 35 
345c0     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
345c4     2D 98 23 97 
345c8     E1 96 A0 96 
345cc     A4 96 EA 96 
345d0     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
345d4     AF 96 F4 96 
345d8     F8 96 3E 97 
345dc     FD 96 43 97 
345e0     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
345e4     08 97 6B 99 
345e8     D6 92 88 91 
345ec     D8 EE 84 66 
345f0     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
345f4     2E 6F E7 6E 
345f8     6C 6F 24 6F 
345fc     21 6F 1F 6F 
34600     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
34604     17 6F 13 6F 
34608     54 6F 0E 6F 
3460c     0B 6F 4B 6F 
34610     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
34614     27 6D 1C 7B 
34618     19 59 9F DB 
3461c     66 8E BC 94 
34620     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
34624     67 97 26 97 
34628     6D 97 2B 97 
3462c     72 97 32 97 
34630     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
34634     C1 97 7F 97 
34638     C6 97 85 97 
3463c     CB 97 CE 97 
34640     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
34644     EC 8A C4 C6 
34648     68 4C F4 7D 
3464c     63 6E E8 6E 
34650     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
34654     ED 6F A7 6F 
34658     E7 6F A0 6F 
3465c     E1 6F 9B 6F 
34660     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
34664     D5 6F 8F 6F 
34668     CE 6F 45 6F 
3466c     86 6F 68 6D 
34670     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
34674     C0 13 AD A2 
34678     A7 8E 79 99 
3467c     E6 97 E8 97 
34680     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
34684     F1 97 F3 97 
34688     F6 97 F9 97 
3468c     FB 97 FE 97 
34690     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
34694     4A 98 0A 98 
34698     93 98 0F 98 
3469c     7F 9B BF 8C 
346a0     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
346a4     91 7B 62 73 
346a8     1A 6E B9 70 
346ac     EB 6F B3 70 
346b0     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
346b4     25 70 20 70 
346b8     1E 70 1B 70 
346bc     18 70 15 70 
346c0     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
346c4     0D 70 09 70 
346c8     07 70 03 70 
346cc     01 70 FD 6F 
346d0     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
346d4     F6 6F F2 6F 
346d8     EF 6F EC 6F 
346dc     2C 70 E6 6F 
346e0     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
346e4     DD 6F 97 6F 
346e8     D7 6F 84 6E 
346ec     8F 6F 3F 7D 
346f0     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
346f2     FF FF FF FF 
346f6     FF FF       | atarist_spl file "atarist.spl" '512
346f8     00 00 00 00 
346fc     00 00 00 00 
34700     00 00       | 	byte	$00[10]
34702     17 7F F2 7F 
34706     B2 7F 72 7F 
3470a     33 7F F4 7E 
3470e     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
34712     36 7E F5 7D 
34716     E9 51 F2 0D 
3471a     8E 00 F3 FD 
3471e     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
34722     57 FD 58 FD 
34726     5B FD 5C FD 
3472a     5C FD 60 7D 
3472e     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
34732     D6 7C 98 7C 
34736     59 7C 1A 7C 
3473a     DC 7B 9E 7B 
3473e     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
34742     F3 05 00 FD 
34746     41 FB EA FA 
3474a     D9 FA DB FA 
3474e     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
34752     E4 FA 9B 36 
34756     F8 7A C0 7A 
3475a     84 7A 45 7A 
3475e     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
34762     8E 79 51 79 
34766     15 79 D7 78 
3476a     3C 1F EB FF 
3476e     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
34772     6D F8 65 F8 
34776     68 F8 6D F8 
3477a     70 F8 74 F8 
3477e     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
34782     AB 60 79 60 
34786     4B 60 1A 60 
3478a     E9 5F B9 5F 
3478e     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
34792     FB 59 B2 0B 
34796     92 FA 3A F7 
3479a     96 F6 79 F6 
3479e     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
347a2     82 F6 86 F6 
347a6     8C F6 DB 5D 
347aa     F1 5E C1 5E 
347ae     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
347b2     34 5E 04 5E 
347b6     D6 5D A6 5D 
347ba     78 5D D4 3E 
347be     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
347c2     27 F5 BA F4 
347c6     AB F4 AD F4 
347ca     B2 F4 B8 F4 
347ce     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
347d2     26 5D 2B 5D 
347d6     FC 5C CD 5C 
347da     9F 5C 70 5C 
347de     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
347e2     E5 5B B8 5B 
347e6     DB 24 A7 FC 
347ea     D1 F4 4D F3 
347ee     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
347f2     04 F3 0B F3 
347f6     11 F3 16 F3 
347fa     DE 18 98 5B 
347fe     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
34802     4E 4A 29 48 
34806     A0 47 6A 47 
3480a     43 47 20 47 
3480e     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
34812     E2 F6 98 F2 
34816     C5 F1 A3 F1 
3481a     A3 F1 A8 F1 
3481e     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
34822     BF F1 00 3D 
34826     EF 46 CD 46 
3482a     AA 46 86 46 
3482e     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
34832     1C 46 F9 45 
34836     D7 45 EE 43 
3483a     DE 02 E8 F3 
3483e     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
34842     61 F0 65 F0 
34846     6D F0 74 F0 
3484a     7C F0 84 F0 
3484e     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
34852     8E 45 6D 45 
34856     49 45 27 45 
3485a     05 45 E1 44 
3485e     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
34862     F1 2F A9 FB 
34866     8B F1 9B EF 
3486a     40 EF 36 EF 
3486e     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
34872     4D EF 56 EF 
34876     5E EF 7B 44 
3487a     8C 44 69 44 
3487e     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
34882     03 44 E1 43 
34886     C0 43 F5 37 
3488a     69 33 0F 11 
3488e     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
34892     66 EE 37 EE 
34896     38 EE 40 EE 
3489a     48 EE 51 EE 
3489e     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
348a2     7D 32 6A 32 
348a6     51 32 37 32 
348aa     1F 32 05 32 
348ae     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
348b2     B9 31 A1 31 
348b6     F1 04 F4 F1 
348ba     50 EE A0 ED 
348be     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
348c2     93 ED 9A ED 
348c6     A4 ED AD ED 
348ca     F4 27 C1 31 
348ce     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
348d2     78 31 5F 31 
348d6     46 31 2E 31 
348da     15 31 FC 30 
348de     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
348e2     C4 EF 4A ED 
348e6     DC EC CB EC 
348ea     D2 EC DA EC 
348ee     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
348f2     F9 EC 64 2F 
348f6     0A 31 F1 30 
348fa     D9 30 C0 30 
348fe     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
34902     78 30 5F 30 
34906     46 30 38 23 
3490a     A6 F6 19 EE 
3490e     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
34912     20 EC 28 EC 
34916     32 EC 3C EC 
3491a     47 EC 51 EC 
3491e     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
34922     A3 22 93 22 
34926     7F 22 6E 22 
3492a     5D 22 4C 22 
3492e     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
34932     77 09 76 F1 
34936     CC EC F0 EB 
3493a     CD EB CE EB 
3493e     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
34942     ED EB F5 EB 
34946     3E F6 6B 22 
3494a     5F 22 4E 22 
3494e     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
34952     1B 22 0B 22 
34956     FA 21 E9 21 
3495a     D8 21 4D FF 
3495e     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
34962     92 EB 7B EB 
34966     82 EB 8C EB 
3496a     97 EB A1 EB 
3496e     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
34972     15 22 04 22 
34976     F3 21 E3 21 
3497a     D2 21 C0 21 
3497e     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
34982     8E 21 7D 21 
34986     9A F8 A4 ED 
3498a     8E EB 2F EB 
3498e     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
34992     37 EB 42 EB 
34996     4C EB 57 EB 
3499a     B2 17 22 19 
3499e     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
349a2     FD 18 EF 18 
349a6     E3 18 D6 18 
349aa     CA 18 BD 18 
349ae     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
349b2     60 EC 35 EB 
349b6     01 EB 01 EB 
349ba     0C EB 16 EB 
349be     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
349c2     34 EB D0 18 
349c6     00 19 F4 18 
349ca     E8 18 DA 18 
349ce     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
349d2     B6 18 A9 18 
349d6     9D 18 91 05 
349da     F0 EF CA EB 
349de     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
349e2     E8 EA F2 EA 
349e6     FE EA 07 EB 
349ea     12 EB C2 EF 
349ee     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
349f2     D9 18 CD 18 
349f6     C0 18 B3 18 
349fa     A7 18 9B 18 
349fe     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
34a02     B8 FC 30 EE 
34a06     61 EB DC EA 
34a0a     CD EA D2 EA 
34a0e     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
34a12     F3 EA FE EA 
34a16     D2 09 D1 18 
34a1a     C3 18 17 18 
34a1e     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
34a22     66 11 52 11 
34a26     49 11 41 11 
34a2a     38 11 E0 F4 
34a2e     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
34a32     C9 EA C5 EA 
34a36     CF EA DB EA 
34a3a     E6 EA EF EA 
34a3e     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
34a42     89 11 80 11 
34a46     78 11 6E 11 
34a4a     67 11 5D 11 
34a4e     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
34a52     43 11 32 0D 
34a56     9C F1 07 EC 
34a5a     F8 EA CD EA 
34a5e     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
34a62     E4 EA ED EA 
34a66     F8 EA 02 EB 
34a6a     55 11 91 11 
34a6e     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
34a72     75 11 6E 11 
34a76     64 11 5E 11 
34a7a     54 11 4A 11 
34a7e     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
34a82     A8 EB F1 EA 
34a86     D9 EA DC EA 
34a8a     E8 EA F1 EA 
34a8e     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
34a92     A6 EB 9E 11 
34a96     A0 11 96 11 
34a9a     8D 11 85 11 
34a9e     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
34aa2     6A 11 CA 0D 
34aa6     36 0B 57 F8 
34aaa     6C ED 57 EB 
34aae     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
34ab2     F4 EA FF EA 
34ab6     09 EB 15 EB 
34aba     1E EB 1A FD 
34abe     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
34ac2     ED 0A E8 0A 
34ac6     E2 0A DC 0A 
34aca     D6 0A D1 0A 
34ace     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
34ad2     F8 F3 BC EC 
34ad6     57 EB 1E EB 
34ada     18 EB 24 EB 
34ade     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
34ae2     42 EB 4D EB 
34ae6     08 09 20 0B 
34aea     1A 0B 14 0B 
34aee     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
34af2     04 0B FE 0A 
34af6     F9 0A F2 0A 
34afa     84 08 3A F1 
34afe     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
34b02     42 EB 42 EB 
34b06     4E EB 57 EB 
34b0a     62 EB 6B EB 
34b0e     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
34b12     48 0B 43 0B 
34b16     3C 0B 36 0B 
34b1a     31 0B 2C 0B 
34b1e     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
34b22     1B 0B 5C 00 
34b26     6A EF 1B EC 
34b2a     81 EB 6A EB 
34b2e     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
34b32     85 EB 8E EB 
34b36     99 EB A3 EB 
34b3a     DD 05 E5 05 
34b3e     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
34b42     DB 05 D8 05 
34b46     D5 05 D1 05 
34b4a     D0 05 CB 05 
34b4e     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
34b52     0C EC BB EB 
34b56     B3 EB BB EB 
34b5a     C5 EB D0 EB 
34b5e     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
34b62     E4 F7 2C 06 
34b66     28 06 24 06 
34b6a     22 06 1F 06 
34b6e     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
34b72     16 06 14 06 
34b76     0F 06 D0 F3 
34b7a     65 ED 2D EC 
34b7e     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
34b82     01 EC 0A EC 
34b86     14 EC 1E EC 
34b8a     29 EC FB 03 
34b8e     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
34b92     63 06 60 06 
34b96     5E 06 59 06 
34b9a     58 06 54 06 
34b9e     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
34ba2     69 F1 21 ED 
34ba6     55 EC 33 EC 
34baa     36 EC 40 EC 
34bae     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
34bb2     5C EC 68 EC 
34bb6     92 02 D9 02 
34bba     D7 02 D7 02 
34bbe     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
34bc2     D1 02 D1 02 
34bc6     CE 02 CD 02 
34bca     5D FC 80 EF 
34bce     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
34bd2     83 EC 8A EC 
34bd6     93 EC 9C EC 
34bda     A5 EC B1 EC 
34bde     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
34be2     2B 03 2A 03 
34be6     29 03 26 03 
34bea     25 03 24 03 
34bee     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
34bf2     1F 03 70 F7 
34bf6     D0 EE 27 ED 
34bfa     DB EC D4 EC 
34bfe     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
34c02     F0 EC FA EC 
34c06     02 ED F9 F4 
34c0a     7B 03 7C 03 
34c0e     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
34c12     75 03 73 03 
34c16     72 03 70 03 
34c1a     6D 03 6C 03 
34c1e     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
34c22     54 ED 22 ED 
34c26     22 ED 2C ED 
34c2a     35 ED 3F ED 
34c2e     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
34c32     14 01 C3 03 
34c36     C1 03 C0 03 
34c3a     5F 01 A5 00 
34c3e     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
34c42     7B 00 7C 00 
34c46     20 00 85 F1 
34c4a     2A EE 89 ED 
34c4e     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
34c52     80 ED 87 ED 
34c56     90 ED 9A ED 
34c5a     A3 ED 73 00 
34c5e     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
34c62     D0 00 D0 00 
34c66     D0 00 D0 00 
34c6a     D0 00 CF 00 
34c6e     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
34c72     80 F0 3D EE 
34c76     D5 ED C7 ED 
34c7a     CD ED D6 ED 
34c7e     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
34c82     F2 ED FA ED 
34c86     1D 01 29 01 
34c8a     27 01 27 01 
34c8e     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
34c92     25 01 26 01 
34c96     26 01 23 01 
34c9a     D0 F7 EC EF 
34c9e     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
34ca2     1C EE 24 EE 
34ca6     2D EE 37 EE 
34caa     40 EE 47 EE 
34cae     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
34cb2     7D 01 7B 01 
34cb6     7A 01 7A 01 
34cba     79 01 78 01 
34cbe     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
34cc2     84 FE DE F3 
34cc6     6C EF 93 EE 
34cca     72 EE 72 EE 
34cce     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
34cd2     8B EE 95 EE 
34cd6     9E EE 15 FC 
34cda     67 FE 67 FE 
34cde     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
34ce2     6B FE 6B FE 
34ce6     6D FE 6D FE 
34cea     6D FE 6F FE 
34cee     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
34cf2     DF EE CC EE 
34cf6     CF EE D9 EE 
34cfa     E1 EE EA EE 
34cfe     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
34d02     5A FE C4 FE 
34d06     C3 FE C5 FE 
34d0a     C6 FE C6 FE 
34d0e     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
34d12     C8 FE C7 FE 
34d16     DA FB 85 F1 
34d1a     8D EF 31 EF 
34d1e     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
34d22     34 EF 3E EF 
34d26     46 EF 4F EF 
34d2a     57 EF 0D FF 
34d2e     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
34d32     1F FF 1F FF 
34d36     21 FF 21 FF 
34d3a     21 FF 21 FF 
34d3e     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
34d42     15 F1 BE EF 
34d46     84 EF 7E EF 
34d4a     88 EF 8F EF 
34d4e     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
34d52     A9 EF 06 F2 
34d56     A6 FC AB FC 
34d5a     AD FC AE FC 
34d5e     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
34d62     B2 FC B4 FC 
34d66     B6 FC B7 FC 
34d6a     8B F4 BD F0 
34d6e     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
34d72     E4 EF EE EF 
34d76     F6 EF FD EF 
34d7a     04 F0 0E F0 
34d7e     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
34d82     0B FD 0D FD 
34d86     0F FD 11 FD 
34d8a     11 FD 13 FD 
34d8e     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
34d92     17 FD 64 F3 
34d96     CD F0 52 F0 
34d9a     41 F0 45 F0 
34d9e     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
34da2     5B F0 64 F0 
34da6     6D F0 FB FC 
34daa     65 FD 68 FD 
34dae     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
34db2     6C FD 6D FD 
34db6     6F FD 70 FD 
34dba     72 FD B3 FB 
34dbe     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
34dc2     A4 F0 99 F0 
34dc6     A0 F0 A8 F0 
34dca     AE F0 B9 F0 
34dce     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
34dd2     CB FB DD FB 
34dd6     DE FB E0 FB 
34dda     E3 FB E3 FB 
34dde     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
34de2     E9 FB EC FB 
34de6     62 F7 27 F2 
34dea     2A F1 FF F0 
34dee     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
34df2     0C F1 13 F1 
34df6     1B F1 23 F1 
34dfa     33 F2 3C FC 
34dfe     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
34e02     42 FC 45 FC 
34e06     47 FC 48 FC 
34e0a     4A FC 4C FC 
34e0e     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
34e12     20 F2 77 F1 
34e16     5C F1 5F F1 
34e1a     64 F1 6C F1 
34e1e     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
34e22     83 F1 DC F8 
34e26     9A FC 9A FC 
34e2a     9B FC 9E FC 
34e2e     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
34e32     A3 FC A4 FC 
34e36     A6 FC A9 FC 
34e3a     90 F4 33 F2 
34e3e     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
34e42     BA F1 BF F1 
34e46     C7 F1 CE F1 
34e4a     D6 F1 DC F1 
34e4e     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
34e52     F3 FC F5 FC 
34e56     FE FB 79 FB 
34e5a     62 FB 5F FB 
34e5e     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
34e62     6F FA AF F3 
34e66     53 F2 12 F2 
34e6a     0F F2 15 F2 
34e6e     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
34e72     2A F2 32 F2 
34e76     38 F2 9A FB 
34e7a     AF FB B1 FB 
34e7e     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
34e82     B7 FB B8 FB 
34e86     BA FB BC FB 
34e8a     C1 FB 3B F8 
34e8e     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
34e92     6E F2 6C F2 
34e96     74 F2 7A F2 
34e9a     81 F2 87 F2 
34e9e     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
34ea2     06 FC 09 FC 
34ea6     0C FC 0E FC 
34eaa     0F FC 12 FC 
34eae     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
34eb2     17 FC 1A FC 
34eb6     B2 F6 7B F3 
34eba     DD F2 C5 F2 
34ebe     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
34ec2     D4 F2 DB F2 
34ec6     E0 F2 E8 F2 
34eca     28 F8 60 FC 
34ece     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
34ed2     64 FC 66 FC 
34ed6     68 FC 6A FC 
34eda     6D FC 52 FC 
34ede     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
34ee2     78 F3 24 F3 
34ee6     1A F3 1E F3 
34eea     24 F3 2A F3 
34eee     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
34ef2     3D F3 80 FA 
34ef6     0C FB 0F FB 
34efa     10 FB 14 FB 
34efe     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
34f02     1B FB 1D FB 
34f06     1F FB 92 FA 
34f0a     DE F4 AE F3 
34f0e     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
34f12     79 F3 7E F3 
34f16     84 F3 8C F3 
34f1a     92 F3 97 F3 
34f1e     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
34f22     67 FB 69 FB 
34f26     6B FB 6F FB 
34f2a     71 FB 72 FB 
34f2e     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
34f32     E3 F8 BA F4 
34f36     EE F3 CC F3 
34f3a     CA F3 CF F3 
34f3e     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
34f42     E2 F3 E8 F3 
34f46     ED F3 B7 FB 
34f4a     BC FB BE FB 
34f4e     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
34f52     C4 FB C6 FB 
34f56     C8 FB C9 FB 
34f5a     CC FB 8F F7 
34f5e     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
34f62     1E F4 1E F4 
34f66     24 F4 2A F4 
34f6a     30 F4 38 F4 
34f6e     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
34f72     AD FA B1 FA 
34f76     B4 FA B6 FA 
34f7a     BA FA BB FA 
34f7e     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
34f82     C2 FA C6 FA 
34f86     55 F6 C6 F4 
34f8a     7D F4 72 F4 
34f8e     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
34f92     83 F4 89 F4 
34f96     8F F4 94 F4 
34f9a     66 FA 03 FB 
34f9e     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
34fa2     0A FB 0E FB 
34fa6     10 FB 11 FB 
34faa     16 FB 18 FB 
34fae     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
34fb2     F9 F4 CA F4 
34fb6     C5 F4 CB F4 
34fba     D1 F4 D7 F4 
34fbe     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
34fc2     E8 F4 3F FB 
34fc6     56 FB 58 FB 
34fca     5A FB 5E FB 
34fce     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
34fd2     64 FB 64 FB 
34fd6     69 FB 99 F9 
34fda     E9 F5 33 F5 
34fde     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
34fe2     1D F5 22 F5 
34fe6     27 F5 2E F5 
34fea     32 F5 37 F5 
34fee     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
34ff2     BC FA BC FA 
34ff6     C1 FA C2 FA 
34ffa     C4 FA C8 FA 
34ffe     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
35002     F9 F7 DB F5 
35006     78 F5 69 F5 
3500a     6A F5 70 F5 
3500e     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
35012     7F F5 85 F5 
35016     6E F7 06 FB 
3501a     0A FB 0B FB 
3501e     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
35022     14 FB 15 FB 
35026     18 FB 1B FB 
3502a     1D FB 70 F7 
3502e     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
35032     B6 F5 BB F5 
35036     C0 F5 C6 F5 
3503a     CA F5 CF F5 
3503e     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
35042     54 FB 56 FB 
35046     5A FB 5B FB 
3504a     5E FB 5F FB 
3504e     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
35052     67 FB 52 FB 
35056     29 F7 33 F6 
3505a     06 F6 02 F6 
3505e     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
35062     10 F6 16 F6 
35066     1A F6 1F F6 
3506a     81 FB 9F FB 
3506e     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
35072     51 FB F2 FA 
35076     E3 FA E3 FA 
3507a     E5 FA E9 FA 
3507e     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
35082     64 F6 4D F6 
35086     4D F6 53 F6 
3508a     57 F6 5C F6 
3508e     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
35092     6A F6 19 FB 
35096     1E FB 22 FB 
3509a     23 FB 24 FB 
3509e     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
350a2     2C FB 2E FB 
350a6     32 FB F0 F8 
350aa     01 F7 A5 F6 
350ae     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
350b2     9F F6 A3 F6 
350b6     A6 F6 AC F6 
350ba     B0 F6 EB F7 
350be     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
350c2     68 FB 6C FB 
350c6     6E FB 71 FB 
350ca     72 FB 74 FB 
350ce     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
350d2     71 F8 21 F7 
350d6     E5 F6 DD F6 
350da     E1 F6 E6 F6 
350de     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
350e2     F5 F6 F7 F6 
350e6     F7 FA AB FB 
350ea     AD FB AF FB 
350ee     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
350f2     B6 FB B9 FB 
350f6     BB FB BC FB 
350fa     21 FB 07 F8 
350fe     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
35102     22 F7 26 F7 
35106     2B F7 2E F7 
3510a     34 F7 38 F7 
3510e     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
35112     13 FB 16 FB 
35116     17 FB 1B FB 
3511a     1E FB 20 FB 
3511e     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
35122     26 FB 77 FA 
35126     F3 F7 7C F7 
3512a     67 F7 6A F7 
3512e     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
35132     74 F7 7A F7 
35136     7E F7 82 F7 
3513a     53 FB 5A FB 
3513e     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
35142     5F FB 63 FB 
35146     65 FB 67 FB 
3514a     69 FB 6A FB 
3514e     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
35152     B5 F7 A9 F7 
35156     AD F7 B0 F7 
3515a     B5 F7 B8 F7 
3515e     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
35162     6E F8 99 FB 
35166     9C FB 9D FB 
3516a     9F FB A4 FB 
3516e     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
35172     A9 FB AB FB 
35176     AD FB 46 F9 
3517a     26 F8 F0 F7 
3517e     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
35182     F4 F7 F8 F7 
35186     FB F7 FF F7 
3518a     03 F8 65 FA 
3518e     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
35192     2B FB 2F FB 
35196     30 FB 32 FB 
3519a     34 FB 38 FB 
3519e     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
351a2     E9 F8 4A F8 
351a6     2E F8 2C F8 
351aa     2F F8 36 F8 
351ae     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
351b2     41 F8 44 F8 
351b6     4A FB 67 FB 
351ba     68 FB 6B FB 
351be     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
351c2     73 FB 74 FB 
351c6     78 FB 7A FB 
351ca     14 FB E7 F8 
351ce     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
351d2     6D F8 70 F8 
351d6     73 F8 78 F8 
351da     7C F8 80 F8 
351de     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
351e2     A6 FB A7 FB 
351e6     A9 FB AC FB 
351ea     AF FB B1 FB 
351ee     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
351f2     B7 FB 73 FA 
351f6     F8 F8 B4 F8 
351fa     A9 F8 AB F8 
351fe     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
35202     B4 F8 B8 F8 
35206     BB F8 FA F8 
3520a     64 FB 65 FB 
3520e     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
35212     6D FB 6F FB 
35216     70 FB 74 FB 
3521a     77 FB 77 FB 
3521e     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
35222     E9 F8 E4 F8 
35226     E8 F8 EB F8 
3522a     EE F8 F2 F8 
3522e     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
35232     B5 FA 9F FB 
35236     A1 FB A4 FB 
3523a     A5 FB A9 FB 
3523e     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
35242     AE FB B1 FB 
35246     B2 FB C7 F9 
3524a     39 F9 22 F9 
3524e     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
35252     26 F9 2A F9 
35256     2E F9 32 F9 
3525a     33 F9 BA FB 
3525e     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
35262     DE FB E1 FB 
35266     E2 FB E4 FB 
3526a     E5 FB E7 FB 
3526e     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
35272     C5 F9 67 F9 
35276     57 F9 56 F9 
3527a     5B F9 5F F9 
3527e     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
35282     68 F9 6C F9 
35286     0B FC 11 FC 
3528a     14 FC 15 FC 
3528e     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
35292     B5 FB B5 FB 
35296     B6 FB B8 FB 
3529a     E9 FA C8 F9 
3529e     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
352a2     90 F9 94 F9 
352a6     95 F9 99 F9 
352aa     9D F9 9F F9 
352ae     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
352b2     DE FB DF FB 
352b6     E2 FB E4 FB 
352ba     E6 FB E8 FB 
352be     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
352c2     EF FB AC FA 
352c6     E9 F9 C7 F9 
352ca     C3 F9 C8 F9 
352ce     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
352d2     D0 F9 D4 F9 
352d6     D6 F9 0E FB 
352da     11 FC 13 FC 
352de     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
352e2     19 FC 1B FC 
352e6     1D FC 1E FC 
352ea     21 FC 22 FC 
352ee     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
352f2     F7 F9 F7 F9 
352f6     FB F9 FE F9 
352fa     00 FA 03 FA 
352fe     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
35302     1B FC 45 FC 
35306     46 FC 48 FC 
3530a     4A FC 4B FC 
3530e     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
35312     52 FC 54 FC 
35316     F3 FB 82 FA 
3531a     35 FA 28 FA 
3531e     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
35322     31 FA 32 FA 
35326     37 FA 37 FA 
3532a     3C FA 00 FC 
3532e     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
35332     09 FC 0B FC 
35336     0F FC 12 FC 
3533a     12 FC 15 FC 
3533e     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
35342     8D FA 60 FA 
35346     5B FA 5C FA 
3534a     60 FA 61 FA 
3534e     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
35352     6C FA 6D FA 
35356     37 FC 3A FC 
3535a     3B FC 3D FC 
3535e     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
35362     43 FC 44 FC 
35366     45 FC 47 FC 
3536a     51 FB AB FA 
3536e     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
35372     8E FA 91 FA 
35376     93 FA 95 FA 
3537a     98 FA 9B FA 
3537e     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
35382     68 FC 6A FC 
35386     6C FC 6E FC 
3538a     70 FC 72 FC 
3538e     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
35392     76 FC 3B FB 
35396     D0 FA BB FA 
3539a     B9 FA BD FA 
3539e     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
353a2     C4 FA C6 FA 
353a6     CA FA 13 FC 
353aa     3A FC 3A FC 
353ae     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
353b2     41 FC 43 FC 
353b6     44 FC 47 FC 
353ba     48 FC 3C FC 
353be     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
353c2     E6 FA E8 FA 
353c6     EB FA EE FA 
353ca     F0 FA F2 FA 
353ce     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
353d2     61 FC 66 FC 
353d6     68 FC 6B FC 
353da     6C FC 6E FC 
353de     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
353e2     73 FC 75 FC 
353e6     13 FC 3F FB 
353ea     17 FB 12 FB 
353ee     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
353f2     1A FB 1D FB 
353f6     1F FB 20 FB 
353fa     23 FB 92 FC 
353fe     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
35402     96 FC 97 FC 
35406     9A FC 9C FC 
3540a     9E FC 9F FC 
3540e     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
35412     5A FB 41 FB 
35416     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
3541a     73 32 00 04 
3541e     00 00 10 00 
35422     00 00 00 00 
35426     00 00 00 00 | atari2 file "atari2.s2"
3542a     43 87 43 87 
3542e     43 87 44 87 
35432     43 87 44 87 
35436     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
3543a     43 87 43 87 
3543e     43 87 44 87 
35442     43 87 43 87 
35446     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3544a     44 87 43 87 
3544e     44 87 43 87 
35452     43 87 43 87 
35456     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3545a     43 87 43 87 
3545e     44 87 43 87 
35462     44 87 44 87 
35466     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
3546a     43 87 43 87 
3546e     44 87 43 87 
35472     43 87 42 87 
35476     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
3547a     43 87 43 87 
3547e     43 87 43 87 
35482     44 87 43 87 
35486     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
3548a     44 87 44 87 
3548e     43 87 44 87 
35492     43 87 44 87 
35496     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
3549a     44 87 43 87 
3549e     44 87 44 87 
354a2     43 87 43 87 
354a6     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
354aa     43 87 44 87 
354ae     44 87 43 87 
354b2     43 87 44 87 
354b6     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
354ba     43 87 43 87 
354be     43 87 43 87 
354c2     43 87 43 87 
354c6     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
354ca     42 87 43 87 
354ce     44 87 42 87 
354d2     43 87 43 87 
354d6     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
354da     43 87 44 87 
354de     44 87 43 87 
354e2     43 87 43 87 
354e6     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
354ea     43 87 5C 87 
354ee     EE 86 AC 87 
354f2     4C 7C A3 78 
354f6     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
354fa     BC 78 BB 78 
354fe     BD 78 BC 78 
35502     BB 78 BD 78 
35506     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
3550a     BB 78 BB 78 
3550e     BC 78 BC 78 
35512     BC 78 BB 78 
35516     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3551a     BC 78 BC 78 
3551e     BC 78 BC 78 
35522     BC 78 BC 78 
35526     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3552a     BB 78 BC 78 
3552e     A0 78 4C 7C 
35532     11 7A 29 89 
35536     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
3553a     44 87 43 87 
3553e     44 87 43 87 
35542     43 87 42 87 
35546     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
3554a     43 87 43 87 
3554e     44 87 ED 85 
35552     71 85 52 79 
35556     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
3555a     BC 78 BC 78 
3555e     BC 78 BC 78 
35562     BC 78 BC 78 
35566     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3556a     BC 78 BC 78 
3556e     BC 78 A0 78 
35572     CF 7A B9 81 
35576     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
3557a     44 87 43 87 
3557e     43 87 44 87 
35582     43 87 44 87 
35586     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
3558a     43 87 43 87 
3558e     43 87 43 87 
35592     44 87 43 87 
35596     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
3559a     43 87 43 87 
3559e     44 87 43 87 
355a2     44 87 43 87 
355a6     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
355aa     44 87 43 87 
355ae     43 87 43 87 
355b2     5A 87 39 81 
355b6     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
355ba     A5 78 BC 78 
355be     BB 78 BC 78 
355c2     BB 78 BC 78 
355c6     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
355ca     BC 78 BC 78 
355ce     BC 78 BC 78 
355d2     BC 78 8F 79 
355d6     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
355da     09 85 47 87 
355de     43 87 43 87 
355e2     42 87 42 87 
355e6     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
355ea     43 87 43 87 
355ee     43 87 43 87 
355f2     43 87 44 87 
355f6     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
355fa     43 87 43 87 
355fe     44 87 43 87 
35602     42 87 43 87 
35606     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
3560a     44 87 43 87 
3560e     43 87 43 87 
35612     44 87 44 87 
35616     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
3561a     94 78 55 7A 
3561e     B9 78 BC 78 
35622     BC 78 BC 78 
35626     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3562a     BC 78 BB 78 
3562e     BC 78 BC 78 
35632     BC 78 BC 78 
35636     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3563a     BB 78 BC 78 
3563e     BC 78 BC 78 
35642     BB 78 BC 78 
35646     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3564a     BC 78 BC 78 
3564e     BD 78 BC 78 
35652     BC 78 BB 78 
35656     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
3565a     94 78 B3 84 
3565e     36 84 4A 87 
35662     43 87 43 87 
35666     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
3566a     43 87 44 87 
3566e     43 87 43 87 
35672     43 87 43 87 
35676     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3567a     43 87 44 87 
3567e     43 87 44 87 
35682     43 87 43 87 
35686     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
3568a     43 87 43 87 
3568e     43 87 45 87 
35692     43 87 43 87 
35696     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
3569a     43 87 44 87 
3569e     44 87 44 87 
356a2     43 87 43 87 
356a6     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
356aa     43 87 42 87 
356ae     43 87 43 87 
356b2     44 87 43 87 
356b6     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
356ba     54 87 3C 82 
356be     36 83 52 79 
356c2     C6 78 BC 78 
356c6     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
356ca     BB 78 BB 78 
356ce     BC 78 BC 78 
356d2     BC 78 BC 78 
356d6     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
356da     BD 78 ED 78 
356de     1B 79 F4 83 
356e2     4D 83 4E 87 
356e6     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
356ea     44 87 43 87 
356ee     42 87 44 87 
356f2     43 87 42 87 
356f6     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
356fa     43 87 54 87 
356fe     26 82 B3 84 
35702     D6 77 BB 78 
35706     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
3570a     BC 78 BB 78 
3570e     BB 78 BB 78 
35712     BB 78 BB 78 
35716     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
3571a     BC 78 BC 78 
3571e     26 79 18 75 
35722     36 83 1F 84 
35726     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
3572a     43 87 43 87 
3572e     43 87 43 87 
35732     43 87 44 87 
35736     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3573a     43 87 44 87 
3573e     44 87 43 87 
35742     43 87 43 87 
35746     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
3574a     43 87 43 87 
3574e     43 87 43 87 
35752     44 87 44 87 
35756     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
3575a     44 87 43 87 
3575e     43 87 43 87 
35762     43 87 44 87 
35766     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3576a     44 87 44 87 
3576e     44 87 43 87 
35772     44 87 43 87 
35776     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
3577a     43 87 43 87 
3577e     43 87 44 87 
35782     44 87 43 87 
35786     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
3578a     43 87 43 87 
3578e     43 87 43 87 
35792     43 87 44 87 
35796     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3579a     43 87 44 87 
3579e     43 87 44 87 
357a2     19 87 7D 86 
357a6     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
357aa     B1 78 BC 78 
357ae     BC 78 BC 78 
357b2     BC 78 BC 78 
357b6     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
357ba     BC 78 BC 78 
357be     BD 78 BC 78 
357c2     B7 78 3B 7B 
357c6     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
357ca     96 86 44 87 
357ce     43 87 43 87 
357d2     43 87 43 87 
357d6     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
357da     44 87 44 87 
357de     43 87 44 87 
357e2     43 87 44 87 
357e6     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
357ea     43 87 44 87 
357ee     43 87 44 87 
357f2     43 87 44 87 
357f6     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
357fa     43 87 44 87 
357fe     43 87 43 87 
35802     44 87 43 87 
35806     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
3580a     44 87 44 87 
3580e     43 87 43 87 
35812     43 87 44 87 
35816     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3581a     43 87 43 87 
3581e     43 87 43 87 
35822     44 87 44 87 
35826     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
3582a     36 83 CF 7A 
3582e     AB 78 BB 78 
35832     BC 78 BC 78 
35836     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
3583a     BB 78 BC 78 
3583e     BC 78 BC 78 
35842     BC 78 BC 78 
35846     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3584a     BC 78 BC 78 
3584e     BC 78 BB 78 
35852     BC 78 BC 78 
35856     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3585a     BB 78 BC 78 
3585e     BB 78 BC 78 
35862     BC 78 BD 78 
35866     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
3586a     BC 78 BC 78 
3586e     BC 78 BC 78 
35872     BC 78 BD 78 
35876     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
3587a     BC 78 BB 78 
3587e     BC 78 BB 78 
35882     BB 78 BC 78 
35886     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
3588a     BC 78 BC 78 
3588e     BC 78 BC 78 
35892     BC 78 BB 78 
35896     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
3589a     BC 78 BC 78 
3589e     BC 78 BD 78 
358a2     BB 78 BC 78 
358a6     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
358aa     BC 78 BC 78 
358ae     BC 78 BB 78 
358b2     BC 78 BB 78 
358b6     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
358ba     BB 78 BC 78 
358be     BC 78 BC 78 
358c2     BC 78 BB 78 
358c6     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
358ca     BC 78 BC 78 
358ce     BC 78 BB 78 
358d2     BC 78 BB 78 
358d6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
358da     BC 78 BC 78 
358de     BC 78 BC 78 
358e2     BB 78 BC 78 
358e6     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
358ea     BC 78 9F 78 
358ee     52 79 B3 84 
358f2     2F 86 60 87 
358f6     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
358fa     44 87 43 87 
358fe     43 87 43 87 
35902     43 87 43 87 
35906     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3590a     43 87 43 87 
3590e     43 87 44 87 
35912     43 87 43 87 
35916     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3591a     43 87 43 87 
3591e     43 87 43 87 
35922     43 87 44 87 
35926     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3592a     44 87 44 87 
3592e     5E 87 BC 80 
35932     FB 80 94 78 
35936     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
3593a     BD 78 BC 78 
3593e     BB 78 BC 78 
35942     BB 78 BB 78 
35946     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
3594a     BC 78 BB 78 
3594e     BB 78 6B 79 
35952     D6 77 AC 87 
35956     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
3595a     43 87 44 87 
3595e     43 87 43 87 
35962     44 87 43 87 
35966     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
3596a     43 87 44 87 
3596e     43 87 5C 87 
35972     E7 80 00 80 
35976     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
3597a     BC 78 BD 78 
3597e     BC 78 BC 78 
35982     BC 78 BB 78 
35986     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3598a     BC 78 BC 78 
3598e     BB 78 BC 78 
35992     BB 78 BC 78 
35996     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3599a     BB 78 BC 78 
3599e     BC 78 BC 78 
359a2     BC 78 BC 78 
359a6     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
359aa     BC 78 BC 78 
359ae     BC 78 BC 78 
359b2     A0 78 8D 7B 
359b6     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
359ba     60 87 43 87 
359be     44 87 44 87 
359c2     43 87 43 87 
359c6     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
359ca     44 87 43 87 
359ce     43 87 43 87 
359d2     44 87 73 86 
359d6     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
359da     51 7B B6 78 
359de     BC 78 BD 78 
359e2     BC 78 BC 78 
359e6     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
359ea     BB 78 BC 78 
359ee     BD 78 BB 78 
359f2     BC 78 BB 78 
359f6     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
359fa     BC 78 BC 78 
359fe     BC 78 BC 78 
35a02     BB 78 BC 78 
35a06     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
35a0a     BC 78 BB 78 
35a0e     BB 78 BC 78 
35a12     BC 78 BB 78 
35a16     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
35a1a     22 8C AF 84 
35a1e     48 87 43 87 
35a22     44 87 43 87 
35a26     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
35a2a     43 87 42 87 
35a2e     43 87 43 87 
35a32     44 87 43 87 
35a36     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
35a3a     43 87 43 87 
35a3e     44 87 44 87 
35a42     43 87 43 87 
35a46     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
35a4a     43 87 43 87 
35a4e     43 87 43 87 
35a52     44 87 43 87 
35a56     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
35a5a     9F 8B D6 77 
35a5e     16 7C B3 78 
35a62     BC 78 BB 78 
35a66     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
35a6a     BB 78 BC 78 
35a6e     BB 78 BC 78 
35a72     BC 78 BC 78 
35a76     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
35a7a     BC 78 BB 78 
35a7e     BB 78 BC 78 
35a82     BB 78 BC 78 
35a86     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
35a8a     BB 78 BB 78 
35a8e     BC 78 BC 78 
35a92     BC 78 BB 78 
35a96     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
35a9a     BC 78 BC 78 
35a9e     BC 78 BD 78 
35aa2     BB 78 BC 78 
35aa6     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
35aaa     BC 78 BC 78 
35aae     BC 78 BB 78 
35ab2     BC 78 BC 78 
35ab6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
35aba     A8 78 54 7E 
35abe     F4 83 17 82 
35ac2     50 87 43 87 
35ac6     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
35aca     44 87 43 87 
35ace     44 87 43 87 
35ad2     43 87 44 87 
35ad6     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
35ada     43 87 28 87 
35ade     20 85 CF 7A 
35ae2     70 7D AD 78 
35ae6     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
35aea     BB 78 BC 78 
35aee     BC 78 BC 78 
35af2     BB 78 BB 78 
35af6     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
35afa     BB 78 B2 78 
35afe     9A 7C CF 7A 
35b02     4A 87 0D 87 
35b06     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
35b0a     43 87 44 87 
35b0e     43 87 44 87 
35b12     43 87 43 87 
35b16     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
35b1a     44 87 43 87 
35b1e     28 87 51 85 
35b22     11 7A 1E 7D 
35b26     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
35b2a     BC 78 BB 78 
35b2e     BC 78 BC 78 
35b32     BC 78 BC 78 
35b36     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
35b3a     BB 78 BC 78 
35b3e     BB 78 BC 78 
35b42     BC 78 BC 78 
35b46     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
35b4a     BB 78 BC 78 
35b4e     BC 78 BC 78 
35b52     BD 78 BB 78 
35b56     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
35b5a     BC 78 BB 78 
35b5e     BC 78 BC 78 
35b62     BC 78 BB 78 
35b66     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35b6a     BC 78 BC 78 
35b6e     BC 78 BC 78 
35b72     BB 78 BC 78 
35b76     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
35b7a     BC 78 BD 78 
35b7e     BC 78 BC 78 
35b82     BC 78 BB 78 
35b86     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35b8a     BC 78 BB 78 
35b8e     BB 78 BC 78 
35b92     BC 78 BB 78 
35b96     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35b9a     BB 78 BB 78 
35b9e     BB 78 BC 78 
35ba2     B6 78 48 7D 
35ba6     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
35baa     56 87 43 87 
35bae     42 87 44 87 
35bb2     44 87 43 87 
35bb6     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
35bba     43 87 44 87 
35bbe     43 87 44 87 
35bc2     4C 87 7E 83 
35bc6     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
35bca     F7 78 BC 78 
35bce     BC 78 BB 78 
35bd2     BB 78 BC 78 
35bd6     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
35bda     BC 78 BB 78 
35bde     BC 78 BC 78 
35be2     BB 78 BC 78 
35be6     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
35bea     BB 78 BC 78 
35bee     BC 78 BC 78 
35bf2     BC 78 BB 78 
35bf6     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35bfa     BC 78 BC 78 
35bfe     BC 78 BC 78 
35c02     BC 78 BB 78 
35c06     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35c0a     BC 78 BB 78 
35c0e     BB 78 BC 78 
35c12     BC 78 BB 78 
35c16     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35c1a     BC 78 BC 78 
35c1e     BB 78 BC 78 
35c22     BC 78 BC 78 
35c26     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
35c2a     73 32 00 04 
35c2e     00 00 10 00 
35c32     00 00 00 00 
35c36     00 00 00 00 | atari12 file "atari12.s2"
35c3a     00 6D 00 6D 
35c3e     00 6D 00 6D 
35c42     00 6D 00 6D 
35c46     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35c4a     00 6D 00 6D 
35c4e     00 6D 00 6D 
35c52     00 6D 00 6D 
35c56     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35c5a     00 6D 00 6D 
35c5e     00 6D 00 6D 
35c62     00 6D 00 6D 
35c66     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35c6a     00 6D 00 6D 
35c6e     00 6D 00 6D 
35c72     00 6D 00 6D 
35c76     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35c7a     00 6D 00 6D 
35c7e     00 6D 00 6D 
35c82     00 6D 00 6D 
35c86     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
35c8a     00 6C 00 6C 
35c8e     00 6C 00 6C 
35c92     00 6C 00 6C 
35c96     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35c9a     00 6C 00 6C 
35c9e     00 6C 00 6C 
35ca2     00 6C 00 6C 
35ca6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35caa     00 6C 00 6C 
35cae     00 6C 00 6C 
35cb2     00 6C 00 6C 
35cb6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35cba     00 6C 00 6C 
35cbe     00 6C 00 6C 
35cc2     00 6C 00 6C 
35cc6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35cca     00 6C 00 6C 
35cce     00 6C 00 6C 
35cd2     00 6C 00 6C 
35cd6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35cda     00 6C 00 6C 
35cde     00 6C 00 6C 
35ce2     00 6C 00 6C 
35ce6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35cea     00 6C 00 6C 
35cee     00 6C 00 6C 
35cf2     00 6C 00 6C 
35cf6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35cfa     00 6C 00 6C 
35cfe     00 6C 00 6C 
35d02     00 6C 00 6C 
35d06     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35d0a     00 6C 00 6C 
35d0e     00 6C 00 6C 
35d12     00 6C 00 6C 
35d16     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35d1a     00 6C 00 6C 
35d1e     00 6C 00 6C 
35d22     00 6C 00 6C 
35d26     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35d2a     00 6C 00 6C 
35d2e     00 6C 00 6C 
35d32     00 6C 00 6C 
35d36     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35d3a     00 6C 00 6B 
35d3e     00 6B 00 6B 
35d42     00 6B 00 6B 
35d46     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35d4a     00 6B 00 6B 
35d4e     00 6B 00 6B 
35d52     00 6B 00 6B 
35d56     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35d5a     00 6B 00 6B 
35d5e     00 6B 00 6B 
35d62     00 6B 00 6B 
35d66     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35d6a     00 6B 00 6B 
35d6e     00 6B 00 6B 
35d72     00 6B 00 6B 
35d76     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35d7a     00 6B 00 6B 
35d7e     00 6B 00 6B 
35d82     00 6B 00 6B 
35d86     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35d8a     00 6B 00 6B 
35d8e     00 6B 00 6B 
35d92     00 6B 00 6B 
35d96     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35d9a     00 6B 00 6B 
35d9e     00 6B 00 6B 
35da2     00 6B 00 6B 
35da6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35daa     00 6B 00 6B 
35dae     00 6B 00 6B 
35db2     00 6B 00 6B 
35db6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35dba     00 6B 00 6B 
35dbe     00 6B 00 6B 
35dc2     00 6B 00 6B 
35dc6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35dca     00 6B 00 6B 
35dce     00 6B 00 6B 
35dd2     00 6A 00 9D 
35dd6     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
35dda     00 9E 00 9E 
35dde     00 9E 00 9E 
35de2     00 9E 00 9E 
35de6     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
35dea     00 9E 00 9E 
35dee     00 9E 00 9E 
35df2     00 9E 00 9E 
35df6     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
35dfa     00 9E 00 9E 
35dfe     00 9E 00 9E 
35e02     00 9E 00 9E 
35e06     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
35e0a     00 9E 00 9E 
35e0e     00 9E 00 9E 
35e12     00 9E 00 9E 
35e16     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
35e1a     00 9E 00 9E 
35e1e     00 9E 00 9E 
35e22     00 9E 00 9E 
35e26     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
35e2a     00 9E 00 9E 
35e2e     00 9E 00 9E 
35e32     00 9E 00 9E 
35e36     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
35e3a     00 9E 00 9E 
35e3e     00 9E 00 9E 
35e42     00 9E 00 9E 
35e46     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
35e4a     00 9E 00 9E 
35e4e     00 9E 00 9E 
35e52     00 9E 00 9E 
35e56     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
35e5a     00 9E 00 9E 
35e5e     00 9E 00 9E 
35e62     00 9E 00 9E 
35e66     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
35e6a     00 9F 00 9F 
35e6e     00 9F 00 9F 
35e72     00 9F 00 9F 
35e76     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35e7a     00 9F 00 9F 
35e7e     00 9F 00 9F 
35e82     00 9F 00 9F 
35e86     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35e8a     00 9F 00 9F 
35e8e     00 9F 00 9F 
35e92     00 9F 00 9F 
35e96     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35e9a     00 9F 00 9F 
35e9e     00 9F 00 9F 
35ea2     00 9F 00 9F 
35ea6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35eaa     00 9F 00 9F 
35eae     00 9F 00 9F 
35eb2     00 9F 00 9F 
35eb6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35eba     00 9F 00 9F 
35ebe     00 9F 00 9F 
35ec2     00 9F 00 9F 
35ec6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35eca     00 9F 00 9F 
35ece     00 9F 00 9F 
35ed2     00 9F 00 9F 
35ed6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35eda     00 9F 00 9F 
35ede     00 9F 00 9F 
35ee2     00 9F 00 9F 
35ee6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35eea     00 9F 00 9F 
35eee     00 9F 00 9F 
35ef2     00 9F 00 9F 
35ef6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35efa     00 9F 00 9F 
35efe     00 9F 00 9F 
35f02     00 9F 00 9F 
35f06     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35f0a     00 9F 00 9F 
35f0e     00 9F 00 9F 
35f12     00 9F 00 9F 
35f16     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35f1a     00 9F 00 9F 
35f1e     00 9F 00 9F 
35f22     00 9F 00 9F 
35f26     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35f2a     00 9F 00 9F 
35f2e     00 9F 00 A0 
35f32     00 A0 00 A0 
35f36     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35f3a     00 A0 00 A0 
35f3e     00 A0 00 A0 
35f42     00 A0 00 A0 
35f46     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35f4a     00 A0 00 A0 
35f4e     00 A0 00 A0 
35f52     00 A0 00 A0 
35f56     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35f5a     00 A0 00 A0 
35f5e     00 A0 00 A0 
35f62     00 A0 00 A0 
35f66     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35f6a     00 A0 00 A0 
35f6e     00 A0 00 A0 
35f72     00 A0 00 A0 
35f76     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35f7a     00 A0 00 A0 
35f7e     00 A0 00 A0 
35f82     00 A0 00 A0 
35f86     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35f8a     00 A0 00 A0 
35f8e     00 A0 00 A0 
35f92     00 A0 00 A0 
35f96     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35f9a     00 A0 00 A0 
35f9e     00 A0 00 A0 
35fa2     00 A0 00 A0 
35fa6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35faa     00 A0 00 A0 
35fae     00 A0 00 A0 
35fb2     00 A0 00 A0 
35fb6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35fba     00 A0 00 A0 
35fbe     00 A0 00 A0 
35fc2     00 A0 00 A0 
35fc6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35fca     00 A0 00 A0 
35fce     00 A0 00 A0 
35fd2     00 A0 00 A0 
35fd6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35fda     00 A0 00 A0 
35fde     00 A0 00 A0 
35fe2     00 A0 00 A0 
35fe6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35fea     00 A0 00 A0 
35fee     00 A0 00 A0 
35ff2     00 A0 00 A0 
35ff6     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
35ffa     00 6D 00 6D 
35ffe     00 6D 00 6D 
36002     00 6D 00 6D 
36006     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3600a     00 6D 00 6D 
3600e     00 6D 00 6D 
36012     00 6D 00 6D 
36016     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3601a     00 6D 00 6D 
3601e     00 6D 00 6D 
36022     00 6D 00 6D 
36026     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3602a     00 6D 00 6D 
3602e     00 6D 00 6D 
36032     00 6D 00 6D 
36036     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3603a     00 6D 00 6D 
3603e     00 6D 00 6D 
36042     00 6D 00 6D 
36046     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3604a     00 6D 00 6D 
3604e     00 6D 00 6D 
36052     00 6D 00 6D 
36056     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3605a     00 6D 00 6D 
3605e     00 6D 00 6D 
36062     00 6D 00 6D 
36066     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3606a     00 6D 00 6D 
3606e     00 6D 00 6D 
36072     00 6D 00 6D 
36076     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3607a     00 6D 00 6D 
3607e     00 A0 00 A0 
36082     00 A0 00 A0 
36086     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3608a     00 A0 00 A0 
3608e     00 A0 00 A0 
36092     00 A0 00 A0 
36096     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3609a     00 A0 00 A0 
3609e     00 A0 00 A0 
360a2     00 A0 00 A0 
360a6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
360aa     00 A0 00 A0 
360ae     00 A0 00 A0 
360b2     00 A0 00 A0 
360b6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
360ba     00 A0 00 A0 
360be     00 A0 00 A0 
360c2     00 A0 00 A0 
360c6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
360ca     00 A0 00 A0 
360ce     00 A0 00 A0 
360d2     00 A0 00 A0 
360d6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
360da     00 A0 00 A0 
360de     00 A0 00 A0 
360e2     00 A0 00 A0 
360e6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
360ea     00 A0 00 A0 
360ee     00 A0 00 A0 
360f2     00 A0 00 A0 
360f6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
360fa     00 A0 00 A0 
360fe     00 A0 00 A0 
36102     00 A0 00 A0 
36106     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
3610a     00 6D 00 6D 
3610e     00 6D 00 6D 
36112     00 6D 00 6D 
36116     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3611a     00 6D 00 6D 
3611e     00 6D 00 6D 
36122     00 6D 00 6D 
36126     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3612a     00 6D 00 6D 
3612e     00 6D 00 6D 
36132     00 6D 00 6D 
36136     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3613a     00 6D 00 6D 
3613e     00 6D 00 6D 
36142     00 6D 00 6D 
36146     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3614a     00 6D 00 6D 
3614e     00 6D 00 6D 
36152     00 6D 00 6D 
36156     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3615a     00 6D 00 6D 
3615e     00 6D 00 6D 
36162     00 6D 00 6D 
36166     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3616a     00 6D 00 6D 
3616e     00 6D 00 6D 
36172     00 6D 00 6D 
36176     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3617a     00 6D 00 6D 
3617e     00 6D 00 6D 
36182     00 6D 00 6D 
36186     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3618a     00 6D 00 6D 
3618e     00 6C 00 A0 
36192     00 9F 00 A0 
36196     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
3619a     00 A0 00 A0 
3619e     00 A0 00 A0 
361a2     00 A0 00 A0 
361a6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
361aa     00 A0 00 A0 
361ae     00 A0 00 A0 
361b2     00 A0 00 A0 
361b6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
361ba     00 A0 00 A0 
361be     00 A0 00 A0 
361c2     00 A0 00 A0 
361c6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
361ca     00 A0 00 A0 
361ce     00 A0 00 A0 
361d2     00 A0 00 A0 
361d6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
361da     00 A0 00 A0 
361de     00 A0 00 A0 
361e2     00 A0 00 A0 
361e6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
361ea     00 A0 00 A0 
361ee     00 A0 00 A0 
361f2     00 A0 00 A0 
361f6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
361fa     00 A0 00 A0 
361fe     00 A0 00 A0 
36202     00 A0 00 A0 
36206     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3620a     00 A0 00 A0 
3620e     00 A0 00 A0 
36212     00 A0 00 A0 
36216     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3621a     00 A0 00 A0 
3621e     00 A0 00 A0 
36222     00 A0 00 A0 
36226     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3622a     00 A0 00 A0 
3622e     00 A0 00 A0 
36232     00 A0 00 A0 
36236     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3623a     00 A0 00 A0 
3623e     00 A0 00 A0 
36242     00 A0 00 A0 
36246     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
3624a     00 A1 00 A1 
3624e     00 A1 00 A1 
36252     00 A1 00 A1 
36256     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3625a     00 A1 00 A1 
3625e     00 A1 00 A1 
36262     00 A1 00 A1 
36266     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3626a     00 A1 00 A1 
3626e     00 A1 00 A1 
36272     00 A1 00 A1 
36276     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3627a     00 A1 00 A1 
3627e     00 A1 00 A1 
36282     00 A1 00 A1 
36286     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3628a     00 A1 00 A1 
3628e     00 A1 00 A1 
36292     00 A1 00 A1 
36296     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3629a     00 A1 00 A1 
3629e     00 A1 00 A1 
362a2     00 6E 00 6E 
362a6     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
362aa     00 6E 00 6E 
362ae     00 6E 00 6E 
362b2     00 6E 00 6E 
362b6     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
362ba     00 6E 00 6E 
362be     00 6E 00 6E 
362c2     00 6E 00 6E 
362c6     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
362ca     00 6E 00 6E 
362ce     00 6E 00 6E 
362d2     00 6E 00 6E 
362d6     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
362da     00 6E 00 6D 
362de     00 6D 00 6D 
362e2     00 6D 00 6D 
362e6     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
362ea     00 6D 00 6D 
362ee     00 6D 00 6D 
362f2     00 6D 00 6D 
362f6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
362fa     00 6D 00 6D 
362fe     00 6D 00 6D 
36302     00 6D 00 6D 
36306     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3630a     00 6D 00 6D 
3630e     00 6D 00 6D 
36312     00 6D 00 6D 
36316     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3631a     00 6D 00 6D 
3631e     00 6D 00 6D 
36322     00 6D 00 6D 
36326     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3632a     00 6D 00 6D 
3632e     00 6D 00 6D 
36332     00 6D 00 6D 
36336     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3633a     00 6D 00 6D 
3633e     00 6D 00 6D 
36342     00 6D 00 6D 
36346     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3634a     00 6D 00 6D 
3634e     00 6D 00 6D 
36352     00 6D 00 6D 
36356     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3635a     00 6D 00 6D 
3635e     00 6D 00 6D 
36362     00 6D 00 6D 
36366     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3636a     00 6D 00 6D 
3636e     00 6D 00 6D 
36372     00 6D 00 6D 
36376     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3637a     00 6D 00 6D 
3637e     00 6D 00 6D 
36382     00 6D 00 6D 
36386     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3638a     00 6D 00 6D 
3638e     00 6C 00 6C 
36392     00 6C 00 6C 
36396     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3639a     00 6C 00 6C 
3639e     00 6C 00 6C 
363a2     00 6C 00 6C 
363a6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
363aa     00 6C 00 6C 
363ae     00 6C 00 6C 
363b2     00 9D 00 9F 
363b6     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
363ba     00 9F 00 9F 
363be     00 9F 00 9F 
363c2     00 A0 00 A0 
363c6     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
363ca     00 A0 00 A0 
363ce     00 A0 00 A0 
363d2     00 A0 00 A0 
363d6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
363da     00 A0 00 A0 
363de     00 A0 00 A0 
363e2     00 A0 00 A0 
363e6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
363ea     00 A0 00 A0 
363ee     00 A0 00 A0 
363f2     00 A0 00 A0 
363f6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
363fa     00 A0 00 A0 
363fe     00 A0 00 A0 
36402     00 A0 00 A0 
36406     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3640a     00 A0 00 A0 
3640e     00 A0 00 A0 
36412     00 A0 00 A0 
36416     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3641a     00 A0 00 A0 
3641e     00 A0 00 A0 
36422     00 A0 00 A0 
36426     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3642a     00 A0 00 A0 
3642e     00 A0 00 A0 
36432     00 A0 00 A0 
36436     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3643a     01 00 00 00 
3643e     00 00 00 00 
36442     00 00 00 00 
36446     00 00 00 00 | mouse  file "mouse2.def"
3644a     00 00 00 00 
3644e     00 00 00 00 
36452     00 00 00 00 
36456     00 00 00 00 | 	byte	$00[16]
3645a     01 01 00 00 
3645e     00 00 00 00 
36462     00 00 00 00 
36466     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3646a     00 00 00 00 
3646e     00 00 00 00 
36472     00 00 00 00 
36476     00 00 00 00 | 	byte	$00[16]
3647a     01 0D 01 00 
3647e     00 00 00 00 
36482     00 00 00 00 
36486     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3648a     00 00 00 00 
3648e     00 00 00 00 
36492     00 00 00 00 
36496     00 00 00 00 | 	byte	$00[16]
3649a     01 0D 0D 01 
3649e     00 00 00 00 
364a2     00 00 00 00 
364a6     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
364aa     00 00 00 00 
364ae     00 00 00 00 
364b2     00 00 00 00 
364b6     00 00 00 00 | 	byte	$00[16]
364ba     01 0D 0D 0D 
364be     01 00 00 00 
364c2     00 00 00 00 
364c6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
364ca     00 00 00 00 
364ce     00 00 00 00 
364d2     00 00 00 00 
364d6     00 00 00 00 | 	byte	$00[16]
364da     01 0D 0D 0D 
364de     0D 01 00 00 
364e2     00 00 00 00 
364e6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
364ea     00 00 00 00 
364ee     00 00 00 00 
364f2     00 00 00 00 
364f6     00 00 00 00 | 	byte	$00[16]
364fa     01 0D 0D 0D 
364fe     0D 0D 01 00 
36502     00 00 00 00 
36506     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
3650a     00 00 00 00 
3650e     00 00 00 00 
36512     00 00 00 00 
36516     00 00 00 00 | 	byte	$00[16]
3651a     01 0D 0D 0D 
3651e     0D 0D 0D 01 
36522     00 00 00 00 
36526     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
3652a     00 00 00 00 
3652e     00 00 00 00 
36532     00 00 00 00 
36536     00 00 00 00 | 	byte	$00[16]
3653a     01 0D 0D 0D 
3653e     0D 0D 0D 0C 
36542     01 00 00 00 
36546     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
3654a     00 00 00 00 
3654e     00 00 00 00 
36552     00 00 00 00 
36556     00 00 00 00 | 	byte	$00[16]
3655a     01 0D 0D 0D 
3655e     0D 0D 0D 0D 
36562     0C 01 00 00 
36566     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
3656a     00 00 00 00 
3656e     00 00 00 00 
36572     00 00 00 00 
36576     00 00 00 00 | 	byte	$00[16]
3657a     01 0D 0D 0D 
3657e     0D 0D 0D 0D 
36582     0D 0C 01 00 
36586     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
3658a     00 00 00 00 
3658e     00 00 00 00 
36592     00 00 00 00 
36596     00 00 00 00 | 	byte	$00[16]
3659a     01 0D 0D 0D 
3659e     0D 0D 0D 0D 
365a2     0D 0D 0B 01 
365a6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
365aa     00 00 00 00 
365ae     00 00 00 00 
365b2     00 00 00 00 
365b6     00 00 00 00 | 	byte	$00[16]
365ba     01 0D 0D 0D 
365be     0C 0D 0D 03 
365c2     01 01 01 01 
365c6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
365ca     00 00 00 00 
365ce     00 00 00 00 
365d2     00 00 00 00 
365d6     00 00 00 00 | 	byte	$00[16]
365da     01 0D 0D 0C 
365de     01 09 0D 03 
365e2     00 00 00 00 
365e6     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
365ea     00 00 00 00 
365ee     00 00 00 00 
365f2     00 00 00 00 
365f6     00 00 00 00 | 	byte	$00[16]
365fa     01 0D 0C 01 
365fe     00 01 0D 0B 
36602     01 00 00 00 
36606     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
3660a     00 00 00 00 
3660e     00 00 00 00 
36612     00 00 00 00 
36616     00 00 00 00 | 	byte	$00[16]
3661a     01 0C 01 00 
3661e     00 01 0A 0D 
36622     01 00 00 00 
36626     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
3662a     00 00 00 00 
3662e     00 00 00 00 
36632     00 00 00 00 
36636     00 00 00 00 | 	byte	$00[16]
3663a     01 01 00 00 
3663e     00 00 01 0D 
36642     0B 01 00 00 
36646     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
3664a     00 00 00 00 
3664e     00 00 00 00 
36652     00 00 00 00 
36656     00 00 00 00 
3665a     00 00 00 00 
3665e     00 00       | 	byte	$00[22]
36660     01 0B 0D 01 
36664     00 00 00 00 
36668     00 00 00 00 
3666c     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36670     00 00 00 00 
36674     00 00 00 00 
36678     00 00 00 00 
3667c     00 00 00 00 
36680     00          | 	byte	$00[17]
36681     01 01 00 00 
36685     00 00 00 00 
36689     00 00 00 00 
3668d     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36691     00 00 00 00 
      ...             
36835     00 00 00 00 
36839     00          | 	byte	$00[425]
3683a                 | 
3683a     00 00       |              	org
3683c 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
36840 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
36844 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
36848 003             | 
36848 003 00 30 04 F6 |                 mov     psramaddr,#0
3684c 004             | 
3684c 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
36850 005 20 00 00 FF 
36854 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
36858 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
3685c 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
36860 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
36864 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
36868 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
3686c 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
36870 00d             | 
36870 00d 20 00 00 FF 
36874 00e 00 30 04 F1 |                 add 	psramaddr,##16384
36878 00f E0 03 00 FF 
3687c 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
36880 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
36884 012             | 
36884 012             |                 
36884 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
36888 013             |     
36888 013 01 2C 60 FD |                 cogid 	t11				' get id
3688c 014 00 00 EC FC |                 coginit #0,#0				' start the new program
36890 015 03 2C 60 FD |                 cogstop t11				' stop the loader
36894 016             | 
36894 016 00 00 00 00 | t11 		long 	0
36898 017 00 FF 07 00 | mailbox 	long 	$7FF00
3689c 018 00 00 00 00 | psramaddr 	long 	0
368a0 019 00 00 00 00 | pslockval	long 	0
368a4 01a 00 00 00 00 | cmd             long    0
368a8 01b 00 00 00 00 | buf1            long    0
368ac 01c 00 40 00 00 | buf2            long    16384
368b0 01d B4 68 03 00 | 	long	@@@_dat_ + 12612
368b4 01e 50 32 20 52 
368b8 01f 65 74 72 6F 
368bc 020 6D 61 63 68 
368c0 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
368c4 022 42 41 53 49 
368c8 023 43 20 76 65 
368cc 024 72 73 69 6F 
368d0 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
368d4 026 35 31 00 00 | 	byte	$35, $31, $00, $00
368d8 027             | 	alignl
368d8 027             | _Hg010b_4_spin2_dat_
368d8 027             | 
368d8 027 00 00 00 00 
368dc 028 00 00 00 00 
368e0 029 00 00 00 00 
368e4 02a 00 00 00 00 
368e8 02b 00 00 00    | vga_font       file "vgafont.def"
368eb 02b 7E 81 A5 81 
368ef 02c 81 BD 99 81 
368f3 02d 81 7E 00 00 
368f7 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
368fb 02f 7E FF DB FF 
368ff 030 FF C3 E7 FF 
36903 031 FF 7E 00 00 
36907 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
3690b 033 00 36 7F 7F 
3690f 034 7F 7F 3E 1C 
36913 035 08 00 00 00 
36917 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
3691b 037 00 08 1C 3E 
3691f 038 7F 3E 1C 08 
36923 039 00 00 00 00 
36927 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
3692b 03b 18 3C 3C E7 
3692f 03c E7 E7 18 18 
36933 03d 3C 00 00 00 
36937 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3693b 03f 18 3C 7E FF 
3693f 040 FF 7E 18 18 
36943 041 3C 00 00 00 
36947 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3694b 043 00 00 00 18 
3694f 044 3C 3C 18 00 
36953 045 00 00 00 00 
36957 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
3695b 047 FF FF FF E7 
3695f 048 C3 C3 E7 FF 
36963 049 FF FF FF FF 
36967 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
3696b 04b 00 00 3C 66 
3696f 04c 42 42 66 3C 
36973 04d 00 00 00 00 
36977 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
3697b 04f FF FF C3 99 
3697f 050 BD BD 99 C3 
36983 051 FF FF FF FF 
36987 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
3698b 053 78 70 58 4C 
3698f 054 1E 33 33 33 
36993 055 33 1E 00 00 
36997 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
3699b 057 3C 66 66 66 
3699f 058 66 3C 18 7E 
369a3 059 18 18 00 00 
369a7 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
369ab 05b FC CC FC 0C 
369af 05c 0C 0C 0C 0E 
369b3 05d 0F 07 00 00 
369b7 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
369bb 05f FE C6 FE C6 
369bf 060 C6 C6 C6 E6 
369c3 061 E7 67 03 00 
369c7 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
369cb 063 18 18 DB 3C 
369cf 064 E7 3C DB 18 
369d3 065 18 00 00 00 
369d7 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
369db 067 03 07 0F 1F 
369df 068 7F 1F 0F 07 
369e3 069 03 01 00 00 
369e7 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
369eb 06b 60 70 78 7C 
369ef 06c 7F 7C 78 70 
369f3 06d 60 40 00 00 
369f7 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
369fb 06f 18 3C 7E 18 
369ff 070 18 18 7E 3C 
36a03 071 18 00 00 00 
36a07 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
36a0b 073 66 66 66 66 
36a0f 074 66 66 66    | 	byte	$66[7]
36a12 075 00 66 66 00 
36a16 076 00 00 00 00 
36a1a 077 00 FE DB DB 
36a1e 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
36a22 079 D8 D8 D8 00 
36a26 07a 00 00 00 3E 
36a2a 07b 63 06 1C 36 
36a2e 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
36a32 07d 30 63 3E 00 
36a36 07e 00 00 00 00 
36a3a 07f 00 00 00 00 
36a3e 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
36a42 081 7F 7F 7F 00 
36a46 082 00 00 00 00 
36a4a 083 00 18 3C 7E 
36a4e 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
36a52 085 3C 18 7E 00 
36a56 086 00 00 00 00 
36a5a 087 00 18 3C 7E 
36a5e 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
36a62 089 18 18 18 00 
36a66 08a 00 00 00 00 
36a6a 08b 00 18 18 18 
36a6e 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
36a72 08d 7E 3C 18 00 
36a76 08e 00 00 00 00 
36a7a 08f 00 00 00 18 
36a7e 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
36a82 091 00 00 00 00 
36a86 092 00 00 00 00 
36a8a 093 00 00 00    | 	byte	$00[11]
36a8d 094 0C 06 7F 06 
36a91 095 0C 00 00 00 
36a95 096 00 00 00 00 
36a99 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36a9d 098 00 03 03 03 
36aa1 099 7F 00 00 00 
36aa5 09a 00 00 00 00 
36aa9 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36aad 09c 14 36 7F 36 
36ab1 09d 14 00 00 00 
36ab5 09e 00 00 00 00 
36ab9 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
36abd 0a0 1C 1C 3E 3E 
36ac1 0a1 7F 7F 00 00 
36ac5 0a2 00 00 00 00 
36ac9 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
36acd 0a4 7F 3E 3E 1C 
36ad1 0a5 1C 08 00 00 
36ad5 0a6 00 00 00 00 
36ad9 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36add 0a8 00 00 00 00 
36ae1 0a9 00 00 00 00 
36ae5 0aa 00 00 00 00 
36ae9 0ab 00 00       | 	byte	$00[14]
36aeb 0ab 18 3C 3C 3C 
36aef 0ac 18 18 18 00 
36af3 0ad 18 18 00 00 
36af7 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
36afb 0af 66 24 00 00 
36aff 0b0 00 00 00 00 
36b03 0b1 00 00 00 00 
36b07 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36b0b 0b3 00 36 36 7F 
36b0f 0b4 36 36 36 7F 
36b13 0b5 36 36 00 00 
36b17 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
36b1b 0b7 3E 63 43 03 
36b1f 0b8 3E 60 60 61 
36b23 0b9 63 3E 18 18 
36b27 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
36b2b 0bb 00 00 43 63 
36b2f 0bc 30 18 0C 06 
36b33 0bd 63 61 00 00 
36b37 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
36b3b 0bf 1C 36 36 1C 
36b3f 0c0 6E 3B 33 33 
36b43 0c1 33 6E 00 00 
36b47 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
36b4b 0c3 0C 0C 0C 06 
36b4f 0c4 00 00 00 00 
36b53 0c5 00 00 00 00 
36b57 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36b5b 0c7 30 18 0C 0C 
36b5f 0c8 0C 0C 0C 0C 
36b63 0c9 18 30 00 00 
36b67 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
36b6b 0cb 0C 18 30 30 
36b6f 0cc 30 30 30 30 
36b73 0cd 18 0C 00 00 
36b77 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
36b7b 0cf 00 00 00 66 
36b7f 0d0 3C FF 3C 66 
36b83 0d1 00 00 00 00 
36b87 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
36b8b 0d3 00 00 00 18 
36b8f 0d4 18 7E 18 18 
36b93 0d5 00 00 00 00 
36b97 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
36b9b 0d7 00 00 00 00 
36b9f 0d8 00 00 00 00 | 	byte	$00[8]
36ba3 0d9 18 18 18 0C 
36ba7 0da 00 00 00 00 
36bab 0db 00 00 00 00 
36baf 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
36bb3 0dd 00 00 00 00 
36bb7 0de 00 00 00 00 
36bbb 0df 00 00 00 00 
36bbf 0e0 00 00 00 00 | 	byte	$00[16]
36bc3 0e1 18 18 00 00 
36bc7 0e2 00 00 00 00 
36bcb 0e3 00 00 40 60 
36bcf 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
36bd3 0e5 03 01 00 00 
36bd7 0e6 00 00 00 00 
36bdb 0e7 1C 36 63 63 
36bdf 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
36be3 0e9 36 1C 00 00 
36be7 0ea 00 00 00 00 
36beb 0eb 18 1C 1E 18 
36bef 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
36bf3 0ed 18 7E 00 00 
36bf7 0ee 00 00 00 00 
36bfb 0ef 3E 63 60 30 
36bff 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
36c03 0f1 63 7F 00 00 
36c07 0f2 00 00 00 00 
36c0b 0f3 3E 63 60 60 
36c0f 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
36c13 0f5 63 3E 00 00 
36c17 0f6 00 00 00 00 
36c1b 0f7 30 38 3C 36 
36c1f 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
36c23 0f9 30 78 00 00 
36c27 0fa 00 00 00 00 
36c2b 0fb 7F 03 03 03 
36c2f 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
36c33 0fd 63 3E 00 00 
36c37 0fe 00 00 00 00 
36c3b 0ff 1C 06 03 03 
36c3f 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
36c43 101 63 3E 00 00 
36c47 102 00 00 00 00 
36c4b 103 7F 63 60 60 
36c4f 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
36c53 105 0C 0C 00 00 
36c57 106 00 00 00 00 
36c5b 107 3E 63 63 63 
36c5f 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
36c63 109 63 3E 00 00 
36c67 10a 00 00 00 00 
36c6b 10b 3E 63 63 63 
36c6f 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
36c73 10d 30 1E 00 00 
36c77 10e 00 00 00 00 
36c7b 10f 00 00 00 18 
36c7f 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
36c83 111 18 18 00 00 
36c87 112 00 00 00 00 
36c8b 113 00 00 00 18 
36c8f 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
36c93 115 18 18 0C 00 
36c97 116 00 00 00 00 
36c9b 117 00 60 30 18 
36c9f 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
36ca3 119 30 60 00 00 
36ca7 11a 00 00 00 00 
36cab 11b 00 00 00 7E 
36caf 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
36cb3 11d 00 00 00 00 
36cb7 11e 00 00 00 00 
36cbb 11f 00          | 	byte	$00[9]
36cbc 120 06 0C 18 30 
36cc0 121 60 30 18 0C 
36cc4 122 06 00 00 00 
36cc8 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
36ccc 124 63 63 30 18 
36cd0 125 18 18 00 18 
36cd4 126 18 00 00 00 
36cd8 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
36cdc 128 3E 63 63 7B 
36ce0 129 7B 7B 3B 03 
36ce4 12a 3E 00 00 00 
36ce8 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
36cec 12c 1C 36 63 63 
36cf0 12d 7F 63 63 63 
36cf4 12e 63 00 00 00 
36cf8 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
36cfc 130 66 66 66 3E 
36d00 131 66 66 66 66 
36d04 132 3F 00 00 00 
36d08 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
36d0c 134 66 43 03 03 
36d10 135 03 03 43 66 
36d14 136 3C 00 00 00 
36d18 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
36d1c 138 36 66 66 66 
36d20 139 66 66 66 36 
36d24 13a 1F 00 00 00 
36d28 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
36d2c 13c 66 46 16 1E 
36d30 13d 16 06 46 66 
36d34 13e 7F 00 00 00 
36d38 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
36d3c 140 66 46 16 1E 
36d40 141 16 06 06 06 
36d44 142 0F 00 00 00 
36d48 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
36d4c 144 66 43 03 03 
36d50 145 7B 63 63 66 
36d54 146 5C 00 00 00 
36d58 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
36d5c 148 63 63 63 7F 
36d60 149 63 63 63 63 
36d64 14a 63 00 00 00 
36d68 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
36d6c 14c 18 18 18 18 
36d70 14d 18 18 18 18 | 	byte	$18[8]
36d74 14e 3C 00 00 00 
36d78 14f 00 00 00 78 
36d7c 150 30 30 30 30 
36d80 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
36d84 152 1E 00 00 00 
36d88 153 00 00 00 67 
36d8c 154 66 66 36 1E 
36d90 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
36d94 156 67 00 00 00 
36d98 157 00 00 00 0F 
36d9c 158 06 06 06 06 
36da0 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
36da4 15a 7F 00 00 00 
36da8 15b 00 00 00 63 
36dac 15c 77 7F 7F 6B 
36db0 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
36db4 15e 63 00 00 00 
36db8 15f 00 00 00 63 
36dbc 160 67 6F 7F 7B 
36dc0 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
36dc4 162 63 00 00 00 
36dc8 163 00 00 00 3E 
36dcc 164 63 63 63 63 
36dd0 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
36dd4 166 3E 00 00 00 
36dd8 167 00 00 00 3F 
36ddc 168 66 66 66 3E 
36de0 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
36de4 16a 0F 00 00 00 
36de8 16b 00 00 00 3E 
36dec 16c 63 63 63 63 
36df0 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
36df4 16e 3E 30 70 00 
36df8 16f 00 00 00 3F 
36dfc 170 66 66 66 3E 
36e00 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
36e04 172 67 00 00 00 
36e08 173 00 00 00 3E 
36e0c 174 63 63 06 1C 
36e10 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
36e14 176 3E 00 00 00 
36e18 177 00 00 00 7E 
36e1c 178 7E 5A 18 18 
36e20 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
36e24 17a 3C 00 00 00 
36e28 17b 00 00 00 63 
36e2c 17c 63 63 63 63 
36e30 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
36e34 17e 3E 00 00 00 
36e38 17f 00 00 00 63 
36e3c 180 63 63 63 63 
36e40 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
36e44 182 08 00 00 00 
36e48 183 00 00 00 63 
36e4c 184 63 63 63 6B 
36e50 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
36e54 186 36 00 00 00 
36e58 187 00 00 00 63 
36e5c 188 63 36 3E 1C 
36e60 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
36e64 18a 63 00 00 00 
36e68 18b 00 00 00 66 
36e6c 18c 66 66 66 3C 
36e70 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
36e74 18e 3C 00 00 00 
36e78 18f 00 00 00 7F 
36e7c 190 63 61 30 18 
36e80 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
36e84 192 7F 00 00 00 
36e88 193 00 00 00 3C 
36e8c 194 0C 0C 0C 0C 
36e90 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
36e94 196 3C 00 00 00 
36e98 197 00 00 00 00 
36e9c 198 01 03 07 0E 
36ea0 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
36ea4 19a 40 00 00 00 
36ea8 19b 00 00 00 3C 
36eac 19c 30 30 30 30 
36eb0 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
36eb4 19e 3C 00 00 00 
36eb8 19f 1C 36 00 00 
36ebc 1a0 00 00 00 00 
36ec0 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36ec4 1a2 00 00 00 00 
36ec8 1a3 00 00 00 00 
36ecc 1a4 00 00 00 00 
36ed0 1a5 00 00 00 00 
36ed4 1a6 00          | 	byte	$00[17]
36ed5 1a6 FF 00 00 0C 
36ed9 1a7 18 00 00 00 
36edd 1a8 00 00 00 00 
36ee1 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36ee5 1aa 00 00 00 00 
36ee9 1ab 00 00 00 00 
36eed 1ac 00          | 	byte	$00[9]
36eee 1ac 1E 30 3E 33 
36ef2 1ad 33 33 6E 00 
36ef6 1ae 00 00 00 00 
36efa 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
36efe 1b0 1E 36 66 66 
36f02 1b1 66 66 3E 00 
36f06 1b2 00 00 00 00 
36f0a 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
36f0e 1b4 3E 63 03 03 
36f12 1b5 03 63 3E 00 
36f16 1b6 00 00 00 00 
36f1a 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
36f1e 1b8 3C 36 33 33 
36f22 1b9 33 33 6E 00 
36f26 1ba 00 00 00 00 
36f2a 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
36f2e 1bc 3E 63 7F 03 
36f32 1bd 03 63 3E 00 
36f36 1be 00 00 00 00 
36f3a 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
36f3e 1c0 0C 1E 0C 0C 
36f42 1c1 0C 0C 1E 00 
36f46 1c2 00 00 00 00 
36f4a 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
36f4e 1c4 6E 33 33 33 
36f52 1c5 33 33 3E 30 
36f56 1c6 33 1E 00 00 
36f5a 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
36f5e 1c8 36 6E 66 66 
36f62 1c9 66 66 67 00 
36f66 1ca 00 00 00 00 
36f6a 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
36f6e 1cc 1C 18 18 18 
36f72 1cd 18 18 3C 00 
36f76 1ce 00 00 00 00 
36f7a 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
36f7e 1d0 70 60 60 60 
36f82 1d1 60 60 60 66 
36f86 1d2 66 3C 00 00 
36f8a 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
36f8e 1d4 66 36 1E 1E 
36f92 1d5 36 66 67 00 
36f96 1d6 00 00 00 00 
36f9a 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
36f9e 1d8 18 18 18 18 
36fa2 1d9 18 18       | 	byte	$18[6]
36fa4 1da 3C 00 00 00 
36fa8 1db 00 00 00 00 
36fac 1dc 00 00 37 7F 
36fb0 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
36fb4 1de 63 00 00 00 
36fb8 1df 00 00 00 00 
36fbc 1e0 00 00 3B 66 
36fc0 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
36fc4 1e2 66 00 00 00 
36fc8 1e3 00 00 00 00 
36fcc 1e4 00 00 3E 63 
36fd0 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
36fd4 1e6 3E 00 00 00 
36fd8 1e7 00 00 00 00 
36fdc 1e8 00 00 3B 66 
36fe0 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
36fe4 1ea 3E 06 06 0F 
36fe8 1eb 00 00 00 00 
36fec 1ec 00 00 6E 33 
36ff0 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
36ff4 1ee 3E 30 30 78 
36ff8 1ef 00 00 00 00 
36ffc 1f0 00 00 3B 6E 
37000 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
37004 1f2 0F 00 00 00 
37008 1f3 00 00 00 00 
3700c 1f4 00 00 3E 63 
37010 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
37014 1f6 3E 00 00 00 
37018 1f7 00 00 00 08 
3701c 1f8 0C 0C 3F 0C 
37020 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
37024 1fa 38 00 00 00 
37028 1fb 00 00 00 00 
3702c 1fc 00 00 33 33 
37030 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
37034 1fe 6E 00 00 00 
37038 1ff 00 00 00 00 
3703c 200 00 00 63 63 
37040 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
37044 202 1C 00 00 00 
37048 203 00 00 00 00 
3704c 204 00 00 63 63 
37050 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
37054 206 36 00 00 00 
37058 207 00 00 00 00 
3705c 208 00 00 63 36 
37060 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
37064 20a 63 00 00 00 
37068 20b 00 00 00 00 
3706c 20c 00 00 63 63 
37070 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
37074 20e 7E 60 30 1F 
37078 20f 00 00 00 00 
3707c 210 00 00 7F 33 
37080 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
37084 212 7F 00 00 00 
37088 213 00 00 00 70 
3708c 214 18 18 18 0E 
37090 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
37094 216 70 00 00 00 
37098 217 00 00 00 18 
3709c 218 18 18 18 18 
370a0 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
370a4 21a 18 00 00 00 
370a8 21b 00 00 00 0E 
370ac 21c 18 18 18 70 
370b0 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
370b4 21e 0E 00 00 00 
370b8 21f 6E 3B 00 00 
370bc 220 00 00 00 00 
370c0 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
370c4 222 00 00 00 00 
370c8 223 00 00 00 00 
370cc 224 00 00       | 	byte	$00[10]
370ce 224 08 1C 36 63 
370d2 225 63 63 7F 00 
370d6 226 00 00 00 00 
370da 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
370de 228 03 03 03 03 
370e2 229 43 66 3C 18 
370e6 22a 30 1E 00 00 
370ea 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
370ee 22c 33 33 33 33 
370f2 22d 33 33       | 	byte	$33[6]
370f4 22e 6E 00 00 00 
370f8 22f 00 00 60 30 
370fc 230 18 00 3E 63 
37100 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
37104 232 3E 00 00 00 
37108 233 00 00 08 1C 
3710c 234 36 00 1E 30 
37110 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
37114 236 6E 00 00 00 
37118 237 00 00 00 00 
3711c 238 33 00 1E 30 
37120 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
37124 23a 6E 00 00 00 
37128 23b 00 00 1C 36 
3712c 23c 1C 00 33 33 
37130 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
37134 23e 6E 00 00 00 
37138 23f 00 00 60 30 
3713c 240 18 00 3E 63 
37140 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
37144 242 3E 00 00 00 
37148 243 00 00 00 00 
3714c 244 00 00 3E 63 
37150 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
37154 246 3E 18 30 1E 
37158 247 00 00 00 1C 
3715c 248 58 78 38 18 
37160 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
37164 24a 3C 00 00 00 
37168 24b 00 00 00 00 
3716c 24c 63 00 3E 63 
37170 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
37174 24e 3E 00 00 00 
37178 24f 66 33 00 3E 
3717c 250 63 63 63 63 
37180 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
37184 252 3E 00 00 00 
37188 253 00 00 CC 66 
3718c 254 33 00 3E 63 
37190 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
37194 256 3E 00 00 00 
37198 257 00 00 18 3C 
3719c 258 66 00 1C 18 
371a0 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
371a4 25a 3C 00 00 00 
371a8 25b 30 18 00 7F 
371ac 25c 63 61 30 18 
371b0 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
371b4 25e 7F 00 00 00 
371b8 25f 00 63 00 08 
371bc 260 1C 36 63 63 
371c0 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
371c4 262 63 00 00 00 
371c8 263 30 18 00 3C 
371cc 264 66 43 03 03 
371d0 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
371d4 266 3C 00 00 00 
371d8 267 30 18 00 7F 
371dc 268 66 46 16 1E 
371e0 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
371e4 26a 7F 00 00 00 
371e8 26b 0C 06 00 0F 
371ec 26c 06 06 06 06 
371f0 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
371f4 26e 7F 00 00 00 
371f8 26f 30 18 00 1C 
371fc 270 18 18 18 18 
37200 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
37204 272 3C 00 00 00 
37208 273 00 00 08 1C 
3720c 274 36 00 3E 63 
37210 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
37214 276 3E 00 00 00 
37218 277 00 00 00 00 
3721c 278 63 00 3E 63 
37220 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
37224 27a 3E 00 00 00 
37228 27b 00 00 00 6F 
3722c 27c 46 26 06 06 
37230 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
37234 27e 7F 00 00 00 
37238 27f 00 00 00 6E 
3723c 280 4C 2C 0C 0C 
37240 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
37244 282 1E 00 00 00 
37248 283 30 18 00 3E 
3724c 284 63 63 06 1C 
37250 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
37254 286 3E 00 00 00 
37258 287 00 00 60 30 
3725c 288 18 00 3E 63 
37260 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
37264 28a 3E 00 00 00 
37268 28b 00 63 00 3E 
3726c 28c 63 63 63 63 
37270 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
37274 28e 3E 00 00 00 
37278 28f 00 63 00 63 
3727c 290 63 63 63 63 
37280 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
37284 292 3E 00 00 00 
37288 293 6C 38 00 7E 
3728c 294 7E 5A 18 18 
37290 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
37294 296 3C 00 00 00 
37298 297 00 00 60 48 
3729c 298 2C 0C 3F 0C 
372a0 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
372a4 29a 38 00 00 00 
372a8 29b 00 00 00 0F 
372ac 29c 26 36 1E 0E 
372b0 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
372b4 29e 7F 00 00 00 
372b8 29f 00 00 00 00 
372bc 2a0 00 63 36 1C 
372c0 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
372c4 2a2 00 00 00 00 
372c8 2a3 00 00       | 	byte	$00[6]
372ca 2a3 36 1C 08 00 
372ce 2a4 3E 63 03 03 
372d2 2a5 03 63 3E 00 
372d6 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
372da 2a7 30 18 0C 00 
372de 2a8 1E 30 3E 33 
372e2 2a9 33 33 6E 00 
372e6 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
372ea 2ab 60 30 18 00 
372ee 2ac 1C 18 18 18 
372f2 2ad 18 18 3C 00 
372f6 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
372fa 2af 60 30 18 00 
372fe 2b0 3E 63 63 63 
37302 2b1 63 63 3E 00 
37306 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
3730a 2b3 30 18 0C 00 
3730e 2b4 33 33 33 33 
37312 2b5 33 33 6E 00 
37316 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3731a 2b7 00 08 1C 36 
3731e 2b8 63 63 7F 63 
37322 2b9 63 63 63 18 
37326 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
3732a 2bb 00 00 00 00 
3732e 2bc 1E 30 3E 33 
37332 2bd 33 33 6E 18 
37336 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
3733a 2bf 00 7F 63 61 
3733e 2c0 30 18 0C 06 
37342 2c1 43 63 7F 00 
37346 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
3734a 2c3 36 1C 08 00 
3734e 2c4 7F 33 18 0C 
37352 2c5 06 63 7F 00 
37356 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
3735a 2c7 00 7F 66 46 
3735e 2c8 16 1E 16 06 
37362 2c9 46 66 7F 18 
37366 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
3736a 2cb 00 00 00 00 
3736e 2cc 3E 63 7F 03 
37372 2cd 03 63 3E 18 
37376 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
3737a 2cf 00 3C 66 03 
3737e 2d0 1F 03 0F 03 
37382 2d1 03 66 3C 00 
37386 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
3738a 2d3 60 30 18 00 
3738e 2d4 7F 33 18 0C 
37392 2d5 06 63 7F 00 
37396 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
3739a 2d7 00 3C 66 43 
3739e 2d8 03 03 03 03 
373a2 2d9 43 66 3C 00 
373a6 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
373aa 2db 00 00 00 00 
373ae 2dc 3E 63 06 1C 
373b2 2dd 30 63 3E 18 
373b6 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
373ba 2df 00 00 00 00 
373be 2e0 00 00       | 	byte	$00[6]
373c0 2e1 6C 36 1B 36 
373c4 2e2 6C 00 00 00 
373c8 2e3 00 00 00 00 
373cc 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
373d0 2e5 1B 36 6C 36 
373d4 2e6 1B 00 00 00 
373d8 2e7 88 22 88 22 
373dc 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
373e0 2e9 88 22 88 22 
373e4 2ea 88 22 88 22 
373e8 2eb AA 55 AA 55 
373ec 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
373f0 2ed AA 55 AA 55 
373f4 2ee AA 55 AA 55 
373f8 2ef BB EE BB EE 
373fc 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
37400 2f1 BB EE BB EE 
37404 2f2 BB EE BB EE 
37408 2f3 18 18 18 18 
3740c 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
37410 2f5 18 18 18 18 
37414 2f6 18 18 18 18 
37418 2f7 18 18 18 18 
3741c 2f8 18 18 18    | 	byte	$18[15]
3741f 2f8 1F 18 18 18 
37423 2f9 18 18 18 18 
37427 2fa 18 30 18 00 
3742b 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
3742f 2fc 63 7F 63 63 
37433 2fd 63 63 00 00 
37437 2fe 00 1C 36 00 
3743b 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
3743f 300 63 7F 63 63 
37443 301 63 63 00 00 
37447 302 00 36 1C 00 
3744b 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
3744f 304 1E 16 06 46 
37453 305 66 7F 00 00 
37457 306 00 00 00 00 
3745b 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
3745f 308 1C 30 60 63 
37463 309 63 3E 18 30 
37467 30a 1E 6C 6C 6C 
3746b 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
3746f 30c 6F 6C 6C 6C 
37473 30d 6C 6C 6C 6C 
37477 30e 6C 6C 6C 6C 
3747b 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3747f 310 6C 6C 6C 6C 
37483 311 6C 6C 6C 6C 
37487 312 6C          | 	byte	$6c[9]
37488 313 00 00 00 00 
3748c 314 00          | 	byte	$00[5]
3748d 314 7F 60 6F 6C 
37491 315 6C 6C 6C 6C 
37495 316 6C 6C 6C 6C 
37499 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3749d 318 6F 60 7F 00 
374a1 319 00 00 00 00 
374a5 31a 00 00 00 18 
374a9 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
374ad 31c 61 30 18 0C 
374b1 31d 06 43 63 7F 
374b5 31e 00 00 00 00 
374b9 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
374bd 320 00 7F 33 18 
374c1 321 0C 06 63 7F 
374c5 322 00 00 00 00 
374c9 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
374cd 324 00 00 1F 18 
374d1 325 18 18 18 18 
374d5 326 18 18 18 18 
374d9 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
374dd 328 18 18 F8 00 
374e1 329 00 00 00 00 
374e5 32a 00 00 00 18 
374e9 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
374ed 32c 18 18 FF 00 
374f1 32d 00 00 00 00 
374f5 32e 00 00 00 00 
374f9 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
374fd 330 00 00 FF 18 
37501 331 18 18 18 18 
37505 332 18 18 18 18 
37509 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3750d 334 18 18 F8 18 
37511 335 18 18 18 18 
37515 336 18 18 18 00 
37519 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
3751d 338 00 00 FF 00 
37521 339 00 00 00 00 
37525 33a 00 00 00 18 
37529 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
3752d 33c 18 18 FF 18 
37531 33d 18 18 18 18 
37535 33e 18 18 18 63 
37539 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
3753d 340 36 63 63 7F 
37541 341 63 63 63 63 
37545 342 00 00 00 00 
37549 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
3754d 344 00 1E 30 3E 
37551 345 33 33 33 6E 
37555 346 00 00 00 6C 
37559 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
3755d 348 EC 0C FC 00 
37561 349 00 00 00 00 
37565 34a 00 00 00 00 
37569 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3756d 34c FC 0C EC 6C 
37571 34d 6C 6C 6C 6C 
37575 34e 6C 6C 6C 6C 
37579 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3757d 350 EF 00 FF 00 
37581 351 00 00 00 00 
37585 352 00 00 00 00 
37589 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3758d 354 FF 00 EF 6C 
37591 355 6C 6C 6C 6C 
37595 356 6C 6C 6C 6C 
37599 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3759d 358 EC 0C EC 6C 
375a1 359 6C 6C 6C 6C 
375a5 35a 6C 6C 6C 00 
375a9 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
375ad 35c FF 00 FF 00 
375b1 35d 00 00 00 00 
375b5 35e 00 00 00 6C 
375b9 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
375bd 360 EF 00 EF 6C 
375c1 361 6C 6C 6C 6C 
375c5 362 6C 6C 6C 00 
375c9 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
375cd 364 63 3E 63 63 
375d1 365 63 63 3E 63 
375d5 366 00 00 00 00 
375d9 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
375dd 368 30 3C 36 33 
375e1 369 33 33 33 6E 
375e5 36a 00 00 00 00 
375e9 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
375ed 36c 66 66 6F 66 
375f1 36d 66 66 36 1F 
375f5 36e 00 00 00 36 
375f9 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
375fd 370 66 66 66 66 
37601 371 66 66       | 	byte	$66[6]
37603 371 36 1F 00 00 
37607 372 00 00 63 00 
3760b 373 7F 66 46 16 
3760f 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
37613 375 66 7F 00 00 
37617 376 00 6C 38 00 
3761b 377 38 30 30 3C 
3761f 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
37623 379 33 6E 00 00 
37627 37a 00 36 1C 00 
3762b 37b 63 67 6F 7F 
3762f 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
37633 37d 63 63 00 00 
37637 37e 00 30 18 00 
3763b 37f 3C 18 18 18 
3763f 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
37643 381 18 3C 00 00 
37647 382 00 3C 66 00 
3764b 383 3C 18 18 18 
3764f 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
37653 385 18 3C 00 00 
37657 386 00 00 00 36 
3765b 387 1C 08 00 3E 
3765f 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
37663 389 63 3E 00 00 
37667 38a 00 18 18 18 
3766b 38b 18 18 18 18 
3766f 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
37673 38d 00 00 00 00 
37677 38e 00 00 00 00 
3767b 38f 00 00 00 00 | 	byte	$00[12]
3767f 390 F8 18 18 18 
37683 391 18 18 18 18 
37687 392 18 FF FF FF 
3768b 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
3768f 394 FF FF FF FF 
37693 395 FF FF FF FF 
37697 396 FF          | 	byte	$ff[9]
37698 397 00 00 00 00 
3769c 398 00 00 00    | 	byte	$00[7]
3769f 398 FF FF FF FF 
376a3 399 FF FF FF FF 
376a7 39a FF          | 	byte	$ff[9]
376a8 39b 00 00 00 7E 
376ac 39c 7E 5A 18 18 
376b0 39d 18 18 18 18 
376b4 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
376b8 39f 1C 36 1C 63 
376bc 3a0 63 63 63 63 
376c0 3a1 63 63 63 63 
376c4 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
376c8 3a3 FF FF FF FF 
376cc 3a4 FF FF FF    | 	byte	$ff[7]
376cf 3a4 00 00 00 00 
376d3 3a5 00 00 00 00 
376d7 3a6 00          | 	byte	$00[9]
376d8 3a7 30 18 00 3E 
376dc 3a8 63 63 63 63 
376e0 3a9 63 63 63 63 
376e4 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
376e8 3ab 00 00 00 1E 
376ec 3ac 33 33 33 1B 
376f0 3ad 33 63 63 63 
376f4 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
376f8 3af 1C 36 00 3E 
376fc 3b0 63 63 63 63 
37700 3b1 63 63 63 63 
37704 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
37708 3b3 30 18 00 63 
3770c 3b4 67 6F 7F 7B 
37710 3b5 73 63 63 63 
37714 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
37718 3b7 00 00 60 30 
3771c 3b8 18 00 3B 66 
37720 3b9 66 66 66 66 
37724 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
37728 3bb 00 00 36 1C 
3772c 3bc 08 00 3B 66 
37730 3bd 66 66 66 66 
37734 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
37738 3bf 36 1C 00 3E 
3773c 3c0 63 63 06 1C 
37740 3c1 30 60 63 63 
37744 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
37748 3c3 00 00 36 1C 
3774c 3c4 08 00 3E 63 
37750 3c5 06 1C 30 63 
37754 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
37758 3c7 30 18 00 3F 
3775c 3c8 66 66 66 3E 
37760 3c9 36 66 66 66 
37764 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
37768 3cb 30 18 00 63 
3776c 3cc 63 63 63 63 
37770 3cd 63 63 63 63 
37774 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
37778 3cf 00 00 60 30 
3777c 3d0 18 00 3B 6E 
37780 3d1 66 06 06 06 
37784 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
37788 3d3 66 33 00 63 
3778c 3d4 63 63 63 63 
37790 3d5 63 63 63 63 
37794 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
37798 3d7 00 00 60 30 
3779c 3d8 18 00 63 63 
377a0 3d9 63 63 63 63 
377a4 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
377a8 3db 30 18 00 66 
377ac 3dc 66 66 66 3C 
377b0 3dd 18 18 18 18 
377b4 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
377b8 3df 00 00 00 08 
377bc 3e0 0C 0C 3F 0C 
377c0 3e1 0C 0C 0C 6C 
377c4 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
377c8 3e3 30 18 00 00 
377cc 3e4 00 00 00 00 
377d0 3e5 00 00 00 00 
377d4 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
377d8 3e7 00 00 00 00 
377dc 3e8 00 00 00 00 | 	byte	$00[8]
377e0 3e9 7F 00 00 00 
377e4 3ea 00 00 00 00 
377e8 3eb 66 33 00 00 
377ec 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
377f0 3ed 00 00 00 00 
377f4 3ee 00 00 00 00 
377f8 3ef 00 00 00 00 
377fc 3f0 00 00 00 00 
37800 3f1 00 00 00 00 
37804 3f2 00          | 	byte	$00[21]
37805 3f2 0C 06 3C 36 
37809 3f3 1C 00 00 00 
3780d 3f4 00 00 00 00 
37811 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37815 3f6 00 00 00 63 
37819 3f7 3E 00 00 00 
3781d 3f8 00 00 00 00 
37821 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37825 3fa 00 00 00 00 
37829 3fb 3E 63 06 1C 
3782d 3fc 36 63 63 36 
37831 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
37835 3fe 00 00 00 00 
37839 3ff 00 00 00 00 | 	byte	$00[8]
3783d 400 18 00 7E 00 
37841 401 18 00 00 00 
37845 402 00 00 00 00 
37849 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3784d 404 00 00 00 00 
37851 405 00 00 00 00 | 	byte	$00[8]
37855 406 18 30 1E 00 
37859 407 00 00 1C 36 
3785d 408 36 1C 00 00 
37861 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
37865 40a 00 00 00 00 
37869 40b 63 00 00 00 
3786d 40c 00 00 00 00 
37871 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37875 40e 00 00 00 18 
37879 40f 18 00 00 00 
3787d 410 00 00 00 00 
37881 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37885 412 00 00 00 00 
37889 413 00          | 	byte	$00[5]
3788a 413 CC 66 33 00 
3788e 414 33 33 33 33 
37892 415 33 33 6E 00 
37896 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
3789a 417 00 3F 66 66 
3789e 418 66 3E 36 66 
378a2 419 66 66 6F 00 
378a6 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
378aa 41b 36 1C 08 00 
378ae 41c 3B 6E 66 06 
378b2 41d 06 06 0F 00 
378b6 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
378ba 41f 00 00 00 7E 
378be 420 7E 7E 7E 7E 
378c2 421 7E 7E 00 00 
378c6 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
378ca 423 00 00 00 00 
378ce 424 00 00 00 00 
378d2 425 00 00 00 00 
378d6 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
378d8 427 00 00 00 00 
      ...             
37908 433 00 00 00 00 
3790c 434 00 00 00    | st_font        file "st4font.def"
3790f 434 FF FF 00 00 
37913 435 00 00 00 00 
37917 436 00 18 18 18 
3791b 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3791f 438 18 18 18 18 
37923 439 18 18 18 18 
37927 43a 18          | 	byte	$18[9]
37928 43b 00 00 00 00 
3792c 43c 00 00 00    | 	byte	$00[7]
3792f 43c FF FF 18 18 
37933 43d 18 18 18 18 
37937 43e 18 18 18 18 
3793b 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3793f 440 FF FF 00 00 
37943 441 00 00 00 00 
37947 442 00 18 18 18 
3794b 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3794f 444 1F 1F 18 18 
37953 445 18 18 18 18 
37957 446 18 18 18 18 
3795b 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3795f 448 F8 F8 18 18 
37963 449 18 18 18 18 
37967 44a 18 00 00 00 
3796b 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3796f 44c 1F 1F 18 18 
37973 44d 18 18 18 18 
37977 44e 18 00 00 00 
3797b 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3797f 450 F8 F8 18 18 
37983 451 18 18 18 18 
37987 452 18 18 18 18 
3798b 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3798f 454 1F 1F 00 00 
37993 455 00 00 00 00 
37997 456 00 18 18 18 
3799b 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3799f 458 F8 F8 00 00 
379a3 459 00 00 00 00 
379a7 45a 00 18 18 18 
379ab 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
379af 45c FF FF 18 18 
379b3 45d 18 18 18 18 
379b7 45e 18 00 00 18 
379bb 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
379bf 460 66 7E 7E 66 
379c3 461 66 66 66 30 
379c7 462 18 00 00 7E 
379cb 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
379cf 464 3E 06 06 06 
379d3 465 06 7E 7E 18 
379d7 466 0C 30 18 3C 
379db 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
379df 468 06 06 06 66 
379e3 469 66 7E 3C 00 
379e7 46a 00 30 18 66 
379eb 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
379ef 46c 7E 7E 76 76 
379f3 46d 66 66 66 00 
379f7 46e 00 30 18 7C 
379fb 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
379ff 470 1C 38 70 60 
37a03 471 60 7E 3E 00 
37a07 472 00 30 18 7E 
37a0b 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
37a0f 474 18 0C 0C 06 
37a13 475 06 7E 7E 00 
37a17 476 00 18 18 00 
37a1b 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
37a1f 478 18 18 0C 0C 
37a23 479 06 7E 7E 00 
37a27 47a 00 30 18 3C 
37a2b 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
37a2f 47c 66 66 66 66 
37a33 47d 66          | 	byte	$66[5]
37a34 47e 7E 3C 00 00 
37a38 47f 00 00 06 06 
37a3c 480 06 06 16 1E 
37a40 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
37a44 482 7E 7E 00 00 
37a48 483 00 00 00 00 
37a4c 484 00 3C 7C 60 
37a50 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
37a54 486 7E 7C 30 18 
37a58 487 00 00 00 00 
37a5c 488 00 3C 7E 66 
37a60 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
37a64 48a 7E 7C 18 0C 
37a68 48b 00 00 30 18 
37a6c 48c 00 3C 3E 06 
37a70 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
37a74 48e 7E 7C 00 00 
37a78 48f 00 00 30 18 
37a7c 490 00 3E 7E 66 
37a80 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
37a84 492 66 66 00 00 
37a88 493 00 00 30 18 
37a8c 494 00 7C 7E 06 
37a90 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
37a94 496 7E 3E 00 00 
37a98 497 00 00 30 18 
37a9c 498 00 7E 7E 30 
37aa0 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
37aa4 49a 7E 7E 00 00 
37aa8 49b 00 00 18 18 
37aac 49c 00 7E 7E 30 
37ab0 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
37ab4 49e 7E 7E 00 00 
37ab8 49f 00 00 30 18 
37abc 4a0 00 3C 7E 66 
37ac0 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
37ac4 4a2 7E 3C 00 00 
37ac8 4a3 00 00 1C 1C 
37acc 4a4 18 18 38 3C 
37ad0 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
37ad4 4a6 3C 3C 00 00 
37ad8 4a7 00 00 00 00 
37adc 4a8 00 00 00 00 
37ae0 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37ae4 4aa 00 00 00 00 
37ae8 4ab 00 00       | 	byte	$00[6]
37aea 4ab 18 18 18 18 
37aee 4ac 18 18 18 18 | 	byte	$18[8]
37af2 4ad 00 00 18 18 
37af6 4ae 00 00 00 00 
37afa 4af 66 66 66 66 
37afe 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
37b02 4b1 00 00 00 00 
37b06 4b2 00 00 00 00 
37b0a 4b3 00          | 	byte	$00[9]
37b0b 4b3 66 66 FF FF 
37b0f 4b4 66 66 FF FF 
37b13 4b5 66 66 00 00 
37b17 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
37b1b 4b7 7C 7E 06 06 
37b1f 4b8 3E 7C 60 60 
37b23 4b9 7E 3E 18 18 
37b27 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
37b2b 4bb 66 30 30 18 
37b2f 4bc 18 0C 0C 66 
37b33 4bd 66 00 00 00 
37b37 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
37b3b 4bf 66 66 3C 1C 
37b3f 4c0 1C FC FE 66 
37b43 4c1 66 FE FC 00 
37b47 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
37b4b 4c3 18 18 18 18 
37b4f 4c4 00 00 00 00 
37b53 4c5 00 00 00 00 
37b57 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
37b5b 4c7 18 1C 0C 0C 
37b5f 4c8 0C 0C 0C 0C 
37b63 4c9 1C 18 30 00 
37b67 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
37b6b 4cb 18 38 30 30 
37b6f 4cc 30 30 30 30 
37b73 4cd 38 18 0C 00 
37b77 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
37b7b 4cf 66 66 3C 3C 
37b7f 4d0 FF FF 3C 3C 
37b83 4d1 66 66 00 00 
37b87 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
37b8b 4d3 00 18 18 18 
37b8f 4d4 7E 7E 18 18 
37b93 4d5 18 00 00 00 
37b97 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
37b9b 4d7 00 00 00 00 
37b9f 4d8 00 00       | 	byte	$00[6]
37ba1 4d9 18 18 18 18 
37ba5 4da 18          | 	byte	$18[5]
37ba6 4da 0C 04 00 00 
37baa 4db 00 00 00 00 
37bae 4dc 7E 7E 00 00 
37bb2 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
37bb6 4de 00 00 00 00 
37bba 4df 00 00 00 00 
37bbe 4e0 00 00 00 00 
37bc2 4e1 00          | 	byte	$00[13]
37bc3 4e1 18 18 18 00 
37bc7 4e2 00 00 00 60 
37bcb 4e3 60 60 30 30 
37bcf 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
37bd3 4e5 06 06 06 00 
37bd7 4e6 00 00 00 3C 
37bdb 4e7 7E 66 66 66 
37bdf 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
37be3 4e9 66 7E 3C 00 
37be7 4ea 00 00 00 18 
37beb 4eb 18 1C 1C 18 
37bef 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
37bf3 4ed 18 7E 7E 00 
37bf7 4ee 00 00 00 3C 
37bfb 4ef 7E 66 66 30 
37bff 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
37c03 4f1 0C 7E 7E 00 
37c07 4f2 00 00 00 7E 
37c0b 4f3 7E 30 30 18 
37c0f 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
37c13 4f5 66 7E 3C 00 
37c17 4f6 00 00 00 30 
37c1b 4f7 30 38 38 3C 
37c1f 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
37c23 4f9 7E 30 30 00 
37c27 4fa 00 00 00 7E 
37c2b 4fb 7E 06 06 3E 
37c2f 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
37c33 4fd 66 7E 3C 00 
37c37 4fe 00 00 00 38 
37c3b 4ff 3C 0E 06 06 
37c3f 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
37c43 501 66 7E 3C 00 
37c47 502 00 00 00 7E 
37c4b 503 7E 60 60 30 
37c4f 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
37c53 505 0C 0C 0C 00 
37c57 506 00 00 00 3C 
37c5b 507 7E 66 66 3C 
37c5f 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
37c63 509 66 7E 3C 00 
37c67 50a 00 00 00 3C 
37c6b 50b 7E 66 66 7E 
37c6f 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
37c73 50d 70 3C 1C 00 
37c77 50e 00 00 00 00 
37c7b 50f 00 00 18 18 
37c7f 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
37c83 511 18 18 18 00 
37c87 512 00 00 00 00 
37c8b 513 00 00 18 18 
37c8f 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
37c93 515 18 18 18 0C 
37c97 516 04 00 00 00 
37c9b 517 70 38 1C 0E 
37c9f 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
37ca3 519 70 00 00 00 
37ca7 51a 00 00 00 00 
37cab 51b 00 00 7E 7E 
37caf 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
37cb3 51d 00 00 00 00 
37cb7 51e 00 00 00 00 | 	byte	$00[8]
37cbb 51f 0E 1C 38 70 
37cbf 520 E0 70 38 1C 
37cc3 521 0E 00 00 00 
37cc7 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
37ccb 523 7E 66 66 30 
37ccf 524 30 18 18 18 
37cd3 525 00 18 18 00 
37cd7 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
37cdb 527 7E 66 66 66 
37cdf 528 66 36 06 66 
37ce3 529 66 7E 3C 00 
37ce7 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
37ceb 52b 3C 7E 66 66 
37cef 52c 66 7E 7E 66 
37cf3 52d 66 66 66 00 
37cf7 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
37cfb 52f 7E 66 66 7E 
37cff 530 3E 66 66 66 
37d03 531 66 7E 3E 00 
37d07 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
37d0b 533 7E 66 66 06 
37d0f 534 06 06 06 66 
37d13 535 66 7E 3C 00 
37d17 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
37d1b 537 7E 66 66 66 
37d1f 538 66 66 66 66 
37d23 539 66 7E 3E 00 
37d27 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
37d2b 53b 7E 06 06 3E 
37d2f 53c 3E 06 06 06 
37d33 53d 06 7E 7E 00 
37d37 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
37d3b 53f 7E 06 06 3E 
37d3f 540 3E 06 06 06 
37d43 541 06 06 06 00 
37d47 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
37d4b 543 7E 06 06 76 
37d4f 544 76 66 66 66 
37d53 545 66 7E 3C 00 
37d57 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
37d5b 547 66 66 66 7E 
37d5f 548 7E 66 66 66 
37d63 549 66 66 66 00 
37d67 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
37d6b 54b 7E 18 18 18 
37d6f 54c 18 18 18 18 
37d73 54d 18 7E 7E 00 
37d77 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
37d7b 54f 60 60 60 60 
37d7f 550 60 60 60    | 	byte	$60[7]
37d82 551 66 66 7E 3C 
37d86 552 00 00 00 00 
37d8a 553 66 66 36 36 
37d8e 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
37d92 555 66 66 C6 C6 
37d96 556 00 00 00 00 
37d9a 557 06 06 06 06 
37d9e 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
37da2 559 06 06 7E 7E 
37da6 55a 00 00 00 00 
37daa 55b C6 C6 EE EE 
37dae 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
37db2 55d C6 C6 C6 C6 
37db6 55e 00 00 00 00 
37dba 55f 66 66 66 6E 
37dbe 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
37dc2 561 76 66 66 66 
37dc6 562 00 00 00 00 
37dca 563 3C 7E 66 66 
37dce 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
37dd2 565 66 66 7E 3C 
37dd6 566 00 00 00 00 
37dda 567 3E 7E 66 66 
37dde 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
37de2 569 06 06 06 06 
37de6 56a 00 00 00 00 
37dea 56b 3C 7E 66 66 
37dee 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
37df2 56d 66 56 3E 6C 
37df6 56e 00 00 00 00 
37dfa 56f 3E 7E 66 66 
37dfe 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
37e02 571 66 66 C6 C6 
37e06 572 00 00 00 00 
37e0a 573 7C 7E 06 06 
37e0e 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
37e12 575 60 60 7E 3E 
37e16 576 00 00 00 00 
37e1a 577 7E 7E 18 18 
37e1e 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
37e22 579 18 18 18 18 
37e26 57a 00 00 00 00 
37e2a 57b 66 66 66 66 
37e2e 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
37e32 57d 66 66 7E 3C 
37e36 57e 00 00 00 00 
37e3a 57f 66 66 66 66 
37e3e 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
37e42 581 3C 3C 18 18 
37e46 582 00 00 00 00 
37e4a 583 C6 C6 C6 C6 
37e4e 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
37e52 585 FE EE C6 82 
37e56 586 00 00 00 00 
37e5a 587 66 66 66 3C 
37e5e 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
37e62 589 3C 66 66 66 
37e66 58a 00 00 00 00 
37e6a 58b 66 66 66 66 
37e6e 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
37e72 58d 18 18 18 18 
37e76 58e 00 00 00 00 
37e7a 58f 7E 7E 30 30 
37e7e 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
37e82 591 06 06 7E 7E 
37e86 592 00 00 00 00 
37e8a 593 3C 3C 0C 0C 
37e8e 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
37e92 595 0C 0C 3C 3C 
37e96 596 00 00 00 00 
37e9a 597 06 06 0C 0C 
37e9e 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
37ea2 599 60 60 C0 C0 
37ea6 59a 00 00 00 00 
37eaa 59b 3C 3C 30 30 
37eae 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
37eb2 59d 30 30 3C 3C 
37eb6 59e 00 00 00 00 
37eba 59f 18 18 3C 3C 
37ebe 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
37ec2 5a1 00 00 00 00 
37ec6 5a2 00 00 00 00 
37eca 5a3 00 00 00 00 
37ece 5a4 00 00 00 00 
37ed2 5a5 00 00       | 	byte	$00[18]
37ed4 5a6 FE FE 00 00 
37ed8 5a7 00 00 0C 0C 
37edc 5a8 18 18 00 00 
37ee0 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
37ee4 5aa 00 00 00 00 
37ee8 5ab 00 00 00 00 
37eec 5ac 00          | 	byte	$00[9]
37eed 5ac 3C 7C 60 7C 
37ef1 5ad 7E 66 66 7E 
37ef5 5ae 7C 00 00 00 
37ef9 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
37efd 5b0 3E 7E 66 66 
37f01 5b1 66 66 66 7E 
37f05 5b2 3E 00 00 00 
37f09 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
37f0d 5b4 3C 3E 06 06 
37f11 5b5 06 06 06 7E 
37f15 5b6 7C 00 00 00 
37f19 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
37f1d 5b8 7C 7E 66 66 
37f21 5b9 66 66 66 7E 
37f25 5ba 7C 00 00 00 
37f29 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
37f2d 5bc 3C 7E 66 66 
37f31 5bd 7E 06 06 7E 
37f35 5be 7C 00 00 00 
37f39 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
37f3d 5c0 18 7E 7E 18 
37f41 5c1 18 18 18 18 
37f45 5c2 18 00 00 00 
37f49 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
37f4d 5c4 7C 7E 66 66 
37f51 5c5 66 66 7E 7C 
37f55 5c6 60 7E 3E 00 
37f59 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
37f5d 5c8 3E 7E 66 66 
37f61 5c9 66 66 66 66 
37f65 5ca 66 00 00 00 
37f69 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
37f6d 5cc 1C 1C 18 18 
37f71 5cd 18 18 18 3C 
37f75 5ce 3C 00 00 00 
37f79 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
37f7d 5d0 30 30 30 30 
37f81 5d1 30 30 30 30 
37f85 5d2 30          | 	byte	$30[9]
37f86 5d2 3E 1E 00 00 
37f8a 5d3 06 06 06 36 
37f8e 5d4 36 1E 1E 1E 
37f92 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
37f96 5d6 00 00 00 00 
37f9a 5d7 1C 1C 18 18 
37f9e 5d8 18 18 18 18 
37fa2 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
37fa6 5da 00 00 00 00 
37faa 5db 00 00 00    | 	byte	$00[7]
37fad 5dc 6C FE FE D6 
37fb1 5dd D6 C6 C6 C6 
37fb5 5de C6 00 00 00 
37fb9 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
37fbd 5e0 3E 7E 66 66 
37fc1 5e1 66 66 66 66 
37fc5 5e2 66 00 00 00 
37fc9 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
37fcd 5e4 3C 7E 66 66 
37fd1 5e5 66 66 66 7E 
37fd5 5e6 3C 00 00 00 
37fd9 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
37fdd 5e8 3E 7E 66 66 
37fe1 5e9 66 66 66 7E 
37fe5 5ea 3E 06 06 00 
37fe9 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
37fed 5ec 7C 7E 66 66 
37ff1 5ed 66 66 66 7E 
37ff5 5ee 7C 60 60 00 
37ff9 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
37ffd 5f0 3E 7E 66 06 
38001 5f1 06 06 06 06 
38005 5f2 06 00 00 00 
38009 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
3800d 5f4 7C 7E 06 0E 
38011 5f5 3C 70 60 7E 
38015 5f6 3E 00 00 00 
38019 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
3801d 5f8 7E 7E 18 18 
38021 5f9 18 18 18 78 
38025 5fa 70 00 00 00 
38029 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
3802d 5fc 66 66 66 66 
38031 5fd 66 66 66    | 	byte	$66[7]
38034 5fe 7E 7C 00 00 
38038 5ff 00 00 00 00 
3803c 600 00 66 66 66 
38040 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
38044 602 18 18 00 00 
38048 603 00 00 00 00 
3804c 604 00 C6 C6 D6 
38050 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
38054 606 C6 82 00 00 
38058 607 00 00 00 00 
3805c 608 00 66 66 3C 
38060 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
38064 60a 66 66 00 00 
38068 60b 00 00 00 00 
3806c 60c 00 66 66 66 
38070 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
38074 60e 7C 60 7E 3E 
38078 60f 00 00 00 00 
3807c 610 00 7E 7E 30 
38080 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
38084 612 7E 7E 00 00 
38088 613 00 00 30 18 
3808c 614 18 18 18 0C 
38090 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
38094 616 18 30 00 00 
38098 617 00 00 18 18 
3809c 618 18 18 18 18 
380a0 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
380a4 61a 18 18 00 00 
380a8 61b 00 00 0C 18 
380ac 61c 18 18 18 30 
380b0 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
380b4 61e 18 0C 00 00 
380b8 61f 00 00 6C 7E 
380bc 620 36 00 00 00 
380c0 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
380c4 622 00 00 00 00 
380c8 623 00 00 00 00 
380cc 624 00          | 	byte	$00[9]
380cd 624 18 18 18 18 
380d1 625 18 18 00 00 
380d5 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
380d8 627 00 6C FE FE 
380dc 628 7C 38 10 00 
380e0 629 18 18 18 F8 
380e4 62a F8 18 18 18 | a8_font        file "atari8.fnt"
380e8 62b C0 C0 C0 C0 
380ec 62c C0 C0 C0 C0 | 	byte	$c0[8]
380f0 62d 18 18 18 1F 
380f4 62e 1F 00 00 00 
380f8 62f 18 18 18 1F 
380fc 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
38100 631 00 00 00 1F 
38104 632 1F 18 18 18 
38108 633 C0 E0 70 38 
3810c 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
38110 635 03 07 0E 1C 
38114 636 38 70 E0 C0 
38118 637 80 C0 E0 F0 
3811c 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
38120 639 00 00 00 00 
38124 63a F0 F0 F0 F0 
38128 63b 01 03 07 0F 
3812c 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
38130 63d F0 F0 F0 F0 
38134 63e 00 00 00 00 
38138 63f 0F 0F 0F 0F 
3813c 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
38140 641 FF FF 00 00 
38144 642 00 00 00 00 
38148 643 00 00 00 00 
3814c 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
38150 645 00 00 00 00 
38154 646 0F 0F 0F 0F 
38158 647 00 38 38 EE 
3815c 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
38160 649 00 00 00 F8 
38164 64a F8 18 18 18 
38168 64b 00 00 00 FF 
3816c 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
38170 64d 18 18 18 FF 
38174 64e FF 18 18 18 
38178 64f 00 00 3C 7E 
3817c 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
38180 651 00 00 00 00 
38184 652 FF FF FF FF 
38188 653 03 03 03 03 
3818c 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
38190 655 00 00 00 FF 
38194 656 FF 18 18 18 
38198 657 18 18 18 FF 
3819c 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
381a0 659 0F 0F 0F 0F 
381a4 65a 0F 0F 0F 0F | 	byte	$0f[8]
381a8 65b 18 18 18 F8 
381ac 65c F8 00 00 00 
381b0 65d 1E 06 1E 06 
381b4 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
381b8 65f 00 18 3C 7E 
381bc 660 18 18 18 00 
381c0 661 00 18 18 18 
381c4 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
381c8 663 00 18 0C 7E 
381cc 664 0C 18 00 00 
381d0 665 00 18 30 7E 
381d4 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
381d8 667 00 00 00 00 
381dc 668 00 00 00 00 
381e0 669 00          | 	byte	$00[9]
381e1 669 18 18 18 18 
381e5 66a 00 18 00 00 
381e9 66b 66 66 66 00 
381ed 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
381f1 66d 66 FF 66 66 
381f5 66e FF 66 00 18 
381f9 66f 7C 06 3C 60 
381fd 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
38201 671 66 36 18 0C 
38205 672 66 62 00 38 
38209 673 6C 38 1C F6 
3820d 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
38211 675 18 18 18 00 
38215 676 00 00 00 00 
38219 677 70 38 18 18 
3821d 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
38221 679 0E 1C 18 18 
38225 67a 1C 0E 00 00 
38229 67b 66 3C FF 3C 
3822d 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
38231 67d 18 18 7E 18 
38235 67e 18 00 00 00 
38239 67f 00 00 00 00 
3823d 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
38241 681 00 00 7E 00 
38245 682 00 00 00 00 
38249 683 00 00 00 00 
3824d 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
38251 685 60 30 18 0C 
38255 686 06 02 00 00 
38259 687 3C 66 76 6E 
3825d 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
38261 689 18 1C 18 18 
38265 68a 18 7E 00 00 
38269 68b 3C 66 30 18 
3826d 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
38271 68d 7E 30 18 30 
38275 68e 66 3C 00 00 
38279 68f 30 38 3C 36 
3827d 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
38281 691 7E 06 3E 60 
38285 692 66 3C 00 00 
38289 693 3C 06 3E 66 
3828d 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
38291 695 7E 60 30 18 
38295 696 0C 0C 00 00 
38299 697 3C 66 3C 66 
3829d 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
382a1 699 3C 66 7C 60 
382a5 69a 30 1C 00 00 
382a9 69b 00 18 18 00 
382ad 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
382b1 69d 00 18 18 00 
382b5 69e 18 18 0C 60 
382b9 69f 30 18 0C 18 
382bd 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
382c1 6a1 00 7E 00 00 
382c5 6a2 7E 00 00 06 
382c9 6a3 0C 18 30 18 
382cd 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
382d1 6a5 3C 66 30 18 
382d5 6a6 00 18 00 00 
382d9 6a7 3C 66 76 76 
382dd 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
382e1 6a9 18 3C 66 66 
382e5 6aa 7E 66 00 00 
382e9 6ab 3E 66 3E 66 
382ed 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
382f1 6ad 3C 66 06 06 
382f5 6ae 66 3C 00 00 
382f9 6af 1E 36 66 66 
382fd 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
38301 6b1 7E 06 3E 06 
38305 6b2 06 7E 00 00 
38309 6b3 7E 06 3E 06 
3830d 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
38311 6b5 7C 06 06 76 
38315 6b6 66 7C 00 00 
38319 6b7 66 66 7E 66 
3831d 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
38321 6b9 7E 18 18 18 
38325 6ba 18 7E 00 00 
38329 6bb 60 60 60 60 
3832d 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
38331 6bd 66 36 1E 1E 
38335 6be 36 66 00 00 
38339 6bf 06 06 06 06 
3833d 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
38341 6c1 C6 EE FE D6 
38345 6c2 C6 C6 00 00 
38349 6c3 66 6E 7E 7E 
3834d 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
38351 6c5 3C 66 66 66 
38355 6c6 66 3C 00 00 
38359 6c7 3E 66 66 3E 
3835d 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
38361 6c9 3C 66 66 66 
38365 6ca 36 6C 00 00 
38369 6cb 3E 66 66 3E 
3836d 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
38371 6cd 3C 06 3C 60 
38375 6ce 60 3C 00 00 
38379 6cf 7E 18 18 18 
3837d 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
38381 6d1 66 66 66 66 
38385 6d2 66          | 	byte	$66[5]
38386 6d2 7E 00 00 66 
3838a 6d3 66 66 66 3C 
3838e 6d4 18 00 00 C6 
38392 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
38396 6d6 C6 00 00 66 
3839a 6d7 66 3C 3C 66 
3839e 6d8 66 00 00 66 
383a2 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
383a6 6da 18 00 00 7E 
383aa 6db 30 18 0C 06 
383ae 6dc 7E 00 00 78 
383b2 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
383b6 6de 78 00 00 02 
383ba 6df 06 0C 18 30 
383be 6e0 60 00 00 1E 
383c2 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
383c6 6e2 1E 00 00 10 
383ca 6e3 38 6C C6 00 
383ce 6e4 00 00 00 00 
383d2 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
383d6 6e6 FF 00 00 18 
383da 6e7 3C 7E 7E 3C 
383de 6e8 18 00 00 00 
383e2 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
383e6 6ea 7C 00 00 06 
383ea 6eb 06 3E 66 66 
383ee 6ec 3E 00 00 00 
383f2 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
383f6 6ee 3C 00 00 60 
383fa 6ef 60 7C 66 66 
383fe 6f0 7C 00 00 00 
38402 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
38406 6f2 3C 00 00 70 
3840a 6f3 18 7C 18 18 
3840e 6f4 18 00 00 00 
38412 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
38416 6f6 60 3E 00 06 
3841a 6f7 06 3E 66 66 
3841e 6f8 66 00 00 18 
38422 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
38426 6fa 3C 00 00 60 
3842a 6fb 00 60 60 60 
3842e 6fc 60 3C 00 06 
38432 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
38436 6fe 66 00 00 1C 
3843a 6ff 18 18 18 18 
3843e 700 3C 00 00 00 
38442 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
38446 702 C6 00 00 00 
3844a 703 3E 66 66 66 
3844e 704 66 00 00 00 
38452 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
38456 706 3C 00 00 00 
3845a 707 3E 66 66 3E 
3845e 708 06 06 00 00 
38462 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
38466 70a 60 60 00 00 
3846a 70b 3E 66 06 06 
3846e 70c 06 00 00 00 
38472 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
38476 70e 3E 00 00 18 
3847a 70f 7E 18 18 18 
3847e 710 70 00 00 00 
38482 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
38486 712 7C 00 00 00 
3848a 713 66 66 66 3C 
3848e 714 18 00 00 00 
38492 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
38496 716 6C 00 00 00 
3849a 717 66 3C 18 3C 
3849e 718 66 00 00 00 
384a2 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
384a6 71a 30 1E 00 00 
384aa 71b 7E 30 18 0C 
384ae 71c 7E 00 00 18 
384b2 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
384b6 71e 3C 00 18 18 
384ba 71f 18 18 18 18 
384be 720 18 18 00 7E 
384c2 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
384c6 722 60 00 10 18 
384ca 723 1C 1E 1C 18 
384ce 724 10 00 08 18 
384d2 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
384d6 726 08 00       | 	byte	$08, $00
384d8 727 00 6C FE FE 
384dc 728 7C 38 10 00 
384e0 729 18 18 18 F8 
384e4 72a F8 18 18 18 | a8_font2       file "atari8.fnt"
384e8 72b C0 C0 C0 C0 
384ec 72c C0 C0 C0 C0 | 	byte	$c0[8]
384f0 72d 18 18 18 1F 
384f4 72e 1F 00 00 00 
384f8 72f 18 18 18 1F 
384fc 730 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
38500 731 00 00 00 1F 
38504 732 1F 18 18 18 
38508 733 C0 E0 70 38 
3850c 734 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
38510 735 03 07 0E 1C 
38514 736 38 70 E0 C0 
38518 737 80 C0 E0 F0 
3851c 738 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
38520 739 00 00 00 00 
38524 73a F0 F0 F0 F0 
38528 73b 01 03 07 0F 
3852c 73c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
38530 73d F0 F0 F0 F0 
38534 73e 00 00 00 00 
38538 73f 0F 0F 0F 0F 
3853c 740 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
38540 741 FF FF 00 00 
38544 742 00 00 00 00 
38548 743 00 00 00 00 
3854c 744 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
38550 745 00 00 00 00 
38554 746 0F 0F 0F 0F 
38558 747 00 38 38 EE 
3855c 748 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
38560 749 00 00 00 F8 
38564 74a F8 18 18 18 
38568 74b 00 00 00 FF 
3856c 74c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
38570 74d 18 18 18 FF 
38574 74e FF 18 18 18 
38578 74f 00 00 3C 7E 
3857c 750 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
38580 751 00 00 00 00 
38584 752 FF FF FF FF 
38588 753 03 03 03 03 
3858c 754 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
38590 755 00 00 00 FF 
38594 756 FF 18 18 18 
38598 757 18 18 18 FF 
3859c 758 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
385a0 759 0F 0F 0F 0F 
385a4 75a 0F 0F 0F 0F | 	byte	$0f[8]
385a8 75b 18 18 18 F8 
385ac 75c F8 00 00 00 
385b0 75d 1E 06 1E 06 
385b4 75e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
385b8 75f 00 18 3C 7E 
385bc 760 18 18 18 00 
385c0 761 00 18 18 18 
385c4 762 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
385c8 763 00 18 0C 7E 
385cc 764 0C 18 00 00 
385d0 765 00 18 30 7E 
385d4 766 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
385d8 767 00 00 00 00 
385dc 768 00 00 00 00 
385e0 769 00          | 	byte	$00[9]
385e1 769 18 18 18 18 
385e5 76a 00 18 00 00 
385e9 76b 66 66 66 00 
385ed 76c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
385f1 76d 66 FF 66 66 
385f5 76e FF 66 00 18 
385f9 76f 7C 06 3C 60 
385fd 770 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
38601 771 66 36 18 0C 
38605 772 66 62 00 38 
38609 773 6C 38 1C F6 
3860d 774 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
38611 775 18 18 18 00 
38615 776 00 00 00 00 
38619 777 70 38 18 18 
3861d 778 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
38621 779 0E 1C 18 18 
38625 77a 1C 0E 00 00 
38629 77b 66 3C FF 3C 
3862d 77c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
38631 77d 18 18 7E 18 
38635 77e 18 00 00 00 
38639 77f 00 00 00 00 
3863d 780 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
38641 781 00 00 7E 00 
38645 782 00 00 00 00 
38649 783 00 00 00 00 
3864d 784 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
38651 785 60 30 18 0C 
38655 786 06 02 00 00 
38659 787 3C 66 76 6E 
3865d 788 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
38661 789 18 1C 18 18 
38665 78a 18 7E 00 00 
38669 78b 3C 66 30 18 
3866d 78c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
38671 78d 7E 30 18 30 
38675 78e 66 3C 00 00 
38679 78f 30 38 3C 36 
3867d 790 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
38681 791 7E 06 3E 60 
38685 792 66 3C 00 00 
38689 793 3C 06 3E 66 
3868d 794 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
38691 795 7E 60 30 18 
38695 796 0C 0C 00 00 
38699 797 3C 66 3C 66 
3869d 798 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
386a1 799 3C 66 7C 60 
386a5 79a 30 1C 00 00 
386a9 79b 00 18 18 00 
386ad 79c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
386b1 79d 00 18 18 00 
386b5 79e 18 18 0C 60 
386b9 79f 30 18 0C 18 
386bd 7a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
386c1 7a1 00 7E 00 00 
386c5 7a2 7E 00 00 06 
386c9 7a3 0C 18 30 18 
386cd 7a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
386d1 7a5 3C 66 30 18 
386d5 7a6 00 18 00 00 
386d9 7a7 3C 66 76 76 
386dd 7a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
386e1 7a9 18 3C 66 66 
386e5 7aa 7E 66 00 00 
386e9 7ab 3E 66 3E 66 
386ed 7ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
386f1 7ad 3C 66 06 06 
386f5 7ae 66 3C 00 00 
386f9 7af 1E 36 66 66 
386fd 7b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
38701 7b1 7E 06 3E 06 
38705 7b2 06 7E 00 00 
38709 7b3 7E 06 3E 06 
3870d 7b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
38711 7b5 7C 06 06 76 
38715 7b6 66 7C 00 00 
38719 7b7 66 66 7E 66 
3871d 7b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
38721 7b9 7E 18 18 18 
38725 7ba 18 7E 00 00 
38729 7bb 60 60 60 60 
3872d 7bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
38731 7bd 66 36 1E 1E 
38735 7be 36 66 00 00 
38739 7bf 06 06 06 06 
3873d 7c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
38741 7c1 C6 EE FE D6 
38745 7c2 C6 C6 00 00 
38749 7c3 66 6E 7E 7E 
3874d 7c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
38751 7c5 3C 66 66 66 
38755 7c6 66 3C 00 00 
38759 7c7 3E 66 66 3E 
3875d 7c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
38761 7c9 3C 66 66 66 
38765 7ca 36 6C 00 00 
38769 7cb 3E 66 66 3E 
3876d 7cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
38771 7cd 3C 06 3C 60 
38775 7ce 60 3C 00 00 
38779 7cf 7E 18 18 18 
3877d 7d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
38781 7d1 66 66 66 66 
38785 7d2 66          | 	byte	$66[5]
38786 7d2 7E 00 00 66 
3878a 7d3 66 66 66 3C 
3878e 7d4 18 00 00 C6 
38792 7d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
38796 7d6 C6 00 00 66 
3879a 7d7 66 3C 3C 66 
3879e 7d8 66 00 00 66 
387a2 7d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
387a6 7da 18 00 00 7E 
387aa 7db 30 18 0C 06 
387ae 7dc 7E 00 00 78 
387b2 7dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
387b6 7de 78 00 00 02 
387ba 7df 06 0C 18 30 
387be 7e0 60 00 00 1E 
387c2 7e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
387c6 7e2 1E 00 00 10 
387ca 7e3 38 6C C6 00 
387ce 7e4 00 00 00 00 
387d2 7e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
387d6 7e6 FF 00 00 18 
387da 7e7 3C 7E 7E 3C 
387de 7e8 18 00 00 00 
387e2 7e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
387e6 7ea 7C 00 00 06 
387ea 7eb 06 3E 66 66 
387ee 7ec 3E 00 00 00 
387f2 7ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
387f6 7ee 3C 00 00 60 
387fa 7ef 60 7C 66 66 
387fe 7f0 7C 00 00 00 
38802 7f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
38806 7f2 3C 00 00 70 
3880a 7f3 18 7C 18 18 
3880e 7f4 18 00 00 00 
38812 7f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
38816 7f6 60 3E 00 06 
3881a 7f7 06 3E 66 66 
3881e 7f8 66 00 00 18 
38822 7f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
38826 7fa 3C 00 00 60 
3882a 7fb 00 60 60 60 
3882e 7fc 60 3C 00 06 
38832 7fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
38836 7fe 66 00 00 1C 
3883a 7ff 18 18 18 18 
3883e 800 3C 00 00 00 
38842 801 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
38846 802 C6 00 00 00 
3884a 803 3E 66 66 66 
3884e 804 66 00 00 00 
38852 805 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
38856 806 3C 00 00 00 
3885a 807 3E 66 66 3E 
3885e 808 06 06 00 00 
38862 809 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
38866 80a 60 60 00 00 
3886a 80b 3E 66 06 06 
3886e 80c 06 00 00 00 
38872 80d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
38876 80e 3E 00 00 18 
3887a 80f 7E 18 18 18 
3887e 810 70 00 00 00 
38882 811 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
38886 812 7C 00 00 00 
3888a 813 66 66 66 3C 
3888e 814 18 00 00 00 
38892 815 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
38896 816 6C 00 00 00 
3889a 817 66 3C 18 3C 
3889e 818 66 00 00 00 
388a2 819 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
388a6 81a 30 1E 00 00 
388aa 81b 7E 30 18 0C 
388ae 81c 7E 00 00 18 
388b2 81d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
388b6 81e 3C 00 18 18 
388ba 81f 18 18 18 18 
388be 820 18 18 00 7E 
388c2 821 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
388c6 822 60 00 10 18 
388ca 823 1C 1E 1C 18 
388ce 824 10 00 08 18 
388d2 825 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
388d6 826 08 00       | 	byte	$08, $00
388d8 827 00 00 00 00 
      ...             
38ae4 8aa 00 00 00 00 
38ae8 8ab 00 00       | amiga_font     file "amigafont.def"
38aea 8ab 18 18 18 18 
38aee 8ac 18 18       | 	byte	$18[6]
38af0 8ad 00 18 18 00 
38af4 8ae 00 00 00 00 
38af8 8af 00 00 66 66 
38afc 8b0 66 00 00 00 | 	byte	$00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $00, $00, $00
38b00 8b1 00 00 00 00 
38b04 8b2 00 00 00 00 
38b08 8b3 00 00       | 	byte	$00[10]
38b0a 8b3 36 36 7F 36 
38b0e 8b4 36 36 7F 36 
38b12 8b5 36 00 00 00 
38b16 8b6 00 00 00 00 | 	byte	$36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $00, $00, $00
38b1a 8b7 18 7C 06 06 
38b1e 8b8 3C 60 60 3E 
38b22 8b9 18 00 00 00 
38b26 8ba 00 00 00 00 | 	byte	$18, $7c, $06, $06, $3c, $60, $60, $3e, $18, $00, $00, $00, $00, $00, $00, $00
38b2a 8bb 00 00 C6 69 
38b2e 8bc 36 18 6C 96 
38b32 8bd 63 00 00 00 
38b36 8be 00 00 00 00 | 	byte	$00, $00, $c6, $69, $36, $18, $6c, $96, $63, $00, $00, $00, $00, $00, $00, $00
38b3a 8bf 1C 36 36 1E 
38b3e 8c0 6E 3B 33 73 
38b42 8c1 DE 00 00 00 
38b46 8c2 00 00 00 00 | 	byte	$1c, $36, $36, $1e, $6e, $3b, $33, $73, $de, $00, $00, $00, $00, $00, $00, $00
38b4a 8c3 18 18 0C 00 
38b4e 8c4 00 00 00 00 
38b52 8c5 00 00 00 00 
38b56 8c6 00 00 00 00 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38b5a 8c7 30 18 0C 0C 
38b5e 8c8 0C 0C 0C 18 
38b62 8c9 30 00 00 00 
38b66 8ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00, $00
38b6a 8cb 0C 18 30 30 
38b6e 8cc 30 30 30 18 
38b72 8cd 0C 00 00 00 
38b76 8ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00, $00
38b7a 8cf 00 66 66 3C 
38b7e 8d0 FF 3C 66 66 
38b82 8d1 00 00 00 00 
38b86 8d2 00 00 00 00 | 	byte	$00, $66, $66, $3c, $ff, $3c, $66, $66, $00, $00, $00, $00, $00, $00, $00, $00
38b8a 8d3 00 18 18 18 
38b8e 8d4 7E 18 18 18 
38b92 8d5 00 00 00 00 
38b96 8d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
38b9a 8d7 00 00 00 00 
38b9e 8d8 00 00 00    | 	byte	$00[7]
38ba1 8d9 18 18 0C 00 
38ba5 8da 00 00 00 00 
38ba9 8db 00 00 00 00 
38bad 8dc 00 7E 00 00 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00
38bb1 8dd 00 00 00 00 
38bb5 8de 00 00 00 00 
38bb9 8df 00 00 00 00 
38bbd 8e0 00 00 00 00 | 	byte	$00[16]
38bc1 8e1 18 18 00 00 
38bc5 8e2 00 00 00 00 
38bc9 8e3 00 00 C0 60 
38bcd 8e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $c0, $60, $30, $18, $0c, $06
38bd1 8e5 03 00 00 00 
38bd5 8e6 00 00 00 00 
38bd9 8e7 00 3C 66 66 
38bdd 8e8 76 7E 6E 66 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $76, $7e, $6e, $66
38be1 8e9 66 3C 00 00 
38be5 8ea 00 00 00 00 
38be9 8eb 00 18 1C 1E 
38bed 8ec 18 18 18 18 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18
38bf1 8ed 18 18 00 00 
38bf5 8ee 00 00 00 00 
38bf9 8ef 00 3C 66 60 
38bfd 8f0 60 30 18 0C | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60, $60, $30, $18, $0c
38c01 8f1 06 7E 00 00 
38c05 8f2 00 00 00 00 
38c09 8f3 00 3C 66 60 
38c0d 8f4 60 38 60 60 | 	byte	$06, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60, $60, $38, $60, $60
38c11 8f5 66 3C 00 00 
38c15 8f6 00 00 00 00 
38c19 8f7 00 30 38 3C 
38c1d 8f8 36 33 7F 30 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30
38c21 8f9 30 30 00 00 
38c25 8fa 00 00 00 00 
38c29 8fb 00 7E 06 06 
38c2d 8fc 3E 60 60 60 | 	byte	$30, $30, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06, $3e, $60, $60, $60
38c31 8fd 66 3C 00 00 
38c35 8fe 00 00 00 00 
38c39 8ff 00 38 0C 06 
38c3d 900 06 3E 66 66 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $38, $0c, $06, $06, $3e, $66, $66
38c41 901 66 3C 00 00 
38c45 902 00 00 00 00 
38c49 903 00 7E 60 60 
38c4d 904 60 30 18 18 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $7e, $60, $60, $60, $30, $18, $18
38c51 905 18 18 00 00 
38c55 906 00 00 00 00 
38c59 907 00 3C 66 66 
38c5d 908 66 3C 66 66 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $3c, $66, $66
38c61 909 66 3C 00 00 
38c65 90a 00 00 00 00 
38c69 90b 00 3C 66 66 
38c6d 90c 66 7C 60 60 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $7c, $60, $60
38c71 90d 30 1C 00 00 
38c75 90e 00 00 00 00 
38c79 90f 00 00 00 18 
38c7d 910 18 00 00 18 | 	byte	$30, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $18
38c81 911 18 00 00 00 
38c85 912 00 00 00 00 
38c89 913 00 00 00 18 
38c8d 914 18 00 00 00 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
38c91 915 18 18 0C 00 
38c95 916 00 00 00 00 
38c99 917 00 00 00 60 
38c9d 918 18 06 18 60 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $60, $18, $06, $18, $60
38ca1 919 00 00 00 00 
38ca5 91a 00 00 00 00 
38ca9 91b 00 00 00 00 | 	byte	$00[12]
38cad 91c 7E 00 7E 00 
38cb1 91d 00 00 00 00 
38cb5 91e 00 00 00 00 
38cb9 91f 00 00 00 06 | 	byte	$7e, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $06
38cbd 920 18 60 18 06 
38cc1 921 00 00 00 00 
38cc5 922 00 00 00 00 
38cc9 923 00 3C 66 60 | 	byte	$18, $60, $18, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60
38ccd 924 60 30 18 00 
38cd1 925 18 18 00 00 
38cd5 926 00 00 00 00 
38cd9 927 00 3E 63 63 | 	byte	$60, $30, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63
38cdd 928 7B 6B 7B 03 
38ce1 929 03 1E 00 00 
38ce5 92a 00 00 00 00 
38ce9 92b 00 3E 63 63 | 	byte	$7b, $6b, $7b, $03, $03, $1e, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63
38ced 92c 63 7F 63 63 
38cf1 92d 63 63 00 00 
38cf5 92e 00 00 00 00 
38cf9 92f 00 3E 66 66 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66
38cfd 930 66 3E 66 66 
38d01 931 66 3E 00 00 
38d05 932 00 00 00 00 
38d09 933 00 78 0C 06 | 	byte	$66, $3e, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $78, $0c, $06
38d0d 934 06 06 06 06 
38d11 935 0C 78 00 00 
38d15 936 00 00 00 00 
38d19 937 00 1F 33 63 | 	byte	$06, $06, $06, $06, $0c, $78, $00, $00, $00, $00, $00, $00, $00, $1f, $33, $63
38d1d 938 63 63 63 63 
38d21 939 33 1F 00 00 
38d25 93a 00 00 00 00 
38d29 93b 00 7E 06 06 | 	byte	$63, $63, $63, $63, $33, $1f, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06
38d2d 93c 06 1E 06 06 
38d31 93d 06 7E 00 00 
38d35 93e 00 00 00 00 
38d39 93f 00 7E 06 06 | 	byte	$06, $1e, $06, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06
38d3d 940 06 1E 06 06 
38d41 941 06 06 00 00 
38d45 942 00 00 00 00 
38d49 943 00 3C 66 06 | 	byte	$06, $1e, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $06
38d4d 944 06 76 66 66 
38d51 945 66 7C 00 00 
38d55 946 00 00 00 00 
38d59 947 00 63 63 63 | 	byte	$06, $76, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63
38d5d 948 63 7F 63 63 
38d61 949 63 63 00 00 
38d65 94a 00 00 00 00 
38d69 94b 00 3C 18 18 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00, $3c, $18, $18
38d6d 94c 18 18 18 18 
38d71 94d 18          | 	byte	$18[5]
38d72 94d 3C 00 00 00 
38d76 94e 00 00 00 00 
38d7a 94f 60 60 60 60 
38d7e 950 60 60 60 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $60, $60, $60, $60, $60, $60, $60, $63
38d82 951 3E 00 00 00 
38d86 952 00 00 00 00 
38d8a 953 C3 63 33 1B 
38d8e 954 0F 1B 33 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $c3, $63, $33, $1b, $0f, $1b, $33, $63
38d92 955 C3 00 00 00 
38d96 956 00 00 00 00 
38d9a 957 03 03 03 03 
38d9e 958 03 03 03 03 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $03, $03, $03, $03, $03, $03, $03, $03
38da2 959 7F 00 00 00 
38da6 95a 00 00 00 00 
38daa 95b 63 77 7F 6B 
38dae 95c 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $6b, $63, $63, $63, $63
38db2 95d 63 00 00 00 
38db6 95e 00 00 00 00 
38dba 95f 63 67 6F 7B 
38dbe 960 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7b, $73, $63, $63, $63
38dc2 961 63 00 00 00 
38dc6 962 00 00 00 00 
38dca 963 3E 63 63 63 
38dce 964 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63
38dd2 965 3E 00 00 00 
38dd6 966 00 00 00 00 
38dda 967 3E 66 66 66 
38dde 968 3E 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $3e, $06, $06, $06
38de2 969 06 00 00 00 
38de6 96a 00 00 00 00 
38dea 96b 3E 63 63 63 
38dee 96c 63 63 63 7B | 	byte	$06, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $7b
38df2 96d FE 00 00 00 
38df6 96e 00 00 00 00 
38dfa 96f 1F 33 33 33 
38dfe 970 1F 1B 33 63 | 	byte	$fe, $00, $00, $00, $00, $00, $00, $00, $1f, $33, $33, $33, $1f, $1b, $33, $63
38e02 971 63 00 00 00 
38e06 972 00 00 00 00 
38e0a 973 3C 66 06 0C 
38e0e 974 18 30 60 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $06, $0c, $18, $30, $60, $66
38e12 975 3C 00 00 00 
38e16 976 00 00 00 00 
38e1a 977 7E 18 18 18 
38e1e 978 18 18 18 18 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $7e, $18, $18, $18, $18, $18, $18, $18
38e22 979 18 00 00 00 
38e26 97a 00 00 00 00 
38e2a 97b 63 63 63 63 
38e2e 97c 63 63 63 63 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63
38e32 97d 3E 00 00 00 
38e36 97e 00 00 00 00 
38e3a 97f 63 63 63 63 
38e3e 980 63 36 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36, $36, $1c
38e42 981 08 00 00 00 
38e46 982 00 00 00 00 
38e4a 983 C3 C3 C3 C3 
38e4e 984 C3 DB FF E7 | 	byte	$08, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $c3, $c3, $c3, $db, $ff, $e7
38e52 985 C3 00 00 00 
38e56 986 00 00 00 00 
38e5a 987 C3 C3 66 3C 
38e5e 988 18 3C 66 C3 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $66, $3c, $18, $3c, $66, $c3
38e62 989 C3 00 00 00 
38e66 98a 00 00 00 00 
38e6a 98b C3 C3 66 3C 
38e6e 98c 18 18 18 18 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $66, $3c, $18, $18, $18, $18
38e72 98d 18 00 00 00 
38e76 98e 00 00 00 00 
38e7a 98f 7F 60 60 30 
38e7e 990 18 0C 06 03 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $7f, $60, $60, $30, $18, $0c, $06, $03
38e82 991 7F 00 00 00 
38e86 992 00 00 00 00 
38e8a 993 3C 0C 0C 0C 
38e8e 994 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
38e92 995 3C 00 00 00 
38e96 996 00 00 00 00 
38e9a 997 00 03 06 0C 
38e9e 998 18 30 60 C0 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $03, $06, $0c, $18, $30, $60, $c0
38ea2 999 00 00 00 00 
38ea6 99a 00 00 00 00 | 	byte	$00[8]
38eaa 99b 3C 30 30 30 
38eae 99c 30 30 30 30 
38eb2 99d 3C 00 00 00 
38eb6 99e 00 00 00 00 | 	byte	$3c, $30, $30, $30, $30, $30, $30, $30, $3c, $00, $00, $00, $00, $00, $00, $00
38eba 99f 08 1C 36 63 
38ebe 9a0 00 00 00 00 
38ec2 9a1 00 00 00 00 
38ec6 9a2 00 00 00 00 | 	byte	$08, $1c, $36, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38eca 9a3 00 00 00 00 
38ece 9a4 00 00 00 00 
38ed2 9a5 00          | 	byte	$00[9]
38ed3 9a5 7F 00 00 00 
38ed7 9a6 00 00 00 18 
38edb 9a7 18 30 00 00 
38edf 9a8 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $18, $18, $30, $00, $00, $00, $00, $00, $00
38ee3 9a9 00 00 00 00 
38ee7 9aa 00 00 00 00 
38eeb 9ab 00 00       | 	byte	$00[10]
38eed 9ac 3C 60 7C 66 
38ef1 9ad 66 7C 00 00 
38ef5 9ae 00 00 00 00 
38ef9 9af 00 06 06 06 | 	byte	$3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $06, $06, $06
38efd 9b0 3E 66 66 66 
38f01 9b1 66 3E 00 00 
38f05 9b2 00 00 00 00 
38f09 9b3 00 00 00 00 | 	byte	$3e, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38f0d 9b4 3C 06 06 06 
38f11 9b5 06 3C 00 00 
38f15 9b6 00 00 00 00 
38f19 9b7 00 60 60 60 | 	byte	$3c, $06, $06, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00, $60, $60, $60
38f1d 9b8 7C 66 66 66 
38f21 9b9 66 7C 00 00 
38f25 9ba 00 00 00 00 
38f29 9bb 00 00 00 00 | 	byte	$7c, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38f2d 9bc 3C 66 7E 06 
38f31 9bd 06 3C 00 00 
38f35 9be 00 00 00 00 
38f39 9bf 00 38 0C 0C | 	byte	$3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00, $38, $0c, $0c
38f3d 9c0 3E 0C 0C 0C 
38f41 9c1 0C 0C 00 00 
38f45 9c2 00 00 00 00 
38f49 9c3 00 00 00 00 | 	byte	$3e, $0c, $0c, $0c, $0c, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38f4d 9c4 7C 66 66 66 
38f51 9c5 7C 60 60 3C 
38f55 9c6 00 00 00 00 
38f59 9c7 00 06 06 06 | 	byte	$7c, $66, $66, $66, $7c, $60, $60, $3c, $00, $00, $00, $00, $00, $06, $06, $06
38f5d 9c8 3E 66 66 66 
38f61 9c9 66 66 00 00 
38f65 9ca 00 00 00 00 
38f69 9cb 00 00 18 00 | 	byte	$3e, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00, $00, $18, $00
38f6d 9cc 18 18 18 18 
38f71 9cd 18          | 	byte	$18[5]
38f72 9cd 30 00 00 00 
38f76 9ce 00 00 00 00 
38f7a 9cf 00 30 00 30 
38f7e 9d0 30 30 30 30 | 	byte	$30, $00, $00, $00, $00, $00, $00, $00, $00, $30, $00, $30, $30, $30, $30, $30
38f82 9d1 30 30 1E 00 
38f86 9d2 00 00 00 00 
38f8a 9d3 03 03 03 33 
38f8e 9d4 1B 0F 1B 33 | 	byte	$30, $30, $1e, $00, $00, $00, $00, $00, $03, $03, $03, $33, $1b, $0f, $1b, $33
38f92 9d5 63 00 00 00 
38f96 9d6 00 00 00 00 
38f9a 9d7 18 18 18 18 
38f9e 9d8 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18
38fa2 9d9 30 00 00 00 
38fa6 9da 00 00 00 00 
38faa 9db 00 00 00 37 
38fae 9dc 7F 6B 63 63 | 	byte	$30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $63, $63
38fb2 9dd 63 00 00 00 
38fb6 9de 00 00 00 00 
38fba 9df 00 00 00 3E 
38fbe 9e0 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $66
38fc2 9e1 66 00 00 00 
38fc6 9e2 00 00 00 00 
38fca 9e3 00 00 00 3C 
38fce 9e4 66 66 66 66 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $66
38fd2 9e5 3C 00 00 00 
38fd6 9e6 00 00 00 00 
38fda 9e7 00 00 00 3E 
38fde 9e8 66 66 66 3E | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $3e
38fe2 9e9 06 06 06 00 
38fe6 9ea 00 00 00 00 
38fea 9eb 00 00 00 7C 
38fee 9ec 66 66 66 7C | 	byte	$06, $06, $06, $00, $00, $00, $00, $00, $00, $00, $00, $7c, $66, $66, $66, $7c
38ff2 9ed 60 60 60 00 
38ff6 9ee 00 00 00 00 
38ffa 9ef 00 00 00 3E 
38ffe 9f0 66 06 06 06 | 	byte	$60, $60, $60, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $06, $06, $06
39002 9f1 06 00 00 00 
39006 9f2 00 00 00 00 
3900a 9f3 00 00 00 3C 
3900e 9f4 06 0C 30 60 | 	byte	$06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $06, $0c, $30, $60
39012 9f5 3E 00 00 00 
39016 9f6 00 00 00 00 
3901a 9f7 00 0C 0C 3E 
3901e 9f8 0C 0C 0C 0C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $0c, $0c, $3e, $0c, $0c, $0c, $0c
39022 9f9 38 00 00 00 
39026 9fa 00 00 00 00 
3902a 9fb 00 00 00 66 
3902e 9fc 66 66 66 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66
39032 9fd 7C 00 00 00 
39036 9fe 00 00 00 00 
3903a 9ff 00 00 00 66 
3903e a00 66 66 66 3C | 	byte	$7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c
39042 a01 18 00 00 00 
39046 a02 00 00 00 00 
3904a a03 00 00 00 63 
3904e a04 63 63 6B 3E | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $6b, $3e
39052 a05 36 00 00 00 
39056 a06 00 00 00 00 
3905a a07 00 00 00 63 
3905e a08 36 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36
39062 a09 63 00 00 00 
39066 a0a 00 00 00 00 
3906a a0b 00 00 00 66 
3906e a0c 66 66 66 3C | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c
39072 a0d 18 0C 06 00 
39076 a0e 00 00 00 00 
3907a a0f 00 00 00 7E 
3907e a10 30 18 0C 06 | 	byte	$18, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $30, $18, $0c, $06
39082 a11 7E 00 00 00 
39086 a12 00 00 00 00 
3908a a13 70 18 18 18 
3908e a14 0E 18 18 18 | 	byte	$7e, $00, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18
39092 a15 70 00 00 00 
39096 a16 00 00 00 00 
3909a a17 18 18 18 18 
3909e a18 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18
390a2 a19 18 00 00 00 
390a6 a1a 00 00 00 00 
390aa a1b 0E 18 18 18 
390ae a1c 70 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18
390b2 a1d 0E 00 00 00 
390b6 a1e 00 00 00 00 
390ba a1f 46 5D 31 00 
390be a20 00 00 00 00 | 	byte	$0e, $00, $00, $00, $00, $00, $00, $00, $46, $5d, $31, $00, $00, $00, $00, $00
390c2 a21 00 00 00 00 
390c6 a22 00 00 00 00 | 	byte	$00[8]
390ca a23 C0 F0 3C 0F 
390ce a24 C3 F0 3C 0F 
390d2 a25 03 00 00 00 
390d6 a26 00 00 00 00 | 	byte	$c0, $f0, $3c, $0f, $c3, $f0, $3c, $0f, $03, $00, $00, $00, $00, $00, $00, $00
390da a27 18 18 00 18 
390de a28 18 18 18 18 
390e2 a29 18 00 00 00 
390e6 a2a 00 00 00 00 | 	byte	$18, $18, $00, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
390ea a2b 18 18 7E 1B 
390ee a2c 1B 7E 18 18 
390f2 a2d 00 00 00 00 
390f6 a2e 00 00 00 00 | 	byte	$18, $18, $7e, $1b, $1b, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
390fa a2f 78 CC 0C 0C 
390fe a30 1E 0C 0C 06 
39102 a31 7F 00 00 00 
39106 a32 00 00 00 00 | 	byte	$78, $cc, $0c, $0c, $1e, $0c, $0c, $06, $7f, $00, $00, $00, $00, $00, $00, $00
3910a a33 66 3C 66 66 
3910e a34 3C 66 00 00 
39112 a35 00 00 00 00 
39116 a36 00 00 00 00 | 	byte	$66, $3c, $66, $66, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3911a a37 C3 C3 66 3C 
3911e a38 18 7E 18 18 
39122 a39 18 00 00 00 
39126 a3a 00 00 00 00 | 	byte	$c3, $c3, $66, $3c, $18, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3912a a3b 18 18 18 18 
3912e a3c 00 18 18 18 
39132 a3d 18 00 00 00 
39136 a3e 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3913a a3f 3C 06 06 3C 
3913e a40 66 66 66 3C 
39142 a41 60 60 3C 00 
39146 a42 00 00 00 00 | 	byte	$3c, $06, $06, $3c, $66, $66, $66, $3c, $60, $60, $3c, $00, $00, $00, $00, $00
3914a a43 66 66 00 00 
3914e a44 00 00 00 00 
39152 a45 00 00 00 00 
39156 a46 00 00 00 00 | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3915a a47 7E 81 B9 85 
3915e a48 85 B9 81 7E 
39162 a49 00 00 00 00 
39166 a4a 00 00 00 00 | 	byte	$7e, $81, $b9, $85, $85, $b9, $81, $7e, $00, $00, $00, $00, $00, $00, $00, $00
3916a a4b 3C 33 33 7E 
3916e a4c 00 7F 00 00 
39172 a4d 00 00 00 00 
39176 a4e 00 00 00 00 | 	byte	$3c, $33, $33, $7e, $00, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3917a a4f 00 00 CC 66 
3917e a50 33 66 CC 00 
39182 a51 00 00 00 00 
39186 a52 00 00 00 00 | 	byte	$00, $00, $cc, $66, $33, $66, $cc, $00, $00, $00, $00, $00, $00, $00, $00, $00
3918a a53 7E 60 60 00 
3918e a54 00 00 00 00 
39192 a55 00 00 00 00 
39196 a56 00 00 00 00 | 	byte	$7e, $60, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3919a a57 7E 81 9D A5 
3919e a58 9D A5 81 7E 
391a2 a59 00 00 00 00 
391a6 a5a 00 00 00 00 | 	byte	$7e, $81, $9d, $a5, $9d, $a5, $81, $7e, $00, $00, $00, $00, $00, $00, $00, $00
391aa a5b 7E 00 00 00 
391ae a5c 00 00 00 00 
391b2 a5d 00 00 00 00 
391b6 a5e 00 00 00 00 | 	byte	$7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
391ba a5f 3C 66 66 3C 
391be a60 00 00 00 00 
391c2 a61 00 00 00 00 
391c6 a62 00 00 00 00 | 	byte	$3c, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
391ca a63 18 18 18 7E 
391ce a64 18 18 18 00 
391d2 a65 7E 00 00 00 
391d6 a66 00 00 00 00 | 	byte	$18, $18, $18, $7e, $18, $18, $18, $00, $7e, $00, $00, $00, $00, $00, $00, $00
391da a67 1E 30 30 18 
391de a68 0C 06 3E 00 
391e2 a69 00 00 00 00 
391e6 a6a 00 00 00 00 | 	byte	$1e, $30, $30, $18, $0c, $06, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
391ea a6b 1E 30 30 1C 
391ee a6c 30 30 1E 00 
391f2 a6d 00 00 00 00 
391f6 a6e 00 00 00 00 | 	byte	$1e, $30, $30, $1c, $30, $30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
391fa a6f 30 18 0C 06 
391fe a70 00 00 00 00 
39202 a71 00 00 00 00 
39206 a72 00 00 00 00 | 	byte	$30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3920a a73 00 00 00 66 
3920e a74 66 66 66 66 
39212 a75 FE 06 06 00 
39216 a76 00 00 00 00 | 	byte	$00, $00, $00, $66, $66, $66, $66, $66, $fe, $06, $06, $00, $00, $00, $00, $00
3921a a77 7C 5E 5E 5E 
3921e a78 5C 50 50 50 
39222 a79 50 50 00 00 
39226 a7a 00 00 00 00 | 	byte	$7c, $5e, $5e, $5e, $5c, $50, $50, $50, $50, $50, $00, $00, $00, $00, $00, $00
3922a a7b 00 00 00 18 
3922e a7c 18 00 00 00 
39232 a7d 00 00 00 00 
39236 a7e 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3923a a7f 00 00 00 00 
3923e a80 00 00 00 00 
39242 a81 00          | 	byte	$00[9]
39243 a81 30 18 00 00 
39247 a82 00 00 00 18 
3924b a83 1C 18 18 18 
3924f a84 18 18 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $18, $1c, $18, $18, $18, $18, $18, $00, $00
39253 a85 00 00 00 00 
39257 a86 00 00 00    | 	byte	$00[7]
3925a a87 3C 66 66 3C 
3925e a88 00 7E 00 00 
39262 a89 00 00 00 00 
39266 a8a 00 00 00 00 | 	byte	$3c, $66, $66, $3c, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3926a a8b 00 00 33 66 
3926e a8c CC 66 33 00 
39272 a8d 00 00 00 00 
39276 a8e 00 00 00 00 | 	byte	$00, $00, $33, $66, $cc, $66, $33, $00, $00, $00, $00, $00, $00, $00, $00, $00
3927a a8f 02 63 32 1A 
3927e a90 4E 66 F3 40 
39282 a91 40 00 00 00 
39286 a92 00 00 00 00 | 	byte	$02, $63, $32, $1a, $4e, $66, $f3, $40, $40, $00, $00, $00, $00, $00, $00, $00
3928a a93 04 C6 64 34 
3928e a94 7C 8C 46 23 
39292 a95 F0 00 00 00 
39296 a96 00 00 00 00 | 	byte	$04, $c6, $64, $34, $7c, $8c, $46, $23, $f0, $00, $00, $00, $00, $00, $00, $00
3929a a97 03 C4 66 34 
3929e a98 5B 6C F6 43 
392a2 a99 40 00 00 00 
392a6 a9a 00 00 00 00 | 	byte	$03, $c4, $66, $34, $5b, $6c, $f6, $43, $40, $00, $00, $00, $00, $00, $00, $00
392aa a9b 18 18 00 18 
392ae a9c 0C 06 06 66 
392b2 a9d 3C 00 00 00 
392b6 a9e 00 00 00 00 | 	byte	$18, $18, $00, $18, $0c, $06, $06, $66, $3c, $00, $00, $00, $00, $00, $00, $00
392ba a9f 06 0C 3E 63 
392be aa0 63 7F 63 63 
392c2 aa1 63 00 00 00 
392c6 aa2 00 00 00 00 | 	byte	$06, $0c, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
392ca aa3 30 18 3E 63 
392ce aa4 63 7F 63 63 
392d2 aa5 63 00 00 00 
392d6 aa6 00 00 00 00 | 	byte	$30, $18, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
392da aa7 0C 33 3E 63 
392de aa8 63 63 7F 63 
392e2 aa9 63 00 00 00 
392e6 aaa 00 00 00 00 | 	byte	$0c, $33, $3e, $63, $63, $63, $7f, $63, $63, $00, $00, $00, $00, $00, $00, $00
392ea aab 4E 39 3E 63 
392ee aac 63 7F 63 63 
392f2 aad 63 00 00 00 
392f6 aae 00 00 00 00 | 	byte	$4e, $39, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
392fa aaf 63 00 3E 63 
392fe ab0 63 7F 63 63 
39302 ab1 63 00 00 00 
39306 ab2 00 00 00 00 | 	byte	$63, $00, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
3930a ab3 1C 22 1C 36 
3930e ab4 63 63 7F 63 
39312 ab5 63 00 00 00 
39316 ab6 00 00 00 00 | 	byte	$1c, $22, $1c, $36, $63, $63, $7f, $63, $63, $00, $00, $00, $00, $00, $00, $00
3931a ab7 F8 3C 3C 36 
3931e ab8 F6 3F 33 33 
39322 ab9 F3 00 00 00 
39326 aba 00 00 00 00 | 	byte	$f8, $3c, $3c, $36, $f6, $3f, $33, $33, $f3, $00, $00, $00, $00, $00, $00, $00
3932a abb 78 0C 06 06 
3932e abc 06 06 06 0C 
39332 abd 78 30 18 00 
39336 abe 00 00 00 00 | 	byte	$78, $0c, $06, $06, $06, $06, $06, $0c, $78, $30, $18, $00, $00, $00, $00, $00
3933a abf 0C 18 7E 06 
3933e ac0 06 3E 06 06 
39342 ac1 7E 00 00 00 
39346 ac2 00 00 00 00 | 	byte	$0c, $18, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
3934a ac3 30 18 7E 06 
3934e ac4 06 3E 06 06 
39352 ac5 7E 00 00 00 
39356 ac6 00 00 00 00 | 	byte	$30, $18, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
3935a ac7 18 66 7E 06 
3935e ac8 06 3E 06 06 
39362 ac9 7E 00 00 00 
39366 aca 00 00 00 00 | 	byte	$18, $66, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
3936a acb 66 00 7E 06 
3936e acc 06 3E 06 06 
39372 acd 7E 00 00 00 
39376 ace 00 00 00 00 | 	byte	$66, $00, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
3937a acf 0C 18 3C 18 
3937e ad0 18 18 18 18 
39382 ad1 3C 00 00 00 
39386 ad2 00 00 00 00 | 	byte	$0c, $18, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3938a ad3 30 18 3C 18 
3938e ad4 18 18 18 18 
39392 ad5 3C 00 00 00 
39396 ad6 00 00 00 00 | 	byte	$30, $18, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3939a ad7 18 66 3C 18 
3939e ad8 18 18 18 18 
393a2 ad9 3C 00 00 00 
393a6 ada 00 00 00 00 | 	byte	$18, $66, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
393aa adb 66 00 3C 18 
393ae adc 18 18 18 18 
393b2 add 3C 00 00 00 
393b6 ade 00 00 00 00 | 	byte	$66, $00, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
393ba adf 1E 36 66 66 
393be ae0 6F 66 66 36 
393c2 ae1 1E 00 00 00 
393c6 ae2 00 00 00 00 | 	byte	$1e, $36, $66, $66, $6f, $66, $66, $36, $1e, $00, $00, $00, $00, $00, $00, $00
393ca ae3 8E 73 67 6F 
393ce ae4 7B 73 63 63 
393d2 ae5 63 00 00 00 
393d6 ae6 00 00 00 00 | 	byte	$8e, $73, $67, $6f, $7b, $73, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
393da ae7 06 0C 3E 63 
393de ae8 63 63 63 63 
393e2 ae9 3E 00 00 00 
393e6 aea 00 00 00 00 | 	byte	$06, $0c, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
393ea aeb 30 18 3E 63 
393ee aec 63 63 63 63 
393f2 aed 3E 00 00 00 
393f6 aee 00 00 00 00 | 	byte	$30, $18, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
393fa aef 0C 33 3E 63 
393fe af0 63 63 63 63 
39402 af1 3E 00 00 00 
39406 af2 00 00 00 00 | 	byte	$0c, $33, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3940a af3 8E 71 3E 63 
3940e af4 63 63 63 63 
39412 af5 3E 00 00 00 
39416 af6 00 00 00 00 | 	byte	$8e, $71, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3941a af7 63 00 3E 63 
3941e af8 63 63 63 63 
39422 af9 3E 00 00 00 
39426 afa 00 00 00 00 | 	byte	$63, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3942a afb 00 00 63 36 
3942e afc 1C 1C 36 63 
39432 afd 00 00 00 00 
39436 afe 00 00 00 00 | 	byte	$00, $00, $63, $36, $1c, $1c, $36, $63, $00, $00, $00, $00, $00, $00, $00, $00
3943a aff BE 63 73 7B 
3943e b00 6B 6F 67 63 
39442 b01 3F 00 00 00 
39446 b02 00 00 00 00 | 	byte	$be, $63, $73, $7b, $6b, $6f, $67, $63, $3f, $00, $00, $00, $00, $00, $00, $00
3944a b03 0C 18 63 63 
3944e b04 63 63 63 63 
39452 b05 3E 00 00 00 
39456 b06 00 00 00 00 | 	byte	$0c, $18, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3945a b07 18 0C 63 63 
3945e b08 63 63 63 63 
39462 b09 3E 00 00 00 
39466 b0a 00 00 00 00 | 	byte	$18, $0c, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3946a b0b 08 36 63 63 
3946e b0c 63 63 63 63 
39472 b0d 3E 00 00 00 
39476 b0e 00 00 00 00 | 	byte	$08, $36, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3947a b0f 63 00 63 63 
3947e b10 63 63 63 63 
39482 b11 3E 00 00 00 
39486 b12 00 00 00 00 | 	byte	$63, $00, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3948a b13 30 18 C3 66 
3948e b14 3C 18 18 18 
39492 b15 18 00 00 00 
39496 b16 00 00 00 00 | 	byte	$30, $18, $c3, $66, $3c, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3949a b17 03 03 3F 63 
3949e b18 63 3F 03 03 
394a2 b19 03 00 00 00 
394a6 b1a 00 00 00 00 | 	byte	$03, $03, $3f, $63, $63, $3f, $03, $03, $03, $00, $00, $00, $00, $00, $00, $00
394aa b1b 3C 66 66 66 
394ae b1c 36 66 66 66 
394b2 b1d 36 06 06 00 
394b6 b1e 00 00 00 00 | 	byte	$3c, $66, $66, $66, $36, $66, $66, $66, $36, $06, $06, $00, $00, $00, $00, $00
394ba b1f 06 0C 00 3C 
394be b20 60 7C 66 66 
394c2 b21 7C 00 00 00 
394c6 b22 00 00 00 00 | 	byte	$06, $0c, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
394ca b23 60 30 00 3C 
394ce b24 60 7C 66 66 
394d2 b25 7C 00 00 00 
394d6 b26 00 00 00 00 | 	byte	$60, $30, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
394da b27 18 66 00 3C 
394de b28 60 7C 66 66 
394e2 b29 7C 00 00 00 
394e6 b2a 00 00 00 00 | 	byte	$18, $66, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
394ea b2b 8E 71 00 3C 
394ee b2c 60 7C 66 66 
394f2 b2d 7C 00 00 00 
394f6 b2e 00 00 00 00 | 	byte	$8e, $71, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
394fa b2f 00 66 00 3C 
394fe b30 60 7C 66 66 
39502 b31 7C 00 00 00 
39506 b32 00 00 00 00 | 	byte	$00, $66, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3950a b33 18 24 18 3C 
3950e b34 60 7C 66 66 
39512 b35 7C 00 00 00 
39516 b36 00 00 00 00 | 	byte	$18, $24, $18, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3951a b37 00 00 00 7E 
3951e b38 D8 FE 1B 1B 
39522 b39 EE 00 00 00 
39526 b3a 00 00 00 00 | 	byte	$00, $00, $00, $7e, $d8, $fe, $1b, $1b, $ee, $00, $00, $00, $00, $00, $00, $00
3952a b3b 00 00 00 3C 
3952e b3c 06 06 06 06 
39532 b3d 3C 18 0C 00 
39536 b3e 00 00 00 00 | 	byte	$00, $00, $00, $3c, $06, $06, $06, $06, $3c, $18, $0c, $00, $00, $00, $00, $00
3953a b3f 06 0C 00 3C 
3953e b40 66 7E 06 06 
39542 b41 3C 00 00 00 
39546 b42 00 00 00 00 | 	byte	$06, $0c, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
3954a b43 60 30 00 3C 
3954e b44 66 7E 06 06 
39552 b45 3C 00 00 00 
39556 b46 00 00 00 00 | 	byte	$60, $30, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
3955a b47 18 66 00 3C 
3955e b48 66 7E 06 06 
39562 b49 3C 00 00 00 
39566 b4a 00 00 00 00 | 	byte	$18, $66, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
3956a b4b 00 66 00 3C 
3956e b4c 66 7E 06 06 
39572 b4d 3C 00 00 00 
39576 b4e 00 00 00 00 | 	byte	$00, $66, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
3957a b4f 0C 18 00 18 
3957e b50 18 18 18 18 
39582 b51 30 00 00 00 
39586 b52 00 00 00 00 | 	byte	$0c, $18, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
3958a b53 18 0C 00 0C 
3958e b54 0C 0C 0C 0C 
39592 b55 18 00 00 00 
39596 b56 00 00 00 00 | 	byte	$18, $0c, $00, $0c, $0c, $0c, $0c, $0c, $18, $00, $00, $00, $00, $00, $00, $00
3959a b57 18 66 00 18 
3959e b58 18 18 18 18 
395a2 b59 30 00 00 00 
395a6 b5a 00 00 00 00 | 	byte	$18, $66, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
395aa b5b 00 66 00 18 
395ae b5c 18 18 18 18 
395b2 b5d 30 00 00 00 
395b6 b5e 00 00 00 00 | 	byte	$00, $66, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
395ba b5f 03 06 3F 18 
395be b60 3C 66 66 66 
395c2 b61 3C 00 00 00 
395c6 b62 00 00 00 00 | 	byte	$03, $06, $3f, $18, $3c, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
395ca b63 8E 71 00 3E 
395ce b64 66 66 66 66 
395d2 b65 66 00 00 00 
395d6 b66 00 00 00 00 | 	byte	$8e, $71, $00, $3e, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
395da b67 06 0C 00 3C 
395de b68 66 66 66 66 
395e2 b69 3C 00 00 00 
395e6 b6a 00 00 00 00 | 	byte	$06, $0c, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
395ea b6b 60 30 00 3C 
395ee b6c 66 66 66 66 
395f2 b6d 3C 00 00 00 
395f6 b6e 00 00 00 00 | 	byte	$60, $30, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
395fa b6f 18 66 00 3C 
395fe b70 66 66 66 66 
39602 b71 3C 00 00 00 
39606 b72 00 00 00 00 | 	byte	$18, $66, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3960a b73 8E 71 00 3C 
3960e b74 66 66 66 66 
39612 b75 3C 00 00 00 
39616 b76 00 00 00 00 | 	byte	$8e, $71, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3961a b77 00 66 00 3C 
3961e b78 66 66 66 66 
39622 b79 3C 00 00 00 
39626 b7a 00 00 00 00 | 	byte	$00, $66, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3962a b7b 00 18 18 00 
3962e b7c 7E 00 18 18 
39632 b7d 00 00 00 00 
39636 b7e 00 00 00 00 | 	byte	$00, $18, $18, $00, $7e, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
3963a b7f 00 00 00 7E 
3963e b80 73 7B 6F 67 
39642 b81 3F 00 00 00 
39646 b82 00 00 00 00 | 	byte	$00, $00, $00, $7e, $73, $7b, $6f, $67, $3f, $00, $00, $00, $00, $00, $00, $00
3964a b83 0C 18 00 66 
3964e b84 66 66 66 66 
39652 b85 7C 00 00 00 
39656 b86 00 00 00 00 | 	byte	$0c, $18, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3965a b87 30 18 00 66 
3965e b88 66 66 66 66 
39662 b89 7C 00 00 00 
39666 b8a 00 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3966a b8b 18 66 00 66 
3966e b8c 66 66 66 66 
39672 b8d 7C 00 00 00 
39676 b8e 00 00 00 00 | 	byte	$18, $66, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3967a b8f 00 66 00 66 
3967e b90 66 66 66 66 
39682 b91 7C 00 00 00 
39686 b92 00 00 00 00 | 	byte	$00, $66, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3968a b93 30 18 00 66 
3968e b94 66 66 66 3C 
39692 b95 18 0C 06 00 
39696 b96 00 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $0c, $06, $00, $00, $00, $00, $00
3969a b97 06 06 06 3E 
3969e b98 66 66 66 3E 
396a2 b99 06 06 06 00 
396a6 b9a 00 00 00 00 | 	byte	$06, $06, $06, $3e, $66, $66, $66, $3e, $06, $06, $06, $00, $00, $00, $00, $00
396aa b9b 00 66 00 66 
396ae b9c 66 66 66 3C 
396b2 b9d 18 0C 06 00 
396b6 b9e 00 00 00 00 | 	byte	$00, $66, $00, $66, $66, $66, $66, $3c, $18, $0c, $06, $00, $00, $00, $00, $00
396ba b9f 00 7E 66 66 
396be ba0 66 66 66 66 
396c2 ba1 66 7E 00 00 
396c6 ba2 00 00 00 00 | 	byte	$00, $7e, $66, $66, $66, $66, $66, $66, $66, $7e, $00, $00, $00, $00, $00, $00
396ca ba3 00 00 00 00 
      ...             
398d2 c25 00 00 00 00 
398d6 c26 00 00       | 	byte	$00[526]
398d8 c27 00 00 00 00 
398dc c28 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
398dd c28 80 00 00 00 
398e1 c29 00 80 00 00 
398e5 c2a 80 80 00 00 
398e9 c2b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
398ed c2c 80 00 80 00 
398f1 c2d 00 40 80 00 
398f5 c2e AA AA AA 00 
398f9 c2f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
398fd c30 FF 00 00 00 
39901 c31 00 FF 00 00 
39905 c32 FF FF 00 00 
39909 c33 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
3990d c34 FF 00 FF 00 
39911 c35 00 FF FF 00 
39915 c36 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
39918 c37 00 00 00 00 
3991c c38 00          | ataripalette   file "ataripalettep2.def"
3991d c38 11 11 11 00 
39921 c39 22 22 22 00 
39925 c3a 33 33 33 00 
39929 c3b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
3992d c3c 55 55 55 00 
39931 c3d 66 66 66 00 
39935 c3e 77 77 77 00 
39939 c3f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
3993d c40 99 99 99 00 
39941 c41 AA AA AA 00 
39945 c42 BB BB BB 00 
39949 c43 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
3994d c44 DD DD DD 00 
39951 c45 EE EE EE 00 
39955 c46 FF FF FF 00 
39959 c47 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
3995d c48 00 14 40 00 
39961 c49 00 1E 60 00 
39965 c4a 00 28 80 00 
39969 c4b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
3996d c4c 00 3C BF 00 
39971 c4d 00 46 DF 00 
39975 c4e 00 50 FF 00 
39979 c4f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
3997d c50 39 77 FF 00 
39981 c51 55 8A FF 00 
39985 c52 71 9E FF 00 
39989 c53 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
3998d c54 AA C5 FF 00 
39991 c55 C6 D8 FF 00 
39995 c56 E3 EC FF 00 
39999 c57 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
3999d c58 00 00 40 00 
399a1 c59 00 00 60 00 
399a5 c5a 00 00 80 00 
399a9 c5b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
399ad c5c 00 00 BF 00 
399b1 c5d 00 00 DF 00 
399b5 c5e 00 00 FF 00 
399b9 c5f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
399bd c60 39 39 FF 00 
399c1 c61 55 55 FF 00 
399c5 c62 71 71 FF 00 
399c9 c63 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
399cd c64 AA AA FF 00 
399d1 c65 C6 C6 FF 00 
399d5 c66 E3 E3 FF 00 
399d9 c67 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
399dd c68 20 00 40 00 
399e1 c69 30 00 60 00 
399e5 c6a 40 00 80 00 
399e9 c6b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
399ed c6c 60 00 BF 00 
399f1 c6d 70 00 DF 00 
399f5 c6e 80 00 FF 00 
399f9 c6f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
399fd c70 9C 39 FF 00 
39a01 c71 AA 55 FF 00 
39a05 c72 B8 71 FF 00 
39a09 c73 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
39a0d c74 D5 AA FF 00 
39a11 c75 E3 C6 FF 00 
39a15 c76 F1 E3 FF 00 
39a19 c77 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
39a1d c78 40 00 40 00 
39a21 c79 60 00 60 00 
39a25 c7a 80 00 80 00 
39a29 c7b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
39a2d c7c BF 00 BF 00 
39a31 c7d DF 00 DF 00 
39a35 c7e FF 00 FF 00 
39a39 c7f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
39a3d c80 FF 39 FF 00 
39a41 c81 FF 55 FF 00 
39a45 c82 FF 71 FF 00 
39a49 c83 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
39a4d c84 FF AA FF 00 
39a51 c85 FF C6 FF 00 
39a55 c86 FF E3 FF 00 
39a59 c87 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
39a5d c88 40 00 20 00 
39a61 c89 60 00 30 00 
39a65 c8a 80 00 40 00 
39a69 c8b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
39a6d c8c BF 00 60 00 
39a71 c8d DF 00 70 00 
39a75 c8e FF 00 80 00 
39a79 c8f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
39a7d c90 FF 39 9C 00 
39a81 c91 FF 55 AA 00 
39a85 c92 FF 71 B8 00 
39a89 c93 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
39a8d c94 FF AA D5 00 
39a91 c95 FF C6 E3 00 
39a95 c96 FF E3 F1 00 
39a99 c97 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
39a9d c98 40 00 00 00 
39aa1 c99 60 00 00 00 
39aa5 c9a 80 00 00 00 
39aa9 c9b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
39aad c9c BF 00 00 00 
39ab1 c9d DF 00 00 00 
39ab5 c9e FF 00 00 00 
39ab9 c9f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
39abd ca0 FF 39 39 00 
39ac1 ca1 FF 55 55 00 
39ac5 ca2 FF 71 71 00 
39ac9 ca3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
39acd ca4 FF AA AA 00 
39ad1 ca5 FF C6 C6 00 
39ad5 ca6 FF E3 E3 00 
39ad9 ca7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
39add ca8 40 10 00 00 
39ae1 ca9 60 18 00 00 
39ae5 caa 80 20 00 00 
39ae9 cab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
39aed cac BF 30 00 00 
39af1 cad DF 38 00 00 
39af5 cae FF 40 00 00 
39af9 caf FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
39afd cb0 FF 6A 39 00 
39b01 cb1 FF 80 55 00 
39b05 cb2 FF 95 71 00 
39b09 cb3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
39b0d cb4 FF BF AA 00 
39b11 cb5 FF D5 C6 00 
39b15 cb6 FF EA E3 00 
39b19 cb7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
39b1d cb8 40 20 00 00 
39b21 cb9 60 30 00 00 
39b25 cba 80 40 00 00 
39b29 cbb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
39b2d cbc BF 60 00 00 
39b31 cbd DF 70 00 00 
39b35 cbe FF 80 00 00 
39b39 cbf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
39b3d cc0 FF 9C 39 00 
39b41 cc1 FF AA 55 00 
39b45 cc2 FF B8 71 00 
39b49 cc3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
39b4d cc4 FF D5 AA 00 
39b51 cc5 FF E3 C6 00 
39b55 cc6 FF F1 E3 00 
39b59 cc7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
39b5d cc8 40 30 00 00 
39b61 cc9 60 48 00 00 
39b65 cca 80 60 00 00 
39b69 ccb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
39b6d ccc BF 90 00 00 
39b71 ccd DF A8 00 00 
39b75 cce FF C0 00 00 
39b79 ccf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
39b7d cd0 FF CE 39 00 
39b81 cd1 FF D5 55 00 
39b85 cd2 FF DC 71 00 
39b89 cd3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
39b8d cd4 FF EA AA 00 
39b91 cd5 FF F1 C6 00 
39b95 cd6 FF F8 E3 00 
39b99 cd7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
39b9d cd8 30 40 00 00 
39ba1 cd9 48 60 00 00 
39ba5 cda 60 80 00 00 
39ba9 cdb 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
39bad cdc 90 BF 00 00 
39bb1 cdd A8 DF 00 00 
39bb5 cde C0 FF 00 00 
39bb9 cdf C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
39bbd ce0 CE FF 39 00 
39bc1 ce1 D5 FF 55 00 
39bc5 ce2 DC FF 71 00 
39bc9 ce3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
39bcd ce4 EA FF AA 00 
39bd1 ce5 F1 FF C6 00 
39bd5 ce6 F8 FF E3 00 
39bd9 ce7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
39bdd ce8 00 40 00 00 
39be1 ce9 00 60 00 00 
39be5 cea 00 80 00 00 
39be9 ceb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
39bed cec 00 BF 00 00 
39bf1 ced 00 DF 00 00 
39bf5 cee 00 FF 00 00 
39bf9 cef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
39bfd cf0 39 FF 39 00 
39c01 cf1 55 FF 55 00 
39c05 cf2 71 FF 71 00 
39c09 cf3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
39c0d cf4 AA FF AA 00 
39c11 cf5 C6 FF C6 00 
39c15 cf6 E3 FF E3 00 
39c19 cf7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
39c1d cf8 00 40 14 00 
39c21 cf9 00 60 1E 00 
39c25 cfa 00 80 28 00 
39c29 cfb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
39c2d cfc 00 BF 3C 00 
39c31 cfd 00 DF 46 00 
39c35 cfe 00 FF 50 00 
39c39 cff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
39c3d d00 39 FF 77 00 
39c41 d01 55 FF 8A 00 
39c45 d02 71 FF 9E 00 
39c49 d03 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
39c4d d04 AA FF C5 00 
39c51 d05 C6 FF D8 00 
39c55 d06 E3 FF EC 00 
39c59 d07 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
39c5d d08 00 40 28 00 
39c61 d09 00 60 3C 00 
39c65 d0a 00 80 50 00 
39c69 d0b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
39c6d d0c 00 BF 78 00 
39c71 d0d 00 DF 8C 00 
39c75 d0e 00 FF A0 00 
39c79 d0f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
39c7d d10 39 FF B5 00 
39c81 d11 55 FF C0 00 
39c85 d12 71 FF CA 00 
39c89 d13 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
39c8d d14 AA FF DF 00 
39c91 d15 C6 FF EA 00 
39c95 d16 E3 FF F4 00 
39c99 d17 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
39c9d d18 00 40 40 00 
39ca1 d19 00 60 60 00 
39ca5 d1a 00 80 80 00 
39ca9 d1b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
39cad d1c 00 BF BF 00 
39cb1 d1d 00 DF DF 00 
39cb5 d1e 00 FF FF 00 
39cb9 d1f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
39cbd d20 39 FF FF 00 
39cc1 d21 55 FF FF 00 
39cc5 d22 71 FF FF 00 
39cc9 d23 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
39ccd d24 AA FF FF 00 
39cd1 d25 C6 FF FF 00 
39cd5 d26 E3 FF FF 00 
39cd9 d27 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
39cdd d28 00 28 40 00 
39ce1 d29 00 3C 60 00 
39ce5 d2a 00 50 80 00 
39ce9 d2b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
39ced d2c 00 78 BF 00 
39cf1 d2d 00 8C DF 00 
39cf5 d2e 00 A0 FF 00 
39cf9 d2f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
39cfd d30 39 B5 FF 00 
39d01 d31 55 C0 FF 00 
39d05 d32 71 CA FF 00 
39d09 d33 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
39d0d d34 AA DF FF 00 
39d11 d35 C6 EA FF 00 
39d15 d36 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
39d18 d37 00 00 00 00 
39d1c d38 00          | ataripalette2  file "ataripalettep2.def"
39d1d d38 11 11 11 00 
39d21 d39 22 22 22 00 
39d25 d3a 33 33 33 00 
39d29 d3b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
39d2d d3c 55 55 55 00 
39d31 d3d 66 66 66 00 
39d35 d3e 77 77 77 00 
39d39 d3f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
39d3d d40 99 99 99 00 
39d41 d41 AA AA AA 00 
39d45 d42 BB BB BB 00 
39d49 d43 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
39d4d d44 DD DD DD 00 
39d51 d45 EE EE EE 00 
39d55 d46 FF FF FF 00 
39d59 d47 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
39d5d d48 00 14 40 00 
39d61 d49 00 1E 60 00 
39d65 d4a 00 28 80 00 
39d69 d4b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
39d6d d4c 00 3C BF 00 
39d71 d4d 00 46 DF 00 
39d75 d4e 00 50 FF 00 
39d79 d4f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
39d7d d50 39 77 FF 00 
39d81 d51 55 8A FF 00 
39d85 d52 71 9E FF 00 
39d89 d53 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
39d8d d54 AA C5 FF 00 
39d91 d55 C6 D8 FF 00 
39d95 d56 E3 EC FF 00 
39d99 d57 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
39d9d d58 00 00 40 00 
39da1 d59 00 00 60 00 
39da5 d5a 00 00 80 00 
39da9 d5b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
39dad d5c 00 00 BF 00 
39db1 d5d 00 00 DF 00 
39db5 d5e 00 00 FF 00 
39db9 d5f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
39dbd d60 39 39 FF 00 
39dc1 d61 55 55 FF 00 
39dc5 d62 71 71 FF 00 
39dc9 d63 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
39dcd d64 AA AA FF 00 
39dd1 d65 C6 C6 FF 00 
39dd5 d66 E3 E3 FF 00 
39dd9 d67 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
39ddd d68 20 00 40 00 
39de1 d69 30 00 60 00 
39de5 d6a 40 00 80 00 
39de9 d6b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
39ded d6c 60 00 BF 00 
39df1 d6d 70 00 DF 00 
39df5 d6e 80 00 FF 00 
39df9 d6f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
39dfd d70 9C 39 FF 00 
39e01 d71 AA 55 FF 00 
39e05 d72 B8 71 FF 00 
39e09 d73 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
39e0d d74 D5 AA FF 00 
39e11 d75 E3 C6 FF 00 
39e15 d76 F1 E3 FF 00 
39e19 d77 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
39e1d d78 40 00 40 00 
39e21 d79 60 00 60 00 
39e25 d7a 80 00 80 00 
39e29 d7b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
39e2d d7c BF 00 BF 00 
39e31 d7d DF 00 DF 00 
39e35 d7e FF 00 FF 00 
39e39 d7f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
39e3d d80 FF 39 FF 00 
39e41 d81 FF 55 FF 00 
39e45 d82 FF 71 FF 00 
39e49 d83 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
39e4d d84 FF AA FF 00 
39e51 d85 FF C6 FF 00 
39e55 d86 FF E3 FF 00 
39e59 d87 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
39e5d d88 40 00 20 00 
39e61 d89 60 00 30 00 
39e65 d8a 80 00 40 00 
39e69 d8b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
39e6d d8c BF 00 60 00 
39e71 d8d DF 00 70 00 
39e75 d8e FF 00 80 00 
39e79 d8f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
39e7d d90 FF 39 9C 00 
39e81 d91 FF 55 AA 00 
39e85 d92 FF 71 B8 00 
39e89 d93 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
39e8d d94 FF AA D5 00 
39e91 d95 FF C6 E3 00 
39e95 d96 FF E3 F1 00 
39e99 d97 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
39e9d d98 40 00 00 00 
39ea1 d99 60 00 00 00 
39ea5 d9a 80 00 00 00 
39ea9 d9b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
39ead d9c BF 00 00 00 
39eb1 d9d DF 00 00 00 
39eb5 d9e FF 00 00 00 
39eb9 d9f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
39ebd da0 FF 39 39 00 
39ec1 da1 FF 55 55 00 
39ec5 da2 FF 71 71 00 
39ec9 da3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
39ecd da4 FF AA AA 00 
39ed1 da5 FF C6 C6 00 
39ed5 da6 FF E3 E3 00 
39ed9 da7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
39edd da8 40 10 00 00 
39ee1 da9 60 18 00 00 
39ee5 daa 80 20 00 00 
39ee9 dab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
39eed dac BF 30 00 00 
39ef1 dad DF 38 00 00 
39ef5 dae FF 40 00 00 
39ef9 daf FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
39efd db0 FF 6A 39 00 
39f01 db1 FF 80 55 00 
39f05 db2 FF 95 71 00 
39f09 db3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
39f0d db4 FF BF AA 00 
39f11 db5 FF D5 C6 00 
39f15 db6 FF EA E3 00 
39f19 db7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
39f1d db8 40 20 00 00 
39f21 db9 60 30 00 00 
39f25 dba 80 40 00 00 
39f29 dbb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
39f2d dbc BF 60 00 00 
39f31 dbd DF 70 00 00 
39f35 dbe FF 80 00 00 
39f39 dbf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
39f3d dc0 FF 9C 39 00 
39f41 dc1 FF AA 55 00 
39f45 dc2 FF B8 71 00 
39f49 dc3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
39f4d dc4 FF D5 AA 00 
39f51 dc5 FF E3 C6 00 
39f55 dc6 FF F1 E3 00 
39f59 dc7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
39f5d dc8 40 30 00 00 
39f61 dc9 60 48 00 00 
39f65 dca 80 60 00 00 
39f69 dcb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
39f6d dcc BF 90 00 00 
39f71 dcd DF A8 00 00 
39f75 dce FF C0 00 00 
39f79 dcf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
39f7d dd0 FF CE 39 00 
39f81 dd1 FF D5 55 00 
39f85 dd2 FF DC 71 00 
39f89 dd3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
39f8d dd4 FF EA AA 00 
39f91 dd5 FF F1 C6 00 
39f95 dd6 FF F8 E3 00 
39f99 dd7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
39f9d dd8 30 40 00 00 
39fa1 dd9 48 60 00 00 
39fa5 dda 60 80 00 00 
39fa9 ddb 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
39fad ddc 90 BF 00 00 
39fb1 ddd A8 DF 00 00 
39fb5 dde C0 FF 00 00 
39fb9 ddf C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
39fbd de0 CE FF 39 00 
39fc1 de1 D5 FF 55 00 
39fc5 de2 DC FF 71 00 
39fc9 de3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
39fcd de4 EA FF AA 00 
39fd1 de5 F1 FF C6 00 
39fd5 de6 F8 FF E3 00 
39fd9 de7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
39fdd de8 00 40 00 00 
39fe1 de9 00 60 00 00 
39fe5 dea 00 80 00 00 
39fe9 deb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
39fed dec 00 BF 00 00 
39ff1 ded 00 DF 00 00 
39ff5 dee 00 FF 00 00 
39ff9 def 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
39ffd df0 39 FF 39 00 
3a001 df1 55 FF 55 00 
3a005 df2 71 FF 71 00 
3a009 df3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
3a00d df4 AA FF AA 00 
3a011 df5 C6 FF C6 00 
3a015 df6 E3 FF E3 00 
3a019 df7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
3a01d df8 00 40 14 00 
3a021 df9 00 60 1E 00 
3a025 dfa 00 80 28 00 
3a029 dfb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
3a02d dfc 00 BF 3C 00 
3a031 dfd 00 DF 46 00 
3a035 dfe 00 FF 50 00 
3a039 dff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
3a03d e00 39 FF 77 00 
3a041 e01 55 FF 8A 00 
3a045 e02 71 FF 9E 00 
3a049 e03 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
3a04d e04 AA FF C5 00 
3a051 e05 C6 FF D8 00 
3a055 e06 E3 FF EC 00 
3a059 e07 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
3a05d e08 00 40 28 00 
3a061 e09 00 60 3C 00 
3a065 e0a 00 80 50 00 
3a069 e0b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
3a06d e0c 00 BF 78 00 
3a071 e0d 00 DF 8C 00 
3a075 e0e 00 FF A0 00 
3a079 e0f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
3a07d e10 39 FF B5 00 
3a081 e11 55 FF C0 00 
3a085 e12 71 FF CA 00 
3a089 e13 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
3a08d e14 AA FF DF 00 
3a091 e15 C6 FF EA 00 
3a095 e16 E3 FF F4 00 
3a099 e17 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
3a09d e18 00 40 40 00 
3a0a1 e19 00 60 60 00 
3a0a5 e1a 00 80 80 00 
3a0a9 e1b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
3a0ad e1c 00 BF BF 00 
3a0b1 e1d 00 DF DF 00 
3a0b5 e1e 00 FF FF 00 
3a0b9 e1f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
3a0bd e20 39 FF FF 00 
3a0c1 e21 55 FF FF 00 
3a0c5 e22 71 FF FF 00 
3a0c9 e23 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
3a0cd e24 AA FF FF 00 
3a0d1 e25 C6 FF FF 00 
3a0d5 e26 E3 FF FF 00 
3a0d9 e27 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
3a0dd e28 00 28 40 00 
3a0e1 e29 00 3C 60 00 
3a0e5 e2a 00 50 80 00 
3a0e9 e2b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
3a0ed e2c 00 78 BF 00 
3a0f1 e2d 00 8C DF 00 
3a0f5 e2e 00 A0 FF 00 
3a0f9 e2f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
3a0fd e30 39 B5 FF 00 
3a101 e31 55 C0 FF 00 
3a105 e32 71 CA FF 00 
3a109 e33 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
3a10d e34 AA DF FF 00 
3a111 e35 C6 EA FF 00 
3a115 e36 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
3a118 e37             | 
3a118 e37             | '**********************************************************************************
3a118 e37             | '
3a118 e37             | '        Timings and colors definitions
3a118 e37             | '
3a118 e37             | '**********************************************************************************
3a118 e37             | 
3a118 e37             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
3a118 e37 08 00 00 00 
3a11c e38 3C 00 00 00 
3a120 e39 08 00 00 00 
3a124 e3a 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         340500000,   %1_100111__10_1010_1000__1111_1011,   600,        0,     192, 0, 0
3a128 e3b 07 00 00 00 
3a12c e3c 04 00 00 00 
3a130 e3d 01 00 00 00 
3a134 e3e 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
3a138 e3f 58 02 00 00 
3a13c e40 20 9E 4B 14 
3a140 e41 FB A8 9E 01 
3a144 e42 58 02 00 00 | 	byte	$58, $02, $00, $00, $20, $9e, $4b, $14, $fb, $a8, $9e, $01, $58, $02, $00, $00
3a148 e43 00 00 00 00 
3a14c e44 C0 00 00 00 
3a150 e45 00 00 00 00 
3a154 e46 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a158 e47             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
3a158 e47 00 75 C7 97 
3a15c e48 27 47 F6 0A 
3a160 e49 05 79 CB 9B 
3a164 e4a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
3a168 e4b             | 
3a168 e4b             | ''--------  Initialization  ----------------------------------------------------------------
3a168 e4b             | 
3a168 e4b 28 0C 64 FD | hdmi            setq    #6
3a16c e4c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
3a170 e4d 28 10 64 FD |                 setq    #8
3a174 e4e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
3a178 e4f             | 
3a178 e4f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
3a17c e50 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
3a180 e51 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
3a184 e52 D6 C6 01 F1 |                 add     t1,hbase
3a188 e53 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
3a18c e54 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
3a190 e55 7B 0B 80 5F 
3a194 e56 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
3a198 e57 66 66 86 FF 
3a19c e58 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
3a1a0 e59             | '
3a1a0 e59 D6 C6 01 F6 |                 mov 	t1,hbase			   '
3a1a4 e5a 11 C6 65 F0 |                 shl 	t1,#17                             '
3a1a8 e5b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
3a1ac e5c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
3a1b0 e5d             | 
3a1b0 e5d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
3a1b4 e5e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
3a1b8 e5f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
3a1bc e60             | 
3a1bc e60             | ''--------  frame rendering main loop  ---------------------------------------------------
3a1bc e60             | 
3a1bc e60 28 06 64 FD | p101            setq 	#3
3a1c0 e61 00 A5 05 FB | 		rdlong  vblankptr,ptra
3a1c4 e62 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
3a1c8 e63 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
3a1cc e64 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
3a1d0 e65 00 A0 05 F6 |                 mov     dlinum, #0
3a1d4 e66 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
3a1d8 e67 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
3a1dc e68             | 
3a1dc e68             | 
3a1dc e68 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
3a1e0 e69 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
3a1e4 e6a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
3a1e8 e6b             |                 
3a1e8 e6b             | 
3a1e8 e6b             | 
3a1e8 e6b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
3a1e8 e6b             |   
3a1e8 e6b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
3a1ec e6c 29 FE 65 3D |          if_nc  setq2   #255
3a1f0 e6d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
3a1f4 e6e             | 
3a1f4 e6e             | '' -----   up porch (before the picture)
3a1f4 e6e             | 
3a1f4 e6e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
3a1f8 e6f C1 C4 01 F6 |                 mov     hsync1,sync_001	
3a1fc e70 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
3a200 e71 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
3a204 e72             |  
3a204 e72             |    
3a204 e72             |  
3a204 e72 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3a208 e73 E2 8C B1 FC |                 xzero   m_sn,hsync1
3a20c e74 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
3a210 e75 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3a214 e76 E1 90 C1 FC |                 xcont   m_vi,hsync0
3a218 e77 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
3a21c e78             | 
3a21c e78 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3a220 e79 E2 8C B1 FC |                 xzero   m_sn,hsync1
3a224 e7a 48 00 B0 FD | 		call    #dli
3a228 e7b E1 8E C1 FC |                 xcont   m_bv,hsync0     
3a22c e7c E1 90 C1 FC |                 xcont   m_vi,hsync0
3a230 e7d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
3a234 e7e             |                 	
3a234 e7e             |                 
3a234 e7e             | 
3a234 e7e             |  
3a234 e7e             | '' ------- the main screen drawing starts here
3a234 e7e             | 
3a234 e7e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
3a238 e7f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
3a23c e80 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
3a240 e81 E1 8E C1 FC |                 xcont   m_bv,hsync0
3a244 e82 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
3a248 e83 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
3a24c e84 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
3a250 e85             |               
3a250 e85             | 
3a250 e85 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
3a254 e86 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
3a258 e87             | 
3a258 e87             | ' ---------------- All visible lines displayed now, start vblank  
3a258 e87             | 
3a258 e87 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
3a25c e88 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
3a260 e89 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
3a264 e8a C3 C4 01 F6 |                 mov     hsync1,sync_223
3a268 e8b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
3a26c e8c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
3a270 e8d             | 
3a270 e8d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
3a270 e8d             | 
3a270 e8d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
3a270 e8d             | 
3a270 e8d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
3a274 e8e             | 
3a274 e8e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
3a278 e8f 04 B8 05 A1 |     if_z        add     dlptr2,#4
3a27c e90 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
3a280 e91             | 
3a280 e91 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
3a284 e92 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
3a288 e93 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
3a28c e94 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
3a290 e95 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
3a294 e96             | 
3a294 e96 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
3a298 e97 DD C6 41 F8 |                 getnib  t1,dl,#0
3a29c e98 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
3a2a0 e99 70 00 90 AD |     if_z        jmp     #preload
3a2a4 e9a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
3a2a8 e9b 94 00 90 AD |     if_z        jmp     #preload2
3a2ac e9c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
3a2b0 e9d 0C 00 90 AD |     if_z        jmp     #p390
3a2b4 e9e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
3a2b8 e9f 28 00 90 AD |     if_z        jmp     #p391  
3a2bc ea0             | 
3a2bc ea0 2D 00 64 FD | p308            ret
3a2c0 ea1             |    
3a2c0 ea1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
3a2c4 ea2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
3a2c8 ea3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
3a2cc ea4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
3a2d0 ea5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
3a2d4 ea6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
3a2d8 ea7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
3a2dc ea8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
3a2e0 ea9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
3a2e4 eaa             |  
3a2e4 eaa             | '' --------  Reload palette. To do 
3a2e4 eaa             | 
3a2e4 eaa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
3a2e8 eab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
3a2ec eac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
3a2f0 ead 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
3a2f4 eae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
3a2f8 eaf E0 00 00 FB |         	rdlong  $000, framebuf2         	
3a2fc eb0 70 FF 9F FD |         	jmp     #dli                
3a300 eb1             |       
3a300 eb1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
3a300 eb1             | 
3a300 eb1             | 
3a300 eb1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
3a300 eb1             | 
3a300 eb1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
3a304 eb2 E2 8C B1 FC |                 xzero   m_sn,hsync1
3a308 eb3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3a30c eb4 E1 90 C1 FC |                 xcont   m_vi,hsync0
3a310 eb5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
3a314 eb6             |         
3a314 eb6             | '' -------------- Preload a line from PSRAM        
3a314 eb6             |         
3a314 eb6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
3a318 eb7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
3a31c eb8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
3a320 eb9 DE B4 01 F6 |                 mov     buf1,buf1c
3a324 eba 03 A0 05 F7 |                 incmod  dlinum,#3
3a328 ebb             | 
3a328 ebb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
3a32c ebc 32 B7 01 F6 |                 mov     buf2,a1024
3a330 ebd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
3a334 ebe 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
3a338 ebf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
3a33c ec0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
3a340 ec1             |  
3a340 ec1             |  
3a340 ec1             | preload2      '  incmod  dlinum,#3
3a340 ec1 04 C0 45 F0 |                 shr 	framebuf2,#4
3a344 ec2 ED B2 01 F6 |                 mov 	cmd,affffffff
3a348 ec3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
3a34c ec4 28 02 64 FD |                 setq	#1
3a350 ec5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
3a354 ec6             |                 
3a354 ec6             | 
3a354 ec6             | '' -------------- Draw sprites
3a354 ec6             | 
3a354 ec6 CF 5C 02 F6 | sprite          mov t8,frames
3a358 ec7 10 5C 0E F5 | 		and t8,#16 wz
3a35c ec8 11 48 06 F6 |                 mov spritenum, #17			' 16 +2 sprites. Todo: this should be a parameter
3a360 ec9 10 48 06 A6 | 	if_z    mov spritenum, #16	
3a364 eca             | 		
3a364 eca             | 
3a364 eca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
3a368 ecb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
3a36c ecc EF 56 96 F9 |                 alts    t5,#sprite1xy
3a370 ecd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
3a374 ece 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
3a378 ecf EF 56 96 F9 |                 alts    t5,#sprite1xy
3a37c ed0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
3a380 ed1 0F 4C 66 F7 |                 signx	sprite_x,#15
3a384 ed2 F0 56 96 F9 |                 alts    t5,#sprite1wh
3a388 ed3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
3a38c ed4 01 52 86 F1 |                 sub     sprite_h,#1
3a390 ed5 F0 56 96 F9 |                 alts    t5,#sprite1wh
3a394 ed6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
3a398 ed7             | 
3a398 ed7             | 
3a398 ed7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
3a39c ed8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
3a3a0 ed9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
3a3a4 eda B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
3a3a8 edb 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
3a3ac edc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
3a3b0 edd 00 5E 06 F6 |                 mov 	t9,#0
3a3b4 ede 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
3a3b8 edf 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
3a3bc ee0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
3a3c0 ee1             |      
3a3c0 ee1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
3a3c4 ee2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
3a3c8 ee3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
3a3cc ee4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
3a3d0 ee5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
3a3d4 ee6             |                 
3a3d4 ee6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
3a3d8 ee7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
3a3dc ee8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
3a3e0 ee9             |   		
3a3e0 ee9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
3a3e4 eea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
3a3e8 eeb             | 
3a3e8 eeb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
3a3ec eec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
3a3f0 eed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
3a3f4 eee             |  
3a3f4 eee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
3a3f8 eef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
3a3fc ef0 10 00 90 CD |      if_c 	jmp     #p899		
3a400 ef1             | 	
3a400 ef1             | 	
3a400 ef1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
3a404 ef2 28 CD 01 F1 | 		add	t4,sprite_w
3a408 ef3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
3a40c ef4             | 
3a40c ef4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
3a410 ef5             | 
3a410 ef5 28 59 02 F6 | p899		mov 	t6,sprite_w
3a414 ef6 01 58 86 F1 | 	 	sub     t6,#1
3a418 ef7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
3a41c ef8             | 
3a41c ef8 28 58 62 FD |                 setq   	t6
3a420 ef9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
3a424 efa 28 5D 02 F6 |                 mov t8,sprite_w
3a428 efb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
3a42c efc 24 00 90 AD |         if_z    jmp #p898
3a430 efd             |          
3a430 efd             |         
3a430 efd 70 5F 06 F6 |                 mov  t9,#368
3a434 efe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
3a438 eff             | 
3a438 eff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
3a43c f00 08 5C 06 FA |                 mul t8,#8				' bits to shr
3a440 f01 FF FF 7F FF 
3a444 f02 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
3a448 f03 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
3a44c f04 00 5E 8E F9 |                 altd t9,#0				' and mask 
3a450 f05 2D 01 00 F5 |                 and 0-0, t7
3a454 f06             |                
3a454 f06             | 
3a454 f06 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
3a458 f07 E5 E0 7A FA |                 wmlong 368,t3				
3a45c f08             |                 
3a45c f08 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
3a460 f09 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
3a464 f0a 2D 00 64 FD |                 ret
3a468 f0b             | 	
3a468 f0b             | 	
3a468 f0b             |                
3a468 f0b             |  
3a468 f0b             | '' -------------- Graphics line ------------------------------------------------------------
3a468 f0b             |  
3a468 f0b             | 
3a468 f0b             | '' consts and vars
3a468 f0b             | 
3a468 f0b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
3a46c f0c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
3a470 f0d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
3a474 f0e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
3a478 f0f             | 
3a478 f0f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
3a47c f10             | 
3a47c f10             | '------ these longs will be set by setmode function
3a47c f10             | 
3a47c f10 00 00 00 00 | m_bs            long    0        'blanks before sync
3a480 f11 00 00 00 00 | m_sn            long    0        'sync
3a484 f12 00 00 00 00 | m_bv            long    0        'blanks before visible
3a488 f13 00 00 00 00 | m_vi            long    0        'visible pixels #
3a48c f14             | 'm_border        long    0        'left/right borders
3a48c f14 00 00 00 00 | i_upporch       long    0        'up porch lines
3a490 f15 00 00 00 00 | i_vsync         long    0        'vsync lines
3a494 f16 00 00 00 00 | i_downporch     long    0        'down porch lines
3a498 f17 00 00 00 00 | i_cpl           long    0        'chars/longs per line
3a49c f18 00 00 00 00 | i_totalvis      long    0
3a4a0 f19             | 
3a4a0 f19             | '-------------------------------------
3a4a0 f19             |  
3a4a0 f19 00 00 00 00 | linenum         long    0
3a4a4 f1a 00 00 00 00 | frames          long    0
3a4a8 f1b 00 00 00 00 | dlinum long 0
3a4ac f1c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
3a4b0 f1d             | 
3a4b0 f1d 00 00 00 00 | vblankptr       long    0
3a4b4 f1e 00 00 00 00 | modeptr         long    0
3a4b8 f1f 00 00 00 00 | paletteptr      long    0
3a4bc f20 00 00 00 00 | dlptr           long    0
3a4c0 f21 01 00 00 00 | hbase           long    1
3a4c4 f22 00 00 00 00 | mailbox         long    0
3a4c8 f23 00 00 00 00 | spriteptr          long 0
3a4cc f24             | 
3a4cc f24 00 00 00 00 | cmd             long    0
3a4d0 f25 00 EC 07 00 | buf1            long    $80000-1024-4096
3a4d4 f26 00 04 00 00 | buf2            long    1024
3a4d8 f27 01 00 00 00 | dlptr2          long    1
3a4dc f28 01 00 00 00 | dl              long    1
3a4e0 f29             | 
3a4e0 f29 00 00 00 00 | buf1c long 0
3a4e4 f2a 00 EC 07 00 | buf1d            long    $80000-1024-4096
3a4e8 f2b 01 00 00 00 | framebuf2       long    1
3a4ec f2c 01 00 00 00 | hsync0          long    1
3a4f0 f2d 01 00 00 00 | hsync1          long    1
3a4f4 f2e             | 
3a4f4 f2e 01 00 00 00 | t1              long    1
3a4f8 f2f 00 00 00 00 | t2 long 0
3a4fc f30 00 00 00 00 | t3 long 0
3a500 f31 00 00 00 00 | t4 long 0
3a504 f32             | 
3a504 f32 00 00 00 00 | rcnt            long    0  'dl repeat count
3a508 f33 00 00 00 00 | rcnt2           long    0
3a50c f34 00 00 00 00 | rcnt2a          long    0
3a510 f35 00 00 00 00 | roffset         long    0
3a514 f36 00 00 00 00 | rdl             long    0  'dl repeat line
3a518 f37 00 00 00 00 | dlc             long    0  'dl command
3a51c f38             | 
3a51c f38 FF FF FF FF | affffffff       long    $ffffffff
3a520 f39 00 00 00 00 | sprite1pointer long 0
3a524 f3a 00 00 00 00 | sprite1xy      long 0
3a528 f3b 00 00 00 00 | sprite1wh      long 0
3a52c f3c 00 00 00 00 | sprite2pointer long 0
3a530 f3d 00 00 00 00 | sprite2xy      long 0
3a534 f3e 00 00 00 00 | sprite2wh      long 0
3a538 f3f 00 00 00 00 | sprite3pointer long 0
3a53c f40 00 00 00 00 | sprite3xy      long 0
3a540 f41 00 00 00 00 | sprite3wh      long 0
3a544 f42 00 00 00 00 | sprite4pointer long 0
3a548 f43 00 00 00 00 | sprite4xy      long 0
3a54c f44 00 00 00 00 | sprite4wh      long 0
3a550 f45 00 00 00 00 | sprite5pointer long 0
3a554 f46 00 00 00 00 | sprite5xy      long 0
3a558 f47 00 00 00 00 | sprite5wh      long 0
3a55c f48 00 00 00 00 | sprite6pointer long 0
3a560 f49 00 00 00 00 | sprite6xy      long 0
3a564 f4a 00 00 00 00 | sprite6wh      long 0
3a568 f4b 00 00 00 00 | sprite7pointer long 0
3a56c f4c 00 00 00 00 | sprite7xy      long 0
3a570 f4d 00 00 00 00 | sprite7wh      long 0
3a574 f4e 00 00 00 00 | sprite8pointer long 0
3a578 f4f 00 00 00 00 | sprite8xy      long 0
3a57c f50 00 00 00 00 | sprite8wh      long 0
3a580 f51 00 00 00 00 | sprite9pointer long 0
3a584 f52 00 00 00 00 | sprite9xy      long 0
3a588 f53 00 00 00 00 | sprite9wh      long 0
3a58c f54 00 00 00 00 | sprite10pointer long 0
3a590 f55 00 00 00 00 | sprite10xy      long 0
3a594 f56 00 00 00 00 | sprite10wh      long 0
3a598 f57 00 00 00 00 | sprite11pointer long 0
3a59c f58 00 00 00 00 | sprite11xy      long 0
3a5a0 f59 00 00 00 00 | sprite11wh      long 0
3a5a4 f5a 00 00 00 00 | sprite12pointer long 0
3a5a8 f5b 00 00 00 00 | sprite12xy      long 0
3a5ac f5c 00 00 00 00 | sprite12wh      long 0
3a5b0 f5d 00 00 00 00 | sprite13pointer long 0
3a5b4 f5e 00 00 00 00 | sprite13xy      long 0
3a5b8 f5f 00 00 00 00 | sprite13wh      long 0
3a5bc f60 00 00 00 00 | sprite14pointer long 0
3a5c0 f61 00 00 00 00 | sprite14xy      long 0
3a5c4 f62 00 00 00 00 | sprite14wh      long 0
3a5c8 f63 00 00 00 00 | sprite15pointer long 0
3a5cc f64 00 00 00 00 | sprite15xy      long 0
3a5d0 f65 00 00 00 00 | sprite15wh      long 0
3a5d4 f66 00 00 00 00 | sprite16pointer long 0
3a5d8 f67 00 00 00 00 | sprite16xy      long 0
3a5dc f68 00 00 00 00 | sprite16wh      long 0
3a5e0 f69 00 00 00 00 | sprite17pointer long 0
3a5e4 f6a 00 00 00 00 | sprite17xy      long 0
3a5e8 f6b 00 00 00 00 | sprite17wh      long 0
3a5ec f6c 00 00 00 00 | sprite18pointer long 0
3a5f0 f6d 00 00 00 00 | sprite18xy      long 0
3a5f4 f6e 00 00 00 00 | sprite18wh      long 0
3a5f8 f6f 00 00 00 00 | spritenum long 0
3a5fc f70             | 
3a5fc f70 00 00 00 00 | spriteline long 0
3a600 f71 84 03 00 00 | sprite_x long 900
3a604 f72 00 00 00 00 | sprite_y long 0
3a608 f73 10 00 00 00 | sprite_w long 16
3a60c f74 40 00 00 00 | sprite_h long 64
3a610 f75 00 00 00 00 | l2 long 0
3a614 f76 00 00 00 00 | t5 long 0
3a618 f77 00 00 00 00 | t6 long 0
3a61c f78 00 00 00 00 | t7 long 0
3a620 f79 00 00 00 00 | t8 long 0
3a624 f7a 00 00 00 00 | t9 long 0
3a628 f7b 00 00 00 00 | preloadaddr long 0
3a62c f7c 00 00 00 00 | preloadlineaddr long 0
3a630 f7d 00 04 00 00 | a1024 long 1024
3a634 f7e             | 
3a634 f7e E0 03 00 00 | aa long 992
3a638 f7f FF 03 00 00 | a1023 long 1023
3a63c f80 00 10 00 00 | a4096 long 4096
3a640 f81             |  fit 368
3a640 f81             |  fit 368
3a640 f81             | _psram4_spin2_dat_
3a640 f81 00 00 00 00 
      ...             
3a738 fbf 00 00 00 00 
3a73c fc0 00 00 00 00 |     listdata long 0[8*8]
3a740 fc1             |             orgh
3a740                 | 
3a740                 | ' driver state
3a740     FF FF FF FF | drivercog   long    -1  ' COG id of driver
3a744     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
3a748                 | 
3a748                 | ' delay profile
3a748     07 00 00 00 
3a74c     00 CF 7B 05 
3a750     80 D1 F0 08 
3a754     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
3a758     80 C4 60 0F 
3a75c     80 39 7A 12 
3a760     40 2D D9 13 
3a764     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
3a768                 | 
3a768                 | ' data to be passed to driver when starting it
3a768                 | startupData
3a768     00 00 00 00 |     long    0           ' current frequency
3a76c     00 00 00 10 |     long    FLAGS       ' optional flags for driver
3a770     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
3a774     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
3a778     30 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
3a77c     88 A7 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
3a780     08 A8 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
3a784     00 FF 07 00 |     long    $7FF00   ' address of mailbox structure in HUBRAM
3a788                 | 
3a788                 | ' data for memory
3a788                 | deviceData
3a788                 |     ' 16 bank parameters follow (16MB per bank)
3a788     00 00 00 00 
      ...             
3a7c0     00 00 00 00 
3a7c4     00 00 00 00 |     long    0[16]                               ' banks 0-15
3a7c8                 |     ' 16 banks of pin parameters follow
3a7c8     36 37 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
3a7cc     FF FF FF FF 
      ...             
3a800     FF FF FF FF 
3a804     FF FF FF FF |     long    -1[15]                              ' banks 1-15
3a808                 | 
3a808                 | ' data for COG polling
3a808                 | qosData 
3a808     00 00 FF 7F 
3a80c     00 00 FF 7F 
3a810     00 00 FF 7F 
3a814     00 00 FF 7F |     long    $7FFF0000[8]    ' cog 0-7 default QoS parameters
3a818     00 00 FF 7F 
3a81c     00 00 FF 7F 
3a820     00 00 FF 7F 
3a824     00 00 FF 7F | 	byte	$00, $00, $ff, $7f, $00, $00, $ff, $7f, $00, $00, $ff, $7f, $00, $00, $ff, $7f
3a828                 | 	alignl
3a828                 | _psram4drv_spin2_dat_
3a828                 |                             orgh
3a828                 | 
3a828                 | driver_start
3a828                 |                             org
3a828 000             | '..................................................................................................
3a828 000             | ' Memory layout for COG RAM once operational:
3a828 000             | '
3a828 000             | '  COG RAM address      Usage
3a828 000             | '  ---------------      ----
3a828 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
3a828 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
3a828 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
3a828 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
3a828 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
3a828 000             | '  ~$198-$1F3           State and register variables
3a828 000             | '
3a828 000             | ' Also during driver COG startup:
3a828 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
3a828 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
3a828 000             | '..................................................................................................
3a828 000             |                             
3a828 000             | ' Mailbox storage after vector initialization
3a828 000             | 
3a828 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
3a82c 001 EC DB AB FA | data0                       rdlut   c, b wz                 'read bank info          
3a830 002 EC D7 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
3a834 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
3a838 004 0A DA 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
3a83c 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
3a840 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
3a844 007 08 DA 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
3a848 008 ED D7 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
3a84c 009 00 D6 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
3a850 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
3a854 00b 0F DA 0F F7 | count3                      incmod  c, #15 wz               'next vector
3a858 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
3a85c 00d 0F D8 0F F7 | data4                       incmod  b, #15 wz               'next bank
3a860 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
3a864 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
3a868 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
3a86c 011 DF F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
3a870 012 E0 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
3a874 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
3a878 014 61 AB 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
3a87c 015 A3 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
3a880 016 FF BA 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
3a884 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
3a888 018             | 
3a888 018             | ' Mailbox parameter addresses per COG once patched
3a888 018             |                             
3a888 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
3a88c 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
3a890 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
3a894 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
3a898 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
3a89c 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
3a8a0 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
3a8a4 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
3a8a8 020             | 
3a8a8 020             | '..................................................................................................
3a8a8 020             | ' Per COG request and state setup and service branching
3a8a8 020             |         
3a8a8 020             | cog0                 
3a8a8 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
3a8ac 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
3a8b0 022 CD BD 03 F6 |                             mov     id, id0                 'get COG0 state
3a8b4 023 DE 43 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
3a8b8 024 08 CD AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3a8bc 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3a8c0 026 00 AA 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
3a8c4 027 01 AC 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
3a8c8 028 02 AE 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
3a8cc 029 D5 C5 FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3a8d0 02a 00 C4 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3a8d4 02b 33 C4 63 FD |                             execf   request-0               'jump to service
3a8d8 02c             | cog1                        
3a8d8 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
3a8dc 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
3a8e0 02e CE BD 03 F6 |                             mov     id, id1                 'get COG1 state
3a8e4 02f DE 43 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
3a8e8 030 08 CD AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3a8ec 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3a8f0 032 03 AA 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
3a8f4 033 04 AC 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
3a8f8 034 05 AE 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
3a8fc 035 D5 C5 FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3a900 036 00 C4 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3a904 037 33 C4 63 FD |                             execf   request-0               'jump to service
3a908 038             | cog2                         
3a908 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
3a90c 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
3a910 03a CF BD 03 F6 |                             mov     id, id2                 'get COG2 state
3a914 03b DE 43 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
3a918 03c 08 CD AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3a91c 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3a920 03e 06 AA 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
3a924 03f 07 AC 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
3a928 040 08 AE 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
3a92c 041 D5 C5 FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3a930 042 00 C4 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3a934 043 33 C4 63 FD |                             execf   request-0               'jump to service
3a938 044             | cog3                        
3a938 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
3a93c 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
3a940 046 D0 BD 03 F6 |                             mov     id, id3                 'get COG3 state
3a944 047 DE 43 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
3a948 048 08 CD AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3a94c 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3a950 04a 09 AA 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
3a954 04b 0A AC 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
3a958 04c 0B AE 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
3a95c 04d D5 C5 FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3a960 04e 00 C4 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3a964 04f 33 C4 63 FD |                             execf   request-0               'jump to service
3a968 050             | cog4                        
3a968 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
3a96c 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
3a970 052 D1 BD 03 F6 |                             mov     id, id4                 'get COG4 state
3a974 053 DE 43 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
3a978 054 08 CD AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3a97c 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3a980 056 0C AA 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
3a984 057 0D AC 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
3a988 058 0E AE 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
3a98c 059 D5 C5 FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3a990 05a 00 C4 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3a994 05b 33 C4 63 FD |                             execf   request-0               'jump to service
3a998 05c             | cog5                        
3a998 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
3a99c 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
3a9a0 05e D2 BD 03 F6 |                             mov     id, id5                 'get COG5 state
3a9a4 05f DE 43 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
3a9a8 060 08 CD AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3a9ac 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3a9b0 062 0F AA 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
3a9b4 063 10 AC 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
3a9b8 064 11 AE 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
3a9bc 065 D5 C5 FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3a9c0 066 00 C4 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3a9c4 067 33 C4 63 FD |                             execf   request-0               'jump to service
3a9c8 068             | cog6                        
3a9c8 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
3a9cc 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
3a9d0 06a D3 BD 03 F6 |                             mov     id, id6                 'get COG6 state
3a9d4 06b DE 43 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
3a9d8 06c 08 CD AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3a9dc 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3a9e0 06e 12 AA 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
3a9e4 06f 13 AC 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
3a9e8 070 14 AE 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
3a9ec 071 D5 C5 FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3a9f0 072 00 C4 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3a9f4 073 33 C4 63 FD |                             execf   request-0               'jump to service
3a9f8 074             | cog7                        
3a9f8 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
3a9fc 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
3aa00 076 D4 BD 03 F6 |                             mov     id, id7                 'get COG7 state
3aa04 077 DE 43 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
3aa08 078 08 CD AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3aa0c 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3aa10 07a 15 AA 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
3aa14 07b 16 AC 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
3aa18 07c 17 AE 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
3aa1c 07d D5 C5 FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3aa20 07e 00 C4 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3aa24 07f 33 C4 63 FD |                             execf   request-0               'jump to service
3aa28 080             | 
3aa28 080             |                             fit     128
3aa28 080             |                             fit     128
3aa28 080             | pad                         long    0[128-$]                'align init code to $80
3aa28 080             | 
3aa28 080             | '..................................................................................................
3aa28 080             | 
3aa28 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
3aa28 080             | 
3aa28 080             | init                        
3aa28 080             |                             ' read in the additional LUT RAM code
3aa28 080 F9 3D 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
3aa2c 081 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
3aa30 082 9E 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
3aa34 083             | 
3aa34 083             |                             ' read the startup parameters
3aa34 083 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
3aa38 084 00 3D 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
3aa3c 085             | 
3aa3c 085             |                             ' setup some of the config flag dependent state and patch LUTRAM
3aa3c 085 1C 3E 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
3aa40 086             | 
3aa40 086 F9 6D 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
3aa44 087 01 00 00 5F 
3aa48 088 E1 6C 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
3aa4c 089 1D 3E 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
3aa50 08a A8 53 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
3aa54 08b 00 54 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
3aa58 08c             | 
3aa58 08c             |                             ' setup data pin modes and data bus pin group in streamer commands
3aa58 08c 38 44 07 F5 |                             and     datapins, #%111000      'compute base pin
3aa5c 08d 00 00 00 FF 
3aa60 08e C0 44 47 F5 |                             or      datapins, ##(3<<6)      'configure 4 pins total
3aa64 08f A2 D7 03 F6 |                             mov     a, datapins             'get data pin base
3aa68 090 A2 51 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
3aa6c 091 03 D6 57 F0 |                             shr     a, #3 wc                'determine data pin group
3aa70 092 08 D6 47 F5 |                             or      a, #8
3aa74 093 EB 2F 2B F8 |                             setnib  ximm8, a, #5            'setup bus group in streamer
3aa78 094 13 2E 47 F4 |                             bitc    ximm8, #19
3aa7c 095 EB 31 2B F8 |                             setnib  xrecvdata, a, #5
3aa80 096 13 30 47 F4 |                             bitc    xrecvdata, #19
3aa84 097 EB 33 2B F8 |                             setnib  xsenddata, a, #5
3aa88 098 13 32 47 F4 |                             bitc    xsenddata, #19
3aa8c 099 EB 35 2B F8 |                             setnib  xsendimm, a, #5
3aa90 09a 13 34 47 F4 |                             bitc    xsendimm, #19
3aa94 09b             |  
3aa94 09b             |                             ' setup device control pin states
3aa94 09b 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
3aa98 09c A3 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
3aa9c 09d 01 00 00 FF 
3aaa0 09e 00 46 07 F6 |                             mov     const512, ##512         'prepare constant
3aaa4 09f             | 
3aaa4 09f 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
3aaa8 0a0 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
3aaac 0a1 E1 C9 B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
3aab0 0a2 AD C9 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
3aab4 0a3 E4 4F E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
3aab8 0a4 A7 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
3aabc 0a5 59 4E 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
3aac0 0a6 E4 4D EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
3aac4 0a7 50 4C 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
3aac8 0a8 A6 53 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
3aacc 0a9 A6 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
3aad0 0aa             | '            if_nc           wxpin   #2, clkpin              'configure for 1 clocks between transitions
3aad0 0aa 58 4C 63 3D |             if_nc           drvl    clkpin                  'set clk state low
3aad4 0ab             | pinloop
3aad4 0ab             |                             ' generate minimum CE high time before access
3aad4 0ab A1 07 00 FF 
3aad8 0ac 40 3C 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
3aadc 0ad 18 DA 63 FD |                             getqx   c                       'get P2 clocks per microsecond
3aae0 0ae 96 D6 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
3aae4 0af ED D7 03 FA |                             mul     a, c                    'convert microseconds to clocks
3aae8 0b0 1F D6 63 FD |                             waitx   a                       'delay
3aaec 0b1 F8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
3aaf0 0b2             | 
3aaf0 0b2             |                             ' setup the COG mailboxes and addresses 
3aaf0 0b2 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
3aaf4 0b3 38 68 A5 F9 |                             alti    $+1, #%111_000          'increase D field
3aaf8 0b4 A5 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
3aafc 0b5             | 
3aafc 0b5 28 2E 64 FD |                             setq    #24-1
3ab00 0b6 A5 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
3ab04 0b7             | 
3ab04 0b7             |                             ' setup the polling loop for active COGs 
3ab04 0b7 01 BC 63 FD |                             cogid   id
3ab08 0b8 CD BD 97 F9 |                             alts    id, #id0                'determine id register of control COG
3ab0c 0b9 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
3ab10 0ba 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
3ab14 0bb 0A F0 07 F6 |                             mov     ptra, #10
3ab18 0bc DE F1 03 FA |                             mul     ptra, id
3ab1c 0bd 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
3ab20 0be AE BD 97 F9 |                             alts    id, #cog0_handler       'add to handler base
3ab24 0bf 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
3ab28 0c0 03 BC 07 FA |                             mul     id, #3
3ab2c 0c1 DE 49 B2 F9 |                             setd    ctrlpollinst, id
3ab30 0c2 09 BD A7 FA |                             rdlut   id, ptra[9]             'save original value
3ab34 0c3 09 BB 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
3ab38 0c4 E8 01 B0 FD |                             call    #reloadcogs
3ab3c 0c5 09 BD 37 FC |                             wrlut   id, ptra[9]             'restore original value
3ab40 0c6 2B F0 63 FD |                             pop     ptra                    'restore original ptra
3ab44 0c7             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
3ab44 0c7 D5 DD B7 F9 |                             setd    d, #addr1
3ab48 0c8 60 DC BF F9 |                             sets    d, #(ctrl_vect & $1ff)
3ab4c 0c9 08 04 DC FC |                             rep     #2, #8
3ab50 0ca 3F DC A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
3ab54 0cb 60 AA A7 FA |                             rdlut   addr1-0, #$60-0
3ab58 0cc             | 
3ab58 0cc             |                             'setup control COG service handling, we need to patch 5 instructions
3ab58 0cc             |                             'one existing instruction is moved earlier and four instructions get replaced
3ab58 0cc 01 BC 63 FD |                             cogid   id
3ab5c 0cd 0C D6 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
3ab60 0ce DE D7 03 FA |                             mul     a, id                   'scale ID by separation
3ab64 0cf 24 D6 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
3ab68 0d0 EB DD B3 F9 |                             setd    d, a                    'set this as the destination
3ab6c 0d1 02 D6 07 F1 |                             add     a, #2                   'increment COG address
3ab70 0d2 EB DD BB F9 |                             sets    d, a                    'set this as the source
3ab74 0d3 3C DC A7 F9 |                             alti    d, #%111_100             
3ab78 0d4 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
3ab7c 0d5 EA DC BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
3ab80 0d6 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3ab84 0d7 3F DC A7 F9 |                             alti    d, #%111_111
3ab88 0d8 00 00 00 F6 |                             mov     0-0, 0-0
3ab8c 0d9 A3 DD 03 F1 |                             add     d, const512             'skip two instructions
3ab90 0da A3 DD 03 F1 |                             add     d, const512
3ab94 0db 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3ab98 0dc 3F DC A7 F9 |                             alti    d, #%111_111
3ab9c 0dd 00 00 00 F6 |                             mov     0-0, 0-0
3aba0 0de             |                             
3aba0 0de             |                             ' setup register values for control vector loop setup after we return
3aba0 0de DE BF 03 F6 |                             mov     header, id              'get cog ID
3aba4 0df 0A BE 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
3aba8 0e0 20 BE 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
3abac 0e1 DF C1 03 F6 |                             mov     trailer, header         'determine start/end LUT address
3abb0 0e2 09 C0 07 F1 |                             add     trailer, #9             '...for control region
3abb4 0e3 DD BD 43 F5 |                             or      id, initctrl            'set id field for control COG
3abb8 0e4 CD BD 8F F9 |                             altd    id, #id0
3abbc 0e5 DE 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
3abc0 0e6 F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
3abc4 0e7 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
3abc8 0e8 00 D8 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
3abcc 0e9 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
3abd0 0ea             |  
3abd0 0ea D5 C5 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
3abd4 0eb 07 C4 07 F5 |                             and     request, #7
3abd8 0ec F8 C5 03 F1 |                             add     request, ptra           'add request vector offset
3abdc 0ed E2 C5 A3 FA |                             rdlut   request, request        'lookup jump vector service table 
3abe0 0ee             | 
3abe0 0ee             |                             fit     $100                    'ensure all init code fits this space
3abe0 0ee             |                             fit     $100                    'ensure all init code fits this space
3abe0 0ee             | 
3abe0 0ee 00 00 00 00 
      ...             
3ac20 0fe 00 00 00 00 
3ac24 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
3ac28 100             | 
3ac28 100             | '..................................................................................................
3ac28 100             | ' Error result handling and COG notification of request completion
3ac28 100             | 
3ac28 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
3ac2c 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
3ac30 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
3ac34 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
3ac38 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
3ac3c 105 CD BD 8F F9 | err                         altd    id, #id0                'adjust for the running COG
3ac40 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
3ac44 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
3ac48 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
3ac4c 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
3ac50 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
3ac54 10b 0B BC 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
3ac58 10c DE D7 C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
3ac5c 10d 3F D6 63 AD |             if_z            cogatn  a                       'notify COG via ATN
3ac60 10e             | ' Poller re-starts here after a COG is serviced
3ac60 10e 0F BC 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
3ac64 10f E3 5B 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
3ac68 110 AD 41 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
3ac6c 111             | ' Main dynamic polling loop repeats until a request arrives
3ac6c 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
3ac70 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
3ac74 113 A5 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
3ac78 114             | 
3ac78 114 AE 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
3ac7c 115 32 40 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
3ac80 116 AF 07 B0 FB |                     	    tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
3ac84 117 B0 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
3ac88 118 B1 13 B0 FB |                      	    tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
3ac8c 119 B2 19 B0 FB |                     	    tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
3ac90 11a B3 1F B0 FB |                     	    tjs     req5, cog5_handler      ']This loop is recreated at init time 
3ac94 11b B4 25 B0 FB |                     	    tjs     req6, cog6_handler      ']based on the active COGs being polled
3ac98 11c B5 2B B0 FB |                    	    tjs     req7, cog7_handler      ']and whether priority or round robin.
3ac9c 11d AF 07 B0 FB |                     	    tjs     req1, cog1_handler      ']Any update of COG parameters would also
3aca0 11e B0 0D B0 FB |                   	    tjs     req2, cog2_handler      ']regenerate this code, in case priorities
3aca4 11f B1 13 B0 FB |                      	    tjs     req3, cog3_handler      ']have changed.
3aca8 120 B2 19 B0 FB |                     	    tjs     req4, cog4_handler      ']A skip pattern that is continually 
3acac 121 B3 1F B0 FB |                   	    tjs     req5, cog5_handler      ']changed selects which RR COG is the
3acb0 122 B4 25 B0 FB |                     	    tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
3acb4 123 B5 2B B0 FB | pollinst            	    tjs     req7, cog7_handler      'instruction template for RR COGs
3acb8 124             | 
3acb8 124 AE 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
3acbc 125 32 40 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
3acc0 126             |  
3acc0 126             | '..................................................................................................
3acc0 126             | ' List handler                               
3acc0 126             | 
3acc0 126 01 AA A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
3acc4 127 33 BA 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
3acc8 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
3accc 129 D6 AB 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
3acd0 12a D7 AB BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
3acd4 12b CD BD 8F F9 |                             altd    id, #id0                'get COG state
3acd8 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
3acdc 12d 09 BC 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
3ace0 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
3ace4 12f D5 C5 FB F8 | list_test                   getbyte request, addr1, #3      'get upper byte of this request
3ace8 130 00 C4 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
3acec 131 33 00 60 FD |                             execf   0-0                     'process the request 
3acf0 132             | 
3acf0 132             | '..................................................................................................
3acf0 132             | ' Restoring per COG state and resuming where we left off
3acf0 132             | 
3acf0 132 00 AB A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
3acf4 133 01 AD A7 FA |                             rdlut   hubdata, ptra[1]
3acf8 134 02 AF A7 FA |                             rdlut   count, ptra[2]
3acfc 135 03 B1 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
3ad00 136 D5 C5 FB F8 |                             getbyte request, addr1, #3
3ad04 137 33 CC 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
3ad08 138 04 B3 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
3ad0c 139 05 B5 A7 FA |                             rdlut   offset1, ptra[5]
3ad10 13a 06 B7 A7 FA |                             rdlut   offset2, ptra[6]
3ad14 13b 07 B9 A7 FA |                             rdlut   link, ptra[7]
3ad18 13c 09 CF A7 FA |                             rdlut   orighubsize, ptra[9]
3ad1c 13d 33 CC 63 FD |                             execf   resume                  'then resume what we were doing last time
3ad20 13e             |                    
3ad20 13e             | '..................................................................................................
3ad20 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
3ad20 13e             | 
3ad20 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
3ad24 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
3ad28 140 A4 AB 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
3ad2c 141 CD D7 B7 F9 |                             setd    a, #id0
3ad30 142 D5 D7 BF F9 |                             sets    a, #addr1
3ad34 143 FE FF FF FF 
3ad38 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
3ad3c 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
3ad40 146 3F D6 A7 F9 |                             alti    a, #%111_111 
3ad44 147 00 00 F0 F9 |                             muxq    0-0, 0-0
3ad48 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
3ad4c 149 01 DA 63 FD |                             cogid   c
3ad50 14a ED 3D C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
3ad54 14b 08 D6 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
3ad58 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
3ad5c 14d 07 DA 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
3ad60 14e CD DB 97 F9 | prioloop                    alts    c, #id0
3ad64 14f 00 D8 03 F6 |                             mov     b, 0-0
3ad68 150 EC DD 3B F9 |                             getword d, b, #1                'get burst field
3ad6c 151 EE DD CB F7 |                             test    d wz                    'if burst=0 
3ad70 152 ED 3D 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
3ad74 153 0C 00 90 AD |             if_z            jmp     #excluded               
3ad78 154 EC DD 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
3ad7c 155 EB DD 0B F2 |                             cmp     d, a wz                 'compare against current priority level
3ad80 156 ED ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
3ad84 157 F6 DB 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
3ad88 158 0F D6 0F F7 |                             incmod  a, #15 wz               'next level
3ad8c 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
3ad90 15a             | 
3ad90 15a             | 'determine priority cogs and build instructions for the polling sequence
3ad90 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
3ad94 15b 03 D6 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
3ad98 15c 14 DD B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
3ad9c 15d             | 
3ad9c 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
3ada0 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
3ada4 15f F6 DB 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
3ada8 160 ED EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
3adac 161 ED EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
3adb0 162 01 D6 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
3adb4 163 AE DB 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
3adb8 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
3adbc 165 03 DA 07 1A |             if_nc_and_nz    mul     c, #3
3adc0 166 ED 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
3adc4 167 38 DC A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
3adc8 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
3adcc 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
3add0 16a             | endprioloop
3add0 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
3add4 16b 9E EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
3add8 16c F7 C7 AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
3addc 16d E3 D7 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
3ade0 16e 01 C6 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
3ade4 16f 38 DC A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
3ade8 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
3adec 171 38 DC A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
3adf0 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
3adf4 173 02 D6 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
3adf8 174 EB 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
3adfc 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
3ae00 176             | 
3ae00 176             | ' populate the round robin COG polling instructions
3ae00 176 02 5A 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
3ae04 177 F7 D9 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
3ae08 178 00 DA 07 F6 |                             mov     c, #0                   'start at COG ID = 0
3ae0c 179 00 D6 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
3ae10 17a 01 D8 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
3ae14 17b EB 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
3ae18 17c AE DB 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
3ae1c 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
3ae20 17e 38 DC A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
3ae24 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
3ae28 180 01 DA 07 F1 |                             add     c, #1                   'increment the COG ID
3ae2c 181 03 D6 07 F1 |                             add     a, #3                   'increase the request address
3ae30 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
3ae34 183 F3 5B 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
3ae38 184             | '..................................................................................................
3ae38 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
3ae38 184             | 
3ae38 184             | set_latency                                                 '            (a) set latency
3ae38 184             | get_latency                                                 '            (b) get latency
3ae38 184             | set_burst                                                   '            (c) set burst size of bank
3ae38 184             | get_burst                                                   '            (d) get burst size of bank
3ae38 184             |                                                             '            (e) dump state
3ae38 184 D5 D9 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
3ae3c 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
3ae40 186 D6 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
3ae44 187             |                                                             ' | | | | e  account for following AUGS
3ae44 187 04 00 00 FF 
3ae48 188 00 AC 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
3ae4c 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
3ae50 18a D6 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
3ae54 18b 10 D8 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
3ae58 18c EC D7 A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
3ae5c 18d D6 D7 DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
3ae60 18e D6 D7 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
3ae64 18f EC D7 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
3ae68 190 EB D7 FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
3ae6c 191 80 D7 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
3ae70 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
3ae74 193             | 
3ae74 193             | '..................................................................................................
3ae74 193             | ' Misc EXECF code
3ae74 193             | 
3ae74 193 33 6E 63 FD | start_read_exec             execf   newburstr
3ae78 194 33 78 63 FD | start_write_exec            execf   resumewrites
3ae7c 195 33 74 63 FD | continue_read_exec          execf   lockedreads
3ae80 196 33 76 63 FD | continue_write_exec         execf   lockedwrites
3ae84 197             | 
3ae84 197             | '..................................................................................................
3ae84 197             | ' Variables
3ae84 197             | 
3ae84 197 08 00 00 60 | ximm8           long    $6000_0008              '8 nibble transfers to pins
3ae88 198 00 00 00 E0 | xrecvdata       long    $E000_0000              'arbitrary 4 bit reads from 4 bit bus pins
3ae8c 199 00 00 00 A0 | xsenddata       long    $A000_0000              'arbitrary 4 bit writes from hub to pins
3ae90 19a 02 00 00 60 | xsendimm        long    $6000_0002              'arbitrary nx4 bit immediate writes from imm to pins
3ae94 19b             | 
3ae94 19b 00 00 00 80 | xfreq1          long    $80000000
3ae98 19c 00 00 00 40 | xfreq2          long    $40000000
3ae9c 19d             | 'xfreq2          long    $20000000
3ae9c 19d             | 
3ae9c 19d 03 00 00 00 | delay           long    3
3aea0 19e             | 
3aea0 19e             | lutcodeaddr                 
3aea0 19e             | startupparams
3aea0 19e             | excludedcogs                                    'careful: shared register use!
3aea0 19e BC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
3aea4 19f 00 00 00 00 | flags           long    0
3aea8 1a0             | mask                                            'careful: shared register use!
3aea8 1a0 00 00 00 00 | resetmaskA      long    0
3aeac 1a1             | limit                                           'careful: shared register use!
3aeac 1a1 00 00 00 00 | resetmaskB      long    0
3aeb0 1a2 00 00 00 00 | datapins        long    0
3aeb4 1a3             | const512                                        'careful: shared register use!
3aeb4 1a3 00 00 00 00 | devicelist      long    0
3aeb8 1a4 00 00 00 00 | coglist         long    0
3aebc 1a5 00 00 00 00 | mbox            long    0 
3aec0 1a6             | 
3aec0 1a6             | clkpin                                          'shared with code patched during init
3aec0 1a6 A6 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
3aec4 1a7             | cspin                                           'shared with code patched during init
3aec4 1a7 1D 36 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
3aec8 1a8 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
3aecc 1a9 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
3aed0 1aa 01 00 00 00 | clkdelay        long    1
3aed4 1ab 00 00 00 00 | regdatabus      long    0
3aed8 1ac             | 
3aed8 1ac 10 00 00 00 | deviceaddr      long    $10
3aedc 1ad             | rrcounter
3aedc 1ad 7F 7F 3F FF | pinmask         long    $ff3f7f7f
3aee0 1ae             | 
3aee0 1ae             | ' jump addresses for the per COG handlers
3aee0 1ae 20 00 00 00 | cog0_handler    long    cog0
3aee4 1af 2C 00 00 00 | cog1_handler    long    cog1
3aee8 1b0 38 00 00 00 | cog2_handler    long    cog2
3aeec 1b1 44 00 00 00 | cog3_handler    long    cog3
3aef0 1b2 50 00 00 00 | cog4_handler    long    cog4
3aef4 1b3 5C 00 00 00 | cog5_handler    long    cog5
3aef8 1b4 68 00 00 00 | cog6_handler    long    cog6
3aefc 1b5 74 00 00 00 | cog7_handler    long    cog7
3af00 1b6 0C 0D 00 00 | expansion       long    gfxexpansion - driver_start
3af04 1b7             | 
3af04 1b7             | ' EXECF sequences
3af04 1b7 70 F2 03 F0 | newburstr       long    (%1111000000000011111100 << 10) + r_burst
3af08 1b8 2C 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
3af0c 1b9 27 73 01 1D | restorefill     long    (%0001110100000001011100 << 10) + w_fill_cont
3af10 1ba 80 F2 78 00 | lockedreads     long    (%0000000001111000111100 << 10) + r_locked_burst
3af14 1bb 2F F3 E0 01 | lockedwrites    long    (%0000000111100000111100 << 10) + w_resume_burst
3af18 1bc 2F 03 E0 01 | resumewrites    long    (%0000000111100000000000 << 10) + w_resume_burst
3af1c 1bd 78 02 F0 00 | resumereads     long    (%0000000011110000000000 << 10) + r_resume_burst
3af20 1be             | 
3af20 1be             | 
3af20 1be             | ' SKIPF sequences
3af20 1be B0 01 00 00 | skiptable       long    %110110000 ' read modify write byte
3af24 1bf 68 01 00 00 |                 long    %101101000 ' read modify write word
3af28 1c0 D8 00 00 00 |                 long    %011011000 ' read modify write long
3af2c 1c1 86 3F 00 00 | read_skip       long    %11111110000110      ' extended single read skip sequence
3af30 1c2 FE 38 06 00 | write_skip      long    %1100011100011111110 ' extended single write skip sequence
3af34 1c3 02 82 01 00 | fill_skip       long    %11000001000000010   ' extended fill skip sequence
3af38 1c4 00 1F 00 00 | burst_skip      long    %001111100000000     ' extended burst skip sequence
3af3c 1c5             | 
3af3c 1c5 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
3af40 1c6 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
3af44 1c7 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
3af48 1c8 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
3af4c 1c9             | 
3af4c 1c9             | ' LUT RAM address values
3af4c 1c9 E5 02 00 00 | complete_rw     long    complete_rw_lut
3af50 1ca C3 02 00 00 | continue_read   long    continue_read_lut
3af54 1cb C1 02 00 00 | continue_write  long    continue_write_lut
3af58 1cc DC 02 00 00 | noread          long    noread_lut
3af5c 1cd             | 
3af5c 1cd 00 00 00 00 | id0             long    0
3af60 1ce 01 00 00 00 | id1             long    1
3af64 1cf 02 00 00 00 | id2             long    2
3af68 1d0 03 00 00 00 | id3             long    3
3af6c 1d1 04 00 00 00 | id4             long    4
3af70 1d2 05 00 00 00 | id5             long    5
3af74 1d3 06 00 00 00 | id6             long    6
3af78 1d4 07 00 00 00 | id7             long    7
3af7c 1d5             | 
3af7c 1d5             | 'These next 10 request registers below are also temporarily reused during init 
3af7c 1d5             | 'and COG updates and need to follow immediately after id0-id7
3af7c 1d5 00 00 00 00 | addr1           long    0
3af80 1d6 00 00 00 00 | hubdata         long    0
3af84 1d7 00 00 00 00 | count           long    0
3af88 1d8 00 00 00 00 | addr2           long    0
3af8c 1d9 00 00 00 00 | total           long    0
3af90 1da 00 00 00 00 | offset1         long    0
3af94 1db 00 00 00 00 | offset2         long    0
3af98 1dc 00 00 00 00 | link            long    0
3af9c 1dd             | 
3af9c 1dd             | burstwrite                                      'note shared register use during init
3af9c 1dd 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
3afa0 1de 00 00 00 00 | id              long    0
3afa4 1df             | 
3afa4 1df 00 00 00 00 | header          long    0
3afa8 1e0 00 00 00 00 | trailer         long    0
3afac 1e1 00 00 00 00 | cmdaddr         long    0
3afb0 1e2 00 00 00 00 | request         long    0
3afb4 1e3 00 00 00 00 | rrlimit         long    0
3afb8 1e4 00 00 00 00 | pinconfig       long    0
3afbc 1e5 00 00 00 00 | clks            long    0
3afc0 1e6 00 00 00 00 | resume          long    0
3afc4 1e7 00 00 00 00 | orighubsize     long    0
3afc8 1e8 00 00 00 00 | wrclks          long    0
3afcc 1e9             | 
3afcc 1e9 00 00 00 00 | pattern         long    0
3afd0 1ea 00 04 00 00 | pagesize        long    PAGE_SIZE
3afd4 1eb             | 
3afd4 1eb             | ' temporary general purpose regs
3afd4 1eb 00 00 00 00 | a               long    0
3afd8 1ec 00 00 00 00 | b               long    0
3afdc 1ed 00 00 00 00 | c               long    0
3afe0 1ee 00 00 00 00 | d               long    0
3afe4 1ef             | 
3afe4 1ef             |                 fit     502
3afe4 1ef             |                 fit     502
3afe4 1ef             | 
3afe4 1ef             | '..................................................................................................
3afe4 1ef             | 
3afe4 1ef             |             orgh
3afe4                 | 
3afe4                 | lut_code
3afe4                 | 'HW init code up to 80 longs
3afe4                 | 
3afe4                 | '..................................................................................................
3afe4                 | ' Memory layout for LUT RAM once operational:
3afe4                 | '
3afe4                 | '  LUT RAM address      Usage
3afe4                 | '  ---------------      ----
3afe4                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
3afe4                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
3afe4                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
3afe4                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
3afe4                 | '
3afe4                 | ' Also during driver COG startup:
3afe4                 | ' $230-$24F is used for HW init setup
3afe4                 | ' $250-$26F is used as temporary vector storage 
3afe4                 | '..................................................................................................
3afe4                 | 
3afe4                 |                 org $230    
3afe4 230             | 
3afe4 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
3afe4 230 1D 38 63 FD | hwinit                      setxfrq xfreq2
3afe8 231 24 16 60 FD |                             pollxfi
3afec 232 5F EC 07 F6 |                             mov     pa, #$5F                '$F5 - exit QSPI mode if we were in this mode
3aff0 233 28 00 B0 FD |                             call    #sendqspi
3aff4 234 07 F8 07 FF 
3aff8 235 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
3affc 236 28 00 B0 FD |                             call    #sendspi
3b000 237 F8 07 78 FF 
3b004 238 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
3b008 239 1C 00 B0 FD |                             call    #sendspi
3b00c 23a 7F 78 78 FF 
3b010 23b 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
3b014 23c 10 00 B0 FD |                             call    #sendspi 
3b018 23d 2D 00 64 FD |                             ret
3b01c 23e             | 
3b01c 23e 04 CA 07 F6 | sendqspi                    mov     clks,#4
3b020 23f 32 0C 64 FD |                             skipf   #%110
3b024 240 9A EF 03 F6 |                             mov     pb, xsendimm
3b028 241             | 
3b028 241 10 CA 07 F6 | sendspi                     mov     clks, #16
3b02c 242 97 EF 03 F6 |                             mov     pb, ximm8
3b030 243 58 4E 63 FD |                             drvl    cspin                   'active low chip select
3b034 244 58 44 63 FD |                             drvl    datapins                'enable the DATA bus
3b038 245 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
3b03c 246 A6 CB 23 FC |                             wypin   clks, clkpin            'start memory clock output 
3b040 247 24 36 60 FD |                             waitxfi                         'wait for the completion
3b044 248 50 44 63 FD |                             fltl    datapins                'float data bus
3b048 249 59 4E 63 FD |                             drvh    cspin                   'raise chip select
3b04c 24a 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
3b050 24b             | 
3b050 24b 00 00 00 00 
3b054 24c 00 00 00 00 
3b058 24d 00 00 00 00 
3b05c 24e 00 00 00 00 
3b060 24f 00 00 00 00 |                 long    0[$270-32-$]
3b064 250             |     
3b064 250             |                 fit     $270-32  ' keep room for 32 vector longs
3b064 250             |                 fit     $270-32  ' keep room for 32 vector longs
3b064 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
3b064 250             | rw_vect ' PSRAM jump vectors
3b064 250 72 32 34 1B |                 long    (%0001101100110100001100 << 10) + r_single
3b068 251 72 22 34 17 |                 long    (%0001011100110100001000 << 10) + r_single
3b06c 252 72 52 34 0F |                 long    (%0000111100110100010100 << 10) + r_single
3b070 253 70 F2 03 F0 |                 long    (%1111000000000011111100 << 10) + r_burst
3b074 254 27 33 00 1D |                 long    (%0001110100000000001100 << 10) + w_single
3b078 255 27 23 00 1D |                 long    (%0001110100000000001000 << 10) + w_single
3b07c 256 27 13 00 1D |                 long    (%0001110100000000000100 << 10) + w_single
3b080 257 2B 1B 00 1E |                 long    (%0001111000000000000110 << 10) + w_burst
3b084 258             | ro_vect ' R/O PSRAM jump vectors
3b084 258 72 32 34 1B |                 long    (%0001101100110100001100 << 10) + r_single
3b088 259 72 22 34 17 |                 long    (%0001011100110100001000 << 10) + r_single
3b08c 25a 72 52 34 0F |                 long    (%0000111100110100010100 << 10) + r_single
3b090 25b 70 F2 03 F0 |                 long    (%1111000000000011111100 << 10) + r_burst
3b094 25c 00 01 00 00 |                 long    unsupported
3b098 25d 00 01 00 00 |                 long    unsupported
3b09c 25e 00 01 00 00 |                 long    unsupported
3b0a0 25f 00 01 00 00 |                 long    unsupported
3b0a4 260             | ctrl_vect ' Control jump vectors
3b0a4 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
3b0a8 261 00 01 00 00 |                 long    unsupported
3b0ac 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
3b0b0 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
3b0b4 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
3b0b8 265 00 01 00 00 |                 long    unsupported
3b0bc 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
3b0c0 267 3E 01 00 00 |                 long    reconfig 
3b0c4 268             | no_vect ' Invalid bank jump vectors
3b0c4 268 01 01 00 00 |                 long    invalidbank
3b0c8 269 01 01 00 00 |                 long    invalidbank
3b0cc 26a 01 01 00 00 |                 long    invalidbank
3b0d0 26b 01 01 00 00 |                 long    invalidbank
3b0d4 26c 01 01 00 00 |                 long    invalidbank
3b0d8 26d 01 01 00 00 |                 long    invalidbank
3b0dc 26e 01 01 00 00 |                 long    invalidbank
3b0e0 26f 01 01 00 00 |                 long    invalidbank
3b0e4 270             | 
3b0e4 270             |                 fit     $270
3b0e4 270             |                 fit     $270
3b0e4 270             | '..................................................................................................
3b0e4 270             | ' PSRAM READS
3b0e4 270             |                                                             ' a b c d e f
3b0e4 270             |                                                             ' B W L B R L  (a) byte read
3b0e4 270             |                                                             ' Y O O U E O  (b) word read
3b0e4 270             |                                                             ' T R N R S C  (c) long read
3b0e4 270             |                                                             ' E D G S U K  (d) new burst read
3b0e4 270             |                                                             '       T M E  (e) resumed sub-burst
3b0e4 270             |                                                             '         E D  (f) locked sub-burst
3b0e4 270             | 
3b0e4 270             | 
3b0e4 270 D7 CF 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
3b0e8 271 6A AE 97 FB |                             tjz     count, #noread_lut      '       d      check for any bytes to send
3b0ec 272 D7 AF CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=0 if RMW)
3b0f0 273 6F 0A 6C FD |                             modz    5 wz                    ' a b c |      test for RMW (z=1 if RMW) 
3b0f4 274 01 AA 27 F5 |                             andn    addr1, #1               ' | b | |      align to word boundary to prevent page issues
3b0f8 275 03 AA 27 F5 |                             andn    addr1, #3               ' | | c |      align to long boundary to prevent page issues
3b0fc 276 80 01 6C FC |                             wrlong  #0, ptrb                ' a b | |      clear upper bits of byte/word mailbox result
3b100 277 F9 37 83 FC |                             wrfast  xfreq1, ptrb            ' a b c |      setup streamer hub address for singles
3b104 278 E2 D9 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
3b108 279 EC D9 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
3b10c 27a EC 41 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
3b110 27b EC 3B EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
3b114 27c 11 D8 47 F0 |                             shr     b, #17                  ' | | | d e    scale burst size based on bus rate
3b118 27d EC 43 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
3b11c 27e 05 3A 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
3b120 27f 10 56 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
3b124 280 D7 DB 0B F6 | r_locked_burst              mov     c, count wz             ' | | | d e f  get count of bytes left to read
3b128 281 A1 DB 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
3b12c 282 02 CA 17 F6 |                             mov     clks, #2 wc             ' a | | | | |  2 clock transitions per byte
3b130 283 04 CA 17 F6 |                             mov     clks, #4 wc             ' | b | | | |  4 clock transitions per word
3b134 284 08 CA 17 F6 |                             mov     clks, #8 wc             ' | | c | | |  8 clock transitions per long
3b138 285 32 82 63 FD |                             skipf   read_skip               ' a b c | | |  extend skipf sequence for single reads
3b13c 286 C9 CD 03 36 |             if_nc           mov     resume, complete_rw     ' a b c d e f  burst/single read will complete
3b140 287 CA CD 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
3b144 288 D6 37 83 FC |                             wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
3b148 289 E2 59 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
3b14c 28a AC C9 A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
3b150 28b E4 4F E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
3b154 28c E4 4D EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
3b158 28d             |                             ' handle the page boundary by splitting any read bursts that cross it 
3b158 28d D5 DD 03 F6 |                             mov     d, addr1                ' | | | d e f  get start address
3b15c 28e 09 DC 47 F7 |                             zerox   d, #(PAGE_BITS-1)       ' | | | d e f  only keep page LSBs
3b160 28f EA DD C3 F2 |                             subr    d, pagesize             ' | | | d e f  figure out how many bytes remain before we hit the boundary
3b164 290 EE DB 33 F3 |                             fle     c, d wc                 ' | | | d e f  compare this size to our transfer size and limit it
3b168 291 CA CD 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  and we will continue with a sub-burst again
3b16c 292 ED CB 03 F6 |                             mov     clks, c                 ' | | | d e f  get count of bytes to be read into HUB
3b170 293 01 CA 67 F0 |                             shl     clks, #1                ' | | | d e f  multiply by two to work out nibble count
3b174 294             | 
3b174 294 E5 31 23 F9 |                             setword xrecvdata, clks, #0     'set the nibble transfers needed in streamer
3b178 295 0E CA 07 F1 |                             add     clks, #14               'include 14 address+delay clocks
3b17c 296 E5 CB 03 F1 |                             add     clks, clks              'compute clock transitions by doubling
3b180 297 D5 C3 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
3b184 298 EB C2 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
3b188 299             | 
3b188 299 60 C2 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3b18c 29a 69 C2 63 FD |                             rev     cmdaddr
3b190 29b 1B C2 FF F9 |                             movbyts cmdaddr, #%%0123
3b194 29c 61 C2 63 FD |                             mergeb  cmdaddr
3b198 29d             | 
3b198 29d 58 4E 63 FD |                             drvl    cspin                   'activate chip select
3b19c 29e 58 44 63 FD |                             drvl    datapins                'enable data bus
3b1a0 29f             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
3b1a0 29f E1 2F A3 FC |                             xinit   ximm8, cmdaddr          'stream out command+address
3b1a4 2a0 A6 CB 23 FC |                             wypin   clks, clkpin            'start clock output
3b1a8 2a1 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
3b1ac 2a2 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
3b1b0 2a3 59 44 63 FD |                             drvh    datapins                'enable this only if validating actual tri-state time on a scope
3b1b4 2a4 50 44 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
3b1b8 2a5             |                       
3b1b8 2a5 A2 57 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
3b1bc 2a6 28 36 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
3b1c0 2a7 00 3A C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
3b1c4 2a8 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
3b1c8 2a9 32 48 64 AD |             if_z            skipf   #%0100100               'special skip case for read-modify-write(RWM)
3b1cc 2aa             |                                                             'Bursts Bytes Words Longs  RMW
3b1cc 2aa 28 38 63 FD |                             setq    xfreq2                  '   a     b     c     d     e
3b1d0 2ab 00 30 C7 FC |                             xcont   xrecvdata, #0           '   a     b     c     d     e     transfer data as nibbles
3b1d4 2ac 2D CC 63 FD |                             call    resume                  '   a     b     c     d     |    
3b1d8 2ad 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e     wait for streaming to finish
3b1dc 2ae A2 51 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e     restore data pins for next transfer
3b1e0 2af 59 4E 63 0D |             _ret_           drvh    cspin                   '   a     b     c     d     |     de-assert chip select and return
3b1e4 2b0 59 4E 63 FD |                             drvh    cspin                   '                           e     deassert chip select and continue
3b1e8 2b1             | 
3b1e8 2b1 E2 DD 4B F8 |                             getnib  d, request, #1          'get request code value
3b1ec 2b2 B6 DD 8F F9 |                             altd    d, #skiptable-8         'patch next instruction
3b1f0 2b3 32 00 60 FD |                             skipf   0-0                     'generate skip sequence for byte, word or long
3b1f4 2b4             |                                                             ' RMWB RMWW RMLL 
3b1f4 2b4 80 D7 07 FB |                             rdlong  a, ptrb                 '  c    d    e   read back data written to mailbox
3b1f8 2b5 28 AE 63 FD |                             setq    count                   '  c    d    e   setup bit mux mask
3b1fc 2b6 D6 D7 F3 F9 |                             muxq    a, hubdata              '  c    d    e   apply bit mux
3b200 2b7 14 D0 07 F6 |                             mov     wrclks, #20             '  c    |    |   setup clks for byte write
3b204 2b8 18 D0 07 F6 |                             mov     wrclks, #24             '  |    d    |   setup clks for word write
3b208 2b9 20 D0 07 F6 |                             mov     wrclks, #32             '  |    |    e   setup clks for long write
3b20c 2ba 02 34 27 F9 |                             setword xsendimm, #2, #0        '  c    |    |
3b210 2bb 04 34 27 F9 |                             setword xsendimm, #4, #0        '  |    d    |
3b214 2bc 08 34 27 F9 |                             setword xsendimm, #8, #0        '  |    |    e
3b218 2bd EB AD 03 F6 |                             mov     hubdata, a              'write a to PSRAM
3b21c 2be 0D D2 07 F6 |                             mov     pattern, #%001101       'setup next skip pattern to send a single item and resume
3b220 2bf C9 CD 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
3b224 2c0 34 02 90 FD |                             jmp     #writecommon
3b228 2c1             | 
3b228 2c1             | '..................................................................................................
3b228 2c1             | ' Burst continuation testing
3b228 2c1             | 
3b228 2c1 32 90 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
3b22c 2c2 BC CD 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
3b230 2c3             | continue_read_lut          
3b230 2c3 BD CD 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
3b234 2c4 ED AD 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
3b238 2c5 ED AF 83 F1 |                             sub     count, c                ' a account for the bytes already sent
3b23c 2c6 D5 DB 03 F1 |                             add     c, addr1                ' a compute next external mem address
3b240 2c7 28 40 63 FD |                             setq    mask                    ' a configure mask for bit muxing
3b244 2c8 ED AB F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
3b248 2c9 0A BC 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
3b24c 2ca 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
3b250 2cb DE 43 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
3b254 2cc EC 43 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
3b258 2cd 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
3b25c 2ce 04 00 90 5D |             if_nz           jmp     #yield                  ' a
3b260 2cf 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
3b264 2d0             | 
3b264 2d0 04 B3 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
3b268 2d1 05 B5 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
3b26c 2d2 06 B7 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
3b270 2d3 07 B9 37 FC |                             wrlut   link, ptra[7]           'save context for next time
3b274 2d4 00 AB 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
3b278 2d5 01 AD 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
3b27c 2d6 02 AF 37 FC |                             wrlut   count, ptra[2]          'save context for next time
3b280 2d7 03 B1 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
3b284 2d8 08 CD 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
3b288 2d9 09 CF 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
3b28c 2da 2A 1C 66 0D |             _ret_           push    #poller
3b290 2db             | 
3b290 2db             | 
3b290 2db 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
3b294 2dc             | nowrite_lut                                                 '  (a) new skip sequence 
3b294 2dc 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
3b298 2dd 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
3b29c 2de 09 BC 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
3b2a0 2df A8 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
3b2a4 2e0 1F B0 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
3b2a8 2e1 DC B1 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
3b2ac 2e2 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
3b2b0 2e3 2D 00 64 FD |                             ret                             ' | continue processing
3b2b4 2e4 2A 98 63 0D |             _ret_           push    noread                  'continue end of transfer
3b2b8 2e5             | '..................................................................................................
3b2b8 2e5             | ' Completion of requests
3b2b8 2e5             | 
3b2b8 2e5             | complete_rw_lut             
3b2b8 2e5 09 BC 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
3b2bc 2e6 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
3b2c0 2e7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
3b2c4 2e8 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
3b2c8 2e9 0D B0 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
3b2cc 2ea             | 'checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
3b2cc 2ea             | '                            rdlong  pa, ptrb[-1]            'check if list has been aborted by client
3b2cc 2ea             | '                            tjns    pa, #listcomplete       'exit if it has
3b2cc 2ea             | '                            skipf   #%1000                  'do not notify if list is continuing
3b2cc 2ea             | '                            wrlong  addr2, ptrb             ' a  write back next list address
3b2cc 2ea             | 'listcomplete                altd    id, #id0                ' a  compute COG's state address
3b2cc 2ea             | '                            bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
3b2cc 2ea             | '            _ret_           push    #notify                 ' |  we are done with the list
3b2cc 2ea             | '            _ret_           push    #poller                 ' a  we are still continuing the list
3b2cc 2ea             | 
3b2cc 2ea             | 
3b2cc 2ea 07 B0 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
3b2d0 2eb BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
3b2d4 2ec 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
3b2d8 2ed 0A BC 0F F4 |                             testb   id, #LOCKED_BIT wz
3b2dc 2ee D8 AD 03 A6 |             if_z            mov     hubdata, addr2
3b2e0 2ef 32 62 64 AD |             if_z            skipf   #%110001
3b2e4 2f0 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
3b2e8 2f1 80 B1 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
3b2ec 2f2 CD BD 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
3b2f0 2f3 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
3b2f4 2f4 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
3b2f8 2f5 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
3b2fc 2f6 2A 50 66 0D |             _ret_           push    #real_list
3b300 2f7             | 
3b300 2f7             | 
3b300 2f7             | 
3b300 2f7 E3 AF 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
3b304 2f8 D8 D7 7B F8 |                             getnib  a, addr2, #7            'check the request type
3b308 2f9 0F D6 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
3b30c 2fa D5 D7 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
3b310 2fb 32 8A 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
3b314 2fc             |                                                             ' skipcase (a) gfx copy to/from hub
3b314 2fc             |                                                             ' skipcase (b) gfx copy extmem bank to bank
3b314 2fc             |                                                             ' skipcase (c) linear copy extmem bank to bank
3b314 2fc D8 D7 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
3b318 2fd EB DD AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
3b31c 2fe 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
3b320 2ff 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
3b324 300 DA B5 CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
3b328 301 DB B7 CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
3b32c 302 32 8E 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
3b330 303 32 8C 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
3b334 304 ED AD 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
3b338 305 E7 AD 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
3b33c 306 D5 DB 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
3b340 307 D9 B3 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
3b344 308 D9 CF 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
3b348 309 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
3b34c 30a 1E AA 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
3b350 30b E7 AF 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
3b354 30c E7 DB 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
3b358 30d DA DB 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
3b35c 30e DB DB 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
3b360 30f DB AD 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
3b364 310 DA AD 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
3b368 311 28 40 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
3b36c 312 ED AB F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
3b370 313 D5 D7 03 F6 |                             mov     a, addr1                ' | b c  ]
3b374 314 D8 AB 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
3b378 315 EB B1 03 F6 |                             mov     addr2, a                ' | b c  ]
3b37c 316 1E AA A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
3b380 317 0F B0 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
3b384 318 01 B2 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
3b388 319 01 B2 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
3b38c 31a E7 B3 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
3b390 31b             | '            if_nz           jmp     #moretransfers          ' a b c  more transfers still to go
3b390 31b             | '                            tjz     link, #listcomplete     ' a b c  test link for next request
3b390 31b             | '                            rdlong  pa, ptrb[-1]            'check if list has been aborted by client
3b390 31b             | '                            tjns    pa, #listcomplete       'will exit if it has
3b390 31b             | '                            wrlong  link, ptrb              'setup list next pointer
3b390 31b             | '                            altd    id, #id0                'compute COG's state address
3b390 31b             | '                            bitl    0-0, #LIST_BIT          'clear list flag for this COG
3b390 31b             | '            _ret_           push    #poller                 'we will return to polling
3b390 31b DC B1 03 A6 |             if_z            mov addr2,link
3b394 31c 34 FF 9F AD |             if_z            jmp #checknext
3b398 31d D5 C5 FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
3b39c 31e 0A BC 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3b3a0 31f 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
3b3a4 320 1E AA 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
3b3a8 321 BC CD 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
3b3ac 322 B7 CD 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
3b3b0 323 B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
3b3b4 324 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
3b3b8 325 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
3b3bc 326 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
3b3c0 327             | 
3b3c0 327             | '..................................................................................................
3b3c0 327             | ' PSRAM WRITES
3b3c0 327             |                                                             '  a b c d e f g h
3b3c0 327             | 
3b3c0 327             |                                                             '  B W L F B R L L (a) byte write(s)
3b3c0 327             |                                                             '  Y O O I U E O O (b) word write(s)
3b3c0 327             |                                                             '  T R N L R S C C (c) long write(s)
3b3c0 327             |                                                             '  E D G L S U K K (d) resumed fill
3b3c0 327             |                                                             '          T M E E (e) new burst write
3b3c0 327             |                                                             '            E D D (f) resumed burst
3b3c0 327             |                                                             '              F B (g) locked fill
3b3c0 327             |                                                             '              I U (h) locked burst write
3b3c0 327             |                                                             '              L R 
3b3c0 327             |                                                             '              L S 
3b3c0 327             |                                                             '                T 
3b3c0 327             | 
3b3c0 327             |                 
3b3c0 327             | w_single                   
3b3c0 327             | w_fill_cont           
3b3c0 327 D5 D7 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
3b3c4 328 03 D6 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
3b3c8 329 01 AA 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses to stop page crossing issues
3b3cc 32a 03 AA 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses to stop page crossing issues
3b3d0 32b D7 CF 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
3b3d4 32c 01 AE 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
3b3d8 32d EB AF 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
3b3dc 32e AD AF 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
3b3e0 32f D7 DB 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
3b3e4 330 7C 03 A0 FD |                             call    #\w_get_bankdelay       '  a b c d e f g h  get per bank limit and read delay info
3b3e8 331 E2 59 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
3b3ec 332 AC C9 A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
3b3f0 333 E4 4F E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
3b3f4 334 E4 4D EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
3b3f8 335 07 D2 0F F6 |                             mov     pattern, #%111 wz       '  | | | | e f | h  setup base skip pattern for bursts
3b3fc 336 A1 DB 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
3b400 337 CB CD 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
3b404 338 C9 CD 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
3b408 339 D6 37 73 FC |                             rdfast  xfreq1, hubdata         '  | | | | e f | h  setup streamer hub addr
3b40c 33a 32 84 63 AD |             if_z            skipf   write_skip              '  a b c d | | g |  extend single write skip pattern (optimization)
3b410 33b 9D D2 07 A6 |             if_z            mov     pattern, #%10011101     '  a b c d | | g |  setup pattern for single writes
3b414 33c 32 86 63 FD |                             skipf   fill_skip               '  ? ? ? d | | g |  extend fill skip pattern
3b418 33d 00 D2 07 F6 |                             mov     pattern, #0             '  ? ? ? d | | g |  setup pattern for fill writes
3b41c 33e 32 88 63 FD |                             skipf   burst_skip              '  | | | | e f | h  extend burst writes skip pattern
3b420 33f             |                             'if not just a single transfer we need to work out how many bytes are left to the page boundary
3b420 33f D5 DD 03 F6 |                             mov     d, addr1                '  | | | d e f g h  get start address
3b424 340 09 DC 47 F7 |                             zerox   d, #(PAGE_BITS-1)       '  | | | d e f g h  only keep page LSBs
3b428 341 EA DD C3 F2 |                             subr    d, pagesize             '  | | | d e f g h  figure out how many bytes remain before we hit the boundary
3b42c 342 EE DB 33 F3 |                             fle     c, d wc                 '  | | | d e f g h  compare this size to our transfer size and limit it
3b430 343 ED D1 03 F6 |                             mov     wrclks, c               '  a b c d e f g h  number of bytes to be sent
3b434 344 04 D0 07 FA |                             mul     wrclks, #4              '  a b c d e f g h  convert to clock transitions (2 transitions/nibble)
3b438 345 10 D0 07 F1 |                             add     wrclks, #16             '  a b c d e f g h  add header clock transitions
3b43c 346 CB CD 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  and we will continue with a sub-burst again
3b440 347 ED EF 03 F6 |                             mov     pb, c                   '  | | | d | | g |  get number of bytes to be filled
3b444 348 EB EF 43 F0 |                             shr     pb, a                   '  | | | d | | g |  scale into number of items to fill
3b448 349 EB DD C3 F9 |                             decod   d, a                    '  a b c d | | g |  get write item size in bytes
3b44c 34a 01 DC 67 F0 |                             shl     d, #1                   '  a b c d | | g |  convert to nibbles
3b450 34b EE 35 23 F9 |                             setword xsendimm, d, #0         '  a b c d | | g |  setup streamer count
3b454 34c ED 33 23 F9 |                             setword xsenddata, c, #0        '  | | | | e f | h  setup write burst bytes to be streamed
3b458 34d ED 33 03 F1 |                             add     xsenddata, c            '  | | | | e f | h  convert to nibbles
3b45c 34e             | 
3b45c 34e D5 C3 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
3b460 34f 02 C2 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
3b464 350             | 
3b464 350 60 C2 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3b468 351 69 C2 63 FD |                             rev     cmdaddr                 
3b46c 352 1B C2 FF F9 |                             movbyts cmdaddr, #%%0123
3b470 353 61 C2 63 FD |                             mergeb  cmdaddr
3b474 354             |                             
3b474 354 58 4E 63 FD |                             drvl    cspin                   'activate chip select
3b478 355 58 44 63 FD |                             drvl    datapins                'enable the DATA bus
3b47c 356 E1 2F A3 FC |                             xinit   ximm8, cmdaddr          'send 8 nibbles of address and command via LUT translation
3b480 357 A6 D1 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
3b484 358             |                                                          
3b484 358 32 D2 63 FD |                             skipf   pattern                 '   B W L Burst FB FW FL RMW
3b488 359 F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    e  f  g  | ' repeat for bursts
3b48c 35a D6 35 C3 FC |                             xcont   xsendimm, hubdata       '   a b c   |    e  f  g  h ' send immediate data as nibbles
3b490 35b 32 26 64 FD |                             skipf   #%10011                 '   | | |   |    e  f  g  | '
3b494 35c 00 32 C7 FC |                             xcont   xsenddata, #0           '   | | |   d    |  |  |  | ' send data from hub for bursts as nibbles
3b498 35d 2D CC 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
3b49c 35e 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
3b4a0 35f 50 44 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
3b4a4 360 59 4E 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
3b4a8 361             | 
3b4a8 361 59 4E 63 FD |                             drvh    cspin
3b4ac 362 09 BC 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
3b4b0 363 ED AF 8B F1 |                             sub     count, c wz             'account for bytes written
3b4b4 364 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
3b4b8 365 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
3b4bc 366 8C F6 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
3b4c0 367 7A B1 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
3b4c4 368 78 B3 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
3b4c8 369 B6 B3 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
3b4cc 36a E7 DD 03 F6 |                             mov     d, orighubsize
3b4d0 36b EB DD 63 F0 |                             shl     d, a
3b4d4 36c EE DB 83 F1 |                             sub     c, d
3b4d8 36d DA DB 03 F1 |                             add     c, offset1
3b4dc 36e EE AF 03 F6 |                             mov     count, d                'restore original count
3b4e0 36f E2 D9 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
3b4e4 370 EC D9 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
3b4e8 371 EC 41 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
3b4ec 372 D5 DB 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
3b4f0 373 28 40 63 FD |                             setq    mask                    'setup bit mask
3b4f4 374 ED AB F3 F9 |                             muxq    addr1, c                'setup new external memory address
3b4f8 375 0A BC 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3b4fc 376 33 70 63 AD |             if_z            execf   lockedfill              'continue next fill operation
3b500 377 B9 CD 03 F6 |                             mov     resume, restorefill
3b504 378 00 B0 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
3b508 379 68 FD BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
3b50c 37a 54 FD BF CD |             if_c            call    #yield
3b510 37b 2D 00 64 FD |                             ret
3b514 37c             |                            
3b514 37c E2 D9 43 F8 | w_get_bankdelay             getnib  b, request, #0          'get bank parameter LUT address
3b518 37d EC D9 A3 FA |                             rdlut   b, b                    'get bank limit/mask
3b51c 37e EC 41 CB F9 |                             bmask   mask, b                 'build mask for addr
3b520 37f EC 3B EB F8 |                             getbyte delay, b, #1            'get input delay of bank + flags
3b524 380 11 D8 47 F0 |                             shr     b, #17                  'scale burst size based on bus rate
3b528 381 EC 43 23 F3 |                             fle     limit, b                'apply any per bank limit to cog limit
3b52c 382 05 3A 57 F0 |                             shr     delay, #5 wc            'prep delay and test for registered inputs
3b530 383 10 56 67 04 |             _ret_           bitnc   regdatabus, #16         'setup if data bus is registered or not
3b534 384             | 
3b534 384             | '..................................................................................................
3b534 384             | 
3b534 384             |         fit 1024
3b534 384             |         fit 1024
3b534 384             | 
3b534 384             | '--------------------------------------------------------------------------------------------------
3b534 384             |         orgh
3b534                 | 
3b534                 | gfxexpansion
3b534                 |                             'simple line drawing graphics expansion of memory driver
3b534                 |                             'jmp     #donerepeats                'just return for now
3b534                 | 
3b534     D8 AB 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
3b538     E1 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
3b53c     01 B2 07 F1 |                             add     total, #1               'restore total after decrement
3b540     DA D9 03 F6 |                             mov     b, offset1              'get error term
3b544     01 D8 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
3b548     DB DD 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
3b54c     10 B6 C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
3b550     DB D9 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
3b554     00 DA 07 F6 |                             mov     c, #0                   'clear accumulator reg
3b558     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
3b55c     EB D7 C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
3b560     DB B5 03 F1 |                             add     offset1, offset2        'err+=dy 
3b564     10 B2 0F F4 |                             testb   total, #16 wz           'check sign sx   
3b568     EB DB C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
3b56c     EC DD 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
3b570     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
3b574     EE B7 43 F9 |                             rolword offset2, d, #0          'restore offset
3b578     EE B5 03 F1 |                             add     offset1, d              'err+=dx
3b57c     11 B2 0F F4 |                             testb   total, #17 wz           'check sign sy
3b580     D9 DD 33 F9 |                             getword d, total, #0            'get line width
3b584     EE DB C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
3b588     EB D7 93 F7 |                             encod   a wc                    'restore size and set carry
3b58c     E7 AF 03 F6 |                             mov     count, orighubsize      'reset the fill width
3b590     EB AF 63 F0 |                             shl     count, a                '..for the type of transfer
3b594     6F 03 80 FD |                             jmp     #readmask               'continue filling
3b598                 | 	alignl
3b598                 | _usbnew_spin2_dat_
3b598                 |                 org     $000
3b598 000             | 
3b598 000             | usb_host_start
3b598 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
3b59c 001             | 
3b59c 001 03 00 00 FF 
3b5a0 002 D0 72 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
3b5a4 003 02 72 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
3b5a8 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
3b5ac 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
3b5b0 006 29 72 63 FD |                 setq2   htmp
3b5b4 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
3b5b8 008             | 
3b5b8 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
3b5bc 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
3b5c0 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
3b5c4 00b             | 
3b5c4 00b             | '------------------------------------------------------------------------------
3b5c4 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
3b5c4 00b             | ' special because the receiving function must not respond with either STALL or
3b5c4 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
3b5c4 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
3b5c4 00b             | ' corrupt packet, it must ignore the transaction
3b5c4 00b             | '------------------------------------------------------------------------------
3b5c4 00b             | ' On entry:
3b5c4 00b             | '   PTRA - start address of the SETUP data struct.
3b5c4 00b             | ' On exit:
3b5c4 00b             | '   retval - PID_ACK on success, otherwise error code.
3b5c4 00b             | '------------------------------------------------------------------------------
3b5c4 00b             | txn_setup
3b5c4 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
3b5c8 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
3b5cc 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
3b5d0 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
3b5d4 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
3b5d8 010             | .setup
3b5d8 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
3b5dc 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3b5e0 012 2D 00 64 AD |         if_z    ret
3b5e4 013 7C 0B B0 FD |                 call    #retry_wait
3b5e8 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3b5ec 015 2D 00 64 AD |         if_z    ret
3b5f0 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
3b5f4 017 E0 FF 9F FD |                 jmp     #.setup
3b5f8 018             | 
3b5f8 018             | '------------------------------------------------------------------------------
3b5f8 018             | ' IN/INTERRUPT transaction.
3b5f8 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
3b5f8 018             | '------------------------------------------------------------------------------
3b5f8 018             | ' On entry:
3b5f8 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
3b5f8 018             | '     CRC(b19..23).
3b5f8 018             | ' On exit:
3b5f8 018             | '------------------------------------------------------------------------------
3b5f8 018             | txn_in
3b5f8 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3b5fc 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
3b600 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
3b604 01b             | 
3b604 01b             |                 ' Fall through to urx_packet
3b604 01b             | 
3b604 01b             | '------------------------------------------------------------------------------
3b604 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
3b604 01b             | ' received are handshakes and IN DATAx.
3b604 01b             | '------------------------------------------------------------------------------
3b604 01b             | ' On entry:
3b604 01b             | ' On exit:
3b604 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
3b604 01b             | '     returned.
3b604 01b             | '------------------------------------------------------------------------------
3b604 01b             | urx_packet
3b604 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
3b608 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3b60c 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
3b610 01e 1A 94 63 FD |                 getct   hct2
3b614 01f 4E 95 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
3b618 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
3b61c 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
3b620 022             | .wait_sop
3b620 022 22 A7 8A FA |                 rdpin   urx, dm
3b624 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3b628 024 08 00 90 CD |         if_c    jmp     #.get_pid
3b62c 025 FC 25 CC FB |                 jnct2   #.wait_sop
3b630 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
3b634 027             | .get_pid
3b634 027 28 02 B0 FD |                 call    #urx_next
3b638 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
3b63c 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
3b640 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
3b644 02b             | .chk_pid
3b644 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3b648 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
3b64c 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
3b650 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
3b654 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
3b658 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
3b65c 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
3b660 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
3b664 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
3b668 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
3b66c 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
3b670 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
3b674 037             | .ack_resend
3b674 037 22 A7 82 FA |                 rqpin   urx, dm
3b678 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3b67c 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
3b680 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
3b684 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
3b688 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
3b68c 03d             | .chk_eop
3b68c 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3b690 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
3b694 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
3b698 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
3b69c 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
3b6a0 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
3b6a4 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
3b6a8 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
3b6ac 045 2D 00 64 FD |                 ret
3b6b0 046             | .idle
3b6b0 046 22 A7 82 FA |                 rqpin   urx, dm
3b6b4 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3b6b8 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
3b6bc 049 2D 00 64 FD |                 ret
3b6c0 04a             | 
3b6c0 04a             | '------------------------------------------------------------------------------
3b6c0 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
3b6c0 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
3b6c0 04a             | ' if one is required.
3b6c0 04a             | '------------------------------------------------------------------------------
3b6c0 04a             | ' On entry:
3b6c0 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
3b6c0 04a             | ' On exit:
3b6c0 04a             | '------------------------------------------------------------------------------
3b6c0 04a             | utx_token
3b6c0 04a 22 A7 82 FA |                 rqpin   urx, dm
3b6c4 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3b6c8 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
3b6cc 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3b6d0 04e 34 0D B0 CD |         if_c    call    #utx_pre
3b6d4 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3b6d8 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
3b6dc 051 5E 73 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
3b6e0 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
3b6e4 053             | .next_byte
3b6e4 053 B9 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
3b6e8 054 08 72 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
3b6ec 055             | .wait
3b6ec 055 40 46 72 FD |                 testp   dp                      wc
3b6f0 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
3b6f4 057 23 03 08 FC |                 akpin   dp
3b6f8 058 22 A5 22 FC |                 wypin   utx, dm
3b6fc 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
3b700 05a             | 
3b700 05a             | '------------------------------------------------------------------------------
3b700 05a             | ' SETUP/OUT/INTERRUPT transaction.
3b700 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
3b700 05a             | '------------------------------------------------------------------------------
3b700 05a             | ' On entry:
3b700 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
3b700 05a             | '     CRC(b19..23).
3b700 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
3b700 05a             | '   pkt_data - count of DATAx payload bytes to send.
3b700 05a             | ' On exit:
3b700 05a             | '------------------------------------------------------------------------------
3b700 05a             | txn_out
3b700 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3b704 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
3b708 05c 00 00 C0 FF 
3b70c 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
3b710 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
3b714 05f             | 
3b714 05f             |                 ' Fall through to utx_data
3b714 05f             | 
3b714 05f             | '------------------------------------------------------------------------------
3b714 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
3b714 05f             | ' calculated while the data byte is being shifted out. Since data stage
3b714 05f             | ' success/fail is not determined until the status stage of the transaction,
3b714 05f             | ' this routine is only concerned about the current DATAx packet.
3b714 05f             | '------------------------------------------------------------------------------
3b714 05f             | ' On entry:
3b714 05f             | '   PTRA - hub start address of the data to read.
3b714 05f             | '   pkt_cnt - data payload size.
3b714 05f             | ' On exit:
3b714 05f             | '------------------------------------------------------------------------------
3b714 05f             | utx_data
3b714 05f 22 A7 82 FA |                 rqpin   urx, dm
3b718 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3b71c 061 F4 FF 9F CD |         if_c    jmp     #utx_data
3b720 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
3b724 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
3b728 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3b72c 065 D8 0C B0 CD |         if_c    call    #utx_pre
3b730 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3b734 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
3b738 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
3b73c 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
3b740 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
3b744 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
3b748 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
3b74c 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
3b750 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
3b754 06f             | .read_byte
3b754 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
3b758 070 F0 00 B0 FD |                 call    #utx_byte
3b75c 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
3b760 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
3b764 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
3b768 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3b76c 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
3b770 076             | .send_crc
3b770 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
3b774 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
3b778 078 D0 00 B0 FD |                 call    #utx_byte
3b77c 079 5D A5 EA F8 |                 getbyte utx, crc, #1
3b780 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
3b784 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
3b788 07c             | 
3b788 07c             | '------------------------------------------------------------------------------
3b788 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
3b788 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
3b788 07c             | ' expects that the packet includes at least the CRC word.
3b788 07c             | '
3b788 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
3b788 07c             | ' was requested, which makes it difficult to determine where the data stops
3b788 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
3b788 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
3b788 07c             | ' USB-16 expected residual value of 0xB001.
3b788 07c             | '
3b788 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
3b788 07c             | ' so the caller can verify IN success before writing the data to its final
3b788 07c             | ' destination.
3b788 07c             | '------------------------------------------------------------------------------
3b788 07c             | ' On entry:
3b788 07c             | '   pkt_data - max byte count expected to be in the packet.
3b788 07c             | '   newb_flg - signals new byte ready when toggled.
3b788 07c             | ' On exit:
3b788 07c             | '   pkt_cnt - actual number of bytes read.
3b788 07c             | '------------------------------------------------------------------------------
3b788 07c             | urx_data
3b788 07c F7 77 03 F6 |                 mov     htmp2, pb
3b78c 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
3b790 07e 00 00 C0 FF 
3b794 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
3b798 080 BB EF 03 F6 |                 mov     pb, htmp2
3b79c 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
3b7a0 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
3b7a4 083 58 85 03 F6 |                 mov     pkt_tmp, pkt_data
3b7a8 084 02 84 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
3b7ac 085             | .wait_byte
3b7ac 085             | ' In-line rx for max speed
3b7ac 085 22 A7 82 FA |                 rqpin   urx, dm
3b7b0 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
3b7b4 087 53 A5 02 F5 |                 and     utx, urx
3b7b8 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
3b7bc 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
3b7c0 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
3b7c4 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3b7c8 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
3b7cc 08d DC FF 9F FD |                 jmp     #.wait_byte
3b7d0 08e             | .get_byte
3b7d0 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
3b7d4 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
3b7d8 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
3b7dc 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
3b7e0 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
3b7e4 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3b7e8 094             | .end_crc
3b7e8 094 01 B8 06 F1 |                 add     pkt_cnt, #1
3b7ec 095 C2 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
3b7f0 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
3b7f4 097 2D 00 64 1D |         if_a    ret
3b7f8 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
3b7f8 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
3b7f8 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
3b7f8 098             | ' to miss it, so cheat a bit and look for SOP clear here.
3b7f8 098 22 A7 82 FA |                 rqpin   urx, dm
3b7fc 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
3b800 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
3b804 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
3b804 09b             | .chk_crc
3b804 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
3b808 09c 58 00 00 FF 
3b80c 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
3b810 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
3b814 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
3b818 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
3b81c 0a1 34 09 B0 FD |                 call    #poll_waitx
3b820 0a2             | 
3b820 0a2             |                 ' Fall through to utx_handshake
3b820 0a2             | 
3b820 0a2             | '------------------------------------------------------------------------------
3b820 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
3b820 0a2             | ' the appropriate IP delay has been inserted.
3b820 0a2             | '------------------------------------------------------------------------------
3b820 0a2             | ' On entry:
3b820 0a2             | '   retval - handshake PID to send.
3b820 0a2             | ' On exit:
3b820 0a2             | '   retval unchanged.
3b820 0a2             | '------------------------------------------------------------------------------
3b820 0a2             | utx_handshake
3b820 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3b824 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
3b828 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3b82c 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
3b830 0a6 5F A5 02 F6 |                 mov     utx, retval
3b834 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
3b838 0a8             | .idle
3b838 0a8 22 A7 82 FA |                 rqpin   urx, dm
3b83c 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3b840 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
3b844 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
3b848 0ac 08 09 90 FD |                 jmp     #poll_waitx
3b84c 0ad             | 
3b84c 0ad             | '------------------------------------------------------------------------------
3b84c 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
3b84c 0ad             | '------------------------------------------------------------------------------
3b84c 0ad             | ' On entry:
3b84c 0ad             | '   utx - byte to transmit.
3b84c 0ad             | ' On exit:
3b84c 0ad             | '------------------------------------------------------------------------------
3b84c 0ad             | utx_byte
3b84c 0ad 40 46 72 FD |                 testp   dp                      wc
3b850 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
3b854 0af 23 03 08 FC |                 akpin   dp
3b858 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
3b85c 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
3b860 0b2             | 
3b860 0b2             | '------------------------------------------------------------------------------
3b860 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
3b860 0b2             | '------------------------------------------------------------------------------
3b860 0b2             | ' On entry:
3b860 0b2             | ' On exit:
3b860 0b2             | '   retval - the byte read.
3b860 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
3b860 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
3b860 0b2             | '     received.
3b860 0b2             | '------------------------------------------------------------------------------
3b860 0b2             | urx_next
3b860 0b2 22 A7 8A FA |                 rdpin   urx, dm
3b864 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
3b868 0b4 53 A5 02 F5 |                 and     utx, urx
3b86c 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
3b870 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
3b874 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
3b878 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
3b87c 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3b880 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
3b884 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
3b888 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
3b88c 0bd 2D 00 64 FD |                 ret
3b890 0be             | 
3b890 0be             | '------------------------------------------------------------------------------
3b890 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
3b890 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
3b890 0be             | ' length, and the PID is not included in the CRC calculation:
3b890 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
3b890 0be             | '  CRC5  ENDP ADDRESS PID
3b890 0be             | ' %00000_1111_1111111_xxxxxxxx
3b890 0be             | '------------------------------------------------------------------------------
3b890 0be             | ' On entry:
3b890 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
3b890 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
3b890 0be             | ' On exit:
3b890 0be             | '   ep_addr_pid - CRC value appended to the packet.
3b890 0be             | '------------------------------------------------------------------------------
3b890 0be             | calc_crc5
3b890 0be FF 03 00 FF 
3b894 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
3b898 0c0 5E 73 03 F6 |                 mov     htmp, ep_addr_pid
3b89c 0c1 08 72 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
3b8a0 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
3b8a4 0c3 69 72 63 FD |                 rev     htmp                            ' Input data reflected
3b8a8 0c4 28 72 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
3b8ac 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
3b8b0 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
3b8b4 0c7 09 72 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
3b8b8 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
3b8bc 0c9 01 72 77 F0 |                 shl     htmp, #1                wc
3b8c0 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
3b8c4 0cb 01 72 77 F0 |                 shl     htmp, #1                wc
3b8c8 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
3b8cc 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
3b8d0 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
3b8d4 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
3b8d8 0d0             | 
3b8d8 0d0             | '------------------------------------------------------------------------------
3b8d8 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
3b8d8 0d0             | '------------------------------------------------------------------------------
3b8d8 0d0             | isr1_fsframe
3b8d8 0d0 1A 92 62 FD |                 getct   iframe_ct_base
3b8dc 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3b8e0 0d2 B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3b8e4 0d3 22 6F 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3b8e8 0d4             | .wait
3b8e8 0d4 40 46 72 FD |                 testp   dp                      wc
3b8ec 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
3b8f0 0d6 23 03 08 FC |                 akpin   dp
3b8f4 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
3b8f8 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
3b8fc 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
3b900 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
3b904 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
3b908 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
3b90c 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
3b910 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
3b914 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
3b918 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
3b91c 0e1 2C FF BF FD |                 call    #utx_byte
3b920 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
3b924 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
3b928 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
3b92c 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
3b930 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
3b934 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
3b938 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
3b93c 0e9 5B A5 42 F5 |                 or      utx, icrc
3b940 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
3b944 0eb A4 83 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
3b948 0ec 20 00 90 FD |                 jmp     #isr1_wait
3b94c 0ed             | isr1_lsframe
3b94c 0ed 1A 92 62 FD |                 getct   iframe_ct_base
3b950 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3b954 0ef B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3b958 0f0             | .wait
3b958 0f0 40 46 72 FD |                 testp   dp                      wc
3b95c 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
3b960 0f2 23 03 08 FC |                 akpin   dp
3b964 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
3b968 0f4 A3 83 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
3b96c 0f5             | isr1_wait
3b96c 0f5 22 A5 82 FA |                 rqpin   utx, dm
3b970 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
3b974 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
3b978 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
3b97c 0f9 03 00 00 FF 
3b980 0fa FF B3 06 F5 |                 and     frame, ##$7ff
3b984 0fb 1F 82 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
3b988 0fc F5 FF 3B FB |                 reti1
3b98c 0fd             | 
3b98c 0fd             | '------------------------------------------------------------------------------
3b98c 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
3b98c 0fd             | ' transaction will complete before the next frame is triggered.
3b98c 0fd             | '------------------------------------------------------------------------------
3b98c 0fd             | ' On entry:
3b98c 0fd             | ' On exit:
3b98c 0fd             | '------------------------------------------------------------------------------
3b98c 0fd             | wait_txn_ok
3b98c 0fd 1A 76 63 FD |                 getct   htmp2
3b990 0fe 49 77 83 F1 |                 sub     htmp2, iframe_ct_base
3b994 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3b998 100 A1 77 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
3b99c 101 A2 77 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
3b9a0 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
3b9a4 103 2D 00 64 FD |                 ret
3b9a8 104             | 
3b9a8 104             | '------------------------------------------------------------------------------
3b9a8 104             | ' A device connection was detected, or a bus reset was requested by the USB
3b9a8 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
3b9a8 104             | ' and perform a reset sequence prior to device enumeration.
3b9a8 104             | '------------------------------------------------------------------------------
3b9a8 104             | dev_reset
3b9a8 104 22 A7 82 FA |                 rqpin   urx, dm
3b9ac 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
3b9b0 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
3b9b4 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
3b9b8 108             | reset
3b9b8 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
3b9bc 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
3b9c0 10a 1F 5C 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
3b9c4 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3b9c8 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
3b9cc 10d 1A 92 62 FD |                 getct   iframe_ct_base
3b9d0 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3b9d4 10f B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3b9d8 110 59 73 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
3b9dc 111 24 72 07 F1 |                 add     htmp, #36
3b9e0 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
3b9e4 113             | .framewait
3b9e4 113 B9 B3 1A F2 |                 cmp     frame, htmp             wcz
3b9e8 114 F8 FF 9F CD |         if_b    jmp     #.framewait
3b9ec 115 2D 00 64 FD |                 ret
3b9f0 116             | 
3b9f0 116             | '------------------------------------------------------------------------------
3b9f0 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
3b9f0 116             | '------------------------------------------------------------------------------
3b9f0 116             | ' On entry:
3b9f0 116             | '   PTRA - source address.
3b9f0 116             | '   PB - destination address.
3b9f0 116             | '   hr0 - length of copy, in bytes.
3b9f0 116             | ' On exit:
3b9f0 116             | '------------------------------------------------------------------------------
3b9f0 116             | hmemcpy
3b9f0 116 61 73 C7 FA |                 rdbyte  htmp, ptra++
3b9f4 117 F7 73 43 FC |                 wrbyte  htmp, pb
3b9f8 118 01 EE 07 F1 |                 add     pb, #1
3b9fc 119 FC 87 6F 0B |         _ret_   djnz    hr0, #hmemcpy
3ba00 11a             | 
3ba00 11a             | '------------------------------------------------------------------------------
3ba00 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
3ba00 11a             | ' loop until the errant device is disconnected.
3ba00 11a             | '------------------------------------------------------------------------------
3ba00 11a             | ' On entry:
3ba00 11a             | ' On exit:
3ba00 11a             | '------------------------------------------------------------------------------
3ba00 11a             | host_error
3ba00 11a             |           if ERROR_LED >= 0
3ba00 11a             |           end
3ba00 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
3ba04 11b             | 
3ba04 11b             | '------------------------------------------------------------------------------
3ba04 11b             | ' Get HID descriptor buffer for current port
3ba04 11b             | '------------------------------------------------------------------------------
3ba04 11b             | ' On entry:
3ba04 11b             | ' On exit:
3ba04 11b             | '   PB - HID descriptor buffer pointer
3ba04 11b             | '------------------------------------------------------------------------------
3ba04 11b             | get_hid_descr_buffer
3ba04 11b 2D EF 03 F6 |                 mov     pb, hdev_port
3ba08 11c 01 EE E7 F2 |                 cmpsub  pb, #1
3ba0c 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
3ba10 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
3ba14 11f             | 
3ba14 11f             | 
3ba14 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
3ba18 120             | 
3ba18 120             | ' USB commands and error codes
3ba18 120 00 00 00 00 | cmd_data        long    0
3ba1c 121 00 00 00 00 | usb_err_code    long    ERR_NONE
3ba20 122             | 
3ba20 122             | ' Parameters block assigned at cog startup
3ba20 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
3ba24 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
3ba28 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
3ba2c 125             | if ACTIVITY_LED >= 0
3ba2c 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
3ba2c 125             | end
3ba2c 125             | if ERROR_LED >= 0
3ba2c 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
3ba2c 125             | end
3ba2c 125 00 00 00 00 | hid_descr_p     long    0
3ba30 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
3ba30 126             | 'hkbd_report_p   long    0
3ba30 126 00 00 00 00 | hub_descr_p     long    0
3ba34 127 00 00 00 00 | urx_buff_p      long    0
3ba38 128 00 00 00 00 | dev_desc_buff_p long    0
3ba3c 129 00 00 00 00 | con_desc_buff_p long    0
3ba40 12a 00 00 00 00 | cache_start_p   long    0
3ba44 12b 00 00 00 00 | cache_end_p     long    0
3ba48 12c             | if EMUPAD_MAX_PLAYER > 0
3ba48 12c             | emupad_out_ptr  long    0
3ba48 12c             | end
3ba48 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
3ba4c 12d             | 
3ba4c 12d             | hdev_init_start
3ba4c 12d             | hdev_port       res     1
3ba4c 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
3ba4c 12d             | kbm_next_datax  res     1
3ba4c 12d             | hub_intf_num    res     1
3ba4c 12d             | hub_next_datax  res     1
3ba4c 12d             | hub_status_chg  res     1
3ba4c 12d             | hub_port_status res     1
3ba4c 12d             | if HAVE_MOUSE
3ba4c 12d             | ms_intf_num     res     1
3ba4c 12d             | ms_in_max_pkt   res     1
3ba4c 12d             | end
3ba4c 12d             | kb_intf_num     res     1
3ba4c 12d             | kb_interval     res     1
3ba4c 12d             | kb_in_max_pkt   res     1
3ba4c 12d             | kb_max_index    res     1
3ba4c 12d             | kb_led_states   res     1
3ba4c 12d             | gp_intf_num     res     1
3ba4c 12d             | gp_interval     res     1
3ba4c 12d             | gp_max_index    res     1
3ba4c 12d             | gp_descr_len    res     1+MAX_DEVICES
3ba4c 12d             | hdev_init_end
3ba4c 12d             | 
3ba4c 12d             | ' Initialized at cog startup:
3ba4c 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
3ba4c 12d             | iframe_ct_new   res     1
3ba4c 12d             | iframe_ct_base  res     1
3ba4c 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
3ba4c 12d             | 
3ba4c 12d             | ' This register block is reset to zero when a USB device connects
3ba4c 12d             | hreg_init_start
3ba4c 12d             | hstatus         res     1         ' Host status flags
3ba4c 12d             | hctwait         res     1         ' Poll-based wait clocks
3ba4c 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
3ba4c 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
3ba4c 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
3ba4c 12d             | xfer_retry      res     1         ' Control transfer retry count
3ba4c 12d             | retry           res     1         ' Transaction retry count
3ba4c 12d             | utx             res     1         ' Byte to transmit on USB
3ba4c 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
3ba4c 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
3ba4c 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
3ba4c 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
3ba4c 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
3ba4c 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
3ba4c 12d             | frame           res     1         ' USB 1ms frame counter value
3ba4c 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
3ba4c 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
3ba4c 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
3ba4c 12d             | crc             res     1         ' Used for CRC16 calculation
3ba4c 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
3ba4c 12d             | retval          res     1         ' Global success/fail return parameter
3ba4c 12d             | context_retval  res     1         ' Operation contextual return parameter
3ba4c 12d             | ' Device stuff
3ba4c 12d             | hdev_id         res     1+MAX_DEVICES
3ba4c 12d             | hdev_bcd        res     1
3ba4c 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
3ba4c 12d             | ' Keyboard/mouse stuff
3ba4c 12d             | hctrl_ep_addr   res     1
3ba4c 12d             | hctrl_max_pkt   res     1
3ba4c 12d             | hconfig_base    res     1
3ba4c 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
3ba4c 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
3ba4c 12d             | hdev_class      res     1
3ba4c 12d             | hdev_subclass   res     1
3ba4c 12d             | hdev_protocol   res     1
3ba4c 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
3ba4c 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
3ba4c 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
3ba4c 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
3ba4c 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
3ba4c 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
3ba4c 12d             | if HAVE_MOUSE
3ba4c 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
3ba4c 12d             | end
3ba4c 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
3ba4c 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
3ba4c 12d             | hdev_ep_addr    res     1+MAX_DEVICES
3ba4c 12d             | hdev_out_addr   res     1
3ba4c 12d             | 
3ba4c 12d             | if EMUPAD_MAX_PLAYER > 0
3ba4c 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
3ba4c 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
3ba4c 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
3ba4c 12d             | end
3ba4c 12d             | 
3ba4c 12d             | hreg_init_end
3ba4c 12d             | 
3ba4c 12d             | hidr_start
3ba4c 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
3ba4c 12d             | hidr_flags      res     1
3ba4c 12d             | hidr_axis       res     4
3ba4c 12d             | hidr_buttons    res     1
3ba4c 12d             | hidr_hats       res     1
3ba4c 12d             | '' Above are actually useful values, 6 longs
3ba4c 12d             | hidr_type       res     1
3ba4c 12d             | hidr_id         res     1
3ba4c 12d             | hidr_offset     res     1
3ba4c 12d             | hidr_usage_idx  res     1
3ba4c 12d             | ' below need to be push/pop'd
3ba4c 12d             | hidr_state      res     1
3ba4c 12d             | hidr_size       res     1
3ba4c 12d             | hidr_count      res     1
3ba4c 12d             | hidr_lminmax    res     1
3ba4c 12d             | hidr_pminmax    res     1
3ba4c 12d             | hidr_end
3ba4c 12d             | 
3ba4c 12d             | ' Variables dependent on the system freqency
3ba4c 12d             | _var_64_lower_  res     1
3ba4c 12d             | _var_64_upper_  res     1
3ba4c 12d             | _12Mbps_        res     1
3ba4c 12d             | _1_5Mbps_       res     1
3ba4c 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
3ba4c 12d             | _1us_           res     1         ' 1us
3ba4c 12d             | _10us_          res     1         ' 10us
3ba4c 12d             | _33us_          res     1         ' 33us
3ba4c 12d             | _txn_err_       res     1         ' 250us
3ba4c 12d             | _500us_         res     1         ' 500us
3ba4c 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
3ba4c 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
3ba4c 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
3ba4c 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
3ba4c 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
3ba4c 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
3ba4c 12d             | _preamble_wait_ res     1
3ba4c 12d             | _1ms_           res     1         ' 1ms
3ba4c 12d             | _2ms_           res     1         ' 2ms
3ba4c 12d             | _suspend_wait_  res     1         ' 3ms
3ba4c 12d             | _4ms_           res     1         ' 4ms
3ba4c 12d             | _xfer_wait_     res     1         ' 5ms
3ba4c 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
3ba4c 12d             | _reset_hold_    res     1         ' 15ms
3ba4c 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
3ba4c 12d             | _21ms_          res     1         ' 21ms
3ba4c 12d             | _100ms_         res     1         ' 100ms
3ba4c 12d             | _500ms_         res     1         ' 500ms
3ba4c 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
3ba4c 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
3ba4c 12d             | '------------------------------------------------------------------------------
3ba4c 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
3ba4c 12d             | _usb_d_ls_nco_  res     1
3ba4c 12d             | _usb_h_fs_nco_  res     1
3ba4c 12d             | _usb_d_fs_nco_  res     1
3ba4c 12d             | '------------------------------------------------------------------------------
3ba4c 12d             | ' Scratch registers
3ba4c 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
3ba4c 12d             | htmp1           res     1
3ba4c 12d             | htmp2           res     1
3ba4c 12d             | htmp3           res     1
3ba4c 12d             | hrep            res     1         ' Repeat count
3ba4c 12d             | hsave0          res     1         ' Subroutine parameter saves
3ba4c 12d             | hsave1          res     1
3ba4c 12d             | hsave2          res     1
3ba4c 12d             | isrtmp1         res     1
3ba4c 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
3ba4c 12d             | hr0             res     1         ' Multi-purpose registers
3ba4c 12d             | hr1             res     1
3ba4c 12d             | hr2             res     1
3ba4c 12d             | hr3             res     1
3ba4c 12d             | hpar1           res     1         ' Routine entry/exit parameters
3ba4c 12d             | hpar2           res     1
3ba4c 12d             | hpar3           res     1
3ba4c 12d             | hct2            res     1         ' Function response bus turn-around timer
3ba4c 12d             | hct3            res     1         ' Keyboard/mouse poll timer
3ba4c 12d             | mod_cnt         res     1         ' Used in idle loops
3ba4c 12d             | 
3ba4c 12d             |                 fit     $1F0
3ba4c 12d             |                 fit     $1F0
3ba4c 12d             |                 org     $200
3ba4c 200             | hlut_start
3ba4c 200             | 
3ba4c 200             | '------------------------------------------------------------------------------
3ba4c 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
3ba4c 200             | ' settings to startup defaults.
3ba4c 200             | '------------------------------------------------------------------------------
3ba4c 200             | ' On entry:
3ba4c 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
3ba4c 200             | '------------------------------------------------------------------------------
3ba4c 200             | set_speed_full
3ba4c 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
3ba50 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
3ba54 202 A6 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
3ba58 203 A4 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
3ba5c 204             | '                ret                             wcz     ' Restore caller flags on exit
3ba5c 204             | 
3ba5c 204             | '------------------------------------------------------------------------------
3ba5c 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
3ba5c 204             | ' is a downstream hub connected (not yet implemented), the baud generator
3ba5c 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
3ba5c 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
3ba5c 204             | ' putting the smart pins into reset.
3ba5c 204             | '------------------------------------------------------------------------------
3ba5c 204             | ' On entry:
3ba5c 204             | ' On exit: CZ flags restored to caller states
3ba5c 204             | '------------------------------------------------------------------------------
3ba5c 204             | set_speed_low
3ba5c 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
3ba60 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
3ba64 206 22 6B 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
3ba68 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
3ba6c 208 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
3ba70 209 A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
3ba74 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
3ba78 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
3ba7c 20c             | 
3ba7c 20c             | '------------------------------------------------------------------------------
3ba7c 20c             | ' Perform configuration stuff required when a device intitially connects.
3ba7c 20c             | '------------------------------------------------------------------------------
3ba7c 20c             | ' On entry:
3ba7c 20c             | ' On exit:
3ba7c 20c             | '------------------------------------------------------------------------------
3ba7c 20c             | on_connect
3ba7c 20c 02 86 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
3ba80 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
3ba84 20e             | .retry
3ba84 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3ba88 20f 01 8E 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
3ba8c 210 02 8E 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
3ba90 211 00 08 00 FF 
3ba94 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3ba98 213 20 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
3ba9c 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3baa0 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
3baa4 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3baa8 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3baac 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3bab0 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
3bab4 21a B2 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
3bab8 21b 4C 03 B0 FD |                 call    #poll_waitx
3babc 21c 01 86 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
3bac0 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
3bac4 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
3bac8 21f B8 FF 9F FD |                 jmp     #.retry
3bacc 220             | .get_dev_desc
3bacc 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3bad0 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3bad4 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3bad8 223 A8 99 02 F6 |                 mov     hctwait, _1ms_
3badc 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
3bae0 225 88 FB BF FD |                 call    #reset
3bae4 226 38 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
3bae8 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3baec 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
3baf0 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
3baf4 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3baf8 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
3bafc 22c AD 99 02 F6 |                 mov     hctwait, _8ms_
3bb00 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
3bb04 22e 04 00 00 FF 
3bb08 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
3bb0c 230 34 FA BF FD |                 call    #calc_crc5
3bb10 231 20 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
3bb14 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3bb18 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3bb1c 234 F7 AD C2 FA |                 rdbyte  total_data, pb
3bb20 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3bb24 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
3bb28 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3bb2c 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
3bb30 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3bb34 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3bb38 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3bb3c 23c A0 99 02 F6 |                 mov     hctwait, _500us_
3bb40 23d C4 02 B0 FD |                 call    #poll_waitx
3bb44 23e 28 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
3bb48 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3bb4c 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3bb50 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
3bb54 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3bb58 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3bb5c 244 2D 00 64 5D |         if_nz   ret
3bb60 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
3bb64 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3bb68 247 61 87 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
3bb6c 248 61 89 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3bb70 249 00 73 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
3bb74 24a 09 86 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3bb78 24b 02 88 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3bb7c 24c 56 73 1B A2 |         if_z    cmp     htmp, total_data        wcz
3bb80 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
3bb84 24e 2C FB 9F CD |         if_b    jmp     #host_error
3bb88 24f 24 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
3bb8c 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
3bb90 251 2D EC 63 FD |                 call    pa
3bb94 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
3bb98 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
3bb9c 254 2C EC 63 FD |                 jmp     pa
3bba0 255             | 
3bba0 255             | '------------------------------------------------------------------------------
3bba0 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
3bba0 255             | ' Status reporting is always in the function-to-host direction.
3bba0 255             | '------------------------------------------------------------------------------
3bba0 255             | ' On entry:
3bba0 255             | '   PTRA - start address of the SETUP data in hub.
3bba0 255             | '   PB - start address of the buffer/struct to be written to during the IN data
3bba0 255             | '     stage.
3bba0 255             | '   ep_addr_pid - device address, endpoint and CRC5.
3bba0 255             | ' On exit:
3bba0 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
3bba0 255             | '     contains the count of data stage bytes actually received, which must
3bba0 255             | '     always be <= the count requested.
3bba0 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
3bba0 255             | '     more specific USB operation error code.
3bba0 255             | '------------------------------------------------------------------------------
3bba0 255             | control_read
3bba0 255 5E 8F 03 F6 |                 mov     hpar1, ep_addr_pid
3bba4 256 F8 91 03 F6 |                 mov     hpar2, ptra
3bba8 257 F7 93 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
3bbac 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
3bbb0 259             | .xfer_start
3bbb0 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
3bbb4 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
3bbb8 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3bbbc 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
3bbc0 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
3bbc4 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3bbc8 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
3bbcc 260 61 00 00 FF 
3bbd0 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
3bbd4 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
3bbd8 263             | .data
3bbd8 263 56 B1 02 F6 |                 mov     pkt_data, total_data
3bbdc 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
3bbe0 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
3bbe4 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
3bbe8 267             | .nak_retry
3bbe8 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
3bbec 268             | .in_retry
3bbec 268 BC F6 BF FD |                 call    #txn_in
3bbf0 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
3bbf4 26a 28 00 90 AD |         if_z    jmp     #.commit
3bbf8 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3bbfc 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3bc00 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3bc04 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3bc08 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
3bc0c 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3bc10 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
3bc14 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3bc18 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
3bc1c 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
3bc20 275             | .commit
3bc20 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
3bc24 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
3bc28 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
3bc2c 278 5C 87 03 F6 |                 mov     hr0, pkt_cnt
3bc30 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
3bc34 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
3bc38 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
3bc3c 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
3bc40 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
3bc44 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
3bc48 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
3bc4c 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
3bc50 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
3bc54 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
3bc58 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3bc5c 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
3bc60 285             | .pre_status
3bc60 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
3bc64 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
3bc68 287 00 B0 06 F6 |                 mov     pkt_data, #0
3bc6c 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
3bc70 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3bc74 28a 61 00 00 FF 
3bc78 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
3bc7c 28c             | .out_retry
3bc7c 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
3bc80 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3bc84 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
3bc88 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3bc8c 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3bc90 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3bc94 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3bc98 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
3bc9c 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3bca0 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
3bca4 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
3bca8 297             | ' I've encountered transfer STALL, even though the data looks correct, and
3bca8 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
3bca8 297             | ' ControlRead() transfer gets things unstuck most of the time...
3bca8 297             | .xfer_retry
3bca8 297 AC 99 02 F6 |                 mov     hctwait, _xfer_wait_
3bcac 298 58 01 B0 FD |                 call    #poll_waitx
3bcb0 299 8C F9 BF FD |                 call    #wait_txn_ok
3bcb4 29a C7 BD 02 F6 |                 mov     ep_addr_pid, hpar1
3bcb8 29b C8 F1 03 F6 |                 mov     ptra, hpar2
3bcbc 29c C9 EF 03 F6 |                 mov     pb, hpar3
3bcc0 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
3bcc4 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
3bcc8 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
3bccc 2a0             | 
3bccc 2a0             | '------------------------------------------------------------------------------
3bccc 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
3bccc 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
3bccc 2a0             | ' the SETUP data struct is filled with the required values.
3bccc 2a0             | '------------------------------------------------------------------------------
3bccc 2a0             | ' On entry:
3bccc 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
3bccc 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
3bccc 2a0             | '     stage.
3bccc 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
3bccc 2a0             | ' On exit:
3bccc 2a0             | '   retval - used to convey the success/failure of each stage.
3bccc 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
3bccc 2a0             | '     more specific USB operation error code.
3bccc 2a0             | '------------------------------------------------------------------------------
3bccc 2a0             | control_write
3bccc 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3bcd0 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3bcd4 2a2 0E 6A 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3bcd8 2a3             | 
3bcd8 2a3 5E 8F 03 F6 |                 mov     hpar1, ep_addr_pid
3bcdc 2a4 F8 91 03 F6 |                 mov     hpar2, ptra
3bce0 2a5 F7 93 03 F6 |                 mov     hpar3, pb
3bce4 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
3bce8 2a7             | .xfer_start
3bce8 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
3bcec 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
3bcf0 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
3bcf4 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3bcf8 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
3bcfc 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
3bd00 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3bd04 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
3bd08 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
3bd0c 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
3bd10 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3bd14 2b2             | .data
3bd14 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
3bd18 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
3bd1c 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
3bd20 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
3bd24 2b6             | .out_retry
3bd24 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
3bd28 2b7 88 F6 BF FD |                 call    #txn_out
3bd2c 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3bd30 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
3bd34 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3bd38 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
3bd3c 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
3bd40 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
3bd44 2be             | .commit
3bd44 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
3bd48 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
3bd4c 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
3bd50 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3bd54 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
3bd58 2c3             | pre_status_in
3bd58 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
3bd5c 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3bd60 2c5             | .status_retry
3bd60 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
3bd64 2c6 44 F5 BF FD |                 call    #txn_in
3bd68 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
3bd6c 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
3bd70 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
3bd74 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
3bd78 2cb 2D 00 64 AD |         if_z    ret
3bd7c 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
3bd80 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3bd84 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
3bd88 2cf             | '               ret                                     ' Caller must handle transfer retirement
3bd88 2cf             | 
3bd88 2cf             | '------------------------------------------------------------------------------
3bd88 2cf             | ' Execute an IN interrupt transaction.
3bd88 2cf             | '------------------------------------------------------------------------------
3bd88 2cf             | ' On entry:
3bd88 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
3bd88 2cf             | '   hpar2 - Address of the IN data buffer
3bd88 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
3bd88 2cf             | ' On exit:
3bd88 2cf             | '   retval - the result of the operation.
3bd88 2cf             | '   hpar3 - the count of IN data bytes actually received.
3bd88 2cf             | '------------------------------------------------------------------------------
3bd88 2cf             | do_int_in
3bd88 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3bd8c 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3bd90 2d1 0E 6A 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3bd94 2d2             | 
3bd94 2d2 C9 73 33 F9 |                 getword htmp, hpar3, #0
3bd98 2d3 C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz
3bd9c 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
3bda0 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
3bda4 2d6             | .retry
3bda4 2d6 C9 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
3bda8 2d7 00 F5 BF FD |                 call    #txn_in
3bdac 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
3bdb0 2d9 1C 00 90 AD |         if_z    jmp     #.commit
3bdb4 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
3bdb8 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
3bdbc 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
3bdc0 2dd 54 00 B0 FD |                 call    #retry_wait
3bdc4 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3bdc8 2df 18 00 90 AD |         if_z    jmp     #.post_ret
3bdcc 2e0 D4 FF 9F FD |                 jmp     #.retry
3bdd0 2e1             | .commit
3bdd0 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
3bdd4 2e2 C8 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
3bdd8 2e3 5C 87 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
3bddc 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
3bde0 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
3bde4 2e6             | .post_ret
3bde4 2e6 5C 93 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
3bde8 2e7             | 
3bde8 2e7             | 
3bde8 2e7             | '------------------------------------------------------------------------------
3bde8 2e7             | ' Resets the downstream hub port to FS
3bde8 2e7             | '------------------------------------------------------------------------------
3bde8 2e7             | dwnstream_reset
3bde8 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3bdec 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
3bdf0 2e9             | 
3bdf0 2e9 0E 6A 07 F4 |                 bitl    _usb_h_ls_nco_, #14
3bdf4 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3bdf8 2eb 22 6F 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3bdfc 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
3be00 2ed A6 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3be04 2ee A4 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3be08 2ef             | 
3be08 2ef             | '------------------------------------------------------------------------------
3be08 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
3be08 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
3be08 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
3be08 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
3be08 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
3be08 2ef             | '------------------------------------------------------------------------------
3be08 2ef             | ' On entry:
3be08 2ef             | '   hctwait - wait interval in sysclocks.
3be08 2ef             | ' On exit:
3be08 2ef             | '------------------------------------------------------------------------------
3be08 2ef             | poll_waitx
3be08 2ef 1A 94 63 FD |                 getct   hct2
3be0c 2f0 4C 95 6B FA |                 addct2  hct2, hctwait
3be10 2f1             | .wait
3be10 2f1 FF 25 CC FB |                 jnct2   #.wait
3be14 2f2 2D 00 64 FD |                 ret
3be18 2f3             | 
3be18 2f3             | '------------------------------------------------------------------------------
3be18 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
3be18 2f3             | '------------------------------------------------------------------------------
3be18 2f3             | ' On entry:
3be18 2f3             | '   retval - transaction response PID or error code.
3be18 2f3             | ' On exit:
3be18 2f3             | '------------------------------------------------------------------------------
3be18 2f3             | retry_wait
3be18 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3be1c 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
3be20 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3be24 2f6 14 00 90 AD |         if_z    jmp     #.nak
3be28 2f7 9F 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
3be2c 2f8 D8 FF BF FD |                 call    #poll_waitx
3be30 2f9             | .dec
3be30 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
3be34 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
3be38 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
3be3c 2fc             | .nak
3be3c 2fc 9E 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
3be40 2fd C4 FF BF FD |                 call    #poll_waitx
3be44 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
3be48 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
3be4c 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
3be50 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
3be54 302 2D 00 64 FD |                 ret
3be58 303             | 
3be58 303             | host_reset
3be58 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
3be5c 304 14 72 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
3be60 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
3be60 305 BD 01 05 FF 
3be64 306 00 72 1F F2 |                 cmp     htmp, ##168_000_000     wcz
3be68 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
3be6c 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
3be70 309             | ' Check to see if the system clock has been changed.
3be70 309 2C 73 0B F2 |                 cmp     htmp, save_sysclk       wz
3be74 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
3be78 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
3be7c 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
3be80 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3be84 30e 40 46 62 FD |                 dirl    dp
3be88 30f             | 
3be88 30f 28 02 64 FD |                 setq    #1
3be8c 310 80 00 80 FF 
3be90 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3be94 312 22 6F 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
3be98 313             | .enable
3be98 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
3be9c 314 41 46 62 FD |                 dirh    dp
3bea0 315 1F 38 63 FD |                 waitx   _1us_
3bea4 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3bea8 317             | 
3bea8 317             |                 ' Handle Port protection enable and startup delay
3bea8 317 00 48 56 F2 |                 cmps    usb_enable_pin, #0      wc
3beac 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
3beb0 319 1F 60 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
3beb4 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
3beb8 31b 1F 60 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
3bebc 31c             | 
3bebc 31c             |                 'call #dev_reset ' TODO THINK ABOUT THIS
3bebc 31c             | 
3bebc 31c             | discon_entry
3bebc 31c 03 98 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
3bec0 31d             | 
3bec0 31d 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
3bec4 31e 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
3bec8 31f 38 EC A7 F9 |                 alti    pa, #%000_111_000
3becc 320 00 00 04 F6 |                 mov     0-0, #0
3bed0 321             | .regloop
3bed0 321             |               
3bed0 321             |         if HAVE_HIDPAD
3bed0 321 F8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
3bed4 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
3bed8 323 28 6E 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
3bedc 324 F7 01 68 FC |                 wrlong  #0,pb
3bee0 325             |         end
3bee0 325             |         if EMUPAD_MAX_PLAYER > 0
3bee0 325             |         end
3bee0 325             | 
3bee0 325             |                 ' Fall through to disconnected loop
3bee0 325             | 
3bee0 325             | '-----------------------------------------------------------------------------------------------------------------
3bee0 325             | ' Device connect handling (Section 7.1.7.3).
3bee0 325             | '-----------------------------------------------------------------------------------------------------------------
3bee0 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
3bee0 325             | ' device to connect (Section 7.1.7.3).
3bee0 325             | '-----------------------------------------------------------------------------------------------------------------
3bee0 325             | disconnected
3bee0 325 14 88 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
3bee4 326 2C 89 0B F2 |                 cmp     hr1, save_sysclk        wz
3bee8 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
3beec 328 03 88 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
3bef0 329 1F 88 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
3bef4 32a             |         if ACTIVITY_LED >= 0
3bef4 32a             |         end
3bef4 32a 22 A7 82 FA |                 rqpin   urx, dm
3bef8 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
3befc 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
3bf00 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
3bf04 32e             | .se1_test
3bf04 32e B1 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
3bf08 32f FC FE BF FD |                 call    #poll_waitx
3bf0c 330 22 A7 82 FA |                 rqpin   urx, dm
3bf10 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3bf14 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
3bf18 333 A0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
3bf1c 334             | .se1            'SE1 is a fatal error condition
3bf1c 334 B1 99 02 F6 |                 mov     hctwait, _100ms_
3bf20 335 E4 FE BF FD |                 call    #poll_waitx
3bf24 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
3bf28 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
3bf2c 338             | .connect_test                                           ' Test lines until stable J/K state seen
3bf2c 338 1F 62 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
3bf30 339 22 A7 82 FA |                 rqpin   urx, dm
3bf34 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3bf38 33b 80 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
3bf3c 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
3bf40 33d             | connected
3bf40 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
3bf44 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
3bf48 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
3bf4c 340 6C FF 9F 5D |         if_nz   jmp     #discon_entry
3bf50 341             | .set_pulse
3bf50 341 1A 66 63 FD |                 getct   _pulse_time_
3bf54 342 B2 67 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
3bf58 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
3bf58 343             | ' of 1ms and make a correction, if necessary.
3bf58 343             | '                mov     htmp, _1ms_
3bf58 343             | '                subs    htmp, iframe_delta
3bf58 343             | '                adds    _frame1ms_clks_, htmp
3bf58 343             | '                debug(udec(_frame1ms_clks_))
3bf58 343             | 
3bf58 343             |                 ' Fall through to idle/processing loop
3bf58 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
3bf5c 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
3bf60 345             | 
3bf60 345             | hidle
3bf60 345 22 A7 82 FA |                 rqpin   urx, dm
3bf64 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3bf68 347 98 00 90 CD |         if_c    jmp     #.se0_test
3bf6c 348 24 06 70 FD |                 pollct3                         wc
3bf70 349 68 00 90 3D |         if_nc   jmp     #.nopoll
3bf74 34a 1A 96 63 FD |                 getct   hct3
3bf78 34b A8 97 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
3bf7c 34c             | 
3bf7c 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3bf80 34d 00 72 E3 F8 |                 getbyte htmp
3bf84 34e             | 
3bf84 34e 09 72 0F F2 |                 cmp     htmp, #HUB_READY        wz
3bf88 34f 8C 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
3bf8c 350 40 00 90 AD |         if_z    jmp     #.poll
3bf90 351             | 
3bf90 351             |         if _HAVE_GAMEPAD
3bf90 351 06 72 0F F2 |                 cmp     htmp, #HID_READY        wz
3bf94 352 08 72 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
3bf98 353 07 72 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
3bf9c 354 F4 15 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
3bfa0 355 2C 00 90 AD |         if_z    jmp     #.poll
3bfa4 356             |         end
3bfa4 356             | 
3bfa4 356             |         if HAVE_MOUSE
3bfa4 356 04 72 0F F2 |                 cmp     htmp, #M_READY          wz
3bfa8 357 44 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
3bfac 358 20 00 90 AD |         if_z    jmp     #.poll
3bfb0 359             |         end
3bfb0 359             | 
3bfb0 359 03 72 0F F2 |                 cmp     htmp, #KB_READY         wz
3bfb4 35a AC 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
3bfb8 35b 14 00 90 AD |         if_z    jmp     #.poll
3bfbc 35c             | 
3bfbc 35c 05 72 0F F2 |                 cmp     htmp, #KBM_READY        wz
3bfc0 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
3bfc4 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
3bfc8 35f AC 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
3bfcc 360             |         if HAVE_MOUSE
3bfcc 360 44 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
3bfd0 361             |         else
3bfd0 361             |         end
3bfd0 361             | 
3bfd0 361             | .poll
3bfd0 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
3bfd4 362 2D EC 63 FD |                 call    pa
3bfd8 363             | .skip_poll
3bfd8 363             | 
3bfd8 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
3bfdc 364             | 
3bfdc 364             | .nopoll
3bfdc 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
3bfe0 365 44 00 90 AD |         if_z    jmp     #hsuspend
3bfe4 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
3bfe8 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
3bfec 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
3bff0 369 1A 86 63 FD |                 getct   hr0
3bff4 36a B3 87 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
3bff8 36b             |         if ACTIVITY_LED >= 0
3bff8 36b             |         end
3bff8 36b 1A 66 63 3D |         if_ae   getct   _pulse_time_
3bffc 36c B2 67 03 31 |         if_ae   add     _pulse_time_, _500ms_
3c000 36d 5C FF 9F FD |                 jmp     #hidle
3c004 36e             | ' Check for extended SE0 state on the bus
3c004 36e             | .se0_test
3c004 36e A8 99 02 F6 |                 mov     hctwait, _1ms_
3c008 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
3c00c 370 22 A7 82 FA |                 rqpin   urx, dm
3c010 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3c014 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
3c018 373 24 F6 BF FD |                 call    #wait_txn_ok
3c01c 374 00 00 80 FF 
3c020 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
3c024 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
3c024 376 94 FE 9F FD |                 jmp     #discon_entry                   ' Device disconnected
3c028 377             | 
3c028 377             | hsuspend
3c028 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
3c02c 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
3c030 379 1F 54 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
3c034 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
3c038 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
3c03c 37c 00 98 07 F6 |                 mov     mod_cnt, #0
3c040 37d             | 
3c040 37d             |                 ' Fall through to resume wait loop
3c040 37d             | 
3c040 37d             | hwait_resume
3c040 37d 14 88 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
3c044 37e 02 88 47 F0 |                 shr     hr1, #2
3c048 37f 1F 88 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
3c04c 380             |         if ACTIVITY_LED >= 0
3c04c 380             |         end
3c04c 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
3c050 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
3c054 382 14 72 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
3c058 383 2C 73 0B F2 |                 cmp     htmp, save_sysclk       wz
3c05c 384 18 00 90 AD |         if_z    jmp     #.resume
3c060 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
3c064 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
3c068 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
3c06c 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3c070 389 22 6F 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
3c074 38a 22 6B 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
3c078 38b             | .resume
3c078 38b 22 05 28 FC |                 wypin   #OUT_K, dm
3c07c 38c 1F 5E 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
3c080 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
3c084 38e A3 73 03 F6 |                 mov     htmp, _ip_delay_ls_
3c088 38f 01 72 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
3c08c 390 1F 72 63 FD |                 waitx   htmp
3c090 391 22 07 28 FC |                 wypin   #OUT_J, dm
3c094 392 01 72 47 F0 |                 shr     htmp, #1
3c098 393 1F 72 63 FD |                 waitx   htmp
3c09c 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3c0a0 395 1A 92 62 FD |                 getct   iframe_ct_base
3c0a4 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3c0a8 397 B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3c0ac 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
3c0b0 399 AB 99 02 F6 |                 mov     hctwait, _4ms_
3c0b4 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
3c0b8 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
3c0bc 39c             | 
3c0bc 39c             | '------------------------------------------------------------------------------
3c0bc 39c             | ' Send preamble to enable low-speed HUB ports
3c0bc 39c             | '------------------------------------------------------------------------------
3c0bc 39c             | ' On entry:
3c0bc 39c             | ' On exit:
3c0bc 39c             | '   USB baud rate set to low-speed
3c0bc 39c             | '------------------------------------------------------------------------------
3c0bc 39c             | utx_pre
3c0bc 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3c0c0 39d 40 46 62 FD |                 dirl    dp
3c0c4 39e 28 02 64 FD |                 setq    #1
3c0c8 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
3c0cc 3a0 58 44 62 FD |                 drvl    dm
3c0d0 3a1 59 46 62 FD |                 drvh    dp
3c0d4 3a2             | 
3c0d4 3a2 1E 00 00 FF 
3c0d8 3a3 80 72 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
3c0dc 3a4             | 
3c0dc 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
3c0e0 3a5 01 72 57 F0 |                 shr     htmp, #1        wc
3c0e4 3a6 28 02 64 3D |         if_nc   setq    #1
3c0e8 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
3c0ec 3a8 1F 4E 63 FD |                 waitx   _preamble_wait_
3c0f0 3a9             | .l1
3c0f0 3a9             | 
3c0f0 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3c0f4 3aa 40 46 62 FD |                 dirl    dp
3c0f8 3ab 28 02 64 FD |                 setq    #1
3c0fc 3ac 80 00 80 FF 
3c100 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3c104 3ae 22 6B 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
3c108 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
3c10c 3b0 41 46 62 FD |                 dirh    dp
3c110 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3c114 3b2             | 
3c114 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
3c118 3b3 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
3c11c 3b4 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
3c120 3b5             | 
3c120 3b5             | hlut_end
3c120 3b5             |                 fit     $400
3c120 3b5             |                 fit     $400
3c120 3b5             |                 orgh
3c120                 | if OVERLAP_MEMORY
3c120                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
3c120                 | end
3c120                 | '------------------------------------------------------------------------------
3c120                 | ' Routines called from cog space.
3c120                 | '------------------------------------------------------------------------------
3c120                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
3c120                 | '------------------------------------------------------------------------------
3c120                 | 
3c120                 | '------------------------------------------------------------------------------
3c120                 | ' USB host cog initialization.
3c120                 | '------------------------------------------------------------------------------
3c120                 | usb_host_init
3c120                 |                 ' Initialize buffer pointers
3c120                 |         if OVERLAP_MEMORY
3c120                 |         else
3c120     4C 15 B0 FE |                 loc     pb, #hid_descr
3c124                 |         end
3c124     F7 4B 02 F6 |                 mov     hid_descr_p, pb
3c128                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
3c128                 |                 {
3c128                 |                 }
3c128                 |         
3c128                 |                 {
3c128                 |                 }
3c128                 |                 'loc     pb,#hkbd_report
3c128                 |                 'mov     hkbd_report_p,pb
3c128                 | 
3c128     44 1D B0 FE |                 loc     pb, #hub_descr
3c12c     F7 4D 02 F6 |                 mov     hub_descr_p, pb
3c130     59 1D B0 FE |                 loc     pb, #urx_buff
3c134     F7 4F 02 F6 |                 mov     urx_buff_p, pb
3c138     D1 1D B0 FE |                 loc     pb, #dev_desc_buff
3c13c     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
3c140     DB 1D B0 FE |                 loc     pb, #con_desc_buff
3c144     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
3c148     24 15 B0 FE |                 loc     pb, #usb_cache_start
3c14c     F7 55 02 F6 |                 mov     cache_start_p, pb
3c150     25 1D B0 FE |                 loc     pb, #usb_cache_end
3c154     F7 57 02 F6 |                 mov     cache_end_p, pb
3c158                 | 
3c158                 |         if ERROR_LED >= 0
3c158                 |         end
3c158                 | 
3c158                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
3c158                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
3c158                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
3c158                 | ' Configure and enable the Serial Host USB port.
3c158     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
3c15c                 | 
3c15c                 | '------------------------------------------------------------------------------
3c15c                 | ' Timing calculations happen before any interrupt(s) are enabled.
3c15c                 | '------------------------------------------------------------------------------
3c15c                 | ' On entry:
3c15c                 | '   htmp - current CLKFREQ value.
3c15c                 | '------------------------------------------------------------------------------
3c15c                 | hinit_usb_timings
3c15c                 | '                getct   htmp2
3c15c     B9 59 02 F6 |                 mov     save_sysclk, htmp
3c160     8D 5B 80 FF 
3c164     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
3c168     18 32 63 FD |                 getqx   _12Mbps_
3c16c     10 32 57 F0 |                 shr     _12Mbps_, #16           wc
3c170     00 32 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
3c174     03 6E 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
3c178     0E 6E 67 F0 |                 shl     _usb_h_fs_nco_, #14
3c17c     99 6F 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
3c180     01 70 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
3c184     0E 70 67 F0 |                 shl     _usb_d_fs_nco_, #14
3c188     99 71 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
3c18c     99 35 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
3c190     03 34 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
3c194     02 6A 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
3c198     0E 6A 67 F0 |                 shl     _usb_h_ls_nco_, #14
3c19c     9A 6B 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
3c1a0     9A 6D 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
3c1a4     80 00 00 FF 
3c1a8     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
3c1ac     18 2E 63 FD |                 getqx   _var_64_lower_
3c1b0     19 30 63 FD |                 getqy   _var_64_upper_
3c1b4     28 2E 63 FD |                 setq    _var_64_lower_
3c1b8     65 CD 1D FF 
3c1bc     00 30 27 FD |                 qfrac   _var_64_upper_, ##_1b
3c1c0     18 36 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
3c1c4     01 00 00 FF 
3c1c8     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
3c1cc     18 2E 63 FD |                 getqx   _var_64_lower_
3c1d0     19 30 63 FD |                 getqy   _var_64_upper_
3c1d4     28 2E 63 FD |                 setq    _var_64_lower_
3c1d8     A1 07 00 FF 
3c1dc     40 30 27 FD |                 qfrac   _var_64_upper_, ##_1m
3c1e0     18 38 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
3c1e4     9C 7D 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
3c1e8     09 38 57 F0 |                 shr     _1us_, #9               wc
3c1ec     00 38 27 F1 |                 addx    _1us_, #0                       ' Round to final value
3c1f0     0A 7C 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
3c1f4     18 3A 63 FD |                 getqx   _10us_
3c1f8     09 3A 57 F0 |                 shr     _10us_, #9              wc
3c1fc     00 3A 27 F1 |                 addx    _10us_, #0                      ' 10us
3c200     21 7C 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
3c204     18 3C 63 FD |                 getqx   _33us_
3c208     09 3C 57 F0 |                 shr     _33us_, #9              wc
3c20c     00 3C 27 F1 |                 addx    _33us_, #0                      ' 33us
3c210     FA 7C 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
3c214     18 3E 63 FD |                 getqx   _txn_err_
3c218     09 3E 57 F0 |                 shr     _txn_err_, #9           wc
3c21c     00 3E 27 F1 |                 addx    _txn_err_, #0                   ' 250us
3c220     F4 7D 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
3c224     18 40 63 FD |                 getqx   _500us_
3c228     09 40 57 F0 |                 shr     _500us_, #9             wc
3c22c     00 40 27 F1 |                 addx    _500us_, #0                     ' 500us
3c230     01 00 00 FF 
3c234     9A 7C 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
3c238     18 42 63 FD |                 getqx   _txn_ok_ls_
3c23c     09 42 57 F0 |                 shr     _txn_ok_ls_, #9         wc
3c240     00 42 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
3c244     01 00 00 FF 
3c248     52 7D 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
3c24c     18 44 63 FD |                 getqx   _txn_ok_fs_
3c250     09 44 57 F0 |                 shr     _txn_ok_fs_, #9         wc
3c254     00 44 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
3c258     9B 47 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
3c25c     05 00 00 FF 
3c260     80 46 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
3c264     10 46 57 F0 |                 shr     _ip_delay_ls_, #16      wc
3c268     00 46 27 F1 |                 addx    _ip_delay_ls_, #0
3c26c     9B 4B 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
3c270     1C 00 00 FF 
3c274     C0 4B 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
3c278     10 4A 57 F0 |                 shr     _tat_wait_ls_, #16      wc
3c27c     00 4A 27 F1 |                 addx    _tat_wait_ls_, #0
3c280     9B 49 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
3c284     00 00 00 FF 
3c288     4E 49 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
3c28c     10 48 57 F0 |                 shr     _ip_delay_fs_, #16      wc
3c290     00 48 27 F1 |                 addx    _ip_delay_fs_, #0
3c294     9B 4D 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
3c298     04 00 00 FF 
3c29c     23 4D 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
3c2a0     10 4C 57 F0 |                 shr     _tat_wait_fs_, #16      wc
3c2a4     00 4C 27 F1 |                 addx    _tat_wait_fs_, #0
3c2a8     8D 5B 00 FF 
3c2ac     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
3c2b0     18 4E 63 FD |                 getqx   _preamble_wait_
3c2b4     08 4E 87 F1 |                 sub     _preamble_wait_,# 9 - 1
3c2b8     01 00 00 FF 
3c2bc     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
3c2c0     18 2E 63 FD |                 getqx   _var_64_lower_
3c2c4     19 30 63 FD |                 getqy   _var_64_upper_
3c2c8     28 2E 63 FD |                 setq    _var_64_lower_
3c2cc     01 00 00 FF 
3c2d0     E8 31 27 FD |                 qfrac   _var_64_upper_, ##_1thou
3c2d4     18 50 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
3c2d8     09 50 57 F0 |                 shr     _1ms_, #9               wc
3c2dc     00 50 27 F1 |                 addx    _1ms_, #0                       ' 1ms
3c2e0     FF FF 7F FF 
3c2e4     F2 69 07 F6 |                 mov     _frame1ms_clks_, ##-14
3c2e8     A8 69 43 F1 |                 adds    _frame1ms_clks_, _1ms_
3c2ec     A8 53 03 F6 |                 mov     _2ms_, _1ms_
3c2f0     01 52 67 F0 |                 shl     _2ms_, #1                       ' 2ms
3c2f4     A8 55 03 F6 |                 mov     _suspend_wait_, _1ms_
3c2f8     A8 55 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
3c2fc     A8 57 03 F6 |                 mov     _4ms_, _1ms_
3c300     02 56 67 F0 |                 shl     _4ms_, #2                       ' 4ms
3c304     AB 59 03 F6 |                 mov     _xfer_wait_, _4ms_
3c308     A8 59 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
3c30c     AC 5D 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
3c310     AE 5F 03 F6 |                 mov     _resume_hold_, _reset_hold_
3c314     02 5E 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
3c318     AF 63 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
3c31c     01 62 67 F0 |                 shl     _100ms_, #1                     ' 40ms
3c320     A8 5B 03 F6 |                 mov     _8ms_, _1ms_
3c324     03 5A 67 F0 |                 shl     _8ms_, #3                       ' 8ms
3c328     01 5C 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
3c32c     AE 63 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
3c330     AC 5D 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
3c334     AC 61 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
3c338     02 60 67 F0 |                 shl     _21ms_, #2                      ' 20ms
3c33c     A8 61 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
3c340     B1 65 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
3c344     01 62 67 F0 |                 shl     _100ms_, #1                     ' 100ms
3c348     03 64 67 F0 |                 shl     _500ms_, #3                     ' 400ms
3c34c     B1 65 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
3c350                 | '        _ret_   mov     _1sec_, save_sysclk
3c350                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
3c350                 | '                ret
3c350                 | {
3c350                 | }
3c350                 | 
3c350                 | '------------------------------------------------------------------------------
3c350                 | ' Parse a configuration descriptor chain to see if the device is a recognized
3c350                 | ' one. If it is, start the task progression that will configure the device for
3c350                 | ' use.
3c350                 | '------------------------------------------------------------------------------
3c350                 | ' On entry:
3c350                 | '   hconfig_base - start address of the cached config descriptor chain.
3c350                 | ' On exit:
3c350                 | '------------------------------------------------------------------------------
3c350                 | hparse_con_desc
3c350     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
3c354     82 73 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
3c358     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
3c35c     4E 72 FF F9 |                 movbyts htmp,#%%1032
3c360     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
3c364                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
3c364                 | 
3c364     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
3c368     6E ED 03 F1 |                 add     pa, hconfig_base
3c36c     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
3c370                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
3c370                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
3c370                 | ' that defines a keyboard and/or mouse.
3c370     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
3c374                 | .next_intf
3c374     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3c378     B8 01 90 3D |         if_ae   jmp     #hset_config
3c37c     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3c380     75 F3 03 F1 |                 add     ptrb, hnext_desc
3c384     81 73 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3c388     04 72 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
3c38c     0C 00 90 AD |         if_z    jmp     #.intf
3c390     80 73 C7 FA |                 rdbyte  htmp, ptrb
3c394     B9 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
3c398     D8 FF 9F FD |                 jmp     #.next_intf
3c39c                 | .intf
3c39c     00 90 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
3c3a0     00 92 07 F6 |                 mov     hpar3, #0
3c3a4     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
3c3a8     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
3c3ac     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
3c3b0     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
3c3b4                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
3c3b4                 | 
3c3b4                 | .endp
3c3b4     80 73 C7 FA |                 rdbyte  htmp, ptrb
3c3b8     B9 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
3c3bc     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3c3c0     78 00 90 3D |         if_ae   jmp     #.get_device
3c3c4     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3c3c8     75 F3 03 F1 |                 add     ptrb, hnext_desc
3c3cc     81 73 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3c3d0     04 72 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
3c3d4     64 00 90 AD |         if_z    jmp     #.get_device
3c3d8     05 72 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
3c3dc     04 00 90 AD |         if_z    jmp     #.get_ep
3c3e0     D0 FF 9F FD |                 jmp     #.endp
3c3e4                 | .get_ep
3c3e4     82 89 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
3c3e8     07 88 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
3c3ec     0F 88 67 F0 |                 shl     hr1, #8 + 7
3c3f0     6C 73 03 F6 |                 mov     htmp, hctrl_ep_addr
3c3f4     3F 00 00 FF 
3c3f8     00 73 07 F5 |                 and     htmp, ##ADDR_MASK
3c3fc     C4 73 43 F5 |                 or      htmp, hr1                       ' endpoint address
3c400     00 90 0F F2 |                 cmp     hpar2, #0               wz
3c404     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
3c408     00 92 0F F2 |                 cmp     hpar3, #0               wz
3c40c     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
3c410     A0 FF 9F FD |                 jmp     #.endp
3c414                 | .in_ep
3c414     B9 91 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
3c418     84 8B C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
3c41c                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
3c41c     86 87 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
3c420     C3 8B DB F8 |                 setbyte hr2, hr0, #3
3c424     8C FF 9F FD |                 jmp     #.endp
3c428                 | .out_ep
3c428     B9 93 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
3c42c     84 8D C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
3c430                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
3c430     86 87 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
3c434     C3 8D DB F8 |                 setbyte hr3, hr0, #3
3c438     78 FF 9F FD |                 jmp     #.endp
3c43c                 | 
3c43c                 | .get_device
3c43c     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
3c440     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
3c444     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
3c448     64 00 90 AD |         if_z    jmp     #.gamepad
3c44c     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
3c450     A8 00 90 AD |         if_z    jmp     #.hub
3c454     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
3c458     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
3c45c     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3c460     4C 00 90 AD |         if_z    jmp     #.gamepad
3c464     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
3c468     08 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
3c46c                 | .keyboard
3c46c     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
3c470                 |         if HAVE_MOUSE
3c470     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
3c474                 |         else
3c474                 |         end
3c474     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
3c478     F8 FE 9F 5D |         if_nz   jmp     #.next_intf
3c47c     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3c480     C5 71 FA F8 |                 getbyte kb_interval, hr2, #3
3c484     C5 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
3c488     C8 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
3c48c                 |                 'debug(udec(kb_intf_num))
3c48c                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3c48c     E4 FE 9F FD |                 jmp     #.next_intf
3c490                 | if HAVE_MOUSE
3c490                 | .mouse
3c490     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
3c494     DC FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
3c498     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
3c49c     D4 FE 9F 5D |         if_nz   jmp     #.next_intf
3c4a0     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3c4a4                 |                 'getbyte ms_interval, hr2, #3
3c4a4     C5 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
3c4a8     C8 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
3c4ac                 |                 'debug(udec(kb_intf_num))
3c4ac                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3c4ac     C4 FE 9F FD |                 jmp     #.next_intf
3c4b0                 | end
3c4b0                 | .gamepad
3c4b0     79 73 03 F6 |                 mov     htmp, hkbd_ep_addr
3c4b4     C8 73 63 F5 |                 xor     htmp, hpar2
3c4b8     3F 00 00 FF 
3c4bc     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3c4c0     B0 FE 9F AD |         if_z    jmp     #.next_intf
3c4c4                 |         if HAVE_MOUSE
3c4c4     7A 73 03 F6 |                 mov     htmp, hmouse_ep_addr
3c4c8     C8 73 63 F5 |                 xor     htmp, hpar2
3c4cc     3F 00 00 FF 
3c4d0     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3c4d4     9C FE 9F AD |         if_z    jmp     #.next_intf
3c4d8                 |         end
3c4d8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
3c4dc     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
3c4e0     90 FE 9F 5D |         if_nz   jmp     #.next_intf
3c4e4                 | 
3c4e4     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3c4e8     C5 7B FA F8 |                 getbyte gp_interval, hr2, #3
3c4ec     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3c4f0     C8 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
3c4f4     C9 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
3c4f8                 |                 'debug(udec(gp_intf_num))
3c4f8                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
3c4f8     78 FE 9F FD |                 jmp     #.next_intf
3c4fc                 | .hub
3c4fc     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
3c500     70 FE 9F 5D |         if_nz   jmp     #.next_intf
3c504     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3c508     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
3c50c     64 FE 9F 5D |         if_nz   jmp     #.next_intf
3c510     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3c514     5C FE 9F 5D |         if_nz   jmp     #.next_intf
3c518     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
3c51c     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3c520     C8 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
3c524     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3c528     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
3c52c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
3c530                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
3c530     40 FE 9F FD |                 jmp     #.next_intf
3c534                 | 
3c534                 | '------------------------------------------------------------------------------
3c534                 | ' If a newly-connected device is recognized, do whatever is needed to configure
3c534                 | ' it according to its function, or functions. In the case of this boot protocol
3c534                 | ' keyboard/mouse class driver:
3c534                 | ' - SetConfiguration(config_num)
3c534                 | ' - SetProtocol(boot)
3c534                 | ' - SetIdle(indefinite)
3c534                 | ' - Enter the device interrupt IN polling task stage.
3c534                 | '------------------------------------------------------------------------------
3c534                 | ' On entry:
3c534                 | ' On exit:
3c534                 | '------------------------------------------------------------------------------
3c534                 | hset_config
3c534                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
3c534                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
3c534     02 76 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
3c538     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3c53c     00 00 0C F2 |                 cmp     0-0, #0                 wz
3c540     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
3c544                 |         if HAVE_MOUSE
3c544     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
3c548                 |         end
3c548     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
3c54c     60 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
3c550                 | .set_config
3c550     74 0E D0 FE |                 loc     ptra, #set_config
3c554     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
3c558     6E ED 03 F1 |                 add     pa, hconfig_base
3c55c     F6 8F C3 FA |                 rdbyte  hpar1, pa
3c560                 |                 debug("SetConfiguration: ",udec_(hpar1))
3c560     01 8F 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
3c564     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
3c568     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
3c56c     A0 02 A0 FD |                 call    #control_write
3c570     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c574     2D 00 64 5D |         if_nz   ret
3c578                 | .kbd_config
3c578     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
3c57c     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
3c580                 | 
3c580     79 73 03 F6 |                 mov     htmp, hkbd_ep_addr
3c584     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
3c588     3F 00 00 FF 
3c58c     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3c590     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
3c594                 | 
3c594     37 73 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3c598     3C 0E D0 FE |                 loc     ptra, #set_protocol
3c59c     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
3c5a0     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
3c5a4     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3c5a8     A0 02 A0 FD |                 call    #control_write
3c5ac     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c5b0     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3c5b4     F8 02 90 5D |         if_nz   jmp     #.notify_client
3c5b8     00 8E 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3c5bc     37 91 E3 F8 |                 getbyte hpar2, kb_intf_num, #0
3c5c0     44 03 B0 FD |                 call    #hset_idle
3c5c4                 |                 'cmp     retval, #PID_ACK        wz
3c5c4                 |         'if_nz   mov     hkbd_ep_addr, #0
3c5c4                 |         'if_nz   jmp     #.notify_client
3c5c4     A9 99 02 F6 |                 mov     hctwait, _2ms_
3c5c8     EF 02 A0 FD |                 call    #poll_waitx
3c5cc     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
3c5d0                 |         if NUMLOCK_DEFAULT_STATE && RPI_KEYBOARD_NUMLOCK_HACK
3c5d0                 |         end
3c5d0     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
3c5d4     A0 17 90 FE |                 loc     pa, #hkbd_led_rep
3c5d8     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
3c5dc     40 03 B0 FD |                 call    #hset_kbdled_report
3c5e0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c5e4     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3c5e8     C4 02 90 5D |         if_nz   jmp     #.notify_client
3c5ec     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
3c5f0     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3c5f4     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3c5f8     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3c5fc     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
3c600     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3c604     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
3c608     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3c60c     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
3c610     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
3c614     03 76 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
3c618                 |         if !!HAVE_MOUSE
3c618                 |         end
3c618                 | 
3c618                 | .mouse_config
3c618                 | if HAVE_MOUSE
3c618     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
3c61c     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3c620     7A 73 03 F6 |                 mov     htmp, hmouse_ep_addr
3c624     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
3c628     3F 00 00 FF 
3c62c     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3c630     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3c634                 | 
3c634                 |                 debug("mouse passed addr check")
3c634                 | 
3c634     B8 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
3c638     00 00 80 FF 
3c63c     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
3c640     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
3c644     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3c648     55 02 A0 FD |                 call    #control_read
3c64c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c650     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3c654     58 02 90 5D |         if_nz   jmp     #.notify_client
3c658     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
3c65c     56 01 00 F6 |                 mov     0-0, total_data
3c660     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3c664                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
3c664                 | 
3c664     35 73 E3 F8 |                 getbyte htmp, ms_intf_num, #0
3c668     6C 0D D0 FE |                 loc     ptra, #set_protocol
3c66c     01 03 5C FC |                 wrword  #MOUSE_FULL_PROTOCOL ? REPORT_PROTOCOL : BOOT_PROTOCOL, ptra[wValue]
3c670     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
3c674     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3c678     A0 02 A0 FD |                 call    #control_write
3c67c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c680     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3c684     28 02 90 5D |         if_nz   jmp     #.notify_client
3c688                 |                 debug("mouse passed SetProtocol")
3c688     00 8E 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3c68c     35 91 E3 F8 |                 getbyte hpar2, ms_intf_num, #0
3c690     74 02 B0 FD |                 call    #hset_idle
3c694                 |                 'cmp     retval, #PID_ACK        wz
3c694                 |         'if_nz   mov     hmouse_ep_addr, #0
3c694                 |         'if_nz   jmp     #.notify_client
3c694                 |                 debug("mouse passed SetIdle")
3c694     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3c698     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3c69c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3c6a0     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3c6a4     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
3c6a8     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3c6ac     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
3c6b0     79 77 03 F6 |                 mov     htmp2, hkbd_ep_addr
3c6b4     7A 77 63 F5 |                 xor     htmp2, hmouse_ep_addr
3c6b8     3F 00 00 FF 
3c6bc     00 77 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
3c6c0     05 76 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
3c6c4     04 76 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
3c6c8     E4 01 90 FD |                 jmp     #.notify_client
3c6cc                 | end
3c6cc                 | .gamepad_config
3c6cc                 | if _HAVE_GAMEPAD
3c6cc     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3c6d0     00 00 0C F2 |                 cmp     0-0, #0                 wz
3c6d4     6C 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
3c6d8     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3c6dc     00 72 03 F6 |                 mov     htmp, 0-0
3c6e0     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
3c6e4     3F 00 00 FF 
3c6e8     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3c6ec     54 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
3c6f0                 | 
3c6f0     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3c6f4     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
3c6f8     69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
3c6fc     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3c700     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3c704     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3c708     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3c70c     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
3c710     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
3c714     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
3c718     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3c71c     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3c720     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
3c724     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
3c728     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3c72c                 | 
3c72c                 |                 if EMUPAD_MAX_PLAYER > 0
3c72c                 |                 
3c72c                 | .rule_loop           
3c72c                 |                 end
3c72c                 | 
3c72c     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
3c730     5C 00 90 AD |         if_e    jmp     #.xinput
3c734     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3c738     00 72 03 F6 |                 mov     htmp,0-0
3c73c     01 A6 02 FF 
3c740     68 72 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
3c744     8C 00 90 AD |         if_e    jmp     #.ps3
3c748                 | 
3c748     A4 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
3c74c     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
3c750     00 00 80 5F 
3c754     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
3c758     03 00 80 AF 
3c75c     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
3c760     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
3c764     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3c768     55 02 A0 FD |                 call    #control_read
3c76c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c770     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
3c774     00 00 04 56 |         if_nz   mov     0-0, #0
3c778     34 01 90 5D |         if_nz   jmp     #.notify_client
3c77c     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
3c780     56 01 00 F6 |                 mov     0-0, total_data
3c784     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3c788                 |                 debug(uhex(pb),udec(total_data),uhex_byte_array(pb,total_data))
3c788                 | 
3c788     06 76 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
3c78c     20 01 90 FD |                 jmp     #.notify_client
3c790                 | .xinput
3c790     B8 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
3c794     2D EF 03 F6 |                 mov     pb,hdev_port
3c798     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
3c79c     03 EE 27 F3 |                 fle     pb,#3
3c7a0     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
3c7a4     02 EF 47 FC |                 wrbyte  pb, ptra[2]
3c7a8                 | 
3c7a8     03 B0 06 F6 |                 mov     pkt_data, #3
3c7ac     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
3c7b0     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
3c7b4                 |                 debug("XInput LED set ",uhex_long(ep_addr_pid),uhex_byte(pb))
3c7b4     5A 00 A0 FD |                 call    #txn_out
3c7b8     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
3c7bc                 | 
3c7bc     97 0C D0 FE |                 loc     ptra, #xinp_fix_8bitdo
3c7c0     27 EF 03 F6 |                 mov     pb, urx_buff_p          ' We don't actually care where it goes
3c7c4     55 02 A0 FD |                 call    #control_read           ' Execute GetDeviceDescriptor()
3c7c8                 |                 debug("8bitdo weird fix... ",uhex(retval))
3c7c8     D2 BE 06 F6 |                 mov retval,#PID_ACK             ' If we don't do this something else becomes sad (TODO fix?)
3c7cc                 | 
3c7cc                 | 
3c7cc     07 76 07 F6 |                 mov     htmp2, #XINPUT_READY
3c7d0     DC 00 90 FD |                 jmp     #.notify_client
3c7d4                 | .ps3
3c7d4     44 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
3c7d8     2D EF 03 F6 |                 mov     pb,hdev_port
3c7dc     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
3c7e0     04 EE 27 F3 |                 fle     pb,#4
3c7e4     F7 EF C3 F9 |                 decod   pb
3c7e8     09 EF 47 FC |                 wrbyte  pb, ptra[9]
3c7ec                 | 
3c7ec     3C 73 E3 F8 |                 getbyte htmp, gp_intf_num, #0
3c7f0     F4 0B D0 FE |                 loc     ptra, #set_report
3c7f4     01 00 80 FF 
3c7f8     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
3c7fc     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
3c800     03 61 5C FC |                 wrword  #48, ptra[wLength]
3c804     14 0C B0 FE |                 loc     pb, #ps3_command_buff
3c808     A0 02 A0 FD |                 call    #control_write
3c80c                 | 
3c80c     3C 73 E3 F8 |                 getbyte htmp, gp_intf_num, #0
3c810     D4 0B D0 FE |                 loc     ptra, #set_report
3c814     01 00 80 FF 
3c818     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
3c81c     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
3c820     03 09 5C FC |                 wrword  #4, ptra[wLength]
3c824     F0 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
3c828     A0 02 A0 FD |                 call    #control_write
3c82c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
3c830     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
3c834     00 00 04 56 |         if_nz   mov     0-0, #0
3c838     74 00 90 5D |         if_nz   jmp     #.notify_client
3c83c                 | 
3c83c     08 76 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
3c840     6C 00 90 FD |                 jmp     #.notify_client
3c844                 | end
3c844                 | 
3c844                 | .hub_config
3c844     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3c848     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
3c84c     77 73 03 F6 |                 mov     htmp, hhub_ep_addr
3c850     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
3c854     3F 00 00 FF 
3c858     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3c85c     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
3c860                 | 
3c860     94 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
3c864     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
3c868     26 EF 03 F6 |                 mov     pb, hub_descr_p
3c86c     55 02 A0 FD |                 call    #control_read
3c870     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c874     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
3c878     34 00 90 5D |         if_nz   jmp     #.notify_client
3c87c                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
3c87c                 | 
3c87c     26 F1 03 F6 |                 mov     ptra, hub_descr_p
3c880     02 79 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
3c884     07 78 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
3c888                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
3c888                 | .pwr_loop
3c888     74 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
3c88c     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
3c890     02 79 57 FC |                 wrword  htmp3, ptra[wIndex]
3c894     A0 02 A0 FD |                 call    #control_write
3c898     FB 79 6F FB |                 djnz    htmp3, #.pwr_loop
3c89c                 | 
3c89c     B2 99 02 F6 |                 mov     hctwait, _500ms_
3c8a0     B1 99 02 F1 |                 add     hctwait, _100ms_
3c8a4     EF 02 A0 FD |                 call    #poll_waitx
3c8a8                 | 
3c8a8     09 76 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
3c8ac     00 00 90 FD |                 jmp     #.notify_client
3c8b0                 | 
3c8b0                 | .notify_client
3c8b0     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
3c8b4     BB 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
3c8b8                 |                 debug(uhex_long(hdev_type,hdev_type+1))
3c8b8                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
3c8b8     2D 00 64 FD |                 ret
3c8bc                 | 
3c8bc                 | '------------------------------------------------------------------------------
3c8bc                 | ' Initialize the keyboard/mouse data area to start-up values.
3c8bc                 | '------------------------------------------------------------------------------
3c8bc                 | ' On entry:
3c8bc                 | ' On exit:
3c8bc                 | '------------------------------------------------------------------------------
3c8bc                 | init_kbdm_data
3c8bc     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
3c8c0     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
3c8c4                 | 
3c8c4     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
3c8c8     2B ED 03 F6 |                 mov     pa, cache_end_p
3c8cc                 | .loop
3c8cc     61 01 4C FC |                 wrbyte  #0, ptra++
3c8d0     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
3c8d4     F4 FF 9F CD |         if_b    jmp     #.loop
3c8d8                 |         
3c8d8                 |         if EMUPAD_MAX_PLAYER > 0
3c8d8                 |         end
3c8d8                 | 
3c8d8                 | 
3c8d8     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
3c8dc                 | .regloop
3c8dc     00 EC 8F F9 |                 altd    pa
3c8e0     00 00 04 F6 |                 mov     0-0, #0
3c8e4     01 EC 07 F1 |                 add     pa, #1
3c8e8     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
3c8ec     EC FF 9F 5D |         if_nz   jmp     #.regloop
3c8f0                 | 
3c8f0     E1 E1 61 FF 
3c8f4     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
3c8f8     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
3c8fc     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
3c900     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
3c904                 | 
3c904     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
3c908                 | 
3c908                 | '------------------------------------------------------------------------------
3c908                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
3c908                 | ' function.
3c908                 | '------------------------------------------------------------------------------
3c908                 | ' On entry:
3c908                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
3c908                 | '   hpar2 - index number of the target interface.
3c908                 | ' On exit:
3c908                 | '------------------------------------------------------------------------------
3c908                 | hset_idle
3c908     A9 99 02 F6 |                 mov     hctwait, _2ms_
3c90c     EF 02 A0 FD |                 call    #poll_waitx
3c910     CC 0A D0 FE |                 loc     ptra, #set_idle
3c914     01 8F 57 FC |                 wrword  hpar1, ptra[wValue]
3c918     02 91 57 FC |                 wrword  hpar2, ptra[wIndex]
3c91c     A0 02 80 FD |                 jmp     #control_write
3c920                 | 
3c920                 | '------------------------------------------------------------------------------
3c920                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
3c920                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
3c920                 | '------------------------------------------------------------------------------
3c920                 | ' On entry:
3c920                 | '   ep_addr_pid - device address and enpoint for the request.
3c920                 | ' On exit:
3c920                 | '   retval - transaction result.
3c920                 | '------------------------------------------------------------------------------
3c920                 | hset_kbdled_report
3c920     37 73 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3c924     C0 0A D0 FE |                 loc     ptra, #set_report
3c928     01 00 80 FF 
3c92c     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
3c930     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
3c934     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
3c938     27 EF 03 F6 |                 mov     pb, urx_buff_p
3c93c     F7 77 42 FC |                 wrbyte  kb_led_states, pb
3c940     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
3c944                 | 
3c944                 | '------------------------------------------------------------------------------
3c944                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
3c944                 | '------------------------------------------------------------------------------
3c944                 | ' On entry:
3c944                 | ' On exit:
3c944                 | '------------------------------------------------------------------------------
3c944                 | hget_kbd_in_report
3c944     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
3c948     27 91 03 F6 |                 mov     hpar2, urx_buff_p
3c94c     30 93 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
3c950     39 93 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
3c954     CF 02 A0 FD |                 call    #do_int_in
3c958     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c95c     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3c960                 | 
3c960     00 92 0F F2 |                 cmp     hpar3, #0               wz
3c964     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3c968                 | 
3c968     30 73 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
3c96c     C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3c970     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
3c974     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
3c978                 | 
3c978     C9 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
3c97c     18 00 B0 FD |                 call    #hkbd_compare
3c980                 |         if EMUPAD_MAX_PLAYER > 0
3c980                 |         end
3c980                 | 
3c980                 | .led_check
3c980     3B 73 03 F6 |                 mov     htmp, kb_led_states
3c984     B9 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
3c988     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
3c98c     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
3c990     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
3c994     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
3c998                 | 
3c998                 | '------------------------------------------------------------------------------
3c998                 | ' Compare current and previous keyboard data buffers for keypress changes.
3c998                 | '------------------------------------------------------------------------------
3c998                 | hkbd_compare
3c998     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3c99c     D0 13 F0 FE |                 loc     ptrb, #hkbd_report
3c9a0     61 75 07 FB |                 rdlong  htmp1, ptra++
3c9a4     E1 77 07 FB |                 rdlong  htmp2, ptrb++
3c9a8     BB 75 0B F2 |                 cmp     htmp1, htmp2    wz
3c9ac     61 75 07 FB |                 rdlong  htmp1, ptra++
3c9b0     E1 77 07 FB |                 rdlong  htmp2, ptrb++
3c9b4     BB 75 0B A2 |         if_z    cmp     htmp1, htmp2    wz
3c9b8     2D 00 64 AD |         if_z    ret
3c9bc                 | 
3c9bc     B0 13 D0 FE |                 loc     ptra, #hkbd_report
3c9c0                 | 
3c9c0                 |                 ' Handle modifiers
3c9c0     27 91 C3 FA |                 rdbyte  hpar2, urx_buff_p
3c9c4     00 89 C7 FA |                 rdbyte  hr1, ptra
3c9c8     C8 89 43 F9 |                 rolword hr1,hpar2,#0
3c9cc     63 88 63 FD |                 mergew  hr1
3c9d0     08 EC 07 F6 |                 mov     pa,#8
3c9d4                 | .modloop
3c9d4     6A 88 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
3c9d8     E8 8E 07 F6 |                 mov     hpar1,#$E8
3c9dc     F6 8F 83 F1 |                 sub     hpar1,pa
3c9e0     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
3c9e4     FB ED 6F FB |                 djnz    pa,#.modloop
3c9e8                 | 
3c9e8     6F E0 75 FD | .release        modc    _set    wc
3c9ec                 |                 'alts    hdev_port, #hid_report_p
3c9ec                 |                 'mov     ptra, hid_report_p
3c9ec     02 F0 07 F1 |                 add     ptra, #2
3c9f0     06 EC 07 F6 |                 mov     pa, #6
3c9f4     61 8F CF FA | .rl1            rdbyte  hpar1, ptra++   wz
3c9f8     20 00 90 AD |         if_z    jmp     #.rl3
3c9fc     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3ca00     02 F2 07 F1 |                 add     ptrb, #2
3ca04     06 EE 07 F6 |                 mov     pb, #6
3ca08     E1 73 C7 FA | .rl2            rdbyte  htmp, ptrb++
3ca0c     B9 8F 0B F2 |                 cmp     hpar1, htmp     wz
3ca10     08 00 90 AD |         if_z    jmp     #.rl3
3ca14     FC EF 6F FB |                 djnz    pb, #.rl2
3ca18     68 00 B0 FD |                 call    #hkbd_translate
3ca1c     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
3ca20                 | 
3ca20     00 92 07 F6 |                 mov     hpar3, #0
3ca24     1F 92 27 F4 |                 bith    hpar3, #31
3ca28                 | 
3ca28     6F 00 74 FD | .press          modc    _clr    wc
3ca2c     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3ca30     02 F0 07 F1 |                 add     ptra, #2
3ca34     06 EC 07 F6 |                 mov     pa, #6
3ca38     61 8F CF FA | .pl1            rdbyte  hpar1, ptra++   wz
3ca3c     20 00 90 AD |         if_z    jmp     #.pl3
3ca40     2C 13 F0 FE |                 loc     ptrb, #hkbd_report
3ca44     02 F2 07 F1 |                 add     ptrb, #2
3ca48     06 EE 07 F6 |                 mov     pb, #6
3ca4c     E1 73 C7 FA | .pl2            rdbyte  htmp, ptrb++
3ca50     B9 8F 0B F2 |                 cmp     hpar1, htmp     wz
3ca54     08 00 90 AD |         if_z    jmp     #.pl3
3ca58     FC EF 6F FB |                 djnz    pb, #.pl2
3ca5c     24 00 B0 FD |                 call    #hkbd_translate
3ca60     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
3ca64                 | 
3ca64     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
3ca68     04 13 F0 FE |                 loc     ptrb, #hkbd_report
3ca6c     28 02 64 FD |                 setq #1
3ca70     61 75 07 FB |                 rdlong  htmp1, ptra++
3ca74     28 02 64 FD |                 setq #1
3ca78     E1 75 67 FC |                 wrlong  htmp1, ptrb++
3ca7c     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
3ca80                 | 
3ca80     2D 00 64 FD |                 ret
3ca84                 | 
3ca84                 | '------------------------------------------------------------------------------
3ca84                 | ' Translate keyboard scancode to ASCII
3ca84                 | '------------------------------------------------------------------------------
3ca84                 | ' On entry:
3ca84                 | '   hpar1 - scancode
3ca84                 | '   hpar2 - key modifiers state
3ca84                 | '       c - pressed (0) or released (1) flag
3ca84                 | ' On exit:
3ca84                 | '   hpar1 - bit     31 = 0 pressed, 1 released
3ca84                 | '               30..17 = unused
3ca84                 | '                   18 = scroll-lock state 
3ca84                 | '                   17 = caps-lock state
3ca84                 | '                   16 = num-lock state 
3ca84                 | '                15..8 = key modifiers state
3ca84                 | '                 7..0 = scancode
3ca84                 | '------------------------------------------------------------------------------
3ca84                 | hkbd_translate
3ca84     39 8E 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
3ca88     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
3ca8c     53 8E 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
3ca90     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
3ca94     47 8E 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
3ca98     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
3ca9c                 | 
3ca9c                 |         if EMUPAD_MAX_PLAYER > 0
3ca9c                 | 
3ca9c                 |         if EMUPAD_BT0_BIT >= 0
3ca9c                 |         end
3ca9c                 |         if EMUPAD_BT1_BIT >= 0
3ca9c                 |         end
3ca9c                 |         if EMUPAD_BT2_BIT >= 0
3ca9c                 |         end
3ca9c                 |         if EMUPAD_BT3_BIT >= 0
3ca9c                 |         end
3ca9c                 |         if EMUPAD_BT4_BIT >= 0
3ca9c                 |         end
3ca9c                 |         if EMUPAD_BT5_BIT >= 0
3ca9c                 |         end
3ca9c                 |         if EMUPAD_BT6_BIT >= 0
3ca9c                 |         end
3ca9c                 |         if EMUPAD_BT7_BIT >= 0
3ca9c                 |         end
3ca9c                 |         if EMUPAD_BT8_BIT >= 0
3ca9c                 |         end
3ca9c                 |         if EMUPAD_BT9_BIT >= 0
3ca9c                 |         end
3ca9c                 | 
3ca9c                 |         end
3ca9c     C8 8F CB F8 |                 setbyte hpar1, hpar2, #1
3caa0     7C 8F D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
3caa4     1F 8E 47 F4 |                 bitc    hpar1, #31
3caa8                 |         if KEYQUEUE_SIZE > 0
3caa8     C0 09 B0 FE |                 loc pb,#keyq_head
3caac     F7 73 E3 FA |                 rdword htmp,pb
3cab0     B9 75 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
3cab4     B9 73 E3 F8 |                 getbyte htmp,htmp,#0 ' head
3cab8     B9 77 03 F6 |                 mov htmp2,htmp
3cabc     04 76 07 FA |                 mul htmp2,#4
3cac0     F7 77 03 F1 |                 add htmp2,pb
3cac4     02 76 07 F1 |                 add htmp2,#2
3cac8     7F 72 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
3cacc     B9 75 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
3cad0     BB 8F 63 5C |         if_nz   wrlong hpar1,htmp2
3cad4     F7 73 43 5C |         if_nz   wrbyte htmp,pb
3cad8                 |         end
3cad8     2D 00 7C FD |                 ret wcz
3cadc                 | 
3cadc                 | if HAVE_MOUSE
3cadc                 | '------------------------------------------------------------------------------
3cadc                 | ' Execute an IN interrupt transaction to poll for mouse activity.
3cadc                 | '------------------------------------------------------------------------------
3cadc                 | ' On entry:
3cadc                 | ' On exit:
3cadc                 | '------------------------------------------------------------------------------
3cadc                 | hget_mouse_in_report
3cadc     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3cae0     27 91 03 F6 |                 mov     hpar2, urx_buff_p
3cae4     30 93 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
3cae8     36 93 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
3caec     CF 02 A0 FD |                 call    #do_int_in
3caf0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3caf4     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3caf8                 | 
3caf8     00 92 0F F2 |                 cmp     hpar3, #0               wz
3cafc     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3cb00                 | 
3cb00     30 73 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
3cb04     C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3cb08     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
3cb0c     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
3cb10                 | 
3cb10                 |         'debug(uhex_byte_array(urx_buff_p,hpar3))
3cb10                 | 
3cb10                 |         if MOUSE_FULL_PROTOCOL
3cb10     C8 00 B0 FD |                 call #hid_decode
3cb14                 |         else
3cb14                 |         end
3cb14                 | 
3cb14     48 09 90 FE |                 loc     pa, #mouse_limits
3cb18     5D 13 F0 FE |                 loc     ptrb, #mouse_xacc
3cb1c                 | 
3cb1c                 |                 ' load xacc,yacc,zacc
3cb1c     28 04 64 FD |                 setq    #3-1
3cb20     80 89 07 FB |                 rdlong  hr1,ptrb
3cb24                 |                 ' load limits and outptr
3cb24     28 04 64 FD |                 setq    #3-1
3cb28     F6 75 03 FB |                 rdlong  htmp1,pa
3cb2c                 | 
3cb2c                 |         if MOUSE_FULL_PROTOCOL
3cb2c     8C 19 47 FC |                 wrbyte  hidr_buttons, ptrb[12]
3cb30                 |         else
3cb30                 |                 { ' Currently not used
3cb30                 |                 '}
3cb30                 |         end
3cb30                 | 
3cb30                 |         if MOUSE_FULL_PROTOCOL
3cb30     88 73 33 F9 |                 getword htmp, hidr_axis+0, #0
3cb34     0F 72 67 F7 |                 signx   htmp, #15
3cb38                 |         else
3cb38                 |         end
3cb38     B9 89 03 F1 |                 add     hr1,htmp
3cb3c     00 74 0F F2 |                 cmp     htmp1,#0 wz
3cb40     BA 89 63 53 |         if_ne   fles    hr1,htmp1
3cb44     00 88 47 53 |         if_ne   fges    hr1,#0
3cb48                 | 
3cb48                 |         if MOUSE_FULL_PROTOCOL
3cb48     88 73 3B F9 |                 getword htmp, hidr_axis+0, #1
3cb4c     0F 72 67 F7 |                 signx   htmp, #15
3cb50                 |         else
3cb50                 |         end
3cb50     B9 8B 03 F1 |                 add     hr2,htmp
3cb54     00 76 0F F2 |                 cmp     htmp2,#0 wz
3cb58     BB 8B 63 53 |         if_ne   fles    hr2,htmp2
3cb5c     00 8A 47 53 |         if_ne   fges    hr2,#0
3cb60                 |                 
3cb60                 |         if MOUSE_FULL_PROTOCOL
3cb60     8B 73 3B F9 |                 getword htmp, hidr_axis+3, #1           ' Mouse wheel is actually on the "wheel axis"
3cb64     0F 72 67 F7 |                 signx   htmp, #15
3cb68     B9 8D 03 F1 |                 add     hr3, htmp
3cb6c                 |         else    
3cb6c                 |         end
3cb6c                 | 
3cb6c     90 73 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
3cb70     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
3cb74                 | 
3cb74                 |                 ' write back accumulators
3cb74     28 04 64 FD |                 setq    #3-1
3cb78     80 89 67 FC |                 wrlong  hr1,ptrb
3cb7c                 |                 ' if outptr set, write X/Y words
3cb7c     00 78 0F F2 |                 cmp htmp3,#0                    wz
3cb80     C5 89 2B 59 |         if_nz   setword hr1,hr2,#1
3cb84     BC 89 63 5C |         if_nz   wrlong hr1,htmp3
3cb88     2D 00 64 FD |                 ret
3cb8c                 | end
3cb8c                 | 
3cb8c                 | '------------------------------------------------------------------------------
3cb8c                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3cb8c                 | '------------------------------------------------------------------------------
3cb8c                 | ' On entry:
3cb8c                 | ' On exit:
3cb8c                 | '------------------------------------------------------------------------------
3cb8c                 | if _HAVE_GAMEPAD
3cb8c                 | hget_gp_in_report
3cb8c     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3cb90     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
3cb94                 | 
3cb94     27 91 03 F6 |                 mov     hpar2, urx_buff_p
3cb98     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
3cb9c     00 92 E3 F8 |                 getbyte hpar3
3cba0     FF 92 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
3cba4     CF 02 A0 FD |                 call    #do_int_in
3cba8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3cbac     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3cbb0                 | 
3cbb0     00 92 0F F2 |                 cmp     hpar3, #0               wz
3cbb4     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3cbb8                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
3cbb8                 | 
3cbb8     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
3cbbc     00 72 E3 F8 |                 getbyte htmp                            ' |
3cbc0     C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3cbc4     4B 72 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
3cbc8     C3 72 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
3cbcc     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
3cbd0     B9 01 C0 F8 |                 setbyte htmp                            ' |
3cbd4                 | 
3cbd4                 | ' Note: the following code compares the current and previous reports
3cbd4                 | ' and process the data if there are changes to ease the debug output.
3cbd4                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
3cbd4                 | ' gpPreReport buffer.
3cbd4                 | 
3cbd4                 |                 ' ----- start of block to remove
3cbd4                 |                 {
3cbd4                 |                 }
3cbd4                 |                 ' ----- end of block to remove
3cbd4     14 05 90 FE |                 loc pa,#hpad_translate
3cbd8     2A EC 63 FD |                 push pa
3cbdc                 | 
3cbdc                 |                 ' FALL THROUGH !!!!
3cbdc                 | end
3cbdc                 | if _HAVE_GAMEPAD || MOUSE_FULL_PROTOCOL
3cbdc                 | '------------------------------------------------------------------------------
3cbdc                 | ' Decode controller report
3cbdc                 | '------------------------------------------------------------------------------
3cbdc                 | hid_decode
3cbdc                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
3cbdc     28 20 64 FD |                 setq #(hidr_end-hidr_start)-1
3cbe0     00 04 00 FF 
3cbe4     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
3cbe8                 | 
3cbe8     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3cbec                 | 
3cbec     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3cbf0     00 1C E3 F8 |                 getbyte hidr_type
3cbf4                 |         if _HAVE_GAMEPAD
3cbf4     07 1C 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
3cbf8     08 03 90 AD |         if_z    jmp     #hpad_xinput
3cbfc     08 1C 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
3cc00     EC 03 90 AD |         if_z    jmp     #hpad_ps3
3cc04                 |         end
3cc04     05 1C 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
3cc08     04 1C 07 A6 |         if_z    mov     hidr_type,#M_READY
3cc0c     04 1C 0F F2 |                 cmp     hidr_type, #M_READY             wz
3cc10                 |                 
3cc10                 | 
3cc10                 | '------------------------------------------------------------------------------
3cc10                 | ' Handle HID controller (or mouse now
3cc10                 | ' On entry:
3cc10                 | '   ptrb - controller report
3cc10                 | '------------------------------------------------------------------------------
3cc10                 | hpad_hid
3cc10     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3cc14     F7 F1 03 F6 |                 mov     ptra, pb
3cc18     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
3cc1c     00 EC 03 F6 |                 mov     pa, 0-0
3cc20                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
3cc20     19 2A 3B FF 
3cc24     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
3cc28                 | 
3cc28                 | .next
3cc28     00 EC 5F F2 |                 cmps    pa, #0      wcz
3cc2c     2D 00 7C ED |         if_be   ret     wcz
3cc30                 | 
3cc30     61 8F C7 FA |                 rdbyte  hpar1, ptra++
3cc34     01 EC 87 F1 |                 sub     pa, #1
3cc38     00 90 07 F6 |                 mov     hpar2, #0
3cc3c                 | 
3cc3c     C7 73 03 F6 |                 mov     htmp, hpar1
3cc40     03 72 07 F5 |                 and     htmp, #$03
3cc44     01 72 0F F2 |                 cmp     htmp, #1    wz
3cc48     61 91 C7 AA |         if_z    rdbyte  hpar2, ptra++
3cc4c     07 90 67 A7 |         if_z    signx   hpar2,#7
3cc50     01 EC 87 A1 |         if_z    sub     pa, #1
3cc54     02 72 0F F2 |                 cmp     htmp, #2    wz
3cc58     61 91 E7 AA |         if_z    rdword  hpar2, ptra++
3cc5c     0F 90 67 A7 |         if_z    signx   hpar2,#15
3cc60     02 EC 87 A1 |         if_z    sub     pa, #2
3cc64     03 72 0F F2 |                 cmp     htmp, #3    wz
3cc68     61 91 07 AB |         if_z    rdlong  hpar2, ptra++
3cc6c     04 EC 87 A1 |         if_z    sub     pa, #4
3cc70                 | 
3cc70     FC 8E 07 F5 |                 and     hpar1, #$FC
3cc74                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
3cc74                 | 
3cc74     84 8E 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
3cc78     18 01 90 AD |         if_z    jmp     #.report_id
3cc7c     04 8E 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
3cc80     30 01 90 AD |         if_z    jmp     #.usage_page
3cc84     08 8E 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
3cc88     38 01 90 AD |         if_z    jmp     #.usage
3cc8c     14 8E 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
3cc90     C8 2B 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
3cc94     24 8E 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
3cc98     C8 2B 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
3cc9c     34 8E 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
3cca0     C8 2D 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
3cca4     44 8E 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
3cca8     C8 2D 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
3ccac     74 8E 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
3ccb0     C8 27 03 A6 |         if_z    mov     hidr_size, hpar2
3ccb4     94 8E 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
3ccb8     C8 29 03 A6 |         if_z    mov     hidr_count, hpar2
3ccbc     B4 8E 1F F2 |                 cmp     hpar1, #HID_POP wcz
3ccc0     A4 8E 0F 52 |         if_nz   cmp     hpar1, #HID_PUSH wz
3ccc4     64 01 90 AD |         if_z    jmp     #.pushpop ' Entering with C set if PUSH  
3ccc8     80 8E 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
3cccc     58 FF 9F 5D |         if_nz   jmp     #.next
3ccd0                 | 
3ccd0     D5 25 A7 FB |                 tjf     hidr_state,#.next
3ccd4                 | 
3ccd4     03 90 07 F5 |                 and     hpar2, #$03
3ccd8     02 90 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
3ccdc     18 00 90 5D |         if_nz   jmp     #.skip
3cce0                 | 
3cce0     02 24 0F F2 |                 cmp     hidr_state, #2  wz
3cce4     20 00 90 AD |         if_z    jmp     #.axes
3cce8     03 24 0F F2 |                 cmp     hidr_state, #3  wz
3ccec     5C 00 90 AD |         if_z    jmp     #.hats
3ccf0     04 24 0F F2 |                 cmp     hidr_state, #4  wz
3ccf4     70 00 90 AD |         if_z    jmp     #.buttons
3ccf8                 | .skip
3ccf8     93 73 03 F6 |                 mov     htmp, hidr_size
3ccfc     94 73 03 FA |                 mul     htmp, hidr_count
3cd00     B9 21 03 F1 |                 add     hidr_offset, htmp
3cd04     20 FF 9F FD |                 jmp     #.next
3cd08                 | .axes
3cd08                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count),uhex_long(hidr_flags))
3cd08     87 87 53 F8 |                 getnib  hr0, hidr_flags, #2
3cd0c     94 89 03 F6 |                 mov     hr1, hidr_count
3cd10                 | .l1
3cd10     90 8F 03 F6 |                 mov     hpar1, hidr_offset
3cd14     93 91 03 F6 |                 mov     hpar2, hidr_size
3cd18     28 01 B0 FD |                 call    #hpad_getbits
3cd1c     88 01 B0 FD |                 call    #hpad_normalize
3cd20     08 86 1F F2 |                 cmp     hr0, #8         wcz
3cd24     86 87 5F C9 |         if_b    altgn   hr0, #hidr_usage
3cd28     00 8A 43 C8 |         if_b    getnib  hr2
3cd2c     88 8B 77 C9 |         if_b    altsw   hr2, #hidr_axis
3cd30     5F 01 20 C9 |         if_b    setword retval
3cd34     01 86 07 C1 |         if_b    add     hr0, #1
3cd38     93 21 03 F1 |                 add     hidr_offset, hidr_size
3cd3c     F4 89 6F FB |                 djnz    hr1, #.l1
3cd40                 | 
3cd40     C3 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
3cd44     01 24 07 F6 |                 mov     hidr_state, #1
3cd48     DC FE 9F FD |                 jmp     #.next
3cd4c                 | .hats
3cd4c                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
3cd4c     90 8F 03 F6 |                 mov     hpar1, hidr_offset
3cd50     93 91 03 F6 |                 mov     hpar2, hidr_size
3cd54     EC 00 B0 FD |                 call    #hpad_getbits
3cd58     5F 1B C3 F8 |                 setbyte hidr_hats, retval, #0
3cd5c     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3cd60     01 24 07 F6 |                 mov     hidr_state, #1
3cd64     90 FF 9F FD |                 jmp     #.skip
3cd68                 | .buttons
3cd68                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
3cd68     90 8F 03 F6 |                 mov     hpar1, hidr_offset
3cd6c     93 91 03 F6 |                 mov     hpar2, hidr_size
3cd70     94 91 03 FA |                 mul     hpar2, hidr_count
3cd74     CC 00 B0 FD |                 call    #hpad_getbits
3cd78     87 73 E3 F8 |                 getbyte htmp, hidr_flags, #0
3cd7c     B9 BF 62 F0 |                 shl     retval, htmp
3cd80     5F 19 43 F5 |                 or      hidr_buttons, retval
3cd84     94 73 03 F1 |                 add     htmp, hidr_count
3cd88     B9 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
3cd8c     01 24 07 F6 |                 mov     hidr_state, #1
3cd90     64 FF 9F FD |                 jmp     #.skip
3cd94                 | .report_id
3cd94     00 1E 0F F2 |                 cmp     hidr_id, #0     wz
3cd98     2D 00 7C 5D |         if_nz   ret     wcz
3cd9c     E1 73 C7 FA |                 rdbyte  htmp, ptrb++
3cda0                 |                 'debug(".report_id",udec(htmp,hpar2))
3cda0     C8 73 0B F2 |                 cmp     htmp, hpar2     wz
3cda4     B9 1F 03 A6 |         if_z    mov     hidr_id, htmp
3cda8     01 24 67 56 |         if_nz   neg     hidr_state,#1
3cdac     01 F2 87 51 |         if_nz   sub     ptrb,#1
3cdb0     74 FE 9F FD |                 jmp     #.next
3cdb4                 | .usage_page
3cdb4     09 90 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
3cdb8     01 24 0F A2 |         if_z    cmp     hidr_state, #1  wz
3cdbc     04 24 07 A6 |         if_z    mov     hidr_state, #4
3cdc0     64 FE 9F FD |                 jmp     #.next
3cdc4                 | .usage
3cdc4     04 90 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
3cdc8     05 90 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
3cdcc     06 1C 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
3cdd0     01 24 07 A6 |         if_z    mov     hidr_state, #1
3cdd4     50 FE 9F AD |         if_z    jmp     #.next
3cdd8     02 90 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
3cddc     04 1C 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
3cde0     01 24 07 A6 |         if_z    mov     hidr_state, #1
3cde4     40 FE 9F AD |         if_z    jmp     #.next
3cde8     30 90 17 F2 |                 cmp     hpar2, #HID_USAGE_X     wc
3cdec     38 90 97 32 |         if_nc   cmpr    hpar2, #HID_USAGE_WHEEL wc   
3cdf0     10 00 90 3D |         if_nc   jmp     #.usage_axis
3cdf4     39 90 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
3cdf8     01 24 0F A2 |         if_z    cmp     hidr_state, #1      wz
3cdfc     03 24 07 A6 |         if_z    mov     hidr_state, #3
3ce00     24 FE 9F FD |                 jmp     #.next
3ce04                 | .usage_axis
3ce04     01 24 57 F2 |                 cmps    hidr_state, #1          wc
3ce08     1C FE 9F CD |         if_b    jmp     #.next
3ce0c     37 90 27 F3 |                 fle     hpar2, #HID_USAGE_DIAL   ' Let's just say wheel and dial are the same to keep sane
3ce10     86 23 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
3ce14     C8 01 00 F8 |                 setnib  hpar2
3ce18                 | 
3ce18     20 90 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
3ce1c     C8 0F 23 F4 |                 bith    hidr_flags, hpar2
3ce20                 | 
3ce20     01 22 07 F1 |                 add     hidr_usage_idx, #1
3ce24     02 24 07 F6 |                 mov     hidr_state, #2
3ce28     FC FD 9F FD |                 jmp     #.next
3ce2c                 | .pushpop
3ce2c                 |                 ' Entering with C set if PUSH  
3ce2c     4C 0F B0 FE |                 loc     pb, #hid_stack
3ce30     28 08 64 CD |         if_c    setq    #(hidr_end-hidr_state)-1
3ce34     F7 25 63 CC |         if_c    wrlong  hidr_state, pb
3ce38     28 08 64 3D |         if_nc   setq    #(hidr_end-hidr_state)-1
3ce3c     F7 25 03 3B |         if_nc   rdlong  hidr_state, pb
3ce40     E4 FD 9F FD |                 jmp     #.next
3ce44                 | 
3ce44                 | '------------------------------------------------------------------------------
3ce44                 | ' Read bits from report data buffer
3ce44                 | '------------------------------------------------------------------------------
3ce44                 | ' On entry:
3ce44                 | '   PTRB - report buffer
3ce44                 | '   hpar1 - start bit
3ce44                 | '   hpar2 - number of bits
3ce44                 | ' On exit:
3ce44                 | '   retval - bits
3ce44                 | '------------------------------------------------------------------------------
3ce44                 | hpad_getbits
3ce44     C7 73 03 F6 |                 mov     htmp, hpar1
3ce48     03 72 47 F0 |                 shr     htmp, #3        ' byte offset
3ce4c     F9 73 03 F1 |                 add     htmp, ptrb
3ce50     B9 BF 02 FB |                 rdlong  retval, htmp
3ce54                 | 
3ce54     C7 75 03 F6 |                 mov     htmp1, hpar1
3ce58     07 74 07 F5 |                 and     htmp1, #$07     ' shift
3ce5c     BA BF 42 F0 |                 shr     retval, htmp1
3ce60                 | 
3ce60     18 90 1F F2 |                 cmp     hpar2, #24      wcz
3ce64     10 00 90 1D |         if_a    jmp     #.l1
3ce68                 | 
3ce68     C8 91 C3 F9 |                 decod   hpar2
3ce6c     01 90 87 F1 |                 sub     hpar2, #1
3ce70     C8 BF 02 F5 |                 and     retval, hpar2
3ce74     2D 00 64 FD |                 ret
3ce78                 | .l1
3ce78     FF 7F 00 FF 
3ce7c     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
3ce80     03 72 07 F1 |                 add     htmp, #3
3ce84     B9 77 03 FB |                 rdlong  htmp2, htmp
3ce88     18 90 87 F1 |                 sub     hpar2, #24
3ce8c     C8 91 C3 F9 |                 decod   hpar2
3ce90     01 90 87 F1 |                 sub     hpar2, #1
3ce94     BA 77 43 F0 |                 shr     htmp2, htmp1
3ce98     C8 77 03 F5 |                 and     htmp2, hpar2
3ce9c     18 76 67 F0 |                 shl     htmp2, #24
3cea0     BB BF 42 F5 |                 or      retval, htmp2
3cea4     2D 00 64 FD |                 ret
3cea8                 | 
3cea8                 | '------------------------------------------------------------------------------
3cea8                 | ' Normalize value to signed word (-32768 / 32767)
3cea8                 | '------------------------------------------------------------------------------
3cea8                 | ' On entry:
3cea8                 | '   retval - value to normalize
3cea8                 | '   hidr_lminmax - min (word 1) max (word 0) value range
3cea8                 | '   - or -
3cea8                 | '   hidr_pminmax - min (word 1) max (word 0) value range
3cea8                 | '   hidr_size - value bits length
3cea8                 | ' On exit:
3cea8                 | '   retval - normalized value
3cea8                 | '------------------------------------------------------------------------------
3cea8                 | hpad_normalize
3cea8     95 73 0B F6 |                 mov     htmp, hidr_lminmax  wz
3ceac     96 73 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
3ceb0     2D 00 64 AD |         if_z    ret
3ceb4     B9 75 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
3ceb8     B9 73 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
3cebc     0F 74 77 F7 |                 signx   htmp1, #15      wc
3cec0     FF 27 97 C9 |         if_c    alts    hidr_size, #511
3cec4     00 BE 66 C7 |         if_c    signx   retval, #0-0
3cec8                 |                 ' slightly crappy hack: if in mouse mode, don't normalize
3cec8     04 1C 0F F2 |                 cmp     hidr_type, #M_READY wz
3cecc     2D 00 64 AD |         if_z    ret
3ced0     BA 73 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
3ced4     BA BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
3ced8     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
3cedc     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
3cee0     B9 73 53 F6 |                 abs     htmp            wc
3cee4     1F BE 0E F4 |                 testb   retval, #31     wz
3cee8     5F BF 42 F6 |                 abs     retval
3ceec     B9 BF 12 FD |                 qdiv    retval, htmp
3cef0     18 BE 62 FD |                 getqx   retval
3cef4     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
3cef8     C0 FF 7F FF 
3cefc     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
3cf00     2D 00 64 FD |                 ret
3cf04                 | end
3cf04                 | 
3cf04                 | if _HAVE_GAMEPAD
3cf04                 | '------------------------------------------------------------------------------
3cf04                 | ' Handle XInput controller
3cf04                 | ' On entry:
3cf04                 | '   ptrb - controller report
3cf04                 | '------------------------------------------------------------------------------
3cf04                 | '   Default implementation translates the report to a pseudo-defacto hid
3cf04                 | '   standard and jumps to hpad_translate for actions.
3cf04                 | '   Implementors may take specific actions for this kind of controller.
3cf04                 | '------------------------------------------------------------------------------
3cf04                 | hpad_xinput
3cf04     80 73 CF FA |                 rdbyte  htmp, ptrb      wz
3cf08     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
3cf0c     81 73 C7 FA |                 rdbyte  htmp, ptrb[1]
3cf10     14 72 0F F2 |                 cmp     htmp, #$14      wz
3cf14     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
3cf18                 | 
3cf18                 |                 'debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3cf18                 | 
3cf18     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
3cf1c     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
3cf20                 | 
3cf20     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
3cf24     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
3cf28     5F BF 22 F6 |                 not     retval
3cf2c     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3cf30     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
3cf34     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
3cf38     5F BF 22 F6 |                 not     retval
3cf3c     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3cf40                 | 
3cf40     FF 2A 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3cf44     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
3cf48     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3cf4c     06 18 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
3cf50     54 FF BF FD |                 call    #hpad_normalize
3cf54     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
3cf58     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
3cf5c     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3cf60     07 18 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
3cf64     40 FF BF FD |                 call    #hpad_normalize
3cf68     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
3cf6c                 | 
3cf6c     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3cf70     81 BF E6 FA |                 rdword  retval, ptrb[1]
3cf74     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3cf78     00 18 47 F4 |                 bitc    hidr_buttons, #0
3cf7c     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3cf80     01 18 47 F4 |                 bitc    hidr_buttons, #1
3cf84     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3cf88     02 18 47 F4 |                 bitc    hidr_buttons, #2
3cf8c     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3cf90     03 18 47 F4 |                 bitc    hidr_buttons, #3
3cf94     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
3cf98     04 18 47 F4 |                 bitc    hidr_buttons, #4
3cf9c     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
3cfa0     05 18 47 F4 |                 bitc    hidr_buttons, #5
3cfa4     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
3cfa8     08 18 47 F4 |                 bitc    hidr_buttons, #8
3cfac     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
3cfb0     09 18 47 F4 |                 bitc    hidr_buttons, #9
3cfb4     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
3cfb8     0A 18 47 F4 |                 bitc    hidr_buttons, #10
3cfbc     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
3cfc0     0B 18 47 F4 |                 bitc    hidr_buttons, #11
3cfc4     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
3cfc8     0C 18 47 F4 |                 bitc    hidr_buttons, #12
3cfcc                 | 
3cfcc     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3cfd0     5F 73 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
3cfd4     7A BB 7A FF 
3cfd8     0F 74 07 F6 |                 mov     htmp1, ##$F576_F40F
3cfdc     F9 FF 7F FF 
3cfe0     12 77 07 F6 |                 mov     htmp2, ##$FFFF_F312
3cfe4     BA 73 5F F9 |                 altgn   htmp, #htmp1
3cfe8     00 72 43 F8 |                 getnib  htmp
3cfec     B9 1B C3 08 |         _ret_   setbyte hidr_hats, htmp, #0
3cff0                 | 
3cff0                 | '------------------------------------------------------------------------------
3cff0                 | ' Handle PS3 controller
3cff0                 | ' On entry:
3cff0                 | '   ptrb - controller report
3cff0                 | '------------------------------------------------------------------------------
3cff0                 | '   Default implementation translates the report to a pseudo-defacto hid
3cff0                 | '   standard and jumps to hpad_translate for actions.
3cff0                 | '   Implementors may take specific actions for this kind of controller.
3cff0                 | '------------------------------------------------------------------------------
3cff0                 | hpad_ps3
3cff0     E1 73 C7 FA |                 rdbyte  htmp, ptrb++
3cff4     01 72 0F F2 |                 cmp     htmp, #$01      wz
3cff8     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
3cffc                 | 
3cffc                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3cffc                 | 
3cffc     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
3d000     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
3d004                 | 
3d004     FF 2A 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3d008     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
3d00c     98 FE BF FD |                 call    #hpad_normalize
3d010     5F 11 23 F9 |                 setword hidr_axis, retval, #0
3d014     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
3d018     8C FE BF FD |                 call    #hpad_normalize
3d01c     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3d020     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
3d024     80 FE BF FD |                 call    #hpad_normalize
3d028     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
3d02c     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
3d030     74 FE BF FD |                 call    #hpad_normalize
3d034     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3d038     91 BF C6 FA |                 rdbyte  retval, ptrb[17]        ' RX = L2 analog
3d03c     68 FE BF FD |                 call    #hpad_normalize
3d040     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
3d044     92 BF C6 FA |                 rdbyte  retval, ptrb[18]        ' RY = R2 analog
3d048     5C FE BF FD |                 call    #hpad_normalize
3d04c     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
3d050                 | 
3d050     08 8E 07 F6 |                 mov     hpar1, #8
3d054     13 90 07 F6 |                 mov     hpar2, #19
3d058     E8 FD BF FD |                 call    #hpad_getbits
3d05c                 | 
3d05c     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3d060     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3d064     00 18 47 F4 |                 bitc    hidr_buttons, #0
3d068     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3d06c     01 18 47 F4 |                 bitc    hidr_buttons, #1
3d070     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3d074     02 18 47 F4 |                 bitc    hidr_buttons, #2
3d078     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3d07c     03 18 47 F4 |                 bitc    hidr_buttons, #3
3d080     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
3d084     04 18 47 F4 |                 bitc    hidr_buttons, #4
3d088     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
3d08c     05 18 47 F4 |                 bitc    hidr_buttons, #5
3d090     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
3d094     06 18 47 F4 |                 bitc    hidr_buttons, #6
3d098     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
3d09c     07 18 47 F4 |                 bitc    hidr_buttons, #7
3d0a0     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
3d0a4     08 18 47 F4 |                 bitc    hidr_buttons, #8
3d0a8     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
3d0ac     09 18 47 F4 |                 bitc    hidr_buttons, #9
3d0b0     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
3d0b4     0A 18 47 F4 |                 bitc    hidr_buttons, #10
3d0b8     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
3d0bc     0B 18 47 F4 |                 bitc    hidr_buttons, #11
3d0c0     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
3d0c4     0C 18 47 F4 |                 bitc    hidr_buttons, #12
3d0c8                 | 
3d0c8     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3d0cc     5F 73 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
3d0d0     09 FA 79 FF 
3d0d4     0F 74 07 F6 |                 mov     htmp1, ##$F3F4_120F
3d0d8     FF FA 7F FF 
3d0dc     76 77 07 F6 |                 mov     htmp2, ##$FFF5_FF76
3d0e0     BA 73 5F F9 |                 altgn   htmp, #htmp1
3d0e4     00 72 43 F8 |                 getnib  htmp
3d0e8     B9 1B C3 08 |         _ret_   setbyte hidr_hats, htmp, #0
3d0ec                 | 
3d0ec                 | 
3d0ec                 | '------------------------------------------------------------------------------
3d0ec                 | ' Perform controller actions
3d0ec                 | ' On entry:
3d0ec                 | '    hidr_id        report id
3d0ec                 | '    hidr_axis      axis value (signed word, 2 axes per long)
3d0ec                 | '                      X = hidr_axis+0, #0
3d0ec                 | '                      Y = hidr_axis+0, #1
3d0ec                 | '                      Z = hidr_axis+1, #0
3d0ec                 | '                     RX = hidr_axis+1, #1
3d0ec                 | '                     RY = hidr_axis+2, #0
3d0ec                 | '                     RZ = hidr_axis+2, #1
3d0ec                 | '                     Sl = hidr_axis+3, #0
3d0ec                 | '                     Wh = hidr_axis+3, #1
3d0ec                 | '    hidr_buttons   buttons state (bits 0 to 31)
3d0ec                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
3d0ec                 | '
3d0ec                 | '                     -------3 -------2 -------1 -------0 byte
3d0ec                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
3d0ec                 | '    hidr_flags       xxxxxxxx_wsrrrzyx_hhhhaaaa_bbbbbbbb
3d0ec                 | '                              hlzyx||| |||||||| ++++++++ n. buttons
3d0ec                 | '                              |||||||| ||||++++--------- n. axes
3d0ec                 | '                              |||||||| ++++------------- n. hats
3d0ec                 | '                              ++++++++------------------ valid axes
3d0ec                 | '------------------------------------------------------------------------------
3d0ec                 | hpad_translate
3d0ec                 | 
3d0ec                 | 
3d0ec                 |         if HAVE_HIDPAD
3d0ec     A0 0C F0 FE |                 loc     ptrb,#hidpad_report
3d0f0     2D 73 0B F6 |                 mov     htmp,hdev_port          wz
3d0f4     8F 73 03 A6 |         if_z    mov     htmp,hidr_id
3d0f8     01 72 E7 F2 |                 cmpsub  htmp,#1
3d0fc     07 1E 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
3d100     02 1E 17 52 |         if_nz   cmp     hidr_id, #2             wc
3d104     2D 00 7C 3D |         if_ae   ret     wcz
3d108     20 72 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
3d10c     B9 F3 03 F1 |                 add     ptrb,htmp
3d110     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3d114     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
3d118     28 0E 64 FD |                 setq    #8-1
3d11c     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
3d120                 |         end
3d120                 | 
3d120                 | 
3d120                 |         if EMUPAD_MAX_PLAYER > 0
3d120                 | .emupad_no_hat
3d120                 |         if EMUPAD_BT0_BIT >= 0
3d120                 |         end
3d120                 |         if EMUPAD_BT1_BIT >= 0
3d120                 |         end
3d120                 |         if EMUPAD_BT2_BIT >= 0
3d120                 |         end
3d120                 |         if EMUPAD_BT3_BIT >= 0
3d120                 |         end
3d120                 |         if EMUPAD_BT4_BIT >= 0
3d120                 |         end
3d120                 |         if EMUPAD_BT5_BIT >= 0
3d120                 |         end
3d120                 |         if EMUPAD_BT6_BIT >= 0
3d120                 |         end
3d120                 |         if EMUPAD_BT7_BIT >= 0
3d120                 |         end
3d120                 |         if EMUPAD_BT8_BIT >= 0
3d120                 |         end
3d120                 |         if EMUPAD_BT9_BIT >= 0
3d120                 |         end
3d120                 | .emupad_slot_over
3d120                 |         end
3d120                 | 
3d120                 |         if 0
3d120                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
3d120                 | 
3d120                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
3d120                 | 
3d120                 |         end
3d120     2D 00 64 FD |                 ret
3d124                 | end
3d124                 | 
3d124                 | if EMUPAD_MAX_PLAYER > 0
3d124                 | '------------------------------------------------------------------------------
3d124                 | ' Clear EmuPad state
3d124                 | '------------------------------------------------------------------------------
3d124                 | emupad_reset
3d124                 | 
3d124                 | '------------------------------------------------------------------------------
3d124                 | ' Get EmuPad Player number for current device (into retval)
3d124                 | ' Z flag is also set if current device is valid
3d124                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
3d124                 | '------------------------------------------------------------------------------
3d124                 | emupad_getnum
3d124                 | .loop
3d124                 | '------------------------------------------------------------------------------
3d124                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
3d124                 | '------------------------------------------------------------------------------
3d124                 | emupad_discon
3d124                 | .loop         
3d124                 |         
3d124                 |         ' FALL THROUGH!!!
3d124                 | 
3d124                 | '------------------------------------------------------------------------------
3d124                 | ' Update EmuPad reports (all of them...)
3d124                 | '------------------------------------------------------------------------------
3d124                 | emupad_write_reports
3d124                 | .devloop
3d124                 | 
3d124                 | end
3d124                 | 
3d124                 | 
3d124                 | '------------------------------------------------------------------------------
3d124                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3d124                 | '------------------------------------------------------------------------------
3d124                 | ' On entry:
3d124                 | ' On exit:
3d124                 | '------------------------------------------------------------------------------
3d124                 | hget_hub_status
3d124     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
3d128     27 91 03 F6 |                 mov     hpar2, urx_buff_p
3d12c     32 93 23 F9 |                 setword hpar3, hub_next_datax, #0
3d130     01 92 2F F9 |                 setword hpar3, #1, #1
3d134     CF 02 A0 FD |                 call    #do_int_in
3d138     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d13c     0C 00 90 AD |         if_z    jmp     #.data
3d140     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3d144     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
3d148     2D 00 64 FD |                 ret
3d14c                 | .data
3d14c     00 92 0F F2 |                 cmp     hpar3, #0               wz
3d150     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3d154                 | 
3d154     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
3d158     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
3d15c     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
3d160     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
3d164                 |                 debug(ubin_long(hub_status_chg))
3d164                 | 
3d164     01 5A 06 F6 |                 mov     hdev_port, #1
3d168                 | .loop
3d168     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
3d16c     0C 00 B0 AD |         if_x1   call    #hub_port_handler
3d170     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
3d174     F0 FF 9F 3D |         if_nc   jmp     #.loop
3d178     2D 00 64 FD |                 ret
3d17c                 | 
3d17c                 | hub_port_handler
3d17c     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
3d180     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3d184     27 EF 03 F6 |                 mov     pb, urx_buff_p
3d188     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3d18c     55 02 A0 FD |                 call    #control_read
3d190     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3d194                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3d194                 | 
3d194     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
3d198     50 01 90 5D |         if_x0   jmp     #.other
3d19c     68 02 D0 FE |                 loc     ptra, #clr_port_feat
3d1a0     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
3d1a4     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3d1a8     A0 02 A0 FD |                 call    #control_write
3d1ac     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
3d1b0     7C 01 90 5D |         if_x0   jmp     #.disconnect
3d1b4     B1 99 02 F6 |                 mov     hctwait, _100ms_
3d1b8     EF 02 A0 FD |                 call    #poll_waitx
3d1bc                 | 
3d1bc     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
3d1c0     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
3d1c4     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3d1c8     A0 02 A0 FD |                 call    #control_write
3d1cc                 | 
3d1cc     02 78 07 F6 |                 mov     htmp3, #2
3d1d0                 | .wait_reset
3d1d0     AD 99 02 F6 |                 mov     hctwait, _8ms_
3d1d4     EF 02 A0 FD |                 call    #poll_waitx
3d1d8     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3d1dc     27 EF 03 F6 |                 mov     pb, urx_buff_p
3d1e0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3d1e4     55 02 A0 FD |                 call    #control_read
3d1e8     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3d1ec     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
3d1f0     F7 79 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
3d1f4                 | 
3d1f4     10 02 D0 FE |                 loc     ptra, #clr_port_feat
3d1f8     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
3d1fc     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3d200     A0 02 A0 FD |                 call    #control_write
3d204                 | 
3d204     24 72 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
3d208                 | .wait_recover
3d208     A8 99 02 F6 |                 mov     hctwait, _1ms_
3d20c     EF 02 A0 FD |                 call    #poll_waitx
3d210     FD 73 6F FB |                 djnz    htmp,#.wait_recover
3d214                 | 
3d214     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3d218     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3d21c     0E 6A 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3d220                 | 
3d220     00 08 00 FF 
3d224     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3d228     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
3d22c     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
3d230     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3d234     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3d238     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d23c     48 01 90 5D |         if_nz   jmp     #.done
3d240                 | .get_dev_desc
3d240     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3d244     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3d248     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3d24c     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
3d250     2D 73 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
3d254     01 73 57 FC |                 wrword  htmp, ptra[wValue]
3d258     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
3d25c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d260     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3d264     AD 99 02 F6 |                 mov     hctwait, _8ms_
3d268     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
3d26c     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
3d270     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
3d274     BE 00 A0 FD |                 call    #calc_crc5
3d278     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
3d27c     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3d280     F7 AD C2 FA |                 rdbyte  total_data, pb
3d284     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3d288     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
3d28c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d290     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3d294     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3d298     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3d29c                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3d29c     A0 99 02 F6 |                 mov     hctwait, _500us_
3d2a0     EF 02 A0 FD |                 call    #poll_waitx
3d2a4     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
3d2a8     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3d2ac     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
3d2b0     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3d2b4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d2b8     CC 00 90 5D |         if_nz   jmp     #.done
3d2bc     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
3d2c0     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3d2c4     61 87 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
3d2c8     61 89 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3d2cc     00 73 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
3d2d0     09 86 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3d2d4     02 88 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3d2d8     56 73 1B A2 |         if_z    cmp     htmp, total_data        wcz
3d2dc     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
3d2e0     A4 00 90 CD |         if_b    jmp     #.done
3d2e4     68 F0 BF FD |                 call    #hparse_con_desc
3d2e8     9C 00 90 FD |                 jmp     #.done
3d2ec                 | 
3d2ec                 | .other
3d2ec     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
3d2f0     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
3d2f4     28 00 90 AD |         if_x1   jmp     #.reset_feature
3d2f8     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
3d2fc     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
3d300     1C 00 90 AD |         if_x1   jmp     #.reset_feature
3d304     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
3d308     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
3d30c     10 00 90 AD |         if_x1   jmp     #.reset_feature
3d310     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
3d314     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
3d318     04 00 90 AD |         if_x1   jmp     #.reset_feature
3d31c     68 00 90 FD |                 jmp     #.done
3d320                 | .reset_feature
3d320     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
3d324     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3d328     A0 02 A0 FD |                 call    #control_write
3d32c     58 00 90 FD |                 jmp     #.done
3d330                 | .disconnect
3d330                 | 
3d330     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3d334     00 72 E3 F8 |                 getbyte htmp
3d338     03 72 0F F2 |                 cmp     htmp,#KB_READY wz
3d33c     05 72 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
3d340     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
3d344     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
3d348     00 76 06 A6 |         if_z    mov     kb_led_states, #0
3d34c     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
3d350                 |         if EMUPAD_MAX_PLAYER > 0
3d350                 |         end
3d350                 |         if HAVE_MOUSE
3d350     04 72 0F F2 |                 cmp     htmp, #M_READY          wz
3d354     05 72 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
3d358     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
3d35c                 |         end
3d35c                 |         if HAVE_HIDPAD
3d35c     30 0A F0 FE |                 loc ptrb,#hidpad_report
3d360     2D 73 03 F6 |                 mov htmp,hdev_port
3d364     01 72 E7 F2 |                 cmpsub htmp,#1
3d368     20 72 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
3d36c     B9 F3 03 F1 |                 add ptrb,htmp
3d370     28 0E 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
3d374     80 01 6C FC |                 wrlong #0,ptrb
3d378                 |         end
3d378                 | 
3d378     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
3d37c     00 00 C4 F8 |                 setbyte #0
3d380     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3d384     00 00 04 F6 |                 mov     0-0, #0
3d388                 | 
3d388                 | .done
3d388     0E 6A 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
3d38c     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3d390     22 6F 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3d394     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
3d398     A6 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3d39c     A4 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3d3a0                 | 
3d3a0     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3d3a4     27 EF 03 F6 |                 mov     pb, urx_buff_p
3d3a8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3d3ac     55 02 A0 FD |                 call    #control_read
3d3b0     00 69 06 FB |                 rdlong  hub_port_status, ptra
3d3b4                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3d3b4     2D 00 64 FD |                 ret
3d3b8                 | 
3d3b8                 | '------------------------------------------------------------------------------
3d3b8                 | ' Partially populated SETUP packets
3d3b8                 | '------------------------------------------------------------------------------
3d3b8     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3d3b9     06          |                 byte    REQ_GET_DESC
3d3ba     00 01       |                 word    TYPE_DEVICE << 8
3d3bc     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3d3be     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3d3c0     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3d3c1     06          |                 byte    REQ_GET_DESC
3d3c2     00 02       |                 word    TYPE_CONFIG << 8
3d3c4     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3d3c6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3d3c8     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3d3c9     09          |                 byte    REQ_SET_CONFIG
3d3ca     00 00       |                 word    0       ' Configuration value
3d3cc     00 00       |                 word    0       ' Zero
3d3ce     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
3d3d0     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3d3d1     05          |                 byte    REQ_SET_ADDR
3d3d2     00 00       |                 word    0       ' Zero
3d3d4     00 00       |                 word    0       ' Zero
3d3d6     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
3d3d8                 | '------------------------------------------------------------------------------
3d3d8                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
3d3d8                 | ' wValue field dictates which protocol should be used.
3d3d8                 | '
3d3d8                 | ' When initialized, all devices default to report protocol. However the host
3d3d8                 | ' should not make any assumptions about the device state and should set the
3d3d8                 | ' desired protocol whenever initializing a device.
3d3d8                 | '------------------------------------------------------------------------------
3d3d8     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3d3d9     0B          |                 byte    HID_SET_PROTO
3d3da     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
3d3dc                 |                                                 ' (HID 1.11 Section 7.2.6).
3d3dc     00 00       |                 word    0               ' Interface index number.
3d3de     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
3d3e0                 | '------------------------------------------------------------------------------
3d3e0     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3d3e1     0A          |                 byte    HID_SET_IDLE
3d3e2     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
3d3e4                 |                                         ' reporting until a change is detected in the report data
3d3e4                 | 
3d3e4                 |                                         ' (HID 1.11 Section 7.2.4).
3d3e4     00 00       |                 word    0       ' Interface index number.
3d3e6     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
3d3e8     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3d3e9     09          |                 byte    HID_SET_REPORT
3d3ea     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
3d3ec                 |                                         ' (HID 1.11 Section 7.2.2).
3d3ec     00 00       |                 word    0       ' Interface index number.
3d3ee     00 00       |                 word    0       ' Size of the report, in bytes.
3d3f0     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
3d3f1     06          |                 byte    REQ_GET_DESC
3d3f2     00 22       |                 word    TYPE_REPORT << 8
3d3f4     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3d3f6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3d3f8                 | '------------------------------------------------------------------------------
3d3f8     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
3d3f9     06          |                 byte    REQ_GET_DESC
3d3fa     00 29       |                 word    TYPE_HUB << 8
3d3fc     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3d3fe     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3d400     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3d401     03          |                 byte    REQ_SET_FEATURE
3d402     00 00       |                 word    0       ' port power
3d404     01 00       |                 word    1       ' Port index number (1+)
3d406     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3d408     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3d409     01          |                 byte    REQ_CLEAR_FEATURE
3d40a     00 00       |                 word    0       ' port power
3d40c     01 00       |                 word    1       ' Port index number (1+)
3d40e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3d410     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
3d411     00          |                 byte    REQ_GET_STATUS
3d412     00 00       |                 word    0
3d414     01 00       |                 word    1       ' Port index number (1+)
3d416     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
3d418                 | '------------------------------------------------------------------------------
3d418                 | if _HAVE_GAMEPAD
3d418     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
3d41c                 | ps3_command_buff
3d41c     00 00 00 00 
3d420     00          |                 byte    $00, $00, $00, $00, $00
3d421     00 00 00 00 
3d425     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
3d426     FF 27 10 00 
3d42a     32          |                 byte    $FF, $27, $10, $00, $32
3d42b     FF 27 10 00 
3d42f     32          |                 byte    $FF, $27, $10, $00, $32
3d430     FF 27 10 00 
3d434     32          |                 byte    $FF, $27, $10, $00, $32
3d435     FF 27 10 00 
3d439     32          |                 byte    $FF, $27, $10, $00, $32
3d43a     00 00 00 00 
3d43e     00          |                 byte    $00, $00, $00, $00, $00
3d43f     00 00 00 00 
3d443     00          |                 byte    $00, $00, $00, $00, $00
3d444     00 00 00 00 
3d448     00          |                 byte    $00, $00, $00, $00, $00
3d449     00 00 00    |                 byte    $00, $00, $00
3d44c                 | '------------------------------------------------------------------------------
3d44c     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
3d44f                 |                                         ' 0x01 All blinking
3d44f                 |                                         ' 0x02 1 flashes, then on
3d44f                 |                                         ' 0x03 2 flashes, then on
3d44f                 |                                         ' 0x04 3 flashes, then on
3d44f                 |                                         ' 0x05 4 flashes, then on
3d44f                 |                                         ' 0x06 1 on
3d44f                 |                                         ' 0x07 2 on
3d44f                 |                                         ' 0x08 3 on
3d44f                 |                                         ' 0x09 4 on
3d44f                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
3d44f                 |                                         ' 0x0B Blinking*
3d44f                 |                                         ' 0x0C Slow blinking*
3d44f                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
3d44f     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
3d452     00          |                 byte    $00             ' Left rumble
3d453     00          |                 byte    $00             ' Right rumble
3d454     00 00 00    |                 byte    $00, $00, $00
3d457                 | 
3d457                 | xinp_fix_8bitdo '' This inexplicable String request (that WILL fail) somehow un-bugs the terrible firmware
3d457                 |                 '' of certain wired 8bitdo gamepads.
3d457     80          |                 byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3d458     06          |                 byte    REQ_GET_DESC
3d459     04 03       |                 word    TYPE_STRING << 8 + 4
3d45b     09 04       |                 word    $0409   ' Zero or Language ID (Section 9.6.7)
3d45d     02 00       |                 word    2       ' Number of bytes to transfer if there is a data stage
3d45f     00          | end
3d460                 | alignl
3d460                 | 
3d460                 | if HAVE_MOUSE
3d460     00 00 00 00 
3d464     00 00 00 00 | mouse_limits long 0[2]
3d468     00 00 00 00 | mouse_outptr long 0
3d46c                 | end
3d46c                 | 
3d46c                 | if KEYQUEUE_SIZE > 0
3d46c     00          | keyq_head byte 0
3d46d     00          | keyq_tail byte 0
3d46e     00 00 00 00 
      ...             
3d66a     00 00 00 00 
3d66e     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
3d670                 | alignl
3d670                 | end
3d670                 | 
3d670                 | if EMUPAD_MAX_PLAYER > 0
3d670                 | emupad_rule_buffer
3d670                 | if EMUPAD_BUILTIN_RULES
3d670                 | file "padmap_builtin.dat"
3d670                 | end
3d670                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
3d670                 | '' Default rule directly follows!
3d670                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
3d670                 | end
3d670                 | 
3d670                 | '------------------------------------------------------------------------------
3d670                 | ' The USB data cache area gets zero-filled at every device disconnect
3d670                 | '------------------------------------------------------------------------------
3d670                 | usb_cache_start
3d670                 | 
3d670                 | ' HID descriptor and report buffers
3d670                 | if !!OVERLAP_MEMORY
3d670     00 00 00 00 
      ...             
3dd68     00 00 00 00 
3dd6c     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
3dd70                 | end
3dd70     00 00 00 00 
3dd74     00 00 00 00 | hkbd_report     byte    0[8]
3dd78     00 00 00 00 | hkbd_led_rep    byte    0
3dd7c                 | alignl
3dd7c                 | 
3dd7c     00 00 00 00 
3dd80     00 00 00 00 
3dd84     00 00 00 00 
3dd88     00 00 00 00 
3dd8c     00 00 00 00 | hid_stack       long 0[(hidr_end - hidr_state) * 1]
3dd90                 | 
3dd90                 | if HAVE_HIDPAD
3dd90     00 00 00 00 
      ...             
3de68     00 00 00 00 
3de6c     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
3de70                 | end
3de70                 | 
3de70                 | ' HUB descriptor
3de70     00          | hub_descr       byte    0   ' bDescLength
3de71     00          |                 byte    0   ' bDescriptorType
3de72     00          |                 byte    0   ' bNbrPorts
3de73     00 00       |                 word    0   ' wHubCharacteristics
3de75     00          |                 byte    0   ' bPwrOn2PwrGood
3de76     00          |                 byte    0   ' bHubContrCurrent
3de77     00          |                 byte    0   ' DeviceRemoveable
3de78     00          |                 byte    0   ' PortPwrCtrlMask
3de79                 | 
3de79                 | usb_cache_end
3de79                 | 
3de79                 | if HAVE_MOUSE
3de79     00 00 00 00 | mouse_xacc      long 0
3de7d     00 00 00 00 | mouse_yacc      long 0
3de81     00 00 00 00 | mouse_zacc      long 0
3de85     00          | mouse_bstate    byte 0
3de86     00          | mouse_lpending  byte 0
3de87     00          | mouse_rpending  byte 0
3de88     00          | mouse_mpending  byte 0
3de89     00          | mouse_lock      byte 0
3de8a     00 00 00    |                 byte 0[3] ' padding
3de8d                 | end
3de8d                 | 
3de8d     00 00 00 00 
      ...             
3df05     00 00 00 00 
3df09     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
3df0d     00 00 00 00 
3df11     00 00 00 00 
3df15     00 00 00 00 
3df19     00 00 00 00 
3df1d     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
3df1f     00 00 00 00 
      ...             
3e017     00 00 00 00 
3e01b     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
3e01f                 | 
3e01f     00          | driver_cog      byte    0                       ' Current driver cog + 1
3e020                 | 	alignl
3e020                 | _Audio2_004_spin2_dat_
3e020                 | 
3e020                 | audio       	org     0
3e020                 | 
3e020     61 6F 05 FB |             	rdlong  mailbox2, ptra++     	' get start address of all mailboxes
3e024     61 A7 05 FB |             	rdlong  scbase, ptra++       	' get start address of scope buffer
3e028     61 B3 05 FB |             	rdlong  hubptr, ptra++       	' get start address of PSRAM cache
3e02c                 | 
3e02c     01 EC 63 FD |             	cogid   pa                   	' compute cogid
3e030     0C EC 07 FA |             	mul     pa, #12              	' and mailbox spacing
3e034     F6 6F 01 F1 |             	add     mailbox2, pa         	' add offset to find this COG's mailbox
3e038     B7 6C 01 F6 |             	mov     mailbox, mailbox2     	' we need 2 copies of this to enable switching between hub and psram
3e03c                 | 
3e03c     0E B0 05 FC |             	wrpin   dac2,#left           	' PWM DACs at 44100@339 MHz
3e040     0E B4 15 FC |             	wxpin   sr44100,#left      	' 30*256
3e044     0F B0 05 FC |             	wrpin   dac2,#right
3e048     0F B4 15 FC |             	wxpin   sr44100,#right    
3e04c     41 9C 64 FD |             	dirh    #left addpins 1
3e050     20 9C 64 FD |             	setse1  #%001<<6 + left      	' Set the event - DAC empty
3e054                 |  
3e054                 |             
3e054                 | '---------------------------------------------------------------------------------        
3e054                 | '----------------- The main loop -------------------------------------------------
3e054                 | '---------------------------------------------------------------------------------
3e054                 | 
3e054     0F 9E 05 F6 | loop       	mov 	    cn,#15 '7
3e058                 |               					'   waitx ##3300000  		'for debug
3e058                 |             
3e058                 | '----------------------------------------------------------------------------------
3e058                 | '------------- Get parameters and execute commands if any -------------------------
3e058                 | '----------------------------------------------------------------------------------
3e058                 | 
3e058                 | 
3e058     CF 66 01 F6 | p401        	mov     channeladd,cn             	' compute the pointer to channel parameters block
3e05c     06 66 65 F0 |             	shl     channeladd,#6
3e060     B3 F0 03 F1 |             	add     ptra,channeladd
3e064                 | 
3e064     28 1A 64 FD |             	setq    #13                       	' read parameters
3e068     00 75 05 FB |             	rdlong  pointer0,ptra
3e06c     1F 88 1D F4 | p408        	bitl    command0,#31 wcz	      	' bit #31 command - set the DAC sample rate
3e070     2C 00 90 3D |     	if_nc   jmp     #p404                     	' if not set, proceed
3e074     C4 68 01 F6 |             	mov     qq,command0             	' get the new rate
3e078     4E 68 15 FC |             	wxpin   qq,#left addpins 1        	' and program the pins
3e07c     B4 68 E1 F8 |             	getbyte qq,qq,#0 		      	' check if the rate is n*256
3e080     00 68 0D F2 |             	cmp     qq,#0 wz                         
3e084     4E B0 05 AC |     	if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
3e088     4E AE 05 5C |     	if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
3e08c                 |                 
3e08c     1E 7E 1D F4 |                	bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
3e090     00 74 05 A6 |     	if_z    mov     pointer0, #0  
3e094     00 76 05 A6 |     	if_z    mov     pointer0h, #0  
3e098     00 7C 05 A6 |     	if_z    mov     envph0, #0  
3e09c     05 7F 65 AC |     	if_z    wrlong  sstart0, ptra[5]          	' reset bit #30 in hub
3e0a0                 |     	
3e0a0     BF 68 01 F6 | p404        	mov     qq,sstart0		     	' check if start>$80000
3e0a4     FF FF 03 FF 
3e0a8     FF 69 05 F5 | 		and 	qq,##$7FFFFFF 
3e0ac     00 04 00 FF 
3e0b0     00 68 1D F2 |                 cmp 	qq,##$80000 wcz
3e0b4     B7 6C 01 36 |     	if_ge   mov     mailbox,mailbox2          	' if yes, use PSRAM
3e0b8     00 6C 05 C6 |     	if_lt   mov     mailbox,#0                	' if not, use HUB 
3e0bc                 | 
3e0bc     C2 9A 39 F9 | p405           	getword apan0,volpan0,#1          	' extract vol,pan from longs 
3e0c0     C2 98 31 F9 |     	    	getword avol0,volpan0,#0
3e0c4                 |     	    	
3e0c4                 | '----------------------------------------------------------------------------------
3e0c4                 | '------------- Compute the envelope, if exists ------------------------------------
3e0c4                 | '----------------------------------------------------------------------------------
3e0c4                 |             
3e0c4     00 8A 1D F2 |             	cmp     envptr0,#0 wcz     		' read the pointer
3e0c8     20 00 00 AF 
3e0cc     00 E6 05 A6 |     	if_z    mov     envs1,##$4000			' if 0, no envelope, load $4000=1 for scas
3e0d0     54 00 90 AD |     	if_z    jmp     #p410				' and run away	
3e0d4                 | 
3e0d4     C6 7C 01 F1 |            	add     envph0,envspd0			' envelope PA update
3e0d8                 |            	           
3e0d8     BE E2 01 F6 |       	    	mov     envhi, envph0			' move phase acc to high part of env pointer
3e0dc     06 E2 45 F0 | 		shr     envhi,#6			' leave 10 bits in hi
3e0e0     F1 E4 31 F9 | 	   	getword envlo,envhi,#0              	' and 16 bit in lo
3e0e4     10 E2 45 F0 | 	    	shr     envhi,#16			' move 10 bits of hi to the lower word
3e0e8     C7 E2 19 F2 | 	    	cmp     envhi,envlen0 wcz		' compare this to envelope length
3e0ec                 | 	    											'debug(udec(envhi,envlen0))
3e0ec     C7 E2 01 36 |     	if_ge  	mov     envhi,envlen0			' if greater than, set it at envlen
3e0f0     00 E4 05 36 |     	if_ge   mov     envlo,#0
3e0f4     C7 7C 01 36 |     	if_ge   mov     envph0,envlen0             	' and set envph0 at the end of the envelope
3e0f8     16 7C 65 30 |     	if_ge   shl     envph0,#22
3e0fc                 | 
3e0fc     F1 E6 01 F6 |             	mov 	envs1,envhi			' 10 high bits of PA is the offset to the envelope entry
3e100     01 E6 65 F0 |             	shl 	envs1,#1                        ' these entries are 16 bit so multiply the offset by 2
3e104     C5 E6 01 F1 |             	add 	envs1,envptr0                   ' and add it to the pointer
3e108     F3 E6 01 FB |             	rdlong 	envs1,envs1			' and then read 2 entries in one rdlong
3e10c     F3 E8 39 F9 |             	getword envs2,envs1,#1			' then separate them		
3e110     F3 E6 31 F9 |            	getword envs1,envs1,#0
3e114     F2 E8 01 FA |             	mul     envs2,envlo                     ' and do linear interpolation based on lower bits of the offset
3e118     F2 E4 21 F6 |             	not     envlo
3e11c     F2 E6 01 FA |             	mul     envs1,envlo
3e120     F4 E6 01 F1 |             	add     envs1,envs2
3e124     12 E6 45 F0 |             	shr     envs1,#18			' we need only 14 bits for scas
3e128                 |               
3e128                 | '----------------------------------------------------------------------------------
3e128                 | '------------- Generate the noise if bit 27 of the pointer is set -----------------
3e128                 | '----------------------------------------------------------------------------------
3e128                 | 
3e128                 | 
3e128                 |     	
3e128                 | '----------------------------------------------------------------------------------
3e128                 | '------------- Get the sample -----------------------------------------------------
3e128                 | '----------------------------------------------------------------------------------    	
3e128                 |  
3e128     BB 9C 01 F6 | p410  		mov	oldptrh,pointer0h
3e12c     C3 96 F9 F8 |            	getbyte	afreq0,freqskip0,#3         	' the frequency is in 8:24 format, so get integer in afreq0
3e130     08 86 65 F0 |            	shl	freqskip0,#8                	' and keep the fractional in freqskip0
3e134     C3 74 19 F1 |            	add     pointer0,freqskip0 wcz      	' compute the pointer to the next sample   
3e138     CB 76 21 F1 |            	addx	pointer0h,afreq0  
3e13c                 |           	
3e13c     1B 7E 0D F4 |    	   	testb   sstart0, #27 wz
3e140     10 00 90 5D |     	if_nz	jmp #p412   	
3e144     1B 6A 61 CD |    	if_c  	getrnd  spl
3e148     B5 7A 41 C9 |    	if_c	rolword rawspl0,spl,#0	
3e14c     BD 6A 31 F9 |    		getword spl,rawspl0,#0
3e150     88 00 90 FD |       	        jmp     #p406          	
3e154                 |            	
3e154                 |            	
3e154     CE 76 19 F2 | p412 		cmp	pointer0h,oldptrh wcz
3e158     50 00 90 AD |  	if_e 	jmp 	#p411				' if the pointer didn't change, no sample has to be read
3e15c                 |      	
3e15c     1F 7E 0D F4 |             	testb   sstart0,#31 wz       	   	' bit 31 : 16 bit sample  
3e160     01 76 65 A0 |      	if_z    shl     pointer0h,#1        
3e164     1C 7E 0D F4 |             	testb   sstart0,#28 wz  		' bit 28 : interleaved sample         
3e168     01 76 65 A0 |      	if_z    shl     pointer0h,#1        
3e16c                 | 												
3e16c     C1 76 19 F2 |             	cmp     pointer0h,lend0 wcz		' check if end of the loop reached
3e170     C1 76 81 31 |    	if_ge   sub     pointer0h,lend0       
3e174     C0 76 01 31 |         if_ge   add     pointer0h,lstart0
3e178     C1 76 19 F2 |             	cmp     pointer0h,lend0 wcz		' check if end of the loop reached
3e17c     C1 76 01 36 |         if_ge   mov	pointer0h,lend0	
3e180                 |  
3e180     BB 68 01 F6 |              	mov     qq,pointer0h              	' compute place in the memory from where the sample will be loaded
3e184     BF 68 01 F1 |            	add     qq,sstart0            
3e188     FF 6D 5D F2 |            	cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
3e18c     B4 6A E1 EA |     	if_le   rdword  spl,qq                      	' if not, use HUB RAM for samples
3e190     F8 00 B0 1D |     	if_gt   call    #cache_read
3e194     1F 7E 0D F4 |                 testb   sstart0,#31 wz 
3e198     08 6A 65 50 |     	if_nz   shl     spl,#8				' convert 8 to 16 bit if needed
3e19c     01 76 45 A0 |         if_z    shr     pointer0h,#1
3e1a0     1C 7E 0D F4 |                 testb   sstart0,#28 wz            
3e1a4     01 76 45 A0 |     	if_z    shr     pointer0h,#1    
3e1a8     B5 7A 41 F9 |                 rolword rawspl0,spl,#0			' now rawspl0 has oldsample:newsample in it
3e1ac                 |               
3e1ac     BD 6A 31 F9 | p411	      	getword spl,rawspl0,#0
3e1b0     BD 94 39 F9 | 		getword oldspl,rawspl0,#1		' then separate them		
3e1b4                 | 
3e1b4                 |          '    debug(uhex(pointer0h,pointer0,spl,oldspl))
3e1b4                 | 
3e1b4                 | 
3e1b4     BA E4 01 F6 | 		mov	envlo,pointer0
3e1b8     12 E4 45 F0 | 		shr 	envlo,#18
3e1bc                 | 	
3e1bc     F2 6A 31 FA |             	scas    spl,envlo                   	' and do linear interpolation
3e1c0     00 6A 01 F6 |             	mov 	spl,0-0
3e1c4     F2 E4 21 F6 |             	not     envlo
3e1c8     1F 00 00 FF 
3e1cc     FF E5 05 F5 |           	and     envlo,##$3FFF
3e1d0     F2 94 31 FA |            	scas    oldspl,envlo
3e1d4     00 94 01 F6 |             	mov     oldspl,0-0
3e1d8     CA 6A 01 F1 |                 add     spl, oldspl
3e1dc                 | 	 
3e1dc     F3 6A 31 FA | p406        	scas    spl, envs1
3e1e0     00 6A 01 F6 |             	mov     spl,0-0
3e1e4     CC 6A 31 FA |             	scas    spl,avol0                 	' apply volume
3e1e8     00 6A 01 F6 |             	mov     spl,0-0
3e1ec                 |  
3e1ec     CD 6A 31 FA |             	scas    spl,apan0                 	' apply pan
3e1f0     00 A0 01 F6 |             	mov     ls0,0-0
3e1f4     20 00 00 FF 
3e1f8     00 68 05 F6 |             	mov     qq,##16384
3e1fc     CD 68 81 F1 |             	sub     qq,apan0
3e200     B4 6A 31 FA |             	scas    spl,qq
3e204     00 A2 01 F6 |             	mov     rs0, 0-0
3e208                 |       
3e208     D1 78 29 F9 |                 setword sample0,rs0,#1           	' pack samples into long
3e20c     D0 78 21 F9 |                 setword sample0,ls0,#0
3e210                 |                 
3e210     D0 70 01 F1 |                 add  lsample,ls0
3e214     D1 72 01 F1 |                 add  rsample,rs0
3e218                 |              
3e218     1E 7E 1D F4 |             	bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
3e21c     00 74 05 A6 |     	if_z    mov     pointer0, #0  
3e220     00 76 05 A6 |     	if_z    mov     pointer0h, #0  
3e224     00 7C 05 A6 |     	if_z    mov     envph0, #0  
3e228     05 7F 65 AC |     	if_z    wrlong  sstart0, ptra[5]          	' reset bit #30 in hub
3e22c                 |             
3e22c     28 08 64 FD | p403        	setq #4                          	' write new pointer, sample values and env pointer to the hub
3e230     00 75 65 FC | 	       	wrlong  pointer0,ptra
3e234     B3 F0 83 F1 |             	sub     ptra, channeladd         	' reset the pointer to channel parameters
3e238                 | 
3e238     87 9F 7D FB |             	djnf    cn, #p401
3e23c                 | 
3e23c     0F 72 E5 F4 |             	bitnot rsample, #15
3e240     0F 70 E5 F4 |             	bitnot lsample, #15
3e244                 |   							'           	getct ct2  	'debug
3e244                 |   							'          	sub ct2,ct1
3e244                 |   							'          	debug(udec(ct2))
3e244     24 28 60 FD |             	waitse1
3e248                 |           
3e248     0E 70 25 FC |            	wypin   lsample, #left              
3e24c     0F 72 25 FC |                 wypin   rsample, #right        
3e250                 | 
3e250     B8 A4 21 F9 | 		setword oldsample, lsample,#0		' for oscilloscope
3e254     B9 A4 29 F9 | 		setword oldsample, rsample,#1
3e258                 | 		
3e258     00 72 05 F6 |             	mov rsample, #0
3e25c     00 70 05 F6 |             	mov lsample, #0
3e260                 | 
3e260                 | '----------------------------------------------------------------------------------
3e260                 | '------------- Oscilloscope  -----------------------------------------------------
3e260                 | '----------------------------------------------------------------------------------   
3e260                 | 		
3e260     00 A6 0D F2 | 	    	cmp     scbase,#0 wz
3e264     20 00 90 AD |     	if_z    jmp #p302	   
3e268                 |  
3e268     01 AC 15 F7 |             	incmod  scope,#1 wc            		'  todo: scope speed instead of const  
3e26c     D4 AA 01 C6 |     	if_c    mov scptr2,scptr
3e270     02 AA 65 C0 |     	if_c    shl scptr2,#2
3e274     D3 AA 01 C1 |     	if_c    add scptr2,scbase     
3e278     60 AA 65 FC |             	wrlong scptr2,#$60
3e27c     D5 A4 61 CC |     	if_c    wrlong oldsample,scptr2
3e280     01 00 00 CF 
3e284     7F A8 05 C7 |     	if_c    incmod scptr,##639
3e288                 |             
3e288     C8 FD 9F FD |  p302           jmp     #loop            'loop
3e28c                 | 
3e28c                 | '----------------------------------------------------------------------------------
3e28c                 | '------------- This is the end of the main loop -----------------------------------
3e28c                 | '----------------------------------------------------------------------------------
3e28c                 | 
3e28c                 | '----------------------------------------------------------------------------------
3e28c                 | '------------- PSRAM cache ----------- --------------------------------------------
3e28c                 | '----------------------------------------------------------------------------------
3e28c                 | 
3e28c                 | ' There are 16 cache pointers for 16 channels
3e28c                 | ' if 24 higher bits of address=cache, then get a word from the cache
3e28c                 | ' else load the cache from PSRAM, update the pointer, then read a sample
3e28c                 | 
3e28c                 | 
3e28c     B4 DC E1 F8 | cache_read  	getbyte addrlo,qq,#0 			' when this is called, qq is the addres of the sample			
3e290                 |             
3e290     B4 DE 01 F6 | 	   	mov     addrhi,qq		
3e294     08 DE 45 F0 | 	    	shr     addrhi,#8		        ' get 24 upper bits
3e298     DB 9E 95 F9 | 	    	alts    cn,#cache1            
3e29c     00 DE 09 F2 | 	    	cmp	addrhi,0-0 wz               	' and compare with the cache pointer for the channel
3e2a0     34 00 90 AD |     	if_z    jmp     #p701	    			' if equal, cache hit, read the sample from it
3e2a4                 | 	
3e2a4     DB 9E 8D F9 | p702	    	altd    cn,#cache1			' cache miss. 
3e2a8     EF 00 00 F6 | 	    	mov     0-0,addrhi                  	' update the pointer
3e2ac     EF D6 01 F6 | 	    	mov     cmd,addrhi			' prepare the mailbox
3e2b0     08 D6 65 F0 | 	    	shl     cmd,#8
3e2b4     0B D6 3D F8 |             	setnib  cmd, #%1011, #7             	' read burst from the external memory
3e2b8     CF D8 01 F6 |             	mov     hubaddr,cn                  	' to the channel cache
3e2bc     08 D8 65 F0 |             	shl     hubaddr,#8                  	'
3e2c0     D9 D8 01 F1 |             	add     hubaddr,hubptr 
3e2c4     00 DB 05 F6 |             	mov     count,#256                  	' 256 bytes
3e2c8     28 04 64 FD |             	setq    #2                          	' write 3 longs
3e2cc     B6 D6 61 FC |             	wrlong  cmd, mailbox                	' run it
3e2d0     B6 D6 01 FB | poll1       	rdlong  cmd, mailbox                	' poll mailbox for result
3e2d4     FE D7 B5 FB |             	tjs     cmd, #poll1                 	' retry until valid 
3e2d8                 |             
3e2d8                 | 	
3e2d8     CF 68 01 F6 | p701	    	mov     qq,cn				' cache hit
3e2dc     08 68 65 F0 | 	    	shl     qq,#8				' compute the cache start
3e2e0     D9 68 01 F1 | 	    	add     qq,hubptr
3e2e4     EE 68 01 F1 | 	    	add	qq,addrlo			' add 8 lower bits to the cache addredd
3e2e8     B4 6A E1 0A |     	_ret_   rdword  spl,qq                      	' read a long from the cache
3e2ec                 |           
3e2ec                 |   
3e2ec                 | 
3e2ec                 | 
3e2ec                 | '---------------------------------------------------------------------------
3e2ec                 | '------- Variables ---------------------------------------------------------
3e2ec                 | '---------------------------------------------------------------------------
3e2ec                 | 
3e2ec                 | ' constants
3e2ec                 | 
3e2ec     00 00 00 00 | channeladd 	long 0
3e2f0                 | 
3e2f0                 | ' temporary variables 
3e2f0                 | 
3e2f0     00 00 00 00 | qq          	long 0
3e2f4     00 00 00 00 | spl         	long 0
3e2f8     00 00 00 00 | mailbox     	long 0
3e2fc     00 00 00 00 | mailbox2    	long 0
3e300     00 00 00 00 | lsample     	long 0
3e304     00 00 00 00 | rsample     	long 0
3e308                 | 
3e308                 | ' channel parameter block
3e308                 | 
3e308     00 00 00 00 | pointer0    	long 0   
3e30c     00 00 00 00 | pointer0h   	long 0  
3e310     00 00 00 00 | sample0     	long 0
3e314     00 00 00 00 | rawspl0	    	long 0
3e318     00 00 00 00 | envph0	    	long 0
3e31c     00 00 00 00 | sstart0     	long 0     ' start pointer and type at bit 31
3e320     00 00 00 00 | lstart0     	long 0
3e324     00 00 00 00 | lend0       	long 0
3e328     00 00 00 00 | volpan0     	long 0
3e32c     00 00 00 00 | freqskip0   	long 0
3e330     00 00 00 00 | command0    	long 0
3e334     00 00 00 00 | envptr0	    	long 0
3e338     00 00 00 00 | envspd0	    	long 0
3e33c     00 00 00 00 | envlen0	    	long 0
3e340     00 00 00 00 | res5	    	long 0
3e344     00 00 00 00 | res6	    	long 0
3e348                 | 
3e348     00 00 00 00 | oldspl		long 0
3e34c     00 00 00 00 | afreq0      	long 0
3e350                 | 
3e350     00 00 00 00 | avol0       	long 0
3e354     00 00 00 00 | apan0       	long 0
3e358     00 00 00 00 | oldptrh	    	long 0
3e35c     00 00 00 00 | cn          	long 0
3e360                 | 
3e360                 | ' Samples
3e360                 | 
3e360     00 00 00 00 | ls0         	long 0
3e364     00 00 00 00 | rs0         	long 0
3e368                 | 
3e368     00 00 00 00 | oldsample   	long 0
3e36c                 | 
3e36c     00 00 00 00 | scbase 		long 0
3e370     00 00 00 00 | scptr 		long 0
3e374     00 00 00 00 | scptr2		long 0
3e378     00 00 00 00 | scope 		long 0
3e37c                 | 
3e37c     44 00 17 00 | dac         	long %10111_00000000_01_00010_0     	'random dither
3e380     46 00 17 00 | dac2        	long %10111_00000000_01_00011_0     	'pwm
3e384                 | 
3e384     00 18 07 00 | hubptr      	long $71800
3e388     00 1E 00 00 | sr44100     	long 30*256
3e38c                 | 
3e38c     00 00 00 00 | cache1      	long 0
3e390     00 00 00 00 | cache2      	long 0
3e394     00 00 00 00 | cache3      	long 0
3e398     00 00 00 00 | cache4      	long 0
3e39c     00 00 00 00 | cache5      	long 0
3e3a0     00 00 00 00 | cache6      	long 0
3e3a4     00 00 00 00 | cache7      	long 0
3e3a8     00 00 00 00 | cache8      	long 0
3e3ac     00 00 00 00 | cache9      	long 0
3e3b0     00 00 00 00 | cachea      	long 0
3e3b4     00 00 00 00 | cacheb      	long 0
3e3b8     00 00 00 00 | cachec      	long 0
3e3bc     00 00 00 00 | cached      	long 0
3e3c0     00 00 00 00 | cachee      	long 0
3e3c4     00 00 00 00 | cachef      	long 0
3e3c8     00 00 00 00 | cache0      	long 0
3e3cc                 | 
3e3cc     00 00 00 00 | cmd         	long 0
3e3d0     00 00 00 00 | hubaddr    	long 0
3e3d4     00 01 00 00 | count       	long 256
3e3d8                 | 
3e3d8     00 00 00 00 | addrlo 		long 0
3e3dc     00 00 00 00 | addrhi 		long 0
3e3e0     00 00 00 00 | pointer00 	long 0
3e3e4     00 00 00 00 | envhi 		long 0
3e3e8     00 00 00 00 | envlo 		long 0
3e3ec     00 00 00 00 | envs1 		long 0
3e3f0     00 00 00 00 | envs2 		long 0
3e3f4     00 00 00 00 | noise0 		long 0
3e3f8                 | 
3e3f8                 | 'ct1 		long 0
3e3f8                 | 'ct2 		long 0
3e3f8                 | 
3e3f8                 | 		fit 256		'todo: maybe the better interpolation. Or all params in cog
3e3f8                 | 		fit 256		'todo: maybe the better interpolation. Or all params in cog
3e3f8     00 00 00 00 
3e3fc     00 00 00 00 | null  			long 	0,0           ' for channel reset
3e400                 | 	alignl
3e400                 | __system__dat_
3e400     00 00 00 00 
3e404     00 00 00 00 | 	byte	$00[8]
3e408     03 00 00 00 
3e40c     00 00 00 00 
3e410     00 00 00 00 
3e414     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e418     00 00 00 00 
      ...             
3e6a4     00 00 00 00 
3e6a8     00 00 00 00 | 	byte	$00[660]
3e6ac     00 00 40 0B | 	long	(180 {__system____root_opendir})<<20
3e6b0     00 00 50 0B | 	long	(181 {__system____root_closedir})<<20
3e6b4     00 00 60 0B | 	long	(182 {__system____root_readdir})<<20
3e6b8     00 00 70 0B | 	long	(183 {__system____root_stat})<<20
3e6bc     00 00 00 00 
      ...             
3e6d8     00 00 00 00 
3e6dc     00 00 00 00 | 	byte	$00[36]
3e6e0     48 E7 03 00 | 	long	@@@__system__dat_ + 840
3e6e4     4B E7 03 00 | 	long	@@@__system__dat_ + 843
3e6e8     6C E7 03 00 | 	long	@@@__system__dat_ + 876
3e6ec     85 E7 03 00 | 	long	@@@__system__dat_ + 901
3e6f0     A0 E7 03 00 | 	long	@@@__system__dat_ + 928
3e6f4     BA E7 03 00 | 	long	@@@__system__dat_ + 954
3e6f8     CA E7 03 00 | 	long	@@@__system__dat_ + 970
3e6fc     DC E7 03 00 | 	long	@@@__system__dat_ + 988
3e700     EE E7 03 00 | 	long	@@@__system__dat_ + 1006
3e704     00 E8 03 00 | 	long	@@@__system__dat_ + 1024
3e708     0C E8 03 00 | 	long	@@@__system__dat_ + 1036
3e70c     1D E8 03 00 | 	long	@@@__system__dat_ + 1053
3e710     31 E8 03 00 | 	long	@@@__system__dat_ + 1073
3e714     3B E8 03 00 | 	long	@@@__system__dat_ + 1083
3e718     4B E8 03 00 | 	long	@@@__system__dat_ + 1099
3e71c     5A E8 03 00 | 	long	@@@__system__dat_ + 1114
3e720     70 E8 03 00 | 	long	@@@__system__dat_ + 1136
3e724     89 E8 03 00 | 	long	@@@__system__dat_ + 1161
3e728     9D E8 03 00 | 	long	@@@__system__dat_ + 1181
3e72c     AB E8 03 00 | 	long	@@@__system__dat_ + 1195
3e730     BF E8 03 00 | 	long	@@@__system__dat_ + 1215
3e734     CB E8 03 00 | 	long	@@@__system__dat_ + 1227
3e738     DD E8 03 00 | 	long	@@@__system__dat_ + 1245
3e73c     F5 E8 03 00 | 	long	@@@__system__dat_ + 1269
3e740     07 E9 03 00 | 	long	@@@__system__dat_ + 1287
3e744     1A E9 03 00 | 	long	@@@__system__dat_ + 1306
3e748     4F 4B 00 4E 
3e74c     75 6D 65 72 
3e750     69 63 61 6C 
3e754     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
3e758     75 6D 65 6E 
3e75c     74 20 6F 75 
3e760     74 20 6F 66 
3e764     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
3e768     61 69 6E 00 
3e76c     52 65 73 75 
3e770     6C 74 20 6E 
3e774     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
3e778     65 70 72 65 
3e77c     73 65 6E 74 
3e780     61 62 6C 65 
3e784     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
3e788     65 67 61 6C 
3e78c     20 6D 75 6C 
3e790     74 69 62 79 
3e794     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
3e798     65 71 75 65 
3e79c     6E 63 65 00 
3e7a0     4E 6F 20 73 
3e7a4     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
3e7a8     66 69 6C 65 
3e7ac     20 6F 72 20 
3e7b0     64 69 72 65 
3e7b4     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3e7b8     79 00 42 61 
3e7bc     64 20 66 69 
3e7c0     6C 65 20 6E 
3e7c4     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
3e7c8     72 00 50 65 
3e7cc     72 6D 69 73 
3e7d0     73 69 6F 6E 
3e7d4     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
3e7d8     69 65 64 00 
3e7dc     4E 6F 74 20 
3e7e0     65 6E 6F 75 
3e7e4     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
3e7e8     65 6D 6F 72 
3e7ec     79 00 54 65 
3e7f0     6D 70 6F 72 
3e7f4     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
3e7f8     66 61 69 6C 
3e7fc     75 72 65 00 
3e800     46 69 6C 65 
3e804     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
3e808     73 74 73 00 
3e80c     49 6E 76 61 
3e810     6C 69 64 20 
3e814     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
3e818     6D 65 6E 74 
3e81c     00 54 6F 6F 
3e820     20 6D 61 6E 
3e824     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
3e828     65 6E 20 66 
3e82c     69 6C 65 73 
3e830     00 49 2F 4F 
3e834     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
3e838     6F 72 00 4E 
3e83c     6F 74 20 61 
3e840     20 64 69 72 
3e844     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
3e848     72 79 00 49 
3e84c     73 20 61 20 
3e850     64 69 72 65 
3e854     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3e858     79 00 52 65 
3e85c     61 64 20 6F 
3e860     6E 6C 79 20 
3e864     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
3e868     20 73 79 73 
3e86c     74 65 6D 00 
3e870     46 75 6E 63 
3e874     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
3e878     20 6E 6F 74 
3e87c     20 69 6D 70 
3e880     6C 65 6D 65 
3e884     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
3e888     00 44 69 72 
3e88c     65 63 74 6F 
3e890     72 79 20 6E 
3e894     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
3e898     6D 70 74 79 
3e89c     00 4E 61 6D 
3e8a0     65 20 74 6F 
3e8a4     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
3e8a8     6E 67 00 44 
3e8ac     65 76 69 63 
3e8b0     65 20 6E 6F 
3e8b4     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
3e8b8     65 6B 61 62 
3e8bc     6C 65 00 42 
3e8c0     61 64 20 61 
3e8c4     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
3e8c8     73 73 00 42 
3e8cc     72 6F 6B 65 
3e8d0     6E 20 63 6F 
3e8d4     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
3e8d8     74 69 6F 6E 
3e8dc     00 44 65 76 
3e8e0     69 63 65 20 
3e8e4     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
3e8e8     65 73 6F 75 
3e8ec     72 63 65 20 
3e8f0     62 75 73 79 
3e8f4     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
3e8f8     73 73 20 64 
3e8fc     65 76 69 63 
3e900     65 20 6C 69 
3e904     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
3e908     6F 20 73 70 
3e90c     61 63 65 20 
3e910     6F 6E 20 64 
3e914     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
3e918     65 00 55 6E 
3e91c     6B 6E 6F 77 
3e920     6E 20 65 72 
3e924     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
3e928     00 00 00 00 
3e92c     00 00 00 00 
3e930     00 00 00 00 | 	byte	$00[12]
3e934     01 80 00 00 
3e938     00 00 00 00 
3e93c     00 00 00 00 
3e940     00 00 00 00 | 	byte	$01, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e944     00 00 00 00 | 	byte	$00, $00, $00, $00
3e948     00 00 50 0D | 	long	(213 {__system___tx})<<20
3e94c     00 00 60 0D | 	long	(214 {__system___rx})<<20
3e950     00 00 00 00 | 	byte	$00, $00, $00, $00
3e954     00 00 70 0D | 	long	(215 {__system___rxtxioctl_0788})<<20
3e958     00 00 80 0D | 	long	(216 {__system____dummy_flush_0789})<<20
3e95c     00 00 00 00 
3e960     00 00 00 00 | 	byte	$00[8]
3e964     01 00 00 00 
3e968     02 80 00 00 
3e96c     00 00 00 00 
3e970     00 00 00 00 | 	byte	$01, $00, $00, $00, $02, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e974     00 00 00 00 
3e978     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3e97c     00 00 50 0D | 	long	(213 {__system___tx})<<20
3e980     00 00 60 0D | 	long	(214 {__system___rx})<<20
3e984     00 00 00 00 | 	byte	$00, $00, $00, $00
3e988     00 00 70 0D | 	long	(215 {__system___rxtxioctl_0788})<<20
3e98c     00 00 80 0D | 	long	(216 {__system____dummy_flush_0789})<<20
3e990     00 00 00 00 
3e994     00 00 00 00 | 	byte	$00[8]
3e998     01 00 00 00 
3e99c     02 80 00 00 
3e9a0     00 00 00 00 
3e9a4     00 00 00 00 | 	byte	$01, $00, $00, $00, $02, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e9a8     00 00 00 00 
3e9ac     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3e9b0     00 00 50 0D | 	long	(213 {__system___tx})<<20
3e9b4     00 00 60 0D | 	long	(214 {__system___rx})<<20
3e9b8     00 00 00 00 | 	byte	$00, $00, $00, $00
3e9bc     00 00 70 0D | 	long	(215 {__system___rxtxioctl_0788})<<20
3e9c0     00 00 80 0D | 	long	(216 {__system____dummy_flush_0789})<<20
3e9c4     00 00 00 00 
      ...             
3eb34     00 00 00 00 
3eb38     00 00 00 00 | 	byte	$00[376]
3eb3c     40 EB 03 00 | 	long	@@@__system__dat_ + 1856
3eb40     00 00 00 00 
3eb44     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3eb48                 | 	alignl
3eb48                 | _fatfs_cc_dat_
3eb48     C7 00 FC 00 
3eb4c     E9 00 E2 00 
3eb50     E4 00 E0 00 
3eb54     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
3eb58     EA 00 EB 00 
3eb5c     E8 00 EF 00 
3eb60     EE 00 EC 00 
3eb64     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
3eb68     C9 00 E6 00 
3eb6c     C6 00 F4 00 
3eb70     F6 00 F2 00 
3eb74     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
3eb78     FF 00 D6 00 
3eb7c     DC 00 F8 00 
3eb80     A3 00 D8 00 
3eb84     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
3eb88     E1 00 ED 00 
3eb8c     F3 00 FA 00 
3eb90     F1 00 D1 00 
3eb94     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
3eb98     BF 00 AE 00 
3eb9c     AC 00 BD 00 
3eba0     BC 00 A1 00 
3eba4     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
3eba8     91 25 92 25 
3ebac     93 25 02 25 
3ebb0     24 25 C1 00 
3ebb4     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
3ebb8     A9 00 63 25 
3ebbc     51 25 57 25 
3ebc0     5D 25 A2 00 
3ebc4     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
3ebc8     14 25 34 25 
3ebcc     2C 25 1C 25 
3ebd0     00 25 3C 25 
3ebd4     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
3ebd8     5A 25 54 25 
3ebdc     69 25 66 25 
3ebe0     60 25 50 25 
3ebe4     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
3ebe8     F0 00 D0 00 
3ebec     CA 00 CB 00 
3ebf0     C8 00 31 01 
3ebf4     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
3ebf8     CF 00 18 25 
3ebfc     0C 25 88 25 
3ec00     84 25 A6 00 
3ec04     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
3ec08     D3 00 DF 00 
3ec0c     D4 00 D2 00 
3ec10     F5 00 D5 00 
3ec14     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
3ec18     DE 00 DA 00 
3ec1c     DB 00 D9 00 
3ec20     FD 00 DD 00 
3ec24     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
3ec28     AD 00 B1 00 
3ec2c     17 20 BE 00 
3ec30     B6 00 A7 00 
3ec34     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
3ec38     B0 00 A8 00 
3ec3c     B7 00 B9 00 
3ec40     B3 00 B2 00 
3ec44     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
3ec48     61 00 1A 03 
3ec4c     E0 00 17 03 
3ec50     F8 00 07 03 
3ec54     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
3ec58     78 01 00 01 
3ec5c     30 01 32 01 
3ec60     06 01 39 01 
3ec64     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
3ec68     2E 01 79 01 
3ec6c     06 01 80 01 
3ec70     4D 00 43 02 
3ec74     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
3ec78     82 01 84 01 
3ec7c     84 01 86 01 
3ec80     87 01 87 01 
3ec84     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
3ec88     8B 01 8B 01 
3ec8c     8D 01 8E 01 
3ec90     8F 01 90 01 
3ec94     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
3ec98     93 01 94 01 
3ec9c     F6 01 96 01 
3eca0     97 01 98 01 
3eca4     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
3eca8     9B 01 9C 01 
3ecac     9D 01 20 02 
3ecb0     9F 01 A0 01 
3ecb4     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
3ecb8     A2 01 A4 01 
3ecbc     A4 01 A6 01 
3ecc0     A7 01 A7 01 
3ecc4     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
3ecc8     AB 01 AC 01 
3eccc     AC 01 AE 01 
3ecd0     AF 01 AF 01 
3ecd4     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
3ecd8     B3 01 B3 01 
3ecdc     B5 01 B5 01 
3ece0     B7 01 B8 01 
3ece4     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
3ece8     BB 01 BC 01 
3ecec     BC 01 BE 01 
3ecf0     F7 01 C0 01 
3ecf4     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
3ecf8     C3 01 C4 01 
3ecfc     C5 01 C4 01 
3ed00     C7 01 C8 01 
3ed04     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
3ed08     CB 01 CA 01 
3ed0c     CD 01 10 01 
3ed10     DD 01 01 00 
3ed14     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
3ed18     12 01 F3 01 
3ed1c     03 00 F1 01 
3ed20     F4 01 F4 01 
3ed24     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
3ed28     22 02 12 01 
3ed2c     3A 02 09 00 
3ed30     65 2C 3B 02 
3ed34     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
3ed38     66 2C 3F 02 
3ed3c     40 02 41 02 
3ed40     41 02 46 02 
3ed44     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
3ed48     40 00 81 01 
3ed4c     86 01 55 02 
3ed50     89 01 8A 01 
3ed54     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
3ed58     5A 02 90 01 
3ed5c     5C 02 5D 02 
3ed60     5E 02 5F 02 
3ed64     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
3ed68     62 02 94 01 
3ed6c     64 02 65 02 
3ed70     66 02 67 02 
3ed74     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
3ed78     6A 02 62 2C 
3ed7c     6C 02 6D 02 
3ed80     6E 02 9C 01 
3ed84     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
3ed88     9D 01 73 02 
3ed8c     74 02 9F 01 
3ed90     76 02 77 02 
3ed94     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
3ed98     7A 02 7B 02 
3ed9c     7C 02 64 2C 
3eda0     7E 02 7F 02 
3eda4     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
3eda8     82 02 A9 01 
3edac     84 02 85 02 
3edb0     86 02 87 02 
3edb4     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
3edb8     B1 01 B2 01 
3edbc     45 02 8D 02 
3edc0     8E 02 8F 02 
3edc4     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
3edc8     B7 01 7B 03 
3edcc     03 00 FD 03 
3edd0     FE 03 FF 03 
3edd4     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
3edd8     86 03 88 03 
3eddc     89 03 8A 03 
3ede0     B1 03 11 03 
3ede4     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
3ede8     A3 03 A3 03 
3edec     C4 03 08 03 
3edf0     CC 03 03 00 
3edf4     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
3edf8     8F 03 D8 03 
3edfc     18 01 F2 03 
3ee00     0A 00 F9 03 
3ee04     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
3ee08     F5 03 F6 03 
3ee0c     F7 03 F7 03 
3ee10     F9 03 FA 03 
3ee14     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
3ee18     20 03 50 04 
3ee1c     10 07 60 04 
3ee20     22 01 8A 04 
3ee24     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
3ee28     0E 01 CF 04 
3ee2c     01 00 C0 04 
3ee30     D0 04 44 01 
3ee34     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
3ee38     00 00 7D 1D 
3ee3c     01 00 63 2C 
3ee40     00 1E 96 01 
3ee44     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
3ee48     00 1F 08 06 
3ee4c     10 1F 06 06 
3ee50     20 1F 08 06 
3ee54     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
3ee58     40 1F 06 06 
3ee5c     51 1F 07 00 
3ee60     59 1F 52 1F 
3ee64     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
3ee68     5D 1F 56 1F 
3ee6c     5F 1F 60 1F 
3ee70     08 06 70 1F 
3ee74     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
3ee78     BB 1F C8 1F 
3ee7c     C9 1F CA 1F 
3ee80     CB 1F DA 1F 
3ee84     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
3ee88     F9 1F EA 1F 
3ee8c     EB 1F FA 1F 
3ee90     FB 1F 80 1F 
3ee94     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
3ee98     08 06 A0 1F 
3ee9c     08 06 B0 1F 
3eea0     04 00 B8 1F 
3eea4     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
3eea8     BC 1F CC 1F 
3eeac     01 00 C3 1F 
3eeb0     D0 1F 02 06 
3eeb4     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
3eeb8     E5 1F 01 00 
3eebc     EC 1F F3 1F 
3eec0     01 00 FC 1F 
3eec4     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
3eec8     32 21 70 21 
3eecc     10 02 84 21 
3eed0     01 00 83 21 
3eed4     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
3eed8     30 2C 2F 04 
3eedc     60 2C 02 01 
3eee0     67 2C 06 01 
3eee4     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
3eee8     80 2C 64 01 
3eeec     00 2D 26 08 
3eef0     41 FF 1A 03 
3eef4     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
3eef8     05 07 09 0E 
3eefc     10 12 14 16 
3ef00     18 1C 1E 43 
3ef04     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
3ef08     41 41 43 45 
3ef0c     45 45 49 49 
3ef10     49 41 41 45 
3ef14     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
3ef18     4F 55 55 59 
3ef1c     4F 55 4F 9C 
3ef20     4F 9E 9F 41 
3ef24     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
3ef28     A5 A6 A7 A8 
3ef2c     A9 AA AB AC 
3ef30     AD AE AF B0 
3ef34     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
3ef38     41 41 41 B8 
3ef3c     B9 BA BB BC 
3ef40     BD BE BF C0 
3ef44     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
3ef48     C5 41 41 C8 
3ef4c     C9 CA CB CC 
3ef50     CD CE CF D1 
3ef54     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
3ef58     49 49 49 49 
3ef5c     D9 DA DB DC 
3ef60     DD 49 DF 4F 
3ef64     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
3ef68     4F E6 E8 E8 
3ef6c     55 55 55 59 
3ef70     59 EE EF F0 
3ef74     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
3ef78     F5 F6 F7 F8 
3ef7c     F9 FA FB FC 
3ef80     FD FE FF 00 
3ef84     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
3ef88     00 00 00 00 
3ef8c     FF FF FF FF 
3ef90     1F 00 00 00 
3ef94     1C 00 00 00 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00
3ef98     1F 00 00 00 
3ef9c     1E 00 00 00 
3efa0     1F 00 00 00 
3efa4     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
3efa8     1F 00 00 00 
3efac     1F 00 00 00 
3efb0     1E 00 00 00 
3efb4     1F 00 00 00 | 	byte	$1f, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
3efb8     1E 00 00 00 
3efbc     1F 00 00 00 
3efc0     00 00 00 00 
3efc4     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00
3efc8     3B 00 00 00 
3efcc     5A 00 00 00 
3efd0     78 00 00 00 
3efd4     97 00 00 00 | 	byte	$3b, $00, $00, $00, $5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00
3efd8     B5 00 00 00 
3efdc     D4 00 00 00 
3efe0     F3 00 00 00 
3efe4     11 01 00 00 | 	byte	$b5, $00, $00, $00, $d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00
3efe8     30 01 00 00 
3efec     4E 01 00 00 
3eff0     6D 01 00 00 
3eff4     FF FF FF FF | 	byte	$30, $01, $00, $00, $4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff
3eff8     00 00 00 00 
      ...             
3f014     00 00 00 00 
3f018     00 00 00 00 | 	byte	$00[36]
3f01c     3A F0 03 00 | 	long	@@@_fatfs_cc_dat_ + 1266
3f020     3E F0 03 00 | 	long	@@@_fatfs_cc_dat_ + 1270
3f024     00 00 00 00 
3f028     00 00 00 00 
3f02c     00 00 00 00 
3f030     00 00 00 00 
3f034     00 00       | 	byte	$00[18]
3f036     3F 3F 3F 00 
3f03a     55 43 54 00 
3f03e     55 43 54 00 
3f042     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
3f046     00 00 00 00 
3f04a     00 00 00    | 	byte	$00[7]
3f04d     CA 9A 3B 00 
3f051     00 00 00 01 
3f055     01 01 01 01 
3f059     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
3f05d     91 11 11 11 
3f061     11 01 01 01 
3f065     01 01 01 01 
3f069     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
3f06d     01 01 01 01 
3f071     01 01 01    | 	byte	$01[7]
3f074     90 20 20 20 
3f078     20 20 20 20 
3f07c     20 20 20 20 
3f080     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
3f084     42 42 42 42 
3f088     42 42 42 42 
3f08c     42 42       | 	byte	$42[10]
3f08e     20 20 20 20 
3f092     20 20 20    | 	byte	$20[7]
3f095     44 44 44 44 
3f099     44 44       | 	byte	$44[6]
3f09b     04 04 04 04 
3f09f     04 04 04 04 
3f0a3     04 04 04 04 
3f0a7     04 04 04 04 
3f0ab     04 04 04 04 | 	byte	$04[20]
3f0af     20 20 20 20 
3f0b3     20 20       | 	byte	$20[6]
3f0b5     48 48 48 48 
3f0b9     48 48       | 	byte	$48[6]
3f0bb     08 08 08 08 
3f0bf     08 08 08 08 
3f0c3     08 08 08 08 
3f0c7     08 08 08 08 
3f0cb     08 08 08 08 | 	byte	$08[20]
3f0cf     20 20 20 20 
3f0d3     01 00 00 00 
3f0d7     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
3f0d8                 | __methodtable__
3f0d8     90 5A 01 00 | 	long	@_do_no_command
3f0dc     AC E3 01 00 | 	long	@_do_plus
3f0e0     30 D8 01 00 | 	long	@_do_minus
3f0e4     F0 E2 01 00 | 	long	@_do_or
3f0e8     F4 DC 01 00 | 	long	@_do_mul
3f0ec     A0 C8 01 00 | 	long	@_do_fdiv
3f0f0     CC C2 01 00 | 	long	@_do_and
3f0f4     88 C3 01 00 | 	long	@_do_div
3f0f8     70 DB 01 00 | 	long	@_do_mod
3f0fc     7C E8 01 00 | 	long	@_do_shl
3f100     38 E9 01 00 | 	long	@_do_shr
3f104     2C E7 01 00 | 	long	@_do_power
3f108     98 BA 01 00 | 	long	@_do_getvar
3f10c     D0 82 01 00 | 	long	@_do_push
3f110     24 B6 01 00 | 	long	@_do_assign
3f114     50 F5 00 00 | 	long	@_do_cls
3f118     68 54 01 00 | 	long	@_do_new
3f11c     74 7B 01 00 | 	long	@_do_plot
3f120     F8 16 01 00 | 	long	@_do_draw
3f124     7C 7D 01 00 | 	long	@_do_print
3f128     38 F3 00 00 | 	long	@_do_circle
3f12c     00 19 01 00 | 	long	@_do_fcircle
3f130     34 E2 00 00 | 	long	@_do_box
3f134     8C 21 01 00 | 	long	@_do_frame
3f138     9C F7 00 00 | 	long	@_do_color
3f13c     1C 1F 01 00 | 	long	@_do_for
3f140     CC 56 01 00 | 	long	@_do_next
3f144     74 43 01 00 | 	long	@_do_list
3f148     B4 99 01 00 | 	long	@_do_run
3f14c     2C 18 01 00 | 	long	@_do_error
3f150     78 2D 01 00 | 	long	@_do_fast_goto
3f154     68 2E 01 00 | 	long	@_do_find_goto
3f158     30 30 01 00 | 	long	@_do_slow_goto
3f15c     B0 5A 01 00 | 	long	@_do_nothing
3f160     D8 9D 01 00 | 	long	@_do_save
3f164     CC 45 01 00 | 	long	@_do_load
3f168     10 73 01 00 | 	long	@_do_pinwrite
3f16c     B8 B3 01 00 | 	long	@_do_waitms
3f170     98 B4 01 00 | 	long	@_do_waitvbl
3f174     98 32 01 00 | 	long	@_do_if
3f178     C4 17 01 00 | 	long	@_do_else
3f17c     0C C5 01 00 | 	long	@_do_eq
3f180     F0 C9 01 00 | 	long	@_do_ge
3f184     28 D1 01 00 | 	long	@_do_le
3f188     8C CD 01 00 | 	long	@_do_gt
3f18c     BC D4 01 00 | 	long	@_do_lt
3f190     5C DF 01 00 | 	long	@_do_ne
3f194     30 97 01 00 | 	long	@_do_rnd
3f198     10 E4 00 00 | 	long	@_do_brun
3f19c     74 DE 00 00 | 	long	@_do_beep
3f1a0     08 10 01 00 | 	long	@_do_dir
3f1a4     8C 6F 01 00 | 	long	@_do_paper
3f1a8     60 36 01 00 | 	long	@_do_ink
3f1ac     A0 1E 01 00 | 	long	@_do_font
3f1b0     E8 4E 01 00 | 	long	@_do_mode
3f1b4     24 53 01 00 | 	long	@_do_mouse
3f1b8     10 2C 01 00 | 	long	@_do_gettime
3f1bc     BC FC 00 00 | 	long	@_do_cursor
3f1c0     A8 F4 00 00 | 	long	@_do_click
3f1c4     E0 53 01 00 | 	long	@_do_mousex
3f1c8     24 54 01 00 | 	long	@_do_mousey
3f1cc     58 53 01 00 | 	long	@_do_mousek
3f1d0     9C 53 01 00 | 	long	@_do_mousew
3f1d4     8C A8 01 00 | 	long	@_do_sin
3f1d8     78 AB 01 00 | 	long	@_do_stick
3f1dc     78 AE 01 00 | 	long	@_do_strig
3f1e0     D0 A9 01 00 | 	long	@_do_sprite
3f1e4     40 0C 01 00 | 	long	@_do_defsprite
3f1e8     D8 29 01 00 | 	long	@_do_getpixel
3f1ec     94 B3 01 00 | 	long	@_do_waitclock
3f1f0     C0 DA 01 00 | 	long	@_do_negative
3f1f4     A4 87 01 00 | 	long	@_do_rdpin
3f1f8     40 99 01 00 | 	long	@_do_rqpin
3f1fc     44 71 01 00 | 	long	@_do_pinread
3f200     A4 B4 01 00 | 	long	@_do_wrpin
3f204     24 B5 01 00 | 	long	@_do_wxpin
3f208     A4 B5 01 00 | 	long	@_do_wypin
3f20c     84 70 01 00 | 	long	@_do_pinfloat
3f210     04 71 01 00 | 	long	@_do_pinlo
3f214     C4 70 01 00 | 	long	@_do_pinhi
3f218     C8 71 01 00 | 	long	@_do_pinstart
3f21c     D0 72 01 00 | 	long	@_do_pintoggle
3f220     F4 7C 01 00 | 	long	@_do_position
3f224     AC FB 00 00 | 	long	@_do_cos
3f228     F4 AF 01 00 | 	long	@_do_tan
3f22c     70 DD 00 00 | 	long	@_do_atn
3f230     74 DC 00 00 | 	long	@_do_asin
3f234     2C DA 00 00 | 	long	@_do_acos
3f238     98 AA 01 00 | 	long	@_do_sqr
3f23c     DC 19 01 00 | 	long	@_do_fill
3f240     64 05 01 00 | 	long	@_do_defsnd
3f244     BC FD 00 00 | 	long	@_do_defenv
3f248     7C 87 01 00 | 	long	@_do_rad
3f24c     A0 0E 01 00 | 	long	@_do_deg
3f250     E0 36 01 00 | 	long	@_do_int
3f254     98 73 01 00 | 	long	@_do_play
3f258     44 A3 01 00 | 	long	@_do_setdelay
3f25c     E4 A3 01 00 | 	long	@_do_setenv
3f260     84 A4 01 00 | 	long	@_do_setlen
3f264     24 A5 01 00 | 	long	@_do_setpan
3f268     64 A6 01 00 | 	long	@_do_setvol
3f26c     04 A7 01 00 | 	long	@_do_setwave
3f270     C4 A5 01 00 | 	long	@_do_setsustain
3f274     64 94 01 00 | 	long	@_do_release
3f278     10 28 01 00 | 	long	@_do_getenvsustain
3f27c     24 7C 01 00 | 	long	@_do_poke
3f280     60 16 01 00 | 	long	@_do_dpoke
3f284     6C 4B 01 00 | 	long	@_do_lpoke
3f288     14 70 01 00 | 	long	@_do_peek
3f28c     F0 15 01 00 | 	long	@_do_dpeek
3f290     FC 4A 01 00 | 	long	@_do_lpeek
3f294     DC 22 01 00 | 	long	@_do_fre
3f298     08 29 01 00 | 	long	@_do_getnotevalue
3f29c     44 BF 01 00 | 	long	@_do_getaddr
3f2a0     7C 33 01 00 | 	long	@_do_inkey
3f2a4     AC D9 00 00 | 	long	@_do_abs
3f2a8     74 31 01 00 | 	long	@_do_hex
3f2ac     10 E1 00 00 | 	long	@_do_bin
3f2b0     F0 B0 01 00 | 	long	@_do_val
3f2b4     58 F2 00 00 | 	long	@_do_chr
3f2b8     28 DB 00 00 | 	long	@_do_asc
3f2bc     A8 40 01 00 | 	long	@_do_left
3f2c0     C4 95 01 00 | 	long	@_do_right
3f2c4     8C 4C 01 00 | 	long	@_do_mid
3f2c8     14 42 01 00 | 	long	@_do_len
3f2cc     60 2C 01 00 | 	long	@_do_gosub
3f2d0     18 95 01 00 | 	long	@_do_return
3f2d4     E8 17 01 00 | 	long	@_do_end
3f2d8     BC 7C 01 00 | 	long	@_do_pop
3f2dc     BC 49 01 00 | 	long	@_do_log
3f2e0     B4 F0 00 00 | 	long	@_do_changevol
3f2e4     74 F1 00 00 | 	long	@_do_changewav
3f2e8     E0 EF 00 00 | 	long	@_do_changepan
3f2ec     08 EC 00 00 | 	long	@_do_changefreq
3f2f0     A4 A7 01 00 | 	long	@_do_shutup
3f2f4     EC 98 01 00 | 	long	@_do_round
3f2f8     1C 18 01 00 | 	long	@_do_enter
3f2fc     78 5B 01 00 | 	long	@_do_open
3f300     D4 F4 00 00 | 	long	@_do_close
3f304     40 23 01 00 | 	long	@_do_get
3f308     EC 83 01 00 | 	long	@_do_put
3f30c     48 E6 00 00 | 	long	@_do_cd
3f310     C8 0E 01 00 | 	long	@_do_delete
3f314     28 4E 01 00 | 	long	@_do_mkdir
3f318     64 DF 00 00 | 	long	@_do_blit
3f31c     A8 22 01 00 | 	long	@_do_framebuf
3f320     B4 5A 01 00 | 	long	@_do_on
3f324     88 A9 01 00 | 	long	@_do_skip
3f328     9C 37 01 00 | 	long	@_do_input
3f32c     0C 8A 01 00 | 	long	@_do_read
3f330     D8 94 01 00 | 	long	@_do_restore
3f334     F0 68 01 00 | 	long	@_do_padx
3f338     24 6B 01 00 | 	long	@_do_pady
3f33c     58 6D 01 00 | 	long	@_do_padz
3f340     EC 5D 01 00 | 	long	@_do_padrx
3f344     20 60 01 00 | 	long	@_do_padry
3f348     54 62 01 00 | 	long	@_do_padrz
3f34c     BC 66 01 00 | 	long	@_do_padw
3f350     88 64 01 00 | 	long	@_do_pads
3f354     D4 F7 00 00 | 	long	@_do_copy
3f358     90 F5 00 00 | 	long	@_do_coginit
3f35c     5C F7 00 00 | 	long	@_do_cogstop
3f360     04 4C 01 00 | 	long	@_do_memlo
3f364     48 4C 01 00 | 	long	@_do_memtop
3f368     68 A1 01 00 | 	long	@_do_setcolor
3f36c     18 27 01 00 | 	long	@_do_getcolor
3f370     F0 FC 00 00 | 	long	@_do_defchar
3f374     10 95 01 00 | 	long	@_do_restorepalette
3f378     E4 1A 01 00 | 	long	@_do_findfirst
3f37c     E4 1D 01 00 | 	long	@_do_findnext
3f380     C8 A0 01 00 | 	long	@_do_setamode
3f384     04 2B 01 00 | 	long	@_do_getrealfreq
3f388     F4 AC 01 00 | 	long	@_do_str
3f38c     80 2B 02 00 | 	long	@_Hg010b_4_spin2_putchar
3f390     DC 23 03 00 | 	long	@__system___struct___bas_wrap_sender_tx_
3f394     20 24 03 00 | 	long	@__system___struct___bas_wrap_sender_rx_
3f398     68 24 03 00 | 	long	@__system___struct___bas_wrap_sender_close_
3f39c     0C 23 03 00 | 	long	@__system___struct__s_vfs_file_t_putchar_
3f3a0     7C 23 03 00 | 	long	@__system___struct__s_vfs_file_t_getchar_
3f3a4     C4 22 03 00 | 	long	@__system____strs_cl_pfunc_
3f3a8     6C 99 02 00 | 	long	@__system____root_opendir
3f3ac     08 9A 02 00 | 	long	@__system____root_closedir
3f3b0     84 99 02 00 | 	long	@__system____root_readdir
3f3b4     10 9A 02 00 | 	long	@__system____root_stat
3f3b8     D4 91 02 00 | 	long	@__system____default_putc
3f3bc     50 91 02 00 | 	long	@__system____default_getc
3f3c0     80 92 02 00 | 	long	@__system____default_flush
3f3c4     14 16 03 00 | 	long	@_fatfs_cc_v_close
3f3c8     FC 18 03 00 | 	long	@_fatfs_cc_v_read
3f3cc     88 19 03 00 | 	long	@_fatfs_cc_v_write
3f3d0     00 1A 03 00 | 	long	@_fatfs_cc_v_lseek
3f3d4     9C 1A 03 00 | 	long	@_fatfs_cc_v_ioctl
3f3d8     C8 1B 03 00 | 	long	@_fatfs_cc_v_flush
3f3dc     F0 1A 03 00 | 	long	@_fatfs_cc_v_open
3f3e0     80 15 03 00 | 	long	@_fatfs_cc_v_creat
3f3e4     50 16 03 00 | 	long	@_fatfs_cc_v_opendir
3f3e8     C4 16 03 00 | 	long	@_fatfs_cc_v_closedir
3f3ec     04 17 03 00 | 	long	@_fatfs_cc_v_readdir
3f3f0     D0 17 03 00 | 	long	@_fatfs_cc_v_stat
3f3f4     B0 1A 03 00 | 	long	@_fatfs_cc_v_mkdir
3f3f8     D0 1A 03 00 | 	long	@_fatfs_cc_v_rmdir
3f3fc     C0 1A 03 00 | 	long	@_fatfs_cc_v_remove
3f400     E0 1A 03 00 | 	long	@_fatfs_cc_v_rename
3f404     14 1C 03 00 | 	long	@_fatfs_cc_v_init
3f408     1C 1C 03 00 | 	long	@_fatfs_cc_v_deinit
3f40c     14 BA 02 00 | 	long	@_sdmm_cc_v_read
3f410     20 BA 02 00 | 	long	@_sdmm_cc_v_write
3f414     FC BA 02 00 | 	long	@_sdmm_cc_v_close
3f418     2C BA 02 00 | 	long	@_sdmm_cc_v_ioctl
3f41c     F4 BA 02 00 | 	long	@_sdmm_cc_v_flush
3f420     50 BA 02 00 | 	long	@_sdmm_cc_v_lseek
3f424     24 BB 02 00 | 	long	@_sdmm_cc_v_putc
3f428     70 BB 02 00 | 	long	@_sdmm_cc_v_getc
3f42c     D0 4A 02 00 | 	long	@__system___tx
3f430     10 4B 02 00 | 	long	@__system___rx
3f434     3C A4 02 00 | 	long	@__system___rxtxioctl_0788
3f438     94 A4 02 00 | 	long	@__system____dummy_flush_0789
3f43c                 | __heap_base
3f43c     00 00 00 00 
      ...             
56b3c     00 00 00 00 
56b40     00 00 00 00 | 	long	0[24002]
56b44                 | objmem
56b44     00 00 00 00 
      ...             
61438     00 00 00 00 
6143c     00 00 00 00 | 	long	0[10815]
61440                 | stackspace
61440     00 00 00 00 | 	long	0[1]
61444 140             | 	org	COG_BSS_START
61444 140             | _var01
61444 140             | 	res	1
61444 141             | _var02
61444 141             | 	res	1
61444 142             | _var03
61444 142             | 	res	1
61444 143             | _var04
61444 143             | 	res	1
61444 144             | _var05
61444 144             | 	res	1
61444 145             | _var06
61444 145             | 	res	1
61444 146             | _var07
61444 146             | 	res	1
61444 147             | _var08
61444 147             | 	res	1
61444 148             | _var09
61444 148             | 	res	1
61444 149             | arg01
61444 149             | 	res	1
61444 14a             | arg02
61444 14a             | 	res	1
61444 14b             | arg03
61444 14b             | 	res	1
61444 14c             | arg04
61444 14c             | 	res	1
61444 14d             | arg05
61444 14d             | 	res	1
61444 14e             | arg06
61444 14e             | 	res	1
61444 14f             | arg07
61444 14f             | 	res	1
61444 150             | arg08
61444 150             | 	res	1
61444 151             | arg09
61444 151             | 	res	1
61444 152             | arg10
61444 152             | 	res	1
61444 153             | local01
61444 153             | 	res	1
61444 154             | local02
61444 154             | 	res	1
61444 155             | local03
61444 155             | 	res	1
61444 156             | local04
61444 156             | 	res	1
61444 157             | local05
61444 157             | 	res	1
61444 158             | local06
61444 158             | 	res	1
61444 159             | local07
61444 159             | 	res	1
61444 15a             | local08
61444 15a             | 	res	1
61444 15b             | local09
61444 15b             | 	res	1
61444 15c             | local10
61444 15c             | 	res	1
61444 15d             | local11
61444 15d             | 	res	1
61444 15e             | local12
61444 15e             | 	res	1
61444 15f             | local13
61444 15f             | 	res	1
61444 160             | local14
61444 160             | 	res	1
61444 161             | local15
61444 161             | 	res	1
61444 162             | local16
61444 162             | 	res	1
61444 163             | local17
61444 163             | 	res	1
61444 164             | local18
61444 164             | 	res	1
61444 165             | local19
61444 165             | 	res	1
61444 166             | local20
61444 166             | 	res	1
61444 167             | local21
61444 167             | 	res	1
61444 168             | local22
61444 168             | 	res	1
61444 169             | local23
61444 169             | 	res	1
61444 16a             | local24
61444 16a             | 	res	1
61444 16b             | local25
61444 16b             | 	res	1
61444 16c             | local26
61444 16c             | 	res	1
61444 16d             | local27
61444 16d             | 	res	1
61444 16e             | local28
61444 16e             | 	res	1
61444 16f             | local29
61444 16f             | 	res	1
61444 170             | local30
61444 170             | 	res	1
61444 171             | local31
61444 171             | 	res	1
61444 172             | local32
61444 172             | 	res	1
61444 173             | local33
61444 173             | 	res	1
61444 174             | local34
61444 174             | 	res	1
61444 175             | local35
61444 175             | 	res	1
61444 176             | local36
61444 176             | 	res	1
61444 177             | local37
61444 177             | 	res	1
61444 178             | local38
61444 178             | 	res	1
61444 179             | local39
61444 179             | 	res	1
61444 17a             | local40
61444 17a             | 	res	1
61444 17b             | local41
61444 17b             | 	res	1
61444 17c             | local42
61444 17c             | 	res	1
61444 17d             | local43
61444 17d             | 	res	1
61444 17e             | local44
61444 17e             | 	res	1
61444 17f             | local45
61444 17f             | 	res	1
61444 180             | local46
61444 180             | 	res	1
61444 181             | local47
61444 181             | 	res	1
61444 182             | local48
61444 182             | 	res	1
61444 183             | local49
61444 183             | 	res	1
61444 184             | local50
61444 184             | 	res	1
61444 185             | local51
61444 185             | 	res	1
61444 186             | local52
61444 186             | 	res	1
61444 187             | muldiva_
61444 187             | 	res	1
61444 188             | muldivb_
61444 188             | 	res	1
61444 189             | 	fit	480
61444 189             | 
