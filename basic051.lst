00000                 | 
00000                 | #line 1 "D:/Programowanie/P2-Retromachine-Basic/basic051.p2asm"
00000                 | con
00000                 | 	_clkfreq = 338695652
00000                 | 	_clkmode = 28773115
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	HEAPSIZE = 96000
00000                 | 	ver = 49
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_channel = 44
00000                 | 	token_skip = 45
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_gosub = 169
00000                 | 	token_return = 170
00000                 | 	token_progend = 171
00000                 | 	token_pop = 172
00000                 | 	token_log = 173
00000                 | 	token_changefreq = 174
00000                 | 	token_changevol = 175
00000                 | 	token_changewave = 176
00000                 | 	token_changepan = 177
00000                 | 	token_shutup = 178
00000                 | 	token_open = 179
00000                 | 	token_close = 180
00000                 | 	token_input = 181
00000                 | 	token_read = 182
00000                 | 	token_data = 183
00000                 | 	token_blit = 185
00000                 | 	token_get = 187
00000                 | 	token_put = 188
00000                 | 	token_enter = 189
00000                 | 	token_rem = 190
00000                 | 	token_round = 191
00000                 | 	token_coginit = 192
00000                 | 	token_on = 193
00000                 | 	token_delete = 194
00000                 | 	token_cd = 195
00000                 | 	token_copy = 196
00000                 | 	token_framebuf = 197
00000                 | 	token_mkdir = 198
00000                 | 	token_restore = 199
00000                 | 	token_padx = 200
00000                 | 	token_pady = 201
00000                 | 	token_padz = 202
00000                 | 	token_padh = 203
00000                 | 	token_padrx = 204
00000                 | 	token_padry = 205
00000                 | 	token_padrz = 206
00000                 | 	token_cogstop = 207
00000                 | 	token_memlo = 208
00000                 | 	token_memtop = 209
00000                 | 	token_setcolor = 210
00000                 | 	token_getcolor = 211
00000                 | 	token_restorepalette = 212
00000                 | 	token_pads = 213
00000                 | 	token_padw = 214
00000                 | 	token_findfirst = 215
00000                 | 	token_findnext = 216
00000                 | 	token_defchar = 217
00000                 | 	token_setamode = 218
00000                 | 	token_getrealfreq = 219
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	result_channel = 44
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1024
00000                 | 	maxstack = 512
00000                 | 	maxfor = 64
00000                 | 	maxgosub = 64
00000                 | 	memlo = 524288
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 338695652
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1b70afb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 7A 06 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 03 90 5D |  if_ne	jmp	#spininit
0040c 002 3C F1 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 02 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 85 DB 80 FF 
00420 007 00 F0 65 FD | 	hubset	##28773112
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 85 DB 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##28773115
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 0A 18 8A FF 
00440 00f 14 C8 6F FC | 	wrlong	##338695652, #20
00444 010 BC 02 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
006fc 0be 00 00 00 00 
00700 0bf 00 00 00 00 | 	orgf	192
00704 0c0             | skip_clock_set_
00704 0c0 28 14 A2 FD | 	call	#_program
00708 0c1             | cogexit
00708 0c1 38 01 80 FF 
0070c 0c2 1F 00 66 FD | 	waitx	##160000
00710 0c3 01 92 62 FD | 	cogid	arg01
00714 0c4 03 92 62 FD | 	cogstop	arg01
00718 0c5             | spininit
00718 0c5 61 65 06 FB | 	rdlong	objptr, ptra++
0071c 0c6 61 7B 06 FB | 	rdlong	result1, ptra++
00720 0c7 28 06 64 FD | 	setq	#3
00724 0c8 00 93 06 FB | 	rdlong	arg01, ptra
00728 0c9 04 F0 87 F1 | 	sub	ptra, #4
0072c 0ca 2D 7A 62 FD | 	call	result1
00730 0cb D4 FF 9F FD | 	jmp	#cogexit
00734 0cc             | FCACHE_LOAD_
00734 0cc F9 AD 01 F6 |     mov	fcache_tmpb_,ptrb
00738 0cd 2B F2 63 FD |     pop	ptrb
0073c 0ce D5 EC 8B F9 |     altd	pa,ret_instr_
00740 0cf D5 00 00 F6 |     mov	 0-0, ret_instr_
00744 0d0 28 EC 63 FD |     setq	pa
00748 0d1 E1 01 04 FB |     rdlong	$0, ptrb++
0074c 0d2 2A F2 63 FD |     push	ptrb
00750 0d3 D6 F2 03 F6 |     mov ptrb,fcache_tmpb_
00754 0d4 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00758 0d5             | ret_instr_
00758 0d5 00 FE 07 02 |     _ret_ cmp inb,#0
0075c 0d6             | fcache_tmpb_
0075c 0d6 00 00 00 00 |     long 0
00760 0d7             | fcache_load_ptr_
00760 0d7 CC 00 00 00 |     long FCACHE_LOAD_
00764 0d8             | builtin_bytefill_
00764 0d8 01 96 56 F0 |         shr	arg03, #1 wc
00768 0d9 49 95 42 CC |  if_c   wrbyte	arg02, arg01
0076c 0da 01 92 06 C1 |  if_c   add	arg01, #1
00770 0db 00 94 FE F9 |         movbyts	arg02, #0
00774 0dc             | builtin_wordfill_
00774 0dc 01 96 56 F0 |         shr	arg03, #1 wc
00778 0dd 49 95 52 CC |  if_c   wrword	arg02, arg01
0077c 0de 02 92 06 C1 |  if_c   add	arg01, #2
00780 0df 4A 95 2A F9 |         setword	arg02, arg02, #1
00784 0e0             | builtin_longfill_
00784 0e0 49 01 88 FC |         wrfast	#0,arg01
00788 0e1 00 96 0E F2 |         cmp	arg03, #0 wz
0078c 0e2 4B 03 D8 5C |  if_nz  rep	#1, arg03
00790 0e3 17 94 62 5D |  if_nz  wflong	arg02
00794 0e4 2D 00 64 FD |         ret
00798 0e5             | COUNT_
00798 0e5 00 00 00 00 |     long 0
0079c 0e6             | RETADDR_
0079c 0e6 00 00 00 00 |     long 0
007a0 0e7             | fp
007a0 0e7 00 00 00 00 |     long 0
007a4 0e8             | pushregs_
007a4 0e8 2B EC 63 FD |     pop  pa
007a8 0e9 2B CC 61 FD |     pop  RETADDR_
007ac 0ea 03 CA 95 FB |     tjz  COUNT_, #pushregs_done_
007b0 0eb FF CB 8D F9 |     altd  COUNT_, #511
007b4 0ec 28 00 64 FD |     setq #0-0
007b8 0ed 61 A7 66 FC |     wrlong local01, ptra++
007bc 0ee             | pushregs_done_
007bc 0ee 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
007c0 0ef 61 CB 65 FC |     wrlong COUNT_, ptra++
007c4 0f0 F8 CF 01 F6 |     mov    fp, ptra
007c8 0f1 2C EC 63 FD |     jmp  pa
007cc 0f2             |  popregs_
007cc 0f2 2B EC 63 FD |     pop    pa
007d0 0f3 28 04 64 FD |     setq   #2
007d4 0f4 5F CB 05 FB |     rdlong COUNT_, --ptra
007d8 0f5 02 CA 75 FB |     djf    COUNT_, #popregs__ret
007dc 0f6 28 CA 61 FD |     setq   COUNT_
007e0 0f7 5F A7 06 FB |     rdlong local01, --ptra
007e4 0f8             | popregs__ret
007e4 0f8 2A CC 61 FD |     push   RETADDR_
007e8 0f9 2C EC 63 FD |     jmp    pa
007ec 0fa             | 
007ec 0fa             | divide_
007ec 0fa 88 11 5B F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
007f0 0fb 6C 62 62 FD |        wrc     itmp2_                         'store sign of y
007f4 0fc 87 0F 53 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
007f8 0fd 88 0F 13 FD |        qdiv    muldiva_, muldivb_             'queue divide
007fc 0fe 01 62 66 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00800 0ff 18 10 63 FD |        getqx   muldivb_                       'get quotient
00804 100 19 0E 63 FD |        getqy   muldiva_                       'get remainder
00808 101 87 0F 83 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0080c 102 00 62 16 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00810 103 88 11 83 06 |  _ret_ negc    muldivb_,muldivb_     
00814 104             | __pc long 0
00814 104 00 00 00 00 
00818 105             | __setjmp
00818 105 2B 08 62 FD |     pop __pc
0081c 106 00 7A 06 F6 |     mov result1, #0
00820 107 00 7C 06 F6 |     mov result2, #0
00824 108 49 5D 02 F6 |     mov abortchain, arg01
00828 109 49 CF 61 FC |     wrlong fp, arg01
0082c 10a 04 92 06 F1 |     add arg01, #4
00830 10b 49 F1 63 FC |     wrlong ptra, arg01
00834 10c 04 92 06 F1 |     add arg01, #4
00838 10d 49 65 62 FC |     wrlong objptr, arg01
0083c 10e 04 92 06 F1 |     add arg01, #4
00840 10f 49 09 62 FC |     wrlong __pc, arg01
00844 110 2C 08 62 FD |     jmp __pc
00848 111             | __unwind_pc long 0
00848 111 00 00 00 00 
0084c 112             | __unwind_stack
0084c 112 2B 22 62 FD |    pop  __unwind_pc
00850 113             | __unwind_loop
00850 113 4A 93 0A F2 |    cmp  arg01, arg02 wz
00854 114 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00858 115 49 F1 03 F6 |    mov   ptra, arg01
0085c 116 6C FF BF FD |    call  #popregs_
00860 117 E7 92 02 F6 |    mov   arg01, fp
00864 118 E8 FF 9F FD |    jmp   #__unwind_loop
00868 119             | __unwind_stack_ret
00868 119 2C 22 62 FD |    jmp  __unwind_pc
0086c 11a             | __longjmp
0086c 11a 2B 08 62 FD |     pop __pc
00870 11b 00 92 0E F2 |     cmp    arg01, #0 wz
00874 11c 30 00 90 AD |  if_z jmp #nocatch
00878 11d 4A 7B 02 F6 |     mov result1, arg02
0087c 11e 01 7C 06 F6 |     mov result2, #1
00880 11f 49 95 02 FB |     rdlong arg02, arg01
00884 120 04 92 06 F1 |     add arg01, #4
00888 121 49 F1 03 FB |     rdlong ptra, arg01
0088c 122 04 92 06 F1 |     add arg01, #4
00890 123 49 65 02 FB |     rdlong objptr, arg01
00894 124 04 92 06 F1 |     add arg01, #4
00898 125 49 09 02 FB |     rdlong __pc, arg01
0089c 126 E7 92 02 F6 |     mov arg01, fp
008a0 127 A8 FF BF FD |     call #__unwind_stack
008a4 128             | __longjmp_ret
008a4 128 2C 08 62 FD |     jmp  __pc
008a8 129             | nocatch
008a8 129 00 96 0E F2 |     cmp arg03, #0 wz
008ac 12a 58 FE 9F AD |  if_z jmp #cogexit
008b0 12b F0 FF 9F FD |     jmp #__longjmp_ret
008b4 12c             | 
008b4 12c             | __heap_ptr
008b4 12c E0 F9 03 00 | 	long	@__heap_base
008b8 12d             | __methods__
008b8 12d 7C F6 03 00 | 	long	@__methodtable__
008bc 12e             | abortchain
008bc 12e 00 00 00 00 | 	long	0
008c0 12f             | entryptr__
008c0 12f 04 04 00 00 | 	long	@entry
008c4 130             | itmp1_
008c4 130 00 00 00 00 | 	long	0
008c8 131             | itmp2_
008c8 131 00 00 00 00 | 	long	0
008cc 132             | objptr
008cc 132 E8 70 05 00 | 	long	@objmem
008d0 133             | ptr__Audio2_004_spin2_dat__
008d0 133 D0 E5 03 00 | 	long	@_Audio2_004_spin2_dat_
008d4 134             | ptr___system__dat__
008d4 134 A4 E9 03 00 | 	long	@__system__dat_
008d8 135             | ptr__dat__
008d8 135 A0 3A 03 00 | 	long	@_dat_
008dc 136             | ptr__fatfs_cc_dat__
008dc 136 EC F0 03 00 | 	long	@_fatfs_cc_dat_
008e0 137             | ptr__hg010b_spin2_dat__
008e0 137 08 6C 03 00 | 	long	@_hg010b_spin2_dat_
008e4 138             | ptr__housekeeper_
008e4 138 E4 15 00 00 | 	long	@_housekeeper
008e8 139             | ptr__psram16drv_spin2_dat__
008e8 139 B8 AB 03 00 | 	long	@_psram16drv_spin2_dat_
008ec 13a             | ptr__psram_spin2_dat__
008ec 13a 70 A9 03 00 | 	long	@_psram_spin2_dat_
008f0 13b             | ptr__usbnew_spin2_dat__
008f0 13b 48 BB 03 00 | 	long	@_usbnew_spin2_dat_
008f4 13c             | ptr_stackspace_
008f4 13c C0 19 06 00 | 	long	@stackspace
008f8 13d             | result1
008f8 13d 00 00 00 00 | 	long	0
008fc 13e             | result2
008fc 13e 01 00 00 00 | 	long	1
00900 13f             | result3
00900 13f 02 00 00 00 | 	long	2
00904 140             | COG_BSS_START
00904 140             | 	fit	480
00904                 | 	orgh
00904                 | hubentry
00904                 | 
00904                 | ' 
00904                 | ' '-------------------------------------------------------------------------------------------------------- 
00904                 | ' '------------------------------------ MAIN LOOP END -----------------------------------------------------
00904                 | ' '--------------------------------------------------------------------------------------------------------
00904                 | ' 
00904                 | ' ''-------------------------------------------------------------------------------------------------------
00904                 | ' '                     A full screen editor for programming and entering data
00904                 | ' ''-------------------------------------------------------------------------------------------------------
00904                 | ' 
00904                 | ' function edit() as string
00904                 | _edit
00904     1B CA 05 F6 | 	mov	COUNT_, #27
00908     E8 00 A0 FD | 	call	#pushregs_
0090c     00 A6 06 F6 | 	mov	local01, #0
00910     00 A8 06 F6 | 	mov	local02, #0
00914     00 AA 06 F6 | 	mov	local03, #0
00918     00 AC 06 F6 | 	mov	local04, #0
0091c                 | ' rpt=0 : rptcnt=0 : key=0 : key2=0 : key3=0 : key4=0 
0091c                 | ' do
0091c                 | LR__0001
0091c     01 92 06 F6 | 	mov	arg01, #1
00920     20 24 B2 FD | 	call	#_hg010b_spin2_waitvbl
00924     88 38 B2 FD | 	call	#_usbnew_spin2_get_key
00928     3D AF 02 F6 | 	mov	local05, result1
0092c                 | '   return hkbd_led_rep
0092c     13 00 00 FF 
00930     E0 77 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##10208
00934     3B 7B C2 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
00938     13 00 00 FF 
0093c     E0 77 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10208
00940     54 00 00 FF 
00944     98 64 06 F1 | 	add	objptr, ##43160
00948     32 7B 62 FC | 	wrlong	result1, objptr
0094c     54 00 00 FF 
00950     98 64 86 F1 | 	sub	objptr, ##43160
00954                 | ' if key>0 andalso key<4 andalso keyclick=1 then audio.play16(7,@atari2_spl,43,4096,1758,0,300) : audio.stop(7)
00954     01 AE 16 F2 | 	cmp	local05, #1 wc
00958     88 00 90 CD |  if_b	jmp	#LR__0002
0095c     04 AE 16 F2 | 	cmp	local05, #4 wc
00960     80 00 90 3D |  if_ae	jmp	#LR__0002
00964     52 00 00 FF 
00968     BC 64 06 F1 | 	add	objptr, ##42172
0096c     32 B1 02 FB | 	rdlong	local06, objptr
00970     52 00 00 FF 
00974     BC 64 86 F1 | 	sub	objptr, ##42172
00978     01 B0 0E F2 | 	cmp	local06, #1 wz
0097c     64 00 90 5D |  if_ne	jmp	#LR__0002
00980     35 95 02 F6 | 	mov	arg02, ptr__dat__
00984     04 00 00 FF 
00988     A4 94 06 F1 | 	add	arg02, ##2212
0098c     2B B2 06 F6 | 	mov	local07, #43
00990     0C B4 C6 F9 | 	decod	local08, #12
00994     03 00 00 FF 
00998     DE B6 06 F6 | 	mov	local09, ##1758
0099c     00 B8 06 F6 | 	mov	local10, #0
009a0     2C BB 06 F6 | 	mov	local11, #300
009a4     07 92 06 F6 | 	mov	arg01, #7
009a8     2B 96 06 F6 | 	mov	arg03, #43
009ac     0C 98 C6 F9 | 	decod	arg04, #12
009b0     03 00 00 FF 
009b4     DE 9A 06 F6 | 	mov	arg05, ##1758
009b8     00 9C 06 F6 | 	mov	arg06, #0
009bc     2C 9F 06 F6 | 	mov	arg07, #300
009c0     0B 00 00 FF 
009c4     CC 64 06 F1 | 	add	objptr, ##5836
009c8     34 3F B2 FD | 	call	#_Audio2_004_spin2_play16
009cc     07 B0 06 F6 | 	mov	local06, #7
009d0                 | ' 
009d0                 | ' base2:=@channel0[0]+64*channel
009d0     32 BD 02 F6 | 	mov	local12, objptr
009d4                 | ' word[base2+32]:=0
009d4     EC BD 06 F1 | 	add	local12, #492
009d8     5E 01 58 FC | 	wrword	#0, local12
009dc     0B 00 00 FF 
009e0     CC 64 86 F1 | 	sub	objptr, ##5836
009e4                 | LR__0002
009e4                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then key2=key : rpt=1 : key3=key2 
009e4     04 AE 16 F2 | 	cmp	local05, #4 wc
009e8     20 00 90 CD |  if_b	jmp	#LR__0003
009ec     00 00 40 FF 
009f0     00 AE 16 F2 | 	cmp	local05, ##-2147483648 wc
009f4     57 B1 02 C6 |  if_b	mov	local06, local05
009f8     58 B1 E2 C8 |  if_b	getbyte	local06, local06, #0
009fc     E0 B0 16 C2 |  if_b	cmp	local06, #224 wc
00a00     57 AB 02 C6 |  if_b	mov	local03, local05
00a04     01 A6 06 C6 |  if_b	mov	local01, #1
00a08     55 AD 02 C6 |  if_b	mov	local04, local03
00a0c                 | LR__0003
00a0c                 | ' if key>$80000000 then rptcnt=0 : rpt=0
00a0c     00 00 40 FF 
00a10     01 AE 16 F2 | 	cmp	local05, ##-2147483647 wc
00a14     00 A8 06 36 |  if_ae	mov	local02, #0
00a18     00 A6 06 36 |  if_ae	mov	local01, #0
00a1c                 | ' if key=0 andalso rpt=1 then rptcnt+=1
00a1c     00 AE 0E F2 | 	cmp	local05, #0 wz
00a20     01 A6 0E A2 |  if_e	cmp	local01, #1 wz
00a24     01 A8 06 A1 |  if_e	add	local02, #1
00a28                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
00a28     00 00 40 FF 
00a2c     00 AE 16 F2 | 	cmp	local05, ##-2147483648 wc
00a30     19 A8 0E C2 |  if_b	cmp	local02, #25 wz
00a34     55 AD 02 86 |  if_c_and_z	mov	local04, local03
00a38     15 A8 06 86 |  if_c_and_z	mov	local02, #21
00a3c                 | ' 
00a3c                 | ' '' there is a key pressed and it needs to be processed
00a3c                 | ' 
00a3c                 | ' if key3<>0 then
00a3c     00 AC 0E F2 | 	cmp	local04, #0 wz
00a40     D8 FE 9F AD |  if_e	jmp	#LR__0001
00a44                 | '   if keyclick=1 then audio.play16(7,keyclick_spl,43,4096,spl_len,spl_len,0) ' make a click
00a44     52 00 00 FF 
00a48     BC 64 06 F1 | 	add	objptr, ##42172
00a4c     32 B1 02 FB | 	rdlong	local06, objptr
00a50     52 00 00 FF 
00a54     BC 64 86 F1 | 	sub	objptr, ##42172
00a58     01 B0 0E F2 | 	cmp	local06, #1 wz
00a5c     50 00 90 5D |  if_ne	jmp	#LR__0004
00a60     54 00 00 FF 
00a64     5C 64 06 F1 | 	add	objptr, ##43100
00a68     32 95 02 FB | 	rdlong	arg02, objptr
00a6c     2B B2 06 F6 | 	mov	local07, #43
00a70     0C B4 C6 F9 | 	decod	local08, #12
00a74     04 64 86 F1 | 	sub	objptr, #4
00a78     32 B9 02 FB | 	rdlong	local10, objptr
00a7c     5C B7 02 F6 | 	mov	local09, local10
00a80     00 BA 06 F6 | 	mov	local11, #0
00a84     07 92 06 F6 | 	mov	arg01, #7
00a88     2B 96 06 F6 | 	mov	arg03, #43
00a8c     0C 98 C6 F9 | 	decod	arg04, #12
00a90     5B 9B 02 F6 | 	mov	arg05, local09
00a94     5C 9D 02 F6 | 	mov	arg06, local10
00a98     00 9E 06 F6 | 	mov	arg07, #0
00a9c     48 00 00 FF 
00aa0     8C 65 86 F1 | 	sub	objptr, ##37260
00aa4     58 3E B2 FD | 	call	#_Audio2_004_spin2_play16
00aa8     0B 00 00 FF 
00aac     CC 64 86 F1 | 	sub	objptr, ##5836
00ab0                 | LR__0004
00ab0     56 93 02 F6 | 	mov	arg01, local04
00ab4     CC 08 B2 FD | 	call	#_scantochar
00ab8     3D BF 02 F6 | 	mov	local13, result1
00abc                 | '   if leds and 2 = 2 then 						' caps lock
00abc     54 00 00 FF 
00ac0     98 64 06 F1 | 	add	objptr, ##43160
00ac4     32 C1 02 FB | 	rdlong	local14, objptr
00ac8     54 00 00 FF 
00acc     98 64 86 F1 | 	sub	objptr, ##43160
00ad0     60 B1 0A F6 | 	mov	local06, local14 wz
00ad4     4C 00 90 AD |  if_e	jmp	#LR__0012
00ad8                 | '     if key4>96 andalso key4<123 then                 
00ad8     61 BE 16 F2 | 	cmp	local13, #97 wc
00adc     0C 00 90 CD |  if_b	jmp	#LR__0005
00ae0     7B BE 16 F2 | 	cmp	local13, #123 wc
00ae4     20 BE 86 C1 |  if_b	sub	local13, #32
00ae8     38 00 90 CD |  if_b	jmp	#LR__0011
00aec                 | LR__0005
00aec     41 BE 16 F2 | 	cmp	local13, #65 wc
00af0     0C 00 90 CD |  if_b	jmp	#LR__0006
00af4     5B BE 16 F2 | 	cmp	local13, #91 wc
00af8     20 BE 06 C1 |  if_b	add	local13, #32
00afc     24 00 90 CD |  if_b	jmp	#LR__0010
00b00                 | LR__0006
00b00     17 BE 16 F2 | 	cmp	local13, #23 wc
00b04     0C 00 90 CD |  if_b	jmp	#LR__0007
00b08     20 BE 16 F2 | 	cmp	local13, #32 wc
00b0c     09 BE 86 C1 |  if_b	sub	local13, #9
00b10     10 00 90 CD |  if_b	jmp	#LR__0009
00b14                 | LR__0007
00b14     0E BE 16 F2 | 	cmp	local13, #14 wc
00b18     08 00 90 CD |  if_b	jmp	#LR__0008
00b1c     17 BE 16 F2 | 	cmp	local13, #23 wc
00b20     27 BE 06 C1 |  if_b	add	local13, #39
00b24                 | LR__0008
00b24                 | LR__0009
00b24                 | LR__0010
00b24                 | LR__0011
00b24                 | LR__0012
00b24                 | '  
00b24                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then		' put the char on the screen 
00b24     01 BE 16 F2 | 	cmp	local13, #1 wc
00b28     BC 01 90 CD |  if_b	jmp	#LR__0017
00b2c     7F BE 16 F2 | 	cmp	local13, #127 wc
00b30     3C 64 06 C1 |  if_b	add	objptr, #60
00b34     32 B1 E2 CA |  if_b	rdword	local06, objptr
00b38     3C 64 86 C1 |  if_b	sub	objptr, #60
00b3c     FE B0 16 C2 |  if_b	cmp	local06, #254 wc
00b40     A4 01 90 3D |  if_ae	jmp	#LR__0017
00b44                 | '     if do_insert then							' move the characters right
00b44     54 00 00 FF 
00b48     80 64 06 F1 | 	add	objptr, ##43136
00b4c     32 B1 0A FB | 	rdlong	local06, objptr wz
00b50     54 00 00 FF 
00b54     80 64 86 F1 | 	sub	objptr, ##43136
00b58     84 01 90 AD |  if_e	jmp	#LR__0016
00b5c                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2)+1 step -1 : pspoke i,pspeek(i-1) : next i 
00b5c     3E 64 06 F1 | 	add	objptr, #62
00b60     32 B3 C2 FA | 	rdbyte	local07, objptr
00b64     59 B5 E2 F8 | 	getbyte	local08, local07, #0
00b68     07 B4 66 F0 | 	shl	local08, #7
00b6c     3A 64 86 F1 | 	sub	objptr, #58
00b70     32 C3 02 FB | 	rdlong	local15, objptr
00b74     61 C5 02 F6 | 	mov	local16, local15
00b78     5A C5 02 F1 | 	add	local16, local08
00b7c     7F C4 06 F1 | 	add	local16, #127
00b80     59 B3 E2 F8 | 	getbyte	local07, local07, #0
00b84     07 B2 66 F0 | 	shl	local07, #7
00b88     59 C3 02 F1 | 	add	local15, local07
00b8c     38 64 06 F1 | 	add	objptr, #56
00b90     32 B7 E2 FA | 	rdword	local09, objptr
00b94     3C 64 86 F1 | 	sub	objptr, #60
00b98     5B BB 52 F6 | 	abs	local11, local09 wc
00b9c     01 BA 46 F0 | 	shr	local11, #1
00ba0     5D C3 82 F3 | 	sumc	local15, local11
00ba4     01 C2 06 F1 | 	add	local15, #1
00ba8                 | LR__0013
00ba8     62 C7 02 F6 | 	mov	local17, local16
00bac     01 C6 86 F1 | 	sub	local17, #1
00bb0     63 93 02 F6 | 	mov	arg01, local17
00bb4     F4 06 B2 FD | 	call	#_pspeek
00bb8     3D C9 02 F6 | 	mov	local18, result1
00bbc     64 CB E2 F8 | 	getbyte	local19, local18, #0
00bc0     65 CD 02 F6 | 	mov	local20, local19
00bc4     62 93 02 F6 | 	mov	arg01, local16
00bc8     66 95 02 F6 | 	mov	arg02, local20
00bcc     94 06 B2 FD | 	call	#_pspoke
00bd0     01 C4 86 F1 | 	sub	local16, #1
00bd4     61 C5 52 F2 | 	cmps	local16, local15 wc
00bd8     CC FF 9F 3D |  if_ae	jmp	#LR__0013
00bdc     54 00 00 FF 
00be0     A0 64 06 F1 | 	add	objptr, ##43168
00be4     32 01 68 FC | 	wrlong	#0, objptr
00be8     54 00 00 FF 
00bec     62 64 86 F1 | 	sub	objptr, ##43106
00bf0     32 B3 C2 FA | 	rdbyte	local07, objptr
00bf4     59 B5 E2 F8 | 	getbyte	local08, local07, #0
00bf8     07 B4 66 F0 | 	shl	local08, #7
00bfc     3A 64 86 F1 | 	sub	objptr, #58
00c00     32 B7 02 FB | 	rdlong	local09, objptr
00c04     5B C5 02 F6 | 	mov	local16, local09
00c08     5A C5 02 F1 | 	add	local16, local08
00c0c     38 64 06 F1 | 	add	objptr, #56
00c10     32 BB E2 FA | 	rdword	local11, objptr
00c14     5D B9 32 F9 | 	getword	local10, local11, #0
00c18     5C CF 52 F6 | 	abs	local21, local10 wc
00c1c     01 CE 46 F0 | 	shr	local21, #1
00c20     67 CF 82 F6 | 	negc	local21, local21
00c24     67 C5 02 F1 | 	add	local16, local21
00c28     59 B3 E2 F8 | 	getbyte	local07, local07, #0
00c2c     07 B2 66 F0 | 	shl	local07, #7
00c30     5B B5 02 F6 | 	mov	local08, local09
00c34     3C 64 86 F1 | 	sub	objptr, #60
00c38     5A D1 02 F6 | 	mov	local22, local08
00c3c     59 D1 02 F1 | 	add	local22, local07
00c40     80 D0 06 F1 | 	add	local22, #128
00c44                 | LR__0014
00c44     68 C5 52 F2 | 	cmps	local16, local22 wc
00c48     94 00 90 3D |  if_ae	jmp	#LR__0015
00c4c     3C 64 06 F1 | 	add	objptr, #60
00c50     32 B1 E2 FA | 	rdword	local06, objptr
00c54     54 00 00 FF 
00c58     64 64 06 F1 | 	add	objptr, ##43108
00c5c     32 B5 02 FB | 	rdlong	local08, objptr
00c60     01 B4 66 F0 | 	shl	local08, #1
00c64     5A B1 02 F1 | 	add	local06, local08
00c68     54 00 00 FF 
00c6c     62 64 86 F1 | 	sub	objptr, ##43106
00c70     32 C1 C2 FA | 	rdbyte	local14, objptr
00c74     3E 64 86 F1 | 	sub	objptr, #62
00c78     04 C0 66 F0 | 	shl	local14, #4
00c7c     04 C0 06 F1 | 	add	local14, #4
00c80     62 93 02 F6 | 	mov	arg01, local16
00c84     24 06 B2 FD | 	call	#_pspeek
00c88     3D B3 E2 F8 | 	getbyte	local07, result1, #0
00c8c     41 64 06 F1 | 	add	objptr, #65
00c90     32 B5 02 FB | 	rdlong	local08, objptr
00c94     04 64 06 F1 | 	add	objptr, #4
00c98     32 B9 02 FB | 	rdlong	local10, objptr
00c9c     45 64 86 F1 | 	sub	objptr, #69
00ca0     5C B7 02 F6 | 	mov	local09, local10
00ca4     58 93 02 F6 | 	mov	arg01, local06
00ca8     60 95 02 F6 | 	mov	arg02, local14
00cac     59 97 02 F6 | 	mov	arg03, local07
00cb0     5A 99 02 F6 | 	mov	arg04, local08
00cb4     5B 9B 02 F6 | 	mov	arg05, local09
00cb8     3C 1E B2 FD | 	call	#_hg010b_spin2_putcharxycgf
00cbc     54 00 00 FF 
00cc0     A0 64 06 F1 | 	add	objptr, ##43168
00cc4     32 B1 02 FB | 	rdlong	local06, objptr
00cc8     01 B0 06 F1 | 	add	local06, #1
00ccc     32 B1 62 FC | 	wrlong	local06, objptr
00cd0     54 00 00 FF 
00cd4     A0 64 86 F1 | 	sub	objptr, ##43168
00cd8     01 C4 06 F1 | 	add	local16, #1
00cdc     64 FF 9F FD | 	jmp	#LR__0014
00ce0                 | LR__0015
00ce0                 | LR__0016
00ce0     5F 93 02 F6 | 	mov	arg01, local13
00ce4     C4 21 B2 FD | 	call	#_hg010b_spin2_putchar
00ce8                 | LR__0017
00ce8                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then
00ce8     01 BE 16 F2 | 	cmp	local13, #1 wc
00cec     9C 00 90 CD |  if_b	jmp	#LR__0018
00cf0     7F BE 16 F2 | 	cmp	local13, #127 wc
00cf4     94 00 90 3D |  if_ae	jmp	#LR__0018
00cf8     3C 64 06 F1 | 	add	objptr, #60
00cfc     32 B1 E2 FA | 	rdword	local06, objptr
00d00     3C 64 86 F1 | 	sub	objptr, #60
00d04     FE B0 0E F2 | 	cmp	local06, #254 wz
00d08     52 00 00 AF 
00d0c     BC 64 06 A1 |  if_e	add	objptr, ##42172
00d10     32 B5 02 AB |  if_e	rdlong	local08, objptr
00d14     52 00 00 AF 
00d18     BC 64 86 A1 |  if_e	sub	objptr, ##42172
00d1c     5A B3 02 A6 |  if_e	mov	local07, local08
00d20     01 B2 0E A2 |  if_e	cmp	local07, #1 wz
00d24     64 00 90 5D |  if_ne	jmp	#LR__0018
00d28     35 95 02 F6 | 	mov	arg02, ptr__dat__
00d2c     04 00 00 FF 
00d30     A4 94 06 F1 | 	add	arg02, ##2212
00d34     2B B2 06 F6 | 	mov	local07, #43
00d38     0C B4 C6 F9 | 	decod	local08, #12
00d3c     03 00 00 FF 
00d40     DE B6 06 F6 | 	mov	local09, ##1758
00d44     00 B8 06 F6 | 	mov	local10, #0
00d48     2C BB 06 F6 | 	mov	local11, #300
00d4c     07 92 06 F6 | 	mov	arg01, #7
00d50     2B 96 06 F6 | 	mov	arg03, #43
00d54     0C 98 C6 F9 | 	decod	arg04, #12
00d58     03 00 00 FF 
00d5c     DE 9A 06 F6 | 	mov	arg05, ##1758
00d60     00 9C 06 F6 | 	mov	arg06, #0
00d64     2C 9F 06 F6 | 	mov	arg07, #300
00d68     0B 00 00 FF 
00d6c     CC 64 06 F1 | 	add	objptr, ##5836
00d70     8C 3B B2 FD | 	call	#_Audio2_004_spin2_play16
00d74                 | ' 
00d74                 | ' base2:=@channel0[0]+64*channel
00d74     32 BD 02 F6 | 	mov	local12, objptr
00d78     C0 93 06 F6 | 	mov	arg01, #448
00d7c                 | ' word[base2+32]:=0
00d7c     EC BD 06 F1 | 	add	local12, #492
00d80     5E 01 58 FC | 	wrword	#0, local12
00d84     0B 00 00 FF 
00d88     CC 64 86 F1 | 	sub	objptr, ##5836
00d8c                 | LR__0018
00d8c                 | '     
00d8c                 | '   if key4=key_enter then 						' get the line from the  screen and return it
00d8c     8D BE 0E F2 | 	cmp	local13, #141 wz
00d90     B0 00 90 5D |  if_ne	jmp	#LR__0022
00d94     94 01 00 FF 
00d98     72 D2 06 F6 | 	mov	local23, ##@LR__5497
00d9c                 | '     line$="" 
00d9c                 | '     for i=editor_spaces to 127
00d9c     38 00 00 FF 
00da0     B4 65 06 F1 | 	add	objptr, ##29108
00da4     32 C5 02 FB | 	rdlong	local16, objptr
00da8     38 00 00 FF 
00dac     B4 65 86 F1 | 	sub	objptr, ##29108
00db0                 | LR__0019
00db0     80 C4 56 F2 | 	cmps	local16, #128 wc
00db4     44 00 90 3D |  if_ae	jmp	#LR__0020
00db8     3E 64 06 F1 | 	add	objptr, #62
00dbc     32 BB C2 FA | 	rdbyte	local11, objptr
00dc0     07 BA 66 F0 | 	shl	local11, #7
00dc4     3A 64 86 F1 | 	sub	objptr, #58
00dc8     32 93 02 FB | 	rdlong	arg01, objptr
00dcc     04 64 86 F1 | 	sub	objptr, #4
00dd0     5D 93 02 F1 | 	add	arg01, local11
00dd4     62 93 02 F1 | 	add	arg01, local16
00dd8     D0 04 B2 FD | 	call	#_pspeek
00ddc     3D 93 E2 F8 | 	getbyte	arg01, result1, #0
00de0     90 59 B2 FD | 	call	#__system__Chr_S
00de4     3D 95 02 F6 | 	mov	arg02, result1
00de8     69 93 02 F6 | 	mov	arg01, local23
00dec     74 3F B2 FD | 	call	#__system___string_concat
00df0     3D D3 02 F6 | 	mov	local23, result1
00df4     01 C4 06 F1 | 	add	local16, #1
00df8     B4 FF 9F FD | 	jmp	#LR__0019
00dfc                 | LR__0020
00dfc                 | '     if do_insert andalso v.cursor_y<35 then v.scrolldown(v.cursor_y+1)
00dfc     54 00 00 FF 
00e00     80 64 06 F1 | 	add	objptr, ##43136
00e04     32 B1 0A FB | 	rdlong	local06, objptr wz
00e08     54 00 00 FF 
00e0c     80 64 86 F1 | 	sub	objptr, ##43136
00e10     24 00 90 AD |  if_e	jmp	#LR__0021
00e14     3E 64 06 F1 | 	add	objptr, #62
00e18     32 B3 C2 FA | 	rdbyte	local07, objptr
00e1c     3E 64 86 F1 | 	sub	objptr, #62
00e20     23 B2 16 F2 | 	cmp	local07, #35 wc
00e24     3E 64 06 C1 |  if_b	add	objptr, #62
00e28     32 93 C2 CA |  if_b	rdbyte	arg01, objptr
00e2c     3E 64 86 C1 |  if_b	sub	objptr, #62
00e30     01 92 06 C1 |  if_b	add	arg01, #1
00e34     FC 25 B2 CD |  if_b	call	#_hg010b_spin2_scrolldown
00e38                 | LR__0021
00e38     FC 27 B2 FD | 	call	#_hg010b_spin2_crlf
00e3c                 | '     v.crlf() 
00e3c                 | '     return  line$
00e3c     69 7B 02 F6 | 	mov	result1, local23
00e40     94 07 90 FD | 	jmp	#LR__0049
00e44                 | LR__0022
00e44     56 BF E2 F8 | 	getbyte	local13, local04, #0
00e48                 | '   
00e48                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then audio.play16(7,@atari2_spl,43,4096,1758,0,300) : audio.stop(7)  			' tab
00e48     2B BE 0E F2 | 	cmp	local13, #43 wz
00e4c     98 00 90 5D |  if_ne	jmp	#LR__0023
00e50     3C 64 06 F1 | 	add	objptr, #60
00e54     32 B1 E2 FA | 	rdword	local06, objptr
00e58     3C 64 86 F1 | 	sub	objptr, #60
00e5c     F0 B0 16 F2 | 	cmp	local06, #240 wc
00e60     84 00 90 CD |  if_b	jmp	#LR__0023
00e64     52 00 00 FF 
00e68     BC 64 06 F1 | 	add	objptr, ##42172
00e6c     32 B5 02 FB | 	rdlong	local08, objptr
00e70     52 00 00 FF 
00e74     BC 64 86 F1 | 	sub	objptr, ##42172
00e78     5A B3 02 F6 | 	mov	local07, local08
00e7c     01 B2 0E F2 | 	cmp	local07, #1 wz
00e80     64 00 90 5D |  if_ne	jmp	#LR__0023
00e84     35 95 02 F6 | 	mov	arg02, ptr__dat__
00e88     04 00 00 FF 
00e8c     A4 94 06 F1 | 	add	arg02, ##2212
00e90     2B B2 06 F6 | 	mov	local07, #43
00e94     0C B4 C6 F9 | 	decod	local08, #12
00e98     03 00 00 FF 
00e9c     DE B6 06 F6 | 	mov	local09, ##1758
00ea0     00 B8 06 F6 | 	mov	local10, #0
00ea4     2C BB 06 F6 | 	mov	local11, #300
00ea8     07 92 06 F6 | 	mov	arg01, #7
00eac     2B 96 06 F6 | 	mov	arg03, #43
00eb0     0C 98 C6 F9 | 	decod	arg04, #12
00eb4     03 00 00 FF 
00eb8     DE 9A 06 F6 | 	mov	arg05, ##1758
00ebc     00 9C 06 F6 | 	mov	arg06, #0
00ec0     2C 9F 06 F6 | 	mov	arg07, #300
00ec4     0B 00 00 FF 
00ec8     CC 64 06 F1 | 	add	objptr, ##5836
00ecc     30 3A B2 FD | 	call	#_Audio2_004_spin2_play16
00ed0                 | ' 
00ed0                 | ' base2:=@channel0[0]+64*channel
00ed0     32 BD 02 F6 | 	mov	local12, objptr
00ed4     C0 93 06 F6 | 	mov	arg01, #448
00ed8                 | ' word[base2+32]:=0
00ed8     EC BD 06 F1 | 	add	local12, #492
00edc     5E 01 58 FC | 	wrword	#0, local12
00ee0     0B 00 00 FF 
00ee4     CC 64 86 F1 | 	sub	objptr, ##5836
00ee8                 | LR__0023
00ee8                 | '   if key4=77 then i=127 : do: 															' end
00ee8     4D BE 0E F2 | 	cmp	local13, #77 wz
00eec     90 00 90 5D |  if_ne	jmp	#LR__0028
00ef0     7F C4 06 F6 | 	mov	local16, #127
00ef4                 | LR__0024
00ef4                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then 
00ef4     3E 64 06 F1 | 	add	objptr, #62
00ef8     32 B7 C2 FA | 	rdbyte	local09, objptr
00efc     5B B5 E2 F8 | 	getbyte	local08, local09, #0
00f00     5A B9 02 F6 | 	mov	local10, local08
00f04     07 B8 66 F0 | 	shl	local10, #7
00f08     3A 64 86 F1 | 	sub	objptr, #58
00f0c     32 BB 02 FB | 	rdlong	local11, objptr
00f10     04 64 86 F1 | 	sub	objptr, #4
00f14     5D B3 02 F6 | 	mov	local07, local11
00f18     5C B3 02 F1 | 	add	local07, local10
00f1c     62 B3 02 F1 | 	add	local07, local16
00f20     59 93 02 F6 | 	mov	arg01, local07
00f24     84 03 B2 FD | 	call	#_pspeek
00f28     3D B1 E2 F8 | 	getbyte	local06, result1, #0
00f2c     20 B0 0E F2 | 	cmp	local06, #32 wz
00f30     2C 00 90 AD |  if_e	jmp	#LR__0026
00f34                 | '       if i<127 then v.setcursorx(2*i+2) else v.setcursorx(254)
00f34     7F C4 56 F2 | 	cmps	local16, #127 wc
00f38     18 00 90 3D |  if_ae	jmp	#LR__0025
00f3c     62 B3 02 F6 | 	mov	local07, local16
00f40     01 B2 66 F0 | 	shl	local07, #1
00f44     59 93 02 F6 | 	mov	arg01, local07
00f48     02 92 06 F1 | 	add	arg01, #2
00f4c     94 1D B2 FD | 	call	#_hg010b_spin2_setcursorx
00f50     2C 00 90 FD | 	jmp	#LR__0027
00f54                 | LR__0025
00f54     FE 92 06 F6 | 	mov	arg01, #254
00f58     88 1D B2 FD | 	call	#_hg010b_spin2_setcursorx
00f5c     20 00 90 FD | 	jmp	#LR__0027
00f60                 | LR__0026
00f60     01 C4 86 F1 | 	sub	local16, #1
00f64     38 00 00 FF 
00f68     B4 65 06 F1 | 	add	objptr, ##29108
00f6c     32 B1 02 FB | 	rdlong	local06, objptr
00f70     38 00 00 FF 
00f74     B4 65 86 F1 | 	sub	objptr, ##29108
00f78     58 C5 0A F2 | 	cmp	local16, local06 wz
00f7c     74 FF 9F 5D |  if_ne	jmp	#LR__0024
00f80                 | LR__0027
00f80                 | LR__0028
00f80                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
00f80     38 00 00 FF 
00f84     B4 65 06 F1 | 	add	objptr, ##29108
00f88     32 C1 02 FB | 	rdlong	local14, objptr
00f8c     38 00 00 FF 
00f90     B4 65 86 F1 | 	sub	objptr, ##29108
00f94     60 B1 02 F6 | 	mov	local06, local14
00f98     58 C5 0A F2 | 	cmp	local16, local06 wz
00f9c     2C 00 90 5D |  if_ne	jmp	#LR__0029
00fa0     38 00 00 FF 
00fa4     B4 65 06 F1 | 	add	objptr, ##29108
00fa8     32 B5 02 FB | 	rdlong	local08, objptr
00fac     38 00 00 FF 
00fb0     B4 65 86 F1 | 	sub	objptr, ##29108
00fb4     5A B3 02 F6 | 	mov	local07, local08
00fb8     59 C1 02 F6 | 	mov	local14, local07
00fbc     01 C0 66 F0 | 	shl	local14, #1
00fc0     60 B1 02 F6 | 	mov	local06, local14
00fc4     58 93 02 F6 | 	mov	arg01, local06
00fc8     18 1D B2 FD | 	call	#_hg010b_spin2_setcursorx
00fcc                 | LR__0029
00fcc                 | '     
00fcc                 | '   if key4=74 then v.setcursorx(editor_spaces*2)													' home
00fcc     4A BE 0E F2 | 	cmp	local13, #74 wz
00fd0     2C 00 90 5D |  if_ne	jmp	#LR__0030
00fd4     38 00 00 FF 
00fd8     B4 65 06 F1 | 	add	objptr, ##29108
00fdc     32 B5 02 FB | 	rdlong	local08, objptr
00fe0     38 00 00 FF 
00fe4     B4 65 86 F1 | 	sub	objptr, ##29108
00fe8     5A B3 02 F6 | 	mov	local07, local08
00fec     59 C1 02 F6 | 	mov	local14, local07
00ff0     01 C0 66 F0 | 	shl	local14, #1
00ff4     60 B1 02 F6 | 	mov	local06, local14
00ff8     58 93 02 F6 | 	mov	arg01, local06
00ffc     E4 1C B2 FD | 	call	#_hg010b_spin2_setcursorx
01000                 | LR__0030
01000                 | '   if key4=75 then v.setcursory(0)														' pgup
01000     4B BE 0E F2 | 	cmp	local13, #75 wz
01004     00 B0 06 A6 |  if_e	mov	local06, #0
01008     00 92 06 A6 |  if_e	mov	arg01, #0
0100c     04 1D B2 AD |  if_e	call	#_hg010b_spin2_setcursory
01010                 | '   if key4=78 then v.setcursory(36) 														' pgdn, todo: parameter instead 36
01010     4E BE 0E F2 | 	cmp	local13, #78 wz
01014     24 B0 06 A6 |  if_e	mov	local06, #36
01018     24 92 06 A6 |  if_e	mov	arg01, #36
0101c     F4 1C B2 AD |  if_e	call	#_hg010b_spin2_setcursory
01020                 | '   if key4=76 then 																' del
01020     4C BE 0E F2 | 	cmp	local13, #76 wz
01024     AC 01 90 5D |  if_ne	jmp	#LR__0035
01028                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
01028     3E 64 06 F1 | 	add	objptr, #62
0102c     32 B3 C2 FA | 	rdbyte	local07, objptr
01030     59 B5 E2 F8 | 	getbyte	local08, local07, #0
01034     07 B4 66 F0 | 	shl	local08, #7
01038     3A 64 86 F1 | 	sub	objptr, #58
0103c     32 D5 02 FB | 	rdlong	local24, objptr
01040     6A C5 02 F6 | 	mov	local16, local24
01044     5A C5 02 F1 | 	add	local16, local08
01048     38 64 06 F1 | 	add	objptr, #56
0104c     32 B9 E2 FA | 	rdword	local10, objptr
01050     5C CF 52 F6 | 	abs	local21, local10 wc
01054     01 CE 46 F0 | 	shr	local21, #1
01058     67 C5 82 F3 | 	sumc	local16, local21
0105c     59 B3 E2 F8 | 	getbyte	local07, local07, #0
01060     07 B2 66 F0 | 	shl	local07, #7
01064     3C 64 86 F1 | 	sub	objptr, #60
01068     59 D5 02 F1 | 	add	local24, local07
0106c     80 D4 06 F1 | 	add	local24, #128
01070                 | LR__0031
01070     6A C5 52 F2 | 	cmps	local16, local24 wc
01074     20 00 90 3D |  if_ae	jmp	#LR__0032
01078     62 93 02 F6 | 	mov	arg01, local16
0107c     01 92 06 F1 | 	add	arg01, #1
01080     28 02 B2 FD | 	call	#_pspeek
01084     3D 95 E2 F8 | 	getbyte	arg02, result1, #0
01088     62 93 02 F6 | 	mov	arg01, local16
0108c     D4 01 B2 FD | 	call	#_pspoke
01090     01 C4 06 F1 | 	add	local16, #1
01094     D8 FF 9F FD | 	jmp	#LR__0031
01098                 | LR__0032
01098     3E 64 06 F1 | 	add	objptr, #62
0109c     32 B7 C2 FA | 	rdbyte	local09, objptr
010a0     07 B6 66 F0 | 	shl	local09, #7
010a4     3A 64 86 F1 | 	sub	objptr, #58
010a8     32 93 02 FB | 	rdlong	arg01, objptr
010ac     04 64 86 F1 | 	sub	objptr, #4
010b0     5B 93 02 F1 | 	add	arg01, local09
010b4     7F 92 06 F1 | 	add	arg01, #127
010b8     20 94 06 F6 | 	mov	arg02, #32
010bc     A4 01 B2 FD | 	call	#_pspoke
010c0     54 00 00 FF 
010c4     A0 64 06 F1 | 	add	objptr, ##43168
010c8     32 01 68 FC | 	wrlong	#0, objptr
010cc     54 00 00 FF 
010d0     62 64 86 F1 | 	sub	objptr, ##43106
010d4     32 C1 C2 FA | 	rdbyte	local14, objptr
010d8     60 B5 E2 F8 | 	getbyte	local08, local14, #0
010dc     07 B4 66 F0 | 	shl	local08, #7
010e0     3A 64 86 F1 | 	sub	objptr, #58
010e4     32 B7 02 FB | 	rdlong	local09, objptr
010e8     5B C5 02 F6 | 	mov	local16, local09
010ec     5A C5 02 F1 | 	add	local16, local08
010f0     38 64 06 F1 | 	add	objptr, #56
010f4     32 BB E2 FA | 	rdword	local11, objptr
010f8     5D B9 32 F9 | 	getword	local10, local11, #0
010fc     5C CF 52 F6 | 	abs	local21, local10 wc
01100     01 CE 46 F0 | 	shr	local21, #1
01104     67 CF 82 F6 | 	negc	local21, local21
01108     67 C5 02 F1 | 	add	local16, local21
0110c     60 B1 E2 F8 | 	getbyte	local06, local14, #0
01110     58 B3 02 F6 | 	mov	local07, local06
01114     07 B2 66 F0 | 	shl	local07, #7
01118     5B B5 02 F6 | 	mov	local08, local09
0111c     3C 64 86 F1 | 	sub	objptr, #60
01120     5A D7 02 F6 | 	mov	local25, local08
01124     59 D7 02 F1 | 	add	local25, local07
01128     80 D6 06 F1 | 	add	local25, #128
0112c                 | LR__0033
0112c     6B C5 52 F2 | 	cmps	local16, local25 wc
01130     A0 00 90 3D |  if_ae	jmp	#LR__0034
01134     3C 64 06 F1 | 	add	objptr, #60
01138     32 B1 E2 FA | 	rdword	local06, objptr
0113c     54 00 00 FF 
01140     64 64 06 F1 | 	add	objptr, ##43108
01144     32 B5 02 FB | 	rdlong	local08, objptr
01148     01 B4 66 F0 | 	shl	local08, #1
0114c     5A B1 02 F1 | 	add	local06, local08
01150     54 00 00 FF 
01154     62 64 86 F1 | 	sub	objptr, ##43106
01158     32 C1 C2 FA | 	rdbyte	local14, objptr
0115c     3E 64 86 F1 | 	sub	objptr, #62
01160     04 C0 66 F0 | 	shl	local14, #4
01164     04 C0 06 F1 | 	add	local14, #4
01168     62 93 02 F6 | 	mov	arg01, local16
0116c     3C 01 B2 FD | 	call	#_pspeek
01170     3D B3 E2 F8 | 	getbyte	local07, result1, #0
01174     41 64 06 F1 | 	add	objptr, #65
01178     32 B5 02 FB | 	rdlong	local08, objptr
0117c     04 64 06 F1 | 	add	objptr, #4
01180     32 B9 02 FB | 	rdlong	local10, objptr
01184     45 64 86 F1 | 	sub	objptr, #69
01188     5C B7 02 F6 | 	mov	local09, local10
0118c     58 93 02 F6 | 	mov	arg01, local06
01190     60 95 02 F6 | 	mov	arg02, local14
01194     59 97 02 F6 | 	mov	arg03, local07
01198     5A 99 02 F6 | 	mov	arg04, local08
0119c     5B 9B 02 F6 | 	mov	arg05, local09
011a0     54 19 B2 FD | 	call	#_hg010b_spin2_putcharxycgf
011a4     54 00 00 FF 
011a8     A0 64 06 F1 | 	add	objptr, ##43168
011ac     32 B1 02 FB | 	rdlong	local06, objptr
011b0     01 B0 06 F1 | 	add	local06, #1
011b4     32 B1 62 FC | 	wrlong	local06, objptr
011b8     54 00 00 FF 
011bc     A0 64 86 F1 | 	sub	objptr, ##43168
011c0     62 B1 02 F6 | 	mov	local06, local16
011c4     62 C1 02 F6 | 	mov	local14, local16
011c8     01 C0 06 F1 | 	add	local14, #1
011cc     60 C5 02 F6 | 	mov	local16, local14
011d0     58 FF 9F FD | 	jmp	#LR__0033
011d4                 | LR__0034
011d4                 | LR__0035
011d4                 | ' 
011d4                 | '   if key4 = 42 then  'backspace
011d4     2A BE 0E F2 | 	cmp	local13, #42 wz
011d8     14 02 90 5D |  if_ne	jmp	#LR__0041
011dc                 | '     if v.cursor_x>editor_spaces*2 then 
011dc     3C 64 06 F1 | 	add	objptr, #60
011e0     32 C1 E2 FA | 	rdword	local14, objptr
011e4     60 B1 32 F9 | 	getword	local06, local14, #0
011e8     38 00 00 FF 
011ec     78 65 06 F1 | 	add	objptr, ##29048
011f0     32 B7 02 FB | 	rdlong	local09, objptr
011f4     38 00 00 FF 
011f8     B4 65 86 F1 | 	sub	objptr, ##29108
011fc     5B B5 02 F6 | 	mov	local08, local09
01200     5A B3 02 F6 | 	mov	local07, local08
01204     01 B2 66 F0 | 	shl	local07, #1
01208     59 B1 5A F2 | 	cmps	local06, local07 wcz
0120c     C8 01 90 ED |  if_be	jmp	#LR__0039
01210     3C 64 06 F1 | 	add	objptr, #60
01214     32 93 E2 FA | 	rdword	arg01, objptr
01218     02 92 86 F1 | 	sub	arg01, #2
0121c     02 64 06 F1 | 	add	objptr, #2
01220     32 95 C2 FA | 	rdbyte	arg02, objptr
01224     3E 64 86 F1 | 	sub	objptr, #62
01228     6C 1A B2 FD | 	call	#_hg010b_spin2_setcursorpos
0122c                 | '       position v.cursor_x-2,v.cursor_y
0122c                 | '       for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
0122c     3E 64 06 F1 | 	add	objptr, #62
01230     32 B3 C2 FA | 	rdbyte	local07, objptr
01234     59 B5 E2 F8 | 	getbyte	local08, local07, #0
01238     07 B4 66 F0 | 	shl	local08, #7
0123c     3A 64 86 F1 | 	sub	objptr, #58
01240     32 D9 02 FB | 	rdlong	local26, objptr
01244     6C C5 02 F6 | 	mov	local16, local26
01248     5A C5 02 F1 | 	add	local16, local08
0124c     38 64 06 F1 | 	add	objptr, #56
01250     32 B9 E2 FA | 	rdword	local10, objptr
01254     5C CF 52 F6 | 	abs	local21, local10 wc
01258     01 CE 46 F0 | 	shr	local21, #1
0125c     67 C5 82 F3 | 	sumc	local16, local21
01260     59 B3 E2 F8 | 	getbyte	local07, local07, #0
01264     07 B2 66 F0 | 	shl	local07, #7
01268     3C 64 86 F1 | 	sub	objptr, #60
0126c     59 D9 02 F1 | 	add	local26, local07
01270     80 D8 06 F1 | 	add	local26, #128
01274                 | LR__0036
01274     6C C5 52 F2 | 	cmps	local16, local26 wc
01278     20 00 90 3D |  if_ae	jmp	#LR__0037
0127c     62 93 02 F6 | 	mov	arg01, local16
01280     01 92 06 F1 | 	add	arg01, #1
01284     24 00 B2 FD | 	call	#_pspeek
01288     3D 95 E2 F8 | 	getbyte	arg02, result1, #0
0128c     62 93 02 F6 | 	mov	arg01, local16
01290     D0 FF B1 FD | 	call	#_pspoke
01294     01 C4 06 F1 | 	add	local16, #1
01298     D8 FF 9F FD | 	jmp	#LR__0036
0129c                 | LR__0037
0129c     3E 64 06 F1 | 	add	objptr, #62
012a0     32 B7 C2 FA | 	rdbyte	local09, objptr
012a4     07 B6 66 F0 | 	shl	local09, #7
012a8     3A 64 86 F1 | 	sub	objptr, #58
012ac     32 93 02 FB | 	rdlong	arg01, objptr
012b0     04 64 86 F1 | 	sub	objptr, #4
012b4     5B 93 02 F1 | 	add	arg01, local09
012b8     7F 92 06 F1 | 	add	arg01, #127
012bc     20 94 06 F6 | 	mov	arg02, #32
012c0     A0 FF B1 FD | 	call	#_pspoke
012c4     54 00 00 FF 
012c8     A0 64 06 F1 | 	add	objptr, ##43168
012cc     32 01 68 FC | 	wrlong	#0, objptr
012d0     54 00 00 FF 
012d4     62 64 86 F1 | 	sub	objptr, ##43106
012d8     32 C1 C2 FA | 	rdbyte	local14, objptr
012dc     60 B5 E2 F8 | 	getbyte	local08, local14, #0
012e0     07 B4 66 F0 | 	shl	local08, #7
012e4     3A 64 86 F1 | 	sub	objptr, #58
012e8     32 B7 02 FB | 	rdlong	local09, objptr
012ec     5B C5 02 F6 | 	mov	local16, local09
012f0     5A C5 02 F1 | 	add	local16, local08
012f4     38 64 06 F1 | 	add	objptr, #56
012f8     32 BB E2 FA | 	rdword	local11, objptr
012fc     5D B9 32 F9 | 	getword	local10, local11, #0
01300     5C CF 52 F6 | 	abs	local21, local10 wc
01304     01 CE 46 F0 | 	shr	local21, #1
01308     67 CF 82 F6 | 	negc	local21, local21
0130c     67 C5 02 F1 | 	add	local16, local21
01310     60 B1 E2 F8 | 	getbyte	local06, local14, #0
01314     58 B3 02 F6 | 	mov	local07, local06
01318     07 B2 66 F0 | 	shl	local07, #7
0131c     5B B5 02 F6 | 	mov	local08, local09
01320     3C 64 86 F1 | 	sub	objptr, #60
01324     5A DB 02 F6 | 	mov	local27, local08
01328     59 DB 02 F1 | 	add	local27, local07
0132c     80 DA 06 F1 | 	add	local27, #128
01330                 | LR__0038
01330     6D C5 52 F2 | 	cmps	local16, local27 wc
01334     B8 00 90 3D |  if_ae	jmp	#LR__0040
01338     3C 64 06 F1 | 	add	objptr, #60
0133c     32 B1 E2 FA | 	rdword	local06, objptr
01340     54 00 00 FF 
01344     64 64 06 F1 | 	add	objptr, ##43108
01348     32 B5 02 FB | 	rdlong	local08, objptr
0134c     01 B4 66 F0 | 	shl	local08, #1
01350     5A B1 02 F1 | 	add	local06, local08
01354     54 00 00 FF 
01358     62 64 86 F1 | 	sub	objptr, ##43106
0135c     32 C1 C2 FA | 	rdbyte	local14, objptr
01360     3E 64 86 F1 | 	sub	objptr, #62
01364     04 C0 66 F0 | 	shl	local14, #4
01368     04 C0 06 F1 | 	add	local14, #4
0136c     62 93 02 F6 | 	mov	arg01, local16
01370     38 FF B1 FD | 	call	#_pspeek
01374     3D B3 E2 F8 | 	getbyte	local07, result1, #0
01378     41 64 06 F1 | 	add	objptr, #65
0137c     32 B5 02 FB | 	rdlong	local08, objptr
01380     04 64 06 F1 | 	add	objptr, #4
01384     32 B9 02 FB | 	rdlong	local10, objptr
01388     45 64 86 F1 | 	sub	objptr, #69
0138c     5C B7 02 F6 | 	mov	local09, local10
01390     58 93 02 F6 | 	mov	arg01, local06
01394     60 95 02 F6 | 	mov	arg02, local14
01398     59 97 02 F6 | 	mov	arg03, local07
0139c     5A 99 02 F6 | 	mov	arg04, local08
013a0     5B 9B 02 F6 | 	mov	arg05, local09
013a4     50 17 B2 FD | 	call	#_hg010b_spin2_putcharxycgf
013a8     54 00 00 FF 
013ac     A0 64 06 F1 | 	add	objptr, ##43168
013b0     32 B1 02 FB | 	rdlong	local06, objptr
013b4     01 B0 06 F1 | 	add	local06, #1
013b8     32 B1 62 FC | 	wrlong	local06, objptr
013bc     54 00 00 FF 
013c0     A0 64 86 F1 | 	sub	objptr, ##43168
013c4     62 B1 02 F6 | 	mov	local06, local16
013c8     62 C1 02 F6 | 	mov	local14, local16
013cc     01 C0 06 F1 | 	add	local14, #1
013d0     60 C5 02 F6 | 	mov	local16, local14
013d4     58 FF 9F FD | 	jmp	#LR__0038
013d8                 | LR__0039
013d8     94 01 00 FF 
013dc     73 D2 06 F6 | 	mov	local23, ##@LR__5498
013e0     04 B0 06 F6 | 	mov	local06, #4
013e4     3C 64 06 F1 | 	add	objptr, #60
013e8     32 09 58 FC | 	wrword	#4, objptr
013ec     3C 64 86 F1 | 	sub	objptr, #60
013f0                 | LR__0040
013f0                 | LR__0041
013f0                 | ' 
013f0                 | '   if key4=82 then 						' arrow up
013f0     52 BE 0E F2 | 	cmp	local13, #82 wz
013f4     58 00 90 5D |  if_ne	jmp	#LR__0042
013f8                 | ' return cursor_y
013f8     3E 64 06 F1 | 	add	objptr, #62
013fc     32 7B C2 FA | 	rdbyte	result1, objptr
01400     01 7A 86 F1 | 	sub	result1, #1
01404     54 00 00 FF 
01408     46 64 06 F1 | 	add	objptr, ##43078
0140c     32 7B 62 FC | 	wrlong	result1, objptr
01410                 | '     cy=v.getcursory()-1 : if cy<0 then cy=0 
01410     54 00 00 FF 
01414     84 64 86 F1 | 	sub	objptr, ##43140
01418     00 7A 56 F2 | 	cmps	result1, #0 wc
0141c     54 00 00 CF 
01420     84 64 06 C1 |  if_b	add	objptr, ##43140
01424     32 01 68 CC |  if_b	wrlong	#0, objptr
01428     54 00 00 CF 
0142c     84 64 86 C1 |  if_b	sub	objptr, ##43140
01430     54 00 00 FF 
01434     84 64 06 F1 | 	add	objptr, ##43140
01438     32 C1 02 FB | 	rdlong	local14, objptr
0143c     54 00 00 FF 
01440     84 64 86 F1 | 	sub	objptr, ##43140
01444     60 B1 02 F6 | 	mov	local06, local14
01448     58 93 02 F6 | 	mov	arg01, local06
0144c     C4 18 B2 FD | 	call	#_hg010b_spin2_setcursory
01450                 | LR__0042
01450                 | '   if key4=81 then						' arrow down,  todo: remove hardcoded 36
01450     51 BE 0E F2 | 	cmp	local13, #81 wz
01454     58 00 90 5D |  if_ne	jmp	#LR__0043
01458                 | ' return cursor_y
01458     3E 64 06 F1 | 	add	objptr, #62
0145c     32 7B C2 FA | 	rdbyte	result1, objptr
01460     01 7A 06 F1 | 	add	result1, #1
01464     54 00 00 FF 
01468     46 64 06 F1 | 	add	objptr, ##43078
0146c     32 7B 62 FC | 	wrlong	result1, objptr
01470                 | '     cy=v.getcursory()+1 : if cy>36  then cy=36
01470     54 00 00 FF 
01474     84 64 86 F1 | 	sub	objptr, ##43140
01478     25 7A 56 F2 | 	cmps	result1, #37 wc
0147c     54 00 00 3F 
01480     84 64 06 31 |  if_ae	add	objptr, ##43140
01484     32 49 68 3C |  if_ae	wrlong	#36, objptr
01488     54 00 00 3F 
0148c     84 64 86 31 |  if_ae	sub	objptr, ##43140
01490     54 00 00 FF 
01494     84 64 06 F1 | 	add	objptr, ##43140
01498     32 C1 02 FB | 	rdlong	local14, objptr
0149c     54 00 00 FF 
014a0     84 64 86 F1 | 	sub	objptr, ##43140
014a4     60 B1 02 F6 | 	mov	local06, local14
014a8     58 93 02 F6 | 	mov	arg01, local06
014ac     64 18 B2 FD | 	call	#_hg010b_spin2_setcursory
014b0                 | LR__0043
014b0                 | '   if key4=80 then
014b0     50 BE 0E F2 | 	cmp	local13, #80 wz
014b4     74 00 90 5D |  if_ne	jmp	#LR__0044
014b8                 | ' return cursor_x
014b8     3C 64 06 F1 | 	add	objptr, #60
014bc     32 B1 E2 FA | 	rdword	local06, objptr
014c0     02 B0 86 F1 | 	sub	local06, #2
014c4     54 00 00 FF 
014c8     4C 64 06 F1 | 	add	objptr, ##43084
014cc     32 B1 62 FC | 	wrlong	local06, objptr
014d0                 | '     cx=v.getcursorx()-2 					' arrow left
014d0                 | '     if cx<editor_spaces then cx=editor_spaces			
014d0     1B 00 00 FF 
014d4     D4 64 86 F1 | 	sub	objptr, ##14036
014d8     32 B5 02 FB | 	rdlong	local08, objptr
014dc     38 00 00 FF 
014e0     B4 65 86 F1 | 	sub	objptr, ##29108
014e4     5A B3 02 F6 | 	mov	local07, local08
014e8     59 B1 52 F2 | 	cmps	local06, local07 wc
014ec     38 00 00 CF 
014f0     B4 65 06 C1 |  if_b	add	objptr, ##29108
014f4     32 B1 02 CB |  if_b	rdlong	local06, objptr
014f8     1B 00 00 CF 
014fc     D4 64 06 C1 |  if_b	add	objptr, ##14036
01500     32 B1 62 CC |  if_b	wrlong	local06, objptr
01504     54 00 00 CF 
01508     88 64 86 C1 |  if_b	sub	objptr, ##43144
0150c     54 00 00 FF 
01510     88 64 06 F1 | 	add	objptr, ##43144
01514     32 C1 02 FB | 	rdlong	local14, objptr
01518     54 00 00 FF 
0151c     88 64 86 F1 | 	sub	objptr, ##43144
01520     60 B1 02 F6 | 	mov	local06, local14
01524     58 93 02 F6 | 	mov	arg01, local06
01528     B8 17 B2 FD | 	call	#_hg010b_spin2_setcursorx
0152c                 | LR__0044
0152c                 | '   if key4=79 then						' arrow right
0152c     4F BE 0E F2 | 	cmp	local13, #79 wz
01530     54 00 90 5D |  if_ne	jmp	#LR__0045
01534                 | ' return cursor_x
01534     3C 64 06 F1 | 	add	objptr, #60
01538     32 7B E2 FA | 	rdword	result1, objptr
0153c     02 7A 06 F1 | 	add	result1, #2
01540     54 00 00 FF 
01544     4C 64 06 F1 | 	add	objptr, ##43084
01548     32 7B 62 FC | 	wrlong	result1, objptr
0154c                 | '     cx=v.getcursorx()+2 
0154c                 | '     if cx>254  then cx=254 
0154c     54 00 00 FF 
01550     88 64 86 F1 | 	sub	objptr, ##43144
01554     FF 7A 56 F2 | 	cmps	result1, #255 wc
01558     54 00 00 3F 
0155c     88 64 06 31 |  if_ae	add	objptr, ##43144
01560     32 FD 69 3C |  if_ae	wrlong	#254, objptr
01564     54 00 00 3F 
01568     88 64 86 31 |  if_ae	sub	objptr, ##43144
0156c     54 00 00 FF 
01570     88 64 06 F1 | 	add	objptr, ##43144
01574     32 B1 02 FB | 	rdlong	local06, objptr
01578     54 00 00 FF 
0157c     88 64 86 F1 | 	sub	objptr, ##43144
01580     58 93 02 F6 | 	mov	arg01, local06
01584     5C 17 B2 FD | 	call	#_hg010b_spin2_setcursorx
01588                 | LR__0045
01588                 | ' 
01588                 | '   if key4=73 then 						' ins
01588     49 BE 0E F2 | 	cmp	local13, #73 wz
0158c     40 00 90 5D |  if_ne	jmp	#LR__0048
01590     54 00 00 FF 
01594     80 64 06 F1 | 	add	objptr, ##43136
01598     32 B1 02 FB | 	rdlong	local06, objptr
0159c     58 C1 22 F6 | 	not	local14, local06
015a0     32 C1 62 FC | 	wrlong	local14, objptr
015a4                 | '     if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
015a4     54 00 00 FF 
015a8     80 64 86 F1 | 	sub	objptr, ##43136
015ac     00 C0 0E F2 | 	cmp	local14, #0 wz
015b0     10 00 90 AD |  if_e	jmp	#LR__0046
015b4     0E B0 06 F6 | 	mov	local06, #14
015b8     0E 92 06 F6 | 	mov	arg01, #14
015bc     7C 05 B2 FD | 	call	#_hg010b_spin2_setcursorshape
015c0     0C 00 90 FD | 	jmp	#LR__0047
015c4                 | LR__0046
015c4     00 B0 06 F6 | 	mov	local06, #0
015c8     00 92 06 F6 | 	mov	arg01, #0
015cc     6C 05 B2 FD | 	call	#_hg010b_spin2_setcursorshape
015d0                 | LR__0047
015d0                 | LR__0048
015d0     00 AC 06 F6 | 	mov	local04, #0
015d4     44 F3 9F FD | 	jmp	#LR__0001
015d8                 | LR__0049
015d8     E7 F0 03 F6 | 	mov	ptra, fp
015dc     F2 00 A0 FD | 	call	#popregs_
015e0                 | _edit_ret
015e0     2D 00 64 FD | 	ret
015e4                 | 
015e4                 | ' 
015e4                 | ' ''-----------------------------------------------------------------------------------------------------------
015e4                 | ' ' 					A housekeepeer.
015e4                 | ' ' A dedicated cog that is intended to do things in the background, for example tracking GUI elements
015e4                 | ' ' or playing audio tracks in  the background.  In the current version it reads the mouse pointer and
015e4                 | ' ' a digital joystick position. It also implements a 200 Hz clock that's ticks are synchronized with vblanks 
015e4                 | ' ''-----------------------------------------------------------------------------------------------------------
015e4                 | ' 
015e4                 | ' sub housekeeper
015e4                 | _housekeeper
015e4                 | ' 
015e4                 | ' do
015e4                 | LR__0050
015e4                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
015e4     49 64 06 F1 | 	add	objptr, #73
015e8                 | LR__0051
015e8     32 93 02 FB | 	rdlong	arg01, objptr
015ec     01 92 0E F2 | 	cmp	arg01, #1 wz
015f0     F4 FF 9F 5D |  if_ne	jmp	#LR__0051
015f4     54 00 00 FF 
015f8     03 64 06 F1 | 	add	objptr, ##43011
015fc     32 93 02 FB | 	rdlong	arg01, objptr
01600     01 92 06 F1 | 	add	arg01, #1
01604     32 93 62 FC | 	wrlong	arg01, objptr
01608     54 00 00 FF 
0160c     4C 64 86 F1 | 	sub	objptr, ##43084
01610     80 00 B0 FD | 	call	#_gethdi
01614     05 92 06 F6 | 	mov	arg01, #5
01618     E0 39 B2 FD | 	call	#__system___waitms
0161c     54 00 00 FF 
01620     4C 64 06 F1 | 	add	objptr, ##43084
01624     32 93 02 FB | 	rdlong	arg01, objptr
01628     01 92 06 F1 | 	add	arg01, #1
0162c     32 93 62 FC | 	wrlong	arg01, objptr
01630     54 00 00 FF 
01634     4C 64 86 F1 | 	sub	objptr, ##43084
01638     58 00 B0 FD | 	call	#_gethdi
0163c     05 92 06 F6 | 	mov	arg01, #5
01640     B8 39 B2 FD | 	call	#__system___waitms
01644     54 00 00 FF 
01648     4C 64 06 F1 | 	add	objptr, ##43084
0164c     32 93 02 FB | 	rdlong	arg01, objptr
01650     01 92 06 F1 | 	add	arg01, #1
01654     32 93 62 FC | 	wrlong	arg01, objptr
01658     54 00 00 FF 
0165c     4C 64 86 F1 | 	sub	objptr, ##43084
01660     30 00 B0 FD | 	call	#_gethdi
01664     05 92 06 F6 | 	mov	arg01, #5
01668     90 39 B2 FD | 	call	#__system___waitms
0166c     54 00 00 FF 
01670     4C 64 06 F1 | 	add	objptr, ##43084
01674     32 93 02 FB | 	rdlong	arg01, objptr
01678     01 92 06 F1 | 	add	arg01, #1
0167c     32 93 62 FC | 	wrlong	arg01, objptr
01680     54 00 00 FF 
01684     4C 64 86 F1 | 	sub	objptr, ##43084
01688     08 00 B0 FD | 	call	#_gethdi
0168c     54 FF 9F FD | 	jmp	#LR__0050
01690                 | _housekeeper_ret
01690     2D 00 64 FD | 	ret
01694                 | 
01694                 | ' 
01694                 | ' '----------------------------------------------------------------------------------------------------------
01694                 | ' ' gethdi is called from the houseekeeper to read HDI related values
01694                 | ' '----------------------------------------------------------------------------------------------------------
01694                 | ' 
01694                 | ' sub gethdi
01694                 | _gethdi
01694     0A CA 05 F6 | 	mov	COUNT_, #10
01698     E8 00 A0 FD | 	call	#pushregs_
0169c                 | '   x := mouse_xacc
0169c     14 00 00 FF 
016a0     E1 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##10465
016a4     3B 95 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
016a8                 | '   y := mouse_yacc
016a8     04 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, #4
016ac     3B 93 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
016b0     53 00 00 FF 
016b4     C8 64 06 F1 | 	add	objptr, ##42696
016b8     32 95 62 FC | 	wrlong	arg02, objptr
016bc     04 64 06 F1 | 	add	objptr, #4
016c0     32 93 62 FC | 	wrlong	arg01, objptr
016c4                 | '   x := 0
016c4                 | '   y := mouse_zacc
016c4     04 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, #4
016c8     3B 7B 02 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
016cc     08 64 06 F1 | 	add	objptr, #8
016d0     32 7B 62 FC | 	wrlong	result1, objptr
016d4                 | '   return mouse_bstate
016d4     04 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, #4
016d8     3B 7B C2 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
016dc     14 00 00 FF 
016e0     ED 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10477
016e4     04 64 86 F1 | 	sub	objptr, #4
016e8     32 7B 62 FC | 	wrlong	result1, objptr
016ec     53 00 00 FF 
016f0     D0 64 86 F1 | 	sub	objptr, ##42704
016f4     00 A6 06 F6 | 	mov	local01, #0
016f8                 | ' 
016f8                 | ' mousex,mousey=kbm.mouse_xy()
016f8                 | ' dummy,mousew=kbm.mouse_scroll()
016f8                 | ' mousek=kbm.mouse_buttons()
016f8                 | ' i=0
016f8                 | ' for j=0 to 6
016f8     00 A8 06 F6 | 	mov	local02, #0
016fc                 | LR__0060
016fc                 | '   if kbm.hidpad_id(j)>0 then
016fc     54 93 02 F6 | 	mov	arg01, local02
01700                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
01700     3B 7B 02 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
01704     13 00 00 FF 
01708     F8 7B 06 F1 | 	add	result1, ##10232
0170c     05 92 66 F0 | 	shl	arg01, #5
01710     49 7B 02 F1 | 	add	result1, arg01
01714     3D 7B 02 FB | 	rdlong	result1, result1
01718     01 7A 56 F2 | 	cmps	result1, #1 wc
0171c     C8 01 90 CD |  if_b	jmp	#LR__0061
01720     54 93 02 F6 | 	mov	arg01, local02
01724     00 94 06 F6 | 	mov	arg02, #0
01728     88 2B B2 FD | 	call	#_usbnew_spin2_hidpad_axis
0172c     3D AB 02 F6 | 	mov	local03, result1
01730     54 93 02 F6 | 	mov	arg01, local02
01734     01 94 06 F6 | 	mov	arg02, #1
01738     78 2B B2 FD | 	call	#_usbnew_spin2_hidpad_axis
0173c     3D AD 02 F6 | 	mov	local04, result1
01740     54 93 02 F6 | 	mov	arg01, local02
01744     02 94 06 F6 | 	mov	arg02, #2
01748     68 2B B2 FD | 	call	#_usbnew_spin2_hidpad_axis
0174c     3D AF 02 F6 | 	mov	local05, result1
01750     54 93 02 F6 | 	mov	arg01, local02
01754     00 94 06 F6 | 	mov	arg02, #0
01758     94 2B B2 FD | 	call	#_usbnew_spin2_hidpad_hat
0175c     3D B1 02 F6 | 	mov	local06, result1
01760     54 93 02 F6 | 	mov	arg01, local02
01764     03 94 06 F6 | 	mov	arg02, #3
01768     48 2B B2 FD | 	call	#_usbnew_spin2_hidpad_axis
0176c     3D B3 02 F6 | 	mov	local07, result1
01770     54 93 02 F6 | 	mov	arg01, local02
01774     04 94 06 F6 | 	mov	arg02, #4
01778     38 2B B2 FD | 	call	#_usbnew_spin2_hidpad_axis
0177c     3D B5 02 F6 | 	mov	local08, result1
01780     54 93 02 F6 | 	mov	arg01, local02
01784     05 94 06 F6 | 	mov	arg02, #5
01788     28 2B B2 FD | 	call	#_usbnew_spin2_hidpad_axis
0178c     3D B7 02 F6 | 	mov	local09, result1
01790     54 93 02 F6 | 	mov	arg01, local02
01794     06 94 06 F6 | 	mov	arg02, #6
01798     18 2B B2 FD | 	call	#_usbnew_spin2_hidpad_axis
0179c     3D B9 02 F6 | 	mov	local10, result1
017a0     54 93 02 F6 | 	mov	arg01, local02
017a4     07 94 06 F6 | 	mov	arg02, #7
017a8     08 2B B2 FD | 	call	#_usbnew_spin2_hidpad_axis
017ac     53 93 02 F6 | 	mov	arg01, local01
017b0     02 92 66 F0 | 	shl	arg01, #2
017b4     53 00 00 FF 
017b8     D8 64 06 F1 | 	add	objptr, ##42712
017bc     32 93 02 F1 | 	add	arg01, objptr
017c0     49 AB 62 FC | 	wrlong	local03, arg01
017c4     53 93 02 F6 | 	mov	arg01, local01
017c8     02 92 66 F0 | 	shl	arg01, #2
017cc     1C 64 06 F1 | 	add	objptr, #28
017d0     32 93 02 F1 | 	add	arg01, objptr
017d4     49 AD 62 FC | 	wrlong	local04, arg01
017d8     53 93 02 F6 | 	mov	arg01, local01
017dc     02 92 66 F0 | 	shl	arg01, #2
017e0     1C 64 06 F1 | 	add	objptr, #28
017e4     32 93 02 F1 | 	add	arg01, objptr
017e8     49 AF 62 FC | 	wrlong	local05, arg01
017ec     53 AF 02 F6 | 	mov	local05, local01
017f0     02 AE 66 F0 | 	shl	local05, #2
017f4     1C 64 06 F1 | 	add	objptr, #28
017f8     32 AF 02 F1 | 	add	local05, objptr
017fc     57 B1 62 FC | 	wrlong	local06, local05
01800     53 B1 02 F6 | 	mov	local06, local01
01804     02 B0 66 F0 | 	shl	local06, #2
01808     1C 64 06 F1 | 	add	objptr, #28
0180c     32 B1 02 F1 | 	add	local06, objptr
01810     58 B3 62 FC | 	wrlong	local07, local06
01814     53 B3 02 F6 | 	mov	local07, local01
01818     02 B2 66 F0 | 	shl	local07, #2
0181c     1C 64 06 F1 | 	add	objptr, #28
01820     32 B3 02 F1 | 	add	local07, objptr
01824     59 B5 62 FC | 	wrlong	local08, local07
01828     53 B5 02 F6 | 	mov	local08, local01
0182c     02 B4 66 F0 | 	shl	local08, #2
01830     1C 64 06 F1 | 	add	objptr, #28
01834     32 B5 02 F1 | 	add	local08, objptr
01838     5A B7 62 FC | 	wrlong	local09, local08
0183c     53 B7 02 F6 | 	mov	local09, local01
01840     02 B6 66 F0 | 	shl	local09, #2
01844     1C 64 06 F1 | 	add	objptr, #28
01848     32 B7 02 F1 | 	add	local09, objptr
0184c     5B B9 62 FC | 	wrlong	local10, local09
01850     53 B9 02 F6 | 	mov	local10, local01
01854     02 B8 66 F0 | 	shl	local10, #2
01858     1C 64 06 F1 | 	add	objptr, #28
0185c     32 B9 02 F1 | 	add	local10, objptr
01860     5C 7B 62 FC | 	wrlong	result1, local10
01864     60 00 00 FF 
01868     00 AA 06 F1 | 	add	local03, ##49152
0186c     0F AA 46 F0 | 	shr	local03, #15
01870     01 B8 06 F6 | 	mov	local10, #1
01874     55 B9 02 F1 | 	add	local10, local03
01878     60 00 00 FF 
0187c     00 AC 06 F1 | 	add	local04, ##49152
01880     0F AC 46 F0 | 	shr	local04, #15
01884     01 B6 06 F6 | 	mov	local09, #1
01888     56 B7 02 F1 | 	add	local09, local04
0188c     53 B5 02 F6 | 	mov	local08, local01
01890     02 B4 66 F0 | 	shl	local08, #2
01894     1C 64 06 F1 | 	add	objptr, #28
01898     32 B5 02 F1 | 	add	local08, objptr
0189c     02 B6 66 F0 | 	shl	local09, #2
018a0     5B B9 02 F1 | 	add	local10, local09
018a4     5A B9 62 FC | 	wrlong	local10, local08
018a8     53 B9 02 F6 | 	mov	local10, local01
018ac     02 B8 66 F0 | 	shl	local10, #2
018b0     1C 64 06 F1 | 	add	objptr, #28
018b4     32 B9 02 F1 | 	add	local10, objptr
018b8     54 93 02 F6 | 	mov	arg01, local02
018bc     53 00 00 FF 
018c0     F0 65 86 F1 | 	sub	objptr, ##42992
018c4                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][6]
018c4     3B 7B 02 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
018c8     13 00 00 FF 
018cc     F8 7B 06 F1 | 	add	result1, ##10232
018d0     05 92 66 F0 | 	shl	arg01, #5
018d4     49 7B 02 F1 | 	add	result1, arg01
018d8     18 7A 06 F1 | 	add	result1, #24
018dc     3D 7B 02 FB | 	rdlong	result1, result1
018e0     5C 7B 62 FC | 	wrlong	result1, local10
018e4     01 A6 06 F1 | 	add	local01, #1
018e8                 | LR__0061
018e8     01 A8 06 F1 | 	add	local02, #1
018ec     07 A8 16 F2 | 	cmp	local02, #7 wc
018f0     08 FE 9F CD |  if_b	jmp	#LR__0060
018f4     D7 22 48 FB | 	callpa	#(@LR__0063-@LR__0062)>>2,fcache_load_ptr_
018f8                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
018f8                 | LR__0062
018f8     07 A6 16 F2 | 	cmp	local01, #7 wc
018fc     3C 00 90 3D |  if_ae	jmp	#LR__0064
01900     53 B9 02 F6 | 	mov	local10, local01
01904     02 B8 66 F0 | 	shl	local10, #2
01908     53 00 00 FF 
0190c     D4 65 06 F1 | 	add	objptr, ##42964
01910     32 B9 02 F1 | 	add	local10, objptr
01914     5C 01 68 FC | 	wrlong	#0, local10
01918     53 B9 02 F6 | 	mov	local10, local01
0191c     02 B8 66 F0 | 	shl	local10, #2
01920     1C 64 06 F1 | 	add	objptr, #28
01924     32 B9 02 F1 | 	add	local10, objptr
01928     5C 01 68 FC | 	wrlong	#0, local10
0192c     01 A6 06 F1 | 	add	local01, #1
01930     53 00 00 FF 
01934     F0 65 86 F1 | 	sub	objptr, ##42992
01938     BC FF 9F FD | 	jmp	#LR__0062
0193c                 | LR__0063
0193c                 | LR__0064
0193c     E7 F0 03 F6 | 	mov	ptra, fp
01940     F2 00 A0 FD | 	call	#popregs_
01944                 | _gethdi_ret
01944     2D 00 64 FD | 	ret
01948                 | 
01948                 | ' 
01948                 | ' '-------------------------------------------------------------------------------------------------------------
01948                 | ' '---------------------------------- Housekeeper stuff ends here ----------------------------------------------
01948                 | ' '-------------------------------------------------------------------------------------------------------------
01948                 | ' 
01948                 | ' '-------------------------------------------------------------------------------------------------------------
01948                 | ' '
01948                 | ' '                                     LINE INTERPRETER/TOKENIZER
01948                 | ' '
01948                 | ' '-------------------------------------------------------------------------------------------------------------
01948                 | ' 
01948                 | ' 
01948                 | ' sub interpret
01948                 | _interpret
01948     34 CA 05 F6 | 	mov	COUNT_, #52
0194c     E8 00 A0 FD | 	call	#pushregs_
01950     01 00 00 FF 
01954     80 F0 07 F1 | 	add	ptra, ##640
01958     38 00 00 FF 
0195c     9C 65 06 F1 | 	add	objptr, ##29084
01960     32 93 02 FB | 	rdlong	arg01, objptr
01964     38 00 00 FF 
01968     9C 65 86 F1 | 	sub	objptr, ##29084
0196c     D0 50 B2 FD | 	call	#__system__RTrim_S
01970     3D 93 02 F6 | 	mov	arg01, result1
01974     08 50 B2 FD | 	call	#__system__LTrim_S
01978     38 00 00 FF 
0197c     A0 65 06 F1 | 	add	objptr, ##29088
01980     32 7B 62 FC | 	wrlong	result1, objptr
01984     04 64 06 F1 | 	add	objptr, #4
01988     FF FF FF FF 
0198c     32 FF 6B FC | 	wrlong	##-1, objptr
01990     1B 00 00 FF 
01994     C4 64 06 F1 | 	add	objptr, ##14020
01998     32 01 68 FC | 	wrlong	#0, objptr
0199c     08 00 00 FF 
019a0     6C 64 86 F1 | 	sub	objptr, ##4204
019a4     32 01 68 FC | 	wrlong	#0, objptr
019a8     4B 00 00 FF 
019ac     FC 65 86 F1 | 	sub	objptr, ##38908
019b0     00 A6 06 F6 | 	mov	local01, #0
019b4                 | LR__0070
019b4                 | ' 
019b4                 | ' ' -------------------------    Pass 1: Split the line to parts, strip unneded spaces, lowercase parts, detect and concatenate strings
019b4                 | ' 
019b4                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
019b4                 | ' 
019b4                 | ' 108 
019b4                 | ' for i=0 to 125: separators(i)=0 :next i
019b4     00 A8 06 F6 | 	mov	local02, #0
019b8     38 CE 05 F1 | 	add	fp, #56
019bc     D7 0E 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
019c0                 | LR__0071
019c0     54 AB 02 F6 | 	mov	local03, local02
019c4     02 AA 66 F0 | 	shl	local03, #2
019c8     E7 AA 02 F1 | 	add	local03, fp
019cc     55 01 68 FC | 	wrlong	#0, local03
019d0     01 A8 06 F1 | 	add	local02, #1
019d4     7E A8 56 F2 | 	cmps	local02, #126 wc
019d8     E4 FF 9F CD |  if_b	jmp	#LR__0071
019dc                 | LR__0072
019dc     38 CE 85 F1 | 	sub	fp, #56
019e0                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
019e0     00 A8 06 F6 | 	mov	local02, #0
019e4     36 00 00 FF 
019e8     8C 65 06 F1 | 	add	objptr, ##28044
019ec     D7 20 48 FB | 	callpa	#(@LR__0074-@LR__0073)>>2,fcache_load_ptr_
019f0                 | LR__0073
019f0     54 AD 02 F6 | 	mov	local04, local02
019f4     03 AC 66 F0 | 	shl	local04, #3
019f8     32 AD 02 F1 | 	add	local04, objptr
019fc     94 01 00 FF 
01a00     74 96 06 F6 | 	mov	arg03, ##@LR__5499
01a04     56 97 62 FC | 	wrlong	arg03, local04
01a08     54 AD 02 F6 | 	mov	local04, local02
01a0c     03 AC 66 F0 | 	shl	local04, #3
01a10     32 AF 02 F6 | 	mov	local05, objptr
01a14     32 AD 02 F1 | 	add	local04, objptr
01a18     00 B0 06 F6 | 	mov	local06, #0
01a1c     04 AC 06 F1 | 	add	local04, #4
01a20     56 01 68 FC | 	wrlong	#0, local04
01a24     01 A8 06 F1 | 	add	local02, #1
01a28     7E A8 56 F2 | 	cmps	local02, #126 wc
01a2c     C0 FF 9F CD |  if_b	jmp	#LR__0073
01a30                 | LR__0074
01a30     02 00 00 FF 
01a34     10 64 06 F1 | 	add	objptr, ##1040
01a38     32 93 02 FB | 	rdlong	arg01, objptr
01a3c     38 00 00 FF 
01a40     9C 65 86 F1 | 	sub	objptr, ##29084
01a44     F8 4F B2 FD | 	call	#__system__RTrim_S
01a48     3D 93 02 F6 | 	mov	arg01, result1
01a4c     30 4F B2 FD | 	call	#__system__LTrim_S
01a50     38 00 00 FF 
01a54     9C 65 06 F1 | 	add	objptr, ##29084
01a58     32 7B 62 FC | 	wrlong	result1, objptr
01a5c     94 01 00 FF 
01a60     75 AC 06 F6 | 	mov	local04, ##@LR__5500
01a64     1B 00 00 FF 
01a68     08 65 06 F1 | 	add	objptr, ##14088
01a6c     32 AD 62 FC | 	wrlong	local04, objptr
01a70     1B 00 00 FF 
01a74     08 65 86 F1 | 	sub	objptr, ##14088
01a78     32 93 02 FB | 	rdlong	arg01, objptr
01a7c     38 00 00 FF 
01a80     9C 65 86 F1 | 	sub	objptr, ##29084
01a84     49 B3 02 F6 | 	mov	local07, arg01
01a88     D7 06 48 FB | 	callpa	#(@LR__0076-@LR__0075)>>2,fcache_load_ptr_
01a8c                 | LR__0075
01a8c     59 7B CA FA | 	rdbyte	result1, local07 wz
01a90     01 B2 06 51 |  if_ne	add	local07, #1
01a94     F4 FF 9F 5D |  if_ne	jmp	#LR__0075
01a98                 | LR__0076
01a98     49 B3 8A F1 | 	sub	local07, arg01 wz
01a9c     54 00 00 FF 
01aa0     A8 64 06 F1 | 	add	objptr, ##43176
01aa4     32 B3 62 FC | 	wrlong	local07, objptr
01aa8                 | ' if l=0 then goto 101					' empty line,  nothing to do except print "ready"
01aa8     54 00 00 FF 
01aac     A8 64 86 F1 | 	sub	objptr, ##43176
01ab0     E4 28 90 AD |  if_e	jmp	#LR__0210
01ab4     00 B4 06 F6 | 	mov	local08, #0
01ab8                 | ' d=0							' before we split the line, we have to find colons that are inside a string, 
01ab8                 | ' for i=1 to len(line$)
01ab8     01 A8 06 F6 | 	mov	local02, #1
01abc     38 00 00 FF 
01ac0     9C 65 06 F1 | 	add	objptr, ##29084
01ac4     32 93 02 FB | 	rdlong	arg01, objptr
01ac8     38 00 00 FF 
01acc     9C 65 86 F1 | 	sub	objptr, ##29084
01ad0     49 B3 02 F6 | 	mov	local07, arg01
01ad4     D7 06 48 FB | 	callpa	#(@LR__0078-@LR__0077)>>2,fcache_load_ptr_
01ad8                 | LR__0077
01ad8     59 7B CA FA | 	rdbyte	result1, local07 wz
01adc     01 B2 06 51 |  if_ne	add	local07, #1
01ae0     F4 FF 9F 5D |  if_ne	jmp	#LR__0077
01ae4                 | LR__0078
01ae4     49 B3 82 F1 | 	sub	local07, arg01
01ae8     59 B7 02 F6 | 	mov	local09, local07
01aec     01 B6 06 F1 | 	add	local09, #1
01af0                 | LR__0079
01af0     5B A9 52 F2 | 	cmps	local02, local09 wc
01af4     A4 00 90 3D |  if_ae	jmp	#LR__0081
01af8                 | '   if mid$(line$,i,1)="""" andalso d=0 then 		' they are inside a string if there is an odd number of " before :
01af8     38 00 00 FF 
01afc     9C 65 06 F1 | 	add	objptr, ##29084
01b00     32 93 02 FB | 	rdlong	arg01, objptr
01b04     38 00 00 FF 
01b08     9C 65 86 F1 | 	sub	objptr, ##29084
01b0c     54 95 02 F6 | 	mov	arg02, local02
01b10     01 96 06 F6 | 	mov	arg03, #1
01b14     B0 4B B2 FD | 	call	#__system__Mid_S
01b18     3D 93 02 F6 | 	mov	arg01, result1
01b1c     94 01 00 FF 
01b20     76 94 06 F6 | 	mov	arg02, ##@LR__5501
01b24     08 32 B2 FD | 	call	#__system___string_cmp
01b28     00 7A 0E F2 | 	cmp	result1, #0 wz
01b2c     00 B4 0E A2 |  if_e	cmp	local08, #0 wz
01b30     01 B4 06 A6 |  if_e	mov	local08, #1
01b34     3C 00 90 AD |  if_e	jmp	#LR__0080
01b38     38 00 00 FF 
01b3c     9C 65 06 F1 | 	add	objptr, ##29084
01b40     32 93 02 FB | 	rdlong	arg01, objptr
01b44     38 00 00 FF 
01b48     9C 65 86 F1 | 	sub	objptr, ##29084
01b4c     54 95 02 F6 | 	mov	arg02, local02
01b50     01 96 06 F6 | 	mov	arg03, #1
01b54     70 4B B2 FD | 	call	#__system__Mid_S
01b58     3D 93 02 F6 | 	mov	arg01, result1
01b5c     94 01 00 FF 
01b60     78 94 06 F6 | 	mov	arg02, ##@LR__5502
01b64     C8 31 B2 FD | 	call	#__system___string_cmp
01b68     00 7A 0E F2 | 	cmp	result1, #0 wz
01b6c     01 B4 0E A2 |  if_e	cmp	local08, #1 wz
01b70     00 B4 06 A6 |  if_e	mov	local08, #0
01b74                 | LR__0080
01b74     54 AD 02 F6 | 	mov	local04, local02
01b78     03 AC 66 F0 | 	shl	local04, #3
01b7c     32 AF 02 F6 | 	mov	local05, objptr
01b80     36 00 00 FF 
01b84     8C AF 06 F1 | 	add	local05, ##28044
01b88     57 AD 02 F1 | 	add	local04, local05
01b8c     04 AC 06 F1 | 	add	local04, #4
01b90     56 B5 62 FC | 	wrlong	local08, local04
01b94     01 A8 06 F1 | 	add	local02, #1
01b98     54 FF 9F FD | 	jmp	#LR__0079
01b9c                 | LR__0081
01b9c     01 A8 06 F6 | 	mov	local02, #1
01ba0                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop 		' find the first : that is not in a string
01ba0                 | LR__0082
01ba0     38 00 00 FF 
01ba4     9C 65 06 F1 | 	add	objptr, ##29084
01ba8     32 93 02 FB | 	rdlong	arg01, objptr
01bac     38 00 00 FF 
01bb0     9C 65 86 F1 | 	sub	objptr, ##29084
01bb4     54 95 02 F6 | 	mov	arg02, local02
01bb8     01 96 06 F6 | 	mov	arg03, #1
01bbc     08 4B B2 FD | 	call	#__system__Mid_S
01bc0     3D 93 02 F6 | 	mov	arg01, result1
01bc4     94 01 00 FF 
01bc8     7A B8 06 F6 | 	mov	local10, ##@LR__5503
01bcc     5C 95 02 F6 | 	mov	arg02, local10
01bd0     5C 31 B2 FD | 	call	#__system___string_cmp
01bd4     00 7A 0E F2 | 	cmp	result1, #0 wz
01bd8     2C 00 90 5D |  if_ne	jmp	#LR__0083
01bdc     54 AF 02 F6 | 	mov	local05, local02
01be0     03 AE 66 F0 | 	shl	local05, #3
01be4     32 B1 02 F6 | 	mov	local06, objptr
01be8     36 00 00 FF 
01bec     8C B1 06 F1 | 	add	local06, ##28044
01bf0     58 AF 02 F1 | 	add	local05, local06
01bf4     04 AE 06 F1 | 	add	local05, #4
01bf8     57 BB 02 FB | 	rdlong	local11, local05
01bfc     04 AE 86 F1 | 	sub	local05, #4
01c00     5D BD 0A F6 | 	mov	local12, local11 wz
01c04     24 00 90 AD |  if_e	jmp	#LR__0084
01c08                 | LR__0083
01c08     54 00 00 FF 
01c0c     A8 64 06 F1 | 	add	objptr, ##43176
01c10     32 BF 02 FB | 	rdlong	local13, objptr
01c14     54 00 00 FF 
01c18     A8 64 86 F1 | 	sub	objptr, ##43176
01c1c     5F C1 02 F6 | 	mov	local14, local13
01c20     60 A9 52 F2 | 	cmps	local02, local14 wc
01c24     01 A8 06 C1 |  if_b	add	local02, #1
01c28     74 FF 9F CD |  if_b	jmp	#LR__0082
01c2c                 | LR__0084
01c2c                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 	' and separate the part of the line before the first : from the rest
01c2c     54 00 00 FF 
01c30     A8 64 06 F1 | 	add	objptr, ##43176
01c34     32 AD 02 FB | 	rdlong	local04, objptr
01c38     54 00 00 FF 
01c3c     A8 64 86 F1 | 	sub	objptr, ##43176
01c40     56 A9 52 F2 | 	cmps	local02, local04 wc
01c44     A8 00 90 3D |  if_ae	jmp	#LR__0087
01c48     38 00 00 FF 
01c4c     9C 65 06 F1 | 	add	objptr, ##29084
01c50     32 B1 02 FB | 	rdlong	local06, objptr
01c54     38 00 00 FF 
01c58     9C 65 86 F1 | 	sub	objptr, ##29084
01c5c     58 93 02 F6 | 	mov	arg01, local06
01c60     49 B3 02 F6 | 	mov	local07, arg01
01c64     D7 06 48 FB | 	callpa	#(@LR__0086-@LR__0085)>>2,fcache_load_ptr_
01c68                 | LR__0085
01c68     59 7B CA FA | 	rdbyte	result1, local07 wz
01c6c     01 B2 06 51 |  if_ne	add	local07, #1
01c70     F4 FF 9F 5D |  if_ne	jmp	#LR__0085
01c74                 | LR__0086
01c74     49 B3 82 F1 | 	sub	local07, arg01
01c78     59 AF 02 F6 | 	mov	local05, local07
01c7c     57 95 02 F6 | 	mov	arg02, local05
01c80     54 95 82 F1 | 	sub	arg02, local02
01c84     58 93 02 F6 | 	mov	arg01, local06
01c88     AC 49 B2 FD | 	call	#__system__Right_S
01c8c     3D 93 02 F6 | 	mov	arg01, result1
01c90     AC 4D B2 FD | 	call	#__system__RTrim_S
01c94     3D 93 02 F6 | 	mov	arg01, result1
01c98     E4 4C B2 FD | 	call	#__system__LTrim_S
01c9c     54 00 00 FF 
01ca0     AC 64 06 F1 | 	add	objptr, ##43180
01ca4     32 7B 62 FC | 	wrlong	result1, objptr
01ca8     1B 00 00 FF 
01cac     10 65 86 F1 | 	sub	objptr, ##14096
01cb0     32 93 02 FB | 	rdlong	arg01, objptr
01cb4     38 00 00 FF 
01cb8     9C 65 86 F1 | 	sub	objptr, ##29084
01cbc     01 A8 86 F1 | 	sub	local02, #1
01cc0     54 95 02 F6 | 	mov	arg02, local02
01cc4     E8 48 B2 FD | 	call	#__system__Left_S
01cc8     3D 93 02 F6 | 	mov	arg01, result1
01ccc     70 4D B2 FD | 	call	#__system__RTrim_S
01cd0     3D 93 02 F6 | 	mov	arg01, result1
01cd4     A8 4C B2 FD | 	call	#__system__LTrim_S
01cd8     38 00 00 FF 
01cdc     9C 65 06 F1 | 	add	objptr, ##29084
01ce0     32 7B 62 FC | 	wrlong	result1, objptr
01ce4     38 00 00 FF 
01ce8     9C 65 86 F1 | 	sub	objptr, ##29084
01cec     1C 00 90 FD | 	jmp	#LR__0088
01cf0                 | LR__0087
01cf0     94 01 00 FF 
01cf4     7C AC 06 F6 | 	mov	local04, ##@LR__5504
01cf8     54 00 00 FF 
01cfc     AC 64 06 F1 | 	add	objptr, ##43180
01d00     32 AD 62 FC | 	wrlong	local04, objptr
01d04     54 00 00 FF 
01d08     AC 64 86 F1 | 	sub	objptr, ##43180
01d0c                 | LR__0088
01d0c                 | ' 
01d0c                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not the last part
01d0c     38 00 00 FF 
01d10     A4 65 06 F1 | 	add	objptr, ##29092
01d14     32 AD 02 FB | 	rdlong	local04, objptr
01d18     38 00 00 FF 
01d1c     A4 65 86 F1 | 	sub	objptr, ##29092
01d20     FF FF 7F FF 
01d24     FF AD 0E F2 | 	cmp	local04, ##-1 wz
01d28     40 00 90 5D |  if_ne	jmp	#LR__0089
01d2c     54 00 00 FF 
01d30     AC 64 06 F1 | 	add	objptr, ##43180
01d34     32 93 02 FB | 	rdlong	arg01, objptr
01d38     54 00 00 FF 
01d3c     AC 64 86 F1 | 	sub	objptr, ##43180
01d40     94 01 00 FF 
01d44     7D B0 06 F6 | 	mov	local06, ##@LR__5505
01d48     58 95 02 F6 | 	mov	arg02, local06
01d4c     E0 2F B2 FD | 	call	#__system___string_cmp
01d50     00 7A 0E F2 | 	cmp	result1, #0 wz
01d54     38 00 00 5F 
01d58     A4 65 06 51 |  if_ne	add	objptr, ##29092
01d5c     32 01 68 5C |  if_ne	wrlong	#0, objptr
01d60     38 00 00 5F 
01d64     A4 65 86 51 |  if_ne	sub	objptr, ##29092
01d68     08 01 90 5D |  if_ne	jmp	#LR__0093
01d6c                 | LR__0089
01d6c                 | ' if cont=-1 andalso rest$= "" then cont=3 : goto 107		' this is the first AND the last part
01d6c     38 00 00 FF 
01d70     A4 65 06 F1 | 	add	objptr, ##29092
01d74     32 AD 02 FB | 	rdlong	local04, objptr
01d78     38 00 00 FF 
01d7c     A4 65 86 F1 | 	sub	objptr, ##29092
01d80     FF FF 7F FF 
01d84     FF AD 0E F2 | 	cmp	local04, ##-1 wz
01d88     3C 00 90 5D |  if_ne	jmp	#LR__0090
01d8c     54 00 00 FF 
01d90     AC 64 06 F1 | 	add	objptr, ##43180
01d94     32 93 02 FB | 	rdlong	arg01, objptr
01d98     54 00 00 FF 
01d9c     AC 64 86 F1 | 	sub	objptr, ##43180
01da0     94 01 00 FF 
01da4     7E 94 06 F6 | 	mov	arg02, ##@LR__5506
01da8     84 2F B2 FD | 	call	#__system___string_cmp
01dac     00 7A 0E F2 | 	cmp	result1, #0 wz
01db0     38 00 00 AF 
01db4     A4 65 06 A1 |  if_e	add	objptr, ##29092
01db8     32 07 68 AC |  if_e	wrlong	#3, objptr
01dbc     38 00 00 AF 
01dc0     A4 65 86 A1 |  if_e	sub	objptr, ##29092
01dc4     AC 00 90 AD |  if_e	jmp	#LR__0093
01dc8                 | LR__0090
01dc8                 | ' if cont=4  andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
01dc8     38 00 00 FF 
01dcc     A4 65 06 F1 | 	add	objptr, ##29092
01dd0     32 AD 02 FB | 	rdlong	local04, objptr
01dd4     38 00 00 FF 
01dd8     A4 65 86 F1 | 	sub	objptr, ##29092
01ddc     04 AC 0E F2 | 	cmp	local04, #4 wz
01de0     3C 00 90 5D |  if_ne	jmp	#LR__0091
01de4     54 00 00 FF 
01de8     AC 64 06 F1 | 	add	objptr, ##43180
01dec     32 93 02 FB | 	rdlong	arg01, objptr
01df0     54 00 00 FF 
01df4     AC 64 86 F1 | 	sub	objptr, ##43180
01df8     94 01 00 FF 
01dfc     7F 94 06 F6 | 	mov	arg02, ##@LR__5507
01e00     2C 2F B2 FD | 	call	#__system___string_cmp
01e04     00 7A 0E F2 | 	cmp	result1, #0 wz
01e08     38 00 00 5F 
01e0c     A4 65 06 51 |  if_ne	add	objptr, ##29092
01e10     32 03 68 5C |  if_ne	wrlong	#1, objptr
01e14     38 00 00 5F 
01e18     A4 65 86 51 |  if_ne	sub	objptr, ##29092
01e1c     54 00 90 5D |  if_ne	jmp	#LR__0093
01e20                 | LR__0091
01e20                 | ' if cont=4  andalso rest$= "" then cont=2 : goto 107		' this is the last, and not the first, part
01e20     38 00 00 FF 
01e24     A4 65 06 F1 | 	add	objptr, ##29092
01e28     32 AD 02 FB | 	rdlong	local04, objptr
01e2c     38 00 00 FF 
01e30     A4 65 86 F1 | 	sub	objptr, ##29092
01e34     04 AC 0E F2 | 	cmp	local04, #4 wz
01e38     38 00 90 5D |  if_ne	jmp	#LR__0092
01e3c     54 00 00 FF 
01e40     AC 64 06 F1 | 	add	objptr, ##43180
01e44     32 93 02 FB | 	rdlong	arg01, objptr
01e48     54 00 00 FF 
01e4c     AC 64 86 F1 | 	sub	objptr, ##43180
01e50     94 01 00 FF 
01e54     80 94 06 F6 | 	mov	arg02, ##@LR__5508
01e58     D4 2E B2 FD | 	call	#__system___string_cmp
01e5c     00 7A 0E F2 | 	cmp	result1, #0 wz
01e60     38 00 00 AF 
01e64     A4 65 06 A1 |  if_e	add	objptr, ##29092
01e68     32 05 68 AC |  if_e	wrlong	#2, objptr
01e6c     38 00 00 AF 
01e70     A4 65 86 A1 |  if_e	sub	objptr, ##29092
01e74                 | LR__0092
01e74                 | LR__0093
01e74     38 CE 05 F1 | 	add	fp, #56
01e78     E7 00 68 FC | 	wrlong	#0, fp
01e7c     38 CE 85 F1 | 	sub	fp, #56
01e80     00 A8 06 F6 | 	mov	local02, #0
01e84     01 C2 06 F6 | 	mov	local15, #1
01e88                 | ' 
01e88                 | ' ' 1b: find separators
01e88                 | ' 
01e88                 | ' 107
01e88                 | ' separators(0)=0
01e88                 | ' i=0: j=1
01e88                 | ' do: 
01e88                 | LR__0094
01e88     01 A8 06 F1 | 	add	local02, #1
01e8c     38 00 00 FF 
01e90     9C 65 06 F1 | 	add	objptr, ##29084
01e94     32 93 02 FB | 	rdlong	arg01, objptr
01e98     38 00 00 FF 
01e9c     9C 65 86 F1 | 	sub	objptr, ##29084
01ea0     54 95 02 F6 | 	mov	arg02, local02
01ea4     01 96 06 F6 | 	mov	arg03, #1
01ea8     1C 48 B2 FD | 	call	#__system__Mid_S
01eac     3D C5 02 F6 | 	mov	local16, result1
01eb0                 | '   i+=1 : c$=mid$(line$,i,1) : if isseparator(c$) then separators(j)=i: j+=1 
01eb0     62 93 02 F6 | 	mov	arg01, local16
01eb4     48 2D B0 FD | 	call	#_isseparator
01eb8     00 7A 0E F2 | 	cmp	result1, #0 wz
01ebc     1C 00 90 AD |  if_e	jmp	#LR__0095
01ec0     61 AB 02 F6 | 	mov	local03, local15
01ec4     02 AA 66 F0 | 	shl	local03, #2
01ec8     E7 B8 02 F6 | 	mov	local10, fp
01ecc     38 B8 06 F1 | 	add	local10, #56
01ed0     5C AB 02 F1 | 	add	local03, local10
01ed4     55 A9 62 FC | 	wrlong	local02, local03
01ed8     01 C2 06 F1 | 	add	local15, #1
01edc                 | LR__0095
01edc     54 00 00 FF 
01ee0     A8 64 06 F1 | 	add	objptr, ##43176
01ee4     32 AD 02 FB | 	rdlong	local04, objptr
01ee8     54 00 00 FF 
01eec     A8 64 86 F1 | 	sub	objptr, ##43176
01ef0     56 A9 5A F2 | 	cmps	local02, local04 wcz
01ef4     90 FF 9F ED |  if_be	jmp	#LR__0094
01ef8     61 AB 02 F6 | 	mov	local03, local15
01efc     02 AA 66 F0 | 	shl	local03, #2
01f00     E7 B8 02 F6 | 	mov	local10, fp
01f04     38 B8 06 F1 | 	add	local10, #56
01f08     5C AB 02 F1 | 	add	local03, local10
01f0c     55 A9 62 FC | 	wrlong	local02, local03
01f10     00 C6 06 F6 | 	mov	local17, #0
01f14                 | ' for i=0 to j-1 
01f14     00 A8 06 F6 | 	mov	local02, #0
01f18     61 C9 02 F6 | 	mov	local18, local15
01f1c                 | LR__0096
01f1c     64 A9 52 F2 | 	cmps	local02, local18 wc
01f20     48 01 90 3D |  if_ae	jmp	#LR__0100
01f24     54 AB 02 F6 | 	mov	local03, local02
01f28     02 AA 66 F0 | 	shl	local03, #2
01f2c     38 CE 05 F1 | 	add	fp, #56
01f30     E7 AA 02 F1 | 	add	local03, fp
01f34     55 AF 02 FB | 	rdlong	local05, local03
01f38     54 00 00 FF 
01f3c     B4 64 06 F1 | 	add	objptr, ##43188
01f40     32 AF 62 FC | 	wrlong	local05, objptr
01f44     54 AB 02 F6 | 	mov	local03, local02
01f48     01 AA 06 F1 | 	add	local03, #1
01f4c     02 AA 66 F0 | 	shl	local03, #2
01f50     E7 B8 02 F6 | 	mov	local10, fp
01f54     E7 AA 02 F1 | 	add	local03, fp
01f58     55 AF 02 FB | 	rdlong	local05, local03
01f5c     04 64 06 F1 | 	add	objptr, #4
01f60     32 AF 62 FC | 	wrlong	local05, objptr
01f64                 | '   if p1>0 then let p$=mid$(line$,p1,1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01f64     04 64 86 F1 | 	sub	objptr, #4
01f68     32 AD 02 FB | 	rdlong	local04, objptr
01f6c     54 00 00 FF 
01f70     B4 64 86 F1 | 	sub	objptr, ##43188
01f74     01 AC 56 F2 | 	cmps	local04, #1 wc
01f78     38 CE 85 F1 | 	sub	fp, #56
01f7c     64 00 90 CD |  if_b	jmp	#LR__0098
01f80     38 00 00 FF 
01f84     9C 65 06 F1 | 	add	objptr, ##29084
01f88     32 93 02 FB | 	rdlong	arg01, objptr
01f8c     1B 00 00 FF 
01f90     18 65 06 F1 | 	add	objptr, ##14104
01f94     32 95 02 FB | 	rdlong	arg02, objptr
01f98     54 00 00 FF 
01f9c     B4 64 86 F1 | 	sub	objptr, ##43188
01fa0     01 96 06 F6 | 	mov	arg03, #1
01fa4     20 47 B2 FD | 	call	#__system__Mid_S
01fa8     3D CB 02 F6 | 	mov	local19, result1
01fac     94 01 00 FF 
01fb0     81 94 06 F6 | 	mov	arg02, ##@LR__5509
01fb4     65 93 02 F6 | 	mov	arg01, local19
01fb8     74 2D B2 FD | 	call	#__system___string_cmp
01fbc     00 7A 0E F2 | 	cmp	result1, #0 wz
01fc0     20 00 90 AD |  if_e	jmp	#LR__0097
01fc4     63 B9 02 F6 | 	mov	local10, local17
01fc8     03 B8 66 F0 | 	shl	local10, #3
01fcc     32 AF 02 F6 | 	mov	local05, objptr
01fd0     36 00 00 FF 
01fd4     8C AF 06 F1 | 	add	local05, ##28044
01fd8     57 B9 02 F1 | 	add	local10, local05
01fdc     5C CB 62 FC | 	wrlong	local19, local10
01fe0     01 C6 06 F1 | 	add	local17, #1
01fe4                 | LR__0097
01fe4                 | LR__0098
01fe4     38 00 00 FF 
01fe8     9C 65 06 F1 | 	add	objptr, ##29084
01fec     32 93 02 FB | 	rdlong	arg01, objptr
01ff0     1B 00 00 FF 
01ff4     18 65 06 F1 | 	add	objptr, ##14104
01ff8     32 95 02 FB | 	rdlong	arg02, objptr
01ffc     01 94 06 F1 | 	add	arg02, #1
02000     04 64 06 F1 | 	add	objptr, #4
02004     32 97 02 FB | 	rdlong	arg03, objptr
02008     04 64 86 F1 | 	sub	objptr, #4
0200c     32 BB 02 FB | 	rdlong	local11, objptr
02010     54 00 00 FF 
02014     B4 64 86 F1 | 	sub	objptr, ##43188
02018     5D BD 02 F6 | 	mov	local12, local11
0201c     5E 97 82 F1 | 	sub	arg03, local12
02020     01 96 86 F1 | 	sub	arg03, #1
02024     A0 46 B2 FD | 	call	#__system__Mid_S
02028     3D CB 02 F6 | 	mov	local19, result1
0202c                 | '   p$=mid$(line$,p1+1,p2-p1-1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
0202c     94 01 00 FF 
02030     82 94 06 F6 | 	mov	arg02, ##@LR__5510
02034     65 93 02 F6 | 	mov	arg01, local19
02038     F4 2C B2 FD | 	call	#__system___string_cmp
0203c     00 7A 0E F2 | 	cmp	result1, #0 wz
02040     20 00 90 AD |  if_e	jmp	#LR__0099
02044     63 B9 02 F6 | 	mov	local10, local17
02048     03 B8 66 F0 | 	shl	local10, #3
0204c     32 AF 02 F6 | 	mov	local05, objptr
02050     36 00 00 FF 
02054     8C AF 06 F1 | 	add	local05, ##28044
02058     57 B9 02 F1 | 	add	local10, local05
0205c     5C CB 62 FC | 	wrlong	local19, local10
02060     01 C6 06 F1 | 	add	local17, #1
02064                 | LR__0099
02064     01 A8 06 F1 | 	add	local02, #1
02068     B0 FE 9F FD | 	jmp	#LR__0096
0206c                 | LR__0100
0206c                 | ' 
0206c                 | ' ' 1d  : first part has to have a line number, if not, add 0 for the immediate line
0206c                 | ' 
0206c                 | ' if (cont=0 orelse cont=3) andalso (not isdec(lparts(0).part$))  then for i=k to 1 step -1: lparts(i)=lparts(i-1) : next i: lparts(0).part$="0" : k+=1
0206c     38 00 00 FF 
02070     A4 65 06 F1 | 	add	objptr, ##29092
02074     32 AD 0A FB | 	rdlong	local04, objptr wz
02078     38 00 00 FF 
0207c     A4 65 86 F1 | 	sub	objptr, ##29092
02080     38 00 00 5F 
02084     A4 65 06 51 |  if_ne	add	objptr, ##29092
02088     32 B9 02 5B |  if_ne	rdlong	local10, objptr
0208c     38 00 00 5F 
02090     A4 65 86 51 |  if_ne	sub	objptr, ##29092
02094     03 B8 0E 52 |  if_ne	cmp	local10, #3 wz
02098     C0 00 90 5D |  if_ne	jmp	#LR__0103
0209c     36 00 00 FF 
020a0     8C 65 06 F1 | 	add	objptr, ##28044
020a4     32 BB 02 FB | 	rdlong	local11, objptr
020a8     36 00 00 FF 
020ac     8C 65 86 F1 | 	sub	objptr, ##28044
020b0     5D 93 02 F6 | 	mov	arg01, local11
020b4     2C 50 B0 FD | 	call	#_isdec
020b8     3D BD 02 F6 | 	mov	local12, result1
020bc     5E B1 02 F6 | 	mov	local06, local12
020c0     07 B0 66 F7 | 	signx	local06, #7
020c4     58 B1 22 F6 | 	not	local06, local06
020c8     00 B0 0E F2 | 	cmp	local06, #0 wz
020cc     8C 00 90 AD |  if_e	jmp	#LR__0103
020d0     63 A9 02 F6 | 	mov	local02, local17
020d4     36 00 00 FF 
020d8     8C 65 06 F1 | 	add	objptr, ##28044
020dc     D7 32 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
020e0                 | LR__0101
020e0     54 AF 02 F6 | 	mov	local05, local02
020e4     01 AE 86 F1 | 	sub	local05, #1
020e8     03 AE 66 F0 | 	shl	local05, #3
020ec     32 AF 02 F1 | 	add	local05, objptr
020f0     57 AD 02 FB | 	rdlong	local04, local05
020f4     54 B1 02 F6 | 	mov	local06, local02
020f8     01 B0 86 F1 | 	sub	local06, #1
020fc     03 B0 66 F0 | 	shl	local06, #3
02100     32 B1 02 F1 | 	add	local06, objptr
02104     04 B0 06 F1 | 	add	local06, #4
02108     58 AB 02 FB | 	rdlong	local03, local06
0210c     54 B1 02 F6 | 	mov	local06, local02
02110     03 B0 66 F0 | 	shl	local06, #3
02114     32 BD 02 F6 | 	mov	local12, objptr
02118     32 B1 02 F1 | 	add	local06, objptr
0211c     58 AD 62 FC | 	wrlong	local04, local06
02120     54 BB 02 F6 | 	mov	local11, local02
02124     5D BF 02 F6 | 	mov	local13, local11
02128     03 BE 66 F0 | 	shl	local13, #3
0212c     32 BF 02 F1 | 	add	local13, objptr
02130     04 BE 06 F1 | 	add	local13, #4
02134     5F AB 62 FC | 	wrlong	local03, local13
02138     01 A8 86 F1 | 	sub	local02, #1
0213c     01 A8 56 F2 | 	cmps	local02, #1 wc
02140     9C FF 9F 3D |  if_ae	jmp	#LR__0101
02144                 | LR__0102
02144     94 01 00 FF 
02148     83 AC 06 F6 | 	mov	local04, ##@LR__5511
0214c     32 AD 62 FC | 	wrlong	local04, objptr
02150     36 00 00 FF 
02154     8C 65 86 F1 | 	sub	objptr, ##28044
02158     01 C6 06 F1 | 	add	local17, #1
0215c                 | LR__0103
0215c     00 A8 06 F6 | 	mov	local02, #0
02160                 | ' 
02160                 | ' ' 1e : find strings
02160                 | ' 
02160                 | ' i=0
02160                 | ' do
02160                 | LR__0104
02160                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
02160     54 AF 02 F6 | 	mov	local05, local02
02164     03 AE 66 F0 | 	shl	local05, #3
02168     32 B1 02 F6 | 	mov	local06, objptr
0216c     36 00 00 FF 
02170     8C B1 06 F1 | 	add	local06, ##28044
02174     58 AF 02 F1 | 	add	local05, local06
02178     57 93 02 FB | 	rdlong	arg01, local05
0217c     94 01 00 FF 
02180     85 94 06 F6 | 	mov	arg02, ##@LR__5512
02184     A8 2B B2 FD | 	call	#__system___string_cmp
02188     00 7A 0E F2 | 	cmp	result1, #0 wz
0218c     01 A8 06 51 |  if_ne	add	local02, #1
02190     20 01 90 5D |  if_ne	jmp	#LR__0109
02194     54 CD 02 F6 | 	mov	local20, local02
02198                 | LR__0105
02198     54 B9 02 F6 | 	mov	local10, local02
0219c     01 B8 06 F1 | 	add	local10, #1
021a0     03 B8 66 F0 | 	shl	local10, #3
021a4     36 00 00 FF 
021a8     8C 65 06 F1 | 	add	objptr, ##28044
021ac     32 B9 02 F1 | 	add	local10, objptr
021b0     5C CB 02 FB | 	rdlong	local19, local10
021b4     66 B9 02 F6 | 	mov	local10, local20
021b8     03 B8 66 F0 | 	shl	local10, #3
021bc     32 B9 02 F1 | 	add	local10, objptr
021c0     66 BB 02 F6 | 	mov	local11, local20
021c4     5D C1 02 F6 | 	mov	local14, local11
021c8     03 C0 66 F0 | 	shl	local14, #3
021cc     32 C1 02 F1 | 	add	local14, objptr
021d0     60 93 02 FB | 	rdlong	arg01, local14
021d4     65 BD 02 F6 | 	mov	local12, local19
021d8     5E 95 02 F6 | 	mov	arg02, local12
021dc     36 00 00 FF 
021e0     8C 65 86 F1 | 	sub	objptr, ##28044
021e4     7C 2B B2 FD | 	call	#__system___string_concat
021e8     5C 7B 62 FC | 	wrlong	result1, local10
021ec     54 C3 02 F6 | 	mov	local15, local02
021f0     01 C2 06 F1 | 	add	local15, #1
021f4     63 CF 02 F6 | 	mov	local21, local17
021f8     01 CE 06 F1 | 	add	local21, #1
021fc     D7 3C 48 FB | 	callpa	#(@LR__0107-@LR__0106)>>2,fcache_load_ptr_
02200                 | LR__0106
02200     67 C3 52 F2 | 	cmps	local15, local21 wc
02204     70 00 90 3D |  if_ae	jmp	#LR__0108
02208     61 AF 02 F6 | 	mov	local05, local15
0220c     01 AE 06 F1 | 	add	local05, #1
02210     03 AE 66 F0 | 	shl	local05, #3
02214     36 00 00 FF 
02218     8C 65 06 F1 | 	add	objptr, ##28044
0221c     32 AF 02 F1 | 	add	local05, objptr
02220     57 AD 02 FB | 	rdlong	local04, local05
02224     61 B1 02 F6 | 	mov	local06, local15
02228     01 B0 06 F1 | 	add	local06, #1
0222c     03 B0 66 F0 | 	shl	local06, #3
02230     32 B1 02 F1 | 	add	local06, objptr
02234     04 B0 06 F1 | 	add	local06, #4
02238     58 AB 02 FB | 	rdlong	local03, local06
0223c     61 B1 02 F6 | 	mov	local06, local15
02240     03 B0 66 F0 | 	shl	local06, #3
02244     32 BD 02 F6 | 	mov	local12, objptr
02248     32 B1 02 F1 | 	add	local06, objptr
0224c     58 AD 62 FC | 	wrlong	local04, local06
02250     61 BB 02 F6 | 	mov	local11, local15
02254     5D BF 02 F6 | 	mov	local13, local11
02258     03 BE 66 F0 | 	shl	local13, #3
0225c     32 BF 02 F1 | 	add	local13, objptr
02260     04 BE 06 F1 | 	add	local13, #4
02264     5F AB 62 FC | 	wrlong	local03, local13
02268     01 C2 06 F1 | 	add	local15, #1
0226c     36 00 00 FF 
02270     8C 65 86 F1 | 	sub	objptr, ##28044
02274     88 FF 9F FD | 	jmp	#LR__0106
02278                 | LR__0107
02278                 | LR__0108
02278     01 C6 86 F1 | 	sub	local17, #1
0227c     94 01 00 FF 
02280     87 94 06 F6 | 	mov	arg02, ##@LR__5513
02284     65 93 02 F6 | 	mov	arg01, local19
02288     A4 2A B2 FD | 	call	#__system___string_cmp
0228c     00 7A 0E F2 | 	cmp	result1, #0 wz
02290     63 A9 52 52 |  if_ne	cmps	local02, local17 wc
02294     00 FF 9F 4D |  if_c_and_nz	jmp	#LR__0105
02298                 | '   if p$<>"""" then k+=1:i+=1
02298     94 01 00 FF 
0229c     89 94 06 F6 | 	mov	arg02, ##@LR__5514
022a0     65 93 02 F6 | 	mov	arg01, local19
022a4     88 2A B2 FD | 	call	#__system___string_cmp
022a8     00 7A 0E F2 | 	cmp	result1, #0 wz
022ac     01 C6 06 51 |  if_ne	add	local17, #1
022b0     01 A8 06 51 |  if_ne	add	local02, #1
022b4                 | LR__0109
022b4     63 A9 52 F2 | 	cmps	local02, local17 wc
022b8     A4 FE 9F CD |  if_b	jmp	#LR__0104
022bc     00 A8 06 F6 | 	mov	local02, #0
022c0                 | ' 
022c0                 | ' ' 1f : concatenate strings if "" detected between
022c0                 | '  
022c0                 | ' i=0
022c0                 | ' do
022c0                 | LR__0110
022c0                 | '   if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
022c0     54 AF 02 F6 | 	mov	local05, local02
022c4     03 AE 66 F0 | 	shl	local05, #3
022c8     32 B1 02 F6 | 	mov	local06, objptr
022cc     36 00 00 FF 
022d0     8C B1 06 F1 | 	add	local06, ##28044
022d4     58 AF 02 F1 | 	add	local05, local06
022d8     57 93 02 FB | 	rdlong	arg01, local05
022dc     01 94 06 F6 | 	mov	arg02, #1
022e0     54 43 B2 FD | 	call	#__system__Right_S
022e4     3D 93 02 F6 | 	mov	arg01, result1
022e8     94 01 00 FF 
022ec     8B 94 06 F6 | 	mov	arg02, ##@LR__5515
022f0     3C 2A B2 FD | 	call	#__system___string_cmp
022f4     00 7A 0E F2 | 	cmp	result1, #0 wz
022f8     74 01 90 5D |  if_ne	jmp	#LR__0116
022fc     54 B1 02 F6 | 	mov	local06, local02
02300     01 B0 06 F1 | 	add	local06, #1
02304     03 B0 66 F0 | 	shl	local06, #3
02308     32 BD 02 F6 | 	mov	local12, objptr
0230c     36 00 00 FF 
02310     8C BD 06 F1 | 	add	local12, ##28044
02314     5E B1 02 F1 | 	add	local06, local12
02318     58 93 02 FB | 	rdlong	arg01, local06
0231c     01 94 06 F6 | 	mov	arg02, #1
02320     8C 42 B2 FD | 	call	#__system__Left_S
02324     3D 93 02 F6 | 	mov	arg01, result1
02328     94 01 00 FF 
0232c     8D 94 06 F6 | 	mov	arg02, ##@LR__5516
02330     FC 29 B2 FD | 	call	#__system___string_cmp
02334     00 7A 0E F2 | 	cmp	result1, #0 wz
02338     34 01 90 5D |  if_ne	jmp	#LR__0116
0233c     54 B9 02 F6 | 	mov	local10, local02
02340     03 B8 66 F0 | 	shl	local10, #3
02344     36 00 00 FF 
02348     8C 65 06 F1 | 	add	objptr, ##28044
0234c     32 B9 02 F1 | 	add	local10, objptr
02350     54 C1 02 F6 | 	mov	local14, local02
02354     03 C0 66 F0 | 	shl	local14, #3
02358     32 C1 02 F1 | 	add	local14, objptr
0235c     60 B1 02 FB | 	rdlong	local06, local14
02360     54 BF 02 F6 | 	mov	local13, local02
02364     01 BE 06 F1 | 	add	local13, #1
02368     03 BE 66 F0 | 	shl	local13, #3
0236c     32 BF 02 F1 | 	add	local13, objptr
02370     5F BD 02 FB | 	rdlong	local12, local13
02374     54 D1 02 F6 | 	mov	local22, local02
02378     01 D0 06 F1 | 	add	local22, #1
0237c     68 D3 02 F6 | 	mov	local23, local22
02380     03 D2 66 F0 | 	shl	local23, #3
02384     32 D5 02 F6 | 	mov	local24, objptr
02388     32 D3 02 F1 | 	add	local23, objptr
0238c     69 93 02 FB | 	rdlong	arg01, local23
02390     36 00 00 FF 
02394     8C 65 86 F1 | 	sub	objptr, ##28044
02398     49 B3 02 F6 | 	mov	local07, arg01
0239c     D7 06 48 FB | 	callpa	#(@LR__0112-@LR__0111)>>2,fcache_load_ptr_
023a0                 | LR__0111
023a0     59 7B CA FA | 	rdbyte	result1, local07 wz
023a4     01 B2 06 51 |  if_ne	add	local07, #1
023a8     F4 FF 9F 5D |  if_ne	jmp	#LR__0111
023ac                 | LR__0112
023ac     49 B3 82 F1 | 	sub	local07, arg01
023b0     59 BB 02 F6 | 	mov	local11, local07
023b4     01 BA 86 F1 | 	sub	local11, #1
023b8     5E 93 02 F6 | 	mov	arg01, local12
023bc     5D 95 02 F6 | 	mov	arg02, local11
023c0     74 42 B2 FD | 	call	#__system__Right_S
023c4     3D BD 02 F6 | 	mov	local12, result1
023c8     58 93 02 F6 | 	mov	arg01, local06
023cc     5E 95 02 F6 | 	mov	arg02, local12
023d0     90 29 B2 FD | 	call	#__system___string_concat
023d4     3D B1 02 F6 | 	mov	local06, result1
023d8     5C B1 62 FC | 	wrlong	local06, local10
023dc                 | '     for j=i+1 to k: lparts(j)=lparts(j+1): next j  
023dc     54 C3 02 F6 | 	mov	local15, local02
023e0     01 C2 06 F1 | 	add	local15, #1
023e4     63 D7 02 F6 | 	mov	local25, local17
023e8     01 D6 06 F1 | 	add	local25, #1
023ec     D7 3C 48 FB | 	callpa	#(@LR__0114-@LR__0113)>>2,fcache_load_ptr_
023f0                 | LR__0113
023f0     6B C3 52 F2 | 	cmps	local15, local25 wc
023f4     70 00 90 3D |  if_ae	jmp	#LR__0115
023f8     61 AF 02 F6 | 	mov	local05, local15
023fc     01 AE 06 F1 | 	add	local05, #1
02400     03 AE 66 F0 | 	shl	local05, #3
02404     36 00 00 FF 
02408     8C 65 06 F1 | 	add	objptr, ##28044
0240c     32 AF 02 F1 | 	add	local05, objptr
02410     57 AD 02 FB | 	rdlong	local04, local05
02414     61 B1 02 F6 | 	mov	local06, local15
02418     01 B0 06 F1 | 	add	local06, #1
0241c     03 B0 66 F0 | 	shl	local06, #3
02420     32 B1 02 F1 | 	add	local06, objptr
02424     04 B0 06 F1 | 	add	local06, #4
02428     58 AB 02 FB | 	rdlong	local03, local06
0242c     61 B1 02 F6 | 	mov	local06, local15
02430     03 B0 66 F0 | 	shl	local06, #3
02434     32 BD 02 F6 | 	mov	local12, objptr
02438     32 B1 02 F1 | 	add	local06, objptr
0243c     58 AD 62 FC | 	wrlong	local04, local06
02440     61 BB 02 F6 | 	mov	local11, local15
02444     5D BF 02 F6 | 	mov	local13, local11
02448     03 BE 66 F0 | 	shl	local13, #3
0244c     32 BF 02 F1 | 	add	local13, objptr
02450     04 BE 06 F1 | 	add	local13, #4
02454     5F AB 62 FC | 	wrlong	local03, local13
02458     01 C2 06 F1 | 	add	local15, #1
0245c     36 00 00 FF 
02460     8C 65 86 F1 | 	sub	objptr, ##28044
02464     88 FF 9F FD | 	jmp	#LR__0113
02468                 | LR__0114
02468                 | LR__0115
02468     01 A8 86 F1 | 	sub	local02, #1
0246c     01 C6 86 F1 | 	sub	local17, #1
02470                 | LR__0116
02470     01 A8 06 F1 | 	add	local02, #1
02474     63 A9 52 F2 | 	cmps	local02, local17 wc
02478     44 FE 9F CD |  if_b	jmp	#LR__0110
0247c     00 A8 06 F6 | 	mov	local02, #0
02480                 | '  
02480                 | ' ' 1g: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
02480                 | '  
02480                 | ' i=0 
02480                 | ' do
02480                 | LR__0117
02480     54 B9 02 F6 | 	mov	local10, local02
02484     03 B8 66 F0 | 	shl	local10, #3
02488     36 00 00 FF 
0248c     8C 65 06 F1 | 	add	objptr, ##28044
02490     32 B9 02 F1 | 	add	local10, objptr
02494     5C D9 02 FB | 	rdlong	local26, local10
02498     54 B9 02 F6 | 	mov	local10, local02
0249c     01 B8 06 F1 | 	add	local10, #1
024a0     03 B8 66 F0 | 	shl	local10, #3
024a4     32 B9 02 F1 | 	add	local10, objptr
024a8     5C DB 02 FB | 	rdlong	local27, local10
024ac                 | '   s1$=lparts(i).part$ : s2$=lparts(i+1).part$
024ac                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
024ac     94 01 00 FF 
024b0     8F 94 06 F6 | 	mov	arg02, ##@LR__5517
024b4     6C 93 02 F6 | 	mov	arg01, local26
024b8     36 00 00 FF 
024bc     8C 65 86 F1 | 	sub	objptr, ##28044
024c0     6C 28 B2 FD | 	call	#__system___string_cmp
024c4     00 7A 0E F2 | 	cmp	result1, #0 wz
024c8     A8 00 90 AD |  if_e	jmp	#LR__0118
024cc     94 01 00 FF 
024d0     91 94 06 F6 | 	mov	arg02, ##@LR__5518
024d4     6C 93 02 F6 | 	mov	arg01, local26
024d8     54 28 B2 FD | 	call	#__system___string_cmp
024dc     3D AB 0A F6 | 	mov	local03, result1 wz
024e0     90 00 90 AD |  if_e	jmp	#LR__0118
024e4     94 01 00 FF 
024e8     93 B0 06 F6 | 	mov	local06, ##@LR__5519
024ec     6C 93 02 F6 | 	mov	arg01, local26
024f0     58 95 02 F6 | 	mov	arg02, local06
024f4     38 28 B2 FD | 	call	#__system___string_cmp
024f8     00 7A 0E F2 | 	cmp	result1, #0 wz
024fc     74 00 90 AD |  if_e	jmp	#LR__0118
02500     94 01 00 FF 
02504     95 BC 06 F6 | 	mov	local12, ##@LR__5520
02508     6C 93 02 F6 | 	mov	arg01, local26
0250c     5E 95 02 F6 | 	mov	arg02, local12
02510     1C 28 B2 FD | 	call	#__system___string_cmp
02514     00 7A 0E F2 | 	cmp	result1, #0 wz
02518     58 00 90 AD |  if_e	jmp	#LR__0118
0251c     94 01 00 FF 
02520     97 BA 06 F6 | 	mov	local11, ##@LR__5521
02524     5D BD 02 F6 | 	mov	local12, local11
02528     6C 93 02 F6 | 	mov	arg01, local26
0252c     5E 95 02 F6 | 	mov	arg02, local12
02530     FC 27 B2 FD | 	call	#__system___string_cmp
02534     3D B1 0A F6 | 	mov	local06, result1 wz
02538     38 00 90 AD |  if_e	jmp	#LR__0118
0253c     94 01 00 FF 
02540     99 BA 06 F6 | 	mov	local11, ##@LR__5522
02544     6C 93 02 F6 | 	mov	arg01, local26
02548     5D 95 02 F6 | 	mov	arg02, local11
0254c     E0 27 B2 FD | 	call	#__system___string_cmp
02550     3D BD 0A F6 | 	mov	local12, result1 wz
02554     1C 00 90 AD |  if_e	jmp	#LR__0118
02558     94 01 00 FF 
0255c     9B C0 06 F6 | 	mov	local14, ##@LR__5523
02560     6C 93 02 F6 | 	mov	arg01, local26
02564     60 95 02 F6 | 	mov	arg02, local14
02568     C4 27 B2 FD | 	call	#__system___string_cmp
0256c     3D BB 0A F6 | 	mov	local11, result1 wz
02570     20 00 90 5D |  if_ne	jmp	#LR__0119
02574                 | LR__0118
02574     94 01 00 FF 
02578     9D DC 06 F6 | 	mov	local28, ##@LR__5524
0257c     6E BF 02 F6 | 	mov	local13, local28
02580     6D 93 02 F6 | 	mov	arg01, local27
02584     5F 95 02 F6 | 	mov	arg02, local13
02588     A4 27 B2 FD | 	call	#__system___string_cmp
0258c     3D C1 0A F6 | 	mov	local14, result1 wz
02590     B8 00 90 AD |  if_e	jmp	#LR__0122
02594                 | LR__0119
02594     94 01 00 FF 
02598     9F DC 06 F6 | 	mov	local28, ##@LR__5525
0259c     6C 93 02 F6 | 	mov	arg01, local26
025a0     6E 95 02 F6 | 	mov	arg02, local28
025a4     88 27 B2 FD | 	call	#__system___string_cmp
025a8     3D BF 0A F6 | 	mov	local13, result1 wz
025ac     20 00 90 5D |  if_ne	jmp	#LR__0120
025b0     94 01 00 FF 
025b4     A1 D2 06 F6 | 	mov	local23, ##@LR__5526
025b8     69 D1 02 F6 | 	mov	local22, local23
025bc     6D 93 02 F6 | 	mov	arg01, local27
025c0     68 95 02 F6 | 	mov	arg02, local22
025c4     68 27 B2 FD | 	call	#__system___string_cmp
025c8     3D DD 0A F6 | 	mov	local28, result1 wz
025cc     7C 00 90 AD |  if_e	jmp	#LR__0122
025d0                 | LR__0120
025d0     94 01 00 FF 
025d4     A3 D2 06 F6 | 	mov	local23, ##@LR__5527
025d8     6C 93 02 F6 | 	mov	arg01, local26
025dc     69 95 02 F6 | 	mov	arg02, local23
025e0     4C 27 B2 FD | 	call	#__system___string_cmp
025e4     3D D1 0A F6 | 	mov	local22, result1 wz
025e8     20 00 90 5D |  if_ne	jmp	#LR__0121
025ec     94 01 00 FF 
025f0     A5 DE 06 F6 | 	mov	local29, ##@LR__5528
025f4     6F D5 02 F6 | 	mov	local24, local29
025f8     6D 93 02 F6 | 	mov	arg01, local27
025fc     6A 95 02 F6 | 	mov	arg02, local24
02600     2C 27 B2 FD | 	call	#__system___string_cmp
02604     3D D3 0A F6 | 	mov	local23, result1 wz
02608     40 00 90 AD |  if_e	jmp	#LR__0122
0260c                 | LR__0121
0260c     94 01 00 FF 
02610     A7 E0 06 F6 | 	mov	local30, ##@LR__5529
02614     70 DF 02 F6 | 	mov	local29, local30
02618     6C 93 02 F6 | 	mov	arg01, local26
0261c     6F 95 02 F6 | 	mov	arg02, local29
02620     0C 27 B2 FD | 	call	#__system___string_cmp
02624     3D D5 0A F6 | 	mov	local24, result1 wz
02628     EC 00 90 5D |  if_ne	jmp	#LR__0126
0262c     94 01 00 FF 
02630     A9 E2 06 F6 | 	mov	local31, ##@LR__5530
02634     71 E1 02 F6 | 	mov	local30, local31
02638     6D 93 02 F6 | 	mov	arg01, local27
0263c     70 95 02 F6 | 	mov	arg02, local30
02640     EC 26 B2 FD | 	call	#__system___string_cmp
02644     3D DF 0A F6 | 	mov	local29, result1 wz
02648     CC 00 90 5D |  if_ne	jmp	#LR__0126
0264c                 | LR__0122
0264c     54 B9 02 F6 | 	mov	local10, local02
02650     03 B8 66 F0 | 	shl	local10, #3
02654     32 AF 02 F6 | 	mov	local05, objptr
02658     36 00 00 FF 
0265c     8C AF 06 F1 | 	add	local05, ##28044
02660     57 B9 02 F1 | 	add	local10, local05
02664     6D BD 02 F6 | 	mov	local12, local27
02668     6C 93 02 F6 | 	mov	arg01, local26
0266c     5E 95 02 F6 | 	mov	arg02, local12
02670     F0 26 B2 FD | 	call	#__system___string_concat
02674     5C 7B 62 FC | 	wrlong	result1, local10
02678                 | '     lparts(i).part$=s1$+s2$
02678                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
02678     54 C3 02 F6 | 	mov	local15, local02
0267c     01 C2 06 F1 | 	add	local15, #1
02680     63 E5 02 F6 | 	mov	local32, local17
02684     01 E4 06 F1 | 	add	local32, #1
02688     D7 42 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
0268c                 | LR__0123
0268c     72 C3 52 F2 | 	cmps	local15, local32 wc
02690     7C 00 90 3D |  if_ae	jmp	#LR__0125
02694     61 AF 02 F6 | 	mov	local05, local15
02698     01 AE 06 F1 | 	add	local05, #1
0269c     03 AE 66 F0 | 	shl	local05, #3
026a0     36 00 00 FF 
026a4     8C 65 06 F1 | 	add	objptr, ##28044
026a8     32 AF 02 F1 | 	add	local05, objptr
026ac     57 AD 02 FB | 	rdlong	local04, local05
026b0     61 B1 02 F6 | 	mov	local06, local15
026b4     01 B0 06 F1 | 	add	local06, #1
026b8     03 B0 66 F0 | 	shl	local06, #3
026bc     32 B1 02 F1 | 	add	local06, objptr
026c0     04 B0 06 F1 | 	add	local06, #4
026c4     58 AB 02 FB | 	rdlong	local03, local06
026c8     61 B1 02 F6 | 	mov	local06, local15
026cc     03 B0 66 F0 | 	shl	local06, #3
026d0     32 BD 02 F6 | 	mov	local12, objptr
026d4     32 B1 02 F1 | 	add	local06, objptr
026d8     58 AD 62 FC | 	wrlong	local04, local06
026dc     61 BB 02 F6 | 	mov	local11, local15
026e0     5D C1 02 F6 | 	mov	local14, local11
026e4     60 BF 02 F6 | 	mov	local13, local14
026e8     03 BE 66 F0 | 	shl	local13, #3
026ec     32 DD 02 F6 | 	mov	local28, objptr
026f0     32 BF 02 F1 | 	add	local13, objptr
026f4     04 BE 06 F1 | 	add	local13, #4
026f8     5F AB 62 FC | 	wrlong	local03, local13
026fc     04 BE 86 F1 | 	sub	local13, #4
02700     01 C2 06 F1 | 	add	local15, #1
02704     36 00 00 FF 
02708     8C 65 86 F1 | 	sub	objptr, ##28044
0270c     7C FF 9F FD | 	jmp	#LR__0123
02710                 | LR__0124
02710                 | LR__0125
02710     01 A8 86 F1 | 	sub	local02, #1
02714     01 C6 86 F1 | 	sub	local17, #1
02718                 | LR__0126
02718     01 A8 06 F1 | 	add	local02, #1
0271c     63 A9 52 F2 | 	cmps	local02, local17 wc
02720     5C FD 9F CD |  if_b	jmp	#LR__0117
02724                 | '  
02724                 | ' ' 1h : now remove parts that are spaces
02724                 | ' 
02724                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
02724     00 A8 06 F6 | 	mov	local02, #0
02728     63 E7 02 F6 | 	mov	local33, local17
0272c     01 E6 06 F1 | 	add	local33, #1
02730                 | LR__0127
02730     73 A9 52 F2 | 	cmps	local02, local33 wc
02734     50 00 90 3D |  if_ae	jmp	#LR__0128
02738     54 B9 02 F6 | 	mov	local10, local02
0273c     03 B8 66 F0 | 	shl	local10, #3
02740     36 00 00 FF 
02744     8C 65 06 F1 | 	add	objptr, ##28044
02748     32 B9 02 F1 | 	add	local10, objptr
0274c     54 BD 02 F6 | 	mov	local12, local02
02750     5E BB 02 F6 | 	mov	local11, local12
02754     5D C1 02 F6 | 	mov	local14, local11
02758     03 C0 66 F0 | 	shl	local14, #3
0275c     32 BF 02 F6 | 	mov	local13, objptr
02760     32 C1 02 F1 | 	add	local14, objptr
02764     60 93 02 FB | 	rdlong	arg01, local14
02768     36 00 00 FF 
0276c     8C 65 86 F1 | 	sub	objptr, ##28044
02770     CC 42 B2 FD | 	call	#__system__RTrim_S
02774     3D 93 02 F6 | 	mov	arg01, result1
02778     04 42 B2 FD | 	call	#__system__LTrim_S
0277c     5C 7B 62 FC | 	wrlong	result1, local10
02780     01 A8 06 F1 | 	add	local02, #1
02784     A8 FF 9F FD | 	jmp	#LR__0127
02788                 | LR__0128
02788     00 A8 06 F6 | 	mov	local02, #0
0278c     D7 86 48 FB | 	callpa	#(@LR__0135-@LR__0129)>>2,fcache_load_ptr_
02790                 | ' i=0
02790                 | ' do 
02790                 | LR__0129
02790                 | '   if len(lparts(i).part$)=0 then 
02790     54 AF 02 F6 | 	mov	local05, local02
02794     03 AE 66 F0 | 	shl	local05, #3
02798     32 B1 02 F6 | 	mov	local06, objptr
0279c     36 00 00 FF 
027a0     8C B1 06 F1 | 	add	local06, ##28044
027a4     58 AF 02 F1 | 	add	local05, local06
027a8     57 93 02 FB | 	rdlong	arg01, local05
027ac     49 B3 02 F6 | 	mov	local07, arg01
027b0                 | LR__0130
027b0     59 7B CA FA | 	rdbyte	result1, local07 wz
027b4     01 B2 06 51 |  if_ne	add	local07, #1
027b8     F4 FF 9F 5D |  if_ne	jmp	#LR__0130
027bc     49 B3 8A F1 | 	sub	local07, arg01 wz
027c0     C4 00 90 5D |  if_ne	jmp	#LR__0134
027c4                 | '     if i=k-1 then k-=1  :  exit
027c4     63 AD 02 F6 | 	mov	local04, local17
027c8     01 AC 86 F1 | 	sub	local04, #1
027cc     56 A9 0A F2 | 	cmp	local02, local04 wz
027d0     01 C6 86 A1 |  if_e	sub	local17, #1
027d4     C4 00 90 AD |  if_e	jmp	#LR__0136
027d8                 | '     if i<k-1 then 
027d8     63 AD 02 F6 | 	mov	local04, local17
027dc     01 AC 86 F1 | 	sub	local04, #1
027e0     56 A9 52 F2 | 	cmps	local02, local04 wc
027e4     A0 00 90 3D |  if_ae	jmp	#LR__0133
027e8                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
027e8     54 C3 02 F6 | 	mov	local15, local02
027ec     63 E9 02 F6 | 	mov	local34, local17
027f0     01 E8 86 F1 | 	sub	local34, #1
027f4                 | LR__0131
027f4     74 C3 52 F2 | 	cmps	local15, local34 wc
027f8     80 00 90 3D |  if_ae	jmp	#LR__0132
027fc     61 AF 02 F6 | 	mov	local05, local15
02800     01 AE 06 F1 | 	add	local05, #1
02804     03 AE 66 F0 | 	shl	local05, #3
02808     36 00 00 FF 
0280c     8C 65 06 F1 | 	add	objptr, ##28044
02810     32 AF 02 F1 | 	add	local05, objptr
02814     57 AD 02 FB | 	rdlong	local04, local05
02818     61 B1 02 F6 | 	mov	local06, local15
0281c     01 B0 06 F1 | 	add	local06, #1
02820     03 B0 66 F0 | 	shl	local06, #3
02824     32 B1 02 F1 | 	add	local06, objptr
02828     04 B0 06 F1 | 	add	local06, #4
0282c     58 AB 02 FB | 	rdlong	local03, local06
02830     61 B9 02 F6 | 	mov	local10, local15
02834     5C B1 02 F6 | 	mov	local06, local10
02838     03 B0 66 F0 | 	shl	local06, #3
0283c     32 BD 02 F6 | 	mov	local12, objptr
02840     32 B1 02 F1 | 	add	local06, objptr
02844     58 AD 62 FC | 	wrlong	local04, local06
02848     61 BB 02 F6 | 	mov	local11, local15
0284c     5D C1 02 F6 | 	mov	local14, local11
02850     60 BF 02 F6 | 	mov	local13, local14
02854     03 BE 66 F0 | 	shl	local13, #3
02858     32 DD 02 F6 | 	mov	local28, objptr
0285c     32 BF 02 F1 | 	add	local13, objptr
02860     04 BE 06 F1 | 	add	local13, #4
02864     5F AB 62 FC | 	wrlong	local03, local13
02868     04 BE 86 F1 | 	sub	local13, #4
0286c     01 C2 06 F1 | 	add	local15, #1
02870     36 00 00 FF 
02874     8C 65 86 F1 | 	sub	objptr, ##28044
02878     78 FF 9F FD | 	jmp	#LR__0131
0287c                 | LR__0132
0287c     01 C6 86 F1 | 	sub	local17, #1
02880                 | '       if i>0 then i-=1 
02880     01 A8 56 F2 | 	cmps	local02, #1 wc
02884     01 A8 86 31 |  if_ae	sub	local02, #1
02888                 | LR__0133
02888                 | LR__0134
02888     01 A8 06 F1 | 	add	local02, #1
0288c     63 AD 02 F6 | 	mov	local04, local17
02890     01 AC 86 F1 | 	sub	local04, #1
02894     56 A9 5A F2 | 	cmps	local02, local04 wcz
02898     F4 FE 9F ED |  if_be	jmp	#LR__0129
0289c                 | LR__0135
0289c                 | LR__0136
0289c                 | ' 
0289c                 | ' ' 1i: lowercase all that is not a string
0289c                 | ' 
0289c                 | ' for j=0 to k-1
0289c     00 C2 06 F6 | 	mov	local15, #0
028a0     63 EB 02 F6 | 	mov	local35, local17
028a4                 | LR__0137
028a4     75 C3 52 F2 | 	cmps	local15, local35 wc
028a8     C0 00 90 3D |  if_ae	jmp	#LR__0140
028ac                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
028ac     61 AF 02 F6 | 	mov	local05, local15
028b0     03 AE 66 F0 | 	shl	local05, #3
028b4     32 B1 02 F6 | 	mov	local06, objptr
028b8     36 00 00 FF 
028bc     8C B1 06 F1 | 	add	local06, ##28044
028c0     58 AF 02 F1 | 	add	local05, local06
028c4     57 93 02 FB | 	rdlong	arg01, local05
028c8     01 94 06 F6 | 	mov	arg02, #1
028cc     E0 3C B2 FD | 	call	#__system__Left_S
028d0     3D 93 02 F6 | 	mov	arg01, result1
028d4     94 01 00 FF 
028d8     AB 94 06 F6 | 	mov	arg02, ##@LR__5531
028dc     50 24 B2 FD | 	call	#__system___string_cmp
028e0     00 7A 0E F2 | 	cmp	result1, #0 wz
028e4     3C 00 90 5D |  if_ne	jmp	#LR__0138
028e8     61 B1 02 F6 | 	mov	local06, local15
028ec     03 B0 66 F0 | 	shl	local06, #3
028f0     32 BD 02 F6 | 	mov	local12, objptr
028f4     36 00 00 FF 
028f8     8C BD 06 F1 | 	add	local12, ##28044
028fc     5E B1 02 F1 | 	add	local06, local12
02900     58 93 02 FB | 	rdlong	arg01, local06
02904     01 94 06 F6 | 	mov	arg02, #1
02908     2C 3D B2 FD | 	call	#__system__Right_S
0290c     3D 93 02 F6 | 	mov	arg01, result1
02910     94 01 00 FF 
02914     AD 94 06 F6 | 	mov	arg02, ##@LR__5532
02918     14 24 B2 FD | 	call	#__system___string_cmp
0291c     00 7A 0E F2 | 	cmp	result1, #0 wz
02920     40 00 90 AD |  if_e	jmp	#LR__0139
02924                 | LR__0138
02924     61 B9 02 F6 | 	mov	local10, local15
02928     03 B8 66 F0 | 	shl	local10, #3
0292c     36 00 00 FF 
02930     8C 65 06 F1 | 	add	objptr, ##28044
02934     32 B9 02 F1 | 	add	local10, objptr
02938     61 BD 02 F6 | 	mov	local12, local15
0293c     5E BB 02 F6 | 	mov	local11, local12
02940     5D C1 02 F6 | 	mov	local14, local11
02944     03 C0 66 F0 | 	shl	local14, #3
02948     32 BF 02 F6 | 	mov	local13, objptr
0294c     32 C1 02 F1 | 	add	local14, objptr
02950     60 93 02 FB | 	rdlong	arg01, local14
02954     36 00 00 FF 
02958     8C 65 86 F1 | 	sub	objptr, ##28044
0295c     60 3F B2 FD | 	call	#__system__LCase_S
02960     5C 7B 62 FC | 	wrlong	result1, local10
02964                 | LR__0139
02964     01 C2 06 F1 | 	add	local15, #1
02968     38 FF 9F FD | 	jmp	#LR__0137
0296c                 | LR__0140
0296c                 | ' 
0296c                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
0296c                 | ' 
0296c                 | ' for i=0 to k: lparts(i).token=-1: next i					' initialize all tokens to -1=invalid
0296c     00 A8 06 F6 | 	mov	local02, #0
02970     63 ED 02 F6 | 	mov	local36, local17
02974     01 EC 06 F1 | 	add	local36, #1
02978     D7 1A 48 FB | 	callpa	#(@LR__0142-@LR__0141)>>2,fcache_load_ptr_
0297c                 | LR__0141
0297c     76 A9 52 F2 | 	cmps	local02, local36 wc
02980     2C 00 90 3D |  if_ae	jmp	#LR__0143
02984     54 B9 02 F6 | 	mov	local10, local02
02988     03 B8 66 F0 | 	shl	local10, #3
0298c     32 AF 02 F6 | 	mov	local05, objptr
02990     36 00 00 FF 
02994     8C AF 06 F1 | 	add	local05, ##28044
02998     57 B9 02 F1 | 	add	local10, local05
0299c     04 B8 06 F1 | 	add	local10, #4
029a0     FF FF FF FF 
029a4     5C FF 6B FC | 	wrlong	##-1, local10
029a8     01 A8 06 F1 | 	add	local02, #1
029ac     CC FF 9F FD | 	jmp	#LR__0141
029b0                 | LR__0142
029b0                 | LR__0143
029b0                 | ' 
029b0                 | ' if isdec(lparts(0).part$) then addptr=1 else addptr=0				' check if the abbreviated command are on the line start, or after linenum, 'then' or 'else'
029b0     36 00 00 FF 
029b4     8C 65 06 F1 | 	add	objptr, ##28044
029b8     32 93 02 FB | 	rdlong	arg01, objptr
029bc     36 00 00 FF 
029c0     8C 65 86 F1 | 	sub	objptr, ##28044
029c4     1C 47 B0 FD | 	call	#_isdec
029c8     00 7A 0E F2 | 	cmp	result1, #0 wz
029cc     01 EE 06 56 |  if_ne	mov	local37, #1
029d0     00 EE 06 A6 |  if_e	mov	local37, #0
029d4                 | ' if lparts(0).part$="else" then addptr=1 					' else is always the first
029d4     36 00 00 FF 
029d8     8C 65 06 F1 | 	add	objptr, ##28044
029dc     32 93 02 FB | 	rdlong	arg01, objptr
029e0     36 00 00 FF 
029e4     8C 65 86 F1 | 	sub	objptr, ##28044
029e8     94 01 00 FF 
029ec     AF 94 06 F6 | 	mov	arg02, ##@LR__5533
029f0     3C 23 B2 FD | 	call	#__system___string_cmp
029f4     00 7A 0E F2 | 	cmp	result1, #0 wz
029f8     01 EE 06 A6 |  if_e	mov	local37, #1
029fc     00 A8 06 F6 | 	mov	local02, #0
02a00                 | ' i=0 : do 
02a00                 | LR__0144
02a00                 | '   if lparts(i).part$="then" then exit loop 					' try to find 'then'
02a00     54 AF 02 F6 | 	mov	local05, local02
02a04     03 AE 66 F0 | 	shl	local05, #3
02a08     32 B1 02 F6 | 	mov	local06, objptr
02a0c     36 00 00 FF 
02a10     8C B1 06 F1 | 	add	local06, ##28044
02a14     58 AF 02 F1 | 	add	local05, local06
02a18     57 93 02 FB | 	rdlong	arg01, local05
02a1c     94 01 00 FF 
02a20     B4 94 06 F6 | 	mov	arg02, ##@LR__5534
02a24     08 23 B2 FD | 	call	#__system___string_cmp
02a28     00 7A 0E F2 | 	cmp	result1, #0 wz
02a2c     0C 00 90 AD |  if_e	jmp	#LR__0145
02a30     01 A8 06 F1 | 	add	local02, #1
02a34     63 A9 5A F2 | 	cmps	local02, local17 wcz
02a38     C4 FF 9F ED |  if_be	jmp	#LR__0144
02a3c                 | LR__0145
02a3c                 | ' if i<k then addptr=i+1	 							' then found
02a3c     63 A9 52 F2 | 	cmps	local02, local17 wc
02a40     54 EF 02 C6 |  if_b	mov	local37, local02
02a44     01 EE 06 C1 |  if_b	add	local37, #1
02a48     36 00 00 FF 
02a4c     8C 65 06 F1 | 	add	objptr, ##28044
02a50                 | ' lp$=lparts(addptr).part$ 
02a50                 | ' 
02a50                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then ' ? is abbreviation of print, but it has no dots, so it has to be treated here
02a50     77 AF 02 F6 | 	mov	local05, local37
02a54     03 AE 66 F0 | 	shl	local05, #3
02a58     32 AF 02 F1 | 	add	local05, objptr
02a5c     57 93 02 FB | 	rdlong	arg01, local05
02a60     01 94 06 F6 | 	mov	arg02, #1
02a64     36 00 00 FF 
02a68     8C 65 86 F1 | 	sub	objptr, ##28044
02a6c     40 3B B2 FD | 	call	#__system__Left_S
02a70     3D 93 02 F6 | 	mov	arg01, result1
02a74     94 01 00 FF 
02a78     B9 94 06 F6 | 	mov	arg02, ##@LR__5535
02a7c     B0 22 B2 FD | 	call	#__system___string_cmp
02a80     00 7A 0E F2 | 	cmp	result1, #0 wz
02a84     58 01 90 5D |  if_ne	jmp	#LR__0152
02a88     77 B1 02 F6 | 	mov	local06, local37
02a8c     03 B0 66 F0 | 	shl	local06, #3
02a90     32 BD 02 F6 | 	mov	local12, objptr
02a94     36 00 00 FF 
02a98     8C BD 06 F1 | 	add	local12, ##28044
02a9c     5E B1 02 F1 | 	add	local06, local12
02aa0     58 93 02 FB | 	rdlong	arg01, local06
02aa4     49 B3 02 F6 | 	mov	local07, arg01
02aa8     D7 06 48 FB | 	callpa	#(@LR__0147-@LR__0146)>>2,fcache_load_ptr_
02aac                 | LR__0146
02aac     59 7B CA FA | 	rdbyte	result1, local07 wz
02ab0     01 B2 06 51 |  if_ne	add	local07, #1
02ab4     F4 FF 9F 5D |  if_ne	jmp	#LR__0146
02ab8                 | LR__0147
02ab8     49 B3 82 F1 | 	sub	local07, arg01
02abc     02 B2 56 F2 | 	cmps	local07, #2 wc
02ac0     1C 01 90 CD |  if_b	jmp	#LR__0152
02ac4     01 C6 06 F1 | 	add	local17, #1
02ac8                 | '   k+=1
02ac8                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02ac8     63 A9 02 F6 | 	mov	local02, local17
02acc     77 F1 02 F6 | 	mov	local38, local37
02ad0     01 F0 06 F1 | 	add	local38, #1
02ad4     36 00 00 FF 
02ad8     8C 65 06 F1 | 	add	objptr, ##28044
02adc     D7 2E 48 FB | 	callpa	#(@LR__0149-@LR__0148)>>2,fcache_load_ptr_
02ae0                 | LR__0148
02ae0     54 AF 02 F6 | 	mov	local05, local02
02ae4     01 AE 86 F1 | 	sub	local05, #1
02ae8     03 AE 66 F0 | 	shl	local05, #3
02aec     32 AF 02 F1 | 	add	local05, objptr
02af0     57 AD 02 FB | 	rdlong	local04, local05
02af4     54 B1 02 F6 | 	mov	local06, local02
02af8     01 B0 86 F1 | 	sub	local06, #1
02afc     03 B0 66 F0 | 	shl	local06, #3
02b00     32 B1 02 F1 | 	add	local06, objptr
02b04     04 B0 06 F1 | 	add	local06, #4
02b08     58 AB 02 FB | 	rdlong	local03, local06
02b0c     54 B1 02 F6 | 	mov	local06, local02
02b10     03 B0 66 F0 | 	shl	local06, #3
02b14     32 B1 02 F1 | 	add	local06, objptr
02b18     58 AD 62 FC | 	wrlong	local04, local06
02b1c     54 BF 02 F6 | 	mov	local13, local02
02b20     03 BE 66 F0 | 	shl	local13, #3
02b24     32 BF 02 F1 | 	add	local13, objptr
02b28     04 BE 06 F1 | 	add	local13, #4
02b2c     5F AB 62 FC | 	wrlong	local03, local13
02b30     01 A8 86 F1 | 	sub	local02, #1
02b34     78 A9 52 F2 | 	cmps	local02, local38 wc
02b38     A4 FF 9F 3D |  if_ae	jmp	#LR__0148
02b3c                 | LR__0149
02b3c     77 B9 02 F6 | 	mov	local10, local37
02b40     01 B8 06 F1 | 	add	local10, #1
02b44     03 B8 66 F0 | 	shl	local10, #3
02b48     32 B9 02 F1 | 	add	local10, objptr
02b4c     77 C1 02 F6 | 	mov	local14, local37
02b50     03 C0 66 F0 | 	shl	local14, #3
02b54     32 C1 02 F1 | 	add	local14, objptr
02b58     60 B1 02 FB | 	rdlong	local06, local14
02b5c     77 BF 02 F6 | 	mov	local13, local37
02b60     5F DD 02 F6 | 	mov	local28, local13
02b64     6E D1 02 F6 | 	mov	local22, local28
02b68     03 D0 66 F0 | 	shl	local22, #3
02b6c     32 D3 02 F6 | 	mov	local23, objptr
02b70     32 D1 02 F1 | 	add	local22, objptr
02b74     68 93 02 FB | 	rdlong	arg01, local22
02b78     36 00 00 FF 
02b7c     8C 65 86 F1 | 	sub	objptr, ##28044
02b80     49 B3 02 F6 | 	mov	local07, arg01
02b84     D7 06 48 FB | 	callpa	#(@LR__0151-@LR__0150)>>2,fcache_load_ptr_
02b88                 | LR__0150
02b88     59 7B CA FA | 	rdbyte	result1, local07 wz
02b8c     01 B2 06 51 |  if_ne	add	local07, #1
02b90     F4 FF 9F 5D |  if_ne	jmp	#LR__0150
02b94                 | LR__0151
02b94     49 B3 82 F1 | 	sub	local07, arg01
02b98     59 C1 02 F6 | 	mov	local14, local07
02b9c     60 BB 02 F6 | 	mov	local11, local14
02ba0     01 BA 86 F1 | 	sub	local11, #1
02ba4     5D BD 02 F6 | 	mov	local12, local11
02ba8     58 93 02 F6 | 	mov	arg01, local06
02bac     5E 95 02 F6 | 	mov	arg02, local12
02bb0     84 3A B2 FD | 	call	#__system__Right_S
02bb4     5C 7B 62 FC | 	wrlong	result1, local10
02bb8     77 B9 02 F6 | 	mov	local10, local37
02bbc     03 B8 66 F0 | 	shl	local10, #3
02bc0     32 AF 02 F6 | 	mov	local05, objptr
02bc4     36 00 00 FF 
02bc8     8C AF 06 F1 | 	add	local05, ##28044
02bcc     57 B9 02 F1 | 	add	local10, local05
02bd0     94 01 00 FF 
02bd4     BB B0 06 F6 | 	mov	local06, ##@LR__5536
02bd8     5C B1 62 FC | 	wrlong	local06, local10
02bdc     9C 01 90 FD | 	jmp	#LR__0160
02be0                 | LR__0152
02be0     77 B1 02 F6 | 	mov	local06, local37
02be4     03 B0 66 F0 | 	shl	local06, #3
02be8     32 BD 02 F6 | 	mov	local12, objptr
02bec     36 00 00 FF 
02bf0     8C BD 06 F1 | 	add	local12, ##28044
02bf4     5E B1 02 F1 | 	add	local06, local12
02bf8     58 95 02 FB | 	rdlong	arg02, local06
02bfc     94 01 00 FF 
02c00     BD 96 06 F6 | 	mov	arg03, ##@LR__5537
02c04     01 92 06 F6 | 	mov	arg01, #1
02c08     EC 3E B2 FD | 	call	#__system__Instr
02c0c     3D F3 02 F6 | 	mov	local39, result1
02c10                 | ' 
02c10                 | ' dot=instr(1,lparts(addptr).part$,".")						' find a dot	
02c10                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 				' split the part
02c10     01 F2 56 F2 | 	cmps	local39, #1 wc
02c14     64 01 90 CD |  if_b	jmp	#LR__0159
02c18     77 AF 02 F6 | 	mov	local05, local37
02c1c     03 AE 66 F0 | 	shl	local05, #3
02c20     32 B1 02 F6 | 	mov	local06, objptr
02c24     36 00 00 FF 
02c28     8C B1 06 F1 | 	add	local06, ##28044
02c2c     58 AF 02 F1 | 	add	local05, local06
02c30     57 93 02 FB | 	rdlong	arg01, local05
02c34     49 B3 02 F6 | 	mov	local07, arg01
02c38     D7 06 48 FB | 	callpa	#(@LR__0154-@LR__0153)>>2,fcache_load_ptr_
02c3c                 | LR__0153
02c3c     59 7B CA FA | 	rdbyte	result1, local07 wz
02c40     01 B2 06 51 |  if_ne	add	local07, #1
02c44     F4 FF 9F 5D |  if_ne	jmp	#LR__0153
02c48                 | LR__0154
02c48     49 B3 82 F1 | 	sub	local07, arg01
02c4c     59 F3 52 F2 | 	cmps	local39, local07 wc
02c50     28 01 90 3D |  if_ae	jmp	#LR__0159
02c54     01 C6 06 F1 | 	add	local17, #1
02c58                 | '   k+=1
02c58                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02c58     63 A9 02 F6 | 	mov	local02, local17
02c5c     77 F5 02 F6 | 	mov	local40, local37
02c60     01 F4 06 F1 | 	add	local40, #1
02c64     36 00 00 FF 
02c68     8C 65 06 F1 | 	add	objptr, ##28044
02c6c     D7 2E 48 FB | 	callpa	#(@LR__0156-@LR__0155)>>2,fcache_load_ptr_
02c70                 | LR__0155
02c70     54 AF 02 F6 | 	mov	local05, local02
02c74     01 AE 86 F1 | 	sub	local05, #1
02c78     03 AE 66 F0 | 	shl	local05, #3
02c7c     32 AF 02 F1 | 	add	local05, objptr
02c80     57 AD 02 FB | 	rdlong	local04, local05
02c84     54 B1 02 F6 | 	mov	local06, local02
02c88     01 B0 86 F1 | 	sub	local06, #1
02c8c     03 B0 66 F0 | 	shl	local06, #3
02c90     32 B1 02 F1 | 	add	local06, objptr
02c94     04 B0 06 F1 | 	add	local06, #4
02c98     58 AB 02 FB | 	rdlong	local03, local06
02c9c     54 B1 02 F6 | 	mov	local06, local02
02ca0     03 B0 66 F0 | 	shl	local06, #3
02ca4     32 B1 02 F1 | 	add	local06, objptr
02ca8     58 AD 62 FC | 	wrlong	local04, local06
02cac     54 BF 02 F6 | 	mov	local13, local02
02cb0     03 BE 66 F0 | 	shl	local13, #3
02cb4     32 BF 02 F1 | 	add	local13, objptr
02cb8     04 BE 06 F1 | 	add	local13, #4
02cbc     5F AB 62 FC | 	wrlong	local03, local13
02cc0     01 A8 86 F1 | 	sub	local02, #1
02cc4     7A A9 52 F2 | 	cmps	local02, local40 wc
02cc8     A4 FF 9F 3D |  if_ae	jmp	#LR__0155
02ccc                 | LR__0156
02ccc     77 B9 02 F6 | 	mov	local10, local37
02cd0     01 B8 06 F1 | 	add	local10, #1
02cd4     03 B8 66 F0 | 	shl	local10, #3
02cd8     32 B9 02 F1 | 	add	local10, objptr
02cdc     77 C1 02 F6 | 	mov	local14, local37
02ce0     03 C0 66 F0 | 	shl	local14, #3
02ce4     32 C1 02 F1 | 	add	local14, objptr
02ce8     60 B1 02 FB | 	rdlong	local06, local14
02cec     77 DD 02 F6 | 	mov	local28, local37
02cf0     6E D1 02 F6 | 	mov	local22, local28
02cf4     03 D0 66 F0 | 	shl	local22, #3
02cf8     32 D3 02 F6 | 	mov	local23, objptr
02cfc     32 D1 02 F1 | 	add	local22, objptr
02d00     68 93 02 FB | 	rdlong	arg01, local22
02d04     36 00 00 FF 
02d08     8C 65 86 F1 | 	sub	objptr, ##28044
02d0c     49 B3 02 F6 | 	mov	local07, arg01
02d10     D7 06 48 FB | 	callpa	#(@LR__0158-@LR__0157)>>2,fcache_load_ptr_
02d14                 | LR__0157
02d14     59 7B CA FA | 	rdbyte	result1, local07 wz
02d18     01 B2 06 51 |  if_ne	add	local07, #1
02d1c     F4 FF 9F 5D |  if_ne	jmp	#LR__0157
02d20                 | LR__0158
02d20     49 B3 82 F1 | 	sub	local07, arg01
02d24     59 95 02 F6 | 	mov	arg02, local07
02d28     79 95 82 F1 | 	sub	arg02, local39
02d2c     58 93 02 F6 | 	mov	arg01, local06
02d30     04 39 B2 FD | 	call	#__system__Right_S
02d34     5C 7B 62 FC | 	wrlong	result1, local10
02d38     77 B9 02 F6 | 	mov	local10, local37
02d3c     03 B8 66 F0 | 	shl	local10, #3
02d40     36 00 00 FF 
02d44     8C 65 06 F1 | 	add	objptr, ##28044
02d48     32 B9 02 F1 | 	add	local10, objptr
02d4c     77 BB 02 F6 | 	mov	local11, local37
02d50     5D C1 02 F6 | 	mov	local14, local11
02d54     03 C0 66 F0 | 	shl	local14, #3
02d58     32 BF 02 F6 | 	mov	local13, objptr
02d5c     32 C1 02 F1 | 	add	local14, objptr
02d60     60 93 02 FB | 	rdlong	arg01, local14
02d64     79 BD 02 F6 | 	mov	local12, local39
02d68     5E 95 02 F6 | 	mov	arg02, local12
02d6c     36 00 00 FF 
02d70     8C 65 86 F1 | 	sub	objptr, ##28044
02d74     38 38 B2 FD | 	call	#__system__Left_S
02d78     5C 7B 62 FC | 	wrlong	result1, local10
02d7c                 | LR__0159
02d7c                 | LR__0160
02d7c     77 B9 02 F6 | 	mov	local10, local37
02d80     03 B8 66 F0 | 	shl	local10, #3
02d84     32 AF 02 F6 | 	mov	local05, objptr
02d88     36 00 00 FF 
02d8c     8C AF 06 F1 | 	add	local05, ##28044
02d90     57 B9 02 F1 | 	add	local10, local05
02d94     5C F7 02 FB | 	rdlong	local41, local10
02d98                 | ' 
02d98                 | ' 825
02d98                 | ' lp$=lparts(addptr).part$ 
02d98                 | ' 
02d98                 | ' ' process mouse/cursor/click on/off
02d98                 | ' 
02d98                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02d98     94 01 00 FF 
02d9c     BF 94 06 F6 | 	mov	arg02, ##@LR__5538
02da0     7B 93 02 F6 | 	mov	arg01, local41
02da4     88 1F B2 FD | 	call	#__system___string_cmp
02da8     00 7A 0E F2 | 	cmp	result1, #0 wz
02dac     30 00 90 AD |  if_e	jmp	#LR__0161
02db0     94 01 00 FF 
02db4     C5 94 06 F6 | 	mov	arg02, ##@LR__5539
02db8     7B 93 02 F6 | 	mov	arg01, local41
02dbc     70 1F B2 FD | 	call	#__system___string_cmp
02dc0     00 7A 0E F2 | 	cmp	result1, #0 wz
02dc4     18 00 90 AD |  if_e	jmp	#LR__0161
02dc8     94 01 00 FF 
02dcc     CC 94 06 F6 | 	mov	arg02, ##@LR__5540
02dd0     7B 93 02 F6 | 	mov	arg01, local41
02dd4     58 1F B2 FD | 	call	#__system___string_cmp
02dd8     00 7A 0E F2 | 	cmp	result1, #0 wz
02ddc     D8 00 90 5D |  if_ne	jmp	#LR__0164
02de0                 | LR__0161
02de0                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(2).token=token_decimal
02de0     77 AF 02 F6 | 	mov	local05, local37
02de4     01 AE 06 F1 | 	add	local05, #1
02de8     03 AE 66 F0 | 	shl	local05, #3
02dec     32 B1 02 F6 | 	mov	local06, objptr
02df0     36 00 00 FF 
02df4     8C B1 06 F1 | 	add	local06, ##28044
02df8     58 AF 02 F1 | 	add	local05, local06
02dfc     57 93 02 FB | 	rdlong	arg01, local05
02e00     94 01 00 FF 
02e04     D2 94 06 F6 | 	mov	arg02, ##@LR__5541
02e08     24 1F B2 FD | 	call	#__system___string_cmp
02e0c     00 7A 0E F2 | 	cmp	result1, #0 wz
02e10     38 00 90 5D |  if_ne	jmp	#LR__0162
02e14     77 B9 02 F6 | 	mov	local10, local37
02e18     01 B8 06 F1 | 	add	local10, #1
02e1c     03 B8 66 F0 | 	shl	local10, #3
02e20     36 00 00 FF 
02e24     8C 65 06 F1 | 	add	objptr, ##28044
02e28     32 B9 02 F1 | 	add	local10, objptr
02e2c     94 01 00 FF 
02e30     D5 B0 06 F6 | 	mov	local06, ##@LR__5542
02e34     5C B1 62 FC | 	wrlong	local06, local10
02e38     14 64 06 F1 | 	add	objptr, #20
02e3c     01 00 80 FF 
02e40     32 01 68 FC | 	wrlong	##512, objptr
02e44     36 00 00 FF 
02e48     A0 65 86 F1 | 	sub	objptr, ##28064
02e4c                 | LR__0162
02e4c                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(2).token=token_decimal
02e4c     77 AF 02 F6 | 	mov	local05, local37
02e50     01 AE 06 F1 | 	add	local05, #1
02e54     03 AE 66 F0 | 	shl	local05, #3
02e58     32 B1 02 F6 | 	mov	local06, objptr
02e5c     36 00 00 FF 
02e60     8C B1 06 F1 | 	add	local06, ##28044
02e64     58 AF 02 F1 | 	add	local05, local06
02e68     57 93 02 FB | 	rdlong	arg01, local05
02e6c     94 01 00 FF 
02e70     D7 94 06 F6 | 	mov	arg02, ##@LR__5543
02e74     B8 1E B2 FD | 	call	#__system___string_cmp
02e78     00 7A 0E F2 | 	cmp	result1, #0 wz
02e7c     38 00 90 5D |  if_ne	jmp	#LR__0163
02e80     77 B9 02 F6 | 	mov	local10, local37
02e84     01 B8 06 F1 | 	add	local10, #1
02e88     03 B8 66 F0 | 	shl	local10, #3
02e8c     36 00 00 FF 
02e90     8C 65 06 F1 | 	add	objptr, ##28044
02e94     32 B9 02 F1 | 	add	local10, objptr
02e98     94 01 00 FF 
02e9c     DB B0 06 F6 | 	mov	local06, ##@LR__5544
02ea0     5C B1 62 FC | 	wrlong	local06, local10
02ea4     14 64 06 F1 | 	add	objptr, #20
02ea8     01 00 80 FF 
02eac     32 01 68 FC | 	wrlong	##512, objptr
02eb0     36 00 00 FF 
02eb4     A0 65 86 F1 | 	sub	objptr, ##28064
02eb8                 | LR__0163
02eb8                 | LR__0164
02eb8                 | ' 		
02eb8                 | ' ' process text constant for 'mode' - TO DO all predefined constants should have # before				
02eb8                 | ' 
02eb8                 | ' if (lp$="mode" orelse lp$="m.") then 
02eb8     94 01 00 FF 
02ebc     DD 94 06 F6 | 	mov	arg02, ##@LR__5545
02ec0     7B 93 02 F6 | 	mov	arg01, local41
02ec4     68 1E B2 FD | 	call	#__system___string_cmp
02ec8     00 7A 0E F2 | 	cmp	result1, #0 wz
02ecc     18 00 90 AD |  if_e	jmp	#LR__0165
02ed0     94 01 00 FF 
02ed4     E2 94 06 F6 | 	mov	arg02, ##@LR__5546
02ed8     7B 93 02 F6 | 	mov	arg01, local41
02edc     50 1E B2 FD | 	call	#__system___string_cmp
02ee0     00 7A 0E F2 | 	cmp	result1, #0 wz
02ee4     28 02 90 5D |  if_ne	jmp	#LR__0172
02ee8                 | LR__0165
02ee8                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"       
02ee8     77 AF 02 F6 | 	mov	local05, local37
02eec     01 AE 06 F1 | 	add	local05, #1
02ef0     03 AE 66 F0 | 	shl	local05, #3
02ef4     32 B1 02 F6 | 	mov	local06, objptr
02ef8     36 00 00 FF 
02efc     8C B1 06 F1 | 	add	local06, ##28044
02f00     58 AF 02 F1 | 	add	local05, local06
02f04     57 93 02 FB | 	rdlong	arg01, local05
02f08     94 01 00 FF 
02f0c     E5 94 06 F6 | 	mov	arg02, ##@LR__5547
02f10     1C 1E B2 FD | 	call	#__system___string_cmp
02f14     00 7A 0E F2 | 	cmp	result1, #0 wz
02f18     28 00 90 5D |  if_ne	jmp	#LR__0166
02f1c     77 B9 02 F6 | 	mov	local10, local37
02f20     01 B8 06 F1 | 	add	local10, #1
02f24     03 B8 66 F0 | 	shl	local10, #3
02f28     32 AF 02 F6 | 	mov	local05, objptr
02f2c     36 00 00 FF 
02f30     8C AF 06 F1 | 	add	local05, ##28044
02f34     57 B9 02 F1 | 	add	local10, local05
02f38     94 01 00 FF 
02f3c     EB B0 06 F6 | 	mov	local06, ##@LR__5548
02f40     5C B1 62 FC | 	wrlong	local06, local10
02f44                 | LR__0166
02f44                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02f44     77 AF 02 F6 | 	mov	local05, local37
02f48     01 AE 06 F1 | 	add	local05, #1
02f4c     03 AE 66 F0 | 	shl	local05, #3
02f50     32 B1 02 F6 | 	mov	local06, objptr
02f54     36 00 00 FF 
02f58     8C B1 06 F1 | 	add	local06, ##28044
02f5c     58 AF 02 F1 | 	add	local05, local06
02f60     57 93 02 FB | 	rdlong	arg01, local05
02f64     94 01 00 FF 
02f68     ED 94 06 F6 | 	mov	arg02, ##@LR__5549
02f6c     C0 1D B2 FD | 	call	#__system___string_cmp
02f70     00 7A 0E F2 | 	cmp	result1, #0 wz
02f74     28 00 90 5D |  if_ne	jmp	#LR__0167
02f78     77 B9 02 F6 | 	mov	local10, local37
02f7c     01 B8 06 F1 | 	add	local10, #1
02f80     03 B8 66 F0 | 	shl	local10, #3
02f84     32 AF 02 F6 | 	mov	local05, objptr
02f88     36 00 00 FF 
02f8c     8C AF 06 F1 | 	add	local05, ##28044
02f90     57 B9 02 F1 | 	add	local10, local05
02f94     94 01 00 FF 
02f98     F6 B0 06 F6 | 	mov	local06, ##@LR__5550
02f9c     5C B1 62 FC | 	wrlong	local06, local10
02fa0                 | LR__0167
02fa0                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02fa0     77 AF 02 F6 | 	mov	local05, local37
02fa4     01 AE 06 F1 | 	add	local05, #1
02fa8     03 AE 66 F0 | 	shl	local05, #3
02fac     32 B1 02 F6 | 	mov	local06, objptr
02fb0     36 00 00 FF 
02fb4     8C B1 06 F1 | 	add	local06, ##28044
02fb8     58 AF 02 F1 | 	add	local05, local06
02fbc     57 93 02 FB | 	rdlong	arg01, local05
02fc0     94 01 00 FF 
02fc4     F8 94 06 F6 | 	mov	arg02, ##@LR__5551
02fc8     64 1D B2 FD | 	call	#__system___string_cmp
02fcc     00 7A 0E F2 | 	cmp	result1, #0 wz
02fd0     28 00 90 5D |  if_ne	jmp	#LR__0168
02fd4     77 B9 02 F6 | 	mov	local10, local37
02fd8     01 B8 06 F1 | 	add	local10, #1
02fdc     03 B8 66 F0 | 	shl	local10, #3
02fe0     32 AF 02 F6 | 	mov	local05, objptr
02fe4     36 00 00 FF 
02fe8     8C AF 06 F1 | 	add	local05, ##28044
02fec     57 B9 02 F1 | 	add	local10, local05
02ff0     94 01 00 FF 
02ff4     01 B1 06 F6 | 	mov	local06, ##@LR__5552
02ff8     5C B1 62 FC | 	wrlong	local06, local10
02ffc                 | LR__0168
02ffc                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02ffc     77 AF 02 F6 | 	mov	local05, local37
03000     01 AE 06 F1 | 	add	local05, #1
03004     03 AE 66 F0 | 	shl	local05, #3
03008     32 B1 02 F6 | 	mov	local06, objptr
0300c     36 00 00 FF 
03010     8C B1 06 F1 | 	add	local06, ##28044
03014     58 AF 02 F1 | 	add	local05, local06
03018     57 93 02 FB | 	rdlong	arg01, local05
0301c     94 01 00 FF 
03020     03 95 06 F6 | 	mov	arg02, ##@LR__5553
03024     08 1D B2 FD | 	call	#__system___string_cmp
03028     00 7A 0E F2 | 	cmp	result1, #0 wz
0302c     28 00 90 5D |  if_ne	jmp	#LR__0169
03030     77 B9 02 F6 | 	mov	local10, local37
03034     01 B8 06 F1 | 	add	local10, #1
03038     03 B8 66 F0 | 	shl	local10, #3
0303c     32 AF 02 F6 | 	mov	local05, objptr
03040     36 00 00 FF 
03044     8C AF 06 F1 | 	add	local05, ##28044
03048     57 B9 02 F1 | 	add	local10, local05
0304c     94 01 00 FF 
03050     0C B1 06 F6 | 	mov	local06, ##@LR__5554
03054     5C B1 62 FC | 	wrlong	local06, local10
03058                 | LR__0169
03058                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
03058     77 AF 02 F6 | 	mov	local05, local37
0305c     01 AE 06 F1 | 	add	local05, #1
03060     03 AE 66 F0 | 	shl	local05, #3
03064     32 B1 02 F6 | 	mov	local06, objptr
03068     36 00 00 FF 
0306c     8C B1 06 F1 | 	add	local06, ##28044
03070     58 AF 02 F1 | 	add	local05, local06
03074     57 93 02 FB | 	rdlong	arg01, local05
03078     94 01 00 FF 
0307c     0E 95 06 F6 | 	mov	arg02, ##@LR__5555
03080     AC 1C B2 FD | 	call	#__system___string_cmp
03084     00 7A 0E F2 | 	cmp	result1, #0 wz
03088     28 00 90 5D |  if_ne	jmp	#LR__0170
0308c     77 B9 02 F6 | 	mov	local10, local37
03090     01 B8 06 F1 | 	add	local10, #1
03094     03 B8 66 F0 | 	shl	local10, #3
03098     32 AF 02 F6 | 	mov	local05, objptr
0309c     36 00 00 FF 
030a0     8C AF 06 F1 | 	add	local05, ##28044
030a4     57 B9 02 F1 | 	add	local10, local05
030a8     94 01 00 FF 
030ac     11 B1 06 F6 | 	mov	local06, ##@LR__5556
030b0     5C B1 62 FC | 	wrlong	local06, local10
030b4                 | LR__0170
030b4                 | '   if lparts(addptr+1).part$="amiga" then lparts(addptr+1).part$="5"  
030b4     77 AF 02 F6 | 	mov	local05, local37
030b8     01 AE 06 F1 | 	add	local05, #1
030bc     03 AE 66 F0 | 	shl	local05, #3
030c0     32 B1 02 F6 | 	mov	local06, objptr
030c4     36 00 00 FF 
030c8     8C B1 06 F1 | 	add	local06, ##28044
030cc     58 AF 02 F1 | 	add	local05, local06
030d0     57 93 02 FB | 	rdlong	arg01, local05
030d4     94 01 00 FF 
030d8     13 95 06 F6 | 	mov	arg02, ##@LR__5557
030dc     50 1C B2 FD | 	call	#__system___string_cmp
030e0     00 7A 0E F2 | 	cmp	result1, #0 wz
030e4     28 00 90 5D |  if_ne	jmp	#LR__0171
030e8     77 B9 02 F6 | 	mov	local10, local37
030ec     01 B8 06 F1 | 	add	local10, #1
030f0     03 B8 66 F0 | 	shl	local10, #3
030f4     32 AF 02 F6 | 	mov	local05, objptr
030f8     36 00 00 FF 
030fc     8C AF 06 F1 | 	add	local05, ##28044
03100     57 B9 02 F1 | 	add	local10, local05
03104     94 01 00 FF 
03108     19 B1 06 F6 | 	mov	local06, ##@LR__5558
0310c     5C B1 62 FC | 	wrlong	local06, local10
03110                 | LR__0171
03110                 | LR__0172
03110                 | ' 
03110                 | ' ' find part types 
03110                 | ' 
03110                 | ' for i=0 to k-1
03110     00 A8 06 F6 | 	mov	local02, #0
03114     63 F9 02 F6 | 	mov	local42, local17
03118                 | LR__0173
03118     7C A9 52 F2 | 	cmps	local02, local42 wc
0311c     58 07 90 3D |  if_ae	jmp	#LR__0185
03120     54 B9 02 F6 | 	mov	local10, local02
03124     03 B8 66 F0 | 	shl	local10, #3
03128     36 00 00 FF 
0312c     8C 65 06 F1 | 	add	objptr, ##28044
03130     32 B9 02 F1 | 	add	local10, objptr
03134     54 BB 02 F6 | 	mov	local11, local02
03138     5D C1 02 F6 | 	mov	local14, local11
0313c     60 BF 02 F6 | 	mov	local13, local14
03140     03 BE 66 F0 | 	shl	local13, #3
03144     32 BF 02 F1 | 	add	local13, objptr
03148     5F 93 02 FB | 	rdlong	arg01, local13
0314c     36 00 00 FF 
03150     8C 65 86 F1 | 	sub	objptr, ##28044
03154     A8 1A B0 FD | 	call	#_isseparator
03158     3D 7B E2 F8 | 	getbyte	result1, result1, #0
0315c     04 B8 06 F1 | 	add	local10, #4
03160     5C 7B 62 FC | 	wrlong	result1, local10
03164                 | ' lparts(i).token=isseparator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03164     54 B9 02 F6 | 	mov	local10, local02
03168     03 B8 66 F0 | 	shl	local10, #3
0316c     32 AF 02 F6 | 	mov	local05, objptr
03170     36 00 00 FF 
03174     8C AF 06 F1 | 	add	local05, ##28044
03178     57 B9 02 F1 | 	add	local10, local05
0317c     04 B8 06 F1 | 	add	local10, #4
03180     5C BD 02 FB | 	rdlong	local12, local10
03184     01 BC 56 F2 | 	cmps	local12, #1 wc
03188     E4 06 90 3D |  if_ae	jmp	#LR__0184
0318c     54 B9 02 F6 | 	mov	local10, local02
03190     03 B8 66 F0 | 	shl	local10, #3
03194     36 00 00 FF 
03198     8C 65 06 F1 | 	add	objptr, ##28044
0319c     32 B9 02 F1 | 	add	local10, objptr
031a0     54 BB 02 F6 | 	mov	local11, local02
031a4     5D C1 02 F6 | 	mov	local14, local11
031a8     60 BF 02 F6 | 	mov	local13, local14
031ac     03 BE 66 F0 | 	shl	local13, #3
031b0     32 BF 02 F1 | 	add	local13, objptr
031b4     5F 93 02 FB | 	rdlong	arg01, local13
031b8     36 00 00 FF 
031bc     8C 65 86 F1 | 	sub	objptr, ##28044
031c0     88 12 B0 FD | 	call	#_isoperator
031c4     3D 7B E2 F8 | 	getbyte	result1, result1, #0
031c8     04 B8 06 F1 | 	add	local10, #4
031cc     5C 7B 62 FC | 	wrlong	result1, local10
031d0                 | ' lparts(i).token=isoperator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
031d0     54 B9 02 F6 | 	mov	local10, local02
031d4     03 B8 66 F0 | 	shl	local10, #3
031d8     32 AF 02 F6 | 	mov	local05, objptr
031dc     36 00 00 FF 
031e0     8C AF 06 F1 | 	add	local05, ##28044
031e4     57 B9 02 F1 | 	add	local10, local05
031e8     04 B8 06 F1 | 	add	local10, #4
031ec     5C BD 02 FB | 	rdlong	local12, local10
031f0     01 BC 56 F2 | 	cmps	local12, #1 wc
031f4     78 06 90 3D |  if_ae	jmp	#LR__0184
031f8     54 B9 02 F6 | 	mov	local10, local02
031fc     03 B8 66 F0 | 	shl	local10, #3
03200     36 00 00 FF 
03204     8C 65 06 F1 | 	add	objptr, ##28044
03208     32 B9 02 F1 | 	add	local10, objptr
0320c     54 BB 02 F6 | 	mov	local11, local02
03210     5D C1 02 F6 | 	mov	local14, local11
03214     60 BF 02 F6 | 	mov	local13, local14
03218     03 BE 66 F0 | 	shl	local13, #3
0321c     32 BF 02 F1 | 	add	local13, objptr
03220     5F 93 02 FB | 	rdlong	arg01, local13
03224     36 00 00 FF 
03228     8C 65 86 F1 | 	sub	objptr, ##28044
0322c                 | ' 
0322c                 | ' select case s
0322c     95 01 00 FF 
03230     1E 94 06 F6 | 	mov	arg02, ##@LR__5649
03234     F8 1A B2 FD | 	call	#__system___string_cmp
03238     00 7A 0E F2 | 	cmp	result1, #0 wz
0323c     1B 7A 06 A6 |  if_e	mov	result1, #27
03240     00 7A 06 56 |  if_ne	mov	result1, #0
03244     3D 7B E2 F8 | 	getbyte	result1, result1, #0
03248     04 B8 06 F1 | 	add	local10, #4
0324c     5C 7B 62 FC | 	wrlong	result1, local10
03250                 | ' lparts(i).token=isassign(lparts(i).part$) 	: if lparts(i).token>0 then goto 102
03250     54 B9 02 F6 | 	mov	local10, local02
03254     03 B8 66 F0 | 	shl	local10, #3
03258     32 AF 02 F6 | 	mov	local05, objptr
0325c     36 00 00 FF 
03260     8C AF 06 F1 | 	add	local05, ##28044
03264     57 B9 02 F1 | 	add	local10, local05
03268     04 B8 06 F1 | 	add	local10, #4
0326c     5C BD 02 FB | 	rdlong	local12, local10
03270     01 BC 56 F2 | 	cmps	local12, #1 wc
03274     F8 05 90 3D |  if_ae	jmp	#LR__0184
03278     54 B9 02 F6 | 	mov	local10, local02
0327c     03 B8 66 F0 | 	shl	local10, #3
03280     36 00 00 FF 
03284     8C 65 06 F1 | 	add	objptr, ##28044
03288     32 B9 02 F1 | 	add	local10, objptr
0328c     54 BB 02 F6 | 	mov	local11, local02
03290     5D C1 02 F6 | 	mov	local14, local11
03294     60 BF 02 F6 | 	mov	local13, local14
03298     03 BE 66 F0 | 	shl	local13, #3
0329c     32 BF 02 F1 | 	add	local13, objptr
032a0     5F 93 02 FB | 	rdlong	arg01, local13
032a4     36 00 00 FF 
032a8     8C 65 86 F1 | 	sub	objptr, ##28044
032ac     50 1B B0 FD | 	call	#_iscommand
032b0     3D 7B E2 F8 | 	getbyte	result1, result1, #0
032b4     04 B8 06 F1 | 	add	local10, #4
032b8     5C 7B 62 FC | 	wrlong	result1, local10
032bc                 | ' lparts(i).token=iscommand(lparts(i).part$)	: if lparts(i).token>0 then goto 102
032bc     54 B9 02 F6 | 	mov	local10, local02
032c0     03 B8 66 F0 | 	shl	local10, #3
032c4     32 AF 02 F6 | 	mov	local05, objptr
032c8     36 00 00 FF 
032cc     8C AF 06 F1 | 	add	local05, ##28044
032d0     57 B9 02 F1 | 	add	local10, local05
032d4     04 B8 06 F1 | 	add	local10, #4
032d8     5C BD 02 FB | 	rdlong	local12, local10
032dc     01 BC 56 F2 | 	cmps	local12, #1 wc
032e0     8C 05 90 3D |  if_ae	jmp	#LR__0184
032e4     54 B9 02 F6 | 	mov	local10, local02
032e8     03 B8 66 F0 | 	shl	local10, #3
032ec     36 00 00 FF 
032f0     8C 65 06 F1 | 	add	objptr, ##28044
032f4     32 B9 02 F1 | 	add	local10, objptr
032f8     54 BB 02 F6 | 	mov	local11, local02
032fc     5D C1 02 F6 | 	mov	local14, local11
03300     60 BF 02 F6 | 	mov	local13, local14
03304     03 BE 66 F0 | 	shl	local13, #3
03308     32 DD 02 F6 | 	mov	local28, objptr
0330c     32 BF 02 F1 | 	add	local13, objptr
03310     5F 93 02 FB | 	rdlong	arg01, local13
03314     36 00 00 FF 
03318     8C 65 86 F1 | 	sub	objptr, ##28044
0331c     A0 2C B0 FD | 	call	#_isfunction
03320     3D 7B E2 F8 | 	getbyte	result1, result1, #0
03324     04 B8 06 F1 | 	add	local10, #4
03328     5C 7B 62 FC | 	wrlong	result1, local10
0332c                 | ' lparts(i).token=isfunction(lparts(i).part$)	: if lparts(i).token>0 then goto 102
0332c     54 B9 02 F6 | 	mov	local10, local02
03330     03 B8 66 F0 | 	shl	local10, #3
03334     32 AF 02 F6 | 	mov	local05, objptr
03338     36 00 00 FF 
0333c     8C AF 06 F1 | 	add	local05, ##28044
03340     57 B9 02 F1 | 	add	local10, local05
03344     04 B8 06 F1 | 	add	local10, #4
03348     5C BD 02 FB | 	rdlong	local12, local10
0334c     01 BC 56 F2 | 	cmps	local12, #1 wc
03350     1C 05 90 3D |  if_ae	jmp	#LR__0184
03354     54 B9 02 F6 | 	mov	local10, local02
03358     03 B8 66 F0 | 	shl	local10, #3
0335c     36 00 00 FF 
03360     8C 65 06 F1 | 	add	objptr, ##28044
03364     32 B9 02 F1 | 	add	local10, objptr
03368     54 BB 02 F6 | 	mov	local11, local02
0336c     5D C1 02 F6 | 	mov	local14, local11
03370     03 C0 66 F0 | 	shl	local14, #3
03374     32 BF 02 F6 | 	mov	local13, objptr
03378     32 C1 02 F1 | 	add	local14, objptr
0337c     60 93 02 FB | 	rdlong	arg01, local14
03380     36 00 00 FF 
03384     8C 65 86 F1 | 	sub	objptr, ##28044
03388     08 15 B0 FD | 	call	#_isnotename
0338c     04 B8 06 F1 | 	add	local10, #4
03390     5C 7B 62 FC | 	wrlong	result1, local10
03394                 | ' lparts(i).token=isnotename(lparts(i).part$) 
03394                 | ' if lparts(i).token>0 then 
03394     54 B9 02 F6 | 	mov	local10, local02
03398     03 B8 66 F0 | 	shl	local10, #3
0339c     32 AF 02 F6 | 	mov	local05, objptr
033a0     36 00 00 FF 
033a4     8C AF 06 F1 | 	add	local05, ##28044
033a8     57 B9 02 F1 | 	add	local10, local05
033ac     04 B8 06 F1 | 	add	local10, #4
033b0     5C B1 02 FB | 	rdlong	local06, local10
033b4     01 B0 56 F2 | 	cmps	local06, #1 wc
033b8     80 00 90 CD |  if_b	jmp	#LR__0174
033bc     54 AF 02 F6 | 	mov	local05, local02
033c0     03 AE 66 F0 | 	shl	local05, #3
033c4     32 B1 02 F6 | 	mov	local06, objptr
033c8     36 00 00 FF 
033cc     8C B1 06 F1 | 	add	local06, ##28044
033d0     58 AF 02 F1 | 	add	local05, local06
033d4     04 AE 06 F1 | 	add	local05, #4
033d8     57 BD 02 FB | 	rdlong	local12, local05
033dc     5E 93 02 F6 | 	mov	arg01, local12
033e0     24 3E B0 FD | 	call	#_getnoteval
033e4     3D FB 02 F6 | 	mov	local43, result1
033e8     54 B9 02 F6 | 	mov	local10, local02
033ec     03 B8 66 F0 | 	shl	local10, #3
033f0     32 AF 02 F6 | 	mov	local05, objptr
033f4     36 00 00 FF 
033f8     8C AF 06 F1 | 	add	local05, ##28044
033fc     57 B9 02 F1 | 	add	local10, local05
03400     7D 93 02 F6 | 	mov	arg01, local43
03404     A0 33 B2 FD | 	call	#__system__str_S
03408     5C 7B 62 FC | 	wrlong	result1, local10
0340c     54 AD 02 F6 | 	mov	local04, local02
03410     56 AB 02 F6 | 	mov	local03, local04
03414     55 B9 02 F6 | 	mov	local10, local03
03418     03 B8 66 F0 | 	shl	local10, #3
0341c     32 AF 02 F6 | 	mov	local05, objptr
03420     36 00 00 FF 
03424     8C AF 06 F1 | 	add	local05, ##28044
03428     57 B9 02 F1 | 	add	local10, local05
0342c     04 B8 06 F1 | 	add	local10, #4
03430     01 00 80 FF 
03434     5C 05 68 FC | 	wrlong	##514, local10
03438     34 04 90 FD | 	jmp	#LR__0184
0343c                 | LR__0174
0343c     54 B9 02 F6 | 	mov	local10, local02
03440     03 B8 66 F0 | 	shl	local10, #3
03444     36 00 00 FF 
03448     8C 65 06 F1 | 	add	objptr, ##28044
0344c     32 B9 02 F1 | 	add	local10, objptr
03450     54 C1 02 F6 | 	mov	local14, local02
03454     03 C0 66 F0 | 	shl	local14, #3
03458     32 C1 02 F1 | 	add	local14, objptr
0345c     60 93 02 FB | 	rdlong	arg01, local14
03460     36 00 00 FF 
03464     8C 65 86 F1 | 	sub	objptr, ##28044
03468     C0 12 B0 FD | 	call	#_ischannel
0346c     04 B8 06 F1 | 	add	local10, #4
03470     5C 7B 62 FC | 	wrlong	result1, local10
03474                 | ' 
03474                 | ' ' if it is #channel, make it a number from 0 to 9 while setting a token_channel
03474                 | ' 
03474                 | ' lparts(i).token=ischannel(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=right$(lparts(i).part$,1) : lparts(i).token=token_channel : goto 102
03474     54 B9 02 F6 | 	mov	local10, local02
03478     03 B8 66 F0 | 	shl	local10, #3
0347c     32 AF 02 F6 | 	mov	local05, objptr
03480     36 00 00 FF 
03484     8C AF 06 F1 | 	add	local05, ##28044
03488     57 B9 02 F1 | 	add	local10, local05
0348c     04 B8 06 F1 | 	add	local10, #4
03490     5C B1 02 FB | 	rdlong	local06, local10
03494     01 B0 56 F2 | 	cmps	local06, #1 wc
03498     70 00 90 CD |  if_b	jmp	#LR__0175
0349c     54 B9 02 F6 | 	mov	local10, local02
034a0     03 B8 66 F0 | 	shl	local10, #3
034a4     36 00 00 FF 
034a8     8C 65 06 F1 | 	add	objptr, ##28044
034ac     32 B9 02 F1 | 	add	local10, objptr
034b0     54 BB 02 F6 | 	mov	local11, local02
034b4     5D C1 02 F6 | 	mov	local14, local11
034b8     03 C0 66 F0 | 	shl	local14, #3
034bc     32 BF 02 F6 | 	mov	local13, objptr
034c0     32 C1 02 F1 | 	add	local14, objptr
034c4     60 93 02 FB | 	rdlong	arg01, local14
034c8     01 BC 06 F6 | 	mov	local12, #1
034cc     01 94 06 F6 | 	mov	arg02, #1
034d0     36 00 00 FF 
034d4     8C 65 86 F1 | 	sub	objptr, ##28044
034d8     5C 31 B2 FD | 	call	#__system__Right_S
034dc     5C 7B 62 FC | 	wrlong	result1, local10
034e0     54 AD 02 F6 | 	mov	local04, local02
034e4     56 AB 02 F6 | 	mov	local03, local04
034e8     55 B9 02 F6 | 	mov	local10, local03
034ec     03 B8 66 F0 | 	shl	local10, #3
034f0     32 AF 02 F6 | 	mov	local05, objptr
034f4     36 00 00 FF 
034f8     8C AF 06 F1 | 	add	local05, ##28044
034fc     57 B9 02 F1 | 	add	local10, local05
03500     04 B8 06 F1 | 	add	local10, #4
03504     5C 59 68 FC | 	wrlong	#44, local10
03508     64 03 90 FD | 	jmp	#LR__0184
0350c                 | LR__0175
0350c     54 B9 02 F6 | 	mov	local10, local02
03510     03 B8 66 F0 | 	shl	local10, #3
03514     36 00 00 FF 
03518     8C 65 06 F1 | 	add	objptr, ##28044
0351c     32 B9 02 F1 | 	add	local10, objptr
03520     54 BB 02 F6 | 	mov	local11, local02
03524     5D C1 02 F6 | 	mov	local14, local11
03528     03 C0 66 F0 | 	shl	local14, #3
0352c     32 BF 02 F6 | 	mov	local13, objptr
03530     32 C1 02 F1 | 	add	local14, objptr
03534     60 93 02 FB | 	rdlong	arg01, local14
03538     36 00 00 FF 
0353c     8C 65 86 F1 | 	sub	objptr, ##28044
03540     D0 12 B0 FD | 	call	#_isconstant
03544     04 B8 06 F1 | 	add	local10, #4
03548     5C 7B 62 FC | 	wrlong	result1, local10
0354c                 | ' lparts(i).token=isconstant(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=str$(lparts(i).token) : lparts(i).token=token_integer : goto 102
0354c     54 B9 02 F6 | 	mov	local10, local02
03550     03 B8 66 F0 | 	shl	local10, #3
03554     32 AF 02 F6 | 	mov	local05, objptr
03558     36 00 00 FF 
0355c     8C AF 06 F1 | 	add	local05, ##28044
03560     57 B9 02 F1 | 	add	local10, local05
03564     04 B8 06 F1 | 	add	local10, #4
03568     5C B1 02 FB | 	rdlong	local06, local10
0356c     01 B0 56 F2 | 	cmps	local06, #1 wc
03570     90 00 90 CD |  if_b	jmp	#LR__0176
03574     54 B9 02 F6 | 	mov	local10, local02
03578     03 B8 66 F0 | 	shl	local10, #3
0357c     36 00 00 FF 
03580     8C 65 06 F1 | 	add	objptr, ##28044
03584     32 B9 02 F1 | 	add	local10, objptr
03588     54 BD 02 F6 | 	mov	local12, local02
0358c     5E BB 02 F6 | 	mov	local11, local12
03590     5D C1 02 F6 | 	mov	local14, local11
03594     03 C0 66 F0 | 	shl	local14, #3
03598     32 BF 02 F6 | 	mov	local13, objptr
0359c     32 C1 02 F1 | 	add	local14, objptr
035a0     04 C0 06 F1 | 	add	local14, #4
035a4     60 93 02 FB | 	rdlong	arg01, local14
035a8     04 C0 86 F1 | 	sub	local14, #4
035ac     36 00 00 FF 
035b0     8C 65 86 F1 | 	sub	objptr, ##28044
035b4     49 93 52 F6 | 	abs	arg01, arg01 wc
035b8     1F FC C6 C9 |  if_b	decod	local44, #31
035bc     00 FC 06 36 |  if_ae	mov	local44, #0
035c0     10 3A B2 FD | 	call	#__system___float_fromuns
035c4     7E 7B 62 F5 | 	xor	result1, local44
035c8     3D 93 02 F6 | 	mov	arg01, result1
035cc     D8 31 B2 FD | 	call	#__system__str_S
035d0     5C 7B 62 FC | 	wrlong	result1, local10
035d4     54 AD 02 F6 | 	mov	local04, local02
035d8     56 AB 02 F6 | 	mov	local03, local04
035dc     55 B9 02 F6 | 	mov	local10, local03
035e0     03 B8 66 F0 | 	shl	local10, #3
035e4     32 AF 02 F6 | 	mov	local05, objptr
035e8     36 00 00 FF 
035ec     8C AF 06 F1 | 	add	local05, ##28044
035f0     57 B9 02 F1 | 	add	local10, local05
035f4     04 B8 06 F1 | 	add	local10, #4
035f8     01 00 80 FF 
035fc     5C 03 68 FC | 	wrlong	##513, local10
03600     6C 02 90 FD | 	jmp	#LR__0184
03604                 | LR__0176
03604     54 B1 02 F6 | 	mov	local06, local02
03608     03 B0 66 F0 | 	shl	local06, #3
0360c     32 BD 02 F6 | 	mov	local12, objptr
03610     36 00 00 FF 
03614     8C BD 06 F1 | 	add	local12, ##28044
03618     5E B1 02 F1 | 	add	local06, local12
0361c     58 93 02 FB | 	rdlong	arg01, local06
03620     30 34 B0 FD | 	call	#_isnum
03624     3D FF 02 F6 | 	mov	local45, result1
03628     07 FE 66 F7 | 	signx	local45, #7
0362c     54 B1 02 F6 | 	mov	local06, local02
03630     03 B0 66 F0 | 	shl	local06, #3
03634     32 BD 02 F6 | 	mov	local12, objptr
03638     36 00 00 FF 
0363c     8C BD 06 F1 | 	add	local12, ##28044
03640     5E B1 02 F1 | 	add	local06, local12
03644     58 93 02 FB | 	rdlong	arg01, local06
03648     F4 37 B0 FD | 	call	#_isint
0364c     3D 01 03 F6 | 	mov	local46, result1
03650     07 00 67 F7 | 	signx	local46, #7
03654     54 B1 02 F6 | 	mov	local06, local02
03658     03 B0 66 F0 | 	shl	local06, #3
0365c     32 BD 02 F6 | 	mov	local12, objptr
03660     36 00 00 FF 
03664     8C BD 06 F1 | 	add	local12, ##28044
03668     5E B1 02 F1 | 	add	local06, local12
0366c     58 93 02 FB | 	rdlong	arg01, local06
03670     70 3A B0 FD | 	call	#_isdec
03674     07 7A 66 F7 | 	signx	result1, #7
03678     3D 03 03 F6 | 	mov	local47, result1
0367c                 | ' 
0367c                 | ' b1=isnum(lparts(i).part$) : b2=isint(lparts(i).part$) : b3=isdec(lparts(i).part$)
0367c                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal 			: goto 102 	' pure decimal for line num
0367c     00 FE 0E F2 | 	cmp	local45, #0 wz
03680     00 00 0F 52 |  if_ne	cmp	local46, #0 wz
03684     00 02 0F 52 |  if_ne	cmp	local47, #0 wz
03688     30 00 90 AD |  if_e	jmp	#LR__0177
0368c     54 AD 02 F6 | 	mov	local04, local02
03690     56 AB 02 F6 | 	mov	local03, local04
03694     55 B9 02 F6 | 	mov	local10, local03
03698     03 B8 66 F0 | 	shl	local10, #3
0369c     32 AF 02 F6 | 	mov	local05, objptr
036a0     36 00 00 FF 
036a4     8C AF 06 F1 | 	add	local05, ##28044
036a8     57 B9 02 F1 | 	add	local10, local05
036ac     04 B8 06 F1 | 	add	local10, #4
036b0     01 00 80 FF 
036b4     5C 01 68 FC | 	wrlong	##512, local10
036b8     B4 01 90 FD | 	jmp	#LR__0184
036bc                 | LR__0177
036bc                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer 		: goto 102 	' integer
036bc     00 FE 0E F2 | 	cmp	local45, #0 wz
036c0     00 00 0F 52 |  if_ne	cmp	local46, #0 wz
036c4     81 AD 22 56 |  if_ne	not	local04, local47
036c8     00 AC 0E 52 |  if_ne	cmp	local04, #0 wz
036cc     30 00 90 AD |  if_e	jmp	#LR__0178
036d0     54 AD 02 F6 | 	mov	local04, local02
036d4     56 AB 02 F6 | 	mov	local03, local04
036d8     55 B9 02 F6 | 	mov	local10, local03
036dc     03 B8 66 F0 | 	shl	local10, #3
036e0     32 AF 02 F6 | 	mov	local05, objptr
036e4     36 00 00 FF 
036e8     8C AF 06 F1 | 	add	local05, ##28044
036ec     57 B9 02 F1 | 	add	local10, local05
036f0     04 B8 06 F1 | 	add	local10, #4
036f4     01 00 80 FF 
036f8     5C 03 68 FC | 	wrlong	##513, local10
036fc     70 01 90 FD | 	jmp	#LR__0184
03700                 | LR__0178
03700                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float 	: goto 102 	' float
03700     00 FE 0E F2 | 	cmp	local45, #0 wz
03704     80 AD 22 56 |  if_ne	not	local04, local46
03708     00 AC 0E 52 |  if_ne	cmp	local04, #0 wz
0370c     81 AB 22 56 |  if_ne	not	local03, local47
03710     00 AA 0E 52 |  if_ne	cmp	local03, #0 wz
03714     30 00 90 AD |  if_e	jmp	#LR__0179
03718     54 AD 02 F6 | 	mov	local04, local02
0371c     56 AB 02 F6 | 	mov	local03, local04
03720     55 B9 02 F6 | 	mov	local10, local03
03724     03 B8 66 F0 | 	shl	local10, #3
03728     32 AF 02 F6 | 	mov	local05, objptr
0372c     36 00 00 FF 
03730     8C AF 06 F1 | 	add	local05, ##28044
03734     57 B9 02 F1 | 	add	local10, local05
03738     04 B8 06 F1 | 	add	local10, #4
0373c     01 00 80 FF 
03740     5C 05 68 FC | 	wrlong	##514, local10
03744     28 01 90 FD | 	jmp	#LR__0184
03748                 | LR__0179
03748                 | ' 
03748                 | ' if isstring(lparts(i).part$) then 
03748     54 AF 02 F6 | 	mov	local05, local02
0374c     03 AE 66 F0 | 	shl	local05, #3
03750     32 B1 02 F6 | 	mov	local06, objptr
03754     36 00 00 FF 
03758     8C B1 06 F1 | 	add	local06, ##28044
0375c     58 AF 02 F1 | 	add	local05, local06
03760     57 93 02 FB | 	rdlong	arg01, local05
03764     3C 3A B0 FD | 	call	#_isstring
03768     00 7A 0E F2 | 	cmp	result1, #0 wz
0376c     A8 00 90 AD |  if_e	jmp	#LR__0182
03770     54 B9 02 F6 | 	mov	local10, local02
03774     03 B8 66 F0 | 	shl	local10, #3
03778     36 00 00 FF 
0377c     8C 65 06 F1 | 	add	objptr, ##28044
03780     32 B9 02 F1 | 	add	local10, objptr
03784     04 B8 06 F1 | 	add	local10, #4
03788     01 00 80 FF 
0378c     5C 07 68 FC | 	wrlong	##515, local10
03790     54 AD 02 F6 | 	mov	local04, local02
03794     56 AB 02 F6 | 	mov	local03, local04
03798     55 B9 02 F6 | 	mov	local10, local03
0379c     03 B8 66 F0 | 	shl	local10, #3
037a0     32 B9 02 F1 | 	add	local10, objptr
037a4     54 C1 02 F6 | 	mov	local14, local02
037a8     03 C0 66 F0 | 	shl	local14, #3
037ac     32 C1 02 F1 | 	add	local14, objptr
037b0     60 B1 02 FB | 	rdlong	local06, local14
037b4     02 BC 06 F6 | 	mov	local12, #2
037b8     54 D1 02 F6 | 	mov	local22, local02
037bc     68 D3 02 F6 | 	mov	local23, local22
037c0     03 D2 66 F0 | 	shl	local23, #3
037c4     32 D5 02 F6 | 	mov	local24, objptr
037c8     32 D3 02 F1 | 	add	local23, objptr
037cc     69 93 02 FB | 	rdlong	arg01, local23
037d0     36 00 00 FF 
037d4     8C 65 86 F1 | 	sub	objptr, ##28044
037d8     49 B3 02 F6 | 	mov	local07, arg01
037dc     D7 06 48 FB | 	callpa	#(@LR__0181-@LR__0180)>>2,fcache_load_ptr_
037e0                 | LR__0180
037e0     59 7B CA FA | 	rdbyte	result1, local07 wz
037e4     01 B2 06 51 |  if_ne	add	local07, #1
037e8     F4 FF 9F 5D |  if_ne	jmp	#LR__0180
037ec                 | LR__0181
037ec     49 B3 82 F1 | 	sub	local07, arg01
037f0     59 BF 02 F6 | 	mov	local13, local07
037f4     5F C1 02 F6 | 	mov	local14, local13
037f8     02 C0 86 F1 | 	sub	local14, #2
037fc     60 BB 02 F6 | 	mov	local11, local14
03800     58 93 02 F6 | 	mov	arg01, local06
03804     5E 95 02 F6 | 	mov	arg02, local12
03808     5D 97 02 F6 | 	mov	arg03, local11
0380c     B8 2E B2 FD | 	call	#__system__Mid_S
03810     5C 7B 62 FC | 	wrlong	result1, local10
03814     58 00 90 FD | 	jmp	#LR__0184
03818                 | LR__0182
03818                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
03818     54 AB 02 F6 | 	mov	local03, local02
0381c     55 AF 02 F6 | 	mov	local05, local03
03820     03 AE 66 F0 | 	shl	local05, #3
03824     32 B1 02 F6 | 	mov	local06, objptr
03828     36 00 00 FF 
0382c     8C B1 06 F1 | 	add	local06, ##28044
03830     58 AF 02 F1 | 	add	local05, local06
03834     57 93 02 FB | 	rdlong	arg01, local05
03838     A4 2F B0 FD | 	call	#_isname
0383c     3D AD 0A F6 | 	mov	local04, result1 wz
03840     2C 00 90 AD |  if_e	jmp	#LR__0183
03844     54 AD 02 F6 | 	mov	local04, local02
03848     56 AB 02 F6 | 	mov	local03, local04
0384c     55 B9 02 F6 | 	mov	local10, local03
03850     03 B8 66 F0 | 	shl	local10, #3
03854     32 AF 02 F6 | 	mov	local05, objptr
03858     36 00 00 FF 
0385c     8C AF 06 F1 | 	add	local05, ##28044
03860     57 B9 02 F1 | 	add	local10, local05
03864     04 B8 06 F1 | 	add	local10, #4
03868     01 00 80 FF 
0386c     5C 09 68 FC | 	wrlong	##516, local10
03870                 | LR__0183
03870                 | LR__0184
03870     01 A8 06 F1 | 	add	local02, #1
03874     A0 F8 9F FD | 	jmp	#LR__0173
03878                 | LR__0185
03878     63 B9 02 F6 | 	mov	local10, local17
0387c     03 B8 66 F0 | 	shl	local10, #3
03880     36 00 00 FF 
03884     8C 65 06 F1 | 	add	objptr, ##28044
03888     32 B9 02 F1 | 	add	local10, objptr
0388c     04 B8 06 F1 | 	add	local10, #4
03890     5C FD 6B FC | 	wrlong	#510, local10
03894     63 B9 02 F6 | 	mov	local10, local17
03898     03 B8 66 F0 | 	shl	local10, #3
0389c     32 B9 02 F1 | 	add	local10, objptr
038a0     94 01 00 FF 
038a4     1B B1 06 F6 | 	mov	local06, ##@LR__5559
038a8     5C B1 62 FC | 	wrlong	local06, local10
038ac     10 00 00 FF 
038b0     54 64 06 F1 | 	add	objptr, ##8276
038b4     32 C7 62 FC | 	wrlong	local17, objptr
038b8     46 00 00 FF 
038bc     E0 65 86 F1 | 	sub	objptr, ##36320
038c0                 | ' 
038c0                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
038c0                 | ' 
038c0                 | ' ' process the case when simple load or save is called without "". This cannot be done earlier, as tokens has to be known                                    					 
038c0                 | '  
038c0                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br." orelse lp$="enter" orelse lp$="e.") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
038c0     94 01 00 FF 
038c4     1C 95 06 F6 | 	mov	arg02, ##@LR__5560
038c8     7B 93 02 F6 | 	mov	arg01, local41
038cc     60 14 B2 FD | 	call	#__system___string_cmp
038d0     00 7A 0E F2 | 	cmp	result1, #0 wz
038d4     F0 00 90 AD |  if_e	jmp	#LR__0186
038d8     94 01 00 FF 
038dc     21 95 06 F6 | 	mov	arg02, ##@LR__5561
038e0     7B 93 02 F6 | 	mov	arg01, local41
038e4     48 14 B2 FD | 	call	#__system___string_cmp
038e8     00 7A 0E F2 | 	cmp	result1, #0 wz
038ec     D8 00 90 AD |  if_e	jmp	#LR__0186
038f0     94 01 00 FF 
038f4     26 B1 06 F6 | 	mov	local06, ##@LR__5562
038f8     7B 93 02 F6 | 	mov	arg01, local41
038fc     58 95 02 F6 | 	mov	arg02, local06
03900     2C 14 B2 FD | 	call	#__system___string_cmp
03904     00 7A 0E F2 | 	cmp	result1, #0 wz
03908     BC 00 90 AD |  if_e	jmp	#LR__0186
0390c     94 01 00 FF 
03910     2B BD 06 F6 | 	mov	local12, ##@LR__5563
03914     5E B1 02 F6 | 	mov	local06, local12
03918     7B 93 02 F6 | 	mov	arg01, local41
0391c     58 95 02 F6 | 	mov	arg02, local06
03920     0C 14 B2 FD | 	call	#__system___string_cmp
03924     00 7A 0E F2 | 	cmp	result1, #0 wz
03928     9C 00 90 AD |  if_e	jmp	#LR__0186
0392c     94 01 00 FF 
03930     2F BB 06 F6 | 	mov	local11, ##@LR__5564
03934     5D BD 02 F6 | 	mov	local12, local11
03938     7B 93 02 F6 | 	mov	arg01, local41
0393c     5E 95 02 F6 | 	mov	arg02, local12
03940     EC 13 B2 FD | 	call	#__system___string_cmp
03944     3D B1 0A F6 | 	mov	local06, result1 wz
03948     7C 00 90 AD |  if_e	jmp	#LR__0186
0394c     94 01 00 FF 
03950     33 C1 06 F6 | 	mov	local14, ##@LR__5565
03954     60 BB 02 F6 | 	mov	local11, local14
03958     7B 93 02 F6 | 	mov	arg01, local41
0395c     5D 95 02 F6 | 	mov	arg02, local11
03960     CC 13 B2 FD | 	call	#__system___string_cmp
03964     3D BD 0A F6 | 	mov	local12, result1 wz
03968     5C 00 90 AD |  if_e	jmp	#LR__0186
0396c     94 01 00 FF 
03970     36 BF 06 F6 | 	mov	local13, ##@LR__5566
03974     5F C1 02 F6 | 	mov	local14, local13
03978     7B 93 02 F6 | 	mov	arg01, local41
0397c     60 95 02 F6 | 	mov	arg02, local14
03980     AC 13 B2 FD | 	call	#__system___string_cmp
03984     3D BB 0A F6 | 	mov	local11, result1 wz
03988     3C 00 90 AD |  if_e	jmp	#LR__0186
0398c     94 01 00 FF 
03990     3A BF 06 F6 | 	mov	local13, ##@LR__5567
03994     7B 93 02 F6 | 	mov	arg01, local41
03998     5F 95 02 F6 | 	mov	arg02, local13
0399c     90 13 B2 FD | 	call	#__system___string_cmp
039a0     3D C1 0A F6 | 	mov	local14, result1 wz
039a4     20 00 90 AD |  if_e	jmp	#LR__0186
039a8     94 01 00 FF 
039ac     40 D1 06 F6 | 	mov	local22, ##@LR__5568
039b0     68 DD 02 F6 | 	mov	local28, local22
039b4     7B 93 02 F6 | 	mov	arg01, local41
039b8     6E 95 02 F6 | 	mov	arg02, local28
039bc     70 13 B2 FD | 	call	#__system___string_cmp
039c0     3D BF 0A F6 | 	mov	local13, result1 wz
039c4     B8 00 90 5D |  if_ne	jmp	#LR__0187
039c8                 | LR__0186
039c8     77 DD 02 F6 | 	mov	local28, local37
039cc     01 DC 06 F1 | 	add	local28, #1
039d0     6E D1 02 F6 | 	mov	local22, local28
039d4     68 D3 02 F6 | 	mov	local23, local22
039d8     03 D2 66 F0 | 	shl	local23, #3
039dc     32 D5 02 F6 | 	mov	local24, objptr
039e0     36 00 00 FF 
039e4     8C D5 06 F1 | 	add	local24, ##28044
039e8     6A D3 02 F1 | 	add	local23, local24
039ec     04 D2 06 F1 | 	add	local23, #4
039f0     69 E1 02 FB | 	rdlong	local30, local23
039f4     04 D2 86 F1 | 	sub	local23, #4
039f8     70 DF 02 F6 | 	mov	local29, local30
039fc     01 00 00 FF 
03a00     04 DE 0E F2 | 	cmp	local29, ##516 wz
03a04     78 00 90 5D |  if_ne	jmp	#LR__0187
03a08     77 05 03 F6 | 	mov	local48, local37
03a0c     01 04 07 F1 | 	add	local48, #1
03a10     03 04 67 F0 | 	shl	local48, #3
03a14     32 07 03 F6 | 	mov	local49, objptr
03a18     36 00 00 FF 
03a1c     8C 07 07 F1 | 	add	local49, ##28044
03a20     83 05 03 F1 | 	add	local48, local49
03a24     82 93 02 FB | 	rdlong	arg01, local48
03a28     01 94 06 F6 | 	mov	arg02, #1
03a2c     08 2C B2 FD | 	call	#__system__Right_S
03a30     3D 93 02 F6 | 	mov	arg01, result1
03a34     94 01 00 FF 
03a38     43 09 07 F6 | 	mov	local50, ##@LR__5569
03a3c     84 0B 03 F6 | 	mov	local51, local50
03a40     85 95 02 F6 | 	mov	arg02, local51
03a44     E8 12 B2 FD | 	call	#__system___string_cmp
03a48     3D E3 0A F6 | 	mov	local31, result1 wz
03a4c     30 00 90 AD |  if_e	jmp	#LR__0187
03a50     77 B9 02 F6 | 	mov	local10, local37
03a54     01 B8 06 F1 | 	add	local10, #1
03a58     03 B8 66 F0 | 	shl	local10, #3
03a5c     32 AF 02 F6 | 	mov	local05, objptr
03a60     36 00 00 FF 
03a64     8C AF 06 F1 | 	add	local05, ##28044
03a68     57 B9 02 F1 | 	add	local10, local05
03a6c     01 00 00 FF 
03a70     03 B0 06 F6 | 	mov	local06, ##515
03a74     04 B8 06 F1 | 	add	local10, #4
03a78     01 00 80 FF 
03a7c     5C 07 68 FC | 	wrlong	##515, local10
03a80                 | LR__0187
03a80                 | ' if (lp$="delete" orelse lp$="mkdir") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
03a80     94 01 00 FF 
03a84     45 95 06 F6 | 	mov	arg02, ##@LR__5570
03a88     7B 93 02 F6 | 	mov	arg01, local41
03a8c     A0 12 B2 FD | 	call	#__system___string_cmp
03a90     00 7A 0E F2 | 	cmp	result1, #0 wz
03a94     1C 00 90 AD |  if_e	jmp	#LR__0188
03a98     94 01 00 FF 
03a9c     4C AF 06 F6 | 	mov	local05, ##@LR__5571
03aa0     7B 93 02 F6 | 	mov	arg01, local41
03aa4     57 95 02 F6 | 	mov	arg02, local05
03aa8     84 12 B2 FD | 	call	#__system___string_cmp
03aac     00 7A 0E F2 | 	cmp	result1, #0 wz
03ab0     B4 00 90 5D |  if_ne	jmp	#LR__0189
03ab4                 | LR__0188
03ab4     77 AF 02 F6 | 	mov	local05, local37
03ab8     01 AE 06 F1 | 	add	local05, #1
03abc     57 B1 02 F6 | 	mov	local06, local05
03ac0     03 B0 66 F0 | 	shl	local06, #3
03ac4     32 BD 02 F6 | 	mov	local12, objptr
03ac8     36 00 00 FF 
03acc     8C BD 06 F1 | 	add	local12, ##28044
03ad0     5E B1 02 F1 | 	add	local06, local12
03ad4     04 B0 06 F1 | 	add	local06, #4
03ad8     58 C1 02 FB | 	rdlong	local14, local06
03adc     04 B0 86 F1 | 	sub	local06, #4
03ae0     60 BB 02 F6 | 	mov	local11, local14
03ae4     01 00 00 FF 
03ae8     04 BA 0E F2 | 	cmp	local11, ##516 wz
03aec     78 00 90 5D |  if_ne	jmp	#LR__0189
03af0     77 D3 02 F6 | 	mov	local23, local37
03af4     01 D2 06 F1 | 	add	local23, #1
03af8     03 D2 66 F0 | 	shl	local23, #3
03afc     32 D5 02 F6 | 	mov	local24, objptr
03b00     36 00 00 FF 
03b04     8C D5 06 F1 | 	add	local24, ##28044
03b08     6A D3 02 F1 | 	add	local23, local24
03b0c     69 93 02 FB | 	rdlong	arg01, local23
03b10     01 94 06 F6 | 	mov	arg02, #1
03b14     20 2B B2 FD | 	call	#__system__Right_S
03b18     3D 93 02 F6 | 	mov	arg01, result1
03b1c     94 01 00 FF 
03b20     52 D1 06 F6 | 	mov	local22, ##@LR__5572
03b24     68 DD 02 F6 | 	mov	local28, local22
03b28     6E 95 02 F6 | 	mov	arg02, local28
03b2c     00 12 B2 FD | 	call	#__system___string_cmp
03b30     3D BF 0A F6 | 	mov	local13, result1 wz
03b34     30 00 90 AD |  if_e	jmp	#LR__0189
03b38     77 B9 02 F6 | 	mov	local10, local37
03b3c     01 B8 06 F1 | 	add	local10, #1
03b40     03 B8 66 F0 | 	shl	local10, #3
03b44     32 AF 02 F6 | 	mov	local05, objptr
03b48     36 00 00 FF 
03b4c     8C AF 06 F1 | 	add	local05, ##28044
03b50     57 B9 02 F1 | 	add	local10, local05
03b54     01 00 00 FF 
03b58     03 B0 06 F6 | 	mov	local06, ##515
03b5c     04 B8 06 F1 | 	add	local10, #4
03b60     01 00 80 FF 
03b64     5C 07 68 FC | 	wrlong	##515, local10
03b68                 | LR__0189
03b68                 | ' if (lp$="copy") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
03b68     94 01 00 FF 
03b6c     54 95 06 F6 | 	mov	arg02, ##@LR__5573
03b70     7B 93 02 F6 | 	mov	arg01, local41
03b74     B8 11 B2 FD | 	call	#__system___string_cmp
03b78     00 7A 0E F2 | 	cmp	result1, #0 wz
03b7c     B0 00 90 5D |  if_ne	jmp	#LR__0190
03b80     77 AF 02 F6 | 	mov	local05, local37
03b84     01 AE 06 F1 | 	add	local05, #1
03b88     03 AE 66 F0 | 	shl	local05, #3
03b8c     32 B1 02 F6 | 	mov	local06, objptr
03b90     36 00 00 FF 
03b94     8C B1 06 F1 | 	add	local06, ##28044
03b98     58 AF 02 F1 | 	add	local05, local06
03b9c     04 AE 06 F1 | 	add	local05, #4
03ba0     57 BB 02 FB | 	rdlong	local11, local05
03ba4     04 AE 86 F1 | 	sub	local05, #4
03ba8     5D BD 02 F6 | 	mov	local12, local11
03bac     01 00 00 FF 
03bb0     04 BC 0E F2 | 	cmp	local12, ##516 wz
03bb4     78 00 90 5D |  if_ne	jmp	#LR__0190
03bb8     77 D1 02 F6 | 	mov	local22, local37
03bbc     01 D0 06 F1 | 	add	local22, #1
03bc0     03 D0 66 F0 | 	shl	local22, #3
03bc4     32 D3 02 F6 | 	mov	local23, objptr
03bc8     36 00 00 FF 
03bcc     8C D3 06 F1 | 	add	local23, ##28044
03bd0     69 D1 02 F1 | 	add	local22, local23
03bd4     68 93 02 FB | 	rdlong	arg01, local22
03bd8     01 94 06 F6 | 	mov	arg02, #1
03bdc     58 2A B2 FD | 	call	#__system__Right_S
03be0     3D 93 02 F6 | 	mov	arg01, result1
03be4     94 01 00 FF 
03be8     59 DD 06 F6 | 	mov	local28, ##@LR__5574
03bec     6E BF 02 F6 | 	mov	local13, local28
03bf0     5F 95 02 F6 | 	mov	arg02, local13
03bf4     38 11 B2 FD | 	call	#__system___string_cmp
03bf8     3D C1 0A F6 | 	mov	local14, result1 wz
03bfc     30 00 90 AD |  if_e	jmp	#LR__0190
03c00     77 B9 02 F6 | 	mov	local10, local37
03c04     01 B8 06 F1 | 	add	local10, #1
03c08     03 B8 66 F0 | 	shl	local10, #3
03c0c     32 AF 02 F6 | 	mov	local05, objptr
03c10     36 00 00 FF 
03c14     8C AF 06 F1 | 	add	local05, ##28044
03c18     57 B9 02 F1 | 	add	local10, local05
03c1c     01 00 00 FF 
03c20     03 B0 06 F6 | 	mov	local06, ##515
03c24     04 B8 06 F1 | 	add	local10, #4
03c28     01 00 80 FF 
03c2c     5C 07 68 FC | 	wrlong	##515, local10
03c30                 | LR__0190
03c30                 | ' if (lp$="copy") andalso lparts(addptr+3).token=token_name andalso right$(lparts(addptr+3).part$,1)<>"$" then lparts(addptr+3).token=token_string
03c30     94 01 00 FF 
03c34     5B 95 06 F6 | 	mov	arg02, ##@LR__5575
03c38     7B 93 02 F6 | 	mov	arg01, local41
03c3c     F0 10 B2 FD | 	call	#__system___string_cmp
03c40     00 7A 0E F2 | 	cmp	result1, #0 wz
03c44     B0 00 90 5D |  if_ne	jmp	#LR__0191
03c48     77 AF 02 F6 | 	mov	local05, local37
03c4c     03 AE 06 F1 | 	add	local05, #3
03c50     03 AE 66 F0 | 	shl	local05, #3
03c54     32 B1 02 F6 | 	mov	local06, objptr
03c58     36 00 00 FF 
03c5c     8C B1 06 F1 | 	add	local06, ##28044
03c60     58 AF 02 F1 | 	add	local05, local06
03c64     04 AE 06 F1 | 	add	local05, #4
03c68     57 BB 02 FB | 	rdlong	local11, local05
03c6c     04 AE 86 F1 | 	sub	local05, #4
03c70     5D BD 02 F6 | 	mov	local12, local11
03c74     01 00 00 FF 
03c78     04 BC 0E F2 | 	cmp	local12, ##516 wz
03c7c     78 00 90 5D |  if_ne	jmp	#LR__0191
03c80     77 D1 02 F6 | 	mov	local22, local37
03c84     03 D0 06 F1 | 	add	local22, #3
03c88     03 D0 66 F0 | 	shl	local22, #3
03c8c     32 D3 02 F6 | 	mov	local23, objptr
03c90     36 00 00 FF 
03c94     8C D3 06 F1 | 	add	local23, ##28044
03c98     69 D1 02 F1 | 	add	local22, local23
03c9c     68 93 02 FB | 	rdlong	arg01, local22
03ca0     01 94 06 F6 | 	mov	arg02, #1
03ca4     90 29 B2 FD | 	call	#__system__Right_S
03ca8     3D 93 02 F6 | 	mov	arg01, result1
03cac     94 01 00 FF 
03cb0     60 DD 06 F6 | 	mov	local28, ##@LR__5576
03cb4     6E BF 02 F6 | 	mov	local13, local28
03cb8     5F 95 02 F6 | 	mov	arg02, local13
03cbc     70 10 B2 FD | 	call	#__system___string_cmp
03cc0     3D C1 0A F6 | 	mov	local14, result1 wz
03cc4     30 00 90 AD |  if_e	jmp	#LR__0191
03cc8     77 B9 02 F6 | 	mov	local10, local37
03ccc     03 B8 06 F1 | 	add	local10, #3
03cd0     03 B8 66 F0 | 	shl	local10, #3
03cd4     32 AF 02 F6 | 	mov	local05, objptr
03cd8     36 00 00 FF 
03cdc     8C AF 06 F1 | 	add	local05, ##28044
03ce0     57 B9 02 F1 | 	add	local10, local05
03ce4     01 00 00 FF 
03ce8     03 B0 06 F6 | 	mov	local06, ##515
03cec     04 B8 06 F1 | 	add	local10, #4
03cf0     01 00 80 FF 
03cf4     5C 07 68 FC | 	wrlong	##515, local10
03cf8                 | LR__0191
03cf8                 | ' 
03cf8                 | ' ' cd needs special treatment..
03cf8                 | ' 
03cf8                 | ' if lp$="cd" then lparts(addptr+1).token=token_string
03cf8     94 01 00 FF 
03cfc     62 95 06 F6 | 	mov	arg02, ##@LR__5577
03d00     7B 93 02 F6 | 	mov	arg01, local41
03d04     28 10 B2 FD | 	call	#__system___string_cmp
03d08     00 7A 0E F2 | 	cmp	result1, #0 wz
03d0c     30 00 90 5D |  if_ne	jmp	#LR__0192
03d10     77 B9 02 F6 | 	mov	local10, local37
03d14     01 B8 06 F1 | 	add	local10, #1
03d18     03 B8 66 F0 | 	shl	local10, #3
03d1c     32 AF 02 F6 | 	mov	local05, objptr
03d20     36 00 00 FF 
03d24     8C AF 06 F1 | 	add	local05, ##28044
03d28     57 B9 02 F1 | 	add	local10, local05
03d2c     01 00 00 FF 
03d30     03 B0 06 F6 | 	mov	local06, ##515
03d34     04 B8 06 F1 | 	add	local10, #4
03d38     01 00 80 FF 
03d3c     5C 07 68 FC | 	wrlong	##515, local10
03d40                 | LR__0192
03d40                 | ' if lp$="cd." andalso lparts(addptr+1).part$="." then lparts(addptr+1).token=token_string : lparts(addptr+1).part$=".." : lparts(addptr).token=token_cd
03d40     94 01 00 FF 
03d44     65 95 06 F6 | 	mov	arg02, ##@LR__5578
03d48     7B 93 02 F6 | 	mov	arg01, local41
03d4c     E0 0F B2 FD | 	call	#__system___string_cmp
03d50     00 7A 0E F2 | 	cmp	result1, #0 wz
03d54     9C 00 90 5D |  if_ne	jmp	#LR__0193
03d58     77 B1 02 F6 | 	mov	local06, local37
03d5c     01 B0 06 F1 | 	add	local06, #1
03d60     03 B0 66 F0 | 	shl	local06, #3
03d64     32 BD 02 F6 | 	mov	local12, objptr
03d68     36 00 00 FF 
03d6c     8C BD 06 F1 | 	add	local12, ##28044
03d70     5E B1 02 F1 | 	add	local06, local12
03d74     58 93 02 FB | 	rdlong	arg01, local06
03d78     94 01 00 FF 
03d7c     69 AF 06 F6 | 	mov	local05, ##@LR__5579
03d80     57 95 02 F6 | 	mov	arg02, local05
03d84     A8 0F B2 FD | 	call	#__system___string_cmp
03d88     00 7A 0E F2 | 	cmp	result1, #0 wz
03d8c     64 00 90 5D |  if_ne	jmp	#LR__0193
03d90     77 B9 02 F6 | 	mov	local10, local37
03d94     01 B8 06 F1 | 	add	local10, #1
03d98     03 B8 66 F0 | 	shl	local10, #3
03d9c     36 00 00 FF 
03da0     8C 65 06 F1 | 	add	objptr, ##28044
03da4     32 B9 02 F1 | 	add	local10, objptr
03da8     04 B8 06 F1 | 	add	local10, #4
03dac     01 00 80 FF 
03db0     5C 07 68 FC | 	wrlong	##515, local10
03db4     77 B9 02 F6 | 	mov	local10, local37
03db8     01 B8 06 F1 | 	add	local10, #1
03dbc     03 B8 66 F0 | 	shl	local10, #3
03dc0     32 B9 02 F1 | 	add	local10, objptr
03dc4     94 01 00 FF 
03dc8     6B B1 06 F6 | 	mov	local06, ##@LR__5580
03dcc     5C B1 62 FC | 	wrlong	local06, local10
03dd0     77 B9 02 F6 | 	mov	local10, local37
03dd4     03 B8 66 F0 | 	shl	local10, #3
03dd8     32 AF 02 F6 | 	mov	local05, objptr
03ddc     32 B9 02 F1 | 	add	local10, objptr
03de0     C3 B0 06 F6 | 	mov	local06, #195
03de4     04 B8 06 F1 | 	add	local10, #4
03de8     5C 87 69 FC | 	wrlong	#195, local10
03dec     36 00 00 FF 
03df0     8C 65 86 F1 | 	sub	objptr, ##28044
03df4                 | LR__0193
03df4                 | ' if lp$="cd" andalso lparts(addptr+1).part$="/" then lparts(addptr+1).token=token_string : for i=(addptr+2) to k: lparts(addptr+1).part$+=lparts(i).part$ : next i
03df4     94 01 00 FF 
03df8     6E B9 06 F6 | 	mov	local10, ##@LR__5581
03dfc     7B 93 02 F6 | 	mov	arg01, local41
03e00     5C 95 02 F6 | 	mov	arg02, local10
03e04     28 0F B2 FD | 	call	#__system___string_cmp
03e08     00 7A 0E F2 | 	cmp	result1, #0 wz
03e0c     F4 00 90 5D |  if_ne	jmp	#LR__0196
03e10     77 B1 02 F6 | 	mov	local06, local37
03e14     01 B0 06 F1 | 	add	local06, #1
03e18     03 B0 66 F0 | 	shl	local06, #3
03e1c     32 BD 02 F6 | 	mov	local12, objptr
03e20     36 00 00 FF 
03e24     8C BD 06 F1 | 	add	local12, ##28044
03e28     5E B1 02 F1 | 	add	local06, local12
03e2c     58 93 02 FB | 	rdlong	arg01, local06
03e30     94 01 00 FF 
03e34     71 AF 06 F6 | 	mov	local05, ##@LR__5582
03e38     57 B9 02 F6 | 	mov	local10, local05
03e3c     5C 95 02 F6 | 	mov	arg02, local10
03e40     EC 0E B2 FD | 	call	#__system___string_cmp
03e44     00 7A 0E F2 | 	cmp	result1, #0 wz
03e48     B8 00 90 5D |  if_ne	jmp	#LR__0196
03e4c     77 B9 02 F6 | 	mov	local10, local37
03e50     01 B8 06 F1 | 	add	local10, #1
03e54     03 B8 66 F0 | 	shl	local10, #3
03e58     32 AF 02 F6 | 	mov	local05, objptr
03e5c     36 00 00 FF 
03e60     8C AF 06 F1 | 	add	local05, ##28044
03e64     57 B9 02 F1 | 	add	local10, local05
03e68     01 00 00 FF 
03e6c     03 B0 06 F6 | 	mov	local06, ##515
03e70     04 B8 06 F1 | 	add	local10, #4
03e74     01 00 80 FF 
03e78     5C 07 68 FC | 	wrlong	##515, local10
03e7c     04 B8 86 F1 | 	sub	local10, #4
03e80     77 A9 02 F6 | 	mov	local02, local37
03e84     02 A8 06 F1 | 	add	local02, #2
03e88     63 0D 03 F6 | 	mov	local52, local17
03e8c     01 0C 07 F1 | 	add	local52, #1
03e90                 | LR__0194
03e90     86 A9 52 F2 | 	cmps	local02, local52 wc
03e94     6C 00 90 3D |  if_ae	jmp	#LR__0195
03e98     77 B9 02 F6 | 	mov	local10, local37
03e9c     01 B8 06 F1 | 	add	local10, #1
03ea0     03 B8 66 F0 | 	shl	local10, #3
03ea4     36 00 00 FF 
03ea8     8C 65 06 F1 | 	add	objptr, ##28044
03eac     32 AF 02 F6 | 	mov	local05, objptr
03eb0     32 B9 02 F1 | 	add	local10, objptr
03eb4     77 C1 02 F6 | 	mov	local14, local37
03eb8     01 C0 06 F1 | 	add	local14, #1
03ebc     03 C0 66 F0 | 	shl	local14, #3
03ec0     32 C1 02 F1 | 	add	local14, objptr
03ec4     60 93 02 FB | 	rdlong	arg01, local14
03ec8     54 BB 02 F6 | 	mov	local11, local02
03ecc     5D C1 02 F6 | 	mov	local14, local11
03ed0     60 BF 02 F6 | 	mov	local13, local14
03ed4     03 BE 66 F0 | 	shl	local13, #3
03ed8     32 DD 02 F6 | 	mov	local28, objptr
03edc     32 BF 02 F1 | 	add	local13, objptr
03ee0     5F BD 02 FB | 	rdlong	local12, local13
03ee4     5E 95 02 F6 | 	mov	arg02, local12
03ee8     36 00 00 FF 
03eec     8C 65 86 F1 | 	sub	objptr, ##28044
03ef0     70 0E B2 FD | 	call	#__system___string_concat
03ef4     3D B1 02 F6 | 	mov	local06, result1
03ef8     5C B1 62 FC | 	wrlong	local06, local10
03efc     01 A8 06 F1 | 	add	local02, #1
03f00     8C FF 9F FD | 	jmp	#LR__0194
03f04                 | LR__0195
03f04                 | LR__0196
03f04                 | ' 
03f04                 | ' ' determine a type of the line and compile it
03f04                 | ' 
03f04                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
03f04     36 00 00 FF 
03f08     8C 65 06 F1 | 	add	objptr, ##28044
03f0c     32 93 02 FB | 	rdlong	arg01, objptr
03f10     36 00 00 FF 
03f14     8C 65 86 F1 | 	sub	objptr, ##28044
03f18     C8 31 B0 FD | 	call	#_isdec
03f1c     00 7A 0E F2 | 	cmp	result1, #0 wz
03f20     30 00 90 AD |  if_e	jmp	#LR__0197
03f24     36 00 00 FF 
03f28     8C 65 06 F1 | 	add	objptr, ##28044
03f2c     32 93 02 FB | 	rdlong	arg01, objptr
03f30     36 00 00 FF 
03f34     8C 65 86 F1 | 	sub	objptr, ##28044
03f38     00 94 06 F6 | 	mov	arg02, #0
03f3c     1C 3B B2 FD | 	call	#__system____builtin_atoi
03f40     54 00 00 FF 
03f44     68 64 06 F1 | 	add	objptr, ##43112
03f48     32 7B 62 FC | 	wrlong	result1, objptr
03f4c     54 00 00 FF 
03f50     68 64 86 F1 | 	sub	objptr, ##43112
03f54                 | LR__0197
03f54                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104   ' this was an empty numbered line, delete it
03f54     54 00 00 FF 
03f58     68 64 06 F1 | 	add	objptr, ##43112
03f5c     32 AD 02 FB | 	rdlong	local04, objptr
03f60     54 00 00 FF 
03f64     68 64 86 F1 | 	sub	objptr, ##43112
03f68     01 AC 16 F2 | 	cmp	local04, #1 wc
03f6c     40 00 90 CD |  if_b	jmp	#LR__0198
03f70     01 C6 0E F2 | 	cmp	local17, #1 wz
03f74     38 00 00 AF 
03f78     A4 65 06 A1 |  if_e	add	objptr, ##29092
03f7c     32 AF 02 AB |  if_e	rdlong	local05, objptr
03f80     38 00 00 AF 
03f84     A4 65 86 A1 |  if_e	sub	objptr, ##29092
03f88     57 B9 02 A6 |  if_e	mov	local10, local05
03f8c     03 B8 0E A2 |  if_e	cmp	local10, #3 wz
03f90     1C 00 90 5D |  if_ne	jmp	#LR__0198
03f94     54 00 00 FF 
03f98     68 64 06 F1 | 	add	objptr, ##43112
03f9c     32 93 02 FB | 	rdlong	arg01, objptr
03fa0     54 00 00 FF 
03fa4     68 64 86 F1 | 	sub	objptr, ##43112
03fa8     E0 32 B0 FD | 	call	#_deleteline
03fac     C8 03 90 FD | 	jmp	#LR__0209
03fb0                 | LR__0198
03fb0                 | ' 
03fb0                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  		' first part, commans
03fb0     38 00 00 FF 
03fb4     A4 65 06 F1 | 	add	objptr, ##29092
03fb8     32 AD 0A FB | 	rdlong	local04, objptr wz
03fbc     38 00 00 FF 
03fc0     A4 65 86 F1 | 	sub	objptr, ##29092
03fc4     20 00 90 AD |  if_e	jmp	#LR__0199
03fc8     38 00 00 FF 
03fcc     A4 65 06 F1 | 	add	objptr, ##29092
03fd0     32 AF 02 FB | 	rdlong	local05, objptr
03fd4     38 00 00 FF 
03fd8     A4 65 86 F1 | 	sub	objptr, ##29092
03fdc     57 B9 02 F6 | 	mov	local10, local05
03fe0     03 B8 0E F2 | 	cmp	local10, #3 wz
03fe4     C0 00 90 5D |  if_ne	jmp	#LR__0201
03fe8                 | LR__0199
03fe8     36 00 00 FF 
03fec     A0 65 06 F1 | 	add	objptr, ##28064
03ff0     32 BD 02 FB | 	rdlong	local12, objptr
03ff4     36 00 00 FF 
03ff8     A0 65 86 F1 | 	sub	objptr, ##28064
03ffc     1B BC 0E F2 | 	cmp	local12, #27 wz
04000     A4 00 90 AD |  if_e	jmp	#LR__0201
04004     54 00 00 FF 
04008     68 64 06 F1 | 	add	objptr, ##43112
0400c     32 93 02 FB | 	rdlong	arg01, objptr
04010     1B 00 00 FF 
04014     C4 64 86 F1 | 	sub	objptr, ##14020
04018     32 97 02 FB | 	rdlong	arg03, objptr
0401c     38 00 00 FF 
04020     A4 65 86 F1 | 	sub	objptr, ##29092
04024     00 94 06 F6 | 	mov	arg02, #0
04028     38 46 B0 FD | 	call	#_compile
0402c     3D A7 0A F6 | 	mov	local01, result1 wz
04030                 | '   err=compile(linenum,0,cont) 
04030                 | '   if err<>0 then printerror(err,linenum): goto 101
04030     20 00 90 AD |  if_e	jmp	#LR__0200
04034     54 00 00 FF 
04038     68 64 06 F1 | 	add	objptr, ##43112
0403c     32 95 02 FB | 	rdlong	arg02, objptr
04040     54 00 00 FF 
04044     68 64 86 F1 | 	sub	objptr, ##43112
04048     53 93 02 F6 | 	mov	arg01, local01
0404c     E8 CF B1 FD | 	call	#_printerror
04050     44 03 90 FD | 	jmp	#LR__0210
04054                 | LR__0200
04054                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
04054     54 00 00 FF 
04058     AC 64 06 F1 | 	add	objptr, ##43180
0405c     32 93 02 FB | 	rdlong	arg01, objptr
04060     54 00 00 FF 
04064     AC 64 86 F1 | 	sub	objptr, ##43180
04068     94 01 00 FF 
0406c     73 95 06 F6 | 	mov	arg02, ##@LR__5583
04070     BC 0C B2 FD | 	call	#__system___string_cmp
04074     00 7A 0E F2 | 	cmp	result1, #0 wz
04078     FC 02 90 AD |  if_e	jmp	#LR__0209
0407c     54 00 00 FF 
04080     AC 64 06 F1 | 	add	objptr, ##43180
04084     32 AD 02 FB | 	rdlong	local04, objptr
04088     1B 00 00 FF 
0408c     10 65 86 F1 | 	sub	objptr, ##14096
04090     32 AD 62 FC | 	wrlong	local04, objptr
04094     08 64 06 F1 | 	add	objptr, #8
04098     32 09 68 FC | 	wrlong	#4, objptr
0409c     38 00 00 FF 
040a0     A4 65 86 F1 | 	sub	objptr, ##29092
040a4     0C D9 9F FD | 	jmp	#LR__0070
040a8                 | LR__0201
040a8                 | '       							
040a8                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 		' not a first part, command
040a8     38 00 00 FF 
040ac     A4 65 06 F1 | 	add	objptr, ##29092
040b0     32 AD 02 FB | 	rdlong	local04, objptr
040b4     38 00 00 FF 
040b8     A4 65 86 F1 | 	sub	objptr, ##29092
040bc     01 AC 0E F2 | 	cmp	local04, #1 wz
040c0     38 00 00 5F 
040c4     A4 65 06 51 |  if_ne	add	objptr, ##29092
040c8     32 B9 02 5B |  if_ne	rdlong	local10, objptr
040cc     38 00 00 5F 
040d0     A4 65 86 51 |  if_ne	sub	objptr, ##29092
040d4     02 B8 0E 52 |  if_ne	cmp	local10, #2 wz
040d8     C0 00 90 5D |  if_ne	jmp	#LR__0203
040dc     36 00 00 FF 
040e0     98 65 06 F1 | 	add	objptr, ##28056
040e4     32 BD 02 FB | 	rdlong	local12, objptr
040e8     36 00 00 FF 
040ec     98 65 86 F1 | 	sub	objptr, ##28056
040f0     1B BC 0E F2 | 	cmp	local12, #27 wz
040f4     A4 00 90 AD |  if_e	jmp	#LR__0203
040f8     54 00 00 FF 
040fc     68 64 06 F1 | 	add	objptr, ##43112
04100     32 93 02 FB | 	rdlong	arg01, objptr
04104     1B 00 00 FF 
04108     C4 64 86 F1 | 	sub	objptr, ##14020
0410c     32 97 02 FB | 	rdlong	arg03, objptr
04110     38 00 00 FF 
04114     A4 65 86 F1 | 	sub	objptr, ##29092
04118     00 94 06 F6 | 	mov	arg02, #0
0411c     44 45 B0 FD | 	call	#_compile
04120     3D A7 0A F6 | 	mov	local01, result1 wz
04124                 | '   err=compile(linenum,0,cont) 
04124                 | '   if err<>0 then printerror(err,linenum): goto 101
04124     20 00 90 AD |  if_e	jmp	#LR__0202
04128     54 00 00 FF 
0412c     68 64 06 F1 | 	add	objptr, ##43112
04130     32 95 02 FB | 	rdlong	arg02, objptr
04134     54 00 00 FF 
04138     68 64 86 F1 | 	sub	objptr, ##43112
0413c     53 93 02 F6 | 	mov	arg01, local01
04140     F4 CE B1 FD | 	call	#_printerror
04144     50 02 90 FD | 	jmp	#LR__0210
04148                 | LR__0202
04148                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
04148     54 00 00 FF 
0414c     AC 64 06 F1 | 	add	objptr, ##43180
04150     32 93 02 FB | 	rdlong	arg01, objptr
04154     54 00 00 FF 
04158     AC 64 86 F1 | 	sub	objptr, ##43180
0415c     94 01 00 FF 
04160     74 95 06 F6 | 	mov	arg02, ##@LR__5584
04164     C8 0B B2 FD | 	call	#__system___string_cmp
04168     00 7A 0E F2 | 	cmp	result1, #0 wz
0416c     08 02 90 AD |  if_e	jmp	#LR__0209
04170     54 00 00 FF 
04174     AC 64 06 F1 | 	add	objptr, ##43180
04178     32 AD 02 FB | 	rdlong	local04, objptr
0417c     1B 00 00 FF 
04180     10 65 86 F1 | 	sub	objptr, ##14096
04184     32 AD 62 FC | 	wrlong	local04, objptr
04188     08 64 06 F1 | 	add	objptr, #8
0418c     32 09 68 FC | 	wrlong	#4, objptr
04190     38 00 00 FF 
04194     A4 65 86 F1 | 	sub	objptr, ##29092
04198     18 D8 9F FD | 	jmp	#LR__0070
0419c                 | LR__0203
0419c                 | ' 							 
0419c                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  		' first part, assign
0419c     38 00 00 FF 
041a0     A4 65 06 F1 | 	add	objptr, ##29092
041a4     32 AD 0A FB | 	rdlong	local04, objptr wz
041a8     38 00 00 FF 
041ac     A4 65 86 F1 | 	sub	objptr, ##29092
041b0     38 00 00 5F 
041b4     A4 65 06 51 |  if_ne	add	objptr, ##29092
041b8     32 B9 02 5B |  if_ne	rdlong	local10, objptr
041bc     38 00 00 5F 
041c0     A4 65 86 51 |  if_ne	sub	objptr, ##29092
041c4     03 B8 0E 52 |  if_ne	cmp	local10, #3 wz
041c8     36 00 00 AF 
041cc     A0 65 06 A1 |  if_e	add	objptr, ##28064
041d0     32 BD 02 AB |  if_e	rdlong	local12, objptr
041d4     36 00 00 AF 
041d8     A0 65 86 A1 |  if_e	sub	objptr, ##28064
041dc     1B BC 0E A2 |  if_e	cmp	local12, #27 wz
041e0     A4 00 90 5D |  if_ne	jmp	#LR__0205
041e4     54 00 00 FF 
041e8     68 64 06 F1 | 	add	objptr, ##43112
041ec     32 93 02 FB | 	rdlong	arg01, objptr
041f0     1B 00 00 FF 
041f4     C4 64 86 F1 | 	sub	objptr, ##14020
041f8     32 97 02 FB | 	rdlong	arg03, objptr
041fc     38 00 00 FF 
04200     A4 65 86 F1 | 	sub	objptr, ##29092
04204     00 94 06 F6 | 	mov	arg02, #0
04208     20 45 B0 FD | 	call	#_compile_assign
0420c     3D A7 0A F6 | 	mov	local01, result1 wz
04210                 | '   err=compile_assign(linenum,0,cont)
04210                 | '   if err<>0 then printerror(err,linenum): goto 101
04210     20 00 90 AD |  if_e	jmp	#LR__0204
04214     54 00 00 FF 
04218     68 64 06 F1 | 	add	objptr, ##43112
0421c     32 95 02 FB | 	rdlong	arg02, objptr
04220     54 00 00 FF 
04224     68 64 86 F1 | 	sub	objptr, ##43112
04228     53 93 02 F6 | 	mov	arg01, local01
0422c     08 CE B1 FD | 	call	#_printerror
04230     64 01 90 FD | 	jmp	#LR__0210
04234                 | LR__0204
04234                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
04234     54 00 00 FF 
04238     AC 64 06 F1 | 	add	objptr, ##43180
0423c     32 93 02 FB | 	rdlong	arg01, objptr
04240     54 00 00 FF 
04244     AC 64 86 F1 | 	sub	objptr, ##43180
04248     94 01 00 FF 
0424c     75 95 06 F6 | 	mov	arg02, ##@LR__5585
04250     DC 0A B2 FD | 	call	#__system___string_cmp
04254     00 7A 0E F2 | 	cmp	result1, #0 wz
04258     1C 01 90 AD |  if_e	jmp	#LR__0209
0425c     54 00 00 FF 
04260     AC 64 06 F1 | 	add	objptr, ##43180
04264     32 AD 02 FB | 	rdlong	local04, objptr
04268     1B 00 00 FF 
0426c     10 65 86 F1 | 	sub	objptr, ##14096
04270     32 AD 62 FC | 	wrlong	local04, objptr
04274     08 64 06 F1 | 	add	objptr, #8
04278     32 09 68 FC | 	wrlong	#4, objptr
0427c     38 00 00 FF 
04280     A4 65 86 F1 | 	sub	objptr, ##29092
04284     2C D7 9F FD | 	jmp	#LR__0070
04288                 | LR__0205
04288                 | '     							 
04288                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 		' not a first part, assign
04288     38 00 00 FF 
0428c     A4 65 06 F1 | 	add	objptr, ##29092
04290     32 AD 02 FB | 	rdlong	local04, objptr
04294     38 00 00 FF 
04298     A4 65 86 F1 | 	sub	objptr, ##29092
0429c     01 AC 0E F2 | 	cmp	local04, #1 wz
042a0     38 00 00 5F 
042a4     A4 65 06 51 |  if_ne	add	objptr, ##29092
042a8     32 B9 02 5B |  if_ne	rdlong	local10, objptr
042ac     38 00 00 5F 
042b0     A4 65 86 51 |  if_ne	sub	objptr, ##29092
042b4     02 B8 0E 52 |  if_ne	cmp	local10, #2 wz
042b8     36 00 00 AF 
042bc     98 65 06 A1 |  if_e	add	objptr, ##28056
042c0     32 BD 02 AB |  if_e	rdlong	local12, objptr
042c4     36 00 00 AF 
042c8     98 65 86 A1 |  if_e	sub	objptr, ##28056
042cc     1B BC 0E A2 |  if_e	cmp	local12, #27 wz
042d0     A4 00 90 5D |  if_ne	jmp	#LR__0208
042d4     54 00 00 FF 
042d8     68 64 06 F1 | 	add	objptr, ##43112
042dc     32 93 02 FB | 	rdlong	arg01, objptr
042e0     1B 00 00 FF 
042e4     C4 64 86 F1 | 	sub	objptr, ##14020
042e8     32 97 02 FB | 	rdlong	arg03, objptr
042ec     38 00 00 FF 
042f0     A4 65 86 F1 | 	sub	objptr, ##29092
042f4     00 94 06 F6 | 	mov	arg02, #0
042f8     30 44 B0 FD | 	call	#_compile_assign
042fc     3D A7 0A F6 | 	mov	local01, result1 wz
04300                 | '   err=compile_assign(linenum,0,cont) 
04300                 | '   if err<>0 then printerror(err,linenum): goto 101
04300     20 00 90 AD |  if_e	jmp	#LR__0206
04304     54 00 00 FF 
04308     68 64 06 F1 | 	add	objptr, ##43112
0430c     32 95 02 FB | 	rdlong	arg02, objptr
04310     54 00 00 FF 
04314     68 64 86 F1 | 	sub	objptr, ##43112
04318     53 93 02 F6 | 	mov	arg01, local01
0431c     18 CD B1 FD | 	call	#_printerror
04320     74 00 90 FD | 	jmp	#LR__0210
04324                 | LR__0206
04324                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								 
04324     54 00 00 FF 
04328     AC 64 06 F1 | 	add	objptr, ##43180
0432c     32 93 02 FB | 	rdlong	arg01, objptr
04330     54 00 00 FF 
04334     AC 64 86 F1 | 	sub	objptr, ##43180
04338     94 01 00 FF 
0433c     76 95 06 F6 | 	mov	arg02, ##@LR__5586
04340     EC 09 B2 FD | 	call	#__system___string_cmp
04344     00 7A 4E F2 | 	cmps	result1, #0 wz
04348     2C 00 90 AD |  if_e	jmp	#LR__0207
0434c     54 00 00 FF 
04350     AC 64 06 F1 | 	add	objptr, ##43180
04354     32 AD 02 FB | 	rdlong	local04, objptr
04358     1B 00 00 FF 
0435c     10 65 86 F1 | 	sub	objptr, ##14096
04360     32 AD 62 FC | 	wrlong	local04, objptr
04364     08 64 06 F1 | 	add	objptr, #8
04368     32 09 68 FC | 	wrlong	#4, objptr
0436c     38 00 00 FF 
04370     A4 65 86 F1 | 	sub	objptr, ##29092
04374     3C D6 9F FD | 	jmp	#LR__0070
04378                 | LR__0207
04378                 | LR__0208
04378                 | LR__0209
04378                 | ' 
04378                 | ' 104 if linenum=0 then 								' line 0 is for immediate execution
04378     54 00 00 FF 
0437c     68 64 06 F1 | 	add	objptr, ##43112
04380     32 AD 0A FB | 	rdlong	local04, objptr wz
04384     54 00 00 FF 
04388     68 64 86 F1 | 	sub	objptr, ##43112
0438c     B0 00 90 5D |  if_ne	jmp	#LR__0213
04390     02 92 06 F6 | 	mov	arg01, #2
04394     D4 91 B0 FD | 	call	#_execute_line
04398                 | LR__0210
04398                 | '   execute_line(2)
04398                 | ' 101 if inload=0 then v.writeln("") : v.writeln("Ready") 
04398     54 00 00 FF 
0439c     8C 64 06 F1 | 	add	objptr, ##43148
043a0     32 AD 0A FB | 	rdlong	local04, objptr wz
043a4     54 00 00 FF 
043a8     8C 64 86 F1 | 	sub	objptr, ##43148
043ac     20 00 90 5D |  if_ne	jmp	#LR__0211
043b0     94 01 00 FF 
043b4     77 93 06 F6 | 	mov	arg01, ##@LR__5587
043b8                 | ' 
043b8                 | ' write(text)
043b8     DC ED B1 FD | 	call	#_hg010b_spin2_write
043bc                 | ' crlf
043bc     78 F2 B1 FD | 	call	#_hg010b_spin2_crlf
043c0     94 01 00 FF 
043c4     78 93 06 F6 | 	mov	arg01, ##@LR__5588
043c8                 | ' 
043c8                 | ' write(text)
043c8     CC ED B1 FD | 	call	#_hg010b_spin2_write
043cc                 | ' crlf
043cc     68 F2 B1 FD | 	call	#_hg010b_spin2_crlf
043d0                 | LR__0211
043d0                 | '     if inload=1 andalso err>0 then print fullline$
043d0     54 00 00 FF 
043d4     8C 64 06 F1 | 	add	objptr, ##43148
043d8     32 AD 02 FB | 	rdlong	local04, objptr
043dc     54 00 00 FF 
043e0     8C 64 86 F1 | 	sub	objptr, ##43148
043e4     01 AC 0E F2 | 	cmp	local04, #1 wz
043e8     54 00 90 5D |  if_ne	jmp	#LR__0212
043ec     01 A6 56 F2 | 	cmps	local01, #1 wc
043f0     4C 00 90 CD |  if_b	jmp	#LR__0212
043f4     00 92 06 F6 | 	mov	arg01, #0
043f8     90 5E B2 FD | 	call	#__system___getiolock_0622
043fc     3D 93 02 F6 | 	mov	arg01, result1
04400     04 09 B2 FD | 	call	#__system___lockmem
04404     38 00 00 FF 
04408     A0 65 06 F1 | 	add	objptr, ##29088
0440c     32 95 02 FB | 	rdlong	arg02, objptr
04410     38 00 00 FF 
04414     A0 65 86 F1 | 	sub	objptr, ##29088
04418     00 92 06 F6 | 	mov	arg01, #0
0441c     00 96 06 F6 | 	mov	arg03, #0
04420     D8 15 B2 FD | 	call	#__system___basic_print_string
04424     00 92 06 F6 | 	mov	arg01, #0
04428     0A 94 06 F6 | 	mov	arg02, #10
0442c     00 96 06 F6 | 	mov	arg03, #0
04430     70 15 B2 FD | 	call	#__system___basic_print_char
04434     00 92 06 F6 | 	mov	arg01, #0
04438     50 5E B2 FD | 	call	#__system___getiolock_0622
0443c     3D 01 68 FC | 	wrlong	#0, result1
04440                 | LR__0212
04440                 | LR__0213
04440     E7 F0 03 F6 | 	mov	ptra, fp
04444     F2 00 A0 FD | 	call	#popregs_
04448                 | _interpret_ret
04448     2D 00 64 FD | 	ret
0444c                 | 
0444c                 | ' 
0444c                 | ' '---------------------------------------------------------------------------------------------------------------------
0444c                 | ' '
0444c                 | ' '                          END OF TOKENIZER MAIN CODE
0444c                 | ' '
0444c                 | ' '---------------------------------------------------------------------------------------------------------------------
0444c                 | ' 
0444c                 | ' '---------------------------------------------------------------------------------------------------------------------
0444c                 | ' '-------------------- Helper functions for the tokenizer -------------------------------------------------------------
0444c                 | ' '---------------------------------------------------------------------------------------------------------------------
0444c                 | ' 
0444c                 | ' ' Check if the part is an operator, return a token or 0 if not found
0444c                 | ' 
0444c                 | ' function isoperator(s as string) as ubyte
0444c                 | _isoperator
0444c     01 CA 05 F6 | 	mov	COUNT_, #1
04450     E8 00 A0 FD | 	call	#pushregs_
04454                 | ' 
04454                 | ' select case s
04454     49 A7 02 F6 | 	mov	local01, arg01
04458     94 01 00 FF 
0445c     7E 95 06 F6 | 	mov	arg02, ##@LR__5589
04460     53 93 02 F6 | 	mov	arg01, local01
04464     C8 08 B2 FD | 	call	#__system___string_cmp
04468     00 7A 0E F2 | 	cmp	result1, #0 wz
0446c     FC 01 90 AD |  if_e	jmp	#LR__0220
04470     94 01 00 FF 
04474     80 95 06 F6 | 	mov	arg02, ##@LR__5590
04478     53 93 02 F6 | 	mov	arg01, local01
0447c     B0 08 B2 FD | 	call	#__system___string_cmp
04480     00 7A 0E F2 | 	cmp	result1, #0 wz
04484     EC 01 90 AD |  if_e	jmp	#LR__0221
04488     94 01 00 FF 
0448c     82 95 06 F6 | 	mov	arg02, ##@LR__5591
04490     53 93 02 F6 | 	mov	arg01, local01
04494     98 08 B2 FD | 	call	#__system___string_cmp
04498     00 7A 0E F2 | 	cmp	result1, #0 wz
0449c     DC 01 90 AD |  if_e	jmp	#LR__0222
044a0     94 01 00 FF 
044a4     85 95 06 F6 | 	mov	arg02, ##@LR__5592
044a8     53 93 02 F6 | 	mov	arg01, local01
044ac     80 08 B2 FD | 	call	#__system___string_cmp
044b0     00 7A 0E F2 | 	cmp	result1, #0 wz
044b4     CC 01 90 AD |  if_e	jmp	#LR__0223
044b8     94 01 00 FF 
044bc     89 95 06 F6 | 	mov	arg02, ##@LR__5593
044c0     53 93 02 F6 | 	mov	arg01, local01
044c4     68 08 B2 FD | 	call	#__system___string_cmp
044c8     00 7A 0E F2 | 	cmp	result1, #0 wz
044cc     BC 01 90 AD |  if_e	jmp	#LR__0224
044d0     94 01 00 FF 
044d4     8B 95 06 F6 | 	mov	arg02, ##@LR__5594
044d8     53 93 02 F6 | 	mov	arg01, local01
044dc     50 08 B2 FD | 	call	#__system___string_cmp
044e0     00 7A 0E F2 | 	cmp	result1, #0 wz
044e4     AC 01 90 AD |  if_e	jmp	#LR__0225
044e8     94 01 00 FF 
044ec     8D 95 06 F6 | 	mov	arg02, ##@LR__5595
044f0     53 93 02 F6 | 	mov	arg01, local01
044f4     38 08 B2 FD | 	call	#__system___string_cmp
044f8     00 7A 0E F2 | 	cmp	result1, #0 wz
044fc     9C 01 90 AD |  if_e	jmp	#LR__0226
04500     94 01 00 FF 
04504     91 95 06 F6 | 	mov	arg02, ##@LR__5596
04508     53 93 02 F6 | 	mov	arg01, local01
0450c     20 08 B2 FD | 	call	#__system___string_cmp
04510     00 7A 0E F2 | 	cmp	result1, #0 wz
04514     8C 01 90 AD |  if_e	jmp	#LR__0227
04518     94 01 00 FF 
0451c     95 95 06 F6 | 	mov	arg02, ##@LR__5597
04520     53 93 02 F6 | 	mov	arg01, local01
04524     08 08 B2 FD | 	call	#__system___string_cmp
04528     00 7A 0E F2 | 	cmp	result1, #0 wz
0452c     7C 01 90 AD |  if_e	jmp	#LR__0228
04530     94 01 00 FF 
04534     99 95 06 F6 | 	mov	arg02, ##@LR__5598
04538     53 93 02 F6 | 	mov	arg01, local01
0453c     F0 07 B2 FD | 	call	#__system___string_cmp
04540     00 7A 0E F2 | 	cmp	result1, #0 wz
04544     6C 01 90 AD |  if_e	jmp	#LR__0229
04548     94 01 00 FF 
0454c     9D 95 06 F6 | 	mov	arg02, ##@LR__5599
04550     53 93 02 F6 | 	mov	arg01, local01
04554     D8 07 B2 FD | 	call	#__system___string_cmp
04558     00 7A 0E F2 | 	cmp	result1, #0 wz
0455c     5C 01 90 AD |  if_e	jmp	#LR__0230
04560     94 01 00 FF 
04564     A1 95 06 F6 | 	mov	arg02, ##@LR__5600
04568     53 93 02 F6 | 	mov	arg01, local01
0456c     C0 07 B2 FD | 	call	#__system___string_cmp
04570     00 7A 0E F2 | 	cmp	result1, #0 wz
04574     4C 01 90 AD |  if_e	jmp	#LR__0231
04578     94 01 00 FF 
0457c     A3 95 06 F6 | 	mov	arg02, ##@LR__5601
04580     53 93 02 F6 | 	mov	arg01, local01
04584     A8 07 B2 FD | 	call	#__system___string_cmp
04588     00 7A 0E F2 | 	cmp	result1, #0 wz
0458c     3C 01 90 AD |  if_e	jmp	#LR__0232
04590     94 01 00 FF 
04594     A7 95 06 F6 | 	mov	arg02, ##@LR__5602
04598     53 93 02 F6 | 	mov	arg01, local01
0459c     90 07 B2 FD | 	call	#__system___string_cmp
045a0     00 7A 0E F2 | 	cmp	result1, #0 wz
045a4     2C 01 90 AD |  if_e	jmp	#LR__0233
045a8     94 01 00 FF 
045ac     A9 95 06 F6 | 	mov	arg02, ##@LR__5603
045b0     53 93 02 F6 | 	mov	arg01, local01
045b4     78 07 B2 FD | 	call	#__system___string_cmp
045b8     00 7A 0E F2 | 	cmp	result1, #0 wz
045bc     1C 01 90 AD |  if_e	jmp	#LR__0234
045c0     94 01 00 FF 
045c4     AB 95 06 F6 | 	mov	arg02, ##@LR__5604
045c8     53 93 02 F6 | 	mov	arg01, local01
045cc     60 07 B2 FD | 	call	#__system___string_cmp
045d0     00 7A 0E F2 | 	cmp	result1, #0 wz
045d4     0C 01 90 AD |  if_e	jmp	#LR__0235
045d8     94 01 00 FF 
045dc     AE 95 06 F6 | 	mov	arg02, ##@LR__5605
045e0     53 93 02 F6 | 	mov	arg01, local01
045e4     48 07 B2 FD | 	call	#__system___string_cmp
045e8     00 7A 0E F2 | 	cmp	result1, #0 wz
045ec     FC 00 90 AD |  if_e	jmp	#LR__0236
045f0     94 01 00 FF 
045f4     B1 95 06 F6 | 	mov	arg02, ##@LR__5606
045f8     53 93 02 F6 | 	mov	arg01, local01
045fc     30 07 B2 FD | 	call	#__system___string_cmp
04600     00 7A 0E F2 | 	cmp	result1, #0 wz
04604     EC 00 90 AD |  if_e	jmp	#LR__0237
04608     94 01 00 FF 
0460c     B3 95 06 F6 | 	mov	arg02, ##@LR__5607
04610     53 93 02 F6 | 	mov	arg01, local01
04614     18 07 B2 FD | 	call	#__system___string_cmp
04618     00 7A 0E F2 | 	cmp	result1, #0 wz
0461c     DC 00 90 AD |  if_e	jmp	#LR__0238
04620     94 01 00 FF 
04624     B5 95 06 F6 | 	mov	arg02, ##@LR__5608
04628     53 93 02 F6 | 	mov	arg01, local01
0462c     00 07 B2 FD | 	call	#__system___string_cmp
04630     00 7A 0E F2 | 	cmp	result1, #0 wz
04634     CC 00 90 AD |  if_e	jmp	#LR__0239
04638     94 01 00 FF 
0463c     B8 95 06 F6 | 	mov	arg02, ##@LR__5609
04640     53 93 02 F6 | 	mov	arg01, local01
04644     E8 06 B2 FD | 	call	#__system___string_cmp
04648     00 7A 0E F2 | 	cmp	result1, #0 wz
0464c     BC 00 90 AD |  if_e	jmp	#LR__0240
04650     94 01 00 FF 
04654     BB 95 06 F6 | 	mov	arg02, ##@LR__5610
04658     53 93 02 F6 | 	mov	arg01, local01
0465c     D0 06 B2 FD | 	call	#__system___string_cmp
04660     00 7A 0E F2 | 	cmp	result1, #0 wz
04664     AC 00 90 AD |  if_e	jmp	#LR__0241
04668     B0 00 90 FD | 	jmp	#LR__0242
0466c                 | LR__0220
0466c     01 7A 06 F6 | 	mov	result1, #1
04670     AC 00 90 FD | 	jmp	#LR__0243
04674                 | LR__0221
04674     02 7A 06 F6 | 	mov	result1, #2
04678     A4 00 90 FD | 	jmp	#LR__0243
0467c                 | LR__0222
0467c     03 7A 06 F6 | 	mov	result1, #3
04680     9C 00 90 FD | 	jmp	#LR__0243
04684                 | LR__0223
04684     04 7A 06 F6 | 	mov	result1, #4
04688     94 00 90 FD | 	jmp	#LR__0243
0468c                 | LR__0224
0468c     05 7A 06 F6 | 	mov	result1, #5
04690     8C 00 90 FD | 	jmp	#LR__0243
04694                 | LR__0225
04694     06 7A 06 F6 | 	mov	result1, #6
04698     84 00 90 FD | 	jmp	#LR__0243
0469c                 | LR__0226
0469c     07 7A 06 F6 | 	mov	result1, #7
046a0     7C 00 90 FD | 	jmp	#LR__0243
046a4                 | LR__0227
046a4     08 7A 06 F6 | 	mov	result1, #8
046a8     74 00 90 FD | 	jmp	#LR__0243
046ac                 | LR__0228
046ac     09 7A 06 F6 | 	mov	result1, #9
046b0     6C 00 90 FD | 	jmp	#LR__0243
046b4                 | LR__0229
046b4     0A 7A 06 F6 | 	mov	result1, #10
046b8     64 00 90 FD | 	jmp	#LR__0243
046bc                 | LR__0230
046bc     0B 7A 06 F6 | 	mov	result1, #11
046c0     5C 00 90 FD | 	jmp	#LR__0243
046c4                 | LR__0231
046c4     0C 7A 06 F6 | 	mov	result1, #12
046c8     54 00 90 FD | 	jmp	#LR__0243
046cc                 | LR__0232
046cc     0D 7A 06 F6 | 	mov	result1, #13
046d0     4C 00 90 FD | 	jmp	#LR__0243
046d4                 | LR__0233
046d4     0E 7A 06 F6 | 	mov	result1, #14
046d8     44 00 90 FD | 	jmp	#LR__0243
046dc                 | LR__0234
046dc     1B 7A 06 F6 | 	mov	result1, #27
046e0     3C 00 90 FD | 	jmp	#LR__0243
046e4                 | LR__0235
046e4     27 7A 06 F6 | 	mov	result1, #39
046e8     34 00 90 FD | 	jmp	#LR__0243
046ec                 | LR__0236
046ec     26 7A 06 F6 | 	mov	result1, #38
046f0     2C 00 90 FD | 	jmp	#LR__0243
046f4                 | LR__0237
046f4     10 7A 06 F6 | 	mov	result1, #16
046f8     24 00 90 FD | 	jmp	#LR__0243
046fc                 | LR__0238
046fc     0F 7A 06 F6 | 	mov	result1, #15
04700     1C 00 90 FD | 	jmp	#LR__0243
04704                 | LR__0239
04704     2A 7A 06 F6 | 	mov	result1, #42
04708     14 00 90 FD | 	jmp	#LR__0243
0470c                 | LR__0240
0470c     28 7A 06 F6 | 	mov	result1, #40
04710     0C 00 90 FD | 	jmp	#LR__0243
04714                 | LR__0241
04714     29 7A 06 F6 | 	mov	result1, #41
04718     04 00 90 FD | 	jmp	#LR__0243
0471c                 | LR__0242
0471c     00 7A 06 F6 | 	mov	result1, #0
04720                 | LR__0243
04720     E7 F0 03 F6 | 	mov	ptra, fp
04724     F2 00 A0 FD | 	call	#popregs_
04728                 | _isoperator_ret
04728     2D 00 64 FD | 	ret
0472c                 | 
0472c                 | ' 
0472c                 | ' ' Check if the part is a channel#, return a token or 0 if not found
0472c                 | ' 
0472c                 | ' function ischannel(s as string) as ulong
0472c                 | _ischannel
0472c     02 CA 05 F6 | 	mov	COUNT_, #2
04730     E8 00 A0 FD | 	call	#pushregs_
04734                 | ' if left$(s,1)<>"#" then return 0
04734     49 A7 02 F6 | 	mov	local01, arg01
04738     01 94 06 F6 | 	mov	arg02, #1
0473c     70 1E B2 FD | 	call	#__system__Left_S
04740     3D 93 02 F6 | 	mov	arg01, result1
04744     94 01 00 FF 
04748     BE 95 06 F6 | 	mov	arg02, ##@LR__5611
0474c     E0 05 B2 FD | 	call	#__system___string_cmp
04750     00 7A 0E F2 | 	cmp	result1, #0 wz
04754     00 7A 06 56 |  if_ne	mov	result1, #0
04758     AC 00 90 5D |  if_ne	jmp	#LR__0254
0475c                 | ' if len(s)<>2 then return 0
0475c     53 93 02 F6 | 	mov	arg01, local01
04760     49 A9 02 F6 | 	mov	local02, arg01
04764     D7 06 48 FB | 	callpa	#(@LR__0251-@LR__0250)>>2,fcache_load_ptr_
04768                 | LR__0250
04768     54 7B CA FA | 	rdbyte	result1, local02 wz
0476c     01 A8 06 51 |  if_ne	add	local02, #1
04770     F4 FF 9F 5D |  if_ne	jmp	#LR__0250
04774                 | LR__0251
04774     49 A9 82 F1 | 	sub	local02, arg01
04778     54 7B 02 F6 | 	mov	result1, local02
0477c     02 7A 0E F2 | 	cmp	result1, #2 wz
04780     00 7A 06 56 |  if_ne	mov	result1, #0
04784     80 00 90 5D |  if_ne	jmp	#LR__0254
04788                 | ' if right$(s,1)<"0" orelse right$(s,1)>"9" then return 0
04788     53 93 02 F6 | 	mov	arg01, local01
0478c     01 94 06 F6 | 	mov	arg02, #1
04790     A4 1E B2 FD | 	call	#__system__Right_S
04794     3D 93 02 F6 | 	mov	arg01, result1
04798     94 01 00 FF 
0479c     C0 95 06 F6 | 	mov	arg02, ##@LR__5612
047a0     8C 05 B2 FD | 	call	#__system___string_cmp
047a4     00 7A 56 F2 | 	cmps	result1, #0 wc
047a8     24 00 90 CD |  if_b	jmp	#LR__0252
047ac     53 93 02 F6 | 	mov	arg01, local01
047b0     01 94 06 F6 | 	mov	arg02, #1
047b4     80 1E B2 FD | 	call	#__system__Right_S
047b8     3D 93 02 F6 | 	mov	arg01, result1
047bc     94 01 00 FF 
047c0     C2 95 06 F6 | 	mov	arg02, ##@LR__5613
047c4     68 05 B2 FD | 	call	#__system___string_cmp
047c8     01 7A 56 F2 | 	cmps	result1, #1 wc
047cc     08 00 90 CD |  if_b	jmp	#LR__0253
047d0                 | LR__0252
047d0     00 7A 06 F6 | 	mov	result1, #0
047d4     30 00 90 FD | 	jmp	#LR__0254
047d8                 | LR__0253
047d8                 | ' return token_channel+val(right$(s,1))
047d8     53 93 02 F6 | 	mov	arg01, local01
047dc     01 94 06 F6 | 	mov	arg02, #1
047e0     54 1E B2 FD | 	call	#__system__Right_S
047e4     3D 93 02 F6 | 	mov	arg01, result1
047e8     08 34 B2 FD | 	call	#__system____builtin_atof
047ec     3D 95 02 F6 | 	mov	arg02, result1
047f0     00 18 21 FF 
047f4     00 92 06 F6 | 	mov	arg01, ##1110441984
047f8     0C 28 B2 FD | 	call	#__system___float_add
047fc     3D 93 02 F6 | 	mov	arg01, result1
04800     00 94 06 F6 | 	mov	arg02, #0
04804     98 30 B2 FD | 	call	#__system___float_tointeger
04808                 | LR__0254
04808     E7 F0 03 F6 | 	mov	ptra, fp
0480c     F2 00 A0 FD | 	call	#popregs_
04810                 | _ischannel_ret
04810     2D 00 64 FD | 	ret
04814                 | 
04814                 | ' 
04814                 | ' ' Check if the part is a predefined constant, return a constant or 0 if not found
04814                 | ' ' todo: add spin2/pasm constants for pin control
04814                 | ' 
04814                 | ' function isconstant(s as string) as integer
04814                 | _isconstant
04814     01 CA 05 F6 | 	mov	COUNT_, #1
04818     E8 00 A0 FD | 	call	#pushregs_
0481c                 | ' 
0481c                 | ' select case s
0481c     49 A7 02 F6 | 	mov	local01, arg01
04820     94 01 00 FF 
04824     C4 95 06 F6 | 	mov	arg02, ##@LR__5614
04828     53 93 02 F6 | 	mov	arg01, local01
0482c     00 05 B2 FD | 	call	#__system___string_cmp
04830     00 7A 0E F2 | 	cmp	result1, #0 wz
04834     34 00 90 AD |  if_e	jmp	#LR__0260
04838     94 01 00 FF 
0483c     CA 95 06 F6 | 	mov	arg02, ##@LR__5615
04840     53 93 02 F6 | 	mov	arg01, local01
04844     E8 04 B2 FD | 	call	#__system___string_cmp
04848     00 7A 0E F2 | 	cmp	result1, #0 wz
0484c     24 00 90 AD |  if_e	jmp	#LR__0261
04850     94 01 00 FF 
04854     D1 95 06 F6 | 	mov	arg02, ##@LR__5616
04858     53 93 02 F6 | 	mov	arg01, local01
0485c     D0 04 B2 FD | 	call	#__system___string_cmp
04860     00 7A 0E F2 | 	cmp	result1, #0 wz
04864     14 00 90 AD |  if_e	jmp	#LR__0262
04868     18 00 90 FD | 	jmp	#LR__0263
0486c                 | LR__0260
0486c     01 7A 06 F6 | 	mov	result1, #1
04870     14 00 90 FD | 	jmp	#LR__0264
04874                 | LR__0261
04874     02 7A 06 F6 | 	mov	result1, #2
04878     0C 00 90 FD | 	jmp	#LR__0264
0487c                 | LR__0262
0487c     04 7A 06 F6 | 	mov	result1, #4
04880     04 00 90 FD | 	jmp	#LR__0264
04884                 | LR__0263
04884     00 7A 06 F6 | 	mov	result1, #0
04888                 | LR__0264
04888     E7 F0 03 F6 | 	mov	ptra, fp
0488c     F2 00 A0 FD | 	call	#popregs_
04890                 | _isconstant_ret
04890     2D 00 64 FD | 	ret
04894                 | 
04894                 | ' 
04894                 | ' ' Check if the part is a predefined music note name, return a token or 0 if not found
04894                 | ' 
04894                 | ' function isnotename(s as string) as ulong
04894                 | _isnotename
04894     07 CA 05 F6 | 	mov	COUNT_, #7
04898     E8 00 A0 FD | 	call	#pushregs_
0489c                 | ' if left$(s,1)<>"#" then return 0
0489c     49 A7 02 F6 | 	mov	local01, arg01
048a0     01 94 06 F6 | 	mov	arg02, #1
048a4     08 1D B2 FD | 	call	#__system__Left_S
048a8     3D 93 02 F6 | 	mov	arg01, result1
048ac     94 01 00 FF 
048b0     D9 95 06 F6 | 	mov	arg02, ##@LR__5617
048b4     78 04 B2 FD | 	call	#__system___string_cmp
048b8     00 7A 0E F2 | 	cmp	result1, #0 wz
048bc     00 7A 06 56 |  if_ne	mov	result1, #0
048c0     30 03 90 5D |  if_ne	jmp	#LR__0293
048c4                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
048c4     53 93 02 F6 | 	mov	arg01, local01
048c8     03 94 06 F6 | 	mov	arg02, #3
048cc     01 96 06 F6 | 	mov	arg03, #1
048d0     F4 1D B2 FD | 	call	#__system__Mid_S
048d4     3D 93 02 F6 | 	mov	arg01, result1
048d8     94 01 00 FF 
048dc     DB 95 06 F6 | 	mov	arg02, ##@LR__5618
048e0     4C 04 B2 FD | 	call	#__system___string_cmp
048e4     00 7A 0E F2 | 	cmp	result1, #0 wz
048e8     18 00 90 5D |  if_ne	jmp	#LR__0270
048ec     53 93 02 F6 | 	mov	arg01, local01
048f0     02 94 06 F6 | 	mov	arg02, #2
048f4     02 96 06 F6 | 	mov	arg03, #2
048f8     CC 1D B2 FD | 	call	#__system__Mid_S
048fc     3D A9 02 F6 | 	mov	local02, result1
04900     14 00 90 FD | 	jmp	#LR__0271
04904                 | LR__0270
04904     53 93 02 F6 | 	mov	arg01, local01
04908     02 94 06 F6 | 	mov	arg02, #2
0490c     01 96 06 F6 | 	mov	arg03, #1
04910     B4 1D B2 FD | 	call	#__system__Mid_S
04914     3D A9 02 F6 | 	mov	local02, result1
04918                 | LR__0271
04918                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
04918     53 93 02 F6 | 	mov	arg01, local01
0491c     49 AB 02 F6 | 	mov	local03, arg01
04920     D7 06 48 FB | 	callpa	#(@LR__0273-@LR__0272)>>2,fcache_load_ptr_
04924                 | LR__0272
04924     55 7B CA FA | 	rdbyte	result1, local03 wz
04928     01 AA 06 51 |  if_ne	add	local03, #1
0492c     F4 FF 9F 5D |  if_ne	jmp	#LR__0272
04930                 | LR__0273
04930     49 AB 82 F1 | 	sub	local03, arg01
04934     55 95 02 F6 | 	mov	arg02, local03
04938     01 94 86 F1 | 	sub	arg02, #1
0493c     53 93 02 F6 | 	mov	arg01, local01
04940     01 96 06 F6 | 	mov	arg03, #1
04944     80 1D B2 FD | 	call	#__system__Mid_S
04948     3D 93 02 F6 | 	mov	arg01, result1
0494c     94 01 00 FF 
04950     DD 95 06 F6 | 	mov	arg02, ##@LR__5619
04954     D8 03 B2 FD | 	call	#__system___string_cmp
04958     00 7A 0E F2 | 	cmp	result1, #0 wz
0495c     28 00 90 AD |  if_e	jmp	#LR__0274
04960     53 93 02 F6 | 	mov	arg01, local01
04964     01 94 06 F6 | 	mov	arg02, #1
04968     CC 1C B2 FD | 	call	#__system__Right_S
0496c     3D 93 02 F6 | 	mov	arg01, result1
04970     80 32 B2 FD | 	call	#__system____builtin_atof
04974     3D 93 02 F6 | 	mov	arg01, result1
04978     00 94 06 F6 | 	mov	arg02, #0
0497c     20 2F B2 FD | 	call	#__system___float_tointeger
04980     3D AD 02 F6 | 	mov	local04, result1
04984     34 00 90 FD | 	jmp	#LR__0275
04988                 | LR__0274
04988     53 93 02 F6 | 	mov	arg01, local01
0498c     01 94 06 F6 | 	mov	arg02, #1
04990     A4 1C B2 FD | 	call	#__system__Right_S
04994     3D 93 02 F6 | 	mov	arg01, result1
04998     58 32 B2 FD | 	call	#__system____builtin_atof
0499c     3D 95 02 F6 | 	mov	arg02, result1
049a0     00 C0 5F FF 
049a4     00 92 06 F6 | 	mov	arg01, ##-1082130432
049a8     2C 2A B2 FD | 	call	#__system___float_mul
049ac     3D 93 02 F6 | 	mov	arg01, result1
049b0     00 94 06 F6 | 	mov	arg02, #0
049b4     E8 2E B2 FD | 	call	#__system___float_tointeger
049b8     3D AD 02 F6 | 	mov	local04, result1
049bc                 | LR__0275
049bc                 | ' 
049bc                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
049bc     00 AC 0E F2 | 	cmp	local04, #0 wz
049c0     24 00 90 5D |  if_ne	jmp	#LR__0276
049c4     53 93 02 F6 | 	mov	arg01, local01
049c8     01 94 06 F6 | 	mov	arg02, #1
049cc     68 1C B2 FD | 	call	#__system__Right_S
049d0     3D 93 02 F6 | 	mov	arg01, result1
049d4     94 01 00 FF 
049d8     DF 95 06 F6 | 	mov	arg02, ##@LR__5620
049dc     50 03 B2 FD | 	call	#__system___string_cmp
049e0     00 7A 0E F2 | 	cmp	result1, #0 wz
049e4     04 AC 06 56 |  if_ne	mov	local04, #4
049e8                 | LR__0276
049e8                 | ' 
049e8                 | ' select case s1
049e8     54 AF 02 F6 | 	mov	local05, local02
049ec     94 01 00 FF 
049f0     E1 95 06 F6 | 	mov	arg02, ##@LR__5621
049f4     57 93 02 F6 | 	mov	arg01, local05
049f8     34 03 B2 FD | 	call	#__system___string_cmp
049fc     00 7A 0E F2 | 	cmp	result1, #0 wz
04a00     24 01 90 AD |  if_e	jmp	#LR__0277
04a04     94 01 00 FF 
04a08     E3 95 06 F6 | 	mov	arg02, ##@LR__5622
04a0c     57 93 02 F6 | 	mov	arg01, local05
04a10     1C 03 B2 FD | 	call	#__system___string_cmp
04a14     00 7A 0E F2 | 	cmp	result1, #0 wz
04a18     18 01 90 AD |  if_e	jmp	#LR__0278
04a1c     94 01 00 FF 
04a20     E6 95 06 F6 | 	mov	arg02, ##@LR__5623
04a24     57 93 02 F6 | 	mov	arg01, local05
04a28     04 03 B2 FD | 	call	#__system___string_cmp
04a2c     00 7A 0E F2 | 	cmp	result1, #0 wz
04a30     0C 01 90 AD |  if_e	jmp	#LR__0279
04a34     94 01 00 FF 
04a38     E8 95 06 F6 | 	mov	arg02, ##@LR__5624
04a3c     57 93 02 F6 | 	mov	arg01, local05
04a40     EC 02 B2 FD | 	call	#__system___string_cmp
04a44     00 7A 0E F2 | 	cmp	result1, #0 wz
04a48     00 01 90 AD |  if_e	jmp	#LR__0280
04a4c     94 01 00 FF 
04a50     EB 95 06 F6 | 	mov	arg02, ##@LR__5625
04a54     57 93 02 F6 | 	mov	arg01, local05
04a58     D4 02 B2 FD | 	call	#__system___string_cmp
04a5c     00 7A 0E F2 | 	cmp	result1, #0 wz
04a60     F4 00 90 AD |  if_e	jmp	#LR__0281
04a64     94 01 00 FF 
04a68     ED 95 06 F6 | 	mov	arg02, ##@LR__5626
04a6c     57 93 02 F6 | 	mov	arg01, local05
04a70     BC 02 B2 FD | 	call	#__system___string_cmp
04a74     00 7A 0E F2 | 	cmp	result1, #0 wz
04a78     E8 00 90 AD |  if_e	jmp	#LR__0282
04a7c     94 01 00 FF 
04a80     EF 95 06 F6 | 	mov	arg02, ##@LR__5627
04a84     57 93 02 F6 | 	mov	arg01, local05
04a88     A4 02 B2 FD | 	call	#__system___string_cmp
04a8c     00 7A 0E F2 | 	cmp	result1, #0 wz
04a90     DC 00 90 AD |  if_e	jmp	#LR__0283
04a94     94 01 00 FF 
04a98     F2 95 06 F6 | 	mov	arg02, ##@LR__5628
04a9c     57 93 02 F6 | 	mov	arg01, local05
04aa0     8C 02 B2 FD | 	call	#__system___string_cmp
04aa4     00 7A 0E F2 | 	cmp	result1, #0 wz
04aa8     D0 00 90 AD |  if_e	jmp	#LR__0284
04aac     94 01 00 FF 
04ab0     F4 95 06 F6 | 	mov	arg02, ##@LR__5629
04ab4     57 93 02 F6 | 	mov	arg01, local05
04ab8     74 02 B2 FD | 	call	#__system___string_cmp
04abc     00 7A 0E F2 | 	cmp	result1, #0 wz
04ac0     C4 00 90 AD |  if_e	jmp	#LR__0285
04ac4     94 01 00 FF 
04ac8     F7 95 06 F6 | 	mov	arg02, ##@LR__5630
04acc     57 93 02 F6 | 	mov	arg01, local05
04ad0     5C 02 B2 FD | 	call	#__system___string_cmp
04ad4     00 7A 0E F2 | 	cmp	result1, #0 wz
04ad8     B8 00 90 AD |  if_e	jmp	#LR__0286
04adc     94 01 00 FF 
04ae0     F9 95 06 F6 | 	mov	arg02, ##@LR__5631
04ae4     57 93 02 F6 | 	mov	arg01, local05
04ae8     44 02 B2 FD | 	call	#__system___string_cmp
04aec     00 7A 0E F2 | 	cmp	result1, #0 wz
04af0     AC 00 90 AD |  if_e	jmp	#LR__0287
04af4     94 01 00 FF 
04af8     FC 95 06 F6 | 	mov	arg02, ##@LR__5632
04afc     57 93 02 F6 | 	mov	arg01, local05
04b00     2C 02 B2 FD | 	call	#__system___string_cmp
04b04     00 7A 0E F2 | 	cmp	result1, #0 wz
04b08     A0 00 90 AD |  if_e	jmp	#LR__0288
04b0c     94 01 00 FF 
04b10     FE 95 06 F6 | 	mov	arg02, ##@LR__5633
04b14     57 93 02 F6 | 	mov	arg01, local05
04b18     14 02 B2 FD | 	call	#__system___string_cmp
04b1c     00 7A 0E F2 | 	cmp	result1, #0 wz
04b20     94 00 90 AD |  if_e	jmp	#LR__0289
04b24     9C 00 90 FD | 	jmp	#LR__0290
04b28                 | LR__0277
04b28     01 00 00 FF 
04b2c     00 B1 06 F6 | 	mov	local06, ##768
04b30     98 00 90 FD | 	jmp	#LR__0291
04b34                 | LR__0278
04b34     01 00 00 FF 
04b38     01 B1 06 F6 | 	mov	local06, ##769
04b3c     8C 00 90 FD | 	jmp	#LR__0291
04b40                 | LR__0279
04b40     01 00 00 FF 
04b44     02 B1 06 F6 | 	mov	local06, ##770
04b48     80 00 90 FD | 	jmp	#LR__0291
04b4c                 | LR__0280
04b4c     01 00 00 FF 
04b50     03 B1 06 F6 | 	mov	local06, ##771
04b54     74 00 90 FD | 	jmp	#LR__0291
04b58                 | LR__0281
04b58     01 00 00 FF 
04b5c     04 B1 06 F6 | 	mov	local06, ##772
04b60     68 00 90 FD | 	jmp	#LR__0291
04b64                 | LR__0282
04b64     01 00 00 FF 
04b68     05 B1 06 F6 | 	mov	local06, ##773
04b6c     5C 00 90 FD | 	jmp	#LR__0291
04b70                 | LR__0283
04b70     01 00 00 FF 
04b74     06 B1 06 F6 | 	mov	local06, ##774
04b78     50 00 90 FD | 	jmp	#LR__0291
04b7c                 | LR__0284
04b7c     01 00 00 FF 
04b80     07 B1 06 F6 | 	mov	local06, ##775
04b84     44 00 90 FD | 	jmp	#LR__0291
04b88                 | LR__0285
04b88     01 00 00 FF 
04b8c     08 B1 06 F6 | 	mov	local06, ##776
04b90     38 00 90 FD | 	jmp	#LR__0291
04b94                 | LR__0286
04b94     01 00 00 FF 
04b98     09 B1 06 F6 | 	mov	local06, ##777
04b9c     2C 00 90 FD | 	jmp	#LR__0291
04ba0                 | LR__0287
04ba0     01 00 00 FF 
04ba4     0A B1 06 F6 | 	mov	local06, ##778
04ba8     20 00 90 FD | 	jmp	#LR__0291
04bac                 | LR__0288
04bac     01 00 00 FF 
04bb0     0B B1 06 F6 | 	mov	local06, ##779
04bb4     14 00 90 FD | 	jmp	#LR__0291
04bb8                 | LR__0289
04bb8     01 00 00 FF 
04bbc     0B B1 06 F6 | 	mov	local06, ##779
04bc0     08 00 90 FD | 	jmp	#LR__0291
04bc4                 | LR__0290
04bc4     00 7A 06 F6 | 	mov	result1, #0
04bc8     28 00 90 FD | 	jmp	#LR__0293
04bcc                 | LR__0291
04bcc                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
04bcc     FF FF 7F FF 
04bd0     FF AD 56 F2 | 	cmps	local04, ##-1 wc
04bd4     18 00 90 CD |  if_b	jmp	#LR__0292
04bd8     0A AC 56 F2 | 	cmps	local04, #10 wc
04bdc     56 B3 02 C6 |  if_b	mov	local07, local04
04be0     01 B2 66 C0 |  if_b	shl	local07, #1
04be4     56 B3 02 C1 |  if_b	add	local07, local04
04be8     02 B2 66 C0 |  if_b	shl	local07, #2
04bec     59 B1 02 C1 |  if_b	add	local06, local07
04bf0                 | LR__0292
04bf0                 | ' return token
04bf0     58 7B 02 F6 | 	mov	result1, local06
04bf4                 | LR__0293
04bf4     E7 F0 03 F6 | 	mov	ptra, fp
04bf8     F2 00 A0 FD | 	call	#popregs_
04bfc                 | _isnotename_ret
04bfc     2D 00 64 FD | 	ret
04c00                 | 
04c00                 | ' 
04c00                 | ' ' Check if the part is a separator, return a token or 0 if not found
04c00                 | ' 
04c00                 | ' function isseparator(s as string) as ubyte
04c00                 | _isseparator
04c00     01 CA 05 F6 | 	mov	COUNT_, #1
04c04     E8 00 A0 FD | 	call	#pushregs_
04c08                 | ' 
04c08                 | ' select case s
04c08     49 A7 02 F6 | 	mov	local01, arg01
04c0c     95 01 00 FF 
04c10     00 94 06 F6 | 	mov	arg02, ##@LR__5634
04c14     53 93 02 F6 | 	mov	arg01, local01
04c18     14 01 B2 FD | 	call	#__system___string_cmp
04c1c     00 7A 0E F2 | 	cmp	result1, #0 wz
04c20     54 01 90 AD |  if_e	jmp	#LR__0300
04c24     95 01 00 FF 
04c28     02 94 06 F6 | 	mov	arg02, ##@LR__5635
04c2c     53 93 02 F6 | 	mov	arg01, local01
04c30     FC 00 B2 FD | 	call	#__system___string_cmp
04c34     00 7A 0E F2 | 	cmp	result1, #0 wz
04c38     44 01 90 AD |  if_e	jmp	#LR__0301
04c3c     95 01 00 FF 
04c40     04 94 06 F6 | 	mov	arg02, ##@LR__5636
04c44     53 93 02 F6 | 	mov	arg01, local01
04c48     E4 00 B2 FD | 	call	#__system___string_cmp
04c4c     00 7A 0E F2 | 	cmp	result1, #0 wz
04c50     34 01 90 AD |  if_e	jmp	#LR__0302
04c54     95 01 00 FF 
04c58     06 94 06 F6 | 	mov	arg02, ##@LR__5637
04c5c     53 93 02 F6 | 	mov	arg01, local01
04c60     CC 00 B2 FD | 	call	#__system___string_cmp
04c64     00 7A 0E F2 | 	cmp	result1, #0 wz
04c68     24 01 90 AD |  if_e	jmp	#LR__0303
04c6c     95 01 00 FF 
04c70     08 94 06 F6 | 	mov	arg02, ##@LR__5638
04c74     53 93 02 F6 | 	mov	arg01, local01
04c78     B4 00 B2 FD | 	call	#__system___string_cmp
04c7c     00 7A 0E F2 | 	cmp	result1, #0 wz
04c80     14 01 90 AD |  if_e	jmp	#LR__0304
04c84     95 01 00 FF 
04c88     0A 94 06 F6 | 	mov	arg02, ##@LR__5639
04c8c     53 93 02 F6 | 	mov	arg01, local01
04c90     9C 00 B2 FD | 	call	#__system___string_cmp
04c94     00 7A 0E F2 | 	cmp	result1, #0 wz
04c98     04 01 90 AD |  if_e	jmp	#LR__0305
04c9c     95 01 00 FF 
04ca0     0C 94 06 F6 | 	mov	arg02, ##@LR__5640
04ca4     53 93 02 F6 | 	mov	arg01, local01
04ca8     84 00 B2 FD | 	call	#__system___string_cmp
04cac     00 7A 0E F2 | 	cmp	result1, #0 wz
04cb0     F4 00 90 AD |  if_e	jmp	#LR__0306
04cb4     95 01 00 FF 
04cb8     0E 94 06 F6 | 	mov	arg02, ##@LR__5641
04cbc     53 93 02 F6 | 	mov	arg01, local01
04cc0     6C 00 B2 FD | 	call	#__system___string_cmp
04cc4     00 7A 0E F2 | 	cmp	result1, #0 wz
04cc8     E4 00 90 AD |  if_e	jmp	#LR__0307
04ccc     95 01 00 FF 
04cd0     10 94 06 F6 | 	mov	arg02, ##@LR__5642
04cd4     53 93 02 F6 | 	mov	arg01, local01
04cd8     54 00 B2 FD | 	call	#__system___string_cmp
04cdc     00 7A 0E F2 | 	cmp	result1, #0 wz
04ce0     D4 00 90 AD |  if_e	jmp	#LR__0308
04ce4     95 01 00 FF 
04ce8     12 94 06 F6 | 	mov	arg02, ##@LR__5643
04cec     53 93 02 F6 | 	mov	arg01, local01
04cf0     3C 00 B2 FD | 	call	#__system___string_cmp
04cf4     00 7A 0E F2 | 	cmp	result1, #0 wz
04cf8     C4 00 90 AD |  if_e	jmp	#LR__0309
04cfc     95 01 00 FF 
04d00     14 94 06 F6 | 	mov	arg02, ##@LR__5644
04d04     53 93 02 F6 | 	mov	arg01, local01
04d08     24 00 B2 FD | 	call	#__system___string_cmp
04d0c     00 7A 0E F2 | 	cmp	result1, #0 wz
04d10     B4 00 90 AD |  if_e	jmp	#LR__0310
04d14     95 01 00 FF 
04d18     16 94 06 F6 | 	mov	arg02, ##@LR__5645
04d1c     53 93 02 F6 | 	mov	arg01, local01
04d20     0C 00 B2 FD | 	call	#__system___string_cmp
04d24     00 7A 0E F2 | 	cmp	result1, #0 wz
04d28     A4 00 90 AD |  if_e	jmp	#LR__0311
04d2c     95 01 00 FF 
04d30     18 94 06 F6 | 	mov	arg02, ##@LR__5646
04d34     53 93 02 F6 | 	mov	arg01, local01
04d38     F4 FF B1 FD | 	call	#__system___string_cmp
04d3c     00 7A 0E F2 | 	cmp	result1, #0 wz
04d40     94 00 90 AD |  if_e	jmp	#LR__0312
04d44     95 01 00 FF 
04d48     1A 94 06 F6 | 	mov	arg02, ##@LR__5647
04d4c     53 93 02 F6 | 	mov	arg01, local01
04d50     DC FF B1 FD | 	call	#__system___string_cmp
04d54     00 7A 0E F2 | 	cmp	result1, #0 wz
04d58     84 00 90 AD |  if_e	jmp	#LR__0313
04d5c     95 01 00 FF 
04d60     1C 94 06 F6 | 	mov	arg02, ##@LR__5648
04d64     53 93 02 F6 | 	mov	arg01, local01
04d68     C4 FF B1 FD | 	call	#__system___string_cmp
04d6c     00 7A 0E F2 | 	cmp	result1, #0 wz
04d70     74 00 90 AD |  if_e	jmp	#LR__0314
04d74     78 00 90 FD | 	jmp	#LR__0315
04d78                 | LR__0300
04d78     01 7A 06 F6 | 	mov	result1, #1
04d7c     74 00 90 FD | 	jmp	#LR__0316
04d80                 | LR__0301
04d80     02 7A 06 F6 | 	mov	result1, #2
04d84     6C 00 90 FD | 	jmp	#LR__0316
04d88                 | LR__0302
04d88     1B 7A 06 F6 | 	mov	result1, #27
04d8c     64 00 90 FD | 	jmp	#LR__0316
04d90                 | LR__0303
04d90     11 7A 06 F6 | 	mov	result1, #17
04d94     5C 00 90 FD | 	jmp	#LR__0316
04d98                 | LR__0304
04d98     05 7A 06 F6 | 	mov	result1, #5
04d9c     54 00 90 FD | 	jmp	#LR__0316
04da0                 | LR__0305
04da0     06 7A 06 F6 | 	mov	result1, #6
04da4     4C 00 90 FD | 	jmp	#LR__0316
04da8                 | LR__0306
04da8     12 7A 06 F6 | 	mov	result1, #18
04dac     44 00 90 FD | 	jmp	#LR__0316
04db0                 | LR__0307
04db0     13 7A 06 F6 | 	mov	result1, #19
04db4     3C 00 90 FD | 	jmp	#LR__0316
04db8                 | LR__0308
04db8     0C 7A 06 F6 | 	mov	result1, #12
04dbc     34 00 90 FD | 	jmp	#LR__0316
04dc0                 | LR__0309
04dc0     14 7A 06 F6 | 	mov	result1, #20
04dc4     2C 00 90 FD | 	jmp	#LR__0316
04dc8                 | LR__0310
04dc8     15 7A 06 F6 | 	mov	result1, #21
04dcc     24 00 90 FD | 	jmp	#LR__0316
04dd0                 | LR__0311
04dd0     16 7A 06 F6 | 	mov	result1, #22
04dd4     1C 00 90 FD | 	jmp	#LR__0316
04dd8                 | LR__0312
04dd8     FF 7B 06 F6 | 	mov	result1, #511
04ddc     14 00 90 FD | 	jmp	#LR__0316
04de0                 | LR__0313
04de0     0F 7A 06 F6 | 	mov	result1, #15
04de4     0C 00 90 FD | 	jmp	#LR__0316
04de8                 | LR__0314
04de8     10 7A 06 F6 | 	mov	result1, #16
04dec     04 00 90 FD | 	jmp	#LR__0316
04df0                 | LR__0315
04df0     00 7A 06 F6 | 	mov	result1, #0
04df4                 | LR__0316
04df4     E7 F0 03 F6 | 	mov	ptra, fp
04df8     F2 00 A0 FD | 	call	#popregs_
04dfc                 | _isseparator_ret
04dfc     2D 00 64 FD | 	ret
04e00                 | 
04e00                 | ' 
04e00                 | ' ' Check if the part is a command than doesn't return a value, return a token or 0 if not found
04e00                 | ' 
04e00                 | ' function iscommand(s as string) as ubyte
04e00                 | _iscommand
04e00     01 CA 05 F6 | 	mov	COUNT_, #1
04e04     E8 00 A0 FD | 	call	#pushregs_
04e08                 | ' 
04e08                 | ' select case s
04e08     49 A7 02 F6 | 	mov	local01, arg01
04e0c     95 01 00 FF 
04e10     20 94 06 F6 | 	mov	arg02, ##@LR__5650
04e14     53 93 02 F6 | 	mov	arg01, local01
04e18     14 FF B1 FD | 	call	#__system___string_cmp
04e1c     00 7A 0E F2 | 	cmp	result1, #0 wz
04e20     24 0D 90 AD |  if_e	jmp	#LR__0320
04e24     95 01 00 FF 
04e28     25 94 06 F6 | 	mov	arg02, ##@LR__5651
04e2c     53 93 02 F6 | 	mov	arg01, local01
04e30     FC FE B1 FD | 	call	#__system___string_cmp
04e34     00 7A 0E F2 | 	cmp	result1, #0 wz
04e38     14 0D 90 AD |  if_e	jmp	#LR__0321
04e3c     95 01 00 FF 
04e40     28 94 06 F6 | 	mov	arg02, ##@LR__5652
04e44     53 93 02 F6 | 	mov	arg01, local01
04e48     E4 FE B1 FD | 	call	#__system___string_cmp
04e4c     00 7A 0E F2 | 	cmp	result1, #0 wz
04e50     04 0D 90 AD |  if_e	jmp	#LR__0322
04e54     95 01 00 FF 
04e58     2D 94 06 F6 | 	mov	arg02, ##@LR__5653
04e5c     53 93 02 F6 | 	mov	arg01, local01
04e60     CC FE B1 FD | 	call	#__system___string_cmp
04e64     00 7A 0E F2 | 	cmp	result1, #0 wz
04e68     F4 0C 90 AD |  if_e	jmp	#LR__0323
04e6c     95 01 00 FF 
04e70     31 94 06 F6 | 	mov	arg02, ##@LR__5654
04e74     53 93 02 F6 | 	mov	arg01, local01
04e78     B4 FE B1 FD | 	call	#__system___string_cmp
04e7c     00 7A 0E F2 | 	cmp	result1, #0 wz
04e80     E4 0C 90 AD |  if_e	jmp	#LR__0324
04e84     95 01 00 FF 
04e88     36 94 06 F6 | 	mov	arg02, ##@LR__5655
04e8c     53 93 02 F6 | 	mov	arg01, local01
04e90     9C FE B1 FD | 	call	#__system___string_cmp
04e94     00 7A 0E F2 | 	cmp	result1, #0 wz
04e98     D4 0C 90 AD |  if_e	jmp	#LR__0325
04e9c     95 01 00 FF 
04ea0     3A 94 06 F6 | 	mov	arg02, ##@LR__5656
04ea4     53 93 02 F6 | 	mov	arg01, local01
04ea8     84 FE B1 FD | 	call	#__system___string_cmp
04eac     00 7A 0E F2 | 	cmp	result1, #0 wz
04eb0     C4 0C 90 AD |  if_e	jmp	#LR__0326
04eb4     95 01 00 FF 
04eb8     3D 94 06 F6 | 	mov	arg02, ##@LR__5657
04ebc     53 93 02 F6 | 	mov	arg01, local01
04ec0     6C FE B1 FD | 	call	#__system___string_cmp
04ec4     00 7A 0E F2 | 	cmp	result1, #0 wz
04ec8     B4 0C 90 AD |  if_e	jmp	#LR__0327
04ecc     95 01 00 FF 
04ed0     48 94 06 F6 | 	mov	arg02, ##@LR__5658
04ed4     53 93 02 F6 | 	mov	arg01, local01
04ed8     54 FE B1 FD | 	call	#__system___string_cmp
04edc     00 7A 0E F2 | 	cmp	result1, #0 wz
04ee0     A4 0C 90 AD |  if_e	jmp	#LR__0328
04ee4     95 01 00 FF 
04ee8     4C 94 06 F6 | 	mov	arg02, ##@LR__5659
04eec     53 93 02 F6 | 	mov	arg01, local01
04ef0     3C FE B1 FD | 	call	#__system___string_cmp
04ef4     00 7A 0E F2 | 	cmp	result1, #0 wz
04ef8     94 0C 90 AD |  if_e	jmp	#LR__0329
04efc     95 01 00 FF 
04f00     56 94 06 F6 | 	mov	arg02, ##@LR__5660
04f04     53 93 02 F6 | 	mov	arg01, local01
04f08     24 FE B1 FD | 	call	#__system___string_cmp
04f0c     00 7A 0E F2 | 	cmp	result1, #0 wz
04f10     84 0C 90 AD |  if_e	jmp	#LR__0330
04f14     95 01 00 FF 
04f18     5A 94 06 F6 | 	mov	arg02, ##@LR__5661
04f1c     53 93 02 F6 | 	mov	arg01, local01
04f20     0C FE B1 FD | 	call	#__system___string_cmp
04f24     00 7A 0E F2 | 	cmp	result1, #0 wz
04f28     74 0C 90 AD |  if_e	jmp	#LR__0331
04f2c     95 01 00 FF 
04f30     64 94 06 F6 | 	mov	arg02, ##@LR__5662
04f34     53 93 02 F6 | 	mov	arg01, local01
04f38     F4 FD B1 FD | 	call	#__system___string_cmp
04f3c     00 7A 0E F2 | 	cmp	result1, #0 wz
04f40     64 0C 90 AD |  if_e	jmp	#LR__0332
04f44     95 01 00 FF 
04f48     68 94 06 F6 | 	mov	arg02, ##@LR__5663
04f4c     53 93 02 F6 | 	mov	arg01, local01
04f50     DC FD B1 FD | 	call	#__system___string_cmp
04f54     00 7A 0E F2 | 	cmp	result1, #0 wz
04f58     54 0C 90 AD |  if_e	jmp	#LR__0333
04f5c     95 01 00 FF 
04f60     73 94 06 F6 | 	mov	arg02, ##@LR__5664
04f64     53 93 02 F6 | 	mov	arg01, local01
04f68     C4 FD B1 FD | 	call	#__system___string_cmp
04f6c     00 7A 0E F2 | 	cmp	result1, #0 wz
04f70     44 0C 90 AD |  if_e	jmp	#LR__0334
04f74     95 01 00 FF 
04f78     77 94 06 F6 | 	mov	arg02, ##@LR__5665
04f7c     53 93 02 F6 | 	mov	arg01, local01
04f80     AC FD B1 FD | 	call	#__system___string_cmp
04f84     00 7A 0E F2 | 	cmp	result1, #0 wz
04f88     34 0C 90 AD |  if_e	jmp	#LR__0335
04f8c     95 01 00 FF 
04f90     7E 94 06 F6 | 	mov	arg02, ##@LR__5666
04f94     53 93 02 F6 | 	mov	arg01, local01
04f98     94 FD B1 FD | 	call	#__system___string_cmp
04f9c     00 7A 0E F2 | 	cmp	result1, #0 wz
04fa0     24 0C 90 AD |  if_e	jmp	#LR__0336
04fa4     95 01 00 FF 
04fa8     82 94 06 F6 | 	mov	arg02, ##@LR__5667
04fac     53 93 02 F6 | 	mov	arg01, local01
04fb0     7C FD B1 FD | 	call	#__system___string_cmp
04fb4     00 7A 0E F2 | 	cmp	result1, #0 wz
04fb8     14 0C 90 AD |  if_e	jmp	#LR__0337
04fbc     95 01 00 FF 
04fc0     88 94 06 F6 | 	mov	arg02, ##@LR__5668
04fc4     53 93 02 F6 | 	mov	arg01, local01
04fc8     64 FD B1 FD | 	call	#__system___string_cmp
04fcc     00 7A 0E F2 | 	cmp	result1, #0 wz
04fd0     04 0C 90 AD |  if_e	jmp	#LR__0338
04fd4     95 01 00 FF 
04fd8     8E 94 06 F6 | 	mov	arg02, ##@LR__5669
04fdc     53 93 02 F6 | 	mov	arg01, local01
04fe0     4C FD B1 FD | 	call	#__system___string_cmp
04fe4     00 7A 0E F2 | 	cmp	result1, #0 wz
04fe8     F4 0B 90 AD |  if_e	jmp	#LR__0339
04fec     95 01 00 FF 
04ff0     92 94 06 F6 | 	mov	arg02, ##@LR__5670
04ff4     53 93 02 F6 | 	mov	arg01, local01
04ff8     34 FD B1 FD | 	call	#__system___string_cmp
04ffc     00 7A 0E F2 | 	cmp	result1, #0 wz
05000     E4 0B 90 AD |  if_e	jmp	#LR__0340
05004     95 01 00 FF 
05008     9A 94 06 F6 | 	mov	arg02, ##@LR__5671
0500c     53 93 02 F6 | 	mov	arg01, local01
05010     1C FD B1 FD | 	call	#__system___string_cmp
05014     00 7A 0E F2 | 	cmp	result1, #0 wz
05018     D4 0B 90 AD |  if_e	jmp	#LR__0341
0501c     95 01 00 FF 
05020     A0 94 06 F6 | 	mov	arg02, ##@LR__5672
05024     53 93 02 F6 | 	mov	arg01, local01
05028     04 FD B1 FD | 	call	#__system___string_cmp
0502c     00 7A 0E F2 | 	cmp	result1, #0 wz
05030     C4 0B 90 AD |  if_e	jmp	#LR__0342
05034     95 01 00 FF 
05038     A3 94 06 F6 | 	mov	arg02, ##@LR__5673
0503c     53 93 02 F6 | 	mov	arg01, local01
05040     EC FC B1 FD | 	call	#__system___string_cmp
05044     00 7A 0E F2 | 	cmp	result1, #0 wz
05048     B4 0B 90 AD |  if_e	jmp	#LR__0343
0504c     95 01 00 FF 
05050     A8 94 06 F6 | 	mov	arg02, ##@LR__5674
05054     53 93 02 F6 | 	mov	arg01, local01
05058     D4 FC B1 FD | 	call	#__system___string_cmp
0505c     00 7A 0E F2 | 	cmp	result1, #0 wz
05060     A4 0B 90 AD |  if_e	jmp	#LR__0344
05064     95 01 00 FF 
05068     AF 94 06 F6 | 	mov	arg02, ##@LR__5675
0506c     53 93 02 F6 | 	mov	arg01, local01
05070     BC FC B1 FD | 	call	#__system___string_cmp
05074     00 7A 0E F2 | 	cmp	result1, #0 wz
05078     94 0B 90 AD |  if_e	jmp	#LR__0345
0507c     95 01 00 FF 
05080     B4 94 06 F6 | 	mov	arg02, ##@LR__5676
05084     53 93 02 F6 | 	mov	arg01, local01
05088     A4 FC B1 FD | 	call	#__system___string_cmp
0508c     00 7A 0E F2 | 	cmp	result1, #0 wz
05090     84 0B 90 AD |  if_e	jmp	#LR__0346
05094     95 01 00 FF 
05098     BC 94 06 F6 | 	mov	arg02, ##@LR__5677
0509c     53 93 02 F6 | 	mov	arg01, local01
050a0     8C FC B1 FD | 	call	#__system___string_cmp
050a4     00 7A 0E F2 | 	cmp	result1, #0 wz
050a8     74 0B 90 AD |  if_e	jmp	#LR__0347
050ac     95 01 00 FF 
050b0     C3 94 06 F6 | 	mov	arg02, ##@LR__5678
050b4     53 93 02 F6 | 	mov	arg01, local01
050b8     74 FC B1 FD | 	call	#__system___string_cmp
050bc     00 7A 0E F2 | 	cmp	result1, #0 wz
050c0     64 0B 90 AD |  if_e	jmp	#LR__0348
050c4     95 01 00 FF 
050c8     CA 94 06 F6 | 	mov	arg02, ##@LR__5679
050cc     53 93 02 F6 | 	mov	arg01, local01
050d0     5C FC B1 FD | 	call	#__system___string_cmp
050d4     00 7A 0E F2 | 	cmp	result1, #0 wz
050d8     54 0B 90 AD |  if_e	jmp	#LR__0349
050dc     95 01 00 FF 
050e0     D4 94 06 F6 | 	mov	arg02, ##@LR__5680
050e4     53 93 02 F6 | 	mov	arg01, local01
050e8     44 FC B1 FD | 	call	#__system___string_cmp
050ec     00 7A 0E F2 | 	cmp	result1, #0 wz
050f0     44 0B 90 AD |  if_e	jmp	#LR__0350
050f4     95 01 00 FF 
050f8     D8 94 06 F6 | 	mov	arg02, ##@LR__5681
050fc     53 93 02 F6 | 	mov	arg01, local01
05100     2C FC B1 FD | 	call	#__system___string_cmp
05104     00 7A 0E F2 | 	cmp	result1, #0 wz
05108     34 0B 90 AD |  if_e	jmp	#LR__0351
0510c     95 01 00 FF 
05110     DC 94 06 F6 | 	mov	arg02, ##@LR__5682
05114     53 93 02 F6 | 	mov	arg01, local01
05118     14 FC B1 FD | 	call	#__system___string_cmp
0511c     00 7A 0E F2 | 	cmp	result1, #0 wz
05120     24 0B 90 AD |  if_e	jmp	#LR__0352
05124     95 01 00 FF 
05128     E3 94 06 F6 | 	mov	arg02, ##@LR__5683
0512c     53 93 02 F6 | 	mov	arg01, local01
05130     FC FB B1 FD | 	call	#__system___string_cmp
05134     00 7A 0E F2 | 	cmp	result1, #0 wz
05138     14 0B 90 AD |  if_e	jmp	#LR__0353
0513c     95 01 00 FF 
05140     E7 94 06 F6 | 	mov	arg02, ##@LR__5684
05144     53 93 02 F6 | 	mov	arg01, local01
05148     E4 FB B1 FD | 	call	#__system___string_cmp
0514c     00 7A 0E F2 | 	cmp	result1, #0 wz
05150     04 0B 90 AD |  if_e	jmp	#LR__0354
05154     95 01 00 FF 
05158     EB 94 06 F6 | 	mov	arg02, ##@LR__5685
0515c     53 93 02 F6 | 	mov	arg01, local01
05160     CC FB B1 FD | 	call	#__system___string_cmp
05164     00 7A 0E F2 | 	cmp	result1, #0 wz
05168     F4 0A 90 AD |  if_e	jmp	#LR__0355
0516c     95 01 00 FF 
05170     F1 94 06 F6 | 	mov	arg02, ##@LR__5686
05174     53 93 02 F6 | 	mov	arg01, local01
05178     B4 FB B1 FD | 	call	#__system___string_cmp
0517c     00 7A 0E F2 | 	cmp	result1, #0 wz
05180     E4 0A 90 AD |  if_e	jmp	#LR__0356
05184     95 01 00 FF 
05188     F6 94 06 F6 | 	mov	arg02, ##@LR__5687
0518c     53 93 02 F6 | 	mov	arg01, local01
05190     9C FB B1 FD | 	call	#__system___string_cmp
05194     00 7A 0E F2 | 	cmp	result1, #0 wz
05198     D4 0A 90 AD |  if_e	jmp	#LR__0357
0519c     95 01 00 FF 
051a0     FD 94 06 F6 | 	mov	arg02, ##@LR__5688
051a4     53 93 02 F6 | 	mov	arg01, local01
051a8     84 FB B1 FD | 	call	#__system___string_cmp
051ac     00 7A 0E F2 | 	cmp	result1, #0 wz
051b0     C4 0A 90 AD |  if_e	jmp	#LR__0358
051b4     95 01 00 FF 
051b8     01 95 06 F6 | 	mov	arg02, ##@LR__5689
051bc     53 93 02 F6 | 	mov	arg01, local01
051c0     6C FB B1 FD | 	call	#__system___string_cmp
051c4     00 7A 0E F2 | 	cmp	result1, #0 wz
051c8     B4 0A 90 AD |  if_e	jmp	#LR__0359
051cc     95 01 00 FF 
051d0     06 95 06 F6 | 	mov	arg02, ##@LR__5690
051d4     53 93 02 F6 | 	mov	arg01, local01
051d8     54 FB B1 FD | 	call	#__system___string_cmp
051dc     00 7A 0E F2 | 	cmp	result1, #0 wz
051e0     A4 0A 90 AD |  if_e	jmp	#LR__0360
051e4     95 01 00 FF 
051e8     0A 95 06 F6 | 	mov	arg02, ##@LR__5691
051ec     53 93 02 F6 | 	mov	arg01, local01
051f0     3C FB B1 FD | 	call	#__system___string_cmp
051f4     00 7A 0E F2 | 	cmp	result1, #0 wz
051f8     94 0A 90 AD |  if_e	jmp	#LR__0361
051fc     95 01 00 FF 
05200     10 95 06 F6 | 	mov	arg02, ##@LR__5692
05204     53 93 02 F6 | 	mov	arg01, local01
05208     24 FB B1 FD | 	call	#__system___string_cmp
0520c     00 7A 0E F2 | 	cmp	result1, #0 wz
05210     84 0A 90 AD |  if_e	jmp	#LR__0362
05214     95 01 00 FF 
05218     13 95 06 F6 | 	mov	arg02, ##@LR__5693
0521c     53 93 02 F6 | 	mov	arg01, local01
05220     0C FB B1 FD | 	call	#__system___string_cmp
05224     00 7A 0E F2 | 	cmp	result1, #0 wz
05228     74 0A 90 AD |  if_e	jmp	#LR__0363
0522c     95 01 00 FF 
05230     1B 95 06 F6 | 	mov	arg02, ##@LR__5694
05234     53 93 02 F6 | 	mov	arg01, local01
05238     F4 FA B1 FD | 	call	#__system___string_cmp
0523c     00 7A 0E F2 | 	cmp	result1, #0 wz
05240     64 0A 90 AD |  if_e	jmp	#LR__0364
05244     95 01 00 FF 
05248     1F 95 06 F6 | 	mov	arg02, ##@LR__5695
0524c     53 93 02 F6 | 	mov	arg01, local01
05250     DC FA B1 FD | 	call	#__system___string_cmp
05254     00 7A 0E F2 | 	cmp	result1, #0 wz
05258     54 0A 90 AD |  if_e	jmp	#LR__0365
0525c     95 01 00 FF 
05260     24 95 06 F6 | 	mov	arg02, ##@LR__5696
05264     53 93 02 F6 | 	mov	arg01, local01
05268     C4 FA B1 FD | 	call	#__system___string_cmp
0526c     00 7A 0E F2 | 	cmp	result1, #0 wz
05270     44 0A 90 AD |  if_e	jmp	#LR__0366
05274     95 01 00 FF 
05278     28 95 06 F6 | 	mov	arg02, ##@LR__5697
0527c     53 93 02 F6 | 	mov	arg01, local01
05280     AC FA B1 FD | 	call	#__system___string_cmp
05284     00 7A 0E F2 | 	cmp	result1, #0 wz
05288     34 0A 90 AD |  if_e	jmp	#LR__0367
0528c     95 01 00 FF 
05290     2D 95 06 F6 | 	mov	arg02, ##@LR__5698
05294     53 93 02 F6 | 	mov	arg01, local01
05298     94 FA B1 FD | 	call	#__system___string_cmp
0529c     00 7A 0E F2 | 	cmp	result1, #0 wz
052a0     24 0A 90 AD |  if_e	jmp	#LR__0368
052a4     95 01 00 FF 
052a8     31 95 06 F6 | 	mov	arg02, ##@LR__5699
052ac     53 93 02 F6 | 	mov	arg01, local01
052b0     7C FA B1 FD | 	call	#__system___string_cmp
052b4     00 7A 0E F2 | 	cmp	result1, #0 wz
052b8     14 0A 90 AD |  if_e	jmp	#LR__0369
052bc     95 01 00 FF 
052c0     34 95 06 F6 | 	mov	arg02, ##@LR__5700
052c4     53 93 02 F6 | 	mov	arg01, local01
052c8     64 FA B1 FD | 	call	#__system___string_cmp
052cc     00 7A 0E F2 | 	cmp	result1, #0 wz
052d0     04 0A 90 AD |  if_e	jmp	#LR__0370
052d4     95 01 00 FF 
052d8     3A 95 06 F6 | 	mov	arg02, ##@LR__5701
052dc     53 93 02 F6 | 	mov	arg01, local01
052e0     4C FA B1 FD | 	call	#__system___string_cmp
052e4     00 7A 0E F2 | 	cmp	result1, #0 wz
052e8     F4 09 90 AD |  if_e	jmp	#LR__0371
052ec     95 01 00 FF 
052f0     3E 95 06 F6 | 	mov	arg02, ##@LR__5702
052f4     53 93 02 F6 | 	mov	arg01, local01
052f8     34 FA B1 FD | 	call	#__system___string_cmp
052fc     00 7A 0E F2 | 	cmp	result1, #0 wz
05300     E4 09 90 AD |  if_e	jmp	#LR__0372
05304     95 01 00 FF 
05308     42 95 06 F6 | 	mov	arg02, ##@LR__5703
0530c     53 93 02 F6 | 	mov	arg01, local01
05310     1C FA B1 FD | 	call	#__system___string_cmp
05314     00 7A 0E F2 | 	cmp	result1, #0 wz
05318     D4 09 90 AD |  if_e	jmp	#LR__0373
0531c     95 01 00 FF 
05320     48 95 06 F6 | 	mov	arg02, ##@LR__5704
05324     53 93 02 F6 | 	mov	arg01, local01
05328     04 FA B1 FD | 	call	#__system___string_cmp
0532c     00 7A 0E F2 | 	cmp	result1, #0 wz
05330     C4 09 90 AD |  if_e	jmp	#LR__0374
05334     95 01 00 FF 
05338     4D 95 06 F6 | 	mov	arg02, ##@LR__5705
0533c     53 93 02 F6 | 	mov	arg01, local01
05340     EC F9 B1 FD | 	call	#__system___string_cmp
05344     00 7A 0E F2 | 	cmp	result1, #0 wz
05348     B4 09 90 AD |  if_e	jmp	#LR__0375
0534c     95 01 00 FF 
05350     50 95 06 F6 | 	mov	arg02, ##@LR__5706
05354     53 93 02 F6 | 	mov	arg01, local01
05358     D4 F9 B1 FD | 	call	#__system___string_cmp
0535c     00 7A 0E F2 | 	cmp	result1, #0 wz
05360     A4 09 90 AD |  if_e	jmp	#LR__0376
05364     95 01 00 FF 
05368     53 95 06 F6 | 	mov	arg02, ##@LR__5707
0536c     53 93 02 F6 | 	mov	arg01, local01
05370     BC F9 B1 FD | 	call	#__system___string_cmp
05374     00 7A 0E F2 | 	cmp	result1, #0 wz
05378     94 09 90 AD |  if_e	jmp	#LR__0377
0537c     95 01 00 FF 
05380     57 95 06 F6 | 	mov	arg02, ##@LR__5708
05384     53 93 02 F6 | 	mov	arg01, local01
05388     A4 F9 B1 FD | 	call	#__system___string_cmp
0538c     00 7A 0E F2 | 	cmp	result1, #0 wz
05390     84 09 90 AD |  if_e	jmp	#LR__0378
05394     95 01 00 FF 
05398     5A 95 06 F6 | 	mov	arg02, ##@LR__5709
0539c     53 93 02 F6 | 	mov	arg01, local01
053a0     8C F9 B1 FD | 	call	#__system___string_cmp
053a4     00 7A 0E F2 | 	cmp	result1, #0 wz
053a8     74 09 90 AD |  if_e	jmp	#LR__0379
053ac     95 01 00 FF 
053b0     60 95 06 F6 | 	mov	arg02, ##@LR__5710
053b4     53 93 02 F6 | 	mov	arg01, local01
053b8     74 F9 B1 FD | 	call	#__system___string_cmp
053bc     00 7A 0E F2 | 	cmp	result1, #0 wz
053c0     64 09 90 AD |  if_e	jmp	#LR__0380
053c4     95 01 00 FF 
053c8     65 95 06 F6 | 	mov	arg02, ##@LR__5711
053cc     53 93 02 F6 | 	mov	arg01, local01
053d0     5C F9 B1 FD | 	call	#__system___string_cmp
053d4     00 7A 0E F2 | 	cmp	result1, #0 wz
053d8     54 09 90 AD |  if_e	jmp	#LR__0381
053dc     95 01 00 FF 
053e0     68 95 06 F6 | 	mov	arg02, ##@LR__5712
053e4     53 93 02 F6 | 	mov	arg01, local01
053e8     44 F9 B1 FD | 	call	#__system___string_cmp
053ec     00 7A 0E F2 | 	cmp	result1, #0 wz
053f0     44 09 90 AD |  if_e	jmp	#LR__0382
053f4     95 01 00 FF 
053f8     6D 95 06 F6 | 	mov	arg02, ##@LR__5713
053fc     53 93 02 F6 | 	mov	arg01, local01
05400     2C F9 B1 FD | 	call	#__system___string_cmp
05404     00 7A 0E F2 | 	cmp	result1, #0 wz
05408     34 09 90 AD |  if_e	jmp	#LR__0383
0540c     95 01 00 FF 
05410     71 95 06 F6 | 	mov	arg02, ##@LR__5714
05414     53 93 02 F6 | 	mov	arg01, local01
05418     14 F9 B1 FD | 	call	#__system___string_cmp
0541c     00 7A 0E F2 | 	cmp	result1, #0 wz
05420     24 09 90 AD |  if_e	jmp	#LR__0384
05424     95 01 00 FF 
05428     77 95 06 F6 | 	mov	arg02, ##@LR__5715
0542c     53 93 02 F6 | 	mov	arg01, local01
05430     FC F8 B1 FD | 	call	#__system___string_cmp
05434     00 7A 0E F2 | 	cmp	result1, #0 wz
05438     14 09 90 AD |  if_e	jmp	#LR__0385
0543c     95 01 00 FF 
05440     7D 95 06 F6 | 	mov	arg02, ##@LR__5716
05444     53 93 02 F6 | 	mov	arg01, local01
05448     E4 F8 B1 FD | 	call	#__system___string_cmp
0544c     00 7A 0E F2 | 	cmp	result1, #0 wz
05450     04 09 90 AD |  if_e	jmp	#LR__0386
05454     95 01 00 FF 
05458     82 95 06 F6 | 	mov	arg02, ##@LR__5717
0545c     53 93 02 F6 | 	mov	arg01, local01
05460     CC F8 B1 FD | 	call	#__system___string_cmp
05464     00 7A 0E F2 | 	cmp	result1, #0 wz
05468     F4 08 90 AD |  if_e	jmp	#LR__0387
0546c     95 01 00 FF 
05470     85 95 06 F6 | 	mov	arg02, ##@LR__5718
05474     53 93 02 F6 | 	mov	arg01, local01
05478     B4 F8 B1 FD | 	call	#__system___string_cmp
0547c     00 7A 0E F2 | 	cmp	result1, #0 wz
05480     E4 08 90 AD |  if_e	jmp	#LR__0388
05484     95 01 00 FF 
05488     8B 95 06 F6 | 	mov	arg02, ##@LR__5719
0548c     53 93 02 F6 | 	mov	arg01, local01
05490     9C F8 B1 FD | 	call	#__system___string_cmp
05494     00 7A 0E F2 | 	cmp	result1, #0 wz
05498     D4 08 90 AD |  if_e	jmp	#LR__0389
0549c     95 01 00 FF 
054a0     8F 95 06 F6 | 	mov	arg02, ##@LR__5720
054a4     53 93 02 F6 | 	mov	arg01, local01
054a8     84 F8 B1 FD | 	call	#__system___string_cmp
054ac     00 7A 0E F2 | 	cmp	result1, #0 wz
054b0     C4 08 90 AD |  if_e	jmp	#LR__0390
054b4     95 01 00 FF 
054b8     94 95 06 F6 | 	mov	arg02, ##@LR__5721
054bc     53 93 02 F6 | 	mov	arg01, local01
054c0     6C F8 B1 FD | 	call	#__system___string_cmp
054c4     00 7A 0E F2 | 	cmp	result1, #0 wz
054c8     B4 08 90 AD |  if_e	jmp	#LR__0391
054cc     95 01 00 FF 
054d0     97 95 06 F6 | 	mov	arg02, ##@LR__5722
054d4     53 93 02 F6 | 	mov	arg01, local01
054d8     54 F8 B1 FD | 	call	#__system___string_cmp
054dc     00 7A 0E F2 | 	cmp	result1, #0 wz
054e0     A4 08 90 AD |  if_e	jmp	#LR__0392
054e4     95 01 00 FF 
054e8     9A 95 06 F6 | 	mov	arg02, ##@LR__5723
054ec     53 93 02 F6 | 	mov	arg01, local01
054f0     3C F8 B1 FD | 	call	#__system___string_cmp
054f4     00 7A 0E F2 | 	cmp	result1, #0 wz
054f8     94 08 90 AD |  if_e	jmp	#LR__0393
054fc     95 01 00 FF 
05500     9F 95 06 F6 | 	mov	arg02, ##@LR__5724
05504     53 93 02 F6 | 	mov	arg01, local01
05508     24 F8 B1 FD | 	call	#__system___string_cmp
0550c     00 7A 0E F2 | 	cmp	result1, #0 wz
05510     84 08 90 AD |  if_e	jmp	#LR__0394
05514     95 01 00 FF 
05518     A5 95 06 F6 | 	mov	arg02, ##@LR__5725
0551c     53 93 02 F6 | 	mov	arg01, local01
05520     0C F8 B1 FD | 	call	#__system___string_cmp
05524     00 7A 0E F2 | 	cmp	result1, #0 wz
05528     74 08 90 AD |  if_e	jmp	#LR__0395
0552c     95 01 00 FF 
05530     A9 95 06 F6 | 	mov	arg02, ##@LR__5726
05534     53 93 02 F6 | 	mov	arg01, local01
05538     F4 F7 B1 FD | 	call	#__system___string_cmp
0553c     00 7A 0E F2 | 	cmp	result1, #0 wz
05540     64 08 90 AD |  if_e	jmp	#LR__0396
05544     95 01 00 FF 
05548     B2 95 06 F6 | 	mov	arg02, ##@LR__5727
0554c     53 93 02 F6 | 	mov	arg01, local01
05550     DC F7 B1 FD | 	call	#__system___string_cmp
05554     00 7A 0E F2 | 	cmp	result1, #0 wz
05558     54 08 90 AD |  if_e	jmp	#LR__0397
0555c     95 01 00 FF 
05560     B8 95 06 F6 | 	mov	arg02, ##@LR__5728
05564     53 93 02 F6 | 	mov	arg01, local01
05568     C4 F7 B1 FD | 	call	#__system___string_cmp
0556c     00 7A 0E F2 | 	cmp	result1, #0 wz
05570     44 08 90 AD |  if_e	jmp	#LR__0398
05574     95 01 00 FF 
05578     BE 95 06 F6 | 	mov	arg02, ##@LR__5729
0557c     53 93 02 F6 | 	mov	arg01, local01
05580     AC F7 B1 FD | 	call	#__system___string_cmp
05584     00 7A 0E F2 | 	cmp	result1, #0 wz
05588     34 08 90 AD |  if_e	jmp	#LR__0399
0558c     95 01 00 FF 
05590     C7 95 06 F6 | 	mov	arg02, ##@LR__5730
05594     53 93 02 F6 | 	mov	arg01, local01
05598     94 F7 B1 FD | 	call	#__system___string_cmp
0559c     00 7A 0E F2 | 	cmp	result1, #0 wz
055a0     24 08 90 AD |  if_e	jmp	#LR__0400
055a4     95 01 00 FF 
055a8     D1 95 06 F6 | 	mov	arg02, ##@LR__5731
055ac     53 93 02 F6 | 	mov	arg01, local01
055b0     7C F7 B1 FD | 	call	#__system___string_cmp
055b4     00 7A 0E F2 | 	cmp	result1, #0 wz
055b8     14 08 90 AD |  if_e	jmp	#LR__0401
055bc     95 01 00 FF 
055c0     DA 95 06 F6 | 	mov	arg02, ##@LR__5732
055c4     53 93 02 F6 | 	mov	arg01, local01
055c8     64 F7 B1 FD | 	call	#__system___string_cmp
055cc     00 7A 0E F2 | 	cmp	result1, #0 wz
055d0     04 08 90 AD |  if_e	jmp	#LR__0402
055d4     95 01 00 FF 
055d8     DF 95 06 F6 | 	mov	arg02, ##@LR__5733
055dc     53 93 02 F6 | 	mov	arg01, local01
055e0     4C F7 B1 FD | 	call	#__system___string_cmp
055e4     00 7A 0E F2 | 	cmp	result1, #0 wz
055e8     F4 07 90 AD |  if_e	jmp	#LR__0403
055ec     95 01 00 FF 
055f0     E2 95 06 F6 | 	mov	arg02, ##@LR__5734
055f4     53 93 02 F6 | 	mov	arg01, local01
055f8     34 F7 B1 FD | 	call	#__system___string_cmp
055fc     00 7A 0E F2 | 	cmp	result1, #0 wz
05600     E4 07 90 AD |  if_e	jmp	#LR__0404
05604     95 01 00 FF 
05608     E7 95 06 F6 | 	mov	arg02, ##@LR__5735
0560c     53 93 02 F6 | 	mov	arg01, local01
05610     1C F7 B1 FD | 	call	#__system___string_cmp
05614     00 7A 0E F2 | 	cmp	result1, #0 wz
05618     D4 07 90 AD |  if_e	jmp	#LR__0405
0561c     95 01 00 FF 
05620     EB 95 06 F6 | 	mov	arg02, ##@LR__5736
05624     53 93 02 F6 | 	mov	arg01, local01
05628     04 F7 B1 FD | 	call	#__system___string_cmp
0562c     00 7A 0E F2 | 	cmp	result1, #0 wz
05630     C4 07 90 AD |  if_e	jmp	#LR__0406
05634     95 01 00 FF 
05638     F0 95 06 F6 | 	mov	arg02, ##@LR__5737
0563c     53 93 02 F6 | 	mov	arg01, local01
05640     EC F6 B1 FD | 	call	#__system___string_cmp
05644     00 7A 0E F2 | 	cmp	result1, #0 wz
05648     B4 07 90 AD |  if_e	jmp	#LR__0407
0564c     95 01 00 FF 
05650     F4 95 06 F6 | 	mov	arg02, ##@LR__5738
05654     53 93 02 F6 | 	mov	arg01, local01
05658     D4 F6 B1 FD | 	call	#__system___string_cmp
0565c     00 7A 0E F2 | 	cmp	result1, #0 wz
05660     A4 07 90 AD |  if_e	jmp	#LR__0408
05664     95 01 00 FF 
05668     FD 95 06 F6 | 	mov	arg02, ##@LR__5739
0566c     53 93 02 F6 | 	mov	arg01, local01
05670     BC F6 B1 FD | 	call	#__system___string_cmp
05674     00 7A 0E F2 | 	cmp	result1, #0 wz
05678     94 07 90 AD |  if_e	jmp	#LR__0409
0567c     96 01 00 FF 
05680     02 94 06 F6 | 	mov	arg02, ##@LR__5740
05684     53 93 02 F6 | 	mov	arg01, local01
05688     A4 F6 B1 FD | 	call	#__system___string_cmp
0568c     00 7A 0E F2 | 	cmp	result1, #0 wz
05690     84 07 90 AD |  if_e	jmp	#LR__0410
05694     96 01 00 FF 
05698     08 94 06 F6 | 	mov	arg02, ##@LR__5741
0569c     53 93 02 F6 | 	mov	arg01, local01
056a0     8C F6 B1 FD | 	call	#__system___string_cmp
056a4     00 7A 0E F2 | 	cmp	result1, #0 wz
056a8     74 07 90 AD |  if_e	jmp	#LR__0411
056ac     96 01 00 FF 
056b0     0A 94 06 F6 | 	mov	arg02, ##@LR__5742
056b4     53 93 02 F6 | 	mov	arg01, local01
056b8     74 F6 B1 FD | 	call	#__system___string_cmp
056bc     00 7A 0E F2 | 	cmp	result1, #0 wz
056c0     64 07 90 AD |  if_e	jmp	#LR__0412
056c4     96 01 00 FF 
056c8     0E 94 06 F6 | 	mov	arg02, ##@LR__5743
056cc     53 93 02 F6 | 	mov	arg01, local01
056d0     5C F6 B1 FD | 	call	#__system___string_cmp
056d4     00 7A 0E F2 | 	cmp	result1, #0 wz
056d8     54 07 90 AD |  if_e	jmp	#LR__0413
056dc     96 01 00 FF 
056e0     12 94 06 F6 | 	mov	arg02, ##@LR__5744
056e4     53 93 02 F6 | 	mov	arg01, local01
056e8     44 F6 B1 FD | 	call	#__system___string_cmp
056ec     00 7A 0E F2 | 	cmp	result1, #0 wz
056f0     44 07 90 AD |  if_e	jmp	#LR__0414
056f4     96 01 00 FF 
056f8     17 94 06 F6 | 	mov	arg02, ##@LR__5745
056fc     53 93 02 F6 | 	mov	arg01, local01
05700     2C F6 B1 FD | 	call	#__system___string_cmp
05704     00 7A 0E F2 | 	cmp	result1, #0 wz
05708     34 07 90 AD |  if_e	jmp	#LR__0415
0570c     96 01 00 FF 
05710     1F 94 06 F6 | 	mov	arg02, ##@LR__5746
05714     53 93 02 F6 | 	mov	arg01, local01
05718     14 F6 B1 FD | 	call	#__system___string_cmp
0571c     00 7A 0E F2 | 	cmp	result1, #0 wz
05720     24 07 90 AD |  if_e	jmp	#LR__0416
05724     96 01 00 FF 
05728     23 94 06 F6 | 	mov	arg02, ##@LR__5747
0572c     53 93 02 F6 | 	mov	arg01, local01
05730     FC F5 B1 FD | 	call	#__system___string_cmp
05734     00 7A 0E F2 | 	cmp	result1, #0 wz
05738     14 07 90 AD |  if_e	jmp	#LR__0417
0573c     96 01 00 FF 
05740     25 94 06 F6 | 	mov	arg02, ##@LR__5748
05744     53 93 02 F6 | 	mov	arg01, local01
05748     E4 F5 B1 FD | 	call	#__system___string_cmp
0574c     00 7A 0E F2 | 	cmp	result1, #0 wz
05750     04 07 90 AD |  if_e	jmp	#LR__0418
05754     96 01 00 FF 
05758     2D 94 06 F6 | 	mov	arg02, ##@LR__5749
0575c     53 93 02 F6 | 	mov	arg01, local01
05760     CC F5 B1 FD | 	call	#__system___string_cmp
05764     00 7A 0E F2 | 	cmp	result1, #0 wz
05768     F4 06 90 AD |  if_e	jmp	#LR__0419
0576c     96 01 00 FF 
05770     3C 94 06 F6 | 	mov	arg02, ##@LR__5750
05774     53 93 02 F6 | 	mov	arg01, local01
05778     B4 F5 B1 FD | 	call	#__system___string_cmp
0577c     00 7A 0E F2 | 	cmp	result1, #0 wz
05780     E4 06 90 AD |  if_e	jmp	#LR__0420
05784     96 01 00 FF 
05788     40 94 06 F6 | 	mov	arg02, ##@LR__5751
0578c     53 93 02 F6 | 	mov	arg01, local01
05790     9C F5 B1 FD | 	call	#__system___string_cmp
05794     00 7A 0E F2 | 	cmp	result1, #0 wz
05798     D4 06 90 AD |  if_e	jmp	#LR__0421
0579c     96 01 00 FF 
057a0     47 94 06 F6 | 	mov	arg02, ##@LR__5752
057a4     53 93 02 F6 | 	mov	arg01, local01
057a8     84 F5 B1 FD | 	call	#__system___string_cmp
057ac     00 7A 0E F2 | 	cmp	result1, #0 wz
057b0     C4 06 90 AD |  if_e	jmp	#LR__0422
057b4     96 01 00 FF 
057b8     4B 94 06 F6 | 	mov	arg02, ##@LR__5753
057bc     53 93 02 F6 | 	mov	arg01, local01
057c0     6C F5 B1 FD | 	call	#__system___string_cmp
057c4     00 7A 0E F2 | 	cmp	result1, #0 wz
057c8     B4 06 90 AD |  if_e	jmp	#LR__0423
057cc     96 01 00 FF 
057d0     4E 94 06 F6 | 	mov	arg02, ##@LR__5754
057d4     53 93 02 F6 | 	mov	arg01, local01
057d8     54 F5 B1 FD | 	call	#__system___string_cmp
057dc     00 7A 0E F2 | 	cmp	result1, #0 wz
057e0     A4 06 90 AD |  if_e	jmp	#LR__0424
057e4     96 01 00 FF 
057e8     53 94 06 F6 | 	mov	arg02, ##@LR__5755
057ec     53 93 02 F6 | 	mov	arg01, local01
057f0     3C F5 B1 FD | 	call	#__system___string_cmp
057f4     00 7A 0E F2 | 	cmp	result1, #0 wz
057f8     94 06 90 AD |  if_e	jmp	#LR__0425
057fc     96 01 00 FF 
05800     56 94 06 F6 | 	mov	arg02, ##@LR__5756
05804     53 93 02 F6 | 	mov	arg01, local01
05808     24 F5 B1 FD | 	call	#__system___string_cmp
0580c     00 7A 0E F2 | 	cmp	result1, #0 wz
05810     84 06 90 AD |  if_e	jmp	#LR__0426
05814     96 01 00 FF 
05818     5F 94 06 F6 | 	mov	arg02, ##@LR__5757
0581c     53 93 02 F6 | 	mov	arg01, local01
05820     0C F5 B1 FD | 	call	#__system___string_cmp
05824     00 7A 0E F2 | 	cmp	result1, #0 wz
05828     74 06 90 AD |  if_e	jmp	#LR__0427
0582c     96 01 00 FF 
05830     63 94 06 F6 | 	mov	arg02, ##@LR__5758
05834     53 93 02 F6 | 	mov	arg01, local01
05838     F4 F4 B1 FD | 	call	#__system___string_cmp
0583c     00 7A 0E F2 | 	cmp	result1, #0 wz
05840     64 06 90 AD |  if_e	jmp	#LR__0428
05844     96 01 00 FF 
05848     6C 94 06 F6 | 	mov	arg02, ##@LR__5759
0584c     53 93 02 F6 | 	mov	arg01, local01
05850     DC F4 B1 FD | 	call	#__system___string_cmp
05854     00 7A 0E F2 | 	cmp	result1, #0 wz
05858     54 06 90 AD |  if_e	jmp	#LR__0429
0585c     96 01 00 FF 
05860     70 94 06 F6 | 	mov	arg02, ##@LR__5760
05864     53 93 02 F6 | 	mov	arg01, local01
05868     C4 F4 B1 FD | 	call	#__system___string_cmp
0586c     00 7A 0E F2 | 	cmp	result1, #0 wz
05870     44 06 90 AD |  if_e	jmp	#LR__0430
05874     96 01 00 FF 
05878     79 94 06 F6 | 	mov	arg02, ##@LR__5761
0587c     53 93 02 F6 | 	mov	arg01, local01
05880     AC F4 B1 FD | 	call	#__system___string_cmp
05884     00 7A 0E F2 | 	cmp	result1, #0 wz
05888     34 06 90 AD |  if_e	jmp	#LR__0431
0588c     96 01 00 FF 
05890     7D 94 06 F6 | 	mov	arg02, ##@LR__5762
05894     53 93 02 F6 | 	mov	arg01, local01
05898     94 F4 B1 FD | 	call	#__system___string_cmp
0589c     00 7A 0E F2 | 	cmp	result1, #0 wz
058a0     24 06 90 AD |  if_e	jmp	#LR__0432
058a4     96 01 00 FF 
058a8     84 94 06 F6 | 	mov	arg02, ##@LR__5763
058ac     53 93 02 F6 | 	mov	arg01, local01
058b0     7C F4 B1 FD | 	call	#__system___string_cmp
058b4     00 7A 0E F2 | 	cmp	result1, #0 wz
058b8     14 06 90 AD |  if_e	jmp	#LR__0433
058bc     96 01 00 FF 
058c0     88 94 06 F6 | 	mov	arg02, ##@LR__5764
058c4     53 93 02 F6 | 	mov	arg01, local01
058c8     64 F4 B1 FD | 	call	#__system___string_cmp
058cc     00 7A 0E F2 | 	cmp	result1, #0 wz
058d0     04 06 90 AD |  if_e	jmp	#LR__0434
058d4     96 01 00 FF 
058d8     8F 94 06 F6 | 	mov	arg02, ##@LR__5765
058dc     53 93 02 F6 | 	mov	arg01, local01
058e0     4C F4 B1 FD | 	call	#__system___string_cmp
058e4     00 7A 0E F2 | 	cmp	result1, #0 wz
058e8     F4 05 90 AD |  if_e	jmp	#LR__0435
058ec     96 01 00 FF 
058f0     93 94 06 F6 | 	mov	arg02, ##@LR__5766
058f4     53 93 02 F6 | 	mov	arg01, local01
058f8     34 F4 B1 FD | 	call	#__system___string_cmp
058fc     00 7A 0E F2 | 	cmp	result1, #0 wz
05900     E4 05 90 AD |  if_e	jmp	#LR__0436
05904     96 01 00 FF 
05908     9A 94 06 F6 | 	mov	arg02, ##@LR__5767
0590c     53 93 02 F6 | 	mov	arg01, local01
05910     1C F4 B1 FD | 	call	#__system___string_cmp
05914     00 7A 0E F2 | 	cmp	result1, #0 wz
05918     D4 05 90 AD |  if_e	jmp	#LR__0437
0591c     96 01 00 FF 
05920     9E 94 06 F6 | 	mov	arg02, ##@LR__5768
05924     53 93 02 F6 | 	mov	arg01, local01
05928     04 F4 B1 FD | 	call	#__system___string_cmp
0592c     00 7A 0E F2 | 	cmp	result1, #0 wz
05930     C4 05 90 AD |  if_e	jmp	#LR__0438
05934     96 01 00 FF 
05938     A9 94 06 F6 | 	mov	arg02, ##@LR__5769
0593c     53 93 02 F6 | 	mov	arg01, local01
05940     EC F3 B1 FD | 	call	#__system___string_cmp
05944     00 7A 0E F2 | 	cmp	result1, #0 wz
05948     B4 05 90 AD |  if_e	jmp	#LR__0439
0594c     96 01 00 FF 
05950     AD 94 06 F6 | 	mov	arg02, ##@LR__5770
05954     53 93 02 F6 | 	mov	arg01, local01
05958     D4 F3 B1 FD | 	call	#__system___string_cmp
0595c     00 7A 0E F2 | 	cmp	result1, #0 wz
05960     A4 05 90 AD |  if_e	jmp	#LR__0440
05964     96 01 00 FF 
05968     B4 94 06 F6 | 	mov	arg02, ##@LR__5771
0596c     53 93 02 F6 | 	mov	arg01, local01
05970     BC F3 B1 FD | 	call	#__system___string_cmp
05974     00 7A 0E F2 | 	cmp	result1, #0 wz
05978     94 05 90 AD |  if_e	jmp	#LR__0441
0597c     96 01 00 FF 
05980     B8 94 06 F6 | 	mov	arg02, ##@LR__5772
05984     53 93 02 F6 | 	mov	arg01, local01
05988     A4 F3 B1 FD | 	call	#__system___string_cmp
0598c     00 7A 0E F2 | 	cmp	result1, #0 wz
05990     84 05 90 AD |  if_e	jmp	#LR__0442
05994     96 01 00 FF 
05998     C0 94 06 F6 | 	mov	arg02, ##@LR__5773
0599c     53 93 02 F6 | 	mov	arg01, local01
059a0     8C F3 B1 FD | 	call	#__system___string_cmp
059a4     00 7A 0E F2 | 	cmp	result1, #0 wz
059a8     74 05 90 AD |  if_e	jmp	#LR__0443
059ac     96 01 00 FF 
059b0     C4 94 06 F6 | 	mov	arg02, ##@LR__5774
059b4     53 93 02 F6 | 	mov	arg01, local01
059b8     74 F3 B1 FD | 	call	#__system___string_cmp
059bc     00 7A 0E F2 | 	cmp	result1, #0 wz
059c0     64 05 90 AD |  if_e	jmp	#LR__0444
059c4     96 01 00 FF 
059c8     CB 94 06 F6 | 	mov	arg02, ##@LR__5775
059cc     53 93 02 F6 | 	mov	arg01, local01
059d0     5C F3 B1 FD | 	call	#__system___string_cmp
059d4     00 7A 0E F2 | 	cmp	result1, #0 wz
059d8     54 05 90 AD |  if_e	jmp	#LR__0445
059dc     96 01 00 FF 
059e0     D2 94 06 F6 | 	mov	arg02, ##@LR__5776
059e4     53 93 02 F6 | 	mov	arg01, local01
059e8     44 F3 B1 FD | 	call	#__system___string_cmp
059ec     00 7A 0E F2 | 	cmp	result1, #0 wz
059f0     44 05 90 AD |  if_e	jmp	#LR__0446
059f4     96 01 00 FF 
059f8     D6 94 06 F6 | 	mov	arg02, ##@LR__5777
059fc     53 93 02 F6 | 	mov	arg01, local01
05a00     2C F3 B1 FD | 	call	#__system___string_cmp
05a04     00 7A 0E F2 | 	cmp	result1, #0 wz
05a08     34 05 90 AD |  if_e	jmp	#LR__0447
05a0c     96 01 00 FF 
05a10     DC 94 06 F6 | 	mov	arg02, ##@LR__5778
05a14     53 93 02 F6 | 	mov	arg01, local01
05a18     14 F3 B1 FD | 	call	#__system___string_cmp
05a1c     00 7A 0E F2 | 	cmp	result1, #0 wz
05a20     24 05 90 AD |  if_e	jmp	#LR__0448
05a24     96 01 00 FF 
05a28     E0 94 06 F6 | 	mov	arg02, ##@LR__5779
05a2c     53 93 02 F6 | 	mov	arg01, local01
05a30     FC F2 B1 FD | 	call	#__system___string_cmp
05a34     00 7A 0E F2 | 	cmp	result1, #0 wz
05a38     14 05 90 AD |  if_e	jmp	#LR__0449
05a3c     96 01 00 FF 
05a40     E7 94 06 F6 | 	mov	arg02, ##@LR__5780
05a44     53 93 02 F6 | 	mov	arg01, local01
05a48     E4 F2 B1 FD | 	call	#__system___string_cmp
05a4c     00 7A 0E F2 | 	cmp	result1, #0 wz
05a50     04 05 90 AD |  if_e	jmp	#LR__0450
05a54     96 01 00 FF 
05a58     EC 94 06 F6 | 	mov	arg02, ##@LR__5781
05a5c     53 93 02 F6 | 	mov	arg01, local01
05a60     CC F2 B1 FD | 	call	#__system___string_cmp
05a64     00 7A 0E F2 | 	cmp	result1, #0 wz
05a68     F4 04 90 AD |  if_e	jmp	#LR__0451
05a6c     96 01 00 FF 
05a70     F1 94 06 F6 | 	mov	arg02, ##@LR__5782
05a74     53 93 02 F6 | 	mov	arg01, local01
05a78     B4 F2 B1 FD | 	call	#__system___string_cmp
05a7c     00 7A 0E F2 | 	cmp	result1, #0 wz
05a80     E4 04 90 AD |  if_e	jmp	#LR__0452
05a84     96 01 00 FF 
05a88     F8 94 06 F6 | 	mov	arg02, ##@LR__5783
05a8c     53 93 02 F6 | 	mov	arg01, local01
05a90     9C F2 B1 FD | 	call	#__system___string_cmp
05a94     00 7A 0E F2 | 	cmp	result1, #0 wz
05a98     D4 04 90 AD |  if_e	jmp	#LR__0453
05a9c     96 01 00 FF 
05aa0     FB 94 06 F6 | 	mov	arg02, ##@LR__5784
05aa4     53 93 02 F6 | 	mov	arg01, local01
05aa8     84 F2 B1 FD | 	call	#__system___string_cmp
05aac     00 7A 0E F2 | 	cmp	result1, #0 wz
05ab0     C4 04 90 AD |  if_e	jmp	#LR__0454
05ab4     96 01 00 FF 
05ab8     05 95 06 F6 | 	mov	arg02, ##@LR__5785
05abc     53 93 02 F6 | 	mov	arg01, local01
05ac0     6C F2 B1 FD | 	call	#__system___string_cmp
05ac4     00 7A 0E F2 | 	cmp	result1, #0 wz
05ac8     B4 04 90 AD |  if_e	jmp	#LR__0455
05acc     96 01 00 FF 
05ad0     09 95 06 F6 | 	mov	arg02, ##@LR__5786
05ad4     53 93 02 F6 | 	mov	arg01, local01
05ad8     54 F2 B1 FD | 	call	#__system___string_cmp
05adc     00 7A 0E F2 | 	cmp	result1, #0 wz
05ae0     A4 04 90 AD |  if_e	jmp	#LR__0456
05ae4     96 01 00 FF 
05ae8     11 95 06 F6 | 	mov	arg02, ##@LR__5787
05aec     53 93 02 F6 | 	mov	arg01, local01
05af0     3C F2 B1 FD | 	call	#__system___string_cmp
05af4     00 7A 0E F2 | 	cmp	result1, #0 wz
05af8     94 04 90 AD |  if_e	jmp	#LR__0457
05afc     96 01 00 FF 
05b00     15 95 06 F6 | 	mov	arg02, ##@LR__5788
05b04     53 93 02 F6 | 	mov	arg01, local01
05b08     24 F2 B1 FD | 	call	#__system___string_cmp
05b0c     00 7A 0E F2 | 	cmp	result1, #0 wz
05b10     84 04 90 AD |  if_e	jmp	#LR__0458
05b14     96 01 00 FF 
05b18     1B 95 06 F6 | 	mov	arg02, ##@LR__5789
05b1c     53 93 02 F6 | 	mov	arg01, local01
05b20     0C F2 B1 FD | 	call	#__system___string_cmp
05b24     00 7A 0E F2 | 	cmp	result1, #0 wz
05b28     74 04 90 AD |  if_e	jmp	#LR__0459
05b2c     96 01 00 FF 
05b30     21 95 06 F6 | 	mov	arg02, ##@LR__5790
05b34     53 93 02 F6 | 	mov	arg01, local01
05b38     F4 F1 B1 FD | 	call	#__system___string_cmp
05b3c     00 7A 0E F2 | 	cmp	result1, #0 wz
05b40     64 04 90 AD |  if_e	jmp	#LR__0460
05b44     68 04 90 FD | 	jmp	#LR__0461
05b48                 | LR__0320
05b48     5C 7A 06 F6 | 	mov	result1, #92
05b4c     64 04 90 FD | 	jmp	#LR__0462
05b50                 | LR__0321
05b50     5C 7A 06 F6 | 	mov	result1, #92
05b54     5C 04 90 FD | 	jmp	#LR__0462
05b58                 | LR__0322
05b58     B9 7A 06 F6 | 	mov	result1, #185
05b5c     54 04 90 FD | 	jmp	#LR__0462
05b60                 | LR__0323
05b60     47 7A 06 F6 | 	mov	result1, #71
05b64     4C 04 90 FD | 	jmp	#LR__0462
05b68                 | LR__0324
05b68     59 7A 06 F6 | 	mov	result1, #89
05b6c     44 04 90 FD | 	jmp	#LR__0462
05b70                 | LR__0325
05b70     59 7A 06 F6 | 	mov	result1, #89
05b74     3C 04 90 FD | 	jmp	#LR__0462
05b78                 | LR__0326
05b78     C3 7A 06 F6 | 	mov	result1, #195
05b7c     34 04 90 FD | 	jmp	#LR__0462
05b80                 | LR__0327
05b80     AE 7A 06 F6 | 	mov	result1, #174
05b84     2C 04 90 FD | 	jmp	#LR__0462
05b88                 | LR__0328
05b88     AE 7A 06 F6 | 	mov	result1, #174
05b8c     24 04 90 FD | 	jmp	#LR__0462
05b90                 | LR__0329
05b90     B1 7A 06 F6 | 	mov	result1, #177
05b94     1C 04 90 FD | 	jmp	#LR__0462
05b98                 | LR__0330
05b98     B1 7A 06 F6 | 	mov	result1, #177
05b9c     14 04 90 FD | 	jmp	#LR__0462
05ba0                 | LR__0331
05ba0     AF 7A 06 F6 | 	mov	result1, #175
05ba4     0C 04 90 FD | 	jmp	#LR__0462
05ba8                 | LR__0332
05ba8     AF 7A 06 F6 | 	mov	result1, #175
05bac     04 04 90 FD | 	jmp	#LR__0462
05bb0                 | LR__0333
05bb0     B0 7A 06 F6 | 	mov	result1, #176
05bb4     FC 03 90 FD | 	jmp	#LR__0462
05bb8                 | LR__0334
05bb8     B0 7A 06 F6 | 	mov	result1, #176
05bbc     F4 03 90 FD | 	jmp	#LR__0462
05bc0                 | LR__0335
05bc0     45 7A 06 F6 | 	mov	result1, #69
05bc4     EC 03 90 FD | 	jmp	#LR__0462
05bc8                 | LR__0336
05bc8     45 7A 06 F6 | 	mov	result1, #69
05bcc     E4 03 90 FD | 	jmp	#LR__0462
05bd0                 | LR__0337
05bd0     69 7A 06 F6 | 	mov	result1, #105
05bd4     DC 03 90 FD | 	jmp	#LR__0462
05bd8                 | LR__0338
05bd8     B4 7A 06 F6 | 	mov	result1, #180
05bdc     D4 03 90 FD | 	jmp	#LR__0462
05be0                 | LR__0339
05be0     40 7A 06 F6 | 	mov	result1, #64
05be4     CC 03 90 FD | 	jmp	#LR__0462
05be8                 | LR__0340
05be8     CF 7A 06 F6 | 	mov	result1, #207
05bec     C4 03 90 FD | 	jmp	#LR__0462
05bf0                 | LR__0341
05bf0     49 7A 06 F6 | 	mov	result1, #73
05bf4     BC 03 90 FD | 	jmp	#LR__0462
05bf8                 | LR__0342
05bf8     49 7A 06 F6 | 	mov	result1, #73
05bfc     B4 03 90 FD | 	jmp	#LR__0462
05c00                 | LR__0343
05c00     C4 7A 06 F6 | 	mov	result1, #196
05c04     AC 03 90 FD | 	jmp	#LR__0462
05c08                 | LR__0344
05c08     68 7A 06 F6 | 	mov	result1, #104
05c0c     A4 03 90 FD | 	jmp	#LR__0462
05c10                 | LR__0345
05c10     B7 7A 06 F6 | 	mov	result1, #183
05c14     9C 03 90 FD | 	jmp	#LR__0462
05c18                 | LR__0346
05c18     D9 7A 06 F6 | 	mov	result1, #217
05c1c     94 03 90 FD | 	jmp	#LR__0462
05c20                 | LR__0347
05c20     73 7A 06 F6 | 	mov	result1, #115
05c24     8C 03 90 FD | 	jmp	#LR__0462
05c28                 | LR__0348
05c28     74 7A 06 F6 | 	mov	result1, #116
05c2c     84 03 90 FD | 	jmp	#LR__0462
05c30                 | LR__0349
05c30     6C 7A 06 F6 | 	mov	result1, #108
05c34     7C 03 90 FD | 	jmp	#LR__0462
05c38                 | LR__0350
05c38     6C 7A 06 F6 | 	mov	result1, #108
05c3c     74 03 90 FD | 	jmp	#LR__0462
05c40                 | LR__0351
05c40     89 7A 06 F6 | 	mov	result1, #137
05c44     6C 03 90 FD | 	jmp	#LR__0462
05c48                 | LR__0352
05c48     C2 7A 06 F6 | 	mov	result1, #194
05c4c     64 03 90 FD | 	jmp	#LR__0462
05c50                 | LR__0353
05c50     72 7A 06 F6 | 	mov	result1, #114
05c54     5C 03 90 FD | 	jmp	#LR__0462
05c58                 | LR__0354
05c58     5D 7A 06 F6 | 	mov	result1, #93
05c5c     54 03 90 FD | 	jmp	#LR__0462
05c60                 | LR__0355
05c60     96 7A 06 F6 | 	mov	result1, #150
05c64     4C 03 90 FD | 	jmp	#LR__0462
05c68                 | LR__0356
05c68     43 7A 06 F6 | 	mov	result1, #67
05c6c     44 03 90 FD | 	jmp	#LR__0462
05c70                 | LR__0357
05c70     43 7A 06 F6 | 	mov	result1, #67
05c74     3C 03 90 FD | 	jmp	#LR__0462
05c78                 | LR__0358
05c78     43 7A 06 F6 | 	mov	result1, #67
05c7c     34 03 90 FD | 	jmp	#LR__0462
05c80                 | LR__0359
05c80     5A 7A 06 F6 | 	mov	result1, #90
05c84     2C 03 90 FD | 	jmp	#LR__0462
05c88                 | LR__0360
05c88     AB 7A 06 F6 | 	mov	result1, #171
05c8c     24 03 90 FD | 	jmp	#LR__0462
05c90                 | LR__0361
05c90     BD 7A 06 F6 | 	mov	result1, #189
05c94     1C 03 90 FD | 	jmp	#LR__0462
05c98                 | LR__0362
05c98     BD 7A 06 F6 | 	mov	result1, #189
05c9c     14 03 90 FD | 	jmp	#LR__0462
05ca0                 | LR__0363
05ca0     46 7A 06 F6 | 	mov	result1, #70
05ca4     0C 03 90 FD | 	jmp	#LR__0462
05ca8                 | LR__0364
05ca8     46 7A 06 F6 | 	mov	result1, #70
05cac     04 03 90 FD | 	jmp	#LR__0462
05cb0                 | LR__0365
05cb0     71 7A 06 F6 | 	mov	result1, #113
05cb4     FC 02 90 FD | 	jmp	#LR__0462
05cb8                 | LR__0366
05cb8     71 7A 06 F6 | 	mov	result1, #113
05cbc     F4 02 90 FD | 	jmp	#LR__0462
05cc0                 | LR__0367
05cc0     60 7A 06 F6 | 	mov	result1, #96
05cc4     EC 02 90 FD | 	jmp	#LR__0462
05cc8                 | LR__0368
05cc8     4A 7A 06 F6 | 	mov	result1, #74
05ccc     E4 02 90 FD | 	jmp	#LR__0462
05cd0                 | LR__0369
05cd0     4A 7A 06 F6 | 	mov	result1, #74
05cd4     DC 02 90 FD | 	jmp	#LR__0462
05cd8                 | LR__0370
05cd8     48 7A 06 F6 | 	mov	result1, #72
05cdc     D4 02 90 FD | 	jmp	#LR__0462
05ce0                 | LR__0371
05ce0     48 7A 06 F6 | 	mov	result1, #72
05ce4     CC 02 90 FD | 	jmp	#LR__0462
05ce8                 | LR__0372
05ce8     BB 7A 06 F6 | 	mov	result1, #187
05cec     C4 02 90 FD | 	jmp	#LR__0462
05cf0                 | LR__0373
05cf0     A9 7A 06 F6 | 	mov	result1, #169
05cf4     BC 02 90 FD | 	jmp	#LR__0462
05cf8                 | LR__0374
05cf8     4E 7A 06 F6 | 	mov	result1, #78
05cfc     B4 02 90 FD | 	jmp	#LR__0462
05d00                 | LR__0375
05d00     4E 7A 06 F6 | 	mov	result1, #78
05d04     AC 02 90 FD | 	jmp	#LR__0462
05d08                 | LR__0376
05d08     58 7A 06 F6 | 	mov	result1, #88
05d0c     A4 02 90 FD | 	jmp	#LR__0462
05d10                 | LR__0377
05d10     5F 7A 06 F6 | 	mov	result1, #95
05d14     9C 02 90 FD | 	jmp	#LR__0462
05d18                 | LR__0378
05d18     5F 7A 06 F6 | 	mov	result1, #95
05d1c     94 02 90 FD | 	jmp	#LR__0462
05d20                 | LR__0379
05d20     B5 7A 06 F6 | 	mov	result1, #181
05d24     8C 02 90 FD | 	jmp	#LR__0462
05d28                 | LR__0380
05d28     4C 7A 06 F6 | 	mov	result1, #76
05d2c     84 02 90 FD | 	jmp	#LR__0462
05d30                 | LR__0381
05d30     4C 7A 06 F6 | 	mov	result1, #76
05d34     7C 02 90 FD | 	jmp	#LR__0462
05d38                 | LR__0382
05d38     52 7A 06 F6 | 	mov	result1, #82
05d3c     74 02 90 FD | 	jmp	#LR__0462
05d40                 | LR__0383
05d40     52 7A 06 F6 | 	mov	result1, #82
05d44     6C 02 90 FD | 	jmp	#LR__0462
05d48                 | LR__0384
05d48     97 7A 06 F6 | 	mov	result1, #151
05d4c     64 02 90 FD | 	jmp	#LR__0462
05d50                 | LR__0385
05d50     C6 7A 06 F6 | 	mov	result1, #198
05d54     5C 02 90 FD | 	jmp	#LR__0462
05d58                 | LR__0386
05d58     61 7A 06 F6 | 	mov	result1, #97
05d5c     54 02 90 FD | 	jmp	#LR__0462
05d60                 | LR__0387
05d60     61 7A 06 F6 | 	mov	result1, #97
05d64     4C 02 90 FD | 	jmp	#LR__0462
05d68                 | LR__0388
05d68     63 7A 06 F6 | 	mov	result1, #99
05d6c     44 02 90 FD | 	jmp	#LR__0462
05d70                 | LR__0389
05d70     41 7A 06 F6 | 	mov	result1, #65
05d74     3C 02 90 FD | 	jmp	#LR__0462
05d78                 | LR__0390
05d78     4B 7A 06 F6 | 	mov	result1, #75
05d7c     34 02 90 FD | 	jmp	#LR__0462
05d80                 | LR__0391
05d80     4B 7A 06 F6 | 	mov	result1, #75
05d84     2C 02 90 FD | 	jmp	#LR__0462
05d88                 | LR__0392
05d88     C1 7A 06 F6 | 	mov	result1, #193
05d8c     24 02 90 FD | 	jmp	#LR__0462
05d90                 | LR__0393
05d90     B3 7A 06 F6 | 	mov	result1, #179
05d94     1C 02 90 FD | 	jmp	#LR__0462
05d98                 | LR__0394
05d98     5E 7A 06 F6 | 	mov	result1, #94
05d9c     14 02 90 FD | 	jmp	#LR__0462
05da0                 | LR__0395
05da0     5E 7A 06 F6 | 	mov	result1, #94
05da4     0C 02 90 FD | 	jmp	#LR__0462
05da8                 | LR__0396
05da8     7C 7A 06 F6 | 	mov	result1, #124
05dac     04 02 90 FD | 	jmp	#LR__0462
05db0                 | LR__0397
05db0     7E 7A 06 F6 | 	mov	result1, #126
05db4     FC 01 90 FD | 	jmp	#LR__0462
05db8                 | LR__0398
05db8     7D 7A 06 F6 | 	mov	result1, #125
05dbc     F4 01 90 FD | 	jmp	#LR__0462
05dc0                 | LR__0399
05dc0     7F 7A 06 F6 | 	mov	result1, #127
05dc4     EC 01 90 FD | 	jmp	#LR__0462
05dc8                 | LR__0400
05dc8     80 7A 06 F6 | 	mov	result1, #128
05dcc     E4 01 90 FD | 	jmp	#LR__0462
05dd0                 | LR__0401
05dd0     55 7A 06 F6 | 	mov	result1, #85
05dd4     DC 01 90 FD | 	jmp	#LR__0462
05dd8                 | LR__0402
05dd8     75 7A 06 F6 | 	mov	result1, #117
05ddc     D4 01 90 FD | 	jmp	#LR__0462
05de0                 | LR__0403
05de0     75 7A 06 F6 | 	mov	result1, #117
05de4     CC 01 90 FD | 	jmp	#LR__0462
05de8                 | LR__0404
05de8     42 7A 06 F6 | 	mov	result1, #66
05dec     C4 01 90 FD | 	jmp	#LR__0462
05df0                 | LR__0405
05df0     42 7A 06 F6 | 	mov	result1, #66
05df4     BC 01 90 FD | 	jmp	#LR__0462
05df8                 | LR__0406
05df8     95 7A 06 F6 | 	mov	result1, #149
05dfc     B4 01 90 FD | 	jmp	#LR__0462
05e00                 | LR__0407
05e00     AC 7A 06 F6 | 	mov	result1, #172
05e04     AC 01 90 FD | 	jmp	#LR__0462
05e08                 | LR__0408
05e08     81 7A 06 F6 | 	mov	result1, #129
05e0c     A4 01 90 FD | 	jmp	#LR__0462
05e10                 | LR__0409
05e10     81 7A 06 F6 | 	mov	result1, #129
05e14     9C 01 90 FD | 	jmp	#LR__0462
05e18                 | LR__0410
05e18     44 7A 06 F6 | 	mov	result1, #68
05e1c     94 01 90 FD | 	jmp	#LR__0462
05e20                 | LR__0411
05e20     44 7A 06 F6 | 	mov	result1, #68
05e24     8C 01 90 FD | 	jmp	#LR__0462
05e28                 | LR__0412
05e28     BC 7A 06 F6 | 	mov	result1, #188
05e2c     84 01 90 FD | 	jmp	#LR__0462
05e30                 | LR__0413
05e30     88 7A 06 F6 | 	mov	result1, #136
05e34     7C 01 90 FD | 	jmp	#LR__0462
05e38                 | LR__0414
05e38     B6 7A 06 F6 | 	mov	result1, #182
05e3c     74 01 90 FD | 	jmp	#LR__0462
05e40                 | LR__0415
05e40     92 7A 06 F6 | 	mov	result1, #146
05e44     6C 01 90 FD | 	jmp	#LR__0462
05e48                 | LR__0416
05e48     BE 7A 06 F6 | 	mov	result1, #190
05e4c     64 01 90 FD | 	jmp	#LR__0462
05e50                 | LR__0417
05e50     BE 7A 06 F6 | 	mov	result1, #190
05e54     5C 01 90 FD | 	jmp	#LR__0462
05e58                 | LR__0418
05e58     C7 7A 06 F6 | 	mov	result1, #199
05e5c     54 01 90 FD | 	jmp	#LR__0462
05e60                 | LR__0419
05e60     D4 7A 06 F6 | 	mov	result1, #212
05e64     4C 01 90 FD | 	jmp	#LR__0462
05e68                 | LR__0420
05e68     D4 7A 06 F6 | 	mov	result1, #212
05e6c     44 01 90 FD | 	jmp	#LR__0462
05e70                 | LR__0421
05e70     AA 7A 06 F6 | 	mov	result1, #170
05e74     3C 01 90 FD | 	jmp	#LR__0462
05e78                 | LR__0422
05e78     4D 7A 06 F6 | 	mov	result1, #77
05e7c     34 01 90 FD | 	jmp	#LR__0462
05e80                 | LR__0423
05e80     4D 7A 06 F6 | 	mov	result1, #77
05e84     2C 01 90 FD | 	jmp	#LR__0462
05e88                 | LR__0424
05e88     51 7A 06 F6 | 	mov	result1, #81
05e8c     24 01 90 FD | 	jmp	#LR__0462
05e90                 | LR__0425
05e90     51 7A 06 F6 | 	mov	result1, #81
05e94     1C 01 90 FD | 	jmp	#LR__0462
05e98                 | LR__0426
05e98     D2 7A 06 F6 | 	mov	result1, #210
05e9c     14 01 90 FD | 	jmp	#LR__0462
05ea0                 | LR__0427
05ea0     D2 7A 06 F6 | 	mov	result1, #210
05ea4     0C 01 90 FD | 	jmp	#LR__0462
05ea8                 | LR__0428
05ea8     DA 7A 06 F6 | 	mov	result1, #218
05eac     04 01 90 FD | 	jmp	#LR__0462
05eb0                 | LR__0429
05eb0     DA 7A 06 F6 | 	mov	result1, #218
05eb4     FC 00 90 FD | 	jmp	#LR__0462
05eb8                 | LR__0430
05eb8     8E 7A 06 F6 | 	mov	result1, #142
05ebc     F4 00 90 FD | 	jmp	#LR__0462
05ec0                 | LR__0431
05ec0     8E 7A 06 F6 | 	mov	result1, #142
05ec4     EC 00 90 FD | 	jmp	#LR__0462
05ec8                 | LR__0432
05ec8     90 7A 06 F6 | 	mov	result1, #144
05ecc     E4 00 90 FD | 	jmp	#LR__0462
05ed0                 | LR__0433
05ed0     90 7A 06 F6 | 	mov	result1, #144
05ed4     DC 00 90 FD | 	jmp	#LR__0462
05ed8                 | LR__0434
05ed8     8D 7A 06 F6 | 	mov	result1, #141
05edc     D4 00 90 FD | 	jmp	#LR__0462
05ee0                 | LR__0435
05ee0     8D 7A 06 F6 | 	mov	result1, #141
05ee4     CC 00 90 FD | 	jmp	#LR__0462
05ee8                 | LR__0436
05ee8     8C 7A 06 F6 | 	mov	result1, #140
05eec     C4 00 90 FD | 	jmp	#LR__0462
05ef0                 | LR__0437
05ef0     8C 7A 06 F6 | 	mov	result1, #140
05ef4     BC 00 90 FD | 	jmp	#LR__0462
05ef8                 | LR__0438
05ef8     91 7A 06 F6 | 	mov	result1, #145
05efc     B4 00 90 FD | 	jmp	#LR__0462
05f00                 | LR__0439
05f00     91 7A 06 F6 | 	mov	result1, #145
05f04     AC 00 90 FD | 	jmp	#LR__0462
05f08                 | LR__0440
05f08     8B 7A 06 F6 | 	mov	result1, #139
05f0c     A4 00 90 FD | 	jmp	#LR__0462
05f10                 | LR__0441
05f10     8B 7A 06 F6 | 	mov	result1, #139
05f14     9C 00 90 FD | 	jmp	#LR__0462
05f18                 | LR__0442
05f18     8F 7A 06 F6 | 	mov	result1, #143
05f1c     94 00 90 FD | 	jmp	#LR__0462
05f20                 | LR__0443
05f20     8F 7A 06 F6 | 	mov	result1, #143
05f24     8C 00 90 FD | 	jmp	#LR__0462
05f28                 | LR__0444
05f28     8F 7A 06 F6 | 	mov	result1, #143
05f2c     84 00 90 FD | 	jmp	#LR__0462
05f30                 | LR__0445
05f30     B2 7A 06 F6 | 	mov	result1, #178
05f34     7C 00 90 FD | 	jmp	#LR__0462
05f38                 | LR__0446
05f38     B2 7A 06 F6 | 	mov	result1, #178
05f3c     74 00 90 FD | 	jmp	#LR__0462
05f40                 | LR__0447
05f40     75 7A 06 F6 | 	mov	result1, #117
05f44     6C 00 90 FD | 	jmp	#LR__0462
05f48                 | LR__0448
05f48     75 7A 06 F6 | 	mov	result1, #117
05f4c     64 00 90 FD | 	jmp	#LR__0462
05f50                 | LR__0449
05f50     6D 7A 06 F6 | 	mov	result1, #109
05f54     5C 00 90 FD | 	jmp	#LR__0462
05f58                 | LR__0450
05f58     6D 7A 06 F6 | 	mov	result1, #109
05f5c     54 00 90 FD | 	jmp	#LR__0462
05f60                 | LR__0451
05f60     5B 7A 06 F6 | 	mov	result1, #91
05f64     4C 00 90 FD | 	jmp	#LR__0462
05f68                 | LR__0452
05f68     56 7A 06 F6 | 	mov	result1, #86
05f6c     44 00 90 FD | 	jmp	#LR__0462
05f70                 | LR__0453
05f70     56 7A 06 F6 | 	mov	result1, #86
05f74     3C 00 90 FD | 	jmp	#LR__0462
05f78                 | LR__0454
05f78     70 7A 06 F6 | 	mov	result1, #112
05f7c     34 00 90 FD | 	jmp	#LR__0462
05f80                 | LR__0455
05f80     70 7A 06 F6 | 	mov	result1, #112
05f84     2C 00 90 FD | 	jmp	#LR__0462
05f88                 | LR__0456
05f88     57 7A 06 F6 | 	mov	result1, #87
05f8c     24 00 90 FD | 	jmp	#LR__0462
05f90                 | LR__0457
05f90     57 7A 06 F6 | 	mov	result1, #87
05f94     1C 00 90 FD | 	jmp	#LR__0462
05f98                 | LR__0458
05f98     79 7A 06 F6 | 	mov	result1, #121
05f9c     14 00 90 FD | 	jmp	#LR__0462
05fa0                 | LR__0459
05fa0     77 7A 06 F6 | 	mov	result1, #119
05fa4     0C 00 90 FD | 	jmp	#LR__0462
05fa8                 | LR__0460
05fa8     78 7A 06 F6 | 	mov	result1, #120
05fac     04 00 90 FD | 	jmp	#LR__0462
05fb0                 | LR__0461
05fb0     00 7A 06 F6 | 	mov	result1, #0
05fb4                 | LR__0462
05fb4     E7 F0 03 F6 | 	mov	ptra, fp
05fb8     F2 00 A0 FD | 	call	#popregs_
05fbc                 | _iscommand_ret
05fbc     2D 00 64 FD | 	ret
05fc0                 | 
05fc0                 | ' 
05fc0                 | ' ' Check if the part is a function than returns a value, return a token or 0 if not found
05fc0                 | ' 
05fc0                 | ' function isfunction(s as string) as ubyte
05fc0                 | _isfunction
05fc0     01 CA 05 F6 | 	mov	COUNT_, #1
05fc4     E8 00 A0 FD | 	call	#pushregs_
05fc8                 | ' 
05fc8                 | ' select case s
05fc8     49 A7 02 F6 | 	mov	local01, arg01
05fcc     96 01 00 FF 
05fd0     27 95 06 F6 | 	mov	arg02, ##@LR__5791
05fd4     53 93 02 F6 | 	mov	arg01, local01
05fd8     54 ED B1 FD | 	call	#__system___string_cmp
05fdc     00 7A 0E F2 | 	cmp	result1, #0 wz
05fe0     EC 05 90 AD |  if_e	jmp	#LR__0470
05fe4     96 01 00 FF 
05fe8     2B 95 06 F6 | 	mov	arg02, ##@LR__5792
05fec     53 93 02 F6 | 	mov	arg01, local01
05ff0     3C ED B1 FD | 	call	#__system___string_cmp
05ff4     00 7A 0E F2 | 	cmp	result1, #0 wz
05ff8     DC 05 90 AD |  if_e	jmp	#LR__0471
05ffc     96 01 00 FF 
06000     30 95 06 F6 | 	mov	arg02, ##@LR__5793
06004     53 93 02 F6 | 	mov	arg01, local01
06008     24 ED B1 FD | 	call	#__system___string_cmp
0600c     00 7A 0E F2 | 	cmp	result1, #0 wz
06010     CC 05 90 AD |  if_e	jmp	#LR__0472
06014     96 01 00 FF 
06018     34 95 06 F6 | 	mov	arg02, ##@LR__5794
0601c     53 93 02 F6 | 	mov	arg01, local01
06020     0C ED B1 FD | 	call	#__system___string_cmp
06024     00 7A 0E F2 | 	cmp	result1, #0 wz
06028     BC 05 90 AD |  if_e	jmp	#LR__0473
0602c     96 01 00 FF 
06030     39 95 06 F6 | 	mov	arg02, ##@LR__5795
06034     53 93 02 F6 | 	mov	arg01, local01
06038     F4 EC B1 FD | 	call	#__system___string_cmp
0603c     00 7A 0E F2 | 	cmp	result1, #0 wz
06040     AC 05 90 AD |  if_e	jmp	#LR__0474
06044     96 01 00 FF 
06048     3D 95 06 F6 | 	mov	arg02, ##@LR__5796
0604c     53 93 02 F6 | 	mov	arg01, local01
06050     DC EC B1 FD | 	call	#__system___string_cmp
06054     00 7A 0E F2 | 	cmp	result1, #0 wz
06058     9C 05 90 AD |  if_e	jmp	#LR__0475
0605c     96 01 00 FF 
06060     42 95 06 F6 | 	mov	arg02, ##@LR__5797
06064     53 93 02 F6 | 	mov	arg01, local01
06068     C4 EC B1 FD | 	call	#__system___string_cmp
0606c     00 7A 0E F2 | 	cmp	result1, #0 wz
06070     8C 05 90 AD |  if_e	jmp	#LR__0476
06074     96 01 00 FF 
06078     46 95 06 F6 | 	mov	arg02, ##@LR__5798
0607c     53 93 02 F6 | 	mov	arg01, local01
06080     AC EC B1 FD | 	call	#__system___string_cmp
06084     00 7A 0E F2 | 	cmp	result1, #0 wz
06088     7C 05 90 AD |  if_e	jmp	#LR__0477
0608c     96 01 00 FF 
06090     4B 95 06 F6 | 	mov	arg02, ##@LR__5799
06094     53 93 02 F6 | 	mov	arg01, local01
06098     94 EC B1 FD | 	call	#__system___string_cmp
0609c     00 7A 0E F2 | 	cmp	result1, #0 wz
060a0     6C 05 90 AD |  if_e	jmp	#LR__0478
060a4     96 01 00 FF 
060a8     50 95 06 F6 | 	mov	arg02, ##@LR__5800
060ac     53 93 02 F6 | 	mov	arg01, local01
060b0     7C EC B1 FD | 	call	#__system___string_cmp
060b4     00 7A 0E F2 | 	cmp	result1, #0 wz
060b8     5C 05 90 AD |  if_e	jmp	#LR__0479
060bc     96 01 00 FF 
060c0     58 95 06 F6 | 	mov	arg02, ##@LR__5801
060c4     53 93 02 F6 | 	mov	arg01, local01
060c8     64 EC B1 FD | 	call	#__system___string_cmp
060cc     00 7A 0E F2 | 	cmp	result1, #0 wz
060d0     4C 05 90 AD |  if_e	jmp	#LR__0480
060d4     96 01 00 FF 
060d8     5C 95 06 F6 | 	mov	arg02, ##@LR__5802
060dc     53 93 02 F6 | 	mov	arg01, local01
060e0     4C EC B1 FD | 	call	#__system___string_cmp
060e4     00 7A 0E F2 | 	cmp	result1, #0 wz
060e8     3C 05 90 AD |  if_e	jmp	#LR__0481
060ec     96 01 00 FF 
060f0     62 95 06 F6 | 	mov	arg02, ##@LR__5803
060f4     53 93 02 F6 | 	mov	arg01, local01
060f8     34 EC B1 FD | 	call	#__system___string_cmp
060fc     00 7A 0E F2 | 	cmp	result1, #0 wz
06100     2C 05 90 AD |  if_e	jmp	#LR__0482
06104     96 01 00 FF 
06108     6C 95 06 F6 | 	mov	arg02, ##@LR__5804
0610c     53 93 02 F6 | 	mov	arg01, local01
06110     1C EC B1 FD | 	call	#__system___string_cmp
06114     00 7A 0E F2 | 	cmp	result1, #0 wz
06118     1C 05 90 AD |  if_e	jmp	#LR__0483
0611c     96 01 00 FF 
06120     75 95 06 F6 | 	mov	arg02, ##@LR__5805
06124     53 93 02 F6 | 	mov	arg01, local01
06128     04 EC B1 FD | 	call	#__system___string_cmp
0612c     00 7A 0E F2 | 	cmp	result1, #0 wz
06130     0C 05 90 AD |  if_e	jmp	#LR__0484
06134     96 01 00 FF 
06138     7E 95 06 F6 | 	mov	arg02, ##@LR__5806
0613c     53 93 02 F6 | 	mov	arg01, local01
06140     EC EB B1 FD | 	call	#__system___string_cmp
06144     00 7A 0E F2 | 	cmp	result1, #0 wz
06148     FC 04 90 AD |  if_e	jmp	#LR__0485
0614c     96 01 00 FF 
06150     82 95 06 F6 | 	mov	arg02, ##@LR__5807
06154     53 93 02 F6 | 	mov	arg01, local01
06158     D4 EB B1 FD | 	call	#__system___string_cmp
0615c     00 7A 0E F2 | 	cmp	result1, #0 wz
06160     EC 04 90 AD |  if_e	jmp	#LR__0486
06164     96 01 00 FF 
06168     86 95 06 F6 | 	mov	arg02, ##@LR__5808
0616c     53 93 02 F6 | 	mov	arg01, local01
06170     BC EB B1 FD | 	call	#__system___string_cmp
06174     00 7A 0E F2 | 	cmp	result1, #0 wz
06178     DC 04 90 AD |  if_e	jmp	#LR__0487
0617c     96 01 00 FF 
06180     8A 95 06 F6 | 	mov	arg02, ##@LR__5809
06184     53 93 02 F6 | 	mov	arg01, local01
06188     A4 EB B1 FD | 	call	#__system___string_cmp
0618c     00 7A 0E F2 | 	cmp	result1, #0 wz
06190     CC 04 90 AD |  if_e	jmp	#LR__0488
06194     96 01 00 FF 
06198     93 95 06 F6 | 	mov	arg02, ##@LR__5810
0619c     53 93 02 F6 | 	mov	arg01, local01
061a0     8C EB B1 FD | 	call	#__system___string_cmp
061a4     00 7A 0E F2 | 	cmp	result1, #0 wz
061a8     BC 04 90 AD |  if_e	jmp	#LR__0489
061ac     96 01 00 FF 
061b0     9C 95 06 F6 | 	mov	arg02, ##@LR__5811
061b4     53 93 02 F6 | 	mov	arg01, local01
061b8     74 EB B1 FD | 	call	#__system___string_cmp
061bc     00 7A 0E F2 | 	cmp	result1, #0 wz
061c0     AC 04 90 AD |  if_e	jmp	#LR__0490
061c4     96 01 00 FF 
061c8     A0 95 06 F6 | 	mov	arg02, ##@LR__5812
061cc     53 93 02 F6 | 	mov	arg01, local01
061d0     5C EB B1 FD | 	call	#__system___string_cmp
061d4     00 7A 0E F2 | 	cmp	result1, #0 wz
061d8     9C 04 90 AD |  if_e	jmp	#LR__0491
061dc     96 01 00 FF 
061e0     AE 95 06 F6 | 	mov	arg02, ##@LR__5813
061e4     53 93 02 F6 | 	mov	arg01, local01
061e8     44 EB B1 FD | 	call	#__system___string_cmp
061ec     00 7A 0E F2 | 	cmp	result1, #0 wz
061f0     8C 04 90 AD |  if_e	jmp	#LR__0492
061f4     96 01 00 FF 
061f8     BB 95 06 F6 | 	mov	arg02, ##@LR__5814
061fc     53 93 02 F6 | 	mov	arg01, local01
06200     2C EB B1 FD | 	call	#__system___string_cmp
06204     00 7A 0E F2 | 	cmp	result1, #0 wz
06208     7C 04 90 AD |  if_e	jmp	#LR__0493
0620c     96 01 00 FF 
06210     C7 95 06 F6 | 	mov	arg02, ##@LR__5815
06214     53 93 02 F6 | 	mov	arg01, local01
06218     14 EB B1 FD | 	call	#__system___string_cmp
0621c     00 7A 0E F2 | 	cmp	result1, #0 wz
06220     6C 04 90 AD |  if_e	jmp	#LR__0494
06224     96 01 00 FF 
06228     CF 95 06 F6 | 	mov	arg02, ##@LR__5816
0622c     53 93 02 F6 | 	mov	arg01, local01
06230     FC EA B1 FD | 	call	#__system___string_cmp
06234     00 7A 0E F2 | 	cmp	result1, #0 wz
06238     5C 04 90 AD |  if_e	jmp	#LR__0495
0623c     96 01 00 FF 
06240     D3 95 06 F6 | 	mov	arg02, ##@LR__5817
06244     53 93 02 F6 | 	mov	arg01, local01
06248     E4 EA B1 FD | 	call	#__system___string_cmp
0624c     00 7A 0E F2 | 	cmp	result1, #0 wz
06250     4C 04 90 AD |  if_e	jmp	#LR__0496
06254     96 01 00 FF 
06258     D8 95 06 F6 | 	mov	arg02, ##@LR__5818
0625c     53 93 02 F6 | 	mov	arg01, local01
06260     CC EA B1 FD | 	call	#__system___string_cmp
06264     00 7A 0E F2 | 	cmp	result1, #0 wz
06268     3C 04 90 AD |  if_e	jmp	#LR__0497
0626c     96 01 00 FF 
06270     DF 95 06 F6 | 	mov	arg02, ##@LR__5819
06274     53 93 02 F6 | 	mov	arg01, local01
06278     B4 EA B1 FD | 	call	#__system___string_cmp
0627c     00 7A 0E F2 | 	cmp	result1, #0 wz
06280     2C 04 90 AD |  if_e	jmp	#LR__0498
06284     96 01 00 FF 
06288     E3 95 06 F6 | 	mov	arg02, ##@LR__5820
0628c     53 93 02 F6 | 	mov	arg01, local01
06290     9C EA B1 FD | 	call	#__system___string_cmp
06294     00 7A 0E F2 | 	cmp	result1, #0 wz
06298     1C 04 90 AD |  if_e	jmp	#LR__0499
0629c     96 01 00 FF 
062a0     E9 95 06 F6 | 	mov	arg02, ##@LR__5821
062a4     53 93 02 F6 | 	mov	arg01, local01
062a8     84 EA B1 FD | 	call	#__system___string_cmp
062ac     00 7A 0E F2 | 	cmp	result1, #0 wz
062b0     0C 04 90 AD |  if_e	jmp	#LR__0500
062b4     96 01 00 FF 
062b8     ED 95 06 F6 | 	mov	arg02, ##@LR__5822
062bc     53 93 02 F6 | 	mov	arg01, local01
062c0     6C EA B1 FD | 	call	#__system___string_cmp
062c4     00 7A 0E F2 | 	cmp	result1, #0 wz
062c8     FC 03 90 AD |  if_e	jmp	#LR__0501
062cc     96 01 00 FF 
062d0     F1 95 06 F6 | 	mov	arg02, ##@LR__5823
062d4     53 93 02 F6 | 	mov	arg01, local01
062d8     54 EA B1 FD | 	call	#__system___string_cmp
062dc     00 7A 0E F2 | 	cmp	result1, #0 wz
062e0     EC 03 90 AD |  if_e	jmp	#LR__0502
062e4     96 01 00 FF 
062e8     F7 95 06 F6 | 	mov	arg02, ##@LR__5824
062ec     53 93 02 F6 | 	mov	arg01, local01
062f0     3C EA B1 FD | 	call	#__system___string_cmp
062f4     00 7A 0E F2 | 	cmp	result1, #0 wz
062f8     DC 03 90 AD |  if_e	jmp	#LR__0503
062fc     96 01 00 FF 
06300     FE 95 06 F6 | 	mov	arg02, ##@LR__5825
06304     53 93 02 F6 | 	mov	arg01, local01
06308     24 EA B1 FD | 	call	#__system___string_cmp
0630c     00 7A 0E F2 | 	cmp	result1, #0 wz
06310     CC 03 90 AD |  if_e	jmp	#LR__0504
06314     97 01 00 FF 
06318     04 94 06 F6 | 	mov	arg02, ##@LR__5826
0631c     53 93 02 F6 | 	mov	arg01, local01
06320     0C EA B1 FD | 	call	#__system___string_cmp
06324     00 7A 0E F2 | 	cmp	result1, #0 wz
06328     BC 03 90 AD |  if_e	jmp	#LR__0505
0632c     97 01 00 FF 
06330     09 94 06 F6 | 	mov	arg02, ##@LR__5827
06334     53 93 02 F6 | 	mov	arg01, local01
06338     F4 E9 B1 FD | 	call	#__system___string_cmp
0633c     00 7A 0E F2 | 	cmp	result1, #0 wz
06340     AC 03 90 AD |  if_e	jmp	#LR__0506
06344     97 01 00 FF 
06348     10 94 06 F6 | 	mov	arg02, ##@LR__5828
0634c     53 93 02 F6 | 	mov	arg01, local01
06350     DC E9 B1 FD | 	call	#__system___string_cmp
06354     00 7A 0E F2 | 	cmp	result1, #0 wz
06358     9C 03 90 AD |  if_e	jmp	#LR__0507
0635c     97 01 00 FF 
06360     17 94 06 F6 | 	mov	arg02, ##@LR__5829
06364     53 93 02 F6 | 	mov	arg01, local01
06368     C4 E9 B1 FD | 	call	#__system___string_cmp
0636c     00 7A 0E F2 | 	cmp	result1, #0 wz
06370     8C 03 90 AD |  if_e	jmp	#LR__0508
06374     97 01 00 FF 
06378     1E 94 06 F6 | 	mov	arg02, ##@LR__5830
0637c     53 93 02 F6 | 	mov	arg01, local01
06380     AC E9 B1 FD | 	call	#__system___string_cmp
06384     00 7A 0E F2 | 	cmp	result1, #0 wz
06388     7C 03 90 AD |  if_e	jmp	#LR__0509
0638c     97 01 00 FF 
06390     25 94 06 F6 | 	mov	arg02, ##@LR__5831
06394     53 93 02 F6 | 	mov	arg01, local01
06398     94 E9 B1 FD | 	call	#__system___string_cmp
0639c     00 7A 0E F2 | 	cmp	result1, #0 wz
063a0     6C 03 90 AD |  if_e	jmp	#LR__0510
063a4     97 01 00 FF 
063a8     2A 94 06 F6 | 	mov	arg02, ##@LR__5832
063ac     53 93 02 F6 | 	mov	arg01, local01
063b0     7C E9 B1 FD | 	call	#__system___string_cmp
063b4     00 7A 0E F2 | 	cmp	result1, #0 wz
063b8     5C 03 90 AD |  if_e	jmp	#LR__0511
063bc     97 01 00 FF 
063c0     2F 94 06 F6 | 	mov	arg02, ##@LR__5833
063c4     53 93 02 F6 | 	mov	arg01, local01
063c8     64 E9 B1 FD | 	call	#__system___string_cmp
063cc     00 7A 0E F2 | 	cmp	result1, #0 wz
063d0     4C 03 90 AD |  if_e	jmp	#LR__0512
063d4     97 01 00 FF 
063d8     34 94 06 F6 | 	mov	arg02, ##@LR__5834
063dc     53 93 02 F6 | 	mov	arg01, local01
063e0     4C E9 B1 FD | 	call	#__system___string_cmp
063e4     00 7A 0E F2 | 	cmp	result1, #0 wz
063e8     3C 03 90 AD |  if_e	jmp	#LR__0513
063ec     97 01 00 FF 
063f0     39 94 06 F6 | 	mov	arg02, ##@LR__5835
063f4     53 93 02 F6 | 	mov	arg01, local01
063f8     34 E9 B1 FD | 	call	#__system___string_cmp
063fc     00 7A 0E F2 | 	cmp	result1, #0 wz
06400     2C 03 90 AD |  if_e	jmp	#LR__0514
06404     97 01 00 FF 
06408     3E 94 06 F6 | 	mov	arg02, ##@LR__5836
0640c     53 93 02 F6 | 	mov	arg01, local01
06410     1C E9 B1 FD | 	call	#__system___string_cmp
06414     00 7A 0E F2 | 	cmp	result1, #0 wz
06418     1C 03 90 AD |  if_e	jmp	#LR__0515
0641c     97 01 00 FF 
06420     44 94 06 F6 | 	mov	arg02, ##@LR__5837
06424     53 93 02 F6 | 	mov	arg01, local01
06428     04 E9 B1 FD | 	call	#__system___string_cmp
0642c     00 7A 0E F2 | 	cmp	result1, #0 wz
06430     0C 03 90 AD |  if_e	jmp	#LR__0516
06434     97 01 00 FF 
06438     4A 94 06 F6 | 	mov	arg02, ##@LR__5838
0643c     53 93 02 F6 | 	mov	arg01, local01
06440     EC E8 B1 FD | 	call	#__system___string_cmp
06444     00 7A 0E F2 | 	cmp	result1, #0 wz
06448     FC 02 90 AD |  if_e	jmp	#LR__0517
0644c     97 01 00 FF 
06450     50 94 06 F6 | 	mov	arg02, ##@LR__5839
06454     53 93 02 F6 | 	mov	arg01, local01
06458     D4 E8 B1 FD | 	call	#__system___string_cmp
0645c     00 7A 0E F2 | 	cmp	result1, #0 wz
06460     EC 02 90 AD |  if_e	jmp	#LR__0518
06464     97 01 00 FF 
06468     55 94 06 F6 | 	mov	arg02, ##@LR__5840
0646c     53 93 02 F6 | 	mov	arg01, local01
06470     BC E8 B1 FD | 	call	#__system___string_cmp
06474     00 7A 0E F2 | 	cmp	result1, #0 wz
06478     DC 02 90 AD |  if_e	jmp	#LR__0519
0647c     97 01 00 FF 
06480     5A 94 06 F6 | 	mov	arg02, ##@LR__5841
06484     53 93 02 F6 | 	mov	arg01, local01
06488     A4 E8 B1 FD | 	call	#__system___string_cmp
0648c     00 7A 0E F2 | 	cmp	result1, #0 wz
06490     CC 02 90 AD |  if_e	jmp	#LR__0520
06494     97 01 00 FF 
06498     62 94 06 F6 | 	mov	arg02, ##@LR__5842
0649c     53 93 02 F6 | 	mov	arg01, local01
064a0     8C E8 B1 FD | 	call	#__system___string_cmp
064a4     00 7A 0E F2 | 	cmp	result1, #0 wz
064a8     BC 02 90 AD |  if_e	jmp	#LR__0521
064ac     97 01 00 FF 
064b0     68 94 06 F6 | 	mov	arg02, ##@LR__5843
064b4     53 93 02 F6 | 	mov	arg01, local01
064b8     74 E8 B1 FD | 	call	#__system___string_cmp
064bc     00 7A 0E F2 | 	cmp	result1, #0 wz
064c0     AC 02 90 AD |  if_e	jmp	#LR__0522
064c4     97 01 00 FF 
064c8     6F 94 06 F6 | 	mov	arg02, ##@LR__5844
064cc     53 93 02 F6 | 	mov	arg01, local01
064d0     5C E8 B1 FD | 	call	#__system___string_cmp
064d4     00 7A 0E F2 | 	cmp	result1, #0 wz
064d8     9C 02 90 AD |  if_e	jmp	#LR__0523
064dc     97 01 00 FF 
064e0     75 94 06 F6 | 	mov	arg02, ##@LR__5845
064e4     53 93 02 F6 | 	mov	arg01, local01
064e8     44 E8 B1 FD | 	call	#__system___string_cmp
064ec     00 7A 0E F2 | 	cmp	result1, #0 wz
064f0     8C 02 90 AD |  if_e	jmp	#LR__0524
064f4     97 01 00 FF 
064f8     7B 94 06 F6 | 	mov	arg02, ##@LR__5846
064fc     53 93 02 F6 | 	mov	arg01, local01
06500     2C E8 B1 FD | 	call	#__system___string_cmp
06504     00 7A 0E F2 | 	cmp	result1, #0 wz
06508     7C 02 90 AD |  if_e	jmp	#LR__0525
0650c     97 01 00 FF 
06510     7F 94 06 F6 | 	mov	arg02, ##@LR__5847
06514     53 93 02 F6 | 	mov	arg01, local01
06518     14 E8 B1 FD | 	call	#__system___string_cmp
0651c     00 7A 0E F2 | 	cmp	result1, #0 wz
06520     6C 02 90 AD |  if_e	jmp	#LR__0526
06524     97 01 00 FF 
06528     83 94 06 F6 | 	mov	arg02, ##@LR__5848
0652c     53 93 02 F6 | 	mov	arg01, local01
06530     FC E7 B1 FD | 	call	#__system___string_cmp
06534     00 7A 0E F2 | 	cmp	result1, #0 wz
06538     5C 02 90 AD |  if_e	jmp	#LR__0527
0653c     97 01 00 FF 
06540     87 94 06 F6 | 	mov	arg02, ##@LR__5849
06544     53 93 02 F6 | 	mov	arg01, local01
06548     E4 E7 B1 FD | 	call	#__system___string_cmp
0654c     00 7A 0E F2 | 	cmp	result1, #0 wz
06550     4C 02 90 AD |  if_e	jmp	#LR__0528
06554     97 01 00 FF 
06558     8D 94 06 F6 | 	mov	arg02, ##@LR__5850
0655c     53 93 02 F6 | 	mov	arg01, local01
06560     CC E7 B1 FD | 	call	#__system___string_cmp
06564     00 7A 0E F2 | 	cmp	result1, #0 wz
06568     3C 02 90 AD |  if_e	jmp	#LR__0529
0656c     97 01 00 FF 
06570     93 94 06 F6 | 	mov	arg02, ##@LR__5851
06574     53 93 02 F6 | 	mov	arg01, local01
06578     B4 E7 B1 FD | 	call	#__system___string_cmp
0657c     00 7A 0E F2 | 	cmp	result1, #0 wz
06580     2C 02 90 AD |  if_e	jmp	#LR__0530
06584     97 01 00 FF 
06588     98 94 06 F6 | 	mov	arg02, ##@LR__5852
0658c     53 93 02 F6 | 	mov	arg01, local01
06590     9C E7 B1 FD | 	call	#__system___string_cmp
06594     00 7A 0E F2 | 	cmp	result1, #0 wz
06598     1C 02 90 AD |  if_e	jmp	#LR__0531
0659c     97 01 00 FF 
065a0     9C 94 06 F6 | 	mov	arg02, ##@LR__5853
065a4     53 93 02 F6 | 	mov	arg01, local01
065a8     84 E7 B1 FD | 	call	#__system___string_cmp
065ac     00 7A 0E F2 | 	cmp	result1, #0 wz
065b0     0C 02 90 AD |  if_e	jmp	#LR__0532
065b4     97 01 00 FF 
065b8     A0 94 06 F6 | 	mov	arg02, ##@LR__5854
065bc     53 93 02 F6 | 	mov	arg01, local01
065c0     6C E7 B1 FD | 	call	#__system___string_cmp
065c4     00 7A 0E F2 | 	cmp	result1, #0 wz
065c8     FC 01 90 AD |  if_e	jmp	#LR__0533
065cc     00 02 90 FD | 	jmp	#LR__0534
065d0                 | LR__0470
065d0     9E 7A 06 F6 | 	mov	result1, #158
065d4     FC 01 90 FD | 	jmp	#LR__0535
065d8                 | LR__0471
065d8     85 7A 06 F6 | 	mov	result1, #133
065dc     F4 01 90 FD | 	jmp	#LR__0535
065e0                 | LR__0472
065e0     9B 7A 06 F6 | 	mov	result1, #155
065e4     EC 01 90 FD | 	jmp	#LR__0535
065e8                 | LR__0473
065e8     9B 7A 06 F6 | 	mov	result1, #155
065ec     E4 01 90 FD | 	jmp	#LR__0535
065f0                 | LR__0474
065f0     A7 7A 06 F6 | 	mov	result1, #167
065f4     DC 01 90 FD | 	jmp	#LR__0535
065f8                 | LR__0475
065f8     84 7A 06 F6 | 	mov	result1, #132
065fc     D4 01 90 FD | 	jmp	#LR__0535
06600                 | LR__0476
06600     86 7A 06 F6 | 	mov	result1, #134
06604     CC 01 90 FD | 	jmp	#LR__0535
06608                 | LR__0477
06608     A2 7A 06 F6 | 	mov	result1, #162
0660c     C4 01 90 FD | 	jmp	#LR__0535
06610                 | LR__0478
06610     9F 7A 06 F6 | 	mov	result1, #159
06614     BC 01 90 FD | 	jmp	#LR__0535
06618                 | LR__0479
06618     C0 7A 06 F6 | 	mov	result1, #192
0661c     B4 01 90 FD | 	jmp	#LR__0535
06620                 | LR__0480
06620     82 7A 06 F6 | 	mov	result1, #130
06624     AC 01 90 FD | 	jmp	#LR__0535
06628                 | LR__0481
06628     99 7A 06 F6 | 	mov	result1, #153
0662c     A4 01 90 FD | 	jmp	#LR__0535
06630                 | LR__0482
06630     D7 7A 06 F6 | 	mov	result1, #215
06634     9C 01 90 FD | 	jmp	#LR__0535
06638                 | LR__0483
06638     D8 7A 06 F6 | 	mov	result1, #216
0663c     94 01 90 FD | 	jmp	#LR__0535
06640                 | LR__0484
06640     C5 7A 06 F6 | 	mov	result1, #197
06644     8C 01 90 FD | 	jmp	#LR__0535
06648                 | LR__0485
06648     C5 7A 06 F6 | 	mov	result1, #197
0664c     84 01 90 FD | 	jmp	#LR__0535
06650                 | LR__0486
06650     9C 7A 06 F6 | 	mov	result1, #156
06654     7C 01 90 FD | 	jmp	#LR__0535
06658                 | LR__0487
06658     D3 7A 06 F6 | 	mov	result1, #211
0665c     74 01 90 FD | 	jmp	#LR__0535
06660                 | LR__0488
06660     D3 7A 06 F6 | 	mov	result1, #211
06664     6C 01 90 FD | 	jmp	#LR__0535
06668                 | LR__0489
06668     6F 7A 06 F6 | 	mov	result1, #111
0666c     64 01 90 FD | 	jmp	#LR__0535
06670                 | LR__0490
06670     6F 7A 06 F6 | 	mov	result1, #111
06674     5C 01 90 FD | 	jmp	#LR__0535
06678                 | LR__0491
06678     93 7A 06 F6 | 	mov	result1, #147
0667c     54 01 90 FD | 	jmp	#LR__0535
06680                 | LR__0492
06680     94 7A 06 F6 | 	mov	result1, #148
06684     4C 01 90 FD | 	jmp	#LR__0535
06688                 | LR__0493
06688     DB 7A 06 F6 | 	mov	result1, #219
0668c     44 01 90 FD | 	jmp	#LR__0535
06690                 | LR__0494
06690     62 7A 06 F6 | 	mov	result1, #98
06694     3C 01 90 FD | 	jmp	#LR__0535
06698                 | LR__0495
06698     62 7A 06 F6 | 	mov	result1, #98
0669c     34 01 90 FD | 	jmp	#LR__0535
066a0                 | LR__0496
066a0     A3 7A 06 F6 | 	mov	result1, #163
066a4     2C 01 90 FD | 	jmp	#LR__0535
066a8                 | LR__0497
066a8     9D 7A 06 F6 | 	mov	result1, #157
066ac     24 01 90 FD | 	jmp	#LR__0535
066b0                 | LR__0498
066b0     8A 7A 06 F6 | 	mov	result1, #138
066b4     1C 01 90 FD | 	jmp	#LR__0535
066b8                 | LR__0499
066b8     A4 7A 06 F6 | 	mov	result1, #164
066bc     14 01 90 FD | 	jmp	#LR__0535
066c0                 | LR__0500
066c0     A8 7A 06 F6 | 	mov	result1, #168
066c4     0C 01 90 FD | 	jmp	#LR__0535
066c8                 | LR__0501
066c8     AD 7A 06 F6 | 	mov	result1, #173
066cc     04 01 90 FD | 	jmp	#LR__0535
066d0                 | LR__0502
066d0     9A 7A 06 F6 | 	mov	result1, #154
066d4     FC 00 90 FD | 	jmp	#LR__0535
066d8                 | LR__0503
066d8     D1 7A 06 F6 | 	mov	result1, #209
066dc     F4 00 90 FD | 	jmp	#LR__0535
066e0                 | LR__0504
066e0     D0 7A 06 F6 | 	mov	result1, #208
066e4     EC 00 90 FD | 	jmp	#LR__0535
066e8                 | LR__0505
066e8     A6 7A 06 F6 | 	mov	result1, #166
066ec     E4 00 90 FD | 	jmp	#LR__0535
066f0                 | LR__0506
066f0     66 7A 06 F6 | 	mov	result1, #102
066f4     DC 00 90 FD | 	jmp	#LR__0535
066f8                 | LR__0507
066f8     67 7A 06 F6 | 	mov	result1, #103
066fc     D4 00 90 FD | 	jmp	#LR__0535
06700                 | LR__0508
06700     64 7A 06 F6 | 	mov	result1, #100
06704     CC 00 90 FD | 	jmp	#LR__0535
06708                 | LR__0509
06708     65 7A 06 F6 | 	mov	result1, #101
0670c     C4 00 90 FD | 	jmp	#LR__0535
06710                 | LR__0510
06710     D5 7A 06 F6 | 	mov	result1, #213
06714     BC 00 90 FD | 	jmp	#LR__0535
06718                 | LR__0511
06718     D6 7A 06 F6 | 	mov	result1, #214
0671c     B4 00 90 FD | 	jmp	#LR__0535
06720                 | LR__0512
06720     C8 7A 06 F6 | 	mov	result1, #200
06724     AC 00 90 FD | 	jmp	#LR__0535
06728                 | LR__0513
06728     C9 7A 06 F6 | 	mov	result1, #201
0672c     A4 00 90 FD | 	jmp	#LR__0535
06730                 | LR__0514
06730     CA 7A 06 F6 | 	mov	result1, #202
06734     9C 00 90 FD | 	jmp	#LR__0535
06738                 | LR__0515
06738     CC 7A 06 F6 | 	mov	result1, #204
0673c     94 00 90 FD | 	jmp	#LR__0535
06740                 | LR__0516
06740     CD 7A 06 F6 | 	mov	result1, #205
06744     8C 00 90 FD | 	jmp	#LR__0535
06748                 | LR__0517
06748     CE 7A 06 F6 | 	mov	result1, #206
0674c     84 00 90 FD | 	jmp	#LR__0535
06750                 | LR__0518
06750     CB 7A 06 F6 | 	mov	result1, #203
06754     7C 00 90 FD | 	jmp	#LR__0535
06758                 | LR__0519
06758     98 7A 06 F6 | 	mov	result1, #152
0675c     74 00 90 FD | 	jmp	#LR__0535
06760                 | LR__0520
06760     7B 7A 06 F6 | 	mov	result1, #123
06764     6C 00 90 FD | 	jmp	#LR__0535
06768                 | LR__0521
06768     76 7A 06 F6 | 	mov	result1, #118
0676c     64 00 90 FD | 	jmp	#LR__0535
06770                 | LR__0522
06770     A5 7A 06 F6 | 	mov	result1, #165
06774     5C 00 90 FD | 	jmp	#LR__0535
06778                 | LR__0523
06778     7A 7A 06 F6 | 	mov	result1, #122
0677c     54 00 90 FD | 	jmp	#LR__0535
06780                 | LR__0524
06780     BF 7A 06 F6 | 	mov	result1, #191
06784     4C 00 90 FD | 	jmp	#LR__0535
06788                 | LR__0525
06788     54 7A 06 F6 | 	mov	result1, #84
0678c     44 00 90 FD | 	jmp	#LR__0535
06790                 | LR__0526
06790     6B 7A 06 F6 | 	mov	result1, #107
06794     3C 00 90 FD | 	jmp	#LR__0535
06798                 | LR__0527
06798     87 7A 06 F6 | 	mov	result1, #135
0679c     34 00 90 FD | 	jmp	#LR__0535
067a0                 | LR__0528
067a0     6A 7A 06 F6 | 	mov	result1, #106
067a4     2C 00 90 FD | 	jmp	#LR__0535
067a8                 | LR__0529
067a8     6E 7A 06 F6 | 	mov	result1, #110
067ac     24 00 90 FD | 	jmp	#LR__0535
067b0                 | LR__0530
067b0     A1 7A 06 F6 | 	mov	result1, #161
067b4     1C 00 90 FD | 	jmp	#LR__0535
067b8                 | LR__0531
067b8     83 7A 06 F6 | 	mov	result1, #131
067bc     14 00 90 FD | 	jmp	#LR__0535
067c0                 | LR__0532
067c0     A0 7A 06 F6 | 	mov	result1, #160
067c4     0C 00 90 FD | 	jmp	#LR__0535
067c8                 | LR__0533
067c8     9B 7A 06 F6 | 	mov	result1, #155
067cc     04 00 90 FD | 	jmp	#LR__0535
067d0                 | LR__0534
067d0     00 7A 06 F6 | 	mov	result1, #0
067d4                 | LR__0535
067d4     E7 F0 03 F6 | 	mov	ptra, fp
067d8     F2 00 A0 FD | 	call	#popregs_
067dc                 | _isfunction_ret
067dc     2D 00 64 FD | 	ret
067e0                 | 
067e0                 | ' 
067e0                 | ' ' Check if the part is a name
067e0                 | ' 
067e0                 | ' function isname(s as string) as boolean
067e0                 | _isname
067e0     0D CA 05 F6 | 	mov	COUNT_, #13
067e4     E8 00 A0 FD | 	call	#pushregs_
067e8     49 A7 02 F6 | 	mov	local01, arg01
067ec     49 A9 02 F6 | 	mov	local02, arg01
067f0     D7 06 48 FB | 	callpa	#(@LR__0541-@LR__0540)>>2,fcache_load_ptr_
067f4                 | LR__0540
067f4     54 7B CA FA | 	rdbyte	result1, local02 wz
067f8     01 A8 06 51 |  if_ne	add	local02, #1
067fc     F4 FF 9F 5D |  if_ne	jmp	#LR__0540
06800                 | LR__0541
06800     49 A9 82 F1 | 	sub	local02, arg01
06804     54 7B 02 F6 | 	mov	result1, local02
06808     3D AB 0A F6 | 	mov	local03, result1 wz
0680c     00 7A 06 A6 |  if_e	mov	result1, #0
06810     34 02 90 AD |  if_e	jmp	#LR__0553
06814     53 93 02 F6 | 	mov	arg01, local01
06818     01 94 06 F6 | 	mov	arg02, #1
0681c     01 96 06 F6 | 	mov	arg03, #1
06820     A4 FE B1 FD | 	call	#__system__Mid_S
06824     3D AD 02 F6 | 	mov	local04, result1
06828                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
06828     97 01 00 FF 
0682c     A7 94 06 F6 | 	mov	arg02, ##@LR__5855
06830     56 93 02 F6 | 	mov	arg01, local04
06834     F8 E4 B1 FD | 	call	#__system___string_cmp
06838     00 7A 56 F2 | 	cmps	result1, #0 wc
0683c     18 00 90 CD |  if_b	jmp	#LR__0542
06840     97 01 00 FF 
06844     A9 94 06 F6 | 	mov	arg02, ##@LR__5856
06848     56 93 02 F6 | 	mov	arg01, local04
0684c     E0 E4 B1 FD | 	call	#__system___string_cmp
06850     01 7A 56 F2 | 	cmps	result1, #1 wc
06854     1C 00 90 CD |  if_b	jmp	#LR__0543
06858                 | LR__0542
06858     97 01 00 FF 
0685c     AB 94 06 F6 | 	mov	arg02, ##@LR__5857
06860     56 93 02 F6 | 	mov	arg01, local04
06864     C8 E4 B1 FD | 	call	#__system___string_cmp
06868     00 7A 0E F2 | 	cmp	result1, #0 wz
0686c     00 7A 06 56 |  if_ne	mov	result1, #0
06870     D4 01 90 5D |  if_ne	jmp	#LR__0553
06874                 | LR__0543
06874                 | ' if l>2 then 
06874     03 AA 56 F2 | 	cmps	local03, #3 wc
06878     C8 01 90 CD |  if_b	jmp	#LR__0552
0687c                 | '   for i=2 to l
0687c     02 AE 06 F6 | 	mov	local05, #2
06880     55 B1 02 F6 | 	mov	local06, local03
06884     01 B0 06 F1 | 	add	local06, #1
06888                 | LR__0544
06888     58 AF 52 F2 | 	cmps	local05, local06 wc
0688c     B4 01 90 3D |  if_ae	jmp	#LR__0551
06890     53 93 02 F6 | 	mov	arg01, local01
06894     57 95 02 F6 | 	mov	arg02, local05
06898     01 96 06 F6 | 	mov	arg03, #1
0689c     28 FE B1 FD | 	call	#__system__Mid_S
068a0     3D AD 02 F6 | 	mov	local04, result1
068a4                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false 
068a4     55 AF 52 F2 | 	cmps	local05, local03 wc
068a8     9C 00 90 3D |  if_ae	jmp	#LR__0547
068ac     97 01 00 FF 
068b0     AD 94 06 F6 | 	mov	arg02, ##@LR__5858
068b4     56 93 02 F6 | 	mov	arg01, local04
068b8     74 E4 B1 FD | 	call	#__system___string_cmp
068bc     00 7A 56 F2 | 	cmps	result1, #0 wc
068c0     18 00 90 CD |  if_b	jmp	#LR__0545
068c4     97 01 00 FF 
068c8     AF 94 06 F6 | 	mov	arg02, ##@LR__5859
068cc     56 93 02 F6 | 	mov	arg01, local04
068d0     5C E4 B1 FD | 	call	#__system___string_cmp
068d4     01 7A 56 F2 | 	cmps	result1, #1 wc
068d8     6C 00 90 CD |  if_b	jmp	#LR__0547
068dc                 | LR__0545
068dc     97 01 00 FF 
068e0     B1 94 06 F6 | 	mov	arg02, ##@LR__5860
068e4     56 93 02 F6 | 	mov	arg01, local04
068e8     44 E4 B1 FD | 	call	#__system___string_cmp
068ec     00 7A 56 F2 | 	cmps	result1, #0 wc
068f0     18 00 90 CD |  if_b	jmp	#LR__0546
068f4     97 01 00 FF 
068f8     B3 94 06 F6 | 	mov	arg02, ##@LR__5861
068fc     56 93 02 F6 | 	mov	arg01, local04
06900     2C E4 B1 FD | 	call	#__system___string_cmp
06904     01 7A 56 F2 | 	cmps	result1, #1 wc
06908     3C 00 90 CD |  if_b	jmp	#LR__0547
0690c                 | LR__0546
0690c     97 01 00 FF 
06910     B5 B2 06 F6 | 	mov	local07, ##@LR__5862
06914     56 93 02 F6 | 	mov	arg01, local04
06918     59 95 02 F6 | 	mov	arg02, local07
0691c     10 E4 B1 FD | 	call	#__system___string_cmp
06920     00 7A 0E F2 | 	cmp	result1, #0 wz
06924     20 00 90 AD |  if_e	jmp	#LR__0547
06928     97 01 00 FF 
0692c     B7 B4 06 F6 | 	mov	local08, ##@LR__5863
06930     56 93 02 F6 | 	mov	arg01, local04
06934     5A 95 02 F6 | 	mov	arg02, local08
06938     F4 E3 B1 FD | 	call	#__system___string_cmp
0693c     3D B7 0A F6 | 	mov	local09, result1 wz
06940     00 7A 06 56 |  if_ne	mov	result1, #0
06944     00 01 90 5D |  if_ne	jmp	#LR__0553
06948                 | LR__0547
06948                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
06948     55 AF 0A F2 | 	cmp	local05, local03 wz
0694c     EC 00 90 5D |  if_ne	jmp	#LR__0550
06950     97 01 00 FF 
06954     B9 B8 06 F6 | 	mov	local10, ##@LR__5864
06958     56 93 02 F6 | 	mov	arg01, local04
0695c     5C 95 02 F6 | 	mov	arg02, local10
06960     CC E3 B1 FD | 	call	#__system___string_cmp
06964     3D BB 02 F6 | 	mov	local11, result1
06968     00 BA 56 F2 | 	cmps	local11, #0 wc
0696c     1C 00 90 CD |  if_b	jmp	#LR__0548
06970     97 01 00 FF 
06974     BB 94 06 F6 | 	mov	arg02, ##@LR__5865
06978     56 93 02 F6 | 	mov	arg01, local04
0697c     B0 E3 B1 FD | 	call	#__system___string_cmp
06980     3D B9 02 F6 | 	mov	local10, result1
06984     01 B8 56 F2 | 	cmps	local10, #1 wc
06988     B0 00 90 CD |  if_b	jmp	#LR__0550
0698c                 | LR__0548
0698c     97 01 00 FF 
06990     BD 94 06 F6 | 	mov	arg02, ##@LR__5866
06994     56 93 02 F6 | 	mov	arg01, local04
06998     94 E3 B1 FD | 	call	#__system___string_cmp
0699c     00 7A 56 F2 | 	cmps	result1, #0 wc
069a0     1C 00 90 CD |  if_b	jmp	#LR__0549
069a4     97 01 00 FF 
069a8     BF B6 06 F6 | 	mov	local09, ##@LR__5867
069ac     56 93 02 F6 | 	mov	arg01, local04
069b0     5B 95 02 F6 | 	mov	arg02, local09
069b4     78 E3 B1 FD | 	call	#__system___string_cmp
069b8     01 7A 56 F2 | 	cmps	result1, #1 wc
069bc     7C 00 90 CD |  if_b	jmp	#LR__0550
069c0                 | LR__0549
069c0     97 01 00 FF 
069c4     C1 B6 06 F6 | 	mov	local09, ##@LR__5868
069c8     56 93 02 F6 | 	mov	arg01, local04
069cc     5B 95 02 F6 | 	mov	arg02, local09
069d0     5C E3 B1 FD | 	call	#__system___string_cmp
069d4     00 7A 4E F2 | 	cmps	result1, #0 wz
069d8     60 00 90 AD |  if_e	jmp	#LR__0550
069dc     97 01 00 FF 
069e0     C3 B4 06 F6 | 	mov	local08, ##@LR__5869
069e4     56 93 02 F6 | 	mov	arg01, local04
069e8     5A 95 02 F6 | 	mov	arg02, local08
069ec     40 E3 B1 FD | 	call	#__system___string_cmp
069f0     3D B7 0A F6 | 	mov	local09, result1 wz
069f4     44 00 90 AD |  if_e	jmp	#LR__0550
069f8     97 01 00 FF 
069fc     C5 BC 06 F6 | 	mov	local12, ##@LR__5870
06a00     5E B5 02 F6 | 	mov	local08, local12
06a04     56 93 02 F6 | 	mov	arg01, local04
06a08     5A 95 02 F6 | 	mov	arg02, local08
06a0c     20 E3 B1 FD | 	call	#__system___string_cmp
06a10     3D B3 0A F6 | 	mov	local07, result1 wz
06a14     24 00 90 AD |  if_e	jmp	#LR__0550
06a18     97 01 00 FF 
06a1c     C7 BE 06 F6 | 	mov	local13, ##@LR__5871
06a20     5F BD 02 F6 | 	mov	local12, local13
06a24     56 93 02 F6 | 	mov	arg01, local04
06a28     5E 95 02 F6 | 	mov	arg02, local12
06a2c     00 E3 B1 FD | 	call	#__system___string_cmp
06a30     3D B5 0A F6 | 	mov	local08, result1 wz
06a34     00 7A 06 56 |  if_ne	mov	result1, #0
06a38     0C 00 90 5D |  if_ne	jmp	#LR__0553
06a3c                 | LR__0550
06a3c     01 AE 06 F1 | 	add	local05, #1
06a40     44 FE 9F FD | 	jmp	#LR__0544
06a44                 | LR__0551
06a44                 | LR__0552
06a44                 | ' return true
06a44     01 7A 66 F6 | 	neg	result1, #1
06a48                 | LR__0553
06a48     E7 F0 03 F6 | 	mov	ptra, fp
06a4c     F2 00 A0 FD | 	call	#popregs_
06a50                 | _isname_ret
06a50     2D 00 64 FD | 	ret
06a54                 | 
06a54                 | ' 
06a54                 | ' ' Check if the part is a number.  
06a54                 | ' 
06a54                 | ' function isnum(s as string) as boolean 
06a54                 | _isnum
06a54     13 CA 05 F6 | 	mov	COUNT_, #19
06a58     E8 00 A0 FD | 	call	#pushregs_
06a5c     49 A7 02 F6 | 	mov	local01, arg01
06a60     00 A8 06 F6 | 	mov	local02, #0
06a64     00 AA 06 F6 | 	mov	local03, #0
06a68     53 93 02 F6 | 	mov	arg01, local01
06a6c     49 AD 02 F6 | 	mov	local04, arg01
06a70     D7 06 48 FB | 	callpa	#(@LR__0561-@LR__0560)>>2,fcache_load_ptr_
06a74                 | LR__0560
06a74     56 7B CA FA | 	rdbyte	result1, local04 wz
06a78     01 AC 06 51 |  if_ne	add	local04, #1
06a7c     F4 FF 9F 5D |  if_ne	jmp	#LR__0560
06a80                 | LR__0561
06a80     49 AD 82 F1 | 	sub	local04, arg01
06a84     56 7B 02 F6 | 	mov	result1, local04
06a88     3D AF 0A F6 | 	mov	local05, result1 wz
06a8c     00 7A 06 A6 |  if_e	mov	result1, #0
06a90     A0 03 90 AD |  if_e	jmp	#LR__0576
06a94     53 93 02 F6 | 	mov	arg01, local01
06a98     01 94 06 F6 | 	mov	arg02, #1
06a9c     01 96 06 F6 | 	mov	arg03, #1
06aa0     24 FC B1 FD | 	call	#__system__Mid_S
06aa4     3D B1 02 F6 | 	mov	local06, result1
06aa8                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
06aa8     97 01 00 FF 
06aac     C9 94 06 F6 | 	mov	arg02, ##@LR__5872
06ab0     58 93 02 F6 | 	mov	arg01, local06
06ab4     78 E2 B1 FD | 	call	#__system___string_cmp
06ab8     00 7A 56 F2 | 	cmps	result1, #0 wc
06abc     1C 00 90 CD |  if_b	jmp	#LR__0562
06ac0     97 01 00 FF 
06ac4     CB B2 06 F6 | 	mov	local07, ##@LR__5873
06ac8     58 93 02 F6 | 	mov	arg01, local06
06acc     59 95 02 F6 | 	mov	arg02, local07
06ad0     5C E2 B1 FD | 	call	#__system___string_cmp
06ad4     01 7A 56 F2 | 	cmps	result1, #1 wc
06ad8     84 00 90 CD |  if_b	jmp	#LR__0563
06adc                 | LR__0562
06adc     97 01 00 FF 
06ae0     CD B4 06 F6 | 	mov	local08, ##@LR__5874
06ae4     5A B3 02 F6 | 	mov	local07, local08
06ae8     58 93 02 F6 | 	mov	arg01, local06
06aec     59 95 02 F6 | 	mov	arg02, local07
06af0     3C E2 B1 FD | 	call	#__system___string_cmp
06af4     00 7A 0E F2 | 	cmp	result1, #0 wz
06af8     64 00 90 AD |  if_e	jmp	#LR__0563
06afc     97 01 00 FF 
06b00     CF B6 06 F6 | 	mov	local09, ##@LR__5875
06b04     5B B5 02 F6 | 	mov	local08, local09
06b08     58 93 02 F6 | 	mov	arg01, local06
06b0c     5A 95 02 F6 | 	mov	arg02, local08
06b10     1C E2 B1 FD | 	call	#__system___string_cmp
06b14     3D B3 0A F6 | 	mov	local07, result1 wz
06b18     44 00 90 AD |  if_e	jmp	#LR__0563
06b1c     97 01 00 FF 
06b20     D1 B8 06 F6 | 	mov	local10, ##@LR__5876
06b24     5C B7 02 F6 | 	mov	local09, local10
06b28     58 93 02 F6 | 	mov	arg01, local06
06b2c     5B 95 02 F6 | 	mov	arg02, local09
06b30     FC E1 B1 FD | 	call	#__system___string_cmp
06b34     3D B5 0A F6 | 	mov	local08, result1 wz
06b38     24 00 90 AD |  if_e	jmp	#LR__0563
06b3c     97 01 00 FF 
06b40     D3 BA 06 F6 | 	mov	local11, ##@LR__5877
06b44     5D B9 02 F6 | 	mov	local10, local11
06b48     58 93 02 F6 | 	mov	arg01, local06
06b4c     5C 95 02 F6 | 	mov	arg02, local10
06b50     DC E1 B1 FD | 	call	#__system___string_cmp
06b54     3D B7 0A F6 | 	mov	local09, result1 wz
06b58     00 7A 06 56 |  if_ne	mov	result1, #0
06b5c     D4 02 90 5D |  if_ne	jmp	#LR__0576
06b60                 | LR__0563
06b60                 | ' if m$="." then ds=1
06b60     97 01 00 FF 
06b64     D5 94 06 F6 | 	mov	arg02, ##@LR__5878
06b68     58 93 02 F6 | 	mov	arg01, local06
06b6c     C0 E1 B1 FD | 	call	#__system___string_cmp
06b70     00 7A 0E F2 | 	cmp	result1, #0 wz
06b74     01 A8 06 A6 |  if_e	mov	local02, #1
06b78                 | ' if m$="$" then hex=1 else hex=0
06b78     97 01 00 FF 
06b7c     D7 94 06 F6 | 	mov	arg02, ##@LR__5879
06b80     58 93 02 F6 | 	mov	arg01, local06
06b84     A8 E1 B1 FD | 	call	#__system___string_cmp
06b88     00 7A 0E F2 | 	cmp	result1, #0 wz
06b8c     01 BC 06 A6 |  if_e	mov	local12, #1
06b90     00 BC 06 56 |  if_ne	mov	local12, #0
06b94                 | ' if m$="%" then bin=1 else bin=0
06b94     97 01 00 FF 
06b98     D9 94 06 F6 | 	mov	arg02, ##@LR__5880
06b9c     58 93 02 F6 | 	mov	arg01, local06
06ba0     8C E1 B1 FD | 	call	#__system___string_cmp
06ba4     00 7A 0E F2 | 	cmp	result1, #0 wz
06ba8     01 BE 06 A6 |  if_e	mov	local13, #1
06bac     00 BE 06 56 |  if_ne	mov	local13, #0
06bb0                 | ' if l>1 then 
06bb0     02 AE 56 F2 | 	cmps	local05, #2 wc
06bb4     78 02 90 CD |  if_b	jmp	#LR__0575
06bb8                 | '   for i=2 to l
06bb8     02 C0 06 F6 | 	mov	local14, #2
06bbc     57 C3 02 F6 | 	mov	local15, local05
06bc0     01 C2 06 F1 | 	add	local15, #1
06bc4                 | LR__0564
06bc4     61 C1 52 F2 | 	cmps	local14, local15 wc
06bc8     64 02 90 3D |  if_ae	jmp	#LR__0574
06bcc     53 93 02 F6 | 	mov	arg01, local01
06bd0     60 95 02 F6 | 	mov	arg02, local14
06bd4     01 96 06 F6 | 	mov	arg03, #1
06bd8     EC FA B1 FD | 	call	#__system__Mid_S
06bdc     3D B1 02 F6 | 	mov	local06, result1
06be0     00 C4 06 F6 | 	mov	local16, #0
06be4                 | '     m$=mid$(s,i,1) : b=false
06be4                 | '     if m$>="0" andalso m$<="9" then b=true  
06be4     97 01 00 FF 
06be8     DB 94 06 F6 | 	mov	arg02, ##@LR__5881
06bec     58 93 02 F6 | 	mov	arg01, local06
06bf0     3C E1 B1 FD | 	call	#__system___string_cmp
06bf4     00 7A 56 F2 | 	cmps	result1, #0 wc
06bf8     1C 00 90 CD |  if_b	jmp	#LR__0565
06bfc     97 01 00 FF 
06c00     DD B2 06 F6 | 	mov	local07, ##@LR__5882
06c04     58 93 02 F6 | 	mov	arg01, local06
06c08     59 95 02 F6 | 	mov	arg02, local07
06c0c     20 E1 B1 FD | 	call	#__system___string_cmp
06c10     01 7A 56 F2 | 	cmps	result1, #1 wc
06c14     01 C4 66 C6 |  if_b	neg	local16, #1
06c18                 | LR__0565
06c18                 | '     if m$="_" orelse m$="." orelse m$="E" orelse m$="e" orelse m$="-" then b=true 
06c18     97 01 00 FF 
06c1c     DF 94 06 F6 | 	mov	arg02, ##@LR__5883
06c20     58 93 02 F6 | 	mov	arg01, local06
06c24     08 E1 B1 FD | 	call	#__system___string_cmp
06c28     00 7A 0E F2 | 	cmp	result1, #0 wz
06c2c     7C 00 90 AD |  if_e	jmp	#LR__0566
06c30     97 01 00 FF 
06c34     E1 B2 06 F6 | 	mov	local07, ##@LR__5884
06c38     58 93 02 F6 | 	mov	arg01, local06
06c3c     59 95 02 F6 | 	mov	arg02, local07
06c40     EC E0 B1 FD | 	call	#__system___string_cmp
06c44     00 7A 0E F2 | 	cmp	result1, #0 wz
06c48     60 00 90 AD |  if_e	jmp	#LR__0566
06c4c     97 01 00 FF 
06c50     E3 B4 06 F6 | 	mov	local08, ##@LR__5885
06c54     5A B3 02 F6 | 	mov	local07, local08
06c58     58 93 02 F6 | 	mov	arg01, local06
06c5c     59 95 02 F6 | 	mov	arg02, local07
06c60     CC E0 B1 FD | 	call	#__system___string_cmp
06c64     00 7A 0E F2 | 	cmp	result1, #0 wz
06c68     40 00 90 AD |  if_e	jmp	#LR__0566
06c6c     97 01 00 FF 
06c70     E5 B6 06 F6 | 	mov	local09, ##@LR__5886
06c74     5B B5 02 F6 | 	mov	local08, local09
06c78     58 93 02 F6 | 	mov	arg01, local06
06c7c     5A 95 02 F6 | 	mov	arg02, local08
06c80     AC E0 B1 FD | 	call	#__system___string_cmp
06c84     3D B3 0A F6 | 	mov	local07, result1 wz
06c88     20 00 90 AD |  if_e	jmp	#LR__0566
06c8c     97 01 00 FF 
06c90     E7 B8 06 F6 | 	mov	local10, ##@LR__5887
06c94     5C B7 02 F6 | 	mov	local09, local10
06c98     58 93 02 F6 | 	mov	arg01, local06
06c9c     5B 95 02 F6 | 	mov	arg02, local09
06ca0     8C E0 B1 FD | 	call	#__system___string_cmp
06ca4     3D B5 0A F6 | 	mov	local08, result1 wz
06ca8     04 00 90 5D |  if_ne	jmp	#LR__0567
06cac                 | LR__0566
06cac     01 C4 66 F6 | 	neg	local16, #1
06cb0                 | LR__0567
06cb0                 | '     if hex=1 andalso m$>="a" andalso m$<="f" then b=true
06cb0     01 BC 0E F2 | 	cmp	local12, #1 wz
06cb4     34 00 90 5D |  if_ne	jmp	#LR__0568
06cb8     97 01 00 FF 
06cbc     E9 94 06 F6 | 	mov	arg02, ##@LR__5888
06cc0     58 93 02 F6 | 	mov	arg01, local06
06cc4     68 E0 B1 FD | 	call	#__system___string_cmp
06cc8     00 7A 56 F2 | 	cmps	result1, #0 wc
06ccc     1C 00 90 CD |  if_b	jmp	#LR__0568
06cd0     97 01 00 FF 
06cd4     EB B2 06 F6 | 	mov	local07, ##@LR__5889
06cd8     58 93 02 F6 | 	mov	arg01, local06
06cdc     59 95 02 F6 | 	mov	arg02, local07
06ce0     4C E0 B1 FD | 	call	#__system___string_cmp
06ce4     01 7A 56 F2 | 	cmps	result1, #1 wc
06ce8     01 C4 66 C6 |  if_b	neg	local16, #1
06cec                 | LR__0568
06cec                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_" then return false
06cec     01 BE 0E F2 | 	cmp	local13, #1 wz
06cf0     58 00 90 5D |  if_ne	jmp	#LR__0570
06cf4     97 01 00 FF 
06cf8     ED 94 06 F6 | 	mov	arg02, ##@LR__5890
06cfc     58 93 02 F6 | 	mov	arg01, local06
06d00     2C E0 B1 FD | 	call	#__system___string_cmp
06d04     00 7A 56 F2 | 	cmps	result1, #0 wc
06d08     1C 00 90 CD |  if_b	jmp	#LR__0569
06d0c     97 01 00 FF 
06d10     EF B2 06 F6 | 	mov	local07, ##@LR__5891
06d14     58 93 02 F6 | 	mov	arg01, local06
06d18     59 95 02 F6 | 	mov	arg02, local07
06d1c     10 E0 B1 FD | 	call	#__system___string_cmp
06d20     01 7A 56 F2 | 	cmps	result1, #1 wc
06d24     24 00 90 CD |  if_b	jmp	#LR__0570
06d28                 | LR__0569
06d28     97 01 00 FF 
06d2c     F1 B4 06 F6 | 	mov	local08, ##@LR__5892
06d30     5A B3 02 F6 | 	mov	local07, local08
06d34     58 93 02 F6 | 	mov	arg01, local06
06d38     59 95 02 F6 | 	mov	arg02, local07
06d3c     F0 DF B1 FD | 	call	#__system___string_cmp
06d40     00 7A 0E F2 | 	cmp	result1, #0 wz
06d44     00 7A 06 56 |  if_ne	mov	result1, #0
06d48     E8 00 90 5D |  if_ne	jmp	#LR__0576
06d4c                 | LR__0570
06d4c                 | '     if not b then return false
06d4c     62 C5 22 F6 | 	not	local16, local16
06d50     00 C4 0E F2 | 	cmp	local16, #0 wz
06d54     00 7A 06 56 |  if_ne	mov	result1, #0
06d58     D8 00 90 5D |  if_ne	jmp	#LR__0576
06d5c                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
06d5c     97 01 00 FF 
06d60     F3 94 06 F6 | 	mov	arg02, ##@LR__5893
06d64     58 93 02 F6 | 	mov	arg01, local06
06d68     C4 DF B1 FD | 	call	#__system___string_cmp
06d6c     00 7A 0E F2 | 	cmp	result1, #0 wz
06d70     3C 00 90 5D |  if_ne	jmp	#LR__0571
06d74     60 95 02 F6 | 	mov	arg02, local14
06d78     01 94 86 F1 | 	sub	arg02, #1
06d7c     53 93 02 F6 | 	mov	arg01, local01
06d80     01 96 06 F6 | 	mov	arg03, #1
06d84     40 F9 B1 FD | 	call	#__system__Mid_S
06d88     3D 93 02 F6 | 	mov	arg01, result1
06d8c     30 FB B1 FD | 	call	#__system__LCase_S
06d90     3D 93 02 F6 | 	mov	arg01, result1
06d94     97 01 00 FF 
06d98     F5 B2 06 F6 | 	mov	local07, ##@LR__5894
06d9c     59 95 02 F6 | 	mov	arg02, local07
06da0     8C DF B1 FD | 	call	#__system___string_cmp
06da4     00 7A 0E F2 | 	cmp	result1, #0 wz
06da8     00 7A 06 56 |  if_ne	mov	result1, #0
06dac     84 00 90 5D |  if_ne	jmp	#LR__0576
06db0                 | LR__0571
06db0                 | '     if m$="." then ds+=1: if ds>1 then return false
06db0     97 01 00 FF 
06db4     F7 94 06 F6 | 	mov	arg02, ##@LR__5895
06db8     58 93 02 F6 | 	mov	arg01, local06
06dbc     70 DF B1 FD | 	call	#__system___string_cmp
06dc0     00 7A 0E F2 | 	cmp	result1, #0 wz
06dc4     01 A8 06 A1 |  if_e	add	local02, #1
06dc8     02 A8 56 A2 |  if_e	cmps	local02, #2 wc
06dcc     00 7A 06 26 |  if_nc_and_z	mov	result1, #0
06dd0     60 00 90 2D |  if_nc_and_z	jmp	#LR__0576
06dd4                 | '     if m$="E" orelse m$="e" then es+=1: if hex=0 andalso es>1 then return false
06dd4     97 01 00 FF 
06dd8     F9 C6 06 F6 | 	mov	local17, ##@LR__5896
06ddc     63 C9 02 F6 | 	mov	local18, local17
06de0     58 93 02 F6 | 	mov	arg01, local06
06de4     64 95 02 F6 | 	mov	arg02, local18
06de8     44 DF B1 FD | 	call	#__system___string_cmp
06dec     3D CB 0A F6 | 	mov	local19, result1 wz
06df0     20 00 90 AD |  if_e	jmp	#LR__0572
06df4     97 01 00 FF 
06df8     FB B2 06 F6 | 	mov	local07, ##@LR__5897
06dfc     59 C7 02 F6 | 	mov	local17, local07
06e00     58 93 02 F6 | 	mov	arg01, local06
06e04     63 95 02 F6 | 	mov	arg02, local17
06e08     24 DF B1 FD | 	call	#__system___string_cmp
06e0c     3D C9 0A F6 | 	mov	local18, result1 wz
06e10     14 00 90 5D |  if_ne	jmp	#LR__0573
06e14                 | LR__0572
06e14     01 AA 06 F1 | 	add	local03, #1
06e18     00 BC 0E F2 | 	cmp	local12, #0 wz
06e1c     02 AA 56 A2 |  if_e	cmps	local03, #2 wc
06e20     00 7A 06 26 |  if_nc_and_z	mov	result1, #0
06e24     0C 00 90 2D |  if_nc_and_z	jmp	#LR__0576
06e28                 | LR__0573
06e28     01 C0 06 F1 | 	add	local14, #1
06e2c     94 FD 9F FD | 	jmp	#LR__0564
06e30                 | LR__0574
06e30                 | LR__0575
06e30                 | ' return true
06e30     01 7A 66 F6 | 	neg	result1, #1
06e34                 | LR__0576
06e34     E7 F0 03 F6 | 	mov	ptra, fp
06e38     F2 00 A0 FD | 	call	#popregs_
06e3c                 | _isnum_ret
06e3c     2D 00 64 FD | 	ret
06e40                 | 
06e40                 | '   
06e40                 | ' ' Check if the part is an integer number.    
06e40                 | '   
06e40                 | ' function isint(s as string) as boolean
06e40                 | _isint
06e40     0E CA 05 F6 | 	mov	COUNT_, #14
06e44     E8 00 A0 FD | 	call	#pushregs_
06e48     49 A7 02 F6 | 	mov	local01, arg01
06e4c     49 A9 02 F6 | 	mov	local02, arg01
06e50     D7 06 48 FB | 	callpa	#(@LR__0581-@LR__0580)>>2,fcache_load_ptr_
06e54                 | LR__0580
06e54     54 7B CA FA | 	rdbyte	result1, local02 wz
06e58     01 A8 06 51 |  if_ne	add	local02, #1
06e5c     F4 FF 9F 5D |  if_ne	jmp	#LR__0580
06e60                 | LR__0581
06e60     49 A9 82 F1 | 	sub	local02, arg01
06e64     54 7B 02 F6 | 	mov	result1, local02
06e68     3D AB 0A F6 | 	mov	local03, result1 wz
06e6c     00 7A 06 A6 |  if_e	mov	result1, #0
06e70     64 02 90 AD |  if_e	jmp	#LR__0594
06e74     53 93 02 F6 | 	mov	arg01, local01
06e78     01 94 06 F6 | 	mov	arg02, #1
06e7c     01 96 06 F6 | 	mov	arg03, #1
06e80     44 F8 B1 FD | 	call	#__system__Mid_S
06e84     3D AD 02 F6 | 	mov	local04, result1
06e88                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
06e88     97 01 00 FF 
06e8c     FD 94 06 F6 | 	mov	arg02, ##@LR__5898
06e90     56 93 02 F6 | 	mov	arg01, local04
06e94     98 DE B1 FD | 	call	#__system___string_cmp
06e98     00 7A 56 F2 | 	cmps	result1, #0 wc
06e9c     1C 00 90 CD |  if_b	jmp	#LR__0582
06ea0     97 01 00 FF 
06ea4     FF AE 06 F6 | 	mov	local05, ##@LR__5899
06ea8     56 93 02 F6 | 	mov	arg01, local04
06eac     57 95 02 F6 | 	mov	arg02, local05
06eb0     7C DE B1 FD | 	call	#__system___string_cmp
06eb4     01 7A 56 F2 | 	cmps	result1, #1 wc
06eb8     64 00 90 CD |  if_b	jmp	#LR__0583
06ebc                 | LR__0582
06ebc     97 01 00 FF 
06ec0     01 B1 06 F6 | 	mov	local06, ##@LR__5900
06ec4     58 AF 02 F6 | 	mov	local05, local06
06ec8     56 93 02 F6 | 	mov	arg01, local04
06ecc     57 95 02 F6 | 	mov	arg02, local05
06ed0     5C DE B1 FD | 	call	#__system___string_cmp
06ed4     00 7A 0E F2 | 	cmp	result1, #0 wz
06ed8     44 00 90 AD |  if_e	jmp	#LR__0583
06edc     97 01 00 FF 
06ee0     03 B3 06 F6 | 	mov	local07, ##@LR__5901
06ee4     59 B1 02 F6 | 	mov	local06, local07
06ee8     56 93 02 F6 | 	mov	arg01, local04
06eec     58 95 02 F6 | 	mov	arg02, local06
06ef0     3C DE B1 FD | 	call	#__system___string_cmp
06ef4     3D AF 0A F6 | 	mov	local05, result1 wz
06ef8     24 00 90 AD |  if_e	jmp	#LR__0583
06efc     97 01 00 FF 
06f00     05 B5 06 F6 | 	mov	local08, ##@LR__5902
06f04     5A B3 02 F6 | 	mov	local07, local08
06f08     56 93 02 F6 | 	mov	arg01, local04
06f0c     59 95 02 F6 | 	mov	arg02, local07
06f10     1C DE B1 FD | 	call	#__system___string_cmp
06f14     3D B1 0A F6 | 	mov	local06, result1 wz
06f18     00 7A 06 56 |  if_ne	mov	result1, #0
06f1c     B8 01 90 5D |  if_ne	jmp	#LR__0594
06f20                 | LR__0583
06f20                 | ' if m$="$" then hex=1 else hex=0
06f20     97 01 00 FF 
06f24     07 95 06 F6 | 	mov	arg02, ##@LR__5903
06f28     56 93 02 F6 | 	mov	arg01, local04
06f2c     00 DE B1 FD | 	call	#__system___string_cmp
06f30     00 7A 0E F2 | 	cmp	result1, #0 wz
06f34     01 B6 06 A6 |  if_e	mov	local09, #1
06f38     00 B6 06 56 |  if_ne	mov	local09, #0
06f3c                 | ' if m$="%" then bin=1 else bin=0
06f3c     97 01 00 FF 
06f40     09 95 06 F6 | 	mov	arg02, ##@LR__5904
06f44     56 93 02 F6 | 	mov	arg01, local04
06f48     E4 DD B1 FD | 	call	#__system___string_cmp
06f4c     00 7A 0E F2 | 	cmp	result1, #0 wz
06f50     01 B8 06 A6 |  if_e	mov	local10, #1
06f54     00 B8 06 56 |  if_ne	mov	local10, #0
06f58                 | ' if l>1 then 
06f58     02 AA 56 F2 | 	cmps	local03, #2 wc
06f5c     74 01 90 CD |  if_b	jmp	#LR__0593
06f60                 | '   for i=2 to l
06f60     02 BA 06 F6 | 	mov	local11, #2
06f64     55 BD 02 F6 | 	mov	local12, local03
06f68     01 BC 06 F1 | 	add	local12, #1
06f6c                 | LR__0584
06f6c     5E BB 52 F2 | 	cmps	local11, local12 wc
06f70     60 01 90 3D |  if_ae	jmp	#LR__0592
06f74     53 93 02 F6 | 	mov	arg01, local01
06f78     5D 95 02 F6 | 	mov	arg02, local11
06f7c     01 96 06 F6 | 	mov	arg03, #1
06f80     44 F7 B1 FD | 	call	#__system__Mid_S
06f84     3D AD 02 F6 | 	mov	local04, result1
06f88                 | '     m$=mid$(s,i,1) 
06f88                 | '     if hex=0 andalso (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
06f88     00 B6 0E F2 | 	cmp	local09, #0 wz
06f8c     50 00 90 5D |  if_ne	jmp	#LR__0586
06f90     97 01 00 FF 
06f94     0B 95 06 F6 | 	mov	arg02, ##@LR__5905
06f98     56 93 02 F6 | 	mov	arg01, local04
06f9c     90 DD B1 FD | 	call	#__system___string_cmp
06fa0     00 7A 56 F2 | 	cmps	result1, #0 wc
06fa4     18 00 90 CD |  if_b	jmp	#LR__0585
06fa8     97 01 00 FF 
06fac     0D 95 06 F6 | 	mov	arg02, ##@LR__5906
06fb0     56 93 02 F6 | 	mov	arg01, local04
06fb4     78 DD B1 FD | 	call	#__system___string_cmp
06fb8     01 7A 56 F2 | 	cmps	result1, #1 wc
06fbc     20 00 90 CD |  if_b	jmp	#LR__0586
06fc0                 | LR__0585
06fc0     97 01 00 FF 
06fc4     0F B1 06 F6 | 	mov	local06, ##@LR__5907
06fc8     56 93 02 F6 | 	mov	arg01, local04
06fcc     58 95 02 F6 | 	mov	arg02, local06
06fd0     5C DD B1 FD | 	call	#__system___string_cmp
06fd4     00 7A 0E F2 | 	cmp	result1, #0 wz
06fd8     00 7A 06 56 |  if_ne	mov	result1, #0
06fdc     F8 00 90 5D |  if_ne	jmp	#LR__0594
06fe0                 | LR__0586
06fe0                 | '     if hex=1 andalso (m$<"0" orelse m$>"9") andalso (m$<"a" orelse m$>"f") andalso m$<>"_"  then return false
06fe0     01 B6 0E F2 | 	cmp	local09, #1 wz
06fe4     90 00 90 5D |  if_ne	jmp	#LR__0589
06fe8     97 01 00 FF 
06fec     11 95 06 F6 | 	mov	arg02, ##@LR__5908
06ff0     56 93 02 F6 | 	mov	arg01, local04
06ff4     38 DD B1 FD | 	call	#__system___string_cmp
06ff8     00 7A 56 F2 | 	cmps	result1, #0 wc
06ffc     1C 00 90 CD |  if_b	jmp	#LR__0587
07000     97 01 00 FF 
07004     13 95 06 F6 | 	mov	arg02, ##@LR__5909
07008     56 93 02 F6 | 	mov	arg01, local04
0700c     20 DD B1 FD | 	call	#__system___string_cmp
07010     3D BF 02 F6 | 	mov	local13, result1
07014     01 BE 56 F2 | 	cmps	local13, #1 wc
07018     5C 00 90 CD |  if_b	jmp	#LR__0589
0701c                 | LR__0587
0701c     97 01 00 FF 
07020     15 AF 06 F6 | 	mov	local05, ##@LR__5910
07024     56 93 02 F6 | 	mov	arg01, local04
07028     57 95 02 F6 | 	mov	arg02, local05
0702c     00 DD B1 FD | 	call	#__system___string_cmp
07030     3D C1 02 F6 | 	mov	local14, result1
07034     00 C0 56 F2 | 	cmps	local14, #0 wc
07038     1C 00 90 CD |  if_b	jmp	#LR__0588
0703c     97 01 00 FF 
07040     17 B3 06 F6 | 	mov	local07, ##@LR__5911
07044     56 93 02 F6 | 	mov	arg01, local04
07048     59 95 02 F6 | 	mov	arg02, local07
0704c     E0 DC B1 FD | 	call	#__system___string_cmp
07050     01 7A 56 F2 | 	cmps	result1, #1 wc
07054     20 00 90 CD |  if_b	jmp	#LR__0589
07058                 | LR__0588
07058     97 01 00 FF 
0705c     19 B5 06 F6 | 	mov	local08, ##@LR__5912
07060     56 93 02 F6 | 	mov	arg01, local04
07064     5A 95 02 F6 | 	mov	arg02, local08
07068     C4 DC B1 FD | 	call	#__system___string_cmp
0706c     00 7A 0E F2 | 	cmp	result1, #0 wz
07070     00 7A 06 56 |  if_ne	mov	result1, #0
07074     60 00 90 5D |  if_ne	jmp	#LR__0594
07078                 | LR__0589
07078                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_"  then return false
07078     01 B8 0E F2 | 	cmp	local10, #1 wz
0707c     4C 00 90 5D |  if_ne	jmp	#LR__0591
07080     97 01 00 FF 
07084     1B 95 06 F6 | 	mov	arg02, ##@LR__5913
07088     56 93 02 F6 | 	mov	arg01, local04
0708c     A0 DC B1 FD | 	call	#__system___string_cmp
07090     00 7A 56 F2 | 	cmps	result1, #0 wc
07094     18 00 90 CD |  if_b	jmp	#LR__0590
07098     97 01 00 FF 
0709c     1D 95 06 F6 | 	mov	arg02, ##@LR__5914
070a0     56 93 02 F6 | 	mov	arg01, local04
070a4     88 DC B1 FD | 	call	#__system___string_cmp
070a8     01 7A 56 F2 | 	cmps	result1, #1 wc
070ac     1C 00 90 CD |  if_b	jmp	#LR__0591
070b0                 | LR__0590
070b0     97 01 00 FF 
070b4     1F 95 06 F6 | 	mov	arg02, ##@LR__5915
070b8     56 93 02 F6 | 	mov	arg01, local04
070bc     70 DC B1 FD | 	call	#__system___string_cmp
070c0     00 7A 0E F2 | 	cmp	result1, #0 wz
070c4     00 7A 06 56 |  if_ne	mov	result1, #0
070c8     0C 00 90 5D |  if_ne	jmp	#LR__0594
070cc                 | LR__0591
070cc     01 BA 06 F1 | 	add	local11, #1
070d0     98 FE 9F FD | 	jmp	#LR__0584
070d4                 | LR__0592
070d4                 | LR__0593
070d4                 | ' return true
070d4     01 7A 66 F6 | 	neg	result1, #1
070d8                 | LR__0594
070d8     E7 F0 03 F6 | 	mov	ptra, fp
070dc     F2 00 A0 FD | 	call	#popregs_
070e0                 | _isint_ret
070e0     2D 00 64 FD | 	ret
070e4                 | 
070e4                 | ' 
070e4                 | ' ' Check if the part is a positive decimal number.  
070e4                 | ' 
070e4                 | ' function isdec(s as string) as boolean
070e4                 | _isdec
070e4     05 CA 05 F6 | 	mov	COUNT_, #5
070e8     E8 00 A0 FD | 	call	#pushregs_
070ec     49 A7 02 F6 | 	mov	local01, arg01
070f0     49 A9 02 F6 | 	mov	local02, arg01
070f4     D7 06 48 FB | 	callpa	#(@LR__0601-@LR__0600)>>2,fcache_load_ptr_
070f8                 | LR__0600
070f8     54 7B CA FA | 	rdbyte	result1, local02 wz
070fc     01 A8 06 51 |  if_ne	add	local02, #1
07100     F4 FF 9F 5D |  if_ne	jmp	#LR__0600
07104                 | LR__0601
07104     49 A9 82 F1 | 	sub	local02, arg01
07108     54 7B 02 F6 | 	mov	result1, local02
0710c     3D A9 0A F6 | 	mov	local02, result1 wz
07110     00 7A 06 A6 |  if_e	mov	result1, #0
07114     80 00 90 AD |  if_e	jmp	#LR__0606
07118                 | ' for i=1 to l
07118     01 AA 06 F6 | 	mov	local03, #1
0711c     54 AD 02 F6 | 	mov	local04, local02
07120     01 AC 06 F1 | 	add	local04, #1
07124                 | LR__0602
07124     56 AB 52 F2 | 	cmps	local03, local04 wc
07128     68 00 90 3D |  if_ae	jmp	#LR__0605
0712c     53 93 02 F6 | 	mov	arg01, local01
07130     55 95 02 F6 | 	mov	arg02, local03
07134     01 96 06 F6 | 	mov	arg03, #1
07138     8C F5 B1 FD | 	call	#__system__Mid_S
0713c     3D AF 02 F6 | 	mov	local05, result1
07140                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
07140     97 01 00 FF 
07144     21 95 06 F6 | 	mov	arg02, ##@LR__5916
07148     57 93 02 F6 | 	mov	arg01, local05
0714c     E0 DB B1 FD | 	call	#__system___string_cmp
07150     00 7A 56 F2 | 	cmps	result1, #0 wc
07154     18 00 90 CD |  if_b	jmp	#LR__0603
07158     97 01 00 FF 
0715c     23 95 06 F6 | 	mov	arg02, ##@LR__5917
07160     57 93 02 F6 | 	mov	arg01, local05
07164     C8 DB B1 FD | 	call	#__system___string_cmp
07168     01 7A 56 F2 | 	cmps	result1, #1 wc
0716c     1C 00 90 CD |  if_b	jmp	#LR__0604
07170                 | LR__0603
07170     97 01 00 FF 
07174     25 95 06 F6 | 	mov	arg02, ##@LR__5918
07178     57 93 02 F6 | 	mov	arg01, local05
0717c     B0 DB B1 FD | 	call	#__system___string_cmp
07180     00 7A 0E F2 | 	cmp	result1, #0 wz
07184     00 7A 06 56 |  if_ne	mov	result1, #0
07188     0C 00 90 5D |  if_ne	jmp	#LR__0606
0718c                 | LR__0604
0718c     01 AA 06 F1 | 	add	local03, #1
07190     90 FF 9F FD | 	jmp	#LR__0602
07194                 | LR__0605
07194                 | ' return true
07194     01 7A 66 F6 | 	neg	result1, #1
07198                 | LR__0606
07198     E7 F0 03 F6 | 	mov	ptra, fp
0719c     F2 00 A0 FD | 	call	#popregs_
071a0                 | _isdec_ret
071a0     2D 00 64 FD | 	ret
071a4                 | 
071a4                 | ' 
071a4                 | ' ' Check if the part is a string.  
071a4                 | ' 
071a4                 | ' function isstring(s as string) as boolean
071a4                 | _isstring
071a4     01 CA 05 F6 | 	mov	COUNT_, #1
071a8     E8 00 A0 FD | 	call	#pushregs_
071ac                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
071ac     49 A7 02 F6 | 	mov	local01, arg01
071b0     01 94 06 F6 | 	mov	arg02, #1
071b4     F8 F3 B1 FD | 	call	#__system__Left_S
071b8     3D 93 02 F6 | 	mov	arg01, result1
071bc     97 01 00 FF 
071c0     27 95 06 F6 | 	mov	arg02, ##@LR__5919
071c4     68 DB B1 FD | 	call	#__system___string_cmp
071c8     00 7A 4E F2 | 	cmps	result1, #0 wz
071cc     28 00 90 5D |  if_ne	jmp	#LR__0610
071d0     53 93 02 F6 | 	mov	arg01, local01
071d4     01 94 06 F6 | 	mov	arg02, #1
071d8     5C F4 B1 FD | 	call	#__system__Right_S
071dc     3D 93 02 F6 | 	mov	arg01, result1
071e0     97 01 00 FF 
071e4     29 95 06 F6 | 	mov	arg02, ##@LR__5920
071e8     44 DB B1 FD | 	call	#__system___string_cmp
071ec     00 7A 4E F2 | 	cmps	result1, #0 wz
071f0     01 7A 66 A6 |  if_e	neg	result1, #1
071f4     04 00 90 AD |  if_e	jmp	#LR__0611
071f8                 | LR__0610
071f8     00 7A 06 F6 | 	mov	result1, #0
071fc                 | LR__0611
071fc     E7 F0 03 F6 | 	mov	ptra, fp
07200     F2 00 A0 FD | 	call	#popregs_
07204                 | _isstring_ret
07204     2D 00 64 FD | 	ret
07208                 | 
07208                 | ' 
07208                 | ' ' getnoteval. Returns the frequency of note token
07208                 | ' 
07208                 | ' function getnoteval(token) as single
07208                 | _getnoteval
07208     02 CA 05 F6 | 	mov	COUNT_, #2
0720c     E8 00 A0 FD | 	call	#pushregs_
07210     01 00 00 FF 
07214     00 93 86 F1 | 	sub	arg01, ##768
07218     49 95 52 F6 | 	abs	arg02, arg01 wc
0721c     0C 94 16 FD | 	qdiv	arg02, #12
07220     32 95 02 F6 | 	mov	arg02, objptr
07224     16 00 00 FF 
07228     38 94 06 F1 | 	add	arg02, ##11320
0722c     19 7A 62 FD | 	getqy	result1
07230     3D 7B 82 F6 | 	negc	result1, result1
07234     02 7A 66 F0 | 	shl	result1, #2
07238     4A 7B 02 F1 | 	add	result1, arg02
0723c     49 95 52 F6 | 	abs	arg02, arg01 wc
07240     0C 94 16 FD | 	qdiv	arg02, #12
07244     3D A7 02 FB | 	rdlong	local01, result1
07248     01 92 06 F6 | 	mov	arg01, #1
0724c                 | ' noteexp=1+(note/12) 
0724c                 | ' return (2.0^noteexp)*notebase
0724c     18 94 62 FD | 	getqx	arg02
07250     4A 93 82 F3 | 	sumc	arg01, arg02
07254     49 93 52 F6 | 	abs	arg01, arg01 wc
07258     1F A8 C6 C9 |  if_b	decod	local02, #31
0725c     00 A8 06 36 |  if_ae	mov	local02, #0
07260     70 FD B1 FD | 	call	#__system___float_fromuns
07264     54 7B 62 F5 | 	xor	result1, local02
07268     3D 95 02 F6 | 	mov	arg02, result1
0726c     1E 92 C6 F9 | 	decod	arg01, #30
07270     7C 10 B2 FD | 	call	#__system____builtin_powf
07274     3D 93 02 F6 | 	mov	arg01, result1
07278     53 95 02 F6 | 	mov	arg02, local01
0727c     58 01 B2 FD | 	call	#__system___float_mul
07280     E7 F0 03 F6 | 	mov	ptra, fp
07284     F2 00 A0 FD | 	call	#popregs_
07288                 | _getnoteval_ret
07288     2D 00 64 FD | 	ret
0728c                 | 
0728c                 | ' 
0728c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0728c                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
0728c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0728c                 | ' 
0728c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0728c                 | ' '
0728c                 | ' '               		REVERSE POLISH NOTATION PRECOMPILER
0728c                 | ' '
0728c                 | ' ' A precompiler gets the tokenized line at the input, and outputs the precompiled line that uses the reverse Polish notation.
0728c                 | ' ' That means the operation is done by firs placing the arguments on the stack, and then do the operation on a top of this stack.
0728c                 | ' ' The expression a=b*(c+d) is translated to push c, push d, add, push b, mul, push variable#, assign
0728c                 | ' ' If the precompiled line has a number that is >0, then it is added to the program and saved in the PSRAM using the 2-way list structure
0728c                 | ' ' If the line number=0, it is not saved, and instead it is immediately executed in the "interpret" function
0728c                 | ' ' 
0728c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0728c                 | ' 
0728c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0728c                 | ' ' Helper functions to manage program lines
0728c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0728c                 | ' 
0728c                 | ' '----- delete a line from a program
0728c                 | ' 
0728c                 | ' function deleteline(aline as ulong) as integer
0728c                 | _deleteline
0728c     05 CA 05 F6 | 	mov	COUNT_, #5
07290     E8 00 A0 FD | 	call	#pushregs_
07294     2C F0 07 F1 | 	add	ptra, #44
07298     49 A7 02 F6 | 	mov	local01, arg01
0729c     4C 00 00 FF 
072a0     08 64 06 F1 | 	add	objptr, ##38920
072a4     32 A9 02 FB | 	rdlong	local02, objptr
072a8                 | ' 
072a8                 | ' searchptr=programstart
072a8                 | ' do
072a8     40 00 00 FF 
072ac     3C 65 86 F1 | 	sub	objptr, ##33084
072b0                 | LR__0620
072b0     E7 92 02 F6 | 	mov	arg01, fp
072b4     14 92 06 F1 | 	add	arg01, #20
072b8     54 95 02 F6 | 	mov	arg02, local02
072bc     18 96 06 F6 | 	mov	arg03, #24
072c0     D0 CA B1 FD | 	call	#_psram_spin2_read1
072c4     54 97 02 F6 | 	mov	arg03, local02
072c8     28 CE 05 F1 | 	add	fp, #40
072cc     E7 A8 02 FB | 	rdlong	local02, fp
072d0     14 CE 85 F1 | 	sub	fp, #20
072d4     E7 94 02 FB | 	rdlong	arg02, fp
072d8     14 CE 85 F1 | 	sub	fp, #20
072dc     53 95 12 F2 | 	cmp	arg02, local01 wc
072e0     28 CE 05 C1 |  if_b	add	fp, #40
072e4     E7 AA 02 CB |  if_b	rdlong	local03, fp
072e8     28 CE 85 C1 |  if_b	sub	fp, #40
072ec     FF FF 3F CF 
072f0     FF AB 0E C2 |  if_b	cmp	local03, ##2147483647 wz
072f4     B8 FF 9F 4D |  if_c_and_nz	jmp	#LR__0620
072f8     0B 00 00 FF 
072fc     CC 64 86 F1 | 	sub	objptr, ##5836
07300                 | ' if header(0)<>aline then return -1						' if not =, then there is no line, return
07300     14 CE 05 F1 | 	add	fp, #20
07304     E7 AA 02 FB | 	rdlong	local03, fp
07308     14 CE 85 F1 | 	sub	fp, #20
0730c     53 AB 0A F2 | 	cmp	local03, local01 wz
07310     01 7A 66 56 |  if_ne	neg	result1, #1
07314     2C 02 90 5D |  if_ne	jmp	#LR__0625
07318     4B 93 02 F6 | 	mov	arg01, arg03
0731c     01 94 66 F6 | 	neg	arg02, #1
07320     B0 9E B1 FD | 	call	#_pslpoke
07324                 | ' pslpoke(lineptr2,$FFFF_FFFF) 							' flag the deleted line
07324                 | ' 
07324                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  			' this is one and only line in the program
07324     28 CE 05 F1 | 	add	fp, #40
07328     E7 96 02 FB | 	rdlong	arg03, fp
0732c     28 CE 85 F1 | 	sub	fp, #40
07330     FF FF 3F FF 
07334     FF 97 0E F2 | 	cmp	arg03, ##2147483647 wz
07338     24 CE 05 A1 |  if_e	add	fp, #36
0733c     E7 AC 02 AB |  if_e	rdlong	local04, fp
07340     24 CE 85 A1 |  if_e	sub	fp, #36
07344     FF FF 7F AF 
07348     FF AD 0E A2 |  if_e	cmp	local04, ##-1 wz
0734c     88 00 90 5D |  if_ne	jmp	#LR__0621
07350     4C 00 00 FF 
07354     08 64 06 F1 | 	add	objptr, ##38920
07358     00 04 80 FF 
0735c     32 01 68 FC | 	wrlong	##524288, objptr
07360     07 00 00 FF 
07364     2C 64 86 F1 | 	sub	objptr, ##3628
07368     00 04 80 FF 
0736c     32 01 68 FC | 	wrlong	##524288, objptr
07370     07 00 00 FF 
07374     30 64 06 F1 | 	add	objptr, ##3632
07378     32 01 68 FC | 	wrlong	#0, objptr
0737c     04 64 06 F1 | 	add	objptr, #4
07380     FF FF FF FF 
07384     32 FF 6B FC | 	wrlong	##-1, objptr
07388     4C 00 00 FF 
0738c     10 64 86 F1 | 	sub	objptr, ##38928
07390     00 92 06 F6 | 	mov	arg01, #0
07394     01 94 66 F6 | 	neg	arg02, #1
07398     38 9E B1 FD | 	call	#_pslpoke
0739c     10 92 06 F6 | 	mov	arg01, #16
073a0     01 94 66 F6 | 	neg	arg02, #1
073a4     2C 9E B1 FD | 	call	#_pslpoke
073a8     14 92 06 F6 | 	mov	arg01, #20
073ac     1E 94 CE F9 | 	bmask	arg02, #30
073b0     20 9E B1 FD | 	call	#_pslpoke
073b4     52 00 00 FF 
073b8     38 64 06 F1 | 	add	objptr, ##42040
073bc     00 04 80 FF 
073c0     32 01 68 FC | 	wrlong	##524288, objptr
073c4     04 64 06 F1 | 	add	objptr, #4
073c8     00 04 80 FF 
073cc     32 01 68 FC | 	wrlong	##524288, objptr
073d0     52 00 00 FF 
073d4     3C 64 86 F1 | 	sub	objptr, ##42044
073d8                 | LR__0621
073d8                 | ' 
073d8                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' this is the last, and not first, line of the program
073d8     28 CE 05 F1 | 	add	fp, #40
073dc     E7 AE 02 FB | 	rdlong	local05, fp
073e0     28 CE 85 F1 | 	sub	fp, #40
073e4     FF FF 3F FF 
073e8     FF AF 0E F2 | 	cmp	local05, ##2147483647 wz
073ec     74 00 90 5D |  if_ne	jmp	#LR__0622
073f0     24 CE 05 F1 | 	add	fp, #36
073f4     E7 AC 02 FB | 	rdlong	local04, fp
073f8     24 CE 85 F1 | 	sub	fp, #36
073fc     FF FF 7F FF 
07400     FF AD 0E F2 | 	cmp	local04, ##-1 wz
07404     5C 00 90 AD |  if_e	jmp	#LR__0622
07408     24 CE 05 F1 | 	add	fp, #36
0740c     E7 92 02 FB | 	rdlong	arg01, fp
07410     24 CE 85 F1 | 	sub	fp, #36
07414     14 92 06 F1 | 	add	arg01, #20
07418     1E 94 CE F9 | 	bmask	arg02, #30
0741c     B4 9D B1 FD | 	call	#_pslpoke
07420     24 CE 05 F1 | 	add	fp, #36
07424     E7 AE 02 FB | 	rdlong	local05, fp
07428     4C 00 00 FF 
0742c     10 64 06 F1 | 	add	objptr, ##38928
07430     32 AF 62 FC | 	wrlong	local05, objptr
07434     4C 00 00 FF 
07438     10 64 86 F1 | 	sub	objptr, ##38928
0743c     E7 92 02 FB | 	rdlong	arg01, fp
07440     24 CE 85 F1 | 	sub	fp, #36
07444     AC 9E B1 FD | 	call	#_pslpeek
07448     4C 00 00 FF 
0744c     0C 64 06 F1 | 	add	objptr, ##38924
07450     32 7B 62 FC | 	wrlong	result1, objptr
07454     4C 00 00 FF 
07458     0C 64 86 F1 | 	sub	objptr, ##38924
0745c                 | '   pslpoke(header(4)+20,$7FFF_FFFF) 						' unlink the previous line
0745c                 | '   lastlineptr=header(4)           						' keep the last line pointer to avoid searching while sequentially adding a new line
0745c                 | '   lastline=pslpeek(header(4))
0745c                 | '   return 0
0745c     00 7A 06 F6 | 	mov	result1, #0
07460     E0 00 90 FD | 	jmp	#LR__0625
07464                 | LR__0622
07464                 | ' 
07464                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then 			' this is the first line, but not the last
07464     28 CE 05 F1 | 	add	fp, #40
07468     E7 AE 02 FB | 	rdlong	local05, fp
0746c     28 CE 85 F1 | 	sub	fp, #40
07470     FF FF 3F FF 
07474     FF AF 0E F2 | 	cmp	local05, ##2147483647 wz
07478     58 00 90 AD |  if_e	jmp	#LR__0623
0747c     24 CE 05 F1 | 	add	fp, #36
07480     E7 AC 02 FB | 	rdlong	local04, fp
07484     24 CE 85 F1 | 	sub	fp, #36
07488     FF FF 7F FF 
0748c     FF AD 0E F2 | 	cmp	local04, ##-1 wz
07490     40 00 90 5D |  if_ne	jmp	#LR__0623
07494     28 CE 05 F1 | 	add	fp, #40
07498     E7 92 02 FB | 	rdlong	arg01, fp
0749c     28 CE 85 F1 | 	sub	fp, #40
074a0     10 92 06 F1 | 	add	arg01, #16
074a4     01 94 66 F6 | 	neg	arg02, #1
074a8     28 9D B1 FD | 	call	#_pslpoke
074ac     28 CE 05 F1 | 	add	fp, #40
074b0     E7 AE 02 FB | 	rdlong	local05, fp
074b4     28 CE 85 F1 | 	sub	fp, #40
074b8     4C 00 00 FF 
074bc     08 64 06 F1 | 	add	objptr, ##38920
074c0     32 AF 62 FC | 	wrlong	local05, objptr
074c4     4C 00 00 FF 
074c8     08 64 86 F1 | 	sub	objptr, ##38920
074cc                 | ' '   print "deleted first line"
074cc                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
074cc                 | '   programstart=header(5) 							' adjust the program start to point on the first new line
074cc                 | '   return 0
074cc     00 7A 06 F6 | 	mov	result1, #0
074d0     70 00 90 FD | 	jmp	#LR__0625
074d4                 | LR__0623
074d4                 | ' 
074d4                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' the line is not first and not last
074d4     28 CE 05 F1 | 	add	fp, #40
074d8     E7 AE 02 FB | 	rdlong	local05, fp
074dc     28 CE 85 F1 | 	sub	fp, #40
074e0     FF FF 3F FF 
074e4     FF AF 0E F2 | 	cmp	local05, ##2147483647 wz
074e8     24 CE 05 51 |  if_ne	add	fp, #36
074ec     E7 AC 02 5B |  if_ne	rdlong	local04, fp
074f0     24 CE 85 51 |  if_ne	sub	fp, #36
074f4     FF FF 7F 5F 
074f8     FF AD 0E 52 |  if_ne	cmp	local04, ##-1 wz
074fc     40 00 90 AD |  if_e	jmp	#LR__0624
07500     28 CE 05 F1 | 	add	fp, #40
07504     E7 92 02 FB | 	rdlong	arg01, fp
07508     10 92 06 F1 | 	add	arg01, #16
0750c     04 CE 85 F1 | 	sub	fp, #4
07510     E7 94 02 FB | 	rdlong	arg02, fp
07514     24 CE 85 F1 | 	sub	fp, #36
07518     B8 9C B1 FD | 	call	#_pslpoke
0751c     24 CE 05 F1 | 	add	fp, #36
07520     E7 92 02 FB | 	rdlong	arg01, fp
07524     14 92 06 F1 | 	add	arg01, #20
07528     04 CE 05 F1 | 	add	fp, #4
0752c     E7 94 02 FB | 	rdlong	arg02, fp
07530     28 CE 85 F1 | 	sub	fp, #40
07534     9C 9C B1 FD | 	call	#_pslpoke
07538                 | '    pslpoke(header(5)+16,header(4))  
07538                 | '    pslpoke(header(4)+20, header(5))
07538                 | '    return 0
07538     00 7A 06 F6 | 	mov	result1, #0
0753c     04 00 90 FD | 	jmp	#LR__0625
07540                 | LR__0624
07540     00 7A 06 F6 | 	mov	result1, #0
07544                 | LR__0625
07544     E7 F0 03 F6 | 	mov	ptra, fp
07548     F2 00 A0 FD | 	call	#popregs_
0754c                 | _deleteline_ret
0754c     2D 00 64 FD | 	ret
07550                 | 
07550                 | ' 
07550                 | ' '----- Save a line to the PSRAM. Called from insertline and add_line_at_end
07550                 | ' 
07550                 | ' sub save_line
07550                 | _save_line
07550     03 CA 05 F6 | 	mov	COUNT_, #3
07554     E8 00 A0 FD | 	call	#pushregs_
07558     4B 00 00 FF 
0755c     FC 65 06 F1 | 	add	objptr, ##38908
07560     32 97 02 FB | 	rdlong	arg03, objptr
07564     01 96 06 F1 | 	add	arg03, #1
07568     05 00 00 FF 
0756c     18 64 86 F1 | 	sub	objptr, ##2584
07570     32 95 02 FB | 	rdlong	arg02, objptr
07574     4B 95 02 FD | 	qmul	arg02, arg03
07578     0E 00 00 FF 
0757c     44 64 86 F1 | 	sub	objptr, ##7236
07580     32 93 02 FB | 	rdlong	arg01, objptr
07584     38 00 00 FF 
07588     A0 65 86 F1 | 	sub	objptr, ##29088
0758c     49 A7 02 F6 | 	mov	local01, arg01
07590     18 A8 62 FD | 	getqx	local02
07594     D7 06 48 FB | 	callpa	#(@LR__0631-@LR__0630)>>2,fcache_load_ptr_
07598                 | LR__0630
07598     53 7B CA FA | 	rdbyte	result1, local01 wz
0759c     01 A6 06 51 |  if_ne	add	local01, #1
075a0     F4 FF 9F 5D |  if_ne	jmp	#LR__0630
075a4                 | LR__0631
075a4     49 A7 82 F1 | 	sub	local01, arg01
075a8     03 A6 CE F7 | 	test	local01, #3 wz
075ac     02 A6 46 50 |  if_ne	shr	local01, #2
075b0     01 A6 06 51 |  if_ne	add	local01, #1
075b4     02 A6 66 50 |  if_ne	shl	local01, #2
075b8     54 AB 02 F6 | 	mov	local03, local02
075bc     53 AB 02 F1 | 	add	local03, local01
075c0     44 00 00 FF 
075c4     DC 65 06 F1 | 	add	objptr, ##35292
075c8     32 97 02 FB | 	rdlong	arg03, objptr
075cc     54 97 02 F1 | 	add	arg03, local02
075d0     04 00 00 FF 
075d4     28 64 06 F1 | 	add	objptr, ##2088
075d8     32 97 62 FC | 	wrlong	arg03, objptr
075dc     04 64 06 F1 | 	add	objptr, #4
075e0     32 A7 62 FC | 	wrlong	local01, objptr
075e4     0C 64 86 F1 | 	sub	objptr, #12
075e8     32 93 02 F6 | 	mov	arg01, objptr
075ec     04 00 00 FF 
075f0     20 64 86 F1 | 	sub	objptr, ##2080
075f4     32 95 02 FB | 	rdlong	arg02, objptr
075f8     54 97 02 F6 | 	mov	arg03, local02
075fc     39 00 00 FF 
07600     10 65 86 F1 | 	sub	objptr, ##29456
07604     28 C8 B1 FD | 	call	#_psram_spin2_write
07608     2D 00 00 FF 
0760c     D4 64 06 F1 | 	add	objptr, ##23252
07610     32 93 02 FB | 	rdlong	arg01, objptr
07614     0C 00 00 FF 
07618     3C 64 06 F1 | 	add	objptr, ##6204
0761c     32 95 02 FB | 	rdlong	arg02, objptr
07620     54 95 02 F1 | 	add	arg02, local02
07624     53 97 02 F6 | 	mov	arg03, local01
07628     39 00 00 FF 
0762c     10 65 86 F1 | 	sub	objptr, ##29456
07630     FC C7 B1 FD | 	call	#_psram_spin2_write
07634     39 00 00 FF 
07638     10 65 06 F1 | 	add	objptr, ##29456
0763c     32 A7 02 FB | 	rdlong	local01, objptr
07640     55 A7 02 F1 | 	add	local01, local03
07644     32 A7 62 FC | 	wrlong	local01, objptr
07648     44 00 00 FF 
0764c     DC 65 86 F1 | 	sub	objptr, ##35292
07650     E7 F0 03 F6 | 	mov	ptra, fp
07654     F2 00 A0 FD | 	call	#popregs_
07658                 | _save_line_ret
07658     2D 00 64 FD | 	ret
0765c                 | 
0765c                 | ' 
0765c                 | ' '----- Insert a new line into the middle of the program
0765c                 | ' 
0765c                 | ' function insertline(aline as ulong) as integer
0765c                 | _insertline
0765c     04 CA 05 F6 | 	mov	COUNT_, #4
07660     E8 00 A0 FD | 	call	#pushregs_
07664     28 F0 07 F1 | 	add	ptra, #40
07668     49 A7 02 F6 | 	mov	local01, arg01
0766c     4C 00 00 FF 
07670     08 64 06 F1 | 	add	objptr, ##38920
07674     32 A9 02 FB | 	rdlong	local02, objptr
07678                 | ' 
07678                 | ' do
07678     40 00 00 FF 
0767c     3C 65 86 F1 | 	sub	objptr, ##33084
07680                 | LR__0640
07680     E7 92 02 F6 | 	mov	arg01, fp
07684     10 92 06 F1 | 	add	arg01, #16
07688     54 95 02 F6 | 	mov	arg02, local02
0768c     18 96 06 F6 | 	mov	arg03, #24
07690     00 C7 B1 FD | 	call	#_psram_spin2_read1
07694     54 AB 02 F6 | 	mov	local03, local02
07698     24 CE 05 F1 | 	add	fp, #36
0769c     E7 A8 02 FB | 	rdlong	local02, fp
076a0     14 CE 85 F1 | 	sub	fp, #20
076a4     E7 96 02 FB | 	rdlong	arg03, fp
076a8     10 CE 85 F1 | 	sub	fp, #16
076ac     53 97 12 F2 | 	cmp	arg03, local01 wc
076b0     24 CE 05 C1 |  if_b	add	fp, #36
076b4     E7 AC 02 CB |  if_b	rdlong	local04, fp
076b8     24 CE 85 C1 |  if_b	sub	fp, #36
076bc     FF FF 3F CF 
076c0     FF AD 0E C2 |  if_b	cmp	local04, ##2147483647 wz
076c4     B8 FF 9F 4D |  if_c_and_nz	jmp	#LR__0640
076c8     0B 00 00 FF 
076cc     CC 64 86 F1 | 	sub	objptr, ##5836
076d0                 | ' 
076d0                 | ' if header(0)=aline then return -1 				' delete it first
076d0     10 CE 05 F1 | 	add	fp, #16
076d4     E7 AC 02 FB | 	rdlong	local04, fp
076d8     10 CE 85 F1 | 	sub	fp, #16
076dc     53 AD 0A F2 | 	cmp	local04, local01 wz
076e0     01 7A 66 A6 |  if_e	neg	result1, #1
076e4     24 01 90 AD |  if_e	jmp	#LR__0643
076e8                 | ' if header(0)<aline then return -2 				' end of program reached
076e8     10 CE 05 F1 | 	add	fp, #16
076ec     E7 AC 02 FB | 	rdlong	local04, fp
076f0     10 CE 85 F1 | 	sub	fp, #16
076f4     53 AD 12 F2 | 	cmp	local04, local01 wc
076f8     02 7A 66 C6 |  if_b	neg	result1, #2
076fc     0C 01 90 CD |  if_b	jmp	#LR__0643
07700                 | ' 
07700                 | ' if  header(4)=$FFFF_FFFF then 					' this is the first line in the program so the inserted line will be new first
07700     20 CE 05 F1 | 	add	fp, #32
07704     E7 AC 02 FB | 	rdlong	local04, fp
07708     20 CE 85 F1 | 	sub	fp, #32
0770c     FF FF 7F FF 
07710     FF AD 0E F2 | 	cmp	local04, ##-1 wz
07714     64 00 90 5D |  if_ne	jmp	#LR__0641
07718     44 00 00 FF 
0771c     DC 65 06 F1 | 	add	objptr, ##35292
07720     32 AD 02 FB | 	rdlong	local04, objptr
07724     07 00 00 FF 
07728     2C 64 06 F1 | 	add	objptr, ##3628
0772c     32 AD 62 FC | 	wrlong	local04, objptr
07730     55 93 02 F6 | 	mov	arg01, local03
07734     10 92 06 F1 | 	add	arg01, #16
07738     07 00 00 FF 
0773c     2C 64 86 F1 | 	sub	objptr, ##3628
07740     32 95 02 FB | 	rdlong	arg02, objptr
07744     44 00 00 FF 
07748     DC 65 86 F1 | 	sub	objptr, ##35292
0774c     84 9A B1 FD | 	call	#_pslpoke
07750     49 00 00 FF 
07754     0C 64 06 F1 | 	add	objptr, ##37388
07758     FF FF FF FF 
0775c     32 FF 6B FC | 	wrlong	##-1, objptr
07760     04 64 06 F1 | 	add	objptr, #4
07764     32 AB 62 FC | 	wrlong	local03, objptr
07768     49 00 00 FF 
0776c     10 64 86 F1 | 	sub	objptr, ##37392
07770     DC FD BF FD | 	call	#_save_line
07774                 | '   programstart=programptr
07774                 | '   pslpoke(lineptr2+16,programptr)
07774                 | '   ucompiledline(4)=$FFFF_FFFF
07774                 | '   ucompiledline(5)=lineptr2
07774                 | '   save_line
07774                 | '   return 0
07774     00 7A 06 F6 | 	mov	result1, #0
07778     90 00 90 FD | 	jmp	#LR__0643
0777c                 | LR__0641
0777c                 | ' 
0777c                 | ' if header(4)<>$FFFF_FFFF then 					' this is not first line of the program. It doesn't matter if it is last as we will insert a new line before
0777c     20 CE 05 F1 | 	add	fp, #32
07780     E7 AC 02 FB | 	rdlong	local04, fp
07784     20 CE 85 F1 | 	sub	fp, #32
07788     FF FF 7F FF 
0778c     FF AD 0E F2 | 	cmp	local04, ##-1 wz
07790     74 00 90 AD |  if_e	jmp	#LR__0642
07794     20 CE 05 F1 | 	add	fp, #32
07798     E7 AC 02 FB | 	rdlong	local04, fp
0779c     20 CE 85 F1 | 	sub	fp, #32
077a0     49 00 00 FF 
077a4     0C 64 06 F1 | 	add	objptr, ##37388
077a8     32 AD 62 FC | 	wrlong	local04, objptr
077ac     04 64 06 F1 | 	add	objptr, #4
077b0     32 AB 62 FC | 	wrlong	local03, objptr
077b4     10 AA 06 F1 | 	add	local03, #16
077b8     04 00 00 FF 
077bc     34 64 86 F1 | 	sub	objptr, ##2100
077c0     32 95 02 FB | 	rdlong	arg02, objptr
077c4     44 00 00 FF 
077c8     DC 65 86 F1 | 	sub	objptr, ##35292
077cc     55 93 02 F6 | 	mov	arg01, local03
077d0     00 9A B1 FD | 	call	#_pslpoke
077d4     20 CE 05 F1 | 	add	fp, #32
077d8     E7 92 02 FB | 	rdlong	arg01, fp
077dc     20 CE 85 F1 | 	sub	fp, #32
077e0     14 92 06 F1 | 	add	arg01, #20
077e4     44 00 00 FF 
077e8     DC 65 06 F1 | 	add	objptr, ##35292
077ec     32 95 02 FB | 	rdlong	arg02, objptr
077f0     44 00 00 FF 
077f4     DC 65 86 F1 | 	sub	objptr, ##35292
077f8     D8 99 B1 FD | 	call	#_pslpoke
077fc     50 FD BF FD | 	call	#_save_line
07800                 | '   ucompiledline(4)=header(4)
07800                 | '   ucompiledline(5)=lineptr2
07800                 | '   pslpoke(lineptr2+16,programptr)
07800                 | '   pslpoke(header(4)+20,programptr)
07800                 | '   save_line
07800                 | '   return 0
07800     00 7A 06 F6 | 	mov	result1, #0
07804     04 00 90 FD | 	jmp	#LR__0643
07808                 | LR__0642
07808     00 7A 06 F6 | 	mov	result1, #0
0780c                 | LR__0643
0780c     E7 F0 03 F6 | 	mov	ptra, fp
07810     F2 00 A0 FD | 	call	#popregs_
07814                 | _insertline_ret
07814     2D 00 64 FD | 	ret
07818                 | 
07818                 | ' 
07818                 | ' '----- Adds a new line at the end of the program
07818                 | ' 
07818                 | ' sub add_line_at_end(aline) 
07818                 | _add_line_at_end
07818     4C 00 00 FF 
0781c     0C 64 06 F1 | 	add	objptr, ##38924
07820     32 93 62 FC | 	wrlong	arg01, objptr
07824     04 64 06 F1 | 	add	objptr, #4
07828     32 95 02 FB | 	rdlong	arg02, objptr
0782c     03 00 00 FF 
07830     04 64 86 F1 | 	sub	objptr, ##1540
07834     32 95 62 FC | 	wrlong	arg02, objptr
07838     03 00 00 FF 
0783c     04 64 06 F1 | 	add	objptr, ##1540
07840     32 93 02 FB | 	rdlong	arg01, objptr
07844     14 92 06 F1 | 	add	arg01, #20
07848     07 00 00 FF 
0784c     34 64 86 F1 | 	sub	objptr, ##3636
07850     32 95 02 FB | 	rdlong	arg02, objptr
07854     44 00 00 FF 
07858     DC 65 86 F1 | 	sub	objptr, ##35292
0785c     74 99 B1 FD | 	call	#_pslpoke
07860     44 00 00 FF 
07864     DC 65 06 F1 | 	add	objptr, ##35292
07868     32 95 02 FB | 	rdlong	arg02, objptr
0786c     07 00 00 FF 
07870     34 64 06 F1 | 	add	objptr, ##3636
07874     32 95 62 FC | 	wrlong	arg02, objptr
07878     03 00 00 FF 
0787c     00 64 86 F1 | 	sub	objptr, ##1536
07880     FF FF BF FF 
07884     32 FF 6B FC | 	wrlong	##2147483647, objptr
07888                 | ' 
07888                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
07888                 | ' if programptr=memlo then ucompiledline(4)=$FFFFFFFF ' that is the first line
07888     04 00 00 FF 
0788c     34 64 86 F1 | 	sub	objptr, ##2100
07890     32 95 02 FB | 	rdlong	arg02, objptr
07894     44 00 00 FF 
07898     DC 65 86 F1 | 	sub	objptr, ##35292
0789c     00 04 00 FF 
078a0     00 94 0E F2 | 	cmp	arg02, ##524288 wz
078a4     49 00 00 AF 
078a8     0C 64 06 A1 |  if_e	add	objptr, ##37388
078ac     FF FF FF AF 
078b0     32 FF 6B AC |  if_e	wrlong	##-1, objptr
078b4     49 00 00 AF 
078b8     0C 64 86 A1 |  if_e	sub	objptr, ##37388
078bc     90 FC BF FD | 	call	#_save_line
078c0     44 00 00 FF 
078c4     DC 65 06 F1 | 	add	objptr, ##35292
078c8     32 93 02 FB | 	rdlong	arg01, objptr
078cc     44 00 00 FF 
078d0     DC 65 86 F1 | 	sub	objptr, ##35292
078d4     01 94 66 F6 | 	neg	arg02, #1
078d8     F8 98 B1 FD | 	call	#_pslpoke
078dc                 | _add_line_at_end_ret
078dc     2D 00 64 FD | 	ret
078e0                 | 
078e0                 | ' 
078e0                 | ' '--------------------------------------------------------------------------------------------------------------------------
078e0                 | ' '---------------------------------- End of line managing helper functions -------------------------------------------------
078e0                 | ' '--------------------------------------------------------------------------------------------------------------------------
078e0                 | ' 
078e0                 | ' '--------------------------------------------------------------------------------------------------------------------------
078e0                 | ' '--------------------------------------- Compilers ------------------------------------------------------------------------
078e0                 | ' '--------------------------------------------------------------------------------------------------------------------------
078e0                 | ' 
078e0                 | ' '--- Do a main compilation task for commands, called from compile(), returns an error code
078e0                 | ' 
078e0                 | ' function compile_immediate(linetype as ulong, aline as ulong) as integer
078e0                 | _compile_immediate
078e0     0A CA 05 F6 | 	mov	COUNT_, #10
078e4     E8 00 A0 FD | 	call	#pushregs_
078e8                 | _compile_immediate_enter
078e8     49 AD 02 F6 | 	mov	local04, arg01
078ec     4A AF 02 F6 | 	mov	local05, arg02
078f0     00 B0 06 F6 | 	mov	local06, #0
078f4     00 B2 06 F6 | 	mov	local07, #0
078f8     00 B4 06 F6 | 	mov	local08, #0
078fc                 | ' 
078fc                 | ' ' linetype=cont+1
078fc                 | ' ' 1 : this is the first part of the line that will continue
078fc                 | ' ' 2 - this is the continuation of the line
078fc                 | ' ' 3 - this is the last continued line
078fc                 | ' ' 4 - this is the one and only part
078fc                 | ' ' 5 - continued after if/else
078fc                 | ' 
078fc                 | ' err=0
078fc                 | ' cmd=0
078fc                 | ' vars=0
078fc                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 
078fc     02 AC 0E F2 | 	cmp	local04, #2 wz
07900     03 AC 0E 52 |  if_ne	cmp	local04, #3 wz
07904     36 00 00 AF 
07908     90 65 06 A1 |  if_e	add	objptr, ##28048
0790c     32 B3 02 AB |  if_e	rdlong	local07, objptr
07910     02 00 00 AF 
07914     34 64 06 A1 |  if_e	add	objptr, ##1076
07918     32 03 68 AC |  if_e	wrlong	#1, objptr
0791c     38 00 00 AF 
07920     C4 65 86 A1 |  if_e	sub	objptr, ##29124
07924                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
07924     04 AC 0E F2 | 	cmp	local04, #4 wz
07928     01 AC 0E 52 |  if_ne	cmp	local04, #1 wz
0792c     2C 00 90 5D |  if_ne	jmp	#LR__0650
07930     36 00 00 FF 
07934     98 65 06 F1 | 	add	objptr, ##28056
07938     32 B3 02 FB | 	rdlong	local07, objptr
0793c     02 00 00 FF 
07940     2C 64 06 F1 | 	add	objptr, ##1068
07944     32 05 68 FC | 	wrlong	#2, objptr
07948     13 00 00 FF 
0794c     38 64 06 F1 | 	add	objptr, ##9784
07950     32 05 68 FC | 	wrlong	#2, objptr
07954     4B 00 00 FF 
07958     FC 65 86 F1 | 	sub	objptr, ##38908
0795c                 | LR__0650
0795c                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 
0795c     05 AC 0E F2 | 	cmp	local04, #5 wz
07960     40 00 90 5D |  if_ne	jmp	#LR__0651
07964     38 00 00 FF 
07968     C4 65 06 F1 | 	add	objptr, ##29124
0796c     32 7D 02 FB | 	rdlong	result2, objptr
07970     3E B7 02 F6 | 	mov	local09, result2
07974     03 B6 66 F0 | 	shl	local09, #3
07978     02 00 00 FF 
0797c     38 64 86 F1 | 	sub	objptr, ##1080
07980     32 B7 02 F1 | 	add	local09, objptr
07984     04 B6 06 F1 | 	add	local09, #4
07988     5B B3 02 FB | 	rdlong	local07, local09
0798c     01 7C 06 F1 | 	add	result2, #1
07990     02 00 00 FF 
07994     38 64 06 F1 | 	add	objptr, ##1080
07998     32 7D 62 FC | 	wrlong	result2, objptr
0799c     38 00 00 FF 
079a0     C4 65 86 F1 | 	sub	objptr, ##29124
079a4                 | LR__0651
079a4                 | ' 
079a4                 | ' 'print  "In compile_immediate cmd=:", cmd
079a4                 | ' 451 select case cmd
079a4     5C B2 0E F2 | 	cmp	local07, #92 wz
079a8     E8 02 90 AD |  if_e	jmp	#LR__0652
079ac     B9 B2 0E F2 | 	cmp	local07, #185 wz
079b0     EC 02 90 AD |  if_e	jmp	#LR__0653
079b4     47 B2 0E F2 | 	cmp	local07, #71 wz
079b8     F4 02 90 AD |  if_e	jmp	#LR__0654
079bc     59 B2 0E F2 | 	cmp	local07, #89 wz
079c0     FC 02 90 AD |  if_e	jmp	#LR__0655
079c4     C3 B2 0E F2 | 	cmp	local07, #195 wz
079c8     04 03 90 AD |  if_e	jmp	#LR__0656
079cc     45 B2 0E F2 | 	cmp	local07, #69 wz
079d0     08 03 90 AD |  if_e	jmp	#LR__0657
079d4     69 B2 0E F2 | 	cmp	local07, #105 wz
079d8     10 03 90 AD |  if_e	jmp	#LR__0658
079dc     40 B2 0E F2 | 	cmp	local07, #64 wz
079e0     18 07 90 AD |  if_e	jmp	#LR__0735
079e4     B4 B2 0E F2 | 	cmp	local07, #180 wz
079e8     0C 03 90 AD |  if_e	jmp	#LR__0659
079ec     49 B2 0E F2 | 	cmp	local07, #73 wz
079f0     10 03 90 AD |  if_e	jmp	#LR__0660
079f4     C4 B2 0E F2 | 	cmp	local07, #196 wz
079f8     14 03 90 AD |  if_e	jmp	#LR__0661
079fc     AE B2 0E F2 | 	cmp	local07, #174 wz
07a00     18 03 90 AD |  if_e	jmp	#LR__0662
07a04     B0 B2 0E F2 | 	cmp	local07, #176 wz
07a08     1C 03 90 AD |  if_e	jmp	#LR__0663
07a0c     AF B2 0E F2 | 	cmp	local07, #175 wz
07a10     20 03 90 AD |  if_e	jmp	#LR__0664
07a14     B1 B2 0E F2 | 	cmp	local07, #177 wz
07a18     24 03 90 AD |  if_e	jmp	#LR__0665
07a1c     CF B2 0E F2 | 	cmp	local07, #207 wz
07a20     28 03 90 AD |  if_e	jmp	#LR__0666
07a24     68 B2 0E F2 | 	cmp	local07, #104 wz
07a28     2C 03 90 AD |  if_e	jmp	#LR__0667
07a2c     B7 B2 0E F2 | 	cmp	local07, #183 wz
07a30     C8 06 90 AD |  if_e	jmp	#LR__0735
07a34     D9 B2 0E F2 | 	cmp	local07, #217 wz
07a38     28 03 90 AD |  if_e	jmp	#LR__0668
07a3c     74 B2 0E F2 | 	cmp	local07, #116 wz
07a40     2C 03 90 AD |  if_e	jmp	#LR__0669
07a44     73 B2 0E F2 | 	cmp	local07, #115 wz
07a48     34 03 90 AD |  if_e	jmp	#LR__0670
07a4c     6C B2 0E F2 | 	cmp	local07, #108 wz
07a50     3C 03 90 AD |  if_e	jmp	#LR__0671
07a54     89 B2 0E F2 | 	cmp	local07, #137 wz
07a58     A0 06 90 AD |  if_e	jmp	#LR__0735
07a5c     C2 B2 0E F2 | 	cmp	local07, #194 wz
07a60     3C 03 90 AD |  if_e	jmp	#LR__0672
07a64     72 B2 0E F2 | 	cmp	local07, #114 wz
07a68     40 03 90 AD |  if_e	jmp	#LR__0673
07a6c     5D B2 0E F2 | 	cmp	local07, #93 wz
07a70     44 03 90 AD |  if_e	jmp	#LR__0674
07a74     96 B2 0E F2 | 	cmp	local07, #150 wz
07a78     4C 03 90 AD |  if_e	jmp	#LR__0675
07a7c     43 B2 0E F2 | 	cmp	local07, #67 wz
07a80     50 03 90 AD |  if_e	jmp	#LR__0676
07a84     5A B2 0E F2 | 	cmp	local07, #90 wz
07a88     58 03 90 AD |  if_e	jmp	#LR__0677
07a8c     AB B2 0E F2 | 	cmp	local07, #171 wz
07a90     68 06 90 AD |  if_e	jmp	#LR__0735
07a94     BD B2 0E F2 | 	cmp	local07, #189 wz
07a98     58 03 90 AD |  if_e	jmp	#LR__0678
07a9c     BB B2 0E F2 | 	cmp	local07, #187 wz
07aa0     60 03 90 AD |  if_e	jmp	#LR__0679
07aa4     4E B2 0E F2 | 	cmp	local07, #78 wz
07aa8     68 03 90 AD |  if_e	jmp	#LR__0680
07aac     A9 B2 0E F2 | 	cmp	local07, #169 wz
07ab0     80 03 90 AD |  if_e	jmp	#LR__0682
07ab4     46 B2 0E F2 | 	cmp	local07, #70 wz
07ab8     98 03 90 AD |  if_e	jmp	#LR__0684
07abc     71 B2 0E F2 | 	cmp	local07, #113 wz
07ac0     A0 03 90 AD |  if_e	jmp	#LR__0685
07ac4     60 B2 0E F2 | 	cmp	local07, #96 wz
07ac8     A4 03 90 AD |  if_e	jmp	#LR__0686
07acc     4A B2 0E F2 | 	cmp	local07, #74 wz
07ad0     A8 03 90 AD |  if_e	jmp	#LR__0687
07ad4     48 B2 0E F2 | 	cmp	local07, #72 wz
07ad8     AC 03 90 AD |  if_e	jmp	#LR__0688
07adc     58 B2 0E F2 | 	cmp	local07, #88 wz
07ae0     B4 03 90 AD |  if_e	jmp	#LR__0689
07ae4     5F B2 0E F2 | 	cmp	local07, #95 wz
07ae8     BC 03 90 AD |  if_e	jmp	#LR__0690
07aec     B5 B2 0E F2 | 	cmp	local07, #181 wz
07af0     C0 03 90 AD |  if_e	jmp	#LR__0691
07af4     8A B2 0E F2 | 	cmp	local07, #138 wz
07af8     C8 03 90 AD |  if_e	jmp	#LR__0692
07afc     4C B2 0E F2 | 	cmp	local07, #76 wz
07b00     CC 03 90 AD |  if_e	jmp	#LR__0693
07b04     52 B2 0E F2 | 	cmp	local07, #82 wz
07b08     D4 03 90 AD |  if_e	jmp	#LR__0694
07b0c     97 B2 0E F2 | 	cmp	local07, #151 wz
07b10     DC 03 90 AD |  if_e	jmp	#LR__0695
07b14     C6 B2 0E F2 | 	cmp	local07, #198 wz
07b18     E0 03 90 AD |  if_e	jmp	#LR__0696
07b1c     61 B2 0E F2 | 	cmp	local07, #97 wz
07b20     E4 03 90 AD |  if_e	jmp	#LR__0697
07b24     63 B2 0E F2 | 	cmp	local07, #99 wz
07b28     E8 03 90 AD |  if_e	jmp	#LR__0698
07b2c     41 B2 0E F2 | 	cmp	local07, #65 wz
07b30     C8 05 90 AD |  if_e	jmp	#LR__0735
07b34     4B B2 0E F2 | 	cmp	local07, #75 wz
07b38     E4 03 90 AD |  if_e	jmp	#LR__0699
07b3c     C1 B2 0E F2 | 	cmp	local07, #193 wz
07b40     E8 03 90 AD |  if_e	jmp	#LR__0700
07b44     B3 B2 0E F2 | 	cmp	local07, #179 wz
07b48     EC 03 90 AD |  if_e	jmp	#LR__0701
07b4c     5E B2 0E F2 | 	cmp	local07, #94 wz
07b50     F0 03 90 AD |  if_e	jmp	#LR__0702
07b54     7C B2 0E F2 | 	cmp	local07, #124 wz
07b58     F4 03 90 AD |  if_e	jmp	#LR__0703
07b5c     7D B2 0E F2 | 	cmp	local07, #125 wz
07b60     F8 03 90 AD |  if_e	jmp	#LR__0704
07b64     7E B2 0E F2 | 	cmp	local07, #126 wz
07b68     FC 03 90 AD |  if_e	jmp	#LR__0705
07b6c     7F B2 0E F2 | 	cmp	local07, #127 wz
07b70     00 04 90 AD |  if_e	jmp	#LR__0706
07b74     80 B2 0E F2 | 	cmp	local07, #128 wz
07b78     04 04 90 AD |  if_e	jmp	#LR__0707
07b7c     55 B2 0E F2 | 	cmp	local07, #85 wz
07b80     08 04 90 AD |  if_e	jmp	#LR__0708
07b84     75 B2 0E F2 | 	cmp	local07, #117 wz
07b88     0C 04 90 AD |  if_e	jmp	#LR__0709
07b8c     42 B2 0E F2 | 	cmp	local07, #66 wz
07b90     14 04 90 AD |  if_e	jmp	#LR__0710
07b94     95 B2 0E F2 | 	cmp	local07, #149 wz
07b98     1C 04 90 AD |  if_e	jmp	#LR__0711
07b9c     AC B2 0E F2 | 	cmp	local07, #172 wz
07ba0     58 05 90 AD |  if_e	jmp	#LR__0735
07ba4     81 B2 0E F2 | 	cmp	local07, #129 wz
07ba8     18 04 90 AD |  if_e	jmp	#LR__0712
07bac     44 B2 0E F2 | 	cmp	local07, #68 wz
07bb0     1C 04 90 AD |  if_e	jmp	#LR__0713
07bb4     BC B2 0E F2 | 	cmp	local07, #188 wz
07bb8     20 04 90 AD |  if_e	jmp	#LR__0714
07bbc     88 B2 0E F2 | 	cmp	local07, #136 wz
07bc0     38 05 90 AD |  if_e	jmp	#LR__0735
07bc4     B6 B2 0E F2 | 	cmp	local07, #182 wz
07bc8     20 04 90 AD |  if_e	jmp	#LR__0715
07bcc     92 B2 0E F2 | 	cmp	local07, #146 wz
07bd0     28 04 90 AD |  if_e	jmp	#LR__0716
07bd4     BE B2 0E F2 | 	cmp	local07, #190 wz
07bd8     DC 05 90 AD |  if_e	jmp	#LR__0736
07bdc     C7 B2 0E F2 | 	cmp	local07, #199 wz
07be0     D4 B2 0E 52 |  if_ne	cmp	local07, #212 wz
07be4     AA B2 0E 52 |  if_ne	cmp	local07, #170 wz
07be8     10 05 90 AD |  if_e	jmp	#LR__0735
07bec     4D B2 0E F2 | 	cmp	local07, #77 wz
07bf0     14 04 90 AD |  if_e	jmp	#LR__0717
07bf4     51 B2 0E F2 | 	cmp	local07, #81 wz
07bf8     1C 04 90 AD |  if_e	jmp	#LR__0718
07bfc     DA B2 0E F2 | 	cmp	local07, #218 wz
07c00     24 04 90 AD |  if_e	jmp	#LR__0719
07c04     D2 B2 0E F2 | 	cmp	local07, #210 wz
07c08     28 04 90 AD |  if_e	jmp	#LR__0720
07c0c     8E B2 0E F2 | 	cmp	local07, #142 wz
07c10     30 04 90 AD |  if_e	jmp	#LR__0721
07c14     90 B2 0E F2 | 	cmp	local07, #144 wz
07c18     34 04 90 AD |  if_e	jmp	#LR__0722
07c1c     8D B2 0E F2 | 	cmp	local07, #141 wz
07c20     38 04 90 AD |  if_e	jmp	#LR__0723
07c24     8C B2 0E F2 | 	cmp	local07, #140 wz
07c28     3C 04 90 AD |  if_e	jmp	#LR__0724
07c2c     91 B2 0E F2 | 	cmp	local07, #145 wz
07c30     40 04 90 AD |  if_e	jmp	#LR__0725
07c34     8B B2 0E F2 | 	cmp	local07, #139 wz
07c38     44 04 90 AD |  if_e	jmp	#LR__0726
07c3c     8F B2 0E F2 | 	cmp	local07, #143 wz
07c40     48 04 90 AD |  if_e	jmp	#LR__0727
07c44     B2 B2 0E F2 | 	cmp	local07, #178 wz
07c48     4C 04 90 AD |  if_e	jmp	#LR__0728
07c4c     6D B2 0E F2 | 	cmp	local07, #109 wz
07c50     54 04 90 AD |  if_e	jmp	#LR__0729
07c54     70 B2 0E F2 | 	cmp	local07, #112 wz
07c58     A0 04 90 AD |  if_e	jmp	#LR__0735
07c5c     56 B2 0E F2 | 	cmp	local07, #86 wz
07c60     50 04 90 AD |  if_e	jmp	#LR__0730
07c64     57 B2 0E F2 | 	cmp	local07, #87 wz
07c68     90 04 90 AD |  if_e	jmp	#LR__0735
07c6c     79 B2 0E F2 | 	cmp	local07, #121 wz
07c70     4C 04 90 AD |  if_e	jmp	#LR__0731
07c74     77 B2 0E F2 | 	cmp	local07, #119 wz
07c78     50 04 90 AD |  if_e	jmp	#LR__0732
07c7c     78 B2 0E F2 | 	cmp	local07, #120 wz
07c80     54 04 90 AD |  if_e	jmp	#LR__0733
07c84     01 00 00 FF 
07c88     04 B2 0E F2 | 	cmp	local07, ##516 wz
07c8c     54 04 90 AD |  if_e	jmp	#LR__0734
07c90     24 05 90 FD | 	jmp	#LR__0736
07c94                 | LR__0652
07c94     54 0B B0 FD | 	call	#_compile_fun_2p
07c98     3D B1 02 F6 | 	mov	local06, result1
07c9c     5C 04 90 FD | 	jmp	#LR__0735
07ca0                 | LR__0653
07ca0     18 0E B0 FD | 	call	#_compile_fun_varp
07ca4     3D B5 02 F6 | 	mov	local08, result1
07ca8     3E B1 02 F6 | 	mov	local06, result2
07cac     4C 04 90 FD | 	jmp	#LR__0735
07cb0                 | LR__0654
07cb0     08 0E B0 FD | 	call	#_compile_fun_varp
07cb4     3D B5 02 F6 | 	mov	local08, result1
07cb8     3E B1 02 F6 | 	mov	local06, result2
07cbc     3C 04 90 FD | 	jmp	#LR__0735
07cc0                 | LR__0655
07cc0     F8 0D B0 FD | 	call	#_compile_fun_varp
07cc4     3D B5 02 F6 | 	mov	local08, result1
07cc8     3E B1 02 F6 | 	mov	local06, result2
07ccc     2C 04 90 FD | 	jmp	#LR__0735
07cd0                 | LR__0656
07cd0                 | ' return expr()
07cd0     84 41 B0 FD | 	call	#_expr
07cd4     3D B1 02 F6 | 	mov	local06, result1
07cd8     20 04 90 FD | 	jmp	#LR__0735
07cdc                 | LR__0657
07cdc     DC 0D B0 FD | 	call	#_compile_fun_varp
07ce0     3D B5 02 F6 | 	mov	local08, result1
07ce4     3E B1 02 F6 | 	mov	local06, result2
07ce8     10 04 90 FD | 	jmp	#LR__0735
07cec                 | LR__0658
07cec                 | ' return expr()
07cec     68 41 B0 FD | 	call	#_expr
07cf0     3D B1 02 F6 | 	mov	local06, result1
07cf4     04 04 90 FD | 	jmp	#LR__0735
07cf8                 | LR__0659
07cf8                 | ' return expr()
07cf8     5C 41 B0 FD | 	call	#_expr
07cfc     3D B1 02 F6 | 	mov	local06, result1
07d00     F8 03 90 FD | 	jmp	#LR__0735
07d04                 | LR__0660
07d04                 | ' return expr()
07d04     50 41 B0 FD | 	call	#_expr
07d08     3D B1 02 F6 | 	mov	local06, result1
07d0c     EC 03 90 FD | 	jmp	#LR__0735
07d10                 | LR__0661
07d10     D8 0A B0 FD | 	call	#_compile_fun_2p
07d14     3D B1 02 F6 | 	mov	local06, result1
07d18     E0 03 90 FD | 	jmp	#LR__0735
07d1c                 | LR__0662
07d1c     CC 0A B0 FD | 	call	#_compile_fun_2p
07d20     3D B1 02 F6 | 	mov	local06, result1
07d24     D4 03 90 FD | 	jmp	#LR__0735
07d28                 | LR__0663
07d28     C0 0A B0 FD | 	call	#_compile_fun_2p
07d2c     3D B1 02 F6 | 	mov	local06, result1
07d30     C8 03 90 FD | 	jmp	#LR__0735
07d34                 | LR__0664
07d34     B4 0A B0 FD | 	call	#_compile_fun_2p
07d38     3D B1 02 F6 | 	mov	local06, result1
07d3c     BC 03 90 FD | 	jmp	#LR__0735
07d40                 | LR__0665
07d40     A8 0A B0 FD | 	call	#_compile_fun_2p
07d44     3D B1 02 F6 | 	mov	local06, result1
07d48     B0 03 90 FD | 	jmp	#LR__0735
07d4c                 | LR__0666
07d4c                 | ' return expr()
07d4c     08 41 B0 FD | 	call	#_expr
07d50     3D B1 02 F6 | 	mov	local06, result1
07d54     A4 03 90 FD | 	jmp	#LR__0735
07d58                 | LR__0667
07d58                 | ' return expr()
07d58     FC 40 B0 FD | 	call	#_expr
07d5c     3D B1 02 F6 | 	mov	local06, result1
07d60     98 03 90 FD | 	jmp	#LR__0735
07d64                 | LR__0668
07d64     84 0A B0 FD | 	call	#_compile_fun_2p
07d68     3D B1 02 F6 | 	mov	local06, result1
07d6c     8C 03 90 FD | 	jmp	#LR__0735
07d70                 | LR__0669
07d70     48 0D B0 FD | 	call	#_compile_fun_varp
07d74     3D B5 02 F6 | 	mov	local08, result1
07d78     3E B1 02 F6 | 	mov	local06, result2
07d7c     7C 03 90 FD | 	jmp	#LR__0735
07d80                 | LR__0670
07d80     38 0D B0 FD | 	call	#_compile_fun_varp
07d84     3D B5 02 F6 | 	mov	local08, result1
07d88     3E B1 02 F6 | 	mov	local06, result2
07d8c     6C 03 90 FD | 	jmp	#LR__0735
07d90                 | LR__0671
07d90     28 0D B0 FD | 	call	#_compile_fun_varp
07d94     3D B5 02 F6 | 	mov	local08, result1
07d98     3E B1 02 F6 | 	mov	local06, result2
07d9c     5C 03 90 FD | 	jmp	#LR__0735
07da0                 | LR__0672
07da0                 | ' return expr()
07da0     B4 40 B0 FD | 	call	#_expr
07da4     3D B1 02 F6 | 	mov	local06, result1
07da8     50 03 90 FD | 	jmp	#LR__0735
07dac                 | LR__0673
07dac     2C 22 B0 FD | 	call	#_compile_dim
07db0     3D B1 02 F6 | 	mov	local06, result1
07db4     00 04 90 FD | 	jmp	#LR__0736
07db8                 | LR__0674
07db8     00 0D B0 FD | 	call	#_compile_fun_varp
07dbc     3D B5 02 F6 | 	mov	local08, result1
07dc0     3E B1 02 F6 | 	mov	local06, result2
07dc4     34 03 90 FD | 	jmp	#LR__0735
07dc8                 | LR__0675
07dc8     20 0A B0 FD | 	call	#_compile_fun_2p
07dcc     3D B1 02 F6 | 	mov	local06, result1
07dd0     28 03 90 FD | 	jmp	#LR__0735
07dd4                 | LR__0676
07dd4     E4 0C B0 FD | 	call	#_compile_fun_varp
07dd8     3D B5 02 F6 | 	mov	local08, result1
07ddc     3E B1 02 F6 | 	mov	local06, result2
07de0     18 03 90 FD | 	jmp	#LR__0735
07de4                 | LR__0677
07de4     57 93 02 F6 | 	mov	arg01, local05
07de8     B8 20 B0 FD | 	call	#_compile_else
07dec     3D B1 02 F6 | 	mov	local06, result1
07df0     C4 03 90 FD | 	jmp	#LR__0736
07df4                 | LR__0678
07df4     C4 0C B0 FD | 	call	#_compile_fun_varp
07df8     3D B5 02 F6 | 	mov	local08, result1
07dfc     3E B1 02 F6 | 	mov	local06, result2
07e00     F8 02 90 FD | 	jmp	#LR__0735
07e04                 | LR__0679
07e04     B4 0C B0 FD | 	call	#_compile_fun_varp
07e08     3D B5 02 F6 | 	mov	local08, result1
07e0c     3E B1 02 F6 | 	mov	local06, result2
07e10     E8 02 90 FD | 	jmp	#LR__0735
07e14                 | LR__0680
07e14     01 AE 16 F2 | 	cmp	local05, #1 wc
07e18     08 00 90 CD |  if_b	jmp	#LR__0681
07e1c     40 33 B0 FD | 	call	#_compile_goto
07e20     94 03 90 FD | 	jmp	#LR__0736
07e24                 | LR__0681
07e24     19 92 06 F6 | 	mov	arg01, #25
07e28     00 94 06 F6 | 	mov	arg02, #0
07e2c     08 92 B1 FD | 	call	#_printerror
07e30     84 03 90 FD | 	jmp	#LR__0736
07e34                 | LR__0682
07e34     01 AE 16 F2 | 	cmp	local05, #1 wc
07e38     08 00 90 CD |  if_b	jmp	#LR__0683
07e3c     BC 32 B0 FD | 	call	#_compile_gosub
07e40     74 03 90 FD | 	jmp	#LR__0736
07e44                 | LR__0683
07e44     19 92 06 F6 | 	mov	arg01, #25
07e48     00 94 06 F6 | 	mov	arg02, #0
07e4c     E8 91 B1 FD | 	call	#_printerror
07e50     64 03 90 FD | 	jmp	#LR__0736
07e54                 | LR__0684
07e54     64 0C B0 FD | 	call	#_compile_fun_varp
07e58     3D B5 02 F6 | 	mov	local08, result1
07e5c     3E B1 02 F6 | 	mov	local06, result2
07e60     98 02 90 FD | 	jmp	#LR__0735
07e64                 | LR__0685
07e64     FC 0A B0 FD | 	call	#_compile_fun_4p
07e68     3D B1 02 F6 | 	mov	local06, result1
07e6c     8C 02 90 FD | 	jmp	#LR__0735
07e70                 | LR__0686
07e70                 | ' return expr()
07e70     E4 3F B0 FD | 	call	#_expr
07e74     3D B1 02 F6 | 	mov	local06, result1
07e78     80 02 90 FD | 	jmp	#LR__0735
07e7c                 | LR__0687
07e7c     10 28 B0 FD | 	call	#_compile_for
07e80     3D B1 02 F6 | 	mov	local06, result1
07e84     30 03 90 FD | 	jmp	#LR__0736
07e88                 | LR__0688
07e88     30 0C B0 FD | 	call	#_compile_fun_varp
07e8c     3D B5 02 F6 | 	mov	local08, result1
07e90     3E B1 02 F6 | 	mov	local06, result2
07e94     64 02 90 FD | 	jmp	#LR__0735
07e98                 | LR__0689
07e98     57 93 02 F6 | 	mov	arg01, local05
07e9c     7C 1E B0 FD | 	call	#_compile_if
07ea0     3D B1 02 F6 | 	mov	local06, result1
07ea4     10 03 90 FD | 	jmp	#LR__0736
07ea8                 | LR__0690
07ea8                 | ' return expr()
07ea8     AC 3F B0 FD | 	call	#_expr
07eac     3D B1 02 F6 | 	mov	local06, result1
07eb0     48 02 90 FD | 	jmp	#LR__0735
07eb4                 | LR__0691
07eb4     D0 0D B0 FD | 	call	#_compile_input
07eb8     3D B5 02 F6 | 	mov	local08, result1
07ebc     3E B1 02 F6 | 	mov	local06, result2
07ec0     38 02 90 FD | 	jmp	#LR__0735
07ec4                 | LR__0692
07ec4                 | ' return expr()
07ec4     90 3F B0 FD | 	call	#_expr
07ec8     3D B1 02 F6 | 	mov	local06, result1
07ecc     2C 02 90 FD | 	jmp	#LR__0735
07ed0                 | LR__0693
07ed0     E8 0B B0 FD | 	call	#_compile_fun_varp
07ed4     3D B5 02 F6 | 	mov	local08, result1
07ed8     3E B1 02 F6 | 	mov	local06, result2
07edc     1C 02 90 FD | 	jmp	#LR__0735
07ee0                 | LR__0694
07ee0     D8 0B B0 FD | 	call	#_compile_fun_varp
07ee4     3D B5 02 F6 | 	mov	local08, result1
07ee8     3E B1 02 F6 | 	mov	local06, result2
07eec     0C 02 90 FD | 	jmp	#LR__0735
07ef0                 | LR__0695
07ef0     F8 08 B0 FD | 	call	#_compile_fun_2p
07ef4     3D B1 02 F6 | 	mov	local06, result1
07ef8     00 02 90 FD | 	jmp	#LR__0735
07efc                 | LR__0696
07efc                 | ' return expr()
07efc     58 3F B0 FD | 	call	#_expr
07f00     3D B1 02 F6 | 	mov	local06, result1
07f04     F4 01 90 FD | 	jmp	#LR__0735
07f08                 | LR__0697
07f08                 | ' return expr()
07f08     4C 3F B0 FD | 	call	#_expr
07f0c     3D B1 02 F6 | 	mov	local06, result1
07f10     E8 01 90 FD | 	jmp	#LR__0735
07f14                 | LR__0698
07f14                 | ' return expr()
07f14     40 3F B0 FD | 	call	#_expr
07f18     3D B1 02 F6 | 	mov	local06, result1
07f1c     DC 01 90 FD | 	jmp	#LR__0735
07f20                 | LR__0699
07f20     44 30 B0 FD | 	call	#_compile_next
07f24     3D B1 02 F6 | 	mov	local06, result1
07f28     8C 02 90 FD | 	jmp	#LR__0736
07f2c                 | LR__0700
07f2c     A4 35 B0 FD | 	call	#_compile_on
07f30     3D B1 02 F6 | 	mov	local06, result1
07f34     80 02 90 FD | 	jmp	#LR__0736
07f38                 | LR__0701
07f38     38 09 B0 FD | 	call	#_compile_fun_3p
07f3c     3D B1 02 F6 | 	mov	local06, result1
07f40     B8 01 90 FD | 	jmp	#LR__0735
07f44                 | LR__0702
07f44                 | ' return expr()
07f44     10 3F B0 FD | 	call	#_expr
07f48     3D B1 02 F6 | 	mov	local06, result1
07f4c     AC 01 90 FD | 	jmp	#LR__0735
07f50                 | LR__0703
07f50                 | ' return expr()
07f50     04 3F B0 FD | 	call	#_expr
07f54     3D B1 02 F6 | 	mov	local06, result1
07f58     A0 01 90 FD | 	jmp	#LR__0735
07f5c                 | LR__0704
07f5c                 | ' return expr()
07f5c     F8 3E B0 FD | 	call	#_expr
07f60     3D B1 02 F6 | 	mov	local06, result1
07f64     94 01 90 FD | 	jmp	#LR__0735
07f68                 | LR__0705
07f68                 | ' return expr()
07f68     EC 3E B0 FD | 	call	#_expr
07f6c     3D B1 02 F6 | 	mov	local06, result1
07f70     88 01 90 FD | 	jmp	#LR__0735
07f74                 | LR__0706
07f74     EC 09 B0 FD | 	call	#_compile_fun_4p
07f78     3D B1 02 F6 | 	mov	local06, result1
07f7c     7C 01 90 FD | 	jmp	#LR__0735
07f80                 | LR__0707
07f80                 | ' return expr()
07f80     D4 3E B0 FD | 	call	#_expr
07f84     3D B1 02 F6 | 	mov	local06, result1
07f88     70 01 90 FD | 	jmp	#LR__0735
07f8c                 | LR__0708
07f8c     5C 08 B0 FD | 	call	#_compile_fun_2p
07f90     3D B1 02 F6 | 	mov	local06, result1
07f94     64 01 90 FD | 	jmp	#LR__0735
07f98                 | LR__0709
07f98     20 0B B0 FD | 	call	#_compile_fun_varp
07f9c     3D B5 02 F6 | 	mov	local08, result1
07fa0     3E B1 02 F6 | 	mov	local06, result2
07fa4     54 01 90 FD | 	jmp	#LR__0735
07fa8                 | LR__0710
07fa8     10 0B B0 FD | 	call	#_compile_fun_varp
07fac     3D B5 02 F6 | 	mov	local08, result1
07fb0     3E B1 02 F6 | 	mov	local06, result2
07fb4     44 01 90 FD | 	jmp	#LR__0735
07fb8                 | LR__0711
07fb8     30 08 B0 FD | 	call	#_compile_fun_2p
07fbc     3D B1 02 F6 | 	mov	local06, result1
07fc0     38 01 90 FD | 	jmp	#LR__0735
07fc4                 | LR__0712
07fc4     24 08 B0 FD | 	call	#_compile_fun_2p
07fc8     3D B1 02 F6 | 	mov	local06, result1
07fcc     2C 01 90 FD | 	jmp	#LR__0735
07fd0                 | LR__0713
07fd0     70 16 B0 FD | 	call	#_compile_print
07fd4     3D B1 02 F6 | 	mov	local06, result1
07fd8     DC 01 90 FD | 	jmp	#LR__0736
07fdc                 | LR__0714
07fdc     DC 0A B0 FD | 	call	#_compile_fun_varp
07fe0     3D B5 02 F6 | 	mov	local08, result1
07fe4     3E B1 02 F6 | 	mov	local06, result2
07fe8     10 01 90 FD | 	jmp	#LR__0735
07fec                 | LR__0715
07fec     A8 0B B0 FD | 	call	#_compile_read
07ff0     3D B5 02 F6 | 	mov	local08, result1
07ff4     3E B1 02 F6 | 	mov	local06, result2
07ff8     00 01 90 FD | 	jmp	#LR__0735
07ffc                 | LR__0716
07ffc                 | ' return expr()
07ffc     58 3E B0 FD | 	call	#_expr
08000     3D B1 02 F6 | 	mov	local06, result1
08004     F4 00 90 FD | 	jmp	#LR__0735
08008                 | LR__0717
08008     B0 0A B0 FD | 	call	#_compile_fun_varp
0800c     3D B5 02 F6 | 	mov	local08, result1
08010     3E B1 02 F6 | 	mov	local06, result2
08014     E4 00 90 FD | 	jmp	#LR__0735
08018                 | LR__0718
08018     A0 0A B0 FD | 	call	#_compile_fun_varp
0801c     3D B5 02 F6 | 	mov	local08, result1
08020     3E B1 02 F6 | 	mov	local06, result2
08024     D4 00 90 FD | 	jmp	#LR__0735
08028                 | LR__0719
08028     C0 07 B0 FD | 	call	#_compile_fun_2p
0802c     3D B1 02 F6 | 	mov	local06, result1
08030     C8 00 90 FD | 	jmp	#LR__0735
08034                 | LR__0720
08034     84 0A B0 FD | 	call	#_compile_fun_varp
08038     3D B5 02 F6 | 	mov	local08, result1
0803c     3E B1 02 F6 | 	mov	local06, result2
08040     B8 00 90 FD | 	jmp	#LR__0735
08044                 | LR__0721
08044     A4 07 B0 FD | 	call	#_compile_fun_2p
08048     3D B1 02 F6 | 	mov	local06, result1
0804c     AC 00 90 FD | 	jmp	#LR__0735
08050                 | LR__0722
08050     98 07 B0 FD | 	call	#_compile_fun_2p
08054     3D B1 02 F6 | 	mov	local06, result1
08058     A0 00 90 FD | 	jmp	#LR__0735
0805c                 | LR__0723
0805c     8C 07 B0 FD | 	call	#_compile_fun_2p
08060     3D B1 02 F6 | 	mov	local06, result1
08064     94 00 90 FD | 	jmp	#LR__0735
08068                 | LR__0724
08068     80 07 B0 FD | 	call	#_compile_fun_2p
0806c     3D B1 02 F6 | 	mov	local06, result1
08070     88 00 90 FD | 	jmp	#LR__0735
08074                 | LR__0725
08074     74 07 B0 FD | 	call	#_compile_fun_2p
08078     3D B1 02 F6 | 	mov	local06, result1
0807c     7C 00 90 FD | 	jmp	#LR__0735
08080                 | LR__0726
08080     68 07 B0 FD | 	call	#_compile_fun_2p
08084     3D B1 02 F6 | 	mov	local06, result1
08088     70 00 90 FD | 	jmp	#LR__0735
0808c                 | LR__0727
0808c     5C 07 B0 FD | 	call	#_compile_fun_2p
08090     3D B1 02 F6 | 	mov	local06, result1
08094     64 00 90 FD | 	jmp	#LR__0735
08098                 | LR__0728
08098     20 0A B0 FD | 	call	#_compile_fun_varp
0809c     3D B5 02 F6 | 	mov	local08, result1
080a0     3E B1 02 F6 | 	mov	local06, result2
080a4     54 00 90 FD | 	jmp	#LR__0735
080a8                 | LR__0729
080a8     C8 07 B0 FD | 	call	#_compile_fun_3p
080ac     3D B1 02 F6 | 	mov	local06, result1
080b0     48 00 90 FD | 	jmp	#LR__0735
080b4                 | LR__0730
080b4                 | ' return expr()
080b4     A0 3D B0 FD | 	call	#_expr
080b8     3D B1 02 F6 | 	mov	local06, result1
080bc     3C 00 90 FD | 	jmp	#LR__0735
080c0                 | LR__0731
080c0     28 07 B0 FD | 	call	#_compile_fun_2p
080c4     3D B1 02 F6 | 	mov	local06, result1
080c8     30 00 90 FD | 	jmp	#LR__0735
080cc                 | LR__0732
080cc     1C 07 B0 FD | 	call	#_compile_fun_2p
080d0     3D B1 02 F6 | 	mov	local06, result1
080d4     24 00 90 FD | 	jmp	#LR__0735
080d8                 | LR__0733
080d8     10 07 B0 FD | 	call	#_compile_fun_2p
080dc     3D B1 02 F6 | 	mov	local06, result1
080e0     18 00 90 FD | 	jmp	#LR__0735
080e4                 | LR__0734
080e4     00 13 B0 FD | 	call	#_compile_array_assign
080e8     3D B1 02 F6 | 	mov	local06, result1
080ec     0E B0 0E F2 | 	cmp	local06, #14 wz
080f0     C4 00 90 5D |  if_ne	jmp	#LR__0736
080f4                 | ' return 23
080f4     17 B0 06 F6 | 	mov	local06, #23
080f8     BC 00 90 FD | 	jmp	#LR__0736
080fc                 | ' return 23
080fc                 | LR__0735
080fc     59 AB 02 F6 | 	mov	local03, local07
08100     5A A7 02 F6 | 	mov	local01, local08
08104     53 B7 02 F6 | 	mov	local09, local01
08108     54 B9 02 F6 | 	mov	local10, local02
0810c     55 B3 02 F6 | 	mov	local07, local03
08110     4B 00 00 FF 
08114     FC 65 06 F1 | 	add	objptr, ##38908
08118     32 A7 02 FB | 	rdlong	local01, objptr
0811c     53 B5 02 F6 | 	mov	local08, local01
08120     01 B4 66 F0 | 	shl	local08, #1
08124     53 B5 02 F1 | 	add	local08, local01
08128     02 B4 66 F0 | 	shl	local08, #2
0812c     03 00 00 FF 
08130     00 64 86 F1 | 	sub	objptr, ##1536
08134     32 B5 02 F1 | 	add	local08, objptr
08138     5A B7 62 FC | 	wrlong	local09, local08
0813c     03 00 00 FF 
08140     00 64 06 F1 | 	add	objptr, ##1536
08144     32 A7 02 FB | 	rdlong	local01, objptr
08148     53 B7 02 F6 | 	mov	local09, local01
0814c     01 B6 66 F0 | 	shl	local09, #1
08150     53 B7 02 F1 | 	add	local09, local01
08154     02 B6 66 F0 | 	shl	local09, #2
08158     03 00 00 FF 
0815c     00 64 86 F1 | 	sub	objptr, ##1536
08160     32 B7 02 F1 | 	add	local09, objptr
08164     04 B6 06 F1 | 	add	local09, #4
08168     5B B9 62 FC | 	wrlong	local10, local09
0816c     03 00 00 FF 
08170     00 64 06 F1 | 	add	objptr, ##1536
08174     32 A7 02 FB | 	rdlong	local01, objptr
08178     53 B9 02 F6 | 	mov	local10, local01
0817c     01 B8 66 F0 | 	shl	local10, #1
08180     53 B9 02 F1 | 	add	local10, local01
08184     02 B8 66 F0 | 	shl	local10, #2
08188     03 00 00 FF 
0818c     00 64 86 F1 | 	sub	objptr, ##1536
08190     32 B9 02 F1 | 	add	local10, objptr
08194     08 B8 06 F1 | 	add	local10, #8
08198     5C B3 62 FC | 	wrlong	local07, local10
0819c     03 00 00 FF 
081a0     00 64 06 F1 | 	add	objptr, ##1536
081a4     32 B7 02 FB | 	rdlong	local09, objptr
081a8     01 B6 06 F1 | 	add	local09, #1
081ac     32 B7 62 FC | 	wrlong	local09, objptr
081b0     4B 00 00 FF 
081b4     FC 65 86 F1 | 	sub	objptr, ##38908
081b8                 | LR__0736
081b8                 | ' 
081b8                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
081b8                 | ' 450 if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end 				' the last part 
081b8     03 AC 0E F2 | 	cmp	local04, #3 wz
081bc     04 AC 0E 52 |  if_ne	cmp	local04, #4 wz
081c0     38 00 90 5D |  if_ne	jmp	#LR__0737
081c4     4B 00 00 FF 
081c8     FC 65 06 F1 | 	add	objptr, ##38908
081cc     32 B9 02 FB | 	rdlong	local10, objptr
081d0     5C A7 02 F6 | 	mov	local01, local10
081d4     01 A6 66 F0 | 	shl	local01, #1
081d8     5C A7 02 F1 | 	add	local01, local10
081dc     02 A6 66 F0 | 	shl	local01, #2
081e0     03 00 00 FF 
081e4     00 64 86 F1 | 	sub	objptr, ##1536
081e8     32 A7 02 F1 | 	add	local01, objptr
081ec     08 A6 06 F1 | 	add	local01, #8
081f0     53 FD 6B FC | 	wrlong	#510, local01
081f4     48 00 00 FF 
081f8     FC 65 86 F1 | 	sub	objptr, ##37372
081fc                 | LR__0737
081fc                 | ' ' if there is token_adr somewhere, change fun_getvar to fun_getaddr
081fc                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
081fc     4B 00 00 FF 
08200     FC 65 06 F1 | 	add	objptr, ##38908
08204     32 A7 02 FB | 	rdlong	local01, objptr
08208     4B 00 00 FF 
0820c     FC 65 86 F1 | 	sub	objptr, ##38908
08210     D7 52 48 FB | 	callpa	#(@LR__0740-@LR__0738)>>2,fcache_load_ptr_
08214                 | LR__0738
08214     53 B7 02 F6 | 	mov	local09, local01
08218     01 B6 66 F0 | 	shl	local09, #1
0821c     53 B7 02 F1 | 	add	local09, local01
08220     02 B6 66 F0 | 	shl	local09, #2
08224     32 B9 02 F6 | 	mov	local10, objptr
08228     48 00 00 FF 
0822c     FC B9 06 F1 | 	add	local10, ##37372
08230     5C B7 02 F1 | 	add	local09, local10
08234     08 B6 06 F1 | 	add	local09, #8
08238     5B B7 02 FB | 	rdlong	local09, local09
0823c     9B B6 0E F2 | 	cmp	local09, #155 wz
08240     68 00 90 5D |  if_ne	jmp	#LR__0739
08244     53 B7 02 F6 | 	mov	local09, local01
08248     01 B6 86 F1 | 	sub	local09, #1
0824c     5B B9 02 F6 | 	mov	local10, local09
08250     01 B8 66 F0 | 	shl	local10, #1
08254     5B B9 02 F1 | 	add	local10, local09
08258     02 B8 66 F0 | 	shl	local10, #2
0825c     32 B7 02 F6 | 	mov	local09, objptr
08260     48 00 00 FF 
08264     FC B7 06 F1 | 	add	local09, ##37372
08268     5B B9 02 F1 | 	add	local10, local09
0826c     08 B8 06 F1 | 	add	local10, #8
08270     5C B9 02 FB | 	rdlong	local10, local10
08274     11 B8 0E F2 | 	cmp	local10, #17 wz
08278     30 00 90 5D |  if_ne	jmp	#LR__0739
0827c     53 B7 02 F6 | 	mov	local09, local01
08280     01 B6 86 F1 | 	sub	local09, #1
08284     5B B9 02 F6 | 	mov	local10, local09
08288     01 B8 66 F0 | 	shl	local10, #1
0828c     5B B9 02 F1 | 	add	local10, local09
08290     02 B8 66 F0 | 	shl	local10, #2
08294     32 B7 02 F6 | 	mov	local09, objptr
08298     48 00 00 FF 
0829c     FC B7 06 F1 | 	add	local09, ##37372
082a0     5B B9 02 F1 | 	add	local10, local09
082a4     08 B8 06 F1 | 	add	local10, #8
082a8     5C 25 68 FC | 	wrlong	#18, local10
082ac                 | LR__0739
082ac     01 A6 86 F1 | 	sub	local01, #1
082b0     01 A6 56 F2 | 	cmps	local01, #1 wc
082b4     5C FF 9F 3D |  if_ae	jmp	#LR__0738
082b8                 | LR__0740
082b8                 | ' ''''print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
082b8                 | ' return err
082b8     58 7B 02 F6 | 	mov	result1, local06
082bc     E7 F0 03 F6 | 	mov	ptra, fp
082c0     F2 00 A0 FD | 	call	#popregs_
082c4                 | _compile_immediate_ret
082c4     2D 00 64 FD | 	ret
082c8                 | 
082c8                 | ' 
082c8                 | ' '--- Do a main compilation task for assigns, called from compile_assign(), returns an error code
082c8                 | ' 
082c8                 | ' function compile_immediate_assign(linetype as ulong) as ulong
082c8                 | _compile_immediate_assign
082c8     0C CA 05 F6 | 	mov	COUNT_, #12
082cc     E8 00 A0 FD | 	call	#pushregs_
082d0     49 AD 02 F6 | 	mov	local04, arg01
082d4     FF AA 06 F6 | 	mov	local03, #255
082d8     01 AE 66 F6 | 	neg	local05, #1
082dc     00 B0 06 F6 | 	mov	local06, #0
082e0                 | ' 
082e0                 | ' t1.result_type=result_error : t1.result.uresult=0
082e0                 | ' i=-1: j=-1 : err=0
082e0                 | ' 
082e0                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
082e0     02 AC 0E F2 | 	cmp	local04, #2 wz
082e4     03 AC 0E 52 |  if_ne	cmp	local04, #3 wz
082e8     36 00 00 AF 
082ec     8C 65 06 A1 |  if_e	add	objptr, ##28044
082f0     32 B3 02 AB |  if_e	rdlong	local07, objptr
082f4     02 00 00 AF 
082f8     38 64 06 A1 |  if_e	add	objptr, ##1080
082fc     32 05 68 AC |  if_e	wrlong	#2, objptr
08300     38 00 00 AF 
08304     C4 65 86 A1 |  if_e	sub	objptr, ##29124
08308                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
08308     04 AC 0E F2 | 	cmp	local04, #4 wz
0830c     01 AC 0E 52 |  if_ne	cmp	local04, #1 wz
08310     2C 00 90 5D |  if_ne	jmp	#LR__0750
08314     36 00 00 FF 
08318     94 65 06 F1 | 	add	objptr, ##28052
0831c     32 B3 02 FB | 	rdlong	local07, objptr
08320     02 00 00 FF 
08324     30 64 06 F1 | 	add	objptr, ##1072
08328     32 07 68 FC | 	wrlong	#3, objptr
0832c     13 00 00 FF 
08330     38 64 06 F1 | 	add	objptr, ##9784
08334     32 05 68 FC | 	wrlong	#2, objptr
08338     4B 00 00 FF 
0833c     FC 65 86 F1 | 	sub	objptr, ##38908
08340                 | LR__0750
08340                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
08340     05 AC 0E F2 | 	cmp	local04, #5 wz
08344     3C 00 90 5D |  if_ne	jmp	#LR__0751
08348     38 00 00 FF 
0834c     C4 65 06 F1 | 	add	objptr, ##29124
08350     32 7B 02 FB | 	rdlong	result1, objptr
08354     3D B3 02 F6 | 	mov	local07, result1
08358     03 B2 66 F0 | 	shl	local07, #3
0835c     02 00 00 FF 
08360     38 64 86 F1 | 	sub	objptr, ##1080
08364     32 B3 02 F1 | 	add	local07, objptr
08368     59 B3 02 FB | 	rdlong	local07, local07
0836c     02 7A 06 F1 | 	add	result1, #2
08370     02 00 00 FF 
08374     38 64 06 F1 | 	add	objptr, ##1080
08378     32 7B 62 FC | 	wrlong	result1, objptr
0837c     38 00 00 FF 
08380     C4 65 86 F1 | 	sub	objptr, ##29124
08384                 | LR__0751
08384     59 93 02 F6 | 	mov	arg01, local07
08388     01 94 06 F6 | 	mov	arg02, #1
0838c     A8 E2 B1 FD | 	call	#__system__Right_S
08390     3D B5 02 F6 | 	mov	local08, result1
08394     C0 3A B0 FD | 	call	#_expr
08398                 | ' 
08398                 | ' suffix2$=right$(varname2$,1)
08398                 | ' expr()
08398                 | ' if varnum>0 then					' try to find a variable
08398     36 00 00 FF 
0839c     88 65 06 F1 | 	add	objptr, ##28040
083a0     32 B7 02 FB | 	rdlong	local09, objptr
083a4     36 00 00 FF 
083a8     88 65 86 F1 | 	sub	objptr, ##28040
083ac     01 B6 56 F2 | 	cmps	local09, #1 wc
083b0     54 00 90 CD |  if_b	jmp	#LR__0754
083b4                 | '   for i=0 to varnum-1
083b4     00 B8 06 F6 | 	mov	local10, #0
083b8     36 00 00 FF 
083bc     88 65 06 F1 | 	add	objptr, ##28040
083c0     32 BB 02 FB | 	rdlong	local11, objptr
083c4     36 00 00 FF 
083c8     88 65 86 F1 | 	sub	objptr, ##28040
083cc                 | LR__0752
083cc     5D B9 52 F2 | 	cmps	local10, local11 wc
083d0     34 00 90 3D |  if_ae	jmp	#LR__0753
083d4                 | '     if variables(i).name=varname2$ then j=i : exit
083d4     5C B7 02 F6 | 	mov	local09, local10
083d8     04 B6 66 F0 | 	shl	local09, #4
083dc     32 95 02 F6 | 	mov	arg02, objptr
083e0     16 00 00 FF 
083e4     78 95 06 F1 | 	add	arg02, ##11640
083e8     4A B7 02 F1 | 	add	local09, arg02
083ec     5B 93 02 FB | 	rdlong	arg01, local09
083f0     59 95 02 F6 | 	mov	arg02, local07
083f4     38 C9 B1 FD | 	call	#__system___string_cmp
083f8     00 7A 0E F2 | 	cmp	result1, #0 wz
083fc     5C AF 02 A6 |  if_e	mov	local05, local10
08400     01 B8 06 51 |  if_ne	add	local10, #1
08404     C4 FF 9F 5D |  if_ne	jmp	#LR__0752
08408                 | LR__0753
08408                 | LR__0754
08408                 | ' if  j=-1 andalso varnum<maxvars then   			' not found, add a new one
08408     FF FF 7F FF 
0840c     FF AF 0E F2 | 	cmp	local05, ##-1 wz
08410     60 00 90 5D |  if_ne	jmp	#LR__0755
08414     36 00 00 FF 
08418     88 65 06 F1 | 	add	objptr, ##28040
0841c     32 B7 02 FB | 	rdlong	local09, objptr
08420     36 00 00 FF 
08424     88 65 86 F1 | 	sub	objptr, ##28040
08428     02 00 00 FF 
0842c     00 B6 56 F2 | 	cmps	local09, ##1024 wc
08430     40 00 90 3D |  if_ae	jmp	#LR__0755
08434     36 00 00 FF 
08438     88 65 06 F1 | 	add	objptr, ##28040
0843c     32 BB 02 FB | 	rdlong	local11, objptr
08440     04 BA 66 F0 | 	shl	local11, #4
08444     20 00 00 FF 
08448     10 64 86 F1 | 	sub	objptr, ##16400
0844c     32 BB 02 F1 | 	add	local11, objptr
08450     5D B3 62 FC | 	wrlong	local07, local11
08454     20 00 00 FF 
08458     10 64 06 F1 | 	add	objptr, ##16400
0845c     32 B7 02 FB | 	rdlong	local09, objptr
08460     5B AF 02 F6 | 	mov	local05, local09
08464     01 B6 06 F1 | 	add	local09, #1
08468     32 B7 62 FC | 	wrlong	local09, objptr
0846c     36 00 00 FF 
08470     88 65 86 F1 | 	sub	objptr, ##28040
08474                 | LR__0755
08474                 | ' if varnum>=maxvars then
08474     36 00 00 FF 
08478     88 65 06 F1 | 	add	objptr, ##28040
0847c     32 B7 02 FB | 	rdlong	local09, objptr
08480     36 00 00 FF 
08484     88 65 86 F1 | 	sub	objptr, ##28040
08488     02 00 00 FF 
0848c     00 B6 56 F2 | 	cmps	local09, ##1024 wc
08490     2D B0 06 36 |  if_ae	mov	local06, #45
08494     BC 01 90 3D |  if_ae	jmp	#LR__0760
08498     57 A7 02 F6 | 	mov	local01, local05
0849c     17 AA 06 F6 | 	mov	local03, #23
084a0     53 B7 02 F6 | 	mov	local09, local01
084a4     54 BD 02 F6 | 	mov	local12, local02
084a8     55 A7 02 F6 | 	mov	local01, local03
084ac     4B 00 00 FF 
084b0     FC 65 06 F1 | 	add	objptr, ##38908
084b4     32 BB 02 FB | 	rdlong	local11, objptr
084b8     5D B9 02 F6 | 	mov	local10, local11
084bc     01 B8 66 F0 | 	shl	local10, #1
084c0     5D B9 02 F1 | 	add	local10, local11
084c4     02 B8 66 F0 | 	shl	local10, #2
084c8     03 00 00 FF 
084cc     00 64 86 F1 | 	sub	objptr, ##1536
084d0     32 B9 02 F1 | 	add	local10, objptr
084d4     5C B7 62 FC | 	wrlong	local09, local10
084d8     03 00 00 FF 
084dc     00 64 06 F1 | 	add	objptr, ##1536
084e0     32 B7 02 FB | 	rdlong	local09, objptr
084e4     5B BB 02 F6 | 	mov	local11, local09
084e8     01 BA 66 F0 | 	shl	local11, #1
084ec     5B BB 02 F1 | 	add	local11, local09
084f0     02 BA 66 F0 | 	shl	local11, #2
084f4     03 00 00 FF 
084f8     00 64 86 F1 | 	sub	objptr, ##1536
084fc     32 BB 02 F1 | 	add	local11, objptr
08500     04 BA 06 F1 | 	add	local11, #4
08504     5D BD 62 FC | 	wrlong	local12, local11
08508     03 00 00 FF 
0850c     00 64 06 F1 | 	add	objptr, ##1536
08510     32 B7 02 FB | 	rdlong	local09, objptr
08514     5B BD 02 F6 | 	mov	local12, local09
08518     01 BC 66 F0 | 	shl	local12, #1
0851c     5B BD 02 F1 | 	add	local12, local09
08520     02 BC 66 F0 | 	shl	local12, #2
08524     03 00 00 FF 
08528     00 64 86 F1 | 	sub	objptr, ##1536
0852c     32 BD 02 F1 | 	add	local12, objptr
08530     08 BC 06 F1 | 	add	local12, #8
08534     5E A7 62 FC | 	wrlong	local01, local12
08538     03 00 00 FF 
0853c     00 64 06 F1 | 	add	objptr, ##1536
08540     32 B7 02 FB | 	rdlong	local09, objptr
08544     01 B6 06 F1 | 	add	local09, #1
08548     32 B7 62 FC | 	wrlong	local09, objptr
0854c     4B 00 00 FF 
08550     FC 65 86 F1 | 	sub	objptr, ##38908
08554                 | '   t1.result.uresult=j: t1.result_type=fun_assign  
08554                 | '   compiledline(lineptr)=t1:  lineptr+=1 
08554                 | '   if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
08554     03 AC 0E F2 | 	cmp	local04, #3 wz
08558     04 AC 0E 52 |  if_ne	cmp	local04, #4 wz
0855c     38 00 90 5D |  if_ne	jmp	#LR__0756
08560     4B 00 00 FF 
08564     FC 65 06 F1 | 	add	objptr, ##38908
08568     32 BD 02 FB | 	rdlong	local12, objptr
0856c     5E A7 02 F6 | 	mov	local01, local12
08570     01 A6 66 F0 | 	shl	local01, #1
08574     5E A7 02 F1 | 	add	local01, local12
08578     02 A6 66 F0 | 	shl	local01, #2
0857c     03 00 00 FF 
08580     00 64 86 F1 | 	sub	objptr, ##1536
08584     32 A7 02 F1 | 	add	local01, objptr
08588     08 A6 06 F1 | 	add	local01, #8
0858c     53 FD 6B FC | 	wrlong	#510, local01
08590     48 00 00 FF 
08594     FC 65 86 F1 | 	sub	objptr, ##37372
08598                 | LR__0756
08598                 | '   for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
08598     4B 00 00 FF 
0859c     FC 65 06 F1 | 	add	objptr, ##38908
085a0     32 B9 02 FB | 	rdlong	local10, objptr
085a4     4B 00 00 FF 
085a8     FC 65 86 F1 | 	sub	objptr, ##38908
085ac     D7 52 48 FB | 	callpa	#(@LR__0759-@LR__0757)>>2,fcache_load_ptr_
085b0                 | LR__0757
085b0     5C BD 02 F6 | 	mov	local12, local10
085b4     01 BC 66 F0 | 	shl	local12, #1
085b8     5C BD 02 F1 | 	add	local12, local10
085bc     02 BC 66 F0 | 	shl	local12, #2
085c0     32 A7 02 F6 | 	mov	local01, objptr
085c4     48 00 00 FF 
085c8     FC A7 06 F1 | 	add	local01, ##37372
085cc     53 BD 02 F1 | 	add	local12, local01
085d0     08 BC 06 F1 | 	add	local12, #8
085d4     5E BD 02 FB | 	rdlong	local12, local12
085d8     9B BC 0E F2 | 	cmp	local12, #155 wz
085dc     68 00 90 5D |  if_ne	jmp	#LR__0758
085e0     5C BD 02 F6 | 	mov	local12, local10
085e4     01 BC 86 F1 | 	sub	local12, #1
085e8     5E A7 02 F6 | 	mov	local01, local12
085ec     01 A6 66 F0 | 	shl	local01, #1
085f0     5E A7 02 F1 | 	add	local01, local12
085f4     02 A6 66 F0 | 	shl	local01, #2
085f8     32 BD 02 F6 | 	mov	local12, objptr
085fc     48 00 00 FF 
08600     FC BD 06 F1 | 	add	local12, ##37372
08604     5E A7 02 F1 | 	add	local01, local12
08608     08 A6 06 F1 | 	add	local01, #8
0860c     53 A7 02 FB | 	rdlong	local01, local01
08610     11 A6 0E F2 | 	cmp	local01, #17 wz
08614     30 00 90 5D |  if_ne	jmp	#LR__0758
08618     5C BD 02 F6 | 	mov	local12, local10
0861c     01 BC 86 F1 | 	sub	local12, #1
08620     5E A7 02 F6 | 	mov	local01, local12
08624     01 A6 66 F0 | 	shl	local01, #1
08628     5E A7 02 F1 | 	add	local01, local12
0862c     02 A6 66 F0 | 	shl	local01, #2
08630     32 BD 02 F6 | 	mov	local12, objptr
08634     48 00 00 FF 
08638     FC BD 06 F1 | 	add	local12, ##37372
0863c     5E A7 02 F1 | 	add	local01, local12
08640     08 A6 06 F1 | 	add	local01, #8
08644     53 25 68 FC | 	wrlong	#18, local01
08648                 | LR__0758
08648     01 B8 86 F1 | 	sub	local10, #1
0864c     01 B8 56 F2 | 	cmps	local10, #1 wc
08650     5C FF 9F 3D |  if_ae	jmp	#LR__0757
08654                 | LR__0759
08654                 | LR__0760
08654                 | ' return err
08654     58 7B 02 F6 | 	mov	result1, local06
08658     E7 F0 03 F6 | 	mov	ptra, fp
0865c     F2 00 A0 FD | 	call	#popregs_
08660                 | _compile_immediate_assign_ret
08660     2D 00 64 FD | 	ret
08664                 | 
08664                 | ' 
08664                 | ' ' ------------------ compile the line that is calling a command, and save it if linenum>0, called from the interpreter 
08664                 | ' 
08664                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong) as ulong
08664                 | _compile
08664     03 CA 05 F6 | 	mov	COUNT_, #3
08668     E8 00 A0 FD | 	call	#pushregs_
0866c     49 A7 02 F6 | 	mov	local01, arg01
08670     4B A9 02 F6 | 	mov	local02, arg03
08674     48 00 00 FF 
08678     FC 65 06 F1 | 	add	objptr, ##37372
0867c     32 A7 62 FC | 	wrlong	local01, objptr
08680     04 64 06 F1 | 	add	objptr, #4
08684     32 95 62 FC | 	wrlong	arg02, objptr
08688     49 00 00 FF 
0868c     00 64 86 F1 | 	sub	objptr, ##37376
08690     54 93 02 F6 | 	mov	arg01, local02
08694     01 92 06 F1 | 	add	arg01, #1
08698     53 95 02 F6 | 	mov	arg02, local01
0869c     40 F2 BF FD | 	call	#_compile_immediate
086a0     3D AB 0A F6 | 	mov	local03, result1 wz
086a4                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
086a4                 | ' ucompiledline(0)=alinemajor
086a4                 | ' ucompiledline(1)=alineminor		' this is for the future when maybe linenums will be optional.
086a4                 | ' 
086a4                 | ' ' cont: 
086a4                 | ' ' 0 - this is the first part of the line that will continue
086a4                 | ' ' 1 - this is the continuation of the line
086a4                 | ' ' 2 - this is the last continued line
086a4                 | ' ' 3 - this is the one and only part
086a4                 | ' 
086a4                 | ' err=compile_immediate(cont+1,alinemajor) 
086a4                 | ' if err=0 andalso alinemajor>0 then
086a4     74 00 90 5D |  if_ne	jmp	#LR__0775
086a8     01 A6 16 F2 | 	cmp	local01, #1 wc
086ac     6C 00 90 CD |  if_b	jmp	#LR__0775
086b0                 | '   if cont=3 orelse cont=2 then 
086b0     03 A8 0E F2 | 	cmp	local02, #3 wz
086b4     02 A8 0E 52 |  if_ne	cmp	local02, #2 wz
086b8     60 00 90 5D |  if_ne	jmp	#LR__0774
086bc                 | '     if alinemajor >lastline then 
086bc     4C 00 00 FF 
086c0     0C 64 06 F1 | 	add	objptr, ##38924
086c4     32 95 02 FB | 	rdlong	arg02, objptr
086c8     4C 00 00 FF 
086cc     0C 64 86 F1 | 	sub	objptr, ##38924
086d0     4A A7 1A F2 | 	cmp	local01, arg02 wcz
086d4     0C 00 90 ED |  if_be	jmp	#LR__0770
086d8     53 93 02 F6 | 	mov	arg01, local01
086dc     38 F1 BF FD | 	call	#_add_line_at_end
086e0     38 00 90 FD | 	jmp	#LR__0773
086e4                 | LR__0770
086e4     53 93 02 F6 | 	mov	arg01, local01
086e8     A0 EB BF FD | 	call	#_deleteline
086ec                 | '       deleteline(alinemajor)  
086ec                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' TODO: that's not optimal    
086ec     4C 00 00 FF 
086f0     0C 64 06 F1 | 	add	objptr, ##38924
086f4     32 95 02 FB | 	rdlong	arg02, objptr
086f8     4C 00 00 FF 
086fc     0C 64 86 F1 | 	sub	objptr, ##38924
08700     4A A7 1A F2 | 	cmp	local01, arg02 wcz
08704     0C 00 90 ED |  if_be	jmp	#LR__0771
08708     53 93 02 F6 | 	mov	arg01, local01
0870c     08 F1 BF FD | 	call	#_add_line_at_end
08710     08 00 90 FD | 	jmp	#LR__0772
08714                 | LR__0771
08714     53 93 02 F6 | 	mov	arg01, local01
08718     40 EF BF FD | 	call	#_insertline
0871c                 | LR__0772
0871c                 | LR__0773
0871c                 | LR__0774
0871c                 | LR__0775
0871c                 | ' return err
0871c     55 7B 02 F6 | 	mov	result1, local03
08720     E7 F0 03 F6 | 	mov	ptra, fp
08724     F2 00 A0 FD | 	call	#popregs_
08728                 | _compile_ret
08728     2D 00 64 FD | 	ret
0872c                 | 
0872c                 | ' 
0872c                 | ' ' ------------------ compile the line that is assigning to a variable and save it if linenum>0, called from the interpreter 
0872c                 | ' 
0872c                 | ' function compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  as ulong
0872c                 | _compile_assign
0872c     03 CA 05 F6 | 	mov	COUNT_, #3
08730     E8 00 A0 FD | 	call	#pushregs_
08734     49 A7 02 F6 | 	mov	local01, arg01
08738     4B A9 02 F6 | 	mov	local02, arg03
0873c     48 00 00 FF 
08740     FC 65 06 F1 | 	add	objptr, ##37372
08744     32 A7 62 FC | 	wrlong	local01, objptr
08748     04 64 06 F1 | 	add	objptr, #4
0874c     32 95 62 FC | 	wrlong	arg02, objptr
08750     49 00 00 FF 
08754     00 64 86 F1 | 	sub	objptr, ##37376
08758     54 93 02 F6 | 	mov	arg01, local02
0875c     01 92 06 F1 | 	add	arg01, #1
08760     64 FB BF FD | 	call	#_compile_immediate_assign
08764     3D AB 02 F6 | 	mov	local03, result1
08768                 | ' 
08768                 | ' ucompiledline(0)=alinemajor
08768                 | ' ucompiledline(1)=alineminor
08768                 | ' 
08768                 | ' err=compile_immediate_assign(cont+1) 
08768                 | ' if alinemajor>0 then
08768     01 A6 16 F2 | 	cmp	local01, #1 wc
0876c     6C 00 90 CD |  if_b	jmp	#LR__0785
08770                 | '   if cont=3 orelse cont=2 then 
08770     03 A8 0E F2 | 	cmp	local02, #3 wz
08774     02 A8 0E 52 |  if_ne	cmp	local02, #2 wz
08778     60 00 90 5D |  if_ne	jmp	#LR__0784
0877c                 | '     if alinemajor >lastline then 
0877c     4C 00 00 FF 
08780     0C 64 06 F1 | 	add	objptr, ##38924
08784     32 95 02 FB | 	rdlong	arg02, objptr
08788     4C 00 00 FF 
0878c     0C 64 86 F1 | 	sub	objptr, ##38924
08790     4A A7 1A F2 | 	cmp	local01, arg02 wcz
08794     0C 00 90 ED |  if_be	jmp	#LR__0780
08798     53 93 02 F6 | 	mov	arg01, local01
0879c     78 F0 BF FD | 	call	#_add_line_at_end
087a0     38 00 90 FD | 	jmp	#LR__0783
087a4                 | LR__0780
087a4     53 93 02 F6 | 	mov	arg01, local01
087a8     E0 EA BF FD | 	call	#_deleteline
087ac                 | '       deleteline(alinemajor)  
087ac                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
087ac     4C 00 00 FF 
087b0     0C 64 06 F1 | 	add	objptr, ##38924
087b4     32 95 02 FB | 	rdlong	arg02, objptr
087b8     4C 00 00 FF 
087bc     0C 64 86 F1 | 	sub	objptr, ##38924
087c0     4A A7 1A F2 | 	cmp	local01, arg02 wcz
087c4     0C 00 90 ED |  if_be	jmp	#LR__0781
087c8     53 93 02 F6 | 	mov	arg01, local01
087cc     48 F0 BF FD | 	call	#_add_line_at_end
087d0     08 00 90 FD | 	jmp	#LR__0782
087d4                 | LR__0781
087d4     53 93 02 F6 | 	mov	arg01, local01
087d8     80 EE BF FD | 	call	#_insertline
087dc                 | LR__0782
087dc                 | LR__0783
087dc                 | LR__0784
087dc                 | LR__0785
087dc                 | ' return err
087dc     55 7B 02 F6 | 	mov	result1, local03
087e0     E7 F0 03 F6 | 	mov	ptra, fp
087e4     F2 00 A0 FD | 	call	#popregs_
087e8                 | _compile_assign_ret
087e8     2D 00 64 FD | 	ret
087ec                 | 
087ec                 | ' 
087ec                 | ' '----- A function that prepares 2 parameters for a 2-parameter command
087ec                 | ' 
087ec                 | ' function compile_fun_2p() as ulong
087ec                 | _compile_fun_2p
087ec     01 CA 05 F6 | 	mov	COUNT_, #1
087f0     E8 00 A0 FD | 	call	#pushregs_
087f4     60 36 B0 FD | 	call	#_expr
087f8     3D A7 02 F6 | 	mov	local01, result1
087fc                 | ' err=expr() : if err>0 then return err
087fc     01 A6 16 F2 | 	cmp	local01, #1 wc
08800     53 7B 02 36 |  if_ae	mov	result1, local01
08804     60 00 90 3D |  if_ae	jmp	#LR__0790
08808                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
08808     38 00 00 FF 
0880c     C4 65 06 F1 | 	add	objptr, ##29124
08810     32 A7 02 FB | 	rdlong	local01, objptr
08814     03 A6 66 F0 | 	shl	local01, #3
08818     02 00 00 FF 
0881c     38 64 86 F1 | 	sub	objptr, ##1080
08820     32 A7 02 F1 | 	add	local01, objptr
08824     04 A6 06 F1 | 	add	local01, #4
08828     53 A7 02 FB | 	rdlong	local01, local01
0882c     11 A6 0E F2 | 	cmp	local01, #17 wz
08830     36 00 00 FF 
08834     8C 65 86 F1 | 	sub	objptr, ##28044
08838     15 7A 06 56 |  if_ne	mov	result1, #21
0883c     28 00 90 5D |  if_ne	jmp	#LR__0790
08840     38 00 00 FF 
08844     C4 65 06 F1 | 	add	objptr, ##29124
08848     32 A7 02 FB | 	rdlong	local01, objptr
0884c     01 A6 06 F1 | 	add	local01, #1
08850     32 A7 62 FC | 	wrlong	local01, objptr
08854     38 00 00 FF 
08858     C4 65 86 F1 | 	sub	objptr, ##29124
0885c     F8 35 B0 FD | 	call	#_expr
08860                 | ' err=expr() : if err>0 then return err
08860     01 7A 16 F2 | 	cmp	result1, #1 wc
08864                 | ' return 0
08864     00 7A 06 C6 |  if_b	mov	result1, #0
08868                 | LR__0790
08868     E7 F0 03 F6 | 	mov	ptra, fp
0886c     F2 00 A0 FD | 	call	#popregs_
08870                 | _compile_fun_2p_ret
08870     2D 00 64 FD | 	ret
08874                 | 
08874                 | ' 
08874                 | ' '----- A function that prepares 3 parameters for a 3-parameter command
08874                 | ' 
08874                 | ' function compile_fun_3p() as ulong
08874                 | _compile_fun_3p
08874     01 CA 05 F6 | 	mov	COUNT_, #1
08878     E8 00 A0 FD | 	call	#pushregs_
0887c     D8 35 B0 FD | 	call	#_expr
08880     3D A7 02 F6 | 	mov	local01, result1
08884                 | ' err=expr() : if err>0 then return err
08884     01 A6 16 F2 | 	cmp	local01, #1 wc
08888     53 7B 02 36 |  if_ae	mov	result1, local01
0888c     C8 00 90 3D |  if_ae	jmp	#LR__0800
08890                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
08890     38 00 00 FF 
08894     C4 65 06 F1 | 	add	objptr, ##29124
08898     32 A7 02 FB | 	rdlong	local01, objptr
0889c     03 A6 66 F0 | 	shl	local01, #3
088a0     02 00 00 FF 
088a4     38 64 86 F1 | 	sub	objptr, ##1080
088a8     32 A7 02 F1 | 	add	local01, objptr
088ac     04 A6 06 F1 | 	add	local01, #4
088b0     53 A7 02 FB | 	rdlong	local01, local01
088b4     11 A6 0E F2 | 	cmp	local01, #17 wz
088b8     36 00 00 FF 
088bc     8C 65 86 F1 | 	sub	objptr, ##28044
088c0     15 7A 06 56 |  if_ne	mov	result1, #21
088c4     90 00 90 5D |  if_ne	jmp	#LR__0800
088c8     38 00 00 FF 
088cc     C4 65 06 F1 | 	add	objptr, ##29124
088d0     32 A7 02 FB | 	rdlong	local01, objptr
088d4     01 A6 06 F1 | 	add	local01, #1
088d8     32 A7 62 FC | 	wrlong	local01, objptr
088dc     38 00 00 FF 
088e0     C4 65 86 F1 | 	sub	objptr, ##29124
088e4     70 35 B0 FD | 	call	#_expr
088e8     3D A7 02 F6 | 	mov	local01, result1
088ec                 | ' err=expr() : if err>0 then return err
088ec     01 A6 16 F2 | 	cmp	local01, #1 wc
088f0     53 7B 02 36 |  if_ae	mov	result1, local01
088f4     60 00 90 3D |  if_ae	jmp	#LR__0800
088f8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
088f8     38 00 00 FF 
088fc     C4 65 06 F1 | 	add	objptr, ##29124
08900     32 A7 02 FB | 	rdlong	local01, objptr
08904     03 A6 66 F0 | 	shl	local01, #3
08908     02 00 00 FF 
0890c     38 64 86 F1 | 	sub	objptr, ##1080
08910     32 A7 02 F1 | 	add	local01, objptr
08914     04 A6 06 F1 | 	add	local01, #4
08918     53 A7 02 FB | 	rdlong	local01, local01
0891c     11 A6 0E F2 | 	cmp	local01, #17 wz
08920     36 00 00 FF 
08924     8C 65 86 F1 | 	sub	objptr, ##28044
08928     15 7A 06 56 |  if_ne	mov	result1, #21
0892c     28 00 90 5D |  if_ne	jmp	#LR__0800
08930     38 00 00 FF 
08934     C4 65 06 F1 | 	add	objptr, ##29124
08938     32 A7 02 FB | 	rdlong	local01, objptr
0893c     01 A6 06 F1 | 	add	local01, #1
08940     32 A7 62 FC | 	wrlong	local01, objptr
08944     38 00 00 FF 
08948     C4 65 86 F1 | 	sub	objptr, ##29124
0894c     08 35 B0 FD | 	call	#_expr
08950                 | ' err=expr() : if err>0 then return err
08950     01 7A 16 F2 | 	cmp	result1, #1 wc
08954                 | ' return 0
08954     00 7A 06 C6 |  if_b	mov	result1, #0
08958                 | LR__0800
08958     E7 F0 03 F6 | 	mov	ptra, fp
0895c     F2 00 A0 FD | 	call	#popregs_
08960                 | _compile_fun_3p_ret
08960     2D 00 64 FD | 	ret
08964                 | 
08964                 | ' 
08964                 | ' '----- A function that prepares 4 parameters for a 4-parameter command
08964                 | ' 
08964                 | ' function compile_fun_4p() as ulong
08964                 | _compile_fun_4p
08964     01 CA 05 F6 | 	mov	COUNT_, #1
08968     E8 00 A0 FD | 	call	#pushregs_
0896c     E8 34 B0 FD | 	call	#_expr
08970     3D A7 02 F6 | 	mov	local01, result1
08974                 | ' err=expr() : if err>0 then return err
08974     01 A6 16 F2 | 	cmp	local01, #1 wc
08978     53 7B 02 36 |  if_ae	mov	result1, local01
0897c     30 01 90 3D |  if_ae	jmp	#LR__0810
08980                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
08980     38 00 00 FF 
08984     C4 65 06 F1 | 	add	objptr, ##29124
08988     32 A7 02 FB | 	rdlong	local01, objptr
0898c     03 A6 66 F0 | 	shl	local01, #3
08990     02 00 00 FF 
08994     38 64 86 F1 | 	sub	objptr, ##1080
08998     32 A7 02 F1 | 	add	local01, objptr
0899c     04 A6 06 F1 | 	add	local01, #4
089a0     53 A7 02 FB | 	rdlong	local01, local01
089a4     11 A6 0E F2 | 	cmp	local01, #17 wz
089a8     36 00 00 FF 
089ac     8C 65 86 F1 | 	sub	objptr, ##28044
089b0     15 7A 06 56 |  if_ne	mov	result1, #21
089b4     F8 00 90 5D |  if_ne	jmp	#LR__0810
089b8     38 00 00 FF 
089bc     C4 65 06 F1 | 	add	objptr, ##29124
089c0     32 A7 02 FB | 	rdlong	local01, objptr
089c4     01 A6 06 F1 | 	add	local01, #1
089c8     32 A7 62 FC | 	wrlong	local01, objptr
089cc     38 00 00 FF 
089d0     C4 65 86 F1 | 	sub	objptr, ##29124
089d4     80 34 B0 FD | 	call	#_expr
089d8     3D A7 02 F6 | 	mov	local01, result1
089dc                 | ' err=expr() : if err>0 then return err
089dc     01 A6 16 F2 | 	cmp	local01, #1 wc
089e0     53 7B 02 36 |  if_ae	mov	result1, local01
089e4     C8 00 90 3D |  if_ae	jmp	#LR__0810
089e8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
089e8     38 00 00 FF 
089ec     C4 65 06 F1 | 	add	objptr, ##29124
089f0     32 A7 02 FB | 	rdlong	local01, objptr
089f4     03 A6 66 F0 | 	shl	local01, #3
089f8     02 00 00 FF 
089fc     38 64 86 F1 | 	sub	objptr, ##1080
08a00     32 A7 02 F1 | 	add	local01, objptr
08a04     04 A6 06 F1 | 	add	local01, #4
08a08     53 A7 02 FB | 	rdlong	local01, local01
08a0c     11 A6 0E F2 | 	cmp	local01, #17 wz
08a10     36 00 00 FF 
08a14     8C 65 86 F1 | 	sub	objptr, ##28044
08a18     15 7A 06 56 |  if_ne	mov	result1, #21
08a1c     90 00 90 5D |  if_ne	jmp	#LR__0810
08a20     38 00 00 FF 
08a24     C4 65 06 F1 | 	add	objptr, ##29124
08a28     32 A7 02 FB | 	rdlong	local01, objptr
08a2c     01 A6 06 F1 | 	add	local01, #1
08a30     32 A7 62 FC | 	wrlong	local01, objptr
08a34     38 00 00 FF 
08a38     C4 65 86 F1 | 	sub	objptr, ##29124
08a3c     18 34 B0 FD | 	call	#_expr
08a40     3D A7 02 F6 | 	mov	local01, result1
08a44                 | ' err=expr() : if err>0 then return err
08a44     01 A6 16 F2 | 	cmp	local01, #1 wc
08a48     53 7B 02 36 |  if_ae	mov	result1, local01
08a4c     60 00 90 3D |  if_ae	jmp	#LR__0810
08a50                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1  
08a50     38 00 00 FF 
08a54     C4 65 06 F1 | 	add	objptr, ##29124
08a58     32 A7 02 FB | 	rdlong	local01, objptr
08a5c     03 A6 66 F0 | 	shl	local01, #3
08a60     02 00 00 FF 
08a64     38 64 86 F1 | 	sub	objptr, ##1080
08a68     32 A7 02 F1 | 	add	local01, objptr
08a6c     04 A6 06 F1 | 	add	local01, #4
08a70     53 A7 02 FB | 	rdlong	local01, local01
08a74     11 A6 0E F2 | 	cmp	local01, #17 wz
08a78     36 00 00 FF 
08a7c     8C 65 86 F1 | 	sub	objptr, ##28044
08a80     15 7A 06 56 |  if_ne	mov	result1, #21
08a84     28 00 90 5D |  if_ne	jmp	#LR__0810
08a88     38 00 00 FF 
08a8c     C4 65 06 F1 | 	add	objptr, ##29124
08a90     32 A7 02 FB | 	rdlong	local01, objptr
08a94     01 A6 06 F1 | 	add	local01, #1
08a98     32 A7 62 FC | 	wrlong	local01, objptr
08a9c     38 00 00 FF 
08aa0     C4 65 86 F1 | 	sub	objptr, ##29124
08aa4     B0 33 B0 FD | 	call	#_expr
08aa8                 | ' err=expr() : if err>0 then return err
08aa8     01 7A 16 F2 | 	cmp	result1, #1 wc
08aac                 | ' return 0
08aac     00 7A 06 C6 |  if_b	mov	result1, #0
08ab0                 | LR__0810
08ab0     E7 F0 03 F6 | 	mov	ptra, fp
08ab4     F2 00 A0 FD | 	call	#popregs_
08ab8                 | _compile_fun_4p_ret
08ab8     2D 00 64 FD | 	ret
08abc                 | 
08abc                 | ' 
08abc                 | ' '----  Compile a command that can have variable number of parameters. Return num of params and error code
08abc                 | ' 
08abc                 | ' function compile_fun_varp() as ulong,ulong 
08abc                 | _compile_fun_varp
08abc     03 CA 05 F6 | 	mov	COUNT_, #3
08ac0     E8 00 A0 FD | 	call	#pushregs_
08ac4     00 A6 06 F6 | 	mov	local01, #0
08ac8                 | ' 
08ac8                 | ' i=0 : err=0
08ac8                 | ' if lparts(ct).token<>token_end then
08ac8     38 00 00 FF 
08acc     C4 65 06 F1 | 	add	objptr, ##29124
08ad0     32 A9 02 FB | 	rdlong	local02, objptr
08ad4     03 A8 66 F0 | 	shl	local02, #3
08ad8     02 00 00 FF 
08adc     38 64 86 F1 | 	sub	objptr, ##1080
08ae0     32 A9 02 F1 | 	add	local02, objptr
08ae4     04 A8 06 F1 | 	add	local02, #4
08ae8     54 A9 02 FB | 	rdlong	local02, local02
08aec     FE A9 0E F2 | 	cmp	local02, #510 wz
08af0     36 00 00 FF 
08af4     8C 65 86 F1 | 	sub	objptr, ##28044
08af8     88 00 90 AD |  if_e	jmp	#LR__0821
08afc                 | '   do
08afc                 | LR__0820
08afc     58 33 B0 FD | 	call	#_expr
08b00     01 A6 06 F1 | 	add	local01, #1
08b04                 | '     expr()
08b04                 | '     i+=1
08b04                 | '     if lparts(ct).token=token_comma then ct+=1
08b04     38 00 00 FF 
08b08     C4 65 06 F1 | 	add	objptr, ##29124
08b0c     32 A9 02 FB | 	rdlong	local02, objptr
08b10     03 A8 66 F0 | 	shl	local02, #3
08b14     02 00 00 FF 
08b18     38 64 86 F1 | 	sub	objptr, ##1080
08b1c     32 A9 02 F1 | 	add	local02, objptr
08b20     04 A8 06 F1 | 	add	local02, #4
08b24     54 A9 02 FB | 	rdlong	local02, local02
08b28     11 A8 0E F2 | 	cmp	local02, #17 wz
08b2c     36 00 00 FF 
08b30     8C 65 86 F1 | 	sub	objptr, ##28044
08b34     38 00 00 AF 
08b38     C4 65 06 A1 |  if_e	add	objptr, ##29124
08b3c     32 AB 02 AB |  if_e	rdlong	local03, objptr
08b40     01 AA 06 A1 |  if_e	add	local03, #1
08b44     32 AB 62 AC |  if_e	wrlong	local03, objptr
08b48     38 00 00 AF 
08b4c     C4 65 86 A1 |  if_e	sub	objptr, ##29124
08b50                 | '     if lparts(ct).token=token_end then exit loop
08b50     38 00 00 FF 
08b54     C4 65 06 F1 | 	add	objptr, ##29124
08b58     32 A9 02 FB | 	rdlong	local02, objptr
08b5c     03 A8 66 F0 | 	shl	local02, #3
08b60     02 00 00 FF 
08b64     38 64 86 F1 | 	sub	objptr, ##1080
08b68     32 A9 02 F1 | 	add	local02, objptr
08b6c     04 A8 06 F1 | 	add	local02, #4
08b70     54 A9 02 FB | 	rdlong	local02, local02
08b74     FE A9 0E F2 | 	cmp	local02, #510 wz
08b78     36 00 00 FF 
08b7c     8C 65 86 F1 | 	sub	objptr, ##28044
08b80     78 FF 9F 5D |  if_ne	jmp	#LR__0820
08b84                 | LR__0821
08b84                 | ' return i,err
08b84     53 7B 02 F6 | 	mov	result1, local01
08b88     00 7C 06 F6 | 	mov	result2, #0
08b8c     E7 F0 03 F6 | 	mov	ptra, fp
08b90     F2 00 A0 FD | 	call	#popregs_
08b94                 | _compile_fun_varp_ret
08b94     2D 00 64 FD | 	ret
08b98                 | 
08b98                 | ' 
08b98                 | ' '----  Compile read. The same as compile_input() except printing a prompt
08b98                 | ' 
08b98                 | ' function compile_read() as ulong,ulong 
08b98                 | _compile_read
08b98     04 CA 05 F6 | 	mov	COUNT_, #4
08b9c     E8 00 A0 FD | 	call	#pushregs_
08ba0     00 A6 06 F6 | 	mov	local01, #0
08ba4                 | ' 
08ba4                 | ' i=0 : err=0
08ba4                 | ' if lparts(ct).token<>token_end then
08ba4     38 00 00 FF 
08ba8     C4 65 06 F1 | 	add	objptr, ##29124
08bac     32 A9 02 FB | 	rdlong	local02, objptr
08bb0     03 A8 66 F0 | 	shl	local02, #3
08bb4     02 00 00 FF 
08bb8     38 64 86 F1 | 	sub	objptr, ##1080
08bbc     32 A9 02 F1 | 	add	local02, objptr
08bc0     04 A8 06 F1 | 	add	local02, #4
08bc4     54 A9 02 FB | 	rdlong	local02, local02
08bc8     FE A9 0E F2 | 	cmp	local02, #510 wz
08bcc     36 00 00 FF 
08bd0     8C 65 86 F1 | 	sub	objptr, ##28044
08bd4     98 00 90 AD |  if_e	jmp	#LR__0831
08bd8                 | '   do
08bd8                 | LR__0830
08bd8     EC 2E B0 FD | 	call	#_getaddr
08bdc     3D AB 02 F6 | 	mov	local03, result1
08be0     38 00 00 FF 
08be4     C4 65 06 F1 | 	add	objptr, ##29124
08be8     32 A9 02 FB | 	rdlong	local02, objptr
08bec     01 A8 06 F1 | 	add	local02, #1
08bf0     32 A9 62 FC | 	wrlong	local02, objptr
08bf4     01 A6 06 F1 | 	add	local01, #1
08bf8                 | '     err=getaddr() :ct+=1
08bf8                 | '     i+=1 
08bf8                 | '     if lparts(ct).token=token_comma then ct+=1 
08bf8     03 A8 66 F0 | 	shl	local02, #3
08bfc     02 00 00 FF 
08c00     38 64 86 F1 | 	sub	objptr, ##1080
08c04     32 A9 02 F1 | 	add	local02, objptr
08c08     04 A8 06 F1 | 	add	local02, #4
08c0c     54 A9 02 FB | 	rdlong	local02, local02
08c10     11 A8 0E F2 | 	cmp	local02, #17 wz
08c14     36 00 00 FF 
08c18     8C 65 86 F1 | 	sub	objptr, ##28044
08c1c     38 00 00 AF 
08c20     C4 65 06 A1 |  if_e	add	objptr, ##29124
08c24     32 AD 02 AB |  if_e	rdlong	local04, objptr
08c28     01 AC 06 A1 |  if_e	add	local04, #1
08c2c     32 AD 62 AC |  if_e	wrlong	local04, objptr
08c30     38 00 00 AF 
08c34     C4 65 86 A1 |  if_e	sub	objptr, ##29124
08c38                 | '     if lparts(ct).token=token_end then exit loop
08c38     38 00 00 FF 
08c3c     C4 65 06 F1 | 	add	objptr, ##29124
08c40     32 A9 02 FB | 	rdlong	local02, objptr
08c44     03 A8 66 F0 | 	shl	local02, #3
08c48     02 00 00 FF 
08c4c     38 64 86 F1 | 	sub	objptr, ##1080
08c50     32 A9 02 F1 | 	add	local02, objptr
08c54     04 A8 06 F1 | 	add	local02, #4
08c58     54 A9 02 FB | 	rdlong	local02, local02
08c5c     FE A9 0E F2 | 	cmp	local02, #510 wz
08c60     36 00 00 FF 
08c64     8C 65 86 F1 | 	sub	objptr, ##28044
08c68     08 00 90 AD |  if_e	jmp	#LR__0832
08c6c     68 FF 9F FD | 	jmp	#LR__0830
08c70                 | LR__0831
08c70     36 AA 06 F6 | 	mov	local03, #54
08c74                 | LR__0832
08c74                 | ' return i,err
08c74     53 7B 02 F6 | 	mov	result1, local01
08c78     55 7D 02 F6 | 	mov	result2, local03
08c7c     E7 F0 03 F6 | 	mov	ptra, fp
08c80     F2 00 A0 FD | 	call	#popregs_
08c84                 | _compile_read_ret
08c84     2D 00 64 FD | 	ret
08c88                 | 
08c88                 | ' 
08c88                 | ' '----  Compile input. The same as compile_varp() except these has to be variables, and not expressions, and also we need getaddr and not getvar
08c88                 | ' 
08c88                 | ' function compile_input() as ulong,ulong 
08c88                 | _compile_input
08c88     0F CA 05 F6 | 	mov	COUNT_, #15
08c8c     E8 00 A0 FD | 	call	#pushregs_
08c90                 | ' 
08c90                 | ' if lparts(ct).token=token_string then
08c90     38 00 00 FF 
08c94     C4 65 06 F1 | 	add	objptr, ##29124
08c98     32 97 02 FB | 	rdlong	arg03, objptr
08c9c     03 96 66 F0 | 	shl	arg03, #3
08ca0     02 00 00 FF 
08ca4     38 64 86 F1 | 	sub	objptr, ##1080
08ca8     32 97 02 F1 | 	add	arg03, objptr
08cac     04 96 06 F1 | 	add	arg03, #4
08cb0     4B 7D 02 FB | 	rdlong	result2, arg03
08cb4     01 00 00 FF 
08cb8     03 7C 0E F2 | 	cmp	result2, ##515 wz
08cbc     36 00 00 FF 
08cc0     8C 65 86 F1 | 	sub	objptr, ##28044
08cc4     38 06 90 5D |  if_ne	jmp	#LR__0847
08cc8     38 00 00 FF 
08ccc     C4 65 06 F1 | 	add	objptr, ##29124
08cd0     32 95 02 FB | 	rdlong	arg02, objptr
08cd4     03 94 66 F0 | 	shl	arg02, #3
08cd8     02 00 00 FF 
08cdc     38 64 86 F1 | 	sub	objptr, ##1080
08ce0     32 95 02 F1 | 	add	arg02, objptr
08ce4     4A 93 02 FB | 	rdlong	arg01, arg02
08ce8     36 00 00 FF 
08cec     8C 65 86 F1 | 	sub	objptr, ##28044
08cf0     49 AD 02 F6 | 	mov	local04, arg01
08cf4     D7 06 48 FB | 	callpa	#(@LR__0841-@LR__0840)>>2,fcache_load_ptr_
08cf8                 | LR__0840
08cf8     56 7B CA FA | 	rdbyte	result1, local04 wz
08cfc     01 AC 06 51 |  if_ne	add	local04, #1
08d00     F4 FF 9F 5D |  if_ne	jmp	#LR__0840
08d04                 | LR__0841
08d04     49 AD 82 F1 | 	sub	local04, arg01
08d08     56 7B 02 F6 | 	mov	result1, local04
08d0c     54 00 00 FF 
08d10     A8 64 06 F1 | 	add	objptr, ##43176
08d14     32 7B 62 FC | 	wrlong	result1, objptr
08d18     58 64 86 F1 | 	sub	objptr, #88
08d1c     32 93 02 FB | 	rdlong	arg01, objptr
08d20     3D 93 82 F1 | 	sub	arg01, result1
08d24     04 92 86 F1 | 	sub	arg01, #4
08d28     03 92 26 F5 | 	andn	arg01, #3
08d2c     32 93 62 FC | 	wrlong	arg01, objptr
08d30     58 64 06 F1 | 	add	objptr, #88
08d34     32 95 02 FB | 	rdlong	arg02, objptr
08d38     54 00 00 FF 
08d3c     A8 64 86 F1 | 	sub	objptr, ##43176
08d40     90 84 B1 FD | 	call	#_pslpoke
08d44                 | '   pslpoke memtop,l
08d44                 | '   for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
08d44     01 AE 06 F6 | 	mov	local05, #1
08d48     54 00 00 FF 
08d4c     A8 64 06 F1 | 	add	objptr, ##43176
08d50     32 B1 02 FB | 	rdlong	local06, objptr
08d54     54 00 00 FF 
08d58     A8 64 86 F1 | 	sub	objptr, ##43176
08d5c     01 B0 06 F1 | 	add	local06, #1
08d60                 | LR__0842
08d60     58 AF 52 F2 | 	cmps	local05, local06 wc
08d64     5C 00 90 3D |  if_ae	jmp	#LR__0843
08d68     54 00 00 FF 
08d6c     50 64 06 F1 | 	add	objptr, ##43088
08d70     32 B3 02 FB | 	rdlong	local07, objptr
08d74     03 B2 06 F1 | 	add	local07, #3
08d78     57 B3 02 F1 | 	add	local07, local05
08d7c     1B 00 00 FF 
08d80     8C 64 86 F1 | 	sub	objptr, ##13964
08d84     32 95 02 FB | 	rdlong	arg02, objptr
08d88     03 94 66 F0 | 	shl	arg02, #3
08d8c     02 00 00 FF 
08d90     38 64 86 F1 | 	sub	objptr, ##1080
08d94     32 95 02 F1 | 	add	arg02, objptr
08d98     4A 93 02 FB | 	rdlong	arg01, arg02
08d9c     57 95 02 F6 | 	mov	arg02, local05
08da0     01 96 06 F6 | 	mov	arg03, #1
08da4     36 00 00 FF 
08da8     8C 65 86 F1 | 	sub	objptr, ##28044
08dac     18 D9 B1 FD | 	call	#__system__Mid_S
08db0     3D 95 C2 FA | 	rdbyte	arg02, result1
08db4     59 93 02 F6 | 	mov	arg01, local07
08db8     A8 84 B1 FD | 	call	#_pspoke
08dbc     01 AE 06 F1 | 	add	local05, #1
08dc0     9C FF 9F FD | 	jmp	#LR__0842
08dc4                 | LR__0843
08dc4     54 00 00 FF 
08dc8     50 64 06 F1 | 	add	objptr, ##43088
08dcc     32 A7 02 FB | 	rdlong	local01, objptr
08dd0     2B AA 06 F6 | 	mov	local03, #43
08dd4     53 B5 02 F6 | 	mov	local08, local01
08dd8     54 B3 02 F6 | 	mov	local07, local02
08ddc     55 B7 02 F6 | 	mov	local09, local03
08de0     08 00 00 FF 
08de4     54 64 86 F1 | 	sub	objptr, ##4180
08de8     32 B1 02 FB | 	rdlong	local06, objptr
08dec     58 AF 02 F6 | 	mov	local05, local06
08df0     01 AE 66 F0 | 	shl	local05, #1
08df4     58 AF 02 F1 | 	add	local05, local06
08df8     02 AE 66 F0 | 	shl	local05, #2
08dfc     03 00 00 FF 
08e00     00 64 86 F1 | 	sub	objptr, ##1536
08e04     32 AF 02 F1 | 	add	local05, objptr
08e08     57 B5 62 FC | 	wrlong	local08, local05
08e0c     03 00 00 FF 
08e10     00 64 06 F1 | 	add	objptr, ##1536
08e14     32 B5 02 FB | 	rdlong	local08, objptr
08e18     5A B1 02 F6 | 	mov	local06, local08
08e1c     01 B0 66 F0 | 	shl	local06, #1
08e20     5A B1 02 F1 | 	add	local06, local08
08e24     02 B0 66 F0 | 	shl	local06, #2
08e28     03 00 00 FF 
08e2c     00 64 86 F1 | 	sub	objptr, ##1536
08e30     32 B1 02 F1 | 	add	local06, objptr
08e34     04 B0 06 F1 | 	add	local06, #4
08e38     58 B3 62 FC | 	wrlong	local07, local06
08e3c     03 00 00 FF 
08e40     00 64 06 F1 | 	add	objptr, ##1536
08e44     32 B5 02 FB | 	rdlong	local08, objptr
08e48     5A B3 02 F6 | 	mov	local07, local08
08e4c     01 B2 66 F0 | 	shl	local07, #1
08e50     5A B3 02 F1 | 	add	local07, local08
08e54     02 B2 66 F0 | 	shl	local07, #2
08e58     03 00 00 FF 
08e5c     00 64 86 F1 | 	sub	objptr, ##1536
08e60     32 B3 02 F1 | 	add	local07, objptr
08e64     08 B2 06 F1 | 	add	local07, #8
08e68     59 B7 62 FC | 	wrlong	local09, local07
08e6c     03 00 00 FF 
08e70     00 64 06 F1 | 	add	objptr, ##1536
08e74     32 B5 02 FB | 	rdlong	local08, objptr
08e78     01 B4 06 F1 | 	add	local08, #1
08e7c     32 B5 62 FC | 	wrlong	local08, objptr
08e80     13 00 00 FF 
08e84     38 64 86 F1 | 	sub	objptr, ##9784
08e88     32 B5 02 FB | 	rdlong	local08, objptr
08e8c     01 B4 06 F1 | 	add	local08, #1
08e90     32 B5 62 FC | 	wrlong	local08, objptr
08e94                 | '   t1.result.uresult=memtop
08e94                 | '   t1.result_type=result_string2  
08e94                 | '   compiledline(lineptr)=t1: lineptr+=1 :ct+=1
08e94                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08e94     03 B4 66 F0 | 	shl	local08, #3
08e98     02 00 00 FF 
08e9c     38 64 86 F1 | 	sub	objptr, ##1080
08ea0     32 B5 02 F1 | 	add	local08, objptr
08ea4     04 B4 06 F1 | 	add	local08, #4
08ea8     5A B5 02 FB | 	rdlong	local08, local08
08eac     11 B4 0E F2 | 	cmp	local08, #17 wz
08eb0     36 00 00 FF 
08eb4     8C 65 86 F1 | 	sub	objptr, ##28044
08eb8     60 01 90 5D |  if_ne	jmp	#LR__0844
08ebc     21 AA 06 F6 | 	mov	local03, #33
08ec0     53 B5 02 F6 | 	mov	local08, local01
08ec4     54 B3 02 F6 | 	mov	local07, local02
08ec8     55 B9 02 F6 | 	mov	local10, local03
08ecc     4B 00 00 FF 
08ed0     FC 65 06 F1 | 	add	objptr, ##38908
08ed4     32 BB 02 FB | 	rdlong	local11, objptr
08ed8     5D BD 02 F6 | 	mov	local12, local11
08edc     01 BC 66 F0 | 	shl	local12, #1
08ee0     5D BD 02 F1 | 	add	local12, local11
08ee4     02 BC 66 F0 | 	shl	local12, #2
08ee8     03 00 00 FF 
08eec     00 64 86 F1 | 	sub	objptr, ##1536
08ef0     32 BD 02 F1 | 	add	local12, objptr
08ef4     5E B5 62 FC | 	wrlong	local08, local12
08ef8     03 00 00 FF 
08efc     00 64 06 F1 | 	add	objptr, ##1536
08f00     32 BF 02 FB | 	rdlong	local13, objptr
08f04     5F B5 02 F6 | 	mov	local08, local13
08f08     01 B4 66 F0 | 	shl	local08, #1
08f0c     5F B5 02 F1 | 	add	local08, local13
08f10     02 B4 66 F0 | 	shl	local08, #2
08f14     03 00 00 FF 
08f18     00 64 86 F1 | 	sub	objptr, ##1536
08f1c     32 B5 02 F1 | 	add	local08, objptr
08f20     04 B4 06 F1 | 	add	local08, #4
08f24     5A B3 62 FC | 	wrlong	local07, local08
08f28     03 00 00 FF 
08f2c     00 64 06 F1 | 	add	objptr, ##1536
08f30     32 B5 02 FB | 	rdlong	local08, objptr
08f34     5A C1 02 F6 | 	mov	local14, local08
08f38     01 C0 66 F0 | 	shl	local14, #1
08f3c     5A C1 02 F1 | 	add	local14, local08
08f40     02 C0 66 F0 | 	shl	local14, #2
08f44     03 00 00 FF 
08f48     00 64 86 F1 | 	sub	objptr, ##1536
08f4c     32 C1 02 F1 | 	add	local14, objptr
08f50     08 C0 06 F1 | 	add	local14, #8
08f54     60 B9 62 FC | 	wrlong	local10, local14
08f58     03 00 00 FF 
08f5c     00 64 06 F1 | 	add	objptr, ##1536
08f60     32 B5 02 FB | 	rdlong	local08, objptr
08f64     01 B4 06 F1 | 	add	local08, #1
08f68     32 B5 62 FC | 	wrlong	local08, objptr
08f6c     44 AA 06 F6 | 	mov	local03, #68
08f70     53 B5 02 F6 | 	mov	local08, local01
08f74     54 B3 02 F6 | 	mov	local07, local02
08f78     55 B9 02 F6 | 	mov	local10, local03
08f7c     32 C1 02 FB | 	rdlong	local14, objptr
08f80     60 BF 02 F6 | 	mov	local13, local14
08f84     01 BE 66 F0 | 	shl	local13, #1
08f88     60 BF 02 F1 | 	add	local13, local14
08f8c     02 BE 66 F0 | 	shl	local13, #2
08f90     03 00 00 FF 
08f94     00 64 86 F1 | 	sub	objptr, ##1536
08f98     32 BF 02 F1 | 	add	local13, objptr
08f9c     5F B5 62 FC | 	wrlong	local08, local13
08fa0     03 00 00 FF 
08fa4     00 64 06 F1 | 	add	objptr, ##1536
08fa8     32 C1 02 FB | 	rdlong	local14, objptr
08fac     60 BF 02 F6 | 	mov	local13, local14
08fb0     01 BE 66 F0 | 	shl	local13, #1
08fb4     60 BF 02 F1 | 	add	local13, local14
08fb8     02 BE 66 F0 | 	shl	local13, #2
08fbc     03 00 00 FF 
08fc0     00 64 86 F1 | 	sub	objptr, ##1536
08fc4     32 BF 02 F1 | 	add	local13, objptr
08fc8     04 BE 06 F1 | 	add	local13, #4
08fcc     5F B3 62 FC | 	wrlong	local07, local13
08fd0     03 00 00 FF 
08fd4     00 64 06 F1 | 	add	objptr, ##1536
08fd8     32 BF 02 FB | 	rdlong	local13, objptr
08fdc     5F C1 02 F6 | 	mov	local14, local13
08fe0     01 C0 66 F0 | 	shl	local14, #1
08fe4     5F C1 02 F1 | 	add	local14, local13
08fe8     02 C0 66 F0 | 	shl	local14, #2
08fec     03 00 00 FF 
08ff0     00 64 86 F1 | 	sub	objptr, ##1536
08ff4     32 C1 02 F1 | 	add	local14, objptr
08ff8     08 C0 06 F1 | 	add	local14, #8
08ffc     60 B9 62 FC | 	wrlong	local10, local14
09000     03 00 00 FF 
09004     00 64 06 F1 | 	add	objptr, ##1536
09008     32 B5 02 FB | 	rdlong	local08, objptr
0900c     01 B4 06 F1 | 	add	local08, #1
09010     32 B5 62 FC | 	wrlong	local08, objptr
09014     4B 00 00 FF 
09018     FC 65 86 F1 | 	sub	objptr, ##38908
0901c                 | LR__0844
0901c                 | '   if lparts(ct).token=token_semicolon then t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
0901c     38 00 00 FF 
09020     C4 65 06 F1 | 	add	objptr, ##29124
09024     32 B5 02 FB | 	rdlong	local08, objptr
09028     03 B4 66 F0 | 	shl	local08, #3
0902c     02 00 00 FF 
09030     38 64 86 F1 | 	sub	objptr, ##1080
09034     32 B5 02 F1 | 	add	local08, objptr
09038     04 B4 06 F1 | 	add	local08, #4
0903c     5A C1 02 FB | 	rdlong	local14, local08
09040     12 C0 0E F2 | 	cmp	local14, #18 wz
09044     36 00 00 FF 
09048     8C 65 86 F1 | 	sub	objptr, ##28044
0904c     60 01 90 5D |  if_ne	jmp	#LR__0845
09050     22 AA 06 F6 | 	mov	local03, #34
09054     53 B5 02 F6 | 	mov	local08, local01
09058     54 B3 02 F6 | 	mov	local07, local02
0905c     55 B9 02 F6 | 	mov	local10, local03
09060     4B 00 00 FF 
09064     FC 65 06 F1 | 	add	objptr, ##38908
09068     32 C1 02 FB | 	rdlong	local14, objptr
0906c     60 BF 02 F6 | 	mov	local13, local14
09070     01 BE 66 F0 | 	shl	local13, #1
09074     60 BF 02 F1 | 	add	local13, local14
09078     02 BE 66 F0 | 	shl	local13, #2
0907c     03 00 00 FF 
09080     00 64 86 F1 | 	sub	objptr, ##1536
09084     32 BF 02 F1 | 	add	local13, objptr
09088     5F B5 62 FC | 	wrlong	local08, local13
0908c     03 00 00 FF 
09090     00 64 06 F1 | 	add	objptr, ##1536
09094     32 C1 02 FB | 	rdlong	local14, objptr
09098     60 B5 02 F6 | 	mov	local08, local14
0909c     01 B4 66 F0 | 	shl	local08, #1
090a0     60 B5 02 F1 | 	add	local08, local14
090a4     02 B4 66 F0 | 	shl	local08, #2
090a8     03 00 00 FF 
090ac     00 64 86 F1 | 	sub	objptr, ##1536
090b0     32 B5 02 F1 | 	add	local08, objptr
090b4     04 B4 06 F1 | 	add	local08, #4
090b8     5A B3 62 FC | 	wrlong	local07, local08
090bc     03 00 00 FF 
090c0     00 64 06 F1 | 	add	objptr, ##1536
090c4     32 B5 02 FB | 	rdlong	local08, objptr
090c8     5A C1 02 F6 | 	mov	local14, local08
090cc     01 C0 66 F0 | 	shl	local14, #1
090d0     5A C1 02 F1 | 	add	local14, local08
090d4     02 C0 66 F0 | 	shl	local14, #2
090d8     03 00 00 FF 
090dc     00 64 86 F1 | 	sub	objptr, ##1536
090e0     32 C1 02 F1 | 	add	local14, objptr
090e4     08 C0 06 F1 | 	add	local14, #8
090e8     60 B9 62 FC | 	wrlong	local10, local14
090ec     03 00 00 FF 
090f0     00 64 06 F1 | 	add	objptr, ##1536
090f4     32 B5 02 FB | 	rdlong	local08, objptr
090f8     01 B4 06 F1 | 	add	local08, #1
090fc     32 B5 62 FC | 	wrlong	local08, objptr
09100     44 AA 06 F6 | 	mov	local03, #68
09104     53 B5 02 F6 | 	mov	local08, local01
09108     54 B3 02 F6 | 	mov	local07, local02
0910c     55 B9 02 F6 | 	mov	local10, local03
09110     32 C1 02 FB | 	rdlong	local14, objptr
09114     60 BF 02 F6 | 	mov	local13, local14
09118     01 BE 66 F0 | 	shl	local13, #1
0911c     60 BF 02 F1 | 	add	local13, local14
09120     02 BE 66 F0 | 	shl	local13, #2
09124     03 00 00 FF 
09128     00 64 86 F1 | 	sub	objptr, ##1536
0912c     32 BF 02 F1 | 	add	local13, objptr
09130     5F B5 62 FC | 	wrlong	local08, local13
09134     03 00 00 FF 
09138     00 64 06 F1 | 	add	objptr, ##1536
0913c     32 C1 02 FB | 	rdlong	local14, objptr
09140     60 BF 02 F6 | 	mov	local13, local14
09144     01 BE 66 F0 | 	shl	local13, #1
09148     60 BF 02 F1 | 	add	local13, local14
0914c     02 BE 66 F0 | 	shl	local13, #2
09150     03 00 00 FF 
09154     00 64 86 F1 | 	sub	objptr, ##1536
09158     32 BF 02 F1 | 	add	local13, objptr
0915c     04 BE 06 F1 | 	add	local13, #4
09160     5F B3 62 FC | 	wrlong	local07, local13
09164     03 00 00 FF 
09168     00 64 06 F1 | 	add	objptr, ##1536
0916c     32 BF 02 FB | 	rdlong	local13, objptr
09170     5F C1 02 F6 | 	mov	local14, local13
09174     01 C0 66 F0 | 	shl	local14, #1
09178     5F C1 02 F1 | 	add	local14, local13
0917c     02 C0 66 F0 | 	shl	local14, #2
09180     03 00 00 FF 
09184     00 64 86 F1 | 	sub	objptr, ##1536
09188     32 C1 02 F1 | 	add	local14, objptr
0918c     08 C0 06 F1 | 	add	local14, #8
09190     60 B9 62 FC | 	wrlong	local10, local14
09194     03 00 00 FF 
09198     00 64 06 F1 | 	add	objptr, ##1536
0919c     32 B5 02 FB | 	rdlong	local08, objptr
091a0     01 B4 06 F1 | 	add	local08, #1
091a4     32 B5 62 FC | 	wrlong	local08, objptr
091a8     4B 00 00 FF 
091ac     FC 65 86 F1 | 	sub	objptr, ##38908
091b0                 | LR__0845
091b0                 | '   if lparts(ct).token<>token_semicolon  andalso lparts(ct).token<>token_comma then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 : ct-=1
091b0     38 00 00 FF 
091b4     C4 65 06 F1 | 	add	objptr, ##29124
091b8     32 B5 02 FB | 	rdlong	local08, objptr
091bc     03 B4 66 F0 | 	shl	local08, #3
091c0     02 00 00 FF 
091c4     38 64 86 F1 | 	sub	objptr, ##1080
091c8     32 B5 02 F1 | 	add	local08, objptr
091cc     04 B4 06 F1 | 	add	local08, #4
091d0     5A C1 02 FB | 	rdlong	local14, local08
091d4     12 C0 0E F2 | 	cmp	local14, #18 wz
091d8     36 00 00 FF 
091dc     8C 65 86 F1 | 	sub	objptr, ##28044
091e0     00 01 90 AD |  if_e	jmp	#LR__0846
091e4     38 00 00 FF 
091e8     C4 65 06 F1 | 	add	objptr, ##29124
091ec     32 B5 02 FB | 	rdlong	local08, objptr
091f0     03 B4 66 F0 | 	shl	local08, #3
091f4     02 00 00 FF 
091f8     38 64 86 F1 | 	sub	objptr, ##1080
091fc     32 B5 02 F1 | 	add	local08, objptr
09200     04 B4 06 F1 | 	add	local08, #4
09204     5A C1 02 FB | 	rdlong	local14, local08
09208     11 C0 0E F2 | 	cmp	local14, #17 wz
0920c     36 00 00 FF 
09210     8C 65 86 F1 | 	sub	objptr, ##28044
09214     CC 00 90 AD |  if_e	jmp	#LR__0846
09218     44 AA 06 F6 | 	mov	local03, #68
0921c     53 B5 02 F6 | 	mov	local08, local01
09220     54 B3 02 F6 | 	mov	local07, local02
09224     55 B9 02 F6 | 	mov	local10, local03
09228     4B 00 00 FF 
0922c     FC 65 06 F1 | 	add	objptr, ##38908
09230     32 C1 02 FB | 	rdlong	local14, objptr
09234     60 BF 02 F6 | 	mov	local13, local14
09238     01 BE 66 F0 | 	shl	local13, #1
0923c     60 BF 02 F1 | 	add	local13, local14
09240     02 BE 66 F0 | 	shl	local13, #2
09244     03 00 00 FF 
09248     00 64 86 F1 | 	sub	objptr, ##1536
0924c     32 BF 02 F1 | 	add	local13, objptr
09250     5F B5 62 FC | 	wrlong	local08, local13
09254     03 00 00 FF 
09258     00 64 06 F1 | 	add	objptr, ##1536
0925c     32 C1 02 FB | 	rdlong	local14, objptr
09260     60 BF 02 F6 | 	mov	local13, local14
09264     01 BE 66 F0 | 	shl	local13, #1
09268     60 BF 02 F1 | 	add	local13, local14
0926c     02 BE 66 F0 | 	shl	local13, #2
09270     03 00 00 FF 
09274     00 64 86 F1 | 	sub	objptr, ##1536
09278     32 BF 02 F1 | 	add	local13, objptr
0927c     04 BE 06 F1 | 	add	local13, #4
09280     5F B3 62 FC | 	wrlong	local07, local13
09284     03 00 00 FF 
09288     00 64 06 F1 | 	add	objptr, ##1536
0928c     32 BF 02 FB | 	rdlong	local13, objptr
09290     5F C1 02 F6 | 	mov	local14, local13
09294     01 C0 66 F0 | 	shl	local14, #1
09298     5F C1 02 F1 | 	add	local14, local13
0929c     02 C0 66 F0 | 	shl	local14, #2
092a0     03 00 00 FF 
092a4     00 64 86 F1 | 	sub	objptr, ##1536
092a8     32 C1 02 F1 | 	add	local14, objptr
092ac     08 C0 06 F1 | 	add	local14, #8
092b0     60 B9 62 FC | 	wrlong	local10, local14
092b4     03 00 00 FF 
092b8     00 64 06 F1 | 	add	objptr, ##1536
092bc     32 B5 02 FB | 	rdlong	local08, objptr
092c0     01 B4 06 F1 | 	add	local08, #1
092c4     32 B5 62 FC | 	wrlong	local08, objptr
092c8     13 00 00 FF 
092cc     38 64 86 F1 | 	sub	objptr, ##9784
092d0     32 B5 02 FB | 	rdlong	local08, objptr
092d4     01 B4 86 F1 | 	sub	local08, #1
092d8     32 B5 62 FC | 	wrlong	local08, objptr
092dc     38 00 00 FF 
092e0     C4 65 86 F1 | 	sub	objptr, ##29124
092e4                 | LR__0846
092e4     38 00 00 FF 
092e8     C4 65 06 F1 | 	add	objptr, ##29124
092ec     32 B5 02 FB | 	rdlong	local08, objptr
092f0     01 B4 06 F1 | 	add	local08, #1
092f4     32 B5 62 FC | 	wrlong	local08, objptr
092f8     38 00 00 FF 
092fc     C4 65 86 F1 | 	sub	objptr, ##29124
09300                 | LR__0847
09300     00 AE 06 F6 | 	mov	local05, #0
09304                 | ' i=0 : err=0
09304                 | ' if lparts(ct).token<>token_end then
09304     38 00 00 FF 
09308     C4 65 06 F1 | 	add	objptr, ##29124
0930c     32 C1 02 FB | 	rdlong	local14, objptr
09310     03 C0 66 F0 | 	shl	local14, #3
09314     02 00 00 FF 
09318     38 64 86 F1 | 	sub	objptr, ##1080
0931c     32 C1 02 F1 | 	add	local14, objptr
09320     04 C0 06 F1 | 	add	local14, #4
09324     60 C1 02 FB | 	rdlong	local14, local14
09328     FE C1 0E F2 | 	cmp	local14, #510 wz
0932c     36 00 00 FF 
09330     8C 65 86 F1 | 	sub	objptr, ##28044
09334     98 00 90 AD |  if_e	jmp	#LR__0849
09338                 | '   do
09338                 | LR__0848
09338     8C 27 B0 FD | 	call	#_getaddr
0933c     3D C3 02 F6 | 	mov	local15, result1
09340     38 00 00 FF 
09344     C4 65 06 F1 | 	add	objptr, ##29124
09348     32 C1 02 FB | 	rdlong	local14, objptr
0934c     01 C0 06 F1 | 	add	local14, #1
09350     32 C1 62 FC | 	wrlong	local14, objptr
09354     01 AE 06 F1 | 	add	local05, #1
09358                 | '     err=getaddr() :ct+=1
09358                 | '     i+=1 
09358                 | '     if lparts(ct).token=token_comma then ct+=1 
09358     03 C0 66 F0 | 	shl	local14, #3
0935c     02 00 00 FF 
09360     38 64 86 F1 | 	sub	objptr, ##1080
09364     32 C1 02 F1 | 	add	local14, objptr
09368     04 C0 06 F1 | 	add	local14, #4
0936c     60 C1 02 FB | 	rdlong	local14, local14
09370     11 C0 0E F2 | 	cmp	local14, #17 wz
09374     36 00 00 FF 
09378     8C 65 86 F1 | 	sub	objptr, ##28044
0937c     38 00 00 AF 
09380     C4 65 06 A1 |  if_e	add	objptr, ##29124
09384     32 B5 02 AB |  if_e	rdlong	local08, objptr
09388     01 B4 06 A1 |  if_e	add	local08, #1
0938c     32 B5 62 AC |  if_e	wrlong	local08, objptr
09390     38 00 00 AF 
09394     C4 65 86 A1 |  if_e	sub	objptr, ##29124
09398                 | '     if lparts(ct).token=token_end then exit loop
09398     38 00 00 FF 
0939c     C4 65 06 F1 | 	add	objptr, ##29124
093a0     32 C1 02 FB | 	rdlong	local14, objptr
093a4     03 C0 66 F0 | 	shl	local14, #3
093a8     02 00 00 FF 
093ac     38 64 86 F1 | 	sub	objptr, ##1080
093b0     32 C1 02 F1 | 	add	local14, objptr
093b4     04 C0 06 F1 | 	add	local14, #4
093b8     60 C1 02 FB | 	rdlong	local14, local14
093bc     FE C1 0E F2 | 	cmp	local14, #510 wz
093c0     36 00 00 FF 
093c4     8C 65 86 F1 | 	sub	objptr, ##28044
093c8     08 00 90 AD |  if_e	jmp	#LR__0850
093cc     68 FF 9F FD | 	jmp	#LR__0848
093d0                 | LR__0849
093d0     36 C2 06 F6 | 	mov	local15, #54
093d4                 | LR__0850
093d4                 | ' return i,err
093d4     57 7B 02 F6 | 	mov	result1, local05
093d8     61 7D 02 F6 | 	mov	result2, local15
093dc     E7 F0 03 F6 | 	mov	ptra, fp
093e0     F2 00 A0 FD | 	call	#popregs_
093e4                 | _compile_input_ret
093e4     2D 00 64 FD | 	ret
093e8                 | 
093e8                 | ' 
093e8                 | ' '----- compile assign to an array element
093e8                 | ' 
093e8                 | ' function compile_array_assign() as ulong 
093e8                 | _compile_array_assign
093e8     0B CA 05 F6 | 	mov	COUNT_, #11
093ec     E8 00 A0 FD | 	call	#pushregs_
093f0     00 AC 06 F6 | 	mov	local04, #0
093f4     00 AE 06 F6 | 	mov	local05, #0
093f8     38 00 00 FF 
093fc     C4 65 06 F1 | 	add	objptr, ##29124
09400     32 B1 02 FB | 	rdlong	local06, objptr
09404     58 7B 02 F6 | 	mov	result1, local06
09408     01 7A 86 F1 | 	sub	result1, #1
0940c     03 7A 66 F0 | 	shl	result1, #3
09410     02 00 00 FF 
09414     38 64 86 F1 | 	sub	objptr, ##1080
09418     32 7B 02 F1 | 	add	result1, objptr
0941c     3D B3 02 FB | 	rdlong	local07, result1
09420                 | ' numpar=0 : err=0
09420                 | ' varname$=lparts(ct-1).part$
09420                 | ' if lparts(ct).token=token_lpar then
09420     03 B0 66 F0 | 	shl	local06, #3
09424     32 B1 02 F1 | 	add	local06, objptr
09428     04 B0 06 F1 | 	add	local06, #4
0942c     58 B1 02 FB | 	rdlong	local06, local06
09430     15 B0 0E F2 | 	cmp	local06, #21 wz
09434     36 00 00 FF 
09438     8C 65 86 F1 | 	sub	objptr, ##28044
0943c     F0 01 90 5D |  if_ne	jmp	#LR__0864
09440     38 00 00 FF 
09444     C4 65 06 F1 | 	add	objptr, ##29124
09448     32 B5 02 FB | 	rdlong	local08, objptr
0944c     01 B4 06 F1 | 	add	local08, #1
09450     32 B5 62 FC | 	wrlong	local08, objptr
09454     38 00 00 FF 
09458     C4 65 86 F1 | 	sub	objptr, ##29124
0945c                 | '   ct+=1 											' omit this lpar, this is for expr list
0945c                 | '   do
0945c                 | LR__0860
0945c     F8 29 B0 FD | 	call	#_expr
09460     38 00 00 FF 
09464     C4 65 06 F1 | 	add	objptr, ##29124
09468     32 B1 02 FB | 	rdlong	local06, objptr
0946c     01 B0 06 F1 | 	add	local06, #1
09470     32 B1 62 FC | 	wrlong	local06, objptr
09474     01 AC 06 F1 | 	add	local04, #1
09478     01 B0 86 F1 | 	sub	local06, #1
0947c     03 B0 66 F0 | 	shl	local06, #3
09480     02 00 00 FF 
09484     38 64 86 F1 | 	sub	objptr, ##1080
09488     32 B1 02 F1 | 	add	local06, objptr
0948c     04 B0 06 F1 | 	add	local06, #4
09490     58 B5 02 FB | 	rdlong	local08, local06
09494     14 B4 0E F2 | 	cmp	local08, #20 wz
09498     36 00 00 FF 
0949c     8C 65 86 F1 | 	sub	objptr, ##28044
094a0     34 00 90 AD |  if_e	jmp	#LR__0861
094a4     38 00 00 FF 
094a8     C4 65 06 F1 | 	add	objptr, ##29124
094ac     32 B5 02 FB | 	rdlong	local08, objptr
094b0     03 B4 66 F0 | 	shl	local08, #3
094b4     02 00 00 FF 
094b8     38 64 86 F1 | 	sub	objptr, ##1080
094bc     32 B5 02 F1 | 	add	local08, objptr
094c0     04 B4 06 F1 | 	add	local08, #4
094c4     5A B5 02 FB | 	rdlong	local08, local08
094c8     FE B5 0E F2 | 	cmp	local08, #510 wz
094cc     36 00 00 FF 
094d0     8C 65 86 F1 | 	sub	objptr, ##28044
094d4     84 FF 9F 5D |  if_ne	jmp	#LR__0860
094d8                 | LR__0861
094d8     38 00 00 FF 
094dc     C4 65 06 F1 | 	add	objptr, ##29124
094e0     32 B5 02 FB | 	rdlong	local08, objptr
094e4     01 B4 06 F1 | 	add	local08, #1
094e8     32 B5 62 FC | 	wrlong	local08, objptr
094ec     38 00 00 FF 
094f0     C4 65 86 F1 | 	sub	objptr, ##29124
094f4     60 29 B0 FD | 	call	#_expr
094f8     01 B6 66 F6 | 	neg	local09, #1
094fc     00 B8 06 F6 | 	mov	local10, #0
09500                 | '   ct+=1 : expr()
09500                 | '   j=-1 : i=0 
09500                 | '   do 
09500                 | LR__0862
09500                 | '     if variables(i).name=varname$ then j=i: exit loop
09500     5C B1 02 F6 | 	mov	local06, local10
09504     04 B0 66 F0 | 	shl	local06, #4
09508     32 B5 02 F6 | 	mov	local08, objptr
0950c     16 00 00 FF 
09510     78 B5 06 F1 | 	add	local08, ##11640
09514     5A B1 02 F1 | 	add	local06, local08
09518     58 93 02 FB | 	rdlong	arg01, local06
0951c     59 95 02 F6 | 	mov	arg02, local07
09520     0C B8 B1 FD | 	call	#__system___string_cmp
09524     00 7A 0E F2 | 	cmp	result1, #0 wz
09528     5C B7 02 A6 |  if_e	mov	local09, local10
0952c     20 00 90 AD |  if_e	jmp	#LR__0863
09530     01 B8 06 F1 | 	add	local10, #1
09534     36 00 00 FF 
09538     88 65 06 F1 | 	add	objptr, ##28040
0953c     32 B5 02 FB | 	rdlong	local08, objptr
09540     36 00 00 FF 
09544     88 65 86 F1 | 	sub	objptr, ##28040
09548     5A B9 5A F2 | 	cmps	local10, local08 wcz
0954c     B0 FF 9F ED |  if_be	jmp	#LR__0862
09550                 | LR__0863
09550     5B A7 02 F6 | 	mov	local01, local09
09554     56 A9 02 F6 | 	mov	local02, local04
09558     17 AA 06 F6 | 	mov	local03, #23
0955c     53 B5 02 F6 | 	mov	local08, local01
09560     54 BB 02 F6 | 	mov	local11, local02
09564     55 B3 02 F6 | 	mov	local07, local03
09568     4B 00 00 FF 
0956c     FC 65 06 F1 | 	add	objptr, ##38908
09570     32 A7 02 FB | 	rdlong	local01, objptr
09574     53 B7 02 F6 | 	mov	local09, local01
09578     01 B6 66 F0 | 	shl	local09, #1
0957c     53 B7 02 F1 | 	add	local09, local01
09580     02 B6 66 F0 | 	shl	local09, #2
09584     03 00 00 FF 
09588     00 64 86 F1 | 	sub	objptr, ##1536
0958c     32 B7 02 F1 | 	add	local09, objptr
09590     5B B5 62 FC | 	wrlong	local08, local09
09594     03 00 00 FF 
09598     00 64 06 F1 | 	add	objptr, ##1536
0959c     32 A7 02 FB | 	rdlong	local01, objptr
095a0     53 B7 02 F6 | 	mov	local09, local01
095a4     01 B6 66 F0 | 	shl	local09, #1
095a8     53 B7 02 F1 | 	add	local09, local01
095ac     02 B6 66 F0 | 	shl	local09, #2
095b0     03 00 00 FF 
095b4     00 64 86 F1 | 	sub	objptr, ##1536
095b8     32 B7 02 F1 | 	add	local09, objptr
095bc     04 B6 06 F1 | 	add	local09, #4
095c0     5B BB 62 FC | 	wrlong	local11, local09
095c4     03 00 00 FF 
095c8     00 64 06 F1 | 	add	objptr, ##1536
095cc     32 BB 02 FB | 	rdlong	local11, objptr
095d0     5D A7 02 F6 | 	mov	local01, local11
095d4     01 A6 66 F0 | 	shl	local01, #1
095d8     5D A7 02 F1 | 	add	local01, local11
095dc     02 A6 66 F0 | 	shl	local01, #2
095e0     03 00 00 FF 
095e4     00 64 86 F1 | 	sub	objptr, ##1536
095e8     32 A7 02 F1 | 	add	local01, objptr
095ec     08 A6 06 F1 | 	add	local01, #8
095f0     53 B3 62 FC | 	wrlong	local07, local01
095f4     03 00 00 FF 
095f8     00 64 06 F1 | 	add	objptr, ##1536
095fc     32 B5 02 FB | 	rdlong	local08, objptr
09600     01 B4 06 F1 | 	add	local08, #1
09604     32 B5 62 FC | 	wrlong	local08, objptr
09608                 | '   t1.result.twowords(0)=j: t1.result.twowords(1)=numpar : t1.result_type=fun_assign : compiledline(lineptr)=t1: lineptr +=1 
09608                 | '   if numpar>3 then err=45
09608     04 AC 16 F2 | 	cmp	local04, #4 wc
0960c     2D AE 06 36 |  if_ae	mov	local05, #45
09610                 | '   if i>varnum then err=20
09610     15 00 00 FF 
09614     74 64 86 F1 | 	sub	objptr, ##10868
09618     32 B5 02 FB | 	rdlong	local08, objptr
0961c     36 00 00 FF 
09620     88 65 86 F1 | 	sub	objptr, ##28040
09624     5A B9 5A F2 | 	cmps	local10, local08 wcz
09628     14 AE 06 16 |  if_a	mov	local05, #20
0962c     04 00 90 FD | 	jmp	#LR__0865
09630                 | LR__0864
09630     0E AE 06 F6 | 	mov	local05, #14
09634                 | LR__0865
09634                 | ' return err
09634     57 7B 02 F6 | 	mov	result1, local05
09638     E7 F0 03 F6 | 	mov	ptra, fp
0963c     F2 00 A0 FD | 	call	#popregs_
09640                 | _compile_array_assign_ret
09640     2D 00 64 FD | 	ret
09644                 | 
09644                 | ' 
09644                 | ' '----- compile print command with its ";" and "," modifiers
09644                 | ' 
09644                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
09644                 | _compile_print
09644     0B CA 05 F6 | 	mov	COUNT_, #11
09648     E8 00 A0 FD | 	call	#pushregs_
0964c     00 A6 06 F6 | 	mov	local01, #0
09650     1D AA 06 F6 | 	mov	local03, #29
09654                 | ' t1.result.uresult=0 : t1.result_type=result_uint
09654                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
09654     38 00 00 FF 
09658     C4 65 06 F1 | 	add	objptr, ##29124
0965c     32 AD 02 FB | 	rdlong	local04, objptr
09660     03 AC 66 F0 | 	shl	local04, #3
09664     02 00 00 FF 
09668     38 64 86 F1 | 	sub	objptr, ##1080
0966c     32 AD 02 F1 | 	add	local04, objptr
09670     04 AC 06 F1 | 	add	local04, #4
09674     56 AD 02 FB | 	rdlong	local04, local04
09678     FE AD 0E F2 | 	cmp	local04, #510 wz
0967c     36 00 00 FF 
09680     8C 65 86 F1 | 	sub	objptr, ##28044
09684     68 01 90 5D |  if_ne	jmp	#LR__0870
09688     20 AA 06 F6 | 	mov	local03, #32
0968c     53 AF 02 F6 | 	mov	local05, local01
09690     54 B1 02 F6 | 	mov	local06, local02
09694     55 B3 02 F6 | 	mov	local07, local03
09698     4B 00 00 FF 
0969c     FC 65 06 F1 | 	add	objptr, ##38908
096a0     32 B5 02 FB | 	rdlong	local08, objptr
096a4     5A B7 02 F6 | 	mov	local09, local08
096a8     01 B6 66 F0 | 	shl	local09, #1
096ac     5A B7 02 F1 | 	add	local09, local08
096b0     02 B6 66 F0 | 	shl	local09, #2
096b4     03 00 00 FF 
096b8     00 64 86 F1 | 	sub	objptr, ##1536
096bc     32 B7 02 F1 | 	add	local09, objptr
096c0     5B AF 62 FC | 	wrlong	local05, local09
096c4     03 00 00 FF 
096c8     00 64 06 F1 | 	add	objptr, ##1536
096cc     32 AF 02 FB | 	rdlong	local05, objptr
096d0     57 B9 02 F6 | 	mov	local10, local05
096d4     01 B8 66 F0 | 	shl	local10, #1
096d8     57 B9 02 F1 | 	add	local10, local05
096dc     02 B8 66 F0 | 	shl	local10, #2
096e0     03 00 00 FF 
096e4     00 64 86 F1 | 	sub	objptr, ##1536
096e8     32 B9 02 F1 | 	add	local10, objptr
096ec     04 B8 06 F1 | 	add	local10, #4
096f0     5C B1 62 FC | 	wrlong	local06, local10
096f4     03 00 00 FF 
096f8     00 64 06 F1 | 	add	objptr, ##1536
096fc     32 AF 02 FB | 	rdlong	local05, objptr
09700     57 BB 02 F6 | 	mov	local11, local05
09704     01 BA 66 F0 | 	shl	local11, #1
09708     57 BB 02 F1 | 	add	local11, local05
0970c     02 BA 66 F0 | 	shl	local11, #2
09710     03 00 00 FF 
09714     00 64 86 F1 | 	sub	objptr, ##1536
09718     32 BB 02 F1 | 	add	local11, objptr
0971c     08 BA 06 F1 | 	add	local11, #8
09720     5D B3 62 FC | 	wrlong	local07, local11
09724     03 00 00 FF 
09728     00 64 06 F1 | 	add	objptr, ##1536
0972c     32 AF 02 FB | 	rdlong	local05, objptr
09730     01 AE 06 F1 | 	add	local05, #1
09734     32 AF 62 FC | 	wrlong	local05, objptr
09738     44 AA 06 F6 | 	mov	local03, #68
0973c     53 AF 02 F6 | 	mov	local05, local01
09740     54 B1 02 F6 | 	mov	local06, local02
09744     55 B3 02 F6 | 	mov	local07, local03
09748     32 B5 02 FB | 	rdlong	local08, objptr
0974c     5A B7 02 F6 | 	mov	local09, local08
09750     01 B6 66 F0 | 	shl	local09, #1
09754     5A B7 02 F1 | 	add	local09, local08
09758     02 B6 66 F0 | 	shl	local09, #2
0975c     03 00 00 FF 
09760     00 64 86 F1 | 	sub	objptr, ##1536
09764     32 B7 02 F1 | 	add	local09, objptr
09768     5B AF 62 FC | 	wrlong	local05, local09
0976c     03 00 00 FF 
09770     00 64 06 F1 | 	add	objptr, ##1536
09774     32 BB 02 FB | 	rdlong	local11, objptr
09778     5D B9 02 F6 | 	mov	local10, local11
0977c     01 B8 66 F0 | 	shl	local10, #1
09780     5D B9 02 F1 | 	add	local10, local11
09784     02 B8 66 F0 | 	shl	local10, #2
09788     03 00 00 FF 
0978c     00 64 86 F1 | 	sub	objptr, ##1536
09790     32 B9 02 F1 | 	add	local10, objptr
09794     04 B8 06 F1 | 	add	local10, #4
09798     5C B1 62 FC | 	wrlong	local06, local10
0979c     03 00 00 FF 
097a0     00 64 06 F1 | 	add	objptr, ##1536
097a4     32 B9 02 FB | 	rdlong	local10, objptr
097a8     5C BB 02 F6 | 	mov	local11, local10
097ac     01 BA 66 F0 | 	shl	local11, #1
097b0     5C BB 02 F1 | 	add	local11, local10
097b4     02 BA 66 F0 | 	shl	local11, #2
097b8     03 00 00 FF 
097bc     00 64 86 F1 | 	sub	objptr, ##1536
097c0     32 BB 02 F1 | 	add	local11, objptr
097c4     08 BA 06 F1 | 	add	local11, #8
097c8     5D B3 62 FC | 	wrlong	local07, local11
097cc     03 00 00 FF 
097d0     00 64 06 F1 | 	add	objptr, ##1536
097d4     32 AF 02 FB | 	rdlong	local05, objptr
097d8     01 AE 06 F1 | 	add	local05, #1
097dc     32 AF 62 FC | 	wrlong	local05, objptr
097e0     4B 00 00 FF 
097e4     FC 65 86 F1 | 	sub	objptr, ##38908
097e8     00 7A 06 F6 | 	mov	result1, #0
097ec     20 05 90 FD | 	jmp	#LR__0877
097f0                 | LR__0870
097f0                 | ' do
097f0                 | LR__0871
097f0     64 26 B0 FD | 	call	#_expr
097f4                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
097f4                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
097f4     38 00 00 FF 
097f8     C4 65 06 F1 | 	add	objptr, ##29124
097fc     32 AD 02 FB | 	rdlong	local04, objptr
09800     03 AC 66 F0 | 	shl	local04, #3
09804     02 00 00 FF 
09808     38 64 86 F1 | 	sub	objptr, ##1080
0980c     32 AD 02 F1 | 	add	local04, objptr
09810     04 AC 06 F1 | 	add	local04, #4
09814     56 B5 02 FB | 	rdlong	local08, local04
09818     11 B4 0E F2 | 	cmp	local08, #17 wz
0981c     36 00 00 FF 
09820     8C 65 86 F1 | 	sub	objptr, ##28044
09824     60 01 90 5D |  if_ne	jmp	#LR__0872
09828     21 AA 06 F6 | 	mov	local03, #33
0982c     53 AF 02 F6 | 	mov	local05, local01
09830     54 B1 02 F6 | 	mov	local06, local02
09834     55 B3 02 F6 | 	mov	local07, local03
09838     4B 00 00 FF 
0983c     FC 65 06 F1 | 	add	objptr, ##38908
09840     32 B5 02 FB | 	rdlong	local08, objptr
09844     5A B7 02 F6 | 	mov	local09, local08
09848     01 B6 66 F0 | 	shl	local09, #1
0984c     5A B7 02 F1 | 	add	local09, local08
09850     02 B6 66 F0 | 	shl	local09, #2
09854     03 00 00 FF 
09858     00 64 86 F1 | 	sub	objptr, ##1536
0985c     32 B7 02 F1 | 	add	local09, objptr
09860     5B AF 62 FC | 	wrlong	local05, local09
09864     03 00 00 FF 
09868     00 64 06 F1 | 	add	objptr, ##1536
0986c     32 BB 02 FB | 	rdlong	local11, objptr
09870     5D B9 02 F6 | 	mov	local10, local11
09874     01 B8 66 F0 | 	shl	local10, #1
09878     5D B9 02 F1 | 	add	local10, local11
0987c     02 B8 66 F0 | 	shl	local10, #2
09880     03 00 00 FF 
09884     00 64 86 F1 | 	sub	objptr, ##1536
09888     32 B9 02 F1 | 	add	local10, objptr
0988c     04 B8 06 F1 | 	add	local10, #4
09890     5C B1 62 FC | 	wrlong	local06, local10
09894     03 00 00 FF 
09898     00 64 06 F1 | 	add	objptr, ##1536
0989c     32 AF 02 FB | 	rdlong	local05, objptr
098a0     57 BB 02 F6 | 	mov	local11, local05
098a4     01 BA 66 F0 | 	shl	local11, #1
098a8     57 BB 02 F1 | 	add	local11, local05
098ac     02 BA 66 F0 | 	shl	local11, #2
098b0     03 00 00 FF 
098b4     00 64 86 F1 | 	sub	objptr, ##1536
098b8     32 BB 02 F1 | 	add	local11, objptr
098bc     08 BA 06 F1 | 	add	local11, #8
098c0     5D B3 62 FC | 	wrlong	local07, local11
098c4     03 00 00 FF 
098c8     00 64 06 F1 | 	add	objptr, ##1536
098cc     32 AF 02 FB | 	rdlong	local05, objptr
098d0     01 AE 06 F1 | 	add	local05, #1
098d4     32 AF 62 FC | 	wrlong	local05, objptr
098d8     44 AA 06 F6 | 	mov	local03, #68
098dc     53 AF 02 F6 | 	mov	local05, local01
098e0     54 B1 02 F6 | 	mov	local06, local02
098e4     55 B3 02 F6 | 	mov	local07, local03
098e8     32 B5 02 FB | 	rdlong	local08, objptr
098ec     5A B7 02 F6 | 	mov	local09, local08
098f0     01 B6 66 F0 | 	shl	local09, #1
098f4     5A B7 02 F1 | 	add	local09, local08
098f8     02 B6 66 F0 | 	shl	local09, #2
098fc     03 00 00 FF 
09900     00 64 86 F1 | 	sub	objptr, ##1536
09904     32 B7 02 F1 | 	add	local09, objptr
09908     5B AF 62 FC | 	wrlong	local05, local09
0990c     03 00 00 FF 
09910     00 64 06 F1 | 	add	objptr, ##1536
09914     32 BB 02 FB | 	rdlong	local11, objptr
09918     5D B9 02 F6 | 	mov	local10, local11
0991c     01 B8 66 F0 | 	shl	local10, #1
09920     5D B9 02 F1 | 	add	local10, local11
09924     02 B8 66 F0 | 	shl	local10, #2
09928     03 00 00 FF 
0992c     00 64 86 F1 | 	sub	objptr, ##1536
09930     32 B9 02 F1 | 	add	local10, objptr
09934     04 B8 06 F1 | 	add	local10, #4
09938     5C B1 62 FC | 	wrlong	local06, local10
0993c     03 00 00 FF 
09940     00 64 06 F1 | 	add	objptr, ##1536
09944     32 B9 02 FB | 	rdlong	local10, objptr
09948     5C BB 02 F6 | 	mov	local11, local10
0994c     01 BA 66 F0 | 	shl	local11, #1
09950     5C BB 02 F1 | 	add	local11, local10
09954     02 BA 66 F0 | 	shl	local11, #2
09958     03 00 00 FF 
0995c     00 64 86 F1 | 	sub	objptr, ##1536
09960     32 BB 02 F1 | 	add	local11, objptr
09964     08 BA 06 F1 | 	add	local11, #8
09968     5D B3 62 FC | 	wrlong	local07, local11
0996c     03 00 00 FF 
09970     00 64 06 F1 | 	add	objptr, ##1536
09974     32 AF 02 FB | 	rdlong	local05, objptr
09978     01 AE 06 F1 | 	add	local05, #1
0997c     32 AF 62 FC | 	wrlong	local05, objptr
09980     4B 00 00 FF 
09984     FC 65 86 F1 | 	sub	objptr, ##38908
09988                 | LR__0872
09988                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
09988     38 00 00 FF 
0998c     C4 65 06 F1 | 	add	objptr, ##29124
09990     32 AD 02 FB | 	rdlong	local04, objptr
09994     03 AC 66 F0 | 	shl	local04, #3
09998     02 00 00 FF 
0999c     38 64 86 F1 | 	sub	objptr, ##1080
099a0     32 AD 02 F1 | 	add	local04, objptr
099a4     04 AC 06 F1 | 	add	local04, #4
099a8     56 B5 02 FB | 	rdlong	local08, local04
099ac     12 B4 0E F2 | 	cmp	local08, #18 wz
099b0     36 00 00 FF 
099b4     8C 65 86 F1 | 	sub	objptr, ##28044
099b8     60 01 90 5D |  if_ne	jmp	#LR__0873
099bc     22 AA 06 F6 | 	mov	local03, #34
099c0     53 AF 02 F6 | 	mov	local05, local01
099c4     54 B1 02 F6 | 	mov	local06, local02
099c8     55 B3 02 F6 | 	mov	local07, local03
099cc     4B 00 00 FF 
099d0     FC 65 06 F1 | 	add	objptr, ##38908
099d4     32 B5 02 FB | 	rdlong	local08, objptr
099d8     5A B7 02 F6 | 	mov	local09, local08
099dc     01 B6 66 F0 | 	shl	local09, #1
099e0     5A B7 02 F1 | 	add	local09, local08
099e4     02 B6 66 F0 | 	shl	local09, #2
099e8     03 00 00 FF 
099ec     00 64 86 F1 | 	sub	objptr, ##1536
099f0     32 B7 02 F1 | 	add	local09, objptr
099f4     5B AF 62 FC | 	wrlong	local05, local09
099f8     03 00 00 FF 
099fc     00 64 06 F1 | 	add	objptr, ##1536
09a00     32 BB 02 FB | 	rdlong	local11, objptr
09a04     5D B9 02 F6 | 	mov	local10, local11
09a08     01 B8 66 F0 | 	shl	local10, #1
09a0c     5D B9 02 F1 | 	add	local10, local11
09a10     02 B8 66 F0 | 	shl	local10, #2
09a14     03 00 00 FF 
09a18     00 64 86 F1 | 	sub	objptr, ##1536
09a1c     32 B9 02 F1 | 	add	local10, objptr
09a20     04 B8 06 F1 | 	add	local10, #4
09a24     5C B1 62 FC | 	wrlong	local06, local10
09a28     03 00 00 FF 
09a2c     00 64 06 F1 | 	add	objptr, ##1536
09a30     32 AF 02 FB | 	rdlong	local05, objptr
09a34     57 BB 02 F6 | 	mov	local11, local05
09a38     01 BA 66 F0 | 	shl	local11, #1
09a3c     57 BB 02 F1 | 	add	local11, local05
09a40     02 BA 66 F0 | 	shl	local11, #2
09a44     03 00 00 FF 
09a48     00 64 86 F1 | 	sub	objptr, ##1536
09a4c     32 BB 02 F1 | 	add	local11, objptr
09a50     08 BA 06 F1 | 	add	local11, #8
09a54     5D B3 62 FC | 	wrlong	local07, local11
09a58     03 00 00 FF 
09a5c     00 64 06 F1 | 	add	objptr, ##1536
09a60     32 AF 02 FB | 	rdlong	local05, objptr
09a64     01 AE 06 F1 | 	add	local05, #1
09a68     32 AF 62 FC | 	wrlong	local05, objptr
09a6c     44 AA 06 F6 | 	mov	local03, #68
09a70     53 AF 02 F6 | 	mov	local05, local01
09a74     54 B1 02 F6 | 	mov	local06, local02
09a78     55 B3 02 F6 | 	mov	local07, local03
09a7c     32 B5 02 FB | 	rdlong	local08, objptr
09a80     5A B7 02 F6 | 	mov	local09, local08
09a84     01 B6 66 F0 | 	shl	local09, #1
09a88     5A B7 02 F1 | 	add	local09, local08
09a8c     02 B6 66 F0 | 	shl	local09, #2
09a90     03 00 00 FF 
09a94     00 64 86 F1 | 	sub	objptr, ##1536
09a98     32 B7 02 F1 | 	add	local09, objptr
09a9c     5B AF 62 FC | 	wrlong	local05, local09
09aa0     03 00 00 FF 
09aa4     00 64 06 F1 | 	add	objptr, ##1536
09aa8     32 BB 02 FB | 	rdlong	local11, objptr
09aac     5D B9 02 F6 | 	mov	local10, local11
09ab0     01 B8 66 F0 | 	shl	local10, #1
09ab4     5D B9 02 F1 | 	add	local10, local11
09ab8     02 B8 66 F0 | 	shl	local10, #2
09abc     03 00 00 FF 
09ac0     00 64 86 F1 | 	sub	objptr, ##1536
09ac4     32 B9 02 F1 | 	add	local10, objptr
09ac8     04 B8 06 F1 | 	add	local10, #4
09acc     5C B1 62 FC | 	wrlong	local06, local10
09ad0     03 00 00 FF 
09ad4     00 64 06 F1 | 	add	objptr, ##1536
09ad8     32 B9 02 FB | 	rdlong	local10, objptr
09adc     5C BB 02 F6 | 	mov	local11, local10
09ae0     01 BA 66 F0 | 	shl	local11, #1
09ae4     5C BB 02 F1 | 	add	local11, local10
09ae8     02 BA 66 F0 | 	shl	local11, #2
09aec     03 00 00 FF 
09af0     00 64 86 F1 | 	sub	objptr, ##1536
09af4     32 BB 02 F1 | 	add	local11, objptr
09af8     08 BA 06 F1 | 	add	local11, #8
09afc     5D B3 62 FC | 	wrlong	local07, local11
09b00     03 00 00 FF 
09b04     00 64 06 F1 | 	add	objptr, ##1536
09b08     32 AF 02 FB | 	rdlong	local05, objptr
09b0c     01 AE 06 F1 | 	add	local05, #1
09b10     32 AF 62 FC | 	wrlong	local05, objptr
09b14     4B 00 00 FF 
09b18     FC 65 86 F1 | 	sub	objptr, ##38908
09b1c                 | LR__0873
09b1c                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
09b1c     38 00 00 FF 
09b20     C4 65 06 F1 | 	add	objptr, ##29124
09b24     32 AD 02 FB | 	rdlong	local04, objptr
09b28     03 AC 66 F0 | 	shl	local04, #3
09b2c     02 00 00 FF 
09b30     38 64 86 F1 | 	sub	objptr, ##1080
09b34     32 AD 02 F1 | 	add	local04, objptr
09b38     04 AC 06 F1 | 	add	local04, #4
09b3c     56 B5 02 FB | 	rdlong	local08, local04
09b40     FE B5 0E F2 | 	cmp	local08, #510 wz
09b44     36 00 00 FF 
09b48     8C 65 86 F1 | 	sub	objptr, ##28044
09b4c     B8 00 90 5D |  if_ne	jmp	#LR__0874
09b50     44 AA 06 F6 | 	mov	local03, #68
09b54     53 AF 02 F6 | 	mov	local05, local01
09b58     54 B1 02 F6 | 	mov	local06, local02
09b5c     55 B3 02 F6 | 	mov	local07, local03
09b60     4B 00 00 FF 
09b64     FC 65 06 F1 | 	add	objptr, ##38908
09b68     32 B5 02 FB | 	rdlong	local08, objptr
09b6c     5A B7 02 F6 | 	mov	local09, local08
09b70     01 B6 66 F0 | 	shl	local09, #1
09b74     5A B7 02 F1 | 	add	local09, local08
09b78     02 B6 66 F0 | 	shl	local09, #2
09b7c     03 00 00 FF 
09b80     00 64 86 F1 | 	sub	objptr, ##1536
09b84     32 B7 02 F1 | 	add	local09, objptr
09b88     5B AF 62 FC | 	wrlong	local05, local09
09b8c     03 00 00 FF 
09b90     00 64 06 F1 | 	add	objptr, ##1536
09b94     32 BB 02 FB | 	rdlong	local11, objptr
09b98     5D B9 02 F6 | 	mov	local10, local11
09b9c     01 B8 66 F0 | 	shl	local10, #1
09ba0     5D B9 02 F1 | 	add	local10, local11
09ba4     02 B8 66 F0 | 	shl	local10, #2
09ba8     03 00 00 FF 
09bac     00 64 86 F1 | 	sub	objptr, ##1536
09bb0     32 B9 02 F1 | 	add	local10, objptr
09bb4     04 B8 06 F1 | 	add	local10, #4
09bb8     5C B1 62 FC | 	wrlong	local06, local10
09bbc     03 00 00 FF 
09bc0     00 64 06 F1 | 	add	objptr, ##1536
09bc4     32 B9 02 FB | 	rdlong	local10, objptr
09bc8     5C BB 02 F6 | 	mov	local11, local10
09bcc     01 BA 66 F0 | 	shl	local11, #1
09bd0     5C BB 02 F1 | 	add	local11, local10
09bd4     02 BA 66 F0 | 	shl	local11, #2
09bd8     03 00 00 FF 
09bdc     00 64 86 F1 | 	sub	objptr, ##1536
09be0     32 BB 02 F1 | 	add	local11, objptr
09be4     08 BA 06 F1 | 	add	local11, #8
09be8     5D B3 62 FC | 	wrlong	local07, local11
09bec     03 00 00 FF 
09bf0     00 64 06 F1 | 	add	objptr, ##1536
09bf4     32 AF 02 FB | 	rdlong	local05, objptr
09bf8     01 AE 06 F1 | 	add	local05, #1
09bfc     32 AF 62 FC | 	wrlong	local05, objptr
09c00     4B 00 00 FF 
09c04     FC 65 86 F1 | 	sub	objptr, ##38908
09c08                 | LR__0874
09c08                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then return 22
09c08     38 00 00 FF 
09c0c     C4 65 06 F1 | 	add	objptr, ##29124
09c10     32 AD 02 FB | 	rdlong	local04, objptr
09c14     03 AC 66 F0 | 	shl	local04, #3
09c18     02 00 00 FF 
09c1c     38 64 86 F1 | 	sub	objptr, ##1080
09c20     32 AD 02 F1 | 	add	local04, objptr
09c24     04 AC 06 F1 | 	add	local04, #4
09c28     56 B5 02 FB | 	rdlong	local08, local04
09c2c     11 B4 0E F2 | 	cmp	local08, #17 wz
09c30     36 00 00 FF 
09c34     8C 65 86 F1 | 	sub	objptr, ##28044
09c38     6C 00 90 AD |  if_e	jmp	#LR__0875
09c3c     38 00 00 FF 
09c40     C4 65 06 F1 | 	add	objptr, ##29124
09c44     32 B5 02 FB | 	rdlong	local08, objptr
09c48     03 B4 66 F0 | 	shl	local08, #3
09c4c     02 00 00 FF 
09c50     38 64 86 F1 | 	sub	objptr, ##1080
09c54     32 B5 02 F1 | 	add	local08, objptr
09c58     04 B4 06 F1 | 	add	local08, #4
09c5c     5A B5 02 FB | 	rdlong	local08, local08
09c60     12 B4 0E F2 | 	cmp	local08, #18 wz
09c64     36 00 00 FF 
09c68     8C 65 86 F1 | 	sub	objptr, ##28044
09c6c     38 00 90 AD |  if_e	jmp	#LR__0875
09c70     38 00 00 FF 
09c74     C4 65 06 F1 | 	add	objptr, ##29124
09c78     32 BB 02 FB | 	rdlong	local11, objptr
09c7c     03 BA 66 F0 | 	shl	local11, #3
09c80     02 00 00 FF 
09c84     38 64 86 F1 | 	sub	objptr, ##1080
09c88     32 BB 02 F1 | 	add	local11, objptr
09c8c     04 BA 06 F1 | 	add	local11, #4
09c90     5D BB 02 FB | 	rdlong	local11, local11
09c94     FE BB 0E F2 | 	cmp	local11, #510 wz
09c98     36 00 00 FF 
09c9c     8C 65 86 F1 | 	sub	objptr, ##28044
09ca0     16 7A 06 56 |  if_ne	mov	result1, #22
09ca4     68 00 90 5D |  if_ne	jmp	#LR__0877
09ca8                 | LR__0875
09ca8     38 00 00 FF 
09cac     C4 65 06 F1 | 	add	objptr, ##29124
09cb0     32 AD 02 FB | 	rdlong	local04, objptr
09cb4     01 AC 06 F1 | 	add	local04, #1
09cb8     32 AD 62 FC | 	wrlong	local04, objptr
09cbc     03 AC 66 F0 | 	shl	local04, #3
09cc0     02 00 00 FF 
09cc4     38 64 86 F1 | 	sub	objptr, ##1080
09cc8     32 AD 02 F1 | 	add	local04, objptr
09ccc     04 AC 06 F1 | 	add	local04, #4
09cd0     56 B5 02 FB | 	rdlong	local08, local04
09cd4     FE B5 0E F2 | 	cmp	local08, #510 wz
09cd8     36 00 00 FF 
09cdc     8C 65 86 F1 | 	sub	objptr, ##28044
09ce0     28 00 90 AD |  if_e	jmp	#LR__0876
09ce4     38 00 00 FF 
09ce8     C4 65 06 F1 | 	add	objptr, ##29124
09cec     32 BB 02 FB | 	rdlong	local11, objptr
09cf0     0E 00 00 FF 
09cf4     1C 64 06 F1 | 	add	objptr, ##7196
09cf8     32 B9 02 FB | 	rdlong	local10, objptr
09cfc     46 00 00 FF 
09d00     E0 65 86 F1 | 	sub	objptr, ##36320
09d04     5C BB 52 F2 | 	cmps	local11, local10 wc
09d08     E4 FA 9F CD |  if_b	jmp	#LR__0871
09d0c                 | LR__0876
09d0c                 | ' return 0
09d0c     00 7A 06 F6 | 	mov	result1, #0
09d10                 | LR__0877
09d10     E7 F0 03 F6 | 	mov	ptra, fp
09d14     F2 00 A0 FD | 	call	#popregs_
09d18                 | _compile_print_ret
09d18     2D 00 64 FD | 	ret
09d1c                 | 
09d1c                 | ' 
09d1c                 | ' '----- compile 'if' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
09d1c                 | ' 
09d1c                 | ' function compile_if(aline as ulong) as ulong  
09d1c                 | _compile_if
09d1c     09 CA 05 F6 | 	mov	COUNT_, #9
09d20     E8 00 A0 FD | 	call	#pushregs_
09d24                 | _compile_if_enter
09d24     49 AD 02 F6 | 	mov	local04, arg01
09d28                 | ' return expr()
09d28     2C 21 B0 FD | 	call	#_expr
09d2c     38 00 00 FF 
09d30     C4 65 06 F1 | 	add	objptr, ##29124
09d34     32 95 02 FB | 	rdlong	arg02, objptr
09d38     4A AF 02 F6 | 	mov	local05, arg02
09d3c     03 AE 66 F0 | 	shl	local05, #3
09d40     02 00 00 FF 
09d44     38 64 86 F1 | 	sub	objptr, ##1080
09d48     32 AF 02 F1 | 	add	local05, objptr
09d4c     04 AE 06 F1 | 	add	local05, #4
09d50     57 AF 02 FB | 	rdlong	local05, local05
09d54     01 94 06 F1 | 	add	arg02, #1
09d58     02 00 00 FF 
09d5c     38 64 06 F1 | 	add	objptr, ##1080
09d60     32 95 62 FC | 	wrlong	arg02, objptr
09d64     38 00 00 FF 
09d68     C4 65 86 F1 | 	sub	objptr, ##29124
09d6c                 | ' 
09d6c                 | ' err=compile_fun_1p()
09d6c                 | ' cmd=lparts(ct).token : ct+=1 : if cmd<>token_then then return 52
09d6c     5B AE 0E F2 | 	cmp	local05, #91 wz
09d70     34 7A 06 56 |  if_ne	mov	result1, #52
09d74     20 01 90 5D |  if_ne	jmp	#LR__0882
09d78     58 AA 06 F6 | 	mov	local03, #88
09d7c     53 B1 02 F6 | 	mov	local06, local01
09d80     54 B3 02 F6 | 	mov	local07, local02
09d84     55 95 02 F6 | 	mov	arg02, local03
09d88     4B 00 00 FF 
09d8c     FC 65 06 F1 | 	add	objptr, ##38908
09d90     32 93 02 FB | 	rdlong	arg01, objptr
09d94     49 B5 02 F6 | 	mov	local08, arg01
09d98     01 B4 66 F0 | 	shl	local08, #1
09d9c     49 B5 02 F1 | 	add	local08, arg01
09da0     02 B4 66 F0 | 	shl	local08, #2
09da4     03 00 00 FF 
09da8     00 64 86 F1 | 	sub	objptr, ##1536
09dac     32 B5 02 F1 | 	add	local08, objptr
09db0     5A B1 62 FC | 	wrlong	local06, local08
09db4     03 00 00 FF 
09db8     00 64 06 F1 | 	add	objptr, ##1536
09dbc     32 B1 02 FB | 	rdlong	local06, objptr
09dc0     58 93 02 F6 | 	mov	arg01, local06
09dc4     01 92 66 F0 | 	shl	arg01, #1
09dc8     58 93 02 F1 | 	add	arg01, local06
09dcc     02 92 66 F0 | 	shl	arg01, #2
09dd0     03 00 00 FF 
09dd4     00 64 86 F1 | 	sub	objptr, ##1536
09dd8     32 93 02 F1 | 	add	arg01, objptr
09ddc     04 92 06 F1 | 	add	arg01, #4
09de0     49 B3 62 FC | 	wrlong	local07, arg01
09de4     03 00 00 FF 
09de8     00 64 06 F1 | 	add	objptr, ##1536
09dec     32 B1 02 FB | 	rdlong	local06, objptr
09df0     58 93 02 F6 | 	mov	arg01, local06
09df4     01 92 66 F0 | 	shl	arg01, #1
09df8     58 93 02 F1 | 	add	arg01, local06
09dfc     02 92 66 F0 | 	shl	arg01, #2
09e00     03 00 00 FF 
09e04     00 64 86 F1 | 	sub	objptr, ##1536
09e08     32 93 02 F1 | 	add	arg01, objptr
09e0c     08 92 06 F1 | 	add	arg01, #8
09e10     49 95 62 FC | 	wrlong	arg02, arg01
09e14     03 00 00 FF 
09e18     00 64 06 F1 | 	add	objptr, ##1536
09e1c     32 B1 02 FB | 	rdlong	local06, objptr
09e20     01 B0 06 F1 | 	add	local06, #1
09e24     32 B1 62 FC | 	wrlong	local06, objptr
09e28                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
09e28                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
09e28     13 00 00 FF 
09e2c     38 64 86 F1 | 	sub	objptr, ##9784
09e30     32 95 02 FB | 	rdlong	arg02, objptr
09e34     01 94 06 F1 | 	add	arg02, #1
09e38     03 94 66 F0 | 	shl	arg02, #3
09e3c     02 00 00 FF 
09e40     38 64 86 F1 | 	sub	objptr, ##1080
09e44     32 95 02 F1 | 	add	arg02, objptr
09e48     4A 93 02 FB | 	rdlong	arg01, arg02
09e4c     36 00 00 FF 
09e50     8C 65 86 F1 | 	sub	objptr, ##28044
09e54                 | ' 
09e54                 | ' select case s
09e54     95 01 00 FF 
09e58     1E 94 06 F6 | 	mov	arg02, ##@LR__5649
09e5c     D0 AE B1 FD | 	call	#__system___string_cmp
09e60     00 7A 0E F2 | 	cmp	result1, #0 wz
09e64     1B 7A 06 A6 |  if_e	mov	result1, #27
09e68     00 7A 06 56 |  if_ne	mov	result1, #0
09e6c     00 7A 0E F2 | 	cmp	result1, #0 wz
09e70     10 00 90 AD |  if_e	jmp	#LR__0880
09e74     05 92 06 F6 | 	mov	arg01, #5
09e78     4C E4 BF FD | 	call	#_compile_immediate_assign
09e7c     3D B7 02 F6 | 	mov	local09, result1
09e80     10 00 90 FD | 	jmp	#LR__0881
09e84                 | LR__0880
09e84     05 92 06 F6 | 	mov	arg01, #5
09e88     56 95 02 F6 | 	mov	arg02, local04
09e8c     50 DA BF FD | 	call	#_compile_immediate
09e90     3D B7 02 F6 | 	mov	local09, result1
09e94                 | LR__0881
09e94                 | ' return err
09e94     5B 7B 02 F6 | 	mov	result1, local09
09e98                 | LR__0882
09e98     E7 F0 03 F6 | 	mov	ptra, fp
09e9c     F2 00 A0 FD | 	call	#popregs_
09ea0                 | _compile_if_ret
09ea0     2D 00 64 FD | 	ret
09ea4                 | 
09ea4                 | ' 
09ea4                 | ' '----- compile 'else' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
09ea4                 | ' 
09ea4                 | ' function compile_else(aline as ulong) as ulong  
09ea4                 | _compile_else
09ea4     07 CA 05 F6 | 	mov	COUNT_, #7
09ea8     E8 00 A0 FD | 	call	#pushregs_
09eac                 | _compile_else_enter
09eac     49 AD 02 F6 | 	mov	local04, arg01
09eb0     5A AA 06 F6 | 	mov	local03, #90
09eb4     53 AF 02 F6 | 	mov	local05, local01
09eb8     54 B1 02 F6 | 	mov	local06, local02
09ebc     55 A7 02 F6 | 	mov	local01, local03
09ec0     4B 00 00 FF 
09ec4     FC 65 06 F1 | 	add	objptr, ##38908
09ec8     32 95 02 FB | 	rdlong	arg02, objptr
09ecc     4A 93 02 F6 | 	mov	arg01, arg02
09ed0     01 92 66 F0 | 	shl	arg01, #1
09ed4     4A 93 02 F1 | 	add	arg01, arg02
09ed8     02 92 66 F0 | 	shl	arg01, #2
09edc     03 00 00 FF 
09ee0     00 64 86 F1 | 	sub	objptr, ##1536
09ee4     32 93 02 F1 | 	add	arg01, objptr
09ee8     49 AF 62 FC | 	wrlong	local05, arg01
09eec     03 00 00 FF 
09ef0     00 64 06 F1 | 	add	objptr, ##1536
09ef4     32 AF 02 FB | 	rdlong	local05, objptr
09ef8     57 95 02 F6 | 	mov	arg02, local05
09efc     01 94 66 F0 | 	shl	arg02, #1
09f00     57 95 02 F1 | 	add	arg02, local05
09f04     02 94 66 F0 | 	shl	arg02, #2
09f08     03 00 00 FF 
09f0c     00 64 86 F1 | 	sub	objptr, ##1536
09f10     32 95 02 F1 | 	add	arg02, objptr
09f14     04 94 06 F1 | 	add	arg02, #4
09f18     4A B1 62 FC | 	wrlong	local06, arg02
09f1c     03 00 00 FF 
09f20     00 64 06 F1 | 	add	objptr, ##1536
09f24     32 B1 02 FB | 	rdlong	local06, objptr
09f28     58 AF 02 F6 | 	mov	local05, local06
09f2c     01 AE 66 F0 | 	shl	local05, #1
09f30     58 AF 02 F1 | 	add	local05, local06
09f34     02 AE 66 F0 | 	shl	local05, #2
09f38     03 00 00 FF 
09f3c     00 64 86 F1 | 	sub	objptr, ##1536
09f40     32 AF 02 F1 | 	add	local05, objptr
09f44     08 AE 06 F1 | 	add	local05, #8
09f48     57 A7 62 FC | 	wrlong	local01, local05
09f4c     03 00 00 FF 
09f50     00 64 06 F1 | 	add	objptr, ##1536
09f54     32 AF 02 FB | 	rdlong	local05, objptr
09f58     01 AE 06 F1 | 	add	local05, #1
09f5c     32 AF 62 FC | 	wrlong	local05, objptr
09f60                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
09f60                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
09f60     13 00 00 FF 
09f64     38 64 86 F1 | 	sub	objptr, ##9784
09f68     32 B1 02 FB | 	rdlong	local06, objptr
09f6c     01 B0 06 F1 | 	add	local06, #1
09f70     03 B0 66 F0 | 	shl	local06, #3
09f74     02 00 00 FF 
09f78     38 64 86 F1 | 	sub	objptr, ##1080
09f7c     32 B1 02 F1 | 	add	local06, objptr
09f80     58 93 02 FB | 	rdlong	arg01, local06
09f84     36 00 00 FF 
09f88     8C 65 86 F1 | 	sub	objptr, ##28044
09f8c                 | ' 
09f8c                 | ' select case s
09f8c     95 01 00 FF 
09f90     1E 94 06 F6 | 	mov	arg02, ##@LR__5649
09f94     98 AD B1 FD | 	call	#__system___string_cmp
09f98     00 7A 0E F2 | 	cmp	result1, #0 wz
09f9c     1B 7A 06 A6 |  if_e	mov	result1, #27
09fa0     00 7A 06 56 |  if_ne	mov	result1, #0
09fa4     00 7A 0E F2 | 	cmp	result1, #0 wz
09fa8     10 00 90 AD |  if_e	jmp	#LR__0890
09fac     05 92 06 F6 | 	mov	arg01, #5
09fb0     14 E3 BF FD | 	call	#_compile_immediate_assign
09fb4     3D B3 02 F6 | 	mov	local07, result1
09fb8     10 00 90 FD | 	jmp	#LR__0891
09fbc                 | LR__0890
09fbc     05 92 06 F6 | 	mov	arg01, #5
09fc0     56 95 02 F6 | 	mov	arg02, local04
09fc4     18 D9 BF FD | 	call	#_compile_immediate
09fc8     3D B3 02 F6 | 	mov	local07, result1
09fcc                 | LR__0891
09fcc                 | ' return err
09fcc     59 7B 02 F6 | 	mov	result1, local07
09fd0     E7 F0 03 F6 | 	mov	ptra, fp
09fd4     F2 00 A0 FD | 	call	#popregs_
09fd8                 | _compile_else_ret
09fd8     2D 00 64 FD | 	ret
09fdc                 | 
09fdc                 | ' 
09fdc                 | ' '----- compile 'dim' command. Also it allocates the psram for an aray from the top of the memory
09fdc                 | ' 
09fdc                 | ' function compile_dim() as ulong  
09fdc                 | _compile_dim
09fdc     11 CA 05 F6 | 	mov	COUNT_, #17
09fe0     E8 00 A0 FD | 	call	#pushregs_
09fe4     01 A6 06 F6 | 	mov	local01, #1
09fe8     01 A8 06 F6 | 	mov	local02, #1
09fec     01 AA 06 F6 | 	mov	local03, #1
09ff0                 | ' 
09ff0                 | ' dims(0)=1: dims(1)=1: dims(2)=1
09ff0                 | ' if isname(lparts(ct).part$) then 
09ff0     38 00 00 FF 
09ff4     C4 65 06 F1 | 	add	objptr, ##29124
09ff8     32 99 02 FB | 	rdlong	arg04, objptr
09ffc     03 98 66 F0 | 	shl	arg04, #3
0a000     02 00 00 FF 
0a004     38 64 86 F1 | 	sub	objptr, ##1080
0a008     32 99 02 F1 | 	add	arg04, objptr
0a00c     4C 93 02 FB | 	rdlong	arg01, arg04
0a010     36 00 00 FF 
0a014     8C 65 86 F1 | 	sub	objptr, ##28044
0a018     C4 C7 BF FD | 	call	#_isname
0a01c     00 7A 0E F2 | 	cmp	result1, #0 wz
0a020     58 05 90 AD |  if_e	jmp	#LR__0923
0a024     38 00 00 FF 
0a028     C4 65 06 F1 | 	add	objptr, ##29124
0a02c     32 AD 02 FB | 	rdlong	local04, objptr
0a030     03 AC 66 F0 | 	shl	local04, #3
0a034     02 00 00 FF 
0a038     38 64 86 F1 | 	sub	objptr, ##1080
0a03c     32 AD 02 F1 | 	add	local04, objptr
0a040     56 AF 02 FB | 	rdlong	local05, local04
0a044     01 B0 66 F6 | 	neg	local06, #1
0a048                 | '   varname2$=lparts(ct).part$ 
0a048                 | '   j=-1
0a048                 | '   if varnum>0 then
0a048     04 64 86 F1 | 	sub	objptr, #4
0a04c     32 B3 02 FB | 	rdlong	local07, objptr
0a050     36 00 00 FF 
0a054     88 65 86 F1 | 	sub	objptr, ##28040
0a058     01 B2 56 F2 | 	cmps	local07, #1 wc
0a05c     54 00 90 CD |  if_b	jmp	#LR__0902
0a060                 | '     for i=0 to varnum-1
0a060     00 B4 06 F6 | 	mov	local08, #0
0a064     36 00 00 FF 
0a068     88 65 06 F1 | 	add	objptr, ##28040
0a06c     32 B7 02 FB | 	rdlong	local09, objptr
0a070     36 00 00 FF 
0a074     88 65 86 F1 | 	sub	objptr, ##28040
0a078                 | LR__0900
0a078     5B B5 52 F2 | 	cmps	local08, local09 wc
0a07c     34 00 90 3D |  if_ae	jmp	#LR__0901
0a080                 | '       if variables(i).name=varname2$ then j=i : exit
0a080     5A AD 02 F6 | 	mov	local04, local08
0a084     04 AC 66 F0 | 	shl	local04, #4
0a088     32 95 02 F6 | 	mov	arg02, objptr
0a08c     16 00 00 FF 
0a090     78 95 06 F1 | 	add	arg02, ##11640
0a094     4A AD 02 F1 | 	add	local04, arg02
0a098     56 93 02 FB | 	rdlong	arg01, local04
0a09c     57 95 02 F6 | 	mov	arg02, local05
0a0a0     8C AC B1 FD | 	call	#__system___string_cmp
0a0a4     00 7A 0E F2 | 	cmp	result1, #0 wz
0a0a8     5A B1 02 A6 |  if_e	mov	local06, local08
0a0ac     01 B4 06 51 |  if_ne	add	local08, #1
0a0b0     C4 FF 9F 5D |  if_ne	jmp	#LR__0900
0a0b4                 | LR__0901
0a0b4                 | LR__0902
0a0b4                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
0a0b4     FF FF 7F FF 
0a0b8     FF B1 0E F2 | 	cmp	local06, ##-1 wz
0a0bc     36 00 00 AF 
0a0c0     88 65 06 A1 |  if_e	add	objptr, ##28040
0a0c4     32 B1 02 AB |  if_e	rdlong	local06, objptr
0a0c8     36 00 00 AF 
0a0cc     88 65 86 A1 |  if_e	sub	objptr, ##28040
0a0d0     78 00 90 AD |  if_e	jmp	#LR__0903
0a0d4     00 92 06 F6 | 	mov	arg01, #0
0a0d8     B0 01 B2 FD | 	call	#__system___getiolock_0622
0a0dc     3D 93 02 F6 | 	mov	arg01, result1
0a0e0     24 AC B1 FD | 	call	#__system___lockmem
0a0e4     97 01 00 FF 
0a0e8     2B 95 06 F6 | 	mov	arg02, ##@LR__5921
0a0ec     00 92 06 F6 | 	mov	arg01, #0
0a0f0     00 96 06 F6 | 	mov	arg03, #0
0a0f4     04 B9 B1 FD | 	call	#__system___basic_print_string
0a0f8     54 00 00 FF 
0a0fc     68 64 06 F1 | 	add	objptr, ##43112
0a100     32 95 02 FB | 	rdlong	arg02, objptr
0a104     54 00 00 FF 
0a108     68 64 86 F1 | 	sub	objptr, ##43112
0a10c     00 92 06 F6 | 	mov	arg01, #0
0a110     00 96 06 F6 | 	mov	arg03, #0
0a114     0A 98 06 F6 | 	mov	arg04, #10
0a118     64 B9 B1 FD | 	call	#__system___basic_print_unsigned
0a11c     97 01 00 FF 
0a120     39 95 06 F6 | 	mov	arg02, ##@LR__5922
0a124     00 92 06 F6 | 	mov	arg01, #0
0a128     00 96 06 F6 | 	mov	arg03, #0
0a12c     CC B8 B1 FD | 	call	#__system___basic_print_string
0a130     00 92 06 F6 | 	mov	arg01, #0
0a134     0A 94 06 F6 | 	mov	arg02, #10
0a138     00 96 06 F6 | 	mov	arg03, #0
0a13c     64 B8 B1 FD | 	call	#__system___basic_print_char
0a140     00 92 06 F6 | 	mov	arg01, #0
0a144     44 01 B2 FD | 	call	#__system___getiolock_0622
0a148     3D 01 68 FC | 	wrlong	#0, result1
0a14c                 | LR__0903
0a14c                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then return 43
0a14c     38 00 00 FF 
0a150     C4 65 06 F1 | 	add	objptr, ##29124
0a154     32 95 02 FB | 	rdlong	arg02, objptr
0a158     01 94 06 F1 | 	add	arg02, #1
0a15c     03 94 66 F0 | 	shl	arg02, #3
0a160     02 00 00 FF 
0a164     38 64 86 F1 | 	sub	objptr, ##1080
0a168     32 95 02 F1 | 	add	arg02, objptr
0a16c     4A 93 02 FB | 	rdlong	arg01, arg02
0a170     97 01 00 FF 
0a174     5A 95 06 F6 | 	mov	arg02, ##@LR__5923
0a178     36 00 00 FF 
0a17c     8C 65 86 F1 | 	sub	objptr, ##28044
0a180     AC AB B1 FD | 	call	#__system___string_cmp
0a184     00 7A 0E F2 | 	cmp	result1, #0 wz
0a188     44 00 90 AD |  if_e	jmp	#LR__0904
0a18c     38 00 00 FF 
0a190     C4 65 06 F1 | 	add	objptr, ##29124
0a194     32 B7 02 FB | 	rdlong	local09, objptr
0a198     01 B6 06 F1 | 	add	local09, #1
0a19c     03 B6 66 F0 | 	shl	local09, #3
0a1a0     02 00 00 FF 
0a1a4     38 64 86 F1 | 	sub	objptr, ##1080
0a1a8     32 B7 02 F1 | 	add	local09, objptr
0a1ac     5B 93 02 FB | 	rdlong	arg01, local09
0a1b0     97 01 00 FF 
0a1b4     5C 95 06 F6 | 	mov	arg02, ##@LR__5924
0a1b8     36 00 00 FF 
0a1bc     8C 65 86 F1 | 	sub	objptr, ##28044
0a1c0     6C AB B1 FD | 	call	#__system___string_cmp
0a1c4     00 7A 0E F2 | 	cmp	result1, #0 wz
0a1c8     2B 7A 06 56 |  if_ne	mov	result1, #43
0a1cc     B4 04 90 5D |  if_ne	jmp	#LR__0925
0a1d0                 | LR__0904
0a1d0                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350	' allocate a typed array
0a1d0     38 00 00 FF 
0a1d4     C4 65 06 F1 | 	add	objptr, ##29124
0a1d8     32 95 02 FB | 	rdlong	arg02, objptr
0a1dc     01 94 06 F1 | 	add	arg02, #1
0a1e0     03 94 66 F0 | 	shl	arg02, #3
0a1e4     02 00 00 FF 
0a1e8     38 64 86 F1 | 	sub	objptr, ##1080
0a1ec     32 95 02 F1 | 	add	arg02, objptr
0a1f0     4A 93 02 FB | 	rdlong	arg01, arg02
0a1f4     97 01 00 FF 
0a1f8     5F 95 06 F6 | 	mov	arg02, ##@LR__5925
0a1fc     36 00 00 FF 
0a200     8C 65 86 F1 | 	sub	objptr, ##28044
0a204     28 AB B1 FD | 	call	#__system___string_cmp
0a208     00 7A 0E F2 | 	cmp	result1, #0 wz
0a20c     38 00 00 AF 
0a210     C4 65 06 A1 |  if_e	add	objptr, ##29124
0a214     32 B9 02 AB |  if_e	rdlong	local10, objptr
0a218     38 00 00 AF 
0a21c     C4 65 86 A1 |  if_e	sub	objptr, ##29124
0a220     01 B8 06 A1 |  if_e	add	local10, #1
0a224     48 01 90 AD |  if_e	jmp	#LR__0909
0a228     38 00 00 FF 
0a22c     C4 65 06 F1 | 	add	objptr, ##29124
0a230     32 B9 02 FB | 	rdlong	local10, objptr
0a234     38 00 00 FF 
0a238     C4 65 86 F1 | 	sub	objptr, ##29124
0a23c     02 B8 06 F1 | 	add	local10, #2
0a240     00 BA 06 F6 | 	mov	local11, #0
0a244                 | '   l=ct+2 : m=0 : do
0a244                 | LR__0905
0a244                 | '   if isdec(lparts(l).part$) then 
0a244     5C AD 02 F6 | 	mov	local04, local10
0a248     03 AC 66 F0 | 	shl	local04, #3
0a24c     32 B7 02 F6 | 	mov	local09, objptr
0a250     36 00 00 FF 
0a254     8C B7 06 F1 | 	add	local09, ##28044
0a258     5B AD 02 F1 | 	add	local04, local09
0a25c     56 93 02 FB | 	rdlong	arg01, local04
0a260     80 CE BF FD | 	call	#_isdec
0a264     00 7A 0E F2 | 	cmp	result1, #0 wz
0a268     40 00 90 AD |  if_e	jmp	#LR__0906
0a26c     5D BD 02 F6 | 	mov	local12, local11
0a270     53 BD 06 F1 | 	add	local12, #local01
0a274     5C B7 02 F6 | 	mov	local09, local10
0a278     03 B6 66 F0 | 	shl	local09, #3
0a27c     32 B5 02 F6 | 	mov	local08, objptr
0a280     36 00 00 FF 
0a284     8C B5 06 F1 | 	add	local08, ##28044
0a288     5A B7 02 F1 | 	add	local09, local08
0a28c     5B 93 02 FB | 	rdlong	arg01, local09
0a290     00 94 06 F6 | 	mov	arg02, #0
0a294     C4 D7 B1 FD | 	call	#__system____builtin_atoi
0a298     3D BF 02 F6 | 	mov	local13, result1
0a29c                 | 	'.live	local13
0a29c                 | 	'.live	local12
0a29c     00 BC 8E F9 | 	altd	local12, #0
0a2a0     5F BD 02 F6 | 	mov	local12, local13
0a2a4     01 BA 06 F1 | 	add	local11, #1
0a2a8     08 00 90 FD | 	jmp	#LR__0907
0a2ac                 | LR__0906
0a2ac                 | '     return(17)
0a2ac     11 7A 06 F6 | 	mov	result1, #17
0a2b0     D0 03 90 FD | 	jmp	#LR__0925
0a2b4                 | LR__0907
0a2b4                 | '   if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then return 44 
0a2b4     5C AD 02 F6 | 	mov	local04, local10
0a2b8     01 AC 06 F1 | 	add	local04, #1
0a2bc     03 AC 66 F0 | 	shl	local04, #3
0a2c0     32 BF 02 F6 | 	mov	local13, objptr
0a2c4     36 00 00 FF 
0a2c8     8C BF 06 F1 | 	add	local13, ##28044
0a2cc     5F AD 02 F1 | 	add	local04, local13
0a2d0     56 93 02 FB | 	rdlong	arg01, local04
0a2d4     97 01 00 FF 
0a2d8     62 95 06 F6 | 	mov	arg02, ##@LR__5926
0a2dc     50 AA B1 FD | 	call	#__system___string_cmp
0a2e0     00 7A 0E F2 | 	cmp	result1, #0 wz
0a2e4     38 00 90 AD |  if_e	jmp	#LR__0908
0a2e8     5C BF 02 F6 | 	mov	local13, local10
0a2ec     01 BE 06 F1 | 	add	local13, #1
0a2f0     03 BE 66 F0 | 	shl	local13, #3
0a2f4     32 BD 02 F6 | 	mov	local12, objptr
0a2f8     36 00 00 FF 
0a2fc     8C BD 06 F1 | 	add	local12, ##28044
0a300     5E BF 02 F1 | 	add	local13, local12
0a304     5F 93 02 FB | 	rdlong	arg01, local13
0a308     97 01 00 FF 
0a30c     64 95 06 F6 | 	mov	arg02, ##@LR__5927
0a310     1C AA B1 FD | 	call	#__system___string_cmp
0a314     00 7A 0E F2 | 	cmp	result1, #0 wz
0a318     2C 7A 06 56 |  if_ne	mov	result1, #44
0a31c     64 03 90 5D |  if_ne	jmp	#LR__0925
0a320                 | LR__0908
0a320     02 B8 06 F1 | 	add	local10, #2
0a324     5C AD 02 F6 | 	mov	local04, local10
0a328     01 AC 86 F1 | 	sub	local04, #1
0a32c     03 AC 66 F0 | 	shl	local04, #3
0a330     32 BF 02 F6 | 	mov	local13, objptr
0a334     36 00 00 FF 
0a338     8C BF 06 F1 | 	add	local13, ##28044
0a33c     5F AD 02 F1 | 	add	local04, local13
0a340     56 93 02 FB | 	rdlong	arg01, local04
0a344     97 01 00 FF 
0a348     66 95 06 F6 | 	mov	arg02, ##@LR__5928
0a34c     E0 A9 B1 FD | 	call	#__system___string_cmp
0a350     00 7A 0E F2 | 	cmp	result1, #0 wz
0a354     03 BA 56 52 |  if_ne	cmps	local11, #3 wc
0a358     E8 FE 9F 4D |  if_c_and_nz	jmp	#LR__0905
0a35c                 | '   if m>3 then return 45
0a35c     04 BA 56 F2 | 	cmps	local11, #4 wc
0a360     2D 7A 06 36 |  if_ae	mov	result1, #45
0a364     1C 03 90 3D |  if_ae	jmp	#LR__0925
0a368     00 C1 06 F6 | 	mov	local14, #256
0a36c     0C C2 06 F6 | 	mov	local15, #12
0a370                 | LR__0909
0a370                 | '   arraytype=array_no_type : esize=12
0a370                 | ' 1350 
0a370                 | '   if lparts(l).part$="as" then
0a370     5C AD 02 F6 | 	mov	local04, local10
0a374     03 AC 66 F0 | 	shl	local04, #3
0a378     32 BF 02 F6 | 	mov	local13, objptr
0a37c     36 00 00 FF 
0a380     8C BF 06 F1 | 	add	local13, ##28044
0a384     5F AD 02 F1 | 	add	local04, local13
0a388     56 93 02 FB | 	rdlong	arg01, local04
0a38c     97 01 00 FF 
0a390     68 95 06 F6 | 	mov	arg02, ##@LR__5929
0a394     98 A9 B1 FD | 	call	#__system___string_cmp
0a398     00 7A 0E F2 | 	cmp	result1, #0 wz
0a39c     E4 01 90 5D |  if_ne	jmp	#LR__0924
0a3a0                 | '     select case lparts(l+1).part$
0a3a0     5C BD 02 F6 | 	mov	local12, local10
0a3a4     01 BC 06 F1 | 	add	local12, #1
0a3a8     03 BC 66 F0 | 	shl	local12, #3
0a3ac     32 AD 02 F6 | 	mov	local04, objptr
0a3b0     36 00 00 FF 
0a3b4     8C AD 06 F1 | 	add	local04, ##28044
0a3b8     56 BD 02 F1 | 	add	local12, local04
0a3bc     5E C5 02 FB | 	rdlong	local16, local12
0a3c0     97 01 00 FF 
0a3c4     6B 95 06 F6 | 	mov	arg02, ##@LR__5930
0a3c8     62 93 02 F6 | 	mov	arg01, local16
0a3cc     60 A9 B1 FD | 	call	#__system___string_cmp
0a3d0     00 7A 0E F2 | 	cmp	result1, #0 wz
0a3d4     0C 01 90 AD |  if_e	jmp	#LR__0910
0a3d8     97 01 00 FF 
0a3dc     70 95 06 F6 | 	mov	arg02, ##@LR__5931
0a3e0     62 93 02 F6 | 	mov	arg01, local16
0a3e4     48 A9 B1 FD | 	call	#__system___string_cmp
0a3e8     00 7A 0E F2 | 	cmp	result1, #0 wz
0a3ec     00 01 90 AD |  if_e	jmp	#LR__0911
0a3f0     97 01 00 FF 
0a3f4     76 95 06 F6 | 	mov	arg02, ##@LR__5932
0a3f8     62 93 02 F6 | 	mov	arg01, local16
0a3fc     30 A9 B1 FD | 	call	#__system___string_cmp
0a400     00 7A 0E F2 | 	cmp	result1, #0 wz
0a404     F4 00 90 AD |  if_e	jmp	#LR__0912
0a408     97 01 00 FF 
0a40c     7C 95 06 F6 | 	mov	arg02, ##@LR__5933
0a410     62 93 02 F6 | 	mov	arg01, local16
0a414     18 A9 B1 FD | 	call	#__system___string_cmp
0a418     00 7A 0E F2 | 	cmp	result1, #0 wz
0a41c     E8 00 90 AD |  if_e	jmp	#LR__0913
0a420     97 01 00 FF 
0a424     83 95 06 F6 | 	mov	arg02, ##@LR__5934
0a428     62 93 02 F6 | 	mov	arg01, local16
0a42c     00 A9 B1 FD | 	call	#__system___string_cmp
0a430     00 7A 0E F2 | 	cmp	result1, #0 wz
0a434     DC 00 90 AD |  if_e	jmp	#LR__0914
0a438     97 01 00 FF 
0a43c     88 95 06 F6 | 	mov	arg02, ##@LR__5935
0a440     62 93 02 F6 | 	mov	arg01, local16
0a444     E8 A8 B1 FD | 	call	#__system___string_cmp
0a448     00 7A 0E F2 | 	cmp	result1, #0 wz
0a44c     D0 00 90 AD |  if_e	jmp	#LR__0915
0a450     97 01 00 FF 
0a454     90 95 06 F6 | 	mov	arg02, ##@LR__5936
0a458     62 93 02 F6 | 	mov	arg01, local16
0a45c     D0 A8 B1 FD | 	call	#__system___string_cmp
0a460     00 7A 0E F2 | 	cmp	result1, #0 wz
0a464     C4 00 90 AD |  if_e	jmp	#LR__0916
0a468     97 01 00 FF 
0a46c     96 95 06 F6 | 	mov	arg02, ##@LR__5937
0a470     62 93 02 F6 | 	mov	arg01, local16
0a474     B8 A8 B1 FD | 	call	#__system___string_cmp
0a478     00 7A 0E F2 | 	cmp	result1, #0 wz
0a47c     B8 00 90 AD |  if_e	jmp	#LR__0917
0a480     97 01 00 FF 
0a484     9C 95 06 F6 | 	mov	arg02, ##@LR__5938
0a488     62 93 02 F6 | 	mov	arg01, local16
0a48c     A0 A8 B1 FD | 	call	#__system___string_cmp
0a490     00 7A 0E F2 | 	cmp	result1, #0 wz
0a494     AC 00 90 AD |  if_e	jmp	#LR__0918
0a498     97 01 00 FF 
0a49c     A3 95 06 F6 | 	mov	arg02, ##@LR__5939
0a4a0     62 93 02 F6 | 	mov	arg01, local16
0a4a4     88 A8 B1 FD | 	call	#__system___string_cmp
0a4a8     00 7A 0E F2 | 	cmp	result1, #0 wz
0a4ac     A0 00 90 AD |  if_e	jmp	#LR__0919
0a4b0     97 01 00 FF 
0a4b4     AA 95 06 F6 | 	mov	arg02, ##@LR__5940
0a4b8     62 93 02 F6 | 	mov	arg01, local16
0a4bc     70 A8 B1 FD | 	call	#__system___string_cmp
0a4c0     00 7A 0E F2 | 	cmp	result1, #0 wz
0a4c4     94 00 90 AD |  if_e	jmp	#LR__0920
0a4c8     97 01 00 FF 
0a4cc     B1 95 06 F6 | 	mov	arg02, ##@LR__5941
0a4d0     62 93 02 F6 | 	mov	arg01, local16
0a4d4     58 A8 B1 FD | 	call	#__system___string_cmp
0a4d8     00 7A 0E F2 | 	cmp	result1, #0 wz
0a4dc     88 00 90 AD |  if_e	jmp	#LR__0921
0a4e0     90 00 90 FD | 	jmp	#LR__0922
0a4e4                 | LR__0910
0a4e4     01 C1 06 F6 | 	mov	local14, #257
0a4e8     01 C2 06 F6 | 	mov	local15, #1
0a4ec     94 00 90 FD | 	jmp	#LR__0924
0a4f0                 | LR__0911
0a4f0     02 C1 06 F6 | 	mov	local14, #258
0a4f4     01 C2 06 F6 | 	mov	local15, #1
0a4f8     88 00 90 FD | 	jmp	#LR__0924
0a4fc                 | LR__0912
0a4fc     03 C1 06 F6 | 	mov	local14, #259
0a500     02 C2 06 F6 | 	mov	local15, #2
0a504     7C 00 90 FD | 	jmp	#LR__0924
0a508                 | LR__0913
0a508     04 C1 06 F6 | 	mov	local14, #260
0a50c     02 C2 06 F6 | 	mov	local15, #2
0a510     70 00 90 FD | 	jmp	#LR__0924
0a514                 | LR__0914
0a514     05 C1 06 F6 | 	mov	local14, #261
0a518     04 C2 06 F6 | 	mov	local15, #4
0a51c     64 00 90 FD | 	jmp	#LR__0924
0a520                 | LR__0915
0a520     05 C1 06 F6 | 	mov	local14, #261
0a524     04 C2 06 F6 | 	mov	local15, #4
0a528     58 00 90 FD | 	jmp	#LR__0924
0a52c                 | LR__0916
0a52c     06 C1 06 F6 | 	mov	local14, #262
0a530     04 C2 06 F6 | 	mov	local15, #4
0a534     4C 00 90 FD | 	jmp	#LR__0924
0a538                 | LR__0917
0a538     07 C1 06 F6 | 	mov	local14, #263
0a53c     08 C2 06 F6 | 	mov	local15, #8
0a540     40 00 90 FD | 	jmp	#LR__0924
0a544                 | LR__0918
0a544     08 C1 06 F6 | 	mov	local14, #264
0a548     08 C2 06 F6 | 	mov	local15, #8
0a54c     34 00 90 FD | 	jmp	#LR__0924
0a550                 | LR__0919
0a550     09 C1 06 F6 | 	mov	local14, #265
0a554     04 C2 06 F6 | 	mov	local15, #4
0a558     28 00 90 FD | 	jmp	#LR__0924
0a55c                 | LR__0920
0a55c     0A C1 06 F6 | 	mov	local14, #266
0a560     08 C2 06 F6 | 	mov	local15, #8
0a564     1C 00 90 FD | 	jmp	#LR__0924
0a568                 | LR__0921
0a568     0B C1 06 F6 | 	mov	local14, #267
0a56c     04 C2 06 F6 | 	mov	local15, #4
0a570     10 00 90 FD | 	jmp	#LR__0924
0a574                 | LR__0922
0a574     2F 7A 06 F6 | 	mov	result1, #47
0a578     08 01 90 FD | 	jmp	#LR__0925
0a57c                 | LR__0923
0a57c                 | '   return 46
0a57c     2E 7A 06 F6 | 	mov	result1, #46
0a580     00 01 90 FD | 	jmp	#LR__0925
0a584                 | LR__0924
0a584     53 C3 02 FD | 	qmul	local15, local01
0a588     18 B2 62 FD | 	getqx	local07
0a58c     54 B3 02 FD | 	qmul	local07, local02
0a590     18 C4 62 FD | 	getqx	local16
0a594     55 C5 02 FD | 	qmul	local16, local03
0a598     54 00 00 FF 
0a59c     50 64 06 F1 | 	add	objptr, ##43088
0a5a0     32 C7 02 FB | 	rdlong	local17, objptr
0a5a4     60 95 02 F6 | 	mov	arg02, local14
0a5a8     18 C4 62 FD | 	getqx	local16
0a5ac     62 C7 82 F1 | 	sub	local17, local16
0a5b0     10 C6 86 F1 | 	sub	local17, #16
0a5b4     0F C6 26 F5 | 	andn	local17, #15
0a5b8     32 C7 62 FC | 	wrlong	local17, objptr
0a5bc     54 00 00 FF 
0a5c0     50 64 86 F1 | 	sub	objptr, ##43088
0a5c4     63 93 02 F6 | 	mov	arg01, local17
0a5c8     50 6C B1 FD | 	call	#_psdpoke
0a5cc     63 93 02 F6 | 	mov	arg01, local17
0a5d0     02 92 06 F1 | 	add	arg01, #2
0a5d4     61 95 02 F6 | 	mov	arg02, local15
0a5d8     40 6C B1 FD | 	call	#_psdpoke
0a5dc     63 93 02 F6 | 	mov	arg01, local17
0a5e0     04 92 06 F1 | 	add	arg01, #4
0a5e4     53 95 02 F6 | 	mov	arg02, local01
0a5e8     E8 6B B1 FD | 	call	#_pslpoke
0a5ec     63 93 02 F6 | 	mov	arg01, local17
0a5f0     08 92 06 F1 | 	add	arg01, #8
0a5f4     54 95 02 F6 | 	mov	arg02, local02
0a5f8     D8 6B B1 FD | 	call	#_pslpoke
0a5fc     63 93 02 F6 | 	mov	arg01, local17
0a600     0C 92 06 F1 | 	add	arg01, #12
0a604     55 95 02 F6 | 	mov	arg02, local03
0a608     C8 6B B1 FD | 	call	#_pslpoke
0a60c     58 BD 02 F6 | 	mov	local12, local06
0a610     04 BC 66 F0 | 	shl	local12, #4
0a614     16 00 00 FF 
0a618     78 65 06 F1 | 	add	objptr, ##11640
0a61c     32 BD 02 F1 | 	add	local12, objptr
0a620     5E AF 62 FC | 	wrlong	local05, local12
0a624     58 BD 02 F6 | 	mov	local12, local06
0a628     04 BC 66 F0 | 	shl	local12, #4
0a62c     32 BD 02 F1 | 	add	local12, objptr
0a630     04 BC 06 F1 | 	add	local12, #4
0a634     5E C7 62 FC | 	wrlong	local17, local12
0a638     58 BD 02 F6 | 	mov	local12, local06
0a63c     04 BC 66 F0 | 	shl	local12, #4
0a640     32 BD 02 F1 | 	add	local12, objptr
0a644     0C BC 06 F1 | 	add	local12, #12
0a648     5E C1 62 FC | 	wrlong	local14, local12
0a64c                 | ' memtop=arrayptr
0a64c                 | ' psdpoke arrayptr,arraytype 
0a64c                 | ' psdpoke arrayptr+2,esize 
0a64c                 | ' pslpoke arrayptr+4,dims(0)
0a64c                 | ' pslpoke arrayptr+8,dims(1)
0a64c                 | ' pslpoke arrayptr+12,dims(2)
0a64c                 | ' variables(j).name=varname2$
0a64c                 | ' variables(j).value.uresult=arrayptr
0a64c                 | ' variables(j).vartype=arraytype
0a64c                 | ' if j=varnum then varnum+=1
0a64c     20 00 00 FF 
0a650     10 64 06 F1 | 	add	objptr, ##16400
0a654     32 B3 02 FB | 	rdlong	local07, objptr
0a658     36 00 00 FF 
0a65c     88 65 86 F1 | 	sub	objptr, ##28040
0a660     59 B1 0A F2 | 	cmp	local06, local07 wz
0a664     36 00 00 AF 
0a668     88 65 06 A1 |  if_e	add	objptr, ##28040
0a66c     32 B3 02 AB |  if_e	rdlong	local07, objptr
0a670     01 B2 06 A1 |  if_e	add	local07, #1
0a674     32 B3 62 AC |  if_e	wrlong	local07, objptr
0a678     36 00 00 AF 
0a67c     88 65 86 A1 |  if_e	sub	objptr, ##28040
0a680                 | ' return 0
0a680     00 7A 06 F6 | 	mov	result1, #0
0a684                 | LR__0925
0a684     E7 F0 03 F6 | 	mov	ptra, fp
0a688     F2 00 A0 FD | 	call	#popregs_
0a68c                 | _compile_dim_ret
0a68c     2D 00 64 FD | 	ret
0a690                 | 
0a690                 | ' 
0a690                 | ' '----- compile 'for' command. 
0a690                 | ' 
0a690                 | ' function compile_for() as ulong  
0a690                 | _compile_for
0a690     0F CA 05 F6 | 	mov	COUNT_, #15
0a694     E8 00 A0 FD | 	call	#pushregs_
0a698                 | ' 
0a698                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else return 32
0a698     38 00 00 FF 
0a69c     C4 65 06 F1 | 	add	objptr, ##29124
0a6a0     32 95 02 FB | 	rdlong	arg02, objptr
0a6a4     01 94 06 F1 | 	add	arg02, #1
0a6a8     03 94 66 F0 | 	shl	arg02, #3
0a6ac     02 00 00 FF 
0a6b0     38 64 86 F1 | 	sub	objptr, ##1080
0a6b4     32 95 02 F1 | 	add	arg02, objptr
0a6b8     4A 93 02 FB | 	rdlong	arg01, arg02
0a6bc     36 00 00 FF 
0a6c0     8C 65 86 F1 | 	sub	objptr, ##28044
0a6c4                 | ' 
0a6c4                 | ' select case s
0a6c4     95 01 00 FF 
0a6c8     1E 94 06 F6 | 	mov	arg02, ##@LR__5649
0a6cc     60 A6 B1 FD | 	call	#__system___string_cmp
0a6d0     00 7A 0E F2 | 	cmp	result1, #0 wz
0a6d4     1B 7A 06 A6 |  if_e	mov	result1, #27
0a6d8     00 7A 06 56 |  if_ne	mov	result1, #0
0a6dc     00 7A 0E F2 | 	cmp	result1, #0 wz
0a6e0     0C 00 90 AD |  if_e	jmp	#LR__0930
0a6e4     05 92 06 F6 | 	mov	arg01, #5
0a6e8     DC DB BF FD | 	call	#_compile_immediate_assign
0a6ec     08 00 90 FD | 	jmp	#LR__0931
0a6f0                 | LR__0930
0a6f0     20 7A 06 F6 | 	mov	result1, #32
0a6f4     64 08 90 FD | 	jmp	#LR__0947
0a6f8                 | LR__0931
0a6f8     4B 00 00 FF 
0a6fc     FC 65 06 F1 | 	add	objptr, ##38908
0a700     32 95 02 FB | 	rdlong	arg02, objptr
0a704     4A 93 02 F6 | 	mov	arg01, arg02
0a708     01 92 86 F1 | 	sub	arg01, #1
0a70c     49 AD 02 F6 | 	mov	local04, arg01
0a710     01 AC 66 F0 | 	shl	local04, #1
0a714     49 AD 02 F1 | 	add	local04, arg01
0a718     02 AC 66 F0 | 	shl	local04, #2
0a71c     03 00 00 FF 
0a720     00 64 86 F1 | 	sub	objptr, ##1536
0a724     32 AD 02 F1 | 	add	local04, objptr
0a728     56 A7 02 FB | 	rdlong	local01, local04
0a72c     04 AC 06 F1 | 	add	local04, #4
0a730     56 AF 02 FB | 	rdlong	local05, local04
0a734     01 94 86 F1 | 	sub	arg02, #1
0a738     4A B1 02 F6 | 	mov	local06, arg02
0a73c     01 B0 66 F0 | 	shl	local06, #1
0a740     4A B1 02 F1 | 	add	local06, arg02
0a744     02 B0 66 F0 | 	shl	local06, #2
0a748     32 B3 02 F6 | 	mov	local07, objptr
0a74c     32 B1 02 F1 | 	add	local06, objptr
0a750     08 B0 06 F1 | 	add	local06, #8
0a754     58 AD 02 FB | 	rdlong	local04, local06
0a758     57 A9 02 F6 | 	mov	local02, local05
0a75c     56 AB 02 F6 | 	mov	local03, local04
0a760                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then  return 34'		' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
0a760     17 AA 0E F2 | 	cmp	local03, #23 wz
0a764     48 00 00 FF 
0a768     FC 65 86 F1 | 	sub	objptr, ##37372
0a76c     22 7A 06 56 |  if_ne	mov	result1, #34
0a770     E8 07 90 5D |  if_ne	jmp	#LR__0947
0a774     53 B5 02 F6 | 	mov	local08, local01
0a778                 | ' varnum=t1.result.uresult
0a778                 | ' if lparts(ct).part$<>"to" then return 33
0a778     38 00 00 FF 
0a77c     C4 65 06 F1 | 	add	objptr, ##29124
0a780     32 AD 02 FB | 	rdlong	local04, objptr
0a784     03 AC 66 F0 | 	shl	local04, #3
0a788     02 00 00 FF 
0a78c     38 64 86 F1 | 	sub	objptr, ##1080
0a790     32 AD 02 F1 | 	add	local04, objptr
0a794     56 93 02 FB | 	rdlong	arg01, local04
0a798     97 01 00 FF 
0a79c     B8 95 06 F6 | 	mov	arg02, ##@LR__5942
0a7a0     36 00 00 FF 
0a7a4     8C 65 86 F1 | 	sub	objptr, ##28044
0a7a8     84 A5 B1 FD | 	call	#__system___string_cmp
0a7ac     00 7A 0E F2 | 	cmp	result1, #0 wz
0a7b0     21 7A 06 56 |  if_ne	mov	result1, #33
0a7b4     A4 07 90 5D |  if_ne	jmp	#LR__0947
0a7b8     38 00 00 FF 
0a7bc     C4 65 06 F1 | 	add	objptr, ##29124
0a7c0     32 B7 02 FB | 	rdlong	local09, objptr
0a7c4     01 B6 06 F1 | 	add	local09, #1
0a7c8     32 B7 62 FC | 	wrlong	local09, objptr
0a7cc     38 00 00 FF 
0a7d0     C4 65 86 F1 | 	sub	objptr, ##29124
0a7d4     80 16 B0 FD | 	call	#_expr
0a7d8                 | ' ct+=1
0a7d8                 | ' expr()  										' there is "to" value pushed on the stack
0a7d8                 | ' if lparts(ct).part$="step" orelse left$(lparts(ct).part$,2)="s." then
0a7d8     38 00 00 FF 
0a7dc     C4 65 06 F1 | 	add	objptr, ##29124
0a7e0     32 AD 02 FB | 	rdlong	local04, objptr
0a7e4     03 AC 66 F0 | 	shl	local04, #3
0a7e8     02 00 00 FF 
0a7ec     38 64 86 F1 | 	sub	objptr, ##1080
0a7f0     32 AD 02 F1 | 	add	local04, objptr
0a7f4     56 93 02 FB | 	rdlong	arg01, local04
0a7f8     97 01 00 FF 
0a7fc     BB 95 06 F6 | 	mov	arg02, ##@LR__5943
0a800     36 00 00 FF 
0a804     8C 65 86 F1 | 	sub	objptr, ##28044
0a808     24 A5 B1 FD | 	call	#__system___string_cmp
0a80c     00 7A 0E F2 | 	cmp	result1, #0 wz
0a810     48 00 90 AD |  if_e	jmp	#LR__0932
0a814     38 00 00 FF 
0a818     C4 65 06 F1 | 	add	objptr, ##29124
0a81c     32 AD 02 FB | 	rdlong	local04, objptr
0a820     03 AC 66 F0 | 	shl	local04, #3
0a824     02 00 00 FF 
0a828     38 64 86 F1 | 	sub	objptr, ##1080
0a82c     32 AD 02 F1 | 	add	local04, objptr
0a830     56 93 02 FB | 	rdlong	arg01, local04
0a834     02 94 06 F6 | 	mov	arg02, #2
0a838     36 00 00 FF 
0a83c     8C 65 86 F1 | 	sub	objptr, ##28044
0a840     6C BD B1 FD | 	call	#__system__Left_S
0a844     3D 93 02 F6 | 	mov	arg01, result1
0a848     97 01 00 FF 
0a84c     C0 95 06 F6 | 	mov	arg02, ##@LR__5944
0a850     DC A4 B1 FD | 	call	#__system___string_cmp
0a854     00 7A 0E F2 | 	cmp	result1, #0 wz
0a858     A8 05 90 5D |  if_ne	jmp	#LR__0945
0a85c                 | LR__0932
0a85c                 | '   if left$(lparts(ct).part$,2)="s." andalso len(lparts(ct).part$)>2 then ' correct the part
0a85c     38 00 00 FF 
0a860     C4 65 06 F1 | 	add	objptr, ##29124
0a864     32 AD 02 FB | 	rdlong	local04, objptr
0a868     03 AC 66 F0 | 	shl	local04, #3
0a86c     02 00 00 FF 
0a870     38 64 86 F1 | 	sub	objptr, ##1080
0a874     32 AD 02 F1 | 	add	local04, objptr
0a878     56 93 02 FB | 	rdlong	arg01, local04
0a87c     02 94 06 F6 | 	mov	arg02, #2
0a880     36 00 00 FF 
0a884     8C 65 86 F1 | 	sub	objptr, ##28044
0a888     24 BD B1 FD | 	call	#__system__Left_S
0a88c     3D 93 02 F6 | 	mov	arg01, result1
0a890     97 01 00 FF 
0a894     C3 95 06 F6 | 	mov	arg02, ##@LR__5945
0a898     94 A4 B1 FD | 	call	#__system___string_cmp
0a89c     00 7A 0E F2 | 	cmp	result1, #0 wz
0a8a0     3C 05 90 5D |  if_ne	jmp	#LR__0944
0a8a4     38 00 00 FF 
0a8a8     C4 65 06 F1 | 	add	objptr, ##29124
0a8ac     32 AD 02 FB | 	rdlong	local04, objptr
0a8b0     03 AC 66 F0 | 	shl	local04, #3
0a8b4     02 00 00 FF 
0a8b8     38 64 86 F1 | 	sub	objptr, ##1080
0a8bc     32 AD 02 F1 | 	add	local04, objptr
0a8c0     56 93 02 FB | 	rdlong	arg01, local04
0a8c4     36 00 00 FF 
0a8c8     8C 65 86 F1 | 	sub	objptr, ##28044
0a8cc     49 B9 02 F6 | 	mov	local10, arg01
0a8d0     D7 06 48 FB | 	callpa	#(@LR__0934-@LR__0933)>>2,fcache_load_ptr_
0a8d4                 | LR__0933
0a8d4     5C 7B CA FA | 	rdbyte	result1, local10 wz
0a8d8     01 B8 06 51 |  if_ne	add	local10, #1
0a8dc     F4 FF 9F 5D |  if_ne	jmp	#LR__0933
0a8e0                 | LR__0934
0a8e0     49 B9 82 F1 | 	sub	local10, arg01
0a8e4     03 B8 56 F2 | 	cmps	local10, #3 wc
0a8e8     F4 04 90 CD |  if_b	jmp	#LR__0944
0a8ec     38 00 00 FF 
0a8f0     C4 65 06 F1 | 	add	objptr, ##29124
0a8f4     32 AD 02 FB | 	rdlong	local04, objptr
0a8f8     56 BB 02 F6 | 	mov	local11, local04
0a8fc     03 BA 66 F0 | 	shl	local11, #3
0a900     02 00 00 FF 
0a904     38 64 86 F1 | 	sub	objptr, ##1080
0a908     32 BB 02 F1 | 	add	local11, objptr
0a90c     03 AC 66 F0 | 	shl	local04, #3
0a910     32 AD 02 F1 | 	add	local04, objptr
0a914     56 AD 02 FB | 	rdlong	local04, local04
0a918     02 00 00 FF 
0a91c     38 64 06 F1 | 	add	objptr, ##1080
0a920     32 93 02 FB | 	rdlong	arg01, objptr
0a924     03 92 66 F0 | 	shl	arg01, #3
0a928     02 00 00 FF 
0a92c     38 64 86 F1 | 	sub	objptr, ##1080
0a930     32 93 02 F1 | 	add	arg01, objptr
0a934     49 93 02 FB | 	rdlong	arg01, arg01
0a938     36 00 00 FF 
0a93c     8C 65 86 F1 | 	sub	objptr, ##28044
0a940     49 B9 02 F6 | 	mov	local10, arg01
0a944     D7 06 48 FB | 	callpa	#(@LR__0936-@LR__0935)>>2,fcache_load_ptr_
0a948                 | LR__0935
0a948     5C 7B CA FA | 	rdbyte	result1, local10 wz
0a94c     01 B8 06 51 |  if_ne	add	local10, #1
0a950     F4 FF 9F 5D |  if_ne	jmp	#LR__0935
0a954                 | LR__0936
0a954     49 B9 82 F1 | 	sub	local10, arg01
0a958     5C 95 02 F6 | 	mov	arg02, local10
0a95c     02 94 86 F1 | 	sub	arg02, #2
0a960     56 93 02 F6 | 	mov	arg01, local04
0a964     D0 BC B1 FD | 	call	#__system__Right_S
0a968     5D 7B 62 FC | 	wrlong	result1, local11
0a96c     38 00 00 FF 
0a970     C4 65 06 F1 | 	add	objptr, ##29124
0a974     32 AD 02 FB | 	rdlong	local04, objptr
0a978     56 BB 02 F6 | 	mov	local11, local04
0a97c     03 BA 66 F0 | 	shl	local11, #3
0a980     02 00 00 FF 
0a984     38 64 86 F1 | 	sub	objptr, ##1080
0a988     32 BB 02 F1 | 	add	local11, objptr
0a98c     03 AC 66 F0 | 	shl	local04, #3
0a990     32 AD 02 F1 | 	add	local04, objptr
0a994     56 93 02 FB | 	rdlong	arg01, local04
0a998     36 00 00 FF 
0a99c     8C 65 86 F1 | 	sub	objptr, ##28044
0a9a0     1C B6 BF FD | 	call	#_isfunction
0a9a4     3D 7B E2 F8 | 	getbyte	result1, result1, #0
0a9a8     04 BA 06 F1 | 	add	local11, #4
0a9ac     5D 7B 62 FC | 	wrlong	result1, local11
0a9b0                 | '     lparts(ct).token=isfunction(lparts(ct).part$) : if lparts(ct).token>0 then goto 2102
0a9b0     38 00 00 FF 
0a9b4     C4 65 06 F1 | 	add	objptr, ##29124
0a9b8     32 BB 02 FB | 	rdlong	local11, objptr
0a9bc     03 BA 66 F0 | 	shl	local11, #3
0a9c0     02 00 00 FF 
0a9c4     38 64 86 F1 | 	sub	objptr, ##1080
0a9c8     32 BB 02 F1 | 	add	local11, objptr
0a9cc     04 BA 06 F1 | 	add	local11, #4
0a9d0     5D AD 02 FB | 	rdlong	local04, local11
0a9d4     01 AC 56 F2 | 	cmps	local04, #1 wc
0a9d8     36 00 00 FF 
0a9dc     8C 65 86 F1 | 	sub	objptr, ##28044
0a9e0     E0 03 90 3D |  if_ae	jmp	#LR__0943
0a9e4     38 00 00 FF 
0a9e8     C4 65 06 F1 | 	add	objptr, ##29124
0a9ec     32 AD 02 FB | 	rdlong	local04, objptr
0a9f0     56 BB 02 F6 | 	mov	local11, local04
0a9f4     03 BA 66 F0 | 	shl	local11, #3
0a9f8     02 00 00 FF 
0a9fc     38 64 86 F1 | 	sub	objptr, ##1080
0aa00     32 BB 02 F1 | 	add	local11, objptr
0aa04     03 AC 66 F0 | 	shl	local04, #3
0aa08     32 AD 02 F1 | 	add	local04, objptr
0aa0c     56 93 02 FB | 	rdlong	arg01, local04
0aa10     36 00 00 FF 
0aa14     8C 65 86 F1 | 	sub	objptr, ##28044
0aa18     78 9E BF FD | 	call	#_isnotename
0aa1c     04 BA 06 F1 | 	add	local11, #4
0aa20     5D 7B 62 FC | 	wrlong	result1, local11
0aa24                 | '     lparts(ct).token=isnotename(lparts(ct).part$) :
0aa24                 | '     if lparts(ct).token>0 then 
0aa24     38 00 00 FF 
0aa28     C4 65 06 F1 | 	add	objptr, ##29124
0aa2c     32 BB 02 FB | 	rdlong	local11, objptr
0aa30     03 BA 66 F0 | 	shl	local11, #3
0aa34     02 00 00 FF 
0aa38     38 64 86 F1 | 	sub	objptr, ##1080
0aa3c     32 BB 02 F1 | 	add	local11, objptr
0aa40     04 BA 06 F1 | 	add	local11, #4
0aa44     5D AD 02 FB | 	rdlong	local04, local11
0aa48     01 AC 56 F2 | 	cmps	local04, #1 wc
0aa4c     36 00 00 FF 
0aa50     8C 65 86 F1 | 	sub	objptr, ##28044
0aa54     94 00 90 CD |  if_b	jmp	#LR__0937
0aa58     38 00 00 FF 
0aa5c     C4 65 06 F1 | 	add	objptr, ##29124
0aa60     32 BB 02 FB | 	rdlong	local11, objptr
0aa64     03 BA 66 F0 | 	shl	local11, #3
0aa68     02 00 00 FF 
0aa6c     38 64 86 F1 | 	sub	objptr, ##1080
0aa70     32 BB 02 F1 | 	add	local11, objptr
0aa74     04 BA 06 F1 | 	add	local11, #4
0aa78     5D 93 02 FB | 	rdlong	arg01, local11
0aa7c     36 00 00 FF 
0aa80     8C 65 86 F1 | 	sub	objptr, ##28044
0aa84     80 C7 BF FD | 	call	#_getnoteval
0aa88     3D 93 02 F6 | 	mov	arg01, result1
0aa8c     38 00 00 FF 
0aa90     C4 65 06 F1 | 	add	objptr, ##29124
0aa94     32 BB 02 FB | 	rdlong	local11, objptr
0aa98     03 BA 66 F0 | 	shl	local11, #3
0aa9c     02 00 00 FF 
0aaa0     38 64 86 F1 | 	sub	objptr, ##1080
0aaa4     32 BB 02 F1 | 	add	local11, objptr
0aaa8     36 00 00 FF 
0aaac     8C 65 86 F1 | 	sub	objptr, ##28044
0aab0     F4 BC B1 FD | 	call	#__system__str_S
0aab4     5D 7B 62 FC | 	wrlong	result1, local11
0aab8     38 00 00 FF 
0aabc     C4 65 06 F1 | 	add	objptr, ##29124
0aac0     32 BB 02 FB | 	rdlong	local11, objptr
0aac4     03 BA 66 F0 | 	shl	local11, #3
0aac8     02 00 00 FF 
0aacc     38 64 86 F1 | 	sub	objptr, ##1080
0aad0     32 BB 02 F1 | 	add	local11, objptr
0aad4     04 BA 06 F1 | 	add	local11, #4
0aad8     01 00 80 FF 
0aadc     5D 05 68 FC | 	wrlong	##514, local11
0aae0     36 00 00 FF 
0aae4     8C 65 86 F1 | 	sub	objptr, ##28044
0aae8     D8 02 90 FD | 	jmp	#LR__0943
0aaec                 | LR__0937
0aaec     38 00 00 FF 
0aaf0     C4 65 06 F1 | 	add	objptr, ##29124
0aaf4     32 AD 02 FB | 	rdlong	local04, objptr
0aaf8     56 BB 02 F6 | 	mov	local11, local04
0aafc     03 BA 66 F0 | 	shl	local11, #3
0ab00     02 00 00 FF 
0ab04     38 64 86 F1 | 	sub	objptr, ##1080
0ab08     32 BB 02 F1 | 	add	local11, objptr
0ab0c     03 AC 66 F0 | 	shl	local04, #3
0ab10     32 AD 02 F1 | 	add	local04, objptr
0ab14     56 93 02 FB | 	rdlong	arg01, local04
0ab18     36 00 00 FF 
0ab1c     8C 65 86 F1 | 	sub	objptr, ##28044
0ab20     F0 9C BF FD | 	call	#_isconstant
0ab24     04 BA 06 F1 | 	add	local11, #4
0ab28     5D 7B 62 FC | 	wrlong	result1, local11
0ab2c                 | '     lparts(ct).token=isconstant(lparts(ct).part$) : if lparts(ct).token>0 then lparts(ct).part$=str$(lparts(ct).token) : lparts(ct).token=token_integer : goto 2102
0ab2c     38 00 00 FF 
0ab30     C4 65 06 F1 | 	add	objptr, ##29124
0ab34     32 BB 02 FB | 	rdlong	local11, objptr
0ab38     03 BA 66 F0 | 	shl	local11, #3
0ab3c     02 00 00 FF 
0ab40     38 64 86 F1 | 	sub	objptr, ##1080
0ab44     32 BB 02 F1 | 	add	local11, objptr
0ab48     04 BA 06 F1 | 	add	local11, #4
0ab4c     5D AD 02 FB | 	rdlong	local04, local11
0ab50     01 AC 56 F2 | 	cmps	local04, #1 wc
0ab54     36 00 00 FF 
0ab58     8C 65 86 F1 | 	sub	objptr, ##28044
0ab5c     8C 00 90 CD |  if_b	jmp	#LR__0938
0ab60     38 00 00 FF 
0ab64     C4 65 06 F1 | 	add	objptr, ##29124
0ab68     32 B7 02 FB | 	rdlong	local09, objptr
0ab6c     5B BB 02 F6 | 	mov	local11, local09
0ab70     03 BA 66 F0 | 	shl	local11, #3
0ab74     02 00 00 FF 
0ab78     38 64 86 F1 | 	sub	objptr, ##1080
0ab7c     32 BB 02 F1 | 	add	local11, objptr
0ab80     03 B6 66 F0 | 	shl	local09, #3
0ab84     32 B7 02 F1 | 	add	local09, objptr
0ab88     04 B6 06 F1 | 	add	local09, #4
0ab8c     5B 93 02 FB | 	rdlong	arg01, local09
0ab90     36 00 00 FF 
0ab94     8C 65 86 F1 | 	sub	objptr, ##28044
0ab98     49 93 52 F6 | 	abs	arg01, arg01 wc
0ab9c     1F BC C6 C9 |  if_b	decod	local12, #31
0aba0     00 BC 06 36 |  if_ae	mov	local12, #0
0aba4     2C C4 B1 FD | 	call	#__system___float_fromuns
0aba8     5E 7B 62 F5 | 	xor	result1, local12
0abac     3D 93 02 F6 | 	mov	arg01, result1
0abb0     F4 BB B1 FD | 	call	#__system__str_S
0abb4     5D 7B 62 FC | 	wrlong	result1, local11
0abb8     38 00 00 FF 
0abbc     C4 65 06 F1 | 	add	objptr, ##29124
0abc0     32 BB 02 FB | 	rdlong	local11, objptr
0abc4     03 BA 66 F0 | 	shl	local11, #3
0abc8     02 00 00 FF 
0abcc     38 64 86 F1 | 	sub	objptr, ##1080
0abd0     32 BB 02 F1 | 	add	local11, objptr
0abd4     04 BA 06 F1 | 	add	local11, #4
0abd8     01 00 80 FF 
0abdc     5D 03 68 FC | 	wrlong	##513, local11
0abe0     36 00 00 FF 
0abe4     8C 65 86 F1 | 	sub	objptr, ##28044
0abe8     D8 01 90 FD | 	jmp	#LR__0943
0abec                 | LR__0938
0abec     38 00 00 FF 
0abf0     C4 65 06 F1 | 	add	objptr, ##29124
0abf4     32 AD 02 FB | 	rdlong	local04, objptr
0abf8     03 AC 66 F0 | 	shl	local04, #3
0abfc     02 00 00 FF 
0ac00     38 64 86 F1 | 	sub	objptr, ##1080
0ac04     32 AD 02 F1 | 	add	local04, objptr
0ac08     56 93 02 FB | 	rdlong	arg01, local04
0ac0c     36 00 00 FF 
0ac10     8C 65 86 F1 | 	sub	objptr, ##28044
0ac14     3C BE BF FD | 	call	#_isnum
0ac18     3D BF 02 F6 | 	mov	local13, result1
0ac1c     07 BE 66 F7 | 	signx	local13, #7
0ac20     38 00 00 FF 
0ac24     C4 65 06 F1 | 	add	objptr, ##29124
0ac28     32 AD 02 FB | 	rdlong	local04, objptr
0ac2c     03 AC 66 F0 | 	shl	local04, #3
0ac30     02 00 00 FF 
0ac34     38 64 86 F1 | 	sub	objptr, ##1080
0ac38     32 AD 02 F1 | 	add	local04, objptr
0ac3c     56 93 02 FB | 	rdlong	arg01, local04
0ac40     36 00 00 FF 
0ac44     8C 65 86 F1 | 	sub	objptr, ##28044
0ac48     F4 C1 BF FD | 	call	#_isint
0ac4c     3D C1 02 F6 | 	mov	local14, result1
0ac50     07 C0 66 F7 | 	signx	local14, #7
0ac54     38 00 00 FF 
0ac58     C4 65 06 F1 | 	add	objptr, ##29124
0ac5c     32 AD 02 FB | 	rdlong	local04, objptr
0ac60     03 AC 66 F0 | 	shl	local04, #3
0ac64     02 00 00 FF 
0ac68     38 64 86 F1 | 	sub	objptr, ##1080
0ac6c     32 AD 02 F1 | 	add	local04, objptr
0ac70     56 93 02 FB | 	rdlong	arg01, local04
0ac74     36 00 00 FF 
0ac78     8C 65 86 F1 | 	sub	objptr, ##28044
0ac7c     64 C4 BF FD | 	call	#_isdec
0ac80     07 7A 66 F7 | 	signx	result1, #7
0ac84     3D C3 02 F6 | 	mov	local15, result1
0ac88                 | '     b1=isnum(lparts(ct).part$) : b2=isint(lparts(ct).part$) : b3=isdec(lparts(ct).part$)
0ac88                 | '     if b1 andalso b2 andalso b3 then lparts(ct).token=token_decimal 			: goto 2102 	' pure decimal for line num
0ac88     00 BE 0E F2 | 	cmp	local13, #0 wz
0ac8c     00 C0 0E 52 |  if_ne	cmp	local14, #0 wz
0ac90     00 C2 0E 52 |  if_ne	cmp	local15, #0 wz
0ac94     34 00 90 AD |  if_e	jmp	#LR__0939
0ac98     38 00 00 FF 
0ac9c     C4 65 06 F1 | 	add	objptr, ##29124
0aca0     32 BB 02 FB | 	rdlong	local11, objptr
0aca4     03 BA 66 F0 | 	shl	local11, #3
0aca8     02 00 00 FF 
0acac     38 64 86 F1 | 	sub	objptr, ##1080
0acb0     32 BB 02 F1 | 	add	local11, objptr
0acb4     04 BA 06 F1 | 	add	local11, #4
0acb8     01 00 80 FF 
0acbc     5D 01 68 FC | 	wrlong	##512, local11
0acc0     36 00 00 FF 
0acc4     8C 65 86 F1 | 	sub	objptr, ##28044
0acc8     F8 00 90 FD | 	jmp	#LR__0943
0accc                 | LR__0939
0accc                 | '     if b1 andalso b2 andalso (not b3) then lparts(ct).token=token_integer 		: goto 2102 	' integer
0accc     00 BE 0E F2 | 	cmp	local13, #0 wz
0acd0     00 C0 0E 52 |  if_ne	cmp	local14, #0 wz
0acd4     61 B7 22 56 |  if_ne	not	local09, local15
0acd8     00 B6 0E 52 |  if_ne	cmp	local09, #0 wz
0acdc     34 00 90 AD |  if_e	jmp	#LR__0940
0ace0     38 00 00 FF 
0ace4     C4 65 06 F1 | 	add	objptr, ##29124
0ace8     32 BB 02 FB | 	rdlong	local11, objptr
0acec     03 BA 66 F0 | 	shl	local11, #3
0acf0     02 00 00 FF 
0acf4     38 64 86 F1 | 	sub	objptr, ##1080
0acf8     32 BB 02 F1 | 	add	local11, objptr
0acfc     04 BA 06 F1 | 	add	local11, #4
0ad00     01 00 80 FF 
0ad04     5D 03 68 FC | 	wrlong	##513, local11
0ad08     36 00 00 FF 
0ad0c     8C 65 86 F1 | 	sub	objptr, ##28044
0ad10     B0 00 90 FD | 	jmp	#LR__0943
0ad14                 | LR__0940
0ad14                 | '     if b1 andalso (not b2) andalso (not b3) then lparts(ct).token=token_float 		: goto 2102 	' float
0ad14     00 BE 0E F2 | 	cmp	local13, #0 wz
0ad18     60 C1 22 56 |  if_ne	not	local14, local14
0ad1c     00 C0 0E 52 |  if_ne	cmp	local14, #0 wz
0ad20     61 C3 22 56 |  if_ne	not	local15, local15
0ad24     00 C2 0E 52 |  if_ne	cmp	local15, #0 wz
0ad28     34 00 90 AD |  if_e	jmp	#LR__0941
0ad2c     38 00 00 FF 
0ad30     C4 65 06 F1 | 	add	objptr, ##29124
0ad34     32 BB 02 FB | 	rdlong	local11, objptr
0ad38     03 BA 66 F0 | 	shl	local11, #3
0ad3c     02 00 00 FF 
0ad40     38 64 86 F1 | 	sub	objptr, ##1080
0ad44     32 BB 02 F1 | 	add	local11, objptr
0ad48     04 BA 06 F1 | 	add	local11, #4
0ad4c     01 00 80 FF 
0ad50     5D 05 68 FC | 	wrlong	##514, local11
0ad54     36 00 00 FF 
0ad58     8C 65 86 F1 | 	sub	objptr, ##28044
0ad5c     64 00 90 FD | 	jmp	#LR__0943
0ad60                 | LR__0941
0ad60                 | '     if isname(lparts(ct).part$) then lparts(ct).token=token_name : goto 2102	
0ad60     38 00 00 FF 
0ad64     C4 65 06 F1 | 	add	objptr, ##29124
0ad68     32 BB 02 FB | 	rdlong	local11, objptr
0ad6c     03 BA 66 F0 | 	shl	local11, #3
0ad70     02 00 00 FF 
0ad74     38 64 86 F1 | 	sub	objptr, ##1080
0ad78     32 BB 02 F1 | 	add	local11, objptr
0ad7c     5D 93 02 FB | 	rdlong	arg01, local11
0ad80     36 00 00 FF 
0ad84     8C 65 86 F1 | 	sub	objptr, ##28044
0ad88     54 BA BF FD | 	call	#_isname
0ad8c     00 7A 0E F2 | 	cmp	result1, #0 wz
0ad90     30 00 90 AD |  if_e	jmp	#LR__0942
0ad94     38 00 00 FF 
0ad98     C4 65 06 F1 | 	add	objptr, ##29124
0ad9c     32 BB 02 FB | 	rdlong	local11, objptr
0ada0     03 BA 66 F0 | 	shl	local11, #3
0ada4     02 00 00 FF 
0ada8     38 64 86 F1 | 	sub	objptr, ##1080
0adac     32 BB 02 F1 | 	add	local11, objptr
0adb0     04 BA 06 F1 | 	add	local11, #4
0adb4     01 00 80 FF 
0adb8     5D 09 68 FC | 	wrlong	##516, local11
0adbc     36 00 00 FF 
0adc0     8C 65 86 F1 | 	sub	objptr, ##28044
0adc4                 | LR__0942
0adc4                 | LR__0943
0adc4     38 00 00 FF 
0adc8     C4 65 06 F1 | 	add	objptr, ##29124
0adcc     32 B7 02 FB | 	rdlong	local09, objptr
0add0     01 B6 86 F1 | 	sub	local09, #1
0add4     32 B7 62 FC | 	wrlong	local09, objptr
0add8     38 00 00 FF 
0addc     C4 65 86 F1 | 	sub	objptr, ##29124
0ade0                 | LR__0944
0ade0     38 00 00 FF 
0ade4     C4 65 06 F1 | 	add	objptr, ##29124
0ade8     32 B7 02 FB | 	rdlong	local09, objptr
0adec     01 B6 06 F1 | 	add	local09, #1
0adf0     32 B7 62 FC | 	wrlong	local09, objptr
0adf4     38 00 00 FF 
0adf8     C4 65 86 F1 | 	sub	objptr, ##29124
0adfc     58 10 B0 FD | 	call	#_expr
0ae00     78 00 90 FD | 	jmp	#LR__0946
0ae04                 | LR__0945
0ae04     4B 00 00 FF 
0ae08     FC 65 06 F1 | 	add	objptr, ##38908
0ae0c     32 C3 02 FB | 	rdlong	local15, objptr
0ae10     61 BB 02 F6 | 	mov	local11, local15
0ae14     01 BA 66 F0 | 	shl	local11, #1
0ae18     61 BB 02 F1 | 	add	local11, local15
0ae1c     02 BA 66 F0 | 	shl	local11, #2
0ae20     03 00 00 FF 
0ae24     00 64 86 F1 | 	sub	objptr, ##1536
0ae28     32 BB 02 F1 | 	add	local11, objptr
0ae2c     08 BA 06 F1 | 	add	local11, #8
0ae30     5D 39 68 FC | 	wrlong	#28, local11
0ae34     03 00 00 FF 
0ae38     00 64 06 F1 | 	add	objptr, ##1536
0ae3c     32 C3 02 FB | 	rdlong	local15, objptr
0ae40     61 BB 02 F6 | 	mov	local11, local15
0ae44     01 BA 66 F0 | 	shl	local11, #1
0ae48     61 BB 02 F1 | 	add	local11, local15
0ae4c     02 BA 66 F0 | 	shl	local11, #2
0ae50     03 00 00 FF 
0ae54     00 64 86 F1 | 	sub	objptr, ##1536
0ae58     32 BB 02 F1 | 	add	local11, objptr
0ae5c     5D 03 68 FC | 	wrlong	#1, local11
0ae60     03 00 00 FF 
0ae64     00 64 06 F1 | 	add	objptr, ##1536
0ae68     32 B7 02 FB | 	rdlong	local09, objptr
0ae6c     01 B6 06 F1 | 	add	local09, #1
0ae70     32 B7 62 FC | 	wrlong	local09, objptr
0ae74     4B 00 00 FF 
0ae78     FC 65 86 F1 | 	sub	objptr, ##38908
0ae7c                 | LR__0946
0ae7c     4B 00 00 FF 
0ae80     FC 65 06 F1 | 	add	objptr, ##38908
0ae84     32 C3 02 FB | 	rdlong	local15, objptr
0ae88     61 BB 02 F6 | 	mov	local11, local15
0ae8c     01 BA 66 F0 | 	shl	local11, #1
0ae90     61 BB 02 F1 | 	add	local11, local15
0ae94     02 BA 66 F0 | 	shl	local11, #2
0ae98     03 00 00 FF 
0ae9c     00 64 86 F1 | 	sub	objptr, ##1536
0aea0     32 BB 02 F1 | 	add	local11, objptr
0aea4     08 BA 06 F1 | 	add	local11, #8
0aea8     5D 39 68 FC | 	wrlong	#28, local11
0aeac     03 00 00 FF 
0aeb0     00 64 06 F1 | 	add	objptr, ##1536
0aeb4     32 C3 02 FB | 	rdlong	local15, objptr
0aeb8     61 BB 02 F6 | 	mov	local11, local15
0aebc     01 BA 66 F0 | 	shl	local11, #1
0aec0     61 BB 02 F1 | 	add	local11, local15
0aec4     02 BA 66 F0 | 	shl	local11, #2
0aec8     03 00 00 FF 
0aecc     00 64 86 F1 | 	sub	objptr, ##1536
0aed0     32 BB 02 F1 | 	add	local11, objptr
0aed4     5D B5 62 FC | 	wrlong	local08, local11
0aed8     03 00 00 FF 
0aedc     00 64 06 F1 | 	add	objptr, ##1536
0aee0     32 C3 02 FB | 	rdlong	local15, objptr
0aee4     01 C2 06 F1 | 	add	local15, #1
0aee8     32 C3 62 FC | 	wrlong	local15, objptr
0aeec     61 BB 02 F6 | 	mov	local11, local15
0aef0     01 BA 66 F0 | 	shl	local11, #1
0aef4     61 BB 02 F1 | 	add	local11, local15
0aef8     02 BA 66 F0 | 	shl	local11, #2
0aefc     03 00 00 FF 
0af00     00 64 86 F1 | 	sub	objptr, ##1536
0af04     32 BB 02 F1 | 	add	local11, objptr
0af08     08 BA 06 F1 | 	add	local11, #8
0af0c     5D 95 68 FC | 	wrlong	#74, local11
0af10     03 00 00 FF 
0af14     00 64 06 F1 | 	add	objptr, ##1536
0af18     32 C3 02 FB | 	rdlong	local15, objptr
0af1c     61 BB 02 F6 | 	mov	local11, local15
0af20     01 BA 66 F0 | 	shl	local11, #1
0af24     61 BB 02 F1 | 	add	local11, local15
0af28     02 BA 66 F0 | 	shl	local11, #2
0af2c     03 00 00 FF 
0af30     00 64 86 F1 | 	sub	objptr, ##1536
0af34     32 BB 02 F1 | 	add	local11, objptr
0af38     5D 01 68 FC | 	wrlong	#0, local11
0af3c     03 00 00 FF 
0af40     00 64 06 F1 | 	add	objptr, ##1536
0af44     32 B7 02 FB | 	rdlong	local09, objptr
0af48     01 B6 06 F1 | 	add	local09, #1
0af4c     32 B7 62 FC | 	wrlong	local09, objptr
0af50     4B 00 00 FF 
0af54     FC 65 86 F1 | 	sub	objptr, ##38908
0af58                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
0af58                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
0af58                 | ' return 0
0af58     00 7A 06 F6 | 	mov	result1, #0
0af5c                 | LR__0947
0af5c     E7 F0 03 F6 | 	mov	ptra, fp
0af60     F2 00 A0 FD | 	call	#popregs_
0af64                 | _compile_for_ret
0af64     2D 00 64 FD | 	ret
0af68                 | 
0af68                 | ' 
0af68                 | ' '----- compile 'next' command. 
0af68                 | ' 
0af68                 | ' function compile_next() as ulong
0af68                 | _compile_next
0af68     04 CA 05 F6 | 	mov	COUNT_, #4
0af6c     E8 00 A0 FD | 	call	#pushregs_
0af70     38 00 00 FF 
0af74     C4 65 06 F1 | 	add	objptr, ##29124
0af78     32 93 02 FB | 	rdlong	arg01, objptr
0af7c     03 92 66 F0 | 	shl	arg01, #3
0af80     02 00 00 FF 
0af84     38 64 86 F1 | 	sub	objptr, ##1080
0af88     32 93 02 F1 | 	add	arg01, objptr
0af8c     49 A7 02 FB | 	rdlong	local01, arg01
0af90                 | ' 
0af90                 | ' varname$=lparts(ct).part$ 
0af90                 | ' if varnum=0 then return 35
0af90     04 64 86 F1 | 	sub	objptr, #4
0af94     32 93 0A FB | 	rdlong	arg01, objptr wz
0af98     36 00 00 FF 
0af9c     88 65 86 F1 | 	sub	objptr, ##28040
0afa0     23 7A 06 A6 |  if_e	mov	result1, #35
0afa4     48 01 90 AD |  if_e	jmp	#LR__0952
0afa8     01 A8 66 F6 | 	neg	local02, #1
0afac                 | ' j=-1
0afac                 | ' for i=0 to varnum-1
0afac     00 AA 06 F6 | 	mov	local03, #0
0afb0     36 00 00 FF 
0afb4     88 65 06 F1 | 	add	objptr, ##28040
0afb8     32 AD 02 FB | 	rdlong	local04, objptr
0afbc     36 00 00 FF 
0afc0     88 65 86 F1 | 	sub	objptr, ##28040
0afc4                 | LR__0950
0afc4     56 AB 12 F2 | 	cmp	local03, local04 wc
0afc8     34 00 90 3D |  if_ae	jmp	#LR__0951
0afcc                 | '   if variables(i).name=varname$ then j=i : exit
0afcc     55 93 02 F6 | 	mov	arg01, local03
0afd0     04 92 66 F0 | 	shl	arg01, #4
0afd4     32 95 02 F6 | 	mov	arg02, objptr
0afd8     16 00 00 FF 
0afdc     78 95 06 F1 | 	add	arg02, ##11640
0afe0     4A 93 02 F1 | 	add	arg01, arg02
0afe4     49 93 02 FB | 	rdlong	arg01, arg01
0afe8     53 95 02 F6 | 	mov	arg02, local01
0afec     40 9D B1 FD | 	call	#__system___string_cmp
0aff0     00 7A 0E F2 | 	cmp	result1, #0 wz
0aff4     55 A9 02 A6 |  if_e	mov	local02, local03
0aff8     01 AA 06 51 |  if_ne	add	local03, #1
0affc     C4 FF 9F 5D |  if_ne	jmp	#LR__0950
0b000                 | LR__0951
0b000                 | ' if j=-1 then return 35
0b000     FF FF 7F FF 
0b004     FF A9 0E F2 | 	cmp	local02, ##-1 wz
0b008     23 7A 06 A6 |  if_e	mov	result1, #35
0b00c     E0 00 90 AD |  if_e	jmp	#LR__0952
0b010     4B 00 00 FF 
0b014     FC 65 06 F1 | 	add	objptr, ##38908
0b018     32 AD 02 FB | 	rdlong	local04, objptr
0b01c     56 AB 02 F6 | 	mov	local03, local04
0b020     01 AA 66 F0 | 	shl	local03, #1
0b024     56 AB 02 F1 | 	add	local03, local04
0b028     02 AA 66 F0 | 	shl	local03, #2
0b02c     03 00 00 FF 
0b030     00 64 86 F1 | 	sub	objptr, ##1536
0b034     32 AB 02 F1 | 	add	local03, objptr
0b038     08 AA 06 F1 | 	add	local03, #8
0b03c     55 39 68 FC | 	wrlong	#28, local03
0b040     03 00 00 FF 
0b044     00 64 06 F1 | 	add	objptr, ##1536
0b048     32 AD 02 FB | 	rdlong	local04, objptr
0b04c     56 AB 02 F6 | 	mov	local03, local04
0b050     01 AA 66 F0 | 	shl	local03, #1
0b054     56 AB 02 F1 | 	add	local03, local04
0b058     02 AA 66 F0 | 	shl	local03, #2
0b05c     03 00 00 FF 
0b060     00 64 86 F1 | 	sub	objptr, ##1536
0b064     32 AB 02 F1 | 	add	local03, objptr
0b068     55 A9 62 FC | 	wrlong	local02, local03
0b06c     03 00 00 FF 
0b070     00 64 06 F1 | 	add	objptr, ##1536
0b074     32 AD 02 FB | 	rdlong	local04, objptr
0b078     01 AC 06 F1 | 	add	local04, #1
0b07c     32 AD 62 FC | 	wrlong	local04, objptr
0b080     56 AB 02 F6 | 	mov	local03, local04
0b084     01 AA 66 F0 | 	shl	local03, #1
0b088     56 AB 02 F1 | 	add	local03, local04
0b08c     02 AA 66 F0 | 	shl	local03, #2
0b090     03 00 00 FF 
0b094     00 64 86 F1 | 	sub	objptr, ##1536
0b098     32 AB 02 F1 | 	add	local03, objptr
0b09c     08 AA 06 F1 | 	add	local03, #8
0b0a0     55 97 68 FC | 	wrlong	#75, local03
0b0a4     03 00 00 FF 
0b0a8     00 64 06 F1 | 	add	objptr, ##1536
0b0ac     32 AD 02 FB | 	rdlong	local04, objptr
0b0b0     56 AB 02 F6 | 	mov	local03, local04
0b0b4     01 AA 66 F0 | 	shl	local03, #1
0b0b8     56 AB 02 F1 | 	add	local03, local04
0b0bc     02 AA 66 F0 | 	shl	local03, #2
0b0c0     03 00 00 FF 
0b0c4     00 64 86 F1 | 	sub	objptr, ##1536
0b0c8     32 AB 02 F1 | 	add	local03, objptr
0b0cc     55 01 68 FC | 	wrlong	#0, local03
0b0d0     03 00 00 FF 
0b0d4     00 64 06 F1 | 	add	objptr, ##1536
0b0d8     32 AD 02 FB | 	rdlong	local04, objptr
0b0dc     01 AC 06 F1 | 	add	local04, #1
0b0e0     32 AD 62 FC | 	wrlong	local04, objptr
0b0e4     4B 00 00 FF 
0b0e8     FC 65 86 F1 | 	sub	objptr, ##38908
0b0ec                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
0b0ec                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
0b0ec                 | ' return 0
0b0ec     00 7A 06 F6 | 	mov	result1, #0
0b0f0                 | LR__0952
0b0f0     E7 F0 03 F6 | 	mov	ptra, fp
0b0f4     F2 00 A0 FD | 	call	#popregs_
0b0f8                 | _compile_next_ret
0b0f8     2D 00 64 FD | 	ret
0b0fc                 | 
0b0fc                 | ' 
0b0fc                 | ' '----- compile 'gosub' command. Gosub is "goto" that saves the return address, so add token_gosub, then compile goto
0b0fc                 | ' 
0b0fc                 | ' function compile_gosub() as ulong
0b0fc                 | _compile_gosub
0b0fc     02 CA 05 F6 | 	mov	COUNT_, #2
0b100     E8 00 A0 FD | 	call	#pushregs_
0b104     4B 00 00 FF 
0b108     FC 65 06 F1 | 	add	objptr, ##38908
0b10c     32 A7 02 FB | 	rdlong	local01, objptr
0b110     53 A9 02 F6 | 	mov	local02, local01
0b114     01 A8 66 F0 | 	shl	local02, #1
0b118     53 A9 02 F1 | 	add	local02, local01
0b11c     02 A8 66 F0 | 	shl	local02, #2
0b120     03 00 00 FF 
0b124     00 64 86 F1 | 	sub	objptr, ##1536
0b128     32 A9 02 F1 | 	add	local02, objptr
0b12c     08 A8 06 F1 | 	add	local02, #8
0b130     54 53 69 FC | 	wrlong	#169, local02
0b134     03 00 00 FF 
0b138     00 64 06 F1 | 	add	objptr, ##1536
0b13c     32 A9 02 FB | 	rdlong	local02, objptr
0b140     01 A8 06 F1 | 	add	local02, #1
0b144     32 A9 62 FC | 	wrlong	local02, objptr
0b148     4B 00 00 FF 
0b14c     FC 65 86 F1 | 	sub	objptr, ##38908
0b150     0C 00 B0 FD | 	call	#_compile_goto
0b154                 | ' compiledline(lineptr).result_type=token_gosub
0b154                 | ' lineptr+=1
0b154                 | ' err=compile_goto()
0b154                 | ' return err
0b154     E7 F0 03 F6 | 	mov	ptra, fp
0b158     F2 00 A0 FD | 	call	#popregs_
0b15c                 | _compile_gosub_ret
0b15c     2D 00 64 FD | 	ret
0b160                 | 
0b160                 | ' 
0b160                 | ' '----- compile 'goto' 
0b160                 | ' 
0b160                 | ' function compile_goto() as ulong
0b160                 | _compile_goto
0b160     0A CA 05 F6 | 	mov	COUNT_, #10
0b164     E8 00 A0 FD | 	call	#pushregs_
0b168     34 F0 07 F1 | 	add	ptra, #52
0b16c                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 	' we have a goto to a constant
0b16c     38 00 00 FF 
0b170     C4 65 06 F1 | 	add	objptr, ##29124
0b174     32 97 02 FB | 	rdlong	arg03, objptr
0b178     03 96 66 F0 | 	shl	arg03, #3
0b17c     02 00 00 FF 
0b180     38 64 86 F1 | 	sub	objptr, ##1080
0b184     32 97 02 F1 | 	add	arg03, objptr
0b188     04 96 06 F1 | 	add	arg03, #4
0b18c     4B 97 02 FB | 	rdlong	arg03, arg03
0b190     01 00 00 FF 
0b194     00 96 0E F2 | 	cmp	arg03, ##512 wz
0b198     36 00 00 FF 
0b19c     8C 65 86 F1 | 	sub	objptr, ##28044
0b1a0     64 02 90 5D |  if_ne	jmp	#LR__0963
0b1a4     38 00 00 FF 
0b1a8     C4 65 06 F1 | 	add	objptr, ##29124
0b1ac     32 97 02 FB | 	rdlong	arg03, objptr
0b1b0     01 96 06 F1 | 	add	arg03, #1
0b1b4     03 96 66 F0 | 	shl	arg03, #3
0b1b8     02 00 00 FF 
0b1bc     38 64 86 F1 | 	sub	objptr, ##1080
0b1c0     32 97 02 F1 | 	add	arg03, objptr
0b1c4     04 96 06 F1 | 	add	arg03, #4
0b1c8     4B 97 02 FB | 	rdlong	arg03, arg03
0b1cc     FE 97 0E F2 | 	cmp	arg03, #510 wz
0b1d0     36 00 00 FF 
0b1d4     8C 65 86 F1 | 	sub	objptr, ##28044
0b1d8     2C 02 90 5D |  if_ne	jmp	#LR__0963
0b1dc     38 00 00 FF 
0b1e0     C4 65 06 F1 | 	add	objptr, ##29124
0b1e4     32 97 02 FB | 	rdlong	arg03, objptr
0b1e8     03 96 66 F0 | 	shl	arg03, #3
0b1ec     02 00 00 FF 
0b1f0     38 64 86 F1 | 	sub	objptr, ##1080
0b1f4     32 97 02 F1 | 	add	arg03, objptr
0b1f8     4B 93 02 FB | 	rdlong	arg01, arg03
0b1fc     00 94 06 F6 | 	mov	arg02, #0
0b200     36 00 00 FF 
0b204     8C 65 86 F1 | 	sub	objptr, ##28044
0b208     50 C8 B1 FD | 	call	#__system____builtin_atoi
0b20c     3D AD 02 F6 | 	mov	local04, result1
0b210     4B 00 00 FF 
0b214     FC 65 06 F1 | 	add	objptr, ##38908
0b218     32 AF 02 FB | 	rdlong	local05, objptr
0b21c     57 B1 02 F6 | 	mov	local06, local05
0b220     01 B0 66 F0 | 	shl	local06, #1
0b224     57 B1 02 F1 | 	add	local06, local05
0b228     02 B0 66 F0 | 	shl	local06, #2
0b22c     03 00 00 FF 
0b230     00 64 86 F1 | 	sub	objptr, ##1536
0b234     32 B3 02 F6 | 	mov	local07, objptr
0b238     32 B1 02 F1 | 	add	local06, objptr
0b23c     08 B0 06 F1 | 	add	local06, #8
0b240     58 9D 68 FC | 	wrlong	#78, local06
0b244     03 00 00 FF 
0b248     0C 64 06 F1 | 	add	objptr, ##1548
0b24c     32 B5 02 FB | 	rdlong	local08, objptr
0b250                 | '   gotoline=val%(lparts(ct).part$) 
0b250                 | '   compiledline(lineptr).result_type=token_fast_goto
0b250                 | '   gotoptr=programstart 							    	' now try to find a pointer to goto
0b250                 | '   do
0b250     40 00 00 FF 
0b254     3C 65 86 F1 | 	sub	objptr, ##33084
0b258                 | LR__0960
0b258     E7 92 02 F6 | 	mov	arg01, fp
0b25c     10 92 06 F1 | 	add	arg01, #16
0b260     5A 95 02 F6 | 	mov	arg02, local08
0b264     18 96 06 F6 | 	mov	arg03, #24
0b268     28 8B B1 FD | 	call	#_psram_spin2_read1
0b26c                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
0b26c                 | '     if gotoheader(0)<>$FFFFFFFF then
0b26c     10 CE 05 F1 | 	add	fp, #16
0b270     E7 B0 02 FB | 	rdlong	local06, fp
0b274     10 CE 85 F1 | 	sub	fp, #16
0b278     FF FF 7F FF 
0b27c     FF B1 0E F2 | 	cmp	local06, ##-1 wz
0b280     5A B7 02 56 |  if_ne	mov	local09, local08
0b284     24 CE 05 51 |  if_ne	add	fp, #36
0b288     E7 B4 02 5B |  if_ne	rdlong	local08, fp
0b28c     24 CE 85 51 |  if_ne	sub	fp, #36
0b290     24 CE 05 F1 | 	add	fp, #36
0b294     E7 B0 02 FB | 	rdlong	local06, fp
0b298     24 CE 85 F1 | 	sub	fp, #36
0b29c     FF FF 3F FF 
0b2a0     FF B1 0E F2 | 	cmp	local06, ##2147483647 wz
0b2a4     10 CE 05 51 |  if_ne	add	fp, #16
0b2a8     E7 AE 02 5B |  if_ne	rdlong	local05, fp
0b2ac     10 CE 85 51 |  if_ne	sub	fp, #16
0b2b0     FF FF 7F 5F 
0b2b4     FF AF 0E 52 |  if_ne	cmp	local05, ##-1 wz
0b2b8     10 CE 05 51 |  if_ne	add	fp, #16
0b2bc     57 B3 02 56 |  if_ne	mov	local07, local05
0b2c0     10 CE 85 51 |  if_ne	sub	fp, #16
0b2c4     56 B3 0A 52 |  if_ne	cmp	local07, local04 wz
0b2c8     8C FF 9F 5D |  if_ne	jmp	#LR__0960
0b2cc     0B 00 00 FF 
0b2d0     CC 64 86 F1 | 	sub	objptr, ##5836
0b2d4                 | '   if gotoheader(0)=gotoline then
0b2d4     10 CE 05 F1 | 	add	fp, #16
0b2d8     E7 B0 02 FB | 	rdlong	local06, fp
0b2dc     10 CE 85 F1 | 	sub	fp, #16
0b2e0     56 B1 0A F2 | 	cmp	local06, local04 wz
0b2e4     68 00 90 5D |  if_ne	jmp	#LR__0961
0b2e8     4B 00 00 FF 
0b2ec     FC 65 06 F1 | 	add	objptr, ##38908
0b2f0     32 AF 02 FB | 	rdlong	local05, objptr
0b2f4     57 B1 02 F6 | 	mov	local06, local05
0b2f8     01 B0 66 F0 | 	shl	local06, #1
0b2fc     57 B1 02 F1 | 	add	local06, local05
0b300     02 B0 66 F0 | 	shl	local06, #2
0b304     03 00 00 FF 
0b308     00 64 86 F1 | 	sub	objptr, ##1536
0b30c     32 B1 02 F1 | 	add	local06, objptr
0b310     58 B7 62 FC | 	wrlong	local09, local06
0b314     03 00 00 FF 
0b318     00 64 06 F1 | 	add	objptr, ##1536
0b31c     32 AF 02 FB | 	rdlong	local05, objptr
0b320     57 B1 02 F6 | 	mov	local06, local05
0b324     01 B0 66 F0 | 	shl	local06, #1
0b328     57 B1 02 F1 | 	add	local06, local05
0b32c     02 B0 66 F0 | 	shl	local06, #2
0b330     03 00 00 FF 
0b334     00 64 86 F1 | 	sub	objptr, ##1536
0b338     32 B1 02 F1 | 	add	local06, objptr
0b33c     04 B0 06 F1 | 	add	local06, #4
0b340     58 AD 62 FC | 	wrlong	local04, local06
0b344     48 00 00 FF 
0b348     FC 65 86 F1 | 	sub	objptr, ##37372
0b34c     98 00 90 FD | 	jmp	#LR__0962
0b350                 | LR__0961
0b350     4B 00 00 FF 
0b354     FC 65 06 F1 | 	add	objptr, ##38908
0b358     32 AF 02 FB | 	rdlong	local05, objptr
0b35c     57 B1 02 F6 | 	mov	local06, local05
0b360     01 B0 66 F0 | 	shl	local06, #1
0b364     57 B1 02 F1 | 	add	local06, local05
0b368     02 B0 66 F0 | 	shl	local06, #2
0b36c     03 00 00 FF 
0b370     00 64 86 F1 | 	sub	objptr, ##1536
0b374     32 B1 02 F1 | 	add	local06, objptr
0b378     00 00 C0 FF 
0b37c     58 01 68 FC | 	wrlong	##-2147483648, local06
0b380     03 00 00 FF 
0b384     00 64 06 F1 | 	add	objptr, ##1536
0b388     32 AF 02 FB | 	rdlong	local05, objptr
0b38c     57 B1 02 F6 | 	mov	local06, local05
0b390     01 B0 66 F0 | 	shl	local06, #1
0b394     57 B1 02 F1 | 	add	local06, local05
0b398     02 B0 66 F0 | 	shl	local06, #2
0b39c     03 00 00 FF 
0b3a0     00 64 86 F1 | 	sub	objptr, ##1536
0b3a4     32 B1 02 F1 | 	add	local06, objptr
0b3a8     04 B0 06 F1 | 	add	local06, #4
0b3ac     58 AD 62 FC | 	wrlong	local04, local06
0b3b0     03 00 00 FF 
0b3b4     00 64 06 F1 | 	add	objptr, ##1536
0b3b8     32 AF 02 FB | 	rdlong	local05, objptr
0b3bc     57 B1 02 F6 | 	mov	local06, local05
0b3c0     01 B0 66 F0 | 	shl	local06, #1
0b3c4     57 B1 02 F1 | 	add	local06, local05
0b3c8     02 B0 66 F0 | 	shl	local06, #2
0b3cc     03 00 00 FF 
0b3d0     00 64 86 F1 | 	sub	objptr, ##1536
0b3d4     32 B1 02 F1 | 	add	local06, objptr
0b3d8     08 B0 06 F1 | 	add	local06, #8
0b3dc     58 A7 68 FC | 	wrlong	#83, local06
0b3e0     48 00 00 FF 
0b3e4     FC 65 86 F1 | 	sub	objptr, ##37372
0b3e8                 | LR__0962
0b3e8     4B 00 00 FF 
0b3ec     FC 65 06 F1 | 	add	objptr, ##38908
0b3f0     32 B7 02 FB | 	rdlong	local09, objptr
0b3f4     01 B6 06 F1 | 	add	local09, #1
0b3f8     32 B7 62 FC | 	wrlong	local09, objptr
0b3fc     4B 00 00 FF 
0b400     FC 65 86 F1 | 	sub	objptr, ##38908
0b404     BC 00 90 FD | 	jmp	#LR__0964
0b408                 | LR__0963
0b408     4C 0A B0 FD | 	call	#_expr
0b40c     4F AA 06 F6 | 	mov	local03, #79
0b410     00 A6 06 F6 | 	mov	local01, #0
0b414     54 B9 02 F6 | 	mov	local10, local02
0b418     55 AF 02 F6 | 	mov	local05, local03
0b41c     4B 00 00 FF 
0b420     FC 65 06 F1 | 	add	objptr, ##38908
0b424     32 A7 02 FB | 	rdlong	local01, objptr
0b428     53 B7 02 F6 | 	mov	local09, local01
0b42c     01 B6 66 F0 | 	shl	local09, #1
0b430     53 B7 02 F1 | 	add	local09, local01
0b434     02 B6 66 F0 | 	shl	local09, #2
0b438     03 00 00 FF 
0b43c     00 64 86 F1 | 	sub	objptr, ##1536
0b440     32 B7 02 F1 | 	add	local09, objptr
0b444     5B 01 68 FC | 	wrlong	#0, local09
0b448     03 00 00 FF 
0b44c     00 64 06 F1 | 	add	objptr, ##1536
0b450     32 A7 02 FB | 	rdlong	local01, objptr
0b454     53 B7 02 F6 | 	mov	local09, local01
0b458     01 B6 66 F0 | 	shl	local09, #1
0b45c     53 B7 02 F1 | 	add	local09, local01
0b460     02 B6 66 F0 | 	shl	local09, #2
0b464     03 00 00 FF 
0b468     00 64 86 F1 | 	sub	objptr, ##1536
0b46c     32 B7 02 F1 | 	add	local09, objptr
0b470     04 B6 06 F1 | 	add	local09, #4
0b474     5B B9 62 FC | 	wrlong	local10, local09
0b478     03 00 00 FF 
0b47c     00 64 06 F1 | 	add	objptr, ##1536
0b480     32 B9 02 FB | 	rdlong	local10, objptr
0b484     5C A7 02 F6 | 	mov	local01, local10
0b488     01 A6 66 F0 | 	shl	local01, #1
0b48c     5C A7 02 F1 | 	add	local01, local10
0b490     02 A6 66 F0 | 	shl	local01, #2
0b494     03 00 00 FF 
0b498     00 64 86 F1 | 	sub	objptr, ##1536
0b49c     32 A7 02 F1 | 	add	local01, objptr
0b4a0     08 A6 06 F1 | 	add	local01, #8
0b4a4     53 AF 62 FC | 	wrlong	local05, local01
0b4a8     03 00 00 FF 
0b4ac     00 64 06 F1 | 	add	objptr, ##1536
0b4b0     32 B9 02 FB | 	rdlong	local10, objptr
0b4b4     01 B8 06 F1 | 	add	local10, #1
0b4b8     32 B9 62 FC | 	wrlong	local10, objptr
0b4bc     4B 00 00 FF 
0b4c0     FC 65 86 F1 | 	sub	objptr, ##38908
0b4c4                 | LR__0964
0b4c4                 | ' return 0
0b4c4     00 7A 06 F6 | 	mov	result1, #0
0b4c8     E7 F0 03 F6 | 	mov	ptra, fp
0b4cc     F2 00 A0 FD | 	call	#popregs_
0b4d0                 | _compile_goto_ret
0b4d0     2D 00 64 FD | 	ret
0b4d4                 | 
0b4d4                 | ' 
0b4d4                 | ' '----- compile 'on' (on..goto, on..gosub) 
0b4d4                 | ' 
0b4d4                 | ' function compile_on() as ulong
0b4d4                 | _compile_on
0b4d4     04 CA 05 F6 | 	mov	COUNT_, #4
0b4d8     E8 00 A0 FD | 	call	#pushregs_
0b4dc     78 09 B0 FD | 	call	#_expr
0b4e0     00 A6 06 F6 | 	mov	local01, #0
0b4e4     4B 00 00 FF 
0b4e8     FC 65 06 F1 | 	add	objptr, ##38908
0b4ec     32 95 02 FB | 	rdlong	arg02, objptr
0b4f0     4A 93 02 F6 | 	mov	arg01, arg02
0b4f4     01 92 66 F0 | 	shl	arg01, #1
0b4f8     4A 93 02 F1 | 	add	arg01, arg02
0b4fc     02 92 66 F0 | 	shl	arg01, #2
0b500     03 00 00 FF 
0b504     00 64 86 F1 | 	sub	objptr, ##1536
0b508     32 93 02 F1 | 	add	arg01, objptr
0b50c     08 92 06 F1 | 	add	arg01, #8
0b510     49 83 69 FC | 	wrlong	#193, arg01
0b514     03 00 00 FF 
0b518     00 64 06 F1 | 	add	objptr, ##1536
0b51c     32 95 02 FB | 	rdlong	arg02, objptr
0b520     4A A9 02 F6 | 	mov	local02, arg02
0b524     01 94 06 F1 | 	add	arg02, #1
0b528     32 95 62 FC | 	wrlong	arg02, objptr
0b52c                 | ' expr()
0b52c                 | ' 'print lparts(ct).part$ 'ok
0b52c                 | ' numpar=0
0b52c                 | ' compiledline(lineptr).result_type=token_on : onlineptr=lineptr : lineptr+=1' we need onlineptr to save param# there
0b52c                 | ' if lparts(ct).part$="goto" then
0b52c     13 00 00 FF 
0b530     38 64 86 F1 | 	sub	objptr, ##9784
0b534     32 95 02 FB | 	rdlong	arg02, objptr
0b538     03 94 66 F0 | 	shl	arg02, #3
0b53c     02 00 00 FF 
0b540     38 64 86 F1 | 	sub	objptr, ##1080
0b544     32 95 02 F1 | 	add	arg02, objptr
0b548     4A 93 02 FB | 	rdlong	arg01, arg02
0b54c     97 01 00 FF 
0b550     C6 95 06 F6 | 	mov	arg02, ##@LR__5946
0b554     36 00 00 FF 
0b558     8C 65 86 F1 | 	sub	objptr, ##28044
0b55c     D0 97 B1 FD | 	call	#__system___string_cmp
0b560     00 7A 0E F2 | 	cmp	result1, #0 wz
0b564     FC 01 90 5D |  if_ne	jmp	#LR__0975
0b568     38 00 00 FF 
0b56c     C4 65 06 F1 | 	add	objptr, ##29124
0b570     32 AB 02 FB | 	rdlong	local03, objptr
0b574     38 00 00 FF 
0b578     C4 65 86 F1 | 	sub	objptr, ##29124
0b57c     01 AA 06 F1 | 	add	local03, #1
0b580                 | '   i=ct+1
0b580                 | '   do
0b580                 | LR__0970
0b580                 | '     if lparts(i).token=token_decimal then
0b580     55 7B 02 F6 | 	mov	result1, local03
0b584     03 7A 66 F0 | 	shl	result1, #3
0b588     32 95 02 F6 | 	mov	arg02, objptr
0b58c     36 00 00 FF 
0b590     8C 95 06 F1 | 	add	arg02, ##28044
0b594     4A 7B 02 F1 | 	add	result1, arg02
0b598     04 7A 06 F1 | 	add	result1, #4
0b59c     3D 7B 02 FB | 	rdlong	result1, result1
0b5a0     01 00 00 FF 
0b5a4     00 7A 0E F2 | 	cmp	result1, ##512 wz
0b5a8     DC 00 90 5D |  if_ne	jmp	#LR__0971
0b5ac     4B 00 00 FF 
0b5b0     FC 65 06 F1 | 	add	objptr, ##38908
0b5b4     32 7B 02 FB | 	rdlong	result1, objptr
0b5b8     3D 95 02 F6 | 	mov	arg02, result1
0b5bc     01 94 66 F0 | 	shl	arg02, #1
0b5c0     3D 95 02 F1 | 	add	arg02, result1
0b5c4     02 94 66 F0 | 	shl	arg02, #2
0b5c8     03 00 00 FF 
0b5cc     00 64 86 F1 | 	sub	objptr, ##1536
0b5d0     32 95 02 F1 | 	add	arg02, objptr
0b5d4     00 00 C0 FF 
0b5d8     4A 01 68 FC | 	wrlong	##-2147483648, arg02
0b5dc     03 00 00 FF 
0b5e0     00 64 06 F1 | 	add	objptr, ##1536
0b5e4     32 95 02 FB | 	rdlong	arg02, objptr
0b5e8     4A AD 02 F6 | 	mov	local04, arg02
0b5ec     01 AC 66 F0 | 	shl	local04, #1
0b5f0     4A AD 02 F1 | 	add	local04, arg02
0b5f4     02 AC 66 F0 | 	shl	local04, #2
0b5f8     03 00 00 FF 
0b5fc     00 64 86 F1 | 	sub	objptr, ##1536
0b600     32 AD 02 F1 | 	add	local04, objptr
0b604     55 95 02 F6 | 	mov	arg02, local03
0b608     03 94 66 F0 | 	shl	arg02, #3
0b60c     12 00 00 FF 
0b610     70 64 86 F1 | 	sub	objptr, ##9328
0b614     32 95 02 F1 | 	add	arg02, objptr
0b618     4A 93 02 FB | 	rdlong	arg01, arg02
0b61c     00 94 06 F6 | 	mov	arg02, #0
0b620     36 00 00 FF 
0b624     8C 65 86 F1 | 	sub	objptr, ##28044
0b628     30 C4 B1 FD | 	call	#__system____builtin_atoi
0b62c     04 AC 06 F1 | 	add	local04, #4
0b630     56 7B 62 FC | 	wrlong	result1, local04
0b634     4B 00 00 FF 
0b638     FC 65 06 F1 | 	add	objptr, ##38908
0b63c     32 95 02 FB | 	rdlong	arg02, objptr
0b640     4A AD 02 F6 | 	mov	local04, arg02
0b644     01 AC 66 F0 | 	shl	local04, #1
0b648     4A AD 02 F1 | 	add	local04, arg02
0b64c     02 AC 66 F0 | 	shl	local04, #2
0b650     03 00 00 FF 
0b654     00 64 86 F1 | 	sub	objptr, ##1536
0b658     32 AD 02 F1 | 	add	local04, objptr
0b65c     08 AC 06 F1 | 	add	local04, #8
0b660     56 A7 68 FC | 	wrlong	#83, local04
0b664     03 00 00 FF 
0b668     00 64 06 F1 | 	add	objptr, ##1536
0b66c     32 AD 02 FB | 	rdlong	local04, objptr
0b670     01 AC 06 F1 | 	add	local04, #1
0b674     32 AD 62 FC | 	wrlong	local04, objptr
0b678     4B 00 00 FF 
0b67c     FC 65 86 F1 | 	sub	objptr, ##38908
0b680     01 A6 06 F1 | 	add	local01, #1
0b684     08 00 90 FD | 	jmp	#LR__0972
0b688                 | LR__0971
0b688                 | '       return 17
0b688     11 7A 06 F6 | 	mov	result1, #17
0b68c     2C 04 90 FD | 	jmp	#LR__0985
0b690                 | LR__0972
0b690     01 AA 06 F1 | 	add	local03, #1
0b694                 | '     i+=1
0b694                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0b694     55 93 02 F6 | 	mov	arg01, local03
0b698     03 92 66 F0 | 	shl	arg01, #3
0b69c     32 AD 02 F6 | 	mov	local04, objptr
0b6a0     36 00 00 FF 
0b6a4     8C AD 06 F1 | 	add	local04, ##28044
0b6a8     56 93 02 F1 | 	add	arg01, local04
0b6ac     04 92 06 F1 | 	add	arg01, #4
0b6b0     49 93 02 FB | 	rdlong	arg01, arg01
0b6b4     11 92 0E F2 | 	cmp	arg01, #17 wz
0b6b8     2C 00 90 AD |  if_e	jmp	#LR__0973
0b6bc     55 93 02 F6 | 	mov	arg01, local03
0b6c0     03 92 66 F0 | 	shl	arg01, #3
0b6c4     32 AD 02 F6 | 	mov	local04, objptr
0b6c8     36 00 00 FF 
0b6cc     8C AD 06 F1 | 	add	local04, ##28044
0b6d0     56 93 02 F1 | 	add	arg01, local04
0b6d4     04 92 06 F1 | 	add	arg01, #4
0b6d8     49 AD 02 FB | 	rdlong	local04, arg01
0b6dc     FE AD 0E F2 | 	cmp	local04, #510 wz
0b6e0     15 7A 06 56 |  if_ne	mov	result1, #21
0b6e4     D4 03 90 5D |  if_ne	jmp	#LR__0985
0b6e8                 | LR__0973
0b6e8                 | '     if lparts(i).token=token_end then exit loop
0b6e8     55 7B 02 F6 | 	mov	result1, local03
0b6ec     03 7A 66 F0 | 	shl	result1, #3
0b6f0     32 AD 02 F6 | 	mov	local04, objptr
0b6f4     36 00 00 FF 
0b6f8     8C AD 06 F1 | 	add	local04, ##28044
0b6fc     56 7B 02 F1 | 	add	result1, local04
0b700     04 7A 06 F1 | 	add	result1, #4
0b704     3D 7B 02 FB | 	rdlong	result1, result1
0b708     FE 7B 0E F2 | 	cmp	result1, #510 wz
0b70c     2C 00 90 AD |  if_e	jmp	#LR__0974
0b710     01 AA 06 F1 | 	add	local03, #1
0b714     55 7B 02 F6 | 	mov	result1, local03
0b718     03 7A 66 F0 | 	shl	result1, #3
0b71c     32 AD 02 F6 | 	mov	local04, objptr
0b720     36 00 00 FF 
0b724     8C AD 06 F1 | 	add	local04, ##28044
0b728     56 7B 02 F1 | 	add	result1, local04
0b72c     04 7A 06 F1 | 	add	result1, #4
0b730     3D 7B 02 FB | 	rdlong	result1, result1
0b734     FE 7B 0E F2 | 	cmp	result1, #510 wz
0b738     44 FE 9F 5D |  if_ne	jmp	#LR__0970
0b73c                 | LR__0974
0b73c     54 AB 02 F6 | 	mov	local03, local02
0b740     01 AA 66 F0 | 	shl	local03, #1
0b744     54 AB 02 F1 | 	add	local03, local02
0b748     02 AA 66 F0 | 	shl	local03, #2
0b74c     32 AD 02 F6 | 	mov	local04, objptr
0b750     48 00 00 FF 
0b754     FC AD 06 F1 | 	add	local04, ##37372
0b758     56 AB 02 F1 | 	add	local03, local04
0b75c     04 AA 06 F1 | 	add	local03, #4
0b760     55 03 68 FC | 	wrlong	#1, local03
0b764                 | LR__0975
0b764                 | ' 
0b764                 | ' if lparts(ct).part$="gosub" then
0b764     38 00 00 FF 
0b768     C4 65 06 F1 | 	add	objptr, ##29124
0b76c     32 AB 02 FB | 	rdlong	local03, objptr
0b770     03 AA 66 F0 | 	shl	local03, #3
0b774     02 00 00 FF 
0b778     38 64 86 F1 | 	sub	objptr, ##1080
0b77c     32 AB 02 F1 | 	add	local03, objptr
0b780     55 93 02 FB | 	rdlong	arg01, local03
0b784     97 01 00 FF 
0b788     CB 95 06 F6 | 	mov	arg02, ##@LR__5947
0b78c     36 00 00 FF 
0b790     8C 65 86 F1 | 	sub	objptr, ##28044
0b794     98 95 B1 FD | 	call	#__system___string_cmp
0b798     00 7A 0E F2 | 	cmp	result1, #0 wz
0b79c     6C 02 90 5D |  if_ne	jmp	#LR__0981
0b7a0     38 00 00 FF 
0b7a4     C4 65 06 F1 | 	add	objptr, ##29124
0b7a8     32 AB 02 FB | 	rdlong	local03, objptr
0b7ac     38 00 00 FF 
0b7b0     C4 65 86 F1 | 	sub	objptr, ##29124
0b7b4     01 AA 06 F1 | 	add	local03, #1
0b7b8                 | '   i=ct+1
0b7b8                 | '   do
0b7b8                 | LR__0976
0b7b8                 | '     if lparts(i).token=token_decimal then
0b7b8     55 7B 02 F6 | 	mov	result1, local03
0b7bc     03 7A 66 F0 | 	shl	result1, #3
0b7c0     32 AD 02 F6 | 	mov	local04, objptr
0b7c4     36 00 00 FF 
0b7c8     8C AD 06 F1 | 	add	local04, ##28044
0b7cc     56 7B 02 F1 | 	add	result1, local04
0b7d0     04 7A 06 F1 | 	add	result1, #4
0b7d4     3D 7B 02 FB | 	rdlong	result1, result1
0b7d8     01 00 00 FF 
0b7dc     00 7A 0E F2 | 	cmp	result1, ##512 wz
0b7e0     4C 01 90 5D |  if_ne	jmp	#LR__0977
0b7e4     4B 00 00 FF 
0b7e8     FC 65 06 F1 | 	add	objptr, ##38908
0b7ec     32 7B 02 FB | 	rdlong	result1, objptr
0b7f0     3D AD 02 F6 | 	mov	local04, result1
0b7f4     01 AC 66 F0 | 	shl	local04, #1
0b7f8     3D AD 02 F1 | 	add	local04, result1
0b7fc     02 AC 66 F0 | 	shl	local04, #2
0b800     03 00 00 FF 
0b804     00 64 86 F1 | 	sub	objptr, ##1536
0b808     32 AD 02 F1 | 	add	local04, objptr
0b80c     08 AC 06 F1 | 	add	local04, #8
0b810     56 53 69 FC | 	wrlong	#169, local04
0b814     03 00 00 FF 
0b818     00 64 06 F1 | 	add	objptr, ##1536
0b81c     32 7B 02 FB | 	rdlong	result1, objptr
0b820     01 7A 06 F1 | 	add	result1, #1
0b824     32 7B 62 FC | 	wrlong	result1, objptr
0b828     3D AD 02 F6 | 	mov	local04, result1
0b82c     01 AC 66 F0 | 	shl	local04, #1
0b830     3D AD 02 F1 | 	add	local04, result1
0b834     02 AC 66 F0 | 	shl	local04, #2
0b838     03 00 00 FF 
0b83c     00 64 86 F1 | 	sub	objptr, ##1536
0b840     32 AD 02 F1 | 	add	local04, objptr
0b844     00 00 C0 FF 
0b848     56 01 68 FC | 	wrlong	##-2147483648, local04
0b84c     03 00 00 FF 
0b850     00 64 06 F1 | 	add	objptr, ##1536
0b854     32 7B 02 FB | 	rdlong	result1, objptr
0b858     3D AD 02 F6 | 	mov	local04, result1
0b85c     01 AC 66 F0 | 	shl	local04, #1
0b860     3D AD 02 F1 | 	add	local04, result1
0b864     02 AC 66 F0 | 	shl	local04, #2
0b868     03 00 00 FF 
0b86c     00 64 86 F1 | 	sub	objptr, ##1536
0b870     32 AD 02 F1 | 	add	local04, objptr
0b874     55 93 02 F6 | 	mov	arg01, local03
0b878     03 92 66 F0 | 	shl	arg01, #3
0b87c     12 00 00 FF 
0b880     70 64 86 F1 | 	sub	objptr, ##9328
0b884     32 93 02 F1 | 	add	arg01, objptr
0b888     49 93 02 FB | 	rdlong	arg01, arg01
0b88c     00 94 06 F6 | 	mov	arg02, #0
0b890     36 00 00 FF 
0b894     8C 65 86 F1 | 	sub	objptr, ##28044
0b898     C0 C1 B1 FD | 	call	#__system____builtin_atoi
0b89c     04 AC 06 F1 | 	add	local04, #4
0b8a0     56 7B 62 FC | 	wrlong	result1, local04
0b8a4     4B 00 00 FF 
0b8a8     FC 65 06 F1 | 	add	objptr, ##38908
0b8ac     32 93 02 FB | 	rdlong	arg01, objptr
0b8b0     49 AD 02 F6 | 	mov	local04, arg01
0b8b4     01 AC 66 F0 | 	shl	local04, #1
0b8b8     49 AD 02 F1 | 	add	local04, arg01
0b8bc     02 AC 66 F0 | 	shl	local04, #2
0b8c0     03 00 00 FF 
0b8c4     00 64 86 F1 | 	sub	objptr, ##1536
0b8c8     32 AD 02 F1 | 	add	local04, objptr
0b8cc     08 AC 06 F1 | 	add	local04, #8
0b8d0     56 A7 68 FC | 	wrlong	#83, local04
0b8d4     03 00 00 FF 
0b8d8     00 64 06 F1 | 	add	objptr, ##1536
0b8dc     32 93 02 FB | 	rdlong	arg01, objptr
0b8e0     01 92 06 F1 | 	add	arg01, #1
0b8e4     32 93 62 FC | 	wrlong	arg01, objptr
0b8e8     01 A6 06 F1 | 	add	local01, #1
0b8ec     49 AD 02 F6 | 	mov	local04, arg01
0b8f0     01 AC 66 F0 | 	shl	local04, #1
0b8f4     49 AD 02 F1 | 	add	local04, arg01
0b8f8     02 AC 66 F0 | 	shl	local04, #2
0b8fc     03 00 00 FF 
0b900     00 64 86 F1 | 	sub	objptr, ##1536
0b904     32 AD 02 F1 | 	add	local04, objptr
0b908     08 AC 06 F1 | 	add	local04, #8
0b90c     56 5B 68 FC | 	wrlong	#45, local04
0b910     03 00 00 FF 
0b914     00 64 06 F1 | 	add	objptr, ##1536
0b918     32 AD 02 FB | 	rdlong	local04, objptr
0b91c     01 AC 06 F1 | 	add	local04, #1
0b920     32 AD 62 FC | 	wrlong	local04, objptr
0b924     4B 00 00 FF 
0b928     FC 65 86 F1 | 	sub	objptr, ##38908
0b92c     08 00 90 FD | 	jmp	#LR__0978
0b930                 | LR__0977
0b930                 | '       return 17
0b930     11 7A 06 F6 | 	mov	result1, #17
0b934     84 01 90 FD | 	jmp	#LR__0985
0b938                 | LR__0978
0b938     01 AA 06 F1 | 	add	local03, #1
0b93c                 | '     i+=1
0b93c                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0b93c     55 93 02 F6 | 	mov	arg01, local03
0b940     03 92 66 F0 | 	shl	arg01, #3
0b944     32 AD 02 F6 | 	mov	local04, objptr
0b948     36 00 00 FF 
0b94c     8C AD 06 F1 | 	add	local04, ##28044
0b950     56 93 02 F1 | 	add	arg01, local04
0b954     04 92 06 F1 | 	add	arg01, #4
0b958     49 93 02 FB | 	rdlong	arg01, arg01
0b95c     11 92 0E F2 | 	cmp	arg01, #17 wz
0b960     2C 00 90 AD |  if_e	jmp	#LR__0979
0b964     55 93 02 F6 | 	mov	arg01, local03
0b968     03 92 66 F0 | 	shl	arg01, #3
0b96c     32 AD 02 F6 | 	mov	local04, objptr
0b970     36 00 00 FF 
0b974     8C AD 06 F1 | 	add	local04, ##28044
0b978     56 93 02 F1 | 	add	arg01, local04
0b97c     04 92 06 F1 | 	add	arg01, #4
0b980     49 93 02 FB | 	rdlong	arg01, arg01
0b984     FE 93 0E F2 | 	cmp	arg01, #510 wz
0b988     15 7A 06 56 |  if_ne	mov	result1, #21
0b98c     2C 01 90 5D |  if_ne	jmp	#LR__0985
0b990                 | LR__0979
0b990                 | '     if lparts(i).token=token_end then exit loop
0b990     55 7B 02 F6 | 	mov	result1, local03
0b994     03 7A 66 F0 | 	shl	result1, #3
0b998     32 AD 02 F6 | 	mov	local04, objptr
0b99c     36 00 00 FF 
0b9a0     8C AD 06 F1 | 	add	local04, ##28044
0b9a4     56 7B 02 F1 | 	add	result1, local04
0b9a8     04 7A 06 F1 | 	add	result1, #4
0b9ac     3D 7B 02 FB | 	rdlong	result1, result1
0b9b0     FE 7B 0E F2 | 	cmp	result1, #510 wz
0b9b4     2C 00 90 AD |  if_e	jmp	#LR__0980
0b9b8     01 AA 06 F1 | 	add	local03, #1
0b9bc     55 7B 02 F6 | 	mov	result1, local03
0b9c0     03 7A 66 F0 | 	shl	result1, #3
0b9c4     32 AD 02 F6 | 	mov	local04, objptr
0b9c8     36 00 00 FF 
0b9cc     8C AD 06 F1 | 	add	local04, ##28044
0b9d0     56 7B 02 F1 | 	add	result1, local04
0b9d4     04 7A 06 F1 | 	add	result1, #4
0b9d8     3D 7B 02 FB | 	rdlong	result1, result1
0b9dc     FE 7B 0E F2 | 	cmp	result1, #510 wz
0b9e0     D4 FD 9F 5D |  if_ne	jmp	#LR__0976
0b9e4                 | LR__0980
0b9e4     54 AB 02 F6 | 	mov	local03, local02
0b9e8     01 AA 66 F0 | 	shl	local03, #1
0b9ec     54 AB 02 F1 | 	add	local03, local02
0b9f0     02 AA 66 F0 | 	shl	local03, #2
0b9f4     32 AD 02 F6 | 	mov	local04, objptr
0b9f8     48 00 00 FF 
0b9fc     FC AD 06 F1 | 	add	local04, ##37372
0ba00     56 AB 02 F1 | 	add	local03, local04
0ba04     04 AA 06 F1 | 	add	local03, #4
0ba08     55 07 68 FC | 	wrlong	#3, local03
0ba0c                 | LR__0981
0ba0c     54 AB 02 F6 | 	mov	local03, local02
0ba10     01 AA 66 F0 | 	shl	local03, #1
0ba14     54 AB 02 F1 | 	add	local03, local02
0ba18     02 AA 66 F0 | 	shl	local03, #2
0ba1c     48 00 00 FF 
0ba20     FC 65 06 F1 | 	add	objptr, ##37372
0ba24     32 AB 02 F1 | 	add	local03, objptr
0ba28     55 A7 62 FC | 	wrlong	local01, local03
0ba2c                 | ' compiledline(onlineptr).result.uresult=numpar
0ba2c                 | ' for i=lineptr to onlineptr step -1 : if compiledline(i).result_type=token_skip then compiledline(i).result.uresult=lineptr-2
0ba2c     03 00 00 FF 
0ba30     00 64 06 F1 | 	add	objptr, ##1536
0ba34     32 AB 02 FB | 	rdlong	local03, objptr
0ba38     4B 00 00 FF 
0ba3c     FC 65 86 F1 | 	sub	objptr, ##38908
0ba40     D7 3A 48 FB | 	callpa	#(@LR__0984-@LR__0982)>>2,fcache_load_ptr_
0ba44                 | LR__0982
0ba44     55 AD 02 F6 | 	mov	local04, local03
0ba48     01 AC 66 F0 | 	shl	local04, #1
0ba4c     55 AD 02 F1 | 	add	local04, local03
0ba50     02 AC 66 F0 | 	shl	local04, #2
0ba54     32 A7 02 F6 | 	mov	local01, objptr
0ba58     48 00 00 FF 
0ba5c     FC A7 06 F1 | 	add	local01, ##37372
0ba60     53 AD 02 F1 | 	add	local04, local01
0ba64     08 AC 06 F1 | 	add	local04, #8
0ba68     56 AD 02 FB | 	rdlong	local04, local04
0ba6c     2D AC 0E F2 | 	cmp	local04, #45 wz
0ba70     38 00 90 5D |  if_ne	jmp	#LR__0983
0ba74     55 AD 02 F6 | 	mov	local04, local03
0ba78     01 AC 66 F0 | 	shl	local04, #1
0ba7c     55 AD 02 F1 | 	add	local04, local03
0ba80     02 AC 66 F0 | 	shl	local04, #2
0ba84     48 00 00 FF 
0ba88     FC 65 06 F1 | 	add	objptr, ##37372
0ba8c     32 AD 02 F1 | 	add	local04, objptr
0ba90     03 00 00 FF 
0ba94     00 64 06 F1 | 	add	objptr, ##1536
0ba98     32 A7 02 FB | 	rdlong	local01, objptr
0ba9c     4B 00 00 FF 
0baa0     FC 65 86 F1 | 	sub	objptr, ##38908
0baa4     02 A6 86 F1 | 	sub	local01, #2
0baa8     56 A7 62 FC | 	wrlong	local01, local04
0baac                 | LR__0983
0baac     01 AA 86 F1 | 	sub	local03, #1
0bab0     54 AB 52 F2 | 	cmps	local03, local02 wc
0bab4     8C FF 9F 3D |  if_ae	jmp	#LR__0982
0bab8                 | LR__0984
0bab8                 | ' return 0
0bab8     00 7A 06 F6 | 	mov	result1, #0
0babc                 | LR__0985
0babc     E7 F0 03 F6 | 	mov	ptra, fp
0bac0     F2 00 A0 FD | 	call	#popregs_
0bac4                 | _compile_on_ret
0bac4     2D 00 64 FD | 	ret
0bac8                 | 
0bac8                 | ' 
0bac8                 | ' '----- A helper for compile_input and compile_read
0bac8                 | '  
0bac8                 | ' function getaddr() as ulong
0bac8                 | _getaddr
0bac8     0B CA 05 F6 | 	mov	COUNT_, #11
0bacc     E8 00 A0 FD | 	call	#pushregs_
0bad0     38 00 00 FF 
0bad4     C4 65 06 F1 | 	add	objptr, ##29124
0bad8     32 AD 02 FB | 	rdlong	local04, objptr
0badc     03 AC 66 F0 | 	shl	local04, #3
0bae0     02 00 00 FF 
0bae4     38 64 86 F1 | 	sub	objptr, ##1080
0bae8     32 AD 02 F1 | 	add	local04, objptr
0baec     56 AF 02 FB | 	rdlong	local05, local04
0baf0     01 B0 66 F6 | 	neg	local06, #1
0baf4                 | ' 
0baf4                 | ' varname$=lparts(ct).part$
0baf4                 | ' j=-1
0baf4                 | ' 
0baf4                 | ' for i=0 to varnum-1
0baf4     00 B2 06 F6 | 	mov	local07, #0
0baf8     04 64 86 F1 | 	sub	objptr, #4
0bafc     32 B5 02 FB | 	rdlong	local08, objptr
0bb00     36 00 00 FF 
0bb04     88 65 86 F1 | 	sub	objptr, ##28040
0bb08                 | LR__0990
0bb08     5A B3 52 F2 | 	cmps	local07, local08 wc
0bb0c     34 00 90 3D |  if_ae	jmp	#LR__0991
0bb10                 | '   if variables(i).name=varname$ then j=i : exit
0bb10     59 AD 02 F6 | 	mov	local04, local07
0bb14     04 AC 66 F0 | 	shl	local04, #4
0bb18     32 95 02 F6 | 	mov	arg02, objptr
0bb1c     16 00 00 FF 
0bb20     78 95 06 F1 | 	add	arg02, ##11640
0bb24     4A AD 02 F1 | 	add	local04, arg02
0bb28     56 93 02 FB | 	rdlong	arg01, local04
0bb2c     57 95 02 F6 | 	mov	arg02, local05
0bb30     FC 91 B1 FD | 	call	#__system___string_cmp
0bb34     00 7A 0E F2 | 	cmp	result1, #0 wz
0bb38     59 B1 02 A6 |  if_e	mov	local06, local07
0bb3c     01 B2 06 51 |  if_ne	add	local07, #1
0bb40     C4 FF 9F 5D |  if_ne	jmp	#LR__0990
0bb44                 | LR__0991
0bb44                 | ' if  j=-1 andalso varnum<maxvars then   
0bb44     FF FF 7F FF 
0bb48     FF B1 0E F2 | 	cmp	local06, ##-1 wz
0bb4c     A8 00 90 5D |  if_ne	jmp	#LR__0992
0bb50     36 00 00 FF 
0bb54     88 65 06 F1 | 	add	objptr, ##28040
0bb58     32 B5 02 FB | 	rdlong	local08, objptr
0bb5c     36 00 00 FF 
0bb60     88 65 86 F1 | 	sub	objptr, ##28040
0bb64     02 00 00 FF 
0bb68     00 B4 56 F2 | 	cmps	local08, ##1024 wc
0bb6c     88 00 90 3D |  if_ae	jmp	#LR__0992
0bb70     36 00 00 FF 
0bb74     88 65 06 F1 | 	add	objptr, ##28040
0bb78     32 AD 02 FB | 	rdlong	local04, objptr
0bb7c     04 AC 66 F0 | 	shl	local04, #4
0bb80     20 00 00 FF 
0bb84     10 64 86 F1 | 	sub	objptr, ##16400
0bb88     32 AD 02 F1 | 	add	local04, objptr
0bb8c     56 AF 62 FC | 	wrlong	local05, local04
0bb90     20 00 00 FF 
0bb94     10 64 06 F1 | 	add	objptr, ##16400
0bb98     32 AD 02 FB | 	rdlong	local04, objptr
0bb9c     04 AC 66 F0 | 	shl	local04, #4
0bba0     20 00 00 FF 
0bba4     10 64 86 F1 | 	sub	objptr, ##16400
0bba8     32 AD 02 F1 | 	add	local04, objptr
0bbac     04 AC 06 F1 | 	add	local04, #4
0bbb0     56 01 68 FC | 	wrlong	#0, local04
0bbb4     20 00 00 FF 
0bbb8     10 64 06 F1 | 	add	objptr, ##16400
0bbbc     32 AD 02 FB | 	rdlong	local04, objptr
0bbc0     04 AC 66 F0 | 	shl	local04, #4
0bbc4     20 00 00 FF 
0bbc8     10 64 86 F1 | 	sub	objptr, ##16400
0bbcc     32 AD 02 F1 | 	add	local04, objptr
0bbd0     0C AC 06 F1 | 	add	local04, #12
0bbd4     56 39 68 FC | 	wrlong	#28, local04
0bbd8     20 00 00 FF 
0bbdc     10 64 06 F1 | 	add	objptr, ##16400
0bbe0     32 B5 02 FB | 	rdlong	local08, objptr
0bbe4     5A B1 02 F6 | 	mov	local06, local08
0bbe8     01 B4 06 F1 | 	add	local08, #1
0bbec     32 B5 62 FC | 	wrlong	local08, objptr
0bbf0     36 00 00 FF 
0bbf4     88 65 86 F1 | 	sub	objptr, ##28040
0bbf8                 | LR__0992
0bbf8     00 B2 06 F6 | 	mov	local07, #0
0bbfc                 | ' numpar=0
0bbfc                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0bbfc     38 00 00 FF 
0bc00     C4 65 06 F1 | 	add	objptr, ##29124
0bc04     32 AD 02 FB | 	rdlong	local04, objptr
0bc08     01 AC 06 F1 | 	add	local04, #1
0bc0c     03 AC 66 F0 | 	shl	local04, #3
0bc10     02 00 00 FF 
0bc14     38 64 86 F1 | 	sub	objptr, ##1080
0bc18     32 AD 02 F1 | 	add	local04, objptr
0bc1c     04 AC 06 F1 | 	add	local04, #4
0bc20     56 B5 02 FB | 	rdlong	local08, local04
0bc24     15 B4 0E F2 | 	cmp	local08, #21 wz
0bc28     36 00 00 FF 
0bc2c     8C 65 86 F1 | 	sub	objptr, ##28044
0bc30     54 01 90 5D |  if_ne	jmp	#LR__0997
0bc34     38 00 00 FF 
0bc38     C4 65 06 F1 | 	add	objptr, ##29124
0bc3c     32 B7 02 FB | 	rdlong	local09, objptr
0bc40     01 B6 06 F1 | 	add	local09, #1
0bc44     32 B7 62 FC | 	wrlong	local09, objptr
0bc48     38 00 00 FF 
0bc4c     C4 65 86 F1 | 	sub	objptr, ##29124
0bc50                 | '   ct+=1 											' omit this lpar, this is for expr list
0bc50                 | '   do
0bc50                 | LR__0993
0bc50     38 00 00 FF 
0bc54     C4 65 06 F1 | 	add	objptr, ##29124
0bc58     32 AD 02 FB | 	rdlong	local04, objptr
0bc5c     01 AC 06 F1 | 	add	local04, #1
0bc60     32 AD 62 FC | 	wrlong	local04, objptr
0bc64                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0bc64                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0bc64     03 AC 66 F0 | 	shl	local04, #3
0bc68     02 00 00 FF 
0bc6c     38 64 86 F1 | 	sub	objptr, ##1080
0bc70     32 AD 02 F1 | 	add	local04, objptr
0bc74     04 AC 06 F1 | 	add	local04, #4
0bc78     56 B7 02 FB | 	rdlong	local09, local04
0bc7c     15 B6 0E F2 | 	cmp	local09, #21 wz
0bc80     36 00 00 FF 
0bc84     8C 65 86 F1 | 	sub	objptr, ##28044
0bc88     44 00 90 5D |  if_ne	jmp	#LR__0994
0bc8c     38 00 00 FF 
0bc90     C4 65 06 F1 | 	add	objptr, ##29124
0bc94     32 B7 02 FB | 	rdlong	local09, objptr
0bc98     01 B6 06 F1 | 	add	local09, #1
0bc9c     32 B7 62 FC | 	wrlong	local09, objptr
0bca0     38 00 00 FF 
0bca4     C4 65 86 F1 | 	sub	objptr, ##29124
0bca8     AC 01 B0 FD | 	call	#_expr
0bcac     3D B9 02 F6 | 	mov	local10, result1
0bcb0     38 00 00 FF 
0bcb4     C4 65 06 F1 | 	add	objptr, ##29124
0bcb8     32 B7 02 FB | 	rdlong	local09, objptr
0bcbc     01 B6 06 F1 | 	add	local09, #1
0bcc0     32 B7 62 FC | 	wrlong	local09, objptr
0bcc4     38 00 00 FF 
0bcc8     C4 65 86 F1 | 	sub	objptr, ##29124
0bccc     08 00 90 FD | 	jmp	#LR__0995
0bcd0                 | LR__0994
0bcd0     84 01 B0 FD | 	call	#_expr
0bcd4     3D B9 02 F6 | 	mov	local10, result1
0bcd8                 | LR__0995
0bcd8                 | '     if err>0 then return err
0bcd8     01 B8 56 F2 | 	cmps	local10, #1 wc
0bcdc     5C 7B 02 36 |  if_ae	mov	result1, local10
0bce0     68 01 90 3D |  if_ae	jmp	#LR__0998
0bce4     01 B2 06 F1 | 	add	local07, #1
0bce8     38 00 00 FF 
0bcec     C4 65 06 F1 | 	add	objptr, ##29124
0bcf0     32 AD 02 FB | 	rdlong	local04, objptr
0bcf4     03 AC 66 F0 | 	shl	local04, #3
0bcf8     02 00 00 FF 
0bcfc     38 64 86 F1 | 	sub	objptr, ##1080
0bd00     32 AD 02 F1 | 	add	local04, objptr
0bd04     04 AC 06 F1 | 	add	local04, #4
0bd08     56 B9 02 FB | 	rdlong	local10, local04
0bd0c     14 B8 0E F2 | 	cmp	local10, #20 wz
0bd10     36 00 00 FF 
0bd14     8C 65 86 F1 | 	sub	objptr, ##28044
0bd18     34 00 90 AD |  if_e	jmp	#LR__0996
0bd1c     38 00 00 FF 
0bd20     C4 65 06 F1 | 	add	objptr, ##29124
0bd24     32 B9 02 FB | 	rdlong	local10, objptr
0bd28     03 B8 66 F0 | 	shl	local10, #3
0bd2c     02 00 00 FF 
0bd30     38 64 86 F1 | 	sub	objptr, ##1080
0bd34     32 B9 02 F1 | 	add	local10, objptr
0bd38     04 B8 06 F1 | 	add	local10, #4
0bd3c     5C B9 02 FB | 	rdlong	local10, local10
0bd40     FE B9 0E F2 | 	cmp	local10, #510 wz
0bd44     36 00 00 FF 
0bd48     8C 65 86 F1 | 	sub	objptr, ##28044
0bd4c     00 FF 9F 5D |  if_ne	jmp	#LR__0993
0bd50                 | LR__0996
0bd50                 | '     if lparts(ct).token=token_end then return 14
0bd50     38 00 00 FF 
0bd54     C4 65 06 F1 | 	add	objptr, ##29124
0bd58     32 AD 02 FB | 	rdlong	local04, objptr
0bd5c     03 AC 66 F0 | 	shl	local04, #3
0bd60     02 00 00 FF 
0bd64     38 64 86 F1 | 	sub	objptr, ##1080
0bd68     32 AD 02 F1 | 	add	local04, objptr
0bd6c     04 AC 06 F1 | 	add	local04, #4
0bd70     56 B9 02 FB | 	rdlong	local10, local04
0bd74     FE B9 0E F2 | 	cmp	local10, #510 wz
0bd78     36 00 00 FF 
0bd7c     8C 65 86 F1 | 	sub	objptr, ##28044
0bd80     0E 7A 06 A6 |  if_e	mov	result1, #14
0bd84     C4 00 90 AD |  if_e	jmp	#LR__0998
0bd88                 | LR__0997
0bd88     59 A9 02 F6 | 	mov	local02, local07
0bd8c     12 AA 06 F6 | 	mov	local03, #18
0bd90     58 A7 02 F6 | 	mov	local01, local06
0bd94     53 B7 02 F6 | 	mov	local09, local01
0bd98     54 BB 02 F6 | 	mov	local11, local02
0bd9c     55 A7 02 F6 | 	mov	local01, local03
0bda0     4B 00 00 FF 
0bda4     FC 65 06 F1 | 	add	objptr, ##38908
0bda8     32 B9 02 FB | 	rdlong	local10, objptr
0bdac     5C B3 02 F6 | 	mov	local07, local10
0bdb0     01 B2 66 F0 | 	shl	local07, #1
0bdb4     5C B3 02 F1 | 	add	local07, local10
0bdb8     02 B2 66 F0 | 	shl	local07, #2
0bdbc     03 00 00 FF 
0bdc0     00 64 86 F1 | 	sub	objptr, ##1536
0bdc4     32 B3 02 F1 | 	add	local07, objptr
0bdc8     59 B7 62 FC | 	wrlong	local09, local07
0bdcc     03 00 00 FF 
0bdd0     00 64 06 F1 | 	add	objptr, ##1536
0bdd4     32 B9 02 FB | 	rdlong	local10, objptr
0bdd8     5C B7 02 F6 | 	mov	local09, local10
0bddc     01 B6 66 F0 | 	shl	local09, #1
0bde0     5C B7 02 F1 | 	add	local09, local10
0bde4     02 B6 66 F0 | 	shl	local09, #2
0bde8     03 00 00 FF 
0bdec     00 64 86 F1 | 	sub	objptr, ##1536
0bdf0     32 B7 02 F1 | 	add	local09, objptr
0bdf4     04 B6 06 F1 | 	add	local09, #4
0bdf8     5B BB 62 FC | 	wrlong	local11, local09
0bdfc     03 00 00 FF 
0be00     00 64 06 F1 | 	add	objptr, ##1536
0be04     32 BB 02 FB | 	rdlong	local11, objptr
0be08     5D B9 02 F6 | 	mov	local10, local11
0be0c     01 B8 66 F0 | 	shl	local10, #1
0be10     5D B9 02 F1 | 	add	local10, local11
0be14     02 B8 66 F0 | 	shl	local10, #2
0be18     03 00 00 FF 
0be1c     00 64 86 F1 | 	sub	objptr, ##1536
0be20     32 B9 02 F1 | 	add	local10, objptr
0be24     08 B8 06 F1 | 	add	local10, #8
0be28     5C A7 62 FC | 	wrlong	local01, local10
0be2c     03 00 00 FF 
0be30     00 64 06 F1 | 	add	objptr, ##1536
0be34     32 B7 02 FB | 	rdlong	local09, objptr
0be38     01 B6 06 F1 | 	add	local09, #1
0be3c     32 B7 62 FC | 	wrlong	local09, objptr
0be40     4B 00 00 FF 
0be44     FC 65 86 F1 | 	sub	objptr, ##38908
0be48                 | ' t2.result.twowords(1)=numpar
0be48                 | ' t2.result_type=fun_getaddr:t2.result.twowords(0)=j
0be48                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0be48                 | ' return 0
0be48     00 7A 06 F6 | 	mov	result1, #0
0be4c                 | LR__0998
0be4c     E7 F0 03 F6 | 	mov	ptra, fp
0be50     F2 00 A0 FD | 	call	#popregs_
0be54                 | _getaddr_ret
0be54     2D 00 64 FD | 	ret
0be58                 | 
0be58                 | ' 
0be58                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0be58                 | ' '--------------------------------------------- 
0be58                 | ' 
0be58                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0be58                 | ' '------------------------------------------ The end of the precompiler  ----------------------------------------------------------------
0be58                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0be58                 | ' 
0be58                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0be58                 | ' '
0be58                 | ' '     			   	    COMPILE TIME EXPRESSION DECODER/EVALUATOR
0be58                 | ' '
0be58                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0be58                 | ' 
0be58                 | ' function expr() as ulong 
0be58                 | _expr
0be58     07 CA 05 F6 | 	mov	COUNT_, #7
0be5c     E8 00 A0 FD | 	call	#pushregs_
0be60                 | _expr_enter
0be60     38 00 00 FF 
0be64     C4 65 06 F1 | 	add	objptr, ##29124
0be68     32 AD 02 FB | 	rdlong	local04, objptr
0be6c     03 AC 66 F0 | 	shl	local04, #3
0be70     02 00 00 FF 
0be74     38 64 86 F1 | 	sub	objptr, ##1080
0be78     32 AD 02 F1 | 	add	local04, objptr
0be7c     04 AC 06 F1 | 	add	local04, #4
0be80     56 AF 02 FB | 	rdlong	local05, local04
0be84                 | ' 
0be84                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
0be84     FE AF 0E F2 | 	cmp	local05, #510 wz
0be88     36 00 00 FF 
0be8c     8C 65 86 F1 | 	sub	objptr, ##28044
0be90     C4 00 90 5D |  if_ne	jmp	#LR__1000
0be94     1D A6 06 F6 | 	mov	local01, #29
0be98     FF AA 06 F6 | 	mov	local03, #255
0be9c     53 B1 02 F6 | 	mov	local06, local01
0bea0     54 B3 02 F6 | 	mov	local07, local02
0bea4     55 A7 02 F6 | 	mov	local01, local03
0bea8     4B 00 00 FF 
0beac     FC 65 06 F1 | 	add	objptr, ##38908
0beb0     32 AF 02 FB | 	rdlong	local05, objptr
0beb4     57 AD 02 F6 | 	mov	local04, local05
0beb8     01 AC 66 F0 | 	shl	local04, #1
0bebc     57 AD 02 F1 | 	add	local04, local05
0bec0     02 AC 66 F0 | 	shl	local04, #2
0bec4     03 00 00 FF 
0bec8     00 64 86 F1 | 	sub	objptr, ##1536
0becc     32 AD 02 F1 | 	add	local04, objptr
0bed0     56 B1 62 FC | 	wrlong	local06, local04
0bed4     03 00 00 FF 
0bed8     00 64 06 F1 | 	add	objptr, ##1536
0bedc     32 B1 02 FB | 	rdlong	local06, objptr
0bee0     58 AF 02 F6 | 	mov	local05, local06
0bee4     01 AE 66 F0 | 	shl	local05, #1
0bee8     58 AF 02 F1 | 	add	local05, local06
0beec     02 AE 66 F0 | 	shl	local05, #2
0bef0     03 00 00 FF 
0bef4     00 64 86 F1 | 	sub	objptr, ##1536
0bef8     32 AF 02 F1 | 	add	local05, objptr
0befc     04 AE 06 F1 | 	add	local05, #4
0bf00     57 B3 62 FC | 	wrlong	local07, local05
0bf04     03 00 00 FF 
0bf08     00 64 06 F1 | 	add	objptr, ##1536
0bf0c     32 B3 02 FB | 	rdlong	local07, objptr
0bf10     59 B1 02 F6 | 	mov	local06, local07
0bf14     01 B0 66 F0 | 	shl	local06, #1
0bf18     59 B1 02 F1 | 	add	local06, local07
0bf1c     02 B0 66 F0 | 	shl	local06, #2
0bf20     03 00 00 FF 
0bf24     00 64 86 F1 | 	sub	objptr, ##1536
0bf28     32 B1 02 F1 | 	add	local06, objptr
0bf2c     08 B0 06 F1 | 	add	local06, #8
0bf30     58 A7 62 FC | 	wrlong	local01, local06
0bf34     03 00 00 FF 
0bf38     00 64 06 F1 | 	add	objptr, ##1536
0bf3c     32 B1 02 FB | 	rdlong	local06, objptr
0bf40     01 B0 06 F1 | 	add	local06, #1
0bf44     32 B1 62 FC | 	wrlong	local06, objptr
0bf48     4B 00 00 FF 
0bf4c     FC 65 86 F1 | 	sub	objptr, ##38908
0bf50     1D 7A 06 F6 | 	mov	result1, #29
0bf54     64 01 90 FD | 	jmp	#LR__1003
0bf58                 | LR__1000
0bf58     00 A6 06 F6 | 	mov	local01, #0
0bf5c     68 01 B0 FD | 	call	#_addsub
0bf60                 | ' t3.result.uresult=0
0bf60                 | ' err=addsub()             			' call higher priority operator check. It will itself call muldiv, which then calls getval/getvar 
0bf60                 | ' if err>0 then return err
0bf60     01 7A 16 F2 | 	cmp	result1, #1 wc
0bf64     54 01 90 3D |  if_ae	jmp	#LR__1003
0bf68     38 00 00 FF 
0bf6c     C4 65 06 F1 | 	add	objptr, ##29124
0bf70     32 AD 02 FB | 	rdlong	local04, objptr
0bf74     03 AC 66 F0 | 	shl	local04, #3
0bf78     02 00 00 FF 
0bf7c     38 64 86 F1 | 	sub	objptr, ##1080
0bf80     32 AD 02 F1 | 	add	local04, objptr
0bf84     04 AC 06 F1 | 	add	local04, #4
0bf88     56 AF 02 FB | 	rdlong	local05, local04
0bf8c                 | ' op = lparts(ct).token				' Lowest priority : comparison operators
0bf8c                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
0bf8c     36 00 00 FF 
0bf90     8C 65 86 F1 | 	sub	objptr, ##28044
0bf94                 | LR__1001
0bf94     1B AE 0E F2 | 	cmp	local05, #27 wz
0bf98     0F AE 0E 52 |  if_ne	cmp	local05, #15 wz
0bf9c     10 AE 0E 52 |  if_ne	cmp	local05, #16 wz
0bfa0     27 AE 0E 52 |  if_ne	cmp	local05, #39 wz
0bfa4     26 AE 0E 52 |  if_ne	cmp	local05, #38 wz
0bfa8     2A AE 0E 52 |  if_ne	cmp	local05, #42 wz
0bfac     08 01 90 5D |  if_ne	jmp	#LR__1002
0bfb0     38 00 00 FF 
0bfb4     C4 65 06 F1 | 	add	objptr, ##29124
0bfb8     32 B1 02 FB | 	rdlong	local06, objptr
0bfbc     01 B0 06 F1 | 	add	local06, #1
0bfc0     32 B1 62 FC | 	wrlong	local06, objptr
0bfc4     38 00 00 FF 
0bfc8     C4 65 86 F1 | 	sub	objptr, ##29124
0bfcc     F8 00 B0 FD | 	call	#_addsub
0bfd0                 | '   ct+=1
0bfd0                 | '   err=addsub() : if err>0 then return err
0bfd0     01 7A 16 F2 | 	cmp	result1, #1 wc
0bfd4     E4 00 90 3D |  if_ae	jmp	#LR__1003
0bfd8     57 AB 02 F6 | 	mov	local03, local05
0bfdc     53 B1 02 F6 | 	mov	local06, local01
0bfe0     54 B3 02 F6 | 	mov	local07, local02
0bfe4     55 AF 02 F6 | 	mov	local05, local03
0bfe8     4B 00 00 FF 
0bfec     FC 65 06 F1 | 	add	objptr, ##38908
0bff0     32 AD 02 FB | 	rdlong	local04, objptr
0bff4     56 7B 02 F6 | 	mov	result1, local04
0bff8     01 7A 66 F0 | 	shl	result1, #1
0bffc     56 7B 02 F1 | 	add	result1, local04
0c000     02 7A 66 F0 | 	shl	result1, #2
0c004     03 00 00 FF 
0c008     00 64 86 F1 | 	sub	objptr, ##1536
0c00c     32 7B 02 F1 | 	add	result1, objptr
0c010     3D B1 62 FC | 	wrlong	local06, result1
0c014     03 00 00 FF 
0c018     00 64 06 F1 | 	add	objptr, ##1536
0c01c     32 B1 02 FB | 	rdlong	local06, objptr
0c020     58 AD 02 F6 | 	mov	local04, local06
0c024     01 AC 66 F0 | 	shl	local04, #1
0c028     58 AD 02 F1 | 	add	local04, local06
0c02c     02 AC 66 F0 | 	shl	local04, #2
0c030     03 00 00 FF 
0c034     00 64 86 F1 | 	sub	objptr, ##1536
0c038     32 AD 02 F1 | 	add	local04, objptr
0c03c     04 AC 06 F1 | 	add	local04, #4
0c040     56 B3 62 FC | 	wrlong	local07, local04
0c044     03 00 00 FF 
0c048     00 64 06 F1 | 	add	objptr, ##1536
0c04c     32 B3 02 FB | 	rdlong	local07, objptr
0c050     59 B1 02 F6 | 	mov	local06, local07
0c054     01 B0 66 F0 | 	shl	local06, #1
0c058     59 B1 02 F1 | 	add	local06, local07
0c05c     02 B0 66 F0 | 	shl	local06, #2
0c060     03 00 00 FF 
0c064     00 64 86 F1 | 	sub	objptr, ##1536
0c068     32 B1 02 F1 | 	add	local06, objptr
0c06c     08 B0 06 F1 | 	add	local06, #8
0c070     58 AF 62 FC | 	wrlong	local05, local06
0c074     03 00 00 FF 
0c078     00 64 06 F1 | 	add	objptr, ##1536
0c07c     32 B1 02 FB | 	rdlong	local06, objptr
0c080     01 B0 06 F1 | 	add	local06, #1
0c084     32 B1 62 FC | 	wrlong	local06, objptr
0c088     13 00 00 FF 
0c08c     38 64 86 F1 | 	sub	objptr, ##9784
0c090     32 AD 02 FB | 	rdlong	local04, objptr
0c094     03 AC 66 F0 | 	shl	local04, #3
0c098     02 00 00 FF 
0c09c     38 64 86 F1 | 	sub	objptr, ##1080
0c0a0     32 AD 02 F1 | 	add	local04, objptr
0c0a4     04 AC 06 F1 | 	add	local04, #4
0c0a8     56 AF 02 FB | 	rdlong	local05, local04
0c0ac     36 00 00 FF 
0c0b0     8C 65 86 F1 | 	sub	objptr, ##28044
0c0b4     DC FE 9F FD | 	jmp	#LR__1001
0c0b8                 | LR__1002
0c0b8                 | ' return 0  
0c0b8     00 7A 06 F6 | 	mov	result1, #0
0c0bc                 | LR__1003
0c0bc     E7 F0 03 F6 | 	mov	ptra, fp
0c0c0     F2 00 A0 FD | 	call	#popregs_
0c0c4                 | _expr_ret
0c0c4     2D 00 64 FD | 	ret
0c0c8                 | 
0c0c8                 | ' 
0c0c8                 | ' ' Second level operators : add, sub, logic
0c0c8                 | ' 
0c0c8                 | ' function addsub() as ulong
0c0c8                 | _addsub
0c0c8     07 CA 05 F6 | 	mov	COUNT_, #7
0c0cc     E8 00 A0 FD | 	call	#pushregs_
0c0d0                 | _addsub_enter
0c0d0     00 A6 06 F6 | 	mov	local01, #0
0c0d4     60 01 B0 FD | 	call	#_muldiv
0c0d8                 | ' 
0c0d8                 | ' t3.result.uresult=0
0c0d8                 | ' err=muldiv() : if err>0 then return err           			 
0c0d8     01 7A 16 F2 | 	cmp	result1, #1 wc
0c0dc     4C 01 90 3D |  if_ae	jmp	#LR__1012
0c0e0     38 00 00 FF 
0c0e4     C4 65 06 F1 | 	add	objptr, ##29124
0c0e8     32 AD 02 FB | 	rdlong	local04, objptr
0c0ec     03 AC 66 F0 | 	shl	local04, #3
0c0f0     02 00 00 FF 
0c0f4     38 64 86 F1 | 	sub	objptr, ##1080
0c0f8     32 AD 02 F1 | 	add	local04, objptr
0c0fc     04 AC 06 F1 | 	add	local04, #4
0c100     56 AF 02 FB | 	rdlong	local05, local04
0c104                 | ' op = lparts(ct).token				 
0c104                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
0c104     36 00 00 FF 
0c108     8C 65 86 F1 | 	sub	objptr, ##28044
0c10c                 | LR__1010
0c10c     01 AE 0E F2 | 	cmp	local05, #1 wz
0c110     02 AE 0E 52 |  if_ne	cmp	local05, #2 wz
0c114     07 AE 0E 52 |  if_ne	cmp	local05, #7 wz
0c118     03 AE 0E 52 |  if_ne	cmp	local05, #3 wz
0c11c     08 01 90 5D |  if_ne	jmp	#LR__1011
0c120     38 00 00 FF 
0c124     C4 65 06 F1 | 	add	objptr, ##29124
0c128     32 AD 02 FB | 	rdlong	local04, objptr
0c12c     01 AC 06 F1 | 	add	local04, #1
0c130     32 AD 62 FC | 	wrlong	local04, objptr
0c134     38 00 00 FF 
0c138     C4 65 86 F1 | 	sub	objptr, ##29124
0c13c     F8 00 B0 FD | 	call	#_muldiv
0c140                 | '   ct+=1
0c140                 | '   err=muldiv() : if err>0 then return err   
0c140     01 7A 16 F2 | 	cmp	result1, #1 wc
0c144     E4 00 90 3D |  if_ae	jmp	#LR__1012
0c148     57 AB 02 F6 | 	mov	local03, local05
0c14c     53 B1 02 F6 | 	mov	local06, local01
0c150     54 B3 02 F6 | 	mov	local07, local02
0c154     55 AF 02 F6 | 	mov	local05, local03
0c158     4B 00 00 FF 
0c15c     FC 65 06 F1 | 	add	objptr, ##38908
0c160     32 AD 02 FB | 	rdlong	local04, objptr
0c164     56 7B 02 F6 | 	mov	result1, local04
0c168     01 7A 66 F0 | 	shl	result1, #1
0c16c     56 7B 02 F1 | 	add	result1, local04
0c170     02 7A 66 F0 | 	shl	result1, #2
0c174     03 00 00 FF 
0c178     00 64 86 F1 | 	sub	objptr, ##1536
0c17c     32 7B 02 F1 | 	add	result1, objptr
0c180     3D B1 62 FC | 	wrlong	local06, result1
0c184     03 00 00 FF 
0c188     00 64 06 F1 | 	add	objptr, ##1536
0c18c     32 B1 02 FB | 	rdlong	local06, objptr
0c190     58 AD 02 F6 | 	mov	local04, local06
0c194     01 AC 66 F0 | 	shl	local04, #1
0c198     58 AD 02 F1 | 	add	local04, local06
0c19c     02 AC 66 F0 | 	shl	local04, #2
0c1a0     03 00 00 FF 
0c1a4     00 64 86 F1 | 	sub	objptr, ##1536
0c1a8     32 AD 02 F1 | 	add	local04, objptr
0c1ac     04 AC 06 F1 | 	add	local04, #4
0c1b0     56 B3 62 FC | 	wrlong	local07, local04
0c1b4     03 00 00 FF 
0c1b8     00 64 06 F1 | 	add	objptr, ##1536
0c1bc     32 B3 02 FB | 	rdlong	local07, objptr
0c1c0     59 B1 02 F6 | 	mov	local06, local07
0c1c4     01 B0 66 F0 | 	shl	local06, #1
0c1c8     59 B1 02 F1 | 	add	local06, local07
0c1cc     02 B0 66 F0 | 	shl	local06, #2
0c1d0     03 00 00 FF 
0c1d4     00 64 86 F1 | 	sub	objptr, ##1536
0c1d8     32 B1 02 F1 | 	add	local06, objptr
0c1dc     08 B0 06 F1 | 	add	local06, #8
0c1e0     58 AF 62 FC | 	wrlong	local05, local06
0c1e4     03 00 00 FF 
0c1e8     00 64 06 F1 | 	add	objptr, ##1536
0c1ec     32 B1 02 FB | 	rdlong	local06, objptr
0c1f0     01 B0 06 F1 | 	add	local06, #1
0c1f4     32 B1 62 FC | 	wrlong	local06, objptr
0c1f8     13 00 00 FF 
0c1fc     38 64 86 F1 | 	sub	objptr, ##9784
0c200     32 AD 02 FB | 	rdlong	local04, objptr
0c204     03 AC 66 F0 | 	shl	local04, #3
0c208     02 00 00 FF 
0c20c     38 64 86 F1 | 	sub	objptr, ##1080
0c210     32 AD 02 F1 | 	add	local04, objptr
0c214     04 AC 06 F1 | 	add	local04, #4
0c218     56 AF 02 FB | 	rdlong	local05, local04
0c21c     36 00 00 FF 
0c220     8C 65 86 F1 | 	sub	objptr, ##28044
0c224     E4 FE 9F FD | 	jmp	#LR__1010
0c228                 | LR__1011
0c228                 | ' return 0
0c228     00 7A 06 F6 | 	mov	result1, #0
0c22c                 | LR__1012
0c22c     E7 F0 03 F6 | 	mov	ptra, fp
0c230     F2 00 A0 FD | 	call	#popregs_
0c234                 | _addsub_ret
0c234     2D 00 64 FD | 	ret
0c238                 | 
0c238                 | ' 
0c238                 | ' ' Third level operators : mul,div,shift,power
0c238                 | ' 
0c238                 | ' function muldiv() as ulong
0c238                 | _muldiv
0c238     07 CA 05 F6 | 	mov	COUNT_, #7
0c23c     E8 00 A0 FD | 	call	#pushregs_
0c240                 | _muldiv_enter
0c240     00 A6 06 F6 | 	mov	local01, #0
0c244     6C 01 B0 FD | 	call	#_getvalue
0c248                 | ' 
0c248                 | ' t3.result.uresult=0
0c248                 | ' err=getvalue() : if err>0 then return err     
0c248     01 7A 16 F2 | 	cmp	result1, #1 wc
0c24c     58 01 90 3D |  if_ae	jmp	#LR__1022
0c250     38 00 00 FF 
0c254     C4 65 06 F1 | 	add	objptr, ##29124
0c258     32 AD 02 FB | 	rdlong	local04, objptr
0c25c     03 AC 66 F0 | 	shl	local04, #3
0c260     02 00 00 FF 
0c264     38 64 86 F1 | 	sub	objptr, ##1080
0c268     32 AD 02 F1 | 	add	local04, objptr
0c26c     04 AC 06 F1 | 	add	local04, #4
0c270     56 AF 02 FB | 	rdlong	local05, local04
0c274                 | ' op = lparts(ct).token
0c274                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
0c274     36 00 00 FF 
0c278     8C 65 86 F1 | 	sub	objptr, ##28044
0c27c                 | LR__1020
0c27c     05 AE 0E F2 | 	cmp	local05, #5 wz
0c280     08 AE 0E 52 |  if_ne	cmp	local05, #8 wz
0c284     06 AE 0E 52 |  if_ne	cmp	local05, #6 wz
0c288     09 AE 0E 52 |  if_ne	cmp	local05, #9 wz
0c28c     0A AE 0E 52 |  if_ne	cmp	local05, #10 wz
0c290     0B AE 0E 52 |  if_ne	cmp	local05, #11 wz
0c294     0C AE 0E 52 |  if_ne	cmp	local05, #12 wz
0c298     08 01 90 5D |  if_ne	jmp	#LR__1021
0c29c     38 00 00 FF 
0c2a0     C4 65 06 F1 | 	add	objptr, ##29124
0c2a4     32 AD 02 FB | 	rdlong	local04, objptr
0c2a8     01 AC 06 F1 | 	add	local04, #1
0c2ac     32 AD 62 FC | 	wrlong	local04, objptr
0c2b0     38 00 00 FF 
0c2b4     C4 65 86 F1 | 	sub	objptr, ##29124
0c2b8     F8 00 B0 FD | 	call	#_getvalue
0c2bc                 | '   ct+=1
0c2bc                 | '   err=getvalue() :if err>0 then return err   
0c2bc     01 7A 16 F2 | 	cmp	result1, #1 wc
0c2c0     E4 00 90 3D |  if_ae	jmp	#LR__1022
0c2c4     57 AB 02 F6 | 	mov	local03, local05
0c2c8     53 B1 02 F6 | 	mov	local06, local01
0c2cc     54 B3 02 F6 | 	mov	local07, local02
0c2d0     55 AF 02 F6 | 	mov	local05, local03
0c2d4     4B 00 00 FF 
0c2d8     FC 65 06 F1 | 	add	objptr, ##38908
0c2dc     32 AD 02 FB | 	rdlong	local04, objptr
0c2e0     56 7B 02 F6 | 	mov	result1, local04
0c2e4     01 7A 66 F0 | 	shl	result1, #1
0c2e8     56 7B 02 F1 | 	add	result1, local04
0c2ec     02 7A 66 F0 | 	shl	result1, #2
0c2f0     03 00 00 FF 
0c2f4     00 64 86 F1 | 	sub	objptr, ##1536
0c2f8     32 7B 02 F1 | 	add	result1, objptr
0c2fc     3D B1 62 FC | 	wrlong	local06, result1
0c300     03 00 00 FF 
0c304     00 64 06 F1 | 	add	objptr, ##1536
0c308     32 B1 02 FB | 	rdlong	local06, objptr
0c30c     58 AD 02 F6 | 	mov	local04, local06
0c310     01 AC 66 F0 | 	shl	local04, #1
0c314     58 AD 02 F1 | 	add	local04, local06
0c318     02 AC 66 F0 | 	shl	local04, #2
0c31c     03 00 00 FF 
0c320     00 64 86 F1 | 	sub	objptr, ##1536
0c324     32 AD 02 F1 | 	add	local04, objptr
0c328     04 AC 06 F1 | 	add	local04, #4
0c32c     56 B3 62 FC | 	wrlong	local07, local04
0c330     03 00 00 FF 
0c334     00 64 06 F1 | 	add	objptr, ##1536
0c338     32 B3 02 FB | 	rdlong	local07, objptr
0c33c     59 B1 02 F6 | 	mov	local06, local07
0c340     01 B0 66 F0 | 	shl	local06, #1
0c344     59 B1 02 F1 | 	add	local06, local07
0c348     02 B0 66 F0 | 	shl	local06, #2
0c34c     03 00 00 FF 
0c350     00 64 86 F1 | 	sub	objptr, ##1536
0c354     32 B1 02 F1 | 	add	local06, objptr
0c358     08 B0 06 F1 | 	add	local06, #8
0c35c     58 AF 62 FC | 	wrlong	local05, local06
0c360     03 00 00 FF 
0c364     00 64 06 F1 | 	add	objptr, ##1536
0c368     32 B1 02 FB | 	rdlong	local06, objptr
0c36c     01 B0 06 F1 | 	add	local06, #1
0c370     32 B1 62 FC | 	wrlong	local06, objptr
0c374     13 00 00 FF 
0c378     38 64 86 F1 | 	sub	objptr, ##9784
0c37c     32 AD 02 FB | 	rdlong	local04, objptr
0c380     03 AC 66 F0 | 	shl	local04, #3
0c384     02 00 00 FF 
0c388     38 64 86 F1 | 	sub	objptr, ##1080
0c38c     32 AD 02 F1 | 	add	local04, objptr
0c390     04 AC 06 F1 | 	add	local04, #4
0c394     56 AF 02 FB | 	rdlong	local05, local04
0c398     36 00 00 FF 
0c39c     8C 65 86 F1 | 	sub	objptr, ##28044
0c3a0     D8 FE 9F FD | 	jmp	#LR__1020
0c3a4                 | LR__1021
0c3a4                 | ' return 0
0c3a4     00 7A 06 F6 | 	mov	result1, #0
0c3a8                 | LR__1022
0c3a8     E7 F0 03 F6 | 	mov	ptra, fp
0c3ac     F2 00 A0 FD | 	call	#popregs_
0c3b0                 | _muldiv_ret
0c3b0     2D 00 64 FD | 	ret
0c3b4                 | 
0c3b4                 | ' 
0c3b4                 | ' ' Get a value for operations
0c3b4                 | ' 
0c3b4                 | ' function getvalue()  as ulong
0c3b4                 | _getvalue
0c3b4     0B CA 05 F6 | 	mov	COUNT_, #11
0c3b8     E8 00 A0 FD | 	call	#pushregs_
0c3bc                 | _getvalue_enter
0c3bc     01 AC 06 F6 | 	mov	local04, #1
0c3c0     00 A6 06 F6 | 	mov	local01, #0
0c3c4     1D AA 06 F6 | 	mov	local03, #29
0c3c8     38 00 00 FF 
0c3cc     C4 65 06 F1 | 	add	objptr, ##29124
0c3d0     32 97 02 FB | 	rdlong	arg03, objptr
0c3d4     03 96 66 F0 | 	shl	arg03, #3
0c3d8     02 00 00 FF 
0c3dc     38 64 86 F1 | 	sub	objptr, ##1080
0c3e0     32 97 02 F1 | 	add	arg03, objptr
0c3e4     04 96 06 F1 | 	add	arg03, #4
0c3e8     4B AF 02 FB | 	rdlong	local05, arg03
0c3ec                 | ' 
0c3ec                 | ' m=1											' for negative numbers
0c3ec                 | ' t1.result.uresult=0: t1.result_type=result_uint
0c3ec                 | ' op=lparts(ct).token
0c3ec                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token				' '-' operator found
0c3ec     02 AE 0E F2 | 	cmp	local05, #2 wz
0c3f0     36 00 00 FF 
0c3f4     8C 65 86 F1 | 	sub	objptr, ##28044
0c3f8     38 00 90 5D |  if_ne	jmp	#LR__1030
0c3fc     01 AC 66 F6 | 	neg	local04, #1
0c400     38 00 00 FF 
0c404     C4 65 06 F1 | 	add	objptr, ##29124
0c408     32 AF 02 FB | 	rdlong	local05, objptr
0c40c     01 AE 06 F1 | 	add	local05, #1
0c410     32 AF 62 FC | 	wrlong	local05, objptr
0c414     03 AE 66 F0 | 	shl	local05, #3
0c418     02 00 00 FF 
0c41c     38 64 86 F1 | 	sub	objptr, ##1080
0c420     32 AF 02 F1 | 	add	local05, objptr
0c424     04 AE 06 F1 | 	add	local05, #4
0c428     57 AF 02 FB | 	rdlong	local05, local05
0c42c     36 00 00 FF 
0c430     8C 65 86 F1 | 	sub	objptr, ##28044
0c434                 | LR__1030
0c434                 | ' select case op
0c434     01 00 00 FF 
0c438     00 AE 0E F2 | 	cmp	local05, ##512 wz
0c43c     44 00 90 AD |  if_e	jmp	#LR__1031
0c440     01 00 00 FF 
0c444     01 AE 0E F2 | 	cmp	local05, ##513 wz
0c448     90 01 90 AD |  if_e	jmp	#LR__1034
0c44c     01 00 00 FF 
0c450     02 AE 0E F2 | 	cmp	local05, ##514 wz
0c454     44 04 90 AD |  if_e	jmp	#LR__1041
0c458     01 00 00 FF 
0c45c     03 AE 0E F2 | 	cmp	local05, ##515 wz
0c460     A8 05 90 AD |  if_e	jmp	#LR__1044
0c464     2C AE 0E F2 | 	cmp	local05, #44 wz
0c468     78 07 90 AD |  if_e	jmp	#LR__1049
0c46c     01 00 00 FF 
0c470     04 AE 0E F2 | 	cmp	local05, ##516 wz
0c474     70 08 90 AD |  if_e	jmp	#LR__1050
0c478     15 AE 0E F2 | 	cmp	local05, #21 wz
0c47c     98 08 90 AD |  if_e	jmp	#LR__1051
0c480     10 09 90 FD | 	jmp	#LR__1052
0c484                 | LR__1031
0c484                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int  
0c484     01 AC 0E F2 | 	cmp	local04, #1 wz
0c488     3C 00 90 5D |  if_ne	jmp	#LR__1032
0c48c     38 00 00 FF 
0c490     C4 65 06 F1 | 	add	objptr, ##29124
0c494     32 AF 02 FB | 	rdlong	local05, objptr
0c498     03 AE 66 F0 | 	shl	local05, #3
0c49c     02 00 00 FF 
0c4a0     38 64 86 F1 | 	sub	objptr, ##1080
0c4a4     32 AF 02 F1 | 	add	local05, objptr
0c4a8     57 93 02 FB | 	rdlong	arg01, local05
0c4ac     00 94 06 F6 | 	mov	arg02, #0
0c4b0     36 00 00 FF 
0c4b4     8C 65 86 F1 | 	sub	objptr, ##28044
0c4b8     A0 B5 B1 FD | 	call	#__system____builtin_atoi
0c4bc     3D AD 02 FD | 	qmul	local04, result1
0c4c0     18 A6 62 FD | 	getqx	local01
0c4c4     1C AA 06 F6 | 	mov	local03, #28
0c4c8                 | LR__1032
0c4c8                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int 	' todo token_int64?
0c4c8     FF FF 7F FF 
0c4cc     FF AD 0E F2 | 	cmp	local04, ##-1 wz
0c4d0     3C 00 90 5D |  if_ne	jmp	#LR__1033
0c4d4     38 00 00 FF 
0c4d8     C4 65 06 F1 | 	add	objptr, ##29124
0c4dc     32 AF 02 FB | 	rdlong	local05, objptr
0c4e0     03 AE 66 F0 | 	shl	local05, #3
0c4e4     02 00 00 FF 
0c4e8     38 64 86 F1 | 	sub	objptr, ##1080
0c4ec     32 AF 02 F1 | 	add	local05, objptr
0c4f0     57 93 02 FB | 	rdlong	arg01, local05
0c4f4     00 94 06 F6 | 	mov	arg02, #0
0c4f8     36 00 00 FF 
0c4fc     8C 65 86 F1 | 	sub	objptr, ##28044
0c500     58 B5 B1 FD | 	call	#__system____builtin_atoi
0c504     3D AD 02 FD | 	qmul	local04, result1
0c508     18 A6 62 FD | 	getqx	local01
0c50c     1C AA 06 F6 | 	mov	local03, #28
0c510                 | LR__1033
0c510     53 B1 02 F6 | 	mov	local06, local01
0c514     54 B3 02 F6 | 	mov	local07, local02
0c518     55 AF 02 F6 | 	mov	local05, local03
0c51c     4B 00 00 FF 
0c520     FC 65 06 F1 | 	add	objptr, ##38908
0c524     32 A7 02 FB | 	rdlong	local01, objptr
0c528     53 AD 02 F6 | 	mov	local04, local01
0c52c     01 AC 66 F0 | 	shl	local04, #1
0c530     53 AD 02 F1 | 	add	local04, local01
0c534     02 AC 66 F0 | 	shl	local04, #2
0c538     03 00 00 FF 
0c53c     00 64 86 F1 | 	sub	objptr, ##1536
0c540     32 AD 02 F1 | 	add	local04, objptr
0c544     56 B1 62 FC | 	wrlong	local06, local04
0c548     03 00 00 FF 
0c54c     00 64 06 F1 | 	add	objptr, ##1536
0c550     32 B1 02 FB | 	rdlong	local06, objptr
0c554     58 A7 02 F6 | 	mov	local01, local06
0c558     01 A6 66 F0 | 	shl	local01, #1
0c55c     58 A7 02 F1 | 	add	local01, local06
0c560     02 A6 66 F0 | 	shl	local01, #2
0c564     03 00 00 FF 
0c568     00 64 86 F1 | 	sub	objptr, ##1536
0c56c     32 A7 02 F1 | 	add	local01, objptr
0c570     04 A6 06 F1 | 	add	local01, #4
0c574     53 B3 62 FC | 	wrlong	local07, local01
0c578     03 00 00 FF 
0c57c     00 64 06 F1 | 	add	objptr, ##1536
0c580     32 B3 02 FB | 	rdlong	local07, objptr
0c584     59 B1 02 F6 | 	mov	local06, local07
0c588     01 B0 66 F0 | 	shl	local06, #1
0c58c     59 B1 02 F1 | 	add	local06, local07
0c590     02 B0 66 F0 | 	shl	local06, #2
0c594     03 00 00 FF 
0c598     00 64 86 F1 | 	sub	objptr, ##1536
0c59c     32 B1 02 F1 | 	add	local06, objptr
0c5a0     08 B0 06 F1 | 	add	local06, #8
0c5a4     58 AF 62 FC | 	wrlong	local05, local06
0c5a8     03 00 00 FF 
0c5ac     00 64 06 F1 | 	add	objptr, ##1536
0c5b0     32 B1 02 FB | 	rdlong	local06, objptr
0c5b4     01 B0 06 F1 | 	add	local06, #1
0c5b8     32 B1 62 FC | 	wrlong	local06, objptr
0c5bc     13 00 00 FF 
0c5c0     38 64 86 F1 | 	sub	objptr, ##9784
0c5c4     32 B1 02 FB | 	rdlong	local06, objptr
0c5c8     01 B0 06 F1 | 	add	local06, #1
0c5cc     32 B1 62 FC | 	wrlong	local06, objptr
0c5d0     38 00 00 FF 
0c5d4     C4 65 86 F1 | 	sub	objptr, ##29124
0c5d8     E4 07 90 FD | 	jmp	#LR__1053
0c5dc                 | LR__1034
0c5dc                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0c5dc     38 00 00 FF 
0c5e0     C4 65 06 F1 | 	add	objptr, ##29124
0c5e4     32 97 02 FB | 	rdlong	arg03, objptr
0c5e8     03 96 66 F0 | 	shl	arg03, #3
0c5ec     02 00 00 FF 
0c5f0     38 64 86 F1 | 	sub	objptr, ##1080
0c5f4     32 97 02 F1 | 	add	arg03, objptr
0c5f8     4B 93 02 FB | 	rdlong	arg01, arg03
0c5fc     01 94 06 F6 | 	mov	arg02, #1
0c600     36 00 00 FF 
0c604     8C 65 86 F1 | 	sub	objptr, ##28044
0c608     A4 9F B1 FD | 	call	#__system__Left_S
0c60c     3D 93 02 F6 | 	mov	arg01, result1
0c610     97 01 00 FF 
0c614     D1 95 06 F6 | 	mov	arg02, ##@LR__5948
0c618     14 87 B1 FD | 	call	#__system___string_cmp
0c61c     00 7A 0E F2 | 	cmp	result1, #0 wz
0c620     94 00 90 5D |  if_ne	jmp	#LR__1037
0c624     38 00 00 FF 
0c628     C4 65 06 F1 | 	add	objptr, ##29124
0c62c     32 B3 02 FB | 	rdlong	local07, objptr
0c630     59 B1 02 F6 | 	mov	local06, local07
0c634     03 B0 66 F0 | 	shl	local06, #3
0c638     02 00 00 FF 
0c63c     38 64 86 F1 | 	sub	objptr, ##1080
0c640     32 B1 02 F1 | 	add	local06, objptr
0c644     97 01 00 FF 
0c648     D3 AF 06 F6 | 	mov	local05, ##@LR__5949
0c64c     03 B2 66 F0 | 	shl	local07, #3
0c650     32 B3 02 F1 | 	add	local07, objptr
0c654     59 B3 02 FB | 	rdlong	local07, local07
0c658     02 00 00 FF 
0c65c     38 64 06 F1 | 	add	objptr, ##1080
0c660     32 A7 02 FB | 	rdlong	local01, objptr
0c664     03 A6 66 F0 | 	shl	local01, #3
0c668     02 00 00 FF 
0c66c     38 64 86 F1 | 	sub	objptr, ##1080
0c670     32 A7 02 F1 | 	add	local01, objptr
0c674     53 93 02 FB | 	rdlong	arg01, local01
0c678     36 00 00 FF 
0c67c     8C 65 86 F1 | 	sub	objptr, ##28044
0c680     49 B5 02 F6 | 	mov	local08, arg01
0c684     D7 06 48 FB | 	callpa	#(@LR__1036-@LR__1035)>>2,fcache_load_ptr_
0c688                 | LR__1035
0c688     5A 7B CA FA | 	rdbyte	result1, local08 wz
0c68c     01 B4 06 51 |  if_ne	add	local08, #1
0c690     F4 FF 9F 5D |  if_ne	jmp	#LR__1035
0c694                 | LR__1036
0c694     49 B5 82 F1 | 	sub	local08, arg01
0c698     5A 95 02 F6 | 	mov	arg02, local08
0c69c     01 94 86 F1 | 	sub	arg02, #1
0c6a0     59 93 02 F6 | 	mov	arg01, local07
0c6a4     90 9F B1 FD | 	call	#__system__Right_S
0c6a8     3D 95 02 F6 | 	mov	arg02, result1
0c6ac     57 93 02 F6 | 	mov	arg01, local05
0c6b0     B0 86 B1 FD | 	call	#__system___string_concat
0c6b4     58 7B 62 FC | 	wrlong	result1, local06
0c6b8                 | LR__1037
0c6b8                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0c6b8     38 00 00 FF 
0c6bc     C4 65 06 F1 | 	add	objptr, ##29124
0c6c0     32 97 02 FB | 	rdlong	arg03, objptr
0c6c4     03 96 66 F0 | 	shl	arg03, #3
0c6c8     02 00 00 FF 
0c6cc     38 64 86 F1 | 	sub	objptr, ##1080
0c6d0     32 97 02 F1 | 	add	arg03, objptr
0c6d4     4B 93 02 FB | 	rdlong	arg01, arg03
0c6d8     01 94 06 F6 | 	mov	arg02, #1
0c6dc     36 00 00 FF 
0c6e0     8C 65 86 F1 | 	sub	objptr, ##28044
0c6e4     C8 9E B1 FD | 	call	#__system__Left_S
0c6e8     3D 93 02 F6 | 	mov	arg01, result1
0c6ec     97 01 00 FF 
0c6f0     D6 95 06 F6 | 	mov	arg02, ##@LR__5950
0c6f4     38 86 B1 FD | 	call	#__system___string_cmp
0c6f8     00 7A 0E F2 | 	cmp	result1, #0 wz
0c6fc     94 00 90 5D |  if_ne	jmp	#LR__1040
0c700     38 00 00 FF 
0c704     C4 65 06 F1 | 	add	objptr, ##29124
0c708     32 B3 02 FB | 	rdlong	local07, objptr
0c70c     59 B1 02 F6 | 	mov	local06, local07
0c710     03 B0 66 F0 | 	shl	local06, #3
0c714     02 00 00 FF 
0c718     38 64 86 F1 | 	sub	objptr, ##1080
0c71c     32 B1 02 F1 | 	add	local06, objptr
0c720     97 01 00 FF 
0c724     D8 AF 06 F6 | 	mov	local05, ##@LR__5951
0c728     03 B2 66 F0 | 	shl	local07, #3
0c72c     32 B3 02 F1 | 	add	local07, objptr
0c730     59 B3 02 FB | 	rdlong	local07, local07
0c734     02 00 00 FF 
0c738     38 64 06 F1 | 	add	objptr, ##1080
0c73c     32 A7 02 FB | 	rdlong	local01, objptr
0c740     03 A6 66 F0 | 	shl	local01, #3
0c744     02 00 00 FF 
0c748     38 64 86 F1 | 	sub	objptr, ##1080
0c74c     32 A7 02 F1 | 	add	local01, objptr
0c750     53 93 02 FB | 	rdlong	arg01, local01
0c754     36 00 00 FF 
0c758     8C 65 86 F1 | 	sub	objptr, ##28044
0c75c     49 B5 02 F6 | 	mov	local08, arg01
0c760     D7 06 48 FB | 	callpa	#(@LR__1039-@LR__1038)>>2,fcache_load_ptr_
0c764                 | LR__1038
0c764     5A 7B CA FA | 	rdbyte	result1, local08 wz
0c768     01 B4 06 51 |  if_ne	add	local08, #1
0c76c     F4 FF 9F 5D |  if_ne	jmp	#LR__1038
0c770                 | LR__1039
0c770     49 B5 82 F1 | 	sub	local08, arg01
0c774     5A 95 02 F6 | 	mov	arg02, local08
0c778     01 94 86 F1 | 	sub	arg02, #1
0c77c     59 93 02 F6 | 	mov	arg01, local07
0c780     B4 9E B1 FD | 	call	#__system__Right_S
0c784     3D 95 02 F6 | 	mov	arg02, result1
0c788     57 93 02 F6 | 	mov	arg01, local05
0c78c     D4 85 B1 FD | 	call	#__system___string_concat
0c790     58 7B 62 FC | 	wrlong	result1, local06
0c794                 | LR__1040
0c794     38 00 00 FF 
0c798     C4 65 06 F1 | 	add	objptr, ##29124
0c79c     32 B1 02 FB | 	rdlong	local06, objptr
0c7a0     03 B0 66 F0 | 	shl	local06, #3
0c7a4     02 00 00 FF 
0c7a8     38 64 86 F1 | 	sub	objptr, ##1080
0c7ac     32 B1 02 F1 | 	add	local06, objptr
0c7b0     58 93 02 FB | 	rdlong	arg01, local06
0c7b4     00 94 06 F6 | 	mov	arg02, #0
0c7b8     36 00 00 FF 
0c7bc     8C 65 86 F1 | 	sub	objptr, ##28044
0c7c0     98 B2 B1 FD | 	call	#__system____builtin_atoi
0c7c4     3D AD 02 FD | 	qmul	local04, result1
0c7c8     4B 00 00 FF 
0c7cc     FC 65 06 F1 | 	add	objptr, ##38908
0c7d0     32 B1 02 FB | 	rdlong	local06, objptr
0c7d4     58 B7 02 F6 | 	mov	local09, local06
0c7d8     01 B6 66 F0 | 	shl	local09, #1
0c7dc     58 B7 02 F1 | 	add	local09, local06
0c7e0     02 B6 66 F0 | 	shl	local09, #2
0c7e4     03 00 00 FF 
0c7e8     00 64 86 F1 | 	sub	objptr, ##1536
0c7ec     32 B7 02 F1 | 	add	local09, objptr
0c7f0     03 00 00 FF 
0c7f4     00 64 06 F1 | 	add	objptr, ##1536
0c7f8     18 A6 62 FD | 	getqx	local01
0c7fc     1C AA 06 F6 | 	mov	local03, #28
0c800     53 B1 02 F6 | 	mov	local06, local01
0c804     54 B3 02 F6 | 	mov	local07, local02
0c808     5B B1 62 FC | 	wrlong	local06, local09
0c80c     55 B7 02 F6 | 	mov	local09, local03
0c810     32 B1 02 FB | 	rdlong	local06, objptr
0c814     58 AF 02 F6 | 	mov	local05, local06
0c818     01 AE 66 F0 | 	shl	local05, #1
0c81c     58 AF 02 F1 | 	add	local05, local06
0c820     02 AE 66 F0 | 	shl	local05, #2
0c824     03 00 00 FF 
0c828     00 64 86 F1 | 	sub	objptr, ##1536
0c82c     32 AF 02 F1 | 	add	local05, objptr
0c830     04 AE 06 F1 | 	add	local05, #4
0c834     57 B3 62 FC | 	wrlong	local07, local05
0c838     03 00 00 FF 
0c83c     00 64 06 F1 | 	add	objptr, ##1536
0c840     32 B3 02 FB | 	rdlong	local07, objptr
0c844     59 B1 02 F6 | 	mov	local06, local07
0c848     01 B0 66 F0 | 	shl	local06, #1
0c84c     59 B1 02 F1 | 	add	local06, local07
0c850     02 B0 66 F0 | 	shl	local06, #2
0c854     03 00 00 FF 
0c858     00 64 86 F1 | 	sub	objptr, ##1536
0c85c     32 B1 02 F1 | 	add	local06, objptr
0c860     08 B0 06 F1 | 	add	local06, #8
0c864     58 B7 62 FC | 	wrlong	local09, local06
0c868     03 00 00 FF 
0c86c     00 64 06 F1 | 	add	objptr, ##1536
0c870     32 B1 02 FB | 	rdlong	local06, objptr
0c874     01 B0 06 F1 | 	add	local06, #1
0c878     32 B1 62 FC | 	wrlong	local06, objptr
0c87c     13 00 00 FF 
0c880     38 64 86 F1 | 	sub	objptr, ##9784
0c884     32 B1 02 FB | 	rdlong	local06, objptr
0c888     01 B0 06 F1 | 	add	local06, #1
0c88c     32 B1 62 FC | 	wrlong	local06, objptr
0c890     38 00 00 FF 
0c894     C4 65 86 F1 | 	sub	objptr, ##29124
0c898     24 05 90 FD | 	jmp	#LR__1053
0c89c                 | LR__1041
0c89c                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
0c89c     01 AC 0E F2 | 	cmp	local04, #1 wz
0c8a0     48 00 90 5D |  if_ne	jmp	#LR__1042
0c8a4     00 C0 1F FF 
0c8a8     00 B0 06 F6 | 	mov	local06, ##1065353216
0c8ac     38 00 00 FF 
0c8b0     C4 65 06 F1 | 	add	objptr, ##29124
0c8b4     32 B7 02 FB | 	rdlong	local09, objptr
0c8b8     03 B6 66 F0 | 	shl	local09, #3
0c8bc     02 00 00 FF 
0c8c0     38 64 86 F1 | 	sub	objptr, ##1080
0c8c4     32 B7 02 F1 | 	add	local09, objptr
0c8c8     5B 93 02 FB | 	rdlong	arg01, local09
0c8cc     36 00 00 FF 
0c8d0     8C 65 86 F1 | 	sub	objptr, ##28044
0c8d4     1C B3 B1 FD | 	call	#__system____builtin_atof
0c8d8     3D 95 02 F6 | 	mov	arg02, result1
0c8dc     58 93 02 F6 | 	mov	arg01, local06
0c8e0     F4 AA B1 FD | 	call	#__system___float_mul
0c8e4     3D A7 02 F6 | 	mov	local01, result1
0c8e8     1E AA 06 F6 | 	mov	local03, #30
0c8ec                 | LR__1042
0c8ec                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
0c8ec     FF FF 7F FF 
0c8f0     FF AD 0E F2 | 	cmp	local04, ##-1 wz
0c8f4     48 00 90 5D |  if_ne	jmp	#LR__1043
0c8f8     00 C0 5F FF 
0c8fc     00 B0 06 F6 | 	mov	local06, ##-1082130432
0c900     38 00 00 FF 
0c904     C4 65 06 F1 | 	add	objptr, ##29124
0c908     32 B7 02 FB | 	rdlong	local09, objptr
0c90c     03 B6 66 F0 | 	shl	local09, #3
0c910     02 00 00 FF 
0c914     38 64 86 F1 | 	sub	objptr, ##1080
0c918     32 B7 02 F1 | 	add	local09, objptr
0c91c     5B 93 02 FB | 	rdlong	arg01, local09
0c920     36 00 00 FF 
0c924     8C 65 86 F1 | 	sub	objptr, ##28044
0c928     C8 B2 B1 FD | 	call	#__system____builtin_atof
0c92c     3D 95 02 F6 | 	mov	arg02, result1
0c930     58 93 02 F6 | 	mov	arg01, local06
0c934     A0 AA B1 FD | 	call	#__system___float_mul
0c938     3D A7 02 F6 | 	mov	local01, result1
0c93c     1E AA 06 F6 | 	mov	local03, #30
0c940                 | LR__1043
0c940     53 B1 02 F6 | 	mov	local06, local01
0c944     54 B3 02 F6 | 	mov	local07, local02
0c948     55 AF 02 F6 | 	mov	local05, local03
0c94c     4B 00 00 FF 
0c950     FC 65 06 F1 | 	add	objptr, ##38908
0c954     32 A7 02 FB | 	rdlong	local01, objptr
0c958     53 B7 02 F6 | 	mov	local09, local01
0c95c     01 B6 66 F0 | 	shl	local09, #1
0c960     53 B7 02 F1 | 	add	local09, local01
0c964     02 B6 66 F0 | 	shl	local09, #2
0c968     03 00 00 FF 
0c96c     00 64 86 F1 | 	sub	objptr, ##1536
0c970     32 B7 02 F1 | 	add	local09, objptr
0c974     5B B1 62 FC | 	wrlong	local06, local09
0c978     03 00 00 FF 
0c97c     00 64 06 F1 | 	add	objptr, ##1536
0c980     32 B7 02 FB | 	rdlong	local09, objptr
0c984     5B B1 02 F6 | 	mov	local06, local09
0c988     01 B0 66 F0 | 	shl	local06, #1
0c98c     5B B1 02 F1 | 	add	local06, local09
0c990     02 B0 66 F0 | 	shl	local06, #2
0c994     03 00 00 FF 
0c998     00 64 86 F1 | 	sub	objptr, ##1536
0c99c     32 B1 02 F1 | 	add	local06, objptr
0c9a0     04 B0 06 F1 | 	add	local06, #4
0c9a4     58 B3 62 FC | 	wrlong	local07, local06
0c9a8     03 00 00 FF 
0c9ac     00 64 06 F1 | 	add	objptr, ##1536
0c9b0     32 B7 02 FB | 	rdlong	local09, objptr
0c9b4     5B B3 02 F6 | 	mov	local07, local09
0c9b8     01 B2 66 F0 | 	shl	local07, #1
0c9bc     5B B3 02 F1 | 	add	local07, local09
0c9c0     02 B2 66 F0 | 	shl	local07, #2
0c9c4     03 00 00 FF 
0c9c8     00 64 86 F1 | 	sub	objptr, ##1536
0c9cc     32 B3 02 F1 | 	add	local07, objptr
0c9d0     08 B2 06 F1 | 	add	local07, #8
0c9d4     59 AF 62 FC | 	wrlong	local05, local07
0c9d8     03 00 00 FF 
0c9dc     00 64 06 F1 | 	add	objptr, ##1536
0c9e0     32 B1 02 FB | 	rdlong	local06, objptr
0c9e4     01 B0 06 F1 | 	add	local06, #1
0c9e8     32 B1 62 FC | 	wrlong	local06, objptr
0c9ec     13 00 00 FF 
0c9f0     38 64 86 F1 | 	sub	objptr, ##9784
0c9f4     32 B1 02 FB | 	rdlong	local06, objptr
0c9f8     01 B0 06 F1 | 	add	local06, #1
0c9fc     32 B1 62 FC | 	wrlong	local06, objptr
0ca00     38 00 00 FF 
0ca04     C4 65 86 F1 | 	sub	objptr, ##29124
0ca08     B4 03 90 FD | 	jmp	#LR__1053
0ca0c                 | LR__1044
0ca0c     38 00 00 FF 
0ca10     C4 65 06 F1 | 	add	objptr, ##29124
0ca14     32 97 02 FB | 	rdlong	arg03, objptr
0ca18     03 96 66 F0 | 	shl	arg03, #3
0ca1c     02 00 00 FF 
0ca20     38 64 86 F1 | 	sub	objptr, ##1080
0ca24     32 97 02 F1 | 	add	arg03, objptr
0ca28     4B 93 02 FB | 	rdlong	arg01, arg03
0ca2c     36 00 00 FF 
0ca30     8C 65 86 F1 | 	sub	objptr, ##28044
0ca34     49 B5 02 F6 | 	mov	local08, arg01
0ca38     D7 06 48 FB | 	callpa	#(@LR__1046-@LR__1045)>>2,fcache_load_ptr_
0ca3c                 | LR__1045
0ca3c     5A 7B CA FA | 	rdbyte	result1, local08 wz
0ca40     01 B4 06 51 |  if_ne	add	local08, #1
0ca44     F4 FF 9F 5D |  if_ne	jmp	#LR__1045
0ca48                 | LR__1046
0ca48     49 B5 82 F1 | 	sub	local08, arg01
0ca4c     5A 7B 02 F6 | 	mov	result1, local08
0ca50     54 00 00 FF 
0ca54     A8 64 06 F1 | 	add	objptr, ##43176
0ca58     32 7B 62 FC | 	wrlong	result1, objptr
0ca5c     58 64 86 F1 | 	sub	objptr, #88
0ca60     32 93 02 FB | 	rdlong	arg01, objptr
0ca64     3D 93 82 F1 | 	sub	arg01, result1
0ca68     04 92 86 F1 | 	sub	arg01, #4
0ca6c     03 92 26 F5 | 	andn	arg01, #3
0ca70     32 93 62 FC | 	wrlong	arg01, objptr
0ca74     58 64 06 F1 | 	add	objptr, #88
0ca78     32 95 02 FB | 	rdlong	arg02, objptr
0ca7c     54 00 00 FF 
0ca80     A8 64 86 F1 | 	sub	objptr, ##43176
0ca84     4C 47 B1 FD | 	call	#_pslpoke
0ca88                 | '     pslpoke memtop,l
0ca88                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
0ca88     01 B8 06 F6 | 	mov	local10, #1
0ca8c     54 00 00 FF 
0ca90     A8 64 06 F1 | 	add	objptr, ##43176
0ca94     32 BB 02 FB | 	rdlong	local11, objptr
0ca98     54 00 00 FF 
0ca9c     A8 64 86 F1 | 	sub	objptr, ##43176
0caa0     01 BA 06 F1 | 	add	local11, #1
0caa4                 | LR__1047
0caa4     5D B9 52 F2 | 	cmps	local10, local11 wc
0caa8     5C 00 90 3D |  if_ae	jmp	#LR__1048
0caac     54 00 00 FF 
0cab0     50 64 06 F1 | 	add	objptr, ##43088
0cab4     32 B3 02 FB | 	rdlong	local07, objptr
0cab8     03 B2 06 F1 | 	add	local07, #3
0cabc     5C B3 02 F1 | 	add	local07, local10
0cac0     1B 00 00 FF 
0cac4     8C 64 86 F1 | 	sub	objptr, ##13964
0cac8     32 B7 02 FB | 	rdlong	local09, objptr
0cacc     03 B6 66 F0 | 	shl	local09, #3
0cad0     02 00 00 FF 
0cad4     38 64 86 F1 | 	sub	objptr, ##1080
0cad8     32 B7 02 F1 | 	add	local09, objptr
0cadc     5B 93 02 FB | 	rdlong	arg01, local09
0cae0     5C 95 02 F6 | 	mov	arg02, local10
0cae4     01 96 06 F6 | 	mov	arg03, #1
0cae8     36 00 00 FF 
0caec     8C 65 86 F1 | 	sub	objptr, ##28044
0caf0     D4 9B B1 FD | 	call	#__system__Mid_S
0caf4     3D 95 C2 FA | 	rdbyte	arg02, result1
0caf8     59 93 02 F6 | 	mov	arg01, local07
0cafc     64 47 B1 FD | 	call	#_pspoke
0cb00     01 B8 06 F1 | 	add	local10, #1
0cb04     9C FF 9F FD | 	jmp	#LR__1047
0cb08                 | LR__1048
0cb08     54 00 00 FF 
0cb0c     50 64 06 F1 | 	add	objptr, ##43088
0cb10     32 A7 02 FB | 	rdlong	local01, objptr
0cb14     2B AA 06 F6 | 	mov	local03, #43
0cb18     53 B1 02 F6 | 	mov	local06, local01
0cb1c     54 B3 02 F6 | 	mov	local07, local02
0cb20     55 BB 02 F6 | 	mov	local11, local03
0cb24     08 00 00 FF 
0cb28     54 64 86 F1 | 	sub	objptr, ##4180
0cb2c     32 B9 02 FB | 	rdlong	local10, objptr
0cb30     5C B7 02 F6 | 	mov	local09, local10
0cb34     01 B6 66 F0 | 	shl	local09, #1
0cb38     5C B7 02 F1 | 	add	local09, local10
0cb3c     02 B6 66 F0 | 	shl	local09, #2
0cb40     03 00 00 FF 
0cb44     00 64 86 F1 | 	sub	objptr, ##1536
0cb48     32 B7 02 F1 | 	add	local09, objptr
0cb4c     5B B1 62 FC | 	wrlong	local06, local09
0cb50     03 00 00 FF 
0cb54     00 64 06 F1 | 	add	objptr, ##1536
0cb58     32 B9 02 FB | 	rdlong	local10, objptr
0cb5c     5C B7 02 F6 | 	mov	local09, local10
0cb60     01 B6 66 F0 | 	shl	local09, #1
0cb64     5C B7 02 F1 | 	add	local09, local10
0cb68     02 B6 66 F0 | 	shl	local09, #2
0cb6c     03 00 00 FF 
0cb70     00 64 86 F1 | 	sub	objptr, ##1536
0cb74     32 B7 02 F1 | 	add	local09, objptr
0cb78     04 B6 06 F1 | 	add	local09, #4
0cb7c     5B B3 62 FC | 	wrlong	local07, local09
0cb80     03 00 00 FF 
0cb84     00 64 06 F1 | 	add	objptr, ##1536
0cb88     32 B9 02 FB | 	rdlong	local10, objptr
0cb8c     5C B7 02 F6 | 	mov	local09, local10
0cb90     01 B6 66 F0 | 	shl	local09, #1
0cb94     5C B7 02 F1 | 	add	local09, local10
0cb98     02 B6 66 F0 | 	shl	local09, #2
0cb9c     03 00 00 FF 
0cba0     00 64 86 F1 | 	sub	objptr, ##1536
0cba4     32 B7 02 F1 | 	add	local09, objptr
0cba8     08 B6 06 F1 | 	add	local09, #8
0cbac     5B BB 62 FC | 	wrlong	local11, local09
0cbb0     03 00 00 FF 
0cbb4     00 64 06 F1 | 	add	objptr, ##1536
0cbb8     32 B1 02 FB | 	rdlong	local06, objptr
0cbbc     01 B0 06 F1 | 	add	local06, #1
0cbc0     32 B1 62 FC | 	wrlong	local06, objptr
0cbc4     13 00 00 FF 
0cbc8     38 64 86 F1 | 	sub	objptr, ##9784
0cbcc     32 B1 02 FB | 	rdlong	local06, objptr
0cbd0     01 B0 06 F1 | 	add	local06, #1
0cbd4     32 B1 62 FC | 	wrlong	local06, objptr
0cbd8     38 00 00 FF 
0cbdc     C4 65 86 F1 | 	sub	objptr, ##29124
0cbe0     DC 01 90 FD | 	jmp	#LR__1053
0cbe4                 | LR__1049
0cbe4     2C AA 06 F6 | 	mov	local03, #44
0cbe8     38 00 00 FF 
0cbec     C4 65 06 F1 | 	add	objptr, ##29124
0cbf0     32 B1 02 FB | 	rdlong	local06, objptr
0cbf4     03 B0 66 F0 | 	shl	local06, #3
0cbf8     02 00 00 FF 
0cbfc     38 64 86 F1 | 	sub	objptr, ##1080
0cc00     32 B1 02 F1 | 	add	local06, objptr
0cc04     58 93 02 FB | 	rdlong	arg01, local06
0cc08     00 94 06 F6 | 	mov	arg02, #0
0cc0c     36 00 00 FF 
0cc10     8C 65 86 F1 | 	sub	objptr, ##28044
0cc14     44 AE B1 FD | 	call	#__system____builtin_atoi
0cc18     3D A7 02 F6 | 	mov	local01, result1
0cc1c     53 B1 02 F6 | 	mov	local06, local01
0cc20     54 B3 02 F6 | 	mov	local07, local02
0cc24     55 BB 02 F6 | 	mov	local11, local03
0cc28     4B 00 00 FF 
0cc2c     FC 65 06 F1 | 	add	objptr, ##38908
0cc30     32 B9 02 FB | 	rdlong	local10, objptr
0cc34     5C B7 02 F6 | 	mov	local09, local10
0cc38     01 B6 66 F0 | 	shl	local09, #1
0cc3c     5C B7 02 F1 | 	add	local09, local10
0cc40     02 B6 66 F0 | 	shl	local09, #2
0cc44     03 00 00 FF 
0cc48     00 64 86 F1 | 	sub	objptr, ##1536
0cc4c     32 B7 02 F1 | 	add	local09, objptr
0cc50     5B B1 62 FC | 	wrlong	local06, local09
0cc54     03 00 00 FF 
0cc58     00 64 06 F1 | 	add	objptr, ##1536
0cc5c     32 B9 02 FB | 	rdlong	local10, objptr
0cc60     5C B7 02 F6 | 	mov	local09, local10
0cc64     01 B6 66 F0 | 	shl	local09, #1
0cc68     5C B7 02 F1 | 	add	local09, local10
0cc6c     02 B6 66 F0 | 	shl	local09, #2
0cc70     03 00 00 FF 
0cc74     00 64 86 F1 | 	sub	objptr, ##1536
0cc78     32 B7 02 F1 | 	add	local09, objptr
0cc7c     04 B6 06 F1 | 	add	local09, #4
0cc80     5B B3 62 FC | 	wrlong	local07, local09
0cc84     03 00 00 FF 
0cc88     00 64 06 F1 | 	add	objptr, ##1536
0cc8c     32 B9 02 FB | 	rdlong	local10, objptr
0cc90     5C B7 02 F6 | 	mov	local09, local10
0cc94     01 B6 66 F0 | 	shl	local09, #1
0cc98     5C B7 02 F1 | 	add	local09, local10
0cc9c     02 B6 66 F0 | 	shl	local09, #2
0cca0     03 00 00 FF 
0cca4     00 64 86 F1 | 	sub	objptr, ##1536
0cca8     32 B7 02 F1 | 	add	local09, objptr
0ccac     08 B6 06 F1 | 	add	local09, #8
0ccb0     5B BB 62 FC | 	wrlong	local11, local09
0ccb4     03 00 00 FF 
0ccb8     00 64 06 F1 | 	add	objptr, ##1536
0ccbc     32 B1 02 FB | 	rdlong	local06, objptr
0ccc0     01 B0 06 F1 | 	add	local06, #1
0ccc4     32 B1 62 FC | 	wrlong	local06, objptr
0ccc8     13 00 00 FF 
0cccc     38 64 86 F1 | 	sub	objptr, ##9784
0ccd0     32 B1 02 FB | 	rdlong	local06, objptr
0ccd4     01 B0 06 F1 | 	add	local06, #1
0ccd8     32 B1 62 FC | 	wrlong	local06, objptr
0ccdc     38 00 00 FF 
0cce0     C4 65 86 F1 | 	sub	objptr, ##29124
0cce4     D8 00 90 FD | 	jmp	#LR__1053
0cce8                 | LR__1050
0cce8     56 93 02 F6 | 	mov	arg01, local04
0ccec     24 04 B0 FD | 	call	#_getvar
0ccf0     38 00 00 FF 
0ccf4     C4 65 06 F1 | 	add	objptr, ##29124
0ccf8     32 B1 02 FB | 	rdlong	local06, objptr
0ccfc     01 B0 06 F1 | 	add	local06, #1
0cd00     32 B1 62 FC | 	wrlong	local06, objptr
0cd04     38 00 00 FF 
0cd08     C4 65 86 F1 | 	sub	objptr, ##29124
0cd0c                 | '     err=getvar(m) : ct+=1 : if err>0 then return err 
0cd0c     01 7A 56 F2 | 	cmps	result1, #1 wc
0cd10     B0 00 90 3D |  if_ae	jmp	#LR__1054
0cd14     A8 00 90 FD | 	jmp	#LR__1053
0cd18                 | LR__1051
0cd18     38 00 00 FF 
0cd1c     C4 65 06 F1 | 	add	objptr, ##29124
0cd20     32 B1 02 FB | 	rdlong	local06, objptr
0cd24     01 B0 06 F1 | 	add	local06, #1
0cd28     32 B1 62 FC | 	wrlong	local06, objptr
0cd2c     38 00 00 FF 
0cd30     C4 65 86 F1 | 	sub	objptr, ##29124
0cd34     20 F1 BF FD | 	call	#_expr
0cd38                 | '     ct+=1
0cd38                 | '     err=expr() : if err>0 then return err 
0cd38     01 7A 56 F2 | 	cmps	result1, #1 wc
0cd3c     84 00 90 3D |  if_ae	jmp	#LR__1054
0cd40                 | '     if lparts(ct).token=token_rpar then ct+=1
0cd40     38 00 00 FF 
0cd44     C4 65 06 F1 | 	add	objptr, ##29124
0cd48     32 BB 02 FB | 	rdlong	local11, objptr
0cd4c     03 BA 66 F0 | 	shl	local11, #3
0cd50     02 00 00 FF 
0cd54     38 64 86 F1 | 	sub	objptr, ##1080
0cd58     32 BB 02 F1 | 	add	local11, objptr
0cd5c     04 BA 06 F1 | 	add	local11, #4
0cd60     5D BB 02 FB | 	rdlong	local11, local11
0cd64     14 BA 0E F2 | 	cmp	local11, #20 wz
0cd68     36 00 00 FF 
0cd6c     8C 65 86 F1 | 	sub	objptr, ##28044
0cd70     4C 00 90 5D |  if_ne	jmp	#LR__1053
0cd74     38 00 00 FF 
0cd78     C4 65 06 F1 | 	add	objptr, ##29124
0cd7c     32 B1 02 FB | 	rdlong	local06, objptr
0cd80     01 B0 06 F1 | 	add	local06, #1
0cd84     32 B1 62 FC | 	wrlong	local06, objptr
0cd88     38 00 00 FF 
0cd8c     C4 65 86 F1 | 	sub	objptr, ##29124
0cd90     2C 00 90 FD | 	jmp	#LR__1053
0cd94                 | LR__1052
0cd94     56 93 02 F6 | 	mov	arg01, local04
0cd98     34 00 B0 FD | 	call	#_getfun
0cd9c     38 00 00 FF 
0cda0     C4 65 06 F1 | 	add	objptr, ##29124
0cda4     32 B1 02 FB | 	rdlong	local06, objptr
0cda8     01 B0 06 F1 | 	add	local06, #1
0cdac     32 B1 62 FC | 	wrlong	local06, objptr
0cdb0     38 00 00 FF 
0cdb4     C4 65 86 F1 | 	sub	objptr, ##29124
0cdb8                 | '     err=getfun(m) : ct+=1 : if err>0 then return err 
0cdb8     01 7A 56 F2 | 	cmps	result1, #1 wc
0cdbc     04 00 90 3D |  if_ae	jmp	#LR__1054
0cdc0                 | LR__1053
0cdc0                 | ' return 0  
0cdc0     00 7A 06 F6 | 	mov	result1, #0
0cdc4                 | LR__1054
0cdc4     E7 F0 03 F6 | 	mov	ptra, fp
0cdc8     F2 00 A0 FD | 	call	#popregs_
0cdcc                 | _getvalue_ret
0cdcc     2D 00 64 FD | 	ret
0cdd0                 | 
0cdd0                 | ' 
0cdd0                 | ' ' Get a function result 
0cdd0                 | ' 
0cdd0                 | ' function getfun(m as integer) as ulong
0cdd0                 | _getfun
0cdd0     0F CA 05 F6 | 	mov	COUNT_, #15
0cdd4     E8 00 A0 FD | 	call	#pushregs_
0cdd8                 | _getfun_enter
0cdd8     49 AD 02 F6 | 	mov	local04, arg01
0cddc     38 00 00 FF 
0cde0     C4 65 06 F1 | 	add	objptr, ##29124
0cde4     32 AF 02 FB | 	rdlong	local05, objptr
0cde8     57 B1 02 F6 | 	mov	local06, local05
0cdec     00 B2 06 F6 | 	mov	local07, #0
0cdf0                 | ' oldct=ct
0cdf0                 | ' numpar=0
0cdf0                 | ' if lparts(ct+1).token=token_lpar then
0cdf0     01 AE 06 F1 | 	add	local05, #1
0cdf4     03 AE 66 F0 | 	shl	local05, #3
0cdf8     02 00 00 FF 
0cdfc     38 64 86 F1 | 	sub	objptr, ##1080
0ce00     32 AF 02 F1 | 	add	local05, objptr
0ce04     04 AE 06 F1 | 	add	local05, #4
0ce08     57 AF 02 FB | 	rdlong	local05, local05
0ce0c     15 AE 0E F2 | 	cmp	local05, #21 wz
0ce10     36 00 00 FF 
0ce14     8C 65 86 F1 | 	sub	objptr, ##28044
0ce18     54 01 90 5D |  if_ne	jmp	#LR__1064
0ce1c     38 00 00 FF 
0ce20     C4 65 06 F1 | 	add	objptr, ##29124
0ce24     32 B5 02 FB | 	rdlong	local08, objptr
0ce28     01 B4 06 F1 | 	add	local08, #1
0ce2c     32 B5 62 FC | 	wrlong	local08, objptr
0ce30     38 00 00 FF 
0ce34     C4 65 86 F1 | 	sub	objptr, ##29124
0ce38                 | '   ct+=1 											' omit this lpar, this is for expr list
0ce38                 | '   do
0ce38                 | LR__1060
0ce38     38 00 00 FF 
0ce3c     C4 65 06 F1 | 	add	objptr, ##29124
0ce40     32 AF 02 FB | 	rdlong	local05, objptr
0ce44     01 AE 06 F1 | 	add	local05, #1
0ce48     32 AF 62 FC | 	wrlong	local05, objptr
0ce4c                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0ce4c                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0ce4c     03 AE 66 F0 | 	shl	local05, #3
0ce50     02 00 00 FF 
0ce54     38 64 86 F1 | 	sub	objptr, ##1080
0ce58     32 AF 02 F1 | 	add	local05, objptr
0ce5c     04 AE 06 F1 | 	add	local05, #4
0ce60     57 B5 02 FB | 	rdlong	local08, local05
0ce64     15 B4 0E F2 | 	cmp	local08, #21 wz
0ce68     36 00 00 FF 
0ce6c     8C 65 86 F1 | 	sub	objptr, ##28044
0ce70     44 00 90 5D |  if_ne	jmp	#LR__1061
0ce74     38 00 00 FF 
0ce78     C4 65 06 F1 | 	add	objptr, ##29124
0ce7c     32 B5 02 FB | 	rdlong	local08, objptr
0ce80     01 B4 06 F1 | 	add	local08, #1
0ce84     32 B5 62 FC | 	wrlong	local08, objptr
0ce88     38 00 00 FF 
0ce8c     C4 65 86 F1 | 	sub	objptr, ##29124
0ce90     C4 EF BF FD | 	call	#_expr
0ce94     3D B7 02 F6 | 	mov	local09, result1
0ce98     38 00 00 FF 
0ce9c     C4 65 06 F1 | 	add	objptr, ##29124
0cea0     32 B5 02 FB | 	rdlong	local08, objptr
0cea4     01 B4 06 F1 | 	add	local08, #1
0cea8     32 B5 62 FC | 	wrlong	local08, objptr
0ceac     38 00 00 FF 
0ceb0     C4 65 86 F1 | 	sub	objptr, ##29124
0ceb4     08 00 90 FD | 	jmp	#LR__1062
0ceb8                 | LR__1061
0ceb8     9C EF BF FD | 	call	#_expr
0cebc     3D B7 02 F6 | 	mov	local09, result1
0cec0                 | LR__1062
0cec0                 | '     if err>0 then return err
0cec0     01 B6 16 F2 | 	cmp	local09, #1 wc
0cec4     5B 7B 02 36 |  if_ae	mov	result1, local09
0cec8     3C 02 90 3D |  if_ae	jmp	#LR__1066
0cecc     01 B2 06 F1 | 	add	local07, #1
0ced0     38 00 00 FF 
0ced4     C4 65 06 F1 | 	add	objptr, ##29124
0ced8     32 AF 02 FB | 	rdlong	local05, objptr
0cedc     03 AE 66 F0 | 	shl	local05, #3
0cee0     02 00 00 FF 
0cee4     38 64 86 F1 | 	sub	objptr, ##1080
0cee8     32 AF 02 F1 | 	add	local05, objptr
0ceec     04 AE 06 F1 | 	add	local05, #4
0cef0     57 B7 02 FB | 	rdlong	local09, local05
0cef4     14 B6 0E F2 | 	cmp	local09, #20 wz
0cef8     36 00 00 FF 
0cefc     8C 65 86 F1 | 	sub	objptr, ##28044
0cf00     34 00 90 AD |  if_e	jmp	#LR__1063
0cf04     38 00 00 FF 
0cf08     C4 65 06 F1 | 	add	objptr, ##29124
0cf0c     32 B7 02 FB | 	rdlong	local09, objptr
0cf10     03 B6 66 F0 | 	shl	local09, #3
0cf14     02 00 00 FF 
0cf18     38 64 86 F1 | 	sub	objptr, ##1080
0cf1c     32 B7 02 F1 | 	add	local09, objptr
0cf20     04 B6 06 F1 | 	add	local09, #4
0cf24     5B B7 02 FB | 	rdlong	local09, local09
0cf28     FE B7 0E F2 | 	cmp	local09, #510 wz
0cf2c     36 00 00 FF 
0cf30     8C 65 86 F1 | 	sub	objptr, ##28044
0cf34     00 FF 9F 5D |  if_ne	jmp	#LR__1060
0cf38                 | LR__1063
0cf38                 | '   if lparts(ct).token=token_end then return 14
0cf38     38 00 00 FF 
0cf3c     C4 65 06 F1 | 	add	objptr, ##29124
0cf40     32 AF 02 FB | 	rdlong	local05, objptr
0cf44     03 AE 66 F0 | 	shl	local05, #3
0cf48     02 00 00 FF 
0cf4c     38 64 86 F1 | 	sub	objptr, ##1080
0cf50     32 AF 02 F1 | 	add	local05, objptr
0cf54     04 AE 06 F1 | 	add	local05, #4
0cf58     57 B7 02 FB | 	rdlong	local09, local05
0cf5c     FE B7 0E F2 | 	cmp	local09, #510 wz
0cf60     36 00 00 FF 
0cf64     8C 65 86 F1 | 	sub	objptr, ##28044
0cf68     0E 7A 06 A6 |  if_e	mov	result1, #14
0cf6c     98 01 90 AD |  if_e	jmp	#LR__1066
0cf70                 | LR__1064
0cf70     59 A7 02 F6 | 	mov	local01, local07
0cf74     03 B0 66 F0 | 	shl	local06, #3
0cf78     36 00 00 FF 
0cf7c     8C 65 06 F1 | 	add	objptr, ##28044
0cf80     32 B1 02 F1 | 	add	local06, objptr
0cf84     04 B0 06 F1 | 	add	local06, #4
0cf88     58 AB 02 FB | 	rdlong	local03, local06
0cf8c     53 B5 02 F6 | 	mov	local08, local01
0cf90     54 B9 02 F6 | 	mov	local10, local02
0cf94     55 BB 02 F6 | 	mov	local11, local03
0cf98     15 00 00 FF 
0cf9c     70 64 06 F1 | 	add	objptr, ##10864
0cfa0     32 BD 02 FB | 	rdlong	local12, objptr
0cfa4     5E BF 02 F6 | 	mov	local13, local12
0cfa8     01 BE 66 F0 | 	shl	local13, #1
0cfac     5E BF 02 F1 | 	add	local13, local12
0cfb0     02 BE 66 F0 | 	shl	local13, #2
0cfb4     03 00 00 FF 
0cfb8     00 64 86 F1 | 	sub	objptr, ##1536
0cfbc     32 BF 02 F1 | 	add	local13, objptr
0cfc0     5F B5 62 FC | 	wrlong	local08, local13
0cfc4     03 00 00 FF 
0cfc8     00 64 06 F1 | 	add	objptr, ##1536
0cfcc     32 B5 02 FB | 	rdlong	local08, objptr
0cfd0     5A C1 02 F6 | 	mov	local14, local08
0cfd4     01 C0 66 F0 | 	shl	local14, #1
0cfd8     5A C1 02 F1 | 	add	local14, local08
0cfdc     02 C0 66 F0 | 	shl	local14, #2
0cfe0     03 00 00 FF 
0cfe4     00 64 86 F1 | 	sub	objptr, ##1536
0cfe8     32 C1 02 F1 | 	add	local14, objptr
0cfec     04 C0 06 F1 | 	add	local14, #4
0cff0     60 B9 62 FC | 	wrlong	local10, local14
0cff4     03 00 00 FF 
0cff8     00 64 06 F1 | 	add	objptr, ##1536
0cffc     32 B5 02 FB | 	rdlong	local08, objptr
0d000     5A C3 02 F6 | 	mov	local15, local08
0d004     01 C2 66 F0 | 	shl	local15, #1
0d008     5A C3 02 F1 | 	add	local15, local08
0d00c     02 C2 66 F0 | 	shl	local15, #2
0d010     03 00 00 FF 
0d014     00 64 86 F1 | 	sub	objptr, ##1536
0d018     32 C3 02 F1 | 	add	local15, objptr
0d01c     08 C2 06 F1 | 	add	local15, #8
0d020     61 BB 62 FC | 	wrlong	local11, local15
0d024     03 00 00 FF 
0d028     00 64 06 F1 | 	add	objptr, ##1536
0d02c     32 B5 02 FB | 	rdlong	local08, objptr
0d030     01 B4 06 F1 | 	add	local08, #1
0d034     32 B5 62 FC | 	wrlong	local08, objptr
0d038     4B 00 00 FF 
0d03c     FC 65 86 F1 | 	sub	objptr, ##38908
0d040                 | ' t2.result.uresult=numpar
0d040                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0d040                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0d040                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0d040     FF FF 7F FF 
0d044     FF AD 0E F2 | 	cmp	local04, ##-1 wz
0d048     B8 00 90 5D |  if_ne	jmp	#LR__1065
0d04c     15 AA 06 F6 | 	mov	local03, #21
0d050     53 B5 02 F6 | 	mov	local08, local01
0d054     54 B9 02 F6 | 	mov	local10, local02
0d058     55 BB 02 F6 | 	mov	local11, local03
0d05c     4B 00 00 FF 
0d060     FC 65 06 F1 | 	add	objptr, ##38908
0d064     32 BD 02 FB | 	rdlong	local12, objptr
0d068     5E BF 02 F6 | 	mov	local13, local12
0d06c     01 BE 66 F0 | 	shl	local13, #1
0d070     5E BF 02 F1 | 	add	local13, local12
0d074     02 BE 66 F0 | 	shl	local13, #2
0d078     03 00 00 FF 
0d07c     00 64 86 F1 | 	sub	objptr, ##1536
0d080     32 BF 02 F1 | 	add	local13, objptr
0d084     5F B5 62 FC | 	wrlong	local08, local13
0d088     03 00 00 FF 
0d08c     00 64 06 F1 | 	add	objptr, ##1536
0d090     32 C3 02 FB | 	rdlong	local15, objptr
0d094     61 C1 02 F6 | 	mov	local14, local15
0d098     01 C0 66 F0 | 	shl	local14, #1
0d09c     61 C1 02 F1 | 	add	local14, local15
0d0a0     02 C0 66 F0 | 	shl	local14, #2
0d0a4     03 00 00 FF 
0d0a8     00 64 86 F1 | 	sub	objptr, ##1536
0d0ac     32 C1 02 F1 | 	add	local14, objptr
0d0b0     04 C0 06 F1 | 	add	local14, #4
0d0b4     60 B9 62 FC | 	wrlong	local10, local14
0d0b8     03 00 00 FF 
0d0bc     00 64 06 F1 | 	add	objptr, ##1536
0d0c0     32 C1 02 FB | 	rdlong	local14, objptr
0d0c4     60 C3 02 F6 | 	mov	local15, local14
0d0c8     01 C2 66 F0 | 	shl	local15, #1
0d0cc     60 C3 02 F1 | 	add	local15, local14
0d0d0     02 C2 66 F0 | 	shl	local15, #2
0d0d4     03 00 00 FF 
0d0d8     00 64 86 F1 | 	sub	objptr, ##1536
0d0dc     32 C3 02 F1 | 	add	local15, objptr
0d0e0     08 C2 06 F1 | 	add	local15, #8
0d0e4     61 BB 62 FC | 	wrlong	local11, local15
0d0e8     03 00 00 FF 
0d0ec     00 64 06 F1 | 	add	objptr, ##1536
0d0f0     32 B5 02 FB | 	rdlong	local08, objptr
0d0f4     01 B4 06 F1 | 	add	local08, #1
0d0f8     32 B5 62 FC | 	wrlong	local08, objptr
0d0fc     4B 00 00 FF 
0d100     FC 65 86 F1 | 	sub	objptr, ##38908
0d104                 | LR__1065
0d104                 | ' return 0
0d104     00 7A 06 F6 | 	mov	result1, #0
0d108                 | LR__1066
0d108     E7 F0 03 F6 | 	mov	ptra, fp
0d10c     F2 00 A0 FD | 	call	#popregs_
0d110                 | _getfun_ret
0d110     2D 00 64 FD | 	ret
0d114                 | 
0d114                 | '   
0d114                 | '   
0d114                 | ' function getvar(m as integer) as ulong
0d114                 | _getvar
0d114     11 CA 05 F6 | 	mov	COUNT_, #17
0d118     E8 00 A0 FD | 	call	#pushregs_
0d11c                 | _getvar_enter
0d11c     49 AD 02 F6 | 	mov	local04, arg01
0d120     38 00 00 FF 
0d124     C4 65 06 F1 | 	add	objptr, ##29124
0d128     32 AF 02 FB | 	rdlong	local05, objptr
0d12c     03 AE 66 F0 | 	shl	local05, #3
0d130     02 00 00 FF 
0d134     38 64 86 F1 | 	sub	objptr, ##1080
0d138     32 AF 02 F1 | 	add	local05, objptr
0d13c     57 B1 02 FB | 	rdlong	local06, local05
0d140     01 B2 66 F6 | 	neg	local07, #1
0d144                 | ' 
0d144                 | ' varname$=lparts(ct).part$
0d144                 | ' j=-1
0d144                 | ' 
0d144                 | ' for i=0 to varnum-1
0d144     00 B4 06 F6 | 	mov	local08, #0
0d148     04 64 86 F1 | 	sub	objptr, #4
0d14c     32 B7 02 FB | 	rdlong	local09, objptr
0d150     36 00 00 FF 
0d154     88 65 86 F1 | 	sub	objptr, ##28040
0d158                 | LR__1070
0d158     5B B5 52 F2 | 	cmps	local08, local09 wc
0d15c     34 00 90 3D |  if_ae	jmp	#LR__1071
0d160                 | '   if variables(i).name=varname$ then j=i : exit
0d160     5A AF 02 F6 | 	mov	local05, local08
0d164     04 AE 66 F0 | 	shl	local05, #4
0d168     32 95 02 F6 | 	mov	arg02, objptr
0d16c     16 00 00 FF 
0d170     78 95 06 F1 | 	add	arg02, ##11640
0d174     4A AF 02 F1 | 	add	local05, arg02
0d178     57 93 02 FB | 	rdlong	arg01, local05
0d17c     58 95 02 F6 | 	mov	arg02, local06
0d180     AC 7B B1 FD | 	call	#__system___string_cmp
0d184     00 7A 0E F2 | 	cmp	result1, #0 wz
0d188     5A B3 02 A6 |  if_e	mov	local07, local08
0d18c     01 B4 06 51 |  if_ne	add	local08, #1
0d190     C4 FF 9F 5D |  if_ne	jmp	#LR__1070
0d194                 | LR__1071
0d194                 | ' if  j=-1 andalso varnum<maxvars then   
0d194     FF FF 7F FF 
0d198     FF B3 0E F2 | 	cmp	local07, ##-1 wz
0d19c     A8 00 90 5D |  if_ne	jmp	#LR__1072
0d1a0     36 00 00 FF 
0d1a4     88 65 06 F1 | 	add	objptr, ##28040
0d1a8     32 B7 02 FB | 	rdlong	local09, objptr
0d1ac     36 00 00 FF 
0d1b0     88 65 86 F1 | 	sub	objptr, ##28040
0d1b4     02 00 00 FF 
0d1b8     00 B6 56 F2 | 	cmps	local09, ##1024 wc
0d1bc     88 00 90 3D |  if_ae	jmp	#LR__1072
0d1c0     36 00 00 FF 
0d1c4     88 65 06 F1 | 	add	objptr, ##28040
0d1c8     32 AF 02 FB | 	rdlong	local05, objptr
0d1cc     04 AE 66 F0 | 	shl	local05, #4
0d1d0     20 00 00 FF 
0d1d4     10 64 86 F1 | 	sub	objptr, ##16400
0d1d8     32 AF 02 F1 | 	add	local05, objptr
0d1dc     57 B1 62 FC | 	wrlong	local06, local05
0d1e0     20 00 00 FF 
0d1e4     10 64 06 F1 | 	add	objptr, ##16400
0d1e8     32 AF 02 FB | 	rdlong	local05, objptr
0d1ec     04 AE 66 F0 | 	shl	local05, #4
0d1f0     20 00 00 FF 
0d1f4     10 64 86 F1 | 	sub	objptr, ##16400
0d1f8     32 AF 02 F1 | 	add	local05, objptr
0d1fc     04 AE 06 F1 | 	add	local05, #4
0d200     57 01 68 FC | 	wrlong	#0, local05
0d204     20 00 00 FF 
0d208     10 64 06 F1 | 	add	objptr, ##16400
0d20c     32 AF 02 FB | 	rdlong	local05, objptr
0d210     04 AE 66 F0 | 	shl	local05, #4
0d214     20 00 00 FF 
0d218     10 64 86 F1 | 	sub	objptr, ##16400
0d21c     32 AF 02 F1 | 	add	local05, objptr
0d220     0C AE 06 F1 | 	add	local05, #12
0d224     57 39 68 FC | 	wrlong	#28, local05
0d228     20 00 00 FF 
0d22c     10 64 06 F1 | 	add	objptr, ##16400
0d230     32 B7 02 FB | 	rdlong	local09, objptr
0d234     5B B3 02 F6 | 	mov	local07, local09
0d238     01 B6 06 F1 | 	add	local09, #1
0d23c     32 B7 62 FC | 	wrlong	local09, objptr
0d240     36 00 00 FF 
0d244     88 65 86 F1 | 	sub	objptr, ##28040
0d248                 | LR__1072
0d248     00 B4 06 F6 | 	mov	local08, #0
0d24c                 | ' numpar=0
0d24c                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0d24c     38 00 00 FF 
0d250     C4 65 06 F1 | 	add	objptr, ##29124
0d254     32 AF 02 FB | 	rdlong	local05, objptr
0d258     01 AE 06 F1 | 	add	local05, #1
0d25c     03 AE 66 F0 | 	shl	local05, #3
0d260     02 00 00 FF 
0d264     38 64 86 F1 | 	sub	objptr, ##1080
0d268     32 AF 02 F1 | 	add	local05, objptr
0d26c     04 AE 06 F1 | 	add	local05, #4
0d270     57 B7 02 FB | 	rdlong	local09, local05
0d274     15 B6 0E F2 | 	cmp	local09, #21 wz
0d278     36 00 00 FF 
0d27c     8C 65 86 F1 | 	sub	objptr, ##28044
0d280     54 01 90 5D |  if_ne	jmp	#LR__1077
0d284     38 00 00 FF 
0d288     C4 65 06 F1 | 	add	objptr, ##29124
0d28c     32 B9 02 FB | 	rdlong	local10, objptr
0d290     01 B8 06 F1 | 	add	local10, #1
0d294     32 B9 62 FC | 	wrlong	local10, objptr
0d298     38 00 00 FF 
0d29c     C4 65 86 F1 | 	sub	objptr, ##29124
0d2a0                 | '   ct+=1 											' omit this lpar, this is for expr list
0d2a0                 | '   do
0d2a0                 | LR__1073
0d2a0     38 00 00 FF 
0d2a4     C4 65 06 F1 | 	add	objptr, ##29124
0d2a8     32 AF 02 FB | 	rdlong	local05, objptr
0d2ac     01 AE 06 F1 | 	add	local05, #1
0d2b0     32 AF 62 FC | 	wrlong	local05, objptr
0d2b4                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0d2b4                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0d2b4     03 AE 66 F0 | 	shl	local05, #3
0d2b8     02 00 00 FF 
0d2bc     38 64 86 F1 | 	sub	objptr, ##1080
0d2c0     32 AF 02 F1 | 	add	local05, objptr
0d2c4     04 AE 06 F1 | 	add	local05, #4
0d2c8     57 B9 02 FB | 	rdlong	local10, local05
0d2cc     15 B8 0E F2 | 	cmp	local10, #21 wz
0d2d0     36 00 00 FF 
0d2d4     8C 65 86 F1 | 	sub	objptr, ##28044
0d2d8     44 00 90 5D |  if_ne	jmp	#LR__1074
0d2dc     38 00 00 FF 
0d2e0     C4 65 06 F1 | 	add	objptr, ##29124
0d2e4     32 B9 02 FB | 	rdlong	local10, objptr
0d2e8     01 B8 06 F1 | 	add	local10, #1
0d2ec     32 B9 62 FC | 	wrlong	local10, objptr
0d2f0     38 00 00 FF 
0d2f4     C4 65 86 F1 | 	sub	objptr, ##29124
0d2f8     5C EB BF FD | 	call	#_expr
0d2fc     3D BB 02 F6 | 	mov	local11, result1
0d300     38 00 00 FF 
0d304     C4 65 06 F1 | 	add	objptr, ##29124
0d308     32 B9 02 FB | 	rdlong	local10, objptr
0d30c     01 B8 06 F1 | 	add	local10, #1
0d310     32 B9 62 FC | 	wrlong	local10, objptr
0d314     38 00 00 FF 
0d318     C4 65 86 F1 | 	sub	objptr, ##29124
0d31c     08 00 90 FD | 	jmp	#LR__1075
0d320                 | LR__1074
0d320     34 EB BF FD | 	call	#_expr
0d324     3D BB 02 F6 | 	mov	local11, result1
0d328                 | LR__1075
0d328                 | '     if err>0 then return err
0d328     01 BA 56 F2 | 	cmps	local11, #1 wc
0d32c     5D 7B 02 36 |  if_ae	mov	result1, local11
0d330     2C 02 90 3D |  if_ae	jmp	#LR__1079
0d334     01 B4 06 F1 | 	add	local08, #1
0d338     38 00 00 FF 
0d33c     C4 65 06 F1 | 	add	objptr, ##29124
0d340     32 AF 02 FB | 	rdlong	local05, objptr
0d344     03 AE 66 F0 | 	shl	local05, #3
0d348     02 00 00 FF 
0d34c     38 64 86 F1 | 	sub	objptr, ##1080
0d350     32 AF 02 F1 | 	add	local05, objptr
0d354     04 AE 06 F1 | 	add	local05, #4
0d358     57 BB 02 FB | 	rdlong	local11, local05
0d35c     14 BA 0E F2 | 	cmp	local11, #20 wz
0d360     36 00 00 FF 
0d364     8C 65 86 F1 | 	sub	objptr, ##28044
0d368     34 00 90 AD |  if_e	jmp	#LR__1076
0d36c     38 00 00 FF 
0d370     C4 65 06 F1 | 	add	objptr, ##29124
0d374     32 BB 02 FB | 	rdlong	local11, objptr
0d378     03 BA 66 F0 | 	shl	local11, #3
0d37c     02 00 00 FF 
0d380     38 64 86 F1 | 	sub	objptr, ##1080
0d384     32 BB 02 F1 | 	add	local11, objptr
0d388     04 BA 06 F1 | 	add	local11, #4
0d38c     5D BB 02 FB | 	rdlong	local11, local11
0d390     FE BB 0E F2 | 	cmp	local11, #510 wz
0d394     36 00 00 FF 
0d398     8C 65 86 F1 | 	sub	objptr, ##28044
0d39c     00 FF 9F 5D |  if_ne	jmp	#LR__1073
0d3a0                 | LR__1076
0d3a0                 | '     if lparts(ct).token=token_end then return 14
0d3a0     38 00 00 FF 
0d3a4     C4 65 06 F1 | 	add	objptr, ##29124
0d3a8     32 AF 02 FB | 	rdlong	local05, objptr
0d3ac     03 AE 66 F0 | 	shl	local05, #3
0d3b0     02 00 00 FF 
0d3b4     38 64 86 F1 | 	sub	objptr, ##1080
0d3b8     32 AF 02 F1 | 	add	local05, objptr
0d3bc     04 AE 06 F1 | 	add	local05, #4
0d3c0     57 BB 02 FB | 	rdlong	local11, local05
0d3c4     FE BB 0E F2 | 	cmp	local11, #510 wz
0d3c8     36 00 00 FF 
0d3cc     8C 65 86 F1 | 	sub	objptr, ##28044
0d3d0     0E 7A 06 A6 |  if_e	mov	result1, #14
0d3d4     88 01 90 AD |  if_e	jmp	#LR__1079
0d3d8                 | LR__1077
0d3d8     5A A9 02 F6 | 	mov	local02, local08
0d3dc     11 AA 06 F6 | 	mov	local03, #17
0d3e0     59 A7 02 F6 | 	mov	local01, local07
0d3e4     53 B9 02 F6 | 	mov	local10, local01
0d3e8     54 BD 02 F6 | 	mov	local12, local02
0d3ec     55 BF 02 F6 | 	mov	local13, local03
0d3f0     4B 00 00 FF 
0d3f4     FC 65 06 F1 | 	add	objptr, ##38908
0d3f8     32 C1 02 FB | 	rdlong	local14, objptr
0d3fc     60 C3 02 F6 | 	mov	local15, local14
0d400     01 C2 66 F0 | 	shl	local15, #1
0d404     60 C3 02 F1 | 	add	local15, local14
0d408     02 C2 66 F0 | 	shl	local15, #2
0d40c     03 00 00 FF 
0d410     00 64 86 F1 | 	sub	objptr, ##1536
0d414     32 C3 02 F1 | 	add	local15, objptr
0d418     61 B9 62 FC | 	wrlong	local10, local15
0d41c     03 00 00 FF 
0d420     00 64 06 F1 | 	add	objptr, ##1536
0d424     32 B9 02 FB | 	rdlong	local10, objptr
0d428     5C C5 02 F6 | 	mov	local16, local10
0d42c     01 C4 66 F0 | 	shl	local16, #1
0d430     5C C5 02 F1 | 	add	local16, local10
0d434     02 C4 66 F0 | 	shl	local16, #2
0d438     03 00 00 FF 
0d43c     00 64 86 F1 | 	sub	objptr, ##1536
0d440     32 C5 02 F1 | 	add	local16, objptr
0d444     04 C4 06 F1 | 	add	local16, #4
0d448     62 BD 62 FC | 	wrlong	local12, local16
0d44c     03 00 00 FF 
0d450     00 64 06 F1 | 	add	objptr, ##1536
0d454     32 B9 02 FB | 	rdlong	local10, objptr
0d458     5C C7 02 F6 | 	mov	local17, local10
0d45c     01 C6 66 F0 | 	shl	local17, #1
0d460     5C C7 02 F1 | 	add	local17, local10
0d464     02 C6 66 F0 | 	shl	local17, #2
0d468     03 00 00 FF 
0d46c     00 64 86 F1 | 	sub	objptr, ##1536
0d470     32 C7 02 F1 | 	add	local17, objptr
0d474     08 C6 06 F1 | 	add	local17, #8
0d478     63 BF 62 FC | 	wrlong	local13, local17
0d47c     03 00 00 FF 
0d480     00 64 06 F1 | 	add	objptr, ##1536
0d484     32 B9 02 FB | 	rdlong	local10, objptr
0d488     01 B8 06 F1 | 	add	local10, #1
0d48c     32 B9 62 FC | 	wrlong	local10, objptr
0d490     4B 00 00 FF 
0d494     FC 65 86 F1 | 	sub	objptr, ##38908
0d498                 | ' t2.result.twowords(1)=numpar
0d498                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0d498                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0d498                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0d498     FF FF 7F FF 
0d49c     FF AD 0E F2 | 	cmp	local04, ##-1 wz
0d4a0     B8 00 90 5D |  if_ne	jmp	#LR__1078
0d4a4     15 AA 06 F6 | 	mov	local03, #21
0d4a8     53 B9 02 F6 | 	mov	local10, local01
0d4ac     54 BD 02 F6 | 	mov	local12, local02
0d4b0     55 BF 02 F6 | 	mov	local13, local03
0d4b4     4B 00 00 FF 
0d4b8     FC 65 06 F1 | 	add	objptr, ##38908
0d4bc     32 C1 02 FB | 	rdlong	local14, objptr
0d4c0     60 C3 02 F6 | 	mov	local15, local14
0d4c4     01 C2 66 F0 | 	shl	local15, #1
0d4c8     60 C3 02 F1 | 	add	local15, local14
0d4cc     02 C2 66 F0 | 	shl	local15, #2
0d4d0     03 00 00 FF 
0d4d4     00 64 86 F1 | 	sub	objptr, ##1536
0d4d8     32 C3 02 F1 | 	add	local15, objptr
0d4dc     61 B9 62 FC | 	wrlong	local10, local15
0d4e0     03 00 00 FF 
0d4e4     00 64 06 F1 | 	add	objptr, ##1536
0d4e8     32 C7 02 FB | 	rdlong	local17, objptr
0d4ec     63 C5 02 F6 | 	mov	local16, local17
0d4f0     01 C4 66 F0 | 	shl	local16, #1
0d4f4     63 C5 02 F1 | 	add	local16, local17
0d4f8     02 C4 66 F0 | 	shl	local16, #2
0d4fc     03 00 00 FF 
0d500     00 64 86 F1 | 	sub	objptr, ##1536
0d504     32 C5 02 F1 | 	add	local16, objptr
0d508     04 C4 06 F1 | 	add	local16, #4
0d50c     62 BD 62 FC | 	wrlong	local12, local16
0d510     03 00 00 FF 
0d514     00 64 06 F1 | 	add	objptr, ##1536
0d518     32 C5 02 FB | 	rdlong	local16, objptr
0d51c     62 C7 02 F6 | 	mov	local17, local16
0d520     01 C6 66 F0 | 	shl	local17, #1
0d524     62 C7 02 F1 | 	add	local17, local16
0d528     02 C6 66 F0 | 	shl	local17, #2
0d52c     03 00 00 FF 
0d530     00 64 86 F1 | 	sub	objptr, ##1536
0d534     32 C7 02 F1 | 	add	local17, objptr
0d538     08 C6 06 F1 | 	add	local17, #8
0d53c     63 BF 62 FC | 	wrlong	local13, local17
0d540     03 00 00 FF 
0d544     00 64 06 F1 | 	add	objptr, ##1536
0d548     32 B9 02 FB | 	rdlong	local10, objptr
0d54c     01 B8 06 F1 | 	add	local10, #1
0d550     32 B9 62 FC | 	wrlong	local10, objptr
0d554     4B 00 00 FF 
0d558     FC 65 86 F1 | 	sub	objptr, ##38908
0d55c                 | LR__1078
0d55c                 | ' return 0
0d55c     00 7A 06 F6 | 	mov	result1, #0
0d560                 | LR__1079
0d560     E7 F0 03 F6 | 	mov	ptra, fp
0d564     F2 00 A0 FD | 	call	#popregs_
0d568                 | _getvar_ret
0d568     2D 00 64 FD | 	ret
0d56c                 | 
0d56c                 | ' 
0d56c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d56c                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0d56c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d56c                 | ' 
0d56c                 | ' 
0d56c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d56c                 | ' '                                                                                                                                       -
0d56c                 | ' '                                              RUNTIME STARTS HERE                                                                      - 
0d56c                 | ' '                                                                                                                                       -
0d56c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d56c                 | ' 
0d56c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0d56c                 | ' '----------------------------------------- A main execute line function ----------------------------------------------------------------
0d56c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0d56c                 | ' 
0d56c                 | ' function execute_line (astart=0 as integer) as integer
0d56c                 | _execute_line
0d56c     04 CA 05 F6 | 	mov	COUNT_, #4
0d570     E8 00 A0 FD | 	call	#pushregs_
0d574     52 00 00 FF 
0d578     3C 64 06 F1 | 	add	objptr, ##42044
0d57c     32 01 68 FC | 	wrlong	#0, objptr
0d580                 | ' 
0d580                 | ' runptr2=0
0d580                 | ' for lineptr_e=astart to lineptr-1
0d580     06 00 00 FF 
0d584     3C 64 86 F1 | 	sub	objptr, ##3132
0d588     32 93 62 FC | 	wrlong	arg01, objptr
0d58c     04 64 86 F1 | 	sub	objptr, #4
0d590     32 A7 02 FB | 	rdlong	local01, objptr
0d594     4B 00 00 FF 
0d598     FC 65 86 F1 | 	sub	objptr, ##38908
0d59c                 | LR__1080
0d59c     4C 00 00 FF 
0d5a0     00 64 06 F1 | 	add	objptr, ##38912
0d5a4     32 7B 02 FB | 	rdlong	result1, objptr
0d5a8     4C 00 00 FF 
0d5ac     00 64 86 F1 | 	sub	objptr, ##38912
0d5b0     53 7B 52 F2 | 	cmps	result1, local01 wc
0d5b4     98 00 90 3D |  if_ae	jmp	#LR__1081
0d5b8     4C 00 00 FF 
0d5bc     00 64 06 F1 | 	add	objptr, ##38912
0d5c0     32 7B 02 FB | 	rdlong	result1, objptr
0d5c4     3D A9 02 F6 | 	mov	local02, result1
0d5c8     01 A8 66 F0 | 	shl	local02, #1
0d5cc     3D A9 02 F1 | 	add	local02, result1
0d5d0     02 A8 66 F0 | 	shl	local02, #2
0d5d4     03 00 00 FF 
0d5d8     04 64 86 F1 | 	sub	objptr, ##1540
0d5dc     32 A9 02 F1 | 	add	local02, objptr
0d5e0     08 A8 06 F1 | 	add	local02, #8
0d5e4     54 A9 02 FB | 	rdlong	local02, local02
0d5e8     54 A9 E2 F8 | 	getbyte	local02, local02, #0
0d5ec     02 A8 66 F0 | 	shl	local02, #2
0d5f0     04 00 00 FF 
0d5f4     1C 64 86 F1 | 	sub	objptr, ##2076
0d5f8     32 A9 02 F1 | 	add	local02, objptr
0d5fc     54 A9 02 FB | 	rdlong	local02, local02
0d600     54 AB 02 F6 | 	mov	local03, local02
0d604     13 A8 46 F7 | 	zerox	local02, #19
0d608     14 AA 46 F0 | 	shr	local03, #20
0d60c     02 AA 66 F0 | 	shl	local03, #2
0d610     2D AB 02 F1 | 	add	local03, __methods__
0d614     55 AB 02 FB | 	rdlong	local03, local03
0d618     44 00 00 FF 
0d61c     E0 65 86 F1 | 	sub	objptr, ##35296
0d620     32 AD 02 F6 | 	mov	local04, objptr
0d624     54 65 02 F6 | 	mov	objptr, local02
0d628     2D AA 62 FD | 	call	local03
0d62c     56 65 02 F6 | 	mov	objptr, local04
0d630     4C 00 00 FF 
0d634     00 64 06 F1 | 	add	objptr, ##38912
0d638     32 AD 02 FB | 	rdlong	local04, objptr
0d63c     01 AC 06 F1 | 	add	local04, #1
0d640     32 AD 62 FC | 	wrlong	local04, objptr
0d644     4C 00 00 FF 
0d648     00 64 86 F1 | 	sub	objptr, ##38912
0d64c     4C FF 9F FD | 	jmp	#LR__1080
0d650                 | LR__1081
0d650                 | ' return runptr2
0d650     52 00 00 FF 
0d654     3C 64 06 F1 | 	add	objptr, ##42044
0d658     32 7B 02 FB | 	rdlong	result1, objptr
0d65c     52 00 00 FF 
0d660     3C 64 86 F1 | 	sub	objptr, ##42044
0d664     E7 F0 03 F6 | 	mov	ptra, fp
0d668     F2 00 A0 FD | 	call	#popregs_
0d66c                 | _execute_line_ret
0d66c     2D 00 64 FD | 	ret
0d670                 | 
0d670                 | ' 
0d670                 | ' 
0d670                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d670                 | ' '--------------------------------------- Runtime helper functions -----------------------------------------------------------------------
0d670                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d670                 | ' 
0d670                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0d670                 | ' 
0d670                 | ' function pop() as expr_result
0d670                 | _pop
0d670                 | ' if stackpointer=0 then
0d670     44 00 00 FF 
0d674     D8 65 06 F1 | 	add	objptr, ##35288
0d678     32 7B 0A FB | 	rdlong	result1, objptr wz
0d67c     44 00 00 FF 
0d680     D8 65 86 F1 | 	sub	objptr, ##35288
0d684     FF 84 06 A6 |  if_e	mov	_var03, #255
0d688     18 80 06 A6 |  if_e	mov	_var01, #24
0d68c     60 00 90 AD |  if_e	jmp	#LR__1090
0d690     44 00 00 FF 
0d694     D8 65 06 F1 | 	add	objptr, ##35288
0d698     32 7B 02 FB | 	rdlong	result1, objptr
0d69c     01 7A 86 F1 | 	sub	result1, #1
0d6a0     32 7B 62 FC | 	wrlong	result1, objptr
0d6a4     3D 7F 02 F6 | 	mov	result3, result1
0d6a8     01 7E 66 F0 | 	shl	result3, #1
0d6ac     3D 7F 02 F1 | 	add	result3, result1
0d6b0     02 7E 66 F0 | 	shl	result3, #2
0d6b4     0C 00 00 FF 
0d6b8     0C 64 86 F1 | 	sub	objptr, ##6156
0d6bc     32 7F 02 F1 | 	add	result3, objptr
0d6c0     3F 81 02 FB | 	rdlong	_var01, result3
0d6c4     04 7E 06 F1 | 	add	result3, #4
0d6c8     3F 83 02 FB | 	rdlong	_var02, result3
0d6cc     3D 7D 02 F6 | 	mov	result2, result1
0d6d0     01 7C 66 F0 | 	shl	result2, #1
0d6d4     3D 7D 02 F1 | 	add	result2, result1
0d6d8     02 7C 66 F0 | 	shl	result2, #2
0d6dc     32 7D 02 F1 | 	add	result2, objptr
0d6e0     08 7C 06 F1 | 	add	result2, #8
0d6e4     3E 85 02 FB | 	rdlong	_var03, result2
0d6e8     38 00 00 FF 
0d6ec     CC 65 86 F1 | 	sub	objptr, ##29132
0d6f0                 | LR__1090
0d6f0                 | ' return t1
0d6f0     41 7D 02 F6 | 	mov	result2, _var02
0d6f4     42 7F 02 F6 | 	mov	result3, _var03
0d6f8     40 7B 02 F6 | 	mov	result1, _var01
0d6fc                 | _pop_ret
0d6fc     2D 00 64 FD | 	ret
0d700                 | 
0d700                 | ' 
0d700                 | ' sub push(t1 as expr_result )
0d700                 | _push
0d700                 | ' if stackpointer<maxstack then 
0d700     44 00 00 FF 
0d704     D8 65 06 F1 | 	add	objptr, ##35288
0d708     32 81 02 FB | 	rdlong	_var01, objptr
0d70c     44 00 00 FF 
0d710     D8 65 86 F1 | 	sub	objptr, ##35288
0d714     01 00 00 FF 
0d718     00 80 56 F2 | 	cmps	_var01, ##512 wc
0d71c     BC 00 90 3D |  if_ae	jmp	#LR__1100
0d720     49 81 02 FB | 	rdlong	_var01, arg01
0d724     04 92 06 F1 | 	add	arg01, #4
0d728     49 83 02 FB | 	rdlong	_var02, arg01
0d72c     04 92 06 F1 | 	add	arg01, #4
0d730     49 93 02 FB | 	rdlong	arg01, arg01
0d734     44 00 00 FF 
0d738     D8 65 06 F1 | 	add	objptr, ##35288
0d73c     32 85 02 FB | 	rdlong	_var03, objptr
0d740     42 87 02 F6 | 	mov	_var04, _var03
0d744     01 86 66 F0 | 	shl	_var04, #1
0d748     42 87 02 F1 | 	add	_var04, _var03
0d74c     02 86 66 F0 | 	shl	_var04, #2
0d750     0C 00 00 FF 
0d754     0C 64 86 F1 | 	sub	objptr, ##6156
0d758     32 87 02 F1 | 	add	_var04, objptr
0d75c     43 81 62 FC | 	wrlong	_var01, _var04
0d760     0C 00 00 FF 
0d764     0C 64 06 F1 | 	add	objptr, ##6156
0d768     32 87 02 FB | 	rdlong	_var04, objptr
0d76c     43 85 02 F6 | 	mov	_var03, _var04
0d770     01 84 66 F0 | 	shl	_var03, #1
0d774     43 85 02 F1 | 	add	_var03, _var04
0d778     02 84 66 F0 | 	shl	_var03, #2
0d77c     0C 00 00 FF 
0d780     0C 64 86 F1 | 	sub	objptr, ##6156
0d784     32 85 02 F1 | 	add	_var03, objptr
0d788     04 84 06 F1 | 	add	_var03, #4
0d78c     42 83 62 FC | 	wrlong	_var02, _var03
0d790     0C 00 00 FF 
0d794     0C 64 06 F1 | 	add	objptr, ##6156
0d798     32 87 02 FB | 	rdlong	_var04, objptr
0d79c     43 85 02 F6 | 	mov	_var03, _var04
0d7a0     01 84 66 F0 | 	shl	_var03, #1
0d7a4     43 85 02 F1 | 	add	_var03, _var04
0d7a8     02 84 66 F0 | 	shl	_var03, #2
0d7ac     0C 00 00 FF 
0d7b0     0C 64 86 F1 | 	sub	objptr, ##6156
0d7b4     32 85 02 F1 | 	add	_var03, objptr
0d7b8     08 84 06 F1 | 	add	_var03, #8
0d7bc     42 93 62 FC | 	wrlong	arg01, _var03
0d7c0     0C 00 00 FF 
0d7c4     0C 64 06 F1 | 	add	objptr, ##6156
0d7c8     32 81 02 FB | 	rdlong	_var01, objptr
0d7cc     01 80 06 F1 | 	add	_var01, #1
0d7d0     32 81 62 FC | 	wrlong	_var01, objptr
0d7d4     44 00 00 FF 
0d7d8     D8 65 86 F1 | 	sub	objptr, ##35288
0d7dc                 | LR__1100
0d7dc                 | _push_ret
0d7dc     2D 00 64 FD | 	ret
0d7e0                 | 
0d7e0                 | ' 
0d7e0                 | ' ' -------------------------------- Runtime converting functions
0d7e0                 | ' 
0d7e0                 | ' ' converts the PSRAM based string to 'normal' string. A PSRAM pointer at input, a string at output
0d7e0                 | ' 
0d7e0                 | ' function  convertstring(psaddr as ulong) as string
0d7e0                 | _convertstring
0d7e0     04 CA 05 F6 | 	mov	COUNT_, #4
0d7e4     E8 00 A0 FD | 	call	#pushregs_
0d7e8     49 A7 02 F6 | 	mov	local01, arg01
0d7ec     04 3B B1 FD | 	call	#_pslpeek
0d7f0     3D A9 02 F6 | 	mov	local02, result1
0d7f4     97 01 00 FF 
0d7f8     DB AB 06 F6 | 	mov	local03, ##@LR__5952
0d7fc                 | ' l=pslpeek(psaddr) 
0d7fc                 | ' s="" 
0d7fc                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0d7fc     01 AC 06 F6 | 	mov	local04, #1
0d800     01 A8 06 F1 | 	add	local02, #1
0d804                 | LR__1110
0d804     54 AD 52 F2 | 	cmps	local04, local02 wc
0d808     30 00 90 3D |  if_ae	jmp	#LR__1111
0d80c     53 93 02 F6 | 	mov	arg01, local01
0d810     03 92 06 F1 | 	add	arg01, #3
0d814     56 93 02 F1 | 	add	arg01, local04
0d818     90 3A B1 FD | 	call	#_pspeek
0d81c     3D 93 E2 F8 | 	getbyte	arg01, result1, #0
0d820     50 8F B1 FD | 	call	#__system__Chr_S
0d824     3D 95 02 F6 | 	mov	arg02, result1
0d828     55 93 02 F6 | 	mov	arg01, local03
0d82c     34 75 B1 FD | 	call	#__system___string_concat
0d830     3D AB 02 F6 | 	mov	local03, result1
0d834     01 AC 06 F1 | 	add	local04, #1
0d838     C8 FF 9F FD | 	jmp	#LR__1110
0d83c                 | LR__1111
0d83c                 | ' return s
0d83c     55 7B 02 F6 | 	mov	result1, local03
0d840     E7 F0 03 F6 | 	mov	ptra, fp
0d844     F2 00 A0 FD | 	call	#popregs_
0d848                 | _convertstring_ret
0d848     2D 00 64 FD | 	ret
0d84c                 | 
0d84c                 | ' 
0d84c                 | ' ' converts a variable to an integer
0d84c                 | ' 
0d84c                 | ' function converttoint (t1 as expr_result) as integer 
0d84c                 | _converttoint
0d84c     02 CA 05 F6 | 	mov	COUNT_, #2
0d850     E8 00 A0 FD | 	call	#pushregs_
0d854     49 A7 02 F6 | 	mov	local01, arg01
0d858                 | ' 
0d858                 | ' select case t1.result_type
0d858     08 A6 06 F1 | 	add	local01, #8
0d85c     53 A9 02 FB | 	rdlong	local02, local01
0d860     08 A6 86 F1 | 	sub	local01, #8
0d864     1C A8 0E F2 | 	cmp	local02, #28 wz
0d868     2C 00 90 AD |  if_e	jmp	#LR__1120
0d86c     1D A8 0E F2 | 	cmp	local02, #29 wz
0d870     2C 00 90 AD |  if_e	jmp	#LR__1121
0d874     1E A8 0E F2 | 	cmp	local02, #30 wz
0d878     2C 00 90 AD |  if_e	jmp	#LR__1122
0d87c     1F A8 0E F2 | 	cmp	local02, #31 wz
0d880     34 00 90 AD |  if_e	jmp	#LR__1123
0d884     2B A8 0E F2 | 	cmp	local02, #43 wz
0d888     44 00 90 AD |  if_e	jmp	#LR__1124
0d88c     2C A8 0E F2 | 	cmp	local02, #44 wz
0d890     5C 00 90 AD |  if_e	jmp	#LR__1125
0d894     60 00 90 FD | 	jmp	#LR__1126
0d898                 | LR__1120
0d898     53 7B 02 FB | 	rdlong	result1, local01
0d89c     5C 00 90 FD | 	jmp	#LR__1127
0d8a0                 | LR__1121
0d8a0     53 7B 02 FB | 	rdlong	result1, local01
0d8a4     54 00 90 FD | 	jmp	#LR__1127
0d8a8                 | LR__1122
0d8a8     53 93 02 FB | 	rdlong	arg01, local01
0d8ac     01 94 06 F6 | 	mov	arg02, #1
0d8b0     EC 9F B1 FD | 	call	#__system___float_tointeger
0d8b4     44 00 90 FD | 	jmp	#LR__1127
0d8b8                 | LR__1123
0d8b8     53 93 02 FB | 	rdlong	arg01, local01
0d8bc     34 A3 B1 FD | 	call	#__system____builtin_atof
0d8c0     3D 93 02 F6 | 	mov	arg01, result1
0d8c4     01 94 06 F6 | 	mov	arg02, #1
0d8c8     D4 9F B1 FD | 	call	#__system___float_tointeger
0d8cc     2C 00 90 FD | 	jmp	#LR__1127
0d8d0                 | LR__1124
0d8d0     53 93 02 FB | 	rdlong	arg01, local01
0d8d4     08 FF BF FD | 	call	#_convertstring
0d8d8     3D 93 02 F6 | 	mov	arg01, result1
0d8dc     14 A3 B1 FD | 	call	#__system____builtin_atof
0d8e0     3D 93 02 F6 | 	mov	arg01, result1
0d8e4     01 94 06 F6 | 	mov	arg02, #1
0d8e8     B4 9F B1 FD | 	call	#__system___float_tointeger
0d8ec     0C 00 90 FD | 	jmp	#LR__1127
0d8f0                 | LR__1125
0d8f0     53 7B 02 FB | 	rdlong	result1, local01
0d8f4     04 00 90 FD | 	jmp	#LR__1127
0d8f8                 | LR__1126
0d8f8     00 7A 06 F6 | 	mov	result1, #0
0d8fc                 | LR__1127
0d8fc     E7 F0 03 F6 | 	mov	ptra, fp
0d900     F2 00 A0 FD | 	call	#popregs_
0d904                 | _converttoint_ret
0d904     2D 00 64 FD | 	ret
0d908                 | 
0d908                 | ' 
0d908                 | ' ' converts a variable to float
0d908                 | ' 
0d908                 | ' function converttofloat (t1 as expr_result) as single
0d908                 | _converttofloat
0d908     03 CA 05 F6 | 	mov	COUNT_, #3
0d90c     E8 00 A0 FD | 	call	#pushregs_
0d910     49 A7 02 F6 | 	mov	local01, arg01
0d914                 | ' 
0d914                 | ' select case t1.result_type
0d914     08 A6 06 F1 | 	add	local01, #8
0d918     53 A9 02 FB | 	rdlong	local02, local01
0d91c     08 A6 86 F1 | 	sub	local01, #8
0d920     1C A8 0E F2 | 	cmp	local02, #28 wz
0d924     24 00 90 AD |  if_e	jmp	#LR__1130
0d928     1D A8 0E F2 | 	cmp	local02, #29 wz
0d92c     38 00 90 AD |  if_e	jmp	#LR__1131
0d930     1E A8 0E F2 | 	cmp	local02, #30 wz
0d934     3C 00 90 AD |  if_e	jmp	#LR__1132
0d938     1F A8 0E F2 | 	cmp	local02, #31 wz
0d93c     3C 00 90 AD |  if_e	jmp	#LR__1133
0d940     2B A8 0E F2 | 	cmp	local02, #43 wz
0d944     40 00 90 AD |  if_e	jmp	#LR__1134
0d948     50 00 90 FD | 	jmp	#LR__1135
0d94c                 | LR__1130
0d94c     53 93 02 FB | 	rdlong	arg01, local01
0d950     49 93 52 F6 | 	abs	arg01, arg01 wc
0d954     1F AA C6 C9 |  if_b	decod	local03, #31
0d958     00 AA 06 36 |  if_ae	mov	local03, #0
0d95c     74 96 B1 FD | 	call	#__system___float_fromuns
0d960     55 7B 62 F5 | 	xor	result1, local03
0d964     38 00 90 FD | 	jmp	#LR__1136
0d968                 | LR__1131
0d968     53 93 02 FB | 	rdlong	arg01, local01
0d96c     64 96 B1 FD | 	call	#__system___float_fromuns
0d970     2C 00 90 FD | 	jmp	#LR__1136
0d974                 | LR__1132
0d974     53 7B 02 FB | 	rdlong	result1, local01
0d978     24 00 90 FD | 	jmp	#LR__1136
0d97c                 | LR__1133
0d97c     53 93 02 FB | 	rdlong	arg01, local01
0d980     70 A2 B1 FD | 	call	#__system____builtin_atof
0d984     18 00 90 FD | 	jmp	#LR__1136
0d988                 | LR__1134
0d988     53 93 02 FB | 	rdlong	arg01, local01
0d98c     50 FE BF FD | 	call	#_convertstring
0d990     3D 93 02 F6 | 	mov	arg01, result1
0d994     5C A2 B1 FD | 	call	#__system____builtin_atof
0d998     04 00 90 FD | 	jmp	#LR__1136
0d99c                 | LR__1135
0d99c     00 7A 06 F6 | 	mov	result1, #0
0d9a0                 | LR__1136
0d9a0     E7 F0 03 F6 | 	mov	ptra, fp
0d9a4     F2 00 A0 FD | 	call	#popregs_
0d9a8                 | _converttofloat_ret
0d9a8     2D 00 64 FD | 	ret
0d9ac                 | 
0d9ac                 | ' 
0d9ac                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d9ac                 | ' '----- End of cassette procedures -------------------------------------------------------------------------------------------------------
0d9ac                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d9ac                 | ' 
0d9ac                 | ' 
0d9ac                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d9ac                 | ' '--------------------------------------- Runtime functions ------------------------------------------------------------------------------
0d9ac                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d9ac                 | ' 
0d9ac                 | ' '-------------------- abs
0d9ac                 | ' 
0d9ac                 | ' sub do_abs
0d9ac                 | _do_abs
0d9ac     01 CA 05 F6 | 	mov	COUNT_, #1
0d9b0     E8 00 A0 FD | 	call	#pushregs_
0d9b4     0C F0 07 F1 | 	add	ptra, #12
0d9b8     B4 FC BF FD | 	call	#_pop
0d9bc     3F A7 02 F6 | 	mov	local01, result3
0d9c0     E7 7A 62 FC | 	wrlong	result1, fp
0d9c4     04 CE 05 F1 | 	add	fp, #4
0d9c8     E7 7C 62 FC | 	wrlong	result2, fp
0d9cc     04 CE 05 F1 | 	add	fp, #4
0d9d0     E7 A6 62 FC | 	wrlong	local01, fp
0d9d4                 | ' 
0d9d4                 | ' t1=pop()
0d9d4                 | ' if t1.result_type=result_int then 
0d9d4     08 CE 85 F1 | 	sub	fp, #8
0d9d8     1C A6 0E F2 | 	cmp	local01, #28 wz
0d9dc     E7 92 02 AB |  if_e	rdlong	arg01, fp
0d9e0     49 A7 42 A6 |  if_e	abs	local01, arg01
0d9e4     E7 A6 62 AC |  if_e	wrlong	local01, fp
0d9e8     2C 00 90 AD |  if_e	jmp	#LR__1140
0d9ec     08 CE 05 F1 | 	add	fp, #8
0d9f0     E7 A6 02 FB | 	rdlong	local01, fp
0d9f4     08 CE 85 F1 | 	sub	fp, #8
0d9f8     1E A6 0E F2 | 	cmp	local01, #30 wz
0d9fc     E7 7A 02 AB |  if_e	rdlong	result1, fp
0da00     1F 7A 06 A4 |  if_e	bitl	result1, #31
0da04     E7 7A 62 AC |  if_e	wrlong	result1, fp
0da08     08 CE 05 51 |  if_ne	add	fp, #8
0da0c     E7 FE 69 5C |  if_ne	wrlong	#255, fp
0da10     08 CE 85 51 |  if_ne	sub	fp, #8
0da14     E7 50 68 5C |  if_ne	wrlong	#40, fp
0da18                 | LR__1140
0da18     E7 92 02 F6 | 	mov	arg01, fp
0da1c     E0 FC BF FD | 	call	#_push
0da20     E7 F0 03 F6 | 	mov	ptra, fp
0da24     F2 00 A0 FD | 	call	#popregs_
0da28                 | _do_abs_ret
0da28     2D 00 64 FD | 	ret
0da2c                 | 
0da2c                 | ' 
0da2c                 | ' '-------------------- acos
0da2c                 | ' 
0da2c                 | ' sub do_acos
0da2c                 | _do_acos
0da2c     00 CA 05 F6 | 	mov	COUNT_, #0
0da30     E8 00 A0 FD | 	call	#pushregs_
0da34     10 F0 07 F1 | 	add	ptra, #16
0da38     4C 00 00 FF 
0da3c     00 64 06 F1 | 	add	objptr, ##38912
0da40     32 97 02 FB | 	rdlong	arg03, objptr
0da44     4B 95 02 F6 | 	mov	arg02, arg03
0da48     01 94 66 F0 | 	shl	arg02, #1
0da4c     4B 95 02 F1 | 	add	arg02, arg03
0da50     02 94 66 F0 | 	shl	arg02, #2
0da54     03 00 00 FF 
0da58     04 64 86 F1 | 	sub	objptr, ##1540
0da5c     32 95 02 F1 | 	add	arg02, objptr
0da60     4A 97 02 FB | 	rdlong	arg03, arg02
0da64                 | ' 
0da64                 | ' numpar=compiledline(lineptr_e).result.uresult
0da64                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
0da64     02 96 16 F2 | 	cmp	arg03, #2 wc
0da68     48 00 00 FF 
0da6c     FC 65 86 F1 | 	sub	objptr, ##37372
0da70     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
0da74     40 00 90 4D |  if_c_and_nz	jmp	#LR__1150
0da78     00 92 06 F6 | 	mov	arg01, #0
0da7c     0C C8 B1 FD | 	call	#__system___getiolock_0622
0da80     3D 93 02 F6 | 	mov	arg01, result1
0da84     80 72 B1 FD | 	call	#__system___lockmem
0da88     97 01 00 FF 
0da8c     DC 95 06 F6 | 	mov	arg02, ##@LR__5953
0da90     00 92 06 F6 | 	mov	arg01, #0
0da94     00 96 06 F6 | 	mov	arg03, #0
0da98     60 7F B1 FD | 	call	#__system___basic_print_string
0da9c     00 92 06 F6 | 	mov	arg01, #0
0daa0     E8 C7 B1 FD | 	call	#__system___getiolock_0622
0daa4     3D 01 68 FC | 	wrlong	#0, result1
0daa8     27 92 06 F6 | 	mov	arg01, #39
0daac     00 94 06 F6 | 	mov	arg02, #0
0dab0     84 35 B1 FD | 	call	#_printerror
0dab4     64 00 90 FD | 	jmp	#LR__1151
0dab8                 | LR__1150
0dab8     B4 FB BF FD | 	call	#_pop
0dabc     3F 97 02 F6 | 	mov	arg03, result3
0dac0     E7 7A 62 FC | 	wrlong	result1, fp
0dac4     04 CE 05 F1 | 	add	fp, #4
0dac8     E7 7C 62 FC | 	wrlong	result2, fp
0dacc     04 CE 05 F1 | 	add	fp, #4
0dad0     E7 96 62 FC | 	wrlong	arg03, fp
0dad4     08 CE 85 F1 | 	sub	fp, #8
0dad8     E7 92 02 F6 | 	mov	arg01, fp
0dadc     28 FE BF FD | 	call	#_converttofloat
0dae0     3D 93 02 F6 | 	mov	arg01, result1
0dae4     40 A4 B1 FD | 	call	#__system____builtin_acosf
0dae8     3D 93 02 F6 | 	mov	arg01, result1
0daec     54 00 00 FF 
0daf0     64 64 06 F1 | 	add	objptr, ##43108
0daf4     32 95 02 FB | 	rdlong	arg02, objptr
0daf8     54 00 00 FF 
0dafc     64 64 86 F1 | 	sub	objptr, ##43108
0db00     D4 98 B1 FD | 	call	#__system___float_mul
0db04     E7 7A 62 FC | 	wrlong	result1, fp
0db08     08 CE 05 F1 | 	add	fp, #8
0db0c     E7 3C 68 FC | 	wrlong	#30, fp
0db10     08 CE 85 F1 | 	sub	fp, #8
0db14     E7 92 02 F6 | 	mov	arg01, fp
0db18     E4 FB BF FD | 	call	#_push
0db1c                 | LR__1151
0db1c     E7 F0 03 F6 | 	mov	ptra, fp
0db20     F2 00 A0 FD | 	call	#popregs_
0db24                 | _do_acos_ret
0db24     2D 00 64 FD | 	ret
0db28                 | 
0db28                 | ' 
0db28                 | ' '-------------------- asc
0db28                 | ' 
0db28                 | ' sub do_asc
0db28                 | _do_asc
0db28     00 CA 05 F6 | 	mov	COUNT_, #0
0db2c     E8 00 A0 FD | 	call	#pushregs_
0db30     14 F0 07 F1 | 	add	ptra, #20
0db34     4C 00 00 FF 
0db38     00 64 06 F1 | 	add	objptr, ##38912
0db3c     32 97 02 FB | 	rdlong	arg03, objptr
0db40     4B 95 02 F6 | 	mov	arg02, arg03
0db44     01 94 66 F0 | 	shl	arg02, #1
0db48     4B 95 02 F1 | 	add	arg02, arg03
0db4c     02 94 66 F0 | 	shl	arg02, #2
0db50     03 00 00 FF 
0db54     04 64 86 F1 | 	sub	objptr, ##1540
0db58     32 95 02 F1 | 	add	arg02, objptr
0db5c     4A 97 02 FB | 	rdlong	arg03, arg02
0db60                 | ' 
0db60                 | ' numpar=compiledline(lineptr_e).result.uresult
0db60                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
0db60     02 96 16 F2 | 	cmp	arg03, #2 wc
0db64     48 00 00 FF 
0db68     FC 65 86 F1 | 	sub	objptr, ##37372
0db6c     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
0db70     40 00 90 4D |  if_c_and_nz	jmp	#LR__1160
0db74     00 92 06 F6 | 	mov	arg01, #0
0db78     10 C7 B1 FD | 	call	#__system___getiolock_0622
0db7c     3D 93 02 F6 | 	mov	arg01, result1
0db80     84 71 B1 FD | 	call	#__system___lockmem
0db84     97 01 00 FF 
0db88     E3 95 06 F6 | 	mov	arg02, ##@LR__5954
0db8c     00 92 06 F6 | 	mov	arg01, #0
0db90     00 96 06 F6 | 	mov	arg03, #0
0db94     64 7E B1 FD | 	call	#__system___basic_print_string
0db98     00 92 06 F6 | 	mov	arg01, #0
0db9c     EC C6 B1 FD | 	call	#__system___getiolock_0622
0dba0     3D 01 68 FC | 	wrlong	#0, result1
0dba4     27 92 06 F6 | 	mov	arg01, #39
0dba8     00 94 06 F6 | 	mov	arg02, #0
0dbac     88 34 B1 FD | 	call	#_printerror
0dbb0     B4 00 90 FD | 	jmp	#LR__1163
0dbb4                 | LR__1160
0dbb4     B8 FA BF FD | 	call	#_pop
0dbb8     3F 97 02 F6 | 	mov	arg03, result3
0dbbc     E7 7A 62 FC | 	wrlong	result1, fp
0dbc0     04 CE 05 F1 | 	add	fp, #4
0dbc4     E7 7C 62 FC | 	wrlong	result2, fp
0dbc8     04 CE 05 F1 | 	add	fp, #4
0dbcc     E7 96 62 FC | 	wrlong	arg03, fp
0dbd0                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0dbd0     08 CE 85 F1 | 	sub	fp, #8
0dbd4     2B 96 0E F2 | 	cmp	arg03, #43 wz
0dbd8     18 00 90 5D |  if_ne	jmp	#LR__1161
0dbdc     E7 92 02 FB | 	rdlong	arg01, fp
0dbe0     FC FB BF FD | 	call	#_convertstring
0dbe4     E7 7A 62 FC | 	wrlong	result1, fp
0dbe8     08 CE 05 F1 | 	add	fp, #8
0dbec     E7 3E 68 FC | 	wrlong	#31, fp
0dbf0     08 CE 85 F1 | 	sub	fp, #8
0dbf4                 | LR__1161
0dbf4                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
0dbf4     08 CE 05 F1 | 	add	fp, #8
0dbf8     E7 96 02 FB | 	rdlong	arg03, fp
0dbfc     08 CE 85 F1 | 	sub	fp, #8
0dc00     1F 96 0E F2 | 	cmp	arg03, #31 wz
0dc04     40 00 90 AD |  if_e	jmp	#LR__1162
0dc08     00 92 06 F6 | 	mov	arg01, #0
0dc0c     7C C6 B1 FD | 	call	#__system___getiolock_0622
0dc10     3D 93 02 F6 | 	mov	arg01, result1
0dc14     F0 70 B1 FD | 	call	#__system___lockmem
0dc18     97 01 00 FF 
0dc1c     E9 95 06 F6 | 	mov	arg02, ##@LR__5955
0dc20     00 92 06 F6 | 	mov	arg01, #0
0dc24     00 96 06 F6 | 	mov	arg03, #0
0dc28     D0 7D B1 FD | 	call	#__system___basic_print_string
0dc2c     00 92 06 F6 | 	mov	arg01, #0
0dc30     58 C6 B1 FD | 	call	#__system___getiolock_0622
0dc34     3D 01 68 FC | 	wrlong	#0, result1
0dc38     0F 92 06 F6 | 	mov	arg01, #15
0dc3c     00 94 06 F6 | 	mov	arg02, #0
0dc40     F4 33 B1 FD | 	call	#_printerror
0dc44     20 00 90 FD | 	jmp	#LR__1163
0dc48                 | LR__1162
0dc48     E7 7C 02 FB | 	rdlong	result2, fp
0dc4c     3E 7D C2 FA | 	rdbyte	result2, result2
0dc50     E7 7C 62 FC | 	wrlong	result2, fp
0dc54     08 CE 05 F1 | 	add	fp, #8
0dc58     E7 38 68 FC | 	wrlong	#28, fp
0dc5c     08 CE 85 F1 | 	sub	fp, #8
0dc60     E7 92 02 F6 | 	mov	arg01, fp
0dc64     98 FA BF FD | 	call	#_push
0dc68                 | LR__1163
0dc68     E7 F0 03 F6 | 	mov	ptra, fp
0dc6c     F2 00 A0 FD | 	call	#popregs_
0dc70                 | _do_asc_ret
0dc70     2D 00 64 FD | 	ret
0dc74                 | 
0dc74                 | ' 
0dc74                 | ' '-------------------- asin
0dc74                 | ' 
0dc74                 | ' sub do_asin
0dc74                 | _do_asin
0dc74     00 CA 05 F6 | 	mov	COUNT_, #0
0dc78     E8 00 A0 FD | 	call	#pushregs_
0dc7c     10 F0 07 F1 | 	add	ptra, #16
0dc80     4C 00 00 FF 
0dc84     00 64 06 F1 | 	add	objptr, ##38912
0dc88     32 97 02 FB | 	rdlong	arg03, objptr
0dc8c     4B 95 02 F6 | 	mov	arg02, arg03
0dc90     01 94 66 F0 | 	shl	arg02, #1
0dc94     4B 95 02 F1 | 	add	arg02, arg03
0dc98     02 94 66 F0 | 	shl	arg02, #2
0dc9c     03 00 00 FF 
0dca0     04 64 86 F1 | 	sub	objptr, ##1540
0dca4     32 95 02 F1 | 	add	arg02, objptr
0dca8     4A 97 02 FB | 	rdlong	arg03, arg02
0dcac                 | ' 
0dcac                 | ' numpar=compiledline(lineptr_e).result.uresult
0dcac                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
0dcac     02 96 16 F2 | 	cmp	arg03, #2 wc
0dcb0     48 00 00 FF 
0dcb4     FC 65 86 F1 | 	sub	objptr, ##37372
0dcb8     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
0dcbc     40 00 90 4D |  if_c_and_nz	jmp	#LR__1170
0dcc0     00 92 06 F6 | 	mov	arg01, #0
0dcc4     C4 C5 B1 FD | 	call	#__system___getiolock_0622
0dcc8     3D 93 02 F6 | 	mov	arg01, result1
0dccc     38 70 B1 FD | 	call	#__system___lockmem
0dcd0     97 01 00 FF 
0dcd4     EF 95 06 F6 | 	mov	arg02, ##@LR__5956
0dcd8     00 92 06 F6 | 	mov	arg01, #0
0dcdc     00 96 06 F6 | 	mov	arg03, #0
0dce0     18 7D B1 FD | 	call	#__system___basic_print_string
0dce4     00 92 06 F6 | 	mov	arg01, #0
0dce8     A0 C5 B1 FD | 	call	#__system___getiolock_0622
0dcec     3D 01 68 FC | 	wrlong	#0, result1
0dcf0     27 92 06 F6 | 	mov	arg01, #39
0dcf4     00 94 06 F6 | 	mov	arg02, #0
0dcf8     3C 33 B1 FD | 	call	#_printerror
0dcfc     64 00 90 FD | 	jmp	#LR__1171
0dd00                 | LR__1170
0dd00     6C F9 BF FD | 	call	#_pop
0dd04     3F 97 02 F6 | 	mov	arg03, result3
0dd08     E7 7A 62 FC | 	wrlong	result1, fp
0dd0c     04 CE 05 F1 | 	add	fp, #4
0dd10     E7 7C 62 FC | 	wrlong	result2, fp
0dd14     04 CE 05 F1 | 	add	fp, #4
0dd18     E7 96 62 FC | 	wrlong	arg03, fp
0dd1c     08 CE 85 F1 | 	sub	fp, #8
0dd20     E7 92 02 F6 | 	mov	arg01, fp
0dd24     E0 FB BF FD | 	call	#_converttofloat
0dd28     3D 93 02 F6 | 	mov	arg01, result1
0dd2c     AC A1 B1 FD | 	call	#__system____builtin_asinf
0dd30     3D 93 02 F6 | 	mov	arg01, result1
0dd34     54 00 00 FF 
0dd38     64 64 06 F1 | 	add	objptr, ##43108
0dd3c     32 95 02 FB | 	rdlong	arg02, objptr
0dd40     54 00 00 FF 
0dd44     64 64 86 F1 | 	sub	objptr, ##43108
0dd48     8C 96 B1 FD | 	call	#__system___float_mul
0dd4c     E7 7A 62 FC | 	wrlong	result1, fp
0dd50     08 CE 05 F1 | 	add	fp, #8
0dd54     E7 3C 68 FC | 	wrlong	#30, fp
0dd58     08 CE 85 F1 | 	sub	fp, #8
0dd5c     E7 92 02 F6 | 	mov	arg01, fp
0dd60     9C F9 BF FD | 	call	#_push
0dd64                 | LR__1171
0dd64     E7 F0 03 F6 | 	mov	ptra, fp
0dd68     F2 00 A0 FD | 	call	#popregs_
0dd6c                 | _do_asin_ret
0dd6c     2D 00 64 FD | 	ret
0dd70                 | 
0dd70                 | ' 
0dd70                 | ' '-------------------- atn
0dd70                 | ' 
0dd70                 | ' sub do_atn
0dd70                 | _do_atn
0dd70     00 CA 05 F6 | 	mov	COUNT_, #0
0dd74     E8 00 A0 FD | 	call	#pushregs_
0dd78     10 F0 07 F1 | 	add	ptra, #16
0dd7c     4C 00 00 FF 
0dd80     00 64 06 F1 | 	add	objptr, ##38912
0dd84     32 97 02 FB | 	rdlong	arg03, objptr
0dd88     4B 95 02 F6 | 	mov	arg02, arg03
0dd8c     01 94 66 F0 | 	shl	arg02, #1
0dd90     4B 95 02 F1 | 	add	arg02, arg03
0dd94     02 94 66 F0 | 	shl	arg02, #2
0dd98     03 00 00 FF 
0dd9c     04 64 86 F1 | 	sub	objptr, ##1540
0dda0     32 95 02 F1 | 	add	arg02, objptr
0dda4     4A 97 02 FB | 	rdlong	arg03, arg02
0dda8                 | ' 
0dda8                 | ' numpar=compiledline(lineptr_e).result.uresult
0dda8                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
0dda8     02 96 16 F2 | 	cmp	arg03, #2 wc
0ddac     48 00 00 FF 
0ddb0     FC 65 86 F1 | 	sub	objptr, ##37372
0ddb4     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
0ddb8     40 00 90 4D |  if_c_and_nz	jmp	#LR__1180
0ddbc     00 92 06 F6 | 	mov	arg01, #0
0ddc0     C8 C4 B1 FD | 	call	#__system___getiolock_0622
0ddc4     3D 93 02 F6 | 	mov	arg01, result1
0ddc8     3C 6F B1 FD | 	call	#__system___lockmem
0ddcc     97 01 00 FF 
0ddd0     F6 95 06 F6 | 	mov	arg02, ##@LR__5957
0ddd4     00 92 06 F6 | 	mov	arg01, #0
0ddd8     00 96 06 F6 | 	mov	arg03, #0
0dddc     1C 7C B1 FD | 	call	#__system___basic_print_string
0dde0     00 92 06 F6 | 	mov	arg01, #0
0dde4     A4 C4 B1 FD | 	call	#__system___getiolock_0622
0dde8     3D 01 68 FC | 	wrlong	#0, result1
0ddec     27 92 06 F6 | 	mov	arg01, #39
0ddf0     00 94 06 F6 | 	mov	arg02, #0
0ddf4     40 32 B1 FD | 	call	#_printerror
0ddf8     6C 00 90 FD | 	jmp	#LR__1181
0ddfc                 | LR__1180
0ddfc     70 F8 BF FD | 	call	#_pop
0de00     3F 97 02 F6 | 	mov	arg03, result3
0de04     E7 7A 62 FC | 	wrlong	result1, fp
0de08     04 CE 05 F1 | 	add	fp, #4
0de0c     E7 7C 62 FC | 	wrlong	result2, fp
0de10     04 CE 05 F1 | 	add	fp, #4
0de14     E7 96 62 FC | 	wrlong	arg03, fp
0de18     08 CE 85 F1 | 	sub	fp, #8
0de1c     E7 92 02 F6 | 	mov	arg01, fp
0de20     E4 FA BF FD | 	call	#_converttofloat
0de24     3D 93 02 F6 | 	mov	arg01, result1
0de28     00 C0 1F FF 
0de2c     00 94 06 F6 | 	mov	arg02, ##1065353216
0de30     40 A1 B1 FD | 	call	#__system____builtin_atan2f
0de34     3D 93 02 F6 | 	mov	arg01, result1
0de38     54 00 00 FF 
0de3c     64 64 06 F1 | 	add	objptr, ##43108
0de40     32 95 02 FB | 	rdlong	arg02, objptr
0de44     54 00 00 FF 
0de48     64 64 86 F1 | 	sub	objptr, ##43108
0de4c     88 95 B1 FD | 	call	#__system___float_mul
0de50     E7 7A 62 FC | 	wrlong	result1, fp
0de54     08 CE 05 F1 | 	add	fp, #8
0de58     E7 3C 68 FC | 	wrlong	#30, fp
0de5c     08 CE 85 F1 | 	sub	fp, #8
0de60     E7 92 02 F6 | 	mov	arg01, fp
0de64     98 F8 BF FD | 	call	#_push
0de68                 | LR__1181
0de68     E7 F0 03 F6 | 	mov	ptra, fp
0de6c     F2 00 A0 FD | 	call	#popregs_
0de70                 | _do_atn_ret
0de70     2D 00 64 FD | 	ret
0de74                 | 
0de74                 | ' 
0de74                 | ' '-------------------- beep
0de74                 | ' 
0de74                 | ' sub do_beep
0de74                 | _do_beep
0de74     02 CA 05 F6 | 	mov	COUNT_, #2
0de78     E8 00 A0 FD | 	call	#pushregs_
0de7c     20 F0 07 F1 | 	add	ptra, #32
0de80     EC F7 BF FD | 	call	#_pop
0de84     3D 9F 02 F6 | 	mov	arg07, result1
0de88     3E 9D 02 F6 | 	mov	arg06, result2
0de8c     3F A7 02 F6 | 	mov	local01, result3
0de90     0C CE 05 F1 | 	add	fp, #12
0de94     E7 9E 62 FC | 	wrlong	arg07, fp
0de98     04 CE 05 F1 | 	add	fp, #4
0de9c     E7 9C 62 FC | 	wrlong	arg06, fp
0dea0     04 CE 05 F1 | 	add	fp, #4
0dea4     E7 A6 62 FC | 	wrlong	local01, fp
0dea8     14 CE 85 F1 | 	sub	fp, #20
0deac     C0 F7 BF FD | 	call	#_pop
0deb0     E7 7A 62 FC | 	wrlong	result1, fp
0deb4     04 CE 05 F1 | 	add	fp, #4
0deb8     E7 7C 62 FC | 	wrlong	result2, fp
0debc     04 CE 05 F1 | 	add	fp, #4
0dec0     E7 7E 62 FC | 	wrlong	result3, fp
0dec4                 | ' 
0dec4                 | ' t2=pop()
0dec4                 | ' t1=pop()
0dec4                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
0dec4     3F 9F 02 F6 | 	mov	arg07, result3
0dec8     08 CE 85 F1 | 	sub	fp, #8
0decc     1C 9E 0E F2 | 	cmp	arg07, #28 wz
0ded0     08 CE 05 51 |  if_ne	add	fp, #8
0ded4     E7 A6 02 5B |  if_ne	rdlong	local01, fp
0ded8     08 CE 85 51 |  if_ne	sub	fp, #8
0dedc     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
0dee0     E7 A8 02 AB |  if_e	rdlong	local02, fp
0dee4     0C 00 90 AD |  if_e	jmp	#LR__1190
0dee8     E7 92 02 F6 | 	mov	arg01, fp
0deec     5C F9 BF FD | 	call	#_converttoint
0def0     3D A9 02 F6 | 	mov	local02, result1
0def4                 | LR__1190
0def4     1C CE 05 F1 | 	add	fp, #28
0def8     3F 00 80 FF 
0defc     E7 FE 5B FC | 	wrword	##32767, fp
0df00     02 CE 05 F1 | 	add	fp, #2
0df04     40 00 80 FF 
0df08     E7 02 58 FC | 	wrword	##32769, fp
0df0c     02 CE 85 F1 | 	sub	fp, #2
0df10     E7 94 02 F6 | 	mov	arg02, fp
0df14     1C CE 85 F1 | 	sub	fp, #28
0df18     07 92 06 F6 | 	mov	arg01, #7
0df1c     54 97 02 F6 | 	mov	arg03, local02
0df20     0C 98 C6 F9 | 	decod	arg04, #12
0df24     04 9A 06 F6 | 	mov	arg05, #4
0df28     00 9C 06 F6 | 	mov	arg06, #0
0df2c     00 9E 06 F6 | 	mov	arg07, #0
0df30     0B 00 00 FF 
0df34     CC 64 06 F1 | 	add	objptr, ##5836
0df38     2C 6A B1 FD | 	call	#_Audio2_004_spin2_beep
0df3c     0B 00 00 FF 
0df40     CC 64 86 F1 | 	sub	objptr, ##5836
0df44     E7 92 02 F6 | 	mov	arg01, fp
0df48     0C 92 06 F1 | 	add	arg01, #12
0df4c     B0 F7 BF FD | 	call	#_push
0df50     C8 D7 B0 FD | 	call	#_do_waitms
0df54     0B 00 00 FF 
0df58     CC 64 06 F1 | 	add	objptr, ##5836
0df5c                 | ' 
0df5c                 | ' base2:=@channel0[0]+64*channel
0df5c     32 A9 02 F6 | 	mov	local02, objptr
0df60                 | ' word[base2+32]:=0
0df60     EC A9 06 F1 | 	add	local02, #492
0df64     54 01 58 FC | 	wrword	#0, local02
0df68     0B 00 00 FF 
0df6c     CC 64 86 F1 | 	sub	objptr, ##5836
0df70     E7 F0 03 F6 | 	mov	ptra, fp
0df74     F2 00 A0 FD | 	call	#popregs_
0df78                 | _do_beep_ret
0df78     2D 00 64 FD | 	ret
0df7c                 | 
0df7c                 | ' 
0df7c                 | ' '-------------------- blit
0df7c                 | ' 
0df7c                 | ' ' blit buf1,x1,y1,x2,y2,s1,buf2,x2,y2,s2
0df7c                 | ' sub do_blit
0df7c                 | _do_blit
0df7c     03 CA 05 F6 | 	mov	COUNT_, #3
0df80     E8 00 A0 FD | 	call	#pushregs_
0df84     3C F0 07 F1 | 	add	ptra, #60
0df88     4C 00 00 FF 
0df8c     00 64 06 F1 | 	add	objptr, ##38912
0df90     32 A5 02 FB | 	rdlong	arg10, objptr
0df94     52 A3 02 F6 | 	mov	arg09, arg10
0df98     01 A2 66 F0 | 	shl	arg09, #1
0df9c     52 A3 02 F1 | 	add	arg09, arg10
0dfa0     02 A2 66 F0 | 	shl	arg09, #2
0dfa4     03 00 00 FF 
0dfa8     04 64 86 F1 | 	sub	objptr, ##1540
0dfac     32 A3 02 F1 | 	add	arg09, objptr
0dfb0     51 A7 02 FB | 	rdlong	local01, arg09
0dfb4                 | ' 
0dfb4                 | ' numpar=compiledline(lineptr_e).result.uresult
0dfb4                 | ' if numpar<>10 andalso numpar<>6 then print "blit: "; : printerror (39,runheader(0)) : return
0dfb4     0A A6 0E F2 | 	cmp	local01, #10 wz
0dfb8     48 00 00 FF 
0dfbc     FC 65 86 F1 | 	sub	objptr, ##37372
0dfc0     06 A6 0E 52 |  if_ne	cmp	local01, #6 wz
0dfc4     50 00 90 AD |  if_e	jmp	#LR__1200
0dfc8     00 92 06 F6 | 	mov	arg01, #0
0dfcc     BC C2 B1 FD | 	call	#__system___getiolock_0622
0dfd0     3D 93 02 F6 | 	mov	arg01, result1
0dfd4     30 6D B1 FD | 	call	#__system___lockmem
0dfd8     97 01 00 FF 
0dfdc     FC 95 06 F6 | 	mov	arg02, ##@LR__5958
0dfe0     00 92 06 F6 | 	mov	arg01, #0
0dfe4     00 96 06 F6 | 	mov	arg03, #0
0dfe8     10 7A B1 FD | 	call	#__system___basic_print_string
0dfec     00 92 06 F6 | 	mov	arg01, #0
0dff0     98 C2 B1 FD | 	call	#__system___getiolock_0622
0dff4     3D 01 68 FC | 	wrlong	#0, result1
0dff8     52 00 00 FF 
0dffc     70 64 06 F1 | 	add	objptr, ##42096
0e000     32 95 02 FB | 	rdlong	arg02, objptr
0e004     52 00 00 FF 
0e008     70 64 86 F1 | 	sub	objptr, ##42096
0e00c     27 92 06 F6 | 	mov	arg01, #39
0e010     24 30 B1 FD | 	call	#_printerror
0e014     04 01 90 FD | 	jmp	#LR__1205
0e018                 | LR__1200
0e018                 | ' for i=numpar-1 to 0 step -1: t1=pop() : p(i)=converttoint(t1): next i
0e018     53 A9 02 F6 | 	mov	local02, local01
0e01c     01 A8 86 F1 | 	sub	local02, #1
0e020                 | LR__1201
0e020     53 A5 02 F6 | 	mov	arg10, local01
0e024     01 A4 86 F1 | 	sub	arg10, #1
0e028     52 A9 1A F2 | 	cmp	local02, arg10 wcz
0e02c     40 00 90 1D |  if_a	jmp	#LR__1202
0e030     3C F6 BF FD | 	call	#_pop
0e034     E7 7A 62 FC | 	wrlong	result1, fp
0e038     04 CE 05 F1 | 	add	fp, #4
0e03c     E7 7C 62 FC | 	wrlong	result2, fp
0e040     04 CE 05 F1 | 	add	fp, #4
0e044     E7 7E 62 FC | 	wrlong	result3, fp
0e048     54 AB 02 F6 | 	mov	local03, local02
0e04c     02 AA 66 F0 | 	shl	local03, #2
0e050     04 CE 05 F1 | 	add	fp, #4
0e054     E7 AA 02 F1 | 	add	local03, fp
0e058     0C CE 85 F1 | 	sub	fp, #12
0e05c     E7 92 02 F6 | 	mov	arg01, fp
0e060     E8 F7 BF FD | 	call	#_converttoint
0e064     55 7B 62 FC | 	wrlong	result1, local03
0e068     01 A8 86 F1 | 	sub	local02, #1
0e06c     B0 FF 9F FD | 	jmp	#LR__1201
0e070                 | LR__1202
0e070                 | ' if numpar=10 then 
0e070     0A A6 0E F2 | 	cmp	local01, #10 wz
0e074     5C 00 90 5D |  if_ne	jmp	#LR__1203
0e078     0C CE 05 F1 | 	add	fp, #12
0e07c     E7 92 02 FB | 	rdlong	arg01, fp
0e080     04 CE 05 F1 | 	add	fp, #4
0e084     E7 94 02 FB | 	rdlong	arg02, fp
0e088     04 CE 05 F1 | 	add	fp, #4
0e08c     E7 96 02 FB | 	rdlong	arg03, fp
0e090     04 CE 05 F1 | 	add	fp, #4
0e094     E7 98 02 FB | 	rdlong	arg04, fp
0e098     04 CE 05 F1 | 	add	fp, #4
0e09c     E7 9A 02 FB | 	rdlong	arg05, fp
0e0a0     04 CE 05 F1 | 	add	fp, #4
0e0a4     E7 9C 02 FB | 	rdlong	arg06, fp
0e0a8     04 CE 05 F1 | 	add	fp, #4
0e0ac     E7 9E 02 FB | 	rdlong	arg07, fp
0e0b0     04 CE 05 F1 | 	add	fp, #4
0e0b4     E7 A0 02 FB | 	rdlong	arg08, fp
0e0b8     04 CE 05 F1 | 	add	fp, #4
0e0bc     E7 A2 02 FB | 	rdlong	arg09, fp
0e0c0     04 CE 05 F1 | 	add	fp, #4
0e0c4     E7 A4 02 FB | 	rdlong	arg10, fp
0e0c8     30 CE 85 F1 | 	sub	fp, #48
0e0cc     14 57 B1 FD | 	call	#_hg010b_spin2_blit
0e0d0     48 00 90 FD | 	jmp	#LR__1204
0e0d4                 | LR__1203
0e0d4     32 9F 02 FB | 	rdlong	arg07, objptr
0e0d8     0C CE 05 F1 | 	add	fp, #12
0e0dc     E7 94 02 FB | 	rdlong	arg02, fp
0e0e0     04 CE 05 F1 | 	add	fp, #4
0e0e4     E7 96 02 FB | 	rdlong	arg03, fp
0e0e8     04 CE 05 F1 | 	add	fp, #4
0e0ec     E7 98 02 FB | 	rdlong	arg04, fp
0e0f0     04 CE 05 F1 | 	add	fp, #4
0e0f4     E7 9A 02 FB | 	rdlong	arg05, fp
0e0f8     04 CE 05 F1 | 	add	fp, #4
0e0fc     E7 A0 02 FB | 	rdlong	arg08, fp
0e100     04 CE 05 F1 | 	add	fp, #4
0e104     E7 A2 02 FB | 	rdlong	arg09, fp
0e108     20 CE 85 F1 | 	sub	fp, #32
0e10c     4F 93 02 F6 | 	mov	arg01, arg07
0e110     0A 9C C6 F9 | 	decod	arg06, #10
0e114     0A A4 C6 F9 | 	decod	arg10, #10
0e118     C8 56 B1 FD | 	call	#_hg010b_spin2_blit
0e11c                 | LR__1204
0e11c                 | LR__1205
0e11c     E7 F0 03 F6 | 	mov	ptra, fp
0e120     F2 00 A0 FD | 	call	#popregs_
0e124                 | _do_blit_ret
0e124     2D 00 64 FD | 	ret
0e128                 | 
0e128                 | ' 
0e128                 | ' 
0e128                 | ' '-------------------- bin$
0e128                 | ' 
0e128                 | ' sub do_bin
0e128                 | _do_bin
0e128     02 CA 05 F6 | 	mov	COUNT_, #2
0e12c     E8 00 A0 FD | 	call	#pushregs_
0e130     18 F0 07 F1 | 	add	ptra, #24
0e134     4C 00 00 FF 
0e138     00 64 06 F1 | 	add	objptr, ##38912
0e13c     32 97 02 FB | 	rdlong	arg03, objptr
0e140     4B 95 02 F6 | 	mov	arg02, arg03
0e144     01 94 66 F0 | 	shl	arg02, #1
0e148     4B 95 02 F1 | 	add	arg02, arg03
0e14c     02 94 66 F0 | 	shl	arg02, #2
0e150     03 00 00 FF 
0e154     04 64 86 F1 | 	sub	objptr, ##1540
0e158     32 95 02 F1 | 	add	arg02, objptr
0e15c     4A A7 02 FB | 	rdlong	local01, arg02
0e160                 | ' 
0e160                 | ' numpar=compiledline(lineptr_e).result.uresult
0e160                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
0e160     03 A6 16 F2 | 	cmp	local01, #3 wc
0e164     48 00 00 FF 
0e168     FC 65 86 F1 | 	sub	objptr, ##37372
0e16c     00 A6 0E C2 |  if_b	cmp	local01, #0 wz
0e170     40 00 90 4D |  if_c_and_nz	jmp	#LR__1210
0e174     00 92 06 F6 | 	mov	arg01, #0
0e178     10 C1 B1 FD | 	call	#__system___getiolock_0622
0e17c     3D 93 02 F6 | 	mov	arg01, result1
0e180     84 6B B1 FD | 	call	#__system___lockmem
0e184     98 01 00 FF 
0e188     03 94 06 F6 | 	mov	arg02, ##@LR__5959
0e18c     00 92 06 F6 | 	mov	arg01, #0
0e190     00 96 06 F6 | 	mov	arg03, #0
0e194     64 78 B1 FD | 	call	#__system___basic_print_string
0e198     00 92 06 F6 | 	mov	arg01, #0
0e19c     EC C0 B1 FD | 	call	#__system___getiolock_0622
0e1a0     3D 01 68 FC | 	wrlong	#0, result1
0e1a4     27 92 06 F6 | 	mov	arg01, #39
0e1a8     00 94 06 F6 | 	mov	arg02, #0
0e1ac     88 2E B1 FD | 	call	#_printerror
0e1b0     8C 00 90 FD | 	jmp	#LR__1213
0e1b4                 | LR__1210
0e1b4                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
0e1b4     02 A6 0E F2 | 	cmp	local01, #2 wz
0e1b8     30 00 90 5D |  if_ne	jmp	#LR__1211
0e1bc     B0 F4 BF FD | 	call	#_pop
0e1c0     3F A7 02 F6 | 	mov	local01, result3
0e1c4     E7 7A 62 FC | 	wrlong	result1, fp
0e1c8     04 CE 05 F1 | 	add	fp, #4
0e1cc     E7 7C 62 FC | 	wrlong	result2, fp
0e1d0     04 CE 05 F1 | 	add	fp, #4
0e1d4     E7 A6 62 FC | 	wrlong	local01, fp
0e1d8     08 CE 85 F1 | 	sub	fp, #8
0e1dc     E7 92 02 F6 | 	mov	arg01, fp
0e1e0     68 F6 BF FD | 	call	#_converttoint
0e1e4     3D A9 02 F6 | 	mov	local02, result1
0e1e8     04 00 90 FD | 	jmp	#LR__1212
0e1ec                 | LR__1211
0e1ec     00 A8 06 F6 | 	mov	local02, #0
0e1f0                 | LR__1212
0e1f0     7C F4 BF FD | 	call	#_pop
0e1f4     3F A7 02 F6 | 	mov	local01, result3
0e1f8     E7 7A 62 FC | 	wrlong	result1, fp
0e1fc     04 CE 05 F1 | 	add	fp, #4
0e200     E7 7C 62 FC | 	wrlong	result2, fp
0e204     04 CE 05 F1 | 	add	fp, #4
0e208     E7 A6 62 FC | 	wrlong	local01, fp
0e20c     08 CE 85 F1 | 	sub	fp, #8
0e210     E7 92 02 F6 | 	mov	arg01, fp
0e214     34 F6 BF FD | 	call	#_converttoint
0e218     3D 93 02 F6 | 	mov	arg01, result1
0e21c     54 95 02 F6 | 	mov	arg02, local02
0e220     02 96 06 F6 | 	mov	arg03, #2
0e224     DC 85 B1 FD | 	call	#__system__Number_S
0e228     E7 7A 62 FC | 	wrlong	result1, fp
0e22c     08 CE 05 F1 | 	add	fp, #8
0e230     E7 3E 68 FC | 	wrlong	#31, fp
0e234     08 CE 85 F1 | 	sub	fp, #8
0e238     E7 92 02 F6 | 	mov	arg01, fp
0e23c     C0 F4 BF FD | 	call	#_push
0e240                 | LR__1213
0e240     E7 F0 03 F6 | 	mov	ptra, fp
0e244     F2 00 A0 FD | 	call	#popregs_
0e248                 | _do_bin_ret
0e248     2D 00 64 FD | 	ret
0e24c                 | 
0e24c                 | ' 
0e24c                 | ' '-------------------- box
0e24c                 | ' 
0e24c                 | ' sub do_box
0e24c                 | _do_box
0e24c     03 CA 05 F6 | 	mov	COUNT_, #3
0e250     E8 00 A0 FD | 	call	#pushregs_
0e254     30 F0 07 F1 | 	add	ptra, #48
0e258     14 F4 BF FD | 	call	#_pop
0e25c     3D 9B 02 F6 | 	mov	arg05, result1
0e260     3E 99 02 F6 | 	mov	arg04, result2
0e264     3F 97 02 F6 | 	mov	arg03, result3
0e268     24 CE 05 F1 | 	add	fp, #36
0e26c     E7 9A 62 FC | 	wrlong	arg05, fp
0e270     04 CE 05 F1 | 	add	fp, #4
0e274     E7 98 62 FC | 	wrlong	arg04, fp
0e278     04 CE 05 F1 | 	add	fp, #4
0e27c     E7 96 62 FC | 	wrlong	arg03, fp
0e280     2C CE 85 F1 | 	sub	fp, #44
0e284     E8 F3 BF FD | 	call	#_pop
0e288     3D 9B 02 F6 | 	mov	arg05, result1
0e28c     3E 99 02 F6 | 	mov	arg04, result2
0e290     3F 97 02 F6 | 	mov	arg03, result3
0e294     18 CE 05 F1 | 	add	fp, #24
0e298     E7 9A 62 FC | 	wrlong	arg05, fp
0e29c     04 CE 05 F1 | 	add	fp, #4
0e2a0     E7 98 62 FC | 	wrlong	arg04, fp
0e2a4     04 CE 05 F1 | 	add	fp, #4
0e2a8     E7 96 62 FC | 	wrlong	arg03, fp
0e2ac     20 CE 85 F1 | 	sub	fp, #32
0e2b0     BC F3 BF FD | 	call	#_pop
0e2b4     3D 9B 02 F6 | 	mov	arg05, result1
0e2b8     3E 99 02 F6 | 	mov	arg04, result2
0e2bc     3F A7 02 F6 | 	mov	local01, result3
0e2c0     0C CE 05 F1 | 	add	fp, #12
0e2c4     E7 9A 62 FC | 	wrlong	arg05, fp
0e2c8     04 CE 05 F1 | 	add	fp, #4
0e2cc     E7 98 62 FC | 	wrlong	arg04, fp
0e2d0     04 CE 05 F1 | 	add	fp, #4
0e2d4     E7 A6 62 FC | 	wrlong	local01, fp
0e2d8     14 CE 85 F1 | 	sub	fp, #20
0e2dc     90 F3 BF FD | 	call	#_pop
0e2e0     E7 7A 62 FC | 	wrlong	result1, fp
0e2e4     04 CE 05 F1 | 	add	fp, #4
0e2e8     E7 7C 62 FC | 	wrlong	result2, fp
0e2ec     04 CE 05 F1 | 	add	fp, #4
0e2f0     E7 7E 62 FC | 	wrlong	result3, fp
0e2f4                 | ' 
0e2f4                 | ' t4=pop()
0e2f4                 | ' t3=pop()
0e2f4                 | ' t2=pop()
0e2f4                 | ' t1=pop()
0e2f4                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0e2f4     3F 9B 02 F6 | 	mov	arg05, result3
0e2f8     08 CE 85 F1 | 	sub	fp, #8
0e2fc     1C 9A 0E F2 | 	cmp	arg05, #28 wz
0e300     08 CE 05 51 |  if_ne	add	fp, #8
0e304     E7 A6 02 5B |  if_ne	rdlong	local01, fp
0e308     08 CE 85 51 |  if_ne	sub	fp, #8
0e30c     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
0e310     A8 00 90 5D |  if_ne	jmp	#LR__1220
0e314     14 CE 05 F1 | 	add	fp, #20
0e318     E7 A6 02 FB | 	rdlong	local01, fp
0e31c     14 CE 85 F1 | 	sub	fp, #20
0e320     1C A6 0E F2 | 	cmp	local01, #28 wz
0e324     14 CE 05 51 |  if_ne	add	fp, #20
0e328     E7 9A 02 5B |  if_ne	rdlong	arg05, fp
0e32c     14 CE 85 51 |  if_ne	sub	fp, #20
0e330     1D 9A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e334     84 00 90 5D |  if_ne	jmp	#LR__1220
0e338     20 CE 05 F1 | 	add	fp, #32
0e33c     E7 A6 02 FB | 	rdlong	local01, fp
0e340     20 CE 85 F1 | 	sub	fp, #32
0e344     1C A6 0E F2 | 	cmp	local01, #28 wz
0e348     20 CE 05 51 |  if_ne	add	fp, #32
0e34c     E7 9A 02 5B |  if_ne	rdlong	arg05, fp
0e350     20 CE 85 51 |  if_ne	sub	fp, #32
0e354     1D 9A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e358     60 00 90 5D |  if_ne	jmp	#LR__1220
0e35c     2C CE 05 F1 | 	add	fp, #44
0e360     E7 A6 02 FB | 	rdlong	local01, fp
0e364     2C CE 85 F1 | 	sub	fp, #44
0e368     1C A6 0E F2 | 	cmp	local01, #28 wz
0e36c     2C CE 05 51 |  if_ne	add	fp, #44
0e370     E7 9A 02 5B |  if_ne	rdlong	arg05, fp
0e374     2C CE 85 51 |  if_ne	sub	fp, #44
0e378     1D 9A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e37c     3C 00 90 5D |  if_ne	jmp	#LR__1220
0e380     E7 92 02 FB | 	rdlong	arg01, fp
0e384     0C CE 05 F1 | 	add	fp, #12
0e388     E7 94 02 FB | 	rdlong	arg02, fp
0e38c     0C CE 05 F1 | 	add	fp, #12
0e390     E7 96 02 FB | 	rdlong	arg03, fp
0e394     0C CE 05 F1 | 	add	fp, #12
0e398     E7 98 02 FB | 	rdlong	arg04, fp
0e39c     24 CE 85 F1 | 	sub	fp, #36
0e3a0     38 00 00 FF 
0e3a4     A8 65 06 F1 | 	add	objptr, ##29096
0e3a8     32 9B 02 FB | 	rdlong	arg05, objptr
0e3ac     38 00 00 FF 
0e3b0     A8 65 86 F1 | 	sub	objptr, ##29096
0e3b4     EC 46 B1 FD | 	call	#_hg010b_spin2_box
0e3b8                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0e3b8     60 00 90 FD | 	jmp	#LR__1221
0e3bc                 | LR__1220
0e3bc     E7 92 02 F6 | 	mov	arg01, fp
0e3c0     88 F4 BF FD | 	call	#_converttoint
0e3c4     3D A9 02 F6 | 	mov	local02, result1
0e3c8     E7 92 02 F6 | 	mov	arg01, fp
0e3cc     0C 92 06 F1 | 	add	arg01, #12
0e3d0     78 F4 BF FD | 	call	#_converttoint
0e3d4     3D AB 02 F6 | 	mov	local03, result1
0e3d8     E7 92 02 F6 | 	mov	arg01, fp
0e3dc     18 92 06 F1 | 	add	arg01, #24
0e3e0     68 F4 BF FD | 	call	#_converttoint
0e3e4     3D A7 02 F6 | 	mov	local01, result1
0e3e8     E7 92 02 F6 | 	mov	arg01, fp
0e3ec     24 92 06 F1 | 	add	arg01, #36
0e3f0     58 F4 BF FD | 	call	#_converttoint
0e3f4     3D 99 02 F6 | 	mov	arg04, result1
0e3f8     38 00 00 FF 
0e3fc     A8 65 06 F1 | 	add	objptr, ##29096
0e400     32 9B 02 FB | 	rdlong	arg05, objptr
0e404     38 00 00 FF 
0e408     A8 65 86 F1 | 	sub	objptr, ##29096
0e40c     54 93 02 F6 | 	mov	arg01, local02
0e410     55 95 02 F6 | 	mov	arg02, local03
0e414     53 97 02 F6 | 	mov	arg03, local01
0e418     88 46 B1 FD | 	call	#_hg010b_spin2_box
0e41c                 | LR__1221
0e41c     E7 F0 03 F6 | 	mov	ptra, fp
0e420     F2 00 A0 FD | 	call	#popregs_
0e424                 | _do_box_ret
0e424     2D 00 64 FD | 	ret
0e428                 | 
0e428                 | ' 
0e428                 | ' '-------------------- brun
0e428                 | ' 
0e428                 | ' sub do_brun
0e428                 | _do_brun
0e428     08 CA 05 F6 | 	mov	COUNT_, #8
0e42c     E8 00 A0 FD | 	call	#pushregs_
0e430     3C F2 BF FD | 	call	#_pop
0e434     3E 9B 02 F6 | 	mov	arg05, result2
0e438     3F 99 02 F6 | 	mov	arg04, result3
0e43c     3D A7 02 F6 | 	mov	local01, result1
0e440     4D A9 02 F6 | 	mov	local02, arg05
0e444     4C AB 02 F6 | 	mov	local03, arg04
0e448                 | ' 
0e448                 | ' t1=pop() 
0e448                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0e448     2B AA 0E F2 | 	cmp	local03, #43 wz
0e44c     10 00 90 5D |  if_ne	jmp	#LR__1230
0e450     53 93 02 F6 | 	mov	arg01, local01
0e454     88 F3 BF FD | 	call	#_convertstring
0e458     3D A7 02 F6 | 	mov	local01, result1
0e45c     1F AA 06 F6 | 	mov	local03, #31
0e460                 | LR__1230
0e460                 | ' if t1.result_type=result_string then
0e460     1F AA 0E F2 | 	cmp	local03, #31 wz
0e464     EC 01 90 5D |  if_ne	jmp	#LR__1234
0e468     53 AD 02 F6 | 	mov	local04, local01
0e46c                 | '   filename=t1.result.sresult
0e46c                 | '   if left$(filename,1)="/" then 
0e46c     56 93 02 F6 | 	mov	arg01, local04
0e470     01 94 06 F6 | 	mov	arg02, #1
0e474     38 81 B1 FD | 	call	#__system__Left_S
0e478     3D 93 02 F6 | 	mov	arg01, result1
0e47c     98 01 00 FF 
0e480     0A 94 06 F6 | 	mov	arg02, ##@LR__5960
0e484     A8 68 B1 FD | 	call	#__system___string_cmp
0e488     00 7A 0E F2 | 	cmp	result1, #0 wz
0e48c     56 AF 02 A6 |  if_e	mov	local05, local04
0e490     14 00 90 AD |  if_e	jmp	#LR__1231
0e494     98 01 00 FF 
0e498     0C 92 06 F6 | 	mov	arg01, ##@LR__5961
0e49c     56 95 02 F6 | 	mov	arg02, local04
0e4a0     C0 68 B1 FD | 	call	#__system___string_concat
0e4a4     3D AF 02 F6 | 	mov	local05, result1
0e4a8                 | LR__1231
0e4a8                 | '   open fullfilename for input as #9
0e4a8     09 92 06 F6 | 	mov	arg01, #9
0e4ac     57 95 02 F6 | 	mov	arg02, local05
0e4b0     00 96 06 F6 | 	mov	arg03, #0
0e4b4     00 74 B1 FD | 	call	#__system___basic_open_string
0e4b8     20 68 06 F1 | 	add	ptr___system__dat__, #32
0e4bc     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
0e4c0     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
0e4c4     20 68 86 F1 | 	sub	ptr___system__dat__, #32
0e4c8     3D B1 0A F6 | 	mov	local06, result1 wz
0e4cc                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0e4cc     8C 00 90 AD |  if_e	jmp	#LR__1232
0e4d0     00 92 06 F6 | 	mov	arg01, #0
0e4d4     B4 BD B1 FD | 	call	#__system___getiolock_0622
0e4d8     3D 93 02 F6 | 	mov	arg01, result1
0e4dc     28 68 B1 FD | 	call	#__system___lockmem
0e4e0     98 01 00 FF 
0e4e4     15 94 06 F6 | 	mov	arg02, ##@LR__5962
0e4e8     00 92 06 F6 | 	mov	arg01, #0
0e4ec     00 96 06 F6 | 	mov	arg03, #0
0e4f0     08 75 B1 FD | 	call	#__system___basic_print_string
0e4f4     00 92 06 F6 | 	mov	arg01, #0
0e4f8     58 95 02 F6 | 	mov	arg02, local06
0e4fc     00 96 06 F6 | 	mov	arg03, #0
0e500     0A 98 06 F6 | 	mov	arg04, #10
0e504     38 75 B1 FD | 	call	#__system___basic_print_integer
0e508     98 01 00 FF 
0e50c     23 94 06 F6 | 	mov	arg02, ##@LR__5963
0e510     00 92 06 F6 | 	mov	arg01, #0
0e514     00 96 06 F6 | 	mov	arg03, #0
0e518     E0 74 B1 FD | 	call	#__system___basic_print_string
0e51c     58 93 02 F6 | 	mov	arg01, local06
0e520     94 89 B1 FD | 	call	#__system___strerror
0e524     3D 95 02 F6 | 	mov	arg02, result1
0e528     00 92 06 F6 | 	mov	arg01, #0
0e52c     00 96 06 F6 | 	mov	arg03, #0
0e530     C8 74 B1 FD | 	call	#__system___basic_print_string
0e534     00 92 06 F6 | 	mov	arg01, #0
0e538     0A 94 06 F6 | 	mov	arg02, #10
0e53c     00 96 06 F6 | 	mov	arg03, #0
0e540     60 74 B1 FD | 	call	#__system___basic_print_char
0e544     00 92 06 F6 | 	mov	arg01, #0
0e548     40 BD B1 FD | 	call	#__system___getiolock_0622
0e54c     3D 01 68 FC | 	wrlong	#0, result1
0e550     09 92 06 F6 | 	mov	arg01, #9
0e554     8C B3 B1 FD | 	call	#__system__close
0e558     F8 00 90 FD | 	jmp	#LR__1235
0e55c                 | LR__1232
0e55c     01 B2 06 F6 | 	mov	local07, #1
0e560     00 B4 06 F6 | 	mov	local08, #0
0e564                 | '   do
0e564                 | LR__1233
0e564                 | '     get #9,pos,block(0),1024,r : pos+=r	
0e564     32 97 02 F6 | 	mov	arg03, objptr
0e568     50 00 00 FF 
0e56c     34 96 06 F1 | 	add	arg03, ##41012
0e570     09 92 06 F6 | 	mov	arg01, #9
0e574     59 95 02 F6 | 	mov	arg02, local07
0e578     0A 98 C6 F9 | 	decod	arg04, #10
0e57c     01 9A 06 F6 | 	mov	arg05, #1
0e580     00 76 B1 FD | 	call	#__system___basic_get
0e584     3D B1 02 F6 | 	mov	local06, result1
0e588     3D B3 02 F1 | 	add	local07, result1
0e58c     32 93 02 F6 | 	mov	arg01, objptr
0e590     50 00 00 FF 
0e594     34 92 06 F1 | 	add	arg01, ##41012
0e598     5A 95 02 F6 | 	mov	arg02, local08
0e59c     0A 96 C6 F9 | 	decod	arg03, #10
0e5a0     0B 00 00 FF 
0e5a4     CC 64 06 F1 | 	add	objptr, ##5836
0e5a8     84 58 B1 FD | 	call	#_psram_spin2_write
0e5ac     0B 00 00 FF 
0e5b0     CC 64 86 F1 | 	sub	objptr, ##5836
0e5b4     58 B5 02 F1 | 	add	local08, local06
0e5b8     02 00 00 FF 
0e5bc     00 B0 0E F2 | 	cmp	local06, ##1024 wz
0e5c0     E0 03 00 AF 
0e5c4     00 B4 56 A2 |  if_e	cmps	local08, ##507904 wc
0e5c8     98 FF 9F 8D |  if_c_and_z	jmp	#LR__1233
0e5cc     38 00 00 FF 
0e5d0     7C 65 06 F1 | 	add	objptr, ##29052
0e5d4     32 93 02 FB | 	rdlong	arg01, objptr
0e5d8     03 92 62 FD | 	cogstop	arg01
0e5dc     04 64 06 F1 | 	add	objptr, #4
0e5e0     32 93 02 FB | 	rdlong	arg01, objptr
0e5e4     03 92 62 FD | 	cogstop	arg01
0e5e8     04 64 06 F1 | 	add	objptr, #4
0e5ec     32 93 02 FB | 	rdlong	arg01, objptr
0e5f0     03 92 62 FD | 	cogstop	arg01
0e5f4     19 00 00 FF 
0e5f8     3C 65 06 F1 | 	add	objptr, ##13116
0e5fc     32 93 02 FB | 	rdlong	arg01, objptr
0e600     52 00 00 FF 
0e604     C0 64 86 F1 | 	sub	objptr, ##42176
0e608     03 92 62 FD | 	cogstop	arg01
0e60c     35 95 02 F6 | 	mov	arg02, ptr__dat__
0e610     18 00 00 FF 
0e614     CC 94 06 F1 | 	add	arg02, ##12492
0e618     32 97 02 F6 | 	mov	arg03, objptr
0e61c     38 00 00 FF 
0e620     8C 97 06 F1 | 	add	arg03, ##29068
0e624     1E B4 06 F6 | 	mov	local08, #30
0e628     28 96 62 FD | 	setq	arg03
0e62c     4A B5 F2 FC | 	coginit	local08, arg02 wc
0e630     01 B4 66 C6 |  if_b	neg	local08, #1
0e634     54 00 00 FF 
0e638     D0 64 06 F1 | 	add	objptr, ##43216
0e63c     32 B5 62 FC | 	wrlong	local08, objptr
0e640     54 00 00 FF 
0e644     D0 64 86 F1 | 	sub	objptr, ##43216
0e648     00 92 06 F6 | 	mov	arg01, #0
0e64c     01 92 62 FD | 	cogid	arg01
0e650     03 92 62 FD | 	cogstop	arg01
0e654                 | LR__1234
0e654                 | LR__1235
0e654     E7 F0 03 F6 | 	mov	ptra, fp
0e658     F2 00 A0 FD | 	call	#popregs_
0e65c                 | _do_brun_ret
0e65c     2D 00 64 FD | 	ret
0e660                 | 
0e660                 | ' 
0e660                 | ' '-------------------- cd
0e660                 | ' 
0e660                 | ' sub do_cd
0e660                 | _do_cd
0e660     06 CA 05 F6 | 	mov	COUNT_, #6
0e664     E8 00 A0 FD | 	call	#pushregs_
0e668     98 01 00 FF 
0e66c     26 92 06 F6 | 	mov	arg01, ##@LR__5964
0e670     31 94 06 F6 | 	mov	arg02, #49
0e674     CC BD B1 FD | 	call	#__system___basic_dir
0e678     F4 EF BF FD | 	call	#_pop
0e67c     3E 99 02 F6 | 	mov	arg04, result2
0e680     3F 97 02 F6 | 	mov	arg03, result3
0e684     3D A7 02 F6 | 	mov	local01, result1
0e688     4C A9 02 F6 | 	mov	local02, arg04
0e68c     4B AB 02 F6 | 	mov	local03, arg03
0e690                 | ' t1=pop()
0e690                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0e690     2B AA 0E F2 | 	cmp	local03, #43 wz
0e694     10 00 90 5D |  if_ne	jmp	#LR__1240
0e698     53 93 02 F6 | 	mov	arg01, local01
0e69c     40 F1 BF FD | 	call	#_convertstring
0e6a0     3D A7 02 F6 | 	mov	local01, result1
0e6a4     1F AA 06 F6 | 	mov	local03, #31
0e6a8                 | LR__1240
0e6a8                 | ' if t1.result_type<>result_string then printerror(15): return
0e6a8     1F AA 0E F2 | 	cmp	local03, #31 wz
0e6ac     10 00 90 AD |  if_e	jmp	#LR__1241
0e6b0     0F 92 06 F6 | 	mov	arg01, #15
0e6b4     00 94 06 F6 | 	mov	arg02, #0
0e6b8     7C 29 B1 FD | 	call	#_printerror
0e6bc     54 05 90 FD | 	jmp	#LR__1259
0e6c0                 | LR__1241
0e6c0     53 AD 02 F6 | 	mov	local04, local01
0e6c4                 | ' newdir$=t1.result.sresult
0e6c4                 | ' if newdir$=".." then 
0e6c4     98 01 00 FF 
0e6c8     28 94 06 F6 | 	mov	arg02, ##@LR__5965
0e6cc     56 93 02 F6 | 	mov	arg01, local04
0e6d0     5C 66 B1 FD | 	call	#__system___string_cmp
0e6d4     00 7A 0E F2 | 	cmp	result1, #0 wz
0e6d8     C8 01 90 5D |  if_ne	jmp	#LR__1248
0e6dc     4C 00 00 FF 
0e6e0     14 64 06 F1 | 	add	objptr, ##38932
0e6e4     32 93 02 FB | 	rdlong	arg01, objptr
0e6e8     4C 00 00 FF 
0e6ec     14 64 86 F1 | 	sub	objptr, ##38932
0e6f0     49 AF 02 F6 | 	mov	local05, arg01
0e6f4     D7 06 48 FB | 	callpa	#(@LR__1243-@LR__1242)>>2,fcache_load_ptr_
0e6f8                 | LR__1242
0e6f8     57 7B CA FA | 	rdbyte	result1, local05 wz
0e6fc     01 AE 06 51 |  if_ne	add	local05, #1
0e700     F4 FF 9F 5D |  if_ne	jmp	#LR__1242
0e704                 | LR__1243
0e704     57 93 C2 F2 | 	subr	arg01, local05
0e708     4C 00 00 FF 
0e70c     14 64 06 F1 | 	add	objptr, ##38932
0e710     32 95 02 FB | 	rdlong	arg02, objptr
0e714     4C 00 00 FF 
0e718     14 64 86 F1 | 	sub	objptr, ##38932
0e71c     98 01 00 FF 
0e720     2B 96 06 F6 | 	mov	arg03, ##@LR__5966
0e724     D4 84 B1 FD | 	call	#__system__InstrRev
0e728     3D AD 02 F6 | 	mov	local04, result1
0e72c                 | '   if slash>1 then newdir$=left$(currentdir$,slash-1) else newdir$="/"
0e72c     02 AC 56 F2 | 	cmps	local04, #2 wc
0e730     28 00 90 CD |  if_b	jmp	#LR__1244
0e734     4C 00 00 FF 
0e738     14 64 06 F1 | 	add	objptr, ##38932
0e73c     32 93 02 FB | 	rdlong	arg01, objptr
0e740     4C 00 00 FF 
0e744     14 64 86 F1 | 	sub	objptr, ##38932
0e748     01 AC 86 F1 | 	sub	local04, #1
0e74c     56 95 02 F6 | 	mov	arg02, local04
0e750     5C 7E B1 FD | 	call	#__system__Left_S
0e754     3D AD 02 F6 | 	mov	local04, result1
0e758     08 00 90 FD | 	jmp	#LR__1245
0e75c                 | LR__1244
0e75c     98 01 00 FF 
0e760     2D AC 06 F6 | 	mov	local04, ##@LR__5967
0e764                 | LR__1245
0e764     56 93 02 F6 | 	mov	arg01, local04
0e768     2C 6C B1 FD | 	call	#__system___chdir
0e76c     20 68 06 F1 | 	add	ptr___system__dat__, #32
0e770     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
0e774     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
0e778     20 68 86 F1 | 	sub	ptr___system__dat__, #32
0e77c     3D B1 0A F6 | 	mov	local06, result1 wz
0e780                 | '   chdir newdir$
0e780                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e780     05 B0 0E 52 |  if_ne	cmp	local06, #5 wz
0e784     A4 00 90 AD |  if_e	jmp	#LR__1246
0e788     00 92 06 F6 | 	mov	arg01, #0
0e78c     FC BA B1 FD | 	call	#__system___getiolock_0622
0e790     3D 93 02 F6 | 	mov	arg01, result1
0e794     70 65 B1 FD | 	call	#__system___lockmem
0e798     98 01 00 FF 
0e79c     2F 94 06 F6 | 	mov	arg02, ##@LR__5968
0e7a0     00 92 06 F6 | 	mov	arg01, #0
0e7a4     00 96 06 F6 | 	mov	arg03, #0
0e7a8     50 72 B1 FD | 	call	#__system___basic_print_string
0e7ac     00 92 06 F6 | 	mov	arg01, #0
0e7b0     58 95 02 F6 | 	mov	arg02, local06
0e7b4     00 96 06 F6 | 	mov	arg03, #0
0e7b8     0A 98 06 F6 | 	mov	arg04, #10
0e7bc     80 72 B1 FD | 	call	#__system___basic_print_integer
0e7c0     98 01 00 FF 
0e7c4     3D 94 06 F6 | 	mov	arg02, ##@LR__5969
0e7c8     00 92 06 F6 | 	mov	arg01, #0
0e7cc     00 96 06 F6 | 	mov	arg03, #0
0e7d0     28 72 B1 FD | 	call	#__system___basic_print_string
0e7d4     47 00 00 FF 
0e7d8     D0 64 06 F1 | 	add	objptr, ##36560
0e7dc     32 95 02 FB | 	rdlong	arg02, objptr
0e7e0     47 00 00 FF 
0e7e4     D0 64 86 F1 | 	sub	objptr, ##36560
0e7e8     00 92 06 F6 | 	mov	arg01, #0
0e7ec     00 96 06 F6 | 	mov	arg03, #0
0e7f0     08 72 B1 FD | 	call	#__system___basic_print_string
0e7f4     00 92 06 F6 | 	mov	arg01, #0
0e7f8     0A 94 06 F6 | 	mov	arg02, #10
0e7fc     00 96 06 F6 | 	mov	arg03, #0
0e800     A0 71 B1 FD | 	call	#__system___basic_print_char
0e804     00 92 06 F6 | 	mov	arg01, #0
0e808     80 BA B1 FD | 	call	#__system___getiolock_0622
0e80c     3D 01 68 FC | 	wrlong	#0, result1
0e810     4C 00 00 FF 
0e814     14 64 06 F1 | 	add	objptr, ##38932
0e818     32 93 02 FB | 	rdlong	arg01, objptr
0e81c     4C 00 00 FF 
0e820     14 64 86 F1 | 	sub	objptr, ##38932
0e824     70 6B B1 FD | 	call	#__system___chdir
0e828     14 00 90 FD | 	jmp	#LR__1247
0e82c                 | LR__1246
0e82c     4C 00 00 FF 
0e830     14 64 06 F1 | 	add	objptr, ##38932
0e834     32 AD 62 FC | 	wrlong	local04, objptr
0e838     4C 00 00 FF 
0e83c     14 64 86 F1 | 	sub	objptr, ##38932
0e840                 | LR__1247
0e840                 | '   print "Current directory: ";currentdir$
0e840     00 92 06 F6 | 	mov	arg01, #0
0e844     44 BA B1 FD | 	call	#__system___getiolock_0622
0e848     3D 93 02 F6 | 	mov	arg01, result1
0e84c     B8 64 B1 FD | 	call	#__system___lockmem
0e850     98 01 00 FF 
0e854     40 94 06 F6 | 	mov	arg02, ##@LR__5970
0e858     00 92 06 F6 | 	mov	arg01, #0
0e85c     00 96 06 F6 | 	mov	arg03, #0
0e860     98 71 B1 FD | 	call	#__system___basic_print_string
0e864     4C 00 00 FF 
0e868     14 64 06 F1 | 	add	objptr, ##38932
0e86c     32 95 02 FB | 	rdlong	arg02, objptr
0e870     4C 00 00 FF 
0e874     14 64 86 F1 | 	sub	objptr, ##38932
0e878     00 92 06 F6 | 	mov	arg01, #0
0e87c     00 96 06 F6 | 	mov	arg03, #0
0e880     78 71 B1 FD | 	call	#__system___basic_print_string
0e884     00 92 06 F6 | 	mov	arg01, #0
0e888     0A 94 06 F6 | 	mov	arg02, #10
0e88c     00 96 06 F6 | 	mov	arg03, #0
0e890     10 71 B1 FD | 	call	#__system___basic_print_char
0e894     00 92 06 F6 | 	mov	arg01, #0
0e898     F0 B9 B1 FD | 	call	#__system___getiolock_0622
0e89c     3D 01 68 FC | 	wrlong	#0, result1
0e8a0                 | '   return
0e8a0     70 03 90 FD | 	jmp	#LR__1259
0e8a4                 | LR__1248
0e8a4                 | ' if left$(newdir$,1)="/" then 
0e8a4     56 93 02 F6 | 	mov	arg01, local04
0e8a8     01 94 06 F6 | 	mov	arg02, #1
0e8ac     00 7D B1 FD | 	call	#__system__Left_S
0e8b0     3D 93 02 F6 | 	mov	arg01, result1
0e8b4     98 01 00 FF 
0e8b8     54 94 06 F6 | 	mov	arg02, ##@LR__5971
0e8bc     70 64 B1 FD | 	call	#__system___string_cmp
0e8c0     00 7A 0E F2 | 	cmp	result1, #0 wz
0e8c4     40 01 90 5D |  if_ne	jmp	#LR__1251
0e8c8     56 93 02 F6 | 	mov	arg01, local04
0e8cc     C8 6A B1 FD | 	call	#__system___chdir
0e8d0     20 68 06 F1 | 	add	ptr___system__dat__, #32
0e8d4     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
0e8d8     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
0e8dc     20 68 86 F1 | 	sub	ptr___system__dat__, #32
0e8e0     3D B1 0A F6 | 	mov	local06, result1 wz
0e8e4                 | '   chdir(newdir$)
0e8e4                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e8e4     05 B0 0E 52 |  if_ne	cmp	local06, #5 wz
0e8e8     A4 00 90 AD |  if_e	jmp	#LR__1249
0e8ec     00 92 06 F6 | 	mov	arg01, #0
0e8f0     98 B9 B1 FD | 	call	#__system___getiolock_0622
0e8f4     3D 93 02 F6 | 	mov	arg01, result1
0e8f8     0C 64 B1 FD | 	call	#__system___lockmem
0e8fc     98 01 00 FF 
0e900     56 94 06 F6 | 	mov	arg02, ##@LR__5972
0e904     00 92 06 F6 | 	mov	arg01, #0
0e908     00 96 06 F6 | 	mov	arg03, #0
0e90c     EC 70 B1 FD | 	call	#__system___basic_print_string
0e910     00 92 06 F6 | 	mov	arg01, #0
0e914     58 95 02 F6 | 	mov	arg02, local06
0e918     00 96 06 F6 | 	mov	arg03, #0
0e91c     0A 98 06 F6 | 	mov	arg04, #10
0e920     1C 71 B1 FD | 	call	#__system___basic_print_integer
0e924     98 01 00 FF 
0e928     64 94 06 F6 | 	mov	arg02, ##@LR__5973
0e92c     00 92 06 F6 | 	mov	arg01, #0
0e930     00 96 06 F6 | 	mov	arg03, #0
0e934     C4 70 B1 FD | 	call	#__system___basic_print_string
0e938     47 00 00 FF 
0e93c     D0 64 06 F1 | 	add	objptr, ##36560
0e940     32 95 02 FB | 	rdlong	arg02, objptr
0e944     47 00 00 FF 
0e948     D0 64 86 F1 | 	sub	objptr, ##36560
0e94c     00 92 06 F6 | 	mov	arg01, #0
0e950     00 96 06 F6 | 	mov	arg03, #0
0e954     A4 70 B1 FD | 	call	#__system___basic_print_string
0e958     00 92 06 F6 | 	mov	arg01, #0
0e95c     0A 94 06 F6 | 	mov	arg02, #10
0e960     00 96 06 F6 | 	mov	arg03, #0
0e964     3C 70 B1 FD | 	call	#__system___basic_print_char
0e968     00 92 06 F6 | 	mov	arg01, #0
0e96c     1C B9 B1 FD | 	call	#__system___getiolock_0622
0e970     3D 01 68 FC | 	wrlong	#0, result1
0e974     4C 00 00 FF 
0e978     14 64 06 F1 | 	add	objptr, ##38932
0e97c     32 93 02 FB | 	rdlong	arg01, objptr
0e980     4C 00 00 FF 
0e984     14 64 86 F1 | 	sub	objptr, ##38932
0e988     0C 6A B1 FD | 	call	#__system___chdir
0e98c     14 00 90 FD | 	jmp	#LR__1250
0e990                 | LR__1249
0e990     4C 00 00 FF 
0e994     14 64 06 F1 | 	add	objptr, ##38932
0e998     32 AD 62 FC | 	wrlong	local04, objptr
0e99c     4C 00 00 FF 
0e9a0     14 64 86 F1 | 	sub	objptr, ##38932
0e9a4                 | LR__1250
0e9a4                 | '   print "Current directory: ";currentdir$
0e9a4     00 92 06 F6 | 	mov	arg01, #0
0e9a8     E0 B8 B1 FD | 	call	#__system___getiolock_0622
0e9ac     3D 93 02 F6 | 	mov	arg01, result1
0e9b0     54 63 B1 FD | 	call	#__system___lockmem
0e9b4     98 01 00 FF 
0e9b8     67 94 06 F6 | 	mov	arg02, ##@LR__5974
0e9bc     00 92 06 F6 | 	mov	arg01, #0
0e9c0     00 96 06 F6 | 	mov	arg03, #0
0e9c4     34 70 B1 FD | 	call	#__system___basic_print_string
0e9c8     4C 00 00 FF 
0e9cc     14 64 06 F1 | 	add	objptr, ##38932
0e9d0     32 95 02 FB | 	rdlong	arg02, objptr
0e9d4     4C 00 00 FF 
0e9d8     14 64 86 F1 | 	sub	objptr, ##38932
0e9dc     00 92 06 F6 | 	mov	arg01, #0
0e9e0     00 96 06 F6 | 	mov	arg03, #0
0e9e4     14 70 B1 FD | 	call	#__system___basic_print_string
0e9e8     00 92 06 F6 | 	mov	arg01, #0
0e9ec     0A 94 06 F6 | 	mov	arg02, #10
0e9f0     00 96 06 F6 | 	mov	arg03, #0
0e9f4     AC 6F B1 FD | 	call	#__system___basic_print_char
0e9f8     00 92 06 F6 | 	mov	arg01, #0
0e9fc     8C B8 B1 FD | 	call	#__system___getiolock_0622
0ea00     3D 01 68 FC | 	wrlong	#0, result1
0ea04                 | '   return
0ea04     0C 02 90 FD | 	jmp	#LR__1259
0ea08                 | LR__1251
0ea08                 | '   if currentdir$<>"/" then newdir$=currentdir$+"/"+newdir$ else newdir$=currentdir$+newdir$ 
0ea08     4C 00 00 FF 
0ea0c     14 64 06 F1 | 	add	objptr, ##38932
0ea10     32 93 02 FB | 	rdlong	arg01, objptr
0ea14     4C 00 00 FF 
0ea18     14 64 86 F1 | 	sub	objptr, ##38932
0ea1c     98 01 00 FF 
0ea20     7B 94 06 F6 | 	mov	arg02, ##@LR__5975
0ea24     08 63 B1 FD | 	call	#__system___string_cmp
0ea28     00 7A 0E F2 | 	cmp	result1, #0 wz
0ea2c     34 00 90 AD |  if_e	jmp	#LR__1252
0ea30     4C 00 00 FF 
0ea34     14 64 06 F1 | 	add	objptr, ##38932
0ea38     32 93 02 FB | 	rdlong	arg01, objptr
0ea3c     4C 00 00 FF 
0ea40     14 64 86 F1 | 	sub	objptr, ##38932
0ea44     98 01 00 FF 
0ea48     7D 94 06 F6 | 	mov	arg02, ##@LR__5976
0ea4c     14 63 B1 FD | 	call	#__system___string_concat
0ea50     3D 93 02 F6 | 	mov	arg01, result1
0ea54     56 95 02 F6 | 	mov	arg02, local04
0ea58     08 63 B1 FD | 	call	#__system___string_concat
0ea5c     3D AD 02 F6 | 	mov	local04, result1
0ea60     20 00 90 FD | 	jmp	#LR__1253
0ea64                 | LR__1252
0ea64     4C 00 00 FF 
0ea68     14 64 06 F1 | 	add	objptr, ##38932
0ea6c     32 93 02 FB | 	rdlong	arg01, objptr
0ea70     4C 00 00 FF 
0ea74     14 64 86 F1 | 	sub	objptr, ##38932
0ea78     56 95 02 F6 | 	mov	arg02, local04
0ea7c     E4 62 B1 FD | 	call	#__system___string_concat
0ea80     3D AD 02 F6 | 	mov	local04, result1
0ea84                 | LR__1253
0ea84                 | '   if right$(newdir$,1)="/" then newdir$=left$(newdir$,len(newdir$)-1)
0ea84     56 93 02 F6 | 	mov	arg01, local04
0ea88     01 94 06 F6 | 	mov	arg02, #1
0ea8c     A8 7B B1 FD | 	call	#__system__Right_S
0ea90     3D 93 02 F6 | 	mov	arg01, result1
0ea94     98 01 00 FF 
0ea98     7F 94 06 F6 | 	mov	arg02, ##@LR__5977
0ea9c     90 62 B1 FD | 	call	#__system___string_cmp
0eaa0     00 7A 0E F2 | 	cmp	result1, #0 wz
0eaa4     30 00 90 5D |  if_ne	jmp	#LR__1256
0eaa8     56 93 02 F6 | 	mov	arg01, local04
0eaac     49 AF 02 F6 | 	mov	local05, arg01
0eab0     D7 06 48 FB | 	callpa	#(@LR__1255-@LR__1254)>>2,fcache_load_ptr_
0eab4                 | LR__1254
0eab4     57 7B CA FA | 	rdbyte	result1, local05 wz
0eab8     01 AE 06 51 |  if_ne	add	local05, #1
0eabc     F4 FF 9F 5D |  if_ne	jmp	#LR__1254
0eac0                 | LR__1255
0eac0     49 AF 82 F1 | 	sub	local05, arg01
0eac4     57 95 02 F6 | 	mov	arg02, local05
0eac8     01 94 86 F1 | 	sub	arg02, #1
0eacc     56 93 02 F6 | 	mov	arg01, local04
0ead0     DC 7A B1 FD | 	call	#__system__Left_S
0ead4     3D AD 02 F6 | 	mov	local04, result1
0ead8                 | LR__1256
0ead8     56 93 02 F6 | 	mov	arg01, local04
0eadc     B8 68 B1 FD | 	call	#__system___chdir
0eae0     20 68 06 F1 | 	add	ptr___system__dat__, #32
0eae4     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
0eae8     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
0eaec     20 68 86 F1 | 	sub	ptr___system__dat__, #32
0eaf0     3D B1 0A F6 | 	mov	local06, result1 wz
0eaf4                 | '   chdir(newdir$)
0eaf4                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0eaf4     05 B0 0E 52 |  if_ne	cmp	local06, #5 wz
0eaf8     A4 00 90 AD |  if_e	jmp	#LR__1257
0eafc     00 92 06 F6 | 	mov	arg01, #0
0eb00     88 B7 B1 FD | 	call	#__system___getiolock_0622
0eb04     3D 93 02 F6 | 	mov	arg01, result1
0eb08     FC 61 B1 FD | 	call	#__system___lockmem
0eb0c     98 01 00 FF 
0eb10     81 94 06 F6 | 	mov	arg02, ##@LR__5978
0eb14     00 92 06 F6 | 	mov	arg01, #0
0eb18     00 96 06 F6 | 	mov	arg03, #0
0eb1c     DC 6E B1 FD | 	call	#__system___basic_print_string
0eb20     00 92 06 F6 | 	mov	arg01, #0
0eb24     58 95 02 F6 | 	mov	arg02, local06
0eb28     00 96 06 F6 | 	mov	arg03, #0
0eb2c     0A 98 06 F6 | 	mov	arg04, #10
0eb30     0C 6F B1 FD | 	call	#__system___basic_print_integer
0eb34     98 01 00 FF 
0eb38     8F 94 06 F6 | 	mov	arg02, ##@LR__5979
0eb3c     00 92 06 F6 | 	mov	arg01, #0
0eb40     00 96 06 F6 | 	mov	arg03, #0
0eb44     B4 6E B1 FD | 	call	#__system___basic_print_string
0eb48     47 00 00 FF 
0eb4c     D0 64 06 F1 | 	add	objptr, ##36560
0eb50     32 95 02 FB | 	rdlong	arg02, objptr
0eb54     47 00 00 FF 
0eb58     D0 64 86 F1 | 	sub	objptr, ##36560
0eb5c     00 92 06 F6 | 	mov	arg01, #0
0eb60     00 96 06 F6 | 	mov	arg03, #0
0eb64     94 6E B1 FD | 	call	#__system___basic_print_string
0eb68     00 92 06 F6 | 	mov	arg01, #0
0eb6c     0A 94 06 F6 | 	mov	arg02, #10
0eb70     00 96 06 F6 | 	mov	arg03, #0
0eb74     2C 6E B1 FD | 	call	#__system___basic_print_char
0eb78     00 92 06 F6 | 	mov	arg01, #0
0eb7c     0C B7 B1 FD | 	call	#__system___getiolock_0622
0eb80     3D 01 68 FC | 	wrlong	#0, result1
0eb84     4C 00 00 FF 
0eb88     14 64 06 F1 | 	add	objptr, ##38932
0eb8c     32 93 02 FB | 	rdlong	arg01, objptr
0eb90     4C 00 00 FF 
0eb94     14 64 86 F1 | 	sub	objptr, ##38932
0eb98     FC 67 B1 FD | 	call	#__system___chdir
0eb9c     14 00 90 FD | 	jmp	#LR__1258
0eba0                 | LR__1257
0eba0     4C 00 00 FF 
0eba4     14 64 06 F1 | 	add	objptr, ##38932
0eba8     32 AD 62 FC | 	wrlong	local04, objptr
0ebac     4C 00 00 FF 
0ebb0     14 64 86 F1 | 	sub	objptr, ##38932
0ebb4                 | LR__1258
0ebb4                 | '   print "Current directory: ";currentdir$
0ebb4     00 92 06 F6 | 	mov	arg01, #0
0ebb8     D0 B6 B1 FD | 	call	#__system___getiolock_0622
0ebbc     3D 93 02 F6 | 	mov	arg01, result1
0ebc0     44 61 B1 FD | 	call	#__system___lockmem
0ebc4     98 01 00 FF 
0ebc8     92 94 06 F6 | 	mov	arg02, ##@LR__5980
0ebcc     00 92 06 F6 | 	mov	arg01, #0
0ebd0     00 96 06 F6 | 	mov	arg03, #0
0ebd4     24 6E B1 FD | 	call	#__system___basic_print_string
0ebd8     4C 00 00 FF 
0ebdc     14 64 06 F1 | 	add	objptr, ##38932
0ebe0     32 95 02 FB | 	rdlong	arg02, objptr
0ebe4     4C 00 00 FF 
0ebe8     14 64 86 F1 | 	sub	objptr, ##38932
0ebec     00 92 06 F6 | 	mov	arg01, #0
0ebf0     00 96 06 F6 | 	mov	arg03, #0
0ebf4     04 6E B1 FD | 	call	#__system___basic_print_string
0ebf8     00 92 06 F6 | 	mov	arg01, #0
0ebfc     0A 94 06 F6 | 	mov	arg02, #10
0ec00     00 96 06 F6 | 	mov	arg03, #0
0ec04     9C 6D B1 FD | 	call	#__system___basic_print_char
0ec08     00 92 06 F6 | 	mov	arg01, #0
0ec0c     7C B6 B1 FD | 	call	#__system___getiolock_0622
0ec10     3D 01 68 FC | 	wrlong	#0, result1
0ec14                 | LR__1259
0ec14     E7 F0 03 F6 | 	mov	ptra, fp
0ec18     F2 00 A0 FD | 	call	#popregs_
0ec1c                 | _do_cd_ret
0ec1c     2D 00 64 FD | 	ret
0ec20                 | 
0ec20                 | ' 
0ec20                 | ' '-------------------- changefreq
0ec20                 | ' 
0ec20                 | ' sub do_changefreq
0ec20                 | _do_changefreq
0ec20     0A CA 05 F6 | 	mov	COUNT_, #10
0ec24     E8 00 A0 FD | 	call	#pushregs_
0ec28     2C F0 07 F1 | 	add	ptra, #44
0ec2c     40 EA BF FD | 	call	#_pop
0ec30     3F 95 02 F6 | 	mov	arg02, result3
0ec34     E7 7A 62 FC | 	wrlong	result1, fp
0ec38     04 CE 05 F1 | 	add	fp, #4
0ec3c     E7 7C 62 FC | 	wrlong	result2, fp
0ec40     04 CE 05 F1 | 	add	fp, #4
0ec44     E7 94 62 FC | 	wrlong	arg02, fp
0ec48     08 CE 85 F1 | 	sub	fp, #8
0ec4c     E7 92 02 F6 | 	mov	arg01, fp
0ec50     B4 EC BF FD | 	call	#_converttofloat
0ec54     3D A7 02 F6 | 	mov	local01, result1
0ec58     14 EA BF FD | 	call	#_pop
0ec5c     3F 95 02 F6 | 	mov	arg02, result3
0ec60     E7 7A 62 FC | 	wrlong	result1, fp
0ec64     04 CE 05 F1 | 	add	fp, #4
0ec68     E7 7C 62 FC | 	wrlong	result2, fp
0ec6c     04 CE 05 F1 | 	add	fp, #4
0ec70     E7 94 62 FC | 	wrlong	arg02, fp
0ec74     08 CE 85 F1 | 	sub	fp, #8
0ec78     E7 92 02 F6 | 	mov	arg01, fp
0ec7c     CC EB BF FD | 	call	#_converttoint
0ec80     3D A9 52 F6 | 	abs	local02, result1 wc
0ec84     07 A8 06 F5 | 	and	local02, #7
0ec88     54 A9 82 F6 | 	negc	local02, local02
0ec8c     54 95 02 F6 | 	mov	arg02, local02
0ec90     03 94 66 F0 | 	shl	arg02, #3
0ec94     54 95 82 F1 | 	sub	arg02, local02
0ec98     02 94 66 F0 | 	shl	arg02, #2
0ec9c     32 93 02 F6 | 	mov	arg01, objptr
0eca0     16 00 00 FF 
0eca4     98 92 06 F1 | 	add	arg01, ##11416
0eca8     49 95 02 F1 | 	add	arg02, arg01
0ecac     16 94 06 F1 | 	add	arg02, #22
0ecb0     4A AB E2 FA | 	rdword	local03, arg02
0ecb4                 | ' amode=channels(channel).amode
0ecb4                 | ' if amode>0 then
0ecb4     01 AA 56 F2 | 	cmps	local03, #1 wc
0ecb8     AC 01 90 CD |  if_b	jmp	#LR__1262
0ecbc     53 95 02 F6 | 	mov	arg02, local01
0ecc0     FC 16 20 FF 
0ecc4     54 92 06 F6 | 	mov	arg01, ##1076754516
0ecc8     EC 96 B1 FD | 	call	#__system____builtin_logbase
0eccc     3D AD 02 F6 | 	mov	local04, result1
0ecd0     1E 94 C6 F9 | 	decod	arg02, #30
0ecd4     FC 16 20 FF 
0ecd8     54 92 06 F6 | 	mov	arg01, ##1076754516
0ecdc     D8 96 B1 FD | 	call	#__system____builtin_logbase
0ece0     3D 95 02 F6 | 	mov	arg02, result1
0ece4     56 93 02 F6 | 	mov	arg01, local04
0ece8     F0 88 B1 FD | 	call	#__system___float_div
0ecec     3D 93 02 F6 | 	mov	arg01, result1
0ecf0     00 94 06 F6 | 	mov	arg02, #0
0ecf4     A8 8B B1 FD | 	call	#__system___float_tointeger
0ecf8     3D AF 02 F6 | 	mov	local05, result1
0ecfc     1E AC C6 F9 | 	decod	local04, #30
0ed00     57 93 02 F6 | 	mov	arg01, local05
0ed04     55 93 02 F1 | 	add	arg01, local03
0ed08     49 93 52 F6 | 	abs	arg01, arg01 wc
0ed0c     1F B0 C6 C9 |  if_b	decod	local06, #31
0ed10     00 B0 06 36 |  if_ae	mov	local06, #0
0ed14     BC 82 B1 FD | 	call	#__system___float_fromuns
0ed18     58 7B 62 F5 | 	xor	result1, local06
0ed1c     3D 95 02 F6 | 	mov	arg02, result1
0ed20     56 93 02 F6 | 	mov	arg01, local04
0ed24     C8 95 B1 FD | 	call	#__system____builtin_powf
0ed28     3D 93 02 F6 | 	mov	arg01, result1
0ed2c     01 94 06 F6 | 	mov	arg02, #1
0ed30     6C 8B B1 FD | 	call	#__system___float_tointeger
0ed34     3D B3 02 F6 | 	mov	local07, result1
0ed38                 | '   skip=round(2^(lfreq+amode))                     '''' this const + const 2 lines lower=18
0ed38                 | '   if skip>32768 then i=skip/32768: skip=32768 else i=1
0ed38     40 00 00 FF 
0ed3c     01 B2 56 F2 | 	cmps	local07, ##32769 wc
0ed40     14 00 90 CD |  if_b	jmp	#LR__1260
0ed44     59 B5 52 F6 | 	abs	local08, local07 wc
0ed48     0F B4 46 F0 | 	shr	local08, #15
0ed4c     5A B5 82 F6 | 	negc	local08, local08
0ed50     0F B2 C6 F9 | 	decod	local07, #15
0ed54     04 00 90 FD | 	jmp	#LR__1261
0ed58                 | LR__1260
0ed58     01 B4 06 F6 | 	mov	local08, #1
0ed5c                 | LR__1261
0ed5c     AA 2B 25 FF 
0ed60     00 93 06 F6 | 	mov	arg01, ##1247237376
0ed64     53 95 02 F6 | 	mov	arg02, local01
0ed68     70 88 B1 FD | 	call	#__system___float_div
0ed6c     3D AD 02 F6 | 	mov	local04, result1
0ed70     5A 93 52 F6 | 	abs	arg01, local08 wc
0ed74     1F B0 C6 C9 |  if_b	decod	local06, #31
0ed78     00 B0 06 36 |  if_ae	mov	local06, #0
0ed7c     54 82 B1 FD | 	call	#__system___float_fromuns
0ed80     58 7B 62 F5 | 	xor	result1, local06
0ed84     3D B5 02 F6 | 	mov	local08, result1
0ed88     1E B6 C6 F9 | 	decod	local09, #30
0ed8c     12 92 06 F6 | 	mov	arg01, #18
0ed90     55 93 82 F1 | 	sub	arg01, local03
0ed94     57 93 82 F1 | 	sub	arg01, local05
0ed98     49 93 52 F6 | 	abs	arg01, arg01 wc
0ed9c     1F B0 C6 C9 |  if_b	decod	local06, #31
0eda0     00 B0 06 36 |  if_ae	mov	local06, #0
0eda4     2C 82 B1 FD | 	call	#__system___float_fromuns
0eda8     58 7B 62 F5 | 	xor	result1, local06
0edac     3D 95 02 F6 | 	mov	arg02, result1
0edb0     5B 93 02 F6 | 	mov	arg01, local09
0edb4     38 95 B1 FD | 	call	#__system____builtin_powf
0edb8     3D 95 02 F6 | 	mov	arg02, result1
0edbc     5A 93 02 F6 | 	mov	arg01, local08
0edc0     14 86 B1 FD | 	call	#__system___float_mul
0edc4     3D 95 02 F6 | 	mov	arg02, result1
0edc8     56 93 02 F6 | 	mov	arg01, local04
0edcc     0C 88 B1 FD | 	call	#__system___float_div
0edd0     3D 93 02 F6 | 	mov	arg01, result1
0edd4     01 94 06 F6 | 	mov	arg02, #1
0edd8     C4 8A B1 FD | 	call	#__system___float_tointeger
0eddc     3D B9 02 F6 | 	mov	local10, result1
0ede0     54 B7 02 F6 | 	mov	local09, local02
0ede4     03 B6 66 F0 | 	shl	local09, #3
0ede8     54 B7 82 F1 | 	sub	local09, local02
0edec     02 B6 66 F0 | 	shl	local09, #2
0edf0     32 B5 02 F6 | 	mov	local08, objptr
0edf4     16 00 00 FF 
0edf8     98 B4 06 F1 | 	add	local08, ##11416
0edfc     5A B7 02 F1 | 	add	local09, local08
0ee00     AA 2B 25 FF 
0ee04     00 B5 06 F6 | 	mov	local08, ##1247237376
0ee08     5C 93 52 F6 | 	abs	arg01, local10 wc
0ee0c     1F B0 C6 C9 |  if_b	decod	local06, #31
0ee10     00 B0 06 36 |  if_ae	mov	local06, #0
0ee14     BC 81 B1 FD | 	call	#__system___float_fromuns
0ee18     58 7B 62 F5 | 	xor	result1, local06
0ee1c     3D 95 02 F6 | 	mov	arg02, result1
0ee20     5A 93 02 F6 | 	mov	arg01, local08
0ee24     B4 87 B1 FD | 	call	#__system___float_div
0ee28     3D B5 02 F6 | 	mov	local08, result1
0ee2c     59 93 52 F6 | 	abs	arg01, local07 wc
0ee30     1F B0 C6 C9 |  if_b	decod	local06, #31
0ee34     00 B0 06 36 |  if_ae	mov	local06, #0
0ee38     98 81 B1 FD | 	call	#__system___float_fromuns
0ee3c     58 7B 62 F5 | 	xor	result1, local06
0ee40     3D 93 02 F6 | 	mov	arg01, result1
0ee44     00 40 24 FF 
0ee48     00 94 06 F6 | 	mov	arg02, ##1216348160
0ee4c     8C 87 B1 FD | 	call	#__system___float_div
0ee50     3D 95 02 F6 | 	mov	arg02, result1
0ee54     5A 93 02 F6 | 	mov	arg01, local08
0ee58     7C 85 B1 FD | 	call	#__system___float_mul
0ee5c     18 B6 06 F1 | 	add	local09, #24
0ee60     5B 7B 62 FC | 	wrlong	result1, local09
0ee64     BC 00 90 FD | 	jmp	#LR__1263
0ee68                 | LR__1262
0ee68     18 B8 06 F6 | 	mov	local10, #24
0ee6c     00 40 24 FF 
0ee70     00 AC 06 F6 | 	mov	local04, ##1216348160
0ee74     53 93 02 F6 | 	mov	arg01, local01
0ee78     C7 07 24 FF 
0ee7c     00 94 06 F6 | 	mov	arg02, ##1208978944
0ee80     58 87 B1 FD | 	call	#__system___float_div
0ee84     3D 95 02 F6 | 	mov	arg02, result1
0ee88     56 93 02 F6 | 	mov	arg01, local04
0ee8c     48 85 B1 FD | 	call	#__system___float_mul
0ee90     3D 93 02 F6 | 	mov	arg01, result1
0ee94     01 94 06 F6 | 	mov	arg02, #1
0ee98     04 8A B1 FD | 	call	#__system___float_tointeger
0ee9c     3D B3 02 F6 | 	mov	local07, result1
0eea0     54 B7 02 F6 | 	mov	local09, local02
0eea4     03 B6 66 F0 | 	shl	local09, #3
0eea8     54 B7 82 F1 | 	sub	local09, local02
0eeac     02 B6 66 F0 | 	shl	local09, #2
0eeb0     32 B5 02 F6 | 	mov	local08, objptr
0eeb4     16 00 00 FF 
0eeb8     98 B4 06 F1 | 	add	local08, ##11416
0eebc     5A B7 02 F1 | 	add	local09, local08
0eec0     AA 2B 25 FF 
0eec4     00 B5 06 F6 | 	mov	local08, ##1247237376
0eec8     5C 93 52 F6 | 	abs	arg01, local10 wc
0eecc     1F B0 C6 C9 |  if_b	decod	local06, #31
0eed0     00 B0 06 36 |  if_ae	mov	local06, #0
0eed4     FC 80 B1 FD | 	call	#__system___float_fromuns
0eed8     58 7B 62 F5 | 	xor	result1, local06
0eedc     3D 95 02 F6 | 	mov	arg02, result1
0eee0     5A 93 02 F6 | 	mov	arg01, local08
0eee4     F4 86 B1 FD | 	call	#__system___float_div
0eee8     3D B5 02 F6 | 	mov	local08, result1
0eeec     59 93 52 F6 | 	abs	arg01, local07 wc
0eef0     1F B0 C6 C9 |  if_b	decod	local06, #31
0eef4     00 B0 06 36 |  if_ae	mov	local06, #0
0eef8     D8 80 B1 FD | 	call	#__system___float_fromuns
0eefc     58 7B 62 F5 | 	xor	result1, local06
0ef00     3D 93 02 F6 | 	mov	arg01, result1
0ef04     00 40 24 FF 
0ef08     00 94 06 F6 | 	mov	arg02, ##1216348160
0ef0c     CC 86 B1 FD | 	call	#__system___float_div
0ef10     3D 95 02 F6 | 	mov	arg02, result1
0ef14     5A 93 02 F6 | 	mov	arg01, local08
0ef18     BC 84 B1 FD | 	call	#__system___float_mul
0ef1c     18 B6 06 F1 | 	add	local09, #24
0ef20     5B 7B 62 FC | 	wrlong	result1, local09
0ef24                 | LR__1263
0ef24     10 B2 66 F0 | 	shl	local07, #16
0ef28     5C B3 02 F1 | 	add	local07, local10
0ef2c                 | ' if (lpeek(base+64*channel+8) and $0800_0000)=0 then 
0ef2c     38 00 00 FF 
0ef30     90 65 06 F1 | 	add	objptr, ##29072
0ef34     32 93 02 FB | 	rdlong	arg01, objptr
0ef38     38 00 00 FF 
0ef3c     90 65 86 F1 | 	sub	objptr, ##29072
0ef40     54 B9 02 F6 | 	mov	local10, local02
0ef44     06 B8 66 F0 | 	shl	local10, #6
0ef48     5C 93 02 F1 | 	add	arg01, local10
0ef4c     08 92 06 F1 | 	add	arg01, #8
0ef50     49 7B 02 FB | 	rdlong	result1, arg01
0ef54     1B 7A 2E F4 | 	testbn	result1, #27 wz
0ef58     28 00 90 5D |  if_ne	jmp	#LR__1264
0ef5c     38 00 00 FF 
0ef60     90 65 06 F1 | 	add	objptr, ##29072
0ef64     32 93 02 FB | 	rdlong	arg01, objptr
0ef68     38 00 00 FF 
0ef6c     90 65 86 F1 | 	sub	objptr, ##29072
0ef70     06 A8 66 F0 | 	shl	local02, #6
0ef74     54 93 02 F1 | 	add	arg01, local02
0ef78     18 92 06 F1 | 	add	arg01, #24
0ef7c     49 B3 62 FC | 	wrlong	local07, arg01
0ef80     68 00 90 FD | 	jmp	#LR__1265
0ef84                 | LR__1264
0ef84     38 00 00 FF 
0ef88     90 65 06 F1 | 	add	objptr, ##29072
0ef8c     32 AD 02 FB | 	rdlong	local04, objptr
0ef90     38 00 00 FF 
0ef94     90 65 86 F1 | 	sub	objptr, ##29072
0ef98     54 B9 02 F6 | 	mov	local10, local02
0ef9c     06 B8 66 F0 | 	shl	local10, #6
0efa0     5C AD 02 F1 | 	add	local04, local10
0efa4     18 AC 06 F1 | 	add	local04, #24
0efa8     3E 2C 25 FF 
0efac     3C 92 06 F6 | 	mov	arg01, ##1247312956
0efb0     53 95 02 F6 | 	mov	arg02, local01
0efb4     24 86 B1 FD | 	call	#__system___float_div
0efb8     3D 93 02 F6 | 	mov	arg01, result1
0efbc     01 94 06 F6 | 	mov	arg02, #1
0efc0     DC 88 B1 FD | 	call	#__system___float_tointeger
0efc4     56 7B 52 FC | 	wrword	result1, local04
0efc8     38 00 00 FF 
0efcc     90 65 06 F1 | 	add	objptr, ##29072
0efd0     32 93 02 FB | 	rdlong	arg01, objptr
0efd4     38 00 00 FF 
0efd8     90 65 86 F1 | 	sub	objptr, ##29072
0efdc     06 A8 66 F0 | 	shl	local02, #6
0efe0     54 93 02 F1 | 	add	arg01, local02
0efe4     1A 92 06 F1 | 	add	arg01, #26
0efe8     49 01 5A FC | 	wrword	#256, arg01
0efec                 | LR__1265
0efec     E7 F0 03 F6 | 	mov	ptra, fp
0eff0     F2 00 A0 FD | 	call	#popregs_
0eff4                 | _do_changefreq_ret
0eff4     2D 00 64 FD | 	ret
0eff8                 | 
0eff8                 | ' 
0eff8                 | ' '-------------------- changepan
0eff8                 | ' 
0eff8                 | ' sub do_changepan
0eff8                 | _do_changepan
0eff8     02 CA 05 F6 | 	mov	COUNT_, #2
0effc     E8 00 A0 FD | 	call	#pushregs_
0f000     14 F0 07 F1 | 	add	ptra, #20
0f004     68 E6 BF FD | 	call	#_pop
0f008     E7 7A 62 FC | 	wrlong	result1, fp
0f00c     04 CE 05 F1 | 	add	fp, #4
0f010     E7 7C 62 FC | 	wrlong	result2, fp
0f014     04 CE 05 F1 | 	add	fp, #4
0f018     E7 7E 62 FC | 	wrlong	result3, fp
0f01c     08 CE 85 F1 | 	sub	fp, #8
0f020     00 00 23 FF 
0f024     00 A6 06 F6 | 	mov	local01, ##1174405120
0f028     E7 92 02 F6 | 	mov	arg01, fp
0f02c     D8 E8 BF FD | 	call	#_converttofloat
0f030     3D 95 02 F6 | 	mov	arg02, result1
0f034     53 93 02 F6 | 	mov	arg01, local01
0f038     9C 83 B1 FD | 	call	#__system___float_mul
0f03c     3D 93 02 F6 | 	mov	arg01, result1
0f040     01 94 06 F6 | 	mov	arg02, #1
0f044     58 88 B1 FD | 	call	#__system___float_tointeger
0f048     3D A7 02 F6 | 	mov	local01, result1
0f04c     0D A8 C6 F9 | 	decod	local02, #13
0f050     53 A9 02 F1 | 	add	local02, local01
0f054                 | ' 
0f054                 | ' t1=pop()
0f054                 | ' pan=8192+round(8192*converttofloat(t1)) 
0f054                 | ' if pan<0 then pan=0
0f054     00 A8 56 F2 | 	cmps	local02, #0 wc
0f058     00 A8 06 C6 |  if_b	mov	local02, #0
0f05c                 | ' if pan>16384 then pan=16384
0f05c     20 00 00 FF 
0f060     01 A8 56 F2 | 	cmps	local02, ##16385 wc
0f064     0E A8 C6 39 |  if_ae	decod	local02, #14
0f068     04 E6 BF FD | 	call	#_pop
0f06c     3F A7 02 F6 | 	mov	local01, result3
0f070     E7 7A 62 FC | 	wrlong	result1, fp
0f074     04 CE 05 F1 | 	add	fp, #4
0f078     E7 7C 62 FC | 	wrlong	result2, fp
0f07c     04 CE 05 F1 | 	add	fp, #4
0f080     E7 A6 62 FC | 	wrlong	local01, fp
0f084     08 CE 85 F1 | 	sub	fp, #8
0f088     E7 92 02 F6 | 	mov	arg01, fp
0f08c     BC E7 BF FD | 	call	#_converttoint
0f090     3D A7 52 F6 | 	abs	local01, result1 wc
0f094     07 A6 06 F5 | 	and	local01, #7
0f098     53 A7 82 F6 | 	negc	local01, local01
0f09c     38 00 00 FF 
0f0a0     90 65 06 F1 | 	add	objptr, ##29072
0f0a4     32 93 02 FB | 	rdlong	arg01, objptr
0f0a8     38 00 00 FF 
0f0ac     90 65 86 F1 | 	sub	objptr, ##29072
0f0b0     06 A6 66 F0 | 	shl	local01, #6
0f0b4     53 93 02 F1 | 	add	arg01, local01
0f0b8     16 92 06 F1 | 	add	arg01, #22
0f0bc     49 A9 52 FC | 	wrword	local02, arg01
0f0c0     E7 F0 03 F6 | 	mov	ptra, fp
0f0c4     F2 00 A0 FD | 	call	#popregs_
0f0c8                 | _do_changepan_ret
0f0c8     2D 00 64 FD | 	ret
0f0cc                 | 
0f0cc                 | ' 
0f0cc                 | ' '-------------------- changevol
0f0cc                 | ' 
0f0cc                 | ' sub do_changevol
0f0cc                 | _do_changevol
0f0cc     01 CA 05 F6 | 	mov	COUNT_, #1
0f0d0     E8 00 A0 FD | 	call	#pushregs_
0f0d4     14 F0 07 F1 | 	add	ptra, #20
0f0d8     94 E5 BF FD | 	call	#_pop
0f0dc     3F 95 02 F6 | 	mov	arg02, result3
0f0e0     E7 7A 62 FC | 	wrlong	result1, fp
0f0e4     04 CE 05 F1 | 	add	fp, #4
0f0e8     E7 7C 62 FC | 	wrlong	result2, fp
0f0ec     04 CE 05 F1 | 	add	fp, #4
0f0f0     E7 94 62 FC | 	wrlong	arg02, fp
0f0f4     08 CE 85 F1 | 	sub	fp, #8
0f0f8     E7 92 02 F6 | 	mov	arg01, fp
0f0fc     08 E8 BF FD | 	call	#_converttofloat
0f100     3D 93 02 F6 | 	mov	arg01, result1
0f104     00 3D 22 FF 
0f108     00 94 06 F6 | 	mov	arg02, ##1148846080
0f10c     C8 82 B1 FD | 	call	#__system___float_mul
0f110     3D 93 02 F6 | 	mov	arg01, result1
0f114     01 94 06 F6 | 	mov	arg02, #1
0f118     84 87 B1 FD | 	call	#__system___float_tointeger
0f11c     3D 95 52 F6 | 	abs	arg02, result1 wc
0f120     0D 94 46 F7 | 	zerox	arg02, #13
0f124     4A A7 82 F6 | 	negc	local01, arg02
0f128     44 E5 BF FD | 	call	#_pop
0f12c     3F 95 02 F6 | 	mov	arg02, result3
0f130     E7 7A 62 FC | 	wrlong	result1, fp
0f134     04 CE 05 F1 | 	add	fp, #4
0f138     E7 7C 62 FC | 	wrlong	result2, fp
0f13c     04 CE 05 F1 | 	add	fp, #4
0f140     E7 94 62 FC | 	wrlong	arg02, fp
0f144     08 CE 85 F1 | 	sub	fp, #8
0f148     E7 92 02 F6 | 	mov	arg01, fp
0f14c     FC E6 BF FD | 	call	#_converttoint
0f150     3D 95 52 F6 | 	abs	arg02, result1 wc
0f154     07 94 06 F5 | 	and	arg02, #7
0f158     4A 95 82 F6 | 	negc	arg02, arg02
0f15c     38 00 00 FF 
0f160     90 65 06 F1 | 	add	objptr, ##29072
0f164     32 93 02 FB | 	rdlong	arg01, objptr
0f168     38 00 00 FF 
0f16c     90 65 86 F1 | 	sub	objptr, ##29072
0f170     06 94 66 F0 | 	shl	arg02, #6
0f174     4A 93 02 F1 | 	add	arg01, arg02
0f178     14 92 06 F1 | 	add	arg01, #20
0f17c     49 A7 52 FC | 	wrword	local01, arg01
0f180     E7 F0 03 F6 | 	mov	ptra, fp
0f184     F2 00 A0 FD | 	call	#popregs_
0f188                 | _do_changevol_ret
0f188     2D 00 64 FD | 	ret
0f18c                 | 
0f18c                 | ' 
0f18c                 | ' '-------------------- changewav
0f18c                 | ' 
0f18c                 | ' sub do_changewav
0f18c                 | _do_changewav
0f18c     01 CA 05 F6 | 	mov	COUNT_, #1
0f190     E8 00 A0 FD | 	call	#pushregs_
0f194     14 F0 07 F1 | 	add	ptra, #20
0f198     D4 E4 BF FD | 	call	#_pop
0f19c     3F 95 02 F6 | 	mov	arg02, result3
0f1a0     E7 7A 62 FC | 	wrlong	result1, fp
0f1a4     04 CE 05 F1 | 	add	fp, #4
0f1a8     E7 7C 62 FC | 	wrlong	result2, fp
0f1ac     04 CE 05 F1 | 	add	fp, #4
0f1b0     E7 94 62 FC | 	wrlong	arg02, fp
0f1b4     08 CE 85 F1 | 	sub	fp, #8
0f1b8     E7 92 02 F6 | 	mov	arg01, fp
0f1bc     8C E6 BF FD | 	call	#_converttoint
0f1c0     3D A7 02 F6 | 	mov	local01, result1
0f1c4                 | ' 
0f1c4                 | ' t1=pop()
0f1c4                 | ' wave=converttoint(t1)
0f1c4                 | ' if wave<0 then wave=0
0f1c4     00 A6 56 F2 | 	cmps	local01, #0 wc
0f1c8     00 A6 06 C6 |  if_b	mov	local01, #0
0f1cc     A0 E4 BF FD | 	call	#_pop
0f1d0     3F 95 02 F6 | 	mov	arg02, result3
0f1d4     E7 7A 62 FC | 	wrlong	result1, fp
0f1d8     04 CE 05 F1 | 	add	fp, #4
0f1dc     E7 7C 62 FC | 	wrlong	result2, fp
0f1e0     04 CE 05 F1 | 	add	fp, #4
0f1e4     E7 94 62 FC | 	wrlong	arg02, fp
0f1e8     08 CE 85 F1 | 	sub	fp, #8
0f1ec     E7 92 02 F6 | 	mov	arg01, fp
0f1f0     58 E6 BF FD | 	call	#_converttoint
0f1f4     3D 7D 52 F6 | 	abs	result2, result1 wc
0f1f8     07 7C 06 F5 | 	and	result2, #7
0f1fc     3E 7D 82 F6 | 	negc	result2, result2
0f200                 | ' if wave <32 then 
0f200     20 A6 56 F2 | 	cmps	local01, #32 wc
0f204     34 00 90 3D |  if_ae	jmp	#LR__1270
0f208     38 00 00 FF 
0f20c     90 65 06 F1 | 	add	objptr, ##29072
0f210     32 93 02 FB | 	rdlong	arg01, objptr
0f214     38 00 00 FF 
0f218     90 65 86 F1 | 	sub	objptr, ##29072
0f21c     06 7C 66 F0 | 	shl	result2, #6
0f220     3E 93 02 F1 | 	add	arg01, result2
0f224     08 92 06 F1 | 	add	arg01, #8
0f228     0B A6 66 F0 | 	shl	local01, #11
0f22c     00 00 40 FF 
0f230     00 A6 06 F1 | 	add	local01, ##-2147483648
0f234     49 A7 62 FC | 	wrlong	local01, arg01
0f238     28 00 90 FD | 	jmp	#LR__1271
0f23c                 | LR__1270
0f23c     38 00 00 FF 
0f240     90 65 06 F1 | 	add	objptr, ##29072
0f244     32 93 02 FB | 	rdlong	arg01, objptr
0f248     38 00 00 FF 
0f24c     90 65 86 F1 | 	sub	objptr, ##29072
0f250     06 7C 66 F0 | 	shl	result2, #6
0f254     3E 93 02 F1 | 	add	arg01, result2
0f258     08 92 06 F1 | 	add	arg01, #8
0f25c     00 00 C4 FF 
0f260     49 01 68 FC | 	wrlong	##-2013265920, arg01
0f264                 | LR__1271
0f264     E7 F0 03 F6 | 	mov	ptra, fp
0f268     F2 00 A0 FD | 	call	#popregs_
0f26c                 | _do_changewav_ret
0f26c     2D 00 64 FD | 	ret
0f270                 | 
0f270                 | ' 
0f270                 | ' '-------------------- chr$
0f270                 | ' 
0f270                 | ' sub do_chr
0f270                 | _do_chr
0f270     00 CA 05 F6 | 	mov	COUNT_, #0
0f274     E8 00 A0 FD | 	call	#pushregs_
0f278     14 F0 07 F1 | 	add	ptra, #20
0f27c     4C 00 00 FF 
0f280     00 64 06 F1 | 	add	objptr, ##38912
0f284     32 97 02 FB | 	rdlong	arg03, objptr
0f288     4B 95 02 F6 | 	mov	arg02, arg03
0f28c     01 94 66 F0 | 	shl	arg02, #1
0f290     4B 95 02 F1 | 	add	arg02, arg03
0f294     02 94 66 F0 | 	shl	arg02, #2
0f298     03 00 00 FF 
0f29c     04 64 86 F1 | 	sub	objptr, ##1540
0f2a0     32 95 02 F1 | 	add	arg02, objptr
0f2a4     4A 97 02 FB | 	rdlong	arg03, arg02
0f2a8                 | ' 
0f2a8                 | ' numpar=compiledline(lineptr_e).result.uresult
0f2a8                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
0f2a8     02 96 16 F2 | 	cmp	arg03, #2 wc
0f2ac     48 00 00 FF 
0f2b0     FC 65 86 F1 | 	sub	objptr, ##37372
0f2b4     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
0f2b8     40 00 90 4D |  if_c_and_nz	jmp	#LR__1280
0f2bc     00 92 06 F6 | 	mov	arg01, #0
0f2c0     C8 AF B1 FD | 	call	#__system___getiolock_0622
0f2c4     3D 93 02 F6 | 	mov	arg01, result1
0f2c8     3C 5A B1 FD | 	call	#__system___lockmem
0f2cc     98 01 00 FF 
0f2d0     A6 94 06 F6 | 	mov	arg02, ##@LR__5981
0f2d4     00 92 06 F6 | 	mov	arg01, #0
0f2d8     00 96 06 F6 | 	mov	arg03, #0
0f2dc     1C 67 B1 FD | 	call	#__system___basic_print_string
0f2e0     00 92 06 F6 | 	mov	arg01, #0
0f2e4     A4 AF B1 FD | 	call	#__system___getiolock_0622
0f2e8     3D 01 68 FC | 	wrlong	#0, result1
0f2ec     27 92 06 F6 | 	mov	arg01, #39
0f2f0     00 94 06 F6 | 	mov	arg02, #0
0f2f4     40 1D B1 FD | 	call	#_printerror
0f2f8     48 00 90 FD | 	jmp	#LR__1281
0f2fc                 | LR__1280
0f2fc     70 E3 BF FD | 	call	#_pop
0f300     3F 97 02 F6 | 	mov	arg03, result3
0f304     E7 7A 62 FC | 	wrlong	result1, fp
0f308     04 CE 05 F1 | 	add	fp, #4
0f30c     E7 7C 62 FC | 	wrlong	result2, fp
0f310     04 CE 05 F1 | 	add	fp, #4
0f314     E7 96 62 FC | 	wrlong	arg03, fp
0f318     08 CE 85 F1 | 	sub	fp, #8
0f31c     E7 92 02 F6 | 	mov	arg01, fp
0f320     28 E5 BF FD | 	call	#_converttoint
0f324     3D 93 02 F6 | 	mov	arg01, result1
0f328     48 74 B1 FD | 	call	#__system__Chr_S
0f32c     E7 7A 62 FC | 	wrlong	result1, fp
0f330     08 CE 05 F1 | 	add	fp, #8
0f334     E7 3E 68 FC | 	wrlong	#31, fp
0f338     08 CE 85 F1 | 	sub	fp, #8
0f33c     E7 92 02 F6 | 	mov	arg01, fp
0f340     BC E3 BF FD | 	call	#_push
0f344                 | LR__1281
0f344     E7 F0 03 F6 | 	mov	ptra, fp
0f348     F2 00 A0 FD | 	call	#popregs_
0f34c                 | _do_chr_ret
0f34c     2D 00 64 FD | 	ret
0f350                 | 
0f350                 | ' 
0f350                 | ' '-------------------- circle
0f350                 | ' 
0f350                 | ' sub do_circle
0f350                 | _do_circle
0f350     02 CA 05 F6 | 	mov	COUNT_, #2
0f354     E8 00 A0 FD | 	call	#pushregs_
0f358     24 F0 07 F1 | 	add	ptra, #36
0f35c     10 E3 BF FD | 	call	#_pop
0f360     3D 99 02 F6 | 	mov	arg04, result1
0f364     3E 97 02 F6 | 	mov	arg03, result2
0f368     3F 95 02 F6 | 	mov	arg02, result3
0f36c     18 CE 05 F1 | 	add	fp, #24
0f370     E7 98 62 FC | 	wrlong	arg04, fp
0f374     04 CE 05 F1 | 	add	fp, #4
0f378     E7 96 62 FC | 	wrlong	arg03, fp
0f37c     04 CE 05 F1 | 	add	fp, #4
0f380     E7 94 62 FC | 	wrlong	arg02, fp
0f384     20 CE 85 F1 | 	sub	fp, #32
0f388     E4 E2 BF FD | 	call	#_pop
0f38c     3D 99 02 F6 | 	mov	arg04, result1
0f390     3E 97 02 F6 | 	mov	arg03, result2
0f394     3F A7 02 F6 | 	mov	local01, result3
0f398     0C CE 05 F1 | 	add	fp, #12
0f39c     E7 98 62 FC | 	wrlong	arg04, fp
0f3a0     04 CE 05 F1 | 	add	fp, #4
0f3a4     E7 96 62 FC | 	wrlong	arg03, fp
0f3a8     04 CE 05 F1 | 	add	fp, #4
0f3ac     E7 A6 62 FC | 	wrlong	local01, fp
0f3b0     14 CE 85 F1 | 	sub	fp, #20
0f3b4     B8 E2 BF FD | 	call	#_pop
0f3b8     E7 7A 62 FC | 	wrlong	result1, fp
0f3bc     04 CE 05 F1 | 	add	fp, #4
0f3c0     E7 7C 62 FC | 	wrlong	result2, fp
0f3c4     04 CE 05 F1 | 	add	fp, #4
0f3c8     E7 7E 62 FC | 	wrlong	result3, fp
0f3cc                 | ' 
0f3cc                 | ' t3=pop()
0f3cc                 | ' t2=pop()
0f3cc                 | ' t1=pop()
0f3cc                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0f3cc     3F 99 02 F6 | 	mov	arg04, result3
0f3d0     08 CE 85 F1 | 	sub	fp, #8
0f3d4     1C 98 0E F2 | 	cmp	arg04, #28 wz
0f3d8     08 CE 05 51 |  if_ne	add	fp, #8
0f3dc     E7 A6 02 5B |  if_ne	rdlong	local01, fp
0f3e0     08 CE 85 51 |  if_ne	sub	fp, #8
0f3e4     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
0f3e8     7C 00 90 5D |  if_ne	jmp	#LR__1290
0f3ec     14 CE 05 F1 | 	add	fp, #20
0f3f0     E7 A6 02 FB | 	rdlong	local01, fp
0f3f4     14 CE 85 F1 | 	sub	fp, #20
0f3f8     1C A6 0E F2 | 	cmp	local01, #28 wz
0f3fc     14 CE 05 51 |  if_ne	add	fp, #20
0f400     E7 98 02 5B |  if_ne	rdlong	arg04, fp
0f404     14 CE 85 51 |  if_ne	sub	fp, #20
0f408     1D 98 0E 52 |  if_ne	cmp	arg04, #29 wz
0f40c     58 00 90 5D |  if_ne	jmp	#LR__1290
0f410     20 CE 05 F1 | 	add	fp, #32
0f414     E7 A6 02 FB | 	rdlong	local01, fp
0f418     20 CE 85 F1 | 	sub	fp, #32
0f41c     1C A6 0E F2 | 	cmp	local01, #28 wz
0f420     20 CE 05 51 |  if_ne	add	fp, #32
0f424     E7 98 02 5B |  if_ne	rdlong	arg04, fp
0f428     20 CE 85 51 |  if_ne	sub	fp, #32
0f42c     1D 98 0E 52 |  if_ne	cmp	arg04, #29 wz
0f430     34 00 90 5D |  if_ne	jmp	#LR__1290
0f434     E7 92 02 FB | 	rdlong	arg01, fp
0f438     0C CE 05 F1 | 	add	fp, #12
0f43c     E7 94 02 FB | 	rdlong	arg02, fp
0f440     0C CE 05 F1 | 	add	fp, #12
0f444     E7 96 02 FB | 	rdlong	arg03, fp
0f448     18 CE 85 F1 | 	sub	fp, #24
0f44c     38 00 00 FF 
0f450     A8 65 06 F1 | 	add	objptr, ##29096
0f454     32 99 02 FB | 	rdlong	arg04, objptr
0f458     38 00 00 FF 
0f45c     A8 65 86 F1 | 	sub	objptr, ##29096
0f460     74 34 B1 FD | 	call	#_hg010b_spin2_circle
0f464                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0f464     4C 00 90 FD | 	jmp	#LR__1291
0f468                 | LR__1290
0f468     E7 92 02 F6 | 	mov	arg01, fp
0f46c     DC E3 BF FD | 	call	#_converttoint
0f470     3D A7 02 F6 | 	mov	local01, result1
0f474     E7 92 02 F6 | 	mov	arg01, fp
0f478     0C 92 06 F1 | 	add	arg01, #12
0f47c     CC E3 BF FD | 	call	#_converttoint
0f480     3D A9 02 F6 | 	mov	local02, result1
0f484     E7 92 02 F6 | 	mov	arg01, fp
0f488     18 92 06 F1 | 	add	arg01, #24
0f48c     BC E3 BF FD | 	call	#_converttoint
0f490     3D 97 02 F6 | 	mov	arg03, result1
0f494     38 00 00 FF 
0f498     A8 65 06 F1 | 	add	objptr, ##29096
0f49c     32 99 02 FB | 	rdlong	arg04, objptr
0f4a0     38 00 00 FF 
0f4a4     A8 65 86 F1 | 	sub	objptr, ##29096
0f4a8     53 93 02 F6 | 	mov	arg01, local01
0f4ac     54 95 02 F6 | 	mov	arg02, local02
0f4b0     24 34 B1 FD | 	call	#_hg010b_spin2_circle
0f4b4                 | LR__1291
0f4b4     E7 F0 03 F6 | 	mov	ptra, fp
0f4b8     F2 00 A0 FD | 	call	#popregs_
0f4bc                 | _do_circle_ret
0f4bc     2D 00 64 FD | 	ret
0f4c0                 | 
0f4c0                 | ' 
0f4c0                 | ' '-------------------- click
0f4c0                 | ' 
0f4c0                 | ' sub do_click
0f4c0                 | _do_click
0f4c0     AC E1 BF FD | 	call	#_pop
0f4c4     00 7A 4E F2 | 	cmps	result1, #0 wz
0f4c8                 | ' 
0f4c8                 | ' t1=pop()
0f4c8                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
0f4c8     52 00 00 AF 
0f4cc     BC 64 06 A1 |  if_e	add	objptr, ##42172
0f4d0     32 01 68 AC |  if_e	wrlong	#0, objptr
0f4d4     52 00 00 FF 
0f4d8     BC 64 C6 F3 | 	sumz	objptr, ##42172
0f4dc     32 03 68 5C |  if_ne	wrlong	#1, objptr
0f4e0     52 00 00 5F 
0f4e4     BC 64 86 51 |  if_ne	sub	objptr, ##42172
0f4e8                 | _do_click_ret
0f4e8     2D 00 64 FD | 	ret
0f4ec                 | 
0f4ec                 | ' 
0f4ec                 | ' '-------------------- close
0f4ec                 | ' 
0f4ec                 | ' sub do_close
0f4ec                 | _do_close
0f4ec     03 CA 05 F6 | 	mov	COUNT_, #3
0f4f0     E8 00 A0 FD | 	call	#pushregs_
0f4f4     78 E1 BF FD | 	call	#_pop
0f4f8     3D A7 02 F6 | 	mov	local01, result1
0f4fc     3F 97 02 F6 | 	mov	arg03, result3
0f500     3E A9 02 F6 | 	mov	local02, result2
0f504     4B AB 02 F6 | 	mov	local03, arg03
0f508                 | ' 
0f508                 | ' numpar=compiledline(lineptr_e).result.uresult
0f508                 | ' t1=pop()
0f508                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
0f508     2C AA 0E F2 | 	cmp	local03, #44 wz
0f50c     44 00 90 AD |  if_e	jmp	#LR__1300
0f510     00 92 06 F6 | 	mov	arg01, #0
0f514     74 AD B1 FD | 	call	#__system___getiolock_0622
0f518     3D 93 02 F6 | 	mov	arg01, result1
0f51c     E8 57 B1 FD | 	call	#__system___lockmem
0f520     98 01 00 FF 
0f524     AD 94 06 F6 | 	mov	arg02, ##@LR__5982
0f528     00 92 06 F6 | 	mov	arg01, #0
0f52c     00 96 06 F6 | 	mov	arg03, #0
0f530     C8 64 B1 FD | 	call	#__system___basic_print_string
0f534     00 92 06 F6 | 	mov	arg01, #0
0f538     0A 94 06 F6 | 	mov	arg02, #10
0f53c     00 96 06 F6 | 	mov	arg03, #0
0f540     60 64 B1 FD | 	call	#__system___basic_print_char
0f544     00 92 06 F6 | 	mov	arg01, #0
0f548     40 AD B1 FD | 	call	#__system___getiolock_0622
0f54c     3D 01 68 FC | 	wrlong	#0, result1
0f550     08 00 90 FD | 	jmp	#LR__1301
0f554                 | LR__1300
0f554                 | ' channel  = t1.result.iresult
0f554                 | ' close #channel
0f554     53 93 02 F6 | 	mov	arg01, local01
0f558     88 A3 B1 FD | 	call	#__system__close
0f55c                 | LR__1301
0f55c     E7 F0 03 F6 | 	mov	ptra, fp
0f560     F2 00 A0 FD | 	call	#popregs_
0f564                 | _do_close_ret
0f564     2D 00 64 FD | 	ret
0f568                 | 
0f568                 | ' 
0f568                 | ' '-------------------- cls
0f568                 | ' 
0f568                 | ' sub do_cls
0f568                 | _do_cls
0f568     38 00 00 FF 
0f56c     BC 65 06 F1 | 	add	objptr, ##29116
0f570     32 93 02 FB | 	rdlong	arg01, objptr
0f574     04 64 86 F1 | 	sub	objptr, #4
0f578     32 95 02 FB | 	rdlong	arg02, objptr
0f57c     38 00 00 FF 
0f580     B8 65 86 F1 | 	sub	objptr, ##29112
0f584     5C 38 B1 FD | 	call	#_hg010b_spin2_cls
0f588     38 00 00 FF 
0f58c     BC 65 06 F1 | 	add	objptr, ##29116
0f590     32 95 02 FB | 	rdlong	arg02, objptr
0f594     14 64 86 F1 | 	sub	objptr, #20
0f598     32 95 62 FC | 	wrlong	arg02, objptr
0f59c     38 00 00 FF 
0f5a0     A8 65 86 F1 | 	sub	objptr, ##29096
0f5a4                 | _do_cls_ret
0f5a4     2D 00 64 FD | 	ret
0f5a8                 | 
0f5a8                 | ' 
0f5a8                 | ' sub do_coginit
0f5a8                 | _do_coginit
0f5a8     05 CA 05 F6 | 	mov	COUNT_, #5
0f5ac     E8 00 A0 FD | 	call	#pushregs_
0f5b0     08 00 00 FF 
0f5b4     1C F0 07 F1 | 	add	ptra, ##4124
0f5b8     4C 00 00 FF 
0f5bc     00 64 06 F1 | 	add	objptr, ##38912
0f5c0     32 A7 02 FB | 	rdlong	local01, objptr
0f5c4     53 A9 02 F6 | 	mov	local02, local01
0f5c8     01 A8 66 F0 | 	shl	local02, #1
0f5cc     53 A9 02 F1 | 	add	local02, local01
0f5d0     02 A8 66 F0 | 	shl	local02, #2
0f5d4     03 00 00 FF 
0f5d8     04 64 86 F1 | 	sub	objptr, ##1540
0f5dc     32 A9 02 F1 | 	add	local02, objptr
0f5e0     54 A9 02 FB | 	rdlong	local02, local02
0f5e4                 | ' numpar=compiledline(lineptr_e).result.uresult
0f5e4                 | ' if numpar<2 orelse numpar>3 then print "coginit: "; : printerror(39) : return
0f5e4     02 A8 56 F2 | 	cmps	local02, #2 wc
0f5e8     48 00 00 FF 
0f5ec     FC 65 86 F1 | 	sub	objptr, ##37372
0f5f0     08 00 90 CD |  if_b	jmp	#LR__1310
0f5f4     04 A8 56 F2 | 	cmps	local02, #4 wc
0f5f8     40 00 90 CD |  if_b	jmp	#LR__1311
0f5fc                 | LR__1310
0f5fc     00 92 06 F6 | 	mov	arg01, #0
0f600     88 AC B1 FD | 	call	#__system___getiolock_0622
0f604     3D 93 02 F6 | 	mov	arg01, result1
0f608     FC 56 B1 FD | 	call	#__system___lockmem
0f60c     98 01 00 FF 
0f610     BF 94 06 F6 | 	mov	arg02, ##@LR__5983
0f614     00 92 06 F6 | 	mov	arg01, #0
0f618     00 96 06 F6 | 	mov	arg03, #0
0f61c     DC 63 B1 FD | 	call	#__system___basic_print_string
0f620     00 92 06 F6 | 	mov	arg01, #0
0f624     64 AC B1 FD | 	call	#__system___getiolock_0622
0f628     3D 01 68 FC | 	wrlong	#0, result1
0f62c     27 92 06 F6 | 	mov	arg01, #39
0f630     00 94 06 F6 | 	mov	arg02, #0
0f634     00 1A B1 FD | 	call	#_printerror
0f638     2C 01 90 FD | 	jmp	#LR__1315
0f63c                 | LR__1311
0f63c     30 E0 BF FD | 	call	#_pop
0f640     3F A7 02 F6 | 	mov	local01, result3
0f644     08 00 00 FF 
0f648     10 CE 05 F1 | 	add	fp, ##4112
0f64c     E7 7A 62 FC | 	wrlong	result1, fp
0f650     04 CE 05 F1 | 	add	fp, #4
0f654     E7 7C 62 FC | 	wrlong	result2, fp
0f658     04 CE 05 F1 | 	add	fp, #4
0f65c     E7 A6 62 FC | 	wrlong	local01, fp
0f660     08 CE 85 F1 | 	sub	fp, #8
0f664     E7 92 02 F6 | 	mov	arg01, fp
0f668     08 00 00 FF 
0f66c     10 CE 85 F1 | 	sub	fp, ##4112
0f670     D8 E1 BF FD | 	call	#_converttoint
0f674     3D AB 02 F6 | 	mov	local03, result1
0f678     F4 DF BF FD | 	call	#_pop
0f67c     3F A7 02 F6 | 	mov	local01, result3
0f680     08 00 00 FF 
0f684     10 CE 05 F1 | 	add	fp, ##4112
0f688     E7 7A 62 FC | 	wrlong	result1, fp
0f68c     04 CE 05 F1 | 	add	fp, #4
0f690     E7 7C 62 FC | 	wrlong	result2, fp
0f694     04 CE 05 F1 | 	add	fp, #4
0f698     E7 A6 62 FC | 	wrlong	local01, fp
0f69c     08 CE 85 F1 | 	sub	fp, #8
0f6a0     E7 92 02 F6 | 	mov	arg01, fp
0f6a4     08 00 00 FF 
0f6a8     10 CE 85 F1 | 	sub	fp, ##4112
0f6ac     9C E1 BF FD | 	call	#_converttoint
0f6b0     3D AD 02 F6 | 	mov	local04, result1
0f6b4                 | ' t1=pop()
0f6b4                 | ' ptra_val=converttoint(t1)
0f6b4                 | ' t1=pop()
0f6b4                 | ' addrval=converttoint(t1)
0f6b4                 | ' if numpar=3 then 
0f6b4     03 A8 0E F2 | 	cmp	local02, #3 wz
0f6b8     40 00 90 5D |  if_ne	jmp	#LR__1312
0f6bc     B0 DF BF FD | 	call	#_pop
0f6c0     3F A7 02 F6 | 	mov	local01, result3
0f6c4     08 00 00 FF 
0f6c8     10 CE 05 F1 | 	add	fp, ##4112
0f6cc     E7 7A 62 FC | 	wrlong	result1, fp
0f6d0     04 CE 05 F1 | 	add	fp, #4
0f6d4     E7 7C 62 FC | 	wrlong	result2, fp
0f6d8     04 CE 05 F1 | 	add	fp, #4
0f6dc     E7 A6 62 FC | 	wrlong	local01, fp
0f6e0     08 CE 85 F1 | 	sub	fp, #8
0f6e4     E7 92 02 F6 | 	mov	arg01, fp
0f6e8     08 00 00 FF 
0f6ec     10 CE 85 F1 | 	sub	fp, ##4112
0f6f0     58 E1 BF FD | 	call	#_converttoint
0f6f4     3D AF 02 F6 | 	mov	local05, result1
0f6f8     04 00 90 FD | 	jmp	#LR__1313
0f6fc                 | LR__1312
0f6fc     10 AE 06 F6 | 	mov	local05, #16
0f700                 | LR__1313
0f700                 | '     
0f700                 | ' if addrval>$80000 then psram.read1(varptr(tempbuf(0)),addrval,4096) : addrval=varptr(tempbuf(0))
0f700     00 04 00 FF 
0f704     01 AC 56 F2 | 	cmps	local04, ##524289 wc
0f708     2C 00 90 CD |  if_b	jmp	#LR__1314
0f70c     E7 92 02 F6 | 	mov	arg01, fp
0f710     10 92 06 F1 | 	add	arg01, #16
0f714     56 95 02 F6 | 	mov	arg02, local04
0f718     0C 96 C6 F9 | 	decod	arg03, #12
0f71c     0B 00 00 FF 
0f720     CC 64 06 F1 | 	add	objptr, ##5836
0f724     6C 46 B1 FD | 	call	#_psram_spin2_read1
0f728     0B 00 00 FF 
0f72c     CC 64 86 F1 | 	sub	objptr, ##5836
0f730     E7 AC 02 F6 | 	mov	local04, fp
0f734     10 AC 06 F1 | 	add	local04, #16
0f738                 | LR__1314
0f738                 | ' 
0f738                 | '  asm
0f738     28 AA 62 FD | 	setq	local03
0f73c     56 AF F2 FC | 	coginit	local05, local04 wc
0f740                 | '  
0f740                 | ' return cog 
0f740     08 00 00 FF 
0f744     10 CE 05 F1 | 	add	fp, ##4112
0f748     E7 AE 62 FC | 	wrlong	local05, fp
0f74c     08 CE 05 F1 | 	add	fp, #8
0f750     E7 38 68 FC | 	wrlong	#28, fp
0f754     08 CE 85 F1 | 	sub	fp, #8
0f758     E7 92 02 F6 | 	mov	arg01, fp
0f75c     08 00 00 FF 
0f760     10 CE 85 F1 | 	sub	fp, ##4112
0f764     98 DF BF FD | 	call	#_push
0f768                 | LR__1315
0f768     E7 F0 03 F6 | 	mov	ptra, fp
0f76c     F2 00 A0 FD | 	call	#popregs_
0f770                 | _do_coginit_ret
0f770     2D 00 64 FD | 	ret
0f774                 | 
0f774                 | ' 
0f774                 | ' '-------------------- cogstop
0f774                 | ' 
0f774                 | ' sub do_cogstop
0f774                 | _do_cogstop
0f774     00 CA 05 F6 | 	mov	COUNT_, #0
0f778     E8 00 A0 FD | 	call	#pushregs_
0f77c     0C F0 07 F1 | 	add	ptra, #12
0f780     EC DE BF FD | 	call	#_pop
0f784     E7 7A 62 FC | 	wrlong	result1, fp
0f788     04 CE 05 F1 | 	add	fp, #4
0f78c     E7 7C 62 FC | 	wrlong	result2, fp
0f790     04 CE 05 F1 | 	add	fp, #4
0f794     E7 7E 62 FC | 	wrlong	result3, fp
0f798     08 CE 85 F1 | 	sub	fp, #8
0f79c     E7 92 02 F6 | 	mov	arg01, fp
0f7a0     A8 E0 BF FD | 	call	#_converttoint
0f7a4     03 7A 62 FD | 	cogstop	result1
0f7a8     E7 F0 03 F6 | 	mov	ptra, fp
0f7ac     F2 00 A0 FD | 	call	#popregs_
0f7b0                 | _do_cogstop_ret
0f7b0     2D 00 64 FD | 	ret
0f7b4                 | 
0f7b4                 | ' 
0f7b4                 | ' '-------------------- color
0f7b4                 | ' 
0f7b4                 | ' sub do_color
0f7b4                 | _do_color
0f7b4     03 CA 05 F6 | 	mov	COUNT_, #3
0f7b8     E8 00 A0 FD | 	call	#pushregs_
0f7bc     B0 DE BF FD | 	call	#_pop
0f7c0     3D A7 02 F6 | 	mov	local01, result1
0f7c4     3E A9 02 F6 | 	mov	local02, result2
0f7c8     3F AB 02 F6 | 	mov	local03, result3
0f7cc     38 00 00 FF 
0f7d0     A8 65 06 F1 | 	add	objptr, ##29096
0f7d4     32 A7 62 FC | 	wrlong	local01, objptr
0f7d8     38 00 00 FF 
0f7dc     A8 65 86 F1 | 	sub	objptr, ##29096
0f7e0     E7 F0 03 F6 | 	mov	ptra, fp
0f7e4     F2 00 A0 FD | 	call	#popregs_
0f7e8                 | _do_color_ret
0f7e8     2D 00 64 FD | 	ret
0f7ec                 | 
0f7ec                 | ' 
0f7ec                 | ' '-------------------- copy
0f7ec                 | ' 
0f7ec                 | ' sub do_copy
0f7ec                 | _do_copy
0f7ec     08 CA 05 F6 | 	mov	COUNT_, #8
0f7f0     E8 00 A0 FD | 	call	#pushregs_
0f7f4     78 DE BF FD | 	call	#_pop
0f7f8     3D A7 02 F6 | 	mov	local01, result1
0f7fc     3E 9B 02 F6 | 	mov	arg05, result2
0f800     3F 99 02 F6 | 	mov	arg04, result3
0f804     4D A9 02 F6 | 	mov	local02, arg05
0f808     4C AB 02 F6 | 	mov	local03, arg04
0f80c     60 DE BF FD | 	call	#_pop
0f810     3E 9B 02 F6 | 	mov	arg05, result2
0f814     3F 99 02 F6 | 	mov	arg04, result3
0f818     3D AD 02 F6 | 	mov	local04, result1
0f81c     4D AF 02 F6 | 	mov	local05, arg05
0f820     4C B1 02 F6 | 	mov	local06, arg04
0f824                 | ' 
0f824                 | ' t1=pop()
0f824                 | ' t2=pop()
0f824                 | ' if t2.result_type=result_string2 then 
0f824     2B B0 0E F2 | 	cmp	local06, #43 wz
0f828     10 00 90 5D |  if_ne	jmp	#LR__1320
0f82c     56 93 02 F6 | 	mov	arg01, local04
0f830     AC DF BF FD | 	call	#_convertstring
0f834     3D B3 02 F6 | 	mov	local07, result1
0f838     2C 00 90 FD | 	jmp	#LR__1322
0f83c                 | LR__1320
0f83c     1F B0 0E F2 | 	cmp	local06, #31 wz
0f840     56 B3 02 A6 |  if_e	mov	local07, local04
0f844     20 00 90 AD |  if_e	jmp	#LR__1321
0f848     52 00 00 FF 
0f84c     70 64 06 F1 | 	add	objptr, ##42096
0f850     32 95 02 FB | 	rdlong	arg02, objptr
0f854     52 00 00 FF 
0f858     70 64 86 F1 | 	sub	objptr, ##42096
0f85c     0F 92 06 F6 | 	mov	arg01, #15
0f860     D4 17 B1 FD | 	call	#_printerror
0f864                 | '   printerror(15,runheader(0)) : return
0f864     50 03 90 FD | 	jmp	#LR__1329
0f868                 | LR__1321
0f868                 | LR__1322
0f868                 | ' if t1.result_type=result_string2 then 
0f868     2B AA 0E F2 | 	cmp	local03, #43 wz
0f86c     10 00 90 5D |  if_ne	jmp	#LR__1323
0f870     53 93 02 F6 | 	mov	arg01, local01
0f874     68 DF BF FD | 	call	#_convertstring
0f878     3D B5 02 F6 | 	mov	local08, result1
0f87c     2C 00 90 FD | 	jmp	#LR__1325
0f880                 | LR__1323
0f880     1F AA 0E F2 | 	cmp	local03, #31 wz
0f884     53 B5 02 A6 |  if_e	mov	local08, local01
0f888     20 00 90 AD |  if_e	jmp	#LR__1324
0f88c     52 00 00 FF 
0f890     70 64 06 F1 | 	add	objptr, ##42096
0f894     32 95 02 FB | 	rdlong	arg02, objptr
0f898     52 00 00 FF 
0f89c     70 64 86 F1 | 	sub	objptr, ##42096
0f8a0     0F 92 06 F6 | 	mov	arg01, #15
0f8a4     90 17 B1 FD | 	call	#_printerror
0f8a8                 | '   printerror(15,runheader(0)) : return
0f8a8     0C 03 90 FD | 	jmp	#LR__1329
0f8ac                 | LR__1324
0f8ac                 | LR__1325
0f8ac                 | ' 
0f8ac                 | ' open filename_1 for input as #9 : err=geterr(): if err<>0 then print "System error - ";err; " in line ";runheader(0);": ";strerror$(err);", file name: ";filename_1 : close #9 : return
0f8ac     09 92 06 F6 | 	mov	arg01, #9
0f8b0     59 95 02 F6 | 	mov	arg02, local07
0f8b4     00 96 06 F6 | 	mov	arg03, #0
0f8b8     FC 5F B1 FD | 	call	#__system___basic_open_string
0f8bc     20 68 06 F1 | 	add	ptr___system__dat__, #32
0f8c0     34 7B 0A FB | 	rdlong	result1, ptr___system__dat__ wz
0f8c4     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
0f8c8     20 68 86 F1 | 	sub	ptr___system__dat__, #32
0f8cc     54 00 00 FF 
0f8d0     90 64 06 F1 | 	add	objptr, ##43152
0f8d4     32 7B 62 FC | 	wrlong	result1, objptr
0f8d8     54 00 00 FF 
0f8dc     90 64 86 F1 | 	sub	objptr, ##43152
0f8e0     0C 01 90 AD |  if_e	jmp	#LR__1326
0f8e4     00 92 06 F6 | 	mov	arg01, #0
0f8e8     A0 A9 B1 FD | 	call	#__system___getiolock_0622
0f8ec     3D 93 02 F6 | 	mov	arg01, result1
0f8f0     14 54 B1 FD | 	call	#__system___lockmem
0f8f4     98 01 00 FF 
0f8f8     C9 94 06 F6 | 	mov	arg02, ##@LR__5984
0f8fc     00 92 06 F6 | 	mov	arg01, #0
0f900     00 96 06 F6 | 	mov	arg03, #0
0f904     F4 60 B1 FD | 	call	#__system___basic_print_string
0f908     54 00 00 FF 
0f90c     90 64 06 F1 | 	add	objptr, ##43152
0f910     32 95 02 FB | 	rdlong	arg02, objptr
0f914     54 00 00 FF 
0f918     90 64 86 F1 | 	sub	objptr, ##43152
0f91c     00 92 06 F6 | 	mov	arg01, #0
0f920     00 96 06 F6 | 	mov	arg03, #0
0f924     0A 98 06 F6 | 	mov	arg04, #10
0f928     14 61 B1 FD | 	call	#__system___basic_print_integer
0f92c     98 01 00 FF 
0f930     D9 94 06 F6 | 	mov	arg02, ##@LR__5985
0f934     00 92 06 F6 | 	mov	arg01, #0
0f938     00 96 06 F6 | 	mov	arg03, #0
0f93c     BC 60 B1 FD | 	call	#__system___basic_print_string
0f940     52 00 00 FF 
0f944     70 64 06 F1 | 	add	objptr, ##42096
0f948     32 95 02 FB | 	rdlong	arg02, objptr
0f94c     52 00 00 FF 
0f950     70 64 86 F1 | 	sub	objptr, ##42096
0f954     00 92 06 F6 | 	mov	arg01, #0
0f958     00 96 06 F6 | 	mov	arg03, #0
0f95c     0A 98 06 F6 | 	mov	arg04, #10
0f960     1C 61 B1 FD | 	call	#__system___basic_print_unsigned
0f964     98 01 00 FF 
0f968     E3 94 06 F6 | 	mov	arg02, ##@LR__5986
0f96c     00 92 06 F6 | 	mov	arg01, #0
0f970     00 96 06 F6 | 	mov	arg03, #0
0f974     84 60 B1 FD | 	call	#__system___basic_print_string
0f978     00 B4 06 F6 | 	mov	local08, #0
0f97c     54 00 00 FF 
0f980     90 64 06 F1 | 	add	objptr, ##43152
0f984     32 93 02 FB | 	rdlong	arg01, objptr
0f988     54 00 00 FF 
0f98c     90 64 86 F1 | 	sub	objptr, ##43152
0f990     24 75 B1 FD | 	call	#__system___strerror
0f994     3D 95 02 F6 | 	mov	arg02, result1
0f998     5A 93 02 F6 | 	mov	arg01, local08
0f99c     00 96 06 F6 | 	mov	arg03, #0
0f9a0     58 60 B1 FD | 	call	#__system___basic_print_string
0f9a4     98 01 00 FF 
0f9a8     E6 94 06 F6 | 	mov	arg02, ##@LR__5987
0f9ac     00 92 06 F6 | 	mov	arg01, #0
0f9b0     00 96 06 F6 | 	mov	arg03, #0
0f9b4     44 60 B1 FD | 	call	#__system___basic_print_string
0f9b8     00 92 06 F6 | 	mov	arg01, #0
0f9bc     59 95 02 F6 | 	mov	arg02, local07
0f9c0     00 96 06 F6 | 	mov	arg03, #0
0f9c4     34 60 B1 FD | 	call	#__system___basic_print_string
0f9c8     00 92 06 F6 | 	mov	arg01, #0
0f9cc     0A 94 06 F6 | 	mov	arg02, #10
0f9d0     00 96 06 F6 | 	mov	arg03, #0
0f9d4     CC 5F B1 FD | 	call	#__system___basic_print_char
0f9d8     00 92 06 F6 | 	mov	arg01, #0
0f9dc     AC A8 B1 FD | 	call	#__system___getiolock_0622
0f9e0     3D 01 68 FC | 	wrlong	#0, result1
0f9e4     09 92 06 F6 | 	mov	arg01, #9
0f9e8     F8 9E B1 FD | 	call	#__system__close
0f9ec     C8 01 90 FD | 	jmp	#LR__1329
0f9f0                 | LR__1326
0f9f0                 | ' open filename_2 for output as #8 : err=geterr(): if err<>0 then print "System error - ";err; " in line ";runheader(0);": ";strerror$(err);", file name: ";filename_2  : close #8 : return
0f9f0     08 92 06 F6 | 	mov	arg01, #8
0f9f4     5A 95 02 F6 | 	mov	arg02, local08
0f9f8     0D 96 06 F6 | 	mov	arg03, #13
0f9fc     B8 5E B1 FD | 	call	#__system___basic_open_string
0fa00     20 68 06 F1 | 	add	ptr___system__dat__, #32
0fa04     34 7B 0A FB | 	rdlong	result1, ptr___system__dat__ wz
0fa08     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
0fa0c     20 68 86 F1 | 	sub	ptr___system__dat__, #32
0fa10     54 00 00 FF 
0fa14     90 64 06 F1 | 	add	objptr, ##43152
0fa18     32 7B 62 FC | 	wrlong	result1, objptr
0fa1c     54 00 00 FF 
0fa20     90 64 86 F1 | 	sub	objptr, ##43152
0fa24     0C 01 90 AD |  if_e	jmp	#LR__1327
0fa28     00 92 06 F6 | 	mov	arg01, #0
0fa2c     5C A8 B1 FD | 	call	#__system___getiolock_0622
0fa30     3D 93 02 F6 | 	mov	arg01, result1
0fa34     D0 52 B1 FD | 	call	#__system___lockmem
0fa38     98 01 00 FF 
0fa3c     F4 94 06 F6 | 	mov	arg02, ##@LR__5988
0fa40     00 92 06 F6 | 	mov	arg01, #0
0fa44     00 96 06 F6 | 	mov	arg03, #0
0fa48     B0 5F B1 FD | 	call	#__system___basic_print_string
0fa4c     54 00 00 FF 
0fa50     90 64 06 F1 | 	add	objptr, ##43152
0fa54     32 95 02 FB | 	rdlong	arg02, objptr
0fa58     54 00 00 FF 
0fa5c     90 64 86 F1 | 	sub	objptr, ##43152
0fa60     00 92 06 F6 | 	mov	arg01, #0
0fa64     00 96 06 F6 | 	mov	arg03, #0
0fa68     0A 98 06 F6 | 	mov	arg04, #10
0fa6c     D0 5F B1 FD | 	call	#__system___basic_print_integer
0fa70     98 01 00 FF 
0fa74     04 95 06 F6 | 	mov	arg02, ##@LR__5989
0fa78     00 92 06 F6 | 	mov	arg01, #0
0fa7c     00 96 06 F6 | 	mov	arg03, #0
0fa80     78 5F B1 FD | 	call	#__system___basic_print_string
0fa84     52 00 00 FF 
0fa88     70 64 06 F1 | 	add	objptr, ##42096
0fa8c     32 95 02 FB | 	rdlong	arg02, objptr
0fa90     52 00 00 FF 
0fa94     70 64 86 F1 | 	sub	objptr, ##42096
0fa98     00 92 06 F6 | 	mov	arg01, #0
0fa9c     00 96 06 F6 | 	mov	arg03, #0
0faa0     0A 98 06 F6 | 	mov	arg04, #10
0faa4     D8 5F B1 FD | 	call	#__system___basic_print_unsigned
0faa8     98 01 00 FF 
0faac     0E 95 06 F6 | 	mov	arg02, ##@LR__5990
0fab0     00 92 06 F6 | 	mov	arg01, #0
0fab4     00 96 06 F6 | 	mov	arg03, #0
0fab8     40 5F B1 FD | 	call	#__system___basic_print_string
0fabc     00 B2 06 F6 | 	mov	local07, #0
0fac0     54 00 00 FF 
0fac4     90 64 06 F1 | 	add	objptr, ##43152
0fac8     32 93 02 FB | 	rdlong	arg01, objptr
0facc     54 00 00 FF 
0fad0     90 64 86 F1 | 	sub	objptr, ##43152
0fad4     E0 73 B1 FD | 	call	#__system___strerror
0fad8     3D 95 02 F6 | 	mov	arg02, result1
0fadc     59 93 02 F6 | 	mov	arg01, local07
0fae0     00 96 06 F6 | 	mov	arg03, #0
0fae4     14 5F B1 FD | 	call	#__system___basic_print_string
0fae8     98 01 00 FF 
0faec     11 95 06 F6 | 	mov	arg02, ##@LR__5991
0faf0     00 92 06 F6 | 	mov	arg01, #0
0faf4     00 96 06 F6 | 	mov	arg03, #0
0faf8     00 5F B1 FD | 	call	#__system___basic_print_string
0fafc     00 92 06 F6 | 	mov	arg01, #0
0fb00     5A 95 02 F6 | 	mov	arg02, local08
0fb04     00 96 06 F6 | 	mov	arg03, #0
0fb08     F0 5E B1 FD | 	call	#__system___basic_print_string
0fb0c     00 92 06 F6 | 	mov	arg01, #0
0fb10     0A 94 06 F6 | 	mov	arg02, #10
0fb14     00 96 06 F6 | 	mov	arg03, #0
0fb18     88 5E B1 FD | 	call	#__system___basic_print_char
0fb1c     00 92 06 F6 | 	mov	arg01, #0
0fb20     68 A7 B1 FD | 	call	#__system___getiolock_0622
0fb24     3D 01 68 FC | 	wrlong	#0, result1
0fb28     08 92 06 F6 | 	mov	arg01, #8
0fb2c     B4 9D B1 FD | 	call	#__system__close
0fb30     84 00 90 FD | 	jmp	#LR__1329
0fb34                 | LR__1327
0fb34                 | ' 
0fb34                 | ' do
0fb34                 | LR__1328
0fb34                 | '   get #9,,block(0),1024,r
0fb34     32 97 02 F6 | 	mov	arg03, objptr
0fb38     50 00 00 FF 
0fb3c     34 96 06 F1 | 	add	arg03, ##41012
0fb40     09 92 06 F6 | 	mov	arg01, #9
0fb44     00 94 06 F6 | 	mov	arg02, #0
0fb48     0A 98 C6 F9 | 	decod	arg04, #10
0fb4c     01 9A 06 F6 | 	mov	arg05, #1
0fb50     30 60 B1 FD | 	call	#__system___basic_get
0fb54     54 00 00 FF 
0fb58     C8 64 06 F1 | 	add	objptr, ##43208
0fb5c     32 7B 62 FC | 	wrlong	result1, objptr
0fb60                 | '   put #8,,block(0),r
0fb60     04 00 00 FF 
0fb64     94 64 86 F1 | 	sub	objptr, ##2196
0fb68     32 97 02 F6 | 	mov	arg03, objptr
0fb6c     3D 99 02 F6 | 	mov	arg04, result1
0fb70     50 00 00 FF 
0fb74     34 64 86 F1 | 	sub	objptr, ##41012
0fb78     08 92 06 F6 | 	mov	arg01, #8
0fb7c     00 94 06 F6 | 	mov	arg02, #0
0fb80     01 9A 06 F6 | 	mov	arg05, #1
0fb84     84 5F B1 FD | 	call	#__system___basic_put
0fb88     54 00 00 FF 
0fb8c     C8 64 06 F1 | 	add	objptr, ##43208
0fb90     32 B5 02 FB | 	rdlong	local08, objptr
0fb94     54 00 00 FF 
0fb98     C8 64 86 F1 | 	sub	objptr, ##43208
0fb9c     02 00 00 FF 
0fba0     00 B4 0E F2 | 	cmp	local08, ##1024 wz
0fba4     8C FF 9F AD |  if_e	jmp	#LR__1328
0fba8                 | ' close #8
0fba8     08 92 06 F6 | 	mov	arg01, #8
0fbac     34 9D B1 FD | 	call	#__system__close
0fbb0                 | ' close #9
0fbb0     09 92 06 F6 | 	mov	arg01, #9
0fbb4     2C 9D B1 FD | 	call	#__system__close
0fbb8                 | LR__1329
0fbb8     E7 F0 03 F6 | 	mov	ptra, fp
0fbbc     F2 00 A0 FD | 	call	#popregs_
0fbc0                 | _do_copy_ret
0fbc0     2D 00 64 FD | 	ret
0fbc4                 | 
0fbc4                 | ' 
0fbc4                 | ' '-------------------- cos
0fbc4                 | ' 
0fbc4                 | ' sub do_cos
0fbc4                 | _do_cos
0fbc4     01 CA 05 F6 | 	mov	COUNT_, #1
0fbc8     E8 00 A0 FD | 	call	#pushregs_
0fbcc     10 F0 07 F1 | 	add	ptra, #16
0fbd0     4C 00 00 FF 
0fbd4     00 64 06 F1 | 	add	objptr, ##38912
0fbd8     32 97 02 FB | 	rdlong	arg03, objptr
0fbdc     4B 95 02 F6 | 	mov	arg02, arg03
0fbe0     01 94 66 F0 | 	shl	arg02, #1
0fbe4     4B 95 02 F1 | 	add	arg02, arg03
0fbe8     02 94 66 F0 | 	shl	arg02, #2
0fbec     03 00 00 FF 
0fbf0     04 64 86 F1 | 	sub	objptr, ##1540
0fbf4     32 95 02 F1 | 	add	arg02, objptr
0fbf8     4A 97 02 FB | 	rdlong	arg03, arg02
0fbfc                 | ' 
0fbfc                 | ' numpar=compiledline(lineptr_e).result.uresult
0fbfc                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
0fbfc     02 96 16 F2 | 	cmp	arg03, #2 wc
0fc00     48 00 00 FF 
0fc04     FC 65 86 F1 | 	sub	objptr, ##37372
0fc08     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
0fc0c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1330
0fc10     00 92 06 F6 | 	mov	arg01, #0
0fc14     74 A6 B1 FD | 	call	#__system___getiolock_0622
0fc18     3D 93 02 F6 | 	mov	arg01, result1
0fc1c     E8 50 B1 FD | 	call	#__system___lockmem
0fc20     98 01 00 FF 
0fc24     1F 95 06 F6 | 	mov	arg02, ##@LR__5992
0fc28     00 92 06 F6 | 	mov	arg01, #0
0fc2c     00 96 06 F6 | 	mov	arg03, #0
0fc30     C8 5D B1 FD | 	call	#__system___basic_print_string
0fc34     00 92 06 F6 | 	mov	arg01, #0
0fc38     50 A6 B1 FD | 	call	#__system___getiolock_0622
0fc3c     3D 01 68 FC | 	wrlong	#0, result1
0fc40     27 92 06 F6 | 	mov	arg01, #39
0fc44     00 94 06 F6 | 	mov	arg02, #0
0fc48     EC 13 B1 FD | 	call	#_printerror
0fc4c     78 00 90 FD | 	jmp	#LR__1331
0fc50                 | LR__1330
0fc50     1C DA BF FD | 	call	#_pop
0fc54     E7 7A 62 FC | 	wrlong	result1, fp
0fc58     04 CE 05 F1 | 	add	fp, #4
0fc5c     E7 7C 62 FC | 	wrlong	result2, fp
0fc60     04 CE 05 F1 | 	add	fp, #4
0fc64     E7 7E 62 FC | 	wrlong	result3, fp
0fc68     08 CE 85 F1 | 	sub	fp, #8
0fc6c     54 00 00 FF 
0fc70     60 64 06 F1 | 	add	objptr, ##43104
0fc74     32 A7 02 FB | 	rdlong	local01, objptr
0fc78     54 00 00 FF 
0fc7c     60 64 86 F1 | 	sub	objptr, ##43104
0fc80     E7 92 02 F6 | 	mov	arg01, fp
0fc84     80 DC BF FD | 	call	#_converttofloat
0fc88     3D 95 02 F6 | 	mov	arg02, result1
0fc8c     53 93 02 F6 | 	mov	arg01, local01
0fc90     44 77 B1 FD | 	call	#__system___float_mul
0fc94     3D 95 02 F6 | 	mov	arg02, result1
0fc98     87 E4 1F FF 
0fc9c     DB 93 06 F6 | 	mov	arg01, ##1070141403
0fca0     1F 94 E6 F4 | 	bitnot	arg02, #31
0fca4     60 73 B1 FD | 	call	#__system___float_add
0fca8     3D 93 02 F6 | 	mov	arg01, result1
0fcac     98 80 B1 FD | 	call	#__system____builtin_sinf
0fcb0     E7 7A 62 FC | 	wrlong	result1, fp
0fcb4     08 CE 05 F1 | 	add	fp, #8
0fcb8     E7 3C 68 FC | 	wrlong	#30, fp
0fcbc     08 CE 85 F1 | 	sub	fp, #8
0fcc0     E7 92 02 F6 | 	mov	arg01, fp
0fcc4     38 DA BF FD | 	call	#_push
0fcc8                 | LR__1331
0fcc8     E7 F0 03 F6 | 	mov	ptra, fp
0fccc     F2 00 A0 FD | 	call	#popregs_
0fcd0                 | _do_cos_ret
0fcd0     2D 00 64 FD | 	ret
0fcd4                 | 
0fcd4                 | ' 
0fcd4                 | ' '-------------------- cursor
0fcd4                 | ' 
0fcd4                 | ' sub do_cursor
0fcd4                 | _do_cursor
0fcd4     98 D9 BF FD | 	call	#_pop
0fcd8     00 7A 4E F2 | 	cmps	result1, #0 wz
0fcdc                 | ' t1=pop()
0fcdc                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
0fcdc     14 00 90 5D |  if_ne	jmp	#LR__1340
0fce0     11 92 06 F6 | 	mov	arg01, #17
0fce4     00 94 06 F6 | 	mov	arg02, #0
0fce8     00 96 06 F6 | 	mov	arg03, #0
0fcec     5C 23 B1 FD | 	call	#_hg010b_spin2_setspritesize
0fcf0     10 00 90 FD | 	jmp	#LR__1341
0fcf4                 | LR__1340
0fcf4     11 92 06 F6 | 	mov	arg01, #17
0fcf8     08 94 06 F6 | 	mov	arg02, #8
0fcfc     10 96 06 F6 | 	mov	arg03, #16
0fd00     48 23 B1 FD | 	call	#_hg010b_spin2_setspritesize
0fd04                 | LR__1341
0fd04                 | _do_cursor_ret
0fd04     2D 00 64 FD | 	ret
0fd08                 | 
0fd08                 | ' 
0fd08                 | ' '-------------------- defchar
0fd08                 | ' 
0fd08                 | ' sub do_defchar
0fd08                 | _do_defchar
0fd08     04 CA 05 F6 | 	mov	COUNT_, #4
0fd0c     E8 00 A0 FD | 	call	#pushregs_
0fd10     28 F0 07 F1 | 	add	ptra, #40
0fd14     58 D9 BF FD | 	call	#_pop
0fd18     3F 95 02 F6 | 	mov	arg02, result3
0fd1c     E7 7A 62 FC | 	wrlong	result1, fp
0fd20     04 CE 05 F1 | 	add	fp, #4
0fd24     E7 7C 62 FC | 	wrlong	result2, fp
0fd28     04 CE 05 F1 | 	add	fp, #4
0fd2c     E7 94 62 FC | 	wrlong	arg02, fp
0fd30     08 CE 85 F1 | 	sub	fp, #8
0fd34     E7 92 02 F6 | 	mov	arg01, fp
0fd38     10 DB BF FD | 	call	#_converttoint
0fd3c     3D A7 02 F6 | 	mov	local01, result1
0fd40     2C D9 BF FD | 	call	#_pop
0fd44     3F 95 02 F6 | 	mov	arg02, result3
0fd48     E7 7A 62 FC | 	wrlong	result1, fp
0fd4c     04 CE 05 F1 | 	add	fp, #4
0fd50     E7 7C 62 FC | 	wrlong	result2, fp
0fd54     04 CE 05 F1 | 	add	fp, #4
0fd58     E7 94 62 FC | 	wrlong	arg02, fp
0fd5c     08 CE 85 F1 | 	sub	fp, #8
0fd60     E7 92 02 F6 | 	mov	arg01, fp
0fd64     E4 DA BF FD | 	call	#_converttoint
0fd68     3D A9 02 F6 | 	mov	local02, result1
0fd6c                 | ' 
0fd6c                 | ' t1=pop() : cptr=converttoint(t1)
0fd6c                 | ' t1=pop() : c=converttoint(t1)
0fd6c                 | ' if cptr<$80000 then 
0fd6c     00 04 00 FF 
0fd70     00 A6 16 F2 | 	cmp	local01, ##524288 wc
0fd74     10 00 90 3D |  if_ae	jmp	#LR__1350
0fd78     54 93 02 F6 | 	mov	arg01, local02
0fd7c     53 95 02 F6 | 	mov	arg02, local01
0fd80     D0 2E B1 FD | 	call	#_hg010b_spin2_defchar
0fd84     40 00 90 FD | 	jmp	#LR__1352
0fd88                 | LR__1350
0fd88                 | '   for i=0 to 15: buf(i)=pspeek(cptr+i): next i
0fd88     00 AA 06 F6 | 	mov	local03, #0
0fd8c                 | LR__1351
0fd8c     55 AD 02 F6 | 	mov	local04, local03
0fd90     E7 94 02 F6 | 	mov	arg02, fp
0fd94     14 94 06 F1 | 	add	arg02, #20
0fd98     4A AD 02 F1 | 	add	local04, arg02
0fd9c     53 93 02 F6 | 	mov	arg01, local01
0fda0     55 93 02 F1 | 	add	arg01, local03
0fda4     04 15 B1 FD | 	call	#_pspeek
0fda8     56 7B 42 FC | 	wrbyte	result1, local04
0fdac     01 AA 06 F1 | 	add	local03, #1
0fdb0     10 AA 56 F2 | 	cmps	local03, #16 wc
0fdb4     D4 FF 9F CD |  if_b	jmp	#LR__1351
0fdb8     E7 94 02 F6 | 	mov	arg02, fp
0fdbc     14 94 06 F1 | 	add	arg02, #20
0fdc0     54 93 02 F6 | 	mov	arg01, local02
0fdc4     8C 2E B1 FD | 	call	#_hg010b_spin2_defchar
0fdc8                 | LR__1352
0fdc8     E7 F0 03 F6 | 	mov	ptra, fp
0fdcc     F2 00 A0 FD | 	call	#popregs_
0fdd0                 | _do_defchar_ret
0fdd0     2D 00 64 FD | 	ret
0fdd4                 | 
0fdd4                 | ' 
0fdd4                 | ' '-------------------- defenv
0fdd4                 | ' 
0fdd4                 | ' sub do_defenv
0fdd4                 | _do_defenv
0fdd4     14 CA 05 F6 | 	mov	COUNT_, #20
0fdd8     E8 00 A0 FD | 	call	#pushregs_
0fddc     58 F0 07 F1 | 	add	ptra, #88
0fde0     4C 00 00 FF 
0fde4     00 64 06 F1 | 	add	objptr, ##38912
0fde8     32 9B 02 FB | 	rdlong	arg05, objptr
0fdec     4D 99 02 F6 | 	mov	arg04, arg05
0fdf0     01 98 66 F0 | 	shl	arg04, #1
0fdf4     4D 99 02 F1 | 	add	arg04, arg05
0fdf8     02 98 66 F0 | 	shl	arg04, #2
0fdfc     03 00 00 FF 
0fe00     04 64 86 F1 | 	sub	objptr, ##1540
0fe04     32 99 02 F1 | 	add	arg04, objptr
0fe08     4C A7 02 FB | 	rdlong	local01, arg04
0fe0c                 | ' 
0fe0c                 | ' numpar=compiledline(lineptr_e).result.uresult
0fe0c                 | ' if numpar<>2 andalso numpar<>5 then return 			' TODO and print error
0fe0c     02 A6 0E F2 | 	cmp	local01, #2 wz
0fe10     48 00 00 FF 
0fe14     FC 65 86 F1 | 	sub	objptr, ##37372
0fe18     05 A6 0E 52 |  if_ne	cmp	local01, #5 wz
0fe1c     50 07 90 5D |  if_ne	jmp	#LR__1380
0fe20                 | ' 
0fe20                 | ' if numpar=2 then						' env from .h2 or from a pointer
0fe20     02 A6 0E F2 | 	cmp	local01, #2 wz
0fe24     1C 03 90 5D |  if_ne	jmp	#LR__1372
0fe28     44 D8 BF FD | 	call	#_pop
0fe2c     3F 9B 02 F6 | 	mov	arg05, result3
0fe30     40 CE 05 F1 | 	add	fp, #64
0fe34     E7 7A 62 FC | 	wrlong	result1, fp
0fe38     04 CE 05 F1 | 	add	fp, #4
0fe3c     E7 7C 62 FC | 	wrlong	result2, fp
0fe40     04 CE 05 F1 | 	add	fp, #4
0fe44     E7 9A 62 FC | 	wrlong	arg05, fp
0fe48                 | '   t1=pop()
0fe48                 | '   if t1.result_type=result_string2 then 
0fe48     48 CE 85 F1 | 	sub	fp, #72
0fe4c     2B 9A 0E F2 | 	cmp	arg05, #43 wz
0fe50     18 00 90 5D |  if_ne	jmp	#LR__1360
0fe54     40 CE 05 F1 | 	add	fp, #64
0fe58     E7 92 02 FB | 	rdlong	arg01, fp
0fe5c     40 CE 85 F1 | 	sub	fp, #64
0fe60     7C D9 BF FD | 	call	#_convertstring
0fe64     3D A9 02 F6 | 	mov	local02, result1
0fe68     38 00 90 FD | 	jmp	#LR__1362
0fe6c                 | LR__1360
0fe6c     48 CE 05 F1 | 	add	fp, #72
0fe70     E7 9A 02 FB | 	rdlong	arg05, fp
0fe74     48 CE 85 F1 | 	sub	fp, #72
0fe78     1F 9A 0E F2 | 	cmp	arg05, #31 wz
0fe7c     40 CE 05 A1 |  if_e	add	fp, #64
0fe80     E7 A8 02 AB |  if_e	rdlong	local02, fp
0fe84     40 CE 85 A1 |  if_e	sub	fp, #64
0fe88     18 00 90 AD |  if_e	jmp	#LR__1361
0fe8c     98 01 00 FF 
0fe90     25 A9 06 F6 | 	mov	local02, ##@LR__5993
0fe94     E7 92 02 F6 | 	mov	arg01, fp
0fe98     40 92 06 F1 | 	add	arg01, #64
0fe9c     AC D9 BF FD | 	call	#_converttoint
0fea0     3D AB 02 F6 | 	mov	local03, result1
0fea4                 | LR__1361
0fea4                 | LR__1362
0fea4                 | '   if s1<>"" then 
0fea4     98 01 00 FF 
0fea8     26 95 06 F6 | 	mov	arg02, ##@LR__5994
0feac     54 93 02 F6 | 	mov	arg01, local02
0feb0     7C 4E B1 FD | 	call	#__system___string_cmp
0feb4     00 7A 0E F2 | 	cmp	result1, #0 wz
0feb8     BC 01 90 AD |  if_e	jmp	#LR__1366
0febc     B0 D7 BF FD | 	call	#_pop
0fec0     3F 9B 02 F6 | 	mov	arg05, result3
0fec4     40 CE 05 F1 | 	add	fp, #64
0fec8     E7 7A 62 FC | 	wrlong	result1, fp
0fecc     04 CE 05 F1 | 	add	fp, #4
0fed0     E7 7C 62 FC | 	wrlong	result2, fp
0fed4     04 CE 05 F1 | 	add	fp, #4
0fed8     E7 9A 62 FC | 	wrlong	arg05, fp
0fedc     08 CE 85 F1 | 	sub	fp, #8
0fee0     E7 92 02 F6 | 	mov	arg01, fp
0fee4     40 CE 85 F1 | 	sub	fp, #64
0fee8     60 D9 BF FD | 	call	#_converttoint
0feec     3D AD 02 F6 | 	mov	local04, result1
0fef0                 | '     t1=pop()
0fef0                 | '     channel=converttoint(t1) 
0fef0                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0fef0     09 92 06 F6 | 	mov	arg01, #9
0fef4     EC 99 B1 FD | 	call	#__system__close
0fef8     09 AE 06 F6 | 	mov	local05, #9
0fefc     98 01 00 FF 
0ff00     27 93 06 F6 | 	mov	arg01, ##@LR__5995
0ff04     54 95 02 F6 | 	mov	arg02, local02
0ff08     58 4E B1 FD | 	call	#__system___string_concat
0ff0c     3D 95 02 F6 | 	mov	arg02, result1
0ff10     57 93 02 F6 | 	mov	arg01, local05
0ff14     00 96 06 F6 | 	mov	arg03, #0
0ff18     9C 59 B1 FD | 	call	#__system___basic_open_string
0ff1c     20 68 06 F1 | 	add	ptr___system__dat__, #32
0ff20     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
0ff24     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
0ff28     20 68 86 F1 | 	sub	ptr___system__dat__, #32
0ff2c     3D B1 0A F6 | 	mov	local06, result1 wz
0ff30                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0ff30     8C 00 90 AD |  if_e	jmp	#LR__1363
0ff34     00 92 06 F6 | 	mov	arg01, #0
0ff38     50 A3 B1 FD | 	call	#__system___getiolock_0622
0ff3c     3D 93 02 F6 | 	mov	arg01, result1
0ff40     C4 4D B1 FD | 	call	#__system___lockmem
0ff44     98 01 00 FF 
0ff48     34 95 06 F6 | 	mov	arg02, ##@LR__5996
0ff4c     00 92 06 F6 | 	mov	arg01, #0
0ff50     00 96 06 F6 | 	mov	arg03, #0
0ff54     A4 5A B1 FD | 	call	#__system___basic_print_string
0ff58     00 92 06 F6 | 	mov	arg01, #0
0ff5c     58 95 02 F6 | 	mov	arg02, local06
0ff60     00 96 06 F6 | 	mov	arg03, #0
0ff64     0A 98 06 F6 | 	mov	arg04, #10
0ff68     D4 5A B1 FD | 	call	#__system___basic_print_integer
0ff6c     98 01 00 FF 
0ff70     42 95 06 F6 | 	mov	arg02, ##@LR__5997
0ff74     00 92 06 F6 | 	mov	arg01, #0
0ff78     00 96 06 F6 | 	mov	arg03, #0
0ff7c     7C 5A B1 FD | 	call	#__system___basic_print_string
0ff80     58 93 02 F6 | 	mov	arg01, local06
0ff84     30 6F B1 FD | 	call	#__system___strerror
0ff88     3D 95 02 F6 | 	mov	arg02, result1
0ff8c     00 92 06 F6 | 	mov	arg01, #0
0ff90     00 96 06 F6 | 	mov	arg03, #0
0ff94     64 5A B1 FD | 	call	#__system___basic_print_string
0ff98     00 92 06 F6 | 	mov	arg01, #0
0ff9c     0A 94 06 F6 | 	mov	arg02, #10
0ffa0     00 96 06 F6 | 	mov	arg03, #0
0ffa4     FC 59 B1 FD | 	call	#__system___basic_print_char
0ffa8     00 92 06 F6 | 	mov	arg01, #0
0ffac     DC A2 B1 FD | 	call	#__system___getiolock_0622
0ffb0     3D 01 68 FC | 	wrlong	#0, result1
0ffb4     09 92 06 F6 | 	mov	arg01, #9
0ffb8     28 99 B1 FD | 	call	#__system__close
0ffbc     B0 05 90 FD | 	jmp	#LR__1380
0ffc0                 | LR__1363
0ffc0                 | '     get #9,17,envbuf8(channel,0),256
0ffc0     56 97 02 F6 | 	mov	arg03, local04
0ffc4     09 96 66 F0 | 	shl	arg03, #9
0ffc8     56 97 02 F1 | 	add	arg03, local04
0ffcc     32 9B 02 F6 | 	mov	arg05, objptr
0ffd0     0E 00 00 FF 
0ffd4     38 9A 06 F1 | 	add	arg05, ##7224
0ffd8     4D 97 02 F1 | 	add	arg03, arg05
0ffdc     09 92 06 F6 | 	mov	arg01, #9
0ffe0     11 94 06 F6 | 	mov	arg02, #17
0ffe4     00 99 06 F6 | 	mov	arg04, #256
0ffe8     01 9A 06 F6 | 	mov	arg05, #1
0ffec     94 5B B1 FD | 	call	#__system___basic_get
0fff0                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0fff0     FF B2 06 F6 | 	mov	local07, #255
0fff4     0E 00 00 FF 
0fff8     38 64 06 F1 | 	add	objptr, ##7224
0fffc     D7 24 48 FB | 	callpa	#(@LR__1365-@LR__1364)>>2,fcache_load_ptr_
10000                 | LR__1364
10000     56 B1 02 F6 | 	mov	local06, local04
10004     09 B0 66 F0 | 	shl	local06, #9
10008     32 B1 02 F1 | 	add	local06, objptr
1000c     59 AF 02 F6 | 	mov	local05, local07
10010     01 AE 66 F0 | 	shl	local05, #1
10014     58 AF 02 F1 | 	add	local05, local06
10018     56 AB 02 F6 | 	mov	local03, local04
1001c     09 AA 66 F0 | 	shl	local03, #9
10020     56 AB 02 F1 | 	add	local03, local04
10024     32 AB 02 F1 | 	add	local03, objptr
10028     59 B1 02 F6 | 	mov	local06, local07
1002c     55 B1 02 F1 | 	add	local06, local03
10030     58 B1 C2 FA | 	rdbyte	local06, local06
10034     08 B0 66 F0 | 	shl	local06, #8
10038     57 B1 52 FC | 	wrword	local06, local05
1003c     01 B2 86 F1 | 	sub	local07, #1
10040     00 B2 56 F2 | 	cmps	local07, #0 wc
10044     B8 FF 9F 3D |  if_ae	jmp	#LR__1364
10048                 | LR__1365
10048     0E 00 00 FF 
1004c     38 64 86 F1 | 	sub	objptr, ##7224
10050                 | '     close #9
10050     09 92 06 F6 | 	mov	arg01, #9
10054     8C 98 B1 FD | 	call	#__system__close
10058     09 AC 66 F0 | 	shl	local04, #9
1005c     32 B3 02 F6 | 	mov	local07, objptr
10060     0E 00 00 FF 
10064     38 B2 06 F1 | 	add	local07, ##7224
10068     59 AD 02 F1 | 	add	local04, local07
1006c     FE AD 06 F1 | 	add	local04, #510
10070     56 01 58 FC | 	wrword	#0, local04
10074                 | '     envbuf(channel,255)=0                                                              
10074                 | '     return
10074     F8 04 90 FD | 	jmp	#LR__1380
10078                 | LR__1366
10078                 | '     if wptr < $80000 then 
10078     00 04 00 FF 
1007c     00 AA 56 F2 | 	cmps	local03, ##524288 wc
10080     54 00 90 3D |  if_ae	jmp	#LR__1369
10084                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
10084     00 B2 06 F6 | 	mov	local07, #0
10088     D7 24 48 FB | 	callpa	#(@LR__1368-@LR__1367)>>2,fcache_load_ptr_
1008c                 | LR__1367
1008c     56 B1 02 F6 | 	mov	local06, local04
10090     09 B0 66 F0 | 	shl	local06, #9
10094     32 AF 02 F6 | 	mov	local05, objptr
10098     0E 00 00 FF 
1009c     38 AE 06 F1 | 	add	local05, ##7224
100a0     57 B1 02 F1 | 	add	local06, local05
100a4     59 AF 02 F6 | 	mov	local05, local07
100a8     01 AE 66 F0 | 	shl	local05, #1
100ac     58 AF 02 F1 | 	add	local05, local06
100b0     55 93 02 F6 | 	mov	arg01, local03
100b4     59 B1 02 F6 | 	mov	local06, local07
100b8     01 B0 66 F0 | 	shl	local06, #1
100bc     58 93 02 F1 | 	add	arg01, local06
100c0     49 7B E2 FA | 	rdword	result1, arg01
100c4     57 7B 52 FC | 	wrword	result1, local05
100c8     01 B2 06 F1 | 	add	local07, #1
100cc     00 B3 56 F2 | 	cmps	local07, #256 wc
100d0     B8 FF 9F CD |  if_b	jmp	#LR__1367
100d4                 | LR__1368
100d4     4C 00 90 FD | 	jmp	#LR__1371
100d8                 | LR__1369
100d8                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
100d8     00 B2 06 F6 | 	mov	local07, #0
100dc                 | LR__1370
100dc     56 B1 02 F6 | 	mov	local06, local04
100e0     09 B0 66 F0 | 	shl	local06, #9
100e4     32 AF 02 F6 | 	mov	local05, objptr
100e8     0E 00 00 FF 
100ec     38 AE 06 F1 | 	add	local05, ##7224
100f0     57 B1 02 F1 | 	add	local06, local05
100f4     59 AF 02 F6 | 	mov	local05, local07
100f8     01 AE 66 F0 | 	shl	local05, #1
100fc     58 AF 02 F1 | 	add	local05, local06
10100     55 93 02 F6 | 	mov	arg01, local03
10104     59 B1 02 F6 | 	mov	local06, local07
10108     01 B0 66 F0 | 	shl	local06, #1
1010c     58 93 02 F1 | 	add	arg01, local06
10110     28 12 B1 FD | 	call	#_psdpeek
10114     57 7B 52 FC | 	wrword	result1, local05
10118     01 B2 06 F1 | 	add	local07, #1
1011c     00 B3 56 F2 | 	cmps	local07, #256 wc
10120     B8 FF 9F CD |  if_b	jmp	#LR__1370
10124                 | LR__1371
10124     09 AC 66 F0 | 	shl	local04, #9
10128     32 B3 02 F6 | 	mov	local07, objptr
1012c     0E 00 00 FF 
10130     38 B2 06 F1 | 	add	local07, ##7224
10134     59 AD 02 F1 | 	add	local04, local07
10138     FE AD 06 F1 | 	add	local04, #510
1013c     56 01 58 FC | 	wrword	#0, local04
10140                 | '     envbuf(channel,255)=0
10140                 | '     return   
10140     2C 04 90 FD | 	jmp	#LR__1380
10144                 | LR__1372
10144                 | ' 
10144                 | ' if numpar=5 then   						 'simple adsr
10144     05 A6 0E F2 | 	cmp	local01, #5 wz
10148     08 04 90 5D |  if_ne	jmp	#LR__1379
1014c     20 D5 BF FD | 	call	#_pop
10150     3F B3 02 F6 | 	mov	local07, result3
10154     40 CE 05 F1 | 	add	fp, #64
10158     E7 7A 62 FC | 	wrlong	result1, fp
1015c     04 CE 05 F1 | 	add	fp, #4
10160     E7 7C 62 FC | 	wrlong	result2, fp
10164     04 CE 05 F1 | 	add	fp, #4
10168     E7 B2 62 FC | 	wrlong	local07, fp
1016c     08 CE 85 F1 | 	sub	fp, #8
10170     E7 92 02 F6 | 	mov	arg01, fp
10174     40 CE 85 F1 | 	sub	fp, #64
10178     8C D7 BF FD | 	call	#_converttofloat
1017c     3D B3 02 F6 | 	mov	local07, result1
10180     EC D4 BF FD | 	call	#_pop
10184     3F B1 02 F6 | 	mov	local06, result3
10188     40 CE 05 F1 | 	add	fp, #64
1018c     E7 7A 62 FC | 	wrlong	result1, fp
10190     04 CE 05 F1 | 	add	fp, #4
10194     E7 7C 62 FC | 	wrlong	result2, fp
10198     04 CE 05 F1 | 	add	fp, #4
1019c     E7 B0 62 FC | 	wrlong	local06, fp
101a0     08 CE 85 F1 | 	sub	fp, #8
101a4     E7 92 02 F6 | 	mov	arg01, fp
101a8     40 CE 85 F1 | 	sub	fp, #64
101ac     58 D7 BF FD | 	call	#_converttofloat
101b0     3D B5 02 F6 | 	mov	local08, result1
101b4     B8 D4 BF FD | 	call	#_pop
101b8     3F B1 02 F6 | 	mov	local06, result3
101bc     40 CE 05 F1 | 	add	fp, #64
101c0     E7 7A 62 FC | 	wrlong	result1, fp
101c4     04 CE 05 F1 | 	add	fp, #4
101c8     E7 7C 62 FC | 	wrlong	result2, fp
101cc     04 CE 05 F1 | 	add	fp, #4
101d0     E7 B0 62 FC | 	wrlong	local06, fp
101d4     08 CE 85 F1 | 	sub	fp, #8
101d8     E7 92 02 F6 | 	mov	arg01, fp
101dc     40 CE 85 F1 | 	sub	fp, #64
101e0     24 D7 BF FD | 	call	#_converttofloat
101e4     3D B1 02 F6 | 	mov	local06, result1
101e8     84 D4 BF FD | 	call	#_pop
101ec     3F AF 02 F6 | 	mov	local05, result3
101f0     40 CE 05 F1 | 	add	fp, #64
101f4     E7 7A 62 FC | 	wrlong	result1, fp
101f8     04 CE 05 F1 | 	add	fp, #4
101fc     E7 7C 62 FC | 	wrlong	result2, fp
10200     04 CE 05 F1 | 	add	fp, #4
10204     E7 AE 62 FC | 	wrlong	local05, fp
10208     08 CE 85 F1 | 	sub	fp, #8
1020c     E7 92 02 F6 | 	mov	arg01, fp
10210     40 CE 85 F1 | 	sub	fp, #64
10214     F0 D6 BF FD | 	call	#_converttofloat
10218     3D AF 02 F6 | 	mov	local05, result1
1021c     50 D4 BF FD | 	call	#_pop
10220     3F AD 02 F6 | 	mov	local04, result3
10224     40 CE 05 F1 | 	add	fp, #64
10228     E7 7A 62 FC | 	wrlong	result1, fp
1022c     04 CE 05 F1 | 	add	fp, #4
10230     E7 7C 62 FC | 	wrlong	result2, fp
10234     04 CE 05 F1 | 	add	fp, #4
10238     E7 AC 62 FC | 	wrlong	local04, fp
1023c     08 CE 85 F1 | 	sub	fp, #8
10240     E7 92 02 F6 | 	mov	arg01, fp
10244     40 CE 85 F1 | 	sub	fp, #64
10248     00 D6 BF FD | 	call	#_converttoint
1024c     3D AD 02 F6 | 	mov	local04, result1
10250                 | '   t1=pop() : rr=converttofloat(t1)
10250                 | '   t1=pop() : ss=converttofloat(t1) 
10250                 | '   t1=pop() : dd=converttofloat(t1)
10250                 | '   t1=pop() : aa=converttofloat(t1)
10250                 | '   t1=pop() : channel=converttoint(t1)
10250                 | '   if ss<0.0 then ss=0.0 
10250     5A 93 02 F6 | 	mov	arg01, local08
10254     00 94 06 F6 | 	mov	arg02, #0
10258     01 96 06 F6 | 	mov	arg03, #1
1025c     AC 75 B1 FD | 	call	#__system___float_cmp
10260     00 7A 56 F2 | 	cmps	result1, #0 wc
10264     00 B4 06 C6 |  if_b	mov	local08, #0
10268                 | '   if ss>1.0 then ss=1.0
10268     5A 93 02 F6 | 	mov	arg01, local08
1026c     00 C0 1F FF 
10270     00 94 06 F6 | 	mov	arg02, ##1065353216
10274     01 96 66 F6 | 	neg	arg03, #1
10278     90 75 B1 FD | 	call	#__system___float_cmp
1027c     01 7A 56 F2 | 	cmps	result1, #1 wc
10280     00 C0 1F 3F 
10284     00 B4 06 36 |  if_ae	mov	local08, ##1065353216
10288     57 93 02 F6 | 	mov	arg01, local05
1028c     58 95 02 F6 | 	mov	arg02, local06
10290     74 6D B1 FD | 	call	#__system___float_add
10294     3D 93 02 F6 | 	mov	arg01, result1
10298     59 95 02 F6 | 	mov	arg02, local07
1029c     68 6D B1 FD | 	call	#__system___float_add
102a0     3D 95 02 F6 | 	mov	arg02, result1
102a4     00 C0 21 FF 
102a8     00 92 06 F6 | 	mov	arg01, ##1132462080
102ac     2C 73 B1 FD | 	call	#__system___float_div
102b0     3D B7 02 F6 | 	mov	local09, result1
102b4     57 93 02 F6 | 	mov	arg01, local05
102b8     5B 95 02 F6 | 	mov	arg02, local09
102bc     18 71 B1 FD | 	call	#__system___float_mul
102c0     3D 93 02 F6 | 	mov	arg01, result1
102c4     01 94 06 F6 | 	mov	arg02, #1
102c8     D4 75 B1 FD | 	call	#__system___float_tointeger
102cc     3D B9 02 F6 | 	mov	local10, result1
102d0     58 93 02 F6 | 	mov	arg01, local06
102d4     5B 95 02 F6 | 	mov	arg02, local09
102d8     FC 70 B1 FD | 	call	#__system___float_mul
102dc     3D 93 02 F6 | 	mov	arg01, result1
102e0     01 94 06 F6 | 	mov	arg02, #1
102e4     B8 75 B1 FD | 	call	#__system___float_tointeger
102e8     3D BB 02 F6 | 	mov	local11, result1
102ec     59 93 02 F6 | 	mov	arg01, local07
102f0     5B 95 02 F6 | 	mov	arg02, local09
102f4     E0 70 B1 FD | 	call	#__system___float_mul
102f8     3D 93 02 F6 | 	mov	arg01, result1
102fc     01 94 06 F6 | 	mov	arg02, #1
10300     9C 75 B1 FD | 	call	#__system___float_tointeger
10304     3D B1 02 F6 | 	mov	local06, result1
10308     F8 BF 23 FF 
1030c     00 AE 06 F6 | 	mov	local05, ##1199566848
10310     5C 93 52 F6 | 	abs	arg01, local10 wc
10314     1F BC C6 C9 |  if_b	decod	local12, #31
10318     00 BC 06 36 |  if_ae	mov	local12, #0
1031c     B4 6C B1 FD | 	call	#__system___float_fromuns
10320     5E 7B 62 F5 | 	xor	result1, local12
10324     3D 95 02 F6 | 	mov	arg02, result1
10328     57 93 02 F6 | 	mov	arg01, local05
1032c     AC 72 B1 FD | 	call	#__system___float_div
10330     3D BF 02 F6 | 	mov	local13, result1
10334     F8 BF 23 FF 
10338     00 AE 06 F6 | 	mov	local05, ##1199566848
1033c     F8 BF 23 FF 
10340     00 92 06 F6 | 	mov	arg01, ##1199566848
10344     5A 95 02 F6 | 	mov	arg02, local08
10348     8C 70 B1 FD | 	call	#__system___float_mul
1034c     3D 95 02 F6 | 	mov	arg02, result1
10350     57 93 02 F6 | 	mov	arg01, local05
10354     1F 94 E6 F4 | 	bitnot	arg02, #31
10358     AC 6C B1 FD | 	call	#__system___float_add
1035c     3D AF 02 F6 | 	mov	local05, result1
10360     5D 93 52 F6 | 	abs	arg01, local11 wc
10364     1F BC C6 C9 |  if_b	decod	local12, #31
10368     00 BC 06 36 |  if_ae	mov	local12, #0
1036c     64 6C B1 FD | 	call	#__system___float_fromuns
10370     5E 7B 62 F5 | 	xor	result1, local12
10374     3D 95 02 F6 | 	mov	arg02, result1
10378     57 93 02 F6 | 	mov	arg01, local05
1037c     5C 72 B1 FD | 	call	#__system___float_div
10380     3D C1 02 F6 | 	mov	local14, result1
10384     F8 BF 23 FF 
10388     00 92 06 F6 | 	mov	arg01, ##1199566848
1038c     5A 95 02 F6 | 	mov	arg02, local08
10390     44 70 B1 FD | 	call	#__system___float_mul
10394     3D AF 02 F6 | 	mov	local05, result1
10398     58 93 52 F6 | 	abs	arg01, local06 wc
1039c     1F BC C6 C9 |  if_b	decod	local12, #31
103a0     00 BC 06 36 |  if_ae	mov	local12, #0
103a4     2C 6C B1 FD | 	call	#__system___float_fromuns
103a8     5E 7B 62 F5 | 	xor	result1, local12
103ac     3D 95 02 F6 | 	mov	arg02, result1
103b0     57 93 02 F6 | 	mov	arg01, local05
103b4     24 72 B1 FD | 	call	#__system___float_div
103b8     3D C3 02 F6 | 	mov	local15, result1
103bc     56 B3 02 F6 | 	mov	local07, local04
103c0     01 B2 66 F0 | 	shl	local07, #1
103c4     32 C5 02 F6 | 	mov	local16, objptr
103c8     54 00 00 FF 
103cc     6C C4 06 F1 | 	add	local16, ##43116
103d0     62 B3 02 F1 | 	add	local07, local16
103d4     5C C7 02 F6 | 	mov	local17, local10
103d8     5D C7 02 F1 | 	add	local17, local11
103dc     59 C7 52 FC | 	wrword	local17, local07
103e0     00 C8 06 F6 | 	mov	local18, #0
103e4                 | '   fulltime=aa+dd+rr
103e4                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit)  
103e4                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r  
103e4                 | '   suspoints(channel)=a+d
103e4                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
103e4     00 B2 06 F6 | 	mov	local07, #0
103e8     5C CB 02 F6 | 	mov	local19, local10
103ec                 | LR__1373
103ec     65 B3 52 F2 | 	cmps	local07, local19 wc
103f0     4C 00 90 3D |  if_ae	jmp	#LR__1374
103f4     56 C7 02 F6 | 	mov	local17, local04
103f8     09 C6 66 F0 | 	shl	local17, #9
103fc     32 C5 02 F6 | 	mov	local16, objptr
10400     0E 00 00 FF 
10404     38 C4 06 F1 | 	add	local16, ##7224
10408     62 C7 02 F1 | 	add	local17, local16
1040c     59 C5 02 F6 | 	mov	local16, local07
10410     01 C4 66 F0 | 	shl	local16, #1
10414     63 C5 02 F1 | 	add	local16, local17
10418     64 93 02 F6 | 	mov	arg01, local18
1041c     01 94 06 F6 | 	mov	arg02, #1
10420     7C 74 B1 FD | 	call	#__system___float_tointeger
10424     62 7B 52 FC | 	wrword	result1, local16
10428     5F 95 02 F6 | 	mov	arg02, local13
1042c     64 93 02 F6 | 	mov	arg01, local18
10430     D4 6B B1 FD | 	call	#__system___float_add
10434     3D C9 02 F6 | 	mov	local18, result1
10438     01 B2 06 F1 | 	add	local07, #1
1043c     AC FF 9F FD | 	jmp	#LR__1373
10440                 | LR__1374
10440                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
10440     5C B3 02 F6 | 	mov	local07, local10
10444     5C CD 02 F6 | 	mov	local20, local10
10448     5D CD 02 F1 | 	add	local20, local11
1044c                 | LR__1375
1044c     66 B3 52 F2 | 	cmps	local07, local20 wc
10450     68 00 90 3D |  if_ae	jmp	#LR__1376
10454     56 CB 02 F6 | 	mov	local19, local04
10458     09 CA 66 F0 | 	shl	local19, #9
1045c     32 C5 02 F6 | 	mov	local16, objptr
10460     0E 00 00 FF 
10464     38 C4 06 F1 | 	add	local16, ##7224
10468     62 CB 02 F1 | 	add	local19, local16
1046c     59 C7 02 F6 | 	mov	local17, local07
10470     01 C6 66 F0 | 	shl	local17, #1
10474     65 C7 02 F1 | 	add	local17, local19
10478     64 93 02 F6 | 	mov	arg01, local18
1047c     01 94 06 F6 | 	mov	arg02, #1
10480     1C 74 B1 FD | 	call	#__system___float_tointeger
10484     63 7B 52 FC | 	wrword	result1, local17
10488     64 93 02 F6 | 	mov	arg01, local18
1048c     60 95 02 F6 | 	mov	arg02, local14
10490     1F 94 E6 F4 | 	bitnot	arg02, #31
10494     70 6B B1 FD | 	call	#__system___float_add
10498     3D C9 02 F6 | 	mov	local18, result1
1049c     64 93 02 F6 | 	mov	arg01, local18
104a0     00 94 06 F6 | 	mov	arg02, #0
104a4     01 96 06 F6 | 	mov	arg03, #1
104a8     60 73 B1 FD | 	call	#__system___float_cmp
104ac     00 7A 56 F2 | 	cmps	result1, #0 wc
104b0     00 C8 06 C6 |  if_b	mov	local18, #0
104b4     01 B2 06 F1 | 	add	local07, #1
104b8     90 FF 9F FD | 	jmp	#LR__1375
104bc                 | LR__1376
104bc                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
104bc     5C B3 02 F6 | 	mov	local07, local10
104c0     5D B3 02 F1 | 	add	local07, local11
104c4                 | LR__1377
104c4     00 B3 56 F2 | 	cmps	local07, #256 wc
104c8     68 00 90 3D |  if_ae	jmp	#LR__1378
104cc     56 CD 02 F6 | 	mov	local20, local04
104d0     09 CC 66 F0 | 	shl	local20, #9
104d4     32 C7 02 F6 | 	mov	local17, objptr
104d8     0E 00 00 FF 
104dc     38 C6 06 F1 | 	add	local17, ##7224
104e0     63 CD 02 F1 | 	add	local20, local17
104e4     59 CB 02 F6 | 	mov	local19, local07
104e8     01 CA 66 F0 | 	shl	local19, #1
104ec     66 CB 02 F1 | 	add	local19, local20
104f0     64 93 02 F6 | 	mov	arg01, local18
104f4     01 94 06 F6 | 	mov	arg02, #1
104f8     A4 73 B1 FD | 	call	#__system___float_tointeger
104fc     65 7B 52 FC | 	wrword	result1, local19
10500     64 93 02 F6 | 	mov	arg01, local18
10504     61 95 02 F6 | 	mov	arg02, local15
10508     1F 94 E6 F4 | 	bitnot	arg02, #31
1050c     F8 6A B1 FD | 	call	#__system___float_add
10510     3D C9 02 F6 | 	mov	local18, result1
10514     64 93 02 F6 | 	mov	arg01, local18
10518     00 94 06 F6 | 	mov	arg02, #0
1051c     01 96 06 F6 | 	mov	arg03, #1
10520     E8 72 B1 FD | 	call	#__system___float_cmp
10524     00 7A 56 F2 | 	cmps	result1, #0 wc
10528     00 C8 06 C6 |  if_b	mov	local18, #0
1052c     01 B2 06 F1 | 	add	local07, #1
10530     90 FF 9F FD | 	jmp	#LR__1377
10534                 | LR__1378
10534     56 CD 02 F6 | 	mov	local20, local04
10538     09 CC 66 F0 | 	shl	local20, #9
1053c     32 C5 02 F6 | 	mov	local16, objptr
10540     0E 00 00 FF 
10544     38 C4 06 F1 | 	add	local16, ##7224
10548     62 CD 02 F1 | 	add	local20, local16
1054c     FE CD 06 F1 | 	add	local20, #510
10550     66 01 58 FC | 	wrword	#0, local20
10554                 | LR__1379
10554     09 AC 66 F0 | 	shl	local04, #9
10558     32 C5 02 F6 | 	mov	local16, objptr
1055c     0E 00 00 FF 
10560     38 C4 06 F1 | 	add	local16, ##7224
10564     62 AD 02 F1 | 	add	local04, local16
10568     FE AD 06 F1 | 	add	local04, #510
1056c     56 01 58 FC | 	wrword	#0, local04
10570                 | LR__1380
10570     E7 F0 03 F6 | 	mov	ptra, fp
10574     F2 00 A0 FD | 	call	#popregs_
10578                 | _do_defenv_ret
10578     2D 00 64 FD | 	ret
1057c                 | 
1057c                 | ' 
1057c                 | ' '-------------------- defsnd
1057c                 | ' 
1057c                 | ' sub do_defsnd
1057c                 | _do_defsnd
1057c     0D CA 05 F6 | 	mov	COUNT_, #13
10580     E8 00 A0 FD | 	call	#pushregs_
10584     80 F0 07 F1 | 	add	ptra, #128
10588     4C 00 00 FF 
1058c     00 64 06 F1 | 	add	objptr, ##38912
10590     32 9B 02 FB | 	rdlong	arg05, objptr
10594     4D 99 02 F6 | 	mov	arg04, arg05
10598     01 98 66 F0 | 	shl	arg04, #1
1059c     4D 99 02 F1 | 	add	arg04, arg05
105a0     02 98 66 F0 | 	shl	arg04, #2
105a4     03 00 00 FF 
105a8     04 64 86 F1 | 	sub	objptr, ##1540
105ac     32 99 02 F1 | 	add	arg04, objptr
105b0     4C A7 02 FB | 	rdlong	local01, arg04
105b4                 | ' 
105b4                 | ' numpar=compiledline(lineptr_e).result.uresult
105b4                 | ' 
105b4                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
105b4                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
105b4                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
105b4                 | ' ' defsnd channel, oneint - loads the wave from the pointer
105b4                 | ' 
105b4                 | ' if numpar<2 then return
105b4     02 A6 56 F2 | 	cmps	local01, #2 wc
105b8     48 00 00 FF 
105bc     FC 65 86 F1 | 	sub	objptr, ##37372
105c0     88 06 90 CD |  if_b	jmp	#LR__1411
105c4                 | '  
105c4                 | ' if numpar=2 then
105c4     02 A6 0E F2 | 	cmp	local01, #2 wz
105c8     E4 02 90 5D |  if_ne	jmp	#LR__1399
105cc     A0 D0 BF FD | 	call	#_pop
105d0     3F 9B 02 F6 | 	mov	arg05, result3
105d4     2C CE 05 F1 | 	add	fp, #44
105d8     E7 7A 62 FC | 	wrlong	result1, fp
105dc     04 CE 05 F1 | 	add	fp, #4
105e0     E7 7C 62 FC | 	wrlong	result2, fp
105e4     04 CE 05 F1 | 	add	fp, #4
105e8     E7 9A 62 FC | 	wrlong	arg05, fp
105ec                 | '   t1=pop()
105ec                 | '   if t1.result_type=result_string2 then 
105ec     34 CE 85 F1 | 	sub	fp, #52
105f0     2B 9A 0E F2 | 	cmp	arg05, #43 wz
105f4     18 00 90 5D |  if_ne	jmp	#LR__1390
105f8     2C CE 05 F1 | 	add	fp, #44
105fc     E7 92 02 FB | 	rdlong	arg01, fp
10600     2C CE 85 F1 | 	sub	fp, #44
10604     D8 D1 BF FD | 	call	#_convertstring
10608     3D A9 02 F6 | 	mov	local02, result1
1060c     38 00 90 FD | 	jmp	#LR__1392
10610                 | LR__1390
10610     34 CE 05 F1 | 	add	fp, #52
10614     E7 9A 02 FB | 	rdlong	arg05, fp
10618     34 CE 85 F1 | 	sub	fp, #52
1061c     1F 9A 0E F2 | 	cmp	arg05, #31 wz
10620     2C CE 05 A1 |  if_e	add	fp, #44
10624     E7 A8 02 AB |  if_e	rdlong	local02, fp
10628     2C CE 85 A1 |  if_e	sub	fp, #44
1062c     18 00 90 AD |  if_e	jmp	#LR__1391
10630     98 01 00 FF 
10634     45 A9 06 F6 | 	mov	local02, ##@LR__5998
10638     E7 92 02 F6 | 	mov	arg01, fp
1063c     2C 92 06 F1 | 	add	arg01, #44
10640     08 D2 BF FD | 	call	#_converttoint
10644     3D AB 02 F6 | 	mov	local03, result1
10648                 | LR__1391
10648                 | LR__1392
10648                 | '   if s<>"" then 
10648     98 01 00 FF 
1064c     46 95 06 F6 | 	mov	arg02, ##@LR__5999
10650     54 93 02 F6 | 	mov	arg01, local02
10654     D8 46 B1 FD | 	call	#__system___string_cmp
10658     00 7A 0E F2 | 	cmp	result1, #0 wz
1065c     B0 01 90 AD |  if_e	jmp	#LR__1395
10660     0C D0 BF FD | 	call	#_pop
10664     3F 9B 02 F6 | 	mov	arg05, result3
10668     2C CE 05 F1 | 	add	fp, #44
1066c     E7 7A 62 FC | 	wrlong	result1, fp
10670     04 CE 05 F1 | 	add	fp, #4
10674     E7 7C 62 FC | 	wrlong	result2, fp
10678     04 CE 05 F1 | 	add	fp, #4
1067c     E7 9A 62 FC | 	wrlong	arg05, fp
10680     08 CE 85 F1 | 	sub	fp, #8
10684     E7 92 02 F6 | 	mov	arg01, fp
10688     2C CE 85 F1 | 	sub	fp, #44
1068c     BC D1 BF FD | 	call	#_converttoint
10690     3D AD 02 F6 | 	mov	local04, result1
10694                 | '     t1=pop()
10694                 | '     channel=converttoint(t1) : if channel>31 then return
10694     20 AC 56 F2 | 	cmps	local04, #32 wc
10698     B0 05 90 3D |  if_ae	jmp	#LR__1411
1069c                 | '     close #9 : open "/sd/media/s/"+s for input as #9
1069c     09 92 06 F6 | 	mov	arg01, #9
106a0     40 92 B1 FD | 	call	#__system__close
106a4     09 AA 06 F6 | 	mov	local03, #9
106a8     98 01 00 FF 
106ac     47 93 06 F6 | 	mov	arg01, ##@LR__6000
106b0     54 95 02 F6 | 	mov	arg02, local02
106b4     AC 46 B1 FD | 	call	#__system___string_concat
106b8     3D 95 02 F6 | 	mov	arg02, result1
106bc     55 93 02 F6 | 	mov	arg01, local03
106c0     00 96 06 F6 | 	mov	arg03, #0
106c4     F0 51 B1 FD | 	call	#__system___basic_open_string
106c8     20 68 06 F1 | 	add	ptr___system__dat__, #32
106cc     34 7B 0A FB | 	rdlong	result1, ptr___system__dat__ wz
106d0     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
106d4     20 68 86 F1 | 	sub	ptr___system__dat__, #32
106d8     54 00 00 FF 
106dc     C8 64 06 F1 | 	add	objptr, ##43208
106e0     32 7B 62 FC | 	wrlong	result1, objptr
106e4                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
106e4     54 00 00 FF 
106e8     C8 64 86 F1 | 	sub	objptr, ##43208
106ec     B0 00 90 AD |  if_e	jmp	#LR__1393
106f0     00 92 06 F6 | 	mov	arg01, #0
106f4     94 9B B1 FD | 	call	#__system___getiolock_0622
106f8     3D 93 02 F6 | 	mov	arg01, result1
106fc     08 46 B1 FD | 	call	#__system___lockmem
10700     98 01 00 FF 
10704     54 95 06 F6 | 	mov	arg02, ##@LR__6001
10708     00 92 06 F6 | 	mov	arg01, #0
1070c     00 96 06 F6 | 	mov	arg03, #0
10710     E8 52 B1 FD | 	call	#__system___basic_print_string
10714     54 00 00 FF 
10718     C8 64 06 F1 | 	add	objptr, ##43208
1071c     32 95 02 FB | 	rdlong	arg02, objptr
10720     54 00 00 FF 
10724     C8 64 86 F1 | 	sub	objptr, ##43208
10728     00 92 06 F6 | 	mov	arg01, #0
1072c     00 96 06 F6 | 	mov	arg03, #0
10730     0A 98 06 F6 | 	mov	arg04, #10
10734     08 53 B1 FD | 	call	#__system___basic_print_integer
10738     98 01 00 FF 
1073c     62 95 06 F6 | 	mov	arg02, ##@LR__6002
10740     00 92 06 F6 | 	mov	arg01, #0
10744     00 96 06 F6 | 	mov	arg03, #0
10748     B0 52 B1 FD | 	call	#__system___basic_print_string
1074c     00 AC 06 F6 | 	mov	local04, #0
10750     54 00 00 FF 
10754     C8 64 06 F1 | 	add	objptr, ##43208
10758     32 93 02 FB | 	rdlong	arg01, objptr
1075c     54 00 00 FF 
10760     C8 64 86 F1 | 	sub	objptr, ##43208
10764     50 67 B1 FD | 	call	#__system___strerror
10768     3D 95 02 F6 | 	mov	arg02, result1
1076c     56 93 02 F6 | 	mov	arg01, local04
10770     00 96 06 F6 | 	mov	arg03, #0
10774     84 52 B1 FD | 	call	#__system___basic_print_string
10778     00 92 06 F6 | 	mov	arg01, #0
1077c     0A 94 06 F6 | 	mov	arg02, #10
10780     00 96 06 F6 | 	mov	arg03, #0
10784     1C 52 B1 FD | 	call	#__system___basic_print_char
10788     00 92 06 F6 | 	mov	arg01, #0
1078c     FC 9A B1 FD | 	call	#__system___getiolock_0622
10790     3D 01 68 FC | 	wrlong	#0, result1
10794     09 92 06 F6 | 	mov	arg01, #9
10798     48 91 B1 FD | 	call	#__system__close
1079c     AC 04 90 FD | 	jmp	#LR__1411
107a0                 | LR__1393
107a0                 | '     for i=0 to 1024 : get #9,17+2*i,sample,1 : psdpoke 2048*channel+2*i, sample : next i
107a0     00 AE 06 F6 | 	mov	local05, #0
107a4                 | LR__1394
107a4     57 AB 02 F6 | 	mov	local03, local05
107a8     01 AA 66 F0 | 	shl	local03, #1
107ac     11 94 06 F6 | 	mov	arg02, #17
107b0     55 95 02 F1 | 	add	arg02, local03
107b4     E7 96 02 F6 | 	mov	arg03, fp
107b8     7C 96 06 F1 | 	add	arg03, #124
107bc     09 92 06 F6 | 	mov	arg01, #9
107c0     01 98 06 F6 | 	mov	arg04, #1
107c4     02 9A 06 F6 | 	mov	arg05, #2
107c8     B8 53 B1 FD | 	call	#__system___basic_get
107cc     56 93 02 F6 | 	mov	arg01, local04
107d0     0B 92 66 F0 | 	shl	arg01, #11
107d4     57 AB 02 F6 | 	mov	local03, local05
107d8     01 AA 66 F0 | 	shl	local03, #1
107dc     55 93 02 F1 | 	add	arg01, local03
107e0     7C CE 05 F1 | 	add	fp, #124
107e4     E7 94 E2 FA | 	rdword	arg02, fp
107e8     7C CE 85 F1 | 	sub	fp, #124
107ec     0F 94 66 F7 | 	signx	arg02, #15
107f0     28 0A B1 FD | 	call	#_psdpoke
107f4     01 AE 06 F1 | 	add	local05, #1
107f8     02 00 00 FF 
107fc     01 AE 56 F2 | 	cmps	local05, ##1025 wc
10800     A0 FF 9F CD |  if_b	jmp	#LR__1394
10804                 | '     close #9
10804     09 92 06 F6 | 	mov	arg01, #9
10808     D8 90 B1 FD | 	call	#__system__close
1080c                 | '     return
1080c     3C 04 90 FD | 	jmp	#LR__1411
10810                 | LR__1395
10810                 | '     if wptr < ($80000 - 2048) then 
10810     FC 03 00 FF 
10814     00 AA 56 F2 | 	cmps	local03, ##522240 wc
10818     48 00 90 3D |  if_ae	jmp	#LR__1397
1081c                 | '       for i=0 to 1023: psdpoke 2048*channel+2*i,dpeek(wptr+2*i): next i
1081c     00 AE 06 F6 | 	mov	local05, #0
10820                 | LR__1396
10820     56 A7 02 F6 | 	mov	local01, local04
10824     0B A6 66 F0 | 	shl	local01, #11
10828     57 A9 02 F6 | 	mov	local02, local05
1082c     01 A8 66 F0 | 	shl	local02, #1
10830     54 A7 02 F1 | 	add	local01, local02
10834     55 93 02 F6 | 	mov	arg01, local03
10838     57 A9 02 F6 | 	mov	local02, local05
1083c     01 A8 66 F0 | 	shl	local02, #1
10840     54 93 02 F1 | 	add	arg01, local02
10844     49 95 E2 FA | 	rdword	arg02, arg01
10848     53 93 02 F6 | 	mov	arg01, local01
1084c     CC 09 B1 FD | 	call	#_psdpoke
10850     01 AE 06 F1 | 	add	local05, #1
10854     02 00 00 FF 
10858     00 AE 56 F2 | 	cmps	local05, ##1024 wc
1085c     C0 FF 9F CD |  if_b	jmp	#LR__1396
10860     E8 03 90 FD | 	jmp	#LR__1411
10864                 | LR__1397
10864                 | '       for i=0 to 1023 : psdpoke 2048*channel+2*i,psdpeek(wptr+2*i) : next i
10864     00 AE 06 F6 | 	mov	local05, #0
10868                 | LR__1398
10868     56 A7 02 F6 | 	mov	local01, local04
1086c     0B A6 66 F0 | 	shl	local01, #11
10870     57 A9 02 F6 | 	mov	local02, local05
10874     01 A8 66 F0 | 	shl	local02, #1
10878     54 A7 02 F1 | 	add	local01, local02
1087c     55 93 02 F6 | 	mov	arg01, local03
10880     57 A9 02 F6 | 	mov	local02, local05
10884     01 A8 66 F0 | 	shl	local02, #1
10888     54 93 02 F1 | 	add	arg01, local02
1088c     AC 0A B1 FD | 	call	#_psdpeek
10890     3D 95 02 F6 | 	mov	arg02, result1
10894     53 93 02 F6 | 	mov	arg01, local01
10898     80 09 B1 FD | 	call	#_psdpoke
1089c     01 AE 06 F1 | 	add	local05, #1
108a0     02 00 00 FF 
108a4     00 AE 56 F2 | 	cmps	local05, ##1024 wc
108a8     BC FF 9F CD |  if_b	jmp	#LR__1398
108ac                 | '     return 
108ac     9C 03 90 FD | 	jmp	#LR__1411
108b0                 | '   return
108b0                 | LR__1399
108b0                 | ' for i=0 to 15 : harm(i)=0: next i  
108b0     00 AE 06 F6 | 	mov	local05, #0
108b4     3C CE 05 F1 | 	add	fp, #60
108b8     D7 0E 48 FB | 	callpa	#(@LR__1401-@LR__1400)>>2,fcache_load_ptr_
108bc                 | LR__1400
108bc     57 B1 02 F6 | 	mov	local06, local05
108c0     02 B0 66 F0 | 	shl	local06, #2
108c4     E7 B0 02 F1 | 	add	local06, fp
108c8     58 01 68 FC | 	wrlong	#0, local06
108cc     01 AE 06 F1 | 	add	local05, #1
108d0     10 AE 56 F2 | 	cmps	local05, #16 wc
108d4     E4 FF 9F CD |  if_b	jmp	#LR__1400
108d8                 | LR__1401
108d8     3C CE 85 F1 | 	sub	fp, #60
108dc                 | ' for i=numpar to 2 step -1 
108dc     53 AF 02 F6 | 	mov	local05, local01
108e0                 | LR__1402
108e0     8C CD BF FD | 	call	#_pop
108e4     2C CE 05 F1 | 	add	fp, #44
108e8     E7 7A 62 FC | 	wrlong	result1, fp
108ec     04 CE 05 F1 | 	add	fp, #4
108f0     E7 7C 62 FC | 	wrlong	result2, fp
108f4     04 CE 05 F1 | 	add	fp, #4
108f8     E7 7E 62 FC | 	wrlong	result3, fp
108fc     57 B1 02 F6 | 	mov	local06, local05
10900     02 B0 86 F1 | 	sub	local06, #2
10904     02 B0 66 F0 | 	shl	local06, #2
10908     08 CE 05 F1 | 	add	fp, #8
1090c     E7 B0 02 F1 | 	add	local06, fp
10910     10 CE 85 F1 | 	sub	fp, #16
10914     E7 92 02 F6 | 	mov	arg01, fp
10918     2C CE 85 F1 | 	sub	fp, #44
1091c     E8 CF BF FD | 	call	#_converttofloat
10920     58 7B 62 FC | 	wrlong	result1, local06
10924     01 AE 86 F1 | 	sub	local05, #1
10928     02 AE 56 F2 | 	cmps	local05, #2 wc
1092c     B0 FF 9F 3D |  if_ae	jmp	#LR__1402
10930     3C CD BF FD | 	call	#_pop
10934     3F AF 02 F6 | 	mov	local05, result3
10938     2C CE 05 F1 | 	add	fp, #44
1093c     E7 7A 62 FC | 	wrlong	result1, fp
10940     04 CE 05 F1 | 	add	fp, #4
10944     E7 7C 62 FC | 	wrlong	result2, fp
10948     04 CE 05 F1 | 	add	fp, #4
1094c     E7 AE 62 FC | 	wrlong	local05, fp
10950     08 CE 85 F1 | 	sub	fp, #8
10954     E7 92 02 F6 | 	mov	arg01, fp
10958     2C CE 85 F1 | 	sub	fp, #44
1095c     EC CE BF FD | 	call	#_converttoint
10960     3D AD 02 F6 | 	mov	local04, result1
10964                 | ' t1=pop()
10964                 | ' channel=converttoint(t1) : : if channel>31 then return
10964     20 AC 56 F2 | 	cmps	local04, #32 wc
10968     E0 02 90 3D |  if_ae	jmp	#LR__1411
1096c     00 B2 06 F6 | 	mov	local07, #0
10970                 | ' max=0
10970                 | ' if harm(0)<0 then
10970     3C CE 05 F1 | 	add	fp, #60
10974     E7 92 02 FB | 	rdlong	arg01, fp
10978     3C CE 85 F1 | 	sub	fp, #60
1097c     00 94 06 F6 | 	mov	arg02, #0
10980     01 96 06 F6 | 	mov	arg03, #1
10984     84 6E B1 FD | 	call	#__system___float_cmp
10988     00 7A 56 F2 | 	cmps	result1, #0 wc
1098c     C0 00 90 3D |  if_ae	jmp	#LR__1405
10990     3C CE 05 F1 | 	add	fp, #60
10994     E7 B4 02 FB | 	rdlong	local08, fp
10998     1F B4 06 F4 | 	bitl	local08, #31
1099c     04 CE 05 F1 | 	add	fp, #4
109a0     E7 B6 02 FB | 	rdlong	local09, fp
109a4     1F B6 06 F4 | 	bitl	local09, #31
109a8     04 CE 85 F1 | 	sub	fp, #4
109ac     00 C0 9F FF 
109b0     E7 00 68 FC | 	wrlong	##1065353216, fp
109b4     04 CE 05 F1 | 	add	fp, #4
109b8     E7 B4 62 FC | 	wrlong	local08, fp
109bc     04 CE 05 F1 | 	add	fp, #4
109c0     E7 B6 62 FC | 	wrlong	local09, fp
109c4     44 CE 85 F1 | 	sub	fp, #68
109c8                 | '   harm(0)=1
109c8                 | '   harm(1)=even
109c8                 | '   harm(2)=odd
109c8                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
109c8     03 AE 06 F6 | 	mov	local05, #3
109cc                 | LR__1403
109cc     57 B1 02 F6 | 	mov	local06, local05
109d0     02 B0 66 F0 | 	shl	local06, #2
109d4     3C CE 05 F1 | 	add	fp, #60
109d8     E7 B0 02 F1 | 	add	local06, fp
109dc     57 9B 02 F6 | 	mov	arg05, local05
109e0     02 9A 86 F1 | 	sub	arg05, #2
109e4     02 9A 66 F0 | 	shl	arg05, #2
109e8     E7 9A 02 F1 | 	add	arg05, fp
109ec     4D 93 02 FB | 	rdlong	arg01, arg05
109f0     5A 95 02 F6 | 	mov	arg02, local08
109f4     3C CE 85 F1 | 	sub	fp, #60
109f8     DC 69 B1 FD | 	call	#__system___float_mul
109fc     58 7B 62 FC | 	wrlong	result1, local06
10a00     02 AE 06 F1 | 	add	local05, #2
10a04     10 AE 56 F2 | 	cmps	local05, #16 wc
10a08     C0 FF 9F CD |  if_b	jmp	#LR__1403
10a0c                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
10a0c     04 AE 06 F6 | 	mov	local05, #4
10a10                 | LR__1404
10a10     57 B1 02 F6 | 	mov	local06, local05
10a14     02 B0 66 F0 | 	shl	local06, #2
10a18     3C CE 05 F1 | 	add	fp, #60
10a1c     E7 B0 02 F1 | 	add	local06, fp
10a20     57 B5 02 F6 | 	mov	local08, local05
10a24     02 B4 86 F1 | 	sub	local08, #2
10a28     02 B4 66 F0 | 	shl	local08, #2
10a2c     E7 B4 02 F1 | 	add	local08, fp
10a30     5A 93 02 FB | 	rdlong	arg01, local08
10a34     5B 95 02 F6 | 	mov	arg02, local09
10a38     3C CE 85 F1 | 	sub	fp, #60
10a3c     98 69 B1 FD | 	call	#__system___float_mul
10a40     58 7B 62 FC | 	wrlong	result1, local06
10a44     02 AE 06 F1 | 	add	local05, #2
10a48     0F AE 56 F2 | 	cmps	local05, #15 wc
10a4c     C0 FF 9F CD |  if_b	jmp	#LR__1404
10a50                 | LR__1405
10a50                 | ' if harm(0)>=0 then ' synthesize with harmonics
10a50     3C CE 05 F1 | 	add	fp, #60
10a54     E7 92 02 FB | 	rdlong	arg01, fp
10a58     3C CE 85 F1 | 	sub	fp, #60
10a5c     00 94 06 F6 | 	mov	arg02, #0
10a60     01 96 66 F6 | 	neg	arg03, #1
10a64     A4 6D B1 FD | 	call	#__system___float_cmp
10a68     00 7A 56 F2 | 	cmps	result1, #0 wc
10a6c     DC 01 90 CD |  if_b	jmp	#LR__1410
10a70                 | '   for i=0 to 1023
10a70     00 AE 06 F6 | 	mov	local05, #0
10a74                 | LR__1406
10a74     00 B8 06 F6 | 	mov	local10, #0
10a78                 | '     spl=0
10a78                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
10a78     00 BA 06 F6 | 	mov	local11, #0
10a7c                 | LR__1407
10a7c     5D B1 02 F6 | 	mov	local06, local11
10a80     02 B0 66 F0 | 	shl	local06, #2
10a84     E7 9A 02 F6 | 	mov	arg05, fp
10a88     3C 9A 06 F1 | 	add	arg05, #60
10a8c     4D B1 02 F1 | 	add	local06, arg05
10a90     58 B1 02 FB | 	rdlong	local06, local06
10a94     87 E4 1D FF 
10a98     DB B7 06 F6 | 	mov	local09, ##1003032539
10a9c     57 93 52 F6 | 	abs	arg01, local05 wc
10aa0     1F BC C6 C9 |  if_b	decod	local12, #31
10aa4     00 BC 06 36 |  if_ae	mov	local12, #0
10aa8     28 65 B1 FD | 	call	#__system___float_fromuns
10aac     5E 7B 62 F5 | 	xor	result1, local12
10ab0     3D 95 02 F6 | 	mov	arg02, result1
10ab4     5B 93 02 F6 | 	mov	arg01, local09
10ab8     1C 69 B1 FD | 	call	#__system___float_mul
10abc     3D BF 02 F6 | 	mov	local13, result1
10ac0     5D 93 02 F6 | 	mov	arg01, local11
10ac4     01 92 06 F1 | 	add	arg01, #1
10ac8     49 93 52 F6 | 	abs	arg01, arg01 wc
10acc     1F BC C6 C9 |  if_b	decod	local12, #31
10ad0     00 BC 06 36 |  if_ae	mov	local12, #0
10ad4     FC 64 B1 FD | 	call	#__system___float_fromuns
10ad8     5E 7B 62 F5 | 	xor	result1, local12
10adc     3D 95 02 F6 | 	mov	arg02, result1
10ae0     5F 93 02 F6 | 	mov	arg01, local13
10ae4     F0 68 B1 FD | 	call	#__system___float_mul
10ae8     3D 93 02 F6 | 	mov	arg01, result1
10aec     58 72 B1 FD | 	call	#__system____builtin_sinf
10af0     3D 95 02 F6 | 	mov	arg02, result1
10af4     58 93 02 F6 | 	mov	arg01, local06
10af8     DC 68 B1 FD | 	call	#__system___float_mul
10afc     3D 95 02 F6 | 	mov	arg02, result1
10b00     5C 93 02 F6 | 	mov	arg01, local10
10b04     00 65 B1 FD | 	call	#__system___float_add
10b08     3D B9 02 F6 | 	mov	local10, result1
10b0c     01 BA 06 F1 | 	add	local11, #1
10b10     10 BA 56 F2 | 	cmps	local11, #16 wc
10b14     64 FF 9F CD |  if_b	jmp	#LR__1407
10b18                 | '     if abs(spl)>max then max=abs(spl)  
10b18     5C 93 02 F6 | 	mov	arg01, local10
10b1c     1F 92 06 F4 | 	bitl	arg01, #31
10b20     59 95 02 F6 | 	mov	arg02, local07
10b24     01 96 66 F6 | 	neg	arg03, #1
10b28     E0 6C B1 FD | 	call	#__system___float_cmp
10b2c     01 7A 56 F2 | 	cmps	result1, #1 wc
10b30     1F B8 06 34 |  if_ae	bitl	local10, #31
10b34     5C B3 02 36 |  if_ae	mov	local07, local10
10b38     01 AE 06 F1 | 	add	local05, #1
10b3c     02 00 00 FF 
10b40     00 AE 56 F2 | 	cmps	local05, ##1024 wc
10b44     2C FF 9F CD |  if_b	jmp	#LR__1406
10b48                 | '   for i=0 to 1023
10b48     00 AE 06 F6 | 	mov	local05, #0
10b4c                 | LR__1408
10b4c     00 B8 06 F6 | 	mov	local10, #0
10b50                 | '     spl=0
10b50                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j 
10b50     00 BA 06 F6 | 	mov	local11, #0
10b54                 | LR__1409
10b54     5D BF 02 F6 | 	mov	local13, local11
10b58     02 BE 66 F0 | 	shl	local13, #2
10b5c     E7 B6 02 F6 | 	mov	local09, fp
10b60     3C B6 06 F1 | 	add	local09, #60
10b64     5B BF 02 F1 | 	add	local13, local09
10b68     5F B1 02 FB | 	rdlong	local06, local13
10b6c     58 7F 23 FF 
10b70     00 92 06 F6 | 	mov	arg01, ##1191096320
10b74     59 95 02 F6 | 	mov	arg02, local07
10b78     60 6A B1 FD | 	call	#__system___float_div
10b7c     3D 95 02 F6 | 	mov	arg02, result1
10b80     58 93 02 F6 | 	mov	arg01, local06
10b84     50 68 B1 FD | 	call	#__system___float_mul
10b88     3D B1 02 F6 | 	mov	local06, result1
10b8c     87 E4 1D FF 
10b90     DB BF 06 F6 | 	mov	local13, ##1003032539
10b94     57 93 52 F6 | 	abs	arg01, local05 wc
10b98     1F BC C6 C9 |  if_b	decod	local12, #31
10b9c     00 BC 06 36 |  if_ae	mov	local12, #0
10ba0     30 64 B1 FD | 	call	#__system___float_fromuns
10ba4     5E 7B 62 F5 | 	xor	result1, local12
10ba8     3D 95 02 F6 | 	mov	arg02, result1
10bac     5F 93 02 F6 | 	mov	arg01, local13
10bb0     24 68 B1 FD | 	call	#__system___float_mul
10bb4     3D BF 02 F6 | 	mov	local13, result1
10bb8     5D 93 02 F6 | 	mov	arg01, local11
10bbc     01 92 06 F1 | 	add	arg01, #1
10bc0     49 93 52 F6 | 	abs	arg01, arg01 wc
10bc4     1F BC C6 C9 |  if_b	decod	local12, #31
10bc8     00 BC 06 36 |  if_ae	mov	local12, #0
10bcc     04 64 B1 FD | 	call	#__system___float_fromuns
10bd0     5E 7B 62 F5 | 	xor	result1, local12
10bd4     3D 95 02 F6 | 	mov	arg02, result1
10bd8     5F 93 02 F6 | 	mov	arg01, local13
10bdc     F8 67 B1 FD | 	call	#__system___float_mul
10be0     3D 93 02 F6 | 	mov	arg01, result1
10be4     60 71 B1 FD | 	call	#__system____builtin_sinf
10be8     3D 95 02 F6 | 	mov	arg02, result1
10bec     58 93 02 F6 | 	mov	arg01, local06
10bf0     E4 67 B1 FD | 	call	#__system___float_mul
10bf4     3D 95 02 F6 | 	mov	arg02, result1
10bf8     5C 93 02 F6 | 	mov	arg01, local10
10bfc     08 64 B1 FD | 	call	#__system___float_add
10c00     3D B9 02 F6 | 	mov	local10, result1
10c04     01 BA 06 F1 | 	add	local11, #1
10c08     10 BA 56 F2 | 	cmps	local11, #16 wc
10c0c     44 FF 9F CD |  if_b	jmp	#LR__1409
10c10     56 BB 02 F6 | 	mov	local11, local04
10c14     0B BA 66 F0 | 	shl	local11, #11
10c18     57 BF 02 F6 | 	mov	local13, local05
10c1c     01 BE 66 F0 | 	shl	local13, #1
10c20     5F BB 02 F1 | 	add	local11, local13
10c24     5C 93 02 F6 | 	mov	arg01, local10
10c28     01 94 06 F6 | 	mov	arg02, #1
10c2c     70 6C B1 FD | 	call	#__system___float_tointeger
10c30     3D 95 02 F6 | 	mov	arg02, result1
10c34     5D 93 02 F6 | 	mov	arg01, local11
10c38     E0 05 B1 FD | 	call	#_psdpoke
10c3c     01 AE 06 F1 | 	add	local05, #1
10c40     02 00 00 FF 
10c44     00 AE 56 F2 | 	cmps	local05, ##1024 wc
10c48     00 FF 9F CD |  if_b	jmp	#LR__1408
10c4c                 | LR__1410
10c4c                 | LR__1411
10c4c     E7 F0 03 F6 | 	mov	ptra, fp
10c50     F2 00 A0 FD | 	call	#popregs_
10c54                 | _do_defsnd_ret
10c54     2D 00 64 FD | 	ret
10c58                 | 
10c58                 | ' 
10c58                 | ' '-------------------- defsprite
10c58                 | ' 
10c58                 | ' sub do_defsprite
10c58                 | _do_defsprite
10c58     0B CA 05 F6 | 	mov	COUNT_, #11
10c5c     E8 00 A0 FD | 	call	#pushregs_
10c60     60 F0 07 F1 | 	add	ptra, #96
10c64     08 CA BF FD | 	call	#_pop
10c68     3D 97 02 F6 | 	mov	arg03, result1
10c6c     3E 95 02 F6 | 	mov	arg02, result2
10c70     3F 93 02 F6 | 	mov	arg01, result3
10c74     30 CE 05 F1 | 	add	fp, #48
10c78     E7 96 62 FC | 	wrlong	arg03, fp
10c7c     04 CE 05 F1 | 	add	fp, #4
10c80     E7 94 62 FC | 	wrlong	arg02, fp
10c84     04 CE 05 F1 | 	add	fp, #4
10c88     E7 92 62 FC | 	wrlong	arg01, fp
10c8c     38 CE 85 F1 | 	sub	fp, #56
10c90     DC C9 BF FD | 	call	#_pop
10c94     3D 97 02 F6 | 	mov	arg03, result1
10c98     3E 95 02 F6 | 	mov	arg02, result2
10c9c     3F 93 02 F6 | 	mov	arg01, result3
10ca0     24 CE 05 F1 | 	add	fp, #36
10ca4     E7 96 62 FC | 	wrlong	arg03, fp
10ca8     04 CE 05 F1 | 	add	fp, #4
10cac     E7 94 62 FC | 	wrlong	arg02, fp
10cb0     04 CE 05 F1 | 	add	fp, #4
10cb4     E7 92 62 FC | 	wrlong	arg01, fp
10cb8     2C CE 85 F1 | 	sub	fp, #44
10cbc     B0 C9 BF FD | 	call	#_pop
10cc0     3D 97 02 F6 | 	mov	arg03, result1
10cc4     3E 95 02 F6 | 	mov	arg02, result2
10cc8     3F 93 02 F6 | 	mov	arg01, result3
10ccc     18 CE 05 F1 | 	add	fp, #24
10cd0     E7 96 62 FC | 	wrlong	arg03, fp
10cd4     04 CE 05 F1 | 	add	fp, #4
10cd8     E7 94 62 FC | 	wrlong	arg02, fp
10cdc     04 CE 05 F1 | 	add	fp, #4
10ce0     E7 92 62 FC | 	wrlong	arg01, fp
10ce4     20 CE 85 F1 | 	sub	fp, #32
10ce8     84 C9 BF FD | 	call	#_pop
10cec     3D 97 02 F6 | 	mov	arg03, result1
10cf0     3E 95 02 F6 | 	mov	arg02, result2
10cf4     3F 93 02 F6 | 	mov	arg01, result3
10cf8     0C CE 05 F1 | 	add	fp, #12
10cfc     E7 96 62 FC | 	wrlong	arg03, fp
10d00     04 CE 05 F1 | 	add	fp, #4
10d04     E7 94 62 FC | 	wrlong	arg02, fp
10d08     04 CE 05 F1 | 	add	fp, #4
10d0c     E7 92 62 FC | 	wrlong	arg01, fp
10d10     14 CE 85 F1 | 	sub	fp, #20
10d14     58 C9 BF FD | 	call	#_pop
10d18     3F 97 02 F6 | 	mov	arg03, result3
10d1c     E7 7A 62 FC | 	wrlong	result1, fp
10d20     04 CE 05 F1 | 	add	fp, #4
10d24     E7 7C 62 FC | 	wrlong	result2, fp
10d28     04 CE 05 F1 | 	add	fp, #4
10d2c     E7 96 62 FC | 	wrlong	arg03, fp
10d30     08 CE 85 F1 | 	sub	fp, #8
10d34     E7 92 02 F6 | 	mov	arg01, fp
10d38     10 CB BF FD | 	call	#_converttoint
10d3c     3D A7 02 F6 | 	mov	local01, result1
10d40     E7 92 02 F6 | 	mov	arg01, fp
10d44     0C 92 06 F1 | 	add	arg01, #12
10d48     00 CB BF FD | 	call	#_converttoint
10d4c     3D A9 02 F6 | 	mov	local02, result1
10d50     E7 92 02 F6 | 	mov	arg01, fp
10d54     18 92 06 F1 | 	add	arg01, #24
10d58     F0 CA BF FD | 	call	#_converttoint
10d5c     3D AB 02 F6 | 	mov	local03, result1
10d60     E7 92 02 F6 | 	mov	arg01, fp
10d64     24 92 06 F1 | 	add	arg01, #36
10d68     E0 CA BF FD | 	call	#_converttoint
10d6c     3D AD 02 F6 | 	mov	local04, result1
10d70     E7 92 02 F6 | 	mov	arg01, fp
10d74     30 92 06 F1 | 	add	arg01, #48
10d78     D0 CA BF FD | 	call	#_converttoint
10d7c     3D AF 02 F6 | 	mov	local05, result1
10d80                 | ' 
10d80                 | ' t5=pop()
10d80                 | ' t4=pop()
10d80                 | ' t3=pop()
10d80                 | ' t2=pop()
10d80                 | ' t1=pop()
10d80                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5) ' do convert, defsprite is not a racing command
10d80                 | ' if sprite(a1)<> nil then delete(sprite(a1))	' todo: check parameters for limits
10d80     53 97 02 F6 | 	mov	arg03, local01
10d84     02 96 66 F0 | 	shl	arg03, #2
10d88     32 95 02 F6 | 	mov	arg02, objptr
10d8c     54 00 00 FF 
10d90     0C 94 06 F1 | 	add	arg02, ##43020
10d94     4A 97 02 F1 | 	add	arg03, arg02
10d98     4B 97 0A FB | 	rdlong	arg03, arg03 wz
10d9c     20 00 90 AD |  if_e	jmp	#LR__1420
10da0     53 97 02 F6 | 	mov	arg03, local01
10da4     02 96 66 F0 | 	shl	arg03, #2
10da8     32 95 02 F6 | 	mov	arg02, objptr
10dac     54 00 00 FF 
10db0     0C 94 06 F1 | 	add	arg02, ##43020
10db4     4A 97 02 F1 | 	add	arg03, arg02
10db8     4B 93 02 FB | 	rdlong	arg01, arg03
10dbc     84 7A B1 FD | 	call	#__system___gc_free
10dc0                 | LR__1420
10dc0     57 AD 02 FD | 	qmul	local04, local05
10dc4     53 B1 02 F6 | 	mov	local06, local01
10dc8     02 B0 66 F0 | 	shl	local06, #2
10dcc     32 97 02 F6 | 	mov	arg03, objptr
10dd0     54 00 00 FF 
10dd4     0C 96 06 F1 | 	add	arg03, ##43020
10dd8     4B B1 02 F1 | 	add	local06, arg03
10ddc     18 92 62 FD | 	getqx	arg01
10de0     2C 79 B1 FD | 	call	#__system___gc_alloc_managed
10de4     58 7B 62 FC | 	wrlong	result1, local06
10de8                 | ' for y=a3 to a3+a5-1
10de8     55 B3 02 F6 | 	mov	local07, local03
10dec     55 B5 02 F6 | 	mov	local08, local03
10df0     57 B5 02 F1 | 	add	local08, local05
10df4                 | LR__1421
10df4     5A B3 52 F2 | 	cmps	local07, local08 wc
10df8     7C 00 90 3D |  if_ae	jmp	#LR__1424
10dfc                 | '   for x=a2 to a4+a2-1
10dfc     54 B7 02 F6 | 	mov	local09, local02
10e00     56 B9 02 F6 | 	mov	local10, local04
10e04     54 B9 02 F1 | 	add	local10, local02
10e08                 | LR__1422
10e08     5C B7 52 F2 | 	cmps	local09, local10 wc
10e0c     60 00 90 3D |  if_ae	jmp	#LR__1423
10e10     59 B1 02 F6 | 	mov	local06, local07
10e14     55 B1 82 F1 | 	sub	local06, local03
10e18     56 B1 02 FD | 	qmul	local06, local04
10e1c     53 B1 02 F6 | 	mov	local06, local01
10e20     02 B0 66 F0 | 	shl	local06, #2
10e24     32 97 02 F6 | 	mov	arg03, objptr
10e28     54 00 00 FF 
10e2c     0C 96 06 F1 | 	add	arg03, ##43020
10e30     4B B1 02 F1 | 	add	local06, arg03
10e34     58 B1 02 FB | 	rdlong	local06, local06
10e38     5B BB 02 F6 | 	mov	local11, local09
10e3c     54 BB 82 F1 | 	sub	local11, local02
10e40     32 93 02 FB | 	rdlong	arg01, objptr
10e44     5B 93 02 F1 | 	add	arg01, local09
10e48     59 97 02 F6 | 	mov	arg03, local07
10e4c     0A 96 66 F0 | 	shl	arg03, #10
10e50     4B 93 02 F1 | 	add	arg01, arg03
10e54     18 96 62 FD | 	getqx	arg03
10e58     4B BB 02 F1 | 	add	local11, arg03
10e5c     58 BB 02 F1 | 	add	local11, local06
10e60     48 04 B1 FD | 	call	#_pspeek
10e64     5D 7B 42 FC | 	wrbyte	result1, local11
10e68     01 B6 06 F1 | 	add	local09, #1
10e6c     98 FF 9F FD | 	jmp	#LR__1422
10e70                 | LR__1423
10e70     01 B2 06 F1 | 	add	local07, #1
10e74     7C FF 9F FD | 	jmp	#LR__1421
10e78                 | LR__1424
10e78     53 BB 02 F6 | 	mov	local11, local01
10e7c     02 BA 66 F0 | 	shl	local11, #2
10e80     32 B9 02 F6 | 	mov	local10, objptr
10e84     54 00 00 FF 
10e88     0C B8 06 F1 | 	add	local10, ##43020
10e8c     5C BB 02 F1 | 	add	local11, local10
10e90     5D 95 02 FB | 	rdlong	arg02, local11
10e94     53 93 02 F6 | 	mov	arg01, local01
10e98     24 11 B1 FD | 	call	#_hg010b_spin2_setspriteptr
10e9c     53 93 02 F6 | 	mov	arg01, local01
10ea0     56 95 02 F6 | 	mov	arg02, local04
10ea4     57 97 02 F6 | 	mov	arg03, local05
10ea8     A0 11 B1 FD | 	call	#_hg010b_spin2_setspritesize
10eac     E7 F0 03 F6 | 	mov	ptra, fp
10eb0     F2 00 A0 FD | 	call	#popregs_
10eb4                 | _do_defsprite_ret
10eb4     2D 00 64 FD | 	ret
10eb8                 | 
10eb8                 | ' 
10eb8                 | ' '-------------------- deg
10eb8                 | ' 
10eb8                 | ' sub do_deg
10eb8                 | _do_deg
10eb8     54 00 00 FF 
10ebc     60 64 06 F1 | 	add	objptr, ##43104
10ec0     7D 47 9E FF 
10ec4     32 6B 68 FC | 	wrlong	##1016003125, objptr
10ec8     04 64 06 F1 | 	add	objptr, #4
10ecc     97 32 A1 FF 
10ed0     32 C3 69 FC | 	wrlong	##1113927393, objptr
10ed4     54 00 00 FF 
10ed8     64 64 86 F1 | 	sub	objptr, ##43108
10edc                 | _do_deg_ret
10edc     2D 00 64 FD | 	ret
10ee0                 | 
10ee0                 | ' 
10ee0                 | ' '-------------------- delete
10ee0                 | ' 
10ee0                 | ' sub do_delete
10ee0                 | _do_delete
10ee0     05 CA 05 F6 | 	mov	COUNT_, #5
10ee4     E8 00 A0 FD | 	call	#pushregs_
10ee8     84 C7 BF FD | 	call	#_pop
10eec     3E 99 02 F6 | 	mov	arg04, result2
10ef0     3F 97 02 F6 | 	mov	arg03, result3
10ef4     3D A7 02 F6 | 	mov	local01, result1
10ef8     4C A9 02 F6 | 	mov	local02, arg04
10efc     4B AB 02 F6 | 	mov	local03, arg03
10f00                 | ' 
10f00                 | ' t1=pop()
10f00                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
10f00     2B AA 0E F2 | 	cmp	local03, #43 wz
10f04     10 00 90 5D |  if_ne	jmp	#LR__1430
10f08     53 93 02 F6 | 	mov	arg01, local01
10f0c     D0 C8 BF FD | 	call	#_convertstring
10f10     3D A7 02 F6 | 	mov	local01, result1
10f14     1F AA 06 F6 | 	mov	local03, #31
10f18                 | LR__1430
10f18                 | ' if t1.result_type<>result_string then printerror(15): return
10f18     1F AA 0E F2 | 	cmp	local03, #31 wz
10f1c     10 00 90 AD |  if_e	jmp	#LR__1431
10f20     0F 92 06 F6 | 	mov	arg01, #15
10f24     00 94 06 F6 | 	mov	arg02, #0
10f28     0C 01 B1 FD | 	call	#_printerror
10f2c     E4 00 90 FD | 	jmp	#LR__1435
10f30                 | LR__1431
10f30                 | ' if currentdir$<>"/" then filename$=currentdir$+"/"+t1.result.sresult else filename$="/"+t1.result.sresult
10f30     4C 00 00 FF 
10f34     14 64 06 F1 | 	add	objptr, ##38932
10f38     32 93 02 FB | 	rdlong	arg01, objptr
10f3c     4C 00 00 FF 
10f40     14 64 86 F1 | 	sub	objptr, ##38932
10f44     98 01 00 FF 
10f48     65 95 06 F6 | 	mov	arg02, ##@LR__6003
10f4c     E0 3D B1 FD | 	call	#__system___string_cmp
10f50     00 7A 0E F2 | 	cmp	result1, #0 wz
10f54     34 00 90 AD |  if_e	jmp	#LR__1432
10f58     4C 00 00 FF 
10f5c     14 64 06 F1 | 	add	objptr, ##38932
10f60     32 93 02 FB | 	rdlong	arg01, objptr
10f64     4C 00 00 FF 
10f68     14 64 86 F1 | 	sub	objptr, ##38932
10f6c     98 01 00 FF 
10f70     67 95 06 F6 | 	mov	arg02, ##@LR__6004
10f74     EC 3D B1 FD | 	call	#__system___string_concat
10f78     3D 93 02 F6 | 	mov	arg01, result1
10f7c     53 95 02 F6 | 	mov	arg02, local01
10f80     E0 3D B1 FD | 	call	#__system___string_concat
10f84     3D AD 02 F6 | 	mov	local04, result1
10f88     14 00 90 FD | 	jmp	#LR__1433
10f8c                 | LR__1432
10f8c     98 01 00 FF 
10f90     69 93 06 F6 | 	mov	arg01, ##@LR__6005
10f94     53 95 02 F6 | 	mov	arg02, local01
10f98     C8 3D B1 FD | 	call	#__system___string_concat
10f9c     3D AD 02 F6 | 	mov	local04, result1
10fa0                 | LR__1433
10fa0     56 93 02 F6 | 	mov	arg01, local04
10fa4     58 5D B1 FD | 	call	#__system___remove
10fa8     20 68 06 F1 | 	add	ptr___system__dat__, #32
10fac     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
10fb0     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
10fb4     20 68 86 F1 | 	sub	ptr___system__dat__, #32
10fb8     3D AF 0A F6 | 	mov	local05, result1 wz
10fbc                 | ' kill filename$
10fbc                 | ' err=geterr() : if err<>0 then print "Cannot delete file or file doesn't exist: system error "; err
10fbc     54 00 90 AD |  if_e	jmp	#LR__1434
10fc0     00 92 06 F6 | 	mov	arg01, #0
10fc4     C4 92 B1 FD | 	call	#__system___getiolock_0622
10fc8     3D 93 02 F6 | 	mov	arg01, result1
10fcc     38 3D B1 FD | 	call	#__system___lockmem
10fd0     98 01 00 FF 
10fd4     6B 95 06 F6 | 	mov	arg02, ##@LR__6006
10fd8     00 92 06 F6 | 	mov	arg01, #0
10fdc     00 96 06 F6 | 	mov	arg03, #0
10fe0     18 4A B1 FD | 	call	#__system___basic_print_string
10fe4     00 92 06 F6 | 	mov	arg01, #0
10fe8     57 95 02 F6 | 	mov	arg02, local05
10fec     00 96 06 F6 | 	mov	arg03, #0
10ff0     0A 98 06 F6 | 	mov	arg04, #10
10ff4     48 4A B1 FD | 	call	#__system___basic_print_integer
10ff8     00 92 06 F6 | 	mov	arg01, #0
10ffc     0A 94 06 F6 | 	mov	arg02, #10
11000     00 96 06 F6 | 	mov	arg03, #0
11004     9C 49 B1 FD | 	call	#__system___basic_print_char
11008     00 92 06 F6 | 	mov	arg01, #0
1100c     7C 92 B1 FD | 	call	#__system___getiolock_0622
11010     3D 01 68 FC | 	wrlong	#0, result1
11014                 | LR__1434
11014                 | LR__1435
11014     E7 F0 03 F6 | 	mov	ptra, fp
11018     F2 00 A0 FD | 	call	#popregs_
1101c                 | _do_delete_ret
1101c     2D 00 64 FD | 	ret
11020                 | 
11020                 | ' 
11020                 | ' '-------------------- dir
11020                 | ' 
11020                 | ' sub do_dir
11020                 | _do_dir
11020     13 CA 05 F6 | 	mov	COUNT_, #19
11024     E8 00 A0 FD | 	call	#pushregs_
11028     01 00 00 FF 
1102c     38 F0 07 F1 | 	add	ptra, ##568
11030                 | ' 
11030                 | ' print "Current directory: "; currentdir$ 
11030     00 92 06 F6 | 	mov	arg01, #0
11034     54 92 B1 FD | 	call	#__system___getiolock_0622
11038     3D 93 02 F6 | 	mov	arg01, result1
1103c     C8 3C B1 FD | 	call	#__system___lockmem
11040     98 01 00 FF 
11044     A3 95 06 F6 | 	mov	arg02, ##@LR__6007
11048     00 92 06 F6 | 	mov	arg01, #0
1104c     00 96 06 F6 | 	mov	arg03, #0
11050     A8 49 B1 FD | 	call	#__system___basic_print_string
11054     4C 00 00 FF 
11058     14 64 06 F1 | 	add	objptr, ##38932
1105c     32 95 02 FB | 	rdlong	arg02, objptr
11060     4C 00 00 FF 
11064     14 64 86 F1 | 	sub	objptr, ##38932
11068     00 92 06 F6 | 	mov	arg01, #0
1106c     00 96 06 F6 | 	mov	arg03, #0
11070     88 49 B1 FD | 	call	#__system___basic_print_string
11074     00 92 06 F6 | 	mov	arg01, #0
11078     0A 94 06 F6 | 	mov	arg02, #10
1107c     00 96 06 F6 | 	mov	arg03, #0
11080     20 49 B1 FD | 	call	#__system___basic_print_char
11084     01 A6 06 F6 | 	mov	local01, #1
11088     00 92 06 F6 | 	mov	arg01, #0
1108c     FC 91 B1 FD | 	call	#__system___getiolock_0622
11090     3D 01 68 FC | 	wrlong	#0, result1
11094     00 A8 06 F6 | 	mov	local02, #0
11098     00 AA 06 F6 | 	mov	local03, #0
1109c                 | ' px=0
1109c                 | ' for i=0 to 127: filelist(i)="" : next i
1109c     00 AC 06 F6 | 	mov	local04, #0
110a0     1C CE 05 F1 | 	add	fp, #28
110a4     D7 12 48 FB | 	callpa	#(@LR__1441-@LR__1440)>>2,fcache_load_ptr_
110a8                 | LR__1440
110a8     56 AF 02 F6 | 	mov	local05, local04
110ac     02 AE 66 F0 | 	shl	local05, #2
110b0     E7 AE 02 F1 | 	add	local05, fp
110b4     98 01 00 FF 
110b8     B7 B1 06 F6 | 	mov	local06, ##@LR__6008
110bc     57 B1 62 FC | 	wrlong	local06, local05
110c0     01 AC 06 F1 | 	add	local04, #1
110c4     80 AC 56 F2 | 	cmps	local04, #128 wc
110c8     DC FF 9F CD |  if_b	jmp	#LR__1440
110cc                 | LR__1441
110cc     1C CE 85 F1 | 	sub	fp, #28
110d0     98 01 00 FF 
110d4     B8 93 06 F6 | 	mov	arg01, ##@LR__6009
110d8     10 94 06 F6 | 	mov	arg02, #16
110dc     64 93 B1 FD | 	call	#__system___basic_dir
110e0     3D B3 02 F6 | 	mov	local07, result1
110e4     00 B4 06 F6 | 	mov	local08, #0
110e8                 | ' filename=dir$("*", fbDirectory)
110e8                 | ' n=0
110e8                 | ' while filename <> "" andalso filename <> nil andalso n<128
110e8                 | LR__1442
110e8     98 01 00 FF 
110ec     BA B7 06 F6 | 	mov	local09, ##@LR__6010
110f0     59 93 02 F6 | 	mov	arg01, local07
110f4     5B 95 02 F6 | 	mov	arg02, local09
110f8     34 3C B1 FD | 	call	#__system___string_cmp
110fc     00 7A 0E F2 | 	cmp	result1, #0 wz
11100     68 00 90 AD |  if_e	jmp	#LR__1443
11104     00 B6 06 F6 | 	mov	local09, #0
11108     59 93 02 F6 | 	mov	arg01, local07
1110c     00 94 06 F6 | 	mov	arg02, #0
11110     1C 3C B1 FD | 	call	#__system___string_cmp
11114     00 7A 0E F2 | 	cmp	result1, #0 wz
11118     50 00 90 AD |  if_e	jmp	#LR__1443
1111c     80 B4 56 F2 | 	cmps	local08, #128 wc
11120     48 00 90 3D |  if_ae	jmp	#LR__1443
11124     98 01 00 FF 
11128     BB 93 06 F6 | 	mov	arg01, ##@LR__6011
1112c     59 95 02 F6 | 	mov	arg02, local07
11130     30 3C B1 FD | 	call	#__system___string_concat
11134     3D B3 02 F6 | 	mov	local07, result1
11138     5A AF 02 F6 | 	mov	local05, local08
1113c     02 AE 66 F0 | 	shl	local05, #2
11140     E7 B6 02 F6 | 	mov	local09, fp
11144     1C B6 06 F1 | 	add	local09, #28
11148     5B AF 02 F1 | 	add	local05, local09
1114c     57 B3 62 FC | 	wrlong	local07, local05
11150     01 B4 06 F1 | 	add	local08, #1
11154     00 AE 06 F6 | 	mov	local05, #0
11158     00 92 06 F6 | 	mov	arg01, #0
1115c     00 94 06 F6 | 	mov	arg02, #0
11160     E0 92 B1 FD | 	call	#__system___basic_dir
11164     3D B3 02 F6 | 	mov	local07, result1
11168     7C FF 9F FD | 	jmp	#LR__1442
1116c                 | LR__1443
1116c                 | ' for i=0 to n-1			' now sort this
1116c     00 AC 06 F6 | 	mov	local04, #0
11170     5A B9 02 F6 | 	mov	local10, local08
11174                 | LR__1444
11174     5C AD 52 F2 | 	cmps	local04, local10 wc
11178     DC 00 90 3D |  if_ae	jmp	#LR__1448
1117c     00 BA 06 F6 | 	mov	local11, #0
11180                 | '   swapped=false
11180                 | '   for j=0 to n-i-2
11180     00 BC 06 F6 | 	mov	local12, #0
11184     5A BF 02 F6 | 	mov	local13, local08
11188     56 BF 82 F1 | 	sub	local13, local04
1118c     01 BE 86 F1 | 	sub	local13, #1
11190                 | LR__1445
11190     5F BD 52 F2 | 	cmps	local12, local13 wc
11194     B0 00 90 3D |  if_ae	jmp	#LR__1447
11198                 | '     if filelist(j) > filelist(j+1) then
11198     5E B7 02 F6 | 	mov	local09, local12
1119c     02 B6 66 F0 | 	shl	local09, #2
111a0     1C CE 05 F1 | 	add	fp, #28
111a4     E7 B6 02 F1 | 	add	local09, fp
111a8     5B 93 02 FB | 	rdlong	arg01, local09
111ac     5E B7 02 F6 | 	mov	local09, local12
111b0     01 B6 06 F1 | 	add	local09, #1
111b4     5B B1 02 F6 | 	mov	local06, local09
111b8     02 B0 66 F0 | 	shl	local06, #2
111bc     E7 A6 02 F6 | 	mov	local01, fp
111c0     E7 B0 02 F1 | 	add	local06, fp
111c4     58 AF 02 FB | 	rdlong	local05, local06
111c8     57 95 02 F6 | 	mov	arg02, local05
111cc     1C CE 85 F1 | 	sub	fp, #28
111d0     5C 3B B1 FD | 	call	#__system___string_cmp
111d4     01 7A 56 F2 | 	cmps	result1, #1 wc
111d8     64 00 90 CD |  if_b	jmp	#LR__1446
111dc     5E B7 02 F6 | 	mov	local09, local12
111e0     01 B6 06 F1 | 	add	local09, #1
111e4     02 B6 66 F0 | 	shl	local09, #2
111e8     1C CE 05 F1 | 	add	fp, #28
111ec     E7 B6 02 F1 | 	add	local09, fp
111f0     5B BB 02 FB | 	rdlong	local11, local09
111f4     5E B1 02 F6 | 	mov	local06, local12
111f8     02 B0 66 F0 | 	shl	local06, #2
111fc     E7 B0 02 F1 | 	add	local06, fp
11200     58 AF 02 FB | 	rdlong	local05, local06
11204     5E B7 02 F6 | 	mov	local09, local12
11208     5B B1 02 F6 | 	mov	local06, local09
1120c     02 B0 66 F0 | 	shl	local06, #2
11210     E7 A6 02 F6 | 	mov	local01, fp
11214     E7 B0 02 F1 | 	add	local06, fp
11218     58 BB 62 FC | 	wrlong	local11, local06
1121c     5E A9 02 F6 | 	mov	local02, local12
11220     01 A8 06 F1 | 	add	local02, #1
11224     54 C1 02 F6 | 	mov	local14, local02
11228     02 C0 66 F0 | 	shl	local14, #2
1122c     E7 C2 02 F6 | 	mov	local15, fp
11230     E7 C0 02 F1 | 	add	local14, fp
11234     60 AF 62 FC | 	wrlong	local05, local14
11238     01 BA 66 F6 | 	neg	local11, #1
1123c     1C CE 85 F1 | 	sub	fp, #28
11240                 | LR__1446
11240     01 BC 06 F1 | 	add	local12, #1
11244     48 FF 9F FD | 	jmp	#LR__1445
11248                 | LR__1447
11248                 | ' if not swapped then exit for
11248     5D C5 22 F6 | 	not	local16, local11
1124c     00 C4 0E F2 | 	cmp	local16, #0 wz
11250     01 AC 06 A1 |  if_e	add	local04, #1
11254     1C FF 9F AD |  if_e	jmp	#LR__1444
11258                 | LR__1448
11258                 | ' for i=0 to n-1
11258     00 AC 06 F6 | 	mov	local04, #0
1125c     5A C7 02 F6 | 	mov	local17, local08
11260                 | LR__1449
11260     63 AD 52 F2 | 	cmps	local04, local17 wc
11264     90 00 90 3D |  if_ae	jmp	#LR__1451
11268                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
11268     00 92 06 F6 | 	mov	arg01, #0
1126c     1C 90 B1 FD | 	call	#__system___getiolock_0622
11270     3D 93 02 F6 | 	mov	arg01, result1
11274     90 3A B1 FD | 	call	#__system___lockmem
11278     56 A9 02 F6 | 	mov	local02, local04
1127c     02 A8 66 F0 | 	shl	local02, #2
11280     E7 C0 02 F6 | 	mov	local14, fp
11284     1C C0 06 F1 | 	add	local14, #28
11288     60 A9 02 F1 | 	add	local02, local14
1128c     54 95 02 FB | 	rdlong	arg02, local02
11290     00 A6 06 F6 | 	mov	local01, #0
11294     00 92 06 F6 | 	mov	arg01, #0
11298     00 96 06 F6 | 	mov	arg03, #0
1129c     5C 47 B1 FD | 	call	#__system___basic_print_string
112a0     00 92 06 F6 | 	mov	arg01, #0
112a4     E4 8F B1 FD | 	call	#__system___getiolock_0622
112a8     3D 01 68 FC | 	wrlong	#0, result1
112ac     40 AA 06 F1 | 	add	local03, #64
112b0     55 93 02 F6 | 	mov	arg01, local03
112b4     2C 1A B1 FD | 	call	#_hg010b_spin2_setcursorx
112b8     00 AB 56 F2 | 	cmps	local03, #256 wc
112bc     30 00 90 CD |  if_b	jmp	#LR__1450
112c0     00 AA 06 F6 | 	mov	local03, #0
112c4     00 92 06 F6 | 	mov	arg01, #0
112c8     C0 8F B1 FD | 	call	#__system___getiolock_0622
112cc     3D 93 02 F6 | 	mov	arg01, result1
112d0     34 3A B1 FD | 	call	#__system___lockmem
112d4     00 92 06 F6 | 	mov	arg01, #0
112d8     0A 94 06 F6 | 	mov	arg02, #10
112dc     00 96 06 F6 | 	mov	arg03, #0
112e0     C0 46 B1 FD | 	call	#__system___basic_print_char
112e4     00 92 06 F6 | 	mov	arg01, #0
112e8     A0 8F B1 FD | 	call	#__system___getiolock_0622
112ec     3D 01 68 FC | 	wrlong	#0, result1
112f0                 | LR__1450
112f0     01 AC 06 F1 | 	add	local04, #1
112f4     68 FF 9F FD | 	jmp	#LR__1449
112f8                 | LR__1451
112f8                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
112f8     80 B4 56 F2 | 	cmps	local08, #128 wc
112fc     44 00 90 CD |  if_b	jmp	#LR__1452
11300     00 92 06 F6 | 	mov	arg01, #0
11304     84 8F B1 FD | 	call	#__system___getiolock_0622
11308     3D 93 02 F6 | 	mov	arg01, result1
1130c     F8 39 B1 FD | 	call	#__system___lockmem
11310     98 01 00 FF 
11314     C2 95 06 F6 | 	mov	arg02, ##@LR__6012
11318     00 92 06 F6 | 	mov	arg01, #0
1131c     00 96 06 F6 | 	mov	arg03, #0
11320     D8 46 B1 FD | 	call	#__system___basic_print_string
11324     00 92 06 F6 | 	mov	arg01, #0
11328     0A 94 06 F6 | 	mov	arg02, #10
1132c     00 96 06 F6 | 	mov	arg03, #0
11330     70 46 B1 FD | 	call	#__system___basic_print_char
11334     00 92 06 F6 | 	mov	arg01, #0
11338     50 8F B1 FD | 	call	#__system___getiolock_0622
1133c     3D 01 68 FC | 	wrlong	#0, result1
11340     00 A6 06 F6 | 	mov	local01, #0
11344                 | LR__1452
11344                 | ' print
11344     00 92 06 F6 | 	mov	arg01, #0
11348     40 8F B1 FD | 	call	#__system___getiolock_0622
1134c     3D 93 02 F6 | 	mov	arg01, result1
11350     B4 39 B1 FD | 	call	#__system___lockmem
11354     00 92 06 F6 | 	mov	arg01, #0
11358     0A 94 06 F6 | 	mov	arg02, #10
1135c     00 96 06 F6 | 	mov	arg03, #0
11360     40 46 B1 FD | 	call	#__system___basic_print_char
11364     00 92 06 F6 | 	mov	arg01, #0
11368     20 8F B1 FD | 	call	#__system___getiolock_0622
1136c     3D 01 68 FC | 	wrlong	#0, result1
11370     00 B0 06 F6 | 	mov	local06, #0
11374     00 B4 06 F6 | 	mov	local08, #0
11378     00 AA 06 F6 | 	mov	local03, #0
1137c                 | ' return cursor_y
1137c     3E 64 06 F1 | 	add	objptr, #62
11380     32 C9 C2 FA | 	rdbyte	local18, objptr
11384     3E 64 86 F1 | 	sub	objptr, #62
11388     98 01 00 FF 
1138c     F4 93 06 F6 | 	mov	arg01, ##@LR__6013
11390     21 94 06 F6 | 	mov	arg02, #33
11394     AC 90 B1 FD | 	call	#__system___basic_dir
11398     3D B3 02 F6 | 	mov	local07, result1
1139c                 | ' n=0
1139c                 | ' px=0: py=v.getcursory()
1139c                 | ' filename = dir$("*", fbNormal )   
1139c                 | ' do while filename <> "" andalso filename <> nil andalso n<128
1139c                 | LR__1453
1139c     98 01 00 FF 
113a0     F6 B7 06 F6 | 	mov	local09, ##@LR__6014
113a4     59 93 02 F6 | 	mov	arg01, local07
113a8     5B 95 02 F6 | 	mov	arg02, local09
113ac     80 39 B1 FD | 	call	#__system___string_cmp
113b0     00 7A 0E F2 | 	cmp	result1, #0 wz
113b4     54 00 90 AD |  if_e	jmp	#LR__1454
113b8     00 B6 06 F6 | 	mov	local09, #0
113bc     59 93 02 F6 | 	mov	arg01, local07
113c0     00 94 06 F6 | 	mov	arg02, #0
113c4     68 39 B1 FD | 	call	#__system___string_cmp
113c8     00 7A 0E F2 | 	cmp	result1, #0 wz
113cc     3C 00 90 AD |  if_e	jmp	#LR__1454
113d0     80 B4 56 F2 | 	cmps	local08, #128 wc
113d4     34 00 90 3D |  if_ae	jmp	#LR__1454
113d8     5A AF 02 F6 | 	mov	local05, local08
113dc     02 AE 66 F0 | 	shl	local05, #2
113e0     E7 B6 02 F6 | 	mov	local09, fp
113e4     1C B6 06 F1 | 	add	local09, #28
113e8     5B AF 02 F1 | 	add	local05, local09
113ec     57 B3 62 FC | 	wrlong	local07, local05
113f0     01 B4 06 F1 | 	add	local08, #1
113f4     00 AE 06 F6 | 	mov	local05, #0
113f8     00 92 06 F6 | 	mov	arg01, #0
113fc     00 94 06 F6 | 	mov	arg02, #0
11400     40 90 B1 FD | 	call	#__system___basic_dir
11404     3D B3 02 F6 | 	mov	local07, result1
11408     90 FF 9F FD | 	jmp	#LR__1453
1140c                 | LR__1454
1140c                 | ' for i =0 to n-1
1140c     00 AC 06 F6 | 	mov	local04, #0
11410                 | LR__1455
11410     5A AD 52 F2 | 	cmps	local04, local08 wc
11414     D8 00 90 3D |  if_ae	jmp	#LR__1459
11418     00 BA 06 F6 | 	mov	local11, #0
1141c                 | '   swapped=false
1141c                 | '   for j=0 to n-i-2
1141c     00 BC 06 F6 | 	mov	local12, #0
11420     5A CB 02 F6 | 	mov	local19, local08
11424     56 CB 82 F1 | 	sub	local19, local04
11428     01 CA 86 F1 | 	sub	local19, #1
1142c                 | LR__1456
1142c     65 BD 52 F2 | 	cmps	local12, local19 wc
11430     AC 00 90 3D |  if_ae	jmp	#LR__1458
11434                 | '     if filelist(j) > filelist(j+1) then
11434     5E B7 02 F6 | 	mov	local09, local12
11438     02 B6 66 F0 | 	shl	local09, #2
1143c     1C CE 05 F1 | 	add	fp, #28
11440     E7 B6 02 F1 | 	add	local09, fp
11444     5B 93 02 FB | 	rdlong	arg01, local09
11448     5E B7 02 F6 | 	mov	local09, local12
1144c     01 B6 06 F1 | 	add	local09, #1
11450     5B B1 02 F6 | 	mov	local06, local09
11454     02 B0 66 F0 | 	shl	local06, #2
11458     E7 A6 02 F6 | 	mov	local01, fp
1145c     E7 B0 02 F1 | 	add	local06, fp
11460     58 AF 02 FB | 	rdlong	local05, local06
11464     57 95 02 F6 | 	mov	arg02, local05
11468     1C CE 85 F1 | 	sub	fp, #28
1146c     C0 38 B1 FD | 	call	#__system___string_cmp
11470     01 7A 56 F2 | 	cmps	result1, #1 wc
11474     60 00 90 CD |  if_b	jmp	#LR__1457
11478     5E B7 02 F6 | 	mov	local09, local12
1147c     01 B6 06 F1 | 	add	local09, #1
11480     02 B6 66 F0 | 	shl	local09, #2
11484     1C CE 05 F1 | 	add	fp, #28
11488     E7 B6 02 F1 | 	add	local09, fp
1148c     5B C5 02 FB | 	rdlong	local16, local09
11490     5E B1 02 F6 | 	mov	local06, local12
11494     02 B0 66 F0 | 	shl	local06, #2
11498     E7 B0 02 F1 | 	add	local06, fp
1149c     58 AF 02 FB | 	rdlong	local05, local06
114a0     5E B7 02 F6 | 	mov	local09, local12
114a4     5B B1 02 F6 | 	mov	local06, local09
114a8     02 B0 66 F0 | 	shl	local06, #2
114ac     E7 A6 02 F6 | 	mov	local01, fp
114b0     E7 B0 02 F1 | 	add	local06, fp
114b4     58 C5 62 FC | 	wrlong	local16, local06
114b8     5E C1 02 F6 | 	mov	local14, local12
114bc     01 C0 06 F1 | 	add	local14, #1
114c0     02 C0 66 F0 | 	shl	local14, #2
114c4     E7 C2 02 F6 | 	mov	local15, fp
114c8     E7 C0 02 F1 | 	add	local14, fp
114cc     60 AF 62 FC | 	wrlong	local05, local14
114d0     01 BA 66 F6 | 	neg	local11, #1
114d4     1C CE 85 F1 | 	sub	fp, #28
114d8                 | LR__1457
114d8     01 BC 06 F1 | 	add	local12, #1
114dc     4C FF 9F FD | 	jmp	#LR__1456
114e0                 | LR__1458
114e0                 | ' if not swapped then exit for
114e0     5D C5 22 F6 | 	not	local16, local11
114e4     00 C4 0E F2 | 	cmp	local16, #0 wz
114e8     01 AC 06 A1 |  if_e	add	local04, #1
114ec     20 FF 9F AD |  if_e	jmp	#LR__1455
114f0                 | LR__1459
114f0                 | ' for i=0 to n-1
114f0     00 AC 06 F6 | 	mov	local04, #0
114f4                 | LR__1460
114f4     5A AD 52 F2 | 	cmps	local04, local08 wc
114f8     8C 00 90 3D |  if_ae	jmp	#LR__1462
114fc                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
114fc     00 92 06 F6 | 	mov	arg01, #0
11500     88 8D B1 FD | 	call	#__system___getiolock_0622
11504     3D 93 02 F6 | 	mov	arg01, result1
11508     FC 37 B1 FD | 	call	#__system___lockmem
1150c     56 A9 02 F6 | 	mov	local02, local04
11510     02 A8 66 F0 | 	shl	local02, #2
11514     E7 C0 02 F6 | 	mov	local14, fp
11518     1C C0 06 F1 | 	add	local14, #28
1151c     60 A9 02 F1 | 	add	local02, local14
11520     54 95 02 FB | 	rdlong	arg02, local02
11524     00 92 06 F6 | 	mov	arg01, #0
11528     00 96 06 F6 | 	mov	arg03, #0
1152c     CC 44 B1 FD | 	call	#__system___basic_print_string
11530     00 92 06 F6 | 	mov	arg01, #0
11534     54 8D B1 FD | 	call	#__system___getiolock_0622
11538     3D 01 68 FC | 	wrlong	#0, result1
1153c     40 AA 06 F1 | 	add	local03, #64
11540     55 93 02 F6 | 	mov	arg01, local03
11544     9C 17 B1 FD | 	call	#_hg010b_spin2_setcursorx
11548     00 AB 56 F2 | 	cmps	local03, #256 wc
1154c     30 00 90 CD |  if_b	jmp	#LR__1461
11550     00 AA 06 F6 | 	mov	local03, #0
11554     00 92 06 F6 | 	mov	arg01, #0
11558     30 8D B1 FD | 	call	#__system___getiolock_0622
1155c     3D 93 02 F6 | 	mov	arg01, result1
11560     A4 37 B1 FD | 	call	#__system___lockmem
11564     00 92 06 F6 | 	mov	arg01, #0
11568     0A 94 06 F6 | 	mov	arg02, #10
1156c     00 96 06 F6 | 	mov	arg03, #0
11570     30 44 B1 FD | 	call	#__system___basic_print_char
11574     00 92 06 F6 | 	mov	arg01, #0
11578     10 8D B1 FD | 	call	#__system___getiolock_0622
1157c     3D 01 68 FC | 	wrlong	#0, result1
11580                 | LR__1461
11580     01 AC 06 F1 | 	add	local04, #1
11584     6C FF 9F FD | 	jmp	#LR__1460
11588                 | LR__1462
11588                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
11588     80 B4 56 F2 | 	cmps	local08, #128 wc
1158c     40 00 90 CD |  if_b	jmp	#LR__1463
11590     00 92 06 F6 | 	mov	arg01, #0
11594     F4 8C B1 FD | 	call	#__system___getiolock_0622
11598     3D 93 02 F6 | 	mov	arg01, result1
1159c     68 37 B1 FD | 	call	#__system___lockmem
115a0     98 01 00 FF 
115a4     F7 95 06 F6 | 	mov	arg02, ##@LR__6015
115a8     00 92 06 F6 | 	mov	arg01, #0
115ac     00 96 06 F6 | 	mov	arg03, #0
115b0     48 44 B1 FD | 	call	#__system___basic_print_string
115b4     00 92 06 F6 | 	mov	arg01, #0
115b8     0A 94 06 F6 | 	mov	arg02, #10
115bc     00 96 06 F6 | 	mov	arg03, #0
115c0     E0 43 B1 FD | 	call	#__system___basic_print_char
115c4     00 92 06 F6 | 	mov	arg01, #0
115c8     C0 8C B1 FD | 	call	#__system___getiolock_0622
115cc     3D 01 68 FC | 	wrlong	#0, result1
115d0                 | LR__1463
115d0                 | ' print
115d0     00 92 06 F6 | 	mov	arg01, #0
115d4     B4 8C B1 FD | 	call	#__system___getiolock_0622
115d8     3D 93 02 F6 | 	mov	arg01, result1
115dc     28 37 B1 FD | 	call	#__system___lockmem
115e0     00 92 06 F6 | 	mov	arg01, #0
115e4     0A 94 06 F6 | 	mov	arg02, #10
115e8     00 96 06 F6 | 	mov	arg03, #0
115ec     B4 43 B1 FD | 	call	#__system___basic_print_char
115f0     00 92 06 F6 | 	mov	arg01, #0
115f4     94 8C B1 FD | 	call	#__system___getiolock_0622
115f8     3D 01 68 FC | 	wrlong	#0, result1
115fc     E7 F0 03 F6 | 	mov	ptra, fp
11600     F2 00 A0 FD | 	call	#popregs_
11604                 | _do_dir_ret
11604     2D 00 64 FD | 	ret
11608                 | 
11608                 | ' 
11608                 | ' '-------------------- dpeek
11608                 | ' 
11608                 | ' sub do_dpeek
11608                 | _do_dpeek
11608     01 CA 05 F6 | 	mov	COUNT_, #1
1160c     E8 00 A0 FD | 	call	#pushregs_
11610     14 F0 07 F1 | 	add	ptra, #20
11614     58 C0 BF FD | 	call	#_pop
11618     E7 7A 62 FC | 	wrlong	result1, fp
1161c     04 CE 05 F1 | 	add	fp, #4
11620     E7 7C 62 FC | 	wrlong	result2, fp
11624     04 CE 05 F1 | 	add	fp, #4
11628     E7 7E 62 FC | 	wrlong	result3, fp
1162c     08 CE 85 F1 | 	sub	fp, #8
11630     E7 92 02 F6 | 	mov	arg01, fp
11634     14 C2 BF FD | 	call	#_converttoint
11638     3D 93 02 F6 | 	mov	arg01, result1
1163c                 | ' 
1163c                 | ' t1=pop()
1163c                 | ' a=converttoint(t1)
1163c                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
1163c     00 04 00 FF 
11640     00 92 16 F2 | 	cmp	arg01, ##524288 wc
11644     49 A7 E2 CA |  if_b	rdword	local01, arg01
11648     08 00 90 CD |  if_b	jmp	#LR__1470
1164c     EC FC B0 FD | 	call	#_psdpeek
11650     3D A7 02 F6 | 	mov	local01, result1
11654                 | LR__1470
11654     08 CE 05 F1 | 	add	fp, #8
11658     E7 3A 68 FC | 	wrlong	#29, fp
1165c     08 CE 85 F1 | 	sub	fp, #8
11660     E7 A6 62 FC | 	wrlong	local01, fp
11664     E7 92 02 F6 | 	mov	arg01, fp
11668     94 C0 BF FD | 	call	#_push
1166c     E7 F0 03 F6 | 	mov	ptra, fp
11670     F2 00 A0 FD | 	call	#popregs_
11674                 | _do_dpeek_ret
11674     2D 00 64 FD | 	ret
11678                 | 
11678                 | ' 
11678                 | ' '-------------------- dpoke
11678                 | ' 
11678                 | ' sub do_dpoke
11678                 | _do_dpoke
11678     02 CA 05 F6 | 	mov	COUNT_, #2
1167c     E8 00 A0 FD | 	call	#pushregs_
11680     20 F0 07 F1 | 	add	ptra, #32
11684     E8 BF BF FD | 	call	#_pop
11688     3D 95 02 F6 | 	mov	arg02, result1
1168c     3E 93 02 F6 | 	mov	arg01, result2
11690     3F A7 02 F6 | 	mov	local01, result3
11694     E7 94 62 FC | 	wrlong	arg02, fp
11698     04 CE 05 F1 | 	add	fp, #4
1169c     E7 92 62 FC | 	wrlong	arg01, fp
116a0     04 CE 05 F1 | 	add	fp, #4
116a4     E7 A6 62 FC | 	wrlong	local01, fp
116a8     08 CE 85 F1 | 	sub	fp, #8
116ac     C0 BF BF FD | 	call	#_pop
116b0     3F A7 02 F6 | 	mov	local01, result3
116b4     0C CE 05 F1 | 	add	fp, #12
116b8     E7 7A 62 FC | 	wrlong	result1, fp
116bc     04 CE 05 F1 | 	add	fp, #4
116c0     E7 7C 62 FC | 	wrlong	result2, fp
116c4     04 CE 05 F1 | 	add	fp, #4
116c8     E7 A6 62 FC | 	wrlong	local01, fp
116cc     08 CE 85 F1 | 	sub	fp, #8
116d0     E7 92 02 F6 | 	mov	arg01, fp
116d4     0C CE 85 F1 | 	sub	fp, #12
116d8     70 C1 BF FD | 	call	#_converttoint
116dc     3D A7 02 F6 | 	mov	local01, result1
116e0     E7 92 02 F6 | 	mov	arg01, fp
116e4     64 C1 BF FD | 	call	#_converttoint
116e8     3D A9 02 F6 | 	mov	local02, result1
116ec                 | ' 
116ec                 | ' t1=pop() 'value
116ec                 | ' t2=pop() 
116ec                 | ' a=converttoint(t2) : v=converttoint(t1)
116ec                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
116ec     00 04 00 FF 
116f0     00 A6 16 F2 | 	cmp	local01, ##524288 wc
116f4     53 A9 52 CC |  if_b	wrword	local02, local01
116f8     53 93 02 36 |  if_ae	mov	arg01, local01
116fc     54 95 02 36 |  if_ae	mov	arg02, local02
11700     18 FB B0 3D |  if_ae	call	#_psdpoke
11704     E7 F0 03 F6 | 	mov	ptra, fp
11708     F2 00 A0 FD | 	call	#popregs_
1170c                 | _do_dpoke_ret
1170c     2D 00 64 FD | 	ret
11710                 | 
11710                 | ' '-------------------- draw
11710                 | ' 
11710                 | ' sub do_draw
11710                 | _do_draw
11710     02 CA 05 F6 | 	mov	COUNT_, #2
11714     E8 00 A0 FD | 	call	#pushregs_
11718     20 F0 07 F1 | 	add	ptra, #32
1171c     50 BF BF FD | 	call	#_pop
11720     3D 99 02 F6 | 	mov	arg04, result1
11724     3E 97 02 F6 | 	mov	arg03, result2
11728     3F 9B 02 F6 | 	mov	arg05, result3
1172c     0C CE 05 F1 | 	add	fp, #12
11730     E7 98 62 FC | 	wrlong	arg04, fp
11734     04 CE 05 F1 | 	add	fp, #4
11738     E7 96 62 FC | 	wrlong	arg03, fp
1173c     04 CE 05 F1 | 	add	fp, #4
11740     E7 9A 62 FC | 	wrlong	arg05, fp
11744     14 CE 85 F1 | 	sub	fp, #20
11748     24 BF BF FD | 	call	#_pop
1174c     3F 99 02 F6 | 	mov	arg04, result3
11750     E7 7A 62 FC | 	wrlong	result1, fp
11754     04 CE 05 F1 | 	add	fp, #4
11758     E7 7C 62 FC | 	wrlong	result2, fp
1175c     04 CE 05 F1 | 	add	fp, #4
11760     E7 98 62 FC | 	wrlong	arg04, fp
11764     08 CE 85 F1 | 	sub	fp, #8
11768     E7 92 02 F6 | 	mov	arg01, fp
1176c     DC C0 BF FD | 	call	#_converttoint
11770     3D A7 02 F6 | 	mov	local01, result1
11774     E7 92 02 F6 | 	mov	arg01, fp
11778     0C 92 06 F1 | 	add	arg01, #12
1177c     CC C0 BF FD | 	call	#_converttoint
11780     3D A9 02 F6 | 	mov	local02, result1
11784     38 00 00 FF 
11788     AC 65 06 F1 | 	add	objptr, ##29100
1178c     32 93 02 FB | 	rdlong	arg01, objptr
11790     04 64 06 F1 | 	add	objptr, #4
11794     32 95 02 FB | 	rdlong	arg02, objptr
11798     08 64 86 F1 | 	sub	objptr, #8
1179c     32 9B 02 FB | 	rdlong	arg05, objptr
117a0     38 00 00 FF 
117a4     A8 65 86 F1 | 	sub	objptr, ##29096
117a8     53 97 02 F6 | 	mov	arg03, local01
117ac     54 99 02 F6 | 	mov	arg04, local02
117b0     94 0B B1 FD | 	call	#_hg010b_spin2_draw
117b4     38 00 00 FF 
117b8     AC 65 06 F1 | 	add	objptr, ##29100
117bc     32 A7 62 FC | 	wrlong	local01, objptr
117c0     04 64 06 F1 | 	add	objptr, #4
117c4     32 A9 62 FC | 	wrlong	local02, objptr
117c8     38 00 00 FF 
117cc     B0 65 86 F1 | 	sub	objptr, ##29104
117d0     E7 F0 03 F6 | 	mov	ptra, fp
117d4     F2 00 A0 FD | 	call	#popregs_
117d8                 | _do_draw_ret
117d8     2D 00 64 FD | 	ret
117dc                 | 
117dc                 | ' 
117dc                 | ' '-------------------- else
117dc                 | ' 
117dc                 | ' sub do_else
117dc                 | _do_else
117dc     4B 00 00 FF 
117e0     FC 65 06 F1 | 	add	objptr, ##38908
117e4     32 81 02 FB | 	rdlong	_var01, objptr
117e8     01 80 86 F1 | 	sub	_var01, #1
117ec     04 64 06 F1 | 	add	objptr, #4
117f0     32 81 62 FC | 	wrlong	_var01, objptr
117f4     4C 00 00 FF 
117f8     00 64 86 F1 | 	sub	objptr, ##38912
117fc                 | _do_else_ret
117fc     2D 00 64 FD | 	ret
11800                 | 
11800                 | ' 
11800                 | ' '-------------------- end
11800                 | ' 
11800                 | ' sub do_end
11800                 | _do_end
11800     4B 00 00 FF 
11804     FC 65 06 F1 | 	add	objptr, ##38908
11808     32 81 02 FB | 	rdlong	_var01, objptr
1180c     01 80 86 F1 | 	sub	_var01, #1
11810     04 64 06 F1 | 	add	objptr, #4
11814     32 81 62 FC | 	wrlong	_var01, objptr
11818     06 00 00 FF 
1181c     38 64 06 F1 | 	add	objptr, ##3128
11820     FF FF BF FF 
11824     32 FF 6B FC | 	wrlong	##2147483647, objptr
11828     52 00 00 FF 
1182c     38 64 86 F1 | 	sub	objptr, ##42040
11830                 | _do_end_ret
11830     2D 00 64 FD | 	ret
11834                 | 
11834                 | ' 
11834                 | ' '-------------------- enter
11834                 | ' 
11834                 | ' sub do_enter
11834                 | _do_enter
11834     02 00 00 FF 
11838     D2 92 06 F6 | 	mov	arg01, ##1234
1183c     A4 2D B0 FD | 	call	#_do_load
11840                 | _do_enter_ret
11840     2D 00 64 FD | 	ret
11844                 | 
11844                 | ' 
11844                 | ' '------------------- error processing
11844                 | ' 
11844                 | ' sub do_error
11844                 | _do_error
11844     01 CA 05 F6 | 	mov	COUNT_, #1
11848     E8 00 A0 FD | 	call	#pushregs_
1184c     4C 00 00 FF 
11850     00 64 06 F1 | 	add	objptr, ##38912
11854     32 99 02 FB | 	rdlong	arg04, objptr
11858     4C 97 02 F6 | 	mov	arg03, arg04
1185c     01 96 66 F0 | 	shl	arg03, #1
11860     4C 97 02 F1 | 	add	arg03, arg04
11864     02 96 66 F0 | 	shl	arg03, #2
11868     03 00 00 FF 
1186c     04 64 86 F1 | 	sub	objptr, ##1540
11870     32 97 02 F1 | 	add	arg03, objptr
11874     4B A7 02 FB | 	rdlong	local01, arg03
11878                 | ' r=compiledline(lineptr_e).result.uresult
11878                 | ' print "Error ";r;": ";errors$(r)
11878     00 92 06 F6 | 	mov	arg01, #0
1187c     48 00 00 FF 
11880     FC 65 86 F1 | 	sub	objptr, ##37372
11884     04 8A B1 FD | 	call	#__system___getiolock_0622
11888     3D 93 02 F6 | 	mov	arg01, result1
1188c     78 34 B1 FD | 	call	#__system___lockmem
11890     99 01 00 FF 
11894     29 94 06 F6 | 	mov	arg02, ##@LR__6016
11898     00 92 06 F6 | 	mov	arg01, #0
1189c     00 96 06 F6 | 	mov	arg03, #0
118a0     58 41 B1 FD | 	call	#__system___basic_print_string
118a4     00 92 06 F6 | 	mov	arg01, #0
118a8     53 95 02 F6 | 	mov	arg02, local01
118ac     00 96 06 F6 | 	mov	arg03, #0
118b0     0A 98 06 F6 | 	mov	arg04, #10
118b4     C8 41 B1 FD | 	call	#__system___basic_print_unsigned
118b8     99 01 00 FF 
118bc     30 94 06 F6 | 	mov	arg02, ##@LR__6017
118c0     00 92 06 F6 | 	mov	arg01, #0
118c4     00 96 06 F6 | 	mov	arg03, #0
118c8     30 41 B1 FD | 	call	#__system___basic_print_string
118cc     02 A6 66 F0 | 	shl	local01, #2
118d0     32 99 02 F6 | 	mov	arg04, objptr
118d4     46 00 00 FF 
118d8     FC 99 06 F1 | 	add	arg04, ##36348
118dc     4C A7 02 F1 | 	add	local01, arg04
118e0     53 95 02 FB | 	rdlong	arg02, local01
118e4     00 92 06 F6 | 	mov	arg01, #0
118e8     00 96 06 F6 | 	mov	arg03, #0
118ec     0C 41 B1 FD | 	call	#__system___basic_print_string
118f0     00 92 06 F6 | 	mov	arg01, #0
118f4     0A 94 06 F6 | 	mov	arg02, #10
118f8     00 96 06 F6 | 	mov	arg03, #0
118fc     A4 40 B1 FD | 	call	#__system___basic_print_char
11900     00 92 06 F6 | 	mov	arg01, #0
11904     84 89 B1 FD | 	call	#__system___getiolock_0622
11908     3D 01 68 FC | 	wrlong	#0, result1
1190c     E7 F0 03 F6 | 	mov	ptra, fp
11910     F2 00 A0 FD | 	call	#popregs_
11914                 | _do_error_ret
11914     2D 00 64 FD | 	ret
11918                 | 
11918                 | ' 
11918                 | ' '-------------------- fcircle
11918                 | ' 
11918                 | ' sub do_fcircle
11918                 | _do_fcircle
11918     02 CA 05 F6 | 	mov	COUNT_, #2
1191c     E8 00 A0 FD | 	call	#pushregs_
11920     24 F0 07 F1 | 	add	ptra, #36
11924     48 BD BF FD | 	call	#_pop
11928     3D 95 02 F6 | 	mov	arg02, result1
1192c     3E 99 02 F6 | 	mov	arg04, result2
11930     3F 97 02 F6 | 	mov	arg03, result3
11934     18 CE 05 F1 | 	add	fp, #24
11938     E7 94 62 FC | 	wrlong	arg02, fp
1193c     04 CE 05 F1 | 	add	fp, #4
11940     E7 98 62 FC | 	wrlong	arg04, fp
11944     04 CE 05 F1 | 	add	fp, #4
11948     E7 96 62 FC | 	wrlong	arg03, fp
1194c     20 CE 85 F1 | 	sub	fp, #32
11950     1C BD BF FD | 	call	#_pop
11954     3D 95 02 F6 | 	mov	arg02, result1
11958     3E 99 02 F6 | 	mov	arg04, result2
1195c     3F 97 02 F6 | 	mov	arg03, result3
11960     0C CE 05 F1 | 	add	fp, #12
11964     E7 94 62 FC | 	wrlong	arg02, fp
11968     04 CE 05 F1 | 	add	fp, #4
1196c     E7 98 62 FC | 	wrlong	arg04, fp
11970     04 CE 05 F1 | 	add	fp, #4
11974     E7 96 62 FC | 	wrlong	arg03, fp
11978     14 CE 85 F1 | 	sub	fp, #20
1197c     F0 BC BF FD | 	call	#_pop
11980     3F 95 02 F6 | 	mov	arg02, result3
11984     E7 7A 62 FC | 	wrlong	result1, fp
11988     04 CE 05 F1 | 	add	fp, #4
1198c     E7 7C 62 FC | 	wrlong	result2, fp
11990     04 CE 05 F1 | 	add	fp, #4
11994     E7 94 62 FC | 	wrlong	arg02, fp
11998     08 CE 85 F1 | 	sub	fp, #8
1199c     E7 92 02 F6 | 	mov	arg01, fp
119a0     A8 BE BF FD | 	call	#_converttoint
119a4     3D A7 02 F6 | 	mov	local01, result1
119a8     E7 92 02 F6 | 	mov	arg01, fp
119ac     0C 92 06 F1 | 	add	arg01, #12
119b0     98 BE BF FD | 	call	#_converttoint
119b4     3D A9 02 F6 | 	mov	local02, result1
119b8     E7 92 02 F6 | 	mov	arg01, fp
119bc     18 92 06 F1 | 	add	arg01, #24
119c0     88 BE BF FD | 	call	#_converttoint
119c4     3D 97 02 F6 | 	mov	arg03, result1
119c8     38 00 00 FF 
119cc     A8 65 06 F1 | 	add	objptr, ##29096
119d0     32 99 02 FB | 	rdlong	arg04, objptr
119d4     38 00 00 FF 
119d8     A8 65 86 F1 | 	sub	objptr, ##29096
119dc     53 93 02 F6 | 	mov	arg01, local01
119e0     54 95 02 F6 | 	mov	arg02, local02
119e4     E4 0D B1 FD | 	call	#_hg010b_spin2_fcircle
119e8     E7 F0 03 F6 | 	mov	ptra, fp
119ec     F2 00 A0 FD | 	call	#popregs_
119f0                 | _do_fcircle_ret
119f0     2D 00 64 FD | 	ret
119f4                 | 
119f4                 | ' 
119f4                 | ' '-------------------- fill
119f4                 | ' 
119f4                 | ' sub do_fill
119f4                 | _do_fill
119f4     03 CA 05 F6 | 	mov	COUNT_, #3
119f8     E8 00 A0 FD | 	call	#pushregs_
119fc     30 F0 07 F1 | 	add	ptra, #48
11a00     6C BC BF FD | 	call	#_pop
11a04     3D 97 02 F6 | 	mov	arg03, result1
11a08     3E 95 02 F6 | 	mov	arg02, result2
11a0c     3F 99 02 F6 | 	mov	arg04, result3
11a10     24 CE 05 F1 | 	add	fp, #36
11a14     E7 96 62 FC | 	wrlong	arg03, fp
11a18     04 CE 05 F1 | 	add	fp, #4
11a1c     E7 94 62 FC | 	wrlong	arg02, fp
11a20     04 CE 05 F1 | 	add	fp, #4
11a24     E7 98 62 FC | 	wrlong	arg04, fp
11a28     2C CE 85 F1 | 	sub	fp, #44
11a2c     40 BC BF FD | 	call	#_pop
11a30     3D 97 02 F6 | 	mov	arg03, result1
11a34     3E 95 02 F6 | 	mov	arg02, result2
11a38     3F 99 02 F6 | 	mov	arg04, result3
11a3c     18 CE 05 F1 | 	add	fp, #24
11a40     E7 96 62 FC | 	wrlong	arg03, fp
11a44     04 CE 05 F1 | 	add	fp, #4
11a48     E7 94 62 FC | 	wrlong	arg02, fp
11a4c     04 CE 05 F1 | 	add	fp, #4
11a50     E7 98 62 FC | 	wrlong	arg04, fp
11a54     20 CE 85 F1 | 	sub	fp, #32
11a58     14 BC BF FD | 	call	#_pop
11a5c     3D 97 02 F6 | 	mov	arg03, result1
11a60     3E 95 02 F6 | 	mov	arg02, result2
11a64     3F 99 02 F6 | 	mov	arg04, result3
11a68     0C CE 05 F1 | 	add	fp, #12
11a6c     E7 96 62 FC | 	wrlong	arg03, fp
11a70     04 CE 05 F1 | 	add	fp, #4
11a74     E7 94 62 FC | 	wrlong	arg02, fp
11a78     04 CE 05 F1 | 	add	fp, #4
11a7c     E7 98 62 FC | 	wrlong	arg04, fp
11a80     14 CE 85 F1 | 	sub	fp, #20
11a84     E8 BB BF FD | 	call	#_pop
11a88     3F 97 02 F6 | 	mov	arg03, result3
11a8c     E7 7A 62 FC | 	wrlong	result1, fp
11a90     04 CE 05 F1 | 	add	fp, #4
11a94     E7 7C 62 FC | 	wrlong	result2, fp
11a98     04 CE 05 F1 | 	add	fp, #4
11a9c     E7 96 62 FC | 	wrlong	arg03, fp
11aa0     08 CE 85 F1 | 	sub	fp, #8
11aa4     E7 92 02 F6 | 	mov	arg01, fp
11aa8     A0 BD BF FD | 	call	#_converttoint
11aac     3D A7 02 F6 | 	mov	local01, result1
11ab0     E7 92 02 F6 | 	mov	arg01, fp
11ab4     0C 92 06 F1 | 	add	arg01, #12
11ab8     90 BD BF FD | 	call	#_converttoint
11abc     3D A9 02 F6 | 	mov	local02, result1
11ac0     E7 92 02 F6 | 	mov	arg01, fp
11ac4     18 92 06 F1 | 	add	arg01, #24
11ac8     80 BD BF FD | 	call	#_converttoint
11acc     3D AB 02 F6 | 	mov	local03, result1
11ad0     E7 92 02 F6 | 	mov	arg01, fp
11ad4     24 92 06 F1 | 	add	arg01, #36
11ad8     70 BD BF FD | 	call	#_converttoint
11adc     3D 99 02 F6 | 	mov	arg04, result1
11ae0     53 93 02 F6 | 	mov	arg01, local01
11ae4     54 95 02 F6 | 	mov	arg02, local02
11ae8     55 97 02 F6 | 	mov	arg03, local03
11aec     48 0A B1 FD | 	call	#_hg010b_spin2_fill
11af0     E7 F0 03 F6 | 	mov	ptra, fp
11af4     F2 00 A0 FD | 	call	#popregs_
11af8                 | _do_fill_ret
11af8     2D 00 64 FD | 	ret
11afc                 | 
11afc                 | ' 
11afc                 | ' '-------------------- findfirst
11afc                 | ' 
11afc                 | ' sub do_findfirst
11afc                 | _do_findfirst
11afc     04 CA 05 F6 | 	mov	COUNT_, #4
11b00     E8 00 A0 FD | 	call	#pushregs_
11b04     1C F0 07 F1 | 	add	ptra, #28
11b08     4C 00 00 FF 
11b0c     00 64 06 F1 | 	add	objptr, ##38912
11b10     32 97 02 FB | 	rdlong	arg03, objptr
11b14     4B 95 02 F6 | 	mov	arg02, arg03
11b18     01 94 66 F0 | 	shl	arg02, #1
11b1c     4B 95 02 F1 | 	add	arg02, arg03
11b20     02 94 66 F0 | 	shl	arg02, #2
11b24     03 00 00 FF 
11b28     04 64 86 F1 | 	sub	objptr, ##1540
11b2c     32 95 02 F1 | 	add	arg02, objptr
11b30     4A A7 02 FB | 	rdlong	local01, arg02
11b34                 | ' 
11b34                 | ' numpar=compiledline(lineptr_e).result.uresult
11b34                 | ' if numpar=2 then
11b34     02 A6 0E F2 | 	cmp	local01, #2 wz
11b38     48 00 00 FF 
11b3c     FC 65 86 F1 | 	sub	objptr, ##37372
11b40     48 01 90 5D |  if_ne	jmp	#LR__1484
11b44     28 BB BF FD | 	call	#_pop
11b48     3F 97 02 F6 | 	mov	arg03, result3
11b4c     08 CE 05 F1 | 	add	fp, #8
11b50     E7 7A 62 FC | 	wrlong	result1, fp
11b54     04 CE 05 F1 | 	add	fp, #4
11b58     E7 7C 62 FC | 	wrlong	result2, fp
11b5c     04 CE 05 F1 | 	add	fp, #4
11b60     E7 96 62 FC | 	wrlong	arg03, fp
11b64                 | '   t1=pop()
11b64                 | '   if t1.result_type=result_string2 then 
11b64     10 CE 85 F1 | 	sub	fp, #16
11b68     2B 96 0E F2 | 	cmp	arg03, #43 wz
11b6c     18 00 90 5D |  if_ne	jmp	#LR__1480
11b70     08 CE 05 F1 | 	add	fp, #8
11b74     E7 92 02 FB | 	rdlong	arg01, fp
11b78     08 CE 85 F1 | 	sub	fp, #8
11b7c     60 BC BF FD | 	call	#_convertstring
11b80     3D A9 02 F6 | 	mov	local02, result1
11b84     60 00 90 FD | 	jmp	#LR__1482
11b88                 | LR__1480
11b88     10 CE 05 F1 | 	add	fp, #16
11b8c     E7 96 02 FB | 	rdlong	arg03, fp
11b90     10 CE 85 F1 | 	sub	fp, #16
11b94     1F 96 0E F2 | 	cmp	arg03, #31 wz
11b98     08 CE 05 A1 |  if_e	add	fp, #8
11b9c     E7 A8 02 AB |  if_e	rdlong	local02, fp
11ba0     08 CE 85 A1 |  if_e	sub	fp, #8
11ba4     40 00 90 AD |  if_e	jmp	#LR__1481
11ba8                 | '     print "findfirst: "; : printerror(30) : return  
11ba8     00 92 06 F6 | 	mov	arg01, #0
11bac     DC 86 B1 FD | 	call	#__system___getiolock_0622
11bb0     3D 93 02 F6 | 	mov	arg01, result1
11bb4     50 31 B1 FD | 	call	#__system___lockmem
11bb8     99 01 00 FF 
11bbc     33 94 06 F6 | 	mov	arg02, ##@LR__6018
11bc0     00 92 06 F6 | 	mov	arg01, #0
11bc4     00 96 06 F6 | 	mov	arg03, #0
11bc8     30 3E B1 FD | 	call	#__system___basic_print_string
11bcc     00 92 06 F6 | 	mov	arg01, #0
11bd0     B8 86 B1 FD | 	call	#__system___getiolock_0622
11bd4     3D 01 68 FC | 	wrlong	#0, result1
11bd8     1E 92 06 F6 | 	mov	arg01, #30
11bdc     00 94 06 F6 | 	mov	arg02, #0
11be0     54 F4 B0 FD | 	call	#_printerror
11be4     08 02 90 FD | 	jmp	#LR__1492
11be8                 | LR__1481
11be8                 | LR__1482
11be8     84 BA BF FD | 	call	#_pop
11bec     3F 97 02 F6 | 	mov	arg03, result3
11bf0     08 CE 05 F1 | 	add	fp, #8
11bf4     E7 7A 62 FC | 	wrlong	result1, fp
11bf8     04 CE 05 F1 | 	add	fp, #4
11bfc     E7 7C 62 FC | 	wrlong	result2, fp
11c00     04 CE 05 F1 | 	add	fp, #4
11c04     E7 96 62 FC | 	wrlong	arg03, fp
11c08                 | '   t1=pop()
11c08                 | '   if t1.result_type=result_string2 then 
11c08     10 CE 85 F1 | 	sub	fp, #16
11c0c     2B 96 0E F2 | 	cmp	arg03, #43 wz
11c10     18 00 90 5D |  if_ne	jmp	#LR__1483
11c14     08 CE 05 F1 | 	add	fp, #8
11c18     E7 92 02 FB | 	rdlong	arg01, fp
11c1c     08 CE 85 F1 | 	sub	fp, #8
11c20     BC BB BF FD | 	call	#_convertstring
11c24     3D AB 02 F6 | 	mov	local03, result1
11c28     58 01 90 FD | 	jmp	#LR__1490
11c2c                 | LR__1483
11c2c     10 CE 05 F1 | 	add	fp, #16
11c30     E7 A6 02 FB | 	rdlong	local01, fp
11c34     10 CE 85 F1 | 	sub	fp, #16
11c38     1F A6 0E F2 | 	cmp	local01, #31 wz
11c3c     08 CE 05 A1 |  if_e	add	fp, #8
11c40     E7 AA 02 AB |  if_e	rdlong	local03, fp
11c44     08 CE 85 A1 |  if_e	sub	fp, #8
11c48     38 01 90 AD |  if_e	jmp	#LR__1490
11c4c                 | '     print "findfirst: "; : printerror(30) : return  
11c4c     00 92 06 F6 | 	mov	arg01, #0
11c50     38 86 B1 FD | 	call	#__system___getiolock_0622
11c54     3D 93 02 F6 | 	mov	arg01, result1
11c58     AC 30 B1 FD | 	call	#__system___lockmem
11c5c     99 01 00 FF 
11c60     3F 94 06 F6 | 	mov	arg02, ##@LR__6019
11c64     00 92 06 F6 | 	mov	arg01, #0
11c68     00 96 06 F6 | 	mov	arg03, #0
11c6c     8C 3D B1 FD | 	call	#__system___basic_print_string
11c70     00 92 06 F6 | 	mov	arg01, #0
11c74     14 86 B1 FD | 	call	#__system___getiolock_0622
11c78     3D 01 68 FC | 	wrlong	#0, result1
11c7c     1E 92 06 F6 | 	mov	arg01, #30
11c80     00 94 06 F6 | 	mov	arg02, #0
11c84     B0 F3 B0 FD | 	call	#_printerror
11c88     64 01 90 FD | 	jmp	#LR__1492
11c8c                 | LR__1484
11c8c     01 A6 0E F2 | 	cmp	local01, #1 wz
11c90     B0 00 90 5D |  if_ne	jmp	#LR__1488
11c94     D8 B9 BF FD | 	call	#_pop
11c98     3F 97 02 F6 | 	mov	arg03, result3
11c9c     08 CE 05 F1 | 	add	fp, #8
11ca0     E7 7A 62 FC | 	wrlong	result1, fp
11ca4     04 CE 05 F1 | 	add	fp, #4
11ca8     E7 7C 62 FC | 	wrlong	result2, fp
11cac     04 CE 05 F1 | 	add	fp, #4
11cb0     E7 96 62 FC | 	wrlong	arg03, fp
11cb4                 | '   t1=pop()
11cb4                 | '   if t1.result_type=result_string2 then 
11cb4     10 CE 85 F1 | 	sub	fp, #16
11cb8     2B 96 0E F2 | 	cmp	arg03, #43 wz
11cbc     18 00 90 5D |  if_ne	jmp	#LR__1485
11cc0     08 CE 05 F1 | 	add	fp, #8
11cc4     E7 92 02 FB | 	rdlong	arg01, fp
11cc8     08 CE 85 F1 | 	sub	fp, #8
11ccc     10 BB BF FD | 	call	#_convertstring
11cd0     3D AB 02 F6 | 	mov	local03, result1
11cd4     60 00 90 FD | 	jmp	#LR__1487
11cd8                 | LR__1485
11cd8     10 CE 05 F1 | 	add	fp, #16
11cdc     E7 96 02 FB | 	rdlong	arg03, fp
11ce0     10 CE 85 F1 | 	sub	fp, #16
11ce4     1F 96 0E F2 | 	cmp	arg03, #31 wz
11ce8     08 CE 05 A1 |  if_e	add	fp, #8
11cec     E7 AA 02 AB |  if_e	rdlong	local03, fp
11cf0     08 CE 85 A1 |  if_e	sub	fp, #8
11cf4     40 00 90 AD |  if_e	jmp	#LR__1486
11cf8                 | '     print "findfirst: "; : printerror(30) : return  
11cf8     00 92 06 F6 | 	mov	arg01, #0
11cfc     8C 85 B1 FD | 	call	#__system___getiolock_0622
11d00     3D 93 02 F6 | 	mov	arg01, result1
11d04     00 30 B1 FD | 	call	#__system___lockmem
11d08     99 01 00 FF 
11d0c     4B 94 06 F6 | 	mov	arg02, ##@LR__6020
11d10     00 92 06 F6 | 	mov	arg01, #0
11d14     00 96 06 F6 | 	mov	arg03, #0
11d18     E0 3C B1 FD | 	call	#__system___basic_print_string
11d1c     00 92 06 F6 | 	mov	arg01, #0
11d20     68 85 B1 FD | 	call	#__system___getiolock_0622
11d24     3D 01 68 FC | 	wrlong	#0, result1
11d28     1E 92 06 F6 | 	mov	arg01, #30
11d2c     00 94 06 F6 | 	mov	arg02, #0
11d30     04 F3 B0 FD | 	call	#_printerror
11d34     B8 00 90 FD | 	jmp	#LR__1492
11d38                 | LR__1486
11d38                 | LR__1487
11d38     99 01 00 FF 
11d3c     57 A8 06 F6 | 	mov	local02, ##@LR__6021
11d40     40 00 90 FD | 	jmp	#LR__1489
11d44                 | LR__1488
11d44                 | '   print "findfirst: "; : printerror(39) : return     
11d44     00 92 06 F6 | 	mov	arg01, #0
11d48     40 85 B1 FD | 	call	#__system___getiolock_0622
11d4c     3D 93 02 F6 | 	mov	arg01, result1
11d50     B4 2F B1 FD | 	call	#__system___lockmem
11d54     99 01 00 FF 
11d58     58 94 06 F6 | 	mov	arg02, ##@LR__6022
11d5c     00 92 06 F6 | 	mov	arg01, #0
11d60     00 96 06 F6 | 	mov	arg03, #0
11d64     94 3C B1 FD | 	call	#__system___basic_print_string
11d68     00 92 06 F6 | 	mov	arg01, #0
11d6c     1C 85 B1 FD | 	call	#__system___getiolock_0622
11d70     3D 01 68 FC | 	wrlong	#0, result1
11d74     27 92 06 F6 | 	mov	arg01, #39
11d78     00 94 06 F6 | 	mov	arg02, #0
11d7c     B8 F2 B0 FD | 	call	#_printerror
11d80     6C 00 90 FD | 	jmp	#LR__1492
11d84                 | LR__1489
11d84                 | LR__1490
11d84                 | ' 
11d84                 | ' if s2="" then
11d84     99 01 00 FF 
11d88     64 94 06 F6 | 	mov	arg02, ##@LR__6023
11d8c     54 93 02 F6 | 	mov	arg01, local02
11d90     9C 2F B1 FD | 	call	#__system___string_cmp
11d94     00 7A 0E F2 | 	cmp	result1, #0 wz
11d98     31 AC 06 A6 |  if_e	mov	local04, #49
11d9c     24 00 90 AD |  if_e	jmp	#LR__1491
11da0     54 93 02 F6 | 	mov	arg01, local02
11da4     18 4B B1 FD | 	call	#__system__LCase_S
11da8     3D 93 02 F6 | 	mov	arg01, result1
11dac     99 01 00 FF 
11db0     65 94 06 F6 | 	mov	arg02, ##@LR__6024
11db4     78 2F B1 FD | 	call	#__system___string_cmp
11db8     00 7A 0E F2 | 	cmp	result1, #0 wz
11dbc     10 AC 06 A6 |  if_e	mov	local04, #16
11dc0     21 AC 06 56 |  if_ne	mov	local04, #33
11dc4                 | LR__1491
11dc4     55 93 02 F6 | 	mov	arg01, local03
11dc8     56 95 02 F6 | 	mov	arg02, local04
11dcc     74 86 B1 FD | 	call	#__system___basic_dir
11dd0     3D A9 02 F6 | 	mov	local02, result1
11dd4     10 CE 05 F1 | 	add	fp, #16
11dd8     E7 3E 68 FC | 	wrlong	#31, fp
11ddc     08 CE 85 F1 | 	sub	fp, #8
11de0     E7 A8 62 FC | 	wrlong	local02, fp
11de4     E7 92 02 F6 | 	mov	arg01, fp
11de8     08 CE 85 F1 | 	sub	fp, #8
11dec     10 B9 BF FD | 	call	#_push
11df0                 | LR__1492
11df0     E7 F0 03 F6 | 	mov	ptra, fp
11df4     F2 00 A0 FD | 	call	#popregs_
11df8                 | _do_findfirst_ret
11df8     2D 00 64 FD | 	ret
11dfc                 | 
11dfc                 | ' 
11dfc                 | ' '-------------------- findnext
11dfc                 | ' 
11dfc                 | ' sub do_findnext
11dfc                 | _do_findnext
11dfc     00 CA 05 F6 | 	mov	COUNT_, #0
11e00     E8 00 A0 FD | 	call	#pushregs_
11e04     10 F0 07 F1 | 	add	ptra, #16
11e08                 | ' 
11e08                 | ' if compiledline(lineptr_e).result.uresult>0 then print "findnext: "; : printerror(39) : return    
11e08     4C 00 00 FF 
11e0c     00 64 06 F1 | 	add	objptr, ##38912
11e10     32 97 02 FB | 	rdlong	arg03, objptr
11e14     4B 95 02 F6 | 	mov	arg02, arg03
11e18     01 94 66 F0 | 	shl	arg02, #1
11e1c     4B 95 02 F1 | 	add	arg02, arg03
11e20     02 94 66 F0 | 	shl	arg02, #2
11e24     03 00 00 FF 
11e28     04 64 86 F1 | 	sub	objptr, ##1540
11e2c     32 95 02 F1 | 	add	arg02, objptr
11e30     4A 7B 02 FB | 	rdlong	result1, arg02
11e34     01 7A 16 F2 | 	cmp	result1, #1 wc
11e38     48 00 00 FF 
11e3c     FC 65 86 F1 | 	sub	objptr, ##37372
11e40     40 00 90 CD |  if_b	jmp	#LR__1500
11e44     00 92 06 F6 | 	mov	arg01, #0
11e48     40 84 B1 FD | 	call	#__system___getiolock_0622
11e4c     3D 93 02 F6 | 	mov	arg01, result1
11e50     B4 2E B1 FD | 	call	#__system___lockmem
11e54     99 01 00 FF 
11e58     69 94 06 F6 | 	mov	arg02, ##@LR__6025
11e5c     00 92 06 F6 | 	mov	arg01, #0
11e60     00 96 06 F6 | 	mov	arg03, #0
11e64     94 3B B1 FD | 	call	#__system___basic_print_string
11e68     00 92 06 F6 | 	mov	arg01, #0
11e6c     1C 84 B1 FD | 	call	#__system___getiolock_0622
11e70     3D 01 68 FC | 	wrlong	#0, result1
11e74     27 92 06 F6 | 	mov	arg01, #39
11e78     00 94 06 F6 | 	mov	arg02, #0
11e7c     B8 F1 B0 FD | 	call	#_printerror
11e80     28 00 90 FD | 	jmp	#LR__1501
11e84                 | LR__1500
11e84     00 92 06 F6 | 	mov	arg01, #0
11e88     00 94 06 F6 | 	mov	arg02, #0
11e8c     B4 85 B1 FD | 	call	#__system___basic_dir
11e90     3D 97 02 F6 | 	mov	arg03, result1
11e94     08 CE 05 F1 | 	add	fp, #8
11e98     E7 3E 68 FC | 	wrlong	#31, fp
11e9c     08 CE 85 F1 | 	sub	fp, #8
11ea0     E7 96 62 FC | 	wrlong	arg03, fp
11ea4     E7 92 02 F6 | 	mov	arg01, fp
11ea8     54 B8 BF FD | 	call	#_push
11eac                 | LR__1501
11eac     E7 F0 03 F6 | 	mov	ptra, fp
11eb0     F2 00 A0 FD | 	call	#popregs_
11eb4                 | _do_findnext_ret
11eb4     2D 00 64 FD | 	ret
11eb8                 | 
11eb8                 | ' 
11eb8                 | ' '-------------------- font
11eb8                 | ' 
11eb8                 | ' sub do_font
11eb8                 | _do_font
11eb8     03 CA 05 F6 | 	mov	COUNT_, #3
11ebc     E8 00 A0 FD | 	call	#pushregs_
11ec0     AC B7 BF FD | 	call	#_pop
11ec4     3D A7 02 F6 | 	mov	local01, result1
11ec8     3E A9 02 F6 | 	mov	local02, result2
11ecc     3F AB 02 F6 | 	mov	local03, result3
11ed0                 | ' 
11ed0                 | ' t1=pop() 
11ed0                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
11ed0     1E AA 0E F2 | 	cmp	local03, #30 wz
11ed4     10 00 90 5D |  if_ne	jmp	#LR__1510
11ed8     53 93 02 F6 | 	mov	arg01, local01
11edc     00 94 06 F6 | 	mov	arg02, #0
11ee0     BC 59 B1 FD | 	call	#__system___float_tointeger
11ee4     3D A7 02 F6 | 	mov	local01, result1
11ee8                 | LR__1510
11ee8                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
11ee8     1F AA 0E F2 | 	cmp	local03, #31 wz
11eec     18 00 90 5D |  if_ne	jmp	#LR__1511
11ef0     53 93 02 F6 | 	mov	arg01, local01
11ef4     FC 5C B1 FD | 	call	#__system____builtin_atof
11ef8     3D 93 02 F6 | 	mov	arg01, result1
11efc     00 94 06 F6 | 	mov	arg02, #0
11f00     9C 59 B1 FD | 	call	#__system___float_tointeger
11f04     3D A7 02 F6 | 	mov	local01, result1
11f08                 | LR__1511
11f08     38 00 00 FF 
11f0c     C0 65 06 F1 | 	add	objptr, ##29120
11f10     32 A7 62 FC | 	wrlong	local01, objptr
11f14     38 00 00 FF 
11f18     C0 65 86 F1 | 	sub	objptr, ##29120
11f1c     02 A6 66 F0 | 	shl	local01, #2
11f20     53 93 02 F6 | 	mov	arg01, local01
11f24     F0 0C B1 FD | 	call	#_hg010b_spin2_setfontfamily
11f28     E7 F0 03 F6 | 	mov	ptra, fp
11f2c     F2 00 A0 FD | 	call	#popregs_
11f30                 | _do_font_ret
11f30     2D 00 64 FD | 	ret
11f34                 | 
11f34                 | ' 
11f34                 | ' '-------------------- for
11f34                 | ' 
11f34                 | ' sub do_for()
11f34                 | _do_for
11f34     01 CA 05 F6 | 	mov	COUNT_, #1
11f38     E8 00 A0 FD | 	call	#pushregs_
11f3c     10 F0 07 F1 | 	add	ptra, #16
11f40     52 00 00 FF 
11f44     B0 64 06 F1 | 	add	objptr, ##42160
11f48     32 93 02 FB | 	rdlong	arg01, objptr
11f4c     01 92 06 F1 | 	add	arg01, #1
11f50     32 93 62 FC | 	wrlong	arg01, objptr
11f54     52 00 00 FF 
11f58     B0 64 86 F1 | 	sub	objptr, ##42160
11f5c     10 B7 BF FD | 	call	#_pop
11f60     E7 7A 62 FC | 	wrlong	result1, fp
11f64     04 CE 05 F1 | 	add	fp, #4
11f68     E7 7C 62 FC | 	wrlong	result2, fp
11f6c     04 CE 05 F1 | 	add	fp, #4
11f70     E7 7E 62 FC | 	wrlong	result3, fp
11f74     08 CE 85 F1 | 	sub	fp, #8
11f78     52 00 00 FF 
11f7c     B0 64 06 F1 | 	add	objptr, ##42160
11f80     32 93 02 FB | 	rdlong	arg01, objptr
11f84     49 A7 02 F6 | 	mov	local01, arg01
11f88     02 A6 66 F0 | 	shl	local01, #2
11f8c     49 A7 02 F1 | 	add	local01, arg01
11f90     02 A6 66 F0 | 	shl	local01, #2
11f94     06 00 00 FF 
11f98     98 64 86 F1 | 	sub	objptr, ##3224
11f9c     32 A7 02 F1 | 	add	local01, objptr
11fa0     E7 92 02 FB | 	rdlong	arg01, fp
11fa4     08 A6 06 F1 | 	add	local01, #8
11fa8     53 93 62 FC | 	wrlong	arg01, local01
11fac     4C 00 00 FF 
11fb0     18 64 86 F1 | 	sub	objptr, ##38936
11fb4     B8 B6 BF FD | 	call	#_pop
11fb8     E7 7A 62 FC | 	wrlong	result1, fp
11fbc     04 CE 05 F1 | 	add	fp, #4
11fc0     E7 7C 62 FC | 	wrlong	result2, fp
11fc4     04 CE 05 F1 | 	add	fp, #4
11fc8     E7 7E 62 FC | 	wrlong	result3, fp
11fcc     08 CE 85 F1 | 	sub	fp, #8
11fd0     52 00 00 FF 
11fd4     B0 64 06 F1 | 	add	objptr, ##42160
11fd8     32 93 02 FB | 	rdlong	arg01, objptr
11fdc     49 A7 02 F6 | 	mov	local01, arg01
11fe0     02 A6 66 F0 | 	shl	local01, #2
11fe4     49 A7 02 F1 | 	add	local01, arg01
11fe8     02 A6 66 F0 | 	shl	local01, #2
11fec     06 00 00 FF 
11ff0     98 64 86 F1 | 	sub	objptr, ##3224
11ff4     32 A7 02 F1 | 	add	local01, objptr
11ff8     E7 92 02 F6 | 	mov	arg01, fp
11ffc     4C 00 00 FF 
12000     18 64 86 F1 | 	sub	objptr, ##38936
12004     44 B8 BF FD | 	call	#_converttoint
12008     3D 93 02 F6 | 	mov	arg01, result1
1200c     0C A6 06 F1 | 	add	local01, #12
12010     53 93 62 FC | 	wrlong	arg01, local01
12014     58 B6 BF FD | 	call	#_pop
12018     E7 7A 62 FC | 	wrlong	result1, fp
1201c     04 CE 05 F1 | 	add	fp, #4
12020     E7 7C 62 FC | 	wrlong	result2, fp
12024     04 CE 05 F1 | 	add	fp, #4
12028     E7 7E 62 FC | 	wrlong	result3, fp
1202c     08 CE 85 F1 | 	sub	fp, #8
12030     52 00 00 FF 
12034     B0 64 06 F1 | 	add	objptr, ##42160
12038     32 93 02 FB | 	rdlong	arg01, objptr
1203c     49 A7 02 F6 | 	mov	local01, arg01
12040     02 A6 66 F0 | 	shl	local01, #2
12044     49 A7 02 F1 | 	add	local01, arg01
12048     02 A6 66 F0 | 	shl	local01, #2
1204c     06 00 00 FF 
12050     98 64 86 F1 | 	sub	objptr, ##3224
12054     32 A7 02 F1 | 	add	local01, objptr
12058     E7 92 02 F6 | 	mov	arg01, fp
1205c     4C 00 00 FF 
12060     18 64 86 F1 | 	sub	objptr, ##38936
12064     E4 B7 BF FD | 	call	#_converttoint
12068     10 A6 06 F1 | 	add	local01, #16
1206c     53 7B 62 FC | 	wrlong	result1, local01
12070                 | ' fortop+=1
12070                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
12070                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
12070                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
12070                 | ' if compiledline(lineptr_e).result_type=token_end then	' end of line after for, set the pointer to the start of the next line
12070     4C 00 00 FF 
12074     00 64 06 F1 | 	add	objptr, ##38912
12078     32 93 02 FB | 	rdlong	arg01, objptr
1207c     49 A7 02 F6 | 	mov	local01, arg01
12080     01 A6 66 F0 | 	shl	local01, #1
12084     49 A7 02 F1 | 	add	local01, arg01
12088     02 A6 66 F0 | 	shl	local01, #2
1208c     03 00 00 FF 
12090     04 64 86 F1 | 	sub	objptr, ##1540
12094     32 A7 02 F1 | 	add	local01, objptr
12098     08 A6 06 F1 | 	add	local01, #8
1209c     53 A7 02 FB | 	rdlong	local01, local01
120a0     FE A7 0E F2 | 	cmp	local01, #510 wz
120a4     48 00 00 FF 
120a8     FC 65 86 F1 | 	sub	objptr, ##37372
120ac     70 00 90 5D |  if_ne	jmp	#LR__1520
120b0     52 00 00 FF 
120b4     B0 64 06 F1 | 	add	objptr, ##42160
120b8     32 93 02 FB | 	rdlong	arg01, objptr
120bc     49 A7 02 F6 | 	mov	local01, arg01
120c0     02 A6 66 F0 | 	shl	local01, #2
120c4     49 A7 02 F1 | 	add	local01, arg01
120c8     02 A6 66 F0 | 	shl	local01, #2
120cc     06 00 00 FF 
120d0     98 64 86 F1 | 	sub	objptr, ##3224
120d4     32 A7 02 F1 | 	add	local01, objptr
120d8     06 00 00 FF 
120dc     20 64 06 F1 | 	add	objptr, ##3104
120e0     32 93 02 FB | 	rdlong	arg01, objptr
120e4     53 93 62 FC | 	wrlong	arg01, local01
120e8     78 64 06 F1 | 	add	objptr, #120
120ec     32 93 02 FB | 	rdlong	arg01, objptr
120f0     49 A7 02 F6 | 	mov	local01, arg01
120f4     02 A6 66 F0 | 	shl	local01, #2
120f8     49 A7 02 F1 | 	add	local01, arg01
120fc     02 A6 66 F0 | 	shl	local01, #2
12100     06 00 00 FF 
12104     98 64 86 F1 | 	sub	objptr, ##3224
12108     32 A7 02 F1 | 	add	local01, objptr
1210c     04 A6 06 F1 | 	add	local01, #4
12110     53 01 68 FC | 	wrlong	#0, local01
12114     4C 00 00 FF 
12118     18 64 86 F1 | 	sub	objptr, ##38936
1211c     78 00 90 FD | 	jmp	#LR__1521
12120                 | LR__1520
12120     52 00 00 FF 
12124     B0 64 06 F1 | 	add	objptr, ##42160
12128     32 93 02 FB | 	rdlong	arg01, objptr
1212c     49 A7 02 F6 | 	mov	local01, arg01
12130     02 A6 66 F0 | 	shl	local01, #2
12134     49 A7 02 F1 | 	add	local01, arg01
12138     02 A6 66 F0 | 	shl	local01, #2
1213c     06 00 00 FF 
12140     98 64 86 F1 | 	sub	objptr, ##3224
12144     32 A7 02 F1 | 	add	local01, objptr
12148     06 00 00 FF 
1214c     28 64 06 F1 | 	add	objptr, ##3112
12150     32 93 02 FB | 	rdlong	arg01, objptr
12154     53 93 62 FC | 	wrlong	arg01, local01
12158     70 64 06 F1 | 	add	objptr, #112
1215c     32 93 02 FB | 	rdlong	arg01, objptr
12160     49 A7 02 F6 | 	mov	local01, arg01
12164     02 A6 66 F0 | 	shl	local01, #2
12168     49 A7 02 F1 | 	add	local01, arg01
1216c     02 A6 66 F0 | 	shl	local01, #2
12170     06 00 00 FF 
12174     98 64 86 F1 | 	sub	objptr, ##3224
12178     32 A7 02 F1 | 	add	local01, objptr
1217c     18 64 86 F1 | 	sub	objptr, #24
12180     32 93 02 FB | 	rdlong	arg01, objptr
12184     4C 00 00 FF 
12188     00 64 86 F1 | 	sub	objptr, ##38912
1218c     01 92 06 F1 | 	add	arg01, #1
12190     04 A6 06 F1 | 	add	local01, #4
12194     53 93 62 FC | 	wrlong	arg01, local01
12198                 | LR__1521
12198     E7 F0 03 F6 | 	mov	ptra, fp
1219c     F2 00 A0 FD | 	call	#popregs_
121a0                 | _do_for_ret
121a0     2D 00 64 FD | 	ret
121a4                 | 
121a4                 | ' 
121a4                 | ' '-------------------- frame
121a4                 | ' 
121a4                 | ' sub do_frame
121a4                 | _do_frame
121a4     03 CA 05 F6 | 	mov	COUNT_, #3
121a8     E8 00 A0 FD | 	call	#pushregs_
121ac     30 F0 07 F1 | 	add	ptra, #48
121b0     BC B4 BF FD | 	call	#_pop
121b4     3D 97 02 F6 | 	mov	arg03, result1
121b8     3E 95 02 F6 | 	mov	arg02, result2
121bc     3F 9B 02 F6 | 	mov	arg05, result3
121c0     24 CE 05 F1 | 	add	fp, #36
121c4     E7 96 62 FC | 	wrlong	arg03, fp
121c8     04 CE 05 F1 | 	add	fp, #4
121cc     E7 94 62 FC | 	wrlong	arg02, fp
121d0     04 CE 05 F1 | 	add	fp, #4
121d4     E7 9A 62 FC | 	wrlong	arg05, fp
121d8     2C CE 85 F1 | 	sub	fp, #44
121dc     90 B4 BF FD | 	call	#_pop
121e0     3D 97 02 F6 | 	mov	arg03, result1
121e4     3E 95 02 F6 | 	mov	arg02, result2
121e8     3F 9B 02 F6 | 	mov	arg05, result3
121ec     18 CE 05 F1 | 	add	fp, #24
121f0     E7 96 62 FC | 	wrlong	arg03, fp
121f4     04 CE 05 F1 | 	add	fp, #4
121f8     E7 94 62 FC | 	wrlong	arg02, fp
121fc     04 CE 05 F1 | 	add	fp, #4
12200     E7 9A 62 FC | 	wrlong	arg05, fp
12204     20 CE 85 F1 | 	sub	fp, #32
12208     64 B4 BF FD | 	call	#_pop
1220c     3D 97 02 F6 | 	mov	arg03, result1
12210     3E 95 02 F6 | 	mov	arg02, result2
12214     3F 9B 02 F6 | 	mov	arg05, result3
12218     0C CE 05 F1 | 	add	fp, #12
1221c     E7 96 62 FC | 	wrlong	arg03, fp
12220     04 CE 05 F1 | 	add	fp, #4
12224     E7 94 62 FC | 	wrlong	arg02, fp
12228     04 CE 05 F1 | 	add	fp, #4
1222c     E7 9A 62 FC | 	wrlong	arg05, fp
12230     14 CE 85 F1 | 	sub	fp, #20
12234     38 B4 BF FD | 	call	#_pop
12238     3F 97 02 F6 | 	mov	arg03, result3
1223c     E7 7A 62 FC | 	wrlong	result1, fp
12240     04 CE 05 F1 | 	add	fp, #4
12244     E7 7C 62 FC | 	wrlong	result2, fp
12248     04 CE 05 F1 | 	add	fp, #4
1224c     E7 96 62 FC | 	wrlong	arg03, fp
12250     08 CE 85 F1 | 	sub	fp, #8
12254     E7 92 02 F6 | 	mov	arg01, fp
12258     F0 B5 BF FD | 	call	#_converttoint
1225c     3D A7 02 F6 | 	mov	local01, result1
12260     E7 92 02 F6 | 	mov	arg01, fp
12264     0C 92 06 F1 | 	add	arg01, #12
12268     E0 B5 BF FD | 	call	#_converttoint
1226c     3D A9 02 F6 | 	mov	local02, result1
12270     E7 92 02 F6 | 	mov	arg01, fp
12274     18 92 06 F1 | 	add	arg01, #24
12278     D0 B5 BF FD | 	call	#_converttoint
1227c     3D AB 02 F6 | 	mov	local03, result1
12280     E7 92 02 F6 | 	mov	arg01, fp
12284     24 92 06 F1 | 	add	arg01, #36
12288     C0 B5 BF FD | 	call	#_converttoint
1228c     3D 99 02 F6 | 	mov	arg04, result1
12290     38 00 00 FF 
12294     A8 65 06 F1 | 	add	objptr, ##29096
12298     32 9B 02 FB | 	rdlong	arg05, objptr
1229c     38 00 00 FF 
122a0     A8 65 86 F1 | 	sub	objptr, ##29096
122a4     53 93 02 F6 | 	mov	arg01, local01
122a8     54 95 02 F6 | 	mov	arg02, local02
122ac     55 97 02 F6 | 	mov	arg03, local03
122b0     70 07 B1 FD | 	call	#_hg010b_spin2_frame
122b4     E7 F0 03 F6 | 	mov	ptra, fp
122b8     F2 00 A0 FD | 	call	#popregs_
122bc                 | _do_frame_ret
122bc     2D 00 64 FD | 	ret
122c0                 | 
122c0                 | ' 
122c0                 | ' '-------------------- framebuf
122c0                 | ' 
122c0                 | ' sub do_framebuf
122c0                 | _do_framebuf
122c0     00 CA 05 F6 | 	mov	COUNT_, #0
122c4     E8 00 A0 FD | 	call	#pushregs_
122c8     0C F0 07 F1 | 	add	ptra, #12
122cc     08 CE 05 F1 | 	add	fp, #8
122d0     E7 3A 68 FC | 	wrlong	#29, fp
122d4     32 93 02 FB | 	rdlong	arg01, objptr
122d8     08 CE 85 F1 | 	sub	fp, #8
122dc     E7 92 62 FC | 	wrlong	arg01, fp
122e0     E7 92 02 F6 | 	mov	arg01, fp
122e4     18 B4 BF FD | 	call	#_push
122e8     E7 F0 03 F6 | 	mov	ptra, fp
122ec     F2 00 A0 FD | 	call	#popregs_
122f0                 | _do_framebuf_ret
122f0     2D 00 64 FD | 	ret
122f4                 | 
122f4                 | ' '-------------------- fre
122f4                 | ' 
122f4                 | ' sub do_fre
122f4                 | _do_fre
122f4     01 CA 05 F6 | 	mov	COUNT_, #1
122f8     E8 00 A0 FD | 	call	#pushregs_
122fc     0C F0 07 F1 | 	add	ptra, #12
12300     54 00 00 FF 
12304     50 64 06 F1 | 	add	objptr, ##43088
12308     32 93 02 FB | 	rdlong	arg01, objptr
1230c     0F 00 00 FF 
12310     74 64 86 F1 | 	sub	objptr, ##7796
12314     32 A7 02 FB | 	rdlong	local01, objptr
12318     53 93 82 F1 | 	sub	arg01, local01
1231c     0F 00 00 FF 
12320     EC 64 06 F1 | 	add	objptr, ##7916
12324     32 93 62 FC | 	wrlong	arg01, objptr
12328     08 CE 05 F1 | 	add	fp, #8
1232c     E7 3A 68 FC | 	wrlong	#29, fp
12330     08 CE 85 F1 | 	sub	fp, #8
12334     32 A7 02 FB | 	rdlong	local01, objptr
12338     54 00 00 FF 
1233c     C8 64 86 F1 | 	sub	objptr, ##43208
12340     E7 A6 62 FC | 	wrlong	local01, fp
12344     E7 92 02 F6 | 	mov	arg01, fp
12348     B4 B3 BF FD | 	call	#_push
1234c     E7 F0 03 F6 | 	mov	ptra, fp
12350     F2 00 A0 FD | 	call	#popregs_
12354                 | _do_fre_ret
12354     2D 00 64 FD | 	ret
12358                 | 
12358                 | ' 
12358                 | ' '-------------------- get
12358                 | ' 
12358                 | ' sub do_get		' get  #chn,addr,(amount,(pos))
12358                 | _do_get
12358     10 CA 05 F6 | 	mov	COUNT_, #16
1235c     E8 00 A0 FD | 	call	#pushregs_
12360     40 F0 07 F1 | 	add	ptra, #64
12364     4C 00 00 FF 
12368     00 64 06 F1 | 	add	objptr, ##38912
1236c     32 9B 02 FB | 	rdlong	arg05, objptr
12370     4D A7 02 F6 | 	mov	local01, arg05
12374     01 A6 66 F0 | 	shl	local01, #1
12378     4D A7 02 F1 | 	add	local01, arg05
1237c     02 A6 66 F0 | 	shl	local01, #2
12380     03 00 00 FF 
12384     04 64 86 F1 | 	sub	objptr, ##1540
12388     32 A9 02 F6 | 	mov	local02, objptr
1238c     32 A7 02 F1 | 	add	local01, objptr
12390     53 AB 02 FB | 	rdlong	local03, local01
12394                 | ' 
12394                 | ' numpar=compiledline(lineptr_e).result.uresult
12394                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
12394     04 AA 0E F2 | 	cmp	local03, #4 wz
12398     48 00 00 FF 
1239c     FC 65 86 F1 | 	sub	objptr, ##37372
123a0     48 00 90 5D |  if_ne	jmp	#LR__1530
123a4     C8 B2 BF FD | 	call	#_pop
123a8     3F 9B 02 F6 | 	mov	arg05, result3
123ac     1C CE 05 F1 | 	add	fp, #28
123b0     E7 7A 62 FC | 	wrlong	result1, fp
123b4     04 CE 05 F1 | 	add	fp, #4
123b8     E7 7C 62 FC | 	wrlong	result2, fp
123bc     04 CE 05 F1 | 	add	fp, #4
123c0     E7 9A 62 FC | 	wrlong	arg05, fp
123c4     08 CE 85 F1 | 	sub	fp, #8
123c8     E7 92 02 F6 | 	mov	arg01, fp
123cc     1C CE 85 F1 | 	sub	fp, #28
123d0     78 B4 BF FD | 	call	#_converttoint
123d4     54 00 00 FF 
123d8     C4 64 06 F1 | 	add	objptr, ##43204
123dc     32 7B 62 FC | 	wrlong	result1, objptr
123e0     54 00 00 FF 
123e4     C4 64 86 F1 | 	sub	objptr, ##43204
123e8     18 00 90 FD | 	jmp	#LR__1531
123ec                 | LR__1530
123ec     54 00 00 FF 
123f0     C4 64 06 F1 | 	add	objptr, ##43204
123f4     FF FF FF FF 
123f8     32 FF 6B FC | 	wrlong	##-1, objptr
123fc     54 00 00 FF 
12400     C4 64 86 F1 | 	sub	objptr, ##43204
12404                 | LR__1531
12404                 | ' if numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
12404     03 AA 56 F2 | 	cmps	local03, #3 wc
12408     38 00 90 CD |  if_b	jmp	#LR__1532
1240c     60 B2 BF FD | 	call	#_pop
12410     3F A7 02 F6 | 	mov	local01, result3
12414     1C CE 05 F1 | 	add	fp, #28
12418     E7 7A 62 FC | 	wrlong	result1, fp
1241c     04 CE 05 F1 | 	add	fp, #4
12420     E7 7C 62 FC | 	wrlong	result2, fp
12424     04 CE 05 F1 | 	add	fp, #4
12428     E7 A6 62 FC | 	wrlong	local01, fp
1242c     08 CE 85 F1 | 	sub	fp, #8
12430     E7 92 02 F6 | 	mov	arg01, fp
12434     1C CE 85 F1 | 	sub	fp, #28
12438     10 B4 BF FD | 	call	#_converttoint
1243c     3D AD 02 F6 | 	mov	local04, result1
12440     04 00 90 FD | 	jmp	#LR__1533
12444                 | LR__1532
12444     01 AC 06 F6 | 	mov	local04, #1
12448                 | LR__1533
12448                 | ' if numpar>=2  then t1=pop() : adr=converttoint(t1)
12448     02 AA 56 F2 | 	cmps	local03, #2 wc
1244c     34 00 90 CD |  if_b	jmp	#LR__1534
12450     1C B2 BF FD | 	call	#_pop
12454     3F A9 02 F6 | 	mov	local02, result3
12458     1C CE 05 F1 | 	add	fp, #28
1245c     E7 7A 62 FC | 	wrlong	result1, fp
12460     04 CE 05 F1 | 	add	fp, #4
12464     E7 7C 62 FC | 	wrlong	result2, fp
12468     04 CE 05 F1 | 	add	fp, #4
1246c     E7 A8 62 FC | 	wrlong	local02, fp
12470     08 CE 85 F1 | 	sub	fp, #8
12474     E7 92 02 F6 | 	mov	arg01, fp
12478     1C CE 85 F1 | 	sub	fp, #28
1247c     CC B3 BF FD | 	call	#_converttoint
12480     3D AF 02 F6 | 	mov	local05, result1
12484                 | LR__1534
12484     E8 B1 BF FD | 	call	#_pop
12488     3F 9B 02 F6 | 	mov	arg05, result3
1248c     1C CE 05 F1 | 	add	fp, #28
12490     E7 7A 62 FC | 	wrlong	result1, fp
12494     04 CE 05 F1 | 	add	fp, #4
12498     E7 7C 62 FC | 	wrlong	result2, fp
1249c     04 CE 05 F1 | 	add	fp, #4
124a0     E7 9A 62 FC | 	wrlong	arg05, fp
124a4     08 CE 85 F1 | 	sub	fp, #8
124a8     E7 92 02 F6 | 	mov	arg01, fp
124ac     1C CE 85 F1 | 	sub	fp, #28
124b0     98 B3 BF FD | 	call	#_converttoint
124b4     3D B1 02 F6 | 	mov	local06, result1
124b8     02 B2 66 F0 | 	shl	local07, #2
124bc     52 00 00 FF 
124c0     44 64 06 F1 | 	add	objptr, ##42052
124c4     32 B3 02 F1 | 	add	local07, objptr
124c8     59 01 68 FC | 	wrlong	#0, local07
124cc                 | ' t1=pop() : channel=converttoint(t1)
124cc                 | ' getres(j)=0
124cc                 | ' if pos>=0 then
124cc     02 00 00 FF 
124d0     80 64 06 F1 | 	add	objptr, ##1152
124d4     32 B5 02 FB | 	rdlong	local08, objptr
124d8     54 00 00 FF 
124dc     C4 64 86 F1 | 	sub	objptr, ##43204
124e0     00 B4 56 F2 | 	cmps	local08, #0 wc
124e4     28 01 90 CD |  if_b	jmp	#LR__1541
124e8                 | '   for i=0 to  amount/1024
124e8     00 B6 06 F6 | 	mov	local09, #0
124ec     56 B9 52 F6 | 	abs	local10, local04 wc
124f0     0A B8 46 F0 | 	shr	local10, #10
124f4     5C B9 82 F6 | 	negc	local10, local10
124f8     01 B8 06 F1 | 	add	local10, #1
124fc                 | LR__1535
124fc     5C B7 52 F2 | 	cmps	local09, local10 wc
12500     20 02 90 3D |  if_ae	jmp	#LR__1549
12504                 | '     get #channel,pos+1,block(0),amount,r
12504     54 00 00 FF 
12508     C4 64 06 F1 | 	add	objptr, ##43204
1250c     32 95 02 FB | 	rdlong	arg02, objptr
12510     01 94 06 F1 | 	add	arg02, #1
12514     04 00 00 FF 
12518     90 64 86 F1 | 	sub	objptr, ##2192
1251c     32 97 02 F6 | 	mov	arg03, objptr
12520     50 00 00 FF 
12524     34 64 86 F1 | 	sub	objptr, ##41012
12528     56 99 02 F6 | 	mov	arg04, local04
1252c     58 93 02 F6 | 	mov	arg01, local06
12530     01 9A 06 F6 | 	mov	arg05, #1
12534     4C 36 B1 FD | 	call	#__system___basic_get
12538     3D BB 02 F6 | 	mov	local11, result1
1253c                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
1253c     00 04 00 FF 
12540     00 AE 56 F2 | 	cmps	local05, ##524288 wc
12544     48 00 90 3D |  if_ae	jmp	#LR__1537
12548     00 B2 06 F6 | 	mov	local07, #0
1254c     5D BD 02 F6 | 	mov	local12, local11
12550                 | LR__1536
12550     5E B3 52 F2 | 	cmps	local07, local12 wc
12554     80 00 90 3D |  if_ae	jmp	#LR__1540
12558     57 93 02 F6 | 	mov	arg01, local05
1255c     5B B5 02 F6 | 	mov	local08, local09
12560     0A B4 66 F0 | 	shl	local08, #10
12564     5A 93 02 F1 | 	add	arg01, local08
12568     59 93 02 F1 | 	add	arg01, local07
1256c     59 A9 02 F6 | 	mov	local02, local07
12570     32 B5 02 F6 | 	mov	local08, objptr
12574     50 00 00 FF 
12578     34 B4 06 F1 | 	add	local08, ##41012
1257c     5A A9 02 F1 | 	add	local02, local08
12580     54 95 C2 FA | 	rdbyte	arg02, local02
12584     49 95 42 FC | 	wrbyte	arg02, arg01
12588     01 B2 06 F1 | 	add	local07, #1
1258c     C0 FF 9F FD | 	jmp	#LR__1536
12590                 | LR__1537
12590     00 B2 06 F6 | 	mov	local07, #0
12594     5D BF 02 F6 | 	mov	local13, local11
12598                 | LR__1538
12598     5F B3 52 F2 | 	cmps	local07, local13 wc
1259c     38 00 90 3D |  if_ae	jmp	#LR__1539
125a0     57 93 02 F6 | 	mov	arg01, local05
125a4     5B BD 02 F6 | 	mov	local12, local09
125a8     0A BC 66 F0 | 	shl	local12, #10
125ac     5E 93 02 F1 | 	add	arg01, local12
125b0     59 93 02 F1 | 	add	arg01, local07
125b4     59 A9 02 F6 | 	mov	local02, local07
125b8     32 BD 02 F6 | 	mov	local12, objptr
125bc     50 00 00 FF 
125c0     34 BC 06 F1 | 	add	local12, ##41012
125c4     5E A9 02 F1 | 	add	local02, local12
125c8     54 95 C2 FA | 	rdbyte	arg02, local02
125cc     94 EC B0 FD | 	call	#_pspoke
125d0     01 B2 06 F1 | 	add	local07, #1
125d4     C0 FF 9F FD | 	jmp	#LR__1538
125d8                 | LR__1539
125d8                 | LR__1540
125d8     59 BF 02 F6 | 	mov	local13, local07
125dc     02 BE 66 F0 | 	shl	local13, #2
125e0     52 00 00 FF 
125e4     44 64 06 F1 | 	add	objptr, ##42052
125e8     32 BF 02 F1 | 	add	local13, objptr
125ec     02 B2 66 F0 | 	shl	local07, #2
125f0     32 B3 02 F1 | 	add	local07, objptr
125f4     59 A7 02 FB | 	rdlong	local01, local07
125f8     5D A7 02 F1 | 	add	local01, local11
125fc     5F A7 62 FC | 	wrlong	local01, local13
12600     01 B6 06 F1 | 	add	local09, #1
12604     52 00 00 FF 
12608     44 64 86 F1 | 	sub	objptr, ##42052
1260c     EC FE 9F FD | 	jmp	#LR__1535
12610                 | LR__1541
12610                 | '   for i=0 to  amount/1024
12610     00 B6 06 F6 | 	mov	local09, #0
12614     56 C1 52 F6 | 	abs	local14, local04 wc
12618     0A C0 46 F0 | 	shr	local14, #10
1261c     60 C1 82 F6 | 	negc	local14, local14
12620     01 C0 06 F1 | 	add	local14, #1
12624                 | LR__1542
12624     60 B7 52 F2 | 	cmps	local09, local14 wc
12628     F8 00 90 3D |  if_ae	jmp	#LR__1548
1262c                 | '     get #channel,,block(0),amount,r
1262c     32 97 02 F6 | 	mov	arg03, objptr
12630     50 00 00 FF 
12634     34 96 06 F1 | 	add	arg03, ##41012
12638     56 99 02 F6 | 	mov	arg04, local04
1263c     58 93 02 F6 | 	mov	arg01, local06
12640     00 94 06 F6 | 	mov	arg02, #0
12644     01 9A 06 F6 | 	mov	arg05, #1
12648     38 35 B1 FD | 	call	#__system___basic_get
1264c     3D BB 02 F6 | 	mov	local11, result1
12650                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
12650     00 04 00 FF 
12654     00 AE 56 F2 | 	cmps	local05, ##524288 wc
12658     48 00 90 3D |  if_ae	jmp	#LR__1544
1265c     00 B2 06 F6 | 	mov	local07, #0
12660     5D C3 02 F6 | 	mov	local15, local11
12664                 | LR__1543
12664     61 B3 52 F2 | 	cmps	local07, local15 wc
12668     80 00 90 3D |  if_ae	jmp	#LR__1547
1266c     57 93 02 F6 | 	mov	arg01, local05
12670     5B BF 02 F6 | 	mov	local13, local09
12674     0A BE 66 F0 | 	shl	local13, #10
12678     5F 93 02 F1 | 	add	arg01, local13
1267c     59 93 02 F1 | 	add	arg01, local07
12680     59 A9 02 F6 | 	mov	local02, local07
12684     32 BF 02 F6 | 	mov	local13, objptr
12688     50 00 00 FF 
1268c     34 BE 06 F1 | 	add	local13, ##41012
12690     5F A9 02 F1 | 	add	local02, local13
12694     54 95 C2 FA | 	rdbyte	arg02, local02
12698     49 95 42 FC | 	wrbyte	arg02, arg01
1269c     01 B2 06 F1 | 	add	local07, #1
126a0     C0 FF 9F FD | 	jmp	#LR__1543
126a4                 | LR__1544
126a4     00 B2 06 F6 | 	mov	local07, #0
126a8     5D C5 02 F6 | 	mov	local16, local11
126ac                 | LR__1545
126ac     62 B3 52 F2 | 	cmps	local07, local16 wc
126b0     38 00 90 3D |  if_ae	jmp	#LR__1546
126b4     57 93 02 F6 | 	mov	arg01, local05
126b8     5B C3 02 F6 | 	mov	local15, local09
126bc     0A C2 66 F0 | 	shl	local15, #10
126c0     61 93 02 F1 | 	add	arg01, local15
126c4     59 93 02 F1 | 	add	arg01, local07
126c8     59 A9 02 F6 | 	mov	local02, local07
126cc     32 C3 02 F6 | 	mov	local15, objptr
126d0     50 00 00 FF 
126d4     34 C2 06 F1 | 	add	local15, ##41012
126d8     61 A9 02 F1 | 	add	local02, local15
126dc     54 95 C2 FA | 	rdbyte	arg02, local02
126e0     80 EB B0 FD | 	call	#_pspoke
126e4     01 B2 06 F1 | 	add	local07, #1
126e8     C0 FF 9F FD | 	jmp	#LR__1545
126ec                 | LR__1546
126ec                 | LR__1547
126ec     59 C5 02 F6 | 	mov	local16, local07
126f0     02 C4 66 F0 | 	shl	local16, #2
126f4     52 00 00 FF 
126f8     44 64 06 F1 | 	add	objptr, ##42052
126fc     32 C5 02 F1 | 	add	local16, objptr
12700     02 B2 66 F0 | 	shl	local07, #2
12704     32 B3 02 F1 | 	add	local07, objptr
12708     59 A7 02 FB | 	rdlong	local01, local07
1270c     5D A7 02 F1 | 	add	local01, local11
12710     62 A7 62 FC | 	wrlong	local01, local16
12714     01 B6 06 F1 | 	add	local09, #1
12718     52 00 00 FF 
1271c     44 64 86 F1 | 	sub	objptr, ##42052
12720     00 FF 9F FD | 	jmp	#LR__1542
12724                 | LR__1548
12724                 | LR__1549
12724     E7 F0 03 F6 | 	mov	ptra, fp
12728     F2 00 A0 FD | 	call	#popregs_
1272c                 | _do_get_ret
1272c     2D 00 64 FD | 	ret
12730                 | 
12730                 | ' 
12730                 | ' '-------------------- getcolor
12730                 | ' 
12730                 | ' sub do_getcolor
12730                 | _do_getcolor
12730     00 CA 05 F6 | 	mov	COUNT_, #0
12734     E8 00 A0 FD | 	call	#pushregs_
12738     10 F0 07 F1 | 	add	ptra, #16
1273c     4C 00 00 FF 
12740     00 64 06 F1 | 	add	objptr, ##38912
12744     32 97 02 FB | 	rdlong	arg03, objptr
12748     4B 95 02 F6 | 	mov	arg02, arg03
1274c     01 94 66 F0 | 	shl	arg02, #1
12750     4B 95 02 F1 | 	add	arg02, arg03
12754     02 94 66 F0 | 	shl	arg02, #2
12758     03 00 00 FF 
1275c     04 64 86 F1 | 	sub	objptr, ##1540
12760     32 95 02 F1 | 	add	arg02, objptr
12764     4A 97 02 FB | 	rdlong	arg03, arg02
12768                 | ' 
12768                 | ' numpar=compiledline(lineptr_e).result.uresult
12768                 | ' if numpar>1 orelse numpar=0 then print "getcolor "; : printerror(39) : return
12768     02 96 16 F2 | 	cmp	arg03, #2 wc
1276c     48 00 00 FF 
12770     FC 65 86 F1 | 	sub	objptr, ##37372
12774     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
12778     40 00 90 4D |  if_c_and_nz	jmp	#LR__1550
1277c     00 92 06 F6 | 	mov	arg01, #0
12780     08 7B B1 FD | 	call	#__system___getiolock_0622
12784     3D 93 02 F6 | 	mov	arg01, result1
12788     7C 25 B1 FD | 	call	#__system___lockmem
1278c     99 01 00 FF 
12790     74 94 06 F6 | 	mov	arg02, ##@LR__6026
12794     00 92 06 F6 | 	mov	arg01, #0
12798     00 96 06 F6 | 	mov	arg03, #0
1279c     5C 32 B1 FD | 	call	#__system___basic_print_string
127a0     00 92 06 F6 | 	mov	arg01, #0
127a4     E4 7A B1 FD | 	call	#__system___getiolock_0622
127a8     3D 01 68 FC | 	wrlong	#0, result1
127ac     27 92 06 F6 | 	mov	arg01, #39
127b0     00 94 06 F6 | 	mov	arg02, #0
127b4     80 E8 B0 FD | 	call	#_printerror
127b8     60 00 90 FD | 	jmp	#LR__1551
127bc                 | LR__1550
127bc     B0 AE BF FD | 	call	#_pop
127c0     E7 7A 62 FC | 	wrlong	result1, fp
127c4     04 CE 05 F1 | 	add	fp, #4
127c8     E7 7C 62 FC | 	wrlong	result2, fp
127cc     04 CE 05 F1 | 	add	fp, #4
127d0     E7 7E 62 FC | 	wrlong	result3, fp
127d4     08 CE 85 F1 | 	sub	fp, #8
127d8     E7 92 02 F6 | 	mov	arg01, fp
127dc     6C B0 BF FD | 	call	#_converttoint
127e0     3D 93 02 F6 | 	mov	arg01, result1
127e4                 | ' 
127e4                 | ' return long[palette_ptr+4*color]
127e4     1C 64 06 F1 | 	add	objptr, #28
127e8     32 7B 02 FB | 	rdlong	result1, objptr
127ec     1C 64 86 F1 | 	sub	objptr, #28
127f0     02 92 66 F0 | 	shl	arg01, #2
127f4     49 7B 02 F1 | 	add	result1, arg01
127f8     3D 7B 02 FB | 	rdlong	result1, result1
127fc     08 7A C6 F0 | 	sar	result1, #8
12800     F8 7A 06 F4 | 	bitl	result1, #248
12804     E7 7A 62 FC | 	wrlong	result1, fp
12808     08 CE 05 F1 | 	add	fp, #8
1280c     E7 3A 68 FC | 	wrlong	#29, fp
12810     08 CE 85 F1 | 	sub	fp, #8
12814     E7 92 02 F6 | 	mov	arg01, fp
12818     E4 AE BF FD | 	call	#_push
1281c                 | LR__1551
1281c     E7 F0 03 F6 | 	mov	ptra, fp
12820     F2 00 A0 FD | 	call	#popregs_
12824                 | _do_getcolor_ret
12824     2D 00 64 FD | 	ret
12828                 | 
12828                 | ' 
12828                 | ' '-------------------- getenvsustain
12828                 | ' 
12828                 | ' sub do_getenvsustain
12828                 | _do_getenvsustain
12828     00 CA 05 F6 | 	mov	COUNT_, #0
1282c     E8 00 A0 FD | 	call	#pushregs_
12830     10 F0 07 F1 | 	add	ptra, #16
12834     4C 00 00 FF 
12838     00 64 06 F1 | 	add	objptr, ##38912
1283c     32 97 02 FB | 	rdlong	arg03, objptr
12840     4B 95 02 F6 | 	mov	arg02, arg03
12844     01 94 66 F0 | 	shl	arg02, #1
12848     4B 95 02 F1 | 	add	arg02, arg03
1284c     02 94 66 F0 | 	shl	arg02, #2
12850     03 00 00 FF 
12854     04 64 86 F1 | 	sub	objptr, ##1540
12858     32 95 02 F1 | 	add	arg02, objptr
1285c     4A 97 02 FB | 	rdlong	arg03, arg02
12860                 | ' 
12860                 | ' numpar=compiledline(lineptr_e).result.uresult
12860                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
12860     02 96 16 F2 | 	cmp	arg03, #2 wc
12864     48 00 00 FF 
12868     FC 65 86 F1 | 	sub	objptr, ##37372
1286c     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
12870     40 00 90 4D |  if_c_and_nz	jmp	#LR__1560
12874     00 92 06 F6 | 	mov	arg01, #0
12878     10 7A B1 FD | 	call	#__system___getiolock_0622
1287c     3D 93 02 F6 | 	mov	arg01, result1
12880     84 24 B1 FD | 	call	#__system___lockmem
12884     99 01 00 FF 
12888     7E 94 06 F6 | 	mov	arg02, ##@LR__6027
1288c     00 92 06 F6 | 	mov	arg01, #0
12890     00 96 06 F6 | 	mov	arg03, #0
12894     64 31 B1 FD | 	call	#__system___basic_print_string
12898     00 92 06 F6 | 	mov	arg01, #0
1289c     EC 79 B1 FD | 	call	#__system___getiolock_0622
128a0     3D 01 68 FC | 	wrlong	#0, result1
128a4     27 92 06 F6 | 	mov	arg01, #39
128a8     00 94 06 F6 | 	mov	arg02, #0
128ac     88 E7 B0 FD | 	call	#_printerror
128b0     60 00 90 FD | 	jmp	#LR__1561
128b4                 | LR__1560
128b4     B8 AD BF FD | 	call	#_pop
128b8     3D 97 02 F6 | 	mov	arg03, result1
128bc     3E 95 02 F6 | 	mov	arg02, result2
128c0     E7 96 62 FC | 	wrlong	arg03, fp
128c4     04 CE 05 F1 | 	add	fp, #4
128c8     E7 94 62 FC | 	wrlong	arg02, fp
128cc     04 CE 05 F1 | 	add	fp, #4
128d0     E7 7E 62 FC | 	wrlong	result3, fp
128d4     08 CE 85 F1 | 	sub	fp, #8
128d8     E7 92 02 F6 | 	mov	arg01, fp
128dc     6C AF BF FD | 	call	#_converttoint
128e0     3D 97 02 F6 | 	mov	arg03, result1
128e4     01 96 66 F0 | 	shl	arg03, #1
128e8     32 95 02 F6 | 	mov	arg02, objptr
128ec     54 00 00 FF 
128f0     6C 94 06 F1 | 	add	arg02, ##43116
128f4     4A 97 02 F1 | 	add	arg03, arg02
128f8     4B 7F E2 FA | 	rdword	result3, arg03
128fc     E7 7E 62 FC | 	wrlong	result3, fp
12900     08 CE 05 F1 | 	add	fp, #8
12904     E7 38 68 FC | 	wrlong	#28, fp
12908     08 CE 85 F1 | 	sub	fp, #8
1290c     E7 92 02 F6 | 	mov	arg01, fp
12910     EC AD BF FD | 	call	#_push
12914                 | LR__1561
12914     E7 F0 03 F6 | 	mov	ptra, fp
12918     F2 00 A0 FD | 	call	#popregs_
1291c                 | _do_getenvsustain_ret
1291c     2D 00 64 FD | 	ret
12920                 | 
12920                 | ' 
12920                 | ' '-------------------- getnotevalue
12920                 | ' 
12920                 | ' sub do_getnotevalue
12920                 | _do_getnotevalue
12920     02 CA 05 F6 | 	mov	COUNT_, #2
12924     E8 00 A0 FD | 	call	#pushregs_
12928     1C F0 07 F1 | 	add	ptra, #28
1292c     40 AD BF FD | 	call	#_pop
12930     3F 95 02 F6 | 	mov	arg02, result3
12934     10 CE 05 F1 | 	add	fp, #16
12938     E7 7A 62 FC | 	wrlong	result1, fp
1293c     04 CE 05 F1 | 	add	fp, #4
12940     E7 7C 62 FC | 	wrlong	result2, fp
12944     04 CE 05 F1 | 	add	fp, #4
12948     E7 94 62 FC | 	wrlong	arg02, fp
1294c     08 CE 85 F1 | 	sub	fp, #8
12950     E7 92 02 F6 | 	mov	arg01, fp
12954     10 CE 85 F1 | 	sub	fp, #16
12958     F0 AE BF FD | 	call	#_converttoint
1295c     3D 93 52 F6 | 	abs	arg01, result1 wc
12960     0C 92 16 FD | 	qdiv	arg01, #12
12964     32 93 02 F6 | 	mov	arg01, objptr
12968     16 00 00 FF 
1296c     38 92 06 F1 | 	add	arg01, ##11320
12970     19 7C 62 FD | 	getqy	result2
12974     3E 7D 82 F6 | 	negc	result2, result2
12978     3D 7B 52 F6 | 	abs	result1, result1 wc
1297c     0C 7A 16 FD | 	qdiv	result1, #12
12980     02 7C 66 F0 | 	shl	result2, #2
12984     49 7D 02 F1 | 	add	result2, arg01
12988     3E A7 02 FB | 	rdlong	local01, result2
1298c     18 94 62 FD | 	getqx	arg02
12990     4A 93 82 F6 | 	negc	arg01, arg02
12994     49 93 52 F6 | 	abs	arg01, arg01 wc
12998     1F A8 C6 C9 |  if_b	decod	local02, #31
1299c     00 A8 06 36 |  if_ae	mov	local02, #0
129a0     30 46 B1 FD | 	call	#__system___float_fromuns
129a4     54 7B 62 F5 | 	xor	result1, local02
129a8     3D 95 02 F6 | 	mov	arg02, result1
129ac     1E 92 C6 F9 | 	decod	arg01, #30
129b0     3C 59 B1 FD | 	call	#__system____builtin_powf
129b4     3D 93 02 F6 | 	mov	arg01, result1
129b8     53 95 02 F6 | 	mov	arg02, local01
129bc     18 4A B1 FD | 	call	#__system___float_mul
129c0     3D A7 02 F6 | 	mov	local01, result1
129c4     10 CE 05 F1 | 	add	fp, #16
129c8     E7 A6 62 FC | 	wrlong	local01, fp
129cc     08 CE 05 F1 | 	add	fp, #8
129d0     E7 3C 68 FC | 	wrlong	#30, fp
129d4     08 CE 85 F1 | 	sub	fp, #8
129d8     E7 92 02 F6 | 	mov	arg01, fp
129dc     10 CE 85 F1 | 	sub	fp, #16
129e0     1C AD BF FD | 	call	#_push
129e4     E7 F0 03 F6 | 	mov	ptra, fp
129e8     F2 00 A0 FD | 	call	#popregs_
129ec                 | _do_getnotevalue_ret
129ec     2D 00 64 FD | 	ret
129f0                 | 
129f0                 | ' 
129f0                 | ' '-------------------- getpixel
129f0                 | ' 
129f0                 | ' sub do_getpixel
129f0                 | _do_getpixel
129f0     01 CA 05 F6 | 	mov	COUNT_, #1
129f4     E8 00 A0 FD | 	call	#pushregs_
129f8     24 F0 07 F1 | 	add	ptra, #36
129fc     4C 00 00 FF 
12a00     00 64 06 F1 | 	add	objptr, ##38912
12a04     32 97 02 FB | 	rdlong	arg03, objptr
12a08     4B 95 02 F6 | 	mov	arg02, arg03
12a0c     01 94 66 F0 | 	shl	arg02, #1
12a10     4B 95 02 F1 | 	add	arg02, arg03
12a14     02 94 66 F0 | 	shl	arg02, #2
12a18     03 00 00 FF 
12a1c     04 64 86 F1 | 	sub	objptr, ##1540
12a20     32 95 02 F1 | 	add	arg02, objptr
12a24     4A 97 02 FB | 	rdlong	arg03, arg02
12a28                 | ' 
12a28                 | ' numpar=compiledline(lineptr_e).result.uresult
12a28                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
12a28     02 96 0E F2 | 	cmp	arg03, #2 wz
12a2c     48 00 00 FF 
12a30     FC 65 86 F1 | 	sub	objptr, ##37372
12a34     40 00 90 AD |  if_e	jmp	#LR__1570
12a38     00 92 06 F6 | 	mov	arg01, #0
12a3c     4C 78 B1 FD | 	call	#__system___getiolock_0622
12a40     3D 93 02 F6 | 	mov	arg01, result1
12a44     C0 22 B1 FD | 	call	#__system___lockmem
12a48     99 01 00 FF 
12a4c     8E 94 06 F6 | 	mov	arg02, ##@LR__6028
12a50     00 92 06 F6 | 	mov	arg01, #0
12a54     00 96 06 F6 | 	mov	arg03, #0
12a58     A0 2F B1 FD | 	call	#__system___basic_print_string
12a5c     00 92 06 F6 | 	mov	arg01, #0
12a60     28 78 B1 FD | 	call	#__system___getiolock_0622
12a64     3D 01 68 FC | 	wrlong	#0, result1
12a68     27 92 06 F6 | 	mov	arg01, #39
12a6c     00 94 06 F6 | 	mov	arg02, #0
12a70     C4 E5 B0 FD | 	call	#_printerror
12a74     98 00 90 FD | 	jmp	#LR__1571
12a78                 | LR__1570
12a78     F4 AB BF FD | 	call	#_pop
12a7c     3D 97 02 F6 | 	mov	arg03, result1
12a80     3E 95 02 F6 | 	mov	arg02, result2
12a84     3F 93 02 F6 | 	mov	arg01, result3
12a88     0C CE 05 F1 | 	add	fp, #12
12a8c     E7 96 62 FC | 	wrlong	arg03, fp
12a90     04 CE 05 F1 | 	add	fp, #4
12a94     E7 94 62 FC | 	wrlong	arg02, fp
12a98     04 CE 05 F1 | 	add	fp, #4
12a9c     E7 92 62 FC | 	wrlong	arg01, fp
12aa0     14 CE 85 F1 | 	sub	fp, #20
12aa4     C8 AB BF FD | 	call	#_pop
12aa8     3F 97 02 F6 | 	mov	arg03, result3
12aac     E7 7A 62 FC | 	wrlong	result1, fp
12ab0     04 CE 05 F1 | 	add	fp, #4
12ab4     E7 7C 62 FC | 	wrlong	result2, fp
12ab8     04 CE 05 F1 | 	add	fp, #4
12abc     E7 96 62 FC | 	wrlong	arg03, fp
12ac0     08 CE 85 F1 | 	sub	fp, #8
12ac4     E7 92 02 F6 | 	mov	arg01, fp
12ac8     80 AD BF FD | 	call	#_converttoint
12acc     3D A7 02 F6 | 	mov	local01, result1
12ad0     E7 92 02 F6 | 	mov	arg01, fp
12ad4     0C 92 06 F1 | 	add	arg01, #12
12ad8     70 AD BF FD | 	call	#_converttoint
12adc     3D 97 02 F6 | 	mov	arg03, result1
12ae0     32 93 02 FB | 	rdlong	arg01, objptr
12ae4     53 93 02 F1 | 	add	arg01, local01
12ae8     0A 96 66 F0 | 	shl	arg03, #10
12aec     4B 93 02 F1 | 	add	arg01, arg03
12af0     B8 E7 B0 FD | 	call	#_pspeek
12af4     3D 7B E2 F8 | 	getbyte	result1, result1, #0
12af8     E7 7A 62 FC | 	wrlong	result1, fp
12afc     08 CE 05 F1 | 	add	fp, #8
12b00     E7 3A 68 FC | 	wrlong	#29, fp
12b04     08 CE 85 F1 | 	sub	fp, #8
12b08     E7 92 02 F6 | 	mov	arg01, fp
12b0c     F0 AB BF FD | 	call	#_push
12b10                 | LR__1571
12b10     E7 F0 03 F6 | 	mov	ptra, fp
12b14     F2 00 A0 FD | 	call	#popregs_
12b18                 | _do_getpixel_ret
12b18     2D 00 64 FD | 	ret
12b1c                 | 
12b1c                 | ' 
12b1c                 | ' 
12b1c                 | ' sub do_getrealfreq
12b1c                 | _do_getrealfreq
12b1c     00 CA 05 F6 | 	mov	COUNT_, #0
12b20     E8 00 A0 FD | 	call	#pushregs_
12b24     14 F0 07 F1 | 	add	ptra, #20
12b28     4C 00 00 FF 
12b2c     00 64 06 F1 | 	add	objptr, ##38912
12b30     32 97 02 FB | 	rdlong	arg03, objptr
12b34     4B 95 02 F6 | 	mov	arg02, arg03
12b38     01 94 66 F0 | 	shl	arg02, #1
12b3c     4B 95 02 F1 | 	add	arg02, arg03
12b40     02 94 66 F0 | 	shl	arg02, #2
12b44     03 00 00 FF 
12b48     04 64 86 F1 | 	sub	objptr, ##1540
12b4c     32 95 02 F1 | 	add	arg02, objptr
12b50     4A 97 02 FB | 	rdlong	arg03, arg02
12b54                 | ' 
12b54                 | ' numpar=compiledline(lineptr_e).result.uresult
12b54                 | ' if numpar<>1 then print "getrealfreq: "; : printerror(39) : return
12b54     01 96 0E F2 | 	cmp	arg03, #1 wz
12b58     48 00 00 FF 
12b5c     FC 65 86 F1 | 	sub	objptr, ##37372
12b60     40 00 90 AD |  if_e	jmp	#LR__1580
12b64     00 92 06 F6 | 	mov	arg01, #0
12b68     20 77 B1 FD | 	call	#__system___getiolock_0622
12b6c     3D 93 02 F6 | 	mov	arg01, result1
12b70     94 21 B1 FD | 	call	#__system___lockmem
12b74     99 01 00 FF 
12b78     99 94 06 F6 | 	mov	arg02, ##@LR__6029
12b7c     00 92 06 F6 | 	mov	arg01, #0
12b80     00 96 06 F6 | 	mov	arg03, #0
12b84     74 2E B1 FD | 	call	#__system___basic_print_string
12b88     00 92 06 F6 | 	mov	arg01, #0
12b8c     FC 76 B1 FD | 	call	#__system___getiolock_0622
12b90     3D 01 68 FC | 	wrlong	#0, result1
12b94     27 92 06 F6 | 	mov	arg01, #39
12b98     00 94 06 F6 | 	mov	arg02, #0
12b9c     98 E4 B0 FD | 	call	#_printerror
12ba0     78 00 90 FD | 	jmp	#LR__1581
12ba4                 | LR__1580
12ba4     C8 AA BF FD | 	call	#_pop
12ba8     3D 97 02 F6 | 	mov	arg03, result1
12bac     04 CE 05 F1 | 	add	fp, #4
12bb0     E7 96 62 FC | 	wrlong	arg03, fp
12bb4     04 CE 05 F1 | 	add	fp, #4
12bb8     E7 7C 62 FC | 	wrlong	result2, fp
12bbc     04 CE 05 F1 | 	add	fp, #4
12bc0     E7 7E 62 FC | 	wrlong	result3, fp
12bc4     08 CE 85 F1 | 	sub	fp, #8
12bc8     E7 92 02 F6 | 	mov	arg01, fp
12bcc     04 CE 85 F1 | 	sub	fp, #4
12bd0     78 AC BF FD | 	call	#_converttoint
12bd4     3D 95 02 F6 | 	mov	arg02, result1
12bd8     03 94 66 F0 | 	shl	arg02, #3
12bdc     3D 95 82 F1 | 	sub	arg02, result1
12be0     02 94 66 F0 | 	shl	arg02, #2
12be4     32 97 02 F6 | 	mov	arg03, objptr
12be8     16 00 00 FF 
12bec     98 96 06 F1 | 	add	arg03, ##11416
12bf0     4B 95 02 F1 | 	add	arg02, arg03
12bf4     18 94 06 F1 | 	add	arg02, #24
12bf8     4A 97 02 FB | 	rdlong	arg03, arg02
12bfc     04 CE 05 F1 | 	add	fp, #4
12c00     E7 96 62 FC | 	wrlong	arg03, fp
12c04     08 CE 05 F1 | 	add	fp, #8
12c08     E7 3C 68 FC | 	wrlong	#30, fp
12c0c     08 CE 85 F1 | 	sub	fp, #8
12c10     E7 92 02 F6 | 	mov	arg01, fp
12c14     04 CE 85 F1 | 	sub	fp, #4
12c18     E4 AA BF FD | 	call	#_push
12c1c                 | LR__1581
12c1c     E7 F0 03 F6 | 	mov	ptra, fp
12c20     F2 00 A0 FD | 	call	#popregs_
12c24                 | _do_getrealfreq_ret
12c24     2D 00 64 FD | 	ret
12c28                 | 
12c28                 | ' 
12c28                 | ' 
12c28                 | ' '-------------------- gettime
12c28                 | ' 
12c28                 | ' sub do_gettime
12c28                 | _do_gettime
12c28     02 CA 05 F6 | 	mov	COUNT_, #2
12c2c     E8 00 A0 FD | 	call	#pushregs_
12c30     14 F0 07 F1 | 	add	ptra, #20
12c34                 | ' 
12c34                 | ' const asm 
12c34     1A A6 72 FD | 	getct	local01 wc
12c38     1A A8 62 FD | 	getct	local02
12c3c                 | ' return hi1, lo1
12c3c     54 7D 02 F6 | 	mov	result2, local02
12c40     53 7B 02 F6 | 	mov	result1, local01
12c44     10 CE 05 F1 | 	add	fp, #16
12c48     E7 3A 68 FC | 	wrlong	#29, fp
12c4c     08 CE 85 F1 | 	sub	fp, #8
12c50     E7 7C 62 FC | 	wrlong	result2, fp
12c54     04 CE 05 F1 | 	add	fp, #4
12c58     E7 7A 62 FC | 	wrlong	result1, fp
12c5c     04 CE 85 F1 | 	sub	fp, #4
12c60     E7 92 02 F6 | 	mov	arg01, fp
12c64     08 CE 85 F1 | 	sub	fp, #8
12c68     94 AA BF FD | 	call	#_push
12c6c     E7 F0 03 F6 | 	mov	ptra, fp
12c70     F2 00 A0 FD | 	call	#popregs_
12c74                 | _do_gettime_ret
12c74     2D 00 64 FD | 	ret
12c78                 | 
12c78                 | ' 
12c78                 | ' '-------------------- gosub
12c78                 | ' 
12c78                 | ' sub do_gosub()
12c78                 | _do_gosub
12c78     52 00 00 FF 
12c7c     B4 64 06 F1 | 	add	objptr, ##42164
12c80     32 81 02 FB | 	rdlong	_var01, objptr
12c84     01 80 06 F1 | 	add	_var01, #1
12c88     32 81 62 FC | 	wrlong	_var01, objptr
12c8c                 | ' gosubtop+=1
12c8c                 | ' if compiledline(lineptr_e+1).result_type=token_end then
12c8c     06 00 00 FF 
12c90     B4 64 86 F1 | 	sub	objptr, ##3252
12c94     32 81 02 FB | 	rdlong	_var01, objptr
12c98     01 80 06 F1 | 	add	_var01, #1
12c9c     40 83 02 F6 | 	mov	_var02, _var01
12ca0     01 82 66 F0 | 	shl	_var02, #1
12ca4     40 83 02 F1 | 	add	_var02, _var01
12ca8     02 82 66 F0 | 	shl	_var02, #2
12cac     03 00 00 FF 
12cb0     04 64 86 F1 | 	sub	objptr, ##1540
12cb4     32 83 02 F1 | 	add	_var02, objptr
12cb8     08 82 06 F1 | 	add	_var02, #8
12cbc     41 83 02 FB | 	rdlong	_var02, _var02
12cc0     FE 83 0E F2 | 	cmp	_var02, #510 wz
12cc4     48 00 00 FF 
12cc8     FC 65 86 F1 | 	sub	objptr, ##37372
12ccc     58 00 90 5D |  if_ne	jmp	#LR__1590
12cd0     52 00 00 FF 
12cd4     B4 64 06 F1 | 	add	objptr, ##42164
12cd8     32 83 02 FB | 	rdlong	_var02, objptr
12cdc     03 82 66 F0 | 	shl	_var02, #3
12ce0     03 00 00 FF 
12ce4     88 65 86 F1 | 	sub	objptr, ##1928
12ce8     32 83 02 F1 | 	add	_var02, objptr
12cec     03 00 00 FF 
12cf0     0C 65 06 F1 | 	add	objptr, ##1804
12cf4     32 81 02 FB | 	rdlong	_var01, objptr
12cf8     41 81 62 FC | 	wrlong	_var01, _var02
12cfc     7C 64 06 F1 | 	add	objptr, #124
12d00     32 83 02 FB | 	rdlong	_var02, objptr
12d04     03 82 66 F0 | 	shl	_var02, #3
12d08     03 00 00 FF 
12d0c     88 65 86 F1 | 	sub	objptr, ##1928
12d10     32 83 02 F1 | 	add	_var02, objptr
12d14     04 82 06 F1 | 	add	_var02, #4
12d18     41 01 68 FC | 	wrlong	#0, _var02
12d1c     4E 00 00 FF 
12d20     2C 65 86 F1 | 	sub	objptr, ##40236
12d24     64 00 90 FD | 	jmp	#LR__1591
12d28                 | LR__1590
12d28     52 00 00 FF 
12d2c     B4 64 06 F1 | 	add	objptr, ##42164
12d30     32 83 02 FB | 	rdlong	_var02, objptr
12d34     03 82 66 F0 | 	shl	_var02, #3
12d38     03 00 00 FF 
12d3c     88 65 86 F1 | 	sub	objptr, ##1928
12d40     32 83 02 F1 | 	add	_var02, objptr
12d44     03 00 00 FF 
12d48     14 65 06 F1 | 	add	objptr, ##1812
12d4c     32 81 02 FB | 	rdlong	_var01, objptr
12d50     41 81 62 FC | 	wrlong	_var01, _var02
12d54     74 64 06 F1 | 	add	objptr, #116
12d58     32 83 02 FB | 	rdlong	_var02, objptr
12d5c     03 82 66 F0 | 	shl	_var02, #3
12d60     03 00 00 FF 
12d64     88 65 86 F1 | 	sub	objptr, ##1928
12d68     32 83 02 F1 | 	add	_var02, objptr
12d6c     02 00 00 FF 
12d70     2C 65 86 F1 | 	sub	objptr, ##1324
12d74     32 81 02 FB | 	rdlong	_var01, objptr
12d78     4C 00 00 FF 
12d7c     00 64 86 F1 | 	sub	objptr, ##38912
12d80     02 80 06 F1 | 	add	_var01, #2
12d84     04 82 06 F1 | 	add	_var02, #4
12d88     41 81 62 FC | 	wrlong	_var01, _var02
12d8c                 | LR__1591
12d8c                 | _do_gosub_ret
12d8c     2D 00 64 FD | 	ret
12d90                 | 
12d90                 | ' 
12d90                 | ' '--------------------- goto
12d90                 | ' 
12d90                 | ' '------- fast goto
12d90                 | ' 
12d90                 | ' sub do_fast_goto
12d90                 | _do_fast_goto
12d90     02 CA 05 F6 | 	mov	COUNT_, #2
12d94     E8 00 A0 FD | 	call	#pushregs_
12d98                 | _do_fast_goto_enter
12d98     4C 00 00 FF 
12d9c     00 64 06 F1 | 	add	objptr, ##38912
12da0     32 93 02 FB | 	rdlong	arg01, objptr
12da4     49 A7 02 F6 | 	mov	local01, arg01
12da8     01 A6 66 F0 | 	shl	local01, #1
12dac     49 A7 02 F1 | 	add	local01, arg01
12db0     02 A6 66 F0 | 	shl	local01, #2
12db4     03 00 00 FF 
12db8     04 64 86 F1 | 	sub	objptr, ##1540
12dbc     32 A7 02 F1 | 	add	local01, objptr
12dc0     53 A9 02 FB | 	rdlong	local02, local01
12dc4     54 93 02 F6 | 	mov	arg01, local02
12dc8     48 00 00 FF 
12dcc     FC 65 86 F1 | 	sub	objptr, ##37372
12dd0     20 E5 B0 FD | 	call	#_pslpeek
12dd4     3D 93 02 F6 | 	mov	arg01, result1
12dd8                 | ' 
12dd8                 | ' testptr=compiledline(lineptr_e).result.uresult
12dd8                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
12dd8                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
12dd8     4C 00 00 FF 
12ddc     00 64 06 F1 | 	add	objptr, ##38912
12de0     32 7B 02 FB | 	rdlong	result1, objptr
12de4     3D A7 02 F6 | 	mov	local01, result1
12de8     01 A6 66 F0 | 	shl	local01, #1
12dec     3D A7 02 F1 | 	add	local01, result1
12df0     02 A6 66 F0 | 	shl	local01, #2
12df4     03 00 00 FF 
12df8     04 64 86 F1 | 	sub	objptr, ##1540
12dfc     32 A7 02 F1 | 	add	local01, objptr
12e00     04 A6 06 F1 | 	add	local01, #4
12e04     53 A7 02 FB | 	rdlong	local01, local01
12e08     53 93 0A F2 | 	cmp	arg01, local01 wz
12e0c     48 00 00 FF 
12e10     FC 65 86 F1 | 	sub	objptr, ##37372
12e14     58 00 90 5D |  if_ne	jmp	#LR__1600
12e18     52 00 00 FF 
12e1c     38 64 06 F1 | 	add	objptr, ##42040
12e20     32 A9 62 FC | 	wrlong	local02, objptr
12e24     06 00 00 FF 
12e28     3C 64 86 F1 | 	sub	objptr, ##3132
12e2c     32 A9 02 FB | 	rdlong	local02, objptr
12e30     01 A8 86 F1 | 	sub	local02, #1
12e34     04 64 06 F1 | 	add	objptr, #4
12e38     32 A9 62 FC | 	wrlong	local02, objptr
12e3c                 | '   runptr=testptr
12e3c                 | '   lineptr_e=lineptr-1
12e3c                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
12e3c     06 00 00 FF 
12e40     84 64 06 F1 | 	add	objptr, ##3204
12e44     32 A9 02 FB | 	rdlong	local02, objptr
12e48     52 00 00 FF 
12e4c     84 64 86 F1 | 	sub	objptr, ##42116
12e50     FF FF 3F FF 
12e54     FF A9 0E F2 | 	cmp	local02, ##2147483647 wz
12e58     52 00 00 AF 
12e5c     84 64 06 A1 |  if_e	add	objptr, ##42116
12e60     32 01 68 AC |  if_e	wrlong	#0, objptr
12e64     52 00 00 AF 
12e68     84 64 86 A1 |  if_e	sub	objptr, ##42116
12e6c     04 00 90 FD | 	jmp	#LR__1601
12e70                 | LR__1600
12e70     0C 00 B0 FD | 	call	#_do_find_goto
12e74                 | LR__1601
12e74     E7 F0 03 F6 | 	mov	ptra, fp
12e78     F2 00 A0 FD | 	call	#popregs_
12e7c                 | _do_fast_goto_ret
12e7c     2D 00 64 FD | 	ret
12e80                 | 
12e80                 | ' 
12e80                 | ' '------- find goto  
12e80                 | ' 
12e80                 | ' sub do_find_goto
12e80                 | _do_find_goto
12e80     06 CA 05 F6 | 	mov	COUNT_, #6
12e84     E8 00 A0 FD | 	call	#pushregs_
12e88     24 F0 07 F1 | 	add	ptra, #36
12e8c                 | _do_find_goto_enter
12e8c     4C 00 00 FF 
12e90     00 64 06 F1 | 	add	objptr, ##38912
12e94     32 A7 02 FB | 	rdlong	local01, objptr
12e98     53 A9 02 F6 | 	mov	local02, local01
12e9c     01 A8 66 F0 | 	shl	local02, #1
12ea0     53 A9 02 F1 | 	add	local02, local01
12ea4     02 A8 66 F0 | 	shl	local02, #2
12ea8     03 00 00 FF 
12eac     04 64 86 F1 | 	sub	objptr, ##1540
12eb0     32 AB 02 F6 | 	mov	local03, objptr
12eb4     32 A9 02 F1 | 	add	local02, objptr
12eb8     04 A8 06 F1 | 	add	local02, #4
12ebc     54 AD 02 FB | 	rdlong	local04, local02
12ec0     03 00 00 FF 
12ec4     0C 64 06 F1 | 	add	objptr, ##1548
12ec8     32 AF 02 FB | 	rdlong	local05, objptr
12ecc                 | ' 
12ecc                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
12ecc                 | ' gotoptr=programstart
12ecc                 | ' do
12ecc     40 00 00 FF 
12ed0     3C 65 86 F1 | 	sub	objptr, ##33084
12ed4                 | LR__1610
12ed4     E7 92 02 F6 | 	mov	arg01, fp
12ed8     0C 92 06 F1 | 	add	arg01, #12
12edc     57 95 02 F6 | 	mov	arg02, local05
12ee0     18 96 06 F6 | 	mov	arg03, #24
12ee4     AC 0E B1 FD | 	call	#_psram_spin2_read1
12ee8                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
12ee8                 | '   if gotoheader(0)<>$FFFFFFFF then
12ee8     0C CE 05 F1 | 	add	fp, #12
12eec     E7 A8 02 FB | 	rdlong	local02, fp
12ef0     0C CE 85 F1 | 	sub	fp, #12
12ef4     FF FF 7F FF 
12ef8     FF A9 0E F2 | 	cmp	local02, ##-1 wz
12efc     57 B1 02 56 |  if_ne	mov	local06, local05
12f00     20 CE 05 51 |  if_ne	add	fp, #32
12f04     E7 AE 02 5B |  if_ne	rdlong	local05, fp
12f08     20 CE 85 51 |  if_ne	sub	fp, #32
12f0c     20 CE 05 F1 | 	add	fp, #32
12f10     E7 A8 02 FB | 	rdlong	local02, fp
12f14     20 CE 85 F1 | 	sub	fp, #32
12f18     FF FF 3F FF 
12f1c     FF A9 0E F2 | 	cmp	local02, ##2147483647 wz
12f20     0C CE 05 51 |  if_ne	add	fp, #12
12f24     E7 A6 02 5B |  if_ne	rdlong	local01, fp
12f28     0C CE 85 51 |  if_ne	sub	fp, #12
12f2c     FF FF 7F 5F 
12f30     FF A7 0E 52 |  if_ne	cmp	local01, ##-1 wz
12f34     0C CE 05 51 |  if_ne	add	fp, #12
12f38     53 AB 02 56 |  if_ne	mov	local03, local01
12f3c     0C CE 85 51 |  if_ne	sub	fp, #12
12f40     56 AB 0A 52 |  if_ne	cmp	local03, local04 wz
12f44     8C FF 9F 5D |  if_ne	jmp	#LR__1610
12f48     0B 00 00 FF 
12f4c     CC 64 86 F1 | 	sub	objptr, ##5836
12f50                 | ' 
12f50                 | ' if gotoheader(0)=gotoline then
12f50     0C CE 05 F1 | 	add	fp, #12
12f54     E7 AE 02 FB | 	rdlong	local05, fp
12f58     0C CE 85 F1 | 	sub	fp, #12
12f5c     56 AF 0A F2 | 	cmp	local05, local04 wz
12f60     CC 00 90 5D |  if_ne	jmp	#LR__1611
12f64     4C 00 00 FF 
12f68     00 64 06 F1 | 	add	objptr, ##38912
12f6c     32 A7 02 FB | 	rdlong	local01, objptr
12f70     53 A9 02 F6 | 	mov	local02, local01
12f74     01 A8 66 F0 | 	shl	local02, #1
12f78     53 A9 02 F1 | 	add	local02, local01
12f7c     02 A8 66 F0 | 	shl	local02, #2
12f80     03 00 00 FF 
12f84     04 64 86 F1 | 	sub	objptr, ##1540
12f88     32 A9 02 F1 | 	add	local02, objptr
12f8c     54 B1 62 FC | 	wrlong	local06, local02
12f90     03 00 00 FF 
12f94     04 64 06 F1 | 	add	objptr, ##1540
12f98     32 A7 02 FB | 	rdlong	local01, objptr
12f9c     53 A9 02 F6 | 	mov	local02, local01
12fa0     01 A8 66 F0 | 	shl	local02, #1
12fa4     53 A9 02 F1 | 	add	local02, local01
12fa8     02 A8 66 F0 | 	shl	local02, #2
12fac     03 00 00 FF 
12fb0     04 64 86 F1 | 	sub	objptr, ##1540
12fb4     32 A9 02 F1 | 	add	local02, objptr
12fb8     08 A8 06 F1 | 	add	local02, #8
12fbc     54 9D 68 FC | 	wrlong	#78, local02
12fc0     03 00 00 FF 
12fc4     04 64 06 F1 | 	add	objptr, ##1540
12fc8     32 B1 02 FB | 	rdlong	local06, objptr
12fcc     58 93 02 F6 | 	mov	arg01, local06
12fd0     01 92 66 F0 | 	shl	arg01, #1
12fd4     58 93 02 F1 | 	add	arg01, local06
12fd8     02 92 66 F0 | 	shl	arg01, #2
12fdc     03 00 00 FF 
12fe0     04 64 86 F1 | 	sub	objptr, ##1540
12fe4     32 93 02 F1 | 	add	arg01, objptr
12fe8     09 00 00 FF 
12fec     44 64 06 F1 | 	add	objptr, ##4676
12ff0     32 95 02 FB | 	rdlong	arg02, objptr
12ff4     02 AA 06 F6 | 	mov	local03, #2
12ff8     58 AB 02 F1 | 	add	local03, local06
12ffc     0B 00 00 FF 
13000     5C 64 86 F1 | 	sub	objptr, ##5724
13004     32 97 02 FB | 	rdlong	arg03, objptr
13008     4B AB 02 FD | 	qmul	local03, arg03
1300c     3B 00 00 FF 
13010     18 65 86 F1 | 	sub	objptr, ##30488
13014     18 B0 62 FD | 	getqx	local06
13018     58 95 02 F1 | 	add	arg02, local06
1301c     10 0E B1 FD | 	call	#_psram_spin2_write
13020     0B 00 00 FF 
13024     CC 64 86 F1 | 	sub	objptr, ##5836
13028     64 FD BF FD | 	call	#_do_fast_goto
1302c     0C 00 90 FD | 	jmp	#LR__1612
13030                 | LR__1611
13030     26 92 06 F6 | 	mov	arg01, #38
13034     00 94 06 F6 | 	mov	arg02, #0
13038     FC DF B0 FD | 	call	#_printerror
1303c                 | LR__1612
1303c     E7 F0 03 F6 | 	mov	ptra, fp
13040     F2 00 A0 FD | 	call	#popregs_
13044                 | _do_find_goto_ret
13044     2D 00 64 FD | 	ret
13048                 | 
13048                 | ' 
13048                 | ' '------- slow goto  
13048                 | ' 
13048                 | ' sub do_slow_goto
13048                 | _do_slow_goto
13048     05 CA 05 F6 | 	mov	COUNT_, #5
1304c     E8 00 A0 FD | 	call	#pushregs_
13050     30 F0 07 F1 | 	add	ptra, #48
13054     18 A6 BF FD | 	call	#_pop
13058     3F A7 02 F6 | 	mov	local01, result3
1305c     24 CE 05 F1 | 	add	fp, #36
13060     E7 7A 62 FC | 	wrlong	result1, fp
13064     04 CE 05 F1 | 	add	fp, #4
13068     E7 7C 62 FC | 	wrlong	result2, fp
1306c     04 CE 05 F1 | 	add	fp, #4
13070     E7 A6 62 FC | 	wrlong	local01, fp
13074     08 CE 85 F1 | 	sub	fp, #8
13078     E7 92 02 F6 | 	mov	arg01, fp
1307c     24 CE 85 F1 | 	sub	fp, #36
13080     C8 A7 BF FD | 	call	#_converttoint
13084     3D A9 02 F6 | 	mov	local02, result1
13088     4C 00 00 FF 
1308c     08 64 06 F1 | 	add	objptr, ##38920
13090     32 AB 02 FB | 	rdlong	local03, objptr
13094                 | ' 
13094                 | ' t1=pop() : gotoline=converttoint(t1)
13094                 | ' gotoptr=programstart
13094                 | ' do
13094     40 00 00 FF 
13098     3C 65 86 F1 | 	sub	objptr, ##33084
1309c                 | LR__1620
1309c     E7 92 02 F6 | 	mov	arg01, fp
130a0     0C 92 06 F1 | 	add	arg01, #12
130a4     55 95 02 F6 | 	mov	arg02, local03
130a8     18 96 06 F6 | 	mov	arg03, #24
130ac     E4 0C B1 FD | 	call	#_psram_spin2_read1
130b0                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
130b0                 | '   if gotoheader(0)<>$FFFFFFFF then
130b0     0C CE 05 F1 | 	add	fp, #12
130b4     E7 96 02 FB | 	rdlong	arg03, fp
130b8     0C CE 85 F1 | 	sub	fp, #12
130bc     FF FF 7F FF 
130c0     FF 97 0E F2 | 	cmp	arg03, ##-1 wz
130c4     55 AD 02 56 |  if_ne	mov	local04, local03
130c8     20 CE 05 51 |  if_ne	add	fp, #32
130cc     E7 AA 02 5B |  if_ne	rdlong	local03, fp
130d0     20 CE 85 51 |  if_ne	sub	fp, #32
130d4     20 CE 05 F1 | 	add	fp, #32
130d8     E7 96 02 FB | 	rdlong	arg03, fp
130dc     20 CE 85 F1 | 	sub	fp, #32
130e0     FF FF 3F FF 
130e4     FF 97 0E F2 | 	cmp	arg03, ##2147483647 wz
130e8     0C CE 05 51 |  if_ne	add	fp, #12
130ec     E7 A6 02 5B |  if_ne	rdlong	local01, fp
130f0     0C CE 85 51 |  if_ne	sub	fp, #12
130f4     FF FF 7F 5F 
130f8     FF A7 0E 52 |  if_ne	cmp	local01, ##-1 wz
130fc     0C CE 05 51 |  if_ne	add	fp, #12
13100     53 AF 02 56 |  if_ne	mov	local05, local01
13104     0C CE 85 51 |  if_ne	sub	fp, #12
13108     54 AF 0A 52 |  if_ne	cmp	local05, local02 wz
1310c     8C FF 9F 5D |  if_ne	jmp	#LR__1620
13110     0B 00 00 FF 
13114     CC 64 86 F1 | 	sub	objptr, ##5836
13118                 | ' if gotoheader(0)=gotoline then  
13118     0C CE 05 F1 | 	add	fp, #12
1311c     E7 AE 02 FB | 	rdlong	local05, fp
13120     0C CE 85 F1 | 	sub	fp, #12
13124     54 AF 0A F2 | 	cmp	local05, local02 wz
13128     54 00 90 5D |  if_ne	jmp	#LR__1621
1312c     52 00 00 FF 
13130     38 64 06 F1 | 	add	objptr, ##42040
13134     32 AD 62 FC | 	wrlong	local04, objptr
13138     06 00 00 FF 
1313c     3C 64 86 F1 | 	sub	objptr, ##3132
13140     32 AF 02 FB | 	rdlong	local05, objptr
13144     01 AE 86 F1 | 	sub	local05, #1
13148     04 64 06 F1 | 	add	objptr, #4
1314c     32 AF 62 FC | 	wrlong	local05, objptr
13150                 | '    runptr=oldgotoptr
13150                 | '    lineptr_e=lineptr-1
13150                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0 
13150     06 00 00 FF 
13154     84 64 06 F1 | 	add	objptr, ##3204
13158     32 AF 02 FB | 	rdlong	local05, objptr
1315c     52 00 00 FF 
13160     84 64 86 F1 | 	sub	objptr, ##42116
13164     FF FF 3F FF 
13168     FF AF 0E F2 | 	cmp	local05, ##2147483647 wz
1316c     52 00 00 AF 
13170     84 64 06 A1 |  if_e	add	objptr, ##42116
13174     32 01 68 AC |  if_e	wrlong	#0, objptr
13178     52 00 00 AF 
1317c     84 64 86 A1 |  if_e	sub	objptr, ##42116
13180                 | LR__1621
13180     E7 F0 03 F6 | 	mov	ptra, fp
13184     F2 00 A0 FD | 	call	#popregs_
13188                 | _do_slow_goto_ret
13188     2D 00 64 FD | 	ret
1318c                 | 
1318c                 | ' 
1318c                 | ' ' ----------------  hex$
1318c                 | ' 
1318c                 | ' sub do_hex
1318c                 | _do_hex
1318c     02 CA 05 F6 | 	mov	COUNT_, #2
13190     E8 00 A0 FD | 	call	#pushregs_
13194     18 F0 07 F1 | 	add	ptra, #24
13198     4C 00 00 FF 
1319c     00 64 06 F1 | 	add	objptr, ##38912
131a0     32 97 02 FB | 	rdlong	arg03, objptr
131a4     4B 95 02 F6 | 	mov	arg02, arg03
131a8     01 94 66 F0 | 	shl	arg02, #1
131ac     4B 95 02 F1 | 	add	arg02, arg03
131b0     02 94 66 F0 | 	shl	arg02, #2
131b4     03 00 00 FF 
131b8     04 64 86 F1 | 	sub	objptr, ##1540
131bc     32 95 02 F1 | 	add	arg02, objptr
131c0     4A A7 02 FB | 	rdlong	local01, arg02
131c4                 | ' 
131c4                 | ' numpar=compiledline(lineptr_e).result.uresult
131c4                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
131c4     03 A6 16 F2 | 	cmp	local01, #3 wc
131c8     48 00 00 FF 
131cc     FC 65 86 F1 | 	sub	objptr, ##37372
131d0     00 A6 0E C2 |  if_b	cmp	local01, #0 wz
131d4     40 00 90 4D |  if_c_and_nz	jmp	#LR__1630
131d8     00 92 06 F6 | 	mov	arg01, #0
131dc     AC 70 B1 FD | 	call	#__system___getiolock_0622
131e0     3D 93 02 F6 | 	mov	arg01, result1
131e4     20 1B B1 FD | 	call	#__system___lockmem
131e8     99 01 00 FF 
131ec     A7 94 06 F6 | 	mov	arg02, ##@LR__6030
131f0     00 92 06 F6 | 	mov	arg01, #0
131f4     00 96 06 F6 | 	mov	arg03, #0
131f8     00 28 B1 FD | 	call	#__system___basic_print_string
131fc     00 92 06 F6 | 	mov	arg01, #0
13200     88 70 B1 FD | 	call	#__system___getiolock_0622
13204     3D 01 68 FC | 	wrlong	#0, result1
13208     27 92 06 F6 | 	mov	arg01, #39
1320c     00 94 06 F6 | 	mov	arg02, #0
13210     24 DE B0 FD | 	call	#_printerror
13214     8C 00 90 FD | 	jmp	#LR__1633
13218                 | LR__1630
13218                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
13218     02 A6 0E F2 | 	cmp	local01, #2 wz
1321c     30 00 90 5D |  if_ne	jmp	#LR__1631
13220     4C A4 BF FD | 	call	#_pop
13224     3F A7 02 F6 | 	mov	local01, result3
13228     E7 7A 62 FC | 	wrlong	result1, fp
1322c     04 CE 05 F1 | 	add	fp, #4
13230     E7 7C 62 FC | 	wrlong	result2, fp
13234     04 CE 05 F1 | 	add	fp, #4
13238     E7 A6 62 FC | 	wrlong	local01, fp
1323c     08 CE 85 F1 | 	sub	fp, #8
13240     E7 92 02 F6 | 	mov	arg01, fp
13244     04 A6 BF FD | 	call	#_converttoint
13248     3D A9 02 F6 | 	mov	local02, result1
1324c     04 00 90 FD | 	jmp	#LR__1632
13250                 | LR__1631
13250     08 A8 06 F6 | 	mov	local02, #8
13254                 | LR__1632
13254     18 A4 BF FD | 	call	#_pop
13258     3F A7 02 F6 | 	mov	local01, result3
1325c     E7 7A 62 FC | 	wrlong	result1, fp
13260     04 CE 05 F1 | 	add	fp, #4
13264     E7 7C 62 FC | 	wrlong	result2, fp
13268     04 CE 05 F1 | 	add	fp, #4
1326c     E7 A6 62 FC | 	wrlong	local01, fp
13270     08 CE 85 F1 | 	sub	fp, #8
13274     E7 92 02 F6 | 	mov	arg01, fp
13278     D0 A5 BF FD | 	call	#_converttoint
1327c     3D 93 02 F6 | 	mov	arg01, result1
13280     54 95 02 F6 | 	mov	arg02, local02
13284     10 96 06 F6 | 	mov	arg03, #16
13288     78 35 B1 FD | 	call	#__system__Number_S
1328c     E7 7A 62 FC | 	wrlong	result1, fp
13290     08 CE 05 F1 | 	add	fp, #8
13294     E7 3E 68 FC | 	wrlong	#31, fp
13298     08 CE 85 F1 | 	sub	fp, #8
1329c     E7 92 02 F6 | 	mov	arg01, fp
132a0     5C A4 BF FD | 	call	#_push
132a4                 | LR__1633
132a4     E7 F0 03 F6 | 	mov	ptra, fp
132a8     F2 00 A0 FD | 	call	#popregs_
132ac                 | _do_hex_ret
132ac     2D 00 64 FD | 	ret
132b0                 | 
132b0                 | ' 
132b0                 | ' ' ----------------  if
132b0                 | ' 
132b0                 | ' sub do_if
132b0                 | _do_if
132b0     05 CA 05 F6 | 	mov	COUNT_, #5
132b4     E8 00 A0 FD | 	call	#pushregs_
132b8     B4 A3 BF FD | 	call	#_pop
132bc     3D A7 0A F6 | 	mov	local01, result1 wz
132c0     3E A9 02 F6 | 	mov	local02, result2
132c4     3F AB 02 F6 | 	mov	local03, result3
132c8                 | ' t1=pop()
132c8                 | ' ' if uresult=0, jump over else
132c8                 | ' if t1.result.uresult = 0 then 
132c8     BC 00 90 5D |  if_ne	jmp	#LR__1642
132cc                 | '   for i=lineptr_e to lineptr-1
132cc     4C 00 00 FF 
132d0     00 64 06 F1 | 	add	objptr, ##38912
132d4     32 AD 02 FB | 	rdlong	local04, objptr
132d8     04 64 86 F1 | 	sub	objptr, #4
132dc     32 AF 02 FB | 	rdlong	local05, objptr
132e0     4B 00 00 FF 
132e4     FC 65 86 F1 | 	sub	objptr, ##38908
132e8                 | LR__1640
132e8     57 AD 52 F2 | 	cmps	local04, local05 wc
132ec     78 00 90 3D |  if_ae	jmp	#LR__1641
132f0     56 7F 02 F6 | 	mov	result3, local04
132f4     01 7E 66 F0 | 	shl	result3, #1
132f8     56 7F 02 F1 | 	add	result3, local04
132fc     02 7E 66 F0 | 	shl	result3, #2
13300     48 00 00 FF 
13304     FC 65 06 F1 | 	add	objptr, ##37372
13308     32 7F 02 F1 | 	add	result3, objptr
1330c     3F A7 02 FB | 	rdlong	local01, result3
13310     04 7E 06 F1 | 	add	result3, #4
13314     3F 7D 02 FB | 	rdlong	result2, result3
13318     56 7F 02 F6 | 	mov	result3, local04
1331c     01 7E 66 F0 | 	shl	result3, #1
13320     56 7F 02 F1 | 	add	result3, local04
13324     02 7E 66 F0 | 	shl	result3, #2
13328     32 7F 02 F1 | 	add	result3, objptr
1332c     08 7E 06 F1 | 	add	result3, #8
13330     3F 7F 02 FB | 	rdlong	result3, result3
13334     3E A9 02 F6 | 	mov	local02, result2
13338     3F AB 02 F6 | 	mov	local03, result3
1333c                 | '     t1=compiledline(i)
1333c                 | '     if t1.result_type=token_else then lineptr_e=i : return
1333c     5A AA 0E F2 | 	cmp	local03, #90 wz
13340     48 00 00 FF 
13344     FC 65 86 F1 | 	sub	objptr, ##37372
13348     4C 00 00 AF 
1334c     00 64 06 A1 |  if_e	add	objptr, ##38912
13350     32 AD 62 AC |  if_e	wrlong	local04, objptr
13354     4C 00 00 AF 
13358     00 64 86 A1 |  if_e	sub	objptr, ##38912
1335c     28 00 90 AD |  if_e	jmp	#LR__1643
13360     01 AC 06 F1 | 	add	local04, #1
13364     80 FF 9F FD | 	jmp	#LR__1640
13368                 | LR__1641
13368     4B 00 00 FF 
1336c     FC 65 06 F1 | 	add	objptr, ##38908
13370     32 AF 02 FB | 	rdlong	local05, objptr
13374     01 AE 86 F1 | 	sub	local05, #1
13378     04 64 06 F1 | 	add	objptr, #4
1337c     32 AF 62 FC | 	wrlong	local05, objptr
13380     4C 00 00 FF 
13384     00 64 86 F1 | 	sub	objptr, ##38912
13388                 | LR__1642
13388                 | LR__1643
13388     E7 F0 03 F6 | 	mov	ptra, fp
1338c     F2 00 A0 FD | 	call	#popregs_
13390                 | _do_if_ret
13390     2D 00 64 FD | 	ret
13394                 | 
13394                 | ' 
13394                 | ' ' ----------------  inkey$
13394                 | ' 
13394                 | ' sub do_inkey
13394                 | _do_inkey
13394     02 CA 05 F6 | 	mov	COUNT_, #2
13398     E8 00 A0 FD | 	call	#pushregs_
1339c     0C F0 07 F1 | 	add	ptra, #12
133a0     0C 0E B1 FD | 	call	#_usbnew_spin2_get_key
133a4     46 00 00 FF 
133a8     F4 65 06 F1 | 	add	objptr, ##36340
133ac     32 7B 62 FC | 	wrlong	result1, objptr
133b0                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
133b0     46 00 00 FF 
133b4     F4 65 86 F1 | 	sub	objptr, ##36340
133b8     00 7A 0E F2 | 	cmp	result1, #0 wz
133bc     A0 00 90 AD |  if_e	jmp	#LR__1651
133c0     46 00 00 FF 
133c4     F4 65 06 F1 | 	add	objptr, ##36340
133c8     32 A3 02 FB | 	rdlong	arg09, objptr
133cc     46 00 00 FF 
133d0     F4 65 86 F1 | 	sub	objptr, ##36340
133d4     00 00 40 FF 
133d8     00 A2 16 F2 | 	cmp	arg09, ##-2147483648 wc
133dc     46 00 00 CF 
133e0     F4 65 06 C1 |  if_b	add	objptr, ##36340
133e4     32 A7 02 CB |  if_b	rdlong	local01, objptr
133e8     46 00 00 CF 
133ec     F4 65 86 C1 |  if_b	sub	objptr, ##36340
133f0     53 A7 E2 C8 |  if_b	getbyte	local01, local01, #0
133f4     E0 A6 16 C2 |  if_b	cmp	local01, #224 wc
133f8     64 00 90 3D |  if_ae	jmp	#LR__1651
133fc                 | '   if keyclick=1 then audio.play(7,keyclick_spl,44100,4096,spl_len) 
133fc     52 00 00 FF 
13400     BC 64 06 F1 | 	add	objptr, ##42172
13404     32 A3 02 FB | 	rdlong	arg09, objptr
13408     52 00 00 FF 
1340c     BC 64 86 F1 | 	sub	objptr, ##42172
13410     01 A2 0E F2 | 	cmp	arg09, #1 wz
13414     48 00 90 5D |  if_ne	jmp	#LR__1650
13418     54 00 00 FF 
1341c     5C 64 06 F1 | 	add	objptr, ##43100
13420     32 95 02 FB | 	rdlong	arg02, objptr
13424     04 64 86 F1 | 	sub	objptr, #4
13428     32 9B 02 FB | 	rdlong	arg05, objptr
1342c     07 92 06 F6 | 	mov	arg01, #7
13430     56 00 00 FF 
13434     44 96 06 F6 | 	mov	arg03, ##44100
13438     0C 98 C6 F9 | 	decod	arg04, #12
1343c     01 9C 66 F6 | 	neg	arg06, #1
13440     01 9E 66 F6 | 	neg	arg07, #1
13444     01 A0 66 F6 | 	neg	arg08, #1
13448     01 A2 66 F6 | 	neg	arg09, #1
1344c     48 00 00 FF 
13450     8C 65 86 F1 | 	sub	objptr, ##37260
13454     68 11 B1 FD | 	call	#_Audio2_004_spin2_play
13458     0B 00 00 FF 
1345c     CC 64 86 F1 | 	sub	objptr, ##5836
13460                 | LR__1650
13460                 | LR__1651
13460                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
13460     46 00 00 FF 
13464     F4 65 06 F1 | 	add	objptr, ##36340
13468     32 A3 0A FB | 	rdlong	arg09, objptr wz
1346c     46 00 00 FF 
13470     F4 65 86 F1 | 	sub	objptr, ##36340
13474     D4 01 90 AD |  if_e	jmp	#LR__1660
13478     46 00 00 FF 
1347c     F4 65 06 F1 | 	add	objptr, ##36340
13480     32 A3 02 FB | 	rdlong	arg09, objptr
13484     46 00 00 FF 
13488     F4 65 86 F1 | 	sub	objptr, ##36340
1348c     00 00 40 FF 
13490     00 A2 16 F2 | 	cmp	arg09, ##-2147483648 wc
13494     46 00 00 CF 
13498     F4 65 06 C1 |  if_b	add	objptr, ##36340
1349c     32 A7 02 CB |  if_b	rdlong	local01, objptr
134a0     46 00 00 CF 
134a4     F4 65 86 C1 |  if_b	sub	objptr, ##36340
134a8     53 A7 E2 C8 |  if_b	getbyte	local01, local01, #0
134ac     E0 A6 16 C2 |  if_b	cmp	local01, #224 wc
134b0     98 01 90 3D |  if_ae	jmp	#LR__1660
134b4                 | '   if leds and 2 = 2 then 
134b4     54 00 00 FF 
134b8     98 64 06 F1 | 	add	objptr, ##43160
134bc     32 A7 0A FB | 	rdlong	local01, objptr wz
134c0     54 00 00 FF 
134c4     98 64 86 F1 | 	sub	objptr, ##43160
134c8     58 01 90 AD |  if_e	jmp	#LR__1659
134cc                 | '     if key>96 andalso key<123 then
134cc     46 00 00 FF 
134d0     F4 65 06 F1 | 	add	objptr, ##36340
134d4     32 A7 02 FB | 	rdlong	local01, objptr
134d8     46 00 00 FF 
134dc     F4 65 86 F1 | 	sub	objptr, ##36340
134e0     61 A6 16 F2 | 	cmp	local01, #97 wc
134e4     3C 00 90 CD |  if_b	jmp	#LR__1652
134e8     46 00 00 FF 
134ec     F4 65 06 F1 | 	add	objptr, ##36340
134f0     32 A7 02 FB | 	rdlong	local01, objptr
134f4     46 00 00 FF 
134f8     F4 65 86 F1 | 	sub	objptr, ##36340
134fc     7B A6 16 F2 | 	cmp	local01, #123 wc
13500     20 00 90 3D |  if_ae	jmp	#LR__1652
13504     46 00 00 FF 
13508     F4 65 06 F1 | 	add	objptr, ##36340
1350c     32 A7 02 FB | 	rdlong	local01, objptr
13510     20 A6 86 F1 | 	sub	local01, #32
13514     32 A7 62 FC | 	wrlong	local01, objptr
13518     46 00 00 FF 
1351c     F4 65 86 F1 | 	sub	objptr, ##36340
13520     00 01 90 FD | 	jmp	#LR__1658
13524                 | LR__1652
13524     46 00 00 FF 
13528     F4 65 06 F1 | 	add	objptr, ##36340
1352c     32 A7 02 FB | 	rdlong	local01, objptr
13530     46 00 00 FF 
13534     F4 65 86 F1 | 	sub	objptr, ##36340
13538     41 A6 16 F2 | 	cmp	local01, #65 wc
1353c     3C 00 90 CD |  if_b	jmp	#LR__1653
13540     46 00 00 FF 
13544     F4 65 06 F1 | 	add	objptr, ##36340
13548     32 A7 02 FB | 	rdlong	local01, objptr
1354c     46 00 00 FF 
13550     F4 65 86 F1 | 	sub	objptr, ##36340
13554     5B A6 16 F2 | 	cmp	local01, #91 wc
13558     20 00 90 3D |  if_ae	jmp	#LR__1653
1355c     46 00 00 FF 
13560     F4 65 06 F1 | 	add	objptr, ##36340
13564     32 A7 02 FB | 	rdlong	local01, objptr
13568     20 A6 06 F1 | 	add	local01, #32
1356c     32 A7 62 FC | 	wrlong	local01, objptr
13570     46 00 00 FF 
13574     F4 65 86 F1 | 	sub	objptr, ##36340
13578     A8 00 90 FD | 	jmp	#LR__1657
1357c                 | LR__1653
1357c     46 00 00 FF 
13580     F4 65 06 F1 | 	add	objptr, ##36340
13584     32 A7 02 FB | 	rdlong	local01, objptr
13588     46 00 00 FF 
1358c     F4 65 86 F1 | 	sub	objptr, ##36340
13590     17 A6 16 F2 | 	cmp	local01, #23 wc
13594     3C 00 90 CD |  if_b	jmp	#LR__1654
13598     46 00 00 FF 
1359c     F4 65 06 F1 | 	add	objptr, ##36340
135a0     32 A7 02 FB | 	rdlong	local01, objptr
135a4     46 00 00 FF 
135a8     F4 65 86 F1 | 	sub	objptr, ##36340
135ac     20 A6 16 F2 | 	cmp	local01, #32 wc
135b0     20 00 90 3D |  if_ae	jmp	#LR__1654
135b4     46 00 00 FF 
135b8     F4 65 06 F1 | 	add	objptr, ##36340
135bc     32 A7 02 FB | 	rdlong	local01, objptr
135c0     09 A6 86 F1 | 	sub	local01, #9
135c4     32 A7 62 FC | 	wrlong	local01, objptr
135c8     46 00 00 FF 
135cc     F4 65 86 F1 | 	sub	objptr, ##36340
135d0     50 00 90 FD | 	jmp	#LR__1656
135d4                 | LR__1654
135d4     46 00 00 FF 
135d8     F4 65 06 F1 | 	add	objptr, ##36340
135dc     32 A9 02 FB | 	rdlong	local02, objptr
135e0     46 00 00 FF 
135e4     F4 65 86 F1 | 	sub	objptr, ##36340
135e8     0E A8 16 F2 | 	cmp	local02, #14 wc
135ec     34 00 90 CD |  if_b	jmp	#LR__1655
135f0     46 00 00 FF 
135f4     F4 65 06 F1 | 	add	objptr, ##36340
135f8     32 A7 02 FB | 	rdlong	local01, objptr
135fc     46 00 00 FF 
13600     F4 65 86 F1 | 	sub	objptr, ##36340
13604     17 A6 16 F2 | 	cmp	local01, #23 wc
13608     54 00 00 CF 
1360c     9C 64 06 C1 |  if_b	add	objptr, ##43164
13610     32 A9 02 CB |  if_b	rdlong	local02, objptr
13614     27 A8 06 C1 |  if_b	add	local02, #39
13618     32 A9 62 CC |  if_b	wrlong	local02, objptr
1361c     54 00 00 CF 
13620     9C 64 86 C1 |  if_b	sub	objptr, ##43164
13624                 | LR__1655
13624                 | LR__1656
13624                 | LR__1657
13624                 | LR__1658
13624                 | LR__1659
13624     46 00 00 FF 
13628     F4 65 06 F1 | 	add	objptr, ##36340
1362c     32 93 02 FB | 	rdlong	arg01, objptr
13630     46 00 00 FF 
13634     F4 65 86 F1 | 	sub	objptr, ##36340
13638     48 DD B0 FD | 	call	#_scantochar
1363c     3D 93 02 F6 | 	mov	arg01, result1
13640     30 31 B1 FD | 	call	#__system__Chr_S
13644     E7 7A 62 FC | 	wrlong	result1, fp
13648     0C 00 90 FD | 	jmp	#LR__1661
1364c                 | LR__1660
1364c     99 01 00 FF 
13650     AE A8 06 F6 | 	mov	local02, ##@LR__6031
13654     E7 A8 62 FC | 	wrlong	local02, fp
13658                 | LR__1661
13658     08 CE 05 F1 | 	add	fp, #8
1365c     E7 3E 68 FC | 	wrlong	#31, fp
13660     08 CE 85 F1 | 	sub	fp, #8
13664     E7 92 02 F6 | 	mov	arg01, fp
13668     94 A0 BF FD | 	call	#_push
1366c     E7 F0 03 F6 | 	mov	ptra, fp
13670     F2 00 A0 FD | 	call	#popregs_
13674                 | _do_inkey_ret
13674     2D 00 64 FD | 	ret
13678                 | 
13678                 | ' 
13678                 | ' ' ----------------  ink
13678                 | ' 
13678                 | ' sub do_ink
13678                 | _do_ink
13678     00 CA 05 F6 | 	mov	COUNT_, #0
1367c     E8 00 A0 FD | 	call	#pushregs_
13680     0C F0 07 F1 | 	add	ptra, #12
13684     E8 9F BF FD | 	call	#_pop
13688     3F 95 02 F6 | 	mov	arg02, result3
1368c     E7 7A 62 FC | 	wrlong	result1, fp
13690     04 CE 05 F1 | 	add	fp, #4
13694     E7 7C 62 FC | 	wrlong	result2, fp
13698     04 CE 05 F1 | 	add	fp, #4
1369c     E7 94 62 FC | 	wrlong	arg02, fp
136a0     08 CE 85 F1 | 	sub	fp, #8
136a4     E7 92 02 F6 | 	mov	arg01, fp
136a8     A0 A1 BF FD | 	call	#_converttoint
136ac     38 00 00 FF 
136b0     BC 65 06 F1 | 	add	objptr, ##29116
136b4     32 7B 62 FC | 	wrlong	result1, objptr
136b8     04 64 86 F1 | 	sub	objptr, #4
136bc     32 95 02 FB | 	rdlong	arg02, objptr
136c0                 | ' 
136c0                 | ' write_color:=ff
136c0     38 00 00 FF 
136c4     77 65 86 F1 | 	sub	objptr, ##29047
136c8     32 7B 62 FC | 	wrlong	result1, objptr
136cc                 | ' write_background:=bb
136cc     04 64 06 F1 | 	add	objptr, #4
136d0     32 95 62 FC | 	wrlong	arg02, objptr
136d4     38 00 00 FF 
136d8     77 65 06 F1 | 	add	objptr, ##29047
136dc     32 93 02 FB | 	rdlong	arg01, objptr
136e0     38 00 00 FF 
136e4     BC 65 86 F1 | 	sub	objptr, ##29116
136e8     0C E5 B0 FD | 	call	#_hg010b_spin2_setcursorcolor
136ec     E7 F0 03 F6 | 	mov	ptra, fp
136f0     F2 00 A0 FD | 	call	#popregs_
136f4                 | _do_ink_ret
136f4     2D 00 64 FD | 	ret
136f8                 | 
136f8                 | ' 
136f8                 | ' ' ----------------  int
136f8                 | ' 
136f8                 | ' sub do_int
136f8                 | _do_int
136f8     02 CA 05 F6 | 	mov	COUNT_, #2
136fc     E8 00 A0 FD | 	call	#pushregs_
13700     10 F0 07 F1 | 	add	ptra, #16
13704     68 9F BF FD | 	call	#_pop
13708     3E A7 02 F6 | 	mov	local01, result2
1370c     3F A9 02 F6 | 	mov	local02, result3
13710     E7 7A 62 FC | 	wrlong	result1, fp
13714     04 CE 05 F1 | 	add	fp, #4
13718     E7 A6 62 FC | 	wrlong	local01, fp
1371c     04 CE 05 F1 | 	add	fp, #4
13720     E7 A8 62 FC | 	wrlong	local02, fp
13724                 | ' 
13724                 | ' t1=pop()
13724                 | ' select case t1.result_type
13724     08 CE 85 F1 | 	sub	fp, #8
13728     1E A8 0E F2 | 	cmp	local02, #30 wz
1372c     14 00 90 AD |  if_e	jmp	#LR__1670
13730     1F A8 0E F2 | 	cmp	local02, #31 wz
13734     20 00 90 AD |  if_e	jmp	#LR__1671
13738     2B A8 0E F2 | 	cmp	local02, #43 wz
1373c     34 00 90 AD |  if_e	jmp	#LR__1672
13740     50 00 90 FD | 	jmp	#LR__1673
13744                 | LR__1670
13744     E7 92 02 FB | 	rdlong	arg01, fp
13748     00 94 06 F6 | 	mov	arg02, #0
1374c     50 41 B1 FD | 	call	#__system___float_tointeger
13750     E7 7A 62 FC | 	wrlong	result1, fp
13754     3C 00 90 FD | 	jmp	#LR__1673
13758                 | LR__1671
13758     E7 92 02 FB | 	rdlong	arg01, fp
1375c     94 44 B1 FD | 	call	#__system____builtin_atof
13760     3D 93 02 F6 | 	mov	arg01, result1
13764     00 94 06 F6 | 	mov	arg02, #0
13768     34 41 B1 FD | 	call	#__system___float_tointeger
1376c     E7 7A 62 FC | 	wrlong	result1, fp
13770     20 00 90 FD | 	jmp	#LR__1673
13774                 | LR__1672
13774     E7 92 02 FB | 	rdlong	arg01, fp
13778     64 A0 BF FD | 	call	#_convertstring
1377c     3D 93 02 F6 | 	mov	arg01, result1
13780     70 44 B1 FD | 	call	#__system____builtin_atof
13784     3D 93 02 F6 | 	mov	arg01, result1
13788     00 94 06 F6 | 	mov	arg02, #0
1378c     10 41 B1 FD | 	call	#__system___float_tointeger
13790     E7 7A 62 FC | 	wrlong	result1, fp
13794                 | LR__1673
13794     08 CE 05 F1 | 	add	fp, #8
13798     E7 38 68 FC | 	wrlong	#28, fp
1379c     08 CE 85 F1 | 	sub	fp, #8
137a0     E7 92 02 F6 | 	mov	arg01, fp
137a4     58 9F BF FD | 	call	#_push
137a8     E7 F0 03 F6 | 	mov	ptra, fp
137ac     F2 00 A0 FD | 	call	#popregs_
137b0                 | _do_int_ret
137b0     2D 00 64 FD | 	ret
137b4                 | 
137b4                 | ' 
137b4                 | ' ' ----------------  input
137b4                 | ' 
137b4                 | ' sub do_input
137b4                 | _do_input
137b4     1A CA 05 F6 | 	mov	COUNT_, #26
137b8     E8 00 A0 FD | 	call	#pushregs_
137bc     50 F1 07 F1 | 	add	ptra, #336
137c0     4C 00 00 FF 
137c4     00 64 06 F1 | 	add	objptr, ##38912
137c8     32 AD 02 FB | 	rdlong	local04, objptr
137cc     56 AF 02 F6 | 	mov	local05, local04
137d0     01 AE 66 F0 | 	shl	local05, #1
137d4     56 AF 02 F1 | 	add	local05, local04
137d8     02 AE 66 F0 | 	shl	local05, #2
137dc     03 00 00 FF 
137e0     04 64 86 F1 | 	sub	objptr, ##1540
137e4     32 B1 02 F6 | 	mov	local06, objptr
137e8     32 AF 02 F1 | 	add	local05, objptr
137ec     57 B3 02 FB | 	rdlong	local07, local05
137f0                 | ' 
137f0                 | ' numpar=compiledline(lineptr_e).result.uresult
137f0                 | ' if numpar<1 orelse numpar>64 then print "In input: ";: printerror(39,runheader(0)) : return
137f0     01 B2 16 F2 | 	cmp	local07, #1 wc
137f4     48 00 00 FF 
137f8     FC 65 86 F1 | 	sub	objptr, ##37372
137fc     08 00 90 CD |  if_b	jmp	#LR__1680
13800     41 B2 16 F2 | 	cmp	local07, #65 wc
13804     50 00 90 CD |  if_b	jmp	#LR__1681
13808                 | LR__1680
13808     00 92 06 F6 | 	mov	arg01, #0
1380c     7C 6A B1 FD | 	call	#__system___getiolock_0622
13810     3D 93 02 F6 | 	mov	arg01, result1
13814     F0 14 B1 FD | 	call	#__system___lockmem
13818     99 01 00 FF 
1381c     AF 94 06 F6 | 	mov	arg02, ##@LR__6032
13820     00 92 06 F6 | 	mov	arg01, #0
13824     00 96 06 F6 | 	mov	arg03, #0
13828     D0 21 B1 FD | 	call	#__system___basic_print_string
1382c     00 92 06 F6 | 	mov	arg01, #0
13830     58 6A B1 FD | 	call	#__system___getiolock_0622
13834     3D 01 68 FC | 	wrlong	#0, result1
13838     52 00 00 FF 
1383c     70 64 06 F1 | 	add	objptr, ##42096
13840     32 95 02 FB | 	rdlong	arg02, objptr
13844     52 00 00 FF 
13848     70 64 86 F1 | 	sub	objptr, ##42096
1384c     27 92 06 F6 | 	mov	arg01, #39
13850     E4 D7 B0 FD | 	call	#_printerror
13854     5C 08 90 FD | 	jmp	#LR__1727
13858                 | LR__1681
13858     59 B5 02 F6 | 	mov	local08, local07
1385c     01 B4 86 F1 | 	sub	local08, #1
13860     3C 64 06 F1 | 	add	objptr, #60
13864     32 AD E2 FA | 	rdword	local04, objptr
13868     56 B7 52 F6 | 	abs	local09, local04 wc
1386c     01 B6 46 F0 | 	shr	local09, #1
13870     5B B7 82 F6 | 	negc	local09, local09
13874     02 64 06 F1 | 	add	objptr, #2
13878     32 B9 C2 FA | 	rdbyte	local10, objptr
1387c     3E 64 86 F1 | 	sub	objptr, #62
13880                 | ' i=numpar-1
13880                 | ' cpx=v.cursor_x/2 : cpy=v.cursor_y
13880                 | ' do
13880                 | LR__1682
13880     80 D0 BE FD | 	call	#_edit
13884     3D BB 02 F6 | 	mov	local11, result1
13888                 | ' 
13888                 | '   line$=edit()
13888                 | ' 
13888                 | '   if v.cursor_y=cpy+1 then
13888     3E 64 06 F1 | 	add	objptr, #62
1388c     32 97 C2 FA | 	rdbyte	arg03, objptr
13890     3E 64 86 F1 | 	sub	objptr, #62
13894     5C AD 02 F6 | 	mov	local04, local10
13898     01 AC 06 F1 | 	add	local04, #1
1389c     56 97 0A F2 | 	cmp	arg03, local04 wz
138a0     5C 00 90 5D |  if_ne	jmp	#LR__1685
138a4     5D 93 02 F6 | 	mov	arg01, local11
138a8     49 BD 02 F6 | 	mov	local12, arg01
138ac     D7 06 48 FB | 	callpa	#(@LR__1684-@LR__1683)>>2,fcache_load_ptr_
138b0                 | LR__1683
138b0     5E 7B CA FA | 	rdbyte	result1, local12 wz
138b4     01 BC 06 51 |  if_ne	add	local12, #1
138b8     F4 FF 9F 5D |  if_ne	jmp	#LR__1683
138bc                 | LR__1684
138bc     49 BD 82 F1 | 	sub	local12, arg01
138c0     5E 95 02 F6 | 	mov	arg02, local12
138c4     5B 95 82 F1 | 	sub	arg02, local09
138c8     38 00 00 FF 
138cc     B4 65 06 F1 | 	add	objptr, ##29108
138d0     32 AD 02 FB | 	rdlong	local04, objptr
138d4     38 00 00 FF 
138d8     B4 65 86 F1 | 	sub	objptr, ##29108
138dc     56 95 02 F1 | 	add	arg02, local04
138e0     5D 93 02 F6 | 	mov	arg01, local11
138e4     50 2D B1 FD | 	call	#__system__Right_S
138e8     3D 93 02 F6 | 	mov	arg01, result1
138ec     50 31 B1 FD | 	call	#__system__RTrim_S
138f0     3D 93 02 F6 | 	mov	arg01, result1
138f4     88 30 B1 FD | 	call	#__system__LTrim_S
138f8     3D BB 02 F6 | 	mov	local11, result1
138fc     14 00 90 FD | 	jmp	#LR__1686
13900                 | LR__1685
13900     5D 93 02 F6 | 	mov	arg01, local11
13904     38 31 B1 FD | 	call	#__system__RTrim_S
13908     3D 93 02 F6 | 	mov	arg01, result1
1390c     70 30 B1 FD | 	call	#__system__LTrim_S
13910     3D BB 02 F6 | 	mov	local11, result1
13914                 | LR__1686
13914                 | '   do
13914                 | LR__1687
13914     99 01 00 FF 
13918     BA 96 06 F6 | 	mov	arg03, ##@LR__6033
1391c     01 92 06 F6 | 	mov	arg01, #1
13920     5D 95 02 F6 | 	mov	arg02, local11
13924     D0 31 B1 FD | 	call	#__system__Instr
13928     3D BF 02 F6 | 	mov	local13, result1
1392c                 | '    comma=instr(1,line$,",")  
1392c                 | '    if comma>0  then 
1392c     01 BE 16 F2 | 	cmp	local13, #1 wc
13930     48 00 90 CD |  if_b	jmp	#LR__1690
13934     5F 95 02 F6 | 	mov	arg02, local13
13938     01 94 86 F1 | 	sub	arg02, #1
1393c     5D 93 02 F6 | 	mov	arg01, local11
13940     6C 2C B1 FD | 	call	#__system__Left_S
13944     3D C1 02 F6 | 	mov	local14, result1
13948     5D 93 02 F6 | 	mov	arg01, local11
1394c     49 BD 02 F6 | 	mov	local12, arg01
13950     D7 06 48 FB | 	callpa	#(@LR__1689-@LR__1688)>>2,fcache_load_ptr_
13954                 | LR__1688
13954     5E 7B CA FA | 	rdbyte	result1, local12 wz
13958     01 BC 06 51 |  if_ne	add	local12, #1
1395c     F4 FF 9F 5D |  if_ne	jmp	#LR__1688
13960                 | LR__1689
13960     49 BD 82 F1 | 	sub	local12, arg01
13964     5E 95 02 F6 | 	mov	arg02, local12
13968     5F 95 82 F1 | 	sub	arg02, local13
1396c     5D 93 02 F6 | 	mov	arg01, local11
13970     C4 2C B1 FD | 	call	#__system__Right_S
13974     3D BB 02 F6 | 	mov	local11, result1
13978     1C 00 90 FD | 	jmp	#LR__1691
1397c                 | LR__1690
1397c     5D 93 02 F6 | 	mov	arg01, local11
13980     BC 30 B1 FD | 	call	#__system__RTrim_S
13984     3D 93 02 F6 | 	mov	arg01, result1
13988     F4 2F B1 FD | 	call	#__system__LTrim_S
1398c     3D C1 02 F6 | 	mov	local14, result1
13990     99 01 00 FF 
13994     BC BA 06 F6 | 	mov	local11, ##@LR__6034
13998                 | LR__1691
13998     5A 95 02 F6 | 	mov	arg02, local08
1399c     02 94 66 F0 | 	shl	arg02, #2
139a0     E7 AC 02 F6 | 	mov	local04, fp
139a4     2C AC 06 F1 | 	add	local04, #44
139a8     56 95 02 F1 | 	add	arg02, local04
139ac     4A C1 62 FC | 	wrlong	local14, arg02
139b0     01 B4 86 F1 | 	sub	local08, #1
139b4     00 B4 56 F2 | 	cmps	local08, #0 wc
139b8     18 00 90 CD |  if_b	jmp	#LR__1692
139bc     99 01 00 FF 
139c0     BD 94 06 F6 | 	mov	arg02, ##@LR__6035
139c4     5D 93 02 F6 | 	mov	arg01, local11
139c8     64 13 B1 FD | 	call	#__system___string_cmp
139cc     00 7A 0E F2 | 	cmp	result1, #0 wz
139d0     40 FF 9F 5D |  if_ne	jmp	#LR__1687
139d4                 | LR__1692
139d4     00 B4 56 F2 | 	cmps	local08, #0 wc
139d8     A4 FE 9F 3D |  if_ae	jmp	#LR__1682
139dc                 | ' 
139dc                 | ' for i=0 to numpar-1
139dc     00 B4 06 F6 | 	mov	local08, #0
139e0     59 C3 02 F6 | 	mov	local15, local07
139e4                 | LR__1693
139e4     61 B5 52 F2 | 	cmps	local08, local15 wc
139e8     C8 06 90 3D |  if_ae	jmp	#LR__1726
139ec                 | ' 
139ec                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
139ec     5A AF 02 F6 | 	mov	local05, local08
139f0     02 AE 66 F0 | 	shl	local05, #2
139f4     E7 B0 02 F6 | 	mov	local06, fp
139f8     2C B0 06 F1 | 	add	local06, #44
139fc     58 AF 02 F1 | 	add	local05, local06
13a00     57 93 02 FB | 	rdlong	arg01, local05
13a04     4C 30 BF FD | 	call	#_isnum
13a08     3D B1 02 F6 | 	mov	local06, result1
13a0c     5A C5 02 F6 | 	mov	local16, local08
13a10     02 C4 66 F0 | 	shl	local16, #2
13a14     E7 C6 02 F6 | 	mov	local17, fp
13a18     2C C6 06 F1 | 	add	local17, #44
13a1c     63 C5 02 F1 | 	add	local16, local17
13a20     62 93 02 FB | 	rdlong	arg01, local16
13a24     18 34 BF FD | 	call	#_isint
13a28     07 7A 66 F7 | 	signx	result1, #7
13a2c     3D B1 2A F5 | 	andn	local06, result1 wz
13a30     54 00 00 5F 
13a34     C8 64 06 51 |  if_ne	add	objptr, ##43208
13a38     32 3D 68 5C |  if_ne	wrlong	#30, objptr
13a3c     54 00 00 5F 
13a40     C8 64 86 51 |  if_ne	sub	objptr, ##43208
13a44                 | '   if isint(args(i)) then r=result_int 
13a44     5A AD 02 F6 | 	mov	local04, local08
13a48     02 AC 66 F0 | 	shl	local04, #2
13a4c     E7 AE 02 F6 | 	mov	local05, fp
13a50     2C AE 06 F1 | 	add	local05, #44
13a54     57 AD 02 F1 | 	add	local04, local05
13a58     56 93 02 FB | 	rdlong	arg01, local04
13a5c     E0 33 BF FD | 	call	#_isint
13a60     00 7A 0E F2 | 	cmp	result1, #0 wz
13a64     54 00 00 5F 
13a68     C8 64 06 51 |  if_ne	add	objptr, ##43208
13a6c     32 39 68 5C |  if_ne	wrlong	#28, objptr
13a70     54 00 00 5F 
13a74     C8 64 86 51 |  if_ne	sub	objptr, ##43208
13a78                 | '   if isdec(args(i)) then r=result_uint 
13a78     5A AD 02 F6 | 	mov	local04, local08
13a7c     02 AC 66 F0 | 	shl	local04, #2
13a80     E7 AE 02 F6 | 	mov	local05, fp
13a84     2C AE 06 F1 | 	add	local05, #44
13a88     57 AD 02 F1 | 	add	local04, local05
13a8c     56 93 02 FB | 	rdlong	arg01, local04
13a90     50 36 BF FD | 	call	#_isdec
13a94     00 7A 0E F2 | 	cmp	result1, #0 wz
13a98     54 00 00 5F 
13a9c     C8 64 06 51 |  if_ne	add	objptr, ##43208
13aa0     32 3B 68 5C |  if_ne	wrlong	#29, objptr
13aa4     54 00 00 5F 
13aa8     C8 64 86 51 |  if_ne	sub	objptr, ##43208
13aac                 | '   if not isnum(args(i)) then 
13aac     5A AF 02 F6 | 	mov	local05, local08
13ab0     02 AE 66 F0 | 	shl	local05, #2
13ab4     E7 B0 02 F6 | 	mov	local06, fp
13ab8     2C B0 06 F1 | 	add	local06, #44
13abc     58 AF 02 F1 | 	add	local05, local06
13ac0     57 93 02 FB | 	rdlong	arg01, local05
13ac4     8C 2F BF FD | 	call	#_isnum
13ac8     07 7A 66 F7 | 	signx	result1, #7
13acc     3D 7B 22 F6 | 	not	result1, result1
13ad0     00 7A 0E F2 | 	cmp	result1, #0 wz
13ad4     E8 00 90 AD |  if_e	jmp	#LR__1698
13ad8     54 00 00 FF 
13adc     C8 64 06 F1 | 	add	objptr, ##43208
13ae0     32 57 68 FC | 	wrlong	#43, objptr
13ae4     54 00 00 FF 
13ae8     C8 64 86 F1 | 	sub	objptr, ##43208
13aec     60 93 02 F6 | 	mov	arg01, local14
13af0     49 BD 02 F6 | 	mov	local12, arg01
13af4     D7 06 48 FB | 	callpa	#(@LR__1695-@LR__1694)>>2,fcache_load_ptr_
13af8                 | LR__1694
13af8     5E 7B CA FA | 	rdbyte	result1, local12 wz
13afc     01 BC 06 51 |  if_ne	add	local12, #1
13b00     F4 FF 9F 5D |  if_ne	jmp	#LR__1694
13b04                 | LR__1695
13b04     49 BD 82 F1 | 	sub	local12, arg01
13b08     5E C9 02 F6 | 	mov	local18, local12
13b0c     54 00 00 FF 
13b10     50 64 06 F1 | 	add	objptr, ##43088
13b14     32 93 02 FB | 	rdlong	arg01, objptr
13b18     64 93 82 F1 | 	sub	arg01, local18
13b1c     04 92 86 F1 | 	sub	arg01, #4
13b20     03 92 26 F5 | 	andn	arg01, #3
13b24     32 93 62 FC | 	wrlong	arg01, objptr
13b28     54 00 00 FF 
13b2c     50 64 86 F1 | 	sub	objptr, ##43088
13b30     64 95 02 F6 | 	mov	arg02, local18
13b34     9C D6 B0 FD | 	call	#_pslpoke
13b38                 | '     pslpoke memtop,l
13b38                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
13b38     01 CA 06 F6 | 	mov	local19, #1
13b3c     64 CD 02 F6 | 	mov	local20, local18
13b40     01 CC 06 F1 | 	add	local20, #1
13b44                 | LR__1696
13b44     66 CB 52 F2 | 	cmps	local19, local20 wc
13b48     60 00 90 3D |  if_ae	jmp	#LR__1697
13b4c     54 00 00 FF 
13b50     50 64 06 F1 | 	add	objptr, ##43088
13b54     32 AD 02 FB | 	rdlong	local04, objptr
13b58     54 00 00 FF 
13b5c     50 64 86 F1 | 	sub	objptr, ##43088
13b60     03 AC 06 F1 | 	add	local04, #3
13b64     65 AD 02 F1 | 	add	local04, local19
13b68     5A C5 02 F6 | 	mov	local16, local08
13b6c     02 C4 66 F0 | 	shl	local16, #2
13b70     E7 C6 02 F6 | 	mov	local17, fp
13b74     2C C6 06 F1 | 	add	local17, #44
13b78     63 C5 02 F1 | 	add	local16, local17
13b7c     62 93 02 FB | 	rdlong	arg01, local16
13b80     65 B1 02 F6 | 	mov	local06, local19
13b84     01 C4 06 F6 | 	mov	local16, #1
13b88     58 95 02 F6 | 	mov	arg02, local06
13b8c     01 96 06 F6 | 	mov	arg03, #1
13b90     34 2B B1 FD | 	call	#__system__Mid_S
13b94     3D AF 02 F6 | 	mov	local05, result1
13b98     57 95 C2 FA | 	rdbyte	arg02, local05
13b9c     56 93 02 F6 | 	mov	arg01, local04
13ba0     C0 D6 B0 FD | 	call	#_pspoke
13ba4     01 CA 06 F1 | 	add	local19, #1
13ba8     98 FF 9F FD | 	jmp	#LR__1696
13bac                 | LR__1697
13bac     54 00 00 FF 
13bb0     50 64 06 F1 | 	add	objptr, ##43088
13bb4     32 CF 02 FB | 	rdlong	local21, objptr
13bb8     54 00 00 FF 
13bbc     50 64 86 F1 | 	sub	objptr, ##43088
13bc0                 | LR__1698
13bc0     AC 9A BF FD | 	call	#_pop
13bc4     3D D1 02 F6 | 	mov	local22, result1
13bc8     3E D3 02 F6 | 	mov	local23, result2
13bcc     3F AD 02 F6 | 	mov	local04, result3
13bd0     68 A7 02 F6 | 	mov	local01, local22
13bd4     69 A9 02 F6 | 	mov	local02, local23
13bd8     56 AB 02 F6 | 	mov	local03, local04
13bdc     54 D5 02 F6 | 	mov	local24, local02
13be0                 | '   t1=pop() : vartype=t1.result.twowords(1)
13be0                 | '   select case vartype
13be0     6A D7 0A F6 | 	mov	local25, local24 wz
13be4     64 00 90 AD |  if_e	jmp	#LR__1699
13be8     00 D7 0E F2 | 	cmp	local25, #256 wz
13bec     64 00 90 AD |  if_e	jmp	#LR__1700
13bf0     01 D7 0E F2 | 	cmp	local25, #257 wz
13bf4     64 00 90 AD |  if_e	jmp	#LR__1701
13bf8     02 D7 0E F2 | 	cmp	local25, #258 wz
13bfc     64 00 90 AD |  if_e	jmp	#LR__1702
13c00     03 D7 0E F2 | 	cmp	local25, #259 wz
13c04     64 00 90 AD |  if_e	jmp	#LR__1703
13c08     04 D7 0E F2 | 	cmp	local25, #260 wz
13c0c     64 00 90 AD |  if_e	jmp	#LR__1704
13c10     05 D7 0E F2 | 	cmp	local25, #261 wz
13c14     64 00 90 AD |  if_e	jmp	#LR__1705
13c18     06 D7 0E F2 | 	cmp	local25, #262 wz
13c1c     64 00 90 AD |  if_e	jmp	#LR__1706
13c20     07 D7 0E F2 | 	cmp	local25, #263 wz
13c24     64 00 90 AD |  if_e	jmp	#LR__1707
13c28     08 D7 0E F2 | 	cmp	local25, #264 wz
13c2c     64 00 90 AD |  if_e	jmp	#LR__1708
13c30     09 D7 0E F2 | 	cmp	local25, #265 wz
13c34     64 00 90 AD |  if_e	jmp	#LR__1709
13c38     0A D7 0E F2 | 	cmp	local25, #266 wz
13c3c     64 00 90 AD |  if_e	jmp	#LR__1710
13c40     0B D7 0E F2 | 	cmp	local25, #267 wz
13c44     64 00 90 AD |  if_e	jmp	#LR__1711
13c48     68 00 90 FD | 	jmp	#LR__1712
13c4c                 | LR__1699
13c4c     0C D8 06 F6 | 	mov	local26, #12
13c50     64 00 90 FD | 	jmp	#LR__1713
13c54                 | LR__1700
13c54     0C D8 06 F6 | 	mov	local26, #12
13c58     5C 00 90 FD | 	jmp	#LR__1713
13c5c                 | LR__1701
13c5c     01 D8 06 F6 | 	mov	local26, #1
13c60     54 00 90 FD | 	jmp	#LR__1713
13c64                 | LR__1702
13c64     01 D8 06 F6 | 	mov	local26, #1
13c68     4C 00 90 FD | 	jmp	#LR__1713
13c6c                 | LR__1703
13c6c     02 D8 06 F6 | 	mov	local26, #2
13c70     44 00 90 FD | 	jmp	#LR__1713
13c74                 | LR__1704
13c74     02 D8 06 F6 | 	mov	local26, #2
13c78     3C 00 90 FD | 	jmp	#LR__1713
13c7c                 | LR__1705
13c7c     04 D8 06 F6 | 	mov	local26, #4
13c80     34 00 90 FD | 	jmp	#LR__1713
13c84                 | LR__1706
13c84     04 D8 06 F6 | 	mov	local26, #4
13c88     2C 00 90 FD | 	jmp	#LR__1713
13c8c                 | LR__1707
13c8c     08 D8 06 F6 | 	mov	local26, #8
13c90     24 00 90 FD | 	jmp	#LR__1713
13c94                 | LR__1708
13c94     08 D8 06 F6 | 	mov	local26, #8
13c98     1C 00 90 FD | 	jmp	#LR__1713
13c9c                 | LR__1709
13c9c     06 D8 06 F6 | 	mov	local26, #6
13ca0     14 00 90 FD | 	jmp	#LR__1713
13ca4                 | LR__1710
13ca4     08 D8 06 F6 | 	mov	local26, #8
13ca8     0C 00 90 FD | 	jmp	#LR__1713
13cac                 | LR__1711
13cac     05 D8 06 F6 | 	mov	local26, #5
13cb0     04 00 90 FD | 	jmp	#LR__1713
13cb4                 | LR__1712
13cb4     0C D8 06 F6 | 	mov	local26, #12
13cb8                 | LR__1713
13cb8                 | '   if esize=12 andalso t1.result.uresult<$80000 then
13cb8     0C D8 0E F2 | 	cmp	local26, #12 wz
13cbc     34 01 90 5D |  if_ne	jmp	#LR__1717
13cc0     00 04 00 FF 
13cc4     00 A6 16 F2 | 	cmp	local01, ##524288 wc
13cc8     28 01 90 3D |  if_ae	jmp	#LR__1717
13ccc                 | '     if r=result_int then lpoke t1.result.uresult, val%(args(i))
13ccc     54 00 00 FF 
13cd0     C8 64 06 F1 | 	add	objptr, ##43208
13cd4     32 D1 02 FB | 	rdlong	local22, objptr
13cd8     54 00 00 FF 
13cdc     C8 64 86 F1 | 	sub	objptr, ##43208
13ce0     1C D0 0E F2 | 	cmp	local22, #28 wz
13ce4     2C 00 90 5D |  if_ne	jmp	#LR__1714
13ce8     5A AF 02 F6 | 	mov	local05, local08
13cec     02 AE 66 F0 | 	shl	local05, #2
13cf0     E7 B0 02 F6 | 	mov	local06, fp
13cf4     2C B0 06 F1 | 	add	local06, #44
13cf8     58 AF 02 F1 | 	add	local05, local06
13cfc     57 93 02 FB | 	rdlong	arg01, local05
13d00     00 94 06 F6 | 	mov	arg02, #0
13d04     54 3D B1 FD | 	call	#__system____builtin_atoi
13d08     3D 95 02 F6 | 	mov	arg02, result1
13d0c     53 93 02 F6 | 	mov	arg01, local01
13d10     49 95 62 FC | 	wrlong	arg02, arg01
13d14                 | LR__1714
13d14                 | '     if r=result_uint then lpoke t1.result.uresult, val%(args(i))
13d14     54 00 00 FF 
13d18     C8 64 06 F1 | 	add	objptr, ##43208
13d1c     32 D1 02 FB | 	rdlong	local22, objptr
13d20     54 00 00 FF 
13d24     C8 64 86 F1 | 	sub	objptr, ##43208
13d28     1D D0 0E F2 | 	cmp	local22, #29 wz
13d2c     2C 00 90 5D |  if_ne	jmp	#LR__1715
13d30     5A AF 02 F6 | 	mov	local05, local08
13d34     02 AE 66 F0 | 	shl	local05, #2
13d38     E7 B0 02 F6 | 	mov	local06, fp
13d3c     2C B0 06 F1 | 	add	local06, #44
13d40     58 AF 02 F1 | 	add	local05, local06
13d44     57 93 02 FB | 	rdlong	arg01, local05
13d48     00 94 06 F6 | 	mov	arg02, #0
13d4c     0C 3D B1 FD | 	call	#__system____builtin_atoi
13d50     3D 95 02 F6 | 	mov	arg02, result1
13d54     53 93 02 F6 | 	mov	arg01, local01
13d58     49 95 62 FC | 	wrlong	arg02, arg01
13d5c                 | LR__1715
13d5c                 | '     if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
13d5c     54 00 00 FF 
13d60     C8 64 06 F1 | 	add	objptr, ##43208
13d64     32 D1 02 FB | 	rdlong	local22, objptr
13d68     54 00 00 FF 
13d6c     C8 64 86 F1 | 	sub	objptr, ##43208
13d70     1E D0 0E F2 | 	cmp	local22, #30 wz
13d74     3C 00 90 5D |  if_ne	jmp	#LR__1716
13d78     5A AD 02 F6 | 	mov	local04, local08
13d7c     02 AC 66 F0 | 	shl	local04, #2
13d80     E7 AE 02 F6 | 	mov	local05, fp
13d84     2C AE 06 F1 | 	add	local05, #44
13d88     57 AD 02 F1 | 	add	local04, local05
13d8c     56 93 02 FB | 	rdlong	arg01, local04
13d90     60 3E B1 FD | 	call	#__system____builtin_atof
13d94     28 CE 05 F1 | 	add	fp, #40
13d98     E7 7A 62 FC | 	wrlong	result1, fp
13d9c     E7 92 02 F6 | 	mov	arg01, fp
13da0     28 CE 85 F1 | 	sub	fp, #40
13da4     49 7B 02 FB | 	rdlong	result1, arg01
13da8     3D 95 02 F6 | 	mov	arg02, result1
13dac     53 93 02 F6 | 	mov	arg01, local01
13db0     49 95 62 FC | 	wrlong	arg02, arg01
13db4                 | LR__1716
13db4                 | '     if r=result_string2 then lpoke t1.result.uresult,stringaddr
13db4     54 00 00 FF 
13db8     C8 64 06 F1 | 	add	objptr, ##43208
13dbc     32 D1 02 FB | 	rdlong	local22, objptr
13dc0     2B D0 0E F2 | 	cmp	local22, #43 wz
13dc4     53 93 02 A6 |  if_e	mov	arg01, local01
13dc8     67 95 02 A6 |  if_e	mov	arg02, local21
13dcc     49 95 62 AC |  if_e	wrlong	arg02, arg01
13dd0     53 D1 02 F6 | 	mov	local22, local01
13dd4     08 D0 06 F1 | 	add	local22, #8
13dd8     32 AD 02 FB | 	rdlong	local04, objptr
13ddc     54 00 00 FF 
13de0     C8 64 86 F1 | 	sub	objptr, ##43208
13de4     56 D3 02 F6 | 	mov	local23, local04
13de8     68 93 02 F6 | 	mov	arg01, local22
13dec     69 95 02 F6 | 	mov	arg02, local23
13df0     49 95 62 FC | 	wrlong	arg02, arg01
13df4                 | LR__1717
13df4                 | '   if esize=12 andalso t1.result.uresult>=$80000 then
13df4     0C D8 0E F2 | 	cmp	local26, #12 wz
13df8     38 01 90 5D |  if_ne	jmp	#LR__1721
13dfc     00 04 00 FF 
13e00     00 A6 16 F2 | 	cmp	local01, ##524288 wc
13e04     2C 01 90 CD |  if_b	jmp	#LR__1721
13e08                 | '     if r=result_int then pslpoke t1.result.uresult, val%(args(i))
13e08     54 00 00 FF 
13e0c     C8 64 06 F1 | 	add	objptr, ##43208
13e10     32 D1 02 FB | 	rdlong	local22, objptr
13e14     54 00 00 FF 
13e18     C8 64 86 F1 | 	sub	objptr, ##43208
13e1c     1C D0 0E F2 | 	cmp	local22, #28 wz
13e20     2C 00 90 5D |  if_ne	jmp	#LR__1718
13e24     5A AF 02 F6 | 	mov	local05, local08
13e28     02 AE 66 F0 | 	shl	local05, #2
13e2c     E7 B0 02 F6 | 	mov	local06, fp
13e30     2C B0 06 F1 | 	add	local06, #44
13e34     58 AF 02 F1 | 	add	local05, local06
13e38     57 93 02 FB | 	rdlong	arg01, local05
13e3c     00 94 06 F6 | 	mov	arg02, #0
13e40     18 3C B1 FD | 	call	#__system____builtin_atoi
13e44     3D 95 02 F6 | 	mov	arg02, result1
13e48     53 93 02 F6 | 	mov	arg01, local01
13e4c     84 D3 B0 FD | 	call	#_pslpoke
13e50                 | LR__1718
13e50                 | '     if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
13e50     54 00 00 FF 
13e54     C8 64 06 F1 | 	add	objptr, ##43208
13e58     32 D1 02 FB | 	rdlong	local22, objptr
13e5c     54 00 00 FF 
13e60     C8 64 86 F1 | 	sub	objptr, ##43208
13e64     1D D0 0E F2 | 	cmp	local22, #29 wz
13e68     2C 00 90 5D |  if_ne	jmp	#LR__1719
13e6c     5A AF 02 F6 | 	mov	local05, local08
13e70     02 AE 66 F0 | 	shl	local05, #2
13e74     E7 B0 02 F6 | 	mov	local06, fp
13e78     2C B0 06 F1 | 	add	local06, #44
13e7c     58 AF 02 F1 | 	add	local05, local06
13e80     57 93 02 FB | 	rdlong	arg01, local05
13e84     00 94 06 F6 | 	mov	arg02, #0
13e88     D0 3B B1 FD | 	call	#__system____builtin_atoi
13e8c     3D 95 02 F6 | 	mov	arg02, result1
13e90     53 93 02 F6 | 	mov	arg01, local01
13e94     3C D3 B0 FD | 	call	#_pslpoke
13e98                 | LR__1719
13e98                 | '     if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
13e98     54 00 00 FF 
13e9c     C8 64 06 F1 | 	add	objptr, ##43208
13ea0     32 D1 02 FB | 	rdlong	local22, objptr
13ea4     54 00 00 FF 
13ea8     C8 64 86 F1 | 	sub	objptr, ##43208
13eac     1E D0 0E F2 | 	cmp	local22, #30 wz
13eb0     38 00 90 5D |  if_ne	jmp	#LR__1720
13eb4     5A AD 02 F6 | 	mov	local04, local08
13eb8     02 AC 66 F0 | 	shl	local04, #2
13ebc     E7 AE 02 F6 | 	mov	local05, fp
13ec0     2C AE 06 F1 | 	add	local05, #44
13ec4     57 AD 02 F1 | 	add	local04, local05
13ec8     56 93 02 FB | 	rdlong	arg01, local04
13ecc     24 3D B1 FD | 	call	#__system____builtin_atof
13ed0     28 CE 05 F1 | 	add	fp, #40
13ed4     E7 7A 62 FC | 	wrlong	result1, fp
13ed8     E7 92 02 F6 | 	mov	arg01, fp
13edc     28 CE 85 F1 | 	sub	fp, #40
13ee0     49 95 02 FB | 	rdlong	arg02, arg01
13ee4     53 93 02 F6 | 	mov	arg01, local01
13ee8     E8 D2 B0 FD | 	call	#_pslpoke
13eec                 | LR__1720
13eec                 | '     if r=result_string2 then pslpoke t1.result.uresult,stringaddr
13eec     54 00 00 FF 
13ef0     C8 64 06 F1 | 	add	objptr, ##43208
13ef4     32 D1 02 FB | 	rdlong	local22, objptr
13ef8     54 00 00 FF 
13efc     C8 64 86 F1 | 	sub	objptr, ##43208
13f00     2B D0 0E F2 | 	cmp	local22, #43 wz
13f04     53 93 02 A6 |  if_e	mov	arg01, local01
13f08     67 95 02 A6 |  if_e	mov	arg02, local21
13f0c     C4 D2 B0 AD |  if_e	call	#_pslpoke
13f10     53 93 02 F6 | 	mov	arg01, local01
13f14     08 92 06 F1 | 	add	arg01, #8
13f18     54 00 00 FF 
13f1c     C8 64 06 F1 | 	add	objptr, ##43208
13f20     32 D3 02 FB | 	rdlong	local23, objptr
13f24     54 00 00 FF 
13f28     C8 64 86 F1 | 	sub	objptr, ##43208
13f2c     69 95 02 F6 | 	mov	arg02, local23
13f30     A0 D2 B0 FD | 	call	#_pslpoke
13f34                 | LR__1721
13f34                 | '   if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
13f34     05 D8 0E F2 | 	cmp	local26, #5 wz
13f38     54 00 00 AF 
13f3c     C8 64 06 A1 |  if_e	add	objptr, ##43208
13f40     32 D3 02 AB |  if_e	rdlong	local23, objptr
13f44     54 00 00 AF 
13f48     C8 64 86 A1 |  if_e	sub	objptr, ##43208
13f4c     2B D2 0E A2 |  if_e	cmp	local23, #43 wz
13f50     67 D3 02 A6 |  if_e	mov	local23, local21
13f54     53 93 02 A6 |  if_e	mov	arg01, local01
13f58     69 95 02 A6 |  if_e	mov	arg02, local23
13f5c     74 D2 B0 AD |  if_e	call	#_pslpoke
13f60                 | '   if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
13f60     04 D8 0E F2 | 	cmp	local26, #4 wz
13f64     48 00 90 5D |  if_ne	jmp	#LR__1722
13f68     54 00 00 FF 
13f6c     C8 64 06 F1 | 	add	objptr, ##43208
13f70     32 D3 02 FB | 	rdlong	local23, objptr
13f74     54 00 00 FF 
13f78     C8 64 86 F1 | 	sub	objptr, ##43208
13f7c     2B D2 0E F2 | 	cmp	local23, #43 wz
13f80     2C 00 90 AD |  if_e	jmp	#LR__1722
13f84     5A AF 02 F6 | 	mov	local05, local08
13f88     02 AE 66 F0 | 	shl	local05, #2
13f8c     E7 B0 02 F6 | 	mov	local06, fp
13f90     2C B0 06 F1 | 	add	local06, #44
13f94     58 AF 02 F1 | 	add	local05, local06
13f98     57 93 02 FB | 	rdlong	arg01, local05
13f9c     00 94 06 F6 | 	mov	arg02, #0
13fa0     B8 3A B1 FD | 	call	#__system____builtin_atoi
13fa4     3D 95 02 F6 | 	mov	arg02, result1
13fa8     53 93 02 F6 | 	mov	arg01, local01
13fac     24 D2 B0 FD | 	call	#_pslpoke
13fb0                 | LR__1722
13fb0                 | '   if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
13fb0     02 D8 0E F2 | 	cmp	local26, #2 wz
13fb4     48 00 90 5D |  if_ne	jmp	#LR__1723
13fb8     54 00 00 FF 
13fbc     C8 64 06 F1 | 	add	objptr, ##43208
13fc0     32 D3 02 FB | 	rdlong	local23, objptr
13fc4     54 00 00 FF 
13fc8     C8 64 86 F1 | 	sub	objptr, ##43208
13fcc     2B D2 0E F2 | 	cmp	local23, #43 wz
13fd0     2C 00 90 AD |  if_e	jmp	#LR__1723
13fd4     5A AF 02 F6 | 	mov	local05, local08
13fd8     02 AE 66 F0 | 	shl	local05, #2
13fdc     E7 B0 02 F6 | 	mov	local06, fp
13fe0     2C B0 06 F1 | 	add	local06, #44
13fe4     58 AF 02 F1 | 	add	local05, local06
13fe8     57 93 02 FB | 	rdlong	arg01, local05
13fec     00 94 06 F6 | 	mov	arg02, #0
13ff0     68 3A B1 FD | 	call	#__system____builtin_atoi
13ff4     3D 95 02 F6 | 	mov	arg02, result1
13ff8     53 93 02 F6 | 	mov	arg01, local01
13ffc     1C D2 B0 FD | 	call	#_psdpoke
14000                 | LR__1723
14000                 | '   if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
14000     01 D8 0E F2 | 	cmp	local26, #1 wz
14004     48 00 90 5D |  if_ne	jmp	#LR__1724
14008     54 00 00 FF 
1400c     C8 64 06 F1 | 	add	objptr, ##43208
14010     32 D3 02 FB | 	rdlong	local23, objptr
14014     54 00 00 FF 
14018     C8 64 86 F1 | 	sub	objptr, ##43208
1401c     2B D2 0E F2 | 	cmp	local23, #43 wz
14020     2C 00 90 AD |  if_e	jmp	#LR__1724
14024     5A AF 02 F6 | 	mov	local05, local08
14028     02 AE 66 F0 | 	shl	local05, #2
1402c     E7 B0 02 F6 | 	mov	local06, fp
14030     2C B0 06 F1 | 	add	local06, #44
14034     58 AF 02 F1 | 	add	local05, local06
14038     57 93 02 FB | 	rdlong	arg01, local05
1403c     00 94 06 F6 | 	mov	arg02, #0
14040     18 3A B1 FD | 	call	#__system____builtin_atoi
14044     3D 95 02 F6 | 	mov	arg02, result1
14048     53 93 02 F6 | 	mov	arg01, local01
1404c     14 D2 B0 FD | 	call	#_pspoke
14050                 | LR__1724
14050                 | '   if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
14050     06 D8 0E F2 | 	cmp	local26, #6 wz
14054     54 00 90 5D |  if_ne	jmp	#LR__1725
14058     54 00 00 FF 
1405c     C8 64 06 F1 | 	add	objptr, ##43208
14060     32 D3 02 FB | 	rdlong	local23, objptr
14064     54 00 00 FF 
14068     C8 64 86 F1 | 	sub	objptr, ##43208
1406c     2B D2 0E F2 | 	cmp	local23, #43 wz
14070     38 00 90 AD |  if_e	jmp	#LR__1725
14074     5A AD 02 F6 | 	mov	local04, local08
14078     02 AC 66 F0 | 	shl	local04, #2
1407c     E7 AE 02 F6 | 	mov	local05, fp
14080     2C AE 06 F1 | 	add	local05, #44
14084     57 AD 02 F1 | 	add	local04, local05
14088     56 93 02 FB | 	rdlong	arg01, local04
1408c     64 3B B1 FD | 	call	#__system____builtin_atof
14090     28 CE 05 F1 | 	add	fp, #40
14094     E7 7A 62 FC | 	wrlong	result1, fp
14098     E7 92 02 F6 | 	mov	arg01, fp
1409c     28 CE 85 F1 | 	sub	fp, #40
140a0     49 95 02 FB | 	rdlong	arg02, arg01
140a4     53 93 02 F6 | 	mov	arg01, local01
140a8     28 D1 B0 FD | 	call	#_pslpoke
140ac                 | LR__1725
140ac     01 B4 06 F1 | 	add	local08, #1
140b0     30 F9 9F FD | 	jmp	#LR__1693
140b4                 | LR__1726
140b4                 | LR__1727
140b4     E7 F0 03 F6 | 	mov	ptra, fp
140b8     F2 00 A0 FD | 	call	#popregs_
140bc                 | _do_input_ret
140bc     2D 00 64 FD | 	ret
140c0                 | 
140c0                 | ' 
140c0                 | ' ' ----------------  left$
140c0                 | ' 
140c0                 | ' sub do_left
140c0                 | _do_left
140c0     01 CA 05 F6 | 	mov	COUNT_, #1
140c4     E8 00 A0 FD | 	call	#pushregs_
140c8     14 F0 07 F1 | 	add	ptra, #20
140cc     4C 00 00 FF 
140d0     00 64 06 F1 | 	add	objptr, ##38912
140d4     32 97 02 FB | 	rdlong	arg03, objptr
140d8     4B 95 02 F6 | 	mov	arg02, arg03
140dc     01 94 66 F0 | 	shl	arg02, #1
140e0     4B 95 02 F1 | 	add	arg02, arg03
140e4     02 94 66 F0 | 	shl	arg02, #2
140e8     03 00 00 FF 
140ec     04 64 86 F1 | 	sub	objptr, ##1540
140f0     32 95 02 F1 | 	add	arg02, objptr
140f4     4A 97 02 FB | 	rdlong	arg03, arg02
140f8                 | ' 
140f8                 | ' numpar=compiledline(lineptr_e).result.uresult
140f8                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
140f8     02 96 0E F2 | 	cmp	arg03, #2 wz
140fc     48 00 00 FF 
14100     FC 65 86 F1 | 	sub	objptr, ##37372
14104     40 00 90 AD |  if_e	jmp	#LR__1730
14108     00 92 06 F6 | 	mov	arg01, #0
1410c     7C 61 B1 FD | 	call	#__system___getiolock_0622
14110     3D 93 02 F6 | 	mov	arg01, result1
14114     F0 0B B1 FD | 	call	#__system___lockmem
14118     99 01 00 FF 
1411c     BE 94 06 F6 | 	mov	arg02, ##@LR__6036
14120     00 92 06 F6 | 	mov	arg01, #0
14124     00 96 06 F6 | 	mov	arg03, #0
14128     D0 18 B1 FD | 	call	#__system___basic_print_string
1412c     00 92 06 F6 | 	mov	arg01, #0
14130     58 61 B1 FD | 	call	#__system___getiolock_0622
14134     3D 01 68 FC | 	wrlong	#0, result1
14138     27 92 06 F6 | 	mov	arg01, #39
1413c     00 94 06 F6 | 	mov	arg02, #0
14140     F4 CE B0 FD | 	call	#_printerror
14144     D8 00 90 FD | 	jmp	#LR__1733
14148                 | LR__1730
14148     24 95 BF FD | 	call	#_pop
1414c     3F 97 02 F6 | 	mov	arg03, result3
14150     E7 7A 62 FC | 	wrlong	result1, fp
14154     04 CE 05 F1 | 	add	fp, #4
14158     E7 7C 62 FC | 	wrlong	result2, fp
1415c     04 CE 05 F1 | 	add	fp, #4
14160     E7 96 62 FC | 	wrlong	arg03, fp
14164     08 CE 85 F1 | 	sub	fp, #8
14168     E7 92 02 F6 | 	mov	arg01, fp
1416c     DC 96 BF FD | 	call	#_converttoint
14170     3D A7 02 F6 | 	mov	local01, result1
14174     F8 94 BF FD | 	call	#_pop
14178     3F 97 02 F6 | 	mov	arg03, result3
1417c     E7 7A 62 FC | 	wrlong	result1, fp
14180     04 CE 05 F1 | 	add	fp, #4
14184     E7 7C 62 FC | 	wrlong	result2, fp
14188     04 CE 05 F1 | 	add	fp, #4
1418c     E7 96 62 FC | 	wrlong	arg03, fp
14190                 | ' t1=pop() : arg=converttoint(t1)
14190                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14190     08 CE 85 F1 | 	sub	fp, #8
14194     2B 96 0E F2 | 	cmp	arg03, #43 wz
14198     18 00 90 5D |  if_ne	jmp	#LR__1731
1419c     E7 92 02 FB | 	rdlong	arg01, fp
141a0     3C 96 BF FD | 	call	#_convertstring
141a4     E7 7A 62 FC | 	wrlong	result1, fp
141a8     08 CE 05 F1 | 	add	fp, #8
141ac     E7 3E 68 FC | 	wrlong	#31, fp
141b0     08 CE 85 F1 | 	sub	fp, #8
141b4                 | LR__1731
141b4                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
141b4     08 CE 05 F1 | 	add	fp, #8
141b8     E7 96 02 FB | 	rdlong	arg03, fp
141bc     08 CE 85 F1 | 	sub	fp, #8
141c0     1F 96 0E F2 | 	cmp	arg03, #31 wz
141c4     40 00 90 AD |  if_e	jmp	#LR__1732
141c8     00 92 06 F6 | 	mov	arg01, #0
141cc     BC 60 B1 FD | 	call	#__system___getiolock_0622
141d0     3D 93 02 F6 | 	mov	arg01, result1
141d4     30 0B B1 FD | 	call	#__system___lockmem
141d8     99 01 00 FF 
141dc     C6 94 06 F6 | 	mov	arg02, ##@LR__6037
141e0     00 92 06 F6 | 	mov	arg01, #0
141e4     00 96 06 F6 | 	mov	arg03, #0
141e8     10 18 B1 FD | 	call	#__system___basic_print_string
141ec     00 92 06 F6 | 	mov	arg01, #0
141f0     98 60 B1 FD | 	call	#__system___getiolock_0622
141f4     3D 01 68 FC | 	wrlong	#0, result1
141f8     0F 92 06 F6 | 	mov	arg01, #15
141fc     00 94 06 F6 | 	mov	arg02, #0
14200     34 CE B0 FD | 	call	#_printerror
14204     18 00 90 FD | 	jmp	#LR__1733
14208                 | LR__1732
14208     E7 92 02 FB | 	rdlong	arg01, fp
1420c     53 95 02 F6 | 	mov	arg02, local01
14210     9C 23 B1 FD | 	call	#__system__Left_S
14214     E7 7A 62 FC | 	wrlong	result1, fp
14218     E7 92 02 F6 | 	mov	arg01, fp
1421c     E0 94 BF FD | 	call	#_push
14220                 | LR__1733
14220     E7 F0 03 F6 | 	mov	ptra, fp
14224     F2 00 A0 FD | 	call	#popregs_
14228                 | _do_left_ret
14228     2D 00 64 FD | 	ret
1422c                 | 
1422c                 | ' 
1422c                 | ' ' ----------------  len
1422c                 | ' 
1422c                 | ' sub do_len
1422c                 | _do_len
1422c     01 CA 05 F6 | 	mov	COUNT_, #1
14230     E8 00 A0 FD | 	call	#pushregs_
14234     14 F0 07 F1 | 	add	ptra, #20
14238     4C 00 00 FF 
1423c     00 64 06 F1 | 	add	objptr, ##38912
14240     32 97 02 FB | 	rdlong	arg03, objptr
14244     4B 95 02 F6 | 	mov	arg02, arg03
14248     01 94 66 F0 | 	shl	arg02, #1
1424c     4B 95 02 F1 | 	add	arg02, arg03
14250     02 94 66 F0 | 	shl	arg02, #2
14254     03 00 00 FF 
14258     04 64 86 F1 | 	sub	objptr, ##1540
1425c     32 95 02 F1 | 	add	arg02, objptr
14260     4A 97 02 FB | 	rdlong	arg03, arg02
14264                 | ' 
14264                 | ' numpar=compiledline(lineptr_e).result.uresult
14264                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
14264     02 96 16 F2 | 	cmp	arg03, #2 wc
14268     48 00 00 FF 
1426c     FC 65 86 F1 | 	sub	objptr, ##37372
14270     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
14274     40 00 90 4D |  if_c_and_nz	jmp	#LR__1740
14278     00 92 06 F6 | 	mov	arg01, #0
1427c     0C 60 B1 FD | 	call	#__system___getiolock_0622
14280     3D 93 02 F6 | 	mov	arg01, result1
14284     80 0A B1 FD | 	call	#__system___lockmem
14288     99 01 00 FF 
1428c     CE 94 06 F6 | 	mov	arg02, ##@LR__6038
14290     00 92 06 F6 | 	mov	arg01, #0
14294     00 96 06 F6 | 	mov	arg03, #0
14298     60 17 B1 FD | 	call	#__system___basic_print_string
1429c     00 92 06 F6 | 	mov	arg01, #0
142a0     E8 5F B1 FD | 	call	#__system___getiolock_0622
142a4     3D 01 68 FC | 	wrlong	#0, result1
142a8     27 92 06 F6 | 	mov	arg01, #39
142ac     00 94 06 F6 | 	mov	arg02, #0
142b0     84 CD B0 FD | 	call	#_printerror
142b4     C8 00 90 FD | 	jmp	#LR__1745
142b8                 | LR__1740
142b8     B4 93 BF FD | 	call	#_pop
142bc     3F 97 02 F6 | 	mov	arg03, result3
142c0     E7 7A 62 FC | 	wrlong	result1, fp
142c4     04 CE 05 F1 | 	add	fp, #4
142c8     E7 7C 62 FC | 	wrlong	result2, fp
142cc     04 CE 05 F1 | 	add	fp, #4
142d0     E7 96 62 FC | 	wrlong	arg03, fp
142d4                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
142d4     08 CE 85 F1 | 	sub	fp, #8
142d8     2B 96 0E F2 | 	cmp	arg03, #43 wz
142dc     18 00 90 5D |  if_ne	jmp	#LR__1741
142e0     E7 92 02 FB | 	rdlong	arg01, fp
142e4     F8 94 BF FD | 	call	#_convertstring
142e8     E7 7A 62 FC | 	wrlong	result1, fp
142ec     08 CE 05 F1 | 	add	fp, #8
142f0     E7 3E 68 FC | 	wrlong	#31, fp
142f4     08 CE 85 F1 | 	sub	fp, #8
142f8                 | LR__1741
142f8                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
142f8     08 CE 05 F1 | 	add	fp, #8
142fc     E7 96 02 FB | 	rdlong	arg03, fp
14300     08 CE 85 F1 | 	sub	fp, #8
14304     1F 96 0E F2 | 	cmp	arg03, #31 wz
14308     40 00 90 AD |  if_e	jmp	#LR__1742
1430c     00 92 06 F6 | 	mov	arg01, #0
14310     78 5F B1 FD | 	call	#__system___getiolock_0622
14314     3D 93 02 F6 | 	mov	arg01, result1
14318     EC 09 B1 FD | 	call	#__system___lockmem
1431c     99 01 00 FF 
14320     D4 94 06 F6 | 	mov	arg02, ##@LR__6039
14324     00 92 06 F6 | 	mov	arg01, #0
14328     00 96 06 F6 | 	mov	arg03, #0
1432c     CC 16 B1 FD | 	call	#__system___basic_print_string
14330     00 92 06 F6 | 	mov	arg01, #0
14334     54 5F B1 FD | 	call	#__system___getiolock_0622
14338     3D 01 68 FC | 	wrlong	#0, result1
1433c     0F 92 06 F6 | 	mov	arg01, #15
14340     00 94 06 F6 | 	mov	arg02, #0
14344     F0 CC B0 FD | 	call	#_printerror
14348     34 00 90 FD | 	jmp	#LR__1745
1434c                 | LR__1742
1434c     E7 92 02 FB | 	rdlong	arg01, fp
14350     49 A7 02 F6 | 	mov	local01, arg01
14354     D7 06 48 FB | 	callpa	#(@LR__1744-@LR__1743)>>2,fcache_load_ptr_
14358                 | LR__1743
14358     53 7B CA FA | 	rdbyte	result1, local01 wz
1435c     01 A6 06 51 |  if_ne	add	local01, #1
14360     F4 FF 9F 5D |  if_ne	jmp	#LR__1743
14364                 | LR__1744
14364     49 A7 82 F1 | 	sub	local01, arg01
14368     E7 A6 62 FC | 	wrlong	local01, fp
1436c     08 CE 05 F1 | 	add	fp, #8
14370     E7 38 68 FC | 	wrlong	#28, fp
14374     08 CE 85 F1 | 	sub	fp, #8
14378     E7 92 02 F6 | 	mov	arg01, fp
1437c     80 93 BF FD | 	call	#_push
14380                 | LR__1745
14380     E7 F0 03 F6 | 	mov	ptra, fp
14384     F2 00 A0 FD | 	call	#popregs_
14388                 | _do_len_ret
14388     2D 00 64 FD | 	ret
1438c                 | 
1438c                 | ' 
1438c                 | ' ' ----------------  list
1438c                 | ' 
1438c                 | ' sub do_list
1438c                 | _do_list
1438c     04 CA 05 F6 | 	mov	COUNT_, #4
14390     E8 00 A0 FD | 	call	#pushregs_
14394     B8 F0 07 F1 | 	add	ptra, #184
14398     00 A6 06 F6 | 	mov	local01, #0
1439c     1E A8 CE F9 | 	bmask	local02, #30
143a0     4C 00 00 FF 
143a4     00 64 06 F1 | 	add	objptr, ##38912
143a8     32 AB 02 FB | 	rdlong	local03, objptr
143ac     55 97 02 F6 | 	mov	arg03, local03
143b0     01 96 66 F0 | 	shl	arg03, #1
143b4     55 97 02 F1 | 	add	arg03, local03
143b8     02 96 66 F0 | 	shl	arg03, #2
143bc     03 00 00 FF 
143c0     04 64 86 F1 | 	sub	objptr, ##1540
143c4     32 97 02 F1 | 	add	arg03, objptr
143c8     4B AD 02 FB | 	rdlong	local04, arg03
143cc                 | ' 
143cc                 | ' startline=0 : endline=$7FFFFFFF
143cc                 | ' numpar=compiledline(lineptr_e).result.uresult
143cc                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
143cc     01 AC 0E F2 | 	cmp	local04, #1 wz
143d0     48 00 00 FF 
143d4     FC 65 86 F1 | 	sub	objptr, ##37372
143d8     34 00 90 5D |  if_ne	jmp	#LR__1750
143dc     90 92 BF FD | 	call	#_pop
143e0     3F AB 02 F6 | 	mov	local03, result3
143e4     0C CE 05 F1 | 	add	fp, #12
143e8     E7 7A 62 FC | 	wrlong	result1, fp
143ec     04 CE 05 F1 | 	add	fp, #4
143f0     E7 7C 62 FC | 	wrlong	result2, fp
143f4     04 CE 05 F1 | 	add	fp, #4
143f8     E7 AA 62 FC | 	wrlong	local03, fp
143fc     08 CE 85 F1 | 	sub	fp, #8
14400     E7 92 02 F6 | 	mov	arg01, fp
14404     0C CE 85 F1 | 	sub	fp, #12
14408     40 94 BF FD | 	call	#_converttoint
1440c     3D A7 02 F6 | 	mov	local01, result1
14410                 | LR__1750
14410                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
14410     02 AC 0E F2 | 	cmp	local04, #2 wz
14414     68 00 90 5D |  if_ne	jmp	#LR__1751
14418     54 92 BF FD | 	call	#_pop
1441c     3F AB 02 F6 | 	mov	local03, result3
14420     0C CE 05 F1 | 	add	fp, #12
14424     E7 7A 62 FC | 	wrlong	result1, fp
14428     04 CE 05 F1 | 	add	fp, #4
1442c     E7 7C 62 FC | 	wrlong	result2, fp
14430     04 CE 05 F1 | 	add	fp, #4
14434     E7 AA 62 FC | 	wrlong	local03, fp
14438     08 CE 85 F1 | 	sub	fp, #8
1443c     E7 92 02 F6 | 	mov	arg01, fp
14440     0C CE 85 F1 | 	sub	fp, #12
14444     04 94 BF FD | 	call	#_converttoint
14448     3D A9 02 F6 | 	mov	local02, result1
1444c     20 92 BF FD | 	call	#_pop
14450     3F AB 02 F6 | 	mov	local03, result3
14454     0C CE 05 F1 | 	add	fp, #12
14458     E7 7A 62 FC | 	wrlong	result1, fp
1445c     04 CE 05 F1 | 	add	fp, #4
14460     E7 7C 62 FC | 	wrlong	result2, fp
14464     04 CE 05 F1 | 	add	fp, #4
14468     E7 AA 62 FC | 	wrlong	local03, fp
1446c     08 CE 85 F1 | 	sub	fp, #8
14470     E7 92 02 F6 | 	mov	arg01, fp
14474     0C CE 85 F1 | 	sub	fp, #12
14478     D0 93 BF FD | 	call	#_converttoint
1447c     3D A7 02 F6 | 	mov	local01, result1
14480                 | LR__1751
14480                 | ' 
14480                 | ' 
14480                 | ' print
14480     00 92 06 F6 | 	mov	arg01, #0
14484     04 5E B1 FD | 	call	#__system___getiolock_0622
14488     3D 93 02 F6 | 	mov	arg01, result1
1448c     78 08 B1 FD | 	call	#__system___lockmem
14490     00 92 06 F6 | 	mov	arg01, #0
14494     0A 94 06 F6 | 	mov	arg02, #10
14498     00 96 06 F6 | 	mov	arg03, #0
1449c     04 15 B1 FD | 	call	#__system___basic_print_char
144a0     00 92 06 F6 | 	mov	arg01, #0
144a4     E4 5D B1 FD | 	call	#__system___getiolock_0622
144a8     3D 01 68 FC | 	wrlong	#0, result1
144ac     4C 00 00 FF 
144b0     08 64 06 F1 | 	add	objptr, ##38920
144b4     32 AD 02 FB | 	rdlong	local04, objptr
144b8     08 00 00 FF 
144bc     CC 64 06 F1 | 	add	objptr, ##4300
144c0     32 AD 62 FC | 	wrlong	local04, objptr
144c4     54 00 00 FF 
144c8     D4 64 86 F1 | 	sub	objptr, ##43220
144cc                 | ' do 
144cc                 | LR__1752
144cc     E7 92 02 F6 | 	mov	arg01, fp
144d0     20 92 06 F1 | 	add	arg01, #32
144d4     54 00 00 FF 
144d8     D4 64 06 F1 | 	add	objptr, ##43220
144dc     32 95 02 FB | 	rdlong	arg02, objptr
144e0     18 96 06 F6 | 	mov	arg03, #24
144e4     49 00 00 FF 
144e8     08 64 86 F1 | 	sub	objptr, ##37384
144ec     A4 F8 B0 FD | 	call	#_psram_spin2_read1
144f0     0B 00 00 FF 
144f4     CC 64 86 F1 | 	sub	objptr, ##5836
144f8                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
144f8                 | '   
144f8                 | '   if header(0)<> $FFFFFFFF then
144f8     20 CE 05 F1 | 	add	fp, #32
144fc     E7 AC 02 FB | 	rdlong	local04, fp
14500     20 CE 85 F1 | 	sub	fp, #32
14504     FF FF 7F FF 
14508     FF AD 0E F2 | 	cmp	local04, ##-1 wz
1450c     9C 00 90 AD |  if_e	jmp	#LR__1754
14510     E7 92 02 F6 | 	mov	arg01, fp
14514     38 92 06 F1 | 	add	arg01, #56
14518     3F 96 06 F6 | 	mov	arg03, #63
1451c     28 96 62 FD | 	setq	arg03
14520     49 01 68 FC | 	wrlong	#0, arg01
14524     E7 92 02 F6 | 	mov	arg01, fp
14528     38 92 06 F1 | 	add	arg01, #56
1452c     28 CE 05 F1 | 	add	fp, #40
14530     E7 94 02 FB | 	rdlong	arg02, fp
14534     04 CE 05 F1 | 	add	fp, #4
14538     E7 96 02 FB | 	rdlong	arg03, fp
1453c     2C CE 85 F1 | 	sub	fp, #44
14540     0B 00 00 FF 
14544     CC 64 06 F1 | 	add	objptr, ##5836
14548     48 F8 B0 FD | 	call	#_psram_spin2_read1
1454c     0B 00 00 FF 
14550     CC 64 86 F1 | 	sub	objptr, ##5836
14554                 | '     longfill(linebuf,0,64)
14554                 | '     psram.read1(varptr(linebuf),header(2),header(3))
14554                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
14554     20 CE 05 F1 | 	add	fp, #32
14558     E7 AC 02 FB | 	rdlong	local04, fp
1455c     20 CE 85 F1 | 	sub	fp, #32
14560     53 AD 52 F2 | 	cmps	local04, local01 wc
14564     24 00 90 CD |  if_b	jmp	#LR__1753
14568     20 CE 05 F1 | 	add	fp, #32
1456c     E7 AA 02 FB | 	rdlong	local03, fp
14570     20 CE 85 F1 | 	sub	fp, #32
14574     54 AB 5A F2 | 	cmps	local03, local02 wcz
14578     10 00 90 1D |  if_a	jmp	#LR__1753
1457c     E7 92 02 F6 | 	mov	arg01, fp
14580     38 92 06 F1 | 	add	arg01, #56
14584                 | ' 
14584                 | ' write(text)
14584     10 EC B0 FD | 	call	#_hg010b_spin2_write
14588                 | ' crlf
14588     AC F0 B0 FD | 	call	#_hg010b_spin2_crlf
1458c                 | LR__1753
1458c     34 CE 05 F1 | 	add	fp, #52
14590     E7 AC 02 FB | 	rdlong	local04, fp
14594     34 CE 85 F1 | 	sub	fp, #52
14598     54 00 00 FF 
1459c     D4 64 06 F1 | 	add	objptr, ##43220
145a0     32 AD 62 FC | 	wrlong	local04, objptr
145a4     54 00 00 FF 
145a8     D4 64 86 F1 | 	sub	objptr, ##43220
145ac                 | LR__1754
145ac     34 CE 05 F1 | 	add	fp, #52
145b0     E7 AC 02 FB | 	rdlong	local04, fp
145b4     34 CE 85 F1 | 	sub	fp, #52
145b8     FF FF 3F FF 
145bc     FF AD 0E F2 | 	cmp	local04, ##2147483647 wz
145c0     20 CE 05 51 |  if_ne	add	fp, #32
145c4     E7 AA 02 5B |  if_ne	rdlong	local03, fp
145c8     20 CE 85 51 |  if_ne	sub	fp, #32
145cc     FF FF 7F 5F 
145d0     FF AB 0E 52 |  if_ne	cmp	local03, ##-1 wz
145d4     F4 FE 9F 5D |  if_ne	jmp	#LR__1752
145d8     E7 F0 03 F6 | 	mov	ptra, fp
145dc     F2 00 A0 FD | 	call	#popregs_
145e0                 | _do_list_ret
145e0     2D 00 64 FD | 	ret
145e4                 | 
145e4                 | ' 
145e4                 | ' '-------------------- load
145e4                 | ' 
145e4                 | ' sub do_load(amode=0 as integer)  
145e4                 | _do_load
145e4     07 CA 05 F6 | 	mov	COUNT_, #7
145e8     E8 00 A0 FD | 	call	#pushregs_
145ec     AC F0 07 F1 | 	add	ptra, #172
145f0     49 AD 02 F6 | 	mov	local04, arg01
145f4     54 00 00 FF 
145f8     8C 64 06 F1 | 	add	objptr, ##43148
145fc     32 03 68 FC | 	wrlong	#1, objptr
14600     08 00 00 FF 
14604     8C 64 86 F1 | 	sub	objptr, ##4236
14608     32 95 02 FB | 	rdlong	arg02, objptr
1460c     4A 93 02 F6 | 	mov	arg01, arg02
14610     01 92 66 F0 | 	shl	arg01, #1
14614     4A 93 02 F1 | 	add	arg01, arg02
14618     02 92 66 F0 | 	shl	arg01, #2
1461c     03 00 00 FF 
14620     04 64 86 F1 | 	sub	objptr, ##1540
14624     32 93 02 F1 | 	add	arg01, objptr
14628     49 AF 02 FB | 	rdlong	local05, arg01
1462c     E7 92 02 F6 | 	mov	arg01, fp
14630     A8 92 06 F1 | 	add	arg01, #168
14634     48 00 00 FF 
14638     FC 65 86 F1 | 	sub	objptr, ##37372
1463c     E7 94 02 F6 | 	mov	arg02, fp
14640     28 94 06 F1 | 	add	arg02, #40
14644     49 95 62 FC | 	wrlong	arg02, arg01
14648                 | ' 
14648                 | ' inload=1
14648                 | ' numpar=compiledline(lineptr_e).result.uresult
14648                 | ' lpoke varptr(line2$),varptr(line2)
14648                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
14648     01 AE 56 F2 | 	cmps	local05, #1 wc
1464c     14 00 90 CD |  if_b	jmp	#LR__1760
14650     1C 90 BF FD | 	call	#_pop
14654     3D A7 02 F6 | 	mov	local01, result1
14658     3E A9 02 F6 | 	mov	local02, result2
1465c     3F AB 02 F6 | 	mov	local03, result3
14660     18 00 90 FD | 	jmp	#LR__1761
14664                 | LR__1760
14664     54 00 00 FF 
14668     7C 64 06 F1 | 	add	objptr, ##43132
1466c     32 A7 02 FB | 	rdlong	local01, objptr
14670     54 00 00 FF 
14674     7C 64 86 F1 | 	sub	objptr, ##43132
14678     1F AA 06 F6 | 	mov	local03, #31
1467c                 | LR__1761
1467c                 | ' 'print "popped "; t1.result.uresult, t1.result_type
1467c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
1467c     2B AA 0E F2 | 	cmp	local03, #43 wz
14680     10 00 90 5D |  if_ne	jmp	#LR__1762
14684     53 93 02 F6 | 	mov	arg01, local01
14688     54 91 BF FD | 	call	#_convertstring
1468c     3D A7 02 F6 | 	mov	local01, result1
14690     1F AA 06 F6 | 	mov	local03, #31
14694                 | LR__1762
14694                 | ' if t1.result_type=result_string then
14694     1F AA 0E F2 | 	cmp	local03, #31 wz
14698     7C 02 90 5D |  if_ne	jmp	#LR__1766
1469c                 | '   if amode<>1234 then do_new
1469c     02 00 00 FF 
146a0     D2 AC 0E F2 | 	cmp	local04, ##1234 wz
146a4     D8 0D B0 5D |  if_ne	call	#_do_new
146a8                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
146a8     99 01 00 FF 
146ac     DA 94 06 F6 | 	mov	arg02, ##@LR__6040
146b0     53 93 02 F6 | 	mov	arg01, local01
146b4     78 06 B1 FD | 	call	#__system___string_cmp
146b8     00 7A 0E F2 | 	cmp	result1, #0 wz
146bc     54 00 00 AF 
146c0     7C 64 06 A1 |  if_e	add	objptr, ##43132
146c4     32 A7 02 AB |  if_e	rdlong	local01, objptr
146c8     54 00 00 FF 
146cc     7C 64 C6 F3 | 	sumz	objptr, ##43132
146d0     32 A7 62 5C |  if_ne	wrlong	local01, objptr
146d4     54 00 00 5F 
146d8     7C 64 86 51 |  if_ne	sub	objptr, ##43132
146dc                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
146dc     09 92 06 F6 | 	mov	arg01, #9
146e0     00 52 B1 FD | 	call	#__system__close
146e4     09 AE 06 F6 | 	mov	local05, #9
146e8     4C 00 00 FF 
146ec     14 64 06 F1 | 	add	objptr, ##38932
146f0     32 93 02 FB | 	rdlong	arg01, objptr
146f4     4C 00 00 FF 
146f8     14 64 86 F1 | 	sub	objptr, ##38932
146fc     99 01 00 FF 
14700     DB 94 06 F6 | 	mov	arg02, ##@LR__6041
14704     5C 06 B1 FD | 	call	#__system___string_concat
14708     3D 93 02 F6 | 	mov	arg01, result1
1470c     53 95 02 F6 | 	mov	arg02, local01
14710     50 06 B1 FD | 	call	#__system___string_concat
14714     3D 95 02 F6 | 	mov	arg02, result1
14718     57 93 02 F6 | 	mov	arg01, local05
1471c     00 96 06 F6 | 	mov	arg03, #0
14720     94 11 B1 FD | 	call	#__system___basic_open_string
14724     20 68 06 F1 | 	add	ptr___system__dat__, #32
14728     34 7B 0A FB | 	rdlong	result1, ptr___system__dat__ wz
1472c     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
14730     20 68 86 F1 | 	sub	ptr___system__dat__, #32
14734                 | '   r=geterr() 
14734                 | '   if r then 
14734     30 01 90 AD |  if_e	jmp	#LR__1764
14738                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
14738     09 92 06 F6 | 	mov	arg01, #9
1473c     A4 51 B1 FD | 	call	#__system__close
14740     09 B0 06 F6 | 	mov	local06, #9
14744     4C 00 00 FF 
14748     14 64 06 F1 | 	add	objptr, ##38932
1474c     32 93 02 FB | 	rdlong	arg01, objptr
14750     4C 00 00 FF 
14754     14 64 86 F1 | 	sub	objptr, ##38932
14758     99 01 00 FF 
1475c     DD 94 06 F6 | 	mov	arg02, ##@LR__6042
14760     00 06 B1 FD | 	call	#__system___string_concat
14764     3D 93 02 F6 | 	mov	arg01, result1
14768     53 95 02 F6 | 	mov	arg02, local01
1476c     F4 05 B1 FD | 	call	#__system___string_concat
14770     3D 93 02 F6 | 	mov	arg01, result1
14774     99 01 00 FF 
14778     DF 94 06 F6 | 	mov	arg02, ##@LR__6043
1477c     E4 05 B1 FD | 	call	#__system___string_concat
14780     3D 95 02 F6 | 	mov	arg02, result1
14784     58 93 02 F6 | 	mov	arg01, local06
14788     00 96 06 F6 | 	mov	arg03, #0
1478c     28 11 B1 FD | 	call	#__system___basic_open_string
14790     20 68 06 F1 | 	add	ptr___system__dat__, #32
14794     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
14798     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
1479c     20 68 86 F1 | 	sub	ptr___system__dat__, #32
147a0     3D B3 0A F6 | 	mov	local07, result1 wz
147a4                 | '     r=geterr() 
147a4                 | '     if r then 
147a4     8C 00 90 AD |  if_e	jmp	#LR__1763
147a8                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
147a8     00 92 06 F6 | 	mov	arg01, #0
147ac     DC 5A B1 FD | 	call	#__system___getiolock_0622
147b0     3D 93 02 F6 | 	mov	arg01, result1
147b4     50 05 B1 FD | 	call	#__system___lockmem
147b8     99 01 00 FF 
147bc     E4 94 06 F6 | 	mov	arg02, ##@LR__6044
147c0     00 92 06 F6 | 	mov	arg01, #0
147c4     00 96 06 F6 | 	mov	arg03, #0
147c8     30 12 B1 FD | 	call	#__system___basic_print_string
147cc     00 92 06 F6 | 	mov	arg01, #0
147d0     59 95 02 F6 | 	mov	arg02, local07
147d4     00 96 06 F6 | 	mov	arg03, #0
147d8     0A 98 06 F6 | 	mov	arg04, #10
147dc     60 12 B1 FD | 	call	#__system___basic_print_integer
147e0     99 01 00 FF 
147e4     F2 94 06 F6 | 	mov	arg02, ##@LR__6045
147e8     00 92 06 F6 | 	mov	arg01, #0
147ec     00 96 06 F6 | 	mov	arg03, #0
147f0     08 12 B1 FD | 	call	#__system___basic_print_string
147f4     59 93 02 F6 | 	mov	arg01, local07
147f8     BC 26 B1 FD | 	call	#__system___strerror
147fc     3D 95 02 F6 | 	mov	arg02, result1
14800     00 92 06 F6 | 	mov	arg01, #0
14804     00 96 06 F6 | 	mov	arg03, #0
14808     F0 11 B1 FD | 	call	#__system___basic_print_string
1480c     00 92 06 F6 | 	mov	arg01, #0
14810     0A 94 06 F6 | 	mov	arg02, #10
14814     00 96 06 F6 | 	mov	arg03, #0
14818     88 11 B1 FD | 	call	#__system___basic_print_char
1481c     00 92 06 F6 | 	mov	arg01, #0
14820     68 5A B1 FD | 	call	#__system___getiolock_0622
14824     3D 01 68 FC | 	wrlong	#0, result1
14828     09 92 06 F6 | 	mov	arg01, #9
1482c     B4 50 B1 FD | 	call	#__system__close
14830     94 01 90 FD | 	jmp	#LR__1768
14834                 | LR__1763
14834     54 00 00 FF 
14838     7C 64 06 F1 | 	add	objptr, ##43132
1483c     32 93 02 FB | 	rdlong	arg01, objptr
14840     54 00 00 FF 
14844     7C 64 86 F1 | 	sub	objptr, ##43132
14848     99 01 00 FF 
1484c     F5 94 06 F6 | 	mov	arg02, ##@LR__6046
14850     10 05 B1 FD | 	call	#__system___string_concat
14854     54 00 00 FF 
14858     7C 64 06 F1 | 	add	objptr, ##43132
1485c     32 7B 62 FC | 	wrlong	result1, objptr
14860     54 00 00 FF 
14864     7C 64 86 F1 | 	sub	objptr, ##43132
14868                 | LR__1764
14868                 | '   close #9: open currentdir$+"/"+loadname for input as #9
14868     09 92 06 F6 | 	mov	arg01, #9
1486c     74 50 B1 FD | 	call	#__system__close
14870     09 B0 06 F6 | 	mov	local06, #9
14874     4C 00 00 FF 
14878     14 64 06 F1 | 	add	objptr, ##38932
1487c     32 93 02 FB | 	rdlong	arg01, objptr
14880     4C 00 00 FF 
14884     14 64 86 F1 | 	sub	objptr, ##38932
14888     99 01 00 FF 
1488c     FA 94 06 F6 | 	mov	arg02, ##@LR__6047
14890     D0 04 B1 FD | 	call	#__system___string_concat
14894     3D 93 02 F6 | 	mov	arg01, result1
14898     54 00 00 FF 
1489c     7C 64 06 F1 | 	add	objptr, ##43132
148a0     32 95 02 FB | 	rdlong	arg02, objptr
148a4     54 00 00 FF 
148a8     7C 64 86 F1 | 	sub	objptr, ##43132
148ac     B4 04 B1 FD | 	call	#__system___string_concat
148b0     3D 95 02 F6 | 	mov	arg02, result1
148b4     58 93 02 F6 | 	mov	arg01, local06
148b8     00 96 06 F6 | 	mov	arg03, #0
148bc     F8 0F B1 FD | 	call	#__system___basic_open_string
148c0                 | '   do
148c0                 | LR__1765
148c0     09 92 06 F6 | 	mov	arg01, #9
148c4     4C 06 B1 FD | 	call	#__system___basic_read_line
148c8     3D B1 02 F6 | 	mov	local06, result1
148cc     38 00 00 FF 
148d0     9C 65 06 F1 | 	add	objptr, ##29084
148d4     32 B1 62 FC | 	wrlong	local06, objptr
148d8     38 00 00 FF 
148dc     9C 65 86 F1 | 	sub	objptr, ##29084
148e0     64 D0 BE FD | 	call	#_interpret
148e4     38 00 00 FF 
148e8     9C 65 06 F1 | 	add	objptr, ##29084
148ec     32 93 02 FB | 	rdlong	arg01, objptr
148f0     38 00 00 FF 
148f4     9C 65 86 F1 | 	sub	objptr, ##29084
148f8     99 01 00 FF 
148fc     FC 94 06 F6 | 	mov	arg02, ##@LR__6048
14900     2C 04 B1 FD | 	call	#__system___string_cmp
14904     00 7A 0E F2 | 	cmp	result1, #0 wz
14908     B4 FF 9F 5D |  if_ne	jmp	#LR__1765
1490c                 | '   close #9   
1490c     09 92 06 F6 | 	mov	arg01, #9
14910     D0 4F B1 FD | 	call	#__system__close
14914     0C 00 90 FD | 	jmp	#LR__1767
14918                 | LR__1766
14918     1E 92 06 F6 | 	mov	arg01, #30
1491c     00 94 06 F6 | 	mov	arg02, #0
14920     14 C7 B0 FD | 	call	#_printerror
14924                 | LR__1767
14924                 | ' print "Loaded ";currentdir$+"/"+loadname
14924     00 92 06 F6 | 	mov	arg01, #0
14928     60 59 B1 FD | 	call	#__system___getiolock_0622
1492c     3D 93 02 F6 | 	mov	arg01, result1
14930     D4 03 B1 FD | 	call	#__system___lockmem
14934     99 01 00 FF 
14938     FD 94 06 F6 | 	mov	arg02, ##@LR__6049
1493c     00 92 06 F6 | 	mov	arg01, #0
14940     00 96 06 F6 | 	mov	arg03, #0
14944     B4 10 B1 FD | 	call	#__system___basic_print_string
14948     00 B2 06 F6 | 	mov	local07, #0
1494c     4C 00 00 FF 
14950     14 64 06 F1 | 	add	objptr, ##38932
14954     32 93 02 FB | 	rdlong	arg01, objptr
14958     4C 00 00 FF 
1495c     14 64 86 F1 | 	sub	objptr, ##38932
14960     99 01 00 FF 
14964     05 95 06 F6 | 	mov	arg02, ##@LR__6050
14968     F8 03 B1 FD | 	call	#__system___string_concat
1496c     3D 93 02 F6 | 	mov	arg01, result1
14970     54 00 00 FF 
14974     7C 64 06 F1 | 	add	objptr, ##43132
14978     32 95 02 FB | 	rdlong	arg02, objptr
1497c     54 00 00 FF 
14980     7C 64 86 F1 | 	sub	objptr, ##43132
14984     DC 03 B1 FD | 	call	#__system___string_concat
14988     3D 95 02 F6 | 	mov	arg02, result1
1498c     59 93 02 F6 | 	mov	arg01, local07
14990     00 96 06 F6 | 	mov	arg03, #0
14994     64 10 B1 FD | 	call	#__system___basic_print_string
14998     00 92 06 F6 | 	mov	arg01, #0
1499c     0A 94 06 F6 | 	mov	arg02, #10
149a0     00 96 06 F6 | 	mov	arg03, #0
149a4     FC 0F B1 FD | 	call	#__system___basic_print_char
149a8     00 92 06 F6 | 	mov	arg01, #0
149ac     DC 58 B1 FD | 	call	#__system___getiolock_0622
149b0     3D 01 68 FC | 	wrlong	#0, result1
149b4     54 00 00 FF 
149b8     8C 64 06 F1 | 	add	objptr, ##43148
149bc     32 01 68 FC | 	wrlong	#0, objptr
149c0     54 00 00 FF 
149c4     8C 64 86 F1 | 	sub	objptr, ##43148
149c8                 | LR__1768
149c8     E7 F0 03 F6 | 	mov	ptra, fp
149cc     F2 00 A0 FD | 	call	#popregs_
149d0                 | _do_load_ret
149d0     2D 00 64 FD | 	ret
149d4                 | 
149d4                 | ' 
149d4                 | ' '-------------------- log
149d4                 | ' 
149d4                 | ' sub do_log
149d4                 | _do_log
149d4     02 CA 05 F6 | 	mov	COUNT_, #2
149d8     E8 00 A0 FD | 	call	#pushregs_
149dc     14 F0 07 F1 | 	add	ptra, #20
149e0     4C 00 00 FF 
149e4     00 64 06 F1 | 	add	objptr, ##38912
149e8     32 97 02 FB | 	rdlong	arg03, objptr
149ec     4B 95 02 F6 | 	mov	arg02, arg03
149f0     01 94 66 F0 | 	shl	arg02, #1
149f4     4B 95 02 F1 | 	add	arg02, arg03
149f8     02 94 66 F0 | 	shl	arg02, #2
149fc     03 00 00 FF 
14a00     04 64 86 F1 | 	sub	objptr, ##1540
14a04     32 95 02 F1 | 	add	arg02, objptr
14a08     4A A7 0A FB | 	rdlong	local01, arg02 wz
14a0c                 | ' 
14a0c                 | ' numpar=compiledline(lineptr_e).result.uresult
14a0c                 | ' if numpar=0 orelse numpar>2 then print "log: "; : printerror(39) : return
14a0c     48 00 00 FF 
14a10     FC 65 86 F1 | 	sub	objptr, ##37372
14a14     03 A6 16 52 |  if_ne	cmp	local01, #3 wc
14a18     40 00 90 4D |  if_c_and_nz	jmp	#LR__1770
14a1c     00 92 06 F6 | 	mov	arg01, #0
14a20     68 58 B1 FD | 	call	#__system___getiolock_0622
14a24     3D 93 02 F6 | 	mov	arg01, result1
14a28     DC 02 B1 FD | 	call	#__system___lockmem
14a2c     99 01 00 FF 
14a30     07 95 06 F6 | 	mov	arg02, ##@LR__6051
14a34     00 92 06 F6 | 	mov	arg01, #0
14a38     00 96 06 F6 | 	mov	arg03, #0
14a3c     BC 0F B1 FD | 	call	#__system___basic_print_string
14a40     00 92 06 F6 | 	mov	arg01, #0
14a44     44 58 B1 FD | 	call	#__system___getiolock_0622
14a48     3D 01 68 FC | 	wrlong	#0, result1
14a4c     27 92 06 F6 | 	mov	arg01, #39
14a50     00 94 06 F6 | 	mov	arg02, #0
14a54     E0 C5 B0 FD | 	call	#_printerror
14a58     AC 00 90 FD | 	jmp	#LR__1773
14a5c                 | LR__1770
14a5c                 | ' if numpar=2 then 
14a5c     02 A6 0E F2 | 	cmp	local01, #2 wz
14a60     40 00 90 5D |  if_ne	jmp	#LR__1771
14a64     08 8C BF FD | 	call	#_pop
14a68     3F A7 02 F6 | 	mov	local01, result3
14a6c     E7 7A 62 FC | 	wrlong	result1, fp
14a70     04 CE 05 F1 | 	add	fp, #4
14a74     E7 7C 62 FC | 	wrlong	result2, fp
14a78     04 CE 05 F1 | 	add	fp, #4
14a7c     E7 A6 62 FC | 	wrlong	local01, fp
14a80     08 CE 85 F1 | 	sub	fp, #8
14a84     E7 92 02 F6 | 	mov	arg01, fp
14a88     7C 8E BF FD | 	call	#_converttofloat
14a8c     3D 95 02 F6 | 	mov	arg02, result1
14a90     FC 16 20 FF 
14a94     54 92 06 F6 | 	mov	arg01, ##1076754516
14a98     1C 39 B1 FD | 	call	#__system____builtin_logbase
14a9c     3D A9 02 F6 | 	mov	local02, result1
14aa0     08 00 90 FD | 	jmp	#LR__1772
14aa4                 | LR__1771
14aa4     00 C0 1F FF 
14aa8     00 A8 06 F6 | 	mov	local02, ##1065353216
14aac                 | LR__1772
14aac     C0 8B BF FD | 	call	#_pop
14ab0     3F A7 02 F6 | 	mov	local01, result3
14ab4     E7 7A 62 FC | 	wrlong	result1, fp
14ab8     04 CE 05 F1 | 	add	fp, #4
14abc     E7 7C 62 FC | 	wrlong	result2, fp
14ac0     04 CE 05 F1 | 	add	fp, #4
14ac4     E7 A6 62 FC | 	wrlong	local01, fp
14ac8     08 CE 85 F1 | 	sub	fp, #8
14acc     E7 92 02 F6 | 	mov	arg01, fp
14ad0     34 8E BF FD | 	call	#_converttofloat
14ad4     3D 95 02 F6 | 	mov	arg02, result1
14ad8     FC 16 20 FF 
14adc     54 92 06 F6 | 	mov	arg01, ##1076754516
14ae0     D4 38 B1 FD | 	call	#__system____builtin_logbase
14ae4     3D 93 02 F6 | 	mov	arg01, result1
14ae8     54 95 02 F6 | 	mov	arg02, local02
14aec     EC 2A B1 FD | 	call	#__system___float_div
14af0     E7 7A 62 FC | 	wrlong	result1, fp
14af4     08 CE 05 F1 | 	add	fp, #8
14af8     E7 3C 68 FC | 	wrlong	#30, fp
14afc     08 CE 85 F1 | 	sub	fp, #8
14b00     E7 92 02 F6 | 	mov	arg01, fp
14b04     F8 8B BF FD | 	call	#_push
14b08                 | LR__1773
14b08     E7 F0 03 F6 | 	mov	ptra, fp
14b0c     F2 00 A0 FD | 	call	#popregs_
14b10                 | _do_log_ret
14b10     2D 00 64 FD | 	ret
14b14                 | 
14b14                 | ' 
14b14                 | ' '-------------------- lpeek
14b14                 | ' 
14b14                 | ' sub do_lpeek
14b14                 | _do_lpeek
14b14     01 CA 05 F6 | 	mov	COUNT_, #1
14b18     E8 00 A0 FD | 	call	#pushregs_
14b1c     14 F0 07 F1 | 	add	ptra, #20
14b20     4C 8B BF FD | 	call	#_pop
14b24     E7 7A 62 FC | 	wrlong	result1, fp
14b28     04 CE 05 F1 | 	add	fp, #4
14b2c     E7 7C 62 FC | 	wrlong	result2, fp
14b30     04 CE 05 F1 | 	add	fp, #4
14b34     E7 7E 62 FC | 	wrlong	result3, fp
14b38     08 CE 85 F1 | 	sub	fp, #8
14b3c     E7 92 02 F6 | 	mov	arg01, fp
14b40     08 8D BF FD | 	call	#_converttoint
14b44     3D 93 02 F6 | 	mov	arg01, result1
14b48                 | ' 
14b48                 | ' t1=pop()
14b48                 | ' a=converttoint(t1)
14b48                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
14b48     00 04 00 FF 
14b4c     00 92 16 F2 | 	cmp	arg01, ##524288 wc
14b50     49 A7 02 CB |  if_b	rdlong	local01, arg01
14b54     08 00 90 CD |  if_b	jmp	#LR__1780
14b58     98 C7 B0 FD | 	call	#_pslpeek
14b5c     3D A7 02 F6 | 	mov	local01, result1
14b60                 | LR__1780
14b60     08 CE 05 F1 | 	add	fp, #8
14b64     E7 3A 68 FC | 	wrlong	#29, fp
14b68     08 CE 85 F1 | 	sub	fp, #8
14b6c     E7 A6 62 FC | 	wrlong	local01, fp
14b70     E7 92 02 F6 | 	mov	arg01, fp
14b74     88 8B BF FD | 	call	#_push
14b78     E7 F0 03 F6 | 	mov	ptra, fp
14b7c     F2 00 A0 FD | 	call	#popregs_
14b80                 | _do_lpeek_ret
14b80     2D 00 64 FD | 	ret
14b84                 | 
14b84                 | ' 
14b84                 | ' '-------------------- lpoke
14b84                 | ' 
14b84                 | ' sub do_lpoke
14b84                 | _do_lpoke
14b84     02 CA 05 F6 | 	mov	COUNT_, #2
14b88     E8 00 A0 FD | 	call	#pushregs_
14b8c     20 F0 07 F1 | 	add	ptra, #32
14b90     DC 8A BF FD | 	call	#_pop
14b94     3D 95 02 F6 | 	mov	arg02, result1
14b98     3E 93 02 F6 | 	mov	arg01, result2
14b9c     3F A7 02 F6 | 	mov	local01, result3
14ba0     E7 94 62 FC | 	wrlong	arg02, fp
14ba4     04 CE 05 F1 | 	add	fp, #4
14ba8     E7 92 62 FC | 	wrlong	arg01, fp
14bac     04 CE 05 F1 | 	add	fp, #4
14bb0     E7 A6 62 FC | 	wrlong	local01, fp
14bb4     08 CE 85 F1 | 	sub	fp, #8
14bb8     B4 8A BF FD | 	call	#_pop
14bbc     3F A7 02 F6 | 	mov	local01, result3
14bc0     0C CE 05 F1 | 	add	fp, #12
14bc4     E7 7A 62 FC | 	wrlong	result1, fp
14bc8     04 CE 05 F1 | 	add	fp, #4
14bcc     E7 7C 62 FC | 	wrlong	result2, fp
14bd0     04 CE 05 F1 | 	add	fp, #4
14bd4     E7 A6 62 FC | 	wrlong	local01, fp
14bd8     08 CE 85 F1 | 	sub	fp, #8
14bdc     E7 92 02 F6 | 	mov	arg01, fp
14be0     0C CE 85 F1 | 	sub	fp, #12
14be4     64 8C BF FD | 	call	#_converttoint
14be8     3D A7 02 F6 | 	mov	local01, result1
14bec     E7 92 02 F6 | 	mov	arg01, fp
14bf0     58 8C BF FD | 	call	#_converttoint
14bf4     3D A9 02 F6 | 	mov	local02, result1
14bf8                 | ' 
14bf8                 | ' t1=pop() 'value
14bf8                 | ' t2=pop() 
14bf8                 | ' a=converttoint(t2) : v=converttoint(t1)
14bf8                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
14bf8     00 04 00 FF 
14bfc     00 A6 16 F2 | 	cmp	local01, ##524288 wc
14c00     53 A9 62 CC |  if_b	wrlong	local02, local01
14c04     53 93 02 36 |  if_ae	mov	arg01, local01
14c08     54 95 02 36 |  if_ae	mov	arg02, local02
14c0c     C4 C5 B0 3D |  if_ae	call	#_pslpoke
14c10     E7 F0 03 F6 | 	mov	ptra, fp
14c14     F2 00 A0 FD | 	call	#popregs_
14c18                 | _do_lpoke_ret
14c18     2D 00 64 FD | 	ret
14c1c                 | 
14c1c                 | ' 
14c1c                 | ' '-------------------- memlo
14c1c                 | ' 
14c1c                 | ' sub do_memlo
14c1c                 | _do_memlo
14c1c     00 CA 05 F6 | 	mov	COUNT_, #0
14c20     E8 00 A0 FD | 	call	#pushregs_
14c24     0C F0 07 F1 | 	add	ptra, #12
14c28     44 00 00 FF 
14c2c     DC 65 06 F1 | 	add	objptr, ##35292
14c30     32 93 02 FB | 	rdlong	arg01, objptr
14c34     44 00 00 FF 
14c38     DC 65 86 F1 | 	sub	objptr, ##35292
14c3c     E7 92 62 FC | 	wrlong	arg01, fp
14c40     08 CE 05 F1 | 	add	fp, #8
14c44     E7 3A 68 FC | 	wrlong	#29, fp
14c48     08 CE 85 F1 | 	sub	fp, #8
14c4c     E7 92 02 F6 | 	mov	arg01, fp
14c50     AC 8A BF FD | 	call	#_push
14c54     E7 F0 03 F6 | 	mov	ptra, fp
14c58     F2 00 A0 FD | 	call	#popregs_
14c5c                 | _do_memlo_ret
14c5c     2D 00 64 FD | 	ret
14c60                 | 
14c60                 | ' 
14c60                 | ' '-------------------- memtop
14c60                 | ' 
14c60                 | ' sub do_memtop
14c60                 | _do_memtop
14c60     00 CA 05 F6 | 	mov	COUNT_, #0
14c64     E8 00 A0 FD | 	call	#pushregs_
14c68     0C F0 07 F1 | 	add	ptra, #12
14c6c     54 00 00 FF 
14c70     50 64 06 F1 | 	add	objptr, ##43088
14c74     32 93 02 FB | 	rdlong	arg01, objptr
14c78     54 00 00 FF 
14c7c     50 64 86 F1 | 	sub	objptr, ##43088
14c80     E7 92 62 FC | 	wrlong	arg01, fp
14c84     08 CE 05 F1 | 	add	fp, #8
14c88     E7 3A 68 FC | 	wrlong	#29, fp
14c8c     08 CE 85 F1 | 	sub	fp, #8
14c90     E7 92 02 F6 | 	mov	arg01, fp
14c94     68 8A BF FD | 	call	#_push
14c98     E7 F0 03 F6 | 	mov	ptra, fp
14c9c     F2 00 A0 FD | 	call	#popregs_
14ca0                 | _do_memtop_ret
14ca0     2D 00 64 FD | 	ret
14ca4                 | 
14ca4                 | ' 
14ca4                 | ' '-------------------- mid$
14ca4                 | ' 
14ca4                 | ' sub do_mid
14ca4                 | _do_mid
14ca4     02 CA 05 F6 | 	mov	COUNT_, #2
14ca8     E8 00 A0 FD | 	call	#pushregs_
14cac     18 F0 07 F1 | 	add	ptra, #24
14cb0     4C 00 00 FF 
14cb4     00 64 06 F1 | 	add	objptr, ##38912
14cb8     32 97 02 FB | 	rdlong	arg03, objptr
14cbc     4B 95 02 F6 | 	mov	arg02, arg03
14cc0     01 94 66 F0 | 	shl	arg02, #1
14cc4     4B 95 02 F1 | 	add	arg02, arg03
14cc8     02 94 66 F0 | 	shl	arg02, #2
14ccc     03 00 00 FF 
14cd0     04 64 86 F1 | 	sub	objptr, ##1540
14cd4     32 95 02 F1 | 	add	arg02, objptr
14cd8     4A 97 02 FB | 	rdlong	arg03, arg02
14cdc                 | ' 
14cdc                 | ' numpar=compiledline(lineptr_e).result.uresult
14cdc                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
14cdc     03 96 0E F2 | 	cmp	arg03, #3 wz
14ce0     48 00 00 FF 
14ce4     FC 65 86 F1 | 	sub	objptr, ##37372
14ce8     40 00 90 AD |  if_e	jmp	#LR__1790
14cec     00 92 06 F6 | 	mov	arg01, #0
14cf0     98 55 B1 FD | 	call	#__system___getiolock_0622
14cf4     3D 93 02 F6 | 	mov	arg01, result1
14cf8     0C 00 B1 FD | 	call	#__system___lockmem
14cfc     99 01 00 FF 
14d00     0D 95 06 F6 | 	mov	arg02, ##@LR__6052
14d04     00 92 06 F6 | 	mov	arg01, #0
14d08     00 96 06 F6 | 	mov	arg03, #0
14d0c     EC 0C B1 FD | 	call	#__system___basic_print_string
14d10     00 92 06 F6 | 	mov	arg01, #0
14d14     74 55 B1 FD | 	call	#__system___getiolock_0622
14d18     3D 01 68 FC | 	wrlong	#0, result1
14d1c     27 92 06 F6 | 	mov	arg01, #39
14d20     00 94 06 F6 | 	mov	arg02, #0
14d24     10 C3 B0 FD | 	call	#_printerror
14d28     08 01 90 FD | 	jmp	#LR__1793
14d2c                 | LR__1790
14d2c     40 89 BF FD | 	call	#_pop
14d30     3F 97 02 F6 | 	mov	arg03, result3
14d34     E7 7A 62 FC | 	wrlong	result1, fp
14d38     04 CE 05 F1 | 	add	fp, #4
14d3c     E7 7C 62 FC | 	wrlong	result2, fp
14d40     04 CE 05 F1 | 	add	fp, #4
14d44     E7 96 62 FC | 	wrlong	arg03, fp
14d48     08 CE 85 F1 | 	sub	fp, #8
14d4c     E7 92 02 F6 | 	mov	arg01, fp
14d50     F8 8A BF FD | 	call	#_converttoint
14d54     3D A7 02 F6 | 	mov	local01, result1
14d58     14 89 BF FD | 	call	#_pop
14d5c     3F 97 02 F6 | 	mov	arg03, result3
14d60     E7 7A 62 FC | 	wrlong	result1, fp
14d64     04 CE 05 F1 | 	add	fp, #4
14d68     E7 7C 62 FC | 	wrlong	result2, fp
14d6c     04 CE 05 F1 | 	add	fp, #4
14d70     E7 96 62 FC | 	wrlong	arg03, fp
14d74     08 CE 85 F1 | 	sub	fp, #8
14d78     E7 92 02 F6 | 	mov	arg01, fp
14d7c     CC 8A BF FD | 	call	#_converttoint
14d80     3D A9 02 F6 | 	mov	local02, result1
14d84     E8 88 BF FD | 	call	#_pop
14d88     3F 97 02 F6 | 	mov	arg03, result3
14d8c     E7 7A 62 FC | 	wrlong	result1, fp
14d90     04 CE 05 F1 | 	add	fp, #4
14d94     E7 7C 62 FC | 	wrlong	result2, fp
14d98     04 CE 05 F1 | 	add	fp, #4
14d9c     E7 96 62 FC | 	wrlong	arg03, fp
14da0                 | ' t1=pop() : arg2=converttoint(t1)
14da0                 | ' t1=pop() : arg1=converttoint(t1)
14da0                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14da0     08 CE 85 F1 | 	sub	fp, #8
14da4     2B 96 0E F2 | 	cmp	arg03, #43 wz
14da8     18 00 90 5D |  if_ne	jmp	#LR__1791
14dac     E7 92 02 FB | 	rdlong	arg01, fp
14db0     2C 8A BF FD | 	call	#_convertstring
14db4     E7 7A 62 FC | 	wrlong	result1, fp
14db8     08 CE 05 F1 | 	add	fp, #8
14dbc     E7 3E 68 FC | 	wrlong	#31, fp
14dc0     08 CE 85 F1 | 	sub	fp, #8
14dc4                 | LR__1791
14dc4                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
14dc4     08 CE 05 F1 | 	add	fp, #8
14dc8     E7 96 02 FB | 	rdlong	arg03, fp
14dcc     08 CE 85 F1 | 	sub	fp, #8
14dd0     1F 96 0E F2 | 	cmp	arg03, #31 wz
14dd4     40 00 90 AD |  if_e	jmp	#LR__1792
14dd8     00 92 06 F6 | 	mov	arg01, #0
14ddc     AC 54 B1 FD | 	call	#__system___getiolock_0622
14de0     3D 93 02 F6 | 	mov	arg01, result1
14de4     20 FF B0 FD | 	call	#__system___lockmem
14de8     99 01 00 FF 
14dec     14 95 06 F6 | 	mov	arg02, ##@LR__6053
14df0     00 92 06 F6 | 	mov	arg01, #0
14df4     00 96 06 F6 | 	mov	arg03, #0
14df8     00 0C B1 FD | 	call	#__system___basic_print_string
14dfc     00 92 06 F6 | 	mov	arg01, #0
14e00     88 54 B1 FD | 	call	#__system___getiolock_0622
14e04     3D 01 68 FC | 	wrlong	#0, result1
14e08     0F 92 06 F6 | 	mov	arg01, #15
14e0c     00 94 06 F6 | 	mov	arg02, #0
14e10     24 C2 B0 FD | 	call	#_printerror
14e14     1C 00 90 FD | 	jmp	#LR__1793
14e18                 | LR__1792
14e18     E7 92 02 FB | 	rdlong	arg01, fp
14e1c     54 95 02 F6 | 	mov	arg02, local02
14e20     53 97 02 F6 | 	mov	arg03, local01
14e24     A0 18 B1 FD | 	call	#__system__Mid_S
14e28     E7 7A 62 FC | 	wrlong	result1, fp
14e2c     E7 92 02 F6 | 	mov	arg01, fp
14e30     CC 88 BF FD | 	call	#_push
14e34                 | LR__1793
14e34     E7 F0 03 F6 | 	mov	ptra, fp
14e38     F2 00 A0 FD | 	call	#popregs_
14e3c                 | _do_mid_ret
14e3c     2D 00 64 FD | 	ret
14e40                 | 
14e40                 | ' 
14e40                 | ' '-------------------- mkdir
14e40                 | ' 
14e40                 | ' sub do_mkdir
14e40                 | _do_mkdir
14e40     04 CA 05 F6 | 	mov	COUNT_, #4
14e44     E8 00 A0 FD | 	call	#pushregs_
14e48     24 88 BF FD | 	call	#_pop
14e4c     3E 99 02 F6 | 	mov	arg04, result2
14e50     3F 97 02 F6 | 	mov	arg03, result3
14e54     3D A7 02 F6 | 	mov	local01, result1
14e58     4C A9 02 F6 | 	mov	local02, arg04
14e5c     4B AB 02 F6 | 	mov	local03, arg03
14e60                 | ' 
14e60                 | ' t1=pop()
14e60                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14e60     2B AA 0E F2 | 	cmp	local03, #43 wz
14e64     10 00 90 5D |  if_ne	jmp	#LR__1800
14e68     53 93 02 F6 | 	mov	arg01, local01
14e6c     70 89 BF FD | 	call	#_convertstring
14e70     3D A7 02 F6 | 	mov	local01, result1
14e74     1F AA 06 F6 | 	mov	local03, #31
14e78                 | LR__1800
14e78                 | ' if t1.result_type<>result_string then printerror(15): return
14e78     1F AA 0E F2 | 	cmp	local03, #31 wz
14e7c     10 00 90 AD |  if_e	jmp	#LR__1801
14e80     0F 92 06 F6 | 	mov	arg01, #15
14e84     00 94 06 F6 | 	mov	arg02, #0
14e88     AC C1 B0 FD | 	call	#_printerror
14e8c     64 00 90 FD | 	jmp	#LR__1803
14e90                 | LR__1801
14e90     53 93 02 F6 | 	mov	arg01, local01
14e94     68 1F B1 FD | 	call	#__system___mkdir
14e98     3D AD 0A F6 | 	mov	local04, result1 wz
14e9c                 | ' filename$=t1.result.sresult
14e9c                 | ' err=mkdir(filename$)
14e9c                 | ' 'err=geterr() : 
14e9c                 | ' if err<>0 then print "Cannot create a directory: system error "; err
14e9c     54 00 90 AD |  if_e	jmp	#LR__1802
14ea0     00 92 06 F6 | 	mov	arg01, #0
14ea4     E4 53 B1 FD | 	call	#__system___getiolock_0622
14ea8     3D 93 02 F6 | 	mov	arg01, result1
14eac     58 FE B0 FD | 	call	#__system___lockmem
14eb0     99 01 00 FF 
14eb4     1B 95 06 F6 | 	mov	arg02, ##@LR__6054
14eb8     00 92 06 F6 | 	mov	arg01, #0
14ebc     00 96 06 F6 | 	mov	arg03, #0
14ec0     38 0B B1 FD | 	call	#__system___basic_print_string
14ec4     00 92 06 F6 | 	mov	arg01, #0
14ec8     56 95 02 F6 | 	mov	arg02, local04
14ecc     00 96 06 F6 | 	mov	arg03, #0
14ed0     0A 98 06 F6 | 	mov	arg04, #10
14ed4     68 0B B1 FD | 	call	#__system___basic_print_integer
14ed8     00 92 06 F6 | 	mov	arg01, #0
14edc     0A 94 06 F6 | 	mov	arg02, #10
14ee0     00 96 06 F6 | 	mov	arg03, #0
14ee4     BC 0A B1 FD | 	call	#__system___basic_print_char
14ee8     00 92 06 F6 | 	mov	arg01, #0
14eec     9C 53 B1 FD | 	call	#__system___getiolock_0622
14ef0     3D 01 68 FC | 	wrlong	#0, result1
14ef4                 | LR__1802
14ef4                 | LR__1803
14ef4     E7 F0 03 F6 | 	mov	ptra, fp
14ef8     F2 00 A0 FD | 	call	#popregs_
14efc                 | _do_mkdir_ret
14efc     2D 00 64 FD | 	ret
14f00                 | 
14f00                 | ' 
14f00                 | ' '-------------------- mode
14f00                 | ' 
14f00                 | ' sub do_mode
14f00                 | _do_mode
14f00     05 CA 05 F6 | 	mov	COUNT_, #5
14f04     E8 00 A0 FD | 	call	#pushregs_
14f08     64 87 BF FD | 	call	#_pop
14f0c     3D A7 02 F6 | 	mov	local01, result1
14f10     3E A9 02 F6 | 	mov	local02, result2
14f14     3F AB 02 F6 | 	mov	local03, result3
14f18                 | ' t1=pop() 
14f18                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
14f18     1E AA 0E F2 | 	cmp	local03, #30 wz
14f1c     10 00 90 5D |  if_ne	jmp	#LR__1810
14f20     53 93 02 F6 | 	mov	arg01, local01
14f24     00 94 06 F6 | 	mov	arg02, #0
14f28     74 29 B1 FD | 	call	#__system___float_tointeger
14f2c     3D A7 02 F6 | 	mov	local01, result1
14f30                 | LR__1810
14f30                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
14f30     1F AA 0E F2 | 	cmp	local03, #31 wz
14f34     18 00 90 5D |  if_ne	jmp	#LR__1811
14f38     53 93 02 F6 | 	mov	arg01, local01
14f3c     B4 2C B1 FD | 	call	#__system____builtin_atof
14f40     3D 93 02 F6 | 	mov	arg01, result1
14f44     00 94 06 F6 | 	mov	arg02, #0
14f48     54 29 B1 FD | 	call	#__system___float_tointeger
14f4c     3D A7 02 F6 | 	mov	local01, result1
14f50                 | LR__1811
14f50                 | ' select case t1.result.iresult
14f50     53 AD 02 F6 | 	mov	local04, local01
14f54     06 AC 26 F3 | 	fle	local04, #6
14f58     30 AC 62 FD | 	jmprel	local04
14f5c                 | LR__1812
14f5c     18 00 90 FD | 	jmp	#LR__1813
14f60     A8 00 90 FD | 	jmp	#LR__1814
14f64     10 01 90 FD | 	jmp	#LR__1815
14f68     78 01 90 FD | 	jmp	#LR__1816
14f6c     E0 01 90 FD | 	jmp	#LR__1817
14f70     70 02 90 FD | 	jmp	#LR__1818
14f74     FC 02 90 FD | 	jmp	#LR__1819
14f78                 | LR__1813
14f78     38 00 00 FF 
14f7c     C0 65 06 F1 | 	add	objptr, ##29120
14f80     32 03 68 FC | 	wrlong	#1, objptr
14f84     04 64 86 F1 | 	sub	objptr, #4
14f88     32 35 69 FC | 	wrlong	#154, objptr
14f8c     19 00 00 FF 
14f90     00 65 06 F1 | 	add	objptr, ##13056
14f94     32 03 68 FC | 	wrlong	#1, objptr
14f98     19 00 00 FF 
14f9c     04 65 86 F1 | 	sub	objptr, ##13060
14fa0     32 27 69 FC | 	wrlong	#147, objptr
14fa4     38 00 00 FF 
14fa8     B8 65 86 F1 | 	sub	objptr, ##29112
14fac     04 92 06 F6 | 	mov	arg01, #4
14fb0     64 DC B0 FD | 	call	#_hg010b_spin2_setfontfamily
14fb4     38 00 00 FF 
14fb8     BC 65 06 F1 | 	add	objptr, ##29116
14fbc     32 93 02 FB | 	rdlong	arg01, objptr
14fc0     04 64 86 F1 | 	sub	objptr, #4
14fc4     32 95 02 FB | 	rdlong	arg02, objptr
14fc8                 | ' 
14fc8                 | ' write_color:=ff
14fc8     38 00 00 FF 
14fcc     77 65 86 F1 | 	sub	objptr, ##29047
14fd0     32 93 62 FC | 	wrlong	arg01, objptr
14fd4                 | ' write_background:=bb
14fd4     04 64 06 F1 | 	add	objptr, #4
14fd8     32 95 62 FC | 	wrlong	arg02, objptr
14fdc     35 AD 02 F6 | 	mov	local04, ptr__dat__
14fe0     01 00 00 FF 
14fe4     00 AC 06 F1 | 	add	local04, ##512
14fe8     54 00 00 FF 
14fec     17 64 06 F1 | 	add	objptr, ##43031
14ff0     32 AD 62 FC | 	wrlong	local04, objptr
14ff4     04 64 86 F1 | 	sub	objptr, #4
14ff8     03 00 80 FF 
14ffc     32 31 69 FC | 	wrlong	##1688, objptr
15000     54 00 00 FF 
15004     58 64 86 F1 | 	sub	objptr, ##43096
15008     68 02 90 FD | 	jmp	#LR__1819
1500c                 | LR__1814
1500c     38 00 00 FF 
15010     C0 65 06 F1 | 	add	objptr, ##29120
15014     32 01 68 FC | 	wrlong	#0, objptr
15018     04 64 86 F1 | 	sub	objptr, #4
1501c     32 2F 68 FC | 	wrlong	#23, objptr
15020     19 00 00 FF 
15024     00 65 06 F1 | 	add	objptr, ##13056
15028     32 01 68 FC | 	wrlong	#0, objptr
1502c     19 00 00 FF 
15030     04 65 86 F1 | 	sub	objptr, ##13060
15034     32 01 68 FC | 	wrlong	#0, objptr
15038     38 00 00 FF 
1503c     B8 65 86 F1 | 	sub	objptr, ##29112
15040     00 92 06 F6 | 	mov	arg01, #0
15044     D0 DB B0 FD | 	call	#_hg010b_spin2_setfontfamily
15048     38 00 00 FF 
1504c     BC 65 06 F1 | 	add	objptr, ##29116
15050     32 93 02 FB | 	rdlong	arg01, objptr
15054     04 64 86 F1 | 	sub	objptr, #4
15058     32 95 02 FB | 	rdlong	arg02, objptr
1505c                 | ' 
1505c                 | ' write_color:=ff
1505c     38 00 00 FF 
15060     77 65 86 F1 | 	sub	objptr, ##29047
15064     32 93 62 FC | 	wrlong	arg01, objptr
15068                 | ' write_background:=bb
15068     04 64 06 F1 | 	add	objptr, #4
1506c     32 95 62 FC | 	wrlong	arg02, objptr
15070     45 64 86 F1 | 	sub	objptr, #69
15074     FC 01 90 FD | 	jmp	#LR__1819
15078                 | LR__1815
15078     38 00 00 FF 
1507c     C0 65 06 F1 | 	add	objptr, ##29120
15080     32 01 68 FC | 	wrlong	#0, objptr
15084     04 64 86 F1 | 	sub	objptr, #4
15088     32 6B 69 FC | 	wrlong	#181, objptr
1508c     19 00 00 FF 
15090     00 65 06 F1 | 	add	objptr, ##13056
15094     32 01 68 FC | 	wrlong	#0, objptr
15098     19 00 00 FF 
1509c     04 65 86 F1 | 	sub	objptr, ##13060
150a0     32 01 68 FC | 	wrlong	#0, objptr
150a4     38 00 00 FF 
150a8     B8 65 86 F1 | 	sub	objptr, ##29112
150ac     00 92 06 F6 | 	mov	arg01, #0
150b0     64 DB B0 FD | 	call	#_hg010b_spin2_setfontfamily
150b4     38 00 00 FF 
150b8     BC 65 06 F1 | 	add	objptr, ##29116
150bc     32 93 02 FB | 	rdlong	arg01, objptr
150c0     04 64 86 F1 | 	sub	objptr, #4
150c4     32 95 02 FB | 	rdlong	arg02, objptr
150c8                 | ' 
150c8                 | ' write_color:=ff
150c8     38 00 00 FF 
150cc     77 65 86 F1 | 	sub	objptr, ##29047
150d0     32 93 62 FC | 	wrlong	arg01, objptr
150d4                 | ' write_background:=bb
150d4     04 64 06 F1 | 	add	objptr, #4
150d8     32 95 62 FC | 	wrlong	arg02, objptr
150dc     45 64 86 F1 | 	sub	objptr, #69
150e0     90 01 90 FD | 	jmp	#LR__1819
150e4                 | LR__1816
150e4     38 00 00 FF 
150e8     C0 65 06 F1 | 	add	objptr, ##29120
150ec     32 01 68 FC | 	wrlong	#0, objptr
150f0     04 64 86 F1 | 	sub	objptr, #4
150f4     32 1F 68 FC | 	wrlong	#15, objptr
150f8     19 00 00 FF 
150fc     00 65 06 F1 | 	add	objptr, ##13056
15100     32 01 68 FC | 	wrlong	#0, objptr
15104     19 00 00 FF 
15108     04 65 86 F1 | 	sub	objptr, ##13060
1510c     32 01 68 FC | 	wrlong	#0, objptr
15110     38 00 00 FF 
15114     B8 65 86 F1 | 	sub	objptr, ##29112
15118     00 92 06 F6 | 	mov	arg01, #0
1511c     F8 DA B0 FD | 	call	#_hg010b_spin2_setfontfamily
15120     38 00 00 FF 
15124     BC 65 06 F1 | 	add	objptr, ##29116
15128     32 93 02 FB | 	rdlong	arg01, objptr
1512c     04 64 86 F1 | 	sub	objptr, #4
15130     32 95 02 FB | 	rdlong	arg02, objptr
15134                 | ' 
15134                 | ' write_color:=ff
15134     38 00 00 FF 
15138     77 65 86 F1 | 	sub	objptr, ##29047
1513c     32 93 62 FC | 	wrlong	arg01, objptr
15140                 | ' write_background:=bb
15140     04 64 06 F1 | 	add	objptr, #4
15144     32 95 62 FC | 	wrlong	arg02, objptr
15148     45 64 86 F1 | 	sub	objptr, #69
1514c     24 01 90 FD | 	jmp	#LR__1819
15150                 | LR__1817
15150     38 00 00 FF 
15154     C0 65 06 F1 | 	add	objptr, ##29120
15158     32 03 68 FC | 	wrlong	#1, objptr
1515c     04 64 86 F1 | 	sub	objptr, #4
15160     32 03 68 FC | 	wrlong	#1, objptr
15164     19 00 00 FF 
15168     00 65 06 F1 | 	add	objptr, ##13056
1516c     32 03 68 FC | 	wrlong	#1, objptr
15170     19 00 00 FF 
15174     04 65 86 F1 | 	sub	objptr, ##13060
15178     32 1D 68 FC | 	wrlong	#14, objptr
1517c     38 00 00 FF 
15180     B8 65 86 F1 | 	sub	objptr, ##29112
15184     04 92 06 F6 | 	mov	arg01, #4
15188     8C DA B0 FD | 	call	#_hg010b_spin2_setfontfamily
1518c     38 00 00 FF 
15190     BC 65 06 F1 | 	add	objptr, ##29116
15194     32 93 02 FB | 	rdlong	arg01, objptr
15198     04 64 86 F1 | 	sub	objptr, #4
1519c     32 95 02 FB | 	rdlong	arg02, objptr
151a0                 | ' 
151a0                 | ' write_color:=ff
151a0     38 00 00 FF 
151a4     77 65 86 F1 | 	sub	objptr, ##29047
151a8     32 93 62 FC | 	wrlong	arg01, objptr
151ac                 | ' write_background:=bb
151ac     04 64 06 F1 | 	add	objptr, #4
151b0     32 95 62 FC | 	wrlong	arg02, objptr
151b4     35 AF 02 F6 | 	mov	local05, ptr__dat__
151b8     07 00 00 FF 
151bc     82 AF 06 F1 | 	add	local05, ##3970
151c0     54 00 00 FF 
151c4     17 64 06 F1 | 	add	objptr, ##43031
151c8     32 AF 62 FC | 	wrlong	local05, objptr
151cc     04 64 86 F1 | 	sub	objptr, #4
151d0     03 00 80 FF 
151d4     32 31 69 FC | 	wrlong	##1688, objptr
151d8     54 00 00 FF 
151dc     58 64 86 F1 | 	sub	objptr, ##43096
151e0     90 00 90 FD | 	jmp	#LR__1819
151e4                 | LR__1818
151e4     38 00 00 FF 
151e8     C0 65 06 F1 | 	add	objptr, ##29120
151ec     32 05 68 FC | 	wrlong	#2, objptr
151f0     04 64 86 F1 | 	sub	objptr, #4
151f4     32 03 68 FC | 	wrlong	#1, objptr
151f8     19 00 00 FF 
151fc     00 65 06 F1 | 	add	objptr, ##13056
15200     32 03 68 FC | 	wrlong	#1, objptr
15204     19 00 00 FF 
15208     04 65 86 F1 | 	sub	objptr, ##13060
1520c     32 0F 68 FC | 	wrlong	#7, objptr
15210     38 00 00 FF 
15214     B8 65 86 F1 | 	sub	objptr, ##29112
15218     08 92 06 F6 | 	mov	arg01, #8
1521c     F8 D9 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15220     38 00 00 FF 
15224     BC 65 06 F1 | 	add	objptr, ##29116
15228     32 93 02 FB | 	rdlong	arg01, objptr
1522c     04 64 86 F1 | 	sub	objptr, #4
15230     32 95 02 FB | 	rdlong	arg02, objptr
15234                 | ' 
15234                 | ' write_color:=ff
15234     38 00 00 FF 
15238     77 65 86 F1 | 	sub	objptr, ##29047
1523c     32 93 62 FC | 	wrlong	arg01, objptr
15240                 | ' write_background:=bb
15240     04 64 06 F1 | 	add	objptr, #4
15244     32 95 62 FC | 	wrlong	arg02, objptr
15248     35 AF 02 F6 | 	mov	local05, ptr__dat__
1524c     07 00 00 FF 
15250     82 AF 06 F1 | 	add	local05, ##3970
15254     54 00 00 FF 
15258     17 64 06 F1 | 	add	objptr, ##43031
1525c     32 AF 62 FC | 	wrlong	local05, objptr
15260     04 64 86 F1 | 	sub	objptr, #4
15264     03 00 80 FF 
15268     32 31 69 FC | 	wrlong	##1688, objptr
1526c     54 00 00 FF 
15270     58 64 86 F1 | 	sub	objptr, ##43096
15274                 | LR__1819
15274     54 00 00 FF 
15278     54 64 06 F1 | 	add	objptr, ##43092
1527c     32 A7 62 FC | 	wrlong	local01, objptr
15280     04 64 86 F1 | 	sub	objptr, #4
15284     32 93 02 FB | 	rdlong	arg01, objptr
15288     0F 00 00 FF 
1528c     74 64 86 F1 | 	sub	objptr, ##7796
15290     32 AF 02 FB | 	rdlong	local05, objptr
15294     44 00 00 FF 
15298     DC 65 86 F1 | 	sub	objptr, ##35292
1529c     57 93 82 F1 | 	sub	arg01, local05
152a0     00 94 06 F6 | 	mov	arg02, #0
152a4     0A 96 06 F6 | 	mov	arg03, #10
152a8     58 15 B1 FD | 	call	#__system__Number_S
152ac     3D 93 02 F6 | 	mov	arg01, result1
152b0     99 01 00 FF 
152b4     44 95 06 F6 | 	mov	arg02, ##@LR__6055
152b8     A8 FA B0 FD | 	call	#__system___string_concat
152bc     52 00 00 FF 
152c0     B8 64 06 F1 | 	add	objptr, ##42168
152c4     32 7B 62 FC | 	wrlong	result1, objptr
152c8     19 00 00 FF 
152cc     FC 64 86 F1 | 	sub	objptr, ##13052
152d0     32 93 02 FB | 	rdlong	arg01, objptr
152d4     04 64 86 F1 | 	sub	objptr, #4
152d8     32 95 02 FB | 	rdlong	arg02, objptr
152dc     38 00 00 FF 
152e0     B8 65 86 F1 | 	sub	objptr, ##29112
152e4     FC DA B0 FD | 	call	#_hg010b_spin2_cls
152e8     99 01 00 FF 
152ec     56 93 06 F6 | 	mov	arg01, ##@LR__6056
152f0                 | ' 
152f0                 | ' write(text)
152f0     A4 DE B0 FD | 	call	#_hg010b_spin2_write
152f4                 | ' crlf
152f4     40 E3 B0 FD | 	call	#_hg010b_spin2_crlf
152f8     18 00 00 FF 
152fc     40 6B 06 F1 | 	add	ptr__dat__, ##12608
15300     35 93 02 FB | 	rdlong	arg01, ptr__dat__
15304     18 00 00 FF 
15308     40 6B 86 F1 | 	sub	ptr__dat__, ##12608
1530c                 | ' 
1530c                 | ' write(text)
1530c     88 DE B0 FD | 	call	#_hg010b_spin2_write
15310                 | ' crlf
15310     24 E3 B0 FD | 	call	#_hg010b_spin2_crlf
15314     52 00 00 FF 
15318     B8 64 06 F1 | 	add	objptr, ##42168
1531c     32 93 02 FB | 	rdlong	arg01, objptr
15320     52 00 00 FF 
15324     B8 64 86 F1 | 	sub	objptr, ##42168
15328                 | ' 
15328                 | ' write(text)
15328     6C DE B0 FD | 	call	#_hg010b_spin2_write
1532c                 | ' crlf
1532c     08 E3 B0 FD | 	call	#_hg010b_spin2_crlf
15330     E7 F0 03 F6 | 	mov	ptra, fp
15334     F2 00 A0 FD | 	call	#popregs_
15338                 | _do_mode_ret
15338     2D 00 64 FD | 	ret
1533c                 | 
1533c                 | ' 
1533c                 | ' '-------------------- mouse
1533c                 | ' 
1533c                 | ' sub do_mouse
1533c                 | _do_mouse
1533c     30 83 BF FD | 	call	#_pop
15340     00 7A 4E F2 | 	cmps	result1, #0 wz
15344                 | ' 
15344                 | ' t1=pop()
15344                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
15344     14 00 90 5D |  if_ne	jmp	#LR__1820
15348     10 92 06 F6 | 	mov	arg01, #16
1534c     00 94 06 F6 | 	mov	arg02, #0
15350     00 96 06 F6 | 	mov	arg03, #0
15354     F4 CC B0 FD | 	call	#_hg010b_spin2_setspritesize
15358     10 00 90 FD | 	jmp	#LR__1821
1535c                 | LR__1820
1535c     10 92 06 F6 | 	mov	arg01, #16
15360     20 94 06 F6 | 	mov	arg02, #32
15364     20 96 06 F6 | 	mov	arg03, #32
15368     E0 CC B0 FD | 	call	#_hg010b_spin2_setspritesize
1536c                 | LR__1821
1536c                 | _do_mouse_ret
1536c     2D 00 64 FD | 	ret
15370                 | 
15370                 | ' 
15370                 | ' '-------------------- mousek
15370                 | ' 
15370                 | ' sub do_mousek
15370                 | _do_mousek
15370     00 CA 05 F6 | 	mov	COUNT_, #0
15374     E8 00 A0 FD | 	call	#pushregs_
15378     0C F0 07 F1 | 	add	ptra, #12
1537c     08 CE 05 F1 | 	add	fp, #8
15380     E7 3A 68 FC | 	wrlong	#29, fp
15384     08 CE 85 F1 | 	sub	fp, #8
15388     53 00 00 FF 
1538c     D0 64 06 F1 | 	add	objptr, ##42704
15390     32 93 02 FB | 	rdlong	arg01, objptr
15394     53 00 00 FF 
15398     D0 64 86 F1 | 	sub	objptr, ##42704
1539c     E7 92 62 FC | 	wrlong	arg01, fp
153a0     E7 92 02 F6 | 	mov	arg01, fp
153a4     58 83 BF FD | 	call	#_push
153a8     E7 F0 03 F6 | 	mov	ptra, fp
153ac     F2 00 A0 FD | 	call	#popregs_
153b0                 | _do_mousek_ret
153b0     2D 00 64 FD | 	ret
153b4                 | 
153b4                 | ' 
153b4                 | ' '-------------------- mousew
153b4                 | ' 
153b4                 | ' sub do_mousew
153b4                 | _do_mousew
153b4     00 CA 05 F6 | 	mov	COUNT_, #0
153b8     E8 00 A0 FD | 	call	#pushregs_
153bc     0C F0 07 F1 | 	add	ptra, #12
153c0     08 CE 05 F1 | 	add	fp, #8
153c4     E7 38 68 FC | 	wrlong	#28, fp
153c8     08 CE 85 F1 | 	sub	fp, #8
153cc     53 00 00 FF 
153d0     D4 64 06 F1 | 	add	objptr, ##42708
153d4     32 93 02 FB | 	rdlong	arg01, objptr
153d8     53 00 00 FF 
153dc     D4 64 86 F1 | 	sub	objptr, ##42708
153e0     E7 92 62 FC | 	wrlong	arg01, fp
153e4     E7 92 02 F6 | 	mov	arg01, fp
153e8     14 83 BF FD | 	call	#_push
153ec     E7 F0 03 F6 | 	mov	ptra, fp
153f0     F2 00 A0 FD | 	call	#popregs_
153f4                 | _do_mousew_ret
153f4     2D 00 64 FD | 	ret
153f8                 | 
153f8                 | ' 
153f8                 | ' '-------------------- mousex
153f8                 | ' 
153f8                 | ' sub do_mousex
153f8                 | _do_mousex
153f8     00 CA 05 F6 | 	mov	COUNT_, #0
153fc     E8 00 A0 FD | 	call	#pushregs_
15400     0C F0 07 F1 | 	add	ptra, #12
15404     08 CE 05 F1 | 	add	fp, #8
15408     E7 3A 68 FC | 	wrlong	#29, fp
1540c     08 CE 85 F1 | 	sub	fp, #8
15410     53 00 00 FF 
15414     C8 64 06 F1 | 	add	objptr, ##42696
15418     32 93 02 FB | 	rdlong	arg01, objptr
1541c     53 00 00 FF 
15420     C8 64 86 F1 | 	sub	objptr, ##42696
15424     E7 92 62 FC | 	wrlong	arg01, fp
15428     E7 92 02 F6 | 	mov	arg01, fp
1542c     D0 82 BF FD | 	call	#_push
15430     E7 F0 03 F6 | 	mov	ptra, fp
15434     F2 00 A0 FD | 	call	#popregs_
15438                 | _do_mousex_ret
15438     2D 00 64 FD | 	ret
1543c                 | 
1543c                 | ' 
1543c                 | ' '-------------------- mousey
1543c                 | ' 
1543c                 | ' sub do_mousey
1543c                 | _do_mousey
1543c     00 CA 05 F6 | 	mov	COUNT_, #0
15440     E8 00 A0 FD | 	call	#pushregs_
15444     0C F0 07 F1 | 	add	ptra, #12
15448     08 CE 05 F1 | 	add	fp, #8
1544c     E7 3A 68 FC | 	wrlong	#29, fp
15450     08 CE 85 F1 | 	sub	fp, #8
15454     53 00 00 FF 
15458     CC 64 06 F1 | 	add	objptr, ##42700
1545c     32 93 02 FB | 	rdlong	arg01, objptr
15460     53 00 00 FF 
15464     CC 64 86 F1 | 	sub	objptr, ##42700
15468     E7 92 62 FC | 	wrlong	arg01, fp
1546c     E7 92 02 F6 | 	mov	arg01, fp
15470     8C 82 BF FD | 	call	#_push
15474     E7 F0 03 F6 | 	mov	ptra, fp
15478     F2 00 A0 FD | 	call	#popregs_
1547c                 | _do_mousey_ret
1547c     2D 00 64 FD | 	ret
15480                 | 
15480                 | ' 
15480                 | ' '------------------ new
15480                 | ' 
15480                 | ' sub do_new
15480                 | _do_new
15480     03 CA 05 F6 | 	mov	COUNT_, #3
15484     E8 00 A0 FD | 	call	#pushregs_
15488                 | ' 
15488                 | ' if inrun=1 then inrun=2
15488     52 00 00 FF 
1548c     6C 64 06 F1 | 	add	objptr, ##42092
15490     32 97 02 FB | 	rdlong	arg03, objptr
15494     52 00 00 FF 
15498     6C 64 86 F1 | 	sub	objptr, ##42092
1549c     01 96 0E F2 | 	cmp	arg03, #1 wz
154a0     52 00 00 AF 
154a4     6C 64 06 A1 |  if_e	add	objptr, ##42092
154a8     32 05 68 AC |  if_e	wrlong	#2, objptr
154ac     52 00 00 AF 
154b0     6C 64 86 A1 |  if_e	sub	objptr, ##42092
154b4     13 92 C6 F9 | 	decod	arg01, #19
154b8     01 94 66 F6 | 	neg	arg02, #1
154bc     14 BD B0 FD | 	call	#_pslpoke
154c0     36 00 00 FF 
154c4     88 65 06 F1 | 	add	objptr, ##28040
154c8     32 01 68 FC | 	wrlong	#0, objptr
154cc                 | ' pslpoke(memlo,$FFFFFFFF)
154cc                 | ' varnum=0 : for i=0 to maxvars: variables(i).name="" : variables(i).vartype=0: next i
154cc     00 A6 06 F6 | 	mov	local01, #0
154d0     20 00 00 FF 
154d4     10 64 86 F1 | 	sub	objptr, ##16400
154d8     D7 1E 48 FB | 	callpa	#(@LR__1831-@LR__1830)>>2,fcache_load_ptr_
154dc                 | LR__1830
154dc     53 97 02 F6 | 	mov	arg03, local01
154e0     04 96 66 F0 | 	shl	arg03, #4
154e4     32 97 02 F1 | 	add	arg03, objptr
154e8     99 01 00 FF 
154ec     57 95 06 F6 | 	mov	arg02, ##@LR__6057
154f0     4B 95 62 FC | 	wrlong	arg02, arg03
154f4     53 A9 02 F6 | 	mov	local02, local01
154f8     04 A8 66 F0 | 	shl	local02, #4
154fc     32 A9 02 F1 | 	add	local02, objptr
15500     0C A8 06 F1 | 	add	local02, #12
15504     54 01 68 FC | 	wrlong	#0, local02
15508     01 A6 06 F1 | 	add	local01, #1
1550c     02 00 00 FF 
15510     01 A6 56 F2 | 	cmps	local01, ##1025 wc
15514     C4 FF 9F CD |  if_b	jmp	#LR__1830
15518                 | LR__1831
15518     35 00 00 FF 
1551c     90 64 06 F1 | 	add	objptr, ##27280
15520     00 04 80 FF 
15524     32 01 68 FC | 	wrlong	##524288, objptr
15528     06 00 00 FF 
1552c     30 64 06 F1 | 	add	objptr, ##3120
15530     00 04 80 FF 
15534     32 01 68 FC | 	wrlong	##524288, objptr
15538     04 64 06 F1 | 	add	objptr, #4
1553c     00 04 80 FF 
15540     32 01 68 FC | 	wrlong	##524288, objptr
15544     0D 00 00 FF 
15548     64 64 86 F1 | 	sub	objptr, ##6756
1554c     32 01 68 FC | 	wrlong	#0, objptr
15550     07 00 00 FF 
15554     24 64 06 F1 | 	add	objptr, ##3620
15558     32 01 68 FC | 	wrlong	#0, objptr
1555c     07 00 00 FF 
15560     20 64 86 F1 | 	sub	objptr, ##3616
15564     00 04 80 FF 
15568     32 01 68 FC | 	wrlong	##524288, objptr
1556c     0D 00 00 FF 
15570     D0 64 06 F1 | 	add	objptr, ##6864
15574     32 01 68 FC | 	wrlong	#0, objptr
15578     99 01 00 FF 
1557c     58 AB 06 F6 | 	mov	local03, ##@LR__6058
15580     01 00 00 FF 
15584     E8 65 06 F1 | 	add	objptr, ##1000
15588     32 AB 62 FC | 	wrlong	local03, objptr
1558c     08 00 00 FF 
15590     88 64 86 F1 | 	sub	objptr, ##4232
15594     32 01 68 FC | 	wrlong	#0, objptr
15598     04 64 06 F1 | 	add	objptr, #4
1559c     FF FF FF FF 
155a0     32 FF 6B FC | 	wrlong	##-1, objptr
155a4     06 00 00 FF 
155a8     A0 64 06 F1 | 	add	objptr, ##3232
155ac     32 01 68 FC | 	wrlong	#0, objptr
155b0     04 64 06 F1 | 	add	objptr, #4
155b4     32 01 68 FC | 	wrlong	#0, objptr
155b8                 | ' programstart=memlo :runptr=memlo : runptr2=memlo
155b8                 | ' stackpointer=0
155b8                 | ' lineptr=0 
155b8                 | ' programptr=memlo ': stringptr=0
155b8                 | ' dataptr=0 : readline=""
155b8                 | ' lastline=0 : lastlineptr=-1 :fortop=0 :gosubtop=0
155b8                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
155b8     00 A6 06 F6 | 	mov	local01, #0
155bc     06 00 00 FF 
155c0     9C 64 86 F1 | 	sub	objptr, ##3228
155c4     D7 16 48 FB | 	callpa	#(@LR__1833-@LR__1832)>>2,fcache_load_ptr_
155c8                 | LR__1832
155c8     53 A9 02 F6 | 	mov	local02, local01
155cc     02 A8 66 F0 | 	shl	local02, #2
155d0     53 A9 02 F1 | 	add	local02, local01
155d4     02 A8 66 F0 | 	shl	local02, #2
155d8     32 A9 02 F1 | 	add	local02, objptr
155dc     08 A8 06 F1 | 	add	local02, #8
155e0     FF FF FF FF 
155e4     54 FF 6B FC | 	wrlong	##-1, local02
155e8     01 A6 06 F1 | 	add	local01, #1
155ec     41 A6 56 F2 | 	cmps	local01, #65 wc
155f0     D4 FF 9F CD |  if_b	jmp	#LR__1832
155f4                 | LR__1833
155f4     4C 00 00 FF 
155f8     18 64 86 F1 | 	sub	objptr, ##38936
155fc                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
155fc     00 A6 06 F6 | 	mov	local01, #0
15600                 | LR__1834
15600     53 97 02 F6 | 	mov	arg03, local01
15604     02 96 66 F0 | 	shl	arg03, #2
15608     32 A9 02 F6 | 	mov	local02, objptr
1560c     54 00 00 FF 
15610     0C A8 06 F1 | 	add	local02, ##43020
15614     54 97 02 F1 | 	add	arg03, local02
15618     4B AB 0A FB | 	rdlong	local03, arg03 wz
1561c     30 00 90 AD |  if_e	jmp	#LR__1835
15620     53 93 02 F6 | 	mov	arg01, local01
15624     00 94 06 F6 | 	mov	arg02, #0
15628     00 96 06 F6 | 	mov	arg03, #0
1562c     1C CA B0 FD | 	call	#_hg010b_spin2_setspritesize
15630     53 A9 02 F6 | 	mov	local02, local01
15634     02 A8 66 F0 | 	shl	local02, #2
15638     32 AB 02 F6 | 	mov	local03, objptr
1563c     54 00 00 FF 
15640     0C AA 06 F1 | 	add	local03, ##43020
15644     55 A9 02 F1 | 	add	local02, local03
15648     54 93 02 FB | 	rdlong	arg01, local02
1564c     F4 31 B1 FD | 	call	#__system___gc_free
15650                 | LR__1835
15650     01 A6 06 F1 | 	add	local01, #1
15654     10 A6 56 F2 | 	cmps	local01, #16 wc
15658     A4 FF 9F CD |  if_b	jmp	#LR__1834
1565c     54 00 00 FF 
15660     60 64 06 F1 | 	add	objptr, ##43104
15664     00 C0 9F FF 
15668     32 01 68 FC | 	wrlong	##1065353216, objptr
1566c     04 64 06 F1 | 	add	objptr, #4
15670     00 C0 9F FF 
15674     32 01 68 FC | 	wrlong	##1065353216, objptr
15678     54 00 00 FF 
1567c     60 64 86 F1 | 	sub	objptr, ##43104
15680     32 AB 02 FB | 	rdlong	local03, objptr
15684     54 00 00 FF 
15688     4C 64 06 F1 | 	add	objptr, ##43084
1568c     32 AB 62 FC | 	wrlong	local03, objptr
15690     54 00 00 FF 
15694     50 64 86 F1 | 	sub	objptr, ##43088
15698     11 92 06 F6 | 	mov	arg01, #17
1569c     08 94 06 F6 | 	mov	arg02, #8
156a0     10 96 06 F6 | 	mov	arg03, #16
156a4     A4 C9 B0 FD | 	call	#_hg010b_spin2_setspritesize
156a8     10 92 06 F6 | 	mov	arg01, #16
156ac     20 94 06 F6 | 	mov	arg02, #32
156b0     20 96 06 F6 | 	mov	arg03, #32
156b4     94 C9 B0 FD | 	call	#_hg010b_spin2_setspritesize
156b8     99 01 00 FF 
156bc     59 AB 06 F6 | 	mov	local03, ##@LR__6059
156c0     54 00 00 FF 
156c4     7C 64 06 F1 | 	add	objptr, ##43132
156c8     32 AB 62 FC | 	wrlong	local03, objptr
156cc     54 00 00 FF 
156d0     7C 64 86 F1 | 	sub	objptr, ##43132
156d4     3C AD B0 FD | 	call	#_init_audio
156d8     E7 F0 03 F6 | 	mov	ptra, fp
156dc     F2 00 A0 FD | 	call	#popregs_
156e0                 | _do_new_ret
156e0     2D 00 64 FD | 	ret
156e4                 | 
156e4                 | ' 
156e4                 | ' '-------------------- next
156e4                 | ' 
156e4                 | ' sub do_next()
156e4                 | _do_next
156e4     04 CA 05 F6 | 	mov	COUNT_, #4
156e8     E8 00 A0 FD | 	call	#pushregs_
156ec     80 7F BF FD | 	call	#_pop
156f0     3D A7 02 F6 | 	mov	local01, result1
156f4     3E A9 02 F6 | 	mov	local02, result2
156f8     3F AB 02 F6 | 	mov	local03, result3
156fc                 | ' t1=pop() :varnum=t1.result.uresult
156fc                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
156fc     52 00 00 FF 
15700     B0 64 06 F1 | 	add	objptr, ##42160
15704     32 95 02 FB | 	rdlong	arg02, objptr
15708     4A 93 02 F6 | 	mov	arg01, arg02
1570c     02 92 66 F0 | 	shl	arg01, #2
15710     4A 93 02 F1 | 	add	arg01, arg02
15714     02 92 66 F0 | 	shl	arg01, #2
15718     06 00 00 FF 
1571c     98 64 86 F1 | 	sub	objptr, ##3224
15720     32 93 02 F1 | 	add	arg01, objptr
15724     08 92 06 F1 | 	add	arg01, #8
15728     49 95 02 FB | 	rdlong	arg02, arg01
1572c     53 95 0A F2 | 	cmp	arg02, local01 wz
15730     4C 00 00 FF 
15734     18 64 86 F1 | 	sub	objptr, ##38936
15738     10 00 90 AD |  if_e	jmp	#LR__1840
1573c     25 92 06 F6 | 	mov	arg01, #37
15740     00 94 06 F6 | 	mov	arg02, #0
15744     F0 B8 B0 FD | 	call	#_printerror
15748     50 03 90 FD | 	jmp	#LR__1847
1574c                 | LR__1840
1574c                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
1574c     53 95 02 F6 | 	mov	arg02, local01
15750     04 94 66 F0 | 	shl	arg02, #4
15754     32 93 02 F6 | 	mov	arg01, objptr
15758     16 00 00 FF 
1575c     78 93 06 F1 | 	add	arg01, ##11640
15760     49 95 02 F1 | 	add	arg02, arg01
15764     0C 94 06 F1 | 	add	arg02, #12
15768     4A 95 02 FB | 	rdlong	arg02, arg02
1576c     1E 94 0E F2 | 	cmp	arg02, #30 wz
15770     54 00 90 5D |  if_ne	jmp	#LR__1841
15774     53 95 02 F6 | 	mov	arg02, local01
15778     04 94 66 F0 | 	shl	arg02, #4
1577c     16 00 00 FF 
15780     78 65 06 F1 | 	add	objptr, ##11640
15784     32 95 02 F1 | 	add	arg02, objptr
15788     0C 94 06 F1 | 	add	arg02, #12
1578c     4A 39 68 FC | 	wrlong	#28, arg02
15790     53 AD 02 F6 | 	mov	local04, local01
15794     04 AC 66 F0 | 	shl	local04, #4
15798     32 AD 02 F1 | 	add	local04, objptr
1579c     53 95 02 F6 | 	mov	arg02, local01
157a0     04 94 66 F0 | 	shl	arg02, #4
157a4     32 95 02 F1 | 	add	arg02, objptr
157a8     04 94 06 F1 | 	add	arg02, #4
157ac     4A 93 02 FB | 	rdlong	arg01, arg02
157b0     16 00 00 FF 
157b4     78 65 86 F1 | 	sub	objptr, ##11640
157b8     01 94 06 F6 | 	mov	arg02, #1
157bc     E0 20 B1 FD | 	call	#__system___float_tointeger
157c0     04 AC 06 F1 | 	add	local04, #4
157c4     56 7B 62 FC | 	wrlong	result1, local04
157c8                 | LR__1841
157c8     53 AD 02 F6 | 	mov	local04, local01
157cc     04 AC 66 F0 | 	shl	local04, #4
157d0     16 00 00 FF 
157d4     78 65 06 F1 | 	add	objptr, ##11640
157d8     32 AD 02 F1 | 	add	local04, objptr
157dc     53 95 02 F6 | 	mov	arg02, local01
157e0     04 94 66 F0 | 	shl	arg02, #4
157e4     32 95 02 F1 | 	add	arg02, objptr
157e8     3B 00 00 FF 
157ec     38 65 06 F1 | 	add	objptr, ##30520
157f0     32 93 02 FB | 	rdlong	arg01, objptr
157f4     49 7F 02 F6 | 	mov	result3, arg01
157f8     02 7E 66 F0 | 	shl	result3, #2
157fc     49 7F 02 F1 | 	add	result3, arg01
15800     02 7E 66 F0 | 	shl	result3, #2
15804     06 00 00 FF 
15808     98 64 86 F1 | 	sub	objptr, ##3224
1580c     32 7F 02 F1 | 	add	result3, objptr
15810     04 94 06 F1 | 	add	arg02, #4
15814     4A 93 02 FB | 	rdlong	arg01, arg02
15818     0C 7E 06 F1 | 	add	result3, #12
1581c     3F 7F 02 FB | 	rdlong	result3, result3
15820     3F 93 02 F1 | 	add	arg01, result3
15824     04 AC 06 F1 | 	add	local04, #4
15828     56 93 62 FC | 	wrlong	arg01, local04
1582c                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
1582c                 | ' if fortable(fortop).stepval>=0 then
1582c     06 00 00 FF 
15830     98 64 06 F1 | 	add	objptr, ##3224
15834     32 AD 02 FB | 	rdlong	local04, objptr
15838     56 93 02 F6 | 	mov	arg01, local04
1583c     02 92 66 F0 | 	shl	arg01, #2
15840     56 93 02 F1 | 	add	arg01, local04
15844     02 92 66 F0 | 	shl	arg01, #2
15848     06 00 00 FF 
1584c     98 64 86 F1 | 	sub	objptr, ##3224
15850     32 93 02 F1 | 	add	arg01, objptr
15854     0C 92 06 F1 | 	add	arg01, #12
15858     49 93 02 FB | 	rdlong	arg01, arg01
1585c     00 92 56 F2 | 	cmps	arg01, #0 wc
15860     4C 00 00 FF 
15864     18 64 86 F1 | 	sub	objptr, ##38936
15868     78 00 90 CD |  if_b	jmp	#LR__1842
1586c                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
1586c     04 A6 66 F0 | 	shl	local01, #4
15870     16 00 00 FF 
15874     78 65 06 F1 | 	add	objptr, ##11640
15878     32 A7 02 F1 | 	add	local01, objptr
1587c     3B 00 00 FF 
15880     38 65 06 F1 | 	add	objptr, ##30520
15884     32 93 02 FB | 	rdlong	arg01, objptr
15888     49 AD 02 F6 | 	mov	local04, arg01
1588c     02 AC 66 F0 | 	shl	local04, #2
15890     49 AD 02 F1 | 	add	local04, arg01
15894     02 AC 66 F0 | 	shl	local04, #2
15898     06 00 00 FF 
1589c     98 64 86 F1 | 	sub	objptr, ##3224
158a0     32 AD 02 F1 | 	add	local04, objptr
158a4     04 A6 06 F1 | 	add	local01, #4
158a8     53 A7 02 FB | 	rdlong	local01, local01
158ac     10 AC 06 F1 | 	add	local04, #16
158b0     56 AD 02 FB | 	rdlong	local04, local04
158b4     56 A7 5A F2 | 	cmps	local01, local04 wcz
158b8     4C 00 00 FF 
158bc     18 64 86 F1 | 	sub	objptr, ##38936
158c0     9C 00 90 ED |  if_be	jmp	#LR__1844
158c4     52 00 00 FF 
158c8     B0 64 06 F1 | 	add	objptr, ##42160
158cc     32 AD 02 FB | 	rdlong	local04, objptr
158d0     01 AC 86 F1 | 	sub	local04, #1
158d4     32 AD 62 FC | 	wrlong	local04, objptr
158d8     52 00 00 FF 
158dc     B0 64 86 F1 | 	sub	objptr, ##42160
158e0     B8 01 90 FD | 	jmp	#LR__1847
158e4                 | LR__1842
158e4                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
158e4     53 AD 02 F6 | 	mov	local04, local01
158e8     04 AC 66 F0 | 	shl	local04, #4
158ec     16 00 00 FF 
158f0     78 65 06 F1 | 	add	objptr, ##11640
158f4     32 AD 02 F1 | 	add	local04, objptr
158f8     3B 00 00 FF 
158fc     38 65 06 F1 | 	add	objptr, ##30520
15900     32 A7 02 FB | 	rdlong	local01, objptr
15904     53 93 02 F6 | 	mov	arg01, local01
15908     02 92 66 F0 | 	shl	arg01, #2
1590c     53 93 02 F1 | 	add	arg01, local01
15910     02 92 66 F0 | 	shl	arg01, #2
15914     06 00 00 FF 
15918     98 64 86 F1 | 	sub	objptr, ##3224
1591c     32 93 02 F1 | 	add	arg01, objptr
15920     04 AC 06 F1 | 	add	local04, #4
15924     56 AD 02 FB | 	rdlong	local04, local04
15928     10 92 06 F1 | 	add	arg01, #16
1592c     49 93 02 FB | 	rdlong	arg01, arg01
15930     49 AD 52 F2 | 	cmps	local04, arg01 wc
15934     4C 00 00 FF 
15938     18 64 86 F1 | 	sub	objptr, ##38936
1593c     20 00 90 3D |  if_ae	jmp	#LR__1843
15940     52 00 00 FF 
15944     B0 64 06 F1 | 	add	objptr, ##42160
15948     32 AD 02 FB | 	rdlong	local04, objptr
1594c     01 AC 86 F1 | 	sub	local04, #1
15950     32 AD 62 FC | 	wrlong	local04, objptr
15954     52 00 00 FF 
15958     B0 64 86 F1 | 	sub	objptr, ##42160
1595c     3C 01 90 FD | 	jmp	#LR__1847
15960                 | LR__1843
15960                 | LR__1844
15960                 | ' ' if not returned, goto pointer 
15960                 | ' if inrun>0 andalso runptr<>fortable(fortop).lineptr then
15960     52 00 00 FF 
15964     6C 64 06 F1 | 	add	objptr, ##42092
15968     32 AD 02 FB | 	rdlong	local04, objptr
1596c     52 00 00 FF 
15970     6C 64 86 F1 | 	sub	objptr, ##42092
15974     01 AC 16 F2 | 	cmp	local04, #1 wc
15978     DC 00 90 CD |  if_b	jmp	#LR__1845
1597c     52 00 00 FF 
15980     B0 64 06 F1 | 	add	objptr, ##42160
15984     32 AD 02 FB | 	rdlong	local04, objptr
15988     56 A7 02 F6 | 	mov	local01, local04
1598c     02 A6 66 F0 | 	shl	local01, #2
15990     56 A7 02 F1 | 	add	local01, local04
15994     02 A6 66 F0 | 	shl	local01, #2
15998     06 00 00 FF 
1599c     98 64 86 F1 | 	sub	objptr, ##3224
159a0     32 A7 02 F1 | 	add	local01, objptr
159a4     06 00 00 FF 
159a8     20 64 06 F1 | 	add	objptr, ##3104
159ac     32 AD 02 FB | 	rdlong	local04, objptr
159b0     52 00 00 FF 
159b4     38 64 86 F1 | 	sub	objptr, ##42040
159b8     53 A7 02 FB | 	rdlong	local01, local01
159bc     53 AD 0A F2 | 	cmp	local04, local01 wz
159c0     94 00 90 AD |  if_e	jmp	#LR__1845
159c4     52 00 00 FF 
159c8     B0 64 06 F1 | 	add	objptr, ##42160
159cc     32 AD 02 FB | 	rdlong	local04, objptr
159d0     56 A7 02 F6 | 	mov	local01, local04
159d4     02 A6 66 F0 | 	shl	local01, #2
159d8     56 A7 02 F1 | 	add	local01, local04
159dc     02 A6 66 F0 | 	shl	local01, #2
159e0     06 00 00 FF 
159e4     98 64 86 F1 | 	sub	objptr, ##3224
159e8     32 A7 02 F1 | 	add	local01, objptr
159ec     53 A7 02 FB | 	rdlong	local01, local01
159f0     06 00 00 FF 
159f4     20 64 06 F1 | 	add	objptr, ##3104
159f8     32 A7 62 FC | 	wrlong	local01, objptr
159fc     78 64 06 F1 | 	add	objptr, #120
15a00     32 AD 02 FB | 	rdlong	local04, objptr
15a04     56 A7 02 F6 | 	mov	local01, local04
15a08     02 A6 66 F0 | 	shl	local01, #2
15a0c     56 A7 02 F1 | 	add	local01, local04
15a10     02 A6 66 F0 | 	shl	local01, #2
15a14     06 00 00 FF 
15a18     98 64 86 F1 | 	sub	objptr, ##3224
15a1c     32 A7 02 F1 | 	add	local01, objptr
15a20     04 A6 06 F1 | 	add	local01, #4
15a24     53 A7 02 FB | 	rdlong	local01, local01
15a28     06 00 00 FF 
15a2c     24 64 06 F1 | 	add	objptr, ##3108
15a30     32 A7 62 FC | 	wrlong	local01, objptr
15a34     06 00 00 FF 
15a38     40 64 86 F1 | 	sub	objptr, ##3136
15a3c     32 AD 02 FB | 	rdlong	local04, objptr
15a40     01 AC 86 F1 | 	sub	local04, #1
15a44     04 64 06 F1 | 	add	objptr, #4
15a48     32 AD 62 FC | 	wrlong	local04, objptr
15a4c     4C 00 00 FF 
15a50     00 64 86 F1 | 	sub	objptr, ##38912
15a54     44 00 90 FD | 	jmp	#LR__1846
15a58                 | LR__1845
15a58     52 00 00 FF 
15a5c     B0 64 06 F1 | 	add	objptr, ##42160
15a60     32 AD 02 FB | 	rdlong	local04, objptr
15a64     56 A7 02 F6 | 	mov	local01, local04
15a68     02 A6 66 F0 | 	shl	local01, #2
15a6c     56 A7 02 F1 | 	add	local01, local04
15a70     02 A6 66 F0 | 	shl	local01, #2
15a74     06 00 00 FF 
15a78     98 64 86 F1 | 	sub	objptr, ##3224
15a7c     32 A7 02 F1 | 	add	local01, objptr
15a80     04 A6 06 F1 | 	add	local01, #4
15a84     53 A7 02 FB | 	rdlong	local01, local01
15a88     01 A6 86 F1 | 	sub	local01, #1
15a8c     18 64 86 F1 | 	sub	objptr, #24
15a90     32 A7 62 FC | 	wrlong	local01, objptr
15a94     4C 00 00 FF 
15a98     00 64 86 F1 | 	sub	objptr, ##38912
15a9c                 | LR__1846
15a9c                 | LR__1847
15a9c     E7 F0 03 F6 | 	mov	ptra, fp
15aa0     F2 00 A0 FD | 	call	#popregs_
15aa4                 | _do_next_ret
15aa4     2D 00 64 FD | 	ret
15aa8                 | 
15aa8                 | ' 
15aa8                 | ' '-------------------- no command (print "Unknown command")
15aa8                 | ' 
15aa8                 | ' sub do_no_command
15aa8                 | _do_no_command
15aa8     52 00 00 FF 
15aac     70 64 06 F1 | 	add	objptr, ##42096
15ab0     32 95 02 FB | 	rdlong	arg02, objptr
15ab4     52 00 00 FF 
15ab8     70 64 86 F1 | 	sub	objptr, ##42096
15abc     17 92 06 F6 | 	mov	arg01, #23
15ac0     74 B5 B0 FD | 	call	#_printerror
15ac4                 | _do_no_command_ret
15ac4     2D 00 64 FD | 	ret
15ac8                 | 
15ac8                 | ' 
15ac8                 | ' '-------------------- nothing
15ac8                 | ' 
15ac8                 | ' sub do_nothing					' a placeholder for tokens that don't do anything by themselves
15ac8                 | _do_nothing
15ac8                 | _do_nothing_ret
15ac8     2D 00 64 FD | 	ret
15acc                 | 
15acc                 | ' 
15acc                 | ' '-------------------- on
15acc                 | ' 
15acc                 | ' sub do_on
15acc                 | _do_on
15acc     02 CA 05 F6 | 	mov	COUNT_, #2
15ad0     E8 00 A0 FD | 	call	#pushregs_
15ad4     18 F0 07 F1 | 	add	ptra, #24
15ad8     4C 00 00 FF 
15adc     00 64 06 F1 | 	add	objptr, ##38912
15ae0     32 93 02 FB | 	rdlong	arg01, objptr
15ae4     49 7D 02 F6 | 	mov	result2, arg01
15ae8     01 7C 66 F0 | 	shl	result2, #1
15aec     49 7D 02 F1 | 	add	result2, arg01
15af0     02 7C 66 F0 | 	shl	result2, #2
15af4     03 00 00 FF 
15af8     04 64 86 F1 | 	sub	objptr, ##1540
15afc     32 7D 02 F1 | 	add	result2, objptr
15b00     3E A7 02 FB | 	rdlong	local01, result2
15b04     49 A9 02 F6 | 	mov	local02, arg01
15b08     01 A8 66 F0 | 	shl	local02, #1
15b0c     49 A9 02 F1 | 	add	local02, arg01
15b10     02 A8 66 F0 | 	shl	local02, #2
15b14     32 A9 02 F1 | 	add	local02, objptr
15b18     04 A8 06 F1 | 	add	local02, #4
15b1c     54 A9 02 FB | 	rdlong	local02, local02
15b20     48 00 00 FF 
15b24     FC 65 86 F1 | 	sub	objptr, ##37372
15b28     44 7B BF FD | 	call	#_pop
15b2c     E7 7A 62 FC | 	wrlong	result1, fp
15b30     04 CE 05 F1 | 	add	fp, #4
15b34     E7 7C 62 FC | 	wrlong	result2, fp
15b38     04 CE 05 F1 | 	add	fp, #4
15b3c     E7 7E 62 FC | 	wrlong	result3, fp
15b40     08 CE 85 F1 | 	sub	fp, #8
15b44     E7 92 02 F6 | 	mov	arg01, fp
15b48     00 7D BF FD | 	call	#_converttoint
15b4c                 | ' 
15b4c                 | ' numpar=compiledline(lineptr_e).result.uresult
15b4c                 | ' skip=compiledline(lineptr_e).result.twowords(1)
15b4c                 | ' t1=pop()
15b4c                 | ' t=converttoint(t1)
15b4c                 | ' if t<1 orelse t>numpar then return
15b4c     01 7A 56 F2 | 	cmps	result1, #1 wc
15b50     30 00 90 CD |  if_b	jmp	#LR__1850
15b54     53 7B 5A F2 | 	cmps	result1, local01 wcz
15b58     28 00 90 1D |  if_a	jmp	#LR__1850
15b5c     01 7A 86 F1 | 	sub	result1, #1
15b60     3D A9 02 FD | 	qmul	local02, result1
15b64     4C 00 00 FF 
15b68     00 64 06 F1 | 	add	objptr, ##38912
15b6c     32 A7 02 FB | 	rdlong	local01, objptr
15b70     18 A8 62 FD | 	getqx	local02
15b74     54 A7 02 F1 | 	add	local01, local02
15b78     32 A7 62 FC | 	wrlong	local01, objptr
15b7c     4C 00 00 FF 
15b80     00 64 86 F1 | 	sub	objptr, ##38912
15b84                 | LR__1850
15b84     E7 F0 03 F6 | 	mov	ptra, fp
15b88     F2 00 A0 FD | 	call	#popregs_
15b8c                 | _do_on_ret
15b8c     2D 00 64 FD | 	ret
15b90                 | 
15b90                 | ' 
15b90                 | ' '-------------------- open
15b90                 | ' 
15b90                 | ' sub do_open
15b90                 | _do_open
15b90     04 CA 05 F6 | 	mov	COUNT_, #4
15b94     E8 00 A0 FD | 	call	#pushregs_
15b98     20 F0 07 F1 | 	add	ptra, #32
15b9c     D0 7A BF FD | 	call	#_pop
15ba0     3F 97 02 F6 | 	mov	arg03, result3
15ba4     E7 7A 62 FC | 	wrlong	result1, fp
15ba8     04 CE 05 F1 | 	add	fp, #4
15bac     E7 7C 62 FC | 	wrlong	result2, fp
15bb0     04 CE 05 F1 | 	add	fp, #4
15bb4     E7 96 62 FC | 	wrlong	arg03, fp
15bb8                 | ' 
15bb8                 | ' numpar=compiledline(lineptr_e).result.uresult
15bb8                 | ' 
15bb8                 | ' t1=pop()
15bb8                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
15bb8     08 CE 85 F1 | 	sub	fp, #8
15bbc     2B 96 0E F2 | 	cmp	arg03, #43 wz
15bc0     18 00 90 5D |  if_ne	jmp	#LR__1860
15bc4     E7 92 02 FB | 	rdlong	arg01, fp
15bc8     14 7C BF FD | 	call	#_convertstring
15bcc     E7 7A 62 FC | 	wrlong	result1, fp
15bd0     08 CE 05 F1 | 	add	fp, #8
15bd4     E7 3E 68 FC | 	wrlong	#31, fp
15bd8     08 CE 85 F1 | 	sub	fp, #8
15bdc                 | LR__1860
15bdc                 | ' if t1.result_type<>result_string then  print "filename expected" : return  ' error here
15bdc     08 CE 05 F1 | 	add	fp, #8
15be0     E7 96 02 FB | 	rdlong	arg03, fp
15be4     08 CE 85 F1 | 	sub	fp, #8
15be8     1F 96 0E F2 | 	cmp	arg03, #31 wz
15bec     44 00 90 AD |  if_e	jmp	#LR__1861
15bf0     00 92 06 F6 | 	mov	arg01, #0
15bf4     94 46 B1 FD | 	call	#__system___getiolock_0622
15bf8     3D 93 02 F6 | 	mov	arg01, result1
15bfc     08 F1 B0 FD | 	call	#__system___lockmem
15c00     99 01 00 FF 
15c04     64 95 06 F6 | 	mov	arg02, ##@LR__6060
15c08     00 92 06 F6 | 	mov	arg01, #0
15c0c     00 96 06 F6 | 	mov	arg03, #0
15c10     E8 FD B0 FD | 	call	#__system___basic_print_string
15c14     00 92 06 F6 | 	mov	arg01, #0
15c18     0A 94 06 F6 | 	mov	arg02, #10
15c1c     00 96 06 F6 | 	mov	arg03, #0
15c20     80 FD B0 FD | 	call	#__system___basic_print_char
15c24     00 92 06 F6 | 	mov	arg01, #0
15c28     60 46 B1 FD | 	call	#__system___getiolock_0622
15c2c     3D 01 68 FC | 	wrlong	#0, result1
15c30     C4 01 90 FD | 	jmp	#LR__1872
15c34                 | LR__1861
15c34     E7 A6 02 FB | 	rdlong	local01, fp
15c38     34 7A BF FD | 	call	#_pop
15c3c     3F 97 02 F6 | 	mov	arg03, result3
15c40     E7 7A 62 FC | 	wrlong	result1, fp
15c44     04 CE 05 F1 | 	add	fp, #4
15c48     E7 7C 62 FC | 	wrlong	result2, fp
15c4c     04 CE 05 F1 | 	add	fp, #4
15c50     E7 96 62 FC | 	wrlong	arg03, fp
15c54                 | ' filename=t1.result.sresult
15c54                 | ' t1=pop()
15c54                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
15c54     08 CE 85 F1 | 	sub	fp, #8
15c58     2B 96 0E F2 | 	cmp	arg03, #43 wz
15c5c     18 00 90 5D |  if_ne	jmp	#LR__1862
15c60     E7 92 02 FB | 	rdlong	arg01, fp
15c64     78 7B BF FD | 	call	#_convertstring
15c68     E7 7A 62 FC | 	wrlong	result1, fp
15c6c     08 CE 05 F1 | 	add	fp, #8
15c70     E7 3E 68 FC | 	wrlong	#31, fp
15c74     08 CE 85 F1 | 	sub	fp, #8
15c78                 | LR__1862
15c78     00 A8 06 F6 | 	mov	local02, #0
15c7c                 | ' mode=0
15c7c                 | ' if t1.result_type=result_string then
15c7c     08 CE 05 F1 | 	add	fp, #8
15c80     E7 94 02 FB | 	rdlong	arg02, fp
15c84     08 CE 85 F1 | 	sub	fp, #8
15c88     1F 94 0E F2 | 	cmp	arg02, #31 wz
15c8c     4C 00 90 5D |  if_ne	jmp	#LR__1863
15c90                 | '   if t1.result.sresult="read" then mode=1
15c90     E7 92 02 FB | 	rdlong	arg01, fp
15c94     99 01 00 FF 
15c98     76 95 06 F6 | 	mov	arg02, ##@LR__6061
15c9c     90 F0 B0 FD | 	call	#__system___string_cmp
15ca0     00 7A 0E F2 | 	cmp	result1, #0 wz
15ca4     01 A8 06 A6 |  if_e	mov	local02, #1
15ca8                 | '   if t1.result.sresult="write" then mode=2
15ca8     E7 92 02 FB | 	rdlong	arg01, fp
15cac     99 01 00 FF 
15cb0     7B 95 06 F6 | 	mov	arg02, ##@LR__6062
15cb4     78 F0 B0 FD | 	call	#__system___string_cmp
15cb8     00 7A 0E F2 | 	cmp	result1, #0 wz
15cbc     02 A8 06 A6 |  if_e	mov	local02, #2
15cc0                 | '   if t1.result.sresult="append" then mode=4
15cc0     E7 92 02 FB | 	rdlong	arg01, fp
15cc4     99 01 00 FF 
15cc8     81 95 06 F6 | 	mov	arg02, ##@LR__6063
15ccc     60 F0 B0 FD | 	call	#__system___string_cmp
15cd0     00 7A 0E F2 | 	cmp	result1, #0 wz
15cd4     04 A8 06 A6 |  if_e	mov	local02, #4
15cd8     0C 00 90 FD | 	jmp	#LR__1864
15cdc                 | LR__1863
15cdc     E7 92 02 F6 | 	mov	arg01, fp
15ce0     68 7B BF FD | 	call	#_converttoint
15ce4     3D A9 02 F6 | 	mov	local02, result1
15ce8                 | LR__1864
15ce8     84 79 BF FD | 	call	#_pop
15cec     3F 97 02 F6 | 	mov	arg03, result3
15cf0     E7 7A 62 FC | 	wrlong	result1, fp
15cf4     04 CE 05 F1 | 	add	fp, #4
15cf8     E7 7C 62 FC | 	wrlong	result2, fp
15cfc     04 CE 05 F1 | 	add	fp, #4
15d00     E7 96 62 FC | 	wrlong	arg03, fp
15d04                 | ' t1=pop()
15d04                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
15d04     08 CE 85 F1 | 	sub	fp, #8
15d08     2C 96 0E F2 | 	cmp	arg03, #44 wz
15d0c     44 00 90 AD |  if_e	jmp	#LR__1865
15d10     00 92 06 F6 | 	mov	arg01, #0
15d14     74 45 B1 FD | 	call	#__system___getiolock_0622
15d18     3D 93 02 F6 | 	mov	arg01, result1
15d1c     E8 EF B0 FD | 	call	#__system___lockmem
15d20     99 01 00 FF 
15d24     88 95 06 F6 | 	mov	arg02, ##@LR__6064
15d28     00 92 06 F6 | 	mov	arg01, #0
15d2c     00 96 06 F6 | 	mov	arg03, #0
15d30     C8 FC B0 FD | 	call	#__system___basic_print_string
15d34     00 92 06 F6 | 	mov	arg01, #0
15d38     0A 94 06 F6 | 	mov	arg02, #10
15d3c     00 96 06 F6 | 	mov	arg03, #0
15d40     60 FC B0 FD | 	call	#__system___basic_print_char
15d44     00 92 06 F6 | 	mov	arg01, #0
15d48     40 45 B1 FD | 	call	#__system___getiolock_0622
15d4c     3D 01 68 FC | 	wrlong	#0, result1
15d50     A4 00 90 FD | 	jmp	#LR__1872
15d54                 | LR__1865
15d54     E7 AA 02 FB | 	rdlong	local03, fp
15d58                 | ' channel  = t1.result.iresult
15d58                 | ' select case  mode
15d58     54 AD 02 F6 | 	mov	local04, local02
15d5c     01 AC 86 F1 | 	sub	local04, #1
15d60     04 AC 26 F3 | 	fle	local04, #4
15d64     30 AC 62 FD | 	jmprel	local04
15d68                 | LR__1866
15d68     10 00 90 FD | 	jmp	#LR__1867
15d6c     20 00 90 FD | 	jmp	#LR__1868
15d70     44 00 90 FD | 	jmp	#LR__1870
15d74     2C 00 90 FD | 	jmp	#LR__1869
15d78     3C 00 90 FD | 	jmp	#LR__1870
15d7c                 | LR__1867
15d7c     55 93 02 F6 | 	mov	arg01, local03
15d80     53 95 02 F6 | 	mov	arg02, local01
15d84     00 96 06 F6 | 	mov	arg03, #0
15d88     2C FB B0 FD | 	call	#__system___basic_open_string
15d8c     68 00 90 FD | 	jmp	#LR__1871
15d90                 | LR__1868
15d90     55 93 02 F6 | 	mov	arg01, local03
15d94     53 95 02 F6 | 	mov	arg02, local01
15d98     0D 96 06 F6 | 	mov	arg03, #13
15d9c     18 FB B0 FD | 	call	#__system___basic_open_string
15da0     54 00 90 FD | 	jmp	#LR__1871
15da4                 | LR__1869
15da4     55 93 02 F6 | 	mov	arg01, local03
15da8     53 95 02 F6 | 	mov	arg02, local01
15dac     25 96 06 F6 | 	mov	arg03, #37
15db0     04 FB B0 FD | 	call	#__system___basic_open_string
15db4     40 00 90 FD | 	jmp	#LR__1871
15db8                 | LR__1870
15db8     00 92 06 F6 | 	mov	arg01, #0
15dbc     CC 44 B1 FD | 	call	#__system___getiolock_0622
15dc0     3D 93 02 F6 | 	mov	arg01, result1
15dc4     40 EF B0 FD | 	call	#__system___lockmem
15dc8     99 01 00 FF 
15dcc     9A 95 06 F6 | 	mov	arg02, ##@LR__6065
15dd0     00 92 06 F6 | 	mov	arg01, #0
15dd4     00 96 06 F6 | 	mov	arg03, #0
15dd8     20 FC B0 FD | 	call	#__system___basic_print_string
15ddc     00 92 06 F6 | 	mov	arg01, #0
15de0     0A 94 06 F6 | 	mov	arg02, #10
15de4     00 96 06 F6 | 	mov	arg03, #0
15de8     B8 FB B0 FD | 	call	#__system___basic_print_char
15dec     00 92 06 F6 | 	mov	arg01, #0
15df0     98 44 B1 FD | 	call	#__system___getiolock_0622
15df4     3D 01 68 FC | 	wrlong	#0, result1
15df8                 | LR__1871
15df8                 | LR__1872
15df8     E7 F0 03 F6 | 	mov	ptra, fp
15dfc     F2 00 A0 FD | 	call	#popregs_
15e00                 | _do_open_ret
15e00     2D 00 64 FD | 	ret
15e04                 | 
15e04                 | ' 
15e04                 | ' ' ------------------ padrx
15e04                 | ' 
15e04                 | ' sub do_padrx
15e04                 | _do_padrx
15e04     04 CA 05 F6 | 	mov	COUNT_, #4
15e08     E8 00 A0 FD | 	call	#pushregs_
15e0c     14 F0 07 F1 | 	add	ptra, #20
15e10     4C 00 00 FF 
15e14     00 64 06 F1 | 	add	objptr, ##38912
15e18     32 A7 02 FB | 	rdlong	local01, objptr
15e1c     53 97 02 F6 | 	mov	arg03, local01
15e20     01 96 66 F0 | 	shl	arg03, #1
15e24     53 97 02 F1 | 	add	arg03, local01
15e28     02 96 66 F0 | 	shl	arg03, #2
15e2c     03 00 00 FF 
15e30     04 64 86 F1 | 	sub	objptr, ##1540
15e34     32 97 02 F1 | 	add	arg03, objptr
15e38     4B A9 02 FB | 	rdlong	local02, arg03
15e3c                 | ' 
15e3c                 | ' numpar=compiledline(lineptr_e).result.uresult
15e3c                 | ' if numpar>1 then print "padrx: "; : printerror(39) : return
15e3c     02 A8 16 F2 | 	cmp	local02, #2 wc
15e40     48 00 00 FF 
15e44     FC 65 86 F1 | 	sub	objptr, ##37372
15e48     40 00 90 CD |  if_b	jmp	#LR__1880
15e4c     00 92 06 F6 | 	mov	arg01, #0
15e50     38 44 B1 FD | 	call	#__system___getiolock_0622
15e54     3D 93 02 F6 | 	mov	arg01, result1
15e58     AC EE B0 FD | 	call	#__system___lockmem
15e5c     99 01 00 FF 
15e60     AD 95 06 F6 | 	mov	arg02, ##@LR__6066
15e64     00 92 06 F6 | 	mov	arg01, #0
15e68     00 96 06 F6 | 	mov	arg03, #0
15e6c     8C FB B0 FD | 	call	#__system___basic_print_string
15e70     00 92 06 F6 | 	mov	arg01, #0
15e74     14 44 B1 FD | 	call	#__system___getiolock_0622
15e78     3D 01 68 FC | 	wrlong	#0, result1
15e7c     27 92 06 F6 | 	mov	arg01, #39
15e80     00 94 06 F6 | 	mov	arg02, #0
15e84     B0 B1 B0 FD | 	call	#_printerror
15e88     A0 01 90 FD | 	jmp	#LR__1884
15e8c                 | LR__1880
15e8c                 | ' if numpar=0 then 
15e8c     00 A8 0E F2 | 	cmp	local02, #0 wz
15e90     8C 00 90 5D |  if_ne	jmp	#LR__1881
15e94     00 C0 1B FF 
15e98     00 A8 06 F6 | 	mov	local02, ##931135488
15e9c     53 00 00 FF 
15ea0     48 65 06 F1 | 	add	objptr, ##42824
15ea4     32 93 02 FB | 	rdlong	arg01, objptr
15ea8     53 00 00 FF 
15eac     48 65 86 F1 | 	sub	objptr, ##42824
15eb0     49 93 52 F6 | 	abs	arg01, arg01 wc
15eb4     1F AA C6 C9 |  if_b	decod	local03, #31
15eb8     00 AA 06 36 |  if_ae	mov	local03, #0
15ebc     14 11 B1 FD | 	call	#__system___float_fromuns
15ec0     55 7B 62 F5 | 	xor	result1, local03
15ec4     3D 93 02 F6 | 	mov	arg01, result1
15ec8     FF 7F 23 FF 
15ecc     00 94 06 F6 | 	mov	arg02, ##1191181824
15ed0     08 17 B1 FD | 	call	#__system___float_div
15ed4     3D 95 02 F6 | 	mov	arg02, result1
15ed8     54 93 02 F6 | 	mov	arg01, local02
15edc     28 11 B1 FD | 	call	#__system___float_add
15ee0     3D AD 02 F6 | 	mov	local04, result1
15ee4                 | '   fpad=(1.0/65536.0)+padrx(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
15ee4     56 93 02 F6 | 	mov	arg01, local04
15ee8     1F 92 06 F4 | 	bitl	arg01, #31
15eec     89 41 1D FF 
15ef0     6F 94 06 F6 | 	mov	arg02, ##981668463
15ef4     01 96 06 F6 | 	mov	arg03, #1
15ef8     10 19 B1 FD | 	call	#__system___float_cmp
15efc     00 7A 56 F2 | 	cmps	result1, #0 wc
15f00     00 AC 06 C6 |  if_b	mov	local04, #0
15f04     E7 AC 62 FC | 	wrlong	local04, fp
15f08     08 CE 05 F1 | 	add	fp, #8
15f0c     E7 3C 68 FC | 	wrlong	#30, fp
15f10     08 CE 85 F1 | 	sub	fp, #8
15f14     E7 92 02 F6 | 	mov	arg01, fp
15f18     E4 77 BF FD | 	call	#_push
15f1c                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
15f1c     0C 01 90 FD | 	jmp	#LR__1884
15f20                 | LR__1881
15f20     4C 77 BF FD | 	call	#_pop
15f24     E7 7A 62 FC | 	wrlong	result1, fp
15f28     04 CE 05 F1 | 	add	fp, #4
15f2c     E7 7C 62 FC | 	wrlong	result2, fp
15f30     04 CE 05 F1 | 	add	fp, #4
15f34     E7 7E 62 FC | 	wrlong	result3, fp
15f38                 | ' t1=pop()
15f38                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
15f38     08 CE 85 F1 | 	sub	fp, #8
15f3c     1C 7E 0E F2 | 	cmp	result3, #28 wz
15f40     08 CE 05 51 |  if_ne	add	fp, #8
15f44     E7 A6 02 5B |  if_ne	rdlong	local01, fp
15f48     08 CE 85 51 |  if_ne	sub	fp, #8
15f4c     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
15f50     CC 00 90 5D |  if_ne	jmp	#LR__1883
15f54     E7 AC 02 FB | 	rdlong	local04, fp
15f58     54 00 00 FF 
15f5c     C0 64 06 F1 | 	add	objptr, ##43200
15f60     32 AD 62 FC | 	wrlong	local04, objptr
15f64                 | '   q=t1.result.uresult
15f64                 | '   if q<7 then 
15f64     54 00 00 FF 
15f68     C0 64 86 F1 | 	sub	objptr, ##43200
15f6c     07 AC 56 F2 | 	cmps	local04, #7 wc
15f70     9C 00 90 3D |  if_ae	jmp	#LR__1882
15f74     00 C0 1B FF 
15f78     00 AC 06 F6 | 	mov	local04, ##931135488
15f7c     54 00 00 FF 
15f80     C0 64 06 F1 | 	add	objptr, ##43200
15f84     32 A9 02 FB | 	rdlong	local02, objptr
15f88     02 A8 66 F0 | 	shl	local02, #2
15f8c     78 65 86 F1 | 	sub	objptr, #376
15f90     32 A9 02 F1 | 	add	local02, objptr
15f94     54 93 02 FB | 	rdlong	arg01, local02
15f98     53 00 00 FF 
15f9c     48 65 86 F1 | 	sub	objptr, ##42824
15fa0     49 93 52 F6 | 	abs	arg01, arg01 wc
15fa4     1F AA C6 C9 |  if_b	decod	local03, #31
15fa8     00 AA 06 36 |  if_ae	mov	local03, #0
15fac     24 10 B1 FD | 	call	#__system___float_fromuns
15fb0     55 7B 62 F5 | 	xor	result1, local03
15fb4     3D 93 02 F6 | 	mov	arg01, result1
15fb8     FF 7F 23 FF 
15fbc     00 94 06 F6 | 	mov	arg02, ##1191181824
15fc0     18 16 B1 FD | 	call	#__system___float_div
15fc4     3D 95 02 F6 | 	mov	arg02, result1
15fc8     56 93 02 F6 | 	mov	arg01, local04
15fcc     38 10 B1 FD | 	call	#__system___float_add
15fd0     3D AD 02 F6 | 	mov	local04, result1
15fd4                 | '     fpad=(1.0/65536.0)+padrx(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
15fd4     56 93 02 F6 | 	mov	arg01, local04
15fd8     1F 92 06 F4 | 	bitl	arg01, #31
15fdc     89 41 1D FF 
15fe0     6F 94 06 F6 | 	mov	arg02, ##981668463
15fe4     01 96 06 F6 | 	mov	arg03, #1
15fe8     20 18 B1 FD | 	call	#__system___float_cmp
15fec     00 7A 56 F2 | 	cmps	result1, #0 wc
15ff0     00 AC 06 C6 |  if_b	mov	local04, #0
15ff4     E7 AC 62 FC | 	wrlong	local04, fp
15ff8     08 CE 05 F1 | 	add	fp, #8
15ffc     E7 3C 68 FC | 	wrlong	#30, fp
16000     08 CE 85 F1 | 	sub	fp, #8
16004     E7 92 02 F6 | 	mov	arg01, fp
16008     F4 76 BF FD | 	call	#_push
1600c                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
1600c     1C 00 90 FD | 	jmp	#LR__1884
16010                 | LR__1882
16010     29 92 06 F6 | 	mov	arg01, #41
16014     00 94 06 F6 | 	mov	arg02, #0
16018     1C B0 B0 FD | 	call	#_printerror
1601c                 | '      printerror(41) : return
1601c     0C 00 90 FD | 	jmp	#LR__1884
16020                 | LR__1883
16020     29 92 06 F6 | 	mov	arg01, #41
16024     00 94 06 F6 | 	mov	arg02, #0
16028     0C B0 B0 FD | 	call	#_printerror
1602c                 | LR__1884
1602c     E7 F0 03 F6 | 	mov	ptra, fp
16030     F2 00 A0 FD | 	call	#popregs_
16034                 | _do_padrx_ret
16034     2D 00 64 FD | 	ret
16038                 | 
16038                 | ' 
16038                 | ' ' ------------------ padry
16038                 | ' 
16038                 | ' sub do_padry
16038                 | _do_padry
16038     04 CA 05 F6 | 	mov	COUNT_, #4
1603c     E8 00 A0 FD | 	call	#pushregs_
16040     14 F0 07 F1 | 	add	ptra, #20
16044     4C 00 00 FF 
16048     00 64 06 F1 | 	add	objptr, ##38912
1604c     32 A7 02 FB | 	rdlong	local01, objptr
16050     53 97 02 F6 | 	mov	arg03, local01
16054     01 96 66 F0 | 	shl	arg03, #1
16058     53 97 02 F1 | 	add	arg03, local01
1605c     02 96 66 F0 | 	shl	arg03, #2
16060     03 00 00 FF 
16064     04 64 86 F1 | 	sub	objptr, ##1540
16068     32 97 02 F1 | 	add	arg03, objptr
1606c     4B A9 02 FB | 	rdlong	local02, arg03
16070                 | ' 
16070                 | ' numpar=compiledline(lineptr_e).result.uresult
16070                 | ' if numpar>1 then print "padry: "; : printerror(39) : return
16070     02 A8 16 F2 | 	cmp	local02, #2 wc
16074     48 00 00 FF 
16078     FC 65 86 F1 | 	sub	objptr, ##37372
1607c     40 00 90 CD |  if_b	jmp	#LR__1890
16080     00 92 06 F6 | 	mov	arg01, #0
16084     04 42 B1 FD | 	call	#__system___getiolock_0622
16088     3D 93 02 F6 | 	mov	arg01, result1
1608c     78 EC B0 FD | 	call	#__system___lockmem
16090     99 01 00 FF 
16094     B5 95 06 F6 | 	mov	arg02, ##@LR__6067
16098     00 92 06 F6 | 	mov	arg01, #0
1609c     00 96 06 F6 | 	mov	arg03, #0
160a0     58 F9 B0 FD | 	call	#__system___basic_print_string
160a4     00 92 06 F6 | 	mov	arg01, #0
160a8     E0 41 B1 FD | 	call	#__system___getiolock_0622
160ac     3D 01 68 FC | 	wrlong	#0, result1
160b0     27 92 06 F6 | 	mov	arg01, #39
160b4     00 94 06 F6 | 	mov	arg02, #0
160b8     7C AF B0 FD | 	call	#_printerror
160bc     A0 01 90 FD | 	jmp	#LR__1894
160c0                 | LR__1890
160c0                 | ' if numpar=0 then 
160c0     00 A8 0E F2 | 	cmp	local02, #0 wz
160c4     8C 00 90 5D |  if_ne	jmp	#LR__1891
160c8     00 C0 1B FF 
160cc     00 A8 06 F6 | 	mov	local02, ##931135488
160d0     53 00 00 FF 
160d4     64 65 06 F1 | 	add	objptr, ##42852
160d8     32 93 02 FB | 	rdlong	arg01, objptr
160dc     53 00 00 FF 
160e0     64 65 86 F1 | 	sub	objptr, ##42852
160e4     49 93 52 F6 | 	abs	arg01, arg01 wc
160e8     1F AA C6 C9 |  if_b	decod	local03, #31
160ec     00 AA 06 36 |  if_ae	mov	local03, #0
160f0     E0 0E B1 FD | 	call	#__system___float_fromuns
160f4     55 7B 62 F5 | 	xor	result1, local03
160f8     3D 93 02 F6 | 	mov	arg01, result1
160fc     FF 7F 23 FF 
16100     00 94 06 F6 | 	mov	arg02, ##1191181824
16104     D4 14 B1 FD | 	call	#__system___float_div
16108     3D 95 02 F6 | 	mov	arg02, result1
1610c     54 93 02 F6 | 	mov	arg01, local02
16110     F4 0E B1 FD | 	call	#__system___float_add
16114     3D AD 02 F6 | 	mov	local04, result1
16118                 | '   fpad=(1.0/65536.0)+padry(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16118     56 93 02 F6 | 	mov	arg01, local04
1611c     1F 92 06 F4 | 	bitl	arg01, #31
16120     89 41 1D FF 
16124     6F 94 06 F6 | 	mov	arg02, ##981668463
16128     01 96 06 F6 | 	mov	arg03, #1
1612c     DC 16 B1 FD | 	call	#__system___float_cmp
16130     00 7A 56 F2 | 	cmps	result1, #0 wc
16134     00 AC 06 C6 |  if_b	mov	local04, #0
16138     E7 AC 62 FC | 	wrlong	local04, fp
1613c     08 CE 05 F1 | 	add	fp, #8
16140     E7 3C 68 FC | 	wrlong	#30, fp
16144     08 CE 85 F1 | 	sub	fp, #8
16148     E7 92 02 F6 | 	mov	arg01, fp
1614c     B0 75 BF FD | 	call	#_push
16150                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16150     0C 01 90 FD | 	jmp	#LR__1894
16154                 | LR__1891
16154     18 75 BF FD | 	call	#_pop
16158     E7 7A 62 FC | 	wrlong	result1, fp
1615c     04 CE 05 F1 | 	add	fp, #4
16160     E7 7C 62 FC | 	wrlong	result2, fp
16164     04 CE 05 F1 | 	add	fp, #4
16168     E7 7E 62 FC | 	wrlong	result3, fp
1616c                 | ' t1=pop()
1616c                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1616c     08 CE 85 F1 | 	sub	fp, #8
16170     1C 7E 0E F2 | 	cmp	result3, #28 wz
16174     08 CE 05 51 |  if_ne	add	fp, #8
16178     E7 A6 02 5B |  if_ne	rdlong	local01, fp
1617c     08 CE 85 51 |  if_ne	sub	fp, #8
16180     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
16184     CC 00 90 5D |  if_ne	jmp	#LR__1893
16188     E7 AC 02 FB | 	rdlong	local04, fp
1618c     54 00 00 FF 
16190     C0 64 06 F1 | 	add	objptr, ##43200
16194     32 AD 62 FC | 	wrlong	local04, objptr
16198                 | '   q=t1.result.uresult
16198                 | '   if q<7 then 
16198     54 00 00 FF 
1619c     C0 64 86 F1 | 	sub	objptr, ##43200
161a0     07 AC 56 F2 | 	cmps	local04, #7 wc
161a4     9C 00 90 3D |  if_ae	jmp	#LR__1892
161a8     00 C0 1B FF 
161ac     00 AC 06 F6 | 	mov	local04, ##931135488
161b0     54 00 00 FF 
161b4     C0 64 06 F1 | 	add	objptr, ##43200
161b8     32 A9 02 FB | 	rdlong	local02, objptr
161bc     02 A8 66 F0 | 	shl	local02, #2
161c0     5C 65 86 F1 | 	sub	objptr, #348
161c4     32 A9 02 F1 | 	add	local02, objptr
161c8     54 93 02 FB | 	rdlong	arg01, local02
161cc     53 00 00 FF 
161d0     64 65 86 F1 | 	sub	objptr, ##42852
161d4     49 93 52 F6 | 	abs	arg01, arg01 wc
161d8     1F AA C6 C9 |  if_b	decod	local03, #31
161dc     00 AA 06 36 |  if_ae	mov	local03, #0
161e0     F0 0D B1 FD | 	call	#__system___float_fromuns
161e4     55 7B 62 F5 | 	xor	result1, local03
161e8     3D 93 02 F6 | 	mov	arg01, result1
161ec     FF 7F 23 FF 
161f0     00 94 06 F6 | 	mov	arg02, ##1191181824
161f4     E4 13 B1 FD | 	call	#__system___float_div
161f8     3D 95 02 F6 | 	mov	arg02, result1
161fc     56 93 02 F6 | 	mov	arg01, local04
16200     04 0E B1 FD | 	call	#__system___float_add
16204     3D AD 02 F6 | 	mov	local04, result1
16208                 | '     fpad=(1.0/65536.0)+padry(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16208     56 93 02 F6 | 	mov	arg01, local04
1620c     1F 92 06 F4 | 	bitl	arg01, #31
16210     89 41 1D FF 
16214     6F 94 06 F6 | 	mov	arg02, ##981668463
16218     01 96 06 F6 | 	mov	arg03, #1
1621c     EC 15 B1 FD | 	call	#__system___float_cmp
16220     00 7A 56 F2 | 	cmps	result1, #0 wc
16224     00 AC 06 C6 |  if_b	mov	local04, #0
16228     E7 AC 62 FC | 	wrlong	local04, fp
1622c     08 CE 05 F1 | 	add	fp, #8
16230     E7 3C 68 FC | 	wrlong	#30, fp
16234     08 CE 85 F1 | 	sub	fp, #8
16238     E7 92 02 F6 | 	mov	arg01, fp
1623c     C0 74 BF FD | 	call	#_push
16240                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16240     1C 00 90 FD | 	jmp	#LR__1894
16244                 | LR__1892
16244     29 92 06 F6 | 	mov	arg01, #41
16248     00 94 06 F6 | 	mov	arg02, #0
1624c     E8 AD B0 FD | 	call	#_printerror
16250                 | '      printerror(41) : return
16250     0C 00 90 FD | 	jmp	#LR__1894
16254                 | LR__1893
16254     29 92 06 F6 | 	mov	arg01, #41
16258     00 94 06 F6 | 	mov	arg02, #0
1625c     D8 AD B0 FD | 	call	#_printerror
16260                 | LR__1894
16260     E7 F0 03 F6 | 	mov	ptra, fp
16264     F2 00 A0 FD | 	call	#popregs_
16268                 | _do_padry_ret
16268     2D 00 64 FD | 	ret
1626c                 | 
1626c                 | ' 
1626c                 | ' ' ------------------ padrz
1626c                 | ' 
1626c                 | ' sub do_padrz
1626c                 | _do_padrz
1626c     04 CA 05 F6 | 	mov	COUNT_, #4
16270     E8 00 A0 FD | 	call	#pushregs_
16274     14 F0 07 F1 | 	add	ptra, #20
16278     4C 00 00 FF 
1627c     00 64 06 F1 | 	add	objptr, ##38912
16280     32 A7 02 FB | 	rdlong	local01, objptr
16284     53 97 02 F6 | 	mov	arg03, local01
16288     01 96 66 F0 | 	shl	arg03, #1
1628c     53 97 02 F1 | 	add	arg03, local01
16290     02 96 66 F0 | 	shl	arg03, #2
16294     03 00 00 FF 
16298     04 64 86 F1 | 	sub	objptr, ##1540
1629c     32 97 02 F1 | 	add	arg03, objptr
162a0     4B A9 02 FB | 	rdlong	local02, arg03
162a4                 | ' 
162a4                 | ' numpar=compiledline(lineptr_e).result.uresult
162a4                 | ' if numpar>1 then print "padrz: "; : printerror(39) : return
162a4     02 A8 16 F2 | 	cmp	local02, #2 wc
162a8     48 00 00 FF 
162ac     FC 65 86 F1 | 	sub	objptr, ##37372
162b0     40 00 90 CD |  if_b	jmp	#LR__1900
162b4     00 92 06 F6 | 	mov	arg01, #0
162b8     D0 3F B1 FD | 	call	#__system___getiolock_0622
162bc     3D 93 02 F6 | 	mov	arg01, result1
162c0     44 EA B0 FD | 	call	#__system___lockmem
162c4     99 01 00 FF 
162c8     BD 95 06 F6 | 	mov	arg02, ##@LR__6068
162cc     00 92 06 F6 | 	mov	arg01, #0
162d0     00 96 06 F6 | 	mov	arg03, #0
162d4     24 F7 B0 FD | 	call	#__system___basic_print_string
162d8     00 92 06 F6 | 	mov	arg01, #0
162dc     AC 3F B1 FD | 	call	#__system___getiolock_0622
162e0     3D 01 68 FC | 	wrlong	#0, result1
162e4     27 92 06 F6 | 	mov	arg01, #39
162e8     00 94 06 F6 | 	mov	arg02, #0
162ec     48 AD B0 FD | 	call	#_printerror
162f0     A0 01 90 FD | 	jmp	#LR__1904
162f4                 | LR__1900
162f4                 | ' if numpar=0 then 
162f4     00 A8 0E F2 | 	cmp	local02, #0 wz
162f8     8C 00 90 5D |  if_ne	jmp	#LR__1901
162fc     00 C0 1B FF 
16300     00 A8 06 F6 | 	mov	local02, ##931135488
16304     53 00 00 FF 
16308     80 65 06 F1 | 	add	objptr, ##42880
1630c     32 93 02 FB | 	rdlong	arg01, objptr
16310     53 00 00 FF 
16314     80 65 86 F1 | 	sub	objptr, ##42880
16318     49 93 52 F6 | 	abs	arg01, arg01 wc
1631c     1F AA C6 C9 |  if_b	decod	local03, #31
16320     00 AA 06 36 |  if_ae	mov	local03, #0
16324     AC 0C B1 FD | 	call	#__system___float_fromuns
16328     55 7B 62 F5 | 	xor	result1, local03
1632c     3D 93 02 F6 | 	mov	arg01, result1
16330     FF 7F 23 FF 
16334     00 94 06 F6 | 	mov	arg02, ##1191181824
16338     A0 12 B1 FD | 	call	#__system___float_div
1633c     3D 95 02 F6 | 	mov	arg02, result1
16340     54 93 02 F6 | 	mov	arg01, local02
16344     C0 0C B1 FD | 	call	#__system___float_add
16348     3D AD 02 F6 | 	mov	local04, result1
1634c                 | '   fpad=(1.0/65536.0)+padrz(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
1634c     56 93 02 F6 | 	mov	arg01, local04
16350     1F 92 06 F4 | 	bitl	arg01, #31
16354     89 41 1D FF 
16358     6F 94 06 F6 | 	mov	arg02, ##981668463
1635c     01 96 06 F6 | 	mov	arg03, #1
16360     A8 14 B1 FD | 	call	#__system___float_cmp
16364     00 7A 56 F2 | 	cmps	result1, #0 wc
16368     00 AC 06 C6 |  if_b	mov	local04, #0
1636c     E7 AC 62 FC | 	wrlong	local04, fp
16370     08 CE 05 F1 | 	add	fp, #8
16374     E7 3C 68 FC | 	wrlong	#30, fp
16378     08 CE 85 F1 | 	sub	fp, #8
1637c     E7 92 02 F6 | 	mov	arg01, fp
16380     7C 73 BF FD | 	call	#_push
16384                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16384     0C 01 90 FD | 	jmp	#LR__1904
16388                 | LR__1901
16388     E4 72 BF FD | 	call	#_pop
1638c     E7 7A 62 FC | 	wrlong	result1, fp
16390     04 CE 05 F1 | 	add	fp, #4
16394     E7 7C 62 FC | 	wrlong	result2, fp
16398     04 CE 05 F1 | 	add	fp, #4
1639c     E7 7E 62 FC | 	wrlong	result3, fp
163a0                 | ' t1=pop()
163a0                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
163a0     08 CE 85 F1 | 	sub	fp, #8
163a4     1C 7E 0E F2 | 	cmp	result3, #28 wz
163a8     08 CE 05 51 |  if_ne	add	fp, #8
163ac     E7 A6 02 5B |  if_ne	rdlong	local01, fp
163b0     08 CE 85 51 |  if_ne	sub	fp, #8
163b4     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
163b8     CC 00 90 5D |  if_ne	jmp	#LR__1903
163bc     E7 AC 02 FB | 	rdlong	local04, fp
163c0     54 00 00 FF 
163c4     C0 64 06 F1 | 	add	objptr, ##43200
163c8     32 AD 62 FC | 	wrlong	local04, objptr
163cc                 | '   q=t1.result.uresult
163cc                 | '   if q<7 then 
163cc     54 00 00 FF 
163d0     C0 64 86 F1 | 	sub	objptr, ##43200
163d4     07 AC 56 F2 | 	cmps	local04, #7 wc
163d8     9C 00 90 3D |  if_ae	jmp	#LR__1902
163dc     00 C0 1B FF 
163e0     00 AC 06 F6 | 	mov	local04, ##931135488
163e4     54 00 00 FF 
163e8     C0 64 06 F1 | 	add	objptr, ##43200
163ec     32 A9 02 FB | 	rdlong	local02, objptr
163f0     02 A8 66 F0 | 	shl	local02, #2
163f4     40 65 86 F1 | 	sub	objptr, #320
163f8     32 A9 02 F1 | 	add	local02, objptr
163fc     54 93 02 FB | 	rdlong	arg01, local02
16400     53 00 00 FF 
16404     80 65 86 F1 | 	sub	objptr, ##42880
16408     49 93 52 F6 | 	abs	arg01, arg01 wc
1640c     1F AA C6 C9 |  if_b	decod	local03, #31
16410     00 AA 06 36 |  if_ae	mov	local03, #0
16414     BC 0B B1 FD | 	call	#__system___float_fromuns
16418     55 7B 62 F5 | 	xor	result1, local03
1641c     3D 93 02 F6 | 	mov	arg01, result1
16420     FF 7F 23 FF 
16424     00 94 06 F6 | 	mov	arg02, ##1191181824
16428     B0 11 B1 FD | 	call	#__system___float_div
1642c     3D 95 02 F6 | 	mov	arg02, result1
16430     56 93 02 F6 | 	mov	arg01, local04
16434     D0 0B B1 FD | 	call	#__system___float_add
16438     3D AD 02 F6 | 	mov	local04, result1
1643c                 | '     fpad=(1.0/65536.0)+padrz(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
1643c     56 93 02 F6 | 	mov	arg01, local04
16440     1F 92 06 F4 | 	bitl	arg01, #31
16444     89 41 1D FF 
16448     6F 94 06 F6 | 	mov	arg02, ##981668463
1644c     01 96 06 F6 | 	mov	arg03, #1
16450     B8 13 B1 FD | 	call	#__system___float_cmp
16454     00 7A 56 F2 | 	cmps	result1, #0 wc
16458     00 AC 06 C6 |  if_b	mov	local04, #0
1645c     E7 AC 62 FC | 	wrlong	local04, fp
16460     08 CE 05 F1 | 	add	fp, #8
16464     E7 3C 68 FC | 	wrlong	#30, fp
16468     08 CE 85 F1 | 	sub	fp, #8
1646c     E7 92 02 F6 | 	mov	arg01, fp
16470     8C 72 BF FD | 	call	#_push
16474                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16474     1C 00 90 FD | 	jmp	#LR__1904
16478                 | LR__1902
16478     29 92 06 F6 | 	mov	arg01, #41
1647c     00 94 06 F6 | 	mov	arg02, #0
16480     B4 AB B0 FD | 	call	#_printerror
16484                 | '      printerror(41) : return
16484     0C 00 90 FD | 	jmp	#LR__1904
16488                 | LR__1903
16488     29 92 06 F6 | 	mov	arg01, #41
1648c     00 94 06 F6 | 	mov	arg02, #0
16490     A4 AB B0 FD | 	call	#_printerror
16494                 | LR__1904
16494     E7 F0 03 F6 | 	mov	ptra, fp
16498     F2 00 A0 FD | 	call	#popregs_
1649c                 | _do_padrz_ret
1649c     2D 00 64 FD | 	ret
164a0                 | 
164a0                 | ' 
164a0                 | ' ' ------------------ pads
164a0                 | ' 
164a0                 | ' sub do_pads
164a0                 | _do_pads
164a0     04 CA 05 F6 | 	mov	COUNT_, #4
164a4     E8 00 A0 FD | 	call	#pushregs_
164a8     14 F0 07 F1 | 	add	ptra, #20
164ac     4C 00 00 FF 
164b0     00 64 06 F1 | 	add	objptr, ##38912
164b4     32 A7 02 FB | 	rdlong	local01, objptr
164b8     53 97 02 F6 | 	mov	arg03, local01
164bc     01 96 66 F0 | 	shl	arg03, #1
164c0     53 97 02 F1 | 	add	arg03, local01
164c4     02 96 66 F0 | 	shl	arg03, #2
164c8     03 00 00 FF 
164cc     04 64 86 F1 | 	sub	objptr, ##1540
164d0     32 97 02 F1 | 	add	arg03, objptr
164d4     4B A9 02 FB | 	rdlong	local02, arg03
164d8                 | ' 
164d8                 | ' numpar=compiledline(lineptr_e).result.uresult
164d8                 | ' if numpar>1 then print "pads: "; : printerror(39) : return
164d8     02 A8 16 F2 | 	cmp	local02, #2 wc
164dc     48 00 00 FF 
164e0     FC 65 86 F1 | 	sub	objptr, ##37372
164e4     40 00 90 CD |  if_b	jmp	#LR__1910
164e8     00 92 06 F6 | 	mov	arg01, #0
164ec     9C 3D B1 FD | 	call	#__system___getiolock_0622
164f0     3D 93 02 F6 | 	mov	arg01, result1
164f4     10 E8 B0 FD | 	call	#__system___lockmem
164f8     99 01 00 FF 
164fc     C5 95 06 F6 | 	mov	arg02, ##@LR__6069
16500     00 92 06 F6 | 	mov	arg01, #0
16504     00 96 06 F6 | 	mov	arg03, #0
16508     F0 F4 B0 FD | 	call	#__system___basic_print_string
1650c     00 92 06 F6 | 	mov	arg01, #0
16510     78 3D B1 FD | 	call	#__system___getiolock_0622
16514     3D 01 68 FC | 	wrlong	#0, result1
16518     27 92 06 F6 | 	mov	arg01, #39
1651c     00 94 06 F6 | 	mov	arg02, #0
16520     14 AB B0 FD | 	call	#_printerror
16524     A0 01 90 FD | 	jmp	#LR__1914
16528                 | LR__1910
16528                 | ' if numpar=0 then 
16528     00 A8 0E F2 | 	cmp	local02, #0 wz
1652c     8C 00 90 5D |  if_ne	jmp	#LR__1911
16530     00 C0 1B FF 
16534     00 A8 06 F6 | 	mov	local02, ##931135488
16538     53 00 00 FF 
1653c     9C 65 06 F1 | 	add	objptr, ##42908
16540     32 93 02 FB | 	rdlong	arg01, objptr
16544     53 00 00 FF 
16548     9C 65 86 F1 | 	sub	objptr, ##42908
1654c     49 93 52 F6 | 	abs	arg01, arg01 wc
16550     1F AA C6 C9 |  if_b	decod	local03, #31
16554     00 AA 06 36 |  if_ae	mov	local03, #0
16558     78 0A B1 FD | 	call	#__system___float_fromuns
1655c     55 7B 62 F5 | 	xor	result1, local03
16560     3D 93 02 F6 | 	mov	arg01, result1
16564     FF 7F 23 FF 
16568     00 94 06 F6 | 	mov	arg02, ##1191181824
1656c     6C 10 B1 FD | 	call	#__system___float_div
16570     3D 95 02 F6 | 	mov	arg02, result1
16574     54 93 02 F6 | 	mov	arg01, local02
16578     8C 0A B1 FD | 	call	#__system___float_add
1657c     3D AD 02 F6 | 	mov	local04, result1
16580                 | '   fpad=(1.0/65536.0)+pads(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16580     56 93 02 F6 | 	mov	arg01, local04
16584     1F 92 06 F4 | 	bitl	arg01, #31
16588     89 41 1D FF 
1658c     6F 94 06 F6 | 	mov	arg02, ##981668463
16590     01 96 06 F6 | 	mov	arg03, #1
16594     74 12 B1 FD | 	call	#__system___float_cmp
16598     00 7A 56 F2 | 	cmps	result1, #0 wc
1659c     00 AC 06 C6 |  if_b	mov	local04, #0
165a0     E7 AC 62 FC | 	wrlong	local04, fp
165a4     08 CE 05 F1 | 	add	fp, #8
165a8     E7 3C 68 FC | 	wrlong	#30, fp
165ac     08 CE 85 F1 | 	sub	fp, #8
165b0     E7 92 02 F6 | 	mov	arg01, fp
165b4     48 71 BF FD | 	call	#_push
165b8                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
165b8     0C 01 90 FD | 	jmp	#LR__1914
165bc                 | LR__1911
165bc     B0 70 BF FD | 	call	#_pop
165c0     E7 7A 62 FC | 	wrlong	result1, fp
165c4     04 CE 05 F1 | 	add	fp, #4
165c8     E7 7C 62 FC | 	wrlong	result2, fp
165cc     04 CE 05 F1 | 	add	fp, #4
165d0     E7 7E 62 FC | 	wrlong	result3, fp
165d4                 | ' t1=pop()
165d4                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
165d4     08 CE 85 F1 | 	sub	fp, #8
165d8     1C 7E 0E F2 | 	cmp	result3, #28 wz
165dc     08 CE 05 51 |  if_ne	add	fp, #8
165e0     E7 A6 02 5B |  if_ne	rdlong	local01, fp
165e4     08 CE 85 51 |  if_ne	sub	fp, #8
165e8     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
165ec     CC 00 90 5D |  if_ne	jmp	#LR__1913
165f0     E7 AC 02 FB | 	rdlong	local04, fp
165f4     54 00 00 FF 
165f8     C0 64 06 F1 | 	add	objptr, ##43200
165fc     32 AD 62 FC | 	wrlong	local04, objptr
16600                 | '   q=t1.result.uresult
16600                 | '   if q<7 then 
16600     54 00 00 FF 
16604     C0 64 86 F1 | 	sub	objptr, ##43200
16608     07 AC 56 F2 | 	cmps	local04, #7 wc
1660c     9C 00 90 3D |  if_ae	jmp	#LR__1912
16610     00 C0 1B FF 
16614     00 AC 06 F6 | 	mov	local04, ##931135488
16618     54 00 00 FF 
1661c     C0 64 06 F1 | 	add	objptr, ##43200
16620     32 A9 02 FB | 	rdlong	local02, objptr
16624     02 A8 66 F0 | 	shl	local02, #2
16628     24 65 86 F1 | 	sub	objptr, #292
1662c     32 A9 02 F1 | 	add	local02, objptr
16630     54 93 02 FB | 	rdlong	arg01, local02
16634     53 00 00 FF 
16638     9C 65 86 F1 | 	sub	objptr, ##42908
1663c     49 93 52 F6 | 	abs	arg01, arg01 wc
16640     1F AA C6 C9 |  if_b	decod	local03, #31
16644     00 AA 06 36 |  if_ae	mov	local03, #0
16648     88 09 B1 FD | 	call	#__system___float_fromuns
1664c     55 7B 62 F5 | 	xor	result1, local03
16650     3D 93 02 F6 | 	mov	arg01, result1
16654     FF 7F 23 FF 
16658     00 94 06 F6 | 	mov	arg02, ##1191181824
1665c     7C 0F B1 FD | 	call	#__system___float_div
16660     3D 95 02 F6 | 	mov	arg02, result1
16664     56 93 02 F6 | 	mov	arg01, local04
16668     9C 09 B1 FD | 	call	#__system___float_add
1666c     3D AD 02 F6 | 	mov	local04, result1
16670                 | '     fpad=(1.0/65536.0)+pads(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16670     56 93 02 F6 | 	mov	arg01, local04
16674     1F 92 06 F4 | 	bitl	arg01, #31
16678     89 41 1D FF 
1667c     6F 94 06 F6 | 	mov	arg02, ##981668463
16680     01 96 06 F6 | 	mov	arg03, #1
16684     84 11 B1 FD | 	call	#__system___float_cmp
16688     00 7A 56 F2 | 	cmps	result1, #0 wc
1668c     00 AC 06 C6 |  if_b	mov	local04, #0
16690     E7 AC 62 FC | 	wrlong	local04, fp
16694     08 CE 05 F1 | 	add	fp, #8
16698     E7 3C 68 FC | 	wrlong	#30, fp
1669c     08 CE 85 F1 | 	sub	fp, #8
166a0     E7 92 02 F6 | 	mov	arg01, fp
166a4     58 70 BF FD | 	call	#_push
166a8                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
166a8     1C 00 90 FD | 	jmp	#LR__1914
166ac                 | LR__1912
166ac     29 92 06 F6 | 	mov	arg01, #41
166b0     00 94 06 F6 | 	mov	arg02, #0
166b4     80 A9 B0 FD | 	call	#_printerror
166b8                 | '      printerror(41) : return
166b8     0C 00 90 FD | 	jmp	#LR__1914
166bc                 | LR__1913
166bc     29 92 06 F6 | 	mov	arg01, #41
166c0     00 94 06 F6 | 	mov	arg02, #0
166c4     70 A9 B0 FD | 	call	#_printerror
166c8                 | LR__1914
166c8     E7 F0 03 F6 | 	mov	ptra, fp
166cc     F2 00 A0 FD | 	call	#popregs_
166d0                 | _do_pads_ret
166d0     2D 00 64 FD | 	ret
166d4                 | 
166d4                 | ' 
166d4                 | ' ' ------------------ padw
166d4                 | ' 
166d4                 | ' sub do_padw
166d4                 | _do_padw
166d4     04 CA 05 F6 | 	mov	COUNT_, #4
166d8     E8 00 A0 FD | 	call	#pushregs_
166dc     14 F0 07 F1 | 	add	ptra, #20
166e0     4C 00 00 FF 
166e4     00 64 06 F1 | 	add	objptr, ##38912
166e8     32 A7 02 FB | 	rdlong	local01, objptr
166ec     53 97 02 F6 | 	mov	arg03, local01
166f0     01 96 66 F0 | 	shl	arg03, #1
166f4     53 97 02 F1 | 	add	arg03, local01
166f8     02 96 66 F0 | 	shl	arg03, #2
166fc     03 00 00 FF 
16700     04 64 86 F1 | 	sub	objptr, ##1540
16704     32 97 02 F1 | 	add	arg03, objptr
16708     4B A9 02 FB | 	rdlong	local02, arg03
1670c                 | ' 
1670c                 | ' numpar=compiledline(lineptr_e).result.uresult
1670c                 | ' if numpar>1 then print "padw: "; : printerror(39) : return
1670c     02 A8 16 F2 | 	cmp	local02, #2 wc
16710     48 00 00 FF 
16714     FC 65 86 F1 | 	sub	objptr, ##37372
16718     40 00 90 CD |  if_b	jmp	#LR__1920
1671c     00 92 06 F6 | 	mov	arg01, #0
16720     68 3B B1 FD | 	call	#__system___getiolock_0622
16724     3D 93 02 F6 | 	mov	arg01, result1
16728     DC E5 B0 FD | 	call	#__system___lockmem
1672c     99 01 00 FF 
16730     CC 95 06 F6 | 	mov	arg02, ##@LR__6070
16734     00 92 06 F6 | 	mov	arg01, #0
16738     00 96 06 F6 | 	mov	arg03, #0
1673c     BC F2 B0 FD | 	call	#__system___basic_print_string
16740     00 92 06 F6 | 	mov	arg01, #0
16744     44 3B B1 FD | 	call	#__system___getiolock_0622
16748     3D 01 68 FC | 	wrlong	#0, result1
1674c     27 92 06 F6 | 	mov	arg01, #39
16750     00 94 06 F6 | 	mov	arg02, #0
16754     E0 A8 B0 FD | 	call	#_printerror
16758     A0 01 90 FD | 	jmp	#LR__1924
1675c                 | LR__1920
1675c                 | ' if numpar=0 then 
1675c     00 A8 0E F2 | 	cmp	local02, #0 wz
16760     8C 00 90 5D |  if_ne	jmp	#LR__1921
16764     00 C0 1B FF 
16768     00 A8 06 F6 | 	mov	local02, ##931135488
1676c     53 00 00 FF 
16770     B8 65 06 F1 | 	add	objptr, ##42936
16774     32 93 02 FB | 	rdlong	arg01, objptr
16778     53 00 00 FF 
1677c     B8 65 86 F1 | 	sub	objptr, ##42936
16780     49 93 52 F6 | 	abs	arg01, arg01 wc
16784     1F AA C6 C9 |  if_b	decod	local03, #31
16788     00 AA 06 36 |  if_ae	mov	local03, #0
1678c     44 08 B1 FD | 	call	#__system___float_fromuns
16790     55 7B 62 F5 | 	xor	result1, local03
16794     3D 93 02 F6 | 	mov	arg01, result1
16798     FF 7F 23 FF 
1679c     00 94 06 F6 | 	mov	arg02, ##1191181824
167a0     38 0E B1 FD | 	call	#__system___float_div
167a4     3D 95 02 F6 | 	mov	arg02, result1
167a8     54 93 02 F6 | 	mov	arg01, local02
167ac     58 08 B1 FD | 	call	#__system___float_add
167b0     3D AD 02 F6 | 	mov	local04, result1
167b4                 | '   fpad=(1.0/65536.0)+padw(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
167b4     56 93 02 F6 | 	mov	arg01, local04
167b8     1F 92 06 F4 | 	bitl	arg01, #31
167bc     89 41 1D FF 
167c0     6F 94 06 F6 | 	mov	arg02, ##981668463
167c4     01 96 06 F6 | 	mov	arg03, #1
167c8     40 10 B1 FD | 	call	#__system___float_cmp
167cc     00 7A 56 F2 | 	cmps	result1, #0 wc
167d0     00 AC 06 C6 |  if_b	mov	local04, #0
167d4     E7 AC 62 FC | 	wrlong	local04, fp
167d8     08 CE 05 F1 | 	add	fp, #8
167dc     E7 3C 68 FC | 	wrlong	#30, fp
167e0     08 CE 85 F1 | 	sub	fp, #8
167e4     E7 92 02 F6 | 	mov	arg01, fp
167e8     14 6F BF FD | 	call	#_push
167ec                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
167ec     0C 01 90 FD | 	jmp	#LR__1924
167f0                 | LR__1921
167f0     7C 6E BF FD | 	call	#_pop
167f4     E7 7A 62 FC | 	wrlong	result1, fp
167f8     04 CE 05 F1 | 	add	fp, #4
167fc     E7 7C 62 FC | 	wrlong	result2, fp
16800     04 CE 05 F1 | 	add	fp, #4
16804     E7 7E 62 FC | 	wrlong	result3, fp
16808                 | ' t1=pop()
16808                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16808     08 CE 85 F1 | 	sub	fp, #8
1680c     1C 7E 0E F2 | 	cmp	result3, #28 wz
16810     08 CE 05 51 |  if_ne	add	fp, #8
16814     E7 A6 02 5B |  if_ne	rdlong	local01, fp
16818     08 CE 85 51 |  if_ne	sub	fp, #8
1681c     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
16820     CC 00 90 5D |  if_ne	jmp	#LR__1923
16824     E7 AC 02 FB | 	rdlong	local04, fp
16828     54 00 00 FF 
1682c     C0 64 06 F1 | 	add	objptr, ##43200
16830     32 AD 62 FC | 	wrlong	local04, objptr
16834                 | '   q=t1.result.uresult
16834                 | '   if q<7 then 
16834     54 00 00 FF 
16838     C0 64 86 F1 | 	sub	objptr, ##43200
1683c     07 AC 56 F2 | 	cmps	local04, #7 wc
16840     9C 00 90 3D |  if_ae	jmp	#LR__1922
16844     00 C0 1B FF 
16848     00 AC 06 F6 | 	mov	local04, ##931135488
1684c     54 00 00 FF 
16850     C0 64 06 F1 | 	add	objptr, ##43200
16854     32 A9 02 FB | 	rdlong	local02, objptr
16858     02 A8 66 F0 | 	shl	local02, #2
1685c     08 65 86 F1 | 	sub	objptr, #264
16860     32 A9 02 F1 | 	add	local02, objptr
16864     54 93 02 FB | 	rdlong	arg01, local02
16868     53 00 00 FF 
1686c     B8 65 86 F1 | 	sub	objptr, ##42936
16870     49 93 52 F6 | 	abs	arg01, arg01 wc
16874     1F AA C6 C9 |  if_b	decod	local03, #31
16878     00 AA 06 36 |  if_ae	mov	local03, #0
1687c     54 07 B1 FD | 	call	#__system___float_fromuns
16880     55 7B 62 F5 | 	xor	result1, local03
16884     3D 93 02 F6 | 	mov	arg01, result1
16888     FF 7F 23 FF 
1688c     00 94 06 F6 | 	mov	arg02, ##1191181824
16890     48 0D B1 FD | 	call	#__system___float_div
16894     3D 95 02 F6 | 	mov	arg02, result1
16898     56 93 02 F6 | 	mov	arg01, local04
1689c     68 07 B1 FD | 	call	#__system___float_add
168a0     3D AD 02 F6 | 	mov	local04, result1
168a4                 | '     fpad=(1.0/65536.0)+padw(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
168a4     56 93 02 F6 | 	mov	arg01, local04
168a8     1F 92 06 F4 | 	bitl	arg01, #31
168ac     89 41 1D FF 
168b0     6F 94 06 F6 | 	mov	arg02, ##981668463
168b4     01 96 06 F6 | 	mov	arg03, #1
168b8     50 0F B1 FD | 	call	#__system___float_cmp
168bc     00 7A 56 F2 | 	cmps	result1, #0 wc
168c0     00 AC 06 C6 |  if_b	mov	local04, #0
168c4     E7 AC 62 FC | 	wrlong	local04, fp
168c8     08 CE 05 F1 | 	add	fp, #8
168cc     E7 3C 68 FC | 	wrlong	#30, fp
168d0     08 CE 85 F1 | 	sub	fp, #8
168d4     E7 92 02 F6 | 	mov	arg01, fp
168d8     24 6E BF FD | 	call	#_push
168dc                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
168dc     1C 00 90 FD | 	jmp	#LR__1924
168e0                 | LR__1922
168e0     29 92 06 F6 | 	mov	arg01, #41
168e4     00 94 06 F6 | 	mov	arg02, #0
168e8     4C A7 B0 FD | 	call	#_printerror
168ec                 | '      printerror(41) : return
168ec     0C 00 90 FD | 	jmp	#LR__1924
168f0                 | LR__1923
168f0     29 92 06 F6 | 	mov	arg01, #41
168f4     00 94 06 F6 | 	mov	arg02, #0
168f8     3C A7 B0 FD | 	call	#_printerror
168fc                 | LR__1924
168fc     E7 F0 03 F6 | 	mov	ptra, fp
16900     F2 00 A0 FD | 	call	#popregs_
16904                 | _do_padw_ret
16904     2D 00 64 FD | 	ret
16908                 | 
16908                 | ' 
16908                 | ' ' ------------------ padx
16908                 | ' 
16908                 | ' sub do_padx
16908                 | _do_padx
16908     04 CA 05 F6 | 	mov	COUNT_, #4
1690c     E8 00 A0 FD | 	call	#pushregs_
16910     14 F0 07 F1 | 	add	ptra, #20
16914     4C 00 00 FF 
16918     00 64 06 F1 | 	add	objptr, ##38912
1691c     32 A7 02 FB | 	rdlong	local01, objptr
16920     53 97 02 F6 | 	mov	arg03, local01
16924     01 96 66 F0 | 	shl	arg03, #1
16928     53 97 02 F1 | 	add	arg03, local01
1692c     02 96 66 F0 | 	shl	arg03, #2
16930     03 00 00 FF 
16934     04 64 86 F1 | 	sub	objptr, ##1540
16938     32 97 02 F1 | 	add	arg03, objptr
1693c     4B A9 02 FB | 	rdlong	local02, arg03
16940                 | ' 
16940                 | ' numpar=compiledline(lineptr_e).result.uresult
16940                 | ' if numpar>1 then print "padx: "; : printerror(39) : return
16940     02 A8 16 F2 | 	cmp	local02, #2 wc
16944     48 00 00 FF 
16948     FC 65 86 F1 | 	sub	objptr, ##37372
1694c     40 00 90 CD |  if_b	jmp	#LR__1930
16950     00 92 06 F6 | 	mov	arg01, #0
16954     34 39 B1 FD | 	call	#__system___getiolock_0622
16958     3D 93 02 F6 | 	mov	arg01, result1
1695c     A8 E3 B0 FD | 	call	#__system___lockmem
16960     99 01 00 FF 
16964     D3 95 06 F6 | 	mov	arg02, ##@LR__6071
16968     00 92 06 F6 | 	mov	arg01, #0
1696c     00 96 06 F6 | 	mov	arg03, #0
16970     88 F0 B0 FD | 	call	#__system___basic_print_string
16974     00 92 06 F6 | 	mov	arg01, #0
16978     10 39 B1 FD | 	call	#__system___getiolock_0622
1697c     3D 01 68 FC | 	wrlong	#0, result1
16980     27 92 06 F6 | 	mov	arg01, #39
16984     00 94 06 F6 | 	mov	arg02, #0
16988     AC A6 B0 FD | 	call	#_printerror
1698c     A0 01 90 FD | 	jmp	#LR__1934
16990                 | LR__1930
16990                 | ' if numpar=0 then 
16990     00 A8 0E F2 | 	cmp	local02, #0 wz
16994     8C 00 90 5D |  if_ne	jmp	#LR__1931
16998     00 C0 1B FF 
1699c     00 A8 06 F6 | 	mov	local02, ##931135488
169a0     53 00 00 FF 
169a4     D8 64 06 F1 | 	add	objptr, ##42712
169a8     32 93 02 FB | 	rdlong	arg01, objptr
169ac     53 00 00 FF 
169b0     D8 64 86 F1 | 	sub	objptr, ##42712
169b4     49 93 52 F6 | 	abs	arg01, arg01 wc
169b8     1F AA C6 C9 |  if_b	decod	local03, #31
169bc     00 AA 06 36 |  if_ae	mov	local03, #0
169c0     10 06 B1 FD | 	call	#__system___float_fromuns
169c4     55 7B 62 F5 | 	xor	result1, local03
169c8     3D 93 02 F6 | 	mov	arg01, result1
169cc     FF 7F 23 FF 
169d0     00 94 06 F6 | 	mov	arg02, ##1191181824
169d4     04 0C B1 FD | 	call	#__system___float_div
169d8     3D 95 02 F6 | 	mov	arg02, result1
169dc     54 93 02 F6 | 	mov	arg01, local02
169e0     24 06 B1 FD | 	call	#__system___float_add
169e4     3D AD 02 F6 | 	mov	local04, result1
169e8                 | '   fpad=(1.0/65536.0)+padx(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
169e8     56 93 02 F6 | 	mov	arg01, local04
169ec     1F 92 06 F4 | 	bitl	arg01, #31
169f0     89 41 1D FF 
169f4     6F 94 06 F6 | 	mov	arg02, ##981668463
169f8     01 96 06 F6 | 	mov	arg03, #1
169fc     0C 0E B1 FD | 	call	#__system___float_cmp
16a00     00 7A 56 F2 | 	cmps	result1, #0 wc
16a04     00 AC 06 C6 |  if_b	mov	local04, #0
16a08     E7 AC 62 FC | 	wrlong	local04, fp
16a0c     08 CE 05 F1 | 	add	fp, #8
16a10     E7 3C 68 FC | 	wrlong	#30, fp
16a14     08 CE 85 F1 | 	sub	fp, #8
16a18     E7 92 02 F6 | 	mov	arg01, fp
16a1c     E0 6C BF FD | 	call	#_push
16a20                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16a20     0C 01 90 FD | 	jmp	#LR__1934
16a24                 | LR__1931
16a24     48 6C BF FD | 	call	#_pop
16a28     E7 7A 62 FC | 	wrlong	result1, fp
16a2c     04 CE 05 F1 | 	add	fp, #4
16a30     E7 7C 62 FC | 	wrlong	result2, fp
16a34     04 CE 05 F1 | 	add	fp, #4
16a38     E7 7E 62 FC | 	wrlong	result3, fp
16a3c                 | ' t1=pop()
16a3c                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16a3c     08 CE 85 F1 | 	sub	fp, #8
16a40     1C 7E 0E F2 | 	cmp	result3, #28 wz
16a44     08 CE 05 51 |  if_ne	add	fp, #8
16a48     E7 A6 02 5B |  if_ne	rdlong	local01, fp
16a4c     08 CE 85 51 |  if_ne	sub	fp, #8
16a50     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
16a54     CC 00 90 5D |  if_ne	jmp	#LR__1933
16a58     E7 AC 02 FB | 	rdlong	local04, fp
16a5c     54 00 00 FF 
16a60     C0 64 06 F1 | 	add	objptr, ##43200
16a64     32 AD 62 FC | 	wrlong	local04, objptr
16a68                 | '   q=t1.result.uresult
16a68                 | '   if q<7 then 
16a68     54 00 00 FF 
16a6c     C0 64 86 F1 | 	sub	objptr, ##43200
16a70     07 AC 56 F2 | 	cmps	local04, #7 wc
16a74     9C 00 90 3D |  if_ae	jmp	#LR__1932
16a78     00 C0 1B FF 
16a7c     00 AC 06 F6 | 	mov	local04, ##931135488
16a80     54 00 00 FF 
16a84     C0 64 06 F1 | 	add	objptr, ##43200
16a88     32 A9 02 FB | 	rdlong	local02, objptr
16a8c     02 A8 66 F0 | 	shl	local02, #2
16a90     E8 65 86 F1 | 	sub	objptr, #488
16a94     32 A9 02 F1 | 	add	local02, objptr
16a98     54 93 02 FB | 	rdlong	arg01, local02
16a9c     53 00 00 FF 
16aa0     D8 64 86 F1 | 	sub	objptr, ##42712
16aa4     49 93 52 F6 | 	abs	arg01, arg01 wc
16aa8     1F AA C6 C9 |  if_b	decod	local03, #31
16aac     00 AA 06 36 |  if_ae	mov	local03, #0
16ab0     20 05 B1 FD | 	call	#__system___float_fromuns
16ab4     55 7B 62 F5 | 	xor	result1, local03
16ab8     3D 93 02 F6 | 	mov	arg01, result1
16abc     FF 7F 23 FF 
16ac0     00 94 06 F6 | 	mov	arg02, ##1191181824
16ac4     14 0B B1 FD | 	call	#__system___float_div
16ac8     3D 95 02 F6 | 	mov	arg02, result1
16acc     56 93 02 F6 | 	mov	arg01, local04
16ad0     34 05 B1 FD | 	call	#__system___float_add
16ad4     3D AD 02 F6 | 	mov	local04, result1
16ad8                 | '     fpad=(1.0/65536.0)+padx(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16ad8     56 93 02 F6 | 	mov	arg01, local04
16adc     1F 92 06 F4 | 	bitl	arg01, #31
16ae0     89 41 1D FF 
16ae4     6F 94 06 F6 | 	mov	arg02, ##981668463
16ae8     01 96 06 F6 | 	mov	arg03, #1
16aec     1C 0D B1 FD | 	call	#__system___float_cmp
16af0     00 7A 56 F2 | 	cmps	result1, #0 wc
16af4     00 AC 06 C6 |  if_b	mov	local04, #0
16af8     E7 AC 62 FC | 	wrlong	local04, fp
16afc     08 CE 05 F1 | 	add	fp, #8
16b00     E7 3C 68 FC | 	wrlong	#30, fp
16b04     08 CE 85 F1 | 	sub	fp, #8
16b08     E7 92 02 F6 | 	mov	arg01, fp
16b0c     F0 6B BF FD | 	call	#_push
16b10                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16b10     1C 00 90 FD | 	jmp	#LR__1934
16b14                 | LR__1932
16b14     29 92 06 F6 | 	mov	arg01, #41
16b18     00 94 06 F6 | 	mov	arg02, #0
16b1c     18 A5 B0 FD | 	call	#_printerror
16b20                 | '      printerror(41) : return
16b20     0C 00 90 FD | 	jmp	#LR__1934
16b24                 | LR__1933
16b24     29 92 06 F6 | 	mov	arg01, #41
16b28     00 94 06 F6 | 	mov	arg02, #0
16b2c     08 A5 B0 FD | 	call	#_printerror
16b30                 | LR__1934
16b30     E7 F0 03 F6 | 	mov	ptra, fp
16b34     F2 00 A0 FD | 	call	#popregs_
16b38                 | _do_padx_ret
16b38     2D 00 64 FD | 	ret
16b3c                 | 
16b3c                 | ' 
16b3c                 | ' ' ------------------ pady
16b3c                 | ' 
16b3c                 | ' sub do_pady
16b3c                 | _do_pady
16b3c     04 CA 05 F6 | 	mov	COUNT_, #4
16b40     E8 00 A0 FD | 	call	#pushregs_
16b44     14 F0 07 F1 | 	add	ptra, #20
16b48     4C 00 00 FF 
16b4c     00 64 06 F1 | 	add	objptr, ##38912
16b50     32 A7 02 FB | 	rdlong	local01, objptr
16b54     53 97 02 F6 | 	mov	arg03, local01
16b58     01 96 66 F0 | 	shl	arg03, #1
16b5c     53 97 02 F1 | 	add	arg03, local01
16b60     02 96 66 F0 | 	shl	arg03, #2
16b64     03 00 00 FF 
16b68     04 64 86 F1 | 	sub	objptr, ##1540
16b6c     32 97 02 F1 | 	add	arg03, objptr
16b70     4B A9 02 FB | 	rdlong	local02, arg03
16b74                 | ' 
16b74                 | ' numpar=compiledline(lineptr_e).result.uresult
16b74                 | ' if numpar>1 then print "pady: "; : printerror(39) : return
16b74     02 A8 16 F2 | 	cmp	local02, #2 wc
16b78     48 00 00 FF 
16b7c     FC 65 86 F1 | 	sub	objptr, ##37372
16b80     40 00 90 CD |  if_b	jmp	#LR__1940
16b84     00 92 06 F6 | 	mov	arg01, #0
16b88     00 37 B1 FD | 	call	#__system___getiolock_0622
16b8c     3D 93 02 F6 | 	mov	arg01, result1
16b90     74 E1 B0 FD | 	call	#__system___lockmem
16b94     99 01 00 FF 
16b98     DA 95 06 F6 | 	mov	arg02, ##@LR__6072
16b9c     00 92 06 F6 | 	mov	arg01, #0
16ba0     00 96 06 F6 | 	mov	arg03, #0
16ba4     54 EE B0 FD | 	call	#__system___basic_print_string
16ba8     00 92 06 F6 | 	mov	arg01, #0
16bac     DC 36 B1 FD | 	call	#__system___getiolock_0622
16bb0     3D 01 68 FC | 	wrlong	#0, result1
16bb4     27 92 06 F6 | 	mov	arg01, #39
16bb8     00 94 06 F6 | 	mov	arg02, #0
16bbc     78 A4 B0 FD | 	call	#_printerror
16bc0     A0 01 90 FD | 	jmp	#LR__1944
16bc4                 | LR__1940
16bc4                 | ' if numpar=0 then 
16bc4     00 A8 0E F2 | 	cmp	local02, #0 wz
16bc8     8C 00 90 5D |  if_ne	jmp	#LR__1941
16bcc     00 C0 1B FF 
16bd0     00 A8 06 F6 | 	mov	local02, ##931135488
16bd4     53 00 00 FF 
16bd8     F4 64 06 F1 | 	add	objptr, ##42740
16bdc     32 93 02 FB | 	rdlong	arg01, objptr
16be0     53 00 00 FF 
16be4     F4 64 86 F1 | 	sub	objptr, ##42740
16be8     49 93 52 F6 | 	abs	arg01, arg01 wc
16bec     1F AA C6 C9 |  if_b	decod	local03, #31
16bf0     00 AA 06 36 |  if_ae	mov	local03, #0
16bf4     DC 03 B1 FD | 	call	#__system___float_fromuns
16bf8     55 7B 62 F5 | 	xor	result1, local03
16bfc     3D 93 02 F6 | 	mov	arg01, result1
16c00     FF 7F 23 FF 
16c04     00 94 06 F6 | 	mov	arg02, ##1191181824
16c08     D0 09 B1 FD | 	call	#__system___float_div
16c0c     3D 95 02 F6 | 	mov	arg02, result1
16c10     54 93 02 F6 | 	mov	arg01, local02
16c14     F0 03 B1 FD | 	call	#__system___float_add
16c18     3D AD 02 F6 | 	mov	local04, result1
16c1c                 | '   fpad=(1.0/65536.0)+pady(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16c1c     56 93 02 F6 | 	mov	arg01, local04
16c20     1F 92 06 F4 | 	bitl	arg01, #31
16c24     89 41 1D FF 
16c28     6F 94 06 F6 | 	mov	arg02, ##981668463
16c2c     01 96 06 F6 | 	mov	arg03, #1
16c30     D8 0B B1 FD | 	call	#__system___float_cmp
16c34     00 7A 56 F2 | 	cmps	result1, #0 wc
16c38     00 AC 06 C6 |  if_b	mov	local04, #0
16c3c     E7 AC 62 FC | 	wrlong	local04, fp
16c40     08 CE 05 F1 | 	add	fp, #8
16c44     E7 3C 68 FC | 	wrlong	#30, fp
16c48     08 CE 85 F1 | 	sub	fp, #8
16c4c     E7 92 02 F6 | 	mov	arg01, fp
16c50     AC 6A BF FD | 	call	#_push
16c54                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16c54     0C 01 90 FD | 	jmp	#LR__1944
16c58                 | LR__1941
16c58     14 6A BF FD | 	call	#_pop
16c5c     E7 7A 62 FC | 	wrlong	result1, fp
16c60     04 CE 05 F1 | 	add	fp, #4
16c64     E7 7C 62 FC | 	wrlong	result2, fp
16c68     04 CE 05 F1 | 	add	fp, #4
16c6c     E7 7E 62 FC | 	wrlong	result3, fp
16c70                 | ' t1=pop()
16c70                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16c70     08 CE 85 F1 | 	sub	fp, #8
16c74     1C 7E 0E F2 | 	cmp	result3, #28 wz
16c78     08 CE 05 51 |  if_ne	add	fp, #8
16c7c     E7 A6 02 5B |  if_ne	rdlong	local01, fp
16c80     08 CE 85 51 |  if_ne	sub	fp, #8
16c84     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
16c88     CC 00 90 5D |  if_ne	jmp	#LR__1943
16c8c     E7 AC 02 FB | 	rdlong	local04, fp
16c90     54 00 00 FF 
16c94     C0 64 06 F1 | 	add	objptr, ##43200
16c98     32 AD 62 FC | 	wrlong	local04, objptr
16c9c                 | '   q=t1.result.uresult
16c9c                 | '   if q<7 then 
16c9c     54 00 00 FF 
16ca0     C0 64 86 F1 | 	sub	objptr, ##43200
16ca4     07 AC 56 F2 | 	cmps	local04, #7 wc
16ca8     9C 00 90 3D |  if_ae	jmp	#LR__1942
16cac     00 C0 1B FF 
16cb0     00 AC 06 F6 | 	mov	local04, ##931135488
16cb4     54 00 00 FF 
16cb8     C0 64 06 F1 | 	add	objptr, ##43200
16cbc     32 A9 02 FB | 	rdlong	local02, objptr
16cc0     02 A8 66 F0 | 	shl	local02, #2
16cc4     CC 65 86 F1 | 	sub	objptr, #460
16cc8     32 A9 02 F1 | 	add	local02, objptr
16ccc     54 93 02 FB | 	rdlong	arg01, local02
16cd0     53 00 00 FF 
16cd4     F4 64 86 F1 | 	sub	objptr, ##42740
16cd8     49 93 52 F6 | 	abs	arg01, arg01 wc
16cdc     1F AA C6 C9 |  if_b	decod	local03, #31
16ce0     00 AA 06 36 |  if_ae	mov	local03, #0
16ce4     EC 02 B1 FD | 	call	#__system___float_fromuns
16ce8     55 7B 62 F5 | 	xor	result1, local03
16cec     3D 93 02 F6 | 	mov	arg01, result1
16cf0     FF 7F 23 FF 
16cf4     00 94 06 F6 | 	mov	arg02, ##1191181824
16cf8     E0 08 B1 FD | 	call	#__system___float_div
16cfc     3D 95 02 F6 | 	mov	arg02, result1
16d00     56 93 02 F6 | 	mov	arg01, local04
16d04     00 03 B1 FD | 	call	#__system___float_add
16d08     3D AD 02 F6 | 	mov	local04, result1
16d0c                 | '     fpad=(1.0/65536.0)+pady(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16d0c     56 93 02 F6 | 	mov	arg01, local04
16d10     1F 92 06 F4 | 	bitl	arg01, #31
16d14     89 41 1D FF 
16d18     6F 94 06 F6 | 	mov	arg02, ##981668463
16d1c     01 96 06 F6 | 	mov	arg03, #1
16d20     E8 0A B1 FD | 	call	#__system___float_cmp
16d24     00 7A 56 F2 | 	cmps	result1, #0 wc
16d28     00 AC 06 C6 |  if_b	mov	local04, #0
16d2c     E7 AC 62 FC | 	wrlong	local04, fp
16d30     08 CE 05 F1 | 	add	fp, #8
16d34     E7 3C 68 FC | 	wrlong	#30, fp
16d38     08 CE 85 F1 | 	sub	fp, #8
16d3c     E7 92 02 F6 | 	mov	arg01, fp
16d40     BC 69 BF FD | 	call	#_push
16d44                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16d44     1C 00 90 FD | 	jmp	#LR__1944
16d48                 | LR__1942
16d48     29 92 06 F6 | 	mov	arg01, #41
16d4c     00 94 06 F6 | 	mov	arg02, #0
16d50     E4 A2 B0 FD | 	call	#_printerror
16d54                 | '      printerror(41) : return
16d54     0C 00 90 FD | 	jmp	#LR__1944
16d58                 | LR__1943
16d58     29 92 06 F6 | 	mov	arg01, #41
16d5c     00 94 06 F6 | 	mov	arg02, #0
16d60     D4 A2 B0 FD | 	call	#_printerror
16d64                 | LR__1944
16d64     E7 F0 03 F6 | 	mov	ptra, fp
16d68     F2 00 A0 FD | 	call	#popregs_
16d6c                 | _do_pady_ret
16d6c     2D 00 64 FD | 	ret
16d70                 | 
16d70                 | ' 
16d70                 | ' ' ------------------ padz
16d70                 | ' 
16d70                 | ' sub do_padz
16d70                 | _do_padz
16d70     04 CA 05 F6 | 	mov	COUNT_, #4
16d74     E8 00 A0 FD | 	call	#pushregs_
16d78     14 F0 07 F1 | 	add	ptra, #20
16d7c     4C 00 00 FF 
16d80     00 64 06 F1 | 	add	objptr, ##38912
16d84     32 A7 02 FB | 	rdlong	local01, objptr
16d88     53 97 02 F6 | 	mov	arg03, local01
16d8c     01 96 66 F0 | 	shl	arg03, #1
16d90     53 97 02 F1 | 	add	arg03, local01
16d94     02 96 66 F0 | 	shl	arg03, #2
16d98     03 00 00 FF 
16d9c     04 64 86 F1 | 	sub	objptr, ##1540
16da0     32 97 02 F1 | 	add	arg03, objptr
16da4     4B A9 02 FB | 	rdlong	local02, arg03
16da8                 | ' 
16da8                 | ' numpar=compiledline(lineptr_e).result.uresult
16da8                 | ' if numpar>1 then print "padz: "; : printerror(39) : return
16da8     02 A8 16 F2 | 	cmp	local02, #2 wc
16dac     48 00 00 FF 
16db0     FC 65 86 F1 | 	sub	objptr, ##37372
16db4     40 00 90 CD |  if_b	jmp	#LR__1950
16db8     00 92 06 F6 | 	mov	arg01, #0
16dbc     CC 34 B1 FD | 	call	#__system___getiolock_0622
16dc0     3D 93 02 F6 | 	mov	arg01, result1
16dc4     40 DF B0 FD | 	call	#__system___lockmem
16dc8     99 01 00 FF 
16dcc     E1 95 06 F6 | 	mov	arg02, ##@LR__6073
16dd0     00 92 06 F6 | 	mov	arg01, #0
16dd4     00 96 06 F6 | 	mov	arg03, #0
16dd8     20 EC B0 FD | 	call	#__system___basic_print_string
16ddc     00 92 06 F6 | 	mov	arg01, #0
16de0     A8 34 B1 FD | 	call	#__system___getiolock_0622
16de4     3D 01 68 FC | 	wrlong	#0, result1
16de8     27 92 06 F6 | 	mov	arg01, #39
16dec     00 94 06 F6 | 	mov	arg02, #0
16df0     44 A2 B0 FD | 	call	#_printerror
16df4     A0 01 90 FD | 	jmp	#LR__1954
16df8                 | LR__1950
16df8                 | ' if numpar=0 then 
16df8     00 A8 0E F2 | 	cmp	local02, #0 wz
16dfc     8C 00 90 5D |  if_ne	jmp	#LR__1951
16e00     00 C0 1B FF 
16e04     00 A8 06 F6 | 	mov	local02, ##931135488
16e08     53 00 00 FF 
16e0c     10 65 06 F1 | 	add	objptr, ##42768
16e10     32 93 02 FB | 	rdlong	arg01, objptr
16e14     53 00 00 FF 
16e18     10 65 86 F1 | 	sub	objptr, ##42768
16e1c     49 93 52 F6 | 	abs	arg01, arg01 wc
16e20     1F AA C6 C9 |  if_b	decod	local03, #31
16e24     00 AA 06 36 |  if_ae	mov	local03, #0
16e28     A8 01 B1 FD | 	call	#__system___float_fromuns
16e2c     55 7B 62 F5 | 	xor	result1, local03
16e30     3D 93 02 F6 | 	mov	arg01, result1
16e34     FF 7F 23 FF 
16e38     00 94 06 F6 | 	mov	arg02, ##1191181824
16e3c     9C 07 B1 FD | 	call	#__system___float_div
16e40     3D 95 02 F6 | 	mov	arg02, result1
16e44     54 93 02 F6 | 	mov	arg01, local02
16e48     BC 01 B1 FD | 	call	#__system___float_add
16e4c     3D AD 02 F6 | 	mov	local04, result1
16e50                 | '   fpad=(1.0/65536.0)+padz(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16e50     56 93 02 F6 | 	mov	arg01, local04
16e54     1F 92 06 F4 | 	bitl	arg01, #31
16e58     89 41 1D FF 
16e5c     6F 94 06 F6 | 	mov	arg02, ##981668463
16e60     01 96 06 F6 | 	mov	arg03, #1
16e64     A4 09 B1 FD | 	call	#__system___float_cmp
16e68     00 7A 56 F2 | 	cmps	result1, #0 wc
16e6c     00 AC 06 C6 |  if_b	mov	local04, #0
16e70     E7 AC 62 FC | 	wrlong	local04, fp
16e74     08 CE 05 F1 | 	add	fp, #8
16e78     E7 3C 68 FC | 	wrlong	#30, fp
16e7c     08 CE 85 F1 | 	sub	fp, #8
16e80     E7 92 02 F6 | 	mov	arg01, fp
16e84     78 68 BF FD | 	call	#_push
16e88                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16e88     0C 01 90 FD | 	jmp	#LR__1954
16e8c                 | LR__1951
16e8c     E0 67 BF FD | 	call	#_pop
16e90     E7 7A 62 FC | 	wrlong	result1, fp
16e94     04 CE 05 F1 | 	add	fp, #4
16e98     E7 7C 62 FC | 	wrlong	result2, fp
16e9c     04 CE 05 F1 | 	add	fp, #4
16ea0     E7 7E 62 FC | 	wrlong	result3, fp
16ea4                 | ' t1=pop()
16ea4                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16ea4     08 CE 85 F1 | 	sub	fp, #8
16ea8     1C 7E 0E F2 | 	cmp	result3, #28 wz
16eac     08 CE 05 51 |  if_ne	add	fp, #8
16eb0     E7 A6 02 5B |  if_ne	rdlong	local01, fp
16eb4     08 CE 85 51 |  if_ne	sub	fp, #8
16eb8     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
16ebc     CC 00 90 5D |  if_ne	jmp	#LR__1953
16ec0     E7 AC 02 FB | 	rdlong	local04, fp
16ec4     54 00 00 FF 
16ec8     C0 64 06 F1 | 	add	objptr, ##43200
16ecc     32 AD 62 FC | 	wrlong	local04, objptr
16ed0                 | '   q=t1.result.uresult
16ed0                 | '   if q<7 then 
16ed0     54 00 00 FF 
16ed4     C0 64 86 F1 | 	sub	objptr, ##43200
16ed8     07 AC 56 F2 | 	cmps	local04, #7 wc
16edc     9C 00 90 3D |  if_ae	jmp	#LR__1952
16ee0     00 C0 1B FF 
16ee4     00 AC 06 F6 | 	mov	local04, ##931135488
16ee8     54 00 00 FF 
16eec     C0 64 06 F1 | 	add	objptr, ##43200
16ef0     32 A9 02 FB | 	rdlong	local02, objptr
16ef4     02 A8 66 F0 | 	shl	local02, #2
16ef8     B0 65 86 F1 | 	sub	objptr, #432
16efc     32 A9 02 F1 | 	add	local02, objptr
16f00     54 93 02 FB | 	rdlong	arg01, local02
16f04     53 00 00 FF 
16f08     10 65 86 F1 | 	sub	objptr, ##42768
16f0c     49 93 52 F6 | 	abs	arg01, arg01 wc
16f10     1F AA C6 C9 |  if_b	decod	local03, #31
16f14     00 AA 06 36 |  if_ae	mov	local03, #0
16f18     B8 00 B1 FD | 	call	#__system___float_fromuns
16f1c     55 7B 62 F5 | 	xor	result1, local03
16f20     3D 93 02 F6 | 	mov	arg01, result1
16f24     FF 7F 23 FF 
16f28     00 94 06 F6 | 	mov	arg02, ##1191181824
16f2c     AC 06 B1 FD | 	call	#__system___float_div
16f30     3D 95 02 F6 | 	mov	arg02, result1
16f34     56 93 02 F6 | 	mov	arg01, local04
16f38     CC 00 B1 FD | 	call	#__system___float_add
16f3c     3D AD 02 F6 | 	mov	local04, result1
16f40                 | '     fpad=(1.0/65536.0)+padz(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16f40     56 93 02 F6 | 	mov	arg01, local04
16f44     1F 92 06 F4 | 	bitl	arg01, #31
16f48     89 41 1D FF 
16f4c     6F 94 06 F6 | 	mov	arg02, ##981668463
16f50     01 96 06 F6 | 	mov	arg03, #1
16f54     B4 08 B1 FD | 	call	#__system___float_cmp
16f58     00 7A 56 F2 | 	cmps	result1, #0 wc
16f5c     00 AC 06 C6 |  if_b	mov	local04, #0
16f60     E7 AC 62 FC | 	wrlong	local04, fp
16f64     08 CE 05 F1 | 	add	fp, #8
16f68     E7 3C 68 FC | 	wrlong	#30, fp
16f6c     08 CE 85 F1 | 	sub	fp, #8
16f70     E7 92 02 F6 | 	mov	arg01, fp
16f74     88 67 BF FD | 	call	#_push
16f78                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16f78     1C 00 90 FD | 	jmp	#LR__1954
16f7c                 | LR__1952
16f7c     29 92 06 F6 | 	mov	arg01, #41
16f80     00 94 06 F6 | 	mov	arg02, #0
16f84     B0 A0 B0 FD | 	call	#_printerror
16f88                 | '      printerror(41) : return
16f88     0C 00 90 FD | 	jmp	#LR__1954
16f8c                 | LR__1953
16f8c     29 92 06 F6 | 	mov	arg01, #41
16f90     00 94 06 F6 | 	mov	arg02, #0
16f94     A0 A0 B0 FD | 	call	#_printerror
16f98                 | LR__1954
16f98     E7 F0 03 F6 | 	mov	ptra, fp
16f9c     F2 00 A0 FD | 	call	#popregs_
16fa0                 | _do_padz_ret
16fa0     2D 00 64 FD | 	ret
16fa4                 | 
16fa4                 | ' 
16fa4                 | ' '-------------------- paper
16fa4                 | ' 
16fa4                 | ' sub do_paper
16fa4                 | _do_paper
16fa4     03 CA 05 F6 | 	mov	COUNT_, #3
16fa8     E8 00 A0 FD | 	call	#pushregs_
16fac     C0 66 BF FD | 	call	#_pop
16fb0     3D A7 02 F6 | 	mov	local01, result1
16fb4     3E A9 02 F6 | 	mov	local02, result2
16fb8     3F AB 02 F6 | 	mov	local03, result3
16fbc                 | ' t1=pop() 
16fbc                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
16fbc     1E AA 0E F2 | 	cmp	local03, #30 wz
16fc0     10 00 90 5D |  if_ne	jmp	#LR__1960
16fc4     53 93 02 F6 | 	mov	arg01, local01
16fc8     00 94 06 F6 | 	mov	arg02, #0
16fcc     D0 08 B1 FD | 	call	#__system___float_tointeger
16fd0     3D A7 02 F6 | 	mov	local01, result1
16fd4                 | LR__1960
16fd4                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
16fd4     1F AA 0E F2 | 	cmp	local03, #31 wz
16fd8     18 00 90 5D |  if_ne	jmp	#LR__1961
16fdc     53 93 02 F6 | 	mov	arg01, local01
16fe0     10 0C B1 FD | 	call	#__system____builtin_atof
16fe4     3D 93 02 F6 | 	mov	arg01, result1
16fe8     00 94 06 F6 | 	mov	arg02, #0
16fec     B0 08 B1 FD | 	call	#__system___float_tointeger
16ff0     3D A7 02 F6 | 	mov	local01, result1
16ff4                 | LR__1961
16ff4     38 00 00 FF 
16ff8     B8 65 06 F1 | 	add	objptr, ##29112
16ffc     32 A7 62 FC | 	wrlong	local01, objptr
17000     04 64 06 F1 | 	add	objptr, #4
17004     32 93 02 FB | 	rdlong	arg01, objptr
17008                 | ' 
17008                 | ' write_color:=ff
17008     38 00 00 FF 
1700c     7B 65 86 F1 | 	sub	objptr, ##29051
17010     32 93 62 FC | 	wrlong	arg01, objptr
17014                 | ' write_background:=bb
17014     04 64 06 F1 | 	add	objptr, #4
17018     32 A7 62 FC | 	wrlong	local01, objptr
1701c     45 64 86 F1 | 	sub	objptr, #69
17020     E7 F0 03 F6 | 	mov	ptra, fp
17024     F2 00 A0 FD | 	call	#popregs_
17028                 | _do_paper_ret
17028     2D 00 64 FD | 	ret
1702c                 | 
1702c                 | ' 
1702c                 | ' '-------------------- peek
1702c                 | ' 
1702c                 | ' sub do_peek
1702c                 | _do_peek
1702c     01 CA 05 F6 | 	mov	COUNT_, #1
17030     E8 00 A0 FD | 	call	#pushregs_
17034     14 F0 07 F1 | 	add	ptra, #20
17038     34 66 BF FD | 	call	#_pop
1703c     E7 7A 62 FC | 	wrlong	result1, fp
17040     04 CE 05 F1 | 	add	fp, #4
17044     E7 7C 62 FC | 	wrlong	result2, fp
17048     04 CE 05 F1 | 	add	fp, #4
1704c     E7 7E 62 FC | 	wrlong	result3, fp
17050     08 CE 85 F1 | 	sub	fp, #8
17054     E7 92 02 F6 | 	mov	arg01, fp
17058     F0 67 BF FD | 	call	#_converttoint
1705c     3D 93 02 F6 | 	mov	arg01, result1
17060                 | ' 
17060                 | ' t1=pop()
17060                 | ' a=converttoint(t1)
17060                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
17060     00 04 00 FF 
17064     00 92 16 F2 | 	cmp	arg01, ##524288 wc
17068     49 A7 C2 CA |  if_b	rdbyte	local01, arg01
1706c     08 00 90 CD |  if_b	jmp	#LR__1970
17070     38 A2 B0 FD | 	call	#_pspeek
17074     3D A7 E2 F8 | 	getbyte	local01, result1, #0
17078                 | LR__1970
17078     08 CE 05 F1 | 	add	fp, #8
1707c     E7 3A 68 FC | 	wrlong	#29, fp
17080     08 CE 85 F1 | 	sub	fp, #8
17084     E7 A6 62 FC | 	wrlong	local01, fp
17088     E7 92 02 F6 | 	mov	arg01, fp
1708c     70 66 BF FD | 	call	#_push
17090     E7 F0 03 F6 | 	mov	ptra, fp
17094     F2 00 A0 FD | 	call	#popregs_
17098                 | _do_peek_ret
17098     2D 00 64 FD | 	ret
1709c                 | 
1709c                 | ' 
1709c                 | ' '-------------------- pinfloat
1709c                 | ' 
1709c                 | ' sub do_pinfloat
1709c                 | _do_pinfloat
1709c     00 CA 05 F6 | 	mov	COUNT_, #0
170a0     E8 00 A0 FD | 	call	#pushregs_
170a4     0C F0 07 F1 | 	add	ptra, #12
170a8     C4 65 BF FD | 	call	#_pop
170ac     E7 7A 62 FC | 	wrlong	result1, fp
170b0     04 CE 05 F1 | 	add	fp, #4
170b4     E7 7C 62 FC | 	wrlong	result2, fp
170b8     04 CE 05 F1 | 	add	fp, #4
170bc     E7 7E 62 FC | 	wrlong	result3, fp
170c0     08 CE 85 F1 | 	sub	fp, #8
170c4     E7 92 02 F6 | 	mov	arg01, fp
170c8     80 67 BF FD | 	call	#_converttoint
170cc     50 7A 62 FD | 	fltl	result1
170d0     E7 F0 03 F6 | 	mov	ptra, fp
170d4     F2 00 A0 FD | 	call	#popregs_
170d8                 | _do_pinfloat_ret
170d8     2D 00 64 FD | 	ret
170dc                 | 
170dc                 | ' 
170dc                 | ' '-------------------- pinhi
170dc                 | ' 
170dc                 | ' sub do_pinhi
170dc                 | _do_pinhi
170dc     00 CA 05 F6 | 	mov	COUNT_, #0
170e0     E8 00 A0 FD | 	call	#pushregs_
170e4     0C F0 07 F1 | 	add	ptra, #12
170e8     84 65 BF FD | 	call	#_pop
170ec     E7 7A 62 FC | 	wrlong	result1, fp
170f0     04 CE 05 F1 | 	add	fp, #4
170f4     E7 7C 62 FC | 	wrlong	result2, fp
170f8     04 CE 05 F1 | 	add	fp, #4
170fc     E7 7E 62 FC | 	wrlong	result3, fp
17100     08 CE 85 F1 | 	sub	fp, #8
17104     E7 92 02 F6 | 	mov	arg01, fp
17108     40 67 BF FD | 	call	#_converttoint
1710c     59 7A 62 FD | 	drvh	result1
17110     E7 F0 03 F6 | 	mov	ptra, fp
17114     F2 00 A0 FD | 	call	#popregs_
17118                 | _do_pinhi_ret
17118     2D 00 64 FD | 	ret
1711c                 | 
1711c                 | ' 
1711c                 | ' '-------------------- pinlo
1711c                 | ' 
1711c                 | ' sub do_pinlo
1711c                 | _do_pinlo
1711c     00 CA 05 F6 | 	mov	COUNT_, #0
17120     E8 00 A0 FD | 	call	#pushregs_
17124     0C F0 07 F1 | 	add	ptra, #12
17128     44 65 BF FD | 	call	#_pop
1712c     E7 7A 62 FC | 	wrlong	result1, fp
17130     04 CE 05 F1 | 	add	fp, #4
17134     E7 7C 62 FC | 	wrlong	result2, fp
17138     04 CE 05 F1 | 	add	fp, #4
1713c     E7 7E 62 FC | 	wrlong	result3, fp
17140     08 CE 85 F1 | 	sub	fp, #8
17144     E7 92 02 F6 | 	mov	arg01, fp
17148     00 67 BF FD | 	call	#_converttoint
1714c     58 7A 62 FD | 	drvl	result1
17150     E7 F0 03 F6 | 	mov	ptra, fp
17154     F2 00 A0 FD | 	call	#popregs_
17158                 | _do_pinlo_ret
17158     2D 00 64 FD | 	ret
1715c                 | 
1715c                 | ' 
1715c                 | ' '-------------------- pinread
1715c                 | ' 
1715c                 | ' sub do_pinread
1715c                 | _do_pinread
1715c     00 CA 05 F6 | 	mov	COUNT_, #0
17160     E8 00 A0 FD | 	call	#pushregs_
17164     0C F0 07 F1 | 	add	ptra, #12
17168     04 65 BF FD | 	call	#_pop
1716c     E7 7A 62 FC | 	wrlong	result1, fp
17170     04 CE 05 F1 | 	add	fp, #4
17174     E7 7C 62 FC | 	wrlong	result2, fp
17178     04 CE 05 F1 | 	add	fp, #4
1717c     E7 7E 62 FC | 	wrlong	result3, fp
17180     08 CE 85 F1 | 	sub	fp, #8
17184     E7 92 02 F6 | 	mov	arg01, fp
17188     C0 66 BF FD | 	call	#_converttoint
1718c     3D 93 02 F6 | 	mov	arg01, result1
17190     20 92 CE F7 | 	test	arg01, #32 wz
17194     FF 7B 02 56 |  if_ne	mov	result1, inb
17198     FE 7B 02 A6 |  if_e	mov	result1, ina
1719c     49 7B 42 F0 | 	shr	result1, arg01
171a0     06 92 46 F0 | 	shr	arg01, #6
171a4     49 7B 42 F7 | 	zerox	result1, arg01
171a8     54 00 00 FF 
171ac     C8 64 06 F1 | 	add	objptr, ##43208
171b0     32 7B 62 FC | 	wrlong	result1, objptr
171b4     54 00 00 FF 
171b8     C8 64 86 F1 | 	sub	objptr, ##43208
171bc     08 CE 05 F1 | 	add	fp, #8
171c0     E7 3A 68 FC | 	wrlong	#29, fp
171c4     08 CE 85 F1 | 	sub	fp, #8
171c8     E7 08 68 FC | 	wrlong	#4, fp
171cc     E7 92 02 F6 | 	mov	arg01, fp
171d0     2C 65 BF FD | 	call	#_push
171d4     E7 F0 03 F6 | 	mov	ptra, fp
171d8     F2 00 A0 FD | 	call	#popregs_
171dc                 | _do_pinread_ret
171dc     2D 00 64 FD | 	ret
171e0                 | 
171e0                 | ' 
171e0                 | ' '-------------------- pinstart
171e0                 | ' 
171e0                 | ' sub do_pinstart
171e0                 | _do_pinstart
171e0     03 CA 05 F6 | 	mov	COUNT_, #3
171e4     E8 00 A0 FD | 	call	#pushregs_
171e8     30 F0 07 F1 | 	add	ptra, #48
171ec     80 64 BF FD | 	call	#_pop
171f0     3D 97 02 F6 | 	mov	arg03, result1
171f4     3E 95 02 F6 | 	mov	arg02, result2
171f8     3F 99 02 F6 | 	mov	arg04, result3
171fc     E7 96 62 FC | 	wrlong	arg03, fp
17200     04 CE 05 F1 | 	add	fp, #4
17204     E7 94 62 FC | 	wrlong	arg02, fp
17208     04 CE 05 F1 | 	add	fp, #4
1720c     E7 98 62 FC | 	wrlong	arg04, fp
17210     08 CE 85 F1 | 	sub	fp, #8
17214     58 64 BF FD | 	call	#_pop
17218     3D 97 02 F6 | 	mov	arg03, result1
1721c     3E 95 02 F6 | 	mov	arg02, result2
17220     3F 99 02 F6 | 	mov	arg04, result3
17224     0C CE 05 F1 | 	add	fp, #12
17228     E7 96 62 FC | 	wrlong	arg03, fp
1722c     04 CE 05 F1 | 	add	fp, #4
17230     E7 94 62 FC | 	wrlong	arg02, fp
17234     04 CE 05 F1 | 	add	fp, #4
17238     E7 98 62 FC | 	wrlong	arg04, fp
1723c     14 CE 85 F1 | 	sub	fp, #20
17240     2C 64 BF FD | 	call	#_pop
17244     3D 97 02 F6 | 	mov	arg03, result1
17248     3E 95 02 F6 | 	mov	arg02, result2
1724c     3F 99 02 F6 | 	mov	arg04, result3
17250     18 CE 05 F1 | 	add	fp, #24
17254     E7 96 62 FC | 	wrlong	arg03, fp
17258     04 CE 05 F1 | 	add	fp, #4
1725c     E7 94 62 FC | 	wrlong	arg02, fp
17260     04 CE 05 F1 | 	add	fp, #4
17264     E7 98 62 FC | 	wrlong	arg04, fp
17268     20 CE 85 F1 | 	sub	fp, #32
1726c     00 64 BF FD | 	call	#_pop
17270     3F 97 02 F6 | 	mov	arg03, result3
17274     24 CE 05 F1 | 	add	fp, #36
17278     E7 7A 62 FC | 	wrlong	result1, fp
1727c     04 CE 05 F1 | 	add	fp, #4
17280     E7 7C 62 FC | 	wrlong	result2, fp
17284     04 CE 05 F1 | 	add	fp, #4
17288     E7 96 62 FC | 	wrlong	arg03, fp
1728c     08 CE 85 F1 | 	sub	fp, #8
17290     E7 92 02 F6 | 	mov	arg01, fp
17294     24 CE 85 F1 | 	sub	fp, #36
17298     B0 65 BF FD | 	call	#_converttoint
1729c     3D A7 02 F6 | 	mov	local01, result1
172a0     E7 92 02 F6 | 	mov	arg01, fp
172a4     18 92 06 F1 | 	add	arg01, #24
172a8     A0 65 BF FD | 	call	#_converttoint
172ac     3D A9 02 F6 | 	mov	local02, result1
172b0     E7 92 02 F6 | 	mov	arg01, fp
172b4     0C 92 06 F1 | 	add	arg01, #12
172b8     90 65 BF FD | 	call	#_converttoint
172bc     3D AB 02 F6 | 	mov	local03, result1
172c0     E7 92 02 F6 | 	mov	arg01, fp
172c4     84 65 BF FD | 	call	#_converttoint
172c8     40 A6 62 FD | 	dirl	local01
172cc     53 A9 02 FC | 	wrpin	local02, local01
172d0     53 AB 12 FC | 	wxpin	local03, local01
172d4     53 7B 22 FC | 	wypin	result1, local01
172d8     41 A6 62 FD | 	dirh	local01
172dc     E7 F0 03 F6 | 	mov	ptra, fp
172e0     F2 00 A0 FD | 	call	#popregs_
172e4                 | _do_pinstart_ret
172e4     2D 00 64 FD | 	ret
172e8                 | 
172e8                 | ' 
172e8                 | ' '-------------------- pintoggle
172e8                 | ' 
172e8                 | ' sub do_pintoggle
172e8                 | _do_pintoggle
172e8     00 CA 05 F6 | 	mov	COUNT_, #0
172ec     E8 00 A0 FD | 	call	#pushregs_
172f0     0C F0 07 F1 | 	add	ptra, #12
172f4     78 63 BF FD | 	call	#_pop
172f8     E7 7A 62 FC | 	wrlong	result1, fp
172fc     04 CE 05 F1 | 	add	fp, #4
17300     E7 7C 62 FC | 	wrlong	result2, fp
17304     04 CE 05 F1 | 	add	fp, #4
17308     E7 7E 62 FC | 	wrlong	result3, fp
1730c     08 CE 85 F1 | 	sub	fp, #8
17310     E7 92 02 F6 | 	mov	arg01, fp
17314     34 65 BF FD | 	call	#_converttoint
17318     5F 7A 62 FD | 	drvnot	result1
1731c     E7 F0 03 F6 | 	mov	ptra, fp
17320     F2 00 A0 FD | 	call	#popregs_
17324                 | _do_pintoggle_ret
17324     2D 00 64 FD | 	ret
17328                 | 
17328                 | ' 
17328                 | ' '-------------------- pinwrite
17328                 | ' 
17328                 | ' sub do_pinwrite
17328                 | _do_pinwrite
17328     01 CA 05 F6 | 	mov	COUNT_, #1
1732c     E8 00 A0 FD | 	call	#pushregs_
17330     18 F0 07 F1 | 	add	ptra, #24
17334     38 63 BF FD | 	call	#_pop
17338     3D 95 02 F6 | 	mov	arg02, result1
1733c     3E 93 02 F6 | 	mov	arg01, result2
17340     3F A7 02 F6 | 	mov	local01, result3
17344     E7 94 62 FC | 	wrlong	arg02, fp
17348     04 CE 05 F1 | 	add	fp, #4
1734c     E7 92 62 FC | 	wrlong	arg01, fp
17350     04 CE 05 F1 | 	add	fp, #4
17354     E7 A6 62 FC | 	wrlong	local01, fp
17358     08 CE 85 F1 | 	sub	fp, #8
1735c     10 63 BF FD | 	call	#_pop
17360     3F A7 02 F6 | 	mov	local01, result3
17364     0C CE 05 F1 | 	add	fp, #12
17368     E7 7A 62 FC | 	wrlong	result1, fp
1736c     04 CE 05 F1 | 	add	fp, #4
17370     E7 7C 62 FC | 	wrlong	result2, fp
17374     04 CE 05 F1 | 	add	fp, #4
17378     E7 A6 62 FC | 	wrlong	local01, fp
1737c     08 CE 85 F1 | 	sub	fp, #8
17380     E7 92 02 F6 | 	mov	arg01, fp
17384     0C CE 85 F1 | 	sub	fp, #12
17388     C0 64 BF FD | 	call	#_converttoint
1738c     3D A7 02 F6 | 	mov	local01, result1
17390     E7 92 02 F6 | 	mov	arg01, fp
17394     B4 64 BF FD | 	call	#_converttoint
17398     3D 95 02 F6 | 	mov	arg02, result1
1739c     53 93 02 F6 | 	mov	arg01, local01
173a0     18 DB B0 FD | 	call	#__system___pinwrite
173a4     E7 F0 03 F6 | 	mov	ptra, fp
173a8     F2 00 A0 FD | 	call	#popregs_
173ac                 | _do_pinwrite_ret
173ac     2D 00 64 FD | 	ret
173b0                 | 
173b0                 | ' 
173b0                 | ' '-------------------- play
173b0                 | ' 
173b0                 | ' sub do_play
173b0                 | _do_play
173b0     15 CA 05 F6 | 	mov	COUNT_, #21
173b4     E8 00 A0 FD | 	call	#pushregs_
173b8     84 F0 07 F1 | 	add	ptra, #132
173bc     77 CC 21 FF 
173c0     BE A7 06 F6 | 	mov	local01, ##1134096318
173c4                 | ' speed_coeff=305.873
173c4                 | ' 
173c4                 | ' for i=0 to 9 : params(i)=-2.0 : next i
173c4     00 A8 06 F6 | 	mov	local02, #0
173c8     3C CE 05 F1 | 	add	fp, #60
173cc     D7 10 48 FB | 	callpa	#(@LR__1981-@LR__1980)>>2,fcache_load_ptr_
173d0                 | LR__1980
173d0     54 AB 02 F6 | 	mov	local03, local02
173d4     02 AA 66 F0 | 	shl	local03, #2
173d8     E7 AA 02 F1 | 	add	local03, fp
173dc     00 00 E0 FF 
173e0     55 01 68 FC | 	wrlong	##-1073741824, local03
173e4     01 A8 06 F1 | 	add	local02, #1
173e8     0A A8 56 F2 | 	cmps	local02, #10 wc
173ec     E0 FF 9F CD |  if_b	jmp	#LR__1980
173f0                 | LR__1981
173f0     3C CE 85 F1 | 	sub	fp, #60
173f4     4C 00 00 FF 
173f8     00 64 06 F1 | 	add	objptr, ##38912
173fc     32 A9 02 FB | 	rdlong	local02, objptr
17400     54 AD 02 F6 | 	mov	local04, local02
17404     01 AC 66 F0 | 	shl	local04, #1
17408     54 AD 02 F1 | 	add	local04, local02
1740c     02 AC 66 F0 | 	shl	local04, #2
17410     03 00 00 FF 
17414     04 64 86 F1 | 	sub	objptr, ##1540
17418     32 AD 02 F1 | 	add	local04, objptr
1741c     56 AF 02 FB | 	rdlong	local05, local04
17420                 | ' numpar=compiledline(lineptr_e).result.uresult
17420                 | ' for i=numpar to 1 step -1 
17420     57 A9 02 F6 | 	mov	local02, local05
17424     48 00 00 FF 
17428     FC 65 86 F1 | 	sub	objptr, ##37372
1742c                 | LR__1982
1742c     40 62 BF FD | 	call	#_pop
17430     64 CE 05 F1 | 	add	fp, #100
17434     E7 7A 62 FC | 	wrlong	result1, fp
17438     04 CE 05 F1 | 	add	fp, #4
1743c     E7 7C 62 FC | 	wrlong	result2, fp
17440     04 CE 05 F1 | 	add	fp, #4
17444     E7 7E 62 FC | 	wrlong	result3, fp
17448     54 AB 02 F6 | 	mov	local03, local02
1744c     01 AA 86 F1 | 	sub	local03, #1
17450     02 AA 66 F0 | 	shl	local03, #2
17454     30 CE 85 F1 | 	sub	fp, #48
17458     E7 AA 02 F1 | 	add	local03, fp
1745c     28 CE 05 F1 | 	add	fp, #40
17460     E7 B0 02 F6 | 	mov	local06, fp
17464     58 93 02 F6 | 	mov	arg01, local06
17468     64 CE 85 F1 | 	sub	fp, #100
1746c     98 64 BF FD | 	call	#_converttofloat
17470     55 7B 62 FC | 	wrlong	result1, local03
17474     01 A8 86 F1 | 	sub	local02, #1
17478     01 A8 56 F2 | 	cmps	local02, #1 wc
1747c     AC FF 9F 3D |  if_ae	jmp	#LR__1982
17480                 | ' 
17480                 | ' if params(0)<0 then channel=0 else channel=round(params(0)) mod 8
17480     3C CE 05 F1 | 	add	fp, #60
17484     E7 92 02 FB | 	rdlong	arg01, fp
17488     3C CE 85 F1 | 	sub	fp, #60
1748c     00 94 06 F6 | 	mov	arg02, #0
17490     01 96 06 F6 | 	mov	arg03, #1
17494     74 03 B1 FD | 	call	#__system___float_cmp
17498     00 7A 56 F2 | 	cmps	result1, #0 wc
1749c     00 B2 06 C6 |  if_b	mov	local07, #0
174a0     20 00 90 CD |  if_b	jmp	#LR__1983
174a4     3C CE 05 F1 | 	add	fp, #60
174a8     E7 92 02 FB | 	rdlong	arg01, fp
174ac     3C CE 85 F1 | 	sub	fp, #60
174b0     01 94 06 F6 | 	mov	arg02, #1
174b4     E8 03 B1 FD | 	call	#__system___float_tointeger
174b8     3D B3 52 F6 | 	abs	local07, result1 wc
174bc     07 B2 06 F5 | 	and	local07, #7
174c0     59 B3 82 F6 | 	negc	local07, local07
174c4                 | LR__1983
174c4                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
174c4     40 CE 05 F1 | 	add	fp, #64
174c8     E7 92 02 FB | 	rdlong	arg01, fp
174cc     40 CE 85 F1 | 	sub	fp, #64
174d0     00 94 06 F6 | 	mov	arg02, #0
174d4     01 96 06 F6 | 	mov	arg03, #1
174d8     30 03 B1 FD | 	call	#__system___float_cmp
174dc     00 7A 56 F2 | 	cmps	result1, #0 wc
174e0     28 00 90 3D |  if_ae	jmp	#LR__1984
174e4     59 97 02 F6 | 	mov	arg03, local07
174e8     03 96 66 F0 | 	shl	arg03, #3
174ec     59 97 82 F1 | 	sub	arg03, local07
174f0     02 96 66 F0 | 	shl	arg03, #2
174f4     32 AD 02 F6 | 	mov	local04, objptr
174f8     16 00 00 FF 
174fc     98 AC 06 F1 | 	add	local04, ##11416
17500     56 97 02 F1 | 	add	arg03, local04
17504     4B B5 02 FB | 	rdlong	local08, arg03
17508     30 00 90 FD | 	jmp	#LR__1985
1750c                 | LR__1984
1750c     40 CE 05 F1 | 	add	fp, #64
17510     E7 B4 02 FB | 	rdlong	local08, fp
17514     40 CE 85 F1 | 	sub	fp, #64
17518     59 97 02 F6 | 	mov	arg03, local07
1751c     03 96 66 F0 | 	shl	arg03, #3
17520     59 97 82 F1 | 	sub	arg03, local07
17524     02 96 66 F0 | 	shl	arg03, #2
17528     32 AD 02 F6 | 	mov	local04, objptr
1752c     16 00 00 FF 
17530     98 AC 06 F1 | 	add	local04, ##11416
17534     56 97 02 F1 | 	add	arg03, local04
17538     4B B5 62 FC | 	wrlong	local08, arg03
1753c                 | LR__1985
1753c                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
1753c     44 CE 05 F1 | 	add	fp, #68
17540     E7 92 02 FB | 	rdlong	arg01, fp
17544     44 CE 85 F1 | 	sub	fp, #68
17548     00 94 06 F6 | 	mov	arg02, #0
1754c     01 96 06 F6 | 	mov	arg03, #1
17550     B8 02 B1 FD | 	call	#__system___float_cmp
17554     00 7A 56 F2 | 	cmps	result1, #0 wc
17558     24 00 90 CD |  if_b	jmp	#LR__1986
1755c     44 CE 05 F1 | 	add	fp, #68
17560     E7 92 02 FB | 	rdlong	arg01, fp
17564     44 CE 85 F1 | 	sub	fp, #68
17568     20 0E 23 FF 
1756c     00 94 06 F6 | 	mov	arg02, ##1176256512
17570     01 96 66 F6 | 	neg	arg03, #1
17574     94 02 B1 FD | 	call	#__system___float_cmp
17578     01 7A 56 F2 | 	cmps	result1, #1 wc
1757c     30 00 90 CD |  if_b	jmp	#LR__1987
17580                 | LR__1986
17580     59 AD 02 F6 | 	mov	local04, local07
17584     03 AC 66 F0 | 	shl	local04, #3
17588     59 AD 82 F1 | 	sub	local04, local07
1758c     02 AC 66 F0 | 	shl	local04, #2
17590     32 B1 02 F6 | 	mov	local06, objptr
17594     16 00 00 FF 
17598     98 B0 06 F1 | 	add	local06, ##11416
1759c     58 AD 02 F1 | 	add	local04, local06
175a0     06 AC 06 F1 | 	add	local04, #6
175a4     56 B7 E2 FA | 	rdword	local09, local04
175a8     5B B9 32 F9 | 	getword	local10, local09, #0
175ac     40 00 90 FD | 	jmp	#LR__1988
175b0                 | LR__1987
175b0     44 CE 05 F1 | 	add	fp, #68
175b4     E7 92 02 FB | 	rdlong	arg01, fp
175b8     44 CE 85 F1 | 	sub	fp, #68
175bc     01 94 06 F6 | 	mov	arg02, #1
175c0     DC 02 B1 FD | 	call	#__system___float_tointeger
175c4     3D B9 02 F6 | 	mov	local10, result1
175c8     59 97 02 F6 | 	mov	arg03, local07
175cc     03 96 66 F0 | 	shl	arg03, #3
175d0     59 97 82 F1 | 	sub	arg03, local07
175d4     02 96 66 F0 | 	shl	arg03, #2
175d8     32 AD 02 F6 | 	mov	local04, objptr
175dc     16 00 00 FF 
175e0     98 AC 06 F1 | 	add	local04, ##11416
175e4     56 97 02 F1 | 	add	arg03, local04
175e8     06 96 06 F1 | 	add	arg03, #6
175ec     4B B9 52 FC | 	wrword	local10, arg03
175f0                 | LR__1988
175f0                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
175f0     48 CE 05 F1 | 	add	fp, #72
175f4     E7 92 02 FB | 	rdlong	arg01, fp
175f8     48 CE 85 F1 | 	sub	fp, #72
175fc     00 94 06 F6 | 	mov	arg02, #0
17600     01 96 06 F6 | 	mov	arg03, #1
17604     04 02 B1 FD | 	call	#__system___float_cmp
17608     00 7A 56 F2 | 	cmps	result1, #0 wc
1760c     24 00 90 CD |  if_b	jmp	#LR__1989
17610     48 CE 05 F1 | 	add	fp, #72
17614     E7 92 02 FB | 	rdlong	arg01, fp
17618     48 CE 85 F1 | 	sub	fp, #72
1761c     89 C1 20 FF 
17620     6F 94 06 F6 | 	mov	arg02, ##1099108975
17624     01 96 66 F6 | 	neg	arg03, #1
17628     E0 01 B1 FD | 	call	#__system___float_cmp
1762c     01 7A 56 F2 | 	cmps	result1, #1 wc
17630     2C 00 90 CD |  if_b	jmp	#LR__1990
17634                 | LR__1989
17634     59 B1 02 F6 | 	mov	local06, local07
17638     03 B0 66 F0 | 	shl	local06, #3
1763c     59 B1 82 F1 | 	sub	local06, local07
17640     02 B0 66 F0 | 	shl	local06, #2
17644     32 AD 02 F6 | 	mov	local04, objptr
17648     16 00 00 FF 
1764c     98 AC 06 F1 | 	add	local04, ##11416
17650     56 B1 02 F1 | 	add	local06, local04
17654     0C B0 06 F1 | 	add	local06, #12
17658     58 BB 02 FB | 	rdlong	local11, local06
1765c     34 00 90 FD | 	jmp	#LR__1991
17660                 | LR__1990
17660     48 CE 05 F1 | 	add	fp, #72
17664     E7 BA 02 FB | 	rdlong	local11, fp
17668     48 CE 85 F1 | 	sub	fp, #72
1766c     59 97 02 F6 | 	mov	arg03, local07
17670     03 96 66 F0 | 	shl	arg03, #3
17674     59 97 82 F1 | 	sub	arg03, local07
17678     02 96 66 F0 | 	shl	arg03, #2
1767c     32 AD 02 F6 | 	mov	local04, objptr
17680     16 00 00 FF 
17684     98 AC 06 F1 | 	add	local04, ##11416
17688     56 97 02 F1 | 	add	arg03, local04
1768c     0C 96 06 F1 | 	add	arg03, #12
17690     4B BB 62 FC | 	wrlong	local11, arg03
17694                 | LR__1991
17694                 | ' if params(4)<0 orelse params(4)>32 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
17694     4C CE 05 F1 | 	add	fp, #76
17698     E7 92 02 FB | 	rdlong	arg01, fp
1769c     4C CE 85 F1 | 	sub	fp, #76
176a0     00 94 06 F6 | 	mov	arg02, #0
176a4     01 96 06 F6 | 	mov	arg03, #1
176a8     60 01 B1 FD | 	call	#__system___float_cmp
176ac     00 7A 56 F2 | 	cmps	result1, #0 wc
176b0     24 00 90 CD |  if_b	jmp	#LR__1992
176b4     4C CE 05 F1 | 	add	fp, #76
176b8     E7 92 02 FB | 	rdlong	arg01, fp
176bc     4C CE 85 F1 | 	sub	fp, #76
176c0     00 00 21 FF 
176c4     00 94 06 F6 | 	mov	arg02, ##1107296256
176c8     01 96 66 F6 | 	neg	arg03, #1
176cc     3C 01 B1 FD | 	call	#__system___float_cmp
176d0     01 7A 56 F2 | 	cmps	result1, #1 wc
176d4     30 00 90 CD |  if_b	jmp	#LR__1993
176d8                 | LR__1992
176d8     59 AD 02 F6 | 	mov	local04, local07
176dc     03 AC 66 F0 | 	shl	local04, #3
176e0     59 AD 82 F1 | 	sub	local04, local07
176e4     02 AC 66 F0 | 	shl	local04, #2
176e8     32 B1 02 F6 | 	mov	local06, objptr
176ec     16 00 00 FF 
176f0     98 B0 06 F1 | 	add	local06, ##11416
176f4     58 AD 02 F1 | 	add	local04, local06
176f8     04 AC 06 F1 | 	add	local04, #4
176fc     56 B7 C2 FA | 	rdbyte	local09, local04
17700     5B BD E2 F8 | 	getbyte	local12, local09, #0
17704     40 00 90 FD | 	jmp	#LR__1994
17708                 | LR__1993
17708     4C CE 05 F1 | 	add	fp, #76
1770c     E7 92 02 FB | 	rdlong	arg01, fp
17710     4C CE 85 F1 | 	sub	fp, #76
17714     01 94 06 F6 | 	mov	arg02, #1
17718     84 01 B1 FD | 	call	#__system___float_tointeger
1771c     3D BD 02 F6 | 	mov	local12, result1
17720     59 97 02 F6 | 	mov	arg03, local07
17724     03 96 66 F0 | 	shl	arg03, #3
17728     59 97 82 F1 | 	sub	arg03, local07
1772c     02 96 66 F0 | 	shl	arg03, #2
17730     32 AD 02 F6 | 	mov	local04, objptr
17734     16 00 00 FF 
17738     98 AC 06 F1 | 	add	local04, ##11416
1773c     56 97 02 F1 | 	add	arg03, local04
17740     04 96 06 F1 | 	add	arg03, #4
17744     4B BD 42 FC | 	wrbyte	local12, arg03
17748                 | LR__1994
17748                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
17748     50 CE 05 F1 | 	add	fp, #80
1774c     E7 92 02 FB | 	rdlong	arg01, fp
17750     50 CE 85 F1 | 	sub	fp, #80
17754     00 94 06 F6 | 	mov	arg02, #0
17758     01 96 06 F6 | 	mov	arg03, #1
1775c     AC 00 B1 FD | 	call	#__system___float_cmp
17760     00 7A 56 F2 | 	cmps	result1, #0 wc
17764     24 00 90 CD |  if_b	jmp	#LR__1995
17768     50 CE 05 F1 | 	add	fp, #80
1776c     E7 92 02 FB | 	rdlong	arg01, fp
17770     50 CE 85 F1 | 	sub	fp, #80
17774     00 80 20 FF 
17778     00 94 06 F6 | 	mov	arg02, ##1090519040
1777c     01 96 66 F6 | 	neg	arg03, #1
17780     88 00 B1 FD | 	call	#__system___float_cmp
17784     01 7A 56 F2 | 	cmps	result1, #1 wc
17788     30 00 90 CD |  if_b	jmp	#LR__1996
1778c                 | LR__1995
1778c     59 AD 02 F6 | 	mov	local04, local07
17790     03 AC 66 F0 | 	shl	local04, #3
17794     59 AD 82 F1 | 	sub	local04, local07
17798     02 AC 66 F0 | 	shl	local04, #2
1779c     32 B1 02 F6 | 	mov	local06, objptr
177a0     16 00 00 FF 
177a4     98 B0 06 F1 | 	add	local06, ##11416
177a8     58 AD 02 F1 | 	add	local04, local06
177ac     05 AC 06 F1 | 	add	local04, #5
177b0     56 B7 C2 FA | 	rdbyte	local09, local04
177b4     5B BF E2 F8 | 	getbyte	local13, local09, #0
177b8     40 00 90 FD | 	jmp	#LR__1997
177bc                 | LR__1996
177bc     50 CE 05 F1 | 	add	fp, #80
177c0     E7 92 02 FB | 	rdlong	arg01, fp
177c4     50 CE 85 F1 | 	sub	fp, #80
177c8     01 94 06 F6 | 	mov	arg02, #1
177cc     D0 00 B1 FD | 	call	#__system___float_tointeger
177d0     3D BF 02 F6 | 	mov	local13, result1
177d4     59 97 02 F6 | 	mov	arg03, local07
177d8     03 96 66 F0 | 	shl	arg03, #3
177dc     59 97 82 F1 | 	sub	arg03, local07
177e0     02 96 66 F0 | 	shl	arg03, #2
177e4     32 AD 02 F6 | 	mov	local04, objptr
177e8     16 00 00 FF 
177ec     98 AC 06 F1 | 	add	local04, ##11416
177f0     56 97 02 F1 | 	add	arg03, local04
177f4     05 96 06 F1 | 	add	arg03, #5
177f8     4B BF 42 FC | 	wrbyte	local13, arg03
177fc                 | LR__1997
177fc                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
177fc     54 CE 05 F1 | 	add	fp, #84
17800     E7 92 02 FB | 	rdlong	arg01, fp
17804     54 CE 85 F1 | 	sub	fp, #84
17808     00 94 06 F6 | 	mov	arg02, #0
1780c     01 96 06 F6 | 	mov	arg03, #1
17810     F8 FF B0 FD | 	call	#__system___float_cmp
17814     00 7A 56 F2 | 	cmps	result1, #0 wc
17818     24 00 90 CD |  if_b	jmp	#LR__1998
1781c     54 CE 05 F1 | 	add	fp, #84
17820     E7 92 02 FB | 	rdlong	arg01, fp
17824     54 CE 85 F1 | 	sub	fp, #84
17828     00 3D 22 FF 
1782c     00 94 06 F6 | 	mov	arg02, ##1148846080
17830     01 96 66 F6 | 	neg	arg03, #1
17834     D4 FF B0 FD | 	call	#__system___float_cmp
17838     01 7A 56 F2 | 	cmps	result1, #1 wc
1783c     2C 00 90 CD |  if_b	jmp	#LR__1999
17840                 | LR__1998
17840     59 B1 02 F6 | 	mov	local06, local07
17844     03 B0 66 F0 | 	shl	local06, #3
17848     59 B1 82 F1 | 	sub	local06, local07
1784c     02 B0 66 F0 | 	shl	local06, #2
17850     32 AD 02 F6 | 	mov	local04, objptr
17854     16 00 00 FF 
17858     98 AC 06 F1 | 	add	local04, ##11416
1785c     56 B1 02 F1 | 	add	local06, local04
17860     08 B0 06 F1 | 	add	local06, #8
17864     58 C1 02 FB | 	rdlong	local14, local06
17868     34 00 90 FD | 	jmp	#LR__2000
1786c                 | LR__1999
1786c     54 CE 05 F1 | 	add	fp, #84
17870     E7 C0 02 FB | 	rdlong	local14, fp
17874     54 CE 85 F1 | 	sub	fp, #84
17878     59 B1 02 F6 | 	mov	local06, local07
1787c     03 B0 66 F0 | 	shl	local06, #3
17880     59 B1 82 F1 | 	sub	local06, local07
17884     02 B0 66 F0 | 	shl	local06, #2
17888     32 AD 02 F6 | 	mov	local04, objptr
1788c     16 00 00 FF 
17890     98 AC 06 F1 | 	add	local04, ##11416
17894     56 B1 02 F1 | 	add	local06, local04
17898     08 B0 06 F1 | 	add	local06, #8
1789c     58 C1 62 FC | 	wrlong	local14, local06
178a0                 | LR__2000
178a0                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
178a0     58 CE 05 F1 | 	add	fp, #88
178a4     E7 92 02 FB | 	rdlong	arg01, fp
178a8     58 CE 85 F1 | 	sub	fp, #88
178ac     00 C0 5F FF 
178b0     00 94 06 F6 | 	mov	arg02, ##-1082130432
178b4     01 96 06 F6 | 	mov	arg03, #1
178b8     50 FF B0 FD | 	call	#__system___float_cmp
178bc     00 7A 56 F2 | 	cmps	result1, #0 wc
178c0     24 00 90 CD |  if_b	jmp	#LR__2001
178c4     58 CE 05 F1 | 	add	fp, #88
178c8     E7 92 02 FB | 	rdlong	arg01, fp
178cc     58 CE 85 F1 | 	sub	fp, #88
178d0     00 C0 1F FF 
178d4     00 94 06 F6 | 	mov	arg02, ##1065353216
178d8     01 96 66 F6 | 	neg	arg03, #1
178dc     2C FF B0 FD | 	call	#__system___float_cmp
178e0     01 7A 56 F2 | 	cmps	result1, #1 wc
178e4     2C 00 90 CD |  if_b	jmp	#LR__2002
178e8                 | LR__2001
178e8     59 B1 02 F6 | 	mov	local06, local07
178ec     03 B0 66 F0 | 	shl	local06, #3
178f0     59 B1 82 F1 | 	sub	local06, local07
178f4     02 B0 66 F0 | 	shl	local06, #2
178f8     32 AD 02 F6 | 	mov	local04, objptr
178fc     16 00 00 FF 
17900     98 AC 06 F1 | 	add	local04, ##11416
17904     56 B1 02 F1 | 	add	local06, local04
17908     10 B0 06 F1 | 	add	local06, #16
1790c     58 C3 02 FB | 	rdlong	local15, local06
17910     34 00 90 FD | 	jmp	#LR__2003
17914                 | LR__2002
17914     58 CE 05 F1 | 	add	fp, #88
17918     E7 C2 02 FB | 	rdlong	local15, fp
1791c     58 CE 85 F1 | 	sub	fp, #88
17920     59 B1 02 F6 | 	mov	local06, local07
17924     03 B0 66 F0 | 	shl	local06, #3
17928     59 B1 82 F1 | 	sub	local06, local07
1792c     02 B0 66 F0 | 	shl	local06, #2
17930     32 AD 02 F6 | 	mov	local04, objptr
17934     16 00 00 FF 
17938     98 AC 06 F1 | 	add	local04, ##11416
1793c     56 B1 02 F1 | 	add	local06, local04
17940     10 B0 06 F1 | 	add	local06, #16
17944     58 C3 62 FC | 	wrlong	local15, local06
17948                 | LR__2003
17948                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
17948     5C CE 05 F1 | 	add	fp, #92
1794c     E7 92 02 FB | 	rdlong	arg01, fp
17950     5C CE 85 F1 | 	sub	fp, #92
17954     00 94 06 F6 | 	mov	arg02, #0
17958     01 96 06 F6 | 	mov	arg03, #1
1795c     AC FE B0 FD | 	call	#__system___float_cmp
17960     00 7A 56 F2 | 	cmps	result1, #0 wc
17964     24 00 90 CD |  if_b	jmp	#LR__2004
17968     5C CE 05 F1 | 	add	fp, #92
1796c     E7 92 02 FB | 	rdlong	arg01, fp
17970     5C CE 85 F1 | 	sub	fp, #92
17974     80 BF 21 FF 
17978     00 94 06 F6 | 	mov	arg02, ##1132396544
1797c     01 96 66 F6 | 	neg	arg03, #1
17980     88 FE B0 FD | 	call	#__system___float_cmp
17984     01 7A 56 F2 | 	cmps	result1, #1 wc
17988     2C 00 90 CD |  if_b	jmp	#LR__2005
1798c                 | LR__2004
1798c     59 AD 02 F6 | 	mov	local04, local07
17990     03 AC 66 F0 | 	shl	local04, #3
17994     59 AD 82 F1 | 	sub	local04, local07
17998     02 AC 66 F0 | 	shl	local04, #2
1799c     32 B1 02 F6 | 	mov	local06, objptr
179a0     16 00 00 FF 
179a4     98 B0 06 F1 | 	add	local06, ##11416
179a8     58 AD 02 F1 | 	add	local04, local06
179ac     14 AC 06 F1 | 	add	local04, #20
179b0     56 C5 E2 FA | 	rdword	local16, local04
179b4     40 00 90 FD | 	jmp	#LR__2006
179b8                 | LR__2005
179b8     5C CE 05 F1 | 	add	fp, #92
179bc     E7 92 02 FB | 	rdlong	arg01, fp
179c0     5C CE 85 F1 | 	sub	fp, #92
179c4     01 94 06 F6 | 	mov	arg02, #1
179c8     D4 FE B0 FD | 	call	#__system___float_tointeger
179cc     3D C5 02 F6 | 	mov	local16, result1
179d0     59 B1 02 F6 | 	mov	local06, local07
179d4     03 B0 66 F0 | 	shl	local06, #3
179d8     59 B1 82 F1 | 	sub	local06, local07
179dc     02 B0 66 F0 | 	shl	local06, #2
179e0     32 AD 02 F6 | 	mov	local04, objptr
179e4     16 00 00 FF 
179e8     98 AC 06 F1 | 	add	local04, ##11416
179ec     56 B1 02 F1 | 	add	local06, local04
179f0     14 B0 06 F1 | 	add	local06, #20
179f4     58 C5 52 FC | 	wrword	local16, local06
179f8                 | LR__2006
179f8                 | ' if params(9)<0 orelse params(8)>255 then amode=channels(channel).amode else amode= round(params(9)) : channels(channel).amode=amode
179f8     60 CE 05 F1 | 	add	fp, #96
179fc     E7 92 02 FB | 	rdlong	arg01, fp
17a00     60 CE 85 F1 | 	sub	fp, #96
17a04     00 94 06 F6 | 	mov	arg02, #0
17a08     01 96 06 F6 | 	mov	arg03, #1
17a0c     FC FD B0 FD | 	call	#__system___float_cmp
17a10     00 7A 56 F2 | 	cmps	result1, #0 wc
17a14     24 00 90 CD |  if_b	jmp	#LR__2007
17a18     5C CE 05 F1 | 	add	fp, #92
17a1c     E7 92 02 FB | 	rdlong	arg01, fp
17a20     5C CE 85 F1 | 	sub	fp, #92
17a24     80 BF 21 FF 
17a28     00 94 06 F6 | 	mov	arg02, ##1132396544
17a2c     01 96 66 F6 | 	neg	arg03, #1
17a30     D8 FD B0 FD | 	call	#__system___float_cmp
17a34     01 7A 56 F2 | 	cmps	result1, #1 wc
17a38     2C 00 90 CD |  if_b	jmp	#LR__2008
17a3c                 | LR__2007
17a3c     59 AD 02 F6 | 	mov	local04, local07
17a40     03 AC 66 F0 | 	shl	local04, #3
17a44     59 AD 82 F1 | 	sub	local04, local07
17a48     02 AC 66 F0 | 	shl	local04, #2
17a4c     32 B1 02 F6 | 	mov	local06, objptr
17a50     16 00 00 FF 
17a54     98 B0 06 F1 | 	add	local06, ##11416
17a58     58 AD 02 F1 | 	add	local04, local06
17a5c     16 AC 06 F1 | 	add	local04, #22
17a60     56 C7 E2 FA | 	rdword	local17, local04
17a64     40 00 90 FD | 	jmp	#LR__2009
17a68                 | LR__2008
17a68     60 CE 05 F1 | 	add	fp, #96
17a6c     E7 92 02 FB | 	rdlong	arg01, fp
17a70     60 CE 85 F1 | 	sub	fp, #96
17a74     01 94 06 F6 | 	mov	arg02, #1
17a78     24 FE B0 FD | 	call	#__system___float_tointeger
17a7c     3D C7 02 F6 | 	mov	local17, result1
17a80     59 B7 02 F6 | 	mov	local09, local07
17a84     03 B6 66 F0 | 	shl	local09, #3
17a88     59 B7 82 F1 | 	sub	local09, local07
17a8c     02 B6 66 F0 | 	shl	local09, #2
17a90     32 AD 02 F6 | 	mov	local04, objptr
17a94     16 00 00 FF 
17a98     98 AC 06 F1 | 	add	local04, ##11416
17a9c     56 B7 02 F1 | 	add	local09, local04
17aa0     16 B6 06 F1 | 	add	local09, #22
17aa4     5B C7 52 FC | 	wrword	local17, local09
17aa8                 | LR__2009
17aa8                 | ' 
17aa8                 | ' 
17aa8                 | ' if amode>0 then
17aa8     01 C6 56 F2 | 	cmps	local17, #1 wc
17aac     AC 01 90 CD |  if_b	jmp	#LR__2012
17ab0     5A 95 02 F6 | 	mov	arg02, local08
17ab4     FC 16 20 FF 
17ab8     54 92 06 F6 | 	mov	arg01, ##1076754516
17abc     F8 08 B1 FD | 	call	#__system____builtin_logbase
17ac0     3D B7 02 F6 | 	mov	local09, result1
17ac4     1E 94 C6 F9 | 	decod	arg02, #30
17ac8     FC 16 20 FF 
17acc     54 92 06 F6 | 	mov	arg01, ##1076754516
17ad0     E4 08 B1 FD | 	call	#__system____builtin_logbase
17ad4     3D 95 02 F6 | 	mov	arg02, result1
17ad8     5B 93 02 F6 | 	mov	arg01, local09
17adc     FC FA B0 FD | 	call	#__system___float_div
17ae0     3D 93 02 F6 | 	mov	arg01, result1
17ae4     00 94 06 F6 | 	mov	arg02, #0
17ae8     B4 FD B0 FD | 	call	#__system___float_tointeger
17aec     3D C9 02 F6 | 	mov	local18, result1
17af0     1E A8 C6 F9 | 	decod	local02, #30
17af4     64 93 02 F6 | 	mov	arg01, local18
17af8     63 93 02 F1 | 	add	arg01, local17
17afc     49 93 52 F6 | 	abs	arg01, arg01 wc
17b00     1F CA C6 C9 |  if_b	decod	local19, #31
17b04     00 CA 06 36 |  if_ae	mov	local19, #0
17b08     C8 F4 B0 FD | 	call	#__system___float_fromuns
17b0c     65 7B 62 F5 | 	xor	result1, local19
17b10     3D 95 02 F6 | 	mov	arg02, result1
17b14     54 93 02 F6 | 	mov	arg01, local02
17b18     D4 07 B1 FD | 	call	#__system____builtin_powf
17b1c     3D 93 02 F6 | 	mov	arg01, result1
17b20     01 94 06 F6 | 	mov	arg02, #1
17b24     78 FD B0 FD | 	call	#__system___float_tointeger
17b28     3D CD 02 F6 | 	mov	local20, result1
17b2c                 | '   skip=round(2^(lfreq+amode))                     '''' this const + const 2 lines lower=18
17b2c                 | '   if skip>32768 then i=skip/32768: skip=32768 else i=1
17b2c     40 00 00 FF 
17b30     01 CC 56 F2 | 	cmps	local20, ##32769 wc
17b34     14 00 90 CD |  if_b	jmp	#LR__2010
17b38     66 A9 52 F6 | 	abs	local02, local20 wc
17b3c     0F A8 46 F0 | 	shr	local02, #15
17b40     54 A9 82 F6 | 	negc	local02, local02
17b44     0F CC C6 F9 | 	decod	local20, #15
17b48     04 00 90 FD | 	jmp	#LR__2011
17b4c                 | LR__2010
17b4c     01 A8 06 F6 | 	mov	local02, #1
17b50                 | LR__2011
17b50     AA 2B 25 FF 
17b54     00 93 06 F6 | 	mov	arg01, ##1247237376
17b58     5A 95 02 F6 | 	mov	arg02, local08
17b5c     7C FA B0 FD | 	call	#__system___float_div
17b60     3D B7 02 F6 | 	mov	local09, result1
17b64     54 93 52 F6 | 	abs	arg01, local02 wc
17b68     1F CA C6 C9 |  if_b	decod	local19, #31
17b6c     00 CA 06 36 |  if_ae	mov	local19, #0
17b70     60 F4 B0 FD | 	call	#__system___float_fromuns
17b74     65 7B 62 F5 | 	xor	result1, local19
17b78     3D AB 02 F6 | 	mov	local03, result1
17b7c     1E B0 C6 F9 | 	decod	local06, #30
17b80     12 92 06 F6 | 	mov	arg01, #18
17b84     63 93 82 F1 | 	sub	arg01, local17
17b88     64 93 82 F1 | 	sub	arg01, local18
17b8c     49 93 52 F6 | 	abs	arg01, arg01 wc
17b90     1F CA C6 C9 |  if_b	decod	local19, #31
17b94     00 CA 06 36 |  if_ae	mov	local19, #0
17b98     38 F4 B0 FD | 	call	#__system___float_fromuns
17b9c     65 7B 62 F5 | 	xor	result1, local19
17ba0     3D 95 02 F6 | 	mov	arg02, result1
17ba4     58 93 02 F6 | 	mov	arg01, local06
17ba8     44 07 B1 FD | 	call	#__system____builtin_powf
17bac     3D 95 02 F6 | 	mov	arg02, result1
17bb0     55 93 02 F6 | 	mov	arg01, local03
17bb4     20 F8 B0 FD | 	call	#__system___float_mul
17bb8     3D 95 02 F6 | 	mov	arg02, result1
17bbc     5B 93 02 F6 | 	mov	arg01, local09
17bc0     18 FA B0 FD | 	call	#__system___float_div
17bc4     3D 93 02 F6 | 	mov	arg01, result1
17bc8     01 94 06 F6 | 	mov	arg02, #1
17bcc     D0 FC B0 FD | 	call	#__system___float_tointeger
17bd0     3D CF 02 F6 | 	mov	local21, result1
17bd4     59 C9 02 F6 | 	mov	local18, local07
17bd8     03 C8 66 F0 | 	shl	local18, #3
17bdc     59 C9 82 F1 | 	sub	local18, local07
17be0     02 C8 66 F0 | 	shl	local18, #2
17be4     32 AD 02 F6 | 	mov	local04, objptr
17be8     16 00 00 FF 
17bec     98 AC 06 F1 | 	add	local04, ##11416
17bf0     56 C9 02 F1 | 	add	local18, local04
17bf4     AA 2B 25 FF 
17bf8     00 B1 06 F6 | 	mov	local06, ##1247237376
17bfc     67 93 52 F6 | 	abs	arg01, local21 wc
17c00     1F CA C6 C9 |  if_b	decod	local19, #31
17c04     00 CA 06 36 |  if_ae	mov	local19, #0
17c08     C8 F3 B0 FD | 	call	#__system___float_fromuns
17c0c     65 7B 62 F5 | 	xor	result1, local19
17c10     3D 95 02 F6 | 	mov	arg02, result1
17c14     58 93 02 F6 | 	mov	arg01, local06
17c18     C0 F9 B0 FD | 	call	#__system___float_div
17c1c     3D B1 02 F6 | 	mov	local06, result1
17c20     66 93 52 F6 | 	abs	arg01, local20 wc
17c24     1F CA C6 C9 |  if_b	decod	local19, #31
17c28     00 CA 06 36 |  if_ae	mov	local19, #0
17c2c     A4 F3 B0 FD | 	call	#__system___float_fromuns
17c30     65 7B 62 F5 | 	xor	result1, local19
17c34     3D 93 02 F6 | 	mov	arg01, result1
17c38     00 40 24 FF 
17c3c     00 94 06 F6 | 	mov	arg02, ##1216348160
17c40     98 F9 B0 FD | 	call	#__system___float_div
17c44     3D 95 02 F6 | 	mov	arg02, result1
17c48     58 93 02 F6 | 	mov	arg01, local06
17c4c     88 F7 B0 FD | 	call	#__system___float_mul
17c50     18 C8 06 F1 | 	add	local18, #24
17c54     64 7B 62 FC | 	wrlong	result1, local18
17c58     BC 00 90 FD | 	jmp	#LR__2013
17c5c                 | LR__2012
17c5c     18 CE 06 F6 | 	mov	local21, #24
17c60     00 40 24 FF 
17c64     00 CC 06 F6 | 	mov	local20, ##1216348160
17c68     5A 93 02 F6 | 	mov	arg01, local08
17c6c     C7 07 24 FF 
17c70     00 94 06 F6 | 	mov	arg02, ##1208978944
17c74     64 F9 B0 FD | 	call	#__system___float_div
17c78     3D 95 02 F6 | 	mov	arg02, result1
17c7c     66 93 02 F6 | 	mov	arg01, local20
17c80     54 F7 B0 FD | 	call	#__system___float_mul
17c84     3D 93 02 F6 | 	mov	arg01, result1
17c88     01 94 06 F6 | 	mov	arg02, #1
17c8c     10 FC B0 FD | 	call	#__system___float_tointeger
17c90     3D CD 02 F6 | 	mov	local20, result1
17c94     59 C9 02 F6 | 	mov	local18, local07
17c98     03 C8 66 F0 | 	shl	local18, #3
17c9c     59 C9 82 F1 | 	sub	local18, local07
17ca0     02 C8 66 F0 | 	shl	local18, #2
17ca4     32 AD 02 F6 | 	mov	local04, objptr
17ca8     16 00 00 FF 
17cac     98 AC 06 F1 | 	add	local04, ##11416
17cb0     56 C9 02 F1 | 	add	local18, local04
17cb4     AA 2B 25 FF 
17cb8     00 B1 06 F6 | 	mov	local06, ##1247237376
17cbc     67 93 52 F6 | 	abs	arg01, local21 wc
17cc0     1F CA C6 C9 |  if_b	decod	local19, #31
17cc4     00 CA 06 36 |  if_ae	mov	local19, #0
17cc8     08 F3 B0 FD | 	call	#__system___float_fromuns
17ccc     65 7B 62 F5 | 	xor	result1, local19
17cd0     3D 95 02 F6 | 	mov	arg02, result1
17cd4     58 93 02 F6 | 	mov	arg01, local06
17cd8     00 F9 B0 FD | 	call	#__system___float_div
17cdc     3D B1 02 F6 | 	mov	local06, result1
17ce0     66 93 52 F6 | 	abs	arg01, local20 wc
17ce4     1F CA C6 C9 |  if_b	decod	local19, #31
17ce8     00 CA 06 36 |  if_ae	mov	local19, #0
17cec     E4 F2 B0 FD | 	call	#__system___float_fromuns
17cf0     65 7B 62 F5 | 	xor	result1, local19
17cf4     3D 93 02 F6 | 	mov	arg01, result1
17cf8     00 40 24 FF 
17cfc     00 94 06 F6 | 	mov	arg02, ##1216348160
17d00     D8 F8 B0 FD | 	call	#__system___float_div
17d04     3D 95 02 F6 | 	mov	arg02, result1
17d08     58 93 02 F6 | 	mov	arg01, local06
17d0c     C8 F6 B0 FD | 	call	#__system___float_mul
17d10     18 C8 06 F1 | 	add	local18, #24
17d14     64 7B 62 FC | 	wrlong	result1, local18
17d18                 | LR__2013
17d18     77 CC 21 FF 
17d1c     BE 93 06 F6 | 	mov	arg01, ##1134096318
17d20     60 95 02 F6 | 	mov	arg02, local14
17d24     B4 F8 B0 FD | 	call	#__system___float_div
17d28     3D 93 02 F6 | 	mov	arg01, result1
17d2c     01 94 06 F6 | 	mov	arg02, #1
17d30     6C FB B0 FD | 	call	#__system___float_tointeger
17d34     3D C9 02 F6 | 	mov	local18, result1
17d38     00 00 23 FF 
17d3c     00 92 06 F6 | 	mov	arg01, ##1174405120
17d40     61 95 02 F6 | 	mov	arg02, local15
17d44     90 F6 B0 FD | 	call	#__system___float_mul
17d48     3D 93 02 F6 | 	mov	arg01, result1
17d4c     01 94 06 F6 | 	mov	arg02, #1
17d50     4C FB B0 FD | 	call	#__system___float_tointeger
17d54     0D C6 C6 F9 | 	decod	local17, #13
17d58     3D C7 02 F1 | 	add	local17, result1
17d5c     00 3D 22 FF 
17d60     00 92 06 F6 | 	mov	arg01, ##1148846080
17d64     5D 95 02 F6 | 	mov	arg02, local11
17d68     6C F6 B0 FD | 	call	#__system___float_mul
17d6c     3D 93 02 F6 | 	mov	arg01, result1
17d70     01 94 06 F6 | 	mov	arg02, #1
17d74     28 FB B0 FD | 	call	#__system___float_tointeger
17d78     3D C3 02 F6 | 	mov	local15, result1
17d7c     38 00 00 FF 
17d80     90 65 06 F1 | 	add	objptr, ##29072
17d84     32 C1 02 FB | 	rdlong	local14, objptr
17d88     38 00 00 FF 
17d8c     90 65 86 F1 | 	sub	objptr, ##29072
17d90     06 B2 66 F0 | 	shl	local07, #6
17d94     59 C1 02 F1 | 	add	local14, local07
17d98                 | ' 
17d98                 | ' speed=round(speed_coeff/slen)
17d98                 | ' ipan=8192+round(8192*pan)
17d98                 | ' ivol=round(1000.0*vol)
17d98                 | ' base2=base+64*channel
17d98                 | ' if wave <32 then 
17d98     20 BC 56 F2 | 	cmps	local12, #32 wc
17d9c     20 00 90 3D |  if_ae	jmp	#LR__2014
17da0     60 93 02 F6 | 	mov	arg01, local14
17da4     08 92 06 F1 | 	add	arg01, #8
17da8     5E 95 02 F6 | 	mov	arg02, local12
17dac     0B 94 66 F0 | 	shl	arg02, #11
17db0     00 00 60 FF 
17db4     00 94 06 F1 | 	add	arg02, ##-1073741824
17db8     49 95 62 FC | 	wrlong	arg02, arg01
17dbc     10 00 90 FD | 	jmp	#LR__2015
17dc0                 | LR__2014
17dc0     60 93 02 F6 | 	mov	arg01, local14
17dc4     08 92 06 F1 | 	add	arg01, #8
17dc8     00 00 E4 FF 
17dcc     49 01 68 FC | 	wrlong	##-939524096, arg01
17dd0                 | LR__2015
17dd0     60 93 02 F6 | 	mov	arg01, local14
17dd4     10 92 06 F1 | 	add	arg01, #16
17dd8     04 00 80 FF 
17ddc     49 01 68 FC | 	wrlong	##2048, arg01
17de0     60 93 02 F6 | 	mov	arg01, local14
17de4     0C 92 06 F1 | 	add	arg01, #12
17de8     49 01 68 FC | 	wrlong	#0, arg01
17dec     60 93 02 F6 | 	mov	arg01, local14
17df0     14 92 06 F1 | 	add	arg01, #20
17df4     49 C3 52 FC | 	wrword	local15, arg01
17df8     60 93 02 F6 | 	mov	arg01, local14
17dfc     16 92 06 F1 | 	add	arg01, #22
17e00     49 C7 52 FC | 	wrword	local17, arg01
17e04                 | ' lpoke base2+16,2048
17e04                 | ' lpoke base2+12,0
17e04                 | ' dpoke base2+20,ivol 
17e04                 | ' dpoke base2+22,ipan 
17e04                 | ' if wave<32 then
17e04     20 BC 56 F2 | 	cmps	local12, #32 wc
17e08     1C 00 90 3D |  if_ae	jmp	#LR__2016
17e0c     60 93 02 F6 | 	mov	arg01, local14
17e10     18 92 06 F1 | 	add	arg01, #24
17e14     49 CF 52 FC | 	wrword	local21, arg01
17e18     60 93 02 F6 | 	mov	arg01, local14
17e1c     1A 92 06 F1 | 	add	arg01, #26
17e20     49 CD 52 FC | 	wrword	local20, arg01
17e24     34 00 90 FD | 	jmp	#LR__2017
17e28                 | LR__2016
17e28     60 CF 02 F6 | 	mov	local21, local14
17e2c     18 CE 06 F1 | 	add	local21, #24
17e30     3E 2C 25 FF 
17e34     3C 92 06 F6 | 	mov	arg01, ##1247312956
17e38     5A 95 02 F6 | 	mov	arg02, local08
17e3c     9C F7 B0 FD | 	call	#__system___float_div
17e40     3D 93 02 F6 | 	mov	arg01, result1
17e44     01 94 06 F6 | 	mov	arg02, #1
17e48     54 FA B0 FD | 	call	#__system___float_tointeger
17e4c     67 7B 52 FC | 	wrword	result1, local21
17e50     60 93 02 F6 | 	mov	arg01, local14
17e54     1A 92 06 F1 | 	add	arg01, #26
17e58     49 01 5A FC | 	wrword	#256, arg01
17e5c                 | LR__2017
17e5c     60 93 02 F6 | 	mov	arg01, local14
17e60     1C 92 06 F1 | 	add	arg01, #28
17e64     49 01 68 FC | 	wrlong	#0, arg01
17e68     60 93 02 F6 | 	mov	arg01, local14
17e6c     20 92 06 F1 | 	add	arg01, #32
17e70     49 01 68 FC | 	wrlong	#0, arg01
17e74                 | ' lpoke base2+28,$0000_0000
17e74                 | ' lpoke base2+32,0 
17e74                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
17e74     08 BE 0E F2 | 	cmp	local13, #8 wz
17e78     60 93 02 A6 |  if_e	mov	arg01, local14
17e7c     24 92 06 A1 |  if_e	add	arg01, #36
17e80     49 01 68 AC |  if_e	wrlong	#0, arg01
17e84     20 00 90 AD |  if_e	jmp	#LR__2018
17e88     60 93 02 F6 | 	mov	arg01, local14
17e8c     24 92 06 F1 | 	add	arg01, #36
17e90     09 BE 66 F0 | 	shl	local13, #9
17e94     32 B7 02 F6 | 	mov	local09, objptr
17e98     0E 00 00 FF 
17e9c     38 B6 06 F1 | 	add	local09, ##7224
17ea0     5B BF 02 F1 | 	add	local13, local09
17ea4     49 BF 62 FC | 	wrlong	local13, arg01
17ea8                 | LR__2018
17ea8     60 93 02 F6 | 	mov	arg01, local14
17eac     28 92 06 F1 | 	add	arg01, #40
17eb0     49 C9 62 FC | 	wrlong	local18, arg01
17eb4     2C C0 06 F1 | 	add	local14, #44
17eb8     60 93 02 F6 | 	mov	arg01, local14
17ebc     49 C5 62 FC | 	wrlong	local16, arg01
17ec0                 | ' lpoke base2+40,speed 
17ec0                 | ' lpoke base2+44,sus 
17ec0                 | ' if delay>0 then waitms(delay) 
17ec0     01 B8 56 F2 | 	cmps	local10, #1 wc
17ec4     5C 93 02 36 |  if_ae	mov	arg01, local10
17ec8     30 D1 B0 3D |  if_ae	call	#__system___waitms
17ecc     E7 F0 03 F6 | 	mov	ptra, fp
17ed0     F2 00 A0 FD | 	call	#popregs_
17ed4                 | _do_play_ret
17ed4     2D 00 64 FD | 	ret
17ed8                 | 
17ed8                 | ' 
17ed8                 | ' '-------------------- plot
17ed8                 | ' 
17ed8                 | ' sub do_plot
17ed8                 | _do_plot
17ed8     01 CA 05 F6 | 	mov	COUNT_, #1
17edc     E8 00 A0 FD | 	call	#pushregs_
17ee0     20 F0 07 F1 | 	add	ptra, #32
17ee4     88 57 BF FD | 	call	#_pop
17ee8     3D 97 02 F6 | 	mov	arg03, result1
17eec     3E 95 02 F6 | 	mov	arg02, result2
17ef0     3F 93 02 F6 | 	mov	arg01, result3
17ef4     0C CE 05 F1 | 	add	fp, #12
17ef8     E7 96 62 FC | 	wrlong	arg03, fp
17efc     04 CE 05 F1 | 	add	fp, #4
17f00     E7 94 62 FC | 	wrlong	arg02, fp
17f04     04 CE 05 F1 | 	add	fp, #4
17f08     E7 92 62 FC | 	wrlong	arg01, fp
17f0c     14 CE 85 F1 | 	sub	fp, #20
17f10     5C 57 BF FD | 	call	#_pop
17f14     3F 97 02 F6 | 	mov	arg03, result3
17f18     E7 7A 62 FC | 	wrlong	result1, fp
17f1c     04 CE 05 F1 | 	add	fp, #4
17f20     E7 7C 62 FC | 	wrlong	result2, fp
17f24     04 CE 05 F1 | 	add	fp, #4
17f28     E7 96 62 FC | 	wrlong	arg03, fp
17f2c     08 CE 85 F1 | 	sub	fp, #8
17f30     E7 92 02 F6 | 	mov	arg01, fp
17f34     14 59 BF FD | 	call	#_converttoint
17f38     3D A7 02 F6 | 	mov	local01, result1
17f3c     E7 92 02 F6 | 	mov	arg01, fp
17f40     0C 92 06 F1 | 	add	arg01, #12
17f44     04 59 BF FD | 	call	#_converttoint
17f48     3D 95 02 F6 | 	mov	arg02, result1
17f4c     38 00 00 FF 
17f50     AC 65 06 F1 | 	add	objptr, ##29100
17f54     32 A7 62 FC | 	wrlong	local01, objptr
17f58     04 64 06 F1 | 	add	objptr, #4
17f5c     32 95 62 FC | 	wrlong	arg02, objptr
17f60     04 64 86 F1 | 	sub	objptr, #4
17f64     32 93 02 FB | 	rdlong	arg01, objptr
17f68     04 64 86 F1 | 	sub	objptr, #4
17f6c     32 97 02 FB | 	rdlong	arg03, objptr
17f70     38 00 00 FF 
17f74     A8 65 86 F1 | 	sub	objptr, ##29096
17f78     1C A1 B0 FD | 	call	#_hg010b_spin2_putpixel
17f7c     E7 F0 03 F6 | 	mov	ptra, fp
17f80     F2 00 A0 FD | 	call	#popregs_
17f84                 | _do_plot_ret
17f84     2D 00 64 FD | 	ret
17f88                 | 
17f88                 | ' 
17f88                 | ' '-------------------- poke
17f88                 | ' 
17f88                 | ' sub do_poke
17f88                 | _do_poke
17f88     02 CA 05 F6 | 	mov	COUNT_, #2
17f8c     E8 00 A0 FD | 	call	#pushregs_
17f90     20 F0 07 F1 | 	add	ptra, #32
17f94     D8 56 BF FD | 	call	#_pop
17f98     3D 95 02 F6 | 	mov	arg02, result1
17f9c     3E 93 02 F6 | 	mov	arg01, result2
17fa0     3F A7 02 F6 | 	mov	local01, result3
17fa4     E7 94 62 FC | 	wrlong	arg02, fp
17fa8     04 CE 05 F1 | 	add	fp, #4
17fac     E7 92 62 FC | 	wrlong	arg01, fp
17fb0     04 CE 05 F1 | 	add	fp, #4
17fb4     E7 A6 62 FC | 	wrlong	local01, fp
17fb8     08 CE 85 F1 | 	sub	fp, #8
17fbc     B0 56 BF FD | 	call	#_pop
17fc0     3F A7 02 F6 | 	mov	local01, result3
17fc4     0C CE 05 F1 | 	add	fp, #12
17fc8     E7 7A 62 FC | 	wrlong	result1, fp
17fcc     04 CE 05 F1 | 	add	fp, #4
17fd0     E7 7C 62 FC | 	wrlong	result2, fp
17fd4     04 CE 05 F1 | 	add	fp, #4
17fd8     E7 A6 62 FC | 	wrlong	local01, fp
17fdc     08 CE 85 F1 | 	sub	fp, #8
17fe0     E7 92 02 F6 | 	mov	arg01, fp
17fe4     0C CE 85 F1 | 	sub	fp, #12
17fe8     60 58 BF FD | 	call	#_converttoint
17fec     3D A7 02 F6 | 	mov	local01, result1
17ff0     E7 92 02 F6 | 	mov	arg01, fp
17ff4     54 58 BF FD | 	call	#_converttoint
17ff8     3D A9 02 F6 | 	mov	local02, result1
17ffc                 | ' t1=pop() 'value
17ffc                 | ' t2=pop() 
17ffc                 | ' a=converttoint(t2) : v=converttoint(t1)
17ffc                 | ' if a<$80000 then poke a,v else pspoke a,v
17ffc     00 04 00 FF 
18000     00 A6 16 F2 | 	cmp	local01, ##524288 wc
18004     53 A9 42 CC |  if_b	wrbyte	local02, local01
18008     53 93 02 36 |  if_ae	mov	arg01, local01
1800c     54 95 02 36 |  if_ae	mov	arg02, local02
18010     50 92 B0 3D |  if_ae	call	#_pspoke
18014     E7 F0 03 F6 | 	mov	ptra, fp
18018     F2 00 A0 FD | 	call	#popregs_
1801c                 | _do_poke_ret
1801c     2D 00 64 FD | 	ret
18020                 | 
18020                 | ' 
18020                 | ' '-------------------- pop
18020                 | ' 
18020                 | ' sub do_pop()
18020                 | _do_pop
18020                 | ' if gosubtop>0 then  gosubtop -=1 
18020     52 00 00 FF 
18024     B4 64 06 F1 | 	add	objptr, ##42164
18028     32 81 02 FB | 	rdlong	_var01, objptr
1802c     52 00 00 FF 
18030     B4 64 86 F1 | 	sub	objptr, ##42164
18034     01 80 56 F2 | 	cmps	_var01, #1 wc
18038     52 00 00 3F 
1803c     B4 64 06 31 |  if_ae	add	objptr, ##42164
18040     32 81 02 3B |  if_ae	rdlong	_var01, objptr
18044     01 80 86 31 |  if_ae	sub	_var01, #1
18048     32 81 62 3C |  if_ae	wrlong	_var01, objptr
1804c     52 00 00 3F 
18050     B4 64 86 31 |  if_ae	sub	objptr, ##42164
18054                 | _do_pop_ret
18054     2D 00 64 FD | 	ret
18058                 | 
18058                 | ' 
18058                 | ' '-------------------- position
18058                 | ' 
18058                 | ' sub do_position
18058                 | _do_position
18058     01 CA 05 F6 | 	mov	COUNT_, #1
1805c     E8 00 A0 FD | 	call	#pushregs_
18060     18 F0 07 F1 | 	add	ptra, #24
18064     08 56 BF FD | 	call	#_pop
18068     3D 95 02 F6 | 	mov	arg02, result1
1806c     3E 93 02 F6 | 	mov	arg01, result2
18070     3F A7 02 F6 | 	mov	local01, result3
18074     E7 94 62 FC | 	wrlong	arg02, fp
18078     04 CE 05 F1 | 	add	fp, #4
1807c     E7 92 62 FC | 	wrlong	arg01, fp
18080     04 CE 05 F1 | 	add	fp, #4
18084     E7 A6 62 FC | 	wrlong	local01, fp
18088     08 CE 85 F1 | 	sub	fp, #8
1808c     E0 55 BF FD | 	call	#_pop
18090     3F A7 02 F6 | 	mov	local01, result3
18094     0C CE 05 F1 | 	add	fp, #12
18098     E7 7A 62 FC | 	wrlong	result1, fp
1809c     04 CE 05 F1 | 	add	fp, #4
180a0     E7 7C 62 FC | 	wrlong	result2, fp
180a4     04 CE 05 F1 | 	add	fp, #4
180a8     E7 A6 62 FC | 	wrlong	local01, fp
180ac     08 CE 85 F1 | 	sub	fp, #8
180b0     E7 92 02 F6 | 	mov	arg01, fp
180b4     0C CE 85 F1 | 	sub	fp, #12
180b8     90 57 BF FD | 	call	#_converttoint
180bc     3D A7 02 F6 | 	mov	local01, result1
180c0     E7 92 02 F6 | 	mov	arg01, fp
180c4     84 57 BF FD | 	call	#_converttoint
180c8     3D 95 02 F6 | 	mov	arg02, result1
180cc     53 93 02 F6 | 	mov	arg01, local01
180d0     C4 AB B0 FD | 	call	#_hg010b_spin2_setcursorpos
180d4     E7 F0 03 F6 | 	mov	ptra, fp
180d8     F2 00 A0 FD | 	call	#popregs_
180dc                 | _do_position_ret
180dc     2D 00 64 FD | 	ret
180e0                 | 
180e0                 | ' 
180e0                 | ' '-------------------- print
180e0                 | ' 
180e0                 | ' sub do_print  
180e0                 | _do_print
180e0     0B CA 05 F6 | 	mov	COUNT_, #11
180e4     E8 00 A0 FD | 	call	#pushregs_
180e8     00 AC 06 F6 | 	mov	local04, #0
180ec     80 55 BF FD | 	call	#_pop
180f0     3D AF 02 F6 | 	mov	local05, result1
180f4     3E B1 02 F6 | 	mov	local06, result2
180f8     3F B3 02 F6 | 	mov	local07, result3
180fc     57 A7 02 F6 | 	mov	local01, local05
18100     58 A9 02 F6 | 	mov	local02, local06
18104     59 AB 02 F6 | 	mov	local03, local07
18108                 | '  
18108                 | ' r=0
18108                 | ' t1=pop() 
18108                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
18108     21 AA 0E F2 | 	cmp	local03, #33 wz
1810c     22 AA 0E 52 |  if_ne	cmp	local03, #34 wz
18110     20 00 90 5D |  if_ne	jmp	#LR__2020
18114     55 AD 02 F6 | 	mov	local04, local03
18118     54 55 BF FD | 	call	#_pop
1811c     3D AF 02 F6 | 	mov	local05, result1
18120     3E B1 02 F6 | 	mov	local06, result2
18124     3F B3 02 F6 | 	mov	local07, result3
18128     57 A7 02 F6 | 	mov	local01, local05
1812c     58 A9 02 F6 | 	mov	local02, local06
18130     59 AB 02 F6 | 	mov	local03, local07
18134                 | LR__2020
18134                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
18134     20 AA 0E F2 | 	cmp	local03, #32 wz
18138     55 AD 02 A6 |  if_e	mov	local04, local03
1813c                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
1813c     FF AA 0E F2 | 	cmp	local03, #255 wz
18140     10 00 90 5D |  if_ne	jmp	#LR__2021
18144     53 93 02 F6 | 	mov	arg01, local01
18148     00 94 06 F6 | 	mov	arg02, #0
1814c     E8 8E B0 FD | 	call	#_printerror
18150     D4 04 90 FD | 	jmp	#LR__2040
18154                 | LR__2021
18154                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
18154     2B AA 0E F2 | 	cmp	local03, #43 wz
18158     14 00 90 5D |  if_ne	jmp	#LR__2022
1815c     53 93 02 F6 | 	mov	arg01, local01
18160     7C 56 BF FD | 	call	#_convertstring
18164     3D AF 02 F6 | 	mov	local05, result1
18168     57 A7 02 F6 | 	mov	local01, local05
1816c     1F AA 06 F6 | 	mov	local03, #31
18170                 | LR__2022
18170                 | ' 
18170                 | ' if t1.result_type=token_channel then print "Print to channel (not yet implemented)"; t1.result.iresult : t1=pop()
18170     2C AA 0E F2 | 	cmp	local03, #44 wz
18174     80 00 90 5D |  if_ne	jmp	#LR__2023
18178     00 92 06 F6 | 	mov	arg01, #0
1817c     0C 21 B1 FD | 	call	#__system___getiolock_0622
18180     3D 93 02 F6 | 	mov	arg01, result1
18184     80 CB B0 FD | 	call	#__system___lockmem
18188     99 01 00 FF 
1818c     E8 95 06 F6 | 	mov	arg02, ##@LR__6074
18190     00 92 06 F6 | 	mov	arg01, #0
18194     00 96 06 F6 | 	mov	arg03, #0
18198     60 D8 B0 FD | 	call	#__system___basic_print_string
1819c     0A B4 06 F6 | 	mov	local08, #10
181a0     00 92 06 F6 | 	mov	arg01, #0
181a4     53 95 02 F6 | 	mov	arg02, local01
181a8     00 96 06 F6 | 	mov	arg03, #0
181ac     0A 98 06 F6 | 	mov	arg04, #10
181b0     8C D8 B0 FD | 	call	#__system___basic_print_integer
181b4     3D B7 02 F6 | 	mov	local09, result1
181b8     00 92 06 F6 | 	mov	arg01, #0
181bc     0A 94 06 F6 | 	mov	arg02, #10
181c0     00 96 06 F6 | 	mov	arg03, #0
181c4     DC D7 B0 FD | 	call	#__system___basic_print_char
181c8     01 B8 06 F6 | 	mov	local10, #1
181cc     00 92 06 F6 | 	mov	arg01, #0
181d0     B8 20 B1 FD | 	call	#__system___getiolock_0622
181d4     3D 01 68 FC | 	wrlong	#0, result1
181d8     00 BA 06 F6 | 	mov	local11, #0
181dc     90 54 BF FD | 	call	#_pop
181e0     3D AF 02 F6 | 	mov	local05, result1
181e4     3E B1 02 F6 | 	mov	local06, result2
181e8     3F B3 02 F6 | 	mov	local07, result3
181ec     57 A7 02 F6 | 	mov	local01, local05
181f0     58 A9 02 F6 | 	mov	local02, local06
181f4     59 AB 02 F6 | 	mov	local03, local07
181f8                 | LR__2023
181f8                 | ' 
181f8                 | ' if r=print_mod_comma  then
181f8     21 AC 0E F2 | 	cmp	local04, #33 wz
181fc     AC 01 90 5D |  if_ne	jmp	#LR__2028
18200                 | '   if t1.result_type=result_int then print t1.result.iresult,
18200     1C AA 0E F2 | 	cmp	local03, #28 wz
18204     64 00 90 5D |  if_ne	jmp	#LR__2024
18208     00 92 06 F6 | 	mov	arg01, #0
1820c     7C 20 B1 FD | 	call	#__system___getiolock_0622
18210     3D 93 02 F6 | 	mov	arg01, result1
18214     F0 CA B0 FD | 	call	#__system___lockmem
18218     00 B0 06 F6 | 	mov	local06, #0
1821c     00 92 06 F6 | 	mov	arg01, #0
18220     53 95 02 F6 | 	mov	arg02, local01
18224     00 96 06 F6 | 	mov	arg03, #0
18228     0A 98 06 F6 | 	mov	arg04, #10
1822c     10 D8 B0 FD | 	call	#__system___basic_print_integer
18230     3D B3 02 F6 | 	mov	local07, result1
18234     58 AF 02 F6 | 	mov	local05, local06
18238     59 AF 02 F1 | 	add	local05, local07
1823c     00 BA 06 F6 | 	mov	local11, #0
18240     00 92 06 F6 | 	mov	arg01, #0
18244     09 94 06 F6 | 	mov	arg02, #9
18248     00 96 06 F6 | 	mov	arg03, #0
1824c     54 D7 B0 FD | 	call	#__system___basic_print_char
18250     3D B7 02 F6 | 	mov	local09, result1
18254     3D AF 02 F1 | 	add	local05, result1
18258     00 92 06 F6 | 	mov	arg01, #0
1825c     2C 20 B1 FD | 	call	#__system___getiolock_0622
18260     3D 01 68 FC | 	wrlong	#0, result1
18264     00 7A 06 F6 | 	mov	result1, #0
18268     00 B8 06 F6 | 	mov	local10, #0
1826c                 | LR__2024
1826c                 | '   if t1.result_type=result_uint then print t1.result.uresult,
1826c     1D AA 0E F2 | 	cmp	local03, #29 wz
18270     64 00 90 5D |  if_ne	jmp	#LR__2025
18274     00 92 06 F6 | 	mov	arg01, #0
18278     10 20 B1 FD | 	call	#__system___getiolock_0622
1827c     3D 93 02 F6 | 	mov	arg01, result1
18280     84 CA B0 FD | 	call	#__system___lockmem
18284     00 B0 06 F6 | 	mov	local06, #0
18288     00 92 06 F6 | 	mov	arg01, #0
1828c     53 95 02 F6 | 	mov	arg02, local01
18290     00 96 06 F6 | 	mov	arg03, #0
18294     0A 98 06 F6 | 	mov	arg04, #10
18298     E4 D7 B0 FD | 	call	#__system___basic_print_unsigned
1829c     3D B3 02 F6 | 	mov	local07, result1
182a0     58 AF 02 F6 | 	mov	local05, local06
182a4     59 AF 02 F1 | 	add	local05, local07
182a8     00 BA 06 F6 | 	mov	local11, #0
182ac     00 92 06 F6 | 	mov	arg01, #0
182b0     09 94 06 F6 | 	mov	arg02, #9
182b4     00 96 06 F6 | 	mov	arg03, #0
182b8     E8 D6 B0 FD | 	call	#__system___basic_print_char
182bc     3D B7 02 F6 | 	mov	local09, result1
182c0     3D AF 02 F1 | 	add	local05, result1
182c4     00 92 06 F6 | 	mov	arg01, #0
182c8     C0 1F B1 FD | 	call	#__system___getiolock_0622
182cc     3D 01 68 FC | 	wrlong	#0, result1
182d0     00 7A 06 F6 | 	mov	result1, #0
182d4     00 B8 06 F6 | 	mov	local10, #0
182d8                 | LR__2025
182d8                 | '   if t1.result_type=result_float then print t1.result.fresult,
182d8     1E AA 0E F2 | 	cmp	local03, #30 wz
182dc     64 00 90 5D |  if_ne	jmp	#LR__2026
182e0     00 92 06 F6 | 	mov	arg01, #0
182e4     A4 1F B1 FD | 	call	#__system___getiolock_0622
182e8     3D 93 02 F6 | 	mov	arg01, result1
182ec     18 CA B0 FD | 	call	#__system___lockmem
182f0     00 B0 06 F6 | 	mov	local06, #0
182f4     00 92 06 F6 | 	mov	arg01, #0
182f8     53 95 02 F6 | 	mov	arg02, local01
182fc     00 96 06 F6 | 	mov	arg03, #0
18300     23 98 06 F6 | 	mov	arg04, #35
18304     F4 F6 B0 FD | 	call	#__system___basic_print_float
18308     3D B3 02 F6 | 	mov	local07, result1
1830c     58 AF 02 F6 | 	mov	local05, local06
18310     59 AF 02 F1 | 	add	local05, local07
18314     00 BA 06 F6 | 	mov	local11, #0
18318     00 92 06 F6 | 	mov	arg01, #0
1831c     09 94 06 F6 | 	mov	arg02, #9
18320     00 96 06 F6 | 	mov	arg03, #0
18324     7C D6 B0 FD | 	call	#__system___basic_print_char
18328     3D B7 02 F6 | 	mov	local09, result1
1832c     3D AF 02 F1 | 	add	local05, result1
18330     00 92 06 F6 | 	mov	arg01, #0
18334     54 1F B1 FD | 	call	#__system___getiolock_0622
18338     3D 01 68 FC | 	wrlong	#0, result1
1833c     00 7A 06 F6 | 	mov	result1, #0
18340     00 B8 06 F6 | 	mov	local10, #0
18344                 | LR__2026
18344                 | '   if t1.result_type=result_string then print t1.result.sresult,
18344     1F AA 0E F2 | 	cmp	local03, #31 wz
18348     60 00 90 5D |  if_ne	jmp	#LR__2027
1834c     00 92 06 F6 | 	mov	arg01, #0
18350     38 1F B1 FD | 	call	#__system___getiolock_0622
18354     3D 93 02 F6 | 	mov	arg01, result1
18358     AC C9 B0 FD | 	call	#__system___lockmem
1835c     00 B0 06 F6 | 	mov	local06, #0
18360     00 92 06 F6 | 	mov	arg01, #0
18364     53 95 02 F6 | 	mov	arg02, local01
18368     00 96 06 F6 | 	mov	arg03, #0
1836c     8C D6 B0 FD | 	call	#__system___basic_print_string
18370     3D B3 02 F6 | 	mov	local07, result1
18374     58 AF 02 F6 | 	mov	local05, local06
18378     59 AF 02 F1 | 	add	local05, local07
1837c     00 BA 06 F6 | 	mov	local11, #0
18380     00 92 06 F6 | 	mov	arg01, #0
18384     09 94 06 F6 | 	mov	arg02, #9
18388     00 96 06 F6 | 	mov	arg03, #0
1838c     14 D6 B0 FD | 	call	#__system___basic_print_char
18390     3D B7 02 F6 | 	mov	local09, result1
18394     3D AF 02 F1 | 	add	local05, result1
18398     00 92 06 F6 | 	mov	arg01, #0
1839c     EC 1E B1 FD | 	call	#__system___getiolock_0622
183a0     3D 01 68 FC | 	wrlong	#0, result1
183a4     00 7A 06 F6 | 	mov	result1, #0
183a8     00 B8 06 F6 | 	mov	local10, #0
183ac                 | LR__2027
183ac                 | LR__2028
183ac                 | ' if r=print_mod_semicolon then 
183ac     22 AC 0E F2 | 	cmp	local04, #34 wz
183b0     1C 01 90 5D |  if_ne	jmp	#LR__2033
183b4                 | '   if t1.result_type=result_int then print t1.result.iresult;
183b4     1C AA 0E F2 | 	cmp	local03, #28 wz
183b8     50 00 90 5D |  if_ne	jmp	#LR__2029
183bc     00 92 06 F6 | 	mov	arg01, #0
183c0     C8 1E B1 FD | 	call	#__system___getiolock_0622
183c4     3D 93 02 F6 | 	mov	arg01, result1
183c8     3C C9 B0 FD | 	call	#__system___lockmem
183cc     00 B0 06 F6 | 	mov	local06, #0
183d0     00 B8 06 F6 | 	mov	local10, #0
183d4     0A BA 06 F6 | 	mov	local11, #10
183d8     00 92 06 F6 | 	mov	arg01, #0
183dc     53 95 02 F6 | 	mov	arg02, local01
183e0     00 96 06 F6 | 	mov	arg03, #0
183e4     0A 98 06 F6 | 	mov	arg04, #10
183e8     54 D6 B0 FD | 	call	#__system___basic_print_integer
183ec     3D B3 02 F6 | 	mov	local07, result1
183f0     58 AF 02 F6 | 	mov	local05, local06
183f4     59 AF 02 F1 | 	add	local05, local07
183f8     00 92 06 F6 | 	mov	arg01, #0
183fc     8C 1E B1 FD | 	call	#__system___getiolock_0622
18400     3D 01 68 FC | 	wrlong	#0, result1
18404     00 7A 06 F6 | 	mov	result1, #0
18408     00 B6 06 F6 | 	mov	local09, #0
1840c                 | LR__2029
1840c                 | '   if t1.result_type=result_uint then print t1.result.uresult;
1840c     1D AA 0E F2 | 	cmp	local03, #29 wz
18410     50 00 90 5D |  if_ne	jmp	#LR__2030
18414     00 92 06 F6 | 	mov	arg01, #0
18418     70 1E B1 FD | 	call	#__system___getiolock_0622
1841c     3D 93 02 F6 | 	mov	arg01, result1
18420     E4 C8 B0 FD | 	call	#__system___lockmem
18424     00 B0 06 F6 | 	mov	local06, #0
18428     00 B8 06 F6 | 	mov	local10, #0
1842c     0A BA 06 F6 | 	mov	local11, #10
18430     00 92 06 F6 | 	mov	arg01, #0
18434     53 95 02 F6 | 	mov	arg02, local01
18438     00 96 06 F6 | 	mov	arg03, #0
1843c     0A 98 06 F6 | 	mov	arg04, #10
18440     3C D6 B0 FD | 	call	#__system___basic_print_unsigned
18444     3D B3 02 F6 | 	mov	local07, result1
18448     58 AF 02 F6 | 	mov	local05, local06
1844c     59 AF 02 F1 | 	add	local05, local07
18450     00 92 06 F6 | 	mov	arg01, #0
18454     34 1E B1 FD | 	call	#__system___getiolock_0622
18458     3D 01 68 FC | 	wrlong	#0, result1
1845c     00 7A 06 F6 | 	mov	result1, #0
18460     00 B6 06 F6 | 	mov	local09, #0
18464                 | LR__2030
18464                 | '   if t1.result_type=result_float then print t1.result.fresult;
18464     1E AA 0E F2 | 	cmp	local03, #30 wz
18468     30 00 90 5D |  if_ne	jmp	#LR__2031
1846c     00 92 06 F6 | 	mov	arg01, #0
18470     18 1E B1 FD | 	call	#__system___getiolock_0622
18474     3D 93 02 F6 | 	mov	arg01, result1
18478     8C C8 B0 FD | 	call	#__system___lockmem
1847c     00 92 06 F6 | 	mov	arg01, #0
18480     53 95 02 F6 | 	mov	arg02, local01
18484     00 96 06 F6 | 	mov	arg03, #0
18488     23 98 06 F6 | 	mov	arg04, #35
1848c     6C F5 B0 FD | 	call	#__system___basic_print_float
18490     00 92 06 F6 | 	mov	arg01, #0
18494     F4 1D B1 FD | 	call	#__system___getiolock_0622
18498     3D 01 68 FC | 	wrlong	#0, result1
1849c                 | LR__2031
1849c                 | '   if t1.result_type=result_string then print t1.result.sresult;
1849c     1F AA 0E F2 | 	cmp	local03, #31 wz
184a0     2C 00 90 5D |  if_ne	jmp	#LR__2032
184a4     00 92 06 F6 | 	mov	arg01, #0
184a8     E0 1D B1 FD | 	call	#__system___getiolock_0622
184ac     3D 93 02 F6 | 	mov	arg01, result1
184b0     54 C8 B0 FD | 	call	#__system___lockmem
184b4     00 92 06 F6 | 	mov	arg01, #0
184b8     53 95 02 F6 | 	mov	arg02, local01
184bc     00 96 06 F6 | 	mov	arg03, #0
184c0     38 D5 B0 FD | 	call	#__system___basic_print_string
184c4     00 92 06 F6 | 	mov	arg01, #0
184c8     C0 1D B1 FD | 	call	#__system___getiolock_0622
184cc     3D 01 68 FC | 	wrlong	#0, result1
184d0                 | LR__2032
184d0                 | LR__2033
184d0                 | ' if r=0 then 
184d0     00 AC 0E F2 | 	cmp	local04, #0 wz
184d4     1C 01 90 5D |  if_ne	jmp	#LR__2038
184d8                 | '   if t1.result_type=result_int then print t1.result.iresult
184d8     1C AA 0E F2 | 	cmp	local03, #28 wz
184dc     40 00 90 5D |  if_ne	jmp	#LR__2034
184e0     00 92 06 F6 | 	mov	arg01, #0
184e4     A4 1D B1 FD | 	call	#__system___getiolock_0622
184e8     3D 93 02 F6 | 	mov	arg01, result1
184ec     18 C8 B0 FD | 	call	#__system___lockmem
184f0     00 92 06 F6 | 	mov	arg01, #0
184f4     53 95 02 F6 | 	mov	arg02, local01
184f8     00 96 06 F6 | 	mov	arg03, #0
184fc     0A 98 06 F6 | 	mov	arg04, #10
18500     3C D5 B0 FD | 	call	#__system___basic_print_integer
18504     00 92 06 F6 | 	mov	arg01, #0
18508     0A 94 06 F6 | 	mov	arg02, #10
1850c     00 96 06 F6 | 	mov	arg03, #0
18510     90 D4 B0 FD | 	call	#__system___basic_print_char
18514     00 92 06 F6 | 	mov	arg01, #0
18518     70 1D B1 FD | 	call	#__system___getiolock_0622
1851c     3D 01 68 FC | 	wrlong	#0, result1
18520                 | LR__2034
18520                 | '   if t1.result_type=result_uint then print t1.result.uresult
18520     1D AA 0E F2 | 	cmp	local03, #29 wz
18524     40 00 90 5D |  if_ne	jmp	#LR__2035
18528     00 92 06 F6 | 	mov	arg01, #0
1852c     5C 1D B1 FD | 	call	#__system___getiolock_0622
18530     3D 93 02 F6 | 	mov	arg01, result1
18534     D0 C7 B0 FD | 	call	#__system___lockmem
18538     00 92 06 F6 | 	mov	arg01, #0
1853c     53 95 02 F6 | 	mov	arg02, local01
18540     00 96 06 F6 | 	mov	arg03, #0
18544     0A 98 06 F6 | 	mov	arg04, #10
18548     34 D5 B0 FD | 	call	#__system___basic_print_unsigned
1854c     00 92 06 F6 | 	mov	arg01, #0
18550     0A 94 06 F6 | 	mov	arg02, #10
18554     00 96 06 F6 | 	mov	arg03, #0
18558     48 D4 B0 FD | 	call	#__system___basic_print_char
1855c     00 92 06 F6 | 	mov	arg01, #0
18560     28 1D B1 FD | 	call	#__system___getiolock_0622
18564     3D 01 68 FC | 	wrlong	#0, result1
18568                 | LR__2035
18568                 | '   if t1.result_type=result_float then print t1.result.fresult
18568     1E AA 0E F2 | 	cmp	local03, #30 wz
1856c     40 00 90 5D |  if_ne	jmp	#LR__2036
18570     00 92 06 F6 | 	mov	arg01, #0
18574     14 1D B1 FD | 	call	#__system___getiolock_0622
18578     3D 93 02 F6 | 	mov	arg01, result1
1857c     88 C7 B0 FD | 	call	#__system___lockmem
18580     00 92 06 F6 | 	mov	arg01, #0
18584     53 95 02 F6 | 	mov	arg02, local01
18588     00 96 06 F6 | 	mov	arg03, #0
1858c     23 98 06 F6 | 	mov	arg04, #35
18590     68 F4 B0 FD | 	call	#__system___basic_print_float
18594     00 92 06 F6 | 	mov	arg01, #0
18598     0A 94 06 F6 | 	mov	arg02, #10
1859c     00 96 06 F6 | 	mov	arg03, #0
185a0     00 D4 B0 FD | 	call	#__system___basic_print_char
185a4     00 92 06 F6 | 	mov	arg01, #0
185a8     E0 1C B1 FD | 	call	#__system___getiolock_0622
185ac     3D 01 68 FC | 	wrlong	#0, result1
185b0                 | LR__2036
185b0                 | '   if t1.result_type=result_string then print t1.result.sresult
185b0     1F AA 0E F2 | 	cmp	local03, #31 wz
185b4     3C 00 90 5D |  if_ne	jmp	#LR__2037
185b8     00 92 06 F6 | 	mov	arg01, #0
185bc     CC 1C B1 FD | 	call	#__system___getiolock_0622
185c0     3D 93 02 F6 | 	mov	arg01, result1
185c4     40 C7 B0 FD | 	call	#__system___lockmem
185c8     00 92 06 F6 | 	mov	arg01, #0
185cc     53 95 02 F6 | 	mov	arg02, local01
185d0     00 96 06 F6 | 	mov	arg03, #0
185d4     24 D4 B0 FD | 	call	#__system___basic_print_string
185d8     00 92 06 F6 | 	mov	arg01, #0
185dc     0A 94 06 F6 | 	mov	arg02, #10
185e0     00 96 06 F6 | 	mov	arg03, #0
185e4     BC D3 B0 FD | 	call	#__system___basic_print_char
185e8     00 92 06 F6 | 	mov	arg01, #0
185ec     9C 1C B1 FD | 	call	#__system___getiolock_0622
185f0     3D 01 68 FC | 	wrlong	#0, result1
185f4                 | LR__2037
185f4                 | LR__2038
185f4                 | ' if r=print_mod_empty then print
185f4     20 AC 0E F2 | 	cmp	local04, #32 wz
185f8     2C 00 90 5D |  if_ne	jmp	#LR__2039
185fc     00 92 06 F6 | 	mov	arg01, #0
18600     88 1C B1 FD | 	call	#__system___getiolock_0622
18604     3D 93 02 F6 | 	mov	arg01, result1
18608     FC C6 B0 FD | 	call	#__system___lockmem
1860c     00 92 06 F6 | 	mov	arg01, #0
18610     0A 94 06 F6 | 	mov	arg02, #10
18614     00 96 06 F6 | 	mov	arg03, #0
18618     88 D3 B0 FD | 	call	#__system___basic_print_char
1861c     00 92 06 F6 | 	mov	arg01, #0
18620     68 1C B1 FD | 	call	#__system___getiolock_0622
18624     3D 01 68 FC | 	wrlong	#0, result1
18628                 | LR__2039
18628                 | LR__2040
18628     E7 F0 03 F6 | 	mov	ptra, fp
1862c     F2 00 A0 FD | 	call	#popregs_
18630                 | _do_print_ret
18630     2D 00 64 FD | 	ret
18634                 | 
18634                 | ' 
18634                 | ' ' ------------------- push a variable on the stack. No command for this, a variable is a command
18634                 | ' 
18634                 | ' sub do_push
18634                 | _do_push
18634                 | ' if stackpointer<maxstack then 
18634     44 00 00 FF 
18638     D8 65 06 F1 | 	add	objptr, ##35288
1863c     32 81 02 FB | 	rdlong	_var01, objptr
18640     44 00 00 FF 
18644     D8 65 86 F1 | 	sub	objptr, ##35288
18648     01 00 00 FF 
1864c     00 80 56 F2 | 	cmps	_var01, ##512 wc
18650     F8 00 90 3D |  if_ae	jmp	#LR__2050
18654     4C 00 00 FF 
18658     00 64 06 F1 | 	add	objptr, ##38912
1865c     32 83 02 FB | 	rdlong	_var02, objptr
18660     41 85 02 F6 | 	mov	_var03, _var02
18664     01 84 66 F0 | 	shl	_var03, #1
18668     41 85 02 F1 | 	add	_var03, _var02
1866c     02 84 66 F0 | 	shl	_var03, #2
18670     03 00 00 FF 
18674     04 64 86 F1 | 	sub	objptr, ##1540
18678     32 85 02 F1 | 	add	_var03, objptr
1867c     42 81 02 FB | 	rdlong	_var01, _var03
18680     04 84 06 F1 | 	add	_var03, #4
18684     42 87 02 FB | 	rdlong	_var04, _var03
18688     41 85 02 F6 | 	mov	_var03, _var02
1868c     01 84 66 F0 | 	shl	_var03, #1
18690     41 85 02 F1 | 	add	_var03, _var02
18694     02 84 66 F0 | 	shl	_var03, #2
18698     32 85 02 F1 | 	add	_var03, objptr
1869c     08 84 06 F1 | 	add	_var03, #8
186a0     42 83 02 FB | 	rdlong	_var02, _var03
186a4     04 00 00 FF 
186a8     24 64 86 F1 | 	sub	objptr, ##2084
186ac     32 85 02 FB | 	rdlong	_var03, objptr
186b0     42 89 02 F6 | 	mov	_var05, _var03
186b4     01 88 66 F0 | 	shl	_var05, #1
186b8     42 89 02 F1 | 	add	_var05, _var03
186bc     02 88 66 F0 | 	shl	_var05, #2
186c0     0C 00 00 FF 
186c4     0C 64 86 F1 | 	sub	objptr, ##6156
186c8     32 89 02 F1 | 	add	_var05, objptr
186cc     44 81 62 FC | 	wrlong	_var01, _var05
186d0     0C 00 00 FF 
186d4     0C 64 06 F1 | 	add	objptr, ##6156
186d8     32 89 02 FB | 	rdlong	_var05, objptr
186dc     44 85 02 F6 | 	mov	_var03, _var05
186e0     01 84 66 F0 | 	shl	_var03, #1
186e4     44 85 02 F1 | 	add	_var03, _var05
186e8     02 84 66 F0 | 	shl	_var03, #2
186ec     0C 00 00 FF 
186f0     0C 64 86 F1 | 	sub	objptr, ##6156
186f4     32 85 02 F1 | 	add	_var03, objptr
186f8     04 84 06 F1 | 	add	_var03, #4
186fc     42 87 62 FC | 	wrlong	_var04, _var03
18700     0C 00 00 FF 
18704     0C 64 06 F1 | 	add	objptr, ##6156
18708     32 89 02 FB | 	rdlong	_var05, objptr
1870c     44 87 02 F6 | 	mov	_var04, _var05
18710     01 86 66 F0 | 	shl	_var04, #1
18714     44 87 02 F1 | 	add	_var04, _var05
18718     02 86 66 F0 | 	shl	_var04, #2
1871c     0C 00 00 FF 
18720     0C 64 86 F1 | 	sub	objptr, ##6156
18724     32 87 02 F1 | 	add	_var04, objptr
18728     08 86 06 F1 | 	add	_var04, #8
1872c     43 83 62 FC | 	wrlong	_var02, _var04
18730     0C 00 00 FF 
18734     0C 64 06 F1 | 	add	objptr, ##6156
18738     32 81 02 FB | 	rdlong	_var01, objptr
1873c     01 80 06 F1 | 	add	_var01, #1
18740     32 81 62 FC | 	wrlong	_var01, objptr
18744     44 00 00 FF 
18748     D8 65 86 F1 | 	sub	objptr, ##35288
1874c                 | LR__2050
1874c                 | _do_push_ret
1874c     2D 00 64 FD | 	ret
18750                 | 
18750                 | ' 
18750                 | ' '-------------------- put
18750                 | ' 
18750                 | ' sub do_put			' put  #chn,addr,(amount,(pos))
18750                 | _do_put
18750     07 CA 05 F6 | 	mov	COUNT_, #7
18754     E8 00 A0 FD | 	call	#pushregs_
18758     28 F0 07 F1 | 	add	ptra, #40
1875c     4C 00 00 FF 
18760     00 64 06 F1 | 	add	objptr, ##38912
18764     32 9B 02 FB | 	rdlong	arg05, objptr
18768     4D 99 02 F6 | 	mov	arg04, arg05
1876c     01 98 66 F0 | 	shl	arg04, #1
18770     4D 99 02 F1 | 	add	arg04, arg05
18774     02 98 66 F0 | 	shl	arg04, #2
18778     03 00 00 FF 
1877c     04 64 86 F1 | 	sub	objptr, ##1540
18780     32 99 02 F1 | 	add	arg04, objptr
18784     4C A7 02 FB | 	rdlong	local01, arg04
18788                 | ' 
18788                 | ' numpar=compiledline(lineptr_e).result.uresult
18788                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
18788     04 A6 0E F2 | 	cmp	local01, #4 wz
1878c     48 00 00 FF 
18790     FC 65 86 F1 | 	sub	objptr, ##37372
18794     48 00 90 5D |  if_ne	jmp	#LR__2060
18798     D4 4E BF FD | 	call	#_pop
1879c     3F 9B 02 F6 | 	mov	arg05, result3
187a0     1C CE 05 F1 | 	add	fp, #28
187a4     E7 7A 62 FC | 	wrlong	result1, fp
187a8     04 CE 05 F1 | 	add	fp, #4
187ac     E7 7C 62 FC | 	wrlong	result2, fp
187b0     04 CE 05 F1 | 	add	fp, #4
187b4     E7 9A 62 FC | 	wrlong	arg05, fp
187b8     08 CE 85 F1 | 	sub	fp, #8
187bc     E7 92 02 F6 | 	mov	arg01, fp
187c0     1C CE 85 F1 | 	sub	fp, #28
187c4     84 50 BF FD | 	call	#_converttoint
187c8     54 00 00 FF 
187cc     C4 64 06 F1 | 	add	objptr, ##43204
187d0     32 7B 62 FC | 	wrlong	result1, objptr
187d4     54 00 00 FF 
187d8     C4 64 86 F1 | 	sub	objptr, ##43204
187dc     18 00 90 FD | 	jmp	#LR__2061
187e0                 | LR__2060
187e0     54 00 00 FF 
187e4     C4 64 06 F1 | 	add	objptr, ##43204
187e8     FF FF FF FF 
187ec     32 FF 6B FC | 	wrlong	##-1, objptr
187f0     54 00 00 FF 
187f4     C4 64 86 F1 | 	sub	objptr, ##43204
187f8                 | LR__2061
187f8                 | ' if numpar>=3 then t1=pop() : amount=converttoint(t1) else amount=1
187f8     03 A6 56 F2 | 	cmps	local01, #3 wc
187fc     38 00 90 CD |  if_b	jmp	#LR__2062
18800     6C 4E BF FD | 	call	#_pop
18804     3F 9B 02 F6 | 	mov	arg05, result3
18808     1C CE 05 F1 | 	add	fp, #28
1880c     E7 7A 62 FC | 	wrlong	result1, fp
18810     04 CE 05 F1 | 	add	fp, #4
18814     E7 7C 62 FC | 	wrlong	result2, fp
18818     04 CE 05 F1 | 	add	fp, #4
1881c     E7 9A 62 FC | 	wrlong	arg05, fp
18820     08 CE 85 F1 | 	sub	fp, #8
18824     E7 92 02 F6 | 	mov	arg01, fp
18828     1C CE 85 F1 | 	sub	fp, #28
1882c     1C 50 BF FD | 	call	#_converttoint
18830     3D A9 02 F6 | 	mov	local02, result1
18834     04 00 90 FD | 	jmp	#LR__2063
18838                 | LR__2062
18838     01 A8 06 F6 | 	mov	local02, #1
1883c                 | LR__2063
1883c                 | ' if numpar>=2 then t1=pop() : adr=converttoint(t1)
1883c     02 A6 56 F2 | 	cmps	local01, #2 wc
18840     34 00 90 CD |  if_b	jmp	#LR__2064
18844     28 4E BF FD | 	call	#_pop
18848     3F A7 02 F6 | 	mov	local01, result3
1884c     1C CE 05 F1 | 	add	fp, #28
18850     E7 7A 62 FC | 	wrlong	result1, fp
18854     04 CE 05 F1 | 	add	fp, #4
18858     E7 7C 62 FC | 	wrlong	result2, fp
1885c     04 CE 05 F1 | 	add	fp, #4
18860     E7 A6 62 FC | 	wrlong	local01, fp
18864     08 CE 85 F1 | 	sub	fp, #8
18868     E7 92 02 F6 | 	mov	arg01, fp
1886c     1C CE 85 F1 | 	sub	fp, #28
18870     D8 4F BF FD | 	call	#_converttoint
18874     3D AB 02 F6 | 	mov	local03, result1
18878                 | LR__2064
18878     F4 4D BF FD | 	call	#_pop
1887c     3F A7 02 F6 | 	mov	local01, result3
18880     1C CE 05 F1 | 	add	fp, #28
18884     E7 7A 62 FC | 	wrlong	result1, fp
18888     04 CE 05 F1 | 	add	fp, #4
1888c     E7 7C 62 FC | 	wrlong	result2, fp
18890     04 CE 05 F1 | 	add	fp, #4
18894     E7 A6 62 FC | 	wrlong	local01, fp
18898     08 CE 85 F1 | 	sub	fp, #8
1889c     E7 92 02 F6 | 	mov	arg01, fp
188a0     1C CE 85 F1 | 	sub	fp, #28
188a4     A4 4F BF FD | 	call	#_converttoint
188a8     3D AD 02 F6 | 	mov	local04, result1
188ac     02 AE 66 F0 | 	shl	local05, #2
188b0     52 00 00 FF 
188b4     44 64 06 F1 | 	add	objptr, ##42052
188b8     32 AF 02 F1 | 	add	local05, objptr
188bc     57 01 68 FC | 	wrlong	#0, local05
188c0                 | ' t1=pop() : channel=converttoint(t1)
188c0                 | ' getres(j)=0
188c0                 | ' if pos>=0 then
188c0     02 00 00 FF 
188c4     80 64 06 F1 | 	add	objptr, ##1152
188c8     32 B1 02 FB | 	rdlong	local06, objptr
188cc     54 00 00 FF 
188d0     C4 64 86 F1 | 	sub	objptr, ##43204
188d4     00 B0 56 F2 | 	cmps	local06, #0 wc
188d8     08 01 90 CD |  if_b	jmp	#LR__2070
188dc     00 B2 06 F6 | 	mov	local07, #0
188e0                 | '    i=0: do
188e0                 | LR__2065
188e0     00 AE 06 F6 | 	mov	local05, #0
188e4                 | '    j=0: do    
188e4                 | LR__2066
188e4                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
188e4     00 04 00 FF 
188e8     00 AA 56 F2 | 	cmps	local03, ##524288 wc
188ec     34 00 90 3D |  if_ae	jmp	#LR__2067
188f0     57 B1 02 F6 | 	mov	local06, local05
188f4     32 A7 02 F6 | 	mov	local01, objptr
188f8     50 00 00 FF 
188fc     34 A6 06 F1 | 	add	local01, ##41012
18900     53 B1 02 F1 | 	add	local06, local01
18904     55 93 02 F6 | 	mov	arg01, local03
18908     59 A7 02 F6 | 	mov	local01, local07
1890c     0A A6 66 F0 | 	shl	local01, #10
18910     53 93 02 F1 | 	add	arg01, local01
18914     57 93 02 F1 | 	add	arg01, local05
18918     49 7B C2 FA | 	rdbyte	result1, arg01
1891c     58 7B 42 FC | 	wrbyte	result1, local06
18920     30 00 90 FD | 	jmp	#LR__2068
18924                 | LR__2067
18924     57 B1 02 F6 | 	mov	local06, local05
18928     32 A7 02 F6 | 	mov	local01, objptr
1892c     50 00 00 FF 
18930     34 A6 06 F1 | 	add	local01, ##41012
18934     53 B1 02 F1 | 	add	local06, local01
18938     55 93 02 F6 | 	mov	arg01, local03
1893c     59 A7 02 F6 | 	mov	local01, local07
18940     0A A6 66 F0 | 	shl	local01, #10
18944     53 93 02 F1 | 	add	arg01, local01
18948     57 93 02 F1 | 	add	arg01, local05
1894c     5C 89 B0 FD | 	call	#_pspeek
18950     58 7B 42 FC | 	wrbyte	result1, local06
18954                 | LR__2068
18954     01 AE 06 F1 | 	add	local05, #1
18958     02 00 00 FF 
1895c     00 AE 56 F2 | 	cmps	local05, ##1024 wc
18960     14 00 90 3D |  if_ae	jmp	#LR__2069
18964     59 B1 02 F6 | 	mov	local06, local07
18968     0A B0 66 F0 | 	shl	local06, #10
1896c     57 B1 02 F1 | 	add	local06, local05
18970     54 B1 5A F2 | 	cmps	local06, local02 wcz
18974     6C FF 9F ED |  if_be	jmp	#LR__2066
18978                 | LR__2069
18978                 | '    put #channel, pos+1,block(0),amount, r : getres(channel)=r
18978     54 00 00 FF 
1897c     C4 64 06 F1 | 	add	objptr, ##43204
18980     32 95 02 FB | 	rdlong	arg02, objptr
18984     01 94 06 F1 | 	add	arg02, #1
18988     04 00 00 FF 
1898c     90 64 86 F1 | 	sub	objptr, ##2192
18990     32 97 02 F6 | 	mov	arg03, objptr
18994     50 00 00 FF 
18998     34 64 86 F1 | 	sub	objptr, ##41012
1899c     54 99 02 F6 | 	mov	arg04, local02
189a0     56 93 02 F6 | 	mov	arg01, local04
189a4     01 9A 06 F6 | 	mov	arg05, #1
189a8     60 D1 B0 FD | 	call	#__system___basic_put
189ac     56 B1 02 F6 | 	mov	local06, local04
189b0     02 B0 66 F0 | 	shl	local06, #2
189b4     32 A7 02 F6 | 	mov	local01, objptr
189b8     52 00 00 FF 
189bc     44 A6 06 F1 | 	add	local01, ##42052
189c0     53 B1 02 F1 | 	add	local06, local01
189c4     58 7B 62 FC | 	wrlong	result1, local06
189c8                 | '    if 1024*i+j>amount then exit loop
189c8     59 B1 02 F6 | 	mov	local06, local07
189cc     0A B0 66 F0 | 	shl	local06, #10
189d0     57 B1 02 F1 | 	add	local06, local05
189d4     54 B1 5A F2 | 	cmps	local06, local02 wcz
189d8     F8 00 90 1D |  if_a	jmp	#LR__2076
189dc     01 B2 06 F1 | 	add	local07, #1
189e0     FC FE 9F FD | 	jmp	#LR__2065
189e4                 | LR__2070
189e4     00 B2 06 F6 | 	mov	local07, #0
189e8                 | '    i=0: do
189e8                 | LR__2071
189e8     00 AE 06 F6 | 	mov	local05, #0
189ec                 | '    j=0: do  
189ec                 | LR__2072
189ec                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
189ec     00 04 00 FF 
189f0     00 AA 56 F2 | 	cmps	local03, ##524288 wc
189f4     34 00 90 3D |  if_ae	jmp	#LR__2073
189f8     57 B1 02 F6 | 	mov	local06, local05
189fc     32 A7 02 F6 | 	mov	local01, objptr
18a00     50 00 00 FF 
18a04     34 A6 06 F1 | 	add	local01, ##41012
18a08     53 B1 02 F1 | 	add	local06, local01
18a0c     55 93 02 F6 | 	mov	arg01, local03
18a10     59 A7 02 F6 | 	mov	local01, local07
18a14     0A A6 66 F0 | 	shl	local01, #10
18a18     53 93 02 F1 | 	add	arg01, local01
18a1c     57 93 02 F1 | 	add	arg01, local05
18a20     49 7B C2 FA | 	rdbyte	result1, arg01
18a24     58 7B 42 FC | 	wrbyte	result1, local06
18a28     30 00 90 FD | 	jmp	#LR__2074
18a2c                 | LR__2073
18a2c     57 B1 02 F6 | 	mov	local06, local05
18a30     32 A7 02 F6 | 	mov	local01, objptr
18a34     50 00 00 FF 
18a38     34 A6 06 F1 | 	add	local01, ##41012
18a3c     53 B1 02 F1 | 	add	local06, local01
18a40     55 93 02 F6 | 	mov	arg01, local03
18a44     59 A7 02 F6 | 	mov	local01, local07
18a48     0A A6 66 F0 | 	shl	local01, #10
18a4c     53 93 02 F1 | 	add	arg01, local01
18a50     57 93 02 F1 | 	add	arg01, local05
18a54     54 88 B0 FD | 	call	#_pspeek
18a58     58 7B 42 FC | 	wrbyte	result1, local06
18a5c                 | LR__2074
18a5c     01 AE 06 F1 | 	add	local05, #1
18a60     02 00 00 FF 
18a64     00 AE 56 F2 | 	cmps	local05, ##1024 wc
18a68     14 00 90 3D |  if_ae	jmp	#LR__2075
18a6c     59 B1 02 F6 | 	mov	local06, local07
18a70     0A B0 66 F0 | 	shl	local06, #10
18a74     57 B1 02 F1 | 	add	local06, local05
18a78     54 B1 5A F2 | 	cmps	local06, local02 wcz
18a7c     6C FF 9F ED |  if_be	jmp	#LR__2072
18a80                 | LR__2075
18a80                 | '    put #channel,,block(0),amount, r : getres(channel)=r
18a80     32 97 02 F6 | 	mov	arg03, objptr
18a84     50 00 00 FF 
18a88     34 96 06 F1 | 	add	arg03, ##41012
18a8c     54 99 02 F6 | 	mov	arg04, local02
18a90     56 93 02 F6 | 	mov	arg01, local04
18a94     00 94 06 F6 | 	mov	arg02, #0
18a98     01 9A 06 F6 | 	mov	arg05, #1
18a9c     6C D0 B0 FD | 	call	#__system___basic_put
18aa0     56 B1 02 F6 | 	mov	local06, local04
18aa4     02 B0 66 F0 | 	shl	local06, #2
18aa8     32 A7 02 F6 | 	mov	local01, objptr
18aac     52 00 00 FF 
18ab0     44 A6 06 F1 | 	add	local01, ##42052
18ab4     53 B1 02 F1 | 	add	local06, local01
18ab8     58 7B 62 FC | 	wrlong	result1, local06
18abc                 | '    if 1024*i+j>amount then exit loop
18abc     59 B1 02 F6 | 	mov	local06, local07
18ac0     0A B0 66 F0 | 	shl	local06, #10
18ac4     57 B1 02 F1 | 	add	local06, local05
18ac8     54 B1 5A F2 | 	cmps	local06, local02 wcz
18acc     01 B2 06 E1 |  if_be	add	local07, #1
18ad0     14 FF 9F ED |  if_be	jmp	#LR__2071
18ad4                 | LR__2076
18ad4     E7 F0 03 F6 | 	mov	ptra, fp
18ad8     F2 00 A0 FD | 	call	#popregs_
18adc                 | _do_put_ret
18adc     2D 00 64 FD | 	ret
18ae0                 | 
18ae0                 | ' 
18ae0                 | ' '-------------------- rad
18ae0                 | ' 
18ae0                 | ' sub do_rad
18ae0                 | _do_rad
18ae0     54 00 00 FF 
18ae4     60 64 06 F1 | 	add	objptr, ##43104
18ae8     00 C0 9F FF 
18aec     32 01 68 FC | 	wrlong	##1065353216, objptr
18af0     04 64 06 F1 | 	add	objptr, #4
18af4     00 C0 9F FF 
18af8     32 01 68 FC | 	wrlong	##1065353216, objptr
18afc     54 00 00 FF 
18b00     64 64 86 F1 | 	sub	objptr, ##43108
18b04                 | _do_rad_ret
18b04     2D 00 64 FD | 	ret
18b08                 | 
18b08                 | ' 
18b08                 | ' '-------------------- rdpin
18b08                 | ' 
18b08                 | ' sub do_rdpin
18b08                 | _do_rdpin
18b08     00 CA 05 F6 | 	mov	COUNT_, #0
18b0c     E8 00 A0 FD | 	call	#pushregs_
18b10     0C F0 07 F1 | 	add	ptra, #12
18b14     58 4B BF FD | 	call	#_pop
18b18     E7 7A 62 FC | 	wrlong	result1, fp
18b1c     04 CE 05 F1 | 	add	fp, #4
18b20     E7 7C 62 FC | 	wrlong	result2, fp
18b24     04 CE 05 F1 | 	add	fp, #4
18b28     E7 7E 62 FC | 	wrlong	result3, fp
18b2c     08 CE 85 F1 | 	sub	fp, #8
18b30     E7 92 02 F6 | 	mov	arg01, fp
18b34     14 4D BF FD | 	call	#_converttoint
18b38     3D 7B 8A FA | 	rdpin	result1, result1
18b3c     54 00 00 FF 
18b40     C8 64 06 F1 | 	add	objptr, ##43208
18b44     32 7B 62 FC | 	wrlong	result1, objptr
18b48     54 00 00 FF 
18b4c     C8 64 86 F1 | 	sub	objptr, ##43208
18b50     08 CE 05 F1 | 	add	fp, #8
18b54     E7 3A 68 FC | 	wrlong	#29, fp
18b58     08 CE 85 F1 | 	sub	fp, #8
18b5c     E7 08 68 FC | 	wrlong	#4, fp
18b60     E7 92 02 F6 | 	mov	arg01, fp
18b64     98 4B BF FD | 	call	#_push
18b68     E7 F0 03 F6 | 	mov	ptra, fp
18b6c     F2 00 A0 FD | 	call	#popregs_
18b70                 | _do_rdpin_ret
18b70     2D 00 64 FD | 	ret
18b74                 | 
18b74                 | ' 
18b74                 | ' ' ----------------  read
18b74                 | ' 
18b74                 | ' function read_next_line() as string
18b74                 | _read_next_line
18b74     07 CA 05 F6 | 	mov	COUNT_, #7
18b78     E8 00 A0 FD | 	call	#pushregs_
18b7c                 | ' if dataptr=$7FFFFFFF then return("")
18b7c     52 00 00 FF 
18b80     AC 64 06 F1 | 	add	objptr, ##42156
18b84     32 A7 02 FB | 	rdlong	local01, objptr
18b88     52 00 00 FF 
18b8c     AC 64 86 F1 | 	sub	objptr, ##42156
18b90     FF FF 3F FF 
18b94     FF A7 0E F2 | 	cmp	local01, ##2147483647 wz
18b98     9A 01 00 AF 
18b9c     0F 7A 06 A6 |  if_e	mov	result1, ##@LR__6075
18ba0     C0 01 90 AD |  if_e	jmp	#LR__2087
18ba4                 | ' do
18ba4                 | LR__2080
18ba4     32 93 02 F6 | 	mov	arg01, objptr
18ba8     52 00 00 FF 
18bac     88 92 06 F1 | 	add	arg01, ##42120
18bb0     52 00 00 FF 
18bb4     AC 64 06 F1 | 	add	objptr, ##42156
18bb8     32 95 02 FB | 	rdlong	arg02, objptr
18bbc     24 96 06 F6 | 	mov	arg03, #36
18bc0     46 00 00 FF 
18bc4     E0 65 86 F1 | 	sub	objptr, ##36320
18bc8     C8 B1 B0 FD | 	call	#_psram_spin2_read1
18bcc                 | '  ' print dataptr
18bcc                 | '   psram.read1(varptr(dataheader),dataptr,36) 
18bcc                 | '   if dataheader(0)<>$FFFFFFFF then dataptr=dataheader(5)
18bcc     46 00 00 FF 
18bd0     BC 65 06 F1 | 	add	objptr, ##36284
18bd4     32 A7 02 FB | 	rdlong	local01, objptr
18bd8     52 00 00 FF 
18bdc     88 64 86 F1 | 	sub	objptr, ##42120
18be0     FF FF 7F FF 
18be4     FF A7 0E F2 | 	cmp	local01, ##-1 wz
18be8     52 00 00 5F 
18bec     9C 64 06 51 |  if_ne	add	objptr, ##42140
18bf0     32 A7 02 5B |  if_ne	rdlong	local01, objptr
18bf4     10 64 06 51 |  if_ne	add	objptr, #16
18bf8     32 A7 62 5C |  if_ne	wrlong	local01, objptr
18bfc     52 00 00 5F 
18c00     AC 64 86 51 |  if_ne	sub	objptr, ##42156
18c04     52 00 00 FF 
18c08     9C 64 06 F1 | 	add	objptr, ##42140
18c0c     32 A7 02 FB | 	rdlong	local01, objptr
18c10     52 00 00 FF 
18c14     9C 64 86 F1 | 	sub	objptr, ##42140
18c18     FF FF 3F FF 
18c1c     FF A7 0E F2 | 	cmp	local01, ##2147483647 wz
18c20     52 00 00 5F 
18c24     88 64 06 51 |  if_ne	add	objptr, ##42120
18c28     32 A9 02 5B |  if_ne	rdlong	local02, objptr
18c2c     52 00 00 5F 
18c30     88 64 86 51 |  if_ne	sub	objptr, ##42120
18c34     FF FF 7F 5F 
18c38     FF A9 0E 52 |  if_ne	cmp	local02, ##-1 wz
18c3c     52 00 00 5F 
18c40     A8 64 06 51 |  if_ne	add	objptr, ##42152
18c44     32 AB 02 5B |  if_ne	rdlong	local03, objptr
18c48     52 00 00 5F 
18c4c     A8 64 86 51 |  if_ne	sub	objptr, ##42152
18c50     B7 AA 0E 52 |  if_ne	cmp	local03, #183 wz
18c54     4C FF 9F 5D |  if_ne	jmp	#LR__2080
18c58                 | ' if dataheader(8)=token_data then 
18c58     52 00 00 FF 
18c5c     A8 64 06 F1 | 	add	objptr, ##42152
18c60     32 A7 02 FB | 	rdlong	local01, objptr
18c64     52 00 00 FF 
18c68     A8 64 86 F1 | 	sub	objptr, ##42152
18c6c     B7 A6 0E F2 | 	cmp	local01, #183 wz
18c70     E0 00 90 5D |  if_ne	jmp	#LR__2085
18c74     52 00 00 FF 
18c78     90 64 06 F1 | 	add	objptr, ##42128
18c7c     32 A7 02 FB | 	rdlong	local01, objptr
18c80     02 00 00 FF 
18c84     18 64 06 F1 | 	add	objptr, ##1048
18c88     32 A7 62 FC | 	wrlong	local01, objptr
18c8c     02 00 00 FF 
18c90     14 64 86 F1 | 	sub	objptr, ##1044
18c94     32 AD 02 FB | 	rdlong	local04, objptr
18c98     02 00 00 FF 
18c9c     0C 64 06 F1 | 	add	objptr, ##1036
18ca0     32 AD 62 FC | 	wrlong	local04, objptr
18ca4                 | '  'print "data found at line "; dataheader(0)
18ca4                 | '   l=dataheader(2) : j=dataheader(3) : for i=0 to j-1: readline+=chr$(pspeek(l+i)): next i 
18ca4     00 AE 06 F6 | 	mov	local05, #0
18ca8     54 00 00 FF 
18cac     A0 64 86 F1 | 	sub	objptr, ##43168
18cb0                 | LR__2081
18cb0     56 AF 52 F2 | 	cmps	local05, local04 wc
18cb4     3C 00 90 3D |  if_ae	jmp	#LR__2082
18cb8     54 00 00 FF 
18cbc     A8 64 06 F1 | 	add	objptr, ##43176
18cc0     32 93 02 FB | 	rdlong	arg01, objptr
18cc4     54 00 00 FF 
18cc8     A8 64 86 F1 | 	sub	objptr, ##43176
18ccc     57 93 02 F1 | 	add	arg01, local05
18cd0     D8 85 B0 FD | 	call	#_pspeek
18cd4     3D 93 E2 F8 | 	getbyte	arg01, result1, #0
18cd8     98 DA B0 FD | 	call	#__system__Chr_S
18cdc     3D 95 02 F6 | 	mov	arg02, result1
18ce0     58 93 02 F6 | 	mov	arg01, local06
18ce4     7C C0 B0 FD | 	call	#__system___string_concat
18ce8     3D B1 02 F6 | 	mov	local06, result1
18cec     01 AE 06 F1 | 	add	local05, #1
18cf0     BC FF 9F FD | 	jmp	#LR__2081
18cf4                 | LR__2082
18cf4     9A 01 00 FF 
18cf8     10 96 06 F6 | 	mov	arg03, ##@LR__6076
18cfc     01 92 06 F6 | 	mov	arg01, #1
18d00     58 95 02 F6 | 	mov	arg02, local06
18d04     F0 DD B0 FD | 	call	#__system__Instr
18d08     3D AF 02 F6 | 	mov	local05, result1
18d0c     58 93 02 F6 | 	mov	arg01, local06
18d10     49 B3 02 F6 | 	mov	local07, arg01
18d14     D7 06 48 FB | 	callpa	#(@LR__2084-@LR__2083)>>2,fcache_load_ptr_
18d18                 | LR__2083
18d18     59 7B CA FA | 	rdbyte	result1, local07 wz
18d1c     01 B2 06 51 |  if_ne	add	local07, #1
18d20     F4 FF 9F 5D |  if_ne	jmp	#LR__2083
18d24                 | LR__2084
18d24     49 B3 82 F1 | 	sub	local07, arg01
18d28     59 95 02 F6 | 	mov	arg02, local07
18d2c     57 95 82 F1 | 	sub	arg02, local05
18d30     04 94 86 F1 | 	sub	arg02, #4
18d34     58 93 02 F6 | 	mov	arg01, local06
18d38     FC D8 B0 FD | 	call	#__system__Right_S
18d3c     3D 93 02 F6 | 	mov	arg01, result1
18d40     FC DC B0 FD | 	call	#__system__RTrim_S
18d44     3D 93 02 F6 | 	mov	arg01, result1
18d48     34 DC B0 FD | 	call	#__system__LTrim_S
18d4c     3D B1 02 F6 | 	mov	local06, result1
18d50     0C 00 90 FD | 	jmp	#LR__2086
18d54                 | LR__2085
18d54                 | '   return ("") 'todo proper err
18d54     9A 01 00 FF 
18d58     15 7A 06 F6 | 	mov	result1, ##@LR__6077
18d5c     04 00 90 FD | 	jmp	#LR__2087
18d60                 | LR__2086
18d60                 | ' return readline
18d60     58 7B 02 F6 | 	mov	result1, local06
18d64                 | LR__2087
18d64     E7 F0 03 F6 | 	mov	ptra, fp
18d68     F2 00 A0 FD | 	call	#popregs_
18d6c                 | _read_next_line_ret
18d6c     2D 00 64 FD | 	ret
18d70                 | 
18d70                 | ' 
18d70                 | ' sub do_read
18d70                 | _do_read
18d70     17 CA 05 F6 | 	mov	COUNT_, #23
18d74     E8 00 A0 FD | 	call	#pushregs_
18d78     58 F1 07 F1 | 	add	ptra, #344
18d7c     4C 00 00 FF 
18d80     00 64 06 F1 | 	add	objptr, ##38912
18d84     32 AD 02 FB | 	rdlong	local04, objptr
18d88     56 AF 02 F6 | 	mov	local05, local04
18d8c     01 AE 66 F0 | 	shl	local05, #1
18d90     56 AF 02 F1 | 	add	local05, local04
18d94     02 AE 66 F0 | 	shl	local05, #2
18d98     03 00 00 FF 
18d9c     04 64 86 F1 | 	sub	objptr, ##1540
18da0     32 B1 02 F6 | 	mov	local06, objptr
18da4     32 AF 02 F1 | 	add	local05, objptr
18da8     57 B3 02 FB | 	rdlong	local07, local05
18dac                 | ' 
18dac                 | ' 
18dac                 | ' numpar=compiledline(lineptr_e).result.uresult
18dac                 | ' if numpar<1 orelse numpar>64 then print "In read: ";: printerror(39,runheader(0)) : return
18dac     01 B2 16 F2 | 	cmp	local07, #1 wc
18db0     48 00 00 FF 
18db4     FC 65 86 F1 | 	sub	objptr, ##37372
18db8     08 00 90 CD |  if_b	jmp	#LR__2090
18dbc     41 B2 16 F2 | 	cmp	local07, #65 wc
18dc0     50 00 90 CD |  if_b	jmp	#LR__2091
18dc4                 | LR__2090
18dc4     00 92 06 F6 | 	mov	arg01, #0
18dc8     C0 14 B1 FD | 	call	#__system___getiolock_0622
18dcc     3D 93 02 F6 | 	mov	arg01, result1
18dd0     34 BF B0 FD | 	call	#__system___lockmem
18dd4     9A 01 00 FF 
18dd8     16 94 06 F6 | 	mov	arg02, ##@LR__6078
18ddc     00 92 06 F6 | 	mov	arg01, #0
18de0     00 96 06 F6 | 	mov	arg03, #0
18de4     14 CC B0 FD | 	call	#__system___basic_print_string
18de8     00 92 06 F6 | 	mov	arg01, #0
18dec     9C 14 B1 FD | 	call	#__system___getiolock_0622
18df0     3D 01 68 FC | 	wrlong	#0, result1
18df4     52 00 00 FF 
18df8     70 64 06 F1 | 	add	objptr, ##42096
18dfc     32 95 02 FB | 	rdlong	arg02, objptr
18e00     52 00 00 FF 
18e04     70 64 86 F1 | 	sub	objptr, ##42096
18e08     27 92 06 F6 | 	mov	arg01, #39
18e0c     28 82 B0 FD | 	call	#_printerror
18e10     A8 09 90 FD | 	jmp	#LR__2138
18e14                 | LR__2091
18e14                 | ' i=numpar-1
18e14                 | ' if readline="" then readline=read_next_line() ': print readline
18e14     54 00 00 FF 
18e18     94 64 06 F1 | 	add	objptr, ##43156
18e1c     32 93 02 FB | 	rdlong	arg01, objptr
18e20     54 00 00 FF 
18e24     94 64 86 F1 | 	sub	objptr, ##43156
18e28     9A 01 00 FF 
18e2c     20 94 06 F6 | 	mov	arg02, ##@LR__6079
18e30     FC BE B0 FD | 	call	#__system___string_cmp
18e34     00 7A 0E F2 | 	cmp	result1, #0 wz
18e38     18 00 90 5D |  if_ne	jmp	#LR__2092
18e3c     34 FD BF FD | 	call	#_read_next_line
18e40     54 00 00 FF 
18e44     94 64 06 F1 | 	add	objptr, ##43156
18e48     32 7B 62 FC | 	wrlong	result1, objptr
18e4c     54 00 00 FF 
18e50     94 64 86 F1 | 	sub	objptr, ##43156
18e54                 | LR__2092
18e54                 | ' if readline="" then printerror(55,runheader(0)) :return
18e54     54 00 00 FF 
18e58     94 64 06 F1 | 	add	objptr, ##43156
18e5c     32 93 02 FB | 	rdlong	arg01, objptr
18e60     54 00 00 FF 
18e64     94 64 86 F1 | 	sub	objptr, ##43156
18e68     9A 01 00 FF 
18e6c     21 94 06 F6 | 	mov	arg02, ##@LR__6080
18e70     BC BE B0 FD | 	call	#__system___string_cmp
18e74     00 7A 0E F2 | 	cmp	result1, #0 wz
18e78     20 00 90 5D |  if_ne	jmp	#LR__2093
18e7c     52 00 00 FF 
18e80     70 64 06 F1 | 	add	objptr, ##42096
18e84     32 95 02 FB | 	rdlong	arg02, objptr
18e88     52 00 00 FF 
18e8c     70 64 86 F1 | 	sub	objptr, ##42096
18e90     37 92 06 F6 | 	mov	arg01, #55
18e94     A0 81 B0 FD | 	call	#_printerror
18e98     20 09 90 FD | 	jmp	#LR__2138
18e9c                 | LR__2093
18e9c     00 B4 06 F6 | 	mov	local08, #0
18ea0     59 B7 02 F6 | 	mov	local09, local07
18ea4     01 B6 86 F1 | 	sub	local09, #1
18ea8                 | ' j=0
18ea8                 | ' i=numpar-1
18ea8                 | ' do
18ea8                 | LR__2094
18ea8                 | '   do
18ea8                 | LR__2095
18ea8     54 00 00 FF 
18eac     94 64 06 F1 | 	add	objptr, ##43156
18eb0     32 95 02 FB | 	rdlong	arg02, objptr
18eb4     54 00 00 FF 
18eb8     94 64 86 F1 | 	sub	objptr, ##43156
18ebc     9A 01 00 FF 
18ec0     22 96 06 F6 | 	mov	arg03, ##@LR__6081
18ec4     01 92 06 F6 | 	mov	arg01, #1
18ec8     2C DC B0 FD | 	call	#__system__Instr
18ecc     3D 97 02 F6 | 	mov	arg03, result1
18ed0                 | '     comma=instr(1,readline,"'") : if comma>0 then readline=left$(readline,comma-1) ' allows comments in data
18ed0     01 96 16 F2 | 	cmp	arg03, #1 wc
18ed4     34 00 90 CD |  if_b	jmp	#LR__2096
18ed8     54 00 00 FF 
18edc     94 64 06 F1 | 	add	objptr, ##43156
18ee0     32 93 02 FB | 	rdlong	arg01, objptr
18ee4     54 00 00 FF 
18ee8     94 64 86 F1 | 	sub	objptr, ##43156
18eec     01 96 86 F1 | 	sub	arg03, #1
18ef0     4B 95 02 F6 | 	mov	arg02, arg03
18ef4     B8 D6 B0 FD | 	call	#__system__Left_S
18ef8     54 00 00 FF 
18efc     94 64 06 F1 | 	add	objptr, ##43156
18f00     32 7B 62 FC | 	wrlong	result1, objptr
18f04     54 00 00 FF 
18f08     94 64 86 F1 | 	sub	objptr, ##43156
18f0c                 | LR__2096
18f0c     54 00 00 FF 
18f10     94 64 06 F1 | 	add	objptr, ##43156
18f14     32 95 02 FB | 	rdlong	arg02, objptr
18f18     54 00 00 FF 
18f1c     94 64 86 F1 | 	sub	objptr, ##43156
18f20     9A 01 00 FF 
18f24     24 96 06 F6 | 	mov	arg03, ##@LR__6082
18f28     01 92 06 F6 | 	mov	arg01, #1
18f2c     C8 DB B0 FD | 	call	#__system__Instr
18f30     3D B9 02 F6 | 	mov	local10, result1
18f34                 | '     comma=instr(1,readline,",")  
18f34                 | '       if comma>0  then 
18f34     01 B8 16 F2 | 	cmp	local10, #1 wc
18f38     7C 00 90 CD |  if_b	jmp	#LR__2099
18f3c     54 00 00 FF 
18f40     94 64 06 F1 | 	add	objptr, ##43156
18f44     32 93 02 FB | 	rdlong	arg01, objptr
18f48     54 00 00 FF 
18f4c     94 64 86 F1 | 	sub	objptr, ##43156
18f50     5C 95 02 F6 | 	mov	arg02, local10
18f54     01 94 86 F1 | 	sub	arg02, #1
18f58     54 D6 B0 FD | 	call	#__system__Left_S
18f5c     3D BB 02 F6 | 	mov	local11, result1
18f60     54 00 00 FF 
18f64     94 64 06 F1 | 	add	objptr, ##43156
18f68     32 B1 02 FB | 	rdlong	local06, objptr
18f6c     54 00 00 FF 
18f70     94 64 86 F1 | 	sub	objptr, ##43156
18f74     58 93 02 F6 | 	mov	arg01, local06
18f78     49 BD 02 F6 | 	mov	local12, arg01
18f7c     D7 06 48 FB | 	callpa	#(@LR__2098-@LR__2097)>>2,fcache_load_ptr_
18f80                 | LR__2097
18f80     5E 7B CA FA | 	rdbyte	result1, local12 wz
18f84     01 BC 06 51 |  if_ne	add	local12, #1
18f88     F4 FF 9F 5D |  if_ne	jmp	#LR__2097
18f8c                 | LR__2098
18f8c     49 BD 82 F1 | 	sub	local12, arg01
18f90     5E 95 02 F6 | 	mov	arg02, local12
18f94     5C 95 82 F1 | 	sub	arg02, local10
18f98     58 93 02 F6 | 	mov	arg01, local06
18f9c     98 D6 B0 FD | 	call	#__system__Right_S
18fa0     54 00 00 FF 
18fa4     94 64 06 F1 | 	add	objptr, ##43156
18fa8     32 7B 62 FC | 	wrlong	result1, objptr
18fac     54 00 00 FF 
18fb0     94 64 86 F1 | 	sub	objptr, ##43156
18fb4     40 00 90 FD | 	jmp	#LR__2100
18fb8                 | LR__2099
18fb8     54 00 00 FF 
18fbc     94 64 06 F1 | 	add	objptr, ##43156
18fc0     32 93 02 FB | 	rdlong	arg01, objptr
18fc4     54 00 00 FF 
18fc8     94 64 86 F1 | 	sub	objptr, ##43156
18fcc     70 DA B0 FD | 	call	#__system__RTrim_S
18fd0     3D 93 02 F6 | 	mov	arg01, result1
18fd4     A8 D9 B0 FD | 	call	#__system__LTrim_S
18fd8     3D BB 02 F6 | 	mov	local11, result1
18fdc     9A 01 00 FF 
18fe0     26 BE 06 F6 | 	mov	local13, ##@LR__6083
18fe4     54 00 00 FF 
18fe8     94 64 06 F1 | 	add	objptr, ##43156
18fec     32 BF 62 FC | 	wrlong	local13, objptr
18ff0     54 00 00 FF 
18ff4     94 64 86 F1 | 	sub	objptr, ##43156
18ff8                 | LR__2100
18ff8                 | '      
18ff8                 | '      if part$<>"" then j=j+1
18ff8     9A 01 00 FF 
18ffc     27 94 06 F6 | 	mov	arg02, ##@LR__6084
19000     5D 93 02 F6 | 	mov	arg01, local11
19004     28 BD B0 FD | 	call	#__system___string_cmp
19008     00 7A 0E F2 | 	cmp	result1, #0 wz
1900c     01 B4 06 51 |  if_ne	add	local08, #1
19010     5B 97 02 F6 | 	mov	arg03, local09
19014     02 96 66 F0 | 	shl	arg03, #2
19018     E7 AC 02 F6 | 	mov	local04, fp
1901c     2C AC 06 F1 | 	add	local04, #44
19020     56 97 02 F1 | 	add	arg03, local04
19024     4B BB 62 FC | 	wrlong	local11, arg03
19028     01 B6 86 F1 | 	sub	local09, #1
1902c                 | '      args(i)=part$  
1902c                 | '      i=i-1
1902c                 | '     if readline="" then readline=read_next_line() 
1902c     54 00 00 FF 
19030     94 64 06 F1 | 	add	objptr, ##43156
19034     32 93 02 FB | 	rdlong	arg01, objptr
19038     54 00 00 FF 
1903c     94 64 86 F1 | 	sub	objptr, ##43156
19040     9A 01 00 FF 
19044     28 94 06 F6 | 	mov	arg02, ##@LR__6085
19048     E4 BC B0 FD | 	call	#__system___string_cmp
1904c     00 7A 0E F2 | 	cmp	result1, #0 wz
19050     18 00 90 5D |  if_ne	jmp	#LR__2101
19054     1C FB BF FD | 	call	#_read_next_line
19058     54 00 00 FF 
1905c     94 64 06 F1 | 	add	objptr, ##43156
19060     32 7B 62 FC | 	wrlong	result1, objptr
19064     54 00 00 FF 
19068     94 64 86 F1 | 	sub	objptr, ##43156
1906c                 | LR__2101
1906c     00 B6 56 F2 | 	cmps	local09, #0 wc
19070     28 00 90 CD |  if_b	jmp	#LR__2102
19074     54 00 00 FF 
19078     94 64 06 F1 | 	add	objptr, ##43156
1907c     32 93 02 FB | 	rdlong	arg01, objptr
19080     54 00 00 FF 
19084     94 64 86 F1 | 	sub	objptr, ##43156
19088     9A 01 00 FF 
1908c     29 94 06 F6 | 	mov	arg02, ##@LR__6086
19090     9C BC B0 FD | 	call	#__system___string_cmp
19094     00 7A 0E F2 | 	cmp	result1, #0 wz
19098     0C FE 9F 5D |  if_ne	jmp	#LR__2095
1909c                 | LR__2102
1909c     00 B6 56 F2 | 	cmps	local09, #0 wc
190a0     04 FE 9F 3D |  if_ae	jmp	#LR__2094
190a4                 | ' if j<numpar then printerror(55,runheader(0))
190a4     59 B5 52 F2 | 	cmps	local08, local07 wc
190a8     52 00 00 CF 
190ac     70 64 06 C1 |  if_b	add	objptr, ##42096
190b0     32 95 02 CB |  if_b	rdlong	arg02, objptr
190b4     52 00 00 CF 
190b8     70 64 86 C1 |  if_b	sub	objptr, ##42096
190bc     37 92 06 C6 |  if_b	mov	arg01, #55
190c0     74 7F B0 CD |  if_b	call	#_printerror
190c4                 | ' 
190c4                 | ' for i=0 to numpar-1
190c4     00 B6 06 F6 | 	mov	local09, #0
190c8     59 C1 02 F6 | 	mov	local14, local07
190cc                 | LR__2103
190cc     60 B7 52 F2 | 	cmps	local09, local14 wc
190d0     E8 06 90 3D |  if_ae	jmp	#LR__2137
190d4                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
190d4     5B AF 02 F6 | 	mov	local05, local09
190d8     02 AE 66 F0 | 	shl	local05, #2
190dc     E7 B0 02 F6 | 	mov	local06, fp
190e0     2C B0 06 F1 | 	add	local06, #44
190e4     58 AF 02 F1 | 	add	local05, local06
190e8     57 93 02 FB | 	rdlong	arg01, local05
190ec     64 D9 BE FD | 	call	#_isnum
190f0     3D BF 02 F6 | 	mov	local13, result1
190f4     5B C3 02 F6 | 	mov	local15, local09
190f8     02 C2 66 F0 | 	shl	local15, #2
190fc     E7 C4 02 F6 | 	mov	local16, fp
19100     2C C4 06 F1 | 	add	local16, #44
19104     62 C3 02 F1 | 	add	local15, local16
19108     61 93 02 FB | 	rdlong	arg01, local15
1910c     30 DD BE FD | 	call	#_isint
19110     07 7A 66 F7 | 	signx	result1, #7
19114     3D BF 2A F5 | 	andn	local13, result1 wz
19118     54 00 00 5F 
1911c     C8 64 06 51 |  if_ne	add	objptr, ##43208
19120     32 3D 68 5C |  if_ne	wrlong	#30, objptr
19124     54 00 00 5F 
19128     C8 64 86 51 |  if_ne	sub	objptr, ##43208
1912c                 | '   if isint(args(i)) then r=result_int 
1912c     5B AD 02 F6 | 	mov	local04, local09
19130     02 AC 66 F0 | 	shl	local04, #2
19134     E7 AE 02 F6 | 	mov	local05, fp
19138     2C AE 06 F1 | 	add	local05, #44
1913c     57 AD 02 F1 | 	add	local04, local05
19140     56 93 02 FB | 	rdlong	arg01, local04
19144     F8 DC BE FD | 	call	#_isint
19148     00 7A 0E F2 | 	cmp	result1, #0 wz
1914c     54 00 00 5F 
19150     C8 64 06 51 |  if_ne	add	objptr, ##43208
19154     32 39 68 5C |  if_ne	wrlong	#28, objptr
19158     54 00 00 5F 
1915c     C8 64 86 51 |  if_ne	sub	objptr, ##43208
19160                 | '   if isdec(args(i)) then r=result_uint 
19160     5B AD 02 F6 | 	mov	local04, local09
19164     02 AC 66 F0 | 	shl	local04, #2
19168     E7 AE 02 F6 | 	mov	local05, fp
1916c     2C AE 06 F1 | 	add	local05, #44
19170     57 AD 02 F1 | 	add	local04, local05
19174     56 93 02 FB | 	rdlong	arg01, local04
19178     68 DF BE FD | 	call	#_isdec
1917c     00 7A 0E F2 | 	cmp	result1, #0 wz
19180     54 00 00 5F 
19184     C8 64 06 51 |  if_ne	add	objptr, ##43208
19188     32 3B 68 5C |  if_ne	wrlong	#29, objptr
1918c     54 00 00 5F 
19190     C8 64 86 51 |  if_ne	sub	objptr, ##43208
19194                 | '   if not isnum(args(i)) then 
19194     5B AF 02 F6 | 	mov	local05, local09
19198     02 AE 66 F0 | 	shl	local05, #2
1919c     E7 B0 02 F6 | 	mov	local06, fp
191a0     2C B0 06 F1 | 	add	local06, #44
191a4     58 AF 02 F1 | 	add	local05, local06
191a8     57 93 02 FB | 	rdlong	arg01, local05
191ac     A4 D8 BE FD | 	call	#_isnum
191b0     07 7A 66 F7 | 	signx	result1, #7
191b4     3D 7B 22 F6 | 	not	result1, result1
191b8     00 7A 0E F2 | 	cmp	result1, #0 wz
191bc     FC 00 90 AD |  if_e	jmp	#LR__2108
191c0     54 00 00 FF 
191c4     C8 64 06 F1 | 	add	objptr, ##43208
191c8     32 57 68 FC | 	wrlong	#43, objptr
191cc     54 00 00 FF 
191d0     C8 64 86 F1 | 	sub	objptr, ##43208
191d4     5B AD 02 F6 | 	mov	local04, local09
191d8     02 AC 66 F0 | 	shl	local04, #2
191dc     E7 AE 02 F6 | 	mov	local05, fp
191e0     2C AE 06 F1 | 	add	local05, #44
191e4     57 AD 02 F1 | 	add	local04, local05
191e8     56 93 02 FB | 	rdlong	arg01, local04
191ec     49 BD 02 F6 | 	mov	local12, arg01
191f0     D7 06 48 FB | 	callpa	#(@LR__2105-@LR__2104)>>2,fcache_load_ptr_
191f4                 | LR__2104
191f4     5E 7B CA FA | 	rdbyte	result1, local12 wz
191f8     01 BC 06 51 |  if_ne	add	local12, #1
191fc     F4 FF 9F 5D |  if_ne	jmp	#LR__2104
19200                 | LR__2105
19200     49 BD 82 F1 | 	sub	local12, arg01
19204     5E C7 02 F6 | 	mov	local17, local12
19208     54 00 00 FF 
1920c     50 64 06 F1 | 	add	objptr, ##43088
19210     32 93 02 FB | 	rdlong	arg01, objptr
19214     63 93 82 F1 | 	sub	arg01, local17
19218     04 92 86 F1 | 	sub	arg01, #4
1921c     03 92 26 F5 | 	andn	arg01, #3
19220     32 93 62 FC | 	wrlong	arg01, objptr
19224     54 00 00 FF 
19228     50 64 86 F1 | 	sub	objptr, ##43088
1922c     63 95 02 F6 | 	mov	arg02, local17
19230     A0 7F B0 FD | 	call	#_pslpoke
19234                 | '     pslpoke memtop,l
19234                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
19234     01 B4 06 F6 | 	mov	local08, #1
19238     63 C9 02 F6 | 	mov	local18, local17
1923c     01 C8 06 F1 | 	add	local18, #1
19240                 | LR__2106
19240     64 B5 52 F2 | 	cmps	local08, local18 wc
19244     60 00 90 3D |  if_ae	jmp	#LR__2107
19248     54 00 00 FF 
1924c     50 64 06 F1 | 	add	objptr, ##43088
19250     32 BF 02 FB | 	rdlong	local13, objptr
19254     54 00 00 FF 
19258     50 64 86 F1 | 	sub	objptr, ##43088
1925c     03 BE 06 F1 | 	add	local13, #3
19260     5A BF 02 F1 | 	add	local13, local08
19264     5B C3 02 F6 | 	mov	local15, local09
19268     02 C2 66 F0 | 	shl	local15, #2
1926c     E7 C4 02 F6 | 	mov	local16, fp
19270     2C C4 06 F1 | 	add	local16, #44
19274     62 C3 02 F1 | 	add	local15, local16
19278     61 93 02 FB | 	rdlong	arg01, local15
1927c     5A B1 02 F6 | 	mov	local06, local08
19280     01 C2 06 F6 | 	mov	local15, #1
19284     58 95 02 F6 | 	mov	arg02, local06
19288     01 96 06 F6 | 	mov	arg03, #1
1928c     38 D4 B0 FD | 	call	#__system__Mid_S
19290     3D AF 02 F6 | 	mov	local05, result1
19294     57 95 C2 FA | 	rdbyte	arg02, local05
19298     5F 93 02 F6 | 	mov	arg01, local13
1929c     C4 7F B0 FD | 	call	#_pspoke
192a0     01 B4 06 F1 | 	add	local08, #1
192a4     98 FF 9F FD | 	jmp	#LR__2106
192a8                 | LR__2107
192a8     54 00 00 FF 
192ac     50 64 06 F1 | 	add	objptr, ##43088
192b0     32 CB 02 FB | 	rdlong	local19, objptr
192b4     54 00 00 FF 
192b8     50 64 86 F1 | 	sub	objptr, ##43088
192bc                 | LR__2108
192bc     B0 43 BF FD | 	call	#_pop
192c0     3E CD 02 F6 | 	mov	local20, result2
192c4     3F AD 02 F6 | 	mov	local04, result3
192c8     3D A7 02 F6 | 	mov	local01, result1
192cc     66 A9 02 F6 | 	mov	local02, local20
192d0     56 AB 02 F6 | 	mov	local03, local04
192d4                 | '   t1=pop() 
192d4                 | '   if i>=numpar-j then
192d4     59 BF 02 F6 | 	mov	local13, local07
192d8     5A BF 82 F1 | 	sub	local13, local08
192dc     5F B7 52 F2 | 	cmps	local09, local13 wc
192e0     D0 04 90 CD |  if_b	jmp	#LR__2136
192e4     54 CF 02 F6 | 	mov	local21, local02
192e8                 | '     vartype=t1.result.twowords(1)
192e8                 | '     select case vartype
192e8     67 D1 0A F6 | 	mov	local22, local21 wz
192ec     64 00 90 AD |  if_e	jmp	#LR__2109
192f0     00 D1 0E F2 | 	cmp	local22, #256 wz
192f4     64 00 90 AD |  if_e	jmp	#LR__2110
192f8     01 D1 0E F2 | 	cmp	local22, #257 wz
192fc     64 00 90 AD |  if_e	jmp	#LR__2111
19300     02 D1 0E F2 | 	cmp	local22, #258 wz
19304     64 00 90 AD |  if_e	jmp	#LR__2112
19308     03 D1 0E F2 | 	cmp	local22, #259 wz
1930c     64 00 90 AD |  if_e	jmp	#LR__2113
19310     04 D1 0E F2 | 	cmp	local22, #260 wz
19314     64 00 90 AD |  if_e	jmp	#LR__2114
19318     05 D1 0E F2 | 	cmp	local22, #261 wz
1931c     64 00 90 AD |  if_e	jmp	#LR__2115
19320     06 D1 0E F2 | 	cmp	local22, #262 wz
19324     64 00 90 AD |  if_e	jmp	#LR__2116
19328     07 D1 0E F2 | 	cmp	local22, #263 wz
1932c     64 00 90 AD |  if_e	jmp	#LR__2117
19330     08 D1 0E F2 | 	cmp	local22, #264 wz
19334     64 00 90 AD |  if_e	jmp	#LR__2118
19338     09 D1 0E F2 | 	cmp	local22, #265 wz
1933c     64 00 90 AD |  if_e	jmp	#LR__2119
19340     0A D1 0E F2 | 	cmp	local22, #266 wz
19344     64 00 90 AD |  if_e	jmp	#LR__2120
19348     0B D1 0E F2 | 	cmp	local22, #267 wz
1934c     64 00 90 AD |  if_e	jmp	#LR__2121
19350     68 00 90 FD | 	jmp	#LR__2122
19354                 | LR__2109
19354     0C D2 06 F6 | 	mov	local23, #12
19358     64 00 90 FD | 	jmp	#LR__2123
1935c                 | LR__2110
1935c     0C D2 06 F6 | 	mov	local23, #12
19360     5C 00 90 FD | 	jmp	#LR__2123
19364                 | LR__2111
19364     01 D2 06 F6 | 	mov	local23, #1
19368     54 00 90 FD | 	jmp	#LR__2123
1936c                 | LR__2112
1936c     01 D2 06 F6 | 	mov	local23, #1
19370     4C 00 90 FD | 	jmp	#LR__2123
19374                 | LR__2113
19374     02 D2 06 F6 | 	mov	local23, #2
19378     44 00 90 FD | 	jmp	#LR__2123
1937c                 | LR__2114
1937c     02 D2 06 F6 | 	mov	local23, #2
19380     3C 00 90 FD | 	jmp	#LR__2123
19384                 | LR__2115
19384     04 D2 06 F6 | 	mov	local23, #4
19388     34 00 90 FD | 	jmp	#LR__2123
1938c                 | LR__2116
1938c     04 D2 06 F6 | 	mov	local23, #4
19390     2C 00 90 FD | 	jmp	#LR__2123
19394                 | LR__2117
19394     08 D2 06 F6 | 	mov	local23, #8
19398     24 00 90 FD | 	jmp	#LR__2123
1939c                 | LR__2118
1939c     08 D2 06 F6 | 	mov	local23, #8
193a0     1C 00 90 FD | 	jmp	#LR__2123
193a4                 | LR__2119
193a4     06 D2 06 F6 | 	mov	local23, #6
193a8     14 00 90 FD | 	jmp	#LR__2123
193ac                 | LR__2120
193ac     08 D2 06 F6 | 	mov	local23, #8
193b0     0C 00 90 FD | 	jmp	#LR__2123
193b4                 | LR__2121
193b4     05 D2 06 F6 | 	mov	local23, #5
193b8     04 00 90 FD | 	jmp	#LR__2123
193bc                 | LR__2122
193bc     0C D2 06 F6 | 	mov	local23, #12
193c0                 | LR__2123
193c0                 | '     if esize=12 andalso t1.result.uresult<$80000 then
193c0     0C D2 0E F2 | 	cmp	local23, #12 wz
193c4     34 01 90 5D |  if_ne	jmp	#LR__2127
193c8     00 04 00 FF 
193cc     00 A6 16 F2 | 	cmp	local01, ##524288 wc
193d0     28 01 90 3D |  if_ae	jmp	#LR__2127
193d4                 | '       if r=result_int then lpoke t1.result.uresult, val%(args(i))
193d4     54 00 00 FF 
193d8     C8 64 06 F1 | 	add	objptr, ##43208
193dc     32 BF 02 FB | 	rdlong	local13, objptr
193e0     54 00 00 FF 
193e4     C8 64 86 F1 | 	sub	objptr, ##43208
193e8     1C BE 0E F2 | 	cmp	local13, #28 wz
193ec     2C 00 90 5D |  if_ne	jmp	#LR__2124
193f0     5B AF 02 F6 | 	mov	local05, local09
193f4     02 AE 66 F0 | 	shl	local05, #2
193f8     E7 B0 02 F6 | 	mov	local06, fp
193fc     2C B0 06 F1 | 	add	local06, #44
19400     58 AF 02 F1 | 	add	local05, local06
19404     57 93 02 FB | 	rdlong	arg01, local05
19408     00 94 06 F6 | 	mov	arg02, #0
1940c     4C E6 B0 FD | 	call	#__system____builtin_atoi
19410     3D 95 02 F6 | 	mov	arg02, result1
19414     53 93 02 F6 | 	mov	arg01, local01
19418     49 95 62 FC | 	wrlong	arg02, arg01
1941c                 | LR__2124
1941c                 | '       if r=result_uint then lpoke t1.result.uresult, val%(args(i))
1941c     54 00 00 FF 
19420     C8 64 06 F1 | 	add	objptr, ##43208
19424     32 BF 02 FB | 	rdlong	local13, objptr
19428     54 00 00 FF 
1942c     C8 64 86 F1 | 	sub	objptr, ##43208
19430     1D BE 0E F2 | 	cmp	local13, #29 wz
19434     2C 00 90 5D |  if_ne	jmp	#LR__2125
19438     5B AF 02 F6 | 	mov	local05, local09
1943c     02 AE 66 F0 | 	shl	local05, #2
19440     E7 B0 02 F6 | 	mov	local06, fp
19444     2C B0 06 F1 | 	add	local06, #44
19448     58 AF 02 F1 | 	add	local05, local06
1944c     57 93 02 FB | 	rdlong	arg01, local05
19450     00 94 06 F6 | 	mov	arg02, #0
19454     04 E6 B0 FD | 	call	#__system____builtin_atoi
19458     3D 95 02 F6 | 	mov	arg02, result1
1945c     53 93 02 F6 | 	mov	arg01, local01
19460     49 95 62 FC | 	wrlong	arg02, arg01
19464                 | LR__2125
19464                 | '       if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
19464     54 00 00 FF 
19468     C8 64 06 F1 | 	add	objptr, ##43208
1946c     32 BF 02 FB | 	rdlong	local13, objptr
19470     54 00 00 FF 
19474     C8 64 86 F1 | 	sub	objptr, ##43208
19478     1E BE 0E F2 | 	cmp	local13, #30 wz
1947c     3C 00 90 5D |  if_ne	jmp	#LR__2126
19480     5B AD 02 F6 | 	mov	local04, local09
19484     02 AC 66 F0 | 	shl	local04, #2
19488     E7 AE 02 F6 | 	mov	local05, fp
1948c     2C AE 06 F1 | 	add	local05, #44
19490     57 AD 02 F1 | 	add	local04, local05
19494     56 93 02 FB | 	rdlong	arg01, local04
19498     58 E7 B0 FD | 	call	#__system____builtin_atof
1949c     28 CE 05 F1 | 	add	fp, #40
194a0     E7 7A 62 FC | 	wrlong	result1, fp
194a4     E7 92 02 F6 | 	mov	arg01, fp
194a8     28 CE 85 F1 | 	sub	fp, #40
194ac     49 7B 02 FB | 	rdlong	result1, arg01
194b0     3D 95 02 F6 | 	mov	arg02, result1
194b4     53 93 02 F6 | 	mov	arg01, local01
194b8     49 95 62 FC | 	wrlong	arg02, arg01
194bc                 | LR__2126
194bc                 | '       if r=result_string2 then lpoke t1.result.uresult,stringaddr
194bc     54 00 00 FF 
194c0     C8 64 06 F1 | 	add	objptr, ##43208
194c4     32 BF 02 FB | 	rdlong	local13, objptr
194c8     2B BE 0E F2 | 	cmp	local13, #43 wz
194cc     53 93 02 A6 |  if_e	mov	arg01, local01
194d0     65 95 02 A6 |  if_e	mov	arg02, local19
194d4     49 95 62 AC |  if_e	wrlong	arg02, arg01
194d8     53 BF 02 F6 | 	mov	local13, local01
194dc     08 BE 06 F1 | 	add	local13, #8
194e0     32 AD 02 FB | 	rdlong	local04, objptr
194e4     54 00 00 FF 
194e8     C8 64 86 F1 | 	sub	objptr, ##43208
194ec     56 CD 02 F6 | 	mov	local20, local04
194f0     5F 93 02 F6 | 	mov	arg01, local13
194f4     66 95 02 F6 | 	mov	arg02, local20
194f8     49 95 62 FC | 	wrlong	arg02, arg01
194fc                 | LR__2127
194fc                 | '     if esize=12 andalso t1.result.uresult>=$80000 then
194fc     0C D2 0E F2 | 	cmp	local23, #12 wz
19500     38 01 90 5D |  if_ne	jmp	#LR__2131
19504     00 04 00 FF 
19508     00 A6 16 F2 | 	cmp	local01, ##524288 wc
1950c     2C 01 90 CD |  if_b	jmp	#LR__2131
19510                 | '       if r=result_int then pslpoke t1.result.uresult, val%(args(i))
19510     54 00 00 FF 
19514     C8 64 06 F1 | 	add	objptr, ##43208
19518     32 BF 02 FB | 	rdlong	local13, objptr
1951c     54 00 00 FF 
19520     C8 64 86 F1 | 	sub	objptr, ##43208
19524     1C BE 0E F2 | 	cmp	local13, #28 wz
19528     2C 00 90 5D |  if_ne	jmp	#LR__2128
1952c     5B AF 02 F6 | 	mov	local05, local09
19530     02 AE 66 F0 | 	shl	local05, #2
19534     E7 B0 02 F6 | 	mov	local06, fp
19538     2C B0 06 F1 | 	add	local06, #44
1953c     58 AF 02 F1 | 	add	local05, local06
19540     57 93 02 FB | 	rdlong	arg01, local05
19544     00 94 06 F6 | 	mov	arg02, #0
19548     10 E5 B0 FD | 	call	#__system____builtin_atoi
1954c     3D 95 02 F6 | 	mov	arg02, result1
19550     53 93 02 F6 | 	mov	arg01, local01
19554     7C 7C B0 FD | 	call	#_pslpoke
19558                 | LR__2128
19558                 | '       if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
19558     54 00 00 FF 
1955c     C8 64 06 F1 | 	add	objptr, ##43208
19560     32 BF 02 FB | 	rdlong	local13, objptr
19564     54 00 00 FF 
19568     C8 64 86 F1 | 	sub	objptr, ##43208
1956c     1D BE 0E F2 | 	cmp	local13, #29 wz
19570     2C 00 90 5D |  if_ne	jmp	#LR__2129
19574     5B AF 02 F6 | 	mov	local05, local09
19578     02 AE 66 F0 | 	shl	local05, #2
1957c     E7 B0 02 F6 | 	mov	local06, fp
19580     2C B0 06 F1 | 	add	local06, #44
19584     58 AF 02 F1 | 	add	local05, local06
19588     57 93 02 FB | 	rdlong	arg01, local05
1958c     00 94 06 F6 | 	mov	arg02, #0
19590     C8 E4 B0 FD | 	call	#__system____builtin_atoi
19594     3D 95 02 F6 | 	mov	arg02, result1
19598     53 93 02 F6 | 	mov	arg01, local01
1959c     34 7C B0 FD | 	call	#_pslpoke
195a0                 | LR__2129
195a0                 | '       if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
195a0     54 00 00 FF 
195a4     C8 64 06 F1 | 	add	objptr, ##43208
195a8     32 BF 02 FB | 	rdlong	local13, objptr
195ac     54 00 00 FF 
195b0     C8 64 86 F1 | 	sub	objptr, ##43208
195b4     1E BE 0E F2 | 	cmp	local13, #30 wz
195b8     38 00 90 5D |  if_ne	jmp	#LR__2130
195bc     5B AD 02 F6 | 	mov	local04, local09
195c0     02 AC 66 F0 | 	shl	local04, #2
195c4     E7 AE 02 F6 | 	mov	local05, fp
195c8     2C AE 06 F1 | 	add	local05, #44
195cc     57 AD 02 F1 | 	add	local04, local05
195d0     56 93 02 FB | 	rdlong	arg01, local04
195d4     1C E6 B0 FD | 	call	#__system____builtin_atof
195d8     28 CE 05 F1 | 	add	fp, #40
195dc     E7 7A 62 FC | 	wrlong	result1, fp
195e0     E7 92 02 F6 | 	mov	arg01, fp
195e4     28 CE 85 F1 | 	sub	fp, #40
195e8     49 95 02 FB | 	rdlong	arg02, arg01
195ec     53 93 02 F6 | 	mov	arg01, local01
195f0     E0 7B B0 FD | 	call	#_pslpoke
195f4                 | LR__2130
195f4                 | '       if r=result_string2 then pslpoke t1.result.uresult,stringaddr
195f4     54 00 00 FF 
195f8     C8 64 06 F1 | 	add	objptr, ##43208
195fc     32 BF 02 FB | 	rdlong	local13, objptr
19600     54 00 00 FF 
19604     C8 64 86 F1 | 	sub	objptr, ##43208
19608     2B BE 0E F2 | 	cmp	local13, #43 wz
1960c     53 93 02 A6 |  if_e	mov	arg01, local01
19610     65 95 02 A6 |  if_e	mov	arg02, local19
19614     BC 7B B0 AD |  if_e	call	#_pslpoke
19618     53 93 02 F6 | 	mov	arg01, local01
1961c     08 92 06 F1 | 	add	arg01, #8
19620     54 00 00 FF 
19624     C8 64 06 F1 | 	add	objptr, ##43208
19628     32 CD 02 FB | 	rdlong	local20, objptr
1962c     54 00 00 FF 
19630     C8 64 86 F1 | 	sub	objptr, ##43208
19634     66 95 02 F6 | 	mov	arg02, local20
19638     98 7B B0 FD | 	call	#_pslpoke
1963c                 | LR__2131
1963c                 | '     if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
1963c     05 D2 0E F2 | 	cmp	local23, #5 wz
19640     54 00 00 AF 
19644     C8 64 06 A1 |  if_e	add	objptr, ##43208
19648     32 CD 02 AB |  if_e	rdlong	local20, objptr
1964c     54 00 00 AF 
19650     C8 64 86 A1 |  if_e	sub	objptr, ##43208
19654     2B CC 0E A2 |  if_e	cmp	local20, #43 wz
19658     65 CD 02 A6 |  if_e	mov	local20, local19
1965c     53 93 02 A6 |  if_e	mov	arg01, local01
19660     66 95 02 A6 |  if_e	mov	arg02, local20
19664     6C 7B B0 AD |  if_e	call	#_pslpoke
19668                 | '     if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
19668     04 D2 0E F2 | 	cmp	local23, #4 wz
1966c     48 00 90 5D |  if_ne	jmp	#LR__2132
19670     54 00 00 FF 
19674     C8 64 06 F1 | 	add	objptr, ##43208
19678     32 CD 02 FB | 	rdlong	local20, objptr
1967c     54 00 00 FF 
19680     C8 64 86 F1 | 	sub	objptr, ##43208
19684     2B CC 0E F2 | 	cmp	local20, #43 wz
19688     2C 00 90 AD |  if_e	jmp	#LR__2132
1968c     5B AF 02 F6 | 	mov	local05, local09
19690     02 AE 66 F0 | 	shl	local05, #2
19694     E7 B0 02 F6 | 	mov	local06, fp
19698     2C B0 06 F1 | 	add	local06, #44
1969c     58 AF 02 F1 | 	add	local05, local06
196a0     57 93 02 FB | 	rdlong	arg01, local05
196a4     00 94 06 F6 | 	mov	arg02, #0
196a8     B0 E3 B0 FD | 	call	#__system____builtin_atoi
196ac     3D 95 02 F6 | 	mov	arg02, result1
196b0     53 93 02 F6 | 	mov	arg01, local01
196b4     1C 7B B0 FD | 	call	#_pslpoke
196b8                 | LR__2132
196b8                 | '     if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
196b8     02 D2 0E F2 | 	cmp	local23, #2 wz
196bc     48 00 90 5D |  if_ne	jmp	#LR__2133
196c0     54 00 00 FF 
196c4     C8 64 06 F1 | 	add	objptr, ##43208
196c8     32 CD 02 FB | 	rdlong	local20, objptr
196cc     54 00 00 FF 
196d0     C8 64 86 F1 | 	sub	objptr, ##43208
196d4     2B CC 0E F2 | 	cmp	local20, #43 wz
196d8     2C 00 90 AD |  if_e	jmp	#LR__2133
196dc     5B AF 02 F6 | 	mov	local05, local09
196e0     02 AE 66 F0 | 	shl	local05, #2
196e4     E7 B0 02 F6 | 	mov	local06, fp
196e8     2C B0 06 F1 | 	add	local06, #44
196ec     58 AF 02 F1 | 	add	local05, local06
196f0     57 93 02 FB | 	rdlong	arg01, local05
196f4     00 94 06 F6 | 	mov	arg02, #0
196f8     60 E3 B0 FD | 	call	#__system____builtin_atoi
196fc     3D 95 02 F6 | 	mov	arg02, result1
19700     53 93 02 F6 | 	mov	arg01, local01
19704     14 7B B0 FD | 	call	#_psdpoke
19708                 | LR__2133
19708                 | '     if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
19708     01 D2 0E F2 | 	cmp	local23, #1 wz
1970c     48 00 90 5D |  if_ne	jmp	#LR__2134
19710     54 00 00 FF 
19714     C8 64 06 F1 | 	add	objptr, ##43208
19718     32 CD 02 FB | 	rdlong	local20, objptr
1971c     54 00 00 FF 
19720     C8 64 86 F1 | 	sub	objptr, ##43208
19724     2B CC 0E F2 | 	cmp	local20, #43 wz
19728     2C 00 90 AD |  if_e	jmp	#LR__2134
1972c     5B AF 02 F6 | 	mov	local05, local09
19730     02 AE 66 F0 | 	shl	local05, #2
19734     E7 B0 02 F6 | 	mov	local06, fp
19738     2C B0 06 F1 | 	add	local06, #44
1973c     58 AF 02 F1 | 	add	local05, local06
19740     57 93 02 FB | 	rdlong	arg01, local05
19744     00 94 06 F6 | 	mov	arg02, #0
19748     10 E3 B0 FD | 	call	#__system____builtin_atoi
1974c     3D 95 02 F6 | 	mov	arg02, result1
19750     53 93 02 F6 | 	mov	arg01, local01
19754     0C 7B B0 FD | 	call	#_pspoke
19758                 | LR__2134
19758                 | '     if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
19758     06 D2 0E F2 | 	cmp	local23, #6 wz
1975c     54 00 90 5D |  if_ne	jmp	#LR__2135
19760     54 00 00 FF 
19764     C8 64 06 F1 | 	add	objptr, ##43208
19768     32 CD 02 FB | 	rdlong	local20, objptr
1976c     54 00 00 FF 
19770     C8 64 86 F1 | 	sub	objptr, ##43208
19774     2B CC 0E F2 | 	cmp	local20, #43 wz
19778     38 00 90 AD |  if_e	jmp	#LR__2135
1977c     5B AD 02 F6 | 	mov	local04, local09
19780     02 AC 66 F0 | 	shl	local04, #2
19784     E7 AE 02 F6 | 	mov	local05, fp
19788     2C AE 06 F1 | 	add	local05, #44
1978c     57 AD 02 F1 | 	add	local04, local05
19790     56 93 02 FB | 	rdlong	arg01, local04
19794     5C E4 B0 FD | 	call	#__system____builtin_atof
19798     28 CE 05 F1 | 	add	fp, #40
1979c     E7 7A 62 FC | 	wrlong	result1, fp
197a0     E7 92 02 F6 | 	mov	arg01, fp
197a4     28 CE 85 F1 | 	sub	fp, #40
197a8     49 95 02 FB | 	rdlong	arg02, arg01
197ac     53 93 02 F6 | 	mov	arg01, local01
197b0     20 7A B0 FD | 	call	#_pslpoke
197b4                 | LR__2135
197b4                 | LR__2136
197b4     01 B6 06 F1 | 	add	local09, #1
197b8     10 F9 9F FD | 	jmp	#LR__2103
197bc                 | LR__2137
197bc                 | LR__2138
197bc     E7 F0 03 F6 | 	mov	ptra, fp
197c0     F2 00 A0 FD | 	call	#popregs_
197c4                 | _do_read_ret
197c4     2D 00 64 FD | 	ret
197c8                 | 
197c8                 | ' 
197c8                 | ' '------------------- release
197c8                 | ' 
197c8                 | ' sub do_release
197c8                 | _do_release
197c8     00 CA 05 F6 | 	mov	COUNT_, #0
197cc     E8 00 A0 FD | 	call	#pushregs_
197d0     10 F0 07 F1 | 	add	ptra, #16
197d4     98 3E BF FD | 	call	#_pop
197d8     3F 95 02 F6 | 	mov	arg02, result3
197dc     E7 7A 62 FC | 	wrlong	result1, fp
197e0     04 CE 05 F1 | 	add	fp, #4
197e4     E7 7C 62 FC | 	wrlong	result2, fp
197e8     04 CE 05 F1 | 	add	fp, #4
197ec     E7 94 62 FC | 	wrlong	arg02, fp
197f0     08 CE 85 F1 | 	sub	fp, #8
197f4     E7 92 02 F6 | 	mov	arg01, fp
197f8     50 40 BF FD | 	call	#_converttoint
197fc                 | ' 
197fc                 | ' t1=pop()
197fc                 | ' channel=converttoint(t1)
197fc                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255  
197fc     00 7A 56 F2 | 	cmps	result1, #0 wc
19800     2C 00 90 CD |  if_b	jmp	#LR__2140
19804     08 7A 56 F2 | 	cmps	result1, #8 wc
19808     24 00 90 3D |  if_ae	jmp	#LR__2140
1980c     38 00 00 FF 
19810     90 65 06 F1 | 	add	objptr, ##29072
19814     32 93 02 FB | 	rdlong	arg01, objptr
19818     38 00 00 FF 
1981c     90 65 86 F1 | 	sub	objptr, ##29072
19820     06 7A 66 F0 | 	shl	result1, #6
19824     3D 93 02 F1 | 	add	arg01, result1
19828     2C 92 06 F1 | 	add	arg01, #44
1982c     49 FF 69 FC | 	wrlong	#255, arg01
19830                 | LR__2140
19830     E7 F0 03 F6 | 	mov	ptra, fp
19834     F2 00 A0 FD | 	call	#popregs_
19838                 | _do_release_ret
19838     2D 00 64 FD | 	ret
1983c                 | 
1983c                 | ' 
1983c                 | ' '------------------- restore
1983c                 | ' 
1983c                 | ' sub do_restore()
1983c                 | _do_restore
1983c     4C 00 00 FF 
19840     08 64 06 F1 | 	add	objptr, ##38920
19844     32 81 02 FB | 	rdlong	_var01, objptr
19848     06 00 00 FF 
1984c     A4 64 06 F1 | 	add	objptr, ##3236
19850     32 81 62 FC | 	wrlong	_var01, objptr
19854     9A 01 00 FF 
19858     2A 80 06 F6 | 	mov	_var01, ##@LR__6087
1985c     01 00 00 FF 
19860     E8 65 06 F1 | 	add	objptr, ##1000
19864     32 81 62 FC | 	wrlong	_var01, objptr
19868     54 00 00 FF 
1986c     94 64 86 F1 | 	sub	objptr, ##43156
19870                 | _do_restore_ret
19870     2D 00 64 FD | 	ret
19874                 | 
19874                 | ' 
19874                 | ' '------------------- restorepalette
19874                 | ' 
19874                 | ' sub do_restorepalette()
19874                 | _do_restorepalette
19874     D4 81 B0 FD | 	call	#_hg010b_spin2_restorepalette
19878                 | _do_restorepalette_ret
19878     2D 00 64 FD | 	ret
1987c                 | 
1987c                 | ' '------------------- return
1987c                 | ' 
1987c                 | ' sub do_return()
1987c                 | _do_return
1987c                 | ' if gosubtop>0 then
1987c     52 00 00 FF 
19880     B4 64 06 F1 | 	add	objptr, ##42164
19884     32 81 02 FB | 	rdlong	_var01, objptr
19888     52 00 00 FF 
1988c     B4 64 86 F1 | 	sub	objptr, ##42164
19890     01 80 56 F2 | 	cmps	_var01, #1 wc
19894     8C 00 90 CD |  if_b	jmp	#LR__2150
19898     52 00 00 FF 
1989c     B4 64 06 F1 | 	add	objptr, ##42164
198a0     32 81 02 FB | 	rdlong	_var01, objptr
198a4     03 80 66 F0 | 	shl	_var01, #3
198a8     03 00 00 FF 
198ac     88 65 86 F1 | 	sub	objptr, ##1928
198b0     32 81 02 F1 | 	add	_var01, objptr
198b4     40 81 02 FB | 	rdlong	_var01, _var01
198b8     03 00 00 FF 
198bc     0C 65 06 F1 | 	add	objptr, ##1804
198c0     32 81 62 FC | 	wrlong	_var01, objptr
198c4     7C 64 06 F1 | 	add	objptr, #124
198c8     32 81 02 FB | 	rdlong	_var01, objptr
198cc     03 80 66 F0 | 	shl	_var01, #3
198d0     03 00 00 FF 
198d4     88 65 86 F1 | 	sub	objptr, ##1928
198d8     32 81 02 F1 | 	add	_var01, objptr
198dc     04 80 06 F1 | 	add	_var01, #4
198e0     40 81 02 FB | 	rdlong	_var01, _var01
198e4     03 00 00 FF 
198e8     10 65 06 F1 | 	add	objptr, ##1808
198ec     32 81 62 FC | 	wrlong	_var01, objptr
198f0     06 00 00 FF 
198f4     40 64 86 F1 | 	sub	objptr, ##3136
198f8     32 81 02 FB | 	rdlong	_var01, objptr
198fc     01 80 86 F1 | 	sub	_var01, #1
19900     04 64 06 F1 | 	add	objptr, #4
19904     32 81 62 FC | 	wrlong	_var01, objptr
19908     06 00 00 FF 
1990c     B4 64 06 F1 | 	add	objptr, ##3252
19910     32 81 02 FB | 	rdlong	_var01, objptr
19914     01 80 86 F1 | 	sub	_var01, #1
19918     32 81 62 FC | 	wrlong	_var01, objptr
1991c     52 00 00 FF 
19920     B4 64 86 F1 | 	sub	objptr, ##42164
19924                 | LR__2150
19924                 | _do_return_ret
19924     2D 00 64 FD | 	ret
19928                 | 
19928                 | ' 
19928                 | ' '------------------- right$
19928                 | ' 
19928                 | ' sub do_right
19928                 | _do_right
19928     01 CA 05 F6 | 	mov	COUNT_, #1
1992c     E8 00 A0 FD | 	call	#pushregs_
19930     14 F0 07 F1 | 	add	ptra, #20
19934     4C 00 00 FF 
19938     00 64 06 F1 | 	add	objptr, ##38912
1993c     32 97 02 FB | 	rdlong	arg03, objptr
19940     4B 95 02 F6 | 	mov	arg02, arg03
19944     01 94 66 F0 | 	shl	arg02, #1
19948     4B 95 02 F1 | 	add	arg02, arg03
1994c     02 94 66 F0 | 	shl	arg02, #2
19950     03 00 00 FF 
19954     04 64 86 F1 | 	sub	objptr, ##1540
19958     32 95 02 F1 | 	add	arg02, objptr
1995c     4A 97 02 FB | 	rdlong	arg03, arg02
19960                 | ' 
19960                 | ' numpar=compiledline(lineptr_e).result.uresult
19960                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
19960     02 96 0E F2 | 	cmp	arg03, #2 wz
19964     48 00 00 FF 
19968     FC 65 86 F1 | 	sub	objptr, ##37372
1996c     40 00 90 AD |  if_e	jmp	#LR__2160
19970     00 92 06 F6 | 	mov	arg01, #0
19974     14 09 B1 FD | 	call	#__system___getiolock_0622
19978     3D 93 02 F6 | 	mov	arg01, result1
1997c     88 B3 B0 FD | 	call	#__system___lockmem
19980     9A 01 00 FF 
19984     2B 94 06 F6 | 	mov	arg02, ##@LR__6088
19988     00 92 06 F6 | 	mov	arg01, #0
1998c     00 96 06 F6 | 	mov	arg03, #0
19990     68 C0 B0 FD | 	call	#__system___basic_print_string
19994     00 92 06 F6 | 	mov	arg01, #0
19998     F0 08 B1 FD | 	call	#__system___getiolock_0622
1999c     3D 01 68 FC | 	wrlong	#0, result1
199a0     27 92 06 F6 | 	mov	arg01, #39
199a4     00 94 06 F6 | 	mov	arg02, #0
199a8     8C 76 B0 FD | 	call	#_printerror
199ac     D8 00 90 FD | 	jmp	#LR__2163
199b0                 | LR__2160
199b0     BC 3C BF FD | 	call	#_pop
199b4     3F 97 02 F6 | 	mov	arg03, result3
199b8     E7 7A 62 FC | 	wrlong	result1, fp
199bc     04 CE 05 F1 | 	add	fp, #4
199c0     E7 7C 62 FC | 	wrlong	result2, fp
199c4     04 CE 05 F1 | 	add	fp, #4
199c8     E7 96 62 FC | 	wrlong	arg03, fp
199cc     08 CE 85 F1 | 	sub	fp, #8
199d0     E7 92 02 F6 | 	mov	arg01, fp
199d4     74 3E BF FD | 	call	#_converttoint
199d8     3D A7 02 F6 | 	mov	local01, result1
199dc     90 3C BF FD | 	call	#_pop
199e0     3F 97 02 F6 | 	mov	arg03, result3
199e4     E7 7A 62 FC | 	wrlong	result1, fp
199e8     04 CE 05 F1 | 	add	fp, #4
199ec     E7 7C 62 FC | 	wrlong	result2, fp
199f0     04 CE 05 F1 | 	add	fp, #4
199f4     E7 96 62 FC | 	wrlong	arg03, fp
199f8                 | ' t1=pop() : arg=converttoint(t1)
199f8                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
199f8     08 CE 85 F1 | 	sub	fp, #8
199fc     2B 96 0E F2 | 	cmp	arg03, #43 wz
19a00     18 00 90 5D |  if_ne	jmp	#LR__2161
19a04     E7 92 02 FB | 	rdlong	arg01, fp
19a08     D4 3D BF FD | 	call	#_convertstring
19a0c     E7 7A 62 FC | 	wrlong	result1, fp
19a10     08 CE 05 F1 | 	add	fp, #8
19a14     E7 3E 68 FC | 	wrlong	#31, fp
19a18     08 CE 85 F1 | 	sub	fp, #8
19a1c                 | LR__2161
19a1c                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
19a1c     08 CE 05 F1 | 	add	fp, #8
19a20     E7 96 02 FB | 	rdlong	arg03, fp
19a24     08 CE 85 F1 | 	sub	fp, #8
19a28     1F 96 0E F2 | 	cmp	arg03, #31 wz
19a2c     40 00 90 AD |  if_e	jmp	#LR__2162
19a30     00 92 06 F6 | 	mov	arg01, #0
19a34     54 08 B1 FD | 	call	#__system___getiolock_0622
19a38     3D 93 02 F6 | 	mov	arg01, result1
19a3c     C8 B2 B0 FD | 	call	#__system___lockmem
19a40     9A 01 00 FF 
19a44     34 94 06 F6 | 	mov	arg02, ##@LR__6089
19a48     00 92 06 F6 | 	mov	arg01, #0
19a4c     00 96 06 F6 | 	mov	arg03, #0
19a50     A8 BF B0 FD | 	call	#__system___basic_print_string
19a54     00 92 06 F6 | 	mov	arg01, #0
19a58     30 08 B1 FD | 	call	#__system___getiolock_0622
19a5c     3D 01 68 FC | 	wrlong	#0, result1
19a60     0F 92 06 F6 | 	mov	arg01, #15
19a64     00 94 06 F6 | 	mov	arg02, #0
19a68     CC 75 B0 FD | 	call	#_printerror
19a6c     18 00 90 FD | 	jmp	#LR__2163
19a70                 | LR__2162
19a70     E7 92 02 FB | 	rdlong	arg01, fp
19a74     53 95 02 F6 | 	mov	arg02, local01
19a78     BC CB B0 FD | 	call	#__system__Right_S
19a7c     E7 7A 62 FC | 	wrlong	result1, fp
19a80     E7 92 02 F6 | 	mov	arg01, fp
19a84     78 3C BF FD | 	call	#_push
19a88                 | LR__2163
19a88     E7 F0 03 F6 | 	mov	ptra, fp
19a8c     F2 00 A0 FD | 	call	#popregs_
19a90                 | _do_right_ret
19a90     2D 00 64 FD | 	ret
19a94                 | 
19a94                 | ' 
19a94                 | ' '------------------- rnd
19a94                 | ' 
19a94                 | ' sub do_rnd
19a94                 | _do_rnd
19a94     02 CA 05 F6 | 	mov	COUNT_, #2
19a98     E8 00 A0 FD | 	call	#pushregs_
19a9c     10 F0 07 F1 | 	add	ptra, #16
19aa0     4C 00 00 FF 
19aa4     00 64 06 F1 | 	add	objptr, ##38912
19aa8     32 A7 02 FB | 	rdlong	local01, objptr
19aac     53 97 02 F6 | 	mov	arg03, local01
19ab0     01 96 66 F0 | 	shl	arg03, #1
19ab4     53 97 02 F1 | 	add	arg03, local01
19ab8     02 96 66 F0 | 	shl	arg03, #2
19abc     03 00 00 FF 
19ac0     04 64 86 F1 | 	sub	objptr, ##1540
19ac4     32 97 02 F1 | 	add	arg03, objptr
19ac8     4B A9 02 FB | 	rdlong	local02, arg03
19acc                 | ' 
19acc                 | ' numpar=compiledline(lineptr_e).result.uresult
19acc                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
19acc     02 A8 16 F2 | 	cmp	local02, #2 wc
19ad0     48 00 00 FF 
19ad4     FC 65 86 F1 | 	sub	objptr, ##37372
19ad8     40 00 90 CD |  if_b	jmp	#LR__2170
19adc     00 92 06 F6 | 	mov	arg01, #0
19ae0     A8 07 B1 FD | 	call	#__system___getiolock_0622
19ae4     3D 93 02 F6 | 	mov	arg01, result1
19ae8     1C B2 B0 FD | 	call	#__system___lockmem
19aec     9A 01 00 FF 
19af0     3D 94 06 F6 | 	mov	arg02, ##@LR__6090
19af4     00 92 06 F6 | 	mov	arg01, #0
19af8     00 96 06 F6 | 	mov	arg03, #0
19afc     FC BE B0 FD | 	call	#__system___basic_print_string
19b00     00 92 06 F6 | 	mov	arg01, #0
19b04     84 07 B1 FD | 	call	#__system___getiolock_0622
19b08     3D 01 68 FC | 	wrlong	#0, result1
19b0c     27 92 06 F6 | 	mov	arg01, #39
19b10     00 94 06 F6 | 	mov	arg02, #0
19b14     20 75 B0 FD | 	call	#_printerror
19b18     28 01 90 FD | 	jmp	#LR__2177
19b1c                 | LR__2170
19b1c                 | ' if numpar=0 then
19b1c     00 A8 0E F2 | 	cmp	local02, #0 wz
19b20     20 00 90 5D |  if_ne	jmp	#LR__2171
19b24     08 CE 05 F1 | 	add	fp, #8
19b28     E7 3A 68 FC | 	wrlong	#29, fp
19b2c     08 CE 85 F1 | 	sub	fp, #8
19b30     1B 7A 62 FD | 	getrnd	result1
19b34     E7 7A 62 FC | 	wrlong	result1, fp
19b38     E7 92 02 F6 | 	mov	arg01, fp
19b3c     C0 3B BF FD | 	call	#_push
19b40     00 01 90 FD | 	jmp	#LR__2176
19b44                 | LR__2171
19b44     28 3B BF FD | 	call	#_pop
19b48     E7 7A 62 FC | 	wrlong	result1, fp
19b4c     04 CE 05 F1 | 	add	fp, #4
19b50     E7 7C 62 FC | 	wrlong	result2, fp
19b54     04 CE 05 F1 | 	add	fp, #4
19b58     E7 7E 62 FC | 	wrlong	result3, fp
19b5c                 | '   t1=pop()
19b5c                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
19b5c     08 CE 85 F1 | 	sub	fp, #8
19b60     1C 7E 0E F2 | 	cmp	result3, #28 wz
19b64     08 CE 05 51 |  if_ne	add	fp, #8
19b68     E7 A6 02 5B |  if_ne	rdlong	local01, fp
19b6c     08 CE 85 51 |  if_ne	sub	fp, #8
19b70     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
19b74     2C 00 90 5D |  if_ne	jmp	#LR__2172
19b78     1B 7A 62 FD | 	getrnd	result1
19b7c     E7 A6 02 FB | 	rdlong	local01, fp
19b80     53 7B 12 FD | 	qdiv	result1, local01
19b84     E7 92 02 F6 | 	mov	arg01, fp
19b88     19 A8 62 FD | 	getqy	local02
19b8c     E7 A8 62 FC | 	wrlong	local02, fp
19b90     08 CE 05 F1 | 	add	fp, #8
19b94     E7 3A 68 FC | 	wrlong	#29, fp
19b98     08 CE 85 F1 | 	sub	fp, #8
19b9c     60 3B BF FD | 	call	#_push
19ba0     A0 00 90 FD | 	jmp	#LR__2175
19ba4                 | LR__2172
19ba4     08 CE 05 F1 | 	add	fp, #8
19ba8     E7 A8 02 FB | 	rdlong	local02, fp
19bac     08 CE 85 F1 | 	sub	fp, #8
19bb0     1E A8 0E F2 | 	cmp	local02, #30 wz
19bb4     48 00 90 5D |  if_ne	jmp	#LR__2173
19bb8     E7 92 02 FB | 	rdlong	arg01, fp
19bbc     00 C0 24 FF 
19bc0     00 94 06 F6 | 	mov	arg02, ##1233125376
19bc4     14 DA B0 FD | 	call	#__system___float_div
19bc8     3D A9 02 F6 | 	mov	local02, result1
19bcc     1B 92 62 FD | 	getrnd	arg01
19bd0     74 93 06 F4 | 	bitl	arg01, #372
19bd4     FC D3 B0 FD | 	call	#__system___float_fromuns
19bd8     3D 95 02 F6 | 	mov	arg02, result1
19bdc     54 93 02 F6 | 	mov	arg01, local02
19be0     F4 D7 B0 FD | 	call	#__system___float_mul
19be4     E7 7A 62 FC | 	wrlong	result1, fp
19be8     08 CE 05 F1 | 	add	fp, #8
19bec     E7 3C 68 FC | 	wrlong	#30, fp
19bf0     08 CE 85 F1 | 	sub	fp, #8
19bf4     E7 92 02 F6 | 	mov	arg01, fp
19bf8     04 3B BF FD | 	call	#_push
19bfc     44 00 90 FD | 	jmp	#LR__2174
19c00                 | LR__2173
19c00                 | '     print "rnd: "; : printerror(40) 
19c00     00 92 06 F6 | 	mov	arg01, #0
19c04     84 06 B1 FD | 	call	#__system___getiolock_0622
19c08     3D 93 02 F6 | 	mov	arg01, result1
19c0c     F8 B0 B0 FD | 	call	#__system___lockmem
19c10     9A 01 00 FF 
19c14     43 94 06 F6 | 	mov	arg02, ##@LR__6091
19c18     00 92 06 F6 | 	mov	arg01, #0
19c1c     00 96 06 F6 | 	mov	arg03, #0
19c20     D8 BD B0 FD | 	call	#__system___basic_print_string
19c24     00 92 06 F6 | 	mov	arg01, #0
19c28     60 06 B1 FD | 	call	#__system___getiolock_0622
19c2c     3D 01 68 FC | 	wrlong	#0, result1
19c30     28 92 06 F6 | 	mov	arg01, #40
19c34     00 94 06 F6 | 	mov	arg02, #0
19c38     FC 73 B0 FD | 	call	#_printerror
19c3c     E7 92 02 F6 | 	mov	arg01, fp
19c40     BC 3A BF FD | 	call	#_push
19c44                 | LR__2174
19c44                 | LR__2175
19c44                 | LR__2176
19c44                 | LR__2177
19c44     E7 F0 03 F6 | 	mov	ptra, fp
19c48     F2 00 A0 FD | 	call	#popregs_
19c4c                 | _do_rnd_ret
19c4c     2D 00 64 FD | 	ret
19c50                 | 
19c50                 | ' 
19c50                 | ' '-------------------- round
19c50                 | ' 
19c50                 | ' sub do_round
19c50                 | _do_round
19c50     00 CA 05 F6 | 	mov	COUNT_, #0
19c54     E8 00 A0 FD | 	call	#pushregs_
19c58     0C F0 07 F1 | 	add	ptra, #12
19c5c     10 3A BF FD | 	call	#_pop
19c60     E7 7A 62 FC | 	wrlong	result1, fp
19c64     04 CE 05 F1 | 	add	fp, #4
19c68     E7 7C 62 FC | 	wrlong	result2, fp
19c6c     04 CE 05 F1 | 	add	fp, #4
19c70     E7 7E 62 FC | 	wrlong	result3, fp
19c74     08 CE 85 F1 | 	sub	fp, #8
19c78     E7 92 02 F6 | 	mov	arg01, fp
19c7c     CC 3B BF FD | 	call	#_converttoint
19c80     E7 7A 62 FC | 	wrlong	result1, fp
19c84     08 CE 05 F1 | 	add	fp, #8
19c88     E7 38 68 FC | 	wrlong	#28, fp
19c8c     08 CE 85 F1 | 	sub	fp, #8
19c90     E7 92 02 F6 | 	mov	arg01, fp
19c94     68 3A BF FD | 	call	#_push
19c98     E7 F0 03 F6 | 	mov	ptra, fp
19c9c     F2 00 A0 FD | 	call	#popregs_
19ca0                 | _do_round_ret
19ca0     2D 00 64 FD | 	ret
19ca4                 | 
19ca4                 | ' 
19ca4                 | ' '-------------------- rqpin
19ca4                 | ' 
19ca4                 | ' sub do_rqpin
19ca4                 | _do_rqpin
19ca4     00 CA 05 F6 | 	mov	COUNT_, #0
19ca8     E8 00 A0 FD | 	call	#pushregs_
19cac     0C F0 07 F1 | 	add	ptra, #12
19cb0     BC 39 BF FD | 	call	#_pop
19cb4     E7 7A 62 FC | 	wrlong	result1, fp
19cb8     04 CE 05 F1 | 	add	fp, #4
19cbc     E7 7C 62 FC | 	wrlong	result2, fp
19cc0     04 CE 05 F1 | 	add	fp, #4
19cc4     E7 7E 62 FC | 	wrlong	result3, fp
19cc8     08 CE 85 F1 | 	sub	fp, #8
19ccc     E7 92 02 F6 | 	mov	arg01, fp
19cd0     78 3B BF FD | 	call	#_converttoint
19cd4     3D 93 02 F6 | 	mov	arg01, result1
19cd8     00 7A 06 F6 | 	mov	result1, #0
19cdc     49 7B 82 FA | 	rqpin	result1, arg01
19ce0     54 00 00 FF 
19ce4     C8 64 06 F1 | 	add	objptr, ##43208
19ce8     32 7B 62 FC | 	wrlong	result1, objptr
19cec     54 00 00 FF 
19cf0     C8 64 86 F1 | 	sub	objptr, ##43208
19cf4     08 CE 05 F1 | 	add	fp, #8
19cf8     E7 3A 68 FC | 	wrlong	#29, fp
19cfc     08 CE 85 F1 | 	sub	fp, #8
19d00     E7 08 68 FC | 	wrlong	#4, fp
19d04     E7 92 02 F6 | 	mov	arg01, fp
19d08     F4 39 BF FD | 	call	#_push
19d0c     E7 F0 03 F6 | 	mov	ptra, fp
19d10     F2 00 A0 FD | 	call	#popregs_
19d14                 | _do_rqpin_ret
19d14     2D 00 64 FD | 	ret
19d18                 | 
19d18                 | ' 
19d18                 | ' ' ------------------ run
19d18                 | ' 
19d18                 | ' sub do_run
19d18                 | _do_run
19d18     04 CA 05 F6 | 	mov	COUNT_, #4
19d1c     E8 00 A0 FD | 	call	#pushregs_
19d20     4C 00 00 FF 
19d24     00 64 06 F1 | 	add	objptr, ##38912
19d28     32 A7 02 FB | 	rdlong	local01, objptr
19d2c     06 00 00 FF 
19d30     38 64 06 F1 | 	add	objptr, ##3128
19d34     32 A9 02 FB | 	rdlong	local02, objptr
19d38     04 64 06 F1 | 	add	objptr, #4
19d3c     32 AB 02 FB | 	rdlong	local03, objptr
19d40     53 99 02 F6 | 	mov	arg04, local01
19d44     4C 97 02 F6 | 	mov	arg03, arg04
19d48     01 96 66 F0 | 	shl	arg03, #1
19d4c     4C 97 02 F1 | 	add	arg03, arg04
19d50     02 96 66 F0 | 	shl	arg03, #2
19d54     09 00 00 FF 
19d58     40 64 86 F1 | 	sub	objptr, ##4672
19d5c     32 97 02 F1 | 	add	arg03, objptr
19d60     4B 95 02 FB | 	rdlong	arg02, arg03
19d64                 | ' 
19d64                 | ' r_lineptr_e=lineptr_e
19d64                 | ' r_runptr=runptr
19d64                 | ' r_runptr2=runptr2
19d64                 | ' 
19d64                 | ' numpar=compiledline(lineptr_e).result.uresult
19d64                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
19d64     01 94 0E F2 | 	cmp	arg02, #1 wz
19d68     48 00 00 FF 
19d6c     FC 65 86 F1 | 	sub	objptr, ##37372
19d70     00 92 06 A6 |  if_e	mov	arg01, #0
19d74     6C A8 BF AD |  if_e	call	#_do_load
19d78     4C 00 00 FF 
19d7c     08 64 06 F1 | 	add	objptr, ##38920
19d80     32 99 02 FB | 	rdlong	arg04, objptr
19d84     06 00 00 FF 
19d88     30 64 06 F1 | 	add	objptr, ##3120
19d8c     32 99 62 FC | 	wrlong	arg04, objptr
19d90     04 64 06 F1 | 	add	objptr, #4
19d94     32 01 68 FC | 	wrlong	#0, objptr
19d98     04 64 06 F1 | 	add	objptr, #4
19d9c     FF FF FF FF 
19da0     32 FF 6B FC | 	wrlong	##-1, objptr
19da4     06 00 00 FF 
19da8     38 64 86 F1 | 	sub	objptr, ##3128
19dac     32 99 02 FB | 	rdlong	arg04, objptr
19db0     06 00 00 FF 
19db4     A4 64 06 F1 | 	add	objptr, ##3236
19db8     32 99 62 FC | 	wrlong	arg04, objptr
19dbc     9A 01 00 FF 
19dc0     49 98 06 F6 | 	mov	arg04, ##@LR__6092
19dc4     01 00 00 FF 
19dc8     E8 65 06 F1 | 	add	objptr, ##1000
19dcc     32 99 62 FC | 	wrlong	arg04, objptr
19dd0                 | ' runptr=programstart : runptr2=0 : oldrunptr=-1 
19dd0                 | ' dataptr=programstart : readline="" ' reset the data pointer
19dd0                 | ' if inrun>0 then 
19dd0     02 00 00 FF 
19dd4     28 64 86 F1 | 	sub	objptr, ##1064
19dd8     32 99 02 FB | 	rdlong	arg04, objptr
19ddc     52 00 00 FF 
19de0     6C 64 86 F1 | 	sub	objptr, ##42092
19de4     01 98 16 F2 | 	cmp	arg04, #1 wc
19de8     34 00 90 CD |  if_b	jmp	#LR__2180
19dec     32 93 02 F6 | 	mov	arg01, objptr
19df0     52 00 00 FF 
19df4     70 92 06 F1 | 	add	arg01, ##42096
19df8     52 00 00 FF 
19dfc     38 64 06 F1 | 	add	objptr, ##42040
19e00     32 95 02 FB | 	rdlong	arg02, objptr
19e04     18 96 06 F6 | 	mov	arg03, #24
19e08     46 00 00 FF 
19e0c     6C 65 86 F1 | 	sub	objptr, ##36204
19e10     80 9F B0 FD | 	call	#_psram_spin2_read1
19e14     0B 00 00 FF 
19e18     CC 64 86 F1 | 	sub	objptr, ##5836
19e1c                 | '   psram.read1(varptr(runheader),runptr,24)  
19e1c                 | '   return
19e1c     10 03 90 FD | 	jmp	#LR__2187
19e20                 | LR__2180
19e20     52 00 00 FF 
19e24     6C 64 06 F1 | 	add	objptr, ##42092
19e28     32 03 68 FC | 	wrlong	#1, objptr
19e2c     04 64 06 F1 | 	add	objptr, #4
19e30     32 93 02 F6 | 	mov	arg01, objptr
19e34     38 64 86 F1 | 	sub	objptr, #56
19e38     32 95 02 FB | 	rdlong	arg02, objptr
19e3c     18 96 06 F6 | 	mov	arg03, #24
19e40     46 00 00 FF 
19e44     6C 65 86 F1 | 	sub	objptr, ##36204
19e48     48 9F B0 FD | 	call	#_psram_spin2_read1
19e4c                 | ' inrun=1
19e4c                 | ' psram.read1(varptr(runheader),runptr,24) 
19e4c                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
19e4c     46 00 00 FF 
19e50     A4 65 06 F1 | 	add	objptr, ##36260
19e54     32 AD 02 FB | 	rdlong	local04, objptr
19e58     52 00 00 FF 
19e5c     70 64 86 F1 | 	sub	objptr, ##42096
19e60     FF FF 7F FF 
19e64     FF AD 0E F2 | 	cmp	local04, ##-1 wz
19e68     52 00 00 AF 
19e6c     6C 64 06 A1 |  if_e	add	objptr, ##42092
19e70     32 01 68 AC |  if_e	wrlong	#0, objptr
19e74     52 00 00 AF 
19e78     6C 64 86 A1 |  if_e	sub	objptr, ##42092
19e7c     B0 02 90 AD |  if_e	jmp	#LR__2187
19e80                 | ' do 
19e80                 | LR__2181
19e80                 | '   if runptr<>oldrunptr then
19e80     52 00 00 FF 
19e84     38 64 06 F1 | 	add	objptr, ##42040
19e88     32 AD 02 FB | 	rdlong	local04, objptr
19e8c     08 64 06 F1 | 	add	objptr, #8
19e90     32 99 02 FB | 	rdlong	arg04, objptr
19e94     52 00 00 FF 
19e98     40 64 86 F1 | 	sub	objptr, ##42048
19e9c     4C AD 0A F2 | 	cmp	local04, arg04 wz
19ea0     D0 00 90 AD |  if_e	jmp	#LR__2182
19ea4     32 93 02 F6 | 	mov	arg01, objptr
19ea8     52 00 00 FF 
19eac     70 92 06 F1 | 	add	arg01, ##42096
19eb0     52 00 00 FF 
19eb4     38 64 06 F1 | 	add	objptr, ##42040
19eb8     32 95 02 FB | 	rdlong	arg02, objptr
19ebc     18 96 06 F6 | 	mov	arg03, #24
19ec0     46 00 00 FF 
19ec4     6C 65 86 F1 | 	sub	objptr, ##36204
19ec8     C8 9E B0 FD | 	call	#_psram_spin2_read1
19ecc     3D 00 00 FF 
19ed0     30 65 06 F1 | 	add	objptr, ##31536
19ed4     32 93 02 F6 | 	mov	arg01, objptr
19ed8     09 00 00 FF 
19edc     3C 64 06 F1 | 	add	objptr, ##4668
19ee0     32 95 02 FB | 	rdlong	arg02, objptr
19ee4     0B 00 00 FF 
19ee8     54 64 86 F1 | 	sub	objptr, ##5716
19eec     32 AD 02 FB | 	rdlong	local04, objptr
19ef0     01 AC 66 F0 | 	shl	local04, #1
19ef4     56 95 02 F1 | 	add	arg02, local04
19ef8     0B 00 00 FF 
19efc     94 64 06 F1 | 	add	objptr, ##5780
19f00     32 97 02 FB | 	rdlong	arg03, objptr
19f04     40 64 86 F1 | 	sub	objptr, #64
19f08     32 AD 02 FB | 	rdlong	local04, objptr
19f0c     56 97 82 F1 | 	sub	arg03, local04
19f10     46 00 00 FF 
19f14     6C 65 86 F1 | 	sub	objptr, ##36204
19f18     78 9E B0 FD | 	call	#_psram_spin2_read1
19f1c     46 00 00 FF 
19f20     AC 65 06 F1 | 	add	objptr, ##36268
19f24     32 AD 02 FB | 	rdlong	local04, objptr
19f28     40 64 86 F1 | 	sub	objptr, #64
19f2c     32 95 02 FB | 	rdlong	arg02, objptr
19f30     4A AD 82 F1 | 	sub	local04, arg02
19f34     0B 00 00 FF 
19f38     54 64 86 F1 | 	sub	objptr, ##5716
19f3c     32 95 02 FB | 	rdlong	arg02, objptr
19f40     4A AD 12 FD | 	qdiv	local04, arg02
19f44     05 00 00 FF 
19f48     18 64 06 F1 | 	add	objptr, ##2584
19f4c     18 AC 62 FD | 	getqx	local04
19f50     03 AC 86 F1 | 	sub	local04, #3
19f54     32 AD 62 FC | 	wrlong	local04, objptr
19f58     06 00 00 FF 
19f5c     3C 64 06 F1 | 	add	objptr, ##3132
19f60     32 AD 02 FB | 	rdlong	local04, objptr
19f64     08 64 06 F1 | 	add	objptr, #8
19f68     32 AD 62 FC | 	wrlong	local04, objptr
19f6c     52 00 00 FF 
19f70     40 64 86 F1 | 	sub	objptr, ##42048
19f74                 | LR__2182
19f74     52 00 00 FF 
19f78     84 64 06 F1 | 	add	objptr, ##42116
19f7c     32 AD 02 FB | 	rdlong	local04, objptr
19f80     4C 64 86 F1 | 	sub	objptr, #76
19f84     32 AD 62 FC | 	wrlong	local04, objptr
19f88     04 64 06 F1 | 	add	objptr, #4
19f8c     32 93 02 FB | 	rdlong	arg01, objptr
19f90     52 00 00 FF 
19f94     3C 64 86 F1 | 	sub	objptr, ##42044
19f98     D0 35 BF FD | 	call	#_execute_line
19f9c     52 00 00 FF 
19fa0     3C 64 06 F1 | 	add	objptr, ##42044
19fa4     32 7B 62 FC | 	wrlong	result1, objptr
19fa8     04 64 86 F1 | 	sub	objptr, #4
19fac     32 AD 02 FB | 	rdlong	local04, objptr
19fb0     52 00 00 FF 
19fb4     38 64 86 F1 | 	sub	objptr, ##42040
19fb8     FF FF 3F FF 
19fbc     FF AD 0E F2 | 	cmp	local04, ##2147483647 wz
19fc0     4C 00 90 AD |  if_e	jmp	#LR__2185
19fc4     E0 92 06 F6 | 	mov	arg01, #224
19fc8     54 A1 B0 FD | 	call	#_usbnew_spin2_keystate
19fcc     00 7A 0E F2 | 	cmp	result1, #0 wz
19fd0     10 00 90 5D |  if_ne	jmp	#LR__2183
19fd4     E4 92 06 F6 | 	mov	arg01, #228
19fd8     44 A1 B0 FD | 	call	#_usbnew_spin2_keystate
19fdc     00 7A 0E F2 | 	cmp	result1, #0 wz
19fe0     10 00 90 AD |  if_e	jmp	#LR__2184
19fe4                 | LR__2183
19fe4     06 92 06 F6 | 	mov	arg01, #6
19fe8     34 A1 B0 FD | 	call	#_usbnew_spin2_keystate
19fec     00 7A 0E F2 | 	cmp	result1, #0 wz
19ff0     1C 00 90 5D |  if_ne	jmp	#LR__2185
19ff4                 | LR__2184
19ff4     52 00 00 FF 
19ff8     6C 64 06 F1 | 	add	objptr, ##42092
19ffc     32 AD 02 FB | 	rdlong	local04, objptr
1a000     52 00 00 FF 
1a004     6C 64 86 F1 | 	sub	objptr, ##42092
1a008     02 AC 0E F2 | 	cmp	local04, #2 wz
1a00c     70 FE 9F 5D |  if_ne	jmp	#LR__2181
1a010                 | LR__2185
1a010                 | '   ''do whatever kbm.peek_latest_key()=$106 
1a010                 | ' if runptr<>$7FFF_FFFF andalso inrun=1 then 
1a010     52 00 00 FF 
1a014     38 64 06 F1 | 	add	objptr, ##42040
1a018     32 AD 02 FB | 	rdlong	local04, objptr
1a01c     52 00 00 FF 
1a020     38 64 86 F1 | 	sub	objptr, ##42040
1a024     FF FF 3F FF 
1a028     FF AD 0E F2 | 	cmp	local04, ##2147483647 wz
1a02c     AC 00 90 AD |  if_e	jmp	#LR__2186
1a030     52 00 00 FF 
1a034     6C 64 06 F1 | 	add	objptr, ##42092
1a038     32 AD 02 FB | 	rdlong	local04, objptr
1a03c     52 00 00 FF 
1a040     6C 64 86 F1 | 	sub	objptr, ##42092
1a044     01 AC 0E F2 | 	cmp	local04, #1 wz
1a048     90 00 90 5D |  if_ne	jmp	#LR__2186
1a04c                 | '   print: print "Stopped at line ";runheader(0) 
1a04c     00 92 06 F6 | 	mov	arg01, #0
1a050     38 02 B1 FD | 	call	#__system___getiolock_0622
1a054     3D 93 02 F6 | 	mov	arg01, result1
1a058     AC AC B0 FD | 	call	#__system___lockmem
1a05c     00 92 06 F6 | 	mov	arg01, #0
1a060     0A 94 06 F6 | 	mov	arg02, #10
1a064     00 96 06 F6 | 	mov	arg03, #0
1a068     38 B9 B0 FD | 	call	#__system___basic_print_char
1a06c     00 92 06 F6 | 	mov	arg01, #0
1a070     18 02 B1 FD | 	call	#__system___getiolock_0622
1a074     3D 01 68 FC | 	wrlong	#0, result1
1a078     00 92 06 F6 | 	mov	arg01, #0
1a07c     0C 02 B1 FD | 	call	#__system___getiolock_0622
1a080     3D 93 02 F6 | 	mov	arg01, result1
1a084     80 AC B0 FD | 	call	#__system___lockmem
1a088     9A 01 00 FF 
1a08c     4A 94 06 F6 | 	mov	arg02, ##@LR__6093
1a090     00 92 06 F6 | 	mov	arg01, #0
1a094     00 96 06 F6 | 	mov	arg03, #0
1a098     60 B9 B0 FD | 	call	#__system___basic_print_string
1a09c     52 00 00 FF 
1a0a0     70 64 06 F1 | 	add	objptr, ##42096
1a0a4     32 95 02 FB | 	rdlong	arg02, objptr
1a0a8     52 00 00 FF 
1a0ac     70 64 86 F1 | 	sub	objptr, ##42096
1a0b0     00 92 06 F6 | 	mov	arg01, #0
1a0b4     00 96 06 F6 | 	mov	arg03, #0
1a0b8     0A 98 06 F6 | 	mov	arg04, #10
1a0bc     C0 B9 B0 FD | 	call	#__system___basic_print_unsigned
1a0c0     00 92 06 F6 | 	mov	arg01, #0
1a0c4     0A 94 06 F6 | 	mov	arg02, #10
1a0c8     00 96 06 F6 | 	mov	arg03, #0
1a0cc     D4 B8 B0 FD | 	call	#__system___basic_print_char
1a0d0     00 92 06 F6 | 	mov	arg01, #0
1a0d4     B4 01 B1 FD | 	call	#__system___getiolock_0622
1a0d8     3D 01 68 FC | 	wrlong	#0, result1
1a0dc                 | LR__2186
1a0dc     52 00 00 FF 
1a0e0     6C 64 06 F1 | 	add	objptr, ##42092
1a0e4     32 01 68 FC | 	wrlong	#0, objptr
1a0e8     06 00 00 FF 
1a0ec     6C 64 86 F1 | 	sub	objptr, ##3180
1a0f0     32 A7 62 FC | 	wrlong	local01, objptr
1a0f4     06 00 00 FF 
1a0f8     38 64 06 F1 | 	add	objptr, ##3128
1a0fc     32 A9 62 FC | 	wrlong	local02, objptr
1a100     04 64 06 F1 | 	add	objptr, #4
1a104     32 AB 62 FC | 	wrlong	local03, objptr
1a108     52 00 00 FF 
1a10c     3C 64 86 F1 | 	sub	objptr, ##42044
1a110     11 92 06 F6 | 	mov	arg01, #17
1a114     08 94 06 F6 | 	mov	arg02, #8
1a118     10 96 06 F6 | 	mov	arg03, #16
1a11c     2C 7F B0 FD | 	call	#_hg010b_spin2_setspritesize
1a120     10 92 06 F6 | 	mov	arg01, #16
1a124     20 94 06 F6 | 	mov	arg02, #32
1a128     20 96 06 F6 | 	mov	arg03, #32
1a12c     1C 7F B0 FD | 	call	#_hg010b_spin2_setspritesize
1a130                 | LR__2187
1a130     E7 F0 03 F6 | 	mov	ptra, fp
1a134     F2 00 A0 FD | 	call	#popregs_
1a138                 | _do_run_ret
1a138     2D 00 64 FD | 	ret
1a13c                 | 
1a13c                 | ' 
1a13c                 | ' ' ------------------ save
1a13c                 | ' 
1a13c                 | ' sub do_save                        
1a13c                 | _do_save
1a13c     0A CA 05 F6 | 	mov	COUNT_, #10
1a140     E8 00 A0 FD | 	call	#pushregs_
1a144     B8 F0 07 F1 | 	add	ptra, #184
1a148     4C 00 00 FF 
1a14c     00 64 06 F1 | 	add	objptr, ##38912
1a150     32 97 02 FB | 	rdlong	arg03, objptr
1a154     4B AD 02 F6 | 	mov	local04, arg03
1a158     01 AC 66 F0 | 	shl	local04, #1
1a15c     4B AD 02 F1 | 	add	local04, arg03
1a160     02 AC 66 F0 | 	shl	local04, #2
1a164     03 00 00 FF 
1a168     04 64 86 F1 | 	sub	objptr, ##1540
1a16c     32 AD 02 F1 | 	add	local04, objptr
1a170     56 AF 02 FB | 	rdlong	local05, local04
1a174                 | ' 
1a174                 | ' numpar=compiledline(lineptr_e).result.uresult
1a174                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
1a174     01 AE 56 F2 | 	cmps	local05, #1 wc
1a178     48 00 00 FF 
1a17c     FC 65 86 F1 | 	sub	objptr, ##37372
1a180     14 00 90 CD |  if_b	jmp	#LR__2190
1a184     E8 34 BF FD | 	call	#_pop
1a188     3D A7 02 F6 | 	mov	local01, result1
1a18c     3E A9 02 F6 | 	mov	local02, result2
1a190     3F AB 02 F6 | 	mov	local03, result3
1a194     18 00 90 FD | 	jmp	#LR__2191
1a198                 | LR__2190
1a198     54 00 00 FF 
1a19c     7C 64 06 F1 | 	add	objptr, ##43132
1a1a0     32 A7 02 FB | 	rdlong	local01, objptr
1a1a4     54 00 00 FF 
1a1a8     7C 64 86 F1 | 	sub	objptr, ##43132
1a1ac     1F AA 06 F6 | 	mov	local03, #31
1a1b0                 | LR__2191
1a1b0                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
1a1b0     4C 00 00 FF 
1a1b4     08 64 06 F1 | 	add	objptr, ##38920
1a1b8     32 93 02 FB | 	rdlong	arg01, objptr
1a1bc     4C 00 00 FF 
1a1c0     08 64 86 F1 | 	sub	objptr, ##38920
1a1c4     2C 71 B0 FD | 	call	#_pslpeek
1a1c8     FF FF 7F FF 
1a1cc     FF 7B 0E F2 | 	cmp	result1, ##-1 wz
1a1d0     10 00 90 5D |  if_ne	jmp	#LR__2192
1a1d4     1B 92 06 F6 | 	mov	arg01, #27
1a1d8     00 94 06 F6 | 	mov	arg02, #0
1a1dc     58 6E B0 FD | 	call	#_printerror
1a1e0     3C 02 90 FD | 	jmp	#LR__2198
1a1e4                 | LR__2192
1a1e4                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
1a1e4     2B AA 0E F2 | 	cmp	local03, #43 wz
1a1e8     10 00 90 5D |  if_ne	jmp	#LR__2193
1a1ec     53 93 02 F6 | 	mov	arg01, local01
1a1f0     EC 35 BF FD | 	call	#_convertstring
1a1f4     3D A7 02 F6 | 	mov	local01, result1
1a1f8     1F AA 06 F6 | 	mov	local03, #31
1a1fc                 | LR__2193
1a1fc                 | ' if t1.result_type=result_string then
1a1fc     1F AA 0E F2 | 	cmp	local03, #31 wz
1a200     1C 02 90 5D |  if_ne	jmp	#LR__2197
1a204                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
1a204     9A 01 00 FF 
1a208     5B 94 06 F6 | 	mov	arg02, ##@LR__6094
1a20c     53 93 02 F6 | 	mov	arg01, local01
1a210     1C AB B0 FD | 	call	#__system___string_cmp
1a214     00 7A 0E F2 | 	cmp	result1, #0 wz
1a218     54 00 00 AF 
1a21c     7C 64 06 A1 |  if_e	add	objptr, ##43132
1a220     32 A7 02 AB |  if_e	rdlong	local01, objptr
1a224     54 00 00 FF 
1a228     7C 64 C6 F3 | 	sumz	objptr, ##43132
1a22c     32 A7 62 5C |  if_ne	wrlong	local01, objptr
1a230     54 00 00 5F 
1a234     7C 64 86 51 |  if_ne	sub	objptr, ##43132
1a238                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
1a238     09 92 06 F6 | 	mov	arg01, #9
1a23c     A4 F6 B0 FD | 	call	#__system__close
1a240     09 B0 06 F6 | 	mov	local06, #9
1a244     4C 00 00 FF 
1a248     14 64 06 F1 | 	add	objptr, ##38932
1a24c     32 93 02 FB | 	rdlong	arg01, objptr
1a250     4C 00 00 FF 
1a254     14 64 86 F1 | 	sub	objptr, ##38932
1a258     9A 01 00 FF 
1a25c     5C 94 06 F6 | 	mov	arg02, ##@LR__6095
1a260     00 AB B0 FD | 	call	#__system___string_concat
1a264     3D 93 02 F6 | 	mov	arg01, result1
1a268     53 95 02 F6 | 	mov	arg02, local01
1a26c     F4 AA B0 FD | 	call	#__system___string_concat
1a270     3D 95 02 F6 | 	mov	arg02, result1
1a274     58 93 02 F6 | 	mov	arg01, local06
1a278     0D 96 06 F6 | 	mov	arg03, #13
1a27c     38 B6 B0 FD | 	call	#__system___basic_open_string
1a280     4C 00 00 FF 
1a284     08 64 06 F1 | 	add	objptr, ##38920
1a288     32 B3 02 FB | 	rdlong	local07, objptr
1a28c     4C 00 00 FF 
1a290     08 64 86 F1 | 	sub	objptr, ##38920
1a294                 | '   saveptr=programstart
1a294                 | '   do
1a294                 | LR__2194
1a294     E7 92 02 F6 | 	mov	arg01, fp
1a298     14 92 06 F1 | 	add	arg01, #20
1a29c     59 95 02 F6 | 	mov	arg02, local07
1a2a0     18 96 06 F6 | 	mov	arg03, #24
1a2a4     0B 00 00 FF 
1a2a8     CC 64 06 F1 | 	add	objptr, ##5836
1a2ac     E4 9A B0 FD | 	call	#_psram_spin2_read1
1a2b0     E7 92 02 F6 | 	mov	arg01, fp
1a2b4     2C 92 06 F1 | 	add	arg01, #44
1a2b8     1C CE 05 F1 | 	add	fp, #28
1a2bc     E7 94 02 FB | 	rdlong	arg02, fp
1a2c0     04 CE 05 F1 | 	add	fp, #4
1a2c4     E7 96 02 FB | 	rdlong	arg03, fp
1a2c8     20 CE 85 F1 | 	sub	fp, #32
1a2cc     C4 9A B0 FD | 	call	#_psram_spin2_read1
1a2d0     0B 00 00 FF 
1a2d4     CC 64 86 F1 | 	sub	objptr, ##5836
1a2d8     9A 01 00 FF 
1a2dc     5E B4 06 F6 | 	mov	local08, ##@LR__6096
1a2e0                 | '     psram.read1(varptr(header(0)),saveptr,24)
1a2e0                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
1a2e0                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
1a2e0     01 B6 06 F6 | 	mov	local09, #1
1a2e4     20 CE 05 F1 | 	add	fp, #32
1a2e8     E7 B8 02 FB | 	rdlong	local10, fp
1a2ec     20 CE 85 F1 | 	sub	fp, #32
1a2f0     01 B8 06 F1 | 	add	local10, #1
1a2f4                 | LR__2195
1a2f4     5C B7 52 F2 | 	cmps	local09, local10 wc
1a2f8     34 00 90 3D |  if_ae	jmp	#LR__2196
1a2fc     5B B3 02 F6 | 	mov	local07, local09
1a300     01 B2 86 F1 | 	sub	local07, #1
1a304     E7 B0 02 F6 | 	mov	local06, fp
1a308     2C B0 06 F1 | 	add	local06, #44
1a30c     58 B3 02 F1 | 	add	local07, local06
1a310     59 93 C2 FA | 	rdbyte	arg01, local07
1a314     5C C4 B0 FD | 	call	#__system__Chr_S
1a318     3D 95 02 F6 | 	mov	arg02, result1
1a31c     5A 93 02 F6 | 	mov	arg01, local08
1a320     40 AA B0 FD | 	call	#__system___string_concat
1a324     3D B5 02 F6 | 	mov	local08, result1
1a328     01 B6 06 F1 | 	add	local09, #1
1a32c     C4 FF 9F FD | 	jmp	#LR__2195
1a330                 | LR__2196
1a330                 | '     print #9, saveline$
1a330     09 92 06 F6 | 	mov	arg01, #9
1a334     54 FF B0 FD | 	call	#__system___getiolock_0622
1a338     3D 93 02 F6 | 	mov	arg01, result1
1a33c     C8 A9 B0 FD | 	call	#__system___lockmem
1a340     09 92 06 F6 | 	mov	arg01, #9
1a344     5A 95 02 F6 | 	mov	arg02, local08
1a348     00 96 06 F6 | 	mov	arg03, #0
1a34c     AC B6 B0 FD | 	call	#__system___basic_print_string
1a350     09 92 06 F6 | 	mov	arg01, #9
1a354     0A 94 06 F6 | 	mov	arg02, #10
1a358     00 96 06 F6 | 	mov	arg03, #0
1a35c     44 B6 B0 FD | 	call	#__system___basic_print_char
1a360     09 92 06 F6 | 	mov	arg01, #9
1a364     24 FF B0 FD | 	call	#__system___getiolock_0622
1a368     3D 01 68 FC | 	wrlong	#0, result1
1a36c     28 CE 05 F1 | 	add	fp, #40
1a370     E7 B0 02 FB | 	rdlong	local06, fp
1a374     58 B3 02 F6 | 	mov	local07, local06
1a378     28 CE 85 F1 | 	sub	fp, #40
1a37c     FF FF 3F FF 
1a380     FF B1 0E F2 | 	cmp	local06, ##2147483647 wz
1a384     0C FF 9F 5D |  if_ne	jmp	#LR__2194
1a388                 | '   close #9  
1a388     09 92 06 F6 | 	mov	arg01, #9
1a38c     54 F5 B0 FD | 	call	#__system__close
1a390                 | '   print "Saved as ";currentdir$+"/"+loadname
1a390     00 92 06 F6 | 	mov	arg01, #0
1a394     F4 FE B0 FD | 	call	#__system___getiolock_0622
1a398     3D 93 02 F6 | 	mov	arg01, result1
1a39c     68 A9 B0 FD | 	call	#__system___lockmem
1a3a0     9A 01 00 FF 
1a3a4     5F 94 06 F6 | 	mov	arg02, ##@LR__6097
1a3a8     00 92 06 F6 | 	mov	arg01, #0
1a3ac     00 96 06 F6 | 	mov	arg03, #0
1a3b0     48 B6 B0 FD | 	call	#__system___basic_print_string
1a3b4     00 AC 06 F6 | 	mov	local04, #0
1a3b8     4C 00 00 FF 
1a3bc     14 64 06 F1 | 	add	objptr, ##38932
1a3c0     32 93 02 FB | 	rdlong	arg01, objptr
1a3c4     4C 00 00 FF 
1a3c8     14 64 86 F1 | 	sub	objptr, ##38932
1a3cc     9A 01 00 FF 
1a3d0     69 94 06 F6 | 	mov	arg02, ##@LR__6098
1a3d4     8C A9 B0 FD | 	call	#__system___string_concat
1a3d8     3D 93 02 F6 | 	mov	arg01, result1
1a3dc     54 00 00 FF 
1a3e0     7C 64 06 F1 | 	add	objptr, ##43132
1a3e4     32 95 02 FB | 	rdlong	arg02, objptr
1a3e8     54 00 00 FF 
1a3ec     7C 64 86 F1 | 	sub	objptr, ##43132
1a3f0     70 A9 B0 FD | 	call	#__system___string_concat
1a3f4     3D 95 02 F6 | 	mov	arg02, result1
1a3f8     56 93 02 F6 | 	mov	arg01, local04
1a3fc     00 96 06 F6 | 	mov	arg03, #0
1a400     F8 B5 B0 FD | 	call	#__system___basic_print_string
1a404     00 92 06 F6 | 	mov	arg01, #0
1a408     0A 94 06 F6 | 	mov	arg02, #10
1a40c     00 96 06 F6 | 	mov	arg03, #0
1a410     90 B5 B0 FD | 	call	#__system___basic_print_char
1a414     00 92 06 F6 | 	mov	arg01, #0
1a418     70 FE B0 FD | 	call	#__system___getiolock_0622
1a41c     3D 01 68 FC | 	wrlong	#0, result1
1a420                 | LR__2197
1a420                 | LR__2198
1a420     E7 F0 03 F6 | 	mov	ptra, fp
1a424     F2 00 A0 FD | 	call	#popregs_
1a428                 | _do_save_ret
1a428     2D 00 64 FD | 	ret
1a42c                 | 
1a42c                 | ' 
1a42c                 | ' ' ------------------ setamode
1a42c                 | ' 
1a42c                 | ' sub do_setamode
1a42c                 | _do_setamode
1a42c     02 CA 05 F6 | 	mov	COUNT_, #2
1a430     E8 00 A0 FD | 	call	#pushregs_
1a434     18 F0 07 F1 | 	add	ptra, #24
1a438     34 32 BF FD | 	call	#_pop
1a43c     3D 93 02 F6 | 	mov	arg01, result1
1a440     3E A7 02 F6 | 	mov	local01, result2
1a444     3F A9 02 F6 | 	mov	local02, result3
1a448     E7 92 62 FC | 	wrlong	arg01, fp
1a44c     04 CE 05 F1 | 	add	fp, #4
1a450     E7 A6 62 FC | 	wrlong	local01, fp
1a454     04 CE 05 F1 | 	add	fp, #4
1a458     E7 A8 62 FC | 	wrlong	local02, fp
1a45c     08 CE 85 F1 | 	sub	fp, #8
1a460     0C 32 BF FD | 	call	#_pop
1a464     3D A9 02 F6 | 	mov	local02, result1
1a468     0C CE 05 F1 | 	add	fp, #12
1a46c     E7 A8 62 FC | 	wrlong	local02, fp
1a470     04 CE 05 F1 | 	add	fp, #4
1a474     E7 7C 62 FC | 	wrlong	result2, fp
1a478     04 CE 05 F1 | 	add	fp, #4
1a47c     E7 7E 62 FC | 	wrlong	result3, fp
1a480     08 CE 85 F1 | 	sub	fp, #8
1a484     E7 92 02 F6 | 	mov	arg01, fp
1a488     0C CE 85 F1 | 	sub	fp, #12
1a48c     BC 33 BF FD | 	call	#_converttoint
1a490     3D A7 02 F6 | 	mov	local01, result1
1a494     03 A6 66 F0 | 	shl	local01, #3
1a498     3D A7 82 F1 | 	sub	local01, result1
1a49c     02 A6 66 F0 | 	shl	local01, #2
1a4a0     32 A9 02 F6 | 	mov	local02, objptr
1a4a4     16 00 00 FF 
1a4a8     98 A8 06 F1 | 	add	local02, ##11416
1a4ac     54 A7 02 F1 | 	add	local01, local02
1a4b0     E7 92 02 F6 | 	mov	arg01, fp
1a4b4     94 33 BF FD | 	call	#_converttoint
1a4b8     16 A6 06 F1 | 	add	local01, #22
1a4bc     53 7B 52 FC | 	wrword	result1, local01
1a4c0     E7 F0 03 F6 | 	mov	ptra, fp
1a4c4     F2 00 A0 FD | 	call	#popregs_
1a4c8                 | _do_setamode_ret
1a4c8     2D 00 64 FD | 	ret
1a4cc                 | 
1a4cc                 | ' 
1a4cc                 | ' 
1a4cc                 | ' ' ------------------ setcolor
1a4cc                 | ' 
1a4cc                 | ' sub do_setcolor
1a4cc                 | _do_setcolor
1a4cc     05 CA 05 F6 | 	mov	COUNT_, #5
1a4d0     E8 00 A0 FD | 	call	#pushregs_
1a4d4     20 F0 07 F1 | 	add	ptra, #32
1a4d8     4C 00 00 FF 
1a4dc     00 64 06 F1 | 	add	objptr, ##38912
1a4e0     32 99 02 FB | 	rdlong	arg04, objptr
1a4e4     4C 97 02 F6 | 	mov	arg03, arg04
1a4e8     01 96 66 F0 | 	shl	arg03, #1
1a4ec     4C 97 02 F1 | 	add	arg03, arg04
1a4f0     02 96 66 F0 | 	shl	arg03, #2
1a4f4     03 00 00 FF 
1a4f8     04 64 86 F1 | 	sub	objptr, ##1540
1a4fc     32 97 02 F1 | 	add	arg03, objptr
1a500     4B A7 02 FB | 	rdlong	local01, arg03
1a504                 | ' 
1a504                 | ' numpar=compiledline(lineptr_e).result.uresult
1a504                 | ' 
1a504                 | ' if numpar=4 then
1a504     04 A6 0E F2 | 	cmp	local01, #4 wz
1a508     48 00 00 FF 
1a50c     FC 65 86 F1 | 	sub	objptr, ##37372
1a510     B4 00 90 5D |  if_ne	jmp	#LR__2200
1a514     58 31 BF FD | 	call	#_pop
1a518     3F A7 02 F6 | 	mov	local01, result3
1a51c     E7 7A 62 FC | 	wrlong	result1, fp
1a520     04 CE 05 F1 | 	add	fp, #4
1a524     E7 7C 62 FC | 	wrlong	result2, fp
1a528     04 CE 05 F1 | 	add	fp, #4
1a52c     E7 A6 62 FC | 	wrlong	local01, fp
1a530     08 CE 85 F1 | 	sub	fp, #8
1a534     E7 92 02 F6 | 	mov	arg01, fp
1a538     10 33 BF FD | 	call	#_converttoint
1a53c     3D A9 02 F6 | 	mov	local02, result1
1a540     2C 31 BF FD | 	call	#_pop
1a544     3F A7 02 F6 | 	mov	local01, result3
1a548     E7 7A 62 FC | 	wrlong	result1, fp
1a54c     04 CE 05 F1 | 	add	fp, #4
1a550     E7 7C 62 FC | 	wrlong	result2, fp
1a554     04 CE 05 F1 | 	add	fp, #4
1a558     E7 A6 62 FC | 	wrlong	local01, fp
1a55c     08 CE 85 F1 | 	sub	fp, #8
1a560     E7 92 02 F6 | 	mov	arg01, fp
1a564     E4 32 BF FD | 	call	#_converttoint
1a568     3D AB 02 F6 | 	mov	local03, result1
1a56c     00 31 BF FD | 	call	#_pop
1a570     3F A7 02 F6 | 	mov	local01, result3
1a574     E7 7A 62 FC | 	wrlong	result1, fp
1a578     04 CE 05 F1 | 	add	fp, #4
1a57c     E7 7C 62 FC | 	wrlong	result2, fp
1a580     04 CE 05 F1 | 	add	fp, #4
1a584     E7 A6 62 FC | 	wrlong	local01, fp
1a588     08 CE 85 F1 | 	sub	fp, #8
1a58c     E7 92 02 F6 | 	mov	arg01, fp
1a590     B8 32 BF FD | 	call	#_converttoint
1a594     3D AD 02 F6 | 	mov	local04, result1
1a598     D4 30 BF FD | 	call	#_pop
1a59c     3F A7 02 F6 | 	mov	local01, result3
1a5a0     E7 7A 62 FC | 	wrlong	result1, fp
1a5a4     04 CE 05 F1 | 	add	fp, #4
1a5a8     E7 7C 62 FC | 	wrlong	result2, fp
1a5ac     04 CE 05 F1 | 	add	fp, #4
1a5b0     E7 A6 62 FC | 	wrlong	local01, fp
1a5b4     08 CE 85 F1 | 	sub	fp, #8
1a5b8     E7 92 02 F6 | 	mov	arg01, fp
1a5bc     8C 32 BF FD | 	call	#_converttoint
1a5c0     3D AF 02 F6 | 	mov	local05, result1
1a5c4     C0 00 90 FD | 	jmp	#LR__2203
1a5c8                 | LR__2200
1a5c8     02 A6 0E F2 | 	cmp	local01, #2 wz
1a5cc     68 00 90 5D |  if_ne	jmp	#LR__2201
1a5d0     9C 30 BF FD | 	call	#_pop
1a5d4     3F AF 02 F6 | 	mov	local05, result3
1a5d8     E7 7A 62 FC | 	wrlong	result1, fp
1a5dc     04 CE 05 F1 | 	add	fp, #4
1a5e0     E7 7C 62 FC | 	wrlong	result2, fp
1a5e4     04 CE 05 F1 | 	add	fp, #4
1a5e8     E7 AE 62 FC | 	wrlong	local05, fp
1a5ec     08 CE 85 F1 | 	sub	fp, #8
1a5f0     E7 92 02 F6 | 	mov	arg01, fp
1a5f4     54 32 BF FD | 	call	#_converttoint
1a5f8     3D AD 02 F6 | 	mov	local04, result1
1a5fc     56 A9 E2 F8 | 	getbyte	local02, local04, #0
1a600     56 AB EA F8 | 	getbyte	local03, local04, #1
1a604     56 AD F2 F8 | 	getbyte	local04, local04, #2
1a608     64 30 BF FD | 	call	#_pop
1a60c     3F AF 02 F6 | 	mov	local05, result3
1a610     E7 7A 62 FC | 	wrlong	result1, fp
1a614     04 CE 05 F1 | 	add	fp, #4
1a618     E7 7C 62 FC | 	wrlong	result2, fp
1a61c     04 CE 05 F1 | 	add	fp, #4
1a620     E7 AE 62 FC | 	wrlong	local05, fp
1a624     08 CE 85 F1 | 	sub	fp, #8
1a628     E7 92 02 F6 | 	mov	arg01, fp
1a62c     1C 32 BF FD | 	call	#_converttoint
1a630     3D AF 02 F6 | 	mov	local05, result1
1a634     50 00 90 FD | 	jmp	#LR__2202
1a638                 | LR__2201
1a638                 | '   print "setcolor: "; : printerror(39,runheader(0)) : return  
1a638     00 92 06 F6 | 	mov	arg01, #0
1a63c     4C FC B0 FD | 	call	#__system___getiolock_0622
1a640     3D 93 02 F6 | 	mov	arg01, result1
1a644     C0 A6 B0 FD | 	call	#__system___lockmem
1a648     9A 01 00 FF 
1a64c     6B 94 06 F6 | 	mov	arg02, ##@LR__6099
1a650     00 92 06 F6 | 	mov	arg01, #0
1a654     00 96 06 F6 | 	mov	arg03, #0
1a658     A0 B3 B0 FD | 	call	#__system___basic_print_string
1a65c     00 92 06 F6 | 	mov	arg01, #0
1a660     28 FC B0 FD | 	call	#__system___getiolock_0622
1a664     3D 01 68 FC | 	wrlong	#0, result1
1a668     52 00 00 FF 
1a66c     70 64 06 F1 | 	add	objptr, ##42096
1a670     32 95 02 FB | 	rdlong	arg02, objptr
1a674     52 00 00 FF 
1a678     70 64 86 F1 | 	sub	objptr, ##42096
1a67c     27 92 06 F6 | 	mov	arg01, #39
1a680     B4 69 B0 FD | 	call	#_printerror
1a684     14 00 90 FD | 	jmp	#LR__2204
1a688                 | LR__2202
1a688                 | LR__2203
1a688     57 93 02 F6 | 	mov	arg01, local05
1a68c     56 95 02 F6 | 	mov	arg02, local04
1a690     55 97 02 F6 | 	mov	arg03, local03
1a694     54 99 02 F6 | 	mov	arg04, local02
1a698     18 87 B0 FD | 	call	#_hg010b_spin2_setcolor
1a69c                 | LR__2204
1a69c     E7 F0 03 F6 | 	mov	ptra, fp
1a6a0     F2 00 A0 FD | 	call	#popregs_
1a6a4                 | _do_setcolor_ret
1a6a4     2D 00 64 FD | 	ret
1a6a8                 | 
1a6a8                 | ' 
1a6a8                 | ' ' ------------------ setdelay
1a6a8                 | ' 
1a6a8                 | ' sub do_setdelay
1a6a8                 | _do_setdelay
1a6a8     02 CA 05 F6 | 	mov	COUNT_, #2
1a6ac     E8 00 A0 FD | 	call	#pushregs_
1a6b0     18 F0 07 F1 | 	add	ptra, #24
1a6b4     B8 2F BF FD | 	call	#_pop
1a6b8     3D 93 02 F6 | 	mov	arg01, result1
1a6bc     3E A7 02 F6 | 	mov	local01, result2
1a6c0     3F A9 02 F6 | 	mov	local02, result3
1a6c4     E7 92 62 FC | 	wrlong	arg01, fp
1a6c8     04 CE 05 F1 | 	add	fp, #4
1a6cc     E7 A6 62 FC | 	wrlong	local01, fp
1a6d0     04 CE 05 F1 | 	add	fp, #4
1a6d4     E7 A8 62 FC | 	wrlong	local02, fp
1a6d8     08 CE 85 F1 | 	sub	fp, #8
1a6dc     90 2F BF FD | 	call	#_pop
1a6e0     3D A9 02 F6 | 	mov	local02, result1
1a6e4     0C CE 05 F1 | 	add	fp, #12
1a6e8     E7 A8 62 FC | 	wrlong	local02, fp
1a6ec     04 CE 05 F1 | 	add	fp, #4
1a6f0     E7 7C 62 FC | 	wrlong	result2, fp
1a6f4     04 CE 05 F1 | 	add	fp, #4
1a6f8     E7 7E 62 FC | 	wrlong	result3, fp
1a6fc     08 CE 85 F1 | 	sub	fp, #8
1a700     E7 92 02 F6 | 	mov	arg01, fp
1a704     0C CE 85 F1 | 	sub	fp, #12
1a708     40 31 BF FD | 	call	#_converttoint
1a70c     3D A7 02 F6 | 	mov	local01, result1
1a710     03 A6 66 F0 | 	shl	local01, #3
1a714     3D A7 82 F1 | 	sub	local01, result1
1a718     02 A6 66 F0 | 	shl	local01, #2
1a71c     32 A9 02 F6 | 	mov	local02, objptr
1a720     16 00 00 FF 
1a724     98 A8 06 F1 | 	add	local02, ##11416
1a728     54 A7 02 F1 | 	add	local01, local02
1a72c     E7 92 02 F6 | 	mov	arg01, fp
1a730     18 31 BF FD | 	call	#_converttoint
1a734     06 A6 06 F1 | 	add	local01, #6
1a738     53 7B 52 FC | 	wrword	result1, local01
1a73c     E7 F0 03 F6 | 	mov	ptra, fp
1a740     F2 00 A0 FD | 	call	#popregs_
1a744                 | _do_setdelay_ret
1a744     2D 00 64 FD | 	ret
1a748                 | 
1a748                 | ' 
1a748                 | ' ' ------------------ setenv
1a748                 | ' 
1a748                 | ' sub do_setenv
1a748                 | _do_setenv
1a748     02 CA 05 F6 | 	mov	COUNT_, #2
1a74c     E8 00 A0 FD | 	call	#pushregs_
1a750     18 F0 07 F1 | 	add	ptra, #24
1a754     18 2F BF FD | 	call	#_pop
1a758     3D 93 02 F6 | 	mov	arg01, result1
1a75c     3E A7 02 F6 | 	mov	local01, result2
1a760     3F A9 02 F6 | 	mov	local02, result3
1a764     E7 92 62 FC | 	wrlong	arg01, fp
1a768     04 CE 05 F1 | 	add	fp, #4
1a76c     E7 A6 62 FC | 	wrlong	local01, fp
1a770     04 CE 05 F1 | 	add	fp, #4
1a774     E7 A8 62 FC | 	wrlong	local02, fp
1a778     08 CE 85 F1 | 	sub	fp, #8
1a77c     F0 2E BF FD | 	call	#_pop
1a780     3D A9 02 F6 | 	mov	local02, result1
1a784     0C CE 05 F1 | 	add	fp, #12
1a788     E7 A8 62 FC | 	wrlong	local02, fp
1a78c     04 CE 05 F1 | 	add	fp, #4
1a790     E7 7C 62 FC | 	wrlong	result2, fp
1a794     04 CE 05 F1 | 	add	fp, #4
1a798     E7 7E 62 FC | 	wrlong	result3, fp
1a79c     08 CE 85 F1 | 	sub	fp, #8
1a7a0     E7 92 02 F6 | 	mov	arg01, fp
1a7a4     0C CE 85 F1 | 	sub	fp, #12
1a7a8     A0 30 BF FD | 	call	#_converttoint
1a7ac     3D A7 02 F6 | 	mov	local01, result1
1a7b0     03 A6 66 F0 | 	shl	local01, #3
1a7b4     3D A7 82 F1 | 	sub	local01, result1
1a7b8     02 A6 66 F0 | 	shl	local01, #2
1a7bc     32 A9 02 F6 | 	mov	local02, objptr
1a7c0     16 00 00 FF 
1a7c4     98 A8 06 F1 | 	add	local02, ##11416
1a7c8     54 A7 02 F1 | 	add	local01, local02
1a7cc     E7 92 02 F6 | 	mov	arg01, fp
1a7d0     78 30 BF FD | 	call	#_converttoint
1a7d4     05 A6 06 F1 | 	add	local01, #5
1a7d8     53 7B 42 FC | 	wrbyte	result1, local01
1a7dc     E7 F0 03 F6 | 	mov	ptra, fp
1a7e0     F2 00 A0 FD | 	call	#popregs_
1a7e4                 | _do_setenv_ret
1a7e4     2D 00 64 FD | 	ret
1a7e8                 | 
1a7e8                 | ' 
1a7e8                 | ' ' ------------------ setlen
1a7e8                 | ' 
1a7e8                 | ' sub do_setlen
1a7e8                 | _do_setlen
1a7e8     02 CA 05 F6 | 	mov	COUNT_, #2
1a7ec     E8 00 A0 FD | 	call	#pushregs_
1a7f0     18 F0 07 F1 | 	add	ptra, #24
1a7f4     78 2E BF FD | 	call	#_pop
1a7f8     3D 93 02 F6 | 	mov	arg01, result1
1a7fc     3E A7 02 F6 | 	mov	local01, result2
1a800     3F A9 02 F6 | 	mov	local02, result3
1a804     E7 92 62 FC | 	wrlong	arg01, fp
1a808     04 CE 05 F1 | 	add	fp, #4
1a80c     E7 A6 62 FC | 	wrlong	local01, fp
1a810     04 CE 05 F1 | 	add	fp, #4
1a814     E7 A8 62 FC | 	wrlong	local02, fp
1a818     08 CE 85 F1 | 	sub	fp, #8
1a81c     50 2E BF FD | 	call	#_pop
1a820     3D A9 02 F6 | 	mov	local02, result1
1a824     0C CE 05 F1 | 	add	fp, #12
1a828     E7 A8 62 FC | 	wrlong	local02, fp
1a82c     04 CE 05 F1 | 	add	fp, #4
1a830     E7 7C 62 FC | 	wrlong	result2, fp
1a834     04 CE 05 F1 | 	add	fp, #4
1a838     E7 7E 62 FC | 	wrlong	result3, fp
1a83c     08 CE 85 F1 | 	sub	fp, #8
1a840     E7 92 02 F6 | 	mov	arg01, fp
1a844     0C CE 85 F1 | 	sub	fp, #12
1a848     00 30 BF FD | 	call	#_converttoint
1a84c     3D A7 02 F6 | 	mov	local01, result1
1a850     03 A6 66 F0 | 	shl	local01, #3
1a854     3D A7 82 F1 | 	sub	local01, result1
1a858     02 A6 66 F0 | 	shl	local01, #2
1a85c     32 A9 02 F6 | 	mov	local02, objptr
1a860     16 00 00 FF 
1a864     98 A8 06 F1 | 	add	local02, ##11416
1a868     54 A7 02 F1 | 	add	local01, local02
1a86c     E7 92 02 F6 | 	mov	arg01, fp
1a870     94 30 BF FD | 	call	#_converttofloat
1a874     08 A6 06 F1 | 	add	local01, #8
1a878     53 7B 62 FC | 	wrlong	result1, local01
1a87c     E7 F0 03 F6 | 	mov	ptra, fp
1a880     F2 00 A0 FD | 	call	#popregs_
1a884                 | _do_setlen_ret
1a884     2D 00 64 FD | 	ret
1a888                 | 
1a888                 | ' 
1a888                 | ' ' ------------------ setpan
1a888                 | ' 
1a888                 | ' sub do_setpan
1a888                 | _do_setpan
1a888     02 CA 05 F6 | 	mov	COUNT_, #2
1a88c     E8 00 A0 FD | 	call	#pushregs_
1a890     18 F0 07 F1 | 	add	ptra, #24
1a894     D8 2D BF FD | 	call	#_pop
1a898     3D 93 02 F6 | 	mov	arg01, result1
1a89c     3E A7 02 F6 | 	mov	local01, result2
1a8a0     3F A9 02 F6 | 	mov	local02, result3
1a8a4     E7 92 62 FC | 	wrlong	arg01, fp
1a8a8     04 CE 05 F1 | 	add	fp, #4
1a8ac     E7 A6 62 FC | 	wrlong	local01, fp
1a8b0     04 CE 05 F1 | 	add	fp, #4
1a8b4     E7 A8 62 FC | 	wrlong	local02, fp
1a8b8     08 CE 85 F1 | 	sub	fp, #8
1a8bc     B0 2D BF FD | 	call	#_pop
1a8c0     3D A9 02 F6 | 	mov	local02, result1
1a8c4     0C CE 05 F1 | 	add	fp, #12
1a8c8     E7 A8 62 FC | 	wrlong	local02, fp
1a8cc     04 CE 05 F1 | 	add	fp, #4
1a8d0     E7 7C 62 FC | 	wrlong	result2, fp
1a8d4     04 CE 05 F1 | 	add	fp, #4
1a8d8     E7 7E 62 FC | 	wrlong	result3, fp
1a8dc     08 CE 85 F1 | 	sub	fp, #8
1a8e0     E7 92 02 F6 | 	mov	arg01, fp
1a8e4     0C CE 85 F1 | 	sub	fp, #12
1a8e8     60 2F BF FD | 	call	#_converttoint
1a8ec     3D A7 02 F6 | 	mov	local01, result1
1a8f0     03 A6 66 F0 | 	shl	local01, #3
1a8f4     3D A7 82 F1 | 	sub	local01, result1
1a8f8     02 A6 66 F0 | 	shl	local01, #2
1a8fc     32 A9 02 F6 | 	mov	local02, objptr
1a900     16 00 00 FF 
1a904     98 A8 06 F1 | 	add	local02, ##11416
1a908     54 A7 02 F1 | 	add	local01, local02
1a90c     E7 92 02 F6 | 	mov	arg01, fp
1a910     F4 2F BF FD | 	call	#_converttofloat
1a914     10 A6 06 F1 | 	add	local01, #16
1a918     53 7B 62 FC | 	wrlong	result1, local01
1a91c     E7 F0 03 F6 | 	mov	ptra, fp
1a920     F2 00 A0 FD | 	call	#popregs_
1a924                 | _do_setpan_ret
1a924     2D 00 64 FD | 	ret
1a928                 | 
1a928                 | ' 
1a928                 | ' ' ------------------ setsustain
1a928                 | ' 
1a928                 | ' sub do_setsustain
1a928                 | _do_setsustain
1a928     02 CA 05 F6 | 	mov	COUNT_, #2
1a92c     E8 00 A0 FD | 	call	#pushregs_
1a930     18 F0 07 F1 | 	add	ptra, #24
1a934     38 2D BF FD | 	call	#_pop
1a938     3D 93 02 F6 | 	mov	arg01, result1
1a93c     3E A7 02 F6 | 	mov	local01, result2
1a940     3F A9 02 F6 | 	mov	local02, result3
1a944     E7 92 62 FC | 	wrlong	arg01, fp
1a948     04 CE 05 F1 | 	add	fp, #4
1a94c     E7 A6 62 FC | 	wrlong	local01, fp
1a950     04 CE 05 F1 | 	add	fp, #4
1a954     E7 A8 62 FC | 	wrlong	local02, fp
1a958     08 CE 85 F1 | 	sub	fp, #8
1a95c     10 2D BF FD | 	call	#_pop
1a960     3D A9 02 F6 | 	mov	local02, result1
1a964     0C CE 05 F1 | 	add	fp, #12
1a968     E7 A8 62 FC | 	wrlong	local02, fp
1a96c     04 CE 05 F1 | 	add	fp, #4
1a970     E7 7C 62 FC | 	wrlong	result2, fp
1a974     04 CE 05 F1 | 	add	fp, #4
1a978     E7 7E 62 FC | 	wrlong	result3, fp
1a97c     08 CE 85 F1 | 	sub	fp, #8
1a980     E7 92 02 F6 | 	mov	arg01, fp
1a984     0C CE 85 F1 | 	sub	fp, #12
1a988     C0 2E BF FD | 	call	#_converttoint
1a98c     3D A7 02 F6 | 	mov	local01, result1
1a990     03 A6 66 F0 | 	shl	local01, #3
1a994     3D A7 82 F1 | 	sub	local01, result1
1a998     02 A6 66 F0 | 	shl	local01, #2
1a99c     32 A9 02 F6 | 	mov	local02, objptr
1a9a0     16 00 00 FF 
1a9a4     98 A8 06 F1 | 	add	local02, ##11416
1a9a8     54 A7 02 F1 | 	add	local01, local02
1a9ac     E7 92 02 F6 | 	mov	arg01, fp
1a9b0     98 2E BF FD | 	call	#_converttoint
1a9b4     14 A6 06 F1 | 	add	local01, #20
1a9b8     53 7B 52 FC | 	wrword	result1, local01
1a9bc     E7 F0 03 F6 | 	mov	ptra, fp
1a9c0     F2 00 A0 FD | 	call	#popregs_
1a9c4                 | _do_setsustain_ret
1a9c4     2D 00 64 FD | 	ret
1a9c8                 | 
1a9c8                 | ' 
1a9c8                 | ' ' ------------------ setvol
1a9c8                 | ' 
1a9c8                 | ' sub do_setvol
1a9c8                 | _do_setvol
1a9c8     02 CA 05 F6 | 	mov	COUNT_, #2
1a9cc     E8 00 A0 FD | 	call	#pushregs_
1a9d0     18 F0 07 F1 | 	add	ptra, #24
1a9d4     98 2C BF FD | 	call	#_pop
1a9d8     3D 93 02 F6 | 	mov	arg01, result1
1a9dc     3E A7 02 F6 | 	mov	local01, result2
1a9e0     3F A9 02 F6 | 	mov	local02, result3
1a9e4     E7 92 62 FC | 	wrlong	arg01, fp
1a9e8     04 CE 05 F1 | 	add	fp, #4
1a9ec     E7 A6 62 FC | 	wrlong	local01, fp
1a9f0     04 CE 05 F1 | 	add	fp, #4
1a9f4     E7 A8 62 FC | 	wrlong	local02, fp
1a9f8     08 CE 85 F1 | 	sub	fp, #8
1a9fc     70 2C BF FD | 	call	#_pop
1aa00     3D A9 02 F6 | 	mov	local02, result1
1aa04     0C CE 05 F1 | 	add	fp, #12
1aa08     E7 A8 62 FC | 	wrlong	local02, fp
1aa0c     04 CE 05 F1 | 	add	fp, #4
1aa10     E7 7C 62 FC | 	wrlong	result2, fp
1aa14     04 CE 05 F1 | 	add	fp, #4
1aa18     E7 7E 62 FC | 	wrlong	result3, fp
1aa1c     08 CE 85 F1 | 	sub	fp, #8
1aa20     E7 92 02 F6 | 	mov	arg01, fp
1aa24     0C CE 85 F1 | 	sub	fp, #12
1aa28     20 2E BF FD | 	call	#_converttoint
1aa2c     3D A7 02 F6 | 	mov	local01, result1
1aa30     03 A6 66 F0 | 	shl	local01, #3
1aa34     3D A7 82 F1 | 	sub	local01, result1
1aa38     02 A6 66 F0 | 	shl	local01, #2
1aa3c     32 A9 02 F6 | 	mov	local02, objptr
1aa40     16 00 00 FF 
1aa44     98 A8 06 F1 | 	add	local02, ##11416
1aa48     54 A7 02 F1 | 	add	local01, local02
1aa4c     E7 92 02 F6 | 	mov	arg01, fp
1aa50     B4 2E BF FD | 	call	#_converttofloat
1aa54     0C A6 06 F1 | 	add	local01, #12
1aa58     53 7B 62 FC | 	wrlong	result1, local01
1aa5c     E7 F0 03 F6 | 	mov	ptra, fp
1aa60     F2 00 A0 FD | 	call	#popregs_
1aa64                 | _do_setvol_ret
1aa64     2D 00 64 FD | 	ret
1aa68                 | 
1aa68                 | ' 
1aa68                 | ' ' ------------------ setwave
1aa68                 | ' 
1aa68                 | ' sub do_setwave
1aa68                 | _do_setwave
1aa68     02 CA 05 F6 | 	mov	COUNT_, #2
1aa6c     E8 00 A0 FD | 	call	#pushregs_
1aa70     18 F0 07 F1 | 	add	ptra, #24
1aa74     F8 2B BF FD | 	call	#_pop
1aa78     3D 93 02 F6 | 	mov	arg01, result1
1aa7c     3E A7 02 F6 | 	mov	local01, result2
1aa80     3F A9 02 F6 | 	mov	local02, result3
1aa84     E7 92 62 FC | 	wrlong	arg01, fp
1aa88     04 CE 05 F1 | 	add	fp, #4
1aa8c     E7 A6 62 FC | 	wrlong	local01, fp
1aa90     04 CE 05 F1 | 	add	fp, #4
1aa94     E7 A8 62 FC | 	wrlong	local02, fp
1aa98     08 CE 85 F1 | 	sub	fp, #8
1aa9c     D0 2B BF FD | 	call	#_pop
1aaa0     3D A9 02 F6 | 	mov	local02, result1
1aaa4     0C CE 05 F1 | 	add	fp, #12
1aaa8     E7 A8 62 FC | 	wrlong	local02, fp
1aaac     04 CE 05 F1 | 	add	fp, #4
1aab0     E7 7C 62 FC | 	wrlong	result2, fp
1aab4     04 CE 05 F1 | 	add	fp, #4
1aab8     E7 7E 62 FC | 	wrlong	result3, fp
1aabc     08 CE 85 F1 | 	sub	fp, #8
1aac0     E7 92 02 F6 | 	mov	arg01, fp
1aac4     0C CE 85 F1 | 	sub	fp, #12
1aac8     80 2D BF FD | 	call	#_converttoint
1aacc     3D A7 02 F6 | 	mov	local01, result1
1aad0     03 A6 66 F0 | 	shl	local01, #3
1aad4     3D A7 82 F1 | 	sub	local01, result1
1aad8     02 A6 66 F0 | 	shl	local01, #2
1aadc     32 A9 02 F6 | 	mov	local02, objptr
1aae0     16 00 00 FF 
1aae4     98 A8 06 F1 | 	add	local02, ##11416
1aae8     54 A7 02 F1 | 	add	local01, local02
1aaec     E7 92 02 F6 | 	mov	arg01, fp
1aaf0     58 2D BF FD | 	call	#_converttoint
1aaf4     04 A6 06 F1 | 	add	local01, #4
1aaf8     53 7B 42 FC | 	wrbyte	result1, local01
1aafc     E7 F0 03 F6 | 	mov	ptra, fp
1ab00     F2 00 A0 FD | 	call	#popregs_
1ab04                 | _do_setwave_ret
1ab04     2D 00 64 FD | 	ret
1ab08                 | 
1ab08                 | ' 
1ab08                 | ' ' ------------------ shutup
1ab08                 | ' 
1ab08                 | ' sub do_shutup
1ab08                 | _do_shutup
1ab08     03 CA 05 F6 | 	mov	COUNT_, #3
1ab0c     E8 00 A0 FD | 	call	#pushregs_
1ab10     18 F0 07 F1 | 	add	ptra, #24
1ab14     4C 00 00 FF 
1ab18     00 64 06 F1 | 	add	objptr, ##38912
1ab1c     32 A7 02 FB | 	rdlong	local01, objptr
1ab20     53 A9 02 F6 | 	mov	local02, local01
1ab24     01 A8 66 F0 | 	shl	local02, #1
1ab28     53 A9 02 F1 | 	add	local02, local01
1ab2c     02 A8 66 F0 | 	shl	local02, #2
1ab30     03 00 00 FF 
1ab34     04 64 86 F1 | 	sub	objptr, ##1540
1ab38     32 A9 02 F1 | 	add	local02, objptr
1ab3c     54 A9 0A FB | 	rdlong	local02, local02 wz
1ab40                 | ' 
1ab40                 | ' numpar=compiledline(lineptr_e).result.uresult
1ab40                 | ' if numpar=0 then
1ab40     48 00 00 FF 
1ab44     FC 65 86 F1 | 	sub	objptr, ##37372
1ab48     40 00 90 5D |  if_ne	jmp	#LR__2212
1ab4c                 | '   for i=0 to 7 : dpoke base+64*i+20,0 : next i
1ab4c     00 AA 06 F6 | 	mov	local03, #0
1ab50     38 00 00 FF 
1ab54     90 65 06 F1 | 	add	objptr, ##29072
1ab58     D7 12 48 FB | 	callpa	#(@LR__2211-@LR__2210)>>2,fcache_load_ptr_
1ab5c                 | LR__2210
1ab5c     32 93 02 FB | 	rdlong	arg01, objptr
1ab60     55 A9 02 F6 | 	mov	local02, local03
1ab64     06 A8 66 F0 | 	shl	local02, #6
1ab68     54 93 02 F1 | 	add	arg01, local02
1ab6c     14 92 06 F1 | 	add	arg01, #20
1ab70     49 01 58 FC | 	wrword	#0, arg01
1ab74     01 AA 06 F1 | 	add	local03, #1
1ab78     08 AA 56 F2 | 	cmps	local03, #8 wc
1ab7c     DC FF 9F CD |  if_b	jmp	#LR__2210
1ab80                 | LR__2211
1ab80     38 00 00 FF 
1ab84     90 65 86 F1 | 	sub	objptr, ##29072
1ab88     58 00 90 FD | 	jmp	#LR__2213
1ab8c                 | LR__2212
1ab8c     E0 2A BF FD | 	call	#_pop
1ab90     3F A7 02 F6 | 	mov	local01, result3
1ab94     E7 7A 62 FC | 	wrlong	result1, fp
1ab98     04 CE 05 F1 | 	add	fp, #4
1ab9c     E7 7C 62 FC | 	wrlong	result2, fp
1aba0     04 CE 05 F1 | 	add	fp, #4
1aba4     E7 A6 62 FC | 	wrlong	local01, fp
1aba8     08 CE 85 F1 | 	sub	fp, #8
1abac     E7 92 02 F6 | 	mov	arg01, fp
1abb0     98 2C BF FD | 	call	#_converttoint
1abb4     3D AB 52 F6 | 	abs	local03, result1 wc
1abb8     07 AA 06 F5 | 	and	local03, #7
1abbc     55 A9 82 F6 | 	negc	local02, local03
1abc0     38 00 00 FF 
1abc4     90 65 06 F1 | 	add	objptr, ##29072
1abc8     32 93 02 FB | 	rdlong	arg01, objptr
1abcc     38 00 00 FF 
1abd0     90 65 86 F1 | 	sub	objptr, ##29072
1abd4     06 A8 66 F0 | 	shl	local02, #6
1abd8     54 93 02 F1 | 	add	arg01, local02
1abdc     14 92 06 F1 | 	add	arg01, #20
1abe0     49 01 58 FC | 	wrword	#0, arg01
1abe4                 | LR__2213
1abe4     E7 F0 03 F6 | 	mov	ptra, fp
1abe8     F2 00 A0 FD | 	call	#popregs_
1abec                 | _do_shutup_ret
1abec     2D 00 64 FD | 	ret
1abf0                 | 
1abf0                 | ' 
1abf0                 | ' ' ------------------ sin
1abf0                 | ' 
1abf0                 | ' sub do_sin
1abf0                 | _do_sin
1abf0     01 CA 05 F6 | 	mov	COUNT_, #1
1abf4     E8 00 A0 FD | 	call	#pushregs_
1abf8     10 F0 07 F1 | 	add	ptra, #16
1abfc     4C 00 00 FF 
1ac00     00 64 06 F1 | 	add	objptr, ##38912
1ac04     32 97 02 FB | 	rdlong	arg03, objptr
1ac08     4B 95 02 F6 | 	mov	arg02, arg03
1ac0c     01 94 66 F0 | 	shl	arg02, #1
1ac10     4B 95 02 F1 | 	add	arg02, arg03
1ac14     02 94 66 F0 | 	shl	arg02, #2
1ac18     03 00 00 FF 
1ac1c     04 64 86 F1 | 	sub	objptr, ##1540
1ac20     32 95 02 F1 | 	add	arg02, objptr
1ac24     4A 97 02 FB | 	rdlong	arg03, arg02
1ac28                 | ' 
1ac28                 | ' numpar=compiledline(lineptr_e).result.uresult
1ac28                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
1ac28     02 96 16 F2 | 	cmp	arg03, #2 wc
1ac2c     48 00 00 FF 
1ac30     FC 65 86 F1 | 	sub	objptr, ##37372
1ac34     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
1ac38     40 00 90 4D |  if_c_and_nz	jmp	#LR__2220
1ac3c     00 92 06 F6 | 	mov	arg01, #0
1ac40     48 F6 B0 FD | 	call	#__system___getiolock_0622
1ac44     3D 93 02 F6 | 	mov	arg01, result1
1ac48     BC A0 B0 FD | 	call	#__system___lockmem
1ac4c     9A 01 00 FF 
1ac50     76 94 06 F6 | 	mov	arg02, ##@LR__6100
1ac54     00 92 06 F6 | 	mov	arg01, #0
1ac58     00 96 06 F6 | 	mov	arg03, #0
1ac5c     9C AD B0 FD | 	call	#__system___basic_print_string
1ac60     00 92 06 F6 | 	mov	arg01, #0
1ac64     24 F6 B0 FD | 	call	#__system___getiolock_0622
1ac68     3D 01 68 FC | 	wrlong	#0, result1
1ac6c     27 92 06 F6 | 	mov	arg01, #39
1ac70     00 94 06 F6 | 	mov	arg02, #0
1ac74     C0 63 B0 FD | 	call	#_printerror
1ac78     64 00 90 FD | 	jmp	#LR__2221
1ac7c                 | LR__2220
1ac7c     F0 29 BF FD | 	call	#_pop
1ac80     E7 7A 62 FC | 	wrlong	result1, fp
1ac84     04 CE 05 F1 | 	add	fp, #4
1ac88     E7 7C 62 FC | 	wrlong	result2, fp
1ac8c     04 CE 05 F1 | 	add	fp, #4
1ac90     E7 7E 62 FC | 	wrlong	result3, fp
1ac94     08 CE 85 F1 | 	sub	fp, #8
1ac98     54 00 00 FF 
1ac9c     60 64 06 F1 | 	add	objptr, ##43104
1aca0     32 A7 02 FB | 	rdlong	local01, objptr
1aca4     54 00 00 FF 
1aca8     60 64 86 F1 | 	sub	objptr, ##43104
1acac     E7 92 02 F6 | 	mov	arg01, fp
1acb0     54 2C BF FD | 	call	#_converttofloat
1acb4     3D 95 02 F6 | 	mov	arg02, result1
1acb8     53 93 02 F6 | 	mov	arg01, local01
1acbc     18 C7 B0 FD | 	call	#__system___float_mul
1acc0     3D 93 02 F6 | 	mov	arg01, result1
1acc4     80 D0 B0 FD | 	call	#__system____builtin_sinf
1acc8     E7 7A 62 FC | 	wrlong	result1, fp
1accc     08 CE 05 F1 | 	add	fp, #8
1acd0     E7 3C 68 FC | 	wrlong	#30, fp
1acd4     08 CE 85 F1 | 	sub	fp, #8
1acd8     E7 92 02 F6 | 	mov	arg01, fp
1acdc     20 2A BF FD | 	call	#_push
1ace0                 | LR__2221
1ace0     E7 F0 03 F6 | 	mov	ptra, fp
1ace4     F2 00 A0 FD | 	call	#popregs_
1ace8                 | _do_sin_ret
1ace8     2D 00 64 FD | 	ret
1acec                 | 
1acec                 | ' 
1acec                 | ' ' ------------------ skip
1acec                 | ' ' A helper token for on-gosub: skips the rest of gosubs
1acec                 | ' 
1acec                 | ' sub do_skip
1acec                 | _do_skip
1acec     4C 00 00 FF 
1acf0     00 64 06 F1 | 	add	objptr, ##38912
1acf4     32 81 02 FB | 	rdlong	_var01, objptr
1acf8     40 83 02 F6 | 	mov	_var02, _var01
1acfc     01 82 66 F0 | 	shl	_var02, #1
1ad00     40 83 02 F1 | 	add	_var02, _var01
1ad04     02 82 66 F0 | 	shl	_var02, #2
1ad08     03 00 00 FF 
1ad0c     04 64 86 F1 | 	sub	objptr, ##1540
1ad10     32 83 02 F1 | 	add	_var02, objptr
1ad14     41 83 02 FB | 	rdlong	_var02, _var02
1ad18     01 82 86 F1 | 	sub	_var02, #1
1ad1c     03 00 00 FF 
1ad20     04 64 06 F1 | 	add	objptr, ##1540
1ad24     32 83 62 FC | 	wrlong	_var02, objptr
1ad28     4C 00 00 FF 
1ad2c     00 64 86 F1 | 	sub	objptr, ##38912
1ad30                 | _do_skip_ret
1ad30     2D 00 64 FD | 	ret
1ad34                 | 
1ad34                 | ' 
1ad34                 | ' ' ------------------ sprite
1ad34                 | ' 
1ad34                 | ' sub do_sprite
1ad34                 | _do_sprite
1ad34     02 CA 05 F6 | 	mov	COUNT_, #2
1ad38     E8 00 A0 FD | 	call	#pushregs_
1ad3c     30 F0 07 F1 | 	add	ptra, #48
1ad40     2C 29 BF FD | 	call	#_pop
1ad44     3D 95 02 F6 | 	mov	arg02, result1
1ad48     3E 97 02 F6 | 	mov	arg03, result2
1ad4c     3F 93 02 F6 | 	mov	arg01, result3
1ad50     18 CE 05 F1 | 	add	fp, #24
1ad54     E7 94 62 FC | 	wrlong	arg02, fp
1ad58     04 CE 05 F1 | 	add	fp, #4
1ad5c     E7 96 62 FC | 	wrlong	arg03, fp
1ad60     04 CE 05 F1 | 	add	fp, #4
1ad64     E7 92 62 FC | 	wrlong	arg01, fp
1ad68     20 CE 85 F1 | 	sub	fp, #32
1ad6c     00 29 BF FD | 	call	#_pop
1ad70     3D 95 02 F6 | 	mov	arg02, result1
1ad74     3E 97 02 F6 | 	mov	arg03, result2
1ad78     3F 93 02 F6 | 	mov	arg01, result3
1ad7c     0C CE 05 F1 | 	add	fp, #12
1ad80     E7 94 62 FC | 	wrlong	arg02, fp
1ad84     04 CE 05 F1 | 	add	fp, #4
1ad88     E7 96 62 FC | 	wrlong	arg03, fp
1ad8c     04 CE 05 F1 | 	add	fp, #4
1ad90     E7 92 62 FC | 	wrlong	arg01, fp
1ad94     14 CE 85 F1 | 	sub	fp, #20
1ad98     D4 28 BF FD | 	call	#_pop
1ad9c     3F 95 02 F6 | 	mov	arg02, result3
1ada0     E7 7A 62 FC | 	wrlong	result1, fp
1ada4     04 CE 05 F1 | 	add	fp, #4
1ada8     E7 7C 62 FC | 	wrlong	result2, fp
1adac     04 CE 05 F1 | 	add	fp, #4
1adb0     E7 94 62 FC | 	wrlong	arg02, fp
1adb4     08 CE 85 F1 | 	sub	fp, #8
1adb8     E7 92 02 F6 | 	mov	arg01, fp
1adbc     8C 2A BF FD | 	call	#_converttoint
1adc0     3D A7 02 F6 | 	mov	local01, result1
1adc4     E7 92 02 F6 | 	mov	arg01, fp
1adc8     0C 92 06 F1 | 	add	arg01, #12
1adcc     7C 2A BF FD | 	call	#_converttoint
1add0     3D A9 02 F6 | 	mov	local02, result1
1add4     E7 92 02 F6 | 	mov	arg01, fp
1add8     18 92 06 F1 | 	add	arg01, #24
1addc     6C 2A BF FD | 	call	#_converttoint
1ade0     3D 97 02 F6 | 	mov	arg03, result1
1ade4     53 93 02 F6 | 	mov	arg01, local01
1ade8     54 95 02 F6 | 	mov	arg02, local02
1adec     F4 71 B0 FD | 	call	#_hg010b_spin2_setspritepos
1adf0     E7 F0 03 F6 | 	mov	ptra, fp
1adf4     F2 00 A0 FD | 	call	#popregs_
1adf8                 | _do_sprite_ret
1adf8     2D 00 64 FD | 	ret
1adfc                 | 
1adfc                 | ' 
1adfc                 | ' ' ------------------ sqr
1adfc                 | ' 
1adfc                 | ' sub do_sqr
1adfc                 | _do_sqr
1adfc     00 CA 05 F6 | 	mov	COUNT_, #0
1ae00     E8 00 A0 FD | 	call	#pushregs_
1ae04     10 F0 07 F1 | 	add	ptra, #16
1ae08     4C 00 00 FF 
1ae0c     00 64 06 F1 | 	add	objptr, ##38912
1ae10     32 97 02 FB | 	rdlong	arg03, objptr
1ae14     4B 95 02 F6 | 	mov	arg02, arg03
1ae18     01 94 66 F0 | 	shl	arg02, #1
1ae1c     4B 95 02 F1 | 	add	arg02, arg03
1ae20     02 94 66 F0 | 	shl	arg02, #2
1ae24     03 00 00 FF 
1ae28     04 64 86 F1 | 	sub	objptr, ##1540
1ae2c     32 95 02 F1 | 	add	arg02, objptr
1ae30     4A 97 02 FB | 	rdlong	arg03, arg02
1ae34                 | ' 
1ae34                 | ' numpar=compiledline(lineptr_e).result.uresult
1ae34                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
1ae34     02 96 16 F2 | 	cmp	arg03, #2 wc
1ae38     48 00 00 FF 
1ae3c     FC 65 86 F1 | 	sub	objptr, ##37372
1ae40     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
1ae44     40 00 90 4D |  if_c_and_nz	jmp	#LR__2230
1ae48     00 92 06 F6 | 	mov	arg01, #0
1ae4c     3C F4 B0 FD | 	call	#__system___getiolock_0622
1ae50     3D 93 02 F6 | 	mov	arg01, result1
1ae54     B0 9E B0 FD | 	call	#__system___lockmem
1ae58     9A 01 00 FF 
1ae5c     7C 94 06 F6 | 	mov	arg02, ##@LR__6101
1ae60     00 92 06 F6 | 	mov	arg01, #0
1ae64     00 96 06 F6 | 	mov	arg03, #0
1ae68     90 AB B0 FD | 	call	#__system___basic_print_string
1ae6c     00 92 06 F6 | 	mov	arg01, #0
1ae70     18 F4 B0 FD | 	call	#__system___getiolock_0622
1ae74     3D 01 68 FC | 	wrlong	#0, result1
1ae78     27 92 06 F6 | 	mov	arg01, #39
1ae7c     00 94 06 F6 | 	mov	arg02, #0
1ae80     B4 61 B0 FD | 	call	#_printerror
1ae84     48 00 90 FD | 	jmp	#LR__2231
1ae88                 | LR__2230
1ae88     E4 27 BF FD | 	call	#_pop
1ae8c     3F 97 02 F6 | 	mov	arg03, result3
1ae90     E7 7A 62 FC | 	wrlong	result1, fp
1ae94     04 CE 05 F1 | 	add	fp, #4
1ae98     E7 7C 62 FC | 	wrlong	result2, fp
1ae9c     04 CE 05 F1 | 	add	fp, #4
1aea0     E7 96 62 FC | 	wrlong	arg03, fp
1aea4     08 CE 85 F1 | 	sub	fp, #8
1aea8     E7 92 02 F6 | 	mov	arg01, fp
1aeac     58 2A BF FD | 	call	#_converttofloat
1aeb0     3D 93 02 F6 | 	mov	arg01, result1
1aeb4     48 C4 B0 FD | 	call	#__system___float_sqrt
1aeb8     E7 7A 62 FC | 	wrlong	result1, fp
1aebc     08 CE 05 F1 | 	add	fp, #8
1aec0     E7 3C 68 FC | 	wrlong	#30, fp
1aec4     08 CE 85 F1 | 	sub	fp, #8
1aec8     E7 92 02 F6 | 	mov	arg01, fp
1aecc     30 28 BF FD | 	call	#_push
1aed0                 | LR__2231
1aed0     E7 F0 03 F6 | 	mov	ptra, fp
1aed4     F2 00 A0 FD | 	call	#popregs_
1aed8                 | _do_sqr_ret
1aed8     2D 00 64 FD | 	ret
1aedc                 | 
1aedc                 | ' 
1aedc                 | ' ' ------------------ stick
1aedc                 | ' 
1aedc                 | ' sub do_stick
1aedc                 | _do_stick
1aedc     02 CA 05 F6 | 	mov	COUNT_, #2
1aee0     E8 00 A0 FD | 	call	#pushregs_
1aee4     10 F0 07 F1 | 	add	ptra, #16
1aee8     4C 00 00 FF 
1aeec     00 64 06 F1 | 	add	objptr, ##38912
1aef0     32 A7 02 FB | 	rdlong	local01, objptr
1aef4     53 97 02 F6 | 	mov	arg03, local01
1aef8     01 96 66 F0 | 	shl	arg03, #1
1aefc     53 97 02 F1 | 	add	arg03, local01
1af00     02 96 66 F0 | 	shl	arg03, #2
1af04     03 00 00 FF 
1af08     04 64 86 F1 | 	sub	objptr, ##1540
1af0c     32 97 02 F1 | 	add	arg03, objptr
1af10     4B A9 02 FB | 	rdlong	local02, arg03
1af14                 | ' 
1af14                 | ' numpar=compiledline(lineptr_e).result.uresult
1af14                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
1af14     02 A8 16 F2 | 	cmp	local02, #2 wc
1af18     48 00 00 FF 
1af1c     FC 65 86 F1 | 	sub	objptr, ##37372
1af20     40 00 90 CD |  if_b	jmp	#LR__2240
1af24     00 92 06 F6 | 	mov	arg01, #0
1af28     60 F3 B0 FD | 	call	#__system___getiolock_0622
1af2c     3D 93 02 F6 | 	mov	arg01, result1
1af30     D4 9D B0 FD | 	call	#__system___lockmem
1af34     9A 01 00 FF 
1af38     82 94 06 F6 | 	mov	arg02, ##@LR__6102
1af3c     00 92 06 F6 | 	mov	arg01, #0
1af40     00 96 06 F6 | 	mov	arg03, #0
1af44     B4 AA B0 FD | 	call	#__system___basic_print_string
1af48     00 92 06 F6 | 	mov	arg01, #0
1af4c     3C F3 B0 FD | 	call	#__system___getiolock_0622
1af50     3D 01 68 FC | 	wrlong	#0, result1
1af54     27 92 06 F6 | 	mov	arg01, #39
1af58     00 94 06 F6 | 	mov	arg02, #0
1af5c     D8 60 B0 FD | 	call	#_printerror
1af60     E8 00 90 FD | 	jmp	#LR__2244
1af64                 | LR__2240
1af64                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
1af64     00 A8 0E F2 | 	cmp	local02, #0 wz
1af68     30 00 90 5D |  if_ne	jmp	#LR__2241
1af6c     53 00 00 FF 
1af70     D4 65 06 F1 | 	add	objptr, ##42964
1af74     32 A9 02 FB | 	rdlong	local02, objptr
1af78     53 00 00 FF 
1af7c     D4 65 86 F1 | 	sub	objptr, ##42964
1af80     E7 A8 62 FC | 	wrlong	local02, fp
1af84     08 CE 05 F1 | 	add	fp, #8
1af88     E7 3A 68 FC | 	wrlong	#29, fp
1af8c     08 CE 85 F1 | 	sub	fp, #8
1af90     E7 92 02 F6 | 	mov	arg01, fp
1af94     68 27 BF FD | 	call	#_push
1af98     B0 00 90 FD | 	jmp	#LR__2244
1af9c                 | LR__2241
1af9c     D0 26 BF FD | 	call	#_pop
1afa0     E7 7A 62 FC | 	wrlong	result1, fp
1afa4     04 CE 05 F1 | 	add	fp, #4
1afa8     E7 7C 62 FC | 	wrlong	result2, fp
1afac     04 CE 05 F1 | 	add	fp, #4
1afb0     E7 7E 62 FC | 	wrlong	result3, fp
1afb4                 | ' t1=pop()
1afb4                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1afb4     08 CE 85 F1 | 	sub	fp, #8
1afb8     1C 7E 0E F2 | 	cmp	result3, #28 wz
1afbc     08 CE 05 51 |  if_ne	add	fp, #8
1afc0     E7 A6 02 5B |  if_ne	rdlong	local01, fp
1afc4     08 CE 85 51 |  if_ne	sub	fp, #8
1afc8     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
1afcc     70 00 90 5D |  if_ne	jmp	#LR__2243
1afd0     E7 A6 02 FB | 	rdlong	local01, fp
1afd4     54 00 00 FF 
1afd8     C0 64 06 F1 | 	add	objptr, ##43200
1afdc     32 A7 62 FC | 	wrlong	local01, objptr
1afe0                 | '   q=t1.result.uresult
1afe0                 | '   if q<7 then 
1afe0     54 00 00 FF 
1afe4     C0 64 86 F1 | 	sub	objptr, ##43200
1afe8     07 A6 56 F2 | 	cmps	local01, #7 wc
1afec     40 00 90 3D |  if_ae	jmp	#LR__2242
1aff0     54 00 00 FF 
1aff4     C0 64 06 F1 | 	add	objptr, ##43200
1aff8     32 A7 02 FB | 	rdlong	local01, objptr
1affc     02 A6 66 F0 | 	shl	local01, #2
1b000     EC 64 86 F1 | 	sub	objptr, #236
1b004     32 A7 02 F1 | 	add	local01, objptr
1b008     53 A9 02 FB | 	rdlong	local02, local01
1b00c     E7 A8 62 FC | 	wrlong	local02, fp
1b010     08 CE 05 F1 | 	add	fp, #8
1b014     E7 3A 68 FC | 	wrlong	#29, fp
1b018     08 CE 85 F1 | 	sub	fp, #8
1b01c     E7 92 02 F6 | 	mov	arg01, fp
1b020     53 00 00 FF 
1b024     D4 65 86 F1 | 	sub	objptr, ##42964
1b028     D4 26 BF FD | 	call	#_push
1b02c                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
1b02c     1C 00 90 FD | 	jmp	#LR__2244
1b030                 | LR__2242
1b030     29 92 06 F6 | 	mov	arg01, #41
1b034     00 94 06 F6 | 	mov	arg02, #0
1b038     FC 5F B0 FD | 	call	#_printerror
1b03c                 | '      printerror(41) : return
1b03c     0C 00 90 FD | 	jmp	#LR__2244
1b040                 | LR__2243
1b040     29 92 06 F6 | 	mov	arg01, #41
1b044     00 94 06 F6 | 	mov	arg02, #0
1b048     EC 5F B0 FD | 	call	#_printerror
1b04c                 | LR__2244
1b04c     E7 F0 03 F6 | 	mov	ptra, fp
1b050     F2 00 A0 FD | 	call	#popregs_
1b054                 | _do_stick_ret
1b054     2D 00 64 FD | 	ret
1b058                 | 
1b058                 | ' 
1b058                 | ' 
1b058                 | ' sub do_str
1b058                 | _do_str
1b058     02 CA 05 F6 | 	mov	COUNT_, #2
1b05c     E8 00 A0 FD | 	call	#pushregs_
1b060     14 F0 07 F1 | 	add	ptra, #20
1b064     4C 00 00 FF 
1b068     00 64 06 F1 | 	add	objptr, ##38912
1b06c     32 97 02 FB | 	rdlong	arg03, objptr
1b070     4B 95 02 F6 | 	mov	arg02, arg03
1b074     01 94 66 F0 | 	shl	arg02, #1
1b078     4B 95 02 F1 | 	add	arg02, arg03
1b07c     02 94 66 F0 | 	shl	arg02, #2
1b080     03 00 00 FF 
1b084     04 64 86 F1 | 	sub	objptr, ##1540
1b088     32 95 02 F1 | 	add	arg02, objptr
1b08c     4A 97 02 FB | 	rdlong	arg03, arg02
1b090                 | ' 
1b090                 | ' numpar=compiledline(lineptr_e).result.uresult
1b090                 | ' if numpar<>1 then print "str$: "; : printerror(39) : return
1b090     01 96 0E F2 | 	cmp	arg03, #1 wz
1b094     48 00 00 FF 
1b098     FC 65 86 F1 | 	sub	objptr, ##37372
1b09c     40 00 90 AD |  if_e	jmp	#LR__2250
1b0a0     00 92 06 F6 | 	mov	arg01, #0
1b0a4     E4 F1 B0 FD | 	call	#__system___getiolock_0622
1b0a8     3D 93 02 F6 | 	mov	arg01, result1
1b0ac     58 9C B0 FD | 	call	#__system___lockmem
1b0b0     9A 01 00 FF 
1b0b4     8A 94 06 F6 | 	mov	arg02, ##@LR__6103
1b0b8     00 92 06 F6 | 	mov	arg01, #0
1b0bc     00 96 06 F6 | 	mov	arg03, #0
1b0c0     38 A9 B0 FD | 	call	#__system___basic_print_string
1b0c4     00 92 06 F6 | 	mov	arg01, #0
1b0c8     C0 F1 B0 FD | 	call	#__system___getiolock_0622
1b0cc     3D 01 68 FC | 	wrlong	#0, result1
1b0d0     27 92 06 F6 | 	mov	arg01, #39
1b0d4     00 94 06 F6 | 	mov	arg02, #0
1b0d8     5C 5F B0 FD | 	call	#_printerror
1b0dc     F0 00 90 FD | 	jmp	#LR__2259
1b0e0                 | LR__2250
1b0e0     8C 25 BF FD | 	call	#_pop
1b0e4     3F 97 02 F6 | 	mov	arg03, result3
1b0e8     E7 7A 62 FC | 	wrlong	result1, fp
1b0ec     04 CE 05 F1 | 	add	fp, #4
1b0f0     E7 7C 62 FC | 	wrlong	result2, fp
1b0f4     04 CE 05 F1 | 	add	fp, #4
1b0f8     E7 96 62 FC | 	wrlong	arg03, fp
1b0fc                 | ' 
1b0fc                 | ' t1=pop()
1b0fc                 | ' if t1.result_type=result_int then 
1b0fc     08 CE 85 F1 | 	sub	fp, #8
1b100     1C 96 0E F2 | 	cmp	arg03, #28 wz
1b104     28 00 90 5D |  if_ne	jmp	#LR__2251
1b108     E7 92 02 FB | 	rdlong	arg01, fp
1b10c     49 93 52 F6 | 	abs	arg01, arg01 wc
1b110     1F A6 C6 C9 |  if_b	decod	local01, #31
1b114     00 A6 06 36 |  if_ae	mov	local01, #0
1b118     B8 BE B0 FD | 	call	#__system___float_fromuns
1b11c     53 7B 62 F5 | 	xor	result1, local01
1b120     3D 93 02 F6 | 	mov	arg01, result1
1b124     80 B6 B0 FD | 	call	#__system__str_S
1b128     3D A9 02 F6 | 	mov	local02, result1
1b12c     88 00 90 FD | 	jmp	#LR__2258
1b130                 | LR__2251
1b130     08 CE 05 F1 | 	add	fp, #8
1b134     E7 96 02 FB | 	rdlong	arg03, fp
1b138     08 CE 85 F1 | 	sub	fp, #8
1b13c     1D 96 0E F2 | 	cmp	arg03, #29 wz
1b140     18 00 90 5D |  if_ne	jmp	#LR__2252
1b144     E7 92 02 FB | 	rdlong	arg01, fp
1b148     88 BE B0 FD | 	call	#__system___float_fromuns
1b14c     3D 93 02 F6 | 	mov	arg01, result1
1b150     54 B6 B0 FD | 	call	#__system__str_S
1b154     3D A9 02 F6 | 	mov	local02, result1
1b158     5C 00 90 FD | 	jmp	#LR__2257
1b15c                 | LR__2252
1b15c     08 CE 05 F1 | 	add	fp, #8
1b160     E7 96 02 FB | 	rdlong	arg03, fp
1b164     08 CE 85 F1 | 	sub	fp, #8
1b168     1E 96 0E F2 | 	cmp	arg03, #30 wz
1b16c     10 00 90 5D |  if_ne	jmp	#LR__2253
1b170     E7 92 02 FB | 	rdlong	arg01, fp
1b174     30 B6 B0 FD | 	call	#__system__str_S
1b178     3D A9 02 F6 | 	mov	local02, result1
1b17c     38 00 90 FD | 	jmp	#LR__2256
1b180                 | LR__2253
1b180     08 CE 05 F1 | 	add	fp, #8
1b184     E7 96 02 FB | 	rdlong	arg03, fp
1b188     08 CE 85 F1 | 	sub	fp, #8
1b18c     2B 96 0E F2 | 	cmp	arg03, #43 wz
1b190     10 00 90 5D |  if_ne	jmp	#LR__2254
1b194     E7 92 02 FB | 	rdlong	arg01, fp
1b198     44 26 BF FD | 	call	#_convertstring
1b19c     3D A9 02 F6 | 	mov	local02, result1
1b1a0     14 00 90 FD | 	jmp	#LR__2255
1b1a4                 | LR__2254
1b1a4     08 CE 05 F1 | 	add	fp, #8
1b1a8     E7 7C 02 FB | 	rdlong	result2, fp
1b1ac     08 CE 85 F1 | 	sub	fp, #8
1b1b0     1F 7C 0E F2 | 	cmp	result2, #31 wz
1b1b4     E7 A8 02 AB |  if_e	rdlong	local02, fp
1b1b8                 | LR__2255
1b1b8                 | LR__2256
1b1b8                 | LR__2257
1b1b8                 | LR__2258
1b1b8     E7 A8 62 FC | 	wrlong	local02, fp
1b1bc     08 CE 05 F1 | 	add	fp, #8
1b1c0     E7 3E 68 FC | 	wrlong	#31, fp
1b1c4     08 CE 85 F1 | 	sub	fp, #8
1b1c8     E7 92 02 F6 | 	mov	arg01, fp
1b1cc     30 25 BF FD | 	call	#_push
1b1d0                 | '     t1.result.sresult=s : t1.result_type=result_string : push t1 : return 
1b1d0                 | LR__2259
1b1d0     E7 F0 03 F6 | 	mov	ptra, fp
1b1d4     F2 00 A0 FD | 	call	#popregs_
1b1d8                 | _do_str_ret
1b1d8     2D 00 64 FD | 	ret
1b1dc                 | 
1b1dc                 | ' ' ------------------ strig
1b1dc                 | ' 
1b1dc                 | ' sub do_strig
1b1dc                 | _do_strig
1b1dc     02 CA 05 F6 | 	mov	COUNT_, #2
1b1e0     E8 00 A0 FD | 	call	#pushregs_
1b1e4     10 F0 07 F1 | 	add	ptra, #16
1b1e8     4C 00 00 FF 
1b1ec     00 64 06 F1 | 	add	objptr, ##38912
1b1f0     32 A7 02 FB | 	rdlong	local01, objptr
1b1f4     53 97 02 F6 | 	mov	arg03, local01
1b1f8     01 96 66 F0 | 	shl	arg03, #1
1b1fc     53 97 02 F1 | 	add	arg03, local01
1b200     02 96 66 F0 | 	shl	arg03, #2
1b204     03 00 00 FF 
1b208     04 64 86 F1 | 	sub	objptr, ##1540
1b20c     32 97 02 F1 | 	add	arg03, objptr
1b210     4B A9 02 FB | 	rdlong	local02, arg03
1b214                 | ' 
1b214                 | ' numpar=compiledline(lineptr_e).result.uresult
1b214                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
1b214     02 A8 16 F2 | 	cmp	local02, #2 wc
1b218     48 00 00 FF 
1b21c     FC 65 86 F1 | 	sub	objptr, ##37372
1b220     40 00 90 CD |  if_b	jmp	#LR__2260
1b224     00 92 06 F6 | 	mov	arg01, #0
1b228     60 F0 B0 FD | 	call	#__system___getiolock_0622
1b22c     3D 93 02 F6 | 	mov	arg01, result1
1b230     D4 9A B0 FD | 	call	#__system___lockmem
1b234     9A 01 00 FF 
1b238     91 94 06 F6 | 	mov	arg02, ##@LR__6104
1b23c     00 92 06 F6 | 	mov	arg01, #0
1b240     00 96 06 F6 | 	mov	arg03, #0
1b244     B4 A7 B0 FD | 	call	#__system___basic_print_string
1b248     00 92 06 F6 | 	mov	arg01, #0
1b24c     3C F0 B0 FD | 	call	#__system___getiolock_0622
1b250     3D 01 68 FC | 	wrlong	#0, result1
1b254     27 92 06 F6 | 	mov	arg01, #39
1b258     00 94 06 F6 | 	mov	arg02, #0
1b25c     D8 5D B0 FD | 	call	#_printerror
1b260     E8 00 90 FD | 	jmp	#LR__2264
1b264                 | LR__2260
1b264                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
1b264     00 A8 0E F2 | 	cmp	local02, #0 wz
1b268     30 00 90 5D |  if_ne	jmp	#LR__2261
1b26c     53 00 00 FF 
1b270     F0 65 06 F1 | 	add	objptr, ##42992
1b274     32 A9 02 FB | 	rdlong	local02, objptr
1b278     53 00 00 FF 
1b27c     F0 65 86 F1 | 	sub	objptr, ##42992
1b280     E7 A8 62 FC | 	wrlong	local02, fp
1b284     08 CE 05 F1 | 	add	fp, #8
1b288     E7 3A 68 FC | 	wrlong	#29, fp
1b28c     08 CE 85 F1 | 	sub	fp, #8
1b290     E7 92 02 F6 | 	mov	arg01, fp
1b294     68 24 BF FD | 	call	#_push
1b298     B0 00 90 FD | 	jmp	#LR__2264
1b29c                 | LR__2261
1b29c     D0 23 BF FD | 	call	#_pop
1b2a0     E7 7A 62 FC | 	wrlong	result1, fp
1b2a4     04 CE 05 F1 | 	add	fp, #4
1b2a8     E7 7C 62 FC | 	wrlong	result2, fp
1b2ac     04 CE 05 F1 | 	add	fp, #4
1b2b0     E7 7E 62 FC | 	wrlong	result3, fp
1b2b4                 | ' t1=pop()
1b2b4                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1b2b4     08 CE 85 F1 | 	sub	fp, #8
1b2b8     1C 7E 0E F2 | 	cmp	result3, #28 wz
1b2bc     08 CE 05 51 |  if_ne	add	fp, #8
1b2c0     E7 A6 02 5B |  if_ne	rdlong	local01, fp
1b2c4     08 CE 85 51 |  if_ne	sub	fp, #8
1b2c8     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
1b2cc     70 00 90 5D |  if_ne	jmp	#LR__2263
1b2d0     E7 A6 02 FB | 	rdlong	local01, fp
1b2d4     54 00 00 FF 
1b2d8     C0 64 06 F1 | 	add	objptr, ##43200
1b2dc     32 A7 62 FC | 	wrlong	local01, objptr
1b2e0                 | '   q=t1.result.uresult
1b2e0                 | '   if q<7 then 
1b2e0     54 00 00 FF 
1b2e4     C0 64 86 F1 | 	sub	objptr, ##43200
1b2e8     07 A6 56 F2 | 	cmps	local01, #7 wc
1b2ec     40 00 90 3D |  if_ae	jmp	#LR__2262
1b2f0     54 00 00 FF 
1b2f4     C0 64 06 F1 | 	add	objptr, ##43200
1b2f8     32 A7 02 FB | 	rdlong	local01, objptr
1b2fc     02 A6 66 F0 | 	shl	local01, #2
1b300     D0 64 86 F1 | 	sub	objptr, #208
1b304     32 A7 02 F1 | 	add	local01, objptr
1b308     53 A9 02 FB | 	rdlong	local02, local01
1b30c     E7 A8 62 FC | 	wrlong	local02, fp
1b310     08 CE 05 F1 | 	add	fp, #8
1b314     E7 3A 68 FC | 	wrlong	#29, fp
1b318     08 CE 85 F1 | 	sub	fp, #8
1b31c     E7 92 02 F6 | 	mov	arg01, fp
1b320     53 00 00 FF 
1b324     F0 65 86 F1 | 	sub	objptr, ##42992
1b328     D4 23 BF FD | 	call	#_push
1b32c                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
1b32c     1C 00 90 FD | 	jmp	#LR__2264
1b330                 | LR__2262
1b330     29 92 06 F6 | 	mov	arg01, #41
1b334     00 94 06 F6 | 	mov	arg02, #0
1b338     FC 5C B0 FD | 	call	#_printerror
1b33c                 | '      printerror(41) : return
1b33c     0C 00 90 FD | 	jmp	#LR__2264
1b340                 | LR__2263
1b340     29 92 06 F6 | 	mov	arg01, #41
1b344     00 94 06 F6 | 	mov	arg02, #0
1b348     EC 5C B0 FD | 	call	#_printerror
1b34c                 | LR__2264
1b34c     E7 F0 03 F6 | 	mov	ptra, fp
1b350     F2 00 A0 FD | 	call	#popregs_
1b354                 | _do_strig_ret
1b354     2D 00 64 FD | 	ret
1b358                 | 
1b358                 | ' 
1b358                 | ' ' ------------------ tan
1b358                 | ' 
1b358                 | ' sub do_tan
1b358                 | _do_tan
1b358     01 CA 05 F6 | 	mov	COUNT_, #1
1b35c     E8 00 A0 FD | 	call	#pushregs_
1b360     10 F0 07 F1 | 	add	ptra, #16
1b364     4C 00 00 FF 
1b368     00 64 06 F1 | 	add	objptr, ##38912
1b36c     32 97 02 FB | 	rdlong	arg03, objptr
1b370     4B 95 02 F6 | 	mov	arg02, arg03
1b374     01 94 66 F0 | 	shl	arg02, #1
1b378     4B 95 02 F1 | 	add	arg02, arg03
1b37c     02 94 66 F0 | 	shl	arg02, #2
1b380     03 00 00 FF 
1b384     04 64 86 F1 | 	sub	objptr, ##1540
1b388     32 95 02 F1 | 	add	arg02, objptr
1b38c     4A 97 02 FB | 	rdlong	arg03, arg02
1b390                 | ' 
1b390                 | ' numpar=compiledline(lineptr_e).result.uresult
1b390                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
1b390     02 96 16 F2 | 	cmp	arg03, #2 wc
1b394     48 00 00 FF 
1b398     FC 65 86 F1 | 	sub	objptr, ##37372
1b39c     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
1b3a0     40 00 90 4D |  if_c_and_nz	jmp	#LR__2270
1b3a4     00 92 06 F6 | 	mov	arg01, #0
1b3a8     E0 EE B0 FD | 	call	#__system___getiolock_0622
1b3ac     3D 93 02 F6 | 	mov	arg01, result1
1b3b0     54 99 B0 FD | 	call	#__system___lockmem
1b3b4     9A 01 00 FF 
1b3b8     99 94 06 F6 | 	mov	arg02, ##@LR__6105
1b3bc     00 92 06 F6 | 	mov	arg01, #0
1b3c0     00 96 06 F6 | 	mov	arg03, #0
1b3c4     34 A6 B0 FD | 	call	#__system___basic_print_string
1b3c8     00 92 06 F6 | 	mov	arg01, #0
1b3cc     BC EE B0 FD | 	call	#__system___getiolock_0622
1b3d0     3D 01 68 FC | 	wrlong	#0, result1
1b3d4     27 92 06 F6 | 	mov	arg01, #39
1b3d8     00 94 06 F6 | 	mov	arg02, #0
1b3dc     58 5C B0 FD | 	call	#_printerror
1b3e0     64 00 90 FD | 	jmp	#LR__2271
1b3e4                 | LR__2270
1b3e4     88 22 BF FD | 	call	#_pop
1b3e8     E7 7A 62 FC | 	wrlong	result1, fp
1b3ec     04 CE 05 F1 | 	add	fp, #4
1b3f0     E7 7C 62 FC | 	wrlong	result2, fp
1b3f4     04 CE 05 F1 | 	add	fp, #4
1b3f8     E7 7E 62 FC | 	wrlong	result3, fp
1b3fc     08 CE 85 F1 | 	sub	fp, #8
1b400     54 00 00 FF 
1b404     60 64 06 F1 | 	add	objptr, ##43104
1b408     32 A7 02 FB | 	rdlong	local01, objptr
1b40c     54 00 00 FF 
1b410     60 64 86 F1 | 	sub	objptr, ##43104
1b414     E7 92 02 F6 | 	mov	arg01, fp
1b418     EC 24 BF FD | 	call	#_converttofloat
1b41c     3D 95 02 F6 | 	mov	arg02, result1
1b420     53 93 02 F6 | 	mov	arg01, local01
1b424     B0 BF B0 FD | 	call	#__system___float_mul
1b428     3D 93 02 F6 | 	mov	arg01, result1
1b42c     64 CA B0 FD | 	call	#__system____builtin_tanf
1b430     E7 7A 62 FC | 	wrlong	result1, fp
1b434     08 CE 05 F1 | 	add	fp, #8
1b438     E7 3C 68 FC | 	wrlong	#30, fp
1b43c     08 CE 85 F1 | 	sub	fp, #8
1b440     E7 92 02 F6 | 	mov	arg01, fp
1b444     B8 22 BF FD | 	call	#_push
1b448                 | LR__2271
1b448     E7 F0 03 F6 | 	mov	ptra, fp
1b44c     F2 00 A0 FD | 	call	#popregs_
1b450                 | _do_tan_ret
1b450     2D 00 64 FD | 	ret
1b454                 | 
1b454                 | ' 
1b454                 | ' ' ------------------ val
1b454                 | ' 
1b454                 | ' sub do_val
1b454                 | _do_val
1b454     05 CA 05 F6 | 	mov	COUNT_, #5
1b458     E8 00 A0 FD | 	call	#pushregs_
1b45c     20 F0 07 F1 | 	add	ptra, #32
1b460     4C 00 00 FF 
1b464     00 64 06 F1 | 	add	objptr, ##38912
1b468     32 97 02 FB | 	rdlong	arg03, objptr
1b46c     4B 95 02 F6 | 	mov	arg02, arg03
1b470     01 94 66 F0 | 	shl	arg02, #1
1b474     4B 95 02 F1 | 	add	arg02, arg03
1b478     02 94 66 F0 | 	shl	arg02, #2
1b47c     03 00 00 FF 
1b480     04 64 86 F1 | 	sub	objptr, ##1540
1b484     32 95 02 F1 | 	add	arg02, objptr
1b488     4A 97 02 FB | 	rdlong	arg03, arg02
1b48c                 | ' 
1b48c                 | ' numpar=compiledline(lineptr_e).result.uresult
1b48c                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
1b48c     02 96 16 F2 | 	cmp	arg03, #2 wc
1b490     48 00 00 FF 
1b494     FC 65 86 F1 | 	sub	objptr, ##37372
1b498     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
1b49c     40 00 90 4D |  if_c_and_nz	jmp	#LR__2280
1b4a0     00 92 06 F6 | 	mov	arg01, #0
1b4a4     E4 ED B0 FD | 	call	#__system___getiolock_0622
1b4a8     3D 93 02 F6 | 	mov	arg01, result1
1b4ac     58 98 B0 FD | 	call	#__system___lockmem
1b4b0     9A 01 00 FF 
1b4b4     9F 94 06 F6 | 	mov	arg02, ##@LR__6106
1b4b8     00 92 06 F6 | 	mov	arg01, #0
1b4bc     00 96 06 F6 | 	mov	arg03, #0
1b4c0     38 A5 B0 FD | 	call	#__system___basic_print_string
1b4c4     00 92 06 F6 | 	mov	arg01, #0
1b4c8     C0 ED B0 FD | 	call	#__system___getiolock_0622
1b4cc     3D 01 68 FC | 	wrlong	#0, result1
1b4d0     27 92 06 F6 | 	mov	arg01, #39
1b4d4     00 94 06 F6 | 	mov	arg02, #0
1b4d8     5C 5B B0 FD | 	call	#_printerror
1b4dc     0C 02 90 FD | 	jmp	#LR__2292
1b4e0                 | LR__2280
1b4e0     8C 21 BF FD | 	call	#_pop
1b4e4     3F 97 02 F6 | 	mov	arg03, result3
1b4e8     E7 7A 62 FC | 	wrlong	result1, fp
1b4ec     04 CE 05 F1 | 	add	fp, #4
1b4f0     E7 7C 62 FC | 	wrlong	result2, fp
1b4f4     04 CE 05 F1 | 	add	fp, #4
1b4f8     E7 96 62 FC | 	wrlong	arg03, fp
1b4fc                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1b4fc     08 CE 85 F1 | 	sub	fp, #8
1b500     2B 96 0E F2 | 	cmp	arg03, #43 wz
1b504     18 00 90 5D |  if_ne	jmp	#LR__2281
1b508     E7 92 02 FB | 	rdlong	arg01, fp
1b50c     D0 22 BF FD | 	call	#_convertstring
1b510     E7 7A 62 FC | 	wrlong	result1, fp
1b514     08 CE 05 F1 | 	add	fp, #8
1b518     E7 3E 68 FC | 	wrlong	#31, fp
1b51c     08 CE 85 F1 | 	sub	fp, #8
1b520                 | LR__2281
1b520                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
1b520     08 CE 05 F1 | 	add	fp, #8
1b524     E7 96 02 FB | 	rdlong	arg03, fp
1b528     08 CE 85 F1 | 	sub	fp, #8
1b52c     1F 96 0E F2 | 	cmp	arg03, #31 wz
1b530     40 00 90 AD |  if_e	jmp	#LR__2282
1b534     00 92 06 F6 | 	mov	arg01, #0
1b538     50 ED B0 FD | 	call	#__system___getiolock_0622
1b53c     3D 93 02 F6 | 	mov	arg01, result1
1b540     C4 97 B0 FD | 	call	#__system___lockmem
1b544     9A 01 00 FF 
1b548     A5 94 06 F6 | 	mov	arg02, ##@LR__6107
1b54c     00 92 06 F6 | 	mov	arg01, #0
1b550     00 96 06 F6 | 	mov	arg03, #0
1b554     A4 A4 B0 FD | 	call	#__system___basic_print_string
1b558     00 92 06 F6 | 	mov	arg01, #0
1b55c     2C ED B0 FD | 	call	#__system___getiolock_0622
1b560     3D 01 68 FC | 	wrlong	#0, result1
1b564     0F 92 06 F6 | 	mov	arg01, #15
1b568     00 94 06 F6 | 	mov	arg02, #0
1b56c     C8 5A B0 FD | 	call	#_printerror
1b570     78 01 90 FD | 	jmp	#LR__2292
1b574                 | LR__2282
1b574                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1b574     E7 92 02 FB | 	rdlong	arg01, fp
1b578     01 94 06 F6 | 	mov	arg02, #1
1b57c     30 B0 B0 FD | 	call	#__system__Left_S
1b580     3D 93 02 F6 | 	mov	arg01, result1
1b584     9A 01 00 FF 
1b588     AB 94 06 F6 | 	mov	arg02, ##@LR__6108
1b58c     A0 97 B0 FD | 	call	#__system___string_cmp
1b590     00 7A 0E F2 | 	cmp	result1, #0 wz
1b594     48 00 90 5D |  if_ne	jmp	#LR__2285
1b598     9A 01 00 FF 
1b59c     AD A6 06 F6 | 	mov	local01, ##@LR__6109
1b5a0     E7 96 02 FB | 	rdlong	arg03, fp
1b5a4     4B 93 02 F6 | 	mov	arg01, arg03
1b5a8     49 A9 02 F6 | 	mov	local02, arg01
1b5ac     D7 06 48 FB | 	callpa	#(@LR__2284-@LR__2283)>>2,fcache_load_ptr_
1b5b0                 | LR__2283
1b5b0     54 7B CA FA | 	rdbyte	result1, local02 wz
1b5b4     01 A8 06 51 |  if_ne	add	local02, #1
1b5b8     F4 FF 9F 5D |  if_ne	jmp	#LR__2283
1b5bc                 | LR__2284
1b5bc     49 A9 82 F1 | 	sub	local02, arg01
1b5c0     54 95 02 F6 | 	mov	arg02, local02
1b5c4     01 94 86 F1 | 	sub	arg02, #1
1b5c8     4B 93 02 F6 | 	mov	arg01, arg03
1b5cc     68 B0 B0 FD | 	call	#__system__Right_S
1b5d0     3D 95 02 F6 | 	mov	arg02, result1
1b5d4     53 93 02 F6 | 	mov	arg01, local01
1b5d8     88 97 B0 FD | 	call	#__system___string_concat
1b5dc     E7 7A 62 FC | 	wrlong	result1, fp
1b5e0                 | LR__2285
1b5e0                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1b5e0     E7 92 02 FB | 	rdlong	arg01, fp
1b5e4     01 94 06 F6 | 	mov	arg02, #1
1b5e8     C4 AF B0 FD | 	call	#__system__Left_S
1b5ec     3D 93 02 F6 | 	mov	arg01, result1
1b5f0     9A 01 00 FF 
1b5f4     B0 94 06 F6 | 	mov	arg02, ##@LR__6110
1b5f8     34 97 B0 FD | 	call	#__system___string_cmp
1b5fc     00 7A 0E F2 | 	cmp	result1, #0 wz
1b600     48 00 90 5D |  if_ne	jmp	#LR__2288
1b604     9A 01 00 FF 
1b608     B2 A6 06 F6 | 	mov	local01, ##@LR__6111
1b60c     E7 96 02 FB | 	rdlong	arg03, fp
1b610     4B 93 02 F6 | 	mov	arg01, arg03
1b614     49 A9 02 F6 | 	mov	local02, arg01
1b618     D7 06 48 FB | 	callpa	#(@LR__2287-@LR__2286)>>2,fcache_load_ptr_
1b61c                 | LR__2286
1b61c     54 7B CA FA | 	rdbyte	result1, local02 wz
1b620     01 A8 06 51 |  if_ne	add	local02, #1
1b624     F4 FF 9F 5D |  if_ne	jmp	#LR__2286
1b628                 | LR__2287
1b628     49 A9 82 F1 | 	sub	local02, arg01
1b62c     54 95 02 F6 | 	mov	arg02, local02
1b630     01 94 86 F1 | 	sub	arg02, #1
1b634     4B 93 02 F6 | 	mov	arg01, arg03
1b638     FC AF B0 FD | 	call	#__system__Right_S
1b63c     3D 95 02 F6 | 	mov	arg02, result1
1b640     53 93 02 F6 | 	mov	arg01, local01
1b644     1C 97 B0 FD | 	call	#__system___string_concat
1b648     E7 7A 62 FC | 	wrlong	result1, fp
1b64c                 | LR__2288
1b64c     E7 92 02 FB | 	rdlong	arg01, fp
1b650     A0 C5 B0 FD | 	call	#__system____builtin_atof
1b654     3D AB 02 F6 | 	mov	local03, result1
1b658     E7 92 02 FB | 	rdlong	arg01, fp
1b65c     00 94 06 F6 | 	mov	arg02, #0
1b660     F8 C3 B0 FD | 	call	#__system____builtin_atoi
1b664     3D AD 02 F6 | 	mov	local04, result1
1b668                 | ' fval=val(t1.result.sresult)
1b668                 | ' ival=val%(t1.result.sresult)
1b668                 | ' if fval=ival then
1b668     56 93 52 F6 | 	abs	arg01, local04 wc
1b66c     1F AE C6 C9 |  if_b	decod	local05, #31
1b670     00 AE 06 36 |  if_ae	mov	local05, #0
1b674     5C B9 B0 FD | 	call	#__system___float_fromuns
1b678     57 7B 62 F5 | 	xor	result1, local05
1b67c     3D 95 02 F6 | 	mov	arg02, result1
1b680     55 93 02 F6 | 	mov	arg01, local03
1b684     01 96 06 F6 | 	mov	arg03, #1
1b688     80 C1 B0 FD | 	call	#__system___float_cmp
1b68c     00 7A 0E F2 | 	cmp	result1, #0 wz
1b690     E7 AC 62 AC |  if_e	wrlong	local04, fp
1b694     08 CE 05 A1 |  if_e	add	fp, #8
1b698     E7 38 68 AC |  if_e	wrlong	#28, fp
1b69c     08 CE 85 A1 |  if_e	sub	fp, #8
1b6a0     40 00 90 AD |  if_e	jmp	#LR__2291
1b6a4                 | '   if fval=0 andalso ival<>0 then
1b6a4     55 93 02 F6 | 	mov	arg01, local03
1b6a8     00 94 06 F6 | 	mov	arg02, #0
1b6ac     01 96 06 F6 | 	mov	arg03, #1
1b6b0     58 C1 B0 FD | 	call	#__system___float_cmp
1b6b4     00 7A 0E F2 | 	cmp	result1, #0 wz
1b6b8     18 00 90 5D |  if_ne	jmp	#LR__2289
1b6bc     00 AC 0E F2 | 	cmp	local04, #0 wz
1b6c0     E7 AC 62 5C |  if_ne	wrlong	local04, fp
1b6c4     08 CE 05 51 |  if_ne	add	fp, #8
1b6c8     E7 38 68 5C |  if_ne	wrlong	#28, fp
1b6cc     08 CE 85 51 |  if_ne	sub	fp, #8
1b6d0     10 00 90 5D |  if_ne	jmp	#LR__2290
1b6d4                 | LR__2289
1b6d4     E7 AA 62 FC | 	wrlong	local03, fp
1b6d8     08 CE 05 F1 | 	add	fp, #8
1b6dc     E7 3C 68 FC | 	wrlong	#30, fp
1b6e0     08 CE 85 F1 | 	sub	fp, #8
1b6e4                 | LR__2290
1b6e4                 | LR__2291
1b6e4     E7 92 02 F6 | 	mov	arg01, fp
1b6e8     14 20 BF FD | 	call	#_push
1b6ec                 | LR__2292
1b6ec     E7 F0 03 F6 | 	mov	ptra, fp
1b6f0     F2 00 A0 FD | 	call	#popregs_
1b6f4                 | _do_val_ret
1b6f4     2D 00 64 FD | 	ret
1b6f8                 | 
1b6f8                 | ' 
1b6f8                 | ' ' ------------------ waitclock
1b6f8                 | ' 
1b6f8                 | ' sub do_waitclock
1b6f8                 | _do_waitclock
1b6f8     54 00 00 FF 
1b6fc     4C 64 06 F1 | 	add	objptr, ##43084
1b700     32 81 02 FB | 	rdlong	_var01, objptr
1b704                 | ' c=hkcnt
1b704                 | ' do: loop until hkcnt<>c
1b704                 | LR__2300
1b704     32 83 02 FB | 	rdlong	_var02, objptr
1b708     40 83 0A F2 | 	cmp	_var02, _var01 wz
1b70c     F4 FF 9F AD |  if_e	jmp	#LR__2300
1b710     54 00 00 FF 
1b714     4C 64 86 F1 | 	sub	objptr, ##43084
1b718                 | _do_waitclock_ret
1b718     2D 00 64 FD | 	ret
1b71c                 | 
1b71c                 | ' 
1b71c                 | ' ' ------------------ waitms
1b71c                 | ' 
1b71c                 | ' sub do_waitms
1b71c                 | _do_waitms
1b71c     03 CA 05 F6 | 	mov	COUNT_, #3
1b720     E8 00 A0 FD | 	call	#pushregs_
1b724     18 F0 07 F1 | 	add	ptra, #24
1b728     44 1F BF FD | 	call	#_pop
1b72c     E7 7A 62 FC | 	wrlong	result1, fp
1b730     04 CE 05 F1 | 	add	fp, #4
1b734     E7 7C 62 FC | 	wrlong	result2, fp
1b738     04 CE 05 F1 | 	add	fp, #4
1b73c     E7 7E 62 FC | 	wrlong	result3, fp
1b740     08 CE 85 F1 | 	sub	fp, #8
1b744     E7 92 02 F6 | 	mov	arg01, fp
1b748     00 21 BF FD | 	call	#_converttoint
1b74c     3D A7 02 F6 | 	mov	local01, result1
1b750                 | ' 
1b750                 | ' t1=pop()  
1b750                 | ' t=converttoint(t1)
1b750                 | ' if t<0 then return
1b750     00 A6 56 F2 | 	cmps	local01, #0 wc
1b754     98 00 90 CD |  if_b	jmp	#LR__2316
1b758                 | ' if t < 1000 then 
1b758     01 00 00 FF 
1b75c     E8 A7 56 F2 | 	cmps	local01, ##1000 wc
1b760     0C 00 90 3D |  if_ae	jmp	#LR__2310
1b764     53 93 02 F6 | 	mov	arg01, local01
1b768     90 98 B0 FD | 	call	#__system___waitms
1b76c     80 00 90 FD | 	jmp	#LR__2315
1b770                 | LR__2310
1b770     53 93 52 F6 | 	abs	arg01, local01 wc
1b774     01 00 00 FF 
1b778     E8 93 16 FD | 	qdiv	arg01, ##1000
1b77c                 | '   for i=1 to t/1000
1b77c     01 A8 06 F6 | 	mov	local02, #1
1b780     18 AA 62 FD | 	getqx	local03
1b784     55 AB 82 F6 | 	negc	local03, local03
1b788     01 AA 06 F1 | 	add	local03, #1
1b78c                 | LR__2311
1b78c     55 A9 52 F2 | 	cmps	local02, local03 wc
1b790     44 00 90 3D |  if_ae	jmp	#LR__2314
1b794     01 00 00 FF 
1b798     E8 93 06 F6 | 	mov	arg01, ##1000
1b79c     5C 98 B0 FD | 	call	#__system___waitms
1b7a0                 | '     waitms(1000)
1b7a0                 | '     if ((kbm.keystate(kbm.KEY_LCTRL) orelse kbm.keystate(kbm.KEY_RCTRL)) andalso kbm.keystate(kbm.KEY_C)) then return
1b7a0     E0 92 06 F6 | 	mov	arg01, #224
1b7a4     78 89 B0 FD | 	call	#_usbnew_spin2_keystate
1b7a8     00 7A 0E F2 | 	cmp	result1, #0 wz
1b7ac     10 00 90 5D |  if_ne	jmp	#LR__2312
1b7b0     E4 92 06 F6 | 	mov	arg01, #228
1b7b4     68 89 B0 FD | 	call	#_usbnew_spin2_keystate
1b7b8     00 7A 0E F2 | 	cmp	result1, #0 wz
1b7bc     10 00 90 AD |  if_e	jmp	#LR__2313
1b7c0                 | LR__2312
1b7c0     06 92 06 F6 | 	mov	arg01, #6
1b7c4     58 89 B0 FD | 	call	#_usbnew_spin2_keystate
1b7c8     00 7A 0E F2 | 	cmp	result1, #0 wz
1b7cc     20 00 90 5D |  if_ne	jmp	#LR__2316
1b7d0                 | LR__2313
1b7d0     01 A8 06 F1 | 	add	local02, #1
1b7d4     B4 FF 9F FD | 	jmp	#LR__2311
1b7d8                 | LR__2314
1b7d8     53 AB 52 F6 | 	abs	local03, local01 wc
1b7dc     01 00 00 FF 
1b7e0     E8 AB 16 FD | 	qdiv	local03, ##1000
1b7e4     19 AA 62 FD | 	getqy	local03
1b7e8     55 93 82 F6 | 	negc	arg01, local03
1b7ec     0C 98 B0 FD | 	call	#__system___waitms
1b7f0                 | LR__2315
1b7f0                 | LR__2316
1b7f0     E7 F0 03 F6 | 	mov	ptra, fp
1b7f4     F2 00 A0 FD | 	call	#popregs_
1b7f8                 | _do_waitms_ret
1b7f8     2D 00 64 FD | 	ret
1b7fc                 | 
1b7fc                 | ' 
1b7fc                 | ' ' ------------------ waitvbl
1b7fc                 | ' 
1b7fc                 | ' sub do_waitvbl
1b7fc                 | _do_waitvbl
1b7fc     01 92 06 F6 | 	mov	arg01, #1
1b800     40 75 B0 FD | 	call	#_hg010b_spin2_waitvbl
1b804                 | _do_waitvbl_ret
1b804     2D 00 64 FD | 	ret
1b808                 | 
1b808                 | ' 
1b808                 | ' ' ------------------ wrpin
1b808                 | ' 
1b808                 | ' sub do_wrpin
1b808                 | _do_wrpin
1b808     01 CA 05 F6 | 	mov	COUNT_, #1
1b80c     E8 00 A0 FD | 	call	#pushregs_
1b810     18 F0 07 F1 | 	add	ptra, #24
1b814     58 1E BF FD | 	call	#_pop
1b818     3D 95 02 F6 | 	mov	arg02, result1
1b81c     3E 93 02 F6 | 	mov	arg01, result2
1b820     3F A7 02 F6 | 	mov	local01, result3
1b824     E7 94 62 FC | 	wrlong	arg02, fp
1b828     04 CE 05 F1 | 	add	fp, #4
1b82c     E7 92 62 FC | 	wrlong	arg01, fp
1b830     04 CE 05 F1 | 	add	fp, #4
1b834     E7 A6 62 FC | 	wrlong	local01, fp
1b838     08 CE 85 F1 | 	sub	fp, #8
1b83c     30 1E BF FD | 	call	#_pop
1b840     3F A7 02 F6 | 	mov	local01, result3
1b844     0C CE 05 F1 | 	add	fp, #12
1b848     E7 7A 62 FC | 	wrlong	result1, fp
1b84c     04 CE 05 F1 | 	add	fp, #4
1b850     E7 7C 62 FC | 	wrlong	result2, fp
1b854     04 CE 05 F1 | 	add	fp, #4
1b858     E7 A6 62 FC | 	wrlong	local01, fp
1b85c     08 CE 85 F1 | 	sub	fp, #8
1b860     E7 92 02 F6 | 	mov	arg01, fp
1b864     0C CE 85 F1 | 	sub	fp, #12
1b868     E0 1F BF FD | 	call	#_converttoint
1b86c     3D A7 02 F6 | 	mov	local01, result1
1b870     E7 92 02 F6 | 	mov	arg01, fp
1b874     D4 1F BF FD | 	call	#_converttoint
1b878     53 7B 02 FC | 	wrpin	result1, local01
1b87c     E7 F0 03 F6 | 	mov	ptra, fp
1b880     F2 00 A0 FD | 	call	#popregs_
1b884                 | _do_wrpin_ret
1b884     2D 00 64 FD | 	ret
1b888                 | 
1b888                 | ' 
1b888                 | ' ' ------------------ wxpin
1b888                 | ' 
1b888                 | ' sub do_wxpin
1b888                 | _do_wxpin
1b888     01 CA 05 F6 | 	mov	COUNT_, #1
1b88c     E8 00 A0 FD | 	call	#pushregs_
1b890     18 F0 07 F1 | 	add	ptra, #24
1b894     D8 1D BF FD | 	call	#_pop
1b898     3D 95 02 F6 | 	mov	arg02, result1
1b89c     3E 93 02 F6 | 	mov	arg01, result2
1b8a0     3F A7 02 F6 | 	mov	local01, result3
1b8a4     E7 94 62 FC | 	wrlong	arg02, fp
1b8a8     04 CE 05 F1 | 	add	fp, #4
1b8ac     E7 92 62 FC | 	wrlong	arg01, fp
1b8b0     04 CE 05 F1 | 	add	fp, #4
1b8b4     E7 A6 62 FC | 	wrlong	local01, fp
1b8b8     08 CE 85 F1 | 	sub	fp, #8
1b8bc     B0 1D BF FD | 	call	#_pop
1b8c0     3F A7 02 F6 | 	mov	local01, result3
1b8c4     0C CE 05 F1 | 	add	fp, #12
1b8c8     E7 7A 62 FC | 	wrlong	result1, fp
1b8cc     04 CE 05 F1 | 	add	fp, #4
1b8d0     E7 7C 62 FC | 	wrlong	result2, fp
1b8d4     04 CE 05 F1 | 	add	fp, #4
1b8d8     E7 A6 62 FC | 	wrlong	local01, fp
1b8dc     08 CE 85 F1 | 	sub	fp, #8
1b8e0     E7 92 02 F6 | 	mov	arg01, fp
1b8e4     0C CE 85 F1 | 	sub	fp, #12
1b8e8     60 1F BF FD | 	call	#_converttoint
1b8ec     3D A7 02 F6 | 	mov	local01, result1
1b8f0     E7 92 02 F6 | 	mov	arg01, fp
1b8f4     54 1F BF FD | 	call	#_converttoint
1b8f8     53 7B 12 FC | 	wxpin	result1, local01
1b8fc     E7 F0 03 F6 | 	mov	ptra, fp
1b900     F2 00 A0 FD | 	call	#popregs_
1b904                 | _do_wxpin_ret
1b904     2D 00 64 FD | 	ret
1b908                 | 
1b908                 | ' 
1b908                 | ' ' ------------------ wypin
1b908                 | ' 
1b908                 | ' sub do_wypin
1b908                 | _do_wypin
1b908     01 CA 05 F6 | 	mov	COUNT_, #1
1b90c     E8 00 A0 FD | 	call	#pushregs_
1b910     18 F0 07 F1 | 	add	ptra, #24
1b914     58 1D BF FD | 	call	#_pop
1b918     3D 95 02 F6 | 	mov	arg02, result1
1b91c     3E 93 02 F6 | 	mov	arg01, result2
1b920     3F A7 02 F6 | 	mov	local01, result3
1b924     E7 94 62 FC | 	wrlong	arg02, fp
1b928     04 CE 05 F1 | 	add	fp, #4
1b92c     E7 92 62 FC | 	wrlong	arg01, fp
1b930     04 CE 05 F1 | 	add	fp, #4
1b934     E7 A6 62 FC | 	wrlong	local01, fp
1b938     08 CE 85 F1 | 	sub	fp, #8
1b93c     30 1D BF FD | 	call	#_pop
1b940     3F A7 02 F6 | 	mov	local01, result3
1b944     0C CE 05 F1 | 	add	fp, #12
1b948     E7 7A 62 FC | 	wrlong	result1, fp
1b94c     04 CE 05 F1 | 	add	fp, #4
1b950     E7 7C 62 FC | 	wrlong	result2, fp
1b954     04 CE 05 F1 | 	add	fp, #4
1b958     E7 A6 62 FC | 	wrlong	local01, fp
1b95c     08 CE 85 F1 | 	sub	fp, #8
1b960     E7 92 02 F6 | 	mov	arg01, fp
1b964     0C CE 85 F1 | 	sub	fp, #12
1b968     E0 1E BF FD | 	call	#_converttoint
1b96c     3D A7 02 F6 | 	mov	local01, result1
1b970     E7 92 02 F6 | 	mov	arg01, fp
1b974     D4 1E BF FD | 	call	#_converttoint
1b978     53 7B 22 FC | 	wypin	result1, local01
1b97c     E7 F0 03 F6 | 	mov	ptra, fp
1b980     F2 00 A0 FD | 	call	#popregs_
1b984                 | _do_wypin_ret
1b984     2D 00 64 FD | 	ret
1b988                 | 
1b988                 | ' 
1b988                 | ' 
1b988                 | ' 
1b988                 | ' 
1b988                 | ' 
1b988                 | ' 
1b988                 | ' 
1b988                 | ' 
1b988                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1b988                 | ' '--------------------------------------- Runtime variable processing--------------------------------------------------------------------- 
1b988                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1b988                 | ' 
1b988                 | ' 
1b988                 | ' '------------------ Assign
1b988                 | ' 
1b988                 | ' sub do_assign
1b988                 | _do_assign
1b988     0E CA 05 F6 | 	mov	COUNT_, #14
1b98c     E8 00 A0 FD | 	call	#pushregs_
1b990     44 F0 07 F1 | 	add	ptra, #68
1b994     4C 00 00 FF 
1b998     00 64 06 F1 | 	add	objptr, ##38912
1b99c     32 97 02 FB | 	rdlong	arg03, objptr
1b9a0     4B 95 02 F6 | 	mov	arg02, arg03
1b9a4     01 94 66 F0 | 	shl	arg02, #1
1b9a8     4B 95 02 F1 | 	add	arg02, arg03
1b9ac     02 94 66 F0 | 	shl	arg02, #2
1b9b0     03 00 00 FF 
1b9b4     04 64 86 F1 | 	sub	objptr, ##1540
1b9b8     32 95 02 F1 | 	add	arg02, objptr
1b9bc     4A AD 02 FB | 	rdlong	local04, arg02
1b9c0                 | ' 
1b9c0                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
1b9c0                 | ' if variables(varnum).vartype<array_no_type then 
1b9c0     56 97 02 F6 | 	mov	arg03, local04
1b9c4     04 96 66 F0 | 	shl	arg03, #4
1b9c8     32 00 00 FF 
1b9cc     84 64 86 F1 | 	sub	objptr, ##25732
1b9d0     32 97 02 F1 | 	add	arg03, objptr
1b9d4     0C 96 06 F1 | 	add	arg03, #12
1b9d8     4B 97 02 FB | 	rdlong	arg03, arg03
1b9dc     00 97 16 F2 | 	cmp	arg03, #256 wc
1b9e0     16 00 00 FF 
1b9e4     78 65 86 F1 | 	sub	objptr, ##11640
1b9e8     F8 00 90 3D |  if_ae	jmp	#LR__2320
1b9ec     80 1C BF FD | 	call	#_pop
1b9f0     E7 7A 62 FC | 	wrlong	result1, fp
1b9f4     04 CE 05 F1 | 	add	fp, #4
1b9f8     E7 7C 62 FC | 	wrlong	result2, fp
1b9fc     04 CE 05 F1 | 	add	fp, #4
1ba00     E7 7E 62 FC | 	wrlong	result3, fp
1ba04     08 CE 85 F1 | 	sub	fp, #8
1ba08     E7 96 02 FB | 	rdlong	arg03, fp
1ba0c     04 CE 05 F1 | 	add	fp, #4
1ba10     E7 94 02 FB | 	rdlong	arg02, fp
1ba14     56 93 02 F6 | 	mov	arg01, local04
1ba18     04 92 66 F0 | 	shl	arg01, #4
1ba1c     16 00 00 FF 
1ba20     78 65 06 F1 | 	add	objptr, ##11640
1ba24     32 93 02 F1 | 	add	arg01, objptr
1ba28     04 92 06 F1 | 	add	arg01, #4
1ba2c     49 97 62 FC | 	wrlong	arg03, arg01
1ba30     56 97 02 F6 | 	mov	arg03, local04
1ba34     04 96 66 F0 | 	shl	arg03, #4
1ba38     32 97 02 F1 | 	add	arg03, objptr
1ba3c     08 96 06 F1 | 	add	arg03, #8
1ba40     4B 95 62 FC | 	wrlong	arg02, arg03
1ba44     56 97 02 F6 | 	mov	arg03, local04
1ba48     04 96 66 F0 | 	shl	arg03, #4
1ba4c     32 97 02 F1 | 	add	arg03, objptr
1ba50     04 CE 05 F1 | 	add	fp, #4
1ba54     E7 94 02 FB | 	rdlong	arg02, fp
1ba58     08 CE 85 F1 | 	sub	fp, #8
1ba5c     0C 96 06 F1 | 	add	arg03, #12
1ba60     4B 95 62 FC | 	wrlong	arg02, arg03
1ba64                 | '   t1=pop() 
1ba64                 | '   variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
1ba64                 | '   if variables(varnum).vartype<>result_string2 then return
1ba64     56 97 02 F6 | 	mov	arg03, local04
1ba68     04 96 66 F0 | 	shl	arg03, #4
1ba6c     32 97 02 F1 | 	add	arg03, objptr
1ba70     0C 96 06 F1 | 	add	arg03, #12
1ba74     4B 97 02 FB | 	rdlong	arg03, arg03
1ba78     2B 96 0E F2 | 	cmp	arg03, #43 wz
1ba7c     16 00 00 FF 
1ba80     78 65 86 F1 | 	sub	objptr, ##11640
1ba84     68 03 90 5D |  if_ne	jmp	#LR__2342
1ba88     56 AF 02 F6 | 	mov	local05, local04
1ba8c     04 AE 66 F0 | 	shl	local05, #4
1ba90     16 00 00 FF 
1ba94     78 65 06 F1 | 	add	objptr, ##11640
1ba98     32 AF 02 F1 | 	add	local05, objptr
1ba9c     56 97 02 F6 | 	mov	arg03, local04
1baa0     04 96 66 F0 | 	shl	arg03, #4
1baa4     32 97 02 F1 | 	add	arg03, objptr
1baa8     04 96 06 F1 | 	add	arg03, #4
1baac     4B 93 02 FB | 	rdlong	arg01, arg03
1bab0     16 00 00 FF 
1bab4     78 65 86 F1 | 	sub	objptr, ##11640
1bab8     24 1D BF FD | 	call	#_convertstring
1babc     04 AE 06 F1 | 	add	local05, #4
1bac0     57 7B 62 FC | 	wrlong	result1, local05
1bac4     04 AC 66 F0 | 	shl	local04, #4
1bac8     32 AF 02 F6 | 	mov	local05, objptr
1bacc     16 00 00 FF 
1bad0     78 AF 06 F1 | 	add	local05, ##11640
1bad4     57 AD 02 F1 | 	add	local04, local05
1bad8     0C AC 06 F1 | 	add	local04, #12
1badc     56 3F 68 FC | 	wrlong	#31, local04
1bae0                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
1bae0                 | '   variables(varnum).vartype=result_string
1bae0                 | '   return
1bae0     0C 03 90 FD | 	jmp	#LR__2342
1bae4                 | LR__2320
1bae4                 | ' for i=0 to 2 : arrid(i)=0 : next i
1bae4     00 B0 06 F6 | 	mov	local06, #0
1bae8                 | LR__2321
1bae8     58 AF 02 F6 | 	mov	local05, local06
1baec     53 AF 06 F1 | 	add	local05, #local01
1baf0     00 B2 06 F6 | 	mov	local07, #0
1baf4                 | 	'.live	local07
1baf4                 | 	'.live	local05
1baf4     00 AE 8E F9 | 	altd	local05, #0
1baf8     59 AF 02 F6 | 	mov	local05, local07
1bafc     01 B0 06 F1 | 	add	local06, #1
1bb00     03 B0 16 F2 | 	cmp	local06, #3 wc
1bb04     E0 FF 9F CD |  if_b	jmp	#LR__2321
1bb08     4C 00 00 FF 
1bb0c     00 64 06 F1 | 	add	objptr, ##38912
1bb10     32 AF 02 FB | 	rdlong	local05, objptr
1bb14     57 B1 02 F6 | 	mov	local06, local05
1bb18     01 B0 66 F0 | 	shl	local06, #1
1bb1c     57 B1 02 F1 | 	add	local06, local05
1bb20     02 B0 66 F0 | 	shl	local06, #2
1bb24     03 00 00 FF 
1bb28     04 64 86 F1 | 	sub	objptr, ##1540
1bb2c     32 B1 02 F1 | 	add	local06, objptr
1bb30     04 B0 06 F1 | 	add	local06, #4
1bb34     58 B1 02 FB | 	rdlong	local06, local06
1bb38     48 00 00 FF 
1bb3c     FC 65 86 F1 | 	sub	objptr, ##37372
1bb40     2C 1B BF FD | 	call	#_pop
1bb44     3D B5 02 F6 | 	mov	local08, result1
1bb48     3E B7 02 F6 | 	mov	local09, result2
1bb4c     3F AF 02 F6 | 	mov	local05, result3
1bb50     E7 B4 62 FC | 	wrlong	local08, fp
1bb54     04 CE 05 F1 | 	add	fp, #4
1bb58     E7 B6 62 FC | 	wrlong	local09, fp
1bb5c     04 CE 05 F1 | 	add	fp, #4
1bb60     E7 AE 62 FC | 	wrlong	local05, fp
1bb64     08 CE 85 F1 | 	sub	fp, #8
1bb68                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
1bb68                 | ' t1=pop() ' var value
1bb68                 | ' if numpar>0 then
1bb68     01 B0 16 F2 | 	cmp	local06, #1 wc
1bb6c     50 00 90 CD |  if_b	jmp	#LR__2324
1bb70                 | '   for i=numpar to 1 step -1
1bb70     00 B0 4E F2 | 	cmps	local06, #0 wz
1bb74     48 00 90 AD |  if_e	jmp	#LR__2323
1bb78                 | LR__2322
1bb78     F4 1A BF FD | 	call	#_pop
1bb7c     0C CE 05 F1 | 	add	fp, #12
1bb80     E7 7A 62 FC | 	wrlong	result1, fp
1bb84     04 CE 05 F1 | 	add	fp, #4
1bb88     E7 7C 62 FC | 	wrlong	result2, fp
1bb8c     04 CE 05 F1 | 	add	fp, #4
1bb90     E7 7E 62 FC | 	wrlong	result3, fp
1bb94     58 AF 02 F6 | 	mov	local05, local06
1bb98     01 AE 86 F1 | 	sub	local05, #1
1bb9c     53 AF 06 F1 | 	add	local05, #local01
1bba0     08 CE 85 F1 | 	sub	fp, #8
1bba4     E7 92 02 F6 | 	mov	arg01, fp
1bba8     0C CE 85 F1 | 	sub	fp, #12
1bbac     9C 1C BF FD | 	call	#_converttoint
1bbb0     3D B3 02 F6 | 	mov	local07, result1
1bbb4                 | 	'.live	local07
1bbb4                 | 	'.live	local05
1bbb4     00 AE 8E F9 | 	altd	local05, #0
1bbb8     59 AF 02 F6 | 	mov	local05, local07
1bbbc     EE B1 6E FB | 	djnz	local06, #LR__2322
1bbc0                 | LR__2323
1bbc0                 | LR__2324
1bbc0     04 AC 66 F0 | 	shl	local04, #4
1bbc4     32 97 02 F6 | 	mov	arg03, objptr
1bbc8     16 00 00 FF 
1bbcc     78 97 06 F1 | 	add	arg03, ##11640
1bbd0     4B AD 02 F1 | 	add	local04, arg03
1bbd4     04 AC 06 F1 | 	add	local04, #4
1bbd8     56 B9 02 FB | 	rdlong	local10, local04
1bbdc     5C 93 02 F6 | 	mov	arg01, local10
1bbe0     10 57 B0 FD | 	call	#_pslpeek
1bbe4     3D BB 32 F9 | 	getword	local11, result1, #0
1bbe8     5C 93 02 F6 | 	mov	arg01, local10
1bbec     02 92 06 F1 | 	add	arg01, #2
1bbf0     B8 56 B0 FD | 	call	#_pspeek
1bbf4     3D BD E2 F8 | 	getbyte	local12, result1, #0
1bbf8                 | ' esize=pspeek(arrptr+2)
1bbf8                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
1bbf8     5C 93 02 F6 | 	mov	arg01, local10
1bbfc     04 92 06 F1 | 	add	arg01, #4
1bc00     F0 56 B0 FD | 	call	#_pslpeek
1bc04     3D A7 12 F2 | 	cmp	local01, result1 wc
1bc08     28 00 90 3D |  if_ae	jmp	#LR__2325
1bc0c     5C 93 02 F6 | 	mov	arg01, local10
1bc10     08 92 06 F1 | 	add	arg01, #8
1bc14     DC 56 B0 FD | 	call	#_pslpeek
1bc18     3D A9 12 F2 | 	cmp	local02, result1 wc
1bc1c     14 00 90 3D |  if_ae	jmp	#LR__2325
1bc20     5C 93 02 F6 | 	mov	arg01, local10
1bc24     0C 92 06 F1 | 	add	arg01, #12
1bc28     C8 56 B0 FD | 	call	#_pslpeek
1bc2c     3D AB 12 F2 | 	cmp	local03, result1 wc
1bc30     10 00 90 CD |  if_b	jmp	#LR__2326
1bc34                 | LR__2325
1bc34     31 92 06 F6 | 	mov	arg01, #49
1bc38     00 94 06 F6 | 	mov	arg02, #0
1bc3c     F8 53 B0 FD | 	call	#_printerror
1bc40     AC 01 90 FD | 	jmp	#LR__2342
1bc44                 | LR__2326
1bc44     5C BF 02 F6 | 	mov	local13, local10
1bc48     10 BE 06 F1 | 	add	local13, #16
1bc4c     5C 93 02 F6 | 	mov	arg01, local10
1bc50     04 92 06 F1 | 	add	arg01, #4
1bc54     9C 56 B0 FD | 	call	#_pslpeek
1bc58     54 7B 02 FD | 	qmul	result1, local02
1bc5c     53 B7 02 F6 | 	mov	local09, local01
1bc60     5C 93 02 F6 | 	mov	arg01, local10
1bc64     08 92 06 F1 | 	add	arg01, #8
1bc68     18 B4 62 FD | 	getqx	local08
1bc6c     5A B7 02 F1 | 	add	local09, local08
1bc70     80 56 B0 FD | 	call	#_pslpeek
1bc74     3D B3 02 F6 | 	mov	local07, result1
1bc78     04 B8 06 F1 | 	add	local10, #4
1bc7c     5C 93 02 F6 | 	mov	arg01, local10
1bc80     70 56 B0 FD | 	call	#_pslpeek
1bc84     3D B3 02 FD | 	qmul	local07, result1
1bc88     18 B8 62 FD | 	getqx	local10
1bc8c     55 B9 02 FD | 	qmul	local10, local03
1bc90     18 A6 62 FD | 	getqx	local01
1bc94     53 B7 02 F1 | 	add	local09, local01
1bc98     5B BD 02 FD | 	qmul	local12, local09
1bc9c                 | ' 
1bc9c                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
1bc9c                 | ' select case arrtype
1bc9c     5D C1 02 F6 | 	mov	local14, local11
1bca0     00 C1 86 F1 | 	sub	local14, #256
1bca4     0C C0 26 F3 | 	fle	local14, #12
1bca8     18 A6 62 FD | 	getqx	local01
1bcac     53 BF 02 F1 | 	add	local13, local01
1bcb0     30 C0 62 FD | 	jmprel	local14
1bcb4                 | LR__2327
1bcb4     30 00 90 FD | 	jmp	#LR__2328
1bcb8     50 00 90 FD | 	jmp	#LR__2329
1bcbc     5C 00 90 FD | 	jmp	#LR__2330
1bcc0     68 00 90 FD | 	jmp	#LR__2331
1bcc4     88 00 90 FD | 	jmp	#LR__2332
1bcc8     A8 00 90 FD | 	jmp	#LR__2333
1bccc     B4 00 90 FD | 	jmp	#LR__2334
1bcd0     C0 00 90 FD | 	jmp	#LR__2335
1bcd4     CC 00 90 FD | 	jmp	#LR__2336
1bcd8     D8 00 90 FD | 	jmp	#LR__2337
1bcdc     E4 00 90 FD | 	jmp	#LR__2338
1bce0     F0 00 90 FD | 	jmp	#LR__2339
1bce4     FC 00 90 FD | 	jmp	#LR__2340
1bce8                 | LR__2328
1bce8     E7 92 02 F6 | 	mov	arg01, fp
1bcec     5F 95 02 F6 | 	mov	arg02, local13
1bcf0     0C 96 06 F6 | 	mov	arg03, #12
1bcf4     0B 00 00 FF 
1bcf8     CC 64 06 F1 | 	add	objptr, ##5836
1bcfc     30 81 B0 FD | 	call	#_psram_spin2_write
1bd00     0B 00 00 FF 
1bd04     CC 64 86 F1 | 	sub	objptr, ##5836
1bd08     E4 00 90 FD | 	jmp	#LR__2341
1bd0c                 | LR__2329
1bd0c     E7 94 02 FB | 	rdlong	arg02, fp
1bd10     5F 93 02 F6 | 	mov	arg01, local13
1bd14     4C 55 B0 FD | 	call	#_pspoke
1bd18     D4 00 90 FD | 	jmp	#LR__2341
1bd1c                 | LR__2330
1bd1c     E7 94 02 FB | 	rdlong	arg02, fp
1bd20     5F 93 02 F6 | 	mov	arg01, local13
1bd24     3C 55 B0 FD | 	call	#_pspoke
1bd28     C4 00 90 FD | 	jmp	#LR__2341
1bd2c                 | LR__2331
1bd2c     E7 94 02 FB | 	rdlong	arg02, fp
1bd30     5F 93 02 F6 | 	mov	arg01, local13
1bd34     2C 55 B0 FD | 	call	#_pspoke
1bd38     01 BE 06 F1 | 	add	local13, #1
1bd3c     E7 94 02 FB | 	rdlong	arg02, fp
1bd40     08 94 46 F0 | 	shr	arg02, #8
1bd44     5F 93 02 F6 | 	mov	arg01, local13
1bd48     18 55 B0 FD | 	call	#_pspoke
1bd4c     A0 00 90 FD | 	jmp	#LR__2341
1bd50                 | LR__2332
1bd50     E7 94 02 FB | 	rdlong	arg02, fp
1bd54     5F 93 02 F6 | 	mov	arg01, local13
1bd58     08 55 B0 FD | 	call	#_pspoke
1bd5c     01 BE 06 F1 | 	add	local13, #1
1bd60     E7 94 02 FB | 	rdlong	arg02, fp
1bd64     08 94 46 F0 | 	shr	arg02, #8
1bd68     5F 93 02 F6 | 	mov	arg01, local13
1bd6c     F4 54 B0 FD | 	call	#_pspoke
1bd70     7C 00 90 FD | 	jmp	#LR__2341
1bd74                 | LR__2333
1bd74     E7 94 02 FB | 	rdlong	arg02, fp
1bd78     5F 93 02 F6 | 	mov	arg01, local13
1bd7c     54 54 B0 FD | 	call	#_pslpoke
1bd80     6C 00 90 FD | 	jmp	#LR__2341
1bd84                 | LR__2334
1bd84     E7 94 02 FB | 	rdlong	arg02, fp
1bd88     5F 93 02 F6 | 	mov	arg01, local13
1bd8c     44 54 B0 FD | 	call	#_pslpoke
1bd90     5C 00 90 FD | 	jmp	#LR__2341
1bd94                 | LR__2335
1bd94     E7 94 02 FB | 	rdlong	arg02, fp
1bd98     5F 93 02 F6 | 	mov	arg01, local13
1bd9c     34 54 B0 FD | 	call	#_pslpoke
1bda0     4C 00 90 FD | 	jmp	#LR__2341
1bda4                 | LR__2336
1bda4     E7 94 02 FB | 	rdlong	arg02, fp
1bda8     5F 93 02 F6 | 	mov	arg01, local13
1bdac     24 54 B0 FD | 	call	#_pslpoke
1bdb0     3C 00 90 FD | 	jmp	#LR__2341
1bdb4                 | LR__2337
1bdb4     E7 94 02 FB | 	rdlong	arg02, fp
1bdb8     5F 93 02 F6 | 	mov	arg01, local13
1bdbc     14 54 B0 FD | 	call	#_pslpoke
1bdc0     2C 00 90 FD | 	jmp	#LR__2341
1bdc4                 | LR__2338
1bdc4     E7 94 02 FB | 	rdlong	arg02, fp
1bdc8     5F 93 02 F6 | 	mov	arg01, local13
1bdcc     04 54 B0 FD | 	call	#_pslpoke
1bdd0     1C 00 90 FD | 	jmp	#LR__2341
1bdd4                 | LR__2339
1bdd4     E7 94 02 FB | 	rdlong	arg02, fp
1bdd8     5F 93 02 F6 | 	mov	arg01, local13
1bddc     F4 53 B0 FD | 	call	#_pslpoke
1bde0     0C 00 90 FD | 	jmp	#LR__2341
1bde4                 | LR__2340
1bde4     32 92 06 F6 | 	mov	arg01, #50
1bde8     00 94 06 F6 | 	mov	arg02, #0
1bdec     48 52 B0 FD | 	call	#_printerror
1bdf0                 | LR__2341
1bdf0                 | LR__2342
1bdf0     E7 F0 03 F6 | 	mov	ptra, fp
1bdf4     F2 00 A0 FD | 	call	#popregs_
1bdf8                 | _do_assign_ret
1bdf8     2D 00 64 FD | 	ret
1bdfc                 | 
1bdfc                 | ' 
1bdfc                 | ' 
1bdfc                 | ' '------------------ getvar.  Read a variable and push it to the RPN stack
1bdfc                 | ' 
1bdfc                 | ' sub do_getvar
1bdfc                 | _do_getvar
1bdfc     0D CA 05 F6 | 	mov	COUNT_, #13
1be00     E8 00 A0 FD | 	call	#pushregs_
1be04     3C F0 07 F1 | 	add	ptra, #60
1be08                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1be08     4C 00 00 FF 
1be0c     00 64 06 F1 | 	add	objptr, ##38912
1be10     32 A7 02 FB | 	rdlong	local01, objptr
1be14     53 97 02 F6 | 	mov	arg03, local01
1be18     01 96 66 F0 | 	shl	arg03, #1
1be1c     53 97 02 F1 | 	add	arg03, local01
1be20     02 96 66 F0 | 	shl	arg03, #2
1be24     03 00 00 FF 
1be28     04 64 86 F1 | 	sub	objptr, ##1540
1be2c     32 97 02 F1 | 	add	arg03, objptr
1be30     04 96 06 F1 | 	add	arg03, #4
1be34     4B 97 0A FB | 	rdlong	arg03, arg03 wz
1be38     48 00 00 FF 
1be3c     FC 65 86 F1 | 	sub	objptr, ##37372
1be40     C4 00 90 5D |  if_ne	jmp	#LR__2351
1be44     4C 00 00 FF 
1be48     00 64 06 F1 | 	add	objptr, ##38912
1be4c     32 A7 02 FB | 	rdlong	local01, objptr
1be50     53 93 02 F6 | 	mov	arg01, local01
1be54     01 92 66 F0 | 	shl	arg01, #1
1be58     53 93 02 F1 | 	add	arg01, local01
1be5c     02 92 66 F0 | 	shl	arg01, #2
1be60     03 00 00 FF 
1be64     04 64 86 F1 | 	sub	objptr, ##1540
1be68     32 93 02 F1 | 	add	arg01, objptr
1be6c     49 A7 02 FB | 	rdlong	local01, arg01
1be70     04 A6 66 F0 | 	shl	local01, #4
1be74     32 00 00 FF 
1be78     84 64 86 F1 | 	sub	objptr, ##25732
1be7c     32 A7 02 F1 | 	add	local01, objptr
1be80     04 A6 06 F1 | 	add	local01, #4
1be84     53 93 02 FB | 	rdlong	arg01, local01
1be88     04 A6 06 F1 | 	add	local01, #4
1be8c     53 A7 02 FB | 	rdlong	local01, local01
1be90     E7 92 62 FC | 	wrlong	arg01, fp
1be94     04 CE 05 F1 | 	add	fp, #4
1be98     E7 A6 62 FC | 	wrlong	local01, fp
1be9c     35 00 00 FF 
1bea0     88 64 06 F1 | 	add	objptr, ##27272
1bea4     32 A7 02 FB | 	rdlong	local01, objptr
1bea8     53 93 02 F6 | 	mov	arg01, local01
1beac     01 92 66 F0 | 	shl	arg01, #1
1beb0     53 93 02 F1 | 	add	arg01, local01
1beb4     02 92 66 F0 | 	shl	arg01, #2
1beb8     03 00 00 FF 
1bebc     04 64 86 F1 | 	sub	objptr, ##1540
1bec0     32 93 02 F1 | 	add	arg01, objptr
1bec4     49 A7 02 FB | 	rdlong	local01, arg01
1bec8     04 A6 66 F0 | 	shl	local01, #4
1becc     32 00 00 FF 
1bed0     84 64 86 F1 | 	sub	objptr, ##25732
1bed4     32 A7 02 F1 | 	add	local01, objptr
1bed8     0C A6 06 F1 | 	add	local01, #12
1bedc     53 A7 02 FB | 	rdlong	local01, local01
1bee0     04 CE 05 F1 | 	add	fp, #4
1bee4     E7 A6 62 FC | 	wrlong	local01, fp
1bee8                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
1bee8                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1bee8                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
1bee8     08 CE 85 F1 | 	sub	fp, #8
1beec     00 A7 16 F2 | 	cmp	local01, #256 wc
1bef0     16 00 00 FF 
1bef4     78 65 86 F1 | 	sub	objptr, ##11640
1bef8     0C 00 90 3D |  if_ae	jmp	#LR__2350
1befc     E7 92 02 F6 | 	mov	arg01, fp
1bf00     FC 17 BF FD | 	call	#_push
1bf04     94 03 90 FD | 	jmp	#LR__2372
1bf08                 | LR__2350
1bf08                 | LR__2351
1bf08     4C 00 00 FF 
1bf0c     00 64 06 F1 | 	add	objptr, ##38912
1bf10     32 97 02 FB | 	rdlong	arg03, objptr
1bf14     4B 95 02 F6 | 	mov	arg02, arg03
1bf18     01 94 66 F0 | 	shl	arg02, #1
1bf1c     4B 95 02 F1 | 	add	arg02, arg03
1bf20     02 94 66 F0 | 	shl	arg02, #2
1bf24     03 00 00 FF 
1bf28     04 64 86 F1 | 	sub	objptr, ##1540
1bf2c     32 95 02 F1 | 	add	arg02, objptr
1bf30     4A 97 02 FB | 	rdlong	arg03, arg02
1bf34     04 96 66 F0 | 	shl	arg03, #4
1bf38     32 00 00 FF 
1bf3c     84 64 86 F1 | 	sub	objptr, ##25732
1bf40     32 97 02 F1 | 	add	arg03, objptr
1bf44     04 96 06 F1 | 	add	arg03, #4
1bf48     4B A9 02 FB | 	rdlong	local02, arg03
1bf4c     54 93 02 F6 | 	mov	arg01, local02
1bf50     16 00 00 FF 
1bf54     78 65 86 F1 | 	sub	objptr, ##11640
1bf58     98 53 B0 FD | 	call	#_pslpeek
1bf5c     3D AB 32 F9 | 	getword	local03, result1, #0
1bf60     4C 00 00 FF 
1bf64     00 64 06 F1 | 	add	objptr, ##38912
1bf68     32 97 02 FB | 	rdlong	arg03, objptr
1bf6c     4B 95 02 F6 | 	mov	arg02, arg03
1bf70     01 94 66 F0 | 	shl	arg02, #1
1bf74     4B 95 02 F1 | 	add	arg02, arg03
1bf78     02 94 66 F0 | 	shl	arg02, #2
1bf7c     03 00 00 FF 
1bf80     04 64 86 F1 | 	sub	objptr, ##1540
1bf84     32 95 02 F1 | 	add	arg02, objptr
1bf88     04 94 06 F1 | 	add	arg02, #4
1bf8c     4A AD 02 FB | 	rdlong	local04, arg02
1bf90     54 93 02 F6 | 	mov	arg01, local02
1bf94     02 92 06 F1 | 	add	arg01, #2
1bf98     48 00 00 FF 
1bf9c     FC 65 86 F1 | 	sub	objptr, ##37372
1bfa0     08 53 B0 FD | 	call	#_pspeek
1bfa4     3D AF E2 F8 | 	getbyte	local05, result1, #0
1bfa8     54 93 02 F6 | 	mov	arg01, local02
1bfac     04 92 06 F1 | 	add	arg01, #4
1bfb0     40 53 B0 FD | 	call	#_pslpeek
1bfb4     3D B1 02 F6 | 	mov	local06, result1
1bfb8     54 93 02 F6 | 	mov	arg01, local02
1bfbc     08 92 06 F1 | 	add	arg01, #8
1bfc0     30 53 B0 FD | 	call	#_pslpeek
1bfc4     3D B3 02 F6 | 	mov	local07, result1
1bfc8     54 93 02 F6 | 	mov	arg01, local02
1bfcc     0C 92 06 F1 | 	add	arg01, #12
1bfd0     20 53 B0 FD | 	call	#_pslpeek
1bfd4                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1bfd4                 | ' esize=pspeek(arrptr+2)
1bfd4                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1bfd4                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1bfd4                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1bfd4                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1bfd4     03 AC 16 F2 | 	cmp	local04, #3 wc
1bfd8     30 00 90 CD |  if_b	jmp	#LR__2352
1bfdc     90 16 BF FD | 	call	#_pop
1bfe0     3F 97 02 F6 | 	mov	arg03, result3
1bfe4     E7 7A 62 FC | 	wrlong	result1, fp
1bfe8     04 CE 05 F1 | 	add	fp, #4
1bfec     E7 7C 62 FC | 	wrlong	result2, fp
1bff0     04 CE 05 F1 | 	add	fp, #4
1bff4     E7 96 62 FC | 	wrlong	arg03, fp
1bff8     08 CE 85 F1 | 	sub	fp, #8
1bffc     E7 92 02 F6 | 	mov	arg01, fp
1c000     48 18 BF FD | 	call	#_converttoint
1c004     3D B5 02 F6 | 	mov	local08, result1
1c008     04 00 90 FD | 	jmp	#LR__2353
1c00c                 | LR__2352
1c00c     00 B4 06 F6 | 	mov	local08, #0
1c010                 | LR__2353
1c010                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1c010     02 AC 16 F2 | 	cmp	local04, #2 wc
1c014     30 00 90 CD |  if_b	jmp	#LR__2354
1c018     54 16 BF FD | 	call	#_pop
1c01c     3F 97 02 F6 | 	mov	arg03, result3
1c020     E7 7A 62 FC | 	wrlong	result1, fp
1c024     04 CE 05 F1 | 	add	fp, #4
1c028     E7 7C 62 FC | 	wrlong	result2, fp
1c02c     04 CE 05 F1 | 	add	fp, #4
1c030     E7 96 62 FC | 	wrlong	arg03, fp
1c034     08 CE 85 F1 | 	sub	fp, #8
1c038     E7 92 02 F6 | 	mov	arg01, fp
1c03c     0C 18 BF FD | 	call	#_converttoint
1c040     3D B7 02 F6 | 	mov	local09, result1
1c044     04 00 90 FD | 	jmp	#LR__2355
1c048                 | LR__2354
1c048     00 B6 06 F6 | 	mov	local09, #0
1c04c                 | LR__2355
1c04c                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1c04c     01 AC 16 F2 | 	cmp	local04, #1 wc
1c050     30 00 90 CD |  if_b	jmp	#LR__2356
1c054     18 16 BF FD | 	call	#_pop
1c058     3F AD 02 F6 | 	mov	local04, result3
1c05c     E7 7A 62 FC | 	wrlong	result1, fp
1c060     04 CE 05 F1 | 	add	fp, #4
1c064     E7 7C 62 FC | 	wrlong	result2, fp
1c068     04 CE 05 F1 | 	add	fp, #4
1c06c     E7 AC 62 FC | 	wrlong	local04, fp
1c070     08 CE 85 F1 | 	sub	fp, #8
1c074     E7 92 02 F6 | 	mov	arg01, fp
1c078     D0 17 BF FD | 	call	#_converttoint
1c07c     3D B9 02 F6 | 	mov	local10, result1
1c080     04 00 90 FD | 	jmp	#LR__2357
1c084                 | LR__2356
1c084     00 B8 06 F6 | 	mov	local10, #0
1c088                 | LR__2357
1c088     58 B7 02 FD | 	qmul	local09, local06
1c08c     54 BB 02 F6 | 	mov	local11, local02
1c090     10 BA 06 F1 | 	add	local11, #16
1c094     5C BD 02 F6 | 	mov	local12, local10
1c098     18 B8 62 FD | 	getqx	local10
1c09c     58 B5 02 FD | 	qmul	local08, local06
1c0a0     5C BD 02 F1 | 	add	local12, local10
1c0a4     18 B8 62 FD | 	getqx	local10
1c0a8     59 B9 02 FD | 	qmul	local10, local07
1c0ac     18 B8 62 FD | 	getqx	local10
1c0b0     5C BD 02 F1 | 	add	local12, local10
1c0b4     57 BD 02 FD | 	qmul	local12, local05
1c0b8                 | ' 
1c0b8                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize 
1c0b8                 | ' 
1c0b8                 | ' select case vartype
1c0b8     55 BF 02 F6 | 	mov	local13, local03
1c0bc     00 BF 86 F1 | 	sub	local13, #256
1c0c0     0C BE 26 F3 | 	fle	local13, #12
1c0c4     18 B8 62 FD | 	getqx	local10
1c0c8     5C BB 02 F1 | 	add	local11, local10
1c0cc     30 BE 62 FD | 	jmprel	local13
1c0d0                 | LR__2358
1c0d0     30 00 90 FD | 	jmp	#LR__2359
1c0d4     50 00 90 FD | 	jmp	#LR__2360
1c0d8     80 00 90 FD | 	jmp	#LR__2361
1c0dc     9C 00 90 FD | 	jmp	#LR__2362
1c0e0     D4 00 90 FD | 	jmp	#LR__2363
1c0e4     F0 00 90 FD | 	jmp	#LR__2364
1c0e8     08 01 90 FD | 	jmp	#LR__2365
1c0ec     20 01 90 FD | 	jmp	#LR__2366
1c0f0     30 01 90 FD | 	jmp	#LR__2367
1c0f4     40 01 90 FD | 	jmp	#LR__2368
1c0f8     58 01 90 FD | 	jmp	#LR__2369
1c0fc     68 01 90 FD | 	jmp	#LR__2370
1c100     90 01 90 FD | 	jmp	#LR__2371
1c104                 | LR__2359
1c104     E7 92 02 F6 | 	mov	arg01, fp
1c108     5D 95 02 F6 | 	mov	arg02, local11
1c10c     0C 96 06 F6 | 	mov	arg03, #12
1c110     0B 00 00 FF 
1c114     CC 64 06 F1 | 	add	objptr, ##5836
1c118     78 7C B0 FD | 	call	#_psram_spin2_read1
1c11c     0B 00 00 FF 
1c120     CC 64 86 F1 | 	sub	objptr, ##5836
1c124     6C 01 90 FD | 	jmp	#LR__2371
1c128                 | LR__2360
1c128     08 CE 05 F1 | 	add	fp, #8
1c12c     E7 38 68 FC | 	wrlong	#28, fp
1c130     08 CE 85 F1 | 	sub	fp, #8
1c134     5D 93 02 F6 | 	mov	arg01, local11
1c138     70 51 B0 FD | 	call	#_pspeek
1c13c     3D 7B E2 F8 | 	getbyte	result1, result1, #0
1c140     E7 7A 62 FC | 	wrlong	result1, fp
1c144     80 7A 16 F2 | 	cmp	result1, #128 wc
1c148     00 A7 66 36 |  if_ae	neg	local01, #256
1c14c     3D BD 02 36 |  if_ae	mov	local12, result1
1c150     5E A7 42 35 |  if_ae	or	local01, local12
1c154     E7 A6 62 3C |  if_ae	wrlong	local01, fp
1c158     38 01 90 FD | 	jmp	#LR__2371
1c15c                 | LR__2361
1c15c     08 CE 05 F1 | 	add	fp, #8
1c160     E7 3A 68 FC | 	wrlong	#29, fp
1c164     08 CE 85 F1 | 	sub	fp, #8
1c168     5D 93 02 F6 | 	mov	arg01, local11
1c16c     3C 51 B0 FD | 	call	#_pspeek
1c170     3D 7B E2 F8 | 	getbyte	result1, result1, #0
1c174     E7 7A 62 FC | 	wrlong	result1, fp
1c178     18 01 90 FD | 	jmp	#LR__2371
1c17c                 | LR__2362
1c17c     08 CE 05 F1 | 	add	fp, #8
1c180     E7 38 68 FC | 	wrlong	#28, fp
1c184     08 CE 85 F1 | 	sub	fp, #8
1c188     5D 93 02 F6 | 	mov	arg01, local11
1c18c     64 51 B0 FD | 	call	#_pslpeek
1c190     3D 7B 32 F9 | 	getword	result1, result1, #0
1c194     E7 7A 62 FC | 	wrlong	result1, fp
1c198     40 00 00 FF 
1c19c     00 7A 16 F2 | 	cmp	result1, ##32768 wc
1c1a0     FF 7F 00 3F 
1c1a4     00 A7 06 36 |  if_ae	mov	local01, ##16776960
1c1a8     3D BD 02 36 |  if_ae	mov	local12, result1
1c1ac     5E A7 42 35 |  if_ae	or	local01, local12
1c1b0     E7 A6 62 3C |  if_ae	wrlong	local01, fp
1c1b4     DC 00 90 FD | 	jmp	#LR__2371
1c1b8                 | LR__2363
1c1b8     08 CE 05 F1 | 	add	fp, #8
1c1bc     E7 3A 68 FC | 	wrlong	#29, fp
1c1c0     08 CE 85 F1 | 	sub	fp, #8
1c1c4     5D 93 02 F6 | 	mov	arg01, local11
1c1c8     28 51 B0 FD | 	call	#_pslpeek
1c1cc     3D 7B 32 F9 | 	getword	result1, result1, #0
1c1d0     E7 7A 62 FC | 	wrlong	result1, fp
1c1d4     BC 00 90 FD | 	jmp	#LR__2371
1c1d8                 | LR__2364
1c1d8     08 CE 05 F1 | 	add	fp, #8
1c1dc     E7 38 68 FC | 	wrlong	#28, fp
1c1e0     08 CE 85 F1 | 	sub	fp, #8
1c1e4     5D 93 02 F6 | 	mov	arg01, local11
1c1e8     08 51 B0 FD | 	call	#_pslpeek
1c1ec     E7 7A 62 FC | 	wrlong	result1, fp
1c1f0     A0 00 90 FD | 	jmp	#LR__2371
1c1f4                 | LR__2365
1c1f4     08 CE 05 F1 | 	add	fp, #8
1c1f8     E7 3A 68 FC | 	wrlong	#29, fp
1c1fc     08 CE 85 F1 | 	sub	fp, #8
1c200     5D 93 02 F6 | 	mov	arg01, local11
1c204     EC 50 B0 FD | 	call	#_pslpeek
1c208     E7 7A 62 FC | 	wrlong	result1, fp
1c20c     84 00 90 FD | 	jmp	#LR__2371
1c210                 | LR__2366
1c210     08 CE 05 F1 | 	add	fp, #8
1c214     E7 FE 69 FC | 	wrlong	#255, fp
1c218     08 CE 85 F1 | 	sub	fp, #8
1c21c     E7 60 68 FC | 	wrlong	#48, fp
1c220     70 00 90 FD | 	jmp	#LR__2371
1c224                 | LR__2367
1c224     08 CE 05 F1 | 	add	fp, #8
1c228     E7 FE 69 FC | 	wrlong	#255, fp
1c22c     08 CE 85 F1 | 	sub	fp, #8
1c230     E7 60 68 FC | 	wrlong	#48, fp
1c234     5C 00 90 FD | 	jmp	#LR__2371
1c238                 | LR__2368
1c238     08 CE 05 F1 | 	add	fp, #8
1c23c     E7 3C 68 FC | 	wrlong	#30, fp
1c240     08 CE 85 F1 | 	sub	fp, #8
1c244     5D 93 02 F6 | 	mov	arg01, local11
1c248     A8 50 B0 FD | 	call	#_pslpeek
1c24c     E7 7A 62 FC | 	wrlong	result1, fp
1c250     40 00 90 FD | 	jmp	#LR__2371
1c254                 | LR__2369
1c254     08 CE 05 F1 | 	add	fp, #8
1c258     E7 FE 69 FC | 	wrlong	#255, fp
1c25c     08 CE 85 F1 | 	sub	fp, #8
1c260     E7 60 68 FC | 	wrlong	#48, fp
1c264     2C 00 90 FD | 	jmp	#LR__2371
1c268                 | LR__2370
1c268     08 CE 05 F1 | 	add	fp, #8
1c26c     E7 3E 68 FC | 	wrlong	#31, fp
1c270     08 CE 85 F1 | 	sub	fp, #8
1c274     5D 93 02 F6 | 	mov	arg01, local11
1c278     78 50 B0 FD | 	call	#_pslpeek
1c27c     E7 7A 62 FC | 	wrlong	result1, fp
1c280     00 04 00 FF 
1c284     00 7A 16 F2 | 	cmp	result1, ##524288 wc
1c288     08 CE 05 31 |  if_ae	add	fp, #8
1c28c     E7 56 68 3C |  if_ae	wrlong	#43, fp
1c290     08 CE 85 31 |  if_ae	sub	fp, #8
1c294                 | LR__2371
1c294     E7 92 02 F6 | 	mov	arg01, fp
1c298     64 14 BF FD | 	call	#_push
1c29c                 | LR__2372
1c29c     E7 F0 03 F6 | 	mov	ptra, fp
1c2a0     F2 00 A0 FD | 	call	#popregs_
1c2a4                 | _do_getvar_ret
1c2a4     2D 00 64 FD | 	ret
1c2a8                 | 
1c2a8                 | ' 
1c2a8                 | ' '------------------ getaddr.  Get a pointer to a variable and push it to the RPN stack
1c2a8                 | ' 
1c2a8                 | ' sub do_getaddr
1c2a8                 | _do_getaddr
1c2a8     09 CA 05 F6 | 	mov	COUNT_, #9
1c2ac     E8 00 A0 FD | 	call	#pushregs_
1c2b0     38 F0 07 F1 | 	add	ptra, #56
1c2b4                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
1c2b4                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1c2b4     4C 00 00 FF 
1c2b8     00 64 06 F1 | 	add	objptr, ##38912
1c2bc     32 93 02 FB | 	rdlong	arg01, objptr
1c2c0     49 7D 02 F6 | 	mov	result2, arg01
1c2c4     01 7C 66 F0 | 	shl	result2, #1
1c2c8     49 7D 02 F1 | 	add	result2, arg01
1c2cc     02 7C 66 F0 | 	shl	result2, #2
1c2d0     03 00 00 FF 
1c2d4     04 64 86 F1 | 	sub	objptr, ##1540
1c2d8     32 7D 02 F1 | 	add	result2, objptr
1c2dc     04 7C 06 F1 | 	add	result2, #4
1c2e0     3E 7D 0A FB | 	rdlong	result2, result2 wz
1c2e4     48 00 00 FF 
1c2e8     FC 65 86 F1 | 	sub	objptr, ##37372
1c2ec     10 01 90 5D |  if_ne	jmp	#LR__2380
1c2f0     4C 00 00 FF 
1c2f4     00 64 06 F1 | 	add	objptr, ##38912
1c2f8     32 93 02 FB | 	rdlong	arg01, objptr
1c2fc     49 7D 02 F6 | 	mov	result2, arg01
1c300     01 7C 66 F0 | 	shl	result2, #1
1c304     49 7D 02 F1 | 	add	result2, arg01
1c308     02 7C 66 F0 | 	shl	result2, #2
1c30c     03 00 00 FF 
1c310     04 64 86 F1 | 	sub	objptr, ##1540
1c314     32 7D 02 F1 | 	add	result2, objptr
1c318     3E 93 02 FB | 	rdlong	arg01, result2
1c31c     04 92 66 F0 | 	shl	arg01, #4
1c320     32 00 00 FF 
1c324     84 64 86 F1 | 	sub	objptr, ##25732
1c328     32 93 02 F1 | 	add	arg01, objptr
1c32c     0C 92 06 F1 | 	add	arg01, #12
1c330     49 93 02 FB | 	rdlong	arg01, arg01
1c334     08 CE 05 F1 | 	add	fp, #8
1c338     E7 92 62 FC | 	wrlong	arg01, fp
1c33c                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1c33c                 | '    if t1.result_type>=array_no_type then goto 2200
1c33c     08 CE 85 F1 | 	sub	fp, #8
1c340     00 93 16 F2 | 	cmp	arg01, #256 wc
1c344     16 00 00 FF 
1c348     78 65 86 F1 | 	sub	objptr, ##11640
1c34c     B0 00 90 3D |  if_ae	jmp	#LR__2381
1c350     4C 00 00 FF 
1c354     00 64 06 F1 | 	add	objptr, ##38912
1c358     32 93 02 FB | 	rdlong	arg01, objptr
1c35c     49 7F 02 F6 | 	mov	result3, arg01
1c360     01 7E 66 F0 | 	shl	result3, #1
1c364     49 7F 02 F1 | 	add	result3, arg01
1c368     02 7E 66 F0 | 	shl	result3, #2
1c36c     03 00 00 FF 
1c370     04 64 86 F1 | 	sub	objptr, ##1540
1c374     32 7F 02 F1 | 	add	result3, objptr
1c378     3F 7B 02 FB | 	rdlong	result1, result3
1c37c     04 7A 66 F0 | 	shl	result1, #4
1c380     32 00 00 FF 
1c384     84 64 86 F1 | 	sub	objptr, ##25732
1c388     32 7B 02 F1 | 	add	result1, objptr
1c38c     04 7A 06 F1 | 	add	result1, #4
1c390     E7 7A 62 FC | 	wrlong	result1, fp
1c394     35 00 00 FF 
1c398     88 64 06 F1 | 	add	objptr, ##27272
1c39c     32 7F 02 FB | 	rdlong	result3, objptr
1c3a0     3F 93 02 F6 | 	mov	arg01, result3
1c3a4     01 92 66 F0 | 	shl	arg01, #1
1c3a8     3F 93 02 F1 | 	add	arg01, result3
1c3ac     02 92 66 F0 | 	shl	arg01, #2
1c3b0     03 00 00 FF 
1c3b4     04 64 86 F1 | 	sub	objptr, ##1540
1c3b8     32 93 02 F1 | 	add	arg01, objptr
1c3bc     49 93 02 FB | 	rdlong	arg01, arg01
1c3c0     04 92 66 F0 | 	shl	arg01, #4
1c3c4     32 00 00 FF 
1c3c8     84 64 86 F1 | 	sub	objptr, ##25732
1c3cc     32 93 02 F1 | 	add	arg01, objptr
1c3d0     0C 92 06 F1 | 	add	arg01, #12
1c3d4     49 93 02 FB | 	rdlong	arg01, arg01
1c3d8     04 CE 05 F1 | 	add	fp, #4
1c3dc     E7 92 62 FC | 	wrlong	arg01, fp
1c3e0     04 CE 05 F1 | 	add	fp, #4
1c3e4     E7 3A 68 FC | 	wrlong	#29, fp
1c3e8     08 CE 85 F1 | 	sub	fp, #8
1c3ec     E7 92 02 F6 | 	mov	arg01, fp
1c3f0     16 00 00 FF 
1c3f4     78 65 86 F1 | 	sub	objptr, ##11640
1c3f8     04 13 BF FD | 	call	#_push
1c3fc                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
1c3fc                 | '   t1.result.twowords(1)=variables(compiledline(lineptr_e).result.uresult).vartype
1c3fc                 | '   t1.result_type=result_uint
1c3fc                 | '   push t1 : return
1c3fc     24 02 90 FD | 	jmp	#LR__2390
1c400                 | LR__2380
1c400                 | LR__2381
1c400     4C 00 00 FF 
1c404     00 64 06 F1 | 	add	objptr, ##38912
1c408     32 A7 02 FB | 	rdlong	local01, objptr
1c40c     53 7D 02 F6 | 	mov	result2, local01
1c410     01 7C 66 F0 | 	shl	result2, #1
1c414     53 7D 02 F1 | 	add	result2, local01
1c418     02 7C 66 F0 | 	shl	result2, #2
1c41c     03 00 00 FF 
1c420     04 64 86 F1 | 	sub	objptr, ##1540
1c424     32 7D 02 F1 | 	add	result2, objptr
1c428     3E 7D 02 FB | 	rdlong	result2, result2
1c42c     04 7C 66 F0 | 	shl	result2, #4
1c430     32 00 00 FF 
1c434     84 64 86 F1 | 	sub	objptr, ##25732
1c438     32 7D 02 F1 | 	add	result2, objptr
1c43c     04 7C 06 F1 | 	add	result2, #4
1c440     3E A9 02 FB | 	rdlong	local02, result2
1c444     53 93 02 F6 | 	mov	arg01, local01
1c448     01 92 66 F0 | 	shl	arg01, #1
1c44c     53 93 02 F1 | 	add	arg01, local01
1c450     02 92 66 F0 | 	shl	arg01, #2
1c454     32 00 00 FF 
1c458     84 64 06 F1 | 	add	objptr, ##25732
1c45c     32 93 02 F1 | 	add	arg01, objptr
1c460     49 93 02 FB | 	rdlong	arg01, arg01
1c464     04 92 66 F0 | 	shl	arg01, #4
1c468     32 00 00 FF 
1c46c     84 64 86 F1 | 	sub	objptr, ##25732
1c470     32 93 02 F1 | 	add	arg01, objptr
1c474     0C 92 06 F1 | 	add	arg01, #12
1c478     49 93 02 FB | 	rdlong	arg01, arg01
1c47c     04 CE 05 F1 | 	add	fp, #4
1c480     E7 92 62 FC | 	wrlong	arg01, fp
1c484     04 CE 85 F1 | 	sub	fp, #4
1c488     54 93 02 F6 | 	mov	arg01, local02
1c48c     16 00 00 FF 
1c490     78 65 86 F1 | 	sub	objptr, ##11640
1c494     5C 4E B0 FD | 	call	#_pslpeek
1c498     4C 00 00 FF 
1c49c     00 64 06 F1 | 	add	objptr, ##38912
1c4a0     32 A7 02 FB | 	rdlong	local01, objptr
1c4a4     53 93 02 F6 | 	mov	arg01, local01
1c4a8     01 92 66 F0 | 	shl	arg01, #1
1c4ac     53 93 02 F1 | 	add	arg01, local01
1c4b0     02 92 66 F0 | 	shl	arg01, #2
1c4b4     03 00 00 FF 
1c4b8     04 64 86 F1 | 	sub	objptr, ##1540
1c4bc     32 93 02 F1 | 	add	arg01, objptr
1c4c0     04 92 06 F1 | 	add	arg01, #4
1c4c4     49 AB 02 FB | 	rdlong	local03, arg01
1c4c8     54 93 02 F6 | 	mov	arg01, local02
1c4cc     02 92 06 F1 | 	add	arg01, #2
1c4d0     48 00 00 FF 
1c4d4     FC 65 86 F1 | 	sub	objptr, ##37372
1c4d8     D0 4D B0 FD | 	call	#_pspeek
1c4dc     3D AD E2 F8 | 	getbyte	local04, result1, #0
1c4e0     54 93 02 F6 | 	mov	arg01, local02
1c4e4     04 92 06 F1 | 	add	arg01, #4
1c4e8     08 4E B0 FD | 	call	#_pslpeek
1c4ec     3D AF 02 F6 | 	mov	local05, result1
1c4f0     54 93 02 F6 | 	mov	arg01, local02
1c4f4     08 92 06 F1 | 	add	arg01, #8
1c4f8     F8 4D B0 FD | 	call	#_pslpeek
1c4fc     3D B1 02 F6 | 	mov	local06, result1
1c500     54 93 02 F6 | 	mov	arg01, local02
1c504     0C 92 06 F1 | 	add	arg01, #12
1c508     E8 4D B0 FD | 	call	#_pslpeek
1c50c                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1c50c                 | ' esize=pspeek(arrptr+2)
1c50c                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1c50c                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1c50c                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1c50c                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1c50c     03 AA 16 F2 | 	cmp	local03, #3 wc
1c510     30 00 90 CD |  if_b	jmp	#LR__2382
1c514     58 11 BF FD | 	call	#_pop
1c518     3F A7 02 F6 | 	mov	local01, result3
1c51c     E7 7A 62 FC | 	wrlong	result1, fp
1c520     04 CE 05 F1 | 	add	fp, #4
1c524     E7 7C 62 FC | 	wrlong	result2, fp
1c528     04 CE 05 F1 | 	add	fp, #4
1c52c     E7 A6 62 FC | 	wrlong	local01, fp
1c530     08 CE 85 F1 | 	sub	fp, #8
1c534     E7 92 02 F6 | 	mov	arg01, fp
1c538     10 13 BF FD | 	call	#_converttoint
1c53c     3D B3 02 F6 | 	mov	local07, result1
1c540     04 00 90 FD | 	jmp	#LR__2383
1c544                 | LR__2382
1c544     00 B2 06 F6 | 	mov	local07, #0
1c548                 | LR__2383
1c548                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1c548     02 AA 16 F2 | 	cmp	local03, #2 wc
1c54c     30 00 90 CD |  if_b	jmp	#LR__2384
1c550     1C 11 BF FD | 	call	#_pop
1c554     3F A7 02 F6 | 	mov	local01, result3
1c558     E7 7A 62 FC | 	wrlong	result1, fp
1c55c     04 CE 05 F1 | 	add	fp, #4
1c560     E7 7C 62 FC | 	wrlong	result2, fp
1c564     04 CE 05 F1 | 	add	fp, #4
1c568     E7 A6 62 FC | 	wrlong	local01, fp
1c56c     08 CE 85 F1 | 	sub	fp, #8
1c570     E7 92 02 F6 | 	mov	arg01, fp
1c574     D4 12 BF FD | 	call	#_converttoint
1c578     3D B5 02 F6 | 	mov	local08, result1
1c57c     04 00 90 FD | 	jmp	#LR__2385
1c580                 | LR__2384
1c580     00 B4 06 F6 | 	mov	local08, #0
1c584                 | LR__2385
1c584                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1c584     01 AA 16 F2 | 	cmp	local03, #1 wc
1c588     30 00 90 CD |  if_b	jmp	#LR__2386
1c58c     E0 10 BF FD | 	call	#_pop
1c590     3F A7 02 F6 | 	mov	local01, result3
1c594     E7 7A 62 FC | 	wrlong	result1, fp
1c598     04 CE 05 F1 | 	add	fp, #4
1c59c     E7 7C 62 FC | 	wrlong	result2, fp
1c5a0     04 CE 05 F1 | 	add	fp, #4
1c5a4     E7 A6 62 FC | 	wrlong	local01, fp
1c5a8     08 CE 85 F1 | 	sub	fp, #8
1c5ac     E7 92 02 F6 | 	mov	arg01, fp
1c5b0     98 12 BF FD | 	call	#_converttoint
1c5b4     3D B7 02 F6 | 	mov	local09, result1
1c5b8     04 00 90 FD | 	jmp	#LR__2387
1c5bc                 | LR__2386
1c5bc     00 B6 06 F6 | 	mov	local09, #0
1c5c0                 | LR__2387
1c5c0                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
1c5c0                 | ' if numpar>0 then
1c5c0     01 AA 16 F2 | 	cmp	local03, #1 wc
1c5c4     44 00 90 CD |  if_b	jmp	#LR__2388
1c5c8     57 B5 02 FD | 	qmul	local08, local05
1c5cc     10 A8 06 F1 | 	add	local02, #16
1c5d0     18 B4 62 FD | 	getqx	local08
1c5d4     57 B3 02 FD | 	qmul	local07, local05
1c5d8     5A B7 02 F1 | 	add	local09, local08
1c5dc     18 B4 62 FD | 	getqx	local08
1c5e0     58 B5 02 FD | 	qmul	local08, local06
1c5e4     18 B4 62 FD | 	getqx	local08
1c5e8     5A B7 02 F1 | 	add	local09, local08
1c5ec     56 B7 02 FD | 	qmul	local09, local04
1c5f0     08 CE 05 F1 | 	add	fp, #8
1c5f4     E7 3A 68 FC | 	wrlong	#29, fp
1c5f8     08 CE 85 F1 | 	sub	fp, #8
1c5fc     18 A6 62 FD | 	getqx	local01
1c600     53 A9 02 F1 | 	add	local02, local01
1c604     E7 A8 62 FC | 	wrlong	local02, fp
1c608     10 00 90 FD | 	jmp	#LR__2389
1c60c                 | LR__2388
1c60c     08 CE 05 F1 | 	add	fp, #8
1c610     E7 3A 68 FC | 	wrlong	#29, fp
1c614     08 CE 85 F1 | 	sub	fp, #8
1c618     E7 A8 62 FC | 	wrlong	local02, fp
1c61c                 | LR__2389
1c61c     E7 92 02 F6 | 	mov	arg01, fp
1c620     DC 10 BF FD | 	call	#_push
1c624                 | LR__2390
1c624     E7 F0 03 F6 | 	mov	ptra, fp
1c628     F2 00 A0 FD | 	call	#popregs_
1c62c                 | _do_getaddr_ret
1c62c     2D 00 64 FD | 	ret
1c630                 | 
1c630                 | ' 
1c630                 | ' 
1c630                 | ' 
1c630                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1c630                 | ' '--------------------------------------- Operators ------------------------------------------------------------------------------------- 
1c630                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1c630                 | ' 
1c630                 | ' '--------------------------------- AND 
1c630                 | ' 
1c630                 | ' sub do_and 
1c630                 | _do_and
1c630     05 CA 05 F6 | 	mov	COUNT_, #5
1c634     E8 00 A0 FD | 	call	#pushregs_
1c638     18 F0 07 F1 | 	add	ptra, #24
1c63c     30 10 BF FD | 	call	#_pop
1c640     3D A7 02 F6 | 	mov	local01, result1
1c644     3E 93 02 F6 | 	mov	arg01, result2
1c648     3F AD 02 F6 | 	mov	local04, result3
1c64c     49 A9 02 F6 | 	mov	local02, arg01
1c650     56 AB 02 F6 | 	mov	local03, local04
1c654     18 10 BF FD | 	call	#_pop
1c658     3F AF 02 F6 | 	mov	local05, result3
1c65c     E7 7A 62 FC | 	wrlong	result1, fp
1c660     04 CE 05 F1 | 	add	fp, #4
1c664     E7 7C 62 FC | 	wrlong	result2, fp
1c668     04 CE 05 F1 | 	add	fp, #4
1c66c     E7 AE 62 FC | 	wrlong	local05, fp
1c670                 | ' 
1c670                 | ' t2=pop()
1c670                 | ' t1=pop()
1c670                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1c670     08 CE 85 F1 | 	sub	fp, #8
1c674     1C AE 0E F2 | 	cmp	local05, #28 wz
1c678     E7 AE 02 AB |  if_e	rdlong	local05, fp
1c67c     E7 AE 62 AC |  if_e	wrlong	local05, fp
1c680     08 CE 05 A1 |  if_e	add	fp, #8
1c684     E7 3A 68 AC |  if_e	wrlong	#29, fp
1c688     08 CE 85 A1 |  if_e	sub	fp, #8
1c68c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1c68c     1C AA 0E F2 | 	cmp	local03, #28 wz
1c690     1D AA 06 A6 |  if_e	mov	local03, #29
1c694                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
1c694     08 CE 05 F1 | 	add	fp, #8
1c698     E7 AE 02 FB | 	rdlong	local05, fp
1c69c     08 CE 85 F1 | 	sub	fp, #8
1c6a0     1F AE 0E F2 | 	cmp	local05, #31 wz
1c6a4     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1c6a8     08 CE 05 51 |  if_ne	add	fp, #8
1c6ac     E7 AC 02 5B |  if_ne	rdlong	local04, fp
1c6b0     08 CE 85 51 |  if_ne	sub	fp, #8
1c6b4     1E AC 0E 52 |  if_ne	cmp	local04, #30 wz
1c6b8     1E AA 0E 52 |  if_ne	cmp	local03, #30 wz
1c6bc     E7 0C 68 AC |  if_e	wrlong	#6, fp
1c6c0     08 CE 05 A1 |  if_e	add	fp, #8
1c6c4     E7 FE 69 AC |  if_e	wrlong	#255, fp
1c6c8     08 CE 85 A1 |  if_e	sub	fp, #8
1c6cc     E7 AE 02 5B |  if_ne	rdlong	local05, fp
1c6d0     53 AF 02 55 |  if_ne	and	local05, local01
1c6d4     E7 AE 62 5C |  if_ne	wrlong	local05, fp
1c6d8     E7 92 02 F6 | 	mov	arg01, fp
1c6dc     20 10 BF FD | 	call	#_push
1c6e0     E7 F0 03 F6 | 	mov	ptra, fp
1c6e4     F2 00 A0 FD | 	call	#popregs_
1c6e8                 | _do_and_ret
1c6e8     2D 00 64 FD | 	ret
1c6ec                 | 
1c6ec                 | ' 
1c6ec                 | ' '--------------------------------- DIV (integer divide)
1c6ec                 | ' 
1c6ec                 | ' sub do_div 
1c6ec                 | _do_div
1c6ec     04 CA 05 F6 | 	mov	COUNT_, #4
1c6f0     E8 00 A0 FD | 	call	#pushregs_
1c6f4     18 F0 07 F1 | 	add	ptra, #24
1c6f8     74 0F BF FD | 	call	#_pop
1c6fc     3D A7 02 F6 | 	mov	local01, result1
1c700     3E 11 03 F6 | 	mov	muldivb_, result2
1c704     3F 0F 03 F6 | 	mov	muldiva_, result3
1c708     88 A9 02 F6 | 	mov	local02, muldivb_
1c70c     87 AB 02 F6 | 	mov	local03, muldiva_
1c710     5C 0F BF FD | 	call	#_pop
1c714     E7 7A 62 FC | 	wrlong	result1, fp
1c718     04 CE 05 F1 | 	add	fp, #4
1c71c     E7 7C 62 FC | 	wrlong	result2, fp
1c720     04 CE 05 F1 | 	add	fp, #4
1c724     E7 7E 62 FC | 	wrlong	result3, fp
1c728                 | ' 
1c728                 | ' t2=pop()
1c728                 | ' t1=pop()
1c728                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
1c728     08 CE 85 F1 | 	sub	fp, #8
1c72c     1F 7E 0E F2 | 	cmp	result3, #31 wz
1c730     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1c734     E7 14 68 AC |  if_e	wrlong	#10, fp
1c738     08 CE 05 A1 |  if_e	add	fp, #8
1c73c     E7 FE 69 AC |  if_e	wrlong	#255, fp
1c740     08 CE 85 A1 |  if_e	sub	fp, #8
1c744     14 01 90 AD |  if_e	jmp	#LR__2405
1c748                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1c748     08 CE 05 F1 | 	add	fp, #8
1c74c     E7 10 03 FB | 	rdlong	muldivb_, fp
1c750     08 CE 85 F1 | 	sub	fp, #8
1c754     1E 10 0F F2 | 	cmp	muldivb_, #30 wz
1c758     1C 00 90 5D |  if_ne	jmp	#LR__2400
1c75c     08 CE 05 F1 | 	add	fp, #8
1c760     E7 38 68 FC | 	wrlong	#28, fp
1c764     08 CE 85 F1 | 	sub	fp, #8
1c768     E7 92 02 FB | 	rdlong	arg01, fp
1c76c     00 94 06 F6 | 	mov	arg02, #0
1c770     2C B1 B0 FD | 	call	#__system___float_tointeger
1c774     E7 7A 62 FC | 	wrlong	result1, fp
1c778                 | LR__2400
1c778                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1c778     1E AA 0E F2 | 	cmp	local03, #30 wz
1c77c     14 00 90 5D |  if_ne	jmp	#LR__2401
1c780     1C AA 06 F6 | 	mov	local03, #28
1c784     53 93 02 F6 | 	mov	arg01, local01
1c788     00 94 06 F6 | 	mov	arg02, #0
1c78c     10 B1 B0 FD | 	call	#__system___float_tointeger
1c790     3D A7 02 F6 | 	mov	local01, result1
1c794                 | LR__2401
1c794     08 CE 05 F1 | 	add	fp, #8
1c798     E7 AC 02 FB | 	rdlong	local04, fp
1c79c     08 CE 85 F1 | 	sub	fp, #8
1c7a0     1D AC 0E F2 | 	cmp	local04, #29 wz
1c7a4     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1c7a8     E7 AC 02 AB |  if_e	rdlong	local04, fp
1c7ac     53 AD 12 AD |  if_e	qdiv	local04, local01
1c7b0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
1c7b0     18 AC 62 AD |  if_e	getqx	local04
1c7b4     E7 AC 62 AC |  if_e	wrlong	local04, fp
1c7b8     A0 00 90 AD |  if_e	jmp	#LR__2405
1c7bc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
1c7bc     08 CE 05 F1 | 	add	fp, #8
1c7c0     E7 AC 02 FB | 	rdlong	local04, fp
1c7c4     08 CE 85 F1 | 	sub	fp, #8
1c7c8     1D AC 0E F2 | 	cmp	local04, #29 wz
1c7cc     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1c7d0     20 00 90 5D |  if_ne	jmp	#LR__2402
1c7d4     E7 AC 02 FB | 	rdlong	local04, fp
1c7d8     53 AD 12 FD | 	qdiv	local04, local01
1c7dc     18 AC 62 FD | 	getqx	local04
1c7e0     E7 AC 62 FC | 	wrlong	local04, fp
1c7e4     08 CE 05 F1 | 	add	fp, #8
1c7e8     E7 38 68 FC | 	wrlong	#28, fp
1c7ec     08 CE 85 F1 | 	sub	fp, #8
1c7f0     68 00 90 FD | 	jmp	#LR__2405
1c7f4                 | LR__2402
1c7f4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
1c7f4     08 CE 05 F1 | 	add	fp, #8
1c7f8     E7 AC 02 FB | 	rdlong	local04, fp
1c7fc     08 CE 85 F1 | 	sub	fp, #8
1c800     1C AC 0E F2 | 	cmp	local04, #28 wz
1c804     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1c808     14 00 90 5D |  if_ne	jmp	#LR__2403
1c80c     E7 0E 03 FB | 	rdlong	muldiva_, fp
1c810     53 11 03 F6 | 	mov	muldivb_, local01
1c814     FA 00 A0 FD | 	call	#divide_
1c818     E7 10 63 FC | 	wrlong	muldivb_, fp
1c81c     3C 00 90 FD | 	jmp	#LR__2405
1c820                 | LR__2403
1c820                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
1c820     08 CE 05 F1 | 	add	fp, #8
1c824     E7 AC 02 FB | 	rdlong	local04, fp
1c828     08 CE 85 F1 | 	sub	fp, #8
1c82c     1C AC 0E F2 | 	cmp	local04, #28 wz
1c830     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1c834     14 00 90 5D |  if_ne	jmp	#LR__2404
1c838     E7 0E 03 FB | 	rdlong	muldiva_, fp
1c83c     53 11 03 F6 | 	mov	muldivb_, local01
1c840     FA 00 A0 FD | 	call	#divide_
1c844     E7 10 63 FC | 	wrlong	muldivb_, fp
1c848     10 00 90 FD | 	jmp	#LR__2405
1c84c                 | LR__2404
1c84c     E7 16 68 FC | 	wrlong	#11, fp
1c850     08 CE 05 F1 | 	add	fp, #8
1c854     E7 FE 69 FC | 	wrlong	#255, fp
1c858     08 CE 85 F1 | 	sub	fp, #8
1c85c                 | LR__2405
1c85c     E7 92 02 F6 | 	mov	arg01, fp
1c860     9C 0E BF FD | 	call	#_push
1c864     E7 F0 03 F6 | 	mov	ptra, fp
1c868     F2 00 A0 FD | 	call	#popregs_
1c86c                 | _do_div_ret
1c86c     2D 00 64 FD | 	ret
1c870                 | 
1c870                 | ' 
1c870                 | ' '--------------------------------- equal (=)
1c870                 | ' 
1c870                 | ' sub do_eq
1c870                 | _do_eq
1c870     07 CA 05 F6 | 	mov	COUNT_, #7
1c874     E8 00 A0 FD | 	call	#pushregs_
1c878     18 F0 07 F1 | 	add	ptra, #24
1c87c     F0 0D BF FD | 	call	#_pop
1c880     3D A7 02 F6 | 	mov	local01, result1
1c884     3E AD 02 F6 | 	mov	local04, result2
1c888     3F AF 02 F6 | 	mov	local05, result3
1c88c     56 A9 02 F6 | 	mov	local02, local04
1c890     57 AB 02 F6 | 	mov	local03, local05
1c894     D8 0D BF FD | 	call	#_pop
1c898     3F AF 02 F6 | 	mov	local05, result3
1c89c     E7 7A 62 FC | 	wrlong	result1, fp
1c8a0     04 CE 05 F1 | 	add	fp, #4
1c8a4     E7 7C 62 FC | 	wrlong	result2, fp
1c8a8     04 CE 05 F1 | 	add	fp, #4
1c8ac     E7 AE 62 FC | 	wrlong	local05, fp
1c8b0                 | ' 
1c8b0                 | ' t2=pop()
1c8b0                 | ' t1=pop()
1c8b0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
1c8b0     08 CE 85 F1 | 	sub	fp, #8
1c8b4     1F AE 0E F2 | 	cmp	local05, #31 wz
1c8b8     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1c8bc     20 00 90 5D |  if_ne	jmp	#LR__2410
1c8c0     00 B0 06 F6 | 	mov	local06, #0
1c8c4     E7 92 02 FB | 	rdlong	arg01, fp
1c8c8     53 95 02 F6 | 	mov	arg02, local01
1c8cc     60 84 B0 FD | 	call	#__system___string_cmp
1c8d0     00 7A 0E F2 | 	cmp	result1, #0 wz
1c8d4     00 B0 26 A6 |  if_e	not	local06, #0
1c8d8     E7 B0 62 FC | 	wrlong	local06, fp
1c8dc     04 03 90 FD | 	jmp	#LR__2423
1c8e0                 | LR__2410
1c8e0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
1c8e0     08 CE 05 F1 | 	add	fp, #8
1c8e4     E7 B0 02 FB | 	rdlong	local06, fp
1c8e8     08 CE 85 F1 | 	sub	fp, #8
1c8ec     1E B0 0E F2 | 	cmp	local06, #30 wz
1c8f0     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1c8f4     24 00 90 5D |  if_ne	jmp	#LR__2411
1c8f8     00 B0 06 F6 | 	mov	local06, #0
1c8fc     E7 92 02 FB | 	rdlong	arg01, fp
1c900     53 95 02 F6 | 	mov	arg02, local01
1c904     01 96 06 F6 | 	mov	arg03, #1
1c908     00 AF B0 FD | 	call	#__system___float_cmp
1c90c     00 7A 0E F2 | 	cmp	result1, #0 wz
1c910     00 B0 26 A6 |  if_e	not	local06, #0
1c914     E7 B0 62 FC | 	wrlong	local06, fp
1c918     C8 02 90 FD | 	jmp	#LR__2423
1c91c                 | LR__2411
1c91c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
1c91c     08 CE 05 F1 | 	add	fp, #8
1c920     E7 B0 02 FB | 	rdlong	local06, fp
1c924     08 CE 85 F1 | 	sub	fp, #8
1c928     1E B0 0E F2 | 	cmp	local06, #30 wz
1c92c     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1c930     3C 00 90 5D |  if_ne	jmp	#LR__2412
1c934     00 B0 06 F6 | 	mov	local06, #0
1c938     E7 AC 02 FB | 	rdlong	local04, fp
1c93c     53 93 52 F6 | 	abs	arg01, local01 wc
1c940     1F B2 C6 C9 |  if_b	decod	local07, #31
1c944     00 B2 06 36 |  if_ae	mov	local07, #0
1c948     88 A6 B0 FD | 	call	#__system___float_fromuns
1c94c     59 7B 62 F5 | 	xor	result1, local07
1c950     3D 95 02 F6 | 	mov	arg02, result1
1c954     56 93 02 F6 | 	mov	arg01, local04
1c958     01 96 06 F6 | 	mov	arg03, #1
1c95c     AC AE B0 FD | 	call	#__system___float_cmp
1c960     00 7A 0E F2 | 	cmp	result1, #0 wz
1c964     00 B0 26 A6 |  if_e	not	local06, #0
1c968     E7 B0 62 FC | 	wrlong	local06, fp
1c96c     74 02 90 FD | 	jmp	#LR__2423
1c970                 | LR__2412
1c970                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
1c970     08 CE 05 F1 | 	add	fp, #8
1c974     E7 B0 02 FB | 	rdlong	local06, fp
1c978     08 CE 85 F1 | 	sub	fp, #8
1c97c     1E B0 0E F2 | 	cmp	local06, #30 wz
1c980     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1c984     30 00 90 5D |  if_ne	jmp	#LR__2413
1c988     00 B0 06 F6 | 	mov	local06, #0
1c98c     E7 AC 02 FB | 	rdlong	local04, fp
1c990     53 93 02 F6 | 	mov	arg01, local01
1c994     3C A6 B0 FD | 	call	#__system___float_fromuns
1c998     3D 95 02 F6 | 	mov	arg02, result1
1c99c     56 93 02 F6 | 	mov	arg01, local04
1c9a0     01 96 06 F6 | 	mov	arg03, #1
1c9a4     64 AE B0 FD | 	call	#__system___float_cmp
1c9a8     00 7A 0E F2 | 	cmp	result1, #0 wz
1c9ac     00 B0 26 A6 |  if_e	not	local06, #0
1c9b0     E7 B0 62 FC | 	wrlong	local06, fp
1c9b4     2C 02 90 FD | 	jmp	#LR__2423
1c9b8                 | LR__2413
1c9b8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
1c9b8     08 CE 05 F1 | 	add	fp, #8
1c9bc     E7 B0 02 FB | 	rdlong	local06, fp
1c9c0     08 CE 85 F1 | 	sub	fp, #8
1c9c4     1C B0 0E F2 | 	cmp	local06, #28 wz
1c9c8     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1c9cc     3C 00 90 5D |  if_ne	jmp	#LR__2414
1c9d0     00 B0 06 F6 | 	mov	local06, #0
1c9d4     E7 92 02 FB | 	rdlong	arg01, fp
1c9d8     49 93 52 F6 | 	abs	arg01, arg01 wc
1c9dc     1F B2 C6 C9 |  if_b	decod	local07, #31
1c9e0     00 B2 06 36 |  if_ae	mov	local07, #0
1c9e4     EC A5 B0 FD | 	call	#__system___float_fromuns
1c9e8     59 7B 62 F5 | 	xor	result1, local07
1c9ec     3D 93 02 F6 | 	mov	arg01, result1
1c9f0     53 95 02 F6 | 	mov	arg02, local01
1c9f4     01 96 06 F6 | 	mov	arg03, #1
1c9f8     10 AE B0 FD | 	call	#__system___float_cmp
1c9fc     00 7A 0E F2 | 	cmp	result1, #0 wz
1ca00     00 B0 26 A6 |  if_e	not	local06, #0
1ca04     E7 B0 62 FC | 	wrlong	local06, fp
1ca08     D8 01 90 FD | 	jmp	#LR__2423
1ca0c                 | LR__2414
1ca0c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
1ca0c     08 CE 05 F1 | 	add	fp, #8
1ca10     E7 B0 02 FB | 	rdlong	local06, fp
1ca14     08 CE 85 F1 | 	sub	fp, #8
1ca18     1C B0 0E F2 | 	cmp	local06, #28 wz
1ca1c     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1ca20     18 00 90 5D |  if_ne	jmp	#LR__2415
1ca24     00 B0 06 F6 | 	mov	local06, #0
1ca28     E7 AC 02 FB | 	rdlong	local04, fp
1ca2c     53 AD 0A F2 | 	cmp	local04, local01 wz
1ca30     01 B0 66 A6 |  if_e	neg	local06, #1
1ca34     E7 B0 62 FC | 	wrlong	local06, fp
1ca38     A8 01 90 FD | 	jmp	#LR__2423
1ca3c                 | LR__2415
1ca3c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
1ca3c     08 CE 05 F1 | 	add	fp, #8
1ca40     E7 B0 02 FB | 	rdlong	local06, fp
1ca44     08 CE 85 F1 | 	sub	fp, #8
1ca48     1C B0 0E F2 | 	cmp	local06, #28 wz
1ca4c     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1ca50     18 00 90 5D |  if_ne	jmp	#LR__2416
1ca54     00 B0 06 F6 | 	mov	local06, #0
1ca58     E7 AC 02 FB | 	rdlong	local04, fp
1ca5c     53 AD 0A F2 | 	cmp	local04, local01 wz
1ca60     01 B0 66 A6 |  if_e	neg	local06, #1
1ca64     E7 B0 62 FC | 	wrlong	local06, fp
1ca68     78 01 90 FD | 	jmp	#LR__2423
1ca6c                 | LR__2416
1ca6c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
1ca6c     08 CE 05 F1 | 	add	fp, #8
1ca70     E7 B0 02 FB | 	rdlong	local06, fp
1ca74     08 CE 85 F1 | 	sub	fp, #8
1ca78     1D B0 0E F2 | 	cmp	local06, #29 wz
1ca7c     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1ca80     2C 00 90 5D |  if_ne	jmp	#LR__2417
1ca84     00 B0 06 F6 | 	mov	local06, #0
1ca88     E7 92 02 FB | 	rdlong	arg01, fp
1ca8c     44 A5 B0 FD | 	call	#__system___float_fromuns
1ca90     3D 93 02 F6 | 	mov	arg01, result1
1ca94     53 95 02 F6 | 	mov	arg02, local01
1ca98     01 96 06 F6 | 	mov	arg03, #1
1ca9c     6C AD B0 FD | 	call	#__system___float_cmp
1caa0     00 7A 0E F2 | 	cmp	result1, #0 wz
1caa4     00 B0 26 A6 |  if_e	not	local06, #0
1caa8     E7 B0 62 FC | 	wrlong	local06, fp
1caac     34 01 90 FD | 	jmp	#LR__2423
1cab0                 | LR__2417
1cab0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
1cab0     08 CE 05 F1 | 	add	fp, #8
1cab4     E7 B0 02 FB | 	rdlong	local06, fp
1cab8     08 CE 85 F1 | 	sub	fp, #8
1cabc     1D B0 0E F2 | 	cmp	local06, #29 wz
1cac0     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1cac4     18 00 90 5D |  if_ne	jmp	#LR__2418
1cac8     00 B0 06 F6 | 	mov	local06, #0
1cacc     E7 AC 02 FB | 	rdlong	local04, fp
1cad0     53 AD 0A F2 | 	cmp	local04, local01 wz
1cad4     01 B0 66 A6 |  if_e	neg	local06, #1
1cad8     E7 B0 62 FC | 	wrlong	local06, fp
1cadc     04 01 90 FD | 	jmp	#LR__2423
1cae0                 | LR__2418
1cae0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
1cae0     08 CE 05 F1 | 	add	fp, #8
1cae4     E7 B0 02 FB | 	rdlong	local06, fp
1cae8     08 CE 85 F1 | 	sub	fp, #8
1caec     1D B0 0E F2 | 	cmp	local06, #29 wz
1caf0     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1caf4     18 00 90 5D |  if_ne	jmp	#LR__2419
1caf8     00 B0 06 F6 | 	mov	local06, #0
1cafc     E7 AC 02 FB | 	rdlong	local04, fp
1cb00     53 AD 0A F2 | 	cmp	local04, local01 wz
1cb04     01 B0 66 A6 |  if_e	neg	local06, #1
1cb08     E7 B0 62 FC | 	wrlong	local06, fp
1cb0c     D4 00 90 FD | 	jmp	#LR__2423
1cb10                 | LR__2419
1cb10                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
1cb10     08 CE 05 F1 | 	add	fp, #8
1cb14     E7 B0 02 FB | 	rdlong	local06, fp
1cb18     08 CE 85 F1 | 	sub	fp, #8
1cb1c     2B B0 0E F2 | 	cmp	local06, #43 wz
1cb20     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1cb24     28 00 90 5D |  if_ne	jmp	#LR__2420
1cb28     00 B0 06 F6 | 	mov	local06, #0
1cb2c     E7 92 02 FB | 	rdlong	arg01, fp
1cb30     AC 0C BF FD | 	call	#_convertstring
1cb34     3D 93 02 F6 | 	mov	arg01, result1
1cb38     53 95 02 F6 | 	mov	arg02, local01
1cb3c     F0 81 B0 FD | 	call	#__system___string_cmp
1cb40     00 7A 0E F2 | 	cmp	result1, #0 wz
1cb44     00 B0 26 A6 |  if_e	not	local06, #0
1cb48     E7 B0 62 FC | 	wrlong	local06, fp
1cb4c     94 00 90 FD | 	jmp	#LR__2423
1cb50                 | LR__2420
1cb50                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
1cb50     08 CE 05 F1 | 	add	fp, #8
1cb54     E7 B0 02 FB | 	rdlong	local06, fp
1cb58     08 CE 85 F1 | 	sub	fp, #8
1cb5c     1F B0 0E F2 | 	cmp	local06, #31 wz
1cb60     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1cb64     2C 00 90 5D |  if_ne	jmp	#LR__2421
1cb68     00 B0 06 F6 | 	mov	local06, #0
1cb6c     E7 AC 02 FB | 	rdlong	local04, fp
1cb70     53 93 02 F6 | 	mov	arg01, local01
1cb74     68 0C BF FD | 	call	#_convertstring
1cb78     3D 95 02 F6 | 	mov	arg02, result1
1cb7c     56 93 02 F6 | 	mov	arg01, local04
1cb80     AC 81 B0 FD | 	call	#__system___string_cmp
1cb84     00 7A 0E F2 | 	cmp	result1, #0 wz
1cb88     00 B0 26 A6 |  if_e	not	local06, #0
1cb8c     E7 B0 62 FC | 	wrlong	local06, fp
1cb90     50 00 90 FD | 	jmp	#LR__2423
1cb94                 | LR__2421
1cb94                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
1cb94     08 CE 05 F1 | 	add	fp, #8
1cb98     E7 B0 02 FB | 	rdlong	local06, fp
1cb9c     08 CE 85 F1 | 	sub	fp, #8
1cba0     2B B0 0E F2 | 	cmp	local06, #43 wz
1cba4     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1cba8     34 00 90 5D |  if_ne	jmp	#LR__2422
1cbac     00 B0 06 F6 | 	mov	local06, #0
1cbb0     E7 92 02 FB | 	rdlong	arg01, fp
1cbb4     28 0C BF FD | 	call	#_convertstring
1cbb8     3D AD 02 F6 | 	mov	local04, result1
1cbbc     53 93 02 F6 | 	mov	arg01, local01
1cbc0     1C 0C BF FD | 	call	#_convertstring
1cbc4     3D 95 02 F6 | 	mov	arg02, result1
1cbc8     56 93 02 F6 | 	mov	arg01, local04
1cbcc     60 81 B0 FD | 	call	#__system___string_cmp
1cbd0     00 7A 0E F2 | 	cmp	result1, #0 wz
1cbd4     00 B0 26 A6 |  if_e	not	local06, #0
1cbd8     E7 B0 62 FC | 	wrlong	local06, fp
1cbdc     04 00 90 FD | 	jmp	#LR__2423
1cbe0                 | LR__2422
1cbe0     E7 00 68 FC | 	wrlong	#0, fp
1cbe4                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1cbe4                 | LR__2423
1cbe4     08 CE 05 F1 | 	add	fp, #8
1cbe8     E7 38 68 FC | 	wrlong	#28, fp
1cbec     08 CE 85 F1 | 	sub	fp, #8
1cbf0     E7 92 02 F6 | 	mov	arg01, fp
1cbf4     08 0B BF FD | 	call	#_push
1cbf8     E7 F0 03 F6 | 	mov	ptra, fp
1cbfc     F2 00 A0 FD | 	call	#popregs_
1cc00                 | _do_eq_ret
1cc00     2D 00 64 FD | 	ret
1cc04                 | 
1cc04                 | ' 
1cc04                 | ' '--------------------------------- fdiv (/) - float divide
1cc04                 | ' 
1cc04                 | ' sub do_fdiv 
1cc04                 | _do_fdiv
1cc04     04 CA 05 F6 | 	mov	COUNT_, #4
1cc08     E8 00 A0 FD | 	call	#pushregs_
1cc0c     18 F0 07 F1 | 	add	ptra, #24
1cc10     5C 0A BF FD | 	call	#_pop
1cc14     3D A7 02 F6 | 	mov	local01, result1
1cc18     3E 95 02 F6 | 	mov	arg02, result2
1cc1c     3F 93 02 F6 | 	mov	arg01, result3
1cc20     4A A9 02 F6 | 	mov	local02, arg02
1cc24     49 AB 02 F6 | 	mov	local03, arg01
1cc28     44 0A BF FD | 	call	#_pop
1cc2c     E7 7A 62 FC | 	wrlong	result1, fp
1cc30     04 CE 05 F1 | 	add	fp, #4
1cc34     E7 7C 62 FC | 	wrlong	result2, fp
1cc38     04 CE 05 F1 | 	add	fp, #4
1cc3c     E7 7E 62 FC | 	wrlong	result3, fp
1cc40                 | ' 
1cc40                 | ' t2=pop()
1cc40                 | ' t1=pop()
1cc40                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
1cc40     08 CE 85 F1 | 	sub	fp, #8
1cc44     1F 7E 0E F2 | 	cmp	result3, #31 wz
1cc48     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1cc4c     E7 14 68 AC |  if_e	wrlong	#10, fp
1cc50     08 CE 05 A1 |  if_e	add	fp, #8
1cc54     E7 FE 69 AC |  if_e	wrlong	#255, fp
1cc58     08 CE 85 A1 |  if_e	sub	fp, #8
1cc5c     E0 00 90 AD |  if_e	jmp	#LR__2435
1cc60                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1cc60     08 CE 05 F1 | 	add	fp, #8
1cc64     E7 94 02 FB | 	rdlong	arg02, fp
1cc68     08 CE 85 F1 | 	sub	fp, #8
1cc6c     1C 94 0E F2 | 	cmp	arg02, #28 wz
1cc70     28 00 90 5D |  if_ne	jmp	#LR__2430
1cc74     08 CE 05 F1 | 	add	fp, #8
1cc78     E7 3C 68 FC | 	wrlong	#30, fp
1cc7c     08 CE 85 F1 | 	sub	fp, #8
1cc80     E7 92 02 FB | 	rdlong	arg01, fp
1cc84     49 93 52 F6 | 	abs	arg01, arg01 wc
1cc88     1F AC C6 C9 |  if_b	decod	local04, #31
1cc8c     00 AC 06 36 |  if_ae	mov	local04, #0
1cc90     40 A3 B0 FD | 	call	#__system___float_fromuns
1cc94     56 7B 62 F5 | 	xor	result1, local04
1cc98     E7 7A 62 FC | 	wrlong	result1, fp
1cc9c                 | LR__2430
1cc9c                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
1cc9c     08 CE 05 F1 | 	add	fp, #8
1cca0     E7 94 02 FB | 	rdlong	arg02, fp
1cca4     08 CE 85 F1 | 	sub	fp, #8
1cca8     1D 94 0E F2 | 	cmp	arg02, #29 wz
1ccac     18 00 90 5D |  if_ne	jmp	#LR__2431
1ccb0     08 CE 05 F1 | 	add	fp, #8
1ccb4     E7 3C 68 FC | 	wrlong	#30, fp
1ccb8     08 CE 85 F1 | 	sub	fp, #8
1ccbc     E7 92 02 FB | 	rdlong	arg01, fp
1ccc0     10 A3 B0 FD | 	call	#__system___float_fromuns
1ccc4     E7 7A 62 FC | 	wrlong	result1, fp
1ccc8                 | LR__2431
1ccc8                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1ccc8     1C AA 0E F2 | 	cmp	local03, #28 wz
1cccc     1C 00 90 5D |  if_ne	jmp	#LR__2432
1ccd0     1E AA 06 F6 | 	mov	local03, #30
1ccd4     53 93 52 F6 | 	abs	arg01, local01 wc
1ccd8     1F AC C6 C9 |  if_b	decod	local04, #31
1ccdc     00 AC 06 36 |  if_ae	mov	local04, #0
1cce0     F0 A2 B0 FD | 	call	#__system___float_fromuns
1cce4     56 7B 62 F5 | 	xor	result1, local04
1cce8     3D A7 02 F6 | 	mov	local01, result1
1ccec                 | LR__2432
1ccec                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1ccec     1D AA 0E F2 | 	cmp	local03, #29 wz
1ccf0     10 00 90 5D |  if_ne	jmp	#LR__2433
1ccf4     1E AA 06 F6 | 	mov	local03, #30
1ccf8     53 93 02 F6 | 	mov	arg01, local01
1ccfc     D4 A2 B0 FD | 	call	#__system___float_fromuns
1cd00     3D A7 02 F6 | 	mov	local01, result1
1cd04                 | LR__2433
1cd04                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
1cd04     08 CE 05 F1 | 	add	fp, #8
1cd08     E7 94 02 FB | 	rdlong	arg02, fp
1cd0c     08 CE 85 F1 | 	sub	fp, #8
1cd10     1E 94 0E F2 | 	cmp	arg02, #30 wz
1cd14     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1cd18     14 00 90 5D |  if_ne	jmp	#LR__2434
1cd1c     E7 92 02 FB | 	rdlong	arg01, fp
1cd20     53 95 02 F6 | 	mov	arg02, local01
1cd24     B4 A8 B0 FD | 	call	#__system___float_div
1cd28     E7 7A 62 FC | 	wrlong	result1, fp
1cd2c     10 00 90 FD | 	jmp	#LR__2435
1cd30                 | LR__2434
1cd30     E7 16 68 FC | 	wrlong	#11, fp
1cd34     08 CE 05 F1 | 	add	fp, #8
1cd38     E7 FE 69 FC | 	wrlong	#255, fp
1cd3c     08 CE 85 F1 | 	sub	fp, #8
1cd40                 | LR__2435
1cd40     E7 92 02 F6 | 	mov	arg01, fp
1cd44     B8 09 BF FD | 	call	#_push
1cd48     E7 F0 03 F6 | 	mov	ptra, fp
1cd4c     F2 00 A0 FD | 	call	#popregs_
1cd50                 | _do_fdiv_ret
1cd50     2D 00 64 FD | 	ret
1cd54                 | 
1cd54                 | ' 
1cd54                 | ' '--------------------------------- greater or equal (>=)
1cd54                 | ' 
1cd54                 | ' sub do_ge
1cd54                 | _do_ge
1cd54     07 CA 05 F6 | 	mov	COUNT_, #7
1cd58     E8 00 A0 FD | 	call	#pushregs_
1cd5c     18 F0 07 F1 | 	add	ptra, #24
1cd60     0C 09 BF FD | 	call	#_pop
1cd64     3D A7 02 F6 | 	mov	local01, result1
1cd68     3E AD 02 F6 | 	mov	local04, result2
1cd6c     3F AF 02 F6 | 	mov	local05, result3
1cd70     56 A9 02 F6 | 	mov	local02, local04
1cd74     57 AB 02 F6 | 	mov	local03, local05
1cd78     F4 08 BF FD | 	call	#_pop
1cd7c     3F AF 02 F6 | 	mov	local05, result3
1cd80     E7 7A 62 FC | 	wrlong	result1, fp
1cd84     04 CE 05 F1 | 	add	fp, #4
1cd88     E7 7C 62 FC | 	wrlong	result2, fp
1cd8c     04 CE 05 F1 | 	add	fp, #4
1cd90     E7 AE 62 FC | 	wrlong	local05, fp
1cd94                 | ' 
1cd94                 | ' t2=pop()
1cd94                 | ' t1=pop()
1cd94                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
1cd94     08 CE 85 F1 | 	sub	fp, #8
1cd98     1F AE 0E F2 | 	cmp	local05, #31 wz
1cd9c     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1cda0     20 00 90 5D |  if_ne	jmp	#LR__2440
1cda4     00 B0 06 F6 | 	mov	local06, #0
1cda8     E7 92 02 FB | 	rdlong	arg01, fp
1cdac     53 95 02 F6 | 	mov	arg02, local01
1cdb0     7C 7F B0 FD | 	call	#__system___string_cmp
1cdb4     00 7A 56 F2 | 	cmps	result1, #0 wc
1cdb8     00 B0 26 36 |  if_ae	not	local06, #0
1cdbc     E7 B0 62 FC | 	wrlong	local06, fp
1cdc0     04 03 90 FD | 	jmp	#LR__2453
1cdc4                 | LR__2440
1cdc4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
1cdc4     08 CE 05 F1 | 	add	fp, #8
1cdc8     E7 B0 02 FB | 	rdlong	local06, fp
1cdcc     08 CE 85 F1 | 	sub	fp, #8
1cdd0     1E B0 0E F2 | 	cmp	local06, #30 wz
1cdd4     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1cdd8     24 00 90 5D |  if_ne	jmp	#LR__2441
1cddc     00 B0 06 F6 | 	mov	local06, #0
1cde0     E7 92 02 FB | 	rdlong	arg01, fp
1cde4     53 95 02 F6 | 	mov	arg02, local01
1cde8     01 96 66 F6 | 	neg	arg03, #1
1cdec     1C AA B0 FD | 	call	#__system___float_cmp
1cdf0     00 7A 56 F2 | 	cmps	result1, #0 wc
1cdf4     00 B0 26 36 |  if_ae	not	local06, #0
1cdf8     E7 B0 62 FC | 	wrlong	local06, fp
1cdfc     C8 02 90 FD | 	jmp	#LR__2453
1ce00                 | LR__2441
1ce00                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
1ce00     08 CE 05 F1 | 	add	fp, #8
1ce04     E7 B0 02 FB | 	rdlong	local06, fp
1ce08     08 CE 85 F1 | 	sub	fp, #8
1ce0c     1E B0 0E F2 | 	cmp	local06, #30 wz
1ce10     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1ce14     3C 00 90 5D |  if_ne	jmp	#LR__2442
1ce18     00 B0 06 F6 | 	mov	local06, #0
1ce1c     E7 AC 02 FB | 	rdlong	local04, fp
1ce20     53 93 52 F6 | 	abs	arg01, local01 wc
1ce24     1F B2 C6 C9 |  if_b	decod	local07, #31
1ce28     00 B2 06 36 |  if_ae	mov	local07, #0
1ce2c     A4 A1 B0 FD | 	call	#__system___float_fromuns
1ce30     59 7B 62 F5 | 	xor	result1, local07
1ce34     3D 95 02 F6 | 	mov	arg02, result1
1ce38     56 93 02 F6 | 	mov	arg01, local04
1ce3c     01 96 66 F6 | 	neg	arg03, #1
1ce40     C8 A9 B0 FD | 	call	#__system___float_cmp
1ce44     00 7A 56 F2 | 	cmps	result1, #0 wc
1ce48     00 B0 26 36 |  if_ae	not	local06, #0
1ce4c     E7 B0 62 FC | 	wrlong	local06, fp
1ce50     74 02 90 FD | 	jmp	#LR__2453
1ce54                 | LR__2442
1ce54                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
1ce54     08 CE 05 F1 | 	add	fp, #8
1ce58     E7 B0 02 FB | 	rdlong	local06, fp
1ce5c     08 CE 85 F1 | 	sub	fp, #8
1ce60     1E B0 0E F2 | 	cmp	local06, #30 wz
1ce64     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1ce68     30 00 90 5D |  if_ne	jmp	#LR__2443
1ce6c     00 B0 06 F6 | 	mov	local06, #0
1ce70     E7 AC 02 FB | 	rdlong	local04, fp
1ce74     53 93 02 F6 | 	mov	arg01, local01
1ce78     58 A1 B0 FD | 	call	#__system___float_fromuns
1ce7c     3D 95 02 F6 | 	mov	arg02, result1
1ce80     56 93 02 F6 | 	mov	arg01, local04
1ce84     01 96 66 F6 | 	neg	arg03, #1
1ce88     80 A9 B0 FD | 	call	#__system___float_cmp
1ce8c     00 7A 56 F2 | 	cmps	result1, #0 wc
1ce90     00 B0 26 36 |  if_ae	not	local06, #0
1ce94     E7 B0 62 FC | 	wrlong	local06, fp
1ce98     2C 02 90 FD | 	jmp	#LR__2453
1ce9c                 | LR__2443
1ce9c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
1ce9c     08 CE 05 F1 | 	add	fp, #8
1cea0     E7 B0 02 FB | 	rdlong	local06, fp
1cea4     08 CE 85 F1 | 	sub	fp, #8
1cea8     1C B0 0E F2 | 	cmp	local06, #28 wz
1ceac     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1ceb0     3C 00 90 5D |  if_ne	jmp	#LR__2444
1ceb4     00 B0 06 F6 | 	mov	local06, #0
1ceb8     E7 92 02 FB | 	rdlong	arg01, fp
1cebc     49 93 52 F6 | 	abs	arg01, arg01 wc
1cec0     1F B2 C6 C9 |  if_b	decod	local07, #31
1cec4     00 B2 06 36 |  if_ae	mov	local07, #0
1cec8     08 A1 B0 FD | 	call	#__system___float_fromuns
1cecc     59 7B 62 F5 | 	xor	result1, local07
1ced0     3D 93 02 F6 | 	mov	arg01, result1
1ced4     53 95 02 F6 | 	mov	arg02, local01
1ced8     01 96 66 F6 | 	neg	arg03, #1
1cedc     2C A9 B0 FD | 	call	#__system___float_cmp
1cee0     00 7A 56 F2 | 	cmps	result1, #0 wc
1cee4     00 B0 26 36 |  if_ae	not	local06, #0
1cee8     E7 B0 62 FC | 	wrlong	local06, fp
1ceec     D8 01 90 FD | 	jmp	#LR__2453
1cef0                 | LR__2444
1cef0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
1cef0     08 CE 05 F1 | 	add	fp, #8
1cef4     E7 B0 02 FB | 	rdlong	local06, fp
1cef8     08 CE 85 F1 | 	sub	fp, #8
1cefc     1C B0 0E F2 | 	cmp	local06, #28 wz
1cf00     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1cf04     18 00 90 5D |  if_ne	jmp	#LR__2445
1cf08     00 B0 06 F6 | 	mov	local06, #0
1cf0c     E7 AC 02 FB | 	rdlong	local04, fp
1cf10     53 AD 52 F2 | 	cmps	local04, local01 wc
1cf14     01 B0 66 36 |  if_ae	neg	local06, #1
1cf18     E7 B0 62 FC | 	wrlong	local06, fp
1cf1c     A8 01 90 FD | 	jmp	#LR__2453
1cf20                 | LR__2445
1cf20                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
1cf20     08 CE 05 F1 | 	add	fp, #8
1cf24     E7 B0 02 FB | 	rdlong	local06, fp
1cf28     08 CE 85 F1 | 	sub	fp, #8
1cf2c     1C B0 0E F2 | 	cmp	local06, #28 wz
1cf30     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1cf34     18 00 90 5D |  if_ne	jmp	#LR__2446
1cf38     00 B0 06 F6 | 	mov	local06, #0
1cf3c     E7 AC 02 FB | 	rdlong	local04, fp
1cf40     53 AD 52 F2 | 	cmps	local04, local01 wc
1cf44     01 B0 66 36 |  if_ae	neg	local06, #1
1cf48     E7 B0 62 FC | 	wrlong	local06, fp
1cf4c     78 01 90 FD | 	jmp	#LR__2453
1cf50                 | LR__2446
1cf50                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
1cf50     08 CE 05 F1 | 	add	fp, #8
1cf54     E7 B0 02 FB | 	rdlong	local06, fp
1cf58     08 CE 85 F1 | 	sub	fp, #8
1cf5c     1D B0 0E F2 | 	cmp	local06, #29 wz
1cf60     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1cf64     2C 00 90 5D |  if_ne	jmp	#LR__2447
1cf68     00 B0 06 F6 | 	mov	local06, #0
1cf6c     E7 92 02 FB | 	rdlong	arg01, fp
1cf70     60 A0 B0 FD | 	call	#__system___float_fromuns
1cf74     3D 93 02 F6 | 	mov	arg01, result1
1cf78     53 95 02 F6 | 	mov	arg02, local01
1cf7c     01 96 66 F6 | 	neg	arg03, #1
1cf80     88 A8 B0 FD | 	call	#__system___float_cmp
1cf84     00 7A 56 F2 | 	cmps	result1, #0 wc
1cf88     00 B0 26 36 |  if_ae	not	local06, #0
1cf8c     E7 B0 62 FC | 	wrlong	local06, fp
1cf90     34 01 90 FD | 	jmp	#LR__2453
1cf94                 | LR__2447
1cf94                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
1cf94     08 CE 05 F1 | 	add	fp, #8
1cf98     E7 B0 02 FB | 	rdlong	local06, fp
1cf9c     08 CE 85 F1 | 	sub	fp, #8
1cfa0     1D B0 0E F2 | 	cmp	local06, #29 wz
1cfa4     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1cfa8     18 00 90 5D |  if_ne	jmp	#LR__2448
1cfac     00 B0 06 F6 | 	mov	local06, #0
1cfb0     E7 AC 02 FB | 	rdlong	local04, fp
1cfb4     53 AD 52 F2 | 	cmps	local04, local01 wc
1cfb8     01 B0 66 36 |  if_ae	neg	local06, #1
1cfbc     E7 B0 62 FC | 	wrlong	local06, fp
1cfc0     04 01 90 FD | 	jmp	#LR__2453
1cfc4                 | LR__2448
1cfc4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
1cfc4     08 CE 05 F1 | 	add	fp, #8
1cfc8     E7 B0 02 FB | 	rdlong	local06, fp
1cfcc     08 CE 85 F1 | 	sub	fp, #8
1cfd0     1D B0 0E F2 | 	cmp	local06, #29 wz
1cfd4     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1cfd8     18 00 90 5D |  if_ne	jmp	#LR__2449
1cfdc     00 B0 06 F6 | 	mov	local06, #0
1cfe0     E7 AC 02 FB | 	rdlong	local04, fp
1cfe4     53 AD 12 F2 | 	cmp	local04, local01 wc
1cfe8     01 B0 66 36 |  if_ae	neg	local06, #1
1cfec     E7 B0 62 FC | 	wrlong	local06, fp
1cff0     D4 00 90 FD | 	jmp	#LR__2453
1cff4                 | LR__2449
1cff4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
1cff4     08 CE 05 F1 | 	add	fp, #8
1cff8     E7 B0 02 FB | 	rdlong	local06, fp
1cffc     08 CE 85 F1 | 	sub	fp, #8
1d000     2B B0 0E F2 | 	cmp	local06, #43 wz
1d004     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1d008     28 00 90 5D |  if_ne	jmp	#LR__2450
1d00c     00 B0 06 F6 | 	mov	local06, #0
1d010     E7 92 02 FB | 	rdlong	arg01, fp
1d014     C8 07 BF FD | 	call	#_convertstring
1d018     3D 93 02 F6 | 	mov	arg01, result1
1d01c     53 95 02 F6 | 	mov	arg02, local01
1d020     0C 7D B0 FD | 	call	#__system___string_cmp
1d024     00 7A 56 F2 | 	cmps	result1, #0 wc
1d028     00 B0 26 36 |  if_ae	not	local06, #0
1d02c     E7 B0 62 FC | 	wrlong	local06, fp
1d030     94 00 90 FD | 	jmp	#LR__2453
1d034                 | LR__2450
1d034                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
1d034     08 CE 05 F1 | 	add	fp, #8
1d038     E7 B0 02 FB | 	rdlong	local06, fp
1d03c     08 CE 85 F1 | 	sub	fp, #8
1d040     1F B0 0E F2 | 	cmp	local06, #31 wz
1d044     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1d048     2C 00 90 5D |  if_ne	jmp	#LR__2451
1d04c     00 B0 06 F6 | 	mov	local06, #0
1d050     E7 AC 02 FB | 	rdlong	local04, fp
1d054     53 93 02 F6 | 	mov	arg01, local01
1d058     84 07 BF FD | 	call	#_convertstring
1d05c     3D 95 02 F6 | 	mov	arg02, result1
1d060     56 93 02 F6 | 	mov	arg01, local04
1d064     C8 7C B0 FD | 	call	#__system___string_cmp
1d068     00 7A 56 F2 | 	cmps	result1, #0 wc
1d06c     00 B0 26 36 |  if_ae	not	local06, #0
1d070     E7 B0 62 FC | 	wrlong	local06, fp
1d074     50 00 90 FD | 	jmp	#LR__2453
1d078                 | LR__2451
1d078                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
1d078     08 CE 05 F1 | 	add	fp, #8
1d07c     E7 B0 02 FB | 	rdlong	local06, fp
1d080     08 CE 85 F1 | 	sub	fp, #8
1d084     2B B0 0E F2 | 	cmp	local06, #43 wz
1d088     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1d08c     34 00 90 5D |  if_ne	jmp	#LR__2452
1d090     00 B0 06 F6 | 	mov	local06, #0
1d094     E7 92 02 FB | 	rdlong	arg01, fp
1d098     44 07 BF FD | 	call	#_convertstring
1d09c     3D AD 02 F6 | 	mov	local04, result1
1d0a0     53 93 02 F6 | 	mov	arg01, local01
1d0a4     38 07 BF FD | 	call	#_convertstring
1d0a8     3D 95 02 F6 | 	mov	arg02, result1
1d0ac     56 93 02 F6 | 	mov	arg01, local04
1d0b0     7C 7C B0 FD | 	call	#__system___string_cmp
1d0b4     00 7A 56 F2 | 	cmps	result1, #0 wc
1d0b8     00 B0 26 36 |  if_ae	not	local06, #0
1d0bc     E7 B0 62 FC | 	wrlong	local06, fp
1d0c0     04 00 90 FD | 	jmp	#LR__2453
1d0c4                 | LR__2452
1d0c4     E7 00 68 FC | 	wrlong	#0, fp
1d0c8                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1d0c8                 | LR__2453
1d0c8     08 CE 05 F1 | 	add	fp, #8
1d0cc     E7 38 68 FC | 	wrlong	#28, fp
1d0d0     08 CE 85 F1 | 	sub	fp, #8
1d0d4                 | ' 1180 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1d0d4     E7 B0 0A FB | 	rdlong	local06, fp wz
1d0d8     E7 02 68 5C |  if_ne	wrlong	#1, fp
1d0dc     E7 92 02 F6 | 	mov	arg01, fp
1d0e0     1C 06 BF FD | 	call	#_push
1d0e4     E7 F0 03 F6 | 	mov	ptra, fp
1d0e8     F2 00 A0 FD | 	call	#popregs_
1d0ec                 | _do_ge_ret
1d0ec     2D 00 64 FD | 	ret
1d0f0                 | 
1d0f0                 | ' 
1d0f0                 | ' '--------------------------------- greater than (>)
1d0f0                 | ' 
1d0f0                 | ' sub do_gt
1d0f0                 | _do_gt
1d0f0     07 CA 05 F6 | 	mov	COUNT_, #7
1d0f4     E8 00 A0 FD | 	call	#pushregs_
1d0f8     18 F0 07 F1 | 	add	ptra, #24
1d0fc     70 05 BF FD | 	call	#_pop
1d100     3D A7 02 F6 | 	mov	local01, result1
1d104     3E AD 02 F6 | 	mov	local04, result2
1d108     3F AF 02 F6 | 	mov	local05, result3
1d10c     56 A9 02 F6 | 	mov	local02, local04
1d110     57 AB 02 F6 | 	mov	local03, local05
1d114     58 05 BF FD | 	call	#_pop
1d118     3F AF 02 F6 | 	mov	local05, result3
1d11c     E7 7A 62 FC | 	wrlong	result1, fp
1d120     04 CE 05 F1 | 	add	fp, #4
1d124     E7 7C 62 FC | 	wrlong	result2, fp
1d128     04 CE 05 F1 | 	add	fp, #4
1d12c     E7 AE 62 FC | 	wrlong	local05, fp
1d130                 | ' 
1d130                 | ' t2=pop()
1d130                 | ' t1=pop()
1d130                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
1d130     08 CE 85 F1 | 	sub	fp, #8
1d134     1F AE 0E F2 | 	cmp	local05, #31 wz
1d138     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1d13c     20 00 90 5D |  if_ne	jmp	#LR__2460
1d140     00 B0 06 F6 | 	mov	local06, #0
1d144     E7 92 02 FB | 	rdlong	arg01, fp
1d148     53 95 02 F6 | 	mov	arg02, local01
1d14c     E0 7B B0 FD | 	call	#__system___string_cmp
1d150     01 7A 56 F2 | 	cmps	result1, #1 wc
1d154     00 B0 26 36 |  if_ae	not	local06, #0
1d158     E7 B0 62 FC | 	wrlong	local06, fp
1d15c     04 03 90 FD | 	jmp	#LR__2473
1d160                 | LR__2460
1d160                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
1d160     08 CE 05 F1 | 	add	fp, #8
1d164     E7 B0 02 FB | 	rdlong	local06, fp
1d168     08 CE 85 F1 | 	sub	fp, #8
1d16c     1E B0 0E F2 | 	cmp	local06, #30 wz
1d170     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1d174     24 00 90 5D |  if_ne	jmp	#LR__2461
1d178     00 B0 06 F6 | 	mov	local06, #0
1d17c     E7 92 02 FB | 	rdlong	arg01, fp
1d180     53 95 02 F6 | 	mov	arg02, local01
1d184     01 96 66 F6 | 	neg	arg03, #1
1d188     80 A6 B0 FD | 	call	#__system___float_cmp
1d18c     01 7A 56 F2 | 	cmps	result1, #1 wc
1d190     00 B0 26 36 |  if_ae	not	local06, #0
1d194     E7 B0 62 FC | 	wrlong	local06, fp
1d198     C8 02 90 FD | 	jmp	#LR__2473
1d19c                 | LR__2461
1d19c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
1d19c     08 CE 05 F1 | 	add	fp, #8
1d1a0     E7 B0 02 FB | 	rdlong	local06, fp
1d1a4     08 CE 85 F1 | 	sub	fp, #8
1d1a8     1E B0 0E F2 | 	cmp	local06, #30 wz
1d1ac     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d1b0     3C 00 90 5D |  if_ne	jmp	#LR__2462
1d1b4     00 B0 06 F6 | 	mov	local06, #0
1d1b8     E7 AC 02 FB | 	rdlong	local04, fp
1d1bc     53 93 52 F6 | 	abs	arg01, local01 wc
1d1c0     1F B2 C6 C9 |  if_b	decod	local07, #31
1d1c4     00 B2 06 36 |  if_ae	mov	local07, #0
1d1c8     08 9E B0 FD | 	call	#__system___float_fromuns
1d1cc     59 7B 62 F5 | 	xor	result1, local07
1d1d0     3D 95 02 F6 | 	mov	arg02, result1
1d1d4     56 93 02 F6 | 	mov	arg01, local04
1d1d8     01 96 66 F6 | 	neg	arg03, #1
1d1dc     2C A6 B0 FD | 	call	#__system___float_cmp
1d1e0     01 7A 56 F2 | 	cmps	result1, #1 wc
1d1e4     00 B0 26 36 |  if_ae	not	local06, #0
1d1e8     E7 B0 62 FC | 	wrlong	local06, fp
1d1ec     74 02 90 FD | 	jmp	#LR__2473
1d1f0                 | LR__2462
1d1f0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
1d1f0     08 CE 05 F1 | 	add	fp, #8
1d1f4     E7 B0 02 FB | 	rdlong	local06, fp
1d1f8     08 CE 85 F1 | 	sub	fp, #8
1d1fc     1E B0 0E F2 | 	cmp	local06, #30 wz
1d200     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d204     30 00 90 5D |  if_ne	jmp	#LR__2463
1d208     00 B0 06 F6 | 	mov	local06, #0
1d20c     E7 AC 02 FB | 	rdlong	local04, fp
1d210     53 93 02 F6 | 	mov	arg01, local01
1d214     BC 9D B0 FD | 	call	#__system___float_fromuns
1d218     3D 95 02 F6 | 	mov	arg02, result1
1d21c     56 93 02 F6 | 	mov	arg01, local04
1d220     01 96 66 F6 | 	neg	arg03, #1
1d224     E4 A5 B0 FD | 	call	#__system___float_cmp
1d228     01 7A 56 F2 | 	cmps	result1, #1 wc
1d22c     00 B0 26 36 |  if_ae	not	local06, #0
1d230     E7 B0 62 FC | 	wrlong	local06, fp
1d234     2C 02 90 FD | 	jmp	#LR__2473
1d238                 | LR__2463
1d238                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
1d238     08 CE 05 F1 | 	add	fp, #8
1d23c     E7 B0 02 FB | 	rdlong	local06, fp
1d240     08 CE 85 F1 | 	sub	fp, #8
1d244     1C B0 0E F2 | 	cmp	local06, #28 wz
1d248     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1d24c     3C 00 90 5D |  if_ne	jmp	#LR__2464
1d250     00 B0 06 F6 | 	mov	local06, #0
1d254     E7 92 02 FB | 	rdlong	arg01, fp
1d258     49 93 52 F6 | 	abs	arg01, arg01 wc
1d25c     1F B2 C6 C9 |  if_b	decod	local07, #31
1d260     00 B2 06 36 |  if_ae	mov	local07, #0
1d264     6C 9D B0 FD | 	call	#__system___float_fromuns
1d268     59 7B 62 F5 | 	xor	result1, local07
1d26c     3D 93 02 F6 | 	mov	arg01, result1
1d270     53 95 02 F6 | 	mov	arg02, local01
1d274     01 96 66 F6 | 	neg	arg03, #1
1d278     90 A5 B0 FD | 	call	#__system___float_cmp
1d27c     01 7A 56 F2 | 	cmps	result1, #1 wc
1d280     00 B0 26 36 |  if_ae	not	local06, #0
1d284     E7 B0 62 FC | 	wrlong	local06, fp
1d288     D8 01 90 FD | 	jmp	#LR__2473
1d28c                 | LR__2464
1d28c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
1d28c     08 CE 05 F1 | 	add	fp, #8
1d290     E7 B0 02 FB | 	rdlong	local06, fp
1d294     08 CE 85 F1 | 	sub	fp, #8
1d298     1C B0 0E F2 | 	cmp	local06, #28 wz
1d29c     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d2a0     18 00 90 5D |  if_ne	jmp	#LR__2465
1d2a4     00 B0 06 F6 | 	mov	local06, #0
1d2a8     E7 AC 02 FB | 	rdlong	local04, fp
1d2ac     53 AD 5A F2 | 	cmps	local04, local01 wcz
1d2b0     01 B0 66 16 |  if_a	neg	local06, #1
1d2b4     E7 B0 62 FC | 	wrlong	local06, fp
1d2b8     A8 01 90 FD | 	jmp	#LR__2473
1d2bc                 | LR__2465
1d2bc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
1d2bc     08 CE 05 F1 | 	add	fp, #8
1d2c0     E7 B0 02 FB | 	rdlong	local06, fp
1d2c4     08 CE 85 F1 | 	sub	fp, #8
1d2c8     1C B0 0E F2 | 	cmp	local06, #28 wz
1d2cc     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d2d0     18 00 90 5D |  if_ne	jmp	#LR__2466
1d2d4     00 B0 06 F6 | 	mov	local06, #0
1d2d8     E7 AC 02 FB | 	rdlong	local04, fp
1d2dc     53 AD 5A F2 | 	cmps	local04, local01 wcz
1d2e0     01 B0 66 16 |  if_a	neg	local06, #1
1d2e4     E7 B0 62 FC | 	wrlong	local06, fp
1d2e8     78 01 90 FD | 	jmp	#LR__2473
1d2ec                 | LR__2466
1d2ec                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
1d2ec     08 CE 05 F1 | 	add	fp, #8
1d2f0     E7 B0 02 FB | 	rdlong	local06, fp
1d2f4     08 CE 85 F1 | 	sub	fp, #8
1d2f8     1D B0 0E F2 | 	cmp	local06, #29 wz
1d2fc     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1d300     2C 00 90 5D |  if_ne	jmp	#LR__2467
1d304     00 B0 06 F6 | 	mov	local06, #0
1d308     E7 92 02 FB | 	rdlong	arg01, fp
1d30c     C4 9C B0 FD | 	call	#__system___float_fromuns
1d310     3D 93 02 F6 | 	mov	arg01, result1
1d314     53 95 02 F6 | 	mov	arg02, local01
1d318     01 96 66 F6 | 	neg	arg03, #1
1d31c     EC A4 B0 FD | 	call	#__system___float_cmp
1d320     01 7A 56 F2 | 	cmps	result1, #1 wc
1d324     00 B0 26 36 |  if_ae	not	local06, #0
1d328     E7 B0 62 FC | 	wrlong	local06, fp
1d32c     34 01 90 FD | 	jmp	#LR__2473
1d330                 | LR__2467
1d330                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
1d330     08 CE 05 F1 | 	add	fp, #8
1d334     E7 B0 02 FB | 	rdlong	local06, fp
1d338     08 CE 85 F1 | 	sub	fp, #8
1d33c     1D B0 0E F2 | 	cmp	local06, #29 wz
1d340     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d344     18 00 90 5D |  if_ne	jmp	#LR__2468
1d348     00 B0 06 F6 | 	mov	local06, #0
1d34c     E7 AC 02 FB | 	rdlong	local04, fp
1d350     53 AD 5A F2 | 	cmps	local04, local01 wcz
1d354     01 B0 66 16 |  if_a	neg	local06, #1
1d358     E7 B0 62 FC | 	wrlong	local06, fp
1d35c     04 01 90 FD | 	jmp	#LR__2473
1d360                 | LR__2468
1d360                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
1d360     08 CE 05 F1 | 	add	fp, #8
1d364     E7 B0 02 FB | 	rdlong	local06, fp
1d368     08 CE 85 F1 | 	sub	fp, #8
1d36c     1D B0 0E F2 | 	cmp	local06, #29 wz
1d370     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d374     18 00 90 5D |  if_ne	jmp	#LR__2469
1d378     00 B0 06 F6 | 	mov	local06, #0
1d37c     E7 AC 02 FB | 	rdlong	local04, fp
1d380     53 AD 1A F2 | 	cmp	local04, local01 wcz
1d384     01 B0 66 16 |  if_a	neg	local06, #1
1d388     E7 B0 62 FC | 	wrlong	local06, fp
1d38c     D4 00 90 FD | 	jmp	#LR__2473
1d390                 | LR__2469
1d390                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
1d390     08 CE 05 F1 | 	add	fp, #8
1d394     E7 B0 02 FB | 	rdlong	local06, fp
1d398     08 CE 85 F1 | 	sub	fp, #8
1d39c     2B B0 0E F2 | 	cmp	local06, #43 wz
1d3a0     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1d3a4     28 00 90 5D |  if_ne	jmp	#LR__2470
1d3a8     00 B0 06 F6 | 	mov	local06, #0
1d3ac     E7 92 02 FB | 	rdlong	arg01, fp
1d3b0     2C 04 BF FD | 	call	#_convertstring
1d3b4     3D 93 02 F6 | 	mov	arg01, result1
1d3b8     53 95 02 F6 | 	mov	arg02, local01
1d3bc     70 79 B0 FD | 	call	#__system___string_cmp
1d3c0     01 7A 56 F2 | 	cmps	result1, #1 wc
1d3c4     00 B0 26 36 |  if_ae	not	local06, #0
1d3c8     E7 B0 62 FC | 	wrlong	local06, fp
1d3cc     94 00 90 FD | 	jmp	#LR__2473
1d3d0                 | LR__2470
1d3d0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
1d3d0     08 CE 05 F1 | 	add	fp, #8
1d3d4     E7 B0 02 FB | 	rdlong	local06, fp
1d3d8     08 CE 85 F1 | 	sub	fp, #8
1d3dc     1F B0 0E F2 | 	cmp	local06, #31 wz
1d3e0     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1d3e4     2C 00 90 5D |  if_ne	jmp	#LR__2471
1d3e8     00 B0 06 F6 | 	mov	local06, #0
1d3ec     E7 AC 02 FB | 	rdlong	local04, fp
1d3f0     53 93 02 F6 | 	mov	arg01, local01
1d3f4     E8 03 BF FD | 	call	#_convertstring
1d3f8     3D 95 02 F6 | 	mov	arg02, result1
1d3fc     56 93 02 F6 | 	mov	arg01, local04
1d400     2C 79 B0 FD | 	call	#__system___string_cmp
1d404     01 7A 56 F2 | 	cmps	result1, #1 wc
1d408     00 B0 26 36 |  if_ae	not	local06, #0
1d40c     E7 B0 62 FC | 	wrlong	local06, fp
1d410     50 00 90 FD | 	jmp	#LR__2473
1d414                 | LR__2471
1d414                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
1d414     08 CE 05 F1 | 	add	fp, #8
1d418     E7 B0 02 FB | 	rdlong	local06, fp
1d41c     08 CE 85 F1 | 	sub	fp, #8
1d420     2B B0 0E F2 | 	cmp	local06, #43 wz
1d424     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1d428     34 00 90 5D |  if_ne	jmp	#LR__2472
1d42c     00 B0 06 F6 | 	mov	local06, #0
1d430     E7 92 02 FB | 	rdlong	arg01, fp
1d434     A8 03 BF FD | 	call	#_convertstring
1d438     3D AD 02 F6 | 	mov	local04, result1
1d43c     53 93 02 F6 | 	mov	arg01, local01
1d440     9C 03 BF FD | 	call	#_convertstring
1d444     3D 95 02 F6 | 	mov	arg02, result1
1d448     56 93 02 F6 | 	mov	arg01, local04
1d44c     E0 78 B0 FD | 	call	#__system___string_cmp
1d450     01 7A 56 F2 | 	cmps	result1, #1 wc
1d454     00 B0 26 36 |  if_ae	not	local06, #0
1d458     E7 B0 62 FC | 	wrlong	local06, fp
1d45c     04 00 90 FD | 	jmp	#LR__2473
1d460                 | LR__2472
1d460     E7 00 68 FC | 	wrlong	#0, fp
1d464                 | LR__2473
1d464     08 CE 05 F1 | 	add	fp, #8
1d468     E7 38 68 FC | 	wrlong	#28, fp
1d46c     08 CE 85 F1 | 	sub	fp, #8
1d470                 | ' t1.result.uresult=0
1d470                 | ' 1160 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1d470     E7 B0 0A FB | 	rdlong	local06, fp wz
1d474     E7 02 68 5C |  if_ne	wrlong	#1, fp
1d478     E7 92 02 F6 | 	mov	arg01, fp
1d47c     80 02 BF FD | 	call	#_push
1d480     E7 F0 03 F6 | 	mov	ptra, fp
1d484     F2 00 A0 FD | 	call	#popregs_
1d488                 | _do_gt_ret
1d488     2D 00 64 FD | 	ret
1d48c                 | 
1d48c                 | ' 
1d48c                 | ' '--------------------------------- less or equal (<=)
1d48c                 | ' 
1d48c                 | ' sub do_le
1d48c                 | _do_le
1d48c     07 CA 05 F6 | 	mov	COUNT_, #7
1d490     E8 00 A0 FD | 	call	#pushregs_
1d494     18 F0 07 F1 | 	add	ptra, #24
1d498     D4 01 BF FD | 	call	#_pop
1d49c     3D A7 02 F6 | 	mov	local01, result1
1d4a0     3E AD 02 F6 | 	mov	local04, result2
1d4a4     3F AF 02 F6 | 	mov	local05, result3
1d4a8     56 A9 02 F6 | 	mov	local02, local04
1d4ac     57 AB 02 F6 | 	mov	local03, local05
1d4b0     BC 01 BF FD | 	call	#_pop
1d4b4     3F AF 02 F6 | 	mov	local05, result3
1d4b8     E7 7A 62 FC | 	wrlong	result1, fp
1d4bc     04 CE 05 F1 | 	add	fp, #4
1d4c0     E7 7C 62 FC | 	wrlong	result2, fp
1d4c4     04 CE 05 F1 | 	add	fp, #4
1d4c8     E7 AE 62 FC | 	wrlong	local05, fp
1d4cc                 | ' 
1d4cc                 | ' t2=pop()
1d4cc                 | ' t1=pop()
1d4cc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
1d4cc     08 CE 85 F1 | 	sub	fp, #8
1d4d0     1F AE 0E F2 | 	cmp	local05, #31 wz
1d4d4     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1d4d8     20 00 90 5D |  if_ne	jmp	#LR__2480
1d4dc     00 B0 06 F6 | 	mov	local06, #0
1d4e0     E7 92 02 FB | 	rdlong	arg01, fp
1d4e4     53 95 02 F6 | 	mov	arg02, local01
1d4e8     44 78 B0 FD | 	call	#__system___string_cmp
1d4ec     01 7A 56 F2 | 	cmps	result1, #1 wc
1d4f0     00 B0 26 C6 |  if_b	not	local06, #0
1d4f4     E7 B0 62 FC | 	wrlong	local06, fp
1d4f8     04 03 90 FD | 	jmp	#LR__2493
1d4fc                 | LR__2480
1d4fc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
1d4fc     08 CE 05 F1 | 	add	fp, #8
1d500     E7 B0 02 FB | 	rdlong	local06, fp
1d504     08 CE 85 F1 | 	sub	fp, #8
1d508     1E B0 0E F2 | 	cmp	local06, #30 wz
1d50c     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1d510     24 00 90 5D |  if_ne	jmp	#LR__2481
1d514     00 B0 06 F6 | 	mov	local06, #0
1d518     E7 92 02 FB | 	rdlong	arg01, fp
1d51c     53 95 02 F6 | 	mov	arg02, local01
1d520     01 96 06 F6 | 	mov	arg03, #1
1d524     E4 A2 B0 FD | 	call	#__system___float_cmp
1d528     01 7A 56 F2 | 	cmps	result1, #1 wc
1d52c     00 B0 26 C6 |  if_b	not	local06, #0
1d530     E7 B0 62 FC | 	wrlong	local06, fp
1d534     C8 02 90 FD | 	jmp	#LR__2493
1d538                 | LR__2481
1d538                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
1d538     08 CE 05 F1 | 	add	fp, #8
1d53c     E7 B0 02 FB | 	rdlong	local06, fp
1d540     08 CE 85 F1 | 	sub	fp, #8
1d544     1E B0 0E F2 | 	cmp	local06, #30 wz
1d548     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d54c     3C 00 90 5D |  if_ne	jmp	#LR__2482
1d550     00 B0 06 F6 | 	mov	local06, #0
1d554     E7 AC 02 FB | 	rdlong	local04, fp
1d558     53 93 52 F6 | 	abs	arg01, local01 wc
1d55c     1F B2 C6 C9 |  if_b	decod	local07, #31
1d560     00 B2 06 36 |  if_ae	mov	local07, #0
1d564     6C 9A B0 FD | 	call	#__system___float_fromuns
1d568     59 7B 62 F5 | 	xor	result1, local07
1d56c     3D 95 02 F6 | 	mov	arg02, result1
1d570     56 93 02 F6 | 	mov	arg01, local04
1d574     01 96 06 F6 | 	mov	arg03, #1
1d578     90 A2 B0 FD | 	call	#__system___float_cmp
1d57c     01 7A 56 F2 | 	cmps	result1, #1 wc
1d580     00 B0 26 C6 |  if_b	not	local06, #0
1d584     E7 B0 62 FC | 	wrlong	local06, fp
1d588     74 02 90 FD | 	jmp	#LR__2493
1d58c                 | LR__2482
1d58c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
1d58c     08 CE 05 F1 | 	add	fp, #8
1d590     E7 B0 02 FB | 	rdlong	local06, fp
1d594     08 CE 85 F1 | 	sub	fp, #8
1d598     1E B0 0E F2 | 	cmp	local06, #30 wz
1d59c     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d5a0     30 00 90 5D |  if_ne	jmp	#LR__2483
1d5a4     00 B0 06 F6 | 	mov	local06, #0
1d5a8     E7 AC 02 FB | 	rdlong	local04, fp
1d5ac     53 93 02 F6 | 	mov	arg01, local01
1d5b0     20 9A B0 FD | 	call	#__system___float_fromuns
1d5b4     3D 95 02 F6 | 	mov	arg02, result1
1d5b8     56 93 02 F6 | 	mov	arg01, local04
1d5bc     01 96 06 F6 | 	mov	arg03, #1
1d5c0     48 A2 B0 FD | 	call	#__system___float_cmp
1d5c4     01 7A 56 F2 | 	cmps	result1, #1 wc
1d5c8     00 B0 26 C6 |  if_b	not	local06, #0
1d5cc     E7 B0 62 FC | 	wrlong	local06, fp
1d5d0     2C 02 90 FD | 	jmp	#LR__2493
1d5d4                 | LR__2483
1d5d4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
1d5d4     08 CE 05 F1 | 	add	fp, #8
1d5d8     E7 B0 02 FB | 	rdlong	local06, fp
1d5dc     08 CE 85 F1 | 	sub	fp, #8
1d5e0     1C B0 0E F2 | 	cmp	local06, #28 wz
1d5e4     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1d5e8     3C 00 90 5D |  if_ne	jmp	#LR__2484
1d5ec     00 B0 06 F6 | 	mov	local06, #0
1d5f0     E7 92 02 FB | 	rdlong	arg01, fp
1d5f4     49 93 52 F6 | 	abs	arg01, arg01 wc
1d5f8     1F B2 C6 C9 |  if_b	decod	local07, #31
1d5fc     00 B2 06 36 |  if_ae	mov	local07, #0
1d600     D0 99 B0 FD | 	call	#__system___float_fromuns
1d604     59 7B 62 F5 | 	xor	result1, local07
1d608     3D 93 02 F6 | 	mov	arg01, result1
1d60c     53 95 02 F6 | 	mov	arg02, local01
1d610     01 96 06 F6 | 	mov	arg03, #1
1d614     F4 A1 B0 FD | 	call	#__system___float_cmp
1d618     01 7A 56 F2 | 	cmps	result1, #1 wc
1d61c     00 B0 26 C6 |  if_b	not	local06, #0
1d620     E7 B0 62 FC | 	wrlong	local06, fp
1d624     D8 01 90 FD | 	jmp	#LR__2493
1d628                 | LR__2484
1d628                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
1d628     08 CE 05 F1 | 	add	fp, #8
1d62c     E7 B0 02 FB | 	rdlong	local06, fp
1d630     08 CE 85 F1 | 	sub	fp, #8
1d634     1C B0 0E F2 | 	cmp	local06, #28 wz
1d638     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d63c     18 00 90 5D |  if_ne	jmp	#LR__2485
1d640     00 B0 06 F6 | 	mov	local06, #0
1d644     E7 AC 02 FB | 	rdlong	local04, fp
1d648     53 AD 5A F2 | 	cmps	local04, local01 wcz
1d64c     01 B0 66 E6 |  if_be	neg	local06, #1
1d650     E7 B0 62 FC | 	wrlong	local06, fp
1d654     A8 01 90 FD | 	jmp	#LR__2493
1d658                 | LR__2485
1d658                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
1d658     08 CE 05 F1 | 	add	fp, #8
1d65c     E7 B0 02 FB | 	rdlong	local06, fp
1d660     08 CE 85 F1 | 	sub	fp, #8
1d664     1C B0 0E F2 | 	cmp	local06, #28 wz
1d668     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d66c     18 00 90 5D |  if_ne	jmp	#LR__2486
1d670     00 B0 06 F6 | 	mov	local06, #0
1d674     E7 AC 02 FB | 	rdlong	local04, fp
1d678     53 AD 5A F2 | 	cmps	local04, local01 wcz
1d67c     01 B0 66 E6 |  if_be	neg	local06, #1
1d680     E7 B0 62 FC | 	wrlong	local06, fp
1d684     78 01 90 FD | 	jmp	#LR__2493
1d688                 | LR__2486
1d688                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
1d688     08 CE 05 F1 | 	add	fp, #8
1d68c     E7 B0 02 FB | 	rdlong	local06, fp
1d690     08 CE 85 F1 | 	sub	fp, #8
1d694     1D B0 0E F2 | 	cmp	local06, #29 wz
1d698     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1d69c     2C 00 90 5D |  if_ne	jmp	#LR__2487
1d6a0     00 B0 06 F6 | 	mov	local06, #0
1d6a4     E7 92 02 FB | 	rdlong	arg01, fp
1d6a8     28 99 B0 FD | 	call	#__system___float_fromuns
1d6ac     3D 93 02 F6 | 	mov	arg01, result1
1d6b0     53 95 02 F6 | 	mov	arg02, local01
1d6b4     01 96 06 F6 | 	mov	arg03, #1
1d6b8     50 A1 B0 FD | 	call	#__system___float_cmp
1d6bc     01 7A 56 F2 | 	cmps	result1, #1 wc
1d6c0     00 B0 26 C6 |  if_b	not	local06, #0
1d6c4     E7 B0 62 FC | 	wrlong	local06, fp
1d6c8     34 01 90 FD | 	jmp	#LR__2493
1d6cc                 | LR__2487
1d6cc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
1d6cc     08 CE 05 F1 | 	add	fp, #8
1d6d0     E7 B0 02 FB | 	rdlong	local06, fp
1d6d4     08 CE 85 F1 | 	sub	fp, #8
1d6d8     1D B0 0E F2 | 	cmp	local06, #29 wz
1d6dc     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d6e0     18 00 90 5D |  if_ne	jmp	#LR__2488
1d6e4     00 B0 06 F6 | 	mov	local06, #0
1d6e8     E7 AC 02 FB | 	rdlong	local04, fp
1d6ec     53 AD 5A F2 | 	cmps	local04, local01 wcz
1d6f0     01 B0 66 E6 |  if_be	neg	local06, #1
1d6f4     E7 B0 62 FC | 	wrlong	local06, fp
1d6f8     04 01 90 FD | 	jmp	#LR__2493
1d6fc                 | LR__2488
1d6fc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
1d6fc     08 CE 05 F1 | 	add	fp, #8
1d700     E7 B0 02 FB | 	rdlong	local06, fp
1d704     08 CE 85 F1 | 	sub	fp, #8
1d708     1D B0 0E F2 | 	cmp	local06, #29 wz
1d70c     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d710     18 00 90 5D |  if_ne	jmp	#LR__2489
1d714     00 B0 06 F6 | 	mov	local06, #0
1d718     E7 AC 02 FB | 	rdlong	local04, fp
1d71c     53 AD 1A F2 | 	cmp	local04, local01 wcz
1d720     01 B0 66 E6 |  if_be	neg	local06, #1
1d724     E7 B0 62 FC | 	wrlong	local06, fp
1d728     D4 00 90 FD | 	jmp	#LR__2493
1d72c                 | LR__2489
1d72c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
1d72c     08 CE 05 F1 | 	add	fp, #8
1d730     E7 B0 02 FB | 	rdlong	local06, fp
1d734     08 CE 85 F1 | 	sub	fp, #8
1d738     2B B0 0E F2 | 	cmp	local06, #43 wz
1d73c     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1d740     28 00 90 5D |  if_ne	jmp	#LR__2490
1d744     00 B0 06 F6 | 	mov	local06, #0
1d748     E7 92 02 FB | 	rdlong	arg01, fp
1d74c     90 00 BF FD | 	call	#_convertstring
1d750     3D 93 02 F6 | 	mov	arg01, result1
1d754     53 95 02 F6 | 	mov	arg02, local01
1d758     D4 75 B0 FD | 	call	#__system___string_cmp
1d75c     01 7A 56 F2 | 	cmps	result1, #1 wc
1d760     00 B0 26 C6 |  if_b	not	local06, #0
1d764     E7 B0 62 FC | 	wrlong	local06, fp
1d768     94 00 90 FD | 	jmp	#LR__2493
1d76c                 | LR__2490
1d76c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
1d76c     08 CE 05 F1 | 	add	fp, #8
1d770     E7 B0 02 FB | 	rdlong	local06, fp
1d774     08 CE 85 F1 | 	sub	fp, #8
1d778     1F B0 0E F2 | 	cmp	local06, #31 wz
1d77c     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1d780     2C 00 90 5D |  if_ne	jmp	#LR__2491
1d784     00 B0 06 F6 | 	mov	local06, #0
1d788     E7 AC 02 FB | 	rdlong	local04, fp
1d78c     53 93 02 F6 | 	mov	arg01, local01
1d790     4C 00 BF FD | 	call	#_convertstring
1d794     3D 95 02 F6 | 	mov	arg02, result1
1d798     56 93 02 F6 | 	mov	arg01, local04
1d79c     90 75 B0 FD | 	call	#__system___string_cmp
1d7a0     01 7A 56 F2 | 	cmps	result1, #1 wc
1d7a4     00 B0 26 C6 |  if_b	not	local06, #0
1d7a8     E7 B0 62 FC | 	wrlong	local06, fp
1d7ac     50 00 90 FD | 	jmp	#LR__2493
1d7b0                 | LR__2491
1d7b0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
1d7b0     08 CE 05 F1 | 	add	fp, #8
1d7b4     E7 B0 02 FB | 	rdlong	local06, fp
1d7b8     08 CE 85 F1 | 	sub	fp, #8
1d7bc     2B B0 0E F2 | 	cmp	local06, #43 wz
1d7c0     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1d7c4     34 00 90 5D |  if_ne	jmp	#LR__2492
1d7c8     00 B0 06 F6 | 	mov	local06, #0
1d7cc     E7 92 02 FB | 	rdlong	arg01, fp
1d7d0     0C 00 BF FD | 	call	#_convertstring
1d7d4     3D AD 02 F6 | 	mov	local04, result1
1d7d8     53 93 02 F6 | 	mov	arg01, local01
1d7dc     00 00 BF FD | 	call	#_convertstring
1d7e0     3D 95 02 F6 | 	mov	arg02, result1
1d7e4     56 93 02 F6 | 	mov	arg01, local04
1d7e8     44 75 B0 FD | 	call	#__system___string_cmp
1d7ec     01 7A 56 F2 | 	cmps	result1, #1 wc
1d7f0     00 B0 26 C6 |  if_b	not	local06, #0
1d7f4     E7 B0 62 FC | 	wrlong	local06, fp
1d7f8     04 00 90 FD | 	jmp	#LR__2493
1d7fc                 | LR__2492
1d7fc     E7 00 68 FC | 	wrlong	#0, fp
1d800                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1d800                 | LR__2493
1d800     08 CE 05 F1 | 	add	fp, #8
1d804     E7 38 68 FC | 	wrlong	#28, fp
1d808     08 CE 85 F1 | 	sub	fp, #8
1d80c     E7 92 02 F6 | 	mov	arg01, fp
1d810     EC FE BE FD | 	call	#_push
1d814     E7 F0 03 F6 | 	mov	ptra, fp
1d818     F2 00 A0 FD | 	call	#popregs_
1d81c                 | _do_le_ret
1d81c     2D 00 64 FD | 	ret
1d820                 | 
1d820                 | ' 
1d820                 | ' '--------------------------------- less than (<)
1d820                 | ' 
1d820                 | ' sub do_lt
1d820                 | _do_lt
1d820     07 CA 05 F6 | 	mov	COUNT_, #7
1d824     E8 00 A0 FD | 	call	#pushregs_
1d828     18 F0 07 F1 | 	add	ptra, #24
1d82c     40 FE BE FD | 	call	#_pop
1d830     3D A7 02 F6 | 	mov	local01, result1
1d834     3E AD 02 F6 | 	mov	local04, result2
1d838     3F AF 02 F6 | 	mov	local05, result3
1d83c     56 A9 02 F6 | 	mov	local02, local04
1d840     57 AB 02 F6 | 	mov	local03, local05
1d844     28 FE BE FD | 	call	#_pop
1d848     3F AF 02 F6 | 	mov	local05, result3
1d84c     E7 7A 62 FC | 	wrlong	result1, fp
1d850     04 CE 05 F1 | 	add	fp, #4
1d854     E7 7C 62 FC | 	wrlong	result2, fp
1d858     04 CE 05 F1 | 	add	fp, #4
1d85c     E7 AE 62 FC | 	wrlong	local05, fp
1d860                 | ' 
1d860                 | ' t2=pop()
1d860                 | ' t1=pop()
1d860                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
1d860     08 CE 85 F1 | 	sub	fp, #8
1d864     1F AE 0E F2 | 	cmp	local05, #31 wz
1d868     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1d86c     20 00 90 5D |  if_ne	jmp	#LR__2500
1d870     00 B0 06 F6 | 	mov	local06, #0
1d874     E7 92 02 FB | 	rdlong	arg01, fp
1d878     53 95 02 F6 | 	mov	arg02, local01
1d87c     B0 74 B0 FD | 	call	#__system___string_cmp
1d880     00 7A 56 F2 | 	cmps	result1, #0 wc
1d884     00 B0 26 C6 |  if_b	not	local06, #0
1d888     E7 B0 62 FC | 	wrlong	local06, fp
1d88c     E4 02 90 FD | 	jmp	#LR__2509
1d890                 | LR__2500
1d890                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
1d890     08 CE 05 F1 | 	add	fp, #8
1d894     E7 B0 02 FB | 	rdlong	local06, fp
1d898     08 CE 85 F1 | 	sub	fp, #8
1d89c     1E B0 0E F2 | 	cmp	local06, #30 wz
1d8a0     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1d8a4     24 00 90 5D |  if_ne	jmp	#LR__2501
1d8a8     00 B0 06 F6 | 	mov	local06, #0
1d8ac     E7 92 02 FB | 	rdlong	arg01, fp
1d8b0     53 95 02 F6 | 	mov	arg02, local01
1d8b4     01 96 06 F6 | 	mov	arg03, #1
1d8b8     50 9F B0 FD | 	call	#__system___float_cmp
1d8bc     00 7A 56 F2 | 	cmps	result1, #0 wc
1d8c0     00 B0 26 C6 |  if_b	not	local06, #0
1d8c4     E7 B0 62 FC | 	wrlong	local06, fp
1d8c8     A8 02 90 FD | 	jmp	#LR__2509
1d8cc                 | LR__2501
1d8cc                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
1d8cc     08 CE 05 F1 | 	add	fp, #8
1d8d0     E7 B0 02 FB | 	rdlong	local06, fp
1d8d4     08 CE 85 F1 | 	sub	fp, #8
1d8d8     1E B0 0E F2 | 	cmp	local06, #30 wz
1d8dc     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d8e0     3C 00 90 5D |  if_ne	jmp	#LR__2502
1d8e4     00 B0 06 F6 | 	mov	local06, #0
1d8e8     E7 AC 02 FB | 	rdlong	local04, fp
1d8ec     53 93 52 F6 | 	abs	arg01, local01 wc
1d8f0     1F B2 C6 C9 |  if_b	decod	local07, #31
1d8f4     00 B2 06 36 |  if_ae	mov	local07, #0
1d8f8     D8 96 B0 FD | 	call	#__system___float_fromuns
1d8fc     59 7B 62 F5 | 	xor	result1, local07
1d900     3D 95 02 F6 | 	mov	arg02, result1
1d904     56 93 02 F6 | 	mov	arg01, local04
1d908     01 96 06 F6 | 	mov	arg03, #1
1d90c     FC 9E B0 FD | 	call	#__system___float_cmp
1d910     00 7A 56 F2 | 	cmps	result1, #0 wc
1d914     00 B0 26 C6 |  if_b	not	local06, #0
1d918     E7 B0 62 FC | 	wrlong	local06, fp
1d91c     54 02 90 FD | 	jmp	#LR__2509
1d920                 | LR__2502
1d920                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
1d920     08 CE 05 F1 | 	add	fp, #8
1d924     E7 B0 02 FB | 	rdlong	local06, fp
1d928     08 CE 85 F1 | 	sub	fp, #8
1d92c     1E B0 0E F2 | 	cmp	local06, #30 wz
1d930     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d934     30 00 90 5D |  if_ne	jmp	#LR__2503
1d938     00 B0 06 F6 | 	mov	local06, #0
1d93c     E7 AC 02 FB | 	rdlong	local04, fp
1d940     53 93 02 F6 | 	mov	arg01, local01
1d944     8C 96 B0 FD | 	call	#__system___float_fromuns
1d948     3D 95 02 F6 | 	mov	arg02, result1
1d94c     56 93 02 F6 | 	mov	arg01, local04
1d950     01 96 06 F6 | 	mov	arg03, #1
1d954     B4 9E B0 FD | 	call	#__system___float_cmp
1d958     00 7A 56 F2 | 	cmps	result1, #0 wc
1d95c     00 B0 26 C6 |  if_b	not	local06, #0
1d960     E7 B0 62 FC | 	wrlong	local06, fp
1d964     0C 02 90 FD | 	jmp	#LR__2509
1d968                 | LR__2503
1d968                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
1d968     08 CE 05 F1 | 	add	fp, #8
1d96c     E7 B0 02 FB | 	rdlong	local06, fp
1d970     08 CE 85 F1 | 	sub	fp, #8
1d974     1C B0 0E F2 | 	cmp	local06, #28 wz
1d978     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1d97c     3C 00 90 5D |  if_ne	jmp	#LR__2504
1d980     00 B0 06 F6 | 	mov	local06, #0
1d984     E7 92 02 FB | 	rdlong	arg01, fp
1d988     49 93 52 F6 | 	abs	arg01, arg01 wc
1d98c     1F B2 C6 C9 |  if_b	decod	local07, #31
1d990     00 B2 06 36 |  if_ae	mov	local07, #0
1d994     3C 96 B0 FD | 	call	#__system___float_fromuns
1d998     59 7B 62 F5 | 	xor	result1, local07
1d99c     3D 93 02 F6 | 	mov	arg01, result1
1d9a0     53 95 02 F6 | 	mov	arg02, local01
1d9a4     01 96 06 F6 | 	mov	arg03, #1
1d9a8     60 9E B0 FD | 	call	#__system___float_cmp
1d9ac     00 7A 56 F2 | 	cmps	result1, #0 wc
1d9b0     00 B0 26 C6 |  if_b	not	local06, #0
1d9b4     E7 B0 62 FC | 	wrlong	local06, fp
1d9b8     B8 01 90 FD | 	jmp	#LR__2509
1d9bc                 | LR__2504
1d9bc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
1d9bc     08 CE 05 F1 | 	add	fp, #8
1d9c0     E7 B0 02 FB | 	rdlong	local06, fp
1d9c4     08 CE 85 F1 | 	sub	fp, #8
1d9c8     1C B0 0E F2 | 	cmp	local06, #28 wz
1d9cc     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d9d0     E7 AC 02 AB |  if_e	rdlong	local04, fp
1d9d4     53 AD 52 A2 |  if_e	cmps	local04, local01 wc
1d9d8     58 B1 A2 A1 |  if_e	subx	local06, local06
1d9dc     E7 B0 62 AC |  if_e	wrlong	local06, fp
1d9e0     90 01 90 AD |  if_e	jmp	#LR__2509
1d9e4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
1d9e4     08 CE 05 F1 | 	add	fp, #8
1d9e8     E7 B0 02 FB | 	rdlong	local06, fp
1d9ec     08 CE 85 F1 | 	sub	fp, #8
1d9f0     1C B0 0E F2 | 	cmp	local06, #28 wz
1d9f4     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d9f8     E7 AC 02 AB |  if_e	rdlong	local04, fp
1d9fc     53 AD 52 A2 |  if_e	cmps	local04, local01 wc
1da00     58 B1 A2 A1 |  if_e	subx	local06, local06
1da04     E7 B0 62 AC |  if_e	wrlong	local06, fp
1da08     68 01 90 AD |  if_e	jmp	#LR__2509
1da0c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
1da0c     08 CE 05 F1 | 	add	fp, #8
1da10     E7 B0 02 FB | 	rdlong	local06, fp
1da14     08 CE 85 F1 | 	sub	fp, #8
1da18     1D B0 0E F2 | 	cmp	local06, #29 wz
1da1c     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1da20     2C 00 90 5D |  if_ne	jmp	#LR__2505
1da24     00 B0 06 F6 | 	mov	local06, #0
1da28     E7 92 02 FB | 	rdlong	arg01, fp
1da2c     A4 95 B0 FD | 	call	#__system___float_fromuns
1da30     3D 93 02 F6 | 	mov	arg01, result1
1da34     53 95 02 F6 | 	mov	arg02, local01
1da38     01 96 06 F6 | 	mov	arg03, #1
1da3c     CC 9D B0 FD | 	call	#__system___float_cmp
1da40     00 7A 56 F2 | 	cmps	result1, #0 wc
1da44     00 B0 26 C6 |  if_b	not	local06, #0
1da48     E7 B0 62 FC | 	wrlong	local06, fp
1da4c     24 01 90 FD | 	jmp	#LR__2509
1da50                 | LR__2505
1da50                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
1da50     08 CE 05 F1 | 	add	fp, #8
1da54     E7 B0 02 FB | 	rdlong	local06, fp
1da58     08 CE 85 F1 | 	sub	fp, #8
1da5c     1D B0 0E F2 | 	cmp	local06, #29 wz
1da60     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1da64     E7 AC 02 AB |  if_e	rdlong	local04, fp
1da68     53 AD 52 A2 |  if_e	cmps	local04, local01 wc
1da6c     58 B1 A2 A1 |  if_e	subx	local06, local06
1da70     E7 B0 62 AC |  if_e	wrlong	local06, fp
1da74     FC 00 90 AD |  if_e	jmp	#LR__2509
1da78                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
1da78     08 CE 05 F1 | 	add	fp, #8
1da7c     E7 B0 02 FB | 	rdlong	local06, fp
1da80     08 CE 85 F1 | 	sub	fp, #8
1da84     1D B0 0E F2 | 	cmp	local06, #29 wz
1da88     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1da8c     E7 AC 02 AB |  if_e	rdlong	local04, fp
1da90     53 AD 12 A2 |  if_e	cmp	local04, local01 wc
1da94     58 B1 A2 A1 |  if_e	subx	local06, local06
1da98     E7 B0 62 AC |  if_e	wrlong	local06, fp
1da9c     D4 00 90 AD |  if_e	jmp	#LR__2509
1daa0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
1daa0     08 CE 05 F1 | 	add	fp, #8
1daa4     E7 B0 02 FB | 	rdlong	local06, fp
1daa8     08 CE 85 F1 | 	sub	fp, #8
1daac     2B B0 0E F2 | 	cmp	local06, #43 wz
1dab0     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1dab4     28 00 90 5D |  if_ne	jmp	#LR__2506
1dab8     00 B0 06 F6 | 	mov	local06, #0
1dabc     E7 92 02 FB | 	rdlong	arg01, fp
1dac0     1C FD BE FD | 	call	#_convertstring
1dac4     3D 93 02 F6 | 	mov	arg01, result1
1dac8     53 95 02 F6 | 	mov	arg02, local01
1dacc     60 72 B0 FD | 	call	#__system___string_cmp
1dad0     00 7A 56 F2 | 	cmps	result1, #0 wc
1dad4     00 B0 26 C6 |  if_b	not	local06, #0
1dad8     E7 B0 62 FC | 	wrlong	local06, fp
1dadc     94 00 90 FD | 	jmp	#LR__2509
1dae0                 | LR__2506
1dae0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
1dae0     08 CE 05 F1 | 	add	fp, #8
1dae4     E7 B0 02 FB | 	rdlong	local06, fp
1dae8     08 CE 85 F1 | 	sub	fp, #8
1daec     1F B0 0E F2 | 	cmp	local06, #31 wz
1daf0     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1daf4     2C 00 90 5D |  if_ne	jmp	#LR__2507
1daf8     00 B0 06 F6 | 	mov	local06, #0
1dafc     E7 AC 02 FB | 	rdlong	local04, fp
1db00     53 93 02 F6 | 	mov	arg01, local01
1db04     D8 FC BE FD | 	call	#_convertstring
1db08     3D 95 02 F6 | 	mov	arg02, result1
1db0c     56 93 02 F6 | 	mov	arg01, local04
1db10     1C 72 B0 FD | 	call	#__system___string_cmp
1db14     00 7A 56 F2 | 	cmps	result1, #0 wc
1db18     00 B0 26 C6 |  if_b	not	local06, #0
1db1c     E7 B0 62 FC | 	wrlong	local06, fp
1db20     50 00 90 FD | 	jmp	#LR__2509
1db24                 | LR__2507
1db24                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
1db24     08 CE 05 F1 | 	add	fp, #8
1db28     E7 B0 02 FB | 	rdlong	local06, fp
1db2c     08 CE 85 F1 | 	sub	fp, #8
1db30     2B B0 0E F2 | 	cmp	local06, #43 wz
1db34     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1db38     34 00 90 5D |  if_ne	jmp	#LR__2508
1db3c     00 B0 06 F6 | 	mov	local06, #0
1db40     E7 92 02 FB | 	rdlong	arg01, fp
1db44     98 FC BE FD | 	call	#_convertstring
1db48     3D AD 02 F6 | 	mov	local04, result1
1db4c     53 93 02 F6 | 	mov	arg01, local01
1db50     8C FC BE FD | 	call	#_convertstring
1db54     3D 95 02 F6 | 	mov	arg02, result1
1db58     56 93 02 F6 | 	mov	arg01, local04
1db5c     D0 71 B0 FD | 	call	#__system___string_cmp
1db60     00 7A 56 F2 | 	cmps	result1, #0 wc
1db64     00 B0 26 C6 |  if_b	not	local06, #0
1db68     E7 B0 62 FC | 	wrlong	local06, fp
1db6c     04 00 90 FD | 	jmp	#LR__2509
1db70                 | LR__2508
1db70     E7 00 68 FC | 	wrlong	#0, fp
1db74                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1db74                 | LR__2509
1db74     08 CE 05 F1 | 	add	fp, #8
1db78     E7 38 68 FC | 	wrlong	#28, fp
1db7c     08 CE 85 F1 | 	sub	fp, #8
1db80     E7 92 02 F6 | 	mov	arg01, fp
1db84     78 FB BE FD | 	call	#_push
1db88     E7 F0 03 F6 | 	mov	ptra, fp
1db8c     F2 00 A0 FD | 	call	#popregs_
1db90                 | _do_lt_ret
1db90     2D 00 64 FD | 	ret
1db94                 | 
1db94                 | ' 
1db94                 | ' '--------------------------------- minus (-)
1db94                 | ' 
1db94                 | ' sub do_minus
1db94                 | _do_minus
1db94     07 CA 05 F6 | 	mov	COUNT_, #7
1db98     E8 00 A0 FD | 	call	#pushregs_
1db9c     18 F0 07 F1 | 	add	ptra, #24
1dba0     CC FA BE FD | 	call	#_pop
1dba4     3D A7 02 F6 | 	mov	local01, result1
1dba8     3E AD 02 F6 | 	mov	local04, result2
1dbac     3F AF 02 F6 | 	mov	local05, result3
1dbb0     56 A9 02 F6 | 	mov	local02, local04
1dbb4     57 AB 02 F6 | 	mov	local03, local05
1dbb8     B4 FA BE FD | 	call	#_pop
1dbbc     3F AF 02 F6 | 	mov	local05, result3
1dbc0     E7 7A 62 FC | 	wrlong	result1, fp
1dbc4     04 CE 05 F1 | 	add	fp, #4
1dbc8     E7 7C 62 FC | 	wrlong	result2, fp
1dbcc     04 CE 05 F1 | 	add	fp, #4
1dbd0     E7 AE 62 FC | 	wrlong	local05, fp
1dbd4                 | ' 
1dbd4                 | ' t2=pop()
1dbd4                 | ' t1=pop()
1dbd4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
1dbd4     08 CE 85 F1 | 	sub	fp, #8
1dbd8     1D AE 0E F2 | 	cmp	local05, #29 wz
1dbdc     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1dbe0     30 00 90 5D |  if_ne	jmp	#LR__2510
1dbe4                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
1dbe4     E7 B0 02 FB | 	rdlong	local06, fp
1dbe8     58 A7 12 F2 | 	cmp	local01, local06 wc
1dbec     53 B1 82 C1 |  if_b	sub	local06, local01
1dbf0     E7 B0 62 CC |  if_b	wrlong	local06, fp
1dbf4     18 02 90 CD |  if_b	jmp	#LR__2517
1dbf8     E7 B0 02 FB | 	rdlong	local06, fp
1dbfc     53 B1 82 F1 | 	sub	local06, local01
1dc00     E7 B0 62 FC | 	wrlong	local06, fp
1dc04     08 CE 05 F1 | 	add	fp, #8
1dc08     E7 38 68 FC | 	wrlong	#28, fp
1dc0c     08 CE 85 F1 | 	sub	fp, #8
1dc10     FC 01 90 FD | 	jmp	#LR__2517
1dc14                 | LR__2510
1dc14                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
1dc14     08 CE 05 F1 | 	add	fp, #8
1dc18     E7 B0 02 FB | 	rdlong	local06, fp
1dc1c     08 CE 85 F1 | 	sub	fp, #8
1dc20     1D B0 0E F2 | 	cmp	local06, #29 wz
1dc24     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1dc28     1C 00 90 5D |  if_ne	jmp	#LR__2511
1dc2c     E7 B0 02 FB | 	rdlong	local06, fp
1dc30     53 B1 82 F1 | 	sub	local06, local01
1dc34     E7 B0 62 FC | 	wrlong	local06, fp
1dc38     08 CE 05 F1 | 	add	fp, #8
1dc3c     E7 38 68 FC | 	wrlong	#28, fp
1dc40     08 CE 85 F1 | 	sub	fp, #8
1dc44     C8 01 90 FD | 	jmp	#LR__2517
1dc48                 | LR__2511
1dc48                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1dc48     08 CE 05 F1 | 	add	fp, #8
1dc4c     E7 B0 02 FB | 	rdlong	local06, fp
1dc50     08 CE 85 F1 | 	sub	fp, #8
1dc54     1D B0 0E F2 | 	cmp	local06, #29 wz
1dc58     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1dc5c     2C 00 90 5D |  if_ne	jmp	#LR__2512
1dc60     E7 92 02 FB | 	rdlong	arg01, fp
1dc64     6C 93 B0 FD | 	call	#__system___float_fromuns
1dc68     3D 93 02 F6 | 	mov	arg01, result1
1dc6c     53 95 02 F6 | 	mov	arg02, local01
1dc70     1F 94 E6 F4 | 	bitnot	arg02, #31
1dc74     90 93 B0 FD | 	call	#__system___float_add
1dc78     E7 7A 62 FC | 	wrlong	result1, fp
1dc7c     08 CE 05 F1 | 	add	fp, #8
1dc80     E7 3C 68 FC | 	wrlong	#30, fp
1dc84     08 CE 85 F1 | 	sub	fp, #8
1dc88     84 01 90 FD | 	jmp	#LR__2517
1dc8c                 | LR__2512
1dc8c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
1dc8c     08 CE 05 F1 | 	add	fp, #8
1dc90     E7 B0 02 FB | 	rdlong	local06, fp
1dc94     08 CE 85 F1 | 	sub	fp, #8
1dc98     1C B0 0E F2 | 	cmp	local06, #28 wz
1dc9c     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1dca0     E7 B0 02 AB |  if_e	rdlong	local06, fp
1dca4     53 B1 82 A1 |  if_e	sub	local06, local01
1dca8     E7 B0 62 AC |  if_e	wrlong	local06, fp
1dcac     60 01 90 AD |  if_e	jmp	#LR__2517
1dcb0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
1dcb0     08 CE 05 F1 | 	add	fp, #8
1dcb4     E7 B0 02 FB | 	rdlong	local06, fp
1dcb8     08 CE 85 F1 | 	sub	fp, #8
1dcbc     1C B0 0E F2 | 	cmp	local06, #28 wz
1dcc0     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1dcc4     E7 B0 02 AB |  if_e	rdlong	local06, fp
1dcc8     53 B1 82 A1 |  if_e	sub	local06, local01
1dccc     E7 B0 62 AC |  if_e	wrlong	local06, fp
1dcd0     3C 01 90 AD |  if_e	jmp	#LR__2517
1dcd4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1dcd4     08 CE 05 F1 | 	add	fp, #8
1dcd8     E7 B0 02 FB | 	rdlong	local06, fp
1dcdc     08 CE 85 F1 | 	sub	fp, #8
1dce0     1C B0 0E F2 | 	cmp	local06, #28 wz
1dce4     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1dce8     3C 00 90 5D |  if_ne	jmp	#LR__2513
1dcec     E7 92 02 FB | 	rdlong	arg01, fp
1dcf0     49 93 52 F6 | 	abs	arg01, arg01 wc
1dcf4     1F B2 C6 C9 |  if_b	decod	local07, #31
1dcf8     00 B2 06 36 |  if_ae	mov	local07, #0
1dcfc     D4 92 B0 FD | 	call	#__system___float_fromuns
1dd00     59 7B 62 F5 | 	xor	result1, local07
1dd04     3D 93 02 F6 | 	mov	arg01, result1
1dd08     53 95 02 F6 | 	mov	arg02, local01
1dd0c     1F 94 E6 F4 | 	bitnot	arg02, #31
1dd10     F4 92 B0 FD | 	call	#__system___float_add
1dd14     E7 7A 62 FC | 	wrlong	result1, fp
1dd18     08 CE 05 F1 | 	add	fp, #8
1dd1c     E7 3C 68 FC | 	wrlong	#30, fp
1dd20     08 CE 85 F1 | 	sub	fp, #8
1dd24     E8 00 90 FD | 	jmp	#LR__2517
1dd28                 | LR__2513
1dd28                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
1dd28     08 CE 05 F1 | 	add	fp, #8
1dd2c     E7 B0 02 FB | 	rdlong	local06, fp
1dd30     08 CE 85 F1 | 	sub	fp, #8
1dd34     1E B0 0E F2 | 	cmp	local06, #30 wz
1dd38     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1dd3c     24 00 90 5D |  if_ne	jmp	#LR__2514
1dd40     E7 B0 02 FB | 	rdlong	local06, fp
1dd44     53 93 02 F6 | 	mov	arg01, local01
1dd48     88 92 B0 FD | 	call	#__system___float_fromuns
1dd4c     3D 95 02 F6 | 	mov	arg02, result1
1dd50     58 93 02 F6 | 	mov	arg01, local06
1dd54     1F 94 E6 F4 | 	bitnot	arg02, #31
1dd58     AC 92 B0 FD | 	call	#__system___float_add
1dd5c     E7 7A 62 FC | 	wrlong	result1, fp
1dd60     AC 00 90 FD | 	jmp	#LR__2517
1dd64                 | LR__2514
1dd64                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
1dd64     08 CE 05 F1 | 	add	fp, #8
1dd68     E7 B0 02 FB | 	rdlong	local06, fp
1dd6c     08 CE 85 F1 | 	sub	fp, #8
1dd70     1E B0 0E F2 | 	cmp	local06, #30 wz
1dd74     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1dd78     30 00 90 5D |  if_ne	jmp	#LR__2515
1dd7c     E7 B0 02 FB | 	rdlong	local06, fp
1dd80     53 93 52 F6 | 	abs	arg01, local01 wc
1dd84     1F B2 C6 C9 |  if_b	decod	local07, #31
1dd88     00 B2 06 36 |  if_ae	mov	local07, #0
1dd8c     44 92 B0 FD | 	call	#__system___float_fromuns
1dd90     59 7B 62 F5 | 	xor	result1, local07
1dd94     3D 95 02 F6 | 	mov	arg02, result1
1dd98     58 93 02 F6 | 	mov	arg01, local06
1dd9c     1F 94 E6 F4 | 	bitnot	arg02, #31
1dda0     64 92 B0 FD | 	call	#__system___float_add
1dda4     E7 7A 62 FC | 	wrlong	result1, fp
1dda8     64 00 90 FD | 	jmp	#LR__2517
1ddac                 | LR__2515
1ddac                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
1ddac     08 CE 05 F1 | 	add	fp, #8
1ddb0     E7 B0 02 FB | 	rdlong	local06, fp
1ddb4     08 CE 85 F1 | 	sub	fp, #8
1ddb8     1E B0 0E F2 | 	cmp	local06, #30 wz
1ddbc     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1ddc0     18 00 90 5D |  if_ne	jmp	#LR__2516
1ddc4     E7 92 02 FB | 	rdlong	arg01, fp
1ddc8     53 95 02 F6 | 	mov	arg02, local01
1ddcc     1F 94 E6 F4 | 	bitnot	arg02, #31
1ddd0     34 92 B0 FD | 	call	#__system___float_add
1ddd4     E7 7A 62 FC | 	wrlong	result1, fp
1ddd8     34 00 90 FD | 	jmp	#LR__2517
1dddc                 | LR__2516
1dddc                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
1dddc     08 CE 05 F1 | 	add	fp, #8
1dde0     E7 B0 02 FB | 	rdlong	local06, fp
1dde4     08 CE 85 F1 | 	sub	fp, #8
1dde8     1F B0 0E F2 | 	cmp	local06, #31 wz
1ddec     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1ddf0     E7 06 68 AC |  if_e	wrlong	#3, fp
1ddf4     08 CE 05 A1 |  if_e	add	fp, #8
1ddf8     E7 FE 69 AC |  if_e	wrlong	#255, fp
1ddfc     08 CE 85 A1 |  if_e	sub	fp, #8
1de00     E7 0A 68 5C |  if_ne	wrlong	#5, fp
1de04     08 CE 05 51 |  if_ne	add	fp, #8
1de08     E7 FE 69 5C |  if_ne	wrlong	#255, fp
1de0c     08 CE 85 51 |  if_ne	sub	fp, #8
1de10                 | LR__2517
1de10     E7 92 02 F6 | 	mov	arg01, fp
1de14     E8 F8 BE FD | 	call	#_push
1de18     E7 F0 03 F6 | 	mov	ptra, fp
1de1c     F2 00 A0 FD | 	call	#popregs_
1de20                 | _do_minus_ret
1de20     2D 00 64 FD | 	ret
1de24                 | 
1de24                 | ' 
1de24                 | ' '--------------------------------- negative (-), one argument negative
1de24                 | ' 
1de24                 | ' sub do_negative
1de24                 | _do_negative
1de24     02 CA 05 F6 | 	mov	COUNT_, #2
1de28     E8 00 A0 FD | 	call	#pushregs_
1de2c     0C F0 07 F1 | 	add	ptra, #12
1de30     3C F8 BE FD | 	call	#_pop
1de34     3F A7 02 F6 | 	mov	local01, result3
1de38     E7 7A 62 FC | 	wrlong	result1, fp
1de3c     04 CE 05 F1 | 	add	fp, #4
1de40     E7 7C 62 FC | 	wrlong	result2, fp
1de44     04 CE 05 F1 | 	add	fp, #4
1de48     E7 A6 62 FC | 	wrlong	local01, fp
1de4c                 | ' 
1de4c                 | ' t1=pop()
1de4c                 | ' if t1.result_type=result_int then 
1de4c     08 CE 85 F1 | 	sub	fp, #8
1de50     1C A6 0E F2 | 	cmp	local01, #28 wz
1de54     E7 A8 02 AB |  if_e	rdlong	local02, fp
1de58     54 A7 62 A6 |  if_e	neg	local01, local02
1de5c     E7 A6 62 AC |  if_e	wrlong	local01, fp
1de60     5C 00 90 AD |  if_e	jmp	#LR__2522
1de64     08 CE 05 F1 | 	add	fp, #8
1de68     E7 A6 02 FB | 	rdlong	local01, fp
1de6c     08 CE 85 F1 | 	sub	fp, #8
1de70     1D A6 0E F2 | 	cmp	local01, #29 wz
1de74     1C 00 90 5D |  if_ne	jmp	#LR__2520
1de78     E7 A8 02 FB | 	rdlong	local02, fp
1de7c     54 A7 62 F6 | 	neg	local01, local02
1de80     E7 A6 62 FC | 	wrlong	local01, fp
1de84     08 CE 05 F1 | 	add	fp, #8
1de88     E7 38 68 FC | 	wrlong	#28, fp
1de8c     08 CE 85 F1 | 	sub	fp, #8
1de90     2C 00 90 FD | 	jmp	#LR__2521
1de94                 | LR__2520
1de94     08 CE 05 F1 | 	add	fp, #8
1de98     E7 A6 02 FB | 	rdlong	local01, fp
1de9c     08 CE 85 F1 | 	sub	fp, #8
1dea0     1E A6 0E F2 | 	cmp	local01, #30 wz
1dea4     E7 7A 02 AB |  if_e	rdlong	result1, fp
1dea8     1F 7A E6 A4 |  if_e	bitnot	result1, #31
1deac     E7 7A 62 AC |  if_e	wrlong	result1, fp
1deb0     08 CE 05 51 |  if_ne	add	fp, #8
1deb4     E7 FE 69 5C |  if_ne	wrlong	#255, fp
1deb8     08 CE 85 51 |  if_ne	sub	fp, #8
1debc     E7 50 68 5C |  if_ne	wrlong	#40, fp
1dec0                 | LR__2521
1dec0                 | LR__2522
1dec0     E7 92 02 F6 | 	mov	arg01, fp
1dec4     38 F8 BE FD | 	call	#_push
1dec8     E7 F0 03 F6 | 	mov	ptra, fp
1decc     F2 00 A0 FD | 	call	#popregs_
1ded0                 | _do_negative_ret
1ded0     2D 00 64 FD | 	ret
1ded4                 | 
1ded4                 | ' 
1ded4                 | ' '--------------------------------- MOD (modulo)
1ded4                 | ' 
1ded4                 | ' sub do_mod 
1ded4                 | _do_mod
1ded4     04 CA 05 F6 | 	mov	COUNT_, #4
1ded8     E8 00 A0 FD | 	call	#pushregs_
1dedc     18 F0 07 F1 | 	add	ptra, #24
1dee0     8C F7 BE FD | 	call	#_pop
1dee4     3D A7 02 F6 | 	mov	local01, result1
1dee8     3E 11 03 F6 | 	mov	muldivb_, result2
1deec     3F 0F 03 F6 | 	mov	muldiva_, result3
1def0     88 A9 02 F6 | 	mov	local02, muldivb_
1def4     87 AB 02 F6 | 	mov	local03, muldiva_
1def8     74 F7 BE FD | 	call	#_pop
1defc     E7 7A 62 FC | 	wrlong	result1, fp
1df00     04 CE 05 F1 | 	add	fp, #4
1df04     E7 7C 62 FC | 	wrlong	result2, fp
1df08     04 CE 05 F1 | 	add	fp, #4
1df0c     E7 7E 62 FC | 	wrlong	result3, fp
1df10                 | ' 
1df10                 | ' t2=pop()
1df10                 | ' t1=pop()
1df10                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
1df10     08 CE 85 F1 | 	sub	fp, #8
1df14     1F 7E 0E F2 | 	cmp	result3, #31 wz
1df18     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1df1c     E7 14 68 AC |  if_e	wrlong	#10, fp
1df20     08 CE 05 A1 |  if_e	add	fp, #8
1df24     E7 FE 69 AC |  if_e	wrlong	#255, fp
1df28     08 CE 85 A1 |  if_e	sub	fp, #8
1df2c     14 01 90 AD |  if_e	jmp	#LR__2535
1df30                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1df30     08 CE 05 F1 | 	add	fp, #8
1df34     E7 10 03 FB | 	rdlong	muldivb_, fp
1df38     08 CE 85 F1 | 	sub	fp, #8
1df3c     1E 10 0F F2 | 	cmp	muldivb_, #30 wz
1df40     1C 00 90 5D |  if_ne	jmp	#LR__2530
1df44     08 CE 05 F1 | 	add	fp, #8
1df48     E7 38 68 FC | 	wrlong	#28, fp
1df4c     08 CE 85 F1 | 	sub	fp, #8
1df50     E7 92 02 FB | 	rdlong	arg01, fp
1df54     00 94 06 F6 | 	mov	arg02, #0
1df58     44 99 B0 FD | 	call	#__system___float_tointeger
1df5c     E7 7A 62 FC | 	wrlong	result1, fp
1df60                 | LR__2530
1df60                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1df60     1E AA 0E F2 | 	cmp	local03, #30 wz
1df64     14 00 90 5D |  if_ne	jmp	#LR__2531
1df68     1C AA 06 F6 | 	mov	local03, #28
1df6c     53 93 02 F6 | 	mov	arg01, local01
1df70     00 94 06 F6 | 	mov	arg02, #0
1df74     28 99 B0 FD | 	call	#__system___float_tointeger
1df78     3D A7 02 F6 | 	mov	local01, result1
1df7c                 | LR__2531
1df7c     08 CE 05 F1 | 	add	fp, #8
1df80     E7 AC 02 FB | 	rdlong	local04, fp
1df84     08 CE 85 F1 | 	sub	fp, #8
1df88     1D AC 0E F2 | 	cmp	local04, #29 wz
1df8c     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1df90     E7 AC 02 AB |  if_e	rdlong	local04, fp
1df94     53 AD 12 AD |  if_e	qdiv	local04, local01
1df98                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
1df98     19 AC 62 AD |  if_e	getqy	local04
1df9c     E7 AC 62 AC |  if_e	wrlong	local04, fp
1dfa0     A0 00 90 AD |  if_e	jmp	#LR__2535
1dfa4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
1dfa4     08 CE 05 F1 | 	add	fp, #8
1dfa8     E7 AC 02 FB | 	rdlong	local04, fp
1dfac     08 CE 85 F1 | 	sub	fp, #8
1dfb0     1D AC 0E F2 | 	cmp	local04, #29 wz
1dfb4     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1dfb8     20 00 90 5D |  if_ne	jmp	#LR__2532
1dfbc     E7 AC 02 FB | 	rdlong	local04, fp
1dfc0     53 AD 12 FD | 	qdiv	local04, local01
1dfc4     19 AC 62 FD | 	getqy	local04
1dfc8     E7 AC 62 FC | 	wrlong	local04, fp
1dfcc     08 CE 05 F1 | 	add	fp, #8
1dfd0     E7 38 68 FC | 	wrlong	#28, fp
1dfd4     08 CE 85 F1 | 	sub	fp, #8
1dfd8     68 00 90 FD | 	jmp	#LR__2535
1dfdc                 | LR__2532
1dfdc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
1dfdc     08 CE 05 F1 | 	add	fp, #8
1dfe0     E7 AC 02 FB | 	rdlong	local04, fp
1dfe4     08 CE 85 F1 | 	sub	fp, #8
1dfe8     1C AC 0E F2 | 	cmp	local04, #28 wz
1dfec     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1dff0     14 00 90 5D |  if_ne	jmp	#LR__2533
1dff4     E7 0E 03 FB | 	rdlong	muldiva_, fp
1dff8     53 11 03 F6 | 	mov	muldivb_, local01
1dffc     FA 00 A0 FD | 	call	#divide_
1e000     E7 0E 63 FC | 	wrlong	muldiva_, fp
1e004     3C 00 90 FD | 	jmp	#LR__2535
1e008                 | LR__2533
1e008                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
1e008     08 CE 05 F1 | 	add	fp, #8
1e00c     E7 AC 02 FB | 	rdlong	local04, fp
1e010     08 CE 85 F1 | 	sub	fp, #8
1e014     1C AC 0E F2 | 	cmp	local04, #28 wz
1e018     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1e01c     14 00 90 5D |  if_ne	jmp	#LR__2534
1e020     E7 0E 03 FB | 	rdlong	muldiva_, fp
1e024     53 11 03 F6 | 	mov	muldivb_, local01
1e028     FA 00 A0 FD | 	call	#divide_
1e02c     E7 0E 63 FC | 	wrlong	muldiva_, fp
1e030     10 00 90 FD | 	jmp	#LR__2535
1e034                 | LR__2534
1e034     E7 16 68 FC | 	wrlong	#11, fp
1e038     08 CE 05 F1 | 	add	fp, #8
1e03c     E7 FE 69 FC | 	wrlong	#255, fp
1e040     08 CE 85 F1 | 	sub	fp, #8
1e044                 | LR__2535
1e044     E7 92 02 F6 | 	mov	arg01, fp
1e048     B4 F6 BE FD | 	call	#_push
1e04c     E7 F0 03 F6 | 	mov	ptra, fp
1e050     F2 00 A0 FD | 	call	#popregs_
1e054                 | _do_mod_ret
1e054     2D 00 64 FD | 	ret
1e058                 | 
1e058                 | ' 
1e058                 | ' '--------------------------------- mul (*)
1e058                 | ' 
1e058                 | ' sub do_mul
1e058                 | _do_mul
1e058     07 CA 05 F6 | 	mov	COUNT_, #7
1e05c     E8 00 A0 FD | 	call	#pushregs_
1e060     18 F0 07 F1 | 	add	ptra, #24
1e064     08 F6 BE FD | 	call	#_pop
1e068     3D A7 02 F6 | 	mov	local01, result1
1e06c     3E AD 02 F6 | 	mov	local04, result2
1e070     3F 95 02 F6 | 	mov	arg02, result3
1e074     56 A9 02 F6 | 	mov	local02, local04
1e078     4A AB 02 F6 | 	mov	local03, arg02
1e07c     F0 F5 BE FD | 	call	#_pop
1e080     3F AF 02 F6 | 	mov	local05, result3
1e084     E7 7A 62 FC | 	wrlong	result1, fp
1e088     04 CE 05 F1 | 	add	fp, #4
1e08c     E7 7C 62 FC | 	wrlong	result2, fp
1e090     04 CE 05 F1 | 	add	fp, #4
1e094     E7 AE 62 FC | 	wrlong	local05, fp
1e098     08 CE 85 F1 | 	sub	fp, #8
1e09c     1D AE 0E F2 | 	cmp	local05, #29 wz
1e0a0     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1e0a4     E7 AC 02 AB |  if_e	rdlong	local04, fp
1e0a8     53 AD 02 AD |  if_e	qmul	local04, local01
1e0ac                 | ' 
1e0ac                 | ' t2=pop()
1e0ac                 | ' t1=pop()
1e0ac                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
1e0ac     18 B0 62 AD |  if_e	getqx	local06
1e0b0     E7 B0 62 AC |  if_e	wrlong	local06, fp
1e0b4     F4 01 90 AD |  if_e	jmp	#LR__2546
1e0b8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
1e0b8     08 CE 05 F1 | 	add	fp, #8
1e0bc     E7 B0 02 FB | 	rdlong	local06, fp
1e0c0     08 CE 85 F1 | 	sub	fp, #8
1e0c4     1D B0 0E F2 | 	cmp	local06, #29 wz
1e0c8     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1e0cc     20 00 90 5D |  if_ne	jmp	#LR__2540
1e0d0     E7 AC 02 FB | 	rdlong	local04, fp
1e0d4     53 AD 02 FD | 	qmul	local04, local01
1e0d8     18 B0 62 FD | 	getqx	local06
1e0dc     E7 B0 62 FC | 	wrlong	local06, fp
1e0e0     08 CE 05 F1 | 	add	fp, #8
1e0e4     E7 38 68 FC | 	wrlong	#28, fp
1e0e8     08 CE 85 F1 | 	sub	fp, #8
1e0ec     BC 01 90 FD | 	jmp	#LR__2546
1e0f0                 | LR__2540
1e0f0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1e0f0     08 CE 05 F1 | 	add	fp, #8
1e0f4     E7 B0 02 FB | 	rdlong	local06, fp
1e0f8     08 CE 85 F1 | 	sub	fp, #8
1e0fc     1D B0 0E F2 | 	cmp	local06, #29 wz
1e100     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1e104     28 00 90 5D |  if_ne	jmp	#LR__2541
1e108     E7 92 02 FB | 	rdlong	arg01, fp
1e10c     C4 8E B0 FD | 	call	#__system___float_fromuns
1e110     3D 93 02 F6 | 	mov	arg01, result1
1e114     53 95 02 F6 | 	mov	arg02, local01
1e118     BC 92 B0 FD | 	call	#__system___float_mul
1e11c     E7 7A 62 FC | 	wrlong	result1, fp
1e120     08 CE 05 F1 | 	add	fp, #8
1e124     E7 3C 68 FC | 	wrlong	#30, fp
1e128     08 CE 85 F1 | 	sub	fp, #8
1e12c     7C 01 90 FD | 	jmp	#LR__2546
1e130                 | LR__2541
1e130     08 CE 05 F1 | 	add	fp, #8
1e134     E7 B0 02 FB | 	rdlong	local06, fp
1e138     08 CE 85 F1 | 	sub	fp, #8
1e13c     1C B0 0E F2 | 	cmp	local06, #28 wz
1e140     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1e144     E7 AC 02 AB |  if_e	rdlong	local04, fp
1e148     53 AD 02 AD |  if_e	qmul	local04, local01
1e14c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
1e14c     18 B0 62 AD |  if_e	getqx	local06
1e150     E7 B0 62 AC |  if_e	wrlong	local06, fp
1e154     54 01 90 AD |  if_e	jmp	#LR__2546
1e158     08 CE 05 F1 | 	add	fp, #8
1e15c     E7 B0 02 FB | 	rdlong	local06, fp
1e160     08 CE 85 F1 | 	sub	fp, #8
1e164     1C B0 0E F2 | 	cmp	local06, #28 wz
1e168     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1e16c     E7 AC 02 AB |  if_e	rdlong	local04, fp
1e170     53 AD 02 AD |  if_e	qmul	local04, local01
1e174                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
1e174     18 B0 62 AD |  if_e	getqx	local06
1e178     E7 B0 62 AC |  if_e	wrlong	local06, fp
1e17c     2C 01 90 AD |  if_e	jmp	#LR__2546
1e180                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1e180     08 CE 05 F1 | 	add	fp, #8
1e184     E7 B0 02 FB | 	rdlong	local06, fp
1e188     08 CE 85 F1 | 	sub	fp, #8
1e18c     1C B0 0E F2 | 	cmp	local06, #28 wz
1e190     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1e194     38 00 90 5D |  if_ne	jmp	#LR__2542
1e198     E7 92 02 FB | 	rdlong	arg01, fp
1e19c     49 93 52 F6 | 	abs	arg01, arg01 wc
1e1a0     1F B2 C6 C9 |  if_b	decod	local07, #31
1e1a4     00 B2 06 36 |  if_ae	mov	local07, #0
1e1a8     28 8E B0 FD | 	call	#__system___float_fromuns
1e1ac     59 7B 62 F5 | 	xor	result1, local07
1e1b0     3D 93 02 F6 | 	mov	arg01, result1
1e1b4     53 95 02 F6 | 	mov	arg02, local01
1e1b8     1C 92 B0 FD | 	call	#__system___float_mul
1e1bc     E7 7A 62 FC | 	wrlong	result1, fp
1e1c0     08 CE 05 F1 | 	add	fp, #8
1e1c4     E7 3C 68 FC | 	wrlong	#30, fp
1e1c8     08 CE 85 F1 | 	sub	fp, #8
1e1cc     DC 00 90 FD | 	jmp	#LR__2546
1e1d0                 | LR__2542
1e1d0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
1e1d0     08 CE 05 F1 | 	add	fp, #8
1e1d4     E7 B0 02 FB | 	rdlong	local06, fp
1e1d8     08 CE 85 F1 | 	sub	fp, #8
1e1dc     1E B0 0E F2 | 	cmp	local06, #30 wz
1e1e0     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1e1e4     20 00 90 5D |  if_ne	jmp	#LR__2543
1e1e8     E7 B0 02 FB | 	rdlong	local06, fp
1e1ec     53 93 02 F6 | 	mov	arg01, local01
1e1f0     E0 8D B0 FD | 	call	#__system___float_fromuns
1e1f4     3D 95 02 F6 | 	mov	arg02, result1
1e1f8     58 93 02 F6 | 	mov	arg01, local06
1e1fc     D8 91 B0 FD | 	call	#__system___float_mul
1e200     E7 7A 62 FC | 	wrlong	result1, fp
1e204     A4 00 90 FD | 	jmp	#LR__2546
1e208                 | LR__2543
1e208                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
1e208     08 CE 05 F1 | 	add	fp, #8
1e20c     E7 B0 02 FB | 	rdlong	local06, fp
1e210     08 CE 85 F1 | 	sub	fp, #8
1e214     1E B0 0E F2 | 	cmp	local06, #30 wz
1e218     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1e21c     2C 00 90 5D |  if_ne	jmp	#LR__2544
1e220     E7 B0 02 FB | 	rdlong	local06, fp
1e224     53 93 52 F6 | 	abs	arg01, local01 wc
1e228     1F B2 C6 C9 |  if_b	decod	local07, #31
1e22c     00 B2 06 36 |  if_ae	mov	local07, #0
1e230     A0 8D B0 FD | 	call	#__system___float_fromuns
1e234     59 7B 62 F5 | 	xor	result1, local07
1e238     3D 95 02 F6 | 	mov	arg02, result1
1e23c     58 93 02 F6 | 	mov	arg01, local06
1e240     94 91 B0 FD | 	call	#__system___float_mul
1e244     E7 7A 62 FC | 	wrlong	result1, fp
1e248     60 00 90 FD | 	jmp	#LR__2546
1e24c                 | LR__2544
1e24c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
1e24c     08 CE 05 F1 | 	add	fp, #8
1e250     E7 B0 02 FB | 	rdlong	local06, fp
1e254     08 CE 85 F1 | 	sub	fp, #8
1e258     1E B0 0E F2 | 	cmp	local06, #30 wz
1e25c     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1e260     14 00 90 5D |  if_ne	jmp	#LR__2545
1e264     E7 92 02 FB | 	rdlong	arg01, fp
1e268     53 95 02 F6 | 	mov	arg02, local01
1e26c     68 91 B0 FD | 	call	#__system___float_mul
1e270     E7 7A 62 FC | 	wrlong	result1, fp
1e274     34 00 90 FD | 	jmp	#LR__2546
1e278                 | LR__2545
1e278                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
1e278     08 CE 05 F1 | 	add	fp, #8
1e27c     E7 B0 02 FB | 	rdlong	local06, fp
1e280     08 CE 85 F1 | 	sub	fp, #8
1e284     1F B0 0E F2 | 	cmp	local06, #31 wz
1e288     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1e28c     E7 10 68 AC |  if_e	wrlong	#8, fp
1e290     08 CE 05 A1 |  if_e	add	fp, #8
1e294     E7 FE 69 AC |  if_e	wrlong	#255, fp
1e298     08 CE 85 A1 |  if_e	sub	fp, #8
1e29c     E7 12 68 5C |  if_ne	wrlong	#9, fp
1e2a0     08 CE 05 51 |  if_ne	add	fp, #8
1e2a4     E7 FE 69 5C |  if_ne	wrlong	#255, fp
1e2a8     08 CE 85 51 |  if_ne	sub	fp, #8
1e2ac                 | LR__2546
1e2ac     E7 92 02 F6 | 	mov	arg01, fp
1e2b0     4C F4 BE FD | 	call	#_push
1e2b4     E7 F0 03 F6 | 	mov	ptra, fp
1e2b8     F2 00 A0 FD | 	call	#popregs_
1e2bc                 | _do_mul_ret
1e2bc     2D 00 64 FD | 	ret
1e2c0                 | 
1e2c0                 | ' 
1e2c0                 | ' '--------------------------------- not equal (<>)
1e2c0                 | ' 
1e2c0                 | ' sub do_ne
1e2c0                 | _do_ne
1e2c0     07 CA 05 F6 | 	mov	COUNT_, #7
1e2c4     E8 00 A0 FD | 	call	#pushregs_
1e2c8     18 F0 07 F1 | 	add	ptra, #24
1e2cc     A0 F3 BE FD | 	call	#_pop
1e2d0     3D A7 02 F6 | 	mov	local01, result1
1e2d4     3E AD 02 F6 | 	mov	local04, result2
1e2d8     3F AF 02 F6 | 	mov	local05, result3
1e2dc     56 A9 02 F6 | 	mov	local02, local04
1e2e0     57 AB 02 F6 | 	mov	local03, local05
1e2e4     88 F3 BE FD | 	call	#_pop
1e2e8     3F AF 02 F6 | 	mov	local05, result3
1e2ec     E7 7A 62 FC | 	wrlong	result1, fp
1e2f0     04 CE 05 F1 | 	add	fp, #4
1e2f4     E7 7C 62 FC | 	wrlong	result2, fp
1e2f8     04 CE 05 F1 | 	add	fp, #4
1e2fc     E7 AE 62 FC | 	wrlong	local05, fp
1e300                 | ' 
1e300                 | ' t2=pop()
1e300                 | ' t1=pop()
1e300                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
1e300     08 CE 85 F1 | 	sub	fp, #8
1e304     1F AE 0E F2 | 	cmp	local05, #31 wz
1e308     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1e30c     20 00 90 5D |  if_ne	jmp	#LR__2550
1e310     00 B0 06 F6 | 	mov	local06, #0
1e314     E7 92 02 FB | 	rdlong	arg01, fp
1e318     53 95 02 F6 | 	mov	arg02, local01
1e31c     10 6A B0 FD | 	call	#__system___string_cmp
1e320     00 7A 0E F2 | 	cmp	result1, #0 wz
1e324     00 B0 26 56 |  if_ne	not	local06, #0
1e328     E7 B0 62 FC | 	wrlong	local06, fp
1e32c     04 03 90 FD | 	jmp	#LR__2563
1e330                 | LR__2550
1e330                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
1e330     08 CE 05 F1 | 	add	fp, #8
1e334     E7 B0 02 FB | 	rdlong	local06, fp
1e338     08 CE 85 F1 | 	sub	fp, #8
1e33c     1E B0 0E F2 | 	cmp	local06, #30 wz
1e340     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1e344     24 00 90 5D |  if_ne	jmp	#LR__2551
1e348     00 B0 06 F6 | 	mov	local06, #0
1e34c     E7 92 02 FB | 	rdlong	arg01, fp
1e350     53 95 02 F6 | 	mov	arg02, local01
1e354     01 96 06 F6 | 	mov	arg03, #1
1e358     B0 94 B0 FD | 	call	#__system___float_cmp
1e35c     00 7A 0E F2 | 	cmp	result1, #0 wz
1e360     00 B0 26 56 |  if_ne	not	local06, #0
1e364     E7 B0 62 FC | 	wrlong	local06, fp
1e368     C8 02 90 FD | 	jmp	#LR__2563
1e36c                 | LR__2551
1e36c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
1e36c     08 CE 05 F1 | 	add	fp, #8
1e370     E7 B0 02 FB | 	rdlong	local06, fp
1e374     08 CE 85 F1 | 	sub	fp, #8
1e378     1E B0 0E F2 | 	cmp	local06, #30 wz
1e37c     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1e380     3C 00 90 5D |  if_ne	jmp	#LR__2552
1e384     00 B0 06 F6 | 	mov	local06, #0
1e388     E7 AC 02 FB | 	rdlong	local04, fp
1e38c     53 93 52 F6 | 	abs	arg01, local01 wc
1e390     1F B2 C6 C9 |  if_b	decod	local07, #31
1e394     00 B2 06 36 |  if_ae	mov	local07, #0
1e398     38 8C B0 FD | 	call	#__system___float_fromuns
1e39c     59 7B 62 F5 | 	xor	result1, local07
1e3a0     3D 95 02 F6 | 	mov	arg02, result1
1e3a4     56 93 02 F6 | 	mov	arg01, local04
1e3a8     01 96 06 F6 | 	mov	arg03, #1
1e3ac     5C 94 B0 FD | 	call	#__system___float_cmp
1e3b0     00 7A 0E F2 | 	cmp	result1, #0 wz
1e3b4     00 B0 26 56 |  if_ne	not	local06, #0
1e3b8     E7 B0 62 FC | 	wrlong	local06, fp
1e3bc     74 02 90 FD | 	jmp	#LR__2563
1e3c0                 | LR__2552
1e3c0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
1e3c0     08 CE 05 F1 | 	add	fp, #8
1e3c4     E7 B0 02 FB | 	rdlong	local06, fp
1e3c8     08 CE 85 F1 | 	sub	fp, #8
1e3cc     1E B0 0E F2 | 	cmp	local06, #30 wz
1e3d0     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1e3d4     30 00 90 5D |  if_ne	jmp	#LR__2553
1e3d8     00 B0 06 F6 | 	mov	local06, #0
1e3dc     E7 AC 02 FB | 	rdlong	local04, fp
1e3e0     53 93 02 F6 | 	mov	arg01, local01
1e3e4     EC 8B B0 FD | 	call	#__system___float_fromuns
1e3e8     3D 95 02 F6 | 	mov	arg02, result1
1e3ec     56 93 02 F6 | 	mov	arg01, local04
1e3f0     01 96 06 F6 | 	mov	arg03, #1
1e3f4     14 94 B0 FD | 	call	#__system___float_cmp
1e3f8     00 7A 0E F2 | 	cmp	result1, #0 wz
1e3fc     00 B0 26 56 |  if_ne	not	local06, #0
1e400     E7 B0 62 FC | 	wrlong	local06, fp
1e404     2C 02 90 FD | 	jmp	#LR__2563
1e408                 | LR__2553
1e408                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
1e408     08 CE 05 F1 | 	add	fp, #8
1e40c     E7 B0 02 FB | 	rdlong	local06, fp
1e410     08 CE 85 F1 | 	sub	fp, #8
1e414     1C B0 0E F2 | 	cmp	local06, #28 wz
1e418     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1e41c     3C 00 90 5D |  if_ne	jmp	#LR__2554
1e420     00 B0 06 F6 | 	mov	local06, #0
1e424     E7 92 02 FB | 	rdlong	arg01, fp
1e428     49 93 52 F6 | 	abs	arg01, arg01 wc
1e42c     1F B2 C6 C9 |  if_b	decod	local07, #31
1e430     00 B2 06 36 |  if_ae	mov	local07, #0
1e434     9C 8B B0 FD | 	call	#__system___float_fromuns
1e438     59 7B 62 F5 | 	xor	result1, local07
1e43c     3D 93 02 F6 | 	mov	arg01, result1
1e440     53 95 02 F6 | 	mov	arg02, local01
1e444     01 96 06 F6 | 	mov	arg03, #1
1e448     C0 93 B0 FD | 	call	#__system___float_cmp
1e44c     00 7A 0E F2 | 	cmp	result1, #0 wz
1e450     00 B0 26 56 |  if_ne	not	local06, #0
1e454     E7 B0 62 FC | 	wrlong	local06, fp
1e458     D8 01 90 FD | 	jmp	#LR__2563
1e45c                 | LR__2554
1e45c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
1e45c     08 CE 05 F1 | 	add	fp, #8
1e460     E7 B0 02 FB | 	rdlong	local06, fp
1e464     08 CE 85 F1 | 	sub	fp, #8
1e468     1C B0 0E F2 | 	cmp	local06, #28 wz
1e46c     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1e470     18 00 90 5D |  if_ne	jmp	#LR__2555
1e474     00 B0 06 F6 | 	mov	local06, #0
1e478     E7 AC 02 FB | 	rdlong	local04, fp
1e47c     53 AD 0A F2 | 	cmp	local04, local01 wz
1e480     01 B0 66 56 |  if_ne	neg	local06, #1
1e484     E7 B0 62 FC | 	wrlong	local06, fp
1e488     A8 01 90 FD | 	jmp	#LR__2563
1e48c                 | LR__2555
1e48c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
1e48c     08 CE 05 F1 | 	add	fp, #8
1e490     E7 B0 02 FB | 	rdlong	local06, fp
1e494     08 CE 85 F1 | 	sub	fp, #8
1e498     1C B0 0E F2 | 	cmp	local06, #28 wz
1e49c     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1e4a0     18 00 90 5D |  if_ne	jmp	#LR__2556
1e4a4     00 B0 06 F6 | 	mov	local06, #0
1e4a8     E7 AC 02 FB | 	rdlong	local04, fp
1e4ac     53 AD 0A F2 | 	cmp	local04, local01 wz
1e4b0     01 B0 66 56 |  if_ne	neg	local06, #1
1e4b4     E7 B0 62 FC | 	wrlong	local06, fp
1e4b8     78 01 90 FD | 	jmp	#LR__2563
1e4bc                 | LR__2556
1e4bc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
1e4bc     08 CE 05 F1 | 	add	fp, #8
1e4c0     E7 B0 02 FB | 	rdlong	local06, fp
1e4c4     08 CE 85 F1 | 	sub	fp, #8
1e4c8     1D B0 0E F2 | 	cmp	local06, #29 wz
1e4cc     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1e4d0     2C 00 90 5D |  if_ne	jmp	#LR__2557
1e4d4     00 B0 06 F6 | 	mov	local06, #0
1e4d8     E7 92 02 FB | 	rdlong	arg01, fp
1e4dc     F4 8A B0 FD | 	call	#__system___float_fromuns
1e4e0     3D 93 02 F6 | 	mov	arg01, result1
1e4e4     53 95 02 F6 | 	mov	arg02, local01
1e4e8     01 96 06 F6 | 	mov	arg03, #1
1e4ec     1C 93 B0 FD | 	call	#__system___float_cmp
1e4f0     00 7A 0E F2 | 	cmp	result1, #0 wz
1e4f4     00 B0 26 56 |  if_ne	not	local06, #0
1e4f8     E7 B0 62 FC | 	wrlong	local06, fp
1e4fc     34 01 90 FD | 	jmp	#LR__2563
1e500                 | LR__2557
1e500                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
1e500     08 CE 05 F1 | 	add	fp, #8
1e504     E7 B0 02 FB | 	rdlong	local06, fp
1e508     08 CE 85 F1 | 	sub	fp, #8
1e50c     1D B0 0E F2 | 	cmp	local06, #29 wz
1e510     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1e514     18 00 90 5D |  if_ne	jmp	#LR__2558
1e518     00 B0 06 F6 | 	mov	local06, #0
1e51c     E7 AC 02 FB | 	rdlong	local04, fp
1e520     53 AD 0A F2 | 	cmp	local04, local01 wz
1e524     01 B0 66 56 |  if_ne	neg	local06, #1
1e528     E7 B0 62 FC | 	wrlong	local06, fp
1e52c     04 01 90 FD | 	jmp	#LR__2563
1e530                 | LR__2558
1e530                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
1e530     08 CE 05 F1 | 	add	fp, #8
1e534     E7 B0 02 FB | 	rdlong	local06, fp
1e538     08 CE 85 F1 | 	sub	fp, #8
1e53c     1D B0 0E F2 | 	cmp	local06, #29 wz
1e540     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1e544     18 00 90 5D |  if_ne	jmp	#LR__2559
1e548     00 B0 06 F6 | 	mov	local06, #0
1e54c     E7 AC 02 FB | 	rdlong	local04, fp
1e550     53 AD 0A F2 | 	cmp	local04, local01 wz
1e554     01 B0 66 56 |  if_ne	neg	local06, #1
1e558     E7 B0 62 FC | 	wrlong	local06, fp
1e55c     D4 00 90 FD | 	jmp	#LR__2563
1e560                 | LR__2559
1e560                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
1e560     08 CE 05 F1 | 	add	fp, #8
1e564     E7 B0 02 FB | 	rdlong	local06, fp
1e568     08 CE 85 F1 | 	sub	fp, #8
1e56c     2B B0 0E F2 | 	cmp	local06, #43 wz
1e570     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1e574     28 00 90 5D |  if_ne	jmp	#LR__2560
1e578     00 B0 06 F6 | 	mov	local06, #0
1e57c     E7 92 02 FB | 	rdlong	arg01, fp
1e580     5C F2 BE FD | 	call	#_convertstring
1e584     3D 93 02 F6 | 	mov	arg01, result1
1e588     53 95 02 F6 | 	mov	arg02, local01
1e58c     A0 67 B0 FD | 	call	#__system___string_cmp
1e590     00 7A 0E F2 | 	cmp	result1, #0 wz
1e594     00 B0 26 56 |  if_ne	not	local06, #0
1e598     E7 B0 62 FC | 	wrlong	local06, fp
1e59c     94 00 90 FD | 	jmp	#LR__2563
1e5a0                 | LR__2560
1e5a0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
1e5a0     08 CE 05 F1 | 	add	fp, #8
1e5a4     E7 B0 02 FB | 	rdlong	local06, fp
1e5a8     08 CE 85 F1 | 	sub	fp, #8
1e5ac     1F B0 0E F2 | 	cmp	local06, #31 wz
1e5b0     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1e5b4     2C 00 90 5D |  if_ne	jmp	#LR__2561
1e5b8     00 B0 06 F6 | 	mov	local06, #0
1e5bc     E7 AC 02 FB | 	rdlong	local04, fp
1e5c0     53 93 02 F6 | 	mov	arg01, local01
1e5c4     18 F2 BE FD | 	call	#_convertstring
1e5c8     3D 95 02 F6 | 	mov	arg02, result1
1e5cc     56 93 02 F6 | 	mov	arg01, local04
1e5d0     5C 67 B0 FD | 	call	#__system___string_cmp
1e5d4     00 7A 0E F2 | 	cmp	result1, #0 wz
1e5d8     00 B0 26 56 |  if_ne	not	local06, #0
1e5dc     E7 B0 62 FC | 	wrlong	local06, fp
1e5e0     50 00 90 FD | 	jmp	#LR__2563
1e5e4                 | LR__2561
1e5e4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
1e5e4     08 CE 05 F1 | 	add	fp, #8
1e5e8     E7 B0 02 FB | 	rdlong	local06, fp
1e5ec     08 CE 85 F1 | 	sub	fp, #8
1e5f0     2B B0 0E F2 | 	cmp	local06, #43 wz
1e5f4     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1e5f8     34 00 90 5D |  if_ne	jmp	#LR__2562
1e5fc     00 B0 06 F6 | 	mov	local06, #0
1e600     E7 92 02 FB | 	rdlong	arg01, fp
1e604     D8 F1 BE FD | 	call	#_convertstring
1e608     3D AD 02 F6 | 	mov	local04, result1
1e60c     53 93 02 F6 | 	mov	arg01, local01
1e610     CC F1 BE FD | 	call	#_convertstring
1e614     3D 95 02 F6 | 	mov	arg02, result1
1e618     56 93 02 F6 | 	mov	arg01, local04
1e61c     10 67 B0 FD | 	call	#__system___string_cmp
1e620     00 7A 0E F2 | 	cmp	result1, #0 wz
1e624     00 B0 26 56 |  if_ne	not	local06, #0
1e628     E7 B0 62 FC | 	wrlong	local06, fp
1e62c     04 00 90 FD | 	jmp	#LR__2563
1e630                 | LR__2562
1e630     E7 00 68 FC | 	wrlong	#0, fp
1e634                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1e634                 | LR__2563
1e634     08 CE 05 F1 | 	add	fp, #8
1e638     E7 38 68 FC | 	wrlong	#28, fp
1e63c     08 CE 85 F1 | 	sub	fp, #8
1e640     E7 92 02 F6 | 	mov	arg01, fp
1e644     B8 F0 BE FD | 	call	#_push
1e648     E7 F0 03 F6 | 	mov	ptra, fp
1e64c     F2 00 A0 FD | 	call	#popregs_
1e650                 | _do_ne_ret
1e650     2D 00 64 FD | 	ret
1e654                 | 
1e654                 | ' 
1e654                 | ' '--------------------------------- OR
1e654                 | ' 
1e654                 | ' sub do_or 
1e654                 | _do_or
1e654     05 CA 05 F6 | 	mov	COUNT_, #5
1e658     E8 00 A0 FD | 	call	#pushregs_
1e65c     18 F0 07 F1 | 	add	ptra, #24
1e660     0C F0 BE FD | 	call	#_pop
1e664     3D A7 02 F6 | 	mov	local01, result1
1e668     3E 93 02 F6 | 	mov	arg01, result2
1e66c     3F AD 02 F6 | 	mov	local04, result3
1e670     49 A9 02 F6 | 	mov	local02, arg01
1e674     56 AB 02 F6 | 	mov	local03, local04
1e678     F4 EF BE FD | 	call	#_pop
1e67c     3F AF 02 F6 | 	mov	local05, result3
1e680     E7 7A 62 FC | 	wrlong	result1, fp
1e684     04 CE 05 F1 | 	add	fp, #4
1e688     E7 7C 62 FC | 	wrlong	result2, fp
1e68c     04 CE 05 F1 | 	add	fp, #4
1e690     E7 AE 62 FC | 	wrlong	local05, fp
1e694                 | ' 
1e694                 | ' t2=pop()
1e694                 | ' t1=pop()
1e694                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1e694     08 CE 85 F1 | 	sub	fp, #8
1e698     1C AE 0E F2 | 	cmp	local05, #28 wz
1e69c     E7 AE 02 AB |  if_e	rdlong	local05, fp
1e6a0     E7 AE 62 AC |  if_e	wrlong	local05, fp
1e6a4     08 CE 05 A1 |  if_e	add	fp, #8
1e6a8     E7 3A 68 AC |  if_e	wrlong	#29, fp
1e6ac     08 CE 85 A1 |  if_e	sub	fp, #8
1e6b0                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1e6b0     1C AA 0E F2 | 	cmp	local03, #28 wz
1e6b4     1D AA 06 A6 |  if_e	mov	local03, #29
1e6b8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
1e6b8     08 CE 05 F1 | 	add	fp, #8
1e6bc     E7 AE 02 FB | 	rdlong	local05, fp
1e6c0     08 CE 85 F1 | 	sub	fp, #8
1e6c4     1F AE 0E F2 | 	cmp	local05, #31 wz
1e6c8     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1e6cc     08 CE 05 51 |  if_ne	add	fp, #8
1e6d0     E7 AC 02 5B |  if_ne	rdlong	local04, fp
1e6d4     08 CE 85 51 |  if_ne	sub	fp, #8
1e6d8     1E AC 0E 52 |  if_ne	cmp	local04, #30 wz
1e6dc     1E AA 0E 52 |  if_ne	cmp	local03, #30 wz
1e6e0     E7 0C 68 AC |  if_e	wrlong	#6, fp
1e6e4     08 CE 05 A1 |  if_e	add	fp, #8
1e6e8     E7 FE 69 AC |  if_e	wrlong	#255, fp
1e6ec     08 CE 85 A1 |  if_e	sub	fp, #8
1e6f0     E7 AE 02 5B |  if_ne	rdlong	local05, fp
1e6f4     53 AF 42 55 |  if_ne	or	local05, local01
1e6f8     E7 AE 62 5C |  if_ne	wrlong	local05, fp
1e6fc     E7 92 02 F6 | 	mov	arg01, fp
1e700     FC EF BE FD | 	call	#_push
1e704     E7 F0 03 F6 | 	mov	ptra, fp
1e708     F2 00 A0 FD | 	call	#popregs_
1e70c                 | _do_or_ret
1e70c     2D 00 64 FD | 	ret
1e710                 | 
1e710                 | ' 
1e710                 | ' '--------------------------------- plus (+)
1e710                 | ' 
1e710                 | ' sub do_plus 
1e710                 | _do_plus
1e710     07 CA 05 F6 | 	mov	COUNT_, #7
1e714     E8 00 A0 FD | 	call	#pushregs_
1e718     18 F0 07 F1 | 	add	ptra, #24
1e71c     50 EF BE FD | 	call	#_pop
1e720     3D A7 02 F6 | 	mov	local01, result1
1e724     3E AD 02 F6 | 	mov	local04, result2
1e728     3F AF 02 F6 | 	mov	local05, result3
1e72c     56 A9 02 F6 | 	mov	local02, local04
1e730     57 AB 02 F6 | 	mov	local03, local05
1e734     38 EF BE FD | 	call	#_pop
1e738     3F AF 02 F6 | 	mov	local05, result3
1e73c     E7 7A 62 FC | 	wrlong	result1, fp
1e740     04 CE 05 F1 | 	add	fp, #4
1e744     E7 7C 62 FC | 	wrlong	result2, fp
1e748     04 CE 05 F1 | 	add	fp, #4
1e74c     E7 AE 62 FC | 	wrlong	local05, fp
1e750                 | ' 
1e750                 | ' t2=pop()
1e750                 | ' t1=pop()
1e750                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
1e750     57 B1 02 F6 | 	mov	local06, local05
1e754     08 CE 85 F1 | 	sub	fp, #8
1e758     1D B0 0E F2 | 	cmp	local06, #29 wz
1e75c     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1e760     E7 B0 02 AB |  if_e	rdlong	local06, fp
1e764     53 B1 02 A1 |  if_e	add	local06, local01
1e768     E7 B0 62 AC |  if_e	wrlong	local06, fp
1e76c     0C 03 90 AD |  if_e	jmp	#LR__2582
1e770                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
1e770     08 CE 05 F1 | 	add	fp, #8
1e774     E7 B0 02 FB | 	rdlong	local06, fp
1e778     08 CE 85 F1 | 	sub	fp, #8
1e77c     1D B0 0E F2 | 	cmp	local06, #29 wz
1e780     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1e784     1C 00 90 5D |  if_ne	jmp	#LR__2570
1e788     E7 B0 02 FB | 	rdlong	local06, fp
1e78c     53 B1 02 F1 | 	add	local06, local01
1e790     E7 B0 62 FC | 	wrlong	local06, fp
1e794     08 CE 05 F1 | 	add	fp, #8
1e798     E7 38 68 FC | 	wrlong	#28, fp
1e79c     08 CE 85 F1 | 	sub	fp, #8
1e7a0     D8 02 90 FD | 	jmp	#LR__2582
1e7a4                 | LR__2570
1e7a4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1e7a4     08 CE 05 F1 | 	add	fp, #8
1e7a8     E7 B0 02 FB | 	rdlong	local06, fp
1e7ac     08 CE 85 F1 | 	sub	fp, #8
1e7b0     1D B0 0E F2 | 	cmp	local06, #29 wz
1e7b4     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1e7b8     28 00 90 5D |  if_ne	jmp	#LR__2571
1e7bc     E7 92 02 FB | 	rdlong	arg01, fp
1e7c0     10 88 B0 FD | 	call	#__system___float_fromuns
1e7c4     3D 93 02 F6 | 	mov	arg01, result1
1e7c8     53 95 02 F6 | 	mov	arg02, local01
1e7cc     38 88 B0 FD | 	call	#__system___float_add
1e7d0     E7 7A 62 FC | 	wrlong	result1, fp
1e7d4     08 CE 05 F1 | 	add	fp, #8
1e7d8     E7 3C 68 FC | 	wrlong	#30, fp
1e7dc     08 CE 85 F1 | 	sub	fp, #8
1e7e0     98 02 90 FD | 	jmp	#LR__2582
1e7e4                 | LR__2571
1e7e4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
1e7e4     08 CE 05 F1 | 	add	fp, #8
1e7e8     E7 B0 02 FB | 	rdlong	local06, fp
1e7ec     08 CE 85 F1 | 	sub	fp, #8
1e7f0     1C B0 0E F2 | 	cmp	local06, #28 wz
1e7f4     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1e7f8     E7 B0 02 AB |  if_e	rdlong	local06, fp
1e7fc     53 B1 02 A1 |  if_e	add	local06, local01
1e800     E7 B0 62 AC |  if_e	wrlong	local06, fp
1e804     74 02 90 AD |  if_e	jmp	#LR__2582
1e808                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
1e808     08 CE 05 F1 | 	add	fp, #8
1e80c     E7 B0 02 FB | 	rdlong	local06, fp
1e810     08 CE 85 F1 | 	sub	fp, #8
1e814     1C B0 0E F2 | 	cmp	local06, #28 wz
1e818     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1e81c     E7 B0 02 AB |  if_e	rdlong	local06, fp
1e820     53 B1 02 A1 |  if_e	add	local06, local01
1e824     E7 B0 62 AC |  if_e	wrlong	local06, fp
1e828     50 02 90 AD |  if_e	jmp	#LR__2582
1e82c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1e82c     08 CE 05 F1 | 	add	fp, #8
1e830     E7 B0 02 FB | 	rdlong	local06, fp
1e834     08 CE 85 F1 | 	sub	fp, #8
1e838     1C B0 0E F2 | 	cmp	local06, #28 wz
1e83c     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1e840     38 00 90 5D |  if_ne	jmp	#LR__2572
1e844     E7 92 02 FB | 	rdlong	arg01, fp
1e848     49 93 52 F6 | 	abs	arg01, arg01 wc
1e84c     1F B2 C6 C9 |  if_b	decod	local07, #31
1e850     00 B2 06 36 |  if_ae	mov	local07, #0
1e854     7C 87 B0 FD | 	call	#__system___float_fromuns
1e858     59 7B 62 F5 | 	xor	result1, local07
1e85c     3D 93 02 F6 | 	mov	arg01, result1
1e860     53 95 02 F6 | 	mov	arg02, local01
1e864     A0 87 B0 FD | 	call	#__system___float_add
1e868     E7 7A 62 FC | 	wrlong	result1, fp
1e86c     08 CE 05 F1 | 	add	fp, #8
1e870     E7 3C 68 FC | 	wrlong	#30, fp
1e874     08 CE 85 F1 | 	sub	fp, #8
1e878     00 02 90 FD | 	jmp	#LR__2582
1e87c                 | LR__2572
1e87c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
1e87c     08 CE 05 F1 | 	add	fp, #8
1e880     E7 B0 02 FB | 	rdlong	local06, fp
1e884     08 CE 85 F1 | 	sub	fp, #8
1e888     1E B0 0E F2 | 	cmp	local06, #30 wz
1e88c     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1e890     20 00 90 5D |  if_ne	jmp	#LR__2573
1e894     E7 B0 02 FB | 	rdlong	local06, fp
1e898     53 93 02 F6 | 	mov	arg01, local01
1e89c     34 87 B0 FD | 	call	#__system___float_fromuns
1e8a0     3D 95 02 F6 | 	mov	arg02, result1
1e8a4     58 93 02 F6 | 	mov	arg01, local06
1e8a8     5C 87 B0 FD | 	call	#__system___float_add
1e8ac     E7 7A 62 FC | 	wrlong	result1, fp
1e8b0     C8 01 90 FD | 	jmp	#LR__2582
1e8b4                 | LR__2573
1e8b4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
1e8b4     08 CE 05 F1 | 	add	fp, #8
1e8b8     E7 B0 02 FB | 	rdlong	local06, fp
1e8bc     08 CE 85 F1 | 	sub	fp, #8
1e8c0     1E B0 0E F2 | 	cmp	local06, #30 wz
1e8c4     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1e8c8     2C 00 90 5D |  if_ne	jmp	#LR__2574
1e8cc     E7 B0 02 FB | 	rdlong	local06, fp
1e8d0     53 93 52 F6 | 	abs	arg01, local01 wc
1e8d4     1F B2 C6 C9 |  if_b	decod	local07, #31
1e8d8     00 B2 06 36 |  if_ae	mov	local07, #0
1e8dc     F4 86 B0 FD | 	call	#__system___float_fromuns
1e8e0     59 7B 62 F5 | 	xor	result1, local07
1e8e4     3D 95 02 F6 | 	mov	arg02, result1
1e8e8     58 93 02 F6 | 	mov	arg01, local06
1e8ec     18 87 B0 FD | 	call	#__system___float_add
1e8f0     E7 7A 62 FC | 	wrlong	result1, fp
1e8f4     84 01 90 FD | 	jmp	#LR__2582
1e8f8                 | LR__2574
1e8f8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
1e8f8     08 CE 05 F1 | 	add	fp, #8
1e8fc     E7 B0 02 FB | 	rdlong	local06, fp
1e900     08 CE 85 F1 | 	sub	fp, #8
1e904     1E B0 0E F2 | 	cmp	local06, #30 wz
1e908     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1e90c     14 00 90 5D |  if_ne	jmp	#LR__2575
1e910     E7 92 02 FB | 	rdlong	arg01, fp
1e914     53 95 02 F6 | 	mov	arg02, local01
1e918     EC 86 B0 FD | 	call	#__system___float_add
1e91c     E7 7A 62 FC | 	wrlong	result1, fp
1e920     58 01 90 FD | 	jmp	#LR__2582
1e924                 | LR__2575
1e924                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
1e924     08 CE 05 F1 | 	add	fp, #8
1e928     E7 B0 02 FB | 	rdlong	local06, fp
1e92c     08 CE 85 F1 | 	sub	fp, #8
1e930     1F B0 0E F2 | 	cmp	local06, #31 wz
1e934     18 00 90 5D |  if_ne	jmp	#LR__2576
1e938     1F AA 0E F2 | 	cmp	local03, #31 wz
1e93c     E7 04 68 5C |  if_ne	wrlong	#2, fp
1e940     08 CE 05 51 |  if_ne	add	fp, #8
1e944     E7 FE 69 5C |  if_ne	wrlong	#255, fp
1e948     08 CE 85 51 |  if_ne	sub	fp, #8
1e94c     2C 01 90 5D |  if_ne	jmp	#LR__2582
1e950                 | LR__2576
1e950                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
1e950     1F AA 0E F2 | 	cmp	local03, #31 wz
1e954     24 00 90 5D |  if_ne	jmp	#LR__2577
1e958     08 CE 05 F1 | 	add	fp, #8
1e95c     E7 B0 02 FB | 	rdlong	local06, fp
1e960     08 CE 85 F1 | 	sub	fp, #8
1e964     1F B0 0E F2 | 	cmp	local06, #31 wz
1e968     E7 04 68 5C |  if_ne	wrlong	#2, fp
1e96c     08 CE 05 51 |  if_ne	add	fp, #8
1e970     E7 FE 69 5C |  if_ne	wrlong	#255, fp
1e974     08 CE 85 51 |  if_ne	sub	fp, #8
1e978     00 01 90 5D |  if_ne	jmp	#LR__2582
1e97c                 | LR__2577
1e97c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
1e97c     08 CE 05 F1 | 	add	fp, #8
1e980     E7 B0 02 FB | 	rdlong	local06, fp
1e984     08 CE 85 F1 | 	sub	fp, #8
1e988     1F B0 0E F2 | 	cmp	local06, #31 wz
1e98c     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1e990     14 00 90 5D |  if_ne	jmp	#LR__2578
1e994     E7 92 02 FB | 	rdlong	arg01, fp
1e998     53 95 02 F6 | 	mov	arg02, local01
1e99c     C4 63 B0 FD | 	call	#__system___string_concat
1e9a0     E7 7A 62 FC | 	wrlong	result1, fp
1e9a4     D4 00 90 FD | 	jmp	#LR__2582
1e9a8                 | LR__2578
1e9a8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
1e9a8     08 CE 05 F1 | 	add	fp, #8
1e9ac     E7 B0 02 FB | 	rdlong	local06, fp
1e9b0     08 CE 85 F1 | 	sub	fp, #8
1e9b4     2B B0 0E F2 | 	cmp	local06, #43 wz
1e9b8     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1e9bc     28 00 90 5D |  if_ne	jmp	#LR__2579
1e9c0     E7 92 02 FB | 	rdlong	arg01, fp
1e9c4     18 EE BE FD | 	call	#_convertstring
1e9c8     3D 93 02 F6 | 	mov	arg01, result1
1e9cc     53 95 02 F6 | 	mov	arg02, local01
1e9d0     90 63 B0 FD | 	call	#__system___string_concat
1e9d4     E7 7A 62 FC | 	wrlong	result1, fp
1e9d8     08 CE 05 F1 | 	add	fp, #8
1e9dc     E7 3E 68 FC | 	wrlong	#31, fp
1e9e0     08 CE 85 F1 | 	sub	fp, #8
1e9e4     94 00 90 FD | 	jmp	#LR__2582
1e9e8                 | LR__2579
1e9e8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
1e9e8     08 CE 05 F1 | 	add	fp, #8
1e9ec     E7 B0 02 FB | 	rdlong	local06, fp
1e9f0     08 CE 85 F1 | 	sub	fp, #8
1e9f4     1F B0 0E F2 | 	cmp	local06, #31 wz
1e9f8     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1e9fc     20 00 90 5D |  if_ne	jmp	#LR__2580
1ea00     E7 B0 02 FB | 	rdlong	local06, fp
1ea04     53 93 02 F6 | 	mov	arg01, local01
1ea08     D4 ED BE FD | 	call	#_convertstring
1ea0c     3D 95 02 F6 | 	mov	arg02, result1
1ea10     58 93 02 F6 | 	mov	arg01, local06
1ea14     4C 63 B0 FD | 	call	#__system___string_concat
1ea18     E7 7A 62 FC | 	wrlong	result1, fp
1ea1c     5C 00 90 FD | 	jmp	#LR__2582
1ea20                 | LR__2580
1ea20                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
1ea20     08 CE 05 F1 | 	add	fp, #8
1ea24     E7 B0 02 FB | 	rdlong	local06, fp
1ea28     08 CE 85 F1 | 	sub	fp, #8
1ea2c     2B B0 0E F2 | 	cmp	local06, #43 wz
1ea30     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1ea34     34 00 90 5D |  if_ne	jmp	#LR__2581
1ea38     E7 92 02 FB | 	rdlong	arg01, fp
1ea3c     A0 ED BE FD | 	call	#_convertstring
1ea40     3D B1 02 F6 | 	mov	local06, result1
1ea44     53 93 02 F6 | 	mov	arg01, local01
1ea48     94 ED BE FD | 	call	#_convertstring
1ea4c     3D 95 02 F6 | 	mov	arg02, result1
1ea50     58 93 02 F6 | 	mov	arg01, local06
1ea54     0C 63 B0 FD | 	call	#__system___string_concat
1ea58     E7 7A 62 FC | 	wrlong	result1, fp
1ea5c     08 CE 05 F1 | 	add	fp, #8
1ea60     E7 3E 68 FC | 	wrlong	#31, fp
1ea64     08 CE 85 F1 | 	sub	fp, #8
1ea68     10 00 90 FD | 	jmp	#LR__2582
1ea6c                 | LR__2581
1ea6c     E7 08 68 FC | 	wrlong	#4, fp
1ea70     08 CE 05 F1 | 	add	fp, #8
1ea74     E7 FE 69 FC | 	wrlong	#255, fp
1ea78     08 CE 85 F1 | 	sub	fp, #8
1ea7c                 | LR__2582
1ea7c     E7 92 02 F6 | 	mov	arg01, fp
1ea80     7C EC BE FD | 	call	#_push
1ea84     E7 F0 03 F6 | 	mov	ptra, fp
1ea88     F2 00 A0 FD | 	call	#popregs_
1ea8c                 | _do_plus_ret
1ea8c     2D 00 64 FD | 	ret
1ea90                 | 
1ea90                 | ' 
1ea90                 | ' '--------------------------------- power (^)
1ea90                 | ' 
1ea90                 | ' sub do_power 
1ea90                 | _do_power
1ea90     04 CA 05 F6 | 	mov	COUNT_, #4
1ea94     E8 00 A0 FD | 	call	#pushregs_
1ea98     18 F0 07 F1 | 	add	ptra, #24
1ea9c     D0 EB BE FD | 	call	#_pop
1eaa0     3D A7 02 F6 | 	mov	local01, result1
1eaa4     3E 95 02 F6 | 	mov	arg02, result2
1eaa8     3F 93 02 F6 | 	mov	arg01, result3
1eaac     4A A9 02 F6 | 	mov	local02, arg02
1eab0     49 AB 02 F6 | 	mov	local03, arg01
1eab4     B8 EB BE FD | 	call	#_pop
1eab8     E7 7A 62 FC | 	wrlong	result1, fp
1eabc     04 CE 05 F1 | 	add	fp, #4
1eac0     E7 7C 62 FC | 	wrlong	result2, fp
1eac4     04 CE 05 F1 | 	add	fp, #4
1eac8     E7 7E 62 FC | 	wrlong	result3, fp
1eacc                 | ' 
1eacc                 | ' t2=pop()
1eacc                 | ' t1=pop()
1eacc                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
1eacc     08 CE 85 F1 | 	sub	fp, #8
1ead0     1F 7E 0E F2 | 	cmp	result3, #31 wz
1ead4     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1ead8     E7 18 68 AC |  if_e	wrlong	#12, fp
1eadc     08 CE 05 A1 |  if_e	add	fp, #8
1eae0     E7 FE 69 AC |  if_e	wrlong	#255, fp
1eae4     08 CE 85 A1 |  if_e	sub	fp, #8
1eae8     E0 00 90 AD |  if_e	jmp	#LR__2595
1eaec                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1eaec     08 CE 05 F1 | 	add	fp, #8
1eaf0     E7 94 02 FB | 	rdlong	arg02, fp
1eaf4     08 CE 85 F1 | 	sub	fp, #8
1eaf8     1C 94 0E F2 | 	cmp	arg02, #28 wz
1eafc     28 00 90 5D |  if_ne	jmp	#LR__2590
1eb00     08 CE 05 F1 | 	add	fp, #8
1eb04     E7 3C 68 FC | 	wrlong	#30, fp
1eb08     08 CE 85 F1 | 	sub	fp, #8
1eb0c     E7 92 02 FB | 	rdlong	arg01, fp
1eb10     49 93 52 F6 | 	abs	arg01, arg01 wc
1eb14     1F AC C6 C9 |  if_b	decod	local04, #31
1eb18     00 AC 06 36 |  if_ae	mov	local04, #0
1eb1c     B4 84 B0 FD | 	call	#__system___float_fromuns
1eb20     56 7B 62 F5 | 	xor	result1, local04
1eb24     E7 7A 62 FC | 	wrlong	result1, fp
1eb28                 | LR__2590
1eb28                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
1eb28     08 CE 05 F1 | 	add	fp, #8
1eb2c     E7 94 02 FB | 	rdlong	arg02, fp
1eb30     08 CE 85 F1 | 	sub	fp, #8
1eb34     1D 94 0E F2 | 	cmp	arg02, #29 wz
1eb38     18 00 90 5D |  if_ne	jmp	#LR__2591
1eb3c     08 CE 05 F1 | 	add	fp, #8
1eb40     E7 3C 68 FC | 	wrlong	#30, fp
1eb44     08 CE 85 F1 | 	sub	fp, #8
1eb48     E7 92 02 FB | 	rdlong	arg01, fp
1eb4c     84 84 B0 FD | 	call	#__system___float_fromuns
1eb50     E7 7A 62 FC | 	wrlong	result1, fp
1eb54                 | LR__2591
1eb54                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1eb54     1C AA 0E F2 | 	cmp	local03, #28 wz
1eb58     1C 00 90 5D |  if_ne	jmp	#LR__2592
1eb5c     1E AA 06 F6 | 	mov	local03, #30
1eb60     53 93 52 F6 | 	abs	arg01, local01 wc
1eb64     1F AC C6 C9 |  if_b	decod	local04, #31
1eb68     00 AC 06 36 |  if_ae	mov	local04, #0
1eb6c     64 84 B0 FD | 	call	#__system___float_fromuns
1eb70     56 7B 62 F5 | 	xor	result1, local04
1eb74     3D A7 02 F6 | 	mov	local01, result1
1eb78                 | LR__2592
1eb78                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1eb78     1D AA 0E F2 | 	cmp	local03, #29 wz
1eb7c     10 00 90 5D |  if_ne	jmp	#LR__2593
1eb80     1E AA 06 F6 | 	mov	local03, #30
1eb84     53 93 02 F6 | 	mov	arg01, local01
1eb88     48 84 B0 FD | 	call	#__system___float_fromuns
1eb8c     3D A7 02 F6 | 	mov	local01, result1
1eb90                 | LR__2593
1eb90                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
1eb90     08 CE 05 F1 | 	add	fp, #8
1eb94     E7 94 02 FB | 	rdlong	arg02, fp
1eb98     08 CE 85 F1 | 	sub	fp, #8
1eb9c     1E 94 0E F2 | 	cmp	arg02, #30 wz
1eba0     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1eba4     14 00 90 5D |  if_ne	jmp	#LR__2594
1eba8     E7 92 02 FB | 	rdlong	arg01, fp
1ebac     53 95 02 F6 | 	mov	arg02, local01
1ebb0     3C 97 B0 FD | 	call	#__system____builtin_powf
1ebb4     E7 7A 62 FC | 	wrlong	result1, fp
1ebb8     10 00 90 FD | 	jmp	#LR__2595
1ebbc                 | LR__2594
1ebbc     E7 1A 68 FC | 	wrlong	#13, fp
1ebc0     08 CE 05 F1 | 	add	fp, #8
1ebc4     E7 FE 69 FC | 	wrlong	#255, fp
1ebc8     08 CE 85 F1 | 	sub	fp, #8
1ebcc                 | LR__2595
1ebcc     E7 92 02 F6 | 	mov	arg01, fp
1ebd0     2C EB BE FD | 	call	#_push
1ebd4     E7 F0 03 F6 | 	mov	ptra, fp
1ebd8     F2 00 A0 FD | 	call	#popregs_
1ebdc                 | _do_power_ret
1ebdc     2D 00 64 FD | 	ret
1ebe0                 | 
1ebe0                 | ' 
1ebe0                 | ' '--------------------------------- SHL
1ebe0                 | ' 
1ebe0                 | ' sub do_shl 
1ebe0                 | _do_shl
1ebe0     05 CA 05 F6 | 	mov	COUNT_, #5
1ebe4     E8 00 A0 FD | 	call	#pushregs_
1ebe8     18 F0 07 F1 | 	add	ptra, #24
1ebec     80 EA BE FD | 	call	#_pop
1ebf0     3D A7 02 F6 | 	mov	local01, result1
1ebf4     3E 93 02 F6 | 	mov	arg01, result2
1ebf8     3F AD 02 F6 | 	mov	local04, result3
1ebfc     49 A9 02 F6 | 	mov	local02, arg01
1ec00     56 AB 02 F6 | 	mov	local03, local04
1ec04     68 EA BE FD | 	call	#_pop
1ec08     3F AF 02 F6 | 	mov	local05, result3
1ec0c     E7 7A 62 FC | 	wrlong	result1, fp
1ec10     04 CE 05 F1 | 	add	fp, #4
1ec14     E7 7C 62 FC | 	wrlong	result2, fp
1ec18     04 CE 05 F1 | 	add	fp, #4
1ec1c     E7 AE 62 FC | 	wrlong	local05, fp
1ec20                 | ' 
1ec20                 | ' t2=pop()
1ec20                 | ' t1=pop()
1ec20                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1ec20     08 CE 85 F1 | 	sub	fp, #8
1ec24     1C AE 0E F2 | 	cmp	local05, #28 wz
1ec28     E7 AE 02 AB |  if_e	rdlong	local05, fp
1ec2c     E7 AE 62 AC |  if_e	wrlong	local05, fp
1ec30     08 CE 05 A1 |  if_e	add	fp, #8
1ec34     E7 3A 68 AC |  if_e	wrlong	#29, fp
1ec38     08 CE 85 A1 |  if_e	sub	fp, #8
1ec3c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1ec3c     1C AA 0E F2 | 	cmp	local03, #28 wz
1ec40     1D AA 06 A6 |  if_e	mov	local03, #29
1ec44                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
1ec44     08 CE 05 F1 | 	add	fp, #8
1ec48     E7 AE 02 FB | 	rdlong	local05, fp
1ec4c     08 CE 85 F1 | 	sub	fp, #8
1ec50     1F AE 0E F2 | 	cmp	local05, #31 wz
1ec54     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1ec58     08 CE 05 51 |  if_ne	add	fp, #8
1ec5c     E7 AC 02 5B |  if_ne	rdlong	local04, fp
1ec60     08 CE 85 51 |  if_ne	sub	fp, #8
1ec64     1E AC 0E 52 |  if_ne	cmp	local04, #30 wz
1ec68     1E AA 0E 52 |  if_ne	cmp	local03, #30 wz
1ec6c     E7 0C 68 AC |  if_e	wrlong	#6, fp
1ec70     08 CE 05 A1 |  if_e	add	fp, #8
1ec74     E7 FE 69 AC |  if_e	wrlong	#255, fp
1ec78     08 CE 85 A1 |  if_e	sub	fp, #8
1ec7c     E7 AE 02 5B |  if_ne	rdlong	local05, fp
1ec80     53 AF 62 50 |  if_ne	shl	local05, local01
1ec84     E7 AE 62 5C |  if_ne	wrlong	local05, fp
1ec88     E7 92 02 F6 | 	mov	arg01, fp
1ec8c     70 EA BE FD | 	call	#_push
1ec90     E7 F0 03 F6 | 	mov	ptra, fp
1ec94     F2 00 A0 FD | 	call	#popregs_
1ec98                 | _do_shl_ret
1ec98     2D 00 64 FD | 	ret
1ec9c                 | 
1ec9c                 | ' 
1ec9c                 | ' '--------------------------------- SHR
1ec9c                 | ' 
1ec9c                 | ' sub do_shr 
1ec9c                 | _do_shr
1ec9c     05 CA 05 F6 | 	mov	COUNT_, #5
1eca0     E8 00 A0 FD | 	call	#pushregs_
1eca4     18 F0 07 F1 | 	add	ptra, #24
1eca8     C4 E9 BE FD | 	call	#_pop
1ecac     3D A7 02 F6 | 	mov	local01, result1
1ecb0     3E 93 02 F6 | 	mov	arg01, result2
1ecb4     3F AD 02 F6 | 	mov	local04, result3
1ecb8     49 A9 02 F6 | 	mov	local02, arg01
1ecbc     56 AB 02 F6 | 	mov	local03, local04
1ecc0     AC E9 BE FD | 	call	#_pop
1ecc4     3F AF 02 F6 | 	mov	local05, result3
1ecc8     E7 7A 62 FC | 	wrlong	result1, fp
1eccc     04 CE 05 F1 | 	add	fp, #4
1ecd0     E7 7C 62 FC | 	wrlong	result2, fp
1ecd4     04 CE 05 F1 | 	add	fp, #4
1ecd8     E7 AE 62 FC | 	wrlong	local05, fp
1ecdc                 | ' 
1ecdc                 | ' t2=pop()
1ecdc                 | ' t1=pop()
1ecdc                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1ecdc     08 CE 85 F1 | 	sub	fp, #8
1ece0     1C AE 0E F2 | 	cmp	local05, #28 wz
1ece4     E7 AE 02 AB |  if_e	rdlong	local05, fp
1ece8     E7 AE 62 AC |  if_e	wrlong	local05, fp
1ecec     08 CE 05 A1 |  if_e	add	fp, #8
1ecf0     E7 3A 68 AC |  if_e	wrlong	#29, fp
1ecf4     08 CE 85 A1 |  if_e	sub	fp, #8
1ecf8                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1ecf8     1C AA 0E F2 | 	cmp	local03, #28 wz
1ecfc     1D AA 06 A6 |  if_e	mov	local03, #29
1ed00                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
1ed00     08 CE 05 F1 | 	add	fp, #8
1ed04     E7 AE 02 FB | 	rdlong	local05, fp
1ed08     08 CE 85 F1 | 	sub	fp, #8
1ed0c     1F AE 0E F2 | 	cmp	local05, #31 wz
1ed10     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1ed14     08 CE 05 51 |  if_ne	add	fp, #8
1ed18     E7 AC 02 5B |  if_ne	rdlong	local04, fp
1ed1c     08 CE 85 51 |  if_ne	sub	fp, #8
1ed20     1E AC 0E 52 |  if_ne	cmp	local04, #30 wz
1ed24     1E AA 0E 52 |  if_ne	cmp	local03, #30 wz
1ed28     E7 0C 68 AC |  if_e	wrlong	#6, fp
1ed2c     08 CE 05 A1 |  if_e	add	fp, #8
1ed30     E7 FE 69 AC |  if_e	wrlong	#255, fp
1ed34     08 CE 85 A1 |  if_e	sub	fp, #8
1ed38     E7 AE 02 5B |  if_ne	rdlong	local05, fp
1ed3c     53 AF 42 50 |  if_ne	shr	local05, local01
1ed40     E7 AE 62 5C |  if_ne	wrlong	local05, fp
1ed44     E7 92 02 F6 | 	mov	arg01, fp
1ed48     B4 E9 BE FD | 	call	#_push
1ed4c     E7 F0 03 F6 | 	mov	ptra, fp
1ed50     F2 00 A0 FD | 	call	#popregs_
1ed54                 | _do_shr_ret
1ed54     2D 00 64 FD | 	ret
1ed58                 | 
1ed58                 | ' 
1ed58                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
1ed58                 | ' 
1ed58                 | ' ''----------------------------------------------------------------------------------------------------
1ed58                 | ' ''------------------ Initialization procedures and helper procedures ---------------------------------
1ed58                 | ' ''----------------------------------------------------------------------------------------------------
1ed58                 | ' 
1ed58                 | ' ''--------------------------- Command function pointers
1ed58                 | ' 
1ed58                 | ' sub init_commands
1ed58                 | _init_commands
1ed58                 | ' 
1ed58                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
1ed58     00 80 06 F6 | 	mov	_var01, #0
1ed5c     D7 14 48 FB | 	callpa	#(@LR__2601-@LR__2600)>>2,fcache_load_ptr_
1ed60                 | LR__2600
1ed60     40 7B 02 F6 | 	mov	result1, _var01
1ed64     02 7A 66 F0 | 	shl	result1, #2
1ed68     32 95 02 F6 | 	mov	arg02, objptr
1ed6c     44 00 00 FF 
1ed70     E0 95 06 F1 | 	add	arg02, ##35296
1ed74     4A 7B 02 F1 | 	add	result1, arg02
1ed78     3D 65 62 FC | 	wrlong	objptr, result1
1ed7c     01 80 06 F1 | 	add	_var01, #1
1ed80     00 81 56 F2 | 	cmps	_var01, #256 wc
1ed84     D8 FF 9F CD |  if_b	jmp	#LR__2600
1ed88                 | LR__2601
1ed88     32 7B 02 F6 | 	mov	result1, objptr
1ed8c     14 7A 26 F4 | 	bith	result1, #20
1ed90     44 00 00 FF 
1ed94     E4 65 06 F1 | 	add	objptr, ##35300
1ed98     32 7B 62 FC | 	wrlong	result1, objptr
1ed9c     44 00 00 FF 
1eda0     E4 65 86 F1 | 	sub	objptr, ##35300
1eda4     32 7B 02 F6 | 	mov	result1, objptr
1eda8     15 7A 26 F4 | 	bith	result1, #21
1edac     44 00 00 FF 
1edb0     E8 65 06 F1 | 	add	objptr, ##35304
1edb4     32 7B 62 FC | 	wrlong	result1, objptr
1edb8     44 00 00 FF 
1edbc     E8 65 86 F1 | 	sub	objptr, ##35304
1edc0     32 7B 02 F6 | 	mov	result1, objptr
1edc4     34 7A 26 F4 | 	bith	result1, #52
1edc8     44 00 00 FF 
1edcc     EC 65 06 F1 | 	add	objptr, ##35308
1edd0     32 7B 62 FC | 	wrlong	result1, objptr
1edd4     44 00 00 FF 
1edd8     EC 65 86 F1 | 	sub	objptr, ##35308
1eddc     32 7B 02 F6 | 	mov	result1, objptr
1ede0     16 7A 26 F4 | 	bith	result1, #22
1ede4     44 00 00 FF 
1ede8     F4 65 06 F1 | 	add	objptr, ##35316
1edec     32 7B 62 FC | 	wrlong	result1, objptr
1edf0     44 00 00 FF 
1edf4     F4 65 86 F1 | 	sub	objptr, ##35316
1edf8     32 7B 02 F6 | 	mov	result1, objptr
1edfc     00 28 00 FF 
1ee00     00 7A 46 F5 | 	or	result1, ##5242880
1ee04     44 00 00 FF 
1ee08     F8 65 06 F1 | 	add	objptr, ##35320
1ee0c     32 7B 62 FC | 	wrlong	result1, objptr
1ee10     44 00 00 FF 
1ee14     F8 65 86 F1 | 	sub	objptr, ##35320
1ee18     32 7B 02 F6 | 	mov	result1, objptr
1ee1c     35 7A 26 F4 | 	bith	result1, #53
1ee20     44 00 00 FF 
1ee24     FC 65 06 F1 | 	add	objptr, ##35324
1ee28     32 7B 62 FC | 	wrlong	result1, objptr
1ee2c     44 00 00 FF 
1ee30     FC 65 86 F1 | 	sub	objptr, ##35324
1ee34     32 7B 02 F6 | 	mov	result1, objptr
1ee38     54 7A 26 F4 | 	bith	result1, #84
1ee3c     45 00 00 FF 
1ee40     00 64 06 F1 | 	add	objptr, ##35328
1ee44     32 7B 62 FC | 	wrlong	result1, objptr
1ee48     45 00 00 FF 
1ee4c     00 64 86 F1 | 	sub	objptr, ##35328
1ee50     32 7B 02 F6 | 	mov	result1, objptr
1ee54     17 7A 26 F4 | 	bith	result1, #23
1ee58     45 00 00 FF 
1ee5c     04 64 06 F1 | 	add	objptr, ##35332
1ee60     32 7B 62 FC | 	wrlong	result1, objptr
1ee64     45 00 00 FF 
1ee68     04 64 86 F1 | 	sub	objptr, ##35332
1ee6c     32 7B 02 F6 | 	mov	result1, objptr
1ee70     00 48 00 FF 
1ee74     00 7A 46 F5 | 	or	result1, ##9437184
1ee78     45 00 00 FF 
1ee7c     08 64 06 F1 | 	add	objptr, ##35336
1ee80     32 7B 62 FC | 	wrlong	result1, objptr
1ee84     45 00 00 FF 
1ee88     08 64 86 F1 | 	sub	objptr, ##35336
1ee8c     32 7B 02 F6 | 	mov	result1, objptr
1ee90     00 50 00 FF 
1ee94     00 7A 46 F5 | 	or	result1, ##10485760
1ee98     45 00 00 FF 
1ee9c     0C 64 06 F1 | 	add	objptr, ##35340
1eea0     32 7B 62 FC | 	wrlong	result1, objptr
1eea4     45 00 00 FF 
1eea8     0C 64 86 F1 | 	sub	objptr, ##35340
1eeac     32 7B 02 F6 | 	mov	result1, objptr
1eeb0     00 58 00 FF 
1eeb4     00 7A 46 F5 | 	or	result1, ##11534336
1eeb8     45 00 00 FF 
1eebc     10 64 06 F1 | 	add	objptr, ##35344
1eec0     32 7B 62 FC | 	wrlong	result1, objptr
1eec4     45 00 00 FF 
1eec8     10 64 86 F1 | 	sub	objptr, ##35344
1eecc     32 7B 02 F6 | 	mov	result1, objptr
1eed0     36 7A 26 F4 | 	bith	result1, #54
1eed4     45 00 00 FF 
1eed8     24 64 06 F1 | 	add	objptr, ##35364
1eedc     32 7B 62 FC | 	wrlong	result1, objptr
1eee0     45 00 00 FF 
1eee4     24 64 86 F1 | 	sub	objptr, ##35364
1eee8     32 7B 02 F6 | 	mov	result1, objptr
1eeec     00 68 00 FF 
1eef0     00 7A 46 F5 | 	or	result1, ##13631488
1eef4     45 00 00 FF 
1eef8     54 64 06 F1 | 	add	objptr, ##35412
1eefc     32 7B 62 FC | 	wrlong	result1, objptr
1ef00     45 00 00 FF 
1ef04     54 64 86 F1 | 	sub	objptr, ##35412
1ef08     32 7B 02 F6 | 	mov	result1, objptr
1ef0c     00 68 00 FF 
1ef10     00 7A 46 F5 | 	or	result1, ##13631488
1ef14     45 00 00 FF 
1ef18     50 64 06 F1 | 	add	objptr, ##35408
1ef1c     32 7B 62 FC | 	wrlong	result1, objptr
1ef20     45 00 00 FF 
1ef24     50 64 86 F1 | 	sub	objptr, ##35408
1ef28     32 7B 02 F6 | 	mov	result1, objptr
1ef2c     00 68 00 FF 
1ef30     00 7A 46 F5 | 	or	result1, ##13631488
1ef34     45 00 00 FF 
1ef38     58 64 06 F1 | 	add	objptr, ##35416
1ef3c     32 7B 62 FC | 	wrlong	result1, objptr
1ef40     45 00 00 FF 
1ef44     58 64 86 F1 | 	sub	objptr, ##35416
1ef48     32 7B 02 F6 | 	mov	result1, objptr
1ef4c     00 68 00 FF 
1ef50     00 7A 46 F5 | 	or	result1, ##13631488
1ef54     45 00 00 FF 
1ef58     5C 64 06 F1 | 	add	objptr, ##35420
1ef5c     32 7B 62 FC | 	wrlong	result1, objptr
1ef60     45 00 00 FF 
1ef64     5C 64 86 F1 | 	sub	objptr, ##35420
1ef68     32 7B 02 F6 | 	mov	result1, objptr
1ef6c     00 68 00 FF 
1ef70     00 7A 46 F5 | 	or	result1, ##13631488
1ef74     45 00 00 FF 
1ef78     8C 64 06 F1 | 	add	objptr, ##35468
1ef7c     32 7B 62 FC | 	wrlong	result1, objptr
1ef80     45 00 00 FF 
1ef84     8C 64 86 F1 | 	sub	objptr, ##35468
1ef88     32 7B 02 F6 | 	mov	result1, objptr
1ef8c     55 7A 26 F4 | 	bith	result1, #85
1ef90     45 00 00 FF 
1ef94     3C 64 06 F1 | 	add	objptr, ##35388
1ef98     32 7B 62 FC | 	wrlong	result1, objptr
1ef9c     45 00 00 FF 
1efa0     3C 64 86 F1 | 	sub	objptr, ##35388
1efa4     32 7B 02 F6 | 	mov	result1, objptr
1efa8     00 68 00 FF 
1efac     00 7A 46 F5 | 	or	result1, ##13631488
1efb0     45 00 00 FF 
1efb4     90 64 06 F1 | 	add	objptr, ##35472
1efb8     32 7B 62 FC | 	wrlong	result1, objptr
1efbc     45 00 00 FF 
1efc0     90 64 86 F1 | 	sub	objptr, ##35472
1efc4     32 7B 02 F6 | 	mov	result1, objptr
1efc8     00 68 00 FF 
1efcc     00 7A 46 F5 | 	or	result1, ##13631488
1efd0     45 00 00 FF 
1efd4     60 64 06 F1 | 	add	objptr, ##35424
1efd8     32 7B 62 FC | 	wrlong	result1, objptr
1efdc     45 00 00 FF 
1efe0     60 64 86 F1 | 	sub	objptr, ##35424
1efe4     32 7B 02 F6 | 	mov	result1, objptr
1efe8     00 68 00 FF 
1efec     00 7A 46 F5 | 	or	result1, ##13631488
1eff0     45 00 00 FF 
1eff4     64 64 06 F1 | 	add	objptr, ##35428
1eff8     32 7B 62 FC | 	wrlong	result1, objptr
1effc     45 00 00 FF 
1f000     64 64 86 F1 | 	sub	objptr, ##35428
1f004     32 7B 02 F6 | 	mov	result1, objptr
1f008     00 68 00 FF 
1f00c     00 7A 46 F5 | 	or	result1, ##13631488
1f010     45 00 00 FF 
1f014     68 64 06 F1 | 	add	objptr, ##35432
1f018     32 7B 62 FC | 	wrlong	result1, objptr
1f01c     45 00 00 FF 
1f020     68 64 86 F1 | 	sub	objptr, ##35432
1f024     32 7B 02 F6 | 	mov	result1, objptr
1f028     74 7A 26 F4 | 	bith	result1, #116
1f02c     45 00 00 FF 
1f030     E0 64 06 F1 | 	add	objptr, ##35552
1f034     32 7B 62 FC | 	wrlong	result1, objptr
1f038     45 00 00 FF 
1f03c     E0 64 86 F1 | 	sub	objptr, ##35552
1f040     32 7B 02 F6 | 	mov	result1, objptr
1f044     18 7A 26 F4 | 	bith	result1, #24
1f048     45 00 00 FF 
1f04c     E4 64 06 F1 | 	add	objptr, ##35556
1f050     32 7B 62 FC | 	wrlong	result1, objptr
1f054     45 00 00 FF 
1f058     E4 64 86 F1 | 	sub	objptr, ##35556
1f05c     32 7B 02 F6 | 	mov	result1, objptr
1f060     00 88 00 FF 
1f064     00 7A 46 F5 | 	or	result1, ##17825792
1f068     45 00 00 FF 
1f06c     E8 64 06 F1 | 	add	objptr, ##35560
1f070     32 7B 62 FC | 	wrlong	result1, objptr
1f074     45 00 00 FF 
1f078     E8 64 86 F1 | 	sub	objptr, ##35560
1f07c     32 7B 02 F6 | 	mov	result1, objptr
1f080     00 90 00 FF 
1f084     00 7A 46 F5 | 	or	result1, ##18874368
1f088     45 00 00 FF 
1f08c     EC 64 06 F1 | 	add	objptr, ##35564
1f090     32 7B 62 FC | 	wrlong	result1, objptr
1f094     45 00 00 FF 
1f098     EC 64 86 F1 | 	sub	objptr, ##35564
1f09c     32 7B 02 F6 | 	mov	result1, objptr
1f0a0     00 98 00 FF 
1f0a4     00 7A 46 F5 | 	or	result1, ##19922944
1f0a8     45 00 00 FF 
1f0ac     F0 64 06 F1 | 	add	objptr, ##35568
1f0b0     32 7B 62 FC | 	wrlong	result1, objptr
1f0b4     45 00 00 FF 
1f0b8     F0 64 86 F1 | 	sub	objptr, ##35568
1f0bc     32 7B 02 F6 | 	mov	result1, objptr
1f0c0     00 A0 00 FF 
1f0c4     00 7A 46 F5 | 	or	result1, ##20971520
1f0c8     45 00 00 FF 
1f0cc     F4 64 06 F1 | 	add	objptr, ##35572
1f0d0     32 7B 62 FC | 	wrlong	result1, objptr
1f0d4     45 00 00 FF 
1f0d8     F4 64 86 F1 | 	sub	objptr, ##35572
1f0dc     32 7B 02 F6 | 	mov	result1, objptr
1f0e0     00 A8 00 FF 
1f0e4     00 7A 46 F5 | 	or	result1, ##22020096
1f0e8     45 00 00 FF 
1f0ec     F8 64 06 F1 | 	add	objptr, ##35576
1f0f0     32 7B 62 FC | 	wrlong	result1, objptr
1f0f4     45 00 00 FF 
1f0f8     F8 64 86 F1 | 	sub	objptr, ##35576
1f0fc     32 7B 02 F6 | 	mov	result1, objptr
1f100     00 B0 00 FF 
1f104     00 7A 46 F5 | 	or	result1, ##23068672
1f108     45 00 00 FF 
1f10c     FC 64 06 F1 | 	add	objptr, ##35580
1f110     32 7B 62 FC | 	wrlong	result1, objptr
1f114     45 00 00 FF 
1f118     FC 64 86 F1 | 	sub	objptr, ##35580
1f11c     32 7B 02 F6 | 	mov	result1, objptr
1f120     00 B8 00 FF 
1f124     00 7A 46 F5 | 	or	result1, ##24117248
1f128     45 00 00 FF 
1f12c     00 65 06 F1 | 	add	objptr, ##35584
1f130     32 7B 62 FC | 	wrlong	result1, objptr
1f134     45 00 00 FF 
1f138     00 65 86 F1 | 	sub	objptr, ##35584
1f13c     32 7B 02 F6 | 	mov	result1, objptr
1f140     37 7A 26 F4 | 	bith	result1, #55
1f144     45 00 00 FF 
1f148     04 65 06 F1 | 	add	objptr, ##35588
1f14c     32 7B 62 FC | 	wrlong	result1, objptr
1f150     45 00 00 FF 
1f154     04 65 86 F1 | 	sub	objptr, ##35588
1f158     32 7B 02 F6 | 	mov	result1, objptr
1f15c     00 C8 00 FF 
1f160     00 7A 46 F5 | 	or	result1, ##26214400
1f164     45 00 00 FF 
1f168     08 65 06 F1 | 	add	objptr, ##35592
1f16c     32 7B 62 FC | 	wrlong	result1, objptr
1f170     45 00 00 FF 
1f174     08 65 86 F1 | 	sub	objptr, ##35592
1f178     32 7B 02 F6 | 	mov	result1, objptr
1f17c     00 D0 00 FF 
1f180     00 7A 46 F5 | 	or	result1, ##27262976
1f184     45 00 00 FF 
1f188     0C 65 06 F1 | 	add	objptr, ##35596
1f18c     32 7B 62 FC | 	wrlong	result1, objptr
1f190     45 00 00 FF 
1f194     0C 65 86 F1 | 	sub	objptr, ##35596
1f198     32 7B 02 F6 | 	mov	result1, objptr
1f19c     00 D8 00 FF 
1f1a0     00 7A 46 F5 | 	or	result1, ##28311552
1f1a4     45 00 00 FF 
1f1a8     10 65 06 F1 | 	add	objptr, ##35600
1f1ac     32 7B 62 FC | 	wrlong	result1, objptr
1f1b0     45 00 00 FF 
1f1b4     10 65 86 F1 | 	sub	objptr, ##35600
1f1b8     32 7B 02 F6 | 	mov	result1, objptr
1f1bc     56 7A 26 F4 | 	bith	result1, #86
1f1c0     45 00 00 FF 
1f1c4     14 65 06 F1 | 	add	objptr, ##35604
1f1c8     32 7B 62 FC | 	wrlong	result1, objptr
1f1cc     45 00 00 FF 
1f1d0     14 65 86 F1 | 	sub	objptr, ##35604
1f1d4     32 7B 02 F6 | 	mov	result1, objptr
1f1d8     00 E8 00 FF 
1f1dc     00 7A 46 F5 | 	or	result1, ##30408704
1f1e0     46 00 00 FF 
1f1e4     DC 65 06 F1 | 	add	objptr, ##36316
1f1e8     32 7B 62 FC | 	wrlong	result1, objptr
1f1ec     46 00 00 FF 
1f1f0     DC 65 86 F1 | 	sub	objptr, ##36316
1f1f4     32 7B 02 F6 | 	mov	result1, objptr
1f1f8     75 7A 26 F4 | 	bith	result1, #117
1f1fc     45 00 00 FF 
1f200     18 65 06 F1 | 	add	objptr, ##35608
1f204     32 7B 62 FC | 	wrlong	result1, objptr
1f208     45 00 00 FF 
1f20c     18 65 86 F1 | 	sub	objptr, ##35608
1f210     32 7B 02 F6 | 	mov	result1, objptr
1f214     94 7A 26 F4 | 	bith	result1, #148
1f218     45 00 00 FF 
1f21c     2C 65 06 F1 | 	add	objptr, ##35628
1f220     32 7B 62 FC | 	wrlong	result1, objptr
1f224     45 00 00 FF 
1f228     2C 65 86 F1 | 	sub	objptr, ##35628
1f22c     32 7B 02 F6 | 	mov	result1, objptr
1f230     19 7A 26 F4 | 	bith	result1, #25
1f234     45 00 00 FF 
1f238     1C 65 06 F1 | 	add	objptr, ##35612
1f23c     32 7B 62 FC | 	wrlong	result1, objptr
1f240     45 00 00 FF 
1f244     1C 65 86 F1 | 	sub	objptr, ##35612
1f248     32 7B 02 F6 | 	mov	result1, objptr
1f24c     00 08 01 FF 
1f250     00 7A 46 F5 | 	or	result1, ##34603008
1f254     45 00 00 FF 
1f258     38 64 06 F1 | 	add	objptr, ##35384
1f25c     32 7B 62 FC | 	wrlong	result1, objptr
1f260     45 00 00 FF 
1f264     38 64 86 F1 | 	sub	objptr, ##35384
1f268     32 7B 02 F6 | 	mov	result1, objptr
1f26c     00 10 01 FF 
1f270     00 7A 46 F5 | 	or	result1, ##35651584
1f274     45 00 00 FF 
1f278     24 65 06 F1 | 	add	objptr, ##35620
1f27c     32 7B 62 FC | 	wrlong	result1, objptr
1f280     45 00 00 FF 
1f284     24 65 86 F1 | 	sub	objptr, ##35620
1f288     32 7B 02 F6 | 	mov	result1, objptr
1f28c     00 18 01 FF 
1f290     00 7A 46 F5 | 	or	result1, ##36700160
1f294     45 00 00 FF 
1f298     28 65 06 F1 | 	add	objptr, ##35624
1f29c     32 7B 62 FC | 	wrlong	result1, objptr
1f2a0     45 00 00 FF 
1f2a4     28 65 86 F1 | 	sub	objptr, ##35624
1f2a8     32 7B 02 F6 | 	mov	result1, objptr
1f2ac     00 20 01 FF 
1f2b0     00 7A 46 F5 | 	or	result1, ##37748736
1f2b4     45 00 00 FF 
1f2b8     34 65 06 F1 | 	add	objptr, ##35636
1f2bc     32 7B 62 FC | 	wrlong	result1, objptr
1f2c0     45 00 00 FF 
1f2c4     34 65 86 F1 | 	sub	objptr, ##35636
1f2c8     32 7B 02 F6 | 	mov	result1, objptr
1f2cc     00 28 01 FF 
1f2d0     00 7A 46 F5 | 	or	result1, ##38797312
1f2d4     45 00 00 FF 
1f2d8     38 65 06 F1 | 	add	objptr, ##35640
1f2dc     32 7B 62 FC | 	wrlong	result1, objptr
1f2e0     45 00 00 FF 
1f2e4     38 65 86 F1 | 	sub	objptr, ##35640
1f2e8     32 7B 02 F6 | 	mov	result1, objptr
1f2ec     00 30 01 FF 
1f2f0     00 7A 46 F5 | 	or	result1, ##39845888
1f2f4     45 00 00 FF 
1f2f8     3C 65 06 F1 | 	add	objptr, ##35644
1f2fc     32 7B 62 FC | 	wrlong	result1, objptr
1f300     45 00 00 FF 
1f304     3C 65 86 F1 | 	sub	objptr, ##35644
1f308     32 7B 02 F6 | 	mov	result1, objptr
1f30c     00 38 01 FF 
1f310     00 7A 46 F5 | 	or	result1, ##40894464
1f314     45 00 00 FF 
1f318     40 65 06 F1 | 	add	objptr, ##35648
1f31c     32 7B 62 FC | 	wrlong	result1, objptr
1f320     45 00 00 FF 
1f324     40 65 86 F1 | 	sub	objptr, ##35648
1f328     32 7B 02 F6 | 	mov	result1, objptr
1f32c     00 40 01 FF 
1f330     00 7A 46 F5 | 	or	result1, ##41943040
1f334     45 00 00 FF 
1f338     48 65 06 F1 | 	add	objptr, ##35656
1f33c     32 7B 62 FC | 	wrlong	result1, objptr
1f340     45 00 00 FF 
1f344     48 65 86 F1 | 	sub	objptr, ##35656
1f348     32 7B 02 F6 | 	mov	result1, objptr
1f34c     00 08 01 FF 
1f350     00 7A 46 F5 | 	or	result1, ##34603008
1f354     45 00 00 FF 
1f358     4C 65 06 F1 | 	add	objptr, ##35660
1f35c     32 7B 62 FC | 	wrlong	result1, objptr
1f360     45 00 00 FF 
1f364     4C 65 86 F1 | 	sub	objptr, ##35660
1f368     32 7B 02 F6 | 	mov	result1, objptr
1f36c     00 48 01 FF 
1f370     00 7A 46 F5 | 	or	result1, ##42991616
1f374     45 00 00 FF 
1f378     4C 64 06 F1 | 	add	objptr, ##35404
1f37c     32 7B 62 FC | 	wrlong	result1, objptr
1f380     45 00 00 FF 
1f384     4C 64 86 F1 | 	sub	objptr, ##35404
1f388     32 7B 02 F6 | 	mov	result1, objptr
1f38c     00 50 01 FF 
1f390     00 7A 46 F5 | 	or	result1, ##44040192
1f394     45 00 00 FF 
1f398     7C 64 06 F1 | 	add	objptr, ##35452
1f39c     32 7B 62 FC | 	wrlong	result1, objptr
1f3a0     45 00 00 FF 
1f3a4     7C 64 86 F1 | 	sub	objptr, ##35452
1f3a8     32 7B 02 F6 | 	mov	result1, objptr
1f3ac     00 58 01 FF 
1f3b0     00 7A 46 F5 | 	or	result1, ##45088768
1f3b4     45 00 00 FF 
1f3b8     78 64 06 F1 | 	add	objptr, ##35448
1f3bc     32 7B 62 FC | 	wrlong	result1, objptr
1f3c0     45 00 00 FF 
1f3c4     78 64 86 F1 | 	sub	objptr, ##35448
1f3c8     32 7B 02 F6 | 	mov	result1, objptr
1f3cc     00 60 01 FF 
1f3d0     00 7A 46 F5 | 	or	result1, ##46137344
1f3d4     45 00 00 FF 
1f3d8     1C 64 06 F1 | 	add	objptr, ##35356
1f3dc     32 7B 62 FC | 	wrlong	result1, objptr
1f3e0     45 00 00 FF 
1f3e4     1C 64 86 F1 | 	sub	objptr, ##35356
1f3e8     32 7B 02 F6 | 	mov	result1, objptr
1f3ec     00 68 01 FF 
1f3f0     00 7A 46 F5 | 	or	result1, ##47185920
1f3f4     45 00 00 FF 
1f3f8     20 64 06 F1 | 	add	objptr, ##35360
1f3fc     32 7B 62 FC | 	wrlong	result1, objptr
1f400     45 00 00 FF 
1f404     20 64 86 F1 | 	sub	objptr, ##35360
1f408     32 7B 02 F6 | 	mov	result1, objptr
1f40c     00 70 01 FF 
1f410     00 7A 46 F5 | 	or	result1, ##48234496
1f414     45 00 00 FF 
1f418     88 64 06 F1 | 	add	objptr, ##35464
1f41c     32 7B 62 FC | 	wrlong	result1, objptr
1f420     45 00 00 FF 
1f424     88 64 86 F1 | 	sub	objptr, ##35464
1f428     32 7B 02 F6 | 	mov	result1, objptr
1f42c     00 78 01 FF 
1f430     00 7A 46 F5 | 	or	result1, ##49283072
1f434     45 00 00 FF 
1f438     30 65 06 F1 | 	add	objptr, ##35632
1f43c     32 7B 62 FC | 	wrlong	result1, objptr
1f440     45 00 00 FF 
1f444     30 65 86 F1 | 	sub	objptr, ##35632
1f448     32 7B 02 F6 | 	mov	result1, objptr
1f44c     38 7A 26 F4 | 	bith	result1, #56
1f450     45 00 00 FF 
1f454     44 65 06 F1 | 	add	objptr, ##35652
1f458     32 7B 62 FC | 	wrlong	result1, objptr
1f45c     45 00 00 FF 
1f460     44 65 86 F1 | 	sub	objptr, ##35652
1f464     32 7B 02 F6 | 	mov	result1, objptr
1f468     00 88 01 FF 
1f46c     00 7A 46 F5 | 	or	result1, ##51380224
1f470     45 00 00 FF 
1f474     50 65 06 F1 | 	add	objptr, ##35664
1f478     32 7B 62 FC | 	wrlong	result1, objptr
1f47c     45 00 00 FF 
1f480     50 65 86 F1 | 	sub	objptr, ##35664
1f484     32 7B 02 F6 | 	mov	result1, objptr
1f488     00 90 01 FF 
1f48c     00 7A 46 F5 | 	or	result1, ##52428800
1f490     45 00 00 FF 
1f494     54 65 06 F1 | 	add	objptr, ##35668
1f498     32 7B 62 FC | 	wrlong	result1, objptr
1f49c     45 00 00 FF 
1f4a0     54 65 86 F1 | 	sub	objptr, ##35668
1f4a4     32 7B 02 F6 | 	mov	result1, objptr
1f4a8     00 98 01 FF 
1f4ac     00 7A 46 F5 | 	or	result1, ##53477376
1f4b0     45 00 00 FF 
1f4b4     58 65 06 F1 | 	add	objptr, ##35672
1f4b8     32 7B 62 FC | 	wrlong	result1, objptr
1f4bc     45 00 00 FF 
1f4c0     58 65 86 F1 | 	sub	objptr, ##35672
1f4c4     32 7B 02 F6 | 	mov	result1, objptr
1f4c8     00 A0 01 FF 
1f4cc     00 7A 46 F5 | 	or	result1, ##54525952
1f4d0     45 00 00 FF 
1f4d4     5C 65 06 F1 | 	add	objptr, ##35676
1f4d8     32 7B 62 FC | 	wrlong	result1, objptr
1f4dc     45 00 00 FF 
1f4e0     5C 65 86 F1 | 	sub	objptr, ##35676
1f4e4     32 7B 02 F6 | 	mov	result1, objptr
1f4e8     00 A8 01 FF 
1f4ec     00 7A 46 F5 | 	or	result1, ##55574528
1f4f0     45 00 00 FF 
1f4f4     60 65 06 F1 | 	add	objptr, ##35680
1f4f8     32 7B 62 FC | 	wrlong	result1, objptr
1f4fc     45 00 00 FF 
1f500     60 65 86 F1 | 	sub	objptr, ##35680
1f504     32 7B 02 F6 | 	mov	result1, objptr
1f508     00 B0 01 FF 
1f50c     00 7A 46 F5 | 	or	result1, ##56623104
1f510     45 00 00 FF 
1f514     64 65 06 F1 | 	add	objptr, ##35684
1f518     32 7B 62 FC | 	wrlong	result1, objptr
1f51c     45 00 00 FF 
1f520     64 65 86 F1 | 	sub	objptr, ##35684
1f524     32 7B 02 F6 | 	mov	result1, objptr
1f528     94 7A 26 F4 | 	bith	result1, #148
1f52c     45 00 00 FF 
1f530     2C 65 06 F1 | 	add	objptr, ##35628
1f534     32 7B 62 FC | 	wrlong	result1, objptr
1f538     45 00 00 FF 
1f53c     2C 65 86 F1 | 	sub	objptr, ##35628
1f540     32 7B 02 F6 | 	mov	result1, objptr
1f544     00 B8 01 FF 
1f548     00 7A 46 F5 | 	or	result1, ##57671680
1f54c     45 00 00 FF 
1f550     6C 65 06 F1 | 	add	objptr, ##35692
1f554     32 7B 62 FC | 	wrlong	result1, objptr
1f558     45 00 00 FF 
1f55c     6C 65 86 F1 | 	sub	objptr, ##35692
1f560     32 7B 02 F6 | 	mov	result1, objptr
1f564     57 7A 26 F4 | 	bith	result1, #87
1f568     45 00 00 FF 
1f56c     68 65 06 F1 | 	add	objptr, ##35688
1f570     32 7B 62 FC | 	wrlong	result1, objptr
1f574     45 00 00 FF 
1f578     68 65 86 F1 | 	sub	objptr, ##35688
1f57c     32 7B 02 F6 | 	mov	result1, objptr
1f580     00 C8 01 FF 
1f584     00 7A 46 F5 | 	or	result1, ##59768832
1f588     45 00 00 FF 
1f58c     80 65 06 F1 | 	add	objptr, ##35712
1f590     32 7B 62 FC | 	wrlong	result1, objptr
1f594     45 00 00 FF 
1f598     80 65 86 F1 | 	sub	objptr, ##35712
1f59c     32 7B 02 F6 | 	mov	result1, objptr
1f5a0     00 D0 01 FF 
1f5a4     00 7A 46 F5 | 	or	result1, ##60817408
1f5a8     45 00 00 FF 
1f5ac     84 65 06 F1 | 	add	objptr, ##35716
1f5b0     32 7B 62 FC | 	wrlong	result1, objptr
1f5b4     45 00 00 FF 
1f5b8     84 65 86 F1 | 	sub	objptr, ##35716
1f5bc     32 7B 02 F6 | 	mov	result1, objptr
1f5c0     00 D8 01 FF 
1f5c4     00 7A 46 F5 | 	or	result1, ##61865984
1f5c8     45 00 00 FF 
1f5cc     70 65 06 F1 | 	add	objptr, ##35696
1f5d0     32 7B 62 FC | 	wrlong	result1, objptr
1f5d4     45 00 00 FF 
1f5d8     70 65 86 F1 | 	sub	objptr, ##35696
1f5dc     32 7B 02 F6 | 	mov	result1, objptr
1f5e0     76 7A 26 F4 | 	bith	result1, #118
1f5e4     45 00 00 FF 
1f5e8     74 65 06 F1 | 	add	objptr, ##35700
1f5ec     32 7B 62 FC | 	wrlong	result1, objptr
1f5f0     45 00 00 FF 
1f5f4     74 65 86 F1 | 	sub	objptr, ##35700
1f5f8     32 7B 02 F6 | 	mov	result1, objptr
1f5fc     00 E8 01 FF 
1f600     00 7A 46 F5 | 	or	result1, ##63963136
1f604     45 00 00 FF 
1f608     78 65 06 F1 | 	add	objptr, ##35704
1f60c     32 7B 62 FC | 	wrlong	result1, objptr
1f610     45 00 00 FF 
1f614     78 65 86 F1 | 	sub	objptr, ##35704
1f618     32 7B 02 F6 | 	mov	result1, objptr
1f61c     95 7A 26 F4 | 	bith	result1, #149
1f620     45 00 00 FF 
1f624     7C 65 06 F1 | 	add	objptr, ##35708
1f628     32 7B 62 FC | 	wrlong	result1, objptr
1f62c     45 00 00 FF 
1f630     7C 65 86 F1 | 	sub	objptr, ##35708
1f634     32 7B 02 F6 | 	mov	result1, objptr
1f638     B4 7A 26 F4 | 	bith	result1, #180
1f63c     45 00 00 FF 
1f640     8C 65 06 F1 | 	add	objptr, ##35724
1f644     32 7B 62 FC | 	wrlong	result1, objptr
1f648     45 00 00 FF 
1f64c     8C 65 86 F1 | 	sub	objptr, ##35724
1f650     32 7B 02 F6 | 	mov	result1, objptr
1f654     1A 7A 26 F4 | 	bith	result1, #26
1f658     45 00 00 FF 
1f65c     88 65 06 F1 | 	add	objptr, ##35720
1f660     32 7B 62 FC | 	wrlong	result1, objptr
1f664     45 00 00 FF 
1f668     88 65 86 F1 | 	sub	objptr, ##35720
1f66c     32 7B 02 F6 | 	mov	result1, objptr
1f670     00 08 02 FF 
1f674     00 7A 46 F5 | 	or	result1, ##68157440
1f678     45 00 00 FF 
1f67c     98 65 06 F1 | 	add	objptr, ##35736
1f680     32 7B 62 FC | 	wrlong	result1, objptr
1f684     45 00 00 FF 
1f688     98 65 86 F1 | 	sub	objptr, ##35736
1f68c     32 7B 02 F6 | 	mov	result1, objptr
1f690     00 10 02 FF 
1f694     00 7A 46 F5 | 	or	result1, ##69206016
1f698     45 00 00 FF 
1f69c     94 65 06 F1 | 	add	objptr, ##35732
1f6a0     32 7B 62 FC | 	wrlong	result1, objptr
1f6a4     45 00 00 FF 
1f6a8     94 65 86 F1 | 	sub	objptr, ##35732
1f6ac     32 7B 02 F6 | 	mov	result1, objptr
1f6b0     00 18 02 FF 
1f6b4     00 7A 46 F5 | 	or	result1, ##70254592
1f6b8     45 00 00 FF 
1f6bc     90 65 06 F1 | 	add	objptr, ##35728
1f6c0     32 7B 62 FC | 	wrlong	result1, objptr
1f6c4     45 00 00 FF 
1f6c8     90 65 86 F1 | 	sub	objptr, ##35728
1f6cc     32 7B 02 F6 | 	mov	result1, objptr
1f6d0     00 20 02 FF 
1f6d4     00 7A 46 F5 | 	or	result1, ##71303168
1f6d8     45 00 00 FF 
1f6dc     9C 65 06 F1 | 	add	objptr, ##35740
1f6e0     32 7B 62 FC | 	wrlong	result1, objptr
1f6e4     45 00 00 FF 
1f6e8     9C 65 86 F1 | 	sub	objptr, ##35740
1f6ec     32 7B 02 F6 | 	mov	result1, objptr
1f6f0     00 28 02 FF 
1f6f4     00 7A 46 F5 | 	or	result1, ##72351744
1f6f8     45 00 00 FF 
1f6fc     A0 65 06 F1 | 	add	objptr, ##35744
1f700     32 7B 62 FC | 	wrlong	result1, objptr
1f704     45 00 00 FF 
1f708     A0 65 86 F1 | 	sub	objptr, ##35744
1f70c     32 7B 02 F6 | 	mov	result1, objptr
1f710     00 30 02 FF 
1f714     00 7A 46 F5 | 	or	result1, ##73400320
1f718     45 00 00 FF 
1f71c     34 64 06 F1 | 	add	objptr, ##35380
1f720     32 7B 62 FC | 	wrlong	result1, objptr
1f724     45 00 00 FF 
1f728     34 64 86 F1 | 	sub	objptr, ##35380
1f72c     32 7B 02 F6 | 	mov	result1, objptr
1f730     00 38 02 FF 
1f734     00 7A 46 F5 | 	or	result1, ##74448896
1f738     45 00 00 FF 
1f73c     B8 65 06 F1 | 	add	objptr, ##35768
1f740     32 7B 62 FC | 	wrlong	result1, objptr
1f744     45 00 00 FF 
1f748     B8 65 86 F1 | 	sub	objptr, ##35768
1f74c     32 7B 02 F6 | 	mov	result1, objptr
1f750     00 40 02 FF 
1f754     00 7A 46 F5 | 	or	result1, ##75497472
1f758     45 00 00 FF 
1f75c     C8 65 06 F1 | 	add	objptr, ##35784
1f760     32 7B 62 FC | 	wrlong	result1, objptr
1f764     45 00 00 FF 
1f768     C8 65 86 F1 | 	sub	objptr, ##35784
1f76c     32 7B 02 F6 | 	mov	result1, objptr
1f770     00 48 02 FF 
1f774     00 7A 46 F5 | 	or	result1, ##76546048
1f778     45 00 00 FF 
1f77c     CC 65 06 F1 | 	add	objptr, ##35788
1f780     32 7B 62 FC | 	wrlong	result1, objptr
1f784     45 00 00 FF 
1f788     CC 65 86 F1 | 	sub	objptr, ##35788
1f78c     32 7B 02 F6 | 	mov	result1, objptr
1f790     00 50 02 FF 
1f794     00 7A 46 F5 | 	or	result1, ##77594624
1f798     45 00 00 FF 
1f79c     C4 65 06 F1 | 	add	objptr, ##35780
1f7a0     32 7B 62 FC | 	wrlong	result1, objptr
1f7a4     45 00 00 FF 
1f7a8     C4 65 86 F1 | 	sub	objptr, ##35780
1f7ac     32 7B 02 F6 | 	mov	result1, objptr
1f7b0     00 58 02 FF 
1f7b4     00 7A 46 F5 | 	or	result1, ##78643200
1f7b8     45 00 00 FF 
1f7bc     BC 65 06 F1 | 	add	objptr, ##35772
1f7c0     32 7B 62 FC | 	wrlong	result1, objptr
1f7c4     45 00 00 FF 
1f7c8     BC 65 86 F1 | 	sub	objptr, ##35772
1f7cc     32 7B 02 F6 | 	mov	result1, objptr
1f7d0     00 60 02 FF 
1f7d4     00 7A 46 F5 | 	or	result1, ##79691776
1f7d8     45 00 00 FF 
1f7dc     C0 65 06 F1 | 	add	objptr, ##35776
1f7e0     32 7B 62 FC | 	wrlong	result1, objptr
1f7e4     45 00 00 FF 
1f7e8     C0 65 86 F1 | 	sub	objptr, ##35776
1f7ec     32 7B 02 F6 | 	mov	result1, objptr
1f7f0     00 68 02 FF 
1f7f4     00 7A 46 F5 | 	or	result1, ##80740352
1f7f8     45 00 00 FF 
1f7fc     D0 65 06 F1 | 	add	objptr, ##35792
1f800     32 7B 62 FC | 	wrlong	result1, objptr
1f804     45 00 00 FF 
1f808     D0 65 86 F1 | 	sub	objptr, ##35792
1f80c     32 7B 02 F6 | 	mov	result1, objptr
1f810     00 70 02 FF 
1f814     00 7A 46 F5 | 	or	result1, ##81788928
1f818     45 00 00 FF 
1f81c     D4 65 06 F1 | 	add	objptr, ##35796
1f820     32 7B 62 FC | 	wrlong	result1, objptr
1f824     45 00 00 FF 
1f828     D4 65 86 F1 | 	sub	objptr, ##35796
1f82c     32 7B 02 F6 | 	mov	result1, objptr
1f830     00 78 02 FF 
1f834     00 7A 46 F5 | 	or	result1, ##82837504
1f838     45 00 00 FF 
1f83c     D8 65 06 F1 | 	add	objptr, ##35800
1f840     32 7B 62 FC | 	wrlong	result1, objptr
1f844     45 00 00 FF 
1f848     D8 65 86 F1 | 	sub	objptr, ##35800
1f84c     32 7B 02 F6 | 	mov	result1, objptr
1f850     00 80 02 FF 
1f854     00 7A 46 F5 | 	or	result1, ##83886080
1f858     45 00 00 FF 
1f85c     DC 65 06 F1 | 	add	objptr, ##35804
1f860     32 7B 62 FC | 	wrlong	result1, objptr
1f864     45 00 00 FF 
1f868     DC 65 86 F1 | 	sub	objptr, ##35804
1f86c     32 7B 02 F6 | 	mov	result1, objptr
1f870     00 88 02 FF 
1f874     00 7A 46 F5 | 	or	result1, ##84934656
1f878     45 00 00 FF 
1f87c     E0 65 06 F1 | 	add	objptr, ##35808
1f880     32 7B 62 FC | 	wrlong	result1, objptr
1f884     45 00 00 FF 
1f888     E0 65 86 F1 | 	sub	objptr, ##35808
1f88c     32 7B 02 F6 | 	mov	result1, objptr
1f890     00 90 02 FF 
1f894     00 7A 46 F5 | 	or	result1, ##85983232
1f898     45 00 00 FF 
1f89c     E4 65 06 F1 | 	add	objptr, ##35812
1f8a0     32 7B 62 FC | 	wrlong	result1, objptr
1f8a4     45 00 00 FF 
1f8a8     E4 65 86 F1 | 	sub	objptr, ##35812
1f8ac     32 7B 02 F6 | 	mov	result1, objptr
1f8b0     00 98 02 FF 
1f8b4     00 7A 46 F5 | 	or	result1, ##87031808
1f8b8     45 00 00 FF 
1f8bc     E8 65 06 F1 | 	add	objptr, ##35816
1f8c0     32 7B 62 FC | 	wrlong	result1, objptr
1f8c4     45 00 00 FF 
1f8c8     E8 65 86 F1 | 	sub	objptr, ##35816
1f8cc     32 7B 02 F6 | 	mov	result1, objptr
1f8d0     00 A0 02 FF 
1f8d4     00 7A 46 F5 | 	or	result1, ##88080384
1f8d8     45 00 00 FF 
1f8dc     EC 65 06 F1 | 	add	objptr, ##35820
1f8e0     32 7B 62 FC | 	wrlong	result1, objptr
1f8e4     45 00 00 FF 
1f8e8     EC 65 86 F1 | 	sub	objptr, ##35820
1f8ec     32 7B 02 F6 | 	mov	result1, objptr
1f8f0     00 A8 02 FF 
1f8f4     00 7A 46 F5 | 	or	result1, ##89128960
1f8f8     45 00 00 FF 
1f8fc     F8 65 06 F1 | 	add	objptr, ##35832
1f900     32 7B 62 FC | 	wrlong	result1, objptr
1f904     45 00 00 FF 
1f908     F8 65 86 F1 | 	sub	objptr, ##35832
1f90c     32 7B 02 F6 | 	mov	result1, objptr
1f910     00 B0 02 FF 
1f914     00 7A 46 F5 | 	or	result1, ##90177536
1f918     45 00 00 FF 
1f91c     F0 65 06 F1 | 	add	objptr, ##35824
1f920     32 7B 62 FC | 	wrlong	result1, objptr
1f924     45 00 00 FF 
1f928     F0 65 86 F1 | 	sub	objptr, ##35824
1f92c     32 7B 02 F6 | 	mov	result1, objptr
1f930     00 B8 02 FF 
1f934     00 7A 46 F5 | 	or	result1, ##91226112
1f938     45 00 00 FF 
1f93c     F4 65 06 F1 | 	add	objptr, ##35828
1f940     32 7B 62 FC | 	wrlong	result1, objptr
1f944     45 00 00 FF 
1f948     F4 65 86 F1 | 	sub	objptr, ##35828
1f94c     32 7B 02 F6 | 	mov	result1, objptr
1f950     00 C0 02 FF 
1f954     00 7A 46 F5 | 	or	result1, ##92274688
1f958     45 00 00 FF 
1f95c     FC 65 06 F1 | 	add	objptr, ##35836
1f960     32 7B 62 FC | 	wrlong	result1, objptr
1f964     45 00 00 FF 
1f968     FC 65 86 F1 | 	sub	objptr, ##35836
1f96c     32 7B 02 F6 | 	mov	result1, objptr
1f970     00 C8 02 FF 
1f974     00 7A 46 F5 | 	or	result1, ##93323264
1f978     45 00 00 FF 
1f97c     A4 65 06 F1 | 	add	objptr, ##35748
1f980     32 7B 62 FC | 	wrlong	result1, objptr
1f984     45 00 00 FF 
1f988     A4 65 86 F1 | 	sub	objptr, ##35748
1f98c     32 7B 02 F6 | 	mov	result1, objptr
1f990     00 D0 02 FF 
1f994     00 7A 46 F5 | 	or	result1, ##94371840
1f998     45 00 00 FF 
1f99c     AC 65 06 F1 | 	add	objptr, ##35756
1f9a0     32 7B 62 FC | 	wrlong	result1, objptr
1f9a4     45 00 00 FF 
1f9a8     AC 65 86 F1 | 	sub	objptr, ##35756
1f9ac     32 7B 02 F6 | 	mov	result1, objptr
1f9b0     00 D8 02 FF 
1f9b4     00 7A 46 F5 | 	or	result1, ##95420416
1f9b8     45 00 00 FF 
1f9bc     B0 65 06 F1 | 	add	objptr, ##35760
1f9c0     32 7B 62 FC | 	wrlong	result1, objptr
1f9c4     45 00 00 FF 
1f9c8     B0 65 86 F1 | 	sub	objptr, ##35760
1f9cc     32 7B 02 F6 | 	mov	result1, objptr
1f9d0     00 E0 02 FF 
1f9d4     00 7A 46 F5 | 	or	result1, ##96468992
1f9d8     46 00 00 FF 
1f9dc     00 64 06 F1 | 	add	objptr, ##35840
1f9e0     32 7B 62 FC | 	wrlong	result1, objptr
1f9e4     46 00 00 FF 
1f9e8     00 64 86 F1 | 	sub	objptr, ##35840
1f9ec     32 7B 02 F6 | 	mov	result1, objptr
1f9f0     00 E8 02 FF 
1f9f4     00 7A 46 F5 | 	or	result1, ##97517568
1f9f8     46 00 00 FF 
1f9fc     04 64 06 F1 | 	add	objptr, ##35844
1fa00     32 7B 62 FC | 	wrlong	result1, objptr
1fa04     46 00 00 FF 
1fa08     04 64 86 F1 | 	sub	objptr, ##35844
1fa0c     32 7B 02 F6 | 	mov	result1, objptr
1fa10     00 F0 02 FF 
1fa14     00 7A 46 F5 | 	or	result1, ##98566144
1fa18     46 00 00 FF 
1fa1c     08 64 06 F1 | 	add	objptr, ##35848
1fa20     32 7B 62 FC | 	wrlong	result1, objptr
1fa24     46 00 00 FF 
1fa28     08 64 86 F1 | 	sub	objptr, ##35848
1fa2c     32 7B 02 F6 | 	mov	result1, objptr
1fa30     00 F8 02 FF 
1fa34     00 7A 46 F5 | 	or	result1, ##99614720
1fa38     45 00 00 FF 
1fa3c     B4 65 06 F1 | 	add	objptr, ##35764
1fa40     32 7B 62 FC | 	wrlong	result1, objptr
1fa44     45 00 00 FF 
1fa48     B4 65 86 F1 | 	sub	objptr, ##35764
1fa4c     32 7B 02 F6 | 	mov	result1, objptr
1fa50     39 7A 26 F4 | 	bith	result1, #57
1fa54     46 00 00 FF 
1fa58     18 64 06 F1 | 	add	objptr, ##35864
1fa5c     32 7B 62 FC | 	wrlong	result1, objptr
1fa60     46 00 00 FF 
1fa64     18 64 86 F1 | 	sub	objptr, ##35864
1fa68     32 7B 02 F6 | 	mov	result1, objptr
1fa6c     00 08 03 FF 
1fa70     00 7A 46 F5 | 	or	result1, ##101711872
1fa74     46 00 00 FF 
1fa78     20 64 06 F1 | 	add	objptr, ##35872
1fa7c     32 7B 62 FC | 	wrlong	result1, objptr
1fa80     46 00 00 FF 
1fa84     20 64 86 F1 | 	sub	objptr, ##35872
1fa88     32 7B 02 F6 | 	mov	result1, objptr
1fa8c     00 10 03 FF 
1fa90     00 7A 46 F5 | 	or	result1, ##102760448
1fa94     46 00 00 FF 
1fa98     14 64 06 F1 | 	add	objptr, ##35860
1fa9c     32 7B 62 FC | 	wrlong	result1, objptr
1faa0     46 00 00 FF 
1faa4     14 64 86 F1 | 	sub	objptr, ##35860
1faa8     32 7B 02 F6 | 	mov	result1, objptr
1faac     00 18 03 FF 
1fab0     00 7A 46 F5 | 	or	result1, ##103809024
1fab4     46 00 00 FF 
1fab8     10 64 06 F1 | 	add	objptr, ##35856
1fabc     32 7B 62 FC | 	wrlong	result1, objptr
1fac0     46 00 00 FF 
1fac4     10 64 86 F1 | 	sub	objptr, ##35856
1fac8     32 7B 02 F6 | 	mov	result1, objptr
1facc     00 20 03 FF 
1fad0     00 7A 46 F5 | 	or	result1, ##104857600
1fad4     46 00 00 FF 
1fad8     0C 64 06 F1 | 	add	objptr, ##35852
1fadc     32 7B 62 FC | 	wrlong	result1, objptr
1fae0     46 00 00 FF 
1fae4     0C 64 86 F1 | 	sub	objptr, ##35852
1fae8     32 7B 02 F6 | 	mov	result1, objptr
1faec     00 28 03 FF 
1faf0     00 7A 46 F5 | 	or	result1, ##105906176
1faf4     46 00 00 FF 
1faf8     1C 64 06 F1 | 	add	objptr, ##35868
1fafc     32 7B 62 FC | 	wrlong	result1, objptr
1fb00     46 00 00 FF 
1fb04     1C 64 86 F1 | 	sub	objptr, ##35868
1fb08     32 7B 02 F6 | 	mov	result1, objptr
1fb0c     00 30 03 FF 
1fb10     00 7A 46 F5 | 	or	result1, ##106954752
1fb14     46 00 00 FF 
1fb18     24 64 06 F1 | 	add	objptr, ##35876
1fb1c     32 7B 62 FC | 	wrlong	result1, objptr
1fb20     46 00 00 FF 
1fb24     24 64 86 F1 | 	sub	objptr, ##35876
1fb28     32 7B 02 F6 | 	mov	result1, objptr
1fb2c     00 38 03 FF 
1fb30     00 7A 46 F5 | 	or	result1, ##108003328
1fb34     46 00 00 FF 
1fb38     28 64 06 F1 | 	add	objptr, ##35880
1fb3c     32 7B 62 FC | 	wrlong	result1, objptr
1fb40     46 00 00 FF 
1fb44     28 64 86 F1 | 	sub	objptr, ##35880
1fb48     32 7B 02 F6 | 	mov	result1, objptr
1fb4c     00 40 03 FF 
1fb50     00 7A 46 F5 | 	or	result1, ##109051904
1fb54     46 00 00 FF 
1fb58     2C 64 06 F1 | 	add	objptr, ##35884
1fb5c     32 7B 62 FC | 	wrlong	result1, objptr
1fb60     46 00 00 FF 
1fb64     2C 64 86 F1 | 	sub	objptr, ##35884
1fb68     32 7B 02 F6 | 	mov	result1, objptr
1fb6c     00 48 03 FF 
1fb70     00 7A 46 F5 | 	or	result1, ##110100480
1fb74     46 00 00 FF 
1fb78     34 64 06 F1 | 	add	objptr, ##35892
1fb7c     32 7B 62 FC | 	wrlong	result1, objptr
1fb80     46 00 00 FF 
1fb84     34 64 86 F1 | 	sub	objptr, ##35892
1fb88     32 7B 02 F6 | 	mov	result1, objptr
1fb8c     00 50 03 FF 
1fb90     00 7A 46 F5 | 	or	result1, ##111149056
1fb94     46 00 00 FF 
1fb98     38 64 06 F1 | 	add	objptr, ##35896
1fb9c     32 7B 62 FC | 	wrlong	result1, objptr
1fba0     46 00 00 FF 
1fba4     38 64 86 F1 | 	sub	objptr, ##35896
1fba8     32 7B 02 F6 | 	mov	result1, objptr
1fbac     00 58 03 FF 
1fbb0     00 7A 46 F5 | 	or	result1, ##112197632
1fbb4     46 00 00 FF 
1fbb8     3C 64 06 F1 | 	add	objptr, ##35900
1fbbc     32 7B 62 FC | 	wrlong	result1, objptr
1fbc0     46 00 00 FF 
1fbc4     3C 64 86 F1 | 	sub	objptr, ##35900
1fbc8     32 7B 02 F6 | 	mov	result1, objptr
1fbcc     00 60 03 FF 
1fbd0     00 7A 46 F5 | 	or	result1, ##113246208
1fbd4     46 00 00 FF 
1fbd8     40 64 06 F1 | 	add	objptr, ##35904
1fbdc     32 7B 62 FC | 	wrlong	result1, objptr
1fbe0     46 00 00 FF 
1fbe4     40 64 86 F1 | 	sub	objptr, ##35904
1fbe8     32 7B 02 F6 | 	mov	result1, objptr
1fbec     00 68 03 FF 
1fbf0     00 7A 46 F5 | 	or	result1, ##114294784
1fbf4     46 00 00 FF 
1fbf8     44 64 06 F1 | 	add	objptr, ##35908
1fbfc     32 7B 62 FC | 	wrlong	result1, objptr
1fc00     46 00 00 FF 
1fc04     44 64 86 F1 | 	sub	objptr, ##35908
1fc08     32 7B 02 F6 | 	mov	result1, objptr
1fc0c     00 70 03 FF 
1fc10     00 7A 46 F5 | 	or	result1, ##115343360
1fc14     46 00 00 FF 
1fc18     48 64 06 F1 | 	add	objptr, ##35912
1fc1c     32 7B 62 FC | 	wrlong	result1, objptr
1fc20     46 00 00 FF 
1fc24     48 64 86 F1 | 	sub	objptr, ##35912
1fc28     32 7B 02 F6 | 	mov	result1, objptr
1fc2c     00 08 01 FF 
1fc30     00 7A 46 F5 | 	or	result1, ##34603008
1fc34     46 00 00 FF 
1fc38     4C 64 06 F1 | 	add	objptr, ##35916
1fc3c     32 7B 62 FC | 	wrlong	result1, objptr
1fc40     46 00 00 FF 
1fc44     4C 64 86 F1 | 	sub	objptr, ##35916
1fc48     32 7B 02 F6 | 	mov	result1, objptr
1fc4c     00 78 03 FF 
1fc50     00 7A 46 F5 | 	or	result1, ##116391936
1fc54     46 00 00 FF 
1fc58     50 64 06 F1 | 	add	objptr, ##35920
1fc5c     32 7B 62 FC | 	wrlong	result1, objptr
1fc60     46 00 00 FF 
1fc64     50 64 86 F1 | 	sub	objptr, ##35920
1fc68     32 7B 02 F6 | 	mov	result1, objptr
1fc6c     58 7A 26 F4 | 	bith	result1, #88
1fc70     46 00 00 FF 
1fc74     30 64 06 F1 | 	add	objptr, ##35888
1fc78     32 7B 62 FC | 	wrlong	result1, objptr
1fc7c     46 00 00 FF 
1fc80     30 64 86 F1 | 	sub	objptr, ##35888
1fc84     32 7B 02 F6 | 	mov	result1, objptr
1fc88     00 88 03 FF 
1fc8c     00 7A 46 F5 | 	or	result1, ##118489088
1fc90     45 00 00 FF 
1fc94     28 64 06 F1 | 	add	objptr, ##35368
1fc98     32 7B 62 FC | 	wrlong	result1, objptr
1fc9c     45 00 00 FF 
1fca0     28 64 86 F1 | 	sub	objptr, ##35368
1fca4     32 7B 02 F6 | 	mov	result1, objptr
1fca8     00 90 03 FF 
1fcac     00 7A 46 F5 | 	or	result1, ##119537664
1fcb0     46 00 00 FF 
1fcb4     54 64 06 F1 | 	add	objptr, ##35924
1fcb8     32 7B 62 FC | 	wrlong	result1, objptr
1fcbc     46 00 00 FF 
1fcc0     54 64 86 F1 | 	sub	objptr, ##35924
1fcc4     32 7B 02 F6 | 	mov	result1, objptr
1fcc8     00 98 03 FF 
1fccc     00 7A 46 F5 | 	or	result1, ##120586240
1fcd0     46 00 00 FF 
1fcd4     58 64 06 F1 | 	add	objptr, ##35928
1fcd8     32 7B 62 FC | 	wrlong	result1, objptr
1fcdc     46 00 00 FF 
1fce0     58 64 86 F1 | 	sub	objptr, ##35928
1fce4     32 7B 02 F6 | 	mov	result1, objptr
1fce8     00 A0 03 FF 
1fcec     00 7A 46 F5 | 	or	result1, ##121634816
1fcf0     46 00 00 FF 
1fcf4     6C 64 06 F1 | 	add	objptr, ##35948
1fcf8     32 7B 62 FC | 	wrlong	result1, objptr
1fcfc     46 00 00 FF 
1fd00     6C 64 86 F1 | 	sub	objptr, ##35948
1fd04     32 7B 02 F6 | 	mov	result1, objptr
1fd08     00 A8 03 FF 
1fd0c     00 7A 46 F5 | 	or	result1, ##122683392
1fd10     46 00 00 FF 
1fd14     68 64 06 F1 | 	add	objptr, ##35944
1fd18     32 7B 62 FC | 	wrlong	result1, objptr
1fd1c     46 00 00 FF 
1fd20     68 64 86 F1 | 	sub	objptr, ##35944
1fd24     32 7B 02 F6 | 	mov	result1, objptr
1fd28     00 B0 03 FF 
1fd2c     00 7A 46 F5 | 	or	result1, ##123731968
1fd30     46 00 00 FF 
1fd34     60 64 06 F1 | 	add	objptr, ##35936
1fd38     32 7B 62 FC | 	wrlong	result1, objptr
1fd3c     46 00 00 FF 
1fd40     60 64 86 F1 | 	sub	objptr, ##35936
1fd44     32 7B 02 F6 | 	mov	result1, objptr
1fd48     00 B8 03 FF 
1fd4c     00 7A 46 F5 | 	or	result1, ##124780544
1fd50     46 00 00 FF 
1fd54     5C 64 06 F1 | 	add	objptr, ##35932
1fd58     32 7B 62 FC | 	wrlong	result1, objptr
1fd5c     46 00 00 FF 
1fd60     5C 64 86 F1 | 	sub	objptr, ##35932
1fd64     32 7B 02 F6 | 	mov	result1, objptr
1fd68     77 7A 26 F4 | 	bith	result1, #119
1fd6c     46 00 00 FF 
1fd70     7C 64 06 F1 | 	add	objptr, ##35964
1fd74     32 7B 62 FC | 	wrlong	result1, objptr
1fd78     46 00 00 FF 
1fd7c     7C 64 86 F1 | 	sub	objptr, ##35964
1fd80     32 7B 02 F6 | 	mov	result1, objptr
1fd84     00 C8 03 FF 
1fd88     00 7A 46 F5 | 	or	result1, ##126877696
1fd8c     46 00 00 FF 
1fd90     70 64 06 F1 | 	add	objptr, ##35952
1fd94     32 7B 62 FC | 	wrlong	result1, objptr
1fd98     46 00 00 FF 
1fd9c     70 64 86 F1 | 	sub	objptr, ##35952
1fda0     32 7B 02 F6 | 	mov	result1, objptr
1fda4     00 D0 03 FF 
1fda8     00 7A 46 F5 | 	or	result1, ##127926272
1fdac     46 00 00 FF 
1fdb0     74 64 06 F1 | 	add	objptr, ##35956
1fdb4     32 7B 62 FC | 	wrlong	result1, objptr
1fdb8     46 00 00 FF 
1fdbc     74 64 86 F1 | 	sub	objptr, ##35956
1fdc0     32 7B 02 F6 | 	mov	result1, objptr
1fdc4     00 D8 03 FF 
1fdc8     00 7A 46 F5 | 	or	result1, ##128974848
1fdcc     46 00 00 FF 
1fdd0     78 64 06 F1 | 	add	objptr, ##35960
1fdd4     32 7B 62 FC | 	wrlong	result1, objptr
1fdd8     46 00 00 FF 
1fddc     78 64 86 F1 | 	sub	objptr, ##35960
1fde0     32 7B 02 F6 | 	mov	result1, objptr
1fde4     96 7A 26 F4 | 	bith	result1, #150
1fde8     46 00 00 FF 
1fdec     80 64 06 F1 | 	add	objptr, ##35968
1fdf0     32 7B 62 FC | 	wrlong	result1, objptr
1fdf4     46 00 00 FF 
1fdf8     80 64 86 F1 | 	sub	objptr, ##35968
1fdfc     32 7B 02 F6 | 	mov	result1, objptr
1fe00     00 E8 03 FF 
1fe04     00 7A 46 F5 | 	or	result1, ##131072000
1fe08     46 00 00 FF 
1fe0c     84 64 06 F1 | 	add	objptr, ##35972
1fe10     32 7B 62 FC | 	wrlong	result1, objptr
1fe14     46 00 00 FF 
1fe18     84 64 86 F1 | 	sub	objptr, ##35972
1fe1c     32 7B 02 F6 | 	mov	result1, objptr
1fe20     B5 7A 26 F4 | 	bith	result1, #181
1fe24     46 00 00 FF 
1fe28     88 64 06 F1 | 	add	objptr, ##35976
1fe2c     32 7B 62 FC | 	wrlong	result1, objptr
1fe30     46 00 00 FF 
1fe34     88 64 86 F1 | 	sub	objptr, ##35976
1fe38     32 7B 02 F6 | 	mov	result1, objptr
1fe3c     D4 7A 26 F4 | 	bith	result1, #212
1fe40     46 00 00 FF 
1fe44     8C 64 06 F1 | 	add	objptr, ##35980
1fe48     32 7B 62 FC | 	wrlong	result1, objptr
1fe4c     46 00 00 FF 
1fe50     8C 64 86 F1 | 	sub	objptr, ##35980
1fe54     32 7B 02 F6 | 	mov	result1, objptr
1fe58     1B 7A 26 F4 | 	bith	result1, #27
1fe5c     46 00 00 FF 
1fe60     90 64 06 F1 | 	add	objptr, ##35984
1fe64     32 7B 62 FC | 	wrlong	result1, objptr
1fe68     46 00 00 FF 
1fe6c     90 64 86 F1 | 	sub	objptr, ##35984
1fe70     32 7B 02 F6 | 	mov	result1, objptr
1fe74     00 08 04 FF 
1fe78     00 7A 46 F5 | 	or	result1, ##135266304
1fe7c     46 00 00 FF 
1fe80     94 64 06 F1 | 	add	objptr, ##35988
1fe84     32 7B 62 FC | 	wrlong	result1, objptr
1fe88     46 00 00 FF 
1fe8c     94 64 86 F1 | 	sub	objptr, ##35988
1fe90     32 7B 02 F6 | 	mov	result1, objptr
1fe94     00 10 04 FF 
1fe98     00 7A 46 F5 | 	or	result1, ##136314880
1fe9c     46 00 00 FF 
1fea0     9C 64 06 F1 | 	add	objptr, ##35996
1fea4     32 7B 62 FC | 	wrlong	result1, objptr
1fea8     46 00 00 FF 
1feac     9C 64 86 F1 | 	sub	objptr, ##35996
1feb0     32 7B 02 F6 | 	mov	result1, objptr
1feb4     00 18 04 FF 
1feb8     00 7A 46 F5 | 	or	result1, ##137363456
1febc     46 00 00 FF 
1fec0     A0 64 06 F1 | 	add	objptr, ##36000
1fec4     32 7B 62 FC | 	wrlong	result1, objptr
1fec8     46 00 00 FF 
1fecc     A0 64 86 F1 | 	sub	objptr, ##36000
1fed0     32 7B 02 F6 | 	mov	result1, objptr
1fed4     00 20 04 FF 
1fed8     00 7A 46 F5 | 	or	result1, ##138412032
1fedc     46 00 00 FF 
1fee0     A4 64 06 F1 | 	add	objptr, ##36004
1fee4     32 7B 62 FC | 	wrlong	result1, objptr
1fee8     46 00 00 FF 
1feec     A4 64 86 F1 | 	sub	objptr, ##36004
1fef0     32 7B 02 F6 | 	mov	result1, objptr
1fef4     00 28 04 FF 
1fef8     00 7A 46 F5 | 	or	result1, ##139460608
1fefc     46 00 00 FF 
1ff00     98 64 06 F1 | 	add	objptr, ##35992
1ff04     32 7B 62 FC | 	wrlong	result1, objptr
1ff08     46 00 00 FF 
1ff0c     98 64 86 F1 | 	sub	objptr, ##35992
1ff10     32 7B 02 F6 | 	mov	result1, objptr
1ff14     00 30 04 FF 
1ff18     00 7A 46 F5 | 	or	result1, ##140509184
1ff1c     46 00 00 FF 
1ff20     A8 64 06 F1 | 	add	objptr, ##36008
1ff24     32 7B 62 FC | 	wrlong	result1, objptr
1ff28     46 00 00 FF 
1ff2c     A8 64 86 F1 | 	sub	objptr, ##36008
1ff30     32 7B 02 F6 | 	mov	result1, objptr
1ff34     00 38 04 FF 
1ff38     00 7A 46 F5 | 	or	result1, ##141557760
1ff3c     46 00 00 FF 
1ff40     DC 64 06 F1 | 	add	objptr, ##36060
1ff44     32 7B 62 FC | 	wrlong	result1, objptr
1ff48     46 00 00 FF 
1ff4c     DC 64 86 F1 | 	sub	objptr, ##36060
1ff50     32 7B 02 F6 | 	mov	result1, objptr
1ff54     00 40 04 FF 
1ff58     00 7A 46 F5 | 	or	result1, ##142606336
1ff5c     46 00 00 FF 
1ff60     D4 64 06 F1 | 	add	objptr, ##36052
1ff64     32 7B 62 FC | 	wrlong	result1, objptr
1ff68     46 00 00 FF 
1ff6c     D4 64 86 F1 | 	sub	objptr, ##36052
1ff70     32 7B 02 F6 | 	mov	result1, objptr
1ff74     00 48 04 FF 
1ff78     00 7A 46 F5 | 	or	result1, ##143654912
1ff7c     46 00 00 FF 
1ff80     AC 64 06 F1 | 	add	objptr, ##36012
1ff84     32 7B 62 FC | 	wrlong	result1, objptr
1ff88     46 00 00 FF 
1ff8c     AC 64 86 F1 | 	sub	objptr, ##36012
1ff90     32 7B 02 F6 | 	mov	result1, objptr
1ff94     00 50 04 FF 
1ff98     00 7A 46 F5 | 	or	result1, ##144703488
1ff9c     46 00 00 FF 
1ffa0     B0 64 06 F1 | 	add	objptr, ##36016
1ffa4     32 7B 62 FC | 	wrlong	result1, objptr
1ffa8     46 00 00 FF 
1ffac     B0 64 86 F1 | 	sub	objptr, ##36016
1ffb0     32 7B 02 F6 | 	mov	result1, objptr
1ffb4     00 58 04 FF 
1ffb8     00 7A 46 F5 | 	or	result1, ##145752064
1ffbc     46 00 00 FF 
1ffc0     CC 64 06 F1 | 	add	objptr, ##36044
1ffc4     32 7B 62 FC | 	wrlong	result1, objptr
1ffc8     46 00 00 FF 
1ffcc     CC 64 86 F1 | 	sub	objptr, ##36044
1ffd0     32 7B 02 F6 | 	mov	result1, objptr
1ffd4     00 60 04 FF 
1ffd8     00 7A 46 F5 | 	or	result1, ##146800640
1ffdc     46 00 00 FF 
1ffe0     D0 64 06 F1 | 	add	objptr, ##36048
1ffe4     32 7B 62 FC | 	wrlong	result1, objptr
1ffe8     46 00 00 FF 
1ffec     D0 64 86 F1 | 	sub	objptr, ##36048
1fff0     32 7B 02 F6 | 	mov	result1, objptr
1fff4     00 68 04 FF 
1fff8     00 7A 46 F5 | 	or	result1, ##147849216
1fffc     46 00 00 FF 
20000     EC 64 06 F1 | 	add	objptr, ##36076
20004     32 7B 62 FC | 	wrlong	result1, objptr
20008     46 00 00 FF 
2000c     EC 64 86 F1 | 	sub	objptr, ##36076
20010     32 7B 02 F6 | 	mov	result1, objptr
20014     00 70 04 FF 
20018     00 7A 46 F5 | 	or	result1, ##148897792
2001c     46 00 00 FF 
20020     E8 64 06 F1 | 	add	objptr, ##36072
20024     32 7B 62 FC | 	wrlong	result1, objptr
20028     46 00 00 FF 
2002c     E8 64 86 F1 | 	sub	objptr, ##36072
20030     32 7B 02 F6 | 	mov	result1, objptr
20034     00 78 04 FF 
20038     00 7A 46 F5 | 	or	result1, ##149946368
2003c     46 00 00 FF 
20040     F8 64 06 F1 | 	add	objptr, ##36088
20044     32 7B 62 FC | 	wrlong	result1, objptr
20048     46 00 00 FF 
2004c     F8 64 86 F1 | 	sub	objptr, ##36088
20050     32 7B 02 F6 | 	mov	result1, objptr
20054     00 80 04 FF 
20058     00 7A 46 F5 | 	or	result1, ##150994944
2005c     46 00 00 FF 
20060     C4 64 06 F1 | 	add	objptr, ##36036
20064     32 7B 62 FC | 	wrlong	result1, objptr
20068     46 00 00 FF 
2006c     C4 64 86 F1 | 	sub	objptr, ##36036
20070     32 7B 02 F6 | 	mov	result1, objptr
20074     00 88 04 FF 
20078     00 7A 46 F5 | 	or	result1, ##152043520
2007c     46 00 00 FF 
20080     F4 64 06 F1 | 	add	objptr, ##36084
20084     32 7B 62 FC | 	wrlong	result1, objptr
20088     46 00 00 FF 
2008c     F4 64 86 F1 | 	sub	objptr, ##36084
20090     32 7B 02 F6 | 	mov	result1, objptr
20094     00 90 04 FF 
20098     00 7A 46 F5 | 	or	result1, ##153092096
2009c     46 00 00 FF 
200a0     E4 64 06 F1 | 	add	objptr, ##36068
200a4     32 7B 62 FC | 	wrlong	result1, objptr
200a8     46 00 00 FF 
200ac     E4 64 86 F1 | 	sub	objptr, ##36068
200b0     32 7B 02 F6 | 	mov	result1, objptr
200b4     00 98 04 FF 
200b8     00 7A 46 F5 | 	or	result1, ##154140672
200bc     45 00 00 FF 
200c0     94 64 06 F1 | 	add	objptr, ##35476
200c4     32 7B 62 FC | 	wrlong	result1, objptr
200c8     45 00 00 FF 
200cc     94 64 86 F1 | 	sub	objptr, ##35476
200d0     32 7B 02 F6 | 	mov	result1, objptr
200d4     00 A0 04 FF 
200d8     00 7A 46 F5 | 	or	result1, ##155189248
200dc     46 00 00 FF 
200e0     B4 64 06 F1 | 	add	objptr, ##36020
200e4     32 7B 62 FC | 	wrlong	result1, objptr
200e8     46 00 00 FF 
200ec     B4 64 86 F1 | 	sub	objptr, ##36020
200f0     32 7B 02 F6 | 	mov	result1, objptr
200f4     00 08 01 FF 
200f8     00 7A 46 F5 | 	or	result1, ##34603008
200fc     46 00 00 FF 
20100     BC 64 06 F1 | 	add	objptr, ##36028
20104     32 7B 62 FC | 	wrlong	result1, objptr
20108     46 00 00 FF 
2010c     BC 64 86 F1 | 	sub	objptr, ##36028
20110     32 7B 02 F6 | 	mov	result1, objptr
20114     00 A8 04 FF 
20118     00 7A 46 F5 | 	or	result1, ##156237824
2011c     46 00 00 FF 
20120     B8 64 06 F1 | 	add	objptr, ##36024
20124     32 7B 62 FC | 	wrlong	result1, objptr
20128     46 00 00 FF 
2012c     B8 64 86 F1 | 	sub	objptr, ##36024
20130     32 7B 02 F6 | 	mov	result1, objptr
20134     00 B0 04 FF 
20138     00 7A 46 F5 | 	or	result1, ##157286400
2013c     46 00 00 FF 
20140     FC 64 06 F1 | 	add	objptr, ##36092
20144     32 7B 62 FC | 	wrlong	result1, objptr
20148     46 00 00 FF 
2014c     FC 64 86 F1 | 	sub	objptr, ##36092
20150     32 7B 02 F6 | 	mov	result1, objptr
20154     00 B8 04 FF 
20158     00 7A 46 F5 | 	or	result1, ##158334976
2015c     46 00 00 FF 
20160     00 65 06 F1 | 	add	objptr, ##36096
20164     32 7B 62 FC | 	wrlong	result1, objptr
20168     46 00 00 FF 
2016c     00 65 86 F1 | 	sub	objptr, ##36096
20170     32 7B 02 F6 | 	mov	result1, objptr
20174     00 C0 04 FF 
20178     00 7A 46 F5 | 	or	result1, ##159383552
2017c     46 00 00 FF 
20180     04 65 06 F1 | 	add	objptr, ##36100
20184     32 7B 62 FC | 	wrlong	result1, objptr
20188     46 00 00 FF 
2018c     04 65 86 F1 | 	sub	objptr, ##36100
20190     32 7B 02 F6 | 	mov	result1, objptr
20194     00 C8 04 FF 
20198     00 7A 46 F5 | 	or	result1, ##160432128
2019c     46 00 00 FF 
201a0     08 65 06 F1 | 	add	objptr, ##36104
201a4     32 7B 62 FC | 	wrlong	result1, objptr
201a8     46 00 00 FF 
201ac     08 65 86 F1 | 	sub	objptr, ##36104
201b0     32 7B 02 F6 | 	mov	result1, objptr
201b4     00 D0 04 FF 
201b8     00 7A 46 F5 | 	or	result1, ##161480704
201bc     46 00 00 FF 
201c0     10 65 06 F1 | 	add	objptr, ##36112
201c4     32 7B 62 FC | 	wrlong	result1, objptr
201c8     46 00 00 FF 
201cc     10 65 86 F1 | 	sub	objptr, ##36112
201d0     32 7B 02 F6 | 	mov	result1, objptr
201d4     00 D8 04 FF 
201d8     00 7A 46 F5 | 	or	result1, ##162529280
201dc     46 00 00 FF 
201e0     14 65 06 F1 | 	add	objptr, ##36116
201e4     32 7B 62 FC | 	wrlong	result1, objptr
201e8     46 00 00 FF 
201ec     14 65 86 F1 | 	sub	objptr, ##36116
201f0     32 7B 02 F6 | 	mov	result1, objptr
201f4     00 E0 04 FF 
201f8     00 7A 46 F5 | 	or	result1, ##163577856
201fc     46 00 00 FF 
20200     18 65 06 F1 | 	add	objptr, ##36120
20204     32 7B 62 FC | 	wrlong	result1, objptr
20208     46 00 00 FF 
2020c     18 65 86 F1 | 	sub	objptr, ##36120
20210     32 7B 02 F6 | 	mov	result1, objptr
20214     00 E8 04 FF 
20218     00 7A 46 F5 | 	or	result1, ##164626432
2021c     46 00 00 FF 
20220     38 65 06 F1 | 	add	objptr, ##36152
20224     32 7B 62 FC | 	wrlong	result1, objptr
20228     46 00 00 FF 
2022c     38 65 86 F1 | 	sub	objptr, ##36152
20230     32 7B 02 F6 | 	mov	result1, objptr
20234     00 F0 04 FF 
20238     00 7A 46 F5 | 	or	result1, ##165675008
2023c     46 00 00 FF 
20240     34 65 06 F1 | 	add	objptr, ##36148
20244     32 7B 62 FC | 	wrlong	result1, objptr
20248     46 00 00 FF 
2024c     34 65 86 F1 | 	sub	objptr, ##36148
20250     32 7B 02 F6 | 	mov	result1, objptr
20254     00 F8 04 FF 
20258     00 7A 46 F5 | 	or	result1, ##166723584
2025c     46 00 00 FF 
20260     F0 64 06 F1 | 	add	objptr, ##36080
20264     32 7B 62 FC | 	wrlong	result1, objptr
20268     46 00 00 FF 
2026c     F0 64 86 F1 | 	sub	objptr, ##36080
20270     32 7B 02 F6 | 	mov	result1, objptr
20274     00 00 05 FF 
20278     00 7A 46 F5 | 	or	result1, ##167772160
2027c     46 00 00 FF 
20280     E0 64 06 F1 | 	add	objptr, ##36064
20284     32 7B 62 FC | 	wrlong	result1, objptr
20288     46 00 00 FF 
2028c     E0 64 86 F1 | 	sub	objptr, ##36064
20290     32 7B 02 F6 | 	mov	result1, objptr
20294     00 08 05 FF 
20298     00 7A 46 F5 | 	or	result1, ##168820736
2029c     46 00 00 FF 
202a0     1C 65 06 F1 | 	add	objptr, ##36124
202a4     32 7B 62 FC | 	wrlong	result1, objptr
202a8     46 00 00 FF 
202ac     1C 65 86 F1 | 	sub	objptr, ##36124
202b0     32 7B 02 F6 | 	mov	result1, objptr
202b4     00 10 05 FF 
202b8     00 7A 46 F5 | 	or	result1, ##169869312
202bc     46 00 00 FF 
202c0     20 65 06 F1 | 	add	objptr, ##36128
202c4     32 7B 62 FC | 	wrlong	result1, objptr
202c8     46 00 00 FF 
202cc     20 65 86 F1 | 	sub	objptr, ##36128
202d0     32 7B 02 F6 | 	mov	result1, objptr
202d4     00 18 05 FF 
202d8     00 7A 46 F5 | 	or	result1, ##170917888
202dc     46 00 00 FF 
202e0     24 65 06 F1 | 	add	objptr, ##36132
202e4     32 7B 62 FC | 	wrlong	result1, objptr
202e8     46 00 00 FF 
202ec     24 65 86 F1 | 	sub	objptr, ##36132
202f0     32 7B 02 F6 | 	mov	result1, objptr
202f4     00 20 05 FF 
202f8     00 7A 46 F5 | 	or	result1, ##171966464
202fc     46 00 00 FF 
20300     28 65 06 F1 | 	add	objptr, ##36136
20304     32 7B 62 FC | 	wrlong	result1, objptr
20308     46 00 00 FF 
2030c     28 65 86 F1 | 	sub	objptr, ##36136
20310     32 7B 02 F6 | 	mov	result1, objptr
20314     00 28 05 FF 
20318     00 7A 46 F5 | 	or	result1, ##173015040
2031c     46 00 00 FF 
20320     2C 65 06 F1 | 	add	objptr, ##36140
20324     32 7B 62 FC | 	wrlong	result1, objptr
20328     46 00 00 FF 
2032c     2C 65 86 F1 | 	sub	objptr, ##36140
20330     32 7B 02 F6 | 	mov	result1, objptr
20334     00 30 05 FF 
20338     00 7A 46 F5 | 	or	result1, ##174063616
2033c     46 00 00 FF 
20340     44 65 06 F1 | 	add	objptr, ##36164
20344     32 7B 62 FC | 	wrlong	result1, objptr
20348     46 00 00 FF 
2034c     44 65 86 F1 | 	sub	objptr, ##36164
20350     32 7B 02 F6 | 	mov	result1, objptr
20354     00 38 05 FF 
20358     00 7A 46 F5 | 	or	result1, ##175112192
2035c     46 00 00 FF 
20360     30 65 06 F1 | 	add	objptr, ##36144
20364     32 7B 62 FC | 	wrlong	result1, objptr
20368     46 00 00 FF 
2036c     30 65 86 F1 | 	sub	objptr, ##36144
20370     32 7B 02 F6 | 	mov	result1, objptr
20374     00 40 05 FF 
20378     00 7A 46 F5 | 	or	result1, ##176160768
2037c     46 00 00 FF 
20380     3C 65 06 F1 | 	add	objptr, ##36156
20384     32 7B 62 FC | 	wrlong	result1, objptr
20388     46 00 00 FF 
2038c     3C 65 86 F1 | 	sub	objptr, ##36156
20390     32 7B 02 F6 | 	mov	result1, objptr
20394     00 48 05 FF 
20398     00 7A 46 F5 | 	or	result1, ##177209344
2039c     46 00 00 FF 
203a0     40 65 06 F1 | 	add	objptr, ##36160
203a4     32 7B 62 FC | 	wrlong	result1, objptr
203a8     46 00 00 FF 
203ac     40 65 86 F1 | 	sub	objptr, ##36160
203b0     32 7B 02 F6 | 	mov	result1, objptr
203b4     00 50 05 FF 
203b8     00 7A 46 F5 | 	or	result1, ##178257920
203bc     46 00 00 FF 
203c0     48 65 06 F1 | 	add	objptr, ##36168
203c4     32 7B 62 FC | 	wrlong	result1, objptr
203c8     46 00 00 FF 
203cc     48 65 86 F1 | 	sub	objptr, ##36168
203d0     32 7B 02 F6 | 	mov	result1, objptr
203d4     00 58 05 FF 
203d8     00 7A 46 F5 | 	or	result1, ##179306496
203dc     46 00 00 FF 
203e0     4C 65 06 F1 | 	add	objptr, ##36172
203e4     32 7B 62 FC | 	wrlong	result1, objptr
203e8     46 00 00 FF 
203ec     4C 65 86 F1 | 	sub	objptr, ##36172
203f0     32 7B 02 F6 | 	mov	result1, objptr
203f4     00 60 05 FF 
203f8     00 7A 46 F5 | 	or	result1, ##180355072
203fc     46 00 00 FF 
20400     64 64 06 F1 | 	add	objptr, ##35940
20404     32 7B 62 FC | 	wrlong	result1, objptr
20408     46 00 00 FF 
2040c     64 64 86 F1 | 	sub	objptr, ##35940
20410                 | _init_commands_ret
20410     2D 00 64 FD | 	ret
20414                 | 
20414                 | ' 
20414                 | ' ''-------------------------------- Audio subsystem init  -------------------------------------
20414                 | ' 
20414                 | ' sub init_audio
20414                 | _init_audio
20414     07 CA 05 F6 | 	mov	COUNT_, #7
20418     E8 00 A0 FD | 	call	#pushregs_
2041c     00 C0 1F FF 
20420     00 A6 06 F6 | 	mov	local01, ##1065353216
20424                 | ' 
20424                 | ' for i=0 to 1023 : psdpoke       2*i,round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
20424     00 A8 06 F6 | 	mov	local02, #0
20428                 | LR__2610
20428     54 AB 02 F6 | 	mov	local03, local02
2042c     01 AA 66 F0 | 	shl	local03, #1
20430     58 7F 23 FF 
20434     00 AC 06 F6 | 	mov	local04, ##1191096320
20438     54 93 52 F6 | 	abs	arg01, local02 wc
2043c     1F AE C6 C9 |  if_b	decod	local05, #31
20440     00 AE 06 36 |  if_ae	mov	local05, #0
20444     8C 6B B0 FD | 	call	#__system___float_fromuns
20448     57 7B 62 F5 | 	xor	result1, local05
2044c     3D 93 02 F6 | 	mov	arg01, result1
20450     87 24 20 FF 
20454     DB 95 06 F6 | 	mov	arg02, ##1078530011
20458     7C 6F B0 FD | 	call	#__system___float_mul
2045c     3D 93 02 F6 | 	mov	arg01, result1
20460     00 00 22 FF 
20464     00 94 06 F6 | 	mov	arg02, ##1140850688
20468     70 71 B0 FD | 	call	#__system___float_div
2046c     3D 93 02 F6 | 	mov	arg01, result1
20470     D4 78 B0 FD | 	call	#__system____builtin_sinf
20474     3D 95 02 F6 | 	mov	arg02, result1
20478     56 93 02 F6 | 	mov	arg01, local04
2047c     58 6F B0 FD | 	call	#__system___float_mul
20480     3D 93 02 F6 | 	mov	arg01, result1
20484     01 94 06 F6 | 	mov	arg02, #1
20488     14 74 B0 FD | 	call	#__system___float_tointeger
2048c     3D 95 02 F6 | 	mov	arg02, result1
20490     55 93 02 F6 | 	mov	arg01, local03
20494     84 0D B0 FD | 	call	#_psdpoke
20498     01 A8 06 F1 | 	add	local02, #1
2049c     02 00 00 FF 
204a0     00 A8 56 F2 | 	cmps	local02, ##1024 wc
204a4     80 FF 9F CD |  if_b	jmp	#LR__2610
204a8                 | ' for i=0 to 511  : psdpoke  2048+2*i, -32512+127*i: psdpoke 2048+2*(512+i),32512-127*i : next i   		' 1 : triangle 
204a8     00 A8 06 F6 | 	mov	local02, #0
204ac                 | LR__2611
204ac     54 95 02 F6 | 	mov	arg02, local02
204b0     01 94 66 F0 | 	shl	arg02, #1
204b4     0B 92 C6 F9 | 	decod	arg01, #11
204b8     4A 93 02 F1 | 	add	arg01, arg02
204bc     54 AD 02 F6 | 	mov	local04, local02
204c0     07 AC 66 F0 | 	shl	local04, #7
204c4     54 AD 82 F1 | 	sub	local04, local02
204c8     C0 FF 7F FF 
204cc     00 95 06 F6 | 	mov	arg02, ##-32512
204d0     56 95 02 F1 | 	add	arg02, local04
204d4     44 0D B0 FD | 	call	#_psdpoke
204d8     09 AC C6 F9 | 	decod	local04, #9
204dc     54 AD 02 F1 | 	add	local04, local02
204e0     01 AC 66 F0 | 	shl	local04, #1
204e4     0B 92 C6 F9 | 	decod	arg01, #11
204e8     56 93 02 F1 | 	add	arg01, local04
204ec     54 AF 02 F6 | 	mov	local05, local02
204f0     07 AE 66 F0 | 	shl	local05, #7
204f4     54 AF 82 F1 | 	sub	local05, local02
204f8     3F 00 00 FF 
204fc     00 95 06 F6 | 	mov	arg02, ##32512
20500     57 95 82 F1 | 	sub	arg02, local05
20504     14 0D B0 FD | 	call	#_psdpoke
20508     01 A8 06 F1 | 	add	local02, #1
2050c     01 00 00 FF 
20510     00 A8 56 F2 | 	cmps	local02, ##512 wc
20514     94 FF 9F CD |  if_b	jmp	#LR__2611
20518                 | ' for i=0 to 1023 : psdpoke  4096+2*i, -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
20518     00 A8 06 F6 | 	mov	local02, #0
2051c                 | LR__2612
2051c     54 AF 02 F6 | 	mov	local05, local02
20520     01 AE 66 F0 | 	shl	local05, #1
20524     0C 92 C6 F9 | 	decod	arg01, #12
20528     57 93 02 F1 | 	add	arg01, local05
2052c     54 AF 02 F6 | 	mov	local05, local02
20530     06 AE 66 F0 | 	shl	local05, #6
20534     54 AF 82 F1 | 	sub	local05, local02
20538     C1 FF 7F FF 
2053c     00 94 06 F6 | 	mov	arg02, ##-32256
20540     57 95 02 F1 | 	add	arg02, local05
20544     D4 0C B0 FD | 	call	#_psdpoke
20548     01 A8 06 F1 | 	add	local02, #1
2054c     02 00 00 FF 
20550     00 A8 56 F2 | 	cmps	local02, ##1024 wc
20554     C4 FF 9F CD |  if_b	jmp	#LR__2612
20558                 | ' for i=0 to 127  : psdpoke  6144+2*i, -32600 : next i : for i=128 to 1023 :  psdpoke 6144+2*i, 32600 : next i 	' 3 pulse 12.5%
20558     00 A8 06 F6 | 	mov	local02, #0
2055c                 | LR__2613
2055c     54 95 02 F6 | 	mov	arg02, local02
20560     01 94 66 F0 | 	shl	arg02, #1
20564     0C 00 00 FF 
20568     00 92 06 F6 | 	mov	arg01, ##6144
2056c     4A 93 02 F1 | 	add	arg01, arg02
20570     C0 FF 7F FF 
20574     A8 94 06 F6 | 	mov	arg02, ##-32600
20578     A0 0C B0 FD | 	call	#_psdpoke
2057c     01 A8 06 F1 | 	add	local02, #1
20580     80 A8 56 F2 | 	cmps	local02, #128 wc
20584     D4 FF 9F CD |  if_b	jmp	#LR__2613
20588     80 A8 06 F6 | 	mov	local02, #128
2058c                 | LR__2614
2058c     54 95 02 F6 | 	mov	arg02, local02
20590     01 94 66 F0 | 	shl	arg02, #1
20594     0C 00 00 FF 
20598     00 92 06 F6 | 	mov	arg01, ##6144
2059c     4A 93 02 F1 | 	add	arg01, arg02
205a0     3F 00 00 FF 
205a4     58 95 06 F6 | 	mov	arg02, ##32600
205a8     70 0C B0 FD | 	call	#_psdpoke
205ac     01 A8 06 F1 | 	add	local02, #1
205b0     02 00 00 FF 
205b4     00 A8 16 F2 | 	cmp	local02, ##1024 wc
205b8     D0 FF 9F CD |  if_b	jmp	#LR__2614
205bc                 | ' for i=0 to 511  : psdpoke  8192+2*i, -32600 : next i : for i=512 to 1023 :  psdpoke 8192+2*i, 32600 : next i 	' 4 square
205bc     00 A8 06 F6 | 	mov	local02, #0
205c0                 | LR__2615
205c0     54 95 02 F6 | 	mov	arg02, local02
205c4     01 94 66 F0 | 	shl	arg02, #1
205c8     0D 92 C6 F9 | 	decod	arg01, #13
205cc     4A 93 02 F1 | 	add	arg01, arg02
205d0     C0 FF 7F FF 
205d4     A8 94 06 F6 | 	mov	arg02, ##-32600
205d8     40 0C B0 FD | 	call	#_psdpoke
205dc     01 A8 06 F1 | 	add	local02, #1
205e0     01 00 00 FF 
205e4     00 A8 56 F2 | 	cmps	local02, ##512 wc
205e8     D4 FF 9F CD |  if_b	jmp	#LR__2615
205ec     09 A8 C6 F9 | 	decod	local02, #9
205f0                 | LR__2616
205f0     54 95 02 F6 | 	mov	arg02, local02
205f4     01 94 66 F0 | 	shl	arg02, #1
205f8     0D 92 C6 F9 | 	decod	arg01, #13
205fc     4A 93 02 F1 | 	add	arg01, arg02
20600     3F 00 00 FF 
20604     58 95 06 F6 | 	mov	arg02, ##32600
20608     10 0C B0 FD | 	call	#_psdpoke
2060c     01 A8 06 F1 | 	add	local02, #1
20610     02 00 00 FF 
20614     00 A8 16 F2 | 	cmp	local02, ##1024 wc
20618     D4 FF 9F CD |  if_b	jmp	#LR__2616
2061c                 | ' for i=0 to 255  : psdpoke 10240+2*i, -32600 : next i : for i=256 to 1023 : psdpoke 10240+2*i, 32600 : next i 	' 5 pulse 25%
2061c     00 A8 06 F6 | 	mov	local02, #0
20620                 | LR__2617
20620     54 95 02 F6 | 	mov	arg02, local02
20624     01 94 66 F0 | 	shl	arg02, #1
20628     14 00 00 FF 
2062c     00 92 06 F6 | 	mov	arg01, ##10240
20630     4A 93 02 F1 | 	add	arg01, arg02
20634     C0 FF 7F FF 
20638     A8 94 06 F6 | 	mov	arg02, ##-32600
2063c     DC 0B B0 FD | 	call	#_psdpoke
20640     01 A8 06 F1 | 	add	local02, #1
20644     00 A9 56 F2 | 	cmps	local02, #256 wc
20648     D4 FF 9F CD |  if_b	jmp	#LR__2617
2064c     00 A9 06 F6 | 	mov	local02, #256
20650                 | LR__2618
20650     54 95 02 F6 | 	mov	arg02, local02
20654     01 94 66 F0 | 	shl	arg02, #1
20658     14 00 00 FF 
2065c     00 92 06 F6 | 	mov	arg01, ##10240
20660     4A 93 02 F1 | 	add	arg01, arg02
20664     3F 00 00 FF 
20668     58 95 06 F6 | 	mov	arg02, ##32600
2066c     AC 0B B0 FD | 	call	#_psdpoke
20670     01 A8 06 F1 | 	add	local02, #1
20674     02 00 00 FF 
20678     00 A8 16 F2 | 	cmp	local02, ##1024 wc
2067c     D0 FF 9F CD |  if_b	jmp	#LR__2618
20680                 | ' for i=12288 to 61436 step 4 : pslpoke i,0 : next i 
20680     18 00 00 FF 
20684     00 A8 06 F6 | 	mov	local02, ##12288
20688                 | LR__2619
20688     54 93 02 F6 | 	mov	arg01, local02
2068c     00 94 06 F6 | 	mov	arg02, #0
20690     40 0B B0 FD | 	call	#_pslpoke
20694     04 A8 06 F1 | 	add	local02, #4
20698     77 00 00 FF 
2069c     FD A9 56 F2 | 	cmps	local02, ##61437 wc
206a0     E4 FF 9F CD |  if_b	jmp	#LR__2619
206a4                 | ' for i=0 to 1023 : psdpoke 61440+2*i, dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
206a4     00 A8 06 F6 | 	mov	local02, #0
206a8                 | LR__2620
206a8     54 95 02 F6 | 	mov	arg02, local02
206ac     01 94 66 F0 | 	shl	arg02, #1
206b0     78 00 00 FF 
206b4     00 AA 06 F6 | 	mov	local03, ##61440
206b8     4A AB 02 F1 | 	add	local03, arg02
206bc     35 93 02 F6 | 	mov	arg01, ptr__dat__
206c0     12 00 00 FF 
206c4     CA 92 06 F1 | 	add	arg01, ##9418
206c8     54 95 02 F6 | 	mov	arg02, local02
206cc     01 94 66 F0 | 	shl	arg02, #1
206d0     4A 93 02 F1 | 	add	arg01, arg02
206d4     49 95 E2 FA | 	rdword	arg02, arg01
206d8     55 93 02 F6 | 	mov	arg01, local03
206dc     3C 0B B0 FD | 	call	#_psdpoke
206e0     01 A8 06 F1 | 	add	local02, #1
206e4     02 00 00 FF 
206e8     00 A8 56 F2 | 	cmps	local02, ##1024 wc
206ec     B8 FF 9F CD |  if_b	jmp	#LR__2620
206f0                 | ' for i=0 to 1023 : psdpoke 63488+2*i, dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
206f0     00 A8 06 F6 | 	mov	local02, #0
206f4                 | LR__2621
206f4     54 95 02 F6 | 	mov	arg02, local02
206f8     01 94 66 F0 | 	shl	arg02, #1
206fc     7C 00 00 FF 
20700     00 AA 06 F6 | 	mov	local03, ##63488
20704     4A AB 02 F1 | 	add	local03, arg02
20708     35 93 02 F6 | 	mov	arg01, ptr__dat__
2070c     0E 00 00 FF 
20710     BA 92 06 F1 | 	add	arg01, ##7354
20714     54 95 02 F6 | 	mov	arg02, local02
20718     01 94 66 F0 | 	shl	arg02, #1
2071c     4A 93 02 F1 | 	add	arg01, arg02
20720     49 95 E2 FA | 	rdword	arg02, arg01
20724     55 93 02 F6 | 	mov	arg01, local03
20728     F0 0A B0 FD | 	call	#_psdpoke
2072c     01 A8 06 F1 | 	add	local02, #1
20730     02 00 00 FF 
20734     00 A8 56 F2 | 	cmps	local02, ##1024 wc
20738     B8 FF 9F CD |  if_b	jmp	#LR__2621
2073c                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
2073c     00 A8 06 F6 | 	mov	local02, #0
20740     0E 00 00 FF 
20744     38 64 06 F1 | 	add	objptr, ##7224
20748     D7 18 48 FB | 	callpa	#(@LR__2623-@LR__2622)>>2,fcache_load_ptr_
2074c                 | LR__2622
2074c     54 AB 02 F6 | 	mov	local03, local02
20750     01 AA 66 F0 | 	shl	local03, #1
20754     32 AB 02 F1 | 	add	local03, objptr
20758     54 B1 02 F6 | 	mov	local06, local02
2075c     08 B0 66 F0 | 	shl	local06, #8
20760     7F 00 00 FF 
20764     00 B3 06 F6 | 	mov	local07, ##65280
20768     58 B3 82 F1 | 	sub	local07, local06
2076c     55 B3 52 FC | 	wrword	local07, local03
20770     01 A8 06 F1 | 	add	local02, #1
20774     00 A9 56 F2 | 	cmps	local02, #256 wc
20778     D0 FF 9F CD |  if_b	jmp	#LR__2622
2077c                 | LR__2623
2077c     0E 00 00 FF 
20780     38 64 86 F1 | 	sub	objptr, ##7224
20784                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
20784     00 A8 06 F6 | 	mov	local02, #0
20788                 | LR__2624
20788     54 AB 02 F6 | 	mov	local03, local02
2078c     01 AA 66 F0 | 	shl	local03, #1
20790     32 AF 02 F6 | 	mov	local05, objptr
20794     0F 00 00 FF 
20798     38 AE 06 F1 | 	add	local05, ##7736
2079c     57 AB 02 F1 | 	add	local03, local05
207a0     80 BF 23 FF 
207a4     00 92 06 F6 | 	mov	arg01, ##1199505408
207a8     53 95 02 F6 | 	mov	arg02, local01
207ac     28 6C B0 FD | 	call	#__system___float_mul
207b0     3D 93 02 F6 | 	mov	arg01, result1
207b4     01 94 06 F6 | 	mov	arg02, #1
207b8     E4 70 B0 FD | 	call	#__system___float_tointeger
207bc     55 7B 52 FC | 	wrword	result1, local03
207c0     53 93 02 F6 | 	mov	arg01, local01
207c4     CC BC 1F FF 
207c8     9A 95 06 F6 | 	mov	arg02, ##1064933786
207cc     08 6C B0 FD | 	call	#__system___float_mul
207d0     3D A7 02 F6 | 	mov	local01, result1
207d4     01 A8 06 F1 | 	add	local02, #1
207d8     00 A9 56 F2 | 	cmps	local02, #256 wc
207dc     A8 FF 9F CD |  if_b	jmp	#LR__2624
207e0     10 00 00 FF 
207e4     36 64 06 F1 | 	add	objptr, ##8246
207e8     32 01 58 FC | 	wrword	#0, objptr
207ec                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
207ec     00 A8 06 F6 | 	mov	local02, #0
207f0     02 64 06 F1 | 	add	objptr, #2
207f4     D7 10 48 FB | 	callpa	#(@LR__2626-@LR__2625)>>2,fcache_load_ptr_
207f8                 | LR__2625
207f8     54 AB 02 F6 | 	mov	local03, local02
207fc     01 AA 66 F0 | 	shl	local03, #1
20800     32 AB 02 F1 | 	add	local03, objptr
20804     7F 00 80 FF 
20808     55 01 5A FC | 	wrword	##65280, local03
2080c     01 A8 06 F1 | 	add	local02, #1
20810     FF A8 56 F2 | 	cmps	local02, #255 wc
20814     E0 FF 9F CD |  if_b	jmp	#LR__2625
20818                 | LR__2626
20818     FE 65 06 F1 | 	add	objptr, #510
2081c     32 01 58 FC | 	wrword	#0, objptr
20820                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
20820     00 A8 06 F6 | 	mov	local02, #0
20824     02 64 06 F1 | 	add	objptr, #2
20828     D7 12 48 FB | 	callpa	#(@LR__2628-@LR__2627)>>2,fcache_load_ptr_
2082c                 | LR__2627
2082c     54 AB 02 F6 | 	mov	local03, local02
20830     01 AA 66 F0 | 	shl	local03, #1
20834     32 AB 02 F1 | 	add	local03, objptr
20838     54 B3 02 F6 | 	mov	local07, local02
2083c     0C B2 66 F0 | 	shl	local07, #12
20840     55 B3 52 FC | 	wrword	local07, local03
20844     01 A8 06 F1 | 	add	local02, #1
20848     10 A8 56 F2 | 	cmps	local02, #16 wc
2084c     DC FF 9F CD |  if_b	jmp	#LR__2627
20850                 | LR__2628
20850                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
20850     10 A8 06 F6 | 	mov	local02, #16
20854     D7 10 48 FB | 	callpa	#(@LR__2630-@LR__2629)>>2,fcache_load_ptr_
20858                 | LR__2629
20858     54 AB 02 F6 | 	mov	local03, local02
2085c     01 AA 66 F0 | 	shl	local03, #1
20860     32 AB 02 F1 | 	add	local03, objptr
20864     7F 00 80 FF 
20868     55 01 5A FC | 	wrword	##65280, local03
2086c     01 A8 06 F1 | 	add	local02, #1
20870     F0 A8 16 F2 | 	cmp	local02, #240 wc
20874     E0 FF 9F CD |  if_b	jmp	#LR__2629
20878                 | LR__2630
20878                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
20878     F0 A8 06 F6 | 	mov	local02, #240
2087c     D7 14 48 FB | 	callpa	#(@LR__2632-@LR__2631)>>2,fcache_load_ptr_
20880                 | LR__2631
20880     54 AB 02 F6 | 	mov	local03, local02
20884     01 AA 66 F0 | 	shl	local03, #1
20888     32 AB 02 F1 | 	add	local03, objptr
2088c     FF B0 06 F6 | 	mov	local06, #255
20890     54 B1 82 F1 | 	sub	local06, local02
20894     0C B0 66 F0 | 	shl	local06, #12
20898     55 B1 52 FC | 	wrword	local06, local03
2089c     01 A8 06 F1 | 	add	local02, #1
208a0     00 A9 16 F2 | 	cmp	local02, #256 wc
208a4     D8 FF 9F CD |  if_b	jmp	#LR__2631
208a8                 | LR__2632
208a8                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
208a8     00 A8 06 F6 | 	mov	local02, #0
208ac     01 00 00 FF 
208b0     00 64 06 F1 | 	add	objptr, ##512
208b4     D7 12 48 FB | 	callpa	#(@LR__2634-@LR__2633)>>2,fcache_load_ptr_
208b8                 | LR__2633
208b8     54 AB 02 F6 | 	mov	local03, local02
208bc     01 AA 66 F0 | 	shl	local03, #1
208c0     32 AB 02 F1 | 	add	local03, objptr
208c4     54 B3 02 F6 | 	mov	local07, local02
208c8     08 B2 66 F0 | 	shl	local07, #8
208cc     55 B3 52 FC | 	wrword	local07, local03
208d0     01 A8 06 F1 | 	add	local02, #1
208d4     00 A9 56 F2 | 	cmps	local02, #256 wc
208d8     DC FF 9F CD |  if_b	jmp	#LR__2633
208dc                 | LR__2634
208dc     FE 65 06 F1 | 	add	objptr, #510
208e0     32 01 58 FC | 	wrword	#0, objptr
208e4                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
208e4     00 A8 06 F6 | 	mov	local02, #0
208e8     02 64 06 F1 | 	add	objptr, #2
208ec     D7 16 48 FB | 	callpa	#(@LR__2636-@LR__2635)>>2,fcache_load_ptr_
208f0                 | LR__2635
208f0     54 AB 02 F6 | 	mov	local03, local02
208f4     01 AA 66 F0 | 	shl	local03, #1
208f8     32 AB 02 F1 | 	add	local03, objptr
208fc     54 B3 02 F6 | 	mov	local07, local02
20900     04 B2 66 F0 | 	shl	local07, #4
20904     54 B3 02 F1 | 	add	local07, local02
20908     04 B2 66 F0 | 	shl	local07, #4
2090c     55 B3 52 FC | 	wrword	local07, local03
20910     01 A8 06 F1 | 	add	local02, #1
20914     F0 A8 56 F2 | 	cmps	local02, #240 wc
20918     D4 FF 9F CD |  if_b	jmp	#LR__2635
2091c                 | LR__2636
2091c     F0 A8 06 F6 | 	mov	local02, #240
20920     D7 14 48 FB | 	callpa	#(@LR__2638-@LR__2637)>>2,fcache_load_ptr_
20924                 | LR__2637
20924     54 AB 02 F6 | 	mov	local03, local02
20928     01 AA 66 F0 | 	shl	local03, #1
2092c     32 AB 02 F1 | 	add	local03, objptr
20930     FF B0 06 F6 | 	mov	local06, #255
20934     54 B1 82 F1 | 	sub	local06, local02
20938     0C B0 66 F0 | 	shl	local06, #12
2093c     55 B1 52 FC | 	wrword	local06, local03
20940     01 A8 06 F1 | 	add	local02, #1
20944     00 A9 16 F2 | 	cmp	local02, #256 wc
20948     D8 FF 9F CD |  if_b	jmp	#LR__2637
2094c                 | LR__2638
2094c                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
2094c     00 A8 06 F6 | 	mov	local02, #0
20950     01 00 00 FF 
20954     00 64 06 F1 | 	add	objptr, ##512
20958     D7 20 48 FB | 	callpa	#(@LR__2640-@LR__2639)>>2,fcache_load_ptr_
2095c                 | LR__2639
2095c     54 AB 02 F6 | 	mov	local03, local02
20960     01 AA 66 F0 | 	shl	local03, #1
20964     32 AB 02 F1 | 	add	local03, objptr
20968     54 B3 02 F6 | 	mov	local07, local02
2096c     09 B2 66 F0 | 	shl	local07, #9
20970     55 B3 52 FC | 	wrword	local07, local03
20974     FF AA 06 F6 | 	mov	local03, #255
20978     54 AB 82 F1 | 	sub	local03, local02
2097c     01 AA 66 F0 | 	shl	local03, #1
20980     32 AB 02 F1 | 	add	local03, objptr
20984     54 B3 02 F6 | 	mov	local07, local02
20988     09 B2 66 F0 | 	shl	local07, #9
2098c     55 B3 52 FC | 	wrword	local07, local03
20990     01 A8 06 F1 | 	add	local02, #1
20994     80 A8 56 F2 | 	cmps	local02, #128 wc
20998     C0 FF 9F CD |  if_b	jmp	#LR__2639
2099c                 | LR__2640
2099c                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
2099c     00 A8 06 F6 | 	mov	local02, #0
209a0     01 00 00 FF 
209a4     00 64 06 F1 | 	add	objptr, ##512
209a8     D7 12 48 FB | 	callpa	#(@LR__2642-@LR__2641)>>2,fcache_load_ptr_
209ac                 | LR__2641
209ac     54 AB 02 F6 | 	mov	local03, local02
209b0     01 AA 66 F0 | 	shl	local03, #1
209b4     32 AB 02 F1 | 	add	local03, objptr
209b8     54 B3 02 F6 | 	mov	local07, local02
209bc     0D B2 66 F0 | 	shl	local07, #13
209c0     55 B3 52 FC | 	wrword	local07, local03
209c4     01 A8 06 F1 | 	add	local02, #1
209c8     08 A8 56 F2 | 	cmps	local02, #8 wc
209cc     DC FF 9F CD |  if_b	jmp	#LR__2641
209d0                 | LR__2642
209d0                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
209d0     08 A8 06 F6 | 	mov	local02, #8
209d4     D7 1A 48 FB | 	callpa	#(@LR__2644-@LR__2643)>>2,fcache_load_ptr_
209d8                 | LR__2643
209d8     54 AB 02 F6 | 	mov	local03, local02
209dc     01 AA 66 F0 | 	shl	local03, #1
209e0     32 AB 02 F1 | 	add	local03, objptr
209e4     54 AF 02 F6 | 	mov	local05, local02
209e8     08 AE 86 F1 | 	sub	local05, #8
209ec     0B AE 66 F0 | 	shl	local05, #11
209f0     7F 00 00 FF 
209f4     00 B3 06 F6 | 	mov	local07, ##65280
209f8     57 B3 82 F1 | 	sub	local07, local05
209fc     55 B3 52 FC | 	wrword	local07, local03
20a00     01 A8 06 F1 | 	add	local02, #1
20a04     18 A8 16 F2 | 	cmp	local02, #24 wc
20a08     CC FF 9F CD |  if_b	jmp	#LR__2643
20a0c                 | LR__2644
20a0c                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
20a0c     18 A8 06 F6 | 	mov	local02, #24
20a10     D7 10 48 FB | 	callpa	#(@LR__2646-@LR__2645)>>2,fcache_load_ptr_
20a14                 | LR__2645
20a14     54 AB 02 F6 | 	mov	local03, local02
20a18     01 AA 66 F0 | 	shl	local03, #1
20a1c     32 AB 02 F1 | 	add	local03, objptr
20a20     40 00 80 FF 
20a24     55 01 58 FC | 	wrword	##32768, local03
20a28     01 A8 06 F1 | 	add	local02, #1
20a2c     81 A8 16 F2 | 	cmp	local02, #129 wc
20a30     E0 FF 9F CD |  if_b	jmp	#LR__2645
20a34                 | LR__2646
20a34                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
20a34     81 A8 06 F6 | 	mov	local02, #129
20a38     D7 14 48 FB | 	callpa	#(@LR__2648-@LR__2647)>>2,fcache_load_ptr_
20a3c                 | LR__2647
20a3c     54 AB 02 F6 | 	mov	local03, local02
20a40     01 AA 66 F0 | 	shl	local03, #1
20a44     32 AB 02 F1 | 	add	local03, objptr
20a48     FF B0 06 F6 | 	mov	local06, #255
20a4c     54 B1 82 F1 | 	sub	local06, local02
20a50     08 B0 66 F0 | 	shl	local06, #8
20a54     55 B1 52 FC | 	wrword	local06, local03
20a58     01 A8 06 F1 | 	add	local02, #1
20a5c     00 A9 16 F2 | 	cmp	local02, #256 wc
20a60     D8 FF 9F CD |  if_b	jmp	#LR__2647
20a64                 | LR__2648
20a64     3F 00 00 FF 
20a68     42 64 06 F1 | 	add	objptr, ##32322
20a6c     32 01 59 FC | 	wrword	#128, objptr
20a70     54 00 00 FF 
20a74     7A 64 86 F1 | 	sub	objptr, ##43130
20a78                 | ' for i=0 to 7
20a78     00 A8 06 F6 | 	mov	local02, #0
20a7c     D7 9C 48 FB | 	callpa	#(@LR__2650-@LR__2649)>>2,fcache_load_ptr_
20a80                 | LR__2649
20a80     54 AB 02 F6 | 	mov	local03, local02
20a84     03 AA 66 F0 | 	shl	local03, #3
20a88     54 AB 82 F1 | 	sub	local03, local02
20a8c     02 AA 66 F0 | 	shl	local03, #2
20a90     16 00 00 FF 
20a94     98 64 06 F1 | 	add	objptr, ##11416
20a98     32 AB 02 F1 | 	add	local03, objptr
20a9c     00 EE A1 FF 
20aa0     55 01 68 FC | 	wrlong	##1138491392, local03
20aa4     54 AB 02 F6 | 	mov	local03, local02
20aa8     03 AA 66 F0 | 	shl	local03, #3
20aac     54 AB 82 F1 | 	sub	local03, local02
20ab0     02 AA 66 F0 | 	shl	local03, #2
20ab4     32 AB 02 F1 | 	add	local03, objptr
20ab8     04 AA 06 F1 | 	add	local03, #4
20abc     55 A9 42 FC | 	wrbyte	local02, local03
20ac0     54 AB 02 F6 | 	mov	local03, local02
20ac4     03 AA 66 F0 | 	shl	local03, #3
20ac8     54 AB 82 F1 | 	sub	local03, local02
20acc     02 AA 66 F0 | 	shl	local03, #2
20ad0     32 AB 02 F1 | 	add	local03, objptr
20ad4     05 AA 06 F1 | 	add	local03, #5
20ad8     55 A9 42 FC | 	wrbyte	local02, local03
20adc     54 AB 02 F6 | 	mov	local03, local02
20ae0     03 AA 66 F0 | 	shl	local03, #3
20ae4     54 AB 82 F1 | 	sub	local03, local02
20ae8     02 AA 66 F0 | 	shl	local03, #2
20aec     32 AB 02 F1 | 	add	local03, objptr
20af0     06 AA 06 F1 | 	add	local03, #6
20af4     55 01 58 FC | 	wrword	#0, local03
20af8     54 AB 02 F6 | 	mov	local03, local02
20afc     03 AA 66 F0 | 	shl	local03, #3
20b00     54 AB 82 F1 | 	sub	local03, local02
20b04     02 AA 66 F0 | 	shl	local03, #2
20b08     32 AB 02 F1 | 	add	local03, objptr
20b0c     08 AA 06 F1 | 	add	local03, #8
20b10     00 C0 9F FF 
20b14     55 01 68 FC | 	wrlong	##1065353216, local03
20b18     54 AB 02 F6 | 	mov	local03, local02
20b1c     03 AA 66 F0 | 	shl	local03, #3
20b20     54 AB 82 F1 | 	sub	local03, local02
20b24     02 AA 66 F0 | 	shl	local03, #2
20b28     32 AB 02 F1 | 	add	local03, objptr
20b2c     0C AA 06 F1 | 	add	local03, #12
20b30     00 40 A0 FF 
20b34     55 01 68 FC | 	wrlong	##1082130432, local03
20b38     54 AB 02 F6 | 	mov	local03, local02
20b3c     03 AA 66 F0 | 	shl	local03, #3
20b40     54 AB 82 F1 | 	sub	local03, local02
20b44     02 AA 66 F0 | 	shl	local03, #2
20b48     32 AB 02 F1 | 	add	local03, objptr
20b4c     10 AA 06 F1 | 	add	local03, #16
20b50     55 01 68 FC | 	wrlong	#0, local03
20b54     54 AB 02 F6 | 	mov	local03, local02
20b58     03 AA 66 F0 | 	shl	local03, #3
20b5c     54 AB 82 F1 | 	sub	local03, local02
20b60     02 AA 66 F0 | 	shl	local03, #2
20b64     32 AB 02 F1 | 	add	local03, objptr
20b68     14 AA 06 F1 | 	add	local03, #20
20b6c     55 FF 59 FC | 	wrword	#255, local03
20b70     54 AB 02 F6 | 	mov	local03, local02
20b74     03 AA 66 F0 | 	shl	local03, #3
20b78     54 AB 82 F1 | 	sub	local03, local02
20b7c     02 AA 66 F0 | 	shl	local03, #2
20b80     32 AB 02 F1 | 	add	local03, objptr
20b84     16 AA 06 F1 | 	add	local03, #22
20b88     55 01 58 FC | 	wrword	#0, local03
20b8c     54 AB 02 F6 | 	mov	local03, local02
20b90     01 AA 66 F0 | 	shl	local03, #1
20b94     3D 00 00 FF 
20b98     D4 65 06 F1 | 	add	objptr, ##31700
20b9c     32 AB 02 F1 | 	add	local03, objptr
20ba0     55 FF 59 FC | 	wrword	#255, local03
20ba4     01 A8 06 F1 | 	add	local02, #1
20ba8     08 A8 56 F2 | 	cmps	local02, #8 wc
20bac     54 00 00 FF 
20bb0     6C 64 86 F1 | 	sub	objptr, ##43116
20bb4     C8 FE 9F CD |  if_b	jmp	#LR__2649
20bb8                 | LR__2650
20bb8     00 6E 20 FF 
20bbc     00 B2 06 F6 | 	mov	local07, ##1088159744
20bc0                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
20bc0     03 B0 06 F6 | 	mov	local06, #3
20bc4                 | LR__2651
20bc4     59 93 02 F6 | 	mov	arg01, local07
20bc8     CE C3 1F FF 
20bcc     7D 94 06 F6 | 	mov	arg02, ##1065852029
20bd0     04 68 B0 FD | 	call	#__system___float_mul
20bd4     3D B3 02 F6 | 	mov	local07, result1
20bd8     FA B1 6E FB | 	djnz	local06, #LR__2651
20bdc     00 A8 06 F6 | 	mov	local02, #0
20be0                 | LR__2652
20be0     54 AD 02 F6 | 	mov	local04, local02
20be4     02 AC 66 F0 | 	shl	local04, #2
20be8     32 AB 02 F6 | 	mov	local03, objptr
20bec     16 00 00 FF 
20bf0     38 AA 06 F1 | 	add	local03, ##11320
20bf4     55 AD 02 F1 | 	add	local04, local03
20bf8     56 B3 62 FC | 	wrlong	local07, local04
20bfc     59 93 02 F6 | 	mov	arg01, local07
20c00     CE C3 1F FF 
20c04     7D 94 06 F6 | 	mov	arg02, ##1065852029
20c08     CC 67 B0 FD | 	call	#__system___float_mul
20c0c     3D B3 02 F6 | 	mov	local07, result1
20c10     01 A8 06 F1 | 	add	local02, #1
20c14     0C A8 56 F2 | 	cmps	local02, #12 wc
20c18     C4 FF 9F CD |  if_b	jmp	#LR__2652
20c1c     16 00 00 FF 
20c20     68 64 06 F1 | 	add	objptr, ##11368
20c24     32 51 6B FC | 	wrlong	#424, objptr
20c28     04 64 06 F1 | 	add	objptr, #4
20c2c     32 21 6B FC | 	wrlong	#400, objptr
20c30     04 64 06 F1 | 	add	objptr, #4
20c34     32 F3 6A FC | 	wrlong	#377, objptr
20c38     04 64 06 F1 | 	add	objptr, #4
20c3c     32 C9 6A FC | 	wrlong	#356, objptr
20c40     04 64 06 F1 | 	add	objptr, #4
20c44     32 A1 6A FC | 	wrlong	#336, objptr
20c48     04 64 06 F1 | 	add	objptr, #4
20c4c     32 7B 6A FC | 	wrlong	#317, objptr
20c50     04 64 06 F1 | 	add	objptr, #4
20c54     32 59 6A FC | 	wrlong	#300, objptr
20c58     04 64 06 F1 | 	add	objptr, #4
20c5c     32 37 6A FC | 	wrlong	#283, objptr
20c60     04 64 06 F1 | 	add	objptr, #4
20c64     32 17 6A FC | 	wrlong	#267, objptr
20c68     04 64 06 F1 | 	add	objptr, #4
20c6c     32 F9 69 FC | 	wrlong	#252, objptr
20c70     04 64 06 F1 | 	add	objptr, #4
20c74     32 DD 69 FC | 	wrlong	#238, objptr
20c78     04 64 06 F1 | 	add	objptr, #4
20c7c     32 C1 69 FC | 	wrlong	#224, objptr
20c80     3D 00 00 FF 
20c84     E6 65 06 F1 | 	add	objptr, ##31718
20c88     32 01 59 FC | 	wrword	#128, objptr
20c8c     02 64 86 F1 | 	sub	objptr, #2
20c90     32 01 59 FC | 	wrword	#128, objptr
20c94     54 00 00 FF 
20c98     78 64 86 F1 | 	sub	objptr, ##43128
20c9c     E7 F0 03 F6 | 	mov	ptra, fp
20ca0     F2 00 A0 FD | 	call	#popregs_
20ca4                 | _init_audio_ret
20ca4     2D 00 64 FD | 	ret
20ca8                 | 
20ca8                 | ' 
20ca8                 | ' '------------------- Error messages
20ca8                 | ' 
20ca8                 | ' sub init_error_strings
20ca8                 | _init_error_strings
20ca8     9A 01 00 FF 
20cac     B5 80 06 F6 | 	mov	_var01, ##@LR__6112
20cb0     46 00 00 FF 
20cb4     FC 65 06 F1 | 	add	objptr, ##36348
20cb8     32 81 62 FC | 	wrlong	_var01, objptr
20cbc     9A 01 00 FF 
20cc0     B6 80 06 F6 | 	mov	_var01, ##@LR__6113
20cc4     04 64 06 F1 | 	add	objptr, #4
20cc8     32 81 62 FC | 	wrlong	_var01, objptr
20ccc     9A 01 00 FF 
20cd0     DA 80 06 F6 | 	mov	_var01, ##@LR__6114
20cd4     04 64 06 F1 | 	add	objptr, #4
20cd8     32 81 62 FC | 	wrlong	_var01, objptr
20cdc     9A 01 00 FF 
20ce0     FA 80 06 F6 | 	mov	_var01, ##@LR__6115
20ce4     04 64 06 F1 | 	add	objptr, #4
20ce8     32 81 62 FC | 	wrlong	_var01, objptr
20cec     9A 01 00 FF 
20cf0     13 81 06 F6 | 	mov	_var01, ##@LR__6116
20cf4     04 64 06 F1 | 	add	objptr, #4
20cf8     32 81 62 FC | 	wrlong	_var01, objptr
20cfc     9A 01 00 FF 
20d00     2E 81 06 F6 | 	mov	_var01, ##@LR__6117
20d04     04 64 06 F1 | 	add	objptr, #4
20d08     32 81 62 FC | 	wrlong	_var01, objptr
20d0c     9A 01 00 FF 
20d10     4F 81 06 F6 | 	mov	_var01, ##@LR__6118
20d14     04 64 06 F1 | 	add	objptr, #4
20d18     32 81 62 FC | 	wrlong	_var01, objptr
20d1c     9A 01 00 FF 
20d20     7C 81 06 F6 | 	mov	_var01, ##@LR__6119
20d24     04 64 06 F1 | 	add	objptr, #4
20d28     32 81 62 FC | 	wrlong	_var01, objptr
20d2c     9A 01 00 FF 
20d30     A6 81 06 F6 | 	mov	_var01, ##@LR__6120
20d34     04 64 06 F1 | 	add	objptr, #4
20d38     32 81 62 FC | 	wrlong	_var01, objptr
20d3c     9A 01 00 FF 
20d40     BE 81 06 F6 | 	mov	_var01, ##@LR__6121
20d44     04 64 06 F1 | 	add	objptr, #4
20d48     32 81 62 FC | 	wrlong	_var01, objptr
20d4c     9A 01 00 FF 
20d50     DE 81 06 F6 | 	mov	_var01, ##@LR__6122
20d54     04 64 06 F1 | 	add	objptr, #4
20d58     32 81 62 FC | 	wrlong	_var01, objptr
20d5c     9A 01 00 FF 
20d60     F4 81 06 F6 | 	mov	_var01, ##@LR__6123
20d64     04 64 06 F1 | 	add	objptr, #4
20d68     32 81 62 FC | 	wrlong	_var01, objptr
20d6c     9B 01 00 FF 
20d70     11 80 06 F6 | 	mov	_var01, ##@LR__6124
20d74     04 64 06 F1 | 	add	objptr, #4
20d78     32 81 62 FC | 	wrlong	_var01, objptr
20d7c     9B 01 00 FF 
20d80     34 80 06 F6 | 	mov	_var01, ##@LR__6125
20d84     04 64 06 F1 | 	add	objptr, #4
20d88     32 81 62 FC | 	wrlong	_var01, objptr
20d8c     9B 01 00 FF 
20d90     5A 80 06 F6 | 	mov	_var01, ##@LR__6126
20d94     04 64 06 F1 | 	add	objptr, #4
20d98     32 81 62 FC | 	wrlong	_var01, objptr
20d9c     9B 01 00 FF 
20da0     75 80 06 F6 | 	mov	_var01, ##@LR__6127
20da4     04 64 06 F1 | 	add	objptr, #4
20da8     32 81 62 FC | 	wrlong	_var01, objptr
20dac     9B 01 00 FF 
20db0     85 80 06 F6 | 	mov	_var01, ##@LR__6128
20db4     04 64 06 F1 | 	add	objptr, #4
20db8     32 81 62 FC | 	wrlong	_var01, objptr
20dbc     9B 01 00 FF 
20dc0     94 80 06 F6 | 	mov	_var01, ##@LR__6129
20dc4     04 64 06 F1 | 	add	objptr, #4
20dc8     32 81 62 FC | 	wrlong	_var01, objptr
20dcc     9B 01 00 FF 
20dd0     AE 80 06 F6 | 	mov	_var01, ##@LR__6130
20dd4     04 64 06 F1 | 	add	objptr, #4
20dd8     32 81 62 FC | 	wrlong	_var01, objptr
20ddc     9B 01 00 FF 
20de0     BF 80 06 F6 | 	mov	_var01, ##@LR__6131
20de4     04 64 06 F1 | 	add	objptr, #4
20de8     32 81 62 FC | 	wrlong	_var01, objptr
20dec     9B 01 00 FF 
20df0     D6 80 06 F6 | 	mov	_var01, ##@LR__6132
20df4     04 64 06 F1 | 	add	objptr, #4
20df8     32 81 62 FC | 	wrlong	_var01, objptr
20dfc     9B 01 00 FF 
20e00     E9 80 06 F6 | 	mov	_var01, ##@LR__6133
20e04     04 64 06 F1 | 	add	objptr, #4
20e08     32 81 62 FC | 	wrlong	_var01, objptr
20e0c     9B 01 00 FF 
20e10     F8 80 06 F6 | 	mov	_var01, ##@LR__6134
20e14     04 64 06 F1 | 	add	objptr, #4
20e18     32 81 62 FC | 	wrlong	_var01, objptr
20e1c     9B 01 00 FF 
20e20     14 81 06 F6 | 	mov	_var01, ##@LR__6135
20e24     04 64 06 F1 | 	add	objptr, #4
20e28     32 81 62 FC | 	wrlong	_var01, objptr
20e2c     9B 01 00 FF 
20e30     24 81 06 F6 | 	mov	_var01, ##@LR__6136
20e34     04 64 06 F1 | 	add	objptr, #4
20e38     32 81 62 FC | 	wrlong	_var01, objptr
20e3c     9B 01 00 FF 
20e40     34 81 06 F6 | 	mov	_var01, ##@LR__6137
20e44     04 64 06 F1 | 	add	objptr, #4
20e48     32 81 62 FC | 	wrlong	_var01, objptr
20e4c     9B 01 00 FF 
20e50     67 81 06 F6 | 	mov	_var01, ##@LR__6138
20e54     04 64 06 F1 | 	add	objptr, #4
20e58     32 81 62 FC | 	wrlong	_var01, objptr
20e5c     9B 01 00 FF 
20e60     82 81 06 F6 | 	mov	_var01, ##@LR__6139
20e64     04 64 06 F1 | 	add	objptr, #4
20e68     32 81 62 FC | 	wrlong	_var01, objptr
20e6c     9B 01 00 FF 
20e70     97 81 06 F6 | 	mov	_var01, ##@LR__6140
20e74     04 64 06 F1 | 	add	objptr, #4
20e78     32 81 62 FC | 	wrlong	_var01, objptr
20e7c     9B 01 00 FF 
20e80     A3 81 06 F6 | 	mov	_var01, ##@LR__6141
20e84     04 64 06 F1 | 	add	objptr, #4
20e88     32 81 62 FC | 	wrlong	_var01, objptr
20e8c     9B 01 00 FF 
20e90     B4 81 06 F6 | 	mov	_var01, ##@LR__6142
20e94     04 64 06 F1 | 	add	objptr, #4
20e98     32 81 62 FC | 	wrlong	_var01, objptr
20e9c     9B 01 00 FF 
20ea0     C4 81 06 F6 | 	mov	_var01, ##@LR__6143
20ea4     04 64 06 F1 | 	add	objptr, #4
20ea8     32 81 62 FC | 	wrlong	_var01, objptr
20eac     9B 01 00 FF 
20eb0     DF 81 06 F6 | 	mov	_var01, ##@LR__6144
20eb4     04 64 06 F1 | 	add	objptr, #4
20eb8     32 81 62 FC | 	wrlong	_var01, objptr
20ebc     9B 01 00 FF 
20ec0     EF 81 06 F6 | 	mov	_var01, ##@LR__6145
20ec4     04 64 06 F1 | 	add	objptr, #4
20ec8     32 81 62 FC | 	wrlong	_var01, objptr
20ecc     9B 01 00 FF 
20ed0     FD 81 06 F6 | 	mov	_var01, ##@LR__6146
20ed4     04 64 06 F1 | 	add	objptr, #4
20ed8     32 81 62 FC | 	wrlong	_var01, objptr
20edc     9C 01 00 FF 
20ee0     17 80 06 F6 | 	mov	_var01, ##@LR__6147
20ee4     04 64 06 F1 | 	add	objptr, #4
20ee8     32 81 62 FC | 	wrlong	_var01, objptr
20eec     9C 01 00 FF 
20ef0     4A 80 06 F6 | 	mov	_var01, ##@LR__6148
20ef4     04 64 06 F1 | 	add	objptr, #4
20ef8     32 81 62 FC | 	wrlong	_var01, objptr
20efc     9C 01 00 FF 
20f00     62 80 06 F6 | 	mov	_var01, ##@LR__6149
20f04     04 64 06 F1 | 	add	objptr, #4
20f08     32 81 62 FC | 	wrlong	_var01, objptr
20f0c     9C 01 00 FF 
20f10     7D 80 06 F6 | 	mov	_var01, ##@LR__6150
20f14     04 64 06 F1 | 	add	objptr, #4
20f18     32 81 62 FC | 	wrlong	_var01, objptr
20f1c     9C 01 00 FF 
20f20     9A 80 06 F6 | 	mov	_var01, ##@LR__6151
20f24     04 64 06 F1 | 	add	objptr, #4
20f28     32 81 62 FC | 	wrlong	_var01, objptr
20f2c     9C 01 00 FF 
20f30     B3 80 06 F6 | 	mov	_var01, ##@LR__6152
20f34     04 64 06 F1 | 	add	objptr, #4
20f38     32 81 62 FC | 	wrlong	_var01, objptr
20f3c     9C 01 00 FF 
20f40     D2 80 06 F6 | 	mov	_var01, ##@LR__6153
20f44     04 64 06 F1 | 	add	objptr, #4
20f48     32 81 62 FC | 	wrlong	_var01, objptr
20f4c     9C 01 00 FF 
20f50     E0 80 06 F6 | 	mov	_var01, ##@LR__6154
20f54     04 64 06 F1 | 	add	objptr, #4
20f58     32 81 62 FC | 	wrlong	_var01, objptr
20f5c     9C 01 00 FF 
20f60     0D 81 06 F6 | 	mov	_var01, ##@LR__6155
20f64     04 64 06 F1 | 	add	objptr, #4
20f68     32 81 62 FC | 	wrlong	_var01, objptr
20f6c     9C 01 00 FF 
20f70     1A 81 06 F6 | 	mov	_var01, ##@LR__6156
20f74     04 64 06 F1 | 	add	objptr, #4
20f78     32 81 62 FC | 	wrlong	_var01, objptr
20f7c     9C 01 00 FF 
20f80     2E 81 06 F6 | 	mov	_var01, ##@LR__6157
20f84     04 64 06 F1 | 	add	objptr, #4
20f88     32 81 62 FC | 	wrlong	_var01, objptr
20f8c     9C 01 00 FF 
20f90     52 81 06 F6 | 	mov	_var01, ##@LR__6158
20f94     04 64 06 F1 | 	add	objptr, #4
20f98     32 81 62 FC | 	wrlong	_var01, objptr
20f9c     9C 01 00 FF 
20fa0     69 81 06 F6 | 	mov	_var01, ##@LR__6159
20fa4     04 64 06 F1 | 	add	objptr, #4
20fa8     32 81 62 FC | 	wrlong	_var01, objptr
20fac     9C 01 00 FF 
20fb0     7C 81 06 F6 | 	mov	_var01, ##@LR__6160
20fb4     04 64 06 F1 | 	add	objptr, #4
20fb8     32 81 62 FC | 	wrlong	_var01, objptr
20fbc     9C 01 00 FF 
20fc0     93 81 06 F6 | 	mov	_var01, ##@LR__6161
20fc4     04 64 06 F1 | 	add	objptr, #4
20fc8     32 81 62 FC | 	wrlong	_var01, objptr
20fcc     9C 01 00 FF 
20fd0     AC 81 06 F6 | 	mov	_var01, ##@LR__6162
20fd4     04 64 06 F1 | 	add	objptr, #4
20fd8     32 81 62 FC | 	wrlong	_var01, objptr
20fdc     9C 01 00 FF 
20fe0     CE 81 06 F6 | 	mov	_var01, ##@LR__6163
20fe4     04 64 06 F1 | 	add	objptr, #4
20fe8     32 81 62 FC | 	wrlong	_var01, objptr
20fec     9C 01 00 FF 
20ff0     E1 81 06 F6 | 	mov	_var01, ##@LR__6164
20ff4     04 64 06 F1 | 	add	objptr, #4
20ff8     32 81 62 FC | 	wrlong	_var01, objptr
20ffc     9C 01 00 FF 
21000     F1 81 06 F6 | 	mov	_var01, ##@LR__6165
21004     04 64 06 F1 | 	add	objptr, #4
21008     32 81 62 FC | 	wrlong	_var01, objptr
2100c     9D 01 00 FF 
21010     09 80 06 F6 | 	mov	_var01, ##@LR__6166
21014     04 64 06 F1 | 	add	objptr, #4
21018     32 81 62 FC | 	wrlong	_var01, objptr
2101c     9D 01 00 FF 
21020     20 80 06 F6 | 	mov	_var01, ##@LR__6167
21024     04 64 06 F1 | 	add	objptr, #4
21028     32 81 62 FC | 	wrlong	_var01, objptr
2102c     47 00 00 FF 
21030     D8 64 86 F1 | 	sub	objptr, ##36568
21034                 | _init_error_strings_ret
21034     2D 00 64 FD | 	ret
21038                 | 
21038                 | '         
21038                 | ' sub printerror(err as integer, linenum=0 as integer)
21038                 | _printerror
21038     02 CA 05 F6 | 	mov	COUNT_, #2
2103c     E8 00 A0 FD | 	call	#pushregs_
21040     49 A7 02 F6 | 	mov	local01, arg01
21044     4A A9 02 F6 | 	mov	local02, arg02
21048     9D 01 00 FF 
2104c     2D 92 06 F6 | 	mov	arg01, ##@LR__6168
21050     44 21 B0 FD | 	call	#_hg010b_spin2_write
21054     53 93 02 F6 | 	mov	arg01, local01
21058     80 26 B0 FD | 	call	#_hg010b_spin2_inttostr
2105c     3D 93 02 F6 | 	mov	arg01, result1
21060     34 21 B0 FD | 	call	#_hg010b_spin2_write
21064     9D 01 00 FF 
21068     34 92 06 F6 | 	mov	arg01, ##@LR__6169
2106c     28 21 B0 FD | 	call	#_hg010b_spin2_write
21070     02 A6 66 F0 | 	shl	local01, #2
21074     32 95 02 F6 | 	mov	arg02, objptr
21078     46 00 00 FF 
2107c     FC 95 06 F1 | 	add	arg02, ##36348
21080     4A A7 02 F1 | 	add	local01, arg02
21084     53 93 02 FB | 	rdlong	arg01, local01
21088     0C 21 B0 FD | 	call	#_hg010b_spin2_write
2108c                 | ' v.write("Error " ): v.write(v.inttostr(err)) : v.write(" - ")  : v.write(errors$(err))
2108c                 | ' if linenum>0 then v.write(" in line " ): v.writeln(v.inttostr(linenum)) else v.writeln("")
2108c     01 A8 56 F2 | 	cmps	local02, #1 wc
21090     24 00 90 CD |  if_b	jmp	#LR__2660
21094     9D 01 00 FF 
21098     38 92 06 F6 | 	mov	arg01, ##@LR__6170
2109c     F8 20 B0 FD | 	call	#_hg010b_spin2_write
210a0     54 93 02 F6 | 	mov	arg01, local02
210a4     34 26 B0 FD | 	call	#_hg010b_spin2_inttostr
210a8     3D 93 02 F6 | 	mov	arg01, result1
210ac                 | ' 
210ac                 | ' write(text)
210ac     E8 20 B0 FD | 	call	#_hg010b_spin2_write
210b0                 | ' crlf
210b0     84 25 B0 FD | 	call	#_hg010b_spin2_crlf
210b4     10 00 90 FD | 	jmp	#LR__2661
210b8                 | LR__2660
210b8     9D 01 00 FF 
210bc     42 92 06 F6 | 	mov	arg01, ##@LR__6171
210c0                 | ' 
210c0                 | ' write(text)
210c0     D4 20 B0 FD | 	call	#_hg010b_spin2_write
210c4                 | ' crlf
210c4     70 25 B0 FD | 	call	#_hg010b_spin2_crlf
210c8                 | LR__2661
210c8     E7 F0 03 F6 | 	mov	ptra, fp
210cc     F2 00 A0 FD | 	call	#popregs_
210d0                 | _printerror_ret
210d0     2D 00 64 FD | 	ret
210d4                 | 
210d4                 | ' 
210d4                 | ' '' ------------------------------- Hardware start/stop/initialization 
210d4                 | ' 
210d4                 | ' sub startpsram
210d4                 | _startpsram
210d4     00 92 06 F6 | 	mov	arg01, #0
210d8     0A 94 C6 F9 | 	decod	arg02, #10
210dc     0B 96 06 F6 | 	mov	arg03, #11
210e0     07 98 06 F6 | 	mov	arg04, #7
210e4     0B 00 00 FF 
210e8     CC 64 06 F1 | 	add	objptr, ##5836
210ec     70 2A B0 FD | 	call	#_psram_spin2_startx
210f0     2D 00 00 FF 
210f4     BC 64 06 F1 | 	add	objptr, ##23228
210f8     32 7B 62 FC | 	wrlong	result1, objptr
210fc                 | '     return $7FF00 + cog*12
210fc     0C 64 06 F1 | 	add	objptr, #12
21100     FF 03 80 FF 
21104     32 01 6A FC | 	wrlong	##524032, objptr
21108     38 00 00 FF 
2110c     94 65 86 F1 | 	sub	objptr, ##29076
21110                 | _startpsram_ret
21110     2D 00 64 FD | 	ret
21114                 | 
21114                 | ' 
21114                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
21114                 | _startvideo
21114     01 CA 05 F6 | 	mov	COUNT_, #1
21118     E8 00 A0 FD | 	call	#pushregs_
2111c     38 00 00 FF 
21120     94 65 06 F1 | 	add	objptr, ##29076
21124     32 99 02 FB | 	rdlong	arg04, objptr
21128     38 00 00 FF 
2112c     94 65 86 F1 | 	sub	objptr, ##29076
21130     4A 93 02 F6 | 	mov	arg01, arg02
21134     4C 95 02 F6 | 	mov	arg02, arg04
21138     DC 07 B0 FD | 	call	#_hg010b_spin2_start
2113c     38 00 00 FF 
21140     80 65 06 F1 | 	add	objptr, ##29056
21144     32 7B 62 FC | 	wrlong	result1, objptr
21148                 | ' 
21148                 | ' videocog=v.start(pin,mbox)
21148                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
21148     00 A6 06 F6 | 	mov	local01, #0
2114c     2D 00 00 FF 
21150     B4 64 86 F1 | 	sub	objptr, ##23220
21154                 | LR__2670
21154     53 93 02 F6 | 	mov	arg01, local01
21158     00 28 00 FF 
2115c     00 94 06 F6 | 	mov	arg02, ##5242880
21160     5C 2E B0 FD | 	call	#_psram_spin2_setQos
21164     01 A6 06 F1 | 	add	local01, #1
21168     08 A6 56 F2 | 	cmps	local01, #8 wc
2116c     E4 FF 9F CD |  if_b	jmp	#LR__2670
21170     2D 00 00 FF 
21174     B4 64 06 F1 | 	add	objptr, ##23220
21178     32 93 02 FB | 	rdlong	arg01, objptr
2117c     7A 00 02 FF 
21180     00 94 06 F6 | 	mov	arg02, ##67171328
21184     2D 00 00 FF 
21188     B4 64 86 F1 | 	sub	objptr, ##23220
2118c     30 2E B0 FD | 	call	#_psram_spin2_setQos
21190     0B 00 00 FF 
21194     CC 64 86 F1 | 	sub	objptr, ##5836
21198                 | ' psram.setQoS(videocog, $0400f400) 
21198                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
21198     32 95 02 F6 | 	mov	arg02, objptr
2119c     00 68 05 FF 
211a0     00 94 46 F5 | 	or	arg02, ##181403648
211a4     00 96 06 F6 | 	mov	arg03, #0
211a8     00 98 06 F6 | 	mov	arg04, #0
211ac     00 92 06 F6 | 	mov	arg01, #0
211b0     A4 45 B0 FD | 	call	#__system___basic_open
211b4                 | ' return videocog
211b4     38 00 00 FF 
211b8     80 65 06 F1 | 	add	objptr, ##29056
211bc     32 7B 02 FB | 	rdlong	result1, objptr
211c0     38 00 00 FF 
211c4     80 65 86 F1 | 	sub	objptr, ##29056
211c8     E7 F0 03 F6 | 	mov	ptra, fp
211cc     F2 00 A0 FD | 	call	#popregs_
211d0                 | _startvideo_ret
211d0     2D 00 64 FD | 	ret
211d4                 | 
211d4                 | ' 
211d4                 | ' 
211d4                 | ' 
211d4                 | ' '' ------------------------------- Convenient psram peek/poke
211d4                 | ' 
211d4                 | ' sub pslpoke(addr as ulong,value as ulong)
211d4                 | _pslpoke
211d4     00 CA 05 F6 | 	mov	COUNT_, #0
211d8     E8 00 A0 FD | 	call	#pushregs_
211dc     08 F0 07 F1 | 	add	ptra, #8
211e0     49 97 02 F6 | 	mov	arg03, arg01
211e4     04 CE 05 F1 | 	add	fp, #4
211e8     E7 94 62 FC | 	wrlong	arg02, fp
211ec     E7 92 02 F6 | 	mov	arg01, fp
211f0     04 CE 85 F1 | 	sub	fp, #4
211f4     4B 95 02 F6 | 	mov	arg02, arg03
211f8     04 96 06 F6 | 	mov	arg03, #4
211fc     0B 00 00 FF 
21200     CC 64 06 F1 | 	add	objptr, ##5836
21204     28 2C B0 FD | 	call	#_psram_spin2_write
21208     0B 00 00 FF 
2120c     CC 64 86 F1 | 	sub	objptr, ##5836
21210     E7 F0 03 F6 | 	mov	ptra, fp
21214     F2 00 A0 FD | 	call	#popregs_
21218                 | _pslpoke_ret
21218     2D 00 64 FD | 	ret
2121c                 | 
2121c                 | ' 
2121c                 | ' sub psdpoke(addr as ulong,value as ulong)
2121c                 | _psdpoke
2121c     00 CA 05 F6 | 	mov	COUNT_, #0
21220     E8 00 A0 FD | 	call	#pushregs_
21224     08 F0 07 F1 | 	add	ptra, #8
21228     49 97 02 F6 | 	mov	arg03, arg01
2122c     04 CE 05 F1 | 	add	fp, #4
21230     E7 94 62 FC | 	wrlong	arg02, fp
21234     E7 92 02 F6 | 	mov	arg01, fp
21238     04 CE 85 F1 | 	sub	fp, #4
2123c     4B 95 02 F6 | 	mov	arg02, arg03
21240     02 96 06 F6 | 	mov	arg03, #2
21244     0B 00 00 FF 
21248     CC 64 06 F1 | 	add	objptr, ##5836
2124c     E0 2B B0 FD | 	call	#_psram_spin2_write
21250     0B 00 00 FF 
21254     CC 64 86 F1 | 	sub	objptr, ##5836
21258     E7 F0 03 F6 | 	mov	ptra, fp
2125c     F2 00 A0 FD | 	call	#popregs_
21260                 | _psdpoke_ret
21260     2D 00 64 FD | 	ret
21264                 | 
21264                 | ' 
21264                 | ' sub pspoke(addr as ulong,value as ulong)
21264                 | _pspoke
21264     00 CA 05 F6 | 	mov	COUNT_, #0
21268     E8 00 A0 FD | 	call	#pushregs_
2126c     08 F0 07 F1 | 	add	ptra, #8
21270     49 97 02 F6 | 	mov	arg03, arg01
21274     04 CE 05 F1 | 	add	fp, #4
21278     E7 94 62 FC | 	wrlong	arg02, fp
2127c     E7 92 02 F6 | 	mov	arg01, fp
21280     04 CE 85 F1 | 	sub	fp, #4
21284     4B 95 02 F6 | 	mov	arg02, arg03
21288     01 96 06 F6 | 	mov	arg03, #1
2128c     0B 00 00 FF 
21290     CC 64 06 F1 | 	add	objptr, ##5836
21294     98 2B B0 FD | 	call	#_psram_spin2_write
21298     0B 00 00 FF 
2129c     CC 64 86 F1 | 	sub	objptr, ##5836
212a0     E7 F0 03 F6 | 	mov	ptra, fp
212a4     F2 00 A0 FD | 	call	#popregs_
212a8                 | _pspoke_ret
212a8     2D 00 64 FD | 	ret
212ac                 | 
212ac                 | ' 
212ac                 | ' function pspeek(adr as ulong) as ubyte
212ac                 | _pspeek
212ac     00 CA 05 F6 | 	mov	COUNT_, #0
212b0     E8 00 A0 FD | 	call	#pushregs_
212b4     0C F0 07 F1 | 	add	ptra, #12
212b8     49 95 02 F6 | 	mov	arg02, arg01
212bc     E7 92 02 F6 | 	mov	arg01, fp
212c0     08 92 06 F1 | 	add	arg01, #8
212c4     01 96 06 F6 | 	mov	arg03, #1
212c8     0B 00 00 FF 
212cc     CC 64 06 F1 | 	add	objptr, ##5836
212d0     C0 2A B0 FD | 	call	#_psram_spin2_read1
212d4     0B 00 00 FF 
212d8     CC 64 86 F1 | 	sub	objptr, ##5836
212dc                 | ' psram.read1(varptr(res),adr,1)
212dc                 | ' return res
212dc     08 CE 05 F1 | 	add	fp, #8
212e0     E7 7A C2 FA | 	rdbyte	result1, fp
212e4     08 CE 85 F1 | 	sub	fp, #8
212e8     E7 F0 03 F6 | 	mov	ptra, fp
212ec     F2 00 A0 FD | 	call	#popregs_
212f0                 | _pspeek_ret
212f0     2D 00 64 FD | 	ret
212f4                 | 
212f4                 | ' 
212f4                 | ' function pslpeek(adr as ulong) as ulong
212f4                 | _pslpeek
212f4     00 CA 05 F6 | 	mov	COUNT_, #0
212f8     E8 00 A0 FD | 	call	#pushregs_
212fc     0C F0 07 F1 | 	add	ptra, #12
21300     49 95 02 F6 | 	mov	arg02, arg01
21304     E7 92 02 F6 | 	mov	arg01, fp
21308     08 92 06 F1 | 	add	arg01, #8
2130c     04 96 06 F6 | 	mov	arg03, #4
21310     0B 00 00 FF 
21314     CC 64 06 F1 | 	add	objptr, ##5836
21318     78 2A B0 FD | 	call	#_psram_spin2_read1
2131c     0B 00 00 FF 
21320     CC 64 86 F1 | 	sub	objptr, ##5836
21324                 | ' psram.read1(varptr(res),adr,4)
21324                 | ' return res
21324     08 CE 05 F1 | 	add	fp, #8
21328     E7 7A 02 FB | 	rdlong	result1, fp
2132c     08 CE 85 F1 | 	sub	fp, #8
21330     E7 F0 03 F6 | 	mov	ptra, fp
21334     F2 00 A0 FD | 	call	#popregs_
21338                 | _pslpeek_ret
21338     2D 00 64 FD | 	ret
2133c                 | 
2133c                 | ' 
2133c                 | ' function psdpeek(adr as ulong) as ulong
2133c                 | _psdpeek
2133c     00 CA 05 F6 | 	mov	COUNT_, #0
21340     E8 00 A0 FD | 	call	#pushregs_
21344     0C F0 07 F1 | 	add	ptra, #12
21348     49 95 02 F6 | 	mov	arg02, arg01
2134c     E7 92 02 F6 | 	mov	arg01, fp
21350     08 92 06 F1 | 	add	arg01, #8
21354     02 96 06 F6 | 	mov	arg03, #2
21358     0B 00 00 FF 
2135c     CC 64 06 F1 | 	add	objptr, ##5836
21360     30 2A B0 FD | 	call	#_psram_spin2_read1
21364     0B 00 00 FF 
21368     CC 64 86 F1 | 	sub	objptr, ##5836
2136c                 | ' psram.read1(varptr(res),adr,2)
2136c                 | ' return res
2136c     08 CE 05 F1 | 	add	fp, #8
21370     E7 7A E2 FA | 	rdword	result1, fp
21374     08 CE 85 F1 | 	sub	fp, #8
21378     E7 F0 03 F6 | 	mov	ptra, fp
2137c     F2 00 A0 FD | 	call	#popregs_
21380                 | _psdpeek_ret
21380     2D 00 64 FD | 	ret
21384                 | 
21384                 | ' 
21384                 | ' '' ------------------------------- USB keyboard scan to char translator
21384                 | ' 
21384                 | ' function scantochar(key)
21384                 | _scantochar
21384                 | ' 
21384                 | ' select case (key shr 8) and 255
21384     49 81 02 F6 | 	mov	_var01, arg01
21388     08 80 C6 F0 | 	sar	_var01, #8
2138c     FF 80 0E F5 | 	and	_var01, #255 wz
21390     24 00 90 AD |  if_e	jmp	#LR__2680
21394     02 80 0E F2 | 	cmp	_var01, #2 wz
21398     20 80 0E 52 |  if_ne	cmp	_var01, #32 wz
2139c     30 00 90 AD |  if_e	jmp	#LR__2681
213a0     40 80 0E F2 | 	cmp	_var01, #64 wz
213a4     44 00 90 AD |  if_e	jmp	#LR__2682
213a8     42 80 0E F2 | 	cmp	_var01, #66 wz
213ac     60 80 0E 52 |  if_ne	cmp	_var01, #96 wz
213b0     70 00 90 5D |  if_ne	jmp	#LR__2684
213b4     50 00 90 FD | 	jmp	#LR__2683
213b8                 | LR__2680
213b8     49 7B 02 F6 | 	mov	result1, arg01
213bc     7F 7A 06 F5 | 	and	result1, #127
213c0     02 7A 66 F0 | 	shl	result1, #2
213c4     35 7B 02 F1 | 	add	result1, ptr__dat__
213c8     3D 7B C2 FA | 	rdbyte	result1, result1
213cc     54 00 90 FD | 	jmp	#_scantochar_ret
213d0                 | LR__2681
213d0     49 7B 02 F6 | 	mov	result1, arg01
213d4     7F 7A 06 F5 | 	and	result1, #127
213d8     02 7A 66 F0 | 	shl	result1, #2
213dc     01 7A 06 F1 | 	add	result1, #1
213e0     35 7B 02 F1 | 	add	result1, ptr__dat__
213e4     3D 7B C2 FA | 	rdbyte	result1, result1
213e8     38 00 90 FD | 	jmp	#_scantochar_ret
213ec                 | LR__2682
213ec     49 7B 02 F6 | 	mov	result1, arg01
213f0     7F 7A 06 F5 | 	and	result1, #127
213f4     02 7A 66 F0 | 	shl	result1, #2
213f8     02 7A 06 F1 | 	add	result1, #2
213fc     35 7B 02 F1 | 	add	result1, ptr__dat__
21400     3D 7B C2 FA | 	rdbyte	result1, result1
21404     1C 00 90 FD | 	jmp	#_scantochar_ret
21408                 | LR__2683
21408     49 7B 02 F6 | 	mov	result1, arg01
2140c     7F 7A 06 F5 | 	and	result1, #127
21410     02 7A 66 F0 | 	shl	result1, #2
21414     03 7A 06 F1 | 	add	result1, #3
21418     35 7B 02 F1 | 	add	result1, ptr__dat__
2141c     3D 7B C2 FA | 	rdbyte	result1, result1
21420     00 00 90 FD | 	jmp	#_scantochar_ret
21424                 | LR__2684
21424                 | _scantochar_ret
21424     2D 00 64 FD | 	ret
21428                 | 
21428                 | _program
21428     01 CA 05 F6 | 	mov	COUNT_, #1
2142c     E8 00 A0 FD | 	call	#pushregs_
21430     A0 FC BF FD | 	call	#_startpsram
21434     38 00 00 FF 
21438     94 65 06 F1 | 	add	objptr, ##29076
2143c     32 93 02 FB | 	rdlong	arg01, objptr
21440     00 94 06 F6 | 	mov	arg02, #0
21444     F0 03 00 FF 
21448     00 96 06 F6 | 	mov	arg03, ##516096
2144c     2D 00 00 FF 
21450     C8 64 86 F1 | 	sub	objptr, ##23240
21454     CC 2E B0 FD | 	call	#_Audio2_004_spin2_start
21458     3E 97 02 F6 | 	mov	arg03, result2
2145c     2D 00 00 FF 
21460     B0 64 06 F1 | 	add	objptr, ##23216
21464     32 7B 62 FC | 	wrlong	result1, objptr
21468     14 64 06 F1 | 	add	objptr, #20
2146c     32 97 62 FC | 	wrlong	arg03, objptr
21470     38 00 00 FF 
21474     90 65 86 F1 | 	sub	objptr, ##29072
21478     32 92 06 F6 | 	mov	arg01, #50
2147c     7C 3B B0 FD | 	call	#__system___waitms
21480     38 00 00 FF 
21484     90 65 06 F1 | 	add	objptr, ##29072
21488     32 93 02 FB | 	rdlong	arg01, objptr
2148c     38 00 00 FF 
21490     90 65 86 F1 | 	sub	objptr, ##29072
21494     14 92 06 F1 | 	add	arg01, #20
21498     20 00 80 FF 
2149c     49 01 58 FC | 	wrword	##16384, arg01
214a0     20 2C B0 FD | 	call	#_usbnew_spin2_start
214a4     38 00 00 FF 
214a8     84 65 06 F1 | 	add	objptr, ##29060
214ac     32 7B 62 FC | 	wrlong	result1, objptr
214b0     38 00 00 FF 
214b4     84 65 86 F1 | 	sub	objptr, ##29060
214b8     40 92 06 F6 | 	mov	arg01, #64
214bc     00 94 06 F6 | 	mov	arg02, #0
214c0     00 96 06 F6 | 	mov	arg03, #0
214c4     4C FC BF FD | 	call	#_startvideo
214c8                 | '   mouse_limits[0] := xlim
214c8     0F 00 00 FF 
214cc     C8 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##7880
214d0     01 00 80 FF 
214d4     3B FF 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
214d8                 | '   mouse_limits[1] := ylim
214d8     04 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, #4
214dc     01 00 80 FF 
214e0     3B AF 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
214e4     32 93 02 F6 | 	mov	arg01, objptr
214e8     D5 93 06 F1 | 	add	arg01, #469
214ec                 | '   mouse_outptr := ptr
214ec     04 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, #4
214f0     3B 93 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
214f4     0F 00 00 FF 
214f8     D0 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7888
214fc     35 95 02 F6 | 	mov	arg02, ptr__dat__
21500     16 00 00 FF 
21504     CA 94 06 F1 | 	add	arg02, ##11466
21508     10 92 06 F6 | 	mov	arg01, #16
2150c     B0 0A B0 FD | 	call	#_hg010b_spin2_setspriteptr
21510     10 92 06 F6 | 	mov	arg01, #16
21514     20 94 06 F6 | 	mov	arg02, #32
21518     20 96 06 F6 | 	mov	arg03, #32
2151c     2C 0B B0 FD | 	call	#_hg010b_spin2_setspritesize
21520     09 92 C6 F9 | 	decod	arg01, #9
21524     2C 95 06 F6 | 	mov	arg02, #300
21528     EC 2C B0 FD | 	call	#_usbnew_spin2_mouse_move
2152c     32 97 02 F6 | 	mov	arg03, objptr
21530     52 00 00 FF 
21534     C4 64 06 F1 | 	add	objptr, ##42180
21538     32 95 02 F6 | 	mov	arg02, objptr
2153c     4A 97 62 FC | 	wrlong	arg03, arg02
21540     04 94 06 F1 | 	add	arg02, #4
21544     4A 71 62 FC | 	wrlong	ptr__housekeeper_, arg02
21548     2F 95 02 F6 | 	mov	arg02, entryptr__
2154c     1E 7A 06 F6 | 	mov	result1, #30
21550     28 64 62 FD | 	setq	objptr
21554     4A 7B F2 FC | 	coginit	result1, arg02 wc
21558     01 7A 66 C6 |  if_b	neg	result1, #1
2155c     04 64 86 F1 | 	sub	objptr, #4
21560     32 7B 62 FC | 	wrlong	result1, objptr
21564     01 00 00 FF 
21568     8C 65 06 F1 | 	add	objptr, ##908
2156c     32 01 68 FC | 	wrlong	#0, objptr
21570     1B 00 00 FF 
21574     98 64 86 F1 | 	sub	objptr, ##13976
21578     32 05 68 FC | 	wrlong	#2, objptr
2157c     04 64 06 F1 | 	add	objptr, #4
21580     32 27 69 FC | 	wrlong	#147, objptr
21584     04 64 06 F1 | 	add	objptr, #4
21588     32 35 69 FC | 	wrlong	#154, objptr
2158c     04 64 06 F1 | 	add	objptr, #4
21590     32 09 68 FC | 	wrlong	#4, objptr
21594     04 64 86 F1 | 	sub	objptr, #4
21598     32 7B 02 FB | 	rdlong	result1, objptr
2159c     14 64 86 F1 | 	sub	objptr, #20
215a0     32 7B 62 FC | 	wrlong	result1, objptr
215a4     04 64 06 F1 | 	add	objptr, #4
215a8     32 01 68 FC | 	wrlong	#0, objptr
215ac     04 64 06 F1 | 	add	objptr, #4
215b0     32 01 68 FC | 	wrlong	#0, objptr
215b4     19 00 00 FF 
215b8     0C 65 06 F1 | 	add	objptr, ##13068
215bc     32 03 68 FC | 	wrlong	#1, objptr
215c0     01 00 00 FF 
215c4     98 65 06 F1 | 	add	objptr, ##920
215c8     32 01 68 FC | 	wrlong	#0, objptr
215cc     35 97 02 F6 | 	mov	arg03, ptr__dat__
215d0     01 00 00 FF 
215d4     00 96 06 F1 | 	add	arg03, ##512
215d8     08 64 06 F1 | 	add	objptr, #8
215dc     32 97 62 FC | 	wrlong	arg03, objptr
215e0     04 64 86 F1 | 	sub	objptr, #4
215e4     03 00 80 FF 
215e8     32 3D 69 FC | 	wrlong	##1694, objptr
215ec     0D 00 00 FF 
215f0     74 64 86 F1 | 	sub	objptr, ##6772
215f4     32 19 68 FC | 	wrlong	#12, objptr
215f8     46 00 00 FF 
215fc     E4 65 86 F1 | 	sub	objptr, ##36324
21600     54 D7 BF FD | 	call	#_init_commands
21604     A0 F6 BF FD | 	call	#_init_error_strings
21608     08 EE BF FD | 	call	#_init_audio
2160c     70 3E BF FD | 	call	#_do_new
21610     38 00 00 FF 
21614     BC 65 06 F1 | 	add	objptr, ##29116
21618     32 93 02 FB | 	rdlong	arg01, objptr
2161c     04 64 86 F1 | 	sub	objptr, #4
21620     32 95 02 FB | 	rdlong	arg02, objptr
21624     38 00 00 FF 
21628     B8 65 86 F1 | 	sub	objptr, ##29112
2162c     B4 17 B0 FD | 	call	#_hg010b_spin2_cls
21630     38 00 00 FF 
21634     C0 65 06 F1 | 	add	objptr, ##29120
21638     32 93 02 FB | 	rdlong	arg01, objptr
2163c     38 00 00 FF 
21640     C0 65 86 F1 | 	sub	objptr, ##29120
21644     D0 15 B0 FD | 	call	#_hg010b_spin2_setfontfamily
21648                 | ' 
21648                 | ' leading_spaces:=amount
21648     01 00 00 FF 
2164c     B6 64 06 F1 | 	add	objptr, ##694
21650     32 05 68 FC | 	wrlong	#2, objptr
21654     01 00 00 FF 
21658     B6 64 86 F1 | 	sub	objptr, ##694
2165c     9D 01 00 FF 
21660     43 A6 06 F6 | 	mov	local01, ##@LR__6172
21664     3D 92 06 F6 | 	mov	arg01, #61
21668     3C 94 06 F6 | 	mov	arg02, #60
2166c     3B 96 06 F6 | 	mov	arg03, #59
21670     3A 98 06 F6 | 	mov	arg04, #58
21674     98 7D B0 FD | 	call	#__system___vfs_open_sdcardx
21678     3D 95 02 F6 | 	mov	arg02, result1
2167c     53 93 02 F6 | 	mov	arg01, local01
21680     50 3A B0 FD | 	call	#__system___mount
21684     9D 01 00 FF 
21688     47 92 06 F6 | 	mov	arg01, ##@LR__6173
2168c     08 3D B0 FD | 	call	#__system___chdir
21690     9D 01 00 FF 
21694     4F A6 06 F6 | 	mov	local01, ##@LR__6174
21698     4C 00 00 FF 
2169c     14 64 06 F1 | 	add	objptr, ##38932
216a0     32 A7 62 FC | 	wrlong	local01, objptr
216a4     13 00 00 FF 
216a8     60 64 86 F1 | 	sub	objptr, ##9824
216ac     32 93 02 FB | 	rdlong	arg01, objptr
216b0     38 00 00 FF 
216b4     B4 65 86 F1 | 	sub	objptr, ##29108
216b8     01 92 66 F0 | 	shl	arg01, #1
216bc     01 94 06 F6 | 	mov	arg02, #1
216c0     D4 15 B0 FD | 	call	#_hg010b_spin2_setcursorpos
216c4                 | ' init_commands
216c4                 | ' init_error_strings
216c4                 | ' init_audio
216c4                 | ' do_new
216c4                 | ' cls(ink, paper)
216c4                 | ' v.setfontfamily(font) 				' use ST Mono font
216c4                 | ' v.setleadingspaces(2)
216c4                 | ' mount "/sd", _vfs_open_sdcard()
216c4                 | ' chdir "/sd/bas"
216c4                 | ' currentdir$="/sd/bas"
216c4                 | ' position 2*editor_spaces,1 : print ver$
216c4     00 92 06 F6 | 	mov	arg01, #0
216c8     C0 8B B0 FD | 	call	#__system___getiolock_0622
216cc     3D 93 02 F6 | 	mov	arg01, result1
216d0     34 36 B0 FD | 	call	#__system___lockmem
216d4     18 00 00 FF 
216d8     40 6B 06 F1 | 	add	ptr__dat__, ##12608
216dc     35 95 02 FB | 	rdlong	arg02, ptr__dat__
216e0     18 00 00 FF 
216e4     40 6B 86 F1 | 	sub	ptr__dat__, ##12608
216e8     00 92 06 F6 | 	mov	arg01, #0
216ec     00 96 06 F6 | 	mov	arg03, #0
216f0     08 43 B0 FD | 	call	#__system___basic_print_string
216f4     00 92 06 F6 | 	mov	arg01, #0
216f8     0A 94 06 F6 | 	mov	arg02, #10
216fc     00 96 06 F6 | 	mov	arg03, #0
21700     A0 42 B0 FD | 	call	#__system___basic_print_char
21704     00 92 06 F6 | 	mov	arg01, #0
21708     80 8B B0 FD | 	call	#__system___getiolock_0622
2170c     3D 01 68 FC | 	wrlong	#0, result1
21710     54 00 00 FF 
21714     50 64 06 F1 | 	add	objptr, ##43088
21718     32 93 02 FB | 	rdlong	arg01, objptr
2171c     0F 00 00 FF 
21720     74 64 86 F1 | 	sub	objptr, ##7796
21724     32 A7 02 FB | 	rdlong	local01, objptr
21728     44 00 00 FF 
2172c     DC 65 86 F1 | 	sub	objptr, ##35292
21730     53 93 82 F1 | 	sub	arg01, local01
21734     00 94 06 F6 | 	mov	arg02, #0
21738     0A 96 06 F6 | 	mov	arg03, #10
2173c     C4 50 B0 FD | 	call	#__system__Number_S
21740     3D 93 02 F6 | 	mov	arg01, result1
21744     9D 01 00 FF 
21748     57 94 06 F6 | 	mov	arg02, ##@LR__6175
2174c     14 36 B0 FD | 	call	#__system___string_concat
21750     3D A7 02 F6 | 	mov	local01, result1
21754     52 00 00 FF 
21758     B8 64 06 F1 | 	add	objptr, ##42168
2175c     32 A7 62 FC | 	wrlong	local01, objptr
21760     52 00 00 FF 
21764     B8 64 86 F1 | 	sub	objptr, ##42168
21768                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
21768     00 92 06 F6 | 	mov	arg01, #0
2176c     1C 8B B0 FD | 	call	#__system___getiolock_0622
21770     3D 93 02 F6 | 	mov	arg01, result1
21774     90 35 B0 FD | 	call	#__system___lockmem
21778     52 00 00 FF 
2177c     B8 64 06 F1 | 	add	objptr, ##42168
21780     32 95 02 FB | 	rdlong	arg02, objptr
21784     52 00 00 FF 
21788     B8 64 86 F1 | 	sub	objptr, ##42168
2178c     00 92 06 F6 | 	mov	arg01, #0
21790     00 96 06 F6 | 	mov	arg03, #0
21794     64 42 B0 FD | 	call	#__system___basic_print_string
21798     00 92 06 F6 | 	mov	arg01, #0
2179c     0A 94 06 F6 | 	mov	arg02, #10
217a0     00 96 06 F6 | 	mov	arg03, #0
217a4     FC 41 B0 FD | 	call	#__system___basic_print_char
217a8     00 92 06 F6 | 	mov	arg01, #0
217ac     DC 8A B0 FD | 	call	#__system___getiolock_0622
217b0     3D 01 68 FC | 	wrlong	#0, result1
217b4     38 00 00 FF 
217b8     B4 65 06 F1 | 	add	objptr, ##29108
217bc     32 93 02 FB | 	rdlong	arg01, objptr
217c0     38 00 00 FF 
217c4     B4 65 86 F1 | 	sub	objptr, ##29108
217c8     01 92 66 F0 | 	shl	arg01, #1
217cc     04 94 06 F6 | 	mov	arg02, #4
217d0     C4 14 B0 FD | 	call	#_hg010b_spin2_setcursorpos
217d4                 | ' position 2*editor_spaces,4 : print "Ready"
217d4     00 92 06 F6 | 	mov	arg01, #0
217d8     B0 8A B0 FD | 	call	#__system___getiolock_0622
217dc     3D 93 02 F6 | 	mov	arg01, result1
217e0     24 35 B0 FD | 	call	#__system___lockmem
217e4     9D 01 00 FF 
217e8     69 94 06 F6 | 	mov	arg02, ##@LR__6176
217ec     00 92 06 F6 | 	mov	arg01, #0
217f0     00 96 06 F6 | 	mov	arg03, #0
217f4     04 42 B0 FD | 	call	#__system___basic_print_string
217f8     00 92 06 F6 | 	mov	arg01, #0
217fc     0A 94 06 F6 | 	mov	arg02, #10
21800     00 96 06 F6 | 	mov	arg03, #0
21804     9C 41 B0 FD | 	call	#__system___basic_print_char
21808     00 92 06 F6 | 	mov	arg01, #0
2180c     7C 8A B0 FD | 	call	#__system___getiolock_0622
21810     3D 01 68 FC | 	wrlong	#0, result1
21814     00 94 06 F6 | 	mov	arg02, #0
21818     01 94 D6 F7 | 	test	arg02, #1 wc
2181c     5A 4C 64 FD | 	drvc	#38
21820     01 94 D6 F7 | 	test	arg02, #1 wc
21824     5A 4E 64 FD | 	drvc	#39
21828     9D 01 00 FF 
2182c     6F A6 06 F6 | 	mov	local01, ##@LR__6177
21830     54 00 00 FF 
21834     7C 64 06 F1 | 	add	objptr, ##43132
21838     32 A7 62 FC | 	wrlong	local01, objptr
2183c     04 64 06 F1 | 	add	objptr, #4
21840     FF FF FF FF 
21844     32 FF 6B FC | 	wrlong	##-1, objptr
21848     0C 64 06 F1 | 	add	objptr, #12
2184c     32 01 68 FC | 	wrlong	#0, objptr
21850     54 00 00 FF 
21854     8C 64 86 F1 | 	sub	objptr, ##43148
21858                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
21858                 | ' loadname="noname.bas"
21858                 | ' do_insert=-1
21858                 | ' inload=0
21858                 | ' 
21858                 | ' open "/sd/bas/autorun.bas" for input as #9
21858     9D 01 00 FF 
2185c     7A 94 06 F6 | 	mov	arg02, ##@LR__6178
21860     09 92 06 F6 | 	mov	arg01, #9
21864     00 96 06 F6 | 	mov	arg03, #0
21868     4C 40 B0 FD | 	call	#__system___basic_open_string
2186c     20 68 06 F1 | 	add	ptr___system__dat__, #32
21870     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
21874     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
21878     20 68 86 F1 | 	sub	ptr___system__dat__, #32
2187c     54 00 00 FF 
21880     90 64 06 F1 | 	add	objptr, ##43152
21884     32 7B 62 FC | 	wrlong	result1, objptr
21888     54 00 00 FF 
2188c     90 64 86 F1 | 	sub	objptr, ##43152
21890                 | ' err=geterr()
21890                 | ' close #9
21890     09 92 06 F6 | 	mov	arg01, #9
21894     4C 80 B0 FD | 	call	#__system__close
21898                 | ' if err=0 then line$="run autorun.bas" : interpret
21898     54 00 00 FF 
2189c     90 64 06 F1 | 	add	objptr, ##43152
218a0     32 A7 0A FB | 	rdlong	local01, objptr wz
218a4     54 00 00 FF 
218a8     90 64 86 F1 | 	sub	objptr, ##43152
218ac     9D 01 00 AF 
218b0     8E A6 06 A6 |  if_e	mov	local01, ##@LR__6179
218b4     38 00 00 AF 
218b8     9C 65 06 A1 |  if_e	add	objptr, ##29084
218bc     32 A7 62 AC |  if_e	wrlong	local01, objptr
218c0     38 00 00 AF 
218c4     9C 65 86 A1 |  if_e	sub	objptr, ##29084
218c8     7C 00 BE AD |  if_e	call	#_interpret
218cc                 | ' 
218cc                 | ' 
218cc                 | ' '-------------------------------------------------------------------------------------------------------- 
218cc                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
218cc                 | ' '--------------------------------------------------------------------------------------------------------
218cc                 | ' 
218cc                 | ' do
218cc                 | LR__2690
218cc     34 F0 BD FD | 	call	#_edit
218d0     3D A7 02 F6 | 	mov	local01, result1
218d4     38 00 00 FF 
218d8     9C 65 06 F1 | 	add	objptr, ##29084
218dc     32 A7 62 FC | 	wrlong	local01, objptr
218e0     38 00 00 FF 
218e4     9C 65 86 F1 | 	sub	objptr, ##29084
218e8     5C 00 BE FD | 	call	#_interpret
218ec     9D 01 00 FF 
218f0     9E A6 06 F6 | 	mov	local01, ##@LR__6180
218f4     38 00 00 FF 
218f8     9C 65 06 F1 | 	add	objptr, ##29084
218fc     32 A7 62 FC | 	wrlong	local01, objptr
21900     38 00 00 FF 
21904     9C 65 86 F1 | 	sub	objptr, ##29084
21908     C0 FF 9F FD | 	jmp	#LR__2690
2190c     E7 F0 03 F6 | 	mov	ptra, fp
21910     F2 00 A0 FD | 	call	#popregs_
21914                 | _program_ret
21914     2D 00 64 FD | 	ret
21918                 | 
21918                 | ' '' this is not a main program.
21918                 | ' 
21918                 | ' '****************************************************************************************************************
21918                 | ' '                                                                                                             	*
21918                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
21918                 | ' '                                                                                                            	*
21918                 | ' ' base - HDMI base pin												*
21918                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
21918                 | ' '														*
21918                 | ' '														*
21918                 | ' '****************************************************************************************************************
21918                 | ' 
21918                 | ' pub start(base,mb):result |i
21918                 | _hg010b_spin2_start
21918                 | ' 
21918                 | ' '--------------------------- initialize pointers and variables
21918                 | ' 
21918                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
21918     34 64 06 F1 | 	add	objptr, #52
2191c     32 7B 02 F6 | 	mov	result1, objptr
21920     28 64 86 F1 | 	sub	objptr, #40
21924     32 7B 62 FC | 	wrlong	result1, objptr
21928                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
21928                 | ' hdmibase:=base							' HDMI base pin, 8*n
21928     18 64 06 F1 | 	add	objptr, #24
2192c     32 93 62 FC | 	wrlong	arg01, objptr
21930                 | ' mailbox_ptr:=mb		
21930     04 64 06 F1 | 	add	objptr, #4
21934     32 95 62 FC | 	wrlong	arg02, objptr
21938                 | ' mailbox0:=mb				' PSRAM mailbox pointer
21938     C1 65 06 F1 | 	add	objptr, #449
2193c     32 95 62 FC | 	wrlong	arg02, objptr
21940                 | ' sprite_ptr:=@spr1ptr
21940     D8 64 86 F1 | 	sub	objptr, #216
21944     32 7B 02 F6 | 	mov	result1, objptr
21948     E5 64 86 F1 | 	sub	objptr, #229
2194c     32 7B 62 FC | 	wrlong	result1, objptr
21950                 | ' 
21950                 | ' 		'
21950                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
21950     E5 64 06 F1 | 	add	objptr, #229
21954     32 7B 02 FB | 	rdlong	result1, objptr
21958     D0 7A 06 F1 | 	add	result1, #208
2195c     3D 11 58 FC | 	wrword	#8, result1
21960                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
21960     32 97 02 FB | 	rdlong	arg03, objptr
21964     D2 96 06 F1 | 	add	arg03, #210
21968     4B 21 58 FC | 	wrword	#16, arg03
2196c                 | ' leading_spaces:=0				'
2196c     A5 65 06 F1 | 	add	objptr, #421
21970     32 01 68 FC | 	wrlong	#0, objptr
21974                 | ' 
21974                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
21974     99 64 86 F1 | 	sub	objptr, #153
21978     00 00 A0 FF 
2197c     32 0F 68 FC | 	wrlong	##1073741831, objptr
21980                 | ' emptydl[1]:=0
21980     04 64 06 F1 | 	add	objptr, #4
21984     32 01 68 FC | 	wrlong	#0, objptr
21988                 | ' 
21988                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
21988                 | ' 
21988                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
21988     28 65 86 F1 | 	sub	objptr, #296
2198c     32 03 68 FC | 	wrlong	#1, objptr
21990                 | ' if s_debug<>0
21990                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
21990     20 00 80 FF 
21994     32 01 68 FC | 	wrlong	##16384, objptr
21998     F9 64 86 F1 | 	sub	objptr, #249
2199c                 | ' setmode()							' set the mode, see below
2199c     18 03 B0 FD | 	call	#_hg010b_spin2_setmode
219a0                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
219a0     49 64 06 F1 | 	add	objptr, #73
219a4     32 7B 02 F6 | 	mov	result1, objptr
219a8     35 64 86 F1 | 	sub	objptr, #53
219ac     32 7B 62 FC | 	wrlong	result1, objptr
219b0                 | ' cursor_ptr:=@cursor_x						
219b0     28 64 06 F1 | 	add	objptr, #40
219b4     32 97 02 F6 | 	mov	arg03, objptr
219b8     2C 64 86 F1 | 	sub	objptr, #44
219bc     32 97 62 FC | 	wrlong	arg03, objptr
219c0                 | ' fontnum:=0  							' start with a PC type font 
219c0     55 64 06 F1 | 	add	objptr, #85
219c4     32 01 68 FC | 	wrlong	#0, objptr
219c8                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
219c8     1C 64 06 F1 | 	add	objptr, #28
219cc     32 93 02 F6 | 	mov	arg01, objptr
219d0     81 64 86 F1 | 	sub	objptr, #129
219d4     37 95 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
219d8     1C 00 00 FF 
219dc     80 94 06 F1 | 	add	arg02, ##14464
219e0     10 96 06 F6 | 	mov	arg03, #16
219e4     D0 31 B0 FD | 	call	#__system____builtin_memmove
219e8                 | ' leading_spaces:=0
219e8     01 00 00 FF 
219ec     B6 64 06 F1 | 	add	objptr, ##694
219f0     32 01 68 FC | 	wrlong	#0, objptr
219f4     01 00 00 FF 
219f8     B6 64 86 F1 | 	sub	objptr, ##694
219fc                 | ' '---------------------------- initialize a cursor (MSDOS type)
219fc                 | ' 
219fc                 | ' initcursor(154)
219fc     9A 92 06 F6 | 	mov	arg01, #154
21a00     74 00 B0 FD | 	call	#_hg010b_spin2_initcursor
21a04                 | ' 
21a04                 | ' '---------------------------- start the cog
21a04                 | ' 
21a04                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
21a04     37 95 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
21a08     1C 00 00 FF 
21a0c     90 94 06 F1 | 	add	arg02, ##14480
21a10     32 97 02 F6 | 	mov	arg03, objptr
21a14     14 96 06 F1 | 	add	arg03, #20
21a18     10 7A 06 F6 | 	mov	result1, #16
21a1c     28 96 62 FD | 	setq	arg03
21a20     4A 7B F2 FC | 	coginit	result1, arg02 wc
21a24     01 7A 66 C6 |  if_b	neg	result1, #1
21a28     30 64 06 F1 | 	add	objptr, #48
21a2c     32 7B 62 FC | 	wrlong	result1, objptr
21a30     30 64 86 F1 | 	sub	objptr, #48
21a34                 | ' waitms(40)							' wait for stabilize
21a34     28 92 06 F6 | 	mov	arg01, #40
21a38     C0 35 B0 FD | 	call	#__system___waitms
21a3c                 | ' return cog							' return the driver's cog #
21a3c     30 64 06 F1 | 	add	objptr, #48
21a40     32 7B 02 FB | 	rdlong	result1, objptr
21a44     30 64 86 F1 | 	sub	objptr, #48
21a48                 | _hg010b_spin2_start_ret
21a48     2D 00 64 FD | 	ret
21a4c                 | 
21a4c                 | ' 
21a4c                 | ' 
21a4c                 | ' '**************************************************************************************************************** 
21a4c                 | ' '                                                                                                             	*
21a4c                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
21a4c                 | ' '  Mode number - see start() above or bits below								*
21a4c                 | ' '                                                                                                             	*
21a4c                 | ' '****************************************************************************************************************
21a4c                 | ' 
21a4c                 | ' 
21a4c                 | ' pub restorepalette()
21a4c                 | _hg010b_spin2_restorepalette
21a4c                 | ' 
21a4c                 | ' longmove(@ataripalette,@ataripalette2,256)
21a4c     18 00 00 FF 
21a50     40 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##12352
21a54     37 93 02 F6 | 	mov	arg01, ptr__hg010b_spin2_dat__
21a58     02 00 00 FF 
21a5c     00 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
21a60     37 95 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
21a64     1A 00 00 FF 
21a68     40 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##13376
21a6c     00 97 06 F6 | 	mov	arg03, #256
21a70     D8 31 B0 FD | 	call	#__system__longmove
21a74                 | _hg010b_spin2_restorepalette_ret
21a74     2D 00 64 FD | 	ret
21a78                 | 
21a78                 | ' 
21a78                 | ' '---------------------------- initialize a cursor (MSDOS type)
21a78                 | ' pub initcursor(color) |i
21a78                 | _hg010b_spin2_initcursor
21a78     03 CA 05 F6 | 	mov	COUNT_, #3
21a7c     E8 00 A0 FD | 	call	#pushregs_
21a80     49 A7 02 F6 | 	mov	local01, arg01
21a84                 | ' 
21a84                 | ' cursor_x:=0							' place the cursor at 0:0
21a84     3C 64 06 F1 | 	add	objptr, #60
21a88     32 01 58 FC | 	wrword	#0, objptr
21a8c                 | ' cursor_y:=0
21a8c     02 64 06 F1 | 	add	objptr, #2
21a90     32 01 48 FC | 	wrbyte	#0, objptr
21a94                 | ' repeat i from 0 to 111
21a94     00 A8 06 F6 | 	mov	local02, #0
21a98     F8 65 06 F1 | 	add	objptr, #504
21a9c     D7 0C 48 FB | 	callpa	#(@LR__2701-@LR__2700)>>2,fcache_load_ptr_
21aa0                 | LR__2700
21aa0                 | '   cursor[i]:=0
21aa0     54 AB 02 F6 | 	mov	local03, local02
21aa4     32 AB 02 F1 | 	add	local03, objptr
21aa8     55 01 48 FC | 	wrbyte	#0, local03
21aac     01 A8 06 F1 | 	add	local02, #1
21ab0     70 A8 56 F2 | 	cmps	local02, #112 wc
21ab4     E8 FF 9F CD |  if_b	jmp	#LR__2700
21ab8                 | LR__2701
21ab8                 | ' repeat i from 112 to 127
21ab8     70 A8 06 F6 | 	mov	local02, #112
21abc     D7 0C 48 FB | 	callpa	#(@LR__2703-@LR__2702)>>2,fcache_load_ptr_
21ac0                 | LR__2702
21ac0                 | '   cursor[i]:=color  
21ac0     54 AB 02 F6 | 	mov	local03, local02
21ac4     32 AB 02 F1 | 	add	local03, objptr
21ac8     55 A7 42 FC | 	wrbyte	local01, local03
21acc     01 A8 06 F1 | 	add	local02, #1
21ad0     80 A8 16 F2 | 	cmp	local02, #128 wc
21ad4     E8 FF 9F CD |  if_b	jmp	#LR__2702
21ad8                 | LR__2703
21ad8     01 00 00 FF 
21adc     36 64 86 F1 | 	sub	objptr, ##566
21ae0                 | ' 'repeat i from 0 to 127
21ae0                 | ' '  if ((i/8)//2)
21ae0                 | ' '    cursor[i]:=15
21ae0                 | ' '  else
21ae0                 | ' '    cursor[i]:=0
21ae0                 | ' '  if i>=120    
21ae0                 | ' '    cursor[i]:=40
21ae0                 | ' setspriteptr(17,@cursor)
21ae0     32 95 02 F6 | 	mov	arg02, objptr
21ae4     01 00 00 FF 
21ae8     36 94 06 F1 | 	add	arg02, ##566
21aec     11 92 06 F6 | 	mov	arg01, #17
21af0     CC 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
21af4                 | ' setspritesize(17,8,16)
21af4     11 92 06 F6 | 	mov	arg01, #17
21af8     08 94 06 F6 | 	mov	arg02, #8
21afc     10 96 06 F6 | 	mov	arg03, #16
21b00     48 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
21b04                 | ' setspritepos(17,0,0)
21b04     11 92 06 F6 | 	mov	arg01, #17
21b08     00 94 06 F6 | 	mov	arg02, #0
21b0c     00 96 06 F6 | 	mov	arg03, #0
21b10     D0 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
21b14                 | ' cursorshape:=14
21b14     0B 00 00 FF 
21b18     C6 64 06 F1 | 	add	objptr, ##5830
21b1c     32 1D 68 FC | 	wrlong	#14, objptr
21b20                 | ' cursorcolor:=color
21b20     04 64 86 F1 | 	sub	objptr, #4
21b24     32 A7 62 FC | 	wrlong	local01, objptr
21b28     0B 00 00 FF 
21b2c     C2 64 86 F1 | 	sub	objptr, ##5826
21b30     E7 F0 03 F6 | 	mov	ptra, fp
21b34     F2 00 A0 FD | 	call	#popregs_
21b38                 | _hg010b_spin2_initcursor_ret
21b38     2D 00 64 FD | 	ret
21b3c                 | 
21b3c                 | ' 
21b3c                 | ' pub setcursorshape(shape) | i
21b3c                 | _hg010b_spin2_setcursorshape
21b3c                 | ' 
21b3c                 | ' cursorshape:=shape
21b3c     0B 00 00 FF 
21b40     C6 64 06 F1 | 	add	objptr, ##5830
21b44     32 93 62 FC | 	wrlong	arg01, objptr
21b48                 | ' repeat i from 0 to (8*cursorshape)-1
21b48     00 80 06 F6 | 	mov	_var01, #0
21b4c     49 83 02 F6 | 	mov	_var02, arg01
21b50     03 82 66 F0 | 	shl	_var02, #3
21b54     01 82 86 F1 | 	sub	_var02, #1
21b58     00 82 56 F2 | 	cmps	_var02, #0 wc
21b5c     01 84 86 F6 | 	negc	_var03, #1
21b60     42 87 02 F6 | 	mov	_var04, _var03
21b64     42 83 02 F1 | 	add	_var02, _var03
21b68     0A 00 00 FF 
21b6c     90 64 86 F1 | 	sub	objptr, ##5264
21b70     D7 0C 48 FB | 	callpa	#(@LR__2711-@LR__2710)>>2,fcache_load_ptr_
21b74                 | LR__2710
21b74                 | '   cursor[i]:=0
21b74     40 85 02 F6 | 	mov	_var03, _var01
21b78     32 85 02 F1 | 	add	_var03, objptr
21b7c     42 01 48 FC | 	wrbyte	#0, _var03
21b80     43 81 02 F1 | 	add	_var01, _var04
21b84     41 81 0A F2 | 	cmp	_var01, _var02 wz
21b88     E8 FF 9F 5D |  if_ne	jmp	#LR__2710
21b8c                 | LR__2711
21b8c                 | ' repeat i from 8*cursorshape to 127
21b8c     0A 00 00 FF 
21b90     90 64 06 F1 | 	add	objptr, ##5264
21b94     32 87 02 FB | 	rdlong	_var04, objptr
21b98     43 81 02 F6 | 	mov	_var01, _var04
21b9c     03 80 66 F0 | 	shl	_var01, #3
21ba0     0B 00 00 FF 
21ba4     C6 64 86 F1 | 	sub	objptr, ##5830
21ba8     03 86 66 F0 | 	shl	_var04, #3
21bac     80 86 56 F2 | 	cmps	_var04, #128 wc
21bb0     01 84 A6 F6 | 	negnc	_var03, #1
21bb4     7F 82 06 F6 | 	mov	_var02, #127
21bb8     42 83 02 F1 | 	add	_var02, _var03
21bbc     D7 1A 48 FB | 	callpa	#(@LR__2713-@LR__2712)>>2,fcache_load_ptr_
21bc0                 | LR__2712
21bc0                 | '   cursor[i]:=cursorcolor
21bc0     40 87 02 F6 | 	mov	_var04, _var01
21bc4     01 00 00 FF 
21bc8     36 64 06 F1 | 	add	objptr, ##566
21bcc     32 87 02 F1 | 	add	_var04, objptr
21bd0     0A 00 00 FF 
21bd4     8C 64 06 F1 | 	add	objptr, ##5260
21bd8     32 93 02 FB | 	rdlong	arg01, objptr
21bdc     0B 00 00 FF 
21be0     C2 64 86 F1 | 	sub	objptr, ##5826
21be4     43 93 42 FC | 	wrbyte	arg01, _var04
21be8     42 81 02 F1 | 	add	_var01, _var03
21bec     41 81 0A F2 | 	cmp	_var01, _var02 wz
21bf0     CC FF 9F 5D |  if_ne	jmp	#LR__2712
21bf4                 | LR__2713
21bf4                 | _hg010b_spin2_setcursorshape_ret
21bf4     2D 00 64 FD | 	ret
21bf8                 | 
21bf8                 | ' 
21bf8                 | ' pub setcursorcolor(color) | i
21bf8                 | _hg010b_spin2_setcursorcolor
21bf8                 | ' 
21bf8                 | ' cursorcolor:=color
21bf8     0B 00 00 FF 
21bfc     C2 64 06 F1 | 	add	objptr, ##5826
21c00     32 93 62 FC | 	wrlong	arg01, objptr
21c04                 | ' repeat i from 0 to (8*cursorshape)-1
21c04     00 92 06 F6 | 	mov	arg01, #0
21c08     04 64 06 F1 | 	add	objptr, #4
21c0c     32 81 02 FB | 	rdlong	_var01, objptr
21c10     03 80 66 F0 | 	shl	_var01, #3
21c14     01 80 86 F1 | 	sub	_var01, #1
21c18     00 80 56 F2 | 	cmps	_var01, #0 wc
21c1c     01 82 86 F6 | 	negc	_var02, #1
21c20     41 85 02 F6 | 	mov	_var03, _var02
21c24     41 81 02 F1 | 	add	_var01, _var02
21c28     0A 00 00 FF 
21c2c     90 64 86 F1 | 	sub	objptr, ##5264
21c30     D7 0C 48 FB | 	callpa	#(@LR__2721-@LR__2720)>>2,fcache_load_ptr_
21c34                 | LR__2720
21c34                 | '   cursor[i]:=0
21c34     49 83 02 F6 | 	mov	_var02, arg01
21c38     32 83 02 F1 | 	add	_var02, objptr
21c3c     41 01 48 FC | 	wrbyte	#0, _var02
21c40     42 93 02 F1 | 	add	arg01, _var03
21c44     40 93 0A F2 | 	cmp	arg01, _var01 wz
21c48     E8 FF 9F 5D |  if_ne	jmp	#LR__2720
21c4c                 | LR__2721
21c4c                 | ' repeat i from 8*cursorshape to 127
21c4c     0A 00 00 FF 
21c50     90 64 06 F1 | 	add	objptr, ##5264
21c54     32 85 02 FB | 	rdlong	_var03, objptr
21c58     42 93 02 F6 | 	mov	arg01, _var03
21c5c     03 92 66 F0 | 	shl	arg01, #3
21c60     0B 00 00 FF 
21c64     C6 64 86 F1 | 	sub	objptr, ##5830
21c68     03 84 66 F0 | 	shl	_var03, #3
21c6c     80 84 56 F2 | 	cmps	_var03, #128 wc
21c70     01 82 A6 F6 | 	negnc	_var02, #1
21c74     7F 80 06 F6 | 	mov	_var01, #127
21c78     41 81 02 F1 | 	add	_var01, _var02
21c7c     D7 1A 48 FB | 	callpa	#(@LR__2723-@LR__2722)>>2,fcache_load_ptr_
21c80                 | LR__2722
21c80                 | '   cursor[i]:=cursorcolor
21c80     49 85 02 F6 | 	mov	_var03, arg01
21c84     01 00 00 FF 
21c88     36 64 06 F1 | 	add	objptr, ##566
21c8c     32 85 02 F1 | 	add	_var03, objptr
21c90     0A 00 00 FF 
21c94     8C 64 06 F1 | 	add	objptr, ##5260
21c98     32 87 02 FB | 	rdlong	_var04, objptr
21c9c     0B 00 00 FF 
21ca0     C2 64 86 F1 | 	sub	objptr, ##5826
21ca4     42 87 42 FC | 	wrbyte	_var04, _var03
21ca8     41 93 02 F1 | 	add	arg01, _var02
21cac     40 93 0A F2 | 	cmp	arg01, _var01 wz
21cb0     CC FF 9F 5D |  if_ne	jmp	#LR__2722
21cb4                 | LR__2723
21cb4                 | _hg010b_spin2_setcursorcolor_ret
21cb4     2D 00 64 FD | 	ret
21cb8                 | 
21cb8                 | '   
21cb8                 | '   
21cb8                 | '   
21cb8                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
21cb8                 | _hg010b_spin2_setmode
21cb8     02 CA 05 F6 | 	mov	COUNT_, #2
21cbc     E8 00 A0 FD | 	call	#pushregs_
21cc0                 | ' 
21cc0                 | ' 
21cc0                 | ' dl_ptr:=@emptydl[0]
21cc0     01 00 00 FF 
21cc4     1D 64 06 F1 | 	add	objptr, ##541
21cc8     32 9B 02 F6 | 	mov	arg05, objptr
21ccc     FD 65 86 F1 | 	sub	objptr, #509
21cd0     32 9B 62 FC | 	wrlong	arg05, objptr
21cd4                 | ' 
21cd4                 | ' if cog>0 
21cd4     10 64 06 F1 | 	add	objptr, #16
21cd8     32 9B 02 FB | 	rdlong	arg05, objptr
21cdc     30 64 86 F1 | 	sub	objptr, #48
21ce0     01 9A 56 F2 | 	cmps	arg05, #1 wc
21ce4                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
21ce4     01 92 06 36 |  if_ae	mov	arg01, #1
21ce8     58 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
21cec                 | ' xres:=1024
21cec     01 00 00 FF 
21cf0     26 64 06 F1 | 	add	objptr, ##550
21cf4     02 00 80 FF 
21cf8     32 01 68 FC | 	wrlong	##1024, objptr
21cfc                 | ' yres:=600
21cfc     04 64 06 F1 | 	add	objptr, #4
21d00     01 00 80 FF 
21d04     32 B1 68 FC | 	wrlong	##600, objptr
21d08                 | ' ppl:=(timings[3])
21d08     1C 00 00 FF 
21d0c     4C 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14412
21d10     37 9B 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
21d14     51 65 86 F1 | 	sub	objptr, #337
21d18     32 9B 62 FC | 	wrlong	arg05, objptr
21d1c                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
21d1c     10 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, #16
21d20     37 A7 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
21d24     01 A6 66 F0 | 	shl	local01, #1
21d28     80 64 86 F1 | 	sub	objptr, #128
21d2c     32 A7 62 FC | 	wrlong	local01, objptr
21d30                 | ' cpl1:=cpl '' todo remove
21d30     04 64 06 F1 | 	add	objptr, #4
21d34     32 A7 62 FC | 	wrlong	local01, objptr
21d38                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
21d38     04 00 00 FF 
21d3c     1C 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##2076
21d40     41 64 86 F1 | 	sub	objptr, #65
21d44     32 6F 62 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
21d48                 | ' repeat i from 0 to 3
21d48     00 A8 06 F6 | 	mov	local02, #0
21d4c     04 00 00 FF 
21d50     00 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##2048
21d54     08 64 06 F1 | 	add	objptr, #8
21d58     D7 20 48 FB | 	callpa	#(@LR__2731-@LR__2730)>>2,fcache_load_ptr_
21d5c                 | LR__2730
21d5c                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
21d5c     54 A7 02 F6 | 	mov	local01, local02
21d60     02 A6 66 F0 | 	shl	local01, #2
21d64     37 A7 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
21d68     32 9B 02 FB | 	rdlong	arg05, objptr
21d6c     11 9A 66 F0 | 	shl	arg05, #17
21d70     53 A7 02 FB | 	rdlong	local01, local01
21d74     4D A7 02 F1 | 	add	local01, arg05
21d78     80 40 38 FF 
21d7c     00 A6 06 F1 | 	add	local01, ##1887502336
21d80     54 9B 02 F6 | 	mov	arg05, local02
21d84     02 9A 66 F0 | 	shl	arg05, #2
21d88     37 9B 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
21d8c     4D A7 62 FC | 	wrlong	local01, arg05
21d90     01 A8 06 F1 | 	add	local02, #1
21d94     04 A8 56 F2 | 	cmps	local02, #4 wc
21d98     C0 FF 9F CD |  if_b	jmp	#LR__2730
21d9c                 | LR__2731
21d9c     24 64 86 F1 | 	sub	objptr, #36
21da0     1C 00 00 FF 
21da4     40 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14400
21da8                 | ' 'clkfreq:=timings[9]					    	' set the clock frequency for the mode
21da8                 | ' 'hubset(timings[10])
21da8                 | ' waitms(1)                                                   	' wait for stabilization
21da8     01 92 06 F6 | 	mov	arg01, #1
21dac     4C 32 B0 FD | 	call	#__system___waitms
21db0     1C 00 00 FF 
21db4     6C 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14444
21db8     37 A9 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
21dbc     61 64 06 F1 | 	add	objptr, #97
21dc0     32 A9 62 FC | 	wrlong	local02, objptr
21dc4     54 A7 52 F6 | 	abs	local01, local02 wc
21dc8     04 A6 46 F0 | 	shr	local01, #4
21dcc     53 A7 82 F6 | 	negc	local01, local01
21dd0     9C 64 06 F1 | 	add	objptr, #156
21dd4     32 A7 62 FC | 	wrlong	local01, objptr
21dd8     A4 64 86 F1 | 	sub	objptr, #164
21ddc     32 A9 02 FB | 	rdlong	local02, objptr
21de0     08 64 06 F1 | 	add	objptr, #8
21de4     32 A7 02 FB | 	rdlong	local01, objptr
21de8     53 A9 02 FD | 	qmul	local02, local01
21dec                 | ' lines:=timings[11]
21dec                 | ' t_lines:=lines/16
21dec                 | ' buflen:=cpl*lines						' framebuffer length in longs
21dec     29 64 86 F1 | 	sub	objptr, #41
21df0     19 A6 C6 F9 | 	decod	local01, #25
21df4     10 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
21df8     18 A8 62 FD | 	getqx	local02
21dfc     32 A9 62 FC | 	wrlong	local02, objptr
21e00     38 64 86 F1 | 	sub	objptr, #56
21e04     02 A8 66 F0 | 	shl	local02, #2
21e08     54 A7 82 F1 | 	sub	local01, local02
21e0c     32 A7 62 FC | 	wrlong	local01, objptr
21e10     FD 64 06 F1 | 	add	objptr, #253
21e14     32 A9 02 FB | 	rdlong	local02, objptr
21e18     37 9B 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
21e1c     4D A9 02 FD | 	qmul	local02, arg05
21e20                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
21e20                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
21e20     F9 64 86 F1 | 	sub	objptr, #249
21e24                 | ' mode_ptr:=@timings						' set pointers to timings
21e24     1C 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
21e28                 | ' graphmode:=1024+512+192+48							' det global variable
21e28                 | ' makedl(graphmode)							' make a DL for the mode
21e28     03 00 00 FF 
21e2c     F0 92 06 F6 | 	mov	arg01, ##1776
21e30     18 A8 62 FD | 	getqx	local02
21e34     54 A7 82 F1 | 	sub	local01, local02
21e38     32 A7 62 FC | 	wrlong	local01, objptr
21e3c     14 64 06 F1 | 	add	objptr, #20
21e40     32 6F 62 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
21e44     79 64 06 F1 | 	add	objptr, #121
21e48     03 00 80 FF 
21e4c     32 E1 69 FC | 	wrlong	##1776, objptr
21e50     91 64 86 F1 | 	sub	objptr, #145
21e54     1C 00 00 FF 
21e58     40 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14400
21e5c     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
21e60                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
21e60     32 A7 02 FB | 	rdlong	local01, objptr
21e64     DD 64 06 F1 | 	add	objptr, #221
21e68     32 A7 62 FC | 	wrlong	local01, objptr
21e6c                 | ' s_font_ptr:=font_ptr
21e6c     D5 64 86 F1 | 	sub	objptr, #213
21e70     32 A7 02 FB | 	rdlong	local01, objptr
21e74     D9 64 06 F1 | 	add	objptr, #217
21e78     32 A7 62 FC | 	wrlong	local01, objptr
21e7c                 | ' s_lines:=lines
21e7c     80 64 86 F1 | 	sub	objptr, #128
21e80     32 A7 02 FB | 	rdlong	local01, objptr
21e84     84 64 06 F1 | 	add	objptr, #132
21e88     32 A7 62 FC | 	wrlong	local01, objptr
21e8c                 | ' s_buflen:=buflen
21e8c     AD 64 86 F1 | 	sub	objptr, #173
21e90     32 A7 02 FB | 	rdlong	local01, objptr
21e94     B5 64 06 F1 | 	add	objptr, #181
21e98     32 A7 62 FC | 	wrlong	local01, objptr
21e9c                 | ' s_cpl:=cpl
21e9c     94 64 86 F1 | 	sub	objptr, #148
21ea0     32 A7 02 FB | 	rdlong	local01, objptr
21ea4     90 64 06 F1 | 	add	objptr, #144
21ea8     32 A7 62 FC | 	wrlong	local01, objptr
21eac                 | ' s_cpl1:=cpl
21eac     90 64 86 F1 | 	sub	objptr, #144
21eb0     32 A7 02 FB | 	rdlong	local01, objptr
21eb4     98 64 06 F1 | 	add	objptr, #152
21eb8     32 A7 62 FC | 	wrlong	local01, objptr
21ebc                 | ' st_lines:=t_lines
21ebc     0C 64 06 F1 | 	add	objptr, #12
21ec0     32 A7 02 FB | 	rdlong	local01, objptr
21ec4     04 64 06 F1 | 	add	objptr, #4
21ec8     32 A7 62 FC | 	wrlong	local01, objptr
21ecc                 | ' ppl:=ppl/xzoom  
21ecc     28 64 86 F1 | 	sub	objptr, #40
21ed0     32 0F 03 FB | 	rdlong	muldiva_, objptr
21ed4     2C 64 06 F1 | 	add	objptr, #44
21ed8     32 11 03 FB | 	rdlong	muldivb_, objptr
21edc     05 65 86 F1 | 	sub	objptr, #261
21ee0     FA 00 A0 FD | 	call	#divide_
21ee4     D9 64 06 F1 | 	add	objptr, #217
21ee8     32 11 63 FC | 	wrlong	muldivb_, objptr
21eec                 | ' s_ppl:=ppl
21eec     1C 64 06 F1 | 	add	objptr, #28
21ef0     32 11 63 FC | 	wrlong	muldivb_, objptr
21ef4     F5 64 86 F1 | 	sub	objptr, #245
21ef8                 | ' waitms(20)							' wait 
21ef8     14 92 06 F6 | 	mov	arg01, #20
21efc     FC 30 B0 FD | 	call	#__system___waitms
21f00                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
21f00     04 64 06 F1 | 	add	objptr, #4
21f04     32 93 02 FB | 	rdlong	arg01, objptr
21f08     04 64 86 F1 | 	sub	objptr, #4
21f0c     32 97 02 FB | 	rdlong	arg03, objptr
21f10     49 97 82 F1 | 	sub	arg03, arg01
21f14     20 94 06 F6 | 	mov	arg02, #32
21f18     00 98 06 F6 | 	mov	arg04, #0
21f1c     01 9A 06 F6 | 	mov	arg05, #1
21f20     0B 00 00 FF 
21f24     CC 64 06 F1 | 	add	objptr, ##5836
21f28     A0 1F B0 FD | 	call	#_psram_spin2_fill
21f2c     0B 00 00 FF 
21f30     CC 64 86 F1 | 	sub	objptr, ##5836
21f34     E7 F0 03 F6 | 	mov	ptra, fp
21f38     F2 00 A0 FD | 	call	#popregs_
21f3c                 | _hg010b_spin2_setmode_ret
21f3c     2D 00 64 FD | 	ret
21f40                 | 
21f40                 | ' 
21f40                 | ' '****************************************************************************************************************
21f40                 | ' '                                                                                                             	*
21f40                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
21f40                 | ' '                                                                                                             	*
21f40                 | ' '****************************************************************************************************************
21f40                 | ' 
21f40                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
21f40                 | _hg010b_spin2_makedl
21f40                 | ' 
21f40                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
21f40                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
21f40                 | ' repeat i from 0 to 11                                                           ' clear DL
21f40     00 80 06 F6 | 	mov	_var01, #0
21f44     ED 65 06 F1 | 	add	objptr, #493
21f48     D7 0E 48 FB | 	callpa	#(@LR__2741-@LR__2740)>>2,fcache_load_ptr_
21f4c                 | LR__2740
21f4c                 | '   displaylist[i]:=0 
21f4c     40 83 02 F6 | 	mov	_var02, _var01
21f50     02 82 66 F0 | 	shl	_var02, #2
21f54     32 83 02 F1 | 	add	_var02, objptr
21f58     41 01 68 FC | 	wrlong	#0, _var02
21f5c     01 80 06 F1 | 	add	_var01, #1
21f60     0C 80 56 F2 | 	cmps	_var01, #12 wc
21f64     E4 FF 9F CD |  if_b	jmp	#LR__2740
21f68                 | LR__2741
21f68                 | '                         ' 
21f68                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
21f68     8C 65 86 F1 | 	sub	objptr, #396
21f6c     32 83 02 FB | 	rdlong	_var02, objptr
21f70     14 82 66 F0 | 	shl	_var02, #20
21f74     01 82 06 F1 | 	add	_var02, #1
21f78     04 64 86 F1 | 	sub	objptr, #4
21f7c     32 81 02 FB | 	rdlong	_var01, objptr
21f80     06 80 66 F0 | 	shl	_var01, #6
21f84     40 83 02 F1 | 	add	_var02, _var01
21f88     90 65 06 F1 | 	add	objptr, #400
21f8c     32 83 62 FC | 	wrlong	_var02, objptr
21f90     ED 65 86 F1 | 	sub	objptr, #493
21f94                 | ' displaylist[1]:=buf_ptr<<4+%10  
21f94     32 83 02 FB | 	rdlong	_var02, objptr
21f98     04 82 66 F0 | 	shl	_var02, #4
21f9c     02 82 06 F1 | 	add	_var02, #2
21fa0     F1 65 06 F1 | 	add	objptr, #497
21fa4     32 83 62 FC | 	wrlong	_var02, objptr
21fa8                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
21fa8     04 64 86 F1 | 	sub	objptr, #4
21fac     32 83 02 F6 | 	mov	_var02, objptr
21fb0     CD 65 86 F1 | 	sub	objptr, #461
21fb4     32 83 62 FC | 	wrlong	_var02, objptr
21fb8     20 64 86 F1 | 	sub	objptr, #32
21fbc                 | _hg010b_spin2_makedl_ret
21fbc     2D 00 64 FD | 	ret
21fc0                 | 
21fc0                 | ' 
21fc0                 | ' 
21fc0                 | ' '****************************************************************************************************************
21fc0                 | ' '                                                                        					*
21fc0                 | ' '  Graphic primitives                                                    					*
21fc0                 | ' '                                                                        					*
21fc0                 | ' '****************************************************************************************************************
21fc0                 | ' 
21fc0                 | ' pub setspriteptr(num,ptr)
21fc0                 | _hg010b_spin2_setspriteptr
21fc0                 | ' long[@spr1ptr+12*num]:=ptr
21fc0     32 81 02 F6 | 	mov	_var01, objptr
21fc4     11 81 06 F1 | 	add	_var01, #273
21fc8     49 83 02 F6 | 	mov	_var02, arg01
21fcc     01 82 66 F0 | 	shl	_var02, #1
21fd0     49 83 02 F1 | 	add	_var02, arg01
21fd4     02 82 66 F0 | 	shl	_var02, #2
21fd8     41 81 02 F1 | 	add	_var01, _var02
21fdc     40 95 62 FC | 	wrlong	arg02, _var01
21fe0                 | _hg010b_spin2_setspriteptr_ret
21fe0     2D 00 64 FD | 	ret
21fe4                 | 
21fe4                 | ' 
21fe4                 | ' pub setspritepos(num,x,y)
21fe4                 | _hg010b_spin2_setspritepos
21fe4                 | ' if y>601
21fe4     01 00 00 FF 
21fe8     5A 96 56 F2 | 	cmps	arg03, ##602 wc
21fec                 | '   y:=601
21fec     01 00 00 3F 
21ff0     59 96 06 36 |  if_ae	mov	arg03, ##601
21ff4                 | ' if x>1024
21ff4     02 00 00 FF 
21ff8     01 94 56 F2 | 	cmps	arg02, ##1025 wc
21ffc                 | '   x:=1024
21ffc     0A 94 C6 39 |  if_ae	decod	arg02, #10
22000                 | ' word[@spr1ptr+12*num+4]:=x
22000     11 65 06 F1 | 	add	objptr, #273
22004     32 81 02 F6 | 	mov	_var01, objptr
22008     49 83 02 F6 | 	mov	_var02, arg01
2200c     01 82 66 F0 | 	shl	_var02, #1
22010     49 83 02 F1 | 	add	_var02, arg01
22014     02 82 66 F0 | 	shl	_var02, #2
22018     41 81 02 F1 | 	add	_var01, _var02
2201c     04 80 06 F1 | 	add	_var01, #4
22020     40 95 52 FC | 	wrword	arg02, _var01
22024                 | ' word[@spr1ptr+12*num+6]:=y
22024     32 81 02 F6 | 	mov	_var01, objptr
22028     49 83 02 F6 | 	mov	_var02, arg01
2202c     01 82 66 F0 | 	shl	_var02, #1
22030     49 83 02 F1 | 	add	_var02, arg01
22034     02 82 66 F0 | 	shl	_var02, #2
22038     41 81 02 F1 | 	add	_var01, _var02
2203c     06 80 06 F1 | 	add	_var01, #6
22040     40 97 52 FC | 	wrword	arg03, _var01
22044     11 65 86 F1 | 	sub	objptr, #273
22048                 | _hg010b_spin2_setspritepos_ret
22048     2D 00 64 FD | 	ret
2204c                 | 
2204c                 | ' 
2204c                 | ' pub setspritesize(num,w,h)
2204c                 | _hg010b_spin2_setspritesize
2204c                 | ' word[@spr1ptr+12*num+8]:=w
2204c     11 65 06 F1 | 	add	objptr, #273
22050     32 81 02 F6 | 	mov	_var01, objptr
22054     49 83 02 F6 | 	mov	_var02, arg01
22058     01 82 66 F0 | 	shl	_var02, #1
2205c     49 83 02 F1 | 	add	_var02, arg01
22060     02 82 66 F0 | 	shl	_var02, #2
22064     41 81 02 F1 | 	add	_var01, _var02
22068     08 80 06 F1 | 	add	_var01, #8
2206c     40 95 52 FC | 	wrword	arg02, _var01
22070                 | ' word[@spr1ptr+12*num+10]:=h
22070     32 81 02 F6 | 	mov	_var01, objptr
22074     49 83 02 F6 | 	mov	_var02, arg01
22078     01 82 66 F0 | 	shl	_var02, #1
2207c     49 83 02 F1 | 	add	_var02, arg01
22080     02 82 66 F0 | 	shl	_var02, #2
22084     41 81 02 F1 | 	add	_var01, _var02
22088     0A 80 06 F1 | 	add	_var01, #10
2208c     40 97 52 FC | 	wrword	arg03, _var01
22090     11 65 86 F1 | 	sub	objptr, #273
22094                 | _hg010b_spin2_setspritesize_ret
22094     2D 00 64 FD | 	ret
22098                 | 
22098                 | ' 
22098                 | ' 
22098                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
22098                 | ' 
22098                 | ' 
22098                 | ' pub putpixel(x,y,c)
22098                 | _hg010b_spin2_putpixel
22098     04 CA 05 F6 | 	mov	COUNT_, #4
2209c     E8 00 A0 FD | 	call	#pushregs_
220a0     49 A7 02 F6 | 	mov	local01, arg01
220a4                 | ' 
220a4                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
220a4     00 A8 06 F6 | 	mov	local02, #0
220a8     00 A6 56 F2 | 	cmps	local01, #0 wc
220ac     01 A8 66 36 |  if_ae	neg	local02, #1
220b0     E9 64 06 F1 | 	add	objptr, #233
220b4     32 9B 02 FB | 	rdlong	arg05, objptr
220b8     02 9A 66 F0 | 	shl	arg05, #2
220bc     4D A7 52 F2 | 	cmps	local01, arg05 wc
220c0     55 AB A2 F1 | 	subx	local03, local03
220c4     55 A9 02 F5 | 	and	local02, local03
220c8     00 AA 06 F6 | 	mov	local03, #0
220cc     00 94 56 F2 | 	cmps	arg02, #0 wc
220d0     01 AA 66 36 |  if_ae	neg	local03, #1
220d4     55 A9 02 F5 | 	and	local02, local03
220d8     04 64 86 F1 | 	sub	objptr, #4
220dc     32 AB 02 FB | 	rdlong	local03, objptr
220e0     E5 64 86 F1 | 	sub	objptr, #229
220e4     55 95 52 F2 | 	cmps	arg02, local03 wc
220e8     56 AD A2 F1 | 	subx	local04, local04
220ec     56 A9 CA F7 | 	test	local02, local04 wz
220f0     48 00 90 AD |  if_e	jmp	#LR__2750
220f4     DD 64 06 F1 | 	add	objptr, #221
220f8     32 93 02 FB | 	rdlong	arg01, objptr
220fc     14 64 06 F1 | 	add	objptr, #20
22100     32 AD 02 FB | 	rdlong	local04, objptr
22104     02 AC 66 F0 | 	shl	local04, #2
22108     4A AD 02 FD | 	qmul	local04, arg02
2210c                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
2210c     4B 95 02 F6 | 	mov	arg02, arg03
22110     01 96 06 F6 | 	mov	arg03, #1
22114     00 98 06 F6 | 	mov	arg04, #0
22118     01 9A 06 F6 | 	mov	arg05, #1
2211c     0A 00 00 FF 
22120     DB 65 06 F1 | 	add	objptr, ##5595
22124     18 AC 62 FD | 	getqx	local04
22128     53 AD 02 F1 | 	add	local04, local01
2212c     56 93 02 F1 | 	add	arg01, local04
22130     98 1D B0 FD | 	call	#_psram_spin2_fill
22134     0B 00 00 FF 
22138     CC 64 86 F1 | 	sub	objptr, ##5836
2213c                 | LR__2750
2213c     E7 F0 03 F6 | 	mov	ptra, fp
22140     F2 00 A0 FD | 	call	#popregs_
22144                 | _hg010b_spin2_putpixel_ret
22144     2D 00 64 FD | 	ret
22148                 | 
22148                 | ' 
22148                 | ' pub putpixel2(x,y,c)
22148                 | _hg010b_spin2_putpixel2
22148     02 CA 05 F6 | 	mov	COUNT_, #2
2214c     E8 00 A0 FD | 	call	#pushregs_
22150     DD 64 06 F1 | 	add	objptr, #221
22154     32 A7 02 FB | 	rdlong	local01, objptr
22158     14 64 06 F1 | 	add	objptr, #20
2215c     32 9B 02 FB | 	rdlong	arg05, objptr
22160     02 9A 66 F0 | 	shl	arg05, #2
22164     4A 9B 02 FD | 	qmul	arg05, arg02
22168                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
22168     4B 95 02 F6 | 	mov	arg02, arg03
2216c     01 96 06 F6 | 	mov	arg03, #1
22170     00 98 06 F6 | 	mov	arg04, #0
22174     01 9A 06 F6 | 	mov	arg05, #1
22178     0A 00 00 FF 
2217c     DB 65 06 F1 | 	add	objptr, ##5595
22180     18 A8 62 FD | 	getqx	local02
22184     49 A9 02 F1 | 	add	local02, arg01
22188     54 A7 02 F1 | 	add	local01, local02
2218c     53 93 02 F6 | 	mov	arg01, local01
22190     38 1D B0 FD | 	call	#_psram_spin2_fill
22194     0B 00 00 FF 
22198     CC 64 86 F1 | 	sub	objptr, ##5836
2219c     E7 F0 03 F6 | 	mov	ptra, fp
221a0     F2 00 A0 FD | 	call	#popregs_
221a4                 | _hg010b_spin2_putpixel2_ret
221a4     2D 00 64 FD | 	ret
221a8                 | 
221a8                 | ' 
221a8                 | ' pub getpixel2(x,y): c 
221a8                 | _hg010b_spin2_getpixel2
221a8     02 CA 05 F6 | 	mov	COUNT_, #2
221ac     E8 00 A0 FD | 	call	#pushregs_
221b0     0C F0 07 F1 | 	add	ptra, #12
221b4     04 CE 05 F1 | 	add	fp, #4
221b8     E7 92 62 FC | 	wrlong	arg01, fp
221bc     04 CE 05 F1 | 	add	fp, #4
221c0     E7 94 62 FC | 	wrlong	arg02, fp
221c4     08 CE 85 F1 | 	sub	fp, #8
221c8     E7 00 68 FC | 	wrlong	#0, fp
221cc     E7 92 02 F6 | 	mov	arg01, fp
221d0     DD 64 06 F1 | 	add	objptr, #221
221d4     32 95 02 FB | 	rdlong	arg02, objptr
221d8     14 64 06 F1 | 	add	objptr, #20
221dc     32 97 02 FB | 	rdlong	arg03, objptr
221e0     02 96 66 F0 | 	shl	arg03, #2
221e4     08 CE 05 F1 | 	add	fp, #8
221e8     E7 7A 02 FB | 	rdlong	result1, fp
221ec     3D 97 02 FD | 	qmul	arg03, result1
221f0                 | ' 
221f0                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
221f0     04 CE 85 F1 | 	sub	fp, #4
221f4     E7 A6 02 FB | 	rdlong	local01, fp
221f8     04 CE 85 F1 | 	sub	fp, #4
221fc     01 96 06 F6 | 	mov	arg03, #1
22200     0A 00 00 FF 
22204     DB 65 06 F1 | 	add	objptr, ##5595
22208     18 A8 62 FD | 	getqx	local02
2220c     53 A9 02 F1 | 	add	local02, local01
22210     54 95 02 F1 | 	add	arg02, local02
22214     7C 1B B0 FD | 	call	#_psram_spin2_read1
22218     0B 00 00 FF 
2221c     CC 64 86 F1 | 	sub	objptr, ##5836
22220                 | ' return c
22220     E7 7A 02 FB | 	rdlong	result1, fp
22224     E7 F0 03 F6 | 	mov	ptra, fp
22228     F2 00 A0 FD | 	call	#popregs_
2222c                 | _hg010b_spin2_getpixel2_ret
2222c     2D 00 64 FD | 	ret
22230                 | 
22230                 | '   
22230                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
22230                 | ' 
22230                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
22230                 | _hg010b_spin2_fastline
22230     02 CA 05 F6 | 	mov	COUNT_, #2
22234     E8 00 A0 FD | 	call	#pushregs_
22238     49 A7 02 F6 | 	mov	local01, arg01
2223c     4A A9 02 F6 | 	mov	local02, arg02
22240                 | ' 
22240                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
22240     00 96 56 F2 | 	cmps	arg03, #0 wc
22244     F4 00 90 CD |  if_b	jmp	#LR__2760
22248     01 00 00 FF 
2224c     2A 64 06 F1 | 	add	objptr, ##554
22250     32 9B 02 FB | 	rdlong	arg05, objptr
22254     01 00 00 FF 
22258     2A 64 86 F1 | 	sub	objptr, ##554
2225c     4D 97 52 F2 | 	cmps	arg03, arg05 wc
22260     D8 00 90 3D |  if_ae	jmp	#LR__2760
22264     00 A6 56 F2 | 	cmps	local01, #0 wc
22268     00 A8 56 C2 |  if_b	cmps	local02, #0 wc
2226c     CC 00 90 CD |  if_b	jmp	#LR__2760
22270     01 00 00 FF 
22274     26 64 06 F1 | 	add	objptr, ##550
22278     32 9B 02 FB | 	rdlong	arg05, objptr
2227c     01 00 00 FF 
22280     26 64 86 F1 | 	sub	objptr, ##550
22284     4D A7 5A F2 | 	cmps	local01, arg05 wcz
22288     01 00 00 1F 
2228c     26 64 06 11 |  if_a	add	objptr, ##550
22290     32 93 02 1B |  if_a	rdlong	arg01, objptr
22294     01 00 00 1F 
22298     26 64 86 11 |  if_a	sub	objptr, ##550
2229c     49 A9 5A 12 |  if_a	cmps	local02, arg01 wcz
222a0                 | '   return
222a0     98 00 90 1D |  if_a	jmp	#LR__2760
222a4     54 A7 5A F2 | 	cmps	local01, local02 wcz
222a8     53 9B 02 16 |  if_a	mov	arg05, local01
222ac     54 A7 02 16 |  if_a	mov	local01, local02
222b0     4D A9 02 16 |  if_a	mov	local02, arg05
222b4     00 A6 56 F2 | 	cmps	local01, #0 wc
222b8     00 A6 06 C6 |  if_b	mov	local01, #0
222bc     01 00 00 FF 
222c0     26 64 06 F1 | 	add	objptr, ##550
222c4     32 9B 02 FB | 	rdlong	arg05, objptr
222c8     01 00 00 FF 
222cc     26 64 86 F1 | 	sub	objptr, ##550
222d0     4D A9 52 F2 | 	cmps	local02, arg05 wc
222d4     01 00 00 3F 
222d8     26 64 06 31 |  if_ae	add	objptr, ##550
222dc     32 A9 02 3B |  if_ae	rdlong	local02, objptr
222e0     01 00 00 3F 
222e4     26 64 86 31 |  if_ae	sub	objptr, ##550
222e8     DD 64 06 F1 | 	add	objptr, #221
222ec     32 93 02 FB | 	rdlong	arg01, objptr
222f0     14 64 06 F1 | 	add	objptr, #20
222f4     32 9B 02 FB | 	rdlong	arg05, objptr
222f8     02 9A 66 F0 | 	shl	arg05, #2
222fc     4B 9B 02 FD | 	qmul	arg05, arg03
22300                 | ' if x1>x2
22300                 | '   x1,x2:=x2,x1
22300                 | ' if x1<0 
22300                 | '   x1:=0
22300                 | ' if x2>=xres
22300                 | '   x2:=xres-1  
22300     01 A8 86 31 |  if_ae	sub	local02, #1
22304                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
22304     01 96 06 F6 | 	mov	arg03, #1
22308     54 97 02 F1 | 	add	arg03, local02
2230c     53 97 82 F1 | 	sub	arg03, local01
22310     4C 95 02 F6 | 	mov	arg02, arg04
22314     00 98 06 F6 | 	mov	arg04, #0
22318     01 9A 06 F6 | 	mov	arg05, #1
2231c     0A 00 00 FF 
22320     DB 65 06 F1 | 	add	objptr, ##5595
22324     18 A8 62 FD | 	getqx	local02
22328     53 A9 02 F1 | 	add	local02, local01
2232c     54 93 02 F1 | 	add	arg01, local02
22330     98 1B B0 FD | 	call	#_psram_spin2_fill
22334     0B 00 00 FF 
22338     CC 64 86 F1 | 	sub	objptr, ##5836
2233c                 | LR__2760
2233c     E7 F0 03 F6 | 	mov	ptra, fp
22340     F2 00 A0 FD | 	call	#popregs_
22344                 | _hg010b_spin2_fastline_ret
22344     2D 00 64 FD | 	ret
22348                 | 
22348                 | ' 
22348                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
22348                 | _hg010b_spin2_draw
22348     0E CA 05 F6 | 	mov	COUNT_, #14
2234c     E8 00 A0 FD | 	call	#pushregs_
22350     49 A7 02 F6 | 	mov	local01, arg01
22354     4A A9 02 F6 | 	mov	local02, arg02
22358     4B AB 02 F6 | 	mov	local03, arg03
2235c     4C AD 02 F6 | 	mov	local04, arg04
22360     4D AF 02 F6 | 	mov	local05, arg05
22364                 | ' 
22364                 | ' if (y1==y2)
22364     56 A9 0A F2 | 	cmp	local02, local04 wz
22368     18 00 90 5D |  if_ne	jmp	#LR__2770
2236c                 | '   fastline(x1,x2,y1,c)
2236c     53 93 02 F6 | 	mov	arg01, local01
22370     55 95 02 F6 | 	mov	arg02, local03
22374     54 97 02 F6 | 	mov	arg03, local02
22378     57 99 02 F6 | 	mov	arg04, local05
2237c     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
22380     F8 00 90 FD | 	jmp	#LR__2776
22384                 | LR__2770
22384                 | ' else  
22384                 | '   x:=x1
22384     53 B1 02 F6 | 	mov	local06, local01
22388                 | '   y:=y1
22388     54 B3 02 F6 | 	mov	local07, local02
2238c                 | ' 
2238c                 | '   if (x1<x2) 
2238c     55 A7 52 F2 | 	cmps	local01, local03 wc
22390                 | '     xi:=1
22390     01 B4 06 C6 |  if_b	mov	local08, #1
22394                 | '     dx:=x2-x1
22394     55 B7 02 C6 |  if_b	mov	local09, local03
22398     53 B7 82 C1 |  if_b	sub	local09, local01
2239c                 | '   else
2239c                 | '     xi:=-1
2239c     01 B4 66 36 |  if_ae	neg	local08, #1
223a0                 | '     dx:=x1-x2
223a0     55 A7 82 31 |  if_ae	sub	local01, local03
223a4     53 B7 02 36 |  if_ae	mov	local09, local01
223a8                 | '   
223a8                 | '   if (y1<y2) 
223a8     56 A9 52 F2 | 	cmps	local02, local04 wc
223ac                 | '     yi:=1
223ac     01 B8 06 C6 |  if_b	mov	local10, #1
223b0                 | '     dy:=y2-y1
223b0     56 BB 02 C6 |  if_b	mov	local11, local04
223b4     54 BB 82 C1 |  if_b	sub	local11, local02
223b8                 | '   else
223b8                 | '     yi:=-1
223b8     01 B8 66 36 |  if_ae	neg	local10, #1
223bc                 | '     dy:=y1-y2
223bc     56 A9 82 31 |  if_ae	sub	local02, local04
223c0     54 BB 02 36 |  if_ae	mov	local11, local02
223c4                 | ' 
223c4                 | '   putpixel(x,y,c)
223c4     57 97 02 F6 | 	mov	arg03, local05
223c8     58 93 02 F6 | 	mov	arg01, local06
223cc     59 95 02 F6 | 	mov	arg02, local07
223d0     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
223d4                 | ' 
223d4                 | '   if (dx>dy)
223d4     5D B7 5A F2 | 	cmps	local09, local11 wcz
223d8     50 00 90 ED |  if_be	jmp	#LR__2772
223dc                 | '     ai:=(dy-dx)*2
223dc     5D BD 02 F6 | 	mov	local12, local11
223e0     5B BD 82 F1 | 	sub	local12, local09
223e4     01 BC 66 F0 | 	shl	local12, #1
223e8                 | '     bi:=dy*2
223e8     01 BA 66 F0 | 	shl	local11, #1
223ec     5D BF 02 F6 | 	mov	local13, local11
223f0                 | '     d:= bi-dx
223f0     5F C1 02 F6 | 	mov	local14, local13
223f4     5B C1 82 F1 | 	sub	local14, local09
223f8                 | '     repeat while (x<>x2) 
223f8                 | LR__2771
223f8     55 B1 0A F2 | 	cmp	local06, local03 wz
223fc     7C 00 90 AD |  if_e	jmp	#LR__2775
22400                 | '       if (d>=0) 
22400     00 C0 56 F2 | 	cmps	local14, #0 wc
22404                 | '         x+=xi
22404     5A B1 02 31 |  if_ae	add	local06, local08
22408                 | '         y+=yi
22408     5C B3 02 31 |  if_ae	add	local07, local10
2240c                 | '         d+=ai
2240c     5E C1 02 31 |  if_ae	add	local14, local12
22410                 | '       else
22410                 | '         d+=bi
22410     5F C1 02 C1 |  if_b	add	local14, local13
22414                 | '         x+=xi
22414     5A B1 02 C1 |  if_b	add	local06, local08
22418                 | '       putpixel(x,y,c)
22418     58 93 02 F6 | 	mov	arg01, local06
2241c     59 95 02 F6 | 	mov	arg02, local07
22420     57 97 02 F6 | 	mov	arg03, local05
22424     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
22428     CC FF 9F FD | 	jmp	#LR__2771
2242c                 | LR__2772
2242c                 | '   else
2242c                 | '     ai:=(dx-dy)*2
2242c     5B BD 02 F6 | 	mov	local12, local09
22430     5D BD 82 F1 | 	sub	local12, local11
22434     01 BC 66 F0 | 	shl	local12, #1
22438                 | '     bi:=dx*2
22438     01 B6 66 F0 | 	shl	local09, #1
2243c     5B BF 02 F6 | 	mov	local13, local09
22440                 | '     d:=bi-dy
22440     5F C1 02 F6 | 	mov	local14, local13
22444     5D C1 82 F1 | 	sub	local14, local11
22448                 | '     repeat while (y<>y2)
22448                 | LR__2773
22448     56 B3 0A F2 | 	cmp	local07, local04 wz
2244c     2C 00 90 AD |  if_e	jmp	#LR__2774
22450                 | '       if (d>=0)
22450     00 C0 56 F2 | 	cmps	local14, #0 wc
22454                 | '         x+=xi
22454     5A B1 02 31 |  if_ae	add	local06, local08
22458                 | '         y+=yi
22458     5C B3 02 31 |  if_ae	add	local07, local10
2245c                 | '         d+=ai
2245c     5E C1 02 31 |  if_ae	add	local14, local12
22460                 | '       else
22460                 | '         d+=bi
22460     5F C1 02 C1 |  if_b	add	local14, local13
22464                 | '         y+=yi
22464     5C B3 02 C1 |  if_b	add	local07, local10
22468                 | '       putpixel(x, y,c)
22468     58 93 02 F6 | 	mov	arg01, local06
2246c     59 95 02 F6 | 	mov	arg02, local07
22470     57 97 02 F6 | 	mov	arg03, local05
22474     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
22478     CC FF 9F FD | 	jmp	#LR__2773
2247c                 | LR__2774
2247c                 | LR__2775
2247c                 | LR__2776
2247c     E7 F0 03 F6 | 	mov	ptra, fp
22480     F2 00 A0 FD | 	call	#popregs_
22484                 | _hg010b_spin2_draw_ret
22484     2D 00 64 FD | 	ret
22488                 | 
22488                 | '  
22488                 | ' pub fillpush(val) 
22488                 | _hg010b_spin2_fillpush
22488                 | ' fillstack[fillptr]:=val
22488     0B 00 00 FF 
2248c     BA 64 06 F1 | 	add	objptr, ##5818
22490     32 81 02 FB | 	rdlong	_var01, objptr
22494     02 80 66 F0 | 	shl	_var01, #2
22498     0A 00 00 FF 
2249c     00 64 86 F1 | 	sub	objptr, ##5120
224a0     32 81 02 F1 | 	add	_var01, objptr
224a4     40 93 62 FC | 	wrlong	arg01, _var01
224a8                 | ' fillptr+=1   
224a8     0A 00 00 FF 
224ac     00 64 06 F1 | 	add	objptr, ##5120
224b0     32 81 02 FB | 	rdlong	_var01, objptr
224b4     01 80 06 F1 | 	add	_var01, #1
224b8     32 81 62 FC | 	wrlong	_var01, objptr
224bc     0B 00 00 FF 
224c0     BA 64 86 F1 | 	sub	objptr, ##5818
224c4                 | _hg010b_spin2_fillpush_ret
224c4     2D 00 64 FD | 	ret
224c8                 | 
224c8                 | ' 
224c8                 | '     
224c8                 | ' pub fillpop() : val
224c8                 | _hg010b_spin2_fillpop
224c8                 | ' 
224c8                 | ' fillptr-=1
224c8     0B 00 00 FF 
224cc     BA 64 06 F1 | 	add	objptr, ##5818
224d0     32 7B 02 FB | 	rdlong	result1, objptr
224d4     01 7A 86 F1 | 	sub	result1, #1
224d8     32 7B 62 FC | 	wrlong	result1, objptr
224dc                 | ' if fillptr<0
224dc     0B 00 00 FF 
224e0     BA 64 86 F1 | 	sub	objptr, ##5818
224e4     00 7A 56 F2 | 	cmps	result1, #0 wc
224e8                 | '   fillptr:=0
224e8     0B 00 00 CF 
224ec     BA 64 06 C1 |  if_b	add	objptr, ##5818
224f0     32 01 68 CC |  if_b	wrlong	#0, objptr
224f4     0B 00 00 CF 
224f8     BA 64 86 C1 |  if_b	sub	objptr, ##5818
224fc                 | '   val:=-12345
224fc     E7 FF 7F CF 
22500     C7 81 06 C6 |  if_b	mov	_var01, ##-12345
22504     28 00 90 CD |  if_b	jmp	#LR__2780
22508                 | ' else 
22508                 | '   val:=fillstack[fillptr]
22508     0B 00 00 FF 
2250c     BA 64 06 F1 | 	add	objptr, ##5818
22510     32 81 02 FB | 	rdlong	_var01, objptr
22514     02 80 66 F0 | 	shl	_var01, #2
22518     0A 00 00 FF 
2251c     00 64 86 F1 | 	sub	objptr, ##5120
22520     32 81 02 F1 | 	add	_var01, objptr
22524     40 81 02 FB | 	rdlong	_var01, _var01
22528     01 00 00 FF 
2252c     BA 64 86 F1 | 	sub	objptr, ##698
22530                 | LR__2780
22530                 | ' return val
22530     40 7B 02 F6 | 	mov	result1, _var01
22534                 | _hg010b_spin2_fillpop_ret
22534     2D 00 64 FD | 	ret
22538                 | 
22538                 | ' 
22538                 | '       
22538                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
22538                 | _hg010b_spin2_fill
22538     0B CA 05 F6 | 	mov	COUNT_, #11
2253c     E8 00 A0 FD | 	call	#pushregs_
22540                 | ' 
22540                 | ' newcolor:=newcolor & 255
22540     4B A7 E2 F8 | 	getbyte	local01, arg03, #0
22544                 | ' oldcolor:=oldcolor & 255
22544     4C A9 E2 F8 | 	getbyte	local02, arg04, #0
22548                 | ' 
22548                 | ' if (oldcolor == newcolor) 
22548     53 A9 0A F2 | 	cmp	local02, local01 wz
2254c                 | '   return
2254c     70 02 90 AD |  if_e	jmp	#LR__2799
22550                 | ' 
22550                 | ' fillptr:=0
22550     0B 00 00 FF 
22554     BA 64 06 F1 | 	add	objptr, ##5818
22558     32 01 68 FC | 	wrlong	#0, objptr
2255c                 | ' fillmax:=0
2255c     04 64 06 F1 | 	add	objptr, #4
22560     32 01 68 FC | 	wrlong	#0, objptr
22564     0B 00 00 FF 
22568     BE 64 86 F1 | 	sub	objptr, ##5822
2256c                 | ' fillpush(x)
2256c     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
22570                 | ' fillpush(y)
22570     4A 93 02 F6 | 	mov	arg01, arg02
22574     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
22578                 | ' y:=fillpop()
22578     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
2257c     3D AB 02 F6 | 	mov	local03, result1
22580                 | ' x:=fillpop()
22580     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
22584     3D AD 02 F6 | 	mov	local04, result1
22588                 | ' 'pinhigh(38)
22588                 | ' repeat while (x>-1)       
22588                 | LR__2790
22588     00 AC 56 F2 | 	cmps	local04, #0 wc
2258c     30 02 90 CD |  if_b	jmp	#LR__2798
22590                 | '  ' pintoggle(39)
22590                 | '   x1 := x
22590     56 AF 02 F6 | 	mov	local05, local04
22594                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
22594                 | LR__2791
22594     00 B0 06 F6 | 	mov	local06, #0
22598     00 B2 06 F6 | 	mov	local07, #0
2259c     00 AE 56 F2 | 	cmps	local05, #0 wc
225a0     01 B2 66 36 |  if_ae	neg	local07, #1
225a4     00 B2 0E F2 | 	cmp	local07, #0 wz
225a8     00 B0 26 56 |  if_ne	not	local06, #0
225ac     00 B4 06 F6 | 	mov	local08, #0
225b0     00 B6 06 F6 | 	mov	local09, #0
225b4     55 95 02 F6 | 	mov	arg02, local03
225b8     57 93 02 F6 | 	mov	arg01, local05
225bc     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
225c0     54 7B 0A F2 | 	cmp	result1, local02 wz
225c4     00 B6 26 A6 |  if_e	not	local09, #0
225c8     00 B6 0E F2 | 	cmp	local09, #0 wz
225cc     00 B4 26 56 |  if_ne	not	local08, #0
225d0     5A B1 CA F7 | 	test	local06, local08 wz
225d4                 | '     x1--
225d4     01 AE 86 51 |  if_ne	sub	local05, #1
225d8     B8 FF 9F 5D |  if_ne	jmp	#LR__2791
225dc                 | '   x1++
225dc     01 AE 06 F1 | 	add	local05, #1
225e0                 | '   spanabove := 0
225e0     00 B8 06 F6 | 	mov	local10, #0
225e4                 | '   spanbelow := 0
225e4     00 BA 06 F6 | 	mov	local11, #0
225e8                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
225e8                 | LR__2792
225e8     00 B0 06 F6 | 	mov	local06, #0
225ec     02 00 00 FF 
225f0     00 AE 56 F2 | 	cmps	local05, ##1024 wc
225f4     00 B0 26 C6 |  if_b	not	local06, #0
225f8     00 B4 06 F6 | 	mov	local08, #0
225fc     00 B6 06 F6 | 	mov	local09, #0
22600     55 95 02 F6 | 	mov	arg02, local03
22604     57 93 02 F6 | 	mov	arg01, local05
22608     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
2260c     54 7B 0A F2 | 	cmp	result1, local02 wz
22610     00 B6 26 A6 |  if_e	not	local09, #0
22614     00 B6 0E F2 | 	cmp	local09, #0 wz
22618     00 B4 26 56 |  if_ne	not	local08, #0
2261c     5A B1 CA F7 | 	test	local06, local08 wz
22620     88 01 90 AD |  if_e	jmp	#LR__2797
22624                 | '     putpixel2 (x1,y, newcolor & 255)
22624     53 97 E2 F8 | 	getbyte	arg03, local01, #0
22628     57 93 02 F6 | 	mov	arg01, local05
2262c     55 95 02 F6 | 	mov	arg02, local03
22630     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
22634                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
22634     00 B0 06 F6 | 	mov	local06, #0
22638     00 B2 06 F6 | 	mov	local07, #0
2263c     00 B8 0E F2 | 	cmp	local10, #0 wz
22640     01 AA 56 A2 |  if_e	cmps	local03, #1 wc
22644     01 B2 66 26 |  if_nc_and_z	neg	local07, #1
22648     00 B2 0E F2 | 	cmp	local07, #0 wz
2264c     00 B0 26 56 |  if_ne	not	local06, #0
22650     00 B4 06 F6 | 	mov	local08, #0
22654     00 B6 06 F6 | 	mov	local09, #0
22658     55 95 02 F6 | 	mov	arg02, local03
2265c     01 94 86 F1 | 	sub	arg02, #1
22660     57 93 02 F6 | 	mov	arg01, local05
22664     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
22668     54 7B 0A F2 | 	cmp	result1, local02 wz
2266c     00 B6 26 A6 |  if_e	not	local09, #0
22670     00 B6 0E F2 | 	cmp	local09, #0 wz
22674     00 B4 26 56 |  if_ne	not	local08, #0
22678     5A B1 CA F7 | 	test	local06, local08 wz
2267c     1C 00 90 AD |  if_e	jmp	#LR__2793
22680                 | '       fillpush(x1)
22680     57 93 02 F6 | 	mov	arg01, local05
22684     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
22688                 | '       fillpush(y-1)
22688     55 93 02 F6 | 	mov	arg01, local03
2268c     01 92 86 F1 | 	sub	arg01, #1
22690     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
22694                 | '       spanabove := 1 
22694     01 B8 06 F6 | 	mov	local10, #1
22698     4C 00 90 FD | 	jmp	#LR__2794
2269c                 | LR__2793
2269c                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
2269c     00 B0 06 F6 | 	mov	local06, #0
226a0     00 B2 06 F6 | 	mov	local07, #0
226a4     00 B8 0E F2 | 	cmp	local10, #0 wz
226a8     01 AA 56 52 |  if_ne	cmps	local03, #1 wc
226ac     01 B2 66 16 |  if_a	neg	local07, #1
226b0     00 B2 0E F2 | 	cmp	local07, #0 wz
226b4     00 B0 26 56 |  if_ne	not	local06, #0
226b8     00 B4 06 F6 | 	mov	local08, #0
226bc     00 B6 06 F6 | 	mov	local09, #0
226c0     55 95 02 F6 | 	mov	arg02, local03
226c4     01 94 86 F1 | 	sub	arg02, #1
226c8     57 93 02 F6 | 	mov	arg01, local05
226cc     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
226d0     54 7B 0A F2 | 	cmp	result1, local02 wz
226d4     00 B6 26 56 |  if_ne	not	local09, #0
226d8     00 B6 0E F2 | 	cmp	local09, #0 wz
226dc     00 B4 26 56 |  if_ne	not	local08, #0
226e0     5A B1 CA F7 | 	test	local06, local08 wz
226e4                 | '       spanabove := 0 
226e4     00 B8 06 56 |  if_ne	mov	local10, #0
226e8                 | LR__2794
226e8                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
226e8     00 B0 06 F6 | 	mov	local06, #0
226ec     00 B2 06 F6 | 	mov	local07, #0
226f0     00 BA 0E F2 | 	cmp	local11, #0 wz
226f4     01 00 00 AF 
226f8     3F AA 56 A2 |  if_e	cmps	local03, ##575 wc
226fc     01 B2 66 86 |  if_c_and_z	neg	local07, #1
22700     00 B2 0E F2 | 	cmp	local07, #0 wz
22704     00 B0 26 56 |  if_ne	not	local06, #0
22708     00 B4 06 F6 | 	mov	local08, #0
2270c     00 B6 06 F6 | 	mov	local09, #0
22710     55 95 02 F6 | 	mov	arg02, local03
22714     01 94 06 F1 | 	add	arg02, #1
22718     57 93 02 F6 | 	mov	arg01, local05
2271c     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
22720     54 7B 0A F2 | 	cmp	result1, local02 wz
22724     00 B6 26 A6 |  if_e	not	local09, #0
22728     00 B6 0E F2 | 	cmp	local09, #0 wz
2272c     00 B4 26 56 |  if_ne	not	local08, #0
22730     5A B1 CA F7 | 	test	local06, local08 wz
22734     1C 00 90 AD |  if_e	jmp	#LR__2795
22738                 | '       fillpush(x1)
22738     57 93 02 F6 | 	mov	arg01, local05
2273c     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
22740                 | '       fillpush(y + 1)
22740     55 93 02 F6 | 	mov	arg01, local03
22744     01 92 06 F1 | 	add	arg01, #1
22748     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
2274c                 | '       spanBelow := 1
2274c     01 BA 06 F6 | 	mov	local11, #1
22750     50 00 90 FD | 	jmp	#LR__2796
22754                 | LR__2795
22754                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
22754     00 B0 06 F6 | 	mov	local06, #0
22758     00 B2 06 F6 | 	mov	local07, #0
2275c     00 BA 0E F2 | 	cmp	local11, #0 wz
22760     01 00 00 5F 
22764     3F AA 56 52 |  if_ne	cmps	local03, ##575 wc
22768     01 B2 66 46 |  if_c_and_nz	neg	local07, #1
2276c     00 B2 0E F2 | 	cmp	local07, #0 wz
22770     00 B0 26 56 |  if_ne	not	local06, #0
22774     00 B4 06 F6 | 	mov	local08, #0
22778     00 B6 06 F6 | 	mov	local09, #0
2277c     55 95 02 F6 | 	mov	arg02, local03
22780     01 94 06 F1 | 	add	arg02, #1
22784     57 93 02 F6 | 	mov	arg01, local05
22788     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
2278c     54 7B 0A F2 | 	cmp	result1, local02 wz
22790     00 B6 26 56 |  if_ne	not	local09, #0
22794     00 B6 0E F2 | 	cmp	local09, #0 wz
22798     00 B4 26 56 |  if_ne	not	local08, #0
2279c     5A B1 CA F7 | 	test	local06, local08 wz
227a0                 | '       spanbelow := 0
227a0     00 BA 06 56 |  if_ne	mov	local11, #0
227a4                 | LR__2796
227a4                 | '     x1++
227a4     01 AE 06 F1 | 	add	local05, #1
227a8     3C FE 9F FD | 	jmp	#LR__2792
227ac                 | LR__2797
227ac                 | '   y:=fillpop()
227ac     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
227b0     3D AB 02 F6 | 	mov	local03, result1
227b4                 | '   x:=fillpop()
227b4     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
227b8     3D AD 02 F6 | 	mov	local04, result1
227bc     C8 FD 9F FD | 	jmp	#LR__2790
227c0                 | LR__2798
227c0                 | LR__2799
227c0     E7 F0 03 F6 | 	mov	ptra, fp
227c4     F2 00 A0 FD | 	call	#popregs_
227c8                 | _hg010b_spin2_fill_ret
227c8     2D 00 64 FD | 	ret
227cc                 | 
227cc                 | ' 'pinlow(38)    
227cc                 | ' 
227cc                 | ' '-- A filled circle -----------------------------------------------------
227cc                 | ' 
227cc                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
227cc                 | _hg010b_spin2_fcircle
227cc     08 CA 05 F6 | 	mov	COUNT_, #8
227d0     E8 00 A0 FD | 	call	#pushregs_
227d4     4B A7 02 F6 | 	mov	local01, arg03
227d8     FF FF 7F FF 
227dc     FE A7 06 FD | 	qmul	local01, ##-2
227e0     49 A9 02 F6 | 	mov	local02, arg01
227e4     4A AB 02 F6 | 	mov	local03, arg02
227e8     4C AD 02 F6 | 	mov	local04, arg04
227ec                 | ' 
227ec                 | ' d:=5-4*r
227ec     53 99 02 F6 | 	mov	arg04, local01
227f0     02 98 66 F0 | 	shl	arg04, #2
227f4     05 AE 06 F6 | 	mov	local05, #5
227f8     4C AF 82 F1 | 	sub	local05, arg04
227fc                 | ' x:=0
227fc     00 B0 06 F6 | 	mov	local06, #0
22800                 | ' y:=r
22800                 | ' da:=(-2*r+5)*4
22800                 | ' db:=3*4
22800     0C B2 06 F6 | 	mov	local07, #12
22804                 | ' repeat while (x<=y) 
22804     18 B4 62 FD | 	getqx	local08
22808     05 B4 06 F1 | 	add	local08, #5
2280c     02 B4 66 F0 | 	shl	local08, #2
22810                 | LR__2800
22810     53 B1 5A F2 | 	cmps	local06, local01 wcz
22814     B4 00 90 1D |  if_a	jmp	#LR__2802
22818                 | '   fastline(x0-x,x0+x,y0-y,c)
22818     54 93 02 F6 | 	mov	arg01, local02
2281c     58 93 82 F1 | 	sub	arg01, local06
22820     54 95 02 F6 | 	mov	arg02, local02
22824     58 95 02 F1 | 	add	arg02, local06
22828     55 97 02 F6 | 	mov	arg03, local03
2282c     53 97 82 F1 | 	sub	arg03, local01
22830     56 99 02 F6 | 	mov	arg04, local04
22834     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
22838                 | '   fastline(x0-x,x0+x,y0+y,c)
22838     54 93 02 F6 | 	mov	arg01, local02
2283c     58 93 82 F1 | 	sub	arg01, local06
22840     54 95 02 F6 | 	mov	arg02, local02
22844     58 95 02 F1 | 	add	arg02, local06
22848     55 97 02 F6 | 	mov	arg03, local03
2284c     53 97 02 F1 | 	add	arg03, local01
22850     56 99 02 F6 | 	mov	arg04, local04
22854     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
22858                 | '   fastline(x0-y,x0+y,y0-x,c)
22858     54 93 02 F6 | 	mov	arg01, local02
2285c     53 93 82 F1 | 	sub	arg01, local01
22860     54 95 02 F6 | 	mov	arg02, local02
22864     53 95 02 F1 | 	add	arg02, local01
22868     55 97 02 F6 | 	mov	arg03, local03
2286c     58 97 82 F1 | 	sub	arg03, local06
22870     56 99 02 F6 | 	mov	arg04, local04
22874     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
22878                 | '   fastline(x0-y,x0+y,y0+x,c)
22878     54 93 02 F6 | 	mov	arg01, local02
2287c     53 93 82 F1 | 	sub	arg01, local01
22880     54 95 02 F6 | 	mov	arg02, local02
22884     53 95 02 F1 | 	add	arg02, local01
22888     55 97 02 F6 | 	mov	arg03, local03
2288c     58 97 02 F1 | 	add	arg03, local06
22890     56 99 02 F6 | 	mov	arg04, local04
22894     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
22898                 | '   if d>0 
22898     01 AE 56 F2 | 	cmps	local05, #1 wc
2289c     18 00 90 CD |  if_b	jmp	#LR__2801
228a0                 | '     d+=da
228a0     5A AF 02 F1 | 	add	local05, local08
228a4                 | '     y-=1
228a4     01 A6 86 F1 | 	sub	local01, #1
228a8                 | '     x+=1
228a8     01 B0 06 F1 | 	add	local06, #1
228ac                 | '     da+=4*4
228ac     10 B4 06 F1 | 	add	local08, #16
228b0                 | '     db+=2*4
228b0     08 B2 06 F1 | 	add	local07, #8
228b4     58 FF 9F FD | 	jmp	#LR__2800
228b8                 | LR__2801
228b8                 | '   else
228b8                 | '     d+=db
228b8     59 AF 02 F1 | 	add	local05, local07
228bc                 | '     x+=1
228bc     01 B0 06 F1 | 	add	local06, #1
228c0                 | '     da+=2*4
228c0     08 B4 06 F1 | 	add	local08, #8
228c4                 | '     db+=2*4
228c4     08 B2 06 F1 | 	add	local07, #8
228c8     44 FF 9F FD | 	jmp	#LR__2800
228cc                 | LR__2802
228cc     E7 F0 03 F6 | 	mov	ptra, fp
228d0     F2 00 A0 FD | 	call	#popregs_
228d4                 | _hg010b_spin2_fcircle_ret
228d4     2D 00 64 FD | 	ret
228d8                 | 
228d8                 | '  
228d8                 | ' '-- A circle ------------------------------------------------------------ 
228d8                 | '  
228d8                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
228d8                 | _hg010b_spin2_circle
228d8     08 CA 05 F6 | 	mov	COUNT_, #8
228dc     E8 00 A0 FD | 	call	#pushregs_
228e0     4B A7 02 F6 | 	mov	local01, arg03
228e4     FF FF 7F FF 
228e8     FE A7 06 FD | 	qmul	local01, ##-2
228ec     49 A9 02 F6 | 	mov	local02, arg01
228f0     4A AB 02 F6 | 	mov	local03, arg02
228f4     4C AD 02 F6 | 	mov	local04, arg04
228f8                 | ' 
228f8                 | '  
228f8                 | ' d:=5-4*r
228f8     53 99 02 F6 | 	mov	arg04, local01
228fc     02 98 66 F0 | 	shl	arg04, #2
22900     05 AE 06 F6 | 	mov	local05, #5
22904     4C AF 82 F1 | 	sub	local05, arg04
22908                 | ' x:=0
22908     00 B0 06 F6 | 	mov	local06, #0
2290c                 | ' y:=r
2290c                 | ' da:=(-2*r+5)*4
2290c                 | ' db:=3*4
2290c     0C B2 06 F6 | 	mov	local07, #12
22910                 | ' repeat while (x<=y) 
22910     18 B4 62 FD | 	getqx	local08
22914     05 B4 06 F1 | 	add	local08, #5
22918     02 B4 66 F0 | 	shl	local08, #2
2291c                 | LR__2810
2291c     53 B1 5A F2 | 	cmps	local06, local01 wcz
22920     F4 00 90 1D |  if_a	jmp	#LR__2812
22924                 | '   putpixel(x0-x,y0-y,c)
22924     54 93 02 F6 | 	mov	arg01, local02
22928     58 93 82 F1 | 	sub	arg01, local06
2292c     55 95 02 F6 | 	mov	arg02, local03
22930     53 95 82 F1 | 	sub	arg02, local01
22934     56 97 02 F6 | 	mov	arg03, local04
22938     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
2293c                 | '   putpixel(x0-x,y0+y,c)
2293c     54 93 02 F6 | 	mov	arg01, local02
22940     58 93 82 F1 | 	sub	arg01, local06
22944     55 95 02 F6 | 	mov	arg02, local03
22948     53 95 02 F1 | 	add	arg02, local01
2294c     56 97 02 F6 | 	mov	arg03, local04
22950     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
22954                 | '   putpixel(x0+x,y0-y,c)
22954     54 93 02 F6 | 	mov	arg01, local02
22958     58 93 02 F1 | 	add	arg01, local06
2295c     55 95 02 F6 | 	mov	arg02, local03
22960     53 95 82 F1 | 	sub	arg02, local01
22964     56 97 02 F6 | 	mov	arg03, local04
22968     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
2296c                 | '   putpixel(x0+x,y0+y,c)
2296c     54 93 02 F6 | 	mov	arg01, local02
22970     58 93 02 F1 | 	add	arg01, local06
22974     55 95 02 F6 | 	mov	arg02, local03
22978     53 95 02 F1 | 	add	arg02, local01
2297c     56 97 02 F6 | 	mov	arg03, local04
22980     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
22984                 | '   putpixel(x0-y,y0-x,c)
22984     54 93 02 F6 | 	mov	arg01, local02
22988     53 93 82 F1 | 	sub	arg01, local01
2298c     55 95 02 F6 | 	mov	arg02, local03
22990     58 95 82 F1 | 	sub	arg02, local06
22994     56 97 02 F6 | 	mov	arg03, local04
22998     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
2299c                 | '   putpixel(x0-y,y0+x,c)
2299c     54 93 02 F6 | 	mov	arg01, local02
229a0     53 93 82 F1 | 	sub	arg01, local01
229a4     55 95 02 F6 | 	mov	arg02, local03
229a8     58 95 02 F1 | 	add	arg02, local06
229ac     56 97 02 F6 | 	mov	arg03, local04
229b0     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
229b4                 | '   putpixel(x0+y,y0-x,c)
229b4     54 93 02 F6 | 	mov	arg01, local02
229b8     53 93 02 F1 | 	add	arg01, local01
229bc     55 95 02 F6 | 	mov	arg02, local03
229c0     58 95 82 F1 | 	sub	arg02, local06
229c4     56 97 02 F6 | 	mov	arg03, local04
229c8     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
229cc                 | '   putpixel(x0+y,y0+x,c)
229cc     54 93 02 F6 | 	mov	arg01, local02
229d0     53 93 02 F1 | 	add	arg01, local01
229d4     55 95 02 F6 | 	mov	arg02, local03
229d8     58 95 02 F1 | 	add	arg02, local06
229dc     56 97 02 F6 | 	mov	arg03, local04
229e0     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
229e4                 | '   if d>0 
229e4     01 AE 56 F2 | 	cmps	local05, #1 wc
229e8     18 00 90 CD |  if_b	jmp	#LR__2811
229ec                 | '     d+=da
229ec     5A AF 02 F1 | 	add	local05, local08
229f0                 | '     y-=1
229f0     01 A6 86 F1 | 	sub	local01, #1
229f4                 | '     x+=1
229f4     01 B0 06 F1 | 	add	local06, #1
229f8                 | '     da+=4*4
229f8     10 B4 06 F1 | 	add	local08, #16
229fc                 | '     db+=2*4
229fc     08 B2 06 F1 | 	add	local07, #8
22a00     18 FF 9F FD | 	jmp	#LR__2810
22a04                 | LR__2811
22a04                 | '   else
22a04                 | '     d+=db
22a04     59 AF 02 F1 | 	add	local05, local07
22a08                 | '     x+=1
22a08     01 B0 06 F1 | 	add	local06, #1
22a0c                 | '     da+=2*4
22a0c     08 B4 06 F1 | 	add	local08, #8
22a10                 | '     db+=2*4
22a10     08 B2 06 F1 | 	add	local07, #8
22a14     04 FF 9F FD | 	jmp	#LR__2810
22a18                 | LR__2812
22a18     E7 F0 03 F6 | 	mov	ptra, fp
22a1c     F2 00 A0 FD | 	call	#popregs_
22a20                 | _hg010b_spin2_circle_ret
22a20     2D 00 64 FD | 	ret
22a24                 | 
22a24                 | '     
22a24                 | ' '-- A frame (an empty rectangle) ---------------------------------------
22a24                 | ' 
22a24                 | ' pub frame(x1,y1,x2,y2,c)
22a24                 | _hg010b_spin2_frame
22a24     05 CA 05 F6 | 	mov	COUNT_, #5
22a28     E8 00 A0 FD | 	call	#pushregs_
22a2c     49 A7 02 F6 | 	mov	local01, arg01
22a30     4A A9 02 F6 | 	mov	local02, arg02
22a34     4B AB 02 F6 | 	mov	local03, arg03
22a38     4C AD 02 F6 | 	mov	local04, arg04
22a3c     4D AF 02 F6 | 	mov	local05, arg05
22a40                 | ' 
22a40                 | ' fastline(x1,x2,y1,c)
22a40     53 93 02 F6 | 	mov	arg01, local01
22a44     55 95 02 F6 | 	mov	arg02, local03
22a48     54 97 02 F6 | 	mov	arg03, local02
22a4c     57 99 02 F6 | 	mov	arg04, local05
22a50     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
22a54                 | ' fastline(x1,x2,y2,c)
22a54     53 93 02 F6 | 	mov	arg01, local01
22a58     55 95 02 F6 | 	mov	arg02, local03
22a5c     56 97 02 F6 | 	mov	arg03, local04
22a60     57 99 02 F6 | 	mov	arg04, local05
22a64     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
22a68                 | ' line(x1,y1,x1,y2,c)
22a68     53 93 02 F6 | 	mov	arg01, local01
22a6c     54 95 02 F6 | 	mov	arg02, local02
22a70     53 97 02 F6 | 	mov	arg03, local01
22a74     56 99 02 F6 | 	mov	arg04, local04
22a78     57 9B 02 F6 | 	mov	arg05, local05
22a7c                 | ' draw(x1,y1,x2,y2,c)
22a7c     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
22a80                 | ' line(x2,y1,x2,y2,c)
22a80     55 93 02 F6 | 	mov	arg01, local03
22a84     54 95 02 F6 | 	mov	arg02, local02
22a88     55 97 02 F6 | 	mov	arg03, local03
22a8c     56 99 02 F6 | 	mov	arg04, local04
22a90     57 9B 02 F6 | 	mov	arg05, local05
22a94                 | ' draw(x1,y1,x2,y2,c)
22a94     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
22a98     E7 F0 03 F6 | 	mov	ptra, fp
22a9c     F2 00 A0 FD | 	call	#popregs_
22aa0                 | _hg010b_spin2_frame_ret
22aa0     2D 00 64 FD | 	ret
22aa4                 | 
22aa4                 | ' 
22aa4                 | ' '-- A box (a filled rectangle) ----------------------------------------
22aa4                 | ' 
22aa4                 | ' pub box(x1,y1,x2,y2,c) |yy
22aa4                 | _hg010b_spin2_box
22aa4     06 CA 05 F6 | 	mov	COUNT_, #6
22aa8     E8 00 A0 FD | 	call	#pushregs_
22aac     49 A7 02 F6 | 	mov	local01, arg01
22ab0     4A A9 02 F6 | 	mov	local02, arg02
22ab4     4B AB 02 F6 | 	mov	local03, arg03
22ab8     4C AD 02 F6 | 	mov	local04, arg04
22abc     4D AF 02 F6 | 	mov	local05, arg05
22ac0                 | ' 
22ac0                 | ' repeat yy from y1 to y2
22ac0     54 AD 52 F2 | 	cmps	local04, local02 wc
22ac4     01 B0 86 F6 | 	negc	local06, #1
22ac8     58 AD 02 F1 | 	add	local04, local06
22acc                 | LR__2820
22acc                 | '   fastline(x1,x2,yy,c)
22acc     53 93 02 F6 | 	mov	arg01, local01
22ad0     55 95 02 F6 | 	mov	arg02, local03
22ad4     57 99 02 F6 | 	mov	arg04, local05
22ad8     54 97 02 F6 | 	mov	arg03, local02
22adc     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
22ae0     58 A9 02 F1 | 	add	local02, local06
22ae4     56 A9 0A F2 | 	cmp	local02, local04 wz
22ae8     E0 FF 9F 5D |  if_ne	jmp	#LR__2820
22aec     E7 F0 03 F6 | 	mov	ptra, fp
22af0     F2 00 A0 FD | 	call	#popregs_
22af4                 | _hg010b_spin2_box_ret
22af4     2D 00 64 FD | 	ret
22af8                 | 
22af8                 | '       
22af8                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
22af8                 | _hg010b_spin2_putcharxycgf
22af8                 | ' 
22af8                 | '  
22af8                 | ' repeat yy from 0 to 15
22af8     00 80 06 F6 | 	mov	_var01, #0
22afc     D7 8A 48 FB | 	callpa	#(@LR__2832-@LR__2830)>>2,fcache_load_ptr_
22b00                 | LR__2830
22b00                 | ' 
22b00                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
22b00     95 64 06 F1 | 	add	objptr, #149
22b04     32 83 02 FB | 	rdlong	_var02, objptr
22b08     0A 82 66 F0 | 	shl	_var02, #10
22b0c     37 85 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
22b10     41 85 02 F1 | 	add	_var03, _var02
22b14     4B 83 02 F6 | 	mov	_var02, arg03
22b18     04 82 66 F0 | 	shl	_var02, #4
22b1c     41 85 02 F1 | 	add	_var03, _var02
22b20     40 85 02 F1 | 	add	_var03, _var01
22b24     42 85 C2 FA | 	rdbyte	_var03, _var03
22b28                 | '   asm
22b28     00 84 0E F4 | 	testb	_var03, #0 wz
22b2c     4C 87 C2 A8 |  if_e	setbyte	_var04, arg04, #0
22b30     4D 87 C2 58 |  if_ne	setbyte	_var04, arg05, #0
22b34     01 84 0E F4 | 	testb	_var03, #1 wz
22b38     4C 87 CA A8 |  if_e	setbyte	_var04, arg04, #1
22b3c     4D 87 CA 58 |  if_ne	setbyte	_var04, arg05, #1
22b40     02 84 0E F4 | 	testb	_var03, #2 wz
22b44     4C 87 D2 A8 |  if_e	setbyte	_var04, arg04, #2
22b48     4D 87 D2 58 |  if_ne	setbyte	_var04, arg05, #2
22b4c     03 84 0E F4 | 	testb	_var03, #3 wz
22b50     4C 87 DA A8 |  if_e	setbyte	_var04, arg04, #3
22b54     4D 87 DA 58 |  if_ne	setbyte	_var04, arg05, #3
22b58     04 84 0E F4 | 	testb	_var03, #4 wz
22b5c     4C 89 C2 A8 |  if_e	setbyte	_var05, arg04, #0
22b60     4D 89 C2 58 |  if_ne	setbyte	_var05, arg05, #0
22b64     05 84 0E F4 | 	testb	_var03, #5 wz
22b68     4C 89 CA A8 |  if_e	setbyte	_var05, arg04, #1
22b6c     4D 89 CA 58 |  if_ne	setbyte	_var05, arg05, #1
22b70     06 84 0E F4 | 	testb	_var03, #6 wz
22b74     4C 89 D2 A8 |  if_e	setbyte	_var05, arg04, #2
22b78     4D 89 D2 58 |  if_ne	setbyte	_var05, arg05, #2
22b7c     07 84 0E F4 | 	testb	_var03, #7 wz
22b80     4C 89 DA A8 |  if_e	setbyte	_var05, arg04, #3
22b84     4D 89 DA 58 |  if_ne	setbyte	_var05, arg05, #3
22b88                 | '   
22b88                 | '   ccc[0]:=c1
22b88     99 65 06 F1 | 	add	objptr, #409
22b8c     32 87 62 FC | 	wrlong	_var04, objptr
22b90                 | '   ccc[1]:=c2 
22b90     04 64 06 F1 | 	add	objptr, #4
22b94     32 89 62 FC | 	wrlong	_var05, objptr
22b98                 | '   long[mailbox0][2]:=8
22b98     49 64 86 F1 | 	sub	objptr, #73
22b9c     32 85 02 FB | 	rdlong	_var03, objptr
22ba0     08 84 06 F1 | 	add	_var03, #8
22ba4     42 11 68 FC | 	wrlong	#8, _var03
22ba8                 | '   long[mailbox0][1]:=@ccc
22ba8     32 85 02 F6 | 	mov	_var03, objptr
22bac     45 84 06 F1 | 	add	_var03, #69
22bb0     32 83 02 FB | 	rdlong	_var02, objptr
22bb4     04 82 06 F1 | 	add	_var02, #4
22bb8     41 85 62 FC | 	wrlong	_var03, _var02
22bbc                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
22bbc     0C 65 86 F1 | 	sub	objptr, #268
22bc0     32 85 02 FB | 	rdlong	_var03, objptr
22bc4     4A 83 02 F6 | 	mov	_var02, arg02
22bc8     40 83 02 F1 | 	add	_var02, _var01
22bcc     0A 82 66 F0 | 	shl	_var02, #10
22bd0     49 8B 02 F6 | 	mov	_var06, arg01
22bd4     02 8A 66 F0 | 	shl	_var06, #2
22bd8     45 83 02 F1 | 	add	_var02, _var06
22bdc     41 85 02 F1 | 	add	_var03, _var02
22be0     00 00 78 FF 
22be4     00 84 06 F1 | 	add	_var03, ##-268435456
22be8     0C 65 06 F1 | 	add	objptr, #268
22bec     32 8B 02 FB | 	rdlong	_var06, objptr
22bf0     45 85 62 FC | 	wrlong	_var03, _var06
22bf4                 | '   repeat
22bf4                 | LR__2831
22bf4     32 85 02 FB | 	rdlong	_var03, objptr
22bf8     42 83 02 FB | 	rdlong	_var02, _var03
22bfc     00 82 56 F2 | 	cmps	_var02, #0 wc
22c00     F0 FF 9F CD |  if_b	jmp	#LR__2831
22c04     E9 65 86 F1 | 	sub	objptr, #489
22c08     01 80 06 F1 | 	add	_var01, #1
22c0c     10 80 56 F2 | 	cmps	_var01, #16 wc
22c10     EC FE 9F CD |  if_b	jmp	#LR__2830
22c14                 | LR__2832
22c14                 | _hg010b_spin2_putcharxycgf_ret
22c14     2D 00 64 FD | 	ret
22c18                 | 
22c18                 | ' 
22c18                 | ' 
22c18                 | ' '**********************************************************************r***
22c18                 | ' '                                                                        *
22c18                 | ' ' Font related functions                                                 *
22c18                 | ' '                                                                        *
22c18                 | ' '*************************************************************************
22c18                 | ' 
22c18                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
22c18                 | ' 
22c18                 | ' pub setfontfamily(afontnum)
22c18                 | _hg010b_spin2_setfontfamily
22c18                 | ' 
22c18                 | ' font_family:=afontnum
22c18     95 64 06 F1 | 	add	objptr, #149
22c1c     32 93 62 FC | 	wrlong	arg01, objptr
22c20     95 64 86 F1 | 	sub	objptr, #149
22c24                 | ' 'if afontnum==8
22c24                 | ' '  font_ptr:=@amiga_font
22c24                 | ' 
22c24                 | ' if afontnum==4
22c24     04 92 0E F2 | 	cmp	arg01, #4 wz
22c28                 | '   font_ptr:=@st_font
22c28     37 81 02 A6 |  if_e	mov	_var01, ptr__hg010b_spin2_dat__
22c2c     08 00 00 AF 
22c30     00 80 06 A1 |  if_e	add	_var01, ##4096
22c34     08 64 06 A1 |  if_e	add	objptr, #8
22c38     32 81 62 AC |  if_e	wrlong	_var01, objptr
22c3c     08 64 86 A1 |  if_e	sub	objptr, #8
22c40                 | ' if afontnum==0
22c40     00 92 0E F2 | 	cmp	arg01, #0 wz
22c44                 | '   font_ptr:=@vga_font
22c44     08 64 06 A1 |  if_e	add	objptr, #8
22c48     32 6F 62 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
22c4c     08 64 86 A1 |  if_e	sub	objptr, #8
22c50                 | _hg010b_spin2_setfontfamily_ret
22c50     2D 00 64 FD | 	ret
22c54                 | 
22c54                 | ' 
22c54                 | ' ''--------- Redefine a character
22c54                 | ' 
22c54                 | ' pub defchar(ch,ptr) | s,i ' 
22c54                 | _hg010b_spin2_defchar
22c54                 | ' 
22c54                 | ' s:=font_ptr+ch*16
22c54     08 64 06 F1 | 	add	objptr, #8
22c58     32 81 02 FB | 	rdlong	_var01, objptr
22c5c     08 64 86 F1 | 	sub	objptr, #8
22c60     04 92 66 F0 | 	shl	arg01, #4
22c64     49 81 02 F1 | 	add	_var01, arg01
22c68                 | ' repeat i from 0 to 15
22c68     00 82 06 F6 | 	mov	_var02, #0
22c6c     D7 12 48 FB | 	callpa	#(@LR__2841-@LR__2840)>>2,fcache_load_ptr_
22c70                 | LR__2840
22c70                 | '   byte[s+i]:=byte[ptr+i]
22c70     4A 93 02 F6 | 	mov	arg01, arg02
22c74     41 93 02 F1 | 	add	arg01, _var02
22c78     40 85 02 F6 | 	mov	_var03, _var01
22c7c     49 93 C2 FA | 	rdbyte	arg01, arg01
22c80     41 85 02 F1 | 	add	_var03, _var02
22c84     42 93 42 FC | 	wrbyte	arg01, _var03
22c88     01 82 06 F1 | 	add	_var02, #1
22c8c     10 82 56 F2 | 	cmps	_var02, #16 wc
22c90     DC FF 9F CD |  if_b	jmp	#LR__2840
22c94                 | LR__2841
22c94                 | _hg010b_spin2_defchar_ret
22c94     2D 00 64 FD | 	ret
22c98                 | 
22c98                 | ' 
22c98                 | ' 
22c98                 | ' '*************************************************************************
22c98                 | ' '                                                                        *
22c98                 | ' '  Cursor functions                                                      *
22c98                 | ' '                                                                        *
22c98                 | ' '*************************************************************************
22c98                 | ' 
22c98                 | ' 
22c98                 | ' pub setcursorpos(x,y)
22c98                 | _hg010b_spin2_setcursorpos
22c98     01 CA 05 F6 | 	mov	COUNT_, #1
22c9c     E8 00 A0 FD | 	call	#pushregs_
22ca0                 | ' 
22ca0                 | ' ''---------- Set the (x,y) position of cursor
22ca0                 | ' 
22ca0                 | ' cursor_x:=x
22ca0     3C 64 06 F1 | 	add	objptr, #60
22ca4     32 93 52 FC | 	wrword	arg01, objptr
22ca8                 | ' cursor_y:=y
22ca8     02 64 06 F1 | 	add	objptr, #2
22cac     32 95 42 FC | 	wrbyte	arg02, objptr
22cb0                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
22cb0     02 64 86 F1 | 	sub	objptr, #2
22cb4     32 A7 E2 FA | 	rdword	local01, objptr
22cb8     02 A6 66 F0 | 	shl	local01, #2
22cbc     4A 97 E2 F8 | 	getbyte	arg03, arg02, #0
22cc0     3C 64 86 F1 | 	sub	objptr, #60
22cc4     04 96 66 F0 | 	shl	arg03, #4
22cc8     04 96 06 F1 | 	add	arg03, #4
22ccc     11 92 06 F6 | 	mov	arg01, #17
22cd0     53 95 02 F6 | 	mov	arg02, local01
22cd4     0C F3 BF FD | 	call	#_hg010b_spin2_setspritepos
22cd8     E7 F0 03 F6 | 	mov	ptra, fp
22cdc     F2 00 A0 FD | 	call	#popregs_
22ce0                 | _hg010b_spin2_setcursorpos_ret
22ce0     2D 00 64 FD | 	ret
22ce4                 | 
22ce4                 | ' 
22ce4                 | ' pub setcursorx(x)
22ce4                 | _hg010b_spin2_setcursorx
22ce4                 | ' cursor_x:=x
22ce4     3C 64 06 F1 | 	add	objptr, #60
22ce8     32 93 52 FC | 	wrword	arg01, objptr
22cec                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
22cec     49 95 32 F9 | 	getword	arg02, arg01, #0
22cf0     02 94 66 F0 | 	shl	arg02, #2
22cf4     02 64 06 F1 | 	add	objptr, #2
22cf8     32 97 C2 FA | 	rdbyte	arg03, objptr
22cfc     3E 64 86 F1 | 	sub	objptr, #62
22d00     04 96 66 F0 | 	shl	arg03, #4
22d04     04 96 06 F1 | 	add	arg03, #4
22d08     11 92 06 F6 | 	mov	arg01, #17
22d0c     D4 F2 BF FD | 	call	#_hg010b_spin2_setspritepos
22d10                 | _hg010b_spin2_setcursorx_ret
22d10     2D 00 64 FD | 	ret
22d14                 | 
22d14                 | ' 
22d14                 | ' pub setcursory(y) 
22d14                 | _hg010b_spin2_setcursory
22d14                 | ' cursor_y:=y
22d14     3E 64 06 F1 | 	add	objptr, #62
22d18     32 93 42 FC | 	wrbyte	arg01, objptr
22d1c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
22d1c     02 64 86 F1 | 	sub	objptr, #2
22d20     32 95 E2 FA | 	rdword	arg02, objptr
22d24     02 94 66 F0 | 	shl	arg02, #2
22d28     49 97 E2 F8 | 	getbyte	arg03, arg01, #0
22d2c     3C 64 86 F1 | 	sub	objptr, #60
22d30     04 96 66 F0 | 	shl	arg03, #4
22d34     04 96 06 F1 | 	add	arg03, #4
22d38     11 92 06 F6 | 	mov	arg01, #17
22d3c     A4 F2 BF FD | 	call	#_hg010b_spin2_setspritepos
22d40                 | _hg010b_spin2_setcursory_ret
22d40     2D 00 64 FD | 	ret
22d44                 | 
22d44                 | ' 
22d44                 | ' '*************************************************************************
22d44                 | ' '                                                                        *
22d44                 | ' '  VBlank functions                                                      *
22d44                 | ' '                                                                        *
22d44                 | ' '*************************************************************************
22d44                 | ' 
22d44                 | ' pub waitvbl(amount) | i
22d44                 | _hg010b_spin2_waitvbl
22d44     03 CA 05 F6 | 	mov	COUNT_, #3
22d48     E8 00 A0 FD | 	call	#pushregs_
22d4c     49 A7 02 F6 | 	mov	local01, arg01
22d50                 | ' 
22d50                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
22d50                 | ' 
22d50                 | ' repeat i from 1 to amount
22d50     01 A8 06 F6 | 	mov	local02, #1
22d54     01 A6 56 F2 | 	cmps	local01, #1 wc
22d58     01 AA 86 F6 | 	negc	local03, #1
22d5c     55 A7 02 F1 | 	add	local01, local03
22d60                 | LR__2850
22d60                 | '   repeat until vblank==0
22d60                 | LR__2851
22d60     49 64 06 F1 | 	add	objptr, #73
22d64     32 93 0A FB | 	rdlong	arg01, objptr wz
22d68     49 64 86 F1 | 	sub	objptr, #73
22d6c     0C 00 90 AD |  if_e	jmp	#LR__2852
22d70                 | '     waitus(100)
22d70     64 92 06 F6 | 	mov	arg01, #100
22d74     F0 22 B0 FD | 	call	#__system___waitus
22d78     E4 FF 9F FD | 	jmp	#LR__2851
22d7c                 | LR__2852
22d7c                 | '   repeat until vblank==1
22d7c                 | LR__2853
22d7c     49 64 06 F1 | 	add	objptr, #73
22d80     32 93 02 FB | 	rdlong	arg01, objptr
22d84     49 64 86 F1 | 	sub	objptr, #73
22d88     01 92 0E F2 | 	cmp	arg01, #1 wz
22d8c     0C 00 90 AD |  if_e	jmp	#LR__2854
22d90                 | '     waitus(100)
22d90     64 92 06 F6 | 	mov	arg01, #100
22d94     D0 22 B0 FD | 	call	#__system___waitus
22d98     E0 FF 9F FD | 	jmp	#LR__2853
22d9c                 | LR__2854
22d9c     55 A9 02 F1 | 	add	local02, local03
22da0     53 A9 0A F2 | 	cmp	local02, local01 wz
22da4     B8 FF 9F 5D |  if_ne	jmp	#LR__2850
22da8     E7 F0 03 F6 | 	mov	ptra, fp
22dac     F2 00 A0 FD | 	call	#popregs_
22db0                 | _hg010b_spin2_waitvbl_ret
22db0     2D 00 64 FD | 	ret
22db4                 | 
22db4                 | ' 
22db4                 | ' ''---------- Set color #c in palette to r,g,b
22db4                 | ' 
22db4                 | ' pub setcolor(c,r,g,b)  |cc
22db4                 | _hg010b_spin2_setcolor
22db4                 | ' 
22db4                 | ' cc:=r<<24+g<<16+b<<8
22db4     18 94 66 F0 | 	shl	arg02, #24
22db8     10 96 66 F0 | 	shl	arg03, #16
22dbc     4B 95 02 F1 | 	add	arg02, arg03
22dc0     08 98 66 F0 | 	shl	arg04, #8
22dc4     4C 95 02 F1 | 	add	arg02, arg04
22dc8                 | ' long[palette_ptr+4*c]:=cc
22dc8     1C 64 06 F1 | 	add	objptr, #28
22dcc     32 99 02 FB | 	rdlong	arg04, objptr
22dd0     1C 64 86 F1 | 	sub	objptr, #28
22dd4     02 92 66 F0 | 	shl	arg01, #2
22dd8     49 99 02 F1 | 	add	arg04, arg01
22ddc     4C 95 62 FC | 	wrlong	arg02, arg04
22de0                 | _hg010b_spin2_setcolor_ret
22de0     2D 00 64 FD | 	ret
22de4                 | 
22de4                 | ' 
22de4                 | ' 
22de4                 | ' pub cls(fc,bc)   :c,i
22de4                 | _hg010b_spin2_cls
22de4     02 CA 05 F6 | 	mov	COUNT_, #2
22de8     E8 00 A0 FD | 	call	#pushregs_
22dec     49 A7 02 F6 | 	mov	local01, arg01
22df0     4A A9 02 F6 | 	mov	local02, arg02
22df4                 | ' 
22df4                 | ' c:=bc
22df4                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
22df4     DD 64 06 F1 | 	add	objptr, #221
22df8     32 93 02 FB | 	rdlong	arg01, objptr
22dfc     A5 64 86 F1 | 	sub	objptr, #165
22e00     32 97 02 FB | 	rdlong	arg03, objptr
22e04     02 96 66 F0 | 	shl	arg03, #2
22e08     54 95 02 F6 | 	mov	arg02, local02
22e0c     00 98 06 F6 | 	mov	arg04, #0
22e10     01 9A 06 F6 | 	mov	arg05, #1
22e14     0B 00 00 FF 
22e18     94 64 06 F1 | 	add	objptr, ##5780
22e1c     AC 10 B0 FD | 	call	#_psram_spin2_fill
22e20                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
22e20     0B 00 00 FF 
22e24     C8 64 86 F1 | 	sub	objptr, ##5832
22e28     32 93 02 FB | 	rdlong	arg01, objptr
22e2c     04 64 86 F1 | 	sub	objptr, #4
22e30     32 97 02 FB | 	rdlong	arg03, objptr
22e34     49 97 82 F1 | 	sub	arg03, arg01
22e38     20 94 06 F6 | 	mov	arg02, #32
22e3c     00 98 06 F6 | 	mov	arg04, #0
22e40     01 9A 06 F6 | 	mov	arg05, #1
22e44     0B 00 00 FF 
22e48     CC 64 06 F1 | 	add	objptr, ##5836
22e4c     7C 10 B0 FD | 	call	#_psram_spin2_fill
22e50                 | ' setwritecolors(fc,bc)
22e50                 | ' 
22e50                 | ' write_color:=ff
22e50     0B 00 00 FF 
22e54     8B 64 86 F1 | 	sub	objptr, ##5771
22e58     32 A7 62 FC | 	wrlong	local01, objptr
22e5c                 | ' write_background:=bb
22e5c     04 64 06 F1 | 	add	objptr, #4
22e60     32 A9 62 FC | 	wrlong	local02, objptr
22e64                 | ' cursor_x:=0
22e64     09 64 86 F1 | 	sub	objptr, #9
22e68     32 01 58 FC | 	wrword	#0, objptr
22e6c                 | ' cursor_y:=0
22e6c     02 64 06 F1 | 	add	objptr, #2
22e70     32 01 48 FC | 	wrbyte	#0, objptr
22e74                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
22e74     02 64 86 F1 | 	sub	objptr, #2
22e78     32 95 E2 FA | 	rdword	arg02, objptr
22e7c     02 94 66 F0 | 	shl	arg02, #2
22e80     3C 64 86 F1 | 	sub	objptr, #60
22e84     04 96 06 F6 | 	mov	arg03, #4
22e88     11 92 06 F6 | 	mov	arg01, #17
22e8c     54 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
22e90                 | ' setcursorcolor(fc)
22e90     53 93 02 F6 | 	mov	arg01, local01
22e94     60 ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
22e98     54 7B 02 F6 | 	mov	result1, local02
22e9c     00 7C 06 F6 | 	mov	result2, #0
22ea0     E7 F0 03 F6 | 	mov	ptra, fp
22ea4     F2 00 A0 FD | 	call	#popregs_
22ea8                 | _hg010b_spin2_cls_ret
22ea8     2D 00 64 FD | 	ret
22eac                 | 
22eac                 | ' 
22eac                 | ' ''---------- Output a char at the cursor position, move the cursor 
22eac                 | ' 
22eac                 | ' pub putchar(achar) | c,x,y,l,newcpl
22eac                 | _hg010b_spin2_putchar
22eac     02 CA 05 F6 | 	mov	COUNT_, #2
22eb0     E8 00 A0 FD | 	call	#pushregs_
22eb4     49 A7 02 F6 | 	mov	local01, arg01
22eb8                 | ' 
22eb8                 | ' if achar==10
22eb8     0A A6 0E F2 | 	cmp	local01, #10 wz
22ebc                 | '   crlf()
22ebc     78 07 B0 AD |  if_e	call	#_hg010b_spin2_crlf
22ec0                 | ' if achar==9
22ec0     09 A6 0E F2 | 	cmp	local01, #9 wz
22ec4     18 00 90 5D |  if_ne	jmp	#LR__2860
22ec8                 | '   cursor_x:=(cursor_x& %11110000)+16
22ec8     3C 64 06 F1 | 	add	objptr, #60
22ecc     32 97 E2 FA | 	rdword	arg03, objptr
22ed0     F0 96 06 F5 | 	and	arg03, #240
22ed4     10 96 06 F1 | 	add	arg03, #16
22ed8     32 97 52 FC | 	wrword	arg03, objptr
22edc     3C 64 86 F1 | 	sub	objptr, #60
22ee0                 | LR__2860
22ee0                 | '   
22ee0                 | ' if (achar<>9) && (achar<>10) 
22ee0     09 A6 0E F2 | 	cmp	local01, #9 wz
22ee4     0A A6 0E 52 |  if_ne	cmp	local01, #10 wz
22ee8     A8 00 90 AD |  if_e	jmp	#LR__2861
22eec                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
22eec     3C 64 06 F1 | 	add	objptr, #60
22ef0     32 93 E2 FA | 	rdword	arg01, objptr
22ef4     02 64 06 F1 | 	add	objptr, #2
22ef8     32 95 C2 FA | 	rdbyte	arg02, objptr
22efc     04 94 66 F0 | 	shl	arg02, #4
22f00     04 94 06 F1 | 	add	arg02, #4
22f04     03 64 06 F1 | 	add	objptr, #3
22f08     32 99 02 FB | 	rdlong	arg04, objptr
22f0c     04 64 06 F1 | 	add	objptr, #4
22f10     32 9B 02 FB | 	rdlong	arg05, objptr
22f14     45 64 86 F1 | 	sub	objptr, #69
22f18     53 97 02 F6 | 	mov	arg03, local01
22f1c     D8 FB BF FD | 	call	#_hg010b_spin2_putcharxycgf
22f20     04 64 06 F1 | 	add	objptr, #4
22f24     32 93 02 FB | 	rdlong	arg01, objptr
22f28     1C 00 00 FF 
22f2c     5C 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
22f30     37 97 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
22f34     3A 64 06 F1 | 	add	objptr, #58
22f38     32 9B C2 FA | 	rdbyte	arg05, objptr
22f3c     4D 97 02 FD | 	qmul	arg03, arg05
22f40                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
22f40     1C 00 00 FF 
22f44     5C 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
22f48     02 64 86 F1 | 	sub	objptr, #2
22f4c     32 A9 E2 FA | 	rdword	local02, objptr
22f50     01 A8 46 F0 | 	shr	local02, #1
22f54     53 95 02 F6 | 	mov	arg02, local01
22f58     01 96 06 F6 | 	mov	arg03, #1
22f5c     00 98 06 F6 | 	mov	arg04, #0
22f60     01 9A 06 F6 | 	mov	arg05, #1
22f64     0B 00 00 FF 
22f68     90 64 06 F1 | 	add	objptr, ##5776
22f6c     18 A6 62 FD | 	getqx	local01
22f70     54 A7 02 F1 | 	add	local01, local02
22f74     53 93 02 F1 | 	add	arg01, local01
22f78     50 0F B0 FD | 	call	#_psram_spin2_fill
22f7c                 | '   cursor_x+=2
22f7c     0B 00 00 FF 
22f80     90 64 86 F1 | 	sub	objptr, ##5776
22f84     32 A9 E2 FA | 	rdword	local02, objptr
22f88     02 A8 06 F1 | 	add	local02, #2
22f8c     32 A9 52 FC | 	wrword	local02, objptr
22f90     3C 64 86 F1 | 	sub	objptr, #60
22f94                 | LR__2861
22f94                 | ' 
22f94                 | ' if cursor_x>=256
22f94     3C 64 06 F1 | 	add	objptr, #60
22f98     32 A9 E2 FA | 	rdword	local02, objptr
22f9c     3C 64 86 F1 | 	sub	objptr, #60
22fa0     00 A9 56 F2 | 	cmps	local02, #256 wc
22fa4     64 00 90 CD |  if_b	jmp	#LR__2863
22fa8                 | '   cursor_x:=0
22fa8     3C 64 06 F1 | 	add	objptr, #60
22fac     32 01 58 FC | 	wrword	#0, objptr
22fb0                 | '   cursor_y+=1
22fb0     02 64 06 F1 | 	add	objptr, #2
22fb4     32 A9 C2 FA | 	rdbyte	local02, objptr
22fb8     01 A8 06 F1 | 	add	local02, #1
22fbc     32 A9 42 FC | 	wrbyte	local02, objptr
22fc0                 | '   if cursor_y>st_lines-1
22fc0     C3 64 06 F1 | 	add	objptr, #195
22fc4     32 A9 02 FB | 	rdlong	local02, objptr
22fc8     01 A8 86 F1 | 	sub	local02, #1
22fcc     C3 64 86 F1 | 	sub	objptr, #195
22fd0     32 97 C2 FA | 	rdbyte	arg03, objptr
22fd4     3E 64 86 F1 | 	sub	objptr, #62
22fd8     54 97 5A F2 | 	cmps	arg03, local02 wcz
22fdc     2C 00 90 ED |  if_be	jmp	#LR__2862
22fe0                 | '     scrollup2()
22fe0     00 92 06 F6 | 	mov	arg01, #0
22fe4     01 00 00 FF 
22fe8     58 94 06 F6 | 	mov	arg02, ##600
22fec     10 96 06 F6 | 	mov	arg03, #16
22ff0     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
22ff4                 | '     cursor_y:=st_lines-1
22ff4     01 65 06 F1 | 	add	objptr, #257
22ff8     32 A9 02 FB | 	rdlong	local02, objptr
22ffc     01 A8 86 F1 | 	sub	local02, #1
23000     C3 64 86 F1 | 	sub	objptr, #195
23004     32 A9 42 FC | 	wrbyte	local02, objptr
23008     3E 64 86 F1 | 	sub	objptr, #62
2300c                 | LR__2862
2300c                 | LR__2863
2300c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
2300c     3C 64 06 F1 | 	add	objptr, #60
23010     32 95 E2 FA | 	rdword	arg02, objptr
23014     02 94 66 F0 | 	shl	arg02, #2
23018     02 64 06 F1 | 	add	objptr, #2
2301c     32 97 C2 FA | 	rdbyte	arg03, objptr
23020     3E 64 86 F1 | 	sub	objptr, #62
23024     04 96 66 F0 | 	shl	arg03, #4
23028     04 96 06 F1 | 	add	arg03, #4
2302c     11 92 06 F6 | 	mov	arg01, #17
23030     B0 EF BF FD | 	call	#_hg010b_spin2_setspritepos
23034     E7 F0 03 F6 | 	mov	ptra, fp
23038     F2 00 A0 FD | 	call	#popregs_
2303c                 | _hg010b_spin2_putchar_ret
2303c     2D 00 64 FD | 	ret
23040                 | 
23040                 | '     
23040                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
23040                 | ' 
23040                 | ' pub putchar2(achar) | c,x,y,l,newcpl
23040                 | _hg010b_spin2_putchar2
23040     02 CA 05 F6 | 	mov	COUNT_, #2
23044     E8 00 A0 FD | 	call	#pushregs_
23048     49 A7 02 F6 | 	mov	local01, arg01
2304c                 | ' 
2304c                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
2304c     3C 64 06 F1 | 	add	objptr, #60
23050     32 93 E2 FA | 	rdword	arg01, objptr
23054     02 64 06 F1 | 	add	objptr, #2
23058     32 95 C2 FA | 	rdbyte	arg02, objptr
2305c     04 94 66 F0 | 	shl	arg02, #4
23060     04 94 06 F1 | 	add	arg02, #4
23064     03 64 06 F1 | 	add	objptr, #3
23068     32 99 02 FB | 	rdlong	arg04, objptr
2306c     04 64 06 F1 | 	add	objptr, #4
23070     32 9B 02 FB | 	rdlong	arg05, objptr
23074     45 64 86 F1 | 	sub	objptr, #69
23078     53 97 02 F6 | 	mov	arg03, local01
2307c     78 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
23080     04 64 06 F1 | 	add	objptr, #4
23084     32 93 02 FB | 	rdlong	arg01, objptr
23088     1C 00 00 FF 
2308c     5C 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
23090     37 97 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
23094     3A 64 06 F1 | 	add	objptr, #58
23098     32 9B C2 FA | 	rdbyte	arg05, objptr
2309c     4D 97 02 FD | 	qmul	arg03, arg05
230a0                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
230a0     1C 00 00 FF 
230a4     5C 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
230a8     02 64 86 F1 | 	sub	objptr, #2
230ac     32 A9 E2 FA | 	rdword	local02, objptr
230b0     01 A8 46 F0 | 	shr	local02, #1
230b4     53 95 02 F6 | 	mov	arg02, local01
230b8     01 96 06 F6 | 	mov	arg03, #1
230bc     00 98 06 F6 | 	mov	arg04, #0
230c0     01 9A 06 F6 | 	mov	arg05, #1
230c4     0B 00 00 FF 
230c8     90 64 06 F1 | 	add	objptr, ##5776
230cc     18 A6 62 FD | 	getqx	local01
230d0     54 A7 02 F1 | 	add	local01, local02
230d4     53 93 02 F1 | 	add	arg01, local01
230d8     F0 0D B0 FD | 	call	#_psram_spin2_fill
230dc                 | ' 
230dc                 | ' cursor_x+=2
230dc     0B 00 00 FF 
230e0     90 64 86 F1 | 	sub	objptr, ##5776
230e4     32 A9 E2 FA | 	rdword	local02, objptr
230e8     02 A8 06 F1 | 	add	local02, #2
230ec     32 A9 52 FC | 	wrword	local02, objptr
230f0                 | ' if cursor_x>=256
230f0     54 A9 32 F9 | 	getword	local02, local02, #0
230f4     3C 64 86 F1 | 	sub	objptr, #60
230f8     00 A9 56 F2 | 	cmps	local02, #256 wc
230fc     64 00 90 CD |  if_b	jmp	#LR__2871
23100                 | '   cursor_x:=0
23100     3C 64 06 F1 | 	add	objptr, #60
23104     32 01 58 FC | 	wrword	#0, objptr
23108                 | '   cursor_y+=1
23108     02 64 06 F1 | 	add	objptr, #2
2310c     32 A9 C2 FA | 	rdbyte	local02, objptr
23110     01 A8 06 F1 | 	add	local02, #1
23114     32 A9 42 FC | 	wrbyte	local02, objptr
23118                 | '   if cursor_y>st_lines-1
23118     C3 64 06 F1 | 	add	objptr, #195
2311c     32 A9 02 FB | 	rdlong	local02, objptr
23120     01 A8 86 F1 | 	sub	local02, #1
23124     C3 64 86 F1 | 	sub	objptr, #195
23128     32 97 C2 FA | 	rdbyte	arg03, objptr
2312c     3E 64 86 F1 | 	sub	objptr, #62
23130     54 97 5A F2 | 	cmps	arg03, local02 wcz
23134     2C 00 90 ED |  if_be	jmp	#LR__2870
23138                 | '     scrollup2()
23138     00 92 06 F6 | 	mov	arg01, #0
2313c     01 00 00 FF 
23140     58 94 06 F6 | 	mov	arg02, ##600
23144     10 96 06 F6 | 	mov	arg03, #16
23148     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
2314c                 | '     cursor_y:=st_lines-1
2314c     01 65 06 F1 | 	add	objptr, #257
23150     32 A9 02 FB | 	rdlong	local02, objptr
23154     01 A8 86 F1 | 	sub	local02, #1
23158     C3 64 86 F1 | 	sub	objptr, #195
2315c     32 A9 42 FC | 	wrbyte	local02, objptr
23160     3E 64 86 F1 | 	sub	objptr, #62
23164                 | LR__2870
23164                 | LR__2871
23164                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
23164     3C 64 06 F1 | 	add	objptr, #60
23168     32 95 E2 FA | 	rdword	arg02, objptr
2316c     02 94 66 F0 | 	shl	arg02, #2
23170     02 64 06 F1 | 	add	objptr, #2
23174     32 97 C2 FA | 	rdbyte	arg03, objptr
23178     3E 64 86 F1 | 	sub	objptr, #62
2317c     04 96 66 F0 | 	shl	arg03, #4
23180     04 96 06 F1 | 	add	arg03, #4
23184     11 92 06 F6 | 	mov	arg01, #17
23188     58 EE BF FD | 	call	#_hg010b_spin2_setspritepos
2318c     E7 F0 03 F6 | 	mov	ptra, fp
23190     F2 00 A0 FD | 	call	#popregs_
23194                 | _hg010b_spin2_putchar2_ret
23194     2D 00 64 FD | 	ret
23198                 | 
23198                 | ' ''--------- Output a string at the cursor position, move the cursor  
23198                 | ' 
23198                 | ' pub write(text) | iii,c,ncx,ncy
23198                 | _hg010b_spin2_write
23198     04 CA 05 F6 | 	mov	COUNT_, #4
2319c     E8 00 A0 FD | 	call	#pushregs_
231a0     49 A7 02 F6 | 	mov	local01, arg01
231a4                 | ' 
231a4                 | ' repeat iii from 0 to strsize(text)-1
231a4     00 A8 06 F6 | 	mov	local02, #0
231a8     53 93 02 F6 | 	mov	arg01, local01
231ac     49 AB 02 F6 | 	mov	local03, arg01
231b0     D7 06 48 FB | 	callpa	#(@LR__2881-@LR__2880)>>2,fcache_load_ptr_
231b4                 | LR__2880
231b4     55 7B CA FA | 	rdbyte	result1, local03 wz
231b8     01 AA 06 51 |  if_ne	add	local03, #1
231bc     F4 FF 9F 5D |  if_ne	jmp	#LR__2880
231c0                 | LR__2881
231c0     49 AB 82 F1 | 	sub	local03, arg01
231c4     01 AA 86 F1 | 	sub	local03, #1
231c8     00 AA 56 F2 | 	cmps	local03, #0 wc
231cc     01 AC 86 F6 | 	negc	local04, #1
231d0     56 AB 02 F1 | 	add	local03, local04
231d4                 | LR__2882
231d4                 | '   putchar2(byte[text+iii])
231d4     53 93 02 F6 | 	mov	arg01, local01
231d8     54 93 02 F1 | 	add	arg01, local02
231dc     49 93 C2 FA | 	rdbyte	arg01, arg01
231e0     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
231e4     56 A9 02 F1 | 	add	local02, local04
231e8     55 A9 0A F2 | 	cmp	local02, local03 wz
231ec     E4 FF 9F 5D |  if_ne	jmp	#LR__2882
231f0     E7 F0 03 F6 | 	mov	ptra, fp
231f4     F2 00 A0 FD | 	call	#popregs_
231f8                 | _hg010b_spin2_write_ret
231f8     2D 00 64 FD | 	ret
231fc                 | 
231fc                 | '    
231fc                 | ' ' a version for text scrolling in Basic shifted 4 lines down
231fc                 | ' 
231fc                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
231fc                 | _hg010b_spin2_scrollup2
231fc     03 CA 05 F6 | 	mov	COUNT_, #3
23200     E8 00 A0 FD | 	call	#pushregs_
23204                 | ' 	
23204                 | ' repeat i from 4 to 579 
23204     04 A6 06 F6 | 	mov	local01, #4
23208                 | LR__2890
23208     DD 64 06 F1 | 	add	objptr, #221
2320c     32 95 02 FB | 	rdlong	arg02, objptr
23210     53 9B 02 F6 | 	mov	arg05, local01
23214     10 9A 06 F1 | 	add	arg05, #16
23218     02 9A 66 F0 | 	shl	arg05, #2
2321c     14 64 06 F1 | 	add	objptr, #20
23220     32 97 02 FB | 	rdlong	arg03, objptr
23224     4B 9B 02 FD | 	qmul	arg05, arg03
23228                 | '   ram.read1($7E800, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
23228     02 96 66 F0 | 	shl	arg03, #2
2322c     F4 03 00 FF 
23230     00 92 06 F6 | 	mov	arg01, ##518144
23234     0A 00 00 FF 
23238     DB 65 06 F1 | 	add	objptr, ##5595
2323c     18 9A 62 FD | 	getqx	arg05
23240     4D 95 02 F1 | 	add	arg02, arg05
23244     4C 0B B0 FD | 	call	#_psram_spin2_read1
23248     0A 00 00 FF 
2324c     EF 65 86 F1 | 	sub	objptr, ##5615
23250     32 95 02 FB | 	rdlong	arg02, objptr
23254     53 9B 02 F6 | 	mov	arg05, local01
23258     02 9A 66 F0 | 	shl	arg05, #2
2325c     14 64 06 F1 | 	add	objptr, #20
23260     32 97 02 FB | 	rdlong	arg03, objptr
23264     4B 9B 02 FD | 	qmul	arg05, arg03
23268                 | '   ram.write($7E800, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
23268     02 96 66 F0 | 	shl	arg03, #2
2326c     F4 03 00 FF 
23270     00 92 06 F6 | 	mov	arg01, ##518144
23274     0A 00 00 FF 
23278     DB 65 06 F1 | 	add	objptr, ##5595
2327c     18 9A 62 FD | 	getqx	arg05
23280     4D 95 02 F1 | 	add	arg02, arg05
23284     A8 0B B0 FD | 	call	#_psram_spin2_write
23288     0B 00 00 FF 
2328c     CC 64 86 F1 | 	sub	objptr, ##5836
23290     01 A6 06 F1 | 	add	local01, #1
23294     01 00 00 FF 
23298     44 A6 16 F2 | 	cmp	local01, ##580 wc
2329c     68 FF 9F CD |  if_b	jmp	#LR__2890
232a0                 | ' 
232a0                 | ' repeat i from 580 to 599
232a0     01 00 00 FF 
232a4     44 A6 06 F6 | 	mov	local01, ##580
232a8                 | LR__2891
232a8                 | '    fastline(0,1023,i,write_background)   
232a8     45 64 06 F1 | 	add	objptr, #69
232ac     32 99 02 FB | 	rdlong	arg04, objptr
232b0     45 64 86 F1 | 	sub	objptr, #69
232b4     00 92 06 F6 | 	mov	arg01, #0
232b8     09 94 CE F9 | 	bmask	arg02, #9
232bc     53 97 02 F6 | 	mov	arg03, local01
232c0     6C EF BF FD | 	call	#_hg010b_spin2_fastline
232c4     01 A6 06 F1 | 	add	local01, #1
232c8     01 00 00 FF 
232cc     58 A6 16 F2 | 	cmp	local01, ##600 wc
232d0     D4 FF 9F CD |  if_b	jmp	#LR__2891
232d4                 | ' repeat i from 0 to 3
232d4     00 A6 06 F6 | 	mov	local01, #0
232d8                 | LR__2892
232d8                 | '    fastline(0,1023,i,write_background)      
232d8     45 64 06 F1 | 	add	objptr, #69
232dc     32 99 02 FB | 	rdlong	arg04, objptr
232e0     45 64 86 F1 | 	sub	objptr, #69
232e4     00 92 06 F6 | 	mov	arg01, #0
232e8     09 94 CE F9 | 	bmask	arg02, #9
232ec     53 97 02 F6 | 	mov	arg03, local01
232f0     3C EF BF FD | 	call	#_hg010b_spin2_fastline
232f4     01 A6 06 F1 | 	add	local01, #1
232f8     04 A6 56 F2 | 	cmps	local01, #4 wc
232fc     D8 FF 9F CD |  if_b	jmp	#LR__2892
23300                 | ' 
23300                 | ' repeat i from 0 to 35
23300     00 A6 06 F6 | 	mov	local01, #0
23304                 | LR__2893
23304     53 9B 02 F6 | 	mov	arg05, local01
23308     01 9A 06 F1 | 	add	arg05, #1
2330c     1C 00 00 FF 
23310     5C 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
23314     37 97 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
23318     4B 9B 02 FD | 	qmul	arg05, arg03
2331c                 | '   ram.read1($7E800, textbuf_ptr+(i+1)*timings[7], timings[7])
2331c     04 64 06 F1 | 	add	objptr, #4
23320     32 95 02 FB | 	rdlong	arg02, objptr
23324     1C 00 00 FF 
23328     5C 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
2332c     F4 03 00 FF 
23330     00 92 06 F6 | 	mov	arg01, ##518144
23334     0B 00 00 FF 
23338     C8 64 06 F1 | 	add	objptr, ##5832
2333c     18 9A 62 FD | 	getqx	arg05
23340     4D 95 02 F1 | 	add	arg02, arg05
23344     4C 0A B0 FD | 	call	#_psram_spin2_read1
23348     1C 00 00 FF 
2334c     5C 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
23350     37 97 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
23354     4B A7 02 FD | 	qmul	local01, arg03
23358                 | '   ram.write($7E800, textbuf_ptr+i*timings[7], timings[7])
23358     0B 00 00 FF 
2335c     C8 64 86 F1 | 	sub	objptr, ##5832
23360     32 95 02 FB | 	rdlong	arg02, objptr
23364     1C 00 00 FF 
23368     5C 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
2336c     F4 03 00 FF 
23370     00 92 06 F6 | 	mov	arg01, ##518144
23374     0B 00 00 FF 
23378     C8 64 06 F1 | 	add	objptr, ##5832
2337c     18 9A 62 FD | 	getqx	arg05
23380     4D 95 02 F1 | 	add	arg02, arg05
23384     A8 0A B0 FD | 	call	#_psram_spin2_write
23388     0B 00 00 FF 
2338c     CC 64 86 F1 | 	sub	objptr, ##5836
23390     01 A6 06 F1 | 	add	local01, #1
23394     24 A6 56 F2 | 	cmps	local01, #36 wc
23398     68 FF 9F CD |  if_b	jmp	#LR__2893
2339c                 | ' repeat i from 0 to timings[7]-1
2339c     00 A6 06 F6 | 	mov	local01, #0
233a0     1C 00 00 FF 
233a4     5C 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
233a8     37 A9 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
233ac     1C 00 00 FF 
233b0     5C 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
233b4     01 A8 86 F1 | 	sub	local02, #1
233b8     00 A8 56 F2 | 	cmps	local02, #0 wc
233bc     01 AA 86 F6 | 	negc	local03, #1
233c0     55 A9 02 F1 | 	add	local02, local03
233c4                 | LR__2894
233c4                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
233c4     04 64 06 F1 | 	add	objptr, #4
233c8     32 93 02 FB | 	rdlong	arg01, objptr
233cc     1C 00 00 FF 
233d0     5C 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
233d4     37 9B 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
233d8     1C 00 00 FF 
233dc     5C 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
233e0     4D 99 02 F6 | 	mov	arg04, arg05
233e4     03 98 66 F0 | 	shl	arg04, #3
233e8     4D 99 02 F1 | 	add	arg04, arg05
233ec     02 98 66 F0 | 	shl	arg04, #2
233f0     53 99 02 F1 | 	add	arg04, local01
233f4     4C 93 02 F1 | 	add	arg01, arg04
233f8     20 94 06 F6 | 	mov	arg02, #32
233fc     01 96 06 F6 | 	mov	arg03, #1
23400     00 98 06 F6 | 	mov	arg04, #0
23404     01 9A 06 F6 | 	mov	arg05, #1
23408     0B 00 00 FF 
2340c     C8 64 06 F1 | 	add	objptr, ##5832
23410     B8 0A B0 FD | 	call	#_psram_spin2_fill
23414     0B 00 00 FF 
23418     CC 64 86 F1 | 	sub	objptr, ##5836
2341c     55 A7 02 F1 | 	add	local01, local03
23420     54 A7 0A F2 | 	cmp	local01, local02 wz
23424     9C FF 9F 5D |  if_ne	jmp	#LR__2894
23428     E7 F0 03 F6 | 	mov	ptra, fp
2342c     F2 00 A0 FD | 	call	#popregs_
23430                 | _hg010b_spin2_scrollup2_ret
23430     2D 00 64 FD | 	ret
23434                 | 
23434                 | '  
23434                 | ' ''----------- Scroll the screen one line down 
23434                 | ' 
23434                 | ' pub scrolldown(start=0) | i
23434                 | _hg010b_spin2_scrolldown
23434     05 CA 05 F6 | 	mov	COUNT_, #5
23438     E8 00 A0 FD | 	call	#pushregs_
2343c     49 A7 02 F6 | 	mov	local01, arg01
23440                 | ' 
23440                 | ' repeat i from 579 to (start*16)+4
23440     01 00 00 FF 
23444     43 A8 06 F6 | 	mov	local02, ##579
23448     53 AB 02 F6 | 	mov	local03, local01
2344c     04 AA 66 F0 | 	shl	local03, #4
23450     04 AA 06 F1 | 	add	local03, #4
23454     01 00 00 FF 
23458     43 AA 56 F2 | 	cmps	local03, ##579 wc
2345c     01 AC 86 F6 | 	negc	local04, #1
23460     56 AF 02 F6 | 	mov	local05, local04
23464     56 AB 02 F1 | 	add	local03, local04
23468                 | LR__2900
23468     DD 64 06 F1 | 	add	objptr, #221
2346c     32 95 02 FB | 	rdlong	arg02, objptr
23470     54 AD 02 F6 | 	mov	local04, local02
23474     02 AC 66 F0 | 	shl	local04, #2
23478     14 64 06 F1 | 	add	objptr, #20
2347c     32 97 02 FB | 	rdlong	arg03, objptr
23480     4B AD 02 FD | 	qmul	local04, arg03
23484                 | '   ram.read1($7E800, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
23484     02 96 66 F0 | 	shl	arg03, #2
23488     F4 03 00 FF 
2348c     00 92 06 F6 | 	mov	arg01, ##518144
23490     0A 00 00 FF 
23494     DB 65 06 F1 | 	add	objptr, ##5595
23498     18 AC 62 FD | 	getqx	local04
2349c     56 95 02 F1 | 	add	arg02, local04
234a0     F0 08 B0 FD | 	call	#_psram_spin2_read1
234a4     0A 00 00 FF 
234a8     EF 65 86 F1 | 	sub	objptr, ##5615
234ac     32 95 02 FB | 	rdlong	arg02, objptr
234b0     54 AD 02 F6 | 	mov	local04, local02
234b4     10 AC 06 F1 | 	add	local04, #16
234b8     02 AC 66 F0 | 	shl	local04, #2
234bc     14 64 06 F1 | 	add	objptr, #20
234c0     32 97 02 FB | 	rdlong	arg03, objptr
234c4     4B AD 02 FD | 	qmul	local04, arg03
234c8                 | '   ram.write($7E800, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
234c8     02 96 66 F0 | 	shl	arg03, #2
234cc     F4 03 00 FF 
234d0     00 92 06 F6 | 	mov	arg01, ##518144
234d4     0A 00 00 FF 
234d8     DB 65 06 F1 | 	add	objptr, ##5595
234dc     18 AC 62 FD | 	getqx	local04
234e0     56 95 02 F1 | 	add	arg02, local04
234e4     48 09 B0 FD | 	call	#_psram_spin2_write
234e8     0B 00 00 FF 
234ec     CC 64 86 F1 | 	sub	objptr, ##5836
234f0     57 A9 02 F1 | 	add	local02, local05
234f4     55 A9 0A F2 | 	cmp	local02, local03 wz
234f8     6C FF 9F 5D |  if_ne	jmp	#LR__2900
234fc                 | ' 
234fc                 | ' repeat i from (start*16)+4 to (start*16)+19
234fc     53 A9 02 F6 | 	mov	local02, local01
23500     04 A8 66 F0 | 	shl	local02, #4
23504     04 A8 06 F1 | 	add	local02, #4
23508     53 AF 02 F6 | 	mov	local05, local01
2350c     04 AE 66 F0 | 	shl	local05, #4
23510     13 AE 06 F1 | 	add	local05, #19
23514     53 AD 02 F6 | 	mov	local04, local01
23518     04 AC 66 F0 | 	shl	local04, #4
2351c     04 AC 06 F1 | 	add	local04, #4
23520     56 AF 52 F2 | 	cmps	local05, local04 wc
23524     01 AC 86 F6 | 	negc	local04, #1
23528     56 AB 02 F6 | 	mov	local03, local04
2352c     56 AF 02 F1 | 	add	local05, local04
23530                 | LR__2901
23530                 | '    fastline(0,1023,i,write_background)    
23530     45 64 06 F1 | 	add	objptr, #69
23534     32 99 02 FB | 	rdlong	arg04, objptr
23538     45 64 86 F1 | 	sub	objptr, #69
2353c     00 92 06 F6 | 	mov	arg01, #0
23540     09 94 CE F9 | 	bmask	arg02, #9
23544     54 97 02 F6 | 	mov	arg03, local02
23548     E4 EC BF FD | 	call	#_hg010b_spin2_fastline
2354c     55 A9 02 F1 | 	add	local02, local03
23550     57 A9 0A F2 | 	cmp	local02, local05 wz
23554     D8 FF 9F 5D |  if_ne	jmp	#LR__2901
23558                 | '    
23558                 | ' repeat i from 35 to start
23558     23 A8 06 F6 | 	mov	local02, #35
2355c     23 A6 56 F2 | 	cmps	local01, #35 wc
23560     01 AC 86 F6 | 	negc	local04, #1
23564     53 AF 02 F6 | 	mov	local05, local01
23568     56 AF 02 F1 | 	add	local05, local04
2356c                 | LR__2902
2356c                 | '   ram.read1($7E800, textbuf_ptr+(i*128), 128)
2356c     04 64 06 F1 | 	add	objptr, #4
23570     32 95 02 FB | 	rdlong	arg02, objptr
23574     54 AB 02 F6 | 	mov	local03, local02
23578     07 AA 66 F0 | 	shl	local03, #7
2357c     55 95 02 F1 | 	add	arg02, local03
23580     F4 03 00 FF 
23584     00 92 06 F6 | 	mov	arg01, ##518144
23588     80 96 06 F6 | 	mov	arg03, #128
2358c     0B 00 00 FF 
23590     C8 64 06 F1 | 	add	objptr, ##5832
23594     FC 07 B0 FD | 	call	#_psram_spin2_read1
23598                 | '   ram.write($7E800, textbuf_ptr+(i+1)*128,128)
23598     0B 00 00 FF 
2359c     C8 64 86 F1 | 	sub	objptr, ##5832
235a0     32 95 02 FB | 	rdlong	arg02, objptr
235a4     54 AB 02 F6 | 	mov	local03, local02
235a8     01 AA 06 F1 | 	add	local03, #1
235ac     07 AA 66 F0 | 	shl	local03, #7
235b0     55 95 02 F1 | 	add	arg02, local03
235b4     F4 03 00 FF 
235b8     00 92 06 F6 | 	mov	arg01, ##518144
235bc     80 96 06 F6 | 	mov	arg03, #128
235c0     0B 00 00 FF 
235c4     C8 64 06 F1 | 	add	objptr, ##5832
235c8     64 08 B0 FD | 	call	#_psram_spin2_write
235cc     0B 00 00 FF 
235d0     CC 64 86 F1 | 	sub	objptr, ##5836
235d4     56 A9 02 F1 | 	add	local02, local04
235d8     57 A9 0A F2 | 	cmp	local02, local05 wz
235dc     8C FF 9F 5D |  if_ne	jmp	#LR__2902
235e0                 | ' repeat i from 0 to 127
235e0     00 A8 06 F6 | 	mov	local02, #0
235e4                 | LR__2903
235e4                 | '   ram.fill((textbuf_ptr+start*128+i),32,1,0,1)      
235e4     04 64 06 F1 | 	add	objptr, #4
235e8     32 93 02 FB | 	rdlong	arg01, objptr
235ec     53 AF 02 F6 | 	mov	local05, local01
235f0     07 AE 66 F0 | 	shl	local05, #7
235f4     57 93 02 F1 | 	add	arg01, local05
235f8     54 93 02 F1 | 	add	arg01, local02
235fc     20 94 06 F6 | 	mov	arg02, #32
23600     01 96 06 F6 | 	mov	arg03, #1
23604     00 98 06 F6 | 	mov	arg04, #0
23608     01 9A 06 F6 | 	mov	arg05, #1
2360c     0B 00 00 FF 
23610     C8 64 06 F1 | 	add	objptr, ##5832
23614     B4 08 B0 FD | 	call	#_psram_spin2_fill
23618     0B 00 00 FF 
2361c     CC 64 86 F1 | 	sub	objptr, ##5836
23620     01 A8 06 F1 | 	add	local02, #1
23624     80 A8 56 F2 | 	cmps	local02, #128 wc
23628     B8 FF 9F CD |  if_b	jmp	#LR__2903
2362c     E7 F0 03 F6 | 	mov	ptra, fp
23630     F2 00 A0 FD | 	call	#popregs_
23634                 | _hg010b_spin2_scrolldown_ret
23634     2D 00 64 FD | 	ret
23638                 | 
23638                 | ' 
23638                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
23638                 | ' 
23638                 | ' pub crlf()
23638                 | _hg010b_spin2_crlf
23638                 | ' 
23638                 | ' cursor_x:=leading_spaces*2
23638     01 00 00 FF 
2363c     B6 64 06 F1 | 	add	objptr, ##694
23640     32 97 02 FB | 	rdlong	arg03, objptr
23644     01 96 66 F0 | 	shl	arg03, #1
23648     01 00 00 FF 
2364c     7A 64 86 F1 | 	sub	objptr, ##634
23650     32 97 52 FC | 	wrword	arg03, objptr
23654                 | ' cursor_y+=1
23654     02 64 06 F1 | 	add	objptr, #2
23658     32 97 C2 FA | 	rdbyte	arg03, objptr
2365c     01 96 06 F1 | 	add	arg03, #1
23660     32 97 42 FC | 	wrbyte	arg03, objptr
23664                 | ' if cursor_y>st_lines-1
23664     C3 64 06 F1 | 	add	objptr, #195
23668     32 97 02 FB | 	rdlong	arg03, objptr
2366c     01 96 86 F1 | 	sub	arg03, #1
23670     C3 64 86 F1 | 	sub	objptr, #195
23674     32 95 C2 FA | 	rdbyte	arg02, objptr
23678     3E 64 86 F1 | 	sub	objptr, #62
2367c     4B 95 5A F2 | 	cmps	arg02, arg03 wcz
23680     2C 00 90 ED |  if_be	jmp	#LR__2910
23684                 | '   scrollup2()
23684     00 92 06 F6 | 	mov	arg01, #0
23688     01 00 00 FF 
2368c     58 94 06 F6 | 	mov	arg02, ##600
23690     10 96 06 F6 | 	mov	arg03, #16
23694     64 FB BF FD | 	call	#_hg010b_spin2_scrollup2
23698                 | '   cursor_y:=st_lines-1
23698     01 65 06 F1 | 	add	objptr, #257
2369c     32 97 02 FB | 	rdlong	arg03, objptr
236a0     01 96 86 F1 | 	sub	arg03, #1
236a4     C3 64 86 F1 | 	sub	objptr, #195
236a8     32 97 42 FC | 	wrbyte	arg03, objptr
236ac     3E 64 86 F1 | 	sub	objptr, #62
236b0                 | LR__2910
236b0                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
236b0     3C 64 06 F1 | 	add	objptr, #60
236b4     32 95 E2 FA | 	rdword	arg02, objptr
236b8     02 94 66 F0 | 	shl	arg02, #2
236bc     02 64 06 F1 | 	add	objptr, #2
236c0     32 97 C2 FA | 	rdbyte	arg03, objptr
236c4     3E 64 86 F1 | 	sub	objptr, #62
236c8     04 96 66 F0 | 	shl	arg03, #4
236cc     04 96 06 F1 | 	add	arg03, #4
236d0     11 92 06 F6 | 	mov	arg01, #17
236d4     0C E9 BF FD | 	call	#_hg010b_spin2_setspritepos
236d8                 | _hg010b_spin2_crlf_ret
236d8     2D 00 64 FD | 	ret
236dc                 | 
236dc                 | ' 
236dc                 | ' 
236dc                 | ' '*************************************************************************
236dc                 | ' '                                                                        *
236dc                 | ' '  Conversions                                                           *
236dc                 | ' '                                                                        *
236dc                 | ' '*************************************************************************
236dc                 | ' 
236dc                 | ' ''---------- Convert a integer to dec string, return a pointer
236dc                 | ' 
236dc                 | ' pub inttostr(i):result |q,pos,k,j
236dc                 | _hg010b_spin2_inttostr
236dc     03 CA 05 F6 | 	mov	COUNT_, #3
236e0     E8 00 A0 FD | 	call	#pushregs_
236e4     49 A7 0A F6 | 	mov	local01, arg01 wz
236e8                 | ' 
236e8                 | ' j:=i
236e8                 | ' pos:=10
236e8     0A A8 06 F6 | 	mov	local02, #10
236ec                 | ' k:=0
236ec     00 AA 06 F6 | 	mov	local03, #0
236f0                 | ' 
236f0                 | ' if (j==0)
236f0     18 00 90 5D |  if_ne	jmp	#LR__2920
236f4                 | '   n_string[0]:=48
236f4     4D 64 06 F1 | 	add	objptr, #77
236f8     32 61 48 FC | 	wrbyte	#48, objptr
236fc                 | '   n_string[1]:=0
236fc     01 64 06 F1 | 	add	objptr, #1
23700     32 01 48 FC | 	wrbyte	#0, objptr
23704     4E 64 86 F1 | 	sub	objptr, #78
23708     C4 00 90 FD | 	jmp	#LR__2927
2370c                 | LR__2920
2370c                 | ' 
2370c                 | ' else
2370c                 | '   if (j<0)
2370c     53 A7 52 F6 | 	abs	local01, local01 wc
23710                 | '     j:=0-j
23710                 | '     k:=45
23710     2D AA 06 C6 |  if_b	mov	local03, #45
23714                 | ' 
23714                 | '   n_string[11]:=0
23714     58 64 06 F1 | 	add	objptr, #88
23718     32 01 48 FC | 	wrbyte	#0, objptr
2371c     58 64 86 F1 | 	sub	objptr, #88
23720     D7 24 48 FB | 	callpa	#(@LR__2922-@LR__2921)>>2,fcache_load_ptr_
23724                 | '   repeat while (pos>-1)
23724                 | LR__2921
23724     00 A8 56 F2 | 	cmps	local02, #0 wc
23728     40 00 90 CD |  if_b	jmp	#LR__2923
2372c     53 7B 52 F6 | 	abs	result1, local01 wc
23730     0A 7A 16 FD | 	qdiv	result1, #10
23734                 | '     q:=j//10
23734     19 7A 62 FD | 	getqy	result1
23738     3D 7B 82 F6 | 	negc	result1, result1
2373c     53 A7 52 F6 | 	abs	local01, local01 wc
23740     0A A6 16 FD | 	qdiv	local01, #10
23744                 | '     q:=48+q
23744     30 7A 06 F1 | 	add	result1, #48
23748                 | '     n_string[pos]:=q
23748     54 A7 02 F6 | 	mov	local01, local02
2374c     32 97 02 F6 | 	mov	arg03, objptr
23750     4D 96 06 F1 | 	add	arg03, #77
23754     4B A7 02 F1 | 	add	local01, arg03
23758     53 7B 42 FC | 	wrbyte	result1, local01
2375c                 | '     j:=j/10
2375c                 | '     pos-=1
2375c     01 A8 86 F1 | 	sub	local02, #1
23760     18 A6 62 FD | 	getqx	local01
23764     53 A7 82 F6 | 	negc	local01, local01
23768     B8 FF 9F FD | 	jmp	#LR__2921
2376c                 | LR__2922
2376c                 | LR__2923
2376c                 | '   repeat while n_string[0]==48
2376c                 | LR__2924
2376c     4D 64 06 F1 | 	add	objptr, #77
23770     32 97 C2 FA | 	rdbyte	arg03, objptr
23774     4D 64 86 F1 | 	sub	objptr, #77
23778     30 96 0E F2 | 	cmp	arg03, #48 wz
2377c     20 00 90 5D |  if_ne	jmp	#LR__2925
23780                 | '     bytemove(@n_string,@n_string+1,12)
23780     4D 64 06 F1 | 	add	objptr, #77
23784     32 93 02 F6 | 	mov	arg01, objptr
23788     32 95 02 F6 | 	mov	arg02, objptr
2378c     4D 64 86 F1 | 	sub	objptr, #77
23790     01 94 06 F1 | 	add	arg02, #1
23794     0C 96 06 F6 | 	mov	arg03, #12
23798     1C 14 B0 FD | 	call	#__system____builtin_memmove
2379c     CC FF 9F FD | 	jmp	#LR__2924
237a0                 | LR__2925
237a0                 | ' 
237a0                 | '   if k==45
237a0     2D AA 0E F2 | 	cmp	local03, #45 wz
237a4     28 00 90 5D |  if_ne	jmp	#LR__2926
237a8                 | '      bytemove(@n_string+1,@n_string,12)
237a8     4D 64 06 F1 | 	add	objptr, #77
237ac     32 93 02 F6 | 	mov	arg01, objptr
237b0     01 92 06 F1 | 	add	arg01, #1
237b4     32 95 02 F6 | 	mov	arg02, objptr
237b8     4D 64 86 F1 | 	sub	objptr, #77
237bc     0C 96 06 F6 | 	mov	arg03, #12
237c0     F4 13 B0 FD | 	call	#__system____builtin_memmove
237c4                 | '      n_string[0]:=k
237c4     4D 64 06 F1 | 	add	objptr, #77
237c8     32 AB 42 FC | 	wrbyte	local03, objptr
237cc     4D 64 86 F1 | 	sub	objptr, #77
237d0                 | LR__2926
237d0                 | LR__2927
237d0                 | ' 
237d0                 | ' q:=@n_string
237d0     32 7B 02 F6 | 	mov	result1, objptr
237d4     4D 7A 06 F1 | 	add	result1, #77
237d8                 | ' return q
237d8     E7 F0 03 F6 | 	mov	ptra, fp
237dc     F2 00 A0 FD | 	call	#popregs_
237e0                 | _hg010b_spin2_inttostr_ret
237e0     2D 00 64 FD | 	ret
237e4                 | 
237e4                 | ' 
237e4                 | ' '**********************************************************************************
237e4                 | ' '
237e4                 | ' '        Blitting
237e4                 | ' '
237e4                 | ' '**********************************************************************************
237e4                 | ' 
237e4                 | ' pub blit(f,x1a,y1a,x2a,y2a,s1,t,x1b,y1b,s2) | y
237e4                 | _hg010b_spin2_blit
237e4     18 CA 05 F6 | 	mov	COUNT_, #24
237e8     E8 00 A0 FD | 	call	#pushregs_
237ec     49 A7 02 F6 | 	mov	local01, arg01
237f0     4A A9 02 F6 | 	mov	local02, arg02
237f4     4B AB 02 F6 | 	mov	local03, arg03
237f8     4C AD 02 F6 | 	mov	local04, arg04
237fc     4D AF 02 F6 | 	mov	local05, arg05
23800     4E B1 02 F6 | 	mov	local06, arg06
23804     4F B3 02 F6 | 	mov	local07, arg07
23808     50 B5 02 F6 | 	mov	local08, arg08
2380c     51 B7 02 F6 | 	mov	local09, arg09
23810     52 B9 02 F6 | 	mov	local10, arg10
23814                 | ' 
23814                 | ' if ((f>=$80000) && (t>=$80000)) ' todo: check if the fields overlap and reorder the move
23814     00 04 00 FF 
23818     00 A6 56 F2 | 	cmps	local01, ##524288 wc
2381c     00 04 00 3F 
23820     00 B2 56 32 |  if_ae	cmps	local07, ##524288 wc
23824     98 01 90 CD |  if_b	jmp	#LR__2934
23828     56 A9 5A F2 | 	cmps	local02, local04 wcz
2382c     54 BB 02 16 |  if_a	mov	local11, local02
23830     56 A9 02 16 |  if_a	mov	local02, local04
23834     5D AD 02 16 |  if_a	mov	local04, local11
23838     57 AB 5A F2 | 	cmps	local03, local05 wcz
2383c     55 BB 02 16 |  if_a	mov	local11, local03
23840     57 AB 02 16 |  if_a	mov	local03, local05
23844     58 AB 02 FD | 	qmul	local03, local06
23848                 | '   if x1a>x2a
23848                 | '     x1a,x2a:=x2a,x1a
23848                 | '   if y1a>y2a
23848                 | '     y1a,y2a:=y2a,y1a  
23848     5D AF 02 16 |  if_a	mov	local05, local11
2384c                 | '   if x2a-x1a>1023 
2384c     56 BB 02 F6 | 	mov	local11, local04
23850     54 BB 82 F1 | 	sub	local11, local02
23854     02 00 00 FF 
23858     00 BA 56 F2 | 	cmps	local11, ##1024 wc
2385c                 | '     x2a:=x1a+1023 ' limit the line to 1024
2385c     54 AD 02 36 |  if_ae	mov	local04, local02
23860     01 00 00 3F 
23864     FF AD 06 31 |  if_ae	add	local04, ##1023
23868                 | '   if t+x1a+y1a*s1>f+x1b+y1b*s2
23868     59 BD 02 F6 | 	mov	local12, local07
2386c     54 BD 02 F1 | 	add	local12, local02
23870     18 BA 62 FD | 	getqx	local11
23874     5C B7 02 FD | 	qmul	local09, local10
23878     5D BD 02 F1 | 	add	local12, local11
2387c     53 BF 02 F6 | 	mov	local13, local01
23880     5A BF 02 F1 | 	add	local13, local08
23884     18 BA 62 FD | 	getqx	local11
23888     5D BF 02 F1 | 	add	local13, local11
2388c     5F BD 5A F2 | 	cmps	local12, local13 wcz
23890     98 00 90 ED |  if_be	jmp	#LR__2931
23894                 | '     repeat y from y1a to y2a
23894     55 C1 02 F6 | 	mov	local14, local03
23898     55 AF 52 F2 | 	cmps	local05, local03 wc
2389c     01 C2 86 F6 | 	negc	local15, #1
238a0     57 C5 02 F6 | 	mov	local16, local05
238a4     61 C5 02 F1 | 	add	local16, local15
238a8     0B 00 00 FF 
238ac     CC 64 06 F1 | 	add	objptr, ##5836
238b0                 | LR__2930
238b0     58 C1 02 FD | 	qmul	local14, local06
238b4                 | '   '    writeln(string("I am here"))
238b4                 | '       ram.read1($7E800, f+(y)*s1+x1a, x2a-x1a+1)
238b4     53 95 02 F6 | 	mov	arg02, local01
238b8     56 97 02 F6 | 	mov	arg03, local04
238bc     54 97 82 F1 | 	sub	arg03, local02
238c0     01 96 06 F1 | 	add	arg03, #1
238c4     F4 03 00 FF 
238c8     00 92 06 F6 | 	mov	arg01, ##518144
238cc     18 BE 62 FD | 	getqx	local13
238d0     5F 95 02 F1 | 	add	arg02, local13
238d4     54 95 02 F1 | 	add	arg02, local02
238d8     B8 04 B0 FD | 	call	#_psram_spin2_read1
238dc     5B BF 02 F6 | 	mov	local13, local09
238e0     55 BF 82 F1 | 	sub	local13, local03
238e4     60 BF 02 F1 | 	add	local13, local14
238e8     5C BF 02 FD | 	qmul	local13, local10
238ec                 | '       ram.write($7E800, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)
238ec     59 95 02 F6 | 	mov	arg02, local07
238f0     56 97 02 F6 | 	mov	arg03, local04
238f4     54 97 82 F1 | 	sub	arg03, local02
238f8     01 96 06 F1 | 	add	arg03, #1
238fc     F4 03 00 FF 
23900     00 92 06 F6 | 	mov	arg01, ##518144
23904     18 BE 62 FD | 	getqx	local13
23908     5F 95 02 F1 | 	add	arg02, local13
2390c     5A 95 02 F1 | 	add	arg02, local08
23910     1C 05 B0 FD | 	call	#_psram_spin2_write
23914     61 C1 02 F1 | 	add	local14, local15
23918     62 C1 0A F2 | 	cmp	local14, local16 wz
2391c     90 FF 9F 5D |  if_ne	jmp	#LR__2930
23920     0B 00 00 FF 
23924     CC 64 86 F1 | 	sub	objptr, ##5836
23928     94 00 90 FD | 	jmp	#LR__2933
2392c                 | LR__2931
2392c                 | '   else
2392c                 | '     repeat y from y2a to y1a
2392c     57 C1 02 F6 | 	mov	local14, local05
23930     57 AB 52 F2 | 	cmps	local03, local05 wc
23934     01 C6 86 F6 | 	negc	local17, #1
23938     55 C9 02 F6 | 	mov	local18, local03
2393c     63 C9 02 F1 | 	add	local18, local17
23940     0B 00 00 FF 
23944     CC 64 06 F1 | 	add	objptr, ##5836
23948                 | LR__2932
23948     58 C1 02 FD | 	qmul	local14, local06
2394c                 | '  '     writeln(string("I am there"))
2394c                 | '       ram.read1($7E800, f+(y)*s1+x1a, x2a-x1a+1)
2394c     53 95 02 F6 | 	mov	arg02, local01
23950     56 97 02 F6 | 	mov	arg03, local04
23954     54 97 82 F1 | 	sub	arg03, local02
23958     01 96 06 F1 | 	add	arg03, #1
2395c     F4 03 00 FF 
23960     00 92 06 F6 | 	mov	arg01, ##518144
23964     18 C4 62 FD | 	getqx	local16
23968     62 95 02 F1 | 	add	arg02, local16
2396c     54 95 02 F1 | 	add	arg02, local02
23970     20 04 B0 FD | 	call	#_psram_spin2_read1
23974     5B C5 02 F6 | 	mov	local16, local09
23978     55 C5 82 F1 | 	sub	local16, local03
2397c     60 C5 02 F1 | 	add	local16, local14
23980     5C C5 02 FD | 	qmul	local16, local10
23984                 | '       ram.write($7E800, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)     
23984     59 95 02 F6 | 	mov	arg02, local07
23988     56 97 02 F6 | 	mov	arg03, local04
2398c     54 97 82 F1 | 	sub	arg03, local02
23990     01 96 06 F1 | 	add	arg03, #1
23994     F4 03 00 FF 
23998     00 92 06 F6 | 	mov	arg01, ##518144
2399c     18 C4 62 FD | 	getqx	local16
239a0     62 95 02 F1 | 	add	arg02, local16
239a4     5A 95 02 F1 | 	add	arg02, local08
239a8     84 04 B0 FD | 	call	#_psram_spin2_write
239ac     63 C1 02 F1 | 	add	local14, local17
239b0     64 C1 0A F2 | 	cmp	local14, local18 wz
239b4     90 FF 9F 5D |  if_ne	jmp	#LR__2932
239b8     0B 00 00 FF 
239bc     CC 64 86 F1 | 	sub	objptr, ##5836
239c0                 | LR__2933
239c0                 | LR__2934
239c0                 | '     
239c0                 | ' if ((f>=$80000) && (t<$80000)) 
239c0     00 04 00 FF 
239c4     00 A6 56 F2 | 	cmps	local01, ##524288 wc
239c8     80 00 90 CD |  if_b	jmp	#LR__2936
239cc     00 04 00 FF 
239d0     00 B2 56 F2 | 	cmps	local07, ##524288 wc
239d4     74 00 90 3D |  if_ae	jmp	#LR__2936
239d8                 | '   repeat y from y1a to y2a
239d8     55 C1 02 F6 | 	mov	local14, local03
239dc     55 AF 52 F2 | 	cmps	local05, local03 wc
239e0     01 CA 86 F6 | 	negc	local19, #1
239e4     57 CD 02 F6 | 	mov	local20, local05
239e8     65 CD 02 F1 | 	add	local20, local19
239ec     0B 00 00 FF 
239f0     CC 64 06 F1 | 	add	objptr, ##5836
239f4                 | LR__2935
239f4     5B C9 02 F6 | 	mov	local18, local09
239f8     55 C9 82 F1 | 	sub	local18, local03
239fc     60 C9 02 F1 | 	add	local18, local14
23a00     5C C9 02 FD | 	qmul	local18, local10
23a04                 | '     ram.read1(t+(y1b-y1a+y)*s2+x1b,f+(y)*s1+x1a,x2a-x1a+1)
23a04     59 93 02 F6 | 	mov	arg01, local07
23a08     18 C8 62 FD | 	getqx	local18
23a0c     58 C1 02 FD | 	qmul	local14, local06
23a10     64 93 02 F1 | 	add	arg01, local18
23a14     5A 93 02 F1 | 	add	arg01, local08
23a18     53 95 02 F6 | 	mov	arg02, local01
23a1c     56 97 02 F6 | 	mov	arg03, local04
23a20     54 97 82 F1 | 	sub	arg03, local02
23a24     01 96 06 F1 | 	add	arg03, #1
23a28     18 C8 62 FD | 	getqx	local18
23a2c     64 95 02 F1 | 	add	arg02, local18
23a30     54 95 02 F1 | 	add	arg02, local02
23a34     5C 03 B0 FD | 	call	#_psram_spin2_read1
23a38     65 C1 02 F1 | 	add	local14, local19
23a3c     66 C1 0A F2 | 	cmp	local14, local20 wz
23a40     B0 FF 9F 5D |  if_ne	jmp	#LR__2935
23a44     0B 00 00 FF 
23a48     CC 64 86 F1 | 	sub	objptr, ##5836
23a4c                 | LR__2936
23a4c                 | '     
23a4c                 | ' if ((f<$80000) && (t>=$80000)) 
23a4c     00 04 00 FF 
23a50     00 A6 56 F2 | 	cmps	local01, ##524288 wc
23a54     84 00 90 3D |  if_ae	jmp	#LR__2938
23a58     00 04 00 FF 
23a5c     00 B2 56 F2 | 	cmps	local07, ##524288 wc
23a60     78 00 90 CD |  if_b	jmp	#LR__2938
23a64                 | '   t:=t & $FFFFFFF
23a64     7C B2 06 F4 | 	bitl	local07, #124
23a68                 | '   repeat y from y1a to y2a
23a68     55 C1 02 F6 | 	mov	local14, local03
23a6c     55 AF 52 F2 | 	cmps	local05, local03 wc
23a70     01 CE 86 F6 | 	negc	local21, #1
23a74     57 D1 02 F6 | 	mov	local22, local05
23a78     67 D1 02 F1 | 	add	local22, local21
23a7c     0B 00 00 FF 
23a80     CC 64 06 F1 | 	add	objptr, ##5836
23a84                 | LR__2937
23a84     58 C1 02 FD | 	qmul	local14, local06
23a88                 | '     ram.write(f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
23a88     53 93 02 F6 | 	mov	arg01, local01
23a8c     5B CD 02 F6 | 	mov	local20, local09
23a90     55 CD 82 F1 | 	sub	local20, local03
23a94     60 CD 02 F1 | 	add	local20, local14
23a98     18 CA 62 FD | 	getqx	local19
23a9c     5C CD 02 FD | 	qmul	local20, local10
23aa0     65 93 02 F1 | 	add	arg01, local19
23aa4     54 93 02 F1 | 	add	arg01, local02
23aa8     59 95 02 F6 | 	mov	arg02, local07
23aac     56 97 02 F6 | 	mov	arg03, local04
23ab0     54 97 82 F1 | 	sub	arg03, local02
23ab4     01 96 06 F1 | 	add	arg03, #1
23ab8     18 CC 62 FD | 	getqx	local20
23abc     66 95 02 F1 | 	add	arg02, local20
23ac0     5A 95 02 F1 | 	add	arg02, local08
23ac4     68 03 B0 FD | 	call	#_psram_spin2_write
23ac8     67 C1 02 F1 | 	add	local14, local21
23acc     68 C1 0A F2 | 	cmp	local14, local22 wz
23ad0     B0 FF 9F 5D |  if_ne	jmp	#LR__2937
23ad4     0B 00 00 FF 
23ad8     CC 64 86 F1 | 	sub	objptr, ##5836
23adc                 | LR__2938
23adc                 | '     
23adc                 | ' if ((f<$80000) && (t<$80000)) 
23adc     00 04 00 FF 
23ae0     00 A6 56 F2 | 	cmps	local01, ##524288 wc
23ae4     00 04 00 CF 
23ae8     00 B2 56 C2 |  if_b	cmps	local07, ##524288 wc
23aec     64 00 90 3D |  if_ae	jmp	#LR__2940
23af0                 | '   repeat y from y1a to y2a
23af0     55 C1 02 F6 | 	mov	local14, local03
23af4     55 AF 52 F2 | 	cmps	local05, local03 wc
23af8     01 D2 86 F6 | 	negc	local23, #1
23afc     57 D5 02 F6 | 	mov	local24, local05
23b00     69 D5 02 F1 | 	add	local24, local23
23b04                 | LR__2939
23b04     58 C1 02 FD | 	qmul	local14, local06
23b08                 | '     bytemove (f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
23b08     53 93 02 F6 | 	mov	arg01, local01
23b0c     5B D1 02 F6 | 	mov	local22, local09
23b10     55 D1 82 F1 | 	sub	local22, local03
23b14     60 D1 02 F1 | 	add	local22, local14
23b18     18 CE 62 FD | 	getqx	local21
23b1c     5C D1 02 FD | 	qmul	local22, local10
23b20     67 93 02 F1 | 	add	arg01, local21
23b24     54 93 02 F1 | 	add	arg01, local02
23b28     59 95 02 F6 | 	mov	arg02, local07
23b2c     56 97 02 F6 | 	mov	arg03, local04
23b30     54 97 82 F1 | 	sub	arg03, local02
23b34     01 96 06 F1 | 	add	arg03, #1
23b38     18 D0 62 FD | 	getqx	local22
23b3c     68 95 02 F1 | 	add	arg02, local22
23b40     5A 95 02 F1 | 	add	arg02, local08
23b44     70 10 B0 FD | 	call	#__system____builtin_memmove
23b48     69 C1 02 F1 | 	add	local14, local23
23b4c     6A C1 0A F2 | 	cmp	local14, local24 wz
23b50     B0 FF 9F 5D |  if_ne	jmp	#LR__2939
23b54                 | LR__2940
23b54     E7 F0 03 F6 | 	mov	ptra, fp
23b58     F2 00 A0 FD | 	call	#popregs_
23b5c                 | _hg010b_spin2_blit_ret
23b5c     2D 00 64 FD | 	ret
23b60                 | 
23b60                 | ' 
23b60                 | ' '..............................................................................
23b60                 | ' 
23b60                 | ' {{
23b60                 | ' }}
23b60                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
23b60                 | _psram_spin2_startx
23b60     04 CA 05 F6 | 	mov	COUNT_, #4
23b64     E8 00 A0 FD | 	call	#pushregs_
23b68     49 A7 02 F6 | 	mov	local01, arg01
23b6c     4B A9 02 F6 | 	mov	local02, arg03
23b70     4C AB 02 F6 | 	mov	local03, arg04
23b74                 | '     stop() ' restart driver if required
23b74     5C 01 B0 FD | 	call	#_psram_spin2_stop
23b78     00 A6 0E F2 | 	cmp	local01, #0 wz
23b7c     14 A6 06 AB |  if_e	rdlong	local01, #20
23b80     53 95 52 F6 | 	abs	arg02, local01 wc
23b84     A1 07 00 FF 
23b88     40 94 16 FD | 	qdiv	arg02, ##1000000
23b8c                 | ' 
23b8c                 | '     ' use current frequency if none specified
23b8c                 | ' 
23b8c                 | '     if freq == 0 
23b8c                 | '         freq := clkfreq 
23b8c                 | ' 
23b8c                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
23b8c                 | ' 
23b8c                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
23b8c                 | '     if burst < 0
23b8c                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
23b8c     18 94 62 FD | 	getqx	arg02
23b90     4A 99 82 F6 | 	negc	arg04, arg02
23b94     03 98 66 F0 | 	shl	arg04, #3
23b98     84 98 86 F1 | 	sub	arg04, #132
23b9c     04 98 46 F0 | 	shr	arg04, #4
23ba0     04 98 66 F0 | 	shl	arg04, #4
23ba4     00 98 56 F2 | 	cmps	arg04, #0 wc
23ba8     0E 7A 66 C6 |  if_b	neg	result1, #14
23bac     18 01 90 CD |  if_b	jmp	#LR__2954
23bb0                 | ' 
23bb0                 | '     ' compute the input delay
23bb0                 | ' 
23bb0                 | '     if delay <= 0
23bb0     01 A8 56 F2 | 	cmps	local02, #1 wc
23bb4     10 00 90 3D |  if_ae	jmp	#LR__2950
23bb8                 | '         delay := lookupDelay(freq)
23bb8     53 93 02 F6 | 	mov	arg01, local01
23bbc     C0 04 B0 FD | 	call	#_psram_spin2_lookupDelay
23bc0     3D A9 02 F6 | 	mov	local02, result1
23bc4     04 00 90 FD | 	jmp	#LR__2951
23bc8                 | LR__2950
23bc8                 | '     else
23bc8                 | '         delay <#= $f ' limit to 15
23bc8     0F A8 66 F3 | 	fles	local02, #15
23bcc                 | LR__2951
23bcc                 | ' 
23bcc                 | '     ' create our lock
23bcc                 | ' 
23bcc                 | '     driverlock := LOCKNEW()  
23bcc     00 7A 06 F6 | 	mov	result1, #0
23bd0     04 7A 62 FD | 	locknew	result1
23bd4     04 75 06 F1 | 	add	ptr__psram_spin2_dat__, #260
23bd8     3A 7B 62 FC | 	wrlong	result1, ptr__psram_spin2_dat__
23bdc                 | '     if driverlock == -1
23bdc     04 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #260
23be0     FF FF 7F FF 
23be4     FF 7B 0E F2 | 	cmp	result1, ##-1 wz
23be8                 | '         return ERR_NO_LOCK
23be8     1A 7A 66 A6 |  if_e	neg	result1, #26
23bec     D8 00 90 AD |  if_e	jmp	#LR__2954
23bf0                 | ' 
23bf0                 | '     ' patch in the proper data and HUB addresses to the startup structure
23bf0                 | ' 
23bf0                 | '     long[@startupData][0]:=clkfreq
23bf0     14 A6 06 FB | 	rdlong	local01, #20
23bf4     28 75 06 F1 | 	add	ptr__psram_spin2_dat__, #296
23bf8     3A A7 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
23bfc                 | ' '    long[@startupData][1]:=$1000_0000
23bfc                 | '     long[@startupData][5]:=@deviceData
23bfc     3A A7 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
23c00     20 A6 06 F1 | 	add	local01, #32
23c04     3A 95 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
23c08     14 94 06 F1 | 	add	arg02, #20
23c0c     4A A7 62 FC | 	wrlong	local01, arg02
23c10                 | '     long[@startupData][6]:=@qosData
23c10     3A A7 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
23c14     A0 A6 06 F1 | 	add	local01, #160
23c18     3A 95 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
23c1c     18 94 06 F1 | 	add	arg02, #24
23c20     4A A7 62 FC | 	wrlong	local01, arg02
23c24                 | '     long[@startupData][7]:=$7FF00
23c24     3A A7 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
23c28     1C A6 06 F1 | 	add	local01, #28
23c2c     FF 03 80 FF 
23c30     53 01 6A FC | 	wrlong	##524032, local01
23c34                 | ' 
23c34                 | '     ' setup some default bank and QoS parameter values
23c34                 | ' 
23c34                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
23c34     20 74 06 F1 | 	add	ptr__psram_spin2_dat__, #32
23c38     3A 93 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
23c3c     48 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #328
23c40     10 98 66 F0 | 	shl	arg04, #16
23c44     0C A8 66 F0 | 	shl	local02, #12
23c48     54 99 42 F5 | 	or	arg04, local02
23c4c     18 98 46 F5 | 	or	arg04, #24
23c50     4C 95 02 F6 | 	mov	arg02, arg04
23c54     02 96 06 F6 | 	mov	arg03, #2
23c58     E0 00 A0 FD | 	call	#\builtin_longfill_
23c5c                 | '     longfill(@qosData, $FFFF0000, 8)
23c5c     3A 93 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
23c60     C8 93 06 F1 | 	add	arg01, #456
23c64     07 96 06 F6 | 	mov	arg03, #7
23c68     28 96 62 FD | 	setq	arg03
23c6c     80 FF FF FF 
23c70     49 01 68 FC | 	wrlong	##-65536, arg01
23c74                 | ' 
23c74                 | '     ' get the address of the PSRAM memory driver so we can start it
23c74                 | ' 
23c74                 | '     driverAddr:= driver.getDriverAddr()
23c74                 | '     return @driver_start
23c74     39 95 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
23c78     20 94 06 F1 | 	add	arg02, #32
23c7c                 | ' 
23c7c                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
23c7c                 | ' 
23c7c                 | '     if desiredcog < 0
23c7c     00 AA 56 F2 | 	cmps	local03, #0 wc
23c80                 | '         desiredcog := NEWCOG
23c80     10 AA 06 C6 |  if_b	mov	local03, #16
23c84                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
23c84     3A 97 02 F6 | 	mov	arg03, ptr__psram_spin2_dat__
23c88     28 97 06 F1 | 	add	arg03, #296
23c8c     55 AD 02 F6 | 	mov	local04, local03
23c90     28 96 62 FD | 	setq	arg03
23c94     4A AD F2 FC | 	coginit	local04, arg02 wc
23c98     01 AC 66 C6 |  if_b	neg	local04, #1
23c9c     00 75 06 F1 | 	add	ptr__psram_spin2_dat__, #256
23ca0     3A AD 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
23ca4     00 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
23ca8     D7 08 48 FB | 	callpa	#(@LR__2953-@LR__2952)>>2,fcache_load_ptr_
23cac                 | '     repeat until long[@startupData] == 0 
23cac                 | LR__2952
23cac     3A AD 02 F6 | 	mov	local04, ptr__psram_spin2_dat__
23cb0     28 AD 06 F1 | 	add	local04, #296
23cb4     56 AD 0A FB | 	rdlong	local04, local04 wz
23cb8     F0 FF 9F 5D |  if_ne	jmp	#LR__2952
23cbc                 | LR__2953
23cbc                 | ' 
23cbc                 | '     return drivercog
23cbc     00 75 06 F1 | 	add	ptr__psram_spin2_dat__, #256
23cc0     3A 7B 02 FB | 	rdlong	result1, ptr__psram_spin2_dat__
23cc4     00 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
23cc8                 | LR__2954
23cc8     E7 F0 03 F6 | 	mov	ptra, fp
23ccc     F2 00 A0 FD | 	call	#popregs_
23cd0                 | _psram_spin2_startx_ret
23cd0     2D 00 64 FD | 	ret
23cd4                 | 
23cd4                 | ' 
23cd4                 | ' '..............................................................................
23cd4                 | ' 
23cd4                 | ' {{
23cd4                 | ' }}
23cd4                 | ' PUB stop() : i
23cd4                 | _psram_spin2_stop
23cd4     00 80 06 F6 | 	mov	_var01, #0
23cd8                 | '     if drivercog <> -1
23cd8     00 75 06 F1 | 	add	ptr__psram_spin2_dat__, #256
23cdc     3A 93 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
23ce0     00 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
23ce4     FF FF 7F FF 
23ce8     FF 93 0E F2 | 	cmp	arg01, ##-1 wz
23cec     70 00 90 AD |  if_e	jmp	#LR__2963
23cf0                 | '         cogstop(drivercog) ' a rather brutal stop
23cf0     00 75 06 F1 | 	add	ptr__psram_spin2_dat__, #256
23cf4     3A 93 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
23cf8     00 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
23cfc     03 92 62 FD | 	cogstop	arg01
23d00     D7 26 48 FB | 	callpa	#(@LR__2962-@LR__2960)>>2,fcache_load_ptr_
23d04                 | '         repeat i from 0 to 7
23d04                 | LR__2960
23d04                 | '             if long[$7FF00][i*3] < 0
23d04     40 7B 02 F6 | 	mov	result1, _var01
23d08     01 7A 66 F0 | 	shl	result1, #1
23d0c     40 7B 02 F1 | 	add	result1, _var01
23d10     02 7A 66 F0 | 	shl	result1, #2
23d14     FF 03 00 FF 
23d18     00 7B 06 F1 | 	add	result1, ##524032
23d1c     3D 7B 02 FB | 	rdlong	result1, result1
23d20     00 7A 56 F2 | 	cmps	result1, #0 wc
23d24     1C 00 90 3D |  if_ae	jmp	#LR__2961
23d28                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
23d28     40 7B 02 F6 | 	mov	result1, _var01
23d2c     01 7A 66 F0 | 	shl	result1, #1
23d30     40 7B 02 F1 | 	add	result1, _var01
23d34     02 7A 66 F0 | 	shl	result1, #2
23d38     FF 03 00 FF 
23d3c     00 7B 06 F1 | 	add	result1, ##524032
23d40     3D 21 68 FC | 	wrlong	#16, result1
23d44                 | LR__2961
23d44     01 80 06 F1 | 	add	_var01, #1
23d48     08 80 56 F2 | 	cmps	_var01, #8 wc
23d4c     B4 FF 9F CD |  if_b	jmp	#LR__2960
23d50                 | LR__2962
23d50                 | '         drivercog := -1
23d50     00 75 06 F1 | 	add	ptr__psram_spin2_dat__, #256
23d54     FF FF FF FF 
23d58     3A FF 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
23d5c     00 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
23d60                 | LR__2963
23d60                 | '     if driverlock <> -1
23d60     04 75 06 F1 | 	add	ptr__psram_spin2_dat__, #260
23d64     3A 83 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
23d68     04 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #260
23d6c     FF FF 7F FF 
23d70     FF 83 0E F2 | 	cmp	_var02, ##-1 wz
23d74                 | '         LOCKRET(driverlock)
23d74     04 75 06 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
23d78     3A 93 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
23d7c     05 92 62 5D |  if_ne	lockret	arg01
23d80                 | '         driverlock := -1
23d80     FF FF FF 5F 
23d84     3A FF 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
23d88     04 75 86 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
23d8c     40 7B 02 F6 | 	mov	result1, _var01
23d90                 | _psram_spin2_stop_ret
23d90     2D 00 64 FD | 	ret
23d94                 | 
23d94                 | ' 
23d94                 | ' '..............................................................................
23d94                 | ' 
23d94                 | ' {{
23d94                 | ' }}
23d94                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
23d94                 | _psram_spin2_read1
23d94                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
23d94                 | '     if drivercog == -1 ' driver must be running
23d94     00 75 06 F1 | 	add	ptr__psram_spin2_dat__, #256
23d98     3A 81 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
23d9c     00 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
23da0     FF FF 7F FF 
23da4     FF 81 0E F2 | 	cmp	_var01, ##-1 wz
23da8                 | '         return ERR_INACTIVE
23da8     0F 7A 66 A6 |  if_e	neg	result1, #15
23dac     7C 00 90 AD |  if_e	jmp	#LR__2971
23db0                 | '     if count == 0 ' don't even bother reading
23db0     00 96 0E F2 | 	cmp	arg03, #0 wz
23db4                 | '         return 0
23db4     00 7A 06 A6 |  if_e	mov	result1, #0
23db8     70 00 90 AD |  if_e	jmp	#LR__2971
23dbc                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
23dbc     00 7A 06 F6 | 	mov	result1, #0
23dc0     01 7A 62 FD | 	cogid	result1
23dc4     3D 81 02 F6 | 	mov	_var01, result1
23dc8     01 80 66 F0 | 	shl	_var01, #1
23dcc     3D 81 02 F1 | 	add	_var01, result1
23dd0     02 80 66 F0 | 	shl	_var01, #2
23dd4     FF 03 00 FF 
23dd8     00 83 06 F6 | 	mov	_var02, ##524032
23ddc     40 83 02 F1 | 	add	_var02, _var01
23de0                 | '     if long[mailbox] < 0
23de0     41 81 02 FB | 	rdlong	_var01, _var02
23de4     00 80 56 F2 | 	cmps	_var01, #0 wc
23de8                 | '         return ERR_MAILBOX_BUSY
23de8     1C 7A 66 C6 |  if_b	neg	result1, #28
23dec     3C 00 90 CD |  if_b	jmp	#LR__2971
23df0                 | '     long[mailbox][2] := count
23df0     08 82 06 F1 | 	add	_var02, #8
23df4     41 97 62 FC | 	wrlong	arg03, _var02
23df8                 | '     long[mailbox][1] := dstHubAddr
23df8     04 82 86 F1 | 	sub	_var02, #4
23dfc     41 93 62 FC | 	wrlong	arg01, _var02
23e00     04 82 86 F1 | 	sub	_var02, #4
23e04                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
23e04     4A 85 02 F6 | 	mov	_var03, arg02
23e08     D9 84 06 F4 | 	bitl	_var03, #217
23e0c     00 00 58 FF 
23e10     00 80 06 F6 | 	mov	_var01, ##-1342177280
23e14     42 81 02 F1 | 	add	_var01, _var03
23e18     41 81 62 FC | 	wrlong	_var01, _var02
23e1c                 | '     repeat
23e1c                 | LR__2970
23e1c                 | '         result := long[mailbox]    
23e1c     41 85 02 FB | 	rdlong	_var03, _var02
23e20     00 84 56 F2 | 	cmps	_var03, #0 wc
23e24     F4 FF 9F CD |  if_b	jmp	#LR__2970
23e28                 | '     while result < 0   
23e28                 | '     return -result                       'return success or error
23e28     42 7B 62 F6 | 	neg	result1, _var03
23e2c                 | LR__2971
23e2c                 | _psram_spin2_read1_ret
23e2c     2D 00 64 FD | 	ret
23e30                 | 
23e30                 | ' 
23e30                 | ' '..............................................................................
23e30                 | ' 
23e30                 | ' {{
23e30                 | ' }}
23e30                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
23e30                 | _psram_spin2_write
23e30                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
23e30                 | '     if drivercog == -1 ' driver must be running
23e30     00 75 06 F1 | 	add	ptr__psram_spin2_dat__, #256
23e34     3A 81 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
23e38     00 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
23e3c     FF FF 7F FF 
23e40     FF 81 0E F2 | 	cmp	_var01, ##-1 wz
23e44                 | '         return ERR_INACTIVE
23e44     0F 7A 66 A6 |  if_e	neg	result1, #15
23e48     7C 00 90 AD |  if_e	jmp	#LR__2981
23e4c                 | '     if count == 0 ' don't even bother writing
23e4c     00 96 0E F2 | 	cmp	arg03, #0 wz
23e50                 | '         return 0
23e50     00 7A 06 A6 |  if_e	mov	result1, #0
23e54     70 00 90 AD |  if_e	jmp	#LR__2981
23e58                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
23e58     00 7A 06 F6 | 	mov	result1, #0
23e5c     01 7A 62 FD | 	cogid	result1
23e60     3D 81 02 F6 | 	mov	_var01, result1
23e64     01 80 66 F0 | 	shl	_var01, #1
23e68     3D 81 02 F1 | 	add	_var01, result1
23e6c     02 80 66 F0 | 	shl	_var01, #2
23e70     FF 03 00 FF 
23e74     00 83 06 F6 | 	mov	_var02, ##524032
23e78     40 83 02 F1 | 	add	_var02, _var01
23e7c                 | '     if long[mailbox] < 0
23e7c     41 81 02 FB | 	rdlong	_var01, _var02
23e80     00 80 56 F2 | 	cmps	_var01, #0 wc
23e84                 | '         return ERR_MAILBOX_BUSY
23e84     1C 7A 66 C6 |  if_b	neg	result1, #28
23e88     3C 00 90 CD |  if_b	jmp	#LR__2981
23e8c                 | '     long[mailbox][2] := count
23e8c     08 82 06 F1 | 	add	_var02, #8
23e90     41 97 62 FC | 	wrlong	arg03, _var02
23e94                 | '     long[mailbox][1] := srcHubAddr
23e94     04 82 86 F1 | 	sub	_var02, #4
23e98     41 93 62 FC | 	wrlong	arg01, _var02
23e9c     04 82 86 F1 | 	sub	_var02, #4
23ea0                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
23ea0     4A 85 02 F6 | 	mov	_var03, arg02
23ea4     D9 84 06 F4 | 	bitl	_var03, #217
23ea8     00 00 78 FF 
23eac     00 80 06 F6 | 	mov	_var01, ##-268435456
23eb0     42 81 02 F1 | 	add	_var01, _var03
23eb4     41 81 62 FC | 	wrlong	_var01, _var02
23eb8                 | '     repeat
23eb8                 | LR__2980
23eb8                 | '         result := long[mailbox]    
23eb8     41 85 02 FB | 	rdlong	_var03, _var02
23ebc     00 84 56 F2 | 	cmps	_var03, #0 wc
23ec0     F4 FF 9F CD |  if_b	jmp	#LR__2980
23ec4                 | '     while result < 0   
23ec4                 | '     return -result                       'return success or error
23ec4     42 7B 62 F6 | 	neg	result1, _var03
23ec8                 | LR__2981
23ec8                 | _psram_spin2_write_ret
23ec8     2D 00 64 FD | 	ret
23ecc                 | 
23ecc                 | ' 
23ecc                 | ' ' generalized fill
23ecc                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
23ecc                 | _psram_spin2_fill
23ecc     49 81 02 F6 | 	mov	_var01, arg01
23ed0     4A 83 02 F6 | 	mov	_var02, arg02
23ed4     4B 85 02 F6 | 	mov	_var03, arg03
23ed8     4D 87 02 F6 | 	mov	_var04, arg05
23edc                 | '     case datasize 
23edc     01 86 86 F1 | 	sub	_var04, #1
23ee0     04 86 26 F3 | 	fle	_var04, #4
23ee4     30 86 62 FD | 	jmprel	_var04
23ee8                 | LR__2990
23ee8     10 00 90 FD | 	jmp	#LR__2991
23eec     18 00 90 FD | 	jmp	#LR__2992
23ef0     2C 00 90 FD | 	jmp	#LR__2994
23ef4     1C 00 90 FD | 	jmp	#LR__2993
23ef8     24 00 90 FD | 	jmp	#LR__2994
23efc                 | LR__2991
23efc                 | '         1: req := driver.R_WRITEBYTE
23efc     00 00 60 FF 
23f00     00 88 06 F6 | 	mov	_var05, ##-1073741824
23f04     20 00 90 FD | 	jmp	#LR__2995
23f08                 | LR__2992
23f08                 | '         2: req := driver.R_WRITEWORD
23f08     00 00 68 FF 
23f0c     00 88 06 F6 | 	mov	_var05, ##-805306368
23f10     14 00 90 FD | 	jmp	#LR__2995
23f14                 | LR__2993
23f14                 | '         4: req := driver.R_WRITELONG
23f14     00 00 70 FF 
23f18     00 88 06 F6 | 	mov	_var05, ##-536870912
23f1c     08 00 90 FD | 	jmp	#LR__2995
23f20                 | LR__2994
23f20                 | '         other : return ERR_INVALID
23f20     06 7A 66 F6 | 	neg	result1, #6
23f24     94 00 90 FD | 	jmp	#LR__2997
23f28                 | LR__2995
23f28                 | '     if count == 0   ' nothing to do
23f28     00 84 0E F2 | 	cmp	_var03, #0 wz
23f2c                 | '         return 0
23f2c     00 7A 06 A6 |  if_e	mov	result1, #0
23f30     88 00 90 AD |  if_e	jmp	#LR__2997
23f34                 | '     if drivercog == -1
23f34     00 75 06 F1 | 	add	ptr__psram_spin2_dat__, #256
23f38     3A 87 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
23f3c     00 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
23f40     FF FF 7F FF 
23f44     FF 87 0E F2 | 	cmp	_var04, ##-1 wz
23f48                 | '         return ERR_INACTIVE
23f48     0F 7A 66 A6 |  if_e	neg	result1, #15
23f4c     6C 00 90 AD |  if_e	jmp	#LR__2997
23f50                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
23f50     00 7A 06 F6 | 	mov	result1, #0
23f54     01 7A 62 FD | 	cogid	result1
23f58     3D 87 02 F6 | 	mov	_var04, result1
23f5c     01 86 66 F0 | 	shl	_var04, #1
23f60     3D 87 02 F1 | 	add	_var04, result1
23f64     02 86 66 F0 | 	shl	_var04, #2
23f68     FF 03 00 FF 
23f6c     00 8B 06 F6 | 	mov	_var06, ##524032
23f70     43 8B 02 F1 | 	add	_var06, _var04
23f74                 | '     if long[mailbox] < 0
23f74     45 87 02 FB | 	rdlong	_var04, _var06
23f78     00 86 56 F2 | 	cmps	_var04, #0 wc
23f7c                 | '         return ERR_MAILBOX_BUSY
23f7c     1C 7A 66 C6 |  if_b	neg	result1, #28
23f80     38 00 90 CD |  if_b	jmp	#LR__2997
23f84                 | '     long[mailbox][2] := count
23f84     08 8A 06 F1 | 	add	_var06, #8
23f88     45 85 62 FC | 	wrlong	_var03, _var06
23f8c                 | '     long[mailbox][1] := pattern
23f8c     04 8A 86 F1 | 	sub	_var06, #4
23f90     45 83 62 FC | 	wrlong	_var02, _var06
23f94     04 8A 86 F1 | 	sub	_var06, #4
23f98                 | '     long[mailbox] := req + (addr & $1ffffff)
23f98     44 8D 02 F6 | 	mov	_var07, _var05
23f9c     40 8F 02 F6 | 	mov	_var08, _var01
23fa0     D9 8E 06 F4 | 	bitl	_var08, #217
23fa4     47 8D 02 F1 | 	add	_var07, _var08
23fa8     45 8D 62 FC | 	wrlong	_var07, _var06
23fac                 | '     repeat
23fac                 | LR__2996
23fac                 | '         r := long[mailbox]
23fac     45 8F 02 FB | 	rdlong	_var08, _var06
23fb0     00 8E 56 F2 | 	cmps	_var08, #0 wc
23fb4     F4 FF 9F CD |  if_b	jmp	#LR__2996
23fb8                 | '     while r < 0
23fb8                 | '     return -r                  ' return 0 for success or negated error code
23fb8     47 7B 62 F6 | 	neg	result1, _var08
23fbc                 | LR__2997
23fbc                 | _psram_spin2_fill_ret
23fbc     2D 00 64 FD | 	ret
23fc0                 | 
23fc0                 | ' 
23fc0                 | ' '..............................................................................
23fc0                 | ' 
23fc0                 | ' {{
23fc0                 | ' }}
23fc0                 | ' PUB setQos(cog, qos) : result | mailbox
23fc0                 | _psram_spin2_setQos
23fc0     49 81 02 F6 | 	mov	_var01, arg01
23fc4                 | '     if drivercog == -1 ' driver must be running
23fc4     00 75 06 F1 | 	add	ptr__psram_spin2_dat__, #256
23fc8     3A 83 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
23fcc     00 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
23fd0     FF FF 7F FF 
23fd4     FF 83 0E F2 | 	cmp	_var02, ##-1 wz
23fd8                 | '         return ERR_INACTIVE
23fd8     0F 7A 66 A6 |  if_e	neg	result1, #15
23fdc     9C 00 90 AD |  if_e	jmp	#LR__3004
23fe0                 | '     if cog < 0 or cog > 7 ' enforce cog id range
23fe0     00 80 56 F2 | 	cmps	_var01, #0 wc
23fe4     08 00 90 CD |  if_b	jmp	#LR__3000
23fe8     08 80 56 F2 | 	cmps	_var01, #8 wc
23fec     08 00 90 CD |  if_b	jmp	#LR__3001
23ff0                 | LR__3000
23ff0                 | '         return ERR_INVALID
23ff0     06 7A 66 F6 | 	neg	result1, #6
23ff4     84 00 90 FD | 	jmp	#LR__3004
23ff8                 | LR__3001
23ff8                 | '     long[@qosData][cog] := qos & !$1ff
23ff8     FF 95 26 F5 | 	andn	arg02, #511
23ffc     C8 75 06 F1 | 	add	ptr__psram_spin2_dat__, #456
24000     02 80 66 F0 | 	shl	_var01, #2
24004     3A 81 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
24008     40 95 62 FC | 	wrlong	arg02, _var01
2400c                 | '     mailbox := $7FF00 + drivercog*12
2400c     C8 74 86 F1 | 	sub	ptr__psram_spin2_dat__, #200
24010     3A 85 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
24014     42 87 02 F6 | 	mov	_var04, _var03
24018     01 86 66 F0 | 	shl	_var04, #1
2401c     42 87 02 F1 | 	add	_var04, _var03
24020     02 86 66 F0 | 	shl	_var04, #2
24024     FF 03 00 FF 
24028     00 89 06 F6 | 	mov	_var05, ##524032
2402c     43 89 02 F1 | 	add	_var05, _var04
24030                 | '     repeat until LOCKTRY(driverlock)
24030     04 74 06 F1 | 	add	ptr__psram_spin2_dat__, #4
24034                 | LR__3002
24034     3A 93 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
24038     06 92 72 FD | 	locktry	arg01 wc
2403c     F4 FF 9F 3D |  if_ae	jmp	#LR__3002
24040     04 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #260
24044                 | '     long[mailbox] := driver.R_CONFIG + cogid()
24044     00 86 06 F6 | 	mov	_var04, #0
24048     01 86 62 FD | 	cogid	_var04
2404c     00 00 78 FF 
24050     00 82 06 F6 | 	mov	_var02, ##-268435456
24054     43 83 02 F1 | 	add	_var02, _var04
24058     44 83 62 FC | 	wrlong	_var02, _var05
2405c                 | '     repeat while long[mailbox] < 0
2405c                 | LR__3003
2405c     44 83 02 FB | 	rdlong	_var02, _var05
24060     00 82 56 F2 | 	cmps	_var02, #0 wc
24064     F4 FF 9F CD |  if_b	jmp	#LR__3003
24068                 | '     LOCKREL(driverlock)
24068     04 75 06 F1 | 	add	ptr__psram_spin2_dat__, #260
2406c     3A 93 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
24070     04 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #260
24074     07 92 72 FD | 	lockrel	arg01 wc
24078     00 7A 06 F6 | 	mov	result1, #0
2407c                 | LR__3004
2407c                 | _psram_spin2_setQos_ret
2407c     2D 00 64 FD | 	ret
24080                 | 
24080                 | ' 
24080                 | ' '..............................................................................
24080                 | ' 
24080                 | ' {{
24080                 | ' }}
24080                 | ' PRI lookupDelay(freq) : delay | profile
24080                 | _psram_spin2_lookupDelay
24080                 | '     profile := @delayTable
24080     3A 81 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
24084     08 81 06 F1 | 	add	_var01, #264
24088                 | '     delay := long[profile][0]
24088     40 83 02 FB | 	rdlong	_var02, _var01
2408c     D7 16 48 FB | 	callpa	#(@LR__3011-@LR__3010)>>2,fcache_load_ptr_
24090                 | '     repeat while long[profile][1] 
24090                 | LR__3010
24090     04 80 06 F1 | 	add	_var01, #4
24094     40 7B 0A FB | 	rdlong	result1, _var01 wz
24098     04 80 86 F1 | 	sub	_var01, #4
2409c     1C 00 90 AD |  if_e	jmp	#LR__3012
240a0                 | '         if freq +< long[profile][1] 
240a0     04 80 06 F1 | 	add	_var01, #4
240a4     40 7B 02 FB | 	rdlong	result1, _var01
240a8     04 80 86 F1 | 	sub	_var01, #4
240ac     3D 93 12 F2 | 	cmp	arg01, result1 wc
240b0                 | '             quit
240b0                 | '         profile += 4
240b0     04 80 06 31 |  if_ae	add	_var01, #4
240b4                 | '         delay++
240b4     01 82 06 31 |  if_ae	add	_var02, #1
240b8     D4 FF 9F 3D |  if_ae	jmp	#LR__3010
240bc                 | LR__3011
240bc                 | LR__3012
240bc     41 7B 02 F6 | 	mov	result1, _var02
240c0                 | _psram_spin2_lookupDelay_ret
240c0     2D 00 64 FD | 	ret
240c4                 | 
240c4                 | ' 
240c4                 | ' PUB start() : r
240c4                 | _usbnew_spin2_start
240c4     00 80 06 F6 | 	mov	_var01, #0
240c8                 | '   ifnot driver_cog
240c8     15 00 00 FF 
240cc     87 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##10887
240d0     3B 83 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
240d4     15 00 00 FF 
240d8     87 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10887
240dc     38 00 90 5D |  if_ne	jmp	#LR__3020
240e0                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
240e0     3B 95 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
240e4     10 80 06 F6 | 	mov	_var01, #16
240e8     00 96 06 F6 | 	mov	arg03, #0
240ec     28 96 62 FD | 	setq	arg03
240f0     4A 81 F2 FC | 	coginit	_var01, arg02 wc
240f4     01 80 66 C6 |  if_b	neg	_var01, #1
240f8                 | '     if r >= 0
240f8     00 80 56 F2 | 	cmps	_var01, #0 wc
240fc                 | '       driver_cog := r+1
240fc     40 83 02 36 |  if_ae	mov	_var02, _var01
24100     01 82 06 31 |  if_ae	add	_var02, #1
24104     15 00 00 3F 
24108     87 76 06 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10887
2410c     3B 83 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
24110     15 00 00 3F 
24114     87 76 86 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10887
24118                 | LR__3020
24118     40 7B 02 F6 | 	mov	result1, _var01
2411c                 | _usbnew_spin2_start_ret
2411c     2D 00 64 FD | 	ret
24120                 | 
24120                 | '     '' (Always enabled)
24120                 | ' 
24120                 | ' '' Get current pressed state of a keyboard key
24120                 | ' PUB keystate(key) : r | buf[2],tmp
24120                 | _usbnew_spin2_keystate
24120     00 84 06 F6 | 	mov	_var03, #0
24124                 | '   if key >= $E0 && key < $E8
24124     E0 92 56 F2 | 	cmps	arg01, #224 wc
24128     30 00 90 CD |  if_b	jmp	#LR__3030
2412c     E8 92 56 F2 | 	cmps	arg01, #232 wc
24130     28 00 90 3D |  if_ae	jmp	#LR__3030
24134                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
24134     00 7A 06 F6 | 	mov	result1, #0
24138     3B 87 02 F6 | 	mov	_var04, ptr__usbnew_spin2_dat__
2413c     13 00 00 FF 
24140     D8 87 06 F1 | 	add	_var04, ##10200
24144     49 89 02 F6 | 	mov	_var05, arg01
24148     E0 88 86 F1 | 	sub	_var05, #224
2414c     43 8B C2 FA | 	rdbyte	_var06, _var04
24150     44 8B 4A F0 | 	shr	_var06, _var05 wz
24154     01 7A 66 56 |  if_ne	neg	result1, #1
24158     50 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
2415c                 | LR__3030
2415c                 | '   else
2415c                 | '     '' Do this in inline ASM to ensure atomicity
2415c                 | '     tmp := @hkbd_report
2415c     3B 8B 02 F6 | 	mov	_var06, ptr__usbnew_spin2_dat__
24160     13 00 00 FF 
24164     D8 8B 06 F1 | 	add	_var06, ##10200
24168                 | '     org
24168     D7 1E 48 FB | 	callpa	#(@LR__3032-@LR__3031)>>2,fcache_load_ptr_
2416c                 | LR__3031
2416c 000             | 	org	0
2416c 000 28 02 64 FD | 	setq	#1
24170 001 45 81 02 FB | 	rdlong	_var01, _var06
24174 002 40 8D F2 F8 | 	getbyte	_var07, _var01, #2
24178 003 49 8D 0A F2 | 	cmp	_var07, arg01 wz
2417c 004 40 8D FA F8 | 	getbyte	_var07, _var01, #3
24180 005 49 8D 0A 52 |  if_ne	cmp	_var07, arg01 wz
24184 006 41 8D E2 F8 | 	getbyte	_var07, _var02, #0
24188 007 49 8D 0A 52 |  if_ne	cmp	_var07, arg01 wz
2418c 008 41 8D EA F8 | 	getbyte	_var07, _var02, #1
24190 009 49 8D 0A 52 |  if_ne	cmp	_var07, arg01 wz
24194 00a 41 8D F2 F8 | 	getbyte	_var07, _var02, #2
24198 00b 49 8D 0A 52 |  if_ne	cmp	_var07, arg01 wz
2419c 00c 41 8D FA F8 | 	getbyte	_var07, _var02, #3
241a0 00d 49 8D 0A 52 |  if_ne	cmp	_var07, arg01 wz
241a4 00e 01 84 66 A6 |  if_e	neg	_var03, #1
241a8 00f             | 	fit	192
241a8 00f             | LR__3032
241a8                 | 	orgh
241a8     42 7B 02 F6 | 	mov	result1, _var03
241ac                 | _usbnew_spin2_keystate_ret
241ac     2D 00 64 FD | 	ret
241b0                 | 
241b0                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
241b0                 | ' 
241b0                 | ' '' Return key event from buffer if there is one
241b0                 | ' PUB get_key() : r | tail
241b0                 | _usbnew_spin2_get_key
241b0                 | '   tail := keyq_tail
241b0     0F 00 00 FF 
241b4     D5 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##7893
241b8     3B 81 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
241bc                 | '   if keyq_head == tail
241bc     01 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
241c0     3B 83 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
241c4     0F 00 00 FF 
241c8     D4 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7892
241cc     40 83 0A F2 | 	cmp	_var02, _var01 wz
241d0                 | '     return 0 ' No event
241d0     00 7A 06 A6 |  if_e	mov	result1, #0
241d4     3C 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
241d8                 | '   r := keyq_data[tail]
241d8     40 83 02 F6 | 	mov	_var02, _var01
241dc     02 82 66 F0 | 	shl	_var02, #2
241e0     3B 7B 02 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
241e4     0F 00 00 FF 
241e8     D6 7A 06 F1 | 	add	result1, ##7894
241ec     3D 83 02 F1 | 	add	_var02, result1
241f0     41 7B 02 FB | 	rdlong	result1, _var02
241f4                 | '   if ++tail == KEYQUEUE_SIZE
241f4     01 80 06 F1 | 	add	_var01, #1
241f8     80 80 0E F2 | 	cmp	_var01, #128 wz
241fc                 | '     tail := 0
241fc     00 80 06 A6 |  if_e	mov	_var01, #0
24200                 | '   keyq_tail := tail
24200     0F 00 00 FF 
24204     D5 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##7893
24208     3B 81 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
2420c     0F 00 00 FF 
24210     D5 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7893
24214                 | _usbnew_spin2_get_key_ret
24214     2D 00 64 FD | 	ret
24218                 | 
24218                 | ' 
24218                 | ' '' Emulate mouse movement
24218                 | ' PUB mouse_move(x,y)
24218                 | _usbnew_spin2_mouse_move
24218     02 CA 05 F6 | 	mov	COUNT_, #2
2421c     E8 00 A0 FD | 	call	#pushregs_
24220     49 A7 02 F6 | 	mov	local01, arg01
24224     4A A9 02 F6 | 	mov	local02, arg02
24228                 | '   mouse_lock := 1
24228     14 00 00 FF 
2422c     F1 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##10481
24230     3B 03 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
24234     14 00 00 FF 
24238     F1 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10481
2423c                 | '   waitus(2) ' hope driver is now done
2423c     02 92 06 F6 | 	mov	arg01, #2
24240     24 0E B0 FD | 	call	#__system___waitus
24244                 | '   mouse_xacc := x
24244     14 00 00 FF 
24248     E1 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##10465
2424c     3B A7 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
24250                 | '   mouse_yacc := y
24250     04 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, #4
24254     3B A9 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
24258                 | '   if mouse_outptr
24258     05 00 00 FF 
2425c     15 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2581
24260     3B 95 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
24264     0F 00 00 FF 
24268     D0 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7888
2426c     24 00 90 AD |  if_e	jmp	#LR__3040
24270                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
24270     10 A8 66 F0 | 	shl	local02, #16
24274     53 A7 32 F9 | 	getword	local01, local01, #0
24278     53 A9 42 F5 | 	or	local02, local01
2427c     0F 00 00 FF 
24280     D0 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##7888
24284     3B A7 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
24288     0F 00 00 FF 
2428c     D0 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7888
24290     53 A9 62 FC | 	wrlong	local02, local01
24294                 | LR__3040
24294                 | '   mouse_lock := 0
24294     14 00 00 FF 
24298     F1 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##10481
2429c     3B 01 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
242a0     14 00 00 FF 
242a4     F1 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10481
242a8     E7 F0 03 F6 | 	mov	ptra, fp
242ac     F2 00 A0 FD | 	call	#popregs_
242b0                 | _usbnew_spin2_mouse_move_ret
242b0     2D 00 64 FD | 	ret
242b4                 | 
242b4                 | ' 
242b4                 | ' '' Get state of an axis (normalized between -32768 and 32767)
242b4                 | ' PUB hidpad_axis(dev,axnum) : r
242b4                 | _usbnew_spin2_hidpad_axis
242b4                 | '   if axnum +>= 8
242b4     08 94 16 F2 | 	cmp	arg02, #8 wc
242b8                 | '     return 0
242b8     00 7A 06 36 |  if_ae	mov	result1, #0
242bc     2C 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
242c0                 | '   else 
242c0                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
242c0     3B 7B 02 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
242c4     13 00 00 FF 
242c8     F8 7B 06 F1 | 	add	result1, ##10232
242cc     05 92 66 F0 | 	shl	arg01, #5
242d0     49 7B 02 F1 | 	add	result1, arg01
242d4     04 92 06 F6 | 	mov	arg01, #4
242d8     4A 93 02 F1 | 	add	arg01, arg02
242dc     01 92 66 F0 | 	shl	arg01, #1
242e0     3D 93 02 F1 | 	add	arg01, result1
242e4     49 7B E2 FA | 	rdword	result1, arg01
242e8     0F 7A 66 F7 | 	signx	result1, #15
242ec                 | _usbnew_spin2_hidpad_axis_ret
242ec     2D 00 64 FD | 	ret
242f0                 | 
242f0                 | ' 
242f0                 | ' '' Get state of a hat
242f0                 | ' PUB hidpad_hat(dev,hatnum) : r
242f0                 | _usbnew_spin2_hidpad_hat
242f0                 | '   if hatnum +>= 4
242f0     04 94 16 F2 | 	cmp	arg02, #4 wc
242f4                 | '     return 0
242f4     00 7A 06 36 |  if_ae	mov	result1, #0
242f8     24 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_hat_ret
242fc                 | '   else 
242fc                 | '     return byte[@hidpad_report+dev*HIDPAD_REPORT_SIZE][7*4+hatnum]
242fc     3B 7B 02 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
24300     13 00 00 FF 
24304     F8 7B 06 F1 | 	add	result1, ##10232
24308     05 92 66 F0 | 	shl	arg01, #5
2430c     49 7B 02 F1 | 	add	result1, arg01
24310     1C 92 06 F6 | 	mov	arg01, #28
24314     4A 93 02 F1 | 	add	arg01, arg02
24318     3D 93 02 F1 | 	add	arg01, result1
2431c     49 7B C2 FA | 	rdbyte	result1, arg01
24320                 | _usbnew_spin2_hidpad_hat_ret
24320     2D 00 64 FD | 	ret
24324                 | 
24324                 | ' 
24324                 | ' '--------------------------------------------------------------
24324                 | ' '---------- Init the variables, start the cog. ----------------
24324                 | ' '--------------------------------------------------------------
24324                 | ' 
24324                 | ' pub start(mbox,scope,cache) :cog,base | iii
24324                 | _Audio2_004_spin2_start
24324     04 CA 05 F6 | 	mov	COUNT_, #4
24328     E8 00 A0 FD | 	call	#pushregs_
2432c     49 A7 02 F6 | 	mov	local01, arg01
24330                 | ' 
24330                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
24330                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
24330                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
24330                 | ' 
24330                 | ' mailboxaddr:=mbox 
24330     32 A7 62 FC | 	wrlong	local01, objptr
24334                 | ' scope_ptr:=scope
24334     04 64 06 F1 | 	add	objptr, #4
24338     32 95 62 FC | 	wrlong	arg02, objptr
2433c                 | ' cache_ptr:=cache
2433c     04 64 06 F1 | 	add	objptr, #4
24340     32 97 62 FC | 	wrlong	arg03, objptr
24344                 | ' base:=@channel0[0]
24344     04 64 06 F1 | 	add	objptr, #4
24348     32 A9 02 F6 | 	mov	local02, objptr
2434c                 | ' 
2434c                 | ' repeat iii from 0 to 15
2434c     00 AA 06 F6 | 	mov	local03, #0
24350     0C 64 86 F1 | 	sub	objptr, #12
24354     D7 1A 49 FB | 	callpa	#(@LR__3051-@LR__3050)>>2,fcache_load_ptr_
24358                 | LR__3050
24358                 | '   long[base+64*iii]:=0
24358     54 A7 02 F6 | 	mov	local01, local02
2435c     55 7D 02 F6 | 	mov	result2, local03
24360     06 7C 66 F0 | 	shl	result2, #6
24364     3E A7 02 F1 | 	add	local01, result2
24368     53 01 68 FC | 	wrlong	#0, local01
2436c                 | '   long[base+64*iii+4]:=0  		
2436c     54 A7 02 F6 | 	mov	local01, local02
24370     55 7D 02 F6 | 	mov	result2, local03
24374     06 7C 66 F0 | 	shl	result2, #6
24378     3E A7 02 F1 | 	add	local01, result2
2437c     04 A6 06 F1 | 	add	local01, #4
24380     53 01 68 FC | 	wrlong	#0, local01
24384                 | '   long[base+64*iii+8]:=0
24384     54 AD 02 F6 | 	mov	local04, local02
24388     55 A7 02 F6 | 	mov	local01, local03
2438c     06 A6 66 F0 | 	shl	local01, #6
24390     53 AD 02 F1 | 	add	local04, local01
24394     08 AC 06 F1 | 	add	local04, #8
24398     56 01 68 FC | 	wrlong	#0, local04
2439c                 | '   long[base+64*iii+12]:=0
2439c     54 AD 02 F6 | 	mov	local04, local02
243a0     55 A7 02 F6 | 	mov	local01, local03
243a4     06 A6 66 F0 | 	shl	local01, #6
243a8     53 AD 02 F1 | 	add	local04, local01
243ac     0C AC 06 F1 | 	add	local04, #12
243b0     56 01 68 FC | 	wrlong	#0, local04
243b4                 | '   long[base+64*iii+16]:=0
243b4     54 AD 02 F6 | 	mov	local04, local02
243b8     55 A7 02 F6 | 	mov	local01, local03
243bc     06 A6 66 F0 | 	shl	local01, #6
243c0     53 AD 02 F1 | 	add	local04, local01
243c4     10 AC 06 F1 | 	add	local04, #16
243c8     56 01 68 FC | 	wrlong	#0, local04
243cc                 | '   long[base+64*iii+20]:=0
243cc     54 AD 02 F6 | 	mov	local04, local02
243d0     55 A7 02 F6 | 	mov	local01, local03
243d4     06 A6 66 F0 | 	shl	local01, #6
243d8     53 AD 02 F1 | 	add	local04, local01
243dc     14 AC 06 F1 | 	add	local04, #20
243e0     56 01 68 FC | 	wrlong	#0, local04
243e4                 | '   long[base+64*iii+24]:=0
243e4     54 AD 02 F6 | 	mov	local04, local02
243e8     55 A7 02 F6 | 	mov	local01, local03
243ec     06 A6 66 F0 | 	shl	local01, #6
243f0     53 AD 02 F1 | 	add	local04, local01
243f4     18 AC 06 F1 | 	add	local04, #24
243f8     56 01 68 FC | 	wrlong	#0, local04
243fc                 | '   long[base+64*iii+28]:=0
243fc     54 AD 02 F6 | 	mov	local04, local02
24400     55 A7 02 F6 | 	mov	local01, local03
24404     06 A6 66 F0 | 	shl	local01, #6
24408     53 AD 02 F1 | 	add	local04, local01
2440c     1C AC 06 F1 | 	add	local04, #28
24410     56 01 68 FC | 	wrlong	#0, local04
24414                 | '   word[base+64*iii+32]:=8192
24414     54 AD 02 F6 | 	mov	local04, local02
24418     55 A7 02 F6 | 	mov	local01, local03
2441c     06 A6 66 F0 | 	shl	local01, #6
24420     53 AD 02 F1 | 	add	local04, local01
24424     20 AC 06 F1 | 	add	local04, #32
24428     10 00 80 FF 
2442c     56 01 58 FC | 	wrword	##8192, local04
24430                 | '   word[base+64*iii+34]:=8192
24430     54 AD 02 F6 | 	mov	local04, local02
24434     55 A7 02 F6 | 	mov	local01, local03
24438     06 A6 66 F0 | 	shl	local01, #6
2443c     53 AD 02 F1 | 	add	local04, local01
24440     22 AC 06 F1 | 	add	local04, #34
24444     10 00 80 FF 
24448     56 01 58 FC | 	wrword	##8192, local04
2444c                 | '   long[base+64*iii+36]:=0
2444c     54 AD 02 F6 | 	mov	local04, local02
24450     55 A7 02 F6 | 	mov	local01, local03
24454     06 A6 66 F0 | 	shl	local01, #6
24458     53 AD 02 F1 | 	add	local04, local01
2445c     24 AC 06 F1 | 	add	local04, #36
24460     56 01 68 FC | 	wrlong	#0, local04
24464                 | '   long[base+64*iii+40]:=0
24464     54 AD 02 F6 | 	mov	local04, local02
24468     55 A7 02 F6 | 	mov	local01, local03
2446c     06 A6 66 F0 | 	shl	local01, #6
24470     53 AD 02 F1 | 	add	local04, local01
24474     28 AC 06 F1 | 	add	local04, #40
24478     56 01 68 FC | 	wrlong	#0, local04
2447c                 | '   long[base+64*iii+44]:=0
2447c     54 AD 02 F6 | 	mov	local04, local02
24480     55 A7 02 F6 | 	mov	local01, local03
24484     06 A6 66 F0 | 	shl	local01, #6
24488     53 AD 02 F1 | 	add	local04, local01
2448c     2C AC 06 F1 | 	add	local04, #44
24490     56 01 68 FC | 	wrlong	#0, local04
24494                 | '   long[base+64*iii+48]:=0
24494     54 AD 02 F6 | 	mov	local04, local02
24498     55 A7 02 F6 | 	mov	local01, local03
2449c     06 A6 66 F0 | 	shl	local01, #6
244a0     53 AD 02 F1 | 	add	local04, local01
244a4     30 AC 06 F1 | 	add	local04, #48
244a8     56 01 68 FC | 	wrlong	#0, local04
244ac                 | '   long[base+64*iii+52]:=0
244ac     54 AD 02 F6 | 	mov	local04, local02
244b0     55 A7 02 F6 | 	mov	local01, local03
244b4     06 A6 66 F0 | 	shl	local01, #6
244b8     53 AD 02 F1 | 	add	local04, local01
244bc     34 AC 06 F1 | 	add	local04, #52
244c0     56 01 68 FC | 	wrlong	#0, local04
244c4                 | '   freqs[iii]:=440000
244c4     55 AD 02 F6 | 	mov	local04, local03
244c8     02 AC 66 F0 | 	shl	local04, #2
244cc     02 00 00 FF 
244d0     0C 64 06 F1 | 	add	objptr, ##1036
244d4     32 AD 02 F1 | 	add	local04, objptr
244d8     5B 03 80 FF 
244dc     56 81 69 FC | 	wrlong	##440000, local04
244e0                 | '   delays[iii]:=0
244e0     55 AD 02 F6 | 	mov	local04, local03
244e4     01 AC 66 F0 | 	shl	local04, #1
244e8     40 64 06 F1 | 	add	objptr, #64
244ec     32 AD 02 F1 | 	add	local04, objptr
244f0     56 01 58 FC | 	wrword	#0, local04
244f4                 | '   volumes[iii]:=4096
244f4     55 AD 02 F6 | 	mov	local04, local03
244f8     01 AC 66 F0 | 	shl	local04, #1
244fc     20 64 06 F1 | 	add	objptr, #32
24500     32 AD 02 F1 | 	add	local04, objptr
24504     08 00 80 FF 
24508     56 01 58 FC | 	wrword	##4096, local04
2450c                 | '   waveforms[iii]:=0
2450c     55 AD 02 F6 | 	mov	local04, local03
24510     02 AC 66 F0 | 	shl	local04, #2
24514     20 64 06 F1 | 	add	objptr, #32
24518     32 AD 02 F1 | 	add	local04, objptr
2451c     56 01 68 FC | 	wrlong	#0, local04
24520                 | '   envelopes[iii]:=0
24520     55 AD 02 F6 | 	mov	local04, local03
24524     02 AC 66 F0 | 	shl	local04, #2
24528     40 64 06 F1 | 	add	objptr, #64
2452c     32 AD 02 F1 | 	add	local04, objptr
24530     56 01 68 FC | 	wrlong	#0, local04
24534                 | '   lengths[iii]:=1000
24534     55 AD 02 F6 | 	mov	local04, local03
24538     01 AC 66 F0 | 	shl	local04, #1
2453c     40 64 06 F1 | 	add	objptr, #64
24540     32 AD 02 F1 | 	add	local04, objptr
24544     01 00 80 FF 
24548     56 D1 5B FC | 	wrword	##1000, local04
2454c                 | '   pans[iii]:=8192
2454c     55 AD 02 F6 | 	mov	local04, local03
24550     01 AC 66 F0 | 	shl	local04, #1
24554     20 64 06 F1 | 	add	objptr, #32
24558     32 AD 02 F1 | 	add	local04, objptr
2455c     10 00 80 FF 
24560     56 01 58 FC | 	wrword	##8192, local04
24564                 | '   sustains[iii]:=255
24564     55 AD 02 F6 | 	mov	local04, local03
24568     01 AC 66 F0 | 	shl	local04, #1
2456c     20 64 06 F1 | 	add	objptr, #32
24570     32 AD 02 F1 | 	add	local04, objptr
24574     56 FF 59 FC | 	wrword	#255, local04
24578     01 AA 06 F1 | 	add	local03, #1
2457c     10 AA 56 F2 | 	cmps	local03, #16 wc
24580     02 00 00 FF 
24584     4C 65 86 F1 | 	sub	objptr, ##1356
24588     CC FD 9F CD |  if_b	jmp	#LR__3050
2458c                 | LR__3051
2458c                 | '   
2458c                 | ' cog:=coginit(16,@audio,@mailboxaddr)
2458c     33 95 02 F6 | 	mov	arg02, ptr__Audio2_004_spin2_dat__
24590     32 97 02 F6 | 	mov	arg03, objptr
24594     10 AC 06 F6 | 	mov	local04, #16
24598     28 96 62 FD | 	setq	arg03
2459c     4A AD F2 FC | 	coginit	local04, arg02 wc
245a0     01 AC 66 C6 |  if_b	neg	local04, #1
245a4                 | ' waitms(10)
245a4     0A 92 06 F6 | 	mov	arg01, #10
245a8     50 0A B0 FD | 	call	#__system___waitms
245ac                 | ' return cog,base
245ac     54 7D 02 F6 | 	mov	result2, local02
245b0     56 7B 02 F6 | 	mov	result1, local04
245b4     E7 F0 03 F6 | 	mov	ptra, fp
245b8     F2 00 A0 FD | 	call	#popregs_
245bc                 | _Audio2_004_spin2_start_ret
245bc     2D 00 64 FD | 	ret
245c0                 | 
245c0                 | ' 
245c0                 | ' pub play (channel, frequency=-1, delay=-1, volume=-1, waveform=-1, envelope=-1, length=-1, pan=-1, sustain=-1) | base2
245c0                 | _Audio2_004_spin2_play
245c0     0B CA 05 F6 | 	mov	COUNT_, #11
245c4     E8 00 A0 FD | 	call	#pushregs_
245c8     49 A7 02 F6 | 	mov	local01, arg01
245cc     4A A9 02 F6 | 	mov	local02, arg02
245d0     4B AB 02 F6 | 	mov	local03, arg03
245d4     4C AD 02 F6 | 	mov	local04, arg04
245d8     4D AF 02 F6 | 	mov	local05, arg05
245dc     4E B1 02 F6 | 	mov	local06, arg06
245e0     4F B3 02 F6 | 	mov	local07, arg07
245e4     50 B5 02 F6 | 	mov	local08, arg08
245e8     51 B7 02 F6 | 	mov	local09, arg09
245ec                 | ' 
245ec                 | ' if frequency==(-1)
245ec     FF FF 7F FF 
245f0     FF A9 0E F2 | 	cmp	local02, ##-1 wz
245f4     20 00 90 5D |  if_ne	jmp	#LR__3060
245f8                 | '   frequency:=freqs[channel]
245f8     53 A9 02 F6 | 	mov	local02, local01
245fc     02 A8 66 F0 | 	shl	local02, #2
24600     32 B9 02 F6 | 	mov	local10, objptr
24604     02 00 00 FF 
24608     0C B8 06 F1 | 	add	local10, ##1036
2460c     5C A9 02 F1 | 	add	local02, local10
24610     54 A9 02 FB | 	rdlong	local02, local02
24614     1C 00 90 FD | 	jmp	#LR__3061
24618                 | LR__3060
24618                 | ' else
24618                 | '   freqs[channel]:=frequency
24618     53 BB 02 F6 | 	mov	local11, local01
2461c     02 BA 66 F0 | 	shl	local11, #2
24620     32 B9 02 F6 | 	mov	local10, objptr
24624     02 00 00 FF 
24628     0C B8 06 F1 | 	add	local10, ##1036
2462c     5C BB 02 F1 | 	add	local11, local10
24630     5D A9 62 FC | 	wrlong	local02, local11
24634                 | LR__3061
24634                 | '   
24634                 | ' if delay==(-1)
24634     FF FF 7F FF 
24638     FF AB 0E F2 | 	cmp	local03, ##-1 wz
2463c     20 00 90 5D |  if_ne	jmp	#LR__3062
24640                 | '   delay:=delays[channel]
24640     53 B9 02 F6 | 	mov	local10, local01
24644     01 B8 66 F0 | 	shl	local10, #1
24648     32 BB 02 F6 | 	mov	local11, objptr
2464c     02 00 00 FF 
24650     4C BA 06 F1 | 	add	local11, ##1100
24654     5D B9 02 F1 | 	add	local10, local11
24658     5C AB E2 FA | 	rdword	local03, local10
2465c     1C 00 90 FD | 	jmp	#LR__3063
24660                 | LR__3062
24660                 | ' else
24660                 | '   delays[channel]:=delay
24660     53 B9 02 F6 | 	mov	local10, local01
24664     01 B8 66 F0 | 	shl	local10, #1
24668     32 BB 02 F6 | 	mov	local11, objptr
2466c     02 00 00 FF 
24670     4C BA 06 F1 | 	add	local11, ##1100
24674     5D B9 02 F1 | 	add	local10, local11
24678     5C AB 52 FC | 	wrword	local03, local10
2467c                 | LR__3063
2467c                 | '   
2467c                 | ' if volume==(-1)      
2467c     FF FF 7F FF 
24680     FF AD 0E F2 | 	cmp	local04, ##-1 wz
24684     20 00 90 5D |  if_ne	jmp	#LR__3064
24688                 | '   volume:=volumes[channel]
24688     53 B9 02 F6 | 	mov	local10, local01
2468c     01 B8 66 F0 | 	shl	local10, #1
24690     32 BB 02 F6 | 	mov	local11, objptr
24694     02 00 00 FF 
24698     6C BA 06 F1 | 	add	local11, ##1132
2469c     5D B9 02 F1 | 	add	local10, local11
246a0     5C AD E2 FA | 	rdword	local04, local10
246a4     1C 00 90 FD | 	jmp	#LR__3065
246a8                 | LR__3064
246a8                 | ' else
246a8                 | '   volumes[channel]:=volume
246a8     53 B9 02 F6 | 	mov	local10, local01
246ac     01 B8 66 F0 | 	shl	local10, #1
246b0     32 BB 02 F6 | 	mov	local11, objptr
246b4     02 00 00 FF 
246b8     6C BA 06 F1 | 	add	local11, ##1132
246bc     5D B9 02 F1 | 	add	local10, local11
246c0     5C AD 52 FC | 	wrword	local04, local10
246c4                 | LR__3065
246c4                 | '   
246c4                 | ' if waveform==(-1)
246c4     FF FF 7F FF 
246c8     FF AF 0E F2 | 	cmp	local05, ##-1 wz
246cc     20 00 90 5D |  if_ne	jmp	#LR__3066
246d0                 | '   waveform:=waveforms[channel]
246d0     53 BB 02 F6 | 	mov	local11, local01
246d4     02 BA 66 F0 | 	shl	local11, #2
246d8     32 B9 02 F6 | 	mov	local10, objptr
246dc     02 00 00 FF 
246e0     8C B8 06 F1 | 	add	local10, ##1164
246e4     5C BB 02 F1 | 	add	local11, local10
246e8     5D AF 02 FB | 	rdlong	local05, local11
246ec     1C 00 90 FD | 	jmp	#LR__3067
246f0                 | LR__3066
246f0                 | ' else
246f0                 | '   waveforms[channel]:=waveform
246f0     53 BB 02 F6 | 	mov	local11, local01
246f4     02 BA 66 F0 | 	shl	local11, #2
246f8     32 B9 02 F6 | 	mov	local10, objptr
246fc     02 00 00 FF 
24700     8C B8 06 F1 | 	add	local10, ##1164
24704     5C BB 02 F1 | 	add	local11, local10
24708     5D AF 62 FC | 	wrlong	local05, local11
2470c                 | LR__3067
2470c                 | '   
2470c                 | ' if envelope==(-1)
2470c     FF FF 7F FF 
24710     FF B1 0E F2 | 	cmp	local06, ##-1 wz
24714     20 00 90 5D |  if_ne	jmp	#LR__3068
24718                 | '   envelope:=envelopes[channel]
24718     53 BB 02 F6 | 	mov	local11, local01
2471c     02 BA 66 F0 | 	shl	local11, #2
24720     32 B9 02 F6 | 	mov	local10, objptr
24724     02 00 00 FF 
24728     CC B8 06 F1 | 	add	local10, ##1228
2472c     5C BB 02 F1 | 	add	local11, local10
24730     5D B1 02 FB | 	rdlong	local06, local11
24734     1C 00 90 FD | 	jmp	#LR__3069
24738                 | LR__3068
24738                 | ' else
24738                 | '   envelopes[channel]:=envelope
24738     53 BB 02 F6 | 	mov	local11, local01
2473c     02 BA 66 F0 | 	shl	local11, #2
24740     32 B9 02 F6 | 	mov	local10, objptr
24744     02 00 00 FF 
24748     CC B8 06 F1 | 	add	local10, ##1228
2474c     5C BB 02 F1 | 	add	local11, local10
24750     5D B1 62 FC | 	wrlong	local06, local11
24754                 | LR__3069
24754                 | '   
24754                 | ' if length==(-1)
24754     FF FF 7F FF 
24758     FF B3 0E F2 | 	cmp	local07, ##-1 wz
2475c     20 00 90 5D |  if_ne	jmp	#LR__3070
24760                 | '   length:=lengths[channel]
24760     53 B9 02 F6 | 	mov	local10, local01
24764     01 B8 66 F0 | 	shl	local10, #1
24768     32 BB 02 F6 | 	mov	local11, objptr
2476c     02 00 00 FF 
24770     0C BB 06 F1 | 	add	local11, ##1292
24774     5D B9 02 F1 | 	add	local10, local11
24778     5C B3 E2 FA | 	rdword	local07, local10
2477c     1C 00 90 FD | 	jmp	#LR__3071
24780                 | LR__3070
24780                 | ' else
24780                 | '   lengths[channel]:=length
24780     53 B9 02 F6 | 	mov	local10, local01
24784     01 B8 66 F0 | 	shl	local10, #1
24788     32 BB 02 F6 | 	mov	local11, objptr
2478c     02 00 00 FF 
24790     0C BB 06 F1 | 	add	local11, ##1292
24794     5D B9 02 F1 | 	add	local10, local11
24798     5C B3 52 FC | 	wrword	local07, local10
2479c                 | LR__3071
2479c                 | '   
2479c                 | ' if pan==(-1)
2479c     FF FF 7F FF 
247a0     FF B5 0E F2 | 	cmp	local08, ##-1 wz
247a4     20 00 90 5D |  if_ne	jmp	#LR__3072
247a8                 | '   pan:=pans[channel]
247a8     53 B9 02 F6 | 	mov	local10, local01
247ac     01 B8 66 F0 | 	shl	local10, #1
247b0     32 BB 02 F6 | 	mov	local11, objptr
247b4     02 00 00 FF 
247b8     2C BB 06 F1 | 	add	local11, ##1324
247bc     5D B9 02 F1 | 	add	local10, local11
247c0     5C B5 E2 FA | 	rdword	local08, local10
247c4     1C 00 90 FD | 	jmp	#LR__3073
247c8                 | LR__3072
247c8                 | ' else
247c8                 | '   pans[channel]:=pan
247c8     53 B9 02 F6 | 	mov	local10, local01
247cc     01 B8 66 F0 | 	shl	local10, #1
247d0     32 BB 02 F6 | 	mov	local11, objptr
247d4     02 00 00 FF 
247d8     2C BB 06 F1 | 	add	local11, ##1324
247dc     5D B9 02 F1 | 	add	local10, local11
247e0     5C B5 52 FC | 	wrword	local08, local10
247e4                 | LR__3073
247e4                 | '  
247e4                 | ' if sustain==(-1)
247e4     FF FF 7F FF 
247e8     FF B7 0E F2 | 	cmp	local09, ##-1 wz
247ec     20 00 90 5D |  if_ne	jmp	#LR__3074
247f0                 | '   sustain:=sustains[channel]
247f0     53 B9 02 F6 | 	mov	local10, local01
247f4     01 B8 66 F0 | 	shl	local10, #1
247f8     32 BB 02 F6 | 	mov	local11, objptr
247fc     02 00 00 FF 
24800     4C BB 06 F1 | 	add	local11, ##1356
24804     5D B9 02 F1 | 	add	local10, local11
24808     5C B7 E2 FA | 	rdword	local09, local10
2480c     1C 00 90 FD | 	jmp	#LR__3075
24810                 | LR__3074
24810                 | ' else
24810                 | '   sustains[channel]:=sustain
24810     53 B9 02 F6 | 	mov	local10, local01
24814     01 B8 66 F0 | 	shl	local10, #1
24818     32 BB 02 F6 | 	mov	local11, objptr
2481c     02 00 00 FF 
24820     4C BB 06 F1 | 	add	local11, ##1356
24824     5D B9 02 F1 | 	add	local10, local11
24828     5C B7 52 FC | 	wrword	local09, local10
2482c                 | LR__3075
2482c     59 BB 52 F6 | 	abs	local11, local07 wc
24830     C2 B9 80 FF 
24834     5D DF 19 FD | 	qdiv	##24347887, local11
24838                 | '                 
24838                 | ' length:=24347887/length  
24838     18 BA 62 FD | 	getqx	local11
2483c     6D A8 06 FD | 	qmul	local02, #109
24840     5D B3 82 F6 | 	negc	local07, local11
24844                 | ' debug(udec(sustain))
24844                 | ' base2:=@channel0[0]+64*channel
24844     32 A9 02 F6 | 	mov	local02, objptr
24848     0C A8 06 F1 | 	add	local02, #12
2484c     06 A6 66 F0 | 	shl	local01, #6
24850     53 A9 02 F1 | 	add	local02, local01
24854                 | ' long[base2+20]:=waveform+$C0000000 
24854     00 00 60 FF 
24858     00 AE 06 F1 | 	add	local05, ##-1073741824
2485c     54 B9 02 F6 | 	mov	local10, local02
24860     14 B8 06 F1 | 	add	local10, #20
24864     5C AF 62 FC | 	wrlong	local05, local10
24868                 | ' long[base2+28]:= 2048
24868     54 BB 02 F6 | 	mov	local11, local02
2486c     1C BA 06 F1 | 	add	local11, #28
24870     04 00 80 FF 
24874     5D 01 68 FC | 	wrlong	##2048, local11
24878                 | ' long[base2+24]:= 0
24878     54 BB 02 F6 | 	mov	local11, local02
2487c     18 BA 06 F1 | 	add	local11, #24
24880     5D 01 68 FC | 	wrlong	#0, local11
24884                 | ' word[base2+32]:=volume
24884     54 BB 02 F6 | 	mov	local11, local02
24888     20 BA 06 F1 | 	add	local11, #32
2488c     5D AD 52 FC | 	wrword	local04, local11
24890                 | ' word[base2+32]:=pan
24890     54 BB 02 F6 | 	mov	local11, local02
24894     20 BA 06 F1 | 	add	local11, #32
24898     5D B5 52 FC | 	wrword	local08, local11
2489c                 | ' long[base2+36]:=((frequency*109)/1000)*3574 ' (frequency*389566)/1000  freq*3574*109/1000
2489c     18 BA 62 FD | 	getqx	local11
248a0     5D B9 52 F6 | 	abs	local10, local11 wc
248a4     01 00 00 FF 
248a8     E8 B9 16 FD | 	qdiv	local10, ##1000
248ac     18 B8 62 FD | 	getqx	local10
248b0     5C B9 82 F6 | 	negc	local10, local10
248b4     06 00 00 FF 
248b8     F6 B9 06 FD | 	qmul	local10, ##3574
248bc     54 B9 02 F6 | 	mov	local10, local02
248c0     24 B8 06 F1 | 	add	local10, #36
248c4                 | ' long[base2+44]:=envelope
248c4     54 BB 02 F6 | 	mov	local11, local02
248c8     2C BA 06 F1 | 	add	local11, #44
248cc                 | ' long[base2+48]:=length
248cc                 | ' long[base2+52]:=sustain
248cc                 | ' waitms(delay)
248cc     55 93 02 F6 | 	mov	arg01, local03
248d0     18 B4 62 FD | 	getqx	local08
248d4     5C B5 62 FC | 	wrlong	local08, local10
248d8     5D B1 62 FC | 	wrlong	local06, local11
248dc     54 BB 02 F6 | 	mov	local11, local02
248e0     30 BA 06 F1 | 	add	local11, #48
248e4     5D B3 62 FC | 	wrlong	local07, local11
248e8     34 A8 06 F1 | 	add	local02, #52
248ec     54 B7 62 FC | 	wrlong	local09, local02
248f0     08 07 B0 FD | 	call	#__system___waitms
248f4     E7 F0 03 F6 | 	mov	ptra, fp
248f8     F2 00 A0 FD | 	call	#popregs_
248fc                 | _Audio2_004_spin2_play_ret
248fc     2D 00 64 FD | 	ret
24900                 | 
24900                 | ' 
24900                 | ' 
24900                 | ' pub play16(channel,sample,splfreq,vol,len,loop,delay) | base2
24900                 | _Audio2_004_spin2_play16
24900     F8 02 00 FF 
24904     BE 97 06 FD | 	qmul	arg03, ##389566
24908                 | ' 
24908                 | ' base2:=@channel0[0]+64*channel
24908     32 97 02 F6 | 	mov	arg03, objptr
2490c     0C 96 06 F1 | 	add	arg03, #12
24910     06 92 66 F0 | 	shl	arg01, #6
24914     49 97 02 F1 | 	add	arg03, arg01
24918                 | ' long[base2+20]:=sample+$C0000000 
24918     00 00 60 FF 
2491c     00 94 06 F1 | 	add	arg02, ##-1073741824
24920     4B 93 02 F6 | 	mov	arg01, arg03
24924     14 92 06 F1 | 	add	arg01, #20
24928     49 95 62 FC | 	wrlong	arg02, arg01
2492c                 | ' long[base2+28]:= len
2492c     4B 95 02 F6 | 	mov	arg02, arg03
24930     1C 94 06 F1 | 	add	arg02, #28
24934     4A 9B 62 FC | 	wrlong	arg05, arg02
24938                 | ' long[base2+24]:= loop
24938     4B 9B 02 F6 | 	mov	arg05, arg03
2493c     18 9A 06 F1 | 	add	arg05, #24
24940     4D 9D 62 FC | 	wrlong	arg06, arg05
24944                 | ' word[base2+32]:= vol
24944     4B 9D 02 F6 | 	mov	arg06, arg03
24948     20 9C 06 F1 | 	add	arg06, #32
2494c     4E 99 52 FC | 	wrword	arg04, arg06
24950                 | ' long[base2+36]:= splfreq*389566
24950     24 96 06 F1 | 	add	arg03, #36
24954                 | ' waitms(delay)
24954     4F 93 02 F6 | 	mov	arg01, arg07
24958     18 9E 62 FD | 	getqx	arg07
2495c     4B 9F 62 FC | 	wrlong	arg07, arg03
24960     98 06 B0 FD | 	call	#__system___waitms
24964                 | _Audio2_004_spin2_play16_ret
24964     2D 00 64 FD | 	ret
24968                 | 
24968                 | ' 
24968                 | ' pub beep(channel,sample,splfreq,vol,len,loop,delay) | base2
24968                 | _Audio2_004_spin2_beep
24968     01 00 00 FF 
2496c     F9 96 06 FD | 	qmul	arg03, ##761
24970                 | ' 
24970                 | ' base2:=@channel0[0]+64*channel
24970     32 97 02 F6 | 	mov	arg03, objptr
24974     0C 96 06 F1 | 	add	arg03, #12
24978     06 92 66 F0 | 	shl	arg01, #6
2497c     49 97 02 F1 | 	add	arg03, arg01
24980                 | ' long[base2+20]:=sample+$C0000000 
24980     00 00 60 FF 
24984     00 94 06 F1 | 	add	arg02, ##-1073741824
24988     4B 93 02 F6 | 	mov	arg01, arg03
2498c     14 92 06 F1 | 	add	arg01, #20
24990     49 95 62 FC | 	wrlong	arg02, arg01
24994                 | ' long[base2+28]:= len
24994     4B 95 02 F6 | 	mov	arg02, arg03
24998     1C 94 06 F1 | 	add	arg02, #28
2499c     4A 9B 62 FC | 	wrlong	arg05, arg02
249a0                 | ' long[base2+24]:= loop
249a0     4B 9B 02 F6 | 	mov	arg05, arg03
249a4     18 9A 06 F1 | 	add	arg05, #24
249a8     4D 9D 62 FC | 	wrlong	arg06, arg05
249ac                 | ' word[base2+32]:= vol
249ac     4B 9D 02 F6 | 	mov	arg06, arg03
249b0     20 9C 06 F1 | 	add	arg06, #32
249b4     4E 99 52 FC | 	wrword	arg04, arg06
249b8                 | ' long[base2+36]:= splfreq*761
249b8     24 96 06 F1 | 	add	arg03, #36
249bc                 | ' waitms(delay)
249bc     4F 93 02 F6 | 	mov	arg01, arg07
249c0     18 9E 62 FD | 	getqx	arg07
249c4     4B 9F 62 FC | 	wrlong	arg07, arg03
249c8     30 06 B0 FD | 	call	#__system___waitms
249cc                 | _Audio2_004_spin2_beep_ret
249cc     2D 00 64 FD | 	ret
249d0                 | hubexit
249d0     C1 00 80 FD | 	jmp	#cogexit
249d4                 | 
249d4                 | __system___setbaud
249d4     14 0E 07 FB | 	rdlong	muldiva_, #20
249d8     49 11 03 F6 | 	mov	muldivb_, arg01
249dc     FA 00 A0 FD | 	call	#divide_
249e0     D7 06 48 FB | 	callpa	#(@LR__3081-@LR__3080)>>2,fcache_load_ptr_
249e4                 | LR__3080
249e4     3E 7A 9E FA | 	rdpin	result1, #62 wc
249e8     3E 7D A2 F1 | 	subx	result2, result2
249ec     F4 FF 9F CD |  if_b	jmp	#LR__3080
249f0                 | LR__3081
249f0     40 7C 64 FD | 	dirl	#62
249f4     40 7E 64 FD | 	dirl	#63
249f8     34 11 63 FC | 	wrlong	muldivb_, ptr___system__dat__
249fc     10 10 67 F0 | 	shl	muldivb_, #16
24a00     07 94 06 F6 | 	mov	arg02, #7
24a04     88 95 02 F1 | 	add	arg02, muldivb_
24a08     3E F8 0C FC | 	wrpin	#124, #62
24a0c     3E 94 16 FC | 	wxpin	arg02, #62
24a10     3F 7C 0C FC | 	wrpin	#62, #63
24a14     14 94 06 F1 | 	add	arg02, #20
24a18     3F 94 16 FC | 	wxpin	arg02, #63
24a1c     41 7C 64 FD | 	dirh	#62
24a20     41 7E 64 FD | 	dirh	#63
24a24                 | __system___setbaud_ret
24a24     2D 00 64 FD | 	ret
24a28                 | 
24a28                 | __system___txraw
24a28     01 CA 05 F6 | 	mov	COUNT_, #1
24a2c     E8 00 A0 FD | 	call	#pushregs_
24a30     49 A7 02 F6 | 	mov	local01, arg01
24a34     D7 06 48 FB | 	callpa	#(@LR__3091-@LR__3090)>>2,fcache_load_ptr_
24a38                 | LR__3090
24a38     3E 7A 9E FA | 	rdpin	result1, #62 wc
24a3c     3E 7D A2 F1 | 	subx	result2, result2
24a40     F4 FF 9F CD |  if_b	jmp	#LR__3090
24a44                 | LR__3091
24a44     34 7B 0A FB | 	rdlong	result1, ptr___system__dat__ wz
24a48     42 0F 00 AF 
24a4c     80 92 06 A6 |  if_e	mov	arg01, ##2000000
24a50     80 FF BF AD |  if_e	call	#__system___setbaud
24a54     58 7C 64 FD | 	drvl	#62
24a58     3E A6 26 FC | 	wypin	local01, #62
24a5c     01 7A 06 F6 | 	mov	result1, #1
24a60     E7 F0 03 F6 | 	mov	ptra, fp
24a64     F2 00 A0 FD | 	call	#popregs_
24a68                 | __system___txraw_ret
24a68     2D 00 64 FD | 	ret
24a6c                 | 
24a6c                 | __system___rxraw
24a6c     0D CA 05 F6 | 	mov	COUNT_, #13
24a70     E8 00 A0 FD | 	call	#pushregs_
24a74     49 A7 02 F6 | 	mov	local01, arg01
24a78     34 A9 0A FB | 	rdlong	local02, ptr___system__dat__ wz
24a7c     42 0F 00 AF 
24a80     80 92 06 A6 |  if_e	mov	arg01, ##2000000
24a84     4C FF BF AD |  if_e	call	#__system___setbaud
24a88     00 A6 0E F2 | 	cmp	local01, #0 wz
24a8c     20 00 90 AD |  if_e	jmp	#LR__3100
24a90     14 AA 06 FB | 	rdlong	local03, #20
24a94     0A AA 46 F0 | 	shr	local03, #10
24a98     55 A7 02 FD | 	qmul	local01, local03
24a9c     1A 7A 62 FD | 	getct	result1
24aa0     18 AC 62 FD | 	getqx	local04
24aa4     56 7B 02 F1 | 	add	result1, local04
24aa8     3D AF 02 F6 | 	mov	local05, result1
24aac     04 00 90 FD | 	jmp	#LR__3101
24ab0                 | LR__3100
24ab0     00 AE 06 F6 | 	mov	local05, #0
24ab4                 | LR__3101
24ab4     01 B0 66 F6 | 	neg	local06, #1
24ab8     3F B2 06 F6 | 	mov	local07, #63
24abc     00 B4 06 F6 | 	mov	local08, #0
24ac0     04 68 06 F1 | 	add	ptr___system__dat__, #4
24ac4     34 B7 02 FB | 	rdlong	local09, ptr___system__dat__
24ac8     04 68 86 F1 | 	sub	ptr___system__dat__, #4
24acc                 | LR__3102
24acc     08 B6 16 F4 | 	testb	local09, #8 wc
24ad0     09 B6 76 F4 | 	testbn	local09, #9 andc
24ad4     0A B6 46 F0 | 	shr	local09, #10
24ad8     01 B4 06 C6 |  if_b	mov	local08, #1
24adc     40 7E 6C 3D |  if_ae	testp	#63 wz
24ae0     01 B4 06 26 |  if_nc_and_z	mov	local08, #1
24ae4     3F B6 8E 2A |  if_nc_and_z	rdpin	local09, #63
24ae8     04 B6 46 20 |  if_nc_and_z	shr	local09, #4
24aec                 | LR__3103
24aec     00 A8 06 F6 | 	mov	local02, #0
24af0     00 B4 0E F2 | 	cmp	local08, #0 wz
24af4     01 A8 66 56 |  if_ne	neg	local02, #1
24af8     00 B8 06 F6 | 	mov	local10, #0
24afc     00 AA 06 F6 | 	mov	local03, #0
24b00     00 A6 0E F2 | 	cmp	local01, #0 wz
24b04     01 AA 66 56 |  if_ne	neg	local03, #1
24b08     00 AC 06 F6 | 	mov	local04, #0
24b0c     00 BA 06 F6 | 	mov	local11, #0
24b10     57 BD 02 F6 | 	mov	local12, local05
24b14     1A 7A 62 FD | 	getct	result1
24b18     3D BF 02 F6 | 	mov	local13, result1
24b1c     5F BD 82 F1 | 	sub	local12, local13
24b20     00 BC 56 F2 | 	cmps	local12, #0 wc
24b24     00 BA 26 C6 |  if_b	not	local11, #0
24b28     00 BA 0E F2 | 	cmp	local11, #0 wz
24b2c     00 AC 26 56 |  if_ne	not	local04, #0
24b30     56 AB CA F7 | 	test	local03, local04 wz
24b34     00 B8 26 56 |  if_ne	not	local10, #0
24b38     5C A9 4A F5 | 	or	local02, local10 wz
24b3c     8C FF 9F AD |  if_e	jmp	#LR__3102
24b40     00 B4 0E F2 | 	cmp	local08, #0 wz
24b44     5B B1 02 56 |  if_ne	mov	local06, local09
24b48     58 B1 E2 58 |  if_ne	getbyte	local06, local06, #0
24b4c     04 68 06 F1 | 	add	ptr___system__dat__, #4
24b50     34 B7 62 FC | 	wrlong	local09, ptr___system__dat__
24b54     04 68 86 F1 | 	sub	ptr___system__dat__, #4
24b58     58 7B 02 F6 | 	mov	result1, local06
24b5c     E7 F0 03 F6 | 	mov	ptra, fp
24b60     F2 00 A0 FD | 	call	#popregs_
24b64                 | __system___rxraw_ret
24b64     2D 00 64 FD | 	ret
24b68                 | 
24b68                 | __system___getus
24b68     1A 7C 72 FD | 	getct	result2 wc
24b6c     1A 80 62 FD | 	getct	_var01
24b70     10 68 06 F1 | 	add	ptr___system__dat__, #16
24b74     34 83 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
24b78     10 68 86 F1 | 	sub	ptr___system__dat__, #16
24b7c     20 00 90 5D |  if_ne	jmp	#LR__3110
24b80     14 82 06 FB | 	rdlong	_var02, #20
24b84     A1 07 00 FF 
24b88     40 82 16 FD | 	qdiv	_var02, ##1000000
24b8c     10 68 06 F1 | 	add	ptr___system__dat__, #16
24b90     18 7A 62 FD | 	getqx	result1
24b94     3D 83 02 F6 | 	mov	_var02, result1
24b98     34 7B 62 FC | 	wrlong	result1, ptr___system__dat__
24b9c     10 68 86 F1 | 	sub	ptr___system__dat__, #16
24ba0                 | LR__3110
24ba0     41 7D 12 FD | 	qdiv	result2, _var02
24ba4     19 7C 62 FD | 	getqy	result2
24ba8     28 7C 62 FD | 	setq	result2
24bac     41 81 12 FD | 	qdiv	_var01, _var02
24bb0     18 7A 62 FD | 	getqx	result1
24bb4                 | __system___getus_ret
24bb4     2D 00 64 FD | 	ret
24bb8                 | 
24bb8                 | __system____builtin_memmove
24bb8     49 81 02 F6 | 	mov	_var01, arg01
24bbc     4A 93 52 F2 | 	cmps	arg01, arg02 wc
24bc0     10 00 90 CD |  if_b	jmp	#LR__3120
24bc4     4A 83 02 F6 | 	mov	_var02, arg02
24bc8     4B 83 02 F1 | 	add	_var02, arg03
24bcc     41 93 52 F2 | 	cmps	arg01, _var02 wc
24bd0     48 00 90 CD |  if_b	jmp	#LR__3126
24bd4                 | LR__3120
24bd4     4B 85 02 F6 | 	mov	_var03, arg03
24bd8     02 84 4E F0 | 	shr	_var03, #2 wz
24bdc     18 00 90 AD |  if_e	jmp	#LR__3125
24be0     D7 0A 48 FB | 	callpa	#(@LR__3123-@LR__3121)>>2,fcache_load_ptr_
24be4                 | LR__3121
24be4     42 09 D8 FC | 	rep	@LR__3124, _var03
24be8                 | LR__3122
24be8     4A 85 02 FB | 	rdlong	_var03, arg02
24bec     49 85 62 FC | 	wrlong	_var03, arg01
24bf0     04 92 06 F1 | 	add	arg01, #4
24bf4     04 94 06 F1 | 	add	arg02, #4
24bf8                 | LR__3123
24bf8                 | LR__3124
24bf8                 | LR__3125
24bf8     02 96 CE F7 | 	test	arg03, #2 wz
24bfc     4A 83 E2 5A |  if_ne	rdword	_var02, arg02
24c00     49 83 52 5C |  if_ne	wrword	_var02, arg01
24c04     02 92 06 51 |  if_ne	add	arg01, #2
24c08     02 94 06 51 |  if_ne	add	arg02, #2
24c0c     01 96 CE F7 | 	test	arg03, #1 wz
24c10     4A 83 C2 5A |  if_ne	rdbyte	_var02, arg02
24c14     49 83 42 5C |  if_ne	wrbyte	_var02, arg01
24c18     28 00 90 FD | 	jmp	#LR__3132
24c1c                 | LR__3126
24c1c     4B 93 02 F1 | 	add	arg01, arg03
24c20     4B 95 02 F1 | 	add	arg02, arg03
24c24     4B 87 0A F6 | 	mov	_var04, arg03 wz
24c28     18 00 90 AD |  if_e	jmp	#LR__3131
24c2c     D7 0A 48 FB | 	callpa	#(@LR__3129-@LR__3127)>>2,fcache_load_ptr_
24c30                 | LR__3127
24c30     43 09 D8 FC | 	rep	@LR__3130, _var04
24c34                 | LR__3128
24c34     01 92 86 F1 | 	sub	arg01, #1
24c38     01 94 86 F1 | 	sub	arg02, #1
24c3c     4A 83 C2 FA | 	rdbyte	_var02, arg02
24c40     49 83 42 FC | 	wrbyte	_var02, arg01
24c44                 | LR__3129
24c44                 | LR__3130
24c44                 | LR__3131
24c44                 | LR__3132
24c44     40 7B 02 F6 | 	mov	result1, _var01
24c48                 | __system____builtin_memmove_ret
24c48     2D 00 64 FD | 	ret
24c4c                 | 
24c4c                 | __system__longmove
24c4c     49 81 02 F6 | 	mov	_var01, arg01
24c50     4A 93 52 F2 | 	cmps	arg01, arg02 wc
24c54     24 00 90 3D |  if_ae	jmp	#LR__3144
24c58     4B 83 0A F6 | 	mov	_var02, arg03 wz
24c5c     54 00 90 AD |  if_e	jmp	#LR__3150
24c60     D7 0A 48 FB | 	callpa	#(@LR__3142-@LR__3140)>>2,fcache_load_ptr_
24c64                 | LR__3140
24c64     41 09 D8 FC | 	rep	@LR__3143, _var02
24c68                 | LR__3141
24c68     4A 83 02 FB | 	rdlong	_var02, arg02
24c6c     49 83 62 FC | 	wrlong	_var02, arg01
24c70     04 92 06 F1 | 	add	arg01, #4
24c74     04 94 06 F1 | 	add	arg02, #4
24c78                 | LR__3142
24c78                 | LR__3143
24c78     38 00 90 FD | 	jmp	#LR__3150
24c7c                 | LR__3144
24c7c     4B 83 02 F6 | 	mov	_var02, arg03
24c80     02 82 66 F0 | 	shl	_var02, #2
24c84     41 93 02 F1 | 	add	arg01, _var02
24c88     4B 85 02 F6 | 	mov	_var03, arg03
24c8c     02 84 66 F0 | 	shl	_var03, #2
24c90     42 95 02 F1 | 	add	arg02, _var03
24c94     4B 87 0A F6 | 	mov	_var04, arg03 wz
24c98     18 00 90 AD |  if_e	jmp	#LR__3149
24c9c     D7 0A 48 FB | 	callpa	#(@LR__3147-@LR__3145)>>2,fcache_load_ptr_
24ca0                 | LR__3145
24ca0     43 09 D8 FC | 	rep	@LR__3148, _var04
24ca4                 | LR__3146
24ca4     04 92 86 F1 | 	sub	arg01, #4
24ca8     04 94 86 F1 | 	sub	arg02, #4
24cac     4A 87 02 FB | 	rdlong	_var04, arg02
24cb0     49 87 62 FC | 	wrlong	_var04, arg01
24cb4                 | LR__3147
24cb4                 | LR__3148
24cb4                 | LR__3149
24cb4                 | LR__3150
24cb4     40 7B 02 F6 | 	mov	result1, _var01
24cb8                 | __system__longmove_ret
24cb8     2D 00 64 FD | 	ret
24cbc                 | 
24cbc                 | __system____builtin_strcpy
24cbc     49 81 02 F6 | 	mov	_var01, arg01
24cc0     D7 0A 48 FB | 	callpa	#(@LR__3161-@LR__3160)>>2,fcache_load_ptr_
24cc4                 | LR__3160
24cc4     4A 7B CA FA | 	rdbyte	result1, arg02 wz
24cc8     49 7B 42 FC | 	wrbyte	result1, arg01
24ccc     01 94 06 F1 | 	add	arg02, #1
24cd0     01 92 06 F1 | 	add	arg01, #1
24cd4     EC FF 9F 5D |  if_ne	jmp	#LR__3160
24cd8                 | LR__3161
24cd8     40 7B 02 F6 | 	mov	result1, _var01
24cdc                 | __system____builtin_strcpy_ret
24cdc     2D 00 64 FD | 	ret
24ce0                 | 
24ce0                 | __system____topofstack
24ce0     00 CA 05 F6 | 	mov	COUNT_, #0
24ce4     E8 00 A0 FD | 	call	#pushregs_
24ce8     08 F0 07 F1 | 	add	ptra, #8
24cec     04 CE 05 F1 | 	add	fp, #4
24cf0     E7 92 62 FC | 	wrlong	arg01, fp
24cf4     E7 7A 02 F6 | 	mov	result1, fp
24cf8     04 CE 85 F1 | 	sub	fp, #4
24cfc     E7 F0 03 F6 | 	mov	ptra, fp
24d00     F2 00 A0 FD | 	call	#popregs_
24d04                 | __system____topofstack_ret
24d04     2D 00 64 FD | 	ret
24d08                 | 
24d08                 | __system___lockmem
24d08     00 7A 06 F6 | 	mov	result1, #0
24d0c     01 7A 62 FD | 	cogid	result1
24d10     00 7B 06 F1 | 	add	result1, #256
24d14                 | LR__3170
24d14     49 81 0A FB | 	rdlong	_var01, arg01 wz
24d18     49 7B 62 AC |  if_e	wrlong	result1, arg01
24d1c     49 81 02 AB |  if_e	rdlong	_var01, arg01
24d20     49 81 02 AB |  if_e	rdlong	_var01, arg01
24d24     3D 81 0A F2 | 	cmp	_var01, result1 wz
24d28     E8 FF 9F 5D |  if_ne	jmp	#LR__3170
24d2c                 | __system___lockmem_ret
24d2c     2D 00 64 FD | 	ret
24d30                 | 
24d30                 | __system___string_cmp
24d30     D7 14 48 FB | 	callpa	#(@LR__3181-@LR__3180)>>2,fcache_load_ptr_
24d34                 | LR__3180
24d34     49 81 C2 FA | 	rdbyte	_var01, arg01
24d38     4A 83 C2 FA | 	rdbyte	_var02, arg02
24d3c     40 85 02 F6 | 	mov	_var03, _var01
24d40     41 85 8A F1 | 	sub	_var03, _var02 wz
24d44     01 92 06 F1 | 	add	arg01, #1
24d48     01 94 06 F1 | 	add	arg02, #1
24d4c     0C 00 90 5D |  if_ne	jmp	#LR__3182
24d50     00 80 0E F2 | 	cmp	_var01, #0 wz
24d54     00 82 0E 52 |  if_ne	cmp	_var02, #0 wz
24d58     D8 FF 9F 5D |  if_ne	jmp	#LR__3180
24d5c                 | LR__3181
24d5c                 | LR__3182
24d5c     42 7B 02 F6 | 	mov	result1, _var03
24d60                 | __system___string_cmp_ret
24d60     2D 00 64 FD | 	ret
24d64                 | 
24d64                 | __system___string_concat
24d64     05 CA 05 F6 | 	mov	COUNT_, #5
24d68     E8 00 A0 FD | 	call	#pushregs_
24d6c     49 A7 02 F6 | 	mov	local01, arg01
24d70     4A A9 02 F6 | 	mov	local02, arg02
24d74     53 93 02 F6 | 	mov	arg01, local01
24d78     49 AB 02 F6 | 	mov	local03, arg01
24d7c     D7 06 48 FB | 	callpa	#(@LR__3191-@LR__3190)>>2,fcache_load_ptr_
24d80                 | LR__3190
24d80     55 7B CA FA | 	rdbyte	result1, local03 wz
24d84     01 AA 06 51 |  if_ne	add	local03, #1
24d88     F4 FF 9F 5D |  if_ne	jmp	#LR__3190
24d8c                 | LR__3191
24d8c     49 AB 82 F1 | 	sub	local03, arg01
24d90     55 AD 02 F6 | 	mov	local04, local03
24d94     54 93 02 F6 | 	mov	arg01, local02
24d98     49 AB 02 F6 | 	mov	local03, arg01
24d9c     D7 06 48 FB | 	callpa	#(@LR__3193-@LR__3192)>>2,fcache_load_ptr_
24da0                 | LR__3192
24da0     55 7B CA FA | 	rdbyte	result1, local03 wz
24da4     01 AA 06 51 |  if_ne	add	local03, #1
24da8     F4 FF 9F 5D |  if_ne	jmp	#LR__3192
24dac                 | LR__3193
24dac     49 AB 82 F1 | 	sub	local03, arg01
24db0     56 93 02 F6 | 	mov	arg01, local04
24db4     55 93 02 F1 | 	add	arg01, local03
24db8     01 92 06 F1 | 	add	arg01, #1
24dbc     50 39 B0 FD | 	call	#__system___gc_alloc_managed
24dc0     3D AF 0A F6 | 	mov	local05, result1 wz
24dc4     28 00 90 AD |  if_e	jmp	#LR__3194
24dc8     57 93 02 F6 | 	mov	arg01, local05
24dcc     53 95 02 F6 | 	mov	arg02, local01
24dd0     56 97 02 F6 | 	mov	arg03, local04
24dd4     E0 FD BF FD | 	call	#__system____builtin_memmove
24dd8     57 93 02 F6 | 	mov	arg01, local05
24ddc     56 93 02 F1 | 	add	arg01, local04
24de0     01 AA 06 F1 | 	add	local03, #1
24de4     54 95 02 F6 | 	mov	arg02, local02
24de8     55 97 02 F6 | 	mov	arg03, local03
24dec     C8 FD BF FD | 	call	#__system____builtin_memmove
24df0                 | LR__3194
24df0     57 7B 02 F6 | 	mov	result1, local05
24df4     E7 F0 03 F6 | 	mov	ptra, fp
24df8     F2 00 A0 FD | 	call	#popregs_
24dfc                 | __system___string_concat_ret
24dfc     2D 00 64 FD | 	ret
24e00                 | 
24e00                 | __system___tx
24e00     02 CA 05 F6 | 	mov	COUNT_, #2
24e04     E8 00 A0 FD | 	call	#pushregs_
24e08     49 A7 02 F6 | 	mov	local01, arg01
24e0c     0A A6 0E F2 | 	cmp	local01, #10 wz
24e10     18 00 90 5D |  if_ne	jmp	#LR__3200
24e14     08 68 06 F1 | 	add	ptr___system__dat__, #8
24e18     34 A9 02 FB | 	rdlong	local02, ptr___system__dat__
24e1c     08 68 86 F1 | 	sub	ptr___system__dat__, #8
24e20     02 A8 CE F7 | 	test	local02, #2 wz
24e24     0D 92 06 56 |  if_ne	mov	arg01, #13
24e28     FC FB BF 5D |  if_ne	call	#__system___txraw
24e2c                 | LR__3200
24e2c     53 93 02 F6 | 	mov	arg01, local01
24e30     F4 FB BF FD | 	call	#__system___txraw
24e34     E7 F0 03 F6 | 	mov	ptra, fp
24e38     F2 00 A0 FD | 	call	#popregs_
24e3c                 | __system___tx_ret
24e3c     2D 00 64 FD | 	ret
24e40                 | 
24e40                 | __system___rx
24e40     01 CA 05 F6 | 	mov	COUNT_, #1
24e44     E8 00 A0 FD | 	call	#pushregs_
24e48                 | LR__3210
24e48     00 92 06 F6 | 	mov	arg01, #0
24e4c     1C FC BF FD | 	call	#__system___rxraw
24e50     3D A7 02 F6 | 	mov	local01, result1
24e54     FF FF 7F FF 
24e58     FF A7 0E F2 | 	cmp	local01, ##-1 wz
24e5c     E8 FF 9F AD |  if_e	jmp	#LR__3210
24e60     0D A6 0E F2 | 	cmp	local01, #13 wz
24e64     14 00 90 5D |  if_ne	jmp	#LR__3211
24e68     08 68 06 F1 | 	add	ptr___system__dat__, #8
24e6c     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
24e70     08 68 86 F1 | 	sub	ptr___system__dat__, #8
24e74     02 7A CE F7 | 	test	result1, #2 wz
24e78     0A A6 06 56 |  if_ne	mov	local01, #10
24e7c                 | LR__3211
24e7c     08 68 06 F1 | 	add	ptr___system__dat__, #8
24e80     34 93 02 FB | 	rdlong	arg01, ptr___system__dat__
24e84     08 68 86 F1 | 	sub	ptr___system__dat__, #8
24e88     01 92 CE F7 | 	test	arg01, #1 wz
24e8c     1C 00 90 AD |  if_e	jmp	#LR__3214
24e90     7F A6 0E F2 | 	cmp	local01, #127 wz
24e94     0C 00 90 5D |  if_ne	jmp	#LR__3212
24e98     08 92 06 F6 | 	mov	arg01, #8
24e9c     60 FF BF FD | 	call	#__system___tx
24ea0     08 00 90 FD | 	jmp	#LR__3213
24ea4                 | LR__3212
24ea4     53 93 02 F6 | 	mov	arg01, local01
24ea8     54 FF BF FD | 	call	#__system___tx
24eac                 | LR__3213
24eac                 | LR__3214
24eac     53 7B 02 F6 | 	mov	result1, local01
24eb0     E7 F0 03 F6 | 	mov	ptra, fp
24eb4     F2 00 A0 FD | 	call	#popregs_
24eb8                 | __system___rx_ret
24eb8     2D 00 64 FD | 	ret
24ebc                 | 
24ebc                 | __system___pinwrite
24ebc     49 81 02 F6 | 	mov	_var01, arg01
24ec0     1F 80 06 F5 | 	and	_var01, #31
24ec4     20 92 CE F7 | 	test	arg01, #32 wz
24ec8     06 92 46 F0 | 	shr	arg01, #6
24ecc     49 93 CA F9 | 	bmask	arg01, arg01
24ed0     40 93 62 F0 | 	shl	arg01, _var01
24ed4     40 95 62 F0 | 	shl	arg02, _var01
24ed8     1C 00 90 AD |  if_e	jmp	#LR__3220
24edc     49 F7 43 F5 | 	or	dirb, arg01
24ee0     FD 81 02 F6 | 	mov	_var01, outb
24ee4     49 81 22 F5 | 	andn	_var01, arg01
24ee8     49 95 02 F5 | 	and	arg02, arg01
24eec     4A 81 42 F5 | 	or	_var01, arg02
24ef0     40 FB 03 F6 | 	mov	outb, _var01
24ef4     18 00 90 FD | 	jmp	#LR__3221
24ef8                 | LR__3220
24ef8     49 F5 43 F5 | 	or	dira, arg01
24efc     FC 81 02 F6 | 	mov	_var01, outa
24f00     49 81 22 F5 | 	andn	_var01, arg01
24f04     49 95 02 F5 | 	and	arg02, arg01
24f08     4A 81 42 F5 | 	or	_var01, arg02
24f0c     40 F9 03 F6 | 	mov	outa, _var01
24f10                 | LR__3221
24f10                 | __system___pinwrite_ret
24f10     2D 00 64 FD | 	ret
24f14                 | 
24f14                 | __system___basic_read_line
24f14     06 CA 05 F6 | 	mov	COUNT_, #6
24f18     E8 00 A0 FD | 	call	#pushregs_
24f1c     49 A7 02 F6 | 	mov	local01, arg01
24f20     00 A8 06 F6 | 	mov	local02, #0
24f24     18 AA 06 F6 | 	mov	local03, #24
24f28     00 AC 06 F6 | 	mov	local04, #0
24f2c     18 92 06 F6 | 	mov	arg01, #24
24f30     DC 37 B0 FD | 	call	#__system___gc_alloc_managed
24f34     3D AF 0A F6 | 	mov	local05, result1 wz
24f38     57 7B 02 A6 |  if_e	mov	result1, local05
24f3c     B0 00 90 AD |  if_e	jmp	#LR__3233
24f40                 | LR__3230
24f40     53 93 02 F6 | 	mov	arg01, local01
24f44     78 0B B0 FD | 	call	#__system___basic_get_char
24f48     3D B1 02 F6 | 	mov	local06, result1
24f4c     01 B0 56 F2 | 	cmps	local06, #1 wc
24f50     8C 00 90 CD |  if_b	jmp	#LR__3232
24f54     0A B0 0E F2 | 	cmp	local06, #10 wz
24f58     10 00 90 5D |  if_ne	jmp	#LR__3231
24f5c     00 AC 0E F2 | 	cmp	local04, #0 wz
24f60     01 A8 56 52 |  if_ne	cmps	local02, #1 wc
24f64     01 A8 86 11 |  if_a	sub	local02, #1
24f68     74 00 90 FD | 	jmp	#LR__3232
24f6c                 | LR__3231
24f6c     0D B0 0E F2 | 	cmp	local06, #13 wz
24f70     01 AC 06 A6 |  if_e	mov	local04, #1
24f74     00 AC 06 56 |  if_ne	mov	local04, #0
24f78     08 B0 0E F2 | 	cmp	local06, #8 wz
24f7c     7F B0 0E 52 |  if_ne	cmp	local06, #127 wz
24f80     01 A8 56 A2 |  if_e	cmps	local02, #1 wc
24f84     01 A8 86 21 |  if_nc_and_z	sub	local02, #1
24f88     B4 FF 9F AD |  if_e	jmp	#LR__3230
24f8c     57 97 02 F6 | 	mov	arg03, local05
24f90     54 97 02 F1 | 	add	arg03, local02
24f94     4B B1 42 FC | 	wrbyte	local06, arg03
24f98     01 A8 06 F1 | 	add	local02, #1
24f9c     55 A9 0A F2 | 	cmp	local02, local03 wz
24fa0     9C FF 9F 5D |  if_ne	jmp	#LR__3230
24fa4     55 93 02 F6 | 	mov	arg01, local03
24fa8     20 92 06 F1 | 	add	arg01, #32
24fac     60 37 B0 FD | 	call	#__system___gc_alloc_managed
24fb0     3D B1 0A F6 | 	mov	local06, result1 wz
24fb4     58 7B 02 A6 |  if_e	mov	result1, local06
24fb8     34 00 90 AD |  if_e	jmp	#LR__3233
24fbc     58 93 02 F6 | 	mov	arg01, local06
24fc0     57 95 02 F6 | 	mov	arg02, local05
24fc4     55 97 02 F6 | 	mov	arg03, local03
24fc8     EC FB BF FD | 	call	#__system____builtin_memmove
24fcc     20 AA 06 F1 | 	add	local03, #32
24fd0     57 93 02 F6 | 	mov	arg01, local05
24fd4     6C 38 B0 FD | 	call	#__system___gc_free
24fd8     58 AF 02 F6 | 	mov	local05, local06
24fdc     60 FF 9F FD | 	jmp	#LR__3230
24fe0                 | LR__3232
24fe0     57 B1 02 F6 | 	mov	local06, local05
24fe4     54 B1 02 F1 | 	add	local06, local02
24fe8     58 01 48 FC | 	wrbyte	#0, local06
24fec     57 7B 02 F6 | 	mov	result1, local05
24ff0                 | LR__3233
24ff0     E7 F0 03 F6 | 	mov	ptra, fp
24ff4     F2 00 A0 FD | 	call	#popregs_
24ff8                 | __system___basic_read_line_ret
24ff8     2D 00 64 FD | 	ret
24ffc                 | 
24ffc                 | __system___waitms
24ffc     49 81 02 F6 | 	mov	_var01, arg01
25000     1A 82 62 FD | 	getct	_var02
25004     14 84 06 FB | 	rdlong	_var03, #20
25008     D7 14 48 FB | 	callpa	#(@LR__3241-@LR__3240)>>2,fcache_load_ptr_
2500c                 | LR__3240
2500c     01 00 00 FF 
25010     E8 81 56 F2 | 	cmps	_var01, ##1000 wc
25014     1C 00 90 CD |  if_b	jmp	#LR__3242
25018     42 83 02 F1 | 	add	_var02, _var03
2501c     41 93 02 F6 | 	mov	arg01, _var02
25020     00 92 66 FA | 	addct1	arg01, #0
25024     24 22 60 FD | 	waitct1
25028     01 00 00 FF 
2502c     E8 81 86 F1 | 	sub	_var01, ##1000
25030     D8 FF 9F FD | 	jmp	#LR__3240
25034                 | LR__3241
25034                 | LR__3242
25034     01 80 56 F2 | 	cmps	_var01, #1 wc
25038     28 00 90 CD |  if_b	jmp	#LR__3243
2503c     42 81 02 FD | 	qmul	_var01, _var03
25040     01 00 00 FF 
25044     E8 97 06 F6 | 	mov	arg03, ##1000
25048     19 7A 62 FD | 	getqy	result1
2504c     18 92 62 FD | 	getqx	arg01
25050     28 7A 62 FD | 	setq	result1
25054     4B 93 12 FD | 	qdiv	arg01, arg03
25058     18 92 62 FD | 	getqx	arg01
2505c     41 93 62 FA | 	addct1	arg01, _var02
25060     24 22 60 FD | 	waitct1
25064                 | LR__3243
25064                 | __system___waitms_ret
25064     2D 00 64 FD | 	ret
25068                 | 
25068                 | __system___waitus
25068     49 81 02 F6 | 	mov	_var01, arg01
2506c     1A 82 62 FD | 	getct	_var02
25070     14 84 06 FB | 	rdlong	_var03, #20
25074     D7 14 48 FB | 	callpa	#(@LR__3251-@LR__3250)>>2,fcache_load_ptr_
25078                 | LR__3250
25078     A1 07 00 FF 
2507c     40 80 56 F2 | 	cmps	_var01, ##1000000 wc
25080     1C 00 90 CD |  if_b	jmp	#LR__3252
25084     42 83 02 F1 | 	add	_var02, _var03
25088     41 93 02 F6 | 	mov	arg01, _var02
2508c     00 92 66 FA | 	addct1	arg01, #0
25090     24 22 60 FD | 	waitct1
25094     A1 07 00 FF 
25098     40 80 86 F1 | 	sub	_var01, ##1000000
2509c     D8 FF 9F FD | 	jmp	#LR__3250
250a0                 | LR__3251
250a0                 | LR__3252
250a0     01 80 56 F2 | 	cmps	_var01, #1 wc
250a4     28 00 90 CD |  if_b	jmp	#LR__3253
250a8     42 81 02 FD | 	qmul	_var01, _var03
250ac     A1 07 00 FF 
250b0     40 96 06 F6 | 	mov	arg03, ##1000000
250b4     19 7A 62 FD | 	getqy	result1
250b8     18 92 62 FD | 	getqx	arg01
250bc     28 7A 62 FD | 	setq	result1
250c0     4B 93 12 FD | 	qdiv	arg01, arg03
250c4     18 7A 62 FD | 	getqx	result1
250c8     3D 83 62 FA | 	addct1	_var02, result1
250cc     24 22 60 FD | 	waitct1
250d0                 | LR__3253
250d0                 | __system___waitus_ret
250d0     2D 00 64 FD | 	ret
250d4                 | 
250d4                 | __system___mount
250d4     09 CA 05 F6 | 	mov	COUNT_, #9
250d8     E8 00 A0 FD | 	call	#pushregs_
250dc     49 A7 02 F6 | 	mov	local01, arg01
250e0     4A A9 0A F6 | 	mov	local02, arg02 wz
250e4     01 AA 66 F6 | 	neg	local03, #1
250e8     01 7A 66 A6 |  if_e	neg	result1, #1
250ec     9C 02 90 AD |  if_e	jmp	#LR__3275
250f0     53 7B C2 FA | 	rdbyte	result1, local01
250f4     2F 7A 0E F2 | 	cmp	result1, #47 wz
250f8     28 00 90 5D |  if_ne	jmp	#LR__3262
250fc     53 93 02 F6 | 	mov	arg01, local01
25100     49 AD 02 F6 | 	mov	local04, arg01
25104     D7 06 48 FB | 	callpa	#(@LR__3261-@LR__3260)>>2,fcache_load_ptr_
25108                 | LR__3260
25108     56 7B CA FA | 	rdbyte	result1, local04 wz
2510c     01 AC 06 51 |  if_ne	add	local04, #1
25110     F4 FF 9F 5D |  if_ne	jmp	#LR__3260
25114                 | LR__3261
25114     49 AD 82 F1 | 	sub	local04, arg01
25118     56 7B 02 F6 | 	mov	result1, local04
2511c     10 7A 56 F2 | 	cmps	result1, #16 wc
25120     14 00 90 CD |  if_b	jmp	#LR__3263
25124                 | LR__3262
25124     20 68 06 F1 | 	add	ptr___system__dat__, #32
25128     34 15 68 FC | 	wrlong	#10, ptr___system__dat__
2512c     20 68 86 F1 | 	sub	ptr___system__dat__, #32
25130     01 7A 66 F6 | 	neg	result1, #1
25134     54 02 90 FD | 	jmp	#LR__3275
25138                 | LR__3263
25138     00 AE 06 F6 | 	mov	local05, #0
2513c                 | LR__3264
2513c     04 AE 56 F2 | 	cmps	local05, #4 wc
25140     B4 00 90 3D |  if_ae	jmp	#LR__3269
25144     57 93 02 F6 | 	mov	arg01, local05
25148     02 92 66 F0 | 	shl	arg01, #2
2514c     34 7B 02 F6 | 	mov	result1, ptr___system__dat__
25150     64 7A 06 F1 | 	add	result1, #100
25154     3D 93 02 F1 | 	add	arg01, result1
25158     49 7B 0A FB | 	rdlong	result1, arg01 wz
2515c     00 AA 56 A2 |  if_e	cmps	local03, #0 wc
25160     57 AB 02 86 |  if_c_and_z	mov	local03, local05
25164     88 00 90 8D |  if_c_and_z	jmp	#LR__3268
25168     57 93 02 F6 | 	mov	arg01, local05
2516c     02 92 66 F0 | 	shl	arg01, #2
25170     34 AD 02 F6 | 	mov	local04, ptr___system__dat__
25174     64 AC 06 F1 | 	add	local04, #100
25178     56 93 02 F1 | 	add	arg01, local04
2517c     49 93 02 FB | 	rdlong	arg01, arg01
25180     49 AD 02 F6 | 	mov	local04, arg01
25184     D7 06 48 FB | 	callpa	#(@LR__3266-@LR__3265)>>2,fcache_load_ptr_
25188                 | LR__3265
25188     56 7B CA FA | 	rdbyte	result1, local04 wz
2518c     01 AC 06 51 |  if_ne	add	local04, #1
25190     F4 FF 9F 5D |  if_ne	jmp	#LR__3265
25194                 | LR__3266
25194     49 AD 82 F1 | 	sub	local04, arg01
25198     56 7B 02 F6 | 	mov	result1, local04
2519c     3D B1 02 F6 | 	mov	local06, result1
251a0     58 93 02 F6 | 	mov	arg01, local06
251a4     53 93 02 F1 | 	add	arg01, local01
251a8     49 AD C2 FA | 	rdbyte	local04, arg01
251ac     2F AC 0E F2 | 	cmp	local04, #47 wz
251b0     58 B3 02 56 |  if_ne	mov	local07, local06
251b4     53 B3 02 51 |  if_ne	add	local07, local01
251b8     59 93 CA 5A |  if_ne	rdbyte	arg01, local07 wz
251bc     30 00 90 5D |  if_ne	jmp	#LR__3267
251c0     57 AD 02 F6 | 	mov	local04, local05
251c4     02 AC 66 F0 | 	shl	local04, #2
251c8     34 97 02 F6 | 	mov	arg03, ptr___system__dat__
251cc     64 96 06 F1 | 	add	arg03, #100
251d0     4B AD 02 F1 | 	add	local04, arg03
251d4     56 95 02 FB | 	rdlong	arg02, local04
251d8     53 93 02 F6 | 	mov	arg01, local01
251dc     58 97 02 F6 | 	mov	arg03, local06
251e0     24 4A B0 FD | 	call	#__system__strncmp
251e4     00 7A 0E F2 | 	cmp	result1, #0 wz
251e8     57 AB 02 A6 |  if_e	mov	local03, local05
251ec     08 00 90 AD |  if_e	jmp	#LR__3269
251f0                 | LR__3267
251f0                 | LR__3268
251f0     01 AE 06 F1 | 	add	local05, #1
251f4     44 FF 9F FD | 	jmp	#LR__3264
251f8                 | LR__3269
251f8     FF FF 7F FF 
251fc     FF AB 0E F2 | 	cmp	local03, ##-1 wz
25200     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
25204     34 17 68 AC |  if_e	wrlong	#11, ptr___system__dat__
25208     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
2520c     01 7A 66 A6 |  if_e	neg	result1, #1
25210     78 01 90 AD |  if_e	jmp	#LR__3275
25214     55 AF 02 F6 | 	mov	local05, local03
25218     57 B3 02 F6 | 	mov	local07, local05
2521c     02 B2 66 F0 | 	shl	local07, #2
25220     34 B1 02 F6 | 	mov	local06, ptr___system__dat__
25224     74 B0 06 F1 | 	add	local06, #116
25228     58 B3 02 F1 | 	add	local07, local06
2522c     59 B1 0A FB | 	rdlong	local06, local07 wz
25230     58 00 90 AD |  if_e	jmp	#LR__3270
25234     4C B0 06 F1 | 	add	local06, #76
25238     58 B3 0A FB | 	rdlong	local07, local06 wz
2523c     4C B0 86 F1 | 	sub	local06, #76
25240     48 00 90 AD |  if_e	jmp	#LR__3270
25244     4C B0 06 F1 | 	add	local06, #76
25248     58 B3 02 FB | 	rdlong	local07, local06
2524c     59 AD 02 F6 | 	mov	local04, local07
25250     13 B2 46 F7 | 	zerox	local07, #19
25254     14 AC 46 F0 | 	shr	local04, #20
25258     02 AC 66 F0 | 	shl	local04, #2
2525c     2D AD 02 F1 | 	add	local04, __methods__
25260     56 AD 02 FB | 	rdlong	local04, local04
25264     57 B1 02 F6 | 	mov	local06, local05
25268     02 B0 66 F0 | 	shl	local06, #2
2526c     34 AB 02 F6 | 	mov	local03, ptr___system__dat__
25270     64 AA 06 F1 | 	add	local03, #100
25274     55 B1 02 F1 | 	add	local06, local03
25278     58 93 02 FB | 	rdlong	arg01, local06
2527c     32 B1 02 F6 | 	mov	local06, objptr
25280     59 65 02 F6 | 	mov	objptr, local07
25284     2D AC 62 FD | 	call	local04
25288     58 65 02 F6 | 	mov	objptr, local06
2528c                 | LR__3270
2528c     57 B1 02 F6 | 	mov	local06, local05
25290     02 B0 66 F0 | 	shl	local06, #2
25294     34 B3 02 F6 | 	mov	local07, ptr___system__dat__
25298     74 B2 06 F1 | 	add	local07, #116
2529c     59 B1 02 F1 | 	add	local06, local07
252a0     58 A9 62 FC | 	wrlong	local02, local06
252a4     00 A8 0E F2 | 	cmp	local02, #0 wz
252a8     18 00 90 5D |  if_ne	jmp	#LR__3271
252ac     02 AE 66 F0 | 	shl	local05, #2
252b0     34 B3 02 F6 | 	mov	local07, ptr___system__dat__
252b4     64 B2 06 F1 | 	add	local07, #100
252b8     59 AF 02 F1 | 	add	local05, local07
252bc     57 01 68 FC | 	wrlong	#0, local05
252c0     C4 00 90 FD | 	jmp	#LR__3274
252c4                 | LR__3271
252c4     57 B5 02 F6 | 	mov	local08, local05
252c8     04 B4 66 F0 | 	shl	local08, #4
252cc     34 B3 02 F6 | 	mov	local07, ptr___system__dat__
252d0     24 B2 06 F1 | 	add	local07, #36
252d4     59 B5 02 F1 | 	add	local08, local07
252d8     5A 93 02 F6 | 	mov	arg01, local08
252dc     53 95 02 F6 | 	mov	arg02, local01
252e0     10 96 06 F6 | 	mov	arg03, #16
252e4     64 48 B0 FD | 	call	#__system__strncpy
252e8     48 A8 06 F1 | 	add	local02, #72
252ec     54 B3 0A FB | 	rdlong	local07, local02 wz
252f0     48 A8 86 F1 | 	sub	local02, #72
252f4     7C 00 90 AD |  if_e	jmp	#LR__3273
252f8     48 A8 06 F1 | 	add	local02, #72
252fc     54 B3 02 FB | 	rdlong	local07, local02
25300     59 B7 02 F6 | 	mov	local09, local07
25304     13 B2 46 F7 | 	zerox	local07, #19
25308     14 B6 46 F0 | 	shr	local09, #20
2530c     02 B6 66 F0 | 	shl	local09, #2
25310     2D B7 02 F1 | 	add	local09, __methods__
25314     5B B7 02 FB | 	rdlong	local09, local09
25318     5A 93 02 F6 | 	mov	arg01, local08
2531c     32 B1 02 F6 | 	mov	local06, objptr
25320     59 65 02 F6 | 	mov	objptr, local07
25324     2D B6 62 FD | 	call	local09
25328     58 65 02 F6 | 	mov	objptr, local06
2532c     3D 93 0A F6 | 	mov	arg01, result1 wz
25330     40 00 90 AD |  if_e	jmp	#LR__3272
25334     57 B5 02 F6 | 	mov	local08, local05
25338     02 B4 66 F0 | 	shl	local08, #2
2533c     74 68 06 F1 | 	add	ptr___system__dat__, #116
25340     34 B5 02 F1 | 	add	local08, ptr___system__dat__
25344     5A 01 68 FC | 	wrlong	#0, local08
25348     02 AE 66 F0 | 	shl	local05, #2
2534c     10 68 86 F1 | 	sub	ptr___system__dat__, #16
25350     34 AF 02 F1 | 	add	local05, ptr___system__dat__
25354     57 01 68 FC | 	wrlong	#0, local05
25358     49 93 6A F6 | 	neg	arg01, arg01 wz
2535c     44 68 86 F1 | 	sub	ptr___system__dat__, #68
25360     34 93 62 FC | 	wrlong	arg01, ptr___system__dat__
25364     20 68 86 F1 | 	sub	ptr___system__dat__, #32
25368     01 7A 66 56 |  if_ne	neg	result1, #1
2536c     00 7A 06 A6 |  if_e	mov	result1, #0
25370     18 00 90 FD | 	jmp	#LR__3275
25374                 | LR__3272
25374                 | LR__3273
25374     02 AE 66 F0 | 	shl	local05, #2
25378     34 B3 02 F6 | 	mov	local07, ptr___system__dat__
2537c     64 B2 06 F1 | 	add	local07, #100
25380     59 AF 02 F1 | 	add	local05, local07
25384     57 B5 62 FC | 	wrlong	local08, local05
25388                 | LR__3274
25388     00 7A 06 F6 | 	mov	result1, #0
2538c                 | LR__3275
2538c     E7 F0 03 F6 | 	mov	ptra, fp
25390     F2 00 A0 FD | 	call	#popregs_
25394                 | __system___mount_ret
25394     2D 00 64 FD | 	ret
25398                 | 
25398                 | __system___chdir
25398     02 CA 05 F6 | 	mov	COUNT_, #2
2539c     E8 00 A0 FD | 	call	#pushregs_
253a0     44 F0 07 F1 | 	add	ptra, #68
253a4     49 A7 02 F6 | 	mov	local01, arg01
253a8     E7 94 02 F6 | 	mov	arg02, fp
253ac     08 94 06 F1 | 	add	arg02, #8
253b0     53 93 02 F6 | 	mov	arg01, local01
253b4     D8 43 B0 FD | 	call	#__system__stat
253b8     00 7A 0E F2 | 	cmp	result1, #0 wz
253bc     88 00 90 5D |  if_ne	jmp	#LR__3282
253c0     10 CE 05 F1 | 	add	fp, #16
253c4     E7 92 02 FB | 	rdlong	arg01, fp
253c8     10 CE 85 F1 | 	sub	fp, #16
253cc     78 00 00 FF 
253d0     00 92 06 F5 | 	and	arg01, ##61440
253d4     08 00 00 FF 
253d8     00 92 0E F2 | 	cmp	arg01, ##4096 wz
253dc     20 68 06 51 |  if_ne	add	ptr___system__dat__, #32
253e0     34 1B 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
253e4     20 68 86 51 |  if_ne	sub	ptr___system__dat__, #32
253e8     01 7A 66 56 |  if_ne	neg	result1, #1
253ec     58 00 90 5D |  if_ne	jmp	#LR__3282
253f0     53 97 C2 FA | 	rdbyte	arg03, local01
253f4     2F 96 0E F2 | 	cmp	arg03, #47 wz
253f8     18 00 90 5D |  if_ne	jmp	#LR__3280
253fc     34 93 02 F6 | 	mov	arg01, ptr___system__dat__
25400     84 92 06 F1 | 	add	arg01, #132
25404     53 95 02 F6 | 	mov	arg02, local01
25408     00 97 06 F6 | 	mov	arg03, #256
2540c     3C 47 B0 FD | 	call	#__system__strncpy
25410     30 00 90 FD | 	jmp	#LR__3281
25414                 | LR__3280
25414     34 A9 02 F6 | 	mov	local02, ptr___system__dat__
25418     84 A9 06 F1 | 	add	local02, #388
2541c     34 95 02 F6 | 	mov	arg02, ptr___system__dat__
25420     84 94 06 F1 | 	add	arg02, #132
25424     54 93 02 F6 | 	mov	arg01, local02
25428     00 97 06 F6 | 	mov	arg03, #256
2542c     1C 47 B0 FD | 	call	#__system__strncpy
25430     34 97 02 F6 | 	mov	arg03, ptr___system__dat__
25434     84 96 06 F1 | 	add	arg03, #132
25438     54 93 02 F6 | 	mov	arg01, local02
2543c     53 95 02 F6 | 	mov	arg02, local01
25440     10 00 B0 FD | 	call	#__system____getvfsforfile
25444                 | LR__3281
25444     00 7A 06 F6 | 	mov	result1, #0
25448                 | LR__3282
25448     E7 F0 03 F6 | 	mov	ptra, fp
2544c     F2 00 A0 FD | 	call	#popregs_
25450                 | __system___chdir_ret
25450     2D 00 64 FD | 	ret
25454                 | 
25454                 | __system____getvfsforfile
25454     0E CA 05 F6 | 	mov	COUNT_, #14
25458     E8 00 A0 FD | 	call	#pushregs_
2545c     49 A7 02 F6 | 	mov	local01, arg01
25460     4A A9 02 F6 | 	mov	local02, arg02
25464     4B AB 02 F6 | 	mov	local03, arg03
25468     D7 10 48 FB | 	callpa	#(@LR__3291-@LR__3290)>>2,fcache_load_ptr_
2546c                 | LR__3290
2546c     54 7B C2 FA | 	rdbyte	result1, local02
25470     2F 7A 0E F2 | 	cmp	result1, #47 wz
25474     01 A8 06 A1 |  if_e	add	local02, #1
25478     54 AD C2 AA |  if_e	rdbyte	local04, local02
2547c     01 A8 86 A1 |  if_e	sub	local02, #1
25480     2F AC 0E A2 |  if_e	cmp	local04, #47 wz
25484     01 A8 06 A1 |  if_e	add	local02, #1
25488     E0 FF 9F AD |  if_e	jmp	#LR__3290
2548c                 | LR__3291
2548c     54 AD C2 FA | 	rdbyte	local04, local02
25490     2F AC 0E F2 | 	cmp	local04, #47 wz
25494     14 00 90 5D |  if_ne	jmp	#LR__3292
25498     53 93 02 F6 | 	mov	arg01, local01
2549c     54 95 02 F6 | 	mov	arg02, local02
254a0     00 97 06 F6 | 	mov	arg03, #256
254a4     A4 46 B0 FD | 	call	#__system__strncpy
254a8     78 00 90 FD | 	jmp	#LR__3294
254ac                 | LR__3292
254ac     34 95 02 F6 | 	mov	arg02, ptr___system__dat__
254b0     84 94 06 F1 | 	add	arg02, #132
254b4     53 93 02 F6 | 	mov	arg01, local01
254b8     00 97 06 F6 | 	mov	arg03, #256
254bc     8C 46 B0 FD | 	call	#__system__strncpy
254c0     54 AD CA FA | 	rdbyte	local04, local02 wz
254c4     5C 00 90 AD |  if_e	jmp	#LR__3293
254c8     54 AD C2 FA | 	rdbyte	local04, local02
254cc     2E AC 0E F2 | 	cmp	local04, #46 wz
254d0     01 A8 06 A1 |  if_e	add	local02, #1
254d4     54 AF C2 AA |  if_e	rdbyte	local05, local02
254d8     01 A8 86 A1 |  if_e	sub	local02, #1
254dc     57 B1 02 A6 |  if_e	mov	local06, local05
254e0     07 B0 4E A7 |  if_e	zerox	local06, #7 wz
254e4     3C 00 90 AD |  if_e	jmp	#LR__3293
254e8     53 AF C2 FA | 	rdbyte	local05, local01
254ec     2F AE 0E F2 | 	cmp	local05, #47 wz
254f0     01 A6 06 A1 |  if_e	add	local01, #1
254f4     53 AD C2 AA |  if_e	rdbyte	local04, local01
254f8     01 A6 86 A1 |  if_e	sub	local01, #1
254fc     00 AC 4E A2 |  if_e	cmps	local04, #0 wz
25500     93 01 00 5F 
25504     E0 95 06 56 |  if_ne	mov	arg02, ##@LR__5470
25508     53 93 02 56 |  if_ne	mov	arg01, local01
2550c     00 97 06 56 |  if_ne	mov	arg03, #256
25510     90 46 B0 5D |  if_ne	call	#__system__strncat
25514     53 93 02 F6 | 	mov	arg01, local01
25518     54 95 02 F6 | 	mov	arg02, local02
2551c     00 97 06 F6 | 	mov	arg03, #256
25520     80 46 B0 FD | 	call	#__system__strncat
25524                 | LR__3293
25524                 | LR__3294
25524     53 93 02 F6 | 	mov	arg01, local01
25528     3C 48 B0 FD | 	call	#__system___normalizeName
2552c     53 AD CA FA | 	rdbyte	local04, local01 wz
25530     1C 00 90 AD |  if_e	jmp	#LR__3295
25534     53 AD C2 FA | 	rdbyte	local04, local01
25538     2F AC 0E F2 | 	cmp	local04, #47 wz
2553c     01 A6 06 A1 |  if_e	add	local01, #1
25540     53 B1 C2 AA |  if_e	rdbyte	local06, local01
25544     01 A6 86 A1 |  if_e	sub	local01, #1
25548     00 B0 4E A2 |  if_e	cmps	local06, #0 wz
2554c     10 00 90 5D |  if_ne	jmp	#LR__3296
25550                 | LR__3295
25550     34 7B 02 F6 | 	mov	result1, ptr___system__dat__
25554     01 00 00 FF 
25558     84 7A 06 F1 | 	add	result1, ##644
2555c     EC 01 90 FD | 	jmp	#LR__3310
25560                 | LR__3296
25560     00 B2 06 F6 | 	mov	local07, #0
25564                 | LR__3297
25564     04 B2 56 F2 | 	cmps	local07, #4 wc
25568     CC 01 90 3D |  if_ae	jmp	#LR__3309
2556c     59 B1 02 F6 | 	mov	local06, local07
25570     02 B0 66 F0 | 	shl	local06, #2
25574     34 AD 02 F6 | 	mov	local04, ptr___system__dat__
25578     64 AC 06 F1 | 	add	local04, #100
2557c     56 B1 02 F1 | 	add	local06, local04
25580     58 B1 0A FB | 	rdlong	local06, local06 wz
25584     A8 01 90 AD |  if_e	jmp	#LR__3308
25588     59 AD 02 F6 | 	mov	local04, local07
2558c     02 AC 66 F0 | 	shl	local04, #2
25590     34 B1 02 F6 | 	mov	local06, ptr___system__dat__
25594     64 B0 06 F1 | 	add	local06, #100
25598     58 AD 02 F1 | 	add	local04, local06
2559c     56 93 02 FB | 	rdlong	arg01, local04
255a0     49 B5 02 F6 | 	mov	local08, arg01
255a4     D7 06 48 FB | 	callpa	#(@LR__3299-@LR__3298)>>2,fcache_load_ptr_
255a8                 | LR__3298
255a8     5A 7B CA FA | 	rdbyte	result1, local08 wz
255ac     01 B4 06 51 |  if_ne	add	local08, #1
255b0     F4 FF 9F 5D |  if_ne	jmp	#LR__3298
255b4                 | LR__3299
255b4     49 B5 82 F1 | 	sub	local08, arg01
255b8     5A B7 02 F6 | 	mov	local09, local08
255bc     5B AD 02 F6 | 	mov	local04, local09
255c0     53 AD 02 F1 | 	add	local04, local01
255c4     56 B1 C2 FA | 	rdbyte	local06, local04
255c8     2F B0 0E F2 | 	cmp	local06, #47 wz
255cc     5B B9 02 56 |  if_ne	mov	local10, local09
255d0     53 B9 02 51 |  if_ne	add	local10, local01
255d4     5C AF CA 5A |  if_ne	rdbyte	local05, local10 wz
255d8     54 01 90 5D |  if_ne	jmp	#LR__3307
255dc     59 AD 02 F6 | 	mov	local04, local07
255e0     02 AC 66 F0 | 	shl	local04, #2
255e4     34 97 02 F6 | 	mov	arg03, ptr___system__dat__
255e8     64 96 06 F1 | 	add	arg03, #100
255ec     4B AD 02 F1 | 	add	local04, arg03
255f0     56 95 02 FB | 	rdlong	arg02, local04
255f4     5B 97 02 F6 | 	mov	arg03, local09
255f8     53 93 02 F6 | 	mov	arg01, local01
255fc     08 46 B0 FD | 	call	#__system__strncmp
25600     00 7A 4E F2 | 	cmps	result1, #0 wz
25604     28 01 90 5D |  if_ne	jmp	#LR__3307
25608     59 BB 02 F6 | 	mov	local11, local07
2560c     02 BA 66 F0 | 	shl	local11, #2
25610     34 AD 02 F6 | 	mov	local04, ptr___system__dat__
25614     74 AC 06 F1 | 	add	local04, #116
25618     56 BB 02 F1 | 	add	local11, local04
2561c     5D BD 02 FB | 	rdlong	local12, local11
25620     D7 22 48 FB | 	callpa	#(@LR__3301-@LR__3300)>>2,fcache_load_ptr_
25624                 | LR__3300
25624     5B B1 02 F6 | 	mov	local06, local09
25628     01 B0 06 F1 | 	add	local06, #1
2562c     53 B1 02 F1 | 	add	local06, local01
25630     58 BB C2 FA | 	rdbyte	local11, local06
25634     2E BA 0E F2 | 	cmp	local11, #46 wz
25638     2C 00 90 5D |  if_ne	jmp	#LR__3302
2563c     5B BB 02 F6 | 	mov	local11, local09
25640     02 BA 06 F1 | 	add	local11, #2
25644     53 BB 02 F1 | 	add	local11, local01
25648     5D B9 C2 FA | 	rdbyte	local10, local11
2564c     2F B8 0E F2 | 	cmp	local10, #47 wz
25650     5B BF 02 56 |  if_ne	mov	local13, local09
25654     02 BE 06 51 |  if_ne	add	local13, #2
25658     53 BF 02 51 |  if_ne	add	local13, local01
2565c     5F C1 CA 5A |  if_ne	rdbyte	local14, local13 wz
25660     01 B6 06 A1 |  if_e	add	local09, #1
25664     BC FF 9F AD |  if_e	jmp	#LR__3300
25668                 | LR__3301
25668                 | LR__3302
25668     00 AA 0E F2 | 	cmp	local03, #0 wz
2566c     55 93 02 56 |  if_ne	mov	arg01, local03
25670     53 95 02 56 |  if_ne	mov	arg02, local01
25674     00 97 06 56 |  if_ne	mov	arg03, #256
25678     D0 44 B0 5D |  if_ne	call	#__system__strncpy
2567c     53 95 02 F6 | 	mov	arg02, local01
25680     5B 95 02 F1 | 	add	arg02, local09
25684     01 94 06 F1 | 	add	arg02, #1
25688     53 93 02 F6 | 	mov	arg01, local01
2568c     2C F6 BF FD | 	call	#__system____builtin_strcpy
25690     53 93 02 F6 | 	mov	arg01, local01
25694     49 B5 02 F6 | 	mov	local08, arg01
25698     D7 06 48 FB | 	callpa	#(@LR__3304-@LR__3303)>>2,fcache_load_ptr_
2569c                 | LR__3303
2569c     5A 7B CA FA | 	rdbyte	result1, local08 wz
256a0     01 B4 06 51 |  if_ne	add	local08, #1
256a4     F4 FF 9F 5D |  if_ne	jmp	#LR__3303
256a8                 | LR__3304
256a8     49 B5 82 F1 | 	sub	local08, arg01
256ac     5A B7 02 F6 | 	mov	local09, local08
256b0                 | LR__3305
256b0     01 B6 56 F2 | 	cmps	local09, #1 wc
256b4     70 00 90 CD |  if_b	jmp	#LR__3306
256b8     5B AD 02 F6 | 	mov	local04, local09
256bc     53 AD 02 F1 | 	add	local04, local01
256c0     56 BB C2 FA | 	rdbyte	local11, local04
256c4     2F BA 0E F2 | 	cmp	local11, #47 wz
256c8     5B BB 02 A6 |  if_e	mov	local11, local09
256cc     53 BB 02 A1 |  if_e	add	local11, local01
256d0     5D 01 48 AC |  if_e	wrbyte	#0, local11
256d4     01 B6 86 A1 |  if_e	sub	local09, #1
256d8     D4 FF 9F AD |  if_e	jmp	#LR__3305
256dc     5B AD 02 F6 | 	mov	local04, local09
256e0     53 AD 02 F1 | 	add	local04, local01
256e4     56 BB C2 FA | 	rdbyte	local11, local04
256e8     2E BA 0E F2 | 	cmp	local11, #46 wz
256ec     38 00 90 5D |  if_ne	jmp	#LR__3306
256f0     02 B6 56 F2 | 	cmps	local09, #2 wc
256f4     30 00 90 CD |  if_b	jmp	#LR__3306
256f8     5B C1 02 F6 | 	mov	local14, local09
256fc     01 C0 86 F1 | 	sub	local14, #1
25700     53 C1 02 F1 | 	add	local14, local01
25704     60 AF C2 FA | 	rdbyte	local05, local14
25708     2F AE 0E F2 | 	cmp	local05, #47 wz
2570c     18 00 90 5D |  if_ne	jmp	#LR__3306
25710     5B AD 02 F6 | 	mov	local04, local09
25714     01 AC 86 F1 | 	sub	local04, #1
25718     53 AD 02 F1 | 	add	local04, local01
2571c     56 01 48 FC | 	wrbyte	#0, local04
25720     02 B6 86 F1 | 	sub	local09, #2
25724     88 FF 9F FD | 	jmp	#LR__3305
25728                 | LR__3306
25728     5E 7B 02 F6 | 	mov	result1, local12
2572c     1C 00 90 FD | 	jmp	#LR__3310
25730                 | LR__3307
25730                 | LR__3308
25730     01 B2 06 F1 | 	add	local07, #1
25734     2C FE 9F FD | 	jmp	#LR__3297
25738                 | LR__3309
25738     02 00 00 FF 
2573c     28 69 06 F1 | 	add	ptr___system__dat__, ##1320
25740     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
25744     02 00 00 FF 
25748     28 69 86 F1 | 	sub	ptr___system__dat__, ##1320
2574c                 | LR__3310
2574c     E7 F0 03 F6 | 	mov	ptra, fp
25750     F2 00 A0 FD | 	call	#popregs_
25754                 | __system____getvfsforfile_ret
25754     2D 00 64 FD | 	ret
25758                 | 
25758                 | __system___basic_open
25758     05 CA 05 F6 | 	mov	COUNT_, #5
2575c     E8 00 A0 FD | 	call	#pushregs_
25760     4A A7 02 F6 | 	mov	local01, arg02
25764     4B A9 02 F6 | 	mov	local02, arg03
25768     4C AB 02 F6 | 	mov	local03, arg04
2576c     00 AC 06 F6 | 	mov	local04, #0
25770     B4 43 B0 FD | 	call	#__system____getftab
25774     3D AF 0A F6 | 	mov	local05, result1 wz
25778     18 00 90 5D |  if_ne	jmp	#LR__3320
2577c     2E 93 02 F6 | 	mov	arg01, abortchain
25780     0C 94 06 F6 | 	mov	arg02, #12
25784     01 96 06 F6 | 	mov	arg03, #1
25788     1A 01 A0 FD | 	call	#__longjmp
2578c     01 7A 66 F6 | 	neg	result1, #1
25790     18 01 90 FD | 	jmp	#LR__3329
25794                 | LR__3320
25794     08 AE 06 F1 | 	add	local05, #8
25798     57 7B 0A FB | 	rdlong	result1, local05 wz
2579c     08 AE 86 F1 | 	sub	local05, #8
257a0     57 93 02 56 |  if_ne	mov	arg01, local05
257a4     D8 3A B0 5D |  if_ne	call	#__system___closeraw
257a8     00 A6 0E F2 | 	cmp	local01, #0 wz
257ac     00 A8 0E A2 |  if_e	cmp	local02, #0 wz
257b0     00 AA 0E A2 |  if_e	cmp	local03, #0 wz
257b4     3C 00 90 AD |  if_e	jmp	#LR__3322
257b8     0C 92 06 F6 | 	mov	arg01, #12
257bc     50 2F B0 FD | 	call	#__system___gc_alloc_managed
257c0     3D AD 0A F6 | 	mov	local04, result1 wz
257c4     18 00 90 5D |  if_ne	jmp	#LR__3321
257c8     2E 93 02 F6 | 	mov	arg01, abortchain
257cc     07 94 06 F6 | 	mov	arg02, #7
257d0     01 96 06 F6 | 	mov	arg03, #1
257d4     1A 01 A0 FD | 	call	#__longjmp
257d8     01 7A 66 F6 | 	neg	result1, #1
257dc     CC 00 90 FD | 	jmp	#LR__3329
257e0                 | LR__3321
257e0     56 01 68 FC | 	wrlong	#0, local04
257e4     04 AC 06 F1 | 	add	local04, #4
257e8     56 01 68 FC | 	wrlong	#0, local04
257ec     04 AC 86 F1 | 	sub	local04, #4
257f0     57 AD 62 FC | 	wrlong	local04, local05
257f4                 | LR__3322
257f4     00 A6 0E F2 | 	cmp	local01, #0 wz
257f8     20 00 90 AD |  if_e	jmp	#LR__3323
257fc     56 A7 62 FC | 	wrlong	local01, local04
25800     56 7B 02 F6 | 	mov	result1, local04
25804     00 70 05 FF 
25808     00 7A 46 F5 | 	or	result1, ##182452224
2580c     1C AE 06 F1 | 	add	local05, #28
25810     57 7B 62 FC | 	wrlong	result1, local05
25814     1C AE 86 F1 | 	sub	local05, #28
25818     0C 00 90 FD | 	jmp	#LR__3324
2581c                 | LR__3323
2581c     1C AE 06 F1 | 	add	local05, #28
25820     57 01 68 FC | 	wrlong	#0, local05
25824     1C AE 86 F1 | 	sub	local05, #28
25828                 | LR__3324
25828     00 A8 0E F2 | 	cmp	local02, #0 wz
2582c     28 00 90 AD |  if_e	jmp	#LR__3325
25830     04 AC 06 F1 | 	add	local04, #4
25834     56 A9 62 FC | 	wrlong	local02, local04
25838     04 AC 86 F1 | 	sub	local04, #4
2583c     56 7B 02 F6 | 	mov	result1, local04
25840     00 78 05 FF 
25844     00 7A 46 F5 | 	or	result1, ##183500800
25848     20 AE 06 F1 | 	add	local05, #32
2584c     57 7B 62 FC | 	wrlong	result1, local05
25850     20 AE 86 F1 | 	sub	local05, #32
25854     0C 00 90 FD | 	jmp	#LR__3326
25858                 | LR__3325
25858     20 AE 06 F1 | 	add	local05, #32
2585c     57 01 68 FC | 	wrlong	#0, local05
25860     20 AE 86 F1 | 	sub	local05, #32
25864                 | LR__3326
25864     00 AA 0E F2 | 	cmp	local03, #0 wz
25868     24 00 90 AD |  if_e	jmp	#LR__3327
2586c     08 AC 06 F1 | 	add	local04, #8
25870     56 AB 62 FC | 	wrlong	local03, local04
25874     08 AC 86 F1 | 	sub	local04, #8
25878     00 80 05 FF 
2587c     00 AC 46 F5 | 	or	local04, ##184549376
25880     24 AE 06 F1 | 	add	local05, #36
25884     57 AD 62 FC | 	wrlong	local04, local05
25888     24 AE 86 F1 | 	sub	local05, #36
2588c     0C 00 90 FD | 	jmp	#LR__3328
25890                 | LR__3327
25890     24 AE 06 F1 | 	add	local05, #36
25894     57 01 68 FC | 	wrlong	#0, local05
25898     24 AE 86 F1 | 	sub	local05, #36
2589c                 | LR__3328
2589c     08 AE 06 F1 | 	add	local05, #8
258a0     40 00 80 FF 
258a4     57 07 68 FC | 	wrlong	##32771, local05
258a8     00 7A 06 F6 | 	mov	result1, #0
258ac                 | LR__3329
258ac     E7 F0 03 F6 | 	mov	ptra, fp
258b0     F2 00 A0 FD | 	call	#popregs_
258b4                 | __system___basic_open_ret
258b4     2D 00 64 FD | 	ret
258b8                 | 
258b8                 | __system___basic_open_string
258b8     04 CA 05 F6 | 	mov	COUNT_, #4
258bc     E8 00 A0 FD | 	call	#pushregs_
258c0     4A A7 02 F6 | 	mov	local01, arg02
258c4     4B A9 02 F6 | 	mov	local02, arg03
258c8     5C 42 B0 FD | 	call	#__system____getftab
258cc     3D AB 0A F6 | 	mov	local03, result1 wz
258d0     18 00 90 5D |  if_ne	jmp	#LR__3330
258d4     2E 93 02 F6 | 	mov	arg01, abortchain
258d8     0C 94 06 F6 | 	mov	arg02, #12
258dc     01 96 06 F6 | 	mov	arg03, #1
258e0     1A 01 A0 FD | 	call	#__longjmp
258e4     01 7A 66 F6 | 	neg	result1, #1
258e8     58 00 90 FD | 	jmp	#LR__3332
258ec                 | LR__3330
258ec     08 AA 06 F1 | 	add	local03, #8
258f0     55 99 0A FB | 	rdlong	arg04, local03 wz
258f4     08 AA 86 F1 | 	sub	local03, #8
258f8     55 93 02 56 |  if_ne	mov	arg01, local03
258fc     80 39 B0 5D |  if_ne	call	#__system___closeraw
25900     53 95 02 F6 | 	mov	arg02, local01
25904     54 97 02 F6 | 	mov	arg03, local02
25908     55 93 02 F6 | 	mov	arg01, local03
2590c     B6 99 06 F6 | 	mov	arg04, #438
25910     1C 36 B0 FD | 	call	#__system___openraw
25914     3D AD 02 F6 | 	mov	local04, result1
25918     00 AC 56 F2 | 	cmps	local04, #0 wc
2591c     20 00 90 3D |  if_ae	jmp	#LR__3331
25920     34 7B 02 F6 | 	mov	result1, ptr___system__dat__
25924     20 7A 06 F1 | 	add	result1, #32
25928     2E 93 02 F6 | 	mov	arg01, abortchain
2592c     3D 95 02 FB | 	rdlong	arg02, result1
25930     01 96 06 F6 | 	mov	arg03, #1
25934     1A 01 A0 FD | 	call	#__longjmp
25938     01 7A 66 F6 | 	neg	result1, #1
2593c     04 00 90 FD | 	jmp	#LR__3332
25940                 | LR__3331
25940     56 7B 02 F6 | 	mov	result1, local04
25944                 | LR__3332
25944     E7 F0 03 F6 | 	mov	ptra, fp
25948     F2 00 A0 FD | 	call	#popregs_
2594c                 | __system___basic_open_string_ret
2594c     2D 00 64 FD | 	ret
25950                 | 
25950                 | __system___find_free_file
25950     34 81 02 F6 | 	mov	_var01, ptr___system__dat__
25954     02 00 00 FF 
25958     2C 81 06 F1 | 	add	_var01, ##1324
2595c     00 82 06 F6 | 	mov	_var02, #0
25960     D7 12 48 FB | 	callpa	#(@LR__3341-@LR__3340)>>2,fcache_load_ptr_
25964                 | LR__3340
25964     0A 82 56 F2 | 	cmps	_var02, #10 wc
25968     1C 00 90 3D |  if_ae	jmp	#LR__3342
2596c     34 82 06 FD | 	qmul	_var02, #52
25970     18 7A 62 FD | 	getqx	result1
25974     40 7B 02 F1 | 	add	result1, _var01
25978     08 7A 06 F1 | 	add	result1, #8
2597c     3D 7B 0A FB | 	rdlong	result1, result1 wz
25980     01 82 06 51 |  if_ne	add	_var02, #1
25984     DC FF 9F 5D |  if_ne	jmp	#LR__3340
25988                 | LR__3341
25988                 | LR__3342
25988     0A 82 0E F2 | 	cmp	_var02, #10 wz
2598c     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
25990     34 17 68 AC |  if_e	wrlong	#11, ptr___system__dat__
25994     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
25998     01 7A 66 A6 |  if_e	neg	result1, #1
2599c     41 7B 02 56 |  if_ne	mov	result1, _var02
259a0                 | __system___find_free_file_ret
259a0     2D 00 64 FD | 	ret
259a4                 | 
259a4                 | __system___basic_print_char
259a4     03 CA 05 F6 | 	mov	COUNT_, #3
259a8     E8 00 A0 FD | 	call	#pushregs_
259ac     4A A7 02 F6 | 	mov	local01, arg02
259b0     20 49 B0 FD | 	call	#__system___gettxfunc
259b4     3D A9 0A F6 | 	mov	local02, result1 wz
259b8     00 7A 06 A6 |  if_e	mov	result1, #0
259bc     30 00 90 AD |  if_e	jmp	#LR__3350
259c0     54 AB 02 F6 | 	mov	local03, local02
259c4     13 A8 46 F7 | 	zerox	local02, #19
259c8     14 AA 46 F0 | 	shr	local03, #20
259cc     02 AA 66 F0 | 	shl	local03, #2
259d0     2D AB 02 F1 | 	add	local03, __methods__
259d4     55 AB 02 FB | 	rdlong	local03, local03
259d8     53 93 02 F6 | 	mov	arg01, local01
259dc     32 A7 02 F6 | 	mov	local01, objptr
259e0     54 65 02 F6 | 	mov	objptr, local02
259e4     2D AA 62 FD | 	call	local03
259e8     53 65 02 F6 | 	mov	objptr, local01
259ec     01 7A 06 F6 | 	mov	result1, #1
259f0                 | LR__3350
259f0     E7 F0 03 F6 | 	mov	ptra, fp
259f4     F2 00 A0 FD | 	call	#popregs_
259f8                 | __system___basic_print_char_ret
259f8     2D 00 64 FD | 	ret
259fc                 | 
259fc                 | __system___basic_print_string
259fc     03 CA 05 F6 | 	mov	COUNT_, #3
25a00     E8 00 A0 FD | 	call	#pushregs_
25a04     4A A7 02 F6 | 	mov	local01, arg02
25a08     4B A9 02 F6 | 	mov	local02, arg03
25a0c     C4 48 B0 FD | 	call	#__system___gettxfunc
25a10     3D AB 0A F6 | 	mov	local03, result1 wz
25a14     00 7A 06 A6 |  if_e	mov	result1, #0
25a18     18 00 90 AD |  if_e	jmp	#LR__3360
25a1c     00 A6 0E F2 | 	cmp	local01, #0 wz
25a20     00 7A 06 A6 |  if_e	mov	result1, #0
25a24     55 93 02 56 |  if_ne	mov	arg01, local03
25a28     54 95 02 56 |  if_ne	mov	arg02, local02
25a2c     53 97 02 56 |  if_ne	mov	arg03, local01
25a30     FC 01 B0 5D |  if_ne	call	#__system___fmtstr
25a34                 | LR__3360
25a34     E7 F0 03 F6 | 	mov	ptra, fp
25a38     F2 00 A0 FD | 	call	#popregs_
25a3c                 | __system___basic_print_string_ret
25a3c     2D 00 64 FD | 	ret
25a40                 | 
25a40                 | __system___basic_print_integer
25a40     04 CA 05 F6 | 	mov	COUNT_, #4
25a44     E8 00 A0 FD | 	call	#pushregs_
25a48     4A A7 02 F6 | 	mov	local01, arg02
25a4c     4B A9 02 F6 | 	mov	local02, arg03
25a50     4C AB 02 F6 | 	mov	local03, arg04
25a54     7C 48 B0 FD | 	call	#__system___gettxfunc
25a58     3D AD 0A F6 | 	mov	local04, result1 wz
25a5c     00 7A 06 A6 |  if_e	mov	result1, #0
25a60     56 93 02 56 |  if_ne	mov	arg01, local04
25a64     54 95 02 56 |  if_ne	mov	arg02, local02
25a68     53 97 02 56 |  if_ne	mov	arg03, local01
25a6c     55 99 02 56 |  if_ne	mov	arg04, local03
25a70     A8 02 B0 5D |  if_ne	call	#__system___fmtnum
25a74     E7 F0 03 F6 | 	mov	ptra, fp
25a78     F2 00 A0 FD | 	call	#popregs_
25a7c                 | __system___basic_print_integer_ret
25a7c     2D 00 64 FD | 	ret
25a80                 | 
25a80                 | __system___basic_print_unsigned
25a80     03 CA 05 F6 | 	mov	COUNT_, #3
25a84     E8 00 A0 FD | 	call	#pushregs_
25a88     4A A7 02 F6 | 	mov	local01, arg02
25a8c     4B A9 02 F6 | 	mov	local02, arg03
25a90     4C AB 02 F6 | 	mov	local03, arg04
25a94     3C 48 B0 FD | 	call	#__system___gettxfunc
25a98     3D 93 0A F6 | 	mov	arg01, result1 wz
25a9c     00 7A 06 A6 |  if_e	mov	result1, #0
25aa0     3A A8 26 54 |  if_ne	bith	local02, #58
25aa4     54 95 02 56 |  if_ne	mov	arg02, local02
25aa8     53 97 02 56 |  if_ne	mov	arg03, local01
25aac     55 99 02 56 |  if_ne	mov	arg04, local03
25ab0     68 02 B0 5D |  if_ne	call	#__system___fmtnum
25ab4     E7 F0 03 F6 | 	mov	ptra, fp
25ab8     F2 00 A0 FD | 	call	#popregs_
25abc                 | __system___basic_print_unsigned_ret
25abc     2D 00 64 FD | 	ret
25ac0                 | 
25ac0                 | __system___basic_get_char
25ac0     03 CA 05 F6 | 	mov	COUNT_, #3
25ac4     E8 00 A0 FD | 	call	#pushregs_
25ac8     4C 48 B0 FD | 	call	#__system___getrxfunc
25acc     3D A7 0A F6 | 	mov	local01, result1 wz
25ad0     01 7A 66 A6 |  if_e	neg	result1, #1
25ad4     28 00 90 AD |  if_e	jmp	#LR__3370
25ad8     53 A9 02 F6 | 	mov	local02, local01
25adc     13 A6 46 F7 | 	zerox	local01, #19
25ae0     14 A8 46 F0 | 	shr	local02, #20
25ae4     02 A8 66 F0 | 	shl	local02, #2
25ae8     2D A9 02 F1 | 	add	local02, __methods__
25aec     54 A9 02 FB | 	rdlong	local02, local02
25af0     32 AB 02 F6 | 	mov	local03, objptr
25af4     53 65 02 F6 | 	mov	objptr, local01
25af8     2D A8 62 FD | 	call	local02
25afc     55 65 02 F6 | 	mov	objptr, local03
25b00                 | LR__3370
25b00     E7 F0 03 F6 | 	mov	ptra, fp
25b04     F2 00 A0 FD | 	call	#popregs_
25b08                 | __system___basic_get_char_ret
25b08     2D 00 64 FD | 	ret
25b0c                 | 
25b0c                 | __system___basic_put
25b0c     04 CA 05 F6 | 	mov	COUNT_, #4
25b10     E8 00 A0 FD | 	call	#pushregs_
25b14     4D A7 02 F6 | 	mov	local01, arg05
25b18     53 99 02 FD | 	qmul	arg04, local01
25b1c     49 A9 02 F6 | 	mov	local02, arg01
25b20     4B AB 02 F6 | 	mov	local03, arg03
25b24     00 94 0E F2 | 	cmp	arg02, #0 wz
25b28     18 AC 62 FD | 	getqx	local04
25b2c     18 00 90 AD |  if_e	jmp	#LR__3380
25b30     01 94 86 F1 | 	sub	arg02, #1
25b34     4A 97 02 F6 | 	mov	arg03, arg02
25b38     1F 96 C6 F0 | 	sar	arg03, #31
25b3c     54 93 02 F6 | 	mov	arg01, local02
25b40     00 98 06 F6 | 	mov	arg04, #0
25b44     E4 3D B0 FD | 	call	#__system__lseek
25b48                 | LR__3380
25b48     55 95 02 F6 | 	mov	arg02, local03
25b4c     56 97 02 F6 | 	mov	arg03, local04
25b50     54 93 02 F6 | 	mov	arg01, local02
25b54     FC 3C B0 FD | 	call	#__system__write
25b58     3D AD 02 F6 | 	mov	local04, result1
25b5c     01 AC 56 F2 | 	cmps	local04, #1 wc
25b60     10 00 90 CD |  if_b	jmp	#LR__3381
25b64     56 0F 03 F6 | 	mov	muldiva_, local04
25b68     53 11 03 F6 | 	mov	muldivb_, local01
25b6c     FA 00 A0 FD | 	call	#divide_
25b70     88 AD 02 F6 | 	mov	local04, muldivb_
25b74                 | LR__3381
25b74     56 7B 02 F6 | 	mov	result1, local04
25b78     E7 F0 03 F6 | 	mov	ptra, fp
25b7c     F2 00 A0 FD | 	call	#popregs_
25b80                 | __system___basic_put_ret
25b80     2D 00 64 FD | 	ret
25b84                 | 
25b84                 | __system___basic_get
25b84     04 CA 05 F6 | 	mov	COUNT_, #4
25b88     E8 00 A0 FD | 	call	#pushregs_
25b8c     4D A7 02 F6 | 	mov	local01, arg05
25b90     53 99 02 FD | 	qmul	arg04, local01
25b94     49 A9 02 F6 | 	mov	local02, arg01
25b98     4B AB 02 F6 | 	mov	local03, arg03
25b9c     00 94 0E F2 | 	cmp	arg02, #0 wz
25ba0     18 AC 62 FD | 	getqx	local04
25ba4     18 00 90 AD |  if_e	jmp	#LR__3390
25ba8     01 94 86 F1 | 	sub	arg02, #1
25bac     4A 97 02 F6 | 	mov	arg03, arg02
25bb0     1F 96 C6 F0 | 	sar	arg03, #31
25bb4     54 93 02 F6 | 	mov	arg01, local02
25bb8     00 98 06 F6 | 	mov	arg04, #0
25bbc     6C 3D B0 FD | 	call	#__system__lseek
25bc0                 | LR__3390
25bc0     55 95 02 F6 | 	mov	arg02, local03
25bc4     56 97 02 F6 | 	mov	arg03, local04
25bc8     54 93 02 F6 | 	mov	arg01, local02
25bcc     CC 3C B0 FD | 	call	#__system__read
25bd0     3D AD 02 F6 | 	mov	local04, result1
25bd4     01 AC 56 F2 | 	cmps	local04, #1 wc
25bd8     10 00 90 CD |  if_b	jmp	#LR__3391
25bdc     56 0F 03 F6 | 	mov	muldiva_, local04
25be0     53 11 03 F6 | 	mov	muldivb_, local01
25be4     FA 00 A0 FD | 	call	#divide_
25be8     88 AD 02 F6 | 	mov	local04, muldivb_
25bec                 | LR__3391
25bec     56 7B 02 F6 | 	mov	result1, local04
25bf0     E7 F0 03 F6 | 	mov	ptra, fp
25bf4     F2 00 A0 FD | 	call	#popregs_
25bf8                 | __system___basic_get_ret
25bf8     2D 00 64 FD | 	ret
25bfc                 | 
25bfc                 | __system___fmtchar
25bfc     00 CA 05 F6 | 	mov	COUNT_, #0
25c00     E8 00 A0 FD | 	call	#pushregs_
25c04     10 F0 07 F1 | 	add	ptra, #16
25c08     0C CE 05 F1 | 	add	fp, #12
25c0c     E7 96 62 FC | 	wrlong	arg03, fp
25c10     4B 97 E2 F8 | 	getbyte	arg03, arg03, #0
25c14     E7 96 62 FC | 	wrlong	arg03, fp
25c18     E7 96 02 F6 | 	mov	arg03, fp
25c1c     0C CE 85 F1 | 	sub	fp, #12
25c20     0C 00 B0 FD | 	call	#__system___fmtstr
25c24     E7 F0 03 F6 | 	mov	ptra, fp
25c28     F2 00 A0 FD | 	call	#popregs_
25c2c                 | __system___fmtchar_ret
25c2c     2D 00 64 FD | 	ret
25c30                 | 
25c30                 | __system___fmtstr
25c30     09 CA 05 F6 | 	mov	COUNT_, #9
25c34     E8 00 A0 FD | 	call	#pushregs_
25c38     49 A7 02 F6 | 	mov	local01, arg01
25c3c     4A A9 02 F6 | 	mov	local02, arg02
25c40     4B AB 02 F6 | 	mov	local03, arg03
25c44     54 99 E2 F8 | 	getbyte	arg04, local02, #0
25c48     55 93 02 F6 | 	mov	arg01, local03
25c4c     49 AD 02 F6 | 	mov	local04, arg01
25c50     D7 06 48 FB | 	callpa	#(@LR__3401-@LR__3400)>>2,fcache_load_ptr_
25c54                 | LR__3400
25c54     56 7B CA FA | 	rdbyte	result1, local04 wz
25c58     01 AC 06 51 |  if_ne	add	local04, #1
25c5c     F4 FF 9F 5D |  if_ne	jmp	#LR__3400
25c60                 | LR__3401
25c60     49 AD 82 F1 | 	sub	local04, arg01
25c64     00 98 0E F2 | 	cmp	arg04, #0 wz
25c68     4C AD 7A 53 |  if_ne	fles	local04, arg04 wcz
25c6c     54 95 02 F6 | 	mov	arg02, local02
25c70     56 97 02 F6 | 	mov	arg03, local04
25c74     53 93 02 F6 | 	mov	arg01, local01
25c78     02 98 06 F6 | 	mov	arg04, #2
25c7c     AC 42 B0 FD | 	call	#__system___fmtpad
25c80     3D AF 02 F6 | 	mov	local05, result1
25c84     00 AE 56 F2 | 	cmps	local05, #0 wc
25c88     57 7B 02 C6 |  if_b	mov	result1, local05
25c8c     80 00 90 CD |  if_b	jmp	#LR__3404
25c90     01 AC 56 F2 | 	cmps	local04, #1 wc
25c94     50 00 90 CD |  if_b	jmp	#LR__3403
25c98     56 B1 02 F6 | 	mov	local06, local04
25c9c                 | LR__3402
25c9c     53 B3 02 F6 | 	mov	local07, local01
25ca0     53 B5 02 F6 | 	mov	local08, local01
25ca4     13 B2 46 F7 | 	zerox	local07, #19
25ca8     14 B4 46 F0 | 	shr	local08, #20
25cac     02 B4 66 F0 | 	shl	local08, #2
25cb0     2D B5 02 F1 | 	add	local08, __methods__
25cb4     5A B5 02 FB | 	rdlong	local08, local08
25cb8     55 93 C2 FA | 	rdbyte	arg01, local03
25cbc     32 B7 02 F6 | 	mov	local09, objptr
25cc0     59 65 02 F6 | 	mov	objptr, local07
25cc4     01 AA 06 F1 | 	add	local03, #1
25cc8     2D B4 62 FD | 	call	local08
25ccc     5B 65 02 F6 | 	mov	objptr, local09
25cd0     3D B7 02 F6 | 	mov	local09, result1
25cd4     00 B6 56 F2 | 	cmps	local09, #0 wc
25cd8     5B 7B 02 C6 |  if_b	mov	result1, local09
25cdc     30 00 90 CD |  if_b	jmp	#LR__3404
25ce0     5B AF 02 F1 | 	add	local05, local09
25ce4     ED B1 6E FB | 	djnz	local06, #LR__3402
25ce8                 | LR__3403
25ce8     54 95 02 F6 | 	mov	arg02, local02
25cec     56 97 02 F6 | 	mov	arg03, local04
25cf0     53 93 02 F6 | 	mov	arg01, local01
25cf4     01 98 06 F6 | 	mov	arg04, #1
25cf8     30 42 B0 FD | 	call	#__system___fmtpad
25cfc     3D B7 02 F6 | 	mov	local09, result1
25d00     00 B6 56 F2 | 	cmps	local09, #0 wc
25d04     5B 7B 02 C6 |  if_b	mov	result1, local09
25d08     5B AF 02 31 |  if_ae	add	local05, local09
25d0c     57 7B 02 36 |  if_ae	mov	result1, local05
25d10                 | LR__3404
25d10     E7 F0 03 F6 | 	mov	ptra, fp
25d14     F2 00 A0 FD | 	call	#popregs_
25d18                 | __system___fmtstr_ret
25d18     2D 00 64 FD | 	ret
25d1c                 | 
25d1c                 | __system___fmtnum
25d1c     0B CA 05 F6 | 	mov	COUNT_, #11
25d20     E8 00 A0 FD | 	call	#pushregs_
25d24     49 A7 02 F6 | 	mov	local01, arg01
25d28     4A A9 02 F6 | 	mov	local02, arg02
25d2c     4B AB 02 F6 | 	mov	local03, arg03
25d30     4C AD 02 F6 | 	mov	local04, arg04
25d34     F8 AF 02 F6 | 	mov	local05, ptra
25d38     57 B1 02 F6 | 	mov	local06, local05
25d3c     00 B2 06 F6 | 	mov	local07, #0
25d40     54 B5 02 F6 | 	mov	local08, local02
25d44     10 B4 46 F0 | 	shr	local08, #16
25d48     3F B4 06 F5 | 	and	local08, #63
25d4c     54 B7 E2 F8 | 	getbyte	local09, local02, #0
25d50     54 B9 02 F6 | 	mov	local10, local02
25d54     1A B8 46 F0 | 	shr	local10, #26
25d58     03 B8 06 F5 | 	and	local10, #3
25d5c     5C BB 02 F6 | 	mov	local11, local10
25d60     01 B4 56 F2 | 	cmps	local08, #1 wc
25d64     44 F0 07 F1 | 	add	ptra, #68
25d68     01 B4 86 31 |  if_ae	sub	local08, #1
25d6c     41 B6 56 F2 | 	cmps	local09, #65 wc
25d70     00 B6 0E C2 |  if_b	cmp	local09, #0 wz
25d74     40 B6 06 B6 |  if_nc_or_z	mov	local09, #64
25d78     03 BA 0E F2 | 	cmp	local11, #3 wz
25d7c     00 BA 06 A6 |  if_e	mov	local11, #0
25d80     00 AA 56 52 |  if_ne	cmps	local03, #0 wc
25d84     04 BA 06 46 |  if_c_and_nz	mov	local11, #4
25d88     55 AB 62 46 |  if_c_and_nz	neg	local03, local03
25d8c     00 BA 0E F2 | 	cmp	local11, #0 wz
25d90     4C 00 90 AD |  if_e	jmp	#LR__3413
25d94     01 B2 06 F6 | 	mov	local07, #1
25d98     5B B5 0A F2 | 	cmp	local08, local09 wz
25d9c     18 00 90 5D |  if_ne	jmp	#LR__3411
25da0     05 B4 6E FB | 	djnz	local08, #LR__3410
25da4     53 93 02 F6 | 	mov	arg01, local01
25da8     54 95 02 F6 | 	mov	arg02, local02
25dac     23 96 06 F6 | 	mov	arg03, #35
25db0     48 FE BF FD | 	call	#__system___fmtchar
25db4     8C 00 90 FD | 	jmp	#LR__3417
25db8                 | LR__3410
25db8                 | LR__3411
25db8     02 BA 0E F2 | 	cmp	local11, #2 wz
25dbc     58 B9 02 A6 |  if_e	mov	local10, local06
25dc0     01 B0 06 A1 |  if_e	add	local06, #1
25dc4     5C 41 48 AC |  if_e	wrbyte	#32, local10
25dc8     14 00 90 AD |  if_e	jmp	#LR__3412
25dcc     04 BA 0E F2 | 	cmp	local11, #4 wz
25dd0     58 5B 48 AC |  if_e	wrbyte	#45, local06
25dd4     01 B0 06 A1 |  if_e	add	local06, #1
25dd8     58 57 48 5C |  if_ne	wrbyte	#43, local06
25ddc     01 B0 06 51 |  if_ne	add	local06, #1
25de0                 | LR__3412
25de0                 | LR__3413
25de0     59 B9 02 F6 | 	mov	local10, local07
25de4     58 93 02 F6 | 	mov	arg01, local06
25de8     55 95 02 F6 | 	mov	arg02, local03
25dec     56 97 02 F6 | 	mov	arg03, local04
25df0     5A 99 02 F6 | 	mov	arg04, local08
25df4     00 9A 06 F6 | 	mov	arg05, #0
25df8     1D A8 2E F4 | 	testbn	local02, #29 wz
25dfc     01 9A 06 56 |  if_ne	mov	arg05, #1
25e00     F0 41 B0 FD | 	call	#__system___uitoa
25e04     3D B9 02 F1 | 	add	local10, result1
25e08     5B B9 5A F2 | 	cmps	local10, local09 wcz
25e0c     24 00 90 ED |  if_be	jmp	#LR__3416
25e10     D7 0E 48 FB | 	callpa	#(@LR__3415-@LR__3414)>>2,fcache_load_ptr_
25e14                 | LR__3414
25e14     5B B9 02 F6 | 	mov	local10, local09
25e18     01 B8 56 F2 | 	cmps	local10, #1 wc
25e1c     01 B6 86 F1 | 	sub	local09, #1
25e20     58 B9 02 36 |  if_ae	mov	local10, local06
25e24     01 B0 06 31 |  if_ae	add	local06, #1
25e28     5C 47 48 3C |  if_ae	wrbyte	#35, local10
25e2c     E4 FF 9F 3D |  if_ae	jmp	#LR__3414
25e30                 | LR__3415
25e30     58 01 48 FC | 	wrbyte	#0, local06
25e34                 | LR__3416
25e34     53 93 02 F6 | 	mov	arg01, local01
25e38     54 95 02 F6 | 	mov	arg02, local02
25e3c     57 97 02 F6 | 	mov	arg03, local05
25e40     EC FD BF FD | 	call	#__system___fmtstr
25e44                 | LR__3417
25e44     E7 F0 03 F6 | 	mov	ptra, fp
25e48     F2 00 A0 FD | 	call	#popregs_
25e4c                 | __system___fmtnum_ret
25e4c     2D 00 64 FD | 	ret
25e50                 | 
25e50                 | __system___fmtfloat
25e50     29 CA 05 F6 | 	mov	COUNT_, #41
25e54     E8 00 A0 FD | 	call	#pushregs_
25e58     24 F1 07 F1 | 	add	ptra, #292
25e5c     49 A7 02 F6 | 	mov	local01, arg01
25e60     4A A9 02 F6 | 	mov	local02, arg02
25e64     4B AB 02 F6 | 	mov	local03, arg03
25e68     4C AD 02 F6 | 	mov	local04, arg04
25e6c     0A AE 06 F6 | 	mov	local05, #10
25e70     00 B0 06 F6 | 	mov	local06, #0
25e74     00 B2 06 F6 | 	mov	local07, #0
25e78     02 B4 06 F6 | 	mov	local08, #2
25e7c     00 B6 06 F6 | 	mov	local09, #0
25e80     00 B8 06 F6 | 	mov	local10, #0
25e84     00 BA 06 F6 | 	mov	local11, #0
25e88     E7 BC 02 F6 | 	mov	local12, fp
25e8c     C8 BC 06 F1 | 	add	local12, #200
25e90     5E BF 02 F6 | 	mov	local13, local12
25e94     54 C1 02 F6 | 	mov	local14, local02
25e98     10 C0 46 F0 | 	shr	local14, #16
25e9c     3F C0 0E F5 | 	and	local14, #63 wz
25ea0     54 C3 02 F6 | 	mov	local15, local02
25ea4     1C C2 46 F0 | 	shr	local15, #28
25ea8     01 C2 06 F5 | 	and	local15, #1
25eac     18 00 90 5D |  if_ne	jmp	#LR__3420
25eb0     61 AC 0E F2 | 	cmp	local04, #97 wz
25eb4     0D C0 06 A6 |  if_e	mov	local14, #13
25eb8     01 B2 06 A6 |  if_e	mov	local07, #1
25ebc     0C 00 90 AD |  if_e	jmp	#LR__3421
25ec0     06 C0 06 F6 | 	mov	local14, #6
25ec4     04 00 90 FD | 	jmp	#LR__3421
25ec8                 | LR__3420
25ec8     01 C0 86 F1 | 	sub	local14, #1
25ecc                 | LR__3421
25ecc     54 C5 02 F6 | 	mov	local16, local02
25ed0     16 C4 46 F0 | 	shr	local16, #22
25ed4     03 C4 06 F5 | 	and	local16, #3
25ed8     54 C7 02 F6 | 	mov	local17, local02
25edc     1D C6 46 F0 | 	shr	local17, #29
25ee0     01 C6 06 F5 | 	and	local17, #1
25ee4     54 C9 EA F8 | 	getbyte	local18, local02, #1
25ee8     54 CB E2 F8 | 	getbyte	local19, local02, #0
25eec     65 AC 0E F2 | 	cmp	local04, #101 wz
25ef0     6E CC 62 FD | 	wrz	local20
25ef4     66 CF 02 F6 | 	mov	local21, local20
25ef8     00 C6 0E F2 | 	cmp	local17, #0 wz
25efc     45 CC 06 56 |  if_ne	mov	local20, #69
25f00     65 CC 06 A6 |  if_e	mov	local20, #101
25f04     66 D1 02 F6 | 	mov	local22, local20
25f08     61 AC 0E F2 | 	cmp	local04, #97 wz
25f0c     2C 00 90 5D |  if_ne	jmp	#LR__3422
25f10     01 CE 06 F6 | 	mov	local21, #1
25f14     00 C6 0E F2 | 	cmp	local17, #0 wz
25f18     50 CC 06 56 |  if_ne	mov	local20, #80
25f1c     70 CC 06 A6 |  if_e	mov	local20, #112
25f20     66 D1 02 F6 | 	mov	local22, local20
25f24     02 AE 06 F6 | 	mov	local05, #2
25f28     01 B4 06 F6 | 	mov	local08, #1
25f2c     00 C6 0E F2 | 	cmp	local17, #0 wz
25f30     58 CC 06 56 |  if_ne	mov	local20, #88
25f34     78 CC 06 A6 |  if_e	mov	local20, #120
25f38     66 B7 02 F6 | 	mov	local09, local20
25f3c                 | LR__3422
25f3c     23 AC 0E F2 | 	cmp	local04, #35 wz
25f40     14 00 90 5D |  if_ne	jmp	#LR__3423
25f44     01 B8 06 F6 | 	mov	local10, #1
25f48     00 C2 0E F2 | 	cmp	local15, #0 wz
25f4c     66 AC 06 56 |  if_ne	mov	local04, #102
25f50     00 C2 06 56 |  if_ne	mov	local15, #0
25f54     01 C2 06 A6 |  if_e	mov	local15, #1
25f58                 | LR__3423
25f58     54 D3 02 F6 | 	mov	local23, local02
25f5c     1A D2 46 F0 | 	shr	local23, #26
25f60     03 D2 06 F5 | 	and	local23, #3
25f64     55 7B 02 F6 | 	mov	result1, local03
25f68     1F 7A 4E F0 | 	shr	result1, #31 wz
25f6c     2D B0 06 56 |  if_ne	mov	local06, #45
25f70     1F AA E6 54 |  if_ne	bitnot	local03, #31
25f74     14 00 90 5D |  if_ne	jmp	#LR__3425
25f78     01 D2 0E F2 | 	cmp	local23, #1 wz
25f7c     2B B0 06 A6 |  if_e	mov	local06, #43
25f80     08 00 90 AD |  if_e	jmp	#LR__3424
25f84     02 D2 0E F2 | 	cmp	local23, #2 wz
25f88     20 B0 06 A6 |  if_e	mov	local06, #32
25f8c                 | LR__3424
25f8c                 | LR__3425
25f8c     54 D5 02 F6 | 	mov	local24, local02
25f90     18 D4 46 F0 | 	shr	local24, #24
25f94     03 D4 06 F5 | 	and	local24, #3
25f98     00 CC 06 F6 | 	mov	local20, #0
25f9c     00 B0 0E F2 | 	cmp	local06, #0 wz
25fa0     0A AE 0E A2 |  if_e	cmp	local05, #10 wz
25fa4     01 CC 06 56 |  if_ne	mov	local20, #1
25fa8     66 D7 0A F6 | 	mov	local25, local20 wz
25fac     60 00 90 AD |  if_e	jmp	#LR__3427
25fb0     02 D4 0E F2 | 	cmp	local24, #2 wz
25fb4     58 00 90 5D |  if_ne	jmp	#LR__3427
25fb8     02 C4 0E F2 | 	cmp	local16, #2 wz
25fbc     50 00 90 AD |  if_e	jmp	#LR__3427
25fc0     58 95 02 F6 | 	mov	arg02, local06
25fc4     5B D9 02 F6 | 	mov	local26, local09
25fc8     5E 93 02 F6 | 	mov	arg01, local12
25fcc     6C 97 02 F6 | 	mov	arg03, local26
25fd0     88 42 B0 FD | 	call	#__system__emitsign_0584
25fd4     3D DB 02 F6 | 	mov	local27, result1
25fd8     00 DA 56 F2 | 	cmps	local27, #0 wc
25fdc     6D 7B 02 C6 |  if_b	mov	result1, local27
25fe0     C0 05 90 CD |  if_b	jmp	#LR__3470
25fe4     6D DD 02 F6 | 	mov	local28, local27
25fe8     6D BD 02 F1 | 	add	local12, local27
25fec     00 C8 0E F2 | 	cmp	local18, #0 wz
25ff0     18 00 90 AD |  if_e	jmp	#LR__3426
25ff4     6D C9 82 F1 | 	sub	local18, local27
25ff8     00 C8 56 F3 | 	fges	local18, #0 wc
25ffc     E8 A8 06 F4 | 	bitl	local02, #232
26000     64 DD 02 F6 | 	mov	local28, local18
26004     08 DC 66 F0 | 	shl	local28, #8
26008     6E A9 42 F5 | 	or	local02, local28
2600c                 | LR__3426
2600c     00 D6 06 F6 | 	mov	local25, #0
26010                 | LR__3427
26010     55 93 02 F6 | 	mov	arg01, local03
26014     F4 1C B0 FD | 	call	#__system____builtin_ilogb
26018     FF FF 3F FF 
2601c     FF 7B 0E F2 | 	cmp	result1, ##2147483647 wz
26020     24 00 90 5D |  if_ne	jmp	#LR__3428
26024     00 B0 0E F2 | 	cmp	local06, #0 wz
26028     5E CD 02 56 |  if_ne	mov	local20, local12
2602c     01 BC 06 51 |  if_ne	add	local12, #1
26030     66 B1 42 5C |  if_ne	wrbyte	local06, local20
26034     93 01 00 FF 
26038     E2 95 06 F6 | 	mov	arg02, ##@LR__5471
2603c     5E 93 02 F6 | 	mov	arg01, local12
26040     78 EC BF FD | 	call	#__system____builtin_strcpy
26044     AC 04 90 FD | 	jmp	#LR__3460
26048                 | LR__3428
26048     55 93 02 F6 | 	mov	arg01, local03
2604c     BC 1C B0 FD | 	call	#__system____builtin_ilogb
26050     3D CD 02 F6 | 	mov	local20, result1
26054     00 00 40 FF 
26058     00 CC 0E F2 | 	cmp	local20, ##-2147483648 wz
2605c     24 00 90 5D |  if_ne	jmp	#LR__3429
26060     00 B0 0E F2 | 	cmp	local06, #0 wz
26064     5E CD 02 56 |  if_ne	mov	local20, local12
26068     01 BC 06 51 |  if_ne	add	local12, #1
2606c     66 B1 42 5C |  if_ne	wrbyte	local06, local20
26070     5E 93 02 F6 | 	mov	arg01, local12
26074     93 01 00 FF 
26078     E6 95 06 F6 | 	mov	arg02, ##@LR__5472
2607c     3C EC BF FD | 	call	#__system____builtin_strcpy
26080     70 04 90 FD | 	jmp	#LR__3460
26084                 | LR__3429
26084     67 AC 0E F2 | 	cmp	local04, #103 wz
26088     23 AC 0E 52 |  if_ne	cmp	local04, #35 wz
2608c     0C 01 90 5D |  if_ne	jmp	#LR__3434
26090     14 CE 05 F1 | 	add	fp, #20
26094     E7 94 02 F6 | 	mov	arg02, fp
26098     0C CE 05 F1 | 	add	fp, #12
2609c     E7 96 02 F6 | 	mov	arg03, fp
260a0     20 CE 85 F1 | 	sub	fp, #32
260a4     60 99 02 F6 | 	mov	arg04, local14
260a8     57 9B 02 F6 | 	mov	arg05, local05
260ac     55 93 02 F6 | 	mov	arg01, local03
260b0     B4 3F B0 FD | 	call	#__system__disassemble_0582
260b4     23 AC 0E F2 | 	cmp	local04, #35 wz
260b8     6C 00 90 5D |  if_ne	jmp	#LR__3431
260bc     20 CE 05 F1 | 	add	fp, #32
260c0     E7 CC 02 FB | 	rdlong	local20, fp
260c4     20 CE 85 F1 | 	sub	fp, #32
260c8     60 CD 5A F2 | 	cmps	local20, local14 wcz
260cc     01 CE 06 16 |  if_a	mov	local21, #1
260d0     24 01 90 1D |  if_a	jmp	#LR__3437
260d4     20 CE 05 F1 | 	add	fp, #32
260d8     E7 CC 02 FB | 	rdlong	local20, fp
260dc     20 CE 85 F1 | 	sub	fp, #32
260e0     00 CC 56 F2 | 	cmps	local20, #0 wc
260e4     1C 00 90 3D |  if_ae	jmp	#LR__3430
260e8     60 CD 62 F6 | 	neg	local20, local14
260ec     20 CE 05 F1 | 	add	fp, #32
260f0     E7 DC 02 FB | 	rdlong	local28, fp
260f4     20 CE 85 F1 | 	sub	fp, #32
260f8     66 DD 5A F2 | 	cmps	local28, local20 wcz
260fc     01 CE 06 E6 |  if_be	mov	local21, #1
26100     F4 00 90 FD | 	jmp	#LR__3437
26104                 | LR__3430
26104     20 CE 05 F1 | 	add	fp, #32
26108     E7 CC 02 FB | 	rdlong	local20, fp
2610c     20 CE 85 F1 | 	sub	fp, #32
26110     01 CC 56 F2 | 	cmps	local20, #1 wc
26114     20 CE 05 31 |  if_ae	add	fp, #32
26118     E7 DC 02 3B |  if_ae	rdlong	local28, fp
2611c     20 CE 85 31 |  if_ae	sub	fp, #32
26120     6E C1 82 31 |  if_ae	sub	local14, local28
26124     D0 00 90 FD | 	jmp	#LR__3437
26128                 | LR__3431
26128     00 B2 06 F6 | 	mov	local07, #0
2612c     1C A8 2E F4 | 	testbn	local02, #28 wz
26130     01 B2 06 A6 |  if_e	mov	local07, #1
26134     20 CE 05 F1 | 	add	fp, #32
26138     E7 CC 02 FB | 	rdlong	local20, fp
2613c     20 CE 85 F1 | 	sub	fp, #32
26140     60 CD 52 F2 | 	cmps	local20, local14 wc
26144     18 00 90 3D |  if_ae	jmp	#LR__3432
26148     20 CE 05 F1 | 	add	fp, #32
2614c     E7 D8 02 FB | 	rdlong	local26, fp
26150     20 CE 85 F1 | 	sub	fp, #32
26154     FF FF 7F FF 
26158     FC D9 56 F2 | 	cmps	local26, ##-4 wc
2615c     08 00 90 3D |  if_ae	jmp	#LR__3433
26160                 | LR__3432
26160     01 CE 06 F6 | 	mov	local21, #1
26164     90 00 90 FD | 	jmp	#LR__3437
26168                 | LR__3433
26168     20 CE 05 F1 | 	add	fp, #32
2616c     E7 DC 02 FB | 	rdlong	local28, fp
26170     6E C1 82 F1 | 	sub	local14, local28
26174     0C CE 85 F1 | 	sub	fp, #12
26178     E7 94 02 F6 | 	mov	arg02, fp
2617c     0C CE 05 F1 | 	add	fp, #12
26180     E7 96 02 F6 | 	mov	arg03, fp
26184     20 CE 85 F1 | 	sub	fp, #32
26188     60 99 62 F6 | 	neg	arg04, local14
2618c     55 93 02 F6 | 	mov	arg01, local03
26190     57 9B 02 F6 | 	mov	arg05, local05
26194     D0 3E B0 FD | 	call	#__system__disassemble_0582
26198     5C 00 90 FD | 	jmp	#LR__3437
2619c                 | LR__3434
2619c     00 CE 0E F2 | 	cmp	local21, #0 wz
261a0     28 00 90 AD |  if_e	jmp	#LR__3435
261a4     14 CE 05 F1 | 	add	fp, #20
261a8     E7 94 02 F6 | 	mov	arg02, fp
261ac     0C CE 05 F1 | 	add	fp, #12
261b0     E7 96 02 F6 | 	mov	arg03, fp
261b4     20 CE 85 F1 | 	sub	fp, #32
261b8     55 93 02 F6 | 	mov	arg01, local03
261bc     60 99 02 F6 | 	mov	arg04, local14
261c0     57 9B 02 F6 | 	mov	arg05, local05
261c4     A0 3E B0 FD | 	call	#__system__disassemble_0582
261c8     2C 00 90 FD | 	jmp	#LR__3436
261cc                 | LR__3435
261cc     14 CE 05 F1 | 	add	fp, #20
261d0     E7 94 02 F6 | 	mov	arg02, fp
261d4     0C CE 05 F1 | 	add	fp, #12
261d8     E7 96 02 F6 | 	mov	arg03, fp
261dc     20 CE 85 F1 | 	sub	fp, #32
261e0     60 DD 02 F6 | 	mov	local28, local14
261e4     01 DC 06 F1 | 	add	local28, #1
261e8     6E 99 62 F6 | 	neg	arg04, local28
261ec     55 93 02 F6 | 	mov	arg01, local03
261f0     57 9B 02 F6 | 	mov	arg05, local05
261f4     70 3E B0 FD | 	call	#__system__disassemble_0582
261f8                 | LR__3436
261f8                 | LR__3437
261f8     02 AE 0E F2 | 	cmp	local05, #2 wz
261fc     44 00 90 5D |  if_ne	jmp	#LR__3440
26200     10 AE 06 F6 | 	mov	local05, #16
26204                 | LR__3438
26204     14 CE 05 F1 | 	add	fp, #20
26208     E7 CC 0A FB | 	rdlong	local20, fp wz
2620c     14 CE 85 F1 | 	sub	fp, #20
26210     30 00 90 AD |  if_e	jmp	#LR__3439
26214     14 CE 05 F1 | 	add	fp, #20
26218     E7 D8 02 FB | 	rdlong	local26, fp
2621c     14 CE 85 F1 | 	sub	fp, #20
26220     00 80 00 FF 
26224     00 D8 16 F2 | 	cmp	local26, ##16777216 wc
26228     18 00 90 3D |  if_ae	jmp	#LR__3439
2622c     14 CE 05 F1 | 	add	fp, #20
26230     E7 CC 02 FB | 	rdlong	local20, fp
26234     01 CC 66 F0 | 	shl	local20, #1
26238     E7 CC 62 FC | 	wrlong	local20, fp
2623c     14 CE 85 F1 | 	sub	fp, #20
26240     C0 FF 9F FD | 	jmp	#LR__3438
26244                 | LR__3439
26244                 | LR__3440
26244     70 CE 05 F1 | 	add	fp, #112
26248     E7 92 02 F6 | 	mov	arg01, fp
2624c     5C CE 85 F1 | 	sub	fp, #92
26250     E7 94 02 FB | 	rdlong	arg02, fp
26254     14 CE 85 F1 | 	sub	fp, #20
26258     57 97 02 F6 | 	mov	arg03, local05
2625c     01 98 06 F6 | 	mov	arg04, #1
26260     63 9B 02 F6 | 	mov	arg05, local17
26264     8C 3D B0 FD | 	call	#__system___uitoa
26268     3D DF 02 F6 | 	mov	local29, result1
2626c     20 CE 05 F1 | 	add	fp, #32
26270     E7 CC 02 FB | 	rdlong	local20, fp
26274     20 CE 85 F1 | 	sub	fp, #32
26278     00 CC 56 F2 | 	cmps	local20, #0 wc
2627c     44 00 90 3D |  if_ae	jmp	#LR__3441
26280     2D BA 06 F6 | 	mov	local11, #45
26284     B0 CE 05 F1 | 	add	fp, #176
26288     E7 92 02 F6 | 	mov	arg01, fp
2628c     90 CE 85 F1 | 	sub	fp, #144
26290     E7 D8 02 FB | 	rdlong	local26, fp
26294     20 CE 85 F1 | 	sub	fp, #32
26298     6C DD 62 F6 | 	neg	local28, local26
2629c     0A D8 06 F6 | 	mov	local26, #10
262a0     5A E1 02 F6 | 	mov	local30, local08
262a4     63 E3 02 F6 | 	mov	local31, local17
262a8     6E 95 02 F6 | 	mov	arg02, local28
262ac     0A 96 06 F6 | 	mov	arg03, #10
262b0     70 99 02 F6 | 	mov	arg04, local30
262b4     71 9B 02 F6 | 	mov	arg05, local31
262b8     38 3D B0 FD | 	call	#__system___uitoa
262bc     3D E5 02 F6 | 	mov	local32, result1
262c0     3C 00 90 FD | 	jmp	#LR__3442
262c4                 | LR__3441
262c4     2B BA 06 F6 | 	mov	local11, #43
262c8     B0 CE 05 F1 | 	add	fp, #176
262cc     E7 92 02 F6 | 	mov	arg01, fp
262d0     90 CE 85 F1 | 	sub	fp, #144
262d4     E7 DC 02 FB | 	rdlong	local28, fp
262d8     20 CE 85 F1 | 	sub	fp, #32
262dc     0A D8 06 F6 | 	mov	local26, #10
262e0     5A E1 02 F6 | 	mov	local30, local08
262e4     63 E3 02 F6 | 	mov	local31, local17
262e8     6E 95 02 F6 | 	mov	arg02, local28
262ec     0A 96 06 F6 | 	mov	arg03, #10
262f0     70 99 02 F6 | 	mov	arg04, local30
262f4     71 9B 02 F6 | 	mov	arg05, local31
262f8     F8 3C B0 FD | 	call	#__system___uitoa
262fc     3D E5 02 F6 | 	mov	local32, result1
26300                 | LR__3442
26300     00 CE 0E F2 | 	cmp	local21, #0 wz
26304     00 E6 06 56 |  if_ne	mov	local33, #0
26308     00 E8 06 56 |  if_ne	mov	local34, #0
2630c     60 EB 02 56 |  if_ne	mov	local35, local14
26310     01 EA 06 51 |  if_ne	add	local35, #1
26314     54 00 90 5D |  if_ne	jmp	#LR__3445
26318     20 CE 05 F1 | 	add	fp, #32
2631c     E7 DC 02 FB | 	rdlong	local28, fp
26320     20 CE 85 F1 | 	sub	fp, #32
26324     00 DC 56 F2 | 	cmps	local28, #0 wc
26328     24 00 90 3D |  if_ae	jmp	#LR__3443
2632c     20 CE 05 F1 | 	add	fp, #32
26330     E7 DC 02 FB | 	rdlong	local28, fp
26334     6E E7 02 F6 | 	mov	local33, local28
26338     73 E9 02 F6 | 	mov	local34, local33
2633c     20 CE 85 F1 | 	sub	fp, #32
26340     6E EB 02 F6 | 	mov	local35, local28
26344     60 EB 02 F1 | 	add	local35, local14
26348     01 EA 06 F1 | 	add	local35, #1
2634c     1C 00 90 FD | 	jmp	#LR__3444
26350                 | LR__3443
26350     00 E8 06 F6 | 	mov	local34, #0
26354     20 CE 05 F1 | 	add	fp, #32
26358     E7 E6 02 FB | 	rdlong	local33, fp
2635c     20 CE 85 F1 | 	sub	fp, #32
26360     73 EB 02 F6 | 	mov	local35, local33
26364     60 EB 02 F1 | 	add	local35, local14
26368     01 EA 06 F1 | 	add	local35, #1
2636c                 | LR__3444
2636c                 | LR__3445
2636c     75 CD 02 F6 | 	mov	local20, local35
26370     74 CD 82 F1 | 	sub	local20, local34
26374     01 CC 06 F1 | 	add	local20, #1
26378     66 ED 02 F6 | 	mov	local36, local20
2637c     00 B0 0E F2 | 	cmp	local06, #0 wz
26380     76 CD 02 56 |  if_ne	mov	local20, local36
26384     76 DD 02 56 |  if_ne	mov	local28, local36
26388     01 DC 06 51 |  if_ne	add	local28, #1
2638c     6E ED 02 56 |  if_ne	mov	local36, local28
26390     10 AE 0E F2 | 	cmp	local05, #16 wz
26394     02 EC 06 A1 |  if_e	add	local36, #2
26398     00 CE 0E F2 | 	cmp	local21, #0 wz
2639c     02 DC 06 56 |  if_ne	mov	local28, #2
263a0     72 DD 02 51 |  if_ne	add	local28, local32
263a4     6E ED 02 51 |  if_ne	add	local36, local28
263a8     41 EC 56 F2 | 	cmps	local36, #65 wc
263ac     01 7A 66 36 |  if_ae	neg	result1, #1
263b0     F0 01 90 3D |  if_ae	jmp	#LR__3470
263b4     00 D6 0E F2 | 	cmp	local25, #0 wz
263b8     28 00 90 AD |  if_e	jmp	#LR__3446
263bc     58 95 02 F6 | 	mov	arg02, local06
263c0     5E 93 02 F6 | 	mov	arg01, local12
263c4     5B 97 02 F6 | 	mov	arg03, local09
263c8     90 3E B0 FD | 	call	#__system__emitsign_0584
263cc     3D EF 02 F6 | 	mov	local37, result1
263d0     00 EE 56 F2 | 	cmps	local37, #0 wc
263d4     77 7B 02 C6 |  if_b	mov	result1, local37
263d8     C8 01 90 CD |  if_b	jmp	#LR__3470
263dc     77 DD 02 F6 | 	mov	local28, local37
263e0     77 BD 02 F1 | 	add	local12, local37
263e4                 | LR__3446
263e4     74 F1 02 F6 | 	mov	local38, local34
263e8     D7 42 48 FB | 	callpa	#(@LR__3451-@LR__3447)>>2,fcache_load_ptr_
263ec                 | LR__3447
263ec     75 F1 52 F2 | 	cmps	local38, local35 wc
263f0     7C 00 90 3D |  if_ae	jmp	#LR__3452
263f4     00 F0 56 F2 | 	cmps	local38, #0 wc
263f8     2C 00 90 CD |  if_b	jmp	#LR__3448
263fc     6F F1 52 F2 | 	cmps	local38, local29 wc
26400     24 00 90 3D |  if_ae	jmp	#LR__3448
26404     5E CD 02 F6 | 	mov	local20, local12
26408     78 D9 02 F6 | 	mov	local26, local38
2640c     E7 E0 02 F6 | 	mov	local30, fp
26410     70 E0 06 F1 | 	add	local30, #112
26414     70 D9 02 F1 | 	add	local26, local30
26418     6C E3 C2 FA | 	rdbyte	local31, local26
2641c     66 E3 42 FC | 	wrbyte	local31, local20
26420     01 BC 06 F1 | 	add	local12, #1
26424     10 00 90 FD | 	jmp	#LR__3449
26428                 | LR__3448
26428     5E CD 02 F6 | 	mov	local20, local12
2642c     30 D8 06 F6 | 	mov	local26, #48
26430     66 61 48 FC | 	wrbyte	#48, local20
26434     01 BC 06 F1 | 	add	local12, #1
26438                 | LR__3449
26438     73 F1 0A F2 | 	cmp	local38, local33 wz
2643c     20 00 90 5D |  if_ne	jmp	#LR__3450
26440     00 C2 0E F2 | 	cmp	local15, #0 wz
26444     75 CD 02 A6 |  if_e	mov	local20, local35
26448     01 CC 86 A1 |  if_e	sub	local20, #1
2644c     66 F1 52 A2 |  if_e	cmps	local38, local20 wc
26450     5E CD 02 D6 |  if_c_or_nz	mov	local20, local12
26454     2E D8 06 D6 |  if_c_or_nz	mov	local26, #46
26458     66 5D 48 DC |  if_c_or_nz	wrbyte	#46, local20
2645c     01 BC 06 D1 |  if_c_or_nz	add	local12, #1
26460                 | LR__3450
26460     78 DD 02 F6 | 	mov	local28, local38
26464     01 DC 06 F1 | 	add	local28, #1
26468     6E F1 02 F6 | 	mov	local38, local28
2646c     7C FF 9F FD | 	jmp	#LR__3447
26470                 | LR__3451
26470                 | LR__3452
26470     00 B2 0E F2 | 	cmp	local07, #0 wz
26474     30 00 90 AD |  if_e	jmp	#LR__3456
26478     01 BC 86 F1 | 	sub	local12, #1
2647c     D7 0C 48 FB | 	callpa	#(@LR__3454-@LR__3453)>>2,fcache_load_ptr_
26480                 | LR__3453
26480     5F BD 5A F2 | 	cmps	local12, local13 wcz
26484     10 00 90 ED |  if_be	jmp	#LR__3455
26488     5E CD C2 FA | 	rdbyte	local20, local12
2648c     30 CC 0E F2 | 	cmp	local20, #48 wz
26490     01 BC 86 A1 |  if_e	sub	local12, #1
26494     E8 FF 9F AD |  if_e	jmp	#LR__3453
26498                 | LR__3454
26498                 | LR__3455
26498     5E CD C2 FA | 	rdbyte	local20, local12
2649c     2E CC 0E F2 | 	cmp	local20, #46 wz
264a0     01 BC 86 A1 |  if_e	sub	local12, #1
264a4     01 BC 06 F1 | 	add	local12, #1
264a8                 | LR__3456
264a8     00 CE 0E F2 | 	cmp	local21, #0 wz
264ac     40 00 90 AD |  if_e	jmp	#LR__3459
264b0     5E D1 42 FC | 	wrbyte	local22, local12
264b4     01 BC 06 F1 | 	add	local12, #1
264b8     5E BB 42 FC | 	wrbyte	local11, local12
264bc     00 F0 06 F6 | 	mov	local38, #0
264c0     01 BC 06 F1 | 	add	local12, #1
264c4                 | LR__3457
264c4     72 F1 52 F2 | 	cmps	local38, local32 wc
264c8     24 00 90 3D |  if_ae	jmp	#LR__3458
264cc     78 D9 02 F6 | 	mov	local26, local38
264d0     E7 E0 02 F6 | 	mov	local30, fp
264d4     B0 E0 06 F1 | 	add	local30, #176
264d8     70 D9 02 F1 | 	add	local26, local30
264dc     6C E3 C2 FA | 	rdbyte	local31, local26
264e0     5E E3 42 FC | 	wrbyte	local31, local12
264e4     01 F0 06 F1 | 	add	local38, #1
264e8     01 BC 06 F1 | 	add	local12, #1
264ec     D4 FF 9F FD | 	jmp	#LR__3457
264f0                 | LR__3458
264f0                 | LR__3459
264f0     5E 01 48 FC | 	wrbyte	#0, local12
264f4                 | LR__3460
264f4     00 CA 0E F2 | 	cmp	local19, #0 wz
264f8     00 B8 0E 52 |  if_ne	cmp	local10, #0 wz
264fc     94 00 90 AD |  if_e	jmp	#LR__3469
26500     5F 93 02 F6 | 	mov	arg01, local13
26504     49 F3 02 F6 | 	mov	local39, arg01
26508     D7 06 48 FB | 	callpa	#(@LR__3462-@LR__3461)>>2,fcache_load_ptr_
2650c                 | LR__3461
2650c     79 7B CA FA | 	rdbyte	result1, local39 wz
26510     01 F2 06 51 |  if_ne	add	local39, #1
26514     F4 FF 9F 5D |  if_ne	jmp	#LR__3461
26518                 | LR__3462
26518     49 F3 82 F1 | 	sub	local39, arg01
2651c     65 F3 5A F2 | 	cmps	local39, local19 wcz
26520     70 00 90 ED |  if_be	jmp	#LR__3469
26524     5F F5 02 F6 | 	mov	local40, local13
26528     00 CE 0E F2 | 	cmp	local21, #0 wz
2652c     00 C0 06 56 |  if_ne	mov	local14, #0
26530     65 F7 02 56 |  if_ne	mov	local41, local19
26534     01 CA 86 A1 |  if_e	sub	local19, #1
26538     60 CB 82 A1 |  if_e	sub	local19, local14
2653c     65 F7 02 A6 |  if_e	mov	local41, local19
26540     00 F6 0E F2 | 	cmp	local41, #0 wz
26544     14 00 90 AD |  if_e	jmp	#LR__3465
26548     D7 08 48 FB | 	callpa	#(@LR__3464-@LR__3463)>>2,fcache_load_ptr_
2654c                 | LR__3463
2654c     7A 55 48 FC | 	wrbyte	#42, local40
26550     01 F6 8E F1 | 	sub	local41, #1 wz
26554     01 F4 06 F1 | 	add	local40, #1
26558     F0 FF 9F 5D |  if_ne	jmp	#LR__3463
2655c                 | LR__3464
2655c                 | LR__3465
2655c     00 C0 0E F2 | 	cmp	local14, #0 wz
26560     2C 00 90 AD |  if_e	jmp	#LR__3468
26564     7A CD 02 F6 | 	mov	local20, local40
26568     66 5D 48 FC | 	wrbyte	#46, local20
2656c     00 F6 06 F6 | 	mov	local41, #0
26570     01 F4 06 F1 | 	add	local40, #1
26574     D7 0C 48 FB | 	callpa	#(@LR__3467-@LR__3466)>>2,fcache_load_ptr_
26578                 | LR__3466
26578     60 F7 52 F2 | 	cmps	local41, local14 wc
2657c     7A CD 02 C6 |  if_b	mov	local20, local40
26580     01 F4 06 C1 |  if_b	add	local40, #1
26584     66 55 48 CC |  if_b	wrbyte	#42, local20
26588     01 F6 06 C1 |  if_b	add	local41, #1
2658c     E8 FF 9F CD |  if_b	jmp	#LR__3466
26590                 | LR__3467
26590                 | LR__3468
26590     7A 01 48 FC | 	wrbyte	#0, local40
26594                 | LR__3469
26594     53 93 02 F6 | 	mov	arg01, local01
26598     54 95 02 F6 | 	mov	arg02, local02
2659c     5F 97 02 F6 | 	mov	arg03, local13
265a0     8C F6 BF FD | 	call	#__system___fmtstr
265a4                 | LR__3470
265a4     E7 F0 03 F6 | 	mov	ptra, fp
265a8     F2 00 A0 FD | 	call	#popregs_
265ac                 | __system___fmtfloat_ret
265ac     2D 00 64 FD | 	ret
265b0                 | 
265b0                 | __system__Left_S
265b0     04 CA 05 F6 | 	mov	COUNT_, #4
265b4     E8 00 A0 FD | 	call	#pushregs_
265b8     49 A7 02 F6 | 	mov	local01, arg01
265bc     4A A9 02 F6 | 	mov	local02, arg02
265c0     01 A8 56 F2 | 	cmps	local02, #1 wc
265c4     93 01 00 CF 
265c8     EA 7B 06 C6 |  if_b	mov	result1, ##@LR__5473
265cc     5C 00 90 CD |  if_b	jmp	#LR__3483
265d0     53 93 02 F6 | 	mov	arg01, local01
265d4     49 AB 02 F6 | 	mov	local03, arg01
265d8     D7 06 48 FB | 	callpa	#(@LR__3481-@LR__3480)>>2,fcache_load_ptr_
265dc                 | LR__3480
265dc     55 7B CA FA | 	rdbyte	result1, local03 wz
265e0     01 AA 06 51 |  if_ne	add	local03, #1
265e4     F4 FF 9F 5D |  if_ne	jmp	#LR__3480
265e8                 | LR__3481
265e8     49 AB 82 F1 | 	sub	local03, arg01
265ec     55 7B 02 F6 | 	mov	result1, local03
265f0     54 7B 5A F2 | 	cmps	result1, local02 wcz
265f4     53 7B 02 E6 |  if_be	mov	result1, local01
265f8     30 00 90 ED |  if_be	jmp	#LR__3483
265fc     54 93 02 F6 | 	mov	arg01, local02
26600     02 92 06 F1 | 	add	arg01, #2
26604     08 21 B0 FD | 	call	#__system___gc_alloc_managed
26608     3D AD 0A F6 | 	mov	local04, result1 wz
2660c     18 00 90 AD |  if_e	jmp	#LR__3482
26610     56 93 02 F6 | 	mov	arg01, local04
26614     53 95 02 F6 | 	mov	arg02, local01
26618     54 97 02 F6 | 	mov	arg03, local02
2661c     98 E5 BF FD | 	call	#__system____builtin_memmove
26620     56 A9 02 F1 | 	add	local02, local04
26624     54 01 48 FC | 	wrbyte	#0, local02
26628                 | LR__3482
26628     56 7B 02 F6 | 	mov	result1, local04
2662c                 | LR__3483
2662c     E7 F0 03 F6 | 	mov	ptra, fp
26630     F2 00 A0 FD | 	call	#popregs_
26634                 | __system__Left_S_ret
26634     2D 00 64 FD | 	ret
26638                 | 
26638                 | __system__Right_S
26638     05 CA 05 F6 | 	mov	COUNT_, #5
2663c     E8 00 A0 FD | 	call	#pushregs_
26640     49 A7 02 F6 | 	mov	local01, arg01
26644     4A A9 02 F6 | 	mov	local02, arg02
26648     01 A8 56 F2 | 	cmps	local02, #1 wc
2664c     93 01 00 CF 
26650     EB 7B 06 C6 |  if_b	mov	result1, ##@LR__5474
26654     64 00 90 CD |  if_b	jmp	#LR__3493
26658     53 93 02 F6 | 	mov	arg01, local01
2665c     49 AB 02 F6 | 	mov	local03, arg01
26660     D7 06 48 FB | 	callpa	#(@LR__3491-@LR__3490)>>2,fcache_load_ptr_
26664                 | LR__3490
26664     55 7B CA FA | 	rdbyte	result1, local03 wz
26668     01 AA 06 51 |  if_ne	add	local03, #1
2666c     F4 FF 9F 5D |  if_ne	jmp	#LR__3490
26670                 | LR__3491
26670     49 AB 82 F1 | 	sub	local03, arg01
26674     55 7B 02 F6 | 	mov	result1, local03
26678     3D AD 02 F6 | 	mov	local04, result1
2667c     54 AD 5A F2 | 	cmps	local04, local02 wcz
26680     53 7B 02 E6 |  if_be	mov	result1, local01
26684     34 00 90 ED |  if_be	jmp	#LR__3493
26688     54 93 02 F6 | 	mov	arg01, local02
2668c     02 92 06 F1 | 	add	arg01, #2
26690     7C 20 B0 FD | 	call	#__system___gc_alloc_managed
26694     3D AF 0A F6 | 	mov	local05, result1 wz
26698     1C 00 90 AD |  if_e	jmp	#LR__3492
2669c     54 AD 82 F1 | 	sub	local04, local02
266a0     53 AD 02 F1 | 	add	local04, local01
266a4     01 A8 06 F1 | 	add	local02, #1
266a8     57 93 02 F6 | 	mov	arg01, local05
266ac     56 95 02 F6 | 	mov	arg02, local04
266b0     54 97 02 F6 | 	mov	arg03, local02
266b4     00 E5 BF FD | 	call	#__system____builtin_memmove
266b8                 | LR__3492
266b8     57 7B 02 F6 | 	mov	result1, local05
266bc                 | LR__3493
266bc     E7 F0 03 F6 | 	mov	ptra, fp
266c0     F2 00 A0 FD | 	call	#popregs_
266c4                 | __system__Right_S_ret
266c4     2D 00 64 FD | 	ret
266c8                 | 
266c8                 | __system__Mid_S
266c8     05 CA 05 F6 | 	mov	COUNT_, #5
266cc     E8 00 A0 FD | 	call	#pushregs_
266d0     49 A7 02 F6 | 	mov	local01, arg01
266d4     4A A9 02 F6 | 	mov	local02, arg02
266d8     01 96 56 F2 | 	cmps	arg03, #1 wc
266dc     93 01 00 CF 
266e0     EC 7B 06 C6 |  if_b	mov	result1, ##@LR__5475
266e4     80 00 90 CD |  if_b	jmp	#LR__3503
266e8     01 A8 86 F1 | 	sub	local02, #1
266ec     00 A8 56 F3 | 	fges	local02, #0 wc
266f0     53 93 02 F6 | 	mov	arg01, local01
266f4     49 AB 02 F6 | 	mov	local03, arg01
266f8     D7 06 48 FB | 	callpa	#(@LR__3501-@LR__3500)>>2,fcache_load_ptr_
266fc                 | LR__3500
266fc     55 7B CA FA | 	rdbyte	result1, local03 wz
26700     01 AA 06 51 |  if_ne	add	local03, #1
26704     F4 FF 9F 5D |  if_ne	jmp	#LR__3500
26708                 | LR__3501
26708     49 AB 82 F1 | 	sub	local03, arg01
2670c     55 7B 02 F6 | 	mov	result1, local03
26710     3D 95 02 F6 | 	mov	arg02, result1
26714     54 95 52 F2 | 	cmps	arg02, local02 wc
26718     93 01 00 CF 
2671c     ED 7B 06 C6 |  if_b	mov	result1, ##@LR__5476
26720     44 00 90 CD |  if_b	jmp	#LR__3503
26724     4A AD 02 F6 | 	mov	local04, arg02
26728     54 AD 82 F1 | 	sub	local04, local02
2672c     4B AD 5A F2 | 	cmps	local04, arg03 wcz
26730     4B AD 02 16 |  if_a	mov	local04, arg03
26734     56 93 02 F6 | 	mov	arg01, local04
26738     02 92 06 F1 | 	add	arg01, #2
2673c     D0 1F B0 FD | 	call	#__system___gc_alloc_managed
26740     3D AF 0A F6 | 	mov	local05, result1 wz
26744     1C 00 90 AD |  if_e	jmp	#LR__3502
26748     53 A9 02 F1 | 	add	local02, local01
2674c     57 93 02 F6 | 	mov	arg01, local05
26750     54 95 02 F6 | 	mov	arg02, local02
26754     56 97 02 F6 | 	mov	arg03, local04
26758     5C E4 BF FD | 	call	#__system____builtin_memmove
2675c     57 AD 02 F1 | 	add	local04, local05
26760     56 01 48 FC | 	wrbyte	#0, local04
26764                 | LR__3502
26764     57 7B 02 F6 | 	mov	result1, local05
26768                 | LR__3503
26768     E7 F0 03 F6 | 	mov	ptra, fp
2676c     F2 00 A0 FD | 	call	#popregs_
26770                 | __system__Mid_S_ret
26770     2D 00 64 FD | 	ret
26774                 | 
26774                 | __system__Chr_S
26774     01 CA 05 F6 | 	mov	COUNT_, #1
26778     E8 00 A0 FD | 	call	#pushregs_
2677c     49 A7 02 F6 | 	mov	local01, arg01
26780     03 92 06 F6 | 	mov	arg01, #3
26784     88 1F B0 FD | 	call	#__system___gc_alloc_managed
26788     00 7A 4E F2 | 	cmps	result1, #0 wz
2678c     3D A7 42 5C |  if_ne	wrbyte	local01, result1
26790     01 7A 06 51 |  if_ne	add	result1, #1
26794     3D 01 48 5C |  if_ne	wrbyte	#0, result1
26798     01 7A 86 51 |  if_ne	sub	result1, #1
2679c     E7 F0 03 F6 | 	mov	ptra, fp
267a0     F2 00 A0 FD | 	call	#popregs_
267a4                 | __system__Chr_S_ret
267a4     2D 00 64 FD | 	ret
267a8                 | 
267a8                 | __system__str_S
267a8     02 CA 05 F6 | 	mov	COUNT_, #2
267ac     E8 00 A0 FD | 	call	#pushregs_
267b0     49 A7 02 F6 | 	mov	local01, arg01
267b4     10 92 06 F6 | 	mov	arg01, #16
267b8     54 1F B0 FD | 	call	#__system___gc_alloc_managed
267bc     3D A9 0A F6 | 	mov	local02, result1 wz
267c0     30 00 90 AD |  if_e	jmp	#LR__3510
267c4     F8 93 02 F6 | 	mov	arg01, ptra
267c8     08 F0 07 F1 | 	add	ptra, #8
267cc     49 A9 62 FC | 	wrlong	local02, arg01
267d0     04 92 06 F1 | 	add	arg01, #4
267d4     49 01 68 FC | 	wrlong	#0, arg01
267d8     04 92 86 F1 | 	sub	arg01, #4
267dc     00 98 05 FF 
267e0     00 92 46 F5 | 	or	arg01, ##187695104
267e4     00 94 06 F6 | 	mov	arg02, #0
267e8     53 97 02 F6 | 	mov	arg03, local01
267ec     67 98 06 F6 | 	mov	arg04, #103
267f0     5C F6 BF FD | 	call	#__system___fmtfloat
267f4                 | LR__3510
267f4     54 7B 02 F6 | 	mov	result1, local02
267f8     E7 F0 03 F6 | 	mov	ptra, fp
267fc     F2 00 A0 FD | 	call	#popregs_
26800                 | __system__str_S_ret
26800     2D 00 64 FD | 	ret
26804                 | 
26804                 | __system__Number_S
26804     08 CA 05 F6 | 	mov	COUNT_, #8
26808     E8 00 A0 FD | 	call	#pushregs_
2680c     49 A7 02 F6 | 	mov	local01, arg01
26810     4A A9 0A F6 | 	mov	local02, arg02 wz
26814     4B AB 02 F6 | 	mov	local03, arg03
26818     3C 00 90 5D |  if_ne	jmp	#LR__3522
2681c     01 A8 06 F6 | 	mov	local02, #1
26820     55 AD 02 F6 | 	mov	local04, local03
26824     01 AE 06 F6 | 	mov	local05, #1
26828     D7 16 48 FB | 	callpa	#(@LR__3521-@LR__3520)>>2,fcache_load_ptr_
2682c                 | LR__3520
2682c     00 B0 06 F6 | 	mov	local06, #0
26830     53 AD 1A F2 | 	cmp	local04, local01 wcz
26834     01 B0 66 E6 |  if_be	neg	local06, #1
26838     56 AF 12 F2 | 	cmp	local05, local04 wc
2683c     59 B3 A2 F1 | 	subx	local07, local07
26840     59 B1 CA F7 | 	test	local06, local07 wz
26844     55 AD 02 5D |  if_ne	qmul	local04, local03
26848     56 AF 02 56 |  if_ne	mov	local05, local04
2684c     01 A8 06 51 |  if_ne	add	local02, #1
26850     18 AC 62 5D |  if_ne	getqx	local04
26854     D4 FF 9F 5D |  if_ne	jmp	#LR__3520
26858                 | LR__3521
26858                 | LR__3522
26858     20 A8 36 F3 | 	fle	local02, #32 wc
2685c     54 93 02 F6 | 	mov	arg01, local02
26860     02 92 06 F1 | 	add	arg01, #2
26864     A8 1E B0 FD | 	call	#__system___gc_alloc_managed
26868     3D B1 02 F6 | 	mov	local06, result1
2686c     54 B3 02 F6 | 	mov	local07, local02
26870     58 B3 02 F1 | 	add	local07, local06
26874     59 01 48 FC | 	wrbyte	#0, local07
26878     D7 1A 48 FB | 	callpa	#(@LR__3524-@LR__3523)>>2,fcache_load_ptr_
2687c                 | LR__3523
2687c     01 A8 16 F2 | 	cmp	local02, #1 wc
26880     2C 00 90 CD |  if_b	jmp	#LR__3525
26884     55 A7 12 FD | 	qdiv	local01, local03
26888     01 A8 86 F1 | 	sub	local02, #1
2688c     54 B3 02 F6 | 	mov	local07, local02
26890     58 B3 02 F1 | 	add	local07, local06
26894     19 B4 62 FD | 	getqy	local08
26898     0A B4 16 F2 | 	cmp	local08, #10 wc
2689c     30 B4 06 C1 |  if_b	add	local08, #48
268a0     37 B4 06 31 |  if_ae	add	local08, #55
268a4     59 B5 42 FC | 	wrbyte	local08, local07
268a8     18 A6 62 FD | 	getqx	local01
268ac     CC FF 9F FD | 	jmp	#LR__3523
268b0                 | LR__3524
268b0                 | LR__3525
268b0     58 7B 02 F6 | 	mov	result1, local06
268b4     E7 F0 03 F6 | 	mov	ptra, fp
268b8     F2 00 A0 FD | 	call	#popregs_
268bc                 | __system__Number_S_ret
268bc     2D 00 64 FD | 	ret
268c0                 | 
268c0                 | __system__LCase_S
268c0     07 CA 05 F6 | 	mov	COUNT_, #7
268c4     E8 00 A0 FD | 	call	#pushregs_
268c8     49 A7 02 F6 | 	mov	local01, arg01
268cc     49 A9 02 F6 | 	mov	local02, arg01
268d0     D7 06 48 FB | 	callpa	#(@LR__3531-@LR__3530)>>2,fcache_load_ptr_
268d4                 | LR__3530
268d4     54 7B CA FA | 	rdbyte	result1, local02 wz
268d8     01 A8 06 51 |  if_ne	add	local02, #1
268dc     F4 FF 9F 5D |  if_ne	jmp	#LR__3530
268e0                 | LR__3531
268e0     49 A9 82 F1 | 	sub	local02, arg01
268e4     54 7B 02 F6 | 	mov	result1, local02
268e8     3D A9 0A F6 | 	mov	local02, result1 wz
268ec     93 01 00 AF 
268f0     EE 7B 06 A6 |  if_e	mov	result1, ##@LR__5477
268f4     7C 00 90 AD |  if_e	jmp	#LR__3537
268f8     54 93 02 F6 | 	mov	arg01, local02
268fc     02 92 06 F1 | 	add	arg01, #2
26900     0C 1E B0 FD | 	call	#__system___gc_alloc_managed
26904     3D AB 0A F6 | 	mov	local03, result1 wz
26908     64 00 90 AD |  if_e	jmp	#LR__3536
2690c     01 AC 66 F6 | 	neg	local04, #1
26910     D7 26 48 FB | 	callpa	#(@LR__3535-@LR__3532)>>2,fcache_load_ptr_
26914                 | LR__3532
26914     01 AC 06 F1 | 	add	local04, #1
26918     56 AF 02 F6 | 	mov	local05, local04
2691c     53 AF 02 F1 | 	add	local05, local01
26920     57 B1 C2 FA | 	rdbyte	local06, local05
26924     41 B0 56 F2 | 	cmps	local06, #65 wc
26928     18 00 90 CD |  if_b	jmp	#LR__3533
2692c     5B B0 56 F2 | 	cmps	local06, #91 wc
26930     56 B3 02 C6 |  if_b	mov	local07, local04
26934     55 B3 02 C1 |  if_b	add	local07, local03
26938     20 B0 06 C1 |  if_b	add	local06, #32
2693c     59 B1 42 CC |  if_b	wrbyte	local06, local07
26940     0C 00 90 CD |  if_b	jmp	#LR__3534
26944                 | LR__3533
26944     56 B3 02 F6 | 	mov	local07, local04
26948     55 B3 02 F1 | 	add	local07, local03
2694c     59 B1 42 FC | 	wrbyte	local06, local07
26950                 | LR__3534
26950     54 B1 02 F6 | 	mov	local06, local02
26954     01 B0 86 F1 | 	sub	local06, #1
26958     58 AD 0A F2 | 	cmp	local04, local06 wz
2695c     B4 FF 9F 5D |  if_ne	jmp	#LR__3532
26960                 | LR__3535
26960     55 A9 02 F1 | 	add	local02, local03
26964     54 01 48 FC | 	wrbyte	#0, local02
26968     55 7B 02 F6 | 	mov	result1, local03
2696c     04 00 90 FD | 	jmp	#LR__3537
26970                 | LR__3536
26970     55 7B 02 F6 | 	mov	result1, local03
26974                 | LR__3537
26974     E7 F0 03 F6 | 	mov	ptra, fp
26978     F2 00 A0 FD | 	call	#popregs_
2697c                 | __system__LCase_S_ret
2697c     2D 00 64 FD | 	ret
26980                 | 
26980                 | __system__LTrim_S
26980     05 CA 05 F6 | 	mov	COUNT_, #5
26984     E8 00 A0 FD | 	call	#pushregs_
26988     49 A7 02 F6 | 	mov	local01, arg01
2698c     49 A9 02 F6 | 	mov	local02, arg01
26990     D7 06 48 FB | 	callpa	#(@LR__3541-@LR__3540)>>2,fcache_load_ptr_
26994                 | LR__3540
26994     54 7B CA FA | 	rdbyte	result1, local02 wz
26998     01 A8 06 51 |  if_ne	add	local02, #1
2699c     F4 FF 9F 5D |  if_ne	jmp	#LR__3540
269a0                 | LR__3541
269a0     49 A9 82 F1 | 	sub	local02, arg01
269a4     54 7B 02 F6 | 	mov	result1, local02
269a8     3D A9 0A F6 | 	mov	local02, result1 wz
269ac     93 01 00 AF 
269b0     EF 7B 06 A6 |  if_e	mov	result1, ##@LR__5478
269b4     7C 00 90 AD |  if_e	jmp	#LR__3546
269b8     00 AA 06 F6 | 	mov	local03, #0
269bc     54 AD 02 F6 | 	mov	local04, local02
269c0                 | LR__3542
269c0     56 AB 52 F2 | 	cmps	local03, local04 wc
269c4     68 00 90 3D |  if_ae	jmp	#LR__3545
269c8     55 97 02 F6 | 	mov	arg03, local03
269cc     53 97 02 F1 | 	add	arg03, local01
269d0     4B 97 C2 FA | 	rdbyte	arg03, arg03
269d4     20 96 0E F2 | 	cmp	arg03, #32 wz
269d8     4C 00 90 AD |  if_e	jmp	#LR__3544
269dc     54 93 02 F6 | 	mov	arg01, local02
269e0     55 93 82 F1 | 	sub	arg01, local03
269e4     02 92 06 F1 | 	add	arg01, #2
269e8     24 1D B0 FD | 	call	#__system___gc_alloc_managed
269ec     3D AF 0A F6 | 	mov	local05, result1 wz
269f0     2C 00 90 AD |  if_e	jmp	#LR__3543
269f4     55 95 02 F6 | 	mov	arg02, local03
269f8     53 95 02 F1 | 	add	arg02, local01
269fc     54 97 02 F6 | 	mov	arg03, local02
26a00     55 97 82 F1 | 	sub	arg03, local03
26a04     57 93 02 F6 | 	mov	arg01, local05
26a08     AC E1 BF FD | 	call	#__system____builtin_memmove
26a0c     55 A9 82 F1 | 	sub	local02, local03
26a10     57 A9 02 F1 | 	add	local02, local05
26a14     54 01 48 FC | 	wrbyte	#0, local02
26a18     57 7B 02 F6 | 	mov	result1, local05
26a1c     14 00 90 FD | 	jmp	#LR__3546
26a20                 | LR__3543
26a20     57 7B 02 F6 | 	mov	result1, local05
26a24     0C 00 90 FD | 	jmp	#LR__3546
26a28                 | LR__3544
26a28     01 AA 06 F1 | 	add	local03, #1
26a2c     90 FF 9F FD | 	jmp	#LR__3542
26a30                 | LR__3545
26a30     53 7B 02 F6 | 	mov	result1, local01
26a34                 | LR__3546
26a34     E7 F0 03 F6 | 	mov	ptra, fp
26a38     F2 00 A0 FD | 	call	#popregs_
26a3c                 | __system__LTrim_S_ret
26a3c     2D 00 64 FD | 	ret
26a40                 | 
26a40                 | __system__RTrim_S
26a40     04 CA 05 F6 | 	mov	COUNT_, #4
26a44     E8 00 A0 FD | 	call	#pushregs_
26a48     49 A7 02 F6 | 	mov	local01, arg01
26a4c     49 A9 02 F6 | 	mov	local02, arg01
26a50     D7 06 48 FB | 	callpa	#(@LR__3551-@LR__3550)>>2,fcache_load_ptr_
26a54                 | LR__3550
26a54     54 7B CA FA | 	rdbyte	result1, local02 wz
26a58     01 A8 06 51 |  if_ne	add	local02, #1
26a5c     F4 FF 9F 5D |  if_ne	jmp	#LR__3550
26a60                 | LR__3551
26a60     49 A9 82 F1 | 	sub	local02, arg01
26a64     54 7B 02 F6 | 	mov	result1, local02
26a68     3D A9 0A F6 | 	mov	local02, result1 wz
26a6c     93 01 00 AF 
26a70     F0 7B 06 A6 |  if_e	mov	result1, ##@LR__5479
26a74     74 00 90 AD |  if_e	jmp	#LR__3555
26a78     54 AB 02 F6 | 	mov	local03, local02
26a7c     01 AA 86 F1 | 	sub	local03, #1
26a80                 | LR__3552
26a80     55 95 02 F6 | 	mov	arg02, local03
26a84     53 95 02 F1 | 	add	arg02, local01
26a88     4A A9 C2 FA | 	rdbyte	local02, arg02
26a8c     20 A8 0E F2 | 	cmp	local02, #32 wz
26a90     44 00 90 AD |  if_e	jmp	#LR__3554
26a94     55 93 02 F6 | 	mov	arg01, local03
26a98     02 92 06 F1 | 	add	arg01, #2
26a9c     70 1C B0 FD | 	call	#__system___gc_alloc_managed
26aa0     3D AD 0A F6 | 	mov	local04, result1 wz
26aa4     28 00 90 AD |  if_e	jmp	#LR__3553
26aa8     55 97 02 F6 | 	mov	arg03, local03
26aac     01 96 06 F1 | 	add	arg03, #1
26ab0     56 93 02 F6 | 	mov	arg01, local04
26ab4     53 95 02 F6 | 	mov	arg02, local01
26ab8     FC E0 BF FD | 	call	#__system____builtin_memmove
26abc     01 AA 06 F1 | 	add	local03, #1
26ac0     56 AB 02 F1 | 	add	local03, local04
26ac4     55 01 48 FC | 	wrbyte	#0, local03
26ac8     56 7B 02 F6 | 	mov	result1, local04
26acc     1C 00 90 FD | 	jmp	#LR__3555
26ad0                 | LR__3553
26ad0     56 7B 02 F6 | 	mov	result1, local04
26ad4     14 00 90 FD | 	jmp	#LR__3555
26ad8                 | LR__3554
26ad8     01 AA 86 F1 | 	sub	local03, #1
26adc     00 AA 56 F2 | 	cmps	local03, #0 wc
26ae0     9C FF 9F 3D |  if_ae	jmp	#LR__3552
26ae4     93 01 00 FF 
26ae8     F1 7B 06 F6 | 	mov	result1, ##@LR__5480
26aec                 | LR__3555
26aec     E7 F0 03 F6 | 	mov	ptra, fp
26af0     F2 00 A0 FD | 	call	#popregs_
26af4                 | __system__RTrim_S_ret
26af4     2D 00 64 FD | 	ret
26af8                 | 
26af8                 | __system__Instr
26af8     07 CA 05 F6 | 	mov	COUNT_, #7
26afc     E8 00 A0 FD | 	call	#pushregs_
26b00     49 A7 02 F6 | 	mov	local01, arg01
26b04     4A A9 02 F6 | 	mov	local02, arg02
26b08     4B AB 02 F6 | 	mov	local03, arg03
26b0c     55 93 02 F6 | 	mov	arg01, local03
26b10     49 AD 02 F6 | 	mov	local04, arg01
26b14     D7 06 48 FB | 	callpa	#(@LR__3561-@LR__3560)>>2,fcache_load_ptr_
26b18                 | LR__3560
26b18     56 7B CA FA | 	rdbyte	result1, local04 wz
26b1c     01 AC 06 51 |  if_ne	add	local04, #1
26b20     F4 FF 9F 5D |  if_ne	jmp	#LR__3560
26b24                 | LR__3561
26b24     49 AD 82 F1 | 	sub	local04, arg01
26b28     56 AF 02 F6 | 	mov	local05, local04
26b2c     54 93 02 F6 | 	mov	arg01, local02
26b30     49 AD 02 F6 | 	mov	local04, arg01
26b34     D7 06 48 FB | 	callpa	#(@LR__3563-@LR__3562)>>2,fcache_load_ptr_
26b38                 | LR__3562
26b38     56 7B CA FA | 	rdbyte	result1, local04 wz
26b3c     01 AC 06 51 |  if_ne	add	local04, #1
26b40     F4 FF 9F 5D |  if_ne	jmp	#LR__3562
26b44                 | LR__3563
26b44     49 AD 82 F1 | 	sub	local04, arg01
26b48     56 7B 02 F6 | 	mov	result1, local04
26b4c     3D 99 0A F6 | 	mov	arg04, result1 wz
26b50     00 7A 06 A6 |  if_e	mov	result1, #0
26b54     98 00 90 AD |  if_e	jmp	#LR__3567
26b58     00 AE 0E F2 | 	cmp	local05, #0 wz
26b5c     00 7A 06 A6 |  if_e	mov	result1, #0
26b60     8C 00 90 AD |  if_e	jmp	#LR__3567
26b64     4C A7 5A F2 | 	cmps	local01, arg04 wcz
26b68     00 7A 06 16 |  if_a	mov	result1, #0
26b6c     80 00 90 1D |  if_a	jmp	#LR__3567
26b70     01 A6 56 F2 | 	cmps	local01, #1 wc
26b74     01 A6 06 C6 |  if_b	mov	local01, #1
26b78     55 B1 C2 FA | 	rdbyte	local06, local03
26b7c     01 AE 0E F2 | 	cmp	local05, #1 wz
26b80     18 00 90 5D |  if_ne	jmp	#LR__3564
26b84     54 93 02 F6 | 	mov	arg01, local02
26b88     58 95 02 F6 | 	mov	arg02, local06
26b8c     53 97 02 F6 | 	mov	arg03, local01
26b90     00 98 06 F6 | 	mov	arg04, #0
26b94     C4 37 B0 FD | 	call	#__system____ScanForChar
26b98     54 00 90 FD | 	jmp	#LR__3567
26b9c                 | LR__3564
26b9c     53 B3 02 F6 | 	mov	local07, local01
26ba0                 | LR__3565
26ba0     54 93 02 F6 | 	mov	arg01, local02
26ba4     58 95 02 F6 | 	mov	arg02, local06
26ba8     59 97 02 F6 | 	mov	arg03, local07
26bac     00 98 06 F6 | 	mov	arg04, #0
26bb0     A8 37 B0 FD | 	call	#__system____ScanForChar
26bb4     3D B3 0A F6 | 	mov	local07, result1 wz
26bb8     30 00 90 AD |  if_e	jmp	#LR__3566
26bbc     57 97 02 F6 | 	mov	arg03, local05
26bc0     54 93 02 F6 | 	mov	arg01, local02
26bc4     59 95 02 F6 | 	mov	arg02, local07
26bc8     FC FA BF FD | 	call	#__system__Mid_S
26bcc     3D 93 02 F6 | 	mov	arg01, result1
26bd0     55 95 02 F6 | 	mov	arg02, local03
26bd4     58 E1 BF FD | 	call	#__system___string_cmp
26bd8     00 7A 0E F2 | 	cmp	result1, #0 wz
26bdc     59 7B 02 A6 |  if_e	mov	result1, local07
26be0     0C 00 90 AD |  if_e	jmp	#LR__3567
26be4     57 B3 02 F1 | 	add	local07, local05
26be8     B4 FF 9F FD | 	jmp	#LR__3565
26bec                 | LR__3566
26bec     00 7A 06 F6 | 	mov	result1, #0
26bf0                 | LR__3567
26bf0     E7 F0 03 F6 | 	mov	ptra, fp
26bf4     F2 00 A0 FD | 	call	#popregs_
26bf8                 | __system__Instr_ret
26bf8     2D 00 64 FD | 	ret
26bfc                 | 
26bfc                 | __system__InstrRev
26bfc     07 CA 05 F6 | 	mov	COUNT_, #7
26c00     E8 00 A0 FD | 	call	#pushregs_
26c04     49 A7 02 F6 | 	mov	local01, arg01
26c08     4A A9 02 F6 | 	mov	local02, arg02
26c0c     4B AB 02 F6 | 	mov	local03, arg03
26c10     55 93 02 F6 | 	mov	arg01, local03
26c14     49 AD 02 F6 | 	mov	local04, arg01
26c18     D7 06 48 FB | 	callpa	#(@LR__3571-@LR__3570)>>2,fcache_load_ptr_
26c1c                 | LR__3570
26c1c     56 7B CA FA | 	rdbyte	result1, local04 wz
26c20     01 AC 06 51 |  if_ne	add	local04, #1
26c24     F4 FF 9F 5D |  if_ne	jmp	#LR__3570
26c28                 | LR__3571
26c28     49 AD 82 F1 | 	sub	local04, arg01
26c2c     56 AF 02 F6 | 	mov	local05, local04
26c30     54 93 02 F6 | 	mov	arg01, local02
26c34     49 AD 02 F6 | 	mov	local04, arg01
26c38     D7 06 48 FB | 	callpa	#(@LR__3573-@LR__3572)>>2,fcache_load_ptr_
26c3c                 | LR__3572
26c3c     56 7B CA FA | 	rdbyte	result1, local04 wz
26c40     01 AC 06 51 |  if_ne	add	local04, #1
26c44     F4 FF 9F 5D |  if_ne	jmp	#LR__3572
26c48                 | LR__3573
26c48     49 AD 82 F1 | 	sub	local04, arg01
26c4c     56 7B 02 F6 | 	mov	result1, local04
26c50     3D 99 0A F6 | 	mov	arg04, result1 wz
26c54     00 7A 06 A6 |  if_e	mov	result1, #0
26c58     98 00 90 AD |  if_e	jmp	#LR__3577
26c5c     00 AE 0E F2 | 	cmp	local05, #0 wz
26c60     00 7A 06 A6 |  if_e	mov	result1, #0
26c64     8C 00 90 AD |  if_e	jmp	#LR__3577
26c68     4C A7 5A F2 | 	cmps	local01, arg04 wcz
26c6c     4C A7 02 16 |  if_a	mov	local01, arg04
26c70     01 A6 56 F2 | 	cmps	local01, #1 wc
26c74     01 A6 06 C6 |  if_b	mov	local01, #1
26c78     55 B1 C2 FA | 	rdbyte	local06, local03
26c7c     01 AE 0E F2 | 	cmp	local05, #1 wz
26c80     18 00 90 5D |  if_ne	jmp	#LR__3574
26c84     54 93 02 F6 | 	mov	arg01, local02
26c88     58 95 02 F6 | 	mov	arg02, local06
26c8c     53 97 02 F6 | 	mov	arg03, local01
26c90     01 98 06 F6 | 	mov	arg04, #1
26c94     C4 36 B0 FD | 	call	#__system____ScanForChar
26c98     58 00 90 FD | 	jmp	#LR__3577
26c9c                 | LR__3574
26c9c     57 B3 02 F6 | 	mov	local07, local05
26ca0     01 B2 86 F1 | 	sub	local07, #1
26ca4                 | LR__3575
26ca4     54 93 02 F6 | 	mov	arg01, local02
26ca8     58 95 02 F6 | 	mov	arg02, local06
26cac     59 97 02 F6 | 	mov	arg03, local07
26cb0     01 98 06 F6 | 	mov	arg04, #1
26cb4     A4 36 B0 FD | 	call	#__system____ScanForChar
26cb8     3D B3 0A F6 | 	mov	local07, result1 wz
26cbc     30 00 90 AD |  if_e	jmp	#LR__3576
26cc0     57 97 02 F6 | 	mov	arg03, local05
26cc4     54 93 02 F6 | 	mov	arg01, local02
26cc8     59 95 02 F6 | 	mov	arg02, local07
26ccc     F8 F9 BF FD | 	call	#__system__Mid_S
26cd0     3D 93 02 F6 | 	mov	arg01, result1
26cd4     55 95 02 F6 | 	mov	arg02, local03
26cd8     54 E0 BF FD | 	call	#__system___string_cmp
26cdc     00 7A 0E F2 | 	cmp	result1, #0 wz
26ce0     59 7B 02 A6 |  if_e	mov	result1, local07
26ce4     0C 00 90 AD |  if_e	jmp	#LR__3577
26ce8     57 B3 82 F1 | 	sub	local07, local05
26cec     B4 FF 9F FD | 	jmp	#LR__3575
26cf0                 | LR__3576
26cf0     00 7A 06 F6 | 	mov	result1, #0
26cf4                 | LR__3577
26cf4     E7 F0 03 F6 | 	mov	ptra, fp
26cf8     F2 00 A0 FD | 	call	#popregs_
26cfc                 | __system__InstrRev_ret
26cfc     2D 00 64 FD | 	ret
26d00                 | 
26d00                 | __system___remove
26d00     06 CA 05 F6 | 	mov	COUNT_, #6
26d04     E8 00 A0 FD | 	call	#pushregs_
26d08     34 A7 02 F6 | 	mov	local01, ptr___system__dat__
26d0c     84 A7 06 F1 | 	add	local01, #388
26d10     49 95 02 F6 | 	mov	arg02, arg01
26d14     53 93 02 F6 | 	mov	arg01, local01
26d18     00 96 06 F6 | 	mov	arg03, #0
26d1c     34 E7 BF FD | 	call	#__system____getvfsforfile
26d20     3D A9 0A F6 | 	mov	local02, result1 wz
26d24     10 00 90 AD |  if_e	jmp	#LR__3580
26d28     20 A8 06 F1 | 	add	local02, #32
26d2c     54 93 0A FB | 	rdlong	arg01, local02 wz
26d30     20 A8 86 F1 | 	sub	local02, #32
26d34     14 00 90 5D |  if_ne	jmp	#LR__3581
26d38                 | LR__3580
26d38     20 68 06 F1 | 	add	ptr___system__dat__, #32
26d3c     34 21 68 FC | 	wrlong	#16, ptr___system__dat__
26d40     20 68 86 F1 | 	sub	ptr___system__dat__, #32
26d44     01 7A 66 F6 | 	neg	result1, #1
26d48     A8 00 90 FD | 	jmp	#LR__3584
26d4c                 | LR__3581
26d4c     40 A8 06 F1 | 	add	local02, #64
26d50     54 AB 02 FB | 	rdlong	local03, local02
26d54     55 AD 02 F6 | 	mov	local04, local03
26d58     40 A8 86 F1 | 	sub	local02, #64
26d5c     13 AC 46 F7 | 	zerox	local04, #19
26d60     14 AA 46 F0 | 	shr	local03, #20
26d64     02 AA 66 F0 | 	shl	local03, #2
26d68     2D AB 02 F1 | 	add	local03, __methods__
26d6c     55 AB 02 FB | 	rdlong	local03, local03
26d70     53 93 02 F6 | 	mov	arg01, local01
26d74     32 AF 02 F6 | 	mov	local05, objptr
26d78     56 65 02 F6 | 	mov	objptr, local04
26d7c     2D AA 62 FD | 	call	local03
26d80     57 65 02 F6 | 	mov	objptr, local05
26d84     3D B1 02 F6 | 	mov	local06, result1
26d88     FF FF 7F FF 
26d8c     F2 B1 0E F2 | 	cmp	local06, ##-14 wz
26d90     38 00 90 5D |  if_ne	jmp	#LR__3582
26d94     3C A8 06 F1 | 	add	local02, #60
26d98     54 B1 02 FB | 	rdlong	local06, local02
26d9c     58 AB 02 F6 | 	mov	local03, local06
26da0     13 B0 46 F7 | 	zerox	local06, #19
26da4     14 AA 46 F0 | 	shr	local03, #20
26da8     02 AA 66 F0 | 	shl	local03, #2
26dac     2D AB 02 F1 | 	add	local03, __methods__
26db0     55 AB 02 FB | 	rdlong	local03, local03
26db4     53 93 02 F6 | 	mov	arg01, local01
26db8     32 AF 02 F6 | 	mov	local05, objptr
26dbc     58 65 02 F6 | 	mov	objptr, local06
26dc0     2D AA 62 FD | 	call	local03
26dc4     57 65 02 F6 | 	mov	objptr, local05
26dc8     3D B1 02 F6 | 	mov	local06, result1
26dcc                 | LR__3582
26dcc     00 B0 0E F2 | 	cmp	local06, #0 wz
26dd0     1C 00 90 AD |  if_e	jmp	#LR__3583
26dd4     58 93 6A F6 | 	neg	arg01, local06 wz
26dd8     20 68 06 F1 | 	add	ptr___system__dat__, #32
26ddc     34 93 62 FC | 	wrlong	arg01, ptr___system__dat__
26de0     20 68 86 F1 | 	sub	ptr___system__dat__, #32
26de4     01 7A 66 56 |  if_ne	neg	result1, #1
26de8     00 7A 06 A6 |  if_e	mov	result1, #0
26dec     04 00 90 FD | 	jmp	#LR__3584
26df0                 | LR__3583
26df0     00 7A 06 F6 | 	mov	result1, #0
26df4                 | LR__3584
26df4     E7 F0 03 F6 | 	mov	ptra, fp
26df8     F2 00 A0 FD | 	call	#popregs_
26dfc                 | __system___remove_ret
26dfc     2D 00 64 FD | 	ret
26e00                 | 
26e00                 | __system___mkdir
26e00     05 CA 05 F6 | 	mov	COUNT_, #5
26e04     E8 00 A0 FD | 	call	#pushregs_
26e08     34 A7 02 F6 | 	mov	local01, ptr___system__dat__
26e0c     84 A7 06 F1 | 	add	local01, #388
26e10     49 95 02 F6 | 	mov	arg02, arg01
26e14     53 93 02 F6 | 	mov	arg01, local01
26e18     00 96 06 F6 | 	mov	arg03, #0
26e1c     34 E6 BF FD | 	call	#__system____getvfsforfile
26e20     3D A9 0A F6 | 	mov	local02, result1 wz
26e24     10 00 90 AD |  if_e	jmp	#LR__3590
26e28     20 A8 06 F1 | 	add	local02, #32
26e2c     54 95 0A FB | 	rdlong	arg02, local02 wz
26e30     20 A8 86 F1 | 	sub	local02, #32
26e34     14 00 90 5D |  if_ne	jmp	#LR__3591
26e38                 | LR__3590
26e38     20 68 06 F1 | 	add	ptr___system__dat__, #32
26e3c     34 21 68 FC | 	wrlong	#16, ptr___system__dat__
26e40     20 68 86 F1 | 	sub	ptr___system__dat__, #32
26e44     01 7A 66 F6 | 	neg	result1, #1
26e48     60 00 90 FD | 	jmp	#LR__3593
26e4c                 | LR__3591
26e4c     38 A8 06 F1 | 	add	local02, #56
26e50     54 AB 02 FB | 	rdlong	local03, local02
26e54     55 AD 02 F6 | 	mov	local04, local03
26e58     13 AA 46 F7 | 	zerox	local03, #19
26e5c     14 AC 46 F0 | 	shr	local04, #20
26e60     02 AC 66 F0 | 	shl	local04, #2
26e64     2D AD 02 F1 | 	add	local04, __methods__
26e68     56 AD 02 FB | 	rdlong	local04, local04
26e6c     53 93 02 F6 | 	mov	arg01, local01
26e70     FF 95 06 F6 | 	mov	arg02, #511
26e74     32 AF 02 F6 | 	mov	local05, objptr
26e78     55 65 02 F6 | 	mov	objptr, local03
26e7c     2D AC 62 FD | 	call	local04
26e80     57 65 02 F6 | 	mov	objptr, local05
26e84     3D 93 0A F6 | 	mov	arg01, result1 wz
26e88     1C 00 90 AD |  if_e	jmp	#LR__3592
26e8c     49 93 6A F6 | 	neg	arg01, arg01 wz
26e90     20 68 06 F1 | 	add	ptr___system__dat__, #32
26e94     34 93 62 FC | 	wrlong	arg01, ptr___system__dat__
26e98     20 68 86 F1 | 	sub	ptr___system__dat__, #32
26e9c     01 7A 66 56 |  if_ne	neg	result1, #1
26ea0     00 7A 06 A6 |  if_e	mov	result1, #0
26ea4     04 00 90 FD | 	jmp	#LR__3593
26ea8                 | LR__3592
26ea8     00 7A 06 F6 | 	mov	result1, #0
26eac                 | LR__3593
26eac     E7 F0 03 F6 | 	mov	ptra, fp
26eb0     F2 00 A0 FD | 	call	#popregs_
26eb4                 | __system___mkdir_ret
26eb4     2D 00 64 FD | 	ret
26eb8                 | 
26eb8                 | __system___strerror
26eb8     00 92 56 F2 | 	cmps	arg01, #0 wc
26ebc     08 00 90 CD |  if_b	jmp	#LR__3600
26ec0     1A 92 56 F2 | 	cmps	arg01, #26 wc
26ec4     04 00 90 CD |  if_b	jmp	#LR__3601
26ec8                 | LR__3600
26ec8     19 92 06 F6 | 	mov	arg01, #25
26ecc                 | LR__3601
26ecc     02 92 66 F0 | 	shl	arg01, #2
26ed0     34 7B 02 F6 | 	mov	result1, ptr___system__dat__
26ed4     01 00 00 FF 
26ed8     E0 7A 06 F1 | 	add	result1, ##736
26edc     3D 93 02 F1 | 	add	arg01, result1
26ee0     49 7B 02 FB | 	rdlong	result1, arg01
26ee4                 | __system___strerror_ret
26ee4     2D 00 64 FD | 	ret
26ee8                 | 
26ee8                 | __system___int64_shl
26ee8     20 96 CE F7 | 	test	arg03, #32 wz
26eec     49 95 02 56 |  if_ne	mov	arg02, arg01
26ef0     00 92 06 56 |  if_ne	mov	arg01, #0
26ef4     1F 96 CE F7 | 	test	arg03, #31 wz
26ef8     18 00 90 AD |  if_e	jmp	#LR__3610
26efc     4B 95 62 F0 | 	shl	arg02, arg03
26f00     49 7B 02 F6 | 	mov	result1, arg01
26f04     4B 7D 62 F6 | 	neg	result2, arg03
26f08     3E 7B 42 F0 | 	shr	result1, result2
26f0c     3D 95 42 F5 | 	or	arg02, result1
26f10     4B 93 62 F0 | 	shl	arg01, arg03
26f14                 | LR__3610
26f14     4A 7D 02 F6 | 	mov	result2, arg02
26f18     49 7B 02 F6 | 	mov	result1, arg01
26f1c                 | __system___int64_shl_ret
26f1c     2D 00 64 FD | 	ret
26f20                 | 
26f20                 | __system___int64_sar
26f20     20 96 CE F7 | 	test	arg03, #32 wz
26f24     4A 93 02 56 |  if_ne	mov	arg01, arg02
26f28     1F 94 C6 50 |  if_ne	sar	arg02, #31
26f2c     1F 96 CE F7 | 	test	arg03, #31 wz
26f30     18 00 90 AD |  if_e	jmp	#LR__3620
26f34     4B 93 42 F0 | 	shr	arg01, arg03
26f38     4A 7B 02 F6 | 	mov	result1, arg02
26f3c     4B 7D 62 F6 | 	neg	result2, arg03
26f40     3E 7B 62 F0 | 	shl	result1, result2
26f44     3D 93 42 F5 | 	or	arg01, result1
26f48     4B 95 C2 F0 | 	sar	arg02, arg03
26f4c                 | LR__3620
26f4c     4A 7D 02 F6 | 	mov	result2, arg02
26f50     49 7B 02 F6 | 	mov	result1, arg01
26f54                 | __system___int64_sar_ret
26f54     2D 00 64 FD | 	ret
26f58                 | 
26f58                 | __system___usepins
26f58     14 68 06 F1 | 	add	ptr___system__dat__, #20
26f5c     34 81 02 FB | 	rdlong	_var01, ptr___system__dat__
26f60     14 68 86 F1 | 	sub	ptr___system__dat__, #20
26f64     40 93 CA F7 | 	test	arg01, _var01 wz
26f68     18 68 06 A1 |  if_e	add	ptr___system__dat__, #24
26f6c     34 83 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
26f70     18 68 86 A1 |  if_e	sub	ptr___system__dat__, #24
26f74     41 95 CA A7 |  if_e	test	arg02, _var02 wz
26f78     00 7A 06 56 |  if_ne	mov	result1, #0
26f7c     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
26f80     14 68 06 F1 | 	add	ptr___system__dat__, #20
26f84     34 83 02 FB | 	rdlong	_var02, ptr___system__dat__
26f88     49 83 42 F5 | 	or	_var02, arg01
26f8c     34 83 62 FC | 	wrlong	_var02, ptr___system__dat__
26f90     04 68 06 F1 | 	add	ptr___system__dat__, #4
26f94     34 83 02 FB | 	rdlong	_var02, ptr___system__dat__
26f98     4A 83 42 F5 | 	or	_var02, arg02
26f9c     34 83 62 FC | 	wrlong	_var02, ptr___system__dat__
26fa0     18 68 86 F1 | 	sub	ptr___system__dat__, #24
26fa4     01 7A 66 F6 | 	neg	result1, #1
26fa8                 | __system___usepins_ret
26fa8     2D 00 64 FD | 	ret
26fac                 | 
26fac                 | __system___freepins
26fac     14 68 06 F1 | 	add	ptr___system__dat__, #20
26fb0     34 81 02 FB | 	rdlong	_var01, ptr___system__dat__
26fb4     49 81 22 F5 | 	andn	_var01, arg01
26fb8     34 81 62 FC | 	wrlong	_var01, ptr___system__dat__
26fbc     04 68 06 F1 | 	add	ptr___system__dat__, #4
26fc0     34 81 02 FB | 	rdlong	_var01, ptr___system__dat__
26fc4     4A 81 22 F5 | 	andn	_var01, arg02
26fc8     34 81 62 FC | 	wrlong	_var01, ptr___system__dat__
26fcc     18 68 86 F1 | 	sub	ptr___system__dat__, #24
26fd0                 | __system___freepins_ret
26fd0     2D 00 64 FD | 	ret
26fd4                 | 
26fd4                 | __system___float_fromuns
26fd4     49 97 0A F6 | 	mov	arg03, arg01 wz
26fd8     4B 7B 02 A6 |  if_e	mov	result1, arg03
26fdc     24 00 90 AD |  if_e	jmp	#LR__3630
26fe0     4B 95 92 F7 | 	encod	arg02, arg03 wc
26fe4     01 94 06 C1 |  if_b	add	arg02, #1
26fe8     01 94 86 F1 | 	sub	arg02, #1
26fec     1F 92 06 F6 | 	mov	arg01, #31
26ff0     4A 93 82 F1 | 	sub	arg01, arg02
26ff4     49 97 62 F0 | 	shl	arg03, arg01
26ff8     02 96 46 F0 | 	shr	arg03, #2
26ffc     00 92 06 F6 | 	mov	arg01, #0
27000     58 09 B0 FD | 	call	#__system___float_Pack
27004                 | LR__3630
27004                 | __system___float_fromuns_ret
27004     2D 00 64 FD | 	ret
27008                 | 
27008                 | __system___float_add
27008     0F CA 05 F6 | 	mov	COUNT_, #15
2700c     E8 00 A0 FD | 	call	#pushregs_
27010     49 A7 02 F6 | 	mov	local01, arg01
27014     4A A9 02 F6 | 	mov	local02, arg02
27018     00 AA 06 F6 | 	mov	local03, #0
2701c     53 AD 02 F6 | 	mov	local04, local01
27020     56 AF 02 F6 | 	mov	local05, local04
27024     16 AE 46 F7 | 	zerox	local05, #22
27028     56 B1 02 F6 | 	mov	local06, local04
2702c     01 B0 66 F0 | 	shl	local06, #1
27030     18 B0 46 F0 | 	shr	local06, #24
27034     1F AC 46 F0 | 	shr	local04, #31
27038     54 93 02 F6 | 	mov	arg01, local02
2703c     49 7B 02 F6 | 	mov	result1, arg01
27040     3D B3 02 F6 | 	mov	local07, result1
27044     59 B5 02 F6 | 	mov	local08, local07
27048     16 B4 46 F7 | 	zerox	local08, #22
2704c     59 B7 02 F6 | 	mov	local09, local07
27050     01 B6 66 F0 | 	shl	local09, #1
27054     18 B6 46 F0 | 	shr	local09, #24
27058     5B B9 02 F6 | 	mov	local10, local09
2705c     1F B2 46 F0 | 	shr	local07, #31
27060     00 BA 06 F6 | 	mov	local11, #0
27064     00 BC 06 F6 | 	mov	local12, #0
27068     5C B1 12 F2 | 	cmp	local06, local10 wc
2706c     5C B1 0A 32 |  if_ae	cmp	local06, local10 wz
27070     2C 00 90 1D |  if_a	jmp	#LR__3640
27074     5A AF 12 32 |  if_ae	cmp	local05, local08 wc
27078     24 00 90 3D |  if_ae	jmp	#LR__3640
2707c     57 BF 02 F6 | 	mov	local13, local05
27080     5A AF 02 F6 | 	mov	local05, local08
27084     5F B5 02 F6 | 	mov	local08, local13
27088     58 BF 02 F6 | 	mov	local13, local06
2708c     5C B1 02 F6 | 	mov	local06, local10
27090     5F B9 02 F6 | 	mov	local10, local13
27094     56 BF 02 F6 | 	mov	local13, local04
27098     59 AD 02 F6 | 	mov	local04, local07
2709c     5F B3 02 F6 | 	mov	local07, local13
270a0                 | LR__3640
270a0     FF B0 0E F2 | 	cmp	local06, #255 wz
270a4     70 01 90 AD |  if_e	jmp	#LR__3655
270a8     00 B0 0E F2 | 	cmp	local06, #0 wz
270ac     AC 01 90 AD |  if_e	jmp	#LR__3657
270b0     17 AE 26 F4 | 	bith	local05, #23
270b4                 | LR__3641
270b4     00 B8 0E F2 | 	cmp	local10, #0 wz
270b8     F0 01 90 AD |  if_e	jmp	#LR__3661
270bc     17 B4 26 F4 | 	bith	local08, #23
270c0                 | LR__3642
270c0     7F B0 86 F1 | 	sub	local06, #127
270c4     7F B8 86 F1 | 	sub	local10, #127
270c8     58 C1 02 F6 | 	mov	local14, local06
270cc     5C C1 82 F1 | 	sub	local14, local10
270d0     D7 14 48 FB | 	callpa	#(@LR__3644-@LR__3643)>>2,fcache_load_ptr_
270d4                 | LR__3643
270d4     20 C0 56 F2 | 	cmps	local14, #32 wc
270d8     20 00 90 CD |  if_b	jmp	#LR__3645
270dc     5A B7 02 F6 | 	mov	local09, local08
270e0     00 BA 0E F2 | 	cmp	local11, #0 wz
270e4     6F BA 62 FD | 	wrnz	local11
270e8     5D B7 42 F5 | 	or	local09, local11
270ec     5B BB 02 F6 | 	mov	local11, local09
270f0     00 B4 06 F6 | 	mov	local08, #0
270f4     20 C0 86 F1 | 	sub	local14, #32
270f8     D8 FF 9F FD | 	jmp	#LR__3643
270fc                 | LR__3644
270fc                 | LR__3645
270fc     00 C0 0E F2 | 	cmp	local14, #0 wz
27100     38 00 90 AD |  if_e	jmp	#LR__3646
27104     5A BF 02 F6 | 	mov	local13, local08
27108     20 B8 06 F6 | 	mov	local10, #32
2710c     60 B9 82 F1 | 	sub	local10, local14
27110     5C BF 62 F0 | 	shl	local13, local10
27114     5D B9 02 F6 | 	mov	local10, local11
27118     20 B6 06 F6 | 	mov	local09, #32
2711c     60 B7 82 F1 | 	sub	local09, local14
27120     5B B9 6A F0 | 	shl	local10, local09 wz
27124     60 BB 42 F0 | 	shr	local11, local14
27128     60 B5 42 F0 | 	shr	local08, local14
2712c     5F BB 42 F5 | 	or	local11, local13
27130     00 C2 06 F6 | 	mov	local15, #0
27134     01 C2 06 56 |  if_ne	mov	local15, #1
27138     61 BB 42 F5 | 	or	local11, local15
2713c                 | LR__3646
2713c     56 C3 02 F6 | 	mov	local15, local04
27140     59 C3 62 F5 | 	xor	local15, local07
27144     01 C2 CE F7 | 	test	local15, #1 wz
27148     18 00 90 AD |  if_e	jmp	#LR__3647
2714c     5A B5 22 F6 | 	not	local08, local08
27150     5D BB 22 F6 | 	not	local11, local11
27154     01 BA 0E F1 | 	add	local11, #1 wz
27158     00 C2 06 F6 | 	mov	local15, #0
2715c     01 C2 06 A6 |  if_e	mov	local15, #1
27160     61 B5 02 F1 | 	add	local08, local15
27164                 | LR__3647
27164     5D BD 12 F1 | 	add	local12, local11 wc
27168     5A AF 22 F1 | 	addx	local05, local08
2716c     00 AE 56 F2 | 	cmps	local05, #0 wc
27170     1C 00 90 3D |  if_ae	jmp	#LR__3648
27174     01 AC 66 F5 | 	xor	local04, #1
27178     57 AF 22 F6 | 	not	local05, local05
2717c     5E BD 22 F6 | 	not	local12, local12
27180     01 BC 0E F1 | 	add	local12, #1 wz
27184     00 C2 06 F6 | 	mov	local15, #0
27188     01 C2 06 A6 |  if_e	mov	local15, #1
2718c     61 AF 02 F1 | 	add	local05, local15
27190                 | LR__3648
27190     00 80 00 FF 
27194     00 AE 16 F2 | 	cmp	local05, ##16777216 wc
27198     28 00 90 CD |  if_b	jmp	#LR__3649
2719c     01 B0 06 F1 | 	add	local06, #1
271a0     5E C1 02 F6 | 	mov	local14, local12
271a4     01 C0 06 F5 | 	and	local14, #1
271a8     01 BC 46 F0 | 	shr	local12, #1
271ac     57 C3 02 F6 | 	mov	local15, local05
271b0     1F C2 66 F0 | 	shl	local15, #31
271b4     61 BD 42 F5 | 	or	local12, local15
271b8     60 BD 42 F5 | 	or	local12, local14
271bc     01 AE 46 F0 | 	shr	local05, #1
271c0     3C 00 90 FD | 	jmp	#LR__3654
271c4                 | LR__3649
271c4     00 40 00 FF 
271c8     00 AE 16 F2 | 	cmp	local05, ##8388608 wc
271cc     30 00 90 3D |  if_ae	jmp	#LR__3653
271d0     00 AE 0E F2 | 	cmp	local05, #0 wz
271d4     00 BC 0E A2 |  if_e	cmp	local12, #0 wz
271d8     08 AC 46 A5 |  if_e	or	local04, #8
271dc     01 AC 26 A5 |  if_e	andn	local04, #1
271e0     1C 00 90 AD |  if_e	jmp	#LR__3652
271e4                 | LR__3650
271e4     00 40 00 FF 
271e8     00 AE 16 F2 | 	cmp	local05, ##8388608 wc
271ec     10 00 90 3D |  if_ae	jmp	#LR__3651
271f0     5E BD 12 F1 | 	add	local12, local12 wc
271f4     57 AF 22 F1 | 	addx	local05, local05
271f8     01 B0 86 F1 | 	sub	local06, #1
271fc     E4 FF 9F FD | 	jmp	#LR__3650
27200                 | LR__3651
27200                 | LR__3652
27200                 | LR__3653
27200                 | LR__3654
27200     57 93 02 F6 | 	mov	arg01, local05
27204     5E 95 02 F6 | 	mov	arg02, local12
27208     58 97 02 F6 | 	mov	arg03, local06
2720c     56 99 02 F6 | 	mov	arg04, local04
27210     50 34 B0 FD | 	call	#__system__pack_0698
27214     DC 00 90 FD | 	jmp	#LR__3665
27218                 | LR__3655
27218     FF B8 0E F2 | 	cmp	local10, #255 wz
2721c     10 00 90 5D |  if_ne	jmp	#LR__3656
27220     56 B3 0A F2 | 	cmp	local07, local04 wz
27224     00 F8 3F 5F 
27228     00 7A 06 56 |  if_ne	mov	result1, ##2146435072
2722c     C4 00 90 5D |  if_ne	jmp	#LR__3665
27230                 | LR__3656
27230     00 AE 0E F2 | 	cmp	local05, #0 wz
27234     00 F8 3F 5F 
27238     00 7A 06 56 |  if_ne	mov	result1, ##2146435072
2723c     B4 00 90 5D |  if_ne	jmp	#LR__3665
27240     5E 95 02 F6 | 	mov	arg02, local12
27244     58 97 02 F6 | 	mov	arg03, local06
27248     56 99 02 F6 | 	mov	arg04, local04
2724c     02 98 46 F5 | 	or	arg04, #2
27250     57 93 02 F6 | 	mov	arg01, local05
27254     0C 34 B0 FD | 	call	#__system__pack_0698
27258     98 00 90 FD | 	jmp	#LR__3665
2725c                 | LR__3657
2725c     00 AE 0E F2 | 	cmp	local05, #0 wz
27260     28 00 90 AD |  if_e	jmp	#LR__3660
27264     01 AE 66 F0 | 	shl	local05, #1
27268     D7 0E 48 FB | 	callpa	#(@LR__3659-@LR__3658)>>2,fcache_load_ptr_
2726c                 | LR__3658
2726c     00 40 00 FF 
27270     00 AE 16 F2 | 	cmp	local05, ##8388608 wc
27274     58 C3 02 C6 |  if_b	mov	local15, local06
27278     01 C2 86 C1 |  if_b	sub	local15, #1
2727c     61 B1 02 C6 |  if_b	mov	local06, local15
27280     01 AE 66 C0 |  if_b	shl	local05, #1
27284     E4 FF 9F CD |  if_b	jmp	#LR__3658
27288                 | LR__3659
27288     28 FE 9F FD | 	jmp	#LR__3641
2728c                 | LR__3660
2728c     59 AD 02 F5 | 	and	local04, local07
27290     56 99 02 F6 | 	mov	arg04, local04
27294     08 98 46 F5 | 	or	arg04, #8
27298     00 92 06 F6 | 	mov	arg01, #0
2729c     00 94 06 F6 | 	mov	arg02, #0
272a0     00 96 06 F6 | 	mov	arg03, #0
272a4     BC 33 B0 FD | 	call	#__system__pack_0698
272a8     48 00 90 FD | 	jmp	#LR__3665
272ac                 | LR__3661
272ac     00 B4 0E F2 | 	cmp	local08, #0 wz
272b0     28 00 90 AD |  if_e	jmp	#LR__3664
272b4     01 B4 66 F0 | 	shl	local08, #1
272b8     D7 0E 48 FB | 	callpa	#(@LR__3663-@LR__3662)>>2,fcache_load_ptr_
272bc                 | LR__3662
272bc     00 40 00 FF 
272c0     00 B4 16 F2 | 	cmp	local08, ##8388608 wc
272c4     5C C3 02 C6 |  if_b	mov	local15, local10
272c8     01 C2 86 C1 |  if_b	sub	local15, #1
272cc     61 B9 02 C6 |  if_b	mov	local10, local15
272d0     01 B4 66 C0 |  if_b	shl	local08, #1
272d4     E4 FF 9F CD |  if_b	jmp	#LR__3662
272d8                 | LR__3663
272d8     E4 FD 9F FD | 	jmp	#LR__3642
272dc                 | LR__3664
272dc     7F B0 86 F1 | 	sub	local06, #127
272e0     57 93 02 F6 | 	mov	arg01, local05
272e4     5E 95 02 F6 | 	mov	arg02, local12
272e8     58 97 02 F6 | 	mov	arg03, local06
272ec     56 99 02 F6 | 	mov	arg04, local04
272f0     70 33 B0 FD | 	call	#__system__pack_0698
272f4                 | LR__3665
272f4     E7 F0 03 F6 | 	mov	ptra, fp
272f8     F2 00 A0 FD | 	call	#popregs_
272fc                 | __system___float_add_ret
272fc     2D 00 64 FD | 	ret
27300                 | 
27300                 | __system___float_sqrt
27300     04 CA 05 F6 | 	mov	COUNT_, #4
27304     E8 00 A0 FD | 	call	#pushregs_
27308     49 A7 02 F6 | 	mov	local01, arg01
2730c     49 7B 02 F6 | 	mov	result1, arg01
27310     3D A9 02 F6 | 	mov	local02, result1
27314     54 AB 02 F6 | 	mov	local03, local02
27318     16 AA 46 F7 | 	zerox	local03, #22
2731c     54 AD 02 F6 | 	mov	local04, local02
27320     01 AC 66 F0 | 	shl	local04, #1
27324     18 AC 4E F0 | 	shr	local04, #24 wz
27328     1F A8 46 F0 | 	shr	local02, #31
2732c     70 00 90 AD |  if_e	jmp	#LR__3671
27330     17 AA 26 F4 | 	bith	local03, #23
27334                 | LR__3670
27334     00 A8 0E F2 | 	cmp	local02, #0 wz
27338     00 F8 3F 5F 
2733c     00 7A 06 56 |  if_ne	mov	result1, ##2146435072
27340     88 00 90 5D |  if_ne	jmp	#LR__3674
27344     FF AC 0E F2 | 	cmp	local04, #255 wz
27348     53 7B 02 A6 |  if_e	mov	result1, local01
2734c     7C 00 90 AD |  if_e	jmp	#LR__3674
27350     7F AC 86 F1 | 	sub	local04, #127
27354     01 AC CE F7 | 	test	local04, #1 wz
27358     01 AA 66 50 |  if_ne	shl	local03, #1
2735c     05 AA 66 F0 | 	shl	local03, #5
27360     55 01 38 FD | 	qsqrt	#0, local03
27364     01 AC 86 51 |  if_ne	sub	local04, #1
27368     56 AD 52 F6 | 	abs	local04, local04 wc
2736c     01 AC 46 F0 | 	shr	local04, #1
27370     56 97 82 F6 | 	negc	arg03, local04
27374     54 99 02 F6 | 	mov	arg04, local02
27378     18 92 62 FD | 	getqx	arg01
2737c     49 95 02 F6 | 	mov	arg02, arg01
27380     19 94 66 F0 | 	shl	arg02, #25
27384     07 92 46 F0 | 	shr	arg01, #7
27388     00 80 00 FF 
2738c     01 92 16 F2 | 	cmp	arg01, ##16777217 wc
27390     01 96 06 31 |  if_ae	add	arg03, #1
27394     01 92 46 30 |  if_ae	shr	arg01, #1
27398     C8 32 B0 FD | 	call	#__system__pack_0698
2739c     2C 00 90 FD | 	jmp	#LR__3674
273a0                 | LR__3671
273a0     00 AA 0E F2 | 	cmp	local03, #0 wz
273a4     53 7B 02 A6 |  if_e	mov	result1, local01
273a8     20 00 90 AD |  if_e	jmp	#LR__3674
273ac     01 AA 66 F0 | 	shl	local03, #1
273b0     D7 0A 48 FB | 	callpa	#(@LR__3673-@LR__3672)>>2,fcache_load_ptr_
273b4                 | LR__3672
273b4     00 40 00 FF 
273b8     00 AA 16 F2 | 	cmp	local03, ##8388608 wc
273bc     01 AC 86 C1 |  if_b	sub	local04, #1
273c0     01 AA 66 C0 |  if_b	shl	local03, #1
273c4     EC FF 9F CD |  if_b	jmp	#LR__3672
273c8                 | LR__3673
273c8     68 FF 9F FD | 	jmp	#LR__3670
273cc                 | LR__3674
273cc     E7 F0 03 F6 | 	mov	ptra, fp
273d0     F2 00 A0 FD | 	call	#popregs_
273d4                 | __system___float_sqrt_ret
273d4     2D 00 64 FD | 	ret
273d8                 | 
273d8                 | __system___float_mul
273d8     0B CA 05 F6 | 	mov	COUNT_, #11
273dc     E8 00 A0 FD | 	call	#pushregs_
273e0     49 A7 02 F6 | 	mov	local01, arg01
273e4     4A A9 02 F6 | 	mov	local02, arg02
273e8     53 AB 02 F6 | 	mov	local03, local01
273ec     55 AD 02 F6 | 	mov	local04, local03
273f0     16 AC 46 F7 | 	zerox	local04, #22
273f4     55 AF 02 F6 | 	mov	local05, local03
273f8     01 AE 66 F0 | 	shl	local05, #1
273fc     18 AE 46 F0 | 	shr	local05, #24
27400     1F AA 46 F0 | 	shr	local03, #31
27404     54 7B 02 F6 | 	mov	result1, local02
27408     3D B1 02 F6 | 	mov	local06, result1
2740c     58 B3 02 F6 | 	mov	local07, local06
27410     16 B2 46 F7 | 	zerox	local07, #22
27414     58 B5 02 F6 | 	mov	local08, local06
27418     01 B4 66 F0 | 	shl	local08, #1
2741c     18 B4 46 F0 | 	shr	local08, #24
27420     1F B0 46 F0 | 	shr	local06, #31
27424     58 AB 62 F5 | 	xor	local03, local06
27428     FF AE 0E F2 | 	cmp	local05, #255 wz
2742c     90 00 90 AD |  if_e	jmp	#LR__3683
27430     FF B4 0E F2 | 	cmp	local08, #255 wz
27434     D8 00 90 AD |  if_e	jmp	#LR__3685
27438     00 AE 0E F2 | 	cmp	local05, #0 wz
2743c     0C 01 90 AD |  if_e	jmp	#LR__3686
27440     17 AC 26 F4 | 	bith	local04, #23
27444                 | LR__3680
27444     00 B4 0E F2 | 	cmp	local08, #0 wz
27448     44 01 90 AD |  if_e	jmp	#LR__3690
2744c     17 B2 26 F4 | 	bith	local07, #23
27450                 | LR__3681
27450     56 A9 02 F6 | 	mov	local02, local04
27454     04 A8 66 F0 | 	shl	local02, #4
27458     59 B1 02 F6 | 	mov	local06, local07
2745c     05 B0 66 F0 | 	shl	local06, #5
27460     58 A9 02 FD | 	qmul	local02, local06
27464     5A AF 02 F1 | 	add	local05, local08
27468     FE AE 86 F1 | 	sub	local05, #254
2746c     57 B7 02 F6 | 	mov	local09, local05
27470     04 AC 66 F0 | 	shl	local04, #4
27474     05 B2 66 F0 | 	shl	local07, #5
27478     18 B8 62 FD | 	getqx	local10
2747c     59 AD 02 FD | 	qmul	local04, local07
27480     19 BA 62 FD | 	getqy	local11
27484     00 80 00 FF 
27488     00 BA 16 F2 | 	cmp	local11, ##16777216 wc
2748c     18 00 90 CD |  if_b	jmp	#LR__3682
27490     01 B6 06 F1 | 	add	local09, #1
27494     01 B8 46 F0 | 	shr	local10, #1
27498     5D B5 02 F6 | 	mov	local08, local11
2749c     1F B4 66 F0 | 	shl	local08, #31
274a0     5A B9 42 F5 | 	or	local10, local08
274a4     01 BA 46 F0 | 	shr	local11, #1
274a8                 | LR__3682
274a8     5D 93 02 F6 | 	mov	arg01, local11
274ac     5C 95 02 F6 | 	mov	arg02, local10
274b0     5B 97 02 F6 | 	mov	arg03, local09
274b4     55 99 02 F6 | 	mov	arg04, local03
274b8     A8 31 B0 FD | 	call	#__system__pack_0698
274bc     10 01 90 FD | 	jmp	#LR__3694
274c0                 | LR__3683
274c0     00 AC 0E F2 | 	cmp	local04, #0 wz
274c4     53 7B 02 56 |  if_ne	mov	result1, local01
274c8     04 01 90 5D |  if_ne	jmp	#LR__3694
274cc     FF B4 56 F2 | 	cmps	local08, #255 wc
274d0     00 B4 0E C2 |  if_b	cmp	local08, #0 wz
274d4     00 B2 0E 82 |  if_c_and_z	cmp	local07, #0 wz
274d8     18 00 90 4D |  if_c_and_nz	jmp	#LR__3684
274dc     00 F8 3F CF 
274e0     00 7A 06 C6 |  if_b	mov	result1, ##2146435072
274e4     E8 00 90 CD |  if_b	jmp	#LR__3694
274e8     00 B2 0E F2 | 	cmp	local07, #0 wz
274ec     54 7B 02 56 |  if_ne	mov	result1, local02
274f0     DC 00 90 5D |  if_ne	jmp	#LR__3694
274f4                 | LR__3684
274f4     02 AA 46 F5 | 	or	local03, #2
274f8     00 92 06 F6 | 	mov	arg01, #0
274fc     00 94 06 F6 | 	mov	arg02, #0
27500     57 97 02 F6 | 	mov	arg03, local05
27504     55 99 02 F6 | 	mov	arg04, local03
27508     58 31 B0 FD | 	call	#__system__pack_0698
2750c     C0 00 90 FD | 	jmp	#LR__3694
27510                 | LR__3685
27510     00 AE 0E F2 | 	cmp	local05, #0 wz
27514     00 AC 0E A2 |  if_e	cmp	local04, #0 wz
27518     00 F8 3F AF 
2751c     00 7A 06 A6 |  if_e	mov	result1, ##2146435072
27520     AC 00 90 AD |  if_e	jmp	#LR__3694
27524     00 B2 0E F2 | 	cmp	local07, #0 wz
27528     54 7B 02 56 |  if_ne	mov	result1, local02
2752c     A0 00 90 5D |  if_ne	jmp	#LR__3694
27530     5A 97 02 F6 | 	mov	arg03, local08
27534     55 99 02 F6 | 	mov	arg04, local03
27538     02 98 46 F5 | 	or	arg04, #2
2753c     00 92 06 F6 | 	mov	arg01, #0
27540     00 94 06 F6 | 	mov	arg02, #0
27544     1C 31 B0 FD | 	call	#__system__pack_0698
27548     84 00 90 FD | 	jmp	#LR__3694
2754c                 | LR__3686
2754c     00 AC 0E F2 | 	cmp	local04, #0 wz
27550     20 00 90 AD |  if_e	jmp	#LR__3689
27554     01 AC 66 F0 | 	shl	local04, #1
27558     D7 0A 48 FB | 	callpa	#(@LR__3688-@LR__3687)>>2,fcache_load_ptr_
2755c                 | LR__3687
2755c     00 40 00 FF 
27560     00 AC 16 F2 | 	cmp	local04, ##8388608 wc
27564     01 AE 86 C1 |  if_b	sub	local05, #1
27568     01 AC 66 C0 |  if_b	shl	local04, #1
2756c     EC FF 9F CD |  if_b	jmp	#LR__3687
27570                 | LR__3688
27570     D0 FE 9F FD | 	jmp	#LR__3680
27574                 | LR__3689
27574     08 AA 46 F5 | 	or	local03, #8
27578     00 92 06 F6 | 	mov	arg01, #0
2757c     00 94 06 F6 | 	mov	arg02, #0
27580     00 96 06 F6 | 	mov	arg03, #0
27584     55 99 02 F6 | 	mov	arg04, local03
27588     D8 30 B0 FD | 	call	#__system__pack_0698
2758c     40 00 90 FD | 	jmp	#LR__3694
27590                 | LR__3690
27590     00 B2 0E F2 | 	cmp	local07, #0 wz
27594     20 00 90 AD |  if_e	jmp	#LR__3693
27598     01 B2 66 F0 | 	shl	local07, #1
2759c     D7 0A 48 FB | 	callpa	#(@LR__3692-@LR__3691)>>2,fcache_load_ptr_
275a0                 | LR__3691
275a0     00 40 00 FF 
275a4     00 B2 16 F2 | 	cmp	local07, ##8388608 wc
275a8     01 B4 86 C1 |  if_b	sub	local08, #1
275ac     01 B2 66 C0 |  if_b	shl	local07, #1
275b0     EC FF 9F CD |  if_b	jmp	#LR__3691
275b4                 | LR__3692
275b4     98 FE 9F FD | 	jmp	#LR__3681
275b8                 | LR__3693
275b8     08 AA 46 F5 | 	or	local03, #8
275bc     00 92 06 F6 | 	mov	arg01, #0
275c0     00 94 06 F6 | 	mov	arg02, #0
275c4     00 96 06 F6 | 	mov	arg03, #0
275c8     55 99 02 F6 | 	mov	arg04, local03
275cc     94 30 B0 FD | 	call	#__system__pack_0698
275d0                 | LR__3694
275d0     E7 F0 03 F6 | 	mov	ptra, fp
275d4     F2 00 A0 FD | 	call	#popregs_
275d8                 | __system___float_mul_ret
275d8     2D 00 64 FD | 	ret
275dc                 | 
275dc                 | __system___float_div
275dc     0E CA 05 F6 | 	mov	COUNT_, #14
275e0     E8 00 A0 FD | 	call	#pushregs_
275e4     49 AB 02 F6 | 	mov	local03, arg01
275e8     4A AD 02 F6 | 	mov	local04, arg02
275ec     55 AF 02 F6 | 	mov	local05, local03
275f0     57 B1 02 F6 | 	mov	local06, local05
275f4     16 B0 46 F7 | 	zerox	local06, #22
275f8     57 B3 02 F6 | 	mov	local07, local05
275fc     01 B2 66 F0 | 	shl	local07, #1
27600     18 B2 46 F0 | 	shr	local07, #24
27604     1F AE 46 F0 | 	shr	local05, #31
27608     56 7B 02 F6 | 	mov	result1, local04
2760c     3D B5 02 F6 | 	mov	local08, result1
27610     5A B7 02 F6 | 	mov	local09, local08
27614     16 B6 46 F7 | 	zerox	local09, #22
27618     5A B9 02 F6 | 	mov	local10, local08
2761c     01 B8 66 F0 | 	shl	local10, #1
27620     18 B8 46 F0 | 	shr	local10, #24
27624     1F B4 46 F0 | 	shr	local08, #31
27628     5A AF 62 F5 | 	xor	local05, local08
2762c     FF B2 0E F2 | 	cmp	local07, #255 wz
27630     D4 00 90 AD |  if_e	jmp	#LR__3705
27634     FF B8 0E F2 | 	cmp	local10, #255 wz
27638     04 01 90 AD |  if_e	jmp	#LR__3706
2763c     00 B2 0E F2 | 	cmp	local07, #0 wz
27640     24 01 90 AD |  if_e	jmp	#LR__3707
27644     17 B0 26 F4 | 	bith	local06, #23
27648                 | LR__3700
27648     00 B8 0E F2 | 	cmp	local10, #0 wz
2764c     70 01 90 AD |  if_e	jmp	#LR__3711
27650     17 B6 26 F4 | 	bith	local09, #23
27654                 | LR__3701
27654     5C B3 82 F1 | 	sub	local07, local10
27658     59 BB 02 F6 | 	mov	local11, local07
2765c     58 93 02 F6 | 	mov	arg01, local06
27660     02 92 46 F0 | 	shr	arg01, #2
27664     1E B0 66 F0 | 	shl	local06, #30
27668     58 95 02 F6 | 	mov	arg02, local06
2766c     5B 97 02 F6 | 	mov	arg03, local09
27670     28 92 62 FD | 	setq	arg01
27674     4B 95 12 FD | 	qdiv	arg02, arg03
27678     00 BC 06 F6 | 	mov	local12, #0
2767c     18 A6 62 FD | 	getqx	local01
27680     19 7C 62 FD | 	getqy	result2
27684     3E A9 02 F6 | 	mov	local02, result2
27688     53 BF 02 F6 | 	mov	local13, local01
2768c     00 A8 4E F2 | 	cmps	local02, #0 wz
27690     5F C1 02 F6 | 	mov	local14, local13
27694     19 C0 66 F0 | 	shl	local14, #25
27698     01 BC 06 56 |  if_ne	mov	local12, #1
2769c     5E C1 42 F5 | 	or	local14, local12
276a0     07 BE 46 F0 | 	shr	local13, #7
276a4     00 80 00 FF 
276a8     00 BE 16 F2 | 	cmp	local13, ##16777216 wc
276ac     1C 00 90 CD |  if_b	jmp	#LR__3702
276b0     01 BA 06 F1 | 	add	local11, #1
276b4     01 C0 46 F0 | 	shr	local14, #1
276b8     5F BD 02 F6 | 	mov	local12, local13
276bc     1F BC 66 F0 | 	shl	local12, #31
276c0     5E C1 42 F5 | 	or	local14, local12
276c4     01 BE 46 F0 | 	shr	local13, #1
276c8     24 00 90 FD | 	jmp	#LR__3704
276cc                 | LR__3702
276cc     00 40 00 FF 
276d0     00 BE 16 F2 | 	cmp	local13, ##8388608 wc
276d4     18 00 90 3D |  if_ae	jmp	#LR__3703
276d8     01 BA 86 F1 | 	sub	local11, #1
276dc     01 BE 66 F0 | 	shl	local13, #1
276e0     60 BD 02 F6 | 	mov	local12, local14
276e4     1F BC 46 F0 | 	shr	local12, #31
276e8     5E BF 42 F5 | 	or	local13, local12
276ec     01 C0 66 F0 | 	shl	local14, #1
276f0                 | LR__3703
276f0                 | LR__3704
276f0     5F 93 02 F6 | 	mov	arg01, local13
276f4     60 95 02 F6 | 	mov	arg02, local14
276f8     5D 97 02 F6 | 	mov	arg03, local11
276fc     57 99 02 F6 | 	mov	arg04, local05
27700     60 2F B0 FD | 	call	#__system__pack_0698
27704     F8 00 90 FD | 	jmp	#LR__3715
27708                 | LR__3705
27708     00 B0 0E F2 | 	cmp	local06, #0 wz
2770c     55 7B 02 56 |  if_ne	mov	result1, local03
27710     EC 00 90 5D |  if_ne	jmp	#LR__3715
27714     FF B8 0E F2 | 	cmp	local10, #255 wz
27718     00 F8 3F AF 
2771c     00 7A 06 A6 |  if_e	mov	result1, ##2146435072
27720     DC 00 90 AD |  if_e	jmp	#LR__3715
27724     02 AE 46 F5 | 	or	local05, #2
27728     00 92 06 F6 | 	mov	arg01, #0
2772c     00 94 06 F6 | 	mov	arg02, #0
27730     59 97 02 F6 | 	mov	arg03, local07
27734     57 99 02 F6 | 	mov	arg04, local05
27738     28 2F B0 FD | 	call	#__system__pack_0698
2773c     C0 00 90 FD | 	jmp	#LR__3715
27740                 | LR__3706
27740     00 B6 0E F2 | 	cmp	local09, #0 wz
27744     56 7B 02 56 |  if_ne	mov	result1, local04
27748     B4 00 90 5D |  if_ne	jmp	#LR__3715
2774c     57 99 02 F6 | 	mov	arg04, local05
27750     08 98 46 F5 | 	or	arg04, #8
27754     00 92 06 F6 | 	mov	arg01, #0
27758     00 94 06 F6 | 	mov	arg02, #0
2775c     00 96 06 F6 | 	mov	arg03, #0
27760     00 2F B0 FD | 	call	#__system__pack_0698
27764     98 00 90 FD | 	jmp	#LR__3715
27768                 | LR__3707
27768     00 B0 0E F2 | 	cmp	local06, #0 wz
2776c     20 00 90 AD |  if_e	jmp	#LR__3710
27770     01 B0 66 F0 | 	shl	local06, #1
27774     D7 0A 48 FB | 	callpa	#(@LR__3709-@LR__3708)>>2,fcache_load_ptr_
27778                 | LR__3708
27778     00 40 00 FF 
2777c     00 B0 16 F2 | 	cmp	local06, ##8388608 wc
27780     01 B2 86 C1 |  if_b	sub	local07, #1
27784     01 B0 66 C0 |  if_b	shl	local06, #1
27788     EC FF 9F CD |  if_b	jmp	#LR__3708
2778c                 | LR__3709
2778c     B8 FE 9F FD | 	jmp	#LR__3700
27790                 | LR__3710
27790     00 B8 0E F2 | 	cmp	local10, #0 wz
27794     00 B6 0E A2 |  if_e	cmp	local09, #0 wz
27798     00 F8 3F AF 
2779c     00 7A 06 A6 |  if_e	mov	result1, ##2146435072
277a0     5C 00 90 AD |  if_e	jmp	#LR__3715
277a4     57 99 02 F6 | 	mov	arg04, local05
277a8     08 98 46 F5 | 	or	arg04, #8
277ac     00 92 06 F6 | 	mov	arg01, #0
277b0     00 94 06 F6 | 	mov	arg02, #0
277b4     00 96 06 F6 | 	mov	arg03, #0
277b8     A8 2E B0 FD | 	call	#__system__pack_0698
277bc     40 00 90 FD | 	jmp	#LR__3715
277c0                 | LR__3711
277c0     00 B6 0E F2 | 	cmp	local09, #0 wz
277c4     20 00 90 AD |  if_e	jmp	#LR__3714
277c8     01 B6 66 F0 | 	shl	local09, #1
277cc     D7 0A 48 FB | 	callpa	#(@LR__3713-@LR__3712)>>2,fcache_load_ptr_
277d0                 | LR__3712
277d0     00 40 00 FF 
277d4     00 B6 16 F2 | 	cmp	local09, ##8388608 wc
277d8     01 B8 86 C1 |  if_b	sub	local10, #1
277dc     01 B6 66 C0 |  if_b	shl	local09, #1
277e0     EC FF 9F CD |  if_b	jmp	#LR__3712
277e4                 | LR__3713
277e4     6C FE 9F FD | 	jmp	#LR__3701
277e8                 | LR__3714
277e8     02 AE 46 F5 | 	or	local05, #2
277ec     00 92 06 F6 | 	mov	arg01, #0
277f0     00 94 06 F6 | 	mov	arg02, #0
277f4     00 96 06 F6 | 	mov	arg03, #0
277f8     57 99 02 F6 | 	mov	arg04, local05
277fc     64 2E B0 FD | 	call	#__system__pack_0698
27800                 | LR__3715
27800     E7 F0 03 F6 | 	mov	ptra, fp
27804     F2 00 A0 FD | 	call	#popregs_
27808                 | __system___float_div_ret
27808     2D 00 64 FD | 	ret
2780c                 | 
2780c                 | __system___float_cmp
2780c     00 C0 3F FF 
27810     01 92 56 F2 | 	cmps	arg01, ##2139095041 wc
27814     00 C0 3F CF 
27818     01 94 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
2781c     4B 7B 02 36 |  if_ae	mov	result1, arg03
27820     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
27824     00 C0 7F FF 
27828     01 92 16 F2 | 	cmp	arg01, ##-8388607 wc
2782c     00 C0 7F CF 
27830     01 92 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
27834     4B 7B 02 36 |  if_ae	mov	result1, arg03
27838     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
2783c     00 92 56 F2 | 	cmps	arg01, #0 wc
27840     2C 00 90 3D |  if_ae	jmp	#LR__3720
27844     00 94 56 F2 | 	cmps	arg02, #0 wc
27848     4A 7B 02 C6 |  if_b	mov	result1, arg02
2784c     49 7B 82 C1 |  if_b	sub	result1, arg01
27850     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
27854     00 94 0E F2 | 	cmp	arg02, #0 wz
27858     00 00 40 AF 
2785c     00 92 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
27860     00 7A 06 A6 |  if_e	mov	result1, #0
27864     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
27868     01 7A 66 F6 | 	neg	result1, #1
2786c     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
27870                 | LR__3720
27870     00 94 56 F2 | 	cmps	arg02, #0 wc
27874     1C 00 90 3D |  if_ae	jmp	#LR__3721
27878     00 92 0E F2 | 	cmp	arg01, #0 wz
2787c     00 00 40 AF 
27880     00 94 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
27884     00 7A 06 A6 |  if_e	mov	result1, #0
27888     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
2788c     01 7A 06 F6 | 	mov	result1, #1
27890     08 00 90 FD | 	jmp	#__system___float_cmp_ret
27894                 | LR__3721
27894     4A 93 82 F1 | 	sub	arg01, arg02
27898     49 7B 02 F6 | 	mov	result1, arg01
2789c                 | __system___float_cmp_ret
2789c     2D 00 64 FD | 	ret
278a0                 | 
278a0                 | __system___float_tointeger
278a0     02 CA 05 F6 | 	mov	COUNT_, #2
278a4     E8 00 A0 FD | 	call	#pushregs_
278a8     5C 00 B0 FD | 	call	#__system___float_Unpack
278ac     3D A7 02 F6 | 	mov	local01, result1
278b0     1F 7C 56 F2 | 	cmps	result2, #31 wc
278b4     00 A6 0E 32 |  if_ae	cmp	local01, #0 wz
278b8     1F A8 C6 19 |  if_a	decod	local02, #31
278bc     1E A8 CE 29 |  if_nc_and_z	bmask	local02, #30
278c0     54 7F 02 36 |  if_ae	mov	result3, local02
278c4     30 00 90 3D |  if_ae	jmp	#LR__3731
278c8     FF FF 7F FF 
278cc     FF 7D 56 F2 | 	cmps	result2, ##-1 wc
278d0     00 7E 06 C6 |  if_b	mov	result3, #0
278d4     20 00 90 CD |  if_b	jmp	#LR__3730
278d8     02 7E 66 F0 | 	shl	result3, #2
278dc     1E A8 06 F6 | 	mov	local02, #30
278e0     3E A9 82 F1 | 	sub	local02, result2
278e4     54 7F 42 F0 | 	shr	result3, local02
278e8     4A 7F 02 F1 | 	add	result3, arg02
278ec     01 7E 46 F0 | 	shr	result3, #1
278f0     00 A6 0E F2 | 	cmp	local01, #0 wz
278f4     3F 7F 62 56 |  if_ne	neg	result3, result3
278f8                 | LR__3730
278f8                 | LR__3731
278f8     3F 7B 02 F6 | 	mov	result1, result3
278fc     E7 F0 03 F6 | 	mov	ptra, fp
27900     F2 00 A0 FD | 	call	#popregs_
27904                 | __system___float_tointeger_ret
27904     2D 00 64 FD | 	ret
27908                 | 
27908                 | __system___float_Unpack
27908     49 81 02 F6 | 	mov	_var01, arg01
2790c     1F 80 46 F0 | 	shr	_var01, #31
27910     49 83 02 F6 | 	mov	_var02, arg01
27914     01 82 66 F0 | 	shl	_var02, #1
27918     18 82 4E F0 | 	shr	_var02, #24 wz
2791c     17 93 06 F4 | 	bitl	arg01, #279
27920     06 92 66 50 |  if_ne	shl	arg01, #6
27924     1D 92 26 54 |  if_ne	bith	arg01, #29
27928     1C 00 90 5D |  if_ne	jmp	#LR__3740
2792c     49 85 92 F7 | 	encod	_var03, arg01 wc
27930     01 84 06 C1 |  if_b	add	_var03, #1
27934     17 84 86 F1 | 	sub	_var03, #23
27938     42 83 02 F6 | 	mov	_var02, _var03
2793c     07 7C 06 F6 | 	mov	result2, #7
27940     42 7D 82 F1 | 	sub	result2, _var03
27944     3E 93 62 F0 | 	shl	arg01, result2
27948                 | LR__3740
27948     7F 82 86 F1 | 	sub	_var02, #127
2794c     49 7F 02 F6 | 	mov	result3, arg01
27950     40 7B 02 F6 | 	mov	result1, _var01
27954     41 7D 02 F6 | 	mov	result2, _var02
27958                 | __system___float_Unpack_ret
27958     2D 00 64 FD | 	ret
2795c                 | 
2795c                 | __system___float_Pack
2795c     00 80 06 F6 | 	mov	_var01, #0
27960     00 96 0E F2 | 	cmp	arg03, #0 wz
27964     8C 00 90 AD |  if_e	jmp	#LR__3751
27968     4B 83 92 F7 | 	encod	_var02, arg03 wc
2796c     01 82 06 C1 |  if_b	add	_var02, #1
27970     21 80 06 F6 | 	mov	_var01, #33
27974     41 81 82 F1 | 	sub	_var01, _var02
27978     40 97 62 F0 | 	shl	arg03, _var01
2797c     03 82 06 F6 | 	mov	_var02, #3
27980     40 83 82 F1 | 	sub	_var02, _var01
27984     41 95 02 F1 | 	add	arg02, _var02
27988     4A 85 02 F6 | 	mov	_var03, arg02
2798c     00 97 06 F1 | 	add	arg03, #256
27990     4B 83 02 F6 | 	mov	_var02, arg03
27994     FF 82 2E F5 | 	andn	_var02, #255 wz
27998     01 84 06 A1 |  if_e	add	_var03, #1
2799c     7F 84 06 F1 | 	add	_var03, #127
279a0     FF FF 7F FF 
279a4     E9 85 46 F3 | 	fges	_var03, ##-23
279a8     FF 84 66 F3 | 	fles	_var03, #255
279ac     01 84 56 F2 | 	cmps	_var03, #1 wc
279b0     1C 00 90 3D |  if_ae	jmp	#LR__3750
279b4     01 96 46 F0 | 	shr	arg03, #1
279b8     1F 82 C6 F9 | 	decod	_var02, #31
279bc     4B 83 02 F1 | 	add	_var02, arg03
279c0     42 85 62 F6 | 	neg	_var03, _var03
279c4     42 83 42 F0 | 	shr	_var02, _var03
279c8     41 97 02 F6 | 	mov	arg03, _var02
279cc     00 84 06 F6 | 	mov	_var03, #0
279d0                 | LR__3750
279d0     49 7B 02 F6 | 	mov	result1, arg01
279d4     1F 7A 66 F0 | 	shl	result1, #31
279d8     42 83 02 F6 | 	mov	_var02, _var03
279dc     17 82 66 F0 | 	shl	_var02, #23
279e0     41 7B 42 F5 | 	or	result1, _var02
279e4     4B 87 02 F6 | 	mov	_var04, arg03
279e8     09 86 46 F0 | 	shr	_var04, #9
279ec     43 7B 42 F5 | 	or	result1, _var04
279f0     04 00 90 FD | 	jmp	#__system___float_Pack_ret
279f4                 | LR__3751
279f4     40 7B 02 F6 | 	mov	result1, _var01
279f8                 | __system___float_Pack_ret
279f8     2D 00 64 FD | 	ret
279fc                 | 
279fc                 | __system___basic_print_float
279fc     05 CA 05 F6 | 	mov	COUNT_, #5
27a00     E8 00 A0 FD | 	call	#pushregs_
27a04     49 A7 02 F6 | 	mov	local01, arg01
27a08     4A A9 02 F6 | 	mov	local02, arg02
27a0c     4B AB 0A F6 | 	mov	local03, arg03 wz
27a10     4C AD 02 F6 | 	mov	local04, arg04
27a14     14 00 90 5D |  if_ne	jmp	#LR__3760
27a18     23 AC 0E F2 | 	cmp	local04, #35 wz
27a1c     80 02 10 AF 
27a20     00 AE 06 A6 |  if_e	mov	local05, ##537198592
27a24     1D AE C6 59 |  if_ne	decod	local05, #29
27a28     57 AB 02 F6 | 	mov	local03, local05
27a2c                 | LR__3760
27a2c     53 93 02 F6 | 	mov	arg01, local01
27a30     A0 28 B0 FD | 	call	#__system___gettxfunc
27a34     3D AF 0A F6 | 	mov	local05, result1 wz
27a38     00 7A 06 A6 |  if_e	mov	result1, #0
27a3c     57 93 02 56 |  if_ne	mov	arg01, local05
27a40     55 95 02 56 |  if_ne	mov	arg02, local03
27a44     54 97 02 56 |  if_ne	mov	arg03, local02
27a48     56 99 02 56 |  if_ne	mov	arg04, local04
27a4c     00 E4 BF 5D |  if_ne	call	#__system___fmtfloat
27a50     E7 F0 03 F6 | 	mov	ptra, fp
27a54     F2 00 A0 FD | 	call	#popregs_
27a58                 | __system___basic_print_float_ret
27a58     2D 00 64 FD | 	ret
27a5c                 | 
27a5c                 | __system____builtin_atoi
27a5c     07 CA 05 F6 | 	mov	COUNT_, #7
27a60     E8 00 A0 FD | 	call	#pushregs_
27a64                 | __system____builtin_atoi_enter
27a64     49 A7 02 F6 | 	mov	local01, arg01
27a68     4A A9 02 F6 | 	mov	local02, arg02
27a6c     00 AA 06 F6 | 	mov	local03, #0
27a70     00 AC 06 F6 | 	mov	local04, #0
27a74     00 AE 06 F6 | 	mov	local05, #0
27a78     D7 08 48 FB | 	callpa	#(@LR__3771-@LR__3770)>>2,fcache_load_ptr_
27a7c                 | LR__3770
27a7c     53 B1 C2 FA | 	rdbyte	local06, local01
27a80     20 B0 0E F2 | 	cmp	local06, #32 wz
27a84     01 A6 06 A1 |  if_e	add	local01, #1
27a88     F0 FF 9F AD |  if_e	jmp	#LR__3770
27a8c                 | LR__3771
27a8c     53 B3 C2 FA | 	rdbyte	local07, local01
27a90     D7 12 48 FB | 	callpa	#(@LR__3773-@LR__3772)>>2,fcache_load_ptr_
27a94                 | LR__3772
27a94     2D B2 0E F2 | 	cmp	local07, #45 wz
27a98     2B B2 0E 52 |  if_ne	cmp	local07, #43 wz
27a9c     18 00 90 5D |  if_ne	jmp	#LR__3774
27aa0     01 A6 06 F1 | 	add	local01, #1
27aa4     2D B2 0E F2 | 	cmp	local07, #45 wz
27aa8     01 B0 06 A6 |  if_e	mov	local06, #1
27aac     58 AF C2 A2 |  if_e	subr	local05, local06
27ab0     53 B3 C2 FA | 	rdbyte	local07, local01
27ab4     DC FF 9F FD | 	jmp	#LR__3772
27ab8                 | LR__3773
27ab8                 | LR__3774
27ab8     00 A8 0E F2 | 	cmp	local02, #0 wz
27abc     1C 00 90 5D |  if_ne	jmp	#LR__3776
27ac0     24 B2 0E F2 | 	cmp	local07, #36 wz
27ac4     10 A8 06 A6 |  if_e	mov	local02, #16
27ac8     01 A6 06 A1 |  if_e	add	local01, #1
27acc     0C 00 90 AD |  if_e	jmp	#LR__3775
27ad0     25 B2 0E F2 | 	cmp	local07, #37 wz
27ad4     02 A8 06 A6 |  if_e	mov	local02, #2
27ad8     01 A6 06 A1 |  if_e	add	local01, #1
27adc                 | LR__3775
27adc                 | LR__3776
27adc     D7 48 48 FB | 	callpa	#(@LR__3784-@LR__3777)>>2,fcache_load_ptr_
27ae0                 | LR__3777
27ae0                 | LR__3778
27ae0     53 B3 C2 FA | 	rdbyte	local07, local01
27ae4     5F B2 0E F2 | 	cmp	local07, #95 wz
27ae8     01 A6 06 F1 | 	add	local01, #1
27aec     F0 FF 9F AD |  if_e	jmp	#LR__3778
27af0     30 B2 0E F2 | 	cmp	local07, #48 wz
27af4     26 B2 0E 52 |  if_ne	cmp	local07, #38 wz
27af8     00 AC 06 A6 |  if_e	mov	local04, #0
27afc     60 00 90 AD |  if_e	jmp	#LR__3783
27b00     31 B2 56 F2 | 	cmps	local07, #49 wc
27b04     18 00 90 CD |  if_b	jmp	#LR__3779
27b08     3A B2 56 F2 | 	cmps	local07, #58 wc
27b0c     59 AD 02 C6 |  if_b	mov	local04, local07
27b10     30 AC 86 C1 |  if_b	sub	local04, #48
27b14     00 A8 0E C2 |  if_b	cmp	local02, #0 wz
27b18     0A A8 06 86 |  if_c_and_z	mov	local02, #10
27b1c     40 00 90 CD |  if_b	jmp	#LR__3782
27b20                 | LR__3779
27b20     0B A8 56 F2 | 	cmps	local02, #11 wc
27b24     61 B2 56 32 |  if_ae	cmps	local07, #97 wc
27b28     14 00 90 CD |  if_b	jmp	#LR__3780
27b2c     67 B2 56 F2 | 	cmps	local07, #103 wc
27b30     61 B2 86 C1 |  if_b	sub	local07, #97
27b34     0A AC 06 C6 |  if_b	mov	local04, #10
27b38     59 AD 02 C1 |  if_b	add	local04, local07
27b3c     20 00 90 CD |  if_b	jmp	#LR__3781
27b40                 | LR__3780
27b40     0B A8 56 F2 | 	cmps	local02, #11 wc
27b44     41 B2 56 32 |  if_ae	cmps	local07, #65 wc
27b48     24 00 90 CD |  if_b	jmp	#LR__3785
27b4c     47 B2 56 F2 | 	cmps	local07, #71 wc
27b50     41 B2 86 C1 |  if_b	sub	local07, #65
27b54     0A AC 06 C6 |  if_b	mov	local04, #10
27b58     59 AD 02 C1 |  if_b	add	local04, local07
27b5c     10 00 90 3D |  if_ae	jmp	#LR__3785
27b60                 | LR__3781
27b60                 | LR__3782
27b60                 | LR__3783
27b60     55 A9 02 FD | 	qmul	local02, local03
27b64     18 AA 62 FD | 	getqx	local03
27b68     56 AB 02 F1 | 	add	local03, local04
27b6c     70 FF 9F FD | 	jmp	#LR__3777
27b70                 | LR__3784
27b70                 | LR__3785
27b70     00 A8 0E F2 | 	cmp	local02, #0 wz
27b74     64 00 90 5D |  if_ne	jmp	#LR__3791
27b78     78 B2 0E F2 | 	cmp	local07, #120 wz
27b7c     68 B2 0E 52 |  if_ne	cmp	local07, #104 wz
27b80     58 B2 0E 52 |  if_ne	cmp	local07, #88 wz
27b84     48 B2 0E 52 |  if_ne	cmp	local07, #72 wz
27b88     14 00 90 5D |  if_ne	jmp	#LR__3786
27b8c     53 93 02 F6 | 	mov	arg01, local01
27b90     10 94 06 F6 | 	mov	arg02, #16
27b94     C4 FE BF FD | 	call	#__system____builtin_atoi
27b98     3D AB 02 F6 | 	mov	local03, result1
27b9c     3C 00 90 FD | 	jmp	#LR__3790
27ba0                 | LR__3786
27ba0     62 B2 0E F2 | 	cmp	local07, #98 wz
27ba4     42 B2 0E 52 |  if_ne	cmp	local07, #66 wz
27ba8     14 00 90 5D |  if_ne	jmp	#LR__3787
27bac     53 93 02 F6 | 	mov	arg01, local01
27bb0     02 94 06 F6 | 	mov	arg02, #2
27bb4     A4 FE BF FD | 	call	#__system____builtin_atoi
27bb8     3D AB 02 F6 | 	mov	local03, result1
27bbc     1C 00 90 FD | 	jmp	#LR__3789
27bc0                 | LR__3787
27bc0     6F B2 0E F2 | 	cmp	local07, #111 wz
27bc4     4F B2 0E 52 |  if_ne	cmp	local07, #79 wz
27bc8     10 00 90 5D |  if_ne	jmp	#LR__3788
27bcc     53 93 02 F6 | 	mov	arg01, local01
27bd0     08 94 06 F6 | 	mov	arg02, #8
27bd4     84 FE BF FD | 	call	#__system____builtin_atoi
27bd8     3D AB 02 F6 | 	mov	local03, result1
27bdc                 | LR__3788
27bdc                 | LR__3789
27bdc                 | LR__3790
27bdc                 | LR__3791
27bdc     00 AE 0E F2 | 	cmp	local05, #0 wz
27be0     55 AB 62 56 |  if_ne	neg	local03, local03
27be4     55 7B 02 F6 | 	mov	result1, local03
27be8     E7 F0 03 F6 | 	mov	ptra, fp
27bec     F2 00 A0 FD | 	call	#popregs_
27bf0                 | __system____builtin_atoi_ret
27bf0     2D 00 64 FD | 	ret
27bf4                 | 
27bf4                 | __system____builtin_atof
27bf4     07 CA 05 F6 | 	mov	COUNT_, #7
27bf8     E8 00 A0 FD | 	call	#pushregs_
27bfc     49 A7 02 F6 | 	mov	local01, arg01
27c00     00 A8 06 F6 | 	mov	local02, #0
27c04     00 AA 06 F6 | 	mov	local03, #0
27c08     00 AC 06 F6 | 	mov	local04, #0
27c0c     00 AE 06 F6 | 	mov	local05, #0
27c10     D7 08 48 FB | 	callpa	#(@LR__3801-@LR__3800)>>2,fcache_load_ptr_
27c14                 | LR__3800
27c14     53 97 C2 FA | 	rdbyte	arg03, local01
27c18     20 96 0E F2 | 	cmp	arg03, #32 wz
27c1c     01 A6 06 A1 |  if_e	add	local01, #1
27c20     F0 FF 9F AD |  if_e	jmp	#LR__3800
27c24                 | LR__3801
27c24     53 B1 C2 FA | 	rdbyte	local06, local01
27c28                 | LR__3802
27c28     2B B0 0E F2 | 	cmp	local06, #43 wz
27c2c     2D B0 0E 52 |  if_ne	cmp	local06, #45 wz
27c30     14 00 90 5D |  if_ne	jmp	#LR__3803
27c34     2D B0 0E F2 | 	cmp	local06, #45 wz
27c38     1F AC E6 A4 |  if_e	bitnot	local04, #31
27c3c     01 A6 06 F1 | 	add	local01, #1
27c40     53 B1 C2 FA | 	rdbyte	local06, local01
27c44     E0 FF 9F FD | 	jmp	#LR__3802
27c48                 | LR__3803
27c48                 | LR__3804
27c48     D7 08 48 FB | 	callpa	#(@LR__3806-@LR__3805)>>2,fcache_load_ptr_
27c4c                 | LR__3805
27c4c     53 B1 C2 FA | 	rdbyte	local06, local01
27c50     5F B0 0E F2 | 	cmp	local06, #95 wz
27c54     01 A6 06 F1 | 	add	local01, #1
27c58     F0 FF 9F AD |  if_e	jmp	#LR__3805
27c5c                 | LR__3806
27c5c     00 B0 0E F2 | 	cmp	local06, #0 wz
27c60     5C 00 90 AD |  if_e	jmp	#LR__3808
27c64     30 B0 56 F2 | 	cmps	local06, #48 wc
27c68     44 00 90 CD |  if_b	jmp	#LR__3807
27c6c     3A B0 56 F2 | 	cmps	local06, #58 wc
27c70     3C 00 90 3D |  if_ae	jmp	#LR__3807
27c74     54 93 02 F6 | 	mov	arg01, local02
27c78     00 90 20 FF 
27c7c     00 94 06 F6 | 	mov	arg02, ##1092616192
27c80     54 F7 BF FD | 	call	#__system___float_mul
27c84     3D A9 02 F6 | 	mov	local02, result1
27c88     30 B0 86 F1 | 	sub	local06, #48
27c8c     58 93 02 F6 | 	mov	arg01, local06
27c90     40 F3 BF FD | 	call	#__system___float_fromuns
27c94     3D 95 02 F6 | 	mov	arg02, result1
27c98     54 93 02 F6 | 	mov	arg01, local02
27c9c     68 F3 BF FD | 	call	#__system___float_add
27ca0     3D A9 02 F6 | 	mov	local02, result1
27ca4     00 AE 0E F2 | 	cmp	local05, #0 wz
27ca8     01 AA 86 51 |  if_ne	sub	local03, #1
27cac     98 FF 9F FD | 	jmp	#LR__3804
27cb0                 | LR__3807
27cb0     2E B0 0E F2 | 	cmp	local06, #46 wz
27cb4     00 AE 0E A2 |  if_e	cmp	local05, #0 wz
27cb8     01 AE 06 A6 |  if_e	mov	local05, #1
27cbc     88 FF 9F AD |  if_e	jmp	#LR__3804
27cc0                 | LR__3808
27cc0     45 B0 0E F2 | 	cmp	local06, #69 wz
27cc4     65 B0 0E 52 |  if_ne	cmp	local06, #101 wz
27cc8     18 00 90 5D |  if_ne	jmp	#LR__3809
27ccc     53 93 02 F6 | 	mov	arg01, local01
27cd0     00 94 06 F6 | 	mov	arg02, #0
27cd4     84 FD BF FD | 	call	#__system____builtin_atoi
27cd8     55 7B 02 F1 | 	add	result1, local03
27cdc     3D B3 02 F6 | 	mov	local07, result1
27ce0     04 00 90 FD | 	jmp	#LR__3810
27ce4                 | LR__3809
27ce4     55 B3 02 F6 | 	mov	local07, local03
27ce8                 | LR__3810
27ce8     59 97 02 F6 | 	mov	arg03, local07
27cec     54 93 02 F6 | 	mov	arg01, local02
27cf0     00 90 20 FF 
27cf4     00 94 06 F6 | 	mov	arg02, ##1092616192
27cf8     F4 06 B0 FD | 	call	#__system___float_pow_n
27cfc     56 7B 62 F5 | 	xor	result1, local04
27d00     E7 F0 03 F6 | 	mov	ptra, fp
27d04     F2 00 A0 FD | 	call	#popregs_
27d08                 | __system____builtin_atof_ret
27d08     2D 00 64 FD | 	ret
27d0c                 | 
27d0c                 | __system____builtin_ilogb
27d0c     F8 FB BF FD | 	call	#__system___float_Unpack
27d10     00 7E 0E F2 | 	cmp	result3, #0 wz
27d14     00 00 40 AF 
27d18     01 7A 06 A6 |  if_e	mov	result1, ##-2147483647
27d1c     24 00 90 AD |  if_e	jmp	#LR__3821
27d20     80 7C 0E F2 | 	cmp	result2, #128 wz
27d24     18 00 90 5D |  if_ne	jmp	#LR__3820
27d28     00 00 10 FF 
27d2c     00 7E 0E F2 | 	cmp	result3, ##536870912 wz
27d30     1E 7A CE A9 |  if_e	bmask	result1, #30
27d34     0C 00 90 AD |  if_e	jmp	#LR__3821
27d38     1F 7A C6 F9 | 	decod	result1, #31
27d3c     04 00 90 FD | 	jmp	#LR__3821
27d40                 | LR__3820
27d40     3E 7B 02 F6 | 	mov	result1, result2
27d44                 | LR__3821
27d44                 | __system____builtin_ilogb_ret
27d44     2D 00 64 FD | 	ret
27d48                 | 
27d48                 | __system____builtin_sinf
27d48     03 CA 05 F6 | 	mov	COUNT_, #3
27d4c     E8 00 A0 FD | 	call	#pushregs_
27d50     49 A7 02 F6 | 	mov	local01, arg01
27d54     87 64 20 FF 
27d58     DB 95 06 F6 | 	mov	arg02, ##1086918619
27d5c     7C F8 BF FD | 	call	#__system___float_div
27d60     3D 93 02 F6 | 	mov	arg01, result1
27d64     00 94 06 F6 | 	mov	arg02, #0
27d68     34 FB BF FD | 	call	#__system___float_tointeger
27d6c     3D 97 0A F6 | 	mov	arg03, result1 wz
27d70     44 00 90 AD |  if_e	jmp	#LR__3830
27d74     4B 93 52 F6 | 	abs	arg01, arg03 wc
27d78     1F A8 C6 C9 |  if_b	decod	local02, #31
27d7c     00 A8 06 36 |  if_ae	mov	local02, #0
27d80     50 F2 BF FD | 	call	#__system___float_fromuns
27d84     54 7B 62 F5 | 	xor	result1, local02
27d88     3D 93 02 F6 | 	mov	arg01, result1
27d8c     1E 94 C6 F9 | 	decod	arg02, #30
27d90     44 F6 BF FD | 	call	#__system___float_mul
27d94     3D 93 02 F6 | 	mov	arg01, result1
27d98     87 24 20 FF 
27d9c     DB 95 06 F6 | 	mov	arg02, ##1078530011
27da0     34 F6 BF FD | 	call	#__system___float_mul
27da4     3D 95 02 F6 | 	mov	arg02, result1
27da8     53 93 02 F6 | 	mov	arg01, local01
27dac     1F 94 E6 F4 | 	bitnot	arg02, #31
27db0     54 F2 BF FD | 	call	#__system___float_add
27db4     3D A7 02 F6 | 	mov	local01, result1
27db8                 | LR__3830
27db8     53 93 02 F6 | 	mov	arg01, local01
27dbc     66 E6 1E FF 
27dc0     CD 94 06 F6 | 	mov	arg02, ##1036831949
27dc4     01 96 06 F6 | 	mov	arg03, #1
27dc8     40 FA BF FD | 	call	#__system___float_cmp
27dcc     00 7A 56 F2 | 	cmps	result1, #0 wc
27dd0     5C 00 90 3D |  if_ae	jmp	#LR__3831
27dd4     53 93 02 F6 | 	mov	arg01, local01
27dd8     66 E6 5E FF 
27ddc     CD 94 06 F6 | 	mov	arg02, ##-1110651699
27de0     01 96 66 F6 | 	neg	arg03, #1
27de4     24 FA BF FD | 	call	#__system___float_cmp
27de8     01 7A 56 F2 | 	cmps	result1, #1 wc
27dec     40 00 90 CD |  if_b	jmp	#LR__3831
27df0     53 93 02 F6 | 	mov	arg01, local01
27df4     53 95 02 F6 | 	mov	arg02, local01
27df8     DC F5 BF FD | 	call	#__system___float_mul
27dfc     3D 93 02 F6 | 	mov	arg01, result1
27e00     53 95 02 F6 | 	mov	arg02, local01
27e04     D0 F5 BF FD | 	call	#__system___float_mul
27e08     3D 93 02 F6 | 	mov	arg01, result1
27e0c     00 60 20 FF 
27e10     00 94 06 F6 | 	mov	arg02, ##1086324736
27e14     C4 F7 BF FD | 	call	#__system___float_div
27e18     3D 95 02 F6 | 	mov	arg02, result1
27e1c     53 93 02 F6 | 	mov	arg01, local01
27e20     1F 94 E6 F4 | 	bitnot	arg02, #31
27e24     E0 F1 BF FD | 	call	#__system___float_add
27e28     3D AB 02 F6 | 	mov	local03, result1
27e2c     54 00 90 FD | 	jmp	#LR__3832
27e30                 | LR__3831
27e30     53 93 02 F6 | 	mov	arg01, local01
27e34     7C 91 26 FF 
27e38     83 95 06 F6 | 	mov	arg02, ##1294137731
27e3c     98 F5 BF FD | 	call	#__system___float_mul
27e40     3D 93 02 F6 | 	mov	arg01, result1
27e44     00 94 06 F6 | 	mov	arg02, #0
27e48     54 FA BF FD | 	call	#__system___float_tointeger
27e4c     02 7A 66 F0 | 	shl	result1, #2
27e50     00 00 A0 FF 
27e54     3D 01 48 FD | 	qrotate	##1073741824, result1
27e58     19 92 62 FD | 	getqy	arg01
27e5c     49 93 52 F6 | 	abs	arg01, arg01 wc
27e60     1F A8 C6 C9 |  if_b	decod	local02, #31
27e64     00 A8 06 36 |  if_ae	mov	local02, #0
27e68     68 F1 BF FD | 	call	#__system___float_fromuns
27e6c     54 7B 62 F5 | 	xor	result1, local02
27e70     3D 93 02 F6 | 	mov	arg01, result1
27e74     00 40 27 FF 
27e78     00 94 06 F6 | 	mov	arg02, ##1317011456
27e7c     5C F7 BF FD | 	call	#__system___float_div
27e80     3D AB 02 F6 | 	mov	local03, result1
27e84                 | LR__3832
27e84     55 7B 02 F6 | 	mov	result1, local03
27e88     E7 F0 03 F6 | 	mov	ptra, fp
27e8c     F2 00 A0 FD | 	call	#popregs_
27e90                 | __system____builtin_sinf_ret
27e90     2D 00 64 FD | 	ret
27e94                 | 
27e94                 | __system____builtin_tanf
27e94     02 CA 05 F6 | 	mov	COUNT_, #2
27e98     E8 00 A0 FD | 	call	#pushregs_
27e9c     49 A7 02 F6 | 	mov	local01, arg01
27ea0     A4 FE BF FD | 	call	#__system____builtin_sinf
27ea4     3D A9 02 F6 | 	mov	local02, result1
27ea8     53 95 02 F6 | 	mov	arg02, local01
27eac     87 E4 1F FF 
27eb0     DB 93 06 F6 | 	mov	arg01, ##1070141403
27eb4     1F 94 E6 F4 | 	bitnot	arg02, #31
27eb8     4C F1 BF FD | 	call	#__system___float_add
27ebc     3D 93 02 F6 | 	mov	arg01, result1
27ec0     84 FE BF FD | 	call	#__system____builtin_sinf
27ec4     3D 95 02 F6 | 	mov	arg02, result1
27ec8     54 93 02 F6 | 	mov	arg01, local02
27ecc     0C F7 BF FD | 	call	#__system___float_div
27ed0     E7 F0 03 F6 | 	mov	ptra, fp
27ed4     F2 00 A0 FD | 	call	#popregs_
27ed8                 | __system____builtin_tanf_ret
27ed8     2D 00 64 FD | 	ret
27edc                 | 
27edc                 | __system____builtin_asinf
27edc     01 CA 05 F6 | 	mov	COUNT_, #1
27ee0     E8 00 A0 FD | 	call	#pushregs_
27ee4     49 A7 02 F6 | 	mov	local01, arg01
27ee8     53 95 02 F6 | 	mov	arg02, local01
27eec     53 93 02 F6 | 	mov	arg01, local01
27ef0     E4 F4 BF FD | 	call	#__system___float_mul
27ef4     3D 95 02 F6 | 	mov	arg02, result1
27ef8     00 C0 1F FF 
27efc     00 92 06 F6 | 	mov	arg01, ##1065353216
27f00     1F 94 E6 F4 | 	bitnot	arg02, #31
27f04     00 F1 BF FD | 	call	#__system___float_add
27f08     3D 93 02 F6 | 	mov	arg01, result1
27f0c     F0 F3 BF FD | 	call	#__system___float_sqrt
27f10     3D 95 02 F6 | 	mov	arg02, result1
27f14     53 93 02 F6 | 	mov	arg01, local01
27f18     58 00 B0 FD | 	call	#__system____builtin_atan2f
27f1c     E7 F0 03 F6 | 	mov	ptra, fp
27f20     F2 00 A0 FD | 	call	#popregs_
27f24                 | __system____builtin_asinf_ret
27f24     2D 00 64 FD | 	ret
27f28                 | 
27f28                 | __system____builtin_acosf
27f28     01 CA 05 F6 | 	mov	COUNT_, #1
27f2c     E8 00 A0 FD | 	call	#pushregs_
27f30     49 A7 02 F6 | 	mov	local01, arg01
27f34     53 95 02 F6 | 	mov	arg02, local01
27f38     53 93 02 F6 | 	mov	arg01, local01
27f3c     98 F4 BF FD | 	call	#__system___float_mul
27f40     3D 95 02 F6 | 	mov	arg02, result1
27f44     00 C0 1F FF 
27f48     00 92 06 F6 | 	mov	arg01, ##1065353216
27f4c     1F 94 E6 F4 | 	bitnot	arg02, #31
27f50     B4 F0 BF FD | 	call	#__system___float_add
27f54     3D 93 02 F6 | 	mov	arg01, result1
27f58     A4 F3 BF FD | 	call	#__system___float_sqrt
27f5c     3D 93 02 F6 | 	mov	arg01, result1
27f60     53 95 02 F6 | 	mov	arg02, local01
27f64     0C 00 B0 FD | 	call	#__system____builtin_atan2f
27f68     E7 F0 03 F6 | 	mov	ptra, fp
27f6c     F2 00 A0 FD | 	call	#popregs_
27f70                 | __system____builtin_acosf_ret
27f70     2D 00 64 FD | 	ret
27f74                 | 
27f74                 | __system____builtin_atan2f
27f74     04 CA 05 F6 | 	mov	COUNT_, #4
27f78     E8 00 A0 FD | 	call	#pushregs_
27f7c     49 A7 02 F6 | 	mov	local01, arg01
27f80     4A A9 02 F6 | 	mov	local02, arg02
27f84     53 93 02 F6 | 	mov	arg01, local01
27f88     00 94 06 F6 | 	mov	arg02, #0
27f8c     01 96 06 F6 | 	mov	arg03, #1
27f90     78 F8 BF FD | 	call	#__system___float_cmp
27f94     00 7A 0E F2 | 	cmp	result1, #0 wz
27f98     28 00 90 5D |  if_ne	jmp	#LR__3840
27f9c     54 93 02 F6 | 	mov	arg01, local02
27fa0     00 94 06 F6 | 	mov	arg02, #0
27fa4     01 96 06 F6 | 	mov	arg03, #1
27fa8     60 F8 BF FD | 	call	#__system___float_cmp
27fac     00 7A 56 F2 | 	cmps	result1, #0 wc
27fb0     87 24 60 CF 
27fb4     DB 7B 06 C6 |  if_b	mov	result1, ##-1068953637
27fb8     DC 00 90 CD |  if_b	jmp	#LR__3841
27fbc     00 7A 06 F6 | 	mov	result1, #0
27fc0     D4 00 90 FD | 	jmp	#LR__3841
27fc4                 | LR__3840
27fc4     54 93 02 F6 | 	mov	arg01, local02
27fc8     54 95 02 F6 | 	mov	arg02, local02
27fcc     08 F4 BF FD | 	call	#__system___float_mul
27fd0     3D AB 02 F6 | 	mov	local03, result1
27fd4     53 93 02 F6 | 	mov	arg01, local01
27fd8     53 95 02 F6 | 	mov	arg02, local01
27fdc     F8 F3 BF FD | 	call	#__system___float_mul
27fe0     3D 95 02 F6 | 	mov	arg02, result1
27fe4     55 93 02 F6 | 	mov	arg01, local03
27fe8     1C F0 BF FD | 	call	#__system___float_add
27fec     3D 93 02 F6 | 	mov	arg01, result1
27ff0     0C F3 BF FD | 	call	#__system___float_sqrt
27ff4     3D AB 02 F6 | 	mov	local03, result1
27ff8     54 93 02 F6 | 	mov	arg01, local02
27ffc     55 95 02 F6 | 	mov	arg02, local03
28000     D8 F5 BF FD | 	call	#__system___float_div
28004     3D A9 02 F6 | 	mov	local02, result1
28008     53 93 02 F6 | 	mov	arg01, local01
2800c     55 95 02 F6 | 	mov	arg02, local03
28010     C8 F5 BF FD | 	call	#__system___float_div
28014     3D A7 02 F6 | 	mov	local01, result1
28018     00 40 27 FF 
2801c     00 92 06 F6 | 	mov	arg01, ##1317011456
28020     54 95 02 F6 | 	mov	arg02, local02
28024     B0 F3 BF FD | 	call	#__system___float_mul
28028     3D 93 02 F6 | 	mov	arg01, result1
2802c     00 94 06 F6 | 	mov	arg02, #0
28030     6C F8 BF FD | 	call	#__system___float_tointeger
28034     3D AB 02 F6 | 	mov	local03, result1
28038     00 40 27 FF 
2803c     00 92 06 F6 | 	mov	arg01, ##1317011456
28040     53 95 02 F6 | 	mov	arg02, local01
28044     90 F3 BF FD | 	call	#__system___float_mul
28048     3D 93 02 F6 | 	mov	arg01, result1
2804c     00 94 06 F6 | 	mov	arg02, #0
28050     4C F8 BF FD | 	call	#__system___float_tointeger
28054     3D AB 52 FD | 	qvector	local03, result1
28058     87 24 20 FF 
2805c     DB AB 06 F6 | 	mov	local03, ##1078530011
28060     19 92 62 FD | 	getqy	arg01
28064     01 92 C6 F0 | 	sar	arg01, #1
28068     49 93 52 F6 | 	abs	arg01, arg01 wc
2806c     1F AC C6 C9 |  if_b	decod	local04, #31
28070     00 AC 06 36 |  if_ae	mov	local04, #0
28074     5C EF BF FD | 	call	#__system___float_fromuns
28078     56 7B 62 F5 | 	xor	result1, local04
2807c     3D 93 02 F6 | 	mov	arg01, result1
28080     00 40 27 FF 
28084     00 94 06 F6 | 	mov	arg02, ##1317011456
28088     50 F5 BF FD | 	call	#__system___float_div
2808c     3D 95 02 F6 | 	mov	arg02, result1
28090     55 93 02 F6 | 	mov	arg01, local03
28094     40 F3 BF FD | 	call	#__system___float_mul
28098                 | LR__3841
28098     E7 F0 03 F6 | 	mov	ptra, fp
2809c     F2 00 A0 FD | 	call	#popregs_
280a0                 | __system____builtin_atan2f_ret
280a0     2D 00 64 FD | 	ret
280a4                 | 
280a4                 | __system____builtin_exp2f
280a4     04 CA 05 F6 | 	mov	COUNT_, #4
280a8     E8 00 A0 FD | 	call	#pushregs_
280ac     49 A7 02 F6 | 	mov	local01, arg01
280b0     00 7F 21 FF 
280b4     00 94 06 F6 | 	mov	arg02, ##1123942400
280b8     01 96 66 F6 | 	neg	arg03, #1
280bc     4C F7 BF FD | 	call	#__system___float_cmp
280c0     00 7A 56 F2 | 	cmps	result1, #0 wc
280c4     00 C0 3F 3F 
280c8     00 7A 06 36 |  if_ae	mov	result1, ##2139095040
280cc     DC 00 90 3D |  if_ae	jmp	#LR__3851
280d0     53 93 02 F6 | 	mov	arg01, local01
280d4     00 7F 61 FF 
280d8     00 94 06 F6 | 	mov	arg02, ##-1023541248
280dc     01 96 06 F6 | 	mov	arg03, #1
280e0     28 F7 BF FD | 	call	#__system___float_cmp
280e4     00 7A 56 F2 | 	cmps	result1, #0 wc
280e8     00 7A 06 C6 |  if_b	mov	result1, #0
280ec     BC 00 90 CD |  if_b	jmp	#LR__3851
280f0     53 93 02 F6 | 	mov	arg01, local01
280f4     00 94 06 F6 | 	mov	arg02, #0
280f8     A4 F7 BF FD | 	call	#__system___float_tointeger
280fc     3D A9 02 F6 | 	mov	local02, result1
28100     54 93 52 F6 | 	abs	arg01, local02 wc
28104     1F AA C6 C9 |  if_b	decod	local03, #31
28108     00 AA 06 36 |  if_ae	mov	local03, #0
2810c     C4 EE BF FD | 	call	#__system___float_fromuns
28110     55 7B 62 F5 | 	xor	result1, local03
28114     3D 95 02 F6 | 	mov	arg02, result1
28118     53 93 02 F6 | 	mov	arg01, local01
2811c     1F 94 E6 F4 | 	bitnot	arg02, #31
28120     E4 EE BF FD | 	call	#__system___float_add
28124     3D AD 02 F6 | 	mov	local04, result1
28128     56 93 02 F6 | 	mov	arg01, local04
2812c     00 94 06 F6 | 	mov	arg02, #0
28130     01 96 06 F6 | 	mov	arg03, #1
28134     D4 F6 BF FD | 	call	#__system___float_cmp
28138     00 7A 56 F2 | 	cmps	result1, #0 wc
2813c     18 00 90 3D |  if_ae	jmp	#LR__3850
28140     56 93 02 F6 | 	mov	arg01, local04
28144     00 C0 1F FF 
28148     00 94 06 F6 | 	mov	arg02, ##1065353216
2814c     B8 EE BF FD | 	call	#__system___float_add
28150     3D AD 02 F6 | 	mov	local04, result1
28154     01 A8 86 F1 | 	sub	local02, #1
28158                 | LR__3850
28158     7F A8 06 F1 | 	add	local02, #127
2815c     17 A8 66 F0 | 	shl	local02, #23
28160     56 93 02 F6 | 	mov	arg01, local04
28164     00 80 26 FF 
28168     00 94 06 F6 | 	mov	arg02, ##1291845632
2816c     68 F2 BF FD | 	call	#__system___float_mul
28170     3D 93 02 F6 | 	mov	arg01, result1
28174     00 94 06 F6 | 	mov	arg02, #0
28178     24 F7 BF FD | 	call	#__system___float_tointeger
2817c     3D AD 0A F6 | 	mov	local04, result1 wz
28180     54 7B 02 A6 |  if_e	mov	result1, local02
28184     24 00 90 AD |  if_e	jmp	#LR__3851
28188     3E AC 26 F4 | 	bith	local04, #62
2818c     0F AC 62 FD | 	qexp	local04
28190     54 93 02 F6 | 	mov	arg01, local02
28194     18 94 62 FD | 	getqx	arg02
28198     01 94 06 F1 | 	add	arg02, #1
2819c     01 94 46 F0 | 	shr	arg02, #1
281a0     00 80 1F FF 
281a4     00 94 06 F1 | 	add	arg02, ##1056964608
281a8     2C F2 BF FD | 	call	#__system___float_mul
281ac                 | LR__3851
281ac     E7 F0 03 F6 | 	mov	ptra, fp
281b0     F2 00 A0 FD | 	call	#popregs_
281b4                 | __system____builtin_exp2f_ret
281b4     2D 00 64 FD | 	ret
281b8                 | 
281b8                 | __system____builtin_log2f
281b8     06 CA 05 F6 | 	mov	COUNT_, #6
281bc     E8 00 A0 FD | 	call	#pushregs_
281c0     49 A7 02 F6 | 	mov	local01, arg01
281c4     49 A9 0A F6 | 	mov	local02, arg01 wz
281c8     00 00 40 5F 
281cc     00 A8 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
281d0     00 40 00 AF 
281d4     00 7A 66 A6 |  if_e	neg	result1, ##8388608
281d8     08 01 90 AD |  if_e	jmp	#LR__3864
281dc     00 A8 56 F2 | 	cmps	local02, #0 wc
281e0     00 E0 3F CF 
281e4     00 7A 06 C6 |  if_b	mov	result1, ##2143289344
281e8     F8 00 90 CD |  if_b	jmp	#LR__3864
281ec     53 93 02 F6 | 	mov	arg01, local01
281f0     00 90 20 FF 
281f4     00 94 06 F6 | 	mov	arg02, ##1092616192
281f8     01 96 06 F6 | 	mov	arg03, #1
281fc     0C F6 BF FD | 	call	#__system___float_cmp
28200     00 7A 0E F2 | 	cmp	result1, #0 wz
28204     4D 2A 20 AF 
28208     78 7A 06 A6 |  if_e	mov	result1, ##1079286392
2820c     D4 00 90 AD |  if_e	jmp	#LR__3864
28210     53 93 02 F6 | 	mov	arg01, local01
28214     FC 16 20 FF 
28218     54 94 06 F6 | 	mov	arg02, ##1076754516
2821c     01 96 06 F6 | 	mov	arg03, #1
28220     E8 F5 BF FD | 	call	#__system___float_cmp
28224     00 7A 0E F2 | 	cmp	result1, #0 wz
28228     55 DC 1F AF 
2822c     3B 7A 06 A6 |  if_e	mov	result1, ##1069066811
28230     B0 00 90 AD |  if_e	jmp	#LR__3864
28234     54 AB 02 F6 | 	mov	local03, local02
28238     17 AA 46 F0 | 	shr	local03, #23
2823c     55 AB E2 F8 | 	getbyte	local03, local03, #0
28240     17 A9 06 F4 | 	bitl	local02, #279
28244     54 AD 02 F6 | 	mov	local04, local02
28248     FF AA 0E F2 | 	cmp	local03, #255 wz
2824c     1C 00 90 5D |  if_ne	jmp	#LR__3860
28250     00 AC 0E F2 | 	cmp	local04, #0 wz
28254     00 C0 3F 5F 
28258     00 AE 06 56 |  if_ne	mov	local05, ##2139095040
2825c     00 E0 3F AF 
28260     00 AE 06 A6 |  if_e	mov	local05, ##2143289344
28264     57 7B 02 F6 | 	mov	result1, local05
28268     78 00 90 FD | 	jmp	#LR__3864
2826c                 | LR__3860
2826c     00 AA 0E F2 | 	cmp	local03, #0 wz
28270     17 AC 26 54 |  if_ne	bith	local04, #23
28274     7F AA 86 51 |  if_ne	sub	local03, #127
28278     28 00 90 5D |  if_ne	jmp	#LR__3863
2827c     00 AC 0E F2 | 	cmp	local04, #0 wz
28280     00 40 00 AF 
28284     00 7A 66 A6 |  if_e	neg	result1, ##8388608
28288     58 00 90 AD |  if_e	jmp	#LR__3864
2828c     7E AA 66 F6 | 	neg	local03, #126
28290     D7 08 48 FB | 	callpa	#(@LR__3862-@LR__3861)>>2,fcache_load_ptr_
28294                 | LR__3861
28294     17 AC 2E F4 | 	testbn	local04, #23 wz
28298     01 AC 66 A0 |  if_e	shl	local04, #1
2829c     01 AA 06 A1 |  if_e	add	local03, #1
282a0     F0 FF 9F AD |  if_e	jmp	#LR__3861
282a4                 | LR__3862
282a4                 | LR__3863
282a4     0E AC 62 FD | 	qlog	local04
282a8     01 AA 86 F1 | 	sub	local03, #1
282ac     55 93 52 F6 | 	abs	arg01, local03 wc
282b0     1F B0 C6 C9 |  if_b	decod	local06, #31
282b4     00 B0 06 36 |  if_ae	mov	local06, #0
282b8     18 AE 62 FD | 	getqx	local05
282bc     9B AE 06 F4 | 	bitl	local05, #155
282c0     08 AE 06 F1 | 	add	local05, #8
282c4     04 AE 46 F0 | 	shr	local05, #4
282c8     00 C0 1F FF 
282cc     00 AE 06 F1 | 	add	local05, ##1065353216
282d0     00 ED BF FD | 	call	#__system___float_fromuns
282d4     58 7B 62 F5 | 	xor	result1, local06
282d8     3D 95 02 F6 | 	mov	arg02, result1
282dc     57 93 02 F6 | 	mov	arg01, local05
282e0     24 ED BF FD | 	call	#__system___float_add
282e4                 | LR__3864
282e4     E7 F0 03 F6 | 	mov	ptra, fp
282e8     F2 00 A0 FD | 	call	#popregs_
282ec                 | __system____builtin_log2f_ret
282ec     2D 00 64 FD | 	ret
282f0                 | 
282f0                 | __system____builtin_powf
282f0     04 CA 05 F6 | 	mov	COUNT_, #4
282f4     E8 00 A0 FD | 	call	#pushregs_
282f8     49 A7 02 F6 | 	mov	local01, arg01
282fc     4A A9 02 F6 | 	mov	local02, arg02
28300     54 93 02 F6 | 	mov	arg01, local02
28304     00 94 06 F6 | 	mov	arg02, #0
28308     94 F5 BF FD | 	call	#__system___float_tointeger
2830c     3D AB 02 F6 | 	mov	local03, result1
28310     55 93 52 F6 | 	abs	arg01, local03 wc
28314     1F AC C6 C9 |  if_b	decod	local04, #31
28318     00 AC 06 36 |  if_ae	mov	local04, #0
2831c     B4 EC BF FD | 	call	#__system___float_fromuns
28320     56 7B 62 F5 | 	xor	result1, local04
28324     3D 93 02 F6 | 	mov	arg01, result1
28328     54 95 02 F6 | 	mov	arg02, local02
2832c     01 96 06 F6 | 	mov	arg03, #1
28330     D8 F4 BF FD | 	call	#__system___float_cmp
28334     00 7A 0E F2 | 	cmp	result1, #0 wz
28338     18 00 90 5D |  if_ne	jmp	#LR__3870
2833c     00 C0 1F FF 
28340     00 92 06 F6 | 	mov	arg01, ##1065353216
28344     53 95 02 F6 | 	mov	arg02, local01
28348     55 97 02 F6 | 	mov	arg03, local03
2834c     A0 00 B0 FD | 	call	#__system___float_pow_n
28350     58 00 90 FD | 	jmp	#LR__3871
28354                 | LR__3870
28354     53 93 02 F6 | 	mov	arg01, local01
28358     00 94 06 F6 | 	mov	arg02, #0
2835c     01 96 06 F6 | 	mov	arg03, #1
28360     A8 F4 BF FD | 	call	#__system___float_cmp
28364     00 7A 56 F2 | 	cmps	result1, #0 wc
28368     00 E0 3F CF 
2836c     00 7A 06 C6 |  if_b	mov	result1, ##2143289344
28370     38 00 90 CD |  if_b	jmp	#LR__3871
28374     53 93 02 F6 | 	mov	arg01, local01
28378     00 94 06 F6 | 	mov	arg02, #0
2837c     01 96 06 F6 | 	mov	arg03, #1
28380     88 F4 BF FD | 	call	#__system___float_cmp
28384     00 7A 0E F2 | 	cmp	result1, #0 wz
28388     00 7A 06 A6 |  if_e	mov	result1, #0
2838c     1C 00 90 AD |  if_e	jmp	#LR__3871
28390     53 93 02 F6 | 	mov	arg01, local01
28394     20 FE BF FD | 	call	#__system____builtin_log2f
28398     3D 93 02 F6 | 	mov	arg01, result1
2839c     54 95 02 F6 | 	mov	arg02, local02
283a0     34 F0 BF FD | 	call	#__system___float_mul
283a4     3D 93 02 F6 | 	mov	arg01, result1
283a8     F8 FC BF FD | 	call	#__system____builtin_exp2f
283ac                 | LR__3871
283ac     E7 F0 03 F6 | 	mov	ptra, fp
283b0     F2 00 A0 FD | 	call	#popregs_
283b4                 | __system____builtin_powf_ret
283b4     2D 00 64 FD | 	ret
283b8                 | 
283b8                 | __system____builtin_logbase
283b8     02 CA 05 F6 | 	mov	COUNT_, #2
283bc     E8 00 A0 FD | 	call	#pushregs_
283c0     49 A7 02 F6 | 	mov	local01, arg01
283c4     4A 93 02 F6 | 	mov	arg01, arg02
283c8     EC FD BF FD | 	call	#__system____builtin_log2f
283cc     3D A9 02 F6 | 	mov	local02, result1
283d0     53 93 02 F6 | 	mov	arg01, local01
283d4     E0 FD BF FD | 	call	#__system____builtin_log2f
283d8     3D 95 02 F6 | 	mov	arg02, result1
283dc     54 93 02 F6 | 	mov	arg01, local02
283e0     F8 F1 BF FD | 	call	#__system___float_div
283e4     E7 F0 03 F6 | 	mov	ptra, fp
283e8     F2 00 A0 FD | 	call	#popregs_
283ec                 | __system____builtin_logbase_ret
283ec     2D 00 64 FD | 	ret
283f0                 | 
283f0                 | __system___float_pow_n
283f0     05 CA 05 F6 | 	mov	COUNT_, #5
283f4     E8 00 A0 FD | 	call	#pushregs_
283f8     49 A7 02 F6 | 	mov	local01, arg01
283fc     4A A9 02 F6 | 	mov	local02, arg02
28400     4B AB 02 F6 | 	mov	local03, arg03
28404     00 AA 56 F2 | 	cmps	local03, #0 wc
28408     18 00 90 3D |  if_ae	jmp	#LR__3880
2840c     01 AC 06 F6 | 	mov	local04, #1
28410     55 AB 62 F6 | 	neg	local03, local03
28414     00 AA 56 F2 | 	cmps	local03, #0 wc
28418     00 7A 06 C6 |  if_b	mov	result1, #0
2841c     94 00 90 CD |  if_b	jmp	#LR__3888
28420     04 00 90 FD | 	jmp	#LR__3881
28424                 | LR__3880
28424     00 AC 06 F6 | 	mov	local04, #0
28428                 | LR__3881
28428     00 C0 1F FF 
2842c     00 AE 06 F6 | 	mov	local05, ##1065353216
28430                 | LR__3882
28430     01 AA 56 F2 | 	cmps	local03, #1 wc
28434     30 00 90 CD |  if_b	jmp	#LR__3884
28438     01 AA CE F7 | 	test	local03, #1 wz
2843c     10 00 90 AD |  if_e	jmp	#LR__3883
28440     57 93 02 F6 | 	mov	arg01, local05
28444     54 95 02 F6 | 	mov	arg02, local02
28448     8C EF BF FD | 	call	#__system___float_mul
2844c     3D AF 02 F6 | 	mov	local05, result1
28450                 | LR__3883
28450     01 AA C6 F0 | 	sar	local03, #1
28454     54 93 02 F6 | 	mov	arg01, local02
28458     54 95 02 F6 | 	mov	arg02, local02
2845c     78 EF BF FD | 	call	#__system___float_mul
28460     3D A9 02 F6 | 	mov	local02, result1
28464     C8 FF 9F FD | 	jmp	#LR__3882
28468                 | LR__3884
28468     00 AC 0E F2 | 	cmp	local04, #0 wz
2846c     14 00 90 AD |  if_e	jmp	#LR__3885
28470     53 93 02 F6 | 	mov	arg01, local01
28474     57 95 02 F6 | 	mov	arg02, local05
28478     60 F1 BF FD | 	call	#__system___float_div
2847c     3D AF 02 F6 | 	mov	local05, result1
28480     2C 00 90 FD | 	jmp	#LR__3887
28484                 | LR__3885
28484     53 93 02 F6 | 	mov	arg01, local01
28488     00 C0 1F FF 
2848c     00 94 06 F6 | 	mov	arg02, ##1065353216
28490     01 96 06 F6 | 	mov	arg03, #1
28494     74 F3 BF FD | 	call	#__system___float_cmp
28498     00 7A 0E F2 | 	cmp	result1, #0 wz
2849c     10 00 90 AD |  if_e	jmp	#LR__3886
284a0     53 93 02 F6 | 	mov	arg01, local01
284a4     57 95 02 F6 | 	mov	arg02, local05
284a8     2C EF BF FD | 	call	#__system___float_mul
284ac     3D AF 02 F6 | 	mov	local05, result1
284b0                 | LR__3886
284b0                 | LR__3887
284b0     57 7B 02 F6 | 	mov	result1, local05
284b4                 | LR__3888
284b4     E7 F0 03 F6 | 	mov	ptra, fp
284b8     F2 00 A0 FD | 	call	#popregs_
284bc                 | __system___float_pow_n_ret
284bc     2D 00 64 FD | 	ret
284c0                 | 
284c0                 | __system___gc_ptrs
284c0     2C 81 02 F6 | 	mov	_var01, __heap_ptr
284c4     40 83 02 F6 | 	mov	_var02, _var01
284c8     BB 00 00 FF 
284cc     F8 82 06 F1 | 	add	_var02, ##95992
284d0     40 7D 0A FB | 	rdlong	result2, _var01 wz
284d4     74 00 90 5D |  if_ne	jmp	#LR__3890
284d8     41 7D 02 F6 | 	mov	result2, _var02
284dc     40 7D 82 F1 | 	sub	result2, _var01
284e0     40 03 58 FC | 	wrword	#1, _var01
284e4     40 7B 02 F6 | 	mov	result1, _var01
284e8     02 7A 06 F1 | 	add	result1, #2
284ec     36 00 80 FF 
284f0     3D 21 59 FC | 	wrword	##27792, result1
284f4     40 7B 02 F6 | 	mov	result1, _var01
284f8     04 7A 06 F1 | 	add	result1, #4
284fc     3D 01 58 FC | 	wrword	#0, result1
28500     40 7B 02 F6 | 	mov	result1, _var01
28504     06 7A 06 F1 | 	add	result1, #6
28508     3D 03 58 FC | 	wrword	#1, result1
2850c     10 80 06 F1 | 	add	_var01, #16
28510     3E 7D 52 F6 | 	abs	result2, result2 wc
28514     04 7C 46 F0 | 	shr	result2, #4
28518     3E 7D 82 F6 | 	negc	result2, result2
2851c     40 7D 52 FC | 	wrword	result2, _var01
28520     40 7D 02 F6 | 	mov	result2, _var01
28524     02 7C 06 F1 | 	add	result2, #2
28528     36 00 80 FF 
2852c     3E 1F 59 FC | 	wrword	##27791, result2
28530     40 7D 02 F6 | 	mov	result2, _var01
28534     04 7C 06 F1 | 	add	result2, #4
28538     3E 01 58 FC | 	wrword	#0, result2
2853c     40 7D 02 F6 | 	mov	result2, _var01
28540     06 7C 06 F1 | 	add	result2, #6
28544     3E 01 58 FC | 	wrword	#0, result2
28548     10 80 86 F1 | 	sub	_var01, #16
2854c                 | LR__3890
2854c     40 7B 02 F6 | 	mov	result1, _var01
28550     41 7D 02 F6 | 	mov	result2, _var02
28554                 | __system___gc_ptrs_ret
28554     2D 00 64 FD | 	ret
28558                 | 
28558                 | __system___gc_tryalloc
28558     0B CA 05 F6 | 	mov	COUNT_, #11
2855c     E8 00 A0 FD | 	call	#pushregs_
28560     49 A7 02 F6 | 	mov	local01, arg01
28564     4A A9 02 F6 | 	mov	local02, arg02
28568     54 FF BF FD | 	call	#__system___gc_ptrs
2856c     3D AB 02 F6 | 	mov	local03, result1
28570     3E AD 02 F6 | 	mov	local04, result2
28574     55 AF 02 F6 | 	mov	local05, local03
28578     00 B0 06 F6 | 	mov	local06, #0
2857c     D7 1E 48 FB | 	callpa	#(@LR__3901-@LR__3900)>>2,fcache_load_ptr_
28580                 | LR__3900
28580     57 B3 02 F6 | 	mov	local07, local05
28584     06 AE 06 F1 | 	add	local05, #6
28588     57 95 EA FA | 	rdword	arg02, local05 wz
2858c     55 93 02 F6 | 	mov	arg01, local03
28590     00 7A 06 A6 |  if_e	mov	result1, #0
28594     04 94 66 50 |  if_ne	shl	arg02, #4
28598     4A 93 02 51 |  if_ne	add	arg01, arg02
2859c     49 7B 02 56 |  if_ne	mov	result1, arg01
285a0     3D AF 0A F6 | 	mov	local05, result1 wz
285a4     57 B1 E2 5A |  if_ne	rdword	local06, local05
285a8     00 AE 0E F2 | 	cmp	local05, #0 wz
285ac     56 AF 52 52 |  if_ne	cmps	local05, local04 wc
285b0     08 00 90 1D |  if_a	jmp	#LR__3902
285b4     58 A7 5A 52 |  if_ne	cmps	local01, local06 wcz
285b8     C4 FF 9F 1D |  if_a	jmp	#LR__3900
285bc                 | LR__3901
285bc                 | LR__3902
285bc     00 AE 0E F2 | 	cmp	local05, #0 wz
285c0     57 7B 02 A6 |  if_e	mov	result1, local05
285c4     3C 01 90 AD |  if_e	jmp	#LR__3905
285c8     57 7D 02 F6 | 	mov	result2, local05
285cc     06 7C 06 F1 | 	add	result2, #6
285d0     3E B5 E2 FA | 	rdword	local08, result2
285d4     58 A7 52 F2 | 	cmps	local01, local06 wc
285d8     C0 00 90 3D |  if_ae	jmp	#LR__3904
285dc     57 A7 52 FC | 	wrword	local01, local05
285e0     57 93 02 F6 | 	mov	arg01, local05
285e4     53 B5 02 F6 | 	mov	local08, local01
285e8     04 B4 66 F0 | 	shl	local08, #4
285ec     5A 93 02 F1 | 	add	arg01, local08
285f0     53 B1 82 F1 | 	sub	local06, local01
285f4     49 B1 52 FC | 	wrword	local06, arg01
285f8     49 B5 02 F6 | 	mov	local08, arg01
285fc     02 B4 06 F1 | 	add	local08, #2
28600     36 00 80 FF 
28604     5A 1F 59 FC | 	wrword	##27791, local08
28608     57 95 0A F6 | 	mov	arg02, local05 wz
2860c     00 7A 06 A6 |  if_e	mov	result1, #0
28610     55 95 82 51 |  if_ne	sub	arg02, local03
28614     04 94 46 50 |  if_ne	shr	arg02, #4
28618     4A 7B 02 56 |  if_ne	mov	result1, arg02
2861c     49 B5 02 F6 | 	mov	local08, arg01
28620     04 B4 06 F1 | 	add	local08, #4
28624     5A 7B 52 FC | 	wrword	result1, local08
28628     57 B5 02 F6 | 	mov	local08, local05
2862c     06 B4 06 F1 | 	add	local08, #6
28630     49 95 02 F6 | 	mov	arg02, arg01
28634     5A B5 E2 FA | 	rdword	local08, local08
28638     06 94 06 F1 | 	add	arg02, #6
2863c     4A B5 52 FC | 	wrword	local08, arg02
28640     49 B7 02 F6 | 	mov	local09, arg01
28644     5B 95 0A F6 | 	mov	arg02, local09 wz
28648     00 7A 06 A6 |  if_e	mov	result1, #0
2864c     55 95 82 51 |  if_ne	sub	arg02, local03
28650     04 94 46 50 |  if_ne	shr	arg02, #4
28654     4A 7B 02 56 |  if_ne	mov	result1, arg02
28658     3D B5 02 F6 | 	mov	local08, result1
2865c     49 B9 EA FA | 	rdword	local10, arg01 wz
28660     00 7A 06 A6 |  if_e	mov	result1, #0
28664     04 B8 66 50 |  if_ne	shl	local10, #4
28668     5C 93 02 51 |  if_ne	add	arg01, local10
2866c     49 7B 02 56 |  if_ne	mov	result1, arg01
28670     3D BB 0A F6 | 	mov	local11, result1 wz
28674     24 00 90 AD |  if_e	jmp	#LR__3903
28678     56 BB 52 F2 | 	cmps	local11, local04 wc
2867c     1C 00 90 3D |  if_ae	jmp	#LR__3903
28680     5B 95 0A F6 | 	mov	arg02, local09 wz
28684     00 7A 06 A6 |  if_e	mov	result1, #0
28688     55 95 82 51 |  if_ne	sub	arg02, local03
2868c     04 94 46 50 |  if_ne	shr	arg02, #4
28690     4A 7B 02 56 |  if_ne	mov	result1, arg02
28694     04 BA 06 F1 | 	add	local11, #4
28698     5D 7B 52 FC | 	wrword	result1, local11
2869c                 | LR__3903
2869c                 | LR__3904
2869c     06 B2 06 F1 | 	add	local07, #6
286a0     59 B5 52 FC | 	wrword	local08, local07
286a4     36 00 00 FF 
286a8     80 B6 06 F6 | 	mov	local09, ##27776
286ac     54 B7 42 F5 | 	or	local09, local02
286b0     00 7A 06 F6 | 	mov	result1, #0
286b4     01 7A 62 FD | 	cogid	result1
286b8     3D B7 42 F5 | 	or	local09, result1
286bc     57 BB 02 F6 | 	mov	local11, local05
286c0     02 BA 06 F1 | 	add	local11, #2
286c4     5D B7 52 FC | 	wrword	local09, local11
286c8     55 B7 02 F6 | 	mov	local09, local03
286cc     08 B6 06 F1 | 	add	local09, #8
286d0     57 BB 02 F6 | 	mov	local11, local05
286d4     5B B7 E2 FA | 	rdword	local09, local09
286d8     06 BA 06 F1 | 	add	local11, #6
286dc     5D B7 52 FC | 	wrword	local09, local11
286e0     57 95 0A F6 | 	mov	arg02, local05 wz
286e4     00 7A 06 A6 |  if_e	mov	result1, #0
286e8     55 95 82 51 |  if_ne	sub	arg02, local03
286ec     04 94 46 50 |  if_ne	shr	arg02, #4
286f0     4A 7B 02 56 |  if_ne	mov	result1, arg02
286f4     08 AA 06 F1 | 	add	local03, #8
286f8     55 7B 52 FC | 	wrword	result1, local03
286fc     08 AE 06 F1 | 	add	local05, #8
28700     57 7B 02 F6 | 	mov	result1, local05
28704                 | LR__3905
28704     E7 F0 03 F6 | 	mov	ptra, fp
28708     F2 00 A0 FD | 	call	#popregs_
2870c                 | __system___gc_tryalloc_ret
2870c     2D 00 64 FD | 	ret
28710                 | 
28710                 | __system___gc_alloc_managed
28710     01 CA 05 F6 | 	mov	COUNT_, #1
28714     E8 00 A0 FD | 	call	#pushregs_
28718     49 A7 02 F6 | 	mov	local01, arg01
2871c     00 94 06 F6 | 	mov	arg02, #0
28720     1C 00 B0 FD | 	call	#__system___gc_doalloc
28724     3D 95 0A F6 | 	mov	arg02, result1 wz
28728     01 A6 56 A2 |  if_e	cmps	local01, #1 wc
2872c     00 7A 06 26 |  if_nc_and_z	mov	result1, #0
28730     4A 7B 02 D6 |  if_c_or_nz	mov	result1, arg02
28734     E7 F0 03 F6 | 	mov	ptra, fp
28738     F2 00 A0 FD | 	call	#popregs_
2873c                 | __system___gc_alloc_managed_ret
2873c     2D 00 64 FD | 	ret
28740                 | 
28740                 | __system___gc_doalloc
28740     06 CA 05 F6 | 	mov	COUNT_, #6
28744     E8 00 A0 FD | 	call	#pushregs_
28748     49 A7 0A F6 | 	mov	local01, arg01 wz
2874c     4A A9 02 F6 | 	mov	local02, arg02
28750     00 7A 06 A6 |  if_e	mov	result1, #0
28754     84 00 90 AD |  if_e	jmp	#LR__3917
28758     17 A6 06 F1 | 	add	local01, #23
2875c     0F A6 26 F5 | 	andn	local01, #15
28760     04 A6 46 F0 | 	shr	local01, #4
28764     34 93 02 F6 | 	mov	arg01, ptr___system__dat__
28768     1C 92 06 F1 | 	add	arg01, #28
2876c     98 C5 BF FD | 	call	#__system___lockmem
28770     53 93 02 F6 | 	mov	arg01, local01
28774     54 95 02 F6 | 	mov	arg02, local02
28778     DC FD BF FD | 	call	#__system___gc_tryalloc
2877c     3D AB 0A F6 | 	mov	local03, result1 wz
28780     14 00 90 5D |  if_ne	jmp	#LR__3910
28784     64 03 B0 FD | 	call	#__system___gc_docollect
28788     53 93 02 F6 | 	mov	arg01, local01
2878c     54 95 02 F6 | 	mov	arg02, local02
28790     C4 FD BF FD | 	call	#__system___gc_tryalloc
28794     3D AB 02 F6 | 	mov	local03, result1
28798                 | LR__3910
28798     34 93 02 F6 | 	mov	arg01, ptr___system__dat__
2879c     1C 92 06 F1 | 	add	arg01, #28
287a0     49 01 68 FC | 	wrlong	#0, arg01
287a4     00 AA 0E F2 | 	cmp	local03, #0 wz
287a8     2C 00 90 AD |  if_e	jmp	#LR__3916
287ac     04 A6 66 F0 | 	shl	local01, #4
287b0     08 A6 86 F1 | 	sub	local01, #8
287b4     53 AD 52 F6 | 	abs	local04, local01 wc
287b8     02 AC 46 F0 | 	shr	local04, #2
287bc     56 AF 8A F6 | 	negc	local05, local04 wz
287c0     55 B1 02 F6 | 	mov	local06, local03
287c4     10 00 90 AD |  if_e	jmp	#LR__3915
287c8     D7 06 48 FB | 	callpa	#(@LR__3913-@LR__3911)>>2,fcache_load_ptr_
287cc                 | LR__3911
287cc     57 05 D8 FC | 	rep	@LR__3914, local05
287d0                 | LR__3912
287d0     58 01 68 FC | 	wrlong	#0, local06
287d4     04 B0 06 F1 | 	add	local06, #4
287d8                 | LR__3913
287d8                 | LR__3914
287d8                 | LR__3915
287d8                 | LR__3916
287d8     55 7B 02 F6 | 	mov	result1, local03
287dc                 | LR__3917
287dc     E7 F0 03 F6 | 	mov	ptra, fp
287e0     F2 00 A0 FD | 	call	#popregs_
287e4                 | __system___gc_doalloc_ret
287e4     2D 00 64 FD | 	ret
287e8                 | 
287e8                 | __system___gc_isvalidptr
287e8     F8 96 06 F4 | 	bitl	arg03, #248
287ec     08 96 86 F1 | 	sub	arg03, #8
287f0     49 97 52 F2 | 	cmps	arg03, arg01 wc
287f4     08 00 90 CD |  if_b	jmp	#LR__3920
287f8     4A 97 52 F2 | 	cmps	arg03, arg02 wc
287fc     08 00 90 CD |  if_b	jmp	#LR__3921
28800                 | LR__3920
28800     00 7A 06 F6 | 	mov	result1, #0
28804     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
28808                 | LR__3921
28808     4B 81 02 F6 | 	mov	_var01, arg03
2880c     49 81 62 F5 | 	xor	_var01, arg01
28810     0F 80 CE F7 | 	test	_var01, #15 wz
28814     00 7A 06 56 |  if_ne	mov	result1, #0
28818     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
2881c     4B 81 02 F6 | 	mov	_var01, arg03
28820     02 80 06 F1 | 	add	_var01, #2
28824     40 81 E2 FA | 	rdword	_var01, _var01
28828     7F 00 00 FF 
2882c     C0 81 06 F5 | 	and	_var01, ##65472
28830     36 00 00 FF 
28834     80 80 0E F2 | 	cmp	_var01, ##27776 wz
28838     00 7A 06 56 |  if_ne	mov	result1, #0
2883c     4B 7B 02 A6 |  if_e	mov	result1, arg03
28840                 | __system___gc_isvalidptr_ret
28840     2D 00 64 FD | 	ret
28844                 | 
28844                 | __system___gc_free
28844     49 97 02 F6 | 	mov	arg03, arg01
28848     74 FC BF FD | 	call	#__system___gc_ptrs
2884c     3D 93 02 F6 | 	mov	arg01, result1
28850     3E 95 02 F6 | 	mov	arg02, result2
28854     90 FF BF FD | 	call	#__system___gc_isvalidptr
28858     3D 95 0A F6 | 	mov	arg02, result1 wz
2885c     20 00 90 AD |  if_e	jmp	#LR__3930
28860     34 93 02 F6 | 	mov	arg01, ptr___system__dat__
28864     1C 92 06 F1 | 	add	arg01, #28
28868     9C C4 BF FD | 	call	#__system___lockmem
2886c     4A 93 02 F6 | 	mov	arg01, arg02
28870     10 00 B0 FD | 	call	#__system___gc_dofree
28874     34 93 02 F6 | 	mov	arg01, ptr___system__dat__
28878     1C 92 06 F1 | 	add	arg01, #28
2887c     49 01 68 FC | 	wrlong	#0, arg01
28880                 | LR__3930
28880                 | __system___gc_free_ret
28880     2D 00 64 FD | 	ret
28884                 | 
28884                 | __system___gc_dofree
28884     06 CA 05 F6 | 	mov	COUNT_, #6
28888     E8 00 A0 FD | 	call	#pushregs_
2888c     49 A7 02 F6 | 	mov	local01, arg01
28890     2C FC BF FD | 	call	#__system___gc_ptrs
28894     3D A9 02 F6 | 	mov	local02, result1
28898     3E AB 02 F6 | 	mov	local03, result2
2889c     53 95 02 F6 | 	mov	arg02, local01
288a0     02 94 06 F1 | 	add	arg02, #2
288a4     36 00 80 FF 
288a8     4A 1F 59 FC | 	wrword	##27791, arg02
288ac     53 AD 02 F6 | 	mov	local04, local01
288b0     53 93 02 F6 | 	mov	arg01, local01
288b4     49 AF EA FA | 	rdword	local05, arg01 wz
288b8     00 7A 06 A6 |  if_e	mov	result1, #0
288bc     04 AE 66 50 |  if_ne	shl	local05, #4
288c0     57 93 02 51 |  if_ne	add	arg01, local05
288c4     49 7B 02 56 |  if_ne	mov	result1, arg01
288c8     3D B1 02 F6 | 	mov	local06, result1
288cc     D7 24 48 FB | 	callpa	#(@LR__3941-@LR__3940)>>2,fcache_load_ptr_
288d0                 | LR__3940
288d0     04 AC 06 F1 | 	add	local04, #4
288d4     56 95 EA FA | 	rdword	arg02, local04 wz
288d8     54 93 02 F6 | 	mov	arg01, local02
288dc     00 7A 06 A6 |  if_e	mov	result1, #0
288e0     04 94 66 50 |  if_ne	shl	arg02, #4
288e4     4A 93 02 51 |  if_ne	add	arg01, arg02
288e8     49 7B 02 56 |  if_ne	mov	result1, arg01
288ec     3D AD 0A F6 | 	mov	local04, result1 wz
288f0     24 00 90 AD |  if_e	jmp	#LR__3942
288f4     56 93 02 F6 | 	mov	arg01, local04
288f8     00 7A 06 F6 | 	mov	result1, #0
288fc     02 92 06 F1 | 	add	arg01, #2
28900     49 93 E2 FA | 	rdword	arg01, arg01
28904     36 00 00 FF 
28908     8F 92 0E F2 | 	cmp	arg01, ##27791 wz
2890c     01 7A 66 A6 |  if_e	neg	result1, #1
28910     00 7A 0E F2 | 	cmp	result1, #0 wz
28914     B8 FF 9F AD |  if_e	jmp	#LR__3940
28918                 | LR__3941
28918                 | LR__3942
28918     00 AC 0E F2 | 	cmp	local04, #0 wz
2891c     54 AD 02 A6 |  if_e	mov	local04, local02
28920     56 95 02 F6 | 	mov	arg02, local04
28924     06 94 06 F1 | 	add	arg02, #6
28928     53 93 02 F6 | 	mov	arg01, local01
2892c     4A 95 E2 FA | 	rdword	arg02, arg02
28930     06 92 06 F1 | 	add	arg01, #6
28934     49 95 52 FC | 	wrword	arg02, arg01
28938     53 95 0A F6 | 	mov	arg02, local01 wz
2893c     00 7A 06 A6 |  if_e	mov	result1, #0
28940     54 95 82 51 |  if_ne	sub	arg02, local02
28944     04 94 46 50 |  if_ne	shr	arg02, #4
28948     4A 7B 02 56 |  if_ne	mov	result1, arg02
2894c     56 95 02 F6 | 	mov	arg02, local04
28950     06 94 06 F1 | 	add	arg02, #6
28954     4A 7B 52 FC | 	wrword	result1, arg02
28958     54 AD 0A F2 | 	cmp	local04, local02 wz
2895c     A4 00 90 AD |  if_e	jmp	#LR__3945
28960     56 93 02 F6 | 	mov	arg01, local04
28964     49 AF EA FA | 	rdword	local05, arg01 wz
28968     00 7A 06 A6 |  if_e	mov	result1, #0
2896c     04 AE 66 50 |  if_ne	shl	local05, #4
28970     57 93 02 51 |  if_ne	add	arg01, local05
28974     49 7B 02 56 |  if_ne	mov	result1, arg01
28978     53 7B 0A F2 | 	cmp	result1, local01 wz
2897c     84 00 90 5D |  if_ne	jmp	#LR__3944
28980     56 B1 E2 FA | 	rdword	local06, local04
28984     53 95 E2 FA | 	rdword	arg02, local01
28988     4A B1 02 F1 | 	add	local06, arg02
2898c     56 B1 52 FC | 	wrword	local06, local04
28990     53 B1 02 F6 | 	mov	local06, local01
28994     02 B0 06 F1 | 	add	local06, #2
28998     58 01 58 FC | 	wrword	#0, local06
2899c     53 93 02 F6 | 	mov	arg01, local01
289a0     49 AF EA FA | 	rdword	local05, arg01 wz
289a4     00 7A 06 A6 |  if_e	mov	result1, #0
289a8     04 AE 66 50 |  if_ne	shl	local05, #4
289ac     57 93 02 51 |  if_ne	add	arg01, local05
289b0     49 7B 02 56 |  if_ne	mov	result1, arg01
289b4     3D B1 02 F6 | 	mov	local06, result1
289b8     55 B1 52 F2 | 	cmps	local06, local03 wc
289bc     20 00 90 3D |  if_ae	jmp	#LR__3943
289c0     56 95 0A F6 | 	mov	arg02, local04 wz
289c4     00 7A 06 A6 |  if_e	mov	result1, #0
289c8     54 95 82 51 |  if_ne	sub	arg02, local02
289cc     04 94 46 50 |  if_ne	shr	arg02, #4
289d0     4A 7B 02 56 |  if_ne	mov	result1, arg02
289d4     58 95 02 F6 | 	mov	arg02, local06
289d8     04 94 06 F1 | 	add	arg02, #4
289dc     4A 7B 52 FC | 	wrword	result1, arg02
289e0                 | LR__3943
289e0     53 95 02 F6 | 	mov	arg02, local01
289e4     06 94 06 F1 | 	add	arg02, #6
289e8     56 7D 02 F6 | 	mov	result2, local04
289ec     4A 95 E2 FA | 	rdword	arg02, arg02
289f0     06 7C 06 F1 | 	add	result2, #6
289f4     3E 95 52 FC | 	wrword	arg02, result2
289f8     06 A6 06 F1 | 	add	local01, #6
289fc     53 01 58 FC | 	wrword	#0, local01
28a00     56 A7 02 F6 | 	mov	local01, local04
28a04                 | LR__3944
28a04                 | LR__3945
28a04     53 93 02 F6 | 	mov	arg01, local01
28a08     49 AF EA FA | 	rdword	local05, arg01 wz
28a0c     00 7A 06 A6 |  if_e	mov	result1, #0
28a10     04 AE 66 50 |  if_ne	shl	local05, #4
28a14     57 93 02 51 |  if_ne	add	arg01, local05
28a18     49 7B 02 56 |  if_ne	mov	result1, arg01
28a1c     3D 95 0A F6 | 	mov	arg02, result1 wz
28a20     B8 00 90 AD |  if_e	jmp	#LR__3947
28a24     55 95 52 F2 | 	cmps	arg02, local03 wc
28a28     B0 00 90 3D |  if_ae	jmp	#LR__3947
28a2c     4A 93 02 F6 | 	mov	arg01, arg02
28a30     00 7A 06 F6 | 	mov	result1, #0
28a34     02 92 06 F1 | 	add	arg01, #2
28a38     49 93 E2 FA | 	rdword	arg01, arg01
28a3c     36 00 00 FF 
28a40     8F 92 0E F2 | 	cmp	arg01, ##27791 wz
28a44     01 7A 66 A6 |  if_e	neg	result1, #1
28a48     00 7A 0E F2 | 	cmp	result1, #0 wz
28a4c     8C 00 90 AD |  if_e	jmp	#LR__3947
28a50     53 AD 02 F6 | 	mov	local04, local01
28a54     56 B1 E2 FA | 	rdword	local06, local04
28a58     4A 93 02 F6 | 	mov	arg01, arg02
28a5c     49 A7 E2 FA | 	rdword	local01, arg01
28a60     53 B1 02 F1 | 	add	local06, local01
28a64     56 B1 52 FC | 	wrword	local06, local04
28a68     49 B1 02 F6 | 	mov	local06, arg01
28a6c     06 B0 06 F1 | 	add	local06, #6
28a70     56 A7 02 F6 | 	mov	local01, local04
28a74     58 B1 E2 FA | 	rdword	local06, local06
28a78     06 A6 06 F1 | 	add	local01, #6
28a7c     53 B1 52 FC | 	wrword	local06, local01
28a80     49 B1 02 F6 | 	mov	local06, arg01
28a84     02 B0 06 F1 | 	add	local06, #2
28a88     58 55 59 FC | 	wrword	#170, local06
28a8c     49 B1 02 F6 | 	mov	local06, arg01
28a90     06 B0 06 F1 | 	add	local06, #6
28a94     58 01 58 FC | 	wrword	#0, local06
28a98     49 AF EA FA | 	rdword	local05, arg01 wz
28a9c     00 7A 06 A6 |  if_e	mov	result1, #0
28aa0     04 AE 66 50 |  if_ne	shl	local05, #4
28aa4     57 93 02 51 |  if_ne	add	arg01, local05
28aa8     49 7B 02 56 |  if_ne	mov	result1, arg01
28aac     3D B1 0A F6 | 	mov	local06, result1 wz
28ab0     28 00 90 AD |  if_e	jmp	#LR__3946
28ab4     55 B1 52 F2 | 	cmps	local06, local03 wc
28ab8     20 00 90 3D |  if_ae	jmp	#LR__3946
28abc     56 95 0A F6 | 	mov	arg02, local04 wz
28ac0     00 7A 06 A6 |  if_e	mov	result1, #0
28ac4     54 95 82 51 |  if_ne	sub	arg02, local02
28ac8     04 94 46 50 |  if_ne	shr	arg02, #4
28acc     4A 7B 02 56 |  if_ne	mov	result1, arg02
28ad0     58 AD 02 F6 | 	mov	local04, local06
28ad4     04 AC 06 F1 | 	add	local04, #4
28ad8     56 7B 52 FC | 	wrword	result1, local04
28adc                 | LR__3946
28adc                 | LR__3947
28adc     58 7B 02 F6 | 	mov	result1, local06
28ae0     E7 F0 03 F6 | 	mov	ptra, fp
28ae4     F2 00 A0 FD | 	call	#popregs_
28ae8                 | __system___gc_dofree_ret
28ae8     2D 00 64 FD | 	ret
28aec                 | 
28aec                 | __system___gc_docollect
28aec     05 CA 05 F6 | 	mov	COUNT_, #5
28af0     E8 00 A0 FD | 	call	#pushregs_
28af4     C8 F9 BF FD | 	call	#__system___gc_ptrs
28af8     3E A7 02 F6 | 	mov	local01, result2
28afc     3D A9 02 F6 | 	mov	local02, result1
28b00     54 93 02 F6 | 	mov	arg01, local02
28b04     49 AB EA FA | 	rdword	local03, arg01 wz
28b08     00 7A 06 A6 |  if_e	mov	result1, #0
28b0c     04 AA 66 50 |  if_ne	shl	local03, #4
28b10     55 93 02 51 |  if_ne	add	arg01, local03
28b14     49 7B 02 56 |  if_ne	mov	result1, arg01
28b18     3D AD 0A F6 | 	mov	local04, result1 wz
28b1c     00 7A 06 F6 | 	mov	result1, #0
28b20     01 7A 62 FD | 	cogid	result1
28b24     3D AF 02 F6 | 	mov	local05, result1
28b28     48 00 90 AD |  if_e	jmp	#LR__3952
28b2c     D7 22 48 FB | 	callpa	#(@LR__3951-@LR__3950)>>2,fcache_load_ptr_
28b30                 | LR__3950
28b30     53 AD 52 F2 | 	cmps	local04, local01 wc
28b34     3C 00 90 3D |  if_ae	jmp	#LR__3952
28b38     56 95 02 F6 | 	mov	arg02, local04
28b3c     02 94 06 F1 | 	add	arg02, #2
28b40     4A 95 E2 FA | 	rdword	arg02, arg02
28b44     20 94 26 F5 | 	andn	arg02, #32
28b48     56 93 02 F6 | 	mov	arg01, local04
28b4c     02 92 06 F1 | 	add	arg01, #2
28b50     49 95 52 FC | 	wrword	arg02, arg01
28b54     56 93 02 F6 | 	mov	arg01, local04
28b58     49 AB EA FA | 	rdword	local03, arg01 wz
28b5c     00 7A 06 A6 |  if_e	mov	result1, #0
28b60     04 AA 66 50 |  if_ne	shl	local03, #4
28b64     55 93 02 51 |  if_ne	add	arg01, local03
28b68     49 7B 02 56 |  if_ne	mov	result1, arg01
28b6c     3D AD 0A F6 | 	mov	local04, result1 wz
28b70     BC FF 9F 5D |  if_ne	jmp	#LR__3950
28b74                 | LR__3951
28b74                 | LR__3952
28b74     00 AA 06 F6 | 	mov	local03, #0
28b78     00 92 06 F6 | 	mov	arg01, #0
28b7c     60 C1 BF FD | 	call	#__system____topofstack
28b80     3D 95 02 F6 | 	mov	arg02, result1
28b84     55 93 02 F6 | 	mov	arg01, local03
28b88     90 00 B0 FD | 	call	#__system___gc_markhub
28b8c     1C 01 B0 FD | 	call	#__system___gc_markcog
28b90     54 93 02 F6 | 	mov	arg01, local02
28b94     49 AB EA FA | 	rdword	local03, arg01 wz
28b98     00 7A 06 A6 |  if_e	mov	result1, #0
28b9c     04 AA 66 50 |  if_ne	shl	local03, #4
28ba0     55 93 02 51 |  if_ne	add	arg01, local03
28ba4     49 7B 02 56 |  if_ne	mov	result1, arg01
28ba8     3D A9 0A F6 | 	mov	local02, result1 wz
28bac     60 00 90 AD |  if_e	jmp	#LR__3956
28bb0                 | LR__3953
28bb0     54 AD 02 F6 | 	mov	local04, local02
28bb4     56 93 02 F6 | 	mov	arg01, local04
28bb8     49 AB EA FA | 	rdword	local03, arg01 wz
28bbc     00 7A 06 A6 |  if_e	mov	result1, #0
28bc0     04 AA 66 50 |  if_ne	shl	local03, #4
28bc4     55 93 02 51 |  if_ne	add	arg01, local03
28bc8     49 7B 02 56 |  if_ne	mov	result1, arg01
28bcc     3D A9 02 F6 | 	mov	local02, result1
28bd0     56 95 02 F6 | 	mov	arg02, local04
28bd4     02 94 06 F1 | 	add	arg02, #2
28bd8     4A 95 E2 FA | 	rdword	arg02, arg02
28bdc     20 94 CE F7 | 	test	arg02, #32 wz
28be0     10 94 CE A7 |  if_e	test	arg02, #16 wz
28be4     1C 00 90 5D |  if_ne	jmp	#LR__3955
28be8     4A 95 42 F8 | 	getnib	arg02, arg02, #0
28bec     57 95 0A F2 | 	cmp	arg02, local05 wz
28bf0     0E 94 0E 52 |  if_ne	cmp	arg02, #14 wz
28bf4     0C 00 90 5D |  if_ne	jmp	#LR__3954
28bf8     56 93 02 F6 | 	mov	arg01, local04
28bfc     84 FC BF FD | 	call	#__system___gc_dofree
28c00     3D A9 02 F6 | 	mov	local02, result1
28c04                 | LR__3954
28c04                 | LR__3955
28c04     00 A8 0E F2 | 	cmp	local02, #0 wz
28c08     53 A9 52 52 |  if_ne	cmps	local02, local01 wc
28c0c     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3953
28c10                 | LR__3956
28c10     E7 F0 03 F6 | 	mov	ptra, fp
28c14     F2 00 A0 FD | 	call	#popregs_
28c18                 | __system___gc_docollect_ret
28c18     2D 00 64 FD | 	ret
28c1c                 | 
28c1c                 | __system___gc_markhub
28c1c     04 CA 05 F6 | 	mov	COUNT_, #4
28c20     E8 00 A0 FD | 	call	#pushregs_
28c24     49 A7 02 F6 | 	mov	local01, arg01
28c28     4A A9 02 F6 | 	mov	local02, arg02
28c2c     90 F8 BF FD | 	call	#__system___gc_ptrs
28c30     3D AB 02 F6 | 	mov	local03, result1
28c34     3E AD 02 F6 | 	mov	local04, result2
28c38                 | LR__3960
28c38     54 A7 52 F2 | 	cmps	local01, local02 wc
28c3c     60 00 90 3D |  if_ae	jmp	#LR__3961
28c40     53 97 02 FB | 	rdlong	arg03, local01
28c44     04 A6 06 F1 | 	add	local01, #4
28c48     56 95 02 F6 | 	mov	arg02, local04
28c4c     55 93 02 F6 | 	mov	arg01, local03
28c50     94 FB BF FD | 	call	#__system___gc_isvalidptr
28c54     3D 97 0A F6 | 	mov	arg03, result1 wz
28c58     DC FF 9F AD |  if_e	jmp	#LR__3960
28c5c     4B 93 02 F6 | 	mov	arg01, arg03
28c60     00 7A 06 F6 | 	mov	result1, #0
28c64     02 92 06 F1 | 	add	arg01, #2
28c68     49 93 E2 FA | 	rdword	arg01, arg01
28c6c     36 00 00 FF 
28c70     8F 92 0E F2 | 	cmp	arg01, ##27791 wz
28c74     01 7A 66 A6 |  if_e	neg	result1, #1
28c78     00 7A 0E F2 | 	cmp	result1, #0 wz
28c7c     B8 FF 9F 5D |  if_ne	jmp	#LR__3960
28c80     4B 7D 02 F6 | 	mov	result2, arg03
28c84     02 7C 06 F1 | 	add	result2, #2
28c88     3E 7D E2 FA | 	rdword	result2, result2
28c8c     0F 7C 26 F5 | 	andn	result2, #15
28c90     2E 7C 46 F5 | 	or	result2, #46
28c94     02 96 06 F1 | 	add	arg03, #2
28c98     4B 7D 52 FC | 	wrword	result2, arg03
28c9c     98 FF 9F FD | 	jmp	#LR__3960
28ca0                 | LR__3961
28ca0     E7 F0 03 F6 | 	mov	ptra, fp
28ca4     F2 00 A0 FD | 	call	#popregs_
28ca8                 | __system___gc_markhub_ret
28ca8     2D 00 64 FD | 	ret
28cac                 | 
28cac                 | __system___gc_markcog
28cac     04 CA 05 F6 | 	mov	COUNT_, #4
28cb0     E8 00 A0 FD | 	call	#pushregs_
28cb4     08 F8 BF FD | 	call	#__system___gc_ptrs
28cb8     3D A7 02 F6 | 	mov	local01, result1
28cbc     3E A9 02 F6 | 	mov	local02, result2
28cc0     EF AB 06 F6 | 	mov	local03, #495
28cc4                 | LR__3970
28cc4                 | 	'.live	local03
28cc4     00 AA 96 F9 | 	alts	local03, #0
28cc8     55 AD 02 F6 | 	mov	local04, local03
28ccc     53 93 02 F6 | 	mov	arg01, local01
28cd0     54 95 02 F6 | 	mov	arg02, local02
28cd4     56 97 02 F6 | 	mov	arg03, local04
28cd8     0C FB BF FD | 	call	#__system___gc_isvalidptr
28cdc     00 7A 0E F2 | 	cmp	result1, #0 wz
28ce0     18 00 90 AD |  if_e	jmp	#LR__3971
28ce4     3D AD 02 F6 | 	mov	local04, result1
28ce8     02 AC 06 F1 | 	add	local04, #2
28cec     56 AD E2 FA | 	rdword	local04, local04
28cf0     20 AC 46 F5 | 	or	local04, #32
28cf4     02 7A 06 F1 | 	add	result1, #2
28cf8     3D AD 52 FC | 	wrword	local04, result1
28cfc                 | LR__3971
28cfc     01 AA 86 F1 | 	sub	local03, #1
28d00     00 AA 56 F2 | 	cmps	local03, #0 wc
28d04     BC FF 9F 3D |  if_ae	jmp	#LR__3970
28d08     E7 F0 03 F6 | 	mov	ptra, fp
28d0c     F2 00 A0 FD | 	call	#popregs_
28d10                 | __system___gc_markcog_ret
28d10     2D 00 64 FD | 	ret
28d14                 | 
28d14                 | __system___get_vfs_file_handle
28d14     01 CA 05 F6 | 	mov	COUNT_, #1
28d18     E8 00 A0 FD | 	call	#pushregs_
28d1c     30 CC BF FD | 	call	#__system___find_free_file
28d20     3D A7 02 F6 | 	mov	local01, result1
28d24     00 A6 56 F2 | 	cmps	local01, #0 wc
28d28     34 A6 06 3D |  if_ae	qmul	local01, #52
28d2c     00 7A 06 C6 |  if_b	mov	result1, #0
28d30     34 A7 02 36 |  if_ae	mov	local01, ptr___system__dat__
28d34     02 00 00 3F 
28d38     2C A7 06 31 |  if_ae	add	local01, ##1324
28d3c     18 7A 62 3D |  if_ae	getqx	result1
28d40     53 7B 02 31 |  if_ae	add	result1, local01
28d44     E7 F0 03 F6 | 	mov	ptra, fp
28d48     F2 00 A0 FD | 	call	#popregs_
28d4c                 | __system___get_vfs_file_handle_ret
28d4c     2D 00 64 FD | 	ret
28d50                 | 
28d50                 | __system__opendir
28d50     06 CA 05 F6 | 	mov	COUNT_, #6
28d54     E8 00 A0 FD | 	call	#pushregs_
28d58     34 A7 02 F6 | 	mov	local01, ptr___system__dat__
28d5c     84 A7 06 F1 | 	add	local01, #388
28d60     49 95 02 F6 | 	mov	arg02, arg01
28d64     53 93 02 F6 | 	mov	arg01, local01
28d68     00 96 06 F6 | 	mov	arg03, #0
28d6c     E4 C6 BF FD | 	call	#__system____getvfsforfile
28d70     3D A9 0A F6 | 	mov	local02, result1 wz
28d74     10 00 90 AD |  if_e	jmp	#LR__3980
28d78     28 A8 06 F1 | 	add	local02, #40
28d7c     54 97 0A FB | 	rdlong	arg03, local02 wz
28d80     28 A8 86 F1 | 	sub	local02, #40
28d84     14 00 90 5D |  if_ne	jmp	#LR__3981
28d88                 | LR__3980
28d88     20 68 06 F1 | 	add	ptr___system__dat__, #32
28d8c     34 21 68 FC | 	wrlong	#16, ptr___system__dat__
28d90     20 68 86 F1 | 	sub	ptr___system__dat__, #32
28d94     00 7A 06 F6 | 	mov	result1, #0
28d98     90 00 90 FD | 	jmp	#LR__3983
28d9c                 | LR__3981
28d9c     5C 92 06 F6 | 	mov	arg01, #92
28da0     10 94 06 F6 | 	mov	arg02, #16
28da4     98 F9 BF FD | 	call	#__system___gc_doalloc
28da8     3D AB 0A F6 | 	mov	local03, result1 wz
28dac     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
28db0     34 0F 68 AC |  if_e	wrlong	#7, ptr___system__dat__
28db4     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
28db8     00 7A 06 A6 |  if_e	mov	result1, #0
28dbc     6C 00 90 AD |  if_e	jmp	#LR__3983
28dc0     28 A8 06 F1 | 	add	local02, #40
28dc4     54 AD 02 FB | 	rdlong	local04, local02
28dc8     56 AF 02 F6 | 	mov	local05, local04
28dcc     28 A8 86 F1 | 	sub	local02, #40
28dd0     13 AE 46 F7 | 	zerox	local05, #19
28dd4     14 AC 46 F0 | 	shr	local04, #20
28dd8     02 AC 66 F0 | 	shl	local04, #2
28ddc     2D AD 02 F1 | 	add	local04, __methods__
28de0     56 AD 02 FB | 	rdlong	local04, local04
28de4     55 93 02 F6 | 	mov	arg01, local03
28de8     53 95 02 F6 | 	mov	arg02, local01
28dec     32 B1 02 F6 | 	mov	local06, objptr
28df0     57 65 02 F6 | 	mov	objptr, local05
28df4     2D AC 62 FD | 	call	local04
28df8     58 65 02 F6 | 	mov	objptr, local06
28dfc     3D 97 0A F6 | 	mov	arg03, result1 wz
28e00     20 00 90 AD |  if_e	jmp	#LR__3982
28e04     00 96 4E F2 | 	cmps	arg03, #0 wz
28e08     20 68 06 F1 | 	add	ptr___system__dat__, #32
28e0c     34 97 62 FC | 	wrlong	arg03, ptr___system__dat__
28e10     20 68 86 F1 | 	sub	ptr___system__dat__, #32
28e14     55 93 02 F6 | 	mov	arg01, local03
28e18     28 FA BF FD | 	call	#__system___gc_free
28e1c     00 7A 06 F6 | 	mov	result1, #0
28e20     08 00 90 FD | 	jmp	#LR__3983
28e24                 | LR__3982
28e24     55 A9 62 FC | 	wrlong	local02, local03
28e28     55 7B 02 F6 | 	mov	result1, local03
28e2c                 | LR__3983
28e2c     E7 F0 03 F6 | 	mov	ptra, fp
28e30     F2 00 A0 FD | 	call	#popregs_
28e34                 | __system__opendir_ret
28e34     2D 00 64 FD | 	ret
28e38                 | 
28e38                 | __system__closedir
28e38     04 CA 05 F6 | 	mov	COUNT_, #4
28e3c     E8 00 A0 FD | 	call	#pushregs_
28e40     49 A7 02 F6 | 	mov	local01, arg01
28e44     53 93 02 FB | 	rdlong	arg01, local01
28e48     2C 92 06 F1 | 	add	arg01, #44
28e4c     49 A9 02 FB | 	rdlong	local02, arg01
28e50     54 AB 02 F6 | 	mov	local03, local02
28e54     13 AA 46 F7 | 	zerox	local03, #19
28e58     14 A8 46 F0 | 	shr	local02, #20
28e5c     02 A8 66 F0 | 	shl	local02, #2
28e60     2D A9 02 F1 | 	add	local02, __methods__
28e64     54 A9 02 FB | 	rdlong	local02, local02
28e68     53 93 02 F6 | 	mov	arg01, local01
28e6c     32 AD 02 F6 | 	mov	local04, objptr
28e70     55 65 02 F6 | 	mov	objptr, local03
28e74     2D A8 62 FD | 	call	local02
28e78     56 65 02 F6 | 	mov	objptr, local04
28e7c     3D AD 02 F6 | 	mov	local04, result1
28e80     53 93 02 F6 | 	mov	arg01, local01
28e84     BC F9 BF FD | 	call	#__system___gc_free
28e88     00 AC 4E F2 | 	cmps	local04, #0 wz
28e8c     20 68 06 F1 | 	add	ptr___system__dat__, #32
28e90     34 AD 62 FC | 	wrlong	local04, ptr___system__dat__
28e94     20 68 86 F1 | 	sub	ptr___system__dat__, #32
28e98     01 7A 66 56 |  if_ne	neg	result1, #1
28e9c     00 7A 06 A6 |  if_e	mov	result1, #0
28ea0     E7 F0 03 F6 | 	mov	ptra, fp
28ea4     F2 00 A0 FD | 	call	#popregs_
28ea8                 | __system__closedir_ret
28ea8     2D 00 64 FD | 	ret
28eac                 | 
28eac                 | __system__readdir
28eac     04 CA 05 F6 | 	mov	COUNT_, #4
28eb0     E8 00 A0 FD | 	call	#pushregs_
28eb4     49 95 0A FB | 	rdlong	arg02, arg01 wz
28eb8     49 A7 02 F6 | 	mov	local01, arg01
28ebc     08 A6 06 F1 | 	add	local01, #8
28ec0     00 7A 06 A6 |  if_e	mov	result1, #0
28ec4     5C 00 90 AD |  if_e	jmp	#LR__3991
28ec8     30 94 06 F1 | 	add	arg02, #48
28ecc     4A A9 02 FB | 	rdlong	local02, arg02
28ed0     54 AB 02 F6 | 	mov	local03, local02
28ed4     13 AA 46 F7 | 	zerox	local03, #19
28ed8     14 A8 46 F0 | 	shr	local02, #20
28edc     02 A8 66 F0 | 	shl	local02, #2
28ee0     2D A9 02 F1 | 	add	local02, __methods__
28ee4     54 A9 02 FB | 	rdlong	local02, local02
28ee8     53 95 02 F6 | 	mov	arg02, local01
28eec     32 AD 02 F6 | 	mov	local04, objptr
28ef0     55 65 02 F6 | 	mov	objptr, local03
28ef4     2D A8 62 FD | 	call	local02
28ef8     56 65 02 F6 | 	mov	objptr, local04
28efc     00 7A 4E F2 | 	cmps	result1, #0 wz
28f00     1C 00 90 AD |  if_e	jmp	#LR__3990
28f04     01 7A 56 F2 | 	cmps	result1, #1 wc
28f08     00 7A 4E 32 |  if_ae	cmps	result1, #0 wz
28f0c     20 68 06 31 |  if_ae	add	ptr___system__dat__, #32
28f10     34 7B 62 3C |  if_ae	wrlong	result1, ptr___system__dat__
28f14     20 68 86 31 |  if_ae	sub	ptr___system__dat__, #32
28f18     00 7A 06 F6 | 	mov	result1, #0
28f1c     04 00 90 FD | 	jmp	#LR__3991
28f20                 | LR__3990
28f20     53 7B 02 F6 | 	mov	result1, local01
28f24                 | LR__3991
28f24     E7 F0 03 F6 | 	mov	ptra, fp
28f28     F2 00 A0 FD | 	call	#popregs_
28f2c                 | __system__readdir_ret
28f2c     2D 00 64 FD | 	ret
28f30                 | 
28f30                 | __system___openraw
28f30     15 CA 05 F6 | 	mov	COUNT_, #21
28f34     E8 00 A0 FD | 	call	#pushregs_
28f38     49 A7 02 F6 | 	mov	local01, arg01
28f3c     4A A9 02 F6 | 	mov	local02, arg02
28f40     4B AB 02 F6 | 	mov	local03, arg03
28f44     4C AD 02 F6 | 	mov	local04, arg04
28f48     0F AE C6 F9 | 	decod	local05, #15
28f4c     53 B1 02 F6 | 	mov	local06, local01
28f50     00 B2 06 F6 | 	mov	local07, #0
28f54     34 B5 02 F6 | 	mov	local08, ptr___system__dat__
28f58     84 B5 06 F1 | 	add	local08, #388
28f5c     5A 93 02 F6 | 	mov	arg01, local08
28f60     54 95 02 F6 | 	mov	arg02, local02
28f64     00 96 06 F6 | 	mov	arg03, #0
28f68     E8 C4 BF FD | 	call	#__system____getvfsforfile
28f6c     3D B7 0A F6 | 	mov	local09, result1 wz
28f70     10 00 90 AD |  if_e	jmp	#LR__4000
28f74     20 B6 06 F1 | 	add	local09, #32
28f78     5B 7B 0A FB | 	rdlong	result1, local09 wz
28f7c     20 B6 86 F1 | 	sub	local09, #32
28f80     14 00 90 5D |  if_ne	jmp	#LR__4001
28f84                 | LR__4000
28f84     20 68 06 F1 | 	add	ptr___system__dat__, #32
28f88     34 21 68 FC | 	wrlong	#16, ptr___system__dat__
28f8c     20 68 86 F1 | 	sub	ptr___system__dat__, #32
28f90     01 7A 66 F6 | 	neg	result1, #1
28f94     DC 02 90 FD | 	jmp	#LR__4016
28f98                 | LR__4001
28f98     58 93 02 F6 | 	mov	arg01, local06
28f9c     00 94 06 F6 | 	mov	arg02, #0
28fa0     34 96 06 F6 | 	mov	arg03, #52
28fa4     49 B9 02 F6 | 	mov	local10, arg01
28fa8     D8 00 A0 FD | 	call	#\builtin_bytefill_
28fac     20 B6 06 F1 | 	add	local09, #32
28fb0     5B BB 02 FB | 	rdlong	local11, local09
28fb4     5D BD 02 F6 | 	mov	local12, local11
28fb8     5D BF 02 F6 | 	mov	local13, local11
28fbc     20 B6 86 F1 | 	sub	local09, #32
28fc0     5F C1 02 F6 | 	mov	local14, local13
28fc4     13 BC 46 F7 | 	zerox	local12, #19
28fc8     14 C0 46 F0 | 	shr	local14, #20
28fcc     02 C0 66 F0 | 	shl	local14, #2
28fd0     2D C1 02 F1 | 	add	local14, __methods__
28fd4     60 C1 02 FB | 	rdlong	local14, local14
28fd8     58 C3 02 F6 | 	mov	local15, local06
28fdc     5A C5 02 F6 | 	mov	local16, local08
28fe0     55 C7 02 F6 | 	mov	local17, local03
28fe4     61 93 02 F6 | 	mov	arg01, local15
28fe8     62 95 02 F6 | 	mov	arg02, local16
28fec     63 97 02 F6 | 	mov	arg03, local17
28ff0     32 C9 02 F6 | 	mov	local18, objptr
28ff4     5E 65 02 F6 | 	mov	objptr, local12
28ff8     2D C0 62 FD | 	call	local14
28ffc     64 65 02 F6 | 	mov	objptr, local18
29000     3D CB 0A F6 | 	mov	local19, result1 wz
29004     04 AA CE 57 |  if_ne	test	local03, #4 wz
29008     58 00 90 AD |  if_e	jmp	#LR__4002
2900c     24 B6 06 F1 | 	add	local09, #36
29010     5B BB 02 FB | 	rdlong	local11, local09
29014     5D BD 02 F6 | 	mov	local12, local11
29018     5D BF 02 F6 | 	mov	local13, local11
2901c     24 B6 86 F1 | 	sub	local09, #36
29020     5F C1 02 F6 | 	mov	local14, local13
29024     13 BC 46 F7 | 	zerox	local12, #19
29028     14 C0 46 F0 | 	shr	local14, #20
2902c     02 C0 66 F0 | 	shl	local14, #2
29030     2D C1 02 F1 | 	add	local14, __methods__
29034     60 C1 02 FB | 	rdlong	local14, local14
29038     58 C3 02 F6 | 	mov	local15, local06
2903c     5A C5 02 F6 | 	mov	local16, local08
29040     56 C7 02 F6 | 	mov	local17, local04
29044     61 93 02 F6 | 	mov	arg01, local15
29048     62 95 02 F6 | 	mov	arg02, local16
2904c     63 97 02 F6 | 	mov	arg03, local17
29050     32 C9 02 F6 | 	mov	local18, objptr
29054     5E 65 02 F6 | 	mov	objptr, local12
29058     2D C0 62 FD | 	call	local14
2905c     64 65 02 F6 | 	mov	objptr, local18
29060     3D CB 02 F6 | 	mov	local19, result1
29064                 | LR__4002
29064     00 CA 0E F2 | 	cmp	local19, #0 wz
29068     DC 01 90 5D |  if_ne	jmp	#LR__4014
2906c     55 CD 02 F6 | 	mov	local20, local03
29070     03 CC 0E F5 | 	and	local20, #3 wz
29074     02 AE 46 55 |  if_ne	or	local05, #2
29078     01 CC 0E F2 | 	cmp	local20, #1 wz
2907c     01 AE 46 55 |  if_ne	or	local05, #1
29080     20 AA CE F7 | 	test	local03, #32 wz
29084     80 AF 46 55 |  if_ne	or	local05, #384
29088     08 B0 06 F1 | 	add	local06, #8
2908c     58 AF 62 FC | 	wrlong	local05, local06
29090     0C B0 06 F1 | 	add	local06, #12
29094     58 CF 0A FB | 	rdlong	local21, local06 wz
29098     14 B0 86 F1 | 	sub	local06, #20
2909c     18 00 90 5D |  if_ne	jmp	#LR__4003
290a0     04 B6 06 F1 | 	add	local09, #4
290a4     5B CF 02 FB | 	rdlong	local21, local09
290a8     04 B6 86 F1 | 	sub	local09, #4
290ac     14 B0 06 F1 | 	add	local06, #20
290b0     58 CF 62 FC | 	wrlong	local21, local06
290b4     14 B0 86 F1 | 	sub	local06, #20
290b8                 | LR__4003
290b8     18 B0 06 F1 | 	add	local06, #24
290bc     58 CF 0A FB | 	rdlong	local21, local06 wz
290c0     18 B0 86 F1 | 	sub	local06, #24
290c4     18 00 90 5D |  if_ne	jmp	#LR__4004
290c8     08 B6 06 F1 | 	add	local09, #8
290cc     5B CF 02 FB | 	rdlong	local21, local09
290d0     08 B6 86 F1 | 	sub	local09, #8
290d4     18 B0 06 F1 | 	add	local06, #24
290d8     58 CF 62 FC | 	wrlong	local21, local06
290dc     18 B0 86 F1 | 	sub	local06, #24
290e0                 | LR__4004
290e0     24 B0 06 F1 | 	add	local06, #36
290e4     58 CF 0A FB | 	rdlong	local21, local06 wz
290e8     24 B0 86 F1 | 	sub	local06, #36
290ec     5B CF 02 AB |  if_e	rdlong	local21, local09
290f0     24 B0 06 A1 |  if_e	add	local06, #36
290f4     58 CF 62 AC |  if_e	wrlong	local21, local06
290f8     24 B0 86 A1 |  if_e	sub	local06, #36
290fc     28 B0 06 F1 | 	add	local06, #40
29100     58 CF 0A FB | 	rdlong	local21, local06 wz
29104     28 B0 86 F1 | 	sub	local06, #40
29108     18 00 90 5D |  if_ne	jmp	#LR__4005
2910c     10 B6 06 F1 | 	add	local09, #16
29110     5B CF 02 FB | 	rdlong	local21, local09
29114     10 B6 86 F1 | 	sub	local09, #16
29118     28 B0 06 F1 | 	add	local06, #40
2911c     58 CF 62 FC | 	wrlong	local21, local06
29120     28 B0 86 F1 | 	sub	local06, #40
29124                 | LR__4005
29124     30 B0 06 F1 | 	add	local06, #48
29128     58 CF 0A FB | 	rdlong	local21, local06 wz
2912c     30 B0 86 F1 | 	sub	local06, #48
29130     18 00 90 5D |  if_ne	jmp	#LR__4006
29134     0C B6 06 F1 | 	add	local09, #12
29138     5B CF 02 FB | 	rdlong	local21, local09
2913c     0C B6 86 F1 | 	sub	local09, #12
29140     30 B0 06 F1 | 	add	local06, #48
29144     58 CF 62 FC | 	wrlong	local21, local06
29148     30 B0 86 F1 | 	sub	local06, #48
2914c                 | LR__4006
2914c     20 B0 06 F1 | 	add	local06, #32
29150     58 CF 0A FB | 	rdlong	local21, local06 wz
29154     20 B0 86 F1 | 	sub	local06, #32
29158     18 00 90 5D |  if_ne	jmp	#LR__4007
2915c     50 B6 06 F1 | 	add	local09, #80
29160     5B CF 02 FB | 	rdlong	local21, local09
29164     50 B6 86 F1 | 	sub	local09, #80
29168     20 B0 06 F1 | 	add	local06, #32
2916c     58 CF 62 FC | 	wrlong	local21, local06
29170     20 B0 86 F1 | 	sub	local06, #32
29174                 | LR__4007
29174     1C B0 06 F1 | 	add	local06, #28
29178     58 CF 0A FB | 	rdlong	local21, local06 wz
2917c     1C B0 86 F1 | 	sub	local06, #28
29180     18 00 90 5D |  if_ne	jmp	#LR__4008
29184     54 B6 06 F1 | 	add	local09, #84
29188     5B CF 02 FB | 	rdlong	local21, local09
2918c     54 B6 86 F1 | 	sub	local09, #84
29190     1C B0 06 F1 | 	add	local06, #28
29194     58 CF 62 FC | 	wrlong	local21, local06
29198     1C B0 86 F1 | 	sub	local06, #28
2919c                 | LR__4008
2919c     1C B0 06 F1 | 	add	local06, #28
291a0     58 CF 0A FB | 	rdlong	local21, local06 wz
291a4     1C B0 86 F1 | 	sub	local06, #28
291a8     1C 00 90 5D |  if_ne	jmp	#LR__4009
291ac     01 B2 06 F6 | 	mov	local07, #1
291b0     32 93 02 F6 | 	mov	arg01, objptr
291b4     00 C0 05 FF 
291b8     00 92 46 F5 | 	or	arg01, ##192937984
291bc     1C B0 06 F1 | 	add	local06, #28
291c0     58 93 62 FC | 	wrlong	arg01, local06
291c4     1C B0 86 F1 | 	sub	local06, #28
291c8                 | LR__4009
291c8     20 B0 06 F1 | 	add	local06, #32
291cc     58 CF 0A FB | 	rdlong	local21, local06 wz
291d0     20 B0 86 F1 | 	sub	local06, #32
291d4     1C 00 90 5D |  if_ne	jmp	#LR__4010
291d8     01 B2 06 F6 | 	mov	local07, #1
291dc     32 93 02 F6 | 	mov	arg01, objptr
291e0     00 C8 05 FF 
291e4     00 92 46 F5 | 	or	arg01, ##193986560
291e8     20 B0 06 F1 | 	add	local06, #32
291ec     58 93 62 FC | 	wrlong	arg01, local06
291f0     20 B0 86 F1 | 	sub	local06, #32
291f4                 | LR__4010
291f4     2C B0 06 F1 | 	add	local06, #44
291f8     58 CF 0A FB | 	rdlong	local21, local06 wz
291fc     2C B0 86 F1 | 	sub	local06, #44
29200     44 00 90 5D |  if_ne	jmp	#LR__4013
29204     14 B6 06 F1 | 	add	local09, #20
29208     5B CF 0A FB | 	rdlong	local21, local09 wz
2920c     14 B6 86 F1 | 	sub	local09, #20
29210     18 00 90 AD |  if_e	jmp	#LR__4011
29214     14 B6 06 F1 | 	add	local09, #20
29218     5B CF 02 FB | 	rdlong	local21, local09
2921c     2C B0 06 F1 | 	add	local06, #44
29220     58 CF 62 FC | 	wrlong	local21, local06
29224     2C B0 86 F1 | 	sub	local06, #44
29228     1C 00 90 FD | 	jmp	#LR__4012
2922c                 | LR__4011
2922c     01 B2 06 F6 | 	mov	local07, #1
29230     32 93 02 F6 | 	mov	arg01, objptr
29234     00 D0 05 FF 
29238     00 92 46 F5 | 	or	arg01, ##195035136
2923c     2C B0 06 F1 | 	add	local06, #44
29240     58 93 62 FC | 	wrlong	arg01, local06
29244     2C B0 86 F1 | 	sub	local06, #44
29248                 | LR__4012
29248                 | LR__4013
29248                 | LR__4014
29248     00 B2 0E F2 | 	cmp	local07, #0 wz
2924c     58 93 02 56 |  if_ne	mov	arg01, local06
29250     E4 04 B0 5D |  if_ne	call	#__system____default_buffer_init
29254     00 CA 0E F2 | 	cmp	local19, #0 wz
29258     00 92 06 A6 |  if_e	mov	arg01, #0
2925c     10 00 90 5D |  if_ne	jmp	#LR__4015
29260     00 92 4E F2 | 	cmps	arg01, #0 wz
29264     20 68 06 F1 | 	add	ptr___system__dat__, #32
29268     34 93 62 FC | 	wrlong	arg01, ptr___system__dat__
2926c     20 68 86 F1 | 	sub	ptr___system__dat__, #32
29270                 | LR__4015
29270     65 7B 02 F6 | 	mov	result1, local19
29274                 | LR__4016
29274     E7 F0 03 F6 | 	mov	ptra, fp
29278     F2 00 A0 FD | 	call	#popregs_
2927c                 | __system___openraw_ret
2927c     2D 00 64 FD | 	ret
29280                 | 
29280                 | __system___closeraw
29280     05 CA 05 F6 | 	mov	COUNT_, #5
29284     E8 00 A0 FD | 	call	#pushregs_
29288     49 A7 02 F6 | 	mov	local01, arg01
2928c     00 A8 06 F6 | 	mov	local02, #0
29290     08 A6 06 F1 | 	add	local01, #8
29294     53 7B 0A FB | 	rdlong	result1, local01 wz
29298     08 A6 86 F1 | 	sub	local01, #8
2929c     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
292a0     34 0B 68 AC |  if_e	wrlong	#5, ptr___system__dat__
292a4     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
292a8     01 7A 66 A6 |  if_e	neg	result1, #1
292ac     A8 00 90 AD |  if_e	jmp	#LR__4022
292b0     2C A6 06 F1 | 	add	local01, #44
292b4     53 7B 0A FB | 	rdlong	result1, local01 wz
292b8     2C A6 86 F1 | 	sub	local01, #44
292bc     38 00 90 AD |  if_e	jmp	#LR__4020
292c0     2C A6 06 F1 | 	add	local01, #44
292c4     53 AB 02 FB | 	rdlong	local03, local01
292c8     55 AD 02 F6 | 	mov	local04, local03
292cc     2C A6 86 F1 | 	sub	local01, #44
292d0     13 AC 46 F7 | 	zerox	local04, #19
292d4     14 AA 46 F0 | 	shr	local03, #20
292d8     02 AA 66 F0 | 	shl	local03, #2
292dc     2D AB 02 F1 | 	add	local03, __methods__
292e0     55 AB 02 FB | 	rdlong	local03, local03
292e4     53 93 02 F6 | 	mov	arg01, local01
292e8     32 AF 02 F6 | 	mov	local05, objptr
292ec     56 65 02 F6 | 	mov	objptr, local04
292f0     2D AA 62 FD | 	call	local03
292f4     57 65 02 F6 | 	mov	objptr, local05
292f8                 | LR__4020
292f8     24 A6 06 F1 | 	add	local01, #36
292fc     53 AF 0A FB | 	rdlong	local05, local01 wz
29300     24 A6 86 F1 | 	sub	local01, #36
29304     3C 00 90 AD |  if_e	jmp	#LR__4021
29308     24 A6 06 F1 | 	add	local01, #36
2930c     53 AB 02 FB | 	rdlong	local03, local01
29310     55 AD 02 F6 | 	mov	local04, local03
29314     24 A6 86 F1 | 	sub	local01, #36
29318     13 AC 46 F7 | 	zerox	local04, #19
2931c     14 AA 46 F0 | 	shr	local03, #20
29320     02 AA 66 F0 | 	shl	local03, #2
29324     2D AB 02 F1 | 	add	local03, __methods__
29328     55 AB 02 FB | 	rdlong	local03, local03
2932c     53 93 02 F6 | 	mov	arg01, local01
29330     32 AF 02 F6 | 	mov	local05, objptr
29334     56 65 02 F6 | 	mov	objptr, local04
29338     2D AA 62 FD | 	call	local03
2933c     57 65 02 F6 | 	mov	objptr, local05
29340     3D A9 02 F6 | 	mov	local02, result1
29344                 | LR__4021
29344     53 93 02 F6 | 	mov	arg01, local01
29348     00 94 06 F6 | 	mov	arg02, #0
2934c     34 96 06 F6 | 	mov	arg03, #52
29350     D8 00 A0 FD | 	call	#\builtin_bytefill_
29354     54 7B 02 F6 | 	mov	result1, local02
29358                 | LR__4022
29358     E7 F0 03 F6 | 	mov	ptra, fp
2935c     F2 00 A0 FD | 	call	#popregs_
29360                 | __system___closeraw_ret
29360     2D 00 64 FD | 	ret
29364                 | 
29364                 | __system___vfs_open_fat_handle
29364     03 CA 05 F6 | 	mov	COUNT_, #3
29368     E8 00 A0 FD | 	call	#pushregs_
2936c     49 A7 0A F6 | 	mov	local01, arg01 wz
29370     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
29374     34 0B 68 AC |  if_e	wrlong	#5, ptr___system__dat__
29378     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
2937c     01 7A 66 A6 |  if_e	neg	result1, #1
29380     80 00 90 AD |  if_e	jmp	#LR__4031
29384     01 00 00 FF 
29388     14 92 06 F6 | 	mov	arg01, ##532
2938c     80 F3 BF FD | 	call	#__system___gc_alloc_managed
29390     3D A9 02 F6 | 	mov	local02, result1
29394     01 00 00 FF 
29398     34 92 06 F6 | 	mov	arg01, ##564
2939c     70 F3 BF FD | 	call	#__system___gc_alloc_managed
293a0     32 AB 02 F6 | 	mov	local03, objptr
293a4     54 65 02 F6 | 	mov	objptr, local02
293a8     01 00 00 FF 
293ac     10 64 06 F1 | 	add	objptr, ##528
293b0     32 A7 62 FC | 	wrlong	local01, objptr
293b4                 | ' #line 4 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/fatfs/diskio.cc"
293b4                 | ' 
293b4                 | ' 
293b4                 | ' vfs_file_t *fh;
293b4                 | ' 
293b4                 | ' DRESULT disk_sethandle(BYTE pdrv, vfs_file_t *fhandle) {
293b4                 | '     fh = fhandle;
293b4                 | '     return RES_OK;
293b4     94 01 00 FF 
293b8     4A 94 06 F6 | 	mov	arg02, ##@LR__5487
293bc     3D 93 02 F6 | 	mov	arg01, result1
293c0     00 96 06 F6 | 	mov	arg03, #0
293c4     54 65 02 F6 | 	mov	objptr, local02
293c8     4C 65 B0 FD | 	call	#_fatfs_cc_f_mount
293cc     55 65 02 F6 | 	mov	objptr, local03
293d0     3D 93 0A F6 | 	mov	arg01, result1 wz
293d4     18 00 90 AD |  if_e	jmp	#LR__4030
293d8     49 93 6A F6 | 	neg	arg01, arg01 wz
293dc     20 68 06 F1 | 	add	ptr___system__dat__, #32
293e0     34 93 62 FC | 	wrlong	arg01, ptr___system__dat__
293e4     20 68 86 F1 | 	sub	ptr___system__dat__, #32
293e8     00 7A 06 F6 | 	mov	result1, #0
293ec     14 00 90 FD | 	jmp	#LR__4031
293f0                 | LR__4030
293f0     54 93 02 F6 | 	mov	arg01, local02
293f4     32 AB 02 F6 | 	mov	local03, objptr
293f8     54 65 02 F6 | 	mov	objptr, local02
293fc     88 8B B0 FD | 	call	#_fatfs_cc_get_vfs
29400     55 65 02 F6 | 	mov	objptr, local03
29404                 | LR__4031
29404     E7 F0 03 F6 | 	mov	ptra, fp
29408     F2 00 A0 FD | 	call	#popregs_
2940c                 | __system___vfs_open_fat_handle_ret
2940c     2D 00 64 FD | 	ret
29410                 | 
29410                 | __system___vfs_open_sdcardx
29410     04 CA 05 F6 | 	mov	COUNT_, #4
29414     E8 00 A0 FD | 	call	#pushregs_
29418     4C 17 B0 FD | 	call	#__system___sdmm_open
2941c     3D A7 0A F6 | 	mov	local01, result1 wz
29420     00 7A 06 A6 |  if_e	mov	result1, #0
29424     4C 00 90 AD |  if_e	jmp	#LR__4041
29428     53 93 02 F6 | 	mov	arg01, local01
2942c     34 FF BF FD | 	call	#__system___vfs_open_fat_handle
29430     3D A9 0A F6 | 	mov	local02, result1 wz
29434     38 00 90 5D |  if_ne	jmp	#LR__4040
29438     24 A6 06 F1 | 	add	local01, #36
2943c     53 AB 02 FB | 	rdlong	local03, local01
29440     55 AD 02 F6 | 	mov	local04, local03
29444     24 A6 86 F1 | 	sub	local01, #36
29448     13 AC 46 F7 | 	zerox	local04, #19
2944c     14 AA 46 F0 | 	shr	local03, #20
29450     02 AA 66 F0 | 	shl	local03, #2
29454     2D AB 02 F1 | 	add	local03, __methods__
29458     55 AB 02 FB | 	rdlong	local03, local03
2945c     53 93 02 F6 | 	mov	arg01, local01
29460     32 A7 02 F6 | 	mov	local01, objptr
29464     56 65 02 F6 | 	mov	objptr, local04
29468     2D AA 62 FD | 	call	local03
2946c     53 65 02 F6 | 	mov	objptr, local01
29470                 | LR__4040
29470     54 7B 02 F6 | 	mov	result1, local02
29474                 | LR__4041
29474     E7 F0 03 F6 | 	mov	ptra, fp
29478     F2 00 A0 FD | 	call	#popregs_
2947c                 | __system___vfs_open_sdcardx_ret
2947c     2D 00 64 FD | 	ret
29480                 | 
29480                 | __system____default_getc
29480     03 CA 05 F6 | 	mov	COUNT_, #3
29484     E8 00 A0 FD | 	call	#pushregs_
29488     49 A7 02 F6 | 	mov	local01, arg01
2948c     53 A9 02 FB | 	rdlong	local02, local01
29490     08 A6 06 F1 | 	add	local01, #8
29494     53 AB 02 FB | 	rdlong	local03, local01
29498     08 A6 86 F1 | 	sub	local01, #8
2949c     08 AA CE F7 | 	test	local03, #8 wz
294a0     53 93 02 56 |  if_ne	mov	arg01, local01
294a4     08 01 B0 5D |  if_ne	call	#__system____default_flush
294a8     08 A6 06 F1 | 	add	local01, #8
294ac     53 AB 02 FB | 	rdlong	local03, local01
294b0     04 AA 46 F5 | 	or	local03, #4
294b4     53 AB 62 FC | 	wrlong	local03, local01
294b8     08 A6 86 F1 | 	sub	local01, #8
294bc     54 AB 0A FB | 	rdlong	local03, local02 wz
294c0     0C 00 90 5D |  if_ne	jmp	#LR__4050
294c4     53 93 02 F6 | 	mov	arg01, local01
294c8     E0 18 B0 FD | 	call	#__system____default_filbuf
294cc     3D AB 02 F6 | 	mov	local03, result1
294d0                 | LR__4050
294d0     01 AA 56 F2 | 	cmps	local03, #1 wc
294d4     01 7A 66 C6 |  if_b	neg	result1, #1
294d8     1C 00 90 CD |  if_b	jmp	#LR__4051
294dc     01 AA 86 F1 | 	sub	local03, #1
294e0     54 AB 62 FC | 	wrlong	local03, local02
294e4     04 A8 06 F1 | 	add	local02, #4
294e8     54 AB 02 FB | 	rdlong	local03, local02
294ec     55 7B C2 FA | 	rdbyte	result1, local03
294f0     01 AA 06 F1 | 	add	local03, #1
294f4     54 AB 62 FC | 	wrlong	local03, local02
294f8                 | LR__4051
294f8     E7 F0 03 F6 | 	mov	ptra, fp
294fc     F2 00 A0 FD | 	call	#popregs_
29500                 | __system____default_getc_ret
29500     2D 00 64 FD | 	ret
29504                 | 
29504                 | __system____default_putc
29504     06 CA 05 F6 | 	mov	COUNT_, #6
29508     E8 00 A0 FD | 	call	#pushregs_
2950c     49 A7 02 F6 | 	mov	local01, arg01
29510     4A A9 02 F6 | 	mov	local02, arg02
29514     54 AB 02 FB | 	rdlong	local03, local02
29518     08 A8 06 F1 | 	add	local02, #8
2951c     54 95 02 FB | 	rdlong	arg02, local02
29520     08 A8 86 F1 | 	sub	local02, #8
29524     04 94 CE F7 | 	test	arg02, #4 wz
29528     54 93 02 56 |  if_ne	mov	arg01, local02
2952c     80 00 B0 5D |  if_ne	call	#__system____default_flush
29530     08 A8 06 F1 | 	add	local02, #8
29534     54 AD 02 FB | 	rdlong	local04, local02
29538     08 AC 46 F5 | 	or	local04, #8
2953c     54 AD 62 FC | 	wrlong	local04, local02
29540     55 AF 02 FB | 	rdlong	local05, local03
29544     0C AA 06 F1 | 	add	local03, #12
29548     55 95 02 FB | 	rdlong	arg02, local03
2954c     0C AA 86 F1 | 	sub	local03, #12
29550     57 7B 02 F6 | 	mov	result1, local05
29554     4A 7B 02 F1 | 	add	result1, arg02
29558     3D A7 42 FC | 	wrbyte	local01, result1
2955c     53 A7 E2 F8 | 	getbyte	local01, local01, #0
29560     01 AE 06 F1 | 	add	local05, #1
29564     55 AF 62 FC | 	wrlong	local05, local03
29568     02 A8 86 F1 | 	sub	local02, #2
2956c     54 B1 EA FA | 	rdword	local06, local02 wz
29570     06 A8 86 F1 | 	sub	local02, #6
29574     08 AA 06 51 |  if_ne	add	local03, #8
29578     55 AD 02 5B |  if_ne	rdlong	local04, local03
2957c     56 AF 0A 52 |  if_ne	cmp	local05, local04 wz
29580     0C 00 90 AD |  if_e	jmp	#LR__4060
29584     0A A6 0E F2 | 	cmp	local01, #10 wz
29588     01 B0 0E A2 |  if_e	cmp	local06, #1 wz
2958c     10 00 90 5D |  if_ne	jmp	#LR__4061
29590                 | LR__4060
29590     54 93 02 F6 | 	mov	arg01, local02
29594     18 00 B0 FD | 	call	#__system____default_flush
29598     00 7A 0E F2 | 	cmp	result1, #0 wz
2959c     01 A6 66 56 |  if_ne	neg	local01, #1
295a0                 | LR__4061
295a0     53 7B 02 F6 | 	mov	result1, local01
295a4     E7 F0 03 F6 | 	mov	ptra, fp
295a8     F2 00 A0 FD | 	call	#popregs_
295ac                 | __system____default_putc_ret
295ac     2D 00 64 FD | 	ret
295b0                 | 
295b0                 | __system____default_flush
295b0     07 CA 05 F6 | 	mov	COUNT_, #7
295b4     E8 00 A0 FD | 	call	#pushregs_
295b8     49 A7 02 F6 | 	mov	local01, arg01
295bc     53 A9 02 FB | 	rdlong	local02, local01
295c0     54 AB 02 FB | 	rdlong	local03, local02
295c4     08 A6 06 F1 | 	add	local01, #8
295c8     53 7D 02 FB | 	rdlong	result2, local01
295cc     08 A6 86 F1 | 	sub	local01, #8
295d0     08 7C CE F7 | 	test	result2, #8 wz
295d4     D4 00 90 AD |  if_e	jmp	#LR__4072
295d8     01 AA 56 F2 | 	cmps	local03, #1 wc
295dc     2C 01 90 CD |  if_b	jmp	#LR__4074
295e0     08 A6 06 F1 | 	add	local01, #8
295e4     53 7D 02 FB | 	rdlong	result2, local01
295e8     08 A6 86 F1 | 	sub	local01, #8
295ec     80 7C CE F7 | 	test	result2, #128 wz
295f0     6C 00 90 AD |  if_e	jmp	#LR__4071
295f4     08 A6 06 F1 | 	add	local01, #8
295f8     53 97 02 FB | 	rdlong	arg03, local01
295fc     08 A6 86 F1 | 	sub	local01, #8
29600     00 97 CE F7 | 	test	arg03, #256 wz
29604     58 00 90 AD |  if_e	jmp	#LR__4070
29608     30 A6 06 F1 | 	add	local01, #48
2960c     53 AD 02 FB | 	rdlong	local04, local01
29610     56 AF 02 F6 | 	mov	local05, local04
29614     30 A6 86 F1 | 	sub	local01, #48
29618     13 AE 46 F7 | 	zerox	local05, #19
2961c     14 AC 46 F0 | 	shr	local04, #20
29620     02 AC 66 F0 | 	shl	local04, #2
29624     2D AD 02 F1 | 	add	local04, __methods__
29628     56 AD 02 FB | 	rdlong	local04, local04
2962c     53 93 02 F6 | 	mov	arg01, local01
29630     00 94 06 F6 | 	mov	arg02, #0
29634     00 96 06 F6 | 	mov	arg03, #0
29638     02 98 06 F6 | 	mov	arg04, #2
2963c     32 B1 02 F6 | 	mov	local06, objptr
29640     57 65 02 F6 | 	mov	objptr, local05
29644     2D AC 62 FD | 	call	local04
29648     58 65 02 F6 | 	mov	objptr, local06
2964c     08 A6 06 F1 | 	add	local01, #8
29650     53 B1 02 FB | 	rdlong	local06, local01
29654     00 B1 26 F5 | 	andn	local06, #256
29658     53 B1 62 FC | 	wrlong	local06, local01
2965c     08 A6 86 F1 | 	sub	local01, #8
29660                 | LR__4070
29660                 | LR__4071
29660     18 A6 06 F1 | 	add	local01, #24
29664     53 AD 02 FB | 	rdlong	local04, local01
29668     56 AF 02 F6 | 	mov	local05, local04
2966c     18 A6 86 F1 | 	sub	local01, #24
29670     13 AE 46 F7 | 	zerox	local05, #19
29674     14 AC 46 F0 | 	shr	local04, #20
29678     02 AC 66 F0 | 	shl	local04, #2
2967c     2D AD 02 F1 | 	add	local04, __methods__
29680     56 AD 02 FB | 	rdlong	local04, local04
29684     0C A8 06 F1 | 	add	local02, #12
29688     54 95 02 FB | 	rdlong	arg02, local02
2968c     0C A8 86 F1 | 	sub	local02, #12
29690     53 93 02 F6 | 	mov	arg01, local01
29694     55 97 02 F6 | 	mov	arg03, local03
29698     32 B1 02 F6 | 	mov	local06, objptr
2969c     57 65 02 F6 | 	mov	objptr, local05
296a0     2D AC 62 FD | 	call	local04
296a4     58 65 02 F6 | 	mov	objptr, local06
296a8     60 00 90 FD | 	jmp	#LR__4074
296ac                 | LR__4072
296ac     08 A6 06 F1 | 	add	local01, #8
296b0     53 B1 02 FB | 	rdlong	local06, local01
296b4     08 A6 86 F1 | 	sub	local01, #8
296b8     04 B0 CE F7 | 	test	local06, #4 wz
296bc     00 AA 0E 52 |  if_ne	cmp	local03, #0 wz
296c0     48 00 90 AD |  if_e	jmp	#LR__4073
296c4     55 95 62 F6 | 	neg	arg02, local03
296c8     4A 97 02 F6 | 	mov	arg03, arg02
296cc     1F 96 C6 F0 | 	sar	arg03, #31
296d0     30 A6 06 F1 | 	add	local01, #48
296d4     53 AD 02 FB | 	rdlong	local04, local01
296d8     56 AF 02 F6 | 	mov	local05, local04
296dc     30 A6 86 F1 | 	sub	local01, #48
296e0     13 AE 46 F7 | 	zerox	local05, #19
296e4     14 AC 46 F0 | 	shr	local04, #20
296e8     02 AC 66 F0 | 	shl	local04, #2
296ec     2D AD 02 F1 | 	add	local04, __methods__
296f0     56 AD 02 FB | 	rdlong	local04, local04
296f4     53 93 02 F6 | 	mov	arg01, local01
296f8     01 98 06 F6 | 	mov	arg04, #1
296fc     32 B1 02 F6 | 	mov	local06, objptr
29700     57 65 02 F6 | 	mov	objptr, local05
29704     2D AC 62 FD | 	call	local04
29708     58 65 02 F6 | 	mov	objptr, local06
2970c                 | LR__4073
2970c                 | LR__4074
2970c     54 01 68 FC | 	wrlong	#0, local02
29710     04 A8 06 F1 | 	add	local02, #4
29714     54 01 68 FC | 	wrlong	#0, local02
29718     08 A6 06 F1 | 	add	local01, #8
2971c     53 B3 02 FB | 	rdlong	local07, local01
29720     0C B2 26 F5 | 	andn	local07, #12
29724     53 B3 62 FC | 	wrlong	local07, local01
29728     00 7A 06 F6 | 	mov	result1, #0
2972c     E7 F0 03 F6 | 	mov	ptra, fp
29730     F2 00 A0 FD | 	call	#popregs_
29734                 | __system____default_flush_ret
29734     2D 00 64 FD | 	ret
29738                 | 
29738                 | __system____default_buffer_init
29738     02 CA 05 F6 | 	mov	COUNT_, #2
2973c     E8 00 A0 FD | 	call	#pushregs_
29740     49 A7 02 F6 | 	mov	local01, arg01
29744     53 A9 02 FB | 	rdlong	local02, local01
29748     53 93 02 F6 | 	mov	arg01, local01
2974c     A4 03 B0 FD | 	call	#__system___isatty
29750     00 7A 0E F2 | 	cmp	result1, #0 wz
29754     06 A6 06 51 |  if_ne	add	local01, #6
29758     53 0B 58 5C |  if_ne	wrword	#5, local01
2975c     06 A6 06 A1 |  if_e	add	local01, #6
29760     53 0D 58 AC |  if_e	wrword	#6, local01
29764     10 A8 06 F1 | 	add	local02, #16
29768     54 A7 02 F6 | 	mov	local01, local02
2976c     04 A8 86 F1 | 	sub	local02, #4
29770     54 A7 62 FC | 	wrlong	local01, local02
29774     04 A8 86 F1 | 	sub	local02, #4
29778     02 00 80 FF 
2977c     54 01 68 FC | 	wrlong	##1024, local02
29780     00 7A 06 F6 | 	mov	result1, #0
29784     E7 F0 03 F6 | 	mov	ptra, fp
29788     F2 00 A0 FD | 	call	#popregs_
2978c                 | __system____default_buffer_init_ret
2978c     2D 00 64 FD | 	ret
29790                 | 
29790                 | __system__stat
29790     04 CA 05 F6 | 	mov	COUNT_, #4
29794     E8 00 A0 FD | 	call	#pushregs_
29798     4A A7 02 F6 | 	mov	local01, arg02
2979c     34 A9 02 F6 | 	mov	local02, ptr___system__dat__
297a0     84 A9 06 F1 | 	add	local02, #388
297a4     49 95 02 F6 | 	mov	arg02, arg01
297a8     54 93 02 F6 | 	mov	arg01, local02
297ac     00 96 06 F6 | 	mov	arg03, #0
297b0     A0 BC BF FD | 	call	#__system____getvfsforfile
297b4     3D AB 0A F6 | 	mov	local03, result1 wz
297b8     10 00 90 AD |  if_e	jmp	#LR__4080
297bc     34 AA 06 F1 | 	add	local03, #52
297c0     55 97 0A FB | 	rdlong	arg03, local03 wz
297c4     34 AA 86 F1 | 	sub	local03, #52
297c8     14 00 90 5D |  if_ne	jmp	#LR__4081
297cc                 | LR__4080
297cc     20 68 06 F1 | 	add	ptr___system__dat__, #32
297d0     34 21 68 FC | 	wrlong	#16, ptr___system__dat__
297d4     20 68 86 F1 | 	sub	ptr___system__dat__, #32
297d8     01 7A 66 F6 | 	neg	result1, #1
297dc     68 00 90 FD | 	jmp	#LR__4082
297e0                 | LR__4081
297e0     53 93 02 F6 | 	mov	arg01, local01
297e4     00 94 06 F6 | 	mov	arg02, #0
297e8     34 96 06 F6 | 	mov	arg03, #52
297ec     49 AD 02 F6 | 	mov	local04, arg01
297f0     D8 00 A0 FD | 	call	#\builtin_bytefill_
297f4     56 7B 02 F6 | 	mov	result1, local04
297f8     54 93 CA FA | 	rdbyte	arg01, local02 wz
297fc     08 A6 06 A1 |  if_e	add	local01, #8
29800     08 00 80 AF 
29804     53 FF 6B AC |  if_e	wrlong	##4607, local01
29808     00 7A 06 A6 |  if_e	mov	result1, #0
2980c     38 00 90 AD |  if_e	jmp	#LR__4082
29810     34 AA 06 F1 | 	add	local03, #52
29814     55 AB 02 FB | 	rdlong	local03, local03
29818     55 AD 02 F6 | 	mov	local04, local03
2981c     13 AA 46 F7 | 	zerox	local03, #19
29820     14 AC 46 F0 | 	shr	local04, #20
29824     02 AC 66 F0 | 	shl	local04, #2
29828     2D AD 02 F1 | 	add	local04, __methods__
2982c     56 AD 02 FB | 	rdlong	local04, local04
29830     54 93 02 F6 | 	mov	arg01, local02
29834     53 95 02 F6 | 	mov	arg02, local01
29838     32 A9 02 F6 | 	mov	local02, objptr
2983c     55 65 02 F6 | 	mov	objptr, local03
29840     2D AC 62 FD | 	call	local04
29844     54 65 02 F6 | 	mov	objptr, local02
29848                 | LR__4082
29848     E7 F0 03 F6 | 	mov	ptra, fp
2984c     F2 00 A0 FD | 	call	#popregs_
29850                 | __system__stat_ret
29850     2D 00 64 FD | 	ret
29854                 | 
29854                 | __system__write
29854     01 CA 05 F6 | 	mov	COUNT_, #1
29858     E8 00 A0 FD | 	call	#pushregs_
2985c     0A 92 16 F2 | 	cmp	arg01, #10 wc
29860     20 68 06 31 |  if_ae	add	ptr___system__dat__, #32
29864     34 0B 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
29868     20 68 86 31 |  if_ae	sub	ptr___system__dat__, #32
2986c     01 7A 66 36 |  if_ae	neg	result1, #1
29870     1C 00 90 3D |  if_ae	jmp	#LR__4090
29874     34 92 06 FD | 	qmul	arg01, #52
29878     34 A7 02 F6 | 	mov	local01, ptr___system__dat__
2987c     02 00 00 FF 
29880     2C A7 06 F1 | 	add	local01, ##1324
29884     18 92 62 FD | 	getqx	arg01
29888     53 93 02 F1 | 	add	arg01, local01
2988c     3C 0F B0 FD | 	call	#__system___vfswrite
29890                 | LR__4090
29890     E7 F0 03 F6 | 	mov	ptra, fp
29894     F2 00 A0 FD | 	call	#popregs_
29898                 | __system__write_ret
29898     2D 00 64 FD | 	ret
2989c                 | 
2989c                 | __system__read
2989c     01 CA 05 F6 | 	mov	COUNT_, #1
298a0     E8 00 A0 FD | 	call	#pushregs_
298a4     0A 92 16 F2 | 	cmp	arg01, #10 wc
298a8     20 68 06 31 |  if_ae	add	ptr___system__dat__, #32
298ac     34 0B 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
298b0     20 68 86 31 |  if_ae	sub	ptr___system__dat__, #32
298b4     01 7A 66 36 |  if_ae	neg	result1, #1
298b8     1C 00 90 3D |  if_ae	jmp	#LR__4100
298bc     34 92 06 FD | 	qmul	arg01, #52
298c0     34 A7 02 F6 | 	mov	local01, ptr___system__dat__
298c4     02 00 00 FF 
298c8     2C A7 06 F1 | 	add	local01, ##1324
298cc     18 92 62 FD | 	getqx	arg01
298d0     53 93 02 F1 | 	add	arg01, local01
298d4     C0 10 B0 FD | 	call	#__system___vfsread
298d8                 | LR__4100
298d8     E7 F0 03 F6 | 	mov	ptra, fp
298dc     F2 00 A0 FD | 	call	#popregs_
298e0                 | __system__read_ret
298e0     2D 00 64 FD | 	ret
298e4                 | 
298e4                 | __system__close
298e4     01 CA 05 F6 | 	mov	COUNT_, #1
298e8     E8 00 A0 FD | 	call	#pushregs_
298ec     0A 92 16 F2 | 	cmp	arg01, #10 wc
298f0     20 68 06 31 |  if_ae	add	ptr___system__dat__, #32
298f4     34 0B 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
298f8     20 68 86 31 |  if_ae	sub	ptr___system__dat__, #32
298fc     01 7A 66 36 |  if_ae	neg	result1, #1
29900     1C 00 90 3D |  if_ae	jmp	#LR__4110
29904     34 92 06 FD | 	qmul	arg01, #52
29908     34 A7 02 F6 | 	mov	local01, ptr___system__dat__
2990c     02 00 00 FF 
29910     2C A7 06 F1 | 	add	local01, ##1324
29914     18 92 62 FD | 	getqx	arg01
29918     53 93 02 F1 | 	add	arg01, local01
2991c     60 F9 BF FD | 	call	#__system___closeraw
29920                 | LR__4110
29920     E7 F0 03 F6 | 	mov	ptra, fp
29924     F2 00 A0 FD | 	call	#popregs_
29928                 | __system__close_ret
29928     2D 00 64 FD | 	ret
2992c                 | 
2992c                 | __system__lseek
2992c     0B CA 05 F6 | 	mov	COUNT_, #11
29930     E8 00 A0 FD | 	call	#pushregs_
29934     49 AF 02 F6 | 	mov	local05, arg01
29938     4A A7 02 F6 | 	mov	local01, arg02
2993c     4B A9 02 F6 | 	mov	local02, arg03
29940     4C B1 02 F6 | 	mov	local06, arg04
29944     0A AE 16 F2 | 	cmp	local05, #10 wc
29948     18 00 90 CD |  if_b	jmp	#LR__4120
2994c     20 68 06 F1 | 	add	ptr___system__dat__, #32
29950     34 0B 68 FC | 	wrlong	#5, ptr___system__dat__
29954     20 68 86 F1 | 	sub	ptr___system__dat__, #32
29958     01 7C 66 F6 | 	neg	result2, #1
2995c     01 7A 66 F6 | 	neg	result1, #1
29960     FC 00 90 FD | 	jmp	#LR__4123
29964                 | LR__4120
29964     34 AE 06 FD | 	qmul	local05, #52
29968     34 93 02 F6 | 	mov	arg01, ptr___system__dat__
2996c     02 00 00 FF 
29970     2C 93 06 F1 | 	add	arg01, ##1324
29974     18 B2 62 FD | 	getqx	local07
29978     49 B3 02 F1 | 	add	local07, arg01
2997c     30 B2 06 F1 | 	add	local07, #48
29980     59 AF 0A FB | 	rdlong	local05, local07 wz
29984     30 B2 86 F1 | 	sub	local07, #48
29988     18 00 90 5D |  if_ne	jmp	#LR__4121
2998c     20 68 06 F1 | 	add	ptr___system__dat__, #32
29990     34 21 68 FC | 	wrlong	#16, ptr___system__dat__
29994     20 68 86 F1 | 	sub	ptr___system__dat__, #32
29998     01 7C 66 F6 | 	neg	result2, #1
2999c     01 7A 66 F6 | 	neg	result1, #1
299a0     BC 00 90 FD | 	jmp	#LR__4123
299a4                 | LR__4121
299a4     08 B2 06 F1 | 	add	local07, #8
299a8     59 B5 02 FB | 	rdlong	local08, local07
299ac     08 B2 86 F1 | 	sub	local07, #8
299b0     80 B4 CE F7 | 	test	local08, #128 wz
299b4     08 B2 06 51 |  if_ne	add	local07, #8
299b8     59 B5 02 5B |  if_ne	rdlong	local08, local07
299bc     00 B5 46 55 |  if_ne	or	local08, #256
299c0     59 B5 62 5C |  if_ne	wrlong	local08, local07
299c4     08 B2 86 51 |  if_ne	sub	local07, #8
299c8     53 95 02 F6 | 	mov	arg02, local01
299cc     54 97 02 F6 | 	mov	arg03, local02
299d0     30 B2 06 F1 | 	add	local07, #48
299d4     59 B7 02 FB | 	rdlong	local09, local07
299d8     5B B9 02 F6 | 	mov	local10, local09
299dc     30 B2 86 F1 | 	sub	local07, #48
299e0     13 B8 46 F7 | 	zerox	local10, #19
299e4     14 B6 46 F0 | 	shr	local09, #20
299e8     02 B6 66 F0 | 	shl	local09, #2
299ec     2D B7 02 F1 | 	add	local09, __methods__
299f0     5B B7 02 FB | 	rdlong	local09, local09
299f4     59 93 02 F6 | 	mov	arg01, local07
299f8     58 99 02 F6 | 	mov	arg04, local06
299fc     32 BB 02 F6 | 	mov	local11, objptr
29a00     5C 65 02 F6 | 	mov	objptr, local10
29a04     2D B6 62 FD | 	call	local09
29a08     5D 65 02 F6 | 	mov	objptr, local11
29a0c     3D AB 02 F6 | 	mov	local03, result1
29a10     3E AD 02 F6 | 	mov	local04, result2
29a14     55 93 02 F6 | 	mov	arg01, local03
29a18     56 95 02 F6 | 	mov	arg02, local04
29a1c     00 7A 06 F6 | 	mov	result1, #0
29a20     00 92 1E F2 | 	cmp	arg01, #0 wcz
29a24     00 94 7E F2 | 	cmpsx	arg02, #0 wcz
29a28     01 7A 86 56 |  if_ne	negc	result1, #1
29a2c     00 7A 56 F2 | 	cmps	result1, #0 wc
29a30     24 00 90 3D |  if_ae	jmp	#LR__4122
29a34     55 93 6A F6 | 	neg	arg01, local03 wz
29a38     20 68 06 F1 | 	add	ptr___system__dat__, #32
29a3c     34 93 62 FC | 	wrlong	arg01, ptr___system__dat__
29a40     20 68 86 F1 | 	sub	ptr___system__dat__, #32
29a44     01 7A 66 56 |  if_ne	neg	result1, #1
29a48     00 7A 06 A6 |  if_e	mov	result1, #0
29a4c     3D 7D 02 F6 | 	mov	result2, result1
29a50     1F 7C C6 F0 | 	sar	result2, #31
29a54     08 00 90 FD | 	jmp	#LR__4123
29a58                 | LR__4122
29a58     55 7B 02 F6 | 	mov	result1, local03
29a5c     56 7D 02 F6 | 	mov	result2, local04
29a60                 | LR__4123
29a60     E7 F0 03 F6 | 	mov	ptra, fp
29a64     F2 00 A0 FD | 	call	#popregs_
29a68                 | __system__lseek_ret
29a68     2D 00 64 FD | 	ret
29a6c                 | 
29a6c                 | __system___ioctl
29a6c     03 CA 05 F6 | 	mov	COUNT_, #3
29a70     E8 00 A0 FD | 	call	#pushregs_
29a74     00 92 4E F2 | 	cmps	arg01, #0 wz
29a78     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
29a7c     34 0B 68 AC |  if_e	wrlong	#5, ptr___system__dat__
29a80     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
29a84     01 7A 66 A6 |  if_e	neg	result1, #1
29a88     5C 00 90 AD |  if_e	jmp	#LR__4131
29a8c     28 92 06 F1 | 	add	arg01, #40
29a90     49 A7 02 FB | 	rdlong	local01, arg01
29a94     53 A9 02 F6 | 	mov	local02, local01
29a98     28 92 86 F1 | 	sub	arg01, #40
29a9c     13 A8 46 F7 | 	zerox	local02, #19
29aa0     14 A6 46 F0 | 	shr	local01, #20
29aa4     02 A6 66 F0 | 	shl	local01, #2
29aa8     2D A7 02 F1 | 	add	local01, __methods__
29aac     53 A7 02 FB | 	rdlong	local01, local01
29ab0     32 AB 02 F6 | 	mov	local03, objptr
29ab4     54 65 02 F6 | 	mov	objptr, local02
29ab8     2D A6 62 FD | 	call	local01
29abc     55 65 02 F6 | 	mov	objptr, local03
29ac0     3D 93 0A F6 | 	mov	arg01, result1 wz
29ac4     1C 00 90 AD |  if_e	jmp	#LR__4130
29ac8     00 92 4E F2 | 	cmps	arg01, #0 wz
29acc     20 68 06 F1 | 	add	ptr___system__dat__, #32
29ad0     34 93 62 FC | 	wrlong	arg01, ptr___system__dat__
29ad4     20 68 86 F1 | 	sub	ptr___system__dat__, #32
29ad8     01 7A 66 56 |  if_ne	neg	result1, #1
29adc     00 7A 06 A6 |  if_e	mov	result1, #0
29ae0     04 00 90 FD | 	jmp	#LR__4131
29ae4                 | LR__4130
29ae4     00 7A 06 F6 | 	mov	result1, #0
29ae8                 | LR__4131
29ae8     E7 F0 03 F6 | 	mov	ptra, fp
29aec     F2 00 A0 FD | 	call	#popregs_
29af0                 | __system___ioctl_ret
29af0     2D 00 64 FD | 	ret
29af4                 | 
29af4                 | __system___isatty
29af4     00 CA 05 F6 | 	mov	COUNT_, #0
29af8     E8 00 A0 FD | 	call	#pushregs_
29afc     0C F0 07 F1 | 	add	ptra, #12
29b00     E7 96 02 F6 | 	mov	arg03, fp
29b04     08 96 06 F1 | 	add	arg03, #8
29b08     00 95 06 F6 | 	mov	arg02, #256
29b0c     5C FF BF FD | 	call	#__system___ioctl
29b10     00 7A 0E F2 | 	cmp	result1, #0 wz
29b14     01 7A 06 A6 |  if_e	mov	result1, #1
29b18     00 7A 06 56 |  if_ne	mov	result1, #0
29b1c     E7 F0 03 F6 | 	mov	ptra, fp
29b20     F2 00 A0 FD | 	call	#popregs_
29b24                 | __system___isatty_ret
29b24     2D 00 64 FD | 	ret
29b28                 | 
29b28                 | __system____getftab
29b28     0A 92 16 F2 | 	cmp	arg01, #10 wc
29b2c     34 92 06 CD |  if_b	qmul	arg01, #52
29b30     00 7A 06 36 |  if_ae	mov	result1, #0
29b34     34 93 02 C6 |  if_b	mov	arg01, ptr___system__dat__
29b38     02 00 00 CF 
29b3c     2C 93 06 C1 |  if_b	add	arg01, ##1324
29b40     18 7A 62 CD |  if_b	getqx	result1
29b44     49 7B 02 C1 |  if_b	add	result1, arg01
29b48                 | __system____getftab_ret
29b48     2D 00 64 FD | 	ret
29b4c                 | 
29b4c                 | __system__strncpy
29b4c     49 81 02 F6 | 	mov	_var01, arg01
29b50                 | LR__4140
29b50     01 96 86 F1 | 	sub	arg03, #1
29b54     00 96 56 F2 | 	cmps	arg03, #0 wc
29b58     24 00 90 CD |  if_b	jmp	#LR__4141
29b5c     4A 7B 02 F6 | 	mov	result1, arg02
29b60     01 7A 06 F1 | 	add	result1, #1
29b64     4A 83 C2 FA | 	rdbyte	_var02, arg02
29b68     3D 95 02 F6 | 	mov	arg02, result1
29b6c     40 83 42 FC | 	wrbyte	_var02, _var01
29b70     41 83 E2 F8 | 	getbyte	_var02, _var02, #0
29b74     07 82 4E F7 | 	zerox	_var02, #7 wz
29b78     01 80 06 F1 | 	add	_var01, #1
29b7c     D0 FF 9F 5D |  if_ne	jmp	#LR__4140
29b80                 | LR__4141
29b80     D7 0C 48 FB | 	callpa	#(@LR__4143-@LR__4142)>>2,fcache_load_ptr_
29b84                 | LR__4142
29b84     01 96 86 F1 | 	sub	arg03, #1
29b88     00 96 56 F2 | 	cmps	arg03, #0 wc
29b8c     40 85 02 36 |  if_ae	mov	_var03, _var01
29b90     01 80 06 31 |  if_ae	add	_var01, #1
29b94     42 01 48 3C |  if_ae	wrbyte	#0, _var03
29b98     E8 FF 9F 3D |  if_ae	jmp	#LR__4142
29b9c                 | LR__4143
29b9c     49 7B 02 F6 | 	mov	result1, arg01
29ba0                 | __system__strncpy_ret
29ba0     2D 00 64 FD | 	ret
29ba4                 | 
29ba4                 | __system__strncat
29ba4     00 94 4E F2 | 	cmps	arg02, #0 wz
29ba8     54 00 90 AD |  if_e	jmp	#LR__4155
29bac     01 96 16 F2 | 	cmp	arg03, #1 wc
29bb0     4C 00 90 CD |  if_b	jmp	#LR__4155
29bb4     49 81 02 F6 | 	mov	_var01, arg01
29bb8     D7 06 48 FB | 	callpa	#(@LR__4151-@LR__4150)>>2,fcache_load_ptr_
29bbc                 | LR__4150
29bbc     40 7B CA FA | 	rdbyte	result1, _var01 wz
29bc0     01 80 06 51 |  if_ne	add	_var01, #1
29bc4     F4 FF 9F 5D |  if_ne	jmp	#LR__4150
29bc8                 | LR__4151
29bc8     4B 83 02 F6 | 	mov	_var02, arg03
29bcc     D7 16 48 FB | 	callpa	#(@LR__4153-@LR__4152)>>2,fcache_load_ptr_
29bd0                 | LR__4152
29bd0     4A 85 C2 FA | 	rdbyte	_var03, arg02
29bd4     42 87 02 F6 | 	mov	_var04, _var03
29bd8     07 86 4E F7 | 	zerox	_var04, #7 wz
29bdc     01 94 06 F1 | 	add	arg02, #1
29be0     18 00 90 AD |  if_e	jmp	#LR__4154
29be4     01 82 86 F1 | 	sub	_var02, #1
29be8     00 82 56 F2 | 	cmps	_var02, #0 wc
29bec     40 87 02 36 |  if_ae	mov	_var04, _var01
29bf0     01 80 06 31 |  if_ae	add	_var01, #1
29bf4     43 85 42 3C |  if_ae	wrbyte	_var03, _var04
29bf8     D4 FF 9F 3D |  if_ae	jmp	#LR__4152
29bfc                 | LR__4153
29bfc                 | LR__4154
29bfc     40 01 48 FC | 	wrbyte	#0, _var01
29c00                 | LR__4155
29c00     49 7B 02 F6 | 	mov	result1, arg01
29c04                 | __system__strncat_ret
29c04     2D 00 64 FD | 	ret
29c08                 | 
29c08                 | __system__strncmp
29c08     49 81 0A F6 | 	mov	_var01, arg01 wz
29c0c     14 00 90 5D |  if_ne	jmp	#LR__4160
29c10     00 94 0E F2 | 	cmp	arg02, #0 wz
29c14     01 82 66 56 |  if_ne	neg	_var02, #1
29c18     00 82 06 A6 |  if_e	mov	_var02, #0
29c1c     41 7B 02 F6 | 	mov	result1, _var02
29c20     74 00 90 FD | 	jmp	#__system__strncmp_ret
29c24                 | LR__4160
29c24     00 94 0E F2 | 	cmp	arg02, #0 wz
29c28     01 7A 06 A6 |  if_e	mov	result1, #1
29c2c     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
29c30     4B 85 02 F6 | 	mov	_var03, arg03
29c34     D7 16 48 FB | 	callpa	#(@LR__4162-@LR__4161)>>2,fcache_load_ptr_
29c38                 | LR__4161
29c38     40 87 C2 FA | 	rdbyte	_var04, _var01
29c3c     4A 89 02 F6 | 	mov	_var05, arg02
29c40     44 8B C2 FA | 	rdbyte	_var06, _var05
29c44     01 84 86 F1 | 	sub	_var03, #1
29c48     00 84 56 F2 | 	cmps	_var03, #0 wc
29c4c     01 80 06 F1 | 	add	_var01, #1
29c50     01 94 06 F1 | 	add	arg02, #1
29c54     00 86 0E 32 |  if_ae	cmp	_var04, #0 wz
29c58     08 00 90 2D |  if_nc_and_z	jmp	#LR__4163
29c5c     45 87 0A 32 |  if_ae	cmp	_var04, _var06 wz
29c60     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4161
29c64                 | LR__4162
29c64                 | LR__4163
29c64     00 84 56 F2 | 	cmps	_var03, #0 wc
29c68     00 7A 06 C6 |  if_b	mov	result1, #0
29c6c     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
29c70     45 87 0A F2 | 	cmp	_var04, _var06 wz
29c74     00 7A 06 A6 |  if_e	mov	result1, #0
29c78     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
29c7c     00 86 0E F2 | 	cmp	_var04, #0 wz
29c80     01 7A 66 A6 |  if_e	neg	result1, #1
29c84     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
29c88     00 8A 0E F2 | 	cmp	_var06, #0 wz
29c8c     01 7A 06 A6 |  if_e	mov	result1, #1
29c90     43 7B 02 56 |  if_ne	mov	result1, _var04
29c94     45 7B 82 51 |  if_ne	sub	result1, _var06
29c98                 | __system__strncmp_ret
29c98     2D 00 64 FD | 	ret
29c9c                 | 
29c9c                 | __system____root_opendir
29c9c     34 7B 02 F6 | 	mov	result1, ptr___system__dat__
29ca0     64 7A 06 F1 | 	add	result1, #100
29ca4     04 92 06 F1 | 	add	arg01, #4
29ca8     49 7B 62 FC | 	wrlong	result1, arg01
29cac     00 7A 06 F6 | 	mov	result1, #0
29cb0                 | __system____root_opendir_ret
29cb0     2D 00 64 FD | 	ret
29cb4                 | 
29cb4                 | __system____root_readdir
29cb4     03 CA 05 F6 | 	mov	COUNT_, #3
29cb8     E8 00 A0 FD | 	call	#pushregs_
29cbc     49 A7 02 F6 | 	mov	local01, arg01
29cc0     4A A9 02 F6 | 	mov	local02, arg02
29cc4     04 A6 06 F1 | 	add	local01, #4
29cc8     53 AB 02 FB | 	rdlong	local03, local01
29ccc     04 A6 86 F1 | 	sub	local01, #4
29cd0                 | LR__4170
29cd0     34 97 02 F6 | 	mov	arg03, ptr___system__dat__
29cd4     74 96 06 F1 | 	add	arg03, #116
29cd8     4B AB 0A F2 | 	cmp	local03, arg03 wz
29cdc     01 7A 66 A6 |  if_e	neg	result1, #1
29ce0     48 00 90 AD |  if_e	jmp	#LR__4171
29ce4     55 97 0A FB | 	rdlong	arg03, local03 wz
29ce8     04 AA 06 A1 |  if_e	add	local03, #4
29cec     E0 FF 9F AD |  if_e	jmp	#LR__4170
29cf0     55 95 02 FB | 	rdlong	arg02, local03
29cf4     01 94 06 F1 | 	add	arg02, #1
29cf8     54 93 02 F6 | 	mov	arg01, local02
29cfc     40 96 06 F6 | 	mov	arg03, #64
29d00     48 FE BF FD | 	call	#__system__strncpy
29d04     50 A8 06 F1 | 	add	local02, #80
29d08     54 03 48 FC | 	wrbyte	#1, local02
29d0c     08 A8 86 F1 | 	sub	local02, #8
29d10     54 01 68 FC | 	wrlong	#0, local02
29d14     04 A8 06 F1 | 	add	local02, #4
29d18     54 01 68 FC | 	wrlong	#0, local02
29d1c     04 AA 06 F1 | 	add	local03, #4
29d20     04 A6 06 F1 | 	add	local01, #4
29d24     53 AB 62 FC | 	wrlong	local03, local01
29d28     00 7A 06 F6 | 	mov	result1, #0
29d2c                 | LR__4171
29d2c     E7 F0 03 F6 | 	mov	ptra, fp
29d30     F2 00 A0 FD | 	call	#popregs_
29d34                 | __system____root_readdir_ret
29d34     2D 00 64 FD | 	ret
29d38                 | 
29d38                 | __system____root_closedir
29d38     00 7A 06 F6 | 	mov	result1, #0
29d3c                 | __system____root_closedir_ret
29d3c     2D 00 64 FD | 	ret
29d40                 | 
29d40                 | __system____root_stat
29d40     4A 81 02 F6 | 	mov	_var01, arg02
29d44     40 93 02 F6 | 	mov	arg01, _var01
29d48     00 94 06 F6 | 	mov	arg02, #0
29d4c     34 96 06 F6 | 	mov	arg03, #52
29d50     D8 00 A0 FD | 	call	#\builtin_bytefill_
29d54     08 80 06 F1 | 	add	_var01, #8
29d58     08 00 80 FF 
29d5c     40 FF 6B FC | 	wrlong	##4607, _var01
29d60     00 7A 06 F6 | 	mov	result1, #0
29d64                 | __system____root_stat_ret
29d64     2D 00 64 FD | 	ret
29d68                 | 
29d68                 | __system___normalizeName
29d68     00 80 06 F6 | 	mov	_var01, #0
29d6c     49 83 02 F6 | 	mov	_var02, arg01
29d70     41 85 02 F6 | 	mov	_var03, _var02
29d74                 | LR__4180
29d74     41 87 CA FA | 	rdbyte	_var04, _var02 wz
29d78     5C 01 90 AD |  if_e	jmp	#LR__4199
29d7c     00 80 0E F2 | 	cmp	_var01, #0 wz
29d80     42 87 02 56 |  if_ne	mov	_var04, _var03
29d84     01 84 06 51 |  if_ne	add	_var03, #1
29d88     43 5F 48 5C |  if_ne	wrbyte	#47, _var04
29d8c     00 80 06 56 |  if_ne	mov	_var01, #0
29d90     41 87 C2 FA | 	rdbyte	_var04, _var02
29d94     2E 86 0E F2 | 	cmp	_var04, #46 wz
29d98     D8 00 90 5D |  if_ne	jmp	#LR__4192
29d9c     01 82 06 F1 | 	add	_var02, #1
29da0     41 87 C2 FA | 	rdbyte	_var04, _var02
29da4     01 82 86 F1 | 	sub	_var02, #1
29da8     2F 86 0E F2 | 	cmp	_var04, #47 wz
29dac     18 00 90 AD |  if_e	jmp	#LR__4181
29db0     01 82 06 F1 | 	add	_var02, #1
29db4     41 89 C2 FA | 	rdbyte	_var05, _var02
29db8     01 82 86 F1 | 	sub	_var02, #1
29dbc     44 8B 02 F6 | 	mov	_var06, _var05
29dc0     07 8A 4E F7 | 	zerox	_var06, #7 wz
29dc4     10 00 90 5D |  if_ne	jmp	#LR__4182
29dc8                 | LR__4181
29dc8     41 8D 02 F6 | 	mov	_var07, _var02
29dcc     01 8C 06 F1 | 	add	_var07, #1
29dd0     46 83 02 F6 | 	mov	_var02, _var07
29dd4     E0 00 90 FD | 	jmp	#LR__4196
29dd8                 | LR__4182
29dd8     01 82 06 F1 | 	add	_var02, #1
29ddc     41 8D C2 FA | 	rdbyte	_var07, _var02
29de0     01 82 86 F1 | 	sub	_var02, #1
29de4     46 87 E2 F8 | 	getbyte	_var04, _var07, #0
29de8     2E 86 0E F2 | 	cmp	_var04, #46 wz
29dec     84 00 90 5D |  if_ne	jmp	#LR__4191
29df0     02 82 06 F1 | 	add	_var02, #2
29df4     41 8D C2 FA | 	rdbyte	_var07, _var02
29df8     02 82 86 F1 | 	sub	_var02, #2
29dfc     46 87 E2 F8 | 	getbyte	_var04, _var07, #0
29e00     2F 86 0E F2 | 	cmp	_var04, #47 wz
29e04     18 00 90 AD |  if_e	jmp	#LR__4183
29e08     02 82 06 F1 | 	add	_var02, #2
29e0c     41 89 C2 FA | 	rdbyte	_var05, _var02
29e10     02 82 86 F1 | 	sub	_var02, #2
29e14     44 8B 02 F6 | 	mov	_var06, _var05
29e18     07 8A 4E F7 | 	zerox	_var06, #7 wz
29e1c     54 00 90 5D |  if_ne	jmp	#LR__4190
29e20                 | LR__4183
29e20     02 82 06 F1 | 	add	_var02, #2
29e24     49 85 5A F2 | 	cmps	_var03, arg01 wcz
29e28     40 00 90 ED |  if_be	jmp	#LR__4189
29e2c     42 8F 02 F6 | 	mov	_var08, _var03
29e30     01 8E 86 F1 | 	sub	_var08, #1
29e34                 | LR__4184
29e34     47 87 C2 FA | 	rdbyte	_var04, _var08
29e38     2F 86 0E F2 | 	cmp	_var04, #47 wz
29e3c     0C 00 90 5D |  if_ne	jmp	#LR__4185
29e40     49 8F 5A F2 | 	cmps	_var08, arg01 wcz
29e44     01 8E 86 11 |  if_a	sub	_var08, #1
29e48     E8 FF 9F 1D |  if_a	jmp	#LR__4184
29e4c                 | LR__4185
29e4c     D7 0C 48 FB | 	callpa	#(@LR__4187-@LR__4186)>>2,fcache_load_ptr_
29e50                 | LR__4186
29e50     49 8F 5A F2 | 	cmps	_var08, arg01 wcz
29e54     10 00 90 ED |  if_be	jmp	#LR__4188
29e58     47 87 C2 FA | 	rdbyte	_var04, _var08
29e5c     2F 86 0E F2 | 	cmp	_var04, #47 wz
29e60     01 8E 86 51 |  if_ne	sub	_var08, #1
29e64     E8 FF 9F 5D |  if_ne	jmp	#LR__4186
29e68                 | LR__4187
29e68                 | LR__4188
29e68     47 85 02 F6 | 	mov	_var03, _var08
29e6c                 | LR__4189
29e6c     01 80 06 F6 | 	mov	_var01, #1
29e70     44 00 90 FD | 	jmp	#LR__4196
29e74                 | LR__4190
29e74                 | LR__4191
29e74                 | LR__4192
29e74     D7 18 48 FB | 	callpa	#(@LR__4194-@LR__4193)>>2,fcache_load_ptr_
29e78                 | LR__4193
29e78     41 87 CA FA | 	rdbyte	_var04, _var02 wz
29e7c     43 8D 02 56 |  if_ne	mov	_var07, _var04
29e80     2F 8C 0E 52 |  if_ne	cmp	_var07, #47 wz
29e84     20 00 90 AD |  if_e	jmp	#LR__4195
29e88     41 8B 02 F6 | 	mov	_var06, _var02
29e8c     41 89 02 F6 | 	mov	_var05, _var02
29e90     01 88 06 F1 | 	add	_var05, #1
29e94     45 91 C2 FA | 	rdbyte	_var09, _var06
29e98     44 83 02 F6 | 	mov	_var02, _var05
29e9c     42 91 42 FC | 	wrbyte	_var09, _var03
29ea0     01 84 06 F1 | 	add	_var03, #1
29ea4     D0 FF 9F FD | 	jmp	#LR__4193
29ea8                 | LR__4194
29ea8                 | LR__4195
29ea8     41 87 C2 FA | 	rdbyte	_var04, _var02
29eac     2F 86 0E F2 | 	cmp	_var04, #47 wz
29eb0     C0 FE 9F 5D |  if_ne	jmp	#LR__4180
29eb4     01 80 06 F6 | 	mov	_var01, #1
29eb8                 | LR__4196
29eb8     D7 0C 48 FB | 	callpa	#(@LR__4198-@LR__4197)>>2,fcache_load_ptr_
29ebc                 | LR__4197
29ebc     41 87 C2 FA | 	rdbyte	_var04, _var02
29ec0     2F 86 0E F2 | 	cmp	_var04, #47 wz
29ec4     41 8D 02 A6 |  if_e	mov	_var07, _var02
29ec8     01 8C 06 A1 |  if_e	add	_var07, #1
29ecc     46 83 02 A6 |  if_e	mov	_var02, _var07
29ed0     E8 FF 9F AD |  if_e	jmp	#LR__4197
29ed4                 | LR__4198
29ed4     9C FE 9F FD | 	jmp	#LR__4180
29ed8                 | LR__4199
29ed8     42 01 48 FC | 	wrbyte	#0, _var03
29edc                 | __system___normalizeName_ret
29edc     2D 00 64 FD | 	ret
29ee0                 | 
29ee0                 | __system___strrev
29ee0     49 81 CA FA | 	rdbyte	_var01, arg01 wz
29ee4     40 00 90 AD |  if_e	jmp	#__system___strrev_ret
29ee8     49 83 02 F6 | 	mov	_var02, arg01
29eec     D7 06 48 FB | 	callpa	#(@LR__4201-@LR__4200)>>2,fcache_load_ptr_
29ef0                 | LR__4200
29ef0     41 81 CA FA | 	rdbyte	_var01, _var02 wz
29ef4     01 82 06 51 |  if_ne	add	_var02, #1
29ef8     F4 FF 9F 5D |  if_ne	jmp	#LR__4200
29efc                 | LR__4201
29efc     01 82 86 F1 | 	sub	_var02, #1
29f00     D7 12 48 FB | 	callpa	#(@LR__4203-@LR__4202)>>2,fcache_load_ptr_
29f04                 | LR__4202
29f04     49 83 5A F2 | 	cmps	_var02, arg01 wcz
29f08     1C 00 90 ED |  if_be	jmp	#LR__4204
29f0c     49 81 C2 FA | 	rdbyte	_var01, arg01
29f10     41 85 C2 FA | 	rdbyte	_var03, _var02
29f14     49 85 42 FC | 	wrbyte	_var03, arg01
29f18     41 81 42 FC | 	wrbyte	_var01, _var02
29f1c     01 92 06 F1 | 	add	arg01, #1
29f20     01 82 86 F1 | 	sub	_var02, #1
29f24     DC FF 9F FD | 	jmp	#LR__4202
29f28                 | LR__4203
29f28                 | LR__4204
29f28                 | __system___strrev_ret
29f28     2D 00 64 FD | 	ret
29f2c                 | 
29f2c                 | __system___fmtpad
29f2c     06 CA 05 F6 | 	mov	COUNT_, #6
29f30     E8 00 A0 FD | 	call	#pushregs_
29f34     49 A7 02 F6 | 	mov	local01, arg01
29f38     4A A9 02 F6 | 	mov	local02, arg02
29f3c     4B AB 02 F6 | 	mov	local03, arg03
29f40     54 93 EA F8 | 	getbyte	arg01, local02, #1
29f44     16 A8 46 F0 | 	shr	local02, #22
29f48     03 A8 0E F5 | 	and	local02, #3 wz
29f4c     00 AC 06 F6 | 	mov	local04, #0
29f50     01 A8 06 A6 |  if_e	mov	local02, #1
29f54     4C A9 CA F7 | 	test	local02, arg04 wz
29f58     00 7A 06 A6 |  if_e	mov	result1, #0
29f5c     88 00 90 AD |  if_e	jmp	#LR__4213
29f60     49 AB C2 F2 | 	subr	local03, arg01
29f64     01 AA 56 F2 | 	cmps	local03, #1 wc
29f68     00 7A 06 C6 |  if_b	mov	result1, #0
29f6c     78 00 90 CD |  if_b	jmp	#LR__4213
29f70     03 A8 0E F2 | 	cmp	local02, #3 wz
29f74     18 00 90 5D |  if_ne	jmp	#LR__4210
29f78     01 98 0E F2 | 	cmp	arg04, #1 wz
29f7c     6E A8 62 FD | 	wrz	local02
29f80     54 AB 02 F1 | 	add	local03, local02
29f84     55 AB 52 F6 | 	abs	local03, local03 wc
29f88     01 AA 46 F0 | 	shr	local03, #1
29f8c     55 AB 82 F6 | 	negc	local03, local03
29f90                 | LR__4210
29f90     01 AA 56 F2 | 	cmps	local03, #1 wc
29f94     4C 00 90 CD |  if_b	jmp	#LR__4212
29f98     55 AF 02 F6 | 	mov	local05, local03
29f9c                 | LR__4211
29f9c     53 A9 02 F6 | 	mov	local02, local01
29fa0     53 B1 02 F6 | 	mov	local06, local01
29fa4     13 A8 46 F7 | 	zerox	local02, #19
29fa8     14 B0 46 F0 | 	shr	local06, #20
29fac     02 B0 66 F0 | 	shl	local06, #2
29fb0     2D B1 02 F1 | 	add	local06, __methods__
29fb4     58 B1 02 FB | 	rdlong	local06, local06
29fb8     20 92 06 F6 | 	mov	arg01, #32
29fbc     32 AB 02 F6 | 	mov	local03, objptr
29fc0     54 65 02 F6 | 	mov	objptr, local02
29fc4     2D B0 62 FD | 	call	local06
29fc8     55 65 02 F6 | 	mov	objptr, local03
29fcc     3D B1 02 F6 | 	mov	local06, result1
29fd0     00 B0 56 F2 | 	cmps	local06, #0 wc
29fd4     58 7B 02 C6 |  if_b	mov	result1, local06
29fd8     0C 00 90 CD |  if_b	jmp	#LR__4213
29fdc     58 AD 02 F1 | 	add	local04, local06
29fe0     EE AF 6E FB | 	djnz	local05, #LR__4211
29fe4                 | LR__4212
29fe4     56 7B 02 F6 | 	mov	result1, local04
29fe8                 | LR__4213
29fe8     E7 F0 03 F6 | 	mov	ptra, fp
29fec     F2 00 A0 FD | 	call	#popregs_
29ff0                 | __system___fmtpad_ret
29ff0     2D 00 64 FD | 	ret
29ff4                 | 
29ff4                 | __system___uitoa
29ff4     04 CA 05 F6 | 	mov	COUNT_, #4
29ff8     E8 00 A0 FD | 	call	#pushregs_
29ffc     49 A7 02 F6 | 	mov	local01, arg01
2a000     00 9A 4E F2 | 	cmps	arg05, #0 wz
2a004     53 9B 02 F6 | 	mov	arg05, local01
2a008     00 A8 06 F6 | 	mov	local02, #0
2a00c     37 AA 06 56 |  if_ne	mov	local03, #55
2a010     57 AA 06 A6 |  if_e	mov	local03, #87
2a014                 | LR__4220
2a014     4B 95 12 FD | 	qdiv	arg02, arg03
2a018     19 AC 62 FD | 	getqy	local04
2a01c     4B 95 12 FD | 	qdiv	arg02, arg03
2a020     0A AC 16 F2 | 	cmp	local04, #10 wc
2a024     30 AC 06 C1 |  if_b	add	local04, #48
2a028     55 AD 02 31 |  if_ae	add	local04, local03
2a02c     4D AD 42 FC | 	wrbyte	local04, arg05
2a030     01 9A 06 F1 | 	add	arg05, #1
2a034     01 A8 06 F1 | 	add	local02, #1
2a038     18 94 62 FD | 	getqx	arg02
2a03c     00 94 0E F2 | 	cmp	arg02, #0 wz
2a040     D0 FF 9F 5D |  if_ne	jmp	#LR__4220
2a044     4C A9 12 F2 | 	cmp	local02, arg04 wc
2a048     C8 FF 9F CD |  if_b	jmp	#LR__4220
2a04c     4D 01 48 FC | 	wrbyte	#0, arg05
2a050     53 93 02 F6 | 	mov	arg01, local01
2a054     88 FE BF FD | 	call	#__system___strrev
2a058     54 7B 02 F6 | 	mov	result1, local02
2a05c     E7 F0 03 F6 | 	mov	ptra, fp
2a060     F2 00 A0 FD | 	call	#popregs_
2a064                 | __system___uitoa_ret
2a064     2D 00 64 FD | 	ret
2a068                 | 
2a068                 | __system__disassemble_0582
2a068     10 CA 05 F6 | 	mov	COUNT_, #16
2a06c     E8 00 A0 FD | 	call	#pushregs_
2a070     49 A7 02 F6 | 	mov	local01, arg01
2a074     4A A9 02 F6 | 	mov	local02, arg02
2a078     4B AB 02 F6 | 	mov	local03, arg03
2a07c     4C AD 02 F6 | 	mov	local04, arg04
2a080     4D AF 02 F6 | 	mov	local05, arg05
2a084     57 93 52 F6 | 	abs	arg01, local05 wc
2a088     1F B0 C6 C9 |  if_b	decod	local06, #31
2a08c     00 B0 06 36 |  if_ae	mov	local06, #0
2a090     40 CF BF FD | 	call	#__system___float_fromuns
2a094     58 7B 62 F5 | 	xor	result1, local06
2a098     3D B3 02 F6 | 	mov	local07, result1
2a09c     00 B4 06 F6 | 	mov	local08, #0
2a0a0     53 93 02 F6 | 	mov	arg01, local01
2a0a4     00 94 06 F6 | 	mov	arg02, #0
2a0a8     01 96 06 F6 | 	mov	arg03, #1
2a0ac     5C D7 BF FD | 	call	#__system___float_cmp
2a0b0     00 7A 0E F2 | 	cmp	result1, #0 wz
2a0b4     00 B6 06 A6 |  if_e	mov	local09, #0
2a0b8     54 01 68 AC |  if_e	wrlong	#0, local02
2a0bc     55 B7 62 AC |  if_e	wrlong	local09, local03
2a0c0     8C 01 90 AD |  if_e	jmp	#LR__4242
2a0c4     53 93 02 F6 | 	mov	arg01, local01
2a0c8     40 DC BF FD | 	call	#__system____builtin_ilogb
2a0cc     3D B9 02 F6 | 	mov	local10, result1
2a0d0     0A AE 0E F2 | 	cmp	local05, #10 wz
2a0d4     24 00 90 5D |  if_ne	jmp	#LR__4230
2a0d8     5C B7 02 F6 | 	mov	local09, local10
2a0dc     01 B6 66 F0 | 	shl	local09, #1
2a0e0     5C B7 02 F1 | 	add	local09, local10
2a0e4     5B B9 52 F6 | 	abs	local10, local09 wc
2a0e8     0A B8 16 FD | 	qdiv	local10, #10
2a0ec     09 BA 06 F6 | 	mov	local11, #9
2a0f0     18 B8 62 FD | 	getqx	local10
2a0f4     5C B9 82 F6 | 	negc	local10, local10
2a0f8     04 00 90 FD | 	jmp	#LR__4231
2a0fc                 | LR__4230
2a0fc     18 BA 06 F6 | 	mov	local11, #24
2a100                 | LR__4231
2a100                 | LR__4232
2a100     08 B4 56 F2 | 	cmps	local08, #8 wc
2a104     01 B4 06 F1 | 	add	local08, #1
2a108     60 00 90 3D |  if_ae	jmp	#LR__4233
2a10c     00 C0 1F FF 
2a110     00 92 06 F6 | 	mov	arg01, ##1065353216
2a114     59 95 02 F6 | 	mov	arg02, local07
2a118     5C 97 02 F6 | 	mov	arg03, local10
2a11c     D0 E2 BF FD | 	call	#__system___float_pow_n
2a120     3D 95 02 F6 | 	mov	arg02, result1
2a124     53 93 02 F6 | 	mov	arg01, local01
2a128     B0 D4 BF FD | 	call	#__system___float_div
2a12c     3D BD 02 F6 | 	mov	local12, result1
2a130     5E 93 02 F6 | 	mov	arg01, local12
2a134     00 C0 1F FF 
2a138     00 94 06 F6 | 	mov	arg02, ##1065353216
2a13c     01 96 06 F6 | 	mov	arg03, #1
2a140     C8 D6 BF FD | 	call	#__system___float_cmp
2a144     00 7A 56 F2 | 	cmps	result1, #0 wc
2a148     01 B8 86 C1 |  if_b	sub	local10, #1
2a14c     B0 FF 9F CD |  if_b	jmp	#LR__4232
2a150     59 95 02 F6 | 	mov	arg02, local07
2a154     5E 93 02 F6 | 	mov	arg01, local12
2a158     01 96 66 F6 | 	neg	arg03, #1
2a15c     AC D6 BF FD | 	call	#__system___float_cmp
2a160     00 7A 56 F2 | 	cmps	result1, #0 wc
2a164     01 B8 06 31 |  if_ae	add	local10, #1
2a168     94 FF 9F 3D |  if_ae	jmp	#LR__4232
2a16c                 | LR__4233
2a16c     5E 93 02 F6 | 	mov	arg01, local12
2a170     98 DB BF FD | 	call	#__system____builtin_ilogb
2a174     3D BF 02 F6 | 	mov	local13, result1
2a178     5E C1 02 F6 | 	mov	local14, local12
2a17c     17 C1 06 F4 | 	bitl	local14, #279
2a180     17 C0 26 F4 | 	bith	local14, #23
2a184     5F C1 62 F0 | 	shl	local14, local13
2a188     02 AE 0E F2 | 	cmp	local05, #2 wz
2a18c     02 AC 66 A0 |  if_e	shl	local04, #2
2a190     00 C2 06 F6 | 	mov	local15, #0
2a194     00 AC 56 F2 | 	cmps	local04, #0 wc
2a198     10 00 90 3D |  if_ae	jmp	#LR__4234
2a19c     5C AD C2 F2 | 	subr	local04, local10
2a1a0     00 AC 56 F2 | 	cmps	local04, #0 wc
2a1a4     A0 00 90 CD |  if_b	jmp	#LR__4241
2a1a8     04 00 90 FD | 	jmp	#LR__4235
2a1ac                 | LR__4234
2a1ac     01 AC 06 F1 | 	add	local04, #1
2a1b0                 | LR__4235
2a1b0     5D AD 7A F3 | 	fles	local04, local11 wcz
2a1b4     01 C4 06 F6 | 	mov	local16, #1
2a1b8     D7 22 48 FB | 	callpa	#(@LR__4237-@LR__4236)>>2,fcache_load_ptr_
2a1bc                 | LR__4236
2a1bc     00 40 00 FF 
2a1c0     00 C2 16 F2 | 	cmp	local15, ##8388608 wc
2a1c4     38 00 90 3D |  if_ae	jmp	#LR__4238
2a1c8     01 AC 56 F2 | 	cmps	local04, #1 wc
2a1cc     01 AC 86 F1 | 	sub	local04, #1
2a1d0     2C 00 90 CD |  if_b	jmp	#LR__4238
2a1d4     57 C3 02 FD | 	qmul	local15, local05
2a1d8     60 BF 02 F6 | 	mov	local13, local14
2a1dc     17 BE 46 F0 | 	shr	local13, #23
2a1e0     17 C1 06 F4 | 	bitl	local14, #279
2a1e4     18 C2 62 FD | 	getqx	local15
2a1e8     57 C5 02 FD | 	qmul	local16, local05
2a1ec     18 C4 62 FD | 	getqx	local16
2a1f0     57 C1 02 FD | 	qmul	local14, local05
2a1f4     5F C3 02 F1 | 	add	local15, local13
2a1f8     18 C0 62 FD | 	getqx	local14
2a1fc     BC FF 9F FD | 	jmp	#LR__4236
2a200                 | LR__4237
2a200                 | LR__4238
2a200     57 B7 02 F6 | 	mov	local09, local05
2a204     17 B6 66 F0 | 	shl	local09, #23
2a208     5B BF 52 F6 | 	abs	local13, local09 wc
2a20c     01 BE 46 F0 | 	shr	local13, #1
2a210     5F BF 82 F6 | 	negc	local13, local13
2a214     5F C1 1A F2 | 	cmp	local14, local13 wcz
2a218     20 00 90 1D |  if_a	jmp	#LR__4239
2a21c     17 AE 66 F0 | 	shl	local05, #23
2a220     57 BF 52 F6 | 	abs	local13, local05 wc
2a224     01 BE 46 F0 | 	shr	local13, #1
2a228     5F BF 82 F6 | 	negc	local13, local13
2a22c     5F C1 0A F2 | 	cmp	local14, local13 wz
2a230     14 00 90 5D |  if_ne	jmp	#LR__4240
2a234     01 C2 CE F7 | 	test	local15, #1 wz
2a238     0C 00 90 AD |  if_e	jmp	#LR__4240
2a23c                 | LR__4239
2a23c     01 C2 06 F1 | 	add	local15, #1
2a240     62 C3 0A F2 | 	cmp	local15, local16 wz
2a244     01 B8 06 A1 |  if_e	add	local10, #1
2a248                 | LR__4240
2a248                 | LR__4241
2a248     54 C3 62 FC | 	wrlong	local15, local02
2a24c     55 B9 62 FC | 	wrlong	local10, local03
2a250                 | LR__4242
2a250     E7 F0 03 F6 | 	mov	ptra, fp
2a254     F2 00 A0 FD | 	call	#popregs_
2a258                 | __system__disassemble_0582_ret
2a258     2D 00 64 FD | 	ret
2a25c                 | 
2a25c                 | __system__emitsign_0584
2a25c     00 7A 06 F6 | 	mov	result1, #0
2a260     00 94 0E F2 | 	cmp	arg02, #0 wz
2a264     49 81 02 56 |  if_ne	mov	_var01, arg01
2a268     01 92 06 51 |  if_ne	add	arg01, #1
2a26c     40 95 42 5C |  if_ne	wrbyte	arg02, _var01
2a270     01 7A 06 56 |  if_ne	mov	result1, #1
2a274     00 96 0E F2 | 	cmp	arg03, #0 wz
2a278     49 61 48 5C |  if_ne	wrbyte	#48, arg01
2a27c     01 92 06 51 |  if_ne	add	arg01, #1
2a280     49 97 42 5C |  if_ne	wrbyte	arg03, arg01
2a284     02 7A 06 51 |  if_ne	add	result1, #2
2a288                 | __system__emitsign_0584_ret
2a288     2D 00 64 FD | 	ret
2a28c                 | 
2a28c                 | __system___getiolock_0622
2a28c     01 CA 05 F6 | 	mov	COUNT_, #1
2a290     E8 00 A0 FD | 	call	#pushregs_
2a294     90 F8 BF FD | 	call	#__system____getftab
2a298     3D A7 0A F6 | 	mov	local01, result1 wz
2a29c     10 00 90 AD |  if_e	jmp	#LR__4250
2a2a0     08 A6 06 F1 | 	add	local01, #8
2a2a4     53 7B 0A FB | 	rdlong	result1, local01 wz
2a2a8     08 A6 86 F1 | 	sub	local01, #8
2a2ac     10 00 90 5D |  if_ne	jmp	#LR__4251
2a2b0                 | LR__4250
2a2b0     34 7B 02 F6 | 	mov	result1, ptr___system__dat__
2a2b4     01 00 00 FF 
2a2b8     DC 7A 06 F1 | 	add	result1, ##732
2a2bc     08 00 90 FD | 	jmp	#LR__4252
2a2c0                 | LR__4251
2a2c0     0C A6 06 F1 | 	add	local01, #12
2a2c4     53 7B 02 F6 | 	mov	result1, local01
2a2c8                 | LR__4252
2a2c8     E7 F0 03 F6 | 	mov	ptra, fp
2a2cc     F2 00 A0 FD | 	call	#popregs_
2a2d0                 | __system___getiolock_0622_ret
2a2d0     2D 00 64 FD | 	ret
2a2d4                 | 
2a2d4                 | __system___gettxfunc
2a2d4     01 CA 05 F6 | 	mov	COUNT_, #1
2a2d8     E8 00 A0 FD | 	call	#pushregs_
2a2dc     48 F8 BF FD | 	call	#__system____getftab
2a2e0     3D A7 0A F6 | 	mov	local01, result1 wz
2a2e4     10 00 90 AD |  if_e	jmp	#LR__4260
2a2e8     08 A6 06 F1 | 	add	local01, #8
2a2ec     53 95 0A FB | 	rdlong	arg02, local01 wz
2a2f0     08 A6 86 F1 | 	sub	local01, #8
2a2f4     08 00 90 5D |  if_ne	jmp	#LR__4261
2a2f8                 | LR__4260
2a2f8     00 7A 06 F6 | 	mov	result1, #0
2a2fc     0C 00 90 FD | 	jmp	#LR__4262
2a300                 | LR__4261
2a300     00 88 05 FF 
2a304     00 A6 46 F5 | 	or	local01, ##185597952
2a308     53 7B 02 F6 | 	mov	result1, local01
2a30c                 | LR__4262
2a30c     E7 F0 03 F6 | 	mov	ptra, fp
2a310     F2 00 A0 FD | 	call	#popregs_
2a314                 | __system___gettxfunc_ret
2a314     2D 00 64 FD | 	ret
2a318                 | 
2a318                 | __system___getrxfunc
2a318     01 CA 05 F6 | 	mov	COUNT_, #1
2a31c     E8 00 A0 FD | 	call	#pushregs_
2a320     04 F8 BF FD | 	call	#__system____getftab
2a324     3D A7 0A F6 | 	mov	local01, result1 wz
2a328     10 00 90 AD |  if_e	jmp	#LR__4270
2a32c     08 A6 06 F1 | 	add	local01, #8
2a330     53 95 0A FB | 	rdlong	arg02, local01 wz
2a334     08 A6 86 F1 | 	sub	local01, #8
2a338     08 00 90 5D |  if_ne	jmp	#LR__4271
2a33c                 | LR__4270
2a33c     00 7A 06 F6 | 	mov	result1, #0
2a340     0C 00 90 FD | 	jmp	#LR__4272
2a344                 | LR__4271
2a344     00 90 05 FF 
2a348     00 A6 46 F5 | 	or	local01, ##186646528
2a34c     53 7B 02 F6 | 	mov	result1, local01
2a350                 | LR__4272
2a350     E7 F0 03 F6 | 	mov	ptra, fp
2a354     F2 00 A0 FD | 	call	#popregs_
2a358                 | __system___getrxfunc_ret
2a358     2D 00 64 FD | 	ret
2a35c                 | 
2a35c                 | __system____ScanForChar
2a35c     49 81 02 F6 | 	mov	_var01, arg01
2a360     49 83 02 F6 | 	mov	_var02, arg01
2a364     D7 06 48 FB | 	callpa	#(@LR__4281-@LR__4280)>>2,fcache_load_ptr_
2a368                 | LR__4280
2a368     41 7B CA FA | 	rdbyte	result1, _var02 wz
2a36c     01 82 06 51 |  if_ne	add	_var02, #1
2a370     F4 FF 9F 5D |  if_ne	jmp	#LR__4280
2a374                 | LR__4281
2a374     49 83 82 F1 | 	sub	_var02, arg01
2a378     41 7B 02 F6 | 	mov	result1, _var02
2a37c     3D 93 0A F6 | 	mov	arg01, result1 wz
2a380     00 7A 06 A6 |  if_e	mov	result1, #0
2a384     B8 00 90 AD |  if_e	jmp	#LR__4288
2a388     4A 85 02 F6 | 	mov	_var03, arg02
2a38c     07 84 4E F7 | 	zerox	_var03, #7 wz
2a390     00 7A 06 A6 |  if_e	mov	result1, #0
2a394     A8 00 90 AD |  if_e	jmp	#LR__4288
2a398     01 96 16 F2 | 	cmp	arg03, #1 wc
2a39c     00 98 0E C2 |  if_b	cmp	arg04, #0 wz
2a3a0     01 96 06 86 |  if_c_and_z	mov	arg03, #1
2a3a4     00 7A 06 46 |  if_c_and_nz	mov	result1, #0
2a3a8     94 00 90 4D |  if_c_and_nz	jmp	#LR__4288
2a3ac     49 97 1A F2 | 	cmp	arg03, arg01 wcz
2a3b0     10 00 90 ED |  if_be	jmp	#LR__4282
2a3b4     00 98 0E F2 | 	cmp	arg04, #0 wz
2a3b8     00 7A 06 A6 |  if_e	mov	result1, #0
2a3bc     80 00 90 AD |  if_e	jmp	#LR__4288
2a3c0     49 97 02 F6 | 	mov	arg03, arg01
2a3c4                 | LR__4282
2a3c4     01 96 86 F1 | 	sub	arg03, #1
2a3c8     00 98 0E F2 | 	cmp	arg04, #0 wz
2a3cc     38 00 90 5D |  if_ne	jmp	#LR__4284
2a3d0     4B 87 02 F6 | 	mov	_var04, arg03
2a3d4     49 89 02 F6 | 	mov	_var05, arg01
2a3d8                 | LR__4283
2a3d8     44 87 12 F2 | 	cmp	_var04, _var05 wc
2a3dc     5C 00 90 3D |  if_ae	jmp	#LR__4287
2a3e0     43 85 02 F6 | 	mov	_var03, _var04
2a3e4     40 85 02 F1 | 	add	_var03, _var01
2a3e8     42 85 C2 FA | 	rdbyte	_var03, _var03
2a3ec     4A 99 E2 F8 | 	getbyte	arg04, arg02, #0
2a3f0     4C 85 0A F2 | 	cmp	_var03, arg04 wz
2a3f4     01 86 06 A1 |  if_e	add	_var04, #1
2a3f8     43 7B 02 A6 |  if_e	mov	result1, _var04
2a3fc     40 00 90 AD |  if_e	jmp	#LR__4288
2a400     01 86 06 F1 | 	add	_var04, #1
2a404     D0 FF 9F FD | 	jmp	#LR__4283
2a408                 | LR__4284
2a408     4B 87 02 F6 | 	mov	_var04, arg03
2a40c                 | LR__4285
2a40c     4B 87 1A F2 | 	cmp	_var04, arg03 wcz
2a410     28 00 90 1D |  if_a	jmp	#LR__4286
2a414     43 89 02 F6 | 	mov	_var05, _var04
2a418     40 89 02 F1 | 	add	_var05, _var01
2a41c     44 85 C2 FA | 	rdbyte	_var03, _var05
2a420     4A 89 E2 F8 | 	getbyte	_var05, arg02, #0
2a424     44 85 0A F2 | 	cmp	_var03, _var05 wz
2a428     01 86 06 A1 |  if_e	add	_var04, #1
2a42c     43 7B 02 A6 |  if_e	mov	result1, _var04
2a430     0C 00 90 AD |  if_e	jmp	#LR__4288
2a434     01 86 86 F1 | 	sub	_var04, #1
2a438     D0 FF 9F FD | 	jmp	#LR__4285
2a43c                 | LR__4286
2a43c                 | LR__4287
2a43c     00 7A 06 F6 | 	mov	result1, #0
2a440                 | LR__4288
2a440                 | __system____ScanForChar_ret
2a440     2D 00 64 FD | 	ret
2a444                 | 
2a444                 | __system___basic_dir
2a444     06 CA 05 F6 | 	mov	COUNT_, #6
2a448     E8 00 A0 FD | 	call	#pushregs_
2a44c     50 F0 07 F1 | 	add	ptra, #80
2a450     49 A7 0A F6 | 	mov	local01, arg01 wz
2a454     4A A9 02 F6 | 	mov	local02, arg02
2a458     53 AB CA 5A |  if_ne	rdbyte	local03, local01 wz
2a45c     5C 00 90 AD |  if_e	jmp	#LR__4290
2a460     03 00 00 FF 
2a464     34 69 06 F1 | 	add	ptr___system__dat__, ##1844
2a468     34 AB 0A FB | 	rdlong	local03, ptr___system__dat__ wz
2a46c     03 00 00 FF 
2a470     34 69 86 F1 | 	sub	ptr___system__dat__, ##1844
2a474     03 00 00 5F 
2a478     34 69 06 51 |  if_ne	add	ptr___system__dat__, ##1844
2a47c     34 93 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
2a480     03 00 00 5F 
2a484     34 69 86 51 |  if_ne	sub	ptr___system__dat__, ##1844
2a488     AC E9 BF 5D |  if_ne	call	#__system__closedir
2a48c     94 01 00 FF 
2a490     4C 92 06 F6 | 	mov	arg01, ##@LR__5488
2a494     B8 E8 BF FD | 	call	#__system__opendir
2a498     03 00 00 FF 
2a49c     34 69 06 F1 | 	add	ptr___system__dat__, ##1844
2a4a0     34 7B 62 FC | 	wrlong	result1, ptr___system__dat__
2a4a4     04 68 06 F1 | 	add	ptr___system__dat__, #4
2a4a8     34 A9 62 FC | 	wrlong	local02, ptr___system__dat__
2a4ac     04 68 06 F1 | 	add	ptr___system__dat__, #4
2a4b0     34 A7 62 FC | 	wrlong	local01, ptr___system__dat__
2a4b4     03 00 00 FF 
2a4b8     3C 69 86 F1 | 	sub	ptr___system__dat__, ##1852
2a4bc                 | LR__4290
2a4bc     03 00 00 FF 
2a4c0     34 69 06 F1 | 	add	ptr___system__dat__, ##1844
2a4c4     34 AB 0A FB | 	rdlong	local03, ptr___system__dat__ wz
2a4c8     03 00 00 FF 
2a4cc     34 69 86 F1 | 	sub	ptr___system__dat__, ##1844
2a4d0     94 01 00 AF 
2a4d4     4E 7A 06 A6 |  if_e	mov	result1, ##@LR__5489
2a4d8     7C 01 90 AD |  if_e	jmp	#LR__4298
2a4dc                 | LR__4291
2a4dc     03 00 00 FF 
2a4e0     34 69 06 F1 | 	add	ptr___system__dat__, ##1844
2a4e4     34 93 02 FB | 	rdlong	arg01, ptr___system__dat__
2a4e8     03 00 00 FF 
2a4ec     34 69 86 F1 | 	sub	ptr___system__dat__, ##1844
2a4f0     B8 E9 BF FD | 	call	#__system__readdir
2a4f4     3D AD 0A F6 | 	mov	local04, result1 wz
2a4f8     38 00 90 5D |  if_ne	jmp	#LR__4292
2a4fc     03 00 00 FF 
2a500     34 69 06 F1 | 	add	ptr___system__dat__, ##1844
2a504     34 93 02 FB | 	rdlong	arg01, ptr___system__dat__
2a508     03 00 00 FF 
2a50c     34 69 86 F1 | 	sub	ptr___system__dat__, ##1844
2a510     24 E9 BF FD | 	call	#__system__closedir
2a514     03 00 00 FF 
2a518     34 69 06 F1 | 	add	ptr___system__dat__, ##1844
2a51c     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
2a520     03 00 00 FF 
2a524     34 69 86 F1 | 	sub	ptr___system__dat__, ##1844
2a528     94 01 00 FF 
2a52c     50 7A 06 F6 | 	mov	result1, ##@LR__5490
2a530     24 01 90 FD | 	jmp	#LR__4298
2a534                 | LR__4292
2a534     03 00 00 FF 
2a538     3C 69 06 F1 | 	add	ptr___system__dat__, ##1852
2a53c     34 95 02 FB | 	rdlong	arg02, ptr___system__dat__
2a540     03 00 00 FF 
2a544     3C 69 86 F1 | 	sub	ptr___system__dat__, ##1852
2a548     56 93 02 F6 | 	mov	arg01, local04
2a54c     4C 09 B0 FD | 	call	#__system___pat_match
2a550     00 7A 0E F2 | 	cmp	result1, #0 wz
2a554     84 FF 9F AD |  if_e	jmp	#LR__4291
2a558     03 00 00 FF 
2a55c     38 69 06 F1 | 	add	ptr___system__dat__, ##1848
2a560     34 AB 0A FB | 	rdlong	local03, ptr___system__dat__ wz
2a564     03 00 00 FF 
2a568     38 69 86 F1 | 	sub	ptr___system__dat__, ##1848
2a56c     B0 00 90 AD |  if_e	jmp	#LR__4295
2a570     E7 94 02 F6 | 	mov	arg02, fp
2a574     10 94 06 F1 | 	add	arg02, #16
2a578     56 93 02 F6 | 	mov	arg01, local04
2a57c     10 F2 BF FD | 	call	#__system__stat
2a580     00 7A 4E F2 | 	cmps	result1, #0 wz
2a584     94 01 00 5F 
2a588     52 7A 06 56 |  if_ne	mov	result1, ##@LR__5491
2a58c     C8 00 90 5D |  if_ne	jmp	#LR__4298
2a590     18 CE 05 F1 | 	add	fp, #24
2a594     E7 AE 02 FB | 	rdlong	local05, fp
2a598     18 CE 85 F1 | 	sub	fp, #24
2a59c     78 00 00 FF 
2a5a0     00 AE 06 F5 | 	and	local05, ##61440
2a5a4     56 AB C2 FA | 	rdbyte	local03, local04
2a5a8     2E AA 0E F2 | 	cmp	local03, #46 wz
2a5ac     02 A8 06 A6 |  if_e	mov	local02, #2
2a5b0     00 A8 06 56 |  if_ne	mov	local02, #0
2a5b4     08 00 00 FF 
2a5b8     00 AE 0E F2 | 	cmp	local05, ##4096 wz
2a5bc     10 A8 46 A5 |  if_e	or	local02, #16
2a5c0     40 00 90 AD |  if_e	jmp	#LR__4294
2a5c4     10 00 00 FF 
2a5c8     00 AE 0E F2 | 	cmp	local05, ##8192 wz
2a5cc     18 00 00 5F 
2a5d0     00 AE 0E 52 |  if_ne	cmp	local05, ##12288 wz
2a5d4     20 00 00 5F 
2a5d8     00 AE 0E 52 |  if_ne	cmp	local05, ##16384 wz
2a5dc     04 A8 46 A5 |  if_e	or	local02, #4
2a5e0     20 00 90 AD |  if_e	jmp	#LR__4293
2a5e4     18 CE 05 F1 | 	add	fp, #24
2a5e8     E7 AA 02 FB | 	rdlong	local03, fp
2a5ec     18 CE 85 F1 | 	sub	fp, #24
2a5f0     92 AA CE F7 | 	test	local03, #146 wz
2a5f4     01 A8 46 A5 |  if_e	or	local02, #1
2a5f8     08 00 00 5F 
2a5fc     00 AE 0E 52 |  if_ne	cmp	local05, ##4096 wz
2a600     20 A8 46 55 |  if_ne	or	local02, #32
2a604                 | LR__4293
2a604                 | LR__4294
2a604     03 00 00 FF 
2a608     38 69 06 F1 | 	add	ptr___system__dat__, ##1848
2a60c     34 AF 02 FB | 	rdlong	local05, ptr___system__dat__
2a610     03 00 00 FF 
2a614     38 69 86 F1 | 	sub	ptr___system__dat__, ##1848
2a618     57 A9 CA F7 | 	test	local02, local05 wz
2a61c     BC FE 9F AD |  if_e	jmp	#LR__4291
2a620                 | LR__4295
2a620     56 93 02 F6 | 	mov	arg01, local04
2a624     49 B1 02 F6 | 	mov	local06, arg01
2a628     D7 06 48 FB | 	callpa	#(@LR__4297-@LR__4296)>>2,fcache_load_ptr_
2a62c                 | LR__4296
2a62c     58 7B CA FA | 	rdbyte	result1, local06 wz
2a630     01 B0 06 51 |  if_ne	add	local06, #1
2a634     F4 FF 9F 5D |  if_ne	jmp	#LR__4296
2a638                 | LR__4297
2a638     58 93 C2 F2 | 	subr	arg01, local06
2a63c     01 92 06 F1 | 	add	arg01, #1
2a640     CC E0 BF FD | 	call	#__system___gc_alloc_managed
2a644     3D AF 0A F6 | 	mov	local05, result1 wz
2a648     57 93 02 56 |  if_ne	mov	arg01, local05
2a64c     56 95 02 56 |  if_ne	mov	arg02, local04
2a650     68 A6 BF 5D |  if_ne	call	#__system____builtin_strcpy
2a654     57 7B 02 F6 | 	mov	result1, local05
2a658                 | LR__4298
2a658     E7 F0 03 F6 | 	mov	ptra, fp
2a65c     F2 00 A0 FD | 	call	#popregs_
2a660                 | __system___basic_dir_ret
2a660     2D 00 64 FD | 	ret
2a664                 | 
2a664                 | __system__pack_0698
2a664     49 81 02 F6 | 	mov	_var01, arg01
2a668     7F 96 06 F1 | 	add	arg03, #127
2a66c     04 98 CE F7 | 	test	arg04, #4 wz
2a670     10 00 90 AD |  if_e	jmp	#LR__4300
2a674     00 80 0E F2 | 	cmp	_var01, #0 wz
2a678     16 80 C6 A9 |  if_e	decod	_var01, #22
2a67c     F7 80 26 F4 | 	bith	_var01, #247
2a680     B4 00 90 FD | 	jmp	#LR__4309
2a684                 | LR__4300
2a684     02 98 CE F7 | 	test	arg04, #2 wz
2a688     00 C0 3F 5F 
2a68c     00 80 06 56 |  if_ne	mov	_var01, ##2139095040
2a690     00 94 06 56 |  if_ne	mov	arg02, #0
2a694     A0 00 90 5D |  if_ne	jmp	#LR__4308
2a698     08 98 CE F7 | 	test	arg04, #8 wz
2a69c     00 80 06 56 |  if_ne	mov	_var01, #0
2a6a0     94 00 90 5D |  if_ne	jmp	#LR__4307
2a6a4     FF 96 56 F2 | 	cmps	arg03, #255 wc
2a6a8     00 C0 3F 3F 
2a6ac     00 80 06 36 |  if_ae	mov	_var01, ##2139095040
2a6b0     00 94 06 36 |  if_ae	mov	arg02, #0
2a6b4     80 00 90 3D |  if_ae	jmp	#LR__4306
2a6b8     01 96 56 F2 | 	cmps	arg03, #1 wc
2a6bc     6C 00 90 3D |  if_ae	jmp	#LR__4304
2a6c0     01 94 46 F0 | 	shr	arg02, #1
2a6c4     40 83 02 F6 | 	mov	_var02, _var01
2a6c8     01 82 06 F5 | 	and	_var02, #1
2a6cc     1F 82 66 F0 | 	shl	_var02, #31
2a6d0     41 95 42 F5 | 	or	arg02, _var02
2a6d4     01 80 46 F0 | 	shr	_var01, #1
2a6d8     D7 1E 48 FB | 	callpa	#(@LR__4302-@LR__4301)>>2,fcache_load_ptr_
2a6dc                 | LR__4301
2a6dc     00 96 56 F2 | 	cmps	arg03, #0 wc
2a6e0     34 00 90 3D |  if_ae	jmp	#LR__4303
2a6e4     00 80 0E F2 | 	cmp	_var01, #0 wz
2a6e8     2C 00 90 AD |  if_e	jmp	#LR__4303
2a6ec     4A 93 02 F6 | 	mov	arg01, arg02
2a6f0     01 92 06 F5 | 	and	arg01, #1
2a6f4     01 96 06 F1 | 	add	arg03, #1
2a6f8     01 94 46 F0 | 	shr	arg02, #1
2a6fc     40 83 02 F6 | 	mov	_var02, _var01
2a700     01 82 06 F5 | 	and	_var02, #1
2a704     1F 82 66 F0 | 	shl	_var02, #31
2a708     41 95 42 F5 | 	or	arg02, _var02
2a70c     49 95 42 F5 | 	or	arg02, arg01
2a710     01 80 46 F0 | 	shr	_var01, #1
2a714     C4 FF 9F FD | 	jmp	#LR__4301
2a718                 | LR__4302
2a718                 | LR__4303
2a718     00 96 56 F2 | 	cmps	arg03, #0 wc
2a71c     18 00 90 3D |  if_ae	jmp	#LR__4305
2a720     00 94 0E F2 | 	cmp	arg02, #0 wz
2a724     6F 94 62 FD | 	wrnz	arg02
2a728     0C 00 90 FD | 	jmp	#LR__4305
2a72c                 | LR__4304
2a72c     17 81 06 F4 | 	bitl	_var01, #279
2a730     17 96 66 F0 | 	shl	arg03, #23
2a734     4B 81 42 F5 | 	or	_var01, arg03
2a738                 | LR__4305
2a738                 | LR__4306
2a738                 | LR__4307
2a738                 | LR__4308
2a738                 | LR__4309
2a738     01 80 CE F7 | 	test	_var01, #1 wz
2a73c     01 94 46 55 |  if_ne	or	arg02, #1
2a740     4A 97 02 F6 | 	mov	arg03, arg02
2a744     00 82 06 F6 | 	mov	_var02, #0
2a748     FF FF 3F FF 
2a74c     FF 95 06 F1 | 	add	arg02, ##2147483647
2a750     4B 95 12 F2 | 	cmp	arg02, arg03 wc
2a754     01 82 06 C6 |  if_b	mov	_var02, #1
2a758     41 81 02 F1 | 	add	_var01, _var02
2a75c     01 98 CE F7 | 	test	arg04, #1 wz
2a760     1F 80 26 54 |  if_ne	bith	_var01, #31
2a764     40 7B 02 F6 | 	mov	result1, _var01
2a768                 | __system__pack_0698_ret
2a768     2D 00 64 FD | 	ret
2a76c                 | 
2a76c                 | __system___rxtxioctl_0788
2a76c     00 95 0E F2 | 	cmp	arg02, #256 wz
2a770     0C 00 90 AD |  if_e	jmp	#LR__4310
2a774     01 95 0E F2 | 	cmp	arg02, #257 wz
2a778     1C 00 90 AD |  if_e	jmp	#LR__4311
2a77c     30 00 90 FD | 	jmp	#LR__4312
2a780                 | LR__4310
2a780     08 68 06 F1 | 	add	ptr___system__dat__, #8
2a784     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
2a788     08 68 86 F1 | 	sub	ptr___system__dat__, #8
2a78c     4B 7B 62 FC | 	wrlong	result1, arg03
2a790     00 7A 06 F6 | 	mov	result1, #0
2a794     28 00 90 FD | 	jmp	#LR__4313
2a798                 | LR__4311
2a798     4B 93 02 FB | 	rdlong	arg01, arg03
2a79c     08 68 06 F1 | 	add	ptr___system__dat__, #8
2a7a0     34 93 62 FC | 	wrlong	arg01, ptr___system__dat__
2a7a4     08 68 86 F1 | 	sub	ptr___system__dat__, #8
2a7a8     00 7A 06 F6 | 	mov	result1, #0
2a7ac     10 00 90 FD | 	jmp	#LR__4313
2a7b0                 | LR__4312
2a7b0     20 68 06 F1 | 	add	ptr___system__dat__, #32
2a7b4     34 15 68 FC | 	wrlong	#10, ptr___system__dat__
2a7b8     20 68 86 F1 | 	sub	ptr___system__dat__, #32
2a7bc     01 7A 66 F6 | 	neg	result1, #1
2a7c0                 | LR__4313
2a7c0                 | __system___rxtxioctl_0788_ret
2a7c0     2D 00 64 FD | 	ret
2a7c4                 | 
2a7c4                 | __system____dummy_flush_0789
2a7c4     00 7A 06 F6 | 	mov	result1, #0
2a7c8                 | __system____dummy_flush_0789_ret
2a7c8     2D 00 64 FD | 	ret
2a7cc                 | 
2a7cc                 | __system___vfswrite
2a7cc     09 CA 05 F6 | 	mov	COUNT_, #9
2a7d0     E8 00 A0 FD | 	call	#pushregs_
2a7d4     49 A7 02 F6 | 	mov	local01, arg01
2a7d8     4A A9 02 F6 | 	mov	local02, arg02
2a7dc     4B AB 02 F6 | 	mov	local03, arg03
2a7e0     54 AD 02 F6 | 	mov	local04, local02
2a7e4     08 A6 06 F1 | 	add	local01, #8
2a7e8     53 93 02 FB | 	rdlong	arg01, local01
2a7ec     08 A6 86 F1 | 	sub	local01, #8
2a7f0     02 92 CE F7 | 	test	arg01, #2 wz
2a7f4     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
2a7f8     34 0D 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2a7fc     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
2a800     01 7A 66 A6 |  if_e	neg	result1, #1
2a804     84 01 90 AD |  if_e	jmp	#LR__4326
2a808     08 A6 06 F1 | 	add	local01, #8
2a80c     53 7B 02 FB | 	rdlong	result1, local01
2a810     08 A6 86 F1 | 	sub	local01, #8
2a814     80 7A CE F7 | 	test	result1, #128 wz
2a818     6C 00 90 AD |  if_e	jmp	#LR__4321
2a81c     08 A6 06 F1 | 	add	local01, #8
2a820     53 95 02 FB | 	rdlong	arg02, local01
2a824     08 A6 86 F1 | 	sub	local01, #8
2a828     00 95 CE F7 | 	test	arg02, #256 wz
2a82c     58 00 90 AD |  if_e	jmp	#LR__4320
2a830     30 A6 06 F1 | 	add	local01, #48
2a834     53 AF 02 FB | 	rdlong	local05, local01
2a838     57 B1 02 F6 | 	mov	local06, local05
2a83c     30 A6 86 F1 | 	sub	local01, #48
2a840     13 B0 46 F7 | 	zerox	local06, #19
2a844     14 AE 46 F0 | 	shr	local05, #20
2a848     02 AE 66 F0 | 	shl	local05, #2
2a84c     2D AF 02 F1 | 	add	local05, __methods__
2a850     57 AF 02 FB | 	rdlong	local05, local05
2a854     53 93 02 F6 | 	mov	arg01, local01
2a858     00 94 06 F6 | 	mov	arg02, #0
2a85c     00 96 06 F6 | 	mov	arg03, #0
2a860     02 98 06 F6 | 	mov	arg04, #2
2a864     32 B3 02 F6 | 	mov	local07, objptr
2a868     58 65 02 F6 | 	mov	objptr, local06
2a86c     2D AE 62 FD | 	call	local05
2a870     59 65 02 F6 | 	mov	objptr, local07
2a874     08 A6 06 F1 | 	add	local01, #8
2a878     53 B3 02 FB | 	rdlong	local07, local01
2a87c     00 B3 26 F5 | 	andn	local07, #256
2a880     53 B3 62 FC | 	wrlong	local07, local01
2a884     08 A6 86 F1 | 	sub	local01, #8
2a888                 | LR__4320
2a888                 | LR__4321
2a888     18 A6 06 F1 | 	add	local01, #24
2a88c     53 B3 0A FB | 	rdlong	local07, local01 wz
2a890     18 A6 86 F1 | 	sub	local01, #24
2a894     80 00 90 AD |  if_e	jmp	#LR__4323
2a898     18 A6 06 F1 | 	add	local01, #24
2a89c     53 AF 02 FB | 	rdlong	local05, local01
2a8a0     57 B1 02 F6 | 	mov	local06, local05
2a8a4     18 A6 86 F1 | 	sub	local01, #24
2a8a8     13 B0 46 F7 | 	zerox	local06, #19
2a8ac     14 AE 46 F0 | 	shr	local05, #20
2a8b0     02 AE 66 F0 | 	shl	local05, #2
2a8b4     2D AF 02 F1 | 	add	local05, __methods__
2a8b8     57 AF 02 FB | 	rdlong	local05, local05
2a8bc     54 95 02 F6 | 	mov	arg02, local02
2a8c0     55 97 02 F6 | 	mov	arg03, local03
2a8c4     53 93 02 F6 | 	mov	arg01, local01
2a8c8     32 B3 02 F6 | 	mov	local07, objptr
2a8cc     58 65 02 F6 | 	mov	objptr, local06
2a8d0     2D AE 62 FD | 	call	local05
2a8d4     59 65 02 F6 | 	mov	objptr, local07
2a8d8     3D B5 02 F6 | 	mov	local08, result1
2a8dc     00 B4 56 F2 | 	cmps	local08, #0 wc
2a8e0     2C 00 90 3D |  if_ae	jmp	#LR__4322
2a8e4     08 A6 06 F1 | 	add	local01, #8
2a8e8     53 B3 02 FB | 	rdlong	local07, local01
2a8ec     20 B2 46 F5 | 	or	local07, #32
2a8f0     53 B3 62 FC | 	wrlong	local07, local01
2a8f4     00 B4 4E F2 | 	cmps	local08, #0 wz
2a8f8     20 68 06 F1 | 	add	ptr___system__dat__, #32
2a8fc     34 B5 62 FC | 	wrlong	local08, ptr___system__dat__
2a900     20 68 86 F1 | 	sub	ptr___system__dat__, #32
2a904     01 7A 66 56 |  if_ne	neg	result1, #1
2a908     00 7A 06 A6 |  if_e	mov	result1, #0
2a90c     7C 00 90 FD | 	jmp	#LR__4326
2a910                 | LR__4322
2a910     5A 7B 02 F6 | 	mov	result1, local08
2a914     74 00 90 FD | 	jmp	#LR__4326
2a918                 | LR__4323
2a918     1C A6 06 F1 | 	add	local01, #28
2a91c     53 B7 0A FB | 	rdlong	local09, local01 wz
2a920     1C A6 86 F1 | 	sub	local01, #28
2a924     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
2a928     34 0D 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2a92c     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
2a930     01 7A 66 A6 |  if_e	neg	result1, #1
2a934     54 00 90 AD |  if_e	jmp	#LR__4326
2a938     00 B4 06 F6 | 	mov	local08, #0
2a93c                 | LR__4324
2a93c     01 AA 16 F2 | 	cmp	local03, #1 wc
2a940     44 00 90 CD |  if_b	jmp	#LR__4325
2a944     5B AF 02 F6 | 	mov	local05, local09
2a948     5B B1 02 F6 | 	mov	local06, local09
2a94c     13 AE 46 F7 | 	zerox	local05, #19
2a950     14 B0 46 F0 | 	shr	local06, #20
2a954     02 B0 66 F0 | 	shl	local06, #2
2a958     2D B1 02 F1 | 	add	local06, __methods__
2a95c     58 B1 02 FB | 	rdlong	local06, local06
2a960     56 93 C2 FA | 	rdbyte	arg01, local04
2a964     53 95 02 F6 | 	mov	arg02, local01
2a968     32 B3 02 F6 | 	mov	local07, objptr
2a96c     57 65 02 F6 | 	mov	objptr, local05
2a970     01 AC 06 F1 | 	add	local04, #1
2a974     2D B0 62 FD | 	call	local06
2a978     59 65 02 F6 | 	mov	objptr, local07
2a97c     3D B5 02 F1 | 	add	local08, result1
2a980     01 AA 86 F1 | 	sub	local03, #1
2a984     B4 FF 9F FD | 	jmp	#LR__4324
2a988                 | LR__4325
2a988     5A 7B 02 F6 | 	mov	result1, local08
2a98c                 | LR__4326
2a98c     E7 F0 03 F6 | 	mov	ptra, fp
2a990     F2 00 A0 FD | 	call	#popregs_
2a994                 | __system___vfswrite_ret
2a994     2D 00 64 FD | 	ret
2a998                 | 
2a998                 | __system___vfsread
2a998     09 CA 05 F6 | 	mov	COUNT_, #9
2a99c     E8 00 A0 FD | 	call	#pushregs_
2a9a0     28 F0 07 F1 | 	add	ptra, #40
2a9a4     49 A7 02 F6 | 	mov	local01, arg01
2a9a8     4B A9 02 F6 | 	mov	local02, arg03
2a9ac     4A AB 02 F6 | 	mov	local03, arg02
2a9b0     00 AC 06 F6 | 	mov	local04, #0
2a9b4     08 A6 06 F1 | 	add	local01, #8
2a9b8     53 93 02 FB | 	rdlong	arg01, local01
2a9bc     08 A6 86 F1 | 	sub	local01, #8
2a9c0     01 92 CE F7 | 	test	arg01, #1 wz
2a9c4     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
2a9c8     34 0D 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2a9cc     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
2a9d0     01 7A 66 A6 |  if_e	neg	result1, #1
2a9d4     84 01 90 AD |  if_e	jmp	#LR__4336
2a9d8     14 A6 06 F1 | 	add	local01, #20
2a9dc     53 7B 0A FB | 	rdlong	result1, local01 wz
2a9e0     14 A6 86 F1 | 	sub	local01, #20
2a9e4     7C 00 90 AD |  if_e	jmp	#LR__4331
2a9e8     14 A6 06 F1 | 	add	local01, #20
2a9ec     53 AF 02 FB | 	rdlong	local05, local01
2a9f0     57 AB 02 F6 | 	mov	local03, local05
2a9f4     14 A6 86 F1 | 	sub	local01, #20
2a9f8     13 AA 46 F7 | 	zerox	local03, #19
2a9fc     14 AE 46 F0 | 	shr	local05, #20
2aa00     02 AE 66 F0 | 	shl	local05, #2
2aa04     2D AF 02 F1 | 	add	local05, __methods__
2aa08     57 AF 02 FB | 	rdlong	local05, local05
2aa0c     54 97 02 F6 | 	mov	arg03, local02
2aa10     53 93 02 F6 | 	mov	arg01, local01
2aa14     32 AD 02 F6 | 	mov	local04, objptr
2aa18     55 65 02 F6 | 	mov	objptr, local03
2aa1c     2D AE 62 FD | 	call	local05
2aa20     56 65 02 F6 | 	mov	objptr, local04
2aa24     3D B1 02 F6 | 	mov	local06, result1
2aa28     00 B0 56 F2 | 	cmps	local06, #0 wc
2aa2c     2C 00 90 3D |  if_ae	jmp	#LR__4330
2aa30     08 A6 06 F1 | 	add	local01, #8
2aa34     53 AF 02 FB | 	rdlong	local05, local01
2aa38     20 AE 46 F5 | 	or	local05, #32
2aa3c     53 AF 62 FC | 	wrlong	local05, local01
2aa40     00 B0 4E F2 | 	cmps	local06, #0 wz
2aa44     20 68 06 F1 | 	add	ptr___system__dat__, #32
2aa48     34 B1 62 FC | 	wrlong	local06, ptr___system__dat__
2aa4c     20 68 86 F1 | 	sub	ptr___system__dat__, #32
2aa50     01 7A 66 56 |  if_ne	neg	result1, #1
2aa54     00 7A 06 A6 |  if_e	mov	result1, #0
2aa58     00 01 90 FD | 	jmp	#LR__4336
2aa5c                 | LR__4330
2aa5c     58 7B 02 F6 | 	mov	result1, local06
2aa60     F8 00 90 FD | 	jmp	#LR__4336
2aa64                 | LR__4331
2aa64     20 A6 06 F1 | 	add	local01, #32
2aa68     53 B3 0A FB | 	rdlong	local07, local01 wz
2aa6c     20 A6 86 F1 | 	sub	local01, #32
2aa70     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
2aa74     34 0D 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2aa78     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
2aa7c     01 7A 66 A6 |  if_e	neg	result1, #1
2aa80     D8 00 90 AD |  if_e	jmp	#LR__4336
2aa84     28 A6 06 F1 | 	add	local01, #40
2aa88     53 B1 0A FB | 	rdlong	local06, local01 wz
2aa8c     28 A6 86 F1 | 	sub	local01, #40
2aa90     60 00 90 AD |  if_e	jmp	#LR__4333
2aa94     28 A6 06 F1 | 	add	local01, #40
2aa98     53 AF 02 FB | 	rdlong	local05, local01
2aa9c     57 B5 02 F6 | 	mov	local08, local05
2aaa0     28 A6 86 F1 | 	sub	local01, #40
2aaa4     13 B4 46 F7 | 	zerox	local08, #19
2aaa8     14 AE 46 F0 | 	shr	local05, #20
2aaac     02 AE 66 F0 | 	shl	local05, #2
2aab0     2D AF 02 F1 | 	add	local05, __methods__
2aab4     57 AF 02 FB | 	rdlong	local05, local05
2aab8     53 93 02 F6 | 	mov	arg01, local01
2aabc     E7 96 02 F6 | 	mov	arg03, fp
2aac0     24 96 06 F1 | 	add	arg03, #36
2aac4     00 95 06 F6 | 	mov	arg02, #256
2aac8     32 B1 02 F6 | 	mov	local06, objptr
2aacc     5A 65 02 F6 | 	mov	objptr, local08
2aad0     2D AE 62 FD | 	call	local05
2aad4     58 65 02 F6 | 	mov	objptr, local06
2aad8     00 7A 0E F2 | 	cmp	result1, #0 wz
2aadc     14 00 90 5D |  if_ne	jmp	#LR__4332
2aae0     24 CE 05 F1 | 	add	fp, #36
2aae4     E7 B0 02 FB | 	rdlong	local06, fp
2aae8     24 CE 85 F1 | 	sub	fp, #36
2aaec     02 B0 CE F7 | 	test	local06, #2 wz
2aaf0     01 AC 06 56 |  if_ne	mov	local04, #1
2aaf4                 | LR__4332
2aaf4                 | LR__4333
2aaf4     00 B0 06 F6 | 	mov	local06, #0
2aaf8                 | LR__4334
2aaf8     01 A8 16 F2 | 	cmp	local02, #1 wc
2aafc     58 00 90 CD |  if_b	jmp	#LR__4335
2ab00     59 B5 02 F6 | 	mov	local08, local07
2ab04     59 AF 02 F6 | 	mov	local05, local07
2ab08     13 B4 46 F7 | 	zerox	local08, #19
2ab0c     14 AE 46 F0 | 	shr	local05, #20
2ab10     02 AE 66 F0 | 	shl	local05, #2
2ab14     2D AF 02 F1 | 	add	local05, __methods__
2ab18     57 AF 02 FB | 	rdlong	local05, local05
2ab1c     53 93 02 F6 | 	mov	arg01, local01
2ab20     32 B7 02 F6 | 	mov	local09, objptr
2ab24     5A 65 02 F6 | 	mov	objptr, local08
2ab28     2D AE 62 FD | 	call	local05
2ab2c     5B 65 02 F6 | 	mov	objptr, local09
2ab30     00 7A 56 F2 | 	cmps	result1, #0 wc
2ab34     20 00 90 CD |  if_b	jmp	#LR__4335
2ab38     55 7B 42 FC | 	wrbyte	result1, local03
2ab3c     01 B0 06 F1 | 	add	local06, #1
2ab40     01 A8 86 F1 | 	sub	local02, #1
2ab44     00 AC 0E F2 | 	cmp	local04, #0 wz
2ab48     01 AA 06 F1 | 	add	local03, #1
2ab4c     A8 FF 9F AD |  if_e	jmp	#LR__4334
2ab50     0A 7A 0E F2 | 	cmp	result1, #10 wz
2ab54     A0 FF 9F 5D |  if_ne	jmp	#LR__4334
2ab58                 | LR__4335
2ab58     58 7B 02 F6 | 	mov	result1, local06
2ab5c                 | LR__4336
2ab5c     E7 F0 03 F6 | 	mov	ptra, fp
2ab60     F2 00 A0 FD | 	call	#popregs_
2ab64                 | __system___vfsread_ret
2ab64     2D 00 64 FD | 	ret
2ab68                 | 
2ab68                 | __system___sdmm_open
2ab68     0B CA 05 F6 | 	mov	COUNT_, #11
2ab6c     E8 00 A0 FD | 	call	#pushregs_
2ab70     49 AB 02 F6 | 	mov	local03, arg01
2ab74     4A AD 02 F6 | 	mov	local04, arg02
2ab78     4B AF 02 F6 | 	mov	local05, arg03
2ab7c     4C B1 02 F6 | 	mov	local06, arg04
2ab80     28 92 06 F6 | 	mov	arg01, #40
2ab84     88 DB BF FD | 	call	#__system___gc_alloc_managed
2ab88     3D B3 02 F6 | 	mov	local07, result1
2ab8c     55 99 02 F6 | 	mov	arg04, local03
2ab90     1F 98 C6 F0 | 	sar	arg04, #31
2ab94     55 97 02 F6 | 	mov	arg03, local03
2ab98     01 92 06 F6 | 	mov	arg01, #1
2ab9c     00 94 06 F6 | 	mov	arg02, #0
2aba0     44 C3 BF FD | 	call	#__system___int64_shl
2aba4     3D A7 02 F6 | 	mov	local01, result1
2aba8     3E B5 02 F6 | 	mov	local08, result2
2abac     56 99 02 F6 | 	mov	arg04, local04
2abb0     1F 98 C6 F0 | 	sar	arg04, #31
2abb4     56 97 02 F6 | 	mov	arg03, local04
2abb8     01 92 06 F6 | 	mov	arg01, #1
2abbc     00 94 06 F6 | 	mov	arg02, #0
2abc0     24 C3 BF FD | 	call	#__system___int64_shl
2abc4     3D A7 42 F5 | 	or	local01, result1
2abc8     3E B5 42 F5 | 	or	local08, result2
2abcc     57 99 02 F6 | 	mov	arg04, local05
2abd0     1F 98 C6 F0 | 	sar	arg04, #31
2abd4     57 97 02 F6 | 	mov	arg03, local05
2abd8     01 92 06 F6 | 	mov	arg01, #1
2abdc     00 94 06 F6 | 	mov	arg02, #0
2abe0     04 C3 BF FD | 	call	#__system___int64_shl
2abe4     3D A7 42 F5 | 	or	local01, result1
2abe8     3E B5 42 F5 | 	or	local08, result2
2abec     58 99 02 F6 | 	mov	arg04, local06
2abf0     1F 98 C6 F0 | 	sar	arg04, #31
2abf4     58 97 02 F6 | 	mov	arg03, local06
2abf8     01 92 06 F6 | 	mov	arg01, #1
2abfc     00 94 06 F6 | 	mov	arg02, #0
2ac00     E4 C2 BF FD | 	call	#__system___int64_shl
2ac04     5A 95 02 F6 | 	mov	arg02, local08
2ac08     3D A7 42 F5 | 	or	local01, result1
2ac0c     4A 7D 42 F5 | 	or	result2, arg02
2ac10     3E A9 02 F6 | 	mov	local02, result2
2ac14     53 93 02 F6 | 	mov	arg01, local01
2ac18     54 95 02 F6 | 	mov	arg02, local02
2ac1c     38 C3 BF FD | 	call	#__system___usepins
2ac20     00 7A 0E F2 | 	cmp	result1, #0 wz
2ac24     1C 00 90 5D |  if_ne	jmp	#LR__4340
2ac28     59 93 02 F6 | 	mov	arg01, local07
2ac2c     14 DC BF FD | 	call	#__system___gc_free
2ac30     20 68 06 F1 | 	add	ptr___system__dat__, #32
2ac34     34 2D 68 FC | 	wrlong	#22, ptr___system__dat__
2ac38     20 68 86 F1 | 	sub	ptr___system__dat__, #32
2ac3c     00 7A 06 F6 | 	mov	result1, #0
2ac40     5C 01 90 FD | 	jmp	#LR__4343
2ac44                 | LR__4340
2ac44     53 B7 02 F6 | 	mov	local09, local01
2ac48     54 9B 02 F6 | 	mov	arg05, local02
2ac4c     20 B2 06 F1 | 	add	local07, #32
2ac50     59 B7 62 FC | 	wrlong	local09, local07
2ac54     04 B2 06 F1 | 	add	local07, #4
2ac58     59 9B 62 FC | 	wrlong	arg05, local07
2ac5c     24 B2 86 F1 | 	sub	local07, #36
2ac60     57 99 02 F6 | 	mov	arg04, local05
2ac64     58 9B 02 F6 | 	mov	arg05, local06
2ac68     00 92 06 F6 | 	mov	arg01, #0
2ac6c     55 95 02 F6 | 	mov	arg02, local03
2ac70     56 97 02 F6 | 	mov	arg03, local04
2ac74     32 B9 02 F6 | 	mov	local10, objptr
2ac78     59 65 02 F6 | 	mov	objptr, local07
2ac7c     34 0F B0 FD | 	call	#_sdmm_cc_disk_setpins
2ac80     5C 65 02 F6 | 	mov	objptr, local10
2ac84     3D BB 0A F6 | 	mov	local11, result1 wz
2ac88     18 00 90 5D |  if_ne	jmp	#LR__4341
2ac8c     00 92 06 F6 | 	mov	arg01, #0
2ac90     32 BB 02 F6 | 	mov	local11, objptr
2ac94     59 65 02 F6 | 	mov	objptr, local07
2ac98     4C 03 B0 FD | 	call	#_sdmm_cc_disk_initialize
2ac9c     5D 65 02 F6 | 	mov	objptr, local11
2aca0     3D BB E2 F8 | 	getbyte	local11, result1, #0
2aca4                 | LR__4341
2aca4     00 BA 0E F2 | 	cmp	local11, #0 wz
2aca8     D0 00 90 5D |  if_ne	jmp	#LR__4342
2acac     64 E0 BF FD | 	call	#__system___get_vfs_file_handle
2acb0     3D BB 0A F6 | 	mov	local11, result1 wz
2acb4     C4 00 90 AD |  if_e	jmp	#LR__4342
2acb8     04 BA 06 F1 | 	add	local11, #4
2acbc     5D 05 58 FC | 	wrword	#2, local11
2acc0     02 BA 06 F1 | 	add	local11, #2
2acc4     5D 01 58 FC | 	wrword	#0, local11
2acc8     02 BA 06 F1 | 	add	local11, #2
2accc     40 00 80 FF 
2acd0     5D 07 68 FC | 	wrlong	##32771, local11
2acd4     59 7B 02 F6 | 	mov	result1, local07
2acd8     00 68 06 FF 
2acdc     00 7A 46 F5 | 	or	result1, ##214958080
2ace0     0C BA 06 F1 | 	add	local11, #12
2ace4     5D 7B 62 FC | 	wrlong	result1, local11
2ace8     59 7B 02 F6 | 	mov	result1, local07
2acec     00 70 06 FF 
2acf0     00 7A 46 F5 | 	or	result1, ##216006656
2acf4     04 BA 06 F1 | 	add	local11, #4
2acf8     5D 7B 62 FC | 	wrlong	result1, local11
2acfc     59 7B 02 F6 | 	mov	result1, local07
2ad00     00 78 06 FF 
2ad04     00 7A 46 F5 | 	or	result1, ##217055232
2ad08     0C BA 06 F1 | 	add	local11, #12
2ad0c     5D 7B 62 FC | 	wrlong	result1, local11
2ad10     59 7B 02 F6 | 	mov	result1, local07
2ad14     00 80 06 FF 
2ad18     00 7A 46 F5 | 	or	result1, ##218103808
2ad1c     04 BA 06 F1 | 	add	local11, #4
2ad20     5D 7B 62 FC | 	wrlong	result1, local11
2ad24     59 7B 02 F6 | 	mov	result1, local07
2ad28     00 88 06 FF 
2ad2c     00 7A 46 F5 | 	or	result1, ##219152384
2ad30     04 BA 06 F1 | 	add	local11, #4
2ad34     5D 7B 62 FC | 	wrlong	result1, local11
2ad38     59 7B 02 F6 | 	mov	result1, local07
2ad3c     00 90 06 FF 
2ad40     00 7A 46 F5 | 	or	result1, ##220200960
2ad44     04 BA 06 F1 | 	add	local11, #4
2ad48     5D 7B 62 FC | 	wrlong	result1, local11
2ad4c     59 7B 02 F6 | 	mov	result1, local07
2ad50     00 98 06 FF 
2ad54     00 7A 46 F5 | 	or	result1, ##221249536
2ad58     14 BA 86 F1 | 	sub	local11, #20
2ad5c     5D 7B 62 FC | 	wrlong	result1, local11
2ad60     00 A0 06 FF 
2ad64     00 B2 46 F5 | 	or	local07, ##222298112
2ad68     04 BA 06 F1 | 	add	local11, #4
2ad6c     5D B3 62 FC | 	wrlong	local07, local11
2ad70     20 BA 86 F1 | 	sub	local11, #32
2ad74     5D 7B 02 F6 | 	mov	result1, local11
2ad78     24 00 90 FD | 	jmp	#LR__4343
2ad7c                 | LR__4342
2ad7c     53 93 02 F6 | 	mov	arg01, local01
2ad80     54 95 02 F6 | 	mov	arg02, local02
2ad84     24 C2 BF FD | 	call	#__system___freepins
2ad88     59 93 02 F6 | 	mov	arg01, local07
2ad8c     B4 DA BF FD | 	call	#__system___gc_free
2ad90     20 68 06 F1 | 	add	ptr___system__dat__, #32
2ad94     34 19 68 FC | 	wrlong	#12, ptr___system__dat__
2ad98     20 68 86 F1 | 	sub	ptr___system__dat__, #32
2ad9c     00 7A 06 F6 | 	mov	result1, #0
2ada0                 | LR__4343
2ada0     E7 F0 03 F6 | 	mov	ptra, fp
2ada4     F2 00 A0 FD | 	call	#popregs_
2ada8                 | __system___sdmm_open_ret
2ada8     2D 00 64 FD | 	ret
2adac                 | 
2adac                 | __system____default_filbuf
2adac     05 CA 05 F6 | 	mov	COUNT_, #5
2adb0     E8 00 A0 FD | 	call	#pushregs_
2adb4     49 A7 02 F6 | 	mov	local01, arg01
2adb8     53 A9 02 FB | 	rdlong	local02, local01
2adbc     08 A8 06 F1 | 	add	local02, #8
2adc0     54 7B 0A FB | 	rdlong	result1, local02 wz
2adc4     08 A8 86 F1 | 	sub	local02, #8
2adc8     20 00 90 5D |  if_ne	jmp	#LR__4350
2adcc     10 A8 06 F1 | 	add	local02, #16
2add0     54 7B 02 F6 | 	mov	result1, local02
2add4     04 A8 86 F1 | 	sub	local02, #4
2add8     54 7B 62 FC | 	wrlong	result1, local02
2addc     04 A8 86 F1 | 	sub	local02, #4
2ade0     02 00 80 FF 
2ade4     54 01 68 FC | 	wrlong	##1024, local02
2ade8     08 A8 86 F1 | 	sub	local02, #8
2adec                 | LR__4350
2adec     14 A6 06 F1 | 	add	local01, #20
2adf0     53 AB 02 FB | 	rdlong	local03, local01
2adf4     55 AD 02 F6 | 	mov	local04, local03
2adf8     14 A6 86 F1 | 	sub	local01, #20
2adfc     13 AC 46 F7 | 	zerox	local04, #19
2ae00     14 AA 46 F0 | 	shr	local03, #20
2ae04     02 AA 66 F0 | 	shl	local03, #2
2ae08     2D AB 02 F1 | 	add	local03, __methods__
2ae0c     55 AB 02 FB | 	rdlong	local03, local03
2ae10     53 93 02 F6 | 	mov	arg01, local01
2ae14     0C A8 06 F1 | 	add	local02, #12
2ae18     54 95 02 FB | 	rdlong	arg02, local02
2ae1c     04 A8 86 F1 | 	sub	local02, #4
2ae20     54 97 02 FB | 	rdlong	arg03, local02
2ae24     08 A8 86 F1 | 	sub	local02, #8
2ae28     32 AF 02 F6 | 	mov	local05, objptr
2ae2c     56 65 02 F6 | 	mov	objptr, local04
2ae30     2D AA 62 FD | 	call	local03
2ae34     57 65 02 F6 | 	mov	objptr, local05
2ae38     3D AF 02 F6 | 	mov	local05, result1
2ae3c     00 AE 56 F2 | 	cmps	local05, #0 wc
2ae40     01 7A 66 C6 |  if_b	neg	result1, #1
2ae44     28 00 90 CD |  if_b	jmp	#LR__4351
2ae48     54 AF 62 FC | 	wrlong	local05, local02
2ae4c     0C A8 06 F1 | 	add	local02, #12
2ae50     54 AB 02 FB | 	rdlong	local03, local02
2ae54     08 A8 86 F1 | 	sub	local02, #8
2ae58     54 AB 62 FC | 	wrlong	local03, local02
2ae5c     08 A6 06 F1 | 	add	local01, #8
2ae60     53 AD 02 FB | 	rdlong	local04, local01
2ae64     04 AC 46 F5 | 	or	local04, #4
2ae68     53 AD 62 FC | 	wrlong	local04, local01
2ae6c     57 7B 02 F6 | 	mov	result1, local05
2ae70                 | LR__4351
2ae70     E7 F0 03 F6 | 	mov	ptra, fp
2ae74     F2 00 A0 FD | 	call	#popregs_
2ae78                 | __system____default_filbuf_ret
2ae78     2D 00 64 FD | 	ret
2ae7c                 | 
2ae7c                 | __system__getlower_1283
2ae7c     41 92 56 F2 | 	cmps	arg01, #65 wc
2ae80     10 00 90 CD |  if_b	jmp	#LR__4360
2ae84     5B 92 56 F2 | 	cmps	arg01, #91 wc
2ae88     49 7B 02 C6 |  if_b	mov	result1, arg01
2ae8c     20 7A 06 C1 |  if_b	add	result1, #32
2ae90     04 00 90 CD |  if_b	jmp	#__system__getlower_1283_ret
2ae94                 | LR__4360
2ae94     49 7B 02 F6 | 	mov	result1, arg01
2ae98                 | __system__getlower_1283_ret
2ae98     2D 00 64 FD | 	ret
2ae9c                 | 
2ae9c                 | __system___pat_match
2ae9c     07 CA 05 F6 | 	mov	COUNT_, #7
2aea0     E8 00 A0 FD | 	call	#pushregs_
2aea4     49 A7 02 F6 | 	mov	local01, arg01
2aea8                 | LR__4370
2aea8     4A 93 CA FA | 	rdbyte	arg01, arg02 wz
2aeac     53 A9 CA 5A |  if_ne	rdbyte	local02, local01 wz
2aeb0     49 AB 02 56 |  if_ne	mov	local03, arg01
2aeb4     2A AA 0E 52 |  if_ne	cmp	local03, #42 wz
2aeb8     2C 00 90 AD |  if_e	jmp	#LR__4371
2aebc     4A 93 C2 FA | 	rdbyte	arg01, arg02
2aec0     B8 FF BF FD | 	call	#__system__getlower_1283
2aec4     3D A9 02 F6 | 	mov	local02, result1
2aec8     53 93 C2 FA | 	rdbyte	arg01, local01
2aecc     AC FF BF FD | 	call	#__system__getlower_1283
2aed0     54 7B 0A F2 | 	cmp	result1, local02 wz
2aed4     00 7A 06 56 |  if_ne	mov	result1, #0
2aed8     00 01 90 5D |  if_ne	jmp	#LR__4380
2aedc     01 A6 06 F1 | 	add	local01, #1
2aee0     01 94 06 F1 | 	add	arg02, #1
2aee4     C0 FF 9F FD | 	jmp	#LR__4370
2aee8                 | LR__4371
2aee8     4A AB C2 FA | 	rdbyte	local03, arg02
2aeec     2A AA 0E F2 | 	cmp	local03, #42 wz
2aef0     D8 00 90 5D |  if_ne	jmp	#LR__4379
2aef4     01 94 06 F1 | 	add	arg02, #1
2aef8     4A AB C2 FA | 	rdbyte	local03, arg02
2aefc     01 94 86 F1 | 	sub	arg02, #1
2af00     2E AA 0E F2 | 	cmp	local03, #46 wz
2af04     28 00 90 5D |  if_ne	jmp	#LR__4372
2af08     02 94 06 F1 | 	add	arg02, #2
2af0c     4A AB C2 FA | 	rdbyte	local03, arg02
2af10     02 94 86 F1 | 	sub	arg02, #2
2af14     2A AA 0E F2 | 	cmp	local03, #42 wz
2af18     03 94 06 A1 |  if_e	add	arg02, #3
2af1c     4A AD C2 AA |  if_e	rdbyte	local04, arg02
2af20     03 94 86 A1 |  if_e	sub	arg02, #3
2af24     56 AF 0A A6 |  if_e	mov	local05, local04 wz
2af28     01 7A 06 A6 |  if_e	mov	result1, #1
2af2c     AC 00 90 AD |  if_e	jmp	#LR__4380
2af30                 | LR__4372
2af30     01 94 06 F1 | 	add	arg02, #1
2af34     00 B0 06 F6 | 	mov	local06, #0
2af38     D7 0E 48 FB | 	callpa	#(@LR__4374-@LR__4373)>>2,fcache_load_ptr_
2af3c                 | LR__4373
2af3c     58 A9 02 F6 | 	mov	local02, local06
2af40     4A A9 02 F1 | 	add	local02, arg02
2af44     54 AD CA FA | 	rdbyte	local04, local02 wz
2af48     58 AF 02 56 |  if_ne	mov	local05, local06
2af4c     01 AE 06 51 |  if_ne	add	local05, #1
2af50     57 B1 02 56 |  if_ne	mov	local06, local05
2af54     E4 FF 9F 5D |  if_ne	jmp	#LR__4373
2af58                 | LR__4374
2af58     00 B2 06 F6 | 	mov	local07, #0
2af5c     D7 0E 48 FB | 	callpa	#(@LR__4376-@LR__4375)>>2,fcache_load_ptr_
2af60                 | LR__4375
2af60     59 A9 02 F6 | 	mov	local02, local07
2af64     53 A9 02 F1 | 	add	local02, local01
2af68     54 AD CA FA | 	rdbyte	local04, local02 wz
2af6c     59 AF 02 56 |  if_ne	mov	local05, local07
2af70     01 AE 06 51 |  if_ne	add	local05, #1
2af74     57 B3 02 56 |  if_ne	mov	local07, local05
2af78     E4 FF 9F 5D |  if_ne	jmp	#LR__4375
2af7c                 | LR__4376
2af7c     58 B3 52 F2 | 	cmps	local07, local06 wc
2af80     00 7A 06 C6 |  if_b	mov	result1, #0
2af84     54 00 90 CD |  if_b	jmp	#LR__4380
2af88     59 AB 02 F6 | 	mov	local03, local07
2af8c     58 AB 82 F1 | 	sub	local03, local06
2af90     55 A7 02 F1 | 	add	local01, local03
2af94                 | LR__4377
2af94     01 B0 56 F2 | 	cmps	local06, #1 wc
2af98     30 00 90 CD |  if_b	jmp	#LR__4378
2af9c     53 93 C2 FA | 	rdbyte	arg01, local01
2afa0     D8 FE BF FD | 	call	#__system__getlower_1283
2afa4     3D B3 02 F6 | 	mov	local07, result1
2afa8     4A 93 C2 FA | 	rdbyte	arg01, arg02
2afac     CC FE BF FD | 	call	#__system__getlower_1283
2afb0     3D B3 0A F2 | 	cmp	local07, result1 wz
2afb4     00 7A 06 56 |  if_ne	mov	result1, #0
2afb8     20 00 90 5D |  if_ne	jmp	#LR__4380
2afbc     01 A6 06 F1 | 	add	local01, #1
2afc0     01 94 06 F1 | 	add	arg02, #1
2afc4     01 B0 86 F1 | 	sub	local06, #1
2afc8     C8 FF 9F FD | 	jmp	#LR__4377
2afcc                 | LR__4378
2afcc                 | LR__4379
2afcc     4A B3 CA FA | 	rdbyte	local07, arg02 wz
2afd0     53 A9 CA AA |  if_e	rdbyte	local02, local01 wz
2afd4     01 7A 06 A6 |  if_e	mov	result1, #1
2afd8     00 7A 06 56 |  if_ne	mov	result1, #0
2afdc                 | LR__4380
2afdc     E7 F0 03 F6 | 	mov	ptra, fp
2afe0     F2 00 A0 FD | 	call	#popregs_
2afe4                 | __system___pat_match_ret
2afe4     2D 00 64 FD | 	ret
2afe8                 | 
2afe8                 | _sdmm_cc_disk_initialize
2afe8     0F CA 05 F6 | 	mov	COUNT_, #15
2afec     E8 00 A0 FD | 	call	#pushregs_
2aff0     49 A7 0A F6 | 	mov	local01, arg01 wz
2aff4     F8 A9 02 F6 | 	mov	local02, ptra
2aff8     32 AB 02 FB | 	rdlong	local03, objptr
2affc     04 64 06 F1 | 	add	objptr, #4
2b000     32 AD 02 FB | 	rdlong	local04, objptr
2b004     04 64 06 F1 | 	add	objptr, #4
2b008     32 AF 02 FB | 	rdlong	local05, objptr
2b00c     04 64 06 F1 | 	add	objptr, #4
2b010     32 B1 02 FB | 	rdlong	local06, objptr
2b014     08 64 06 F1 | 	add	objptr, #8
2b018     32 03 48 FC | 	wrbyte	#1, objptr
2b01c     14 64 86 F1 | 	sub	objptr, #20
2b020                 | ' #line 539 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/block/sdmm.cc"
2b020                 | ' 		return RES_NOTRDY;
2b020     0C F0 07 F1 | 	add	ptra, #12
2b024     03 7A 06 56 |  if_ne	mov	result1, #3
2b028     68 04 90 5D |  if_ne	jmp	#LR__4410
2b02c     13 00 00 FF 
2b030     10 93 06 F6 | 	mov	arg01, ##10000
2b034     30 A0 BF FD | 	call	#__system___waitus
2b038     55 99 02 F6 | 	mov	arg04, local03
2b03c     57 99 82 F1 | 	sub	arg04, local05
2b040     4C 99 42 F6 | 	abs	arg04, arg04
2b044     04 98 56 F2 | 	cmps	arg04, #4 wc
2b048     04 7A 06 36 |  if_ae	mov	result1, #4
2b04c     44 04 90 3D |  if_ae	jmp	#LR__4410
2b050     55 B3 02 F6 | 	mov	local07, local03
2b054     58 B3 82 F1 | 	sub	local07, local06
2b058     59 B3 42 F6 | 	abs	local07, local07
2b05c     04 B2 56 F2 | 	cmps	local07, #4 wc
2b060     34 00 90 3D |  if_ae	jmp	#LR__4390
2b064     55 B5 02 F6 | 	mov	local08, local03
2b068     58 B5 82 F1 | 	sub	local08, local06
2b06c     07 B4 06 F5 | 	and	local08, #7
2b070     18 B4 66 F0 | 	shl	local08, #24
2b074     29 00 00 FF 
2b078     7A B4 46 F5 | 	or	local08, ##21114
2b07c     58 B7 02 F6 | 	mov	local09, local06
2b080     0C 64 06 F1 | 	add	objptr, #12
2b084     32 B7 62 FC | 	wrlong	local09, objptr
2b088     04 64 06 F1 | 	add	objptr, #4
2b08c     32 B7 62 FC | 	wrlong	local09, objptr
2b090     10 64 86 F1 | 	sub	objptr, #16
2b094     A4 00 90 FD | 	jmp	#LR__4393
2b098                 | LR__4390
2b098     58 AB 5A F2 | 	cmps	local03, local06 wcz
2b09c     28 00 90 ED |  if_be	jmp	#LR__4391
2b0a0     55 B7 02 F6 | 	mov	local09, local03
2b0a4     03 B6 86 F1 | 	sub	local09, #3
2b0a8     57 B7 0A F2 | 	cmp	local09, local05 wz
2b0ac     56 B7 0A 52 |  if_ne	cmp	local09, local04 wz
2b0b0     01 B6 06 A1 |  if_e	add	local09, #1
2b0b4     57 B7 0A F2 | 	cmp	local09, local05 wz
2b0b8     56 B7 0A 52 |  if_ne	cmp	local09, local04 wz
2b0bc     28 00 90 5D |  if_ne	jmp	#LR__4392
2b0c0     01 B6 06 F1 | 	add	local09, #1
2b0c4     20 00 90 FD | 	jmp	#LR__4392
2b0c8                 | LR__4391
2b0c8     55 B7 02 F6 | 	mov	local09, local03
2b0cc     03 B6 06 F1 | 	add	local09, #3
2b0d0     57 B7 0A F2 | 	cmp	local09, local05 wz
2b0d4     56 B7 0A 52 |  if_ne	cmp	local09, local04 wz
2b0d8     01 B6 86 A1 |  if_e	sub	local09, #1
2b0dc     57 B7 0A F2 | 	cmp	local09, local05 wz
2b0e0     56 B7 0A 52 |  if_ne	cmp	local09, local04 wz
2b0e4     01 B6 86 A1 |  if_e	sub	local09, #1
2b0e8                 | LR__4392
2b0e8     58 B3 02 F6 | 	mov	local07, local06
2b0ec     5B B3 82 F1 | 	sub	local07, local09
2b0f0     59 B3 42 F6 | 	abs	local07, local07
2b0f4     04 B2 56 F2 | 	cmps	local07, #4 wc
2b0f8     04 7A 06 36 |  if_ae	mov	result1, #4
2b0fc     94 03 90 3D |  if_ae	jmp	#LR__4410
2b100     58 B5 02 F6 | 	mov	local08, local06
2b104     5B B5 82 F1 | 	sub	local08, local09
2b108     07 B4 06 F5 | 	and	local08, #7
2b10c     1C B4 66 F0 | 	shl	local08, #28
2b110     55 B3 02 F6 | 	mov	local07, local03
2b114     5B B3 82 F1 | 	sub	local07, local09
2b118     07 B2 06 F5 | 	and	local07, #7
2b11c     18 B2 66 F0 | 	shl	local07, #24
2b120     59 B5 42 F5 | 	or	local08, local07
2b124     3A B4 46 F5 | 	or	local08, #58
2b128     10 64 06 F1 | 	add	objptr, #16
2b12c     32 B1 62 FC | 	wrlong	local06, objptr
2b130     04 64 86 F1 | 	sub	objptr, #4
2b134     32 B7 62 FC | 	wrlong	local09, objptr
2b138     0C 64 86 F1 | 	sub	objptr, #12
2b13c                 | LR__4393
2b13c     56 01 08 FC | 	wrpin	#0, local04
2b140     59 AC 62 FD | 	drvh	local04
2b144     00 08 00 FF 
2b148     20 B8 06 F6 | 	mov	local10, ##1048608
2b14c     40 AA 62 FD | 	dirl	local03
2b150     A0 03 80 FF 
2b154     55 91 08 FC | 	wrpin	##475208, local03
2b158     00 08 80 FF 
2b15c     55 41 18 FC | 	wxpin	##1048608, local03
2b160     55 01 28 FC | 	wypin	#0, local03
2b164     41 AA 62 FD | 	dirh	local03
2b168     55 B3 02 F6 | 	mov	local07, local03
2b16c     57 B3 82 F1 | 	sub	local07, local05
2b170     07 B2 06 F5 | 	and	local07, #7
2b174     18 B2 66 F0 | 	shl	local07, #24
2b178     78 BA 06 F6 | 	mov	local11, #120
2b17c     59 BB 42 F5 | 	or	local11, local07
2b180     5D 95 02 F6 | 	mov	arg02, local11
2b184     10 94 26 F4 | 	bith	arg02, #16
2b188     40 AE 62 FD | 	dirl	local05
2b18c     57 95 02 FC | 	wrpin	arg02, local05
2b190     57 3F 18 FC | 	wxpin	#31, local05
2b194     FF FF FF FF 
2b198     57 FF 2B FC | 	wypin	##-1, local05
2b19c     41 AE 62 FD | 	dirh	local05
2b1a0     29 00 80 FF 
2b1a4     58 01 08 FC | 	wrpin	##20992, local06
2b1a8     40 B6 62 FD | 	dirl	local09
2b1ac     5B B5 02 FC | 	wrpin	local08, local09
2b1b0     5B 4F 18 FC | 	wxpin	#39, local09
2b1b4     5B 01 28 FC | 	wypin	#0, local09
2b1b8     41 B6 62 FD | 	dirh	local09
2b1bc     54 93 02 F6 | 	mov	arg01, local02
2b1c0     0A 94 06 F6 | 	mov	arg02, #10
2b1c4     5C 06 B0 FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b1c8     00 92 06 F6 | 	mov	arg01, #0
2b1cc     00 94 06 F6 | 	mov	arg02, #0
2b1d0     D4 08 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b1d4     20 07 B0 FD | 	call	#_sdmm_cc_deselect_0858
2b1d8     64 92 06 F6 | 	mov	arg01, #100
2b1dc     88 9E BF FD | 	call	#__system___waitus
2b1e0     54 93 02 F6 | 	mov	arg01, local02
2b1e4     0A 94 06 F6 | 	mov	arg02, #10
2b1e8     38 06 B0 FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b1ec     00 BC 06 F6 | 	mov	local12, #0
2b1f0     00 92 06 F6 | 	mov	arg01, #0
2b1f4     00 94 06 F6 | 	mov	arg02, #0
2b1f8     AC 08 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b1fc     3D B3 E2 F8 | 	getbyte	local07, result1, #0
2b200     01 B2 0E F2 | 	cmp	local07, #1 wz
2b204     5C 02 90 5D |  if_ne	jmp	#LR__4409
2b208     08 92 06 F6 | 	mov	arg01, #8
2b20c     AA 95 06 F6 | 	mov	arg02, #426
2b210     94 08 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b214     3D 7B E2 F8 | 	getbyte	result1, result1, #0
2b218     01 7A 0E F2 | 	cmp	result1, #1 wz
2b21c     30 01 90 5D |  if_ne	jmp	#LR__4398
2b220     54 93 02 F6 | 	mov	arg01, local02
2b224     04 94 06 F6 | 	mov	arg02, #4
2b228     F8 05 B0 FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b22c     02 A8 06 F1 | 	add	local02, #2
2b230     54 B3 C2 FA | 	rdbyte	local07, local02
2b234     02 A8 86 F1 | 	sub	local02, #2
2b238     01 B2 0E F2 | 	cmp	local07, #1 wz
2b23c     03 A8 06 A1 |  if_e	add	local02, #3
2b240     54 BF C2 AA |  if_e	rdbyte	local13, local02
2b244     03 A8 86 A1 |  if_e	sub	local02, #3
2b248     AA BE 0E A2 |  if_e	cmp	local13, #170 wz
2b24c     14 02 90 5D |  if_ne	jmp	#LR__4408
2b250                 | ' 				for (tmr = 1000; tmr; tmr--) {
2b250     01 00 00 FF 
2b254     E8 C1 06 F6 | 	mov	local14, ##1000
2b258                 | LR__4394
2b258     A9 92 06 F6 | 	mov	arg01, #169
2b25c     1E 94 C6 F9 | 	decod	arg02, #30
2b260     44 08 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b264     3D B3 02 F6 | 	mov	local07, result1
2b268     07 B2 4E F7 | 	zerox	local07, #7 wz
2b26c     18 00 90 AD |  if_e	jmp	#LR__4395
2b270     01 00 00 FF 
2b274     E8 93 06 F6 | 	mov	arg01, ##1000
2b278     EC 9D BF FD | 	call	#__system___waitus
2b27c     60 B3 02 F6 | 	mov	local07, local14
2b280     01 C0 8E F1 | 	sub	local14, #1 wz
2b284     D0 FF 9F 5D |  if_ne	jmp	#LR__4394
2b288                 | LR__4395
2b288     00 C0 0E F2 | 	cmp	local14, #0 wz
2b28c     38 00 90 AD |  if_e	jmp	#LR__4396
2b290     3A 92 06 F6 | 	mov	arg01, #58
2b294     00 94 06 F6 | 	mov	arg02, #0
2b298     0C 08 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b29c     3D B3 02 F6 | 	mov	local07, result1
2b2a0     07 B2 4E F7 | 	zerox	local07, #7 wz
2b2a4     20 00 90 5D |  if_ne	jmp	#LR__4396
2b2a8     54 93 02 F6 | 	mov	arg01, local02
2b2ac     04 94 06 F6 | 	mov	arg02, #4
2b2b0     70 05 B0 FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b2b4     54 C1 C2 FA | 	rdbyte	local14, local02
2b2b8     40 C0 CE F7 | 	test	local14, #64 wz
2b2bc     0C B2 06 56 |  if_ne	mov	local07, #12
2b2c0     04 B2 06 A6 |  if_e	mov	local07, #4
2b2c4     59 BD 02 F6 | 	mov	local12, local07
2b2c8                 | LR__4396
2b2c8     14 C0 06 FB | 	rdlong	local14, #20
2b2cc     F0 FA 02 FF 
2b2d0     01 C1 16 F2 | 	cmp	local14, ##100000001 wc
2b2d4     5D B3 02 C6 |  if_b	mov	local07, local11
2b2d8     1B B2 26 C4 |  if_b	bith	local07, #27
2b2dc     59 BB 02 C6 |  if_b	mov	local11, local07
2b2e0     10 00 90 CD |  if_b	jmp	#LR__4397
2b2e4     E1 F5 05 FF 
2b2e8     01 C0 16 F2 | 	cmp	local14, ##200000001 wc
2b2ec     80 00 04 CF 
2b2f0     00 BA 46 C5 |  if_b	or	local11, ##134283264
2b2f4                 | LR__4397
2b2f4     F0 FA 02 FF 
2b2f8     01 C1 16 F2 | 	cmp	local14, ##100000001 wc
2b2fc     00 01 00 CF 
2b300     04 B8 06 C6 |  if_b	mov	local10, ##131076
2b304     5C 01 90 CD |  if_b	jmp	#LR__4408
2b308     68 78 04 FF 
2b30c     81 C1 16 F2 | 	cmp	local14, ##150000001 wc
2b310     80 01 00 CF 
2b314     06 B8 06 C6 |  if_b	mov	local10, ##196614
2b318     48 01 90 CD |  if_b	jmp	#LR__4408
2b31c     E1 F5 05 FF 
2b320     01 C0 16 F2 | 	cmp	local14, ##200000001 wc
2b324     00 02 00 CF 
2b328     08 B8 06 C6 |  if_b	mov	local10, ##262152
2b32c     34 01 90 CD |  if_b	jmp	#LR__4408
2b330     59 73 07 FF 
2b334     81 C0 16 F2 | 	cmp	local14, ##250000001 wc
2b338     80 02 00 CF 
2b33c     0A B8 06 C6 |  if_b	mov	local10, ##327690
2b340     20 01 90 CD |  if_b	jmp	#LR__4408
2b344     00 03 00 FF 
2b348     0C B8 06 F6 | 	mov	local10, ##393228
2b34c     14 01 90 FD | 	jmp	#LR__4408
2b350                 | LR__4398
2b350     A9 92 06 F6 | 	mov	arg01, #169
2b354     00 94 06 F6 | 	mov	arg02, #0
2b358     4C 07 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b35c     3D B3 E2 F8 | 	getbyte	local07, result1, #0
2b360     02 B2 16 F2 | 	cmp	local07, #2 wc
2b364     02 BC 06 C6 |  if_b	mov	local12, #2
2b368     A9 C2 06 C6 |  if_b	mov	local15, #169
2b36c     01 BC 06 36 |  if_ae	mov	local12, #1
2b370     01 C2 06 36 |  if_ae	mov	local15, #1
2b374                 | ' 				ty =  0x01 ; cmd =  (1) ;
2b374                 | ' 			}
2b374                 | ' 			for (tmr = 1000; tmr; tmr--) {
2b374     01 00 00 FF 
2b378     E8 C1 06 F6 | 	mov	local14, ##1000
2b37c                 | LR__4399
2b37c     61 93 02 F6 | 	mov	arg01, local15
2b380     00 94 06 F6 | 	mov	arg02, #0
2b384     20 07 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b388     3D B3 02 F6 | 	mov	local07, result1
2b38c     07 B2 4E F7 | 	zerox	local07, #7 wz
2b390     18 00 90 AD |  if_e	jmp	#LR__4400
2b394     01 00 00 FF 
2b398     E8 93 06 F6 | 	mov	arg01, ##1000
2b39c     C8 9C BF FD | 	call	#__system___waitus
2b3a0     60 B3 02 F6 | 	mov	local07, local14
2b3a4     01 C0 8E F1 | 	sub	local14, #1 wz
2b3a8     D0 FF 9F 5D |  if_ne	jmp	#LR__4399
2b3ac                 | LR__4400
2b3ac     00 C0 0E F2 | 	cmp	local14, #0 wz
2b3b0     18 00 90 AD |  if_e	jmp	#LR__4401
2b3b4     10 92 06 F6 | 	mov	arg01, #16
2b3b8     09 94 C6 F9 | 	decod	arg02, #9
2b3bc     E8 06 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b3c0     3D B3 02 F6 | 	mov	local07, result1
2b3c4     07 B2 4E F7 | 	zerox	local07, #7 wz
2b3c8     04 00 90 AD |  if_e	jmp	#LR__4402
2b3cc                 | LR__4401
2b3cc     00 BC 06 F6 | 	mov	local12, #0
2b3d0                 | LR__4402
2b3d0     14 C0 06 FB | 	rdlong	local14, #20
2b3d4     F0 FA 02 FF 
2b3d8     01 C1 16 F2 | 	cmp	local14, ##100000001 wc
2b3dc     5D B3 02 C6 |  if_b	mov	local07, local11
2b3e0     1B B2 26 C4 |  if_b	bith	local07, #27
2b3e4     59 BB 02 C6 |  if_b	mov	local11, local07
2b3e8     10 00 90 CD |  if_b	jmp	#LR__4403
2b3ec     E1 F5 05 FF 
2b3f0     01 C0 16 F2 | 	cmp	local14, ##200000001 wc
2b3f4     80 00 04 CF 
2b3f8     00 BA 46 C5 |  if_b	or	local11, ##134283264
2b3fc                 | LR__4403
2b3fc     F0 FA 02 FF 
2b400     01 C1 16 F2 | 	cmp	local14, ##100000001 wc
2b404     00 01 00 CF 
2b408     04 B8 06 C6 |  if_b	mov	local10, ##131076
2b40c     54 00 90 CD |  if_b	jmp	#LR__4407
2b410     68 78 04 FF 
2b414     81 C1 16 F2 | 	cmp	local14, ##150000001 wc
2b418     80 01 00 CF 
2b41c     06 B8 06 C6 |  if_b	mov	local10, ##196614
2b420     40 00 90 CD |  if_b	jmp	#LR__4406
2b424     E1 F5 05 FF 
2b428     01 C0 16 F2 | 	cmp	local14, ##200000001 wc
2b42c     00 02 00 CF 
2b430     08 B8 06 C6 |  if_b	mov	local10, ##262152
2b434     2C 00 90 CD |  if_b	jmp	#LR__4405
2b438     59 73 07 FF 
2b43c     81 C0 16 F2 | 	cmp	local14, ##250000001 wc
2b440     80 02 00 CF 
2b444     0A B8 06 C6 |  if_b	mov	local10, ##327690
2b448     18 00 90 CD |  if_b	jmp	#LR__4404
2b44c     D1 F0 08 FF 
2b450     01 C1 16 F2 | 	cmp	local14, ##300000001 wc
2b454     00 03 00 CF 
2b458     0C B8 06 C6 |  if_b	mov	local10, ##393228
2b45c     80 03 00 3F 
2b460     0E B8 06 36 |  if_ae	mov	local10, ##458766
2b464                 | LR__4404
2b464                 | LR__4405
2b464                 | LR__4406
2b464                 | LR__4407
2b464                 | LR__4408
2b464                 | LR__4409
2b464     15 64 06 F1 | 	add	objptr, #21
2b468     32 BD 42 FC | 	wrbyte	local12, objptr
2b46c     00 BC 0E F2 | 	cmp	local12, #0 wz
2b470     00 B2 06 56 |  if_ne	mov	local07, #0
2b474     01 B2 06 A6 |  if_e	mov	local07, #1
2b478     01 64 86 F1 | 	sub	objptr, #1
2b47c     32 B3 42 FC | 	wrbyte	local07, objptr
2b480     14 64 86 F1 | 	sub	objptr, #20
2b484     70 04 B0 FD | 	call	#_sdmm_cc_deselect_0858
2b488     55 B9 12 FC | 	wxpin	local10, local03
2b48c     57 BB 02 FC | 	wrpin	local11, local05
2b490                 | ' #line 682 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/block/sdmm.cc"
2b490                 | ' 		}
2b490                 | ' 	}
2b490                 | ' #line 687 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/block/sdmm.cc"
2b490                 | ' 	CardType = ty;
2b490                 | ' 	s = ty ? 0 :  0x01 ;
2b490                 | ' 	Stat = s;
2b490                 | ' 
2b490                 | ' 	deselect();
2b490                 | ' 
2b490                 | ' 
2b490                 | ' 	_wxpin( PIN_CLK, ck_div );
2b490                 | ' 	_wrpin( PIN_DI, spm_tx );
2b490                 | ' #line 700 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/block/sdmm.cc"
2b490                 | ' 	return s;
2b490     59 7B 02 F6 | 	mov	result1, local07
2b494                 | LR__4410
2b494     E7 F0 03 F6 | 	mov	ptra, fp
2b498     F2 00 A0 FD | 	call	#popregs_
2b49c                 | _sdmm_cc_disk_initialize_ret
2b49c     2D 00 64 FD | 	ret
2b4a0                 | 
2b4a0                 | _sdmm_cc_disk_read
2b4a0     05 CA 05 F6 | 	mov	COUNT_, #5
2b4a4     E8 00 A0 FD | 	call	#pushregs_
2b4a8     4A A7 02 F6 | 	mov	local01, arg02
2b4ac     4B A9 02 F6 | 	mov	local02, arg03
2b4b0     4C AB 02 F6 | 	mov	local03, arg04
2b4b4     00 92 0E F2 | 	cmp	arg01, #0 wz
2b4b8     01 7A 06 56 |  if_ne	mov	result1, #1
2b4bc                 | ' 
2b4bc                 | ' 	return Stat;
2b4bc     14 64 06 A1 |  if_e	add	objptr, #20
2b4c0     32 7B C2 AA |  if_e	rdbyte	result1, objptr
2b4c4     14 64 86 A1 |  if_e	sub	objptr, #20
2b4c8     3D 7B E2 F8 | 	getbyte	result1, result1, #0
2b4cc     01 7A CE F7 | 	test	result1, #1 wz
2b4d0     03 7A 06 56 |  if_ne	mov	result1, #3
2b4d4     7C 00 90 5D |  if_ne	jmp	#LR__4422
2b4d8     15 64 06 F1 | 	add	objptr, #21
2b4dc     32 AD C2 FA | 	rdbyte	local04, objptr
2b4e0     15 64 86 F1 | 	sub	objptr, #21
2b4e4     08 AC CE F7 | 	test	local04, #8 wz
2b4e8     09 A8 66 A0 |  if_e	shl	local02, #9
2b4ec     02 AA 16 F2 | 	cmp	local03, #2 wc
2b4f0     12 AC 06 36 |  if_ae	mov	local04, #18
2b4f4     11 AC 06 C6 |  if_b	mov	local04, #17
2b4f8     54 95 02 F6 | 	mov	arg02, local02
2b4fc     56 93 02 F6 | 	mov	arg01, local04
2b500     A4 05 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b504     3D AF 02 F6 | 	mov	local05, result1
2b508     07 AE 4E F7 | 	zerox	local05, #7 wz
2b50c     30 00 90 5D |  if_ne	jmp	#LR__4421
2b510                 | ' 		do {
2b510                 | LR__4420
2b510     53 93 02 F6 | 	mov	arg01, local01
2b514     09 94 C6 F9 | 	decod	arg02, #9
2b518     7C 04 B0 FD | 	call	#_sdmm_cc_rcvr_datablock_0866
2b51c     00 7A 0E F2 | 	cmp	result1, #0 wz
2b520     01 00 00 5F 
2b524     00 A6 06 51 |  if_ne	add	local01, ##512
2b528     F9 AB 6E 5B |  if_ne	djnz	local03, #LR__4420
2b52c     56 AD E2 F8 | 	getbyte	local04, local04, #0
2b530     12 AC 0E F2 | 	cmp	local04, #18 wz
2b534     0C 92 06 A6 |  if_e	mov	arg01, #12
2b538     00 94 06 A6 |  if_e	mov	arg02, #0
2b53c     68 05 B0 AD |  if_e	call	#_sdmm_cc_send_cmd_0871
2b540                 | LR__4421
2b540     B4 03 B0 FD | 	call	#_sdmm_cc_deselect_0858
2b544                 | ' 	}
2b544                 | ' 	deselect();
2b544                 | ' 
2b544                 | ' 	return count ? RES_ERROR : RES_OK;
2b544     00 AA 0E F2 | 	cmp	local03, #0 wz
2b548     01 AE 06 56 |  if_ne	mov	local05, #1
2b54c     00 AE 06 A6 |  if_e	mov	local05, #0
2b550     57 7B 02 F6 | 	mov	result1, local05
2b554                 | LR__4422
2b554     E7 F0 03 F6 | 	mov	ptra, fp
2b558     F2 00 A0 FD | 	call	#popregs_
2b55c                 | _sdmm_cc_disk_read_ret
2b55c     2D 00 64 FD | 	ret
2b560                 | 
2b560                 | _sdmm_cc_disk_write
2b560     04 CA 05 F6 | 	mov	COUNT_, #4
2b564     E8 00 A0 FD | 	call	#pushregs_
2b568     4A A7 02 F6 | 	mov	local01, arg02
2b56c     4C A9 02 F6 | 	mov	local02, arg04
2b570     4B AB 02 F6 | 	mov	local03, arg03
2b574     00 92 0E F2 | 	cmp	arg01, #0 wz
2b578     01 7A 06 56 |  if_ne	mov	result1, #1
2b57c                 | ' 
2b57c                 | ' 	return Stat;
2b57c     14 64 06 A1 |  if_e	add	objptr, #20
2b580     32 7B C2 AA |  if_e	rdbyte	result1, objptr
2b584     14 64 86 A1 |  if_e	sub	objptr, #20
2b588     3D 7B E2 F8 | 	getbyte	result1, result1, #0
2b58c     01 7A CE F7 | 	test	result1, #1 wz
2b590     03 7A 06 56 |  if_ne	mov	result1, #3
2b594     C4 00 90 5D |  if_ne	jmp	#LR__4434
2b598     15 64 06 F1 | 	add	objptr, #21
2b59c     32 97 C2 FA | 	rdbyte	arg03, objptr
2b5a0     15 64 86 F1 | 	sub	objptr, #21
2b5a4     08 96 CE F7 | 	test	arg03, #8 wz
2b5a8     09 AA 66 A0 |  if_e	shl	local03, #9
2b5ac     01 A8 0E F2 | 	cmp	local02, #1 wz
2b5b0     30 00 90 5D |  if_ne	jmp	#LR__4430
2b5b4     18 92 06 F6 | 	mov	arg01, #24
2b5b8     55 95 02 F6 | 	mov	arg02, local03
2b5bc     E8 04 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b5c0     3D AD 02 F6 | 	mov	local04, result1
2b5c4     07 AC 4E F7 | 	zerox	local04, #7 wz
2b5c8     7C 00 90 5D |  if_ne	jmp	#LR__4433
2b5cc     53 93 02 F6 | 	mov	arg01, local01
2b5d0     FE 94 06 F6 | 	mov	arg02, #254
2b5d4     44 04 B0 FD | 	call	#_sdmm_cc_xmit_datablock_0868
2b5d8     00 7A 0E F2 | 	cmp	result1, #0 wz
2b5dc     00 A8 06 56 |  if_ne	mov	local02, #0
2b5e0     64 00 90 FD | 	jmp	#LR__4433
2b5e4                 | LR__4430
2b5e4     15 64 06 F1 | 	add	objptr, #21
2b5e8     32 AD C2 FA | 	rdbyte	local04, objptr
2b5ec     15 64 86 F1 | 	sub	objptr, #21
2b5f0     06 AC CE F7 | 	test	local04, #6 wz
2b5f4     97 92 06 56 |  if_ne	mov	arg01, #151
2b5f8     54 95 02 56 |  if_ne	mov	arg02, local02
2b5fc     A8 04 B0 5D |  if_ne	call	#_sdmm_cc_send_cmd_0871
2b600     55 95 02 F6 | 	mov	arg02, local03
2b604     19 92 06 F6 | 	mov	arg01, #25
2b608     9C 04 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b60c     3D AD 02 F6 | 	mov	local04, result1
2b610     07 AC 4E F7 | 	zerox	local04, #7 wz
2b614     30 00 90 5D |  if_ne	jmp	#LR__4432
2b618                 | ' 			do {
2b618                 | LR__4431
2b618     53 93 02 F6 | 	mov	arg01, local01
2b61c     FC 94 06 F6 | 	mov	arg02, #252
2b620     F8 03 B0 FD | 	call	#_sdmm_cc_xmit_datablock_0868
2b624     00 7A 0E F2 | 	cmp	result1, #0 wz
2b628     01 00 00 5F 
2b62c     00 A6 06 51 |  if_ne	add	local01, ##512
2b630     F9 A9 6E 5B |  if_ne	djnz	local02, #LR__4431
2b634     00 92 06 F6 | 	mov	arg01, #0
2b638     FD 94 06 F6 | 	mov	arg02, #253
2b63c     DC 03 B0 FD | 	call	#_sdmm_cc_xmit_datablock_0868
2b640     00 7A 0E F2 | 	cmp	result1, #0 wz
2b644     01 A8 06 A6 |  if_e	mov	local02, #1
2b648                 | LR__4432
2b648                 | LR__4433
2b648     AC 02 B0 FD | 	call	#_sdmm_cc_deselect_0858
2b64c                 | ' 				count = 1;
2b64c                 | ' 		}
2b64c                 | ' 	}
2b64c                 | ' 	deselect();
2b64c                 | ' 
2b64c                 | ' 	return count ? RES_ERROR : RES_OK;
2b64c     00 A8 0E F2 | 	cmp	local02, #0 wz
2b650     01 AC 06 56 |  if_ne	mov	local04, #1
2b654     00 AC 06 A6 |  if_e	mov	local04, #0
2b658     56 7B 02 F6 | 	mov	result1, local04
2b65c                 | LR__4434
2b65c     E7 F0 03 F6 | 	mov	ptra, fp
2b660     F2 00 A0 FD | 	call	#popregs_
2b664                 | _sdmm_cc_disk_write_ret
2b664     2D 00 64 FD | 	ret
2b668                 | 
2b668                 | _sdmm_cc_disk_ioctl
2b668     06 CA 05 F6 | 	mov	COUNT_, #6
2b66c     E8 00 A0 FD | 	call	#pushregs_
2b670     30 F0 07 F1 | 	add	ptra, #48
2b674     4A A7 02 F6 | 	mov	local01, arg02
2b678     4B A9 02 F6 | 	mov	local02, arg03
2b67c     00 92 0E F2 | 	cmp	arg01, #0 wz
2b680     01 7A 06 56 |  if_ne	mov	result1, #1
2b684                 | ' 
2b684                 | ' 	return Stat;
2b684     14 64 06 A1 |  if_e	add	objptr, #20
2b688     32 7B C2 AA |  if_e	rdbyte	result1, objptr
2b68c     14 64 86 A1 |  if_e	sub	objptr, #20
2b690     3D 7B E2 F8 | 	getbyte	result1, result1, #0
2b694     01 7A CE F7 | 	test	result1, #1 wz
2b698     03 7A 06 56 |  if_ne	mov	result1, #3
2b69c     F4 00 90 5D |  if_ne	jmp	#LR__4447
2b6a0     01 AA 06 F6 | 	mov	local03, #1
2b6a4                 | ' 
2b6a4                 | ' 	res = RES_ERROR;
2b6a4                 | ' 	switch (ctrl) {
2b6a4     53 AD E2 F8 | 	getbyte	local04, local01, #0
2b6a8     04 AC 26 F3 | 	fle	local04, #4
2b6ac     30 AC 62 FD | 	jmprel	local04
2b6b0                 | LR__4440
2b6b0     10 00 90 FD | 	jmp	#LR__4441
2b6b4     1C 00 90 FD | 	jmp	#LR__4442
2b6b8     CC 00 90 FD | 	jmp	#LR__4445
2b6bc     BC 00 90 FD | 	jmp	#LR__4444
2b6c0     C4 00 90 FD | 	jmp	#LR__4445
2b6c4                 | LR__4441
2b6c4     6C 02 B0 FD | 	call	#_sdmm_cc_select_0862
2b6c8     00 7A 0E F2 | 	cmp	result1, #0 wz
2b6cc     00 AA 06 56 |  if_ne	mov	local03, #0
2b6d0                 | ' 			break;
2b6d0     B8 00 90 FD | 	jmp	#LR__4446
2b6d4                 | LR__4442
2b6d4     09 92 06 F6 | 	mov	arg01, #9
2b6d8     00 94 06 F6 | 	mov	arg02, #0
2b6dc     C8 03 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b6e0     3D AD 02 F6 | 	mov	local04, result1
2b6e4     07 AC 4E F7 | 	zerox	local04, #7 wz
2b6e8     A0 00 90 5D |  if_ne	jmp	#LR__4446
2b6ec     E7 92 02 F6 | 	mov	arg01, fp
2b6f0     18 92 06 F1 | 	add	arg01, #24
2b6f4     10 94 06 F6 | 	mov	arg02, #16
2b6f8     9C 02 B0 FD | 	call	#_sdmm_cc_rcvr_datablock_0866
2b6fc     00 7A 0E F2 | 	cmp	result1, #0 wz
2b700     88 00 90 AD |  if_e	jmp	#LR__4446
2b704     E7 92 02 F6 | 	mov	arg01, fp
2b708     18 92 06 F1 | 	add	arg01, #24
2b70c     49 7B 02 F6 | 	mov	result1, arg01
2b710     06 92 06 F1 | 	add	arg01, #6
2b714     49 AF 02 FB | 	rdlong	local05, arg01
2b718     1B AE FE F9 | 	movbyts	local05, #27
2b71c     3D 93 C2 FA | 	rdbyte	arg01, result1
2b720     06 92 46 F0 | 	shr	arg01, #6
2b724     01 92 0E F2 | 	cmp	arg01, #1 wz
2b728     36 AF 06 A4 |  if_e	bitl	local05, #310
2b72c     01 AE 06 A1 |  if_e	add	local05, #1
2b730     0A B0 06 A6 |  if_e	mov	local06, #10
2b734     34 00 90 AD |  if_e	jmp	#LR__4443
2b738     0E AE 46 F0 | 	shr	local05, #14
2b73c     0B AE 46 F7 | 	zerox	local05, #11
2b740     01 AE 06 F1 | 	add	local05, #1
2b744     05 7A 06 F1 | 	add	result1, #5
2b748     3D B1 C2 FA | 	rdbyte	local06, result1
2b74c     58 B1 42 F8 | 	getnib	local06, local06, #0
2b750     04 7A 06 F1 | 	add	result1, #4
2b754     3D 7B E2 FA | 	rdword	result1, result1
2b758     1B 7A FE F9 | 	movbyts	result1, #27
2b75c     17 7A 46 F0 | 	shr	result1, #23
2b760     07 7A 06 F5 | 	and	result1, #7
2b764     3D B1 02 F1 | 	add	local06, result1
2b768     07 B0 86 F1 | 	sub	local06, #7
2b76c                 | LR__4443
2b76c                 | '         cs = (LBA_t)(cs>>14 & 0xfff)+1;
2b76c                 | '         n = (csd[5] & 15) + (__builtin_bswap32(*(uint16_t*)(&csd[9]))>>23 & 0x7)+(2-9);
2b76c                 | '     }
2b76c                 | '     return (LBA_t)cs << n;
2b76c     58 AF 62 F0 | 	shl	local05, local06
2b770     54 AF 62 FC | 	wrlong	local05, local02
2b774     00 AA 06 F6 | 	mov	local03, #0
2b778                 | '                			*(LBA_t*)buff = disc_size(csd);
2b778                 | ' 				res = RES_OK;
2b778                 | ' 			}
2b778                 | ' 			break;
2b778     10 00 90 FD | 	jmp	#LR__4446
2b77c                 | LR__4444
2b77c     54 01 69 FC | 	wrlong	#128, local02
2b780     00 AA 06 F6 | 	mov	local03, #0
2b784                 | ' 			*(DWORD*)buff = 128;
2b784                 | ' 			res = RES_OK;
2b784                 | ' 			break;
2b784     04 00 90 FD | 	jmp	#LR__4446
2b788                 | LR__4445
2b788     04 AA 06 F6 | 	mov	local03, #4
2b78c                 | LR__4446
2b78c     68 01 B0 FD | 	call	#_sdmm_cc_deselect_0858
2b790                 | ' 			res = RES_PARERR;
2b790                 | ' 	}
2b790                 | ' 
2b790                 | ' 	deselect();
2b790                 | ' 
2b790                 | ' 	return res;
2b790     55 7B 02 F6 | 	mov	result1, local03
2b794                 | LR__4447
2b794     E7 F0 03 F6 | 	mov	ptra, fp
2b798     F2 00 A0 FD | 	call	#popregs_
2b79c                 | _sdmm_cc_disk_ioctl_ret
2b79c     2D 00 64 FD | 	ret
2b7a0                 | 
2b7a0                 | _sdmm_cc_xmit_mmc_0841
2b7a0     32 81 02 FB | 	rdlong	_var01, objptr
2b7a4     08 64 06 F1 | 	add	objptr, #8
2b7a8     32 83 02 FB | 	rdlong	_var02, objptr
2b7ac     08 64 86 F1 | 	sub	objptr, #8
2b7b0     40 82 62 FD | 	dirl	_var02
2b7b4     28 02 64 FD | 	setq	#1
2b7b8     49 85 02 FB | 	rdlong	_var03, arg01
2b7bc     69 84 62 FD | 	rev	_var03
2b7c0     1B 84 FE F9 | 	movbyts	_var03, #27
2b7c4     41 85 22 FC | 	wypin	_var03, _var02
2b7c8     4A 85 02 F6 | 	mov	_var03, arg02
2b7cc     02 94 4E F0 | 	shr	arg02, #2 wz
2b7d0     03 84 66 F0 | 	shl	_var03, #3
2b7d4     40 85 22 FC | 	wypin	_var03, _var01
2b7d8     41 82 62 FD | 	dirh	_var02
2b7dc     08 92 06 F1 | 	add	arg01, #8
2b7e0     69 86 62 FD | 	rev	_var04
2b7e4     1B 86 FE F9 | 	movbyts	_var04, #27
2b7e8                 | LR__4450
2b7e8     41 87 22 5C |  if_ne	wypin	_var04, _var02
2b7ec     49 87 02 5B |  if_ne	rdlong	_var04, arg01
2b7f0     04 92 06 51 |  if_ne	add	arg01, #4
2b7f4     69 86 62 5D |  if_ne	rev	_var04
2b7f8     1B 86 FE 59 |  if_ne	movbyts	_var04, #27
2b7fc                 | LR__4451
2b7fc     40 82 72 5D |  if_ne	testp	_var02 wc
2b800     F8 FF 9F 1D |  if_a	jmp	#LR__4451
2b804     F8 95 6E 5B |  if_ne	djnz	arg02, #LR__4450
2b808                 | LR__4452
2b808     40 80 72 FD | 	testp	_var01 wc
2b80c     F8 FF 9F 3D |  if_ae	jmp	#LR__4452
2b810     40 82 62 FD | 	dirl	_var02
2b814     FF FF FF FF 
2b818     41 FF 2B FC | 	wypin	##-1, _var02
2b81c     41 82 62 FD | 	dirh	_var02
2b820                 | _sdmm_cc_xmit_mmc_0841_ret
2b820     2D 00 64 FD | 	ret
2b824                 | 
2b824                 | _sdmm_cc_rcvr_mmc_0848
2b824     32 81 02 FB | 	rdlong	_var01, objptr
2b828     0C 64 06 F1 | 	add	objptr, #12
2b82c     32 83 02 FB | 	rdlong	_var02, objptr
2b830     0C 64 86 F1 | 	sub	objptr, #12
2b834     41 03 08 FC | 	akpin	_var02
2b838     4A 85 0A F6 | 	mov	_var03, arg02 wz
2b83c     02 84 4E F0 | 	shr	_var03, #2 wz
2b840     30 00 90 AD |  if_e	jmp	#LR__4462
2b844     42 87 02 F6 | 	mov	_var04, _var03
2b848     05 86 66 F0 | 	shl	_var04, #5
2b84c     40 87 22 FC | 	wypin	_var04, _var01
2b850     41 7F 18 FC | 	wxpin	#63, _var02
2b854                 | LR__4460
2b854                 | LR__4461
2b854     40 82 72 FD | 	testp	_var02 wc
2b858     F8 FF 9F 3D |  if_ae	jmp	#LR__4461
2b85c     41 87 8A FA | 	rdpin	_var04, _var02
2b860     69 86 62 FD | 	rev	_var04
2b864     1B 86 FE F9 | 	movbyts	_var04, #27
2b868     49 87 62 FC | 	wrlong	_var04, arg01
2b86c     04 92 06 F1 | 	add	arg01, #4
2b870     F8 85 6E FB | 	djnz	_var03, #LR__4460
2b874                 | LR__4462
2b874     03 94 0E F5 | 	and	arg02, #3 wz
2b878     24 00 90 AD |  if_e	jmp	#LR__4465
2b87c     41 4F 18 FC | 	wxpin	#39, _var02
2b880                 | LR__4463
2b880     40 11 28 FC | 	wypin	#8, _var01
2b884                 | LR__4464
2b884     40 82 72 FD | 	testp	_var02 wc
2b888     F8 FF 9F 3D |  if_ae	jmp	#LR__4464
2b88c     41 87 8A FA | 	rdpin	_var04, _var02
2b890     69 86 62 FD | 	rev	_var04
2b894     49 87 42 FC | 	wrbyte	_var04, arg01
2b898     01 92 06 F1 | 	add	arg01, #1
2b89c     F8 95 6E FB | 	djnz	arg02, #LR__4463
2b8a0                 | LR__4465
2b8a0                 | _sdmm_cc_rcvr_mmc_0848_ret
2b8a0     2D 00 64 FD | 	ret
2b8a4                 | 
2b8a4                 | _sdmm_cc_wait_ready_0852
2b8a4     03 CA 05 F6 | 	mov	COUNT_, #3
2b8a8     E8 00 A0 FD | 	call	#pushregs_
2b8ac     F8 A7 02 F6 | 	mov	local01, ptra
2b8b0     1A A8 62 FD | 	getct	local02
2b8b4     14 AA 06 FB | 	rdlong	local03, #20
2b8b8     01 AA 46 F0 | 	shr	local03, #1
2b8bc                 | ' 	UINT tmr, tmout;
2b8bc                 | ' 
2b8bc                 | ' 	tmr = _cnt();
2b8bc                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
2b8bc                 | ' 	for(;;) {
2b8bc     04 F0 07 F1 | 	add	ptra, #4
2b8c0                 | LR__4470
2b8c0     53 93 02 F6 | 	mov	arg01, local01
2b8c4     01 94 06 F6 | 	mov	arg02, #1
2b8c8     58 FF BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b8cc     53 95 C2 FA | 	rdbyte	arg02, local01
2b8d0     FF 94 0E F2 | 	cmp	arg02, #255 wz
2b8d4     01 7A 06 A6 |  if_e	mov	result1, #1
2b8d8     1A 7A 62 5D |  if_ne	getct	result1
2b8dc     54 7B 82 51 |  if_ne	sub	result1, local02
2b8e0     55 7B 12 52 |  if_ne	cmp	result1, local03 wc
2b8e4     00 7A 06 16 |  if_a	mov	result1, #0
2b8e8     D4 FF 9F 4D |  if_c_and_nz	jmp	#LR__4470
2b8ec     E7 F0 03 F6 | 	mov	ptra, fp
2b8f0     F2 00 A0 FD | 	call	#popregs_
2b8f4                 | _sdmm_cc_wait_ready_0852_ret
2b8f4     2D 00 64 FD | 	ret
2b8f8                 | 
2b8f8                 | _sdmm_cc_deselect_0858
2b8f8     00 CA 05 F6 | 	mov	COUNT_, #0
2b8fc     E8 00 A0 FD | 	call	#pushregs_
2b900     F8 95 02 F6 | 	mov	arg02, ptra
2b904     04 64 06 F1 | 	add	objptr, #4
2b908     32 93 02 FB | 	rdlong	arg01, objptr
2b90c     04 64 86 F1 | 	sub	objptr, #4
2b910     04 F0 07 F1 | 	add	ptra, #4
2b914     59 92 62 FD | 	drvh	arg01
2b918     1F 20 64 FD | 	waitx	#16
2b91c     4A 93 02 F6 | 	mov	arg01, arg02
2b920     01 94 06 F6 | 	mov	arg02, #1
2b924     FC FE BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b928     E7 F0 03 F6 | 	mov	ptra, fp
2b92c     F2 00 A0 FD | 	call	#popregs_
2b930                 | _sdmm_cc_deselect_0858_ret
2b930     2D 00 64 FD | 	ret
2b934                 | 
2b934                 | _sdmm_cc_select_0862
2b934     01 CA 05 F6 | 	mov	COUNT_, #1
2b938     E8 00 A0 FD | 	call	#pushregs_
2b93c     F8 95 02 F6 | 	mov	arg02, ptra
2b940     04 64 06 F1 | 	add	objptr, #4
2b944     32 93 02 FB | 	rdlong	arg01, objptr
2b948     08 64 06 F1 | 	add	objptr, #8
2b94c     32 A7 02 FB | 	rdlong	local01, objptr
2b950     0C 64 86 F1 | 	sub	objptr, #12
2b954     04 F0 07 F1 | 	add	ptra, #4
2b958     50 A6 62 FD | 	fltl	local01
2b95c     58 92 62 FD | 	drvl	arg01
2b960     1F 20 64 FD | 	waitx	#16
2b964     41 A6 62 FD | 	dirh	local01
2b968     4A 93 02 F6 | 	mov	arg01, arg02
2b96c     01 94 06 F6 | 	mov	arg02, #1
2b970     B0 FE BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b974     2C FF BF FD | 	call	#_sdmm_cc_wait_ready_0852
2b978     00 7A 0E F2 | 	cmp	result1, #0 wz
2b97c     01 7A 06 56 |  if_ne	mov	result1, #1
2b980     08 00 90 5D |  if_ne	jmp	#LR__4480
2b984     70 FF BF FD | 	call	#_sdmm_cc_deselect_0858
2b988                 | ' 
2b988                 | ' 	deselect();
2b988                 | ' 	return 0;
2b988     00 7A 06 F6 | 	mov	result1, #0
2b98c                 | LR__4480
2b98c     E7 F0 03 F6 | 	mov	ptra, fp
2b990     F2 00 A0 FD | 	call	#popregs_
2b994                 | _sdmm_cc_select_0862_ret
2b994     2D 00 64 FD | 	ret
2b998                 | 
2b998                 | _sdmm_cc_rcvr_datablock_0866
2b998     05 CA 05 F6 | 	mov	COUNT_, #5
2b99c     E8 00 A0 FD | 	call	#pushregs_
2b9a0     49 A7 02 F6 | 	mov	local01, arg01
2b9a4     4A A9 02 F6 | 	mov	local02, arg02
2b9a8     F8 AB 02 F6 | 	mov	local03, ptra
2b9ac     1A AC 62 FD | 	getct	local04
2b9b0     14 AE 06 FB | 	rdlong	local05, #20
2b9b4     03 AE 46 F0 | 	shr	local05, #3
2b9b8                 | ' 	UINT tmr, tmout;
2b9b8                 | ' 
2b9b8                 | ' 	tmr = _cnt();
2b9b8                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
2b9b8                 | ' 	for(;;) {
2b9b8     04 F0 07 F1 | 	add	ptra, #4
2b9bc                 | LR__4490
2b9bc     55 93 02 F6 | 	mov	arg01, local03
2b9c0     01 94 06 F6 | 	mov	arg02, #1
2b9c4     5C FE BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b9c8     55 95 C2 FA | 	rdbyte	arg02, local03
2b9cc     FF 94 0E F2 | 	cmp	arg02, #255 wz
2b9d0     1A 7A 62 AD |  if_e	getct	result1
2b9d4     3D 95 02 A6 |  if_e	mov	arg02, result1
2b9d8     56 95 82 A1 |  if_e	sub	arg02, local04
2b9dc     57 95 12 A2 |  if_e	cmp	arg02, local05 wc
2b9e0     D8 FF 9F 8D |  if_c_and_z	jmp	#LR__4490
2b9e4     55 AF C2 FA | 	rdbyte	local05, local03
2b9e8     FE AE 0E F2 | 	cmp	local05, #254 wz
2b9ec     00 7A 06 56 |  if_ne	mov	result1, #0
2b9f0     1C 00 90 5D |  if_ne	jmp	#LR__4491
2b9f4     53 93 02 F6 | 	mov	arg01, local01
2b9f8     54 95 02 F6 | 	mov	arg02, local02
2b9fc     24 FE BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2ba00     55 93 02 F6 | 	mov	arg01, local03
2ba04     02 94 06 F6 | 	mov	arg02, #2
2ba08     18 FE BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2ba0c                 | ' 
2ba0c                 | ' 	rcvr_mmc(buff, btr);
2ba0c                 | ' 	rcvr_mmc(d, 2);
2ba0c                 | ' 
2ba0c                 | ' 	return 1;
2ba0c     01 7A 06 F6 | 	mov	result1, #1
2ba10                 | LR__4491
2ba10     E7 F0 03 F6 | 	mov	ptra, fp
2ba14     F2 00 A0 FD | 	call	#popregs_
2ba18                 | _sdmm_cc_rcvr_datablock_0866_ret
2ba18     2D 00 64 FD | 	ret
2ba1c                 | 
2ba1c                 | _sdmm_cc_xmit_datablock_0868
2ba1c     03 CA 05 F6 | 	mov	COUNT_, #3
2ba20     E8 00 A0 FD | 	call	#pushregs_
2ba24     49 A7 02 F6 | 	mov	local01, arg01
2ba28     4A A9 02 F6 | 	mov	local02, arg02
2ba2c     F8 AB 02 F6 | 	mov	local03, ptra
2ba30     04 F0 07 F1 | 	add	ptra, #4
2ba34     6C FE BF FD | 	call	#_sdmm_cc_wait_ready_0852
2ba38     00 7A 0E F2 | 	cmp	result1, #0 wz
2ba3c     00 7A 06 A6 |  if_e	mov	result1, #0
2ba40     58 00 90 AD |  if_e	jmp	#LR__4501
2ba44     55 A9 42 FC | 	wrbyte	local02, local03
2ba48     55 93 02 F6 | 	mov	arg01, local03
2ba4c     01 94 06 F6 | 	mov	arg02, #1
2ba50     4C FD BF FD | 	call	#_sdmm_cc_xmit_mmc_0841
2ba54     54 A9 E2 F8 | 	getbyte	local02, local02, #0
2ba58     FD A8 0E F2 | 	cmp	local02, #253 wz
2ba5c     38 00 90 AD |  if_e	jmp	#LR__4500
2ba60     53 93 02 F6 | 	mov	arg01, local01
2ba64     09 94 C6 F9 | 	decod	arg02, #9
2ba68     34 FD BF FD | 	call	#_sdmm_cc_xmit_mmc_0841
2ba6c     55 93 02 F6 | 	mov	arg01, local03
2ba70     02 94 06 F6 | 	mov	arg02, #2
2ba74     AC FD BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2ba78     55 93 02 F6 | 	mov	arg01, local03
2ba7c     01 94 06 F6 | 	mov	arg02, #1
2ba80     A0 FD BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2ba84     55 AB C2 FA | 	rdbyte	local03, local03
2ba88     1F AA 06 F5 | 	and	local03, #31
2ba8c     05 AA 0E F2 | 	cmp	local03, #5 wz
2ba90                 | ' 			return 0;
2ba90     00 7A 06 56 |  if_ne	mov	result1, #0
2ba94     04 00 90 5D |  if_ne	jmp	#LR__4501
2ba98                 | LR__4500
2ba98                 | ' 	}
2ba98                 | ' 
2ba98                 | ' 	return 1;
2ba98     01 7A 06 F6 | 	mov	result1, #1
2ba9c                 | LR__4501
2ba9c     E7 F0 03 F6 | 	mov	ptra, fp
2baa0     F2 00 A0 FD | 	call	#popregs_
2baa4                 | _sdmm_cc_xmit_datablock_0868_ret
2baa4     2D 00 64 FD | 	ret
2baa8                 | 
2baa8                 | _sdmm_cc_send_cmd_0871
2baa8     04 CA 05 F6 | 	mov	COUNT_, #4
2baac     E8 00 A0 FD | 	call	#pushregs_
2bab0                 | _sdmm_cc_send_cmd_0871_enter
2bab0     49 A7 02 F6 | 	mov	local01, arg01
2bab4     4A A9 02 F6 | 	mov	local02, arg02
2bab8     F8 AB 02 F6 | 	mov	local03, ptra
2babc     53 7B E2 F8 | 	getbyte	result1, local01, #0
2bac0     80 7A CE F7 | 	test	result1, #128 wz
2bac4     08 F0 07 F1 | 	add	ptra, #8
2bac8     20 00 90 AD |  if_e	jmp	#LR__4510
2bacc     53 A7 E2 F8 | 	getbyte	local01, local01, #0
2bad0     7F A6 06 F5 | 	and	local01, #127
2bad4     37 92 06 F6 | 	mov	arg01, #55
2bad8     00 94 06 F6 | 	mov	arg02, #0
2badc     C8 FF BF FD | 	call	#_sdmm_cc_send_cmd_0871
2bae0     3D 95 E2 F8 | 	getbyte	arg02, result1, #0
2bae4     02 94 16 F2 | 	cmp	arg02, #2 wc
2bae8     BC 00 90 3D |  if_ae	jmp	#LR__4513
2baec                 | LR__4510
2baec     53 7B E2 F8 | 	getbyte	result1, local01, #0
2baf0     0C 7A 0E F2 | 	cmp	result1, #12 wz
2baf4     14 00 90 AD |  if_e	jmp	#LR__4511
2baf8     FC FD BF FD | 	call	#_sdmm_cc_deselect_0858
2bafc     34 FE BF FD | 	call	#_sdmm_cc_select_0862
2bb00     00 7A 0E F2 | 	cmp	result1, #0 wz
2bb04     FF 7A 06 A6 |  if_e	mov	result1, #255
2bb08     9C 00 90 AD |  if_e	jmp	#LR__4513
2bb0c                 | LR__4511
2bb0c     53 95 E2 F8 | 	getbyte	arg02, local01, #0
2bb10     40 7A 06 F6 | 	mov	result1, #64
2bb14     4A 7B 42 F5 | 	or	result1, arg02
2bb18     55 7B 42 FC | 	wrbyte	result1, local03
2bb1c     55 95 02 F6 | 	mov	arg02, local03
2bb20     01 94 06 F1 | 	add	arg02, #1
2bb24     1B A8 FE F9 | 	movbyts	local02, #27
2bb28     4A A9 62 FC | 	wrlong	local02, arg02
2bb2c     01 AC 06 F6 | 	mov	local04, #1
2bb30     53 A9 02 F6 | 	mov	local02, local01
2bb34     07 A8 4E F7 | 	zerox	local02, #7 wz
2bb38     95 AC 06 A6 |  if_e	mov	local04, #149
2bb3c     53 A9 E2 F8 | 	getbyte	local02, local01, #0
2bb40     08 A8 0E F2 | 	cmp	local02, #8 wz
2bb44     87 AC 06 A6 |  if_e	mov	local04, #135
2bb48     05 AA 06 F1 | 	add	local03, #5
2bb4c     55 AD 42 FC | 	wrbyte	local04, local03
2bb50     05 AA 86 F1 | 	sub	local03, #5
2bb54     55 93 02 F6 | 	mov	arg01, local03
2bb58     06 94 06 F6 | 	mov	arg02, #6
2bb5c     40 FC BF FD | 	call	#_sdmm_cc_xmit_mmc_0841
2bb60     53 A7 E2 F8 | 	getbyte	local01, local01, #0
2bb64     0C A6 0E F2 | 	cmp	local01, #12 wz
2bb68     55 93 02 A6 |  if_e	mov	arg01, local03
2bb6c     06 92 06 A1 |  if_e	add	arg01, #6
2bb70     01 94 06 A6 |  if_e	mov	arg02, #1
2bb74     AC FC BF AD |  if_e	call	#_sdmm_cc_rcvr_mmc_0848
2bb78     0A AC 06 F6 | 	mov	local04, #10
2bb7c                 | ' 	n = 10;
2bb7c                 | ' 	do
2bb7c                 | LR__4512
2bb7c     55 93 02 F6 | 	mov	arg01, local03
2bb80     06 92 06 F1 | 	add	arg01, #6
2bb84     01 94 06 F6 | 	mov	arg02, #1
2bb88     98 FC BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2bb8c     06 AA 06 F1 | 	add	local03, #6
2bb90     55 A9 C2 FA | 	rdbyte	local02, local03
2bb94     06 AA 86 F1 | 	sub	local03, #6
2bb98     80 A8 CE F7 | 	test	local02, #128 wz
2bb9c     F7 AD 6E 5B |  if_ne	djnz	local04, #LR__4512
2bba0                 | ' 
2bba0                 | ' 	return buf[6];
2bba0     06 AA 06 F1 | 	add	local03, #6
2bba4     55 7B C2 FA | 	rdbyte	result1, local03
2bba8                 | LR__4513
2bba8     E7 F0 03 F6 | 	mov	ptra, fp
2bbac     F2 00 A0 FD | 	call	#popregs_
2bbb0                 | _sdmm_cc_send_cmd_0871_ret
2bbb0     2D 00 64 FD | 	ret
2bbb4                 | 
2bbb4                 | _sdmm_cc_disk_setpins
2bbb4     00 92 0E F2 | 	cmp	arg01, #0 wz
2bbb8     01 7A 66 56 |  if_ne	neg	result1, #1
2bbbc     24 00 90 5D |  if_ne	jmp	#_sdmm_cc_disk_setpins_ret
2bbc0     32 95 62 FC | 	wrlong	arg02, objptr
2bbc4     04 64 06 F1 | 	add	objptr, #4
2bbc8     32 97 62 FC | 	wrlong	arg03, objptr
2bbcc     04 64 06 F1 | 	add	objptr, #4
2bbd0     32 99 62 FC | 	wrlong	arg04, objptr
2bbd4     04 64 06 F1 | 	add	objptr, #4
2bbd8     32 9B 62 FC | 	wrlong	arg05, objptr
2bbdc     0C 64 86 F1 | 	sub	objptr, #12
2bbe0                 | '     _pin_clk = pclk;
2bbe0                 | '     _pin_ss = pss;
2bbe0                 | '     _pin_di = pdi;
2bbe0                 | '     _pin_do = pdo;
2bbe0                 | ' #line 848 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/block/sdmm.cc"
2bbe0                 | '     return 0;
2bbe0     00 7A 06 F6 | 	mov	result1, #0
2bbe4                 | _sdmm_cc_disk_setpins_ret
2bbe4     2D 00 64 FD | 	ret
2bbe8                 | 
2bbe8                 | _sdmm_cc_disk_deinitialize
2bbe8     04 CA 05 F6 | 	mov	COUNT_, #4
2bbec     E8 00 A0 FD | 	call	#pushregs_
2bbf0     00 92 4E F2 | 	cmps	arg01, #0 wz
2bbf4     32 A7 02 FB | 	rdlong	local01, objptr
2bbf8     04 64 06 F1 | 	add	objptr, #4
2bbfc     32 A9 02 FB | 	rdlong	local02, objptr
2bc00     04 64 06 F1 | 	add	objptr, #4
2bc04     32 AB 02 FB | 	rdlong	local03, objptr
2bc08     08 64 06 F1 | 	add	objptr, #8
2bc0c     32 AD 02 FB | 	rdlong	local04, objptr
2bc10     04 64 86 F1 | 	sub	objptr, #4
2bc14     32 93 02 FB | 	rdlong	arg01, objptr
2bc18     0C 64 86 F1 | 	sub	objptr, #12
2bc1c                 | ' #line 865 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/block/sdmm.cc"
2bc1c                 | '         return RES_NOTRDY;
2bc1c     03 7A 06 56 |  if_ne	mov	result1, #3
2bc20     34 00 90 5D |  if_ne	jmp	#LR__4520
2bc24     50 92 62 FD | 	fltl	arg01
2bc28     49 01 08 FC | 	wrpin	#0, arg01
2bc2c     50 AC 62 FD | 	fltl	local04
2bc30     56 01 08 FC | 	wrpin	#0, local04
2bc34     50 AA 62 FD | 	fltl	local03
2bc38     55 01 08 FC | 	wrpin	#0, local03
2bc3c     50 A6 62 FD | 	fltl	local01
2bc40     53 01 08 FC | 	wrpin	#0, local01
2bc44     50 A8 62 FD | 	fltl	local02
2bc48     54 01 08 FC | 	wrpin	#0, local02
2bc4c     0A 92 06 F6 | 	mov	arg01, #10
2bc50     A8 93 BF FD | 	call	#__system___waitms
2bc54                 | '     }
2bc54                 | ' #line 871 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/block/sdmm.cc"
2bc54                 | '     _pinclear(SMPIN_DO);
2bc54                 | '     _pinclear(PIN_DO);
2bc54                 | '     _pinclear(PIN_DI);
2bc54                 | '     _pinclear(PIN_CLK);
2bc54                 | '     _pinclear(PIN_SS);
2bc54                 | ' 
2bc54                 | '     _waitms(10);
2bc54                 | ' 
2bc54                 | '     return 0;
2bc54     00 7A 06 F6 | 	mov	result1, #0
2bc58                 | LR__4520
2bc58     E7 F0 03 F6 | 	mov	ptra, fp
2bc5c     F2 00 A0 FD | 	call	#popregs_
2bc60                 | _sdmm_cc_disk_deinitialize_ret
2bc60     2D 00 64 FD | 	ret
2bc64                 | 
2bc64                 | _sdmm_cc_v_do_io
2bc64     08 CA 05 F6 | 	mov	COUNT_, #8
2bc68     E8 00 A0 FD | 	call	#pushregs_
2bc6c     4B A7 02 F6 | 	mov	local01, arg03
2bc70     4C A9 02 F6 | 	mov	local02, arg04
2bc74     4A AB 02 F6 | 	mov	local03, arg02
2bc78     18 64 06 F1 | 	add	objptr, #24
2bc7c     32 AD 02 FB | 	rdlong	local04, objptr
2bc80     00 98 06 F6 | 	mov	arg04, #0
2bc84     FF AD 06 F5 | 	and	local04, #511
2bc88     00 AE 06 F6 | 	mov	local05, #0
2bc8c     32 93 02 FB | 	rdlong	arg01, objptr
2bc90     04 64 06 F1 | 	add	objptr, #4
2bc94     32 95 02 FB | 	rdlong	arg02, objptr
2bc98     1C 64 86 F1 | 	sub	objptr, #28
2bc9c     09 96 06 F6 | 	mov	arg03, #9
2bca0     7C B2 BF FD | 	call	#__system___int64_sar
2bca4     3D B1 02 F6 | 	mov	local06, result1
2bca8     00 AC 0E F2 | 	cmp	local04, #0 wz
2bcac                 | ' 
2bcac                 | ' 
2bcac                 | '         return -1;
2bcac     01 7A 66 56 |  if_ne	neg	result1, #1
2bcb0     84 00 90 5D |  if_ne	jmp	#LR__4533
2bcb4     53 B3 02 F6 | 	mov	local07, local01
2bcb8     09 B2 46 F0 | 	shr	local07, #9
2bcbc     00 A8 0E F2 | 	cmp	local02, #0 wz
2bcc0     1C 00 90 AD |  if_e	jmp	#LR__4530
2bcc4     00 92 06 F6 | 	mov	arg01, #0
2bcc8     55 95 02 F6 | 	mov	arg02, local03
2bccc     58 97 02 F6 | 	mov	arg03, local06
2bcd0     59 99 02 F6 | 	mov	arg04, local07
2bcd4     88 F8 BF FD | 	call	#_sdmm_cc_disk_write
2bcd8     3D B5 02 F6 | 	mov	local08, result1
2bcdc     18 00 90 FD | 	jmp	#LR__4531
2bce0                 | LR__4530
2bce0     00 92 06 F6 | 	mov	arg01, #0
2bce4     55 95 02 F6 | 	mov	arg02, local03
2bce8     58 97 02 F6 | 	mov	arg03, local06
2bcec     59 99 02 F6 | 	mov	arg04, local07
2bcf0     AC F7 BF FD | 	call	#_sdmm_cc_disk_read
2bcf4     3D B5 02 F6 | 	mov	local08, result1
2bcf8                 | LR__4531
2bcf8     00 B4 0E F2 | 	cmp	local08, #0 wz
2bcfc     34 00 90 5D |  if_ne	jmp	#LR__4532
2bd00     09 B2 66 F0 | 	shl	local07, #9
2bd04     59 AF 02 F1 | 	add	local05, local07
2bd08     18 64 06 F1 | 	add	objptr, #24
2bd0c     32 7B 02 FB | 	rdlong	result1, objptr
2bd10     04 64 06 F1 | 	add	objptr, #4
2bd14     32 7D 02 FB | 	rdlong	result2, objptr
2bd18     59 7B 12 F1 | 	add	result1, local07 wc
2bd1c     00 7C 26 F1 | 	addx	result2, #0
2bd20     04 64 86 F1 | 	sub	objptr, #4
2bd24     32 7B 62 FC | 	wrlong	result1, objptr
2bd28     04 64 06 F1 | 	add	objptr, #4
2bd2c     32 7D 62 FC | 	wrlong	result2, objptr
2bd30     1C 64 86 F1 | 	sub	objptr, #28
2bd34                 | LR__4532
2bd34                 | ' 
2bd34                 | ' 
2bd34                 | '     }
2bd34                 | '     return bytes_io;
2bd34     57 7B 02 F6 | 	mov	result1, local05
2bd38                 | LR__4533
2bd38     E7 F0 03 F6 | 	mov	ptra, fp
2bd3c     F2 00 A0 FD | 	call	#popregs_
2bd40                 | _sdmm_cc_v_do_io_ret
2bd40     2D 00 64 FD | 	ret
2bd44                 | 
2bd44                 | _sdmm_cc_v_read
2bd44                 | ' {
2bd44                 | '     return v_do_io(fil, buf, count,  (0) );
2bd44     00 98 06 F6 | 	mov	arg04, #0
2bd48     18 FF BF FD | 	call	#_sdmm_cc_v_do_io
2bd4c                 | _sdmm_cc_v_read_ret
2bd4c     2D 00 64 FD | 	ret
2bd50                 | 
2bd50                 | _sdmm_cc_v_write
2bd50                 | ' {
2bd50                 | '     return v_do_io(fil, buf, count,  (1) );
2bd50     01 98 06 F6 | 	mov	arg04, #1
2bd54     0C FF BF FD | 	call	#_sdmm_cc_v_do_io
2bd58                 | _sdmm_cc_v_write_ret
2bd58     2D 00 64 FD | 	ret
2bd5c                 | 
2bd5c                 | _sdmm_cc_v_ioctl
2bd5c     00 92 06 F6 | 	mov	arg01, #0
2bd60     04 F9 BF FD | 	call	#_sdmm_cc_disk_ioctl
2bd64     00 7A 0E F2 | 	cmp	result1, #0 wz
2bd68                 | '         return _seterror( 10 );
2bd68     20 68 06 51 |  if_ne	add	ptr___system__dat__, #32
2bd6c     34 15 68 5C |  if_ne	wrlong	#10, ptr___system__dat__
2bd70     20 68 86 51 |  if_ne	sub	ptr___system__dat__, #32
2bd74     01 7A 66 56 |  if_ne	neg	result1, #1
2bd78                 | '     return 0;
2bd78     00 7A 06 A6 |  if_e	mov	result1, #0
2bd7c                 | _sdmm_cc_v_ioctl_ret
2bd7c     2D 00 64 FD | 	ret
2bd80                 | 
2bd80                 | _sdmm_cc_v_lseek
2bd80     4A 81 02 F6 | 	mov	_var01, arg02
2bd84     4C 85 0A F6 | 	mov	_var03, arg04 wz
2bd88     1C 00 90 5D |  if_ne	jmp	#LR__4540
2bd8c     4B 85 02 F6 | 	mov	_var03, arg03
2bd90     18 64 06 F1 | 	add	objptr, #24
2bd94     32 81 62 FC | 	wrlong	_var01, objptr
2bd98     04 64 06 F1 | 	add	objptr, #4
2bd9c     32 85 62 FC | 	wrlong	_var03, objptr
2bda0     1C 64 86 F1 | 	sub	objptr, #28
2bda4     64 00 90 FD | 	jmp	#LR__4543
2bda8                 | LR__4540
2bda8     01 84 0E F2 | 	cmp	_var03, #1 wz
2bdac     30 00 90 5D |  if_ne	jmp	#LR__4541
2bdb0     18 64 06 F1 | 	add	objptr, #24
2bdb4     32 7B 02 FB | 	rdlong	result1, objptr
2bdb8     04 64 06 F1 | 	add	objptr, #4
2bdbc     32 7D 02 FB | 	rdlong	result2, objptr
2bdc0     40 7B 12 F1 | 	add	result1, _var01 wc
2bdc4     4B 7D 22 F1 | 	addx	result2, arg03
2bdc8     04 64 86 F1 | 	sub	objptr, #4
2bdcc     32 7B 62 FC | 	wrlong	result1, objptr
2bdd0     04 64 06 F1 | 	add	objptr, #4
2bdd4     32 7D 62 FC | 	wrlong	result2, objptr
2bdd8     1C 64 86 F1 | 	sub	objptr, #28
2bddc     2C 00 90 FD | 	jmp	#LR__4542
2bde0                 | LR__4541
2bde0     40 7B 22 F6 | 	not	result1, _var01
2bde4     01 7A 0E F1 | 	add	result1, #1 wz
2bde8     4B 7D 22 F6 | 	not	result2, arg03
2bdec     00 94 06 F6 | 	mov	arg02, #0
2bdf0     01 94 66 A6 |  if_e	neg	arg02, #1
2bdf4     4A 7D 82 F1 | 	sub	result2, arg02
2bdf8     18 64 06 F1 | 	add	objptr, #24
2bdfc     32 7B 62 FC | 	wrlong	result1, objptr
2be00     04 64 06 F1 | 	add	objptr, #4
2be04     32 7D 62 FC | 	wrlong	result2, objptr
2be08     1C 64 86 F1 | 	sub	objptr, #28
2be0c                 | LR__4542
2be0c                 | LR__4543
2be0c                 | '         curpos = -off;
2be0c                 | '     }
2be0c                 | '     return curpos;
2be0c     18 64 06 F1 | 	add	objptr, #24
2be10     32 7B 02 FB | 	rdlong	result1, objptr
2be14     04 64 06 F1 | 	add	objptr, #4
2be18     32 7D 02 FB | 	rdlong	result2, objptr
2be1c     1C 64 86 F1 | 	sub	objptr, #28
2be20                 | _sdmm_cc_v_lseek_ret
2be20     2D 00 64 FD | 	ret
2be24                 | 
2be24                 | _sdmm_cc_v_flush
2be24                 | ' {
2be24                 | '     return 0;
2be24     00 7A 06 F6 | 	mov	result1, #0
2be28                 | _sdmm_cc_v_flush_ret
2be28     2D 00 64 FD | 	ret
2be2c                 | 
2be2c                 | _sdmm_cc_v_close
2be2c     00 92 06 F6 | 	mov	arg01, #0
2be30     B4 FD BF FD | 	call	#_sdmm_cc_disk_deinitialize
2be34     20 64 06 F1 | 	add	objptr, #32
2be38     32 93 02 FB | 	rdlong	arg01, objptr
2be3c     04 64 06 F1 | 	add	objptr, #4
2be40     32 95 02 FB | 	rdlong	arg02, objptr
2be44     24 64 86 F1 | 	sub	objptr, #36
2be48     60 B1 BF FD | 	call	#__system___freepins
2be4c                 | ' {
2be4c                 | '     disk_deinitialize(0);
2be4c                 | '     _freepins(f_pinmask);
2be4c                 | '     return 0;
2be4c     00 7A 06 F6 | 	mov	result1, #0
2be50                 | _sdmm_cc_v_close_ret
2be50     2D 00 64 FD | 	ret
2be54                 | 
2be54                 | _sdmm_cc_v_putc
2be54     00 CA 05 F6 | 	mov	COUNT_, #0
2be58     E8 00 A0 FD | 	call	#pushregs_
2be5c     0C F0 07 F1 | 	add	ptra, #12
2be60     04 CE 05 F1 | 	add	fp, #4
2be64     E7 92 62 FC | 	wrlong	arg01, fp
2be68     4A 93 02 F6 | 	mov	arg01, arg02
2be6c     E7 94 02 F6 | 	mov	arg02, fp
2be70     01 96 06 F6 | 	mov	arg03, #1
2be74     04 CE 85 F1 | 	sub	fp, #4
2be78                 | ' {
2be78                 | '     return v_do_io(fil, buf, count,  (1) );
2be78     01 98 06 F6 | 	mov	arg04, #1
2be7c     E4 FD BF FD | 	call	#_sdmm_cc_v_do_io
2be80     01 7A 0E F2 | 	cmp	result1, #1 wz
2be84     04 CE 05 A1 |  if_e	add	fp, #4
2be88     E7 7A 02 AB |  if_e	rdlong	result1, fp
2be8c     04 CE 85 A1 |  if_e	sub	fp, #4
2be90                 | '     return -1;
2be90     01 7A 66 56 |  if_ne	neg	result1, #1
2be94     E7 F0 03 F6 | 	mov	ptra, fp
2be98     F2 00 A0 FD | 	call	#popregs_
2be9c                 | _sdmm_cc_v_putc_ret
2be9c     2D 00 64 FD | 	ret
2bea0                 | 
2bea0                 | _sdmm_cc_v_getc
2bea0     00 CA 05 F6 | 	mov	COUNT_, #0
2bea4     E8 00 A0 FD | 	call	#pushregs_
2bea8     0C F0 07 F1 | 	add	ptra, #12
2beac     08 CE 05 F1 | 	add	fp, #8
2beb0     E7 00 68 FC | 	wrlong	#0, fp
2beb4     E7 94 02 F6 | 	mov	arg02, fp
2beb8     08 CE 85 F1 | 	sub	fp, #8
2bebc     01 96 06 F6 | 	mov	arg03, #1
2bec0                 | ' {
2bec0                 | '     return v_do_io(fil, buf, count,  (0) );
2bec0     00 98 06 F6 | 	mov	arg04, #0
2bec4     9C FD BF FD | 	call	#_sdmm_cc_v_do_io
2bec8     01 7A 0E F2 | 	cmp	result1, #1 wz
2becc     08 CE 05 A1 |  if_e	add	fp, #8
2bed0     E7 7A 02 AB |  if_e	rdlong	result1, fp
2bed4     08 CE 85 A1 |  if_e	sub	fp, #8
2bed8                 | '     return -1;
2bed8     01 7A 66 56 |  if_ne	neg	result1, #1
2bedc     E7 F0 03 F6 | 	mov	ptra, fp
2bee0     F2 00 A0 FD | 	call	#popregs_
2bee4                 | _sdmm_cc_v_getc_ret
2bee4     2D 00 64 FD | 	ret
2bee8                 | 
2bee8                 | _fatfs_cc_ff_uni2oem
2bee8     00 80 06 F6 | 	mov	_var01, #0
2beec     80 92 16 F2 | 	cmp	arg01, #128 wc
2bef0     49 81 02 C6 |  if_b	mov	_var01, arg01
2bef4     58 00 90 CD |  if_b	jmp	#LR__4554
2bef8     80 00 00 FF 
2befc     00 92 16 F2 | 	cmp	arg01, ##65536 wc
2bf00     4C 00 90 3D |  if_ae	jmp	#LR__4553
2bf04     4A 7B 32 F9 | 	getword	result1, arg02, #0
2bf08     01 00 00 FF 
2bf0c     52 7B 0E F2 | 	cmp	result1, ##850 wz
2bf10     3C 00 90 5D |  if_ne	jmp	#LR__4553
2bf14                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
2bf14     00 80 06 F6 | 	mov	_var01, #0
2bf18     D7 14 48 FB | 	callpa	#(@LR__4551-@LR__4550)>>2,fcache_load_ptr_
2bf1c                 | LR__4550
2bf1c     40 7B 32 F9 | 	getword	result1, _var01, #0
2bf20     80 7A 16 F2 | 	cmp	result1, #128 wc
2bf24     1C 00 90 3D |  if_ae	jmp	#LR__4552
2bf28     40 7B 32 F9 | 	getword	result1, _var01, #0
2bf2c     01 7A 66 F0 | 	shl	result1, #1
2bf30     36 7B 02 F1 | 	add	result1, ptr__fatfs_cc_dat__
2bf34     3D 7B E2 FA | 	rdword	result1, result1
2bf38     3D 93 0A F2 | 	cmp	arg01, result1 wz
2bf3c     01 80 06 51 |  if_ne	add	_var01, #1
2bf40     D8 FF 9F 5D |  if_ne	jmp	#LR__4550
2bf44                 | LR__4551
2bf44                 | LR__4552
2bf44     40 81 32 F9 | 	getword	_var01, _var01, #0
2bf48     80 80 06 F1 | 	add	_var01, #128
2bf4c     40 81 E2 F8 | 	getbyte	_var01, _var01, #0
2bf50                 | LR__4553
2bf50                 | LR__4554
2bf50                 | ' 			c = (c + 0x80) & 0xFF;
2bf50                 | ' 		}
2bf50                 | ' 	}
2bf50                 | ' 
2bf50                 | ' 	return c;
2bf50     40 7B 02 F6 | 	mov	result1, _var01
2bf54                 | _fatfs_cc_ff_uni2oem_ret
2bf54     2D 00 64 FD | 	ret
2bf58                 | 
2bf58                 | _fatfs_cc_ff_oem2uni
2bf58     00 80 06 F6 | 	mov	_var01, #0
2bf5c     49 7B 32 F9 | 	getword	result1, arg01, #0
2bf60     80 7A 16 F2 | 	cmp	result1, #128 wc
2bf64     49 81 02 C6 |  if_b	mov	_var01, arg01
2bf68     2C 00 90 CD |  if_b	jmp	#LR__4561
2bf6c     4A 95 32 F9 | 	getword	arg02, arg02, #0
2bf70     01 00 00 FF 
2bf74     52 95 0E F2 | 	cmp	arg02, ##850 wz
2bf78     1C 00 90 5D |  if_ne	jmp	#LR__4560
2bf7c     49 7B 32 F9 | 	getword	result1, arg01, #0
2bf80     00 7B 16 F2 | 	cmp	result1, #256 wc
2bf84     49 93 32 C9 |  if_b	getword	arg01, arg01, #0
2bf88     80 92 86 C1 |  if_b	sub	arg01, #128
2bf8c     01 92 66 C0 |  if_b	shl	arg01, #1
2bf90     36 93 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
2bf94     49 81 E2 CA |  if_b	rdword	_var01, arg01
2bf98                 | LR__4560
2bf98                 | LR__4561
2bf98                 | ' 		}
2bf98                 | ' 	}
2bf98                 | ' 
2bf98                 | ' 	return c;
2bf98     40 7B 02 F6 | 	mov	result1, _var01
2bf9c                 | _fatfs_cc_ff_oem2uni_ret
2bf9c     2D 00 64 FD | 	ret
2bfa0                 | 
2bfa0                 | _fatfs_cc_ff_wtoupper
2bfa0     49 81 02 F6 | 	mov	_var01, arg01
2bfa4     80 00 00 FF 
2bfa8     00 80 16 F2 | 	cmp	_var01, ##65536 wc
2bfac     58 01 90 3D |  if_ae	jmp	#LR__4583
2bfb0     40 83 02 F6 | 	mov	_var02, _var01
2bfb4     41 81 32 F9 | 	getword	_var01, _var02, #0
2bfb8     08 00 00 FF 
2bfbc     00 80 16 F2 | 	cmp	_var01, ##4096 wc
2bfc0     36 85 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
2bfc4     00 85 06 C1 |  if_b	add	_var03, #256
2bfc8     36 85 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
2bfcc     01 00 00 3F 
2bfd0     F2 84 06 31 |  if_ae	add	_var03, ##754
2bfd4     42 87 02 F6 | 	mov	_var04, _var03
2bfd8                 | ' 		uc = (WORD)uni;
2bfd8                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
2bfd8                 | ' 		for (;;) {
2bfd8                 | LR__4570
2bfd8     43 89 E2 FA | 	rdword	_var05, _var04
2bfdc     44 85 02 F6 | 	mov	_var03, _var05
2bfe0     0F 84 4E F7 | 	zerox	_var03, #15 wz
2bfe4     02 86 06 F1 | 	add	_var04, #2
2bfe8     18 01 90 AD |  if_e	jmp	#LR__4582
2bfec     41 85 32 F9 | 	getword	_var03, _var02, #0
2bff0     44 81 32 F9 | 	getword	_var01, _var05, #0
2bff4     40 85 12 F2 | 	cmp	_var03, _var01 wc
2bff8     08 01 90 CD |  if_b	jmp	#LR__4582
2bffc     43 8B E2 FA | 	rdword	_var06, _var04
2c000     45 8D 32 F9 | 	getword	_var07, _var06, #0
2c004     08 8C 46 F0 | 	shr	_var07, #8
2c008     45 8B 32 F9 | 	getword	_var06, _var06, #0
2c00c     45 8B E2 F8 | 	getbyte	_var06, _var06, #0
2c010     41 85 32 F9 | 	getword	_var03, _var02, #0
2c014     44 8F 32 F9 | 	getword	_var08, _var05, #0
2c018     45 81 32 F9 | 	getword	_var01, _var06, #0
2c01c     40 8F 02 F1 | 	add	_var08, _var01
2c020     47 85 52 F2 | 	cmps	_var03, _var08 wc
2c024     02 86 06 F1 | 	add	_var04, #2
2c028     C4 00 90 3D |  if_ae	jmp	#LR__4581
2c02c                 | ' 				switch (cmd) {
2c02c     46 91 32 F9 | 	getword	_var09, _var07, #0
2c030     09 90 26 F3 | 	fle	_var09, #9
2c034     30 90 62 FD | 	jmprel	_var09
2c038                 | LR__4571
2c038     24 00 90 FD | 	jmp	#LR__4572
2c03c     3C 00 90 FD | 	jmp	#LR__4573
2c040     54 00 90 FD | 	jmp	#LR__4574
2c044     5C 00 90 FD | 	jmp	#LR__4575
2c048     64 00 90 FD | 	jmp	#LR__4576
2c04c     6C 00 90 FD | 	jmp	#LR__4577
2c050     74 00 90 FD | 	jmp	#LR__4578
2c054     7C 00 90 FD | 	jmp	#LR__4579
2c058     84 00 90 FD | 	jmp	#LR__4580
2c05c     A4 00 90 FD | 	jmp	#LR__4582
2c060                 | LR__4572
2c060     41 83 32 F9 | 	getword	_var02, _var02, #0
2c064     44 89 32 F9 | 	getword	_var05, _var05, #0
2c068     44 83 82 F1 | 	sub	_var02, _var05
2c06c     01 82 66 F0 | 	shl	_var02, #1
2c070     43 83 02 F1 | 	add	_var02, _var04
2c074     41 83 E2 FA | 	rdword	_var02, _var02
2c078     88 00 90 FD | 	jmp	#LR__4582
2c07c                 | LR__4573
2c07c     41 85 32 F9 | 	getword	_var03, _var02, #0
2c080     41 83 32 F9 | 	getword	_var02, _var02, #0
2c084     44 89 32 F9 | 	getword	_var05, _var05, #0
2c088     44 83 82 F1 | 	sub	_var02, _var05
2c08c     01 82 06 F5 | 	and	_var02, #1
2c090     42 83 C2 F2 | 	subr	_var02, _var03
2c094     6C 00 90 FD | 	jmp	#LR__4582
2c098                 | LR__4574
2c098     41 83 32 F9 | 	getword	_var02, _var02, #0
2c09c     10 82 86 F1 | 	sub	_var02, #16
2c0a0     60 00 90 FD | 	jmp	#LR__4582
2c0a4                 | LR__4575
2c0a4     41 83 32 F9 | 	getword	_var02, _var02, #0
2c0a8     20 82 86 F1 | 	sub	_var02, #32
2c0ac     54 00 90 FD | 	jmp	#LR__4582
2c0b0                 | LR__4576
2c0b0     41 83 32 F9 | 	getword	_var02, _var02, #0
2c0b4     30 82 86 F1 | 	sub	_var02, #48
2c0b8     48 00 90 FD | 	jmp	#LR__4582
2c0bc                 | LR__4577
2c0bc     41 83 32 F9 | 	getword	_var02, _var02, #0
2c0c0     1A 82 86 F1 | 	sub	_var02, #26
2c0c4     3C 00 90 FD | 	jmp	#LR__4582
2c0c8                 | LR__4578
2c0c8     41 83 32 F9 | 	getword	_var02, _var02, #0
2c0cc     08 82 06 F1 | 	add	_var02, #8
2c0d0     30 00 90 FD | 	jmp	#LR__4582
2c0d4                 | LR__4579
2c0d4     41 83 32 F9 | 	getword	_var02, _var02, #0
2c0d8     50 82 86 F1 | 	sub	_var02, #80
2c0dc     24 00 90 FD | 	jmp	#LR__4582
2c0e0                 | LR__4580
2c0e0     41 83 32 F9 | 	getword	_var02, _var02, #0
2c0e4     0E 00 00 FF 
2c0e8     60 82 86 F1 | 	sub	_var02, ##7264
2c0ec                 | ' 				}
2c0ec                 | ' 				break;
2c0ec     14 00 90 FD | 	jmp	#LR__4582
2c0f0                 | LR__4581
2c0f0     0F 8C 4E F7 | 	zerox	_var07, #15 wz
2c0f4     45 8B 32 A9 |  if_e	getword	_var06, _var06, #0
2c0f8     01 8A 66 A0 |  if_e	shl	_var06, #1
2c0fc     45 87 02 A1 |  if_e	add	_var04, _var06
2c100     D4 FE 9F FD | 	jmp	#LR__4570
2c104                 | LR__4582
2c104     41 81 32 F9 | 	getword	_var01, _var02, #0
2c108                 | LR__4583
2c108                 | ' 		}
2c108                 | ' 		uni = uc;
2c108                 | ' 	}
2c108                 | ' 
2c108                 | ' 	return uni;
2c108     40 7B 02 F6 | 	mov	result1, _var01
2c10c                 | _fatfs_cc_ff_wtoupper_ret
2c10c     2D 00 64 FD | 	ret
2c110                 | 
2c110                 | _fatfs_cc_strncpy
2c110     49 81 02 F6 | 	mov	_var01, arg01
2c114     D7 18 48 FB | 	callpa	#(@LR__4591-@LR__4590)>>2,fcache_load_ptr_
2c118                 | ' 
2c118                 | ' 	dscan = dst;
2c118                 | ' 	sscan = src;
2c118                 | ' 	count = n;
2c118                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
2c118                 | LR__4590
2c118     01 96 86 F1 | 	sub	arg03, #1
2c11c     00 96 56 F2 | 	cmps	arg03, #0 wc
2c120     24 00 90 CD |  if_b	jmp	#LR__4592
2c124     4A 7B 02 F6 | 	mov	result1, arg02
2c128     01 7A 06 F1 | 	add	result1, #1
2c12c     4A 83 C2 FA | 	rdbyte	_var02, arg02
2c130     3D 95 02 F6 | 	mov	arg02, result1
2c134     40 83 42 FC | 	wrbyte	_var02, _var01
2c138     41 83 E2 F8 | 	getbyte	_var02, _var02, #0
2c13c     07 82 4E F7 | 	zerox	_var02, #7 wz
2c140                 | ' 		continue;
2c140     01 80 06 F1 | 	add	_var01, #1
2c144     D0 FF 9F 5D |  if_ne	jmp	#LR__4590
2c148                 | LR__4591
2c148                 | LR__4592
2c148     D7 0C 48 FB | 	callpa	#(@LR__4594-@LR__4593)>>2,fcache_load_ptr_
2c14c                 | ' 	while (--count >= 0)
2c14c                 | LR__4593
2c14c     01 96 86 F1 | 	sub	arg03, #1
2c150     00 96 56 F2 | 	cmps	arg03, #0 wc
2c154     40 85 02 36 |  if_ae	mov	_var03, _var01
2c158     01 80 06 31 |  if_ae	add	_var01, #1
2c15c     42 01 48 3C |  if_ae	wrbyte	#0, _var03
2c160     E8 FF 9F 3D |  if_ae	jmp	#LR__4593
2c164                 | LR__4594
2c164                 | ' 		*dscan++ = '\0';
2c164                 | ' 	return(dst);
2c164     49 7B 02 F6 | 	mov	result1, arg01
2c168                 | _fatfs_cc_strncpy_ret
2c168     2D 00 64 FD | 	ret
2c16c                 | 
2c16c                 | _fatfs_cc_memcmp
2c16c                 | ' 	for (n = size; n > 0; n--)
2c16c     00 96 0E F2 | 	cmp	arg03, #0 wz
2c170     28 00 90 AD |  if_e	jmp	#LR__4601
2c174                 | LR__4600
2c174     49 81 C2 FA | 	rdbyte	_var01, arg01
2c178     4A 83 C2 FA | 	rdbyte	_var02, arg02
2c17c     41 81 0A F2 | 	cmp	_var01, _var02 wz
2c180     01 92 06 A1 |  if_e	add	arg01, #1
2c184     01 94 06 A1 |  if_e	add	arg02, #1
2c188                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
2c188     49 7B C2 5A |  if_ne	rdbyte	result1, arg01
2c18c     4A 83 C2 5A |  if_ne	rdbyte	_var02, arg02
2c190     41 7B 82 51 |  if_ne	sub	result1, _var02
2c194     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
2c198     F6 97 6E FB | 	djnz	arg03, #LR__4600
2c19c                 | LR__4601
2c19c                 | ' 
2c19c                 | ' 	return(0);
2c19c     00 7A 06 F6 | 	mov	result1, #0
2c1a0                 | _fatfs_cc_memcmp_ret
2c1a0     2D 00 64 FD | 	ret
2c1a4                 | 
2c1a4                 | _fatfs_cc_strncmp
2c1a4     49 81 0A F6 | 	mov	_var01, arg01 wz
2c1a8     14 00 90 5D |  if_ne	jmp	#LR__4610
2c1ac                 | ' 		return scan2 ? -1 : 0;
2c1ac     00 94 0E F2 | 	cmp	arg02, #0 wz
2c1b0     01 82 66 56 |  if_ne	neg	_var02, #1
2c1b4     00 82 06 A6 |  if_e	mov	_var02, #0
2c1b8     41 7B 02 F6 | 	mov	result1, _var02
2c1bc     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
2c1c0                 | LR__4610
2c1c0     00 94 0E F2 | 	cmp	arg02, #0 wz
2c1c4     01 7A 06 A6 |  if_e	mov	result1, #1
2c1c8     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2c1cc     4B 85 02 F6 | 	mov	_var03, arg03
2c1d0     D7 16 48 FB | 	callpa	#(@LR__4612-@LR__4611)>>2,fcache_load_ptr_
2c1d4                 | ' 	count = n;
2c1d4                 | ' 	do {
2c1d4                 | LR__4611
2c1d4     40 87 C2 FA | 	rdbyte	_var04, _var01
2c1d8     4A 89 02 F6 | 	mov	_var05, arg02
2c1dc     44 8B C2 FA | 	rdbyte	_var06, _var05
2c1e0     01 84 86 F1 | 	sub	_var03, #1
2c1e4     00 84 56 F2 | 	cmps	_var03, #0 wc
2c1e8     01 80 06 F1 | 	add	_var01, #1
2c1ec     01 94 06 F1 | 	add	arg02, #1
2c1f0     00 86 0E 32 |  if_ae	cmp	_var04, #0 wz
2c1f4     08 00 90 2D |  if_nc_and_z	jmp	#LR__4613
2c1f8     45 87 0A 32 |  if_ae	cmp	_var04, _var06 wz
2c1fc     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4611
2c200                 | LR__4612
2c200                 | LR__4613
2c200     00 84 56 F2 | 	cmps	_var03, #0 wc
2c204                 | ' 		return(0);
2c204     00 7A 06 C6 |  if_b	mov	result1, #0
2c208     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
2c20c     45 87 0A F2 | 	cmp	_var04, _var06 wz
2c210                 | ' 		return(0);
2c210     00 7A 06 A6 |  if_e	mov	result1, #0
2c214     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2c218     00 86 0E F2 | 	cmp	_var04, #0 wz
2c21c                 | ' 		return(-1);
2c21c     01 7A 66 A6 |  if_e	neg	result1, #1
2c220     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2c224     00 8A 0E F2 | 	cmp	_var06, #0 wz
2c228                 | ' 		return(1);
2c228     01 7A 06 A6 |  if_e	mov	result1, #1
2c22c                 | ' 		return(c1 - c2);
2c22c     43 7B 02 56 |  if_ne	mov	result1, _var04
2c230     45 7B 82 51 |  if_ne	sub	result1, _var06
2c234                 | _fatfs_cc_strncmp_ret
2c234     2D 00 64 FD | 	ret
2c238                 | 
2c238                 | _fatfs_cc_strchr
2c238                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/libc/string/strchr.c"
2c238                 | ' 	while ((c = *s++) != (char) charwanted)
2c238                 | LR__4620
2c238     49 81 02 F6 | 	mov	_var01, arg01
2c23c     40 83 C2 FA | 	rdbyte	_var02, _var01
2c240     41 85 E2 F8 | 	getbyte	_var03, _var02, #0
2c244     4A 87 E2 F8 | 	getbyte	_var04, arg02, #0
2c248     43 85 0A F2 | 	cmp	_var03, _var04 wz
2c24c     01 92 06 F1 | 	add	arg01, #1
2c250     14 00 90 AD |  if_e	jmp	#LR__4621
2c254     41 85 02 F6 | 	mov	_var03, _var02
2c258     07 84 4E F7 | 	zerox	_var03, #7 wz
2c25c     00 7A 06 A6 |  if_e	mov	result1, #0
2c260     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
2c264     D0 FF 9F FD | 	jmp	#LR__4620
2c268                 | LR__4621
2c268                 | ' 	return((char *)--s);
2c268     01 92 86 F1 | 	sub	arg01, #1
2c26c     49 7B 02 F6 | 	mov	result1, arg01
2c270                 | _fatfs_cc_strchr_ret
2c270     2D 00 64 FD | 	ret
2c274                 | 
2c274                 | _fatfs_cc_time
2c274     01 CA 05 F6 | 	mov	COUNT_, #1
2c278     E8 00 A0 FD | 	call	#pushregs_
2c27c     14 F0 07 F1 | 	add	ptra, #20
2c280     49 A7 02 F6 | 	mov	local01, arg01
2c284     E7 92 02 F6 | 	mov	arg01, fp
2c288     08 92 06 F1 | 	add	arg01, #8
2c28c     00 94 06 F6 | 	mov	arg02, #0
2c290     A0 5E B0 FD | 	call	#_fatfs_cc_gettimeofday
2c294     08 CE 05 F1 | 	add	fp, #8
2c298     E7 7A 02 FB | 	rdlong	result1, fp
2c29c     08 CE 85 F1 | 	sub	fp, #8
2c2a0     00 A6 0E F2 | 	cmp	local01, #0 wz
2c2a4     53 7B 62 5C |  if_ne	wrlong	result1, local01
2c2a8                 | '         *tp = now;
2c2a8                 | '     return now;
2c2a8     E7 F0 03 F6 | 	mov	ptra, fp
2c2ac     F2 00 A0 FD | 	call	#popregs_
2c2b0                 | _fatfs_cc_time_ret
2c2b0     2D 00 64 FD | 	ret
2c2b4                 | 
2c2b4                 | _fatfs_cc_mktime
2c2b4     06 CA 05 F6 | 	mov	COUNT_, #6
2c2b8     E8 00 A0 FD | 	call	#pushregs_
2c2bc     49 A7 02 F6 | 	mov	local01, arg01
2c2c0     14 A6 06 F1 | 	add	local01, #20
2c2c4     53 93 02 FB | 	rdlong	arg01, local01
2c2c8     14 A6 86 F1 | 	sub	local01, #20
2c2cc     46 92 56 F2 | 	cmps	arg01, #70 wc
2c2d0                 | '                 return (time_t) -1;
2c2d0     01 7A 66 C6 |  if_b	neg	result1, #1
2c2d4     78 01 90 CD |  if_b	jmp	#LR__4634
2c2d8     03 00 00 FF 
2c2dc     6C A9 06 F6 | 	mov	local02, ##1900
2c2e0     14 A6 06 F1 | 	add	local01, #20
2c2e4     53 7B 02 FB | 	rdlong	result1, local01
2c2e8     3D A9 02 F1 | 	add	local02, result1
2c2ec     08 A6 86 F1 | 	sub	local01, #8
2c2f0     53 AB 02 FB | 	rdlong	local03, local01
2c2f4     01 AA 86 F1 | 	sub	local03, #1
2c2f8     04 A6 06 F1 | 	add	local01, #4
2c2fc     53 93 02 FB | 	rdlong	arg01, local01
2c300     10 A6 86 F1 | 	sub	local01, #16
2c304     02 92 66 F0 | 	shl	arg01, #2
2c308     36 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
2c30c     02 00 00 FF 
2c310     78 7A 06 F1 | 	add	result1, ##1144
2c314     3D 93 02 F1 | 	add	arg01, result1
2c318     49 7B 02 FB | 	rdlong	result1, arg01
2c31c     3D AB 02 F1 | 	add	local03, result1
2c320     54 93 02 F6 | 	mov	arg01, local02
2c324     B4 5E B0 FD | 	call	#_fatfs_cc__is_leap_year
2c328     00 7A 0E F2 | 	cmp	result1, #0 wz
2c32c     1C 00 90 AD |  if_e	jmp	#LR__4630
2c330     00 AC 06 F6 | 	mov	local04, #0
2c334     10 A6 06 F1 | 	add	local01, #16
2c338     53 7B 02 FB | 	rdlong	result1, local01
2c33c     10 A6 86 F1 | 	sub	local01, #16
2c340     02 7A 56 F2 | 	cmps	result1, #2 wc
2c344     01 AC 06 36 |  if_ae	mov	local04, #1
2c348     04 00 90 FD | 	jmp	#LR__4631
2c34c                 | LR__4630
2c34c     00 AC 06 F6 | 	mov	local04, #0
2c350                 | LR__4631
2c350     04 A6 06 F1 | 	add	local01, #4
2c354     53 93 02 FB | 	rdlong	arg01, local01
2c358     04 A6 86 F1 | 	sub	local01, #4
2c35c     53 AF 02 FB | 	rdlong	local05, local01
2c360     08 A6 06 F1 | 	add	local01, #8
2c364     53 7B 02 FB | 	rdlong	result1, local01
2c368     07 00 00 FF 
2c36c     10 7A 06 FD | 	qmul	result1, ##3600
2c370     56 AB 02 F1 | 	add	local03, local04
2c374     49 AD 02 F6 | 	mov	local04, arg01
2c378     04 AC 66 F0 | 	shl	local04, #4
2c37c     49 AD 82 F1 | 	sub	local04, arg01
2c380     02 AC 66 F0 | 	shl	local04, #2
2c384     56 AF 02 F1 | 	add	local05, local04
2c388     08 A6 86 F1 | 	sub	local01, #8
2c38c     18 AC 62 FD | 	getqx	local04
2c390     A8 00 00 FF 
2c394     80 AB 06 FD | 	qmul	local03, ##86400
2c398     56 AF 02 F1 | 	add	local05, local04
2c39c     54 AB 02 F6 | 	mov	local03, local02
2c3a0     03 00 00 FF 
2c3a4     B2 AB 86 F1 | 	sub	local03, ##1970
2c3a8     18 AC 62 FD | 	getqx	local04
2c3ac     99 F0 00 FF 
2c3b0     80 AB 06 FD | 	qmul	local03, ##31536000
2c3b4     56 AF 02 F1 | 	add	local05, local04
2c3b8     54 AB 02 F6 | 	mov	local03, local02
2c3bc     03 00 00 FF 
2c3c0     B1 AB 86 F1 | 	sub	local03, ##1969
2c3c4     55 B1 52 F6 | 	abs	local06, local03 wc
2c3c8     02 B0 46 F0 | 	shr	local06, #2
2c3cc     58 B1 82 F6 | 	negc	local06, local06
2c3d0     03 00 00 FF 
2c3d4     D1 A9 56 F2 | 	cmps	local02, ##2001 wc
2c3d8     18 AC 62 FD | 	getqx	local04
2c3dc     56 AF 02 F1 | 	add	local05, local04
2c3e0     18 00 90 CD |  if_b	jmp	#LR__4632
2c3e4     03 00 00 FF 
2c3e8     D0 A9 86 F1 | 	sub	local02, ##2000
2c3ec     54 AD 52 F6 | 	abs	local04, local02 wc
2c3f0     64 AC 16 FD | 	qdiv	local04, #100
2c3f4     18 AC 62 FD | 	getqx	local04
2c3f8     56 B1 A2 F3 | 	sumnc	local06, local04
2c3fc                 | LR__4632
2c3fc     A8 00 00 FF 
2c400     80 B1 06 FD | 	qmul	local06, ##86400
2c404     18 B0 62 FD | 	getqx	local06
2c408     58 AF 02 F1 | 	add	local05, local06
2c40c     E8 01 B0 FD | 	call	#_fatfs_cc__tzset
2c410     02 00 00 FF 
2c414     44 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1092
2c418     36 B1 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
2c41c     58 AF 02 F1 | 	add	local05, local06
2c420     68 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, #104
2c424     36 AB 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2c428     02 00 00 FF 
2c42c     AC 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1196
2c430     01 AA 0E F2 | 	cmp	local03, #1 wz
2c434     14 00 90 5D |  if_ne	jmp	#LR__4633
2c438     53 93 02 F6 | 	mov	arg01, local01
2c43c     88 60 B0 FD | 	call	#_fatfs_cc___indst
2c440     00 7A 0E F2 | 	cmp	result1, #0 wz
2c444     07 00 00 5F 
2c448     10 AE 86 51 |  if_ne	sub	local05, ##3600
2c44c                 | LR__4633
2c44c                 | '                 s -=  (3600L) ;
2c44c                 | ' 
2c44c                 | '         return s;
2c44c     57 7B 02 F6 | 	mov	result1, local05
2c450                 | LR__4634
2c450     E7 F0 03 F6 | 	mov	ptra, fp
2c454     F2 00 A0 FD | 	call	#popregs_
2c458                 | _fatfs_cc_mktime_ret
2c458     2D 00 64 FD | 	ret
2c45c                 | 
2c45c                 | _fatfs_cc__gmtime_r
2c45c     03 CA 05 F6 | 	mov	COUNT_, #3
2c460     E8 00 A0 FD | 	call	#pushregs_
2c464     49 A7 02 FB | 	rdlong	local01, arg01
2c468     A8 00 00 FF 
2c46c     80 A7 16 FD | 	qdiv	local01, ##86400
2c470     18 7A 62 FD | 	getqx	result1
2c474     04 7A 06 F1 | 	add	result1, #4
2c478     07 7A 16 FD | 	qdiv	result1, #7
2c47c     18 94 06 F1 | 	add	arg02, #24
2c480     D1 7F 27 FF 
2c484     00 A6 16 F2 | 	cmp	local01, ##1325376000 wc
2c488     D1 7F 27 3F 
2c48c     00 A6 86 31 |  if_ae	sub	local01, ##1325376000
2c490     03 00 00 3F 
2c494     DC A9 06 36 |  if_ae	mov	local02, ##2012
2c498     03 00 00 CF 
2c49c     B2 A9 06 C6 |  if_b	mov	local02, ##1970
2c4a0                 | ' 	  year = 1970;
2c4a0                 | ' 	}
2c4a0                 | ' 
2c4a0                 | ' 	for(;;) {
2c4a0     19 7A 62 FD | 	getqy	result1
2c4a4     4A 7B 62 FC | 	wrlong	result1, arg02
2c4a8     18 94 86 F1 | 	sub	arg02, #24
2c4ac                 | LR__4640
2c4ac     54 93 02 F6 | 	mov	arg01, local02
2c4b0     28 5D B0 FD | 	call	#_fatfs_cc__is_leap_year
2c4b4     00 7A 0E F2 | 	cmp	result1, #0 wz
2c4b8     42 F1 00 5F 
2c4bc     00 AB 06 56 |  if_ne	mov	local03, ##31622400
2c4c0     99 F0 00 AF 
2c4c4     80 AB 06 A6 |  if_e	mov	local03, ##31536000
2c4c8     55 A7 12 F2 | 	cmp	local01, local03 wc
2c4cc                 | ' 	    break;
2c4cc     01 A8 06 31 |  if_ae	add	local02, #1
2c4d0     55 A7 82 31 |  if_ae	sub	local01, local03
2c4d4     D4 FF 9F 3D |  if_ae	jmp	#LR__4640
2c4d8     A8 00 00 FF 
2c4dc     80 A7 16 FD | 	qdiv	local01, ##86400
2c4e0     54 AB 02 F6 | 	mov	local03, local02
2c4e4     03 00 00 FF 
2c4e8     6C AB 86 F1 | 	sub	local03, ##1900
2c4ec     14 94 06 F1 | 	add	arg02, #20
2c4f0     4A AB 62 FC | 	wrlong	local03, arg02
2c4f4     08 94 06 F1 | 	add	arg02, #8
2c4f8     54 93 02 F6 | 	mov	arg01, local02
2c4fc     18 A8 62 FD | 	getqx	local02
2c500     4A A9 62 FC | 	wrlong	local02, arg02
2c504     1C 94 86 F1 | 	sub	arg02, #28
2c508     D0 5C B0 FD | 	call	#_fatfs_cc__is_leap_year
2c50c     00 7A 0E F2 | 	cmp	result1, #0 wz
2c510     1D AA 06 56 |  if_ne	mov	local03, #29
2c514     1C AA 06 A6 |  if_e	mov	local03, #28
2c518     02 00 00 FF 
2c51c     4C 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1100
2c520     36 AB 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
2c524     02 00 00 FF 
2c528     4C 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1100
2c52c                 | ' 
2c52c                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
2c52c                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
2c52c     00 92 06 F6 | 	mov	arg01, #0
2c530     D7 26 48 FB | 	callpa	#(@LR__4642-@LR__4641)>>2,fcache_load_ptr_
2c534                 | LR__4641
2c534     49 AB 02 F6 | 	mov	local03, arg01
2c538     02 AA 66 F0 | 	shl	local03, #2
2c53c     36 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
2c540     02 00 00 FF 
2c544     48 7A 06 F1 | 	add	result1, ##1096
2c548     3D AB 02 F1 | 	add	local03, result1
2c54c     55 AB 02 FB | 	rdlong	local03, local03
2c550     55 A9 52 F2 | 	cmps	local02, local03 wc
2c554     28 00 90 CD |  if_b	jmp	#LR__4643
2c558     49 7B 02 F6 | 	mov	result1, arg01
2c55c     02 7A 66 F0 | 	shl	result1, #2
2c560     36 AB 02 F6 | 	mov	local03, ptr__fatfs_cc_dat__
2c564     02 00 00 FF 
2c568     48 AA 06 F1 | 	add	local03, ##1096
2c56c     55 7B 02 F1 | 	add	result1, local03
2c570     3D 7B 02 FB | 	rdlong	result1, result1
2c574     3D A9 82 F1 | 	sub	local02, result1
2c578     01 92 06 F1 | 	add	arg01, #1
2c57c     B4 FF 9F FD | 	jmp	#LR__4641
2c580                 | LR__4642
2c580                 | LR__4643
2c580     A8 00 00 FF 
2c584     80 A7 16 FD | 	qdiv	local01, ##86400
2c588     10 94 06 F1 | 	add	arg02, #16
2c58c     4A 93 62 FC | 	wrlong	arg01, arg02
2c590     01 A8 06 F1 | 	add	local02, #1
2c594     04 94 86 F1 | 	sub	arg02, #4
2c598     4A A9 62 FC | 	wrlong	local02, arg02
2c59c     19 A6 62 FD | 	getqy	local01
2c5a0     07 00 00 FF 
2c5a4     10 A6 16 FD | 	qdiv	local01, ##3600
2c5a8     18 AA 62 FD | 	getqx	local03
2c5ac     07 00 00 FF 
2c5b0     10 A6 16 FD | 	qdiv	local01, ##3600
2c5b4     04 94 86 F1 | 	sub	arg02, #4
2c5b8     4A AB 62 FC | 	wrlong	local03, arg02
2c5bc     19 A6 62 FD | 	getqy	local01
2c5c0     3C A6 16 FD | 	qdiv	local01, #60
2c5c4     18 AA 62 FD | 	getqx	local03
2c5c8     3C A6 16 FD | 	qdiv	local01, #60
2c5cc     04 94 86 F1 | 	sub	arg02, #4
2c5d0     4A AB 62 FC | 	wrlong	local03, arg02
2c5d4     04 94 86 F1 | 	sub	arg02, #4
2c5d8                 | '         stm->tm_isdst = 0;
2c5d8                 | ' 
2c5d8                 | ' ;
2c5d8                 | '         return stm;
2c5d8     4A 7B 02 F6 | 	mov	result1, arg02
2c5dc     19 AA 62 FD | 	getqy	local03
2c5e0     4A AB 62 FC | 	wrlong	local03, arg02
2c5e4     20 94 06 F1 | 	add	arg02, #32
2c5e8     4A 01 68 FC | 	wrlong	#0, arg02
2c5ec     E7 F0 03 F6 | 	mov	ptra, fp
2c5f0     F2 00 A0 FD | 	call	#popregs_
2c5f4                 | _fatfs_cc__gmtime_r_ret
2c5f4     2D 00 64 FD | 	ret
2c5f8                 | 
2c5f8                 | _fatfs_cc__tzset
2c5f8     94 01 00 FF 
2c5fc     54 92 06 F6 | 	mov	arg01, ##@LR__5492
2c600     0C 50 B0 FD | 	call	#_fatfs_cc_getenv
2c604     3D 93 02 F6 | 	mov	arg01, result1
2c608     36 95 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
2c60c     02 00 00 FF 
2c610     AC 94 06 F1 | 	add	arg02, ##1196
2c614     14 5C B0 FD | 	call	#_fatfs_cc___tzoffset
2c618     02 00 00 FF 
2c61c     44 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1092
2c620     36 7B 62 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
2c624     02 00 00 FF 
2c628     44 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1092
2c62c                 | _fatfs_cc__tzset_ret
2c62c     2D 00 64 FD | 	ret
2c630                 | 
2c630                 | _fatfs_cc_disk_read
2c630     09 CA 05 F6 | 	mov	COUNT_, #9
2c634     E8 00 A0 FD | 	call	#pushregs_
2c638     4A AF 02 F6 | 	mov	local05, arg02
2c63c     4C B1 02 F6 | 	mov	local06, arg04
2c640     4B 93 02 F6 | 	mov	arg01, arg03
2c644     00 94 06 F6 | 	mov	arg02, #0
2c648     09 96 06 F6 | 	mov	arg03, #9
2c64c     00 98 06 F6 | 	mov	arg04, #0
2c650     94 A8 BF FD | 	call	#__system___int64_shl
2c654     3D A7 02 F6 | 	mov	local01, result1
2c658     3E A9 02 F6 | 	mov	local02, result2
2c65c     01 00 00 FF 
2c660     10 64 06 F1 | 	add	objptr, ##528
2c664     32 7D 0A FB | 	rdlong	result2, objptr wz
2c668     01 00 00 FF 
2c66c     10 64 86 F1 | 	sub	objptr, ##528
2c670                 | '         return RES_NOTRDY;
2c670     03 7A 06 A6 |  if_e	mov	result1, #3
2c674     E8 00 90 AD |  if_e	jmp	#LR__4650
2c678     53 95 02 F6 | 	mov	arg02, local01
2c67c     54 97 02 F6 | 	mov	arg03, local02
2c680     01 00 00 FF 
2c684     10 64 06 F1 | 	add	objptr, ##528
2c688     32 93 02 FB | 	rdlong	arg01, objptr
2c68c     49 99 02 F6 | 	mov	arg04, arg01
2c690     30 98 06 F1 | 	add	arg04, #48
2c694     4C B3 02 FB | 	rdlong	local07, arg04
2c698     59 B5 02 F6 | 	mov	local08, local07
2c69c     13 B2 46 F7 | 	zerox	local07, #19
2c6a0     14 B4 46 F0 | 	shr	local08, #20
2c6a4     02 B4 66 F0 | 	shl	local08, #2
2c6a8     2D B5 02 F1 | 	add	local08, __methods__
2c6ac     5A B5 02 FB | 	rdlong	local08, local08
2c6b0     01 00 00 FF 
2c6b4     10 64 86 F1 | 	sub	objptr, ##528
2c6b8     00 98 06 F6 | 	mov	arg04, #0
2c6bc     32 B7 02 F6 | 	mov	local09, objptr
2c6c0     59 65 02 F6 | 	mov	objptr, local07
2c6c4     2D B4 62 FD | 	call	local08
2c6c8     5B 65 02 F6 | 	mov	objptr, local09
2c6cc     3D AB 02 F6 | 	mov	local03, result1
2c6d0     3E AD 02 F6 | 	mov	local04, result2
2c6d4     55 93 02 F6 | 	mov	arg01, local03
2c6d8     56 95 02 F6 | 	mov	arg02, local04
2c6dc     53 97 02 F6 | 	mov	arg03, local01
2c6e0     54 99 02 F6 | 	mov	arg04, local02
2c6e4     00 7A 06 F6 | 	mov	result1, #0
2c6e8     4B 93 1A F2 | 	cmp	arg01, arg03 wcz
2c6ec     4C 95 7A F2 | 	cmpsx	arg02, arg04 wcz
2c6f0     01 7A 86 56 |  if_ne	negc	result1, #1
2c6f4     00 7A 0E F2 | 	cmp	result1, #0 wz
2c6f8                 | '         return RES_ERROR;
2c6f8     01 7A 06 56 |  if_ne	mov	result1, #1
2c6fc     60 00 90 5D |  if_ne	jmp	#LR__4650
2c700     09 B0 66 F0 | 	shl	local06, #9
2c704     01 00 00 FF 
2c708     10 64 06 F1 | 	add	objptr, ##528
2c70c     32 93 02 FB | 	rdlong	arg01, objptr
2c710     49 AB 02 F6 | 	mov	local03, arg01
2c714     14 AA 06 F1 | 	add	local03, #20
2c718     55 AB 02 FB | 	rdlong	local03, local03
2c71c     55 B7 02 F6 | 	mov	local09, local03
2c720     13 B6 46 F7 | 	zerox	local09, #19
2c724     14 AA 46 F0 | 	shr	local03, #20
2c728     02 AA 66 F0 | 	shl	local03, #2
2c72c     2D AB 02 F1 | 	add	local03, __methods__
2c730     55 AB 02 FB | 	rdlong	local03, local03
2c734     01 00 00 FF 
2c738     10 64 86 F1 | 	sub	objptr, ##528
2c73c     57 95 02 F6 | 	mov	arg02, local05
2c740     58 97 02 F6 | 	mov	arg03, local06
2c744     32 B5 02 F6 | 	mov	local08, objptr
2c748     5B 65 02 F6 | 	mov	objptr, local09
2c74c     2D AA 62 FD | 	call	local03
2c750     5A 65 02 F6 | 	mov	objptr, local08
2c754     58 7B 0A F2 | 	cmp	result1, local06 wz
2c758                 | '         return RES_ERROR;
2c758     01 7A 06 56 |  if_ne	mov	result1, #1
2c75c                 | '     }
2c75c                 | '     return RES_OK;
2c75c     00 7A 06 A6 |  if_e	mov	result1, #0
2c760                 | LR__4650
2c760     E7 F0 03 F6 | 	mov	ptra, fp
2c764     F2 00 A0 FD | 	call	#popregs_
2c768                 | _fatfs_cc_disk_read_ret
2c768     2D 00 64 FD | 	ret
2c76c                 | 
2c76c                 | _fatfs_cc_disk_write
2c76c     09 CA 05 F6 | 	mov	COUNT_, #9
2c770     E8 00 A0 FD | 	call	#pushregs_
2c774     4A AF 02 F6 | 	mov	local05, arg02
2c778     4C B1 02 F6 | 	mov	local06, arg04
2c77c     4B 93 02 F6 | 	mov	arg01, arg03
2c780     00 94 06 F6 | 	mov	arg02, #0
2c784     09 96 06 F6 | 	mov	arg03, #9
2c788     00 98 06 F6 | 	mov	arg04, #0
2c78c     58 A7 BF FD | 	call	#__system___int64_shl
2c790     3D A7 02 F6 | 	mov	local01, result1
2c794     3E A9 02 F6 | 	mov	local02, result2
2c798     01 00 00 FF 
2c79c     10 64 06 F1 | 	add	objptr, ##528
2c7a0     32 7D 0A FB | 	rdlong	result2, objptr wz
2c7a4     01 00 00 FF 
2c7a8     10 64 86 F1 | 	sub	objptr, ##528
2c7ac                 | '         return RES_NOTRDY;
2c7ac     03 7A 06 A6 |  if_e	mov	result1, #3
2c7b0     E8 00 90 AD |  if_e	jmp	#LR__4660
2c7b4     53 95 02 F6 | 	mov	arg02, local01
2c7b8     54 97 02 F6 | 	mov	arg03, local02
2c7bc     01 00 00 FF 
2c7c0     10 64 06 F1 | 	add	objptr, ##528
2c7c4     32 93 02 FB | 	rdlong	arg01, objptr
2c7c8     49 99 02 F6 | 	mov	arg04, arg01
2c7cc     30 98 06 F1 | 	add	arg04, #48
2c7d0     4C B3 02 FB | 	rdlong	local07, arg04
2c7d4     59 B5 02 F6 | 	mov	local08, local07
2c7d8     13 B2 46 F7 | 	zerox	local07, #19
2c7dc     14 B4 46 F0 | 	shr	local08, #20
2c7e0     02 B4 66 F0 | 	shl	local08, #2
2c7e4     2D B5 02 F1 | 	add	local08, __methods__
2c7e8     5A B5 02 FB | 	rdlong	local08, local08
2c7ec     01 00 00 FF 
2c7f0     10 64 86 F1 | 	sub	objptr, ##528
2c7f4     00 98 06 F6 | 	mov	arg04, #0
2c7f8     32 B7 02 F6 | 	mov	local09, objptr
2c7fc     59 65 02 F6 | 	mov	objptr, local07
2c800     2D B4 62 FD | 	call	local08
2c804     5B 65 02 F6 | 	mov	objptr, local09
2c808     3D AB 02 F6 | 	mov	local03, result1
2c80c     3E AD 02 F6 | 	mov	local04, result2
2c810     55 93 02 F6 | 	mov	arg01, local03
2c814     56 95 02 F6 | 	mov	arg02, local04
2c818     53 97 02 F6 | 	mov	arg03, local01
2c81c     54 99 02 F6 | 	mov	arg04, local02
2c820     00 7A 06 F6 | 	mov	result1, #0
2c824     4B 93 1A F2 | 	cmp	arg01, arg03 wcz
2c828     4C 95 7A F2 | 	cmpsx	arg02, arg04 wcz
2c82c     01 7A 86 56 |  if_ne	negc	result1, #1
2c830     00 7A 0E F2 | 	cmp	result1, #0 wz
2c834                 | '         return RES_ERROR;
2c834     01 7A 06 56 |  if_ne	mov	result1, #1
2c838     60 00 90 5D |  if_ne	jmp	#LR__4660
2c83c     09 B0 66 F0 | 	shl	local06, #9
2c840     01 00 00 FF 
2c844     10 64 06 F1 | 	add	objptr, ##528
2c848     32 93 02 FB | 	rdlong	arg01, objptr
2c84c     49 AB 02 F6 | 	mov	local03, arg01
2c850     18 AA 06 F1 | 	add	local03, #24
2c854     55 AB 02 FB | 	rdlong	local03, local03
2c858     55 B7 02 F6 | 	mov	local09, local03
2c85c     13 B6 46 F7 | 	zerox	local09, #19
2c860     14 AA 46 F0 | 	shr	local03, #20
2c864     02 AA 66 F0 | 	shl	local03, #2
2c868     2D AB 02 F1 | 	add	local03, __methods__
2c86c     55 AB 02 FB | 	rdlong	local03, local03
2c870     01 00 00 FF 
2c874     10 64 86 F1 | 	sub	objptr, ##528
2c878     57 95 02 F6 | 	mov	arg02, local05
2c87c     58 97 02 F6 | 	mov	arg03, local06
2c880     32 B5 02 F6 | 	mov	local08, objptr
2c884     5B 65 02 F6 | 	mov	objptr, local09
2c888     2D AA 62 FD | 	call	local03
2c88c     5A 65 02 F6 | 	mov	objptr, local08
2c890     58 7B 0A F2 | 	cmp	result1, local06 wz
2c894                 | '         return RES_ERROR;
2c894     01 7A 06 56 |  if_ne	mov	result1, #1
2c898                 | '     }
2c898                 | '     return RES_OK;
2c898     00 7A 06 A6 |  if_e	mov	result1, #0
2c89c                 | LR__4660
2c89c     E7 F0 03 F6 | 	mov	ptra, fp
2c8a0     F2 00 A0 FD | 	call	#popregs_
2c8a4                 | _fatfs_cc_disk_write_ret
2c8a4     2D 00 64 FD | 	ret
2c8a8                 | 
2c8a8                 | _fatfs_cc_disk_ioctl
2c8a8     03 CA 05 F6 | 	mov	COUNT_, #3
2c8ac     E8 00 A0 FD | 	call	#pushregs_
2c8b0     01 00 00 FF 
2c8b4     10 64 06 F1 | 	add	objptr, ##528
2c8b8     32 93 0A FB | 	rdlong	arg01, objptr wz
2c8bc     01 00 00 FF 
2c8c0     10 64 86 F1 | 	sub	objptr, ##528
2c8c4                 | '         return RES_NOTRDY;
2c8c4     03 7A 06 A6 |  if_e	mov	result1, #3
2c8c8     58 00 90 AD |  if_e	jmp	#LR__4670
2c8cc     01 00 00 FF 
2c8d0     10 64 06 F1 | 	add	objptr, ##528
2c8d4     32 93 02 FB | 	rdlong	arg01, objptr
2c8d8     49 A7 02 F6 | 	mov	local01, arg01
2c8dc     28 A6 06 F1 | 	add	local01, #40
2c8e0     53 A7 02 FB | 	rdlong	local01, local01
2c8e4     53 A9 02 F6 | 	mov	local02, local01
2c8e8     13 A8 46 F7 | 	zerox	local02, #19
2c8ec     14 A6 46 F0 | 	shr	local01, #20
2c8f0     02 A6 66 F0 | 	shl	local01, #2
2c8f4     2D A7 02 F1 | 	add	local01, __methods__
2c8f8     53 A7 02 FB | 	rdlong	local01, local01
2c8fc     01 00 00 FF 
2c900     10 64 86 F1 | 	sub	objptr, ##528
2c904     4A 95 E2 F8 | 	getbyte	arg02, arg02, #0
2c908     32 AB 02 F6 | 	mov	local03, objptr
2c90c     54 65 02 F6 | 	mov	objptr, local02
2c910     2D A6 62 FD | 	call	local01
2c914     55 65 02 F6 | 	mov	objptr, local03
2c918     00 7A 0E F2 | 	cmp	result1, #0 wz
2c91c                 | '         return RES_ERROR;
2c91c     01 7A 06 56 |  if_ne	mov	result1, #1
2c920                 | '     return RES_OK;
2c920     00 7A 06 A6 |  if_e	mov	result1, #0
2c924                 | LR__4670
2c924     E7 F0 03 F6 | 	mov	ptra, fp
2c928     F2 00 A0 FD | 	call	#popregs_
2c92c                 | _fatfs_cc_disk_ioctl_ret
2c92c     2D 00 64 FD | 	ret
2c930                 | 
2c930                 | _fatfs_cc_tchar2uni
2c930     49 81 02 FB | 	rdlong	_var01, arg01
2c934     40 83 02 F6 | 	mov	_var02, _var01
2c938     01 80 06 F1 | 	add	_var01, #1
2c93c     40 85 02 F6 | 	mov	_var03, _var01
2c940     41 87 C2 FA | 	rdbyte	_var04, _var02
2c944     80 86 CE F7 | 	test	_var04, #128 wz
2c948     E8 00 90 AD |  if_e	jmp	#LR__4687
2c94c     43 89 02 F6 | 	mov	_var05, _var04
2c950     E0 88 06 F5 | 	and	_var05, #224
2c954     C0 88 0E F2 | 	cmp	_var05, #192 wz
2c958     1F 86 06 A5 |  if_e	and	_var04, #31
2c95c     01 8A 06 A6 |  if_e	mov	_var06, #1
2c960     34 00 90 AD |  if_e	jmp	#LR__4681
2c964     43 89 02 F6 | 	mov	_var05, _var04
2c968     F0 88 06 F5 | 	and	_var05, #240
2c96c     E0 88 0E F2 | 	cmp	_var05, #224 wz
2c970     43 87 42 A8 |  if_e	getnib	_var04, _var04, #0
2c974     02 8A 06 A6 |  if_e	mov	_var06, #2
2c978     1C 00 90 AD |  if_e	jmp	#LR__4680
2c97c     43 89 02 F6 | 	mov	_var05, _var04
2c980     F8 88 06 F5 | 	and	_var05, #248
2c984     F0 88 0E F2 | 	cmp	_var05, #240 wz
2c988     07 86 06 A5 |  if_e	and	_var04, #7
2c98c     03 8A 06 A6 |  if_e	mov	_var06, #3
2c990                 | ' 			return 0xFFFFFFFF;
2c990     01 7A 66 56 |  if_ne	neg	result1, #1
2c994     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2c998                 | LR__4680
2c998                 | LR__4681
2c998                 | ' 		}
2c998                 | ' 		do {
2c998                 | LR__4682
2c998     42 8D C2 FA | 	rdbyte	_var07, _var03
2c99c     46 89 E2 F8 | 	getbyte	_var05, _var07, #0
2c9a0     C0 88 06 F5 | 	and	_var05, #192
2c9a4     80 88 0E F2 | 	cmp	_var05, #128 wz
2c9a8     01 84 06 F1 | 	add	_var03, #1
2c9ac     01 7A 66 56 |  if_ne	neg	result1, #1
2c9b0     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2c9b4     06 86 66 F0 | 	shl	_var04, #6
2c9b8     46 83 E2 F8 | 	getbyte	_var02, _var07, #0
2c9bc     3F 82 06 F5 | 	and	_var02, #63
2c9c0     41 87 42 F5 | 	or	_var04, _var02
2c9c4     F4 8B 6E FB | 	djnz	_var06, #LR__4682
2c9c8     80 86 16 F2 | 	cmp	_var04, #128 wc
2c9cc     24 00 90 CD |  if_b	jmp	#LR__4684
2c9d0     6C 00 00 FF 
2c9d4     00 86 16 F2 | 	cmp	_var04, ##55296 wc
2c9d8     0C 00 90 CD |  if_b	jmp	#LR__4683
2c9dc     70 00 00 FF 
2c9e0     00 86 16 F2 | 	cmp	_var04, ##57344 wc
2c9e4     0C 00 90 CD |  if_b	jmp	#LR__4684
2c9e8                 | LR__4683
2c9e8     80 08 00 FF 
2c9ec     00 86 16 F2 | 	cmp	_var04, ##1114112 wc
2c9f0     08 00 90 CD |  if_b	jmp	#LR__4685
2c9f4                 | LR__4684
2c9f4     01 7A 66 F6 | 	neg	result1, #1
2c9f8     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
2c9fc                 | LR__4685
2c9fc     80 00 00 FF 
2ca00     00 86 16 F2 | 	cmp	_var04, ##65536 wc
2ca04     2C 00 90 CD |  if_b	jmp	#LR__4686
2ca08     43 83 02 F6 | 	mov	_var02, _var04
2ca0c     80 00 00 FF 
2ca10     00 82 86 F1 | 	sub	_var02, ##65536
2ca14     06 82 66 F0 | 	shl	_var02, #6
2ca18     80 FF 01 FF 
2ca1c     00 82 06 F5 | 	and	_var02, ##67043328
2ca20     6E 00 6C FF 
2ca24     00 88 06 F6 | 	mov	_var05, ##-671032320
2ca28     41 89 42 F5 | 	or	_var05, _var02
2ca2c     09 86 46 F7 | 	zerox	_var04, #9
2ca30     44 87 42 F5 | 	or	_var04, _var05
2ca34                 | LR__4686
2ca34                 | LR__4687
2ca34     49 85 62 FC | 	wrlong	_var03, arg01
2ca38                 | ' 	}
2ca38                 | ' #line 811 "ff.c"
2ca38                 | ' 	*str = p;
2ca38                 | ' 	return uc;
2ca38     43 7B 02 F6 | 	mov	result1, _var04
2ca3c                 | _fatfs_cc_tchar2uni_ret
2ca3c     2D 00 64 FD | 	ret
2ca40                 | 
2ca40                 | _fatfs_cc_put_utf
2ca40     80 92 16 F2 | 	cmp	arg01, #128 wc
2ca44     18 00 90 3D |  if_ae	jmp	#LR__4690
2ca48     01 96 16 F2 | 	cmp	arg03, #1 wc
2ca4c     00 7A 06 C6 |  if_b	mov	result1, #0
2ca50     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2ca54     4A 93 42 FC | 	wrbyte	arg01, arg02
2ca58                 | ' 		*buf = (TCHAR)chr;
2ca58                 | ' 		return 1;
2ca58     01 7A 06 F6 | 	mov	result1, #1
2ca5c     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2ca60                 | LR__4690
2ca60     04 00 00 FF 
2ca64     00 92 16 F2 | 	cmp	arg01, ##2048 wc
2ca68     40 00 90 3D |  if_ae	jmp	#LR__4691
2ca6c     02 96 16 F2 | 	cmp	arg03, #2 wc
2ca70     00 7A 06 C6 |  if_b	mov	result1, #0
2ca74     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2ca78     49 7B 02 F6 | 	mov	result1, arg01
2ca7c     06 7A 46 F0 | 	shr	result1, #6
2ca80     1F 7A 06 F5 | 	and	result1, #31
2ca84     C0 96 06 F6 | 	mov	arg03, #192
2ca88     3D 97 42 F5 | 	or	arg03, result1
2ca8c     4A 97 42 FC | 	wrbyte	arg03, arg02
2ca90     01 94 06 F1 | 	add	arg02, #1
2ca94     3F 92 06 F5 | 	and	arg01, #63
2ca98     80 7A 06 F6 | 	mov	result1, #128
2ca9c     49 7B 42 F5 | 	or	result1, arg01
2caa0     4A 7B 42 FC | 	wrbyte	result1, arg02
2caa4                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
2caa4                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2caa4                 | ' 		return 2;
2caa4     02 7A 06 F6 | 	mov	result1, #2
2caa8     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2caac                 | LR__4691
2caac     80 00 00 FF 
2cab0     00 92 16 F2 | 	cmp	arg01, ##65536 wc
2cab4     70 00 90 3D |  if_ae	jmp	#LR__4694
2cab8     03 96 16 F2 | 	cmp	arg03, #3 wc
2cabc     18 00 90 CD |  if_b	jmp	#LR__4692
2cac0     6C 00 00 FF 
2cac4     00 92 16 F2 | 	cmp	arg01, ##55296 wc
2cac8     14 00 90 CD |  if_b	jmp	#LR__4693
2cacc     70 00 00 FF 
2cad0     00 92 16 F2 | 	cmp	arg01, ##57344 wc
2cad4     08 00 90 3D |  if_ae	jmp	#LR__4693
2cad8                 | LR__4692
2cad8     00 7A 06 F6 | 	mov	result1, #0
2cadc     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2cae0                 | LR__4693
2cae0     49 7B 5A F8 | 	getnib	result1, arg01, #3
2cae4     E0 96 06 F6 | 	mov	arg03, #224
2cae8     3D 97 42 F5 | 	or	arg03, result1
2caec     4A 97 42 FC | 	wrbyte	arg03, arg02
2caf0     01 94 06 F1 | 	add	arg02, #1
2caf4     49 7B 02 F6 | 	mov	result1, arg01
2caf8     06 7A 46 F0 | 	shr	result1, #6
2cafc     3F 7A 06 F5 | 	and	result1, #63
2cb00     80 96 06 F6 | 	mov	arg03, #128
2cb04     3D 97 42 F5 | 	or	arg03, result1
2cb08     4A 97 42 FC | 	wrbyte	arg03, arg02
2cb0c     01 94 06 F1 | 	add	arg02, #1
2cb10     3F 92 06 F5 | 	and	arg01, #63
2cb14     80 7A 06 F6 | 	mov	result1, #128
2cb18     49 7B 42 F5 | 	or	result1, arg01
2cb1c     4A 7B 42 FC | 	wrbyte	result1, arg02
2cb20                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
2cb20                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2cb20                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2cb20                 | ' 		return 3;
2cb20     03 7A 06 F6 | 	mov	result1, #3
2cb24     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2cb28                 | LR__4694
2cb28     04 96 16 F2 | 	cmp	arg03, #4 wc
2cb2c     00 7A 06 C6 |  if_b	mov	result1, #0
2cb30     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2cb34     49 81 02 F6 | 	mov	_var01, arg01
2cb38     E0 81 06 F4 | 	bitl	_var01, #480
2cb3c     00 00 6C FF 
2cb40     00 80 86 F1 | 	sub	_var01, ##-671088640
2cb44     06 80 46 F0 | 	shr	_var01, #6
2cb48     49 93 32 F9 | 	getword	arg01, arg01, #0
2cb4c     6E 00 00 FF 
2cb50     00 92 86 F1 | 	sub	arg01, ##56320
2cb54     00 08 00 FF 
2cb58     00 80 16 F2 | 	cmp	_var01, ##1048576 wc
2cb5c     02 00 00 CF 
2cb60     00 92 16 C2 |  if_b	cmp	arg01, ##1024 wc
2cb64     00 7A 06 36 |  if_ae	mov	result1, #0
2cb68     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
2cb6c     49 81 42 F5 | 	or	_var01, arg01
2cb70     80 00 00 FF 
2cb74     00 80 06 F1 | 	add	_var01, ##65536
2cb78     40 7B 02 F6 | 	mov	result1, _var01
2cb7c     12 7A 46 F0 | 	shr	result1, #18
2cb80     07 7A 06 F5 | 	and	result1, #7
2cb84     F0 96 06 F6 | 	mov	arg03, #240
2cb88     3D 97 42 F5 | 	or	arg03, result1
2cb8c     4A 97 42 FC | 	wrbyte	arg03, arg02
2cb90     01 94 06 F1 | 	add	arg02, #1
2cb94     40 7B 02 F6 | 	mov	result1, _var01
2cb98     0C 7A 46 F0 | 	shr	result1, #12
2cb9c     3F 7A 06 F5 | 	and	result1, #63
2cba0     80 96 06 F6 | 	mov	arg03, #128
2cba4     3D 97 42 F5 | 	or	arg03, result1
2cba8     4A 97 42 FC | 	wrbyte	arg03, arg02
2cbac     01 94 06 F1 | 	add	arg02, #1
2cbb0     40 7B 02 F6 | 	mov	result1, _var01
2cbb4     06 7A 46 F0 | 	shr	result1, #6
2cbb8     3F 7A 06 F5 | 	and	result1, #63
2cbbc     80 96 06 F6 | 	mov	arg03, #128
2cbc0     3D 97 42 F5 | 	or	arg03, result1
2cbc4     4A 97 42 FC | 	wrbyte	arg03, arg02
2cbc8     01 94 06 F1 | 	add	arg02, #1
2cbcc     3F 80 06 F5 | 	and	_var01, #63
2cbd0     80 7A 06 F6 | 	mov	result1, #128
2cbd4     40 7B 42 F5 | 	or	result1, _var01
2cbd8     4A 7B 42 FC | 	wrbyte	result1, arg02
2cbdc                 | ' 	chr = (hc | chr) + 0x10000;
2cbdc                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
2cbdc                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
2cbdc                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2cbdc                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2cbdc                 | ' 	return 4;
2cbdc     04 7A 06 F6 | 	mov	result1, #4
2cbe0                 | _fatfs_cc_put_utf_ret
2cbe0     2D 00 64 FD | 	ret
2cbe4                 | 
2cbe4                 | _fatfs_cc_sync_window
2cbe4     02 CA 05 F6 | 	mov	COUNT_, #2
2cbe8     E8 00 A0 FD | 	call	#pushregs_
2cbec     49 A7 02 F6 | 	mov	local01, arg01
2cbf0     00 A8 06 F6 | 	mov	local02, #0
2cbf4     03 A6 06 F1 | 	add	local01, #3
2cbf8     53 7B CA FA | 	rdbyte	result1, local01 wz
2cbfc     03 A6 86 F1 | 	sub	local01, #3
2cc00     A4 00 90 AD |  if_e	jmp	#LR__4702
2cc04     01 A6 06 F1 | 	add	local01, #1
2cc08     53 93 C2 FA | 	rdbyte	arg01, local01
2cc0c     33 A6 06 F1 | 	add	local01, #51
2cc10     53 95 02 F6 | 	mov	arg02, local01
2cc14     04 A6 86 F1 | 	sub	local01, #4
2cc18     53 97 02 FB | 	rdlong	arg03, local01
2cc1c     30 A6 86 F1 | 	sub	local01, #48
2cc20     01 98 06 F6 | 	mov	arg04, #1
2cc24     44 FB BF FD | 	call	#_fatfs_cc_disk_write
2cc28     00 7A 0E F2 | 	cmp	result1, #0 wz
2cc2c     74 00 90 5D |  if_ne	jmp	#LR__4700
2cc30     03 A6 06 F1 | 	add	local01, #3
2cc34     53 01 48 FC | 	wrbyte	#0, local01
2cc38     2D A6 06 F1 | 	add	local01, #45
2cc3c     53 7B 02 FB | 	rdlong	result1, local01
2cc40     0C A6 86 F1 | 	sub	local01, #12
2cc44     53 99 02 FB | 	rdlong	arg04, local01
2cc48     4C 7B 82 F1 | 	sub	result1, arg04
2cc4c     08 A6 86 F1 | 	sub	local01, #8
2cc50     53 99 02 FB | 	rdlong	arg04, local01
2cc54     1C A6 86 F1 | 	sub	local01, #28
2cc58     4C 7B 12 F2 | 	cmp	result1, arg04 wc
2cc5c     48 00 90 3D |  if_ae	jmp	#LR__4701
2cc60     02 A6 06 F1 | 	add	local01, #2
2cc64     53 99 C2 FA | 	rdbyte	arg04, local01
2cc68     02 A6 86 F1 | 	sub	local01, #2
2cc6c     02 98 0E F2 | 	cmp	arg04, #2 wz
2cc70     34 00 90 5D |  if_ne	jmp	#LR__4701
2cc74     01 A6 06 F1 | 	add	local01, #1
2cc78     53 93 C2 FA | 	rdbyte	arg01, local01
2cc7c     33 A6 06 F1 | 	add	local01, #51
2cc80     53 95 02 F6 | 	mov	arg02, local01
2cc84     04 A6 86 F1 | 	sub	local01, #4
2cc88     53 97 02 FB | 	rdlong	arg03, local01
2cc8c     14 A6 86 F1 | 	sub	local01, #20
2cc90     53 A7 02 FB | 	rdlong	local01, local01
2cc94     53 97 02 F1 | 	add	arg03, local01
2cc98     01 98 06 F6 | 	mov	arg04, #1
2cc9c     CC FA BF FD | 	call	#_fatfs_cc_disk_write
2cca0     04 00 90 FD | 	jmp	#LR__4701
2cca4                 | LR__4700
2cca4     01 A8 06 F6 | 	mov	local02, #1
2cca8                 | LR__4701
2cca8                 | LR__4702
2cca8                 | ' 			res = FR_DISK_ERR;
2cca8                 | ' 		}
2cca8                 | ' 	}
2cca8                 | ' 	return res;
2cca8     54 7B 02 F6 | 	mov	result1, local02
2ccac     E7 F0 03 F6 | 	mov	ptra, fp
2ccb0     F2 00 A0 FD | 	call	#popregs_
2ccb4                 | _fatfs_cc_sync_window_ret
2ccb4     2D 00 64 FD | 	ret
2ccb8                 | 
2ccb8                 | _fatfs_cc_move_window
2ccb8     03 CA 05 F6 | 	mov	COUNT_, #3
2ccbc     E8 00 A0 FD | 	call	#pushregs_
2ccc0     49 A7 02 F6 | 	mov	local01, arg01
2ccc4     4A A9 02 F6 | 	mov	local02, arg02
2ccc8     00 AA 06 F6 | 	mov	local03, #0
2cccc     30 A6 06 F1 | 	add	local01, #48
2ccd0     53 99 02 FB | 	rdlong	arg04, local01
2ccd4     30 A6 86 F1 | 	sub	local01, #48
2ccd8     4C A9 0A F2 | 	cmp	local02, arg04 wz
2ccdc     40 00 90 AD |  if_e	jmp	#LR__4711
2cce0     53 93 02 F6 | 	mov	arg01, local01
2cce4     FC FE BF FD | 	call	#_fatfs_cc_sync_window
2cce8     3D AB 0A F6 | 	mov	local03, result1 wz
2ccec     30 00 90 5D |  if_ne	jmp	#LR__4710
2ccf0     01 A6 06 F1 | 	add	local01, #1
2ccf4     53 93 C2 FA | 	rdbyte	arg01, local01
2ccf8     33 A6 06 F1 | 	add	local01, #51
2ccfc     53 95 02 F6 | 	mov	arg02, local01
2cd00     54 97 02 F6 | 	mov	arg03, local02
2cd04     01 98 06 F6 | 	mov	arg04, #1
2cd08     24 F9 BF FD | 	call	#_fatfs_cc_disk_read
2cd0c     00 7A 0E F2 | 	cmp	result1, #0 wz
2cd10     01 A8 66 56 |  if_ne	neg	local02, #1
2cd14     01 AA 06 56 |  if_ne	mov	local03, #1
2cd18     04 A6 86 F1 | 	sub	local01, #4
2cd1c     53 A9 62 FC | 	wrlong	local02, local01
2cd20                 | LR__4710
2cd20                 | LR__4711
2cd20                 | ' 				sect = (LBA_t)0 - 1;
2cd20                 | ' 				res = FR_DISK_ERR;
2cd20                 | ' 			}
2cd20                 | ' 			fs->winsect = sect;
2cd20                 | ' 		}
2cd20                 | ' 	}
2cd20                 | ' 	return res;
2cd20     55 7B 02 F6 | 	mov	result1, local03
2cd24     E7 F0 03 F6 | 	mov	ptra, fp
2cd28     F2 00 A0 FD | 	call	#popregs_
2cd2c                 | _fatfs_cc_move_window_ret
2cd2c     2D 00 64 FD | 	ret
2cd30                 | 
2cd30                 | _fatfs_cc_sync_fs
2cd30     02 CA 05 F6 | 	mov	COUNT_, #2
2cd34     E8 00 A0 FD | 	call	#pushregs_
2cd38     49 A7 02 F6 | 	mov	local01, arg01
2cd3c     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
2cd40     3D A9 0A F6 | 	mov	local02, result1 wz
2cd44     D8 00 90 5D |  if_ne	jmp	#LR__4721
2cd48     53 99 C2 FA | 	rdbyte	arg04, local01
2cd4c     03 98 0E F2 | 	cmp	arg04, #3 wz
2cd50     04 A6 06 A1 |  if_e	add	local01, #4
2cd54     53 99 C2 AA |  if_e	rdbyte	arg04, local01
2cd58     04 A6 86 A1 |  if_e	sub	local01, #4
2cd5c     01 98 0E A2 |  if_e	cmp	arg04, #1 wz
2cd60     A0 00 90 5D |  if_ne	jmp	#LR__4720
2cd64     34 A6 06 F1 | 	add	local01, #52
2cd68     53 93 02 F6 | 	mov	arg01, local01
2cd6c     00 94 06 F6 | 	mov	arg02, #0
2cd70     09 96 C6 F9 | 	decod	arg03, #9
2cd74     D8 00 A0 FD | 	call	#\builtin_bytefill_
2cd78     53 93 02 F6 | 	mov	arg01, local01
2cd7c     FE 93 06 F1 | 	add	arg01, #510
2cd80     55 00 80 FF 
2cd84     49 AB 58 FC | 	wrword	##43605, arg01
2cd88     A9 B0 A0 FF 
2cd8c     53 A5 68 FC | 	wrlong	##1096897106, local01
2cd90     53 93 02 F6 | 	mov	arg01, local01
2cd94     E4 93 06 F1 | 	add	arg01, #484
2cd98     B9 A0 B0 FF 
2cd9c     49 E5 68 FC | 	wrlong	##1631679090, arg01
2cda0     53 93 02 F6 | 	mov	arg01, local01
2cda4     E8 93 06 F1 | 	add	arg01, #488
2cda8     20 A6 86 F1 | 	sub	local01, #32
2cdac     53 95 02 FB | 	rdlong	arg02, local01
2cdb0     49 95 62 FC | 	wrlong	arg02, arg01
2cdb4     20 A6 06 F1 | 	add	local01, #32
2cdb8     53 93 02 F6 | 	mov	arg01, local01
2cdbc     EC 93 06 F1 | 	add	arg01, #492
2cdc0     24 A6 86 F1 | 	sub	local01, #36
2cdc4     53 95 02 FB | 	rdlong	arg02, local01
2cdc8     49 95 62 FC | 	wrlong	arg02, arg01
2cdcc     10 A6 06 F1 | 	add	local01, #16
2cdd0     53 97 02 FB | 	rdlong	arg03, local01
2cdd4     01 96 06 F1 | 	add	arg03, #1
2cdd8     10 A6 06 F1 | 	add	local01, #16
2cddc     53 97 62 FC | 	wrlong	arg03, local01
2cde0     2F A6 86 F1 | 	sub	local01, #47
2cde4     53 93 C2 FA | 	rdbyte	arg01, local01
2cde8     33 A6 06 F1 | 	add	local01, #51
2cdec     53 95 02 F6 | 	mov	arg02, local01
2cdf0     01 98 06 F6 | 	mov	arg04, #1
2cdf4     74 F9 BF FD | 	call	#_fatfs_cc_disk_write
2cdf8     30 A6 86 F1 | 	sub	local01, #48
2cdfc     53 01 48 FC | 	wrbyte	#0, local01
2ce00     04 A6 86 F1 | 	sub	local01, #4
2ce04                 | LR__4720
2ce04     01 A6 06 F1 | 	add	local01, #1
2ce08     53 93 C2 FA | 	rdbyte	arg01, local01
2ce0c     00 94 06 F6 | 	mov	arg02, #0
2ce10     00 96 06 F6 | 	mov	arg03, #0
2ce14     90 FA BF FD | 	call	#_fatfs_cc_disk_ioctl
2ce18     00 7A 0E F2 | 	cmp	result1, #0 wz
2ce1c     01 A8 06 56 |  if_ne	mov	local02, #1
2ce20                 | LR__4721
2ce20                 | ' 	}
2ce20                 | ' 
2ce20                 | ' 	return res;
2ce20     54 7B 02 F6 | 	mov	result1, local02
2ce24     E7 F0 03 F6 | 	mov	ptra, fp
2ce28     F2 00 A0 FD | 	call	#popregs_
2ce2c                 | _fatfs_cc_sync_fs_ret
2ce2c     2D 00 64 FD | 	ret
2ce30                 | 
2ce30                 | _fatfs_cc_clst2sect
2ce30     02 94 86 F1 | 	sub	arg02, #2
2ce34     18 92 06 F1 | 	add	arg01, #24
2ce38     49 81 02 FB | 	rdlong	_var01, arg01
2ce3c     18 92 86 F1 | 	sub	arg01, #24
2ce40     02 80 86 F1 | 	sub	_var01, #2
2ce44     40 95 12 F2 | 	cmp	arg02, _var01 wc
2ce48     00 7A 06 36 |  if_ae	mov	result1, #0
2ce4c     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
2ce50     0A 92 06 F1 | 	add	arg01, #10
2ce54     49 81 E2 FA | 	rdword	_var01, arg01
2ce58     4A 81 02 FD | 	qmul	_var01, arg02
2ce5c                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
2ce5c     22 92 06 F1 | 	add	arg01, #34
2ce60     49 7B 02 FB | 	rdlong	result1, arg01
2ce64     18 80 62 FD | 	getqx	_var01
2ce68     40 7B 02 F1 | 	add	result1, _var01
2ce6c                 | _fatfs_cc_clst2sect_ret
2ce6c     2D 00 64 FD | 	ret
2ce70                 | 
2ce70                 | _fatfs_cc_get_fat
2ce70     07 CA 05 F6 | 	mov	COUNT_, #7
2ce74     E8 00 A0 FD | 	call	#pushregs_
2ce78     4A A7 02 F6 | 	mov	local01, arg02
2ce7c     49 A9 02 FB | 	rdlong	local02, arg01
2ce80     02 A6 16 F2 | 	cmp	local01, #2 wc
2ce84     14 00 90 CD |  if_b	jmp	#LR__4730
2ce88     18 A8 06 F1 | 	add	local02, #24
2ce8c     54 AB 02 FB | 	rdlong	local03, local02
2ce90     18 A8 86 F1 | 	sub	local02, #24
2ce94     55 A7 12 F2 | 	cmp	local01, local03 wc
2ce98     08 00 90 CD |  if_b	jmp	#LR__4731
2ce9c                 | LR__4730
2ce9c     01 AC 06 F6 | 	mov	local04, #1
2cea0     60 01 90 FD | 	jmp	#LR__4738
2cea4                 | LR__4731
2cea4     01 AC 66 F6 | 	neg	local04, #1
2cea8                 | ' 		val = 0xFFFFFFFF;
2cea8                 | ' 
2cea8                 | ' 		switch (fs->fs_type) {
2cea8     54 AF C2 FA | 	rdbyte	local05, local02
2ceac     01 AE 86 F1 | 	sub	local05, #1
2ceb0     03 AE 26 F3 | 	fle	local05, #3
2ceb4     30 AE 62 FD | 	jmprel	local05
2ceb8                 | LR__4732
2ceb8     0C 00 90 FD | 	jmp	#LR__4733
2cebc     B8 00 90 FD | 	jmp	#LR__4734
2cec0     F8 00 90 FD | 	jmp	#LR__4735
2cec4     38 01 90 FD | 	jmp	#LR__4736
2cec8                 | LR__4733
2cec8     53 AF 02 F6 | 	mov	local05, local01
2cecc     53 93 02 F6 | 	mov	arg01, local01
2ced0     01 92 46 F0 | 	shr	arg01, #1
2ced4     49 AF 02 F1 | 	add	local05, arg01
2ced8     54 93 02 F6 | 	mov	arg01, local02
2cedc     57 B1 02 F6 | 	mov	local06, local05
2cee0     09 B0 46 F0 | 	shr	local06, #9
2cee4     24 A8 06 F1 | 	add	local02, #36
2cee8     54 95 02 FB | 	rdlong	arg02, local02
2ceec     24 A8 86 F1 | 	sub	local02, #36
2cef0     58 95 02 F1 | 	add	arg02, local06
2cef4     C0 FD BF FD | 	call	#_fatfs_cc_move_window
2cef8     00 7A 0E F2 | 	cmp	result1, #0 wz
2cefc     04 01 90 5D |  if_ne	jmp	#LR__4737
2cf00     57 B1 02 F6 | 	mov	local06, local05
2cf04     FF B1 06 F5 | 	and	local06, #511
2cf08     54 93 02 F6 | 	mov	arg01, local02
2cf0c     34 92 06 F1 | 	add	arg01, #52
2cf10     49 B1 02 F1 | 	add	local06, arg01
2cf14     58 B3 C2 FA | 	rdbyte	local07, local06
2cf18     54 93 02 F6 | 	mov	arg01, local02
2cf1c     01 AE 06 F1 | 	add	local05, #1
2cf20     57 B1 02 F6 | 	mov	local06, local05
2cf24     09 B0 46 F0 | 	shr	local06, #9
2cf28     24 A8 06 F1 | 	add	local02, #36
2cf2c     54 95 02 FB | 	rdlong	arg02, local02
2cf30     24 A8 86 F1 | 	sub	local02, #36
2cf34     58 95 02 F1 | 	add	arg02, local06
2cf38     7C FD BF FD | 	call	#_fatfs_cc_move_window
2cf3c     00 7A 0E F2 | 	cmp	result1, #0 wz
2cf40     C0 00 90 5D |  if_ne	jmp	#LR__4737
2cf44     FF AF 06 F5 | 	and	local05, #511
2cf48     34 A8 06 F1 | 	add	local02, #52
2cf4c     54 AF 02 F1 | 	add	local05, local02
2cf50     57 B1 C2 FA | 	rdbyte	local06, local05
2cf54     08 B0 66 F0 | 	shl	local06, #8
2cf58     58 B3 42 F5 | 	or	local07, local06
2cf5c     01 A6 CE F7 | 	test	local01, #1 wz
2cf60     04 B2 46 50 |  if_ne	shr	local07, #4
2cf64     59 AB 02 56 |  if_ne	mov	local03, local07
2cf68     0B B2 46 A7 |  if_e	zerox	local07, #11
2cf6c     59 AB 02 A6 |  if_e	mov	local03, local07
2cf70     55 AD 02 F6 | 	mov	local04, local03
2cf74                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
2cf74                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2cf74                 | ' 			break;
2cf74     8C 00 90 FD | 	jmp	#LR__4737
2cf78                 | LR__4734
2cf78     54 93 02 F6 | 	mov	arg01, local02
2cf7c     53 B1 02 F6 | 	mov	local06, local01
2cf80     08 B0 46 F0 | 	shr	local06, #8
2cf84     24 A8 06 F1 | 	add	local02, #36
2cf88     54 95 02 FB | 	rdlong	arg02, local02
2cf8c     24 A8 86 F1 | 	sub	local02, #36
2cf90     58 95 02 F1 | 	add	arg02, local06
2cf94     20 FD BF FD | 	call	#_fatfs_cc_move_window
2cf98     00 7A 0E F2 | 	cmp	result1, #0 wz
2cf9c     64 00 90 5D |  if_ne	jmp	#LR__4737
2cfa0     34 A8 06 F1 | 	add	local02, #52
2cfa4     01 A6 66 F0 | 	shl	local01, #1
2cfa8     FF A7 06 F5 | 	and	local01, #511
2cfac     53 A9 02 F1 | 	add	local02, local01
2cfb0                 | ' {
2cfb0                 | ' 
2cfb0                 | ' 	return *((WORD*)ptr);
2cfb0     54 7B E2 FA | 	rdword	result1, local02
2cfb4     3D AD 32 F9 | 	getword	local04, result1, #0
2cfb8                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
2cfb8                 | ' 			break;
2cfb8     48 00 90 FD | 	jmp	#LR__4737
2cfbc                 | LR__4735
2cfbc     54 93 02 F6 | 	mov	arg01, local02
2cfc0     53 B1 02 F6 | 	mov	local06, local01
2cfc4     07 B0 46 F0 | 	shr	local06, #7
2cfc8     24 A8 06 F1 | 	add	local02, #36
2cfcc     54 95 02 FB | 	rdlong	arg02, local02
2cfd0     24 A8 86 F1 | 	sub	local02, #36
2cfd4     58 95 02 F1 | 	add	arg02, local06
2cfd8     DC FC BF FD | 	call	#_fatfs_cc_move_window
2cfdc     00 7A 0E F2 | 	cmp	result1, #0 wz
2cfe0     20 00 90 5D |  if_ne	jmp	#LR__4737
2cfe4     34 A8 06 F1 | 	add	local02, #52
2cfe8     02 A6 66 F0 | 	shl	local01, #2
2cfec     FF A7 06 F5 | 	and	local01, #511
2cff0     53 A9 02 F1 | 	add	local02, local01
2cff4                 | ' {
2cff4                 | ' 
2cff4                 | ' 	return *((DWORD*)ptr);
2cff4     54 AD 02 FB | 	rdlong	local04, local02
2cff8     7C AC 06 F4 | 	bitl	local04, #124
2cffc                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
2cffc                 | ' 			break;
2cffc     04 00 90 FD | 	jmp	#LR__4737
2d000                 | LR__4736
2d000     01 AC 06 F6 | 	mov	local04, #1
2d004                 | LR__4737
2d004                 | LR__4738
2d004                 | ' 			val = 1;
2d004                 | ' 		}
2d004                 | ' 	}
2d004                 | ' 
2d004                 | ' 	return val;
2d004     56 7B 02 F6 | 	mov	result1, local04
2d008     E7 F0 03 F6 | 	mov	ptra, fp
2d00c     F2 00 A0 FD | 	call	#popregs_
2d010                 | _fatfs_cc_get_fat_ret
2d010     2D 00 64 FD | 	ret
2d014                 | 
2d014                 | _fatfs_cc_put_fat
2d014     08 CA 05 F6 | 	mov	COUNT_, #8
2d018     E8 00 A0 FD | 	call	#pushregs_
2d01c     49 A7 02 F6 | 	mov	local01, arg01
2d020     4A A9 02 F6 | 	mov	local02, arg02
2d024     4B AB 02 F6 | 	mov	local03, arg03
2d028     02 AC 06 F6 | 	mov	local04, #2
2d02c     02 A8 16 F2 | 	cmp	local02, #2 wc
2d030     E0 01 90 CD |  if_b	jmp	#LR__4747
2d034     18 A6 06 F1 | 	add	local01, #24
2d038     53 AF 02 FB | 	rdlong	local05, local01
2d03c     18 A6 86 F1 | 	sub	local01, #24
2d040     57 A9 12 F2 | 	cmp	local02, local05 wc
2d044     CC 01 90 3D |  if_ae	jmp	#LR__4747
2d048                 | ' 		switch (fs->fs_type) {
2d048     53 B1 C2 FA | 	rdbyte	local06, local01
2d04c     01 B0 86 F1 | 	sub	local06, #1
2d050     03 B0 26 F3 | 	fle	local06, #3
2d054     30 B0 62 FD | 	jmprel	local06
2d058                 | LR__4740
2d058     0C 00 90 FD | 	jmp	#LR__4741
2d05c     F4 00 90 FD | 	jmp	#LR__4744
2d060     3C 01 90 FD | 	jmp	#LR__4745
2d064     AC 01 90 FD | 	jmp	#LR__4746
2d068                 | LR__4741
2d068     54 B3 02 F6 | 	mov	local07, local02
2d06c     54 AF 02 F6 | 	mov	local05, local02
2d070     01 AE 46 F0 | 	shr	local05, #1
2d074     57 B3 02 F1 | 	add	local07, local05
2d078     53 93 02 F6 | 	mov	arg01, local01
2d07c     59 B1 02 F6 | 	mov	local06, local07
2d080     09 B0 46 F0 | 	shr	local06, #9
2d084     24 A6 06 F1 | 	add	local01, #36
2d088     53 95 02 FB | 	rdlong	arg02, local01
2d08c     24 A6 86 F1 | 	sub	local01, #36
2d090     58 95 02 F1 | 	add	arg02, local06
2d094     20 FC BF FD | 	call	#_fatfs_cc_move_window
2d098     3D AD 0A F6 | 	mov	local04, result1 wz
2d09c     74 01 90 5D |  if_ne	jmp	#LR__4746
2d0a0     53 B5 02 F6 | 	mov	local08, local01
2d0a4     34 B4 06 F1 | 	add	local08, #52
2d0a8     59 AF 02 F6 | 	mov	local05, local07
2d0ac     FF AF 06 F5 | 	and	local05, #511
2d0b0     57 B5 02 F1 | 	add	local08, local05
2d0b4     01 A8 CE F7 | 	test	local02, #1 wz
2d0b8     01 B2 06 F1 | 	add	local07, #1
2d0bc     18 00 90 AD |  if_e	jmp	#LR__4742
2d0c0     5A AF C2 FA | 	rdbyte	local05, local08
2d0c4     57 AF 42 F8 | 	getnib	local05, local05, #0
2d0c8     55 B1 E2 F8 | 	getbyte	local06, local03, #0
2d0cc     04 B0 66 F0 | 	shl	local06, #4
2d0d0     58 AF 42 F5 | 	or	local05, local06
2d0d4     04 00 90 FD | 	jmp	#LR__4743
2d0d8                 | LR__4742
2d0d8     55 AF 02 F6 | 	mov	local05, local03
2d0dc                 | LR__4743
2d0dc     5A AF 42 FC | 	wrbyte	local05, local08
2d0e0     03 A6 06 F1 | 	add	local01, #3
2d0e4     53 03 48 FC | 	wrbyte	#1, local01
2d0e8     03 A6 86 F1 | 	sub	local01, #3
2d0ec     53 93 02 F6 | 	mov	arg01, local01
2d0f0     59 B5 02 F6 | 	mov	local08, local07
2d0f4     09 B4 46 F0 | 	shr	local08, #9
2d0f8     24 A6 06 F1 | 	add	local01, #36
2d0fc     53 95 02 FB | 	rdlong	arg02, local01
2d100     24 A6 86 F1 | 	sub	local01, #36
2d104     5A 95 02 F1 | 	add	arg02, local08
2d108     AC FB BF FD | 	call	#_fatfs_cc_move_window
2d10c     3D AD 0A F6 | 	mov	local04, result1 wz
2d110     00 01 90 5D |  if_ne	jmp	#LR__4746
2d114     53 B5 02 F6 | 	mov	local08, local01
2d118     34 B4 06 F1 | 	add	local08, #52
2d11c     FF B3 06 F5 | 	and	local07, #511
2d120     59 B5 02 F1 | 	add	local08, local07
2d124     01 A8 CE F7 | 	test	local02, #1 wz
2d128     04 AA 46 50 |  if_ne	shr	local03, #4
2d12c     55 AF 02 56 |  if_ne	mov	local05, local03
2d130     5A AF C2 AA |  if_e	rdbyte	local05, local08
2d134     F0 AE 06 A5 |  if_e	and	local05, #240
2d138     55 AB EA A8 |  if_e	getbyte	local03, local03, #1
2d13c     55 AB 42 A8 |  if_e	getnib	local03, local03, #0
2d140     55 AF 42 A5 |  if_e	or	local05, local03
2d144     5A AF 42 FC | 	wrbyte	local05, local08
2d148     03 A6 06 F1 | 	add	local01, #3
2d14c     53 03 48 FC | 	wrbyte	#1, local01
2d150                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
2d150                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2d150                 | ' 			fs->wflag = 1;
2d150                 | ' 			break;
2d150     C0 00 90 FD | 	jmp	#LR__4746
2d154                 | LR__4744
2d154     53 93 02 F6 | 	mov	arg01, local01
2d158     54 B5 02 F6 | 	mov	local08, local02
2d15c     08 B4 46 F0 | 	shr	local08, #8
2d160     24 A6 06 F1 | 	add	local01, #36
2d164     53 95 02 FB | 	rdlong	arg02, local01
2d168     24 A6 86 F1 | 	sub	local01, #36
2d16c     5A 95 02 F1 | 	add	arg02, local08
2d170     44 FB BF FD | 	call	#_fatfs_cc_move_window
2d174     3D AD 0A F6 | 	mov	local04, result1 wz
2d178     98 00 90 5D |  if_ne	jmp	#LR__4746
2d17c     34 A6 06 F1 | 	add	local01, #52
2d180     53 93 02 F6 | 	mov	arg01, local01
2d184     01 A8 66 F0 | 	shl	local02, #1
2d188     FF A9 06 F5 | 	and	local02, #511
2d18c     54 93 02 F1 | 	add	arg01, local02
2d190     49 AB 52 FC | 	wrword	local03, arg01
2d194     31 A6 86 F1 | 	sub	local01, #49
2d198     53 03 48 FC | 	wrbyte	#1, local01
2d19c                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
2d19c                 | ' 			fs->wflag = 1;
2d19c                 | ' 			break;
2d19c     74 00 90 FD | 	jmp	#LR__4746
2d1a0                 | LR__4745
2d1a0     53 93 02 F6 | 	mov	arg01, local01
2d1a4     54 B5 02 F6 | 	mov	local08, local02
2d1a8     07 B4 46 F0 | 	shr	local08, #7
2d1ac     24 A6 06 F1 | 	add	local01, #36
2d1b0     53 95 02 FB | 	rdlong	arg02, local01
2d1b4     24 A6 86 F1 | 	sub	local01, #36
2d1b8     5A 95 02 F1 | 	add	arg02, local08
2d1bc     F8 FA BF FD | 	call	#_fatfs_cc_move_window
2d1c0     3D AD 0A F6 | 	mov	local04, result1 wz
2d1c4     4C 00 90 5D |  if_ne	jmp	#LR__4746
2d1c8     7C AA 06 F4 | 	bitl	local03, #124
2d1cc     53 93 02 F6 | 	mov	arg01, local01
2d1d0     34 92 06 F1 | 	add	arg01, #52
2d1d4     54 B5 02 F6 | 	mov	local08, local02
2d1d8     02 B4 66 F0 | 	shl	local08, #2
2d1dc     FF B5 06 F5 | 	and	local08, #511
2d1e0     5A 93 02 F1 | 	add	arg01, local08
2d1e4                 | ' {
2d1e4                 | ' 
2d1e4                 | ' 	return *((DWORD*)ptr);
2d1e4     49 B5 02 FB | 	rdlong	local08, arg01
2d1e8     00 00 78 FF 
2d1ec     00 B4 06 F5 | 	and	local08, ##-268435456
2d1f0     5A AB 42 F5 | 	or	local03, local08
2d1f4     34 A6 06 F1 | 	add	local01, #52
2d1f8     53 93 02 F6 | 	mov	arg01, local01
2d1fc     02 A8 66 F0 | 	shl	local02, #2
2d200     FF A9 06 F5 | 	and	local02, #511
2d204     54 93 02 F1 | 	add	arg01, local02
2d208     49 AB 62 FC | 	wrlong	local03, arg01
2d20c     31 A6 86 F1 | 	sub	local01, #49
2d210     53 03 48 FC | 	wrbyte	#1, local01
2d214                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
2d214                 | ' 			}
2d214                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
2d214                 | ' 			fs->wflag = 1;
2d214                 | ' 			break;
2d214                 | LR__4746
2d214                 | LR__4747
2d214                 | ' 		}
2d214                 | ' 	}
2d214                 | ' 	return res;
2d214     56 7B 02 F6 | 	mov	result1, local04
2d218     E7 F0 03 F6 | 	mov	ptra, fp
2d21c     F2 00 A0 FD | 	call	#popregs_
2d220                 | _fatfs_cc_put_fat_ret
2d220     2D 00 64 FD | 	ret
2d224                 | 
2d224                 | _fatfs_cc_remove_chain
2d224     05 CA 05 F6 | 	mov	COUNT_, #5
2d228     E8 00 A0 FD | 	call	#pushregs_
2d22c     49 A7 02 F6 | 	mov	local01, arg01
2d230     4A A9 02 F6 | 	mov	local02, arg02
2d234     4B AB 02 F6 | 	mov	local03, arg03
2d238     53 AD 02 FB | 	rdlong	local04, local01
2d23c     02 A8 16 F2 | 	cmp	local02, #2 wc
2d240     14 00 90 CD |  if_b	jmp	#LR__4750
2d244     18 AC 06 F1 | 	add	local04, #24
2d248     56 7B 02 FB | 	rdlong	result1, local04
2d24c     18 AC 86 F1 | 	sub	local04, #24
2d250     3D A9 12 F2 | 	cmp	local02, result1 wc
2d254     08 00 90 CD |  if_b	jmp	#LR__4751
2d258                 | LR__4750
2d258     02 7A 06 F6 | 	mov	result1, #2
2d25c     CC 00 90 FD | 	jmp	#LR__4756
2d260                 | LR__4751
2d260     00 AA 0E F2 | 	cmp	local03, #0 wz
2d264     18 00 90 AD |  if_e	jmp	#LR__4752
2d268     55 95 02 F6 | 	mov	arg02, local03
2d26c     56 93 02 F6 | 	mov	arg01, local04
2d270     01 96 66 F6 | 	neg	arg03, #1
2d274     9C FD BF FD | 	call	#_fatfs_cc_put_fat
2d278     00 7A 0E F2 | 	cmp	result1, #0 wz
2d27c     AC 00 90 5D |  if_ne	jmp	#LR__4756
2d280                 | LR__4752
2d280                 | ' 	}
2d280                 | ' 
2d280                 | ' 
2d280                 | ' 	do {
2d280                 | LR__4753
2d280     54 95 02 F6 | 	mov	arg02, local02
2d284     53 93 02 F6 | 	mov	arg01, local01
2d288     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
2d28c     3D AF 0A F6 | 	mov	local05, result1 wz
2d290     94 00 90 AD |  if_e	jmp	#LR__4755
2d294     01 AE 0E F2 | 	cmp	local05, #1 wz
2d298     02 7A 06 A6 |  if_e	mov	result1, #2
2d29c     8C 00 90 AD |  if_e	jmp	#LR__4756
2d2a0     FF FF 7F FF 
2d2a4     FF AF 0E F2 | 	cmp	local05, ##-1 wz
2d2a8     01 7A 06 A6 |  if_e	mov	result1, #1
2d2ac     7C 00 90 AD |  if_e	jmp	#LR__4756
2d2b0     54 95 02 F6 | 	mov	arg02, local02
2d2b4     56 93 02 F6 | 	mov	arg01, local04
2d2b8     00 96 06 F6 | 	mov	arg03, #0
2d2bc     54 FD BF FD | 	call	#_fatfs_cc_put_fat
2d2c0     3D AB 0A F6 | 	mov	local03, result1 wz
2d2c4     55 7B 02 56 |  if_ne	mov	result1, local03
2d2c8     60 00 90 5D |  if_ne	jmp	#LR__4756
2d2cc     18 AC 06 F1 | 	add	local04, #24
2d2d0     56 AB 02 FB | 	rdlong	local03, local04
2d2d4     02 AA 86 F1 | 	sub	local03, #2
2d2d8     04 AC 86 F1 | 	sub	local04, #4
2d2dc     56 A9 02 FB | 	rdlong	local02, local04
2d2e0     14 AC 86 F1 | 	sub	local04, #20
2d2e4     55 A9 12 F2 | 	cmp	local02, local03 wc
2d2e8     24 00 90 3D |  if_ae	jmp	#LR__4754
2d2ec     14 AC 06 F1 | 	add	local04, #20
2d2f0     56 AB 02 FB | 	rdlong	local03, local04
2d2f4     01 AA 06 F1 | 	add	local03, #1
2d2f8     56 AB 62 FC | 	wrlong	local03, local04
2d2fc     10 AC 86 F1 | 	sub	local04, #16
2d300     56 AB C2 FA | 	rdbyte	local03, local04
2d304     01 AA 46 F5 | 	or	local03, #1
2d308     56 AB 42 FC | 	wrbyte	local03, local04
2d30c     04 AC 86 F1 | 	sub	local04, #4
2d310                 | LR__4754
2d310     57 A9 02 F6 | 	mov	local02, local05
2d314     18 AC 06 F1 | 	add	local04, #24
2d318     56 AF 02 FB | 	rdlong	local05, local04
2d31c     18 AC 86 F1 | 	sub	local04, #24
2d320     57 A9 12 F2 | 	cmp	local02, local05 wc
2d324     58 FF 9F CD |  if_b	jmp	#LR__4753
2d328                 | LR__4755
2d328                 | ' #line 1500 "ff.c"
2d328                 | ' 	return FR_OK;
2d328     00 7A 06 F6 | 	mov	result1, #0
2d32c                 | LR__4756
2d32c     E7 F0 03 F6 | 	mov	ptra, fp
2d330     F2 00 A0 FD | 	call	#popregs_
2d334                 | _fatfs_cc_remove_chain_ret
2d334     2D 00 64 FD | 	ret
2d338                 | 
2d338                 | _fatfs_cc_create_chain
2d338     09 CA 05 F6 | 	mov	COUNT_, #9
2d33c     E8 00 A0 FD | 	call	#pushregs_
2d340     49 A7 02 F6 | 	mov	local01, arg01
2d344     4A A9 0A F6 | 	mov	local02, arg02 wz
2d348     53 AB 02 FB | 	rdlong	local03, local01
2d34c     28 00 90 5D |  if_ne	jmp	#LR__4760
2d350     10 AA 06 F1 | 	add	local03, #16
2d354     55 AD 0A FB | 	rdlong	local04, local03 wz
2d358     10 AA 86 F1 | 	sub	local03, #16
2d35c     18 AA 06 51 |  if_ne	add	local03, #24
2d360     55 AF 02 5B |  if_ne	rdlong	local05, local03
2d364     18 AA 86 51 |  if_ne	sub	local03, #24
2d368     57 AD 12 52 |  if_ne	cmp	local04, local05 wc
2d36c     50 00 90 4D |  if_c_and_nz	jmp	#LR__4761
2d370     01 AC 06 F6 | 	mov	local04, #1
2d374     48 00 90 FD | 	jmp	#LR__4761
2d378                 | LR__4760
2d378     54 95 02 F6 | 	mov	arg02, local02
2d37c     53 93 02 F6 | 	mov	arg01, local01
2d380     EC FA BF FD | 	call	#_fatfs_cc_get_fat
2d384     3D AD 02 F6 | 	mov	local04, result1
2d388     02 AC 16 F2 | 	cmp	local04, #2 wc
2d38c     01 7A 06 C6 |  if_b	mov	result1, #1
2d390     BC 01 90 CD |  if_b	jmp	#LR__4771
2d394     FF FF 7F FF 
2d398     FF AD 0E F2 | 	cmp	local04, ##-1 wz
2d39c     56 7B 02 A6 |  if_e	mov	result1, local04
2d3a0     AC 01 90 AD |  if_e	jmp	#LR__4771
2d3a4     18 AA 06 F1 | 	add	local03, #24
2d3a8     55 AF 02 FB | 	rdlong	local05, local03
2d3ac     18 AA 86 F1 | 	sub	local03, #24
2d3b0     57 AD 12 F2 | 	cmp	local04, local05 wc
2d3b4     56 7B 02 C6 |  if_b	mov	result1, local04
2d3b8     94 01 90 CD |  if_b	jmp	#LR__4771
2d3bc     54 AD 02 F6 | 	mov	local04, local02
2d3c0                 | LR__4761
2d3c0     14 AA 06 F1 | 	add	local03, #20
2d3c4     55 AF 0A FB | 	rdlong	local05, local03 wz
2d3c8     14 AA 86 F1 | 	sub	local03, #20
2d3cc     00 7A 06 A6 |  if_e	mov	result1, #0
2d3d0     7C 01 90 AD |  if_e	jmp	#LR__4771
2d3d4     00 B0 06 F6 | 	mov	local06, #0
2d3d8     54 AD 0A F2 | 	cmp	local04, local02 wz
2d3dc     74 00 90 5D |  if_ne	jmp	#LR__4764
2d3e0     56 B1 02 F6 | 	mov	local06, local04
2d3e4     01 B0 06 F1 | 	add	local06, #1
2d3e8     18 AA 06 F1 | 	add	local03, #24
2d3ec     55 AF 02 FB | 	rdlong	local05, local03
2d3f0     18 AA 86 F1 | 	sub	local03, #24
2d3f4     57 B1 12 F2 | 	cmp	local06, local05 wc
2d3f8     02 B0 06 36 |  if_ae	mov	local06, #2
2d3fc     58 95 02 F6 | 	mov	arg02, local06
2d400     53 93 02 F6 | 	mov	arg01, local01
2d404     68 FA BF FD | 	call	#_fatfs_cc_get_fat
2d408     3D AF 02 F6 | 	mov	local05, result1
2d40c     01 AE 0E F2 | 	cmp	local05, #1 wz
2d410     FF FF 7F 5F 
2d414     FF AF 0E 52 |  if_ne	cmp	local05, ##-1 wz
2d418     57 7B 02 A6 |  if_e	mov	result1, local05
2d41c     30 01 90 AD |  if_e	jmp	#LR__4771
2d420     00 AE 0E F2 | 	cmp	local05, #0 wz
2d424     2C 00 90 AD |  if_e	jmp	#LR__4763
2d428     10 AA 06 F1 | 	add	local03, #16
2d42c     55 B3 02 FB | 	rdlong	local07, local03
2d430     10 AA 86 F1 | 	sub	local03, #16
2d434     02 B2 16 F2 | 	cmp	local07, #2 wc
2d438     14 00 90 CD |  if_b	jmp	#LR__4762
2d43c     18 AA 06 F1 | 	add	local03, #24
2d440     55 AF 02 FB | 	rdlong	local05, local03
2d444     18 AA 86 F1 | 	sub	local03, #24
2d448     57 B3 12 F2 | 	cmp	local07, local05 wc
2d44c     59 AD 02 C6 |  if_b	mov	local04, local07
2d450                 | LR__4762
2d450     00 B0 06 F6 | 	mov	local06, #0
2d454                 | LR__4763
2d454                 | LR__4764
2d454     00 B0 0E F2 | 	cmp	local06, #0 wz
2d458     60 00 90 5D |  if_ne	jmp	#LR__4767
2d45c     56 B1 02 F6 | 	mov	local06, local04
2d460                 | ' 			ncl = scl;
2d460                 | ' 			for (;;) {
2d460                 | LR__4765
2d460     01 B0 06 F1 | 	add	local06, #1
2d464     18 AA 06 F1 | 	add	local03, #24
2d468     55 AF 02 FB | 	rdlong	local05, local03
2d46c     18 AA 86 F1 | 	sub	local03, #24
2d470     57 B1 12 F2 | 	cmp	local06, local05 wc
2d474     02 B0 06 36 |  if_ae	mov	local06, #2
2d478     56 B1 1A 32 |  if_ae	cmp	local06, local04 wcz
2d47c     00 7A 06 16 |  if_a	mov	result1, #0
2d480     CC 00 90 1D |  if_a	jmp	#LR__4771
2d484     58 95 02 F6 | 	mov	arg02, local06
2d488     53 93 02 F6 | 	mov	arg01, local01
2d48c     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
2d490     3D B3 0A F6 | 	mov	local07, result1 wz
2d494     24 00 90 AD |  if_e	jmp	#LR__4766
2d498     01 B2 0E F2 | 	cmp	local07, #1 wz
2d49c     FF FF 7F 5F 
2d4a0     FF B3 0E 52 |  if_ne	cmp	local07, ##-1 wz
2d4a4     59 7B 02 A6 |  if_e	mov	result1, local07
2d4a8     A4 00 90 AD |  if_e	jmp	#LR__4771
2d4ac     56 B1 0A F2 | 	cmp	local06, local04 wz
2d4b0     00 7A 06 A6 |  if_e	mov	result1, #0
2d4b4     98 00 90 AD |  if_e	jmp	#LR__4771
2d4b8     A4 FF 9F FD | 	jmp	#LR__4765
2d4bc                 | LR__4766
2d4bc                 | LR__4767
2d4bc     55 93 02 F6 | 	mov	arg01, local03
2d4c0     58 95 02 F6 | 	mov	arg02, local06
2d4c4     01 96 66 F6 | 	neg	arg03, #1
2d4c8     48 FB BF FD | 	call	#_fatfs_cc_put_fat
2d4cc     3D B5 0A F6 | 	mov	local08, result1 wz
2d4d0     1C 00 90 5D |  if_ne	jmp	#LR__4768
2d4d4     00 A8 0E F2 | 	cmp	local02, #0 wz
2d4d8     14 00 90 AD |  if_e	jmp	#LR__4768
2d4dc     55 93 02 F6 | 	mov	arg01, local03
2d4e0     54 95 02 F6 | 	mov	arg02, local02
2d4e4     58 97 02 F6 | 	mov	arg03, local06
2d4e8     28 FB BF FD | 	call	#_fatfs_cc_put_fat
2d4ec     3D B5 02 F6 | 	mov	local08, result1
2d4f0                 | LR__4768
2d4f0     00 B4 0E F2 | 	cmp	local08, #0 wz
2d4f4     4C 00 90 5D |  if_ne	jmp	#LR__4769
2d4f8     10 AA 06 F1 | 	add	local03, #16
2d4fc     55 B1 62 FC | 	wrlong	local06, local03
2d500     08 AA 06 F1 | 	add	local03, #8
2d504     55 AF 02 FB | 	rdlong	local05, local03
2d508     02 AE 86 F1 | 	sub	local05, #2
2d50c     04 AA 86 F1 | 	sub	local03, #4
2d510     55 B7 02 FB | 	rdlong	local09, local03
2d514     14 AA 86 F1 | 	sub	local03, #20
2d518     57 B7 1A F2 | 	cmp	local09, local05 wcz
2d51c     14 AA 06 E1 |  if_be	add	local03, #20
2d520     55 B7 02 EB |  if_be	rdlong	local09, local03
2d524     01 B6 86 E1 |  if_be	sub	local09, #1
2d528     55 B7 62 EC |  if_be	wrlong	local09, local03
2d52c     14 AA 86 E1 |  if_be	sub	local03, #20
2d530     04 AA 06 F1 | 	add	local03, #4
2d534     55 AF C2 FA | 	rdbyte	local05, local03
2d538     01 AE 46 F5 | 	or	local05, #1
2d53c     55 AF 42 FC | 	wrbyte	local05, local03
2d540     08 00 90 FD | 	jmp	#LR__4770
2d544                 | LR__4769
2d544     01 B4 0E F2 | 	cmp	local08, #1 wz
2d548     01 B0 C6 F6 | 	negz	local06, #1
2d54c                 | LR__4770
2d54c                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
2d54c                 | ' 	}
2d54c                 | ' 
2d54c                 | ' 	return ncl;
2d54c     58 7B 02 F6 | 	mov	result1, local06
2d550                 | LR__4771
2d550     E7 F0 03 F6 | 	mov	ptra, fp
2d554     F2 00 A0 FD | 	call	#popregs_
2d558                 | _fatfs_cc_create_chain_ret
2d558     2D 00 64 FD | 	ret
2d55c                 | 
2d55c                 | _fatfs_cc_dir_clear
2d55c     06 CA 05 F6 | 	mov	COUNT_, #6
2d560     E8 00 A0 FD | 	call	#pushregs_
2d564     49 A7 02 F6 | 	mov	local01, arg01
2d568     4A A9 02 F6 | 	mov	local02, arg02
2d56c     53 93 02 F6 | 	mov	arg01, local01
2d570     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
2d574     00 7A 0E F2 | 	cmp	result1, #0 wz
2d578     01 7A 06 56 |  if_ne	mov	result1, #1
2d57c     90 00 90 5D |  if_ne	jmp	#LR__4782
2d580     53 93 02 F6 | 	mov	arg01, local01
2d584     54 95 02 F6 | 	mov	arg02, local02
2d588     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
2d58c     3D AB 02 F6 | 	mov	local03, result1
2d590     30 A6 06 F1 | 	add	local01, #48
2d594     53 AB 62 FC | 	wrlong	local03, local01
2d598     04 A6 06 F1 | 	add	local01, #4
2d59c     53 93 02 F6 | 	mov	arg01, local01
2d5a0     00 94 06 F6 | 	mov	arg02, #0
2d5a4     09 96 C6 F9 | 	decod	arg03, #9
2d5a8     D8 00 A0 FD | 	call	#\builtin_bytefill_
2d5ac     53 AD 02 F6 | 	mov	local04, local01
2d5b0                 | ' #line 1667 "ff.c"
2d5b0                 | ' 	{
2d5b0                 | ' 		ibuf = fs->win; szb = 1;
2d5b0                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
2d5b0     00 AE 06 F6 | 	mov	local05, #0
2d5b4     34 A6 86 F1 | 	sub	local01, #52
2d5b8                 | LR__4780
2d5b8     0A A6 06 F1 | 	add	local01, #10
2d5bc     53 B1 E2 FA | 	rdword	local06, local01
2d5c0     0A A6 86 F1 | 	sub	local01, #10
2d5c4     58 AF 12 F2 | 	cmp	local05, local06 wc
2d5c8     2C 00 90 3D |  if_ae	jmp	#LR__4781
2d5cc     01 A6 06 F1 | 	add	local01, #1
2d5d0     53 93 C2 FA | 	rdbyte	arg01, local01
2d5d4     01 A6 86 F1 | 	sub	local01, #1
2d5d8     56 95 02 F6 | 	mov	arg02, local04
2d5dc     55 97 02 F6 | 	mov	arg03, local03
2d5e0     57 97 02 F1 | 	add	arg03, local05
2d5e4     01 98 06 F6 | 	mov	arg04, #1
2d5e8     80 F1 BF FD | 	call	#_fatfs_cc_disk_write
2d5ec     00 7A 0E F2 | 	cmp	result1, #0 wz
2d5f0     01 AE 06 A1 |  if_e	add	local05, #1
2d5f4     C0 FF 9F AD |  if_e	jmp	#LR__4780
2d5f8                 | LR__4781
2d5f8                 | ' 	}
2d5f8                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
2d5f8     0A A6 06 F1 | 	add	local01, #10
2d5fc     53 AD E2 FA | 	rdword	local04, local01
2d600     56 AF 0A F2 | 	cmp	local05, local04 wz
2d604     00 B0 06 A6 |  if_e	mov	local06, #0
2d608     01 B0 06 56 |  if_ne	mov	local06, #1
2d60c     58 7B 02 F6 | 	mov	result1, local06
2d610                 | LR__4782
2d610     E7 F0 03 F6 | 	mov	ptra, fp
2d614     F2 00 A0 FD | 	call	#popregs_
2d618                 | _fatfs_cc_dir_clear_ret
2d618     2D 00 64 FD | 	ret
2d61c                 | 
2d61c                 | _fatfs_cc_dir_sdi
2d61c     06 CA 05 F6 | 	mov	COUNT_, #6
2d620     E8 00 A0 FD | 	call	#pushregs_
2d624     49 A7 02 F6 | 	mov	local01, arg01
2d628     4A A9 02 F6 | 	mov	local02, arg02
2d62c     53 AB 02 FB | 	rdlong	local03, local01
2d630     00 10 00 FF 
2d634     00 A8 16 F2 | 	cmp	local02, ##2097152 wc
2d638     1F A8 CE C7 |  if_b	test	local02, #31 wz
2d63c                 | ' 		return FR_INT_ERR;
2d63c     02 7A 06 76 |  if_nc_or_nz	mov	result1, #2
2d640     34 01 90 7D |  if_nc_or_nz	jmp	#LR__4796
2d644     10 A6 06 F1 | 	add	local01, #16
2d648     53 A9 62 FC | 	wrlong	local02, local01
2d64c     08 A6 86 F1 | 	sub	local01, #8
2d650     53 AD 0A FB | 	rdlong	local04, local01 wz
2d654     08 A6 86 F1 | 	sub	local01, #8
2d658     55 AF C2 AA |  if_e	rdbyte	local05, local03
2d65c     03 AE 16 A2 |  if_e	cmp	local05, #3 wc
2d660     28 AA 06 21 |  if_nc_and_z	add	local03, #40
2d664     55 AD 02 2B |  if_nc_and_z	rdlong	local04, local03
2d668     28 AA 86 21 |  if_nc_and_z	sub	local03, #40
2d66c     00 AC 0E F2 | 	cmp	local04, #0 wz
2d670     3C 00 90 5D |  if_ne	jmp	#LR__4790
2d674     54 AF 02 F6 | 	mov	local05, local02
2d678     05 AE 46 F0 | 	shr	local05, #5
2d67c     08 AA 06 F1 | 	add	local03, #8
2d680     55 95 E2 FA | 	rdword	arg02, local03
2d684     08 AA 86 F1 | 	sub	local03, #8
2d688     4A AF 12 F2 | 	cmp	local05, arg02 wc
2d68c     02 7A 06 36 |  if_ae	mov	result1, #2
2d690     E4 00 90 3D |  if_ae	jmp	#LR__4796
2d694     28 AA 06 F1 | 	add	local03, #40
2d698     55 AF 02 FB | 	rdlong	local05, local03
2d69c     28 AA 86 F1 | 	sub	local03, #40
2d6a0     18 A6 06 F1 | 	add	local01, #24
2d6a4     53 AF 62 FC | 	wrlong	local05, local01
2d6a8     18 A6 86 F1 | 	sub	local01, #24
2d6ac     7C 00 90 FD | 	jmp	#LR__4795
2d6b0                 | LR__4790
2d6b0     0A AA 06 F1 | 	add	local03, #10
2d6b4     55 B1 E2 FA | 	rdword	local06, local03
2d6b8     0A AA 86 F1 | 	sub	local03, #10
2d6bc     09 B0 66 F0 | 	shl	local06, #9
2d6c0                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
2d6c0                 | ' 		while (ofs >= csz) {
2d6c0                 | LR__4791
2d6c0     58 A9 12 F2 | 	cmp	local02, local06 wc
2d6c4     4C 00 90 CD |  if_b	jmp	#LR__4794
2d6c8     53 93 02 F6 | 	mov	arg01, local01
2d6cc     56 95 02 F6 | 	mov	arg02, local04
2d6d0     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
2d6d4     3D AD 02 F6 | 	mov	local04, result1
2d6d8     FF FF 7F FF 
2d6dc     FF AD 0E F2 | 	cmp	local04, ##-1 wz
2d6e0     01 7A 06 A6 |  if_e	mov	result1, #1
2d6e4     90 00 90 AD |  if_e	jmp	#LR__4796
2d6e8     02 AC 16 F2 | 	cmp	local04, #2 wc
2d6ec     14 00 90 CD |  if_b	jmp	#LR__4792
2d6f0     18 AA 06 F1 | 	add	local03, #24
2d6f4     55 AF 02 FB | 	rdlong	local05, local03
2d6f8     18 AA 86 F1 | 	sub	local03, #24
2d6fc     57 AD 12 F2 | 	cmp	local04, local05 wc
2d700     08 00 90 CD |  if_b	jmp	#LR__4793
2d704                 | LR__4792
2d704     02 7A 06 F6 | 	mov	result1, #2
2d708     6C 00 90 FD | 	jmp	#LR__4796
2d70c                 | LR__4793
2d70c     58 A9 82 F1 | 	sub	local02, local06
2d710     AC FF 9F FD | 	jmp	#LR__4791
2d714                 | LR__4794
2d714     55 93 02 F6 | 	mov	arg01, local03
2d718     56 95 02 F6 | 	mov	arg02, local04
2d71c     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
2d720     18 A6 06 F1 | 	add	local01, #24
2d724     53 7B 62 FC | 	wrlong	result1, local01
2d728     18 A6 86 F1 | 	sub	local01, #24
2d72c                 | LR__4795
2d72c     14 A6 06 F1 | 	add	local01, #20
2d730     53 AD 62 FC | 	wrlong	local04, local01
2d734     04 A6 06 F1 | 	add	local01, #4
2d738     53 AF 0A FB | 	rdlong	local05, local01 wz
2d73c     18 A6 86 F1 | 	sub	local01, #24
2d740     02 7A 06 A6 |  if_e	mov	result1, #2
2d744     30 00 90 AD |  if_e	jmp	#LR__4796
2d748     54 B1 02 F6 | 	mov	local06, local02
2d74c     09 B0 46 F0 | 	shr	local06, #9
2d750     18 A6 06 F1 | 	add	local01, #24
2d754     53 AF 02 FB | 	rdlong	local05, local01
2d758     58 AF 02 F1 | 	add	local05, local06
2d75c     53 AF 62 FC | 	wrlong	local05, local01
2d760     34 AA 06 F1 | 	add	local03, #52
2d764     FF A9 06 F5 | 	and	local02, #511
2d768     54 AB 02 F1 | 	add	local03, local02
2d76c     04 A6 06 F1 | 	add	local01, #4
2d770     53 AB 62 FC | 	wrlong	local03, local01
2d774                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
2d774                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
2d774                 | ' 
2d774                 | ' 	return FR_OK;
2d774     00 7A 06 F6 | 	mov	result1, #0
2d778                 | LR__4796
2d778     E7 F0 03 F6 | 	mov	ptra, fp
2d77c     F2 00 A0 FD | 	call	#popregs_
2d780                 | _fatfs_cc_dir_sdi_ret
2d780     2D 00 64 FD | 	ret
2d784                 | 
2d784                 | _fatfs_cc_dir_next
2d784     05 CA 05 F6 | 	mov	COUNT_, #5
2d788     E8 00 A0 FD | 	call	#pushregs_
2d78c     49 A7 02 F6 | 	mov	local01, arg01
2d790     4A A9 02 F6 | 	mov	local02, arg02
2d794     53 AB 02 FB | 	rdlong	local03, local01
2d798     10 A6 06 F1 | 	add	local01, #16
2d79c     53 AD 02 FB | 	rdlong	local04, local01
2d7a0     10 A6 86 F1 | 	sub	local01, #16
2d7a4     20 AC 06 F1 | 	add	local04, #32
2d7a8     00 10 00 FF 
2d7ac     00 AC 16 F2 | 	cmp	local04, ##2097152 wc
2d7b0     18 A6 06 31 |  if_ae	add	local01, #24
2d7b4     53 01 68 3C |  if_ae	wrlong	#0, local01
2d7b8     18 A6 86 31 |  if_ae	sub	local01, #24
2d7bc     18 A6 06 F1 | 	add	local01, #24
2d7c0     53 95 0A FB | 	rdlong	arg02, local01 wz
2d7c4     18 A6 86 F1 | 	sub	local01, #24
2d7c8     04 7A 06 A6 |  if_e	mov	result1, #4
2d7cc     64 01 90 AD |  if_e	jmp	#LR__4805
2d7d0     FF AD CE F7 | 	test	local04, #511 wz
2d7d4     3C 01 90 5D |  if_ne	jmp	#LR__4804
2d7d8     18 A6 06 F1 | 	add	local01, #24
2d7dc     53 95 02 FB | 	rdlong	arg02, local01
2d7e0     01 94 06 F1 | 	add	arg02, #1
2d7e4     53 95 62 FC | 	wrlong	arg02, local01
2d7e8     04 A6 86 F1 | 	sub	local01, #4
2d7ec     53 95 0A FB | 	rdlong	arg02, local01 wz
2d7f0     14 A6 86 F1 | 	sub	local01, #20
2d7f4     2C 00 90 5D |  if_ne	jmp	#LR__4800
2d7f8     56 95 02 F6 | 	mov	arg02, local04
2d7fc     05 94 46 F0 | 	shr	arg02, #5
2d800     08 AA 06 F1 | 	add	local03, #8
2d804     55 A9 E2 FA | 	rdword	local02, local03
2d808     08 AA 86 F1 | 	sub	local03, #8
2d80c     54 95 12 F2 | 	cmp	arg02, local02 wc
2d810     18 A6 06 31 |  if_ae	add	local01, #24
2d814     53 01 68 3C |  if_ae	wrlong	#0, local01
2d818                 | ' 				dp->sect = 0; return FR_NO_FILE;
2d818     04 7A 06 36 |  if_ae	mov	result1, #4
2d81c     14 01 90 3D |  if_ae	jmp	#LR__4805
2d820     F0 00 90 FD | 	jmp	#LR__4803
2d824                 | LR__4800
2d824     56 93 02 F6 | 	mov	arg01, local04
2d828     09 92 46 F0 | 	shr	arg01, #9
2d82c     0A AA 06 F1 | 	add	local03, #10
2d830     55 95 E2 FA | 	rdword	arg02, local03
2d834     0A AA 86 F1 | 	sub	local03, #10
2d838     01 94 86 F1 | 	sub	arg02, #1
2d83c     4A 93 CA F7 | 	test	arg01, arg02 wz
2d840     D0 00 90 5D |  if_ne	jmp	#LR__4802
2d844     53 93 02 F6 | 	mov	arg01, local01
2d848     14 A6 06 F1 | 	add	local01, #20
2d84c     53 95 02 FB | 	rdlong	arg02, local01
2d850     14 A6 86 F1 | 	sub	local01, #20
2d854     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
2d858     3D AF 02 F6 | 	mov	local05, result1
2d85c     02 AE 16 F2 | 	cmp	local05, #2 wc
2d860     02 7A 06 C6 |  if_b	mov	result1, #2
2d864     CC 00 90 CD |  if_b	jmp	#LR__4805
2d868     FF FF 7F FF 
2d86c     FF AF 0E F2 | 	cmp	local05, ##-1 wz
2d870     01 7A 06 A6 |  if_e	mov	result1, #1
2d874     BC 00 90 AD |  if_e	jmp	#LR__4805
2d878     18 AA 06 F1 | 	add	local03, #24
2d87c     55 95 02 FB | 	rdlong	arg02, local03
2d880     18 AA 86 F1 | 	sub	local03, #24
2d884     4A AF 12 F2 | 	cmp	local05, arg02 wc
2d888     68 00 90 CD |  if_b	jmp	#LR__4801
2d88c     00 A8 0E F2 | 	cmp	local02, #0 wz
2d890     18 A6 06 A1 |  if_e	add	local01, #24
2d894     53 01 68 AC |  if_e	wrlong	#0, local01
2d898                 | ' 						dp->sect = 0; return FR_NO_FILE;
2d898     04 7A 06 A6 |  if_e	mov	result1, #4
2d89c     94 00 90 AD |  if_e	jmp	#LR__4805
2d8a0     53 93 02 F6 | 	mov	arg01, local01
2d8a4     14 A6 06 F1 | 	add	local01, #20
2d8a8     53 95 02 FB | 	rdlong	arg02, local01
2d8ac     14 A6 86 F1 | 	sub	local01, #20
2d8b0     84 FA BF FD | 	call	#_fatfs_cc_create_chain
2d8b4     3D AF 0A F6 | 	mov	local05, result1 wz
2d8b8     07 7A 06 A6 |  if_e	mov	result1, #7
2d8bc     74 00 90 AD |  if_e	jmp	#LR__4805
2d8c0     01 AE 0E F2 | 	cmp	local05, #1 wz
2d8c4     02 7A 06 A6 |  if_e	mov	result1, #2
2d8c8     68 00 90 AD |  if_e	jmp	#LR__4805
2d8cc     FF FF 7F FF 
2d8d0     FF AF 0E F2 | 	cmp	local05, ##-1 wz
2d8d4     01 7A 06 A6 |  if_e	mov	result1, #1
2d8d8     58 00 90 AD |  if_e	jmp	#LR__4805
2d8dc     57 95 02 F6 | 	mov	arg02, local05
2d8e0     55 93 02 F6 | 	mov	arg01, local03
2d8e4     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
2d8e8     00 7A 0E F2 | 	cmp	result1, #0 wz
2d8ec     01 7A 06 56 |  if_ne	mov	result1, #1
2d8f0     40 00 90 5D |  if_ne	jmp	#LR__4805
2d8f4                 | LR__4801
2d8f4     14 A6 06 F1 | 	add	local01, #20
2d8f8     53 AF 62 FC | 	wrlong	local05, local01
2d8fc     55 93 02 F6 | 	mov	arg01, local03
2d900     57 95 02 F6 | 	mov	arg02, local05
2d904     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
2d908     04 A6 06 F1 | 	add	local01, #4
2d90c     53 7B 62 FC | 	wrlong	result1, local01
2d910     18 A6 86 F1 | 	sub	local01, #24
2d914                 | LR__4802
2d914                 | LR__4803
2d914                 | LR__4804
2d914     10 A6 06 F1 | 	add	local01, #16
2d918     53 AD 62 FC | 	wrlong	local04, local01
2d91c     34 AA 06 F1 | 	add	local03, #52
2d920     FF AD 06 F5 | 	and	local04, #511
2d924     56 AB 02 F1 | 	add	local03, local04
2d928     0C A6 06 F1 | 	add	local01, #12
2d92c     53 AB 62 FC | 	wrlong	local03, local01
2d930                 | ' #line 1771 "ff.c"
2d930                 | ' 				}
2d930                 | ' 				dp->clust = clst;
2d930                 | ' 				dp->sect = clst2sect(fs, clst);
2d930                 | ' 			}
2d930                 | ' 		}
2d930                 | ' 	}
2d930                 | ' 	dp->dptr = ofs;
2d930                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
2d930                 | ' 
2d930                 | ' 	return FR_OK;
2d930     00 7A 06 F6 | 	mov	result1, #0
2d934                 | LR__4805
2d934     E7 F0 03 F6 | 	mov	ptra, fp
2d938     F2 00 A0 FD | 	call	#popregs_
2d93c                 | _fatfs_cc_dir_next_ret
2d93c     2D 00 64 FD | 	ret
2d940                 | 
2d940                 | _fatfs_cc_dir_alloc
2d940     08 CA 05 F6 | 	mov	COUNT_, #8
2d944     E8 00 A0 FD | 	call	#pushregs_
2d948     49 A7 02 F6 | 	mov	local01, arg01
2d94c     4A A9 02 F6 | 	mov	local02, arg02
2d950     53 AB 02 FB | 	rdlong	local03, local01
2d954     53 93 02 F6 | 	mov	arg01, local01
2d958     00 94 06 F6 | 	mov	arg02, #0
2d95c     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
2d960     3D AD 0A F6 | 	mov	local04, result1 wz
2d964     70 00 90 5D |  if_ne	jmp	#LR__4814
2d968     00 AE 06 F6 | 	mov	local05, #0
2d96c                 | ' 		n = 0;
2d96c                 | ' 		do {
2d96c                 | LR__4810
2d96c     18 A6 06 F1 | 	add	local01, #24
2d970     53 95 02 FB | 	rdlong	arg02, local01
2d974     18 A6 86 F1 | 	sub	local01, #24
2d978     55 93 02 F6 | 	mov	arg01, local03
2d97c     38 F3 BF FD | 	call	#_fatfs_cc_move_window
2d980     3D AD 0A F6 | 	mov	local04, result1 wz
2d984     50 00 90 5D |  if_ne	jmp	#LR__4813
2d988     1C A6 06 F1 | 	add	local01, #28
2d98c     53 B1 02 FB | 	rdlong	local06, local01
2d990     1C A6 86 F1 | 	sub	local01, #28
2d994     58 B1 C2 FA | 	rdbyte	local06, local06
2d998     E5 B0 0E F2 | 	cmp	local06, #229 wz
2d99c     1C A6 06 51 |  if_ne	add	local01, #28
2d9a0     53 B3 02 5B |  if_ne	rdlong	local07, local01
2d9a4     1C A6 86 51 |  if_ne	sub	local01, #28
2d9a8     59 B5 CA 5A |  if_ne	rdbyte	local08, local07 wz
2d9ac     10 00 90 5D |  if_ne	jmp	#LR__4811
2d9b0     01 AE 06 F1 | 	add	local05, #1
2d9b4     54 AF 0A F2 | 	cmp	local05, local02 wz
2d9b8     1C 00 90 AD |  if_e	jmp	#LR__4813
2d9bc     04 00 90 FD | 	jmp	#LR__4812
2d9c0                 | LR__4811
2d9c0     00 AE 06 F6 | 	mov	local05, #0
2d9c4                 | LR__4812
2d9c4     53 93 02 F6 | 	mov	arg01, local01
2d9c8     01 94 06 F6 | 	mov	arg02, #1
2d9cc     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
2d9d0     3D AD 0A F6 | 	mov	local04, result1 wz
2d9d4     94 FF 9F AD |  if_e	jmp	#LR__4810
2d9d8                 | LR__4813
2d9d8                 | LR__4814
2d9d8     04 AC 0E F2 | 	cmp	local04, #4 wz
2d9dc     07 AC 06 A6 |  if_e	mov	local04, #7
2d9e0                 | ' 	return res;
2d9e0     56 7B 02 F6 | 	mov	result1, local04
2d9e4     E7 F0 03 F6 | 	mov	ptra, fp
2d9e8     F2 00 A0 FD | 	call	#popregs_
2d9ec                 | _fatfs_cc_dir_alloc_ret
2d9ec     2D 00 64 FD | 	ret
2d9f0                 | 
2d9f0                 | _fatfs_cc_ld_clust
2d9f0     49 81 02 F6 | 	mov	_var01, arg01
2d9f4     4A 93 02 F6 | 	mov	arg01, arg02
2d9f8     1A 92 06 F1 | 	add	arg01, #26
2d9fc                 | ' {
2d9fc                 | ' 
2d9fc                 | ' 	return *((WORD*)ptr);
2d9fc     49 7B E2 FA | 	rdword	result1, arg01
2da00     3D 93 32 F9 | 	getword	arg01, result1, #0
2da04     40 81 C2 FA | 	rdbyte	_var01, _var01
2da08     03 80 0E F2 | 	cmp	_var01, #3 wz
2da0c     14 94 06 A1 |  if_e	add	arg02, #20
2da10                 | ' {
2da10                 | ' 
2da10                 | ' 	return *((WORD*)ptr);
2da10     4A 7B E2 AA |  if_e	rdword	result1, arg02
2da14     10 7A 66 A0 |  if_e	shl	result1, #16
2da18     3D 93 42 A5 |  if_e	or	arg01, result1
2da1c                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
2da1c                 | ' 	}
2da1c                 | ' 
2da1c                 | ' 	return cl;
2da1c     49 7B 02 F6 | 	mov	result1, arg01
2da20                 | _fatfs_cc_ld_clust_ret
2da20     2D 00 64 FD | 	ret
2da24                 | 
2da24                 | _fatfs_cc_st_clust
2da24     49 81 02 F6 | 	mov	_var01, arg01
2da28     4A 93 02 F6 | 	mov	arg01, arg02
2da2c     1A 92 06 F1 | 	add	arg01, #26
2da30     49 97 52 FC | 	wrword	arg03, arg01
2da34     40 81 C2 FA | 	rdbyte	_var01, _var01
2da38     03 80 0E F2 | 	cmp	_var01, #3 wz
2da3c     14 94 06 A1 |  if_e	add	arg02, #20
2da40     10 96 46 A0 |  if_e	shr	arg03, #16
2da44     4A 97 52 AC |  if_e	wrword	arg03, arg02
2da48                 | _fatfs_cc_st_clust_ret
2da48     2D 00 64 FD | 	ret
2da4c                 | 
2da4c                 | _fatfs_cc_cmp_lfn
2da4c     07 CA 05 F6 | 	mov	COUNT_, #7
2da50     E8 00 A0 FD | 	call	#pushregs_
2da54     49 A7 02 F6 | 	mov	local01, arg01
2da58     4A 93 02 F6 | 	mov	arg01, arg02
2da5c     1A 92 06 F1 | 	add	arg01, #26
2da60                 | ' {
2da60                 | ' 
2da60                 | ' 	return *((WORD*)ptr);
2da60     49 7B EA FA | 	rdword	result1, arg01 wz
2da64     00 7A 06 56 |  if_ne	mov	result1, #0
2da68     D8 00 90 5D |  if_ne	jmp	#LR__4826
2da6c     4A A9 C2 FA | 	rdbyte	local02, arg02
2da70     3F A8 06 F5 | 	and	local02, #63
2da74     01 A8 86 F1 | 	sub	local02, #1
2da78     0D A8 06 FD | 	qmul	local02, #13
2da7c                 | ' 
2da7c                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
2da7c                 | ' 
2da7c                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2da7c     01 AA 06 F6 | 	mov	local03, #1
2da80     00 AC 06 F6 | 	mov	local04, #0
2da84     18 AE 62 FD | 	getqx	local05
2da88                 | LR__4820
2da88     0D AC 16 F2 | 	cmp	local04, #13 wc
2da8c     94 00 90 3D |  if_ae	jmp	#LR__4825
2da90     4A 93 02 F6 | 	mov	arg01, arg02
2da94     56 A9 02 F6 | 	mov	local02, local04
2da98     36 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
2da9c     01 00 00 FF 
2daa0     AE 7B 06 F1 | 	add	result1, ##942
2daa4     3D A9 02 F1 | 	add	local02, result1
2daa8     54 A9 C2 FA | 	rdbyte	local02, local02
2daac     54 93 02 F1 | 	add	arg01, local02
2dab0                 | ' {
2dab0                 | ' 
2dab0                 | ' 	return *((WORD*)ptr);
2dab0     49 7B E2 FA | 	rdword	result1, arg01
2dab4     3D B1 02 F6 | 	mov	local06, result1
2dab8     55 A9 02 F6 | 	mov	local02, local03
2dabc     0F A8 4E F7 | 	zerox	local02, #15 wz
2dac0     44 00 90 AD |  if_e	jmp	#LR__4823
2dac4     00 AF 16 F2 | 	cmp	local05, #256 wc
2dac8     2C 00 90 3D |  if_ae	jmp	#LR__4821
2dacc     58 93 32 F9 | 	getword	arg01, local06, #0
2dad0     CC E4 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2dad4     3D A9 02 F6 | 	mov	local02, result1
2dad8     57 AB 02 F6 | 	mov	local03, local05
2dadc     01 AA 66 F0 | 	shl	local03, #1
2dae0     53 AB 02 F1 | 	add	local03, local01
2dae4     55 93 E2 FA | 	rdword	arg01, local03
2dae8     01 AE 06 F1 | 	add	local05, #1
2daec     B0 E4 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2daf0     3D A9 0A F2 | 	cmp	local02, result1 wz
2daf4     08 00 90 AD |  if_e	jmp	#LR__4822
2daf8                 | LR__4821
2daf8                 | ' 				return 0;
2daf8     00 7A 06 F6 | 	mov	result1, #0
2dafc     44 00 90 FD | 	jmp	#LR__4826
2db00                 | LR__4822
2db00     58 AB 02 F6 | 	mov	local03, local06
2db04     14 00 90 FD | 	jmp	#LR__4824
2db08                 | LR__4823
2db08     58 B1 32 F9 | 	getword	local06, local06, #0
2db0c     7F 00 00 FF 
2db10     FF B1 0E F2 | 	cmp	local06, ##65535 wz
2db14     00 7A 06 56 |  if_ne	mov	result1, #0
2db18     28 00 90 5D |  if_ne	jmp	#LR__4826
2db1c                 | LR__4824
2db1c     01 AC 06 F1 | 	add	local04, #1
2db20     64 FF 9F FD | 	jmp	#LR__4820
2db24                 | LR__4825
2db24     4A A9 C2 FA | 	rdbyte	local02, arg02
2db28     40 A8 CE F7 | 	test	local02, #64 wz
2db2c     00 AA 0E 52 |  if_ne	cmp	local03, #0 wz
2db30     01 AE 66 50 |  if_ne	shl	local05, #1
2db34     53 AF 02 51 |  if_ne	add	local05, local01
2db38     57 B3 EA 5A |  if_ne	rdword	local07, local05 wz
2db3c     00 7A 06 56 |  if_ne	mov	result1, #0
2db40                 | ' 
2db40                 | ' 	return 1;
2db40     01 7A 06 A6 |  if_e	mov	result1, #1
2db44                 | LR__4826
2db44     E7 F0 03 F6 | 	mov	ptra, fp
2db48     F2 00 A0 FD | 	call	#popregs_
2db4c                 | _fatfs_cc_cmp_lfn_ret
2db4c     2D 00 64 FD | 	ret
2db50                 | 
2db50                 | _fatfs_cc_pick_lfn
2db50     49 81 02 F6 | 	mov	_var01, arg01
2db54     4A 93 02 F6 | 	mov	arg01, arg02
2db58     1A 92 06 F1 | 	add	arg01, #26
2db5c                 | ' {
2db5c                 | ' 
2db5c                 | ' 	return *((WORD*)ptr);
2db5c     49 7B EA FA | 	rdword	result1, arg01 wz
2db60     00 7A 06 56 |  if_ne	mov	result1, #0
2db64     CC 00 90 5D |  if_ne	jmp	#LR__4835
2db68     4A 83 C2 FA | 	rdbyte	_var02, arg02
2db6c     40 82 26 F5 | 	andn	_var02, #64
2db70     01 82 86 F1 | 	sub	_var02, #1
2db74     0D 82 06 FD | 	qmul	_var02, #13
2db78                 | ' 
2db78                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
2db78                 | ' 
2db78                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2db78     01 84 06 F6 | 	mov	_var03, #1
2db7c     00 86 06 F6 | 	mov	_var04, #0
2db80     18 88 62 FD | 	getqx	_var05
2db84                 | LR__4830
2db84     0D 86 16 F2 | 	cmp	_var04, #13 wc
2db88     78 00 90 3D |  if_ae	jmp	#LR__4833
2db8c     4A 93 02 F6 | 	mov	arg01, arg02
2db90     43 83 02 F6 | 	mov	_var02, _var04
2db94     36 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
2db98     01 00 00 FF 
2db9c     AE 7B 06 F1 | 	add	result1, ##942
2dba0     3D 83 02 F1 | 	add	_var02, result1
2dba4     41 83 C2 FA | 	rdbyte	_var02, _var02
2dba8     41 93 02 F1 | 	add	arg01, _var02
2dbac                 | ' {
2dbac                 | ' 
2dbac                 | ' 	return *((WORD*)ptr);
2dbac     49 7B E2 FA | 	rdword	result1, arg01
2dbb0     3D 8B 02 F6 | 	mov	_var06, result1
2dbb4     42 83 02 F6 | 	mov	_var02, _var03
2dbb8     0F 82 4E F7 | 	zerox	_var02, #15 wz
2dbbc     28 00 90 AD |  if_e	jmp	#LR__4831
2dbc0     00 89 16 F2 | 	cmp	_var05, #256 wc
2dbc4     00 7A 06 36 |  if_ae	mov	result1, #0
2dbc8     68 00 90 3D |  if_ae	jmp	#LR__4835
2dbcc     44 83 02 F6 | 	mov	_var02, _var05
2dbd0     01 82 66 F0 | 	shl	_var02, #1
2dbd4     40 83 02 F1 | 	add	_var02, _var01
2dbd8     45 85 02 F6 | 	mov	_var03, _var06
2dbdc     41 85 52 FC | 	wrword	_var03, _var02
2dbe0     01 88 06 F1 | 	add	_var05, #1
2dbe4     14 00 90 FD | 	jmp	#LR__4832
2dbe8                 | LR__4831
2dbe8     45 8B 32 F9 | 	getword	_var06, _var06, #0
2dbec     7F 00 00 FF 
2dbf0     FF 8B 0E F2 | 	cmp	_var06, ##65535 wz
2dbf4     00 7A 06 56 |  if_ne	mov	result1, #0
2dbf8     38 00 90 5D |  if_ne	jmp	#LR__4835
2dbfc                 | LR__4832
2dbfc     01 86 06 F1 | 	add	_var04, #1
2dc00     80 FF 9F FD | 	jmp	#LR__4830
2dc04                 | LR__4833
2dc04     4A 83 C2 FA | 	rdbyte	_var02, arg02
2dc08     40 82 CE F7 | 	test	_var02, #64 wz
2dc0c     42 8D 02 56 |  if_ne	mov	_var07, _var03
2dc10     0F 8C 4E 57 |  if_ne	zerox	_var07, #15 wz
2dc14     18 00 90 AD |  if_e	jmp	#LR__4834
2dc18     00 89 16 F2 | 	cmp	_var05, #256 wc
2dc1c     00 7A 06 36 |  if_ae	mov	result1, #0
2dc20     10 00 90 3D |  if_ae	jmp	#LR__4835
2dc24     01 88 66 F0 | 	shl	_var05, #1
2dc28     40 89 02 F1 | 	add	_var05, _var01
2dc2c     44 01 58 FC | 	wrword	#0, _var05
2dc30                 | LR__4834
2dc30                 | ' 		lfnbuf[i] = 0;
2dc30                 | ' 	}
2dc30                 | ' 
2dc30                 | ' 	return 1;
2dc30     01 7A 06 F6 | 	mov	result1, #1
2dc34                 | LR__4835
2dc34                 | _fatfs_cc_pick_lfn_ret
2dc34     2D 00 64 FD | 	ret
2dc38                 | 
2dc38                 | _fatfs_cc_put_lfn
2dc38     4A 81 02 F6 | 	mov	_var01, arg02
2dc3c     0D 80 06 F1 | 	add	_var01, #13
2dc40     40 99 42 FC | 	wrbyte	arg04, _var01
2dc44     4B 99 E2 F8 | 	getbyte	arg04, arg03, #0
2dc48     01 98 86 F1 | 	sub	arg04, #1
2dc4c     0D 98 06 FD | 	qmul	arg04, #13
2dc50     49 83 02 F6 | 	mov	_var02, arg01
2dc54     02 80 86 F1 | 	sub	_var01, #2
2dc58     40 1F 48 FC | 	wrbyte	#15, _var01
2dc5c     01 80 06 F1 | 	add	_var01, #1
2dc60     40 01 48 FC | 	wrbyte	#0, _var01
2dc64     0C 80 86 F1 | 	sub	_var01, #12
2dc68     40 93 02 F6 | 	mov	arg01, _var01
2dc6c     1A 92 06 F1 | 	add	arg01, #26
2dc70     49 01 58 FC | 	wrword	#0, arg01
2dc74     00 84 06 F6 | 	mov	_var03, #0
2dc78     00 86 06 F6 | 	mov	_var04, #0
2dc7c                 | ' 	BYTE* dir,
2dc7c                 | ' 	BYTE ord,
2dc7c                 | ' 	BYTE sum
2dc7c                 | ' )
2dc7c                 | ' {
2dc7c                 | ' 	UINT i, s;
2dc7c                 | ' 	WCHAR wc;
2dc7c                 | ' 
2dc7c                 | ' 
2dc7c                 | ' 	dir[ 13 ] = sum;
2dc7c                 | ' 	dir[ 11 ] =  0x0F ;
2dc7c                 | ' 	dir[ 12 ] = 0;
2dc7c                 | ' 	st_word(dir +  26 , 0);
2dc7c                 | ' 
2dc7c                 | ' 	i = (ord - 1) * 13;
2dc7c                 | ' 	s = wc = 0;
2dc7c                 | ' 	do {
2dc7c     18 88 62 FD | 	getqx	_var05
2dc80     D7 2E 48 FB | 	callpa	#(@LR__4841-@LR__4840)>>2,fcache_load_ptr_
2dc84                 | LR__4840
2dc84     42 99 32 F9 | 	getword	arg04, _var03, #0
2dc88     7F 00 00 FF 
2dc8c     FF 99 0E F2 | 	cmp	arg04, ##65535 wz
2dc90     44 93 02 56 |  if_ne	mov	arg01, _var05
2dc94     01 88 06 51 |  if_ne	add	_var05, #1
2dc98     01 92 66 50 |  if_ne	shl	arg01, #1
2dc9c     41 93 02 51 |  if_ne	add	arg01, _var02
2dca0     49 85 E2 5A |  if_ne	rdword	_var03, arg01
2dca4     40 93 02 F6 | 	mov	arg01, _var01
2dca8     43 99 02 F6 | 	mov	arg04, _var04
2dcac     36 95 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
2dcb0     01 00 00 FF 
2dcb4     AE 95 06 F1 | 	add	arg02, ##942
2dcb8     4A 99 02 F1 | 	add	arg04, arg02
2dcbc     4C 99 C2 FA | 	rdbyte	arg04, arg04
2dcc0     4C 93 02 F1 | 	add	arg01, arg04
2dcc4     49 85 52 FC | 	wrword	_var03, arg01
2dcc8     42 99 02 F6 | 	mov	arg04, _var03
2dccc     0F 98 4E F7 | 	zerox	arg04, #15 wz
2dcd0     0F 84 CE A9 |  if_e	bmask	_var03, #15
2dcd4     01 86 06 F1 | 	add	_var04, #1
2dcd8     0D 86 16 F2 | 	cmp	_var04, #13 wc
2dcdc     A4 FF 9F CD |  if_b	jmp	#LR__4840
2dce0                 | LR__4841
2dce0     42 85 32 F9 | 	getword	_var03, _var03, #0
2dce4     7F 00 00 FF 
2dce8     FF 85 0E F2 | 	cmp	_var03, ##65535 wz
2dcec     01 88 66 50 |  if_ne	shl	_var05, #1
2dcf0     41 89 02 51 |  if_ne	add	_var05, _var02
2dcf4     44 89 EA 5A |  if_ne	rdword	_var05, _var05 wz
2dcf8     4B 97 E2 A8 |  if_e	getbyte	arg03, arg03, #0
2dcfc     40 96 46 A5 |  if_e	or	arg03, #64
2dd00     40 97 42 FC | 	wrbyte	arg03, _var01
2dd04                 | _fatfs_cc_put_lfn_ret
2dd04     2D 00 64 FD | 	ret
2dd08                 | 
2dd08                 | _fatfs_cc_gen_numname
2dd08     08 CA 05 F6 | 	mov	COUNT_, #8
2dd0c     E8 00 A0 FD | 	call	#pushregs_
2dd10     2C F0 07 F1 | 	add	ptra, #44
2dd14     49 A7 02 F6 | 	mov	local01, arg01
2dd18     4A A9 02 F6 | 	mov	local02, arg02
2dd1c     4B AB 02 F6 | 	mov	local03, arg03
2dd20     4C AD 02 F6 | 	mov	local04, arg04
2dd24     53 93 02 F6 | 	mov	arg01, local01
2dd28     54 95 02 F6 | 	mov	arg02, local02
2dd2c     0B 96 06 F6 | 	mov	arg03, #11
2dd30     84 6E BF FD | 	call	#__system____builtin_memmove
2dd34     06 AC 16 F2 | 	cmp	local04, #6 wc
2dd38     48 00 90 CD |  if_b	jmp	#LR__4855
2dd3c     56 AF 02 F6 | 	mov	local05, local04
2dd40     D7 1E 48 FB | 	callpa	#(@LR__4853-@LR__4850)>>2,fcache_load_ptr_
2dd44                 | ' 		sreg = seq;
2dd44                 | ' 		while (*lfn) {
2dd44                 | LR__4850
2dd44     55 B1 EA FA | 	rdword	local06, local03 wz
2dd48     34 00 90 AD |  if_e	jmp	#LR__4854
2dd4c     55 B3 E2 FA | 	rdword	local07, local03
2dd50                 | ' 			wc = *lfn++;
2dd50                 | ' 			for (i = 0; i < 16; i++) {
2dd50     02 AA 06 F1 | 	add	local03, #2
2dd54     10 12 DC FC | 	rep	@LR__4852, #16
2dd58                 | LR__4851
2dd58     01 AE 66 F0 | 	shl	local05, #1
2dd5c     59 B1 32 F9 | 	getword	local06, local07, #0
2dd60     01 B0 06 F5 | 	and	local06, #1
2dd64     58 AF 02 F1 | 	add	local05, local06
2dd68     59 B3 32 F9 | 	getword	local07, local07, #0
2dd6c     01 B2 46 F0 | 	shr	local07, #1
2dd70     10 AE 2E F4 | 	testbn	local05, #16 wz
2dd74     88 00 00 5F 
2dd78     21 AE 66 55 |  if_ne	xor	local05, ##69665
2dd7c                 | LR__4852
2dd7c     C4 FF 9F FD | 	jmp	#LR__4850
2dd80                 | LR__4853
2dd80                 | LR__4854
2dd80     57 AD 02 F6 | 	mov	local04, local05
2dd84                 | LR__4855
2dd84     07 B2 06 F6 | 	mov	local07, #7
2dd88     D7 1E 48 FB | 	callpa	#(@LR__4857-@LR__4856)>>2,fcache_load_ptr_
2dd8c                 | ' 			}
2dd8c                 | ' 		}
2dd8c                 | ' 		seq = (UINT)sreg;
2dd8c                 | ' 	}
2dd8c                 | ' 
2dd8c                 | ' 
2dd8c                 | ' 	i = 7;
2dd8c                 | ' 	do {
2dd8c                 | LR__4856
2dd8c     56 AF 42 F8 | 	getnib	local05, local04, #0
2dd90     30 AE 06 F1 | 	add	local05, #48
2dd94     04 AC 46 F0 | 	shr	local04, #4
2dd98     57 B1 E2 F8 | 	getbyte	local06, local05, #0
2dd9c     3A B0 16 F2 | 	cmp	local06, #58 wc
2dda0     57 AF E2 38 |  if_ae	getbyte	local05, local05, #0
2dda4     07 AE 06 31 |  if_ae	add	local05, #7
2dda8     59 B1 02 F6 | 	mov	local06, local07
2ddac     01 B2 8E F1 | 	sub	local07, #1 wz
2ddb0     E7 AA 02 F6 | 	mov	local03, fp
2ddb4     10 AA 06 F1 | 	add	local03, #16
2ddb8     55 B1 02 F1 | 	add	local06, local03
2ddbc     58 AF 42 FC | 	wrbyte	local05, local06
2ddc0     00 AC 0E 52 |  if_ne	cmp	local04, #0 wz
2ddc4     C4 FF 9F 5D |  if_ne	jmp	#LR__4856
2ddc8                 | LR__4857
2ddc8     59 B1 02 F6 | 	mov	local06, local07
2ddcc     E7 AE 02 F6 | 	mov	local05, fp
2ddd0     10 AE 06 F1 | 	add	local05, #16
2ddd4     57 B1 02 F1 | 	add	local06, local05
2ddd8     58 FD 48 FC | 	wrbyte	#126, local06
2dddc                 | ' 	ns[i] = '~';
2dddc                 | ' 
2dddc                 | ' 
2dddc                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
2dddc     00 AC 06 F6 | 	mov	local04, #0
2dde0     D7 2A 48 FB | 	callpa	#(@LR__4860-@LR__4858)>>2,fcache_load_ptr_
2dde4                 | LR__4858
2dde4     59 AD 12 F2 | 	cmp	local04, local07 wc
2dde8     4C 00 90 3D |  if_ae	jmp	#LR__4861
2ddec     56 AF 02 F6 | 	mov	local05, local04
2ddf0     53 AF 02 F1 | 	add	local05, local01
2ddf4     57 B1 C2 FA | 	rdbyte	local06, local05
2ddf8     20 B0 0E F2 | 	cmp	local06, #32 wz
2ddfc     38 00 90 AD |  if_e	jmp	#LR__4861
2de00     56 AB 02 F6 | 	mov	local03, local04
2de04     53 AB 02 F1 | 	add	local03, local01
2de08     55 93 CA FA | 	rdbyte	arg01, local03 wz
2de0c     00 7A 06 56 |  if_ne	mov	result1, #0
2de10                 | ' 
2de10                 | ' 	return 0;
2de10     00 7A 06 A6 |  if_e	mov	result1, #0
2de14     00 7A 0E F2 | 	cmp	result1, #0 wz
2de18     14 00 90 AD |  if_e	jmp	#LR__4859
2de1c     59 AB 02 F6 | 	mov	local03, local07
2de20     01 AA 86 F1 | 	sub	local03, #1
2de24     55 AD 0A F2 | 	cmp	local04, local03 wz
2de28     0C 00 90 AD |  if_e	jmp	#LR__4861
2de2c     01 AC 06 F1 | 	add	local04, #1
2de30                 | LR__4859
2de30     01 AC 06 F1 | 	add	local04, #1
2de34     AC FF 9F FD | 	jmp	#LR__4858
2de38                 | LR__4860
2de38                 | LR__4861
2de38     D7 20 48 FB | 	callpa	#(@LR__4865-@LR__4862)>>2,fcache_load_ptr_
2de3c                 | ' 			j++;
2de3c                 | ' 		}
2de3c                 | ' 	}
2de3c                 | ' 	do {
2de3c                 | LR__4862
2de3c     56 B1 02 F6 | 	mov	local06, local04
2de40     53 B1 02 F1 | 	add	local06, local01
2de44     08 B2 16 F2 | 	cmp	local07, #8 wc
2de48     01 AC 06 F1 | 	add	local04, #1
2de4c     1C 00 90 3D |  if_ae	jmp	#LR__4863
2de50     59 AF 02 F6 | 	mov	local05, local07
2de54     E7 AA 02 F6 | 	mov	local03, fp
2de58     10 AA 06 F1 | 	add	local03, #16
2de5c     55 AF 02 F1 | 	add	local05, local03
2de60     57 B5 C2 FA | 	rdbyte	local08, local05
2de64     01 B2 06 F1 | 	add	local07, #1
2de68     04 00 90 FD | 	jmp	#LR__4864
2de6c                 | LR__4863
2de6c     20 B4 06 F6 | 	mov	local08, #32
2de70                 | LR__4864
2de70     58 B5 42 FC | 	wrbyte	local08, local06
2de74     08 AC 16 F2 | 	cmp	local04, #8 wc
2de78     C0 FF 9F CD |  if_b	jmp	#LR__4862
2de7c                 | LR__4865
2de7c     E7 F0 03 F6 | 	mov	ptra, fp
2de80     F2 00 A0 FD | 	call	#popregs_
2de84                 | _fatfs_cc_gen_numname_ret
2de84     2D 00 64 FD | 	ret
2de88                 | 
2de88                 | _fatfs_cc_sum_sfn
2de88     00 80 06 F6 | 	mov	_var01, #0
2de8c                 | ' )
2de8c                 | ' {
2de8c                 | ' 	BYTE sum = 0;
2de8c                 | ' 	UINT n = 11;
2de8c                 | ' 
2de8c                 | ' 	do {
2de8c     D7 12 48 FB | 	callpa	#(@LR__4872-@LR__4870)>>2,fcache_load_ptr_
2de90                 | LR__4870
2de90     0B 10 DC FC | 	rep	@LR__4873, #11
2de94                 | LR__4871
2de94     40 7B E2 F8 | 	getbyte	result1, _var01, #0
2de98     01 7A 46 F0 | 	shr	result1, #1
2de9c     40 81 E2 F8 | 	getbyte	_var01, _var01, #0
2dea0     07 80 66 F0 | 	shl	_var01, #7
2dea4     40 7B 02 F1 | 	add	result1, _var01
2dea8     49 81 C2 FA | 	rdbyte	_var01, arg01
2deac     3D 81 02 F1 | 	add	_var01, result1
2deb0     01 92 06 F1 | 	add	arg01, #1
2deb4                 | LR__4872
2deb4                 | LR__4873
2deb4                 | ' 	return sum;
2deb4     40 7B 02 F6 | 	mov	result1, _var01
2deb8                 | _fatfs_cc_sum_sfn_ret
2deb8     2D 00 64 FD | 	ret
2debc                 | 
2debc                 | _fatfs_cc_dir_read
2debc     0C CA 05 F6 | 	mov	COUNT_, #12
2dec0     E8 00 A0 FD | 	call	#pushregs_
2dec4     49 A7 02 F6 | 	mov	local01, arg01
2dec8     4A A9 02 F6 | 	mov	local02, arg02
2decc     04 AA 06 F6 | 	mov	local03, #4
2ded0     53 AD 02 FB | 	rdlong	local04, local01
2ded4     FF AE 06 F6 | 	mov	local05, #255
2ded8     FF B0 06 F6 | 	mov	local06, #255
2dedc                 | ' )
2dedc                 | ' {
2dedc                 | ' 	FRESULT res = FR_NO_FILE;
2dedc                 | ' 	FATFS *fs = dp->obj.fs;
2dedc                 | ' 	BYTE attr, b;
2dedc                 | ' 
2dedc                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
2dedc                 | ' 
2dedc                 | ' 
2dedc                 | ' 	while (dp->sect) {
2dedc                 | LR__4880
2dedc     18 A6 06 F1 | 	add	local01, #24
2dee0     53 7B 0A FB | 	rdlong	result1, local01 wz
2dee4     18 A6 86 F1 | 	sub	local01, #24
2dee8     AC 01 90 AD |  if_e	jmp	#LR__4890
2deec     18 A6 06 F1 | 	add	local01, #24
2def0     53 95 02 FB | 	rdlong	arg02, local01
2def4     18 A6 86 F1 | 	sub	local01, #24
2def8     56 93 02 F6 | 	mov	arg01, local04
2defc     B8 ED BF FD | 	call	#_fatfs_cc_move_window
2df00     3D AB 0A F6 | 	mov	local03, result1 wz
2df04     90 01 90 5D |  if_ne	jmp	#LR__4890
2df08     1C A6 06 F1 | 	add	local01, #28
2df0c     53 7B 02 FB | 	rdlong	result1, local01
2df10     1C A6 86 F1 | 	sub	local01, #28
2df14     3D B3 C2 FA | 	rdbyte	local07, result1
2df18     59 7B 02 F6 | 	mov	result1, local07
2df1c     07 7A 4E F7 | 	zerox	result1, #7 wz
2df20     04 AA 06 A6 |  if_e	mov	local03, #4
2df24                 | ' 			res = FR_NO_FILE; break;
2df24     70 01 90 AD |  if_e	jmp	#LR__4890
2df28     1C A6 06 F1 | 	add	local01, #28
2df2c     53 B5 02 FB | 	rdlong	local08, local01
2df30     0B B4 06 F1 | 	add	local08, #11
2df34     5A B7 C2 FA | 	rdbyte	local09, local08
2df38     3F B6 06 F5 | 	and	local09, #63
2df3c     16 A6 86 F1 | 	sub	local01, #22
2df40     53 B7 42 FC | 	wrbyte	local09, local01
2df44     06 A6 86 F1 | 	sub	local01, #6
2df48     59 7B E2 F8 | 	getbyte	result1, local07, #0
2df4c     E5 7A 0E F2 | 	cmp	result1, #229 wz
2df50     59 B5 02 56 |  if_ne	mov	local08, local07
2df54     5A B5 E2 58 |  if_ne	getbyte	local08, local08, #0
2df58     2E B4 0E 52 |  if_ne	cmp	local08, #46 wz
2df5c     1C 00 90 AD |  if_e	jmp	#LR__4881
2df60     00 B8 06 F6 | 	mov	local10, #0
2df64     5B B5 E2 F8 | 	getbyte	local08, local09, #0
2df68     20 B4 26 F5 | 	andn	local08, #32
2df6c     08 B4 0E F2 | 	cmp	local08, #8 wz
2df70     01 B8 06 A6 |  if_e	mov	local10, #1
2df74     54 B9 0A F2 | 	cmp	local10, local02 wz
2df78     08 00 90 AD |  if_e	jmp	#LR__4882
2df7c                 | LR__4881
2df7c     FF AE 06 F6 | 	mov	local05, #255
2df80     00 01 90 FD | 	jmp	#LR__4889
2df84                 | LR__4882
2df84     5B B7 E2 F8 | 	getbyte	local09, local09, #0
2df88     0F B6 0E F2 | 	cmp	local09, #15 wz
2df8c     B4 00 90 5D |  if_ne	jmp	#LR__4886
2df90     59 BB E2 F8 | 	getbyte	local11, local07, #0
2df94     40 BA CE F7 | 	test	local11, #64 wz
2df98     30 00 90 AD |  if_e	jmp	#LR__4883
2df9c     1C A6 06 F1 | 	add	local01, #28
2dfa0     53 BB 02 FB | 	rdlong	local11, local01
2dfa4     0D BA 06 F1 | 	add	local11, #13
2dfa8     5D B1 C2 FA | 	rdbyte	local06, local11
2dfac     59 B3 E2 F8 | 	getbyte	local07, local07, #0
2dfb0     BF B2 06 F5 | 	and	local07, #191
2dfb4     59 AF 02 F6 | 	mov	local05, local07
2dfb8     0C A6 86 F1 | 	sub	local01, #12
2dfbc     53 BB 02 FB | 	rdlong	local11, local01
2dfc0     1C A6 06 F1 | 	add	local01, #28
2dfc4     53 BB 62 FC | 	wrlong	local11, local01
2dfc8     2C A6 86 F1 | 	sub	local01, #44
2dfcc                 | LR__4883
2dfcc     59 B5 E2 F8 | 	getbyte	local08, local07, #0
2dfd0     57 B9 E2 F8 | 	getbyte	local10, local05, #0
2dfd4     5C B5 0A F2 | 	cmp	local08, local10 wz
2dfd8     5C 00 90 5D |  if_ne	jmp	#LR__4884
2dfdc     58 B9 E2 F8 | 	getbyte	local10, local06, #0
2dfe0     1C A6 06 F1 | 	add	local01, #28
2dfe4     53 B7 02 FB | 	rdlong	local09, local01
2dfe8     1C A6 86 F1 | 	sub	local01, #28
2dfec     0D B6 06 F1 | 	add	local09, #13
2dff0     5B B5 C2 FA | 	rdbyte	local08, local09
2dff4     5A B7 E2 F8 | 	getbyte	local09, local08, #0
2dff8     5B B9 0A F2 | 	cmp	local10, local09 wz
2dffc     38 00 90 5D |  if_ne	jmp	#LR__4884
2e000     0C AC 06 F1 | 	add	local04, #12
2e004     56 93 02 FB | 	rdlong	arg01, local04
2e008     0C AC 86 F1 | 	sub	local04, #12
2e00c     1C A6 06 F1 | 	add	local01, #28
2e010     53 BD 02 FB | 	rdlong	local12, local01
2e014     1C A6 86 F1 | 	sub	local01, #28
2e018     5E 95 02 F6 | 	mov	arg02, local12
2e01c     30 FB BF FD | 	call	#_fatfs_cc_pick_lfn
2e020     00 7A 4E F2 | 	cmps	result1, #0 wz
2e024     57 BD 02 56 |  if_ne	mov	local12, local05
2e028     5E BD E2 58 |  if_ne	getbyte	local12, local12, #0
2e02c     01 BC 86 51 |  if_ne	sub	local12, #1
2e030     5E BB 02 56 |  if_ne	mov	local11, local12
2e034     04 00 90 5D |  if_ne	jmp	#LR__4885
2e038                 | LR__4884
2e038     FF BA 06 F6 | 	mov	local11, #255
2e03c                 | LR__4885
2e03c     5D AF 02 F6 | 	mov	local05, local11
2e040     40 00 90 FD | 	jmp	#LR__4888
2e044                 | LR__4886
2e044     57 BB 02 F6 | 	mov	local11, local05
2e048     07 BA 4E F7 | 	zerox	local11, #7 wz
2e04c     20 00 90 5D |  if_ne	jmp	#LR__4887
2e050     58 B1 E2 F8 | 	getbyte	local06, local06, #0
2e054     1C A6 06 F1 | 	add	local01, #28
2e058     53 93 02 FB | 	rdlong	arg01, local01
2e05c     1C A6 86 F1 | 	sub	local01, #28
2e060     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
2e064     3D 7B E2 F8 | 	getbyte	result1, result1, #0
2e068     3D B1 0A F2 | 	cmp	local06, result1 wz
2e06c     28 00 90 AD |  if_e	jmp	#LR__4890
2e070                 | LR__4887
2e070     2C A6 06 F1 | 	add	local01, #44
2e074     FF FF FF FF 
2e078     53 FF 6B FC | 	wrlong	##-1, local01
2e07c     2C A6 86 F1 | 	sub	local01, #44
2e080                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
2e080                 | ' 					}
2e080                 | ' 					break;
2e080     14 00 90 FD | 	jmp	#LR__4890
2e084                 | LR__4888
2e084                 | LR__4889
2e084     53 93 02 F6 | 	mov	arg01, local01
2e088     00 94 06 F6 | 	mov	arg02, #0
2e08c     F4 F6 BF FD | 	call	#_fatfs_cc_dir_next
2e090     3D AB 0A F6 | 	mov	local03, result1 wz
2e094     44 FE 9F AD |  if_e	jmp	#LR__4880
2e098                 | LR__4890
2e098     00 AA 0E F2 | 	cmp	local03, #0 wz
2e09c     18 A6 06 51 |  if_ne	add	local01, #24
2e0a0     53 01 68 5C |  if_ne	wrlong	#0, local01
2e0a4                 | ' 	return res;
2e0a4     55 7B 02 F6 | 	mov	result1, local03
2e0a8     E7 F0 03 F6 | 	mov	ptra, fp
2e0ac     F2 00 A0 FD | 	call	#popregs_
2e0b0                 | _fatfs_cc_dir_read_ret
2e0b0     2D 00 64 FD | 	ret
2e0b4                 | 
2e0b4                 | _fatfs_cc_dir_find
2e0b4     0B CA 05 F6 | 	mov	COUNT_, #11
2e0b8     E8 00 A0 FD | 	call	#pushregs_
2e0bc     49 A7 02 F6 | 	mov	local01, arg01
2e0c0     53 A9 02 FB | 	rdlong	local02, local01
2e0c4     53 93 02 F6 | 	mov	arg01, local01
2e0c8     00 94 06 F6 | 	mov	arg02, #0
2e0cc     4C F5 BF FD | 	call	#_fatfs_cc_dir_sdi
2e0d0     00 7A 0E F2 | 	cmp	result1, #0 wz
2e0d4     18 02 90 5D |  if_ne	jmp	#LR__4912
2e0d8     FF AA 06 F6 | 	mov	local03, #255
2e0dc     FF AC 06 F6 | 	mov	local04, #255
2e0e0     2C A6 06 F1 | 	add	local01, #44
2e0e4     FF FF FF FF 
2e0e8     53 FF 6B FC | 	wrlong	##-1, local01
2e0ec     2C A6 86 F1 | 	sub	local01, #44
2e0f0                 | ' #line 2404 "ff.c"
2e0f0                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
2e0f0                 | ' 
2e0f0                 | ' 	do {
2e0f0                 | LR__4900
2e0f0     18 A6 06 F1 | 	add	local01, #24
2e0f4     53 95 02 FB | 	rdlong	arg02, local01
2e0f8     18 A6 86 F1 | 	sub	local01, #24
2e0fc     54 93 02 F6 | 	mov	arg01, local02
2e100     B4 EB BF FD | 	call	#_fatfs_cc_move_window
2e104     3D AF 0A F6 | 	mov	local05, result1 wz
2e108     E0 01 90 5D |  if_ne	jmp	#LR__4911
2e10c     1C A6 06 F1 | 	add	local01, #28
2e110     53 97 02 FB | 	rdlong	arg03, local01
2e114     1C A6 86 F1 | 	sub	local01, #28
2e118     4B B1 C2 FA | 	rdbyte	local06, arg03
2e11c     58 97 02 F6 | 	mov	arg03, local06
2e120     07 96 4E F7 | 	zerox	arg03, #7 wz
2e124     04 AE 06 A6 |  if_e	mov	local05, #4
2e128     C0 01 90 AD |  if_e	jmp	#LR__4911
2e12c     1C A6 06 F1 | 	add	local01, #28
2e130     53 B3 02 FB | 	rdlong	local07, local01
2e134     59 97 02 F6 | 	mov	arg03, local07
2e138     0B 96 06 F1 | 	add	arg03, #11
2e13c     4B B5 C2 FA | 	rdbyte	local08, arg03
2e140     3F B4 06 F5 | 	and	local08, #63
2e144     16 A6 86 F1 | 	sub	local01, #22
2e148     53 B5 42 FC | 	wrbyte	local08, local01
2e14c     06 A6 86 F1 | 	sub	local01, #6
2e150     58 97 E2 F8 | 	getbyte	arg03, local06, #0
2e154     E5 96 0E F2 | 	cmp	arg03, #229 wz
2e158     18 00 90 AD |  if_e	jmp	#LR__4901
2e15c     5A 97 E2 F8 | 	getbyte	arg03, local08, #0
2e160     08 96 CE F7 | 	test	arg03, #8 wz
2e164     5A B3 02 56 |  if_ne	mov	local07, local08
2e168     59 B3 E2 58 |  if_ne	getbyte	local07, local07, #0
2e16c     0F B2 0E 52 |  if_ne	cmp	local07, #15 wz
2e170     18 00 90 AD |  if_e	jmp	#LR__4902
2e174                 | LR__4901
2e174     FF AC 06 F6 | 	mov	local04, #255
2e178     2C A6 06 F1 | 	add	local01, #44
2e17c     FF FF FF FF 
2e180     53 FF 6B FC | 	wrlong	##-1, local01
2e184     2C A6 86 F1 | 	sub	local01, #44
2e188     4C 01 90 FD | 	jmp	#LR__4910
2e18c                 | LR__4902
2e18c     5A B5 E2 F8 | 	getbyte	local08, local08, #0
2e190     0F B4 0E F2 | 	cmp	local08, #15 wz
2e194     C8 00 90 5D |  if_ne	jmp	#LR__4906
2e198     2B A6 06 F1 | 	add	local01, #43
2e19c     53 B5 C2 FA | 	rdbyte	local08, local01
2e1a0     2B A6 86 F1 | 	sub	local01, #43
2e1a4     40 B4 CE F7 | 	test	local08, #64 wz
2e1a8     2C 01 90 5D |  if_ne	jmp	#LR__4909
2e1ac     58 B7 E2 F8 | 	getbyte	local09, local06, #0
2e1b0     40 B6 CE F7 | 	test	local09, #64 wz
2e1b4     30 00 90 AD |  if_e	jmp	#LR__4903
2e1b8     1C A6 06 F1 | 	add	local01, #28
2e1bc     53 B7 02 FB | 	rdlong	local09, local01
2e1c0     0D B6 06 F1 | 	add	local09, #13
2e1c4     5B AB C2 FA | 	rdbyte	local03, local09
2e1c8     58 B1 E2 F8 | 	getbyte	local06, local06, #0
2e1cc     BF B0 06 F5 | 	and	local06, #191
2e1d0     58 AD 02 F6 | 	mov	local04, local06
2e1d4     0C A6 86 F1 | 	sub	local01, #12
2e1d8     53 B7 02 FB | 	rdlong	local09, local01
2e1dc     1C A6 06 F1 | 	add	local01, #28
2e1e0     53 B7 62 FC | 	wrlong	local09, local01
2e1e4     2C A6 86 F1 | 	sub	local01, #44
2e1e8                 | LR__4903
2e1e8     58 B9 E2 F8 | 	getbyte	local10, local06, #0
2e1ec     56 B3 E2 F8 | 	getbyte	local07, local04, #0
2e1f0     59 B9 0A F2 | 	cmp	local10, local07 wz
2e1f4     5C 00 90 5D |  if_ne	jmp	#LR__4904
2e1f8     55 B5 E2 F8 | 	getbyte	local08, local03, #0
2e1fc     1C A6 06 F1 | 	add	local01, #28
2e200     53 B3 02 FB | 	rdlong	local07, local01
2e204     1C A6 86 F1 | 	sub	local01, #28
2e208     0D B2 06 F1 | 	add	local07, #13
2e20c     59 B1 C2 FA | 	rdbyte	local06, local07
2e210     58 B3 E2 F8 | 	getbyte	local07, local06, #0
2e214     59 B5 0A F2 | 	cmp	local08, local07 wz
2e218     38 00 90 5D |  if_ne	jmp	#LR__4904
2e21c     0C A8 06 F1 | 	add	local02, #12
2e220     54 93 02 FB | 	rdlong	arg01, local02
2e224     0C A8 86 F1 | 	sub	local02, #12
2e228     1C A6 06 F1 | 	add	local01, #28
2e22c     53 BB 02 FB | 	rdlong	local11, local01
2e230     1C A6 86 F1 | 	sub	local01, #28
2e234     5D 95 02 F6 | 	mov	arg02, local11
2e238     10 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
2e23c     00 7A 4E F2 | 	cmps	result1, #0 wz
2e240     56 BB 02 56 |  if_ne	mov	local11, local04
2e244     5D BB E2 58 |  if_ne	getbyte	local11, local11, #0
2e248     01 BA 86 51 |  if_ne	sub	local11, #1
2e24c     5D B7 02 56 |  if_ne	mov	local09, local11
2e250     04 00 90 5D |  if_ne	jmp	#LR__4905
2e254                 | LR__4904
2e254     FF B6 06 F6 | 	mov	local09, #255
2e258                 | LR__4905
2e258     5B AD 02 F6 | 	mov	local04, local09
2e25c     78 00 90 FD | 	jmp	#LR__4909
2e260                 | LR__4906
2e260     56 B7 02 F6 | 	mov	local09, local04
2e264     07 B6 4E F7 | 	zerox	local09, #7 wz
2e268     20 00 90 5D |  if_ne	jmp	#LR__4907
2e26c     55 B9 E2 F8 | 	getbyte	local10, local03, #0
2e270     1C A6 06 F1 | 	add	local01, #28
2e274     53 93 02 FB | 	rdlong	arg01, local01
2e278     1C A6 86 F1 | 	sub	local01, #28
2e27c     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
2e280     3D 7B E2 F8 | 	getbyte	result1, result1, #0
2e284     3D B9 0A F2 | 	cmp	local10, result1 wz
2e288     60 00 90 AD |  if_e	jmp	#LR__4911
2e28c                 | LR__4907
2e28c     2B A6 06 F1 | 	add	local01, #43
2e290     53 B7 C2 FA | 	rdbyte	local09, local01
2e294     2B A6 86 F1 | 	sub	local01, #43
2e298     01 B6 CE F7 | 	test	local09, #1 wz
2e29c     24 00 90 5D |  if_ne	jmp	#LR__4908
2e2a0     1C A6 06 F1 | 	add	local01, #28
2e2a4     53 93 02 FB | 	rdlong	arg01, local01
2e2a8     04 A6 06 F1 | 	add	local01, #4
2e2ac     53 95 02 F6 | 	mov	arg02, local01
2e2b0     20 A6 86 F1 | 	sub	local01, #32
2e2b4     0B 96 06 F6 | 	mov	arg03, #11
2e2b8     B0 DE BF FD | 	call	#_fatfs_cc_memcmp
2e2bc     00 7A 0E F2 | 	cmp	result1, #0 wz
2e2c0     28 00 90 AD |  if_e	jmp	#LR__4911
2e2c4                 | LR__4908
2e2c4     FF AC 06 F6 | 	mov	local04, #255
2e2c8     2C A6 06 F1 | 	add	local01, #44
2e2cc     FF FF FF FF 
2e2d0     53 FF 6B FC | 	wrlong	##-1, local01
2e2d4     2C A6 86 F1 | 	sub	local01, #44
2e2d8                 | LR__4909
2e2d8                 | LR__4910
2e2d8     53 93 02 F6 | 	mov	arg01, local01
2e2dc     00 94 06 F6 | 	mov	arg02, #0
2e2e0     A0 F4 BF FD | 	call	#_fatfs_cc_dir_next
2e2e4     3D AF 0A F6 | 	mov	local05, result1 wz
2e2e8     04 FE 9F AD |  if_e	jmp	#LR__4900
2e2ec                 | LR__4911
2e2ec                 | ' 
2e2ec                 | ' 	return res;
2e2ec     57 7B 02 F6 | 	mov	result1, local05
2e2f0                 | LR__4912
2e2f0     E7 F0 03 F6 | 	mov	ptra, fp
2e2f4     F2 00 A0 FD | 	call	#popregs_
2e2f8                 | _fatfs_cc_dir_find_ret
2e2f8     2D 00 64 FD | 	ret
2e2fc                 | 
2e2fc                 | _fatfs_cc_dir_register
2e2fc     09 CA 05 F6 | 	mov	COUNT_, #9
2e300     E8 00 A0 FD | 	call	#pushregs_
2e304     2C F0 07 F1 | 	add	ptra, #44
2e308     49 A7 02 F6 | 	mov	local01, arg01
2e30c     53 A9 02 FB | 	rdlong	local02, local01
2e310     2B A6 06 F1 | 	add	local01, #43
2e314     53 AB C2 FA | 	rdbyte	local03, local01
2e318     2B A6 86 F1 | 	sub	local01, #43
2e31c     A0 AA CE F7 | 	test	local03, #160 wz
2e320     06 7A 06 56 |  if_ne	mov	result1, #6
2e324     2C 02 90 5D |  if_ne	jmp	#LR__4931
2e328                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
2e328     00 AC 06 F6 | 	mov	local04, #0
2e32c     0C A8 06 F1 | 	add	local02, #12
2e330     D7 12 48 FB | 	callpa	#(@LR__4921-@LR__4920)>>2,fcache_load_ptr_
2e334                 | LR__4920
2e334     54 AB 02 FB | 	rdlong	local03, local02
2e338     56 99 02 F6 | 	mov	arg04, local04
2e33c     01 98 66 F0 | 	shl	arg04, #1
2e340     55 99 02 F1 | 	add	arg04, local03
2e344     4C AB EA FA | 	rdword	local03, arg04 wz
2e348     56 AF 02 56 |  if_ne	mov	local05, local04
2e34c     01 AE 06 51 |  if_ne	add	local05, #1
2e350     57 AD 02 56 |  if_ne	mov	local04, local05
2e354     DC FF 9F 5D |  if_ne	jmp	#LR__4920
2e358                 | LR__4921
2e358     0C A8 86 F1 | 	sub	local02, #12
2e35c     E7 92 02 F6 | 	mov	arg01, fp
2e360     1C 92 06 F1 | 	add	arg01, #28
2e364     53 95 02 F6 | 	mov	arg02, local01
2e368     20 94 06 F1 | 	add	arg02, #32
2e36c     0C 96 06 F6 | 	mov	arg03, #12
2e370     44 68 BF FD | 	call	#__system____builtin_memmove
2e374     27 CE 05 F1 | 	add	fp, #39
2e378     E7 AA C2 FA | 	rdbyte	local03, fp
2e37c     27 CE 85 F1 | 	sub	fp, #39
2e380     01 AA CE F7 | 	test	local03, #1 wz
2e384     80 00 90 AD |  if_e	jmp	#LR__4924
2e388     2B A6 06 F1 | 	add	local01, #43
2e38c     53 81 48 FC | 	wrbyte	#64, local01
2e390     2B A6 86 F1 | 	sub	local01, #43
2e394                 | ' 		dp->fn[ 11 ] =  0x40 ;
2e394                 | ' 		for (n = 1; n < 100; n++) {
2e394     01 B0 06 F6 | 	mov	local06, #1
2e398                 | LR__4922
2e398     64 B0 16 F2 | 	cmp	local06, #100 wc
2e39c     38 00 90 3D |  if_ae	jmp	#LR__4923
2e3a0     53 93 02 F6 | 	mov	arg01, local01
2e3a4     20 92 06 F1 | 	add	arg01, #32
2e3a8     E7 94 02 F6 | 	mov	arg02, fp
2e3ac     1C 94 06 F1 | 	add	arg02, #28
2e3b0     0C A8 06 F1 | 	add	local02, #12
2e3b4     54 97 02 FB | 	rdlong	arg03, local02
2e3b8     0C A8 86 F1 | 	sub	local02, #12
2e3bc     58 99 02 F6 | 	mov	arg04, local06
2e3c0     44 F9 BF FD | 	call	#_fatfs_cc_gen_numname
2e3c4     53 93 02 F6 | 	mov	arg01, local01
2e3c8     E8 FC BF FD | 	call	#_fatfs_cc_dir_find
2e3cc     3D B3 0A F6 | 	mov	local07, result1 wz
2e3d0     01 B0 06 A1 |  if_e	add	local06, #1
2e3d4     C0 FF 9F AD |  if_e	jmp	#LR__4922
2e3d8                 | LR__4923
2e3d8     64 B0 0E F2 | 	cmp	local06, #100 wz
2e3dc     07 7A 06 A6 |  if_e	mov	result1, #7
2e3e0     70 01 90 AD |  if_e	jmp	#LR__4931
2e3e4     04 B2 0E F2 | 	cmp	local07, #4 wz
2e3e8     59 7B 02 56 |  if_ne	mov	result1, local07
2e3ec     64 01 90 5D |  if_ne	jmp	#LR__4931
2e3f0     27 CE 05 F1 | 	add	fp, #39
2e3f4     E7 AA C2 FA | 	rdbyte	local03, fp
2e3f8     27 CE 85 F1 | 	sub	fp, #39
2e3fc     2B A6 06 F1 | 	add	local01, #43
2e400     53 AB 42 FC | 	wrbyte	local03, local01
2e404     2B A6 86 F1 | 	sub	local01, #43
2e408                 | LR__4924
2e408     27 CE 05 F1 | 	add	fp, #39
2e40c     E7 B2 C2 FA | 	rdbyte	local07, fp
2e410     02 B2 CE F7 | 	test	local07, #2 wz
2e414     0C AC 06 51 |  if_ne	add	local04, #12
2e418     0D AC 16 5D |  if_ne	qdiv	local04, #13
2e41c     27 CE 85 F1 | 	sub	fp, #39
2e420     53 93 02 F6 | 	mov	arg01, local01
2e424     18 AA 62 5D |  if_ne	getqx	local03
2e428     01 AA 06 51 |  if_ne	add	local03, #1
2e42c     01 AA 06 A6 |  if_e	mov	local03, #1
2e430     55 B5 02 F6 | 	mov	local08, local03
2e434     5A 95 02 F6 | 	mov	arg02, local08
2e438     04 F5 BF FD | 	call	#_fatfs_cc_dir_alloc
2e43c     3D B3 0A F6 | 	mov	local07, result1 wz
2e440     9C 00 90 5D |  if_ne	jmp	#LR__4928
2e444     01 B4 8E F1 | 	sub	local08, #1 wz
2e448     94 00 90 AD |  if_e	jmp	#LR__4928
2e44c     53 93 02 F6 | 	mov	arg01, local01
2e450     5A B3 02 F6 | 	mov	local07, local08
2e454     05 B2 66 F0 | 	shl	local07, #5
2e458     10 A6 06 F1 | 	add	local01, #16
2e45c     53 95 02 FB | 	rdlong	arg02, local01
2e460     10 A6 86 F1 | 	sub	local01, #16
2e464     59 95 82 F1 | 	sub	arg02, local07
2e468     B0 F1 BF FD | 	call	#_fatfs_cc_dir_sdi
2e46c     3D B3 0A F6 | 	mov	local07, result1 wz
2e470     6C 00 90 5D |  if_ne	jmp	#LR__4927
2e474     53 93 02 F6 | 	mov	arg01, local01
2e478     20 92 06 F1 | 	add	arg01, #32
2e47c     08 FA BF FD | 	call	#_fatfs_cc_sum_sfn
2e480     3D B7 02 F6 | 	mov	local09, result1
2e484                 | ' 			sum = sum_sfn(dp->fn);
2e484                 | ' 			do {
2e484                 | LR__4925
2e484     18 A6 06 F1 | 	add	local01, #24
2e488     53 95 02 FB | 	rdlong	arg02, local01
2e48c     18 A6 86 F1 | 	sub	local01, #24
2e490     54 93 02 F6 | 	mov	arg01, local02
2e494     20 E8 BF FD | 	call	#_fatfs_cc_move_window
2e498     3D B3 0A F6 | 	mov	local07, result1 wz
2e49c     40 00 90 5D |  if_ne	jmp	#LR__4926
2e4a0     0C A8 06 F1 | 	add	local02, #12
2e4a4     54 93 02 FB | 	rdlong	arg01, local02
2e4a8     1C A6 06 F1 | 	add	local01, #28
2e4ac     53 95 02 FB | 	rdlong	arg02, local01
2e4b0     1C A6 86 F1 | 	sub	local01, #28
2e4b4     5B 99 02 F6 | 	mov	arg04, local09
2e4b8     5A 97 02 F6 | 	mov	arg03, local08
2e4bc     78 F7 BF FD | 	call	#_fatfs_cc_put_lfn
2e4c0     09 A8 86 F1 | 	sub	local02, #9
2e4c4     54 03 48 FC | 	wrbyte	#1, local02
2e4c8     03 A8 86 F1 | 	sub	local02, #3
2e4cc     53 93 02 F6 | 	mov	arg01, local01
2e4d0     00 94 06 F6 | 	mov	arg02, #0
2e4d4     AC F2 BF FD | 	call	#_fatfs_cc_dir_next
2e4d8     3D B3 0A F6 | 	mov	local07, result1 wz
2e4dc     E9 B5 6E AB |  if_e	djnz	local08, #LR__4925
2e4e0                 | LR__4926
2e4e0                 | LR__4927
2e4e0                 | LR__4928
2e4e0     00 B2 0E F2 | 	cmp	local07, #0 wz
2e4e4     68 00 90 5D |  if_ne	jmp	#LR__4930
2e4e8     18 A6 06 F1 | 	add	local01, #24
2e4ec     53 95 02 FB | 	rdlong	arg02, local01
2e4f0     18 A6 86 F1 | 	sub	local01, #24
2e4f4     54 93 02 F6 | 	mov	arg01, local02
2e4f8     BC E7 BF FD | 	call	#_fatfs_cc_move_window
2e4fc     3D B3 0A F6 | 	mov	local07, result1 wz
2e500     4C 00 90 5D |  if_ne	jmp	#LR__4929
2e504     1C A6 06 F1 | 	add	local01, #28
2e508     53 93 02 FB | 	rdlong	arg01, local01
2e50c     00 94 06 F6 | 	mov	arg02, #0
2e510     20 96 06 F6 | 	mov	arg03, #32
2e514     D8 00 A0 FD | 	call	#\builtin_bytefill_
2e518     53 93 02 FB | 	rdlong	arg01, local01
2e51c     04 A6 06 F1 | 	add	local01, #4
2e520     53 95 02 F6 | 	mov	arg02, local01
2e524     0B 96 06 F6 | 	mov	arg03, #11
2e528     8C 66 BF FD | 	call	#__system____builtin_memmove
2e52c     04 A6 86 F1 | 	sub	local01, #4
2e530     53 AB 02 FB | 	rdlong	local03, local01
2e534     0F A6 06 F1 | 	add	local01, #15
2e538     53 B7 C2 FA | 	rdbyte	local09, local01
2e53c     18 B6 06 F5 | 	and	local09, #24
2e540     0C AA 06 F1 | 	add	local03, #12
2e544     55 B7 42 FC | 	wrbyte	local09, local03
2e548     03 A8 06 F1 | 	add	local02, #3
2e54c     54 03 48 FC | 	wrbyte	#1, local02
2e550                 | LR__4929
2e550                 | LR__4930
2e550                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
2e550                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
2e550                 | ' 
2e550                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
2e550                 | ' 
2e550                 | ' 			fs->wflag = 1;
2e550                 | ' 		}
2e550                 | ' 	}
2e550                 | ' 
2e550                 | ' 	return res;
2e550     59 7B 02 F6 | 	mov	result1, local07
2e554                 | LR__4931
2e554     E7 F0 03 F6 | 	mov	ptra, fp
2e558     F2 00 A0 FD | 	call	#popregs_
2e55c                 | _fatfs_cc_dir_register_ret
2e55c     2D 00 64 FD | 	ret
2e560                 | 
2e560                 | _fatfs_cc_dir_remove
2e560     05 CA 05 F6 | 	mov	COUNT_, #5
2e564     E8 00 A0 FD | 	call	#pushregs_
2e568     49 A7 02 F6 | 	mov	local01, arg01
2e56c     53 A9 02 FB | 	rdlong	local02, local01
2e570     10 A6 06 F1 | 	add	local01, #16
2e574     53 AB 02 FB | 	rdlong	local03, local01
2e578     1C A6 06 F1 | 	add	local01, #28
2e57c     53 95 02 FB | 	rdlong	arg02, local01
2e580     2C A6 86 F1 | 	sub	local01, #44
2e584     FF FF 7F FF 
2e588     FF 95 0E F2 | 	cmp	arg02, ##-1 wz
2e58c     00 AC 06 A6 |  if_e	mov	local04, #0
2e590     18 00 90 AD |  if_e	jmp	#LR__4940
2e594     53 93 02 F6 | 	mov	arg01, local01
2e598     2C A6 06 F1 | 	add	local01, #44
2e59c     53 95 02 FB | 	rdlong	arg02, local01
2e5a0     2C A6 86 F1 | 	sub	local01, #44
2e5a4     74 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
2e5a8     3D AD 02 F6 | 	mov	local04, result1
2e5ac                 | LR__4940
2e5ac     56 AF 0A F6 | 	mov	local05, local04 wz
2e5b0     64 00 90 5D |  if_ne	jmp	#LR__4943
2e5b4                 | ' 		do {
2e5b4                 | LR__4941
2e5b4     18 A6 06 F1 | 	add	local01, #24
2e5b8     53 95 02 FB | 	rdlong	arg02, local01
2e5bc     18 A6 86 F1 | 	sub	local01, #24
2e5c0     54 93 02 F6 | 	mov	arg01, local02
2e5c4     F0 E6 BF FD | 	call	#_fatfs_cc_move_window
2e5c8     3D AF 0A F6 | 	mov	local05, result1 wz
2e5cc     40 00 90 5D |  if_ne	jmp	#LR__4942
2e5d0     1C A6 06 F1 | 	add	local01, #28
2e5d4     53 AD 02 FB | 	rdlong	local04, local01
2e5d8     56 CB 49 FC | 	wrbyte	#229, local04
2e5dc     03 A8 06 F1 | 	add	local02, #3
2e5e0     54 03 48 FC | 	wrbyte	#1, local02
2e5e4     03 A8 86 F1 | 	sub	local02, #3
2e5e8     0C A6 86 F1 | 	sub	local01, #12
2e5ec     53 AD 02 FB | 	rdlong	local04, local01
2e5f0     10 A6 86 F1 | 	sub	local01, #16
2e5f4     55 AD 12 F2 | 	cmp	local04, local03 wc
2e5f8     14 00 90 3D |  if_ae	jmp	#LR__4942
2e5fc     53 93 02 F6 | 	mov	arg01, local01
2e600     00 94 06 F6 | 	mov	arg02, #0
2e604     7C F1 BF FD | 	call	#_fatfs_cc_dir_next
2e608     3D AF 0A F6 | 	mov	local05, result1 wz
2e60c     A4 FF 9F AD |  if_e	jmp	#LR__4941
2e610                 | LR__4942
2e610     04 AE 0E F2 | 	cmp	local05, #4 wz
2e614     02 AE 06 A6 |  if_e	mov	local05, #2
2e618                 | LR__4943
2e618                 | ' 	}
2e618                 | ' #line 2590 "ff.c"
2e618                 | ' 	return res;
2e618     57 7B 02 F6 | 	mov	result1, local05
2e61c     E7 F0 03 F6 | 	mov	ptra, fp
2e620     F2 00 A0 FD | 	call	#popregs_
2e624                 | _fatfs_cc_dir_remove_ret
2e624     2D 00 64 FD | 	ret
2e628                 | 
2e628                 | _fatfs_cc_get_fileinfo
2e628     0C CA 05 F6 | 	mov	COUNT_, #12
2e62c     E8 00 A0 FD | 	call	#pushregs_
2e630     49 A7 02 F6 | 	mov	local01, arg01
2e634     4A A9 02 F6 | 	mov	local02, arg02
2e638     53 AB 02 FB | 	rdlong	local03, local01
2e63c     1C A8 06 F1 | 	add	local02, #28
2e640     54 01 48 FC | 	wrbyte	#0, local02
2e644     1C A8 86 F1 | 	sub	local02, #28
2e648     18 A6 06 F1 | 	add	local01, #24
2e64c     53 AD 0A FB | 	rdlong	local04, local01 wz
2e650     18 A6 86 F1 | 	sub	local01, #24
2e654     90 03 90 AD |  if_e	jmp	#LR__4964
2e658     2C A6 06 F1 | 	add	local01, #44
2e65c     53 AD 02 FB | 	rdlong	local04, local01
2e660     2C A6 86 F1 | 	sub	local01, #44
2e664     FF FF 7F FF 
2e668     FF AD 0E F2 | 	cmp	local04, ##-1 wz
2e66c     D8 00 90 AD |  if_e	jmp	#LR__4953
2e670     00 AE 06 F6 | 	mov	local05, #0
2e674     00 B0 06 F6 | 	mov	local06, #0
2e678     00 B2 06 F6 | 	mov	local07, #0
2e67c                 | ' 			si = di = 0;
2e67c                 | ' 			hs = 0;
2e67c                 | ' 			while (fs->lfnbuf[si] != 0) {
2e67c                 | LR__4950
2e67c     0C AA 06 F1 | 	add	local03, #12
2e680     55 AD 02 FB | 	rdlong	local04, local03
2e684     0C AA 86 F1 | 	sub	local03, #12
2e688     58 B5 02 F6 | 	mov	local08, local06
2e68c     01 B4 66 F0 | 	shl	local08, #1
2e690     56 B5 02 F1 | 	add	local08, local04
2e694     5A AD EA FA | 	rdword	local04, local08 wz
2e698     90 00 90 AD |  if_e	jmp	#LR__4952
2e69c     0C AA 06 F1 | 	add	local03, #12
2e6a0     55 B7 02 FB | 	rdlong	local09, local03
2e6a4     0C AA 86 F1 | 	sub	local03, #12
2e6a8     58 AD 02 F6 | 	mov	local04, local06
2e6ac     01 AC 66 F0 | 	shl	local04, #1
2e6b0     5B AD 02 F1 | 	add	local04, local09
2e6b4     56 B9 E2 FA | 	rdword	local10, local04
2e6b8     59 AD 02 F6 | 	mov	local04, local07
2e6bc     0F AC 4E F7 | 	zerox	local04, #15 wz
2e6c0     01 B0 06 F1 | 	add	local06, #1
2e6c4     24 00 90 5D |  if_ne	jmp	#LR__4951
2e6c8     5C AD 32 F9 | 	getword	local04, local10, #0
2e6cc     6C 00 00 FF 
2e6d0     00 AC 16 F2 | 	cmp	local04, ##55296 wc
2e6d4     14 00 90 CD |  if_b	jmp	#LR__4951
2e6d8     5C BB 32 F9 | 	getword	local11, local10, #0
2e6dc     70 00 00 FF 
2e6e0     00 BA 16 F2 | 	cmp	local11, ##57344 wc
2e6e4     5C B3 02 C6 |  if_b	mov	local07, local10
2e6e8                 | ' 					hs = wc; continue;
2e6e8     90 FF 9F CD |  if_b	jmp	#LR__4950
2e6ec                 | LR__4951
2e6ec     59 93 32 F9 | 	getword	arg01, local07, #0
2e6f0     10 92 66 F0 | 	shl	arg01, #16
2e6f4     5C B9 32 F9 | 	getword	local10, local10, #0
2e6f8     5C 93 42 F5 | 	or	arg01, local10
2e6fc     57 95 02 F6 | 	mov	arg02, local05
2e700     54 B9 02 F6 | 	mov	local10, local02
2e704     1C B8 06 F1 | 	add	local10, #28
2e708     5C 95 02 F1 | 	add	arg02, local10
2e70c     FF 96 06 F6 | 	mov	arg03, #255
2e710     57 97 82 F1 | 	sub	arg03, local05
2e714     28 E3 BF FD | 	call	#_fatfs_cc_put_utf
2e718     3D B9 0A F6 | 	mov	local10, result1 wz
2e71c     00 AE 06 A6 |  if_e	mov	local05, #0
2e720     5C AF 02 51 |  if_ne	add	local05, local10
2e724     00 B2 06 56 |  if_ne	mov	local07, #0
2e728     50 FF 9F 5D |  if_ne	jmp	#LR__4950
2e72c                 | LR__4952
2e72c     59 AD 02 F6 | 	mov	local04, local07
2e730     0F AC 4E F7 | 	zerox	local04, #15 wz
2e734     00 AE 06 56 |  if_ne	mov	local05, #0
2e738     54 B9 02 F6 | 	mov	local10, local02
2e73c     1C B8 06 F1 | 	add	local10, #28
2e740     5C AF 02 F1 | 	add	local05, local10
2e744     57 01 48 FC | 	wrbyte	#0, local05
2e748                 | LR__4953
2e748     00 AE 06 F6 | 	mov	local05, #0
2e74c     00 B0 06 F6 | 	mov	local06, #0
2e750                 | ' 			fno->fname[di] = 0;
2e750                 | ' 		}
2e750                 | ' 	}
2e750                 | ' 
2e750                 | ' 	si = di = 0;
2e750                 | ' 	while (si < 11) {
2e750                 | LR__4954
2e750     0B B0 16 F2 | 	cmp	local06, #11 wc
2e754     20 01 90 3D |  if_ae	jmp	#LR__4957
2e758     1C A6 06 F1 | 	add	local01, #28
2e75c     53 B7 02 FB | 	rdlong	local09, local01
2e760     1C A6 86 F1 | 	sub	local01, #28
2e764     58 B9 02 F6 | 	mov	local10, local06
2e768     5B B9 02 F1 | 	add	local10, local09
2e76c     5C B9 C2 FA | 	rdbyte	local10, local10
2e770     5C AD 32 F9 | 	getword	local04, local10, #0
2e774     20 AC 0E F2 | 	cmp	local04, #32 wz
2e778     01 B0 06 F1 | 	add	local06, #1
2e77c     D0 FF 9F AD |  if_e	jmp	#LR__4954
2e780     5C AD 32 F9 | 	getword	local04, local10, #0
2e784     05 AC 0E F2 | 	cmp	local04, #5 wz
2e788     E5 B8 06 A6 |  if_e	mov	local10, #229
2e78c     09 B0 0E F2 | 	cmp	local06, #9 wz
2e790     20 00 90 5D |  if_ne	jmp	#LR__4955
2e794     0C AE 16 F2 | 	cmp	local05, #12 wc
2e798     18 00 90 3D |  if_ae	jmp	#LR__4955
2e79c     57 BB 02 F6 | 	mov	local11, local05
2e7a0     54 B5 02 F6 | 	mov	local08, local02
2e7a4     0C B4 06 F1 | 	add	local08, #12
2e7a8     5A BB 02 F1 | 	add	local11, local08
2e7ac     5D 5D 48 FC | 	wrbyte	#46, local11
2e7b0     01 AE 06 F1 | 	add	local05, #1
2e7b4                 | LR__4955
2e7b4     5C 93 32 F9 | 	getword	arg01, local10, #0
2e7b8     07 92 4E F7 | 	zerox	arg01, #7 wz
2e7bc     00 7A 06 56 |  if_ne	mov	result1, #0
2e7c0                 | ' 
2e7c0                 | ' 	return 0;
2e7c0     00 7A 06 A6 |  if_e	mov	result1, #0
2e7c4     00 7A 0E F2 | 	cmp	result1, #0 wz
2e7c8     08 B0 0E 52 |  if_ne	cmp	local06, #8 wz
2e7cc     0B B0 0E 52 |  if_ne	cmp	local06, #11 wz
2e7d0     50 00 90 AD |  if_e	jmp	#LR__4956
2e7d4     1C A6 06 F1 | 	add	local01, #28
2e7d8     53 BB 02 FB | 	rdlong	local11, local01
2e7dc     1C A6 86 F1 | 	sub	local01, #28
2e7e0     58 B5 02 F6 | 	mov	local08, local06
2e7e4     5D B5 02 F1 | 	add	local08, local11
2e7e8     5A 93 CA FA | 	rdbyte	arg01, local08 wz
2e7ec     00 7A 06 56 |  if_ne	mov	result1, #0
2e7f0                 | ' 
2e7f0                 | ' 	return 0;
2e7f0     00 7A 06 A6 |  if_e	mov	result1, #0
2e7f4     00 7A 0E F2 | 	cmp	result1, #0 wz
2e7f8     28 00 90 AD |  if_e	jmp	#LR__4956
2e7fc     5C B9 32 F9 | 	getword	local10, local10, #0
2e800     08 B8 66 F0 | 	shl	local10, #8
2e804     1C A6 06 F1 | 	add	local01, #28
2e808     53 BB 02 FB | 	rdlong	local11, local01
2e80c     1C A6 86 F1 | 	sub	local01, #28
2e810     58 B7 02 F6 | 	mov	local09, local06
2e814     5D B7 02 F1 | 	add	local09, local11
2e818     5B BB C2 FA | 	rdbyte	local11, local09
2e81c     5D B9 42 F5 | 	or	local10, local11
2e820     01 B0 06 F1 | 	add	local06, #1
2e824                 | LR__4956
2e824     5C 93 02 F6 | 	mov	arg01, local10
2e828     01 00 00 FF 
2e82c     52 95 06 F6 | 	mov	arg02, ##850
2e830     24 D7 BF FD | 	call	#_fatfs_cc_ff_oem2uni
2e834     3D B9 02 F6 | 	mov	local10, result1
2e838     5C AD 02 F6 | 	mov	local04, local10
2e83c     0F AC 4E F7 | 	zerox	local04, #15 wz
2e840     00 AE 06 A6 |  if_e	mov	local05, #0
2e844     30 00 90 AD |  if_e	jmp	#LR__4957
2e848     5C 93 32 F9 | 	getword	arg01, local10, #0
2e84c     57 95 02 F6 | 	mov	arg02, local05
2e850     54 BB 02 F6 | 	mov	local11, local02
2e854     0C BA 06 F1 | 	add	local11, #12
2e858     5D 95 02 F1 | 	add	arg02, local11
2e85c     0C 96 06 F6 | 	mov	arg03, #12
2e860     57 97 82 F1 | 	sub	arg03, local05
2e864     D8 E1 BF FD | 	call	#_fatfs_cc_put_utf
2e868     3D BB 0A F6 | 	mov	local11, result1 wz
2e86c     00 AE 06 A6 |  if_e	mov	local05, #0
2e870     5D AF 02 51 |  if_ne	add	local05, local11
2e874     D8 FE 9F 5D |  if_ne	jmp	#LR__4954
2e878                 | LR__4957
2e878     57 AD 02 F6 | 	mov	local04, local05
2e87c     0C A8 06 F1 | 	add	local02, #12
2e880     54 AD 02 F1 | 	add	local04, local02
2e884     56 01 48 FC | 	wrbyte	#0, local04
2e888     10 A8 06 F1 | 	add	local02, #16
2e88c     54 AD CA FA | 	rdbyte	local04, local02 wz
2e890     1C A8 86 F1 | 	sub	local02, #28
2e894     F8 00 90 5D |  if_ne	jmp	#LR__4963
2e898     00 AE 0E F2 | 	cmp	local05, #0 wz
2e89c     1C 00 90 5D |  if_ne	jmp	#LR__4958
2e8a0     57 BB 02 F6 | 	mov	local11, local05
2e8a4     54 B9 02 F6 | 	mov	local10, local02
2e8a8     1C B8 06 F1 | 	add	local10, #28
2e8ac     5C BB 02 F1 | 	add	local11, local10
2e8b0     5D 7F 48 FC | 	wrbyte	#63, local11
2e8b4     01 AE 06 F1 | 	add	local05, #1
2e8b8     A4 00 90 FD | 	jmp	#LR__4962
2e8bc                 | LR__4958
2e8bc                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
2e8bc     00 AE 06 F6 | 	mov	local05, #0
2e8c0     00 B0 06 F6 | 	mov	local06, #0
2e8c4     08 BC 06 F6 | 	mov	local12, #8
2e8c8                 | LR__4959
2e8c8     58 AD 02 F6 | 	mov	local04, local06
2e8cc     54 BB 02 F6 | 	mov	local11, local02
2e8d0     0C BA 06 F1 | 	add	local11, #12
2e8d4     5D AD 02 F1 | 	add	local04, local11
2e8d8     56 BB CA FA | 	rdbyte	local11, local04 wz
2e8dc     80 00 90 AD |  if_e	jmp	#LR__4961
2e8e0     58 B5 02 F6 | 	mov	local08, local06
2e8e4     54 BB 02 F6 | 	mov	local11, local02
2e8e8     0C BA 06 F1 | 	add	local11, #12
2e8ec     5D B5 02 F1 | 	add	local08, local11
2e8f0     5A B9 C2 FA | 	rdbyte	local10, local08
2e8f4     5C BB 32 F9 | 	getword	local11, local10, #0
2e8f8     2E BA 0E F2 | 	cmp	local11, #46 wz
2e8fc     10 BC 06 A6 |  if_e	mov	local12, #16
2e900     5C BB 32 F9 | 	getword	local11, local10, #0
2e904     41 BA 16 F2 | 	cmp	local11, #65 wc
2e908     30 00 90 CD |  if_b	jmp	#LR__4960
2e90c     5C B5 32 F9 | 	getword	local08, local10, #0
2e910     5B B4 16 F2 | 	cmp	local08, #91 wc
2e914     24 00 90 3D |  if_ae	jmp	#LR__4960
2e918     1C A6 06 F1 | 	add	local01, #28
2e91c     53 B7 02 FB | 	rdlong	local09, local01
2e920     1C A6 86 F1 | 	sub	local01, #28
2e924     0C B6 06 F1 | 	add	local09, #12
2e928     5B B7 C2 FA | 	rdbyte	local09, local09
2e92c     5E BB E2 F8 | 	getbyte	local11, local12, #0
2e930     5D B7 CA F7 | 	test	local09, local11 wz
2e934     5C B9 32 59 |  if_ne	getword	local10, local10, #0
2e938     20 B8 06 51 |  if_ne	add	local10, #32
2e93c                 | LR__4960
2e93c     57 BB 02 F6 | 	mov	local11, local05
2e940     54 B5 02 F6 | 	mov	local08, local02
2e944     1C B4 06 F1 | 	add	local08, #28
2e948     5A BB 02 F1 | 	add	local11, local08
2e94c     5C B9 32 F9 | 	getword	local10, local10, #0
2e950     5D B9 42 FC | 	wrbyte	local10, local11
2e954     01 B0 06 F1 | 	add	local06, #1
2e958     01 AE 06 F1 | 	add	local05, #1
2e95c     68 FF 9F FD | 	jmp	#LR__4959
2e960                 | LR__4961
2e960                 | LR__4962
2e960     54 BD 02 F6 | 	mov	local12, local02
2e964     1C BC 06 F1 | 	add	local12, #28
2e968     5E AF 02 F1 | 	add	local05, local12
2e96c     57 01 48 FC | 	wrbyte	#0, local05
2e970     1C A6 06 F1 | 	add	local01, #28
2e974     53 AD 02 FB | 	rdlong	local04, local01
2e978     1C A6 86 F1 | 	sub	local01, #28
2e97c     0C AC 06 F1 | 	add	local04, #12
2e980     56 BB CA FA | 	rdbyte	local11, local04 wz
2e984     0C A8 06 A1 |  if_e	add	local02, #12
2e988     54 01 48 AC |  if_e	wrbyte	#0, local02
2e98c     0C A8 86 A1 |  if_e	sub	local02, #12
2e990                 | LR__4963
2e990     1C A6 06 F1 | 	add	local01, #28
2e994     53 BD 02 FB | 	rdlong	local12, local01
2e998     0B BC 06 F1 | 	add	local12, #11
2e99c     5E AD C2 FA | 	rdbyte	local04, local12
2e9a0     3F AC 06 F5 | 	and	local04, #63
2e9a4     08 A8 06 F1 | 	add	local02, #8
2e9a8     54 AD 42 FC | 	wrbyte	local04, local02
2e9ac     08 A8 86 F1 | 	sub	local02, #8
2e9b0     53 93 02 FB | 	rdlong	arg01, local01
2e9b4     1C 92 06 F1 | 	add	arg01, #28
2e9b8                 | ' {
2e9b8                 | ' 
2e9b8                 | ' 	return *((DWORD*)ptr);
2e9b8     49 7B 02 FB | 	rdlong	result1, arg01
2e9bc     54 7B 62 FC | 	wrlong	result1, local02
2e9c0     53 93 02 FB | 	rdlong	arg01, local01
2e9c4     16 92 06 F1 | 	add	arg01, #22
2e9c8                 | ' {
2e9c8                 | ' 
2e9c8                 | ' 	return *((WORD*)ptr);
2e9c8     49 7B E2 FA | 	rdword	result1, arg01
2e9cc     06 A8 06 F1 | 	add	local02, #6
2e9d0     54 7B 52 FC | 	wrword	result1, local02
2e9d4     53 93 02 FB | 	rdlong	arg01, local01
2e9d8     18 92 06 F1 | 	add	arg01, #24
2e9dc                 | ' {
2e9dc                 | ' 
2e9dc                 | ' 	return *((WORD*)ptr);
2e9dc     49 7B E2 FA | 	rdword	result1, arg01
2e9e0     02 A8 86 F1 | 	sub	local02, #2
2e9e4     54 7B 52 FC | 	wrword	result1, local02
2e9e8                 | LR__4964
2e9e8     E7 F0 03 F6 | 	mov	ptra, fp
2e9ec     F2 00 A0 FD | 	call	#popregs_
2e9f0                 | _fatfs_cc_get_fileinfo_ret
2e9f0     2D 00 64 FD | 	ret
2e9f4                 | 
2e9f4                 | _fatfs_cc_create_name
2e9f4     12 CA 05 F6 | 	mov	COUNT_, #18
2e9f8     E8 00 A0 FD | 	call	#pushregs_
2e9fc     34 F0 07 F1 | 	add	ptra, #52
2ea00     49 A7 02 F6 | 	mov	local01, arg01
2ea04     4A A9 02 F6 | 	mov	local02, arg02
2ea08     54 7B 02 FB | 	rdlong	result1, local02
2ea0c     30 CE 05 F1 | 	add	fp, #48
2ea10     E7 7A 62 FC | 	wrlong	result1, fp
2ea14     30 CE 85 F1 | 	sub	fp, #48
2ea18     53 AB 02 FB | 	rdlong	local03, local01
2ea1c     0C AA 06 F1 | 	add	local03, #12
2ea20     55 AD 02 FB | 	rdlong	local04, local03
2ea24     00 AE 06 F6 | 	mov	local05, #0
2ea28                 | ' 
2ea28                 | ' 
2ea28                 | ' 
2ea28                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
2ea28                 | ' 	for (;;) {
2ea28                 | LR__4970
2ea28     E7 92 02 F6 | 	mov	arg01, fp
2ea2c     30 92 06 F1 | 	add	arg01, #48
2ea30     FC DE BF FD | 	call	#_fatfs_cc_tchar2uni
2ea34     3D B1 02 F6 | 	mov	local06, result1
2ea38     FF FF 7F FF 
2ea3c     FF B1 0E F2 | 	cmp	local06, ##-1 wz
2ea40     06 7A 06 A6 |  if_e	mov	result1, #6
2ea44     84 04 90 AD |  if_e	jmp	#LR__5004
2ea48     80 00 00 FF 
2ea4c     00 B0 16 F2 | 	cmp	local06, ##65536 wc
2ea50     20 00 90 CD |  if_b	jmp	#LR__4971
2ea54     57 AB 02 F6 | 	mov	local03, local05
2ea58     01 AA 66 F0 | 	shl	local03, #1
2ea5c     56 B3 02 F6 | 	mov	local07, local04
2ea60     56 AB 02 F1 | 	add	local03, local04
2ea64     58 B5 02 F6 | 	mov	local08, local06
2ea68     10 B4 46 F0 | 	shr	local08, #16
2ea6c     55 B5 52 FC | 	wrword	local08, local03
2ea70     01 AE 06 F1 | 	add	local05, #1
2ea74                 | LR__4971
2ea74     58 B7 02 F6 | 	mov	local09, local06
2ea78     5B AB 32 F9 | 	getword	local03, local09, #0
2ea7c     20 AA 16 F2 | 	cmp	local03, #32 wc
2ea80     68 00 90 CD |  if_b	jmp	#LR__4973
2ea84     5B B9 32 F9 | 	getword	local10, local09, #0
2ea88     2F B8 0E F2 | 	cmp	local10, #47 wz
2ea8c     5B AB 02 56 |  if_ne	mov	local03, local09
2ea90     55 AB 32 59 |  if_ne	getword	local03, local03, #0
2ea94     5C AA 0E 52 |  if_ne	cmp	local03, #92 wz
2ea98     50 00 90 AD |  if_e	jmp	#LR__4973
2ea9c     5B AB 32 F9 | 	getword	local03, local09, #0
2eaa0     80 AA 16 F2 | 	cmp	local03, #128 wc
2eaa4     1C 00 90 3D |  if_ae	jmp	#LR__4972
2eaa8     94 01 00 FF 
2eaac     57 92 06 F6 | 	mov	arg01, ##@LR__5493
2eab0     5B 95 32 F9 | 	getword	arg02, local09, #0
2eab4     80 D7 BF FD | 	call	#_fatfs_cc_strchr
2eab8     3D B9 0A F6 | 	mov	local10, result1 wz
2eabc     06 7A 06 56 |  if_ne	mov	result1, #6
2eac0     08 04 90 5D |  if_ne	jmp	#LR__5004
2eac4                 | LR__4972
2eac4     FF AE 16 F2 | 	cmp	local05, #255 wc
2eac8     06 7A 06 36 |  if_ae	mov	result1, #6
2eacc     FC 03 90 3D |  if_ae	jmp	#LR__5004
2ead0     57 B1 02 F6 | 	mov	local06, local05
2ead4     01 B0 66 F0 | 	shl	local06, #1
2ead8     56 B3 02 F6 | 	mov	local07, local04
2eadc     56 B1 02 F1 | 	add	local06, local04
2eae0     58 B7 52 FC | 	wrword	local09, local06
2eae4     01 AE 06 F1 | 	add	local05, #1
2eae8     3C FF 9F FD | 	jmp	#LR__4970
2eaec                 | LR__4973
2eaec     5B AB 32 F9 | 	getword	local03, local09, #0
2eaf0     20 AA 16 F2 | 	cmp	local03, #32 wc
2eaf4     04 BA 06 C6 |  if_b	mov	local11, #4
2eaf8     68 00 90 CD |  if_b	jmp	#LR__4978
2eafc     D7 24 48 FB | 	callpa	#(@LR__4976-@LR__4974)>>2,fcache_load_ptr_
2eb00                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
2eb00                 | LR__4974
2eb00     30 CE 05 F1 | 	add	fp, #48
2eb04     E7 B8 02 FB | 	rdlong	local10, fp
2eb08     30 CE 85 F1 | 	sub	fp, #48
2eb0c     5C AB C2 FA | 	rdbyte	local03, local10
2eb10     2F AA 0E F2 | 	cmp	local03, #47 wz
2eb14     18 00 90 AD |  if_e	jmp	#LR__4975
2eb18     30 CE 05 F1 | 	add	fp, #48
2eb1c     E7 B4 02 FB | 	rdlong	local08, fp
2eb20     30 CE 85 F1 | 	sub	fp, #48
2eb24     5A BB C2 FA | 	rdbyte	local11, local08
2eb28     5C BA 0E F2 | 	cmp	local11, #92 wz
2eb2c     18 00 90 5D |  if_ne	jmp	#LR__4977
2eb30                 | LR__4975
2eb30     30 CE 05 F1 | 	add	fp, #48
2eb34     E7 BA 02 FB | 	rdlong	local11, fp
2eb38     01 BA 06 F1 | 	add	local11, #1
2eb3c     E7 BA 62 FC | 	wrlong	local11, fp
2eb40     30 CE 85 F1 | 	sub	fp, #48
2eb44     B8 FF 9F FD | 	jmp	#LR__4974
2eb48                 | LR__4976
2eb48                 | LR__4977
2eb48     00 BA 06 F6 | 	mov	local11, #0
2eb4c     30 CE 05 F1 | 	add	fp, #48
2eb50     E7 B8 02 FB | 	rdlong	local10, fp
2eb54     30 CE 85 F1 | 	sub	fp, #48
2eb58     5C AB C2 FA | 	rdbyte	local03, local10
2eb5c     20 AA 16 F2 | 	cmp	local03, #32 wc
2eb60     04 BA 06 C6 |  if_b	mov	local11, #4
2eb64                 | LR__4978
2eb64     30 CE 05 F1 | 	add	fp, #48
2eb68     E7 AA 02 FB | 	rdlong	local03, fp
2eb6c     30 CE 85 F1 | 	sub	fp, #48
2eb70     54 AB 62 FC | 	wrlong	local03, local02
2eb74                 | ' 	}
2eb74                 | ' 	*path = p;
2eb74                 | ' #line 2862 "ff.c"
2eb74                 | ' 	while (di) {
2eb74     00 AE 0E F2 | 	cmp	local05, #0 wz
2eb78     30 00 90 AD |  if_e	jmp	#LR__4981
2eb7c     D7 16 48 FB | 	callpa	#(@LR__4980-@LR__4979)>>2,fcache_load_ptr_
2eb80                 | LR__4979
2eb80     57 B7 02 F6 | 	mov	local09, local05
2eb84     01 B6 86 F1 | 	sub	local09, #1
2eb88     01 B6 66 F0 | 	shl	local09, #1
2eb8c     56 B7 02 F1 | 	add	local09, local04
2eb90     5B B7 E2 FA | 	rdword	local09, local09
2eb94     5B AB 32 F9 | 	getword	local03, local09, #0
2eb98     20 AA 0E F2 | 	cmp	local03, #32 wz
2eb9c     5B B9 02 56 |  if_ne	mov	local10, local09
2eba0     5C B9 32 59 |  if_ne	getword	local10, local10, #0
2eba4     2E B8 0E 52 |  if_ne	cmp	local10, #46 wz
2eba8     F5 AF 6E AB |  if_e	djnz	local05, #LR__4979
2ebac                 | LR__4980
2ebac                 | LR__4981
2ebac     57 B9 02 F6 | 	mov	local10, local05
2ebb0     01 B8 66 F0 | 	shl	local10, #1
2ebb4     56 B9 02 F1 | 	add	local10, local04
2ebb8     5C 01 58 FC | 	wrword	#0, local10
2ebbc     00 AE 0E F2 | 	cmp	local05, #0 wz
2ebc0     06 7A 06 A6 |  if_e	mov	result1, #6
2ebc4     04 03 90 AD |  if_e	jmp	#LR__5004
2ebc8                 | ' 
2ebc8                 | ' 
2ebc8                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
2ebc8     00 BC 06 F6 | 	mov	local12, #0
2ebcc     D7 12 48 FB | 	callpa	#(@LR__4983-@LR__4982)>>2,fcache_load_ptr_
2ebd0                 | LR__4982
2ebd0     5E B7 02 F6 | 	mov	local09, local12
2ebd4     01 B6 66 F0 | 	shl	local09, #1
2ebd8     56 B7 02 F1 | 	add	local09, local04
2ebdc     5B AB E2 FA | 	rdword	local03, local09
2ebe0     20 AA 0E F2 | 	cmp	local03, #32 wz
2ebe4     5E B5 02 A6 |  if_e	mov	local08, local12
2ebe8     01 B4 06 A1 |  if_e	add	local08, #1
2ebec     5A BD 02 A6 |  if_e	mov	local12, local08
2ebf0     DC FF 9F AD |  if_e	jmp	#LR__4982
2ebf4                 | LR__4983
2ebf4     01 BC 16 F2 | 	cmp	local12, #1 wc
2ebf8     18 00 90 3D |  if_ae	jmp	#LR__4984
2ebfc     5E B7 02 F6 | 	mov	local09, local12
2ec00     01 B6 66 F0 | 	shl	local09, #1
2ec04     56 B7 02 F1 | 	add	local09, local04
2ec08     5B AB E2 FA | 	rdword	local03, local09
2ec0c     2E AA 0E F2 | 	cmp	local03, #46 wz
2ec10     08 00 90 5D |  if_ne	jmp	#LR__4985
2ec14                 | LR__4984
2ec14     5D BB E2 F8 | 	getbyte	local11, local11, #0
2ec18     03 BA 46 F5 | 	or	local11, #3
2ec1c                 | LR__4985
2ec1c     D7 14 48 FB | 	callpa	#(@LR__4987-@LR__4986)>>2,fcache_load_ptr_
2ec20                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
2ec20                 | LR__4986
2ec20     01 AE 16 F2 | 	cmp	local05, #1 wc
2ec24     20 00 90 CD |  if_b	jmp	#LR__4988
2ec28     57 B7 02 F6 | 	mov	local09, local05
2ec2c     01 B6 86 F1 | 	sub	local09, #1
2ec30     01 B6 66 F0 | 	shl	local09, #1
2ec34     56 B7 02 F1 | 	add	local09, local04
2ec38     5B AB E2 FA | 	rdword	local03, local09
2ec3c     2E AA 0E F2 | 	cmp	local03, #46 wz
2ec40     01 AE 86 51 |  if_ne	sub	local05, #1
2ec44     D8 FF 9F 5D |  if_ne	jmp	#LR__4986
2ec48                 | LR__4987
2ec48                 | LR__4988
2ec48     53 93 02 F6 | 	mov	arg01, local01
2ec4c     20 92 06 F1 | 	add	arg01, #32
2ec50     20 94 06 F6 | 	mov	arg02, #32
2ec54     0B 96 06 F6 | 	mov	arg03, #11
2ec58     49 BF 02 F6 | 	mov	local13, arg01
2ec5c     D8 00 A0 FD | 	call	#\builtin_bytefill_
2ec60     5F 7B 02 F6 | 	mov	result1, local13
2ec64     00 C0 06 F6 | 	mov	local14, #0
2ec68     00 C2 06 F6 | 	mov	local15, #0
2ec6c     08 C4 06 F6 | 	mov	local16, #8
2ec70                 | ' 
2ec70                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
2ec70                 | ' 	i = b = 0; ni = 8;
2ec70                 | ' 	for (;;) {
2ec70                 | LR__4989
2ec70     5E C7 02 F6 | 	mov	local17, local12
2ec74     63 C9 02 F6 | 	mov	local18, local17
2ec78     01 C8 66 F0 | 	shl	local18, #1
2ec7c     56 B3 02 F6 | 	mov	local07, local04
2ec80     56 C9 02 F1 | 	add	local18, local04
2ec84     64 B7 E2 FA | 	rdword	local09, local18
2ec88     5B AB 02 F6 | 	mov	local03, local09
2ec8c     0F AA 4E F7 | 	zerox	local03, #15 wz
2ec90     01 BC 06 F1 | 	add	local12, #1
2ec94     B0 01 90 AD |  if_e	jmp	#LR__5002
2ec98     5B AB 32 F9 | 	getword	local03, local09, #0
2ec9c     20 AA 0E F2 | 	cmp	local03, #32 wz
2eca0     14 00 90 AD |  if_e	jmp	#LR__4990
2eca4     5B B9 32 F9 | 	getword	local10, local09, #0
2eca8     2E B8 0E F2 | 	cmp	local10, #46 wz
2ecac     14 00 90 5D |  if_ne	jmp	#LR__4991
2ecb0     57 BD 0A F2 | 	cmp	local12, local05 wz
2ecb4     0C 00 90 AD |  if_e	jmp	#LR__4991
2ecb8                 | LR__4990
2ecb8     5D BB E2 F8 | 	getbyte	local11, local11, #0
2ecbc     03 BA 46 F5 | 	or	local11, #3
2ecc0                 | ' 			cf |=  0x01  |  0x02 ;
2ecc0                 | ' 			continue;
2ecc0     AC FF 9F FD | 	jmp	#LR__4989
2ecc4                 | LR__4991
2ecc4     62 C3 12 F2 | 	cmp	local15, local16 wc
2ecc8     57 BD 0A C2 |  if_b	cmp	local12, local05 wz
2eccc     3C 00 90 4D |  if_c_and_nz	jmp	#LR__4992
2ecd0     0B C4 0E F2 | 	cmp	local16, #11 wz
2ecd4     5D BB E2 A8 |  if_e	getbyte	local11, local11, #0
2ecd8     03 BA 46 A5 |  if_e	or	local11, #3
2ecdc                 | ' 				cf |=  0x01  |  0x02 ;
2ecdc                 | ' 				break;
2ecdc     68 01 90 AD |  if_e	jmp	#LR__5002
2ece0     57 BD 0A F2 | 	cmp	local12, local05 wz
2ece4     5D BB E2 58 |  if_ne	getbyte	local11, local11, #0
2ece8     03 BA 46 55 |  if_ne	or	local11, #3
2ecec     57 BD 1A F2 | 	cmp	local12, local05 wcz
2ecf0     54 01 90 1D |  if_a	jmp	#LR__5002
2ecf4     57 BD 02 F6 | 	mov	local12, local05
2ecf8     08 C2 06 F6 | 	mov	local15, #8
2ecfc     0B C4 06 F6 | 	mov	local16, #11
2ed00     60 C1 E2 F8 | 	getbyte	local14, local14, #0
2ed04     02 C0 66 F0 | 	shl	local14, #2
2ed08                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
2ed08                 | ' 			continue;
2ed08     64 FF 9F FD | 	jmp	#LR__4989
2ed0c                 | LR__4992
2ed0c     5B AB 32 F9 | 	getword	local03, local09, #0
2ed10     80 AA 16 F2 | 	cmp	local03, #128 wc
2ed14     50 00 90 CD |  if_b	jmp	#LR__4994
2ed18     5D BB E2 F8 | 	getbyte	local11, local11, #0
2ed1c     02 BA 46 F5 | 	or	local11, #2
2ed20     5B 93 32 F9 | 	getword	arg01, local09, #0
2ed24     01 00 00 FF 
2ed28     52 B9 06 F6 | 	mov	local10, ##850
2ed2c     01 00 00 FF 
2ed30     52 95 06 F6 | 	mov	arg02, ##850
2ed34     B0 D1 BF FD | 	call	#_fatfs_cc_ff_uni2oem
2ed38     3D B7 02 F6 | 	mov	local09, result1
2ed3c     5B AB 32 F9 | 	getword	local03, local09, #0
2ed40     80 AA CE F7 | 	test	local03, #128 wz
2ed44     20 00 90 AD |  if_e	jmp	#LR__4993
2ed48     5B B9 32 F9 | 	getword	local10, local09, #0
2ed4c     7F B8 06 F5 | 	and	local10, #127
2ed50     5C C7 02 F6 | 	mov	local17, local10
2ed54     36 C9 02 F6 | 	mov	local18, ptr__fatfs_cc_dat__
2ed58     01 00 00 FF 
2ed5c     BB C9 06 F1 | 	add	local18, ##955
2ed60     64 C7 02 F1 | 	add	local17, local18
2ed64     63 B7 C2 FA | 	rdbyte	local09, local17
2ed68                 | LR__4993
2ed68                 | LR__4994
2ed68     5B AB 32 F9 | 	getword	local03, local09, #0
2ed6c     00 AB 16 F2 | 	cmp	local03, #256 wc
2ed70     40 00 90 CD |  if_b	jmp	#LR__4995
2ed74     62 AB 02 F6 | 	mov	local03, local16
2ed78     01 AA 86 F1 | 	sub	local03, #1
2ed7c     55 C3 12 F2 | 	cmp	local15, local03 wc
2ed80     5D BB E2 38 |  if_ae	getbyte	local11, local11, #0
2ed84     03 BA 46 35 |  if_ae	or	local11, #3
2ed88     62 C3 02 36 |  if_ae	mov	local15, local16
2ed8c                 | ' 				cf |=  0x01  |  0x02 ;
2ed8c                 | ' 				i = ni; continue;
2ed8c     E0 FE 9F 3D |  if_ae	jmp	#LR__4989
2ed90     61 C7 02 F6 | 	mov	local17, local15
2ed94     53 C9 02 F6 | 	mov	local18, local01
2ed98     20 C8 06 F1 | 	add	local18, #32
2ed9c     64 C7 02 F1 | 	add	local17, local18
2eda0     5B B3 32 F9 | 	getword	local07, local09, #0
2eda4     08 B2 46 F0 | 	shr	local07, #8
2eda8     63 B3 42 FC | 	wrbyte	local07, local17
2edac     01 C2 06 F1 | 	add	local15, #1
2edb0     74 00 90 FD | 	jmp	#LR__5001
2edb4                 | LR__4995
2edb4     5B AB 02 F6 | 	mov	local03, local09
2edb8     0F AA 4E F7 | 	zerox	local03, #15 wz
2edbc     18 00 90 AD |  if_e	jmp	#LR__4996
2edc0     94 01 00 FF 
2edc4     60 92 06 F6 | 	mov	arg01, ##@LR__5494
2edc8     5B 95 32 F9 | 	getword	arg02, local09, #0
2edcc     68 D4 BF FD | 	call	#_fatfs_cc_strchr
2edd0     00 7A 0E F2 | 	cmp	result1, #0 wz
2edd4     10 00 90 AD |  if_e	jmp	#LR__4997
2edd8                 | LR__4996
2edd8     5F B6 06 F6 | 	mov	local09, #95
2eddc     5D BB E2 F8 | 	getbyte	local11, local11, #0
2ede0     03 BA 46 F5 | 	or	local11, #3
2ede4     40 00 90 FD | 	jmp	#LR__5000
2ede8                 | LR__4997
2ede8     5B AB 32 F9 | 	getword	local03, local09, #0
2edec     41 AA 16 F2 | 	cmp	local03, #65 wc
2edf0     10 00 90 CD |  if_b	jmp	#LR__4998
2edf4     5B B9 32 F9 | 	getword	local10, local09, #0
2edf8     5B B8 16 F2 | 	cmp	local10, #91 wc
2edfc     60 C1 E2 C8 |  if_b	getbyte	local14, local14, #0
2ee00     02 C0 46 C5 |  if_b	or	local14, #2
2ee04                 | LR__4998
2ee04     5B AB 32 F9 | 	getword	local03, local09, #0
2ee08     61 AA 16 F2 | 	cmp	local03, #97 wc
2ee0c     18 00 90 CD |  if_b	jmp	#LR__4999
2ee10     5B B9 32 F9 | 	getword	local10, local09, #0
2ee14     7B B8 16 F2 | 	cmp	local10, #123 wc
2ee18     60 C1 E2 C8 |  if_b	getbyte	local14, local14, #0
2ee1c     01 C0 46 C5 |  if_b	or	local14, #1
2ee20     5B B7 32 C9 |  if_b	getword	local09, local09, #0
2ee24     20 B6 86 C1 |  if_b	sub	local09, #32
2ee28                 | LR__4999
2ee28                 | LR__5000
2ee28                 | LR__5001
2ee28     61 C7 02 F6 | 	mov	local17, local15
2ee2c     53 C9 02 F6 | 	mov	local18, local01
2ee30     20 C8 06 F1 | 	add	local18, #32
2ee34     64 C7 02 F1 | 	add	local17, local18
2ee38     5B B7 32 F9 | 	getword	local09, local09, #0
2ee3c     63 B7 42 FC | 	wrbyte	local09, local17
2ee40     01 C2 06 F1 | 	add	local15, #1
2ee44     28 FE 9F FD | 	jmp	#LR__4989
2ee48                 | LR__5002
2ee48     20 A6 06 F1 | 	add	local01, #32
2ee4c     53 AB C2 FA | 	rdbyte	local03, local01
2ee50     20 A6 86 F1 | 	sub	local01, #32
2ee54     E5 AA 0E F2 | 	cmp	local03, #229 wz
2ee58     20 A6 06 A1 |  if_e	add	local01, #32
2ee5c     53 0B 48 AC |  if_e	wrbyte	#5, local01
2ee60     20 A6 86 A1 |  if_e	sub	local01, #32
2ee64     08 C4 0E F2 | 	cmp	local16, #8 wz
2ee68     60 C1 E2 A8 |  if_e	getbyte	local14, local14, #0
2ee6c     02 C0 66 A0 |  if_e	shl	local14, #2
2ee70     60 AB E2 F8 | 	getbyte	local03, local14, #0
2ee74     0C AA 06 F5 | 	and	local03, #12
2ee78     0C AA 0E F2 | 	cmp	local03, #12 wz
2ee7c     60 B9 02 56 |  if_ne	mov	local10, local14
2ee80     5C B9 E2 58 |  if_ne	getbyte	local10, local10, #0
2ee84     03 B8 06 55 |  if_ne	and	local10, #3
2ee88     03 B8 0E 52 |  if_ne	cmp	local10, #3 wz
2ee8c     5D BB E2 A8 |  if_e	getbyte	local11, local11, #0
2ee90     02 BA 46 A5 |  if_e	or	local11, #2
2ee94     5D AB E2 F8 | 	getbyte	local03, local11, #0
2ee98     02 AA CE F7 | 	test	local03, #2 wz
2ee9c     20 00 90 5D |  if_ne	jmp	#LR__5003
2eea0     60 AB E2 F8 | 	getbyte	local03, local14, #0
2eea4     01 AA CE F7 | 	test	local03, #1 wz
2eea8     5D BB E2 58 |  if_ne	getbyte	local11, local11, #0
2eeac     10 BA 46 55 |  if_ne	or	local11, #16
2eeb0     60 C1 E2 F8 | 	getbyte	local14, local14, #0
2eeb4     04 C0 CE F7 | 	test	local14, #4 wz
2eeb8     5D BB E2 58 |  if_ne	getbyte	local11, local11, #0
2eebc     08 BA 46 55 |  if_ne	or	local11, #8
2eec0                 | LR__5003
2eec0     2B A6 06 F1 | 	add	local01, #43
2eec4     53 BB 42 FC | 	wrbyte	local11, local01
2eec8                 | ' 	}
2eec8                 | ' 
2eec8                 | ' 	dp->fn[ 11 ] = cf;
2eec8                 | ' 
2eec8                 | ' 	return FR_OK;
2eec8     00 7A 06 F6 | 	mov	result1, #0
2eecc                 | LR__5004
2eecc     E7 F0 03 F6 | 	mov	ptra, fp
2eed0     F2 00 A0 FD | 	call	#popregs_
2eed4                 | _fatfs_cc_create_name_ret
2eed4     2D 00 64 FD | 	ret
2eed8                 | 
2eed8                 | _fatfs_cc_follow_path
2eed8     04 CA 05 F6 | 	mov	COUNT_, #4
2eedc     E8 00 A0 FD | 	call	#pushregs_
2eee0     18 F0 07 F1 | 	add	ptra, #24
2eee4     49 A7 02 F6 | 	mov	local01, arg01
2eee8     08 CE 05 F1 | 	add	fp, #8
2eeec     E7 94 62 FC | 	wrlong	arg02, fp
2eef0     08 CE 85 F1 | 	sub	fp, #8
2eef4     53 A9 02 FB | 	rdlong	local02, local01
2eef8     D7 24 48 FB | 	callpa	#(@LR__5012-@LR__5010)>>2,fcache_load_ptr_
2eefc                 | ' )
2eefc                 | ' {
2eefc                 | ' 	FRESULT res;
2eefc                 | ' 	BYTE ns;
2eefc                 | ' 	FATFS *fs = dp->obj.fs;
2eefc                 | ' #line 3034 "ff.c"
2eefc                 | ' 	{
2eefc                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
2eefc                 | LR__5010
2eefc     08 CE 05 F1 | 	add	fp, #8
2ef00     E7 7A 02 FB | 	rdlong	result1, fp
2ef04     08 CE 85 F1 | 	sub	fp, #8
2ef08     3D 7B C2 FA | 	rdbyte	result1, result1
2ef0c     2F 7A 0E F2 | 	cmp	result1, #47 wz
2ef10     18 00 90 AD |  if_e	jmp	#LR__5011
2ef14     08 CE 05 F1 | 	add	fp, #8
2ef18     E7 7A 02 FB | 	rdlong	result1, fp
2ef1c     08 CE 85 F1 | 	sub	fp, #8
2ef20     3D 7B C2 FA | 	rdbyte	result1, result1
2ef24     5C 7A 0E F2 | 	cmp	result1, #92 wz
2ef28     18 00 90 5D |  if_ne	jmp	#LR__5013
2ef2c                 | LR__5011
2ef2c     08 CE 05 F1 | 	add	fp, #8
2ef30     E7 7A 02 FB | 	rdlong	result1, fp
2ef34     01 7A 06 F1 | 	add	result1, #1
2ef38     E7 7A 62 FC | 	wrlong	result1, fp
2ef3c     08 CE 85 F1 | 	sub	fp, #8
2ef40     B8 FF 9F FD | 	jmp	#LR__5010
2ef44                 | LR__5012
2ef44                 | LR__5013
2ef44     08 A6 06 F1 | 	add	local01, #8
2ef48     53 01 68 FC | 	wrlong	#0, local01
2ef4c     08 A6 86 F1 | 	sub	local01, #8
2ef50     08 CE 05 F1 | 	add	fp, #8
2ef54     E7 94 02 FB | 	rdlong	arg02, fp
2ef58     08 CE 85 F1 | 	sub	fp, #8
2ef5c     4A 95 C2 FA | 	rdbyte	arg02, arg02
2ef60     20 94 16 F2 | 	cmp	arg02, #32 wc
2ef64     20 00 90 3D |  if_ae	jmp	#LR__5014
2ef68     2B A6 06 F1 | 	add	local01, #43
2ef6c     53 01 49 FC | 	wrbyte	#128, local01
2ef70     2B A6 86 F1 | 	sub	local01, #43
2ef74     53 93 02 F6 | 	mov	arg01, local01
2ef78     00 94 06 F6 | 	mov	arg02, #0
2ef7c     9C E6 BF FD | 	call	#_fatfs_cc_dir_sdi
2ef80     3D AB 02 F6 | 	mov	local03, result1
2ef84     A0 00 90 FD | 	jmp	#LR__5018
2ef88                 | LR__5014
2ef88                 | ' 		for (;;) {
2ef88                 | LR__5015
2ef88     E7 94 02 F6 | 	mov	arg02, fp
2ef8c     08 94 06 F1 | 	add	arg02, #8
2ef90     53 93 02 F6 | 	mov	arg01, local01
2ef94     5C FA BF FD | 	call	#_fatfs_cc_create_name
2ef98     3D AB 0A F6 | 	mov	local03, result1 wz
2ef9c     88 00 90 5D |  if_ne	jmp	#LR__5017
2efa0     53 93 02 F6 | 	mov	arg01, local01
2efa4     0C F1 BF FD | 	call	#_fatfs_cc_dir_find
2efa8     3D AB 0A F6 | 	mov	local03, result1 wz
2efac     2B A6 06 F1 | 	add	local01, #43
2efb0     53 AD C2 FA | 	rdbyte	local04, local01
2efb4     2B A6 86 F1 | 	sub	local01, #43
2efb8     18 00 90 AD |  if_e	jmp	#LR__5016
2efbc     04 AA 0E F2 | 	cmp	local03, #4 wz
2efc0     64 00 90 5D |  if_ne	jmp	#LR__5017
2efc4     56 AD E2 F8 | 	getbyte	local04, local04, #0
2efc8     04 AC CE F7 | 	test	local04, #4 wz
2efcc     05 AA 06 A6 |  if_e	mov	local03, #5
2efd0                 | ' 					}
2efd0                 | ' 				}
2efd0                 | ' 				break;
2efd0     54 00 90 FD | 	jmp	#LR__5017
2efd4                 | LR__5016
2efd4     56 AD E2 F8 | 	getbyte	local04, local04, #0
2efd8     04 AC CE F7 | 	test	local04, #4 wz
2efdc     48 00 90 5D |  if_ne	jmp	#LR__5017
2efe0     06 A6 06 F1 | 	add	local01, #6
2efe4     53 AD C2 FA | 	rdbyte	local04, local01
2efe8     06 A6 86 F1 | 	sub	local01, #6
2efec     10 AC CE F7 | 	test	local04, #16 wz
2eff0     05 AA 06 A6 |  if_e	mov	local03, #5
2eff4                 | ' 				res = FR_NO_PATH; break;
2eff4     30 00 90 AD |  if_e	jmp	#LR__5017
2eff8     54 93 02 F6 | 	mov	arg01, local02
2effc     54 95 02 F6 | 	mov	arg02, local02
2f000     34 94 06 F1 | 	add	arg02, #52
2f004     10 A6 06 F1 | 	add	local01, #16
2f008     53 AD 02 FB | 	rdlong	local04, local01
2f00c     FF AD 06 F5 | 	and	local04, #511
2f010     56 95 02 F1 | 	add	arg02, local04
2f014     D8 E9 BF FD | 	call	#_fatfs_cc_ld_clust
2f018     08 A6 86 F1 | 	sub	local01, #8
2f01c     53 7B 62 FC | 	wrlong	result1, local01
2f020     08 A6 86 F1 | 	sub	local01, #8
2f024     60 FF 9F FD | 	jmp	#LR__5015
2f028                 | LR__5017
2f028                 | LR__5018
2f028                 | ' 			}
2f028                 | ' #line 3090 "ff.c"
2f028                 | ' 			{
2f028                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
2f028                 | ' 			}
2f028                 | ' 		}
2f028                 | ' 	}
2f028                 | ' 
2f028                 | ' 	return res;
2f028     55 7B 02 F6 | 	mov	result1, local03
2f02c     E7 F0 03 F6 | 	mov	ptra, fp
2f030     F2 00 A0 FD | 	call	#popregs_
2f034                 | _fatfs_cc_follow_path_ret
2f034     2D 00 64 FD | 	ret
2f038                 | 
2f038                 | _fatfs_cc_get_ldnumber
2f038     01 80 66 F6 | 	neg	_var01, #1
2f03c     49 83 0A FB | 	rdlong	_var02, arg01 wz
2f040     41 85 02 F6 | 	mov	_var03, _var02
2f044     01 7A 66 A6 |  if_e	neg	result1, #1
2f048     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
2f04c     D7 10 48 FB | 	callpa	#(@LR__5021-@LR__5020)>>2,fcache_load_ptr_
2f050                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
2f050                 | LR__5020
2f050     42 87 C2 FA | 	rdbyte	_var04, _var03
2f054     43 7B E2 F8 | 	getbyte	result1, _var04, #0
2f058     20 7A 16 F2 | 	cmp	result1, #32 wc
2f05c     01 84 06 F1 | 	add	_var03, #1
2f060     43 89 02 36 |  if_ae	mov	_var05, _var04
2f064     44 89 E2 38 |  if_ae	getbyte	_var05, _var05, #0
2f068     3A 88 0E 32 |  if_ae	cmp	_var05, #58 wz
2f06c     E0 FF 9F 1D |  if_a	jmp	#LR__5020
2f070                 | LR__5021
2f070     43 87 E2 F8 | 	getbyte	_var04, _var04, #0
2f074     3A 86 0E F2 | 	cmp	_var04, #58 wz
2f078     40 00 90 5D |  if_ne	jmp	#LR__5023
2f07c     01 8A 06 F6 | 	mov	_var06, #1
2f080     41 89 C2 FA | 	rdbyte	_var05, _var02
2f084     30 88 16 F2 | 	cmp	_var05, #48 wc
2f088     1C 00 90 CD |  if_b	jmp	#LR__5022
2f08c     41 89 C2 FA | 	rdbyte	_var05, _var02
2f090     3A 88 16 F2 | 	cmp	_var05, #58 wc
2f094     41 8D 02 C6 |  if_b	mov	_var07, _var02
2f098     02 8C 06 C1 |  if_b	add	_var07, #2
2f09c     42 8D 0A C2 |  if_b	cmp	_var07, _var03 wz
2f0a0     44 8B 02 86 |  if_c_and_z	mov	_var06, _var05
2f0a4     30 8A 86 81 |  if_c_and_z	sub	_var06, #48
2f0a8                 | LR__5022
2f0a8     01 8A 56 F2 | 	cmps	_var06, #1 wc
2f0ac     45 81 02 C6 |  if_b	mov	_var01, _var06
2f0b0     49 85 62 CC |  if_b	wrlong	_var03, arg01
2f0b4                 | ' 			vol = i;
2f0b4                 | ' 			*path = tt;
2f0b4                 | ' 		}
2f0b4                 | ' 		return vol;
2f0b4     40 7B 02 F6 | 	mov	result1, _var01
2f0b8     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
2f0bc                 | LR__5023
2f0bc                 | ' 	}
2f0bc                 | ' #line 3170 "ff.c"
2f0bc                 | ' 	vol = 0;
2f0bc                 | ' 
2f0bc                 | ' 	return vol;
2f0bc     00 7A 06 F6 | 	mov	result1, #0
2f0c0                 | _fatfs_cc_get_ldnumber_ret
2f0c0     2D 00 64 FD | 	ret
2f0c4                 | 
2f0c4                 | _fatfs_cc_check_fs
2f0c4     04 CA 05 F6 | 	mov	COUNT_, #4
2f0c8     E8 00 A0 FD | 	call	#pushregs_
2f0cc     49 A7 02 F6 | 	mov	local01, arg01
2f0d0     03 A6 06 F1 | 	add	local01, #3
2f0d4     53 01 48 FC | 	wrbyte	#0, local01
2f0d8     2D A6 06 F1 | 	add	local01, #45
2f0dc     FF FF FF FF 
2f0e0     53 FF 6B FC | 	wrlong	##-1, local01
2f0e4     30 A6 86 F1 | 	sub	local01, #48
2f0e8     53 93 02 F6 | 	mov	arg01, local01
2f0ec     C8 DB BF FD | 	call	#_fatfs_cc_move_window
2f0f0     00 7A 0E F2 | 	cmp	result1, #0 wz
2f0f4     04 7A 06 56 |  if_ne	mov	result1, #4
2f0f8     64 01 90 5D |  if_ne	jmp	#LR__5033
2f0fc     34 A6 06 F1 | 	add	local01, #52
2f100     53 93 02 F6 | 	mov	arg01, local01
2f104     FE 93 06 F1 | 	add	arg01, #510
2f108                 | ' {
2f108                 | ' 
2f108                 | ' 	return *((WORD*)ptr);
2f108     49 A9 E2 FA | 	rdword	local02, arg01
2f10c     53 AB C2 FA | 	rdbyte	local03, local01
2f110     34 A6 86 F1 | 	sub	local01, #52
2f114     55 AD E2 F8 | 	getbyte	local04, local03, #0
2f118     EB AC 0E F2 | 	cmp	local04, #235 wz
2f11c     55 97 02 56 |  if_ne	mov	arg03, local03
2f120     4B 97 E2 58 |  if_ne	getbyte	arg03, arg03, #0
2f124     E9 96 0E 52 |  if_ne	cmp	arg03, #233 wz
2f128     55 AB E2 58 |  if_ne	getbyte	local03, local03, #0
2f12c     E8 AA 0E 52 |  if_ne	cmp	local03, #232 wz
2f130     14 01 90 5D |  if_ne	jmp	#LR__5032
2f134     54 AD 32 F9 | 	getword	local04, local02, #0
2f138     55 00 00 FF 
2f13c     55 AC 0E F2 | 	cmp	local04, ##43605 wz
2f140     24 00 90 5D |  if_ne	jmp	#LR__5030
2f144     53 93 02 F6 | 	mov	arg01, local01
2f148     86 92 06 F1 | 	add	arg01, #134
2f14c     94 01 00 FF 
2f150     67 94 06 F6 | 	mov	arg02, ##@LR__5495
2f154     08 96 06 F6 | 	mov	arg03, #8
2f158     10 D0 BF FD | 	call	#_fatfs_cc_memcmp
2f15c     00 7A 0E F2 | 	cmp	result1, #0 wz
2f160                 | ' 			return 0;
2f160     00 7A 06 A6 |  if_e	mov	result1, #0
2f164     F8 00 90 AD |  if_e	jmp	#LR__5033
2f168                 | LR__5030
2f168     34 A6 06 F1 | 	add	local01, #52
2f16c     53 93 02 F6 | 	mov	arg01, local01
2f170     0B 92 06 F1 | 	add	arg01, #11
2f174                 | ' {
2f174                 | ' 
2f174                 | ' 	return *((WORD*)ptr);
2f174     49 7B E2 FA | 	rdword	result1, arg01
2f178     0D A6 06 F1 | 	add	local01, #13
2f17c     53 AB C2 FA | 	rdbyte	local03, local01
2f180     41 A6 86 F1 | 	sub	local01, #65
2f184     3D AD 32 F9 | 	getword	local04, result1, #0
2f188     3D 95 32 F9 | 	getword	arg02, result1, #0
2f18c     01 94 86 F1 | 	sub	arg02, #1
2f190     4A AD CA F7 | 	test	local04, arg02 wz
2f194     B0 00 90 5D |  if_ne	jmp	#LR__5031
2f198     3D 95 32 F9 | 	getword	arg02, result1, #0
2f19c     01 00 00 FF 
2f1a0     00 94 16 F2 | 	cmp	arg02, ##512 wc
2f1a4     A0 00 90 CD |  if_b	jmp	#LR__5031
2f1a8     3D 95 32 F9 | 	getword	arg02, result1, #0
2f1ac     01 00 00 FF 
2f1b0     01 94 16 F2 | 	cmp	arg02, ##513 wc
2f1b4     90 00 90 3D |  if_ae	jmp	#LR__5031
2f1b8     55 93 02 F6 | 	mov	arg01, local03
2f1bc     07 92 4E F7 | 	zerox	arg01, #7 wz
2f1c0     84 00 90 AD |  if_e	jmp	#LR__5031
2f1c4     55 93 E2 F8 | 	getbyte	arg01, local03, #0
2f1c8     55 AB E2 F8 | 	getbyte	local03, local03, #0
2f1cc     01 AA 86 F1 | 	sub	local03, #1
2f1d0     55 93 CA F7 | 	test	arg01, local03 wz
2f1d4     70 00 90 5D |  if_ne	jmp	#LR__5031
2f1d8     53 93 02 F6 | 	mov	arg01, local01
2f1dc     42 92 06 F1 | 	add	arg01, #66
2f1e0                 | ' {
2f1e0                 | ' 
2f1e0                 | ' 	return *((WORD*)ptr);
2f1e0     49 7B EA FA | 	rdword	result1, arg01 wz
2f1e4     60 00 90 AD |  if_e	jmp	#LR__5031
2f1e8     44 A6 06 F1 | 	add	local01, #68
2f1ec     53 93 C2 FA | 	rdbyte	arg01, local01
2f1f0     44 A6 86 F1 | 	sub	local01, #68
2f1f4     01 92 86 F1 | 	sub	arg01, #1
2f1f8     02 92 16 F2 | 	cmp	arg01, #2 wc
2f1fc     48 00 90 3D |  if_ae	jmp	#LR__5031
2f200     53 93 02 F6 | 	mov	arg01, local01
2f204     45 92 06 F1 | 	add	arg01, #69
2f208                 | ' {
2f208                 | ' 
2f208                 | ' 	return *((WORD*)ptr);
2f208     49 7B EA FA | 	rdword	result1, arg01 wz
2f20c     38 00 90 AD |  if_e	jmp	#LR__5031
2f210     53 93 02 F6 | 	mov	arg01, local01
2f214     47 92 06 F1 | 	add	arg01, #71
2f218                 | ' {
2f218                 | ' 
2f218                 | ' 	return *((WORD*)ptr);
2f218     49 7B E2 FA | 	rdword	result1, arg01
2f21c     3D AB 32 F9 | 	getword	local03, result1, #0
2f220     80 AA 16 F2 | 	cmp	local03, #128 wc
2f224     53 93 02 C6 |  if_b	mov	arg01, local01
2f228     54 92 06 C1 |  if_b	add	arg01, #84
2f22c                 | ' {
2f22c                 | ' 
2f22c                 | ' 	return *((DWORD*)ptr);
2f22c     49 7B 02 CB |  if_b	rdlong	result1, arg01
2f230     80 00 00 CF 
2f234     00 7A 16 C2 |  if_b	cmp	result1, ##65536 wc
2f238     4A A6 06 31 |  if_ae	add	local01, #74
2f23c                 | ' {
2f23c                 | ' 
2f23c                 | ' 	return *((WORD*)ptr);
2f23c     53 7B EA 3A |  if_ae	rdword	result1, local01 wz
2f240                 | ' 			&& b != 0 && (b & (b - 1)) == 0
2f240                 | ' 			&& ld_word(fs->win +  14 ) != 0
2f240                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
2f240                 | ' 			&& ld_word(fs->win +  17 ) != 0
2f240                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
2f240                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
2f240                 | ' 				return 0;
2f240     00 7A 06 16 |  if_a	mov	result1, #0
2f244     18 00 90 1D |  if_a	jmp	#LR__5033
2f248                 | LR__5031
2f248                 | LR__5032
2f248                 | ' 		}
2f248                 | ' 	}
2f248                 | ' 	return sign == 0xAA55 ? 2 : 3;
2f248     54 AB 32 F9 | 	getword	local03, local02, #0
2f24c     55 00 00 FF 
2f250     55 AA 0E F2 | 	cmp	local03, ##43605 wz
2f254     02 AC 06 A6 |  if_e	mov	local04, #2
2f258     03 AC 06 56 |  if_ne	mov	local04, #3
2f25c     56 7B 02 F6 | 	mov	result1, local04
2f260                 | LR__5033
2f260     E7 F0 03 F6 | 	mov	ptra, fp
2f264     F2 00 A0 FD | 	call	#popregs_
2f268                 | _fatfs_cc_check_fs_ret
2f268     2D 00 64 FD | 	ret
2f26c                 | 
2f26c                 | _fatfs_cc_find_volume
2f26c     05 CA 05 F6 | 	mov	COUNT_, #5
2f270     E8 00 A0 FD | 	call	#pushregs_
2f274     24 F0 07 F1 | 	add	ptra, #36
2f278     49 A7 02 F6 | 	mov	local01, arg01
2f27c     4A A9 02 F6 | 	mov	local02, arg02
2f280     53 93 02 F6 | 	mov	arg01, local01
2f284     00 94 06 F6 | 	mov	arg02, #0
2f288     38 FE BF FD | 	call	#_fatfs_cc_check_fs
2f28c     02 7A 0E F2 | 	cmp	result1, #2 wz
2f290     0C 00 90 AD |  if_e	jmp	#LR__5040
2f294     03 7A 16 F2 | 	cmp	result1, #3 wc
2f298     00 A8 0E C2 |  if_b	cmp	local02, #0 wz
2f29c     C8 00 90 BD |  if_nc_or_z	jmp	#LR__5048
2f2a0                 | LR__5040
2f2a0                 | ' 	for (i = 0; i < 4; i++) {
2f2a0     00 AA 06 F6 | 	mov	local03, #0
2f2a4     D7 22 48 FB | 	callpa	#(@LR__5042-@LR__5041)>>2,fcache_load_ptr_
2f2a8                 | LR__5041
2f2a8     04 AA 16 F2 | 	cmp	local03, #4 wc
2f2ac     3C 00 90 3D |  if_ae	jmp	#LR__5043
2f2b0     55 AD 02 F6 | 	mov	local04, local03
2f2b4     02 AC 66 F0 | 	shl	local04, #2
2f2b8     E7 94 02 F6 | 	mov	arg02, fp
2f2bc     14 94 06 F1 | 	add	arg02, #20
2f2c0     4A AD 02 F1 | 	add	local04, arg02
2f2c4     53 93 02 F6 | 	mov	arg01, local01
2f2c8     F2 93 06 F1 | 	add	arg01, #498
2f2cc     55 95 02 F6 | 	mov	arg02, local03
2f2d0     04 94 66 F0 | 	shl	arg02, #4
2f2d4     4A 93 02 F1 | 	add	arg01, arg02
2f2d8     08 92 06 F1 | 	add	arg01, #8
2f2dc                 | ' {
2f2dc                 | ' 
2f2dc                 | ' 	return *((DWORD*)ptr);
2f2dc     49 7B 02 FB | 	rdlong	result1, arg01
2f2e0     56 7B 62 FC | 	wrlong	result1, local04
2f2e4     01 AA 06 F1 | 	add	local03, #1
2f2e8     BC FF 9F FD | 	jmp	#LR__5041
2f2ec                 | LR__5042
2f2ec                 | LR__5043
2f2ec     00 A8 0E F2 | 	cmp	local02, #0 wz
2f2f0     54 AD 02 56 |  if_ne	mov	local04, local02
2f2f4     01 AC 86 51 |  if_ne	sub	local04, #1
2f2f8     00 AC 06 A6 |  if_e	mov	local04, #0
2f2fc     56 AB 02 F6 | 	mov	local03, local04
2f300                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
2f300                 | ' 	}
2f300                 | ' 	i = part ? part - 1 : 0;
2f300                 | ' 	do {
2f300                 | LR__5044
2f300     55 AD 02 F6 | 	mov	local04, local03
2f304     02 AC 66 F0 | 	shl	local04, #2
2f308     E7 94 02 F6 | 	mov	arg02, fp
2f30c     14 94 06 F1 | 	add	arg02, #20
2f310     4A AD 02 F1 | 	add	local04, arg02
2f314     56 AD 0A FB | 	rdlong	local04, local04 wz
2f318     28 00 90 AD |  if_e	jmp	#LR__5045
2f31c     55 AD 02 F6 | 	mov	local04, local03
2f320     02 AC 66 F0 | 	shl	local04, #2
2f324     E7 94 02 F6 | 	mov	arg02, fp
2f328     14 94 06 F1 | 	add	arg02, #20
2f32c     4A AD 02 F1 | 	add	local04, arg02
2f330     56 95 02 FB | 	rdlong	arg02, local04
2f334     53 93 02 F6 | 	mov	arg01, local01
2f338     88 FD BF FD | 	call	#_fatfs_cc_check_fs
2f33c     3D AD 02 F6 | 	mov	local04, result1
2f340     04 00 90 FD | 	jmp	#LR__5046
2f344                 | LR__5045
2f344     03 AC 06 F6 | 	mov	local04, #3
2f348                 | LR__5046
2f348     56 AF 02 F6 | 	mov	local05, local04
2f34c     00 A8 0E F2 | 	cmp	local02, #0 wz
2f350     02 AE 16 A2 |  if_e	cmp	local05, #2 wc
2f354     0C 00 90 8D |  if_c_and_z	jmp	#LR__5047
2f358     01 AA 06 A1 |  if_e	add	local03, #1
2f35c     04 AA 16 A2 |  if_e	cmp	local03, #4 wc
2f360     9C FF 9F 8D |  if_c_and_z	jmp	#LR__5044
2f364                 | LR__5047
2f364                 | ' 	return fmt;
2f364     57 7B 02 F6 | 	mov	result1, local05
2f368                 | LR__5048
2f368     E7 F0 03 F6 | 	mov	ptra, fp
2f36c     F2 00 A0 FD | 	call	#popregs_
2f370                 | _fatfs_cc_find_volume_ret
2f370     2D 00 64 FD | 	ret
2f374                 | 
2f374                 | _fatfs_cc_mount_volume
2f374     0A CA 05 F6 | 	mov	COUNT_, #10
2f378     E8 00 A0 FD | 	call	#pushregs_
2f37c     4B A7 02 F6 | 	mov	local01, arg03
2f380     4A 01 68 FC | 	wrlong	#0, arg02
2f384     B0 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
2f388     3D A9 02 F6 | 	mov	local02, result1
2f38c     00 A8 56 F2 | 	cmps	local02, #0 wc
2f390     0B 7A 06 C6 |  if_b	mov	result1, #11
2f394     00 05 90 CD |  if_b	jmp	#LR__5059
2f398     54 97 02 F6 | 	mov	arg03, local02
2f39c     02 96 66 F0 | 	shl	arg03, #2
2f3a0     32 97 02 F1 | 	add	arg03, objptr
2f3a4     4B AB 0A FB | 	rdlong	local03, arg03 wz
2f3a8     0C 7A 06 A6 |  if_e	mov	result1, #12
2f3ac     E8 04 90 AD |  if_e	jmp	#LR__5059
2f3b0     4A AB 62 FC | 	wrlong	local03, arg02
2f3b4     53 A7 E2 F8 | 	getbyte	local01, local01, #0
2f3b8     FE A6 06 F5 | 	and	local01, #254
2f3bc     55 97 CA FA | 	rdbyte	arg03, local03 wz
2f3c0     44 00 90 AD |  if_e	jmp	#LR__5051
2f3c4     01 00 00 FF 
2f3c8     10 64 06 F1 | 	add	objptr, ##528
2f3cc     32 93 0A FB | 	rdlong	arg01, objptr wz
2f3d0     01 00 00 FF 
2f3d4     10 64 86 F1 | 	sub	objptr, ##528
2f3d8                 | '         return RES_NOTRDY;
2f3d8     03 7A 06 A6 |  if_e	mov	result1, #3
2f3dc                 | '     }
2f3dc                 | '     return RES_OK;
2f3dc     00 7A 06 56 |  if_ne	mov	result1, #0
2f3e0     3D 97 E2 F8 | 	getbyte	arg03, result1, #0
2f3e4     01 96 CE F7 | 	test	arg03, #1 wz
2f3e8     1C 00 90 5D |  if_ne	jmp	#LR__5050
2f3ec     00 A6 0E F2 | 	cmp	local01, #0 wz
2f3f0     3D 7B E2 58 |  if_ne	getbyte	result1, result1, #0
2f3f4     04 7A CE 57 |  if_ne	test	result1, #4 wz
2f3f8                 | ' 				return FR_WRITE_PROTECTED;
2f3f8     0A 7A 06 56 |  if_ne	mov	result1, #10
2f3fc     98 04 90 5D |  if_ne	jmp	#LR__5059
2f400                 | ' 			}
2f400                 | ' 			return FR_OK;
2f400     00 7A 06 F6 | 	mov	result1, #0
2f404     90 04 90 FD | 	jmp	#LR__5059
2f408                 | LR__5050
2f408                 | LR__5051
2f408     55 01 48 FC | 	wrbyte	#0, local03
2f40c     01 AA 06 F1 | 	add	local03, #1
2f410     55 A9 42 FC | 	wrbyte	local02, local03
2f414     01 AA 86 F1 | 	sub	local03, #1
2f418     01 00 00 FF 
2f41c     10 64 06 F1 | 	add	objptr, ##528
2f420     32 A9 0A FB | 	rdlong	local02, objptr wz
2f424     01 00 00 FF 
2f428     10 64 86 F1 | 	sub	objptr, ##528
2f42c                 | ' 
2f42c                 | '         return RES_NOTRDY;
2f42c     03 7A 06 A6 |  if_e	mov	result1, #3
2f430                 | '     }
2f430                 | '     return RES_OK;
2f430     00 7A 06 56 |  if_ne	mov	result1, #0
2f434     3D 97 02 F6 | 	mov	arg03, result1
2f438     4B AD E2 F8 | 	getbyte	local04, arg03, #0
2f43c     01 AC CE F7 | 	test	local04, #1 wz
2f440                 | ' 		return FR_NOT_READY;
2f440     03 7A 06 56 |  if_ne	mov	result1, #3
2f444     50 04 90 5D |  if_ne	jmp	#LR__5059
2f448     00 A6 0E F2 | 	cmp	local01, #0 wz
2f44c     4B AD 02 56 |  if_ne	mov	local04, arg03
2f450     56 AD E2 58 |  if_ne	getbyte	local04, local04, #0
2f454     04 AC CE 57 |  if_ne	test	local04, #4 wz
2f458                 | ' 		return FR_WRITE_PROTECTED;
2f458     0A 7A 06 56 |  if_ne	mov	result1, #10
2f45c     38 04 90 5D |  if_ne	jmp	#LR__5059
2f460     55 93 02 F6 | 	mov	arg01, local03
2f464     00 94 06 F6 | 	mov	arg02, #0
2f468     00 FE BF FD | 	call	#_fatfs_cc_find_volume
2f46c     3D 93 02 F6 | 	mov	arg01, result1
2f470     04 92 0E F2 | 	cmp	arg01, #4 wz
2f474     01 7A 06 A6 |  if_e	mov	result1, #1
2f478     1C 04 90 AD |  if_e	jmp	#LR__5059
2f47c     02 92 16 F2 | 	cmp	arg01, #2 wc
2f480     0D 7A 06 36 |  if_ae	mov	result1, #13
2f484     10 04 90 3D |  if_ae	jmp	#LR__5059
2f488     30 AA 06 F1 | 	add	local03, #48
2f48c     55 AF 02 FB | 	rdlong	local05, local03
2f490     04 AA 06 F1 | 	add	local03, #4
2f494     55 93 02 F6 | 	mov	arg01, local03
2f498     34 AA 86 F1 | 	sub	local03, #52
2f49c     0B 92 06 F1 | 	add	arg01, #11
2f4a0                 | ' {
2f4a0                 | ' 
2f4a0                 | ' 	return *((WORD*)ptr);
2f4a0     49 7B E2 FA | 	rdword	result1, arg01
2f4a4     01 00 00 FF 
2f4a8     00 7A 0E F2 | 	cmp	result1, ##512 wz
2f4ac     0D 7A 06 56 |  if_ne	mov	result1, #13
2f4b0     E4 03 90 5D |  if_ne	jmp	#LR__5059
2f4b4     55 93 02 F6 | 	mov	arg01, local03
2f4b8     4A 92 06 F1 | 	add	arg01, #74
2f4bc                 | ' {
2f4bc                 | ' 
2f4bc                 | ' 	return *((WORD*)ptr);
2f4bc     49 7B E2 FA | 	rdword	result1, arg01
2f4c0     3D B1 0A F6 | 	mov	local06, result1 wz
2f4c4     55 93 02 A6 |  if_e	mov	arg01, local03
2f4c8     58 92 06 A1 |  if_e	add	arg01, #88
2f4cc                 | ' {
2f4cc                 | ' 
2f4cc                 | ' 	return *((DWORD*)ptr);
2f4cc     49 7B 02 AB |  if_e	rdlong	result1, arg01
2f4d0     3D B1 02 A6 |  if_e	mov	local06, result1
2f4d4     1C AA 06 F1 | 	add	local03, #28
2f4d8     55 B1 62 FC | 	wrlong	local06, local03
2f4dc     28 AA 06 F1 | 	add	local03, #40
2f4e0     55 AD C2 FA | 	rdbyte	local04, local03
2f4e4     42 AA 86 F1 | 	sub	local03, #66
2f4e8     55 AD 42 FC | 	wrbyte	local04, local03
2f4ec     56 AD E2 F8 | 	getbyte	local04, local04, #0
2f4f0     02 AA 86 F1 | 	sub	local03, #2
2f4f4     01 AC 0E F2 | 	cmp	local04, #1 wz
2f4f8     02 AA 06 51 |  if_ne	add	local03, #2
2f4fc     55 AD C2 5A |  if_ne	rdbyte	local04, local03
2f500     02 AA 86 51 |  if_ne	sub	local03, #2
2f504     02 AC 0E 52 |  if_ne	cmp	local04, #2 wz
2f508     0D 7A 06 56 |  if_ne	mov	result1, #13
2f50c     88 03 90 5D |  if_ne	jmp	#LR__5059
2f510     02 AA 06 F1 | 	add	local03, #2
2f514     55 AD C2 FA | 	rdbyte	local04, local03
2f518     56 B1 02 FD | 	qmul	local06, local04
2f51c     3F AA 06 F1 | 	add	local03, #63
2f520     55 AD C2 FA | 	rdbyte	local04, local03
2f524     37 AA 86 F1 | 	sub	local03, #55
2f528     55 AD 52 FC | 	wrword	local04, local03
2f52c     56 AD 32 F9 | 	getword	local04, local04, #0
2f530     0A AA 86 F1 | 	sub	local03, #10
2f534     0F AC 4E F7 | 	zerox	local04, #15 wz
2f538     18 B0 62 FD | 	getqx	local06
2f53c     20 00 90 AD |  if_e	jmp	#LR__5052
2f540     0A AA 06 F1 | 	add	local03, #10
2f544     55 AD E2 FA | 	rdword	local04, local03
2f548     56 A9 32 F9 | 	getword	local02, local04, #0
2f54c     0A AA 86 F1 | 	sub	local03, #10
2f550     56 AD 32 F9 | 	getword	local04, local04, #0
2f554     01 AC 86 F1 | 	sub	local04, #1
2f558     56 A9 CA F7 | 	test	local02, local04 wz
2f55c     08 00 90 AD |  if_e	jmp	#LR__5053
2f560                 | LR__5052
2f560     0D 7A 06 F6 | 	mov	result1, #13
2f564     30 03 90 FD | 	jmp	#LR__5059
2f568                 | LR__5053
2f568     34 AA 06 F1 | 	add	local03, #52
2f56c     55 93 02 F6 | 	mov	arg01, local03
2f570     11 92 06 F1 | 	add	arg01, #17
2f574                 | ' {
2f574                 | ' 
2f574                 | ' 	return *((WORD*)ptr);
2f574     49 7B E2 FA | 	rdword	result1, arg01
2f578     2C AA 86 F1 | 	sub	local03, #44
2f57c     55 7B 52 FC | 	wrword	result1, local03
2f580     3D AD 32 F9 | 	getword	local04, result1, #0
2f584     08 AA 86 F1 | 	sub	local03, #8
2f588     56 93 52 F6 | 	abs	arg01, local04 wc
2f58c     49 93 42 F8 | 	getnib	arg01, arg01, #0
2f590     49 93 8A F6 | 	negc	arg01, arg01 wz
2f594     0D 7A 06 56 |  if_ne	mov	result1, #13
2f598     FC 02 90 5D |  if_ne	jmp	#LR__5059
2f59c     55 93 02 F6 | 	mov	arg01, local03
2f5a0     47 92 06 F1 | 	add	arg01, #71
2f5a4                 | ' {
2f5a4                 | ' 
2f5a4                 | ' 	return *((WORD*)ptr);
2f5a4     49 7B E2 FA | 	rdword	result1, arg01
2f5a8     3D B3 0A F6 | 	mov	local07, result1 wz
2f5ac     55 93 02 A6 |  if_e	mov	arg01, local03
2f5b0     54 92 06 A1 |  if_e	add	arg01, #84
2f5b4                 | ' {
2f5b4                 | ' 
2f5b4                 | ' 	return *((DWORD*)ptr);
2f5b4     49 B3 02 AB |  if_e	rdlong	local07, arg01
2f5b8     55 93 02 F6 | 	mov	arg01, local03
2f5bc     42 92 06 F1 | 	add	arg01, #66
2f5c0                 | ' {
2f5c0                 | ' 
2f5c0                 | ' 	return *((WORD*)ptr);
2f5c0     49 7B E2 FA | 	rdword	result1, arg01
2f5c4     3D 93 02 F6 | 	mov	arg01, result1
2f5c8     49 AD 02 F6 | 	mov	local04, arg01
2f5cc     0F AC 4E F7 | 	zerox	local04, #15 wz
2f5d0     0D 7A 06 A6 |  if_e	mov	result1, #13
2f5d4     C0 02 90 AD |  if_e	jmp	#LR__5059
2f5d8     49 B5 32 F9 | 	getword	local08, arg01, #0
2f5dc     58 B5 02 F1 | 	add	local08, local06
2f5e0     08 AA 06 F1 | 	add	local03, #8
2f5e4     55 AD E2 FA | 	rdword	local04, local03
2f5e8     08 AA 86 F1 | 	sub	local03, #8
2f5ec     56 AD 52 F6 | 	abs	local04, local04 wc
2f5f0     04 AC 46 F0 | 	shr	local04, #4
2f5f4     56 B5 82 F3 | 	sumc	local08, local04
2f5f8     5A B3 12 F2 | 	cmp	local07, local08 wc
2f5fc     0D 7A 06 C6 |  if_b	mov	result1, #13
2f600     94 02 90 CD |  if_b	jmp	#LR__5059
2f604     5A B3 82 F1 | 	sub	local07, local08
2f608     0A AA 06 F1 | 	add	local03, #10
2f60c     55 AD E2 FA | 	rdword	local04, local03
2f610     56 B3 12 FD | 	qdiv	local07, local04
2f614     0A AA 86 F1 | 	sub	local03, #10
2f618     18 AC 62 FD | 	getqx	local04
2f61c     00 AC 0E F2 | 	cmp	local04, #0 wz
2f620     0D 7A 06 A6 |  if_e	mov	result1, #13
2f624     70 02 90 AD |  if_e	jmp	#LR__5059
2f628     00 B6 06 F6 | 	mov	local09, #0
2f62c     FF FF 07 FF 
2f630     F6 AD 16 F2 | 	cmp	local04, ##268435446 wc
2f634     03 B6 06 C6 |  if_b	mov	local09, #3
2f638     7F 00 00 FF 
2f63c     F6 AD 16 F2 | 	cmp	local04, ##65526 wc
2f640     02 B6 06 C6 |  if_b	mov	local09, #2
2f644     07 00 00 FF 
2f648     F6 AD 16 F2 | 	cmp	local04, ##4086 wc
2f64c     01 B6 06 C6 |  if_b	mov	local09, #1
2f650     00 B6 0E F2 | 	cmp	local09, #0 wz
2f654     0D 7A 06 A6 |  if_e	mov	result1, #13
2f658     3C 02 90 AD |  if_e	jmp	#LR__5059
2f65c     02 AC 06 F1 | 	add	local04, #2
2f660     18 AA 06 F1 | 	add	local03, #24
2f664     55 AD 62 FC | 	wrlong	local04, local03
2f668     08 AA 06 F1 | 	add	local03, #8
2f66c     55 AF 62 FC | 	wrlong	local05, local03
2f670     57 AD 02 F6 | 	mov	local04, local05
2f674     49 93 32 F9 | 	getword	arg01, arg01, #0
2f678     49 AD 02 F1 | 	add	local04, arg01
2f67c     04 AA 06 F1 | 	add	local03, #4
2f680     55 AD 62 FC | 	wrlong	local04, local03
2f684     57 AD 02 F6 | 	mov	local04, local05
2f688     5A AD 02 F1 | 	add	local04, local08
2f68c     08 AA 06 F1 | 	add	local03, #8
2f690     55 AD 62 FC | 	wrlong	local04, local03
2f694     2C AA 86 F1 | 	sub	local03, #44
2f698     03 B6 0E F2 | 	cmp	local09, #3 wz
2f69c     54 00 90 5D |  if_ne	jmp	#LR__5054
2f6a0     55 93 02 F6 | 	mov	arg01, local03
2f6a4     5E 92 06 F1 | 	add	arg01, #94
2f6a8                 | ' {
2f6a8                 | ' 
2f6a8                 | ' 	return *((WORD*)ptr);
2f6a8     49 7B EA FA | 	rdword	result1, arg01 wz
2f6ac     0D 7A 06 56 |  if_ne	mov	result1, #13
2f6b0     E4 01 90 5D |  if_ne	jmp	#LR__5059
2f6b4     08 AA 06 F1 | 	add	local03, #8
2f6b8     55 AD EA FA | 	rdword	local04, local03 wz
2f6bc     08 AA 86 F1 | 	sub	local03, #8
2f6c0     0D 7A 06 56 |  if_ne	mov	result1, #13
2f6c4     D0 01 90 5D |  if_ne	jmp	#LR__5059
2f6c8     34 AA 06 F1 | 	add	local03, #52
2f6cc     55 93 02 F6 | 	mov	arg01, local03
2f6d0     2C 92 06 F1 | 	add	arg01, #44
2f6d4                 | ' {
2f6d4                 | ' 
2f6d4                 | ' 	return *((DWORD*)ptr);
2f6d4     49 7B 02 FB | 	rdlong	result1, arg01
2f6d8     0C AA 86 F1 | 	sub	local03, #12
2f6dc     55 7B 62 FC | 	wrlong	result1, local03
2f6e0     10 AA 86 F1 | 	sub	local03, #16
2f6e4     55 B9 02 FB | 	rdlong	local10, local03
2f6e8     18 AA 86 F1 | 	sub	local03, #24
2f6ec     02 B8 66 F0 | 	shl	local10, #2
2f6f0     6C 00 90 FD | 	jmp	#LR__5056
2f6f4                 | LR__5054
2f6f4     08 AA 06 F1 | 	add	local03, #8
2f6f8     55 AD EA FA | 	rdword	local04, local03 wz
2f6fc     08 AA 86 F1 | 	sub	local03, #8
2f700     0D 7A 06 A6 |  if_e	mov	result1, #13
2f704     90 01 90 AD |  if_e	jmp	#LR__5059
2f708     24 AA 06 F1 | 	add	local03, #36
2f70c     55 AD 02 FB | 	rdlong	local04, local03
2f710     58 AD 02 F1 | 	add	local04, local06
2f714     04 AA 06 F1 | 	add	local03, #4
2f718     55 AD 62 FC | 	wrlong	local04, local03
2f71c     28 AA 86 F1 | 	sub	local03, #40
2f720     02 B6 0E F2 | 	cmp	local09, #2 wz
2f724     18 AA 06 A1 |  if_e	add	local03, #24
2f728     55 AD 02 AB |  if_e	rdlong	local04, local03
2f72c     18 AA 86 A1 |  if_e	sub	local03, #24
2f730     01 AC 66 A0 |  if_e	shl	local04, #1
2f734     24 00 90 AD |  if_e	jmp	#LR__5055
2f738     18 AA 06 F1 | 	add	local03, #24
2f73c     55 B9 02 FB | 	rdlong	local10, local03
2f740     5C AD 02 F6 | 	mov	local04, local10
2f744     01 AC 66 F0 | 	shl	local04, #1
2f748     5C AD 02 F1 | 	add	local04, local10
2f74c     01 AC 46 F0 | 	shr	local04, #1
2f750     18 AA 86 F1 | 	sub	local03, #24
2f754     01 B8 06 F5 | 	and	local10, #1
2f758     5C AD 02 F1 | 	add	local04, local10
2f75c                 | LR__5055
2f75c     56 B9 02 F6 | 	mov	local10, local04
2f760                 | LR__5056
2f760     FF B9 06 F1 | 	add	local10, #511
2f764     09 B8 46 F0 | 	shr	local10, #9
2f768     1C AA 06 F1 | 	add	local03, #28
2f76c     55 97 02 FB | 	rdlong	arg03, local03
2f770     1C AA 86 F1 | 	sub	local03, #28
2f774     5C 97 12 F2 | 	cmp	arg03, local10 wc
2f778     0D 7A 06 C6 |  if_b	mov	result1, #13
2f77c     18 01 90 CD |  if_b	jmp	#LR__5059
2f780     14 AA 06 F1 | 	add	local03, #20
2f784     FF FF FF FF 
2f788     55 FF 6B FC | 	wrlong	##-1, local03
2f78c     04 AA 86 F1 | 	sub	local03, #4
2f790     FF FF FF FF 
2f794     55 FF 6B FC | 	wrlong	##-1, local03
2f798     0C AA 86 F1 | 	sub	local03, #12
2f79c     55 01 49 FC | 	wrbyte	#128, local03
2f7a0     04 AA 86 F1 | 	sub	local03, #4
2f7a4     03 B6 0E F2 | 	cmp	local09, #3 wz
2f7a8     55 93 02 A6 |  if_e	mov	arg01, local03
2f7ac     64 92 06 A1 |  if_e	add	arg01, #100
2f7b0                 | ' {
2f7b0                 | ' 
2f7b0                 | ' 	return *((WORD*)ptr);
2f7b0     49 7B E2 AA |  if_e	rdword	result1, arg01
2f7b4     3D AD 32 A9 |  if_e	getword	local04, result1, #0
2f7b8     01 AC 0E A2 |  if_e	cmp	local04, #1 wz
2f7bc     A4 00 90 5D |  if_ne	jmp	#LR__5058
2f7c0     01 AE 06 F1 | 	add	local05, #1
2f7c4     55 93 02 F6 | 	mov	arg01, local03
2f7c8     57 95 02 F6 | 	mov	arg02, local05
2f7cc     E8 D4 BF FD | 	call	#_fatfs_cc_move_window
2f7d0     00 7A 0E F2 | 	cmp	result1, #0 wz
2f7d4     8C 00 90 5D |  if_ne	jmp	#LR__5058
2f7d8     04 AA 06 F1 | 	add	local03, #4
2f7dc     55 01 48 FC | 	wrbyte	#0, local03
2f7e0     30 AA 06 F1 | 	add	local03, #48
2f7e4     55 93 02 F6 | 	mov	arg01, local03
2f7e8     34 AA 86 F1 | 	sub	local03, #52
2f7ec     FE 93 06 F1 | 	add	arg01, #510
2f7f0                 | ' {
2f7f0                 | ' 
2f7f0                 | ' 	return *((WORD*)ptr);
2f7f0     49 7B E2 FA | 	rdword	result1, arg01
2f7f4     3D AD 32 F9 | 	getword	local04, result1, #0
2f7f8     55 00 00 FF 
2f7fc     55 AC 0E F2 | 	cmp	local04, ##43605 wz
2f800     55 93 02 A6 |  if_e	mov	arg01, local03
2f804     34 92 06 A1 |  if_e	add	arg01, #52
2f808                 | ' {
2f808                 | ' 
2f808                 | ' 	return *((DWORD*)ptr);
2f808     49 7B 02 AB |  if_e	rdlong	result1, arg01
2f80c     A9 B0 20 AF 
2f810     52 7A 0E A2 |  if_e	cmp	result1, ##1096897106 wz
2f814     55 93 02 A6 |  if_e	mov	arg01, local03
2f818     01 00 00 AF 
2f81c     18 92 06 A1 |  if_e	add	arg01, ##536
2f820                 | ' {
2f820                 | ' 
2f820                 | ' 	return *((DWORD*)ptr);
2f820     49 7B 02 AB |  if_e	rdlong	result1, arg01
2f824     B9 A0 30 AF 
2f828     72 7A 0E A2 |  if_e	cmp	result1, ##1631679090 wz
2f82c     34 00 90 5D |  if_ne	jmp	#LR__5057
2f830     34 AA 06 F1 | 	add	local03, #52
2f834     55 93 02 F6 | 	mov	arg01, local03
2f838     E8 93 06 F1 | 	add	arg01, #488
2f83c                 | ' {
2f83c                 | ' 
2f83c                 | ' 	return *((DWORD*)ptr);
2f83c     49 7B 02 FB | 	rdlong	result1, arg01
2f840     20 AA 86 F1 | 	sub	local03, #32
2f844     55 7B 62 FC | 	wrlong	result1, local03
2f848     20 AA 06 F1 | 	add	local03, #32
2f84c     55 93 02 F6 | 	mov	arg01, local03
2f850     EC 93 06 F1 | 	add	arg01, #492
2f854                 | ' {
2f854                 | ' 
2f854                 | ' 	return *((DWORD*)ptr);
2f854     49 7B 02 FB | 	rdlong	result1, arg01
2f858     24 AA 86 F1 | 	sub	local03, #36
2f85c     55 7B 62 FC | 	wrlong	result1, local03
2f860     10 AA 86 F1 | 	sub	local03, #16
2f864                 | LR__5057
2f864                 | LR__5058
2f864     55 B7 42 FC | 	wrbyte	local09, local03
2f868     04 64 06 F1 | 	add	objptr, #4
2f86c     32 AD E2 FA | 	rdword	local04, objptr
2f870     01 AC 06 F1 | 	add	local04, #1
2f874     32 AD 52 FC | 	wrword	local04, objptr
2f878     56 B9 32 F9 | 	getword	local10, local04, #0
2f87c     06 AA 06 F1 | 	add	local03, #6
2f880     55 B9 52 FC | 	wrword	local10, local03
2f884     04 64 06 F1 | 	add	objptr, #4
2f888     06 AA 06 F1 | 	add	local03, #6
2f88c     55 65 62 FC | 	wrlong	objptr, local03
2f890                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
2f890                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
2f890                 | ' 			{
2f890                 | ' 
2f890                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
2f890                 | ' 
2f890                 | ' 
2f890                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
2f890                 | ' 
2f890                 | ' 			}
2f890                 | ' 		}
2f890                 | ' 
2f890                 | ' 
2f890                 | ' 	}
2f890                 | ' 
2f890                 | ' 	fs->fs_type = (BYTE)fmt;
2f890                 | ' 	fs->id = ++Fsid;
2f890                 | ' 
2f890                 | ' 	fs->lfnbuf = LfnBuf;
2f890                 | ' #line 3567 "ff.c"
2f890                 | ' 	return FR_OK;
2f890     00 7A 06 F6 | 	mov	result1, #0
2f894     08 64 86 F1 | 	sub	objptr, #8
2f898                 | LR__5059
2f898     E7 F0 03 F6 | 	mov	ptra, fp
2f89c     F2 00 A0 FD | 	call	#popregs_
2f8a0                 | _fatfs_cc_mount_volume_ret
2f8a0     2D 00 64 FD | 	ret
2f8a4                 | 
2f8a4                 | _fatfs_cc_validate
2f8a4     49 81 0A F6 | 	mov	_var01, arg01 wz
2f8a8     09 82 06 F6 | 	mov	_var02, #9
2f8ac     40 85 0A 5B |  if_ne	rdlong	_var03, _var01 wz
2f8b0     42 87 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
2f8b4     48 00 90 AD |  if_e	jmp	#LR__5060
2f8b8     04 80 06 F1 | 	add	_var01, #4
2f8bc     40 87 E2 FA | 	rdword	_var04, _var01
2f8c0     04 80 86 F1 | 	sub	_var01, #4
2f8c4     40 93 02 FB | 	rdlong	arg01, _var01
2f8c8     06 92 06 F1 | 	add	arg01, #6
2f8cc     49 7B E2 FA | 	rdword	result1, arg01
2f8d0     3D 87 0A F2 | 	cmp	_var04, result1 wz
2f8d4     28 00 90 5D |  if_ne	jmp	#LR__5060
2f8d8     01 00 00 FF 
2f8dc     10 64 06 F1 | 	add	objptr, ##528
2f8e0     32 87 0A FB | 	rdlong	_var04, objptr wz
2f8e4     01 00 00 FF 
2f8e8     10 64 86 F1 | 	sub	objptr, ##528
2f8ec                 | '         return RES_NOTRDY;
2f8ec     03 7A 06 A6 |  if_e	mov	result1, #3
2f8f0                 | '     }
2f8f0                 | '     return RES_OK;
2f8f0     00 7A 06 56 |  if_ne	mov	result1, #0
2f8f4     3D 85 E2 F8 | 	getbyte	_var03, result1, #0
2f8f8     01 84 CE F7 | 	test	_var03, #1 wz
2f8fc     00 82 06 A6 |  if_e	mov	_var02, #0
2f900                 | LR__5060
2f900     00 82 0E F2 | 	cmp	_var02, #0 wz
2f904     40 85 02 AB |  if_e	rdlong	_var03, _var01
2f908     00 84 06 56 |  if_ne	mov	_var03, #0
2f90c     4A 85 62 FC | 	wrlong	_var03, arg02
2f910                 | ' 			res = FR_OK;
2f910                 | ' 		}
2f910                 | ' 
2f910                 | ' 	}
2f910                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
2f910                 | ' 	return res;
2f910     41 7B 02 F6 | 	mov	result1, _var02
2f914                 | _fatfs_cc_validate_ret
2f914     2D 00 64 FD | 	ret
2f918                 | 
2f918                 | _fatfs_cc_f_mount
2f918     04 CA 05 F6 | 	mov	COUNT_, #4
2f91c     E8 00 A0 FD | 	call	#pushregs_
2f920     20 F0 07 F1 | 	add	ptra, #32
2f924     04 CE 05 F1 | 	add	fp, #4
2f928     E7 92 62 FC | 	wrlong	arg01, fp
2f92c     04 CE 05 F1 | 	add	fp, #4
2f930     E7 94 62 FC | 	wrlong	arg02, fp
2f934     4B A7 02 F6 | 	mov	local01, arg03
2f938     14 CE 05 F1 | 	add	fp, #20
2f93c     E7 94 62 FC | 	wrlong	arg02, fp
2f940     E7 92 02 F6 | 	mov	arg01, fp
2f944     1C CE 85 F1 | 	sub	fp, #28
2f948     EC F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
2f94c     3D A9 02 F6 | 	mov	local02, result1
2f950     00 A8 56 F2 | 	cmps	local02, #0 wc
2f954     0B 7A 06 C6 |  if_b	mov	result1, #11
2f958     84 00 90 CD |  if_b	jmp	#LR__5071
2f95c     54 97 02 F6 | 	mov	arg03, local02
2f960     02 96 66 F0 | 	shl	arg03, #2
2f964     32 97 02 F1 | 	add	arg03, objptr
2f968     4B AB 0A FB | 	rdlong	local03, arg03 wz
2f96c     14 00 90 AD |  if_e	jmp	#LR__5070
2f970     01 AA 06 F1 | 	add	local03, #1
2f974     55 93 C2 FA | 	rdbyte	arg01, local03
2f978     01 AA 86 F1 | 	sub	local03, #1
2f97c     F8 2B B0 FD | 	call	#_fatfs_cc_disk_deinitialize
2f980     55 01 48 FC | 	wrbyte	#0, local03
2f984                 | LR__5070
2f984     04 CE 05 F1 | 	add	fp, #4
2f988     E7 AC 0A FB | 	rdlong	local04, fp wz
2f98c     04 CE 85 F1 | 	sub	fp, #4
2f990     04 CE 05 51 |  if_ne	add	fp, #4
2f994     E7 AC 02 5B |  if_ne	rdlong	local04, fp
2f998     04 CE 85 51 |  if_ne	sub	fp, #4
2f99c     56 01 48 5C |  if_ne	wrbyte	#0, local04
2f9a0     02 A8 66 F0 | 	shl	local02, #2
2f9a4     32 A9 02 F1 | 	add	local02, objptr
2f9a8     04 CE 05 F1 | 	add	fp, #4
2f9ac     E7 AC 02 FB | 	rdlong	local04, fp
2f9b0     04 CE 85 F1 | 	sub	fp, #4
2f9b4     54 AD 62 FC | 	wrlong	local04, local02
2f9b8     07 A6 4E F7 | 	zerox	local01, #7 wz
2f9bc     00 7A 06 A6 |  if_e	mov	result1, #0
2f9c0     1C 00 90 AD |  if_e	jmp	#LR__5071
2f9c4     08 CE 05 F1 | 	add	fp, #8
2f9c8     E7 92 02 F6 | 	mov	arg01, fp
2f9cc     04 CE 85 F1 | 	sub	fp, #4
2f9d0     E7 94 02 F6 | 	mov	arg02, fp
2f9d4     04 CE 85 F1 | 	sub	fp, #4
2f9d8     00 96 06 F6 | 	mov	arg03, #0
2f9dc     94 F9 BF FD | 	call	#_fatfs_cc_mount_volume
2f9e0                 | ' 
2f9e0                 | ' 	res = mount_volume(&path, &fs, 0);
2f9e0                 | ' 	return res ;
2f9e0                 | LR__5071
2f9e0     E7 F0 03 F6 | 	mov	ptra, fp
2f9e4     F2 00 A0 FD | 	call	#popregs_
2f9e8                 | _fatfs_cc_f_mount_ret
2f9e8     2D 00 64 FD | 	ret
2f9ec                 | 
2f9ec                 | _fatfs_cc_f_open
2f9ec     08 CA 05 F6 | 	mov	COUNT_, #8
2f9f0     E8 00 A0 FD | 	call	#pushregs_
2f9f4     60 F0 07 F1 | 	add	ptra, #96
2f9f8     49 A7 0A F6 | 	mov	local01, arg01 wz
2f9fc     08 CE 05 F1 | 	add	fp, #8
2fa00     E7 94 62 FC | 	wrlong	arg02, fp
2fa04     08 CE 85 F1 | 	sub	fp, #8
2fa08     4B A9 02 F6 | 	mov	local02, arg03
2fa0c     09 7A 06 A6 |  if_e	mov	result1, #9
2fa10     24 04 90 AD |  if_e	jmp	#LR__5097
2fa14     54 A9 E2 F8 | 	getbyte	local02, local02, #0
2fa18     3F A8 06 F5 | 	and	local02, #63
2fa1c     08 CE 05 F1 | 	add	fp, #8
2fa20     E7 92 02 F6 | 	mov	arg01, fp
2fa24     3C CE 05 F1 | 	add	fp, #60
2fa28     E7 94 02 F6 | 	mov	arg02, fp
2fa2c     44 CE 85 F1 | 	sub	fp, #68
2fa30     54 97 02 F6 | 	mov	arg03, local02
2fa34     3C F9 BF FD | 	call	#_fatfs_cc_mount_volume
2fa38     3D AB 0A F6 | 	mov	local03, result1 wz
2fa3c     EC 03 90 5D |  if_ne	jmp	#LR__5096
2fa40     44 CE 05 F1 | 	add	fp, #68
2fa44     E7 AA 02 FB | 	rdlong	local03, fp
2fa48     30 CE 85 F1 | 	sub	fp, #48
2fa4c     E7 AA 62 FC | 	wrlong	local03, fp
2fa50     E7 92 02 F6 | 	mov	arg01, fp
2fa54     0C CE 85 F1 | 	sub	fp, #12
2fa58     E7 AC 02 FB | 	rdlong	local04, fp
2fa5c     08 CE 85 F1 | 	sub	fp, #8
2fa60     56 95 02 F6 | 	mov	arg02, local04
2fa64     70 F4 BF FD | 	call	#_fatfs_cc_follow_path
2fa68     3D AB 0A F6 | 	mov	local03, result1 wz
2fa6c     18 00 90 5D |  if_ne	jmp	#LR__5080
2fa70     3F CE 05 F1 | 	add	fp, #63
2fa74     E7 AC C2 FA | 	rdbyte	local04, fp
2fa78     3F CE 85 F1 | 	sub	fp, #63
2fa7c     56 99 E2 F8 | 	getbyte	arg04, local04, #0
2fa80     80 98 CE F7 | 	test	arg04, #128 wz
2fa84     06 AA 06 56 |  if_ne	mov	local03, #6
2fa88                 | LR__5080
2fa88     54 99 E2 F8 | 	getbyte	arg04, local02, #0
2fa8c     1C 98 CE F7 | 	test	arg04, #28 wz
2fa90     5C 01 90 AD |  if_e	jmp	#LR__5085
2fa94     00 AA 0E F2 | 	cmp	local03, #0 wz
2fa98     24 00 90 AD |  if_e	jmp	#LR__5082
2fa9c     04 AA 0E F2 | 	cmp	local03, #4 wz
2faa0     10 00 90 5D |  if_ne	jmp	#LR__5081
2faa4     E7 92 02 F6 | 	mov	arg01, fp
2faa8     14 92 06 F1 | 	add	arg01, #20
2faac     4C E8 BF FD | 	call	#_fatfs_cc_dir_register
2fab0     3D AB 02 F6 | 	mov	local03, result1
2fab4                 | LR__5081
2fab4     54 A9 E2 F8 | 	getbyte	local02, local02, #0
2fab8     08 A8 46 F5 | 	or	local02, #8
2fabc     24 00 90 FD | 	jmp	#LR__5084
2fac0                 | LR__5082
2fac0     1A CE 05 F1 | 	add	fp, #26
2fac4     E7 AC C2 FA | 	rdbyte	local04, fp
2fac8     1A CE 85 F1 | 	sub	fp, #26
2facc     11 AC CE F7 | 	test	local04, #17 wz
2fad0     07 AA 06 56 |  if_ne	mov	local03, #7
2fad4     0C 00 90 5D |  if_ne	jmp	#LR__5083
2fad8     54 AD E2 F8 | 	getbyte	local04, local02, #0
2fadc     04 AC CE F7 | 	test	local04, #4 wz
2fae0     08 AA 06 56 |  if_ne	mov	local03, #8
2fae4                 | LR__5083
2fae4                 | LR__5084
2fae4     00 AA 0E F2 | 	cmp	local03, #0 wz
2fae8     40 01 90 5D |  if_ne	jmp	#LR__5088
2faec     54 AD E2 F8 | 	getbyte	local04, local02, #0
2faf0     08 AC CE F7 | 	test	local04, #8 wz
2faf4     34 01 90 AD |  if_e	jmp	#LR__5088
2faf8     C0 1B B0 FD | 	call	#_fatfs_cc__get_fattime
2fafc     30 CE 05 F1 | 	add	fp, #48
2fb00     E7 92 02 FB | 	rdlong	arg01, fp
2fb04     0E 92 06 F1 | 	add	arg01, #14
2fb08     49 7B 62 FC | 	wrlong	result1, arg01
2fb0c     E7 92 02 FB | 	rdlong	arg01, fp
2fb10     16 92 06 F1 | 	add	arg01, #22
2fb14     49 7B 62 FC | 	wrlong	result1, arg01
2fb18     14 CE 05 F1 | 	add	fp, #20
2fb1c     E7 92 02 FB | 	rdlong	arg01, fp
2fb20     14 CE 85 F1 | 	sub	fp, #20
2fb24     E7 94 02 FB | 	rdlong	arg02, fp
2fb28     30 CE 85 F1 | 	sub	fp, #48
2fb2c     C0 DE BF FD | 	call	#_fatfs_cc_ld_clust
2fb30     3D AD 02 F6 | 	mov	local04, result1
2fb34     30 CE 05 F1 | 	add	fp, #48
2fb38     E7 98 02 FB | 	rdlong	arg04, fp
2fb3c     0B 98 06 F1 | 	add	arg04, #11
2fb40     4C 41 48 FC | 	wrbyte	#32, arg04
2fb44     14 CE 05 F1 | 	add	fp, #20
2fb48     E7 92 02 FB | 	rdlong	arg01, fp
2fb4c     14 CE 85 F1 | 	sub	fp, #20
2fb50     E7 94 02 FB | 	rdlong	arg02, fp
2fb54     30 CE 85 F1 | 	sub	fp, #48
2fb58     00 96 06 F6 | 	mov	arg03, #0
2fb5c     C4 DE BF FD | 	call	#_fatfs_cc_st_clust
2fb60     30 CE 05 F1 | 	add	fp, #48
2fb64     E7 92 02 FB | 	rdlong	arg01, fp
2fb68     1C 92 06 F1 | 	add	arg01, #28
2fb6c     49 01 68 FC | 	wrlong	#0, arg01
2fb70     14 CE 05 F1 | 	add	fp, #20
2fb74     E7 98 02 FB | 	rdlong	arg04, fp
2fb78     44 CE 85 F1 | 	sub	fp, #68
2fb7c     03 98 06 F1 | 	add	arg04, #3
2fb80     4C 03 48 FC | 	wrbyte	#1, arg04
2fb84     00 AC 0E F2 | 	cmp	local04, #0 wz
2fb88     A0 00 90 AD |  if_e	jmp	#LR__5088
2fb8c     44 CE 05 F1 | 	add	fp, #68
2fb90     E7 AA 02 FB | 	rdlong	local03, fp
2fb94     30 AA 06 F1 | 	add	local03, #48
2fb98     55 AF 02 FB | 	rdlong	local05, local03
2fb9c     30 CE 85 F1 | 	sub	fp, #48
2fba0     E7 92 02 F6 | 	mov	arg01, fp
2fba4     14 CE 85 F1 | 	sub	fp, #20
2fba8     56 95 02 F6 | 	mov	arg02, local04
2fbac     00 96 06 F6 | 	mov	arg03, #0
2fbb0     70 D6 BF FD | 	call	#_fatfs_cc_remove_chain
2fbb4     3D AB 0A F6 | 	mov	local03, result1 wz
2fbb8     70 00 90 5D |  if_ne	jmp	#LR__5088
2fbbc     44 CE 05 F1 | 	add	fp, #68
2fbc0     E7 92 02 FB | 	rdlong	arg01, fp
2fbc4     44 CE 85 F1 | 	sub	fp, #68
2fbc8     57 95 02 F6 | 	mov	arg02, local05
2fbcc     E8 D0 BF FD | 	call	#_fatfs_cc_move_window
2fbd0     3D AB 02 F6 | 	mov	local03, result1
2fbd4     44 CE 05 F1 | 	add	fp, #68
2fbd8     E7 AE 02 FB | 	rdlong	local05, fp
2fbdc     44 CE 85 F1 | 	sub	fp, #68
2fbe0     01 AC 86 F1 | 	sub	local04, #1
2fbe4     10 AE 06 F1 | 	add	local05, #16
2fbe8     57 AD 62 FC | 	wrlong	local04, local05
2fbec     3C 00 90 FD | 	jmp	#LR__5088
2fbf0                 | LR__5085
2fbf0     00 AA 0E F2 | 	cmp	local03, #0 wz
2fbf4     34 00 90 5D |  if_ne	jmp	#LR__5087
2fbf8     1A CE 05 F1 | 	add	fp, #26
2fbfc     E7 AE C2 FA | 	rdbyte	local05, fp
2fc00     1A CE 85 F1 | 	sub	fp, #26
2fc04     10 AE CE F7 | 	test	local05, #16 wz
2fc08     04 AA 06 56 |  if_ne	mov	local03, #4
2fc0c     1C 00 90 5D |  if_ne	jmp	#LR__5086
2fc10     54 AF E2 F8 | 	getbyte	local05, local02, #0
2fc14     02 AE CE F7 | 	test	local05, #2 wz
2fc18     1A CE 05 51 |  if_ne	add	fp, #26
2fc1c     E7 AC C2 5A |  if_ne	rdbyte	local04, fp
2fc20     1A CE 85 51 |  if_ne	sub	fp, #26
2fc24     01 AC CE 57 |  if_ne	test	local04, #1 wz
2fc28     07 AA 06 56 |  if_ne	mov	local03, #7
2fc2c                 | LR__5086
2fc2c                 | LR__5087
2fc2c                 | LR__5088
2fc2c     00 AA 0E F2 | 	cmp	local03, #0 wz
2fc30     40 00 90 5D |  if_ne	jmp	#LR__5089
2fc34     54 AF E2 F8 | 	getbyte	local05, local02, #0
2fc38     08 AE CE F7 | 	test	local05, #8 wz
2fc3c     54 A9 E2 58 |  if_ne	getbyte	local02, local02, #0
2fc40     40 A8 46 55 |  if_ne	or	local02, #64
2fc44     44 CE 05 F1 | 	add	fp, #68
2fc48     E7 AE 02 FB | 	rdlong	local05, fp
2fc4c     30 AE 06 F1 | 	add	local05, #48
2fc50     57 AF 02 FB | 	rdlong	local05, local05
2fc54     20 A6 06 F1 | 	add	local01, #32
2fc58     53 AF 62 FC | 	wrlong	local05, local01
2fc5c     14 CE 85 F1 | 	sub	fp, #20
2fc60     E7 AE 02 FB | 	rdlong	local05, fp
2fc64     30 CE 85 F1 | 	sub	fp, #48
2fc68     04 A6 06 F1 | 	add	local01, #4
2fc6c     53 AF 62 FC | 	wrlong	local05, local01
2fc70     24 A6 86 F1 | 	sub	local01, #36
2fc74                 | LR__5089
2fc74     00 AA 0E F2 | 	cmp	local03, #0 wz
2fc78     B0 01 90 5D |  if_ne	jmp	#LR__5095
2fc7c     44 CE 05 F1 | 	add	fp, #68
2fc80     E7 92 02 FB | 	rdlong	arg01, fp
2fc84     14 CE 85 F1 | 	sub	fp, #20
2fc88     E7 94 02 FB | 	rdlong	arg02, fp
2fc8c     30 CE 85 F1 | 	sub	fp, #48
2fc90     5C DD BF FD | 	call	#_fatfs_cc_ld_clust
2fc94     08 A6 06 F1 | 	add	local01, #8
2fc98     53 7B 62 FC | 	wrlong	result1, local01
2fc9c     30 CE 05 F1 | 	add	fp, #48
2fca0     E7 92 02 FB | 	rdlong	arg01, fp
2fca4     1C 92 06 F1 | 	add	arg01, #28
2fca8                 | ' {
2fca8                 | ' 
2fca8                 | ' 	return *((DWORD*)ptr);
2fca8     49 7B 02 FB | 	rdlong	result1, arg01
2fcac     04 A6 06 F1 | 	add	local01, #4
2fcb0     53 7B 62 FC | 	wrlong	result1, local01
2fcb4     0C A6 86 F1 | 	sub	local01, #12
2fcb8     14 CE 05 F1 | 	add	fp, #20
2fcbc     E7 AE 02 FB | 	rdlong	local05, fp
2fcc0     53 AF 62 FC | 	wrlong	local05, local01
2fcc4     E7 AE 02 FB | 	rdlong	local05, fp
2fcc8     44 CE 85 F1 | 	sub	fp, #68
2fccc     06 AE 06 F1 | 	add	local05, #6
2fcd0     57 AD E2 FA | 	rdword	local04, local05
2fcd4     04 A6 06 F1 | 	add	local01, #4
2fcd8     53 AD 52 FC | 	wrword	local04, local01
2fcdc     0C A6 06 F1 | 	add	local01, #12
2fce0     53 A9 42 FC | 	wrbyte	local02, local01
2fce4     01 A6 06 F1 | 	add	local01, #1
2fce8     53 01 48 FC | 	wrbyte	#0, local01
2fcec     0B A6 06 F1 | 	add	local01, #11
2fcf0     53 01 68 FC | 	wrlong	#0, local01
2fcf4     08 A6 86 F1 | 	sub	local01, #8
2fcf8     53 01 68 FC | 	wrlong	#0, local01
2fcfc     14 A6 06 F1 | 	add	local01, #20
2fd00     53 93 02 F6 | 	mov	arg01, local01
2fd04     28 A6 86 F1 | 	sub	local01, #40
2fd08     00 94 06 F6 | 	mov	arg02, #0
2fd0c     09 96 C6 F9 | 	decod	arg03, #9
2fd10     D8 00 A0 FD | 	call	#\builtin_bytefill_
2fd14     54 A9 E2 F8 | 	getbyte	local02, local02, #0
2fd18     20 A8 CE F7 | 	test	local02, #32 wz
2fd1c     0C 01 90 AD |  if_e	jmp	#LR__5094
2fd20     0C A6 06 F1 | 	add	local01, #12
2fd24     53 AD 02 FB | 	rdlong	local04, local01
2fd28     0C A6 86 F1 | 	sub	local01, #12
2fd2c     01 AC 16 F2 | 	cmp	local04, #1 wc
2fd30     F8 00 90 CD |  if_b	jmp	#LR__5094
2fd34     0C A6 06 F1 | 	add	local01, #12
2fd38     53 AD 02 FB | 	rdlong	local04, local01
2fd3c     08 A6 06 F1 | 	add	local01, #8
2fd40     53 AD 62 FC | 	wrlong	local04, local01
2fd44     44 CE 05 F1 | 	add	fp, #68
2fd48     E7 AC 02 FB | 	rdlong	local04, fp
2fd4c     44 CE 85 F1 | 	sub	fp, #68
2fd50     0A AC 06 F1 | 	add	local04, #10
2fd54     56 B1 E2 FA | 	rdword	local06, local04
2fd58     09 B0 66 F0 | 	shl	local06, #9
2fd5c     0C A6 86 F1 | 	sub	local01, #12
2fd60     53 B3 02 FB | 	rdlong	local07, local01
2fd64                 | ' 				fp->fptr = fp->obj.objsize;
2fd64                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
2fd64                 | ' 				clst = fp->obj.sclust;
2fd64                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2fd64     04 A6 06 F1 | 	add	local01, #4
2fd68     53 B5 02 FB | 	rdlong	local08, local01
2fd6c     0C A6 86 F1 | 	sub	local01, #12
2fd70                 | LR__5090
2fd70     00 AA 0E F2 | 	cmp	local03, #0 wz
2fd74     34 00 90 5D |  if_ne	jmp	#LR__5091
2fd78     58 B5 1A F2 | 	cmp	local08, local06 wcz
2fd7c     2C 00 90 ED |  if_be	jmp	#LR__5091
2fd80     53 93 02 F6 | 	mov	arg01, local01
2fd84     59 95 02 F6 | 	mov	arg02, local07
2fd88     E4 D0 BF FD | 	call	#_fatfs_cc_get_fat
2fd8c     3D B3 02 F6 | 	mov	local07, result1
2fd90     02 B2 16 F2 | 	cmp	local07, #2 wc
2fd94     02 AA 06 C6 |  if_b	mov	local03, #2
2fd98     FF FF 7F FF 
2fd9c     FF B3 0E F2 | 	cmp	local07, ##-1 wz
2fda0     01 AA 06 A6 |  if_e	mov	local03, #1
2fda4     58 B5 82 F1 | 	sub	local08, local06
2fda8     C4 FF 9F FD | 	jmp	#LR__5090
2fdac                 | LR__5091
2fdac     18 A6 06 F1 | 	add	local01, #24
2fdb0     53 B3 62 FC | 	wrlong	local07, local01
2fdb4     18 A6 86 F1 | 	sub	local01, #24
2fdb8     00 AA 0E F2 | 	cmp	local03, #0 wz
2fdbc     6C 00 90 5D |  if_ne	jmp	#LR__5093
2fdc0     FF B5 CE F7 | 	test	local08, #511 wz
2fdc4     64 00 90 AD |  if_e	jmp	#LR__5093
2fdc8     44 CE 05 F1 | 	add	fp, #68
2fdcc     E7 92 02 FB | 	rdlong	arg01, fp
2fdd0     44 CE 85 F1 | 	sub	fp, #68
2fdd4     59 95 02 F6 | 	mov	arg02, local07
2fdd8     54 D0 BF FD | 	call	#_fatfs_cc_clst2sect
2fddc     3D AF 0A F6 | 	mov	local05, result1 wz
2fde0     02 AA 06 A6 |  if_e	mov	local03, #2
2fde4     44 00 90 AD |  if_e	jmp	#LR__5092
2fde8     09 B4 46 F0 | 	shr	local08, #9
2fdec     5A AF 02 F1 | 	add	local05, local08
2fdf0     1C A6 06 F1 | 	add	local01, #28
2fdf4     53 AF 62 FC | 	wrlong	local05, local01
2fdf8     44 CE 05 F1 | 	add	fp, #68
2fdfc     E7 AC 02 FB | 	rdlong	local04, fp
2fe00     44 CE 85 F1 | 	sub	fp, #68
2fe04     01 AC 06 F1 | 	add	local04, #1
2fe08     56 93 C2 FA | 	rdbyte	arg01, local04
2fe0c     53 95 02 F6 | 	mov	arg02, local01
2fe10     0C 94 06 F1 | 	add	arg02, #12
2fe14     57 97 02 F6 | 	mov	arg03, local05
2fe18     1C A6 86 F1 | 	sub	local01, #28
2fe1c     01 98 06 F6 | 	mov	arg04, #1
2fe20     0C C8 BF FD | 	call	#_fatfs_cc_disk_read
2fe24     00 7A 0E F2 | 	cmp	result1, #0 wz
2fe28     01 AA 06 56 |  if_ne	mov	local03, #1
2fe2c                 | LR__5092
2fe2c                 | LR__5093
2fe2c                 | LR__5094
2fe2c                 | LR__5095
2fe2c                 | LR__5096
2fe2c     00 AA 0E F2 | 	cmp	local03, #0 wz
2fe30     53 01 68 5C |  if_ne	wrlong	#0, local01
2fe34                 | ' 
2fe34                 | ' 	return res ;
2fe34     55 7B 02 F6 | 	mov	result1, local03
2fe38                 | LR__5097
2fe38     E7 F0 03 F6 | 	mov	ptra, fp
2fe3c     F2 00 A0 FD | 	call	#popregs_
2fe40                 | _fatfs_cc_f_open_ret
2fe40     2D 00 64 FD | 	ret
2fe44                 | 
2fe44                 | _fatfs_cc_f_read
2fe44     0E CA 05 F6 | 	mov	COUNT_, #14
2fe48     E8 00 A0 FD | 	call	#pushregs_
2fe4c     38 F0 07 F1 | 	add	ptra, #56
2fe50     49 A7 02 F6 | 	mov	local01, arg01
2fe54     4A A9 02 F6 | 	mov	local02, arg02
2fe58     4B AB 02 F6 | 	mov	local03, arg03
2fe5c     4C AD 02 F6 | 	mov	local04, arg04
2fe60     54 AF 02 F6 | 	mov	local05, local02
2fe64     56 01 68 FC | 	wrlong	#0, local04
2fe68     E7 94 02 F6 | 	mov	arg02, fp
2fe6c     18 94 06 F1 | 	add	arg02, #24
2fe70     53 93 02 F6 | 	mov	arg01, local01
2fe74     2C FA BF FD | 	call	#_fatfs_cc_validate
2fe78     3D B1 0A F6 | 	mov	local06, result1 wz
2fe7c     11 A6 06 A1 |  if_e	add	local01, #17
2fe80     53 B1 C2 AA |  if_e	rdbyte	local06, local01
2fe84     11 A6 86 A1 |  if_e	sub	local01, #17
2fe88     00 B0 4E A2 |  if_e	cmps	local06, #0 wz
2fe8c     58 7B 02 56 |  if_ne	mov	result1, local06
2fe90     3C 03 90 5D |  if_ne	jmp	#LR__5111
2fe94     10 A6 06 F1 | 	add	local01, #16
2fe98     53 B3 C2 FA | 	rdbyte	local07, local01
2fe9c     10 A6 86 F1 | 	sub	local01, #16
2fea0     01 B2 CE F7 | 	test	local07, #1 wz
2fea4     07 7A 06 A6 |  if_e	mov	result1, #7
2fea8     24 03 90 AD |  if_e	jmp	#LR__5111
2feac     0C A6 06 F1 | 	add	local01, #12
2feb0     53 B5 02 FB | 	rdlong	local08, local01
2feb4     08 A6 06 F1 | 	add	local01, #8
2feb8     53 B7 02 FB | 	rdlong	local09, local01
2febc     14 A6 86 F1 | 	sub	local01, #20
2fec0     5B B5 82 F1 | 	sub	local08, local09
2fec4     5A AB 3A F3 | 	fle	local03, local08 wcz
2fec8                 | ' 
2fec8                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
2fec8                 | LR__5100
2fec8     01 AA 16 F2 | 	cmp	local03, #1 wc
2fecc     FC 02 90 CD |  if_b	jmp	#LR__5110
2fed0     14 A6 06 F1 | 	add	local01, #20
2fed4     53 B3 02 FB | 	rdlong	local07, local01
2fed8     14 A6 86 F1 | 	sub	local01, #20
2fedc     FF B3 CE F7 | 	test	local07, #511 wz
2fee0     80 02 90 5D |  if_ne	jmp	#LR__5108
2fee4     14 A6 06 F1 | 	add	local01, #20
2fee8     53 B9 02 FB | 	rdlong	local10, local01
2feec     14 A6 86 F1 | 	sub	local01, #20
2fef0     09 B8 46 F0 | 	shr	local10, #9
2fef4     18 CE 05 F1 | 	add	fp, #24
2fef8     E7 B2 02 FB | 	rdlong	local07, fp
2fefc     18 CE 85 F1 | 	sub	fp, #24
2ff00     0A B2 06 F1 | 	add	local07, #10
2ff04     59 B3 E2 FA | 	rdword	local07, local07
2ff08     01 B2 86 F1 | 	sub	local07, #1
2ff0c     59 B9 0A F5 | 	and	local10, local07 wz
2ff10     6C 00 90 5D |  if_ne	jmp	#LR__5102
2ff14     14 A6 06 F1 | 	add	local01, #20
2ff18     53 B3 0A FB | 	rdlong	local07, local01 wz
2ff1c     14 A6 86 F1 | 	sub	local01, #20
2ff20     08 A6 06 A1 |  if_e	add	local01, #8
2ff24     53 BB 02 AB |  if_e	rdlong	local11, local01
2ff28     08 A6 86 A1 |  if_e	sub	local01, #8
2ff2c     18 00 90 AD |  if_e	jmp	#LR__5101
2ff30     53 93 02 F6 | 	mov	arg01, local01
2ff34     18 A6 06 F1 | 	add	local01, #24
2ff38     53 95 02 FB | 	rdlong	arg02, local01
2ff3c     18 A6 86 F1 | 	sub	local01, #24
2ff40     2C CF BF FD | 	call	#_fatfs_cc_get_fat
2ff44     3D BB 02 F6 | 	mov	local11, result1
2ff48                 | LR__5101
2ff48     02 BA 16 F2 | 	cmp	local11, #2 wc
2ff4c     11 A6 06 C1 |  if_b	add	local01, #17
2ff50     53 05 48 CC |  if_b	wrbyte	#2, local01
2ff54     02 7A 06 C6 |  if_b	mov	result1, #2
2ff58     74 02 90 CD |  if_b	jmp	#LR__5111
2ff5c     FF FF 7F FF 
2ff60     FF BB 0E F2 | 	cmp	local11, ##-1 wz
2ff64     11 A6 06 A1 |  if_e	add	local01, #17
2ff68     53 03 48 AC |  if_e	wrbyte	#1, local01
2ff6c     01 7A 06 A6 |  if_e	mov	result1, #1
2ff70     5C 02 90 AD |  if_e	jmp	#LR__5111
2ff74     18 A6 06 F1 | 	add	local01, #24
2ff78     53 BB 62 FC | 	wrlong	local11, local01
2ff7c     18 A6 86 F1 | 	sub	local01, #24
2ff80                 | LR__5102
2ff80     18 CE 05 F1 | 	add	fp, #24
2ff84     E7 92 02 FB | 	rdlong	arg01, fp
2ff88     18 CE 85 F1 | 	sub	fp, #24
2ff8c     18 A6 06 F1 | 	add	local01, #24
2ff90     53 95 02 FB | 	rdlong	arg02, local01
2ff94     18 A6 86 F1 | 	sub	local01, #24
2ff98     94 CE BF FD | 	call	#_fatfs_cc_clst2sect
2ff9c     3D BD 0A F6 | 	mov	local12, result1 wz
2ffa0     11 A6 06 A1 |  if_e	add	local01, #17
2ffa4     53 05 48 AC |  if_e	wrbyte	#2, local01
2ffa8     02 7A 06 A6 |  if_e	mov	result1, #2
2ffac     20 02 90 AD |  if_e	jmp	#LR__5111
2ffb0     5C BD 02 F1 | 	add	local12, local10
2ffb4     55 BF 02 F6 | 	mov	local13, local03
2ffb8     09 BE 46 F0 | 	shr	local13, #9
2ffbc     01 BE 16 F2 | 	cmp	local13, #1 wc
2ffc0     D8 00 90 CD |  if_b	jmp	#LR__5105
2ffc4     5C B3 02 F6 | 	mov	local07, local10
2ffc8     5F B3 02 F1 | 	add	local07, local13
2ffcc     18 CE 05 F1 | 	add	fp, #24
2ffd0     E7 B6 02 FB | 	rdlong	local09, fp
2ffd4     18 CE 85 F1 | 	sub	fp, #24
2ffd8     0A B6 06 F1 | 	add	local09, #10
2ffdc     5B 7B E2 FA | 	rdword	result1, local09
2ffe0     3D B3 1A F2 | 	cmp	local07, result1 wcz
2ffe4     18 00 90 ED |  if_be	jmp	#LR__5103
2ffe8     18 CE 05 F1 | 	add	fp, #24
2ffec     E7 BE 02 FB | 	rdlong	local13, fp
2fff0     18 CE 85 F1 | 	sub	fp, #24
2fff4     0A BE 06 F1 | 	add	local13, #10
2fff8     5F BF E2 FA | 	rdword	local13, local13
2fffc     5C BF 82 F1 | 	sub	local13, local10
30000                 | LR__5103
30000     18 CE 05 F1 | 	add	fp, #24
30004     E7 B2 02 FB | 	rdlong	local07, fp
30008     18 CE 85 F1 | 	sub	fp, #24
3000c     01 B2 06 F1 | 	add	local07, #1
30010     59 93 C2 FA | 	rdbyte	arg01, local07
30014     57 95 02 F6 | 	mov	arg02, local05
30018     5F 99 02 F6 | 	mov	arg04, local13
3001c     5E 97 02 F6 | 	mov	arg03, local12
30020     0C C6 BF FD | 	call	#_fatfs_cc_disk_read
30024     00 7A 0E F2 | 	cmp	result1, #0 wz
30028     11 A6 06 51 |  if_ne	add	local01, #17
3002c     53 03 48 5C |  if_ne	wrbyte	#1, local01
30030     01 7A 06 56 |  if_ne	mov	result1, #1
30034     98 01 90 5D |  if_ne	jmp	#LR__5111
30038     10 A6 06 F1 | 	add	local01, #16
3003c     53 B3 C2 FA | 	rdbyte	local07, local01
30040     10 A6 86 F1 | 	sub	local01, #16
30044     80 B2 CE F7 | 	test	local07, #128 wz
30048     44 00 90 AD |  if_e	jmp	#LR__5104
3004c     1C A6 06 F1 | 	add	local01, #28
30050     53 B7 02 FB | 	rdlong	local09, local01
30054     1C A6 86 F1 | 	sub	local01, #28
30058     5E B7 82 F1 | 	sub	local09, local12
3005c     5F B7 12 F2 | 	cmp	local09, local13 wc
30060     2C 00 90 3D |  if_ae	jmp	#LR__5104
30064     57 93 02 F6 | 	mov	arg01, local05
30068     1C A6 06 F1 | 	add	local01, #28
3006c     53 B9 02 FB | 	rdlong	local10, local01
30070     5E B9 82 F1 | 	sub	local10, local12
30074     09 B8 66 F0 | 	shl	local10, #9
30078     5C 93 02 F1 | 	add	arg01, local10
3007c     0C A6 06 F1 | 	add	local01, #12
30080     53 95 02 F6 | 	mov	arg02, local01
30084     28 A6 86 F1 | 	sub	local01, #40
30088     09 96 C6 F9 | 	decod	arg03, #9
3008c     28 4B BF FD | 	call	#__system____builtin_memmove
30090                 | LR__5104
30090     09 BE 66 F0 | 	shl	local13, #9
30094     5F C1 02 F6 | 	mov	local14, local13
30098                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
30098                 | ' 				}
30098                 | ' 
30098                 | ' 
30098                 | ' 				rcnt =  ((UINT) 512 )  * cc;
30098                 | ' 				continue;
30098     04 01 90 FD | 	jmp	#LR__5109
3009c                 | LR__5105
3009c     1C A6 06 F1 | 	add	local01, #28
300a0     53 B3 02 FB | 	rdlong	local07, local01
300a4     1C A6 86 F1 | 	sub	local01, #28
300a8     5E B3 0A F2 | 	cmp	local07, local12 wz
300ac     A8 00 90 AD |  if_e	jmp	#LR__5107
300b0     10 A6 06 F1 | 	add	local01, #16
300b4     53 B3 C2 FA | 	rdbyte	local07, local01
300b8     10 A6 86 F1 | 	sub	local01, #16
300bc     80 B2 CE F7 | 	test	local07, #128 wz
300c0     58 00 90 AD |  if_e	jmp	#LR__5106
300c4     18 CE 05 F1 | 	add	fp, #24
300c8     E7 C0 02 FB | 	rdlong	local14, fp
300cc     18 CE 85 F1 | 	sub	fp, #24
300d0     01 C0 06 F1 | 	add	local14, #1
300d4     60 93 C2 FA | 	rdbyte	arg01, local14
300d8     28 A6 06 F1 | 	add	local01, #40
300dc     53 95 02 F6 | 	mov	arg02, local01
300e0     0C A6 86 F1 | 	sub	local01, #12
300e4     53 97 02 FB | 	rdlong	arg03, local01
300e8     1C A6 86 F1 | 	sub	local01, #28
300ec     01 98 06 F6 | 	mov	arg04, #1
300f0     78 C6 BF FD | 	call	#_fatfs_cc_disk_write
300f4     00 7A 0E F2 | 	cmp	result1, #0 wz
300f8     11 A6 06 51 |  if_ne	add	local01, #17
300fc     53 03 48 5C |  if_ne	wrbyte	#1, local01
30100     01 7A 06 56 |  if_ne	mov	result1, #1
30104     C8 00 90 5D |  if_ne	jmp	#LR__5111
30108     10 A6 06 F1 | 	add	local01, #16
3010c     53 B3 C2 FA | 	rdbyte	local07, local01
30110     7F B2 06 F5 | 	and	local07, #127
30114     53 B3 42 FC | 	wrbyte	local07, local01
30118     10 A6 86 F1 | 	sub	local01, #16
3011c                 | LR__5106
3011c     18 CE 05 F1 | 	add	fp, #24
30120     E7 C0 02 FB | 	rdlong	local14, fp
30124     18 CE 85 F1 | 	sub	fp, #24
30128     01 C0 06 F1 | 	add	local14, #1
3012c     60 93 C2 FA | 	rdbyte	arg01, local14
30130     53 95 02 F6 | 	mov	arg02, local01
30134     28 94 06 F1 | 	add	arg02, #40
30138     5E 97 02 F6 | 	mov	arg03, local12
3013c     01 98 06 F6 | 	mov	arg04, #1
30140     EC C4 BF FD | 	call	#_fatfs_cc_disk_read
30144     00 7A 0E F2 | 	cmp	result1, #0 wz
30148     11 A6 06 51 |  if_ne	add	local01, #17
3014c     53 03 48 5C |  if_ne	wrbyte	#1, local01
30150     01 7A 06 56 |  if_ne	mov	result1, #1
30154     78 00 90 5D |  if_ne	jmp	#LR__5111
30158                 | LR__5107
30158     1C A6 06 F1 | 	add	local01, #28
3015c     53 BD 62 FC | 	wrlong	local12, local01
30160     1C A6 86 F1 | 	sub	local01, #28
30164                 | LR__5108
30164     14 A6 06 F1 | 	add	local01, #20
30168     53 BF 02 FB | 	rdlong	local13, local01
3016c     FF BF 06 F5 | 	and	local13, #511
30170     09 C0 C6 F9 | 	decod	local14, #9
30174     5F C1 82 F1 | 	sub	local14, local13
30178     55 C1 3A F3 | 	fle	local14, local03 wcz
3017c     53 95 02 F6 | 	mov	arg02, local01
30180     14 94 06 F1 | 	add	arg02, #20
30184     53 BF 02 FB | 	rdlong	local13, local01
30188     14 A6 86 F1 | 	sub	local01, #20
3018c     FF BF 06 F5 | 	and	local13, #511
30190     5F 95 02 F1 | 	add	arg02, local13
30194     57 93 02 F6 | 	mov	arg01, local05
30198     60 97 02 F6 | 	mov	arg03, local14
3019c     18 4A BF FD | 	call	#__system____builtin_memmove
301a0                 | LR__5109
301a0     60 AB 82 F1 | 	sub	local03, local14
301a4     56 B3 02 FB | 	rdlong	local07, local04
301a8     60 B3 02 F1 | 	add	local07, local14
301ac     56 B3 62 FC | 	wrlong	local07, local04
301b0     60 AF 02 F1 | 	add	local05, local14
301b4     14 A6 06 F1 | 	add	local01, #20
301b8     53 B3 02 FB | 	rdlong	local07, local01
301bc     60 B3 02 F1 | 	add	local07, local14
301c0     53 B3 62 FC | 	wrlong	local07, local01
301c4     14 A6 86 F1 | 	sub	local01, #20
301c8     FC FC 9F FD | 	jmp	#LR__5100
301cc                 | LR__5110
301cc                 | ' 
301cc                 | ' 
301cc                 | ' 
301cc                 | ' 
301cc                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
301cc                 | ' 
301cc                 | ' 	}
301cc                 | ' 
301cc                 | ' 	return FR_OK ;
301cc     00 7A 06 F6 | 	mov	result1, #0
301d0                 | LR__5111
301d0     E7 F0 03 F6 | 	mov	ptra, fp
301d4     F2 00 A0 FD | 	call	#popregs_
301d8                 | _fatfs_cc_f_read_ret
301d8     2D 00 64 FD | 	ret
301dc                 | 
301dc                 | _fatfs_cc_f_write
301dc     12 CA 05 F6 | 	mov	COUNT_, #18
301e0     E8 00 A0 FD | 	call	#pushregs_
301e4     34 F0 07 F1 | 	add	ptra, #52
301e8     49 A7 02 F6 | 	mov	local01, arg01
301ec     4A A9 02 F6 | 	mov	local02, arg02
301f0     4B AB 02 F6 | 	mov	local03, arg03
301f4     4C AD 02 F6 | 	mov	local04, arg04
301f8     54 AF 02 F6 | 	mov	local05, local02
301fc     56 01 68 FC | 	wrlong	#0, local04
30200     E7 94 02 F6 | 	mov	arg02, fp
30204     18 94 06 F1 | 	add	arg02, #24
30208     53 93 02 F6 | 	mov	arg01, local01
3020c     94 F6 BF FD | 	call	#_fatfs_cc_validate
30210     3D B1 0A F6 | 	mov	local06, result1 wz
30214     11 A6 06 A1 |  if_e	add	local01, #17
30218     53 B1 C2 AA |  if_e	rdbyte	local06, local01
3021c     11 A6 86 A1 |  if_e	sub	local01, #17
30220     00 B0 4E A2 |  if_e	cmps	local06, #0 wz
30224     58 7B 02 56 |  if_ne	mov	result1, local06
30228     F4 03 90 5D |  if_ne	jmp	#LR__5132
3022c     10 A6 06 F1 | 	add	local01, #16
30230     53 B3 C2 FA | 	rdbyte	local07, local01
30234     10 A6 86 F1 | 	sub	local01, #16
30238     02 B2 CE F7 | 	test	local07, #2 wz
3023c     07 7A 06 A6 |  if_e	mov	result1, #7
30240     DC 03 90 AD |  if_e	jmp	#LR__5132
30244     14 A6 06 F1 | 	add	local01, #20
30248     53 B5 02 FB | 	rdlong	local08, local01
3024c     5A B7 02 F6 | 	mov	local09, local08
30250     55 B7 02 F1 | 	add	local09, local03
30254     14 A6 86 F1 | 	sub	local01, #20
30258     5A B7 12 F2 | 	cmp	local09, local08 wc
3025c     01 AA 66 C6 |  if_b	neg	local03, #1
30260     14 A6 06 C1 |  if_b	add	local01, #20
30264     53 B9 02 CB |  if_b	rdlong	local10, local01
30268     14 A6 86 C1 |  if_b	sub	local01, #20
3026c     5C AB 82 C1 |  if_b	sub	local03, local10
30270                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
30270                 | ' 	}
30270                 | ' 
30270                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
30270                 | LR__5120
30270     01 AA 16 F2 | 	cmp	local03, #1 wc
30274     94 03 90 CD |  if_b	jmp	#LR__5131
30278     14 A6 06 F1 | 	add	local01, #20
3027c     53 B3 02 FB | 	rdlong	local07, local01
30280     14 A6 86 F1 | 	sub	local01, #20
30284     FF B3 CE F7 | 	test	local07, #511 wz
30288     D8 02 90 5D |  if_ne	jmp	#LR__5129
3028c     14 A6 06 F1 | 	add	local01, #20
30290     53 BB 02 FB | 	rdlong	local11, local01
30294     14 A6 86 F1 | 	sub	local01, #20
30298     09 BA 46 F0 | 	shr	local11, #9
3029c     18 CE 05 F1 | 	add	fp, #24
302a0     E7 B4 02 FB | 	rdlong	local08, fp
302a4     18 CE 85 F1 | 	sub	fp, #24
302a8     5A BD 02 F6 | 	mov	local12, local08
302ac     0A BC 06 F1 | 	add	local12, #10
302b0     5E BF E2 FA | 	rdword	local13, local12
302b4     0A BC 86 F1 | 	sub	local12, #10
302b8     5F B7 32 F9 | 	getword	local09, local13, #0
302bc     01 B6 86 F1 | 	sub	local09, #1
302c0     5B BB 0A F5 | 	and	local11, local09 wz
302c4     A0 00 90 5D |  if_ne	jmp	#LR__5123
302c8     14 A6 06 F1 | 	add	local01, #20
302cc     53 B3 0A FB | 	rdlong	local07, local01 wz
302d0     14 A6 86 F1 | 	sub	local01, #20
302d4     24 00 90 5D |  if_ne	jmp	#LR__5121
302d8     08 A6 06 F1 | 	add	local01, #8
302dc     53 C1 0A FB | 	rdlong	local14, local01 wz
302e0     08 A6 86 F1 | 	sub	local01, #8
302e4     2C 00 90 5D |  if_ne	jmp	#LR__5122
302e8     53 93 02 F6 | 	mov	arg01, local01
302ec     00 94 06 F6 | 	mov	arg02, #0
302f0     44 D0 BF FD | 	call	#_fatfs_cc_create_chain
302f4     3D C1 02 F6 | 	mov	local14, result1
302f8     18 00 90 FD | 	jmp	#LR__5122
302fc                 | LR__5121
302fc     53 93 02 F6 | 	mov	arg01, local01
30300     18 A6 06 F1 | 	add	local01, #24
30304     53 95 02 FB | 	rdlong	arg02, local01
30308     18 A6 86 F1 | 	sub	local01, #24
3030c     28 D0 BF FD | 	call	#_fatfs_cc_create_chain
30310     3D C1 02 F6 | 	mov	local14, result1
30314                 | LR__5122
30314     00 C0 0E F2 | 	cmp	local14, #0 wz
30318     F0 02 90 AD |  if_e	jmp	#LR__5131
3031c     01 C0 0E F2 | 	cmp	local14, #1 wz
30320     11 A6 06 A1 |  if_e	add	local01, #17
30324     53 05 48 AC |  if_e	wrbyte	#2, local01
30328     02 7A 06 A6 |  if_e	mov	result1, #2
3032c     F0 02 90 AD |  if_e	jmp	#LR__5132
30330     FF FF 7F FF 
30334     FF C1 0E F2 | 	cmp	local14, ##-1 wz
30338     11 A6 06 A1 |  if_e	add	local01, #17
3033c     53 03 48 AC |  if_e	wrbyte	#1, local01
30340     01 7A 06 A6 |  if_e	mov	result1, #1
30344     D8 02 90 AD |  if_e	jmp	#LR__5132
30348     18 A6 06 F1 | 	add	local01, #24
3034c     53 C1 62 FC | 	wrlong	local14, local01
30350     10 A6 86 F1 | 	sub	local01, #16
30354     53 B3 0A FB | 	rdlong	local07, local01 wz
30358     08 A6 86 F1 | 	sub	local01, #8
3035c     08 A6 06 A1 |  if_e	add	local01, #8
30360     53 C1 62 AC |  if_e	wrlong	local14, local01
30364     08 A6 86 A1 |  if_e	sub	local01, #8
30368                 | LR__5123
30368     10 A6 06 F1 | 	add	local01, #16
3036c     53 B3 C2 FA | 	rdbyte	local07, local01
30370     10 A6 86 F1 | 	sub	local01, #16
30374     80 B2 CE F7 | 	test	local07, #128 wz
30378     58 00 90 AD |  if_e	jmp	#LR__5124
3037c     18 CE 05 F1 | 	add	fp, #24
30380     E7 B8 02 FB | 	rdlong	local10, fp
30384     18 CE 85 F1 | 	sub	fp, #24
30388     01 B8 06 F1 | 	add	local10, #1
3038c     5C 93 C2 FA | 	rdbyte	arg01, local10
30390     28 A6 06 F1 | 	add	local01, #40
30394     53 95 02 F6 | 	mov	arg02, local01
30398     0C A6 86 F1 | 	sub	local01, #12
3039c     53 97 02 FB | 	rdlong	arg03, local01
303a0     1C A6 86 F1 | 	sub	local01, #28
303a4     01 98 06 F6 | 	mov	arg04, #1
303a8     C0 C3 BF FD | 	call	#_fatfs_cc_disk_write
303ac     00 7A 0E F2 | 	cmp	result1, #0 wz
303b0     11 A6 06 51 |  if_ne	add	local01, #17
303b4     53 03 48 5C |  if_ne	wrbyte	#1, local01
303b8     01 7A 06 56 |  if_ne	mov	result1, #1
303bc     60 02 90 5D |  if_ne	jmp	#LR__5132
303c0     10 A6 06 F1 | 	add	local01, #16
303c4     53 B3 C2 FA | 	rdbyte	local07, local01
303c8     7F B2 06 F5 | 	and	local07, #127
303cc     53 B3 42 FC | 	wrbyte	local07, local01
303d0     10 A6 86 F1 | 	sub	local01, #16
303d4                 | LR__5124
303d4     18 CE 05 F1 | 	add	fp, #24
303d8     E7 92 02 FB | 	rdlong	arg01, fp
303dc     18 CE 85 F1 | 	sub	fp, #24
303e0     18 A6 06 F1 | 	add	local01, #24
303e4     53 95 02 FB | 	rdlong	arg02, local01
303e8     18 A6 86 F1 | 	sub	local01, #24
303ec     40 CA BF FD | 	call	#_fatfs_cc_clst2sect
303f0     3D C3 0A F6 | 	mov	local15, result1 wz
303f4     11 A6 06 A1 |  if_e	add	local01, #17
303f8     53 05 48 AC |  if_e	wrbyte	#2, local01
303fc     02 7A 06 A6 |  if_e	mov	result1, #2
30400     1C 02 90 AD |  if_e	jmp	#LR__5132
30404     5D C3 02 F1 | 	add	local15, local11
30408     55 C5 02 F6 | 	mov	local16, local03
3040c     09 C4 46 F0 | 	shr	local16, #9
30410     01 C4 16 F2 | 	cmp	local16, #1 wc
30414     D4 00 90 CD |  if_b	jmp	#LR__5127
30418     5D B3 02 F6 | 	mov	local07, local11
3041c     62 B3 02 F1 | 	add	local07, local16
30420     18 CE 05 F1 | 	add	fp, #24
30424     E7 C6 02 FB | 	rdlong	local17, fp
30428     18 CE 85 F1 | 	sub	fp, #24
3042c     0A C6 06 F1 | 	add	local17, #10
30430     63 B9 E2 FA | 	rdword	local10, local17
30434     5C B3 1A F2 | 	cmp	local07, local10 wcz
30438     18 00 90 ED |  if_be	jmp	#LR__5125
3043c     18 CE 05 F1 | 	add	fp, #24
30440     E7 B8 02 FB | 	rdlong	local10, fp
30444     18 CE 85 F1 | 	sub	fp, #24
30448     0A B8 06 F1 | 	add	local10, #10
3044c     5C C5 E2 FA | 	rdword	local16, local10
30450     5D C5 82 F1 | 	sub	local16, local11
30454                 | LR__5125
30454     18 CE 05 F1 | 	add	fp, #24
30458     E7 B8 02 FB | 	rdlong	local10, fp
3045c     18 CE 85 F1 | 	sub	fp, #24
30460     01 B8 06 F1 | 	add	local10, #1
30464     5C 93 C2 FA | 	rdbyte	arg01, local10
30468     57 95 02 F6 | 	mov	arg02, local05
3046c     61 97 02 F6 | 	mov	arg03, local15
30470     62 99 02 F6 | 	mov	arg04, local16
30474     F4 C2 BF FD | 	call	#_fatfs_cc_disk_write
30478     00 7A 0E F2 | 	cmp	result1, #0 wz
3047c     11 A6 06 51 |  if_ne	add	local01, #17
30480     53 03 48 5C |  if_ne	wrbyte	#1, local01
30484     01 7A 06 56 |  if_ne	mov	result1, #1
30488     94 01 90 5D |  if_ne	jmp	#LR__5132
3048c     1C A6 06 F1 | 	add	local01, #28
30490     53 B3 02 FB | 	rdlong	local07, local01
30494     1C A6 86 F1 | 	sub	local01, #28
30498     61 B3 82 F1 | 	sub	local07, local15
3049c     62 B3 12 F2 | 	cmp	local07, local16 wc
304a0     3C 00 90 3D |  if_ae	jmp	#LR__5126
304a4     28 A6 06 F1 | 	add	local01, #40
304a8     53 93 02 F6 | 	mov	arg01, local01
304ac     57 95 02 F6 | 	mov	arg02, local05
304b0     0C A6 86 F1 | 	sub	local01, #12
304b4     53 BF 02 FB | 	rdlong	local13, local01
304b8     61 BF 82 F1 | 	sub	local13, local15
304bc     09 BE 66 F0 | 	shl	local13, #9
304c0     5F 95 02 F1 | 	add	arg02, local13
304c4     09 96 C6 F9 | 	decod	arg03, #9
304c8     EC 46 BF FD | 	call	#__system____builtin_memmove
304cc     0C A6 86 F1 | 	sub	local01, #12
304d0     53 B3 C2 FA | 	rdbyte	local07, local01
304d4     7F B2 06 F5 | 	and	local07, #127
304d8     53 B3 42 FC | 	wrbyte	local07, local01
304dc     10 A6 86 F1 | 	sub	local01, #16
304e0                 | LR__5126
304e0     62 C9 02 F6 | 	mov	local18, local16
304e4     09 C8 66 F0 | 	shl	local18, #9
304e8                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
304e8                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
304e8                 | ' 				}
304e8                 | ' 
304e8                 | ' 
304e8                 | ' 				wcnt =  ((UINT) 512 )  * cc;
304e8                 | ' 				continue;
304e8     C4 00 90 FD | 	jmp	#LR__5130
304ec                 | LR__5127
304ec     1C A6 06 F1 | 	add	local01, #28
304f0     53 B3 02 FB | 	rdlong	local07, local01
304f4     1C A6 86 F1 | 	sub	local01, #28
304f8     61 B3 0A F2 | 	cmp	local07, local15 wz
304fc     58 00 90 AD |  if_e	jmp	#LR__5128
30500     14 A6 06 F1 | 	add	local01, #20
30504     53 C7 02 FB | 	rdlong	local17, local01
30508     08 A6 86 F1 | 	sub	local01, #8
3050c     53 BD 02 FB | 	rdlong	local12, local01
30510     0C A6 86 F1 | 	sub	local01, #12
30514     5E C7 12 F2 | 	cmp	local17, local12 wc
30518     3C 00 90 3D |  if_ae	jmp	#LR__5128
3051c     18 CE 05 F1 | 	add	fp, #24
30520     E7 C8 02 FB | 	rdlong	local18, fp
30524     18 CE 85 F1 | 	sub	fp, #24
30528     01 C8 06 F1 | 	add	local18, #1
3052c     64 93 C2 FA | 	rdbyte	arg01, local18
30530     53 95 02 F6 | 	mov	arg02, local01
30534     28 94 06 F1 | 	add	arg02, #40
30538     61 97 02 F6 | 	mov	arg03, local15
3053c     01 98 06 F6 | 	mov	arg04, #1
30540     EC C0 BF FD | 	call	#_fatfs_cc_disk_read
30544     00 7A 0E F2 | 	cmp	result1, #0 wz
30548     11 A6 06 51 |  if_ne	add	local01, #17
3054c     53 03 48 5C |  if_ne	wrbyte	#1, local01
30550                 | ' 				fp->fptr < fp->obj.objsize &&
30550                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
30550                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
30550     01 7A 06 56 |  if_ne	mov	result1, #1
30554     C8 00 90 5D |  if_ne	jmp	#LR__5132
30558                 | LR__5128
30558     1C A6 06 F1 | 	add	local01, #28
3055c     53 C3 62 FC | 	wrlong	local15, local01
30560     1C A6 86 F1 | 	sub	local01, #28
30564                 | LR__5129
30564     14 A6 06 F1 | 	add	local01, #20
30568     53 B9 02 FB | 	rdlong	local10, local01
3056c     FF B9 06 F5 | 	and	local10, #511
30570     09 C8 C6 F9 | 	decod	local18, #9
30574     5C C9 82 F1 | 	sub	local18, local10
30578     55 C9 3A F3 | 	fle	local18, local03 wcz
3057c     53 93 02 F6 | 	mov	arg01, local01
30580     14 92 06 F1 | 	add	arg01, #20
30584     53 BF 02 FB | 	rdlong	local13, local01
30588     FF BF 06 F5 | 	and	local13, #511
3058c     5F 93 02 F1 | 	add	arg01, local13
30590     57 95 02 F6 | 	mov	arg02, local05
30594     64 97 02 F6 | 	mov	arg03, local18
30598     1C 46 BF FD | 	call	#__system____builtin_memmove
3059c     04 A6 86 F1 | 	sub	local01, #4
305a0     53 B3 C2 FA | 	rdbyte	local07, local01
305a4     80 B2 46 F5 | 	or	local07, #128
305a8     53 B3 42 FC | 	wrbyte	local07, local01
305ac     10 A6 86 F1 | 	sub	local01, #16
305b0                 | LR__5130
305b0     64 AB 82 F1 | 	sub	local03, local18
305b4     56 B3 02 FB | 	rdlong	local07, local04
305b8     64 B3 02 F1 | 	add	local07, local18
305bc     56 B3 62 FC | 	wrlong	local07, local04
305c0     64 AF 02 F1 | 	add	local05, local18
305c4     14 A6 06 F1 | 	add	local01, #20
305c8     53 B9 02 FB | 	rdlong	local10, local01
305cc     64 B9 02 F1 | 	add	local10, local18
305d0     53 B9 62 FC | 	wrlong	local10, local01
305d4     08 A6 86 F1 | 	sub	local01, #8
305d8     53 B7 02 FB | 	rdlong	local09, local01
305dc     0C A6 86 F1 | 	sub	local01, #12
305e0     5B B9 1A F2 | 	cmp	local10, local09 wcz
305e4     14 A6 06 11 |  if_a	add	local01, #20
305e8     53 B3 02 1B |  if_a	rdlong	local07, local01
305ec     14 A6 86 11 |  if_a	sub	local01, #20
305f0     0C A6 06 E1 |  if_be	add	local01, #12
305f4     53 B3 02 EB |  if_be	rdlong	local07, local01
305f8     0C A6 86 E1 |  if_be	sub	local01, #12
305fc     0C A6 06 F1 | 	add	local01, #12
30600     53 B3 62 FC | 	wrlong	local07, local01
30604     0C A6 86 F1 | 	sub	local01, #12
30608     64 FC 9F FD | 	jmp	#LR__5120
3060c                 | LR__5131
3060c     10 A6 06 F1 | 	add	local01, #16
30610     53 B3 C2 FA | 	rdbyte	local07, local01
30614     40 B2 46 F5 | 	or	local07, #64
30618     53 B3 42 FC | 	wrbyte	local07, local01
3061c                 | ' 
3061c                 | ' 
3061c                 | ' 
3061c                 | ' 
3061c                 | ' 
3061c                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
3061c                 | ' 		fp->flag |=  0x80 ;
3061c                 | ' 
3061c                 | ' 	}
3061c                 | ' 
3061c                 | ' 	fp->flag |=  0x40 ;
3061c                 | ' 
3061c                 | ' 	return FR_OK ;
3061c     00 7A 06 F6 | 	mov	result1, #0
30620                 | LR__5132
30620     E7 F0 03 F6 | 	mov	ptra, fp
30624     F2 00 A0 FD | 	call	#popregs_
30628                 | _fatfs_cc_f_write_ret
30628     2D 00 64 FD | 	ret
3062c                 | 
3062c                 | _fatfs_cc_f_sync
3062c     03 CA 05 F6 | 	mov	COUNT_, #3
30630     E8 00 A0 FD | 	call	#pushregs_
30634     18 F0 07 F1 | 	add	ptra, #24
30638     49 A7 02 F6 | 	mov	local01, arg01
3063c     E7 94 02 F6 | 	mov	arg02, fp
30640     0C 94 06 F1 | 	add	arg02, #12
30644     53 93 02 F6 | 	mov	arg01, local01
30648     58 F2 BF FD | 	call	#_fatfs_cc_validate
3064c     3D A9 0A F6 | 	mov	local02, result1 wz
30650     30 01 90 5D |  if_ne	jmp	#LR__5143
30654     10 A6 06 F1 | 	add	local01, #16
30658     53 99 C2 FA | 	rdbyte	arg04, local01
3065c     10 A6 86 F1 | 	sub	local01, #16
30660     40 98 CE F7 | 	test	arg04, #64 wz
30664     1C 01 90 AD |  if_e	jmp	#LR__5142
30668     10 A6 06 F1 | 	add	local01, #16
3066c     53 A9 C2 FA | 	rdbyte	local02, local01
30670     10 A6 86 F1 | 	sub	local01, #16
30674     80 A8 CE F7 | 	test	local02, #128 wz
30678     50 00 90 AD |  if_e	jmp	#LR__5140
3067c     0C CE 05 F1 | 	add	fp, #12
30680     E7 A8 02 FB | 	rdlong	local02, fp
30684     0C CE 85 F1 | 	sub	fp, #12
30688     01 A8 06 F1 | 	add	local02, #1
3068c     54 93 C2 FA | 	rdbyte	arg01, local02
30690     28 A6 06 F1 | 	add	local01, #40
30694     53 95 02 F6 | 	mov	arg02, local01
30698     0C A6 86 F1 | 	sub	local01, #12
3069c     53 97 02 FB | 	rdlong	arg03, local01
306a0     1C A6 86 F1 | 	sub	local01, #28
306a4     01 98 06 F6 | 	mov	arg04, #1
306a8     C0 C0 BF FD | 	call	#_fatfs_cc_disk_write
306ac     00 7A 0E F2 | 	cmp	result1, #0 wz
306b0     01 7A 06 56 |  if_ne	mov	result1, #1
306b4     D0 00 90 5D |  if_ne	jmp	#LR__5144
306b8     10 A6 06 F1 | 	add	local01, #16
306bc     53 A9 C2 FA | 	rdbyte	local02, local01
306c0     7F A8 06 F5 | 	and	local02, #127
306c4     53 A9 42 FC | 	wrbyte	local02, local01
306c8     10 A6 86 F1 | 	sub	local01, #16
306cc                 | LR__5140
306cc     EC 0F B0 FD | 	call	#_fatfs_cc__get_fattime
306d0     3D AB 02 F6 | 	mov	local03, result1
306d4     0C CE 05 F1 | 	add	fp, #12
306d8     E7 92 02 FB | 	rdlong	arg01, fp
306dc     0C CE 85 F1 | 	sub	fp, #12
306e0     20 A6 06 F1 | 	add	local01, #32
306e4     53 95 02 FB | 	rdlong	arg02, local01
306e8     20 A6 86 F1 | 	sub	local01, #32
306ec     C8 C5 BF FD | 	call	#_fatfs_cc_move_window
306f0     3D A9 0A F6 | 	mov	local02, result1 wz
306f4     8C 00 90 5D |  if_ne	jmp	#LR__5141
306f8     24 A6 06 F1 | 	add	local01, #36
306fc     53 A9 02 FB | 	rdlong	local02, local01
30700     24 A6 86 F1 | 	sub	local01, #36
30704     0B A8 06 F1 | 	add	local02, #11
30708     54 99 C2 FA | 	rdbyte	arg04, local02
3070c     20 98 46 F5 | 	or	arg04, #32
30710     54 99 42 FC | 	wrbyte	arg04, local02
30714     0B A8 86 F1 | 	sub	local02, #11
30718     53 93 02 FB | 	rdlong	arg01, local01
3071c     08 A6 06 F1 | 	add	local01, #8
30720     53 97 02 FB | 	rdlong	arg03, local01
30724     54 95 02 F6 | 	mov	arg02, local02
30728     F8 D2 BF FD | 	call	#_fatfs_cc_st_clust
3072c     54 93 02 F6 | 	mov	arg01, local02
30730     1C 92 06 F1 | 	add	arg01, #28
30734     04 A6 06 F1 | 	add	local01, #4
30738     53 95 02 FB | 	rdlong	arg02, local01
3073c     49 95 62 FC | 	wrlong	arg02, arg01
30740     54 93 02 F6 | 	mov	arg01, local02
30744     16 92 06 F1 | 	add	arg01, #22
30748     49 AB 62 FC | 	wrlong	local03, arg01
3074c     12 A8 06 F1 | 	add	local02, #18
30750     54 01 58 FC | 	wrword	#0, local02
30754     0C CE 05 F1 | 	add	fp, #12
30758     E7 AA 02 FB | 	rdlong	local03, fp
3075c     03 AA 06 F1 | 	add	local03, #3
30760     55 03 48 FC | 	wrbyte	#1, local03
30764     E7 92 02 FB | 	rdlong	arg01, fp
30768     0C CE 85 F1 | 	sub	fp, #12
3076c     C0 C5 BF FD | 	call	#_fatfs_cc_sync_fs
30770     3D A9 02 F6 | 	mov	local02, result1
30774     04 A6 06 F1 | 	add	local01, #4
30778     53 AB C2 FA | 	rdbyte	local03, local01
3077c     BF AA 06 F5 | 	and	local03, #191
30780     53 AB 42 FC | 	wrbyte	local03, local01
30784                 | LR__5141
30784                 | LR__5142
30784                 | LR__5143
30784                 | ' 					dir = fp->dir_ptr;
30784                 | ' 					dir[ 11 ] |=  0x20 ;
30784                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
30784                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
30784                 | ' 					st_dword(dir +  22 , tm);
30784                 | ' 					st_word(dir +  18 , 0);
30784                 | ' 					fs->wflag = 1;
30784                 | ' 					res = sync_fs(fs);
30784                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
30784                 | ' 				}
30784                 | ' 			}
30784                 | ' 		}
30784                 | ' 	}
30784                 | ' 
30784                 | ' 	return res ;
30784     54 7B 02 F6 | 	mov	result1, local02
30788                 | LR__5144
30788     E7 F0 03 F6 | 	mov	ptra, fp
3078c     F2 00 A0 FD | 	call	#popregs_
30790                 | _fatfs_cc_f_sync_ret
30790     2D 00 64 FD | 	ret
30794                 | 
30794                 | _fatfs_cc_f_close
30794     02 CA 05 F6 | 	mov	COUNT_, #2
30798     E8 00 A0 FD | 	call	#pushregs_
3079c     10 F0 07 F1 | 	add	ptra, #16
307a0     49 A7 02 F6 | 	mov	local01, arg01
307a4     84 FE BF FD | 	call	#_fatfs_cc_f_sync
307a8     3D A9 0A F6 | 	mov	local02, result1 wz
307ac     18 00 90 5D |  if_ne	jmp	#LR__5150
307b0     E7 94 02 F6 | 	mov	arg02, fp
307b4     0C 94 06 F1 | 	add	arg02, #12
307b8     53 93 02 F6 | 	mov	arg01, local01
307bc     E4 F0 BF FD | 	call	#_fatfs_cc_validate
307c0     3D A9 0A F6 | 	mov	local02, result1 wz
307c4     53 01 68 AC |  if_e	wrlong	#0, local01
307c8                 | LR__5150
307c8                 | ' 
307c8                 | ' 
307c8                 | ' 
307c8                 | ' 
307c8                 | ' 			fp->obj.fs = 0;
307c8                 | ' #line 4192 "ff.c"
307c8                 | ' 		}
307c8                 | ' 	}
307c8                 | ' 	return res;
307c8     54 7B 02 F6 | 	mov	result1, local02
307cc     E7 F0 03 F6 | 	mov	ptra, fp
307d0     F2 00 A0 FD | 	call	#popregs_
307d4                 | _fatfs_cc_f_close_ret
307d4     2D 00 64 FD | 	ret
307d8                 | 
307d8                 | _fatfs_cc_f_lseek
307d8     0D CA 05 F6 | 	mov	COUNT_, #13
307dc     E8 00 A0 FD | 	call	#pushregs_
307e0     24 F0 07 F1 | 	add	ptra, #36
307e4     49 A7 02 F6 | 	mov	local01, arg01
307e8     4A A9 02 F6 | 	mov	local02, arg02
307ec     E7 94 02 F6 | 	mov	arg02, fp
307f0     10 94 06 F1 | 	add	arg02, #16
307f4     53 93 02 F6 | 	mov	arg01, local01
307f8     A8 F0 BF FD | 	call	#_fatfs_cc_validate
307fc     3D AB 0A F6 | 	mov	local03, result1 wz
30800     11 A6 06 A1 |  if_e	add	local01, #17
30804     53 AB C2 AA |  if_e	rdbyte	local03, local01
30808     11 A6 86 A1 |  if_e	sub	local01, #17
3080c     00 AA 0E F2 | 	cmp	local03, #0 wz
30810     55 7B 02 56 |  if_ne	mov	result1, local03
30814     5C 03 90 5D |  if_ne	jmp	#LR__5176
30818     0C A6 06 F1 | 	add	local01, #12
3081c     53 AD 02 FB | 	rdlong	local04, local01
30820     0C A6 86 F1 | 	sub	local01, #12
30824     56 A9 1A F2 | 	cmp	local02, local04 wcz
30828     20 00 90 ED |  if_be	jmp	#LR__5160
3082c     10 A6 06 F1 | 	add	local01, #16
30830     53 AF C2 FA | 	rdbyte	local05, local01
30834     10 A6 86 F1 | 	sub	local01, #16
30838     57 B1 E2 F8 | 	getbyte	local06, local05, #0
3083c     02 B0 CE F7 | 	test	local06, #2 wz
30840     0C A6 06 A1 |  if_e	add	local01, #12
30844     53 A9 02 AB |  if_e	rdlong	local02, local01
30848     0C A6 86 A1 |  if_e	sub	local01, #12
3084c                 | LR__5160
3084c     14 A6 06 F1 | 	add	local01, #20
30850     53 B3 02 FB | 	rdlong	local07, local01
30854     00 B4 06 F6 | 	mov	local08, #0
30858     53 01 68 FC | 	wrlong	#0, local01
3085c     14 A6 86 F1 | 	sub	local01, #20
30860     01 A8 16 F2 | 	cmp	local02, #1 wc
30864     F4 01 90 CD |  if_b	jmp	#LR__5172
30868     10 CE 05 F1 | 	add	fp, #16
3086c     E7 B6 02 FB | 	rdlong	local09, fp
30870     10 CE 85 F1 | 	sub	fp, #16
30874     0A B6 06 F1 | 	add	local09, #10
30878     5B AF E2 FA | 	rdword	local05, local09
3087c     57 B9 32 F9 | 	getword	local10, local05, #0
30880     09 B8 66 F0 | 	shl	local10, #9
30884     5C BB 02 F6 | 	mov	local11, local10
30888     01 B2 16 F2 | 	cmp	local07, #1 wc
3088c     5C 00 90 CD |  if_b	jmp	#LR__5161
30890     54 B7 02 F6 | 	mov	local09, local02
30894     01 B6 86 F1 | 	sub	local09, #1
30898     5D B7 12 FD | 	qdiv	local09, local11
3089c     59 AF 02 F6 | 	mov	local05, local07
308a0     01 AE 86 F1 | 	sub	local05, #1
308a4     5D BD 02 F6 | 	mov	local12, local11
308a8     18 B6 62 FD | 	getqx	local09
308ac     5E AF 12 FD | 	qdiv	local05, local12
308b0     18 B8 62 FD | 	getqx	local10
308b4     5C B7 12 F2 | 	cmp	local09, local10 wc
308b8     30 00 90 CD |  if_b	jmp	#LR__5161
308bc     59 B1 02 F6 | 	mov	local06, local07
308c0     01 B0 86 F1 | 	sub	local06, #1
308c4     5D B7 02 F6 | 	mov	local09, local11
308c8     01 B6 86 F1 | 	sub	local09, #1
308cc     5B B1 22 F5 | 	andn	local06, local09
308d0     14 A6 06 F1 | 	add	local01, #20
308d4     53 B1 62 FC | 	wrlong	local06, local01
308d8     58 A9 82 F1 | 	sub	local02, local06
308dc     04 A6 06 F1 | 	add	local01, #4
308e0     53 BF 02 FB | 	rdlong	local13, local01
308e4     18 A6 86 F1 | 	sub	local01, #24
308e8     64 00 90 FD | 	jmp	#LR__5163
308ec                 | LR__5161
308ec     08 A6 06 F1 | 	add	local01, #8
308f0     53 BF 0A FB | 	rdlong	local13, local01 wz
308f4     08 A6 86 F1 | 	sub	local01, #8
308f8     48 00 90 5D |  if_ne	jmp	#LR__5162
308fc     53 93 02 F6 | 	mov	arg01, local01
30900     00 94 06 F6 | 	mov	arg02, #0
30904     30 CA BF FD | 	call	#_fatfs_cc_create_chain
30908     3D BF 02 F6 | 	mov	local13, result1
3090c     01 BE 0E F2 | 	cmp	local13, #1 wz
30910     11 A6 06 A1 |  if_e	add	local01, #17
30914     53 05 48 AC |  if_e	wrbyte	#2, local01
30918     02 7A 06 A6 |  if_e	mov	result1, #2
3091c     54 02 90 AD |  if_e	jmp	#LR__5176
30920     FF FF 7F FF 
30924     FF BF 0E F2 | 	cmp	local13, ##-1 wz
30928     11 A6 06 A1 |  if_e	add	local01, #17
3092c     53 03 48 AC |  if_e	wrbyte	#1, local01
30930     01 7A 06 A6 |  if_e	mov	result1, #1
30934     3C 02 90 AD |  if_e	jmp	#LR__5176
30938     08 A6 06 F1 | 	add	local01, #8
3093c     53 BF 62 FC | 	wrlong	local13, local01
30940     08 A6 86 F1 | 	sub	local01, #8
30944                 | LR__5162
30944     18 A6 06 F1 | 	add	local01, #24
30948     53 BF 62 FC | 	wrlong	local13, local01
3094c     18 A6 86 F1 | 	sub	local01, #24
30950                 | LR__5163
30950     00 BE 0E F2 | 	cmp	local13, #0 wz
30954     04 01 90 AD |  if_e	jmp	#LR__5171
30958                 | ' 				while (ofs > bcs) {
30958                 | LR__5164
30958     5D A9 1A F2 | 	cmp	local02, local11 wcz
3095c     B0 00 90 ED |  if_be	jmp	#LR__5169
30960     5D A9 82 F1 | 	sub	local02, local11
30964     14 A6 06 F1 | 	add	local01, #20
30968     53 AD 02 FB | 	rdlong	local04, local01
3096c     5D AD 02 F1 | 	add	local04, local11
30970     53 AD 62 FC | 	wrlong	local04, local01
30974     04 A6 86 F1 | 	sub	local01, #4
30978     53 AD C2 FA | 	rdbyte	local04, local01
3097c     10 A6 86 F1 | 	sub	local01, #16
30980     02 AC CE F7 | 	test	local04, #2 wz
30984     1C 00 90 AD |  if_e	jmp	#LR__5165
30988     53 93 02 F6 | 	mov	arg01, local01
3098c     5F 95 02 F6 | 	mov	arg02, local13
30990     A4 C9 BF FD | 	call	#_fatfs_cc_create_chain
30994     3D BF 0A F6 | 	mov	local13, result1 wz
30998     00 A8 06 A6 |  if_e	mov	local02, #0
3099c                 | ' 							ofs = 0; break;
3099c     70 00 90 AD |  if_e	jmp	#LR__5169
309a0     10 00 90 FD | 	jmp	#LR__5166
309a4                 | LR__5165
309a4     53 93 02 F6 | 	mov	arg01, local01
309a8     5F 95 02 F6 | 	mov	arg02, local13
309ac     C0 C4 BF FD | 	call	#_fatfs_cc_get_fat
309b0     3D BF 02 F6 | 	mov	local13, result1
309b4                 | LR__5166
309b4     FF FF 7F FF 
309b8     FF BF 0E F2 | 	cmp	local13, ##-1 wz
309bc     11 A6 06 A1 |  if_e	add	local01, #17
309c0     53 03 48 AC |  if_e	wrbyte	#1, local01
309c4     01 7A 06 A6 |  if_e	mov	result1, #1
309c8     A8 01 90 AD |  if_e	jmp	#LR__5176
309cc     02 BE 16 F2 | 	cmp	local13, #2 wc
309d0     1C 00 90 CD |  if_b	jmp	#LR__5167
309d4     10 CE 05 F1 | 	add	fp, #16
309d8     E7 AC 02 FB | 	rdlong	local04, fp
309dc     10 CE 85 F1 | 	sub	fp, #16
309e0     18 AC 06 F1 | 	add	local04, #24
309e4     56 AF 02 FB | 	rdlong	local05, local04
309e8     57 BF 12 F2 | 	cmp	local13, local05 wc
309ec     10 00 90 CD |  if_b	jmp	#LR__5168
309f0                 | LR__5167
309f0     11 A6 06 F1 | 	add	local01, #17
309f4     53 05 48 FC | 	wrbyte	#2, local01
309f8     02 7A 06 F6 | 	mov	result1, #2
309fc     74 01 90 FD | 	jmp	#LR__5176
30a00                 | LR__5168
30a00     18 A6 06 F1 | 	add	local01, #24
30a04     53 BF 62 FC | 	wrlong	local13, local01
30a08     18 A6 86 F1 | 	sub	local01, #24
30a0c     48 FF 9F FD | 	jmp	#LR__5164
30a10                 | LR__5169
30a10     14 A6 06 F1 | 	add	local01, #20
30a14     53 AD 02 FB | 	rdlong	local04, local01
30a18     54 AD 02 F1 | 	add	local04, local02
30a1c     53 AD 62 FC | 	wrlong	local04, local01
30a20     14 A6 86 F1 | 	sub	local01, #20
30a24     FF A9 CE F7 | 	test	local02, #511 wz
30a28     30 00 90 AD |  if_e	jmp	#LR__5170
30a2c     10 CE 05 F1 | 	add	fp, #16
30a30     E7 92 02 FB | 	rdlong	arg01, fp
30a34     10 CE 85 F1 | 	sub	fp, #16
30a38     5F 95 02 F6 | 	mov	arg02, local13
30a3c     F0 C3 BF FD | 	call	#_fatfs_cc_clst2sect
30a40     3D B5 0A F6 | 	mov	local08, result1 wz
30a44     11 A6 06 A1 |  if_e	add	local01, #17
30a48     53 05 48 AC |  if_e	wrbyte	#2, local01
30a4c     02 7A 06 A6 |  if_e	mov	result1, #2
30a50     20 01 90 AD |  if_e	jmp	#LR__5176
30a54     09 A8 46 F0 | 	shr	local02, #9
30a58     54 B5 02 F1 | 	add	local08, local02
30a5c                 | LR__5170
30a5c                 | LR__5171
30a5c                 | LR__5172
30a5c     14 A6 06 F1 | 	add	local01, #20
30a60     53 AD 02 FB | 	rdlong	local04, local01
30a64     08 A6 86 F1 | 	sub	local01, #8
30a68     53 B1 02 FB | 	rdlong	local06, local01
30a6c     0C A6 86 F1 | 	sub	local01, #12
30a70     58 AD 1A F2 | 	cmp	local04, local06 wcz
30a74     24 00 90 ED |  if_be	jmp	#LR__5173
30a78     14 A6 06 F1 | 	add	local01, #20
30a7c     53 AD 02 FB | 	rdlong	local04, local01
30a80     08 A6 86 F1 | 	sub	local01, #8
30a84     53 AD 62 FC | 	wrlong	local04, local01
30a88     04 A6 06 F1 | 	add	local01, #4
30a8c     53 AD C2 FA | 	rdbyte	local04, local01
30a90     40 AC 46 F5 | 	or	local04, #64
30a94     53 AD 42 FC | 	wrbyte	local04, local01
30a98     10 A6 86 F1 | 	sub	local01, #16
30a9c                 | LR__5173
30a9c     14 A6 06 F1 | 	add	local01, #20
30aa0     53 AD 02 FB | 	rdlong	local04, local01
30aa4     14 A6 86 F1 | 	sub	local01, #20
30aa8     FF AD CE F7 | 	test	local04, #511 wz
30aac     1C A6 06 51 |  if_ne	add	local01, #28
30ab0     53 AF 02 5B |  if_ne	rdlong	local05, local01
30ab4     1C A6 86 51 |  if_ne	sub	local01, #28
30ab8     57 B5 0A 52 |  if_ne	cmp	local08, local05 wz
30abc     B0 00 90 AD |  if_e	jmp	#LR__5175
30ac0     10 A6 06 F1 | 	add	local01, #16
30ac4     53 AD C2 FA | 	rdbyte	local04, local01
30ac8     10 A6 86 F1 | 	sub	local01, #16
30acc     80 AC CE F7 | 	test	local04, #128 wz
30ad0     58 00 90 AD |  if_e	jmp	#LR__5174
30ad4     10 CE 05 F1 | 	add	fp, #16
30ad8     E7 B6 02 FB | 	rdlong	local09, fp
30adc     10 CE 85 F1 | 	sub	fp, #16
30ae0     01 B6 06 F1 | 	add	local09, #1
30ae4     5B 93 C2 FA | 	rdbyte	arg01, local09
30ae8     28 A6 06 F1 | 	add	local01, #40
30aec     53 95 02 F6 | 	mov	arg02, local01
30af0     0C A6 86 F1 | 	sub	local01, #12
30af4     53 97 02 FB | 	rdlong	arg03, local01
30af8     1C A6 86 F1 | 	sub	local01, #28
30afc     01 98 06 F6 | 	mov	arg04, #1
30b00     68 BC BF FD | 	call	#_fatfs_cc_disk_write
30b04     00 7A 0E F2 | 	cmp	result1, #0 wz
30b08     11 A6 06 51 |  if_ne	add	local01, #17
30b0c     53 03 48 5C |  if_ne	wrbyte	#1, local01
30b10     01 7A 06 56 |  if_ne	mov	result1, #1
30b14     5C 00 90 5D |  if_ne	jmp	#LR__5176
30b18     10 A6 06 F1 | 	add	local01, #16
30b1c     53 AD C2 FA | 	rdbyte	local04, local01
30b20     7F AC 06 F5 | 	and	local04, #127
30b24     53 AD 42 FC | 	wrbyte	local04, local01
30b28     10 A6 86 F1 | 	sub	local01, #16
30b2c                 | LR__5174
30b2c     10 CE 05 F1 | 	add	fp, #16
30b30     E7 B6 02 FB | 	rdlong	local09, fp
30b34     10 CE 85 F1 | 	sub	fp, #16
30b38     01 B6 06 F1 | 	add	local09, #1
30b3c     5B 93 C2 FA | 	rdbyte	arg01, local09
30b40     53 95 02 F6 | 	mov	arg02, local01
30b44     28 94 06 F1 | 	add	arg02, #40
30b48     5A 97 02 F6 | 	mov	arg03, local08
30b4c     01 98 06 F6 | 	mov	arg04, #1
30b50     DC BA BF FD | 	call	#_fatfs_cc_disk_read
30b54     00 7A 0E F2 | 	cmp	result1, #0 wz
30b58     11 A6 06 51 |  if_ne	add	local01, #17
30b5c     53 03 48 5C |  if_ne	wrbyte	#1, local01
30b60     01 7A 06 56 |  if_ne	mov	result1, #1
30b64     0C 00 90 5D |  if_ne	jmp	#LR__5176
30b68     1C A6 06 F1 | 	add	local01, #28
30b6c     53 B5 62 FC | 	wrlong	local08, local01
30b70                 | LR__5175
30b70                 | ' 
30b70                 | ' 			fp->sect = nsect;
30b70                 | ' 		}
30b70                 | ' 	}
30b70                 | ' 
30b70                 | ' 	return res ;
30b70     55 7B 02 F6 | 	mov	result1, local03
30b74                 | LR__5176
30b74     E7 F0 03 F6 | 	mov	ptra, fp
30b78     F2 00 A0 FD | 	call	#popregs_
30b7c                 | _fatfs_cc_f_lseek_ret
30b7c     2D 00 64 FD | 	ret
30b80                 | 
30b80                 | _fatfs_cc_f_opendir
30b80     02 CA 05 F6 | 	mov	COUNT_, #2
30b84     E8 00 A0 FD | 	call	#pushregs_
30b88     14 F0 07 F1 | 	add	ptra, #20
30b8c     49 A7 0A F6 | 	mov	local01, arg01 wz
30b90     08 CE 05 F1 | 	add	fp, #8
30b94     E7 94 62 FC | 	wrlong	arg02, fp
30b98     08 CE 85 F1 | 	sub	fp, #8
30b9c     09 7A 06 A6 |  if_e	mov	result1, #9
30ba0     EC 00 90 AD |  if_e	jmp	#LR__5186
30ba4     08 CE 05 F1 | 	add	fp, #8
30ba8     E7 92 02 F6 | 	mov	arg01, fp
30bac     08 CE 05 F1 | 	add	fp, #8
30bb0     E7 94 02 F6 | 	mov	arg02, fp
30bb4     10 CE 85 F1 | 	sub	fp, #16
30bb8     00 96 06 F6 | 	mov	arg03, #0
30bbc     B4 E7 BF FD | 	call	#_fatfs_cc_mount_volume
30bc0     3D A9 0A F6 | 	mov	local02, result1 wz
30bc4     BC 00 90 5D |  if_ne	jmp	#LR__5185
30bc8     10 CE 05 F1 | 	add	fp, #16
30bcc     E7 A8 02 FB | 	rdlong	local02, fp
30bd0     53 A9 62 FC | 	wrlong	local02, local01
30bd4     08 CE 85 F1 | 	sub	fp, #8
30bd8     E7 94 02 FB | 	rdlong	arg02, fp
30bdc     08 CE 85 F1 | 	sub	fp, #8
30be0     53 93 02 F6 | 	mov	arg01, local01
30be4     F0 E2 BF FD | 	call	#_fatfs_cc_follow_path
30be8     3D A9 0A F6 | 	mov	local02, result1 wz
30bec     8C 00 90 5D |  if_ne	jmp	#LR__5184
30bf0     2B A6 06 F1 | 	add	local01, #43
30bf4     53 97 C2 FA | 	rdbyte	arg03, local01
30bf8     2B A6 86 F1 | 	sub	local01, #43
30bfc     80 96 CE F7 | 	test	arg03, #128 wz
30c00     40 00 90 5D |  if_ne	jmp	#LR__5182
30c04     06 A6 06 F1 | 	add	local01, #6
30c08     53 97 C2 FA | 	rdbyte	arg03, local01
30c0c     06 A6 86 F1 | 	sub	local01, #6
30c10     10 96 CE F7 | 	test	arg03, #16 wz
30c14     28 00 90 AD |  if_e	jmp	#LR__5180
30c18     10 CE 05 F1 | 	add	fp, #16
30c1c     E7 92 02 FB | 	rdlong	arg01, fp
30c20     10 CE 85 F1 | 	sub	fp, #16
30c24     1C A6 06 F1 | 	add	local01, #28
30c28     53 95 02 FB | 	rdlong	arg02, local01
30c2c     C0 CD BF FD | 	call	#_fatfs_cc_ld_clust
30c30     14 A6 86 F1 | 	sub	local01, #20
30c34     53 7B 62 FC | 	wrlong	result1, local01
30c38     08 A6 86 F1 | 	sub	local01, #8
30c3c     04 00 90 FD | 	jmp	#LR__5181
30c40                 | LR__5180
30c40     05 A8 06 F6 | 	mov	local02, #5
30c44                 | LR__5181
30c44                 | LR__5182
30c44     00 A8 0E F2 | 	cmp	local02, #0 wz
30c48     30 00 90 5D |  if_ne	jmp	#LR__5183
30c4c     10 CE 05 F1 | 	add	fp, #16
30c50     E7 A8 02 FB | 	rdlong	local02, fp
30c54     10 CE 85 F1 | 	sub	fp, #16
30c58     06 A8 06 F1 | 	add	local02, #6
30c5c     54 A9 E2 FA | 	rdword	local02, local02
30c60     04 A6 06 F1 | 	add	local01, #4
30c64     53 A9 52 FC | 	wrword	local02, local01
30c68     04 A6 86 F1 | 	sub	local01, #4
30c6c     53 93 02 F6 | 	mov	arg01, local01
30c70     00 94 06 F6 | 	mov	arg02, #0
30c74     A4 C9 BF FD | 	call	#_fatfs_cc_dir_sdi
30c78     3D A9 02 F6 | 	mov	local02, result1
30c7c                 | LR__5183
30c7c                 | LR__5184
30c7c     04 A8 0E F2 | 	cmp	local02, #4 wz
30c80     05 A8 06 A6 |  if_e	mov	local02, #5
30c84                 | LR__5185
30c84     00 A8 0E F2 | 	cmp	local02, #0 wz
30c88     53 01 68 5C |  if_ne	wrlong	#0, local01
30c8c                 | ' 
30c8c                 | ' 	return res ;
30c8c     54 7B 02 F6 | 	mov	result1, local02
30c90                 | LR__5186
30c90     E7 F0 03 F6 | 	mov	ptra, fp
30c94     F2 00 A0 FD | 	call	#popregs_
30c98                 | _fatfs_cc_f_opendir_ret
30c98     2D 00 64 FD | 	ret
30c9c                 | 
30c9c                 | _fatfs_cc_f_closedir
30c9c     01 CA 05 F6 | 	mov	COUNT_, #1
30ca0     E8 00 A0 FD | 	call	#pushregs_
30ca4     10 F0 07 F1 | 	add	ptra, #16
30ca8     49 A7 02 F6 | 	mov	local01, arg01
30cac     E7 94 02 F6 | 	mov	arg02, fp
30cb0     0C 94 06 F1 | 	add	arg02, #12
30cb4     53 93 02 F6 | 	mov	arg01, local01
30cb8     E8 EB BF FD | 	call	#_fatfs_cc_validate
30cbc     00 7A 4E F2 | 	cmps	result1, #0 wz
30cc0     53 01 68 AC |  if_e	wrlong	#0, local01
30cc4                 | ' 
30cc4                 | ' 
30cc4                 | ' 
30cc4                 | ' 
30cc4                 | ' 		dp->obj.fs = 0;
30cc4                 | ' #line 4633 "ff.c"
30cc4                 | ' 	}
30cc4                 | ' 	return res;
30cc4     E7 F0 03 F6 | 	mov	ptra, fp
30cc8     F2 00 A0 FD | 	call	#popregs_
30ccc                 | _fatfs_cc_f_closedir_ret
30ccc     2D 00 64 FD | 	ret
30cd0                 | 
30cd0                 | _fatfs_cc_f_readdir
30cd0     03 CA 05 F6 | 	mov	COUNT_, #3
30cd4     E8 00 A0 FD | 	call	#pushregs_
30cd8     14 F0 07 F1 | 	add	ptra, #20
30cdc     49 A7 02 F6 | 	mov	local01, arg01
30ce0     4A A9 02 F6 | 	mov	local02, arg02
30ce4     E7 94 02 F6 | 	mov	arg02, fp
30ce8     10 94 06 F1 | 	add	arg02, #16
30cec     53 93 02 F6 | 	mov	arg01, local01
30cf0     B0 EB BF FD | 	call	#_fatfs_cc_validate
30cf4     3D AB 0A F6 | 	mov	local03, result1 wz
30cf8     60 00 90 5D |  if_ne	jmp	#LR__5193
30cfc     00 A8 0E F2 | 	cmp	local02, #0 wz
30d00     14 00 90 5D |  if_ne	jmp	#LR__5190
30d04     53 93 02 F6 | 	mov	arg01, local01
30d08     00 94 06 F6 | 	mov	arg02, #0
30d0c     0C C9 BF FD | 	call	#_fatfs_cc_dir_sdi
30d10     3D AB 02 F6 | 	mov	local03, result1
30d14     44 00 90 FD | 	jmp	#LR__5192
30d18                 | LR__5190
30d18     53 93 02 F6 | 	mov	arg01, local01
30d1c     00 94 06 F6 | 	mov	arg02, #0
30d20     98 D1 BF FD | 	call	#_fatfs_cc_dir_read
30d24     3D AB 02 F6 | 	mov	local03, result1
30d28     04 AA 0E F2 | 	cmp	local03, #4 wz
30d2c     00 AA 06 A6 |  if_e	mov	local03, #0
30d30     00 AA 0E F2 | 	cmp	local03, #0 wz
30d34     24 00 90 5D |  if_ne	jmp	#LR__5191
30d38     53 93 02 F6 | 	mov	arg01, local01
30d3c     54 95 02 F6 | 	mov	arg02, local02
30d40     E4 D8 BF FD | 	call	#_fatfs_cc_get_fileinfo
30d44     53 93 02 F6 | 	mov	arg01, local01
30d48     00 94 06 F6 | 	mov	arg02, #0
30d4c     34 CA BF FD | 	call	#_fatfs_cc_dir_next
30d50     3D AB 02 F6 | 	mov	local03, result1
30d54     04 AA 0E F2 | 	cmp	local03, #4 wz
30d58     00 AA 06 A6 |  if_e	mov	local03, #0
30d5c                 | LR__5191
30d5c                 | LR__5192
30d5c                 | LR__5193
30d5c                 | ' 			}
30d5c                 | ' 			;
30d5c                 | ' 		}
30d5c                 | ' 	}
30d5c                 | ' 	return res ;
30d5c     55 7B 02 F6 | 	mov	result1, local03
30d60     E7 F0 03 F6 | 	mov	ptra, fp
30d64     F2 00 A0 FD | 	call	#popregs_
30d68                 | _fatfs_cc_f_readdir_ret
30d68     2D 00 64 FD | 	ret
30d6c                 | 
30d6c                 | _fatfs_cc_f_stat
30d6c     02 CA 05 F6 | 	mov	COUNT_, #2
30d70     E8 00 A0 FD | 	call	#pushregs_
30d74     40 F0 07 F1 | 	add	ptra, #64
30d78     04 CE 05 F1 | 	add	fp, #4
30d7c     E7 92 62 FC | 	wrlong	arg01, fp
30d80     4A A7 02 F6 | 	mov	local01, arg02
30d84     E7 92 02 F6 | 	mov	arg01, fp
30d88     0C CE 05 F1 | 	add	fp, #12
30d8c     E7 94 02 F6 | 	mov	arg02, fp
30d90     10 CE 85 F1 | 	sub	fp, #16
30d94     00 96 06 F6 | 	mov	arg03, #0
30d98     D8 E5 BF FD | 	call	#_fatfs_cc_mount_volume
30d9c     3D A9 0A F6 | 	mov	local02, result1 wz
30da0     4C 00 90 5D |  if_ne	jmp	#LR__5202
30da4     10 CE 05 F1 | 	add	fp, #16
30da8     E7 92 02 F6 | 	mov	arg01, fp
30dac     0C CE 85 F1 | 	sub	fp, #12
30db0     E7 94 02 FB | 	rdlong	arg02, fp
30db4     04 CE 85 F1 | 	sub	fp, #4
30db8     1C E1 BF FD | 	call	#_fatfs_cc_follow_path
30dbc     3D A9 0A F6 | 	mov	local02, result1 wz
30dc0     2C 00 90 5D |  if_ne	jmp	#LR__5201
30dc4     3B CE 05 F1 | 	add	fp, #59
30dc8     E7 96 C2 FA | 	rdbyte	arg03, fp
30dcc     3B CE 85 F1 | 	sub	fp, #59
30dd0     80 96 CE F7 | 	test	arg03, #128 wz
30dd4     06 A8 06 56 |  if_ne	mov	local02, #6
30dd8     14 00 90 5D |  if_ne	jmp	#LR__5200
30ddc     00 A6 0E F2 | 	cmp	local01, #0 wz
30de0     E7 92 02 56 |  if_ne	mov	arg01, fp
30de4     10 92 06 51 |  if_ne	add	arg01, #16
30de8     53 95 02 56 |  if_ne	mov	arg02, local01
30dec     38 D8 BF 5D |  if_ne	call	#_fatfs_cc_get_fileinfo
30df0                 | LR__5200
30df0                 | LR__5201
30df0                 | LR__5202
30df0                 | ' 			}
30df0                 | ' 		}
30df0                 | ' 		;
30df0                 | ' 	}
30df0                 | ' 
30df0                 | ' 	return res ;
30df0     54 7B 02 F6 | 	mov	result1, local02
30df4     E7 F0 03 F6 | 	mov	ptra, fp
30df8     F2 00 A0 FD | 	call	#popregs_
30dfc                 | _fatfs_cc_f_stat_ret
30dfc     2D 00 64 FD | 	ret
30e00                 | 
30e00                 | _fatfs_cc_f_unlink
30e00     02 CA 05 F6 | 	mov	COUNT_, #2
30e04     E8 00 A0 FD | 	call	#pushregs_
30e08     74 F0 07 F1 | 	add	ptra, #116
30e0c     04 CE 05 F1 | 	add	fp, #4
30e10     E7 92 62 FC | 	wrlong	arg01, fp
30e14     00 A6 06 F6 | 	mov	local01, #0
30e18     E7 92 02 F6 | 	mov	arg01, fp
30e1c     6C CE 05 F1 | 	add	fp, #108
30e20     E7 94 02 F6 | 	mov	arg02, fp
30e24     70 CE 85 F1 | 	sub	fp, #112
30e28     02 96 06 F6 | 	mov	arg03, #2
30e2c     44 E5 BF FD | 	call	#_fatfs_cc_mount_volume
30e30     3D A9 0A F6 | 	mov	local02, result1 wz
30e34     3C 01 90 5D |  if_ne	jmp	#LR__5218
30e38     70 CE 05 F1 | 	add	fp, #112
30e3c     E7 A8 02 FB | 	rdlong	local02, fp
30e40     64 CE 85 F1 | 	sub	fp, #100
30e44     E7 A8 62 FC | 	wrlong	local02, fp
30e48     E7 92 02 F6 | 	mov	arg01, fp
30e4c     08 CE 85 F1 | 	sub	fp, #8
30e50     E7 94 02 FB | 	rdlong	arg02, fp
30e54     04 CE 85 F1 | 	sub	fp, #4
30e58     7C E0 BF FD | 	call	#_fatfs_cc_follow_path
30e5c     3D A9 0A F6 | 	mov	local02, result1 wz
30e60     10 01 90 5D |  if_ne	jmp	#LR__5217
30e64     37 CE 05 F1 | 	add	fp, #55
30e68     E7 7A C2 FA | 	rdbyte	result1, fp
30e6c     37 CE 85 F1 | 	sub	fp, #55
30e70     80 7A CE F7 | 	test	result1, #128 wz
30e74     06 A8 06 56 |  if_ne	mov	local02, #6
30e78     14 00 90 5D |  if_ne	jmp	#LR__5210
30e7c     12 CE 05 F1 | 	add	fp, #18
30e80     E7 7A C2 FA | 	rdbyte	result1, fp
30e84     12 CE 85 F1 | 	sub	fp, #18
30e88     01 7A CE F7 | 	test	result1, #1 wz
30e8c     07 A8 06 56 |  if_ne	mov	local02, #7
30e90                 | LR__5210
30e90     00 A8 0E F2 | 	cmp	local02, #0 wz
30e94     84 00 90 5D |  if_ne	jmp	#LR__5213
30e98     70 CE 05 F1 | 	add	fp, #112
30e9c     E7 92 02 FB | 	rdlong	arg01, fp
30ea0     48 CE 85 F1 | 	sub	fp, #72
30ea4     E7 94 02 FB | 	rdlong	arg02, fp
30ea8     28 CE 85 F1 | 	sub	fp, #40
30eac     40 CB BF FD | 	call	#_fatfs_cc_ld_clust
30eb0     3D A7 02 F6 | 	mov	local01, result1
30eb4     12 CE 05 F1 | 	add	fp, #18
30eb8     E7 7A C2 FA | 	rdbyte	result1, fp
30ebc     12 CE 85 F1 | 	sub	fp, #18
30ec0     10 7A CE F7 | 	test	result1, #16 wz
30ec4     54 00 90 AD |  if_e	jmp	#LR__5212
30ec8     70 CE 05 F1 | 	add	fp, #112
30ecc     E7 A8 02 FB | 	rdlong	local02, fp
30ed0     34 CE 85 F1 | 	sub	fp, #52
30ed4     E7 A8 62 FC | 	wrlong	local02, fp
30ed8     08 CE 05 F1 | 	add	fp, #8
30edc     E7 A6 62 FC | 	wrlong	local01, fp
30ee0     08 CE 85 F1 | 	sub	fp, #8
30ee4     E7 92 02 F6 | 	mov	arg01, fp
30ee8     3C CE 85 F1 | 	sub	fp, #60
30eec     00 94 06 F6 | 	mov	arg02, #0
30ef0     28 C7 BF FD | 	call	#_fatfs_cc_dir_sdi
30ef4     3D A9 0A F6 | 	mov	local02, result1 wz
30ef8     20 00 90 5D |  if_ne	jmp	#LR__5211
30efc     E7 92 02 F6 | 	mov	arg01, fp
30f00     3C 92 06 F1 | 	add	arg01, #60
30f04     00 94 06 F6 | 	mov	arg02, #0
30f08     B0 CF BF FD | 	call	#_fatfs_cc_dir_read
30f0c     3D A9 0A F6 | 	mov	local02, result1 wz
30f10     07 A8 06 A6 |  if_e	mov	local02, #7
30f14     04 A8 0E F2 | 	cmp	local02, #4 wz
30f18     00 A8 06 A6 |  if_e	mov	local02, #0
30f1c                 | LR__5211
30f1c                 | LR__5212
30f1c                 | LR__5213
30f1c     00 A8 0E F2 | 	cmp	local02, #0 wz
30f20     50 00 90 5D |  if_ne	jmp	#LR__5216
30f24     E7 92 02 F6 | 	mov	arg01, fp
30f28     0C 92 06 F1 | 	add	arg01, #12
30f2c     30 D6 BF FD | 	call	#_fatfs_cc_dir_remove
30f30     3D A9 0A F6 | 	mov	local02, result1 wz
30f34     20 00 90 5D |  if_ne	jmp	#LR__5214
30f38     00 A6 0E F2 | 	cmp	local01, #0 wz
30f3c     18 00 90 AD |  if_e	jmp	#LR__5214
30f40     E7 92 02 F6 | 	mov	arg01, fp
30f44     0C 92 06 F1 | 	add	arg01, #12
30f48     53 95 02 F6 | 	mov	arg02, local01
30f4c     00 96 06 F6 | 	mov	arg03, #0
30f50     D0 C2 BF FD | 	call	#_fatfs_cc_remove_chain
30f54     3D A9 02 F6 | 	mov	local02, result1
30f58                 | LR__5214
30f58     00 A8 0E F2 | 	cmp	local02, #0 wz
30f5c     14 00 90 5D |  if_ne	jmp	#LR__5215
30f60     70 CE 05 F1 | 	add	fp, #112
30f64     E7 92 02 FB | 	rdlong	arg01, fp
30f68     70 CE 85 F1 | 	sub	fp, #112
30f6c     C0 BD BF FD | 	call	#_fatfs_cc_sync_fs
30f70     3D A9 02 F6 | 	mov	local02, result1
30f74                 | LR__5215
30f74                 | LR__5216
30f74                 | LR__5217
30f74                 | LR__5218
30f74                 | ' 			}
30f74                 | ' 		}
30f74                 | ' 		;
30f74                 | ' 	}
30f74                 | ' 
30f74                 | ' 	return res ;
30f74     54 7B 02 F6 | 	mov	result1, local02
30f78     E7 F0 03 F6 | 	mov	ptra, fp
30f7c     F2 00 A0 FD | 	call	#popregs_
30f80                 | _fatfs_cc_f_unlink_ret
30f80     2D 00 64 FD | 	ret
30f84                 | 
30f84                 | _fatfs_cc_f_mkdir
30f84     03 CA 05 F6 | 	mov	COUNT_, #3
30f88     E8 00 A0 FD | 	call	#pushregs_
30f8c     5C F0 07 F1 | 	add	ptra, #92
30f90     04 CE 05 F1 | 	add	fp, #4
30f94     E7 92 62 FC | 	wrlong	arg01, fp
30f98     E7 92 02 F6 | 	mov	arg01, fp
30f9c     48 CE 05 F1 | 	add	fp, #72
30fa0     E7 94 02 F6 | 	mov	arg02, fp
30fa4     4C CE 85 F1 | 	sub	fp, #76
30fa8     02 96 06 F6 | 	mov	arg03, #2
30fac     C4 E3 BF FD | 	call	#_fatfs_cc_mount_volume
30fb0     3D A7 0A F6 | 	mov	local01, result1 wz
30fb4     FC 01 90 5D |  if_ne	jmp	#LR__5225
30fb8     4C CE 05 F1 | 	add	fp, #76
30fbc     E7 A6 02 FB | 	rdlong	local01, fp
30fc0     40 CE 85 F1 | 	sub	fp, #64
30fc4     E7 A6 62 FC | 	wrlong	local01, fp
30fc8     E7 92 02 F6 | 	mov	arg01, fp
30fcc     08 CE 85 F1 | 	sub	fp, #8
30fd0     E7 94 02 FB | 	rdlong	arg02, fp
30fd4     04 CE 85 F1 | 	sub	fp, #4
30fd8     FC DE BF FD | 	call	#_fatfs_cc_follow_path
30fdc     3D A7 0A F6 | 	mov	local01, result1 wz
30fe0     08 A6 06 A6 |  if_e	mov	local01, #8
30fe4     04 A6 0E F2 | 	cmp	local01, #4 wz
30fe8     C8 01 90 5D |  if_ne	jmp	#LR__5224
30fec     4C CE 05 F1 | 	add	fp, #76
30ff0     E7 A6 02 FB | 	rdlong	local01, fp
30ff4     10 CE 85 F1 | 	sub	fp, #16
30ff8     E7 A6 62 FC | 	wrlong	local01, fp
30ffc     E7 92 02 F6 | 	mov	arg01, fp
31000     3C CE 85 F1 | 	sub	fp, #60
31004     00 94 06 F6 | 	mov	arg02, #0
31008     2C C3 BF FD | 	call	#_fatfs_cc_create_chain
3100c     3D A9 0A F6 | 	mov	local02, result1 wz
31010     00 A6 06 F6 | 	mov	local01, #0
31014     07 A6 06 A6 |  if_e	mov	local01, #7
31018     01 A8 0E F2 | 	cmp	local02, #1 wz
3101c     02 A6 06 A6 |  if_e	mov	local01, #2
31020     FF FF 7F FF 
31024     FF A9 0E F2 | 	cmp	local02, ##-1 wz
31028     01 A6 06 A6 |  if_e	mov	local01, #1
3102c     8C 06 B0 FD | 	call	#_fatfs_cc__get_fattime
31030     3D AB 02 F6 | 	mov	local03, result1
31034     00 A6 0E F2 | 	cmp	local01, #0 wz
31038     EC 00 90 5D |  if_ne	jmp	#LR__5221
3103c     4C CE 05 F1 | 	add	fp, #76
31040     E7 92 02 FB | 	rdlong	arg01, fp
31044     4C CE 85 F1 | 	sub	fp, #76
31048     54 95 02 F6 | 	mov	arg02, local02
3104c     0C C5 BF FD | 	call	#_fatfs_cc_dir_clear
31050     3D A7 0A F6 | 	mov	local01, result1 wz
31054     D0 00 90 5D |  if_ne	jmp	#LR__5220
31058     4C CE 05 F1 | 	add	fp, #76
3105c     E7 92 02 FB | 	rdlong	arg01, fp
31060     4C CE 85 F1 | 	sub	fp, #76
31064     34 92 06 F1 | 	add	arg01, #52
31068     20 94 06 F6 | 	mov	arg02, #32
3106c     0B 96 06 F6 | 	mov	arg03, #11
31070     D8 00 A0 FD | 	call	#\builtin_bytefill_
31074     4C CE 05 F1 | 	add	fp, #76
31078     E7 A6 02 FB | 	rdlong	local01, fp
3107c     34 A6 06 F1 | 	add	local01, #52
31080     53 5D 48 FC | 	wrbyte	#46, local01
31084     E7 A6 02 FB | 	rdlong	local01, fp
31088     3F A6 06 F1 | 	add	local01, #63
3108c     53 21 48 FC | 	wrbyte	#16, local01
31090     E7 92 02 FB | 	rdlong	arg01, fp
31094     4A 92 06 F1 | 	add	arg01, #74
31098     49 AB 62 FC | 	wrlong	local03, arg01
3109c     E7 94 02 FB | 	rdlong	arg02, fp
310a0     4A 93 02 F6 | 	mov	arg01, arg02
310a4     4C CE 85 F1 | 	sub	fp, #76
310a8     34 94 06 F1 | 	add	arg02, #52
310ac     54 97 02 F6 | 	mov	arg03, local02
310b0     70 C9 BF FD | 	call	#_fatfs_cc_st_clust
310b4     4C CE 05 F1 | 	add	fp, #76
310b8     E7 94 02 FB | 	rdlong	arg02, fp
310bc     4A 93 02 F6 | 	mov	arg01, arg02
310c0     54 92 06 F1 | 	add	arg01, #84
310c4     4C CE 85 F1 | 	sub	fp, #76
310c8     34 94 06 F1 | 	add	arg02, #52
310cc     20 96 06 F6 | 	mov	arg03, #32
310d0     E4 3A BF FD | 	call	#__system____builtin_memmove
310d4     4C CE 05 F1 | 	add	fp, #76
310d8     E7 A6 02 FB | 	rdlong	local01, fp
310dc     55 A6 06 F1 | 	add	local01, #85
310e0     53 5D 48 FC | 	wrbyte	#46, local01
310e4     38 CE 85 F1 | 	sub	fp, #56
310e8     E7 96 02 FB | 	rdlong	arg03, fp
310ec     38 CE 05 F1 | 	add	fp, #56
310f0     E7 94 02 FB | 	rdlong	arg02, fp
310f4     4A 93 02 F6 | 	mov	arg01, arg02
310f8     4C CE 85 F1 | 	sub	fp, #76
310fc     54 94 06 F1 | 	add	arg02, #84
31100     20 C9 BF FD | 	call	#_fatfs_cc_st_clust
31104     4C CE 05 F1 | 	add	fp, #76
31108     E7 A6 02 FB | 	rdlong	local01, fp
3110c     4C CE 85 F1 | 	sub	fp, #76
31110     03 A6 06 F1 | 	add	local01, #3
31114     53 03 48 FC | 	wrbyte	#1, local01
31118     E7 92 02 F6 | 	mov	arg01, fp
3111c     0C 92 06 F1 | 	add	arg01, #12
31120     D8 D1 BF FD | 	call	#_fatfs_cc_dir_register
31124     3D A7 02 F6 | 	mov	local01, result1
31128                 | LR__5220
31128                 | LR__5221
31128     00 A6 0E F2 | 	cmp	local01, #0 wz
3112c     70 00 90 5D |  if_ne	jmp	#LR__5222
31130     28 CE 05 F1 | 	add	fp, #40
31134     E7 92 02 FB | 	rdlong	arg01, fp
31138     16 92 06 F1 | 	add	arg01, #22
3113c     49 AB 62 FC | 	wrlong	local03, arg01
31140     24 CE 05 F1 | 	add	fp, #36
31144     E7 92 02 FB | 	rdlong	arg01, fp
31148     24 CE 85 F1 | 	sub	fp, #36
3114c     E7 94 02 FB | 	rdlong	arg02, fp
31150     28 CE 85 F1 | 	sub	fp, #40
31154     54 97 02 F6 | 	mov	arg03, local02
31158     C8 C8 BF FD | 	call	#_fatfs_cc_st_clust
3115c     28 CE 05 F1 | 	add	fp, #40
31160     E7 AA 02 FB | 	rdlong	local03, fp
31164     0B AA 06 F1 | 	add	local03, #11
31168     55 21 48 FC | 	wrbyte	#16, local03
3116c     24 CE 05 F1 | 	add	fp, #36
31170     E7 AA 02 FB | 	rdlong	local03, fp
31174     4C CE 85 F1 | 	sub	fp, #76
31178     03 AA 06 F1 | 	add	local03, #3
3117c     55 03 48 FC | 	wrbyte	#1, local03
31180     00 A6 0E F2 | 	cmp	local01, #0 wz
31184     2C 00 90 5D |  if_ne	jmp	#LR__5223
31188     4C CE 05 F1 | 	add	fp, #76
3118c     E7 92 02 FB | 	rdlong	arg01, fp
31190     4C CE 85 F1 | 	sub	fp, #76
31194     98 BB BF FD | 	call	#_fatfs_cc_sync_fs
31198     3D A7 02 F6 | 	mov	local01, result1
3119c     14 00 90 FD | 	jmp	#LR__5223
311a0                 | LR__5222
311a0     E7 92 02 F6 | 	mov	arg01, fp
311a4     3C 92 06 F1 | 	add	arg01, #60
311a8     54 95 02 F6 | 	mov	arg02, local02
311ac     00 96 06 F6 | 	mov	arg03, #0
311b0     70 C0 BF FD | 	call	#_fatfs_cc_remove_chain
311b4                 | LR__5223
311b4                 | LR__5224
311b4                 | LR__5225
311b4                 | ' 				remove_chain(&sobj, dcl, 0);
311b4                 | ' 			}
311b4                 | ' 		}
311b4                 | ' 		;
311b4                 | ' 	}
311b4                 | ' 
311b4                 | ' 	return res ;
311b4     53 7B 02 F6 | 	mov	result1, local01
311b8     E7 F0 03 F6 | 	mov	ptra, fp
311bc     F2 00 A0 FD | 	call	#popregs_
311c0                 | _fatfs_cc_f_mkdir_ret
311c0     2D 00 64 FD | 	ret
311c4                 | 
311c4                 | _fatfs_cc_f_rename
311c4     03 CA 05 F6 | 	mov	COUNT_, #3
311c8     E8 00 A0 FD | 	call	#pushregs_
311cc     9C F0 07 F1 | 	add	ptra, #156
311d0     04 CE 05 F1 | 	add	fp, #4
311d4     E7 92 62 FC | 	wrlong	arg01, fp
311d8     04 CE 05 F1 | 	add	fp, #4
311dc     E7 94 62 FC | 	wrlong	arg02, fp
311e0     E7 92 02 F6 | 	mov	arg01, fp
311e4     08 CE 85 F1 | 	sub	fp, #8
311e8     4C DE BF FD | 	call	#_fatfs_cc_get_ldnumber
311ec     04 CE 05 F1 | 	add	fp, #4
311f0     E7 92 02 F6 | 	mov	arg01, fp
311f4     6C CE 05 F1 | 	add	fp, #108
311f8     E7 94 02 F6 | 	mov	arg02, fp
311fc     70 CE 85 F1 | 	sub	fp, #112
31200     02 96 06 F6 | 	mov	arg03, #2
31204     6C E1 BF FD | 	call	#_fatfs_cc_mount_volume
31208     3D A7 0A F6 | 	mov	local01, result1 wz
3120c     68 02 90 5D |  if_ne	jmp	#LR__5242
31210     70 CE 05 F1 | 	add	fp, #112
31214     E7 A8 02 FB | 	rdlong	local02, fp
31218     60 CE 85 F1 | 	sub	fp, #96
3121c     E7 A8 62 FC | 	wrlong	local02, fp
31220     E7 92 02 F6 | 	mov	arg01, fp
31224     0C CE 85 F1 | 	sub	fp, #12
31228     E7 94 02 FB | 	rdlong	arg02, fp
3122c     04 CE 85 F1 | 	sub	fp, #4
31230     A4 DC BF FD | 	call	#_fatfs_cc_follow_path
31234     3D A7 0A F6 | 	mov	local01, result1 wz
31238     14 00 90 5D |  if_ne	jmp	#LR__5230
3123c     3B CE 05 F1 | 	add	fp, #59
31240     E7 A8 C2 FA | 	rdbyte	local02, fp
31244     3B CE 85 F1 | 	sub	fp, #59
31248     A0 A8 CE F7 | 	test	local02, #160 wz
3124c     06 A6 06 56 |  if_ne	mov	local01, #6
31250                 | LR__5230
31250     00 A6 0E F2 | 	cmp	local01, #0 wz
31254     20 02 90 5D |  if_ne	jmp	#LR__5241
31258     74 CE 05 F1 | 	add	fp, #116
3125c     E7 92 02 F6 | 	mov	arg01, fp
31260     48 CE 85 F1 | 	sub	fp, #72
31264     E7 94 02 FB | 	rdlong	arg02, fp
31268     2C CE 85 F1 | 	sub	fp, #44
3126c     20 96 06 F6 | 	mov	arg03, #32
31270     44 39 BF FD | 	call	#__system____builtin_memmove
31274     40 CE 05 F1 | 	add	fp, #64
31278     E7 92 02 F6 | 	mov	arg01, fp
3127c     30 CE 85 F1 | 	sub	fp, #48
31280     E7 94 02 F6 | 	mov	arg02, fp
31284     10 CE 85 F1 | 	sub	fp, #16
31288     30 96 06 F6 | 	mov	arg03, #48
3128c     28 39 BF FD | 	call	#__system____builtin_memmove
31290     40 CE 05 F1 | 	add	fp, #64
31294     E7 92 02 F6 | 	mov	arg01, fp
31298     38 CE 85 F1 | 	sub	fp, #56
3129c     E7 94 02 FB | 	rdlong	arg02, fp
312a0     08 CE 85 F1 | 	sub	fp, #8
312a4     30 DC BF FD | 	call	#_fatfs_cc_follow_path
312a8     3D A7 0A F6 | 	mov	local01, result1 wz
312ac     44 00 90 5D |  if_ne	jmp	#LR__5233
312b0     48 CE 05 F1 | 	add	fp, #72
312b4     E7 A6 02 FB | 	rdlong	local01, fp
312b8     30 CE 85 F1 | 	sub	fp, #48
312bc     E7 7A 02 FB | 	rdlong	result1, fp
312c0     18 CE 85 F1 | 	sub	fp, #24
312c4     3D A7 0A F2 | 	cmp	local01, result1 wz
312c8     20 00 90 5D |  if_ne	jmp	#LR__5231
312cc     50 CE 05 F1 | 	add	fp, #80
312d0     E7 A6 02 FB | 	rdlong	local01, fp
312d4     30 CE 85 F1 | 	sub	fp, #48
312d8     E7 7A 02 FB | 	rdlong	result1, fp
312dc     20 CE 85 F1 | 	sub	fp, #32
312e0     3D A7 0A F2 | 	cmp	local01, result1 wz
312e4     04 A8 06 A6 |  if_e	mov	local02, #4
312e8     04 00 90 AD |  if_e	jmp	#LR__5232
312ec                 | LR__5231
312ec     08 A8 06 F6 | 	mov	local02, #8
312f0                 | LR__5232
312f0     54 A7 02 F6 | 	mov	local01, local02
312f4                 | LR__5233
312f4     04 A6 0E F2 | 	cmp	local01, #4 wz
312f8     4C 01 90 5D |  if_ne	jmp	#LR__5238
312fc     E7 92 02 F6 | 	mov	arg01, fp
31300     40 92 06 F1 | 	add	arg01, #64
31304     F4 CF BF FD | 	call	#_fatfs_cc_dir_register
31308     3D A7 0A F6 | 	mov	local01, result1 wz
3130c     38 01 90 5D |  if_ne	jmp	#LR__5237
31310     5C CE 05 F1 | 	add	fp, #92
31314     E7 AA 02 FB | 	rdlong	local03, fp
31318     55 93 02 F6 | 	mov	arg01, local03
3131c     0D 92 06 F1 | 	add	arg01, #13
31320     18 CE 05 F1 | 	add	fp, #24
31324     E7 94 02 F6 | 	mov	arg02, fp
31328     74 CE 85 F1 | 	sub	fp, #116
3132c     0D 94 06 F1 | 	add	arg02, #13
31330     13 96 06 F6 | 	mov	arg03, #19
31334     80 38 BF FD | 	call	#__system____builtin_memmove
31338     7F CE 05 F1 | 	add	fp, #127
3133c     E7 A8 C2 FA | 	rdbyte	local02, fp
31340     0B AA 06 F1 | 	add	local03, #11
31344     55 A9 42 FC | 	wrbyte	local02, local03
31348     54 A9 E2 F8 | 	getbyte	local02, local02, #0
3134c     0B AA 86 F1 | 	sub	local03, #11
31350     10 A8 CE F7 | 	test	local02, #16 wz
31354     0B AA 06 A1 |  if_e	add	local03, #11
31358     55 A9 C2 AA |  if_e	rdbyte	local02, local03
3135c     20 A8 46 A5 |  if_e	or	local02, #32
31360     55 A9 42 AC |  if_e	wrbyte	local02, local03
31364     0B AA 86 A1 |  if_e	sub	local03, #11
31368     0F CE 85 F1 | 	sub	fp, #15
3136c     E7 A8 02 FB | 	rdlong	local02, fp
31370     70 CE 85 F1 | 	sub	fp, #112
31374     03 A8 06 F1 | 	add	local02, #3
31378     54 03 48 FC | 	wrbyte	#1, local02
3137c     0B AA 06 F1 | 	add	local03, #11
31380     55 A9 C2 FA | 	rdbyte	local02, local03
31384     0B AA 86 F1 | 	sub	local03, #11
31388     10 A8 CE F7 | 	test	local02, #16 wz
3138c     B8 00 90 AD |  if_e	jmp	#LR__5236
31390     18 CE 05 F1 | 	add	fp, #24
31394     E7 A8 02 FB | 	rdlong	local02, fp
31398     30 CE 05 F1 | 	add	fp, #48
3139c     E7 96 02 FB | 	rdlong	arg03, fp
313a0     48 CE 85 F1 | 	sub	fp, #72
313a4     4B A9 0A F2 | 	cmp	local02, arg03 wz
313a8     9C 00 90 AD |  if_e	jmp	#LR__5236
313ac     70 CE 05 F1 | 	add	fp, #112
313b0     E7 92 02 FB | 	rdlong	arg01, fp
313b4     49 A9 02 F6 | 	mov	local02, arg01
313b8     70 CE 85 F1 | 	sub	fp, #112
313bc     55 95 02 F6 | 	mov	arg02, local03
313c0     2C C6 BF FD | 	call	#_fatfs_cc_ld_clust
313c4     3D 95 02 F6 | 	mov	arg02, result1
313c8     54 93 02 F6 | 	mov	arg01, local02
313cc     60 BA BF FD | 	call	#_fatfs_cc_clst2sect
313d0     3D AB 0A F6 | 	mov	local03, result1 wz
313d4     02 A6 06 A6 |  if_e	mov	local01, #2
313d8     6C 00 90 AD |  if_e	jmp	#LR__5235
313dc     70 CE 05 F1 | 	add	fp, #112
313e0     E7 92 02 FB | 	rdlong	arg01, fp
313e4     70 CE 85 F1 | 	sub	fp, #112
313e8     55 95 02 F6 | 	mov	arg02, local03
313ec     C8 B8 BF FD | 	call	#_fatfs_cc_move_window
313f0     3D A7 0A F6 | 	mov	local01, result1 wz
313f4     70 CE 05 F1 | 	add	fp, #112
313f8     E7 AA 02 FB | 	rdlong	local03, fp
313fc     70 CE 85 F1 | 	sub	fp, #112
31400     54 AA 06 F1 | 	add	local03, #84
31404     01 AA 06 A1 |  if_e	add	local03, #1
31408     55 A9 C2 AA |  if_e	rdbyte	local02, local03
3140c     01 AA 86 A1 |  if_e	sub	local03, #1
31410     2E A8 0E A2 |  if_e	cmp	local02, #46 wz
31414     30 00 90 5D |  if_ne	jmp	#LR__5234
31418     70 CE 05 F1 | 	add	fp, #112
3141c     E7 92 02 FB | 	rdlong	arg01, fp
31420     28 CE 85 F1 | 	sub	fp, #40
31424     E7 96 02 FB | 	rdlong	arg03, fp
31428     48 CE 85 F1 | 	sub	fp, #72
3142c     55 95 02 F6 | 	mov	arg02, local03
31430     F0 C5 BF FD | 	call	#_fatfs_cc_st_clust
31434     70 CE 05 F1 | 	add	fp, #112
31438     E7 A8 02 FB | 	rdlong	local02, fp
3143c     70 CE 85 F1 | 	sub	fp, #112
31440     03 A8 06 F1 | 	add	local02, #3
31444     54 03 48 FC | 	wrbyte	#1, local02
31448                 | LR__5234
31448                 | LR__5235
31448                 | LR__5236
31448                 | LR__5237
31448                 | LR__5238
31448     00 A6 0E F2 | 	cmp	local01, #0 wz
3144c     28 00 90 5D |  if_ne	jmp	#LR__5240
31450     E7 92 02 F6 | 	mov	arg01, fp
31454     10 92 06 F1 | 	add	arg01, #16
31458     04 D1 BF FD | 	call	#_fatfs_cc_dir_remove
3145c     3D A7 0A F6 | 	mov	local01, result1 wz
31460     14 00 90 5D |  if_ne	jmp	#LR__5239
31464     70 CE 05 F1 | 	add	fp, #112
31468     E7 92 02 FB | 	rdlong	arg01, fp
3146c     70 CE 85 F1 | 	sub	fp, #112
31470     BC B8 BF FD | 	call	#_fatfs_cc_sync_fs
31474     3D A7 02 F6 | 	mov	local01, result1
31478                 | LR__5239
31478                 | LR__5240
31478                 | LR__5241
31478                 | LR__5242
31478                 | ' 					res = sync_fs(fs);
31478                 | ' 				}
31478                 | ' 			}
31478                 | ' 
31478                 | ' 		}
31478                 | ' 		;
31478                 | ' 	}
31478                 | ' 
31478                 | ' 	return res ;
31478     53 7B 02 F6 | 	mov	result1, local01
3147c     E7 F0 03 F6 | 	mov	ptra, fp
31480     F2 00 A0 FD | 	call	#popregs_
31484                 | _fatfs_cc_f_rename_ret
31484     2D 00 64 FD | 	ret
31488                 | 
31488                 | _fatfs_cc___default_flush
31488     07 CA 05 F6 | 	mov	COUNT_, #7
3148c     E8 00 A0 FD | 	call	#pushregs_
31490     49 A7 02 F6 | 	mov	local01, arg01
31494     53 A9 02 FB | 	rdlong	local02, local01
31498     54 AB 02 FB | 	rdlong	local03, local02
3149c     08 A6 06 F1 | 	add	local01, #8
314a0     53 7D 02 FB | 	rdlong	result2, local01
314a4     08 A6 86 F1 | 	sub	local01, #8
314a8     08 7C CE F7 | 	test	result2, #8 wz
314ac     D4 00 90 AD |  if_e	jmp	#LR__5252
314b0     01 AA 56 F2 | 	cmps	local03, #1 wc
314b4     2C 01 90 CD |  if_b	jmp	#LR__5254
314b8     08 A6 06 F1 | 	add	local01, #8
314bc     53 7D 02 FB | 	rdlong	result2, local01
314c0     08 A6 86 F1 | 	sub	local01, #8
314c4     80 7C CE F7 | 	test	result2, #128 wz
314c8     6C 00 90 AD |  if_e	jmp	#LR__5251
314cc     08 A6 06 F1 | 	add	local01, #8
314d0     53 97 02 FB | 	rdlong	arg03, local01
314d4     08 A6 86 F1 | 	sub	local01, #8
314d8     00 97 CE F7 | 	test	arg03, #256 wz
314dc     58 00 90 AD |  if_e	jmp	#LR__5250
314e0     30 A6 06 F1 | 	add	local01, #48
314e4     53 AD 02 FB | 	rdlong	local04, local01
314e8     56 AF 02 F6 | 	mov	local05, local04
314ec     30 A6 86 F1 | 	sub	local01, #48
314f0     13 AE 46 F7 | 	zerox	local05, #19
314f4     14 AC 46 F0 | 	shr	local04, #20
314f8     02 AC 66 F0 | 	shl	local04, #2
314fc     2D AD 02 F1 | 	add	local04, __methods__
31500     56 AD 02 FB | 	rdlong	local04, local04
31504     53 93 02 F6 | 	mov	arg01, local01
31508     00 94 06 F6 | 	mov	arg02, #0
3150c     00 96 06 F6 | 	mov	arg03, #0
31510     02 98 06 F6 | 	mov	arg04, #2
31514     32 B1 02 F6 | 	mov	local06, objptr
31518     57 65 02 F6 | 	mov	objptr, local05
3151c     2D AC 62 FD | 	call	local04
31520     58 65 02 F6 | 	mov	objptr, local06
31524     08 A6 06 F1 | 	add	local01, #8
31528     53 B1 02 FB | 	rdlong	local06, local01
3152c     00 B1 26 F5 | 	andn	local06, #256
31530     53 B1 62 FC | 	wrlong	local06, local01
31534     08 A6 86 F1 | 	sub	local01, #8
31538                 | LR__5250
31538                 | LR__5251
31538     18 A6 06 F1 | 	add	local01, #24
3153c     53 AD 02 FB | 	rdlong	local04, local01
31540     56 AF 02 F6 | 	mov	local05, local04
31544     18 A6 86 F1 | 	sub	local01, #24
31548     13 AE 46 F7 | 	zerox	local05, #19
3154c     14 AC 46 F0 | 	shr	local04, #20
31550     02 AC 66 F0 | 	shl	local04, #2
31554     2D AD 02 F1 | 	add	local04, __methods__
31558     56 AD 02 FB | 	rdlong	local04, local04
3155c     0C A8 06 F1 | 	add	local02, #12
31560     54 95 02 FB | 	rdlong	arg02, local02
31564     0C A8 86 F1 | 	sub	local02, #12
31568     53 93 02 F6 | 	mov	arg01, local01
3156c     55 97 02 F6 | 	mov	arg03, local03
31570     32 B1 02 F6 | 	mov	local06, objptr
31574     57 65 02 F6 | 	mov	objptr, local05
31578     2D AC 62 FD | 	call	local04
3157c     58 65 02 F6 | 	mov	objptr, local06
31580     60 00 90 FD | 	jmp	#LR__5254
31584                 | LR__5252
31584     08 A6 06 F1 | 	add	local01, #8
31588     53 B1 02 FB | 	rdlong	local06, local01
3158c     08 A6 86 F1 | 	sub	local01, #8
31590     04 B0 CE F7 | 	test	local06, #4 wz
31594     00 AA 0E 52 |  if_ne	cmp	local03, #0 wz
31598     48 00 90 AD |  if_e	jmp	#LR__5253
3159c     55 95 62 F6 | 	neg	arg02, local03
315a0     4A 97 02 F6 | 	mov	arg03, arg02
315a4     1F 96 C6 F0 | 	sar	arg03, #31
315a8     30 A6 06 F1 | 	add	local01, #48
315ac     53 AD 02 FB | 	rdlong	local04, local01
315b0     56 AF 02 F6 | 	mov	local05, local04
315b4     30 A6 86 F1 | 	sub	local01, #48
315b8     13 AE 46 F7 | 	zerox	local05, #19
315bc     14 AC 46 F0 | 	shr	local04, #20
315c0     02 AC 66 F0 | 	shl	local04, #2
315c4     2D AD 02 F1 | 	add	local04, __methods__
315c8     56 AD 02 FB | 	rdlong	local04, local04
315cc     53 93 02 F6 | 	mov	arg01, local01
315d0     01 98 06 F6 | 	mov	arg04, #1
315d4     32 B1 02 F6 | 	mov	local06, objptr
315d8     57 65 02 F6 | 	mov	objptr, local05
315dc     2D AC 62 FD | 	call	local04
315e0     58 65 02 F6 | 	mov	objptr, local06
315e4                 | LR__5253
315e4                 | LR__5254
315e4     54 01 68 FC | 	wrlong	#0, local02
315e8     04 A8 06 F1 | 	add	local02, #4
315ec     54 01 68 FC | 	wrlong	#0, local02
315f0     08 A6 06 F1 | 	add	local01, #8
315f4     53 B3 02 FB | 	rdlong	local07, local01
315f8     0C B2 26 F5 | 	andn	local07, #12
315fc     53 B3 62 FC | 	wrlong	local07, local01
31600                 | '     }
31600                 | '     b->cnt = 0;
31600                 | '     b->ptr = 0;
31600                 | '     f->state &= ~( (0x08) | (0x04) );
31600                 | '     return 0;
31600     00 7A 06 F6 | 	mov	result1, #0
31604     E7 F0 03 F6 | 	mov	ptra, fp
31608     F2 00 A0 FD | 	call	#popregs_
3160c                 | _fatfs_cc___default_flush_ret
3160c     2D 00 64 FD | 	ret
31610                 | 
31610                 | _fatfs_cc_getenv
31610     06 CA 05 F6 | 	mov	COUNT_, #6
31614     E8 00 A0 FD | 	call	#pushregs_
31618     49 A7 02 F6 | 	mov	local01, arg01
3161c     49 A9 02 F6 | 	mov	local02, arg01
31620     D7 06 48 FB | 	callpa	#(@LR__5261-@LR__5260)>>2,fcache_load_ptr_
31624                 | LR__5260
31624     54 7B CA FA | 	rdbyte	result1, local02 wz
31628     01 A8 06 51 |  if_ne	add	local02, #1
3162c     F4 FF 9F 5D |  if_ne	jmp	#LR__5260
31630                 | LR__5261
31630     49 A9 82 F1 | 	sub	local02, arg01
31634     54 7B 02 F6 | 	mov	result1, local02
31638     02 00 00 FF 
3163c     FC 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
31640     36 97 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
31644     02 00 00 FF 
31648     FC 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
3164c                 | '             return 0;
3164c     00 7A 06 A6 |  if_e	mov	result1, #0
31650     5C 00 90 AD |  if_e	jmp	#LR__5264
31654                 | ' 
31654                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
31654     02 00 00 FF 
31658     FC 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
3165c     36 AB 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
31660     02 00 00 FF 
31664     FC 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
31668                 | LR__5262
31668     55 AD 0A FB | 	rdlong	local04, local03 wz
3166c     3C 00 90 AD |  if_e	jmp	#LR__5263
31670     56 93 02 F6 | 	mov	arg01, local04
31674     53 95 02 F6 | 	mov	arg02, local01
31678     54 97 02 F6 | 	mov	arg03, local02
3167c     24 AB BF FD | 	call	#_fatfs_cc_strncmp
31680     00 7A 0E F2 | 	cmp	result1, #0 wz
31684     54 AF 02 A6 |  if_e	mov	local05, local02
31688     56 AF 02 A1 |  if_e	add	local05, local04
3168c     57 B1 C2 AA |  if_e	rdbyte	local06, local05
31690     3D B0 0E A2 |  if_e	cmp	local06, #61 wz
31694                 | ' 			return name+len+1;
31694     54 AD 02 A1 |  if_e	add	local04, local02
31698     01 AC 06 A1 |  if_e	add	local04, #1
3169c     56 7B 02 A6 |  if_e	mov	result1, local04
316a0     0C 00 90 AD |  if_e	jmp	#LR__5264
316a4     04 AA 06 F1 | 	add	local03, #4
316a8     BC FF 9F FD | 	jmp	#LR__5262
316ac                 | LR__5263
316ac                 | ' 	}
316ac                 | ' 	return 0;
316ac     00 7A 06 F6 | 	mov	result1, #0
316b0                 | LR__5264
316b0     E7 F0 03 F6 | 	mov	ptra, fp
316b4     F2 00 A0 FD | 	call	#popregs_
316b8                 | _fatfs_cc_getenv_ret
316b8     2D 00 64 FD | 	ret
316bc                 | 
316bc                 | _fatfs_cc__get_fattime
316bc     00 CA 05 F6 | 	mov	COUNT_, #0
316c0     E8 00 A0 FD | 	call	#pushregs_
316c4     34 F0 07 F1 | 	add	ptra, #52
316c8     00 92 06 F6 | 	mov	arg01, #0
316cc     A4 AB BF FD | 	call	#_fatfs_cc_time
316d0     04 CE 05 F1 | 	add	fp, #4
316d4     E7 7A 62 FC | 	wrlong	result1, fp
316d8     E7 92 02 F6 | 	mov	arg01, fp
316dc     0C CE 05 F1 | 	add	fp, #12
316e0     E7 94 02 F6 | 	mov	arg02, fp
316e4     10 CE 85 F1 | 	sub	fp, #16
316e8     70 AD BF FD | 	call	#_fatfs_cc__gmtime_r
316ec     24 CE 05 F1 | 	add	fp, #36
316f0     E7 7A 02 FB | 	rdlong	result1, fp
316f4     50 7A 86 F1 | 	sub	result1, #80
316f8     09 7A 66 F0 | 	shl	result1, #9
316fc     04 CE 85 F1 | 	sub	fp, #4
31700     E7 94 02 FB | 	rdlong	arg02, fp
31704     01 94 06 F1 | 	add	arg02, #1
31708     05 94 66 F0 | 	shl	arg02, #5
3170c     4A 7B 42 F5 | 	or	result1, arg02
31710     04 CE 85 F1 | 	sub	fp, #4
31714     E7 94 02 FB | 	rdlong	arg02, fp
31718     4A 7B 42 F5 | 	or	result1, arg02
3171c     04 CE 85 F1 | 	sub	fp, #4
31720     E7 94 02 FB | 	rdlong	arg02, fp
31724     0B 94 66 F0 | 	shl	arg02, #11
31728     04 CE 85 F1 | 	sub	fp, #4
3172c     E7 92 02 FB | 	rdlong	arg01, fp
31730     05 92 66 F0 | 	shl	arg01, #5
31734     49 95 42 F5 | 	or	arg02, arg01
31738     04 CE 85 F1 | 	sub	fp, #4
3173c     E7 92 02 FB | 	rdlong	arg01, fp
31740     10 CE 85 F1 | 	sub	fp, #16
31744     49 95 42 F5 | 	or	arg02, arg01
31748                 | ' 
31748                 | '     now = time(0);
31748                 | '     _gmtime_r (&now, &date);
31748                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
31748                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
31748                 | '     return (ffdate << 16) | fftime;
31748     10 7A 66 F0 | 	shl	result1, #16
3174c     4A 7B 42 F5 | 	or	result1, arg02
31750     E7 F0 03 F6 | 	mov	ptra, fp
31754     F2 00 A0 FD | 	call	#popregs_
31758                 | _fatfs_cc__get_fattime_ret
31758     2D 00 64 FD | 	ret
3175c                 | 
3175c                 | _fatfs_cc_unixtime_1154
3175c     02 CA 05 F6 | 	mov	COUNT_, #2
31760     E8 00 A0 FD | 	call	#pushregs_
31764     34 F0 07 F1 | 	add	ptra, #52
31768     49 A7 02 F6 | 	mov	local01, arg01
3176c     09 A6 46 F0 | 	shr	local01, #9
31770     7F A6 06 F5 | 	and	local01, #127
31774     50 A8 06 F6 | 	mov	local02, #80
31778     53 A9 02 F1 | 	add	local02, local01
3177c     24 CE 05 F1 | 	add	fp, #36
31780     E7 A8 62 FC | 	wrlong	local02, fp
31784     49 A9 02 F6 | 	mov	local02, arg01
31788     05 A8 46 F0 | 	shr	local02, #5
3178c     54 A9 42 F8 | 	getnib	local02, local02, #0
31790     01 A8 86 F1 | 	sub	local02, #1
31794     04 CE 85 F1 | 	sub	fp, #4
31798     E7 A8 62 FC | 	wrlong	local02, fp
3179c     1F 92 06 F5 | 	and	arg01, #31
317a0     04 CE 85 F1 | 	sub	fp, #4
317a4     E7 92 62 FC | 	wrlong	arg01, fp
317a8     4A A9 02 F6 | 	mov	local02, arg02
317ac     0B A8 46 F0 | 	shr	local02, #11
317b0     1F A8 06 F5 | 	and	local02, #31
317b4     04 CE 85 F1 | 	sub	fp, #4
317b8     E7 A8 62 FC | 	wrlong	local02, fp
317bc     4A A9 02 F6 | 	mov	local02, arg02
317c0     05 A8 46 F0 | 	shr	local02, #5
317c4     3F A8 06 F5 | 	and	local02, #63
317c8     04 CE 85 F1 | 	sub	fp, #4
317cc     E7 A8 62 FC | 	wrlong	local02, fp
317d0     1F 94 06 F5 | 	and	arg02, #31
317d4     01 94 66 F0 | 	shl	arg02, #1
317d8     04 CE 85 F1 | 	sub	fp, #4
317dc     E7 94 62 FC | 	wrlong	arg02, fp
317e0     E7 92 02 F6 | 	mov	arg01, fp
317e4     10 CE 85 F1 | 	sub	fp, #16
317e8     C8 AA BF FD | 	call	#_fatfs_cc_mktime
317ec                 | ' 
317ec                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
317ec                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
317ec                 | '     date.tm_mday = (dosdate & 0x1f);
317ec                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
317ec                 | '     date.tm_min = (dostime >> 5) & 0x3f;
317ec                 | '     date.tm_sec = (dostime & 0x1f) << 1;
317ec                 | ' 
317ec                 | '     t = mktime(&date);
317ec                 | ' #line 66 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/fatfs/fatfs.cc"
317ec                 | '     return t;
317ec     E7 F0 03 F6 | 	mov	ptra, fp
317f0     F2 00 A0 FD | 	call	#popregs_
317f4                 | _fatfs_cc_unixtime_1154_ret
317f4     2D 00 64 FD | 	ret
317f8                 | 
317f8                 | _fatfs_cc__set_dos_error_1156
317f8     49 81 02 F6 | 	mov	_var01, arg01
317fc                 | ' #line 82 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/fatfs/fatfs.cc"
317fc                 | '     switch (derr) {
317fc     14 80 26 F3 | 	fle	_var01, #20
31800     30 80 62 FD | 	jmprel	_var01
31804                 | LR__5270
31804     50 00 90 FD | 	jmp	#LR__5271
31808     84 00 90 FD | 	jmp	#LR__5285
3180c     80 00 90 FD | 	jmp	#LR__5286
31810     7C 00 90 FD | 	jmp	#LR__5287
31814     48 00 90 FD | 	jmp	#LR__5272
31818     44 00 90 FD | 	jmp	#LR__5273
3181c     40 00 90 FD | 	jmp	#LR__5274
31820     44 00 90 FD | 	jmp	#LR__5275
31824     48 00 90 FD | 	jmp	#LR__5277
31828     54 00 90 FD | 	jmp	#LR__5280
3182c     38 00 90 FD | 	jmp	#LR__5276
31830     4C 00 90 FD | 	jmp	#LR__5281
31834     48 00 90 FD | 	jmp	#LR__5282
31838     44 00 90 FD | 	jmp	#LR__5283
3183c     50 00 90 FD | 	jmp	#LR__5288
31840     4C 00 90 FD | 	jmp	#LR__5288
31844     48 00 90 FD | 	jmp	#LR__5288
31848     2C 00 90 FD | 	jmp	#LR__5278
3184c     38 00 90 FD | 	jmp	#LR__5284
31850     2C 00 90 FD | 	jmp	#LR__5279
31854     38 00 90 FD | 	jmp	#LR__5288
31858                 | LR__5271
31858     00 82 06 F6 | 	mov	_var02, #0
3185c                 | '         r = 0;
3185c                 | '         break;
3185c     34 00 90 FD | 	jmp	#LR__5289
31860                 | LR__5272
31860                 | LR__5273
31860                 | LR__5274
31860     04 82 06 F6 | 	mov	_var02, #4
31864                 | '         r =  4 ;
31864                 | '         break;
31864     2C 00 90 FD | 	jmp	#LR__5289
31868                 | LR__5275
31868                 | LR__5276
31868     06 82 06 F6 | 	mov	_var02, #6
3186c                 | '         r =  6 ;
3186c                 | '         break;
3186c     24 00 90 FD | 	jmp	#LR__5289
31870                 | LR__5277
31870     09 82 06 F6 | 	mov	_var02, #9
31874                 | '         r =  9 ;
31874                 | '         break;
31874     1C 00 90 FD | 	jmp	#LR__5289
31878                 | LR__5278
31878     07 82 06 F6 | 	mov	_var02, #7
3187c                 | '         r =  7 ;
3187c                 | '         break;
3187c     14 00 90 FD | 	jmp	#LR__5289
31880                 | LR__5279
31880                 | LR__5280
31880                 | LR__5281
31880                 | LR__5282
31880                 | LR__5283
31880     0A 82 06 F6 | 	mov	_var02, #10
31884                 | '         r =  10 ;
31884                 | '         break;
31884     0C 00 90 FD | 	jmp	#LR__5289
31888                 | LR__5284
31888     0B 82 06 F6 | 	mov	_var02, #11
3188c                 | '         r =  11 ;
3188c                 | '         break;
3188c     04 00 90 FD | 	jmp	#LR__5289
31890                 | LR__5285
31890                 | LR__5286
31890                 | LR__5287
31890                 | LR__5288
31890     0C 82 06 F6 | 	mov	_var02, #12
31894                 | '         r =  12 ;
31894                 | '         break;
31894                 | LR__5289
31894                 | '     }
31894                 | '     return _seterror(r);
31894     00 82 4E F2 | 	cmps	_var02, #0 wz
31898     20 68 06 F1 | 	add	ptr___system__dat__, #32
3189c     34 83 62 FC | 	wrlong	_var02, ptr___system__dat__
318a0     20 68 86 F1 | 	sub	ptr___system__dat__, #32
318a4     01 7A 66 56 |  if_ne	neg	result1, #1
318a8     00 7A 06 A6 |  if_e	mov	result1, #0
318ac                 | _fatfs_cc__set_dos_error_1156_ret
318ac     2D 00 64 FD | 	ret
318b0                 | 
318b0                 | _fatfs_cc_v_creat
318b0     04 CA 05 F6 | 	mov	COUNT_, #4
318b4     E8 00 A0 FD | 	call	#pushregs_
318b8     49 A7 02 F6 | 	mov	local01, arg01
318bc     4A A9 02 F6 | 	mov	local02, arg02
318c0     03 00 00 FF 
318c4     38 92 06 F6 | 	mov	arg01, ##1592
318c8                 | '     return _gc_alloc(size);
318c8     10 94 06 F6 | 	mov	arg02, #16
318cc     70 6E BF FD | 	call	#__system___gc_doalloc
318d0     3D AB 0A F6 | 	mov	local03, result1 wz
318d4                 | '       return _seterror( 7 );
318d4     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
318d8     34 0F 68 AC |  if_e	wrlong	#7, ptr___system__dat__
318dc     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
318e0     01 7A 66 A6 |  if_e	neg	result1, #1
318e4     50 00 90 AD |  if_e	jmp	#LR__5291
318e8     55 93 02 F6 | 	mov	arg01, local03
318ec     00 94 06 F6 | 	mov	arg02, #0
318f0     03 00 00 FF 
318f4     38 96 06 F6 | 	mov	arg03, ##1592
318f8     D8 00 A0 FD | 	call	#\builtin_bytefill_
318fc     55 93 02 F6 | 	mov	arg01, local03
31900     02 00 00 FF 
31904     10 92 06 F1 | 	add	arg01, ##1040
31908     54 95 02 F6 | 	mov	arg02, local02
3190c     07 96 06 F6 | 	mov	arg03, #7
31910     D8 E0 BF FD | 	call	#_fatfs_cc_f_open
31914     3D AD 0A F6 | 	mov	local04, result1 wz
31918     14 00 90 AD |  if_e	jmp	#LR__5290
3191c     55 93 02 F6 | 	mov	arg01, local03
31920                 | '     return _gc_free(ptr);
31920     20 6F BF FD | 	call	#__system___gc_free
31924                 | '     free(f);
31924                 | '     return _set_dos_error(r);
31924     56 93 02 F6 | 	mov	arg01, local04
31928     CC FE BF FD | 	call	#_fatfs_cc__set_dos_error_1156
3192c     08 00 90 FD | 	jmp	#LR__5291
31930                 | LR__5290
31930     53 AB 62 FC | 	wrlong	local03, local01
31934                 | '   }
31934                 | '   fil->vfsdata = f;
31934                 | '   return 0;
31934     00 7A 06 F6 | 	mov	result1, #0
31938                 | LR__5291
31938     E7 F0 03 F6 | 	mov	ptra, fp
3193c     F2 00 A0 FD | 	call	#popregs_
31940                 | _fatfs_cc_v_creat_ret
31940     2D 00 64 FD | 	ret
31944                 | 
31944                 | _fatfs_cc_v_close
31944     02 CA 05 F6 | 	mov	COUNT_, #2
31948     E8 00 A0 FD | 	call	#pushregs_
3194c     49 A7 02 FB | 	rdlong	local01, arg01
31950     53 93 02 F6 | 	mov	arg01, local01
31954     02 00 00 FF 
31958     10 92 06 F1 | 	add	arg01, ##1040
3195c     34 EE BF FD | 	call	#_fatfs_cc_f_close
31960     3D A9 02 F6 | 	mov	local02, result1
31964     53 93 02 F6 | 	mov	arg01, local01
31968                 | '     return _gc_free(ptr);
31968     D8 6E BF FD | 	call	#__system___gc_free
3196c                 | '     FAT_FIL *f = fil->vfsdata;
3196c                 | '     r=f_close(&f->fil);
3196c                 | '     free(f);
3196c                 | '     return _set_dos_error(r);
3196c     54 93 02 F6 | 	mov	arg01, local02
31970     84 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31974     E7 F0 03 F6 | 	mov	ptra, fp
31978     F2 00 A0 FD | 	call	#popregs_
3197c                 | _fatfs_cc_v_close_ret
3197c     2D 00 64 FD | 	ret
31980                 | 
31980                 | _fatfs_cc_v_opendir
31980     04 CA 05 F6 | 	mov	COUNT_, #4
31984     E8 00 A0 FD | 	call	#pushregs_
31988     49 A7 02 F6 | 	mov	local01, arg01
3198c     4A A9 02 F6 | 	mov	local02, arg02
31990     30 92 06 F6 | 	mov	arg01, #48
31994                 | '     return _gc_alloc(size);
31994     10 94 06 F6 | 	mov	arg02, #16
31998     A4 6D BF FD | 	call	#__system___gc_doalloc
3199c     3D AB 0A F6 | 	mov	local03, result1 wz
319a0                 | ' #line 166 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/fatfs/fatfs.cc"
319a0                 | '       return _seterror( 7 );
319a0     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
319a4     34 0F 68 AC |  if_e	wrlong	#7, ptr___system__dat__
319a8     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
319ac     01 7A 66 A6 |  if_e	neg	result1, #1
319b0     34 00 90 AD |  if_e	jmp	#LR__5301
319b4     54 95 02 F6 | 	mov	arg02, local02
319b8     55 93 02 F6 | 	mov	arg01, local03
319bc     C0 F1 BF FD | 	call	#_fatfs_cc_f_opendir
319c0     3D AD 0A F6 | 	mov	local04, result1 wz
319c4     14 00 90 AD |  if_e	jmp	#LR__5300
319c8     55 93 02 F6 | 	mov	arg01, local03
319cc                 | '     return _gc_free(ptr);
319cc     74 6E BF FD | 	call	#__system___gc_free
319d0                 | '         free(f);
319d0                 | '         return _set_dos_error(r);
319d0     56 93 02 F6 | 	mov	arg01, local04
319d4     20 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1156
319d8     0C 00 90 FD | 	jmp	#LR__5301
319dc                 | LR__5300
319dc     04 A6 06 F1 | 	add	local01, #4
319e0     53 AB 62 FC | 	wrlong	local03, local01
319e4                 | '     }
319e4                 | '     dir->vfsdata = f;
319e4                 | '     return 0;
319e4     00 7A 06 F6 | 	mov	result1, #0
319e8                 | LR__5301
319e8     E7 F0 03 F6 | 	mov	ptra, fp
319ec     F2 00 A0 FD | 	call	#popregs_
319f0                 | _fatfs_cc_v_opendir_ret
319f0     2D 00 64 FD | 	ret
319f4                 | 
319f4                 | _fatfs_cc_v_closedir
319f4     02 CA 05 F6 | 	mov	COUNT_, #2
319f8     E8 00 A0 FD | 	call	#pushregs_
319fc     04 92 06 F1 | 	add	arg01, #4
31a00     49 A7 02 FB | 	rdlong	local01, arg01
31a04     53 93 02 F6 | 	mov	arg01, local01
31a08     90 F2 BF FD | 	call	#_fatfs_cc_f_closedir
31a0c     3D A9 02 F6 | 	mov	local02, result1
31a10     53 93 02 F6 | 	mov	arg01, local01
31a14                 | '     return _gc_free(ptr);
31a14     2C 6E BF FD | 	call	#__system___gc_free
31a18     00 A8 0E F2 | 	cmp	local02, #0 wz
31a1c     54 93 02 56 |  if_ne	mov	arg01, local02
31a20     D4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_1156
31a24                 | '     return r;
31a24     54 7B 02 F6 | 	mov	result1, local02
31a28     E7 F0 03 F6 | 	mov	ptra, fp
31a2c     F2 00 A0 FD | 	call	#popregs_
31a30                 | _fatfs_cc_v_closedir_ret
31a30     2D 00 64 FD | 	ret
31a34                 | 
31a34                 | _fatfs_cc_v_readdir
31a34     01 CA 05 F6 | 	mov	COUNT_, #1
31a38     E8 00 A0 FD | 	call	#pushregs_
31a3c     2C F1 07 F1 | 	add	ptra, #300
31a40     4A A7 02 F6 | 	mov	local01, arg02
31a44     04 92 06 F1 | 	add	arg01, #4
31a48     49 93 02 FB | 	rdlong	arg01, arg01
31a4c     E7 94 02 F6 | 	mov	arg02, fp
31a50     0C 94 06 F1 | 	add	arg02, #12
31a54     78 F2 BF FD | 	call	#_fatfs_cc_f_readdir
31a58     3D 97 0A F6 | 	mov	arg03, result1 wz
31a5c     0C 00 90 AD |  if_e	jmp	#LR__5310
31a60                 | '         return _set_dos_error(r);
31a60     4B 93 02 F6 | 	mov	arg01, arg03
31a64     90 FD BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31a68     88 00 90 FD | 	jmp	#LR__5311
31a6c                 | LR__5310
31a6c     28 CE 05 F1 | 	add	fp, #40
31a70     E7 96 CA FA | 	rdbyte	arg03, fp wz
31a74     28 CE 85 F1 | 	sub	fp, #40
31a78                 | '         return -1;
31a78     01 7A 66 A6 |  if_e	neg	result1, #1
31a7c     74 00 90 AD |  if_e	jmp	#LR__5311
31a80     E7 94 02 F6 | 	mov	arg02, fp
31a84     28 94 06 F1 | 	add	arg02, #40
31a88     53 93 02 F6 | 	mov	arg01, local01
31a8c     3F 96 06 F6 | 	mov	arg03, #63
31a90     7C A6 BF FD | 	call	#_fatfs_cc_strncpy
31a94     3F A6 06 F1 | 	add	local01, #63
31a98     53 01 48 FC | 	wrbyte	#0, local01
31a9c     3F A6 86 F1 | 	sub	local01, #63
31aa0     14 CE 05 F1 | 	add	fp, #20
31aa4     E7 96 C2 FA | 	rdbyte	arg03, fp
31aa8     10 96 CE F7 | 	test	arg03, #16 wz
31aac     50 A6 06 51 |  if_ne	add	local01, #80
31ab0     53 03 48 5C |  if_ne	wrbyte	#1, local01
31ab4     50 A6 E6 F3 | 	sumnz	local01, #80
31ab8     53 01 48 AC |  if_e	wrbyte	#0, local01
31abc     50 A6 86 A1 |  if_e	sub	local01, #80
31ac0     08 CE 85 F1 | 	sub	fp, #8
31ac4     E7 96 02 FB | 	rdlong	arg03, fp
31ac8     48 A6 06 F1 | 	add	local01, #72
31acc     53 97 62 FC | 	wrlong	arg03, local01
31ad0     04 CE 05 F1 | 	add	fp, #4
31ad4     E7 92 E2 FA | 	rdword	arg01, fp
31ad8     02 CE 05 F1 | 	add	fp, #2
31adc     E7 94 E2 FA | 	rdword	arg02, fp
31ae0     12 CE 85 F1 | 	sub	fp, #18
31ae4     74 FC BF FD | 	call	#_fatfs_cc_unixtime_1154
31ae8     04 A6 06 F1 | 	add	local01, #4
31aec     53 7B 62 FC | 	wrlong	result1, local01
31af0                 | '         ent->d_type =  (0) ;
31af0                 | '     }
31af0                 | '     ent->d_size = finfo.fsize;
31af0                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
31af0                 | '     return 0;
31af0     00 7A 06 F6 | 	mov	result1, #0
31af4                 | LR__5311
31af4     E7 F0 03 F6 | 	mov	ptra, fp
31af8     F2 00 A0 FD | 	call	#popregs_
31afc                 | _fatfs_cc_v_readdir_ret
31afc     2D 00 64 FD | 	ret
31b00                 | 
31b00                 | _fatfs_cc_v_stat
31b00     05 CA 05 F6 | 	mov	COUNT_, #5
31b04     E8 00 A0 FD | 	call	#pushregs_
31b08     30 F1 07 F1 | 	add	ptra, #304
31b0c     49 A7 02 F6 | 	mov	local01, arg01
31b10     4A A9 02 F6 | 	mov	local02, arg02
31b14     54 93 02 F6 | 	mov	arg01, local02
31b18     00 94 06 F6 | 	mov	arg02, #0
31b1c     34 96 06 F6 | 	mov	arg03, #52
31b20     D8 00 A0 FD | 	call	#\builtin_bytefill_
31b24     53 7D CA FA | 	rdbyte	result2, local01 wz
31b28     1C 00 90 AD |  if_e	jmp	#LR__5320
31b2c     53 7D C2 FA | 	rdbyte	result2, local01
31b30     2E 7C 0E F2 | 	cmp	result2, #46 wz
31b34     01 A6 06 A1 |  if_e	add	local01, #1
31b38     53 AB C2 AA |  if_e	rdbyte	local03, local01
31b3c     01 A6 86 A1 |  if_e	sub	local01, #1
31b40     00 AA 4E A2 |  if_e	cmps	local03, #0 wz
31b44     14 00 90 5D |  if_ne	jmp	#LR__5321
31b48                 | LR__5320
31b48     18 CE 05 F1 | 	add	fp, #24
31b4c     E7 20 48 FC | 	wrbyte	#16, fp
31b50     18 CE 85 F1 | 	sub	fp, #24
31b54     00 AC 06 F6 | 	mov	local04, #0
31b58     14 00 90 FD | 	jmp	#LR__5322
31b5c                 | LR__5321
31b5c     E7 94 02 F6 | 	mov	arg02, fp
31b60     10 94 06 F1 | 	add	arg02, #16
31b64     53 93 02 F6 | 	mov	arg01, local01
31b68     00 F2 BF FD | 	call	#_fatfs_cc_f_stat
31b6c     3D AD 02 F6 | 	mov	local04, result1
31b70                 | LR__5322
31b70     00 AC 0E F2 | 	cmp	local04, #0 wz
31b74     0C 00 90 AD |  if_e	jmp	#LR__5323
31b78                 | '         return _set_dos_error(r);
31b78     56 93 02 F6 | 	mov	arg01, local04
31b7c     78 FC BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31b80     9C 00 90 FD | 	jmp	#LR__5324
31b84                 | LR__5323
31b84     24 AF 06 F6 | 	mov	local05, #292
31b88     18 CE 05 F1 | 	add	fp, #24
31b8c     E7 AA C2 FA | 	rdbyte	local03, fp
31b90     01 AA CE F7 | 	test	local03, #1 wz
31b94     B6 AF 06 A6 |  if_e	mov	local05, #438
31b98     10 AA CE F7 | 	test	local03, #16 wz
31b9c     08 00 00 5F 
31ba0     49 AE 46 55 |  if_ne	or	local05, ##4169
31ba4     08 A8 06 F1 | 	add	local02, #8
31ba8     54 AF 62 FC | 	wrlong	local05, local02
31bac     04 A8 06 F1 | 	add	local02, #4
31bb0     54 03 68 FC | 	wrlong	#1, local02
31bb4     08 CE 85 F1 | 	sub	fp, #8
31bb8     E7 7A 02 FB | 	rdlong	result1, fp
31bbc     0C A8 06 F1 | 	add	local02, #12
31bc0     54 7B 62 FC | 	wrlong	result1, local02
31bc4     04 A8 06 F1 | 	add	local02, #4
31bc8     54 01 68 FC | 	wrlong	#0, local02
31bcc     04 A8 06 F1 | 	add	local02, #4
31bd0     01 00 80 FF 
31bd4     54 01 68 FC | 	wrlong	##512, local02
31bd8     E7 AA 02 FB | 	rdlong	local03, fp
31bdc     FF AB 06 F1 | 	add	local03, #511
31be0     09 AA 46 F0 | 	shr	local03, #9
31be4     04 A8 06 F1 | 	add	local02, #4
31be8     54 AB 62 FC | 	wrlong	local03, local02
31bec     04 CE 05 F1 | 	add	fp, #4
31bf0     E7 92 E2 FA | 	rdword	arg01, fp
31bf4     02 CE 05 F1 | 	add	fp, #2
31bf8     E7 94 E2 FA | 	rdword	arg02, fp
31bfc     16 CE 85 F1 | 	sub	fp, #22
31c00     58 FB BF FD | 	call	#_fatfs_cc_unixtime_1154
31c04     0C A8 06 F1 | 	add	local02, #12
31c08     54 7B 62 FC | 	wrlong	result1, local02
31c0c     04 A8 86 F1 | 	sub	local02, #4
31c10     54 7B 62 FC | 	wrlong	result1, local02
31c14     04 A8 86 F1 | 	sub	local02, #4
31c18     54 7B 62 FC | 	wrlong	result1, local02
31c1c                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
31c1c                 | '     }
31c1c                 | '     buf->st_mode = mode;
31c1c                 | '     buf->st_nlink = 1;
31c1c                 | '     buf->st_size = finfo.fsize;
31c1c                 | '     buf->st_blksize = 512;
31c1c                 | '     buf->st_blocks = (finfo.fsize + 511) / 512;
31c1c                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
31c1c                 | ' #line 257 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/fatfs/fatfs.cc"
31c1c                 | '     return r;
31c1c     56 7B 02 F6 | 	mov	result1, local04
31c20                 | LR__5324
31c20     E7 F0 03 F6 | 	mov	ptra, fp
31c24     F2 00 A0 FD | 	call	#popregs_
31c28                 | _fatfs_cc_v_stat_ret
31c28     2D 00 64 FD | 	ret
31c2c                 | 
31c2c                 | _fatfs_cc_v_read
31c2c     02 CA 05 F6 | 	mov	COUNT_, #2
31c30     E8 00 A0 FD | 	call	#pushregs_
31c34     1C F0 07 F1 | 	add	ptra, #28
31c38     49 A7 02 F6 | 	mov	local01, arg01
31c3c     53 93 0A FB | 	rdlong	arg01, local01 wz
31c40                 | '         return _seterror( 5 );
31c40     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
31c44     34 0B 68 AC |  if_e	wrlong	#5, ptr___system__dat__
31c48     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
31c4c     01 7A 66 A6 |  if_e	neg	result1, #1
31c50     58 00 90 AD |  if_e	jmp	#LR__5331
31c54     02 00 00 FF 
31c58     10 92 06 F1 | 	add	arg01, ##1040
31c5c     E7 98 02 F6 | 	mov	arg04, fp
31c60     18 98 06 F1 | 	add	arg04, #24
31c64     DC E1 BF FD | 	call	#_fatfs_cc_f_read
31c68     3D 99 0A F6 | 	mov	arg04, result1 wz
31c6c     1C 00 90 AD |  if_e	jmp	#LR__5330
31c70     08 A6 06 F1 | 	add	local01, #8
31c74     53 93 02 FB | 	rdlong	arg01, local01
31c78     20 92 46 F5 | 	or	arg01, #32
31c7c     53 93 62 FC | 	wrlong	arg01, local01
31c80                 | '         fil->state |=  (0x20) ;
31c80                 | '         return _set_dos_error(r);
31c80     4C 93 02 F6 | 	mov	arg01, arg04
31c84     70 FB BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31c88     20 00 90 FD | 	jmp	#LR__5331
31c8c                 | LR__5330
31c8c     18 CE 05 F1 | 	add	fp, #24
31c90     E7 A8 0A FB | 	rdlong	local02, fp wz
31c94     08 A6 06 A1 |  if_e	add	local01, #8
31c98     53 A9 02 AB |  if_e	rdlong	local02, local01
31c9c     10 A8 46 A5 |  if_e	or	local02, #16
31ca0     53 A9 62 AC |  if_e	wrlong	local02, local01
31ca4                 | '         fil->state |=  (0x10) ;
31ca4                 | '     }
31ca4                 | '     return x;
31ca4     E7 7A 02 FB | 	rdlong	result1, fp
31ca8     18 CE 85 F1 | 	sub	fp, #24
31cac                 | LR__5331
31cac     E7 F0 03 F6 | 	mov	ptra, fp
31cb0     F2 00 A0 FD | 	call	#popregs_
31cb4                 | _fatfs_cc_v_read_ret
31cb4     2D 00 64 FD | 	ret
31cb8                 | 
31cb8                 | _fatfs_cc_v_write
31cb8     01 CA 05 F6 | 	mov	COUNT_, #1
31cbc     E8 00 A0 FD | 	call	#pushregs_
31cc0     1C F0 07 F1 | 	add	ptra, #28
31cc4     49 A7 02 F6 | 	mov	local01, arg01
31cc8     53 93 0A FB | 	rdlong	arg01, local01 wz
31ccc                 | '         return _seterror( 5 );
31ccc     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
31cd0     34 0B 68 AC |  if_e	wrlong	#5, ptr___system__dat__
31cd4     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
31cd8     01 7A 66 A6 |  if_e	neg	result1, #1
31cdc     44 00 90 AD |  if_e	jmp	#LR__5341
31ce0     02 00 00 FF 
31ce4     10 92 06 F1 | 	add	arg01, ##1040
31ce8     E7 98 02 F6 | 	mov	arg04, fp
31cec     18 98 06 F1 | 	add	arg04, #24
31cf0     E8 E4 BF FD | 	call	#_fatfs_cc_f_write
31cf4     3D 99 0A F6 | 	mov	arg04, result1 wz
31cf8     1C 00 90 AD |  if_e	jmp	#LR__5340
31cfc     08 A6 06 F1 | 	add	local01, #8
31d00     53 93 02 FB | 	rdlong	arg01, local01
31d04     20 92 46 F5 | 	or	arg01, #32
31d08     53 93 62 FC | 	wrlong	arg01, local01
31d0c                 | '         fil->state |=  (0x20) ;
31d0c                 | '         return _set_dos_error(r);
31d0c     4C 93 02 F6 | 	mov	arg01, arg04
31d10     E4 FA BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31d14     0C 00 90 FD | 	jmp	#LR__5341
31d18                 | LR__5340
31d18                 | '     }
31d18                 | '     return x;
31d18     18 CE 05 F1 | 	add	fp, #24
31d1c     E7 7A 02 FB | 	rdlong	result1, fp
31d20     18 CE 85 F1 | 	sub	fp, #24
31d24                 | LR__5341
31d24     E7 F0 03 F6 | 	mov	ptra, fp
31d28     F2 00 A0 FD | 	call	#popregs_
31d2c                 | _fatfs_cc_v_write_ret
31d2c     2D 00 64 FD | 	ret
31d30                 | 
31d30                 | _fatfs_cc_v_lseek
31d30     06 CA 05 F6 | 	mov	COUNT_, #6
31d34     E8 00 A0 FD | 	call	#pushregs_
31d38     4A AB 02 F6 | 	mov	local03, arg02
31d3c     4C AD 02 F6 | 	mov	local04, arg04
31d40     49 AF 02 FB | 	rdlong	local05, arg01
31d44     02 00 00 FF 
31d48     10 AE 0E F1 | 	add	local05, ##1040 wz
31d4c     18 00 90 5D |  if_ne	jmp	#LR__5350
31d50                 | '         return _seterror( 5 );
31d50     20 68 06 F1 | 	add	ptr___system__dat__, #32
31d54     34 0B 68 FC | 	wrlong	#5, ptr___system__dat__
31d58     20 68 86 F1 | 	sub	ptr___system__dat__, #32
31d5c     01 7C 66 F6 | 	neg	result2, #1
31d60     01 7A 66 F6 | 	neg	result1, #1
31d64     58 00 90 FD | 	jmp	#LR__5353
31d68                 | LR__5350
31d68     00 AC 0E F2 | 	cmp	local04, #0 wz
31d6c     24 00 90 AD |  if_e	jmp	#LR__5351
31d70     01 AC 0E F2 | 	cmp	local04, #1 wz
31d74     14 AE 06 A1 |  if_e	add	local05, #20
31d78     57 B1 02 AB |  if_e	rdlong	local06, local05
31d7c     14 AE 86 A1 |  if_e	sub	local05, #20
31d80     58 AB 02 A1 |  if_e	add	local03, local06
31d84     0C AE 06 51 |  if_ne	add	local05, #12
31d88     57 B1 02 5B |  if_ne	rdlong	local06, local05
31d8c     0C AE 86 51 |  if_ne	sub	local05, #12
31d90     58 AB 02 51 |  if_ne	add	local03, local06
31d94                 | LR__5351
31d94     57 93 02 F6 | 	mov	arg01, local05
31d98     55 95 02 F6 | 	mov	arg02, local03
31d9c     38 EA BF FD | 	call	#_fatfs_cc_f_lseek
31da0     3D 93 0A F6 | 	mov	arg01, result1 wz
31da4     10 00 90 AD |  if_e	jmp	#LR__5352
31da8                 | '         return _set_dos_error(result);
31da8     4C FA BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31dac     3D 7D 02 F6 | 	mov	result2, result1
31db0     1F 7C C6 F0 | 	sar	result2, #31
31db4     08 00 90 FD | 	jmp	#LR__5353
31db8                 | LR__5352
31db8                 | '     }
31db8                 | '     return (off_t)offset;
31db8     55 7B 02 F6 | 	mov	result1, local03
31dbc     54 7D 02 F6 | 	mov	result2, local02
31dc0                 | LR__5353
31dc0     E7 F0 03 F6 | 	mov	ptra, fp
31dc4     F2 00 A0 FD | 	call	#popregs_
31dc8                 | _fatfs_cc_v_lseek_ret
31dc8     2D 00 64 FD | 	ret
31dcc                 | 
31dcc                 | _fatfs_cc_v_ioctl
31dcc                 | ' {
31dcc                 | '     return _seterror( 10 );
31dcc     20 68 06 F1 | 	add	ptr___system__dat__, #32
31dd0     34 15 68 FC | 	wrlong	#10, ptr___system__dat__
31dd4     20 68 86 F1 | 	sub	ptr___system__dat__, #32
31dd8     01 7A 66 F6 | 	neg	result1, #1
31ddc                 | _fatfs_cc_v_ioctl_ret
31ddc     2D 00 64 FD | 	ret
31de0                 | 
31de0                 | _fatfs_cc_v_mkdir
31de0     A0 F1 BF FD | 	call	#_fatfs_cc_f_mkdir
31de4     3D 93 02 F6 | 	mov	arg01, result1
31de8                 | ' 
31de8                 | '     r = f_mkdir(name);
31de8                 | '     return _set_dos_error(r);
31de8     0C FA BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31dec                 | _fatfs_cc_v_mkdir_ret
31dec     2D 00 64 FD | 	ret
31df0                 | 
31df0                 | _fatfs_cc_v_remove
31df0     0C F0 BF FD | 	call	#_fatfs_cc_f_unlink
31df4     3D 93 02 F6 | 	mov	arg01, result1
31df8                 | ' 
31df8                 | '     r = f_unlink(name);
31df8                 | '     return _set_dos_error(r);
31df8     FC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31dfc                 | _fatfs_cc_v_remove_ret
31dfc     2D 00 64 FD | 	ret
31e00                 | 
31e00                 | _fatfs_cc_v_rmdir
31e00     FC EF BF FD | 	call	#_fatfs_cc_f_unlink
31e04     3D 93 02 F6 | 	mov	arg01, result1
31e08                 | ' 
31e08                 | '     r = f_unlink(name);
31e08                 | '     return _set_dos_error(r);
31e08     EC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31e0c                 | _fatfs_cc_v_rmdir_ret
31e0c     2D 00 64 FD | 	ret
31e10                 | 
31e10                 | _fatfs_cc_v_rename
31e10     B0 F3 BF FD | 	call	#_fatfs_cc_f_rename
31e14     3D 93 02 F6 | 	mov	arg01, result1
31e18                 | '     return _set_dos_error(r);
31e18     DC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31e1c                 | _fatfs_cc_v_rename_ret
31e1c     2D 00 64 FD | 	ret
31e20                 | 
31e20                 | _fatfs_cc_v_open
31e20     07 CA 05 F6 | 	mov	COUNT_, #7
31e24     E8 00 A0 FD | 	call	#pushregs_
31e28     49 A7 02 F6 | 	mov	local01, arg01
31e2c     4A A9 02 F6 | 	mov	local02, arg02
31e30     4B AB 02 F6 | 	mov	local03, arg03
31e34     03 00 00 FF 
31e38     38 92 06 F6 | 	mov	arg01, ##1592
31e3c                 | '     return _gc_alloc(size);
31e3c     10 94 06 F6 | 	mov	arg02, #16
31e40     FC 68 BF FD | 	call	#__system___gc_doalloc
31e44     3D AD 0A F6 | 	mov	local04, result1 wz
31e48                 | '       return _seterror( 7 );
31e48     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
31e4c     34 0F 68 AC |  if_e	wrlong	#7, ptr___system__dat__
31e50     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
31e54     01 7A 66 A6 |  if_e	neg	result1, #1
31e58     90 00 90 AD |  if_e	jmp	#LR__5366
31e5c     56 93 02 F6 | 	mov	arg01, local04
31e60     00 94 06 F6 | 	mov	arg02, #0
31e64     03 00 00 FF 
31e68     38 96 06 F6 | 	mov	arg03, ##1592
31e6c     D8 00 A0 FD | 	call	#\builtin_bytefill_
31e70                 | '   switch (flags & 3) {
31e70     55 AF 02 F6 | 	mov	local05, local03
31e74     03 AE 0E F5 | 	and	local05, #3 wz
31e78     0C 00 90 AD |  if_e	jmp	#LR__5360
31e7c     01 AE 0E F2 | 	cmp	local05, #1 wz
31e80     0C 00 90 AD |  if_e	jmp	#LR__5361
31e84     10 00 90 FD | 	jmp	#LR__5362
31e88                 | LR__5360
31e88     01 B0 06 F6 | 	mov	local06, #1
31e8c                 | '       fs_flags =  0x01 ;
31e8c                 | '       break;
31e8c     0C 00 90 FD | 	jmp	#LR__5363
31e90                 | LR__5361
31e90     02 B0 06 F6 | 	mov	local06, #2
31e94                 | '       fs_flags =  0x02 ;
31e94                 | '       break;
31e94     04 00 90 FD | 	jmp	#LR__5363
31e98                 | LR__5362
31e98     03 B0 06 F6 | 	mov	local06, #3
31e9c                 | '       fs_flags =  0x01  |  0x02 ;
31e9c                 | '       break;
31e9c                 | LR__5363
31e9c     08 AA CE F7 | 	test	local03, #8 wz
31ea0     18 B0 46 55 |  if_ne	or	local06, #24
31ea4     08 00 90 5D |  if_ne	jmp	#LR__5364
31ea8     20 AA CE F7 | 	test	local03, #32 wz
31eac     30 B0 46 55 |  if_ne	or	local06, #48
31eb0                 | LR__5364
31eb0     56 93 02 F6 | 	mov	arg01, local04
31eb4     02 00 00 FF 
31eb8     10 92 06 F1 | 	add	arg01, ##1040
31ebc     54 95 02 F6 | 	mov	arg02, local02
31ec0     58 97 02 F6 | 	mov	arg03, local06
31ec4     24 DB BF FD | 	call	#_fatfs_cc_f_open
31ec8     3D B3 0A F6 | 	mov	local07, result1 wz
31ecc     14 00 90 AD |  if_e	jmp	#LR__5365
31ed0     56 93 02 F6 | 	mov	arg01, local04
31ed4                 | '     return _gc_free(ptr);
31ed4     6C 69 BF FD | 	call	#__system___gc_free
31ed8                 | '     free(f);
31ed8                 | ' #line 426 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/fatfs/fatfs.cc"
31ed8                 | '     return _set_dos_error(r);
31ed8     59 93 02 F6 | 	mov	arg01, local07
31edc     18 F9 BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31ee0     08 00 90 FD | 	jmp	#LR__5366
31ee4                 | LR__5365
31ee4     53 AD 62 FC | 	wrlong	local04, local01
31ee8                 | '   }
31ee8                 | '   fil->vfsdata = f;
31ee8                 | '   return 0;
31ee8     00 7A 06 F6 | 	mov	result1, #0
31eec                 | LR__5366
31eec     E7 F0 03 F6 | 	mov	ptra, fp
31ef0     F2 00 A0 FD | 	call	#popregs_
31ef4                 | _fatfs_cc_v_open_ret
31ef4     2D 00 64 FD | 	ret
31ef8                 | 
31ef8                 | _fatfs_cc_v_flush
31ef8     01 CA 05 F6 | 	mov	COUNT_, #1
31efc     E8 00 A0 FD | 	call	#pushregs_
31f00     49 A7 02 F6 | 	mov	local01, arg01
31f04     80 F5 BF FD | 	call	#_fatfs_cc___default_flush
31f08     53 A7 02 FB | 	rdlong	local01, local01
31f0c     02 00 00 FF 
31f10     10 A6 0E F1 | 	add	local01, ##1040 wz
31f14                 | '         return _seterror( 5 );
31f14     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
31f18     34 0B 68 AC |  if_e	wrlong	#5, ptr___system__dat__
31f1c     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
31f20     01 7A 66 A6 |  if_e	neg	result1, #1
31f24     10 00 90 AD |  if_e	jmp	#LR__5370
31f28     53 93 02 F6 | 	mov	arg01, local01
31f2c     FC E6 BF FD | 	call	#_fatfs_cc_f_sync
31f30     3D 93 02 F6 | 	mov	arg01, result1
31f34                 | '     }
31f34                 | ' #line 449 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/fatfs/fatfs.cc"
31f34                 | '     result = f_sync(f);
31f34                 | ' #line 453 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/fatfs/fatfs.cc"
31f34                 | '     return _set_dos_error(result);
31f34     C0 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31f38                 | LR__5370
31f38     E7 F0 03 F6 | 	mov	ptra, fp
31f3c     F2 00 A0 FD | 	call	#popregs_
31f40                 | _fatfs_cc_v_flush_ret
31f40     2D 00 64 FD | 	ret
31f44                 | 
31f44                 | _fatfs_cc_v_init
31f44                 | ' {
31f44                 | '     return 0;
31f44     00 7A 06 F6 | 	mov	result1, #0
31f48                 | _fatfs_cc_v_init_ret
31f48     2D 00 64 FD | 	ret
31f4c                 | 
31f4c                 | _fatfs_cc_v_deinit
31f4c     94 01 00 FF 
31f50     70 94 06 F6 | 	mov	arg02, ##@LR__5496
31f54     00 92 06 F6 | 	mov	arg01, #0
31f58     00 96 06 F6 | 	mov	arg03, #0
31f5c     B8 D9 BF FD | 	call	#_fatfs_cc_f_mount
31f60     01 00 00 FF 
31f64     08 64 06 F1 | 	add	objptr, ##520
31f68     32 93 02 FB | 	rdlong	arg01, objptr
31f6c     04 64 06 F1 | 	add	objptr, #4
31f70     32 95 02 FB | 	rdlong	arg02, objptr
31f74     01 00 00 FF 
31f78     0C 64 86 F1 | 	sub	objptr, ##524
31f7c     2C 50 BF FD | 	call	#__system___freepins
31f80                 | ' #line 474 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/fatfs/fatfs.cc"
31f80                 | '     _freepins(f_pinmask);
31f80                 | '     return 0;
31f80     00 7A 06 F6 | 	mov	result1, #0
31f84                 | _fatfs_cc_v_deinit_ret
31f84     2D 00 64 FD | 	ret
31f88                 | 
31f88                 | _fatfs_cc_get_vfs
31f88     01 CA 05 F6 | 	mov	COUNT_, #1
31f8c     E8 00 A0 FD | 	call	#pushregs_
31f90     49 A7 02 F6 | 	mov	local01, arg01
31f94     58 92 06 F6 | 	mov	arg01, #88
31f98     74 67 BF FD | 	call	#__system___gc_alloc_managed
31f9c     3D 93 02 F6 | 	mov	arg01, result1
31fa0     32 7B 02 F6 | 	mov	result1, objptr
31fa4     00 D8 05 FF 
31fa8     00 7A 46 F5 | 	or	result1, ##196083712
31fac     49 7B 62 FC | 	wrlong	result1, arg01
31fb0     32 7B 02 F6 | 	mov	result1, objptr
31fb4     00 E0 05 FF 
31fb8     00 7A 46 F5 | 	or	result1, ##197132288
31fbc     04 92 06 F1 | 	add	arg01, #4
31fc0     49 7B 62 FC | 	wrlong	result1, arg01
31fc4     32 7B 02 F6 | 	mov	result1, objptr
31fc8     00 E8 05 FF 
31fcc     00 7A 46 F5 | 	or	result1, ##198180864
31fd0     04 92 06 F1 | 	add	arg01, #4
31fd4     49 7B 62 FC | 	wrlong	result1, arg01
31fd8     32 7B 02 F6 | 	mov	result1, objptr
31fdc     00 F0 05 FF 
31fe0     00 7A 46 F5 | 	or	result1, ##199229440
31fe4     04 92 06 F1 | 	add	arg01, #4
31fe8     49 7B 62 FC | 	wrlong	result1, arg01
31fec     32 7B 02 F6 | 	mov	result1, objptr
31ff0     00 F8 05 FF 
31ff4     00 7A 46 F5 | 	or	result1, ##200278016
31ff8     04 92 06 F1 | 	add	arg01, #4
31ffc     49 7B 62 FC | 	wrlong	result1, arg01
32000     32 7B 02 F6 | 	mov	result1, objptr
32004     3A 7A 26 F4 | 	bith	result1, #58
32008     04 92 06 F1 | 	add	arg01, #4
3200c     49 7B 62 FC | 	wrlong	result1, arg01
32010     04 92 06 F1 | 	add	arg01, #4
32014     49 A7 62 FC | 	wrlong	local01, arg01
32018     04 92 06 F1 | 	add	arg01, #4
3201c     49 01 68 FC | 	wrlong	#0, arg01
32020     32 7B 02 F6 | 	mov	result1, objptr
32024     00 08 06 FF 
32028     00 7A 46 F5 | 	or	result1, ##202375168
3202c     04 92 06 F1 | 	add	arg01, #4
32030     49 7B 62 FC | 	wrlong	result1, arg01
32034     32 7B 02 F6 | 	mov	result1, objptr
32038     00 10 06 FF 
3203c     00 7A 46 F5 | 	or	result1, ##203423744
32040     04 92 06 F1 | 	add	arg01, #4
32044     49 7B 62 FC | 	wrlong	result1, arg01
32048     32 7B 02 F6 | 	mov	result1, objptr
3204c     00 18 06 FF 
32050     00 7A 46 F5 | 	or	result1, ##204472320
32054     04 92 06 F1 | 	add	arg01, #4
32058     49 7B 62 FC | 	wrlong	result1, arg01
3205c     32 7B 02 F6 | 	mov	result1, objptr
32060     00 20 06 FF 
32064     00 7A 46 F5 | 	or	result1, ##205520896
32068     04 92 06 F1 | 	add	arg01, #4
3206c     49 7B 62 FC | 	wrlong	result1, arg01
32070     32 7B 02 F6 | 	mov	result1, objptr
32074     00 28 06 FF 
32078     00 7A 46 F5 | 	or	result1, ##206569472
3207c     04 92 06 F1 | 	add	arg01, #4
32080     49 7B 62 FC | 	wrlong	result1, arg01
32084     32 7B 02 F6 | 	mov	result1, objptr
32088     00 30 06 FF 
3208c     00 7A 46 F5 | 	or	result1, ##207618048
32090     04 92 06 F1 | 	add	arg01, #4
32094     49 7B 62 FC | 	wrlong	result1, arg01
32098     32 7B 02 F6 | 	mov	result1, objptr
3209c     00 38 06 FF 
320a0     00 7A 46 F5 | 	or	result1, ##208666624
320a4     04 92 06 F1 | 	add	arg01, #4
320a8     49 7B 62 FC | 	wrlong	result1, arg01
320ac     32 7B 02 F6 | 	mov	result1, objptr
320b0     00 40 06 FF 
320b4     00 7A 46 F5 | 	or	result1, ##209715200
320b8     04 92 06 F1 | 	add	arg01, #4
320bc     49 7B 62 FC | 	wrlong	result1, arg01
320c0     32 7B 02 F6 | 	mov	result1, objptr
320c4     00 48 06 FF 
320c8     00 7A 46 F5 | 	or	result1, ##210763776
320cc     04 92 06 F1 | 	add	arg01, #4
320d0     49 7B 62 FC | 	wrlong	result1, arg01
320d4     32 7B 02 F6 | 	mov	result1, objptr
320d8     00 50 06 FF 
320dc     00 7A 46 F5 | 	or	result1, ##211812352
320e0     04 92 06 F1 | 	add	arg01, #4
320e4     49 7B 62 FC | 	wrlong	result1, arg01
320e8     32 7B 02 F6 | 	mov	result1, objptr
320ec     00 58 06 FF 
320f0     00 7A 46 F5 | 	or	result1, ##212860928
320f4     04 92 06 F1 | 	add	arg01, #4
320f8     49 7B 62 FC | 	wrlong	result1, arg01
320fc     32 7B 02 F6 | 	mov	result1, objptr
32100     00 60 06 FF 
32104     00 7A 46 F5 | 	or	result1, ##213909504
32108     04 92 06 F1 | 	add	arg01, #4
3210c     49 7B 62 FC | 	wrlong	result1, arg01
32110     04 92 06 F1 | 	add	arg01, #4
32114     49 01 68 FC | 	wrlong	#0, arg01
32118     04 92 06 F1 | 	add	arg01, #4
3211c     49 01 68 FC | 	wrlong	#0, arg01
32120     54 92 86 F1 | 	sub	arg01, #84
32124                 | ' 
32124                 | '     v->close = &v_close;
32124                 | '     v->read = &v_read;
32124                 | '     v->write = &v_write;
32124                 | '     v->lseek = &v_lseek;
32124                 | '     v->ioctl = &v_ioctl;
32124                 | '     v->flush = &v_flush;
32124                 | '     v->vfs_data = ptr;
32124                 | '     v->reserved = 0;
32124                 | ' 
32124                 | '     v->open = &v_open;
32124                 | '     v->creat = &v_creat;
32124                 | '     v->opendir = &v_opendir;
32124                 | '     v->closedir = &v_closedir;
32124                 | '     v->readdir = &v_readdir;
32124                 | '     v->stat = &v_stat;
32124                 | ' 
32124                 | '     v->mkdir = &v_mkdir;
32124                 | '     v->rmdir = &v_rmdir;
32124                 | ' 
32124                 | '     v->remove = &v_remove;
32124                 | '     v->rename = &v_rename;
32124                 | ' 
32124                 | '     v->init = &v_init;
32124                 | '     v->deinit = &v_deinit;
32124                 | ' 
32124                 | ' 
32124                 | '     v->getcf = 0;
32124                 | '     v->putcf = 0;
32124                 | ' #line 532 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/fatfs/fatfs.cc"
32124                 | '     return v;
32124     49 7B 02 F6 | 	mov	result1, arg01
32128     E7 F0 03 F6 | 	mov	ptra, fp
3212c     F2 00 A0 FD | 	call	#popregs_
32130                 | _fatfs_cc_get_vfs_ret
32130     2D 00 64 FD | 	ret
32134                 | 
32134                 | _fatfs_cc_gettimeofday
32134     04 CA 05 F6 | 	mov	COUNT_, #4
32138     E8 00 A0 FD | 	call	#pushregs_
3213c     49 A7 02 F6 | 	mov	local01, arg01
32140     24 2A BF FD | 	call	#__system___getus
32144     3D 93 02 F6 | 	mov	arg01, result1
32148     02 00 00 FF 
3214c     08 6D 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1288
32150     36 A9 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
32154     49 7B 02 F6 | 	mov	result1, arg01
32158     54 7B 82 F1 | 	sub	result1, local02
3215c     A1 07 00 FF 
32160     40 7A 16 FD | 	qdiv	result1, ##1000000
32164     02 00 00 FF 
32168     08 6D 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1288
3216c     18 A8 62 FD | 	getqx	local02
32170     A1 07 00 FF 
32174     40 7A 16 FD | 	qdiv	result1, ##1000000
32178     00 A8 0E F2 | 	cmp	local02, #0 wz
3217c     19 AA 62 FD | 	getqy	local03
32180     28 00 90 AD |  if_e	jmp	#LR__5380
32184     02 00 00 FF 
32188     04 6D 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1284
3218c     36 AD 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
32190     54 AD 02 F1 | 	add	local04, local02
32194     36 AD 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
32198     55 93 82 F1 | 	sub	arg01, local03
3219c     04 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, #4
321a0     36 93 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
321a4     02 00 00 FF 
321a8     08 6D 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1288
321ac                 | LR__5380
321ac     02 00 00 FF 
321b0     04 6D 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1284
321b4     36 AD 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
321b8     02 00 00 FF 
321bc     04 6D 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1284
321c0     53 AD 62 FC | 	wrlong	local04, local01
321c4     04 A6 06 F1 | 	add	local01, #4
321c8     53 AB 62 FC | 	wrlong	local03, local01
321cc                 | '         lastsec += secs;
321cc                 | '         lastus = now - leftover;
321cc                 | '     }
321cc                 | '     tv->tv_sec = lastsec;
321cc                 | '     tv->tv_usec = leftover;
321cc                 | '     return 0;
321cc     00 7A 06 F6 | 	mov	result1, #0
321d0     E7 F0 03 F6 | 	mov	ptra, fp
321d4     F2 00 A0 FD | 	call	#popregs_
321d8                 | _fatfs_cc_gettimeofday_ret
321d8     2D 00 64 FD | 	ret
321dc                 | 
321dc                 | _fatfs_cc__is_leap_year
321dc     49 7B 52 F6 | 	abs	result1, arg01 wc
321e0     03 7A 06 F5 | 	and	result1, #3
321e4     3D 7B 8A F6 | 	negc	result1, result1 wz
321e8     38 00 90 5D |  if_ne	jmp	#LR__5391
321ec     49 7B 52 F6 | 	abs	result1, arg01 wc
321f0     64 7A 16 FD | 	qdiv	result1, #100
321f4     19 7A 62 FD | 	getqy	result1
321f8     3D 7B 8A F6 | 	negc	result1, result1 wz
321fc     1C 00 90 5D |  if_ne	jmp	#LR__5390
32200     49 7B 52 F6 | 	abs	result1, arg01 wc
32204     90 7B 16 FD | 	qdiv	result1, #400
32208                 | '       return (0 == y % 400);
32208     00 7A 06 F6 | 	mov	result1, #0
3220c     19 80 62 FD | 	getqy	_var01
32210     40 81 8A F6 | 	negc	_var01, _var01 wz
32214     01 7A 06 A6 |  if_e	mov	result1, #1
32218     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
3221c                 | LR__5390
3221c                 | '     return 1;
3221c     01 7A 06 F6 | 	mov	result1, #1
32220     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
32224                 | LR__5391
32224                 | '   }
32224                 | '   return 0;
32224     00 7A 06 F6 | 	mov	result1, #0
32228                 | _fatfs_cc__is_leap_year_ret
32228     2D 00 64 FD | 	ret
3222c                 | 
3222c                 | _fatfs_cc___tzoffset
3222c     49 81 0A F6 | 	mov	_var01, arg01 wz
32230     FF FF FF FF 
32234     4A FF 6B FC | 	wrlong	##-1, arg02
32238     01 82 06 F6 | 	mov	_var02, #1
3223c     40 85 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
32240                 | '                 return 0;
32240     00 7A 06 A6 |  if_e	mov	result1, #0
32244     7C 02 90 AD |  if_e	jmp	#LR__5417
32248     4A 01 68 FC | 	wrlong	#0, arg02
3224c     36 87 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
32250     02 00 00 FF 
32254     DC 86 06 F1 | 	add	_var04, ##1244
32258     D7 26 48 FB | 	callpa	#(@LR__5401-@LR__5400)>>2,fcache_load_ptr_
3225c                 | ' 
3225c                 | '        *hasdst = 0;
3225c                 | ' 
3225c                 | ' 	n = stdname;
3225c                 | '         while (*s && isalpha(*s)) {
3225c                 | LR__5400
3225c     40 85 CA FA | 	rdbyte	_var03, _var01 wz
32260     44 00 90 AD |  if_e	jmp	#LR__5402
32264     40 93 C2 FA | 	rdbyte	arg01, _var01
32268                 | ' {
32268                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
32268     80 92 36 F3 | 	fle	arg01, #128 wc
3226c                 | '     return __ctype[c];
3226c     36 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
32270     02 00 00 FF 
32274     0C 7B 06 F1 | 	add	result1, ##1292
32278     3D 93 02 F1 | 	add	arg01, result1
3227c     49 7B C2 FA | 	rdbyte	result1, arg01
32280     0C 7A CE F7 | 	test	result1, #12 wz
32284     20 00 90 AD |  if_e	jmp	#LR__5402
32288     40 89 02 F6 | 	mov	_var05, _var01
3228c     40 8B 02 F6 | 	mov	_var06, _var01
32290     01 8A 06 F1 | 	add	_var06, #1
32294     44 8D C2 FA | 	rdbyte	_var07, _var05
32298     45 81 02 F6 | 	mov	_var01, _var06
3229c     43 8D 42 FC | 	wrbyte	_var07, _var04
322a0     01 86 06 F1 | 	add	_var04, #1
322a4     B4 FF 9F FD | 	jmp	#LR__5400
322a8                 | LR__5401
322a8                 | LR__5402
322a8     43 01 48 FC | 	wrbyte	#0, _var04
322ac     00 8E 06 F6 | 	mov	_var08, #0
322b0     40 85 C2 FA | 	rdbyte	_var03, _var01
322b4     2D 84 0E F2 | 	cmp	_var03, #45 wz
322b8     01 82 66 A6 |  if_e	neg	_var02, #1
322bc     01 80 06 A1 |  if_e	add	_var01, #1
322c0     D7 26 48 FB | 	callpa	#(@LR__5404-@LR__5403)>>2,fcache_load_ptr_
322c4                 | '                 sgn = -1;
322c4                 | '                 s++;
322c4                 | '         }
322c4                 | '         while (isdigit(*s)) {
322c4                 | LR__5403
322c4     40 93 C2 FA | 	rdbyte	arg01, _var01
322c8                 | ' {
322c8                 | '   return  (__ctype_get(c) & 0x02 ) ;
322c8     80 92 36 F3 | 	fle	arg01, #128 wc
322cc                 | '     return __ctype[c];
322cc     36 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
322d0     02 00 00 FF 
322d4     0C 7B 06 F1 | 	add	result1, ##1292
322d8     3D 93 02 F1 | 	add	arg01, result1
322dc     49 7B C2 FA | 	rdbyte	result1, arg01
322e0     02 7A CE F7 | 	test	result1, #2 wz
322e4     28 00 90 AD |  if_e	jmp	#LR__5405
322e8     47 85 02 F6 | 	mov	_var03, _var08
322ec     02 84 66 F0 | 	shl	_var03, #2
322f0     47 85 02 F1 | 	add	_var03, _var08
322f4     01 84 66 F0 | 	shl	_var03, #1
322f8     40 89 C2 FA | 	rdbyte	_var05, _var01
322fc     30 88 86 F1 | 	sub	_var05, #48
32300     44 85 02 F1 | 	add	_var03, _var05
32304     42 8F 02 F6 | 	mov	_var08, _var03
32308     01 80 06 F1 | 	add	_var01, #1
3230c     B4 FF 9F FD | 	jmp	#LR__5403
32310                 | LR__5404
32310                 | LR__5405
32310     07 00 00 FF 
32314     10 8E 06 FD | 	qmul	_var08, ##3600
32318     40 85 C2 FA | 	rdbyte	_var03, _var01
3231c     3A 84 0E F2 | 	cmp	_var03, #58 wz
32320     18 90 62 FD | 	getqx	_var09
32324     6C 00 90 5D |  if_ne	jmp	#LR__5409
32328     00 8E 06 F6 | 	mov	_var08, #0
3232c     01 80 06 F1 | 	add	_var01, #1
32330     D7 26 48 FB | 	callpa	#(@LR__5407-@LR__5406)>>2,fcache_load_ptr_
32334                 | '                 x = 0;
32334                 | '                 s++;
32334                 | '                 while (isdigit(*s)) {
32334                 | LR__5406
32334     40 93 C2 FA | 	rdbyte	arg01, _var01
32338                 | ' {
32338                 | '   return  (__ctype_get(c) & 0x02 ) ;
32338     80 92 36 F3 | 	fle	arg01, #128 wc
3233c                 | '     return __ctype[c];
3233c     36 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
32340     02 00 00 FF 
32344     0C 7B 06 F1 | 	add	result1, ##1292
32348     3D 93 02 F1 | 	add	arg01, result1
3234c     49 7B C2 FA | 	rdbyte	result1, arg01
32350     02 7A CE F7 | 	test	result1, #2 wz
32354     28 00 90 AD |  if_e	jmp	#LR__5408
32358     47 85 02 F6 | 	mov	_var03, _var08
3235c     02 84 66 F0 | 	shl	_var03, #2
32360     47 85 02 F1 | 	add	_var03, _var08
32364     01 84 66 F0 | 	shl	_var03, #1
32368     40 89 C2 FA | 	rdbyte	_var05, _var01
3236c     30 88 86 F1 | 	sub	_var05, #48
32370     44 85 02 F1 | 	add	_var03, _var05
32374     42 8F 02 F6 | 	mov	_var08, _var03
32378     01 80 06 F1 | 	add	_var01, #1
3237c     B4 FF 9F FD | 	jmp	#LR__5406
32380                 | LR__5407
32380                 | LR__5408
32380     47 8D 02 F6 | 	mov	_var07, _var08
32384     04 8C 66 F0 | 	shl	_var07, #4
32388     47 8D 82 F1 | 	sub	_var07, _var08
3238c     02 8C 66 F0 | 	shl	_var07, #2
32390     46 91 02 F1 | 	add	_var09, _var07
32394                 | LR__5409
32394     36 87 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
32398     02 00 00 FF 
3239c     E5 86 06 F1 | 	add	_var04, ##1253
323a0     40 93 C2 FA | 	rdbyte	arg01, _var01
323a4                 | ' {
323a4                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
323a4     80 92 36 F3 | 	fle	arg01, #128 wc
323a8                 | '     return __ctype[c];
323a8     36 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
323ac     02 00 00 FF 
323b0     0C 7B 06 F1 | 	add	result1, ##1292
323b4     3D 93 02 F1 | 	add	arg01, result1
323b8     49 7B C2 FA | 	rdbyte	result1, arg01
323bc     0C 7A CE F7 | 	test	result1, #12 wz
323c0     4C 00 90 AD |  if_e	jmp	#LR__5412
323c4     4A 03 68 FC | 	wrlong	#1, arg02
323c8                 | '                 *hasdst = 1;
323c8                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
323c8                 | LR__5410
323c8     40 85 CA FA | 	rdbyte	_var03, _var01 wz
323cc     40 00 90 AD |  if_e	jmp	#LR__5411
323d0     40 93 C2 FA | 	rdbyte	arg01, _var01
323d4                 | ' {
323d4                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
323d4     80 92 36 F3 | 	fle	arg01, #128 wc
323d8                 | '     return __ctype[c];
323d8     36 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
323dc     02 00 00 FF 
323e0     0C 7B 06 F1 | 	add	result1, ##1292
323e4     3D 93 02 F1 | 	add	arg01, result1
323e8     49 7B C2 FA | 	rdbyte	result1, arg01
323ec     0C 7A CE F7 | 	test	result1, #12 wz
323f0     1C 00 90 AD |  if_e	jmp	#LR__5411
323f4     40 8B 02 F6 | 	mov	_var06, _var01
323f8     01 8A 06 F1 | 	add	_var06, #1
323fc     40 8D C2 FA | 	rdbyte	_var07, _var01
32400     45 81 02 F6 | 	mov	_var01, _var06
32404     43 8D 42 FC | 	wrbyte	_var07, _var04
32408     01 86 06 F1 | 	add	_var04, #1
3240c     B8 FF 9F FD | 	jmp	#LR__5410
32410                 | LR__5411
32410                 | LR__5412
32410     43 01 48 FC | 	wrbyte	#0, _var04
32414     02 00 00 FF 
32418     DC 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1244
3241c     36 85 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
32420     02 00 00 FF 
32424     DC 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1244
32428     20 00 90 AD |  if_e	jmp	#LR__5413
3242c     02 00 00 FF 
32430     DC 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1244
32434     36 85 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
32438     08 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, #8
3243c     36 85 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
32440     02 00 00 FF 
32444     D4 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1236
32448     1C 00 90 FD | 	jmp	#LR__5414
3244c                 | LR__5413
3244c     02 00 00 FF 
32450     EE 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1262
32454     36 85 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
32458     1A 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, #26
3245c     36 85 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
32460     02 00 00 FF 
32464     D4 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1236
32468                 | LR__5414
32468     02 00 00 FF 
3246c     E5 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1253
32470     36 85 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
32474     02 00 00 FF 
32478     E5 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1253
3247c     20 00 90 AD |  if_e	jmp	#LR__5415
32480     02 00 00 FF 
32484     E5 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1253
32488     36 85 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
3248c     0D 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, #13
32490     36 85 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
32494     02 00 00 FF 
32498     D8 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1240
3249c     1C 00 90 FD | 	jmp	#LR__5416
324a0                 | LR__5415
324a0     02 00 00 FF 
324a4     DC 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1244
324a8     36 85 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
324ac     04 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, #4
324b0     36 85 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
324b4     02 00 00 FF 
324b8     D8 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1240
324bc                 | LR__5416
324bc     48 83 02 FD | 	qmul	_var02, _var09
324c0                 | ' 		_tzname[1] = stdname;
324c0                 | ' 
324c0                 | '         return sgn * off;
324c0     18 7A 62 FD | 	getqx	result1
324c4                 | LR__5417
324c4                 | _fatfs_cc___tzoffset_ret
324c4     2D 00 64 FD | 	ret
324c8                 | 
324c8                 | _fatfs_cc___indst
324c8     10 92 06 F1 | 	add	arg01, #16
324cc     49 81 02 FB | 	rdlong	_var01, arg01
324d0     10 92 86 F1 | 	sub	arg01, #16
324d4     02 80 0E F2 | 	cmp	_var01, #2 wz
324d8     30 00 90 5D |  if_ne	jmp	#LR__5420
324dc     07 80 06 F6 | 	mov	_var01, #7
324e0     18 92 06 F1 | 	add	arg01, #24
324e4     49 83 02 FB | 	rdlong	_var02, arg01
324e8     41 81 02 F1 | 	add	_var01, _var02
324ec     0C 92 86 F1 | 	sub	arg01, #12
324f0     49 85 02 FB | 	rdlong	_var03, arg01
324f4     42 81 82 F1 | 	sub	_var01, _var03
324f8     00 80 56 F2 | 	cmps	_var01, #0 wc
324fc                 | '                         return 1;
324fc     01 7A 06 C6 |  if_b	mov	result1, #1
32500     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
32504                 | '                 return 0;
32504     00 7A 06 F6 | 	mov	result1, #0
32508     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
3250c                 | LR__5420
3250c     10 92 06 F1 | 	add	arg01, #16
32510     49 81 02 FB | 	rdlong	_var01, arg01
32514     10 92 86 F1 | 	sub	arg01, #16
32518     0A 80 0E F2 | 	cmp	_var01, #10 wz
3251c     28 00 90 5D |  if_ne	jmp	#LR__5421
32520     18 92 06 F1 | 	add	arg01, #24
32524     49 81 02 FB | 	rdlong	_var01, arg01
32528     0C 92 86 F1 | 	sub	arg01, #12
3252c     49 87 02 FB | 	rdlong	_var04, arg01
32530     43 81 82 F1 | 	sub	_var01, _var04
32534     00 80 56 F2 | 	cmps	_var01, #0 wc
32538                 | '                         return 0;
32538     00 7A 06 C6 |  if_b	mov	result1, #0
3253c     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
32540                 | '                 return 1;
32540     01 7A 06 F6 | 	mov	result1, #1
32544     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
32548                 | LR__5421
32548                 | '         }
32548                 | ' 
32548                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
32548     00 80 06 F6 | 	mov	_var01, #0
3254c     10 92 06 F1 | 	add	arg01, #16
32550     49 83 02 FB | 	rdlong	_var02, arg01
32554     10 92 86 F1 | 	sub	arg01, #16
32558     03 82 56 F2 | 	cmps	_var02, #3 wc
3255c     10 00 90 CD |  if_b	jmp	#LR__5422
32560     10 92 06 F1 | 	add	arg01, #16
32564     49 85 02 FB | 	rdlong	_var03, arg01
32568     0A 84 56 F2 | 	cmps	_var03, #10 wc
3256c     01 80 06 C6 |  if_b	mov	_var01, #1
32570                 | LR__5422
32570     40 7B 02 F6 | 	mov	result1, _var01
32574                 | _fatfs_cc___indst_ret
32574     2D 00 64 FD | 	ret
32578                 | 
32578                 | _fatfs_cc_disk_deinitialize
32578     03 CA 05 F6 | 	mov	COUNT_, #3
3257c     E8 00 A0 FD | 	call	#pushregs_
32580     01 00 00 FF 
32584     10 64 06 F1 | 	add	objptr, ##528
32588     32 93 0A FB | 	rdlong	arg01, objptr wz
3258c     01 00 00 FF 
32590     10 64 86 F1 | 	sub	objptr, ##528
32594                 | ' 
32594                 | '         return RES_NOTRDY;
32594     03 7A 06 A6 |  if_e	mov	result1, #3
32598     4C 00 90 AD |  if_e	jmp	#LR__5430
3259c     01 00 00 FF 
325a0     10 64 06 F1 | 	add	objptr, ##528
325a4     32 93 02 FB | 	rdlong	arg01, objptr
325a8     49 A7 02 F6 | 	mov	local01, arg01
325ac     24 A6 06 F1 | 	add	local01, #36
325b0     53 A7 02 FB | 	rdlong	local01, local01
325b4     53 A9 02 F6 | 	mov	local02, local01
325b8     13 A6 46 F7 | 	zerox	local01, #19
325bc     14 A8 46 F0 | 	shr	local02, #20
325c0     02 A8 66 F0 | 	shl	local02, #2
325c4     2D A9 02 F1 | 	add	local02, __methods__
325c8     54 A9 02 FB | 	rdlong	local02, local02
325cc     01 00 00 FF 
325d0     10 64 86 F1 | 	sub	objptr, ##528
325d4     32 AB 02 F6 | 	mov	local03, objptr
325d8     53 65 02 F6 | 	mov	objptr, local01
325dc     2D A8 62 FD | 	call	local02
325e0     55 65 02 F6 | 	mov	objptr, local03
325e4                 | '     }
325e4                 | '     fh->close(fh);
325e4                 | '     return RES_OK;
325e4     00 7A 06 F6 | 	mov	result1, #0
325e8                 | LR__5430
325e8     E7 F0 03 F6 | 	mov	ptra, fp
325ec     F2 00 A0 FD | 	call	#popregs_
325f0                 | _fatfs_cc_disk_deinitialize_ret
325f0     2D 00 64 FD | 	ret
325f4                 | 
325f4                 | ' 	
325f4                 | ' 	FUNCTION pfunc(c as integer) as integer
325f4                 | __system____strs_cl_pfunc_
325f4                 | ' 		if (i < 16) then
325f4     04 64 06 F1 | 	add	objptr, #4
325f8     32 7B 02 FB | 	rdlong	result1, objptr
325fc     04 64 86 F1 | 	sub	objptr, #4
32600     10 7A 56 F2 | 	cmps	result1, #16 wc
32604     2C 00 90 3D |  if_ae	jmp	#LR__5440
32608     32 7B 02 FB | 	rdlong	result1, objptr
3260c     04 64 06 F1 | 	add	objptr, #4
32610     32 81 02 FB | 	rdlong	_var01, objptr
32614     3D 81 02 F1 | 	add	_var01, result1
32618     40 93 42 FC | 	wrbyte	arg01, _var01
3261c     32 7B 02 FB | 	rdlong	result1, objptr
32620     01 7A 06 F1 | 	add	result1, #1
32624     32 7B 62 FC | 	wrlong	result1, objptr
32628     04 64 86 F1 | 	sub	objptr, #4
3262c                 | ' 			p(i) = c
3262c                 | ' 			i = i+1
3262c                 | ' 			return 1
3262c     01 7A 06 F6 | 	mov	result1, #1
32630     04 00 90 FD | 	jmp	#__system____strs_cl_pfunc__ret
32634                 | LR__5440
32634                 | ' 			return -1
32634     01 7A 66 F6 | 	neg	result1, #1
32638                 | __system____strs_cl_pfunc__ret
32638     2D 00 64 FD | 	ret
3263c                 | 
3263c                 | __system___struct__s_vfs_file_t_putchar_
3263c     04 CA 05 F6 | 	mov	COUNT_, #4
32640     E8 00 A0 FD | 	call	#pushregs_
32644     1C 64 06 F1 | 	add	objptr, #28
32648     32 A7 0A FB | 	rdlong	local01, objptr wz
3264c     1C 64 86 F1 | 	sub	objptr, #28
32650     00 7A 06 A6 |  if_e	mov	result1, #0
32654     48 00 90 AD |  if_e	jmp	#LR__5450
32658     1C 64 06 F1 | 	add	objptr, #28
3265c     32 A9 02 FB | 	rdlong	local02, objptr
32660     54 AB 02 F6 | 	mov	local03, local02
32664     1C 64 86 F1 | 	sub	objptr, #28
32668     13 AA 46 F7 | 	zerox	local03, #19
3266c     14 A8 46 F0 | 	shr	local02, #20
32670     02 A8 66 F0 | 	shl	local02, #2
32674     2D A9 02 F1 | 	add	local02, __methods__
32678     54 A9 02 FB | 	rdlong	local02, local02
3267c     32 95 02 F6 | 	mov	arg02, objptr
32680     32 AD 02 F6 | 	mov	local04, objptr
32684     55 65 02 F6 | 	mov	objptr, local03
32688     2D A8 62 FD | 	call	local02
3268c     56 65 02 F6 | 	mov	objptr, local04
32690                 | '     return (i < 0) ? 0 : 1;
32690     00 7A 56 F2 | 	cmps	result1, #0 wc
32694     00 A6 06 C6 |  if_b	mov	local01, #0
32698     01 A6 06 36 |  if_ae	mov	local01, #1
3269c     53 7B 02 F6 | 	mov	result1, local01
326a0                 | LR__5450
326a0     E7 F0 03 F6 | 	mov	ptra, fp
326a4     F2 00 A0 FD | 	call	#popregs_
326a8                 | __system___struct__s_vfs_file_t_putchar__ret
326a8     2D 00 64 FD | 	ret
326ac                 | 
326ac                 | __system___struct__s_vfs_file_t_getchar_
326ac     03 CA 05 F6 | 	mov	COUNT_, #3
326b0     E8 00 A0 FD | 	call	#pushregs_
326b4     20 64 06 F1 | 	add	objptr, #32
326b8     32 93 0A FB | 	rdlong	arg01, objptr wz
326bc     20 64 86 F1 | 	sub	objptr, #32
326c0     01 7A 66 A6 |  if_e	neg	result1, #1
326c4     38 00 90 AD |  if_e	jmp	#LR__5460
326c8                 | '     return getcf(__this);
326c8     20 64 06 F1 | 	add	objptr, #32
326cc     32 A7 02 FB | 	rdlong	local01, objptr
326d0     53 A9 02 F6 | 	mov	local02, local01
326d4     20 64 86 F1 | 	sub	objptr, #32
326d8     13 A8 46 F7 | 	zerox	local02, #19
326dc     14 A6 46 F0 | 	shr	local01, #20
326e0     02 A6 66 F0 | 	shl	local01, #2
326e4     2D A7 02 F1 | 	add	local01, __methods__
326e8     53 A7 02 FB | 	rdlong	local01, local01
326ec     32 93 02 F6 | 	mov	arg01, objptr
326f0     32 AB 02 F6 | 	mov	local03, objptr
326f4     54 65 02 F6 | 	mov	objptr, local02
326f8     2D A6 62 FD | 	call	local01
326fc     55 65 02 F6 | 	mov	objptr, local03
32700                 | LR__5460
32700     E7 F0 03 F6 | 	mov	ptra, fp
32704     F2 00 A0 FD | 	call	#popregs_
32708                 | __system___struct__s_vfs_file_t_getchar__ret
32708     2D 00 64 FD | 	ret
3270c                 | 
3270c                 | __system___struct___bas_wrap_sender_tx_
3270c     03 CA 05 F6 | 	mov	COUNT_, #3
32710     E8 00 A0 FD | 	call	#pushregs_
32714     32 A7 02 FB | 	rdlong	local01, objptr
32718     53 A9 02 F6 | 	mov	local02, local01
3271c     13 A6 46 F7 | 	zerox	local01, #19
32720     14 A8 46 F0 | 	shr	local02, #20
32724     02 A8 66 F0 | 	shl	local02, #2
32728     2D A9 02 F1 | 	add	local02, __methods__
3272c     54 A9 02 FB | 	rdlong	local02, local02
32730     32 AB 02 F6 | 	mov	local03, objptr
32734     53 65 02 F6 | 	mov	objptr, local01
32738     2D A8 62 FD | 	call	local02
3273c     55 65 02 F6 | 	mov	objptr, local03
32740     01 7A 06 F6 | 	mov	result1, #1
32744     E7 F0 03 F6 | 	mov	ptra, fp
32748     F2 00 A0 FD | 	call	#popregs_
3274c                 | __system___struct___bas_wrap_sender_tx__ret
3274c     2D 00 64 FD | 	ret
32750                 | 
32750                 | __system___struct___bas_wrap_sender_rx_
32750     03 CA 05 F6 | 	mov	COUNT_, #3
32754     E8 00 A0 FD | 	call	#pushregs_
32758     04 64 06 F1 | 	add	objptr, #4
3275c     32 A7 02 FB | 	rdlong	local01, objptr
32760     53 A9 02 F6 | 	mov	local02, local01
32764     04 64 86 F1 | 	sub	objptr, #4
32768     13 A8 46 F7 | 	zerox	local02, #19
3276c     14 A6 46 F0 | 	shr	local01, #20
32770     02 A6 66 F0 | 	shl	local01, #2
32774     2D A7 02 F1 | 	add	local01, __methods__
32778     53 A7 02 FB | 	rdlong	local01, local01
3277c     32 AB 02 F6 | 	mov	local03, objptr
32780     54 65 02 F6 | 	mov	objptr, local02
32784     2D A6 62 FD | 	call	local01
32788     55 65 02 F6 | 	mov	objptr, local03
3278c     E7 F0 03 F6 | 	mov	ptra, fp
32790     F2 00 A0 FD | 	call	#popregs_
32794                 | __system___struct___bas_wrap_sender_rx__ret
32794     2D 00 64 FD | 	ret
32798                 | 
32798                 | __system___struct___bas_wrap_sender_close_
32798     03 CA 05 F6 | 	mov	COUNT_, #3
3279c     E8 00 A0 FD | 	call	#pushregs_
327a0     08 64 06 F1 | 	add	objptr, #8
327a4     32 A7 02 FB | 	rdlong	local01, objptr
327a8     53 A9 02 F6 | 	mov	local02, local01
327ac     08 64 86 F1 | 	sub	objptr, #8
327b0     13 A8 46 F7 | 	zerox	local02, #19
327b4     14 A6 46 F0 | 	shr	local01, #20
327b8     02 A6 66 F0 | 	shl	local01, #2
327bc     2D A7 02 F1 | 	add	local01, __methods__
327c0     53 A7 02 FB | 	rdlong	local01, local01
327c4     32 AB 02 F6 | 	mov	local03, objptr
327c8     54 65 02 F6 | 	mov	objptr, local02
327cc     2D A6 62 FD | 	call	local01
327d0     55 65 02 F6 | 	mov	objptr, local03
327d4     E7 F0 03 F6 | 	mov	ptra, fp
327d8     F2 00 A0 FD | 	call	#popregs_
327dc                 | __system___struct___bas_wrap_sender_close__ret
327dc     2D 00 64 FD | 	ret
327e0                 | 
327e0                 | LR__5470
327e0     2F          | 	byte	"/"
327e1     00          | 	byte	0
327e2                 | LR__5471
327e2     69 6E 66    | 	byte	"inf"
327e5     00          | 	byte	0
327e6                 | LR__5472
327e6     6E 61 6E    | 	byte	"nan"
327e9     00          | 	byte	0
327ea                 | LR__5473
327ea                 | 	byte	
327ea     00          | 	byte	0
327eb                 | LR__5474
327eb                 | 	byte	
327eb     00          | 	byte	0
327ec                 | LR__5475
327ec                 | 	byte	
327ec     00          | 	byte	0
327ed                 | LR__5476
327ed                 | 	byte	
327ed     00          | 	byte	0
327ee                 | LR__5477
327ee                 | 	byte	
327ee     00          | 	byte	0
327ef                 | LR__5478
327ef                 | 	byte	
327ef     00          | 	byte	0
327f0                 | LR__5479
327f0                 | 	byte	
327f0     00          | 	byte	0
327f1                 | LR__5480
327f1                 | 	byte	
327f1     00          | 	byte	0
327f2                 | LR__5481
327f2     00          | 	byte	0
327f3     00          | 	byte	0
327f4                 | LR__5482
327f4     00          | 	byte	0
327f5     00          | 	byte	0
327f6                 | LR__5483
327f6     00          | 	byte	0
327f7     00          | 	byte	0
327f8                 | LR__5484
327f8     20 21 21 21 
327fc     20 63 6F 72 
32800     72 75 70 74 
32804     65 64 20 68 
32808     65 61 70 3F 
3280c     3F 3F 20 21 
32810     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
32813     00          | 	byte	0
32814                 | LR__5485
32814     20 21 21 21 
32818     20 6F 75 74 
3281c     20 6F 66 20 
32820     68 65 61 70 
32824     20 6D 65 6D 
32828     6F 72 79 20 
3282c     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
32830     00          | 	byte	0
32831                 | LR__5486
32831     20 21 21 21 
32835     20 63 6F 72 
32839     72 75 70 74 
3283d     65 64 20 68 
32841     65 61 70 20 
32845     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
32849     00          | 	byte	0
3284a                 | LR__5487
3284a     00          | 	byte	0
3284b     00          | 	byte	0
3284c                 | LR__5488
3284c     2E          | 	byte	"."
3284d     00          | 	byte	0
3284e                 | LR__5489
3284e     00          | 	byte	0
3284f     00          | 	byte	0
32850                 | LR__5490
32850     00          | 	byte	0
32851     00          | 	byte	0
32852                 | LR__5491
32852     00          | 	byte	0
32853     00          | 	byte	0
32854                 | LR__5492
32854     54 5A       | 	byte	"TZ"
32856     00          | 	byte	0
32857                 | LR__5493
32857     2A 3A 3C 3E 
3285b     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
3285f     00          | 	byte	0
32860                 | LR__5494
32860     2B 2C 3B 3D 
32864     5B 5D       | 	byte	"+,;=[]"
32866     00          | 	byte	0
32867                 | LR__5495
32867     46 41 54 33 
3286b     32 20 20 20 | 	byte	"FAT32   "
3286f     00          | 	byte	0
32870                 | LR__5496
32870     00          | 	byte	0
32871     00          | 	byte	0
32872                 | LR__5497
32872                 | 	byte	
32872     00          | 	byte	0
32873                 | LR__5498
32873                 | 	byte	
32873     00          | 	byte	0
32874                 | LR__5499
32874                 | 	byte	
32874     00          | 	byte	0
32875                 | LR__5500
32875                 | 	byte	
32875     00          | 	byte	0
32876                 | LR__5501
32876     22          | 	byte	34
32877     00          | 	byte	0
32878                 | LR__5502
32878     22          | 	byte	34
32879     00          | 	byte	0
3287a                 | LR__5503
3287a     3A          | 	byte	":"
3287b     00          | 	byte	0
3287c                 | LR__5504
3287c                 | 	byte	
3287c     00          | 	byte	0
3287d                 | LR__5505
3287d                 | 	byte	
3287d     00          | 	byte	0
3287e                 | LR__5506
3287e                 | 	byte	
3287e     00          | 	byte	0
3287f                 | LR__5507
3287f                 | 	byte	
3287f     00          | 	byte	0
32880                 | LR__5508
32880                 | 	byte	
32880     00          | 	byte	0
32881                 | LR__5509
32881                 | 	byte	
32881     00          | 	byte	0
32882                 | LR__5510
32882                 | 	byte	
32882     00          | 	byte	0
32883                 | LR__5511
32883     30          | 	byte	"0"
32884     00          | 	byte	0
32885                 | LR__5512
32885     22          | 	byte	34
32886     00          | 	byte	0
32887                 | LR__5513
32887     22          | 	byte	34
32888     00          | 	byte	0
32889                 | LR__5514
32889     22          | 	byte	34
3288a     00          | 	byte	0
3288b                 | LR__5515
3288b     22          | 	byte	34
3288c     00          | 	byte	0
3288d                 | LR__5516
3288d     22          | 	byte	34
3288e     00          | 	byte	0
3288f                 | LR__5517
3288f     3E          | 	byte	">"
32890     00          | 	byte	0
32891                 | LR__5518
32891     3C          | 	byte	"<"
32892     00          | 	byte	0
32893                 | LR__5519
32893     2B          | 	byte	"+"
32894     00          | 	byte	0
32895                 | LR__5520
32895     2D          | 	byte	"-"
32896     00          | 	byte	0
32897                 | LR__5521
32897     2A          | 	byte	"*"
32898     00          | 	byte	0
32899                 | LR__5522
32899     2F          | 	byte	"/"
3289a     00          | 	byte	0
3289b                 | LR__5523
3289b     5E          | 	byte	"^"
3289c     00          | 	byte	0
3289d                 | LR__5524
3289d     3D          | 	byte	"="
3289e     00          | 	byte	0
3289f                 | LR__5525
3289f     2B          | 	byte	"+"
328a0     00          | 	byte	0
328a1                 | LR__5526
328a1     2B          | 	byte	"+"
328a2     00          | 	byte	0
328a3                 | LR__5527
328a3     2D          | 	byte	"-"
328a4     00          | 	byte	0
328a5                 | LR__5528
328a5     2D          | 	byte	"-"
328a6     00          | 	byte	0
328a7                 | LR__5529
328a7     3C          | 	byte	"<"
328a8     00          | 	byte	0
328a9                 | LR__5530
328a9     3E          | 	byte	">"
328aa     00          | 	byte	0
328ab                 | LR__5531
328ab     22          | 	byte	34
328ac     00          | 	byte	0
328ad                 | LR__5532
328ad     22          | 	byte	34
328ae     00          | 	byte	0
328af                 | LR__5533
328af     65 6C 73 65 | 	byte	"else"
328b3     00          | 	byte	0
328b4                 | LR__5534
328b4     74 68 65 6E | 	byte	"then"
328b8     00          | 	byte	0
328b9                 | LR__5535
328b9     3F          | 	byte	"?"
328ba     00          | 	byte	0
328bb                 | LR__5536
328bb     3F          | 	byte	"?"
328bc     00          | 	byte	0
328bd                 | LR__5537
328bd     2E          | 	byte	"."
328be     00          | 	byte	0
328bf                 | LR__5538
328bf     6D 6F 75 73 
328c3     65          | 	byte	"mouse"
328c4     00          | 	byte	0
328c5                 | LR__5539
328c5     63 75 72 73 
328c9     6F 72       | 	byte	"cursor"
328cb     00          | 	byte	0
328cc                 | LR__5540
328cc     63 6C 69 63 
328d0     6B          | 	byte	"click"
328d1     00          | 	byte	0
328d2                 | LR__5541
328d2     6F 6E       | 	byte	"on"
328d4     00          | 	byte	0
328d5                 | LR__5542
328d5     31          | 	byte	"1"
328d6     00          | 	byte	0
328d7                 | LR__5543
328d7     6F 66 66    | 	byte	"off"
328da     00          | 	byte	0
328db                 | LR__5544
328db     30          | 	byte	"0"
328dc     00          | 	byte	0
328dd                 | LR__5545
328dd     6D 6F 64 65 | 	byte	"mode"
328e1     00          | 	byte	0
328e2                 | LR__5546
328e2     6D 2E       | 	byte	"m."
328e4     00          | 	byte	0
328e5                 | LR__5547
328e5     61 74 61 72 
328e9     69          | 	byte	"atari"
328ea     00          | 	byte	0
328eb                 | LR__5548
328eb     30          | 	byte	"0"
328ec     00          | 	byte	0
328ed                 | LR__5549
328ed     70 63 5F 61 
328f1     6D 62 65 72 | 	byte	"pc_amber"
328f5     00          | 	byte	0
328f6                 | LR__5550
328f6     31          | 	byte	"1"
328f7     00          | 	byte	0
328f8                 | LR__5551
328f8     70 63 5F 67 
328fc     72 65 65 6E | 	byte	"pc_green"
32900     00          | 	byte	0
32901                 | LR__5552
32901     32          | 	byte	"2"
32902     00          | 	byte	0
32903                 | LR__5553
32903     70 63 5F 77 
32907     68 69 74 65 | 	byte	"pc_white"
3290b     00          | 	byte	0
3290c                 | LR__5554
3290c     33          | 	byte	"3"
3290d     00          | 	byte	0
3290e                 | LR__5555
3290e     73 74       | 	byte	"st"
32910     00          | 	byte	0
32911                 | LR__5556
32911     34          | 	byte	"4"
32912     00          | 	byte	0
32913                 | LR__5557
32913     61 6D 69 67 
32917     61          | 	byte	"amiga"
32918     00          | 	byte	0
32919                 | LR__5558
32919     35          | 	byte	"5"
3291a     00          | 	byte	0
3291b                 | LR__5559
3291b                 | 	byte	
3291b     00          | 	byte	0
3291c                 | LR__5560
3291c     6C 6F 61 64 | 	byte	"load"
32920     00          | 	byte	0
32921                 | LR__5561
32921     73 61 76 65 | 	byte	"save"
32925     00          | 	byte	0
32926                 | LR__5562
32926     62 72 75 6E | 	byte	"brun"
3292a     00          | 	byte	0
3292b                 | LR__5563
3292b     72 75 6E    | 	byte	"run"
3292e     00          | 	byte	0
3292f                 | LR__5564
3292f     6C 6F 2E    | 	byte	"lo."
32932     00          | 	byte	0
32933                 | LR__5565
32933     73 2E       | 	byte	"s."
32935     00          | 	byte	0
32936                 | LR__5566
32936     62 72 2E    | 	byte	"br."
32939     00          | 	byte	0
3293a                 | LR__5567
3293a     65 6E 74 65 
3293e     72          | 	byte	"enter"
3293f     00          | 	byte	0
32940                 | LR__5568
32940     65 2E       | 	byte	"e."
32942     00          | 	byte	0
32943                 | LR__5569
32943     24          | 	byte	"$"
32944     00          | 	byte	0
32945                 | LR__5570
32945     64 65 6C 65 
32949     74 65       | 	byte	"delete"
3294b     00          | 	byte	0
3294c                 | LR__5571
3294c     6D 6B 64 69 
32950     72          | 	byte	"mkdir"
32951     00          | 	byte	0
32952                 | LR__5572
32952     24          | 	byte	"$"
32953     00          | 	byte	0
32954                 | LR__5573
32954     63 6F 70 79 | 	byte	"copy"
32958     00          | 	byte	0
32959                 | LR__5574
32959     24          | 	byte	"$"
3295a     00          | 	byte	0
3295b                 | LR__5575
3295b     63 6F 70 79 | 	byte	"copy"
3295f     00          | 	byte	0
32960                 | LR__5576
32960     24          | 	byte	"$"
32961     00          | 	byte	0
32962                 | LR__5577
32962     63 64       | 	byte	"cd"
32964     00          | 	byte	0
32965                 | LR__5578
32965     63 64 2E    | 	byte	"cd."
32968     00          | 	byte	0
32969                 | LR__5579
32969     2E          | 	byte	"."
3296a     00          | 	byte	0
3296b                 | LR__5580
3296b     2E 2E       | 	byte	".."
3296d     00          | 	byte	0
3296e                 | LR__5581
3296e     63 64       | 	byte	"cd"
32970     00          | 	byte	0
32971                 | LR__5582
32971     2F          | 	byte	"/"
32972     00          | 	byte	0
32973                 | LR__5583
32973                 | 	byte	
32973     00          | 	byte	0
32974                 | LR__5584
32974                 | 	byte	
32974     00          | 	byte	0
32975                 | LR__5585
32975                 | 	byte	
32975     00          | 	byte	0
32976                 | LR__5586
32976                 | 	byte	
32976     00          | 	byte	0
32977                 | LR__5587
32977                 | 	byte	
32977     00          | 	byte	0
32978                 | LR__5588
32978     52 65 61 64 
3297c     79          | 	byte	"Ready"
3297d     00          | 	byte	0
3297e                 | LR__5589
3297e     2B          | 	byte	"+"
3297f     00          | 	byte	0
32980                 | LR__5590
32980     2D          | 	byte	"-"
32981     00          | 	byte	0
32982                 | LR__5591
32982     6F 72       | 	byte	"or"
32984     00          | 	byte	0
32985                 | LR__5592
32985     78 6F 72    | 	byte	"xor"
32988     00          | 	byte	0
32989                 | LR__5593
32989     2A          | 	byte	"*"
3298a     00          | 	byte	0
3298b                 | LR__5594
3298b     2F          | 	byte	"/"
3298c     00          | 	byte	0
3298d                 | LR__5595
3298d     61 6E 64    | 	byte	"and"
32990     00          | 	byte	0
32991                 | LR__5596
32991     64 69 76    | 	byte	"div"
32994     00          | 	byte	0
32995                 | LR__5597
32995     6D 6F 64    | 	byte	"mod"
32998     00          | 	byte	0
32999                 | LR__5598
32999     73 68 6C    | 	byte	"shl"
3299c     00          | 	byte	0
3299d                 | LR__5599
3299d     73 68 72    | 	byte	"shr"
329a0     00          | 	byte	0
329a1                 | LR__5600
329a1     5E          | 	byte	"^"
329a2     00          | 	byte	0
329a3                 | LR__5601
329a3     6E 6F 74    | 	byte	"not"
329a6     00          | 	byte	0
329a7                 | LR__5602
329a7     40          | 	byte	"@"
329a8     00          | 	byte	0
329a9                 | LR__5603
329a9     3D          | 	byte	"="
329aa     00          | 	byte	0
329ab                 | LR__5604
329ab     3E 3D       | 	byte	">="
329ad     00          | 	byte	0
329ae                 | LR__5605
329ae     3C 3D       | 	byte	"<="
329b0     00          | 	byte	0
329b1                 | LR__5606
329b1     3C          | 	byte	"<"
329b2     00          | 	byte	0
329b3                 | LR__5607
329b3     3E          | 	byte	">"
329b4     00          | 	byte	0
329b5                 | LR__5608
329b5     3C 3E       | 	byte	"<>"
329b7     00          | 	byte	0
329b8                 | LR__5609
329b8     2B 2B       | 	byte	"++"
329ba     00          | 	byte	0
329bb                 | LR__5610
329bb     2D 2D       | 	byte	"--"
329bd     00          | 	byte	0
329be                 | LR__5611
329be     23          | 	byte	"#"
329bf     00          | 	byte	0
329c0                 | LR__5612
329c0     30          | 	byte	"0"
329c1     00          | 	byte	0
329c2                 | LR__5613
329c2     39          | 	byte	"9"
329c3     00          | 	byte	0
329c4                 | LR__5614
329c4     23 72 65 61 
329c8     64          | 	byte	"#read"
329c9     00          | 	byte	0
329ca                 | LR__5615
329ca     23 77 72 69 
329ce     74 65       | 	byte	"#write"
329d0     00          | 	byte	0
329d1                 | LR__5616
329d1     23 61 70 70 
329d5     65 6E 64    | 	byte	"#append"
329d8     00          | 	byte	0
329d9                 | LR__5617
329d9     23          | 	byte	"#"
329da     00          | 	byte	0
329db                 | LR__5618
329db     23          | 	byte	"#"
329dc     00          | 	byte	0
329dd                 | LR__5619
329dd     2D          | 	byte	"-"
329de     00          | 	byte	0
329df                 | LR__5620
329df     30          | 	byte	"0"
329e0     00          | 	byte	0
329e1                 | LR__5621
329e1     63          | 	byte	"c"
329e2     00          | 	byte	0
329e3                 | LR__5622
329e3     63 23       | 	byte	"c#"
329e5     00          | 	byte	0
329e6                 | LR__5623
329e6     64          | 	byte	"d"
329e7     00          | 	byte	0
329e8                 | LR__5624
329e8     64 23       | 	byte	"d#"
329ea     00          | 	byte	0
329eb                 | LR__5625
329eb     65          | 	byte	"e"
329ec     00          | 	byte	0
329ed                 | LR__5626
329ed     66          | 	byte	"f"
329ee     00          | 	byte	0
329ef                 | LR__5627
329ef     66 23       | 	byte	"f#"
329f1     00          | 	byte	0
329f2                 | LR__5628
329f2     67          | 	byte	"g"
329f3     00          | 	byte	0
329f4                 | LR__5629
329f4     67 23       | 	byte	"g#"
329f6     00          | 	byte	0
329f7                 | LR__5630
329f7     61          | 	byte	"a"
329f8     00          | 	byte	0
329f9                 | LR__5631
329f9     61 23       | 	byte	"a#"
329fb     00          | 	byte	0
329fc                 | LR__5632
329fc     68          | 	byte	"h"
329fd     00          | 	byte	0
329fe                 | LR__5633
329fe     62          | 	byte	"b"
329ff     00          | 	byte	0
32a00                 | LR__5634
32a00     2B          | 	byte	"+"
32a01     00          | 	byte	0
32a02                 | LR__5635
32a02     2D          | 	byte	"-"
32a03     00          | 	byte	0
32a04                 | LR__5636
32a04     3D          | 	byte	"="
32a05     00          | 	byte	0
32a06                 | LR__5637
32a06     2C          | 	byte	","
32a07     00          | 	byte	0
32a08                 | LR__5638
32a08     2A          | 	byte	"*"
32a09     00          | 	byte	0
32a0a                 | LR__5639
32a0a     2F          | 	byte	"/"
32a0b     00          | 	byte	0
32a0c                 | LR__5640
32a0c     3B          | 	byte	";"
32a0d     00          | 	byte	0
32a0e                 | LR__5641
32a0e     22          | 	byte	34
32a0f     00          | 	byte	0
32a10                 | LR__5642
32a10     5E          | 	byte	"^"
32a11     00          | 	byte	0
32a12                 | LR__5643
32a12     29          | 	byte	")"
32a13     00          | 	byte	0
32a14                 | LR__5644
32a14     28          | 	byte	"("
32a15     00          | 	byte	0
32a16                 | LR__5645
32a16     3A          | 	byte	":"
32a17     00          | 	byte	0
32a18                 | LR__5646
32a18     20          | 	byte	" "
32a19     00          | 	byte	0
32a1a                 | LR__5647
32a1a     3E          | 	byte	">"
32a1b     00          | 	byte	0
32a1c                 | LR__5648
32a1c     3C          | 	byte	"<"
32a1d     00          | 	byte	0
32a1e                 | LR__5649
32a1e     3D          | 	byte	"="
32a1f     00          | 	byte	0
32a20                 | LR__5650
32a20     62 65 65 70 | 	byte	"beep"
32a24     00          | 	byte	0
32a25                 | LR__5651
32a25     62 2E       | 	byte	"b."
32a27     00          | 	byte	0
32a28                 | LR__5652
32a28     62 6C 69 74 | 	byte	"blit"
32a2c     00          | 	byte	0
32a2d                 | LR__5653
32a2d     62 6F 78    | 	byte	"box"
32a30     00          | 	byte	0
32a31                 | LR__5654
32a31     62 72 75 6E | 	byte	"brun"
32a35     00          | 	byte	0
32a36                 | LR__5655
32a36     62 72 2E    | 	byte	"br."
32a39     00          | 	byte	0
32a3a                 | LR__5656
32a3a     63 64       | 	byte	"cd"
32a3c     00          | 	byte	0
32a3d                 | LR__5657
32a3d     63 68 61 6E 
32a41     67 65 66 72 
32a45     65 71       | 	byte	"changefreq"
32a47     00          | 	byte	0
32a48                 | LR__5658
32a48     63 66 2E    | 	byte	"cf."
32a4b     00          | 	byte	0
32a4c                 | LR__5659
32a4c     63 68 61 6E 
32a50     67 65 70 61 
32a54     6E          | 	byte	"changepan"
32a55     00          | 	byte	0
32a56                 | LR__5660
32a56     63 70 2E    | 	byte	"cp."
32a59     00          | 	byte	0
32a5a                 | LR__5661
32a5a     63 68 61 6E 
32a5e     67 65 76 6F 
32a62     6C          | 	byte	"changevol"
32a63     00          | 	byte	0
32a64                 | LR__5662
32a64     63 76 2E    | 	byte	"cv."
32a67     00          | 	byte	0
32a68                 | LR__5663
32a68     63 68 61 6E 
32a6c     67 65 77 61 
32a70     76 65       | 	byte	"changewave"
32a72     00          | 	byte	0
32a73                 | LR__5664
32a73     63 77 2E    | 	byte	"cw."
32a76     00          | 	byte	0
32a77                 | LR__5665
32a77     63 69 72 63 
32a7b     6C 65       | 	byte	"circle"
32a7d     00          | 	byte	0
32a7e                 | LR__5666
32a7e     63 69 2E    | 	byte	"ci."
32a81     00          | 	byte	0
32a82                 | LR__5667
32a82     63 6C 69 63 
32a86     6B          | 	byte	"click"
32a87     00          | 	byte	0
32a88                 | LR__5668
32a88     63 6C 6F 73 
32a8c     65          | 	byte	"close"
32a8d     00          | 	byte	0
32a8e                 | LR__5669
32a8e     63 6C 73    | 	byte	"cls"
32a91     00          | 	byte	0
32a92                 | LR__5670
32a92     63 6F 67 73 
32a96     74 6F 70    | 	byte	"cogstop"
32a99     00          | 	byte	0
32a9a                 | LR__5671
32a9a     63 6F 6C 6F 
32a9e     72          | 	byte	"color"
32a9f     00          | 	byte	0
32aa0                 | LR__5672
32aa0     63 2E       | 	byte	"c."
32aa2     00          | 	byte	0
32aa3                 | LR__5673
32aa3     63 6F 70 79 | 	byte	"copy"
32aa7     00          | 	byte	0
32aa8                 | LR__5674
32aa8     63 75 72 73 
32aac     6F 72       | 	byte	"cursor"
32aae     00          | 	byte	0
32aaf                 | LR__5675
32aaf     64 61 74 61 | 	byte	"data"
32ab3     00          | 	byte	0
32ab4                 | LR__5676
32ab4     64 65 66 63 
32ab8     68 61 72    | 	byte	"defchar"
32abb     00          | 	byte	0
32abc                 | LR__5677
32abc     64 65 66 73 
32ac0     6E 64       | 	byte	"defsnd"
32ac2     00          | 	byte	0
32ac3                 | LR__5678
32ac3     64 65 66 65 
32ac7     6E 76       | 	byte	"defenv"
32ac9     00          | 	byte	0
32aca                 | LR__5679
32aca     64 65 66 73 
32ace     70 72 69 74 
32ad2     65          | 	byte	"defsprite"
32ad3     00          | 	byte	0
32ad4                 | LR__5680
32ad4     64 73 2E    | 	byte	"ds."
32ad7     00          | 	byte	0
32ad8                 | LR__5681
32ad8     64 65 67    | 	byte	"deg"
32adb     00          | 	byte	0
32adc                 | LR__5682
32adc     64 65 6C 65 
32ae0     74 65       | 	byte	"delete"
32ae2     00          | 	byte	0
32ae3                 | LR__5683
32ae3     64 69 6D    | 	byte	"dim"
32ae6     00          | 	byte	0
32ae7                 | LR__5684
32ae7     64 69 72    | 	byte	"dir"
32aea     00          | 	byte	0
32aeb                 | LR__5685
32aeb     64 70 6F 6B 
32aef     65          | 	byte	"dpoke"
32af0     00          | 	byte	0
32af1                 | LR__5686
32af1     64 72 61 77 | 	byte	"draw"
32af5     00          | 	byte	0
32af6                 | LR__5687
32af6     64 72 61 77 
32afa     74 6F       | 	byte	"drawto"
32afc     00          | 	byte	0
32afd                 | LR__5688
32afd     64 72 2E    | 	byte	"dr."
32b00     00          | 	byte	0
32b01                 | LR__5689
32b01     65 6C 73 65 | 	byte	"else"
32b05     00          | 	byte	0
32b06                 | LR__5690
32b06     65 6E 64    | 	byte	"end"
32b09     00          | 	byte	0
32b0a                 | LR__5691
32b0a     65 6E 74 65 
32b0e     72          | 	byte	"enter"
32b0f     00          | 	byte	0
32b10                 | LR__5692
32b10     65 2E       | 	byte	"e."
32b12     00          | 	byte	0
32b13                 | LR__5693
32b13     66 63 69 72 
32b17     63 6C 65    | 	byte	"fcircle"
32b1a     00          | 	byte	0
32b1b                 | LR__5694
32b1b     66 63 2E    | 	byte	"fc."
32b1e     00          | 	byte	0
32b1f                 | LR__5695
32b1f     66 69 6C 6C | 	byte	"fill"
32b23     00          | 	byte	0
32b24                 | LR__5696
32b24     66 69 2E    | 	byte	"fi."
32b27     00          | 	byte	0
32b28                 | LR__5697
32b28     66 6F 6E 74 | 	byte	"font"
32b2c     00          | 	byte	0
32b2d                 | LR__5698
32b2d     66 6F 72    | 	byte	"for"
32b30     00          | 	byte	0
32b31                 | LR__5699
32b31     66 2E       | 	byte	"f."
32b33     00          | 	byte	0
32b34                 | LR__5700
32b34     66 72 61 6D 
32b38     65          | 	byte	"frame"
32b39     00          | 	byte	0
32b3a                 | LR__5701
32b3a     66 72 2E    | 	byte	"fr."
32b3d     00          | 	byte	0
32b3e                 | LR__5702
32b3e     67 65 74    | 	byte	"get"
32b41     00          | 	byte	0
32b42                 | LR__5703
32b42     67 6F 73 75 
32b46     62          | 	byte	"gosub"
32b47     00          | 	byte	0
32b48                 | LR__5704
32b48     67 6F 74 6F | 	byte	"goto"
32b4c     00          | 	byte	0
32b4d                 | LR__5705
32b4d     67 2E       | 	byte	"g."
32b4f     00          | 	byte	0
32b50                 | LR__5706
32b50     69 66       | 	byte	"if"
32b52     00          | 	byte	0
32b53                 | LR__5707
32b53     69 6E 6B    | 	byte	"ink"
32b56     00          | 	byte	0
32b57                 | LR__5708
32b57     69 2E       | 	byte	"i."
32b59     00          | 	byte	0
32b5a                 | LR__5709
32b5a     69 6E 70 75 
32b5e     74          | 	byte	"input"
32b5f     00          | 	byte	0
32b60                 | LR__5710
32b60     6C 69 73 74 | 	byte	"list"
32b64     00          | 	byte	0
32b65                 | LR__5711
32b65     6C 2E       | 	byte	"l."
32b67     00          | 	byte	0
32b68                 | LR__5712
32b68     6C 6F 61 64 | 	byte	"load"
32b6c     00          | 	byte	0
32b6d                 | LR__5713
32b6d     6C 6F 2E    | 	byte	"lo."
32b70     00          | 	byte	0
32b71                 | LR__5714
32b71     6C 70 6F 6B 
32b75     65          | 	byte	"lpoke"
32b76     00          | 	byte	0
32b77                 | LR__5715
32b77     6D 6B 64 69 
32b7b     72          | 	byte	"mkdir"
32b7c     00          | 	byte	0
32b7d                 | LR__5716
32b7d     6D 6F 64 65 | 	byte	"mode"
32b81     00          | 	byte	0
32b82                 | LR__5717
32b82     6D 2E       | 	byte	"m."
32b84     00          | 	byte	0
32b85                 | LR__5718
32b85     6D 6F 75 73 
32b89     65          | 	byte	"mouse"
32b8a     00          | 	byte	0
32b8b                 | LR__5719
32b8b     6E 65 77    | 	byte	"new"
32b8e     00          | 	byte	0
32b8f                 | LR__5720
32b8f     6E 65 78 74 | 	byte	"next"
32b93     00          | 	byte	0
32b94                 | LR__5721
32b94     6E 2E       | 	byte	"n."
32b96     00          | 	byte	0
32b97                 | LR__5722
32b97     6F 6E       | 	byte	"on"
32b99     00          | 	byte	0
32b9a                 | LR__5723
32b9a     6F 70 65 6E | 	byte	"open"
32b9e     00          | 	byte	0
32b9f                 | LR__5724
32b9f     70 61 70 65 
32ba3     72          | 	byte	"paper"
32ba4     00          | 	byte	0
32ba5                 | LR__5725
32ba5     70 61 2E    | 	byte	"pa."
32ba8     00          | 	byte	0
32ba9                 | LR__5726
32ba9     70 69 6E 66 
32bad     6C 6F 61 74 | 	byte	"pinfloat"
32bb1     00          | 	byte	0
32bb2                 | LR__5727
32bb2     70 69 6E 68 
32bb6     69          | 	byte	"pinhi"
32bb7     00          | 	byte	0
32bb8                 | LR__5728
32bb8     70 69 6E 6C 
32bbc     6F          | 	byte	"pinlo"
32bbd     00          | 	byte	0
32bbe                 | LR__5729
32bbe     70 69 6E 73 
32bc2     74 61 72 74 | 	byte	"pinstart"
32bc6     00          | 	byte	0
32bc7                 | LR__5730
32bc7     70 69 6E 74 
32bcb     6F 67 67 6C 
32bcf     65          | 	byte	"pintoggle"
32bd0     00          | 	byte	0
32bd1                 | LR__5731
32bd1     70 69 6E 77 
32bd5     72 69 74 65 | 	byte	"pinwrite"
32bd9     00          | 	byte	0
32bda                 | LR__5732
32bda     70 6C 61 79 | 	byte	"play"
32bde     00          | 	byte	0
32bdf                 | LR__5733
32bdf     70 2E       | 	byte	"p."
32be1     00          | 	byte	0
32be2                 | LR__5734
32be2     70 6C 6F 74 | 	byte	"plot"
32be6     00          | 	byte	0
32be7                 | LR__5735
32be7     70 6C 2E    | 	byte	"pl."
32bea     00          | 	byte	0
32beb                 | LR__5736
32beb     70 6F 6B 65 | 	byte	"poke"
32bef     00          | 	byte	0
32bf0                 | LR__5737
32bf0     70 6F 70    | 	byte	"pop"
32bf3     00          | 	byte	0
32bf4                 | LR__5738
32bf4     70 6F 73 69 
32bf8     74 69 6F 6E | 	byte	"position"
32bfc     00          | 	byte	0
32bfd                 | LR__5739
32bfd     70 6F 73 2E | 	byte	"pos."
32c01     00          | 	byte	0
32c02                 | LR__5740
32c02     70 72 69 6E 
32c06     74          | 	byte	"print"
32c07     00          | 	byte	0
32c08                 | LR__5741
32c08     3F          | 	byte	"?"
32c09     00          | 	byte	0
32c0a                 | LR__5742
32c0a     70 75 74    | 	byte	"put"
32c0d     00          | 	byte	0
32c0e                 | LR__5743
32c0e     72 61 64    | 	byte	"rad"
32c11     00          | 	byte	0
32c12                 | LR__5744
32c12     72 65 61 64 | 	byte	"read"
32c16     00          | 	byte	0
32c17                 | LR__5745
32c17     72 65 6C 65 
32c1b     61 73 65    | 	byte	"release"
32c1e     00          | 	byte	0
32c1f                 | LR__5746
32c1f     72 65 6D    | 	byte	"rem"
32c22     00          | 	byte	0
32c23                 | LR__5747
32c23     27          | 	byte	"'"
32c24     00          | 	byte	0
32c25                 | LR__5748
32c25     72 65 73 74 
32c29     6F 72 65    | 	byte	"restore"
32c2c     00          | 	byte	0
32c2d                 | LR__5749
32c2d     72 65 73 74 
32c31     6F 72 65 70 
32c35     61 6C 65 74 
32c39     74 65       | 	byte	"restorepalette"
32c3b     00          | 	byte	0
32c3c                 | LR__5750
32c3c     72 70 2E    | 	byte	"rp."
32c3f     00          | 	byte	0
32c40                 | LR__5751
32c40     72 65 74 75 
32c44     72 6E       | 	byte	"return"
32c46     00          | 	byte	0
32c47                 | LR__5752
32c47     72 75 6E    | 	byte	"run"
32c4a     00          | 	byte	0
32c4b                 | LR__5753
32c4b     72 2E       | 	byte	"r."
32c4d     00          | 	byte	0
32c4e                 | LR__5754
32c4e     73 61 76 65 | 	byte	"save"
32c52     00          | 	byte	0
32c53                 | LR__5755
32c53     73 2E       | 	byte	"s."
32c55     00          | 	byte	0
32c56                 | LR__5756
32c56     73 65 74 63 
32c5a     6F 6C 6F 72 | 	byte	"setcolor"
32c5e     00          | 	byte	0
32c5f                 | LR__5757
32c5f     73 63 2E    | 	byte	"sc."
32c62     00          | 	byte	0
32c63                 | LR__5758
32c63     73 65 74 61 
32c67     6D 6F 64 65 | 	byte	"setamode"
32c6b     00          | 	byte	0
32c6c                 | LR__5759
32c6c     73 61 2E    | 	byte	"sa."
32c6f     00          | 	byte	0
32c70                 | LR__5760
32c70     73 65 74 64 
32c74     65 6C 61 79 | 	byte	"setdelay"
32c78     00          | 	byte	0
32c79                 | LR__5761
32c79     73 64 2E    | 	byte	"sd."
32c7c     00          | 	byte	0
32c7d                 | LR__5762
32c7d     73 65 74 65 
32c81     6E 76       | 	byte	"setenv"
32c83     00          | 	byte	0
32c84                 | LR__5763
32c84     73 65 2E    | 	byte	"se."
32c87     00          | 	byte	0
32c88                 | LR__5764
32c88     73 65 74 6C 
32c8c     65 6E       | 	byte	"setlen"
32c8e     00          | 	byte	0
32c8f                 | LR__5765
32c8f     73 6C 2E    | 	byte	"sl."
32c92     00          | 	byte	0
32c93                 | LR__5766
32c93     73 65 74 70 
32c97     61 6E       | 	byte	"setpan"
32c99     00          | 	byte	0
32c9a                 | LR__5767
32c9a     73 70 2E    | 	byte	"sp."
32c9d     00          | 	byte	0
32c9e                 | LR__5768
32c9e     73 65 74 73 
32ca2     75 73 74 61 
32ca6     69 6E       | 	byte	"setsustain"
32ca8     00          | 	byte	0
32ca9                 | LR__5769
32ca9     73 73 2E    | 	byte	"ss."
32cac     00          | 	byte	0
32cad                 | LR__5770
32cad     73 65 74 76 
32cb1     6F 6C       | 	byte	"setvol"
32cb3     00          | 	byte	0
32cb4                 | LR__5771
32cb4     73 76 2E    | 	byte	"sv."
32cb7     00          | 	byte	0
32cb8                 | LR__5772
32cb8     73 65 74 77 
32cbc     61 76 65    | 	byte	"setwave"
32cbf     00          | 	byte	0
32cc0                 | LR__5773
32cc0     73 77 2E    | 	byte	"sw."
32cc3     00          | 	byte	0
32cc4                 | LR__5774
32cc4     73 65 74 77 
32cc8     61 76       | 	byte	"setwav"
32cca     00          | 	byte	0
32ccb                 | LR__5775
32ccb     73 68 75 74 
32ccf     75 70       | 	byte	"shutup"
32cd1     00          | 	byte	0
32cd2                 | LR__5776
32cd2     73 68 2E    | 	byte	"sh."
32cd5     00          | 	byte	0
32cd6                 | LR__5777
32cd6     73 6F 75 6E 
32cda     64          | 	byte	"sound"
32cdb     00          | 	byte	0
32cdc                 | LR__5778
32cdc     73 6F 2E    | 	byte	"so."
32cdf     00          | 	byte	0
32ce0                 | LR__5779
32ce0     73 70 72 69 
32ce4     74 65       | 	byte	"sprite"
32ce6     00          | 	byte	0
32ce7                 | LR__5780
32ce7     73 70 72 2E | 	byte	"spr."
32ceb     00          | 	byte	0
32cec                 | LR__5781
32cec     74 68 65 6E | 	byte	"then"
32cf0     00          | 	byte	0
32cf1                 | LR__5782
32cf1     77 61 69 74 
32cf5     6D 73       | 	byte	"waitms"
32cf7     00          | 	byte	0
32cf8                 | LR__5783
32cf8     77 2E       | 	byte	"w."
32cfa     00          | 	byte	0
32cfb                 | LR__5784
32cfb     77 61 69 74 
32cff     63 6C 6F 63 
32d03     6B          | 	byte	"waitclock"
32d04     00          | 	byte	0
32d05                 | LR__5785
32d05     77 63 2E    | 	byte	"wc."
32d08     00          | 	byte	0
32d09                 | LR__5786
32d09     77 61 69 74 
32d0d     76 62 6C    | 	byte	"waitvbl"
32d10     00          | 	byte	0
32d11                 | LR__5787
32d11     77 76 2E    | 	byte	"wv."
32d14     00          | 	byte	0
32d15                 | LR__5788
32d15     77 72 70 69 
32d19     6E          | 	byte	"wrpin"
32d1a     00          | 	byte	0
32d1b                 | LR__5789
32d1b     77 78 70 69 
32d1f     6E          | 	byte	"wxpin"
32d20     00          | 	byte	0
32d21                 | LR__5790
32d21     77 79 70 69 
32d25     6E          | 	byte	"wypin"
32d26     00          | 	byte	0
32d27                 | LR__5791
32d27     61 62 73    | 	byte	"abs"
32d2a     00          | 	byte	0
32d2b                 | LR__5792
32d2b     61 63 6F 73 | 	byte	"acos"
32d2f     00          | 	byte	0
32d30                 | LR__5793
32d30     61 64 72    | 	byte	"adr"
32d33     00          | 	byte	0
32d34                 | LR__5794
32d34     61 64 64 72 | 	byte	"addr"
32d38     00          | 	byte	0
32d39                 | LR__5795
32d39     61 73 63    | 	byte	"asc"
32d3c     00          | 	byte	0
32d3d                 | LR__5796
32d3d     61 73 69 6E | 	byte	"asin"
32d41     00          | 	byte	0
32d42                 | LR__5797
32d42     61 74 6E    | 	byte	"atn"
32d45     00          | 	byte	0
32d46                 | LR__5798
32d46     62 69 6E 24 | 	byte	"bin$"
32d4a     00          | 	byte	0
32d4b                 | LR__5799
32d4b     63 68 72 24 | 	byte	"chr$"
32d4f     00          | 	byte	0
32d50                 | LR__5800
32d50     63 6F 67 69 
32d54     6E 69 74    | 	byte	"coginit"
32d57     00          | 	byte	0
32d58                 | LR__5801
32d58     63 6F 73    | 	byte	"cos"
32d5b     00          | 	byte	0
32d5c                 | LR__5802
32d5c     64 70 65 65 
32d60     6B          | 	byte	"dpeek"
32d61     00          | 	byte	0
32d62                 | LR__5803
32d62     66 69 6E 64 
32d66     66 69 72 73 
32d6a     74          | 	byte	"findfirst"
32d6b     00          | 	byte	0
32d6c                 | LR__5804
32d6c     66 69 6E 64 
32d70     6E 65 78 74 | 	byte	"findnext"
32d74     00          | 	byte	0
32d75                 | LR__5805
32d75     66 72 61 6D 
32d79     65 62 75 66 | 	byte	"framebuf"
32d7d     00          | 	byte	0
32d7e                 | LR__5806
32d7e     66 62 2E    | 	byte	"fb."
32d81     00          | 	byte	0
32d82                 | LR__5807
32d82     66 72 65    | 	byte	"fre"
32d85     00          | 	byte	0
32d86                 | LR__5808
32d86     67 63 2E    | 	byte	"gc."
32d89     00          | 	byte	0
32d8a                 | LR__5809
32d8a     67 65 74 63 
32d8e     6F 6C 6F 72 | 	byte	"getcolor"
32d92     00          | 	byte	0
32d93                 | LR__5810
32d93     67 65 74 70 
32d97     69 78 65 6C | 	byte	"getpixel"
32d9b     00          | 	byte	0
32d9c                 | LR__5811
32d9c     67 65 2E    | 	byte	"ge."
32d9f     00          | 	byte	0
32da0                 | LR__5812
32da0     67 65 74 65 
32da4     6E 76 73 75 
32da8     73 74 61 69 
32dac     6E          | 	byte	"getenvsustain"
32dad     00          | 	byte	0
32dae                 | LR__5813
32dae     67 65 74 6E 
32db2     6F 74 65 76 
32db6     61 6C 75 65 | 	byte	"getnotevalue"
32dba     00          | 	byte	0
32dbb                 | LR__5814
32dbb     67 65 74 72 
32dbf     65 61 6C 66 
32dc3     72 65 71    | 	byte	"getrealfreq"
32dc6     00          | 	byte	0
32dc7                 | LR__5815
32dc7     67 65 74 74 
32dcb     69 6D 65    | 	byte	"gettime"
32dce     00          | 	byte	0
32dcf                 | LR__5816
32dcf     67 74 2E    | 	byte	"gt."
32dd2     00          | 	byte	0
32dd3                 | LR__5817
32dd3     68 65 78 24 | 	byte	"hex$"
32dd7     00          | 	byte	0
32dd8                 | LR__5818
32dd8     69 6E 6B 65 
32ddc     79 24       | 	byte	"inkey$"
32dde     00          | 	byte	0
32ddf                 | LR__5819
32ddf     69 6E 74    | 	byte	"int"
32de2     00          | 	byte	0
32de3                 | LR__5820
32de3     6C 65 66 74 
32de7     24          | 	byte	"left$"
32de8     00          | 	byte	0
32de9                 | LR__5821
32de9     6C 65 6E    | 	byte	"len"
32dec     00          | 	byte	0
32ded                 | LR__5822
32ded     6C 6F 67    | 	byte	"log"
32df0     00          | 	byte	0
32df1                 | LR__5823
32df1     6C 70 65 65 
32df5     6B          | 	byte	"lpeek"
32df6     00          | 	byte	0
32df7                 | LR__5824
32df7     6D 65 6D 74 
32dfb     6F 70       | 	byte	"memtop"
32dfd     00          | 	byte	0
32dfe                 | LR__5825
32dfe     6D 65 6D 6C 
32e02     6F          | 	byte	"memlo"
32e03     00          | 	byte	0
32e04                 | LR__5826
32e04     6D 69 64 24 | 	byte	"mid$"
32e08     00          | 	byte	0
32e09                 | LR__5827
32e09     6D 6F 75 73 
32e0d     65 6B       | 	byte	"mousek"
32e0f     00          | 	byte	0
32e10                 | LR__5828
32e10     6D 6F 75 73 
32e14     65 77       | 	byte	"mousew"
32e16     00          | 	byte	0
32e17                 | LR__5829
32e17     6D 6F 75 73 
32e1b     65 78       | 	byte	"mousex"
32e1d     00          | 	byte	0
32e1e                 | LR__5830
32e1e     6D 6F 75 73 
32e22     65 79       | 	byte	"mousey"
32e24     00          | 	byte	0
32e25                 | LR__5831
32e25     70 61 64 73 | 	byte	"pads"
32e29     00          | 	byte	0
32e2a                 | LR__5832
32e2a     70 61 64 77 | 	byte	"padw"
32e2e     00          | 	byte	0
32e2f                 | LR__5833
32e2f     70 61 64 78 | 	byte	"padx"
32e33     00          | 	byte	0
32e34                 | LR__5834
32e34     70 61 64 79 | 	byte	"pady"
32e38     00          | 	byte	0
32e39                 | LR__5835
32e39     70 61 64 7A | 	byte	"padz"
32e3d     00          | 	byte	0
32e3e                 | LR__5836
32e3e     70 61 64 72 
32e42     78          | 	byte	"padrx"
32e43     00          | 	byte	0
32e44                 | LR__5837
32e44     70 61 64 72 
32e48     79          | 	byte	"padry"
32e49     00          | 	byte	0
32e4a                 | LR__5838
32e4a     70 61 64 72 
32e4e     7A          | 	byte	"padrz"
32e4f     00          | 	byte	0
32e50                 | LR__5839
32e50     70 61 64 68 | 	byte	"padh"
32e54     00          | 	byte	0
32e55                 | LR__5840
32e55     70 65 65 6B | 	byte	"peek"
32e59     00          | 	byte	0
32e5a                 | LR__5841
32e5a     70 69 6E 72 
32e5e     65 61 64    | 	byte	"pinread"
32e61     00          | 	byte	0
32e62                 | LR__5842
32e62     72 64 70 69 
32e66     6E          | 	byte	"rdpin"
32e67     00          | 	byte	0
32e68                 | LR__5843
32e68     72 69 67 68 
32e6c     74 24       | 	byte	"right$"
32e6e     00          | 	byte	0
32e6f                 | LR__5844
32e6f     72 71 70 69 
32e73     6E          | 	byte	"rqpin"
32e74     00          | 	byte	0
32e75                 | LR__5845
32e75     72 6F 75 6E 
32e79     64          | 	byte	"round"
32e7a     00          | 	byte	0
32e7b                 | LR__5846
32e7b     72 6E 64    | 	byte	"rnd"
32e7e     00          | 	byte	0
32e7f                 | LR__5847
32e7f     73 69 6E    | 	byte	"sin"
32e82     00          | 	byte	0
32e83                 | LR__5848
32e83     73 71 72    | 	byte	"sqr"
32e86     00          | 	byte	0
32e87                 | LR__5849
32e87     73 74 69 63 
32e8b     6B          | 	byte	"stick"
32e8c     00          | 	byte	0
32e8d                 | LR__5850
32e8d     73 74 72 69 
32e91     67          | 	byte	"strig"
32e92     00          | 	byte	0
32e93                 | LR__5851
32e93     73 74 72 24 | 	byte	"str$"
32e97     00          | 	byte	0
32e98                 | LR__5852
32e98     74 61 6E    | 	byte	"tan"
32e9b     00          | 	byte	0
32e9c                 | LR__5853
32e9c     76 61 6C    | 	byte	"val"
32e9f     00          | 	byte	0
32ea0                 | LR__5854
32ea0     76 61 72 70 
32ea4     74 72       | 	byte	"varptr"
32ea6     00          | 	byte	0
32ea7                 | LR__5855
32ea7     61          | 	byte	"a"
32ea8     00          | 	byte	0
32ea9                 | LR__5856
32ea9     7A          | 	byte	"z"
32eaa     00          | 	byte	0
32eab                 | LR__5857
32eab     5F          | 	byte	"_"
32eac     00          | 	byte	0
32ead                 | LR__5858
32ead     61          | 	byte	"a"
32eae     00          | 	byte	0
32eaf                 | LR__5859
32eaf     7A          | 	byte	"z"
32eb0     00          | 	byte	0
32eb1                 | LR__5860
32eb1     30          | 	byte	"0"
32eb2     00          | 	byte	0
32eb3                 | LR__5861
32eb3     39          | 	byte	"9"
32eb4     00          | 	byte	0
32eb5                 | LR__5862
32eb5     5F          | 	byte	"_"
32eb6     00          | 	byte	0
32eb7                 | LR__5863
32eb7     2E          | 	byte	"."
32eb8     00          | 	byte	0
32eb9                 | LR__5864
32eb9     61          | 	byte	"a"
32eba     00          | 	byte	0
32ebb                 | LR__5865
32ebb     7A          | 	byte	"z"
32ebc     00          | 	byte	0
32ebd                 | LR__5866
32ebd     30          | 	byte	"0"
32ebe     00          | 	byte	0
32ebf                 | LR__5867
32ebf     39          | 	byte	"9"
32ec0     00          | 	byte	0
32ec1                 | LR__5868
32ec1     5F          | 	byte	"_"
32ec2     00          | 	byte	0
32ec3                 | LR__5869
32ec3     24          | 	byte	"$"
32ec4     00          | 	byte	0
32ec5                 | LR__5870
32ec5     25          | 	byte	"%"
32ec6     00          | 	byte	0
32ec7                 | LR__5871
32ec7     21          | 	byte	"!"
32ec8     00          | 	byte	0
32ec9                 | LR__5872
32ec9     30          | 	byte	"0"
32eca     00          | 	byte	0
32ecb                 | LR__5873
32ecb     39          | 	byte	"9"
32ecc     00          | 	byte	0
32ecd                 | LR__5874
32ecd     2E          | 	byte	"."
32ece     00          | 	byte	0
32ecf                 | LR__5875
32ecf     24          | 	byte	"$"
32ed0     00          | 	byte	0
32ed1                 | LR__5876
32ed1     25          | 	byte	"%"
32ed2     00          | 	byte	0
32ed3                 | LR__5877
32ed3     2D          | 	byte	"-"
32ed4     00          | 	byte	0
32ed5                 | LR__5878
32ed5     2E          | 	byte	"."
32ed6     00          | 	byte	0
32ed7                 | LR__5879
32ed7     24          | 	byte	"$"
32ed8     00          | 	byte	0
32ed9                 | LR__5880
32ed9     25          | 	byte	"%"
32eda     00          | 	byte	0
32edb                 | LR__5881
32edb     30          | 	byte	"0"
32edc     00          | 	byte	0
32edd                 | LR__5882
32edd     39          | 	byte	"9"
32ede     00          | 	byte	0
32edf                 | LR__5883
32edf     5F          | 	byte	"_"
32ee0     00          | 	byte	0
32ee1                 | LR__5884
32ee1     2E          | 	byte	"."
32ee2     00          | 	byte	0
32ee3                 | LR__5885
32ee3     45          | 	byte	"E"
32ee4     00          | 	byte	0
32ee5                 | LR__5886
32ee5     65          | 	byte	"e"
32ee6     00          | 	byte	0
32ee7                 | LR__5887
32ee7     2D          | 	byte	"-"
32ee8     00          | 	byte	0
32ee9                 | LR__5888
32ee9     61          | 	byte	"a"
32eea     00          | 	byte	0
32eeb                 | LR__5889
32eeb     66          | 	byte	"f"
32eec     00          | 	byte	0
32eed                 | LR__5890
32eed     30          | 	byte	"0"
32eee     00          | 	byte	0
32eef                 | LR__5891
32eef     31          | 	byte	"1"
32ef0     00          | 	byte	0
32ef1                 | LR__5892
32ef1     5F          | 	byte	"_"
32ef2     00          | 	byte	0
32ef3                 | LR__5893
32ef3     2D          | 	byte	"-"
32ef4     00          | 	byte	0
32ef5                 | LR__5894
32ef5     65          | 	byte	"e"
32ef6     00          | 	byte	0
32ef7                 | LR__5895
32ef7     2E          | 	byte	"."
32ef8     00          | 	byte	0
32ef9                 | LR__5896
32ef9     45          | 	byte	"E"
32efa     00          | 	byte	0
32efb                 | LR__5897
32efb     65          | 	byte	"e"
32efc     00          | 	byte	0
32efd                 | LR__5898
32efd     30          | 	byte	"0"
32efe     00          | 	byte	0
32eff                 | LR__5899
32eff     39          | 	byte	"9"
32f00     00          | 	byte	0
32f01                 | LR__5900
32f01     24          | 	byte	"$"
32f02     00          | 	byte	0
32f03                 | LR__5901
32f03     25          | 	byte	"%"
32f04     00          | 	byte	0
32f05                 | LR__5902
32f05     2D          | 	byte	"-"
32f06     00          | 	byte	0
32f07                 | LR__5903
32f07     24          | 	byte	"$"
32f08     00          | 	byte	0
32f09                 | LR__5904
32f09     25          | 	byte	"%"
32f0a     00          | 	byte	0
32f0b                 | LR__5905
32f0b     30          | 	byte	"0"
32f0c     00          | 	byte	0
32f0d                 | LR__5906
32f0d     39          | 	byte	"9"
32f0e     00          | 	byte	0
32f0f                 | LR__5907
32f0f     5F          | 	byte	"_"
32f10     00          | 	byte	0
32f11                 | LR__5908
32f11     30          | 	byte	"0"
32f12     00          | 	byte	0
32f13                 | LR__5909
32f13     39          | 	byte	"9"
32f14     00          | 	byte	0
32f15                 | LR__5910
32f15     61          | 	byte	"a"
32f16     00          | 	byte	0
32f17                 | LR__5911
32f17     66          | 	byte	"f"
32f18     00          | 	byte	0
32f19                 | LR__5912
32f19     5F          | 	byte	"_"
32f1a     00          | 	byte	0
32f1b                 | LR__5913
32f1b     30          | 	byte	"0"
32f1c     00          | 	byte	0
32f1d                 | LR__5914
32f1d     31          | 	byte	"1"
32f1e     00          | 	byte	0
32f1f                 | LR__5915
32f1f     5F          | 	byte	"_"
32f20     00          | 	byte	0
32f21                 | LR__5916
32f21     30          | 	byte	"0"
32f22     00          | 	byte	0
32f23                 | LR__5917
32f23     39          | 	byte	"9"
32f24     00          | 	byte	0
32f25                 | LR__5918
32f25     5F          | 	byte	"_"
32f26     00          | 	byte	0
32f27                 | LR__5919
32f27     22          | 	byte	34
32f28     00          | 	byte	0
32f29                 | LR__5920
32f29     22          | 	byte	34
32f2a     00          | 	byte	0
32f2b                 | LR__5921
32f2b     44 69 6D 3A 
32f2f     20 61 74 20 
32f33     6C 69 6E 65 
32f37     20          | 	byte	"Dim: at line "
32f38     00          | 	byte	0
32f39                 | LR__5922
32f39     3A 20 77 61 
32f3d     72 6E 69 6E 
32f41     67 3A 20 74 
32f45     68 65 20 76 
32f49     61 72 69 61 
32f4d     62 6C 65 20 
32f51     65 78 69 73 
32f55     74 65 64 2E | 	byte	": warning: the variable existed."
32f59     00          | 	byte	0
32f5a                 | LR__5923
32f5a     28          | 	byte	"("
32f5b     00          | 	byte	0
32f5c                 | LR__5924
32f5c     61 73       | 	byte	"as"
32f5e     00          | 	byte	0
32f5f                 | LR__5925
32f5f     61 73       | 	byte	"as"
32f61     00          | 	byte	0
32f62                 | LR__5926
32f62     2C          | 	byte	","
32f63     00          | 	byte	0
32f64                 | LR__5927
32f64     29          | 	byte	")"
32f65     00          | 	byte	0
32f66                 | LR__5928
32f66     29          | 	byte	")"
32f67     00          | 	byte	0
32f68                 | LR__5929
32f68     61 73       | 	byte	"as"
32f6a     00          | 	byte	0
32f6b                 | LR__5930
32f6b     62 79 74 65 | 	byte	"byte"
32f6f     00          | 	byte	0
32f70                 | LR__5931
32f70     75 62 79 74 
32f74     65          | 	byte	"ubyte"
32f75     00          | 	byte	0
32f76                 | LR__5932
32f76     73 68 6F 72 
32f7a     74          | 	byte	"short"
32f7b     00          | 	byte	0
32f7c                 | LR__5933
32f7c     75 73 68 6F 
32f80     72 74       | 	byte	"ushort"
32f82     00          | 	byte	0
32f83                 | LR__5934
32f83     6C 6F 6E 67 | 	byte	"long"
32f87     00          | 	byte	0
32f88                 | LR__5935
32f88     69 6E 74 65 
32f8c     67 65 72    | 	byte	"integer"
32f8f     00          | 	byte	0
32f90                 | LR__5936
32f90     75 6C 6F 6E 
32f94     67          | 	byte	"ulong"
32f95     00          | 	byte	0
32f96                 | LR__5937
32f96     69 6E 74 36 
32f9a     34          | 	byte	"int64"
32f9b     00          | 	byte	0
32f9c                 | LR__5938
32f9c     75 69 6E 74 
32fa0     36 34       | 	byte	"uint64"
32fa2     00          | 	byte	0
32fa3                 | LR__5939
32fa3     73 69 6E 67 
32fa7     6C 65       | 	byte	"single"
32fa9     00          | 	byte	0
32faa                 | LR__5940
32faa     64 6F 75 62 
32fae     6C 65       | 	byte	"double"
32fb0     00          | 	byte	0
32fb1                 | LR__5941
32fb1     73 74 72 69 
32fb5     6E 67       | 	byte	"string"
32fb7     00          | 	byte	0
32fb8                 | LR__5942
32fb8     74 6F       | 	byte	"to"
32fba     00          | 	byte	0
32fbb                 | LR__5943
32fbb     73 74 65 70 | 	byte	"step"
32fbf     00          | 	byte	0
32fc0                 | LR__5944
32fc0     73 2E       | 	byte	"s."
32fc2     00          | 	byte	0
32fc3                 | LR__5945
32fc3     73 2E       | 	byte	"s."
32fc5     00          | 	byte	0
32fc6                 | LR__5946
32fc6     67 6F 74 6F | 	byte	"goto"
32fca     00          | 	byte	0
32fcb                 | LR__5947
32fcb     67 6F 73 75 
32fcf     62          | 	byte	"gosub"
32fd0     00          | 	byte	0
32fd1                 | LR__5948
32fd1     24          | 	byte	"$"
32fd2     00          | 	byte	0
32fd3                 | LR__5949
32fd3     26 68       | 	byte	"&h"
32fd5     00          | 	byte	0
32fd6                 | LR__5950
32fd6     25          | 	byte	"%"
32fd7     00          | 	byte	0
32fd8                 | LR__5951
32fd8     26 62       | 	byte	"&b"
32fda     00          | 	byte	0
32fdb                 | LR__5952
32fdb                 | 	byte	
32fdb     00          | 	byte	0
32fdc                 | LR__5953
32fdc     61 63 6F 73 
32fe0     3A 20       | 	byte	"acos: "
32fe2     00          | 	byte	0
32fe3                 | LR__5954
32fe3     61 73 63 3A 
32fe7     20          | 	byte	"asc: "
32fe8     00          | 	byte	0
32fe9                 | LR__5955
32fe9     61 73 63 3A 
32fed     20          | 	byte	"asc: "
32fee     00          | 	byte	0
32fef                 | LR__5956
32fef     61 73 69 6E 
32ff3     3A 20       | 	byte	"asin: "
32ff5     00          | 	byte	0
32ff6                 | LR__5957
32ff6     61 74 6E 3A 
32ffa     20          | 	byte	"atn: "
32ffb     00          | 	byte	0
32ffc                 | LR__5958
32ffc     62 6C 69 74 
33000     3A 20       | 	byte	"blit: "
33002     00          | 	byte	0
33003                 | LR__5959
33003     62 69 6E 24 
33007     3A 20       | 	byte	"bin$: "
33009     00          | 	byte	0
3300a                 | LR__5960
3300a     2F          | 	byte	"/"
3300b     00          | 	byte	0
3300c                 | LR__5961
3300c     2F 73 64 2F 
33010     62 69 6E 2F | 	byte	"/sd/bin/"
33014     00          | 	byte	0
33015                 | LR__5962
33015     53 79 73 74 
33019     65 6D 20 65 
3301d     72 72 6F 72 
33021     20          | 	byte	"System error "
33022     00          | 	byte	0
33023                 | LR__5963
33023     3A 20       | 	byte	": "
33025     00          | 	byte	0
33026                 | LR__5964
33026     2A          | 	byte	"*"
33027     00          | 	byte	0
33028                 | LR__5965
33028     2E 2E       | 	byte	".."
3302a     00          | 	byte	0
3302b                 | LR__5966
3302b     2F          | 	byte	"/"
3302c     00          | 	byte	0
3302d                 | LR__5967
3302d     2F          | 	byte	"/"
3302e     00          | 	byte	0
3302f                 | LR__5968
3302f     53 79 73 74 
33033     65 6D 20 65 
33037     72 72 6F 72 
3303b     20          | 	byte	"System error "
3303c     00          | 	byte	0
3303d                 | LR__5969
3303d     3A 20       | 	byte	": "
3303f     00          | 	byte	0
33040                 | LR__5970
33040     43 75 72 72 
33044     65 6E 74 20 
33048     64 69 72 65 
3304c     63 74 6F 72 
33050     79 3A 20    | 	byte	"Current directory: "
33053     00          | 	byte	0
33054                 | LR__5971
33054     2F          | 	byte	"/"
33055     00          | 	byte	0
33056                 | LR__5972
33056     53 79 73 74 
3305a     65 6D 20 65 
3305e     72 72 6F 72 
33062     20          | 	byte	"System error "
33063     00          | 	byte	0
33064                 | LR__5973
33064     3A 20       | 	byte	": "
33066     00          | 	byte	0
33067                 | LR__5974
33067     43 75 72 72 
3306b     65 6E 74 20 
3306f     64 69 72 65 
33073     63 74 6F 72 
33077     79 3A 20    | 	byte	"Current directory: "
3307a     00          | 	byte	0
3307b                 | LR__5975
3307b     2F          | 	byte	"/"
3307c     00          | 	byte	0
3307d                 | LR__5976
3307d     2F          | 	byte	"/"
3307e     00          | 	byte	0
3307f                 | LR__5977
3307f     2F          | 	byte	"/"
33080     00          | 	byte	0
33081                 | LR__5978
33081     53 79 73 74 
33085     65 6D 20 65 
33089     72 72 6F 72 
3308d     20          | 	byte	"System error "
3308e     00          | 	byte	0
3308f                 | LR__5979
3308f     3A 20       | 	byte	": "
33091     00          | 	byte	0
33092                 | LR__5980
33092     43 75 72 72 
33096     65 6E 74 20 
3309a     64 69 72 65 
3309e     63 74 6F 72 
330a2     79 3A 20    | 	byte	"Current directory: "
330a5     00          | 	byte	0
330a6                 | LR__5981
330a6     63 68 72 24 
330aa     3A 20       | 	byte	"chr$: "
330ac     00          | 	byte	0
330ad                 | LR__5982
330ad     63 68 61 6E 
330b1     6E 65 6C 23 
330b5     20 65 78 70 
330b9     65 63 74 65 
330bd     64          | 	byte	"channel# expected"
330be     00          | 	byte	0
330bf                 | LR__5983
330bf     63 6F 67 69 
330c3     6E 69 74 3A 
330c7     20          | 	byte	"coginit: "
330c8     00          | 	byte	0
330c9                 | LR__5984
330c9     53 79 73 74 
330cd     65 6D 20 65 
330d1     72 72 6F 72 
330d5     20 2D 20    | 	byte	"System error - "
330d8     00          | 	byte	0
330d9                 | LR__5985
330d9     20 69 6E 20 
330dd     6C 69 6E 65 
330e1     20          | 	byte	" in line "
330e2     00          | 	byte	0
330e3                 | LR__5986
330e3     3A 20       | 	byte	": "
330e5     00          | 	byte	0
330e6                 | LR__5987
330e6     2C 20 66 69 
330ea     6C 65 20 6E 
330ee     61 6D 65 3A 
330f2     20          | 	byte	", file name: "
330f3     00          | 	byte	0
330f4                 | LR__5988
330f4     53 79 73 74 
330f8     65 6D 20 65 
330fc     72 72 6F 72 
33100     20 2D 20    | 	byte	"System error - "
33103     00          | 	byte	0
33104                 | LR__5989
33104     20 69 6E 20 
33108     6C 69 6E 65 
3310c     20          | 	byte	" in line "
3310d     00          | 	byte	0
3310e                 | LR__5990
3310e     3A 20       | 	byte	": "
33110     00          | 	byte	0
33111                 | LR__5991
33111     2C 20 66 69 
33115     6C 65 20 6E 
33119     61 6D 65 3A 
3311d     20          | 	byte	", file name: "
3311e     00          | 	byte	0
3311f                 | LR__5992
3311f     63 6F 73 3A 
33123     20          | 	byte	"cos: "
33124     00          | 	byte	0
33125                 | LR__5993
33125                 | 	byte	
33125     00          | 	byte	0
33126                 | LR__5994
33126                 | 	byte	
33126     00          | 	byte	0
33127                 | LR__5995
33127     2F 73 64 2F 
3312b     6D 65 64 69 
3312f     61 2F 68 2F | 	byte	"/sd/media/h/"
33133     00          | 	byte	0
33134                 | LR__5996
33134     53 79 73 74 
33138     65 6D 20 65 
3313c     72 72 6F 72 
33140     20          | 	byte	"System error "
33141     00          | 	byte	0
33142                 | LR__5997
33142     3A 20       | 	byte	": "
33144     00          | 	byte	0
33145                 | LR__5998
33145                 | 	byte	
33145     00          | 	byte	0
33146                 | LR__5999
33146                 | 	byte	
33146     00          | 	byte	0
33147                 | LR__6000
33147     2F 73 64 2F 
3314b     6D 65 64 69 
3314f     61 2F 73 2F | 	byte	"/sd/media/s/"
33153     00          | 	byte	0
33154                 | LR__6001
33154     53 79 73 74 
33158     65 6D 20 65 
3315c     72 72 6F 72 
33160     20          | 	byte	"System error "
33161     00          | 	byte	0
33162                 | LR__6002
33162     3A 20       | 	byte	": "
33164     00          | 	byte	0
33165                 | LR__6003
33165     2F          | 	byte	"/"
33166     00          | 	byte	0
33167                 | LR__6004
33167     2F          | 	byte	"/"
33168     00          | 	byte	0
33169                 | LR__6005
33169     2F          | 	byte	"/"
3316a     00          | 	byte	0
3316b                 | LR__6006
3316b     43 61 6E 6E 
3316f     6F 74 20 64 
33173     65 6C 65 74 
33177     65 20 66 69 
3317b     6C 65 20 6F 
3317f     72 20 66 69 
33183     6C 65 20 64 
33187     6F 65 73 6E 
3318b     27 74 20 65 
3318f     78 69 73 74 
33193     3A 20 73 79 
33197     73 74 65 6D 
3319b     20 65 72 72 
3319f     6F 72 20    | 	byte	"Cannot delete file or file doesn't exist: system error "
331a2     00          | 	byte	0
331a3                 | LR__6007
331a3     43 75 72 72 
331a7     65 6E 74 20 
331ab     64 69 72 65 
331af     63 74 6F 72 
331b3     79 3A 20    | 	byte	"Current directory: "
331b6     00          | 	byte	0
331b7                 | LR__6008
331b7                 | 	byte	
331b7     00          | 	byte	0
331b8                 | LR__6009
331b8     2A          | 	byte	"*"
331b9     00          | 	byte	0
331ba                 | LR__6010
331ba                 | 	byte	
331ba     00          | 	byte	0
331bb                 | LR__6011
331bb     5B 64 69 72 
331bf     5D 20       | 	byte	"[dir] "
331c1     00          | 	byte	0
331c2                 | LR__6012
331c2     4D 6F 72 65 
331c6     20 74 68 61 
331ca     6E 20 31 32 
331ce     38 20 65 6E 
331d2     74 72 69 65 
331d6     73 20 66 6F 
331da     75 6E 64 3A 
331de     20 63 6C 65 
331e2     61 6E 20 79 
331e6     6F 75 72 20 
331ea     64 69 72 65 
331ee     63 74 6F 72 
331f2     79          | 	byte	"More than 128 entries found: clean your directory"
331f3     00          | 	byte	0
331f4                 | LR__6013
331f4     2A          | 	byte	"*"
331f5     00          | 	byte	0
331f6                 | LR__6014
331f6                 | 	byte	
331f6     00          | 	byte	0
331f7                 | LR__6015
331f7     4D 6F 72 65 
331fb     20 74 68 61 
331ff     6E 20 31 32 
33203     38 20 65 6E 
33207     74 72 69 65 
3320b     73 20 66 6F 
3320f     75 6E 64 3A 
33213     20 63 6C 65 
33217     61 6E 20 79 
3321b     6F 75 72 20 
3321f     64 69 72 65 
33223     63 74 6F 72 
33227     79          | 	byte	"More than 128 entries found: clean your directory"
33228     00          | 	byte	0
33229                 | LR__6016
33229     45 72 72 6F 
3322d     72 20       | 	byte	"Error "
3322f     00          | 	byte	0
33230                 | LR__6017
33230     3A 20       | 	byte	": "
33232     00          | 	byte	0
33233                 | LR__6018
33233     66 69 6E 64 
33237     66 69 72 73 
3323b     74 3A 20    | 	byte	"findfirst: "
3323e     00          | 	byte	0
3323f                 | LR__6019
3323f     66 69 6E 64 
33243     66 69 72 73 
33247     74 3A 20    | 	byte	"findfirst: "
3324a     00          | 	byte	0
3324b                 | LR__6020
3324b     66 69 6E 64 
3324f     66 69 72 73 
33253     74 3A 20    | 	byte	"findfirst: "
33256     00          | 	byte	0
33257                 | LR__6021
33257                 | 	byte	
33257     00          | 	byte	0
33258                 | LR__6022
33258     66 69 6E 64 
3325c     66 69 72 73 
33260     74 3A 20    | 	byte	"findfirst: "
33263     00          | 	byte	0
33264                 | LR__6023
33264                 | 	byte	
33264     00          | 	byte	0
33265                 | LR__6024
33265     64 69 72    | 	byte	"dir"
33268     00          | 	byte	0
33269                 | LR__6025
33269     66 69 6E 64 
3326d     6E 65 78 74 
33271     3A 20       | 	byte	"findnext: "
33273     00          | 	byte	0
33274                 | LR__6026
33274     67 65 74 63 
33278     6F 6C 6F 72 
3327c     20          | 	byte	"getcolor "
3327d     00          | 	byte	0
3327e                 | LR__6027
3327e     67 65 74 65 
33282     6E 76 73 75 
33286     73 74 61 69 
3328a     6E 3A 20    | 	byte	"getenvsustain: "
3328d     00          | 	byte	0
3328e                 | LR__6028
3328e     67 65 74 70 
33292     69 78 65 6C 
33296     3A 20       | 	byte	"getpixel: "
33298     00          | 	byte	0
33299                 | LR__6029
33299     67 65 74 72 
3329d     65 61 6C 66 
332a1     72 65 71 3A 
332a5     20          | 	byte	"getrealfreq: "
332a6     00          | 	byte	0
332a7                 | LR__6030
332a7     68 65 78 24 
332ab     3A 20       | 	byte	"hex$: "
332ad     00          | 	byte	0
332ae                 | LR__6031
332ae                 | 	byte	
332ae     00          | 	byte	0
332af                 | LR__6032
332af     49 6E 20 69 
332b3     6E 70 75 74 
332b7     3A 20       | 	byte	"In input: "
332b9     00          | 	byte	0
332ba                 | LR__6033
332ba     2C          | 	byte	","
332bb     00          | 	byte	0
332bc                 | LR__6034
332bc                 | 	byte	
332bc     00          | 	byte	0
332bd                 | LR__6035
332bd                 | 	byte	
332bd     00          | 	byte	0
332be                 | LR__6036
332be     6C 65 66 74 
332c2     24 3A 20    | 	byte	"left$: "
332c5     00          | 	byte	0
332c6                 | LR__6037
332c6     6C 65 66 74 
332ca     24 3A 20    | 	byte	"left$: "
332cd     00          | 	byte	0
332ce                 | LR__6038
332ce     6C 65 6E 3A 
332d2     20          | 	byte	"len: "
332d3     00          | 	byte	0
332d4                 | LR__6039
332d4     6C 65 6E 3A 
332d8     20          | 	byte	"len: "
332d9     00          | 	byte	0
332da                 | LR__6040
332da                 | 	byte	
332da     00          | 	byte	0
332db                 | LR__6041
332db     2F          | 	byte	"/"
332dc     00          | 	byte	0
332dd                 | LR__6042
332dd     2F          | 	byte	"/"
332de     00          | 	byte	0
332df                 | LR__6043
332df     2E 62 61 73 | 	byte	".bas"
332e3     00          | 	byte	0
332e4                 | LR__6044
332e4     53 79 73 74 
332e8     65 6D 20 65 
332ec     72 72 6F 72 
332f0     20          | 	byte	"System error "
332f1     00          | 	byte	0
332f2                 | LR__6045
332f2     3A 20       | 	byte	": "
332f4     00          | 	byte	0
332f5                 | LR__6046
332f5     2E 62 61 73 | 	byte	".bas"
332f9     00          | 	byte	0
332fa                 | LR__6047
332fa     2F          | 	byte	"/"
332fb     00          | 	byte	0
332fc                 | LR__6048
332fc                 | 	byte	
332fc     00          | 	byte	0
332fd                 | LR__6049
332fd     4C 6F 61 64 
33301     65 64 20    | 	byte	"Loaded "
33304     00          | 	byte	0
33305                 | LR__6050
33305     2F          | 	byte	"/"
33306     00          | 	byte	0
33307                 | LR__6051
33307     6C 6F 67 3A 
3330b     20          | 	byte	"log: "
3330c     00          | 	byte	0
3330d                 | LR__6052
3330d     6D 69 64 24 
33311     3A 20       | 	byte	"mid$: "
33313     00          | 	byte	0
33314                 | LR__6053
33314     6D 69 64 24 
33318     3A 20       | 	byte	"mid$: "
3331a     00          | 	byte	0
3331b                 | LR__6054
3331b     43 61 6E 6E 
3331f     6F 74 20 63 
33323     72 65 61 74 
33327     65 20 61 20 
3332b     64 69 72 65 
3332f     63 74 6F 72 
33333     79 3A 20 73 
33337     79 73 74 65 
3333b     6D 20 65 72 
3333f     72 6F 72 20 | 	byte	"Cannot create a directory: system error "
33343     00          | 	byte	0
33344                 | LR__6055
33344     20 42 41 53 
33348     49 43 20 62 
3334c     79 74 65 73 
33350     20 66 72 65 
33354     65          | 	byte	" BASIC bytes free"
33355     00          | 	byte	0
33356                 | LR__6056
33356                 | 	byte	
33356     00          | 	byte	0
33357                 | LR__6057
33357                 | 	byte	
33357     00          | 	byte	0
33358                 | LR__6058
33358                 | 	byte	
33358     00          | 	byte	0
33359                 | LR__6059
33359     6E 6F 6E 61 
3335d     6D 65 2E 62 
33361     61 73       | 	byte	"noname.bas"
33363     00          | 	byte	0
33364                 | LR__6060
33364     66 69 6C 65 
33368     6E 61 6D 65 
3336c     20 65 78 70 
33370     65 63 74 65 
33374     64          | 	byte	"filename expected"
33375     00          | 	byte	0
33376                 | LR__6061
33376     72 65 61 64 | 	byte	"read"
3337a     00          | 	byte	0
3337b                 | LR__6062
3337b     77 72 69 74 
3337f     65          | 	byte	"write"
33380     00          | 	byte	0
33381                 | LR__6063
33381     61 70 70 65 
33385     6E 64       | 	byte	"append"
33387     00          | 	byte	0
33388                 | LR__6064
33388     63 68 61 6E 
3338c     6E 65 6C 23 
33390     20 65 78 70 
33394     65 63 74 65 
33398     64          | 	byte	"channel# expected"
33399     00          | 	byte	0
3339a                 | LR__6065
3339a     4F 70 65 6E 
3339e     3A 20 69 6E 
333a2     76 61 6C 69 
333a6     64 20 6D 6F 
333aa     64 65       | 	byte	"Open: invalid mode"
333ac     00          | 	byte	0
333ad                 | LR__6066
333ad     70 61 64 72 
333b1     78 3A 20    | 	byte	"padrx: "
333b4     00          | 	byte	0
333b5                 | LR__6067
333b5     70 61 64 72 
333b9     79 3A 20    | 	byte	"padry: "
333bc     00          | 	byte	0
333bd                 | LR__6068
333bd     70 61 64 72 
333c1     7A 3A 20    | 	byte	"padrz: "
333c4     00          | 	byte	0
333c5                 | LR__6069
333c5     70 61 64 73 
333c9     3A 20       | 	byte	"pads: "
333cb     00          | 	byte	0
333cc                 | LR__6070
333cc     70 61 64 77 
333d0     3A 20       | 	byte	"padw: "
333d2     00          | 	byte	0
333d3                 | LR__6071
333d3     70 61 64 78 
333d7     3A 20       | 	byte	"padx: "
333d9     00          | 	byte	0
333da                 | LR__6072
333da     70 61 64 79 
333de     3A 20       | 	byte	"pady: "
333e0     00          | 	byte	0
333e1                 | LR__6073
333e1     70 61 64 7A 
333e5     3A 20       | 	byte	"padz: "
333e7     00          | 	byte	0
333e8                 | LR__6074
333e8     50 72 69 6E 
333ec     74 20 74 6F 
333f0     20 63 68 61 
333f4     6E 6E 65 6C 
333f8     20 28 6E 6F 
333fc     74 20 79 65 
33400     74 20 69 6D 
33404     70 6C 65 6D 
33408     65 6E 74 65 
3340c     64 29       | 	byte	"Print to channel (not yet implemented)"
3340e     00          | 	byte	0
3340f                 | LR__6075
3340f                 | 	byte	
3340f     00          | 	byte	0
33410                 | LR__6076
33410     64 61 74 61 | 	byte	"data"
33414     00          | 	byte	0
33415                 | LR__6077
33415                 | 	byte	
33415     00          | 	byte	0
33416                 | LR__6078
33416     49 6E 20 72 
3341a     65 61 64 3A 
3341e     20          | 	byte	"In read: "
3341f     00          | 	byte	0
33420                 | LR__6079
33420                 | 	byte	
33420     00          | 	byte	0
33421                 | LR__6080
33421                 | 	byte	
33421     00          | 	byte	0
33422                 | LR__6081
33422     27          | 	byte	"'"
33423     00          | 	byte	0
33424                 | LR__6082
33424     2C          | 	byte	","
33425     00          | 	byte	0
33426                 | LR__6083
33426                 | 	byte	
33426     00          | 	byte	0
33427                 | LR__6084
33427                 | 	byte	
33427     00          | 	byte	0
33428                 | LR__6085
33428                 | 	byte	
33428     00          | 	byte	0
33429                 | LR__6086
33429                 | 	byte	
33429     00          | 	byte	0
3342a                 | LR__6087
3342a                 | 	byte	
3342a     00          | 	byte	0
3342b                 | LR__6088
3342b     72 69 67 68 
3342f     74 24 3A 20 | 	byte	"right$: "
33433     00          | 	byte	0
33434                 | LR__6089
33434     72 69 67 68 
33438     74 24 3A 20 | 	byte	"right$: "
3343c     00          | 	byte	0
3343d                 | LR__6090
3343d     72 6E 64 3A 
33441     20          | 	byte	"rnd: "
33442     00          | 	byte	0
33443                 | LR__6091
33443     72 6E 64 3A 
33447     20          | 	byte	"rnd: "
33448     00          | 	byte	0
33449                 | LR__6092
33449                 | 	byte	
33449     00          | 	byte	0
3344a                 | LR__6093
3344a     53 74 6F 70 
3344e     70 65 64 20 
33452     61 74 20 6C 
33456     69 6E 65 20 | 	byte	"Stopped at line "
3345a     00          | 	byte	0
3345b                 | LR__6094
3345b                 | 	byte	
3345b     00          | 	byte	0
3345c                 | LR__6095
3345c     2F          | 	byte	"/"
3345d     00          | 	byte	0
3345e                 | LR__6096
3345e                 | 	byte	
3345e     00          | 	byte	0
3345f                 | LR__6097
3345f     53 61 76 65 
33463     64 20 61 73 
33467     20          | 	byte	"Saved as "
33468     00          | 	byte	0
33469                 | LR__6098
33469     2F          | 	byte	"/"
3346a     00          | 	byte	0
3346b                 | LR__6099
3346b     73 65 74 63 
3346f     6F 6C 6F 72 
33473     3A 20       | 	byte	"setcolor: "
33475     00          | 	byte	0
33476                 | LR__6100
33476     73 69 6E 3A 
3347a     20          | 	byte	"sin: "
3347b     00          | 	byte	0
3347c                 | LR__6101
3347c     73 71 72 3A 
33480     20          | 	byte	"sqr: "
33481     00          | 	byte	0
33482                 | LR__6102
33482     73 74 69 63 
33486     6B 3A 20    | 	byte	"stick: "
33489     00          | 	byte	0
3348a                 | LR__6103
3348a     73 74 72 24 
3348e     3A 20       | 	byte	"str$: "
33490     00          | 	byte	0
33491                 | LR__6104
33491     73 74 72 69 
33495     67 3A 20    | 	byte	"strig: "
33498     00          | 	byte	0
33499                 | LR__6105
33499     74 61 6E 3A 
3349d     20          | 	byte	"tan: "
3349e     00          | 	byte	0
3349f                 | LR__6106
3349f     76 61 6C 3A 
334a3     20          | 	byte	"val: "
334a4     00          | 	byte	0
334a5                 | LR__6107
334a5     76 61 6C 3A 
334a9     20          | 	byte	"val: "
334aa     00          | 	byte	0
334ab                 | LR__6108
334ab     24          | 	byte	"$"
334ac     00          | 	byte	0
334ad                 | LR__6109
334ad     26 68       | 	byte	"&h"
334af     00          | 	byte	0
334b0                 | LR__6110
334b0     25          | 	byte	"%"
334b1     00          | 	byte	0
334b2                 | LR__6111
334b2     26 62       | 	byte	"&b"
334b4     00          | 	byte	0
334b5                 | LR__6112
334b5                 | 	byte	
334b5     00          | 	byte	0
334b6                 | LR__6113
334b6     45 78 70 65 
334ba     63 74 65 64 
334be     20 6E 75 6D 
334c2     62 65 72 2C 
334c6     20 67 6F 74 
334ca     20 73 6F 6D 
334ce     65 74 68 69 
334d2     6E 67 20 65 
334d6     6C 73 65    | 	byte	"Expected number, got something else"
334d9     00          | 	byte	0
334da                 | LR__6114
334da     43 61 6E 6E 
334de     6F 74 20 61 
334e2     64 64 20 61 
334e6     20 6E 75 6D 
334ea     62 65 72 20 
334ee     74 6F 20 61 
334f2     20 73 74 72 
334f6     69 6E 67    | 	byte	"Cannot add a number to a string"
334f9     00          | 	byte	0
334fa                 | LR__6115
334fa     43 61 6E 6E 
334fe     6F 74 20 73 
33502     75 62 73 74 
33506     72 61 63 74 
3350a     20 73 74 72 
3350e     69 6E 67 73 | 	byte	"Cannot substract strings"
33512     00          | 	byte	0
33513                 | LR__6116
33513     55 6E 6B 6E 
33517     6F 77 6E 20 
3351b     65 72 72 6F 
3351f     72 20 77 68 
33523     69 6C 65 20 
33527     61 64 64 69 
3352b     6E 67       | 	byte	"Unknown error while adding"
3352d     00          | 	byte	0
3352e                 | LR__6117
3352e     55 6E 6B 6E 
33532     6F 77 6E 20 
33536     65 72 72 6F 
3353a     72 20 77 68 
3353e     69 6C 65 20 
33542     73 75 62 73 
33546     74 72 61 63 
3354a     74 69 6E 67 | 	byte	"Unknown error while substracting"
3354e     00          | 	byte	0
3354f                 | LR__6118
3354f     43 61 6E 6E 
33553     6F 74 20 64 
33557     6F 20 6C 6F 
3355b     67 69 63 20 
3355f     6F 70 65 72 
33563     61 74 69 6F 
33567     6E 20 6F 6E 
3356b     20 73 74 72 
3356f     69 6E 67 20 
33573     6F 72 20 66 
33577     6C 6F 61 74 | 	byte	"Cannot do logic operation on string or float"
3357b     00          | 	byte	0
3357c                 | LR__6119
3357c     55 6E 6B 6E 
33580     6F 77 6E 20 
33584     65 72 72 6F 
33588     72 20 77 68 
3358c     69 6C 65 20 
33590     64 6F 69 6E 
33594     67 20 6C 6F 
33598     67 69 63 20 
3359c     6F 70 65 72 
335a0     61 74 69 6F 
335a4     6E          | 	byte	"Unknown error while doing logic operation"
335a5     00          | 	byte	0
335a6                 | LR__6120
335a6     43 61 6E 6E 
335aa     6F 74 20 6D 
335ae     75 6C 74 69 
335b2     70 6C 79 20 
335b6     73 74 72 69 
335ba     6E 67 73    | 	byte	"Cannot multiply strings"
335bd     00          | 	byte	0
335be                 | LR__6121
335be     55 6E 6B 6E 
335c2     6F 77 6E 20 
335c6     65 72 72 6F 
335ca     72 20 77 68 
335ce     69 6C 65 20 
335d2     6D 75 6C 74 
335d6     69 70 6C 79 
335da     69 6E 67    | 	byte	"Unknown error while multiplying"
335dd     00          | 	byte	0
335de                 | LR__6122
335de     43 61 6E 6E 
335e2     6F 74 20 64 
335e6     69 76 69 64 
335ea     65 20 73 74 
335ee     72 69 6E 67 
335f2     73          | 	byte	"Cannot divide strings"
335f3     00          | 	byte	0
335f4                 | LR__6123
335f4     55 6E 6B 6E 
335f8     6F 77 6E 20 
335fc     65 72 72 6F 
33600     72 20 77 68 
33604     69 6C 65 20 
33608     64 69 76 69 
3360c     64 69 6E 67 | 	byte	"Unknown error while dividing"
33610     00          | 	byte	0
33611                 | LR__6124
33611     43 61 6E 6E 
33615     6F 74 20 63 
33619     6F 6D 70 75 
3361d     74 65 20 61 
33621     20 70 6F 77 
33625     65 72 20 6F 
33629     66 20 61 20 
3362d     73 74 72 69 
33631     6E 67       | 	byte	"Cannot compute a power of a string"
33633     00          | 	byte	0
33634                 | LR__6125
33634     55 6E 6B 6E 
33638     6F 77 6E 20 
3363c     65 72 72 6F 
33640     72 20 77 68 
33644     69 6C 65 20 
33648     63 6F 6D 70 
3364c     75 74 69 6E 
33650     67 20 61 20 
33654     70 6F 77 65 
33658     72          | 	byte	"Unknown error while computing a power"
33659     00          | 	byte	0
3365a                 | LR__6126
3365a     52 69 67 68 
3365e     74 20 70 61 
33662     72 65 6E 74 
33666     68 65 73 69 
3366a     73 20 65 78 
3366e     70 65 63 74 
33672     65 64       | 	byte	"Right parenthesis expected"
33674     00          | 	byte	0
33675                 | LR__6127
33675     45 78 70 65 
33679     63 74 65 64 
3367d     20 73 74 72 
33681     69 6E 67    | 	byte	"Expected string"
33684     00          | 	byte	0
33685                 | LR__6128
33685     45 78 70 65 
33689     63 74 65 64 
3368d     20 66 6C 6F 
33691     61 74       | 	byte	"Expected float"
33693     00          | 	byte	0
33694                 | LR__6129
33694     45 78 70 65 
33698     63 74 65 64 
3369c     20 75 6E 73 
336a0     69 67 6E 65 
336a4     64 20 69 6E 
336a8     74 65 67 65 
336ac     72          | 	byte	"Expected unsigned integer"
336ad     00          | 	byte	0
336ae                 | LR__6130
336ae     45 78 70 65 
336b2     63 74 65 64 
336b6     20 69 6E 74 
336ba     65 67 65 72 | 	byte	"Expected integer"
336be     00          | 	byte	0
336bf                 | LR__6131
336bf     4E 6F 20 6D 
336c3     6F 72 65 20 
336c7     76 61 72 69 
336cb     61 62 6C 65 
336cf     20 73 6C 6F 
336d3     74 73       | 	byte	"No more variable slots"
336d5     00          | 	byte	0
336d6                 | LR__6132
336d6     56 61 72 69 
336da     61 62 6C 65 
336de     20 6E 6F 74 
336e2     20 66 6F 75 
336e6     6E 64       | 	byte	"Variable not found"
336e8     00          | 	byte	0
336e9                 | LR__6133
336e9     43 6F 6D 6D 
336ed     61 20 65 78 
336f1     70 65 63 74 
336f5     65 64       | 	byte	"Comma expected"
336f7     00          | 	byte	0
336f8                 | LR__6134
336f8     43 6F 6D 6D 
336fc     61 20 6F 72 
33700     20 73 65 6D 
33704     69 63 6F 6C 
33708     6F 6E 20 65 
3370c     78 70 65 63 
33710     74 65 64    | 	byte	"Comma or semicolon expected"
33713     00          | 	byte	0
33714                 | LR__6135
33714     55 6E 6B 6E 
33718     6F 77 6E 20 
3371c     63 6F 6D 6D 
33720     61 6E 64    | 	byte	"Unknown command"
33723     00          | 	byte	0
33724                 | LR__6136
33724     53 74 61 63 
33728     6B 20 75 6E 
3372c     64 65 72 66 
33730     6C 6F 77    | 	byte	"Stack underflow"
33733     00          | 	byte	0
33734                 | LR__6137
33734     43 61 6E 6E 
33738     6F 74 20 65 
3373c     78 65 63 75 
33740     74 65 20 67 
33744     6F 74 6F 20 
33748     6F 72 20 67 
3374c     6F 73 75 62 
33750     20 69 6E 20 
33754     74 68 65 20 
33758     69 6D 6D 65 
3375c     64 69 61 74 
33760     65 20 6D 6F 
33764     64 65       | 	byte	"Cannot execute goto or gosub in the immediate mode"
33766     00          | 	byte	0
33767                 | LR__6138
33767     43 61 6E 6E 
3376b     6F 74 20 6C 
3376f     6F 61 64 20 
33773     66 72 6F 6D 
33777     20 74 68 69 
3377b     73 20 66 69 
3377f     6C 65       | 	byte	"Cannot load from this file"
33781     00          | 	byte	0
33782                 | LR__6139
33782     54 68 65 20 
33786     70 72 6F 67 
3378a     72 61 6D 20 
3378e     69 73 20 65 
33792     6D 70 74 79 | 	byte	"The program is empty"
33796     00          | 	byte	0
33797                 | LR__6140
33797     49 66 20 61 
3379b     66 74 65 72 
3379f     20 69 66    | 	byte	"If after if"
337a2     00          | 	byte	0
337a3                 | LR__6141
337a3     45 6D 70 74 
337a7     79 20 65 78 
337ab     70 72 65 73 
337af     73 69 6F 6E | 	byte	"Empty expression"
337b3     00          | 	byte	0
337b4                 | LR__6142
337b4     53 74 72 69 
337b8     6E 67 20 65 
337bc     78 70 65 63 
337c0     74 65 64    | 	byte	"String expected"
337c3     00          | 	byte	0
337c4                 | LR__6143
337c4     49 6E 74 65 
337c8     72 70 72 65 
337cc     74 65 72 20 
337d0     69 6E 74 65 
337d4     72 6E 61 6C 
337d8     20 65 72 72 
337dc     6F 72       | 	byte	"Interpreter internal error"
337de     00          | 	byte	0
337df                 | LR__6144
337df     45 78 70 65 
337e3     63 74 65 64 
337e7     20 61 73 73 
337eb     69 67 6E    | 	byte	"Expected assign"
337ee     00          | 	byte	0
337ef                 | LR__6145
337ef     45 78 70 65 
337f3     63 74 65 64 
337f7     20 27 74 6F 
337fb     27          | 	byte	"Expected 'to'"
337fc     00          | 	byte	0
337fd                 | LR__6146
337fd     45 78 70 65 
33801     63 74 65 64 
33805     20 69 6E 74 
33809     65 67 65 72 
3380d     20 76 61 72 
33811     69 61 62 6C 
33815     65          | 	byte	"Expected integer variable"
33816     00          | 	byte	0
33817                 | LR__6147
33817     55 6E 69 6E 
3381b     69 74 69 61 
3381f     6C 69 7A 65 
33823     64 20 76 61 
33827     72 69 61 62 
3382b     6C 65 20 69 
3382f     6E 20 27 6E 
33833     65 78 74 27 
33837     2C 20 75 73 
3383b     65 20 27 66 
3383f     6F 72 27 20 
33843     62 65 66 6F 
33847     72 65       | 	byte	"Uninitialized variable in 'next', use 'for' before"
33849     00          | 	byte	0
3384a                 | LR__6148
3384a     4E 6F 20 6D 
3384e     6F 72 65 20 
33852     73 6C 6F 74 
33856     73 20 66 6F 
3385a     72 20 27 66 
3385e     6F 72 27    | 	byte	"No more slots for 'for'"
33861     00          | 	byte	0
33862                 | LR__6149
33862     27 4E 65 78 
33866     74 27 20 64 
3386a     6F 65 73 6E 
3386e     27 74 20 6D 
33872     61 74 63 68 
33876     20 27 66 6F 
3387a     72 27       | 	byte	"'Next' doesn't match 'for'"
3387c     00          | 	byte	0
3387d                 | LR__6150
3387d     27 47 6F 74 
33881     6F 27 20 74 
33885     61 72 67 65 
33889     74 20 6C 69 
3388d     6E 65 20 6E 
33891     6F 74 20 66 
33895     6F 75 6E 64 | 	byte	"'Goto' target line not found"
33899     00          | 	byte	0
3389a                 | LR__6151
3389a     42 61 64 20 
3389e     6E 75 6D 62 
338a2     65 72 20 6F 
338a6     66 20 70 61 
338aa     72 61 6D 65 
338ae     74 65 72 73 | 	byte	"Bad number of parameters"
338b2     00          | 	byte	0
338b3                 | LR__6152
338b3     46 75 6E 63 
338b7     74 69 6F 6E 
338bb     20 75 6E 64 
338bf     65 66 69 6E 
338c3     65 64 20 66 
338c7     6F 72 20 73 
338cb     74 72 69 6E 
338cf     67 73       | 	byte	"Function undefined for strings"
338d1     00          | 	byte	0
338d2                 | LR__6153
338d2     42 61 64 20 
338d6     70 61 72 61 
338da     6D 65 74 65 
338de     72          | 	byte	"Bad parameter"
338df     00          | 	byte	0
338e0                 | LR__6154
338e0     43 61 6E 6E 
338e4     6F 74 20 64 
338e8     65 63 6C 61 
338ec     72 65 20 61 
338f0     6E 20 61 72 
338f4     72 61 79 3A 
338f8     20 74 68 65 
338fc     20 76 61 72 
33900     69 61 62 6C 
33904     65 20 65 78 
33908     69 73 74 73 | 	byte	"Cannot declare an array: the variable exists"
3390c     00          | 	byte	0
3390d                 | LR__6155
3390d     45 78 70 65 
33911     63 74 65 64 
33915     20 27 28 27 | 	byte	"Expected '('"
33919     00          | 	byte	0
3391a                 | LR__6156
3391a     45 78 70 65 
3391e     63 74 65 64 
33922     20 27 29 27 
33926     20 6F 72 20 
3392a     27 2C 27    | 	byte	"Expected ')' or ','"
3392d     00          | 	byte	0
3392e                 | LR__6157
3392e     4E 6F 20 6D 
33932     6F 72 65 20 
33936     74 68 61 6E 
3393a     20 33 20 64 
3393e     69 6D 65 6E 
33942     73 69 6F 6E 
33946     73 20 73 75 
3394a     70 70 6F 72 
3394e     74 65 64    | 	byte	"No more than 3 dimensions supported"
33951     00          | 	byte	0
33952                 | LR__6158
33952     56 61 72 69 
33956     61 62 6C 65 
3395a     20 6E 61 6D 
3395e     65 20 65 78 
33962     70 65 63 74 
33966     65 64       | 	byte	"Variable name expected"
33968     00          | 	byte	0
33969                 | LR__6159
33969     54 79 70 65 
3396d     20 6E 61 6D 
33971     65 20 65 78 
33975     70 65 63 74 
33979     65 64       | 	byte	"Type name expected"
3397b     00          | 	byte	0
3397c                 | LR__6160
3397c     54 79 70 65 
33980     20 6E 6F 74 
33984     20 73 75 70 
33988     70 6F 72 74 
3398c     65 64 20 79 
33990     65 74       | 	byte	"Type not supported yet"
33992     00          | 	byte	0
33993                 | LR__6161
33993     41 72 72 61 
33997     79 20 69 6E 
3399b     64 65 78 20 
3399f     6F 75 74 20 
339a3     6F 66 20 72 
339a7     61 6E 67 65 | 	byte	"Array index out of range"
339ab     00          | 	byte	0
339ac                 | LR__6162
339ac     42 61 64 20 
339b0     74 79 70 65 
339b4     20 77 68 69 
339b8     6C 65 20 61 
339bc     73 73 69 67 
339c0     6E 69 6E 67 
339c4     20 74 6F 20 
339c8     61 72 72 61 
339cc     79          | 	byte	"Bad type while assigning to array"
339cd     00          | 	byte	0
339ce                 | LR__6163
339ce     54 6F 6F 20 
339d2     6D 61 6E 79 
339d6     20 76 61 72 
339da     69 61 62 6C 
339de     65 73       | 	byte	"Too many variables"
339e0     00          | 	byte	0
339e1                 | LR__6164
339e1     27 54 68 65 
339e5     6E 27 20 65 
339e9     78 70 65 63 
339ed     74 65 64    | 	byte	"'Then' expected"
339f0     00          | 	byte	0
339f1                 | LR__6165
339f1     44 69 72 65 
339f5     63 74 6F 72 
339f9     79 20 64 6F 
339fd     65 73 6E 27 
33a01     74 20 65 78 
33a05     69 73 74    | 	byte	"Directory doesn't exist"
33a08     00          | 	byte	0
33a09                 | LR__6166
33a09     55 6E 65 78 
33a0d     70 65 63 74 
33a11     65 64 20 65 
33a15     6E 64 20 6F 
33a19     66 20 6C 69 
33a1d     6E 65       | 	byte	"Unexpected end of line"
33a1f     00          | 	byte	0
33a20                 | LR__6167
33a20     4E 6F 20 6D 
33a24     6F 72 65 20 
33a28     64 61 74 61 | 	byte	"No more data"
33a2c     00          | 	byte	0
33a2d                 | LR__6168
33a2d     45 72 72 6F 
33a31     72 20       | 	byte	"Error "
33a33     00          | 	byte	0
33a34                 | LR__6169
33a34     20 2D 20    | 	byte	" - "
33a37     00          | 	byte	0
33a38                 | LR__6170
33a38     20 69 6E 20 
33a3c     6C 69 6E 65 
33a40     20          | 	byte	" in line "
33a41     00          | 	byte	0
33a42                 | LR__6171
33a42                 | 	byte	
33a42     00          | 	byte	0
33a43                 | LR__6172
33a43     2F 73 64    | 	byte	"/sd"
33a46     00          | 	byte	0
33a47                 | LR__6173
33a47     2F 73 64 2F 
33a4b     62 61 73    | 	byte	"/sd/bas"
33a4e     00          | 	byte	0
33a4f                 | LR__6174
33a4f     2F 73 64 2F 
33a53     62 61 73    | 	byte	"/sd/bas"
33a56     00          | 	byte	0
33a57                 | LR__6175
33a57     20 42 41 53 
33a5b     49 43 20 62 
33a5f     79 74 65 73 
33a63     20 66 72 65 
33a67     65          | 	byte	" BASIC bytes free"
33a68     00          | 	byte	0
33a69                 | LR__6176
33a69     52 65 61 64 
33a6d     79          | 	byte	"Ready"
33a6e     00          | 	byte	0
33a6f                 | LR__6177
33a6f     6E 6F 6E 61 
33a73     6D 65 2E 62 
33a77     61 73       | 	byte	"noname.bas"
33a79     00          | 	byte	0
33a7a                 | LR__6178
33a7a     2F 73 64 2F 
33a7e     62 61 73 2F 
33a82     61 75 74 6F 
33a86     72 75 6E 2E 
33a8a     62 61 73    | 	byte	"/sd/bas/autorun.bas"
33a8d     00          | 	byte	0
33a8e                 | LR__6179
33a8e     72 75 6E 20 
33a92     61 75 74 6F 
33a96     72 75 6E 2E 
33a9a     62 61 73    | 	byte	"run autorun.bas"
33a9d     00          | 	byte	0
33a9e                 | LR__6180
33a9e                 | 	byte	
33a9e     00          | 	byte	0
33a9f     00          | 	alignl
33aa0                 | _dat_
33aa0     00 00 00 00 
33aa4     00 00 00 00 
33aa8     00 00 00 00 
33aac     00 00 00 00 | 	byte	$00[16]
33ab0     61 41 17 0E 
33ab4     62 42 00 00 
33ab8     63 43 19 10 
33abc     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
33ac0     65 45 18 0F 
33ac4     66 46 00 00 
33ac8     67 47 00 00 
33acc     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
33ad0     69 49 00 00 
33ad4     6A 4A 00 00 
33ad8     6B 4B 00 00 
33adc     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
33ae0     6D 4D 00 00 
33ae4     6E 4E 1A 11 
33ae8     6F 4F 1E 15 
33aec     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
33af0     71 51 00 00 
33af4     72 52 00 00 
33af8     73 53 1B 12 
33afc     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
33b00     75 55 00 00 
33b04     76 56 00 00 
33b08     77 57 00 00 
33b0c     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
33b10     79 59 00 00 
33b14     7A 5A 1D 14 
33b18     31 21 04 00 
33b1c     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
33b20     33 23 06 00 
33b24     34 24 07 00 
33b28     35 25 08 00 
33b2c     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
33b30     37 26 0A 00 
33b34     38 2A 0B 00 
33b38     39 28 0C 00 
33b3c     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
33b40     8D 8D 00 00 
33b44     9B 9B 00 00 
33b48     88 88 00 00 
33b4c     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
33b50     20 20 00 00 
33b54     2D 5F 00 00 
33b58     3D 2B 00 00 
33b5c     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
33b60     5D 7D 00 00 
33b64     5C 7C 00 00 
33b68     23 7E 00 00 
33b6c     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
33b70     27 22 00 00 
33b74     60 7E 03 00 
33b78     2C 3C 00 00 
33b7c     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
33b80     2F 3F 00 00 
33b84     B9 B9 00 00 
33b88     BA 00 00 00 
33b8c     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
33b90     BC 00 00 00 
33b94     BD 00 00 00 
33b98     BE 00 00 00 
33b9c     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
33ba0     C0 00 00 00 
33ba4     C1 00 00 00 
33ba8     C2 00 00 00 
33bac     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
33bb0     C4 00 00 00 
33bb4     C5 00 00 00 
33bb8     C6 00 00 00 
33bbc     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
33bc0     C8 00 00 00 
33bc4     C9 00 00 00 
33bc8     CA 00 00 00 
33bcc     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
33bd0     7F 7F 00 00 
33bd4     CC 00 00 00 
33bd8     CD 00 00 00 
33bdc     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
33be0     CF 00 00 00 
33be4     D0 00 00 00 
33be8     D1 00 00 00 
33bec     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
33bf0     2F 2F 00 00 
33bf4     2A 2A 00 00 
33bf8     2D 2D 00 00 
33bfc     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
33c00     8D 8D 00 00 
33c04     31 31 00 00 
33c08     32 32 00 00 
33c0c     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
33c10     34 34 00 00 
33c14     35 35 00 00 
33c18     36 36 00 00 
33c1c     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
33c20     38 38 00 00 
33c24     39 39 00 00 
33c28     30 30 00 00 
33c2c     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
33c30     5C 7C 00 00 
33c34     00 00 00 00 
33c38     00 00 00 00 
33c3c     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
33c40     00 00 00 00 
      ...             
33c98     00 00 00 00 
33c9c     00 00 00 00 | 	byte	$00[96]
33ca0     2B 00 A6 F2 
33ca4     24 A7 09 80 
33ca8     5B 88 4D 89 
33cac     80 88 A5 88 | atari_spl file "atari.spl"
33cb0     6D 88 B8 88 
33cb4     80 88 CB 88 
33cb8     92 88 A5 88 
33cbc     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
33cc0     A5 88 CA 88 
33cc4     A6 88 DD 88 
33cc8     B8 88 AB 89 
33ccc     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
33cd0     C8 AD C6 F1 
33cd4     91 06 B6 FF 
33cd8     13 00 4A 00 
33cdc     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
33ce0     5D 00 5E 00 
33ce4     5D 00 5E 00 
33ce8     5E 00 5D 00 
33cec     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
33cf0     38 00 83 00 
33cf4     25 00 83 00 
33cf8     C3 FE D1 04 
33cfc     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
33d00     48 88 38 85 
33d04     41 8A CB 88 
33d08     28 89 B8 88 
33d0c     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
33d10     15 89 03 89 
33d14     02 89 15 89 
33d18     16 89 15 89 
33d1c     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
33d20     15 89 3A 89 
33d24     72 89 E3 89 
33d28     52 83 AD 97 
33d2c     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
33d30     0C 02 B6 FF 
33d34     E1 00 A8 00 
33d38     F3 00 A8 00 
33d3c     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
33d40     CE 00 CD 00 
33d44     CD 00 BA 00 
33d48     E1 00 BB 00 
33d4c     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
33d50     DF 00 C9 FF 
33d54     E6 01 B6 06 
33d58     EE DD 8D 98 
33d5c     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
33d60     97 89 73 89 
33d64     3B 89 60 89 
33d68     60 89 60 89 
33d6c     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
33d70     73 89 72 89 
33d74     85 89 73 89 
33d78     AA 89 60 89 
33d7c     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
33d80     E8 8A 18 86 
33d84     92 88 A5 C2 
33d88     E0 00 C3 05 
33d8c     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
33d90     F2 00 64 01 
33d94     06 01 3E 01 
33d98     2B 01 2B 01 
33d9c     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
33da0     2B 01 2A 01 
33da4     2B 01 2B 01 
33da8     2B 01 18 01 
33dac     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
33db0     39 07 61 F3 
33db4     C0 AF 37 85 
33db8     0F 88 8B 8A 
33dbc     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
33dc0     AB 89 D0 89 
33dc4     AB 89 D0 89 
33dc8     D0 89 CF 89 
33dcc     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
33dd0     D0 89 F5 89 
33dd4     BD 89 08 8A 
33dd8     CF 89 E8 8A 
33ddc     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
33de0     53 B3 0D F8 
33de4     F4 07 38 00 
33de8     63 01 63 01 
33dec     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
33df0     88 01 88 01 
33df4     76 01 88 01 
33df8     88 01 89 01 
33dfc     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
33e00     75 01 AE 01 
33e04     76 01 88 01 
33e08     4A 00 46 06 
33e0c     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
33e10     08 8A 9A 86 
33e14     33 8B 08 8A 
33e18     2D 8A F5 89 
33e1c     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
33e20     2D 8A 2D 8A 
33e24     2E 8A 1B 8A 
33e28     40 8A 2D 8A 
33e2c     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
33e30     2E 8A 79 8A 
33e34     66 8A C8 8B 
33e38     72 82 2B 97 
33e3c     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
33e40     1D 02 05 01 
33e44     F8 01 C0 01 
33e48     0B 02 C0 01 
33e4c     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
33e50     F9 01 D3 01 
33e54     F8 01 D3 01 
33e58     F8 01 D2 01 
33e5c     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
33e60     E6 01 2B 01 
33e64     8E 02 5F 07 
33e68     F7 E2 ED 9C 
33e6c     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
33e70     E8 8A 78 8A 
33e74     78 8A 65 8A 
33e78     8B 8A 78 8A 
33e7c     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
33e80     8B 8A 9D 8A 
33e84     9D 8A 8B 8A 
33e88     C2 8A 78 8A 
33e8c     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
33e90     70 8C 18 86 
33e94     8B 8A 23 C9 
33e98     CB 03 C4 05 
33e9c     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
33ea0     0B 02 7B 02 
33ea4     1E 02 55 02 
33ea8     30 02 43 02 
33eac     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
33eb0     43 02 44 02 
33eb4     43 02 30 02 
33eb8     68 02 31 02 
33ebc     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
33ec0     07 08 3F F7 
33ec4     73 B2 13 85 
33ec8     15 89 ED 8B 
33ecc     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
33ed0     B0 8A FB 8A 
33ed4     D5 8A FA 8A 
33ed8     E8 8A FB 8A 
33edc     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
33ee0     E8 8A 21 8B 
33ee4     E7 8A 33 8B 
33ee8     E8 8A 26 8C 
33eec     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
33ef0     8D B0 27 F6 
33ef4     9C 08 AD 01 
33ef8     7B 02 8D 02 
33efc     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
33f00     A1 02 A0 02 
33f04     A1 02 A0 02 
33f08     A0 02 A0 02 
33f0c     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
33f10     7B 02 D8 02 
33f14     7B 02 C6 02 
33f18     3E 01 C3 05 
33f1c     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
33f20     00 8C 2A 86 
33f24     E0 8C FA 8A 
33f28     6A 8B FB 8A 
33f2c     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
33f30     45 8B 45 8B 
33f34     45 8B 6B 8B 
33f38     46 8B 59 8B 
33f3c     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
33f40     6B 8B 6B 8B 
33f44     6B 8B 6B 8B 
33f48     7D 8B 7D 8B 
33f4c     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
33f50     90 8B 91 8B 
33f54     90 8B 90 8B 
33f58     A3 8B A3 8B 
33f5c     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
33f60     B5 8B B6 8B 
33f64     B5 8B B5 8B 
33f68     B6 8B C8 8B 
33f6c     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
33f70     C8 8B DA 8B 
33f74     DB 8B DB 8B 
33f78     DB 8B DC 8B 
33f7c     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
33f80     EE 8B EE 8B 
33f84     00 8C 01 8C 
33f88     00 8C 01 8C 
33f8c     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
33f90     12 8C 13 8C 
33f94     13 8C 26 8C 
33f98     26 8C 26 8C 
33f9c     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
33fa0     38 8C 38 8C 
33fa4     38 8C 38 8C 
33fa8     4B 8C 4B 8C 
33fac     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
33fb0     5E 8C 5E 8C 
33fb4     5E 8C 5E 8C 
33fb8     70 8C 70 8C 
33fbc     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
33fc0     70 8C 83 8C 
33fc4     83 8C 83 8C 
33fc8     83 8C 96 8C 
33fcc     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
33fd0     95 8C A9 8C 
33fd4     A9 8C A8 8C 
33fd8     A8 8C A8 8C 
33fdc     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
33fe0     BB 8C BB 8C 
33fe4     BB 8C CE 8C 
33fe8     CE 8C CE 8C 
33fec     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
33ff0     E0 8C E1 8C 
33ff4     E1 8C E0 8C 
33ff8     F4 8C F2 8C 
33ffc     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
34000     05 8D 05 8D 
34004     06 8D 06 8D 
34008     19 8D 19 8D 
3400c     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
34010     18 8D 2B 8D 
34014     2B 8D 2B 8D 
34018     2A 8D 3E 8D 
3401c     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
34020     3E 8D 51 8D 
34024     50 8D 50 8D 
34028     50 8D 51 8D 
3402c     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
34030     63 8D 64 8D 
34034     76 8D 75 8D 
34038     75 8D 76 8D 
3403c     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
34040     88 8D 88 8D 
34044     89 8D 9B 8D 
34048     9A 8D 9B 8D 
3404c     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
34050     AD 8D AE 8D 
34054     AD 8D AE 8D 
34058     C1 8D C1 8D 
3405c     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
34060     D3 8D D3 8D 
34064     D3 8D D3 8D 
34068     D3 8D E6 8D 
3406c     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
34070     E6 8D E6 8D 
34074     F9 8D F9 8D 
34078     F9 8D F8 8D 
3407c     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
34080     0B 8E 0B 8E 
34084     1D 8E 1D 8E 
34088     1E 8E 1E 8E 
3408c     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
34090     31 8E 31 8E 
34094     31 8E 42 8E 
34098     43 8E 43 8E 
3409c     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
340a0     56 8E 56 8E 
340a4     55 8E 56 8E 
340a8     68 8E 69 8E 
340ac     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
340b0     69 8E 7B 8E 
340b4     7C 8E 7B 8E 
340b8     7B 8E 8D 8E 
340bc     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
340c0     8D 8E A1 8E 
340c4     A0 8E A1 8E 
340c8     A1 8E A0 8E 
340cc     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
340d0     B3 8E B3 8E 
340d4     C6 8E C5 8E 
340d8     C6 8E C6 8E 
340dc     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
340e0     D8 8E D9 8E 
340e4     D8 8E EC 8E 
340e8     EB 8E EC 8E 
340ec     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
340f0     FE 8E FE 8E 
340f4     FE 8E FE 8E 
340f8     10 8F 10 8F 
340fc     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
34100     11 8F 23 8F 
34104     24 8F 23 8F 
34108     24 8F 37 8F 
3410c     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
34110     36 8F 36 8F 
34114     48 8F 49 8F 
34118     49 8F 49 8F 
3411c     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
34120     5B 8F 5C 8F 
34124     5B 8F 6E 8F 
34128     6E 8F 6E 8F 
3412c     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
34130     81 8F 81 8F 
34134     81 8F 81 8F 
34138     93 8F 93 8F 
3413c     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
34140     93 8F A6 8F 
34144     A6 8F A6 8F 
34148     A6 8F B9 8F 
3414c     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
34150     B9 8F B9 8F 
34154     CC 8F CB 8F 
34158     CB 8F CC 8F 
3415c     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
34160     DF 8F DE 8F 
34164     DE 8F F1 8F 
34168     F1 8F F1 8F 
3416c     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
34170     03 90 04 90 
34174     04 90 04 90 
34178     16 90 17 90 
3417c     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
34180     29 90 28 90 
34184     29 90 28 90 
34188     29 90 3C 90 
3418c     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
34190     3C 90 4F 90 
34194     4E 90 4E 90 
34198     4E 90 4E 90 
3419c     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
341a0     61 90 61 90 
341a4     73 90 74 90 
341a8     74 90 74 90 
341ac     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
341b0     87 90 86 90 
341b4     87 90 86 90 
341b8     99 90 99 90 
341bc     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
341c0     AB 90 AB 90 
341c4     AC 90 AB 90 
341c8     AB 90 BF 90 
341cc     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
341d0     BE 90 D1 90 
341d4     D0 90 D1 90 
341d8     D1 90 D1 90 
341dc     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
341e0     E3 90 E4 90 
341e4     F6 90 F6 90 
341e8     F6 90 F6 90 
341ec     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
341f0     09 91 0A 91 
341f4     0A 91 1C 91 
341f8     1C 91 1C 91 
341fc     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
34200     2F 91 2E 91 
34204     2F 91 2F 91 
34208     2E 91 41 91 
3420c     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
34210     41 91 53 91 
34214     54 91 54 91 
34218     53 91 54 91 
3421c     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
34220     67 91 67 91 
34224     79 91 7A 91 
34228     79 91 78 91 
3422c     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
34230     8C 91 8B 91 
34234     8C 91 8C 91 
34238     9E 91 9E 91 
3423c     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
34240     B1 91 B1 91 
34244     B2 91 B1 91 
34248     B1 91 C4 91 
3424c     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
34250     C4 91 D6 91 
34254     D7 91 D7 91 
34258     D7 91 D6 91 
3425c     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
34260     EA 91 EA 91 
34264     EA 91 FC 91 
34268     FC 91 FB 91 
3426c     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
34270     0E 92 0F 92 
34274     0F 92 0E 92 
34278     21 92 21 92 
3427c     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
34280     21 92 34 92 
34284     33 92 34 92 
34288     34 92 47 92 
3428c     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
34290     46 92 47 92 
34294     59 92 59 92 
34298     59 92 59 92 
3429c     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
342a0     6C 92 6C 92 
342a4     6B 92 7E 92 
342a8     7E 92 7E 92 
342ac     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
342b0     92 92 91 92 
342b4     91 92 90 92 
342b8     91 92 A4 92 
342bc     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
342c0     A3 92 B6 92 
342c4     B6 92 B7 92 
342c8     B7 92 B6 92 
342cc     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
342d0     CA 92 C9 92 
342d4     CA 92 DC 92 
342d8     DC 92 DC 92 
342dc     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
342e0     EF 92 EF 92 
342e4     EF 92 EF 92 
342e8     01 93 01 93 
342ec     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
342f0     15 93 14 93 
342f4     14 93 14 93 
342f8     14 93 27 93 
342fc     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
34300     27 93 39 93 
34304     3A 93 39 93 
34308     39 93 39 93 
3430c     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
34310     4B 93 4C 93 
34314     5F 93 5F 93 
34318     5F 93 5E 93 
3431c     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
34320     5F 93 84 93 
34324     4C 93 96 93 
34328     5F 93 AE 94 
3432c     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
34330     7B C1 00 00 
34334     00 00 00 00 
34338     00 00 00 00 
3433c     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34340     00 00 00 00 | 	byte	$00, $00, $00, $00
34344     7A D7 00 80 
34348     87 8A 48 8F 
3434c     EC 8C 76 8D 
34350     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
34354     3C 8D 82 8D 
34358     42 8D 88 8D 
3435c     8C 8D 8E 8D 
34360     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
34364     97 8D DE 8D 
34368     E1 8D F1 8E 
3436c     D8 8C A3 83 
34370     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
34374     65 71 C9 65 
34378     FC 64 C4 65 
3437c     C1 65 BF 65 
34380     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
34384     B6 65 B4 65 
34388     B2 65 AE 65 
3438c     AC 65 ED 65 
34390     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
34394     5E 65 25 66 
34398     FA 62 23 6B 
3439c     B5 6C 61 0A 
343a0     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
343a4     5D 90 BE 8D 
343a8     47 8E C3 8D 
343ac     09 8E C9 8D 
343b0     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
343b4     15 8E 19 8E 
343b8     1B 8E 62 8E 
343bc     64 8E 68 8E 
343c0     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
343c4     B5 8E 4C 90 
343c8     FA 84 3C 9D 
343cc     98 13 79 6D 
343d0     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
343d4     D9 66 50 66 
343d8     D4 66 4B 66 
343dc     8C 66 46 66 
343e0     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
343e4     81 66 3A 66 
343e8     7C 66 36 66 
343ec     76 66 30 66 
343f0     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
343f4     6B 66 88 72 
343f8     BF 37 E7 B7 
343fc     75 83 8B 8E 
34400     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
34404     94 8E 96 8E 
34408     DD 8E 9C 8E 
3440c     E2 8E A2 8E 
34410     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
34414     EE 8E AE 8E 
34418     38 8F B5 8E 
3441c     3F 8F FD 8E 
34420     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
34424     A5 87 1E E3 
34428     6D 5D FA 71 
3442c     41 64 25 67 
34430     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
34434     D9 66 1A 67 
34438     18 67 15 67 
3443c     12 67 0F 67 
34440     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
34444     07 67 C0 66 
34448     01 67 BC 66 
3444c     B8 66 DE 64 
34450     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
34454     43 E5 1F 8B 
34458     14 8A F1 90 
3445c     1C 8F 63 8F 
34460     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
34464     29 8F 6E 8F 
34468     72 8F 75 8F 
3446c     34 8F BE 8F 
34470     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
34474     84 8F 87 8F 
34478     CC 8F 56 90 
3447c     67 91 49 80 
34480     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
34484     46 77 A6 66 
34488     E8 66 B0 67 
3448c     AD 67 ED 67 
34490     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
34494     A2 67 E3 67 
34498     9D 67 9A 67 
3449c     98 67 94 67 
344a0     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
344a4     49 67 CD 67 
344a8     28 65 5F 6E 
344ac     82 67 3A 01 
344b0     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
344b4     C2 91 A9 8F 
344b8     EF 8F AE 8F 
344bc     F4 8F B5 8F 
344c0     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
344c4     01 90 03 90 
344c8     07 90 09 90 
344cc     0C 90 53 90 
344d0     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
344d4     18 90 44 93 
344d8     85 84 D6 9D 
344dc     87 1F 2F 75 
344e0     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
344e4     C4 68 F6 67 
344e8     BE 68 F1 67 
344ec     76 68 2E 68 
344f0     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
344f4     27 68 24 68 
344f8     64 68 1E 68 
344fc     5F 68 19 68 
34500     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
34504     DC 68 56 72 
34508     7E 36 C2 B8 
3450c     D7 84 73 90 
34510     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
34514     7B 90 7F 90 
34518     82 90 84 90 
3451c     CB 90 8B 90 
34520     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
34524     D7 90 96 90 
34528     20 91 59 90 
3452c     25 91 A2 90 
34530     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
34534     D0 89 40 EE 
34538     12 64 C4 71 
3453c     29 66 0C 69 
34540     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
34544     C0 68 02 69 
34548     FE 68 FB 68 
3454c     F9 68 F6 68 
34550     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
34554     EE 68 A8 68 
34558     2C 69 5F 68 
3455c     E2 68 81 66 
34560     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
34564     1E EB A6 8A 
34568     73 8B 5E 93 
3456c     7B 90 48 91 
34570     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
34574     0D 91 11 91 
34578     14 91 16 91 
3457c     5C 91 1C 91 
34580     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
34584     68 91 AF 91 
34588     2A 91 B5 91 
3458c     75 91 1A 94 
34590     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
34594     70 0E CB 6C 
34598     5D 6E C4 67 
3459c     99 69 54 69 
345a0     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
345a4     D2 69 49 69 
345a8     89 69 86 69 
345ac     40 69 C4 69 
345b0     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
345b4     35 69 76 69 
345b8     58 67 EB 6D 
345bc     E9 6D 89 0F 
345c0     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
345c4     33 94 94 91 
345c8     D9 91 56 91 
345cc     E0 91 9F 91 
345d0     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
345d4     EC 91 EE 91 
345d8     F1 91 F4 91 
345dc     F7 91 3D 92 
345e0     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
345e4     46 92 21 94 
345e8     11 89 A4 9D 
345ec     FD 0E 8F 6C 
345f0     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
345f4     28 6A E1 69 
345f8     65 6A 1F 6A 
345fc     5F 6A 1A 6A 
34600     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
34604     54 6A 0F 6A 
34608     4F 6A 09 6A 
3460c     06 6A 03 6A 
34610     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
34614     23 68 69 77 
34618     3A 4D 38 CA 
3461c     38 86 4E 91 
34620     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
34624     64 92 24 92 
34628     6A 92 2A 92 
3462c     70 92 30 92 
34630     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
34634     7B 92 7E 92 
34638     C5 92 84 92 
3463c     CB 92 8A 92 
34640     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
34644     4D 8D F9 E2 
34648     97 59 FE 74 
3464c     DB 68 6D 6A 
34650     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
34654     A8 6A A5 6A 
34658     A3 6A 9F 6A 
3465c     9D 6A 9B 6A 
34660     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
34664     D6 6A 8F 6A 
34668     CF 6A 46 6A 
3466c     CA 6A E1 67 
34670     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
34674     D3 F7 15 92 
34678     90 8C BF 94 
3467c     A6 92 EB 92 
34680     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
34684     B1 92 F7 92 
34688     FA 92 FD 92 
3468c     00 93 02 93 
34690     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
34694     4F 93 52 93 
34698     54 93 22 94 
3469c     5A 93 8F 88 
346a0     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
346a4     1C 77 07 6C 
346a8     E8 69 7A 6B 
346ac     34 6B 75 6B 
346b0     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
346b4     29 6B 26 6B 
346b8     24 6B 21 6B 
346bc     1D 6B 5E 6B 
346c0     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
346c4     12 6B 52 6B 
346c8     34 69 34 6E 
346cc     BA 73 A4 24 
346d0     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
346d4     7A 94 B3 93 
346d8     72 93 31 93 
346dc     78 93 7A 93 
346e0     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
346e4     83 93 86 93 
346e8     89 93 D0 93 
346ec     D2 93 D5 93 
346f0     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
346f4     DD 93 40 96 
346f8     30 8B 99 9C 
346fc     52 10 94 71 
34700     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
34704     46 6C 79 6B 
34708     40 6C B7 6B 
3470c     F7 6B B1 6B 
34710     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
34714     EC 6B A5 6B 
34718     A2 6B 9F 6B 
3471c     9D 6B 9A 6B 
34720     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
34724     C8 6A E4 76 
34728     20 4B F9 CE 
3472c     2E 8A 1A 92 
34730     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
34734     FB 93 BA 93 
34738     01 94 03 94 
3473c     4A 94 09 94 
34740     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
34744     55 94 14 94 
34748     9E 94 1A 94 
3474c     61 94 20 94 
34750     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
34754     3E 87 E5 CD 
34758     5F 50 6C 78 
3475c     B5 6A 04 6C 
34760     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
34764     83 6C 7F 6C 
34768     7C 6C 36 6C 
3476c     76 6C 74 6C 
34770     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
34774     6B 6C 25 6C 
34778     66 6C 1F 6C 
3477c     1D 6C 41 6A 
34780     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
34784     BA FA FC 94 
34788     5B 8D 97 96 
3478c     3B 94 C5 94 
34790     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
34794     89 94 8C 94 
34798     8F 94 92 94 
3479c     94 94 DB 94 
347a0     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
347a4     E4 94 E7 94 
347a8     2D 95 74 95 
347ac     C8 96 15 89 
347b0     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
347b4     CB 75 31 6F 
347b8     7E 6B 10 6D 
347bc     C9 6C 0A 6D 
347c0     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
347c4     BD 6C FF 6C 
347c8     FB 6C F9 6C 
347cc     B2 6C F3 6C 
347d0     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
347d4     A7 6C E8 6C 
347d8     0D 6B 85 6F 
347dc     C7 74 10 28 
347e0     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
347e4     96 96 47 95 
347e8     06 95 0A 95 
347ec     0C 95 0F 95 
347f0     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
347f4     17 95 5E 95 
347f8     61 95 63 95 
347fc     22 95 AC 95 
34800     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
34804     72 95 17 98 
34808     59 8E 01 96 
3480c     CF FC 5A 68 
34810     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
34814     96 6D 50 6D 
34818     D5 6D 4A 6D 
3481c     8C 6D 89 6D 
34820     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
34824     80 6D 3A 6D 
34828     7A 6D 77 6D 
3482c     75 6D 71 6D 
34830     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
34834     18 6C BC 78 
34838     9A 4F 7E CF 
3483c     1F 89 F1 93 
34840     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
34844     D2 95 4E 95 
34848     D7 95 53 95 
3484c     DD 95 E0 95 
34850     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
34854     A5 95 EB 95 
34858     EE 95 F0 95 
3485c     37 96 B3 95 
34860     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
34864     1A 98 D5 8D 
34868     C5 9F CD 0F 
3486c     0F 71 F3 73 
34870     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
34874     D9 6D 5E 6E 
34878     D3 6D 58 6E 
3487c     12 6E 0F 6E 
34880     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
34884     49 6E BF 6D 
34888     87 6E 76 6D 
3488c     81 6E 11 6B 
34890     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
34894     3F 09 44 95 
34898     E5 8D 3F 99 
3489c     D4 95 A2 96 
348a0     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
348a4     23 96 69 96 
348a8     6B 96 6E 96 
348ac     71 96 74 96 
348b0     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
348b4     BF 96 3C 96 
348b8     C6 96 C8 96 
348bc     A3 98 51 8D 
348c0     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
348c4     CF 75 29 73 
348c8     90 6C EC 6E 
348cc     62 6E E7 6E 
348d0     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
348d4     9A 6E 98 6E 
348d8     95 6E 91 6E 
348dc     8E 6E CF 6E 
348e0     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
348e4     40 6E C3 6E 
348e8     E8 6C 45 6F 
348ec     A5 7B C9 35 
348f0     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
348f4     2D 98 23 97 
348f8     E1 96 A0 96 
348fc     A4 96 EA 96 
34900     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
34904     AF 96 F4 96 
34908     F8 96 3E 97 
3490c     FD 96 43 97 
34910     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
34914     08 97 6B 99 
34918     D6 92 88 91 
3491c     D8 EE 84 66 
34920     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
34924     2E 6F E7 6E 
34928     6C 6F 24 6F 
3492c     21 6F 1F 6F 
34930     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
34934     17 6F 13 6F 
34938     54 6F 0E 6F 
3493c     0B 6F 4B 6F 
34940     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
34944     27 6D 1C 7B 
34948     19 59 9F DB 
3494c     66 8E BC 94 
34950     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
34954     67 97 26 97 
34958     6D 97 2B 97 
3495c     72 97 32 97 
34960     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
34964     C1 97 7F 97 
34968     C6 97 85 97 
3496c     CB 97 CE 97 
34970     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
34974     EC 8A C4 C6 
34978     68 4C F4 7D 
3497c     63 6E E8 6E 
34980     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
34984     ED 6F A7 6F 
34988     E7 6F A0 6F 
3498c     E1 6F 9B 6F 
34990     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
34994     D5 6F 8F 6F 
34998     CE 6F 45 6F 
3499c     86 6F 68 6D 
349a0     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
349a4     C0 13 AD A2 
349a8     A7 8E 79 99 
349ac     E6 97 E8 97 
349b0     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
349b4     F1 97 F3 97 
349b8     F6 97 F9 97 
349bc     FB 97 FE 97 
349c0     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
349c4     4A 98 0A 98 
349c8     93 98 0F 98 
349cc     7F 9B BF 8C 
349d0     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
349d4     91 7B 62 73 
349d8     1A 6E B9 70 
349dc     EB 6F B3 70 
349e0     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
349e4     25 70 20 70 
349e8     1E 70 1B 70 
349ec     18 70 15 70 
349f0     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
349f4     0D 70 09 70 
349f8     07 70 03 70 
349fc     01 70 FD 6F 
34a00     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
34a04     F6 6F F2 6F 
34a08     EF 6F EC 6F 
34a0c     2C 70 E6 6F 
34a10     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
34a14     DD 6F 97 6F 
34a18     D7 6F 84 6E 
34a1c     8F 6F 3F 7D 
34a20     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
34a22     FF FF FF FF 
34a26     FF FF       | atarist_spl file "atarist.spl" '512
34a28     00 00 00 00 
34a2c     00 00 00 00 
34a30     00 00       | 	byte	$00[10]
34a32     17 7F F2 7F 
34a36     B2 7F 72 7F 
34a3a     33 7F F4 7E 
34a3e     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
34a42     36 7E F5 7D 
34a46     E9 51 F2 0D 
34a4a     8E 00 F3 FD 
34a4e     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
34a52     57 FD 58 FD 
34a56     5B FD 5C FD 
34a5a     5C FD 60 7D 
34a5e     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
34a62     D6 7C 98 7C 
34a66     59 7C 1A 7C 
34a6a     DC 7B 9E 7B 
34a6e     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
34a72     F3 05 00 FD 
34a76     41 FB EA FA 
34a7a     D9 FA DB FA 
34a7e     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
34a82     E4 FA 9B 36 
34a86     F8 7A C0 7A 
34a8a     84 7A 45 7A 
34a8e     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
34a92     8E 79 51 79 
34a96     15 79 D7 78 
34a9a     3C 1F EB FF 
34a9e     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
34aa2     6D F8 65 F8 
34aa6     68 F8 6D F8 
34aaa     70 F8 74 F8 
34aae     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
34ab2     AB 60 79 60 
34ab6     4B 60 1A 60 
34aba     E9 5F B9 5F 
34abe     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
34ac2     FB 59 B2 0B 
34ac6     92 FA 3A F7 
34aca     96 F6 79 F6 
34ace     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
34ad2     82 F6 86 F6 
34ad6     8C F6 DB 5D 
34ada     F1 5E C1 5E 
34ade     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
34ae2     34 5E 04 5E 
34ae6     D6 5D A6 5D 
34aea     78 5D D4 3E 
34aee     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
34af2     27 F5 BA F4 
34af6     AB F4 AD F4 
34afa     B2 F4 B8 F4 
34afe     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
34b02     26 5D 2B 5D 
34b06     FC 5C CD 5C 
34b0a     9F 5C 70 5C 
34b0e     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
34b12     E5 5B B8 5B 
34b16     DB 24 A7 FC 
34b1a     D1 F4 4D F3 
34b1e     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
34b22     04 F3 0B F3 
34b26     11 F3 16 F3 
34b2a     DE 18 98 5B 
34b2e     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
34b32     4E 4A 29 48 
34b36     A0 47 6A 47 
34b3a     43 47 20 47 
34b3e     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
34b42     E2 F6 98 F2 
34b46     C5 F1 A3 F1 
34b4a     A3 F1 A8 F1 
34b4e     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
34b52     BF F1 00 3D 
34b56     EF 46 CD 46 
34b5a     AA 46 86 46 
34b5e     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
34b62     1C 46 F9 45 
34b66     D7 45 EE 43 
34b6a     DE 02 E8 F3 
34b6e     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
34b72     61 F0 65 F0 
34b76     6D F0 74 F0 
34b7a     7C F0 84 F0 
34b7e     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
34b82     8E 45 6D 45 
34b86     49 45 27 45 
34b8a     05 45 E1 44 
34b8e     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
34b92     F1 2F A9 FB 
34b96     8B F1 9B EF 
34b9a     40 EF 36 EF 
34b9e     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
34ba2     4D EF 56 EF 
34ba6     5E EF 7B 44 
34baa     8C 44 69 44 
34bae     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
34bb2     03 44 E1 43 
34bb6     C0 43 F5 37 
34bba     69 33 0F 11 
34bbe     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
34bc2     66 EE 37 EE 
34bc6     38 EE 40 EE 
34bca     48 EE 51 EE 
34bce     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
34bd2     7D 32 6A 32 
34bd6     51 32 37 32 
34bda     1F 32 05 32 
34bde     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
34be2     B9 31 A1 31 
34be6     F1 04 F4 F1 
34bea     50 EE A0 ED 
34bee     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
34bf2     93 ED 9A ED 
34bf6     A4 ED AD ED 
34bfa     F4 27 C1 31 
34bfe     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
34c02     78 31 5F 31 
34c06     46 31 2E 31 
34c0a     15 31 FC 30 
34c0e     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
34c12     C4 EF 4A ED 
34c16     DC EC CB EC 
34c1a     D2 EC DA EC 
34c1e     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
34c22     F9 EC 64 2F 
34c26     0A 31 F1 30 
34c2a     D9 30 C0 30 
34c2e     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
34c32     78 30 5F 30 
34c36     46 30 38 23 
34c3a     A6 F6 19 EE 
34c3e     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
34c42     20 EC 28 EC 
34c46     32 EC 3C EC 
34c4a     47 EC 51 EC 
34c4e     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
34c52     A3 22 93 22 
34c56     7F 22 6E 22 
34c5a     5D 22 4C 22 
34c5e     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
34c62     77 09 76 F1 
34c66     CC EC F0 EB 
34c6a     CD EB CE EB 
34c6e     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
34c72     ED EB F5 EB 
34c76     3E F6 6B 22 
34c7a     5F 22 4E 22 
34c7e     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
34c82     1B 22 0B 22 
34c86     FA 21 E9 21 
34c8a     D8 21 4D FF 
34c8e     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
34c92     92 EB 7B EB 
34c96     82 EB 8C EB 
34c9a     97 EB A1 EB 
34c9e     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
34ca2     15 22 04 22 
34ca6     F3 21 E3 21 
34caa     D2 21 C0 21 
34cae     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
34cb2     8E 21 7D 21 
34cb6     9A F8 A4 ED 
34cba     8E EB 2F EB 
34cbe     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
34cc2     37 EB 42 EB 
34cc6     4C EB 57 EB 
34cca     B2 17 22 19 
34cce     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
34cd2     FD 18 EF 18 
34cd6     E3 18 D6 18 
34cda     CA 18 BD 18 
34cde     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
34ce2     60 EC 35 EB 
34ce6     01 EB 01 EB 
34cea     0C EB 16 EB 
34cee     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
34cf2     34 EB D0 18 
34cf6     00 19 F4 18 
34cfa     E8 18 DA 18 
34cfe     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
34d02     B6 18 A9 18 
34d06     9D 18 91 05 
34d0a     F0 EF CA EB 
34d0e     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
34d12     E8 EA F2 EA 
34d16     FE EA 07 EB 
34d1a     12 EB C2 EF 
34d1e     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
34d22     D9 18 CD 18 
34d26     C0 18 B3 18 
34d2a     A7 18 9B 18 
34d2e     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
34d32     B8 FC 30 EE 
34d36     61 EB DC EA 
34d3a     CD EA D2 EA 
34d3e     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
34d42     F3 EA FE EA 
34d46     D2 09 D1 18 
34d4a     C3 18 17 18 
34d4e     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
34d52     66 11 52 11 
34d56     49 11 41 11 
34d5a     38 11 E0 F4 
34d5e     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
34d62     C9 EA C5 EA 
34d66     CF EA DB EA 
34d6a     E6 EA EF EA 
34d6e     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
34d72     89 11 80 11 
34d76     78 11 6E 11 
34d7a     67 11 5D 11 
34d7e     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
34d82     43 11 32 0D 
34d86     9C F1 07 EC 
34d8a     F8 EA CD EA 
34d8e     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
34d92     E4 EA ED EA 
34d96     F8 EA 02 EB 
34d9a     55 11 91 11 
34d9e     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
34da2     75 11 6E 11 
34da6     64 11 5E 11 
34daa     54 11 4A 11 
34dae     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
34db2     A8 EB F1 EA 
34db6     D9 EA DC EA 
34dba     E8 EA F1 EA 
34dbe     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
34dc2     A6 EB 9E 11 
34dc6     A0 11 96 11 
34dca     8D 11 85 11 
34dce     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
34dd2     6A 11 CA 0D 
34dd6     36 0B 57 F8 
34dda     6C ED 57 EB 
34dde     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
34de2     F4 EA FF EA 
34de6     09 EB 15 EB 
34dea     1E EB 1A FD 
34dee     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
34df2     ED 0A E8 0A 
34df6     E2 0A DC 0A 
34dfa     D6 0A D1 0A 
34dfe     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
34e02     F8 F3 BC EC 
34e06     57 EB 1E EB 
34e0a     18 EB 24 EB 
34e0e     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
34e12     42 EB 4D EB 
34e16     08 09 20 0B 
34e1a     1A 0B 14 0B 
34e1e     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
34e22     04 0B FE 0A 
34e26     F9 0A F2 0A 
34e2a     84 08 3A F1 
34e2e     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
34e32     42 EB 42 EB 
34e36     4E EB 57 EB 
34e3a     62 EB 6B EB 
34e3e     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
34e42     48 0B 43 0B 
34e46     3C 0B 36 0B 
34e4a     31 0B 2C 0B 
34e4e     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
34e52     1B 0B 5C 00 
34e56     6A EF 1B EC 
34e5a     81 EB 6A EB 
34e5e     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
34e62     85 EB 8E EB 
34e66     99 EB A3 EB 
34e6a     DD 05 E5 05 
34e6e     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
34e72     DB 05 D8 05 
34e76     D5 05 D1 05 
34e7a     D0 05 CB 05 
34e7e     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
34e82     0C EC BB EB 
34e86     B3 EB BB EB 
34e8a     C5 EB D0 EB 
34e8e     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
34e92     E4 F7 2C 06 
34e96     28 06 24 06 
34e9a     22 06 1F 06 
34e9e     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
34ea2     16 06 14 06 
34ea6     0F 06 D0 F3 
34eaa     65 ED 2D EC 
34eae     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
34eb2     01 EC 0A EC 
34eb6     14 EC 1E EC 
34eba     29 EC FB 03 
34ebe     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
34ec2     63 06 60 06 
34ec6     5E 06 59 06 
34eca     58 06 54 06 
34ece     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
34ed2     69 F1 21 ED 
34ed6     55 EC 33 EC 
34eda     36 EC 40 EC 
34ede     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
34ee2     5C EC 68 EC 
34ee6     92 02 D9 02 
34eea     D7 02 D7 02 
34eee     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
34ef2     D1 02 D1 02 
34ef6     CE 02 CD 02 
34efa     5D FC 80 EF 
34efe     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
34f02     83 EC 8A EC 
34f06     93 EC 9C EC 
34f0a     A5 EC B1 EC 
34f0e     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
34f12     2B 03 2A 03 
34f16     29 03 26 03 
34f1a     25 03 24 03 
34f1e     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
34f22     1F 03 70 F7 
34f26     D0 EE 27 ED 
34f2a     DB EC D4 EC 
34f2e     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
34f32     F0 EC FA EC 
34f36     02 ED F9 F4 
34f3a     7B 03 7C 03 
34f3e     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
34f42     75 03 73 03 
34f46     72 03 70 03 
34f4a     6D 03 6C 03 
34f4e     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
34f52     54 ED 22 ED 
34f56     22 ED 2C ED 
34f5a     35 ED 3F ED 
34f5e     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
34f62     14 01 C3 03 
34f66     C1 03 C0 03 
34f6a     5F 01 A5 00 
34f6e     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
34f72     7B 00 7C 00 
34f76     20 00 85 F1 
34f7a     2A EE 89 ED 
34f7e     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
34f82     80 ED 87 ED 
34f86     90 ED 9A ED 
34f8a     A3 ED 73 00 
34f8e     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
34f92     D0 00 D0 00 
34f96     D0 00 D0 00 
34f9a     D0 00 CF 00 
34f9e     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
34fa2     80 F0 3D EE 
34fa6     D5 ED C7 ED 
34faa     CD ED D6 ED 
34fae     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
34fb2     F2 ED FA ED 
34fb6     1D 01 29 01 
34fba     27 01 27 01 
34fbe     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
34fc2     25 01 26 01 
34fc6     26 01 23 01 
34fca     D0 F7 EC EF 
34fce     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
34fd2     1C EE 24 EE 
34fd6     2D EE 37 EE 
34fda     40 EE 47 EE 
34fde     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
34fe2     7D 01 7B 01 
34fe6     7A 01 7A 01 
34fea     79 01 78 01 
34fee     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
34ff2     84 FE DE F3 
34ff6     6C EF 93 EE 
34ffa     72 EE 72 EE 
34ffe     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
35002     8B EE 95 EE 
35006     9E EE 15 FC 
3500a     67 FE 67 FE 
3500e     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
35012     6B FE 6B FE 
35016     6D FE 6D FE 
3501a     6D FE 6F FE 
3501e     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
35022     DF EE CC EE 
35026     CF EE D9 EE 
3502a     E1 EE EA EE 
3502e     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
35032     5A FE C4 FE 
35036     C3 FE C5 FE 
3503a     C6 FE C6 FE 
3503e     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
35042     C8 FE C7 FE 
35046     DA FB 85 F1 
3504a     8D EF 31 EF 
3504e     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
35052     34 EF 3E EF 
35056     46 EF 4F EF 
3505a     57 EF 0D FF 
3505e     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
35062     1F FF 1F FF 
35066     21 FF 21 FF 
3506a     21 FF 21 FF 
3506e     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
35072     15 F1 BE EF 
35076     84 EF 7E EF 
3507a     88 EF 8F EF 
3507e     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
35082     A9 EF 06 F2 
35086     A6 FC AB FC 
3508a     AD FC AE FC 
3508e     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
35092     B2 FC B4 FC 
35096     B6 FC B7 FC 
3509a     8B F4 BD F0 
3509e     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
350a2     E4 EF EE EF 
350a6     F6 EF FD EF 
350aa     04 F0 0E F0 
350ae     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
350b2     0B FD 0D FD 
350b6     0F FD 11 FD 
350ba     11 FD 13 FD 
350be     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
350c2     17 FD 64 F3 
350c6     CD F0 52 F0 
350ca     41 F0 45 F0 
350ce     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
350d2     5B F0 64 F0 
350d6     6D F0 FB FC 
350da     65 FD 68 FD 
350de     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
350e2     6C FD 6D FD 
350e6     6F FD 70 FD 
350ea     72 FD B3 FB 
350ee     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
350f2     A4 F0 99 F0 
350f6     A0 F0 A8 F0 
350fa     AE F0 B9 F0 
350fe     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
35102     CB FB DD FB 
35106     DE FB E0 FB 
3510a     E3 FB E3 FB 
3510e     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
35112     E9 FB EC FB 
35116     62 F7 27 F2 
3511a     2A F1 FF F0 
3511e     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
35122     0C F1 13 F1 
35126     1B F1 23 F1 
3512a     33 F2 3C FC 
3512e     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
35132     42 FC 45 FC 
35136     47 FC 48 FC 
3513a     4A FC 4C FC 
3513e     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
35142     20 F2 77 F1 
35146     5C F1 5F F1 
3514a     64 F1 6C F1 
3514e     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
35152     83 F1 DC F8 
35156     9A FC 9A FC 
3515a     9B FC 9E FC 
3515e     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
35162     A3 FC A4 FC 
35166     A6 FC A9 FC 
3516a     90 F4 33 F2 
3516e     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
35172     BA F1 BF F1 
35176     C7 F1 CE F1 
3517a     D6 F1 DC F1 
3517e     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
35182     F3 FC F5 FC 
35186     FE FB 79 FB 
3518a     62 FB 5F FB 
3518e     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
35192     6F FA AF F3 
35196     53 F2 12 F2 
3519a     0F F2 15 F2 
3519e     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
351a2     2A F2 32 F2 
351a6     38 F2 9A FB 
351aa     AF FB B1 FB 
351ae     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
351b2     B7 FB B8 FB 
351b6     BA FB BC FB 
351ba     C1 FB 3B F8 
351be     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
351c2     6E F2 6C F2 
351c6     74 F2 7A F2 
351ca     81 F2 87 F2 
351ce     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
351d2     06 FC 09 FC 
351d6     0C FC 0E FC 
351da     0F FC 12 FC 
351de     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
351e2     17 FC 1A FC 
351e6     B2 F6 7B F3 
351ea     DD F2 C5 F2 
351ee     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
351f2     D4 F2 DB F2 
351f6     E0 F2 E8 F2 
351fa     28 F8 60 FC 
351fe     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
35202     64 FC 66 FC 
35206     68 FC 6A FC 
3520a     6D FC 52 FC 
3520e     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
35212     78 F3 24 F3 
35216     1A F3 1E F3 
3521a     24 F3 2A F3 
3521e     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
35222     3D F3 80 FA 
35226     0C FB 0F FB 
3522a     10 FB 14 FB 
3522e     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
35232     1B FB 1D FB 
35236     1F FB 92 FA 
3523a     DE F4 AE F3 
3523e     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
35242     79 F3 7E F3 
35246     84 F3 8C F3 
3524a     92 F3 97 F3 
3524e     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
35252     67 FB 69 FB 
35256     6B FB 6F FB 
3525a     71 FB 72 FB 
3525e     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
35262     E3 F8 BA F4 
35266     EE F3 CC F3 
3526a     CA F3 CF F3 
3526e     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
35272     E2 F3 E8 F3 
35276     ED F3 B7 FB 
3527a     BC FB BE FB 
3527e     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
35282     C4 FB C6 FB 
35286     C8 FB C9 FB 
3528a     CC FB 8F F7 
3528e     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
35292     1E F4 1E F4 
35296     24 F4 2A F4 
3529a     30 F4 38 F4 
3529e     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
352a2     AD FA B1 FA 
352a6     B4 FA B6 FA 
352aa     BA FA BB FA 
352ae     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
352b2     C2 FA C6 FA 
352b6     55 F6 C6 F4 
352ba     7D F4 72 F4 
352be     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
352c2     83 F4 89 F4 
352c6     8F F4 94 F4 
352ca     66 FA 03 FB 
352ce     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
352d2     0A FB 0E FB 
352d6     10 FB 11 FB 
352da     16 FB 18 FB 
352de     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
352e2     F9 F4 CA F4 
352e6     C5 F4 CB F4 
352ea     D1 F4 D7 F4 
352ee     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
352f2     E8 F4 3F FB 
352f6     56 FB 58 FB 
352fa     5A FB 5E FB 
352fe     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
35302     64 FB 64 FB 
35306     69 FB 99 F9 
3530a     E9 F5 33 F5 
3530e     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
35312     1D F5 22 F5 
35316     27 F5 2E F5 
3531a     32 F5 37 F5 
3531e     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
35322     BC FA BC FA 
35326     C1 FA C2 FA 
3532a     C4 FA C8 FA 
3532e     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
35332     F9 F7 DB F5 
35336     78 F5 69 F5 
3533a     6A F5 70 F5 
3533e     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
35342     7F F5 85 F5 
35346     6E F7 06 FB 
3534a     0A FB 0B FB 
3534e     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
35352     14 FB 15 FB 
35356     18 FB 1B FB 
3535a     1D FB 70 F7 
3535e     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
35362     B6 F5 BB F5 
35366     C0 F5 C6 F5 
3536a     CA F5 CF F5 
3536e     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
35372     54 FB 56 FB 
35376     5A FB 5B FB 
3537a     5E FB 5F FB 
3537e     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
35382     67 FB 52 FB 
35386     29 F7 33 F6 
3538a     06 F6 02 F6 
3538e     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
35392     10 F6 16 F6 
35396     1A F6 1F F6 
3539a     81 FB 9F FB 
3539e     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
353a2     51 FB F2 FA 
353a6     E3 FA E3 FA 
353aa     E5 FA E9 FA 
353ae     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
353b2     64 F6 4D F6 
353b6     4D F6 53 F6 
353ba     57 F6 5C F6 
353be     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
353c2     6A F6 19 FB 
353c6     1E FB 22 FB 
353ca     23 FB 24 FB 
353ce     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
353d2     2C FB 2E FB 
353d6     32 FB F0 F8 
353da     01 F7 A5 F6 
353de     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
353e2     9F F6 A3 F6 
353e6     A6 F6 AC F6 
353ea     B0 F6 EB F7 
353ee     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
353f2     68 FB 6C FB 
353f6     6E FB 71 FB 
353fa     72 FB 74 FB 
353fe     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
35402     71 F8 21 F7 
35406     E5 F6 DD F6 
3540a     E1 F6 E6 F6 
3540e     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
35412     F5 F6 F7 F6 
35416     F7 FA AB FB 
3541a     AD FB AF FB 
3541e     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
35422     B6 FB B9 FB 
35426     BB FB BC FB 
3542a     21 FB 07 F8 
3542e     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
35432     22 F7 26 F7 
35436     2B F7 2E F7 
3543a     34 F7 38 F7 
3543e     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
35442     13 FB 16 FB 
35446     17 FB 1B FB 
3544a     1E FB 20 FB 
3544e     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
35452     26 FB 77 FA 
35456     F3 F7 7C F7 
3545a     67 F7 6A F7 
3545e     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
35462     74 F7 7A F7 
35466     7E F7 82 F7 
3546a     53 FB 5A FB 
3546e     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
35472     5F FB 63 FB 
35476     65 FB 67 FB 
3547a     69 FB 6A FB 
3547e     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
35482     B5 F7 A9 F7 
35486     AD F7 B0 F7 
3548a     B5 F7 B8 F7 
3548e     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
35492     6E F8 99 FB 
35496     9C FB 9D FB 
3549a     9F FB A4 FB 
3549e     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
354a2     A9 FB AB FB 
354a6     AD FB 46 F9 
354aa     26 F8 F0 F7 
354ae     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
354b2     F4 F7 F8 F7 
354b6     FB F7 FF F7 
354ba     03 F8 65 FA 
354be     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
354c2     2B FB 2F FB 
354c6     30 FB 32 FB 
354ca     34 FB 38 FB 
354ce     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
354d2     E9 F8 4A F8 
354d6     2E F8 2C F8 
354da     2F F8 36 F8 
354de     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
354e2     41 F8 44 F8 
354e6     4A FB 67 FB 
354ea     68 FB 6B FB 
354ee     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
354f2     73 FB 74 FB 
354f6     78 FB 7A FB 
354fa     14 FB E7 F8 
354fe     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
35502     6D F8 70 F8 
35506     73 F8 78 F8 
3550a     7C F8 80 F8 
3550e     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
35512     A6 FB A7 FB 
35516     A9 FB AC FB 
3551a     AF FB B1 FB 
3551e     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
35522     B7 FB 73 FA 
35526     F8 F8 B4 F8 
3552a     A9 F8 AB F8 
3552e     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
35532     B4 F8 B8 F8 
35536     BB F8 FA F8 
3553a     64 FB 65 FB 
3553e     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
35542     6D FB 6F FB 
35546     70 FB 74 FB 
3554a     77 FB 77 FB 
3554e     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
35552     E9 F8 E4 F8 
35556     E8 F8 EB F8 
3555a     EE F8 F2 F8 
3555e     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
35562     B5 FA 9F FB 
35566     A1 FB A4 FB 
3556a     A5 FB A9 FB 
3556e     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
35572     AE FB B1 FB 
35576     B2 FB C7 F9 
3557a     39 F9 22 F9 
3557e     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
35582     26 F9 2A F9 
35586     2E F9 32 F9 
3558a     33 F9 BA FB 
3558e     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
35592     DE FB E1 FB 
35596     E2 FB E4 FB 
3559a     E5 FB E7 FB 
3559e     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
355a2     C5 F9 67 F9 
355a6     57 F9 56 F9 
355aa     5B F9 5F F9 
355ae     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
355b2     68 F9 6C F9 
355b6     0B FC 11 FC 
355ba     14 FC 15 FC 
355be     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
355c2     B5 FB B5 FB 
355c6     B6 FB B8 FB 
355ca     E9 FA C8 F9 
355ce     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
355d2     90 F9 94 F9 
355d6     95 F9 99 F9 
355da     9D F9 9F F9 
355de     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
355e2     DE FB DF FB 
355e6     E2 FB E4 FB 
355ea     E6 FB E8 FB 
355ee     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
355f2     EF FB AC FA 
355f6     E9 F9 C7 F9 
355fa     C3 F9 C8 F9 
355fe     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
35602     D0 F9 D4 F9 
35606     D6 F9 0E FB 
3560a     11 FC 13 FC 
3560e     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
35612     19 FC 1B FC 
35616     1D FC 1E FC 
3561a     21 FC 22 FC 
3561e     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
35622     F7 F9 F7 F9 
35626     FB F9 FE F9 
3562a     00 FA 03 FA 
3562e     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
35632     1B FC 45 FC 
35636     46 FC 48 FC 
3563a     4A FC 4B FC 
3563e     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
35642     52 FC 54 FC 
35646     F3 FB 82 FA 
3564a     35 FA 28 FA 
3564e     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
35652     31 FA 32 FA 
35656     37 FA 37 FA 
3565a     3C FA 00 FC 
3565e     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
35662     09 FC 0B FC 
35666     0F FC 12 FC 
3566a     12 FC 15 FC 
3566e     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
35672     8D FA 60 FA 
35676     5B FA 5C FA 
3567a     60 FA 61 FA 
3567e     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
35682     6C FA 6D FA 
35686     37 FC 3A FC 
3568a     3B FC 3D FC 
3568e     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
35692     43 FC 44 FC 
35696     45 FC 47 FC 
3569a     51 FB AB FA 
3569e     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
356a2     8E FA 91 FA 
356a6     93 FA 95 FA 
356aa     98 FA 9B FA 
356ae     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
356b2     68 FC 6A FC 
356b6     6C FC 6E FC 
356ba     70 FC 72 FC 
356be     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
356c2     76 FC 3B FB 
356c6     D0 FA BB FA 
356ca     B9 FA BD FA 
356ce     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
356d2     C4 FA C6 FA 
356d6     CA FA 13 FC 
356da     3A FC 3A FC 
356de     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
356e2     41 FC 43 FC 
356e6     44 FC 47 FC 
356ea     48 FC 3C FC 
356ee     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
356f2     E6 FA E8 FA 
356f6     EB FA EE FA 
356fa     F0 FA F2 FA 
356fe     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
35702     61 FC 66 FC 
35706     68 FC 6B FC 
3570a     6C FC 6E FC 
3570e     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
35712     73 FC 75 FC 
35716     13 FC 3F FB 
3571a     17 FB 12 FB 
3571e     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
35722     1A FB 1D FB 
35726     1F FB 20 FB 
3572a     23 FB 92 FC 
3572e     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
35732     96 FC 97 FC 
35736     9A FC 9C FC 
3573a     9E FC 9F FC 
3573e     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
35742     5A FB 41 FB 
35746     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
3574a     73 32 00 04 
3574e     00 00 10 00 
35752     00 00 00 00 
35756     00 00 00 00 | atari2 file "atari2.s2"
3575a     43 87 43 87 
3575e     43 87 44 87 
35762     43 87 44 87 
35766     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
3576a     43 87 43 87 
3576e     43 87 44 87 
35772     43 87 43 87 
35776     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3577a     44 87 43 87 
3577e     44 87 43 87 
35782     43 87 43 87 
35786     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3578a     43 87 43 87 
3578e     44 87 43 87 
35792     44 87 44 87 
35796     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
3579a     43 87 43 87 
3579e     44 87 43 87 
357a2     43 87 42 87 
357a6     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
357aa     43 87 43 87 
357ae     43 87 43 87 
357b2     44 87 43 87 
357b6     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
357ba     44 87 44 87 
357be     43 87 44 87 
357c2     43 87 44 87 
357c6     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
357ca     44 87 43 87 
357ce     44 87 44 87 
357d2     43 87 43 87 
357d6     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
357da     43 87 44 87 
357de     44 87 43 87 
357e2     43 87 44 87 
357e6     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
357ea     43 87 43 87 
357ee     43 87 43 87 
357f2     43 87 43 87 
357f6     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
357fa     42 87 43 87 
357fe     44 87 42 87 
35802     43 87 43 87 
35806     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
3580a     43 87 44 87 
3580e     44 87 43 87 
35812     43 87 43 87 
35816     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3581a     43 87 5C 87 
3581e     EE 86 AC 87 
35822     4C 7C A3 78 
35826     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
3582a     BC 78 BB 78 
3582e     BD 78 BC 78 
35832     BB 78 BD 78 
35836     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
3583a     BB 78 BB 78 
3583e     BC 78 BC 78 
35842     BC 78 BB 78 
35846     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3584a     BC 78 BC 78 
3584e     BC 78 BC 78 
35852     BC 78 BC 78 
35856     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3585a     BB 78 BC 78 
3585e     A0 78 4C 7C 
35862     11 7A 29 89 
35866     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
3586a     44 87 43 87 
3586e     44 87 43 87 
35872     43 87 42 87 
35876     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
3587a     43 87 43 87 
3587e     44 87 ED 85 
35882     71 85 52 79 
35886     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
3588a     BC 78 BC 78 
3588e     BC 78 BC 78 
35892     BC 78 BC 78 
35896     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3589a     BC 78 BC 78 
3589e     BC 78 A0 78 
358a2     CF 7A B9 81 
358a6     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
358aa     44 87 43 87 
358ae     43 87 44 87 
358b2     43 87 44 87 
358b6     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
358ba     43 87 43 87 
358be     43 87 43 87 
358c2     44 87 43 87 
358c6     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
358ca     43 87 43 87 
358ce     44 87 43 87 
358d2     44 87 43 87 
358d6     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
358da     44 87 43 87 
358de     43 87 43 87 
358e2     5A 87 39 81 
358e6     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
358ea     A5 78 BC 78 
358ee     BB 78 BC 78 
358f2     BB 78 BC 78 
358f6     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
358fa     BC 78 BC 78 
358fe     BC 78 BC 78 
35902     BC 78 8F 79 
35906     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
3590a     09 85 47 87 
3590e     43 87 43 87 
35912     42 87 42 87 
35916     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
3591a     43 87 43 87 
3591e     43 87 43 87 
35922     43 87 44 87 
35926     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3592a     43 87 43 87 
3592e     44 87 43 87 
35932     42 87 43 87 
35936     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
3593a     44 87 43 87 
3593e     43 87 43 87 
35942     44 87 44 87 
35946     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
3594a     94 78 55 7A 
3594e     B9 78 BC 78 
35952     BC 78 BC 78 
35956     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3595a     BC 78 BB 78 
3595e     BC 78 BC 78 
35962     BC 78 BC 78 
35966     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3596a     BB 78 BC 78 
3596e     BC 78 BC 78 
35972     BB 78 BC 78 
35976     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3597a     BC 78 BC 78 
3597e     BD 78 BC 78 
35982     BC 78 BB 78 
35986     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
3598a     94 78 B3 84 
3598e     36 84 4A 87 
35992     43 87 43 87 
35996     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
3599a     43 87 44 87 
3599e     43 87 43 87 
359a2     43 87 43 87 
359a6     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
359aa     43 87 44 87 
359ae     43 87 44 87 
359b2     43 87 43 87 
359b6     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
359ba     43 87 43 87 
359be     43 87 45 87 
359c2     43 87 43 87 
359c6     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
359ca     43 87 44 87 
359ce     44 87 44 87 
359d2     43 87 43 87 
359d6     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
359da     43 87 42 87 
359de     43 87 43 87 
359e2     44 87 43 87 
359e6     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
359ea     54 87 3C 82 
359ee     36 83 52 79 
359f2     C6 78 BC 78 
359f6     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
359fa     BB 78 BB 78 
359fe     BC 78 BC 78 
35a02     BC 78 BC 78 
35a06     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
35a0a     BD 78 ED 78 
35a0e     1B 79 F4 83 
35a12     4D 83 4E 87 
35a16     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
35a1a     44 87 43 87 
35a1e     42 87 44 87 
35a22     43 87 42 87 
35a26     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
35a2a     43 87 54 87 
35a2e     26 82 B3 84 
35a32     D6 77 BB 78 
35a36     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
35a3a     BC 78 BB 78 
35a3e     BB 78 BB 78 
35a42     BB 78 BB 78 
35a46     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
35a4a     BC 78 BC 78 
35a4e     26 79 18 75 
35a52     36 83 1F 84 
35a56     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
35a5a     43 87 43 87 
35a5e     43 87 43 87 
35a62     43 87 44 87 
35a66     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
35a6a     43 87 44 87 
35a6e     44 87 43 87 
35a72     43 87 43 87 
35a76     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
35a7a     43 87 43 87 
35a7e     43 87 43 87 
35a82     44 87 44 87 
35a86     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
35a8a     44 87 43 87 
35a8e     43 87 43 87 
35a92     43 87 44 87 
35a96     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
35a9a     44 87 44 87 
35a9e     44 87 43 87 
35aa2     44 87 43 87 
35aa6     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
35aaa     43 87 43 87 
35aae     43 87 44 87 
35ab2     44 87 43 87 
35ab6     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
35aba     43 87 43 87 
35abe     43 87 43 87 
35ac2     43 87 44 87 
35ac6     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
35aca     43 87 44 87 
35ace     43 87 44 87 
35ad2     19 87 7D 86 
35ad6     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
35ada     B1 78 BC 78 
35ade     BC 78 BC 78 
35ae2     BC 78 BC 78 
35ae6     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
35aea     BC 78 BC 78 
35aee     BD 78 BC 78 
35af2     B7 78 3B 7B 
35af6     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
35afa     96 86 44 87 
35afe     43 87 43 87 
35b02     43 87 43 87 
35b06     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
35b0a     44 87 44 87 
35b0e     43 87 44 87 
35b12     43 87 44 87 
35b16     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
35b1a     43 87 44 87 
35b1e     43 87 44 87 
35b22     43 87 44 87 
35b26     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
35b2a     43 87 44 87 
35b2e     43 87 43 87 
35b32     44 87 43 87 
35b36     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
35b3a     44 87 44 87 
35b3e     43 87 43 87 
35b42     43 87 44 87 
35b46     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
35b4a     43 87 43 87 
35b4e     43 87 43 87 
35b52     44 87 44 87 
35b56     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
35b5a     36 83 CF 7A 
35b5e     AB 78 BB 78 
35b62     BC 78 BC 78 
35b66     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
35b6a     BB 78 BC 78 
35b6e     BC 78 BC 78 
35b72     BC 78 BC 78 
35b76     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
35b7a     BC 78 BC 78 
35b7e     BC 78 BB 78 
35b82     BC 78 BC 78 
35b86     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
35b8a     BB 78 BC 78 
35b8e     BB 78 BC 78 
35b92     BC 78 BD 78 
35b96     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
35b9a     BC 78 BC 78 
35b9e     BC 78 BC 78 
35ba2     BC 78 BD 78 
35ba6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
35baa     BC 78 BB 78 
35bae     BC 78 BB 78 
35bb2     BB 78 BC 78 
35bb6     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
35bba     BC 78 BC 78 
35bbe     BC 78 BC 78 
35bc2     BC 78 BB 78 
35bc6     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
35bca     BC 78 BC 78 
35bce     BC 78 BD 78 
35bd2     BB 78 BC 78 
35bd6     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
35bda     BC 78 BC 78 
35bde     BC 78 BB 78 
35be2     BC 78 BB 78 
35be6     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
35bea     BB 78 BC 78 
35bee     BC 78 BC 78 
35bf2     BC 78 BB 78 
35bf6     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35bfa     BC 78 BC 78 
35bfe     BC 78 BB 78 
35c02     BC 78 BB 78 
35c06     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35c0a     BC 78 BC 78 
35c0e     BC 78 BC 78 
35c12     BB 78 BC 78 
35c16     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
35c1a     BC 78 9F 78 
35c1e     52 79 B3 84 
35c22     2F 86 60 87 
35c26     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
35c2a     44 87 43 87 
35c2e     43 87 43 87 
35c32     43 87 43 87 
35c36     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
35c3a     43 87 43 87 
35c3e     43 87 44 87 
35c42     43 87 43 87 
35c46     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
35c4a     43 87 43 87 
35c4e     43 87 43 87 
35c52     43 87 44 87 
35c56     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
35c5a     44 87 44 87 
35c5e     5E 87 BC 80 
35c62     FB 80 94 78 
35c66     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
35c6a     BD 78 BC 78 
35c6e     BB 78 BC 78 
35c72     BB 78 BB 78 
35c76     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
35c7a     BC 78 BB 78 
35c7e     BB 78 6B 79 
35c82     D6 77 AC 87 
35c86     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
35c8a     43 87 44 87 
35c8e     43 87 43 87 
35c92     44 87 43 87 
35c96     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
35c9a     43 87 44 87 
35c9e     43 87 5C 87 
35ca2     E7 80 00 80 
35ca6     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
35caa     BC 78 BD 78 
35cae     BC 78 BC 78 
35cb2     BC 78 BB 78 
35cb6     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35cba     BC 78 BC 78 
35cbe     BB 78 BC 78 
35cc2     BB 78 BC 78 
35cc6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
35cca     BB 78 BC 78 
35cce     BC 78 BC 78 
35cd2     BC 78 BC 78 
35cd6     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
35cda     BC 78 BC 78 
35cde     BC 78 BC 78 
35ce2     A0 78 8D 7B 
35ce6     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
35cea     60 87 43 87 
35cee     44 87 44 87 
35cf2     43 87 43 87 
35cf6     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
35cfa     44 87 43 87 
35cfe     43 87 43 87 
35d02     44 87 73 86 
35d06     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
35d0a     51 7B B6 78 
35d0e     BC 78 BD 78 
35d12     BC 78 BC 78 
35d16     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
35d1a     BB 78 BC 78 
35d1e     BD 78 BB 78 
35d22     BC 78 BB 78 
35d26     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
35d2a     BC 78 BC 78 
35d2e     BC 78 BC 78 
35d32     BB 78 BC 78 
35d36     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
35d3a     BC 78 BB 78 
35d3e     BB 78 BC 78 
35d42     BC 78 BB 78 
35d46     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
35d4a     22 8C AF 84 
35d4e     48 87 43 87 
35d52     44 87 43 87 
35d56     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
35d5a     43 87 42 87 
35d5e     43 87 43 87 
35d62     44 87 43 87 
35d66     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
35d6a     43 87 43 87 
35d6e     44 87 44 87 
35d72     43 87 43 87 
35d76     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
35d7a     43 87 43 87 
35d7e     43 87 43 87 
35d82     44 87 43 87 
35d86     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
35d8a     9F 8B D6 77 
35d8e     16 7C B3 78 
35d92     BC 78 BB 78 
35d96     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
35d9a     BB 78 BC 78 
35d9e     BB 78 BC 78 
35da2     BC 78 BC 78 
35da6     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
35daa     BC 78 BB 78 
35dae     BB 78 BC 78 
35db2     BB 78 BC 78 
35db6     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
35dba     BB 78 BB 78 
35dbe     BC 78 BC 78 
35dc2     BC 78 BB 78 
35dc6     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
35dca     BC 78 BC 78 
35dce     BC 78 BD 78 
35dd2     BB 78 BC 78 
35dd6     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
35dda     BC 78 BC 78 
35dde     BC 78 BB 78 
35de2     BC 78 BC 78 
35de6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
35dea     A8 78 54 7E 
35dee     F4 83 17 82 
35df2     50 87 43 87 
35df6     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
35dfa     44 87 43 87 
35dfe     44 87 43 87 
35e02     43 87 44 87 
35e06     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
35e0a     43 87 28 87 
35e0e     20 85 CF 7A 
35e12     70 7D AD 78 
35e16     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
35e1a     BB 78 BC 78 
35e1e     BC 78 BC 78 
35e22     BB 78 BB 78 
35e26     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
35e2a     BB 78 B2 78 
35e2e     9A 7C CF 7A 
35e32     4A 87 0D 87 
35e36     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
35e3a     43 87 44 87 
35e3e     43 87 44 87 
35e42     43 87 43 87 
35e46     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
35e4a     44 87 43 87 
35e4e     28 87 51 85 
35e52     11 7A 1E 7D 
35e56     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
35e5a     BC 78 BB 78 
35e5e     BC 78 BC 78 
35e62     BC 78 BC 78 
35e66     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
35e6a     BB 78 BC 78 
35e6e     BB 78 BC 78 
35e72     BC 78 BC 78 
35e76     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
35e7a     BB 78 BC 78 
35e7e     BC 78 BC 78 
35e82     BD 78 BB 78 
35e86     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
35e8a     BC 78 BB 78 
35e8e     BC 78 BC 78 
35e92     BC 78 BB 78 
35e96     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35e9a     BC 78 BC 78 
35e9e     BC 78 BC 78 
35ea2     BB 78 BC 78 
35ea6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
35eaa     BC 78 BD 78 
35eae     BC 78 BC 78 
35eb2     BC 78 BB 78 
35eb6     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35eba     BC 78 BB 78 
35ebe     BB 78 BC 78 
35ec2     BC 78 BB 78 
35ec6     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35eca     BB 78 BB 78 
35ece     BB 78 BC 78 
35ed2     B6 78 48 7D 
35ed6     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
35eda     56 87 43 87 
35ede     42 87 44 87 
35ee2     44 87 43 87 
35ee6     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
35eea     43 87 44 87 
35eee     43 87 44 87 
35ef2     4C 87 7E 83 
35ef6     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
35efa     F7 78 BC 78 
35efe     BC 78 BB 78 
35f02     BB 78 BC 78 
35f06     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
35f0a     BC 78 BB 78 
35f0e     BC 78 BC 78 
35f12     BB 78 BC 78 
35f16     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
35f1a     BB 78 BC 78 
35f1e     BC 78 BC 78 
35f22     BC 78 BB 78 
35f26     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35f2a     BC 78 BC 78 
35f2e     BC 78 BC 78 
35f32     BC 78 BB 78 
35f36     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35f3a     BC 78 BB 78 
35f3e     BB 78 BC 78 
35f42     BC 78 BB 78 
35f46     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35f4a     BC 78 BC 78 
35f4e     BB 78 BC 78 
35f52     BC 78 BC 78 
35f56     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
35f5a     73 32 00 04 
35f5e     00 00 10 00 
35f62     00 00 00 00 
35f66     00 00 00 00 | atari12 file "atari12.s2"
35f6a     00 6D 00 6D 
35f6e     00 6D 00 6D 
35f72     00 6D 00 6D 
35f76     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35f7a     00 6D 00 6D 
35f7e     00 6D 00 6D 
35f82     00 6D 00 6D 
35f86     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35f8a     00 6D 00 6D 
35f8e     00 6D 00 6D 
35f92     00 6D 00 6D 
35f96     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35f9a     00 6D 00 6D 
35f9e     00 6D 00 6D 
35fa2     00 6D 00 6D 
35fa6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35faa     00 6D 00 6D 
35fae     00 6D 00 6D 
35fb2     00 6D 00 6D 
35fb6     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
35fba     00 6C 00 6C 
35fbe     00 6C 00 6C 
35fc2     00 6C 00 6C 
35fc6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35fca     00 6C 00 6C 
35fce     00 6C 00 6C 
35fd2     00 6C 00 6C 
35fd6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35fda     00 6C 00 6C 
35fde     00 6C 00 6C 
35fe2     00 6C 00 6C 
35fe6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35fea     00 6C 00 6C 
35fee     00 6C 00 6C 
35ff2     00 6C 00 6C 
35ff6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35ffa     00 6C 00 6C 
35ffe     00 6C 00 6C 
36002     00 6C 00 6C 
36006     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3600a     00 6C 00 6C 
3600e     00 6C 00 6C 
36012     00 6C 00 6C 
36016     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3601a     00 6C 00 6C 
3601e     00 6C 00 6C 
36022     00 6C 00 6C 
36026     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3602a     00 6C 00 6C 
3602e     00 6C 00 6C 
36032     00 6C 00 6C 
36036     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3603a     00 6C 00 6C 
3603e     00 6C 00 6C 
36042     00 6C 00 6C 
36046     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3604a     00 6C 00 6C 
3604e     00 6C 00 6C 
36052     00 6C 00 6C 
36056     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3605a     00 6C 00 6C 
3605e     00 6C 00 6C 
36062     00 6C 00 6C 
36066     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3606a     00 6C 00 6B 
3606e     00 6B 00 6B 
36072     00 6B 00 6B 
36076     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3607a     00 6B 00 6B 
3607e     00 6B 00 6B 
36082     00 6B 00 6B 
36086     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3608a     00 6B 00 6B 
3608e     00 6B 00 6B 
36092     00 6B 00 6B 
36096     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3609a     00 6B 00 6B 
3609e     00 6B 00 6B 
360a2     00 6B 00 6B 
360a6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
360aa     00 6B 00 6B 
360ae     00 6B 00 6B 
360b2     00 6B 00 6B 
360b6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
360ba     00 6B 00 6B 
360be     00 6B 00 6B 
360c2     00 6B 00 6B 
360c6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
360ca     00 6B 00 6B 
360ce     00 6B 00 6B 
360d2     00 6B 00 6B 
360d6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
360da     00 6B 00 6B 
360de     00 6B 00 6B 
360e2     00 6B 00 6B 
360e6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
360ea     00 6B 00 6B 
360ee     00 6B 00 6B 
360f2     00 6B 00 6B 
360f6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
360fa     00 6B 00 6B 
360fe     00 6B 00 6B 
36102     00 6A 00 9D 
36106     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
3610a     00 9E 00 9E 
3610e     00 9E 00 9E 
36112     00 9E 00 9E 
36116     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3611a     00 9E 00 9E 
3611e     00 9E 00 9E 
36122     00 9E 00 9E 
36126     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3612a     00 9E 00 9E 
3612e     00 9E 00 9E 
36132     00 9E 00 9E 
36136     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3613a     00 9E 00 9E 
3613e     00 9E 00 9E 
36142     00 9E 00 9E 
36146     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3614a     00 9E 00 9E 
3614e     00 9E 00 9E 
36152     00 9E 00 9E 
36156     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3615a     00 9E 00 9E 
3615e     00 9E 00 9E 
36162     00 9E 00 9E 
36166     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3616a     00 9E 00 9E 
3616e     00 9E 00 9E 
36172     00 9E 00 9E 
36176     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3617a     00 9E 00 9E 
3617e     00 9E 00 9E 
36182     00 9E 00 9E 
36186     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3618a     00 9E 00 9E 
3618e     00 9E 00 9E 
36192     00 9E 00 9E 
36196     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
3619a     00 9F 00 9F 
3619e     00 9F 00 9F 
361a2     00 9F 00 9F 
361a6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
361aa     00 9F 00 9F 
361ae     00 9F 00 9F 
361b2     00 9F 00 9F 
361b6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
361ba     00 9F 00 9F 
361be     00 9F 00 9F 
361c2     00 9F 00 9F 
361c6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
361ca     00 9F 00 9F 
361ce     00 9F 00 9F 
361d2     00 9F 00 9F 
361d6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
361da     00 9F 00 9F 
361de     00 9F 00 9F 
361e2     00 9F 00 9F 
361e6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
361ea     00 9F 00 9F 
361ee     00 9F 00 9F 
361f2     00 9F 00 9F 
361f6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
361fa     00 9F 00 9F 
361fe     00 9F 00 9F 
36202     00 9F 00 9F 
36206     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3620a     00 9F 00 9F 
3620e     00 9F 00 9F 
36212     00 9F 00 9F 
36216     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3621a     00 9F 00 9F 
3621e     00 9F 00 9F 
36222     00 9F 00 9F 
36226     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3622a     00 9F 00 9F 
3622e     00 9F 00 9F 
36232     00 9F 00 9F 
36236     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3623a     00 9F 00 9F 
3623e     00 9F 00 9F 
36242     00 9F 00 9F 
36246     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3624a     00 9F 00 9F 
3624e     00 9F 00 9F 
36252     00 9F 00 9F 
36256     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3625a     00 9F 00 9F 
3625e     00 9F 00 A0 
36262     00 A0 00 A0 
36266     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3626a     00 A0 00 A0 
3626e     00 A0 00 A0 
36272     00 A0 00 A0 
36276     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3627a     00 A0 00 A0 
3627e     00 A0 00 A0 
36282     00 A0 00 A0 
36286     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3628a     00 A0 00 A0 
3628e     00 A0 00 A0 
36292     00 A0 00 A0 
36296     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3629a     00 A0 00 A0 
3629e     00 A0 00 A0 
362a2     00 A0 00 A0 
362a6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
362aa     00 A0 00 A0 
362ae     00 A0 00 A0 
362b2     00 A0 00 A0 
362b6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
362ba     00 A0 00 A0 
362be     00 A0 00 A0 
362c2     00 A0 00 A0 
362c6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
362ca     00 A0 00 A0 
362ce     00 A0 00 A0 
362d2     00 A0 00 A0 
362d6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
362da     00 A0 00 A0 
362de     00 A0 00 A0 
362e2     00 A0 00 A0 
362e6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
362ea     00 A0 00 A0 
362ee     00 A0 00 A0 
362f2     00 A0 00 A0 
362f6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
362fa     00 A0 00 A0 
362fe     00 A0 00 A0 
36302     00 A0 00 A0 
36306     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3630a     00 A0 00 A0 
3630e     00 A0 00 A0 
36312     00 A0 00 A0 
36316     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3631a     00 A0 00 A0 
3631e     00 A0 00 A0 
36322     00 A0 00 A0 
36326     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
3632a     00 6D 00 6D 
3632e     00 6D 00 6D 
36332     00 6D 00 6D 
36336     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3633a     00 6D 00 6D 
3633e     00 6D 00 6D 
36342     00 6D 00 6D 
36346     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3634a     00 6D 00 6D 
3634e     00 6D 00 6D 
36352     00 6D 00 6D 
36356     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3635a     00 6D 00 6D 
3635e     00 6D 00 6D 
36362     00 6D 00 6D 
36366     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3636a     00 6D 00 6D 
3636e     00 6D 00 6D 
36372     00 6D 00 6D 
36376     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3637a     00 6D 00 6D 
3637e     00 6D 00 6D 
36382     00 6D 00 6D 
36386     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3638a     00 6D 00 6D 
3638e     00 6D 00 6D 
36392     00 6D 00 6D 
36396     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3639a     00 6D 00 6D 
3639e     00 6D 00 6D 
363a2     00 6D 00 6D 
363a6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
363aa     00 6D 00 6D 
363ae     00 A0 00 A0 
363b2     00 A0 00 A0 
363b6     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
363ba     00 A0 00 A0 
363be     00 A0 00 A0 
363c2     00 A0 00 A0 
363c6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
363ca     00 A0 00 A0 
363ce     00 A0 00 A0 
363d2     00 A0 00 A0 
363d6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
363da     00 A0 00 A0 
363de     00 A0 00 A0 
363e2     00 A0 00 A0 
363e6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
363ea     00 A0 00 A0 
363ee     00 A0 00 A0 
363f2     00 A0 00 A0 
363f6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
363fa     00 A0 00 A0 
363fe     00 A0 00 A0 
36402     00 A0 00 A0 
36406     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3640a     00 A0 00 A0 
3640e     00 A0 00 A0 
36412     00 A0 00 A0 
36416     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3641a     00 A0 00 A0 
3641e     00 A0 00 A0 
36422     00 A0 00 A0 
36426     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3642a     00 A0 00 A0 
3642e     00 A0 00 A0 
36432     00 A0 00 A0 
36436     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
3643a     00 6D 00 6D 
3643e     00 6D 00 6D 
36442     00 6D 00 6D 
36446     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3644a     00 6D 00 6D 
3644e     00 6D 00 6D 
36452     00 6D 00 6D 
36456     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3645a     00 6D 00 6D 
3645e     00 6D 00 6D 
36462     00 6D 00 6D 
36466     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3646a     00 6D 00 6D 
3646e     00 6D 00 6D 
36472     00 6D 00 6D 
36476     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3647a     00 6D 00 6D 
3647e     00 6D 00 6D 
36482     00 6D 00 6D 
36486     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3648a     00 6D 00 6D 
3648e     00 6D 00 6D 
36492     00 6D 00 6D 
36496     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3649a     00 6D 00 6D 
3649e     00 6D 00 6D 
364a2     00 6D 00 6D 
364a6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
364aa     00 6D 00 6D 
364ae     00 6D 00 6D 
364b2     00 6D 00 6D 
364b6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
364ba     00 6D 00 6D 
364be     00 6C 00 A0 
364c2     00 9F 00 A0 
364c6     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
364ca     00 A0 00 A0 
364ce     00 A0 00 A0 
364d2     00 A0 00 A0 
364d6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
364da     00 A0 00 A0 
364de     00 A0 00 A0 
364e2     00 A0 00 A0 
364e6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
364ea     00 A0 00 A0 
364ee     00 A0 00 A0 
364f2     00 A0 00 A0 
364f6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
364fa     00 A0 00 A0 
364fe     00 A0 00 A0 
36502     00 A0 00 A0 
36506     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3650a     00 A0 00 A0 
3650e     00 A0 00 A0 
36512     00 A0 00 A0 
36516     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3651a     00 A0 00 A0 
3651e     00 A0 00 A0 
36522     00 A0 00 A0 
36526     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3652a     00 A0 00 A0 
3652e     00 A0 00 A0 
36532     00 A0 00 A0 
36536     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3653a     00 A0 00 A0 
3653e     00 A0 00 A0 
36542     00 A0 00 A0 
36546     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3654a     00 A0 00 A0 
3654e     00 A0 00 A0 
36552     00 A0 00 A0 
36556     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3655a     00 A0 00 A0 
3655e     00 A0 00 A0 
36562     00 A0 00 A0 
36566     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3656a     00 A0 00 A0 
3656e     00 A0 00 A0 
36572     00 A0 00 A0 
36576     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
3657a     00 A1 00 A1 
3657e     00 A1 00 A1 
36582     00 A1 00 A1 
36586     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3658a     00 A1 00 A1 
3658e     00 A1 00 A1 
36592     00 A1 00 A1 
36596     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3659a     00 A1 00 A1 
3659e     00 A1 00 A1 
365a2     00 A1 00 A1 
365a6     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
365aa     00 A1 00 A1 
365ae     00 A1 00 A1 
365b2     00 A1 00 A1 
365b6     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
365ba     00 A1 00 A1 
365be     00 A1 00 A1 
365c2     00 A1 00 A1 
365c6     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
365ca     00 A1 00 A1 
365ce     00 A1 00 A1 
365d2     00 6E 00 6E 
365d6     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
365da     00 6E 00 6E 
365de     00 6E 00 6E 
365e2     00 6E 00 6E 
365e6     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
365ea     00 6E 00 6E 
365ee     00 6E 00 6E 
365f2     00 6E 00 6E 
365f6     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
365fa     00 6E 00 6E 
365fe     00 6E 00 6E 
36602     00 6E 00 6E 
36606     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3660a     00 6E 00 6D 
3660e     00 6D 00 6D 
36612     00 6D 00 6D 
36616     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3661a     00 6D 00 6D 
3661e     00 6D 00 6D 
36622     00 6D 00 6D 
36626     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3662a     00 6D 00 6D 
3662e     00 6D 00 6D 
36632     00 6D 00 6D 
36636     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3663a     00 6D 00 6D 
3663e     00 6D 00 6D 
36642     00 6D 00 6D 
36646     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3664a     00 6D 00 6D 
3664e     00 6D 00 6D 
36652     00 6D 00 6D 
36656     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3665a     00 6D 00 6D 
3665e     00 6D 00 6D 
36662     00 6D 00 6D 
36666     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3666a     00 6D 00 6D 
3666e     00 6D 00 6D 
36672     00 6D 00 6D 
36676     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3667a     00 6D 00 6D 
3667e     00 6D 00 6D 
36682     00 6D 00 6D 
36686     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3668a     00 6D 00 6D 
3668e     00 6D 00 6D 
36692     00 6D 00 6D 
36696     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3669a     00 6D 00 6D 
3669e     00 6D 00 6D 
366a2     00 6D 00 6D 
366a6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
366aa     00 6D 00 6D 
366ae     00 6D 00 6D 
366b2     00 6D 00 6D 
366b6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
366ba     00 6D 00 6D 
366be     00 6C 00 6C 
366c2     00 6C 00 6C 
366c6     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
366ca     00 6C 00 6C 
366ce     00 6C 00 6C 
366d2     00 6C 00 6C 
366d6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
366da     00 6C 00 6C 
366de     00 6C 00 6C 
366e2     00 9D 00 9F 
366e6     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
366ea     00 9F 00 9F 
366ee     00 9F 00 9F 
366f2     00 A0 00 A0 
366f6     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
366fa     00 A0 00 A0 
366fe     00 A0 00 A0 
36702     00 A0 00 A0 
36706     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3670a     00 A0 00 A0 
3670e     00 A0 00 A0 
36712     00 A0 00 A0 
36716     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3671a     00 A0 00 A0 
3671e     00 A0 00 A0 
36722     00 A0 00 A0 
36726     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3672a     00 A0 00 A0 
3672e     00 A0 00 A0 
36732     00 A0 00 A0 
36736     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3673a     00 A0 00 A0 
3673e     00 A0 00 A0 
36742     00 A0 00 A0 
36746     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3674a     00 A0 00 A0 
3674e     00 A0 00 A0 
36752     00 A0 00 A0 
36756     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3675a     00 A0 00 A0 
3675e     00 A0 00 A0 
36762     00 A0 00 A0 
36766     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3676a     01 00 00 00 
3676e     00 00 00 00 
36772     00 00 00 00 
36776     00 00 00 00 | mouse  file "mouse2.def"
3677a     00 00 00 00 
3677e     00 00 00 00 
36782     00 00 00 00 
36786     00 00 00 00 | 	byte	$00[16]
3678a     01 01 00 00 
3678e     00 00 00 00 
36792     00 00 00 00 
36796     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3679a     00 00 00 00 
3679e     00 00 00 00 
367a2     00 00 00 00 
367a6     00 00 00 00 | 	byte	$00[16]
367aa     01 0D 01 00 
367ae     00 00 00 00 
367b2     00 00 00 00 
367b6     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
367ba     00 00 00 00 
367be     00 00 00 00 
367c2     00 00 00 00 
367c6     00 00 00 00 | 	byte	$00[16]
367ca     01 0D 0D 01 
367ce     00 00 00 00 
367d2     00 00 00 00 
367d6     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
367da     00 00 00 00 
367de     00 00 00 00 
367e2     00 00 00 00 
367e6     00 00 00 00 | 	byte	$00[16]
367ea     01 0D 0D 0D 
367ee     01 00 00 00 
367f2     00 00 00 00 
367f6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
367fa     00 00 00 00 
367fe     00 00 00 00 
36802     00 00 00 00 
36806     00 00 00 00 | 	byte	$00[16]
3680a     01 0D 0D 0D 
3680e     0D 01 00 00 
36812     00 00 00 00 
36816     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3681a     00 00 00 00 
3681e     00 00 00 00 
36822     00 00 00 00 
36826     00 00 00 00 | 	byte	$00[16]
3682a     01 0D 0D 0D 
3682e     0D 0D 01 00 
36832     00 00 00 00 
36836     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
3683a     00 00 00 00 
3683e     00 00 00 00 
36842     00 00 00 00 
36846     00 00 00 00 | 	byte	$00[16]
3684a     01 0D 0D 0D 
3684e     0D 0D 0D 01 
36852     00 00 00 00 
36856     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
3685a     00 00 00 00 
3685e     00 00 00 00 
36862     00 00 00 00 
36866     00 00 00 00 | 	byte	$00[16]
3686a     01 0D 0D 0D 
3686e     0D 0D 0D 0C 
36872     01 00 00 00 
36876     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
3687a     00 00 00 00 
3687e     00 00 00 00 
36882     00 00 00 00 
36886     00 00 00 00 | 	byte	$00[16]
3688a     01 0D 0D 0D 
3688e     0D 0D 0D 0D 
36892     0C 01 00 00 
36896     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
3689a     00 00 00 00 
3689e     00 00 00 00 
368a2     00 00 00 00 
368a6     00 00 00 00 | 	byte	$00[16]
368aa     01 0D 0D 0D 
368ae     0D 0D 0D 0D 
368b2     0D 0C 01 00 
368b6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
368ba     00 00 00 00 
368be     00 00 00 00 
368c2     00 00 00 00 
368c6     00 00 00 00 | 	byte	$00[16]
368ca     01 0D 0D 0D 
368ce     0D 0D 0D 0D 
368d2     0D 0D 0B 01 
368d6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
368da     00 00 00 00 
368de     00 00 00 00 
368e2     00 00 00 00 
368e6     00 00 00 00 | 	byte	$00[16]
368ea     01 0D 0D 0D 
368ee     0C 0D 0D 03 
368f2     01 01 01 01 
368f6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
368fa     00 00 00 00 
368fe     00 00 00 00 
36902     00 00 00 00 
36906     00 00 00 00 | 	byte	$00[16]
3690a     01 0D 0D 0C 
3690e     01 09 0D 03 
36912     00 00 00 00 
36916     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
3691a     00 00 00 00 
3691e     00 00 00 00 
36922     00 00 00 00 
36926     00 00 00 00 | 	byte	$00[16]
3692a     01 0D 0C 01 
3692e     00 01 0D 0B 
36932     01 00 00 00 
36936     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
3693a     00 00 00 00 
3693e     00 00 00 00 
36942     00 00 00 00 
36946     00 00 00 00 | 	byte	$00[16]
3694a     01 0C 01 00 
3694e     00 01 0A 0D 
36952     01 00 00 00 
36956     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
3695a     00 00 00 00 
3695e     00 00 00 00 
36962     00 00 00 00 
36966     00 00 00 00 | 	byte	$00[16]
3696a     01 01 00 00 
3696e     00 00 01 0D 
36972     0B 01 00 00 
36976     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
3697a     00 00 00 00 
3697e     00 00 00 00 
36982     00 00 00 00 
36986     00 00 00 00 
3698a     00 00 00 00 
3698e     00 00       | 	byte	$00[22]
36990     01 0B 0D 01 
36994     00 00 00 00 
36998     00 00 00 00 
3699c     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
369a0     00 00 00 00 
369a4     00 00 00 00 
369a8     00 00 00 00 
369ac     00 00 00 00 
369b0     00          | 	byte	$00[17]
369b1     01 01 00 00 
369b5     00 00 00 00 
369b9     00 00 00 00 
369bd     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
369c1     00 00 00 00 
      ...             
36b65     00 00 00 00 
36b69     00          | 	byte	$00[425]
36b6a                 | 
36b6a     00 00       |              	org
36b6c 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
36b70 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
36b74 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
36b78 003             | 
36b78 003 00 30 04 F6 |                 mov     psramaddr,#0
36b7c 004             | 
36b7c 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
36b80 005 20 00 00 FF 
36b84 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
36b88 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
36b8c 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
36b90 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
36b94 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
36b98 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
36b9c 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
36ba0 00d             | 
36ba0 00d 20 00 00 FF 
36ba4 00e 00 30 04 F1 |                 add 	psramaddr,##16384
36ba8 00f E0 03 00 FF 
36bac 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
36bb0 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
36bb4 012             | 
36bb4 012             |                 
36bb4 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
36bb8 013             |     
36bb8 013 01 2C 60 FD |                 cogid 	t11				' get id
36bbc 014 00 00 EC FC |                 coginit #0,#0				' start the new program
36bc0 015 03 2C 60 FD |                 cogstop t11				' stop the loader
36bc4 016             | 
36bc4 016 00 00 00 00 | t11 		long 	0
36bc8 017 00 FF 07 00 | mailbox 	long 	$7FF00
36bcc 018 00 00 00 00 | psramaddr 	long 	0
36bd0 019 00 00 00 00 | pslockval	long 	0
36bd4 01a 00 00 00 00 | cmd             long    0
36bd8 01b 00 00 00 00 | buf1            long    0
36bdc 01c 00 40 00 00 | buf2            long    16384
36be0 01d E4 6B 03 00 | 	long	@@@_dat_ + 12612
36be4 01e 50 32 20 52 
36be8 01f 65 74 72 6F 
36bec 020 6D 61 63 68 
36bf0 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
36bf4 022 42 41 53 49 
36bf8 023 43 20 76 65 
36bfc 024 72 73 69 6F 
36c00 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
36c04 026 35 31 00 00 | 	byte	$35, $31, $00, $00
36c08 027             | 	alignl
36c08 027             | _hg010b_spin2_dat_
36c08 027             | 
36c08 027 00 00 00 00 
36c0c 028 00 00 00 00 
36c10 029 00 00 00 00 
36c14 02a 00 00 00 00 
36c18 02b 00 00 00    | vga_font       file "vgafont.def"
36c1b 02b 7E 81 A5 81 
36c1f 02c 81 BD 99 81 
36c23 02d 81 7E 00 00 
36c27 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
36c2b 02f 7E FF DB FF 
36c2f 030 FF C3 E7 FF 
36c33 031 FF 7E 00 00 
36c37 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
36c3b 033 00 36 7F 7F 
36c3f 034 7F 7F 3E 1C 
36c43 035 08 00 00 00 
36c47 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
36c4b 037 00 08 1C 3E 
36c4f 038 7F 3E 1C 08 
36c53 039 00 00 00 00 
36c57 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
36c5b 03b 18 3C 3C E7 
36c5f 03c E7 E7 18 18 
36c63 03d 3C 00 00 00 
36c67 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
36c6b 03f 18 3C 7E FF 
36c6f 040 FF 7E 18 18 
36c73 041 3C 00 00 00 
36c77 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
36c7b 043 00 00 00 18 
36c7f 044 3C 3C 18 00 
36c83 045 00 00 00 00 
36c87 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
36c8b 047 FF FF FF E7 
36c8f 048 C3 C3 E7 FF 
36c93 049 FF FF FF FF 
36c97 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
36c9b 04b 00 00 3C 66 
36c9f 04c 42 42 66 3C 
36ca3 04d 00 00 00 00 
36ca7 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
36cab 04f FF FF C3 99 
36caf 050 BD BD 99 C3 
36cb3 051 FF FF FF FF 
36cb7 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
36cbb 053 78 70 58 4C 
36cbf 054 1E 33 33 33 
36cc3 055 33 1E 00 00 
36cc7 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
36ccb 057 3C 66 66 66 
36ccf 058 66 3C 18 7E 
36cd3 059 18 18 00 00 
36cd7 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
36cdb 05b FC CC FC 0C 
36cdf 05c 0C 0C 0C 0E 
36ce3 05d 0F 07 00 00 
36ce7 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
36ceb 05f FE C6 FE C6 
36cef 060 C6 C6 C6 E6 
36cf3 061 E7 67 03 00 
36cf7 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
36cfb 063 18 18 DB 3C 
36cff 064 E7 3C DB 18 
36d03 065 18 00 00 00 
36d07 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
36d0b 067 03 07 0F 1F 
36d0f 068 7F 1F 0F 07 
36d13 069 03 01 00 00 
36d17 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
36d1b 06b 60 70 78 7C 
36d1f 06c 7F 7C 78 70 
36d23 06d 60 40 00 00 
36d27 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
36d2b 06f 18 3C 7E 18 
36d2f 070 18 18 7E 3C 
36d33 071 18 00 00 00 
36d37 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
36d3b 073 66 66 66 66 
36d3f 074 66 66 66    | 	byte	$66[7]
36d42 075 00 66 66 00 
36d46 076 00 00 00 00 
36d4a 077 00 FE DB DB 
36d4e 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
36d52 079 D8 D8 D8 00 
36d56 07a 00 00 00 3E 
36d5a 07b 63 06 1C 36 
36d5e 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
36d62 07d 30 63 3E 00 
36d66 07e 00 00 00 00 
36d6a 07f 00 00 00 00 
36d6e 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
36d72 081 7F 7F 7F 00 
36d76 082 00 00 00 00 
36d7a 083 00 18 3C 7E 
36d7e 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
36d82 085 3C 18 7E 00 
36d86 086 00 00 00 00 
36d8a 087 00 18 3C 7E 
36d8e 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
36d92 089 18 18 18 00 
36d96 08a 00 00 00 00 
36d9a 08b 00 18 18 18 
36d9e 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
36da2 08d 7E 3C 18 00 
36da6 08e 00 00 00 00 
36daa 08f 00 00 00 18 
36dae 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
36db2 091 00 00 00 00 
36db6 092 00 00 00 00 
36dba 093 00 00 00    | 	byte	$00[11]
36dbd 094 0C 06 7F 06 
36dc1 095 0C 00 00 00 
36dc5 096 00 00 00 00 
36dc9 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36dcd 098 00 03 03 03 
36dd1 099 7F 00 00 00 
36dd5 09a 00 00 00 00 
36dd9 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36ddd 09c 14 36 7F 36 
36de1 09d 14 00 00 00 
36de5 09e 00 00 00 00 
36de9 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
36ded 0a0 1C 1C 3E 3E 
36df1 0a1 7F 7F 00 00 
36df5 0a2 00 00 00 00 
36df9 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
36dfd 0a4 7F 3E 3E 1C 
36e01 0a5 1C 08 00 00 
36e05 0a6 00 00 00 00 
36e09 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36e0d 0a8 00 00 00 00 
36e11 0a9 00 00 00 00 
36e15 0aa 00 00 00 00 
36e19 0ab 00 00       | 	byte	$00[14]
36e1b 0ab 18 3C 3C 3C 
36e1f 0ac 18 18 18 00 
36e23 0ad 18 18 00 00 
36e27 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
36e2b 0af 66 24 00 00 
36e2f 0b0 00 00 00 00 
36e33 0b1 00 00 00 00 
36e37 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36e3b 0b3 00 36 36 7F 
36e3f 0b4 36 36 36 7F 
36e43 0b5 36 36 00 00 
36e47 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
36e4b 0b7 3E 63 43 03 
36e4f 0b8 3E 60 60 61 
36e53 0b9 63 3E 18 18 
36e57 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
36e5b 0bb 00 00 43 63 
36e5f 0bc 30 18 0C 06 
36e63 0bd 63 61 00 00 
36e67 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
36e6b 0bf 1C 36 36 1C 
36e6f 0c0 6E 3B 33 33 
36e73 0c1 33 6E 00 00 
36e77 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
36e7b 0c3 0C 0C 0C 06 
36e7f 0c4 00 00 00 00 
36e83 0c5 00 00 00 00 
36e87 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36e8b 0c7 30 18 0C 0C 
36e8f 0c8 0C 0C 0C 0C 
36e93 0c9 18 30 00 00 
36e97 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
36e9b 0cb 0C 18 30 30 
36e9f 0cc 30 30 30 30 
36ea3 0cd 18 0C 00 00 
36ea7 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
36eab 0cf 00 00 00 66 
36eaf 0d0 3C FF 3C 66 
36eb3 0d1 00 00 00 00 
36eb7 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
36ebb 0d3 00 00 00 18 
36ebf 0d4 18 7E 18 18 
36ec3 0d5 00 00 00 00 
36ec7 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
36ecb 0d7 00 00 00 00 
36ecf 0d8 00 00 00 00 | 	byte	$00[8]
36ed3 0d9 18 18 18 0C 
36ed7 0da 00 00 00 00 
36edb 0db 00 00 00 00 
36edf 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
36ee3 0dd 00 00 00 00 
36ee7 0de 00 00 00 00 
36eeb 0df 00 00 00 00 
36eef 0e0 00 00 00 00 | 	byte	$00[16]
36ef3 0e1 18 18 00 00 
36ef7 0e2 00 00 00 00 
36efb 0e3 00 00 40 60 
36eff 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
36f03 0e5 03 01 00 00 
36f07 0e6 00 00 00 00 
36f0b 0e7 1C 36 63 63 
36f0f 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
36f13 0e9 36 1C 00 00 
36f17 0ea 00 00 00 00 
36f1b 0eb 18 1C 1E 18 
36f1f 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
36f23 0ed 18 7E 00 00 
36f27 0ee 00 00 00 00 
36f2b 0ef 3E 63 60 30 
36f2f 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
36f33 0f1 63 7F 00 00 
36f37 0f2 00 00 00 00 
36f3b 0f3 3E 63 60 60 
36f3f 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
36f43 0f5 63 3E 00 00 
36f47 0f6 00 00 00 00 
36f4b 0f7 30 38 3C 36 
36f4f 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
36f53 0f9 30 78 00 00 
36f57 0fa 00 00 00 00 
36f5b 0fb 7F 03 03 03 
36f5f 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
36f63 0fd 63 3E 00 00 
36f67 0fe 00 00 00 00 
36f6b 0ff 1C 06 03 03 
36f6f 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
36f73 101 63 3E 00 00 
36f77 102 00 00 00 00 
36f7b 103 7F 63 60 60 
36f7f 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
36f83 105 0C 0C 00 00 
36f87 106 00 00 00 00 
36f8b 107 3E 63 63 63 
36f8f 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
36f93 109 63 3E 00 00 
36f97 10a 00 00 00 00 
36f9b 10b 3E 63 63 63 
36f9f 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
36fa3 10d 30 1E 00 00 
36fa7 10e 00 00 00 00 
36fab 10f 00 00 00 18 
36faf 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
36fb3 111 18 18 00 00 
36fb7 112 00 00 00 00 
36fbb 113 00 00 00 18 
36fbf 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
36fc3 115 18 18 0C 00 
36fc7 116 00 00 00 00 
36fcb 117 00 60 30 18 
36fcf 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
36fd3 119 30 60 00 00 
36fd7 11a 00 00 00 00 
36fdb 11b 00 00 00 7E 
36fdf 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
36fe3 11d 00 00 00 00 
36fe7 11e 00 00 00 00 
36feb 11f 00          | 	byte	$00[9]
36fec 120 06 0C 18 30 
36ff0 121 60 30 18 0C 
36ff4 122 06 00 00 00 
36ff8 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
36ffc 124 63 63 30 18 
37000 125 18 18 00 18 
37004 126 18 00 00 00 
37008 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
3700c 128 3E 63 63 7B 
37010 129 7B 7B 3B 03 
37014 12a 3E 00 00 00 
37018 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
3701c 12c 1C 36 63 63 
37020 12d 7F 63 63 63 
37024 12e 63 00 00 00 
37028 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
3702c 130 66 66 66 3E 
37030 131 66 66 66 66 
37034 132 3F 00 00 00 
37038 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
3703c 134 66 43 03 03 
37040 135 03 03 43 66 
37044 136 3C 00 00 00 
37048 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
3704c 138 36 66 66 66 
37050 139 66 66 66 36 
37054 13a 1F 00 00 00 
37058 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
3705c 13c 66 46 16 1E 
37060 13d 16 06 46 66 
37064 13e 7F 00 00 00 
37068 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
3706c 140 66 46 16 1E 
37070 141 16 06 06 06 
37074 142 0F 00 00 00 
37078 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
3707c 144 66 43 03 03 
37080 145 7B 63 63 66 
37084 146 5C 00 00 00 
37088 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
3708c 148 63 63 63 7F 
37090 149 63 63 63 63 
37094 14a 63 00 00 00 
37098 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
3709c 14c 18 18 18 18 
370a0 14d 18 18 18 18 | 	byte	$18[8]
370a4 14e 3C 00 00 00 
370a8 14f 00 00 00 78 
370ac 150 30 30 30 30 
370b0 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
370b4 152 1E 00 00 00 
370b8 153 00 00 00 67 
370bc 154 66 66 36 1E 
370c0 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
370c4 156 67 00 00 00 
370c8 157 00 00 00 0F 
370cc 158 06 06 06 06 
370d0 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
370d4 15a 7F 00 00 00 
370d8 15b 00 00 00 63 
370dc 15c 77 7F 7F 6B 
370e0 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
370e4 15e 63 00 00 00 
370e8 15f 00 00 00 63 
370ec 160 67 6F 7F 7B 
370f0 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
370f4 162 63 00 00 00 
370f8 163 00 00 00 3E 
370fc 164 63 63 63 63 
37100 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
37104 166 3E 00 00 00 
37108 167 00 00 00 3F 
3710c 168 66 66 66 3E 
37110 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
37114 16a 0F 00 00 00 
37118 16b 00 00 00 3E 
3711c 16c 63 63 63 63 
37120 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
37124 16e 3E 30 70 00 
37128 16f 00 00 00 3F 
3712c 170 66 66 66 3E 
37130 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
37134 172 67 00 00 00 
37138 173 00 00 00 3E 
3713c 174 63 63 06 1C 
37140 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
37144 176 3E 00 00 00 
37148 177 00 00 00 7E 
3714c 178 7E 5A 18 18 
37150 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
37154 17a 3C 00 00 00 
37158 17b 00 00 00 63 
3715c 17c 63 63 63 63 
37160 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
37164 17e 3E 00 00 00 
37168 17f 00 00 00 63 
3716c 180 63 63 63 63 
37170 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
37174 182 08 00 00 00 
37178 183 00 00 00 63 
3717c 184 63 63 63 6B 
37180 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
37184 186 36 00 00 00 
37188 187 00 00 00 63 
3718c 188 63 36 3E 1C 
37190 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
37194 18a 63 00 00 00 
37198 18b 00 00 00 66 
3719c 18c 66 66 66 3C 
371a0 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
371a4 18e 3C 00 00 00 
371a8 18f 00 00 00 7F 
371ac 190 63 61 30 18 
371b0 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
371b4 192 7F 00 00 00 
371b8 193 00 00 00 3C 
371bc 194 0C 0C 0C 0C 
371c0 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
371c4 196 3C 00 00 00 
371c8 197 00 00 00 00 
371cc 198 01 03 07 0E 
371d0 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
371d4 19a 40 00 00 00 
371d8 19b 00 00 00 3C 
371dc 19c 30 30 30 30 
371e0 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
371e4 19e 3C 00 00 00 
371e8 19f 1C 36 00 00 
371ec 1a0 00 00 00 00 
371f0 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
371f4 1a2 00 00 00 00 
371f8 1a3 00 00 00 00 
371fc 1a4 00 00 00 00 
37200 1a5 00 00 00 00 
37204 1a6 00          | 	byte	$00[17]
37205 1a6 FF 00 00 0C 
37209 1a7 18 00 00 00 
3720d 1a8 00 00 00 00 
37211 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37215 1aa 00 00 00 00 
37219 1ab 00 00 00 00 
3721d 1ac 00          | 	byte	$00[9]
3721e 1ac 1E 30 3E 33 
37222 1ad 33 33 6E 00 
37226 1ae 00 00 00 00 
3722a 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
3722e 1b0 1E 36 66 66 
37232 1b1 66 66 3E 00 
37236 1b2 00 00 00 00 
3723a 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3723e 1b4 3E 63 03 03 
37242 1b5 03 63 3E 00 
37246 1b6 00 00 00 00 
3724a 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
3724e 1b8 3C 36 33 33 
37252 1b9 33 33 6E 00 
37256 1ba 00 00 00 00 
3725a 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3725e 1bc 3E 63 7F 03 
37262 1bd 03 63 3E 00 
37266 1be 00 00 00 00 
3726a 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
3726e 1c0 0C 1E 0C 0C 
37272 1c1 0C 0C 1E 00 
37276 1c2 00 00 00 00 
3727a 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3727e 1c4 6E 33 33 33 
37282 1c5 33 33 3E 30 
37286 1c6 33 1E 00 00 
3728a 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
3728e 1c8 36 6E 66 66 
37292 1c9 66 66 67 00 
37296 1ca 00 00 00 00 
3729a 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
3729e 1cc 1C 18 18 18 
372a2 1cd 18 18 3C 00 
372a6 1ce 00 00 00 00 
372aa 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
372ae 1d0 70 60 60 60 
372b2 1d1 60 60 60 66 
372b6 1d2 66 3C 00 00 
372ba 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
372be 1d4 66 36 1E 1E 
372c2 1d5 36 66 67 00 
372c6 1d6 00 00 00 00 
372ca 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
372ce 1d8 18 18 18 18 
372d2 1d9 18 18       | 	byte	$18[6]
372d4 1da 3C 00 00 00 
372d8 1db 00 00 00 00 
372dc 1dc 00 00 37 7F 
372e0 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
372e4 1de 63 00 00 00 
372e8 1df 00 00 00 00 
372ec 1e0 00 00 3B 66 
372f0 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
372f4 1e2 66 00 00 00 
372f8 1e3 00 00 00 00 
372fc 1e4 00 00 3E 63 
37300 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
37304 1e6 3E 00 00 00 
37308 1e7 00 00 00 00 
3730c 1e8 00 00 3B 66 
37310 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
37314 1ea 3E 06 06 0F 
37318 1eb 00 00 00 00 
3731c 1ec 00 00 6E 33 
37320 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
37324 1ee 3E 30 30 78 
37328 1ef 00 00 00 00 
3732c 1f0 00 00 3B 6E 
37330 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
37334 1f2 0F 00 00 00 
37338 1f3 00 00 00 00 
3733c 1f4 00 00 3E 63 
37340 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
37344 1f6 3E 00 00 00 
37348 1f7 00 00 00 08 
3734c 1f8 0C 0C 3F 0C 
37350 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
37354 1fa 38 00 00 00 
37358 1fb 00 00 00 00 
3735c 1fc 00 00 33 33 
37360 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
37364 1fe 6E 00 00 00 
37368 1ff 00 00 00 00 
3736c 200 00 00 63 63 
37370 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
37374 202 1C 00 00 00 
37378 203 00 00 00 00 
3737c 204 00 00 63 63 
37380 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
37384 206 36 00 00 00 
37388 207 00 00 00 00 
3738c 208 00 00 63 36 
37390 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
37394 20a 63 00 00 00 
37398 20b 00 00 00 00 
3739c 20c 00 00 63 63 
373a0 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
373a4 20e 7E 60 30 1F 
373a8 20f 00 00 00 00 
373ac 210 00 00 7F 33 
373b0 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
373b4 212 7F 00 00 00 
373b8 213 00 00 00 70 
373bc 214 18 18 18 0E 
373c0 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
373c4 216 70 00 00 00 
373c8 217 00 00 00 18 
373cc 218 18 18 18 18 
373d0 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
373d4 21a 18 00 00 00 
373d8 21b 00 00 00 0E 
373dc 21c 18 18 18 70 
373e0 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
373e4 21e 0E 00 00 00 
373e8 21f 6E 3B 00 00 
373ec 220 00 00 00 00 
373f0 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
373f4 222 00 00 00 00 
373f8 223 00 00 00 00 
373fc 224 00 00       | 	byte	$00[10]
373fe 224 08 1C 36 63 
37402 225 63 63 7F 00 
37406 226 00 00 00 00 
3740a 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
3740e 228 03 03 03 03 
37412 229 43 66 3C 18 
37416 22a 30 1E 00 00 
3741a 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
3741e 22c 33 33 33 33 
37422 22d 33 33       | 	byte	$33[6]
37424 22e 6E 00 00 00 
37428 22f 00 00 60 30 
3742c 230 18 00 3E 63 
37430 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
37434 232 3E 00 00 00 
37438 233 00 00 08 1C 
3743c 234 36 00 1E 30 
37440 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
37444 236 6E 00 00 00 
37448 237 00 00 00 00 
3744c 238 33 00 1E 30 
37450 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
37454 23a 6E 00 00 00 
37458 23b 00 00 1C 36 
3745c 23c 1C 00 33 33 
37460 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
37464 23e 6E 00 00 00 
37468 23f 00 00 60 30 
3746c 240 18 00 3E 63 
37470 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
37474 242 3E 00 00 00 
37478 243 00 00 00 00 
3747c 244 00 00 3E 63 
37480 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
37484 246 3E 18 30 1E 
37488 247 00 00 00 1C 
3748c 248 58 78 38 18 
37490 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
37494 24a 3C 00 00 00 
37498 24b 00 00 00 00 
3749c 24c 63 00 3E 63 
374a0 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
374a4 24e 3E 00 00 00 
374a8 24f 66 33 00 3E 
374ac 250 63 63 63 63 
374b0 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
374b4 252 3E 00 00 00 
374b8 253 00 00 CC 66 
374bc 254 33 00 3E 63 
374c0 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
374c4 256 3E 00 00 00 
374c8 257 00 00 18 3C 
374cc 258 66 00 1C 18 
374d0 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
374d4 25a 3C 00 00 00 
374d8 25b 30 18 00 7F 
374dc 25c 63 61 30 18 
374e0 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
374e4 25e 7F 00 00 00 
374e8 25f 00 63 00 08 
374ec 260 1C 36 63 63 
374f0 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
374f4 262 63 00 00 00 
374f8 263 30 18 00 3C 
374fc 264 66 43 03 03 
37500 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
37504 266 3C 00 00 00 
37508 267 30 18 00 7F 
3750c 268 66 46 16 1E 
37510 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
37514 26a 7F 00 00 00 
37518 26b 0C 06 00 0F 
3751c 26c 06 06 06 06 
37520 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
37524 26e 7F 00 00 00 
37528 26f 30 18 00 1C 
3752c 270 18 18 18 18 
37530 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
37534 272 3C 00 00 00 
37538 273 00 00 08 1C 
3753c 274 36 00 3E 63 
37540 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
37544 276 3E 00 00 00 
37548 277 00 00 00 00 
3754c 278 63 00 3E 63 
37550 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
37554 27a 3E 00 00 00 
37558 27b 00 00 00 6F 
3755c 27c 46 26 06 06 
37560 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
37564 27e 7F 00 00 00 
37568 27f 00 00 00 6E 
3756c 280 4C 2C 0C 0C 
37570 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
37574 282 1E 00 00 00 
37578 283 30 18 00 3E 
3757c 284 63 63 06 1C 
37580 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
37584 286 3E 00 00 00 
37588 287 00 00 60 30 
3758c 288 18 00 3E 63 
37590 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
37594 28a 3E 00 00 00 
37598 28b 00 63 00 3E 
3759c 28c 63 63 63 63 
375a0 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
375a4 28e 3E 00 00 00 
375a8 28f 00 63 00 63 
375ac 290 63 63 63 63 
375b0 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
375b4 292 3E 00 00 00 
375b8 293 6C 38 00 7E 
375bc 294 7E 5A 18 18 
375c0 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
375c4 296 3C 00 00 00 
375c8 297 00 00 60 48 
375cc 298 2C 0C 3F 0C 
375d0 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
375d4 29a 38 00 00 00 
375d8 29b 00 00 00 0F 
375dc 29c 26 36 1E 0E 
375e0 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
375e4 29e 7F 00 00 00 
375e8 29f 00 00 00 00 
375ec 2a0 00 63 36 1C 
375f0 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
375f4 2a2 00 00 00 00 
375f8 2a3 00 00       | 	byte	$00[6]
375fa 2a3 36 1C 08 00 
375fe 2a4 3E 63 03 03 
37602 2a5 03 63 3E 00 
37606 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
3760a 2a7 30 18 0C 00 
3760e 2a8 1E 30 3E 33 
37612 2a9 33 33 6E 00 
37616 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3761a 2ab 60 30 18 00 
3761e 2ac 1C 18 18 18 
37622 2ad 18 18 3C 00 
37626 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
3762a 2af 60 30 18 00 
3762e 2b0 3E 63 63 63 
37632 2b1 63 63 3E 00 
37636 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
3763a 2b3 30 18 0C 00 
3763e 2b4 33 33 33 33 
37642 2b5 33 33 6E 00 
37646 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3764a 2b7 00 08 1C 36 
3764e 2b8 63 63 7F 63 
37652 2b9 63 63 63 18 
37656 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
3765a 2bb 00 00 00 00 
3765e 2bc 1E 30 3E 33 
37662 2bd 33 33 6E 18 
37666 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
3766a 2bf 00 7F 63 61 
3766e 2c0 30 18 0C 06 
37672 2c1 43 63 7F 00 
37676 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
3767a 2c3 36 1C 08 00 
3767e 2c4 7F 33 18 0C 
37682 2c5 06 63 7F 00 
37686 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
3768a 2c7 00 7F 66 46 
3768e 2c8 16 1E 16 06 
37692 2c9 46 66 7F 18 
37696 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
3769a 2cb 00 00 00 00 
3769e 2cc 3E 63 7F 03 
376a2 2cd 03 63 3E 18 
376a6 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
376aa 2cf 00 3C 66 03 
376ae 2d0 1F 03 0F 03 
376b2 2d1 03 66 3C 00 
376b6 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
376ba 2d3 60 30 18 00 
376be 2d4 7F 33 18 0C 
376c2 2d5 06 63 7F 00 
376c6 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
376ca 2d7 00 3C 66 43 
376ce 2d8 03 03 03 03 
376d2 2d9 43 66 3C 00 
376d6 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
376da 2db 00 00 00 00 
376de 2dc 3E 63 06 1C 
376e2 2dd 30 63 3E 18 
376e6 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
376ea 2df 00 00 00 00 
376ee 2e0 00 00       | 	byte	$00[6]
376f0 2e1 6C 36 1B 36 
376f4 2e2 6C 00 00 00 
376f8 2e3 00 00 00 00 
376fc 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37700 2e5 1B 36 6C 36 
37704 2e6 1B 00 00 00 
37708 2e7 88 22 88 22 
3770c 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
37710 2e9 88 22 88 22 
37714 2ea 88 22 88 22 
37718 2eb AA 55 AA 55 
3771c 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
37720 2ed AA 55 AA 55 
37724 2ee AA 55 AA 55 
37728 2ef BB EE BB EE 
3772c 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
37730 2f1 BB EE BB EE 
37734 2f2 BB EE BB EE 
37738 2f3 18 18 18 18 
3773c 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
37740 2f5 18 18 18 18 
37744 2f6 18 18 18 18 
37748 2f7 18 18 18 18 
3774c 2f8 18 18 18    | 	byte	$18[15]
3774f 2f8 1F 18 18 18 
37753 2f9 18 18 18 18 
37757 2fa 18 30 18 00 
3775b 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
3775f 2fc 63 7F 63 63 
37763 2fd 63 63 00 00 
37767 2fe 00 1C 36 00 
3776b 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
3776f 300 63 7F 63 63 
37773 301 63 63 00 00 
37777 302 00 36 1C 00 
3777b 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
3777f 304 1E 16 06 46 
37783 305 66 7F 00 00 
37787 306 00 00 00 00 
3778b 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
3778f 308 1C 30 60 63 
37793 309 63 3E 18 30 
37797 30a 1E 6C 6C 6C 
3779b 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
3779f 30c 6F 6C 6C 6C 
377a3 30d 6C 6C 6C 6C 
377a7 30e 6C 6C 6C 6C 
377ab 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
377af 310 6C 6C 6C 6C 
377b3 311 6C 6C 6C 6C 
377b7 312 6C          | 	byte	$6c[9]
377b8 313 00 00 00 00 
377bc 314 00          | 	byte	$00[5]
377bd 314 7F 60 6F 6C 
377c1 315 6C 6C 6C 6C 
377c5 316 6C 6C 6C 6C 
377c9 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
377cd 318 6F 60 7F 00 
377d1 319 00 00 00 00 
377d5 31a 00 00 00 18 
377d9 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
377dd 31c 61 30 18 0C 
377e1 31d 06 43 63 7F 
377e5 31e 00 00 00 00 
377e9 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
377ed 320 00 7F 33 18 
377f1 321 0C 06 63 7F 
377f5 322 00 00 00 00 
377f9 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
377fd 324 00 00 1F 18 
37801 325 18 18 18 18 
37805 326 18 18 18 18 
37809 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3780d 328 18 18 F8 00 
37811 329 00 00 00 00 
37815 32a 00 00 00 18 
37819 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
3781d 32c 18 18 FF 00 
37821 32d 00 00 00 00 
37825 32e 00 00 00 00 
37829 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3782d 330 00 00 FF 18 
37831 331 18 18 18 18 
37835 332 18 18 18 18 
37839 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3783d 334 18 18 F8 18 
37841 335 18 18 18 18 
37845 336 18 18 18 00 
37849 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
3784d 338 00 00 FF 00 
37851 339 00 00 00 00 
37855 33a 00 00 00 18 
37859 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
3785d 33c 18 18 FF 18 
37861 33d 18 18 18 18 
37865 33e 18 18 18 63 
37869 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
3786d 340 36 63 63 7F 
37871 341 63 63 63 63 
37875 342 00 00 00 00 
37879 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
3787d 344 00 1E 30 3E 
37881 345 33 33 33 6E 
37885 346 00 00 00 6C 
37889 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
3788d 348 EC 0C FC 00 
37891 349 00 00 00 00 
37895 34a 00 00 00 00 
37899 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3789d 34c FC 0C EC 6C 
378a1 34d 6C 6C 6C 6C 
378a5 34e 6C 6C 6C 6C 
378a9 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
378ad 350 EF 00 FF 00 
378b1 351 00 00 00 00 
378b5 352 00 00 00 00 
378b9 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
378bd 354 FF 00 EF 6C 
378c1 355 6C 6C 6C 6C 
378c5 356 6C 6C 6C 6C 
378c9 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
378cd 358 EC 0C EC 6C 
378d1 359 6C 6C 6C 6C 
378d5 35a 6C 6C 6C 00 
378d9 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
378dd 35c FF 00 FF 00 
378e1 35d 00 00 00 00 
378e5 35e 00 00 00 6C 
378e9 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
378ed 360 EF 00 EF 6C 
378f1 361 6C 6C 6C 6C 
378f5 362 6C 6C 6C 00 
378f9 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
378fd 364 63 3E 63 63 
37901 365 63 63 3E 63 
37905 366 00 00 00 00 
37909 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
3790d 368 30 3C 36 33 
37911 369 33 33 33 6E 
37915 36a 00 00 00 00 
37919 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
3791d 36c 66 66 6F 66 
37921 36d 66 66 36 1F 
37925 36e 00 00 00 36 
37929 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
3792d 370 66 66 66 66 
37931 371 66 66       | 	byte	$66[6]
37933 371 36 1F 00 00 
37937 372 00 00 63 00 
3793b 373 7F 66 46 16 
3793f 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
37943 375 66 7F 00 00 
37947 376 00 6C 38 00 
3794b 377 38 30 30 3C 
3794f 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
37953 379 33 6E 00 00 
37957 37a 00 36 1C 00 
3795b 37b 63 67 6F 7F 
3795f 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
37963 37d 63 63 00 00 
37967 37e 00 30 18 00 
3796b 37f 3C 18 18 18 
3796f 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
37973 381 18 3C 00 00 
37977 382 00 3C 66 00 
3797b 383 3C 18 18 18 
3797f 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
37983 385 18 3C 00 00 
37987 386 00 00 00 36 
3798b 387 1C 08 00 3E 
3798f 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
37993 389 63 3E 00 00 
37997 38a 00 18 18 18 
3799b 38b 18 18 18 18 
3799f 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
379a3 38d 00 00 00 00 
379a7 38e 00 00 00 00 
379ab 38f 00 00 00 00 | 	byte	$00[12]
379af 390 F8 18 18 18 
379b3 391 18 18 18 18 
379b7 392 18 FF FF FF 
379bb 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
379bf 394 FF FF FF FF 
379c3 395 FF FF FF FF 
379c7 396 FF          | 	byte	$ff[9]
379c8 397 00 00 00 00 
379cc 398 00 00 00    | 	byte	$00[7]
379cf 398 FF FF FF FF 
379d3 399 FF FF FF FF 
379d7 39a FF          | 	byte	$ff[9]
379d8 39b 00 00 00 7E 
379dc 39c 7E 5A 18 18 
379e0 39d 18 18 18 18 
379e4 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
379e8 39f 1C 36 1C 63 
379ec 3a0 63 63 63 63 
379f0 3a1 63 63 63 63 
379f4 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
379f8 3a3 FF FF FF FF 
379fc 3a4 FF FF FF    | 	byte	$ff[7]
379ff 3a4 00 00 00 00 
37a03 3a5 00 00 00 00 
37a07 3a6 00          | 	byte	$00[9]
37a08 3a7 30 18 00 3E 
37a0c 3a8 63 63 63 63 
37a10 3a9 63 63 63 63 
37a14 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
37a18 3ab 00 00 00 1E 
37a1c 3ac 33 33 33 1B 
37a20 3ad 33 63 63 63 
37a24 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
37a28 3af 1C 36 00 3E 
37a2c 3b0 63 63 63 63 
37a30 3b1 63 63 63 63 
37a34 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
37a38 3b3 30 18 00 63 
37a3c 3b4 67 6F 7F 7B 
37a40 3b5 73 63 63 63 
37a44 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
37a48 3b7 00 00 60 30 
37a4c 3b8 18 00 3B 66 
37a50 3b9 66 66 66 66 
37a54 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
37a58 3bb 00 00 36 1C 
37a5c 3bc 08 00 3B 66 
37a60 3bd 66 66 66 66 
37a64 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
37a68 3bf 36 1C 00 3E 
37a6c 3c0 63 63 06 1C 
37a70 3c1 30 60 63 63 
37a74 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
37a78 3c3 00 00 36 1C 
37a7c 3c4 08 00 3E 63 
37a80 3c5 06 1C 30 63 
37a84 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
37a88 3c7 30 18 00 3F 
37a8c 3c8 66 66 66 3E 
37a90 3c9 36 66 66 66 
37a94 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
37a98 3cb 30 18 00 63 
37a9c 3cc 63 63 63 63 
37aa0 3cd 63 63 63 63 
37aa4 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
37aa8 3cf 00 00 60 30 
37aac 3d0 18 00 3B 6E 
37ab0 3d1 66 06 06 06 
37ab4 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
37ab8 3d3 66 33 00 63 
37abc 3d4 63 63 63 63 
37ac0 3d5 63 63 63 63 
37ac4 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
37ac8 3d7 00 00 60 30 
37acc 3d8 18 00 63 63 
37ad0 3d9 63 63 63 63 
37ad4 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
37ad8 3db 30 18 00 66 
37adc 3dc 66 66 66 3C 
37ae0 3dd 18 18 18 18 
37ae4 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
37ae8 3df 00 00 00 08 
37aec 3e0 0C 0C 3F 0C 
37af0 3e1 0C 0C 0C 6C 
37af4 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
37af8 3e3 30 18 00 00 
37afc 3e4 00 00 00 00 
37b00 3e5 00 00 00 00 
37b04 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37b08 3e7 00 00 00 00 
37b0c 3e8 00 00 00 00 | 	byte	$00[8]
37b10 3e9 7F 00 00 00 
37b14 3ea 00 00 00 00 
37b18 3eb 66 33 00 00 
37b1c 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
37b20 3ed 00 00 00 00 
37b24 3ee 00 00 00 00 
37b28 3ef 00 00 00 00 
37b2c 3f0 00 00 00 00 
37b30 3f1 00 00 00 00 
37b34 3f2 00          | 	byte	$00[21]
37b35 3f2 0C 06 3C 36 
37b39 3f3 1C 00 00 00 
37b3d 3f4 00 00 00 00 
37b41 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37b45 3f6 00 00 00 63 
37b49 3f7 3E 00 00 00 
37b4d 3f8 00 00 00 00 
37b51 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37b55 3fa 00 00 00 00 
37b59 3fb 3E 63 06 1C 
37b5d 3fc 36 63 63 36 
37b61 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
37b65 3fe 00 00 00 00 
37b69 3ff 00 00 00 00 | 	byte	$00[8]
37b6d 400 18 00 7E 00 
37b71 401 18 00 00 00 
37b75 402 00 00 00 00 
37b79 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37b7d 404 00 00 00 00 
37b81 405 00 00 00 00 | 	byte	$00[8]
37b85 406 18 30 1E 00 
37b89 407 00 00 1C 36 
37b8d 408 36 1C 00 00 
37b91 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
37b95 40a 00 00 00 00 
37b99 40b 63 00 00 00 
37b9d 40c 00 00 00 00 
37ba1 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37ba5 40e 00 00 00 18 
37ba9 40f 18 00 00 00 
37bad 410 00 00 00 00 
37bb1 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37bb5 412 00 00 00 00 
37bb9 413 00          | 	byte	$00[5]
37bba 413 CC 66 33 00 
37bbe 414 33 33 33 33 
37bc2 415 33 33 6E 00 
37bc6 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
37bca 417 00 3F 66 66 
37bce 418 66 3E 36 66 
37bd2 419 66 66 6F 00 
37bd6 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
37bda 41b 36 1C 08 00 
37bde 41c 3B 6E 66 06 
37be2 41d 06 06 0F 00 
37be6 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
37bea 41f 00 00 00 7E 
37bee 420 7E 7E 7E 7E 
37bf2 421 7E 7E 00 00 
37bf6 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
37bfa 423 00 00 00 00 
37bfe 424 00 00 00 00 
37c02 425 00 00 00 00 
37c06 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37c08 427 00 00 00 00 
      ...             
37c38 433 00 00 00 00 
37c3c 434 00 00 00    | st_font        file "st4font.def"
37c3f 434 FF FF 00 00 
37c43 435 00 00 00 00 
37c47 436 00 18 18 18 
37c4b 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
37c4f 438 18 18 18 18 
37c53 439 18 18 18 18 
37c57 43a 18          | 	byte	$18[9]
37c58 43b 00 00 00 00 
37c5c 43c 00 00 00    | 	byte	$00[7]
37c5f 43c FF FF 18 18 
37c63 43d 18 18 18 18 
37c67 43e 18 18 18 18 
37c6b 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
37c6f 440 FF FF 00 00 
37c73 441 00 00 00 00 
37c77 442 00 18 18 18 
37c7b 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
37c7f 444 1F 1F 18 18 
37c83 445 18 18 18 18 
37c87 446 18 18 18 18 
37c8b 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
37c8f 448 F8 F8 18 18 
37c93 449 18 18 18 18 
37c97 44a 18 00 00 00 
37c9b 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
37c9f 44c 1F 1F 18 18 
37ca3 44d 18 18 18 18 
37ca7 44e 18 00 00 00 
37cab 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
37caf 450 F8 F8 18 18 
37cb3 451 18 18 18 18 
37cb7 452 18 18 18 18 
37cbb 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
37cbf 454 1F 1F 00 00 
37cc3 455 00 00 00 00 
37cc7 456 00 18 18 18 
37ccb 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
37ccf 458 F8 F8 00 00 
37cd3 459 00 00 00 00 
37cd7 45a 00 18 18 18 
37cdb 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
37cdf 45c FF FF 18 18 
37ce3 45d 18 18 18 18 
37ce7 45e 18 00 00 18 
37ceb 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
37cef 460 66 7E 7E 66 
37cf3 461 66 66 66 30 
37cf7 462 18 00 00 7E 
37cfb 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
37cff 464 3E 06 06 06 
37d03 465 06 7E 7E 18 
37d07 466 0C 30 18 3C 
37d0b 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
37d0f 468 06 06 06 66 
37d13 469 66 7E 3C 00 
37d17 46a 00 30 18 66 
37d1b 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
37d1f 46c 7E 7E 76 76 
37d23 46d 66 66 66 00 
37d27 46e 00 30 18 7C 
37d2b 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
37d2f 470 1C 38 70 60 
37d33 471 60 7E 3E 00 
37d37 472 00 30 18 7E 
37d3b 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
37d3f 474 18 0C 0C 06 
37d43 475 06 7E 7E 00 
37d47 476 00 18 18 00 
37d4b 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
37d4f 478 18 18 0C 0C 
37d53 479 06 7E 7E 00 
37d57 47a 00 30 18 3C 
37d5b 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
37d5f 47c 66 66 66 66 
37d63 47d 66          | 	byte	$66[5]
37d64 47e 7E 3C 00 00 
37d68 47f 00 00 06 06 
37d6c 480 06 06 16 1E 
37d70 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
37d74 482 7E 7E 00 00 
37d78 483 00 00 00 00 
37d7c 484 00 3C 7C 60 
37d80 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
37d84 486 7E 7C 30 18 
37d88 487 00 00 00 00 
37d8c 488 00 3C 7E 66 
37d90 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
37d94 48a 7E 7C 18 0C 
37d98 48b 00 00 30 18 
37d9c 48c 00 3C 3E 06 
37da0 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
37da4 48e 7E 7C 00 00 
37da8 48f 00 00 30 18 
37dac 490 00 3E 7E 66 
37db0 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
37db4 492 66 66 00 00 
37db8 493 00 00 30 18 
37dbc 494 00 7C 7E 06 
37dc0 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
37dc4 496 7E 3E 00 00 
37dc8 497 00 00 30 18 
37dcc 498 00 7E 7E 30 
37dd0 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
37dd4 49a 7E 7E 00 00 
37dd8 49b 00 00 18 18 
37ddc 49c 00 7E 7E 30 
37de0 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
37de4 49e 7E 7E 00 00 
37de8 49f 00 00 30 18 
37dec 4a0 00 3C 7E 66 
37df0 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
37df4 4a2 7E 3C 00 00 
37df8 4a3 00 00 1C 1C 
37dfc 4a4 18 18 38 3C 
37e00 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
37e04 4a6 3C 3C 00 00 
37e08 4a7 00 00 00 00 
37e0c 4a8 00 00 00 00 
37e10 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37e14 4aa 00 00 00 00 
37e18 4ab 00 00       | 	byte	$00[6]
37e1a 4ab 18 18 18 18 
37e1e 4ac 18 18 18 18 | 	byte	$18[8]
37e22 4ad 00 00 18 18 
37e26 4ae 00 00 00 00 
37e2a 4af 66 66 66 66 
37e2e 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
37e32 4b1 00 00 00 00 
37e36 4b2 00 00 00 00 
37e3a 4b3 00          | 	byte	$00[9]
37e3b 4b3 66 66 FF FF 
37e3f 4b4 66 66 FF FF 
37e43 4b5 66 66 00 00 
37e47 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
37e4b 4b7 7C 7E 06 06 
37e4f 4b8 3E 7C 60 60 
37e53 4b9 7E 3E 18 18 
37e57 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
37e5b 4bb 66 30 30 18 
37e5f 4bc 18 0C 0C 66 
37e63 4bd 66 00 00 00 
37e67 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
37e6b 4bf 66 66 3C 1C 
37e6f 4c0 1C FC FE 66 
37e73 4c1 66 FE FC 00 
37e77 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
37e7b 4c3 18 18 18 18 
37e7f 4c4 00 00 00 00 
37e83 4c5 00 00 00 00 
37e87 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
37e8b 4c7 18 1C 0C 0C 
37e8f 4c8 0C 0C 0C 0C 
37e93 4c9 1C 18 30 00 
37e97 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
37e9b 4cb 18 38 30 30 
37e9f 4cc 30 30 30 30 
37ea3 4cd 38 18 0C 00 
37ea7 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
37eab 4cf 66 66 3C 3C 
37eaf 4d0 FF FF 3C 3C 
37eb3 4d1 66 66 00 00 
37eb7 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
37ebb 4d3 00 18 18 18 
37ebf 4d4 7E 7E 18 18 
37ec3 4d5 18 00 00 00 
37ec7 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
37ecb 4d7 00 00 00 00 
37ecf 4d8 00 00       | 	byte	$00[6]
37ed1 4d9 18 18 18 18 
37ed5 4da 18          | 	byte	$18[5]
37ed6 4da 0C 04 00 00 
37eda 4db 00 00 00 00 
37ede 4dc 7E 7E 00 00 
37ee2 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
37ee6 4de 00 00 00 00 
37eea 4df 00 00 00 00 
37eee 4e0 00 00 00 00 
37ef2 4e1 00          | 	byte	$00[13]
37ef3 4e1 18 18 18 00 
37ef7 4e2 00 00 00 60 
37efb 4e3 60 60 30 30 
37eff 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
37f03 4e5 06 06 06 00 
37f07 4e6 00 00 00 3C 
37f0b 4e7 7E 66 66 66 
37f0f 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
37f13 4e9 66 7E 3C 00 
37f17 4ea 00 00 00 18 
37f1b 4eb 18 1C 1C 18 
37f1f 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
37f23 4ed 18 7E 7E 00 
37f27 4ee 00 00 00 3C 
37f2b 4ef 7E 66 66 30 
37f2f 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
37f33 4f1 0C 7E 7E 00 
37f37 4f2 00 00 00 7E 
37f3b 4f3 7E 30 30 18 
37f3f 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
37f43 4f5 66 7E 3C 00 
37f47 4f6 00 00 00 30 
37f4b 4f7 30 38 38 3C 
37f4f 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
37f53 4f9 7E 30 30 00 
37f57 4fa 00 00 00 7E 
37f5b 4fb 7E 06 06 3E 
37f5f 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
37f63 4fd 66 7E 3C 00 
37f67 4fe 00 00 00 38 
37f6b 4ff 3C 0E 06 06 
37f6f 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
37f73 501 66 7E 3C 00 
37f77 502 00 00 00 7E 
37f7b 503 7E 60 60 30 
37f7f 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
37f83 505 0C 0C 0C 00 
37f87 506 00 00 00 3C 
37f8b 507 7E 66 66 3C 
37f8f 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
37f93 509 66 7E 3C 00 
37f97 50a 00 00 00 3C 
37f9b 50b 7E 66 66 7E 
37f9f 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
37fa3 50d 70 3C 1C 00 
37fa7 50e 00 00 00 00 
37fab 50f 00 00 18 18 
37faf 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
37fb3 511 18 18 18 00 
37fb7 512 00 00 00 00 
37fbb 513 00 00 18 18 
37fbf 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
37fc3 515 18 18 18 0C 
37fc7 516 04 00 00 00 
37fcb 517 70 38 1C 0E 
37fcf 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
37fd3 519 70 00 00 00 
37fd7 51a 00 00 00 00 
37fdb 51b 00 00 7E 7E 
37fdf 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
37fe3 51d 00 00 00 00 
37fe7 51e 00 00 00 00 | 	byte	$00[8]
37feb 51f 0E 1C 38 70 
37fef 520 E0 70 38 1C 
37ff3 521 0E 00 00 00 
37ff7 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
37ffb 523 7E 66 66 30 
37fff 524 30 18 18 18 
38003 525 00 18 18 00 
38007 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
3800b 527 7E 66 66 66 
3800f 528 66 36 06 66 
38013 529 66 7E 3C 00 
38017 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
3801b 52b 3C 7E 66 66 
3801f 52c 66 7E 7E 66 
38023 52d 66 66 66 00 
38027 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
3802b 52f 7E 66 66 7E 
3802f 530 3E 66 66 66 
38033 531 66 7E 3E 00 
38037 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
3803b 533 7E 66 66 06 
3803f 534 06 06 06 66 
38043 535 66 7E 3C 00 
38047 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
3804b 537 7E 66 66 66 
3804f 538 66 66 66 66 
38053 539 66 7E 3E 00 
38057 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
3805b 53b 7E 06 06 3E 
3805f 53c 3E 06 06 06 
38063 53d 06 7E 7E 00 
38067 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
3806b 53f 7E 06 06 3E 
3806f 540 3E 06 06 06 
38073 541 06 06 06 00 
38077 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
3807b 543 7E 06 06 76 
3807f 544 76 66 66 66 
38083 545 66 7E 3C 00 
38087 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
3808b 547 66 66 66 7E 
3808f 548 7E 66 66 66 
38093 549 66 66 66 00 
38097 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
3809b 54b 7E 18 18 18 
3809f 54c 18 18 18 18 
380a3 54d 18 7E 7E 00 
380a7 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
380ab 54f 60 60 60 60 
380af 550 60 60 60    | 	byte	$60[7]
380b2 551 66 66 7E 3C 
380b6 552 00 00 00 00 
380ba 553 66 66 36 36 
380be 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
380c2 555 66 66 C6 C6 
380c6 556 00 00 00 00 
380ca 557 06 06 06 06 
380ce 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
380d2 559 06 06 7E 7E 
380d6 55a 00 00 00 00 
380da 55b C6 C6 EE EE 
380de 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
380e2 55d C6 C6 C6 C6 
380e6 55e 00 00 00 00 
380ea 55f 66 66 66 6E 
380ee 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
380f2 561 76 66 66 66 
380f6 562 00 00 00 00 
380fa 563 3C 7E 66 66 
380fe 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
38102 565 66 66 7E 3C 
38106 566 00 00 00 00 
3810a 567 3E 7E 66 66 
3810e 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
38112 569 06 06 06 06 
38116 56a 00 00 00 00 
3811a 56b 3C 7E 66 66 
3811e 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
38122 56d 66 56 3E 6C 
38126 56e 00 00 00 00 
3812a 56f 3E 7E 66 66 
3812e 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
38132 571 66 66 C6 C6 
38136 572 00 00 00 00 
3813a 573 7C 7E 06 06 
3813e 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
38142 575 60 60 7E 3E 
38146 576 00 00 00 00 
3814a 577 7E 7E 18 18 
3814e 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
38152 579 18 18 18 18 
38156 57a 00 00 00 00 
3815a 57b 66 66 66 66 
3815e 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
38162 57d 66 66 7E 3C 
38166 57e 00 00 00 00 
3816a 57f 66 66 66 66 
3816e 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
38172 581 3C 3C 18 18 
38176 582 00 00 00 00 
3817a 583 C6 C6 C6 C6 
3817e 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
38182 585 FE EE C6 82 
38186 586 00 00 00 00 
3818a 587 66 66 66 3C 
3818e 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
38192 589 3C 66 66 66 
38196 58a 00 00 00 00 
3819a 58b 66 66 66 66 
3819e 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
381a2 58d 18 18 18 18 
381a6 58e 00 00 00 00 
381aa 58f 7E 7E 30 30 
381ae 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
381b2 591 06 06 7E 7E 
381b6 592 00 00 00 00 
381ba 593 3C 3C 0C 0C 
381be 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
381c2 595 0C 0C 3C 3C 
381c6 596 00 00 00 00 
381ca 597 06 06 0C 0C 
381ce 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
381d2 599 60 60 C0 C0 
381d6 59a 00 00 00 00 
381da 59b 3C 3C 30 30 
381de 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
381e2 59d 30 30 3C 3C 
381e6 59e 00 00 00 00 
381ea 59f 18 18 3C 3C 
381ee 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
381f2 5a1 00 00 00 00 
381f6 5a2 00 00 00 00 
381fa 5a3 00 00 00 00 
381fe 5a4 00 00 00 00 
38202 5a5 00 00       | 	byte	$00[18]
38204 5a6 FE FE 00 00 
38208 5a7 00 00 0C 0C 
3820c 5a8 18 18 00 00 
38210 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
38214 5aa 00 00 00 00 
38218 5ab 00 00 00 00 
3821c 5ac 00          | 	byte	$00[9]
3821d 5ac 3C 7C 60 7C 
38221 5ad 7E 66 66 7E 
38225 5ae 7C 00 00 00 
38229 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
3822d 5b0 3E 7E 66 66 
38231 5b1 66 66 66 7E 
38235 5b2 3E 00 00 00 
38239 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
3823d 5b4 3C 3E 06 06 
38241 5b5 06 06 06 7E 
38245 5b6 7C 00 00 00 
38249 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
3824d 5b8 7C 7E 66 66 
38251 5b9 66 66 66 7E 
38255 5ba 7C 00 00 00 
38259 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
3825d 5bc 3C 7E 66 66 
38261 5bd 7E 06 06 7E 
38265 5be 7C 00 00 00 
38269 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
3826d 5c0 18 7E 7E 18 
38271 5c1 18 18 18 18 
38275 5c2 18 00 00 00 
38279 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3827d 5c4 7C 7E 66 66 
38281 5c5 66 66 7E 7C 
38285 5c6 60 7E 3E 00 
38289 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
3828d 5c8 3E 7E 66 66 
38291 5c9 66 66 66 66 
38295 5ca 66 00 00 00 
38299 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
3829d 5cc 1C 1C 18 18 
382a1 5cd 18 18 18 3C 
382a5 5ce 3C 00 00 00 
382a9 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
382ad 5d0 30 30 30 30 
382b1 5d1 30 30 30 30 
382b5 5d2 30          | 	byte	$30[9]
382b6 5d2 3E 1E 00 00 
382ba 5d3 06 06 06 36 
382be 5d4 36 1E 1E 1E 
382c2 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
382c6 5d6 00 00 00 00 
382ca 5d7 1C 1C 18 18 
382ce 5d8 18 18 18 18 
382d2 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
382d6 5da 00 00 00 00 
382da 5db 00 00 00    | 	byte	$00[7]
382dd 5dc 6C FE FE D6 
382e1 5dd D6 C6 C6 C6 
382e5 5de C6 00 00 00 
382e9 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
382ed 5e0 3E 7E 66 66 
382f1 5e1 66 66 66 66 
382f5 5e2 66 00 00 00 
382f9 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
382fd 5e4 3C 7E 66 66 
38301 5e5 66 66 66 7E 
38305 5e6 3C 00 00 00 
38309 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
3830d 5e8 3E 7E 66 66 
38311 5e9 66 66 66 7E 
38315 5ea 3E 06 06 00 
38319 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
3831d 5ec 7C 7E 66 66 
38321 5ed 66 66 66 7E 
38325 5ee 7C 60 60 00 
38329 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
3832d 5f0 3E 7E 66 06 
38331 5f1 06 06 06 06 
38335 5f2 06 00 00 00 
38339 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
3833d 5f4 7C 7E 06 0E 
38341 5f5 3C 70 60 7E 
38345 5f6 3E 00 00 00 
38349 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
3834d 5f8 7E 7E 18 18 
38351 5f9 18 18 18 78 
38355 5fa 70 00 00 00 
38359 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
3835d 5fc 66 66 66 66 
38361 5fd 66 66 66    | 	byte	$66[7]
38364 5fe 7E 7C 00 00 
38368 5ff 00 00 00 00 
3836c 600 00 66 66 66 
38370 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
38374 602 18 18 00 00 
38378 603 00 00 00 00 
3837c 604 00 C6 C6 D6 
38380 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
38384 606 C6 82 00 00 
38388 607 00 00 00 00 
3838c 608 00 66 66 3C 
38390 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
38394 60a 66 66 00 00 
38398 60b 00 00 00 00 
3839c 60c 00 66 66 66 
383a0 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
383a4 60e 7C 60 7E 3E 
383a8 60f 00 00 00 00 
383ac 610 00 7E 7E 30 
383b0 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
383b4 612 7E 7E 00 00 
383b8 613 00 00 30 18 
383bc 614 18 18 18 0C 
383c0 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
383c4 616 18 30 00 00 
383c8 617 00 00 18 18 
383cc 618 18 18 18 18 
383d0 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
383d4 61a 18 18 00 00 
383d8 61b 00 00 0C 18 
383dc 61c 18 18 18 30 
383e0 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
383e4 61e 18 0C 00 00 
383e8 61f 00 00 6C 7E 
383ec 620 36 00 00 00 
383f0 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
383f4 622 00 00 00 00 
383f8 623 00 00 00 00 
383fc 624 00          | 	byte	$00[9]
383fd 624 18 18 18 18 
38401 625 18 18 00 00 
38405 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
38408 627 00 6C FE FE 
3840c 628 7C 38 10 00 
38410 629 18 18 18 F8 
38414 62a F8 18 18 18 | a8_font        file "atari8.fnt"
38418 62b C0 C0 C0 C0 
3841c 62c C0 C0 C0 C0 | 	byte	$c0[8]
38420 62d 18 18 18 1F 
38424 62e 1F 00 00 00 
38428 62f 18 18 18 1F 
3842c 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
38430 631 00 00 00 1F 
38434 632 1F 18 18 18 
38438 633 C0 E0 70 38 
3843c 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
38440 635 03 07 0E 1C 
38444 636 38 70 E0 C0 
38448 637 80 C0 E0 F0 
3844c 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
38450 639 00 00 00 00 
38454 63a F0 F0 F0 F0 
38458 63b 01 03 07 0F 
3845c 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
38460 63d F0 F0 F0 F0 
38464 63e 00 00 00 00 
38468 63f 0F 0F 0F 0F 
3846c 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
38470 641 FF FF 00 00 
38474 642 00 00 00 00 
38478 643 00 00 00 00 
3847c 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
38480 645 00 00 00 00 
38484 646 0F 0F 0F 0F 
38488 647 00 38 38 EE 
3848c 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
38490 649 00 00 00 F8 
38494 64a F8 18 18 18 
38498 64b 00 00 00 FF 
3849c 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
384a0 64d 18 18 18 FF 
384a4 64e FF 18 18 18 
384a8 64f 00 00 3C 7E 
384ac 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
384b0 651 00 00 00 00 
384b4 652 FF FF FF FF 
384b8 653 03 03 03 03 
384bc 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
384c0 655 00 00 00 FF 
384c4 656 FF 18 18 18 
384c8 657 18 18 18 FF 
384cc 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
384d0 659 0F 0F 0F 0F 
384d4 65a 0F 0F 0F 0F | 	byte	$0f[8]
384d8 65b 18 18 18 F8 
384dc 65c F8 00 00 00 
384e0 65d 1E 06 1E 06 
384e4 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
384e8 65f 00 18 3C 7E 
384ec 660 18 18 18 00 
384f0 661 00 18 18 18 
384f4 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
384f8 663 00 18 0C 7E 
384fc 664 0C 18 00 00 
38500 665 00 18 30 7E 
38504 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
38508 667 00 00 00 00 
3850c 668 00 00 00 00 
38510 669 00          | 	byte	$00[9]
38511 669 18 18 18 18 
38515 66a 00 18 00 00 
38519 66b 66 66 66 00 
3851d 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
38521 66d 66 FF 66 66 
38525 66e FF 66 00 18 
38529 66f 7C 06 3C 60 
3852d 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
38531 671 66 36 18 0C 
38535 672 66 62 00 38 
38539 673 6C 38 1C F6 
3853d 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
38541 675 18 18 18 00 
38545 676 00 00 00 00 
38549 677 70 38 18 18 
3854d 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
38551 679 0E 1C 18 18 
38555 67a 1C 0E 00 00 
38559 67b 66 3C FF 3C 
3855d 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
38561 67d 18 18 7E 18 
38565 67e 18 00 00 00 
38569 67f 00 00 00 00 
3856d 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
38571 681 00 00 7E 00 
38575 682 00 00 00 00 
38579 683 00 00 00 00 
3857d 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
38581 685 60 30 18 0C 
38585 686 06 02 00 00 
38589 687 3C 66 76 6E 
3858d 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
38591 689 18 1C 18 18 
38595 68a 18 7E 00 00 
38599 68b 3C 66 30 18 
3859d 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
385a1 68d 7E 30 18 30 
385a5 68e 66 3C 00 00 
385a9 68f 30 38 3C 36 
385ad 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
385b1 691 7E 06 3E 60 
385b5 692 66 3C 00 00 
385b9 693 3C 06 3E 66 
385bd 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
385c1 695 7E 60 30 18 
385c5 696 0C 0C 00 00 
385c9 697 3C 66 3C 66 
385cd 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
385d1 699 3C 66 7C 60 
385d5 69a 30 1C 00 00 
385d9 69b 00 18 18 00 
385dd 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
385e1 69d 00 18 18 00 
385e5 69e 18 18 0C 60 
385e9 69f 30 18 0C 18 
385ed 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
385f1 6a1 00 7E 00 00 
385f5 6a2 7E 00 00 06 
385f9 6a3 0C 18 30 18 
385fd 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
38601 6a5 3C 66 30 18 
38605 6a6 00 18 00 00 
38609 6a7 3C 66 76 76 
3860d 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
38611 6a9 18 3C 66 66 
38615 6aa 7E 66 00 00 
38619 6ab 3E 66 3E 66 
3861d 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
38621 6ad 3C 66 06 06 
38625 6ae 66 3C 00 00 
38629 6af 1E 36 66 66 
3862d 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
38631 6b1 7E 06 3E 06 
38635 6b2 06 7E 00 00 
38639 6b3 7E 06 3E 06 
3863d 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
38641 6b5 7C 06 06 76 
38645 6b6 66 7C 00 00 
38649 6b7 66 66 7E 66 
3864d 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
38651 6b9 7E 18 18 18 
38655 6ba 18 7E 00 00 
38659 6bb 60 60 60 60 
3865d 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
38661 6bd 66 36 1E 1E 
38665 6be 36 66 00 00 
38669 6bf 06 06 06 06 
3866d 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
38671 6c1 C6 EE FE D6 
38675 6c2 C6 C6 00 00 
38679 6c3 66 6E 7E 7E 
3867d 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
38681 6c5 3C 66 66 66 
38685 6c6 66 3C 00 00 
38689 6c7 3E 66 66 3E 
3868d 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
38691 6c9 3C 66 66 66 
38695 6ca 36 6C 00 00 
38699 6cb 3E 66 66 3E 
3869d 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
386a1 6cd 3C 06 3C 60 
386a5 6ce 60 3C 00 00 
386a9 6cf 7E 18 18 18 
386ad 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
386b1 6d1 66 66 66 66 
386b5 6d2 66          | 	byte	$66[5]
386b6 6d2 7E 00 00 66 
386ba 6d3 66 66 66 3C 
386be 6d4 18 00 00 C6 
386c2 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
386c6 6d6 C6 00 00 66 
386ca 6d7 66 3C 3C 66 
386ce 6d8 66 00 00 66 
386d2 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
386d6 6da 18 00 00 7E 
386da 6db 30 18 0C 06 
386de 6dc 7E 00 00 78 
386e2 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
386e6 6de 78 00 00 02 
386ea 6df 06 0C 18 30 
386ee 6e0 60 00 00 1E 
386f2 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
386f6 6e2 1E 00 00 10 
386fa 6e3 38 6C C6 00 
386fe 6e4 00 00 00 00 
38702 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
38706 6e6 FF 00 00 18 
3870a 6e7 3C 7E 7E 3C 
3870e 6e8 18 00 00 00 
38712 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
38716 6ea 7C 00 00 06 
3871a 6eb 06 3E 66 66 
3871e 6ec 3E 00 00 00 
38722 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
38726 6ee 3C 00 00 60 
3872a 6ef 60 7C 66 66 
3872e 6f0 7C 00 00 00 
38732 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
38736 6f2 3C 00 00 70 
3873a 6f3 18 7C 18 18 
3873e 6f4 18 00 00 00 
38742 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
38746 6f6 60 3E 00 06 
3874a 6f7 06 3E 66 66 
3874e 6f8 66 00 00 18 
38752 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
38756 6fa 3C 00 00 60 
3875a 6fb 00 60 60 60 
3875e 6fc 60 3C 00 06 
38762 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
38766 6fe 66 00 00 1C 
3876a 6ff 18 18 18 18 
3876e 700 3C 00 00 00 
38772 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
38776 702 C6 00 00 00 
3877a 703 3E 66 66 66 
3877e 704 66 00 00 00 
38782 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
38786 706 3C 00 00 00 
3878a 707 3E 66 66 3E 
3878e 708 06 06 00 00 
38792 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
38796 70a 60 60 00 00 
3879a 70b 3E 66 06 06 
3879e 70c 06 00 00 00 
387a2 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
387a6 70e 3E 00 00 18 
387aa 70f 7E 18 18 18 
387ae 710 70 00 00 00 
387b2 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
387b6 712 7C 00 00 00 
387ba 713 66 66 66 3C 
387be 714 18 00 00 00 
387c2 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
387c6 716 6C 00 00 00 
387ca 717 66 3C 18 3C 
387ce 718 66 00 00 00 
387d2 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
387d6 71a 30 1E 00 00 
387da 71b 7E 30 18 0C 
387de 71c 7E 00 00 18 
387e2 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
387e6 71e 3C 00 18 18 
387ea 71f 18 18 18 18 
387ee 720 18 18 00 7E 
387f2 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
387f6 722 60 00 10 18 
387fa 723 1C 1E 1C 18 
387fe 724 10 00 08 18 
38802 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
38806 726 08 00       | 	byte	$08, $00
38808 727 00 6C FE FE 
3880c 728 7C 38 10 00 
38810 729 18 18 18 F8 
38814 72a F8 18 18 18 | a8_font2       file "atari8.fnt"
38818 72b C0 C0 C0 C0 
3881c 72c C0 C0 C0 C0 | 	byte	$c0[8]
38820 72d 18 18 18 1F 
38824 72e 1F 00 00 00 
38828 72f 18 18 18 1F 
3882c 730 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
38830 731 00 00 00 1F 
38834 732 1F 18 18 18 
38838 733 C0 E0 70 38 
3883c 734 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
38840 735 03 07 0E 1C 
38844 736 38 70 E0 C0 
38848 737 80 C0 E0 F0 
3884c 738 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
38850 739 00 00 00 00 
38854 73a F0 F0 F0 F0 
38858 73b 01 03 07 0F 
3885c 73c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
38860 73d F0 F0 F0 F0 
38864 73e 00 00 00 00 
38868 73f 0F 0F 0F 0F 
3886c 740 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
38870 741 FF FF 00 00 
38874 742 00 00 00 00 
38878 743 00 00 00 00 
3887c 744 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
38880 745 00 00 00 00 
38884 746 0F 0F 0F 0F 
38888 747 00 38 38 EE 
3888c 748 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
38890 749 00 00 00 F8 
38894 74a F8 18 18 18 
38898 74b 00 00 00 FF 
3889c 74c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
388a0 74d 18 18 18 FF 
388a4 74e FF 18 18 18 
388a8 74f 00 00 3C 7E 
388ac 750 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
388b0 751 00 00 00 00 
388b4 752 FF FF FF FF 
388b8 753 03 03 03 03 
388bc 754 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
388c0 755 00 00 00 FF 
388c4 756 FF 18 18 18 
388c8 757 18 18 18 FF 
388cc 758 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
388d0 759 0F 0F 0F 0F 
388d4 75a 0F 0F 0F 0F | 	byte	$0f[8]
388d8 75b 18 18 18 F8 
388dc 75c F8 00 00 00 
388e0 75d 1E 06 1E 06 
388e4 75e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
388e8 75f 00 18 3C 7E 
388ec 760 18 18 18 00 
388f0 761 00 18 18 18 
388f4 762 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
388f8 763 00 18 0C 7E 
388fc 764 0C 18 00 00 
38900 765 00 18 30 7E 
38904 766 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
38908 767 00 00 00 00 
3890c 768 00 00 00 00 
38910 769 00          | 	byte	$00[9]
38911 769 18 18 18 18 
38915 76a 00 18 00 00 
38919 76b 66 66 66 00 
3891d 76c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
38921 76d 66 FF 66 66 
38925 76e FF 66 00 18 
38929 76f 7C 06 3C 60 
3892d 770 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
38931 771 66 36 18 0C 
38935 772 66 62 00 38 
38939 773 6C 38 1C F6 
3893d 774 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
38941 775 18 18 18 00 
38945 776 00 00 00 00 
38949 777 70 38 18 18 
3894d 778 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
38951 779 0E 1C 18 18 
38955 77a 1C 0E 00 00 
38959 77b 66 3C FF 3C 
3895d 77c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
38961 77d 18 18 7E 18 
38965 77e 18 00 00 00 
38969 77f 00 00 00 00 
3896d 780 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
38971 781 00 00 7E 00 
38975 782 00 00 00 00 
38979 783 00 00 00 00 
3897d 784 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
38981 785 60 30 18 0C 
38985 786 06 02 00 00 
38989 787 3C 66 76 6E 
3898d 788 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
38991 789 18 1C 18 18 
38995 78a 18 7E 00 00 
38999 78b 3C 66 30 18 
3899d 78c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
389a1 78d 7E 30 18 30 
389a5 78e 66 3C 00 00 
389a9 78f 30 38 3C 36 
389ad 790 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
389b1 791 7E 06 3E 60 
389b5 792 66 3C 00 00 
389b9 793 3C 06 3E 66 
389bd 794 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
389c1 795 7E 60 30 18 
389c5 796 0C 0C 00 00 
389c9 797 3C 66 3C 66 
389cd 798 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
389d1 799 3C 66 7C 60 
389d5 79a 30 1C 00 00 
389d9 79b 00 18 18 00 
389dd 79c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
389e1 79d 00 18 18 00 
389e5 79e 18 18 0C 60 
389e9 79f 30 18 0C 18 
389ed 7a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
389f1 7a1 00 7E 00 00 
389f5 7a2 7E 00 00 06 
389f9 7a3 0C 18 30 18 
389fd 7a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
38a01 7a5 3C 66 30 18 
38a05 7a6 00 18 00 00 
38a09 7a7 3C 66 76 76 
38a0d 7a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
38a11 7a9 18 3C 66 66 
38a15 7aa 7E 66 00 00 
38a19 7ab 3E 66 3E 66 
38a1d 7ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
38a21 7ad 3C 66 06 06 
38a25 7ae 66 3C 00 00 
38a29 7af 1E 36 66 66 
38a2d 7b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
38a31 7b1 7E 06 3E 06 
38a35 7b2 06 7E 00 00 
38a39 7b3 7E 06 3E 06 
38a3d 7b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
38a41 7b5 7C 06 06 76 
38a45 7b6 66 7C 00 00 
38a49 7b7 66 66 7E 66 
38a4d 7b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
38a51 7b9 7E 18 18 18 
38a55 7ba 18 7E 00 00 
38a59 7bb 60 60 60 60 
38a5d 7bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
38a61 7bd 66 36 1E 1E 
38a65 7be 36 66 00 00 
38a69 7bf 06 06 06 06 
38a6d 7c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
38a71 7c1 C6 EE FE D6 
38a75 7c2 C6 C6 00 00 
38a79 7c3 66 6E 7E 7E 
38a7d 7c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
38a81 7c5 3C 66 66 66 
38a85 7c6 66 3C 00 00 
38a89 7c7 3E 66 66 3E 
38a8d 7c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
38a91 7c9 3C 66 66 66 
38a95 7ca 36 6C 00 00 
38a99 7cb 3E 66 66 3E 
38a9d 7cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
38aa1 7cd 3C 06 3C 60 
38aa5 7ce 60 3C 00 00 
38aa9 7cf 7E 18 18 18 
38aad 7d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
38ab1 7d1 66 66 66 66 
38ab5 7d2 66          | 	byte	$66[5]
38ab6 7d2 7E 00 00 66 
38aba 7d3 66 66 66 3C 
38abe 7d4 18 00 00 C6 
38ac2 7d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
38ac6 7d6 C6 00 00 66 
38aca 7d7 66 3C 3C 66 
38ace 7d8 66 00 00 66 
38ad2 7d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
38ad6 7da 18 00 00 7E 
38ada 7db 30 18 0C 06 
38ade 7dc 7E 00 00 78 
38ae2 7dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
38ae6 7de 78 00 00 02 
38aea 7df 06 0C 18 30 
38aee 7e0 60 00 00 1E 
38af2 7e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
38af6 7e2 1E 00 00 10 
38afa 7e3 38 6C C6 00 
38afe 7e4 00 00 00 00 
38b02 7e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
38b06 7e6 FF 00 00 18 
38b0a 7e7 3C 7E 7E 3C 
38b0e 7e8 18 00 00 00 
38b12 7e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
38b16 7ea 7C 00 00 06 
38b1a 7eb 06 3E 66 66 
38b1e 7ec 3E 00 00 00 
38b22 7ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
38b26 7ee 3C 00 00 60 
38b2a 7ef 60 7C 66 66 
38b2e 7f0 7C 00 00 00 
38b32 7f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
38b36 7f2 3C 00 00 70 
38b3a 7f3 18 7C 18 18 
38b3e 7f4 18 00 00 00 
38b42 7f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
38b46 7f6 60 3E 00 06 
38b4a 7f7 06 3E 66 66 
38b4e 7f8 66 00 00 18 
38b52 7f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
38b56 7fa 3C 00 00 60 
38b5a 7fb 00 60 60 60 
38b5e 7fc 60 3C 00 06 
38b62 7fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
38b66 7fe 66 00 00 1C 
38b6a 7ff 18 18 18 18 
38b6e 800 3C 00 00 00 
38b72 801 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
38b76 802 C6 00 00 00 
38b7a 803 3E 66 66 66 
38b7e 804 66 00 00 00 
38b82 805 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
38b86 806 3C 00 00 00 
38b8a 807 3E 66 66 3E 
38b8e 808 06 06 00 00 
38b92 809 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
38b96 80a 60 60 00 00 
38b9a 80b 3E 66 06 06 
38b9e 80c 06 00 00 00 
38ba2 80d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
38ba6 80e 3E 00 00 18 
38baa 80f 7E 18 18 18 
38bae 810 70 00 00 00 
38bb2 811 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
38bb6 812 7C 00 00 00 
38bba 813 66 66 66 3C 
38bbe 814 18 00 00 00 
38bc2 815 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
38bc6 816 6C 00 00 00 
38bca 817 66 3C 18 3C 
38bce 818 66 00 00 00 
38bd2 819 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
38bd6 81a 30 1E 00 00 
38bda 81b 7E 30 18 0C 
38bde 81c 7E 00 00 18 
38be2 81d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
38be6 81e 3C 00 18 18 
38bea 81f 18 18 18 18 
38bee 820 18 18 00 7E 
38bf2 821 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
38bf6 822 60 00 10 18 
38bfa 823 1C 1E 1C 18 
38bfe 824 10 00 08 18 
38c02 825 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
38c06 826 08 00       | 	byte	$08, $00
38c08 827 00 00 00 00 
      ...             
38e14 8aa 00 00 00 00 
38e18 8ab 00 00       | amiga_font     file "amigafont.def"
38e1a 8ab 18 18 18 18 
38e1e 8ac 18 18       | 	byte	$18[6]
38e20 8ad 00 18 18 00 
38e24 8ae 00 00 00 00 
38e28 8af 00 00 66 66 
38e2c 8b0 66 00 00 00 | 	byte	$00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $00, $00, $00
38e30 8b1 00 00 00 00 
38e34 8b2 00 00 00 00 
38e38 8b3 00 00       | 	byte	$00[10]
38e3a 8b3 36 36 7F 36 
38e3e 8b4 36 36 7F 36 
38e42 8b5 36 00 00 00 
38e46 8b6 00 00 00 00 | 	byte	$36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $00, $00, $00
38e4a 8b7 18 7C 06 06 
38e4e 8b8 3C 60 60 3E 
38e52 8b9 18 00 00 00 
38e56 8ba 00 00 00 00 | 	byte	$18, $7c, $06, $06, $3c, $60, $60, $3e, $18, $00, $00, $00, $00, $00, $00, $00
38e5a 8bb 00 00 C6 69 
38e5e 8bc 36 18 6C 96 
38e62 8bd 63 00 00 00 
38e66 8be 00 00 00 00 | 	byte	$00, $00, $c6, $69, $36, $18, $6c, $96, $63, $00, $00, $00, $00, $00, $00, $00
38e6a 8bf 1C 36 36 1E 
38e6e 8c0 6E 3B 33 73 
38e72 8c1 DE 00 00 00 
38e76 8c2 00 00 00 00 | 	byte	$1c, $36, $36, $1e, $6e, $3b, $33, $73, $de, $00, $00, $00, $00, $00, $00, $00
38e7a 8c3 18 18 0C 00 
38e7e 8c4 00 00 00 00 
38e82 8c5 00 00 00 00 
38e86 8c6 00 00 00 00 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38e8a 8c7 30 18 0C 0C 
38e8e 8c8 0C 0C 0C 18 
38e92 8c9 30 00 00 00 
38e96 8ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00, $00
38e9a 8cb 0C 18 30 30 
38e9e 8cc 30 30 30 18 
38ea2 8cd 0C 00 00 00 
38ea6 8ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00, $00
38eaa 8cf 00 66 66 3C 
38eae 8d0 FF 3C 66 66 
38eb2 8d1 00 00 00 00 
38eb6 8d2 00 00 00 00 | 	byte	$00, $66, $66, $3c, $ff, $3c, $66, $66, $00, $00, $00, $00, $00, $00, $00, $00
38eba 8d3 00 18 18 18 
38ebe 8d4 7E 18 18 18 
38ec2 8d5 00 00 00 00 
38ec6 8d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
38eca 8d7 00 00 00 00 
38ece 8d8 00 00 00    | 	byte	$00[7]
38ed1 8d9 18 18 0C 00 
38ed5 8da 00 00 00 00 
38ed9 8db 00 00 00 00 
38edd 8dc 00 7E 00 00 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00
38ee1 8dd 00 00 00 00 
38ee5 8de 00 00 00 00 
38ee9 8df 00 00 00 00 
38eed 8e0 00 00 00 00 | 	byte	$00[16]
38ef1 8e1 18 18 00 00 
38ef5 8e2 00 00 00 00 
38ef9 8e3 00 00 C0 60 
38efd 8e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $c0, $60, $30, $18, $0c, $06
38f01 8e5 03 00 00 00 
38f05 8e6 00 00 00 00 
38f09 8e7 00 3C 66 66 
38f0d 8e8 76 7E 6E 66 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $76, $7e, $6e, $66
38f11 8e9 66 3C 00 00 
38f15 8ea 00 00 00 00 
38f19 8eb 00 18 1C 1E 
38f1d 8ec 18 18 18 18 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18
38f21 8ed 18 18 00 00 
38f25 8ee 00 00 00 00 
38f29 8ef 00 3C 66 60 
38f2d 8f0 60 30 18 0C | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60, $60, $30, $18, $0c
38f31 8f1 06 7E 00 00 
38f35 8f2 00 00 00 00 
38f39 8f3 00 3C 66 60 
38f3d 8f4 60 38 60 60 | 	byte	$06, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60, $60, $38, $60, $60
38f41 8f5 66 3C 00 00 
38f45 8f6 00 00 00 00 
38f49 8f7 00 30 38 3C 
38f4d 8f8 36 33 7F 30 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30
38f51 8f9 30 30 00 00 
38f55 8fa 00 00 00 00 
38f59 8fb 00 7E 06 06 
38f5d 8fc 3E 60 60 60 | 	byte	$30, $30, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06, $3e, $60, $60, $60
38f61 8fd 66 3C 00 00 
38f65 8fe 00 00 00 00 
38f69 8ff 00 38 0C 06 
38f6d 900 06 3E 66 66 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $38, $0c, $06, $06, $3e, $66, $66
38f71 901 66 3C 00 00 
38f75 902 00 00 00 00 
38f79 903 00 7E 60 60 
38f7d 904 60 30 18 18 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $7e, $60, $60, $60, $30, $18, $18
38f81 905 18 18 00 00 
38f85 906 00 00 00 00 
38f89 907 00 3C 66 66 
38f8d 908 66 3C 66 66 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $3c, $66, $66
38f91 909 66 3C 00 00 
38f95 90a 00 00 00 00 
38f99 90b 00 3C 66 66 
38f9d 90c 66 7C 60 60 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $7c, $60, $60
38fa1 90d 30 1C 00 00 
38fa5 90e 00 00 00 00 
38fa9 90f 00 00 00 18 
38fad 910 18 00 00 18 | 	byte	$30, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $18
38fb1 911 18 00 00 00 
38fb5 912 00 00 00 00 
38fb9 913 00 00 00 18 
38fbd 914 18 00 00 00 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
38fc1 915 18 18 0C 00 
38fc5 916 00 00 00 00 
38fc9 917 00 00 00 60 
38fcd 918 18 06 18 60 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $60, $18, $06, $18, $60
38fd1 919 00 00 00 00 
38fd5 91a 00 00 00 00 
38fd9 91b 00 00 00 00 | 	byte	$00[12]
38fdd 91c 7E 00 7E 00 
38fe1 91d 00 00 00 00 
38fe5 91e 00 00 00 00 
38fe9 91f 00 00 00 06 | 	byte	$7e, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $06
38fed 920 18 60 18 06 
38ff1 921 00 00 00 00 
38ff5 922 00 00 00 00 
38ff9 923 00 3C 66 60 | 	byte	$18, $60, $18, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60
38ffd 924 60 30 18 00 
39001 925 18 18 00 00 
39005 926 00 00 00 00 
39009 927 00 3E 63 63 | 	byte	$60, $30, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63
3900d 928 7B 6B 7B 03 
39011 929 03 1E 00 00 
39015 92a 00 00 00 00 
39019 92b 00 3E 63 63 | 	byte	$7b, $6b, $7b, $03, $03, $1e, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63
3901d 92c 63 7F 63 63 
39021 92d 63 63 00 00 
39025 92e 00 00 00 00 
39029 92f 00 3E 66 66 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66
3902d 930 66 3E 66 66 
39031 931 66 3E 00 00 
39035 932 00 00 00 00 
39039 933 00 78 0C 06 | 	byte	$66, $3e, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $78, $0c, $06
3903d 934 06 06 06 06 
39041 935 0C 78 00 00 
39045 936 00 00 00 00 
39049 937 00 1F 33 63 | 	byte	$06, $06, $06, $06, $0c, $78, $00, $00, $00, $00, $00, $00, $00, $1f, $33, $63
3904d 938 63 63 63 63 
39051 939 33 1F 00 00 
39055 93a 00 00 00 00 
39059 93b 00 7E 06 06 | 	byte	$63, $63, $63, $63, $33, $1f, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06
3905d 93c 06 1E 06 06 
39061 93d 06 7E 00 00 
39065 93e 00 00 00 00 
39069 93f 00 7E 06 06 | 	byte	$06, $1e, $06, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06
3906d 940 06 1E 06 06 
39071 941 06 06 00 00 
39075 942 00 00 00 00 
39079 943 00 3C 66 06 | 	byte	$06, $1e, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $06
3907d 944 06 76 66 66 
39081 945 66 7C 00 00 
39085 946 00 00 00 00 
39089 947 00 63 63 63 | 	byte	$06, $76, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63
3908d 948 63 7F 63 63 
39091 949 63 63 00 00 
39095 94a 00 00 00 00 
39099 94b 00 3C 18 18 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00, $3c, $18, $18
3909d 94c 18 18 18 18 
390a1 94d 18          | 	byte	$18[5]
390a2 94d 3C 00 00 00 
390a6 94e 00 00 00 00 
390aa 94f 60 60 60 60 
390ae 950 60 60 60 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $60, $60, $60, $60, $60, $60, $60, $63
390b2 951 3E 00 00 00 
390b6 952 00 00 00 00 
390ba 953 C3 63 33 1B 
390be 954 0F 1B 33 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $c3, $63, $33, $1b, $0f, $1b, $33, $63
390c2 955 C3 00 00 00 
390c6 956 00 00 00 00 
390ca 957 03 03 03 03 
390ce 958 03 03 03 03 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $03, $03, $03, $03, $03, $03, $03, $03
390d2 959 7F 00 00 00 
390d6 95a 00 00 00 00 
390da 95b 63 77 7F 6B 
390de 95c 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $6b, $63, $63, $63, $63
390e2 95d 63 00 00 00 
390e6 95e 00 00 00 00 
390ea 95f 63 67 6F 7B 
390ee 960 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7b, $73, $63, $63, $63
390f2 961 63 00 00 00 
390f6 962 00 00 00 00 
390fa 963 3E 63 63 63 
390fe 964 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63
39102 965 3E 00 00 00 
39106 966 00 00 00 00 
3910a 967 3E 66 66 66 
3910e 968 3E 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $3e, $06, $06, $06
39112 969 06 00 00 00 
39116 96a 00 00 00 00 
3911a 96b 3E 63 63 63 
3911e 96c 63 63 63 7B | 	byte	$06, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $7b
39122 96d FE 00 00 00 
39126 96e 00 00 00 00 
3912a 96f 1F 33 33 33 
3912e 970 1F 1B 33 63 | 	byte	$fe, $00, $00, $00, $00, $00, $00, $00, $1f, $33, $33, $33, $1f, $1b, $33, $63
39132 971 63 00 00 00 
39136 972 00 00 00 00 
3913a 973 3C 66 06 0C 
3913e 974 18 30 60 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $06, $0c, $18, $30, $60, $66
39142 975 3C 00 00 00 
39146 976 00 00 00 00 
3914a 977 7E 18 18 18 
3914e 978 18 18 18 18 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $7e, $18, $18, $18, $18, $18, $18, $18
39152 979 18 00 00 00 
39156 97a 00 00 00 00 
3915a 97b 63 63 63 63 
3915e 97c 63 63 63 63 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63
39162 97d 3E 00 00 00 
39166 97e 00 00 00 00 
3916a 97f 63 63 63 63 
3916e 980 63 36 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36, $36, $1c
39172 981 08 00 00 00 
39176 982 00 00 00 00 
3917a 983 C3 C3 C3 C3 
3917e 984 C3 DB FF E7 | 	byte	$08, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $c3, $c3, $c3, $db, $ff, $e7
39182 985 C3 00 00 00 
39186 986 00 00 00 00 
3918a 987 C3 C3 66 3C 
3918e 988 18 3C 66 C3 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $66, $3c, $18, $3c, $66, $c3
39192 989 C3 00 00 00 
39196 98a 00 00 00 00 
3919a 98b C3 C3 66 3C 
3919e 98c 18 18 18 18 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $66, $3c, $18, $18, $18, $18
391a2 98d 18 00 00 00 
391a6 98e 00 00 00 00 
391aa 98f 7F 60 60 30 
391ae 990 18 0C 06 03 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $7f, $60, $60, $30, $18, $0c, $06, $03
391b2 991 7F 00 00 00 
391b6 992 00 00 00 00 
391ba 993 3C 0C 0C 0C 
391be 994 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
391c2 995 3C 00 00 00 
391c6 996 00 00 00 00 
391ca 997 00 03 06 0C 
391ce 998 18 30 60 C0 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $03, $06, $0c, $18, $30, $60, $c0
391d2 999 00 00 00 00 
391d6 99a 00 00 00 00 | 	byte	$00[8]
391da 99b 3C 30 30 30 
391de 99c 30 30 30 30 
391e2 99d 3C 00 00 00 
391e6 99e 00 00 00 00 | 	byte	$3c, $30, $30, $30, $30, $30, $30, $30, $3c, $00, $00, $00, $00, $00, $00, $00
391ea 99f 08 1C 36 63 
391ee 9a0 00 00 00 00 
391f2 9a1 00 00 00 00 
391f6 9a2 00 00 00 00 | 	byte	$08, $1c, $36, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
391fa 9a3 00 00 00 00 
391fe 9a4 00 00 00 00 
39202 9a5 00          | 	byte	$00[9]
39203 9a5 7F 00 00 00 
39207 9a6 00 00 00 18 
3920b 9a7 18 30 00 00 
3920f 9a8 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $18, $18, $30, $00, $00, $00, $00, $00, $00
39213 9a9 00 00 00 00 
39217 9aa 00 00 00 00 
3921b 9ab 00 00       | 	byte	$00[10]
3921d 9ac 3C 60 7C 66 
39221 9ad 66 7C 00 00 
39225 9ae 00 00 00 00 
39229 9af 00 06 06 06 | 	byte	$3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $06, $06, $06
3922d 9b0 3E 66 66 66 
39231 9b1 66 3E 00 00 
39235 9b2 00 00 00 00 
39239 9b3 00 00 00 00 | 	byte	$3e, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3923d 9b4 3C 06 06 06 
39241 9b5 06 3C 00 00 
39245 9b6 00 00 00 00 
39249 9b7 00 60 60 60 | 	byte	$3c, $06, $06, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00, $60, $60, $60
3924d 9b8 7C 66 66 66 
39251 9b9 66 7C 00 00 
39255 9ba 00 00 00 00 
39259 9bb 00 00 00 00 | 	byte	$7c, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3925d 9bc 3C 66 7E 06 
39261 9bd 06 3C 00 00 
39265 9be 00 00 00 00 
39269 9bf 00 38 0C 0C | 	byte	$3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00, $38, $0c, $0c
3926d 9c0 3E 0C 0C 0C 
39271 9c1 0C 0C 00 00 
39275 9c2 00 00 00 00 
39279 9c3 00 00 00 00 | 	byte	$3e, $0c, $0c, $0c, $0c, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3927d 9c4 7C 66 66 66 
39281 9c5 7C 60 60 3C 
39285 9c6 00 00 00 00 
39289 9c7 00 06 06 06 | 	byte	$7c, $66, $66, $66, $7c, $60, $60, $3c, $00, $00, $00, $00, $00, $06, $06, $06
3928d 9c8 3E 66 66 66 
39291 9c9 66 66 00 00 
39295 9ca 00 00 00 00 
39299 9cb 00 00 18 00 | 	byte	$3e, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00, $00, $18, $00
3929d 9cc 18 18 18 18 
392a1 9cd 18          | 	byte	$18[5]
392a2 9cd 30 00 00 00 
392a6 9ce 00 00 00 00 
392aa 9cf 00 30 00 30 
392ae 9d0 30 30 30 30 | 	byte	$30, $00, $00, $00, $00, $00, $00, $00, $00, $30, $00, $30, $30, $30, $30, $30
392b2 9d1 30 30 1E 00 
392b6 9d2 00 00 00 00 
392ba 9d3 03 03 03 33 
392be 9d4 1B 0F 1B 33 | 	byte	$30, $30, $1e, $00, $00, $00, $00, $00, $03, $03, $03, $33, $1b, $0f, $1b, $33
392c2 9d5 63 00 00 00 
392c6 9d6 00 00 00 00 
392ca 9d7 18 18 18 18 
392ce 9d8 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18
392d2 9d9 30 00 00 00 
392d6 9da 00 00 00 00 
392da 9db 00 00 00 37 
392de 9dc 7F 6B 63 63 | 	byte	$30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $63, $63
392e2 9dd 63 00 00 00 
392e6 9de 00 00 00 00 
392ea 9df 00 00 00 3E 
392ee 9e0 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $66
392f2 9e1 66 00 00 00 
392f6 9e2 00 00 00 00 
392fa 9e3 00 00 00 3C 
392fe 9e4 66 66 66 66 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $66
39302 9e5 3C 00 00 00 
39306 9e6 00 00 00 00 
3930a 9e7 00 00 00 3E 
3930e 9e8 66 66 66 3E | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $3e
39312 9e9 06 06 06 00 
39316 9ea 00 00 00 00 
3931a 9eb 00 00 00 7C 
3931e 9ec 66 66 66 7C | 	byte	$06, $06, $06, $00, $00, $00, $00, $00, $00, $00, $00, $7c, $66, $66, $66, $7c
39322 9ed 60 60 60 00 
39326 9ee 00 00 00 00 
3932a 9ef 00 00 00 3E 
3932e 9f0 66 06 06 06 | 	byte	$60, $60, $60, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $06, $06, $06
39332 9f1 06 00 00 00 
39336 9f2 00 00 00 00 
3933a 9f3 00 00 00 3C 
3933e 9f4 06 0C 30 60 | 	byte	$06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $06, $0c, $30, $60
39342 9f5 3E 00 00 00 
39346 9f6 00 00 00 00 
3934a 9f7 00 0C 0C 3E 
3934e 9f8 0C 0C 0C 0C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $0c, $0c, $3e, $0c, $0c, $0c, $0c
39352 9f9 38 00 00 00 
39356 9fa 00 00 00 00 
3935a 9fb 00 00 00 66 
3935e 9fc 66 66 66 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66
39362 9fd 7C 00 00 00 
39366 9fe 00 00 00 00 
3936a 9ff 00 00 00 66 
3936e a00 66 66 66 3C | 	byte	$7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c
39372 a01 18 00 00 00 
39376 a02 00 00 00 00 
3937a a03 00 00 00 63 
3937e a04 63 63 6B 3E | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $6b, $3e
39382 a05 36 00 00 00 
39386 a06 00 00 00 00 
3938a a07 00 00 00 63 
3938e a08 36 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36
39392 a09 63 00 00 00 
39396 a0a 00 00 00 00 
3939a a0b 00 00 00 66 
3939e a0c 66 66 66 3C | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c
393a2 a0d 18 0C 06 00 
393a6 a0e 00 00 00 00 
393aa a0f 00 00 00 7E 
393ae a10 30 18 0C 06 | 	byte	$18, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $30, $18, $0c, $06
393b2 a11 7E 00 00 00 
393b6 a12 00 00 00 00 
393ba a13 70 18 18 18 
393be a14 0E 18 18 18 | 	byte	$7e, $00, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18
393c2 a15 70 00 00 00 
393c6 a16 00 00 00 00 
393ca a17 18 18 18 18 
393ce a18 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18
393d2 a19 18 00 00 00 
393d6 a1a 00 00 00 00 
393da a1b 0E 18 18 18 
393de a1c 70 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18
393e2 a1d 0E 00 00 00 
393e6 a1e 00 00 00 00 
393ea a1f 46 5D 31 00 
393ee a20 00 00 00 00 | 	byte	$0e, $00, $00, $00, $00, $00, $00, $00, $46, $5d, $31, $00, $00, $00, $00, $00
393f2 a21 00 00 00 00 
393f6 a22 00 00 00 00 | 	byte	$00[8]
393fa a23 C0 F0 3C 0F 
393fe a24 C3 F0 3C 0F 
39402 a25 03 00 00 00 
39406 a26 00 00 00 00 | 	byte	$c0, $f0, $3c, $0f, $c3, $f0, $3c, $0f, $03, $00, $00, $00, $00, $00, $00, $00
3940a a27 18 18 00 18 
3940e a28 18 18 18 18 
39412 a29 18 00 00 00 
39416 a2a 00 00 00 00 | 	byte	$18, $18, $00, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3941a a2b 18 18 7E 1B 
3941e a2c 1B 7E 18 18 
39422 a2d 00 00 00 00 
39426 a2e 00 00 00 00 | 	byte	$18, $18, $7e, $1b, $1b, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
3942a a2f 78 CC 0C 0C 
3942e a30 1E 0C 0C 06 
39432 a31 7F 00 00 00 
39436 a32 00 00 00 00 | 	byte	$78, $cc, $0c, $0c, $1e, $0c, $0c, $06, $7f, $00, $00, $00, $00, $00, $00, $00
3943a a33 66 3C 66 66 
3943e a34 3C 66 00 00 
39442 a35 00 00 00 00 
39446 a36 00 00 00 00 | 	byte	$66, $3c, $66, $66, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3944a a37 C3 C3 66 3C 
3944e a38 18 7E 18 18 
39452 a39 18 00 00 00 
39456 a3a 00 00 00 00 | 	byte	$c3, $c3, $66, $3c, $18, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3945a a3b 18 18 18 18 
3945e a3c 00 18 18 18 
39462 a3d 18 00 00 00 
39466 a3e 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3946a a3f 3C 06 06 3C 
3946e a40 66 66 66 3C 
39472 a41 60 60 3C 00 
39476 a42 00 00 00 00 | 	byte	$3c, $06, $06, $3c, $66, $66, $66, $3c, $60, $60, $3c, $00, $00, $00, $00, $00
3947a a43 66 66 00 00 
3947e a44 00 00 00 00 
39482 a45 00 00 00 00 
39486 a46 00 00 00 00 | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3948a a47 7E 81 B9 85 
3948e a48 85 B9 81 7E 
39492 a49 00 00 00 00 
39496 a4a 00 00 00 00 | 	byte	$7e, $81, $b9, $85, $85, $b9, $81, $7e, $00, $00, $00, $00, $00, $00, $00, $00
3949a a4b 3C 33 33 7E 
3949e a4c 00 7F 00 00 
394a2 a4d 00 00 00 00 
394a6 a4e 00 00 00 00 | 	byte	$3c, $33, $33, $7e, $00, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
394aa a4f 00 00 CC 66 
394ae a50 33 66 CC 00 
394b2 a51 00 00 00 00 
394b6 a52 00 00 00 00 | 	byte	$00, $00, $cc, $66, $33, $66, $cc, $00, $00, $00, $00, $00, $00, $00, $00, $00
394ba a53 7E 60 60 00 
394be a54 00 00 00 00 
394c2 a55 00 00 00 00 
394c6 a56 00 00 00 00 | 	byte	$7e, $60, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
394ca a57 7E 81 9D A5 
394ce a58 9D A5 81 7E 
394d2 a59 00 00 00 00 
394d6 a5a 00 00 00 00 | 	byte	$7e, $81, $9d, $a5, $9d, $a5, $81, $7e, $00, $00, $00, $00, $00, $00, $00, $00
394da a5b 7E 00 00 00 
394de a5c 00 00 00 00 
394e2 a5d 00 00 00 00 
394e6 a5e 00 00 00 00 | 	byte	$7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
394ea a5f 3C 66 66 3C 
394ee a60 00 00 00 00 
394f2 a61 00 00 00 00 
394f6 a62 00 00 00 00 | 	byte	$3c, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
394fa a63 18 18 18 7E 
394fe a64 18 18 18 00 
39502 a65 7E 00 00 00 
39506 a66 00 00 00 00 | 	byte	$18, $18, $18, $7e, $18, $18, $18, $00, $7e, $00, $00, $00, $00, $00, $00, $00
3950a a67 1E 30 30 18 
3950e a68 0C 06 3E 00 
39512 a69 00 00 00 00 
39516 a6a 00 00 00 00 | 	byte	$1e, $30, $30, $18, $0c, $06, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3951a a6b 1E 30 30 1C 
3951e a6c 30 30 1E 00 
39522 a6d 00 00 00 00 
39526 a6e 00 00 00 00 | 	byte	$1e, $30, $30, $1c, $30, $30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3952a a6f 30 18 0C 06 
3952e a70 00 00 00 00 
39532 a71 00 00 00 00 
39536 a72 00 00 00 00 | 	byte	$30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3953a a73 00 00 00 66 
3953e a74 66 66 66 66 
39542 a75 FE 06 06 00 
39546 a76 00 00 00 00 | 	byte	$00, $00, $00, $66, $66, $66, $66, $66, $fe, $06, $06, $00, $00, $00, $00, $00
3954a a77 7C 5E 5E 5E 
3954e a78 5C 50 50 50 
39552 a79 50 50 00 00 
39556 a7a 00 00 00 00 | 	byte	$7c, $5e, $5e, $5e, $5c, $50, $50, $50, $50, $50, $00, $00, $00, $00, $00, $00
3955a a7b 00 00 00 18 
3955e a7c 18 00 00 00 
39562 a7d 00 00 00 00 
39566 a7e 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3956a a7f 00 00 00 00 
3956e a80 00 00 00 00 
39572 a81 00          | 	byte	$00[9]
39573 a81 30 18 00 00 
39577 a82 00 00 00 18 
3957b a83 1C 18 18 18 
3957f a84 18 18 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $18, $1c, $18, $18, $18, $18, $18, $00, $00
39583 a85 00 00 00 00 
39587 a86 00 00 00    | 	byte	$00[7]
3958a a87 3C 66 66 3C 
3958e a88 00 7E 00 00 
39592 a89 00 00 00 00 
39596 a8a 00 00 00 00 | 	byte	$3c, $66, $66, $3c, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3959a a8b 00 00 33 66 
3959e a8c CC 66 33 00 
395a2 a8d 00 00 00 00 
395a6 a8e 00 00 00 00 | 	byte	$00, $00, $33, $66, $cc, $66, $33, $00, $00, $00, $00, $00, $00, $00, $00, $00
395aa a8f 02 63 32 1A 
395ae a90 4E 66 F3 40 
395b2 a91 40 00 00 00 
395b6 a92 00 00 00 00 | 	byte	$02, $63, $32, $1a, $4e, $66, $f3, $40, $40, $00, $00, $00, $00, $00, $00, $00
395ba a93 04 C6 64 34 
395be a94 7C 8C 46 23 
395c2 a95 F0 00 00 00 
395c6 a96 00 00 00 00 | 	byte	$04, $c6, $64, $34, $7c, $8c, $46, $23, $f0, $00, $00, $00, $00, $00, $00, $00
395ca a97 03 C4 66 34 
395ce a98 5B 6C F6 43 
395d2 a99 40 00 00 00 
395d6 a9a 00 00 00 00 | 	byte	$03, $c4, $66, $34, $5b, $6c, $f6, $43, $40, $00, $00, $00, $00, $00, $00, $00
395da a9b 18 18 00 18 
395de a9c 0C 06 06 66 
395e2 a9d 3C 00 00 00 
395e6 a9e 00 00 00 00 | 	byte	$18, $18, $00, $18, $0c, $06, $06, $66, $3c, $00, $00, $00, $00, $00, $00, $00
395ea a9f 06 0C 3E 63 
395ee aa0 63 7F 63 63 
395f2 aa1 63 00 00 00 
395f6 aa2 00 00 00 00 | 	byte	$06, $0c, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
395fa aa3 30 18 3E 63 
395fe aa4 63 7F 63 63 
39602 aa5 63 00 00 00 
39606 aa6 00 00 00 00 | 	byte	$30, $18, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
3960a aa7 0C 33 3E 63 
3960e aa8 63 63 7F 63 
39612 aa9 63 00 00 00 
39616 aaa 00 00 00 00 | 	byte	$0c, $33, $3e, $63, $63, $63, $7f, $63, $63, $00, $00, $00, $00, $00, $00, $00
3961a aab 4E 39 3E 63 
3961e aac 63 7F 63 63 
39622 aad 63 00 00 00 
39626 aae 00 00 00 00 | 	byte	$4e, $39, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
3962a aaf 63 00 3E 63 
3962e ab0 63 7F 63 63 
39632 ab1 63 00 00 00 
39636 ab2 00 00 00 00 | 	byte	$63, $00, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
3963a ab3 1C 22 1C 36 
3963e ab4 63 63 7F 63 
39642 ab5 63 00 00 00 
39646 ab6 00 00 00 00 | 	byte	$1c, $22, $1c, $36, $63, $63, $7f, $63, $63, $00, $00, $00, $00, $00, $00, $00
3964a ab7 F8 3C 3C 36 
3964e ab8 F6 3F 33 33 
39652 ab9 F3 00 00 00 
39656 aba 00 00 00 00 | 	byte	$f8, $3c, $3c, $36, $f6, $3f, $33, $33, $f3, $00, $00, $00, $00, $00, $00, $00
3965a abb 78 0C 06 06 
3965e abc 06 06 06 0C 
39662 abd 78 30 18 00 
39666 abe 00 00 00 00 | 	byte	$78, $0c, $06, $06, $06, $06, $06, $0c, $78, $30, $18, $00, $00, $00, $00, $00
3966a abf 0C 18 7E 06 
3966e ac0 06 3E 06 06 
39672 ac1 7E 00 00 00 
39676 ac2 00 00 00 00 | 	byte	$0c, $18, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
3967a ac3 30 18 7E 06 
3967e ac4 06 3E 06 06 
39682 ac5 7E 00 00 00 
39686 ac6 00 00 00 00 | 	byte	$30, $18, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
3968a ac7 18 66 7E 06 
3968e ac8 06 3E 06 06 
39692 ac9 7E 00 00 00 
39696 aca 00 00 00 00 | 	byte	$18, $66, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
3969a acb 66 00 7E 06 
3969e acc 06 3E 06 06 
396a2 acd 7E 00 00 00 
396a6 ace 00 00 00 00 | 	byte	$66, $00, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
396aa acf 0C 18 3C 18 
396ae ad0 18 18 18 18 
396b2 ad1 3C 00 00 00 
396b6 ad2 00 00 00 00 | 	byte	$0c, $18, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
396ba ad3 30 18 3C 18 
396be ad4 18 18 18 18 
396c2 ad5 3C 00 00 00 
396c6 ad6 00 00 00 00 | 	byte	$30, $18, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
396ca ad7 18 66 3C 18 
396ce ad8 18 18 18 18 
396d2 ad9 3C 00 00 00 
396d6 ada 00 00 00 00 | 	byte	$18, $66, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
396da adb 66 00 3C 18 
396de adc 18 18 18 18 
396e2 add 3C 00 00 00 
396e6 ade 00 00 00 00 | 	byte	$66, $00, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
396ea adf 1E 36 66 66 
396ee ae0 6F 66 66 36 
396f2 ae1 1E 00 00 00 
396f6 ae2 00 00 00 00 | 	byte	$1e, $36, $66, $66, $6f, $66, $66, $36, $1e, $00, $00, $00, $00, $00, $00, $00
396fa ae3 8E 73 67 6F 
396fe ae4 7B 73 63 63 
39702 ae5 63 00 00 00 
39706 ae6 00 00 00 00 | 	byte	$8e, $73, $67, $6f, $7b, $73, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
3970a ae7 06 0C 3E 63 
3970e ae8 63 63 63 63 
39712 ae9 3E 00 00 00 
39716 aea 00 00 00 00 | 	byte	$06, $0c, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3971a aeb 30 18 3E 63 
3971e aec 63 63 63 63 
39722 aed 3E 00 00 00 
39726 aee 00 00 00 00 | 	byte	$30, $18, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3972a aef 0C 33 3E 63 
3972e af0 63 63 63 63 
39732 af1 3E 00 00 00 
39736 af2 00 00 00 00 | 	byte	$0c, $33, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3973a af3 8E 71 3E 63 
3973e af4 63 63 63 63 
39742 af5 3E 00 00 00 
39746 af6 00 00 00 00 | 	byte	$8e, $71, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3974a af7 63 00 3E 63 
3974e af8 63 63 63 63 
39752 af9 3E 00 00 00 
39756 afa 00 00 00 00 | 	byte	$63, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3975a afb 00 00 63 36 
3975e afc 1C 1C 36 63 
39762 afd 00 00 00 00 
39766 afe 00 00 00 00 | 	byte	$00, $00, $63, $36, $1c, $1c, $36, $63, $00, $00, $00, $00, $00, $00, $00, $00
3976a aff BE 63 73 7B 
3976e b00 6B 6F 67 63 
39772 b01 3F 00 00 00 
39776 b02 00 00 00 00 | 	byte	$be, $63, $73, $7b, $6b, $6f, $67, $63, $3f, $00, $00, $00, $00, $00, $00, $00
3977a b03 0C 18 63 63 
3977e b04 63 63 63 63 
39782 b05 3E 00 00 00 
39786 b06 00 00 00 00 | 	byte	$0c, $18, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3978a b07 18 0C 63 63 
3978e b08 63 63 63 63 
39792 b09 3E 00 00 00 
39796 b0a 00 00 00 00 | 	byte	$18, $0c, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3979a b0b 08 36 63 63 
3979e b0c 63 63 63 63 
397a2 b0d 3E 00 00 00 
397a6 b0e 00 00 00 00 | 	byte	$08, $36, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
397aa b0f 63 00 63 63 
397ae b10 63 63 63 63 
397b2 b11 3E 00 00 00 
397b6 b12 00 00 00 00 | 	byte	$63, $00, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
397ba b13 30 18 C3 66 
397be b14 3C 18 18 18 
397c2 b15 18 00 00 00 
397c6 b16 00 00 00 00 | 	byte	$30, $18, $c3, $66, $3c, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
397ca b17 03 03 3F 63 
397ce b18 63 3F 03 03 
397d2 b19 03 00 00 00 
397d6 b1a 00 00 00 00 | 	byte	$03, $03, $3f, $63, $63, $3f, $03, $03, $03, $00, $00, $00, $00, $00, $00, $00
397da b1b 3C 66 66 66 
397de b1c 36 66 66 66 
397e2 b1d 36 06 06 00 
397e6 b1e 00 00 00 00 | 	byte	$3c, $66, $66, $66, $36, $66, $66, $66, $36, $06, $06, $00, $00, $00, $00, $00
397ea b1f 06 0C 00 3C 
397ee b20 60 7C 66 66 
397f2 b21 7C 00 00 00 
397f6 b22 00 00 00 00 | 	byte	$06, $0c, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
397fa b23 60 30 00 3C 
397fe b24 60 7C 66 66 
39802 b25 7C 00 00 00 
39806 b26 00 00 00 00 | 	byte	$60, $30, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3980a b27 18 66 00 3C 
3980e b28 60 7C 66 66 
39812 b29 7C 00 00 00 
39816 b2a 00 00 00 00 | 	byte	$18, $66, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3981a b2b 8E 71 00 3C 
3981e b2c 60 7C 66 66 
39822 b2d 7C 00 00 00 
39826 b2e 00 00 00 00 | 	byte	$8e, $71, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3982a b2f 00 66 00 3C 
3982e b30 60 7C 66 66 
39832 b31 7C 00 00 00 
39836 b32 00 00 00 00 | 	byte	$00, $66, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3983a b33 18 24 18 3C 
3983e b34 60 7C 66 66 
39842 b35 7C 00 00 00 
39846 b36 00 00 00 00 | 	byte	$18, $24, $18, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3984a b37 00 00 00 7E 
3984e b38 D8 FE 1B 1B 
39852 b39 EE 00 00 00 
39856 b3a 00 00 00 00 | 	byte	$00, $00, $00, $7e, $d8, $fe, $1b, $1b, $ee, $00, $00, $00, $00, $00, $00, $00
3985a b3b 00 00 00 3C 
3985e b3c 06 06 06 06 
39862 b3d 3C 18 0C 00 
39866 b3e 00 00 00 00 | 	byte	$00, $00, $00, $3c, $06, $06, $06, $06, $3c, $18, $0c, $00, $00, $00, $00, $00
3986a b3f 06 0C 00 3C 
3986e b40 66 7E 06 06 
39872 b41 3C 00 00 00 
39876 b42 00 00 00 00 | 	byte	$06, $0c, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
3987a b43 60 30 00 3C 
3987e b44 66 7E 06 06 
39882 b45 3C 00 00 00 
39886 b46 00 00 00 00 | 	byte	$60, $30, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
3988a b47 18 66 00 3C 
3988e b48 66 7E 06 06 
39892 b49 3C 00 00 00 
39896 b4a 00 00 00 00 | 	byte	$18, $66, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
3989a b4b 00 66 00 3C 
3989e b4c 66 7E 06 06 
398a2 b4d 3C 00 00 00 
398a6 b4e 00 00 00 00 | 	byte	$00, $66, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
398aa b4f 0C 18 00 18 
398ae b50 18 18 18 18 
398b2 b51 30 00 00 00 
398b6 b52 00 00 00 00 | 	byte	$0c, $18, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
398ba b53 18 0C 00 0C 
398be b54 0C 0C 0C 0C 
398c2 b55 18 00 00 00 
398c6 b56 00 00 00 00 | 	byte	$18, $0c, $00, $0c, $0c, $0c, $0c, $0c, $18, $00, $00, $00, $00, $00, $00, $00
398ca b57 18 66 00 18 
398ce b58 18 18 18 18 
398d2 b59 30 00 00 00 
398d6 b5a 00 00 00 00 | 	byte	$18, $66, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
398da b5b 00 66 00 18 
398de b5c 18 18 18 18 
398e2 b5d 30 00 00 00 
398e6 b5e 00 00 00 00 | 	byte	$00, $66, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
398ea b5f 03 06 3F 18 
398ee b60 3C 66 66 66 
398f2 b61 3C 00 00 00 
398f6 b62 00 00 00 00 | 	byte	$03, $06, $3f, $18, $3c, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
398fa b63 8E 71 00 3E 
398fe b64 66 66 66 66 
39902 b65 66 00 00 00 
39906 b66 00 00 00 00 | 	byte	$8e, $71, $00, $3e, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
3990a b67 06 0C 00 3C 
3990e b68 66 66 66 66 
39912 b69 3C 00 00 00 
39916 b6a 00 00 00 00 | 	byte	$06, $0c, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3991a b6b 60 30 00 3C 
3991e b6c 66 66 66 66 
39922 b6d 3C 00 00 00 
39926 b6e 00 00 00 00 | 	byte	$60, $30, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3992a b6f 18 66 00 3C 
3992e b70 66 66 66 66 
39932 b71 3C 00 00 00 
39936 b72 00 00 00 00 | 	byte	$18, $66, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3993a b73 8E 71 00 3C 
3993e b74 66 66 66 66 
39942 b75 3C 00 00 00 
39946 b76 00 00 00 00 | 	byte	$8e, $71, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3994a b77 00 66 00 3C 
3994e b78 66 66 66 66 
39952 b79 3C 00 00 00 
39956 b7a 00 00 00 00 | 	byte	$00, $66, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3995a b7b 00 18 18 00 
3995e b7c 7E 00 18 18 
39962 b7d 00 00 00 00 
39966 b7e 00 00 00 00 | 	byte	$00, $18, $18, $00, $7e, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
3996a b7f 00 00 00 7E 
3996e b80 73 7B 6F 67 
39972 b81 3F 00 00 00 
39976 b82 00 00 00 00 | 	byte	$00, $00, $00, $7e, $73, $7b, $6f, $67, $3f, $00, $00, $00, $00, $00, $00, $00
3997a b83 0C 18 00 66 
3997e b84 66 66 66 66 
39982 b85 7C 00 00 00 
39986 b86 00 00 00 00 | 	byte	$0c, $18, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3998a b87 30 18 00 66 
3998e b88 66 66 66 66 
39992 b89 7C 00 00 00 
39996 b8a 00 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3999a b8b 18 66 00 66 
3999e b8c 66 66 66 66 
399a2 b8d 7C 00 00 00 
399a6 b8e 00 00 00 00 | 	byte	$18, $66, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
399aa b8f 00 66 00 66 
399ae b90 66 66 66 66 
399b2 b91 7C 00 00 00 
399b6 b92 00 00 00 00 | 	byte	$00, $66, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
399ba b93 30 18 00 66 
399be b94 66 66 66 3C 
399c2 b95 18 0C 06 00 
399c6 b96 00 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $0c, $06, $00, $00, $00, $00, $00
399ca b97 06 06 06 3E 
399ce b98 66 66 66 3E 
399d2 b99 06 06 06 00 
399d6 b9a 00 00 00 00 | 	byte	$06, $06, $06, $3e, $66, $66, $66, $3e, $06, $06, $06, $00, $00, $00, $00, $00
399da b9b 00 66 00 66 
399de b9c 66 66 66 3C 
399e2 b9d 18 0C 06 00 
399e6 b9e 00 00 00 00 | 	byte	$00, $66, $00, $66, $66, $66, $66, $3c, $18, $0c, $06, $00, $00, $00, $00, $00
399ea b9f 00 7E 66 66 
399ee ba0 66 66 66 66 
399f2 ba1 66 7E 00 00 
399f6 ba2 00 00 00 00 | 	byte	$00, $7e, $66, $66, $66, $66, $66, $66, $66, $7e, $00, $00, $00, $00, $00, $00
399fa ba3 00 00 00 00 
      ...             
39c02 c25 00 00 00 00 
39c06 c26 00 00       | 	byte	$00[526]
39c08 c27 00 00 00 00 
39c0c c28 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
39c0d c28 80 00 00 00 
39c11 c29 00 80 00 00 
39c15 c2a 80 80 00 00 
39c19 c2b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
39c1d c2c 80 00 80 00 
39c21 c2d 00 40 80 00 
39c25 c2e AA AA AA 00 
39c29 c2f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
39c2d c30 FF 00 00 00 
39c31 c31 00 FF 00 00 
39c35 c32 FF FF 00 00 
39c39 c33 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
39c3d c34 FF 00 FF 00 
39c41 c35 00 FF FF 00 
39c45 c36 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
39c48 c37 00 00 00 00 
39c4c c38 00          | ataripalette   file "ataripalettep2.def"
39c4d c38 11 11 11 00 
39c51 c39 22 22 22 00 
39c55 c3a 33 33 33 00 
39c59 c3b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
39c5d c3c 55 55 55 00 
39c61 c3d 66 66 66 00 
39c65 c3e 77 77 77 00 
39c69 c3f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
39c6d c40 99 99 99 00 
39c71 c41 AA AA AA 00 
39c75 c42 BB BB BB 00 
39c79 c43 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
39c7d c44 DD DD DD 00 
39c81 c45 EE EE EE 00 
39c85 c46 FF FF FF 00 
39c89 c47 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
39c8d c48 00 14 40 00 
39c91 c49 00 1E 60 00 
39c95 c4a 00 28 80 00 
39c99 c4b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
39c9d c4c 00 3C BF 00 
39ca1 c4d 00 46 DF 00 
39ca5 c4e 00 50 FF 00 
39ca9 c4f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
39cad c50 39 77 FF 00 
39cb1 c51 55 8A FF 00 
39cb5 c52 71 9E FF 00 
39cb9 c53 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
39cbd c54 AA C5 FF 00 
39cc1 c55 C6 D8 FF 00 
39cc5 c56 E3 EC FF 00 
39cc9 c57 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
39ccd c58 00 00 40 00 
39cd1 c59 00 00 60 00 
39cd5 c5a 00 00 80 00 
39cd9 c5b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
39cdd c5c 00 00 BF 00 
39ce1 c5d 00 00 DF 00 
39ce5 c5e 00 00 FF 00 
39ce9 c5f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
39ced c60 39 39 FF 00 
39cf1 c61 55 55 FF 00 
39cf5 c62 71 71 FF 00 
39cf9 c63 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
39cfd c64 AA AA FF 00 
39d01 c65 C6 C6 FF 00 
39d05 c66 E3 E3 FF 00 
39d09 c67 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
39d0d c68 20 00 40 00 
39d11 c69 30 00 60 00 
39d15 c6a 40 00 80 00 
39d19 c6b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
39d1d c6c 60 00 BF 00 
39d21 c6d 70 00 DF 00 
39d25 c6e 80 00 FF 00 
39d29 c6f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
39d2d c70 9C 39 FF 00 
39d31 c71 AA 55 FF 00 
39d35 c72 B8 71 FF 00 
39d39 c73 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
39d3d c74 D5 AA FF 00 
39d41 c75 E3 C6 FF 00 
39d45 c76 F1 E3 FF 00 
39d49 c77 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
39d4d c78 40 00 40 00 
39d51 c79 60 00 60 00 
39d55 c7a 80 00 80 00 
39d59 c7b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
39d5d c7c BF 00 BF 00 
39d61 c7d DF 00 DF 00 
39d65 c7e FF 00 FF 00 
39d69 c7f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
39d6d c80 FF 39 FF 00 
39d71 c81 FF 55 FF 00 
39d75 c82 FF 71 FF 00 
39d79 c83 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
39d7d c84 FF AA FF 00 
39d81 c85 FF C6 FF 00 
39d85 c86 FF E3 FF 00 
39d89 c87 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
39d8d c88 40 00 20 00 
39d91 c89 60 00 30 00 
39d95 c8a 80 00 40 00 
39d99 c8b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
39d9d c8c BF 00 60 00 
39da1 c8d DF 00 70 00 
39da5 c8e FF 00 80 00 
39da9 c8f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
39dad c90 FF 39 9C 00 
39db1 c91 FF 55 AA 00 
39db5 c92 FF 71 B8 00 
39db9 c93 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
39dbd c94 FF AA D5 00 
39dc1 c95 FF C6 E3 00 
39dc5 c96 FF E3 F1 00 
39dc9 c97 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
39dcd c98 40 00 00 00 
39dd1 c99 60 00 00 00 
39dd5 c9a 80 00 00 00 
39dd9 c9b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
39ddd c9c BF 00 00 00 
39de1 c9d DF 00 00 00 
39de5 c9e FF 00 00 00 
39de9 c9f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
39ded ca0 FF 39 39 00 
39df1 ca1 FF 55 55 00 
39df5 ca2 FF 71 71 00 
39df9 ca3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
39dfd ca4 FF AA AA 00 
39e01 ca5 FF C6 C6 00 
39e05 ca6 FF E3 E3 00 
39e09 ca7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
39e0d ca8 40 10 00 00 
39e11 ca9 60 18 00 00 
39e15 caa 80 20 00 00 
39e19 cab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
39e1d cac BF 30 00 00 
39e21 cad DF 38 00 00 
39e25 cae FF 40 00 00 
39e29 caf FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
39e2d cb0 FF 6A 39 00 
39e31 cb1 FF 80 55 00 
39e35 cb2 FF 95 71 00 
39e39 cb3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
39e3d cb4 FF BF AA 00 
39e41 cb5 FF D5 C6 00 
39e45 cb6 FF EA E3 00 
39e49 cb7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
39e4d cb8 40 20 00 00 
39e51 cb9 60 30 00 00 
39e55 cba 80 40 00 00 
39e59 cbb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
39e5d cbc BF 60 00 00 
39e61 cbd DF 70 00 00 
39e65 cbe FF 80 00 00 
39e69 cbf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
39e6d cc0 FF 9C 39 00 
39e71 cc1 FF AA 55 00 
39e75 cc2 FF B8 71 00 
39e79 cc3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
39e7d cc4 FF D5 AA 00 
39e81 cc5 FF E3 C6 00 
39e85 cc6 FF F1 E3 00 
39e89 cc7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
39e8d cc8 40 30 00 00 
39e91 cc9 60 48 00 00 
39e95 cca 80 60 00 00 
39e99 ccb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
39e9d ccc BF 90 00 00 
39ea1 ccd DF A8 00 00 
39ea5 cce FF C0 00 00 
39ea9 ccf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
39ead cd0 FF CE 39 00 
39eb1 cd1 FF D5 55 00 
39eb5 cd2 FF DC 71 00 
39eb9 cd3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
39ebd cd4 FF EA AA 00 
39ec1 cd5 FF F1 C6 00 
39ec5 cd6 FF F8 E3 00 
39ec9 cd7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
39ecd cd8 30 40 00 00 
39ed1 cd9 48 60 00 00 
39ed5 cda 60 80 00 00 
39ed9 cdb 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
39edd cdc 90 BF 00 00 
39ee1 cdd A8 DF 00 00 
39ee5 cde C0 FF 00 00 
39ee9 cdf C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
39eed ce0 CE FF 39 00 
39ef1 ce1 D5 FF 55 00 
39ef5 ce2 DC FF 71 00 
39ef9 ce3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
39efd ce4 EA FF AA 00 
39f01 ce5 F1 FF C6 00 
39f05 ce6 F8 FF E3 00 
39f09 ce7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
39f0d ce8 00 40 00 00 
39f11 ce9 00 60 00 00 
39f15 cea 00 80 00 00 
39f19 ceb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
39f1d cec 00 BF 00 00 
39f21 ced 00 DF 00 00 
39f25 cee 00 FF 00 00 
39f29 cef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
39f2d cf0 39 FF 39 00 
39f31 cf1 55 FF 55 00 
39f35 cf2 71 FF 71 00 
39f39 cf3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
39f3d cf4 AA FF AA 00 
39f41 cf5 C6 FF C6 00 
39f45 cf6 E3 FF E3 00 
39f49 cf7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
39f4d cf8 00 40 14 00 
39f51 cf9 00 60 1E 00 
39f55 cfa 00 80 28 00 
39f59 cfb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
39f5d cfc 00 BF 3C 00 
39f61 cfd 00 DF 46 00 
39f65 cfe 00 FF 50 00 
39f69 cff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
39f6d d00 39 FF 77 00 
39f71 d01 55 FF 8A 00 
39f75 d02 71 FF 9E 00 
39f79 d03 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
39f7d d04 AA FF C5 00 
39f81 d05 C6 FF D8 00 
39f85 d06 E3 FF EC 00 
39f89 d07 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
39f8d d08 00 40 28 00 
39f91 d09 00 60 3C 00 
39f95 d0a 00 80 50 00 
39f99 d0b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
39f9d d0c 00 BF 78 00 
39fa1 d0d 00 DF 8C 00 
39fa5 d0e 00 FF A0 00 
39fa9 d0f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
39fad d10 39 FF B5 00 
39fb1 d11 55 FF C0 00 
39fb5 d12 71 FF CA 00 
39fb9 d13 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
39fbd d14 AA FF DF 00 
39fc1 d15 C6 FF EA 00 
39fc5 d16 E3 FF F4 00 
39fc9 d17 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
39fcd d18 00 40 40 00 
39fd1 d19 00 60 60 00 
39fd5 d1a 00 80 80 00 
39fd9 d1b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
39fdd d1c 00 BF BF 00 
39fe1 d1d 00 DF DF 00 
39fe5 d1e 00 FF FF 00 
39fe9 d1f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
39fed d20 39 FF FF 00 
39ff1 d21 55 FF FF 00 
39ff5 d22 71 FF FF 00 
39ff9 d23 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
39ffd d24 AA FF FF 00 
3a001 d25 C6 FF FF 00 
3a005 d26 E3 FF FF 00 
3a009 d27 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
3a00d d28 00 28 40 00 
3a011 d29 00 3C 60 00 
3a015 d2a 00 50 80 00 
3a019 d2b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
3a01d d2c 00 78 BF 00 
3a021 d2d 00 8C DF 00 
3a025 d2e 00 A0 FF 00 
3a029 d2f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
3a02d d30 39 B5 FF 00 
3a031 d31 55 C0 FF 00 
3a035 d32 71 CA FF 00 
3a039 d33 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
3a03d d34 AA DF FF 00 
3a041 d35 C6 EA FF 00 
3a045 d36 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
3a048 d37 00 00 00 00 
3a04c d38 00          | ataripalette2  file "ataripalettep2.def"
3a04d d38 11 11 11 00 
3a051 d39 22 22 22 00 
3a055 d3a 33 33 33 00 
3a059 d3b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
3a05d d3c 55 55 55 00 
3a061 d3d 66 66 66 00 
3a065 d3e 77 77 77 00 
3a069 d3f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
3a06d d40 99 99 99 00 
3a071 d41 AA AA AA 00 
3a075 d42 BB BB BB 00 
3a079 d43 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
3a07d d44 DD DD DD 00 
3a081 d45 EE EE EE 00 
3a085 d46 FF FF FF 00 
3a089 d47 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
3a08d d48 00 14 40 00 
3a091 d49 00 1E 60 00 
3a095 d4a 00 28 80 00 
3a099 d4b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
3a09d d4c 00 3C BF 00 
3a0a1 d4d 00 46 DF 00 
3a0a5 d4e 00 50 FF 00 
3a0a9 d4f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
3a0ad d50 39 77 FF 00 
3a0b1 d51 55 8A FF 00 
3a0b5 d52 71 9E FF 00 
3a0b9 d53 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
3a0bd d54 AA C5 FF 00 
3a0c1 d55 C6 D8 FF 00 
3a0c5 d56 E3 EC FF 00 
3a0c9 d57 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
3a0cd d58 00 00 40 00 
3a0d1 d59 00 00 60 00 
3a0d5 d5a 00 00 80 00 
3a0d9 d5b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
3a0dd d5c 00 00 BF 00 
3a0e1 d5d 00 00 DF 00 
3a0e5 d5e 00 00 FF 00 
3a0e9 d5f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
3a0ed d60 39 39 FF 00 
3a0f1 d61 55 55 FF 00 
3a0f5 d62 71 71 FF 00 
3a0f9 d63 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
3a0fd d64 AA AA FF 00 
3a101 d65 C6 C6 FF 00 
3a105 d66 E3 E3 FF 00 
3a109 d67 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
3a10d d68 20 00 40 00 
3a111 d69 30 00 60 00 
3a115 d6a 40 00 80 00 
3a119 d6b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
3a11d d6c 60 00 BF 00 
3a121 d6d 70 00 DF 00 
3a125 d6e 80 00 FF 00 
3a129 d6f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
3a12d d70 9C 39 FF 00 
3a131 d71 AA 55 FF 00 
3a135 d72 B8 71 FF 00 
3a139 d73 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
3a13d d74 D5 AA FF 00 
3a141 d75 E3 C6 FF 00 
3a145 d76 F1 E3 FF 00 
3a149 d77 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
3a14d d78 40 00 40 00 
3a151 d79 60 00 60 00 
3a155 d7a 80 00 80 00 
3a159 d7b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
3a15d d7c BF 00 BF 00 
3a161 d7d DF 00 DF 00 
3a165 d7e FF 00 FF 00 
3a169 d7f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
3a16d d80 FF 39 FF 00 
3a171 d81 FF 55 FF 00 
3a175 d82 FF 71 FF 00 
3a179 d83 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
3a17d d84 FF AA FF 00 
3a181 d85 FF C6 FF 00 
3a185 d86 FF E3 FF 00 
3a189 d87 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
3a18d d88 40 00 20 00 
3a191 d89 60 00 30 00 
3a195 d8a 80 00 40 00 
3a199 d8b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
3a19d d8c BF 00 60 00 
3a1a1 d8d DF 00 70 00 
3a1a5 d8e FF 00 80 00 
3a1a9 d8f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
3a1ad d90 FF 39 9C 00 
3a1b1 d91 FF 55 AA 00 
3a1b5 d92 FF 71 B8 00 
3a1b9 d93 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
3a1bd d94 FF AA D5 00 
3a1c1 d95 FF C6 E3 00 
3a1c5 d96 FF E3 F1 00 
3a1c9 d97 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
3a1cd d98 40 00 00 00 
3a1d1 d99 60 00 00 00 
3a1d5 d9a 80 00 00 00 
3a1d9 d9b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
3a1dd d9c BF 00 00 00 
3a1e1 d9d DF 00 00 00 
3a1e5 d9e FF 00 00 00 
3a1e9 d9f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
3a1ed da0 FF 39 39 00 
3a1f1 da1 FF 55 55 00 
3a1f5 da2 FF 71 71 00 
3a1f9 da3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
3a1fd da4 FF AA AA 00 
3a201 da5 FF C6 C6 00 
3a205 da6 FF E3 E3 00 
3a209 da7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
3a20d da8 40 10 00 00 
3a211 da9 60 18 00 00 
3a215 daa 80 20 00 00 
3a219 dab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
3a21d dac BF 30 00 00 
3a221 dad DF 38 00 00 
3a225 dae FF 40 00 00 
3a229 daf FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
3a22d db0 FF 6A 39 00 
3a231 db1 FF 80 55 00 
3a235 db2 FF 95 71 00 
3a239 db3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
3a23d db4 FF BF AA 00 
3a241 db5 FF D5 C6 00 
3a245 db6 FF EA E3 00 
3a249 db7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
3a24d db8 40 20 00 00 
3a251 db9 60 30 00 00 
3a255 dba 80 40 00 00 
3a259 dbb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
3a25d dbc BF 60 00 00 
3a261 dbd DF 70 00 00 
3a265 dbe FF 80 00 00 
3a269 dbf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
3a26d dc0 FF 9C 39 00 
3a271 dc1 FF AA 55 00 
3a275 dc2 FF B8 71 00 
3a279 dc3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
3a27d dc4 FF D5 AA 00 
3a281 dc5 FF E3 C6 00 
3a285 dc6 FF F1 E3 00 
3a289 dc7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
3a28d dc8 40 30 00 00 
3a291 dc9 60 48 00 00 
3a295 dca 80 60 00 00 
3a299 dcb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
3a29d dcc BF 90 00 00 
3a2a1 dcd DF A8 00 00 
3a2a5 dce FF C0 00 00 
3a2a9 dcf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
3a2ad dd0 FF CE 39 00 
3a2b1 dd1 FF D5 55 00 
3a2b5 dd2 FF DC 71 00 
3a2b9 dd3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
3a2bd dd4 FF EA AA 00 
3a2c1 dd5 FF F1 C6 00 
3a2c5 dd6 FF F8 E3 00 
3a2c9 dd7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
3a2cd dd8 30 40 00 00 
3a2d1 dd9 48 60 00 00 
3a2d5 dda 60 80 00 00 
3a2d9 ddb 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
3a2dd ddc 90 BF 00 00 
3a2e1 ddd A8 DF 00 00 
3a2e5 dde C0 FF 00 00 
3a2e9 ddf C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
3a2ed de0 CE FF 39 00 
3a2f1 de1 D5 FF 55 00 
3a2f5 de2 DC FF 71 00 
3a2f9 de3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
3a2fd de4 EA FF AA 00 
3a301 de5 F1 FF C6 00 
3a305 de6 F8 FF E3 00 
3a309 de7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
3a30d de8 00 40 00 00 
3a311 de9 00 60 00 00 
3a315 dea 00 80 00 00 
3a319 deb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
3a31d dec 00 BF 00 00 
3a321 ded 00 DF 00 00 
3a325 dee 00 FF 00 00 
3a329 def 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
3a32d df0 39 FF 39 00 
3a331 df1 55 FF 55 00 
3a335 df2 71 FF 71 00 
3a339 df3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
3a33d df4 AA FF AA 00 
3a341 df5 C6 FF C6 00 
3a345 df6 E3 FF E3 00 
3a349 df7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
3a34d df8 00 40 14 00 
3a351 df9 00 60 1E 00 
3a355 dfa 00 80 28 00 
3a359 dfb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
3a35d dfc 00 BF 3C 00 
3a361 dfd 00 DF 46 00 
3a365 dfe 00 FF 50 00 
3a369 dff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
3a36d e00 39 FF 77 00 
3a371 e01 55 FF 8A 00 
3a375 e02 71 FF 9E 00 
3a379 e03 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
3a37d e04 AA FF C5 00 
3a381 e05 C6 FF D8 00 
3a385 e06 E3 FF EC 00 
3a389 e07 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
3a38d e08 00 40 28 00 
3a391 e09 00 60 3C 00 
3a395 e0a 00 80 50 00 
3a399 e0b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
3a39d e0c 00 BF 78 00 
3a3a1 e0d 00 DF 8C 00 
3a3a5 e0e 00 FF A0 00 
3a3a9 e0f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
3a3ad e10 39 FF B5 00 
3a3b1 e11 55 FF C0 00 
3a3b5 e12 71 FF CA 00 
3a3b9 e13 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
3a3bd e14 AA FF DF 00 
3a3c1 e15 C6 FF EA 00 
3a3c5 e16 E3 FF F4 00 
3a3c9 e17 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
3a3cd e18 00 40 40 00 
3a3d1 e19 00 60 60 00 
3a3d5 e1a 00 80 80 00 
3a3d9 e1b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
3a3dd e1c 00 BF BF 00 
3a3e1 e1d 00 DF DF 00 
3a3e5 e1e 00 FF FF 00 
3a3e9 e1f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
3a3ed e20 39 FF FF 00 
3a3f1 e21 55 FF FF 00 
3a3f5 e22 71 FF FF 00 
3a3f9 e23 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
3a3fd e24 AA FF FF 00 
3a401 e25 C6 FF FF 00 
3a405 e26 E3 FF FF 00 
3a409 e27 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
3a40d e28 00 28 40 00 
3a411 e29 00 3C 60 00 
3a415 e2a 00 50 80 00 
3a419 e2b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
3a41d e2c 00 78 BF 00 
3a421 e2d 00 8C DF 00 
3a425 e2e 00 A0 FF 00 
3a429 e2f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
3a42d e30 39 B5 FF 00 
3a431 e31 55 C0 FF 00 
3a435 e32 71 CA FF 00 
3a439 e33 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
3a43d e34 AA DF FF 00 
3a441 e35 C6 EA FF 00 
3a445 e36 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
3a448 e37             | 
3a448 e37             | '**********************************************************************************
3a448 e37             | '
3a448 e37             | '        Timings and colors definitions
3a448 e37             | '
3a448 e37             | '**********************************************************************************
3a448 e37             | 
3a448 e37             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
3a448 e37 08 00 00 00 
3a44c e38 3C 00 00 00 
3a450 e39 08 00 00 00 
3a454 e3a 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         340500000,   %1_100111__10_1010_1000__1111_1011,   600,        0,     192, 0, 0
3a458 e3b 07 00 00 00 
3a45c e3c 04 00 00 00 
3a460 e3d 01 00 00 00 
3a464 e3e 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
3a468 e3f 58 02 00 00 
3a46c e40 20 9E 4B 14 
3a470 e41 FB A8 9E 01 
3a474 e42 58 02 00 00 | 	byte	$58, $02, $00, $00, $20, $9e, $4b, $14, $fb, $a8, $9e, $01, $58, $02, $00, $00
3a478 e43 00 00 00 00 
3a47c e44 C0 00 00 00 
3a480 e45 00 00 00 00 
3a484 e46 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a488 e47             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
3a488 e47 00 75 C7 97 
3a48c e48 27 47 F6 0A 
3a490 e49 05 79 CB 9B 
3a494 e4a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
3a498 e4b             | 
3a498 e4b             | ''--------  Initialization  ----------------------------------------------------------------
3a498 e4b             | 
3a498 e4b 28 0C 64 FD | hdmi            setq    #6
3a49c e4c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
3a4a0 e4d 28 10 64 FD |                 setq    #8
3a4a4 e4e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
3a4a8 e4f             | 
3a4a8 e4f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
3a4ac e50 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
3a4b0 e51 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
3a4b4 e52 D6 C6 01 F1 |                 add     t1,hbase
3a4b8 e53 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
3a4bc e54 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
3a4c0 e55 7B 0B 80 5F 
3a4c4 e56 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
3a4c8 e57 66 66 86 FF 
3a4cc e58 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
3a4d0 e59             | '
3a4d0 e59 D6 C6 01 F6 |                 mov 	t1,hbase			   '
3a4d4 e5a 11 C6 65 F0 |                 shl 	t1,#17                             '
3a4d8 e5b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
3a4dc e5c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
3a4e0 e5d             | 
3a4e0 e5d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
3a4e4 e5e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
3a4e8 e5f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
3a4ec e60             | 
3a4ec e60             | ''--------  frame rendering main loop  ---------------------------------------------------
3a4ec e60             | 
3a4ec e60 28 06 64 FD | p101            setq 	#3
3a4f0 e61 00 A5 05 FB | 		rdlong  vblankptr,ptra
3a4f4 e62 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
3a4f8 e63 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
3a4fc e64 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
3a500 e65 00 A0 05 F6 |                 mov     dlinum, #0
3a504 e66 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
3a508 e67 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
3a50c e68             | 
3a50c e68             | 
3a50c e68 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
3a510 e69 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
3a514 e6a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
3a518 e6b             |                 
3a518 e6b             | 
3a518 e6b             | 
3a518 e6b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
3a518 e6b             |   
3a518 e6b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
3a51c e6c 29 FE 65 3D |          if_nc  setq2   #255
3a520 e6d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
3a524 e6e             | 
3a524 e6e             | '' -----   up porch (before the picture)
3a524 e6e             | 
3a524 e6e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
3a528 e6f C1 C4 01 F6 |                 mov     hsync1,sync_001	
3a52c e70 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
3a530 e71 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
3a534 e72             |  
3a534 e72             |    
3a534 e72             |  
3a534 e72 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3a538 e73 E2 8C B1 FC |                 xzero   m_sn,hsync1
3a53c e74 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
3a540 e75 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3a544 e76 E1 90 C1 FC |                 xcont   m_vi,hsync0
3a548 e77 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
3a54c e78             | 
3a54c e78 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3a550 e79 E2 8C B1 FC |                 xzero   m_sn,hsync1
3a554 e7a 48 00 B0 FD | 		call    #dli
3a558 e7b E1 8E C1 FC |                 xcont   m_bv,hsync0     
3a55c e7c E1 90 C1 FC |                 xcont   m_vi,hsync0
3a560 e7d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
3a564 e7e             |                 	
3a564 e7e             |                 
3a564 e7e             | 
3a564 e7e             |  
3a564 e7e             | '' ------- the main screen drawing starts here
3a564 e7e             | 
3a564 e7e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
3a568 e7f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
3a56c e80 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
3a570 e81 E1 8E C1 FC |                 xcont   m_bv,hsync0
3a574 e82 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
3a578 e83 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
3a57c e84 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
3a580 e85             |               
3a580 e85             | 
3a580 e85 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
3a584 e86 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
3a588 e87             | 
3a588 e87             | ' ---------------- All visible lines displayed now, start vblank  
3a588 e87             | 
3a588 e87 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
3a58c e88 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
3a590 e89 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
3a594 e8a C3 C4 01 F6 |                 mov     hsync1,sync_223
3a598 e8b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
3a59c e8c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
3a5a0 e8d             | 
3a5a0 e8d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
3a5a0 e8d             | 
3a5a0 e8d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
3a5a0 e8d             | 
3a5a0 e8d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
3a5a4 e8e             | 
3a5a4 e8e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
3a5a8 e8f 04 B8 05 A1 |     if_z        add     dlptr2,#4
3a5ac e90 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
3a5b0 e91             | 
3a5b0 e91 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
3a5b4 e92 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
3a5b8 e93 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
3a5bc e94 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
3a5c0 e95 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
3a5c4 e96             | 
3a5c4 e96 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
3a5c8 e97 DD C6 41 F8 |                 getnib  t1,dl,#0
3a5cc e98 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
3a5d0 e99 70 00 90 AD |     if_z        jmp     #preload
3a5d4 e9a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
3a5d8 e9b 94 00 90 AD |     if_z        jmp     #preload2
3a5dc e9c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
3a5e0 e9d 0C 00 90 AD |     if_z        jmp     #p390
3a5e4 e9e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
3a5e8 e9f 28 00 90 AD |     if_z        jmp     #p391  
3a5ec ea0             | 
3a5ec ea0 2D 00 64 FD | p308            ret
3a5f0 ea1             |    
3a5f0 ea1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
3a5f4 ea2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
3a5f8 ea3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
3a5fc ea4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
3a600 ea5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
3a604 ea6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
3a608 ea7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
3a60c ea8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
3a610 ea9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
3a614 eaa             |  
3a614 eaa             | '' --------  Reload palette. To do 
3a614 eaa             | 
3a614 eaa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
3a618 eab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
3a61c eac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
3a620 ead 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
3a624 eae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
3a628 eaf E0 00 00 FB |         	rdlong  $000, framebuf2         	
3a62c eb0 70 FF 9F FD |         	jmp     #dli                
3a630 eb1             |       
3a630 eb1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
3a630 eb1             | 
3a630 eb1             | 
3a630 eb1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
3a630 eb1             | 
3a630 eb1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
3a634 eb2 E2 8C B1 FC |                 xzero   m_sn,hsync1
3a638 eb3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3a63c eb4 E1 90 C1 FC |                 xcont   m_vi,hsync0
3a640 eb5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
3a644 eb6             |         
3a644 eb6             | '' -------------- Preload a line from PSRAM        
3a644 eb6             |         
3a644 eb6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
3a648 eb7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
3a64c eb8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
3a650 eb9 DE B4 01 F6 |                 mov     buf1,buf1c
3a654 eba 03 A0 05 F7 |                 incmod  dlinum,#3
3a658 ebb             | 
3a658 ebb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
3a65c ebc 32 B7 01 F6 |                 mov     buf2,a1024
3a660 ebd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
3a664 ebe 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
3a668 ebf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
3a66c ec0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
3a670 ec1             |  
3a670 ec1             |  
3a670 ec1             | preload2      '  incmod  dlinum,#3
3a670 ec1 04 C0 45 F0 |                 shr 	framebuf2,#4
3a674 ec2 ED B2 01 F6 |                 mov 	cmd,affffffff
3a678 ec3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
3a67c ec4 28 02 64 FD |                 setq	#1
3a680 ec5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
3a684 ec6             |                 
3a684 ec6             | 
3a684 ec6             | '' -------------- Draw sprites
3a684 ec6             | 
3a684 ec6 CF 5C 02 F6 | sprite          mov t8,frames
3a688 ec7 10 5C 0E F5 | 		and t8,#16 wz
3a68c ec8 11 48 06 F6 |                 mov spritenum, #17			' 16 +2 sprites. Todo: this should be a parameter
3a690 ec9 10 48 06 A6 | 	if_z    mov spritenum, #16	
3a694 eca             | 		
3a694 eca             | 
3a694 eca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
3a698 ecb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
3a69c ecc EF 56 96 F9 |                 alts    t5,#sprite1xy
3a6a0 ecd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
3a6a4 ece 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
3a6a8 ecf EF 56 96 F9 |                 alts    t5,#sprite1xy
3a6ac ed0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
3a6b0 ed1 0F 4C 66 F7 |                 signx	sprite_x,#15
3a6b4 ed2 F0 56 96 F9 |                 alts    t5,#sprite1wh
3a6b8 ed3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
3a6bc ed4 01 52 86 F1 |                 sub     sprite_h,#1
3a6c0 ed5 F0 56 96 F9 |                 alts    t5,#sprite1wh
3a6c4 ed6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
3a6c8 ed7             | 
3a6c8 ed7             | 
3a6c8 ed7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
3a6cc ed8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
3a6d0 ed9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
3a6d4 eda B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
3a6d8 edb 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
3a6dc edc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
3a6e0 edd 00 5E 06 F6 |                 mov 	t9,#0
3a6e4 ede 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
3a6e8 edf 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
3a6ec ee0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
3a6f0 ee1             |      
3a6f0 ee1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
3a6f4 ee2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
3a6f8 ee3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
3a6fc ee4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
3a700 ee5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
3a704 ee6             |                 
3a704 ee6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
3a708 ee7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
3a70c ee8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
3a710 ee9             |   		
3a710 ee9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
3a714 eea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
3a718 eeb             | 
3a718 eeb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
3a71c eec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
3a720 eed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
3a724 eee             |  
3a724 eee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
3a728 eef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
3a72c ef0 10 00 90 CD |      if_c 	jmp     #p899		
3a730 ef1             | 	
3a730 ef1             | 	
3a730 ef1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
3a734 ef2 28 CD 01 F1 | 		add	t4,sprite_w
3a738 ef3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
3a73c ef4             | 
3a73c ef4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
3a740 ef5             | 
3a740 ef5 28 59 02 F6 | p899		mov 	t6,sprite_w
3a744 ef6 01 58 86 F1 | 	 	sub     t6,#1
3a748 ef7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
3a74c ef8             | 
3a74c ef8 28 58 62 FD |                 setq   	t6
3a750 ef9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
3a754 efa 28 5D 02 F6 |                 mov t8,sprite_w
3a758 efb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
3a75c efc 24 00 90 AD |         if_z    jmp #p898
3a760 efd             |          
3a760 efd             |         
3a760 efd 70 5F 06 F6 |                 mov  t9,#368
3a764 efe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
3a768 eff             | 
3a768 eff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
3a76c f00 08 5C 06 FA |                 mul t8,#8				' bits to shr
3a770 f01 FF FF 7F FF 
3a774 f02 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
3a778 f03 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
3a77c f04 00 5E 8E F9 |                 altd t9,#0				' and mask 
3a780 f05 2D 01 00 F5 |                 and 0-0, t7
3a784 f06             |                
3a784 f06             | 
3a784 f06 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
3a788 f07 E5 E0 7A FA |                 wmlong 368,t3				
3a78c f08             |                 
3a78c f08 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
3a790 f09 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
3a794 f0a 2D 00 64 FD |                 ret
3a798 f0b             | 	
3a798 f0b             | 	
3a798 f0b             |                
3a798 f0b             |  
3a798 f0b             | '' -------------- Graphics line ------------------------------------------------------------
3a798 f0b             |  
3a798 f0b             | 
3a798 f0b             | '' consts and vars
3a798 f0b             | 
3a798 f0b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
3a79c f0c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
3a7a0 f0d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
3a7a4 f0e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
3a7a8 f0f             | 
3a7a8 f0f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
3a7ac f10             | 
3a7ac f10             | '------ these longs will be set by setmode function
3a7ac f10             | 
3a7ac f10 00 00 00 00 | m_bs            long    0        'blanks before sync
3a7b0 f11 00 00 00 00 | m_sn            long    0        'sync
3a7b4 f12 00 00 00 00 | m_bv            long    0        'blanks before visible
3a7b8 f13 00 00 00 00 | m_vi            long    0        'visible pixels #
3a7bc f14             | 'm_border        long    0        'left/right borders
3a7bc f14 00 00 00 00 | i_upporch       long    0        'up porch lines
3a7c0 f15 00 00 00 00 | i_vsync         long    0        'vsync lines
3a7c4 f16 00 00 00 00 | i_downporch     long    0        'down porch lines
3a7c8 f17 00 00 00 00 | i_cpl           long    0        'chars/longs per line
3a7cc f18 00 00 00 00 | i_totalvis      long    0
3a7d0 f19             | 
3a7d0 f19             | '-------------------------------------
3a7d0 f19             |  
3a7d0 f19 00 00 00 00 | linenum         long    0
3a7d4 f1a 00 00 00 00 | frames          long    0
3a7d8 f1b 00 00 00 00 | dlinum long 0
3a7dc f1c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
3a7e0 f1d             | 
3a7e0 f1d 00 00 00 00 | vblankptr       long    0
3a7e4 f1e 00 00 00 00 | modeptr         long    0
3a7e8 f1f 00 00 00 00 | paletteptr      long    0
3a7ec f20 00 00 00 00 | dlptr           long    0
3a7f0 f21 01 00 00 00 | hbase           long    1
3a7f4 f22 00 00 00 00 | mailbox         long    0
3a7f8 f23 00 00 00 00 | spriteptr          long 0
3a7fc f24             | 
3a7fc f24 00 00 00 00 | cmd             long    0
3a800 f25 00 EC 07 00 | buf1            long    $80000-1024-4096
3a804 f26 00 04 00 00 | buf2            long    1024
3a808 f27 01 00 00 00 | dlptr2          long    1
3a80c f28 01 00 00 00 | dl              long    1
3a810 f29             | 
3a810 f29 00 00 00 00 | buf1c long 0
3a814 f2a 00 EC 07 00 | buf1d            long    $80000-1024-4096
3a818 f2b 01 00 00 00 | framebuf2       long    1
3a81c f2c 01 00 00 00 | hsync0          long    1
3a820 f2d 01 00 00 00 | hsync1          long    1
3a824 f2e             | 
3a824 f2e 01 00 00 00 | t1              long    1
3a828 f2f 00 00 00 00 | t2 long 0
3a82c f30 00 00 00 00 | t3 long 0
3a830 f31 00 00 00 00 | t4 long 0
3a834 f32             | 
3a834 f32 00 00 00 00 | rcnt            long    0  'dl repeat count
3a838 f33 00 00 00 00 | rcnt2           long    0
3a83c f34 00 00 00 00 | rcnt2a          long    0
3a840 f35 00 00 00 00 | roffset         long    0
3a844 f36 00 00 00 00 | rdl             long    0  'dl repeat line
3a848 f37 00 00 00 00 | dlc             long    0  'dl command
3a84c f38             | 
3a84c f38 FF FF FF FF | affffffff       long    $ffffffff
3a850 f39 00 00 00 00 | sprite1pointer long 0
3a854 f3a 00 00 00 00 | sprite1xy      long 0
3a858 f3b 00 00 00 00 | sprite1wh      long 0
3a85c f3c 00 00 00 00 | sprite2pointer long 0
3a860 f3d 00 00 00 00 | sprite2xy      long 0
3a864 f3e 00 00 00 00 | sprite2wh      long 0
3a868 f3f 00 00 00 00 | sprite3pointer long 0
3a86c f40 00 00 00 00 | sprite3xy      long 0
3a870 f41 00 00 00 00 | sprite3wh      long 0
3a874 f42 00 00 00 00 | sprite4pointer long 0
3a878 f43 00 00 00 00 | sprite4xy      long 0
3a87c f44 00 00 00 00 | sprite4wh      long 0
3a880 f45 00 00 00 00 | sprite5pointer long 0
3a884 f46 00 00 00 00 | sprite5xy      long 0
3a888 f47 00 00 00 00 | sprite5wh      long 0
3a88c f48 00 00 00 00 | sprite6pointer long 0
3a890 f49 00 00 00 00 | sprite6xy      long 0
3a894 f4a 00 00 00 00 | sprite6wh      long 0
3a898 f4b 00 00 00 00 | sprite7pointer long 0
3a89c f4c 00 00 00 00 | sprite7xy      long 0
3a8a0 f4d 00 00 00 00 | sprite7wh      long 0
3a8a4 f4e 00 00 00 00 | sprite8pointer long 0
3a8a8 f4f 00 00 00 00 | sprite8xy      long 0
3a8ac f50 00 00 00 00 | sprite8wh      long 0
3a8b0 f51 00 00 00 00 | sprite9pointer long 0
3a8b4 f52 00 00 00 00 | sprite9xy      long 0
3a8b8 f53 00 00 00 00 | sprite9wh      long 0
3a8bc f54 00 00 00 00 | sprite10pointer long 0
3a8c0 f55 00 00 00 00 | sprite10xy      long 0
3a8c4 f56 00 00 00 00 | sprite10wh      long 0
3a8c8 f57 00 00 00 00 | sprite11pointer long 0
3a8cc f58 00 00 00 00 | sprite11xy      long 0
3a8d0 f59 00 00 00 00 | sprite11wh      long 0
3a8d4 f5a 00 00 00 00 | sprite12pointer long 0
3a8d8 f5b 00 00 00 00 | sprite12xy      long 0
3a8dc f5c 00 00 00 00 | sprite12wh      long 0
3a8e0 f5d 00 00 00 00 | sprite13pointer long 0
3a8e4 f5e 00 00 00 00 | sprite13xy      long 0
3a8e8 f5f 00 00 00 00 | sprite13wh      long 0
3a8ec f60 00 00 00 00 | sprite14pointer long 0
3a8f0 f61 00 00 00 00 | sprite14xy      long 0
3a8f4 f62 00 00 00 00 | sprite14wh      long 0
3a8f8 f63 00 00 00 00 | sprite15pointer long 0
3a8fc f64 00 00 00 00 | sprite15xy      long 0
3a900 f65 00 00 00 00 | sprite15wh      long 0
3a904 f66 00 00 00 00 | sprite16pointer long 0
3a908 f67 00 00 00 00 | sprite16xy      long 0
3a90c f68 00 00 00 00 | sprite16wh      long 0
3a910 f69 00 00 00 00 | sprite17pointer long 0
3a914 f6a 00 00 00 00 | sprite17xy      long 0
3a918 f6b 00 00 00 00 | sprite17wh      long 0
3a91c f6c 00 00 00 00 | sprite18pointer long 0
3a920 f6d 00 00 00 00 | sprite18xy      long 0
3a924 f6e 00 00 00 00 | sprite18wh      long 0
3a928 f6f 00 00 00 00 | spritenum long 0
3a92c f70             | 
3a92c f70 00 00 00 00 | spriteline long 0
3a930 f71 84 03 00 00 | sprite_x long 900
3a934 f72 00 00 00 00 | sprite_y long 0
3a938 f73 10 00 00 00 | sprite_w long 16
3a93c f74 40 00 00 00 | sprite_h long 64
3a940 f75 00 00 00 00 | l2 long 0
3a944 f76 00 00 00 00 | t5 long 0
3a948 f77 00 00 00 00 | t6 long 0
3a94c f78 00 00 00 00 | t7 long 0
3a950 f79 00 00 00 00 | t8 long 0
3a954 f7a 00 00 00 00 | t9 long 0
3a958 f7b 00 00 00 00 | preloadaddr long 0
3a95c f7c 00 00 00 00 | preloadlineaddr long 0
3a960 f7d 00 04 00 00 | a1024 long 1024
3a964 f7e             | 
3a964 f7e E0 03 00 00 | aa long 992
3a968 f7f FF 03 00 00 | a1023 long 1023
3a96c f80 00 10 00 00 | a4096 long 4096
3a970 f81             |  fit 368
3a970 f81             |  fit 368
3a970 f81             | _psram_spin2_dat_
3a970 f81 00 00 00 00 
      ...             
3aa68 fbf 00 00 00 00 
3aa6c fc0 00 00 00 00 |     listdata long 0[8*8]
3aa70 fc1             |             orgh
3aa70                 | 
3aa70                 | ' driver state
3aa70     FF FF FF FF | drivercog   long    -1  ' COG id of driver
3aa74     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
3aa78                 | 
3aa78                 | ' delay profile
3aa78     07 00 00 00 
3aa7c     00 CF 7B 05 
3aa80     80 D1 F0 08 
3aa84     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
3aa88     80 C4 60 0F 
3aa8c     80 39 7A 12 
3aa90     40 2D D9 13 
3aa94     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
3aa98                 | 
3aa98                 | ' data to be passed to driver when starting it
3aa98                 | startupData
3aa98     00 00 00 00 |     long    0           ' current frequency
3aa9c     00 00 00 00 |     long    FLAGS       ' optional flags for driver
3aaa0     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
3aaa4     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
3aaa8     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
3aaac     B8 AA 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
3aab0     38 AB 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
3aab4     58 AB 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
3aab8                 | 
3aab8                 | ' data for memory
3aab8                 | deviceData
3aab8                 |     ' 16 bank parameters follow (16MB per bank)
3aab8     00 00 00 00 
      ...             
3aaf0     00 00 00 00 
3aaf4     00 00 00 00 |     long    0[16]                               ' banks 0-15
3aaf8                 |     ' 16 banks of pin parameters follow
3aaf8     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
3aafc     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
3ab00     FF FF FF FF 
      ...             
3ab30     FF FF FF FF 
3ab34     FF FF FF FF |     long    -1[14]                              ' banks 2-15
3ab38                 | 
3ab38                 | ' data for COG polling
3ab38                 | qosData 
3ab38     00 00 FF FF 
3ab3c     00 00 FF FF 
3ab40     00 00 FF FF 
3ab44     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
3ab48     00 00 FF FF 
3ab4c     00 00 FF FF 
3ab50     00 00 FF FF 
3ab54     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
3ab58                 |     
3ab58                 | ' mailbox storage
3ab58                 | 
3ab58                 | mailboxes
3ab58     00 00 00 00 
      ...             
3abb0     00 00 00 00 
3abb4     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
3abb8                 | 	alignl
3abb8                 | _psram16drv_spin2_dat_
3abb8                 |                             orgh
3abb8     00 00 00 00 
      ...             
3abd0     00 00 00 00 
3abd4     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
3abd8                 | 
3abd8                 | driver_start
3abd8                 |                             org
3abd8 000             | '..................................................................................................
3abd8 000             | ' Memory layout for COG RAM once operational:
3abd8 000             | '
3abd8 000             | '  COG RAM address      Usage
3abd8 000             | '  ---------------      ----
3abd8 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
3abd8 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
3abd8 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
3abd8 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
3abd8 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
3abd8 000             | '  ~$198-$1F3           State and register variables
3abd8 000             | '
3abd8 000             | ' Also during driver COG startup:
3abd8 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
3abd8 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
3abd8 000             | '..................................................................................................
3abd8 000             |                             
3abd8 000             | ' Mailbox storage after vector initialization
3abd8 000             | 
3abd8 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
3abdc 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
3abe0 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
3abe4 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
3abe8 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
3abec 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
3abf0 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
3abf4 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
3abf8 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
3abfc 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
3ac00 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
3ac04 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
3ac08 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
3ac0c 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
3ac10 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
3ac14 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
3ac18 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
3ac1c 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
3ac20 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
3ac24 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
3ac28 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
3ac2c 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
3ac30 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
3ac34 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
3ac38 018             | 
3ac38 018             | ' Mailbox parameter addresses per COG once patched
3ac38 018             |                             
3ac38 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
3ac3c 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
3ac40 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
3ac44 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
3ac48 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
3ac4c 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
3ac50 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
3ac54 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
3ac58 020             | 
3ac58 020             | '..................................................................................................
3ac58 020             | ' Per COG request and state setup and service branching
3ac58 020             |         
3ac58 020             | cog0                 
3ac58 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
3ac5c 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
3ac60 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
3ac64 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
3ac68 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3ac6c 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3ac70 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
3ac74 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
3ac78 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
3ac7c 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3ac80 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3ac84 02b 33 CA 63 FD |                             execf   request-0               'jump to service
3ac88 02c             | cog1                        
3ac88 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
3ac8c 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
3ac90 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
3ac94 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
3ac98 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3ac9c 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3aca0 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
3aca4 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
3aca8 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
3acac 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3acb0 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3acb4 037 33 CA 63 FD |                             execf   request-0               'jump to service
3acb8 038             | cog2                         
3acb8 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
3acbc 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
3acc0 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
3acc4 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
3acc8 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3accc 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3acd0 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
3acd4 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
3acd8 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
3acdc 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3ace0 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3ace4 043 33 CA 63 FD |                             execf   request-0               'jump to service
3ace8 044             | cog3                        
3ace8 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
3acec 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
3acf0 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
3acf4 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
3acf8 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3acfc 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3ad00 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
3ad04 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
3ad08 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
3ad0c 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3ad10 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3ad14 04f 33 CA 63 FD |                             execf   request-0               'jump to service
3ad18 050             | cog4                        
3ad18 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
3ad1c 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
3ad20 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
3ad24 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
3ad28 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3ad2c 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3ad30 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
3ad34 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
3ad38 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
3ad3c 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3ad40 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3ad44 05b 33 CA 63 FD |                             execf   request-0               'jump to service
3ad48 05c             | cog5                        
3ad48 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
3ad4c 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
3ad50 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
3ad54 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
3ad58 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3ad5c 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3ad60 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
3ad64 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
3ad68 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
3ad6c 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3ad70 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3ad74 067 33 CA 63 FD |                             execf   request-0               'jump to service
3ad78 068             | cog6                        
3ad78 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
3ad7c 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
3ad80 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
3ad84 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
3ad88 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3ad8c 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3ad90 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
3ad94 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
3ad98 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
3ad9c 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3ada0 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3ada4 073 33 CA 63 FD |                             execf   request-0               'jump to service
3ada8 074             | cog7                        
3ada8 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
3adac 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
3adb0 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
3adb4 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
3adb8 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3adbc 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3adc0 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
3adc4 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
3adc8 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
3adcc 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3add0 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3add4 07f 33 CA 63 FD |                             execf   request-0               'jump to service
3add8 080             | 
3add8 080             |                             fit     128
3add8 080             |                             fit     128
3add8 080             | pad                         long    0[128-$]                'align init code to $80
3add8 080             | 
3add8 080             | '..................................................................................................
3add8 080             | 
3add8 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
3add8 080             | 
3add8 080             | init                        
3add8 080             |                             ' get driver scratch long address in hub
3add8 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
3addc 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
3ade0 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
3ade4 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
3ade8 084             |                     
3ade8 084             |                             ' read in the additional LUT RAM code
3ade8 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
3adec 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
3adf0 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
3adf4 087             | 
3adf4 087             |                             ' read the startup parameters
3adf4 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
3adf8 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
3adfc 089             | 
3adfc 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
3adfc 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
3ae00 08a             | 
3ae00 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
3ae04 08b 01 00 00 5F 
3ae08 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
3ae0c 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
3ae10 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
3ae14 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
3ae18 090             | 
3ae18 090             |                             ' setup data pin modes and data bus pin group in streamer commands
3ae18 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
3ae1c 091 01 00 00 FF 
3ae20 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
3ae24 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
3ae28 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
3ae2c 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
3ae30 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
3ae34 097 08 DE 47 F5 |                             or      a, #8
3ae38 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
3ae3c 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
3ae40 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
3ae44 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
3ae48 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
3ae4c 09d 01 DE 07 F1 |                             add     a, #1
3ae50 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
3ae54 09f             |  
3ae54 09f             |                             ' setup device control pin states
3ae54 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
3ae58 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
3ae5c 0a1 01 00 00 FF 
3ae60 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
3ae64 0a3             | 
3ae64 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
3ae68 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
3ae6c 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
3ae70 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
3ae74 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
3ae78 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
3ae7c 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
3ae80 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
3ae84 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
3ae88 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
3ae8c 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
3ae90 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
3ae94 0af             | pinloop
3ae94 0af             |                             ' generate minimum CE high time before access
3ae94 0af A1 07 00 FF 
3ae98 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
3ae9c 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
3aea0 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
3aea4 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
3aea8 0b4 1F DE 63 FD |                             waitx   a                       'delay
3aeac 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
3aeb0 0b6             | 
3aeb0 0b6             |                             ' setup the COG mailboxes and addresses 
3aeb0 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
3aeb4 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
3aeb8 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
3aebc 0b9             | 
3aebc 0b9 28 2E 64 FD |                             setq    #24-1
3aec0 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
3aec4 0bb             | 
3aec4 0bb             |                             ' setup the polling loop for active COGs 
3aec4 0bb 01 C2 63 FD |                             cogid   id
3aec8 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
3aecc 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
3aed0 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
3aed4 0bf 0A F0 07 F6 |                             mov     ptra, #10
3aed8 0c0 E1 F1 03 FA |                             mul     ptra, id
3aedc 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
3aee0 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
3aee4 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
3aee8 0c4 03 C2 07 FA |                             mul     id, #3
3aeec 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
3aef0 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
3aef4 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
3aef8 0c8 D8 01 B0 FD |                             call    #reloadcogs
3aefc 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
3af00 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
3af04 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
3af04 0cb D8 E5 B7 F9 |                             setd    d, #addr1
3af08 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
3af0c 0cd 08 04 DC FC |                             rep     #2, #8
3af10 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
3af14 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
3af18 0d0             | 
3af18 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
3af18 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
3af18 0d0 01 C2 63 FD |                             cogid   id
3af1c 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
3af20 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
3af24 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
3af28 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
3af2c 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
3af30 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
3af34 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
3af38 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
3af3c 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
3af40 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3af44 0db 3F E4 A7 F9 |                             alti    d, #%111_111
3af48 0dc 00 00 00 F6 |                             mov     0-0, 0-0
3af4c 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
3af50 0de A5 E5 03 F1 |                             add     d, const512
3af54 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3af58 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
3af5c 0e1 00 00 00 F6 |                             mov     0-0, 0-0
3af60 0e2             |                             
3af60 0e2             |                             ' setup register values for control vector loop setup after we return
3af60 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
3af64 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
3af68 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
3af6c 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
3af70 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
3af74 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
3af78 0e8 D0 C3 8F F9 |                             altd    id, #id0
3af7c 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
3af80 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
3af84 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
3af88 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
3af8c 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
3af90 0ee             |  
3af90 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
3af94 0ef 07 CA 07 F5 |                             and     request, #7
3af98 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
3af9c 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
3afa0 0f2             | 
3afa0 0f2             |                             fit     $100                    'ensure all init code fits this space
3afa0 0f2             |                             fit     $100                    'ensure all init code fits this space
3afa0 0f2             | 
3afa0 0f2 00 00 00 00 
      ...             
3afd0 0fe 00 00 00 00 
3afd4 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
3afd8 100             | 
3afd8 100             | '..................................................................................................
3afd8 100             | ' Error result handling and COG notification of request completion
3afd8 100             | 
3afd8 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
3afdc 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
3afe0 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
3afe4 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
3afe8 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
3afec 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
3aff0 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
3aff4 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
3aff8 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
3affc 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
3b000 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
3b004 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
3b008 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
3b00c 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
3b010 10e             | ' Poller re-starts here after a COG is serviced
3b010 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
3b014 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
3b018 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
3b01c 111             | ' Main dynamic polling loop repeats until a request arrives
3b01c 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
3b020 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
3b024 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
3b028 114             | 
3b028 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
3b02c 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
3b030 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
3b034 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
3b038 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
3b03c 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
3b040 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
3b044 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
3b048 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
3b04c 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
3b050 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
3b054 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
3b058 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
3b05c 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
3b060 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
3b064 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
3b068 124             | 
3b068 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
3b06c 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
3b070 126             |  
3b070 126             | '..................................................................................................
3b070 126             | ' List handler                               
3b070 126             | 
3b070 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
3b074 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
3b078 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
3b07c 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
3b080 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
3b084 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
3b088 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
3b08c 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
3b090 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
3b094 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
3b098 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
3b09c 131 33 00 60 FD |                             execf   0-0                     'process the request 
3b0a0 132             | 
3b0a0 132             | '..................................................................................................
3b0a0 132             | ' Restoring per COG state and resuming where we left off
3b0a0 132             | 
3b0a0 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
3b0a4 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
3b0a8 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
3b0ac 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
3b0b0 136 D8 CB FB F8 |                             getbyte request, addr1, #3
3b0b4 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
3b0b8 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
3b0bc 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
3b0c0 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
3b0c4 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
3b0c8 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
3b0cc 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
3b0d0 13e             |                    
3b0d0 13e             | '..................................................................................................
3b0d0 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
3b0d0 13e             | 
3b0d0 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
3b0d4 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
3b0d8 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
3b0dc 141 D0 DF B7 F9 |                             setd    a, #id0
3b0e0 142 D8 DF BF F9 |                             sets    a, #addr1
3b0e4 143 FE FF FF FF 
3b0e8 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
3b0ec 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
3b0f0 146 3F DE A7 F9 |                             alti    a, #%111_111 
3b0f4 147 00 00 F0 F9 |                             muxq    0-0, 0-0
3b0f8 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
3b0fc 149 01 E2 63 FD |                             cogid   c
3b100 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
3b104 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
3b108 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
3b10c 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
3b110 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
3b114 14f 00 E0 03 F6 |                             mov     b, 0-0
3b118 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
3b11c 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
3b120 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
3b124 153 0C 00 90 AD |             if_z            jmp     #excluded               
3b128 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
3b12c 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
3b130 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
3b134 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
3b138 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
3b13c 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
3b140 15a             | 
3b140 15a             | 'determine priority cogs and build instructions for the polling sequence
3b140 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
3b144 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
3b148 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
3b14c 15d             | 
3b14c 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
3b150 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
3b154 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
3b158 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
3b15c 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
3b160 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
3b164 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
3b168 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
3b16c 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
3b170 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
3b174 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
3b178 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
3b17c 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
3b180 16a             | endprioloop
3b180 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
3b184 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
3b188 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
3b18c 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
3b190 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
3b194 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
3b198 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
3b19c 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
3b1a0 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
3b1a4 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
3b1a8 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
3b1ac 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
3b1b0 176             | 
3b1b0 176             | ' populate the round robin COG polling instructions
3b1b0 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
3b1b4 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
3b1b8 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
3b1bc 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
3b1c0 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
3b1c4 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
3b1c8 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
3b1cc 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
3b1d0 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
3b1d4 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
3b1d8 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
3b1dc 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
3b1e0 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
3b1e4 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
3b1e8 184             | '..................................................................................................
3b1e8 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
3b1e8 184             | 
3b1e8 184             | set_latency                                                 '            (a) set latency
3b1e8 184             | get_latency                                                 '            (b) get latency
3b1e8 184             | set_burst                                                   '            (c) set burst size of bank
3b1e8 184             | get_burst                                                   '            (d) get burst size of bank
3b1e8 184             |                                                             '            (e) dump state
3b1e8 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
3b1ec 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
3b1f0 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
3b1f4 187             |                                                             ' | | | | e  account for following AUGS
3b1f4 187 04 00 00 FF 
3b1f8 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
3b1fc 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
3b200 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
3b204 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
3b208 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
3b20c 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
3b210 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
3b214 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
3b218 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
3b21c 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
3b220 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
3b224 193             | 
3b224 193             | '..................................................................................................
3b224 193             | ' Misc EXECF code
3b224 193             | 
3b224 193 33 72 63 FD | start_read_exec             execf   newburstr
3b228 194 33 7C 63 FD | start_write_exec            execf   resumewrites
3b22c 195 33 78 63 FD | continue_read_exec          execf   lockedreads
3b230 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
3b234 197             | 
3b234 197             | '..................................................................................................
3b234 197             | ' Variables
3b234 197             | 
3b234 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
3b238 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
3b23c 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
3b240 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
3b244 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
3b248 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
3b24c 19d             | 
3b24c 19d 00 00 00 80 | xfreq1          long    $80000000
3b250 19e 00 00 00 40 | xfreq2          long    $40000000
3b254 19f 03 00 00 00 | delay           long    3
3b258 1a0             | 
3b258 1a0             | lutcodeaddr                 
3b258 1a0             | startupparams
3b258 1a0             | excludedcogs                                    'careful: shared register use!
3b258 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
3b25c 1a1 00 00 00 00 | flags           long    0
3b260 1a2             | mask                                            'careful: shared register use!
3b260 1a2 00 00 00 00 | resetmaskA      long    0
3b264 1a3             | limit                                           'careful: shared register use!
3b264 1a3 00 00 00 00 | resetmaskB      long    0
3b268 1a4 00 00 00 00 | datapins        long    0
3b26c 1a5             | const512                                        'careful: shared register use!
3b26c 1a5 00 00 00 00 | devicelist      long    0
3b270 1a6 00 00 00 00 | coglist         long    0
3b274 1a7 00 00 00 00 | mbox            long    0 
3b278 1a8             | 
3b278 1a8             | clkpin                                          'shared with code patched during init
3b278 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
3b27c 1a9             | cspin                                           'shared with code patched during init
3b27c 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
3b280 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
3b284 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
3b288 1ac 01 00 00 00 | clkdelay        long    1
3b28c 1ad 00 00 00 00 | regdatabus      long    0
3b290 1ae             | 
3b290 1ae 10 00 00 00 | deviceaddr      long    $10
3b294 1af             | rrcounter
3b294 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
3b298 1b0             | 
3b298 1b0             | ' jump addresses for the per COG handlers
3b298 1b0 20 00 00 00 | cog0_handler    long    cog0
3b29c 1b1 2C 00 00 00 | cog1_handler    long    cog1
3b2a0 1b2 38 00 00 00 | cog2_handler    long    cog2
3b2a4 1b3 44 00 00 00 | cog3_handler    long    cog3
3b2a8 1b4 50 00 00 00 | cog4_handler    long    cog4
3b2ac 1b5 5C 00 00 00 | cog5_handler    long    cog5
3b2b0 1b6 68 00 00 00 | cog6_handler    long    cog6
3b2b4 1b7 74 00 00 00 | cog7_handler    long    cog7
3b2b8 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
3b2bc 1b9             | 
3b2bc 1b9             | ' EXECF sequences
3b2bc 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
3b2c0 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
3b2c4 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
3b2c8 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
3b2cc 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
3b2d0 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
3b2d4 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
3b2d8 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
3b2d8 1c0             | 
3b2d8 1c0             | 
3b2d8 1c0             | ' SKIPF sequences
3b2d8 1c0             | skiptable
3b2d8 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
3b2dc 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
3b2e0 1c2 00 00 00 00 |                 long    0                      ' read modify write long
3b2e4 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
3b2e8 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
3b2ec 1c5 00 00 00 00 | pattern2        long    0
3b2f0 1c6 00 00 00 00 | pattern3        long    0
3b2f4 1c7 77 02 00 00 | singlelong      long    %1001110111  
3b2f8 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
3b2fc 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
3b300 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
3b304 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
3b308 1cc             | 
3b308 1cc             | ' LUT RAM address values
3b308 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
3b30c 1cd DD 02 00 00 | continue_read   long    continue_read_lut
3b310 1ce DB 02 00 00 | continue_write  long    continue_write_lut
3b314 1cf F6 02 00 00 | noread          long    noread_lut
3b318 1d0             | 
3b318 1d0 00 00 00 00 | id0             long    0
3b31c 1d1 01 00 00 00 | id1             long    1
3b320 1d2 02 00 00 00 | id2             long    2
3b324 1d3 03 00 00 00 | id3             long    3
3b328 1d4 04 00 00 00 | id4             long    4
3b32c 1d5 05 00 00 00 | id5             long    5
3b330 1d6 06 00 00 00 | id6             long    6
3b334 1d7 07 00 00 00 | id7             long    7
3b338 1d8             | 
3b338 1d8             | 'These next 10 request registers below are also temporarily reused during init 
3b338 1d8             | 'and COG updates and need to follow immediately after id0-id7
3b338 1d8 00 00 00 00 | addr1           long    0
3b33c 1d9 00 00 00 00 | hubdata         long    0
3b340 1da 00 00 00 00 | count           long    0
3b344 1db 00 00 00 00 | addr2           long    0
3b348 1dc 00 00 00 00 | total           long    0
3b34c 1dd 00 00 00 00 | offset1         long    0
3b350 1de 00 00 00 00 | offset2         long    0
3b354 1df 00 00 00 00 | link            long    0
3b358 1e0             | 
3b358 1e0             | burstwrite                                      'note shared register use during init
3b358 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
3b35c 1e1 00 00 00 00 | id              long    0
3b360 1e2             | 
3b360 1e2 00 00 00 00 | header          long    0
3b364 1e3 00 00 00 00 | trailer         long    0
3b368 1e4 00 00 00 00 | cmdaddr         long    0
3b36c 1e5 00 00 00 00 | request         long    0
3b370 1e6 00 00 00 00 | rrlimit         long    0
3b374 1e7 00 00 00 00 | pinconfig       long    0
3b378 1e8 00 00 00 00 | clks            long    0
3b37c 1e9 00 00 00 00 | resume          long    0
3b380 1ea 00 00 00 00 | orighubsize     long    0
3b384 1eb 00 00 00 00 | wrclks          long    0
3b388 1ec             | 
3b388 1ec 00 00 00 00 | pattern         long    0
3b38c 1ed 00 00 00 00 | hubscratch      long    0
3b390 1ee 00 10 00 00 | val4k           long    4096
3b394 1ef             | 
3b394 1ef             | ' temporary general purpose regs
3b394 1ef 00 00 00 00 | a               long    0
3b398 1f0 00 00 00 00 | b               long    0
3b39c 1f1 00 00 00 00 | c               long    0
3b3a0 1f2 00 00 00 00 | d               long    0
3b3a4 1f3             | 
3b3a4 1f3             |                 fit     502
3b3a4 1f3             |                 fit     502
3b3a4 1f3             | 
3b3a4 1f3             | '..................................................................................................
3b3a4 1f3             | 
3b3a4 1f3             |             orgh
3b3a4                 | 
3b3a4                 | lut_code
3b3a4                 | 'HW init code up to 80 longs
3b3a4                 | 
3b3a4                 | '..................................................................................................
3b3a4                 | ' Memory layout for LUT RAM once operational:
3b3a4                 | '
3b3a4                 | '  LUT RAM address      Usage
3b3a4                 | '  ---------------      ----
3b3a4                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
3b3a4                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
3b3a4                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
3b3a4                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
3b3a4                 | '
3b3a4                 | ' Also during driver COG startup:
3b3a4                 | ' $230-$24F is used for HW init setup
3b3a4                 | ' $250-$26F is used as temporary vector storage 
3b3a4                 | '..................................................................................................
3b3a4                 | 
3b3a4                 |                 org $230    
3b3a4 230             | 
3b3a4 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
3b3a4 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
3b3a8 231 24 16 60 FD |                             pollxfi
3b3ac 232 FF AA 2A FF 
3b3b0 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
3b3b4 234 28 00 B0 FD |                             call    #sendqspi
3b3b8 235 07 F8 07 FF 
3b3bc 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
3b3c0 237 28 00 B0 FD |                             call    #sendspi
3b3c4 238 F8 07 78 FF 
3b3c8 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
3b3cc 23a 1C 00 B0 FD |                             call    #sendspi
3b3d0 23b 7F 78 78 FF 
3b3d4 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
3b3d8 23d 10 00 B0 FD |                             call    #sendspi 
3b3dc 23e 2D 00 64 FD |                             ret
3b3e0 23f             | 
3b3e0 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
3b3e4 240 32 0C 64 FD |                             skipf   #%110
3b3e8 241 9C EF 03 F6 |                             mov     pb, xsendimm
3b3ec 242             | 
3b3ec 242 10 D0 07 F6 | sendspi                     mov     clks, #16
3b3f0 243 97 EF 03 F6 |                             mov     pb, ximm8lut
3b3f4 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
3b3f8 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3b3fc 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
3b400 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
3b404 248 24 36 60 FD |                             waitxfi                         'wait for the completion
3b408 249 50 48 63 FD |                             fltl    datapins                'float data bus
3b40c 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
3b410 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
3b414 24c             | 
3b414 24c 00 00 00 00 
3b418 24d 00 00 00 00 
3b41c 24e 00 00 00 00 
3b420 24f 00 00 00 00 |                 long    0[$270-32-$]
3b424 250             |     
3b424 250             |                 fit     $270-32  ' keep room for 32 vector longs
3b424 250             |                 fit     $270-32  ' keep room for 32 vector longs
3b424 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
3b424 250             | rw_vect ' PSRAM jump vectors
3b424 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3b428 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3b42c 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3b430 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3b434 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
3b438 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
3b43c 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
3b440 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
3b444 258             | ro_vect ' R/O PSRAM jump vectors
3b444 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3b448 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3b44c 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3b450 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3b454 25c 00 01 00 00 |                 long    unsupported
3b458 25d 00 01 00 00 |                 long    unsupported
3b45c 25e 00 01 00 00 |                 long    unsupported
3b460 25f 00 01 00 00 |                 long    unsupported
3b464 260             | ctrl_vect ' Control jump vectors
3b464 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
3b468 261 00 01 00 00 |                 long    unsupported
3b46c 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
3b470 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
3b474 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
3b478 265 00 01 00 00 |                 long    unsupported
3b47c 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
3b480 267 3E 01 00 00 |                 long    reconfig 
3b484 268             | no_vect ' Invalid bank jump vectors
3b484 268 01 01 00 00 |                 long    invalidbank
3b488 269 01 01 00 00 |                 long    invalidbank
3b48c 26a 01 01 00 00 |                 long    invalidbank
3b490 26b 01 01 00 00 |                 long    invalidbank
3b494 26c 01 01 00 00 |                 long    invalidbank
3b498 26d 01 01 00 00 |                 long    invalidbank
3b49c 26e 01 01 00 00 |                 long    invalidbank
3b4a0 26f 01 01 00 00 |                 long    invalidbank
3b4a4 270             | 
3b4a4 270             |                 fit     $270
3b4a4 270             |                 fit     $270
3b4a4 270             | '..................................................................................................
3b4a4 270             | ' PSRAM READS
3b4a4 270             |                                                             ' a b c d e f
3b4a4 270             |                                                             ' B W L B R L  (a) byte read
3b4a4 270             |                                                             ' Y O O U E O  (b) word read
3b4a4 270             |                                                             ' T R N R S C  (c) long read
3b4a4 270             |                                                             ' E D G S U K  (d) new burst read
3b4a4 270             |                                                             '       T M E  (e) resumed sub-burst
3b4a4 270             |                                                             '         E D  (f) locked sub-burst
3b4a4 270             | 
3b4a4 270             | 
3b4a4 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
3b4a8 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
3b4ac 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
3b4b0 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
3b4b4 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
3b4b8 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
3b4bc 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
3b4c0 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
3b4c4 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
3b4c8 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
3b4cc 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
3b4d0 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
3b4d4 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
3b4d8 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
3b4dc 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
3b4e0 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
3b4e4 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
3b4e8 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
3b4ec 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
3b4f0 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
3b4f4 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
3b4f8 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
3b4fc 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
3b500 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
3b504 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
3b508 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
3b50c 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
3b510 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
3b514 28c             | 
3b514 28c             |                             ' fall through to read bursts
3b514 28c             |                         
3b514 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
3b514 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
3b518 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3b51c 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3b520 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3b524 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
3b528 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
3b52c 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
3b530 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
3b534 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
3b538 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
3b53c 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
3b540 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
3b544 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
3b548 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
3b54c 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
3b550 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
3b554 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
3b558 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
3b55c 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
3b560 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
3b564 2a0 E8 D1 03 F1 |                             add     clks, clks
3b568 2a1             | readcommon
3b568 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
3b56c 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3b570 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
3b574 2a4             | 
3b574 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3b578 2a5 69 C8 63 FD |                             rev     cmdaddr
3b57c 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3b580 2a7 61 C8 63 FD |                             mergeb  cmdaddr
3b584 2a8             | 
3b584 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
3b588 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
3b58c 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
3b58c 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
3b590 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
3b594 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
3b598 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
3b59c 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
3b59c 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
3b5a0 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
3b5a4 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
3b5a8 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
3b5ac 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
3b5b0 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
3b5b4 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
3b5b4 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
3b5b8 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
3b5bc 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
3b5c0 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
3b5c4 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
3b5c8 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
3b5cc 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
3b5d0 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
3b5d4 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
3b5d8 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
3b5dc 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
3b5e0 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
3b5e4 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
3b5e8 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
3b5ec 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
3b5ec 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
3b5f0 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
3b5f4 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
3b5f8 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
3b5fc 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
3b600 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
3b604 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
3b608 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
3b60c 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
3b610 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
3b614 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
3b618 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
3b61c 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
3b620 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
3b624 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
3b628 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
3b62c 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
3b630 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
3b634 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
3b638 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
3b63c 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
3b640 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
3b644 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
3b648 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
3b64c 2da 10 03 90 FD |                             jmp     #writecommon
3b650 2db             | 
3b650 2db             | '..................................................................................................
3b650 2db             | ' Burst continuation testing
3b650 2db             | 
3b650 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
3b654 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
3b658 2dd             | continue_read_lut          
3b658 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
3b65c 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
3b660 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
3b664 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
3b668 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
3b66c 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
3b670 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
3b674 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
3b678 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
3b67c 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
3b680 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
3b684 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
3b688 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
3b68c 2ea             | 
3b68c 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
3b690 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
3b694 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
3b698 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
3b69c 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
3b6a0 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
3b6a4 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
3b6a8 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
3b6ac 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
3b6b0 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
3b6b4 2f4 2A 1C 66 0D |             _ret_           push    #poller
3b6b8 2f5             | 
3b6b8 2f5             | 
3b6b8 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
3b6bc 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
3b6bc 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
3b6c0 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
3b6c4 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
3b6c8 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
3b6cc 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
3b6d0 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
3b6d4 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
3b6d8 2fd 2D 00 64 FD |                             ret                             ' | continue processing
3b6dc 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
3b6e0 2ff             | '..................................................................................................
3b6e0 2ff             | ' Completion of requests
3b6e0 2ff             | 
3b6e0 2ff             | complete_rw_lut             
3b6e0 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
3b6e4 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
3b6e8 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
3b6ec 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
3b6f0 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
3b6f4 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
3b6f8 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
3b6fc 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
3b700 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
3b704 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
3b708 309 32 62 64 AD |             if_z            skipf   #%110001
3b70c 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
3b710 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
3b714 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
3b718 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
3b71c 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
3b720 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
3b724 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
3b728 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
3b72c 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
3b730 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
3b734 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
3b738 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
3b73c 316             |                                                             ' skipcase (a) gfx copy to/from hub
3b73c 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
3b73c 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
3b73c 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
3b740 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
3b744 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
3b748 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
3b74c 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
3b750 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
3b754 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
3b758 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
3b75c 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
3b760 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
3b764 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
3b768 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
3b76c 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
3b770 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
3b774 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
3b778 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
3b77c 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
3b780 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
3b784 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
3b788 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
3b78c 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
3b790 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
3b794 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
3b798 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
3b79c 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
3b7a0 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
3b7a4 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
3b7a8 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
3b7ac 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
3b7b0 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
3b7b4 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
3b7b8 335 DF B7 03 A6 |             if_z            mov     addr2, link
3b7bc 336 34 FF 9F AD |             if_z            jmp     #checknext
3b7c0 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
3b7c4 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3b7c8 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
3b7cc 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
3b7d0 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
3b7d4 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
3b7d8 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
3b7dc 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
3b7e0 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
3b7e4 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
3b7e8 341             | 
3b7e8 341             | '..................................................................................................
3b7e8 341             | ' PSRAM WRITES
3b7e8 341             |                                                             '  a b c d e f g h
3b7e8 341             | 
3b7e8 341             |                                                             '  B W L F B R L L (a) byte write(s)
3b7e8 341             |                                                             '  Y O O I U E O O (b) word write(s)
3b7e8 341             |                                                             '  T R N L R S C C (c) long write(s)
3b7e8 341             |                                                             '  E D G L S U K K (d) resumed fill
3b7e8 341             |                                                             '          T M E E (e) new burst write
3b7e8 341             |                                                             '            E D D (f) resumed burst
3b7e8 341             |                                                             '              F B (g) locked fill
3b7e8 341             |                                                             '              I U (h) locked burst write
3b7e8 341             |                                                             '              L R 
3b7e8 341             |                                                             '              L S 
3b7e8 341             |                                                             '                T 
3b7e8 341             | 
3b7e8 341             | w_single                   
3b7e8 341             | w_fill_cont           
3b7e8 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
3b7ec 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
3b7f0 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
3b7f4 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
3b7f8 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
3b7fc 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
3b800 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
3b804 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
3b808 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
3b80c 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
3b810 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
3b814 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
3b818 34d             |                ' disable call to r_resume_burst for single longs when z=0
3b818 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
3b81c 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
3b820 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
3b824 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
3b828 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
3b82c 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
3b830 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
3b834 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
3b838 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
3b83c 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
3b840 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
3b844 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
3b848 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
3b84c 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
3b850 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
3b854 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
3b858 35d             |         
3b858 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
3b858 35d             |             '
3b858 35d             |             '  At least one of these 3 optional components will be sent
3b858 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
3b858 35d             |             '     body - N x full longs of data
3b858 35d             |             '     trailer - last partial long of data
3b858 35d             |             '
3b858 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
3b858 35d             |             '
3b858 35d             |             'Case    Type                           Sends
3b858 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
3b858 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
3b858 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
3b858 35d             |             ' 4)     Multiple long fill             body only
3b858 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
3b858 35d             | 
3b858 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
3b858 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
3b85c 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3b860 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3b864 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3b868 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
3b86c 362 13 8C 07 F6 |                             mov     pattern3, #%10011
3b870 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
3b874 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
3b878 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
3b87c 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
3b880 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
3b884 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
3b888 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
3b88c 36a             |                             
3b88c 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3b890 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
3b894 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
3b898 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
3b89c 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
3b8a0 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
3b8a4 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
3b8a8 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
3b8ac 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
3b8b0 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
3b8b4 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
3b8b8 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
3b8bc 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
3b8c0 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
3b8c4 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
3b8c8 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
3b8cc 37a             | 
3b8cc 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3b8d0 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
3b8d4 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
3b8d8 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
3b8dc 37e             |                  
3b8dc 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
3b8e0 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
3b8e4 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
3b8e8 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
3b8ec 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
3b8f0 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
3b8f4 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
3b8f8 385             | 
3b8f8 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
3b8fc 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
3b900 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
3b904 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
3b908 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
3b90c 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
3b910 38b             | 
3b910 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
3b910 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
3b914 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
3b918 38d 2A B0 63 FD |                             push    addr1                   'save address
3b91c 38e             | 
3b91c 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
3b91c 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
3b920 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
3b924 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
3b928 391             |             
3b928 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
3b92c 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
3b930 393 2B B0 63 FD |                             pop     addr1                   'restore address
3b934 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
3b938 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
3b93c 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
3b940 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
3b944 398             | 
3b944 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
3b948 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
3b94c 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
3b950 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
3b954 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
3b958 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
3b95c 39e             | 
3b95c 39e             |                             'trailer is done
3b95c 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
3b960 39f             | 
3b960 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
3b964 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3b968 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
3b96c 3a2             | 
3b96c 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3b970 3a3 69 C8 63 FD |                             rev     cmdaddr                 
3b974 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3b978 3a5 61 C8 63 FD |                             mergeb  cmdaddr
3b97c 3a6             |                             
3b97c 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
3b980 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3b984 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
3b988 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
3b98c 3aa             |                                                          
3b98c 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
3b990 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
3b994 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
3b998 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
3b99c 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
3b9a0 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
3b9a4 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
3b9a8 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
3b9ac 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
3b9b0 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
3b9b4 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
3b9b8 3b5             |  
3b9b8 3b5 59 52 63 FD |                             drvh    cspin
3b9bc 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
3b9c0 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
3b9c4 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
3b9c8 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
3b9cc 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
3b9d0 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
3b9d4 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
3b9d8 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
3b9dc 3be EA E5 03 F6 |                             mov     d, orighubsize
3b9e0 3bf EF E5 63 F0 |                             shl     d, a
3b9e4 3c0 F2 E3 83 F1 |                             sub     c, d
3b9e8 3c1 DD E3 03 F1 |                             add     c, offset1
3b9ec 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
3b9f0 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
3b9f4 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
3b9f8 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
3b9fc 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
3ba00 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
3ba04 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
3ba08 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3ba0c 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
3ba10 3cb BB D3 03 F6 |                             mov     resume, restorefill
3ba14 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
3ba18 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
3ba1c 3ce 6C FC BF CD |             if_c            call    #yield
3ba20 3cf 2D 00 64 FD |                             ret
3ba24 3d0             |                            
3ba24 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
3ba24 3d0             |                       '     rczl    pa                      'rotate left into address offset
3ba24 3d0             |                       '     rczl    c wcz                   'restore count and flags
3ba24 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
3ba28 3d1 02 EC 67 F0 |                             shl     pa, #2
3ba2c 3d2 28 06 64 AD |             if_z            setq    #3
3ba30 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
3ba34 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
3ba38 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
3ba3c 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
3ba40 3d7             | 
3ba40 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
3ba44 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
3ba48 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
3ba4c 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
3ba50 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
3ba54 3dc             |         
3ba54 3dc             | 
3ba54 3dc             | '..................................................................................................
3ba54 3dc             | 
3ba54 3dc             |                 fit 1024-32
3ba54 3dc             |                 fit 1024-32
3ba54 3dc 00 00 00 00 
3ba58 3dd 00 00 00 00 
3ba5c 3de 00 00 00 00 
3ba60 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
3ba64 3e0             |                 org 1024-32
3ba64 000             | 
3ba64 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
3ba64 000 00 00 00 00 |                 long $0000
3ba68 001 11 11 00 00 |                 long $1111
3ba6c 002 22 22 00 00 |                 long $2222
3ba70 003 33 33 00 00 |                 long $3333
3ba74 004 44 44 00 00 |                 long $4444
3ba78 005 55 55 00 00 |                 long $5555
3ba7c 006 66 66 00 00 |                 long $6666
3ba80 007 77 77 00 00 |                 long $7777
3ba84 008 88 88 00 00 |                 long $8888
3ba88 009 99 99 00 00 |                 long $9999
3ba8c 00a AA AA 00 00 |                 long $aaaa
3ba90 00b BB BB 00 00 |                 long $bbbb
3ba94 00c CC CC 00 00 |                 long $cccc
3ba98 00d DD DD 00 00 |                 long $dddd
3ba9c 00e EE EE 00 00 |                 long $eeee
3baa0 00f FF FF 00 00 |                 long $ffff
3baa4 010             | 
3baa4 010             | 'masks
3baa4 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
3baa8 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
3baac 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
3bab0 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
3bab4 014             | 
3bab4 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
3bab8 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
3babc 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
3bac0 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
3bac4 018             | 
3bac4 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
3bac8 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
3bacc 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
3bad0 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
3bad4 01c             | 
3bad4 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
3bad8 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
3badc 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
3bae0 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
3bae4 020             | 
3bae4 020             |         fit 1024
3bae4 020             |         fit 1024
3bae4 020             | 
3bae4 020             | '--------------------------------------------------------------------------------------------------
3bae4 020             |         orgh
3bae4                 | 
3bae4                 | gfxexpansion
3bae4                 |                             'simple line drawing graphics expansion of memory driver
3bae4                 |                             'jmp     #donerepeats                'just return for now
3bae4                 | 
3bae4     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
3bae8     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
3baec     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
3baf0     DD E1 03 F6 |                             mov     b, offset1              'get error term
3baf4     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
3baf8     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
3bafc     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
3bb00     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
3bb04     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
3bb08     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
3bb0c     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
3bb10     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
3bb14     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
3bb18     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
3bb1c     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
3bb20     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
3bb24     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
3bb28     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
3bb2c     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
3bb30     DC E5 33 F9 |                             getword d, total, #0            'get line width
3bb34     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
3bb38     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
3bb3c     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
3bb40     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
3bb44     C3 03 80 FD |                             jmp     #readmask               'continue filling
3bb48                 | 	alignl
3bb48                 | _usbnew_spin2_dat_
3bb48                 |                 org     $000
3bb48 000             | 
3bb48 000             | usb_host_start
3bb48 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
3bb4c 001             | 
3bb4c 001 03 00 00 FF 
3bb50 002 D0 72 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
3bb54 003 02 72 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
3bb58 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
3bb5c 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
3bb60 006 29 72 63 FD |                 setq2   htmp
3bb64 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
3bb68 008             | 
3bb68 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
3bb6c 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
3bb70 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
3bb74 00b             | 
3bb74 00b             | '------------------------------------------------------------------------------
3bb74 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
3bb74 00b             | ' special because the receiving function must not respond with either STALL or
3bb74 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
3bb74 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
3bb74 00b             | ' corrupt packet, it must ignore the transaction
3bb74 00b             | '------------------------------------------------------------------------------
3bb74 00b             | ' On entry:
3bb74 00b             | '   PTRA - start address of the SETUP data struct.
3bb74 00b             | ' On exit:
3bb74 00b             | '   retval - PID_ACK on success, otherwise error code.
3bb74 00b             | '------------------------------------------------------------------------------
3bb74 00b             | txn_setup
3bb74 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
3bb78 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
3bb7c 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
3bb80 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
3bb84 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
3bb88 010             | .setup
3bb88 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
3bb8c 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3bb90 012 2D 00 64 AD |         if_z    ret
3bb94 013 7C 0B B0 FD |                 call    #retry_wait
3bb98 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3bb9c 015 2D 00 64 AD |         if_z    ret
3bba0 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
3bba4 017 E0 FF 9F FD |                 jmp     #.setup
3bba8 018             | 
3bba8 018             | '------------------------------------------------------------------------------
3bba8 018             | ' IN/INTERRUPT transaction.
3bba8 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
3bba8 018             | '------------------------------------------------------------------------------
3bba8 018             | ' On entry:
3bba8 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
3bba8 018             | '     CRC(b19..23).
3bba8 018             | ' On exit:
3bba8 018             | '------------------------------------------------------------------------------
3bba8 018             | txn_in
3bba8 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3bbac 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
3bbb0 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
3bbb4 01b             | 
3bbb4 01b             |                 ' Fall through to urx_packet
3bbb4 01b             | 
3bbb4 01b             | '------------------------------------------------------------------------------
3bbb4 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
3bbb4 01b             | ' received are handshakes and IN DATAx.
3bbb4 01b             | '------------------------------------------------------------------------------
3bbb4 01b             | ' On entry:
3bbb4 01b             | ' On exit:
3bbb4 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
3bbb4 01b             | '     returned.
3bbb4 01b             | '------------------------------------------------------------------------------
3bbb4 01b             | urx_packet
3bbb4 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
3bbb8 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3bbbc 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
3bbc0 01e 1A 94 63 FD |                 getct   hct2
3bbc4 01f 4E 95 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
3bbc8 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
3bbcc 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
3bbd0 022             | .wait_sop
3bbd0 022 22 A7 8A FA |                 rdpin   urx, dm
3bbd4 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3bbd8 024 08 00 90 CD |         if_c    jmp     #.get_pid
3bbdc 025 FC 25 CC FB |                 jnct2   #.wait_sop
3bbe0 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
3bbe4 027             | .get_pid
3bbe4 027 28 02 B0 FD |                 call    #urx_next
3bbe8 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
3bbec 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
3bbf0 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
3bbf4 02b             | .chk_pid
3bbf4 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3bbf8 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
3bbfc 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
3bc00 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
3bc04 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
3bc08 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
3bc0c 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
3bc10 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
3bc14 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
3bc18 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
3bc1c 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
3bc20 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
3bc24 037             | .ack_resend
3bc24 037 22 A7 82 FA |                 rqpin   urx, dm
3bc28 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3bc2c 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
3bc30 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
3bc34 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
3bc38 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
3bc3c 03d             | .chk_eop
3bc3c 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3bc40 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
3bc44 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
3bc48 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
3bc4c 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
3bc50 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
3bc54 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
3bc58 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
3bc5c 045 2D 00 64 FD |                 ret
3bc60 046             | .idle
3bc60 046 22 A7 82 FA |                 rqpin   urx, dm
3bc64 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3bc68 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
3bc6c 049 2D 00 64 FD |                 ret
3bc70 04a             | 
3bc70 04a             | '------------------------------------------------------------------------------
3bc70 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
3bc70 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
3bc70 04a             | ' if one is required.
3bc70 04a             | '------------------------------------------------------------------------------
3bc70 04a             | ' On entry:
3bc70 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
3bc70 04a             | ' On exit:
3bc70 04a             | '------------------------------------------------------------------------------
3bc70 04a             | utx_token
3bc70 04a 22 A7 82 FA |                 rqpin   urx, dm
3bc74 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3bc78 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
3bc7c 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3bc80 04e 34 0D B0 CD |         if_c    call    #utx_pre
3bc84 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3bc88 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
3bc8c 051 5E 73 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
3bc90 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
3bc94 053             | .next_byte
3bc94 053 B9 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
3bc98 054 08 72 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
3bc9c 055             | .wait
3bc9c 055 40 46 72 FD |                 testp   dp                      wc
3bca0 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
3bca4 057 23 03 08 FC |                 akpin   dp
3bca8 058 22 A5 22 FC |                 wypin   utx, dm
3bcac 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
3bcb0 05a             | 
3bcb0 05a             | '------------------------------------------------------------------------------
3bcb0 05a             | ' SETUP/OUT/INTERRUPT transaction.
3bcb0 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
3bcb0 05a             | '------------------------------------------------------------------------------
3bcb0 05a             | ' On entry:
3bcb0 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
3bcb0 05a             | '     CRC(b19..23).
3bcb0 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
3bcb0 05a             | '   pkt_data - count of DATAx payload bytes to send.
3bcb0 05a             | ' On exit:
3bcb0 05a             | '------------------------------------------------------------------------------
3bcb0 05a             | txn_out
3bcb0 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3bcb4 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
3bcb8 05c 00 00 C0 FF 
3bcbc 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
3bcc0 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
3bcc4 05f             | 
3bcc4 05f             |                 ' Fall through to utx_data
3bcc4 05f             | 
3bcc4 05f             | '------------------------------------------------------------------------------
3bcc4 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
3bcc4 05f             | ' calculated while the data byte is being shifted out. Since data stage
3bcc4 05f             | ' success/fail is not determined until the status stage of the transaction,
3bcc4 05f             | ' this routine is only concerned about the current DATAx packet.
3bcc4 05f             | '------------------------------------------------------------------------------
3bcc4 05f             | ' On entry:
3bcc4 05f             | '   PTRA - hub start address of the data to read.
3bcc4 05f             | '   pkt_cnt - data payload size.
3bcc4 05f             | ' On exit:
3bcc4 05f             | '------------------------------------------------------------------------------
3bcc4 05f             | utx_data
3bcc4 05f 22 A7 82 FA |                 rqpin   urx, dm
3bcc8 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3bccc 061 F4 FF 9F CD |         if_c    jmp     #utx_data
3bcd0 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
3bcd4 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
3bcd8 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3bcdc 065 D8 0C B0 CD |         if_c    call    #utx_pre
3bce0 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3bce4 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
3bce8 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
3bcec 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
3bcf0 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
3bcf4 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
3bcf8 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
3bcfc 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
3bd00 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
3bd04 06f             | .read_byte
3bd04 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
3bd08 070 F0 00 B0 FD |                 call    #utx_byte
3bd0c 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
3bd10 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
3bd14 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
3bd18 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3bd1c 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
3bd20 076             | .send_crc
3bd20 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
3bd24 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
3bd28 078 D0 00 B0 FD |                 call    #utx_byte
3bd2c 079 5D A5 EA F8 |                 getbyte utx, crc, #1
3bd30 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
3bd34 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
3bd38 07c             | 
3bd38 07c             | '------------------------------------------------------------------------------
3bd38 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
3bd38 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
3bd38 07c             | ' expects that the packet includes at least the CRC word.
3bd38 07c             | '
3bd38 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
3bd38 07c             | ' was requested, which makes it difficult to determine where the data stops
3bd38 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
3bd38 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
3bd38 07c             | ' USB-16 expected residual value of 0xB001.
3bd38 07c             | '
3bd38 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
3bd38 07c             | ' so the caller can verify IN success before writing the data to its final
3bd38 07c             | ' destination.
3bd38 07c             | '------------------------------------------------------------------------------
3bd38 07c             | ' On entry:
3bd38 07c             | '   pkt_data - max byte count expected to be in the packet.
3bd38 07c             | '   newb_flg - signals new byte ready when toggled.
3bd38 07c             | ' On exit:
3bd38 07c             | '   pkt_cnt - actual number of bytes read.
3bd38 07c             | '------------------------------------------------------------------------------
3bd38 07c             | urx_data
3bd38 07c F7 77 03 F6 |                 mov     htmp2, pb
3bd3c 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
3bd40 07e 00 00 C0 FF 
3bd44 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
3bd48 080 BB EF 03 F6 |                 mov     pb, htmp2
3bd4c 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
3bd50 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
3bd54 083 58 85 03 F6 |                 mov     pkt_tmp, pkt_data
3bd58 084 02 84 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
3bd5c 085             | .wait_byte
3bd5c 085             | ' In-line rx for max speed
3bd5c 085 22 A7 82 FA |                 rqpin   urx, dm
3bd60 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
3bd64 087 53 A5 02 F5 |                 and     utx, urx
3bd68 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
3bd6c 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
3bd70 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
3bd74 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3bd78 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
3bd7c 08d DC FF 9F FD |                 jmp     #.wait_byte
3bd80 08e             | .get_byte
3bd80 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
3bd84 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
3bd88 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
3bd8c 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
3bd90 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
3bd94 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3bd98 094             | .end_crc
3bd98 094 01 B8 06 F1 |                 add     pkt_cnt, #1
3bd9c 095 C2 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
3bda0 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
3bda4 097 2D 00 64 1D |         if_a    ret
3bda8 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
3bda8 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
3bda8 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
3bda8 098             | ' to miss it, so cheat a bit and look for SOP clear here.
3bda8 098 22 A7 82 FA |                 rqpin   urx, dm
3bdac 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
3bdb0 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
3bdb4 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
3bdb4 09b             | .chk_crc
3bdb4 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
3bdb8 09c 58 00 00 FF 
3bdbc 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
3bdc0 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
3bdc4 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
3bdc8 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
3bdcc 0a1 34 09 B0 FD |                 call    #poll_waitx
3bdd0 0a2             | 
3bdd0 0a2             |                 ' Fall through to utx_handshake
3bdd0 0a2             | 
3bdd0 0a2             | '------------------------------------------------------------------------------
3bdd0 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
3bdd0 0a2             | ' the appropriate IP delay has been inserted.
3bdd0 0a2             | '------------------------------------------------------------------------------
3bdd0 0a2             | ' On entry:
3bdd0 0a2             | '   retval - handshake PID to send.
3bdd0 0a2             | ' On exit:
3bdd0 0a2             | '   retval unchanged.
3bdd0 0a2             | '------------------------------------------------------------------------------
3bdd0 0a2             | utx_handshake
3bdd0 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3bdd4 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
3bdd8 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3bddc 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
3bde0 0a6 5F A5 02 F6 |                 mov     utx, retval
3bde4 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
3bde8 0a8             | .idle
3bde8 0a8 22 A7 82 FA |                 rqpin   urx, dm
3bdec 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3bdf0 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
3bdf4 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
3bdf8 0ac 08 09 90 FD |                 jmp     #poll_waitx
3bdfc 0ad             | 
3bdfc 0ad             | '------------------------------------------------------------------------------
3bdfc 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
3bdfc 0ad             | '------------------------------------------------------------------------------
3bdfc 0ad             | ' On entry:
3bdfc 0ad             | '   utx - byte to transmit.
3bdfc 0ad             | ' On exit:
3bdfc 0ad             | '------------------------------------------------------------------------------
3bdfc 0ad             | utx_byte
3bdfc 0ad 40 46 72 FD |                 testp   dp                      wc
3be00 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
3be04 0af 23 03 08 FC |                 akpin   dp
3be08 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
3be0c 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
3be10 0b2             | 
3be10 0b2             | '------------------------------------------------------------------------------
3be10 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
3be10 0b2             | '------------------------------------------------------------------------------
3be10 0b2             | ' On entry:
3be10 0b2             | ' On exit:
3be10 0b2             | '   retval - the byte read.
3be10 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
3be10 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
3be10 0b2             | '     received.
3be10 0b2             | '------------------------------------------------------------------------------
3be10 0b2             | urx_next
3be10 0b2 22 A7 8A FA |                 rdpin   urx, dm
3be14 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
3be18 0b4 53 A5 02 F5 |                 and     utx, urx
3be1c 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
3be20 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
3be24 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
3be28 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
3be2c 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3be30 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
3be34 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
3be38 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
3be3c 0bd 2D 00 64 FD |                 ret
3be40 0be             | 
3be40 0be             | '------------------------------------------------------------------------------
3be40 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
3be40 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
3be40 0be             | ' length, and the PID is not included in the CRC calculation:
3be40 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
3be40 0be             | '  CRC5  ENDP ADDRESS PID
3be40 0be             | ' %00000_1111_1111111_xxxxxxxx
3be40 0be             | '------------------------------------------------------------------------------
3be40 0be             | ' On entry:
3be40 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
3be40 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
3be40 0be             | ' On exit:
3be40 0be             | '   ep_addr_pid - CRC value appended to the packet.
3be40 0be             | '------------------------------------------------------------------------------
3be40 0be             | calc_crc5
3be40 0be FF 03 00 FF 
3be44 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
3be48 0c0 5E 73 03 F6 |                 mov     htmp, ep_addr_pid
3be4c 0c1 08 72 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
3be50 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
3be54 0c3 69 72 63 FD |                 rev     htmp                            ' Input data reflected
3be58 0c4 28 72 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
3be5c 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
3be60 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
3be64 0c7 09 72 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
3be68 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
3be6c 0c9 01 72 77 F0 |                 shl     htmp, #1                wc
3be70 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
3be74 0cb 01 72 77 F0 |                 shl     htmp, #1                wc
3be78 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
3be7c 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
3be80 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
3be84 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
3be88 0d0             | 
3be88 0d0             | '------------------------------------------------------------------------------
3be88 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
3be88 0d0             | '------------------------------------------------------------------------------
3be88 0d0             | isr1_fsframe
3be88 0d0 1A 92 62 FD |                 getct   iframe_ct_base
3be8c 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3be90 0d2 B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3be94 0d3 22 6F 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3be98 0d4             | .wait
3be98 0d4 40 46 72 FD |                 testp   dp                      wc
3be9c 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
3bea0 0d6 23 03 08 FC |                 akpin   dp
3bea4 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
3bea8 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
3beac 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
3beb0 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
3beb4 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
3beb8 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
3bebc 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
3bec0 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
3bec4 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
3bec8 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
3becc 0e1 2C FF BF FD |                 call    #utx_byte
3bed0 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
3bed4 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
3bed8 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
3bedc 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
3bee0 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
3bee4 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
3bee8 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
3beec 0e9 5B A5 42 F5 |                 or      utx, icrc
3bef0 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
3bef4 0eb A4 83 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
3bef8 0ec 20 00 90 FD |                 jmp     #isr1_wait
3befc 0ed             | isr1_lsframe
3befc 0ed 1A 92 62 FD |                 getct   iframe_ct_base
3bf00 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3bf04 0ef B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3bf08 0f0             | .wait
3bf08 0f0 40 46 72 FD |                 testp   dp                      wc
3bf0c 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
3bf10 0f2 23 03 08 FC |                 akpin   dp
3bf14 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
3bf18 0f4 A3 83 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
3bf1c 0f5             | isr1_wait
3bf1c 0f5 22 A5 82 FA |                 rqpin   utx, dm
3bf20 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
3bf24 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
3bf28 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
3bf2c 0f9 03 00 00 FF 
3bf30 0fa FF B3 06 F5 |                 and     frame, ##$7ff
3bf34 0fb 1F 82 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
3bf38 0fc F5 FF 3B FB |                 reti1
3bf3c 0fd             | 
3bf3c 0fd             | '------------------------------------------------------------------------------
3bf3c 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
3bf3c 0fd             | ' transaction will complete before the next frame is triggered.
3bf3c 0fd             | '------------------------------------------------------------------------------
3bf3c 0fd             | ' On entry:
3bf3c 0fd             | ' On exit:
3bf3c 0fd             | '------------------------------------------------------------------------------
3bf3c 0fd             | wait_txn_ok
3bf3c 0fd 1A 76 63 FD |                 getct   htmp2
3bf40 0fe 49 77 83 F1 |                 sub     htmp2, iframe_ct_base
3bf44 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3bf48 100 A1 77 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
3bf4c 101 A2 77 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
3bf50 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
3bf54 103 2D 00 64 FD |                 ret
3bf58 104             | 
3bf58 104             | '------------------------------------------------------------------------------
3bf58 104             | ' A device connection was detected, or a bus reset was requested by the USB
3bf58 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
3bf58 104             | ' and perform a reset sequence prior to device enumeration.
3bf58 104             | '------------------------------------------------------------------------------
3bf58 104             | dev_reset
3bf58 104 22 A7 82 FA |                 rqpin   urx, dm
3bf5c 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
3bf60 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
3bf64 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
3bf68 108             | reset
3bf68 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
3bf6c 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
3bf70 10a 1F 5C 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
3bf74 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3bf78 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
3bf7c 10d 1A 92 62 FD |                 getct   iframe_ct_base
3bf80 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3bf84 10f B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3bf88 110 59 73 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
3bf8c 111 24 72 07 F1 |                 add     htmp, #36
3bf90 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
3bf94 113             | .framewait
3bf94 113 B9 B3 1A F2 |                 cmp     frame, htmp             wcz
3bf98 114 F8 FF 9F CD |         if_b    jmp     #.framewait
3bf9c 115 2D 00 64 FD |                 ret
3bfa0 116             | 
3bfa0 116             | '------------------------------------------------------------------------------
3bfa0 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
3bfa0 116             | '------------------------------------------------------------------------------
3bfa0 116             | ' On entry:
3bfa0 116             | '   PTRA - source address.
3bfa0 116             | '   PB - destination address.
3bfa0 116             | '   hr0 - length of copy, in bytes.
3bfa0 116             | ' On exit:
3bfa0 116             | '------------------------------------------------------------------------------
3bfa0 116             | hmemcpy
3bfa0 116 61 73 C7 FA |                 rdbyte  htmp, ptra++
3bfa4 117 F7 73 43 FC |                 wrbyte  htmp, pb
3bfa8 118 01 EE 07 F1 |                 add     pb, #1
3bfac 119 FC 87 6F 0B |         _ret_   djnz    hr0, #hmemcpy
3bfb0 11a             | 
3bfb0 11a             | '------------------------------------------------------------------------------
3bfb0 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
3bfb0 11a             | ' loop until the errant device is disconnected.
3bfb0 11a             | '------------------------------------------------------------------------------
3bfb0 11a             | ' On entry:
3bfb0 11a             | ' On exit:
3bfb0 11a             | '------------------------------------------------------------------------------
3bfb0 11a             | host_error
3bfb0 11a             |           if ERROR_LED >= 0
3bfb0 11a             |           end
3bfb0 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
3bfb4 11b             | 
3bfb4 11b             | '------------------------------------------------------------------------------
3bfb4 11b             | ' Get HID descriptor buffer for current port
3bfb4 11b             | '------------------------------------------------------------------------------
3bfb4 11b             | ' On entry:
3bfb4 11b             | ' On exit:
3bfb4 11b             | '   PB - HID descriptor buffer pointer
3bfb4 11b             | '------------------------------------------------------------------------------
3bfb4 11b             | get_hid_descr_buffer
3bfb4 11b 2D EF 03 F6 |                 mov     pb, hdev_port
3bfb8 11c 01 EE E7 F2 |                 cmpsub  pb, #1
3bfbc 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
3bfc0 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
3bfc4 11f             | 
3bfc4 11f             | 
3bfc4 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
3bfc8 120             | 
3bfc8 120             | ' USB commands and error codes
3bfc8 120 00 00 00 00 | cmd_data        long    0
3bfcc 121 00 00 00 00 | usb_err_code    long    ERR_NONE
3bfd0 122             | 
3bfd0 122             | ' Parameters block assigned at cog startup
3bfd0 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
3bfd4 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
3bfd8 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
3bfdc 125             | if ACTIVITY_LED >= 0
3bfdc 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
3bfdc 125             | end
3bfdc 125             | if ERROR_LED >= 0
3bfdc 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
3bfdc 125             | end
3bfdc 125 00 00 00 00 | hid_descr_p     long    0
3bfe0 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
3bfe0 126             | 'hkbd_report_p   long    0
3bfe0 126 00 00 00 00 | hub_descr_p     long    0
3bfe4 127 00 00 00 00 | urx_buff_p      long    0
3bfe8 128 00 00 00 00 | dev_desc_buff_p long    0
3bfec 129 00 00 00 00 | con_desc_buff_p long    0
3bff0 12a 00 00 00 00 | cache_start_p   long    0
3bff4 12b 00 00 00 00 | cache_end_p     long    0
3bff8 12c             | if EMUPAD_MAX_PLAYER > 0
3bff8 12c             | emupad_out_ptr  long    0
3bff8 12c             | end
3bff8 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
3bffc 12d             | 
3bffc 12d             | hdev_init_start
3bffc 12d             | hdev_port       res     1
3bffc 12d             | hdev_port       res     1
3bffc 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
3bffc 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
3bffc 12d             | kbm_next_datax  res     1
3bffc 12d             | kbm_next_datax  res     1
3bffc 12d             | hub_intf_num    res     1
3bffc 12d             | hub_intf_num    res     1
3bffc 12d             | hub_next_datax  res     1
3bffc 12d             | hub_next_datax  res     1
3bffc 12d             | hub_status_chg  res     1
3bffc 12d             | hub_status_chg  res     1
3bffc 12d             | hub_port_status res     1
3bffc 12d             | hub_port_status res     1
3bffc 12d             | if HAVE_MOUSE
3bffc 12d             | ms_intf_num     res     1
3bffc 12d             | ms_intf_num     res     1
3bffc 12d             | ms_in_max_pkt   res     1
3bffc 12d             | ms_in_max_pkt   res     1
3bffc 12d             | end
3bffc 12d             | kb_intf_num     res     1
3bffc 12d             | kb_intf_num     res     1
3bffc 12d             | kb_interval     res     1
3bffc 12d             | kb_interval     res     1
3bffc 12d             | kb_in_max_pkt   res     1
3bffc 12d             | kb_in_max_pkt   res     1
3bffc 12d             | kb_max_index    res     1
3bffc 12d             | kb_max_index    res     1
3bffc 12d             | kb_led_states   res     1
3bffc 12d             | kb_led_states   res     1
3bffc 12d             | gp_intf_num     res     1
3bffc 12d             | gp_intf_num     res     1
3bffc 12d             | gp_interval     res     1
3bffc 12d             | gp_interval     res     1
3bffc 12d             | gp_max_index    res     1
3bffc 12d             | gp_max_index    res     1
3bffc 12d             | gp_descr_len    res     1+MAX_DEVICES
3bffc 12d             | gp_descr_len    res     1+MAX_DEVICES
3bffc 12d             | hdev_init_end
3bffc 12d             | 
3bffc 12d             | ' Initialized at cog startup:
3bffc 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
3bffc 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
3bffc 12d             | iframe_ct_new   res     1
3bffc 12d             | iframe_ct_new   res     1
3bffc 12d             | iframe_ct_base  res     1
3bffc 12d             | iframe_ct_base  res     1
3bffc 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
3bffc 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
3bffc 12d             | 
3bffc 12d             | ' This register block is reset to zero when a USB device connects
3bffc 12d             | hreg_init_start
3bffc 12d             | hstatus         res     1         ' Host status flags
3bffc 12d             | hstatus         res     1         ' Host status flags
3bffc 12d             | hctwait         res     1         ' Poll-based wait clocks
3bffc 12d             | hctwait         res     1         ' Poll-based wait clocks
3bffc 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
3bffc 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
3bffc 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
3bffc 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
3bffc 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
3bffc 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
3bffc 12d             | xfer_retry      res     1         ' Control transfer retry count
3bffc 12d             | xfer_retry      res     1         ' Control transfer retry count
3bffc 12d             | retry           res     1         ' Transaction retry count
3bffc 12d             | retry           res     1         ' Transaction retry count
3bffc 12d             | utx             res     1         ' Byte to transmit on USB
3bffc 12d             | utx             res     1         ' Byte to transmit on USB
3bffc 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
3bffc 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
3bffc 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
3bffc 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
3bffc 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
3bffc 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
3bffc 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
3bffc 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
3bffc 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
3bffc 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
3bffc 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
3bffc 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
3bffc 12d             | frame           res     1         ' USB 1ms frame counter value
3bffc 12d             | frame           res     1         ' USB 1ms frame counter value
3bffc 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
3bffc 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
3bffc 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
3bffc 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
3bffc 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
3bffc 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
3bffc 12d             | crc             res     1         ' Used for CRC16 calculation
3bffc 12d             | crc             res     1         ' Used for CRC16 calculation
3bffc 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
3bffc 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
3bffc 12d             | retval          res     1         ' Global success/fail return parameter
3bffc 12d             | retval          res     1         ' Global success/fail return parameter
3bffc 12d             | context_retval  res     1         ' Operation contextual return parameter
3bffc 12d             | context_retval  res     1         ' Operation contextual return parameter
3bffc 12d             | ' Device stuff
3bffc 12d             | hdev_id         res     1+MAX_DEVICES
3bffc 12d             | hdev_id         res     1+MAX_DEVICES
3bffc 12d             | hdev_bcd        res     1
3bffc 12d             | hdev_bcd        res     1
3bffc 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
3bffc 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
3bffc 12d             | ' Keyboard/mouse stuff
3bffc 12d             | hctrl_ep_addr   res     1
3bffc 12d             | hctrl_ep_addr   res     1
3bffc 12d             | hctrl_max_pkt   res     1
3bffc 12d             | hctrl_max_pkt   res     1
3bffc 12d             | hconfig_base    res     1
3bffc 12d             | hconfig_base    res     1
3bffc 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
3bffc 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
3bffc 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
3bffc 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
3bffc 12d             | hdev_class      res     1
3bffc 12d             | hdev_class      res     1
3bffc 12d             | hdev_subclass   res     1
3bffc 12d             | hdev_subclass   res     1
3bffc 12d             | hdev_protocol   res     1
3bffc 12d             | hdev_protocol   res     1
3bffc 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
3bffc 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
3bffc 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
3bffc 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
3bffc 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
3bffc 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
3bffc 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
3bffc 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
3bffc 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
3bffc 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
3bffc 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
3bffc 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
3bffc 12d             | if HAVE_MOUSE
3bffc 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
3bffc 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
3bffc 12d             | end
3bffc 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
3bffc 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
3bffc 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
3bffc 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
3bffc 12d             | hdev_ep_addr    res     1+MAX_DEVICES
3bffc 12d             | hdev_ep_addr    res     1+MAX_DEVICES
3bffc 12d             | hdev_out_addr   res     1
3bffc 12d             | hdev_out_addr   res     1
3bffc 12d             | 
3bffc 12d             | if EMUPAD_MAX_PLAYER > 0
3bffc 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
3bffc 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
3bffc 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
3bffc 12d             | end
3bffc 12d             | 
3bffc 12d             | hreg_init_end
3bffc 12d             | 
3bffc 12d             | hidr_start
3bffc 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
3bffc 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
3bffc 12d             | hidr_flags      res     1
3bffc 12d             | hidr_flags      res     1
3bffc 12d             | hidr_axis       res     4
3bffc 12d             | hidr_axis       res     4
3bffc 12d             | hidr_buttons    res     1
3bffc 12d             | hidr_buttons    res     1
3bffc 12d             | hidr_hats       res     1
3bffc 12d             | hidr_hats       res     1
3bffc 12d             | '' Above are actually useful values, 6 longs
3bffc 12d             | hidr_type       res     1
3bffc 12d             | hidr_type       res     1
3bffc 12d             | hidr_id         res     1
3bffc 12d             | hidr_id         res     1
3bffc 12d             | hidr_offset     res     1
3bffc 12d             | hidr_offset     res     1
3bffc 12d             | hidr_usage_idx  res     1
3bffc 12d             | hidr_usage_idx  res     1
3bffc 12d             | ' below need to be push/pop'd
3bffc 12d             | hidr_state      res     1
3bffc 12d             | hidr_state      res     1
3bffc 12d             | hidr_size       res     1
3bffc 12d             | hidr_size       res     1
3bffc 12d             | hidr_count      res     1
3bffc 12d             | hidr_count      res     1
3bffc 12d             | hidr_lminmax    res     1
3bffc 12d             | hidr_lminmax    res     1
3bffc 12d             | hidr_pminmax    res     1
3bffc 12d             | hidr_pminmax    res     1
3bffc 12d             | hidr_end
3bffc 12d             | 
3bffc 12d             | ' Variables dependent on the system freqency
3bffc 12d             | _var_64_lower_  res     1
3bffc 12d             | _var_64_lower_  res     1
3bffc 12d             | _var_64_upper_  res     1
3bffc 12d             | _var_64_upper_  res     1
3bffc 12d             | _12Mbps_        res     1
3bffc 12d             | _12Mbps_        res     1
3bffc 12d             | _1_5Mbps_       res     1
3bffc 12d             | _1_5Mbps_       res     1
3bffc 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
3bffc 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
3bffc 12d             | _1us_           res     1         ' 1us
3bffc 12d             | _1us_           res     1         ' 1us
3bffc 12d             | _10us_          res     1         ' 10us
3bffc 12d             | _10us_          res     1         ' 10us
3bffc 12d             | _33us_          res     1         ' 33us
3bffc 12d             | _33us_          res     1         ' 33us
3bffc 12d             | _txn_err_       res     1         ' 250us
3bffc 12d             | _txn_err_       res     1         ' 250us
3bffc 12d             | _500us_         res     1         ' 500us
3bffc 12d             | _500us_         res     1         ' 500us
3bffc 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
3bffc 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
3bffc 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
3bffc 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
3bffc 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
3bffc 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
3bffc 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
3bffc 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
3bffc 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
3bffc 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
3bffc 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
3bffc 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
3bffc 12d             | _preamble_wait_ res     1
3bffc 12d             | _preamble_wait_ res     1
3bffc 12d             | _1ms_           res     1         ' 1ms
3bffc 12d             | _1ms_           res     1         ' 1ms
3bffc 12d             | _2ms_           res     1         ' 2ms
3bffc 12d             | _2ms_           res     1         ' 2ms
3bffc 12d             | _suspend_wait_  res     1         ' 3ms
3bffc 12d             | _suspend_wait_  res     1         ' 3ms
3bffc 12d             | _4ms_           res     1         ' 4ms
3bffc 12d             | _4ms_           res     1         ' 4ms
3bffc 12d             | _xfer_wait_     res     1         ' 5ms
3bffc 12d             | _xfer_wait_     res     1         ' 5ms
3bffc 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
3bffc 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
3bffc 12d             | _reset_hold_    res     1         ' 15ms
3bffc 12d             | _reset_hold_    res     1         ' 15ms
3bffc 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
3bffc 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
3bffc 12d             | _21ms_          res     1         ' 21ms
3bffc 12d             | _21ms_          res     1         ' 21ms
3bffc 12d             | _100ms_         res     1         ' 100ms
3bffc 12d             | _100ms_         res     1         ' 100ms
3bffc 12d             | _500ms_         res     1         ' 500ms
3bffc 12d             | _500ms_         res     1         ' 500ms
3bffc 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
3bffc 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
3bffc 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
3bffc 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
3bffc 12d             | '------------------------------------------------------------------------------
3bffc 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
3bffc 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
3bffc 12d             | _usb_d_ls_nco_  res     1
3bffc 12d             | _usb_d_ls_nco_  res     1
3bffc 12d             | _usb_h_fs_nco_  res     1
3bffc 12d             | _usb_h_fs_nco_  res     1
3bffc 12d             | _usb_d_fs_nco_  res     1
3bffc 12d             | _usb_d_fs_nco_  res     1
3bffc 12d             | '------------------------------------------------------------------------------
3bffc 12d             | ' Scratch registers
3bffc 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
3bffc 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
3bffc 12d             | htmp1           res     1
3bffc 12d             | htmp1           res     1
3bffc 12d             | htmp2           res     1
3bffc 12d             | htmp2           res     1
3bffc 12d             | htmp3           res     1
3bffc 12d             | htmp3           res     1
3bffc 12d             | hrep            res     1         ' Repeat count
3bffc 12d             | hrep            res     1         ' Repeat count
3bffc 12d             | hsave0          res     1         ' Subroutine parameter saves
3bffc 12d             | hsave0          res     1         ' Subroutine parameter saves
3bffc 12d             | hsave1          res     1
3bffc 12d             | hsave1          res     1
3bffc 12d             | hsave2          res     1
3bffc 12d             | hsave2          res     1
3bffc 12d             | isrtmp1         res     1
3bffc 12d             | isrtmp1         res     1
3bffc 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
3bffc 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
3bffc 12d             | hr0             res     1         ' Multi-purpose registers
3bffc 12d             | hr0             res     1         ' Multi-purpose registers
3bffc 12d             | hr1             res     1
3bffc 12d             | hr1             res     1
3bffc 12d             | hr2             res     1
3bffc 12d             | hr2             res     1
3bffc 12d             | hr3             res     1
3bffc 12d             | hr3             res     1
3bffc 12d             | hpar1           res     1         ' Routine entry/exit parameters
3bffc 12d             | hpar1           res     1         ' Routine entry/exit parameters
3bffc 12d             | hpar2           res     1
3bffc 12d             | hpar2           res     1
3bffc 12d             | hpar3           res     1
3bffc 12d             | hpar3           res     1
3bffc 12d             | hct2            res     1         ' Function response bus turn-around timer
3bffc 12d             | hct2            res     1         ' Function response bus turn-around timer
3bffc 12d             | hct3            res     1         ' Keyboard/mouse poll timer
3bffc 12d             | hct3            res     1         ' Keyboard/mouse poll timer
3bffc 12d             | mod_cnt         res     1         ' Used in idle loops
3bffc 12d             | mod_cnt         res     1         ' Used in idle loops
3bffc 12d             | 
3bffc 12d             |                 fit     $1F0
3bffc 12d             |                 fit     $1F0
3bffc 12d             |                 org     $200
3bffc 200             | hlut_start
3bffc 200             | 
3bffc 200             | '------------------------------------------------------------------------------
3bffc 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
3bffc 200             | ' settings to startup defaults.
3bffc 200             | '------------------------------------------------------------------------------
3bffc 200             | ' On entry:
3bffc 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
3bffc 200             | '------------------------------------------------------------------------------
3bffc 200             | set_speed_full
3bffc 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
3c000 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
3c004 202 A6 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
3c008 203 A4 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
3c00c 204             | '                ret                             wcz     ' Restore caller flags on exit
3c00c 204             | 
3c00c 204             | '------------------------------------------------------------------------------
3c00c 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
3c00c 204             | ' is a downstream hub connected (not yet implemented), the baud generator
3c00c 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
3c00c 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
3c00c 204             | ' putting the smart pins into reset.
3c00c 204             | '------------------------------------------------------------------------------
3c00c 204             | ' On entry:
3c00c 204             | ' On exit: CZ flags restored to caller states
3c00c 204             | '------------------------------------------------------------------------------
3c00c 204             | set_speed_low
3c00c 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
3c010 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
3c014 206 22 6B 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
3c018 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
3c01c 208 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
3c020 209 A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
3c024 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
3c028 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
3c02c 20c             | 
3c02c 20c             | '------------------------------------------------------------------------------
3c02c 20c             | ' Perform configuration stuff required when a device intitially connects.
3c02c 20c             | '------------------------------------------------------------------------------
3c02c 20c             | ' On entry:
3c02c 20c             | ' On exit:
3c02c 20c             | '------------------------------------------------------------------------------
3c02c 20c             | on_connect
3c02c 20c 02 86 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
3c030 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
3c034 20e             | .retry
3c034 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3c038 20f 01 8E 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
3c03c 210 02 8E 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
3c040 211 00 08 00 FF 
3c044 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3c048 213 20 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
3c04c 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3c050 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
3c054 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3c058 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3c05c 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c060 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
3c064 21a B2 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
3c068 21b 4C 03 B0 FD |                 call    #poll_waitx
3c06c 21c 01 86 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
3c070 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
3c074 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
3c078 21f B8 FF 9F FD |                 jmp     #.retry
3c07c 220             | .get_dev_desc
3c07c 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3c080 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3c084 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3c088 223 A8 99 02 F6 |                 mov     hctwait, _1ms_
3c08c 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
3c090 225 88 FB BF FD |                 call    #reset
3c094 226 38 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
3c098 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3c09c 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
3c0a0 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
3c0a4 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c0a8 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
3c0ac 22c AD 99 02 F6 |                 mov     hctwait, _8ms_
3c0b0 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
3c0b4 22e 04 00 00 FF 
3c0b8 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
3c0bc 230 34 FA BF FD |                 call    #calc_crc5
3c0c0 231 20 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
3c0c4 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3c0c8 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3c0cc 234 F7 AD C2 FA |                 rdbyte  total_data, pb
3c0d0 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3c0d4 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
3c0d8 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c0dc 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
3c0e0 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3c0e4 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3c0e8 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3c0ec 23c A0 99 02 F6 |                 mov     hctwait, _500us_
3c0f0 23d C4 02 B0 FD |                 call    #poll_waitx
3c0f4 23e 28 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
3c0f8 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3c0fc 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3c100 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
3c104 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3c108 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c10c 244 2D 00 64 5D |         if_nz   ret
3c110 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
3c114 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3c118 247 61 87 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
3c11c 248 61 89 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3c120 249 00 73 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
3c124 24a 09 86 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3c128 24b 02 88 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3c12c 24c 56 73 1B A2 |         if_z    cmp     htmp, total_data        wcz
3c130 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
3c134 24e 2C FB 9F CD |         if_b    jmp     #host_error
3c138 24f 24 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
3c13c 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
3c140 251 2D EC 63 FD |                 call    pa
3c144 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
3c148 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
3c14c 254 2C EC 63 FD |                 jmp     pa
3c150 255             | 
3c150 255             | '------------------------------------------------------------------------------
3c150 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
3c150 255             | ' Status reporting is always in the function-to-host direction.
3c150 255             | '------------------------------------------------------------------------------
3c150 255             | ' On entry:
3c150 255             | '   PTRA - start address of the SETUP data in hub.
3c150 255             | '   PB - start address of the buffer/struct to be written to during the IN data
3c150 255             | '     stage.
3c150 255             | '   ep_addr_pid - device address, endpoint and CRC5.
3c150 255             | ' On exit:
3c150 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
3c150 255             | '     contains the count of data stage bytes actually received, which must
3c150 255             | '     always be <= the count requested.
3c150 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
3c150 255             | '     more specific USB operation error code.
3c150 255             | '------------------------------------------------------------------------------
3c150 255             | control_read
3c150 255 5E 8F 03 F6 |                 mov     hpar1, ep_addr_pid
3c154 256 F8 91 03 F6 |                 mov     hpar2, ptra
3c158 257 F7 93 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
3c15c 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
3c160 259             | .xfer_start
3c160 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
3c164 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
3c168 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c16c 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
3c170 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
3c174 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3c178 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
3c17c 260 61 00 00 FF 
3c180 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
3c184 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
3c188 263             | .data
3c188 263 56 B1 02 F6 |                 mov     pkt_data, total_data
3c18c 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
3c190 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
3c194 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
3c198 267             | .nak_retry
3c198 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
3c19c 268             | .in_retry
3c19c 268 BC F6 BF FD |                 call    #txn_in
3c1a0 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
3c1a4 26a 28 00 90 AD |         if_z    jmp     #.commit
3c1a8 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3c1ac 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3c1b0 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3c1b4 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3c1b8 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
3c1bc 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3c1c0 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
3c1c4 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3c1c8 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
3c1cc 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
3c1d0 275             | .commit
3c1d0 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
3c1d4 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
3c1d8 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
3c1dc 278 5C 87 03 F6 |                 mov     hr0, pkt_cnt
3c1e0 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
3c1e4 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
3c1e8 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
3c1ec 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
3c1f0 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
3c1f4 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
3c1f8 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
3c1fc 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
3c200 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
3c204 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
3c208 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3c20c 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
3c210 285             | .pre_status
3c210 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
3c214 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
3c218 287 00 B0 06 F6 |                 mov     pkt_data, #0
3c21c 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
3c220 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3c224 28a 61 00 00 FF 
3c228 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
3c22c 28c             | .out_retry
3c22c 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
3c230 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c234 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
3c238 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3c23c 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3c240 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3c244 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3c248 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
3c24c 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3c250 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
3c254 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
3c258 297             | ' I've encountered transfer STALL, even though the data looks correct, and
3c258 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
3c258 297             | ' ControlRead() transfer gets things unstuck most of the time...
3c258 297             | .xfer_retry
3c258 297 AC 99 02 F6 |                 mov     hctwait, _xfer_wait_
3c25c 298 58 01 B0 FD |                 call    #poll_waitx
3c260 299 8C F9 BF FD |                 call    #wait_txn_ok
3c264 29a C7 BD 02 F6 |                 mov     ep_addr_pid, hpar1
3c268 29b C8 F1 03 F6 |                 mov     ptra, hpar2
3c26c 29c C9 EF 03 F6 |                 mov     pb, hpar3
3c270 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
3c274 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
3c278 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
3c27c 2a0             | 
3c27c 2a0             | '------------------------------------------------------------------------------
3c27c 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
3c27c 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
3c27c 2a0             | ' the SETUP data struct is filled with the required values.
3c27c 2a0             | '------------------------------------------------------------------------------
3c27c 2a0             | ' On entry:
3c27c 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
3c27c 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
3c27c 2a0             | '     stage.
3c27c 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
3c27c 2a0             | ' On exit:
3c27c 2a0             | '   retval - used to convey the success/failure of each stage.
3c27c 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
3c27c 2a0             | '     more specific USB operation error code.
3c27c 2a0             | '------------------------------------------------------------------------------
3c27c 2a0             | control_write
3c27c 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3c280 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3c284 2a2 0E 6A 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3c288 2a3             | 
3c288 2a3 5E 8F 03 F6 |                 mov     hpar1, ep_addr_pid
3c28c 2a4 F8 91 03 F6 |                 mov     hpar2, ptra
3c290 2a5 F7 93 03 F6 |                 mov     hpar3, pb
3c294 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
3c298 2a7             | .xfer_start
3c298 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
3c29c 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
3c2a0 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
3c2a4 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c2a8 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
3c2ac 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
3c2b0 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3c2b4 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
3c2b8 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
3c2bc 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
3c2c0 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3c2c4 2b2             | .data
3c2c4 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
3c2c8 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
3c2cc 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
3c2d0 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
3c2d4 2b6             | .out_retry
3c2d4 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
3c2d8 2b7 88 F6 BF FD |                 call    #txn_out
3c2dc 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c2e0 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
3c2e4 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3c2e8 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
3c2ec 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
3c2f0 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
3c2f4 2be             | .commit
3c2f4 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
3c2f8 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
3c2fc 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
3c300 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3c304 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
3c308 2c3             | pre_status_in
3c308 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
3c30c 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3c310 2c5             | .status_retry
3c310 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
3c314 2c6 44 F5 BF FD |                 call    #txn_in
3c318 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
3c31c 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
3c320 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
3c324 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
3c328 2cb 2D 00 64 AD |         if_z    ret
3c32c 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
3c330 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3c334 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
3c338 2cf             | '               ret                                     ' Caller must handle transfer retirement
3c338 2cf             | 
3c338 2cf             | '------------------------------------------------------------------------------
3c338 2cf             | ' Execute an IN interrupt transaction.
3c338 2cf             | '------------------------------------------------------------------------------
3c338 2cf             | ' On entry:
3c338 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
3c338 2cf             | '   hpar2 - Address of the IN data buffer
3c338 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
3c338 2cf             | ' On exit:
3c338 2cf             | '   retval - the result of the operation.
3c338 2cf             | '   hpar3 - the count of IN data bytes actually received.
3c338 2cf             | '------------------------------------------------------------------------------
3c338 2cf             | do_int_in
3c338 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3c33c 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3c340 2d1 0E 6A 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3c344 2d2             | 
3c344 2d2 C9 73 33 F9 |                 getword htmp, hpar3, #0
3c348 2d3 C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz
3c34c 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
3c350 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
3c354 2d6             | .retry
3c354 2d6 C9 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
3c358 2d7 00 F5 BF FD |                 call    #txn_in
3c35c 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
3c360 2d9 1C 00 90 AD |         if_z    jmp     #.commit
3c364 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
3c368 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
3c36c 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
3c370 2dd 54 00 B0 FD |                 call    #retry_wait
3c374 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3c378 2df 18 00 90 AD |         if_z    jmp     #.post_ret
3c37c 2e0 D4 FF 9F FD |                 jmp     #.retry
3c380 2e1             | .commit
3c380 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
3c384 2e2 C8 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
3c388 2e3 5C 87 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
3c38c 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
3c390 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
3c394 2e6             | .post_ret
3c394 2e6 5C 93 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
3c398 2e7             | 
3c398 2e7             | 
3c398 2e7             | '------------------------------------------------------------------------------
3c398 2e7             | ' Resets the downstream hub port to FS
3c398 2e7             | '------------------------------------------------------------------------------
3c398 2e7             | dwnstream_reset
3c398 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3c39c 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
3c3a0 2e9             | 
3c3a0 2e9 0E 6A 07 F4 |                 bitl    _usb_h_ls_nco_, #14
3c3a4 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3c3a8 2eb 22 6F 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3c3ac 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
3c3b0 2ed A6 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3c3b4 2ee A4 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3c3b8 2ef             | 
3c3b8 2ef             | '------------------------------------------------------------------------------
3c3b8 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
3c3b8 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
3c3b8 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
3c3b8 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
3c3b8 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
3c3b8 2ef             | '------------------------------------------------------------------------------
3c3b8 2ef             | ' On entry:
3c3b8 2ef             | '   hctwait - wait interval in sysclocks.
3c3b8 2ef             | ' On exit:
3c3b8 2ef             | '------------------------------------------------------------------------------
3c3b8 2ef             | poll_waitx
3c3b8 2ef 1A 94 63 FD |                 getct   hct2
3c3bc 2f0 4C 95 6B FA |                 addct2  hct2, hctwait
3c3c0 2f1             | .wait
3c3c0 2f1 FF 25 CC FB |                 jnct2   #.wait
3c3c4 2f2 2D 00 64 FD |                 ret
3c3c8 2f3             | 
3c3c8 2f3             | '------------------------------------------------------------------------------
3c3c8 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
3c3c8 2f3             | '------------------------------------------------------------------------------
3c3c8 2f3             | ' On entry:
3c3c8 2f3             | '   retval - transaction response PID or error code.
3c3c8 2f3             | ' On exit:
3c3c8 2f3             | '------------------------------------------------------------------------------
3c3c8 2f3             | retry_wait
3c3c8 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3c3cc 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
3c3d0 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3c3d4 2f6 14 00 90 AD |         if_z    jmp     #.nak
3c3d8 2f7 9F 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
3c3dc 2f8 D8 FF BF FD |                 call    #poll_waitx
3c3e0 2f9             | .dec
3c3e0 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
3c3e4 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
3c3e8 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
3c3ec 2fc             | .nak
3c3ec 2fc 9E 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
3c3f0 2fd C4 FF BF FD |                 call    #poll_waitx
3c3f4 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
3c3f8 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
3c3fc 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
3c400 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
3c404 302 2D 00 64 FD |                 ret
3c408 303             | 
3c408 303             | host_reset
3c408 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
3c40c 304 14 72 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
3c410 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
3c410 305 BD 01 05 FF 
3c414 306 00 72 1F F2 |                 cmp     htmp, ##168_000_000     wcz
3c418 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
3c41c 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
3c420 309             | ' Check to see if the system clock has been changed.
3c420 309 2C 73 0B F2 |                 cmp     htmp, save_sysclk       wz
3c424 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
3c428 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
3c42c 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
3c430 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3c434 30e 40 46 62 FD |                 dirl    dp
3c438 30f             | 
3c438 30f 28 02 64 FD |                 setq    #1
3c43c 310 80 00 80 FF 
3c440 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3c444 312 22 6F 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
3c448 313             | .enable
3c448 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
3c44c 314 41 46 62 FD |                 dirh    dp
3c450 315 1F 38 63 FD |                 waitx   _1us_
3c454 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3c458 317             | 
3c458 317             |                 ' Handle Port protection enable and startup delay
3c458 317 00 48 56 F2 |                 cmps    usb_enable_pin, #0      wc
3c45c 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
3c460 319 1F 60 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
3c464 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
3c468 31b 1F 60 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
3c46c 31c             | 
3c46c 31c             |                 'call #dev_reset ' TODO THINK ABOUT THIS
3c46c 31c             | 
3c46c 31c             | discon_entry
3c46c 31c 03 98 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
3c470 31d             | 
3c470 31d 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
3c474 31e 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
3c478 31f 38 EC A7 F9 |                 alti    pa, #%000_111_000
3c47c 320 00 00 04 F6 |                 mov     0-0, #0
3c480 321             | .regloop
3c480 321             |               
3c480 321             |         if HAVE_HIDPAD
3c480 321 F8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
3c484 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
3c488 323 28 6E 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
3c48c 324 F7 01 68 FC |                 wrlong  #0,pb
3c490 325             |         end
3c490 325             |         if EMUPAD_MAX_PLAYER > 0
3c490 325             |         end
3c490 325             | 
3c490 325             |                 ' Fall through to disconnected loop
3c490 325             | 
3c490 325             | '-----------------------------------------------------------------------------------------------------------------
3c490 325             | ' Device connect handling (Section 7.1.7.3).
3c490 325             | '-----------------------------------------------------------------------------------------------------------------
3c490 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
3c490 325             | ' device to connect (Section 7.1.7.3).
3c490 325             | '-----------------------------------------------------------------------------------------------------------------
3c490 325             | disconnected
3c490 325 14 88 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
3c494 326 2C 89 0B F2 |                 cmp     hr1, save_sysclk        wz
3c498 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
3c49c 328 03 88 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
3c4a0 329 1F 88 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
3c4a4 32a             |         if ACTIVITY_LED >= 0
3c4a4 32a             |         end
3c4a4 32a 22 A7 82 FA |                 rqpin   urx, dm
3c4a8 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
3c4ac 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
3c4b0 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
3c4b4 32e             | .se1_test
3c4b4 32e B1 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
3c4b8 32f FC FE BF FD |                 call    #poll_waitx
3c4bc 330 22 A7 82 FA |                 rqpin   urx, dm
3c4c0 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3c4c4 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
3c4c8 333 A0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
3c4cc 334             | .se1            'SE1 is a fatal error condition
3c4cc 334 B1 99 02 F6 |                 mov     hctwait, _100ms_
3c4d0 335 E4 FE BF FD |                 call    #poll_waitx
3c4d4 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
3c4d8 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
3c4dc 338             | .connect_test                                           ' Test lines until stable J/K state seen
3c4dc 338 1F 62 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
3c4e0 339 22 A7 82 FA |                 rqpin   urx, dm
3c4e4 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3c4e8 33b 80 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
3c4ec 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
3c4f0 33d             | connected
3c4f0 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
3c4f4 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
3c4f8 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
3c4fc 340 6C FF 9F 5D |         if_nz   jmp     #discon_entry
3c500 341             | .set_pulse
3c500 341 1A 66 63 FD |                 getct   _pulse_time_
3c504 342 B2 67 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
3c508 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
3c508 343             | ' of 1ms and make a correction, if necessary.
3c508 343             | '                mov     htmp, _1ms_
3c508 343             | '                subs    htmp, iframe_delta
3c508 343             | '                adds    _frame1ms_clks_, htmp
3c508 343             | '                debug(udec(_frame1ms_clks_))
3c508 343             | 
3c508 343             |                 ' Fall through to idle/processing loop
3c508 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
3c50c 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
3c510 345             | 
3c510 345             | hidle
3c510 345 22 A7 82 FA |                 rqpin   urx, dm
3c514 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3c518 347 98 00 90 CD |         if_c    jmp     #.se0_test
3c51c 348 24 06 70 FD |                 pollct3                         wc
3c520 349 68 00 90 3D |         if_nc   jmp     #.nopoll
3c524 34a 1A 96 63 FD |                 getct   hct3
3c528 34b A8 97 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
3c52c 34c             | 
3c52c 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3c530 34d 00 72 E3 F8 |                 getbyte htmp
3c534 34e             | 
3c534 34e 09 72 0F F2 |                 cmp     htmp, #HUB_READY        wz
3c538 34f 8C 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
3c53c 350 40 00 90 AD |         if_z    jmp     #.poll
3c540 351             | 
3c540 351             |         if _HAVE_GAMEPAD
3c540 351 06 72 0F F2 |                 cmp     htmp, #HID_READY        wz
3c544 352 08 72 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
3c548 353 07 72 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
3c54c 354 F4 15 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
3c550 355 2C 00 90 AD |         if_z    jmp     #.poll
3c554 356             |         end
3c554 356             | 
3c554 356             |         if HAVE_MOUSE
3c554 356 04 72 0F F2 |                 cmp     htmp, #M_READY          wz
3c558 357 44 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
3c55c 358 20 00 90 AD |         if_z    jmp     #.poll
3c560 359             |         end
3c560 359             | 
3c560 359 03 72 0F F2 |                 cmp     htmp, #KB_READY         wz
3c564 35a AC 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
3c568 35b 14 00 90 AD |         if_z    jmp     #.poll
3c56c 35c             | 
3c56c 35c 05 72 0F F2 |                 cmp     htmp, #KBM_READY        wz
3c570 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
3c574 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
3c578 35f AC 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
3c57c 360             |         if HAVE_MOUSE
3c57c 360 44 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
3c580 361             |         else
3c580 361             |         end
3c580 361             | 
3c580 361             | .poll
3c580 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
3c584 362 2D EC 63 FD |                 call    pa
3c588 363             | .skip_poll
3c588 363             | 
3c588 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
3c58c 364             | 
3c58c 364             | .nopoll
3c58c 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
3c590 365 44 00 90 AD |         if_z    jmp     #hsuspend
3c594 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
3c598 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
3c59c 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
3c5a0 369 1A 86 63 FD |                 getct   hr0
3c5a4 36a B3 87 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
3c5a8 36b             |         if ACTIVITY_LED >= 0
3c5a8 36b             |         end
3c5a8 36b 1A 66 63 3D |         if_ae   getct   _pulse_time_
3c5ac 36c B2 67 03 31 |         if_ae   add     _pulse_time_, _500ms_
3c5b0 36d 5C FF 9F FD |                 jmp     #hidle
3c5b4 36e             | ' Check for extended SE0 state on the bus
3c5b4 36e             | .se0_test
3c5b4 36e A8 99 02 F6 |                 mov     hctwait, _1ms_
3c5b8 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
3c5bc 370 22 A7 82 FA |                 rqpin   urx, dm
3c5c0 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3c5c4 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
3c5c8 373 24 F6 BF FD |                 call    #wait_txn_ok
3c5cc 374 00 00 80 FF 
3c5d0 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
3c5d4 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
3c5d4 376 94 FE 9F FD |                 jmp     #discon_entry                   ' Device disconnected
3c5d8 377             | 
3c5d8 377             | hsuspend
3c5d8 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
3c5dc 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
3c5e0 379 1F 54 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
3c5e4 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
3c5e8 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
3c5ec 37c 00 98 07 F6 |                 mov     mod_cnt, #0
3c5f0 37d             | 
3c5f0 37d             |                 ' Fall through to resume wait loop
3c5f0 37d             | 
3c5f0 37d             | hwait_resume
3c5f0 37d 14 88 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
3c5f4 37e 02 88 47 F0 |                 shr     hr1, #2
3c5f8 37f 1F 88 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
3c5fc 380             |         if ACTIVITY_LED >= 0
3c5fc 380             |         end
3c5fc 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
3c600 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
3c604 382 14 72 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
3c608 383 2C 73 0B F2 |                 cmp     htmp, save_sysclk       wz
3c60c 384 18 00 90 AD |         if_z    jmp     #.resume
3c610 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
3c614 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
3c618 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
3c61c 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3c620 389 22 6F 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
3c624 38a 22 6B 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
3c628 38b             | .resume
3c628 38b 22 05 28 FC |                 wypin   #OUT_K, dm
3c62c 38c 1F 5E 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
3c630 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
3c634 38e A3 73 03 F6 |                 mov     htmp, _ip_delay_ls_
3c638 38f 01 72 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
3c63c 390 1F 72 63 FD |                 waitx   htmp
3c640 391 22 07 28 FC |                 wypin   #OUT_J, dm
3c644 392 01 72 47 F0 |                 shr     htmp, #1
3c648 393 1F 72 63 FD |                 waitx   htmp
3c64c 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3c650 395 1A 92 62 FD |                 getct   iframe_ct_base
3c654 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3c658 397 B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3c65c 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
3c660 399 AB 99 02 F6 |                 mov     hctwait, _4ms_
3c664 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
3c668 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
3c66c 39c             | 
3c66c 39c             | '------------------------------------------------------------------------------
3c66c 39c             | ' Send preamble to enable low-speed HUB ports
3c66c 39c             | '------------------------------------------------------------------------------
3c66c 39c             | ' On entry:
3c66c 39c             | ' On exit:
3c66c 39c             | '   USB baud rate set to low-speed
3c66c 39c             | '------------------------------------------------------------------------------
3c66c 39c             | utx_pre
3c66c 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3c670 39d 40 46 62 FD |                 dirl    dp
3c674 39e 28 02 64 FD |                 setq    #1
3c678 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
3c67c 3a0 58 44 62 FD |                 drvl    dm
3c680 3a1 59 46 62 FD |                 drvh    dp
3c684 3a2             | 
3c684 3a2 1E 00 00 FF 
3c688 3a3 80 72 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
3c68c 3a4             | 
3c68c 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
3c690 3a5 01 72 57 F0 |                 shr     htmp, #1        wc
3c694 3a6 28 02 64 3D |         if_nc   setq    #1
3c698 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
3c69c 3a8 1F 4E 63 FD |                 waitx   _preamble_wait_
3c6a0 3a9             | .l1
3c6a0 3a9             | 
3c6a0 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3c6a4 3aa 40 46 62 FD |                 dirl    dp
3c6a8 3ab 28 02 64 FD |                 setq    #1
3c6ac 3ac 80 00 80 FF 
3c6b0 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3c6b4 3ae 22 6B 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
3c6b8 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
3c6bc 3b0 41 46 62 FD |                 dirh    dp
3c6c0 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3c6c4 3b2             | 
3c6c4 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
3c6c8 3b3 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
3c6cc 3b4 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
3c6d0 3b5             | 
3c6d0 3b5             | hlut_end
3c6d0 3b5             |                 fit     $400
3c6d0 3b5             |                 fit     $400
3c6d0 3b5             |                 orgh
3c6d0                 | if OVERLAP_MEMORY
3c6d0                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
3c6d0                 | end
3c6d0                 | '------------------------------------------------------------------------------
3c6d0                 | ' Routines called from cog space.
3c6d0                 | '------------------------------------------------------------------------------
3c6d0                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
3c6d0                 | '------------------------------------------------------------------------------
3c6d0                 | 
3c6d0                 | '------------------------------------------------------------------------------
3c6d0                 | ' USB host cog initialization.
3c6d0                 | '------------------------------------------------------------------------------
3c6d0                 | usb_host_init
3c6d0                 |                 ' Initialize buffer pointers
3c6d0                 |         if OVERLAP_MEMORY
3c6d0                 |         else
3c6d0     4C 15 B0 FE |                 loc     pb, #hid_descr
3c6d4                 |         end
3c6d4     F7 4B 02 F6 |                 mov     hid_descr_p, pb
3c6d8                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
3c6d8                 |                 {
3c6d8                 |                 }
3c6d8                 |         
3c6d8                 |                 {
3c6d8                 |                 }
3c6d8                 |                 'loc     pb,#hkbd_report
3c6d8                 |                 'mov     hkbd_report_p,pb
3c6d8                 | 
3c6d8     44 1D B0 FE |                 loc     pb, #hub_descr
3c6dc     F7 4D 02 F6 |                 mov     hub_descr_p, pb
3c6e0     59 1D B0 FE |                 loc     pb, #urx_buff
3c6e4     F7 4F 02 F6 |                 mov     urx_buff_p, pb
3c6e8     D1 1D B0 FE |                 loc     pb, #dev_desc_buff
3c6ec     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
3c6f0     DB 1D B0 FE |                 loc     pb, #con_desc_buff
3c6f4     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
3c6f8     24 15 B0 FE |                 loc     pb, #usb_cache_start
3c6fc     F7 55 02 F6 |                 mov     cache_start_p, pb
3c700     25 1D B0 FE |                 loc     pb, #usb_cache_end
3c704     F7 57 02 F6 |                 mov     cache_end_p, pb
3c708                 | 
3c708                 |         if ERROR_LED >= 0
3c708                 |         end
3c708                 | 
3c708                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
3c708                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
3c708                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
3c708                 | ' Configure and enable the Serial Host USB port.
3c708     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
3c70c                 | 
3c70c                 | '------------------------------------------------------------------------------
3c70c                 | ' Timing calculations happen before any interrupt(s) are enabled.
3c70c                 | '------------------------------------------------------------------------------
3c70c                 | ' On entry:
3c70c                 | '   htmp - current CLKFREQ value.
3c70c                 | '------------------------------------------------------------------------------
3c70c                 | hinit_usb_timings
3c70c                 | '                getct   htmp2
3c70c     B9 59 02 F6 |                 mov     save_sysclk, htmp
3c710     8D 5B 80 FF 
3c714     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
3c718     18 32 63 FD |                 getqx   _12Mbps_
3c71c     10 32 57 F0 |                 shr     _12Mbps_, #16           wc
3c720     00 32 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
3c724     03 6E 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
3c728     0E 6E 67 F0 |                 shl     _usb_h_fs_nco_, #14
3c72c     99 6F 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
3c730     01 70 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
3c734     0E 70 67 F0 |                 shl     _usb_d_fs_nco_, #14
3c738     99 71 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
3c73c     99 35 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
3c740     03 34 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
3c744     02 6A 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
3c748     0E 6A 67 F0 |                 shl     _usb_h_ls_nco_, #14
3c74c     9A 6B 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
3c750     9A 6D 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
3c754     80 00 00 FF 
3c758     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
3c75c     18 2E 63 FD |                 getqx   _var_64_lower_
3c760     19 30 63 FD |                 getqy   _var_64_upper_
3c764     28 2E 63 FD |                 setq    _var_64_lower_
3c768     65 CD 1D FF 
3c76c     00 30 27 FD |                 qfrac   _var_64_upper_, ##_1b
3c770     18 36 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
3c774     01 00 00 FF 
3c778     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
3c77c     18 2E 63 FD |                 getqx   _var_64_lower_
3c780     19 30 63 FD |                 getqy   _var_64_upper_
3c784     28 2E 63 FD |                 setq    _var_64_lower_
3c788     A1 07 00 FF 
3c78c     40 30 27 FD |                 qfrac   _var_64_upper_, ##_1m
3c790     18 38 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
3c794     9C 7D 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
3c798     09 38 57 F0 |                 shr     _1us_, #9               wc
3c79c     00 38 27 F1 |                 addx    _1us_, #0                       ' Round to final value
3c7a0     0A 7C 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
3c7a4     18 3A 63 FD |                 getqx   _10us_
3c7a8     09 3A 57 F0 |                 shr     _10us_, #9              wc
3c7ac     00 3A 27 F1 |                 addx    _10us_, #0                      ' 10us
3c7b0     21 7C 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
3c7b4     18 3C 63 FD |                 getqx   _33us_
3c7b8     09 3C 57 F0 |                 shr     _33us_, #9              wc
3c7bc     00 3C 27 F1 |                 addx    _33us_, #0                      ' 33us
3c7c0     FA 7C 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
3c7c4     18 3E 63 FD |                 getqx   _txn_err_
3c7c8     09 3E 57 F0 |                 shr     _txn_err_, #9           wc
3c7cc     00 3E 27 F1 |                 addx    _txn_err_, #0                   ' 250us
3c7d0     F4 7D 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
3c7d4     18 40 63 FD |                 getqx   _500us_
3c7d8     09 40 57 F0 |                 shr     _500us_, #9             wc
3c7dc     00 40 27 F1 |                 addx    _500us_, #0                     ' 500us
3c7e0     01 00 00 FF 
3c7e4     9A 7C 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
3c7e8     18 42 63 FD |                 getqx   _txn_ok_ls_
3c7ec     09 42 57 F0 |                 shr     _txn_ok_ls_, #9         wc
3c7f0     00 42 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
3c7f4     01 00 00 FF 
3c7f8     52 7D 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
3c7fc     18 44 63 FD |                 getqx   _txn_ok_fs_
3c800     09 44 57 F0 |                 shr     _txn_ok_fs_, #9         wc
3c804     00 44 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
3c808     9B 47 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
3c80c     05 00 00 FF 
3c810     80 46 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
3c814     10 46 57 F0 |                 shr     _ip_delay_ls_, #16      wc
3c818     00 46 27 F1 |                 addx    _ip_delay_ls_, #0
3c81c     9B 4B 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
3c820     1C 00 00 FF 
3c824     C0 4B 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
3c828     10 4A 57 F0 |                 shr     _tat_wait_ls_, #16      wc
3c82c     00 4A 27 F1 |                 addx    _tat_wait_ls_, #0
3c830     9B 49 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
3c834     00 00 00 FF 
3c838     4E 49 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
3c83c     10 48 57 F0 |                 shr     _ip_delay_fs_, #16      wc
3c840     00 48 27 F1 |                 addx    _ip_delay_fs_, #0
3c844     9B 4D 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
3c848     04 00 00 FF 
3c84c     23 4D 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
3c850     10 4C 57 F0 |                 shr     _tat_wait_fs_, #16      wc
3c854     00 4C 27 F1 |                 addx    _tat_wait_fs_, #0
3c858     8D 5B 00 FF 
3c85c     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
3c860     18 4E 63 FD |                 getqx   _preamble_wait_
3c864     08 4E 87 F1 |                 sub     _preamble_wait_,# 9 - 1
3c868     01 00 00 FF 
3c86c     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
3c870     18 2E 63 FD |                 getqx   _var_64_lower_
3c874     19 30 63 FD |                 getqy   _var_64_upper_
3c878     28 2E 63 FD |                 setq    _var_64_lower_
3c87c     01 00 00 FF 
3c880     E8 31 27 FD |                 qfrac   _var_64_upper_, ##_1thou
3c884     18 50 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
3c888     09 50 57 F0 |                 shr     _1ms_, #9               wc
3c88c     00 50 27 F1 |                 addx    _1ms_, #0                       ' 1ms
3c890     FF FF 7F FF 
3c894     F2 69 07 F6 |                 mov     _frame1ms_clks_, ##-14
3c898     A8 69 43 F1 |                 adds    _frame1ms_clks_, _1ms_
3c89c     A8 53 03 F6 |                 mov     _2ms_, _1ms_
3c8a0     01 52 67 F0 |                 shl     _2ms_, #1                       ' 2ms
3c8a4     A8 55 03 F6 |                 mov     _suspend_wait_, _1ms_
3c8a8     A8 55 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
3c8ac     A8 57 03 F6 |                 mov     _4ms_, _1ms_
3c8b0     02 56 67 F0 |                 shl     _4ms_, #2                       ' 4ms
3c8b4     AB 59 03 F6 |                 mov     _xfer_wait_, _4ms_
3c8b8     A8 59 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
3c8bc     AC 5D 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
3c8c0     AE 5F 03 F6 |                 mov     _resume_hold_, _reset_hold_
3c8c4     02 5E 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
3c8c8     AF 63 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
3c8cc     01 62 67 F0 |                 shl     _100ms_, #1                     ' 40ms
3c8d0     A8 5B 03 F6 |                 mov     _8ms_, _1ms_
3c8d4     03 5A 67 F0 |                 shl     _8ms_, #3                       ' 8ms
3c8d8     01 5C 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
3c8dc     AE 63 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
3c8e0     AC 5D 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
3c8e4     AC 61 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
3c8e8     02 60 67 F0 |                 shl     _21ms_, #2                      ' 20ms
3c8ec     A8 61 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
3c8f0     B1 65 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
3c8f4     01 62 67 F0 |                 shl     _100ms_, #1                     ' 100ms
3c8f8     03 64 67 F0 |                 shl     _500ms_, #3                     ' 400ms
3c8fc     B1 65 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
3c900                 | '        _ret_   mov     _1sec_, save_sysclk
3c900                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
3c900                 | '                ret
3c900                 | {
3c900                 | }
3c900                 | 
3c900                 | '------------------------------------------------------------------------------
3c900                 | ' Parse a configuration descriptor chain to see if the device is a recognized
3c900                 | ' one. If it is, start the task progression that will configure the device for
3c900                 | ' use.
3c900                 | '------------------------------------------------------------------------------
3c900                 | ' On entry:
3c900                 | '   hconfig_base - start address of the cached config descriptor chain.
3c900                 | ' On exit:
3c900                 | '------------------------------------------------------------------------------
3c900                 | hparse_con_desc
3c900     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
3c904     82 73 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
3c908     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
3c90c     4E 72 FF F9 |                 movbyts htmp,#%%1032
3c910     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
3c914                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
3c914                 | 
3c914     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
3c918     6E ED 03 F1 |                 add     pa, hconfig_base
3c91c     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
3c920                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
3c920                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
3c920                 | ' that defines a keyboard and/or mouse.
3c920     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
3c924                 | .next_intf
3c924     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3c928     B8 01 90 3D |         if_ae   jmp     #hset_config
3c92c     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3c930     75 F3 03 F1 |                 add     ptrb, hnext_desc
3c934     81 73 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3c938     04 72 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
3c93c     0C 00 90 AD |         if_z    jmp     #.intf
3c940     80 73 C7 FA |                 rdbyte  htmp, ptrb
3c944     B9 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
3c948     D8 FF 9F FD |                 jmp     #.next_intf
3c94c                 | .intf
3c94c     00 90 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
3c950     00 92 07 F6 |                 mov     hpar3, #0
3c954     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
3c958     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
3c95c     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
3c960     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
3c964                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
3c964                 | 
3c964                 | .endp
3c964     80 73 C7 FA |                 rdbyte  htmp, ptrb
3c968     B9 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
3c96c     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3c970     78 00 90 3D |         if_ae   jmp     #.get_device
3c974     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3c978     75 F3 03 F1 |                 add     ptrb, hnext_desc
3c97c     81 73 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3c980     04 72 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
3c984     64 00 90 AD |         if_z    jmp     #.get_device
3c988     05 72 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
3c98c     04 00 90 AD |         if_z    jmp     #.get_ep
3c990     D0 FF 9F FD |                 jmp     #.endp
3c994                 | .get_ep
3c994     82 89 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
3c998     07 88 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
3c99c     0F 88 67 F0 |                 shl     hr1, #8 + 7
3c9a0     6C 73 03 F6 |                 mov     htmp, hctrl_ep_addr
3c9a4     3F 00 00 FF 
3c9a8     00 73 07 F5 |                 and     htmp, ##ADDR_MASK
3c9ac     C4 73 43 F5 |                 or      htmp, hr1                       ' endpoint address
3c9b0     00 90 0F F2 |                 cmp     hpar2, #0               wz
3c9b4     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
3c9b8     00 92 0F F2 |                 cmp     hpar3, #0               wz
3c9bc     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
3c9c0     A0 FF 9F FD |                 jmp     #.endp
3c9c4                 | .in_ep
3c9c4     B9 91 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
3c9c8     84 8B C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
3c9cc                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
3c9cc     86 87 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
3c9d0     C3 8B DB F8 |                 setbyte hr2, hr0, #3
3c9d4     8C FF 9F FD |                 jmp     #.endp
3c9d8                 | .out_ep
3c9d8     B9 93 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
3c9dc     84 8D C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
3c9e0                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
3c9e0     86 87 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
3c9e4     C3 8D DB F8 |                 setbyte hr3, hr0, #3
3c9e8     78 FF 9F FD |                 jmp     #.endp
3c9ec                 | 
3c9ec                 | .get_device
3c9ec     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
3c9f0     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
3c9f4     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
3c9f8     64 00 90 AD |         if_z    jmp     #.gamepad
3c9fc     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
3ca00     A8 00 90 AD |         if_z    jmp     #.hub
3ca04     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
3ca08     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
3ca0c     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3ca10     4C 00 90 AD |         if_z    jmp     #.gamepad
3ca14     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
3ca18     08 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
3ca1c                 | .keyboard
3ca1c     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
3ca20                 |         if HAVE_MOUSE
3ca20     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
3ca24                 |         else
3ca24                 |         end
3ca24     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
3ca28     F8 FE 9F 5D |         if_nz   jmp     #.next_intf
3ca2c     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3ca30     C5 71 FA F8 |                 getbyte kb_interval, hr2, #3
3ca34     C5 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
3ca38     C8 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
3ca3c                 |                 'debug(udec(kb_intf_num))
3ca3c                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3ca3c     E4 FE 9F FD |                 jmp     #.next_intf
3ca40                 | if HAVE_MOUSE
3ca40                 | .mouse
3ca40     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
3ca44     DC FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
3ca48     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
3ca4c     D4 FE 9F 5D |         if_nz   jmp     #.next_intf
3ca50     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3ca54                 |                 'getbyte ms_interval, hr2, #3
3ca54     C5 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
3ca58     C8 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
3ca5c                 |                 'debug(udec(kb_intf_num))
3ca5c                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3ca5c     C4 FE 9F FD |                 jmp     #.next_intf
3ca60                 | end
3ca60                 | .gamepad
3ca60     79 73 03 F6 |                 mov     htmp, hkbd_ep_addr
3ca64     C8 73 63 F5 |                 xor     htmp, hpar2
3ca68     3F 00 00 FF 
3ca6c     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3ca70     B0 FE 9F AD |         if_z    jmp     #.next_intf
3ca74                 |         if HAVE_MOUSE
3ca74     7A 73 03 F6 |                 mov     htmp, hmouse_ep_addr
3ca78     C8 73 63 F5 |                 xor     htmp, hpar2
3ca7c     3F 00 00 FF 
3ca80     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3ca84     9C FE 9F AD |         if_z    jmp     #.next_intf
3ca88                 |         end
3ca88     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
3ca8c     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
3ca90     90 FE 9F 5D |         if_nz   jmp     #.next_intf
3ca94                 | 
3ca94     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3ca98     C5 7B FA F8 |                 getbyte gp_interval, hr2, #3
3ca9c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3caa0     C8 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
3caa4     C9 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
3caa8                 |                 'debug(udec(gp_intf_num))
3caa8                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
3caa8     78 FE 9F FD |                 jmp     #.next_intf
3caac                 | .hub
3caac     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
3cab0     70 FE 9F 5D |         if_nz   jmp     #.next_intf
3cab4     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3cab8     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
3cabc     64 FE 9F 5D |         if_nz   jmp     #.next_intf
3cac0     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3cac4     5C FE 9F 5D |         if_nz   jmp     #.next_intf
3cac8     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
3cacc     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3cad0     C8 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
3cad4     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3cad8     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
3cadc     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
3cae0                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
3cae0     40 FE 9F FD |                 jmp     #.next_intf
3cae4                 | 
3cae4                 | '------------------------------------------------------------------------------
3cae4                 | ' If a newly-connected device is recognized, do whatever is needed to configure
3cae4                 | ' it according to its function, or functions. In the case of this boot protocol
3cae4                 | ' keyboard/mouse class driver:
3cae4                 | ' - SetConfiguration(config_num)
3cae4                 | ' - SetProtocol(boot)
3cae4                 | ' - SetIdle(indefinite)
3cae4                 | ' - Enter the device interrupt IN polling task stage.
3cae4                 | '------------------------------------------------------------------------------
3cae4                 | ' On entry:
3cae4                 | ' On exit:
3cae4                 | '------------------------------------------------------------------------------
3cae4                 | hset_config
3cae4                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
3cae4                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
3cae4     02 76 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
3cae8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3caec     00 00 0C F2 |                 cmp     0-0, #0                 wz
3caf0     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
3caf4                 |         if HAVE_MOUSE
3caf4     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
3caf8                 |         end
3caf8     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
3cafc     60 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
3cb00                 | .set_config
3cb00     74 0E D0 FE |                 loc     ptra, #set_config
3cb04     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
3cb08     6E ED 03 F1 |                 add     pa, hconfig_base
3cb0c     F6 8F C3 FA |                 rdbyte  hpar1, pa
3cb10                 |                 debug("SetConfiguration: ",udec_(hpar1))
3cb10     01 8F 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
3cb14     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
3cb18     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
3cb1c     A0 02 A0 FD |                 call    #control_write
3cb20     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3cb24     2D 00 64 5D |         if_nz   ret
3cb28                 | .kbd_config
3cb28     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
3cb2c     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
3cb30                 | 
3cb30     79 73 03 F6 |                 mov     htmp, hkbd_ep_addr
3cb34     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
3cb38     3F 00 00 FF 
3cb3c     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3cb40     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
3cb44                 | 
3cb44     37 73 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3cb48     3C 0E D0 FE |                 loc     ptra, #set_protocol
3cb4c     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
3cb50     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
3cb54     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3cb58     A0 02 A0 FD |                 call    #control_write
3cb5c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3cb60     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3cb64     F8 02 90 5D |         if_nz   jmp     #.notify_client
3cb68     00 8E 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3cb6c     37 91 E3 F8 |                 getbyte hpar2, kb_intf_num, #0
3cb70     44 03 B0 FD |                 call    #hset_idle
3cb74                 |                 'cmp     retval, #PID_ACK        wz
3cb74                 |         'if_nz   mov     hkbd_ep_addr, #0
3cb74                 |         'if_nz   jmp     #.notify_client
3cb74     A9 99 02 F6 |                 mov     hctwait, _2ms_
3cb78     EF 02 A0 FD |                 call    #poll_waitx
3cb7c     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
3cb80                 |         if NUMLOCK_DEFAULT_STATE && RPI_KEYBOARD_NUMLOCK_HACK
3cb80                 |         end
3cb80     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
3cb84     A0 17 90 FE |                 loc     pa, #hkbd_led_rep
3cb88     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
3cb8c     40 03 B0 FD |                 call    #hset_kbdled_report
3cb90     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3cb94     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3cb98     C4 02 90 5D |         if_nz   jmp     #.notify_client
3cb9c     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
3cba0     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3cba4     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3cba8     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3cbac     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
3cbb0     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3cbb4     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
3cbb8     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3cbbc     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
3cbc0     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
3cbc4     03 76 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
3cbc8                 |         if !!HAVE_MOUSE
3cbc8                 |         end
3cbc8                 | 
3cbc8                 | .mouse_config
3cbc8                 | if HAVE_MOUSE
3cbc8     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
3cbcc     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3cbd0     7A 73 03 F6 |                 mov     htmp, hmouse_ep_addr
3cbd4     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
3cbd8     3F 00 00 FF 
3cbdc     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3cbe0     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3cbe4                 | 
3cbe4                 |                 debug("mouse passed addr check")
3cbe4                 | 
3cbe4     B8 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
3cbe8     00 00 80 FF 
3cbec     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
3cbf0     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
3cbf4     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3cbf8     55 02 A0 FD |                 call    #control_read
3cbfc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3cc00     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3cc04     58 02 90 5D |         if_nz   jmp     #.notify_client
3cc08     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
3cc0c     56 01 00 F6 |                 mov     0-0, total_data
3cc10     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3cc14                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
3cc14                 | 
3cc14     35 73 E3 F8 |                 getbyte htmp, ms_intf_num, #0
3cc18     6C 0D D0 FE |                 loc     ptra, #set_protocol
3cc1c     01 03 5C FC |                 wrword  #MOUSE_FULL_PROTOCOL ? REPORT_PROTOCOL : BOOT_PROTOCOL, ptra[wValue]
3cc20     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
3cc24     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3cc28     A0 02 A0 FD |                 call    #control_write
3cc2c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3cc30     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3cc34     28 02 90 5D |         if_nz   jmp     #.notify_client
3cc38                 |                 debug("mouse passed SetProtocol")
3cc38     00 8E 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3cc3c     35 91 E3 F8 |                 getbyte hpar2, ms_intf_num, #0
3cc40     74 02 B0 FD |                 call    #hset_idle
3cc44                 |                 'cmp     retval, #PID_ACK        wz
3cc44                 |         'if_nz   mov     hmouse_ep_addr, #0
3cc44                 |         'if_nz   jmp     #.notify_client
3cc44                 |                 debug("mouse passed SetIdle")
3cc44     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3cc48     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3cc4c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3cc50     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3cc54     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
3cc58     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3cc5c     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
3cc60     79 77 03 F6 |                 mov     htmp2, hkbd_ep_addr
3cc64     7A 77 63 F5 |                 xor     htmp2, hmouse_ep_addr
3cc68     3F 00 00 FF 
3cc6c     00 77 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
3cc70     05 76 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
3cc74     04 76 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
3cc78     E4 01 90 FD |                 jmp     #.notify_client
3cc7c                 | end
3cc7c                 | .gamepad_config
3cc7c                 | if _HAVE_GAMEPAD
3cc7c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3cc80     00 00 0C F2 |                 cmp     0-0, #0                 wz
3cc84     6C 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
3cc88     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3cc8c     00 72 03 F6 |                 mov     htmp, 0-0
3cc90     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
3cc94     3F 00 00 FF 
3cc98     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3cc9c     54 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
3cca0                 | 
3cca0     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3cca4     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
3cca8     69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
3ccac     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3ccb0     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3ccb4     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3ccb8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3ccbc     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
3ccc0     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
3ccc4     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
3ccc8     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3cccc     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3ccd0     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
3ccd4     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
3ccd8     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3ccdc                 | 
3ccdc                 |                 if EMUPAD_MAX_PLAYER > 0
3ccdc                 |                 
3ccdc                 | .rule_loop           
3ccdc                 |                 end
3ccdc                 | 
3ccdc     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
3cce0     5C 00 90 AD |         if_e    jmp     #.xinput
3cce4     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3cce8     00 72 03 F6 |                 mov     htmp,0-0
3ccec     01 A6 02 FF 
3ccf0     68 72 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
3ccf4     8C 00 90 AD |         if_e    jmp     #.ps3
3ccf8                 | 
3ccf8     A4 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
3ccfc     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
3cd00     00 00 80 5F 
3cd04     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
3cd08     03 00 80 AF 
3cd0c     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
3cd10     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
3cd14     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3cd18     55 02 A0 FD |                 call    #control_read
3cd1c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3cd20     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
3cd24     00 00 04 56 |         if_nz   mov     0-0, #0
3cd28     34 01 90 5D |         if_nz   jmp     #.notify_client
3cd2c     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
3cd30     56 01 00 F6 |                 mov     0-0, total_data
3cd34     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3cd38                 |                 debug(uhex(pb),udec(total_data),uhex_byte_array(pb,total_data))
3cd38                 | 
3cd38     06 76 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
3cd3c     20 01 90 FD |                 jmp     #.notify_client
3cd40                 | .xinput
3cd40     B8 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
3cd44     2D EF 03 F6 |                 mov     pb,hdev_port
3cd48     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
3cd4c     03 EE 27 F3 |                 fle     pb,#3
3cd50     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
3cd54     02 EF 47 FC |                 wrbyte  pb, ptra[2]
3cd58                 | 
3cd58     03 B0 06 F6 |                 mov     pkt_data, #3
3cd5c     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
3cd60     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
3cd64                 |                 debug("XInput LED set ",uhex_long(ep_addr_pid),uhex_byte(pb))
3cd64     5A 00 A0 FD |                 call    #txn_out
3cd68     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
3cd6c                 | 
3cd6c     97 0C D0 FE |                 loc     ptra, #xinp_fix_8bitdo
3cd70     27 EF 03 F6 |                 mov     pb, urx_buff_p          ' We don't actually care where it goes
3cd74     55 02 A0 FD |                 call    #control_read           ' Execute GetDeviceDescriptor()
3cd78                 |                 debug("8bitdo weird fix... ",uhex(retval))
3cd78     D2 BE 06 F6 |                 mov retval,#PID_ACK             ' If we don't do this something else becomes sad (TODO fix?)
3cd7c                 | 
3cd7c                 | 
3cd7c     07 76 07 F6 |                 mov     htmp2, #XINPUT_READY
3cd80     DC 00 90 FD |                 jmp     #.notify_client
3cd84                 | .ps3
3cd84     44 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
3cd88     2D EF 03 F6 |                 mov     pb,hdev_port
3cd8c     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
3cd90     04 EE 27 F3 |                 fle     pb,#4
3cd94     F7 EF C3 F9 |                 decod   pb
3cd98     09 EF 47 FC |                 wrbyte  pb, ptra[9]
3cd9c                 | 
3cd9c     3C 73 E3 F8 |                 getbyte htmp, gp_intf_num, #0
3cda0     F4 0B D0 FE |                 loc     ptra, #set_report
3cda4     01 00 80 FF 
3cda8     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
3cdac     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
3cdb0     03 61 5C FC |                 wrword  #48, ptra[wLength]
3cdb4     14 0C B0 FE |                 loc     pb, #ps3_command_buff
3cdb8     A0 02 A0 FD |                 call    #control_write
3cdbc                 | 
3cdbc     3C 73 E3 F8 |                 getbyte htmp, gp_intf_num, #0
3cdc0     D4 0B D0 FE |                 loc     ptra, #set_report
3cdc4     01 00 80 FF 
3cdc8     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
3cdcc     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
3cdd0     03 09 5C FC |                 wrword  #4, ptra[wLength]
3cdd4     F0 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
3cdd8     A0 02 A0 FD |                 call    #control_write
3cddc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
3cde0     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
3cde4     00 00 04 56 |         if_nz   mov     0-0, #0
3cde8     74 00 90 5D |         if_nz   jmp     #.notify_client
3cdec                 | 
3cdec     08 76 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
3cdf0     6C 00 90 FD |                 jmp     #.notify_client
3cdf4                 | end
3cdf4                 | 
3cdf4                 | .hub_config
3cdf4     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3cdf8     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
3cdfc     77 73 03 F6 |                 mov     htmp, hhub_ep_addr
3ce00     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
3ce04     3F 00 00 FF 
3ce08     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3ce0c     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
3ce10                 | 
3ce10     94 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
3ce14     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
3ce18     26 EF 03 F6 |                 mov     pb, hub_descr_p
3ce1c     55 02 A0 FD |                 call    #control_read
3ce20     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3ce24     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
3ce28     34 00 90 5D |         if_nz   jmp     #.notify_client
3ce2c                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
3ce2c                 | 
3ce2c     26 F1 03 F6 |                 mov     ptra, hub_descr_p
3ce30     02 79 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
3ce34     07 78 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
3ce38                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
3ce38                 | .pwr_loop
3ce38     74 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
3ce3c     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
3ce40     02 79 57 FC |                 wrword  htmp3, ptra[wIndex]
3ce44     A0 02 A0 FD |                 call    #control_write
3ce48     FB 79 6F FB |                 djnz    htmp3, #.pwr_loop
3ce4c                 | 
3ce4c     B2 99 02 F6 |                 mov     hctwait, _500ms_
3ce50     B1 99 02 F1 |                 add     hctwait, _100ms_
3ce54     EF 02 A0 FD |                 call    #poll_waitx
3ce58                 | 
3ce58     09 76 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
3ce5c     00 00 90 FD |                 jmp     #.notify_client
3ce60                 | 
3ce60                 | .notify_client
3ce60     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
3ce64     BB 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
3ce68                 |                 debug(uhex_long(hdev_type,hdev_type+1))
3ce68                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
3ce68     2D 00 64 FD |                 ret
3ce6c                 | 
3ce6c                 | '------------------------------------------------------------------------------
3ce6c                 | ' Initialize the keyboard/mouse data area to start-up values.
3ce6c                 | '------------------------------------------------------------------------------
3ce6c                 | ' On entry:
3ce6c                 | ' On exit:
3ce6c                 | '------------------------------------------------------------------------------
3ce6c                 | init_kbdm_data
3ce6c     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
3ce70     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
3ce74                 | 
3ce74     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
3ce78     2B ED 03 F6 |                 mov     pa, cache_end_p
3ce7c                 | .loop
3ce7c     61 01 4C FC |                 wrbyte  #0, ptra++
3ce80     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
3ce84     F4 FF 9F CD |         if_b    jmp     #.loop
3ce88                 |         
3ce88                 |         if EMUPAD_MAX_PLAYER > 0
3ce88                 |         end
3ce88                 | 
3ce88                 | 
3ce88     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
3ce8c                 | .regloop
3ce8c     00 EC 8F F9 |                 altd    pa
3ce90     00 00 04 F6 |                 mov     0-0, #0
3ce94     01 EC 07 F1 |                 add     pa, #1
3ce98     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
3ce9c     EC FF 9F 5D |         if_nz   jmp     #.regloop
3cea0                 | 
3cea0     E1 E1 61 FF 
3cea4     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
3cea8     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
3ceac     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
3ceb0     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
3ceb4                 | 
3ceb4     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
3ceb8                 | 
3ceb8                 | '------------------------------------------------------------------------------
3ceb8                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
3ceb8                 | ' function.
3ceb8                 | '------------------------------------------------------------------------------
3ceb8                 | ' On entry:
3ceb8                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
3ceb8                 | '   hpar2 - index number of the target interface.
3ceb8                 | ' On exit:
3ceb8                 | '------------------------------------------------------------------------------
3ceb8                 | hset_idle
3ceb8     A9 99 02 F6 |                 mov     hctwait, _2ms_
3cebc     EF 02 A0 FD |                 call    #poll_waitx
3cec0     CC 0A D0 FE |                 loc     ptra, #set_idle
3cec4     01 8F 57 FC |                 wrword  hpar1, ptra[wValue]
3cec8     02 91 57 FC |                 wrword  hpar2, ptra[wIndex]
3cecc     A0 02 80 FD |                 jmp     #control_write
3ced0                 | 
3ced0                 | '------------------------------------------------------------------------------
3ced0                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
3ced0                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
3ced0                 | '------------------------------------------------------------------------------
3ced0                 | ' On entry:
3ced0                 | '   ep_addr_pid - device address and enpoint for the request.
3ced0                 | ' On exit:
3ced0                 | '   retval - transaction result.
3ced0                 | '------------------------------------------------------------------------------
3ced0                 | hset_kbdled_report
3ced0     37 73 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3ced4     C0 0A D0 FE |                 loc     ptra, #set_report
3ced8     01 00 80 FF 
3cedc     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
3cee0     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
3cee4     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
3cee8     27 EF 03 F6 |                 mov     pb, urx_buff_p
3ceec     F7 77 42 FC |                 wrbyte  kb_led_states, pb
3cef0     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
3cef4                 | 
3cef4                 | '------------------------------------------------------------------------------
3cef4                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
3cef4                 | '------------------------------------------------------------------------------
3cef4                 | ' On entry:
3cef4                 | ' On exit:
3cef4                 | '------------------------------------------------------------------------------
3cef4                 | hget_kbd_in_report
3cef4     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
3cef8     27 91 03 F6 |                 mov     hpar2, urx_buff_p
3cefc     30 93 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
3cf00     39 93 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
3cf04     CF 02 A0 FD |                 call    #do_int_in
3cf08     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3cf0c     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3cf10                 | 
3cf10     00 92 0F F2 |                 cmp     hpar3, #0               wz
3cf14     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3cf18                 | 
3cf18     30 73 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
3cf1c     C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3cf20     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
3cf24     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
3cf28                 | 
3cf28     C9 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
3cf2c     18 00 B0 FD |                 call    #hkbd_compare
3cf30                 |         if EMUPAD_MAX_PLAYER > 0
3cf30                 |         end
3cf30                 | 
3cf30                 | .led_check
3cf30     3B 73 03 F6 |                 mov     htmp, kb_led_states
3cf34     B9 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
3cf38     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
3cf3c     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
3cf40     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
3cf44     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
3cf48                 | 
3cf48                 | '------------------------------------------------------------------------------
3cf48                 | ' Compare current and previous keyboard data buffers for keypress changes.
3cf48                 | '------------------------------------------------------------------------------
3cf48                 | hkbd_compare
3cf48     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3cf4c     D0 13 F0 FE |                 loc     ptrb, #hkbd_report
3cf50     61 75 07 FB |                 rdlong  htmp1, ptra++
3cf54     E1 77 07 FB |                 rdlong  htmp2, ptrb++
3cf58     BB 75 0B F2 |                 cmp     htmp1, htmp2    wz
3cf5c     61 75 07 FB |                 rdlong  htmp1, ptra++
3cf60     E1 77 07 FB |                 rdlong  htmp2, ptrb++
3cf64     BB 75 0B A2 |         if_z    cmp     htmp1, htmp2    wz
3cf68     2D 00 64 AD |         if_z    ret
3cf6c                 | 
3cf6c     B0 13 D0 FE |                 loc     ptra, #hkbd_report
3cf70                 | 
3cf70                 |                 ' Handle modifiers
3cf70     27 91 C3 FA |                 rdbyte  hpar2, urx_buff_p
3cf74     00 89 C7 FA |                 rdbyte  hr1, ptra
3cf78     C8 89 43 F9 |                 rolword hr1,hpar2,#0
3cf7c     63 88 63 FD |                 mergew  hr1
3cf80     08 EC 07 F6 |                 mov     pa,#8
3cf84                 | .modloop
3cf84     6A 88 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
3cf88     E8 8E 07 F6 |                 mov     hpar1,#$E8
3cf8c     F6 8F 83 F1 |                 sub     hpar1,pa
3cf90     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
3cf94     FB ED 6F FB |                 djnz    pa,#.modloop
3cf98                 | 
3cf98     6F E0 75 FD | .release        modc    _set    wc
3cf9c                 |                 'alts    hdev_port, #hid_report_p
3cf9c                 |                 'mov     ptra, hid_report_p
3cf9c     02 F0 07 F1 |                 add     ptra, #2
3cfa0     06 EC 07 F6 |                 mov     pa, #6
3cfa4     61 8F CF FA | .rl1            rdbyte  hpar1, ptra++   wz
3cfa8     20 00 90 AD |         if_z    jmp     #.rl3
3cfac     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3cfb0     02 F2 07 F1 |                 add     ptrb, #2
3cfb4     06 EE 07 F6 |                 mov     pb, #6
3cfb8     E1 73 C7 FA | .rl2            rdbyte  htmp, ptrb++
3cfbc     B9 8F 0B F2 |                 cmp     hpar1, htmp     wz
3cfc0     08 00 90 AD |         if_z    jmp     #.rl3
3cfc4     FC EF 6F FB |                 djnz    pb, #.rl2
3cfc8     68 00 B0 FD |                 call    #hkbd_translate
3cfcc     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
3cfd0                 | 
3cfd0     00 92 07 F6 |                 mov     hpar3, #0
3cfd4     1F 92 27 F4 |                 bith    hpar3, #31
3cfd8                 | 
3cfd8     6F 00 74 FD | .press          modc    _clr    wc
3cfdc     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3cfe0     02 F0 07 F1 |                 add     ptra, #2
3cfe4     06 EC 07 F6 |                 mov     pa, #6
3cfe8     61 8F CF FA | .pl1            rdbyte  hpar1, ptra++   wz
3cfec     20 00 90 AD |         if_z    jmp     #.pl3
3cff0     2C 13 F0 FE |                 loc     ptrb, #hkbd_report
3cff4     02 F2 07 F1 |                 add     ptrb, #2
3cff8     06 EE 07 F6 |                 mov     pb, #6
3cffc     E1 73 C7 FA | .pl2            rdbyte  htmp, ptrb++
3d000     B9 8F 0B F2 |                 cmp     hpar1, htmp     wz
3d004     08 00 90 AD |         if_z    jmp     #.pl3
3d008     FC EF 6F FB |                 djnz    pb, #.pl2
3d00c     24 00 B0 FD |                 call    #hkbd_translate
3d010     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
3d014                 | 
3d014     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
3d018     04 13 F0 FE |                 loc     ptrb, #hkbd_report
3d01c     28 02 64 FD |                 setq #1
3d020     61 75 07 FB |                 rdlong  htmp1, ptra++
3d024     28 02 64 FD |                 setq #1
3d028     E1 75 67 FC |                 wrlong  htmp1, ptrb++
3d02c     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
3d030                 | 
3d030     2D 00 64 FD |                 ret
3d034                 | 
3d034                 | '------------------------------------------------------------------------------
3d034                 | ' Translate keyboard scancode to ASCII
3d034                 | '------------------------------------------------------------------------------
3d034                 | ' On entry:
3d034                 | '   hpar1 - scancode
3d034                 | '   hpar2 - key modifiers state
3d034                 | '       c - pressed (0) or released (1) flag
3d034                 | ' On exit:
3d034                 | '   hpar1 - bit     31 = 0 pressed, 1 released
3d034                 | '               30..17 = unused
3d034                 | '                   18 = scroll-lock state 
3d034                 | '                   17 = caps-lock state
3d034                 | '                   16 = num-lock state 
3d034                 | '                15..8 = key modifiers state
3d034                 | '                 7..0 = scancode
3d034                 | '------------------------------------------------------------------------------
3d034                 | hkbd_translate
3d034     39 8E 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
3d038     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
3d03c     53 8E 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
3d040     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
3d044     47 8E 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
3d048     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
3d04c                 | 
3d04c                 |         if EMUPAD_MAX_PLAYER > 0
3d04c                 | 
3d04c                 |         if EMUPAD_BT0_BIT >= 0
3d04c                 |         end
3d04c                 |         if EMUPAD_BT1_BIT >= 0
3d04c                 |         end
3d04c                 |         if EMUPAD_BT2_BIT >= 0
3d04c                 |         end
3d04c                 |         if EMUPAD_BT3_BIT >= 0
3d04c                 |         end
3d04c                 |         if EMUPAD_BT4_BIT >= 0
3d04c                 |         end
3d04c                 |         if EMUPAD_BT5_BIT >= 0
3d04c                 |         end
3d04c                 |         if EMUPAD_BT6_BIT >= 0
3d04c                 |         end
3d04c                 |         if EMUPAD_BT7_BIT >= 0
3d04c                 |         end
3d04c                 |         if EMUPAD_BT8_BIT >= 0
3d04c                 |         end
3d04c                 |         if EMUPAD_BT9_BIT >= 0
3d04c                 |         end
3d04c                 | 
3d04c                 |         end
3d04c     C8 8F CB F8 |                 setbyte hpar1, hpar2, #1
3d050     7C 8F D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
3d054     1F 8E 47 F4 |                 bitc    hpar1, #31
3d058                 |         if KEYQUEUE_SIZE > 0
3d058     C0 09 B0 FE |                 loc pb,#keyq_head
3d05c     F7 73 E3 FA |                 rdword htmp,pb
3d060     B9 75 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
3d064     B9 73 E3 F8 |                 getbyte htmp,htmp,#0 ' head
3d068     B9 77 03 F6 |                 mov htmp2,htmp
3d06c     04 76 07 FA |                 mul htmp2,#4
3d070     F7 77 03 F1 |                 add htmp2,pb
3d074     02 76 07 F1 |                 add htmp2,#2
3d078     7F 72 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
3d07c     B9 75 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
3d080     BB 8F 63 5C |         if_nz   wrlong hpar1,htmp2
3d084     F7 73 43 5C |         if_nz   wrbyte htmp,pb
3d088                 |         end
3d088     2D 00 7C FD |                 ret wcz
3d08c                 | 
3d08c                 | if HAVE_MOUSE
3d08c                 | '------------------------------------------------------------------------------
3d08c                 | ' Execute an IN interrupt transaction to poll for mouse activity.
3d08c                 | '------------------------------------------------------------------------------
3d08c                 | ' On entry:
3d08c                 | ' On exit:
3d08c                 | '------------------------------------------------------------------------------
3d08c                 | hget_mouse_in_report
3d08c     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3d090     27 91 03 F6 |                 mov     hpar2, urx_buff_p
3d094     30 93 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
3d098     36 93 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
3d09c     CF 02 A0 FD |                 call    #do_int_in
3d0a0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d0a4     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3d0a8                 | 
3d0a8     00 92 0F F2 |                 cmp     hpar3, #0               wz
3d0ac     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3d0b0                 | 
3d0b0     30 73 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
3d0b4     C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3d0b8     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
3d0bc     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
3d0c0                 | 
3d0c0                 |         'debug(uhex_byte_array(urx_buff_p,hpar3))
3d0c0                 | 
3d0c0                 |         if MOUSE_FULL_PROTOCOL
3d0c0     C8 00 B0 FD |                 call #hid_decode
3d0c4                 |         else
3d0c4                 |         end
3d0c4                 | 
3d0c4     48 09 90 FE |                 loc     pa, #mouse_limits
3d0c8     5D 13 F0 FE |                 loc     ptrb, #mouse_xacc
3d0cc                 | 
3d0cc                 |                 ' load xacc,yacc,zacc
3d0cc     28 04 64 FD |                 setq    #3-1
3d0d0     80 89 07 FB |                 rdlong  hr1,ptrb
3d0d4                 |                 ' load limits and outptr
3d0d4     28 04 64 FD |                 setq    #3-1
3d0d8     F6 75 03 FB |                 rdlong  htmp1,pa
3d0dc                 | 
3d0dc                 |         if MOUSE_FULL_PROTOCOL
3d0dc     8C 19 47 FC |                 wrbyte  hidr_buttons, ptrb[12]
3d0e0                 |         else
3d0e0                 |                 { ' Currently not used
3d0e0                 |                 '}
3d0e0                 |         end
3d0e0                 | 
3d0e0                 |         if MOUSE_FULL_PROTOCOL
3d0e0     88 73 33 F9 |                 getword htmp, hidr_axis+0, #0
3d0e4     0F 72 67 F7 |                 signx   htmp, #15
3d0e8                 |         else
3d0e8                 |         end
3d0e8     B9 89 03 F1 |                 add     hr1,htmp
3d0ec     00 74 0F F2 |                 cmp     htmp1,#0 wz
3d0f0     BA 89 63 53 |         if_ne   fles    hr1,htmp1
3d0f4     00 88 47 53 |         if_ne   fges    hr1,#0
3d0f8                 | 
3d0f8                 |         if MOUSE_FULL_PROTOCOL
3d0f8     88 73 3B F9 |                 getword htmp, hidr_axis+0, #1
3d0fc     0F 72 67 F7 |                 signx   htmp, #15
3d100                 |         else
3d100                 |         end
3d100     B9 8B 03 F1 |                 add     hr2,htmp
3d104     00 76 0F F2 |                 cmp     htmp2,#0 wz
3d108     BB 8B 63 53 |         if_ne   fles    hr2,htmp2
3d10c     00 8A 47 53 |         if_ne   fges    hr2,#0
3d110                 |                 
3d110                 |         if MOUSE_FULL_PROTOCOL
3d110     8B 73 3B F9 |                 getword htmp, hidr_axis+3, #1           ' Mouse wheel is actually on the "wheel axis"
3d114     0F 72 67 F7 |                 signx   htmp, #15
3d118     B9 8D 03 F1 |                 add     hr3, htmp
3d11c                 |         else    
3d11c                 |         end
3d11c                 | 
3d11c     90 73 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
3d120     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
3d124                 | 
3d124                 |                 ' write back accumulators
3d124     28 04 64 FD |                 setq    #3-1
3d128     80 89 67 FC |                 wrlong  hr1,ptrb
3d12c                 |                 ' if outptr set, write X/Y words
3d12c     00 78 0F F2 |                 cmp htmp3,#0                    wz
3d130     C5 89 2B 59 |         if_nz   setword hr1,hr2,#1
3d134     BC 89 63 5C |         if_nz   wrlong hr1,htmp3
3d138     2D 00 64 FD |                 ret
3d13c                 | end
3d13c                 | 
3d13c                 | '------------------------------------------------------------------------------
3d13c                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3d13c                 | '------------------------------------------------------------------------------
3d13c                 | ' On entry:
3d13c                 | ' On exit:
3d13c                 | '------------------------------------------------------------------------------
3d13c                 | if _HAVE_GAMEPAD
3d13c                 | hget_gp_in_report
3d13c     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3d140     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
3d144                 | 
3d144     27 91 03 F6 |                 mov     hpar2, urx_buff_p
3d148     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
3d14c     00 92 E3 F8 |                 getbyte hpar3
3d150     FF 92 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
3d154     CF 02 A0 FD |                 call    #do_int_in
3d158     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d15c     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3d160                 | 
3d160     00 92 0F F2 |                 cmp     hpar3, #0               wz
3d164     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3d168                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
3d168                 | 
3d168     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
3d16c     00 72 E3 F8 |                 getbyte htmp                            ' |
3d170     C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3d174     4B 72 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
3d178     C3 72 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
3d17c     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
3d180     B9 01 C0 F8 |                 setbyte htmp                            ' |
3d184                 | 
3d184                 | ' Note: the following code compares the current and previous reports
3d184                 | ' and process the data if there are changes to ease the debug output.
3d184                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
3d184                 | ' gpPreReport buffer.
3d184                 | 
3d184                 |                 ' ----- start of block to remove
3d184                 |                 {
3d184                 |                 }
3d184                 |                 ' ----- end of block to remove
3d184     14 05 90 FE |                 loc pa,#hpad_translate
3d188     2A EC 63 FD |                 push pa
3d18c                 | 
3d18c                 |                 ' FALL THROUGH !!!!
3d18c                 | end
3d18c                 | if _HAVE_GAMEPAD || MOUSE_FULL_PROTOCOL
3d18c                 | '------------------------------------------------------------------------------
3d18c                 | ' Decode controller report
3d18c                 | '------------------------------------------------------------------------------
3d18c                 | hid_decode
3d18c                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
3d18c     28 20 64 FD |                 setq #(hidr_end-hidr_start)-1
3d190     00 04 00 FF 
3d194     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
3d198                 | 
3d198     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3d19c                 | 
3d19c     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3d1a0     00 1C E3 F8 |                 getbyte hidr_type
3d1a4                 |         if _HAVE_GAMEPAD
3d1a4     07 1C 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
3d1a8     08 03 90 AD |         if_z    jmp     #hpad_xinput
3d1ac     08 1C 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
3d1b0     EC 03 90 AD |         if_z    jmp     #hpad_ps3
3d1b4                 |         end
3d1b4     05 1C 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
3d1b8     04 1C 07 A6 |         if_z    mov     hidr_type,#M_READY
3d1bc     04 1C 0F F2 |                 cmp     hidr_type, #M_READY             wz
3d1c0                 |                 
3d1c0                 | 
3d1c0                 | '------------------------------------------------------------------------------
3d1c0                 | ' Handle HID controller (or mouse now
3d1c0                 | ' On entry:
3d1c0                 | '   ptrb - controller report
3d1c0                 | '------------------------------------------------------------------------------
3d1c0                 | hpad_hid
3d1c0     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3d1c4     F7 F1 03 F6 |                 mov     ptra, pb
3d1c8     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
3d1cc     00 EC 03 F6 |                 mov     pa, 0-0
3d1d0                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
3d1d0     19 2A 3B FF 
3d1d4     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
3d1d8                 | 
3d1d8                 | .next
3d1d8     00 EC 5F F2 |                 cmps    pa, #0      wcz
3d1dc     2D 00 7C ED |         if_be   ret     wcz
3d1e0                 | 
3d1e0     61 8F C7 FA |                 rdbyte  hpar1, ptra++
3d1e4     01 EC 87 F1 |                 sub     pa, #1
3d1e8     00 90 07 F6 |                 mov     hpar2, #0
3d1ec                 | 
3d1ec     C7 73 03 F6 |                 mov     htmp, hpar1
3d1f0     03 72 07 F5 |                 and     htmp, #$03
3d1f4     01 72 0F F2 |                 cmp     htmp, #1    wz
3d1f8     61 91 C7 AA |         if_z    rdbyte  hpar2, ptra++
3d1fc     07 90 67 A7 |         if_z    signx   hpar2,#7
3d200     01 EC 87 A1 |         if_z    sub     pa, #1
3d204     02 72 0F F2 |                 cmp     htmp, #2    wz
3d208     61 91 E7 AA |         if_z    rdword  hpar2, ptra++
3d20c     0F 90 67 A7 |         if_z    signx   hpar2,#15
3d210     02 EC 87 A1 |         if_z    sub     pa, #2
3d214     03 72 0F F2 |                 cmp     htmp, #3    wz
3d218     61 91 07 AB |         if_z    rdlong  hpar2, ptra++
3d21c     04 EC 87 A1 |         if_z    sub     pa, #4
3d220                 | 
3d220     FC 8E 07 F5 |                 and     hpar1, #$FC
3d224                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
3d224                 | 
3d224     84 8E 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
3d228     18 01 90 AD |         if_z    jmp     #.report_id
3d22c     04 8E 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
3d230     30 01 90 AD |         if_z    jmp     #.usage_page
3d234     08 8E 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
3d238     38 01 90 AD |         if_z    jmp     #.usage
3d23c     14 8E 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
3d240     C8 2B 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
3d244     24 8E 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
3d248     C8 2B 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
3d24c     34 8E 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
3d250     C8 2D 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
3d254     44 8E 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
3d258     C8 2D 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
3d25c     74 8E 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
3d260     C8 27 03 A6 |         if_z    mov     hidr_size, hpar2
3d264     94 8E 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
3d268     C8 29 03 A6 |         if_z    mov     hidr_count, hpar2
3d26c     B4 8E 1F F2 |                 cmp     hpar1, #HID_POP wcz
3d270     A4 8E 0F 52 |         if_nz   cmp     hpar1, #HID_PUSH wz
3d274     64 01 90 AD |         if_z    jmp     #.pushpop ' Entering with C set if PUSH  
3d278     80 8E 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
3d27c     58 FF 9F 5D |         if_nz   jmp     #.next
3d280                 | 
3d280     D5 25 A7 FB |                 tjf     hidr_state,#.next
3d284                 | 
3d284     03 90 07 F5 |                 and     hpar2, #$03
3d288     02 90 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
3d28c     18 00 90 5D |         if_nz   jmp     #.skip
3d290                 | 
3d290     02 24 0F F2 |                 cmp     hidr_state, #2  wz
3d294     20 00 90 AD |         if_z    jmp     #.axes
3d298     03 24 0F F2 |                 cmp     hidr_state, #3  wz
3d29c     5C 00 90 AD |         if_z    jmp     #.hats
3d2a0     04 24 0F F2 |                 cmp     hidr_state, #4  wz
3d2a4     70 00 90 AD |         if_z    jmp     #.buttons
3d2a8                 | .skip
3d2a8     93 73 03 F6 |                 mov     htmp, hidr_size
3d2ac     94 73 03 FA |                 mul     htmp, hidr_count
3d2b0     B9 21 03 F1 |                 add     hidr_offset, htmp
3d2b4     20 FF 9F FD |                 jmp     #.next
3d2b8                 | .axes
3d2b8                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count),uhex_long(hidr_flags))
3d2b8     87 87 53 F8 |                 getnib  hr0, hidr_flags, #2
3d2bc     94 89 03 F6 |                 mov     hr1, hidr_count
3d2c0                 | .l1
3d2c0     90 8F 03 F6 |                 mov     hpar1, hidr_offset
3d2c4     93 91 03 F6 |                 mov     hpar2, hidr_size
3d2c8     28 01 B0 FD |                 call    #hpad_getbits
3d2cc     88 01 B0 FD |                 call    #hpad_normalize
3d2d0     08 86 1F F2 |                 cmp     hr0, #8         wcz
3d2d4     86 87 5F C9 |         if_b    altgn   hr0, #hidr_usage
3d2d8     00 8A 43 C8 |         if_b    getnib  hr2
3d2dc     88 8B 77 C9 |         if_b    altsw   hr2, #hidr_axis
3d2e0     5F 01 20 C9 |         if_b    setword retval
3d2e4     01 86 07 C1 |         if_b    add     hr0, #1
3d2e8     93 21 03 F1 |                 add     hidr_offset, hidr_size
3d2ec     F4 89 6F FB |                 djnz    hr1, #.l1
3d2f0                 | 
3d2f0     C3 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
3d2f4     01 24 07 F6 |                 mov     hidr_state, #1
3d2f8     DC FE 9F FD |                 jmp     #.next
3d2fc                 | .hats
3d2fc                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
3d2fc     90 8F 03 F6 |                 mov     hpar1, hidr_offset
3d300     93 91 03 F6 |                 mov     hpar2, hidr_size
3d304     EC 00 B0 FD |                 call    #hpad_getbits
3d308     5F 1B C3 F8 |                 setbyte hidr_hats, retval, #0
3d30c     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3d310     01 24 07 F6 |                 mov     hidr_state, #1
3d314     90 FF 9F FD |                 jmp     #.skip
3d318                 | .buttons
3d318                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
3d318     90 8F 03 F6 |                 mov     hpar1, hidr_offset
3d31c     93 91 03 F6 |                 mov     hpar2, hidr_size
3d320     94 91 03 FA |                 mul     hpar2, hidr_count
3d324     CC 00 B0 FD |                 call    #hpad_getbits
3d328     87 73 E3 F8 |                 getbyte htmp, hidr_flags, #0
3d32c     B9 BF 62 F0 |                 shl     retval, htmp
3d330     5F 19 43 F5 |                 or      hidr_buttons, retval
3d334     94 73 03 F1 |                 add     htmp, hidr_count
3d338     B9 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
3d33c     01 24 07 F6 |                 mov     hidr_state, #1
3d340     64 FF 9F FD |                 jmp     #.skip
3d344                 | .report_id
3d344     00 1E 0F F2 |                 cmp     hidr_id, #0     wz
3d348     2D 00 7C 5D |         if_nz   ret     wcz
3d34c     E1 73 C7 FA |                 rdbyte  htmp, ptrb++
3d350                 |                 'debug(".report_id",udec(htmp,hpar2))
3d350     C8 73 0B F2 |                 cmp     htmp, hpar2     wz
3d354     B9 1F 03 A6 |         if_z    mov     hidr_id, htmp
3d358     01 24 67 56 |         if_nz   neg     hidr_state,#1
3d35c     01 F2 87 51 |         if_nz   sub     ptrb,#1
3d360     74 FE 9F FD |                 jmp     #.next
3d364                 | .usage_page
3d364     09 90 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
3d368     01 24 0F A2 |         if_z    cmp     hidr_state, #1  wz
3d36c     04 24 07 A6 |         if_z    mov     hidr_state, #4
3d370     64 FE 9F FD |                 jmp     #.next
3d374                 | .usage
3d374     04 90 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
3d378     05 90 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
3d37c     06 1C 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
3d380     01 24 07 A6 |         if_z    mov     hidr_state, #1
3d384     50 FE 9F AD |         if_z    jmp     #.next
3d388     02 90 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
3d38c     04 1C 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
3d390     01 24 07 A6 |         if_z    mov     hidr_state, #1
3d394     40 FE 9F AD |         if_z    jmp     #.next
3d398     30 90 17 F2 |                 cmp     hpar2, #HID_USAGE_X     wc
3d39c     38 90 97 32 |         if_nc   cmpr    hpar2, #HID_USAGE_WHEEL wc   
3d3a0     10 00 90 3D |         if_nc   jmp     #.usage_axis
3d3a4     39 90 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
3d3a8     01 24 0F A2 |         if_z    cmp     hidr_state, #1      wz
3d3ac     03 24 07 A6 |         if_z    mov     hidr_state, #3
3d3b0     24 FE 9F FD |                 jmp     #.next
3d3b4                 | .usage_axis
3d3b4     01 24 57 F2 |                 cmps    hidr_state, #1          wc
3d3b8     1C FE 9F CD |         if_b    jmp     #.next
3d3bc     37 90 27 F3 |                 fle     hpar2, #HID_USAGE_DIAL   ' Let's just say wheel and dial are the same to keep sane
3d3c0     86 23 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
3d3c4     C8 01 00 F8 |                 setnib  hpar2
3d3c8                 | 
3d3c8     20 90 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
3d3cc     C8 0F 23 F4 |                 bith    hidr_flags, hpar2
3d3d0                 | 
3d3d0     01 22 07 F1 |                 add     hidr_usage_idx, #1
3d3d4     02 24 07 F6 |                 mov     hidr_state, #2
3d3d8     FC FD 9F FD |                 jmp     #.next
3d3dc                 | .pushpop
3d3dc                 |                 ' Entering with C set if PUSH  
3d3dc     4C 0F B0 FE |                 loc     pb, #hid_stack
3d3e0     28 08 64 CD |         if_c    setq    #(hidr_end-hidr_state)-1
3d3e4     F7 25 63 CC |         if_c    wrlong  hidr_state, pb
3d3e8     28 08 64 3D |         if_nc   setq    #(hidr_end-hidr_state)-1
3d3ec     F7 25 03 3B |         if_nc   rdlong  hidr_state, pb
3d3f0     E4 FD 9F FD |                 jmp     #.next
3d3f4                 | 
3d3f4                 | '------------------------------------------------------------------------------
3d3f4                 | ' Read bits from report data buffer
3d3f4                 | '------------------------------------------------------------------------------
3d3f4                 | ' On entry:
3d3f4                 | '   PTRB - report buffer
3d3f4                 | '   hpar1 - start bit
3d3f4                 | '   hpar2 - number of bits
3d3f4                 | ' On exit:
3d3f4                 | '   retval - bits
3d3f4                 | '------------------------------------------------------------------------------
3d3f4                 | hpad_getbits
3d3f4     C7 73 03 F6 |                 mov     htmp, hpar1
3d3f8     03 72 47 F0 |                 shr     htmp, #3        ' byte offset
3d3fc     F9 73 03 F1 |                 add     htmp, ptrb
3d400     B9 BF 02 FB |                 rdlong  retval, htmp
3d404                 | 
3d404     C7 75 03 F6 |                 mov     htmp1, hpar1
3d408     07 74 07 F5 |                 and     htmp1, #$07     ' shift
3d40c     BA BF 42 F0 |                 shr     retval, htmp1
3d410                 | 
3d410     18 90 1F F2 |                 cmp     hpar2, #24      wcz
3d414     10 00 90 1D |         if_a    jmp     #.l1
3d418                 | 
3d418     C8 91 C3 F9 |                 decod   hpar2
3d41c     01 90 87 F1 |                 sub     hpar2, #1
3d420     C8 BF 02 F5 |                 and     retval, hpar2
3d424     2D 00 64 FD |                 ret
3d428                 | .l1
3d428     FF 7F 00 FF 
3d42c     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
3d430     03 72 07 F1 |                 add     htmp, #3
3d434     B9 77 03 FB |                 rdlong  htmp2, htmp
3d438     18 90 87 F1 |                 sub     hpar2, #24
3d43c     C8 91 C3 F9 |                 decod   hpar2
3d440     01 90 87 F1 |                 sub     hpar2, #1
3d444     BA 77 43 F0 |                 shr     htmp2, htmp1
3d448     C8 77 03 F5 |                 and     htmp2, hpar2
3d44c     18 76 67 F0 |                 shl     htmp2, #24
3d450     BB BF 42 F5 |                 or      retval, htmp2
3d454     2D 00 64 FD |                 ret
3d458                 | 
3d458                 | '------------------------------------------------------------------------------
3d458                 | ' Normalize value to signed word (-32768 / 32767)
3d458                 | '------------------------------------------------------------------------------
3d458                 | ' On entry:
3d458                 | '   retval - value to normalize
3d458                 | '   hidr_lminmax - min (word 1) max (word 0) value range
3d458                 | '   - or -
3d458                 | '   hidr_pminmax - min (word 1) max (word 0) value range
3d458                 | '   hidr_size - value bits length
3d458                 | ' On exit:
3d458                 | '   retval - normalized value
3d458                 | '------------------------------------------------------------------------------
3d458                 | hpad_normalize
3d458     95 73 0B F6 |                 mov     htmp, hidr_lminmax  wz
3d45c     96 73 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
3d460     2D 00 64 AD |         if_z    ret
3d464     B9 75 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
3d468     B9 73 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
3d46c     0F 74 77 F7 |                 signx   htmp1, #15      wc
3d470     FF 27 97 C9 |         if_c    alts    hidr_size, #511
3d474     00 BE 66 C7 |         if_c    signx   retval, #0-0
3d478                 |                 ' slightly crappy hack: if in mouse mode, don't normalize
3d478     04 1C 0F F2 |                 cmp     hidr_type, #M_READY wz
3d47c     2D 00 64 AD |         if_z    ret
3d480     BA 73 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
3d484     BA BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
3d488     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
3d48c     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
3d490     B9 73 53 F6 |                 abs     htmp            wc
3d494     1F BE 0E F4 |                 testb   retval, #31     wz
3d498     5F BF 42 F6 |                 abs     retval
3d49c     B9 BF 12 FD |                 qdiv    retval, htmp
3d4a0     18 BE 62 FD |                 getqx   retval
3d4a4     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
3d4a8     C0 FF 7F FF 
3d4ac     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
3d4b0     2D 00 64 FD |                 ret
3d4b4                 | end
3d4b4                 | 
3d4b4                 | if _HAVE_GAMEPAD
3d4b4                 | '------------------------------------------------------------------------------
3d4b4                 | ' Handle XInput controller
3d4b4                 | ' On entry:
3d4b4                 | '   ptrb - controller report
3d4b4                 | '------------------------------------------------------------------------------
3d4b4                 | '   Default implementation translates the report to a pseudo-defacto hid
3d4b4                 | '   standard and jumps to hpad_translate for actions.
3d4b4                 | '   Implementors may take specific actions for this kind of controller.
3d4b4                 | '------------------------------------------------------------------------------
3d4b4                 | hpad_xinput
3d4b4     80 73 CF FA |                 rdbyte  htmp, ptrb      wz
3d4b8     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
3d4bc     81 73 C7 FA |                 rdbyte  htmp, ptrb[1]
3d4c0     14 72 0F F2 |                 cmp     htmp, #$14      wz
3d4c4     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
3d4c8                 | 
3d4c8                 |                 'debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3d4c8                 | 
3d4c8     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
3d4cc     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
3d4d0                 | 
3d4d0     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
3d4d4     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
3d4d8     5F BF 22 F6 |                 not     retval
3d4dc     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3d4e0     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
3d4e4     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
3d4e8     5F BF 22 F6 |                 not     retval
3d4ec     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3d4f0                 | 
3d4f0     FF 2A 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3d4f4     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
3d4f8     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3d4fc     06 18 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
3d500     54 FF BF FD |                 call    #hpad_normalize
3d504     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
3d508     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
3d50c     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3d510     07 18 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
3d514     40 FF BF FD |                 call    #hpad_normalize
3d518     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
3d51c                 | 
3d51c     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3d520     81 BF E6 FA |                 rdword  retval, ptrb[1]
3d524     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3d528     00 18 47 F4 |                 bitc    hidr_buttons, #0
3d52c     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3d530     01 18 47 F4 |                 bitc    hidr_buttons, #1
3d534     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3d538     02 18 47 F4 |                 bitc    hidr_buttons, #2
3d53c     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3d540     03 18 47 F4 |                 bitc    hidr_buttons, #3
3d544     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
3d548     04 18 47 F4 |                 bitc    hidr_buttons, #4
3d54c     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
3d550     05 18 47 F4 |                 bitc    hidr_buttons, #5
3d554     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
3d558     08 18 47 F4 |                 bitc    hidr_buttons, #8
3d55c     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
3d560     09 18 47 F4 |                 bitc    hidr_buttons, #9
3d564     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
3d568     0A 18 47 F4 |                 bitc    hidr_buttons, #10
3d56c     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
3d570     0B 18 47 F4 |                 bitc    hidr_buttons, #11
3d574     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
3d578     0C 18 47 F4 |                 bitc    hidr_buttons, #12
3d57c                 | 
3d57c     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3d580     5F 73 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
3d584     7A BB 7A FF 
3d588     0F 74 07 F6 |                 mov     htmp1, ##$F576_F40F
3d58c     F9 FF 7F FF 
3d590     12 77 07 F6 |                 mov     htmp2, ##$FFFF_F312
3d594     BA 73 5F F9 |                 altgn   htmp, #htmp1
3d598     00 72 43 F8 |                 getnib  htmp
3d59c     B9 1B C3 08 |         _ret_   setbyte hidr_hats, htmp, #0
3d5a0                 | 
3d5a0                 | '------------------------------------------------------------------------------
3d5a0                 | ' Handle PS3 controller
3d5a0                 | ' On entry:
3d5a0                 | '   ptrb - controller report
3d5a0                 | '------------------------------------------------------------------------------
3d5a0                 | '   Default implementation translates the report to a pseudo-defacto hid
3d5a0                 | '   standard and jumps to hpad_translate for actions.
3d5a0                 | '   Implementors may take specific actions for this kind of controller.
3d5a0                 | '------------------------------------------------------------------------------
3d5a0                 | hpad_ps3
3d5a0     E1 73 C7 FA |                 rdbyte  htmp, ptrb++
3d5a4     01 72 0F F2 |                 cmp     htmp, #$01      wz
3d5a8     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
3d5ac                 | 
3d5ac                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3d5ac                 | 
3d5ac     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
3d5b0     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
3d5b4                 | 
3d5b4     FF 2A 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3d5b8     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
3d5bc     98 FE BF FD |                 call    #hpad_normalize
3d5c0     5F 11 23 F9 |                 setword hidr_axis, retval, #0
3d5c4     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
3d5c8     8C FE BF FD |                 call    #hpad_normalize
3d5cc     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3d5d0     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
3d5d4     80 FE BF FD |                 call    #hpad_normalize
3d5d8     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
3d5dc     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
3d5e0     74 FE BF FD |                 call    #hpad_normalize
3d5e4     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3d5e8     91 BF C6 FA |                 rdbyte  retval, ptrb[17]        ' RX = L2 analog
3d5ec     68 FE BF FD |                 call    #hpad_normalize
3d5f0     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
3d5f4     92 BF C6 FA |                 rdbyte  retval, ptrb[18]        ' RY = R2 analog
3d5f8     5C FE BF FD |                 call    #hpad_normalize
3d5fc     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
3d600                 | 
3d600     08 8E 07 F6 |                 mov     hpar1, #8
3d604     13 90 07 F6 |                 mov     hpar2, #19
3d608     E8 FD BF FD |                 call    #hpad_getbits
3d60c                 | 
3d60c     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3d610     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3d614     00 18 47 F4 |                 bitc    hidr_buttons, #0
3d618     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3d61c     01 18 47 F4 |                 bitc    hidr_buttons, #1
3d620     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3d624     02 18 47 F4 |                 bitc    hidr_buttons, #2
3d628     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3d62c     03 18 47 F4 |                 bitc    hidr_buttons, #3
3d630     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
3d634     04 18 47 F4 |                 bitc    hidr_buttons, #4
3d638     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
3d63c     05 18 47 F4 |                 bitc    hidr_buttons, #5
3d640     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
3d644     06 18 47 F4 |                 bitc    hidr_buttons, #6
3d648     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
3d64c     07 18 47 F4 |                 bitc    hidr_buttons, #7
3d650     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
3d654     08 18 47 F4 |                 bitc    hidr_buttons, #8
3d658     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
3d65c     09 18 47 F4 |                 bitc    hidr_buttons, #9
3d660     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
3d664     0A 18 47 F4 |                 bitc    hidr_buttons, #10
3d668     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
3d66c     0B 18 47 F4 |                 bitc    hidr_buttons, #11
3d670     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
3d674     0C 18 47 F4 |                 bitc    hidr_buttons, #12
3d678                 | 
3d678     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3d67c     5F 73 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
3d680     09 FA 79 FF 
3d684     0F 74 07 F6 |                 mov     htmp1, ##$F3F4_120F
3d688     FF FA 7F FF 
3d68c     76 77 07 F6 |                 mov     htmp2, ##$FFF5_FF76
3d690     BA 73 5F F9 |                 altgn   htmp, #htmp1
3d694     00 72 43 F8 |                 getnib  htmp
3d698     B9 1B C3 08 |         _ret_   setbyte hidr_hats, htmp, #0
3d69c                 | 
3d69c                 | 
3d69c                 | '------------------------------------------------------------------------------
3d69c                 | ' Perform controller actions
3d69c                 | ' On entry:
3d69c                 | '    hidr_id        report id
3d69c                 | '    hidr_axis      axis value (signed word, 2 axes per long)
3d69c                 | '                      X = hidr_axis+0, #0
3d69c                 | '                      Y = hidr_axis+0, #1
3d69c                 | '                      Z = hidr_axis+1, #0
3d69c                 | '                     RX = hidr_axis+1, #1
3d69c                 | '                     RY = hidr_axis+2, #0
3d69c                 | '                     RZ = hidr_axis+2, #1
3d69c                 | '                     Sl = hidr_axis+3, #0
3d69c                 | '                     Wh = hidr_axis+3, #1
3d69c                 | '    hidr_buttons   buttons state (bits 0 to 31)
3d69c                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
3d69c                 | '
3d69c                 | '                     -------3 -------2 -------1 -------0 byte
3d69c                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
3d69c                 | '    hidr_flags       xxxxxxxx_wsrrrzyx_hhhhaaaa_bbbbbbbb
3d69c                 | '                              hlzyx||| |||||||| ++++++++ n. buttons
3d69c                 | '                              |||||||| ||||++++--------- n. axes
3d69c                 | '                              |||||||| ++++------------- n. hats
3d69c                 | '                              ++++++++------------------ valid axes
3d69c                 | '------------------------------------------------------------------------------
3d69c                 | hpad_translate
3d69c                 | 
3d69c                 | 
3d69c                 |         if HAVE_HIDPAD
3d69c     A0 0C F0 FE |                 loc     ptrb,#hidpad_report
3d6a0     2D 73 0B F6 |                 mov     htmp,hdev_port          wz
3d6a4     8F 73 03 A6 |         if_z    mov     htmp,hidr_id
3d6a8     01 72 E7 F2 |                 cmpsub  htmp,#1
3d6ac     07 1E 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
3d6b0     02 1E 17 52 |         if_nz   cmp     hidr_id, #2             wc
3d6b4     2D 00 7C 3D |         if_ae   ret     wcz
3d6b8     20 72 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
3d6bc     B9 F3 03 F1 |                 add     ptrb,htmp
3d6c0     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3d6c4     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
3d6c8     28 0E 64 FD |                 setq    #8-1
3d6cc     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
3d6d0                 |         end
3d6d0                 | 
3d6d0                 | 
3d6d0                 |         if EMUPAD_MAX_PLAYER > 0
3d6d0                 | .emupad_no_hat
3d6d0                 |         if EMUPAD_BT0_BIT >= 0
3d6d0                 |         end
3d6d0                 |         if EMUPAD_BT1_BIT >= 0
3d6d0                 |         end
3d6d0                 |         if EMUPAD_BT2_BIT >= 0
3d6d0                 |         end
3d6d0                 |         if EMUPAD_BT3_BIT >= 0
3d6d0                 |         end
3d6d0                 |         if EMUPAD_BT4_BIT >= 0
3d6d0                 |         end
3d6d0                 |         if EMUPAD_BT5_BIT >= 0
3d6d0                 |         end
3d6d0                 |         if EMUPAD_BT6_BIT >= 0
3d6d0                 |         end
3d6d0                 |         if EMUPAD_BT7_BIT >= 0
3d6d0                 |         end
3d6d0                 |         if EMUPAD_BT8_BIT >= 0
3d6d0                 |         end
3d6d0                 |         if EMUPAD_BT9_BIT >= 0
3d6d0                 |         end
3d6d0                 | .emupad_slot_over
3d6d0                 |         end
3d6d0                 | 
3d6d0                 |         if 0
3d6d0                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
3d6d0                 | 
3d6d0                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
3d6d0                 | 
3d6d0                 |         end
3d6d0     2D 00 64 FD |                 ret
3d6d4                 | end
3d6d4                 | 
3d6d4                 | if EMUPAD_MAX_PLAYER > 0
3d6d4                 | '------------------------------------------------------------------------------
3d6d4                 | ' Clear EmuPad state
3d6d4                 | '------------------------------------------------------------------------------
3d6d4                 | emupad_reset
3d6d4                 | 
3d6d4                 | '------------------------------------------------------------------------------
3d6d4                 | ' Get EmuPad Player number for current device (into retval)
3d6d4                 | ' Z flag is also set if current device is valid
3d6d4                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
3d6d4                 | '------------------------------------------------------------------------------
3d6d4                 | emupad_getnum
3d6d4                 | .loop
3d6d4                 | '------------------------------------------------------------------------------
3d6d4                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
3d6d4                 | '------------------------------------------------------------------------------
3d6d4                 | emupad_discon
3d6d4                 | .loop         
3d6d4                 |         
3d6d4                 |         ' FALL THROUGH!!!
3d6d4                 | 
3d6d4                 | '------------------------------------------------------------------------------
3d6d4                 | ' Update EmuPad reports (all of them...)
3d6d4                 | '------------------------------------------------------------------------------
3d6d4                 | emupad_write_reports
3d6d4                 | .devloop
3d6d4                 | 
3d6d4                 | end
3d6d4                 | 
3d6d4                 | 
3d6d4                 | '------------------------------------------------------------------------------
3d6d4                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3d6d4                 | '------------------------------------------------------------------------------
3d6d4                 | ' On entry:
3d6d4                 | ' On exit:
3d6d4                 | '------------------------------------------------------------------------------
3d6d4                 | hget_hub_status
3d6d4     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
3d6d8     27 91 03 F6 |                 mov     hpar2, urx_buff_p
3d6dc     32 93 23 F9 |                 setword hpar3, hub_next_datax, #0
3d6e0     01 92 2F F9 |                 setword hpar3, #1, #1
3d6e4     CF 02 A0 FD |                 call    #do_int_in
3d6e8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d6ec     0C 00 90 AD |         if_z    jmp     #.data
3d6f0     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3d6f4     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
3d6f8     2D 00 64 FD |                 ret
3d6fc                 | .data
3d6fc     00 92 0F F2 |                 cmp     hpar3, #0               wz
3d700     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3d704                 | 
3d704     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
3d708     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
3d70c     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
3d710     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
3d714                 |                 debug(ubin_long(hub_status_chg))
3d714                 | 
3d714     01 5A 06 F6 |                 mov     hdev_port, #1
3d718                 | .loop
3d718     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
3d71c     0C 00 B0 AD |         if_x1   call    #hub_port_handler
3d720     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
3d724     F0 FF 9F 3D |         if_nc   jmp     #.loop
3d728     2D 00 64 FD |                 ret
3d72c                 | 
3d72c                 | hub_port_handler
3d72c     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
3d730     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3d734     27 EF 03 F6 |                 mov     pb, urx_buff_p
3d738     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3d73c     55 02 A0 FD |                 call    #control_read
3d740     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3d744                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3d744                 | 
3d744     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
3d748     50 01 90 5D |         if_x0   jmp     #.other
3d74c     68 02 D0 FE |                 loc     ptra, #clr_port_feat
3d750     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
3d754     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3d758     A0 02 A0 FD |                 call    #control_write
3d75c     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
3d760     7C 01 90 5D |         if_x0   jmp     #.disconnect
3d764     B1 99 02 F6 |                 mov     hctwait, _100ms_
3d768     EF 02 A0 FD |                 call    #poll_waitx
3d76c                 | 
3d76c     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
3d770     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
3d774     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3d778     A0 02 A0 FD |                 call    #control_write
3d77c                 | 
3d77c     02 78 07 F6 |                 mov     htmp3, #2
3d780                 | .wait_reset
3d780     AD 99 02 F6 |                 mov     hctwait, _8ms_
3d784     EF 02 A0 FD |                 call    #poll_waitx
3d788     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3d78c     27 EF 03 F6 |                 mov     pb, urx_buff_p
3d790     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3d794     55 02 A0 FD |                 call    #control_read
3d798     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3d79c     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
3d7a0     F7 79 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
3d7a4                 | 
3d7a4     10 02 D0 FE |                 loc     ptra, #clr_port_feat
3d7a8     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
3d7ac     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3d7b0     A0 02 A0 FD |                 call    #control_write
3d7b4                 | 
3d7b4     24 72 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
3d7b8                 | .wait_recover
3d7b8     A8 99 02 F6 |                 mov     hctwait, _1ms_
3d7bc     EF 02 A0 FD |                 call    #poll_waitx
3d7c0     FD 73 6F FB |                 djnz    htmp,#.wait_recover
3d7c4                 | 
3d7c4     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3d7c8     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3d7cc     0E 6A 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3d7d0                 | 
3d7d0     00 08 00 FF 
3d7d4     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3d7d8     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
3d7dc     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
3d7e0     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3d7e4     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3d7e8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d7ec     48 01 90 5D |         if_nz   jmp     #.done
3d7f0                 | .get_dev_desc
3d7f0     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3d7f4     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3d7f8     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3d7fc     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
3d800     2D 73 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
3d804     01 73 57 FC |                 wrword  htmp, ptra[wValue]
3d808     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
3d80c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d810     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3d814     AD 99 02 F6 |                 mov     hctwait, _8ms_
3d818     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
3d81c     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
3d820     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
3d824     BE 00 A0 FD |                 call    #calc_crc5
3d828     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
3d82c     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3d830     F7 AD C2 FA |                 rdbyte  total_data, pb
3d834     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3d838     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
3d83c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d840     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3d844     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3d848     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3d84c                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3d84c     A0 99 02 F6 |                 mov     hctwait, _500us_
3d850     EF 02 A0 FD |                 call    #poll_waitx
3d854     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
3d858     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3d85c     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
3d860     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3d864     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d868     CC 00 90 5D |         if_nz   jmp     #.done
3d86c     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
3d870     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3d874     61 87 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
3d878     61 89 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3d87c     00 73 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
3d880     09 86 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3d884     02 88 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3d888     56 73 1B A2 |         if_z    cmp     htmp, total_data        wcz
3d88c     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
3d890     A4 00 90 CD |         if_b    jmp     #.done
3d894     68 F0 BF FD |                 call    #hparse_con_desc
3d898     9C 00 90 FD |                 jmp     #.done
3d89c                 | 
3d89c                 | .other
3d89c     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
3d8a0     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
3d8a4     28 00 90 AD |         if_x1   jmp     #.reset_feature
3d8a8     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
3d8ac     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
3d8b0     1C 00 90 AD |         if_x1   jmp     #.reset_feature
3d8b4     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
3d8b8     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
3d8bc     10 00 90 AD |         if_x1   jmp     #.reset_feature
3d8c0     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
3d8c4     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
3d8c8     04 00 90 AD |         if_x1   jmp     #.reset_feature
3d8cc     68 00 90 FD |                 jmp     #.done
3d8d0                 | .reset_feature
3d8d0     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
3d8d4     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3d8d8     A0 02 A0 FD |                 call    #control_write
3d8dc     58 00 90 FD |                 jmp     #.done
3d8e0                 | .disconnect
3d8e0                 | 
3d8e0     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3d8e4     00 72 E3 F8 |                 getbyte htmp
3d8e8     03 72 0F F2 |                 cmp     htmp,#KB_READY wz
3d8ec     05 72 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
3d8f0     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
3d8f4     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
3d8f8     00 76 06 A6 |         if_z    mov     kb_led_states, #0
3d8fc     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
3d900                 |         if EMUPAD_MAX_PLAYER > 0
3d900                 |         end
3d900                 |         if HAVE_MOUSE
3d900     04 72 0F F2 |                 cmp     htmp, #M_READY          wz
3d904     05 72 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
3d908     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
3d90c                 |         end
3d90c                 |         if HAVE_HIDPAD
3d90c     30 0A F0 FE |                 loc ptrb,#hidpad_report
3d910     2D 73 03 F6 |                 mov htmp,hdev_port
3d914     01 72 E7 F2 |                 cmpsub htmp,#1
3d918     20 72 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
3d91c     B9 F3 03 F1 |                 add ptrb,htmp
3d920     28 0E 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
3d924     80 01 6C FC |                 wrlong #0,ptrb
3d928                 |         end
3d928                 | 
3d928     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
3d92c     00 00 C4 F8 |                 setbyte #0
3d930     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3d934     00 00 04 F6 |                 mov     0-0, #0
3d938                 | 
3d938                 | .done
3d938     0E 6A 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
3d93c     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3d940     22 6F 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3d944     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
3d948     A6 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3d94c     A4 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3d950                 | 
3d950     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3d954     27 EF 03 F6 |                 mov     pb, urx_buff_p
3d958     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3d95c     55 02 A0 FD |                 call    #control_read
3d960     00 69 06 FB |                 rdlong  hub_port_status, ptra
3d964                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3d964     2D 00 64 FD |                 ret
3d968                 | 
3d968                 | '------------------------------------------------------------------------------
3d968                 | ' Partially populated SETUP packets
3d968                 | '------------------------------------------------------------------------------
3d968     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3d969     06          |                 byte    REQ_GET_DESC
3d96a     00 01       |                 word    TYPE_DEVICE << 8
3d96c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3d96e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3d970     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3d971     06          |                 byte    REQ_GET_DESC
3d972     00 02       |                 word    TYPE_CONFIG << 8
3d974     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3d976     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3d978     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3d979     09          |                 byte    REQ_SET_CONFIG
3d97a     00 00       |                 word    0       ' Configuration value
3d97c     00 00       |                 word    0       ' Zero
3d97e     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
3d980     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3d981     05          |                 byte    REQ_SET_ADDR
3d982     00 00       |                 word    0       ' Zero
3d984     00 00       |                 word    0       ' Zero
3d986     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
3d988                 | '------------------------------------------------------------------------------
3d988                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
3d988                 | ' wValue field dictates which protocol should be used.
3d988                 | '
3d988                 | ' When initialized, all devices default to report protocol. However the host
3d988                 | ' should not make any assumptions about the device state and should set the
3d988                 | ' desired protocol whenever initializing a device.
3d988                 | '------------------------------------------------------------------------------
3d988     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3d989     0B          |                 byte    HID_SET_PROTO
3d98a     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
3d98c                 |                                                 ' (HID 1.11 Section 7.2.6).
3d98c     00 00       |                 word    0               ' Interface index number.
3d98e     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
3d990                 | '------------------------------------------------------------------------------
3d990     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3d991     0A          |                 byte    HID_SET_IDLE
3d992     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
3d994                 |                                         ' reporting until a change is detected in the report data
3d994                 | 
3d994                 |                                         ' (HID 1.11 Section 7.2.4).
3d994     00 00       |                 word    0       ' Interface index number.
3d996     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
3d998     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3d999     09          |                 byte    HID_SET_REPORT
3d99a     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
3d99c                 |                                         ' (HID 1.11 Section 7.2.2).
3d99c     00 00       |                 word    0       ' Interface index number.
3d99e     00 00       |                 word    0       ' Size of the report, in bytes.
3d9a0     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
3d9a1     06          |                 byte    REQ_GET_DESC
3d9a2     00 22       |                 word    TYPE_REPORT << 8
3d9a4     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3d9a6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3d9a8                 | '------------------------------------------------------------------------------
3d9a8     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
3d9a9     06          |                 byte    REQ_GET_DESC
3d9aa     00 29       |                 word    TYPE_HUB << 8
3d9ac     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3d9ae     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3d9b0     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3d9b1     03          |                 byte    REQ_SET_FEATURE
3d9b2     00 00       |                 word    0       ' port power
3d9b4     01 00       |                 word    1       ' Port index number (1+)
3d9b6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3d9b8     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3d9b9     01          |                 byte    REQ_CLEAR_FEATURE
3d9ba     00 00       |                 word    0       ' port power
3d9bc     01 00       |                 word    1       ' Port index number (1+)
3d9be     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3d9c0     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
3d9c1     00          |                 byte    REQ_GET_STATUS
3d9c2     00 00       |                 word    0
3d9c4     01 00       |                 word    1       ' Port index number (1+)
3d9c6     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
3d9c8                 | '------------------------------------------------------------------------------
3d9c8                 | if _HAVE_GAMEPAD
3d9c8     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
3d9cc                 | ps3_command_buff
3d9cc     00 00 00 00 
3d9d0     00          |                 byte    $00, $00, $00, $00, $00
3d9d1     00 00 00 00 
3d9d5     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
3d9d6     FF 27 10 00 
3d9da     32          |                 byte    $FF, $27, $10, $00, $32
3d9db     FF 27 10 00 
3d9df     32          |                 byte    $FF, $27, $10, $00, $32
3d9e0     FF 27 10 00 
3d9e4     32          |                 byte    $FF, $27, $10, $00, $32
3d9e5     FF 27 10 00 
3d9e9     32          |                 byte    $FF, $27, $10, $00, $32
3d9ea     00 00 00 00 
3d9ee     00          |                 byte    $00, $00, $00, $00, $00
3d9ef     00 00 00 00 
3d9f3     00          |                 byte    $00, $00, $00, $00, $00
3d9f4     00 00 00 00 
3d9f8     00          |                 byte    $00, $00, $00, $00, $00
3d9f9     00 00 00    |                 byte    $00, $00, $00
3d9fc                 | '------------------------------------------------------------------------------
3d9fc     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
3d9ff                 |                                         ' 0x01 All blinking
3d9ff                 |                                         ' 0x02 1 flashes, then on
3d9ff                 |                                         ' 0x03 2 flashes, then on
3d9ff                 |                                         ' 0x04 3 flashes, then on
3d9ff                 |                                         ' 0x05 4 flashes, then on
3d9ff                 |                                         ' 0x06 1 on
3d9ff                 |                                         ' 0x07 2 on
3d9ff                 |                                         ' 0x08 3 on
3d9ff                 |                                         ' 0x09 4 on
3d9ff                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
3d9ff                 |                                         ' 0x0B Blinking*
3d9ff                 |                                         ' 0x0C Slow blinking*
3d9ff                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
3d9ff     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
3da02     00          |                 byte    $00             ' Left rumble
3da03     00          |                 byte    $00             ' Right rumble
3da04     00 00 00    |                 byte    $00, $00, $00
3da07                 | 
3da07                 | xinp_fix_8bitdo '' This inexplicable String request (that WILL fail) somehow un-bugs the terrible firmware
3da07                 |                 '' of certain wired 8bitdo gamepads.
3da07     80          |                 byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3da08     06          |                 byte    REQ_GET_DESC
3da09     04 03       |                 word    TYPE_STRING << 8 + 4
3da0b     09 04       |                 word    $0409   ' Zero or Language ID (Section 9.6.7)
3da0d     02 00       |                 word    2       ' Number of bytes to transfer if there is a data stage
3da0f     00          | end
3da10                 | alignl
3da10                 | 
3da10                 | if HAVE_MOUSE
3da10     00 00 00 00 
3da14     00 00 00 00 | mouse_limits long 0[2]
3da18     00 00 00 00 | mouse_outptr long 0
3da1c                 | end
3da1c                 | 
3da1c                 | if KEYQUEUE_SIZE > 0
3da1c     00          | keyq_head byte 0
3da1d     00          | keyq_tail byte 0
3da1e     00 00 00 00 
      ...             
3dc1a     00 00 00 00 
3dc1e     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
3dc20                 | alignl
3dc20                 | end
3dc20                 | 
3dc20                 | if EMUPAD_MAX_PLAYER > 0
3dc20                 | emupad_rule_buffer
3dc20                 | if EMUPAD_BUILTIN_RULES
3dc20                 | file "padmap_builtin.dat"
3dc20                 | end
3dc20                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
3dc20                 | '' Default rule directly follows!
3dc20                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
3dc20                 | end
3dc20                 | 
3dc20                 | '------------------------------------------------------------------------------
3dc20                 | ' The USB data cache area gets zero-filled at every device disconnect
3dc20                 | '------------------------------------------------------------------------------
3dc20                 | usb_cache_start
3dc20                 | 
3dc20                 | ' HID descriptor and report buffers
3dc20                 | if !!OVERLAP_MEMORY
3dc20     00 00 00 00 
      ...             
3e318     00 00 00 00 
3e31c     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
3e320                 | end
3e320     00 00 00 00 
3e324     00 00 00 00 | hkbd_report     byte    0[8]
3e328     00 00 00 00 | hkbd_led_rep    byte    0
3e32c                 | alignl
3e32c                 | 
3e32c     00 00 00 00 
3e330     00 00 00 00 
3e334     00 00 00 00 
3e338     00 00 00 00 
3e33c     00 00 00 00 | hid_stack       long 0[(hidr_end - hidr_state) * 1]
3e340                 | 
3e340                 | if HAVE_HIDPAD
3e340     00 00 00 00 
      ...             
3e418     00 00 00 00 
3e41c     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
3e420                 | end
3e420                 | 
3e420                 | ' HUB descriptor
3e420     00          | hub_descr       byte    0   ' bDescLength
3e421     00          |                 byte    0   ' bDescriptorType
3e422     00          |                 byte    0   ' bNbrPorts
3e423     00 00       |                 word    0   ' wHubCharacteristics
3e425     00          |                 byte    0   ' bPwrOn2PwrGood
3e426     00          |                 byte    0   ' bHubContrCurrent
3e427     00          |                 byte    0   ' DeviceRemoveable
3e428     00          |                 byte    0   ' PortPwrCtrlMask
3e429                 | 
3e429                 | usb_cache_end
3e429                 | 
3e429                 | if HAVE_MOUSE
3e429     00 00 00 00 | mouse_xacc      long 0
3e42d     00 00 00 00 | mouse_yacc      long 0
3e431     00 00 00 00 | mouse_zacc      long 0
3e435     00          | mouse_bstate    byte 0
3e436     00          | mouse_lpending  byte 0
3e437     00          | mouse_rpending  byte 0
3e438     00          | mouse_mpending  byte 0
3e439     00          | mouse_lock      byte 0
3e43a     00 00 00    |                 byte 0[3] ' padding
3e43d                 | end
3e43d                 | 
3e43d     00 00 00 00 
      ...             
3e4b5     00 00 00 00 
3e4b9     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
3e4bd     00 00 00 00 
3e4c1     00 00 00 00 
3e4c5     00 00 00 00 
3e4c9     00 00 00 00 
3e4cd     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
3e4cf     00 00 00 00 
      ...             
3e5c7     00 00 00 00 
3e5cb     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
3e5cf                 | 
3e5cf     00          | driver_cog      byte    0                       ' Current driver cog + 1
3e5d0                 | 	alignl
3e5d0                 | _Audio2_004_spin2_dat_
3e5d0                 | 
3e5d0                 | audio       	org     0
3e5d0                 | 
3e5d0     61 69 05 FB |             	rdlong  mailbox2, ptra++     	' get start address of all mailboxes
3e5d4     61 A1 05 FB |             	rdlong  scbase, ptra++       	' get start address of scope buffer
3e5d8     61 AD 05 FB |             	rdlong  hubptr, ptra++       	' get start address of PSRAM cache
3e5dc                 | 
3e5dc     01 EC 63 FD |             	cogid   pa                   	' compute cogid
3e5e0     0C EC 07 FA |             	mul     pa, #12              	' and mailbox spacing
3e5e4     F6 69 01 F1 |             	add     mailbox2, pa         	' add offset to find this COG's mailbox
3e5e8     B4 66 01 F6 |             	mov     mailbox, mailbox2     	' we need 2 copies of this to enable switching between hub and psram
3e5ec                 | 
3e5ec     0E AA 05 FC |             	wrpin   dac2,#left           	' PWM DACs at 44100@339 MHz
3e5f0     0E AE 15 FC |             	wxpin   sr44100,#left      	' 30*256
3e5f4     0F AA 05 FC |             	wrpin   dac2,#right
3e5f8     0F AE 15 FC |             	wxpin   sr44100,#right    
3e5fc     41 9C 64 FD |             	dirh    #left addpins 1
3e600     20 9C 64 FD |             	setse1  #%001<<6 + left      	' Set the event - DAC empty
3e604                 |  
3e604                 |             
3e604                 | '---------------------------------------------------------------------------------        
3e604                 | '----------------- The main loop -------------------------------------------------
3e604                 | '---------------------------------------------------------------------------------
3e604                 | 
3e604     0F 98 05 F6 | loop       	mov 	    cn,#15 '7
3e608                 |               					'   waitx ##3300000  		'for debug
3e608                 |             
3e608                 | '----------------------------------------------------------------------------------
3e608                 | '------------- Get parameters and execute commands if any -------------------------
3e608                 | '----------------------------------------------------------------------------------
3e608                 | 
3e608                 | 
3e608     CC 60 01 F6 | p401        	mov     channeladd,cn             	' compute the pointer to channel parameters block
3e60c     06 60 65 F0 |             	shl     channeladd,#6
3e610     B0 F0 03 F1 |             	add     ptra,channeladd
3e614                 | 
3e614     28 1A 64 FD |             	setq    #13                       	' read parameters
3e618     00 6F 05 FB |             	rdlong  pointer0,ptra
3e61c     1F 82 1D F4 | p408        	bitl    command0,#31 wcz	      	' bit #31 command - set the DAC sample rate
3e620     2C 00 90 3D |     	if_nc   jmp     #p404                     	' if not set, proceed
3e624     C1 62 01 F6 |             	mov     qq,command0             	' get the new rate
3e628     4E 62 15 FC |             	wxpin   qq,#left addpins 1        	' and program the pins
3e62c     B1 62 E1 F8 |             	getbyte qq,qq,#0 		      	' check if the rate is n*256
3e630     00 62 0D F2 |             	cmp     qq,#0 wz                         
3e634     4E AA 05 AC |     	if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
3e638     4E A8 05 5C |     	if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
3e63c                 |                 
3e63c     1E 78 1D F4 |                	bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
3e640     00 6E 05 A6 |     	if_z    mov     pointer0, #0  
3e644     00 70 05 A6 |     	if_z    mov     pointer0h, #0  
3e648     00 76 05 A6 |     	if_z    mov     envph0, #0  
3e64c     05 79 65 AC |     	if_z    wrlong  sstart0, ptra[5]          	' reset bit #30 in hub
3e650                 |     	
3e650     BC 62 01 F6 | p404        	mov     qq,sstart0		     	' check if start>$80000
3e654     FF FF 03 FF 
3e658     FF 63 05 F5 | 		and 	qq,##$7FFFFFF 
3e65c     00 04 00 FF 
3e660     00 62 1D F2 |                 cmp 	qq,##$80000 wcz
3e664     B4 66 01 36 |     	if_ge   mov     mailbox,mailbox2          	' if yes, use PSRAM
3e668     00 66 05 C6 |     	if_lt   mov     mailbox,#0                	' if not, use HUB 
3e66c                 | 
3e66c     BF 94 39 F9 | p405           	getword apan0,volpan0,#1          	' extract vol,pan from longs 
3e670     BF 92 31 F9 |     	    	getword avol0,volpan0,#0
3e674                 |     	    	
3e674                 | '----------------------------------------------------------------------------------
3e674                 | '------------- Compute the envelope, if exists ------------------------------------
3e674                 | '----------------------------------------------------------------------------------
3e674                 |             
3e674     00 84 1D F2 |             	cmp     envptr0,#0 wcz     		' read the pointer
3e678     20 00 00 AF 
3e67c     00 E0 05 A6 |     	if_z    mov     envs1,##$4000			' if 0, no envelope, load $4000=1 for scas
3e680     54 00 90 AD |     	if_z    jmp     #p410				' and run away	
3e684                 | 
3e684     C3 76 01 F1 |            	add     envph0,envspd0			' envelope PA update
3e688                 |            	           
3e688     BB DC 01 F6 |       	    	mov     envhi, envph0			' move phase acc to high part of env pointer
3e68c     06 DC 45 F0 | 		shr     envhi,#6			' leave 10 bits in hi
3e690     EE DE 31 F9 | 	   	getword envlo,envhi,#0              	' and 16 bit in lo
3e694     10 DC 45 F0 | 	    	shr     envhi,#16			' move 10 bits of hi to the lower word
3e698     C4 DC 19 F2 | 	    	cmp     envhi,envlen0 wcz		' compare this to envelope length
3e69c                 | 	    											'debug(udec(envhi,envlen0))
3e69c     C4 DC 01 36 |     	if_ge  	mov     envhi,envlen0			' if greater than, set it at envlen
3e6a0     00 DE 05 36 |     	if_ge   mov     envlo,#0
3e6a4     C4 76 01 36 |     	if_ge   mov     envph0,envlen0             	' and set envph0 at the end of the envelope
3e6a8     16 76 65 30 |     	if_ge   shl     envph0,#22
3e6ac                 | 
3e6ac     EE E0 01 F6 |             	mov 	envs1,envhi			' 10 high bits of PA is the offset to the envelope entry
3e6b0     01 E0 65 F0 |             	shl 	envs1,#1                        ' these entries are 16 bit so multiply the offset by 2
3e6b4     C2 E0 01 F1 |             	add 	envs1,envptr0                   ' and add it to the pointer
3e6b8     F0 E0 01 FB |             	rdlong 	envs1,envs1			' and then read 2 entries in one rdlong
3e6bc     F0 E2 39 F9 |             	getword envs2,envs1,#1			' then separate them		
3e6c0     F0 E0 31 F9 |            	getword envs1,envs1,#0
3e6c4     EF E2 01 FA |             	mul     envs2,envlo                     ' and do linear interpolation based on lower bits of the offset
3e6c8     EF DE 21 F6 |             	not     envlo
3e6cc     EF E0 01 FA |             	mul     envs1,envlo
3e6d0     F1 E0 01 F1 |             	add     envs1,envs2
3e6d4     12 E0 45 F0 |             	shr     envs1,#18			' we need only 14 bits for scas
3e6d8                 |               
3e6d8                 | '----------------------------------------------------------------------------------
3e6d8                 | '------------- Generate the noise if bit 27 of the pointer is set -----------------
3e6d8                 | '----------------------------------------------------------------------------------
3e6d8                 | 
3e6d8     1B 78 0D F4 | p410        	testb   sstart0, #27 wz
3e6dc     1B 64 61 AD |     	if_z    getrnd  spl
3e6e0     9C 00 90 AD |     	if_z    jmp     #p406
3e6e4                 |     	
3e6e4                 | '----------------------------------------------------------------------------------
3e6e4                 | '------------- Get the sample -----------------------------------------------------
3e6e4                 | '----------------------------------------------------------------------------------    	
3e6e4                 |  
3e6e4     B8 96 01 F6 | 		mov	oldptrh,pointer0h
3e6e8     C0 90 F9 F8 |            	getbyte	afreq0,freqskip0,#3         	' the frequency is in 8:24 format, so get integer in afreq0
3e6ec     08 80 65 F0 |            	shl	freqskip0,#8                	' and keep the fractional in freqskip0
3e6f0     C0 6E 19 F1 |            	add     pointer0,freqskip0 wcz      	' compute the pointer to the next sample   
3e6f4     C8 70 21 F1 |            	addx	pointer0h,afreq0  
3e6f8     CB 70 19 F2 |  		cmp	pointer0h,oldptrh wcz
3e6fc     50 00 90 AD |  	if_e 	jmp 	#p411				' if the pointer didn't change, no sample has to be read
3e700                 |      	
3e700     1F 78 0D F4 |             	testb   sstart0,#31 wz       	   	' bit 31 : 16 bit sample  
3e704     01 70 65 A0 |      	if_z    shl     pointer0h,#1        
3e708     1C 78 0D F4 |             	testb   sstart0,#28 wz  		' bit 28 : interleaved sample         
3e70c     01 70 65 A0 |      	if_z    shl     pointer0h,#1        
3e710                 | 												
3e710     BE 70 19 F2 |             	cmp     pointer0h,lend0 wcz		' check if end of the loop reached
3e714     BE 70 81 31 |    	if_ge   sub     pointer0h,lend0       
3e718     BD 70 01 31 |         if_ge   add     pointer0h,lstart0
3e71c     BE 70 19 F2 |             	cmp     pointer0h,lend0 wcz		' check if end of the loop reached
3e720     BE 70 01 36 |         if_ge   mov	pointer0h,lend0	
3e724                 |  
3e724     B8 62 01 F6 |              	mov     qq,pointer0h              	' compute place in the memory from where the sample will be loaded
3e728     BC 62 01 F1 |            	add     qq,sstart0            
3e72c     FF 67 5D F2 |            	cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
3e730     B1 64 E1 EA |     	if_le   rdword  spl,qq                      	' if not, use HUB RAM for samples
3e734     F8 00 B0 1D |     	if_gt   call    #cache_read
3e738     1F 78 0D F4 |                 testb   sstart0,#31 wz 
3e73c     08 64 65 50 |     	if_nz   shl     spl,#8				' convert 8 to 16 bit if needed
3e740     01 70 45 A0 |         if_z    shr     pointer0h,#1
3e744     1C 78 0D F4 |                 testb   sstart0,#28 wz            
3e748     01 70 45 A0 |     	if_z    shr     pointer0h,#1    
3e74c     B2 74 41 F9 |                 rolword rawspl0,spl,#0			' now rawspl0 has oldsample:newsample in it
3e750                 |              
3e750                 |              
3e750                 | 
3e750                 |              
3e750                 |                   
3e750     BA 64 31 F9 | p411	      	getword spl,rawspl0,#0
3e754     BA 8E 39 F9 | 		getword oldspl,rawspl0,#1		' then separate them		
3e758                 | 
3e758                 |          '    debug(uhex(pointer0h,pointer0,spl,oldspl))
3e758                 | 
3e758                 | 
3e758     B7 DE 01 F6 | 		mov	envlo,pointer0
3e75c     12 DE 45 F0 | 		shr 	envlo,#18
3e760                 | 	
3e760     EF 8E 31 FA |             	scas    oldspl,envlo                   	' and do linear interpolation
3e764     00 8E 01 F6 |             	mov 	oldspl,0-0
3e768     EF DE 21 F6 |             	not     envlo
3e76c     1F 00 00 FF 
3e770     FF DF 05 F5 |           	and     envlo,##$3FFF
3e774     EF 64 31 FA |            	scas    spl,envlo
3e778     00 64 01 F6 |             	mov     spl,0-0
3e77c     C7 64 01 F1 |                 add     spl, oldspl
3e780                 | 	 
3e780     F0 64 31 FA | p406        	scas    spl, envs1
3e784     00 64 01 F6 |             	mov     spl,0-0
3e788     C9 64 31 FA |             	scas    spl,avol0                 	' apply volume
3e78c     00 64 01 F6 |             	mov     spl,0-0
3e790                 |  
3e790     CA 64 31 FA |             	scas    spl,apan0                 	' apply pan
3e794     00 9A 01 F6 |             	mov     ls0,0-0
3e798     20 00 00 FF 
3e79c     00 62 05 F6 |             	mov     qq,##16384
3e7a0     CA 62 81 F1 |             	sub     qq,apan0
3e7a4     B1 64 31 FA |             	scas    spl,qq
3e7a8     00 9C 01 F6 |             	mov     rs0, 0-0
3e7ac                 |       
3e7ac     CE 72 29 F9 |                 setword sample0,rs0,#1           	' pack samples into long
3e7b0     CD 72 21 F9 |                 setword sample0,ls0,#0
3e7b4                 |                 
3e7b4     CD 6A 01 F1 |                 add  lsample,ls0
3e7b8     CE 6C 01 F1 |                 add  rsample,rs0
3e7bc                 |              
3e7bc     1E 78 1D F4 |             	bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
3e7c0     00 6E 05 A6 |     	if_z    mov     pointer0, #0  
3e7c4     00 70 05 A6 |     	if_z    mov     pointer0h, #0  
3e7c8     00 76 05 A6 |     	if_z    mov     envph0, #0  
3e7cc     05 79 65 AC |     	if_z    wrlong  sstart0, ptra[5]          	' reset bit #30 in hub
3e7d0                 |             
3e7d0     28 08 64 FD | p403        	setq #4                          	' write new pointer, sample values and env pointer to the hub
3e7d4     00 6F 65 FC | 	       	wrlong  pointer0,ptra
3e7d8     B0 F0 83 F1 |             	sub     ptra, channeladd         	' reset the pointer to channel parameters
3e7dc                 | 
3e7dc     8A 99 7D FB |             	djnf    cn, #p401
3e7e0                 | 
3e7e0     0F 6C E5 F4 |             	bitnot rsample, #15
3e7e4     0F 6A E5 F4 |             	bitnot lsample, #15
3e7e8                 |   							'           	getct ct2  	'debug
3e7e8                 |   							'          	sub ct2,ct1
3e7e8                 |   							'          	debug(udec(ct2))
3e7e8     24 28 60 FD |             	waitse1
3e7ec                 |           
3e7ec     0E 6A 25 FC |            	wypin   lsample, #left              
3e7f0     0F 6C 25 FC |                 wypin   rsample, #right        
3e7f4                 | 
3e7f4     B5 9E 21 F9 | 		setword oldsample, lsample,#0		' for oscilloscope
3e7f8     B6 9E 29 F9 | 		setword oldsample, rsample,#1
3e7fc                 | 		
3e7fc     00 6C 05 F6 |             	mov rsample, #0
3e800     00 6A 05 F6 |             	mov lsample, #0
3e804                 | 
3e804                 | '----------------------------------------------------------------------------------
3e804                 | '------------- Oscilloscope  -----------------------------------------------------
3e804                 | '----------------------------------------------------------------------------------   
3e804                 | 		
3e804     00 A0 0D F2 | 	    	cmp     scbase,#0 wz
3e808     20 00 90 AD |     	if_z    jmp #p302	   
3e80c                 |  
3e80c     01 A6 15 F7 |             	incmod  scope,#1 wc            		'  todo: scope speed instead of const  
3e810     D1 A4 01 C6 |     	if_c    mov scptr2,scptr
3e814     02 A4 65 C0 |     	if_c    shl scptr2,#2
3e818     D0 A4 01 C1 |     	if_c    add scptr2,scbase     
3e81c     60 A4 65 FC |             	wrlong scptr2,#$60
3e820     D2 9E 61 CC |     	if_c    wrlong oldsample,scptr2
3e824     01 00 00 CF 
3e828     7F A2 05 C7 |     	if_c    incmod scptr,##639
3e82c                 |             
3e82c     D4 FD 9F FD |  p302           jmp     #loop            'loop
3e830                 | 
3e830                 | '----------------------------------------------------------------------------------
3e830                 | '------------- This is the end of the main loop -----------------------------------
3e830                 | '----------------------------------------------------------------------------------
3e830                 | 
3e830                 | '----------------------------------------------------------------------------------
3e830                 | '------------- PSRAM cache ----------- --------------------------------------------
3e830                 | '----------------------------------------------------------------------------------
3e830                 | 
3e830                 | ' There are 16 cache pointers for 16 channels
3e830                 | ' if 24 higher bits of address=cache, then get a word from the cache
3e830                 | ' else load the cache from PSRAM, update the pointer, then read a sample
3e830                 | 
3e830                 | 
3e830     B1 D6 E1 F8 | cache_read  	getbyte addrlo,qq,#0 			' when this is called, qq is the addres of the sample			
3e834                 |             
3e834     B1 D8 01 F6 | 	   	mov     addrhi,qq		
3e838     08 D8 45 F0 | 	    	shr     addrhi,#8		        ' get 24 upper bits
3e83c     D8 98 95 F9 | 	    	alts    cn,#cache1            
3e840     00 D8 09 F2 | 	    	cmp	addrhi,0-0 wz               	' and compare with the cache pointer for the channel
3e844     34 00 90 AD |     	if_z    jmp     #p701	    			' if equal, cache hit, read the sample from it
3e848                 | 	
3e848     D8 98 8D F9 | p702	    	altd    cn,#cache1			' cache miss. 
3e84c     EC 00 00 F6 | 	    	mov     0-0,addrhi                  	' update the pointer
3e850     EC D0 01 F6 | 	    	mov     cmd,addrhi			' prepare the mailbox
3e854     08 D0 65 F0 | 	    	shl     cmd,#8
3e858     0B D0 3D F8 |             	setnib  cmd, #%1011, #7             	' read burst from the external memory
3e85c     CC D2 01 F6 |             	mov     hubaddr,cn                  	' to the channel cache
3e860     08 D2 65 F0 |             	shl     hubaddr,#8                  	'
3e864     D6 D2 01 F1 |             	add     hubaddr,hubptr 
3e868     00 D5 05 F6 |             	mov     count,#256                  	' 256 bytes
3e86c     28 04 64 FD |             	setq    #2                          	' write 3 longs
3e870     B3 D0 61 FC |             	wrlong  cmd, mailbox                	' run it
3e874     B3 D0 01 FB | poll1       	rdlong  cmd, mailbox                	' poll mailbox for result
3e878     FE D1 B5 FB |             	tjs     cmd, #poll1                 	' retry until valid 
3e87c                 |             
3e87c                 | 	
3e87c     CC 62 01 F6 | p701	    	mov     qq,cn				' cache hit
3e880     08 62 65 F0 | 	    	shl     qq,#8				' compute the cache start
3e884     D6 62 01 F1 | 	    	add     qq,hubptr
3e888     EB 62 01 F1 | 	    	add	qq,addrlo			' add 8 lower bits to the cache addredd
3e88c     B1 64 E1 0A |     	_ret_   rdword  spl,qq                      	' read a long from the cache
3e890                 |           
3e890                 |   
3e890                 | 
3e890                 | 
3e890                 | '---------------------------------------------------------------------------
3e890                 | '------- Variables ---------------------------------------------------------
3e890                 | '---------------------------------------------------------------------------
3e890                 | 
3e890                 | ' constants
3e890                 | 
3e890     00 00 00 00 | channeladd 	long 0
3e894                 | 
3e894                 | ' temporary variables 
3e894                 | 
3e894     00 00 00 00 | qq          	long 0
3e898     00 00 00 00 | spl         	long 0
3e89c     00 00 00 00 | mailbox     	long 0
3e8a0     00 00 00 00 | mailbox2    	long 0
3e8a4     00 00 00 00 | lsample     	long 0
3e8a8     00 00 00 00 | rsample     	long 0
3e8ac                 | 
3e8ac                 | ' channel parameter block
3e8ac                 | 
3e8ac     00 00 00 00 | pointer0    	long 0   
3e8b0     00 00 00 00 | pointer0h   	long 0  
3e8b4     00 00 00 00 | sample0     	long 0
3e8b8     00 00 00 00 | rawspl0	    	long 0
3e8bc     00 00 00 00 | envph0	    	long 0
3e8c0     00 00 00 00 | sstart0     	long 0     ' start pointer and type at bit 31
3e8c4     00 00 00 00 | lstart0     	long 0
3e8c8     00 00 00 00 | lend0       	long 0
3e8cc     00 00 00 00 | volpan0     	long 0
3e8d0     00 00 00 00 | freqskip0   	long 0
3e8d4     00 00 00 00 | command0    	long 0
3e8d8     00 00 00 00 | envptr0	    	long 0
3e8dc     00 00 00 00 | envspd0	    	long 0
3e8e0     00 00 00 00 | envlen0	    	long 0
3e8e4     00 00 00 00 | res5	    	long 0
3e8e8     00 00 00 00 | res6	    	long 0
3e8ec                 | 
3e8ec     00 00 00 00 | oldspl		long 0
3e8f0     00 00 00 00 | afreq0      	long 0
3e8f4                 | 
3e8f4     00 00 00 00 | avol0       	long 0
3e8f8     00 00 00 00 | apan0       	long 0
3e8fc     00 00 00 00 | oldptrh	    	long 0
3e900     00 00 00 00 | cn          	long 0
3e904                 | 
3e904                 | ' Samples
3e904                 | 
3e904     00 00 00 00 | ls0         	long 0
3e908     00 00 00 00 | rs0         	long 0
3e90c                 | 
3e90c     00 00 00 00 | oldsample   	long 0
3e910                 | 
3e910     00 00 00 00 | scbase 		long 0
3e914     00 00 00 00 | scptr 		long 0
3e918     00 00 00 00 | scptr2		long 0
3e91c     00 00 00 00 | scope 		long 0
3e920                 | 
3e920     44 00 17 00 | dac         	long %10111_00000000_01_00010_0     	'random dither
3e924     46 00 17 00 | dac2        	long %10111_00000000_01_00011_0     	'pwm
3e928                 | 
3e928     00 18 07 00 | hubptr      	long $71800
3e92c     00 1E 00 00 | sr44100     	long 30*256
3e930                 | 
3e930     00 00 00 00 | cache1      	long 0
3e934     00 00 00 00 | cache2      	long 0
3e938     00 00 00 00 | cache3      	long 0
3e93c     00 00 00 00 | cache4      	long 0
3e940     00 00 00 00 | cache5      	long 0
3e944     00 00 00 00 | cache6      	long 0
3e948     00 00 00 00 | cache7      	long 0
3e94c     00 00 00 00 | cache8      	long 0
3e950     00 00 00 00 | cache9      	long 0
3e954     00 00 00 00 | cachea      	long 0
3e958     00 00 00 00 | cacheb      	long 0
3e95c     00 00 00 00 | cachec      	long 0
3e960     00 00 00 00 | cached      	long 0
3e964     00 00 00 00 | cachee      	long 0
3e968     00 00 00 00 | cachef      	long 0
3e96c     00 00 00 00 | cache0      	long 0
3e970                 | 
3e970     00 00 00 00 | cmd         	long 0
3e974     00 00 00 00 | hubaddr    	long 0
3e978     00 01 00 00 | count       	long 256
3e97c                 | 
3e97c     00 00 00 00 | addrlo 		long 0
3e980     00 00 00 00 | addrhi 		long 0
3e984     00 00 00 00 | pointer00 	long 0
3e988     00 00 00 00 | envhi 		long 0
3e98c     00 00 00 00 | envlo 		long 0
3e990     00 00 00 00 | envs1 		long 0
3e994     00 00 00 00 | envs2 		long 0
3e998     00 00 00 00 | noise0 		long 0
3e99c                 | 
3e99c                 | 'ct1 		long 0
3e99c                 | 'ct2 		long 0
3e99c                 | 
3e99c                 | 		fit 256		'todo: maybe the better interpolation. Or all params in cog
3e99c                 | 		fit 256		'todo: maybe the better interpolation. Or all params in cog
3e99c     00 00 00 00 
3e9a0     00 00 00 00 | null  			long 	0,0           ' for channel reset
3e9a4                 | 	alignl
3e9a4                 | __system__dat_
3e9a4     00 00 00 00 
3e9a8     00 00 00 00 | 	byte	$00[8]
3e9ac     03 00 00 00 
3e9b0     00 00 00 00 
3e9b4     00 00 00 00 
3e9b8     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e9bc     00 00 00 00 
      ...             
3ec48     00 00 00 00 
3ec4c     00 00 00 00 | 	byte	$00[660]
3ec50     00 00 40 0B | 	long	(180 {__system____root_opendir})<<20
3ec54     00 00 50 0B | 	long	(181 {__system____root_closedir})<<20
3ec58     00 00 60 0B | 	long	(182 {__system____root_readdir})<<20
3ec5c     00 00 70 0B | 	long	(183 {__system____root_stat})<<20
3ec60     00 00 00 00 
      ...             
3ec7c     00 00 00 00 
3ec80     00 00 00 00 | 	byte	$00[36]
3ec84     EC EC 03 00 | 	long	@@@__system__dat_ + 840
3ec88     EF EC 03 00 | 	long	@@@__system__dat_ + 843
3ec8c     10 ED 03 00 | 	long	@@@__system__dat_ + 876
3ec90     29 ED 03 00 | 	long	@@@__system__dat_ + 901
3ec94     44 ED 03 00 | 	long	@@@__system__dat_ + 928
3ec98     5E ED 03 00 | 	long	@@@__system__dat_ + 954
3ec9c     6E ED 03 00 | 	long	@@@__system__dat_ + 970
3eca0     80 ED 03 00 | 	long	@@@__system__dat_ + 988
3eca4     92 ED 03 00 | 	long	@@@__system__dat_ + 1006
3eca8     A4 ED 03 00 | 	long	@@@__system__dat_ + 1024
3ecac     B0 ED 03 00 | 	long	@@@__system__dat_ + 1036
3ecb0     C1 ED 03 00 | 	long	@@@__system__dat_ + 1053
3ecb4     D5 ED 03 00 | 	long	@@@__system__dat_ + 1073
3ecb8     DF ED 03 00 | 	long	@@@__system__dat_ + 1083
3ecbc     EF ED 03 00 | 	long	@@@__system__dat_ + 1099
3ecc0     FE ED 03 00 | 	long	@@@__system__dat_ + 1114
3ecc4     14 EE 03 00 | 	long	@@@__system__dat_ + 1136
3ecc8     2D EE 03 00 | 	long	@@@__system__dat_ + 1161
3eccc     41 EE 03 00 | 	long	@@@__system__dat_ + 1181
3ecd0     4F EE 03 00 | 	long	@@@__system__dat_ + 1195
3ecd4     63 EE 03 00 | 	long	@@@__system__dat_ + 1215
3ecd8     6F EE 03 00 | 	long	@@@__system__dat_ + 1227
3ecdc     81 EE 03 00 | 	long	@@@__system__dat_ + 1245
3ece0     99 EE 03 00 | 	long	@@@__system__dat_ + 1269
3ece4     AB EE 03 00 | 	long	@@@__system__dat_ + 1287
3ece8     BE EE 03 00 | 	long	@@@__system__dat_ + 1306
3ecec     4F 4B 00 4E 
3ecf0     75 6D 65 72 
3ecf4     69 63 61 6C 
3ecf8     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
3ecfc     75 6D 65 6E 
3ed00     74 20 6F 75 
3ed04     74 20 6F 66 
3ed08     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
3ed0c     61 69 6E 00 
3ed10     52 65 73 75 
3ed14     6C 74 20 6E 
3ed18     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
3ed1c     65 70 72 65 
3ed20     73 65 6E 74 
3ed24     61 62 6C 65 
3ed28     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
3ed2c     65 67 61 6C 
3ed30     20 6D 75 6C 
3ed34     74 69 62 79 
3ed38     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
3ed3c     65 71 75 65 
3ed40     6E 63 65 00 
3ed44     4E 6F 20 73 
3ed48     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
3ed4c     66 69 6C 65 
3ed50     20 6F 72 20 
3ed54     64 69 72 65 
3ed58     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3ed5c     79 00 42 61 
3ed60     64 20 66 69 
3ed64     6C 65 20 6E 
3ed68     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
3ed6c     72 00 50 65 
3ed70     72 6D 69 73 
3ed74     73 69 6F 6E 
3ed78     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
3ed7c     69 65 64 00 
3ed80     4E 6F 74 20 
3ed84     65 6E 6F 75 
3ed88     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
3ed8c     65 6D 6F 72 
3ed90     79 00 54 65 
3ed94     6D 70 6F 72 
3ed98     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
3ed9c     66 61 69 6C 
3eda0     75 72 65 00 
3eda4     46 69 6C 65 
3eda8     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
3edac     73 74 73 00 
3edb0     49 6E 76 61 
3edb4     6C 69 64 20 
3edb8     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
3edbc     6D 65 6E 74 
3edc0     00 54 6F 6F 
3edc4     20 6D 61 6E 
3edc8     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
3edcc     65 6E 20 66 
3edd0     69 6C 65 73 
3edd4     00 49 2F 4F 
3edd8     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
3eddc     6F 72 00 4E 
3ede0     6F 74 20 61 
3ede4     20 64 69 72 
3ede8     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
3edec     72 79 00 49 
3edf0     73 20 61 20 
3edf4     64 69 72 65 
3edf8     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3edfc     79 00 52 65 
3ee00     61 64 20 6F 
3ee04     6E 6C 79 20 
3ee08     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
3ee0c     20 73 79 73 
3ee10     74 65 6D 00 
3ee14     46 75 6E 63 
3ee18     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
3ee1c     20 6E 6F 74 
3ee20     20 69 6D 70 
3ee24     6C 65 6D 65 
3ee28     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
3ee2c     00 44 69 72 
3ee30     65 63 74 6F 
3ee34     72 79 20 6E 
3ee38     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
3ee3c     6D 70 74 79 
3ee40     00 4E 61 6D 
3ee44     65 20 74 6F 
3ee48     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
3ee4c     6E 67 00 44 
3ee50     65 76 69 63 
3ee54     65 20 6E 6F 
3ee58     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
3ee5c     65 6B 61 62 
3ee60     6C 65 00 42 
3ee64     61 64 20 61 
3ee68     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
3ee6c     73 73 00 42 
3ee70     72 6F 6B 65 
3ee74     6E 20 63 6F 
3ee78     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
3ee7c     74 69 6F 6E 
3ee80     00 44 65 76 
3ee84     69 63 65 20 
3ee88     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
3ee8c     65 73 6F 75 
3ee90     72 63 65 20 
3ee94     62 75 73 79 
3ee98     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
3ee9c     73 73 20 64 
3eea0     65 76 69 63 
3eea4     65 20 6C 69 
3eea8     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
3eeac     6F 20 73 70 
3eeb0     61 63 65 20 
3eeb4     6F 6E 20 64 
3eeb8     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
3eebc     65 00 55 6E 
3eec0     6B 6E 6F 77 
3eec4     6E 20 65 72 
3eec8     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
3eecc     00 00 00 00 
3eed0     00 00 00 00 
3eed4     00 00 00 00 | 	byte	$00[12]
3eed8     01 80 00 00 
3eedc     00 00 00 00 
3eee0     00 00 00 00 
3eee4     00 00 00 00 | 	byte	$01, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3eee8     00 00 00 00 | 	byte	$00, $00, $00, $00
3eeec     00 00 50 0D | 	long	(213 {__system___tx})<<20
3eef0     00 00 60 0D | 	long	(214 {__system___rx})<<20
3eef4     00 00 00 00 | 	byte	$00, $00, $00, $00
3eef8     00 00 70 0D | 	long	(215 {__system___rxtxioctl_0788})<<20
3eefc     00 00 80 0D | 	long	(216 {__system____dummy_flush_0789})<<20
3ef00     00 00 00 00 
3ef04     00 00 00 00 | 	byte	$00[8]
3ef08     01 00 00 00 
3ef0c     02 80 00 00 
3ef10     00 00 00 00 
3ef14     00 00 00 00 | 	byte	$01, $00, $00, $00, $02, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ef18     00 00 00 00 
3ef1c     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3ef20     00 00 50 0D | 	long	(213 {__system___tx})<<20
3ef24     00 00 60 0D | 	long	(214 {__system___rx})<<20
3ef28     00 00 00 00 | 	byte	$00, $00, $00, $00
3ef2c     00 00 70 0D | 	long	(215 {__system___rxtxioctl_0788})<<20
3ef30     00 00 80 0D | 	long	(216 {__system____dummy_flush_0789})<<20
3ef34     00 00 00 00 
3ef38     00 00 00 00 | 	byte	$00[8]
3ef3c     01 00 00 00 
3ef40     02 80 00 00 
3ef44     00 00 00 00 
3ef48     00 00 00 00 | 	byte	$01, $00, $00, $00, $02, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ef4c     00 00 00 00 
3ef50     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3ef54     00 00 50 0D | 	long	(213 {__system___tx})<<20
3ef58     00 00 60 0D | 	long	(214 {__system___rx})<<20
3ef5c     00 00 00 00 | 	byte	$00, $00, $00, $00
3ef60     00 00 70 0D | 	long	(215 {__system___rxtxioctl_0788})<<20
3ef64     00 00 80 0D | 	long	(216 {__system____dummy_flush_0789})<<20
3ef68     00 00 00 00 
      ...             
3f0d8     00 00 00 00 
3f0dc     00 00 00 00 | 	byte	$00[376]
3f0e0     E4 F0 03 00 | 	long	@@@__system__dat_ + 1856
3f0e4     00 00 00 00 
3f0e8     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3f0ec                 | 	alignl
3f0ec                 | _fatfs_cc_dat_
3f0ec     C7 00 FC 00 
3f0f0     E9 00 E2 00 
3f0f4     E4 00 E0 00 
3f0f8     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
3f0fc     EA 00 EB 00 
3f100     E8 00 EF 00 
3f104     EE 00 EC 00 
3f108     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
3f10c     C9 00 E6 00 
3f110     C6 00 F4 00 
3f114     F6 00 F2 00 
3f118     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
3f11c     FF 00 D6 00 
3f120     DC 00 F8 00 
3f124     A3 00 D8 00 
3f128     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
3f12c     E1 00 ED 00 
3f130     F3 00 FA 00 
3f134     F1 00 D1 00 
3f138     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
3f13c     BF 00 AE 00 
3f140     AC 00 BD 00 
3f144     BC 00 A1 00 
3f148     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
3f14c     91 25 92 25 
3f150     93 25 02 25 
3f154     24 25 C1 00 
3f158     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
3f15c     A9 00 63 25 
3f160     51 25 57 25 
3f164     5D 25 A2 00 
3f168     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
3f16c     14 25 34 25 
3f170     2C 25 1C 25 
3f174     00 25 3C 25 
3f178     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
3f17c     5A 25 54 25 
3f180     69 25 66 25 
3f184     60 25 50 25 
3f188     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
3f18c     F0 00 D0 00 
3f190     CA 00 CB 00 
3f194     C8 00 31 01 
3f198     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
3f19c     CF 00 18 25 
3f1a0     0C 25 88 25 
3f1a4     84 25 A6 00 
3f1a8     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
3f1ac     D3 00 DF 00 
3f1b0     D4 00 D2 00 
3f1b4     F5 00 D5 00 
3f1b8     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
3f1bc     DE 00 DA 00 
3f1c0     DB 00 D9 00 
3f1c4     FD 00 DD 00 
3f1c8     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
3f1cc     AD 00 B1 00 
3f1d0     17 20 BE 00 
3f1d4     B6 00 A7 00 
3f1d8     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
3f1dc     B0 00 A8 00 
3f1e0     B7 00 B9 00 
3f1e4     B3 00 B2 00 
3f1e8     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
3f1ec     61 00 1A 03 
3f1f0     E0 00 17 03 
3f1f4     F8 00 07 03 
3f1f8     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
3f1fc     78 01 00 01 
3f200     30 01 32 01 
3f204     06 01 39 01 
3f208     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
3f20c     2E 01 79 01 
3f210     06 01 80 01 
3f214     4D 00 43 02 
3f218     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
3f21c     82 01 84 01 
3f220     84 01 86 01 
3f224     87 01 87 01 
3f228     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
3f22c     8B 01 8B 01 
3f230     8D 01 8E 01 
3f234     8F 01 90 01 
3f238     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
3f23c     93 01 94 01 
3f240     F6 01 96 01 
3f244     97 01 98 01 
3f248     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
3f24c     9B 01 9C 01 
3f250     9D 01 20 02 
3f254     9F 01 A0 01 
3f258     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
3f25c     A2 01 A4 01 
3f260     A4 01 A6 01 
3f264     A7 01 A7 01 
3f268     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
3f26c     AB 01 AC 01 
3f270     AC 01 AE 01 
3f274     AF 01 AF 01 
3f278     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
3f27c     B3 01 B3 01 
3f280     B5 01 B5 01 
3f284     B7 01 B8 01 
3f288     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
3f28c     BB 01 BC 01 
3f290     BC 01 BE 01 
3f294     F7 01 C0 01 
3f298     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
3f29c     C3 01 C4 01 
3f2a0     C5 01 C4 01 
3f2a4     C7 01 C8 01 
3f2a8     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
3f2ac     CB 01 CA 01 
3f2b0     CD 01 10 01 
3f2b4     DD 01 01 00 
3f2b8     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
3f2bc     12 01 F3 01 
3f2c0     03 00 F1 01 
3f2c4     F4 01 F4 01 
3f2c8     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
3f2cc     22 02 12 01 
3f2d0     3A 02 09 00 
3f2d4     65 2C 3B 02 
3f2d8     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
3f2dc     66 2C 3F 02 
3f2e0     40 02 41 02 
3f2e4     41 02 46 02 
3f2e8     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
3f2ec     40 00 81 01 
3f2f0     86 01 55 02 
3f2f4     89 01 8A 01 
3f2f8     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
3f2fc     5A 02 90 01 
3f300     5C 02 5D 02 
3f304     5E 02 5F 02 
3f308     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
3f30c     62 02 94 01 
3f310     64 02 65 02 
3f314     66 02 67 02 
3f318     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
3f31c     6A 02 62 2C 
3f320     6C 02 6D 02 
3f324     6E 02 9C 01 
3f328     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
3f32c     9D 01 73 02 
3f330     74 02 9F 01 
3f334     76 02 77 02 
3f338     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
3f33c     7A 02 7B 02 
3f340     7C 02 64 2C 
3f344     7E 02 7F 02 
3f348     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
3f34c     82 02 A9 01 
3f350     84 02 85 02 
3f354     86 02 87 02 
3f358     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
3f35c     B1 01 B2 01 
3f360     45 02 8D 02 
3f364     8E 02 8F 02 
3f368     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
3f36c     B7 01 7B 03 
3f370     03 00 FD 03 
3f374     FE 03 FF 03 
3f378     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
3f37c     86 03 88 03 
3f380     89 03 8A 03 
3f384     B1 03 11 03 
3f388     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
3f38c     A3 03 A3 03 
3f390     C4 03 08 03 
3f394     CC 03 03 00 
3f398     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
3f39c     8F 03 D8 03 
3f3a0     18 01 F2 03 
3f3a4     0A 00 F9 03 
3f3a8     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
3f3ac     F5 03 F6 03 
3f3b0     F7 03 F7 03 
3f3b4     F9 03 FA 03 
3f3b8     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
3f3bc     20 03 50 04 
3f3c0     10 07 60 04 
3f3c4     22 01 8A 04 
3f3c8     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
3f3cc     0E 01 CF 04 
3f3d0     01 00 C0 04 
3f3d4     D0 04 44 01 
3f3d8     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
3f3dc     00 00 7D 1D 
3f3e0     01 00 63 2C 
3f3e4     00 1E 96 01 
3f3e8     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
3f3ec     00 1F 08 06 
3f3f0     10 1F 06 06 
3f3f4     20 1F 08 06 
3f3f8     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
3f3fc     40 1F 06 06 
3f400     51 1F 07 00 
3f404     59 1F 52 1F 
3f408     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
3f40c     5D 1F 56 1F 
3f410     5F 1F 60 1F 
3f414     08 06 70 1F 
3f418     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
3f41c     BB 1F C8 1F 
3f420     C9 1F CA 1F 
3f424     CB 1F DA 1F 
3f428     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
3f42c     F9 1F EA 1F 
3f430     EB 1F FA 1F 
3f434     FB 1F 80 1F 
3f438     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
3f43c     08 06 A0 1F 
3f440     08 06 B0 1F 
3f444     04 00 B8 1F 
3f448     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
3f44c     BC 1F CC 1F 
3f450     01 00 C3 1F 
3f454     D0 1F 02 06 
3f458     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
3f45c     E5 1F 01 00 
3f460     EC 1F F3 1F 
3f464     01 00 FC 1F 
3f468     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
3f46c     32 21 70 21 
3f470     10 02 84 21 
3f474     01 00 83 21 
3f478     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
3f47c     30 2C 2F 04 
3f480     60 2C 02 01 
3f484     67 2C 06 01 
3f488     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
3f48c     80 2C 64 01 
3f490     00 2D 26 08 
3f494     41 FF 1A 03 
3f498     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
3f49c     05 07 09 0E 
3f4a0     10 12 14 16 
3f4a4     18 1C 1E 43 
3f4a8     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
3f4ac     41 41 43 45 
3f4b0     45 45 49 49 
3f4b4     49 41 41 45 
3f4b8     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
3f4bc     4F 55 55 59 
3f4c0     4F 55 4F 9C 
3f4c4     4F 9E 9F 41 
3f4c8     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
3f4cc     A5 A6 A7 A8 
3f4d0     A9 AA AB AC 
3f4d4     AD AE AF B0 
3f4d8     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
3f4dc     41 41 41 B8 
3f4e0     B9 BA BB BC 
3f4e4     BD BE BF C0 
3f4e8     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
3f4ec     C5 41 41 C8 
3f4f0     C9 CA CB CC 
3f4f4     CD CE CF D1 
3f4f8     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
3f4fc     49 49 49 49 
3f500     D9 DA DB DC 
3f504     DD 49 DF 4F 
3f508     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
3f50c     4F E6 E8 E8 
3f510     55 55 55 59 
3f514     59 EE EF F0 
3f518     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
3f51c     F5 F6 F7 F8 
3f520     F9 FA FB FC 
3f524     FD FE FF 00 
3f528     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
3f52c     00 00 00 00 
3f530     FF FF FF FF 
3f534     1F 00 00 00 
3f538     1C 00 00 00 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00
3f53c     1F 00 00 00 
3f540     1E 00 00 00 
3f544     1F 00 00 00 
3f548     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
3f54c     1F 00 00 00 
3f550     1F 00 00 00 
3f554     1E 00 00 00 
3f558     1F 00 00 00 | 	byte	$1f, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
3f55c     1E 00 00 00 
3f560     1F 00 00 00 
3f564     00 00 00 00 
3f568     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00
3f56c     3B 00 00 00 
3f570     5A 00 00 00 
3f574     78 00 00 00 
3f578     97 00 00 00 | 	byte	$3b, $00, $00, $00, $5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00
3f57c     B5 00 00 00 
3f580     D4 00 00 00 
3f584     F3 00 00 00 
3f588     11 01 00 00 | 	byte	$b5, $00, $00, $00, $d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00
3f58c     30 01 00 00 
3f590     4E 01 00 00 
3f594     6D 01 00 00 
3f598     FF FF FF FF | 	byte	$30, $01, $00, $00, $4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff
3f59c     00 00 00 00 
      ...             
3f5b8     00 00 00 00 
3f5bc     00 00 00 00 | 	byte	$00[36]
3f5c0     DE F5 03 00 | 	long	@@@_fatfs_cc_dat_ + 1266
3f5c4     E2 F5 03 00 | 	long	@@@_fatfs_cc_dat_ + 1270
3f5c8     00 00 00 00 
3f5cc     00 00 00 00 
3f5d0     00 00 00 00 
3f5d4     00 00 00 00 
3f5d8     00 00       | 	byte	$00[18]
3f5da     3F 3F 3F 00 
3f5de     55 43 54 00 
3f5e2     55 43 54 00 
3f5e6     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
3f5ea     00 00 00 00 
3f5ee     00 00 00    | 	byte	$00[7]
3f5f1     CA 9A 3B 00 
3f5f5     00 00 00 01 
3f5f9     01 01 01 01 
3f5fd     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
3f601     91 11 11 11 
3f605     11 01 01 01 
3f609     01 01 01 01 
3f60d     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
3f611     01 01 01 01 
3f615     01 01 01    | 	byte	$01[7]
3f618     90 20 20 20 
3f61c     20 20 20 20 
3f620     20 20 20 20 
3f624     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
3f628     42 42 42 42 
3f62c     42 42 42 42 
3f630     42 42       | 	byte	$42[10]
3f632     20 20 20 20 
3f636     20 20 20    | 	byte	$20[7]
3f639     44 44 44 44 
3f63d     44 44       | 	byte	$44[6]
3f63f     04 04 04 04 
3f643     04 04 04 04 
3f647     04 04 04 04 
3f64b     04 04 04 04 
3f64f     04 04 04 04 | 	byte	$04[20]
3f653     20 20 20 20 
3f657     20 20       | 	byte	$20[6]
3f659     48 48 48 48 
3f65d     48 48       | 	byte	$48[6]
3f65f     08 08 08 08 
3f663     08 08 08 08 
3f667     08 08 08 08 
3f66b     08 08 08 08 
3f66f     08 08 08 08 | 	byte	$08[20]
3f673     20 20 20 20 
3f677     01 00 00 00 
3f67b     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
3f67c                 | __methodtable__
3f67c     A8 5A 01 00 | 	long	@_do_no_command
3f680     10 E7 01 00 | 	long	@_do_plus
3f684     94 DB 01 00 | 	long	@_do_minus
3f688     54 E6 01 00 | 	long	@_do_or
3f68c     58 E0 01 00 | 	long	@_do_mul
3f690     04 CC 01 00 | 	long	@_do_fdiv
3f694     30 C6 01 00 | 	long	@_do_and
3f698     EC C6 01 00 | 	long	@_do_div
3f69c     D4 DE 01 00 | 	long	@_do_mod
3f6a0     E0 EB 01 00 | 	long	@_do_shl
3f6a4     9C EC 01 00 | 	long	@_do_shr
3f6a8     90 EA 01 00 | 	long	@_do_power
3f6ac     FC BD 01 00 | 	long	@_do_getvar
3f6b0     34 86 01 00 | 	long	@_do_push
3f6b4     88 B9 01 00 | 	long	@_do_assign
3f6b8     68 F5 00 00 | 	long	@_do_cls
3f6bc     80 54 01 00 | 	long	@_do_new
3f6c0     D8 7E 01 00 | 	long	@_do_plot
3f6c4     10 17 01 00 | 	long	@_do_draw
3f6c8     E0 80 01 00 | 	long	@_do_print
3f6cc     50 F3 00 00 | 	long	@_do_circle
3f6d0     18 19 01 00 | 	long	@_do_fcircle
3f6d4     4C E2 00 00 | 	long	@_do_box
3f6d8     A4 21 01 00 | 	long	@_do_frame
3f6dc     B4 F7 00 00 | 	long	@_do_color
3f6e0     34 1F 01 00 | 	long	@_do_for
3f6e4     E4 56 01 00 | 	long	@_do_next
3f6e8     8C 43 01 00 | 	long	@_do_list
3f6ec     18 9D 01 00 | 	long	@_do_run
3f6f0     44 18 01 00 | 	long	@_do_error
3f6f4     90 2D 01 00 | 	long	@_do_fast_goto
3f6f8     80 2E 01 00 | 	long	@_do_find_goto
3f6fc     48 30 01 00 | 	long	@_do_slow_goto
3f700     C8 5A 01 00 | 	long	@_do_nothing
3f704     3C A1 01 00 | 	long	@_do_save
3f708     E4 45 01 00 | 	long	@_do_load
3f70c     28 73 01 00 | 	long	@_do_pinwrite
3f710     1C B7 01 00 | 	long	@_do_waitms
3f714     FC B7 01 00 | 	long	@_do_waitvbl
3f718     B0 32 01 00 | 	long	@_do_if
3f71c     DC 17 01 00 | 	long	@_do_else
3f720     70 C8 01 00 | 	long	@_do_eq
3f724     54 CD 01 00 | 	long	@_do_ge
3f728     8C D4 01 00 | 	long	@_do_le
3f72c     F0 D0 01 00 | 	long	@_do_gt
3f730     20 D8 01 00 | 	long	@_do_lt
3f734     C0 E2 01 00 | 	long	@_do_ne
3f738     94 9A 01 00 | 	long	@_do_rnd
3f73c     28 E4 00 00 | 	long	@_do_brun
3f740     74 DE 00 00 | 	long	@_do_beep
3f744     20 10 01 00 | 	long	@_do_dir
3f748     A4 6F 01 00 | 	long	@_do_paper
3f74c     78 36 01 00 | 	long	@_do_ink
3f750     B8 1E 01 00 | 	long	@_do_font
3f754     00 4F 01 00 | 	long	@_do_mode
3f758     3C 53 01 00 | 	long	@_do_mouse
3f75c     28 2C 01 00 | 	long	@_do_gettime
3f760     D4 FC 00 00 | 	long	@_do_cursor
3f764     C0 F4 00 00 | 	long	@_do_click
3f768     F8 53 01 00 | 	long	@_do_mousex
3f76c     3C 54 01 00 | 	long	@_do_mousey
3f770     70 53 01 00 | 	long	@_do_mousek
3f774     B4 53 01 00 | 	long	@_do_mousew
3f778     F0 AB 01 00 | 	long	@_do_sin
3f77c     DC AE 01 00 | 	long	@_do_stick
3f780     DC B1 01 00 | 	long	@_do_strig
3f784     34 AD 01 00 | 	long	@_do_sprite
3f788     58 0C 01 00 | 	long	@_do_defsprite
3f78c     F0 29 01 00 | 	long	@_do_getpixel
3f790     F8 B6 01 00 | 	long	@_do_waitclock
3f794     24 DE 01 00 | 	long	@_do_negative
3f798     08 8B 01 00 | 	long	@_do_rdpin
3f79c     A4 9C 01 00 | 	long	@_do_rqpin
3f7a0     5C 71 01 00 | 	long	@_do_pinread
3f7a4     08 B8 01 00 | 	long	@_do_wrpin
3f7a8     88 B8 01 00 | 	long	@_do_wxpin
3f7ac     08 B9 01 00 | 	long	@_do_wypin
3f7b0     9C 70 01 00 | 	long	@_do_pinfloat
3f7b4     1C 71 01 00 | 	long	@_do_pinlo
3f7b8     DC 70 01 00 | 	long	@_do_pinhi
3f7bc     E0 71 01 00 | 	long	@_do_pinstart
3f7c0     E8 72 01 00 | 	long	@_do_pintoggle
3f7c4     58 80 01 00 | 	long	@_do_position
3f7c8     C4 FB 00 00 | 	long	@_do_cos
3f7cc     58 B3 01 00 | 	long	@_do_tan
3f7d0     70 DD 00 00 | 	long	@_do_atn
3f7d4     74 DC 00 00 | 	long	@_do_asin
3f7d8     2C DA 00 00 | 	long	@_do_acos
3f7dc     FC AD 01 00 | 	long	@_do_sqr
3f7e0     F4 19 01 00 | 	long	@_do_fill
3f7e4     7C 05 01 00 | 	long	@_do_defsnd
3f7e8     D4 FD 00 00 | 	long	@_do_defenv
3f7ec     E0 8A 01 00 | 	long	@_do_rad
3f7f0     B8 0E 01 00 | 	long	@_do_deg
3f7f4     F8 36 01 00 | 	long	@_do_int
3f7f8     B0 73 01 00 | 	long	@_do_play
3f7fc     A8 A6 01 00 | 	long	@_do_setdelay
3f800     48 A7 01 00 | 	long	@_do_setenv
3f804     E8 A7 01 00 | 	long	@_do_setlen
3f808     88 A8 01 00 | 	long	@_do_setpan
3f80c     C8 A9 01 00 | 	long	@_do_setvol
3f810     68 AA 01 00 | 	long	@_do_setwave
3f814     28 A9 01 00 | 	long	@_do_setsustain
3f818     C8 97 01 00 | 	long	@_do_release
3f81c     28 28 01 00 | 	long	@_do_getenvsustain
3f820     88 7F 01 00 | 	long	@_do_poke
3f824     78 16 01 00 | 	long	@_do_dpoke
3f828     84 4B 01 00 | 	long	@_do_lpoke
3f82c     2C 70 01 00 | 	long	@_do_peek
3f830     08 16 01 00 | 	long	@_do_dpeek
3f834     14 4B 01 00 | 	long	@_do_lpeek
3f838     F4 22 01 00 | 	long	@_do_fre
3f83c     20 29 01 00 | 	long	@_do_getnotevalue
3f840     A8 C2 01 00 | 	long	@_do_getaddr
3f844     94 33 01 00 | 	long	@_do_inkey
3f848     AC D9 00 00 | 	long	@_do_abs
3f84c     8C 31 01 00 | 	long	@_do_hex
3f850     28 E1 00 00 | 	long	@_do_bin
3f854     54 B4 01 00 | 	long	@_do_val
3f858     70 F2 00 00 | 	long	@_do_chr
3f85c     28 DB 00 00 | 	long	@_do_asc
3f860     C0 40 01 00 | 	long	@_do_left
3f864     28 99 01 00 | 	long	@_do_right
3f868     A4 4C 01 00 | 	long	@_do_mid
3f86c     2C 42 01 00 | 	long	@_do_len
3f870     78 2C 01 00 | 	long	@_do_gosub
3f874     7C 98 01 00 | 	long	@_do_return
3f878     00 18 01 00 | 	long	@_do_end
3f87c     20 80 01 00 | 	long	@_do_pop
3f880     D4 49 01 00 | 	long	@_do_log
3f884     CC F0 00 00 | 	long	@_do_changevol
3f888     8C F1 00 00 | 	long	@_do_changewav
3f88c     F8 EF 00 00 | 	long	@_do_changepan
3f890     20 EC 00 00 | 	long	@_do_changefreq
3f894     08 AB 01 00 | 	long	@_do_shutup
3f898     50 9C 01 00 | 	long	@_do_round
3f89c     34 18 01 00 | 	long	@_do_enter
3f8a0     90 5B 01 00 | 	long	@_do_open
3f8a4     EC F4 00 00 | 	long	@_do_close
3f8a8     58 23 01 00 | 	long	@_do_get
3f8ac     50 87 01 00 | 	long	@_do_put
3f8b0     60 E6 00 00 | 	long	@_do_cd
3f8b4     E0 0E 01 00 | 	long	@_do_delete
3f8b8     40 4E 01 00 | 	long	@_do_mkdir
3f8bc     7C DF 00 00 | 	long	@_do_blit
3f8c0     C0 22 01 00 | 	long	@_do_framebuf
3f8c4     CC 5A 01 00 | 	long	@_do_on
3f8c8     EC AC 01 00 | 	long	@_do_skip
3f8cc     B4 37 01 00 | 	long	@_do_input
3f8d0     70 8D 01 00 | 	long	@_do_read
3f8d4     3C 98 01 00 | 	long	@_do_restore
3f8d8     08 69 01 00 | 	long	@_do_padx
3f8dc     3C 6B 01 00 | 	long	@_do_pady
3f8e0     70 6D 01 00 | 	long	@_do_padz
3f8e4     04 5E 01 00 | 	long	@_do_padrx
3f8e8     38 60 01 00 | 	long	@_do_padry
3f8ec     6C 62 01 00 | 	long	@_do_padrz
3f8f0     D4 66 01 00 | 	long	@_do_padw
3f8f4     A0 64 01 00 | 	long	@_do_pads
3f8f8     EC F7 00 00 | 	long	@_do_copy
3f8fc     A8 F5 00 00 | 	long	@_do_coginit
3f900     74 F7 00 00 | 	long	@_do_cogstop
3f904     1C 4C 01 00 | 	long	@_do_memlo
3f908     60 4C 01 00 | 	long	@_do_memtop
3f90c     CC A4 01 00 | 	long	@_do_setcolor
3f910     30 27 01 00 | 	long	@_do_getcolor
3f914     08 FD 00 00 | 	long	@_do_defchar
3f918     74 98 01 00 | 	long	@_do_restorepalette
3f91c     FC 1A 01 00 | 	long	@_do_findfirst
3f920     FC 1D 01 00 | 	long	@_do_findnext
3f924     2C A4 01 00 | 	long	@_do_setamode
3f928     1C 2B 01 00 | 	long	@_do_getrealfreq
3f92c     58 B0 01 00 | 	long	@_do_str
3f930     AC 2E 02 00 | 	long	@_hg010b_spin2_putchar
3f934     0C 27 03 00 | 	long	@__system___struct___bas_wrap_sender_tx_
3f938     50 27 03 00 | 	long	@__system___struct___bas_wrap_sender_rx_
3f93c     98 27 03 00 | 	long	@__system___struct___bas_wrap_sender_close_
3f940     3C 26 03 00 | 	long	@__system___struct__s_vfs_file_t_putchar_
3f944     AC 26 03 00 | 	long	@__system___struct__s_vfs_file_t_getchar_
3f948     F4 25 03 00 | 	long	@__system____strs_cl_pfunc_
3f94c     9C 9C 02 00 | 	long	@__system____root_opendir
3f950     38 9D 02 00 | 	long	@__system____root_closedir
3f954     B4 9C 02 00 | 	long	@__system____root_readdir
3f958     40 9D 02 00 | 	long	@__system____root_stat
3f95c     04 95 02 00 | 	long	@__system____default_putc
3f960     80 94 02 00 | 	long	@__system____default_getc
3f964     B0 95 02 00 | 	long	@__system____default_flush
3f968     44 19 03 00 | 	long	@_fatfs_cc_v_close
3f96c     2C 1C 03 00 | 	long	@_fatfs_cc_v_read
3f970     B8 1C 03 00 | 	long	@_fatfs_cc_v_write
3f974     30 1D 03 00 | 	long	@_fatfs_cc_v_lseek
3f978     CC 1D 03 00 | 	long	@_fatfs_cc_v_ioctl
3f97c     F8 1E 03 00 | 	long	@_fatfs_cc_v_flush
3f980     20 1E 03 00 | 	long	@_fatfs_cc_v_open
3f984     B0 18 03 00 | 	long	@_fatfs_cc_v_creat
3f988     80 19 03 00 | 	long	@_fatfs_cc_v_opendir
3f98c     F4 19 03 00 | 	long	@_fatfs_cc_v_closedir
3f990     34 1A 03 00 | 	long	@_fatfs_cc_v_readdir
3f994     00 1B 03 00 | 	long	@_fatfs_cc_v_stat
3f998     E0 1D 03 00 | 	long	@_fatfs_cc_v_mkdir
3f99c     00 1E 03 00 | 	long	@_fatfs_cc_v_rmdir
3f9a0     F0 1D 03 00 | 	long	@_fatfs_cc_v_remove
3f9a4     10 1E 03 00 | 	long	@_fatfs_cc_v_rename
3f9a8     44 1F 03 00 | 	long	@_fatfs_cc_v_init
3f9ac     4C 1F 03 00 | 	long	@_fatfs_cc_v_deinit
3f9b0     44 BD 02 00 | 	long	@_sdmm_cc_v_read
3f9b4     50 BD 02 00 | 	long	@_sdmm_cc_v_write
3f9b8     2C BE 02 00 | 	long	@_sdmm_cc_v_close
3f9bc     5C BD 02 00 | 	long	@_sdmm_cc_v_ioctl
3f9c0     24 BE 02 00 | 	long	@_sdmm_cc_v_flush
3f9c4     80 BD 02 00 | 	long	@_sdmm_cc_v_lseek
3f9c8     54 BE 02 00 | 	long	@_sdmm_cc_v_putc
3f9cc     A0 BE 02 00 | 	long	@_sdmm_cc_v_getc
3f9d0     00 4E 02 00 | 	long	@__system___tx
3f9d4     40 4E 02 00 | 	long	@__system___rx
3f9d8     6C A7 02 00 | 	long	@__system___rxtxioctl_0788
3f9dc     C4 A7 02 00 | 	long	@__system____dummy_flush_0789
3f9e0                 | __heap_base
3f9e0     00 00 00 00 
      ...             
570e0     00 00 00 00 
570e4     00 00 00 00 | 	long	0[24002]
570e8                 | objmem
570e8     00 00 00 00 
      ...             
619b8     00 00 00 00 
619bc     00 00 00 00 | 	long	0[10806]
619c0                 | stackspace
619c0     00 00 00 00 | 	long	0[1]
619c4 140             | 	org	COG_BSS_START
619c4 140             | _var01
619c4 140             | 	res	1
619c4 141             | _var02
619c4 141             | 	res	1
619c4 142             | _var03
619c4 142             | 	res	1
619c4 143             | _var04
619c4 143             | 	res	1
619c4 144             | _var05
619c4 144             | 	res	1
619c4 145             | _var06
619c4 145             | 	res	1
619c4 146             | _var07
619c4 146             | 	res	1
619c4 147             | _var08
619c4 147             | 	res	1
619c4 148             | _var09
619c4 148             | 	res	1
619c4 149             | arg01
619c4 149             | 	res	1
619c4 14a             | arg02
619c4 14a             | 	res	1
619c4 14b             | arg03
619c4 14b             | 	res	1
619c4 14c             | arg04
619c4 14c             | 	res	1
619c4 14d             | arg05
619c4 14d             | 	res	1
619c4 14e             | arg06
619c4 14e             | 	res	1
619c4 14f             | arg07
619c4 14f             | 	res	1
619c4 150             | arg08
619c4 150             | 	res	1
619c4 151             | arg09
619c4 151             | 	res	1
619c4 152             | arg10
619c4 152             | 	res	1
619c4 153             | local01
619c4 153             | 	res	1
619c4 154             | local02
619c4 154             | 	res	1
619c4 155             | local03
619c4 155             | 	res	1
619c4 156             | local04
619c4 156             | 	res	1
619c4 157             | local05
619c4 157             | 	res	1
619c4 158             | local06
619c4 158             | 	res	1
619c4 159             | local07
619c4 159             | 	res	1
619c4 15a             | local08
619c4 15a             | 	res	1
619c4 15b             | local09
619c4 15b             | 	res	1
619c4 15c             | local10
619c4 15c             | 	res	1
619c4 15d             | local11
619c4 15d             | 	res	1
619c4 15e             | local12
619c4 15e             | 	res	1
619c4 15f             | local13
619c4 15f             | 	res	1
619c4 160             | local14
619c4 160             | 	res	1
619c4 161             | local15
619c4 161             | 	res	1
619c4 162             | local16
619c4 162             | 	res	1
619c4 163             | local17
619c4 163             | 	res	1
619c4 164             | local18
619c4 164             | 	res	1
619c4 165             | local19
619c4 165             | 	res	1
619c4 166             | local20
619c4 166             | 	res	1
619c4 167             | local21
619c4 167             | 	res	1
619c4 168             | local22
619c4 168             | 	res	1
619c4 169             | local23
619c4 169             | 	res	1
619c4 16a             | local24
619c4 16a             | 	res	1
619c4 16b             | local25
619c4 16b             | 	res	1
619c4 16c             | local26
619c4 16c             | 	res	1
619c4 16d             | local27
619c4 16d             | 	res	1
619c4 16e             | local28
619c4 16e             | 	res	1
619c4 16f             | local29
619c4 16f             | 	res	1
619c4 170             | local30
619c4 170             | 	res	1
619c4 171             | local31
619c4 171             | 	res	1
619c4 172             | local32
619c4 172             | 	res	1
619c4 173             | local33
619c4 173             | 	res	1
619c4 174             | local34
619c4 174             | 	res	1
619c4 175             | local35
619c4 175             | 	res	1
619c4 176             | local36
619c4 176             | 	res	1
619c4 177             | local37
619c4 177             | 	res	1
619c4 178             | local38
619c4 178             | 	res	1
619c4 179             | local39
619c4 179             | 	res	1
619c4 17a             | local40
619c4 17a             | 	res	1
619c4 17b             | local41
619c4 17b             | 	res	1
619c4 17c             | local42
619c4 17c             | 	res	1
619c4 17d             | local43
619c4 17d             | 	res	1
619c4 17e             | local44
619c4 17e             | 	res	1
619c4 17f             | local45
619c4 17f             | 	res	1
619c4 180             | local46
619c4 180             | 	res	1
619c4 181             | local47
619c4 181             | 	res	1
619c4 182             | local48
619c4 182             | 	res	1
619c4 183             | local49
619c4 183             | 	res	1
619c4 184             | local50
619c4 184             | 	res	1
619c4 185             | local51
619c4 185             | 	res	1
619c4 186             | local52
619c4 186             | 	res	1
619c4 187             | muldiva_
619c4 187             | 	res	1
619c4 188             | muldivb_
619c4 188             | 	res	1
619c4 189             | 	fit	480
619c4 189             | 
